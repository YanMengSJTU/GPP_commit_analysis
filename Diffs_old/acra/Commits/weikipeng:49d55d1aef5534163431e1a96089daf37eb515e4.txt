diff --git a/.gitignore b/.gitignore
index 7b0d30b9..7a32c41b 100644
--- a/.gitignore
+++ b/.gitignore
@@ -9,4 +9,5 @@ release.properties
 build/
 local.properties
 .gradle
-acratest/
\ No newline at end of file
+acratest/
+acra.wiki/
\ No newline at end of file
diff --git a/README.md b/README.md
index f0bc8e1b..fe89e770 100644
--- a/README.md
+++ b/README.md
@@ -1,4 +1,13 @@
-[![Click here to lend your support to: ACRA - Application Crash Reports for Android and make a donation at www.pledgie.com !](https://pledgie.com/campaigns/18789.png?skin_name=chrome)](http://www.pledgie.com/campaigns/18789) [![Flattr this project](http://api.flattr.com/button/flattr-badge-large.png)](https://flattr.com/submit/auto?user_id=kevingaudin&url=http://acra.ch&title=ACRA%20-%20Application%20Crash%20Reports%20for%20Android&language=&tags=opensource%2Candroid&category=software&description=ACRA%20%28Application%20Crash%20Reports%20for%20Android%29%20is%20an%20open%20source%20android%20library%20for%20developers%2C%20enabling%20their%20apps%20to%20send%20detailed%20reports%20when%20they%20crash.)
+
+||Current Status|
+|---|---|
+|Bintray|[ ![Bintray](https://api.bintray.com/packages/acra/maven/ACRA/images/download.svg) ](https://bintray.com/acra/maven/ACRA/_latestVersion)|
+|Maven Central|[![Maven Central](https://img.shields.io/maven-central/v/ch.acra/acra-core.svg)](https://search.maven.org/#search%7Cga%7C1%7Cg%3A%22ch.acra%22)|
+|Android Versions|![minVersion](https://img.shields.io/badge/dynamic/json.svg?label=Minimal%20Android%20Version&colorB=FF6F00&query=version&uri=https%3A%2F%2Ffaendir.com%2Fandroid%2Facra.php%3Fversion%3DandroidMinVersion) ![targetVersion](https://img.shields.io/badge/dynamic/json.svg?label=Target%20Android%20Version&colorB=64DD17&query=version&uri=https%3A%2F%2Ffaendir.com%2Fandroid%2Facra.php%3Fversion%3DandroidVersion)|
+|License|![license](https://img.shields.io/github/license/ACRA/acra.svg)|
+|Donations|[![Flattr this project](http://api.flattr.com/button/flattr-badge-large.png)](https://flattr.com/submit/auto?user_id=kevingaudin&url=http://acra.ch&title=ACRA%20-%20Application%20Crash%20Reports%20for%20Android&language=&tags=opensource%2Candroid&category=software&description=ACRA%20%28Application%20Crash%20Reports%20for%20Android%29%20is%20an%20open%20source%20android%20library%20for%20developers%2C%20enabling%20their%20apps%20to%20send%20detailed%20reports%20when%20they%20crash.)|
+
+**Please take 5 Minutes to fill out our [User survey](https://goo.gl/forms/nyt9qkCk1GptRGlw2)!**
 
 What is ACRA ?
 ==============
@@ -18,7 +27,7 @@ A crash reporting feature for android apps is native since Android 2.2 (FroYo) b
   * you can send [error reports even if the application doesn't crash](http://github.com/ACRA/acra/wiki/AdvancedUsage#wiki-Sending_reports_for_caught_exceptions)
   * works for any application even if not delivered through Google PLay => great for devices/regions where the Google Play is not available, beta releases or for enterprise private apps
   * if there is no network coverage, reports are kept and sent on a later application restart
-  * can be used with [your own self-hosted report receiver script](http://github.com/ACRA/acra/wiki/AdvancedUsage#wiki-Reports_destination)
+  * can be used with [your own self-hosted report receiver script](https://github.com/ACRA/acra/wiki/Report-Destinations)
 
 ACRA's notification systems are clean. If a crash occurs, your application does not add user notifications over existing system's crash notifications or reporting features. By default, the "force close" dialog is not displayed anymore, to enable it set `alsoReportToAndroidFramework` to `true`.
 
@@ -26,13 +35,12 @@ The user is notified of an error only once, and you might enhance the perceived
 
 Please do not hesitate to open defects/enhancements requests in [the issue tracker](http://github.com/ACRA/acra/issues).
 
-Latest version ACRA v4.10.0 - 13-JUN-2017
+Latest version
 ===========================================
 
-**Note: Temporarily moved upload to `com.faendir:acra:4.10.0`, as all team members with repository access are absent**
-
-For a complete changelog, please see the [ChangeLog page](http://github.com/ACRA/acra/wiki/ChangeLog) in the Wiki.
+For the latest version and a complete changelog, please see the [ChangeLog page](http://github.com/ACRA/acra/wiki/ChangeLog) in the Wiki.
 
+For migrating from previous versions, please see our [Migration guide](http://github.com/ACRA/acra/wiki/Migrating) in the Wiki.
 
 And after that?
 ===============
diff --git a/acra-core/.gitignore b/acra-core/.gitignore
new file mode 100644
index 00000000..796b96d1
--- /dev/null
+++ b/acra-core/.gitignore
@@ -0,0 +1 @@
+/build
diff --git a/acra-core/build.gradle b/acra-core/build.gradle
new file mode 100644
index 00000000..1b358c86
--- /dev/null
+++ b/acra-core/build.gradle
@@ -0,0 +1,33 @@
+/*
+ * Copyright (c) 2017
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+apply plugin: 'com.android.library'
+apply plugin: 'maven-publish'
+apply plugin: 'com.jfrog.bintray'
+
+android {
+    defaultConfig {
+        consumerProguardFile 'proguard.cfg'
+    }
+}
+
+dependencies {
+    implementation "com.android.support:support-compat:$supportVersion"
+    api project(':acra-javacore')
+    compileOnly "com.google.auto.service:auto-service:$autoServiceVersion"
+    annotationProcessor project(':annotationprocessor')
+    compileOnly project(':annotations')
+}
diff --git a/acra/src/main/proguard/proguard.cfg b/acra-core/proguard.cfg
similarity index 63%
rename from acra/src/main/proguard/proguard.cfg
rename to acra-core/proguard.cfg
index 5c4d5e30..d6fb17d0 100644
--- a/acra/src/main/proguard/proguard.cfg
+++ b/acra-core/proguard.cfg
@@ -9,11 +9,10 @@
 # "project.properties" file to get the path to the default "proguard-android-optimize.txt".
 -keepattributes *Annotation*
 
-# Keep all the ACRA classes
--keep class org.acra.** { *; }
+# ACRA loads Plugins using reflection, so we need to keep all Plugin classes
+-keep class * extends @android.support.annotation.Keep org.acra.** {*;}
 
-# Don't warn about removed methods from AppCompat
--dontwarn android.support.v4.app.NotificationCompat*
+# ACRA uses enum fields in annotations, so we have to keep those
+-keep enum org.acra.** {*;}
 
-# These classes are constucted with reflection.
--keep public class * implements org.acra.sender.ReportSenderFactory { public <methods>; }
+-dontwarn android.support.**
\ No newline at end of file
diff --git a/acra/src/main/AndroidManifest.xml b/acra-core/src/main/AndroidManifest.xml
similarity index 73%
rename from acra/src/main/AndroidManifest.xml
rename to acra-core/src/main/AndroidManifest.xml
index b94b34d0..e54c3861 100644
--- a/acra/src/main/AndroidManifest.xml
+++ b/acra-core/src/main/AndroidManifest.xml
@@ -1,4 +1,3 @@
-<?xml version="1.0" encoding="utf-8"?>
 <!--
   ~ Copyright (c) 2017
   ~
@@ -14,21 +13,15 @@
   ~ See the License for the specific language governing permissions and
   ~ limitations under the License.
   -->
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-          package="ch.acra.acra">
 
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="org.acra">
+    <uses-permission android:name="android.permission.WAKE_LOCK" android:maxSdkVersion="25"/>
     <application>
-        <activity
-            android:name="org.acra.dialog.CrashReportDialog"
-            android:theme="@android:style/Theme.Dialog"
-            android:launchMode="singleInstance"
-            android:excludeFromRecents="true"
-            android:finishOnTaskLaunch="true"
-            android:process=":acra"/>
-
         <service
             android:name="org.acra.sender.SenderService"
             android:exported="false"
+            android:permission="android.permission.BIND_JOB_SERVICE"
             android:process=":acra" />
 
         <provider
@@ -38,4 +31,4 @@
             android:process=":acra"
             android:grantUriPermissions="true"/>
     </application>
-</manifest>
\ No newline at end of file
+</manifest>
diff --git a/acra-core/src/main/java/org/acra/ACRA.java b/acra-core/src/main/java/org/acra/ACRA.java
new file mode 100644
index 00000000..2a19efad
--- /dev/null
+++ b/acra-core/src/main/java/org/acra/ACRA.java
@@ -0,0 +1,289 @@
+/*
+ * Copyright (c) 2017
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.acra;
+
+import android.app.Application;
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.os.Build;
+import android.support.annotation.Keep;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import org.acra.config.ACRAConfigurationException;
+import org.acra.config.CoreConfiguration;
+import org.acra.config.CoreConfigurationBuilder;
+import org.acra.legacy.LegacyFileHandler;
+import org.acra.log.ACRALog;
+import org.acra.log.AndroidLogDelegate;
+import org.acra.prefs.SharedPreferencesFactory;
+import org.acra.reporter.ErrorReporterImpl;
+import org.acra.util.ApplicationStartupProcessor;
+import org.acra.util.StreamReader;
+import org.acra.util.StubCreator;
+
+import java.io.IOException;
+
+/**
+ * Use this class to initialize the crash reporting feature using
+ * {@link #init(Application)} as soon as possible in your {@link Application}
+ * subclass {@link Application#onCreate()} method. Configuration items must have
+ * been set by using {@link org.acra.annotation.AcraCore} above the declaration of your
+ * {@link Application} subclass.
+ *
+ * @author Kevin Gaudin
+ */
+@SuppressWarnings({"WeakerAccess", "unused"})
+@Keep
+public final class ACRA {
+    private ACRA() {
+    }
+
+    public static /*non-final*/ boolean DEV_LOGGING = false; // Should be false for release.
+
+    public static final String LOG_TAG = ACRA.class.getSimpleName();
+
+    @NonNull
+    public static ACRALog log = new AndroidLogDelegate();
+
+    private static final String ACRA_PRIVATE_PROCESS_NAME = ":acra";
+
+    /**
+     * The key of the application default SharedPreference where you can put a
+     * 'true' Boolean value to disable ACRA.
+     */
+    public static final String PREF_DISABLE_ACRA = "acra.disable";
+
+    /**
+     * Alternatively, you can use this key if you prefer your users to have the
+     * checkbox ticked to enable crash reports. If both acra.disable and
+     * acra.enable are set, the value of acra.disable takes over the other.
+     */
+    public static final String PREF_ENABLE_ACRA = "acra.enable";
+
+    /**
+     * The key of the SharedPreference allowing the user to disable sending
+     * content of logcat/dropbox. System logs collection is also dependent of
+     * the READ_LOGS permission.
+     */
+    public static final String PREF_ENABLE_SYSTEM_LOGS = "acra.syslog.enable";
+
+    /**
+     * The key of the SharedPreference allowing the user to disable sending his
+     * device id. Device ID collection is also dependent of the READ_PHONE_STATE
+     * permission.
+     */
+    public static final String PREF_ENABLE_DEVICE_ID = "acra.deviceid.enable";
+
+    /**
+     * The key of the SharedPreference allowing the user to always include his
+     * email address.
+     */
+    public static final String PREF_USER_EMAIL_ADDRESS = "acra.user.email";
+
+    /**
+     * The key of the SharedPreference allowing the user to automatically accept
+     * sending reports.
+     */
+    public static final String PREF_ALWAYS_ACCEPT = "acra.alwaysaccept";
+
+    /**
+     * The version number of the application the last time ACRA was started.
+     * This is used to determine whether unsent reports should be discarded
+     * because they are old and out of date.
+     */
+    public static final String PREF_LAST_VERSION_NR = "acra.lastVersionNr";
+
+    @NonNull
+    private static ErrorReporter errorReporterSingleton = StubCreator.createErrorReporterStub();
+
+    /**
+     * <p>
+     * Initialize ACRA for a given Application.
+     * <p>
+     * The call to this method should be placed as soon as possible in the {@link Application#attachBaseContext(Context)} method.
+     * <p>
+     * Uses the configuration as configured with the @ReportCrashes annotation.
+     * Sends any unsent reports.
+     * </p>
+     *
+     * @param app Your Application class.
+     * @throws IllegalStateException if it is called more than once.
+     */
+    public static void init(@NonNull Application app) {
+        init(app, new CoreConfigurationBuilder(app));
+    }
+
+    /**
+     * <p>
+     * Initialize ACRA for a given Application.
+     * <p>
+     * The call to this method should be placed as soon as possible in the {@link Application#attachBaseContext(Context)} method.
+     * <p>
+     * Uses the configuration as configured with the @ReportCrashes annotation.
+     * Sends any unsent reports.
+     * </p>
+     *
+     * @param app     Your Application class.
+     * @param builder ConfigurationBuilder to manually set up ACRA configuration.
+     */
+    public static void init(@NonNull Application app, @NonNull CoreConfigurationBuilder builder) {
+        init(app, builder, true);
+    }
+
+    /**
+     * <p>
+     * Initialize ACRA for a given Application.
+     * <p>
+     * The call to this method should be placed as soon as possible in the {@link Application#attachBaseContext(Context)}  method.
+     * </p>
+     *
+     * @param app                            Your Application class.
+     * @param builder                        ConfigurationBuilder to manually set up ACRA configuration.
+     * @param checkReportsOnApplicationStart Whether to invoke ErrorReporter.checkReportsOnApplicationStart().
+     */
+    public static void init(@NonNull Application app, @NonNull CoreConfigurationBuilder builder, boolean checkReportsOnApplicationStart) {
+        try {
+            init(app, builder.build(), checkReportsOnApplicationStart);
+        } catch (ACRAConfigurationException e) {
+            log.w(LOG_TAG, "Configuration Error - ACRA not started : " + e.getMessage());
+        }
+    }
+
+    /**
+     * <p>
+     * Initialize ACRA for a given Application.
+     * <p>
+     * The call to this method should be placed as soon as possible in the {@link Application#attachBaseContext(Context)} method.
+     * <p>
+     * Sends any unsent reports.
+     * </p>
+     *
+     * @param app    Your Application class.
+     * @param config CoreConfiguration to manually set up ACRA configuration.
+     * @throws IllegalStateException if it is called more than once.
+     */
+    public static void init(@NonNull Application app, @NonNull CoreConfiguration config) {
+        init(app, config, true);
+    }
+
+    /**
+     * <p>
+     * Initialize ACRA for a given Application. The call to this method should
+     * be placed as soon as possible in the {@link Application#attachBaseContext(Context)}
+     * method.
+     * </p>
+     *
+     * @param app                            Your Application class.
+     * @param config                         CoreConfiguration to manually set up ACRA configuration.
+     * @param checkReportsOnApplicationStart Whether to invoke ErrorReporter.checkReportsOnApplicationStart().
+     * @throws IllegalStateException if it is called more than once.
+     */
+    public static void init(@NonNull Application app, @NonNull CoreConfiguration config, boolean checkReportsOnApplicationStart) {
+
+        final boolean senderServiceProcess = isACRASenderServiceProcess();
+        if (senderServiceProcess) {
+            if (ACRA.DEV_LOGGING)
+                log.d(LOG_TAG, "Not initialising ACRA to listen for uncaught Exceptions as this is the SendWorker process and we only send reports, we don't capture them to avoid infinite loops");
+        }
+
+        final boolean supportedAndroidVersion = Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH;
+        if (!supportedAndroidVersion) {
+            // NB We keep initialising so that everything is configured. But ACRA is never enabled below.
+            log.w(LOG_TAG, "ACRA 5.1.0+ requires ICS or greater. ACRA is disabled and will NOT catch crashes or send messages.");
+        }
+
+        if (isInitialised()) {
+            log.w(LOG_TAG, "ACRA#init called more than once. Won't do anything more.");
+            return;
+        }
+
+        //noinspection ConstantConditions
+        if (config == null) {
+            log.e(LOG_TAG, "ACRA#init called but no CoreConfiguration provided");
+            return;
+        }
+
+        final SharedPreferences prefs = new SharedPreferencesFactory(app, config).create();
+
+        new LegacyFileHandler(app, prefs).updateToCurrentVersionIfNecessary();
+        if (!senderServiceProcess) {
+            // Initialize ErrorReporter with all required data
+            final boolean enableAcra = supportedAndroidVersion && SharedPreferencesFactory.shouldEnableACRA(prefs);
+            // Indicate that ACRA is or is not listening for crashes.
+            log.i(LOG_TAG, "ACRA is " + (enableAcra ? "enabled" : "disabled") + " for " + app.getPackageName() + ", initializing...");
+            ErrorReporterImpl reporter = new ErrorReporterImpl(app, config, enableAcra, supportedAndroidVersion);
+            errorReporterSingleton = reporter;
+
+            // Check for approved reports and send them (if enabled).
+            // NB don't check if senderServiceProcess as it will gather these reports itself.
+            if (checkReportsOnApplicationStart) {
+                new ApplicationStartupProcessor(app, config).checkReports(enableAcra);
+            }
+
+            // register after initAcra is called to avoid a
+            // NPE in ErrorReporter.disable() because
+            // the context could be null at this moment.
+            prefs.registerOnSharedPreferenceChangeListener(reporter);
+        }
+    }
+
+    /**
+     * @return true is ACRA has been initialised.
+     */
+    @SuppressWarnings("unused")
+    public static boolean isInitialised() {
+        return errorReporterSingleton instanceof ErrorReporterImpl;
+    }
+
+    /**
+     * @return true if the current process is the process running the SenderService.
+     * NB this assumes that your SenderService is configured to used the default ':acra' process.
+     */
+    public static boolean isACRASenderServiceProcess() {
+        final String processName = getCurrentProcessName();
+        if (ACRA.DEV_LOGGING) log.d(LOG_TAG, "ACRA processName='" + processName + '\'');
+        //processName sometimes (or always?) starts with the package name, so we use endsWith instead of equals
+        return processName != null && processName.endsWith(ACRA_PRIVATE_PROCESS_NAME);
+    }
+
+    @Nullable
+    private static String getCurrentProcessName() {
+        try {
+            return new StreamReader("/proc/self/cmdline").read().trim();
+        } catch (IOException e) {
+            return null;
+        }
+    }
+
+    /**
+     * @return the current instance of ErrorReporter.
+     * @throws IllegalStateException if {@link ACRA#init(android.app.Application)} has not yet been called.
+     */
+    @NonNull
+    public static ErrorReporter getErrorReporter() {
+        return errorReporterSingleton;
+    }
+
+
+    public static void setLog(@NonNull ACRALog log) {
+        //noinspection ConstantConditions (do not rely on annotation alone)
+        if (log == null) {
+            throw new NullPointerException("ACRALog cannot be null");
+        }
+        ACRA.log = log;
+    }
+}
diff --git a/acra-core/src/main/java/org/acra/ACRAConstants.java b/acra-core/src/main/java/org/acra/ACRAConstants.java
new file mode 100644
index 00000000..c875fbae
--- /dev/null
+++ b/acra-core/src/main/java/org/acra/ACRAConstants.java
@@ -0,0 +1,78 @@
+/*
+ * Copyright (c) 2017
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.acra;
+
+import static org.acra.ReportField.*;
+
+/**
+ * Responsible for collating those constants shared among the ACRA components.
+ *
+ * @author William Ferguson
+ * @since 4.3.0
+ */
+public final class ACRAConstants {
+    private ACRAConstants() {
+    }
+
+    public static final String REPORTFILE_EXTENSION = ".stacktrace";
+
+    /**
+     * Suffix to be added to report files when they have been approved by the
+     * user in NOTIFICATION mode
+     */
+    public static final String APPROVED_SUFFIX = "-approved";
+    /**
+     * This key is used to store the silent state of a report sent by
+     * handleSilentException().
+     */
+    public static final String SILENT_SUFFIX = "-" + IS_SILENT;
+    /**
+     * This is the maximum number of previously stored reports that we send
+     * in one batch to avoid overloading the network.
+     */
+    public static final int MAX_SEND_REPORTS = 5;
+
+    /**
+     * A special String value to allow the usage of a pseudo-null default value
+     * in annotation parameters.
+     */
+    public static final String NULL_VALUE = "ACRA-NULL-STRING";
+
+    public static final int DEFAULT_RES_VALUE = 0;
+
+    public static final String DEFAULT_STRING_VALUE = "";
+
+    public static final int DEFAULT_LOG_LINES = 100;
+
+    public static final int DEFAULT_BUFFER_SIZE_IN_BYTES = 8192;
+
+    /**
+     * Default list of {@link ReportField}s to be sent in reports. You can set
+     * your own list with
+     * {@link org.acra.annotation.AcraCore#reportContent()}.
+     */
+    public static final ReportField[] DEFAULT_REPORT_FIELDS = {REPORT_ID, APP_VERSION_CODE, APP_VERSION_NAME, PACKAGE_NAME, FILE_PATH, PHONE_MODEL, BRAND, PRODUCT, ANDROID_VERSION,
+            BUILD, TOTAL_MEM_SIZE, AVAILABLE_MEM_SIZE, BUILD_CONFIG, CUSTOM_DATA, IS_SILENT, STACK_TRACE, INITIAL_CONFIGURATION, CRASH_CONFIGURATION, DISPLAY, USER_COMMENT, USER_EMAIL,
+            USER_APP_START_DATE, USER_CRASH_DATE, DUMPSYS_MEMINFO, LOGCAT, INSTALLATION_ID, DEVICE_FEATURES, ENVIRONMENT, SHARED_PREFERENCES};
+
+    public static final String DATE_TIME_FORMAT_STRING = "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ";
+
+    public static final String DEFAULT_CERTIFICATE_TYPE = "X.509";
+
+    public static final String NOT_AVAILABLE = "N/A";
+
+    public static final String UTF8 = "UTF-8";
+}
diff --git a/acra-core/src/main/java/org/acra/ErrorReporter.java b/acra-core/src/main/java/org/acra/ErrorReporter.java
new file mode 100644
index 00000000..947d8fda
--- /dev/null
+++ b/acra-core/src/main/java/org/acra/ErrorReporter.java
@@ -0,0 +1,82 @@
+package org.acra;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+/**
+ * This interface contains methods used to interact with ACRA after it has been initialized
+ *
+ * @author F43nd1r
+ * @since 29.12.2017
+ */
+
+public interface ErrorReporter {
+    /**
+     * Use this method to provide the ErrorReporter with data of your running application.
+     * You should call this at several key places in your code the same way as you would output important debug data in a log file.
+     * Only the latest value is kept for each key (no history of the values is sent in the report).
+     *
+     * @param key   A key for your custom data.
+     * @param value The value associated to your key.
+     * @return The previous value for this key if there was one, or null.
+     * @see #removeCustomData(String)
+     * @see #getCustomData(String)
+     */
+    String putCustomData(@NonNull String key, String value);
+
+    /**
+     * Removes a key/value pair from your reports custom data field.
+     *
+     * @param key The key of the data to be removed.
+     * @return The value for this key before removal.
+     * @see #putCustomData(String, String)
+     * @see #getCustomData(String)
+     */
+    String removeCustomData(@NonNull String key);
+
+    /**
+     * Removes all key/value pairs from your reports custom data field.
+     */
+    void clearCustomData();
+
+    /**
+     * Gets the current value for a key in your reports custom data field.
+     *
+     * @param key The key of the data to be retrieved.
+     * @return The value for this key.
+     * @see #putCustomData(String, String)
+     * @see #removeCustomData(String)
+     */
+    String getCustomData(@NonNull String key);
+
+    /**
+     * Send a silent report for the given exception
+     *
+     * @param e The {@link Throwable} to be reported. If null the report will contain a new Exception("Report requested by developer").
+     */
+    void handleSilentException(@Nullable Throwable e);
+
+
+    /**
+     * Enable or disable this ErrorReporter. By default it is enabled.
+     *
+     * @param enabled Whether this ErrorReporter should capture Exceptions and forward them as crash reports.
+     */
+    void setEnabled(boolean enabled);
+
+    /**
+     * Send a normal report for the given exception
+     *
+     * @param e              The {@link Throwable} to be reported. If null the report will contain a new Exception("Report requested by developer").
+     * @param endApplication if you want the application to be ended after sending the report.
+     */
+    void handleException(@Nullable Throwable e, boolean endApplication);
+
+    /**
+     * Send a normal report for the given exception.
+     * The application is then killed and restarted by the system.
+     *
+     * @param e The {@link Throwable} to be reported. If null the report will contain a new Exception("Report requested by developer").
+     */
+    void handleException(@Nullable Throwable e);
+}
diff --git a/acra-core/src/main/java/org/acra/annotation/AcraCore.java b/acra-core/src/main/java/org/acra/annotation/AcraCore.java
new file mode 100644
index 00000000..bfdf1c52
--- /dev/null
+++ b/acra-core/src/main/java/org/acra/annotation/AcraCore.java
@@ -0,0 +1,326 @@
+/*
+ * Copyright (c) 2017
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.annotation;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.StringRes;
+
+import org.acra.ACRAConstants;
+import org.acra.ReportField;
+import org.acra.attachment.AttachmentUriProvider;
+import org.acra.attachment.DefaultAttachmentProvider;
+import org.acra.config.BaseCoreConfigurationBuilder;
+import org.acra.config.DefaultRetryPolicy;
+import org.acra.config.RetryPolicy;
+import org.acra.data.StringFormat;
+import org.acra.file.Directory;
+import org.acra.sender.DefaultReportSenderFactory;
+import org.acra.sender.ReportSenderFactory;
+
+import java.lang.annotation.Documented;
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Inherited;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * Main ACRA configuration
+ *
+ * @author F43nd1r
+ * @since 01.06.2017
+ */
+@Documented
+@Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.TYPE)
+@Inherited
+@Configuration(baseBuilderClass = BaseCoreConfigurationBuilder.class, isPlugin = false)
+public @interface AcraCore {
+
+    /**
+     * Name of the SharedPreferences that will host ACRA settings which you can make accessible to your users through a preferences screen:
+     * <ul>
+     * <li>{@link org.acra.ACRA#PREF_DISABLE_ACRA} or {@link org.acra.ACRA#PREF_ENABLE_ACRA}</li>
+     * <li>{@link org.acra.ACRA#PREF_ALWAYS_ACCEPT}</li>
+     * <li>{@link org.acra.ACRA#PREF_ENABLE_DEVICE_ID}</li>
+     * <li>{@link org.acra.ACRA#PREF_ENABLE_SYSTEM_LOGS}</li>
+     * </ul>
+     * Default is to use the application default SharedPreferences, as retrieved with {@link android.preference.PreferenceManager#getDefaultSharedPreferences(android.content.Context)}
+     *
+     * @return SharedPreferences name.
+     */
+    @NonNull String sharedPreferencesName() default ACRAConstants.DEFAULT_STRING_VALUE;
+
+    /**
+     * If enabled, DropBox events collection will include system tags:
+     * <ul>
+     * <li>system_app_anr</li>
+     * <li>system_app_wtf</li>
+     * <li>system_app_crash</li>
+     * <li>system_server_anr</li>
+     * <li>system_server_wtf</li>
+     * <li>system_server_crash</li>
+     * <li>BATTERY_DISCHARGE_INFO</li>
+     * <li>SYSTEM_RECOVERY_LOG</li>
+     * <li>SYSTEM_BOOT</li>
+     * <li>SYSTEM_LAST_KMSG</li>
+     * <li>APANIC_CONSOLE</li>
+     * <li>APANIC_THREADS</li>
+     * <li>SYSTEM_RESTART</li>
+     * <li>SYSTEM_TOMBSTONE</li>
+     * <li>data_app_strictmode</li>
+     * </ul>
+     *
+     * @return if system tags are to be included as part of DropBox events.
+     */
+    boolean includeDropBoxSystemTags() default false;
+
+    /**
+     * Custom tags to be included in DropBox event collection
+     *
+     * @return tags that you want to be fetched when collecting DropBox events.
+     */
+    @NonNull String[] additionalDropBoxTags() default {};
+
+    /**
+     * DropBox event collection will look back this many minutes
+     *
+     * @return Number of minutes to look back.
+     */
+    int dropboxCollectionMinutes() default 5;
+
+    /**
+     * <p>
+     * Arguments to be passed to the logcat command line. Default is { "-t", "100", "-v", "time" } for:
+     * </p>
+     * <pre>logcat -t 100 -v time</pre>
+     * <p>
+     * Do not include -b arguments for buffer selection, include {@link ReportField#EVENTSLOG} and {@link ReportField#RADIOLOG} in {@link #reportContent()} to activate alternative logcat buffers reporting.
+     * They will use the same other arguments as those provided here.
+     * </p>
+     * <p>
+     * See <a href="http://developer.android.com/intl/fr/guide/developing/tools/adb.html#logcatoptions">Listing of logcat Command Options</a>.
+     * </p>
+     *
+     * @return arguments to supply if retrieving the log as part of the report.
+     */
+    @NonNull String[] logcatArguments() default {"-t", "" + ACRAConstants.DEFAULT_LOG_LINES, "-v", "time"};
+
+    /**
+     * <p>
+     * Redefines the list of {@link ReportField}s collected and sent in your reports.
+     * </p>
+     * <p>
+     * You can also use this property to modify fields order in your reports.
+     * </p>
+     * <p>
+     * The default list is {@link org.acra.ACRAConstants#DEFAULT_REPORT_FIELDS}
+     *
+     * @return fields to be included in the report.
+     */
+    @NonNull ReportField[] reportContent() default {};
+
+    /**
+     * Controls whether unapproved reports are deleted on application start or not.
+     * <p>
+     * Silent and Toast reports are automatically approved.
+     * Dialog and Notification reports require explicit approval by the user before they are sent.
+     * </p>
+     * <p>
+     * On application restart the user is prompted with approval for one unsent report.
+     * So you generally don't want to accumulate unapproved reports, otherwise you will prompt them multiple times.
+     * </p>
+     * <p>
+     * If this is set to true then all unapproved reports bar one will be deleted on application start.
+     * The last report is always retained because that is the report that probably just happened.
+     * </p>
+     *
+     * @return if ACRA should delete unapproved reports on application start.
+     */
+    boolean deleteUnapprovedReportsOnApplicationStart() default true;
+
+    /**
+     * This property can be used to determine whether old (out of date) reports should be sent or not.
+     *
+     * @return if ACRA should delete any unsent reports on startup if the application has been updated since the last time the application was started.
+     */
+    boolean deleteOldUnsentReportsOnApplicationStart() default true;
+
+    /**
+     * Set this to true if you prefer displaying the native force close dialog after ACRA is done.
+     * Recommended: Keep this set to false if using interactions with user input.
+     *
+     * @return if the native force close dialog should be displayed.
+     */
+    boolean alsoReportToAndroidFramework() default false;
+
+    /**
+     * Add here your {@link android.content.SharedPreferences} identifier Strings if you use others than your application's default. They will be added to the {@link ReportField#SHARED_PREFERENCES} field.
+     *
+     * @return names of additional preferences.
+     */
+    @NonNull String[] additionalSharedPreferences() default {};
+
+    /**
+     * Set this to true if you want to include only logcat lines related to your Application process. Note that this is always done by android starting with API 16 (Jellybean)
+     *
+     * @return true if you want to filter logcat with your process id.
+     */
+    boolean logcatFilterByPid() default true;
+
+    /**
+     * Set this to true if you want to read logcat lines in a non blocking way for your thread. It has a default timeout of 3 seconds.
+     *
+     * @return if reading of logcat lines should not block the current thread.
+     */
+    boolean logcatReadNonBlocking() default false;
+
+    /**
+     * Set this to false if you want to disable sending reports in development mode. Only signed application packages will send reports.
+     *
+     * @return if reports should only be sent from signed packages.
+     */
+    boolean sendReportsInDevMode() default true;
+
+    /**
+     * Provide here regex patterns to be evaluated on each {@link android.content.SharedPreferences} key to exclude KV pairs from the collected SharedPreferences.
+     * This allows you to exclude sensitive user data like passwords from being collected.
+     *
+     * @return regex patterns, every matching key is not collected.
+     */
+    @NonNull String[] excludeMatchingSharedPreferencesKeys() default {};
+
+    /**
+     * Provide here regex patterns to be evaluated on each {@link android.provider.Settings.System}, {@link android.provider.Settings.Secure} and {@link android.provider.Settings.Global} key to exclude KV pairs from being collected.
+     * This allows you to exclude sensitive data from being collected.
+     *
+     * @return regex patterns, every matching key is not collected.
+     */
+    @NonNull String[] excludeMatchingSettingsKeys() default {};
+
+    /**
+     * The default value will be a BuildConfig class residing in the same package as the Application class.
+     * You only have to set this option if your BuildConfig class is obfuscated.
+     *
+     * @return BuildConfig class from which to read any BuildConfig attributes.
+     */
+    @NonNull Class buildConfigClass() default Object.class;
+
+    /**
+     * The default {@link org.acra.sender.ReportSenderFactory} automatically discovers other ReportSenderFactories.
+     *
+     * @return {@link org.acra.sender.ReportSenderFactory}s with which to construct the {@link org.acra.sender.ReportSender}s that will send the crash reports.
+     */
+    @NonEmpty @Instantiatable @NonNull Class<? extends ReportSenderFactory>[] reportSenderFactoryClasses() default {DefaultReportSenderFactory.class};
+
+    /**
+     * To use in combination with {@link ReportField#APPLICATION_LOG} to set the path/name of your application log file.
+     *
+     * @return path/name of your application log file.
+     */
+    @NonNull String applicationLogFile() default ACRAConstants.DEFAULT_STRING_VALUE;
+
+    /**
+     * To use in combination with {@link ReportField#APPLICATION_LOG} to set the number of latest lines of your application log file to be collected.
+     * Default value is 100.
+     *
+     * @return number of lines to collect.
+     */
+    int applicationLogFileLines() default ACRAConstants.DEFAULT_LOG_LINES;
+
+    /**
+     * To use in combination with {@link ReportField#APPLICATION_LOG} to set the root for the path provided in {@link #applicationLogFile()}
+     *
+     * @return the directory of the application log file
+     */
+    @NonNull Directory applicationLogFileDir() default Directory.FILES_LEGACY;
+
+    /**
+     * Implement a custom {@link RetryPolicy} to decide if a failed report should be resent or not.
+     *
+     * @return a class that decides if a report should be resent (usually if one or more senders failed).
+     * @since 4.9.1
+     */
+    @Instantiatable @NonNull Class<? extends RetryPolicy> retryPolicyClass() default DefaultRetryPolicy.class;
+
+    /**
+     * If you have services which might crash on startup android will try to restart them indefinitely. Set this to true to prevent that.
+     *
+     * @return if all services running in a process should be stopped before it is killed.
+     * @since 4.9.2
+     */
+    boolean stopServicesOnCrash() default false;
+
+    /**
+     * Allows to attach files to crash reports.
+     * <p>
+     * ACRA contains a file provider under the following Uri:
+     * <code>content://[applicationId].acra/[Directory]/[Path]</code>
+     * where <code>[applicationId]</code> is your application package name, <code>[Directory]</code> is one of the enum constants in {@link Directory} in lower case and <code>[Path]</code> is the relative path to the file in that directory
+     * e.g. content://org.acra.test.acra/files/thisIsATest.txt
+     * </p>
+     * Side effects:
+     * <ul>
+     * <li>POST mode: requests will be sent with content-type multipart/mixed</li>
+     * <li>PUT mode: There will be additional requests with the attachments. Naming scheme: [report-id]-[filename]</li>
+     * <li>EMAIL mode: Some email clients do not support attachments, so some email may lack these attachments. Note that attachments might be readable to email clients when they are sent.</li>
+     * </ul>
+     *
+     * @return uris to be attached to crash reports.
+     * @since 4.9.3
+     */
+    @NonNull String[] attachmentUris() default {};
+
+    /**
+     * Allows {@link #attachmentUris()} configuration at runtime instead of compile time.
+     *
+     * @return a class that decides which uris should be attached to reports
+     * @since 4.9.3
+     */
+    @Instantiatable @NonNull Class<? extends AttachmentUriProvider> attachmentUriProvider() default DefaultAttachmentProvider.class;
+
+    /**
+     * Toast shown when a report is sent successfully
+     *
+     * @return Resource id for the Toast text triggered when a report was sent successfully.
+     * @since 5.0.0
+     */
+    @StringRes int resReportSendSuccessToast() default ACRAConstants.DEFAULT_RES_VALUE;
+
+    /**
+     * Toast shown when report sending fails
+     *
+     * @return Resource id for the Toast text triggered when no report was sent successfully.
+     * @since 5.0.0
+     */
+    @StringRes int resReportSendFailureToast() default ACRAConstants.DEFAULT_RES_VALUE;
+
+    /**
+     * Format in which the report should be sent
+     *
+     * @return report format
+     * @since 5.0.0
+     */
+    @NonNull StringFormat reportFormat() default StringFormat.JSON;
+
+    /**
+     * Allow parallel collection. Increases performance but might pollute e.g. logcat output
+     * @return if parallel collection should be active
+     * @since 5.0.1
+     */
+    boolean parallel() default true;
+}
diff --git a/acra/src/main/java/org/acra/attachment/AcraContentProvider.java b/acra-core/src/main/java/org/acra/attachment/AcraContentProvider.java
similarity index 65%
rename from acra/src/main/java/org/acra/attachment/AcraContentProvider.java
rename to acra-core/src/main/java/org/acra/attachment/AcraContentProvider.java
index 2ca4c356..b5a280c8 100644
--- a/acra/src/main/java/org/acra/attachment/AcraContentProvider.java
+++ b/acra-core/src/main/java/org/acra/attachment/AcraContentProvider.java
@@ -29,10 +29,11 @@
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.text.TextUtils;
+import android.webkit.MimeTypeMap;
 
 import org.acra.ACRA;
+import org.acra.annotation.AcraCore;
 import org.acra.file.Directory;
-import org.acra.http.HttpUtils;
 
 import java.io.File;
 import java.io.FileNotFoundException;
@@ -40,8 +41,12 @@
 import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.regex.Pattern;
 
 /**
+ * Provides access to attachments for senders
+ * For uri schema, see {@link AcraCore#attachmentUris()}
+ *
  * @author F43nd1r
  * @since 13.03.2017
  */
@@ -49,6 +54,7 @@
 public class AcraContentProvider extends ContentProvider {
     private static final String[] COLUMNS = {
             OpenableColumns.DISPLAY_NAME, OpenableColumns.SIZE};
+    private static final String MIME_TYPE_OCTET_STREAM = "application/octet-stream";
     private String authority;
 
     @Override
@@ -59,6 +65,16 @@ public boolean onCreate() {
         return true;
     }
 
+    /**
+     * Provides file metadata
+     *
+     * @param uri           the file uri
+     * @param projection    any combination of {@link OpenableColumns#DISPLAY_NAME} and {@link OpenableColumns#SIZE}
+     * @param selection     ignored
+     * @param selectionArgs ignored
+     * @param sortOrder     ignored
+     * @return file metadata in a cursor with a single row
+     */
     @Nullable
     @Override
     public Cursor query(@NonNull Uri uri, @Nullable String[] projection, @Nullable String selection, @Nullable String[] selectionArgs, @Nullable String sortOrder) {
@@ -70,7 +86,7 @@ public Cursor query(@NonNull Uri uri, @Nullable String[] projection, @Nullable S
         if (projection == null) {
             projection = COLUMNS;
         }
-        final Map<String, Object> columnValueMap = new LinkedHashMap<String, Object>();
+        final Map<String, Object> columnValueMap = new LinkedHashMap<>();
         for (String column : projection) {
             if (column.equals(OpenableColumns.DISPLAY_NAME)) {
                 columnValueMap.put(OpenableColumns.DISPLAY_NAME, file.getName());
@@ -83,12 +99,16 @@ public Cursor query(@NonNull Uri uri, @Nullable String[] projection, @Nullable S
         return cursor;
     }
 
+    /**
+     * @param uri the file uri
+     * @return file represented by uri, or null if it can't be resolved
+     */
     @Nullable
-    private File getFileForUri(Uri uri) {
+    private File getFileForUri(@NonNull Uri uri) {
         if (!ContentResolver.SCHEME_CONTENT.equals(uri.getScheme()) || !authority.equals(uri.getAuthority())) {
             return null;
         }
-        final List<String> segments = new ArrayList<String>(uri.getPathSegments());
+        final List<String> segments = new ArrayList<>(uri.getPathSegments());
         if (segments.size() < 2) return null;
         final String dir = segments.remove(0).toUpperCase();
         try {
@@ -100,29 +120,62 @@ private File getFileForUri(Uri uri) {
         }
     }
 
-    @Nullable
+    /**
+     * Provides file mimeType
+     *
+     * @param uri the file uri
+     * @return mimeType, default is {@link #MIME_TYPE_OCTET_STREAM}
+     * @see #guessMimeType(Uri)
+     */
+    @NonNull
     @Override
     public String getType(@NonNull Uri uri) {
-        return HttpUtils.guessMimeType(uri);
+        return guessMimeType(uri);
     }
 
+    /**
+     * @param uri    ignored
+     * @param values ignored
+     * @throws UnsupportedOperationException always
+     */
     @Nullable
     @Override
     public Uri insert(@NonNull Uri uri, @Nullable ContentValues values) {
         throw new UnsupportedOperationException("No insert supported");
     }
 
+    /**
+     * @param uri           ignored
+     * @param selection     ignored
+     * @param selectionArgs ignored
+     * @throws UnsupportedOperationException always
+     */
     @Override
     public int delete(@NonNull Uri uri, @Nullable String selection, @Nullable String[] selectionArgs) {
         throw new UnsupportedOperationException("No delete supported");
     }
 
+    /**
+     * @param uri           ignored
+     * @param values        ignored
+     * @param selection     ignored
+     * @param selectionArgs ignored
+     * @throws UnsupportedOperationException always
+     */
     @Override
     public int update(@NonNull Uri uri, @Nullable ContentValues values, @Nullable String selection, @Nullable String[] selectionArgs) {
         throw new UnsupportedOperationException("No update supported");
     }
 
-    @Nullable
+    /**
+     * Open a file for read
+     *
+     * @param uri  the file uri
+     * @param mode ignored
+     * @return a {@link ParcelFileDescriptor} for the File
+     * @throws FileNotFoundException if the file cannot be resolved
+     */
+    @NonNull
     @Override
     public ParcelFileDescriptor openFile(@NonNull Uri uri, @NonNull String mode) throws FileNotFoundException {
         final File file = getFileForUri(uri);
@@ -137,6 +190,11 @@ public ParcelFileDescriptor openFile(@NonNull Uri uri, @NonNull String mode) thr
         return ParcelFileDescriptor.open(file, ParcelFileDescriptor.MODE_READ_ONLY);
     }
 
+    /**
+     * @param context a a context
+     * @return authority of this provider
+     */
+    @NonNull
     private static String getAuthority(@NonNull Context context) {
         return context.getPackageName() + ".acra";
     }
@@ -148,6 +206,7 @@ private static String getAuthority(@NonNull Context context) {
      * @param file    the file
      * @return the uri
      */
+    @NonNull
     public static Uri getUriForFile(@NonNull Context context, @NonNull File file) {
         return getUriForFile(context, Directory.ROOT, file.getPath());
     }
@@ -160,11 +219,40 @@ public static Uri getUriForFile(@NonNull Context context, @NonNull File file) {
      * @param relativePath the file path
      * @return the uri
      */
+    @SuppressWarnings("WeakerAccess")
+    @NonNull
     public static Uri getUriForFile(@NonNull Context context, @NonNull Directory directory, @NonNull String relativePath) {
-        return new Uri.Builder()
+        final Uri.Builder builder = new Uri.Builder()
                 .scheme(ContentResolver.SCHEME_CONTENT)
                 .authority(getAuthority(context))
-                .path(directory.name().toLowerCase() + (relativePath.charAt(0) == File.separatorChar ? "" : File.separator) + relativePath)
-                .build();
+                .appendPath(directory.name().toLowerCase());
+        for (String segment : relativePath.split(Pattern.quote(File.separator))) {
+            if (segment.length() > 0) {
+                builder.appendPath(segment);
+            }
+        }
+        return builder.build();
+    }
+
+
+    /**
+     * Tries to guess the mime type from uri extension
+     *
+     * @param uri the uri
+     * @return the mime type of the uri, with fallback {@link #MIME_TYPE_OCTET_STREAM}
+     */
+    @NonNull
+    public static String guessMimeType(@NonNull Uri uri) {
+        String type = null;
+        final String fileExtension = MimeTypeMap.getFileExtensionFromUrl(uri
+                .toString());
+        if (fileExtension != null) {
+            type = MimeTypeMap.getSingleton().getMimeTypeFromExtension(
+                    fileExtension.toLowerCase());
+        }
+        if (type == null) {
+            type = MIME_TYPE_OCTET_STREAM;
+        }
+        return type;
     }
 }
diff --git a/acra-core/src/main/java/org/acra/attachment/AttachmentUriProvider.java b/acra-core/src/main/java/org/acra/attachment/AttachmentUriProvider.java
new file mode 100644
index 00000000..14045076
--- /dev/null
+++ b/acra-core/src/main/java/org/acra/attachment/AttachmentUriProvider.java
@@ -0,0 +1,42 @@
+/*
+ * Copyright (c) 2017 the ACRA team
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.attachment;
+
+import android.content.Context;
+import android.net.Uri;
+import android.support.annotation.NonNull;
+
+import org.acra.config.CoreConfiguration;
+
+import java.util.List;
+
+/**
+ * Provides attachment uris to ACRA
+ *
+ * @author F43nd1r
+ * @since 09.03.2017
+ */
+public interface AttachmentUriProvider {
+
+    /**
+     * @param context       a context
+     * @param configuration ACRA configuration
+     * @return all file uris that should be attached to the report
+     */
+    @NonNull
+    List<Uri> getAttachments(@NonNull Context context, @NonNull CoreConfiguration configuration);
+}
diff --git a/acra-core/src/main/java/org/acra/attachment/DefaultAttachmentProvider.java b/acra-core/src/main/java/org/acra/attachment/DefaultAttachmentProvider.java
new file mode 100644
index 00000000..dcf4fb0b
--- /dev/null
+++ b/acra-core/src/main/java/org/acra/attachment/DefaultAttachmentProvider.java
@@ -0,0 +1,56 @@
+/*
+ * Copyright (c) 2017 the ACRA team
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.attachment;
+
+import android.content.Context;
+import android.net.Uri;
+import android.support.annotation.NonNull;
+
+import org.acra.ACRA;
+import org.acra.config.CoreConfiguration;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import static org.acra.ACRA.LOG_TAG;
+
+/**
+ * Reads attachment uris from the configuration
+ *
+ * @author F43nd1r
+ * @since 10.03.2017
+ */
+
+public class DefaultAttachmentProvider implements AttachmentUriProvider {
+
+    /**
+     * {@inheritDoc}
+     */
+    @NonNull
+    @Override
+    public List<Uri> getAttachments(@NonNull Context context, @NonNull CoreConfiguration configuration) {
+        final ArrayList<Uri> result = new ArrayList<>();
+        for (String s : configuration.attachmentUris()) {
+            try {
+                result.add(Uri.parse(s));
+            } catch (Exception e) {
+                ACRA.log.e(LOG_TAG, "Failed to parse Uri " + s, e);
+            }
+        }
+        return result;
+    }
+}
diff --git a/acra-core/src/main/java/org/acra/builder/LastActivityManager.java b/acra-core/src/main/java/org/acra/builder/LastActivityManager.java
new file mode 100644
index 00000000..52c68df8
--- /dev/null
+++ b/acra-core/src/main/java/org/acra/builder/LastActivityManager.java
@@ -0,0 +1,115 @@
+/*
+ * Copyright (c) 2017
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.acra.builder;
+
+import android.app.Activity;
+import android.app.Application;
+import android.os.Bundle;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import org.acra.ACRA;
+
+import java.lang.ref.WeakReference;
+
+import static org.acra.ACRA.LOG_TAG;
+
+/**
+ * Responsible for tracking the last Activity that was created.
+ *
+ * @since 4.8.0
+ */
+public final class LastActivityManager {
+
+    @NonNull
+    private WeakReference<Activity> lastActivityCreated = new WeakReference<>(null);
+
+    /**
+     * Create and register a new instance
+     *
+     * @param application the application to attach to
+     */
+    public LastActivityManager(@NonNull Application application) {
+        application.registerActivityLifecycleCallbacks(new Application.ActivityLifecycleCallbacks() {
+            @Override
+            public void onActivityCreated(@NonNull Activity activity, Bundle savedInstanceState) {
+                if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "onActivityCreated " + activity.getClass());
+                lastActivityCreated = new WeakReference<>(activity);
+            }
+
+            @Override
+            public void onActivityStarted(@NonNull Activity activity) {
+                if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "onActivityStarted " + activity.getClass());
+            }
+
+            @Override
+            public void onActivityResumed(@NonNull Activity activity) {
+                if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "onActivityResumed " + activity.getClass());
+            }
+
+            @Override
+            public void onActivityPaused(@NonNull Activity activity) {
+                if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "onActivityPaused " + activity.getClass());
+            }
+
+            @Override
+            public void onActivityStopped(@NonNull Activity activity) {
+                if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "onActivityStopped " + activity.getClass());
+                synchronized (this) {
+                    notify();
+                }
+            }
+
+            @Override
+            public void onActivitySaveInstanceState(@NonNull Activity activity, Bundle outState) {
+                if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "onActivitySaveInstanceState " + activity.getClass());
+            }
+
+            @Override
+            public void onActivityDestroyed(@NonNull Activity activity) {
+                if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "onActivityDestroyed " + activity.getClass());
+            }
+        });
+    }
+
+    /**
+     * @return last created activity, if any
+     */
+    @Nullable
+    public Activity getLastActivity() {
+        return lastActivityCreated.get();
+    }
+
+    /**
+     * clear saved activity
+     */
+    public void clearLastActivity() {
+        lastActivityCreated.clear();
+    }
+
+    /**
+     * wait until the last activity is stopped
+     *
+     * @param timeOutInMillis timeout for wait
+     */
+    public void waitForActivityStop(int timeOutInMillis) {
+        synchronized (this) {
+            try {
+                wait(timeOutInMillis);
+            } catch (InterruptedException ignored) {
+            }
+        }
+    }
+}
diff --git a/acra/src/main/java/org/acra/builder/ReportBuilder.java b/acra-core/src/main/java/org/acra/builder/ReportBuilder.java
similarity index 67%
rename from acra/src/main/java/org/acra/builder/ReportBuilder.java
rename to acra-core/src/main/java/org/acra/builder/ReportBuilder.java
index fa892481..8f09bfd4 100644
--- a/acra/src/main/java/org/acra/builder/ReportBuilder.java
+++ b/acra-core/src/main/java/org/acra/builder/ReportBuilder.java
@@ -1,3 +1,18 @@
+/*
+ * Copyright (c) 2017
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
 package org.acra.builder;
 
 import android.support.annotation.NonNull;
@@ -16,7 +31,7 @@
     private String message;
     private Thread uncaughtExceptionThread;
     private Throwable exception;
-    private final Map<String, String> customData = new HashMap<String, String>();
+    private final Map<String, String> customData = new HashMap<>();
 
     private boolean sendSilently = false;
     private boolean endApplication = false;
@@ -28,12 +43,15 @@
      * @return the updated {@code ReportBuilder}
      */
     @NonNull
-    @SuppressWarnings( "unused" )
+    @SuppressWarnings("unused")
     public ReportBuilder message(@Nullable String msg) {
         message = msg;
         return this;
     }
 
+    /**
+     * @return the error message, or null if none is present
+     */
     @Nullable
     public String getMessage() {
         return message;
@@ -42,7 +60,7 @@ public String getMessage() {
     /**
      * Sets the Thread on which an uncaught Exception occurred.
      *
-     * @param thread    Thread on which an uncaught Exception occurred.
+     * @param thread Thread on which an uncaught Exception occurred.
      * @return the updated {@code ReportBuilder}
      */
     @NonNull
@@ -51,6 +69,9 @@ public ReportBuilder uncaughtExceptionThread(@Nullable Thread thread) {
         return this;
     }
 
+    /**
+     * @return the Thread on which an uncaught Exception occurred, or null if none present
+     */
     @Nullable
     public Thread getUncaughtExceptionThread() {
         return uncaughtExceptionThread;
@@ -68,13 +89,16 @@ public ReportBuilder exception(@Nullable Throwable e) {
         return this;
     }
 
+    /**
+     * @return the exception, or null if none present
+     */
     @Nullable
     public Throwable getException() {
         return exception;
     }
 
     /**
-     * Sets additional values to be added to {@code CUSTOM_DATA}. Values
+     * Sets additional values to be added to {@link org.acra.ReportField#CUSTOM_DATA}. Values
      * specified here take precedence over globally specified custom data.
      *
      * @param customData a map of custom key-values to be attached to the report
@@ -88,10 +112,10 @@ public ReportBuilder customData(@NonNull Map<String, String> customData) {
     }
 
     /**
-     * Sets an additional value to be added to {@code CUSTOM_DATA}. The value
+     * Sets an additional value to be added to {@link org.acra.ReportField#CUSTOM_DATA}. The value
      * specified here takes precedence over globally specified custom data.
      *
-     * @param key the key identifying the custom data
+     * @param key   the key identifying the custom data
      * @param value the value for the custom data entry
      * @return the updated {@code ReportBuilder}
      */
@@ -102,13 +126,16 @@ public ReportBuilder customData(@NonNull String key, String value) {
         return this;
     }
 
+    /**
+     * @return a map with all custom data
+     */
     @NonNull
     public Map<String, String> getCustomData() {
-        return customData;
+        return new HashMap<>(customData);
     }
 
     /**
-     * Forces the report to be sent silently, ignoring the default interaction mode set in the config
+     * Forces the report to be sent silently, ignoring all interactions
      *
      * @return the updated {@code ReportBuilder}
      */
@@ -118,6 +145,9 @@ public ReportBuilder sendSilently() {
         return this;
     }
 
+    /**
+     * @return if this should send silently
+     */
     public boolean isSendSilently() {
         return sendSilently;
     }
@@ -133,6 +163,9 @@ public ReportBuilder endApplication() {
         return this;
     }
 
+    /**
+     * @return if this should stop the application after collecting
+     */
     public boolean isEndApplication() {
         return endApplication;
     }
@@ -140,7 +173,7 @@ public boolean isEndApplication() {
     /**
      * Assembles and sends the crash report.
      *
-     * @param reportExecutor    ReportExecutor to use to build the report.
+     * @param reportExecutor ReportExecutor to use to build the report.
      */
     public void build(@NonNull ReportExecutor reportExecutor) {
         if (message == null && exception == null) {
diff --git a/acra-core/src/main/java/org/acra/builder/ReportExecutor.java b/acra-core/src/main/java/org/acra/builder/ReportExecutor.java
new file mode 100644
index 00000000..a63db7e6
--- /dev/null
+++ b/acra-core/src/main/java/org/acra/builder/ReportExecutor.java
@@ -0,0 +1,273 @@
+/*
+ * Copyright (c) 2017
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.acra.builder;
+
+import android.content.Context;
+import android.os.Debug;
+import android.os.Looper;
+import android.os.StrictMode;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.widget.Toast;
+
+import org.acra.ACRA;
+import org.acra.ACRAConstants;
+import org.acra.config.CoreConfiguration;
+import org.acra.config.ReportingAdministrator;
+import org.acra.data.CrashReportData;
+import org.acra.data.CrashReportDataFactory;
+import org.acra.file.CrashReportPersister;
+import org.acra.file.ReportLocator;
+import org.acra.interaction.ReportInteractionExecutor;
+import org.acra.sender.SenderServiceStarter;
+import org.acra.util.ProcessFinisher;
+import org.acra.util.ToastSender;
+
+import java.io.File;
+import java.util.*;
+
+import static org.acra.ACRA.LOG_TAG;
+import static org.acra.ReportField.IS_SILENT;
+import static org.acra.ReportField.USER_CRASH_DATE;
+
+/**
+ * Collates, records and initiates the sending of a report.
+ *
+ * @since 4.8.0
+ */
+public class ReportExecutor {
+
+    private final Context context;
+    private final CoreConfiguration config;
+    private final CrashReportDataFactory crashReportDataFactory;
+    private final List<ReportingAdministrator> reportingAdministrators;
+
+    // A reference to the system's previous default UncaughtExceptionHandler
+    // kept in order to execute the default exception handling after sending the report.
+    private final Thread.UncaughtExceptionHandler defaultExceptionHandler;
+
+    private final ProcessFinisher processFinisher;
+
+    private boolean enabled = false;
+
+    /**
+     * Creates a new instance
+     *
+     * @param context                 a context
+     * @param config                  the config
+     * @param crashReportDataFactory  factory used to collect data
+     * @param defaultExceptionHandler pass-through handler
+     * @param processFinisher         used to end process after reporting
+     */
+    public ReportExecutor(@NonNull Context context, @NonNull CoreConfiguration config, @NonNull CrashReportDataFactory crashReportDataFactory,
+                          @Nullable Thread.UncaughtExceptionHandler defaultExceptionHandler, @NonNull ProcessFinisher processFinisher) {
+        this.context = context;
+        this.config = config;
+        this.crashReportDataFactory = crashReportDataFactory;
+        this.defaultExceptionHandler = defaultExceptionHandler;
+        this.processFinisher = processFinisher;
+        reportingAdministrators = new ArrayList<>();
+        //noinspection ForLoopReplaceableByForEach need to catch exception in iterator.next()
+        for (final Iterator<ReportingAdministrator> iterator = ServiceLoader.load(ReportingAdministrator.class, getClass().getClassLoader()).iterator(); iterator.hasNext(); ) {
+            try {
+                final ReportingAdministrator reportingAdministrator = iterator.next();
+                if (reportingAdministrator.enabled(config)) {
+                    if (ACRA.DEV_LOGGING)
+                        ACRA.log.d(ACRA.LOG_TAG, "Loaded ReportingAdministrator of class " + reportingAdministrator.getClass().getName());
+                    reportingAdministrators.add(reportingAdministrator);
+                }
+            } catch (ServiceConfigurationError e) {
+                ACRA.log.e(LOG_TAG, "Unable to load ReportingAdministrator", e);
+            }
+        }
+    }
+
+    /**
+     * pass-through to default handler
+     *
+     * @param t the crashed thread
+     * @param e the uncaught exception
+     */
+    public void handReportToDefaultExceptionHandler(@Nullable Thread t, @NonNull Throwable e) {
+        if (defaultExceptionHandler != null) {
+            ACRA.log.i(LOG_TAG, "ACRA is disabled for " + context.getPackageName()
+                    + " - forwarding uncaught Exception on to default ExceptionHandler");
+            defaultExceptionHandler.uncaughtException(t, e);
+        } else {
+            ACRA.log.e(LOG_TAG, "ACRA is disabled for " + context.getPackageName() + " - no default ExceptionHandler");
+            ACRA.log.e(LOG_TAG, "ACRA caught a " + e.getClass().getSimpleName() + " for " + context.getPackageName(), e);
+        }
+
+    }
+
+    public boolean isEnabled() {
+        return enabled;
+    }
+
+    public void setEnabled(boolean enabled) {
+        this.enabled = enabled;
+    }
+
+    /**
+     * Try to create a report. Also starts {@link org.acra.sender.SenderService}
+     *
+     * @param reportBuilder The report builder used to assemble the report
+     */
+    public final void execute(@NonNull final ReportBuilder reportBuilder) {
+
+        if (!enabled) {
+            ACRA.log.v(LOG_TAG, "ACRA is disabled. Report not sent.");
+            return;
+        }
+
+        ReportingAdministrator blockingAdministrator = null;
+        for (ReportingAdministrator administrator : reportingAdministrators) {
+            try {
+                if (!administrator.shouldStartCollecting(context, config, reportBuilder)) {
+                    blockingAdministrator = administrator;
+                }
+            } catch (Throwable t) {
+                ACRA.log.w(LOG_TAG, "ReportingAdministrator " + administrator.getClass().getName() + " threw exception", t);
+            }
+        }
+        final CrashReportData crashReportData;
+        if (blockingAdministrator == null) {
+            crashReportData = crashReportDataFactory.createCrashData(reportBuilder);
+            for (ReportingAdministrator administrator : reportingAdministrators) {
+                try {
+                    if (!administrator.shouldSendReport(context, config, crashReportData)) {
+                        blockingAdministrator = administrator;
+                    }
+                } catch (Throwable t) {
+                    ACRA.log.w(LOG_TAG, "ReportingAdministrator " + administrator.getClass().getName() + " threw exception", t);
+                }
+            }
+        } else {
+            crashReportData = null;
+            if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Not collecting crash report because of ReportingAdministrator " + blockingAdministrator.getClass().getName());
+        }
+        if (reportBuilder.isEndApplication()) {
+            // Finish the last activity early to prevent restarts on android 7+
+            processFinisher.finishLastActivity(reportBuilder.getUncaughtExceptionThread());
+        }
+        if (blockingAdministrator == null) {
+            StrictMode.ThreadPolicy oldPolicy = StrictMode.allowThreadDiskWrites();
+            final File reportFile = getReportFileName(crashReportData);
+            saveCrashReportFile(reportFile, crashReportData);
+
+            final ReportInteractionExecutor executor = new ReportInteractionExecutor(context, config);
+            StrictMode.setThreadPolicy(oldPolicy);
+            if (reportBuilder.isSendSilently()) {
+                //if size == 0 we have no interaction and can send all reports
+                startSendingReports(executor.hasInteractions());
+            } else {
+                if (executor.performInteractions(reportFile)) {
+                    startSendingReports(false);
+                }
+            }
+        } else {
+            if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Not sending crash report because of ReportingAdministrator " + blockingAdministrator.getClass().getName());
+            try {
+                blockingAdministrator.notifyReportDropped(context, config);
+            } catch (Throwable t) {
+                ACRA.log.w(LOG_TAG, "ReportingAdministrator " + blockingAdministrator.getClass().getName() + " threw exeption", t);
+            }
+        }
+        if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Wait for Interactions + worker ended. Kill Application ? " + reportBuilder.isEndApplication());
+
+        if (reportBuilder.isEndApplication()) {
+            boolean endApplication = true;
+            for (ReportingAdministrator administrator : reportingAdministrators) {
+                try {
+                    if (!administrator.shouldKillApplication(context, config, reportBuilder, crashReportData)) {
+                        endApplication = false;
+                    }
+                } catch (Throwable t) {
+                    ACRA.log.w(LOG_TAG, "ReportingAdministrator " + administrator.getClass().getName() + " threw exception", t);
+                }
+            }
+            if (endApplication) {
+                if (Debug.isDebuggerConnected()) {
+                    //Killing a process with a debugger attached would kill the whole application including our service, so we can't do that.
+                    final String warning = "Warning: Acra may behave differently with a debugger attached";
+                    new Thread(() -> {
+                        Looper.prepare();
+                        ToastSender.sendToast(context, warning, Toast.LENGTH_LONG);
+                        Looper.loop();
+                    }).start();
+                    ACRA.log.w(LOG_TAG, warning);
+                } else {
+                    endApplication(reportBuilder.getUncaughtExceptionThread(), reportBuilder.getException());
+                }
+            }
+        }
+    }
+
+    /**
+     * End the application.
+     */
+    private void endApplication(@Nullable Thread uncaughtExceptionThread, Throwable th) {
+        final boolean letDefaultHandlerEndApplication = config.alsoReportToAndroidFramework();
+
+        final boolean handlingUncaughtException = uncaughtExceptionThread != null;
+        if (handlingUncaughtException && letDefaultHandlerEndApplication && defaultExceptionHandler != null) {
+            // Let the system default handler do it's job and display the force close dialog.
+            if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Handing Exception on to default ExceptionHandler");
+            defaultExceptionHandler.uncaughtException(uncaughtExceptionThread, th);
+        } else {
+            processFinisher.endApplication();
+        }
+    }
+
+    /**
+     * Starts a Process to start sending outstanding error reports.
+     *
+     * @param onlySendSilentReports If true then only send silent reports.
+     */
+    private void startSendingReports(boolean onlySendSilentReports) {
+        if (enabled) {
+            final SenderServiceStarter starter = new SenderServiceStarter(context, config);
+            starter.startService(onlySendSilentReports, true);
+        } else {
+            ACRA.log.w(LOG_TAG, "Would be sending reports, but ACRA is disabled");
+        }
+    }
+
+    @NonNull
+    private File getReportFileName(@NonNull CrashReportData crashData) {
+        final String timestamp = crashData.getString(USER_CRASH_DATE);
+        final String isSilent = crashData.getString(IS_SILENT);
+        final String fileName = timestamp + (isSilent != null ? ACRAConstants.SILENT_SUFFIX : "") + ACRAConstants.REPORTFILE_EXTENSION;
+        final ReportLocator reportLocator = new ReportLocator(context);
+        return new File(reportLocator.getUnapprovedFolder(), fileName);
+    }
+
+    /**
+     * Store a report
+     *
+     * @param file      the file to store in
+     * @param crashData the content
+     */
+    private void saveCrashReportFile(@NonNull File file, @NonNull CrashReportData crashData) {
+        try {
+            if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Writing crash report file " + file);
+            final CrashReportPersister persister = new CrashReportPersister();
+            persister.store(crashData, file);
+        } catch (Exception e) {
+            ACRA.log.e(LOG_TAG, "An error occurred while writing the report file...", e);
+        }
+    }
+}
diff --git a/acra-core/src/main/java/org/acra/collector/ApplicationStartupCollector.java b/acra-core/src/main/java/org/acra/collector/ApplicationStartupCollector.java
new file mode 100644
index 00000000..b3de5e0c
--- /dev/null
+++ b/acra-core/src/main/java/org/acra/collector/ApplicationStartupCollector.java
@@ -0,0 +1,40 @@
+/*
+ * Copyright (c) 2017
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.collector;
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+
+import org.acra.config.CoreConfiguration;
+
+/**
+ * A collector that is also called at startup
+ *
+ * @author F43nd1r
+ * @since 29.09.2017
+ */
+
+@SuppressWarnings("WeakerAccess")
+public interface ApplicationStartupCollector extends Collector {
+    /**
+     * collect startup data
+     *
+     * @param context a context
+     * @param config  the config
+     */
+    void collectApplicationStartUp(@NonNull Context context, @NonNull CoreConfiguration config);
+}
diff --git a/acra-core/src/main/java/org/acra/collector/BaseReportFieldCollector.java b/acra-core/src/main/java/org/acra/collector/BaseReportFieldCollector.java
new file mode 100644
index 00000000..429ca8d6
--- /dev/null
+++ b/acra-core/src/main/java/org/acra/collector/BaseReportFieldCollector.java
@@ -0,0 +1,93 @@
+/*
+ *  Copyright 2016
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.acra.collector;
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+
+import org.acra.ReportField;
+import org.acra.builder.ReportBuilder;
+import org.acra.config.CoreConfiguration;
+import org.acra.data.CrashReportData;
+
+/**
+ * Base implementation of a collector.
+ * Maintains information on which fields can be collected by this collector.
+ * Validates constraints in which a field should (not) be collected.
+ *
+ * @author F43nd1r
+ * @since 4.9.1
+ */
+abstract class BaseReportFieldCollector implements Collector {
+    private final ReportField[] reportFields;
+
+    /**
+     * create a new Collector that is able to collect these reportFields
+     *
+     * @param firstField   the first supported field (split away to ensure each collector supports at least one field)
+     * @param reportFields the supported reportFields
+     */
+    BaseReportFieldCollector(@NonNull ReportField firstField, @NonNull ReportField... reportFields) {
+        this.reportFields = new ReportField[reportFields.length + 1];
+        this.reportFields[0] = firstField;
+        if (reportFields.length > 0) {
+            System.arraycopy(reportFields, 0, this.reportFields, 1, reportFields.length);
+        }
+    }
+
+    /**
+     * this should check if the config contains the field, but may add additional checks like permissions etc.
+     *
+     * @param context       a context
+     * @param config        current configuration
+     * @param collect       the field to collect
+     * @param reportBuilder the current reportBuilder
+     * @return if this field should be collected now
+     */
+    boolean shouldCollect(@NonNull Context context, @NonNull CoreConfiguration config, @NonNull ReportField collect, @NonNull ReportBuilder reportBuilder) {
+        return config.reportContent().contains(collect);
+    }
+
+    /**
+     * Calls {@link #shouldCollect(Context, CoreConfiguration, ReportField, ReportBuilder)} for each ReportField
+     * and then {@link #collect(ReportField, Context, CoreConfiguration, ReportBuilder, CrashReportData)} if it returned true
+     */
+    @Override
+    public final void collect(@NonNull Context context, @NonNull CoreConfiguration config, @NonNull ReportBuilder reportBuilder, @NonNull CrashReportData target) throws CollectorException {
+        for (ReportField field : reportFields) {
+            try {
+                if (shouldCollect(context, config, field, reportBuilder)) {
+                    collect(field, context, config, reportBuilder, target);
+                }
+            } catch (Throwable t) {
+                target.put(field, (String) null);
+                throw new CollectorException("Error while retrieving " + field.name() + " data:" + t.getMessage(), t);
+            }
+        }
+    }
+
+    /**
+     * Collect a ReportField
+     *
+     * @param reportField the reportField to collect
+     * @param context a context
+     * @param config current Configuration
+     * @param reportBuilder current ReportBuilder
+     * @param target put results here
+     * @throws Exception if collection failed
+     */
+    abstract void collect(@NonNull ReportField reportField, @NonNull Context context, @NonNull CoreConfiguration config, @NonNull ReportBuilder reportBuilder, @NonNull CrashReportData target) throws Exception;
+}
diff --git a/acra-core/src/main/java/org/acra/collector/Collector.java b/acra-core/src/main/java/org/acra/collector/Collector.java
new file mode 100644
index 00000000..415058e1
--- /dev/null
+++ b/acra-core/src/main/java/org/acra/collector/Collector.java
@@ -0,0 +1,59 @@
+/*
+ * Copyright (c) 2017
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.collector;
+
+import android.content.Context;
+import android.support.annotation.Keep;
+import android.support.annotation.NonNull;
+
+import org.acra.builder.ReportBuilder;
+import org.acra.config.CoreConfiguration;
+import org.acra.data.CrashReportData;
+
+/**
+ * @author F43nd1r
+ * @since 29.09.2017
+ */
+@Keep
+public interface Collector {
+    /**
+     * Execute collection
+     *
+     * @param context         a context
+     * @param config          current Configuration
+     * @param reportBuilder   current ReportBuilder
+     * @param crashReportData put results here
+     * @throws CollectorException if collection failed
+     */
+    void collect(@NonNull Context context, @NonNull CoreConfiguration config, @NonNull ReportBuilder reportBuilder, @NonNull CrashReportData crashReportData) throws CollectorException;
+
+    /**
+     * @return when this collector should be called compared to other collectors
+     */
+    @NonNull
+    default Order getOrder() {
+        return Order.NORMAL;
+    }
+
+    enum Order {
+        FIRST,
+        EARLY,
+        NORMAL,
+        LATE,
+        LAST
+    }
+}
diff --git a/acra/src/main/java/org/acra/model/NumberElement.java b/acra-core/src/main/java/org/acra/collector/CollectorException.java
similarity index 57%
rename from acra/src/main/java/org/acra/model/NumberElement.java
rename to acra-core/src/main/java/org/acra/collector/CollectorException.java
index 98c8109d..6f05aec4 100644
--- a/acra/src/main/java/org/acra/model/NumberElement.java
+++ b/acra-core/src/main/java/org/acra/collector/CollectorException.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016
+ * Copyright (c) 2017
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,32 +14,29 @@
  * limitations under the License.
  */
 
-package org.acra.model;
+package org.acra.collector;
 
 /**
+ * Thrown by collectors
+ *
  * @author F43nd1r
- * @since 13.10.2016
+ * @since 29.09.2017
  */
 
-public class NumberElement implements Element {
-    private final Number content;
-
-    public NumberElement(Number content) {
-        this.content = content;
+@SuppressWarnings("WeakerAccess")
+public class CollectorException extends Exception {
+    public CollectorException() {
     }
 
-    @Override
-    public Object value() {
-        return content;
+    public CollectorException(String message) {
+        super(message);
     }
 
-    @Override
-    public String[] flatten() {
-        return new String[]{toString()};
+    public CollectorException(String message, Throwable cause) {
+        super(message, cause);
     }
 
-    @Override
-    public String toString() {
-        return content.toString();
+    public CollectorException(Throwable cause) {
+        super(cause);
     }
 }
diff --git a/acra/src/main/java/org/acra/collector/ConfigurationCollector.java b/acra-core/src/main/java/org/acra/collector/ConfigurationCollector.java
similarity index 72%
rename from acra/src/main/java/org/acra/collector/ConfigurationCollector.java
rename to acra-core/src/main/java/org/acra/collector/ConfigurationCollector.java
index 705b5f43..ee35ed00 100644
--- a/acra/src/main/java/org/acra/collector/ConfigurationCollector.java
+++ b/acra-core/src/main/java/org/acra/collector/ConfigurationCollector.java
@@ -1,5 +1,5 @@
 /*
- *  Copyright 2010 Emmanuel Astier & Kevin Gaudin
+ *  Copyright 2010 Emmanuel Astier &amp; Kevin Gaudin
  *
  *  Licensed under the Apache License, Version 2.0 (the "License");
  *  you may not use this file except in compliance with the License.
@@ -18,15 +18,18 @@
 import android.content.Context;
 import android.content.res.Configuration;
 import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.util.SparseArray;
 
+import com.google.auto.service.AutoService;
+
 import org.acra.ACRA;
-import org.acra.ACRAConstants;
 import org.acra.ReportField;
 import org.acra.builder.ReportBuilder;
-import org.acra.model.ComplexElement;
-import org.acra.model.Element;
+import org.acra.config.CoreConfiguration;
+import org.acra.data.CrashReportData;
 import org.json.JSONException;
+import org.json.JSONObject;
 
 import java.lang.reflect.Field;
 import java.lang.reflect.Modifier;
@@ -36,16 +39,14 @@
 import static org.acra.ACRA.LOG_TAG;
 
 /**
- * Inspects a {@link Configuration} object through reflection API in order to
- * generate a human readable String with values replaced with their constants
- * names. The {@link Configuration#toString()} method was not enough as values
- * like 0, 1, 2 or 3 aren't readable. Using reflection API allows to
- * retrieve hidden fields and can make us hope to be compatible with all Android
- * API levels, even those which are not published yet.
+ * Inspects a {@link Configuration} object through reflection API in order to generate a human readable String with values replaced with their constants names.
+ * The {@link Configuration#toString()} method was not enough as values like 0, 1, 2 or 3 aren't readable.
+ * Using reflection API allows to retrieve hidden fields and can make us hope to be compatible with all Android API levels, even those which are not published yet.
  *
- * @author Kevin Gaudin and F43nd1r
+ * @author Kevin Gaudin &amp; F43nd1r
  */
-public final class ConfigurationCollector extends Collector {
+@AutoService(Collector.class)
+public final class ConfigurationCollector extends BaseReportFieldCollector implements ApplicationStartupCollector {
 
     private static final String SUFFIX_MASK = "_MASK";
     private static final String FIELD_SCREENLAYOUT = "screenLayout";
@@ -62,39 +63,48 @@
     private static final String PREFIX_KEYBOARD = "KEYBOARD_";
     private static final String PREFIX_HARDKEYBOARDHIDDEN = "HARDKEYBOARDHIDDEN_";
 
-    private final Context context;
-    private final Element initialConfiguration;
+    private JSONObject initialConfiguration;
 
-    public ConfigurationCollector(@NonNull Context context, @NonNull Element initialConfiguration) {
+    public ConfigurationCollector() {
         super(ReportField.INITIAL_CONFIGURATION, ReportField.CRASH_CONFIGURATION);
-        this.context = context;
-        this.initialConfiguration = initialConfiguration;
     }
 
-    @NonNull
     @Override
-    Element collect(ReportField reportField, ReportBuilder reportBuilder) {
+    void collect(@NonNull ReportField reportField, @NonNull Context context, @NonNull CoreConfiguration config,
+                 @NonNull ReportBuilder reportBuilder, @NonNull CrashReportData target) {
         switch (reportField) {
             case INITIAL_CONFIGURATION:
-                return initialConfiguration;
+                target.put(ReportField.INITIAL_CONFIGURATION, initialConfiguration);
+                break;
             case CRASH_CONFIGURATION:
-                return collectConfiguration(context);
+                target.put(ReportField.CRASH_CONFIGURATION, collectConfiguration(context));
+                break;
             default:
                 throw new IllegalArgumentException();
         }
     }
 
     /**
-     * Creates an Element listing all values human readable
+     * {@inheritDoc}
+     */
+    @Override
+    public void collectApplicationStartUp(@NonNull Context context, @NonNull CoreConfiguration config) {
+        if(config.reportContent().contains(ReportField.INITIAL_CONFIGURATION)) {
+            initialConfiguration = collectConfiguration(context);
+        }
+    }
+
+    /**
+     * Creates a {@link JSONObject} listing all values human readable
      * from the provided Configuration instance.
      *
      * @param conf The Configuration to be described.
-     * @return An Element describing all the fields of the given Configuration,
+     * @return A JSONObject with all fields of the given Configuration,
      * with values replaced by constant names.
      */
     @NonNull
-    private static Element configToElement(@NonNull Configuration conf) {
-        final ComplexElement result = new ComplexElement();
+    private JSONObject configToJson(@NonNull Configuration conf) {
+        final JSONObject result = new JSONObject();
         final Map<String, SparseArray<String>> valueArrays = getValueArrays();
         for (final Field f : conf.getClass().getFields()) {
             try {
@@ -119,17 +129,18 @@ private static Element configToElement(@NonNull Configuration conf) {
         return result;
     }
 
-    private static Map<String, SparseArray<String>> getValueArrays() {
-        final Map<String, SparseArray<String>> valueArrays = new HashMap<String, SparseArray<String>>();
-        final SparseArray<String> hardKeyboardHiddenValues = new SparseArray<String>();
-        final SparseArray<String> keyboardValues = new SparseArray<String>();
-        final SparseArray<String> keyboardHiddenValues = new SparseArray<String>();
-        final SparseArray<String> navigationValues = new SparseArray<String>();
-        final SparseArray<String> navigationHiddenValues = new SparseArray<String>();
-        final SparseArray<String> orientationValues = new SparseArray<String>();
-        final SparseArray<String> screenLayoutValues = new SparseArray<String>();
-        final SparseArray<String> touchScreenValues = new SparseArray<String>();
-        final SparseArray<String> uiModeValues = new SparseArray<String>();
+    @NonNull
+    private Map<String, SparseArray<String>> getValueArrays() {
+        final Map<String, SparseArray<String>> valueArrays = new HashMap<>();
+        final SparseArray<String> hardKeyboardHiddenValues = new SparseArray<>();
+        final SparseArray<String> keyboardValues = new SparseArray<>();
+        final SparseArray<String> keyboardHiddenValues = new SparseArray<>();
+        final SparseArray<String> navigationValues = new SparseArray<>();
+        final SparseArray<String> navigationHiddenValues = new SparseArray<>();
+        final SparseArray<String> orientationValues = new SparseArray<>();
+        final SparseArray<String> screenLayoutValues = new SparseArray<>();
+        final SparseArray<String> touchScreenValues = new SparseArray<>();
+        final SparseArray<String> uiModeValues = new SparseArray<>();
 
         for (final Field f : Configuration.class.getFields()) {
             if (Modifier.isStatic(f.getModifiers()) && Modifier.isFinal(f.getModifiers())) {
@@ -187,27 +198,29 @@ private static Element configToElement(@NonNull Configuration conf) {
      * constant name.
      * @throws IllegalAccessException if the supplied field is inaccessible.
      */
-    private static Object getFieldValueName(Map<String, SparseArray<String>> valueArrays, @NonNull Configuration conf, @NonNull Field f) throws IllegalAccessException {
+    private Object getFieldValueName(@NonNull Map<String, SparseArray<String>> valueArrays, @NonNull Configuration conf, @NonNull Field f) throws IllegalAccessException {
         final String fieldName = f.getName();
-        if (fieldName.equals(FIELD_MCC) || fieldName.equals(FIELD_MNC)) {
-            return f.getInt(conf);
-        } else if (fieldName.equals(FIELD_UIMODE)) {
-            return activeFlags(valueArrays.get(PREFIX_UI_MODE), f.getInt(conf));
-        } else if (fieldName.equals(FIELD_SCREENLAYOUT)) {
-            return activeFlags(valueArrays.get(PREFIX_SCREENLAYOUT), f.getInt(conf));
-        } else {
-            final SparseArray<String> values = valueArrays.get(fieldName.toUpperCase() + '_');
-            if (values == null) {
-                // Unknown field, return the raw int as String
+        switch (fieldName) {
+            case FIELD_MCC:
+            case FIELD_MNC:
                 return f.getInt(conf);
-            }
+            case FIELD_UIMODE:
+                return activeFlags(valueArrays.get(PREFIX_UI_MODE), f.getInt(conf));
+            case FIELD_SCREENLAYOUT:
+                return activeFlags(valueArrays.get(PREFIX_SCREENLAYOUT), f.getInt(conf));
+            default:
+                final SparseArray<String> values = valueArrays.get(fieldName.toUpperCase() + '_');
+                if (values == null) {
+                    // Unknown field, return the raw int as String
+                    return f.getInt(conf);
+                }
 
-            final String value = values.get(f.getInt(conf));
-            if (value == null) {
-                // Unknown value, return the raw int as String
-                return f.getInt(conf);
-            }
-            return value;
+                final String value = values.get(f.getInt(conf));
+                if (value == null) {
+                    // Unknown value, return the raw int as String
+                    return f.getInt(conf);
+                }
+                return value;
         }
     }
 
@@ -223,7 +236,7 @@ private static Object getFieldValueName(Map<String, SparseArray<String>> valueAr
      * separated by '+'.
      */
     @NonNull
-    private static String activeFlags(@NonNull SparseArray<String> valueNames, int bitfield) {
+    private String activeFlags(@NonNull SparseArray<String> valueNames, int bitfield) {
         final StringBuilder result = new StringBuilder();
 
         // Look for masks, apply it an retrieve the masked value
@@ -248,13 +261,13 @@ private static String activeFlags(@NonNull SparseArray<String> valueNames, int b
      * @param context Context for the application being reported.
      * @return A String representation of the current configuration for the application.
      */
-    @NonNull
-    public static Element collectConfiguration(@NonNull Context context) {
+    @Nullable
+    private JSONObject collectConfiguration(@NonNull Context context) {
         try {
-            return configToElement(context.getResources().getConfiguration());
+            return configToJson(context.getResources().getConfiguration());
         } catch (RuntimeException e) {
             ACRA.log.w(LOG_TAG, "Couldn't retrieve CrashConfiguration for : " + context.getPackageName(), e);
-            return ACRAConstants.NOT_AVAILABLE;
+            return null;
         }
     }
 }
diff --git a/acra-core/src/main/java/org/acra/collector/CustomDataCollector.java b/acra-core/src/main/java/org/acra/collector/CustomDataCollector.java
new file mode 100644
index 00000000..af5099fa
--- /dev/null
+++ b/acra-core/src/main/java/org/acra/collector/CustomDataCollector.java
@@ -0,0 +1,46 @@
+/*
+ *  Copyright 2016
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.acra.collector;
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+
+import com.google.auto.service.AutoService;
+
+import org.acra.ReportField;
+import org.acra.builder.ReportBuilder;
+import org.acra.config.CoreConfiguration;
+import org.acra.data.CrashReportData;
+import org.json.JSONObject;
+
+/**
+ * Collects custom data supplied by the user
+ *
+ * @author F43nd1r
+ * @since 4.9.1
+ */
+@AutoService(Collector.class)
+public final class CustomDataCollector extends BaseReportFieldCollector {
+
+    public CustomDataCollector(){
+        super(ReportField.CUSTOM_DATA);
+    }
+
+    @Override
+    void collect(@NonNull ReportField reportField, @NonNull Context context, @NonNull CoreConfiguration config, @NonNull ReportBuilder reportBuilder, @NonNull CrashReportData target) {
+        target.put(ReportField.CUSTOM_DATA, new JSONObject(reportBuilder.getCustomData()));
+    }
+}
diff --git a/acra/src/main/java/org/acra/collector/DeviceFeaturesCollector.java b/acra-core/src/main/java/org/acra/collector/DeviceFeaturesCollector.java
similarity index 60%
rename from acra/src/main/java/org/acra/collector/DeviceFeaturesCollector.java
rename to acra-core/src/main/java/org/acra/collector/DeviceFeaturesCollector.java
index 0a74e8b1..6064f06e 100644
--- a/acra/src/main/java/org/acra/collector/DeviceFeaturesCollector.java
+++ b/acra-core/src/main/java/org/acra/collector/DeviceFeaturesCollector.java
@@ -20,39 +20,30 @@
 import android.content.pm.PackageManager;
 import android.support.annotation.NonNull;
 
-import org.acra.ACRA;
+import com.google.auto.service.AutoService;
+
 import org.acra.ReportField;
 import org.acra.builder.ReportBuilder;
-import org.acra.model.ComplexElement;
-import org.acra.model.Element;
-
-import static org.acra.ACRA.LOG_TAG;
+import org.acra.config.CoreConfiguration;
+import org.acra.data.CrashReportData;
+import org.json.JSONException;
+import org.json.JSONObject;
 
 /**
- * Features declared as available on the device.
+ * Collects features declared as available on the device.
  *
- * @author Kevin Gaudin & F43nd1r
+ * @author Kevin Gaudin &amp; F43nd1r
  */
-final class DeviceFeaturesCollector extends Collector {
-    private final Context context;
+@AutoService(Collector.class)
+public final class DeviceFeaturesCollector extends BaseReportFieldCollector {
 
-    DeviceFeaturesCollector(Context context) {
+    public DeviceFeaturesCollector() {
         super(ReportField.DEVICE_FEATURES);
-        this.context = context;
     }
 
-    /**
-     * collects device features
-     *
-     * @param reportField   the ReportField to collect
-     * @param reportBuilder the current reportBuilder
-     * @return Element of all device feature names
-     */
-    @NonNull
     @Override
-    Element collect(ReportField reportField, ReportBuilder reportBuilder) {
-        final ComplexElement result = new ComplexElement();
-        try {
+    void collect(@NonNull ReportField reportField, @NonNull Context context, @NonNull CoreConfiguration config, @NonNull ReportBuilder reportBuilder, @NonNull CrashReportData target) throws JSONException {
+            final JSONObject result = new JSONObject();
             final PackageManager pm = context.getPackageManager();
             final FeatureInfo[] features = pm.getSystemAvailableFeatures();
             for (final FeatureInfo feature : features) {
@@ -63,10 +54,6 @@ Element collect(ReportField reportField, ReportBuilder reportBuilder) {
                     result.put("glEsVersion", feature.getGlEsVersion());
                 }
             }
-        } catch (Throwable e) {
-            ACRA.log.w(LOG_TAG, "Couldn't retrieve DeviceFeatures for " + context.getPackageName(), e);
-        }
-
-        return result;
+            target.put(ReportField.DEVICE_FEATURES, result);
     }
 }
diff --git a/acra-core/src/main/java/org/acra/collector/DeviceIdCollector.java b/acra-core/src/main/java/org/acra/collector/DeviceIdCollector.java
new file mode 100644
index 00000000..f2bddfe3
--- /dev/null
+++ b/acra-core/src/main/java/org/acra/collector/DeviceIdCollector.java
@@ -0,0 +1,60 @@
+/*
+ *  Copyright 2016
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.acra.collector;
+
+import android.Manifest;
+import android.annotation.SuppressLint;
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.support.annotation.RequiresPermission;
+
+import com.google.auto.service.AutoService;
+
+import org.acra.ACRA;
+import org.acra.ReportField;
+import org.acra.builder.ReportBuilder;
+import org.acra.config.CoreConfiguration;
+import org.acra.data.CrashReportData;
+import org.acra.prefs.SharedPreferencesFactory;
+import org.acra.util.PackageManagerWrapper;
+import org.acra.util.SystemServices;
+
+/**
+ * Collects the device ID
+ *
+ * @author F43nd1r
+ * @since 4.9.1
+ */
+@AutoService(Collector.class)
+public final class DeviceIdCollector extends BaseReportFieldCollector {
+
+    public DeviceIdCollector() {
+        super(ReportField.DEVICE_ID);
+    }
+
+    @Override
+    boolean shouldCollect(@NonNull Context context, @NonNull CoreConfiguration config, @NonNull ReportField collect, @NonNull ReportBuilder reportBuilder) {
+        return super.shouldCollect(context, config, collect, reportBuilder) && new SharedPreferencesFactory(context, config).create().getBoolean(ACRA.PREF_ENABLE_DEVICE_ID, true)
+                && new PackageManagerWrapper(context).hasPermission(Manifest.permission.READ_PHONE_STATE);
+    }
+
+    @SuppressLint("HardwareIds")
+    @RequiresPermission(Manifest.permission.READ_PHONE_STATE)
+    @Override
+    void collect(@NonNull ReportField reportField, @NonNull Context context, @NonNull CoreConfiguration config, @NonNull ReportBuilder reportBuilder, @NonNull CrashReportData target) throws Exception {
+        target.put(ReportField.DEVICE_ID, SystemServices.getTelephonyManager(context).getDeviceId());
+    }
+}
diff --git a/acra/src/main/java/org/acra/collector/DisplayManagerCollector.java b/acra-core/src/main/java/org/acra/collector/DisplayManagerCollector.java
similarity index 74%
rename from acra/src/main/java/org/acra/collector/DisplayManagerCollector.java
rename to acra-core/src/main/java/org/acra/collector/DisplayManagerCollector.java
index 01afb1af..0b65bd26 100644
--- a/acra/src/main/java/org/acra/collector/DisplayManagerCollector.java
+++ b/acra-core/src/main/java/org/acra/collector/DisplayManagerCollector.java
@@ -26,11 +26,13 @@
 import android.view.Display;
 import android.view.Surface;
 
+import com.google.auto.service.AutoService;
+
 import org.acra.ACRA;
 import org.acra.ReportField;
 import org.acra.builder.ReportBuilder;
-import org.acra.model.ComplexElement;
-import org.acra.model.Element;
+import org.acra.config.CoreConfiguration;
+import org.acra.data.CrashReportData;
 import org.json.JSONArray;
 import org.json.JSONException;
 import org.json.JSONObject;
@@ -41,22 +43,18 @@
 /**
  * Collects information about the connected display(s)
  *
- * @author (original author unknown) & F43nd1r
+ * @author F43nd1r &amp; Various
  */
-final class DisplayManagerCollector extends Collector {
-    private final Context context;
-    private final SparseArray<String> flagNames = new SparseArray<String>();
+@AutoService(Collector.class)
+public final class DisplayManagerCollector extends BaseReportFieldCollector {
 
-    DisplayManagerCollector(Context context) {
+    public DisplayManagerCollector() {
         super(ReportField.DISPLAY);
-        this.context = context;
     }
 
-
-    @NonNull
     @Override
-    Element collect(ReportField reportField, ReportBuilder reportBuilder) {
-        final ComplexElement result = new ComplexElement();
+    void collect(@NonNull ReportField reportField, @NonNull Context context, @NonNull CoreConfiguration config, @NonNull ReportBuilder reportBuilder, @NonNull CrashReportData target) {
+        final JSONObject result = new JSONObject();
         for (Display display : DisplayManagerCompat.getInstance(context).getDisplays()) {
             try {
                 result.put(String.valueOf(display.getDisplayId()), collectDisplayData(display));
@@ -64,8 +62,7 @@ Element collect(ReportField reportField, ReportBuilder reportBuilder) {
                 ACRA.log.w(ACRA.LOG_TAG, "Failed to collect data for display " + display.getDisplayId(), e);
             }
         }
-
-        return result;
+        target.put(ReportField.DISPLAY, result);
     }
 
     @NonNull
@@ -93,18 +90,18 @@ private JSONObject collectDisplayData(@NonNull Display display) throws JSONExcep
         return result;
     }
 
-    private static void collectIsValid(@NonNull Display display, JSONObject container) throws JSONException {
+    private void collectIsValid(@NonNull Display display, @NonNull JSONObject container) throws JSONException {
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
             container.put("isValid", display.isValid());
         }
     }
 
-    private static void collectRotation(@NonNull Display display, JSONObject container) throws JSONException {
+    private void collectRotation(@NonNull Display display, JSONObject container) throws JSONException {
         container.put("rotation", rotationToString(display.getRotation()));
     }
 
     @NonNull
-    private static String rotationToString(int rotation) {
+    private String rotationToString(int rotation) {
         switch (rotation) {
             case Surface.ROTATION_0:
                 return "ROTATION_0";
@@ -119,23 +116,19 @@ private static String rotationToString(int rotation) {
         }
     }
 
-    private static void collectRectSize(@NonNull Display display, JSONObject container) throws JSONException {
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR2) {
-            final Rect size = new Rect();
-            display.getRectSize(size);
-            container.put("rectSize", new JSONArray(Arrays.asList(size.top, size.left, size.width(), size.height())));
-        }
+    private void collectRectSize(@NonNull Display display, @NonNull JSONObject container) throws JSONException {
+        final Rect size = new Rect();
+        display.getRectSize(size);
+        container.put("rectSize", new JSONArray(Arrays.asList(size.top, size.left, size.width(), size.height())));
     }
 
-    private static void collectSize(@NonNull Display display, JSONObject container) throws JSONException {
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR2) {
-            final Point size = new Point();
-            display.getSize(size);
-            container.put("size", new JSONArray(Arrays.asList(size.x, size.y)));
-        }
+    private void collectSize(@NonNull Display display, @NonNull JSONObject container) throws JSONException {
+        final Point size = new Point();
+        display.getSize(size);
+        container.put("size", new JSONArray(Arrays.asList(size.x, size.y)));
     }
 
-    private static void collectRealSize(@NonNull Display display, JSONObject container) throws JSONException {
+    private void collectRealSize(@NonNull Display display, @NonNull JSONObject container) throws JSONException {
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
             final Point size = new Point();
             display.getRealSize(size);
@@ -143,7 +136,7 @@ private static void collectRealSize(@NonNull Display display, JSONObject contain
         }
     }
 
-    private static void collectCurrentSizeRange(@NonNull Display display, @NonNull JSONObject container) throws JSONException {
+    private void collectCurrentSizeRange(@NonNull Display display, @NonNull JSONObject container) throws JSONException {
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
             final Point smallest = new Point();
             final Point largest = new Point();
@@ -157,6 +150,7 @@ private static void collectCurrentSizeRange(@NonNull Display display, @NonNull J
 
     private void collectFlags(@NonNull Display display, @NonNull JSONObject container) throws JSONException {
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
+            final SparseArray<String> flagNames = new SparseArray<>();
             final int flags = display.getFlags();
             for (Field field : display.getClass().getFields()) {
                 if (field.getName().startsWith("FLAG_")) {
@@ -166,17 +160,17 @@ private void collectFlags(@NonNull Display display, @NonNull JSONObject containe
                     }
                 }
             }
-            container.put("flags", activeFlags(flags));
+            container.put("flags", activeFlags(flagNames, flags));
         }
     }
 
-    private static void collectName(@NonNull Display display, JSONObject container) throws JSONException {
+    private void collectName(@NonNull Display display, @NonNull JSONObject container) throws JSONException {
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
             container.put("name", display.getName());
         }
     }
 
-    private static void collectMetrics(@NonNull Display display, JSONObject container) throws JSONException {
+    private void collectMetrics(@NonNull Display display, @NonNull JSONObject container) throws JSONException {
         final DisplayMetrics metrics = new DisplayMetrics();
         display.getMetrics(metrics);
         final JSONObject result = new JSONObject();
@@ -184,7 +178,7 @@ private static void collectMetrics(@NonNull Display display, JSONObject containe
         container.put("metrics", result);
     }
 
-    private static void collectRealMetrics(@NonNull Display display, JSONObject container) throws JSONException {
+    private void collectRealMetrics(@NonNull Display display, @NonNull JSONObject container) throws JSONException {
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
             final DisplayMetrics metrics = new DisplayMetrics();
             display.getRealMetrics(metrics);
@@ -194,7 +188,7 @@ private static void collectRealMetrics(@NonNull Display display, JSONObject cont
         }
     }
 
-    private static void collectMetrics(@NonNull DisplayMetrics metrics, JSONObject container) throws JSONException {
+    private void collectMetrics(@NonNull DisplayMetrics metrics, @NonNull JSONObject container) throws JSONException {
         container.put("density", metrics.density)
                 .put("densityDpi", metrics.densityDpi)
                 .put("scaledDensity", "x" + metrics.scaledDensity)
@@ -214,7 +208,7 @@ private static void collectMetrics(@NonNull DisplayMetrics metrics, JSONObject c
      * separated by '+'.
      */
     @NonNull
-    private String activeFlags(int bitfield) {
+    private String activeFlags(SparseArray<String> flagNames, int bitfield) {
         final StringBuilder result = new StringBuilder();
 
         // Look for masks, apply it an retrieve the masked value
@@ -230,5 +224,4 @@ private String activeFlags(int bitfield) {
         }
         return result.toString();
     }
-
 }
diff --git a/acra/src/main/java/org/acra/collector/DropBoxCollector.java b/acra-core/src/main/java/org/acra/collector/DropBoxCollector.java
similarity index 51%
rename from acra/src/main/java/org/acra/collector/DropBoxCollector.java
rename to acra-core/src/main/java/org/acra/collector/DropBoxCollector.java
index 2d1fd55e..a42966bd 100644
--- a/acra/src/main/java/org/acra/collector/DropBoxCollector.java
+++ b/acra-core/src/main/java/org/acra/collector/DropBoxCollector.java
@@ -21,14 +21,18 @@
 import android.os.DropBoxManager;
 import android.support.annotation.NonNull;
 
+import com.google.auto.service.AutoService;
+
 import org.acra.ACRA;
-import org.acra.ACRAConstants;
 import org.acra.ReportField;
 import org.acra.builder.ReportBuilder;
-import org.acra.config.ACRAConfiguration;
-import org.acra.model.ComplexElement;
-import org.acra.model.Element;
+import org.acra.config.CoreConfiguration;
+import org.acra.data.CrashReportData;
+import org.acra.prefs.SharedPreferencesFactory;
 import org.acra.util.PackageManagerWrapper;
+import org.acra.util.SystemServices;
+import org.json.JSONException;
+import org.json.JSONObject;
 
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
@@ -36,31 +40,18 @@
 import java.util.Calendar;
 import java.util.List;
 import java.util.Locale;
-import java.util.Set;
 
 import static org.acra.ACRA.LOG_TAG;
 
 /**
- * Collects data from the {@link DropBoxManager}. A
- * set of DropBox tags have been identified in the Android source code. , we
- * collect data associated to these tags with hope that some of them could help
- * debugging applications. Application specific tags can be provided by the app
- * dev to track his own usage of the DropBoxManager.
+ * Collects data from the {@link DropBoxManager}. A set of DropBox tags have been identified in the Android source code.
+ * We collect data associated to these tags with hope that some of them could help debugging applications.
+ * Application specific tags can be provided by the app dev to track his own usage of the DropBoxManager.
  *
- * @author Kevin Gaudin & F43nd1r
+ * @author Kevin Gaudin &amp; F43nd1r
  */
-final class DropBoxCollector extends Collector {
-
-    private final Context context;
-    private final ACRAConfiguration config;
-    private final PackageManagerWrapper pm;
-
-    DropBoxCollector(Context context, ACRAConfiguration config, PackageManagerWrapper pm){
-        super(ReportField.DROPBOX);
-        this.context = context;
-        this.config = config;
-        this.pm = pm;
-    }
+@AutoService(Collector.class)
+public final class DropBoxCollector extends BaseReportFieldCollector {
 
     private static final String[] SYSTEM_TAGS = {"system_app_anr", "system_app_wtf", "system_app_crash",
             "system_server_anr", "system_server_wtf", "system_server_crash", "BATTERY_DISCHARGE_INFO",
@@ -69,37 +60,36 @@
 
     private final SimpleDateFormat dateFormat = new SimpleDateFormat("yyyyMMdd'T'HHmmss", Locale.getDefault()); //iCal format (used for backwards compatibility)
 
-    /**
-     * Read latest messages contained in the DropBox for system related tags and
-     * optional developer-set tags.
-     *
-     * @return An Element listing messages retrieved.
-     */
+    public DropBoxCollector() {
+        super(ReportField.DROPBOX);
+    }
+
     @NonNull
     @Override
-    Element collect(ReportField reportField, ReportBuilder reportBuilder) {
-        try {
-            final DropBoxManager dropbox = (DropBoxManager) context.getSystemService(Context.DROPBOX_SERVICE);
+    public Order getOrder() {
+        return Order.FIRST;
+    }
 
-            final Calendar calendar = Calendar.getInstance();
-            calendar.roll(Calendar.MINUTE, -config.dropboxCollectionMinutes());
-            final long time = calendar.getTimeInMillis();
-            dateFormat.format(calendar.getTime());
+    @Override
+    void collect(@NonNull ReportField reportField, @NonNull Context context, @NonNull CoreConfiguration config, @NonNull ReportBuilder reportBuilder, @NonNull CrashReportData target) throws Exception{
+        final DropBoxManager dropbox = SystemServices.getDropBoxManager(context);
 
-            final List<String> tags = new ArrayList<String>();
-            if (config.includeDropBoxSystemTags()) {
-                tags.addAll(Arrays.asList(SYSTEM_TAGS));
-            }
-            final List<String> additionalTags = config.additionalDropBoxTags();
-            if (!additionalTags.isEmpty()) {
-                tags.addAll(additionalTags);
-            }
+        final Calendar calendar = Calendar.getInstance();
+        calendar.roll(Calendar.MINUTE, -config.dropboxCollectionMinutes());
+        final long time = calendar.getTimeInMillis();
+        dateFormat.format(calendar.getTime());
 
-            if (tags.isEmpty()) {
-                return ACRAConstants.NOT_AVAILABLE;
-            }
+        final List<String> tags = new ArrayList<>();
+        if (config.includeDropBoxSystemTags()) {
+            tags.addAll(Arrays.asList(SYSTEM_TAGS));
+        }
+        final List<String> additionalTags = config.additionalDropBoxTags();
+        if (!additionalTags.isEmpty()) {
+            tags.addAll(additionalTags);
+        }
 
-            final ComplexElement dropboxContent = new ComplexElement();
+        if (!tags.isEmpty()) {
+            final JSONObject dropboxContent = new JSONObject();
             for (String tag : tags) {
                 final StringBuilder builder = new StringBuilder();
                 DropBoxManager.Entry entry = dropbox.getNextEntry(tag, time);
@@ -120,19 +110,20 @@ Element collect(ReportField reportField, ReportBuilder reportBuilder) {
                     entry.close();
                     entry = dropbox.getNextEntry(tag, msec);
                 }
-                dropboxContent.put(tag, builder.toString());
+                try {
+                    dropboxContent.put(tag, builder.toString());
+                } catch (JSONException e) {
+                    ACRA.log.w(LOG_TAG, "Failed to collect data for tag " + tag, e);
+                }
             }
-            return dropboxContent;
-
-        } catch (Exception e) {
-            if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "DropBoxManager not available.");
+            target.put(ReportField.DROPBOX, dropboxContent);
         }
-
-        return ACRAConstants.NOT_AVAILABLE;
     }
 
     @Override
-    boolean shouldCollect(Set<ReportField> crashReportFields, ReportField collect, ReportBuilder reportBuilder) {
-        return super.shouldCollect(crashReportFields, collect, reportBuilder) && (pm.hasPermission(Manifest.permission.READ_LOGS) || Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN);
+    boolean shouldCollect(@NonNull Context context, @NonNull CoreConfiguration config, @NonNull ReportField collect, @NonNull ReportBuilder reportBuilder) {
+        return super.shouldCollect(context, config, collect, reportBuilder) &&
+                (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN || new PackageManagerWrapper(context).hasPermission(Manifest.permission.READ_LOGS))
+                && new SharedPreferencesFactory(context, config).create().getBoolean(ACRA.PREF_ENABLE_SYSTEM_LOGS, true);
     }
 }
diff --git a/acra-core/src/main/java/org/acra/collector/LogCatCollector.java b/acra-core/src/main/java/org/acra/collector/LogCatCollector.java
new file mode 100644
index 00000000..f8ca62b7
--- /dev/null
+++ b/acra-core/src/main/java/org/acra/collector/LogCatCollector.java
@@ -0,0 +1,145 @@
+/*
+ *  Copyright 2010 Kevin Gaudin
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.acra.collector;
+
+import android.Manifest;
+import android.content.Context;
+import android.os.Build;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.android.internal.util.Predicate;
+import com.google.auto.service.AutoService;
+
+import org.acra.ACRA;
+import org.acra.ReportField;
+import org.acra.builder.ReportBuilder;
+import org.acra.config.CoreConfiguration;
+import org.acra.data.CrashReportData;
+import org.acra.prefs.SharedPreferencesFactory;
+import org.acra.util.PackageManagerWrapper;
+import org.acra.util.StreamReader;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.util.ArrayList;
+import java.util.List;
+
+import static org.acra.ACRA.LOG_TAG;
+
+
+/**
+ * Executes logcat commands and collects it's output.
+ *
+ * @author Kevin Gaudin &amp; F43nd1r
+ */
+@AutoService(Collector.class)
+public final class LogCatCollector extends BaseReportFieldCollector {
+    private static final int READ_TIMEOUT = 3000;
+
+    public LogCatCollector() {
+        super(ReportField.LOGCAT, ReportField.EVENTSLOG, ReportField.RADIOLOG);
+    }
+
+    @NonNull
+    @Override
+    public Order getOrder() {
+        return Order.FIRST;
+    }
+
+    /**
+     * Executes the logcat command with arguments taken from {@link org.acra.annotation.AcraCore#logcatArguments()}
+     *
+     * @param bufferName The name of the buffer to be read: "main" (default), "radio" or "events".
+     * @return A string containing the latest lines of the output.
+     * Default is 100 lines, use "-t", "300" in {@link org.acra.annotation.AcraCore#logcatArguments()} if you want 300 lines.
+     * You should be aware that increasing this value causes a longer report generation time and a bigger footprint on the device data plan consumption.
+     */
+    private String collectLogCat(@NonNull CoreConfiguration config, @Nullable String bufferName) throws IOException {
+        final int myPid = android.os.Process.myPid();
+        // no need to filter on jellybean onwards, android does that anyway
+        final String myPidStr = Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN && config.logcatFilterByPid() && myPid > 0 ? Integer.toString(myPid) + "):" : null;
+
+        final List<String> commandLine = new ArrayList<>();
+        commandLine.add("logcat");
+        if (bufferName != null) {
+            commandLine.add("-b");
+            commandLine.add(bufferName);
+        }
+
+        final int tailCount;
+        final List<String> logcatArgumentsList = config.logcatArguments();
+
+        final int tailIndex = logcatArgumentsList.indexOf("-t");
+        if (tailIndex > -1 && tailIndex < logcatArgumentsList.size()) {
+            tailCount = Integer.parseInt(logcatArgumentsList.get(tailIndex + 1));
+        } else {
+            tailCount = -1;
+        }
+
+        commandLine.addAll(logcatArgumentsList);
+        final Process process = new ProcessBuilder().command(commandLine).redirectErrorStream(true).start();
+        if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Retrieving logcat output (buffer:" + (bufferName == null ? "default" : bufferName) + ")...");
+
+        try {
+            return streamToString(config, process.getInputStream(), myPidStr == null ? null : s -> s.contains(myPidStr), tailCount);
+        } finally {
+            process.destroy();
+        }
+    }
+
+    @Override
+    boolean shouldCollect(@NonNull Context context, @NonNull CoreConfiguration config, @NonNull ReportField collect, @NonNull ReportBuilder reportBuilder) {
+        return super.shouldCollect(context, config, collect, reportBuilder) &&
+                (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN || new PackageManagerWrapper(context).hasPermission(Manifest.permission.READ_LOGS))
+                && new SharedPreferencesFactory(context, config).create().getBoolean(ACRA.PREF_ENABLE_SYSTEM_LOGS, true);
+    }
+
+    @Override
+    void collect(@NonNull ReportField reportField, @NonNull Context context, @NonNull CoreConfiguration config, @NonNull ReportBuilder reportBuilder, @NonNull CrashReportData target) throws IOException {
+        String bufferName = null;
+        switch (reportField) {
+            case LOGCAT:
+                bufferName = null;
+                break;
+            case EVENTSLOG:
+                bufferName = "events";
+                break;
+            case RADIOLOG:
+                bufferName = "radio";
+                break;
+        }
+        target.put(reportField, collectLogCat(config, bufferName));
+    }
+
+    /**
+     * Reads an InputStream into a string respecting blocking settings.
+     *
+     * @param input  the stream
+     * @param filter should return false for lines which should be excluded
+     * @param limit  the maximum number of lines to read (the last x lines are kept)
+     * @return the String that was read.
+     * @throws IOException if the stream cannot be read.
+     */
+    @NonNull
+    private String streamToString(@NonNull CoreConfiguration config, @NonNull InputStream input, @Nullable Predicate<String> filter, int limit) throws IOException {
+        final StreamReader reader = new StreamReader(input).setFilter(filter).setLimit(limit);
+        if (config.logcatReadNonBlocking()) {
+            reader.setTimeout(READ_TIMEOUT);
+        }
+        return reader.read();
+    }
+}
diff --git a/acra-core/src/main/java/org/acra/collector/LogFileCollector.java b/acra-core/src/main/java/org/acra/collector/LogFileCollector.java
new file mode 100644
index 00000000..a3421201
--- /dev/null
+++ b/acra-core/src/main/java/org/acra/collector/LogFileCollector.java
@@ -0,0 +1,55 @@
+/*
+ *  Copyright 2012 Kevin Gaudin
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+
+package org.acra.collector;
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+
+import com.google.auto.service.AutoService;
+
+import org.acra.ReportField;
+import org.acra.builder.ReportBuilder;
+import org.acra.config.CoreConfiguration;
+import org.acra.data.CrashReportData;
+import org.acra.util.StreamReader;
+
+import java.io.IOException;
+
+/**
+ * Collects the N last lines of a text stream. Use this collector if your application handles its own logging system.
+ *
+ * @author Kevin Gaudin &amp; F43nd1r
+ */
+@AutoService(Collector.class)
+public final class LogFileCollector extends BaseReportFieldCollector {
+
+    public LogFileCollector() {
+        super(ReportField.APPLICATION_LOG);
+    }
+
+    @NonNull
+    @Override
+    public Order getOrder() {
+        return Order.LATE;
+    }
+
+    @Override
+    void collect(@NonNull ReportField reportField, @NonNull Context context, @NonNull CoreConfiguration config, @NonNull ReportBuilder reportBuilder, @NonNull CrashReportData target) throws IOException {
+        target.put(ReportField.APPLICATION_LOG, new StreamReader(config.applicationLogFileDir().getFile(context, config.applicationLogFile()))
+                .setLimit(config.applicationLogFileLines()).read());
+    }
+}
diff --git a/acra/src/main/java/org/acra/collector/MediaCodecListCollector.java b/acra-core/src/main/java/org/acra/collector/MediaCodecListCollector.java
similarity index 86%
rename from acra/src/main/java/org/acra/collector/MediaCodecListCollector.java
rename to acra-core/src/main/java/org/acra/collector/MediaCodecListCollector.java
index 21fd5673..48c9100b 100644
--- a/acra/src/main/java/org/acra/collector/MediaCodecListCollector.java
+++ b/acra-core/src/main/java/org/acra/collector/MediaCodecListCollector.java
@@ -17,6 +17,7 @@
 package org.acra.collector;
 
 import android.annotation.TargetApi;
+import android.content.Context;
 import android.media.MediaCodecInfo;
 import android.media.MediaCodecList;
 import android.os.Build;
@@ -24,27 +25,26 @@
 import android.support.annotation.Nullable;
 import android.util.SparseArray;
 
-import org.acra.ACRA;
-import org.acra.ACRAConstants;
+import com.google.auto.service.AutoService;
+
 import org.acra.ReportField;
 import org.acra.builder.ReportBuilder;
-import org.acra.model.ComplexElement;
-import org.acra.model.Element;
+import org.acra.config.CoreConfiguration;
+import org.acra.data.CrashReportData;
 import org.json.JSONArray;
 import org.json.JSONException;
 import org.json.JSONObject;
 
 import java.lang.reflect.Field;
 import java.lang.reflect.Modifier;
-import java.util.Set;
 
 /**
- * Collects data about available codecs on the device through the MediaCodecList
- * API introduced in Android 4.1 JellyBean.
+ * Collects data about available codecs on the device through the MediaCodecList API introduced in Android 4.1 JellyBean.
  *
- * @author Kevin Gaudin & F43nd1r
+ * @author Kevin Gaudin &amp; F43nd1r
  */
-final class MediaCodecListCollector extends Collector {
+@AutoService(Collector.class)
+public final class MediaCodecListCollector extends BaseReportFieldCollector {
 
     private enum CodecType {
         AVC, H263, MPEG4, AAC
@@ -57,34 +57,33 @@
     private static final String[] H263_TYPES = {"h263", "H263"};
     private static final String[] AAC_TYPES = {"aac", "AAC"};
 
-    private final SparseArray<String> mColorFormatValues = new SparseArray<String>();
-    private final SparseArray<String> mAVCLevelValues = new SparseArray<String>();
-    private final SparseArray<String> mAVCProfileValues = new SparseArray<String>();
-    private final SparseArray<String> mH263LevelValues = new SparseArray<String>();
-    private final SparseArray<String> mH263ProfileValues = new SparseArray<String>();
-    private final SparseArray<String> mMPEG4LevelValues = new SparseArray<String>();
-    private final SparseArray<String> mMPEG4ProfileValues = new SparseArray<String>();
-    private final SparseArray<String> mAACProfileValues = new SparseArray<String>();
+    private final SparseArray<String> mColorFormatValues = new SparseArray<>();
+    private final SparseArray<String> mAVCLevelValues = new SparseArray<>();
+    private final SparseArray<String> mAVCProfileValues = new SparseArray<>();
+    private final SparseArray<String> mH263LevelValues = new SparseArray<>();
+    private final SparseArray<String> mH263ProfileValues = new SparseArray<>();
+    private final SparseArray<String> mMPEG4LevelValues = new SparseArray<>();
+    private final SparseArray<String> mMPEG4ProfileValues = new SparseArray<>();
+    private final SparseArray<String> mAACProfileValues = new SparseArray<>();
 
-    MediaCodecListCollector() {
+    public MediaCodecListCollector() {
         super(ReportField.MEDIA_CODEC_LIST);
     }
 
-    @TargetApi(Build.VERSION_CODES.JELLY_BEAN)
     @NonNull
     @Override
-    Element collect(ReportField reportField, ReportBuilder reportBuilder) {
-        try {
-            return collectMediaCodecList();
-        } catch (JSONException e) {
-            ACRA.log.w("Could not collect media codecs", e);
-            return ACRAConstants.NOT_AVAILABLE;
-        }
+    public Order getOrder() {
+        return Order.LATE;
     }
 
     @Override
-    boolean shouldCollect(Set<ReportField> crashReportFields, ReportField collect, ReportBuilder reportBuilder) {
-        return super.shouldCollect(crashReportFields, collect, reportBuilder) && Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN;
+    void collect(@NonNull ReportField reportField, @NonNull Context context, @NonNull CoreConfiguration config, @NonNull ReportBuilder reportBuilder, @NonNull CrashReportData target) throws JSONException {
+        target.put(ReportField.MEDIA_CODEC_LIST, collectMediaCodecList());
+    }
+
+    @Override
+    boolean shouldCollect(@NonNull Context context, @NonNull CoreConfiguration config, @NonNull ReportField collect, @NonNull ReportBuilder reportBuilder) {
+        return super.shouldCollect(context, config, collect, reportBuilder) && Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN;
     }
 
     /**
@@ -136,15 +135,13 @@ private void prepare() {
     }
 
     /**
-     * Builds an Element describing the list of available codecs on the device
-     * with their capabilities (supported Color Formats, Codec Profiles et
-     * Levels).
+     * Builds a JSONObject describing the list of available codecs on the device with their capabilities (supported Color Formats, Codec Profiles and Levels).
      *
      * @return The media codecs information
      */
     @TargetApi(Build.VERSION_CODES.JELLY_BEAN)
     @NonNull
-    private Element collectMediaCodecList() throws JSONException {
+    private JSONObject collectMediaCodecList() throws JSONException {
         prepare();
         final MediaCodecInfo[] infos;
         if (Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP) {
@@ -159,7 +156,7 @@ private Element collectMediaCodecList() throws JSONException {
             infos = new MediaCodecList(MediaCodecList.ALL_CODECS).getCodecInfos();
         }
 
-        final ComplexElement result = new ComplexElement();
+        final JSONObject result = new JSONObject();
         for (int i = 0; i < infos.length; i++) {
             final MediaCodecInfo codecInfo = infos[i];
             final JSONObject codec = new JSONObject();
@@ -177,13 +174,11 @@ private Element collectMediaCodecList() throws JSONException {
     }
 
     /**
-     * Retrieve capabilities (ColorFormats and CodecProfileLevels) for a
-     * specific codec type.
+     * Retrieve capabilities (ColorFormats and CodecProfileLevels) for a specific codec type.
      *
      * @param codecInfo the currently inspected codec
      * @param type      supported type to collect
-     * @return the color formats and codec profile levels
-     * available for a specific codec type.
+     * @return the color formats and codec profile levels available for a specific codec type.
      */
     @NonNull
     @TargetApi(Build.VERSION_CODES.JELLY_BEAN)
diff --git a/acra/src/main/java/org/acra/collector/MemoryInfoCollector.java b/acra-core/src/main/java/org/acra/collector/MemoryInfoCollector.java
similarity index 68%
rename from acra/src/main/java/org/acra/collector/MemoryInfoCollector.java
rename to acra-core/src/main/java/org/acra/collector/MemoryInfoCollector.java
index 9e328151..09676713 100644
--- a/acra/src/main/java/org/acra/collector/MemoryInfoCollector.java
+++ b/acra-core/src/main/java/org/acra/collector/MemoryInfoCollector.java
@@ -15,53 +15,57 @@
  */
 package org.acra.collector;
 
+import android.content.Context;
 import android.os.Build;
 import android.os.Environment;
 import android.os.StatFs;
 import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.google.auto.service.AutoService;
 
 import org.acra.ACRA;
-import org.acra.ACRAConstants;
 import org.acra.ReportField;
 import org.acra.builder.ReportBuilder;
-import org.acra.model.Element;
-import org.acra.model.NumberElement;
-import org.acra.model.StringElement;
-import org.acra.util.IOUtils;
+import org.acra.config.CoreConfiguration;
+import org.acra.data.CrashReportData;
+import org.acra.util.StreamReader;
 
 import java.io.File;
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.List;
-import java.util.Set;
 
 import static org.acra.ACRA.LOG_TAG;
 
 /**
  * Collects results of the <code>dumpsys</code> command.
  *
- * @author Kevin Gaudin & F43nd1r
+ * @author Kevin Gaudin &amp; F43nd1r
  */
-final class MemoryInfoCollector extends Collector {
-    MemoryInfoCollector() {
+@AutoService(Collector.class)
+public final class MemoryInfoCollector extends BaseReportFieldCollector {
+    public MemoryInfoCollector() {
         super(ReportField.DUMPSYS_MEMINFO, ReportField.TOTAL_MEM_SIZE, ReportField.AVAILABLE_MEM_SIZE);
     }
 
     @Override
-    boolean shouldCollect(Set<ReportField> crashReportFields, ReportField collect, ReportBuilder reportBuilder) {
-        return super.shouldCollect(crashReportFields, collect, reportBuilder) && !(reportBuilder.getException() instanceof OutOfMemoryError);
+    boolean shouldCollect(@NonNull Context context, @NonNull CoreConfiguration config, @NonNull ReportField collect, @NonNull ReportBuilder reportBuilder) {
+        return super.shouldCollect(context, config, collect, reportBuilder) && !(reportBuilder.getException() instanceof OutOfMemoryError);
     }
 
-    @NonNull
     @Override
-    Element collect(ReportField reportField, ReportBuilder reportBuilder) {
+    void collect(@NonNull ReportField reportField, @NonNull Context context, @NonNull CoreConfiguration config, @NonNull ReportBuilder reportBuilder, @NonNull CrashReportData target) {
         switch (reportField) {
             case DUMPSYS_MEMINFO:
-                return collectMemInfo();
+                target.put(ReportField.DUMPSYS_MEMINFO, collectMemInfo());
+                break;
             case TOTAL_MEM_SIZE:
-                return new NumberElement(getTotalInternalMemorySize());
+                target.put(ReportField.TOTAL_MEM_SIZE, getTotalInternalMemorySize());
+                break;
             case AVAILABLE_MEM_SIZE:
-                return new NumberElement(getAvailableInternalMemorySize());
+                target.put(ReportField.AVAILABLE_MEM_SIZE, getAvailableInternalMemorySize());
+                break;
             default:
                 //will not happen if used correctly
                 throw new IllegalArgumentException();
@@ -69,25 +73,23 @@ Element collect(ReportField reportField, ReportBuilder reportBuilder) {
     }
 
     /**
-     * Collect results of the <code>dumpsys meminfo</code> command restricted to
-     * this application process.
+     * Collect results of the <code>dumpsys meminfo</code> command restricted to this application process.
      *
      * @return The execution result.
      */
-    @NonNull
-    private static Element collectMemInfo() {
-
+    @Nullable
+    private String collectMemInfo() {
         try {
-            final List<String> commandLine = new ArrayList<String>();
+            final List<String> commandLine = new ArrayList<>();
             commandLine.add("dumpsys");
             commandLine.add("meminfo");
             commandLine.add(Integer.toString(android.os.Process.myPid()));
 
             final Process process = Runtime.getRuntime().exec(commandLine.toArray(new String[commandLine.size()]));
-            return new StringElement(IOUtils.streamToString(process.getInputStream()));
+            return new StreamReader(process.getInputStream()).read();
         } catch (IOException e) {
             ACRA.log.e(LOG_TAG, "MemoryInfoCollector.meminfo could not retrieve data", e);
-            return ACRAConstants.NOT_AVAILABLE;
+            return null;
         }
     }
 
@@ -97,7 +99,7 @@ private static Element collectMemInfo() {
      *
      * @return Number of bytes available.
      */
-    private static long getAvailableInternalMemorySize() {
+    private long getAvailableInternalMemorySize() {
         final File path = Environment.getDataDirectory();
         final StatFs stat = new StatFs(path.getPath());
         final long blockSize;
@@ -115,12 +117,11 @@ private static long getAvailableInternalMemorySize() {
     }
 
     /**
-     * Calculates the total memory of the device. This is based on an inspection of the filesystem, which in android
-     * devices is stored in RAM.
+     * Calculates the total memory of the device. This is based on an inspection of the filesystem, which in android devices is stored in RAM.
      *
      * @return Total number of bytes.
      */
-    private static long getTotalInternalMemorySize() {
+    private long getTotalInternalMemorySize() {
         final File path = Environment.getDataDirectory();
         final StatFs stat = new StatFs(path.getPath());
         final long blockSize;
diff --git a/acra/src/main/java/org/acra/collector/PackageManagerCollector.java b/acra-core/src/main/java/org/acra/collector/PackageManagerCollector.java
similarity index 53%
rename from acra/src/main/java/org/acra/collector/PackageManagerCollector.java
rename to acra-core/src/main/java/org/acra/collector/PackageManagerCollector.java
index 9d88e98a..b5b4e317 100644
--- a/acra/src/main/java/org/acra/collector/PackageManagerCollector.java
+++ b/acra-core/src/main/java/org/acra/collector/PackageManagerCollector.java
@@ -15,43 +15,45 @@
  */
 package org.acra.collector;
 
+import android.content.Context;
 import android.content.pm.PackageInfo;
 import android.support.annotation.NonNull;
 
-import org.acra.ACRAConstants;
+import com.google.auto.service.AutoService;
+
 import org.acra.ReportField;
 import org.acra.builder.ReportBuilder;
-import org.acra.model.Element;
-import org.acra.model.NumberElement;
-import org.acra.model.StringElement;
+import org.acra.config.CoreConfiguration;
+import org.acra.data.CrashReportData;
 import org.acra.util.PackageManagerWrapper;
 
 /**
- * Collects PackageInfo values
+ * Collects {@link PackageInfo} values
  *
  * @author F43nd1r
  * @since 4.9.1
  */
-final class PackageManagerCollector extends Collector {
-    private final PackageManagerWrapper pm;
+@AutoService(Collector.class)
+public final class PackageManagerCollector extends BaseReportFieldCollector {
 
-    PackageManagerCollector(PackageManagerWrapper pm) {
+    public PackageManagerCollector() {
         super(ReportField.APP_VERSION_NAME, ReportField.APP_VERSION_CODE);
-        this.pm = pm;
     }
 
-    @NonNull
     @Override
-    Element collect(ReportField reportField, ReportBuilder reportBuilder) {
-        final PackageInfo info = pm.getPackageInfo();
-        if (info != null) {
+    void collect(@NonNull ReportField reportField, @NonNull Context context, @NonNull CoreConfiguration config, @NonNull ReportBuilder reportBuilder, @NonNull CrashReportData target) throws CollectorException {
+        final PackageInfo info = new PackageManagerWrapper(context).getPackageInfo();
+        if (info == null) {
+            throw new CollectorException("Failed to get package info");
+        } else {
             switch (reportField) {
                 case APP_VERSION_NAME:
-                    return new StringElement(info.versionName);
+                    target.put(ReportField.APP_VERSION_NAME, info.versionName);
+                    break;
                 case APP_VERSION_CODE:
-                    return new NumberElement(info.versionCode);
+                    target.put(ReportField.APP_VERSION_CODE, info.versionCode);
+                    break;
             }
         }
-        return ACRAConstants.NOT_AVAILABLE;
     }
 }
diff --git a/acra/src/main/java/org/acra/collector/ReflectionCollector.java b/acra-core/src/main/java/org/acra/collector/ReflectionCollector.java
similarity index 62%
rename from acra/src/main/java/org/acra/collector/ReflectionCollector.java
rename to acra-core/src/main/java/org/acra/collector/ReflectionCollector.java
index d4fcd059..4099ff2e 100644
--- a/acra/src/main/java/org/acra/collector/ReflectionCollector.java
+++ b/acra-core/src/main/java/org/acra/collector/ReflectionCollector.java
@@ -21,13 +21,12 @@
 import android.os.Environment;
 import android.support.annotation.NonNull;
 
-import org.acra.ACRA;
-import org.acra.ACRAConstants;
+import com.google.auto.service.AutoService;
+
 import org.acra.ReportField;
 import org.acra.builder.ReportBuilder;
-import org.acra.config.ACRAConfiguration;
-import org.acra.model.ComplexElement;
-import org.acra.model.Element;
+import org.acra.config.CoreConfiguration;
+import org.acra.data.CrashReportData;
 import org.json.JSONArray;
 import org.json.JSONException;
 import org.json.JSONObject;
@@ -37,24 +36,42 @@
 import java.lang.reflect.Method;
 import java.util.Arrays;
 
-import static org.acra.ACRA.LOG_TAG;
-
 /**
  * Collector retrieving key/value pairs from static fields and getters.
- * Reflection API usage allows to retrieve data without having to
- * implement a class for each android version of each interesting class.
+ * Reflection API usage allows to retrieve data without having to implement a class for each android version of each interesting class.
  * It can also help find hidden properties.
  *
- * @author Kevin Gaudin
+ * @author Kevin Gaudin &amp; F43nd1r
  */
-final class ReflectionCollector extends Collector {
-    private final Context context;
-    private final ACRAConfiguration config;
+@AutoService(Collector.class)
+public final class ReflectionCollector extends BaseReportFieldCollector {
 
-    ReflectionCollector(Context context, ACRAConfiguration config) {
+    public ReflectionCollector() {
         super(ReportField.BUILD, ReportField.BUILD_CONFIG, ReportField.ENVIRONMENT);
-        this.context = context;
-        this.config = config;
+    }
+
+    @Override
+    void collect(@NonNull ReportField reportField, @NonNull Context context, @NonNull CoreConfiguration config, @NonNull ReportBuilder reportBuilder, @NonNull CrashReportData target)
+            throws JSONException, ClassNotFoundException {
+        final JSONObject result = new JSONObject();
+        switch (reportField) {
+            case BUILD:
+                collectConstants(Build.class, result);
+                final JSONObject version = new JSONObject();
+                collectConstants(Build.VERSION.class, version);
+                result.put("VERSION", version);
+                break;
+            case BUILD_CONFIG:
+                collectConstants(getBuildConfigClass(context, config), result);
+                break;
+            case ENVIRONMENT:
+                collectStaticGettersResults(Environment.class, result);
+                break;
+            default:
+                //will not happen if used correctly
+                throw new IllegalArgumentException();
+        }
+        target.put(reportField, result);
     }
 
     /**
@@ -87,7 +104,7 @@ private static void collectConstants(@NonNull Class<?> someClass, @NonNull JSONO
      *
      * @param someClass the class to be inspected.
      */
-    private static void collectStaticGettersResults(@NonNull Class<?> someClass, JSONObject container) throws JSONException {
+    private void collectStaticGettersResults(@NonNull Class<?> someClass, @NonNull JSONObject container) throws JSONException {
         final Method[] methods = someClass.getMethods();
         for (final Method method : methods) {
             if (method.getParameterTypes().length == 0
@@ -106,46 +123,14 @@ private static void collectStaticGettersResults(@NonNull Class<?> someClass, JSO
         }
     }
 
-    @NonNull
-    @Override
-    Element collect(ReportField reportField, ReportBuilder reportBuilder) {
-        final ComplexElement result = new ComplexElement();
-        try {
-            switch (reportField) {
-                case BUILD:
-                    collectConstants(Build.class, result);
-                    final JSONObject version = new JSONObject();
-                    collectConstants(Build.VERSION.class, version);
-                    result.put("VERSION", version);
-                    break;
-                case BUILD_CONFIG:
-                    try {
-                        collectConstants(getBuildConfigClass(), result);
-                    } catch (ClassNotFoundException e) {
-                        //already logged in getBuildConfigClass
-                    }
-                    break;
-                case ENVIRONMENT:
-                    collectStaticGettersResults(Environment.class, result);
-                    break;
-                default:
-                    //will not happen if used correctly
-                    throw new IllegalArgumentException();
-            }
-        } catch (JSONException e) {
-            ACRA.log.w("Couldn't collect constants", e);
-            return ACRAConstants.NOT_AVAILABLE;
-        }
-        return result;
-    }
-
     /**
      * get the configured BuildConfigClass or guess it if not configured
+     *
      * @return the BuildConfigClass
      * @throws ClassNotFoundException if the class cannot be found
      */
     @NonNull
-    private Class<?> getBuildConfigClass() throws ClassNotFoundException {
+    private Class<?> getBuildConfigClass(@NonNull Context context, @NonNull CoreConfiguration config) throws ClassNotFoundException {
         final Class configuredBuildConfig = config.buildConfigClass();
         if (!configuredBuildConfig.equals(Object.class)) {
             // If set via annotations or programmatically then it will have a real value,
@@ -154,11 +139,6 @@ Element collect(ReportField reportField, ReportBuilder reportBuilder) {
         }
 
         final String className = context.getPackageName() + ".BuildConfig";
-        try {
-            return Class.forName(className);
-        } catch (ClassNotFoundException e) {
-            ACRA.log.e(LOG_TAG, "Not adding buildConfig to log. Class Not found : " + className + ". Please configure 'buildConfigClass' in your ACRA config");
-            throw e;
-        }
+        return Class.forName(className);
     }
 }
diff --git a/acra-core/src/main/java/org/acra/collector/SettingsCollector.java b/acra-core/src/main/java/org/acra/collector/SettingsCollector.java
new file mode 100644
index 00000000..2ff2099f
--- /dev/null
+++ b/acra-core/src/main/java/org/acra/collector/SettingsCollector.java
@@ -0,0 +1,106 @@
+/*
+ *  Copyright 2010 Kevin Gaudin
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+
+package org.acra.collector;
+
+import android.content.ContentResolver;
+import android.content.Context;
+import android.os.Build;
+import android.provider.Settings.Global;
+import android.provider.Settings.Secure;
+import android.provider.Settings.System;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.google.auto.service.AutoService;
+
+import org.acra.ACRA;
+import org.acra.ReportField;
+import org.acra.builder.ReportBuilder;
+import org.acra.config.CoreConfiguration;
+import org.acra.data.CrashReportData;
+import org.json.JSONObject;
+
+import java.lang.reflect.Field;
+import java.lang.reflect.Method;
+
+import static org.acra.ACRA.LOG_TAG;
+
+/**
+ * collects data from {@link System}, {@link Global} and {@link Secure} Settings classes.
+ *
+ * @author Kevin Gaudin &amp; F43nd1r
+ */
+@AutoService(Collector.class)
+public final class SettingsCollector extends BaseReportFieldCollector {
+
+    private static final String ERROR = "Error: ";
+
+    public SettingsCollector() {
+        super(ReportField.SETTINGS_SYSTEM, ReportField.SETTINGS_SECURE, ReportField.SETTINGS_GLOBAL);
+    }
+
+    @Override
+    void collect(@NonNull ReportField reportField, @NonNull Context context, @NonNull CoreConfiguration config, @NonNull ReportBuilder reportBuilder, @NonNull CrashReportData target) throws Exception {
+        switch (reportField) {
+            case SETTINGS_SYSTEM:
+                target.put(ReportField.SETTINGS_SYSTEM, collectSettings(context, config, System.class));
+                break;
+            case SETTINGS_SECURE:
+                target.put(ReportField.SETTINGS_SECURE, collectSettings(context, config, Secure.class));
+                break;
+            case SETTINGS_GLOBAL:
+                target.put(ReportField.SETTINGS_GLOBAL, Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1 ? collectSettings(context, config, Global.class) : null);
+                break;
+            default:
+                //will not happen if used correctly
+                throw new IllegalArgumentException();
+        }
+    }
+
+    @NonNull
+    private JSONObject collectSettings(@NonNull Context context, @NonNull CoreConfiguration config, @NonNull Class<?> settings) throws NoSuchMethodException {
+        final JSONObject result = new JSONObject();
+        final Field[] keys = settings.getFields();
+        final Method getString = settings.getMethod("getString", ContentResolver.class, String.class);
+        for (final Field key : keys) {
+            if (!key.isAnnotationPresent(Deprecated.class) && key.getType() == String.class && isAuthorized(config, key)) {
+                try {
+                    //noinspection JavaReflectionInvocation
+                    final Object value = getString.invoke(null, context.getContentResolver(), key.get(null));
+                    if (value != null) {
+                        result.put(key.getName(), value);
+                    }
+                } catch (@NonNull Exception e) {
+                    ACRA.log.w(LOG_TAG, ERROR, e);
+                }
+            }
+        }
+        return result;
+    }
+
+    private boolean isAuthorized(@NonNull CoreConfiguration config, @Nullable Field key) {
+        if (key == null || key.getName().startsWith("WIFI_AP")) {
+            return false;
+        }
+        for (String regex : config.excludeMatchingSettingsKeys()) {
+            if (key.getName().matches(regex)) {
+                return false;
+            }
+        }
+        return true;
+    }
+}
diff --git a/acra/src/main/java/org/acra/collector/SharedPreferencesCollector.java b/acra-core/src/main/java/org/acra/collector/SharedPreferencesCollector.java
similarity index 67%
rename from acra/src/main/java/org/acra/collector/SharedPreferencesCollector.java
rename to acra-core/src/main/java/org/acra/collector/SharedPreferencesCollector.java
index 686b2cef..beb89b6e 100644
--- a/acra/src/main/java/org/acra/collector/SharedPreferencesCollector.java
+++ b/acra-core/src/main/java/org/acra/collector/SharedPreferencesCollector.java
@@ -20,15 +20,14 @@
 import android.preference.PreferenceManager;
 import android.support.annotation.NonNull;
 
+import com.google.auto.service.AutoService;
+
 import org.acra.ACRA;
-import org.acra.ACRAConstants;
 import org.acra.ReportField;
-import org.acra.annotation.ReportsCrashes;
 import org.acra.builder.ReportBuilder;
-import org.acra.config.ACRAConfiguration;
-import org.acra.model.ComplexElement;
-import org.acra.model.Element;
-import org.acra.model.StringElement;
+import org.acra.config.CoreConfiguration;
+import org.acra.data.CrashReportData;
+import org.acra.prefs.SharedPreferencesFactory;
 import org.json.JSONException;
 import org.json.JSONObject;
 
@@ -36,41 +35,48 @@
 import java.util.Map;
 import java.util.TreeMap;
 
-import static org.acra.ACRA.LOG_TAG;
-
 /**
- * Collects the content (key/value pairs) of SharedPreferences, from the
- * application default preferences or any other preferences asked by the
- * application developer.
+ * Collects the content (key/value pairs) of SharedPreferences, from the application default preferences or any other preferences asked by the application developer.
+ *
+ * @author F43nd1r &amp; Various
  */
-final class SharedPreferencesCollector extends Collector {
-
-    private final Context context;
-    private final ACRAConfiguration config;
-    private final SharedPreferences prefs;
+@AutoService(Collector.class)
+public final class SharedPreferencesCollector extends BaseReportFieldCollector {
 
-    SharedPreferencesCollector(@NonNull Context context, @NonNull ACRAConfiguration config, SharedPreferences prefs) {
+    public SharedPreferencesCollector() {
         super(ReportField.USER_EMAIL, ReportField.SHARED_PREFERENCES);
-        this.context = context;
-        this.config = config;
-        this.prefs = prefs;
+    }
+
+    @Override
+    void collect(@NonNull ReportField reportField, @NonNull Context context, @NonNull CoreConfiguration config, @NonNull ReportBuilder reportBuilder, @NonNull CrashReportData target) throws Exception {
+        switch (reportField) {
+            case USER_EMAIL:
+                target.put(ReportField.USER_EMAIL, new SharedPreferencesFactory(context, config).create().getString(ACRA.PREF_USER_EMAIL_ADDRESS, null));
+                break;
+            case SHARED_PREFERENCES:
+                target.put(ReportField.SHARED_PREFERENCES, collect(context, config));
+                break;
+            default:
+                //will not happen if used correctly
+                throw new IllegalArgumentException();
+        }
     }
 
     /**
      * Collects all key/value pairs in SharedPreferences.
      * The application default SharedPreferences are always
      * collected, and the developer can provide additional SharedPreferences
-     * names in the {@link ReportsCrashes#additionalSharedPreferences()}
+     * names in the {@link org.acra.annotation.AcraCore#additionalSharedPreferences()}
      * configuration item.
      *
      * @return the collected key/value pairs.
      */
     @NonNull
-    private Element collect() throws JSONException {
-        final ComplexElement result = new ComplexElement();
+    private JSONObject collect(@NonNull Context context, @NonNull CoreConfiguration config) throws JSONException {
+        final JSONObject result = new JSONObject();
 
         // Include the default SharedPreferences
-        final Map<String, SharedPreferences> sharedPrefs = new TreeMap<String, SharedPreferences>();
+        final Map<String, SharedPreferences> sharedPrefs = new TreeMap<>();
         sharedPrefs.put("default", PreferenceManager.getDefaultSharedPreferences(context));
 
         // Add in any additional SharedPreferences
@@ -89,8 +95,8 @@ private Element collect() throws JSONException {
             if (prefEntries.isEmpty()) {
                 result.put(sharedPrefId, "empty");
             } else {
-                for (final Iterator<String> iterator = prefEntries.keySet().iterator(); iterator.hasNext();){
-                    if(filteredKey(iterator.next())){
+                for (final Iterator<String> iterator = prefEntries.keySet().iterator(); iterator.hasNext(); ) {
+                    if (filteredKey(config, iterator.next())) {
                         iterator.remove();
                     }
                 }
@@ -108,7 +114,7 @@ private Element collect() throws JSONException {
      * @param key the name of the preference to be checked
      * @return true if the key has to be excluded from reports.
      */
-    private boolean filteredKey(@NonNull String key) {
+    private boolean filteredKey(@NonNull CoreConfiguration config, @NonNull String key) {
         for (String regex : config.excludeMatchingSharedPreferencesKeys()) {
             if (key.matches(regex)) {
                 return true;
@@ -116,24 +122,4 @@ private boolean filteredKey(@NonNull String key) {
         }
         return false;
     }
-
-    @NonNull
-    @Override
-    Element collect(ReportField reportField, ReportBuilder reportBuilder) {
-        switch (reportField) {
-            case USER_EMAIL:
-                final String email = prefs.getString(ACRA.PREF_USER_EMAIL_ADDRESS, null);
-                return email != null ? new StringElement(email) : ACRAConstants.NOT_AVAILABLE;
-            case SHARED_PREFERENCES:
-                try {
-                    return collect();
-                } catch (JSONException e) {
-                    ACRA.log.w(LOG_TAG, "Could not collect shared preferences", e);
-                    return ACRAConstants.NOT_AVAILABLE;
-                }
-            default:
-                //will not happen if used correctly
-                throw new IllegalArgumentException();
-        }
-    }
 }
diff --git a/acra-core/src/main/java/org/acra/collector/SimpleValuesCollector.java b/acra-core/src/main/java/org/acra/collector/SimpleValuesCollector.java
new file mode 100644
index 00000000..ee1cfa61
--- /dev/null
+++ b/acra-core/src/main/java/org/acra/collector/SimpleValuesCollector.java
@@ -0,0 +1,119 @@
+/*
+ *  Copyright 2016
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.acra.collector;
+
+import android.content.Context;
+import android.os.Build;
+import android.support.annotation.NonNull;
+
+import com.google.auto.service.AutoService;
+
+import org.acra.ReportField;
+import org.acra.builder.ReportBuilder;
+import org.acra.config.CoreConfiguration;
+import org.acra.data.CrashReportData;
+import org.acra.util.Installation;
+
+import java.net.InetAddress;
+import java.net.NetworkInterface;
+import java.net.SocketException;
+import java.util.Enumeration;
+import java.util.UUID;
+
+/**
+ * Collects various simple values
+ *
+ * @author F43nd1r
+ * @since 4.9.1
+ */
+@AutoService(Collector.class)
+public final class SimpleValuesCollector extends BaseReportFieldCollector {
+
+    public SimpleValuesCollector() {
+        super(ReportField.IS_SILENT, ReportField.REPORT_ID, ReportField.INSTALLATION_ID,
+                ReportField.PACKAGE_NAME, ReportField.PHONE_MODEL, ReportField.ANDROID_VERSION,
+                ReportField.BRAND, ReportField.PRODUCT, ReportField.FILE_PATH, ReportField.USER_IP);
+    }
+
+    @Override
+    void collect(@NonNull ReportField reportField, @NonNull Context context, @NonNull CoreConfiguration config, @NonNull ReportBuilder reportBuilder, @NonNull CrashReportData target) throws Exception {
+        switch (reportField) {
+            case IS_SILENT:
+                target.put(ReportField.IS_SILENT, reportBuilder.isSendSilently());
+                break;
+            case REPORT_ID:
+                target.put(ReportField.REPORT_ID, UUID.randomUUID().toString());
+                break;
+            case INSTALLATION_ID:
+                target.put(ReportField.INSTALLATION_ID, Installation.id(context));
+                break;
+            case PACKAGE_NAME:
+                target.put(ReportField.PACKAGE_NAME, context.getPackageName());
+                break;
+            case PHONE_MODEL:
+                target.put(ReportField.PHONE_MODEL, Build.MODEL);
+                break;
+            case ANDROID_VERSION:
+                target.put(ReportField.ANDROID_VERSION, Build.VERSION.RELEASE);
+                break;
+            case BRAND:
+                target.put(ReportField.BRAND, Build.BRAND);
+                break;
+            case PRODUCT:
+                target.put(ReportField.PRODUCT, Build.PRODUCT);
+                break;
+            case FILE_PATH:
+                target.put(ReportField.FILE_PATH, getApplicationFilePath(context));
+                break;
+            case USER_IP:
+                target.put(ReportField.USER_IP, getLocalIpAddress());
+                break;
+            default:
+                //will not happen if used correctly
+                throw new IllegalArgumentException();
+        }
+    }
+
+    @Override
+    boolean shouldCollect(@NonNull Context context, @NonNull CoreConfiguration config, @NonNull ReportField collect, @NonNull ReportBuilder reportBuilder) {
+        return collect == ReportField.IS_SILENT || collect == ReportField.REPORT_ID || super.shouldCollect(context, config, collect, reportBuilder);
+    }
+
+    @NonNull
+    private String getApplicationFilePath(@NonNull Context context) {
+        return context.getFilesDir().getAbsolutePath();
+    }
+
+    @NonNull
+    private static String getLocalIpAddress() throws SocketException {
+        final StringBuilder result = new StringBuilder();
+        boolean first = true;
+        for (final Enumeration<NetworkInterface> en = NetworkInterface.getNetworkInterfaces(); en.hasMoreElements(); ) {
+            final NetworkInterface intf = en.nextElement();
+            for (final Enumeration<InetAddress> enumIpAddr = intf.getInetAddresses(); enumIpAddr.hasMoreElements(); ) {
+                final InetAddress inetAddress = enumIpAddr.nextElement();
+                if (!inetAddress.isLoopbackAddress()) {
+                    if (!first) {
+                        result.append('\n');
+                    }
+                    result.append(inetAddress.getHostAddress());
+                    first = false;
+                }
+            }
+        }
+        return result.toString();
+    }
+}
diff --git a/acra/src/main/java/org/acra/collector/StacktraceCollector.java b/acra-core/src/main/java/org/acra/collector/StacktraceCollector.java
similarity index 72%
rename from acra/src/main/java/org/acra/collector/StacktraceCollector.java
rename to acra-core/src/main/java/org/acra/collector/StacktraceCollector.java
index 98b03fb1..daf41ce9 100644
--- a/acra/src/main/java/org/acra/collector/StacktraceCollector.java
+++ b/acra-core/src/main/java/org/acra/collector/StacktraceCollector.java
@@ -15,19 +15,21 @@
  */
 package org.acra.collector;
 
+import android.content.Context;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.text.TextUtils;
 
+import com.google.auto.service.AutoService;
+
 import org.acra.ReportField;
 import org.acra.builder.ReportBuilder;
-import org.acra.model.Element;
-import org.acra.model.StringElement;
+import org.acra.config.CoreConfiguration;
+import org.acra.data.CrashReportData;
 
 import java.io.PrintWriter;
 import java.io.StringWriter;
 import java.io.Writer;
-import java.util.Set;
 
 /**
  * Collects the holy stacktrace
@@ -35,31 +37,38 @@
  * @author F43nd1r
  * @since 4.9.1
  */
-final class StacktraceCollector extends Collector {
-    StacktraceCollector() {
+@AutoService(Collector.class)
+public final class StacktraceCollector extends BaseReportFieldCollector {
+    public StacktraceCollector() {
         super(ReportField.STACK_TRACE, ReportField.STACK_TRACE_HASH);
     }
 
+    @NonNull
     @Override
-    boolean shouldCollect(Set<ReportField> crashReportFields, ReportField collect, ReportBuilder reportBuilder) {
-        return collect == ReportField.STACK_TRACE || super.shouldCollect(crashReportFields, collect, reportBuilder);
+    public Order getOrder() {
+        return Order.FIRST;
     }
 
-    @NonNull
     @Override
-    Element collect(ReportField reportField, ReportBuilder reportBuilder) {
+    void collect(@NonNull ReportField reportField, @NonNull Context context, @NonNull CoreConfiguration config, @NonNull ReportBuilder reportBuilder, @NonNull CrashReportData target) {
         switch (reportField) {
             case STACK_TRACE:
-                return new StringElement(
-                        getStackTrace(reportBuilder.getMessage(), reportBuilder.getException()));
+                target.put(ReportField.STACK_TRACE, getStackTrace(reportBuilder.getMessage(), reportBuilder.getException()));
+                break;
             case STACK_TRACE_HASH:
-                return new StringElement(getStackTraceHash(reportBuilder.getException()));
+                target.put(ReportField.STACK_TRACE_HASH, getStackTraceHash(reportBuilder.getException()));
+                break;
             default:
                 //will not happen if used correctly
                 throw new IllegalArgumentException();
         }
     }
 
+    @Override
+    boolean shouldCollect(@NonNull Context context, @NonNull CoreConfiguration config, @NonNull ReportField collect, @NonNull ReportBuilder reportBuilder) {
+        return collect == ReportField.STACK_TRACE || super.shouldCollect(context, config, collect, reportBuilder);
+    }
+
     @NonNull
     private String getStackTrace(@Nullable String msg, @Nullable Throwable th) {
         final Writer result = new StringWriter();
diff --git a/acra-core/src/main/java/org/acra/collector/ThreadCollector.java b/acra-core/src/main/java/org/acra/collector/ThreadCollector.java
new file mode 100644
index 00000000..d8839ce8
--- /dev/null
+++ b/acra-core/src/main/java/org/acra/collector/ThreadCollector.java
@@ -0,0 +1,63 @@
+/*
+ *  Copyright 2010 Kevin Gaudin
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+
+package org.acra.collector;
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+
+import com.google.auto.service.AutoService;
+
+import org.acra.ReportField;
+import org.acra.builder.ReportBuilder;
+import org.acra.config.CoreConfiguration;
+import org.acra.data.CrashReportData;
+import org.json.JSONObject;
+
+/**
+ * Collects some data identifying a Thread
+ *
+ * @author Kevin Gaudin &amp; F43nd1r
+ */
+@AutoService(Collector.class)
+public final class ThreadCollector extends BaseReportFieldCollector {
+    public ThreadCollector() {
+        super(ReportField.THREAD_DETAILS);
+    }
+
+    @NonNull
+    @Override
+    public Order getOrder() {
+        return Order.LATE;
+    }
+
+    @Override
+    void collect(@NonNull ReportField reportField, @NonNull Context context, @NonNull CoreConfiguration config, @NonNull ReportBuilder reportBuilder, @NonNull CrashReportData target) throws Exception {
+        final Thread t = reportBuilder.getUncaughtExceptionThread();
+        if (t != null) {
+            final JSONObject result = new JSONObject();
+            result.put("id", t.getId());
+            result.put("name", t.getName());
+            result.put("priority", t.getPriority());
+            if (t.getThreadGroup() != null) {
+                result.put("groupName", t.getThreadGroup().getName());
+            }
+            target.put(ReportField.THREAD_DETAILS, result);
+        } else {
+            target.put(ReportField.THREAD_DETAILS, (String) null);
+        }
+    }
+}
diff --git a/acra/src/main/java/org/acra/collector/TimeCollector.java b/acra-core/src/main/java/org/acra/collector/TimeCollector.java
similarity index 51%
rename from acra/src/main/java/org/acra/collector/TimeCollector.java
rename to acra-core/src/main/java/org/acra/collector/TimeCollector.java
index 1b176219..905c6414 100644
--- a/acra/src/main/java/org/acra/collector/TimeCollector.java
+++ b/acra-core/src/main/java/org/acra/collector/TimeCollector.java
@@ -15,19 +15,21 @@
  */
 package org.acra.collector;
 
+import android.content.Context;
 import android.support.annotation.NonNull;
 
+import com.google.auto.service.AutoService;
+
 import org.acra.ACRAConstants;
 import org.acra.ReportField;
 import org.acra.builder.ReportBuilder;
-import org.acra.model.Element;
-import org.acra.model.StringElement;
+import org.acra.config.CoreConfiguration;
+import org.acra.data.CrashReportData;
 
 import java.text.SimpleDateFormat;
 import java.util.Calendar;
 import java.util.GregorianCalendar;
 import java.util.Locale;
-import java.util.Set;
 
 /**
  * collects time information
@@ -35,22 +37,18 @@
  * @author F43nd1r
  * @since 4.9.1
  */
-final class TimeCollector extends Collector {
-    private final Calendar appStartDate;
+@AutoService(Collector.class)
+public final class TimeCollector extends BaseReportFieldCollector implements ApplicationStartupCollector {
+    private final SimpleDateFormat dateFormat;
+    private Calendar appStartDate;
 
-    TimeCollector(Calendar appStartDate) {
+    public TimeCollector() {
         super(ReportField.USER_APP_START_DATE, ReportField.USER_CRASH_DATE);
-        this.appStartDate = appStartDate;
-    }
-
-    @Override
-    boolean shouldCollect(Set<ReportField> crashReportFields, ReportField collect, ReportBuilder reportBuilder) {
-        return true;
+        dateFormat = new SimpleDateFormat(ACRAConstants.DATE_TIME_FORMAT_STRING, Locale.ENGLISH);
     }
 
-    @NonNull
     @Override
-    Element collect(ReportField reportField, ReportBuilder reportBuilder) {
+    void collect(@NonNull ReportField reportField, @NonNull Context context, @NonNull CoreConfiguration config, @NonNull ReportBuilder reportBuilder, @NonNull CrashReportData target) {
         final Calendar time;
         switch (reportField) {
             case USER_APP_START_DATE:
@@ -63,12 +61,23 @@ Element collect(ReportField reportField, ReportBuilder reportBuilder) {
                 //will not happen if used correctly
                 throw new IllegalArgumentException();
         }
-        return new StringElement(getTimeString(time));
+        target.put(reportField, getTimeString(time));
+    }
+
+    @Override
+    public void collectApplicationStartUp(@NonNull Context context, @NonNull CoreConfiguration config) {
+        if (config.reportContent().contains(ReportField.USER_APP_START_DATE)) {
+            appStartDate = new GregorianCalendar();
+        }
+    }
+
+    @Override
+    boolean shouldCollect(@NonNull Context context, @NonNull CoreConfiguration config, @NonNull ReportField collect, @NonNull ReportBuilder reportBuilder) {
+        return collect == ReportField.USER_CRASH_DATE || super.shouldCollect(context, config, collect, reportBuilder);
     }
 
     @NonNull
-    private static String getTimeString(@NonNull Calendar time) {
-        final SimpleDateFormat format = new SimpleDateFormat(ACRAConstants.DATE_TIME_FORMAT_STRING, Locale.ENGLISH);
-        return format.format(time.getTimeInMillis());
+    private String getTimeString(@NonNull Calendar time) {
+        return dateFormat.format(time.getTimeInMillis());
     }
 }
diff --git a/acra-core/src/main/java/org/acra/config/BaseCoreConfigurationBuilder.java b/acra-core/src/main/java/org/acra/config/BaseCoreConfigurationBuilder.java
new file mode 100644
index 00000000..76086af3
--- /dev/null
+++ b/acra-core/src/main/java/org/acra/config/BaseCoreConfigurationBuilder.java
@@ -0,0 +1,124 @@
+/*
+ *  Copyright 2011 Kevin Gaudin
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.acra.config;
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+import org.acra.ACRA;
+import org.acra.ReportField;
+import org.acra.annotation.BuilderMethod;
+import org.acra.annotation.ConfigurationValue;
+import org.acra.annotation.PreBuild;
+import org.acra.annotation.Transform;
+import org.acra.util.StubCreator;
+
+import java.util.*;
+
+import static org.acra.ACRA.DEV_LOGGING;
+import static org.acra.ACRA.LOG_TAG;
+import static org.acra.ACRAConstants.DEFAULT_REPORT_FIELDS;
+
+
+/**
+ * Contains builder methods which can't be generated
+ *
+ * @author F43nd1r
+ */
+public final class BaseCoreConfigurationBuilder {
+
+    private final Map<ReportField, Boolean> reportContentChanges;
+    private final List<ConfigurationBuilder> configurationBuilders;
+    private List<Configuration> configurations;
+
+    BaseCoreConfigurationBuilder(@NonNull Context app) {
+        reportContentChanges = new EnumMap<>(ReportField.class);
+        configurationBuilders = new ArrayList<>();
+        //noinspection ForLoopReplaceableByForEach
+        for (final Iterator<ConfigurationBuilderFactory> iterator = ServiceLoader.load(ConfigurationBuilderFactory.class, getClass().getClassLoader()).iterator(); iterator.hasNext(); ) {
+            try {
+                final ConfigurationBuilderFactory factory = iterator.next();
+                if (DEV_LOGGING) ACRA.log.d(LOG_TAG, "Discovered and loaded plugin of type " + factory.getClass().getSimpleName().replace("BuilderFactory", ""));
+                configurationBuilders.add(factory.create(app));
+            } catch (ServiceConfigurationError e) {
+                ACRA.log.e(ACRA.LOG_TAG, "Unable to load ConfigurationBuilderFactory", e);
+            }
+        }
+    }
+
+    @PreBuild
+    void preBuild() throws ACRAConfigurationException {
+        configurations = new ArrayList<>();
+        for (ConfigurationBuilder builder : configurationBuilders) {
+            configurations.add(builder.build());
+        }
+    }
+
+    @NonNull
+    @Transform(methodName = "reportContent")
+    Set<ReportField> transformReportContent(@NonNull ReportField[] reportFields) {
+        final Set<ReportField> reportContent = new LinkedHashSet<>();
+        if (reportFields.length != 0) {
+            if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Using custom Report Fields");
+            reportContent.addAll(Arrays.asList(reportFields));
+        } else {
+            if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Using default Report Fields");
+            reportContent.addAll(Arrays.asList(DEFAULT_REPORT_FIELDS));
+        }
+
+        // Add or remove any extra fields.
+        for (Map.Entry<ReportField, Boolean> entry : reportContentChanges.entrySet()) {
+            if (entry.getValue()) {
+                reportContent.add(entry.getKey());
+            } else {
+                reportContent.remove(entry.getKey());
+            }
+        }
+        return reportContent;
+    }
+
+    /**
+     * Use this if you want to keep the default configuration of reportContent, but set some fields explicitly.
+     *
+     * @param field  the field to set
+     * @param enable if this field should be reported
+     */
+    @BuilderMethod
+    public void setReportField(@NonNull ReportField field, boolean enable) {
+        this.reportContentChanges.put(field, enable);
+    }
+
+    @ConfigurationValue
+    @NonNull
+    List<Configuration> pluginConfigurations() {
+        return configurations;
+    }
+
+    @NonNull
+    @BuilderMethod
+    public <R extends ConfigurationBuilder> R getPluginConfigurationBuilder(@NonNull Class<R> c) {
+        for (ConfigurationBuilder builder : configurationBuilders) {
+            if (c.isAssignableFrom(builder.getClass())) {
+                //noinspection unchecked
+                return (R) builder;
+            }
+        }
+        if (c.isInterface()) {
+            ACRA.log.w(ACRA.LOG_TAG, "Couldn't find ConfigurationBuilder " + c.getSimpleName() + ". ALL CALLS TO IT WILL BE IGNORED!");
+            return StubCreator.createStub(c, (proxy, method, args) -> proxy);
+        }
+        throw new IllegalArgumentException("Class " + c.getName() + " is not a registered ConfigurationBuilder");
+    }
+}
diff --git a/acra-core/src/main/java/org/acra/config/ConfigUtils.java b/acra-core/src/main/java/org/acra/config/ConfigUtils.java
new file mode 100644
index 00000000..34dd2983
--- /dev/null
+++ b/acra-core/src/main/java/org/acra/config/ConfigUtils.java
@@ -0,0 +1,40 @@
+/*
+ * Copyright (c) 2017
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.config;
+
+import android.support.annotation.NonNull;
+
+/**
+ * Allows easy access to Plugin configurations from the main configuration
+ *
+ * @author F43nd1r
+ * @since 01.06.2017
+ */
+public final class ConfigUtils {
+
+    @NonNull
+    public static <T extends Configuration> T getPluginConfiguration(@NonNull CoreConfiguration config, @NonNull Class<T> c) {
+        for (Configuration configuration : config.pluginConfigurations()) {
+            if (c.isAssignableFrom(configuration.getClass())) {
+                //noinspection unchecked
+                return (T) configuration;
+            }
+        }
+        throw new IllegalArgumentException(c.getName() + " is no registered configuration");
+    }
+
+}
diff --git a/acra-core/src/main/java/org/acra/config/ConfigurationBuilderFactory.java b/acra-core/src/main/java/org/acra/config/ConfigurationBuilderFactory.java
new file mode 100644
index 00000000..a4fda474
--- /dev/null
+++ b/acra-core/src/main/java/org/acra/config/ConfigurationBuilderFactory.java
@@ -0,0 +1,39 @@
+/*
+ * Copyright (c) 2018 the ACRA team
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.config;
+
+import android.content.Context;
+import android.support.annotation.Keep;
+import android.support.annotation.NonNull;
+
+/**
+ * A factory for configuration builders
+ *
+ * @author F43nd1r
+ * @since 01.06.2017
+ */
+@Keep
+public interface ConfigurationBuilderFactory {
+    /**
+     * creates a new builder
+     *
+     * @param annotatedContext the context holding the annotation from which the builder should pull its values
+     * @return a new builder with values from the annotation
+     */
+    @NonNull
+    ConfigurationBuilder create(@NonNull Context annotatedContext);
+}
diff --git a/acra/src/main/java/org/acra/config/DefaultRetryPolicy.java b/acra-core/src/main/java/org/acra/config/DefaultRetryPolicy.java
similarity index 85%
rename from acra/src/main/java/org/acra/config/DefaultRetryPolicy.java
rename to acra-core/src/main/java/org/acra/config/DefaultRetryPolicy.java
index d03639cf..77811b2d 100644
--- a/acra/src/main/java/org/acra/config/DefaultRetryPolicy.java
+++ b/acra-core/src/main/java/org/acra/config/DefaultRetryPolicy.java
@@ -15,6 +15,8 @@
  */
 package org.acra.config;
 
+import android.support.annotation.NonNull;
+
 import org.acra.sender.ReportSender;
 
 import java.util.List;
@@ -27,7 +29,7 @@
  */
 public class DefaultRetryPolicy implements RetryPolicy {
     @Override
-    public boolean shouldRetrySend(List<ReportSender> senders, List<FailedSender> failedSenders) {
+    public boolean shouldRetrySend(@NonNull List<ReportSender> senders, @NonNull List<FailedSender> failedSenders) {
         return (senders.size() == failedSenders.size()) && !senders.isEmpty();
     }
 }
diff --git a/acra-core/src/main/java/org/acra/config/ReportingAdministrator.java b/acra-core/src/main/java/org/acra/config/ReportingAdministrator.java
new file mode 100644
index 00000000..20e5a29f
--- /dev/null
+++ b/acra-core/src/main/java/org/acra/config/ReportingAdministrator.java
@@ -0,0 +1,90 @@
+/*
+ * Copyright (c) 2017
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.config;
+
+import android.content.Context;
+import android.support.annotation.Keep;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import org.acra.builder.ReportBuilder;
+import org.acra.data.CrashReportData;
+
+/**
+ * Controls if reports are sent
+ *
+ * @author F43nd1r
+ * @since 26.10.2017
+ */
+@Keep
+public interface ReportingAdministrator {
+    /**
+     * Determines if report collection should start
+     *
+     * @param context       a context
+     * @param config        the current config
+     * @param reportBuilder the reportBuilder for the report about to be collected
+     * @return if this report should be collected
+     */
+    default boolean shouldStartCollecting(@NonNull Context context, @NonNull CoreConfiguration config, @NonNull ReportBuilder reportBuilder) {
+        return true;
+    }
+
+    /**
+     * Determines if a collected report should be sent
+     *
+     * @param context         a context
+     * @param config          the current config
+     * @param crashReportData the collected report
+     * @return if this report should be sent
+     */
+    default boolean shouldSendReport(@NonNull Context context, @NonNull CoreConfiguration config, @NonNull CrashReportData crashReportData) {
+        return true;
+    }
+
+    /**
+     * notifies the user about a dropped report
+     *
+     * @param context a context
+     * @param config  the current config
+     */
+    default void notifyReportDropped(@NonNull Context context, @NonNull CoreConfiguration config) {
+    }
+
+    /**
+     * Determines if the application should be killed
+     *
+     * @param context         a context
+     * @param config          the current config
+     * @param reportBuilder   the reportBuilder for the report about to be collected
+     * @param crashReportData the collected report
+     * @return if the application should be killed
+     */
+    default boolean shouldKillApplication(@NonNull Context context, @NonNull CoreConfiguration config, @NonNull ReportBuilder reportBuilder, @Nullable CrashReportData crashReportData) {
+        return true;
+    }
+
+    /**
+     * controls if this instance is active
+     *
+     * @param config the current config
+     * @return if this instance should be called
+     */
+    default boolean enabled(@NonNull CoreConfiguration config) {
+        return true;
+    }
+}
diff --git a/acra/src/main/java/org/acra/config/RetryPolicy.java b/acra-core/src/main/java/org/acra/config/RetryPolicy.java
similarity index 80%
rename from acra/src/main/java/org/acra/config/RetryPolicy.java
rename to acra-core/src/main/java/org/acra/config/RetryPolicy.java
index b27b24ee..9936b02b 100644
--- a/acra/src/main/java/org/acra/config/RetryPolicy.java
+++ b/acra-core/src/main/java/org/acra/config/RetryPolicy.java
@@ -15,6 +15,8 @@
  */
 package org.acra.config;
 
+import android.support.annotation.NonNull;
+
 import org.acra.sender.ReportSender;
 import org.acra.sender.ReportSenderException;
 
@@ -31,24 +33,26 @@
     /**
      * @param senders a list of all senders.
      * @param failedSenders a list of all failed senders with the thrown exceptions.
-     * @return <code>true</code> if the request should be resent later, otherwise <code>false</code>.
+     * @return if the request should be resent later.
      */
-    boolean shouldRetrySend(List<ReportSender> senders, List<FailedSender> failedSenders);
+    boolean shouldRetrySend(@NonNull List<ReportSender> senders, @NonNull List<FailedSender> failedSenders);
 
     class FailedSender {
 
         private final ReportSender sender;
         private final ReportSenderException exception;
 
-        public FailedSender(ReportSender sender, ReportSenderException exception) {
+        public FailedSender(@NonNull ReportSender sender, @NonNull ReportSenderException exception) {
             this.sender = sender;
             this.exception = exception;
         }
 
+        @NonNull
         public ReportSender getSender() {
             return sender;
         }
 
+        @NonNull
         public ReportSenderException getException() {
             return exception;
         }
diff --git a/acra-core/src/main/java/org/acra/data/CrashReportData.java b/acra-core/src/main/java/org/acra/data/CrashReportData.java
new file mode 100644
index 00000000..52695f19
--- /dev/null
+++ b/acra-core/src/main/java/org/acra/data/CrashReportData.java
@@ -0,0 +1,193 @@
+/*
+ * Copyright (c) 2017
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.data;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import org.acra.ACRA;
+import org.acra.ACRAConstants;
+import org.acra.ReportField;
+import org.acra.collections.ImmutableSet;
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Map;
+
+/**
+ * Stores a crash report data
+ */
+public final class CrashReportData {
+    private final JSONObject content;
+
+    public CrashReportData() {
+        content = new JSONObject();
+    }
+
+    public CrashReportData(String json) throws JSONException {
+        content = new JSONObject(json);
+    }
+
+    public synchronized void put(@NonNull String key, boolean value) {
+        try {
+            content.put(key, value);
+        } catch (JSONException e) {
+            ACRA.log.w(ACRA.LOG_TAG, "Failed to put value into CrashReportData: " + String.valueOf(value));
+        }
+    }
+
+    public synchronized void put(@NonNull String key, double value) {
+        try {
+            content.put(key, value);
+        } catch (JSONException e) {
+            ACRA.log.w(ACRA.LOG_TAG, "Failed to put value into CrashReportData: " + String.valueOf(value));
+        }
+    }
+
+    public synchronized void put(@NonNull String key, int value) {
+        try {
+            content.put(key, value);
+        } catch (JSONException e) {
+            ACRA.log.w(ACRA.LOG_TAG, "Failed to put value into CrashReportData: " + String.valueOf(value));
+        }
+    }
+
+    public synchronized void put(@NonNull String key, long value) {
+        try {
+            content.put(key, value);
+        } catch (JSONException e) {
+            ACRA.log.w(ACRA.LOG_TAG, "Failed to put value into CrashReportData: " + String.valueOf(value));
+        }
+    }
+
+    public synchronized void put(@NonNull String key, @Nullable String value) {
+        if (value == null) {
+            putNA(key);
+            return;
+        }
+        try {
+            content.put(key, value);
+        } catch (JSONException e) {
+            ACRA.log.w(ACRA.LOG_TAG, "Failed to put value into CrashReportData: " + value);
+        }
+    }
+
+    public synchronized void put(@NonNull String key, @Nullable JSONObject value) {
+        if (value == null) {
+            putNA(key);
+            return;
+        }
+        try {
+            content.put(key, value);
+        } catch (JSONException e) {
+            ACRA.log.w(ACRA.LOG_TAG, "Failed to put value into CrashReportData: " + String.valueOf(value));
+        }
+    }
+
+    public synchronized void put(@NonNull String key, @Nullable JSONArray value) {
+        if (value == null) {
+            putNA(key);
+            return;
+        }
+        try {
+            content.put(key, value);
+        } catch (JSONException e) {
+            ACRA.log.w(ACRA.LOG_TAG, "Failed to put value into CrashReportData: " + String.valueOf(value));
+        }
+    }
+
+    public synchronized void put(@NonNull ReportField key, boolean value) {
+        put(key.toString(), value);
+    }
+
+    public synchronized void put(@NonNull ReportField key, double value) {
+        put(key.toString(), value);
+    }
+
+    public synchronized void put(@NonNull ReportField key, int value) {
+        put(key.toString(), value);
+    }
+
+    public synchronized void put(@NonNull ReportField key, long value) {
+        put(key.toString(), value);
+    }
+
+    public synchronized void put(@NonNull ReportField key, @Nullable String value) {
+        put(key.toString(), value);
+    }
+
+    public synchronized void put(@NonNull ReportField key, @Nullable JSONObject value) {
+        put(key.toString(), value);
+    }
+
+    public synchronized void put(@NonNull ReportField key, @Nullable JSONArray value) {
+        put(key.toString(), value);
+    }
+
+    private void putNA(@NonNull String key) {
+        try {
+            content.put(key, ACRAConstants.NOT_AVAILABLE);
+        } catch (JSONException ignored) {
+        }
+    }
+
+    /**
+     * Returns the property with the specified key.
+     *
+     * @param key the key of the property to find.
+     * @return the keyd property value, or {@code null} if it can't be found.
+     */
+    public String getString(@NonNull ReportField key) {
+        return content.optString(key.toString());
+    }
+
+    public Object get(@NonNull String key) {
+        return content.opt(key);
+    }
+
+    public boolean containsKey(@NonNull String key) {
+        return content.has(key);
+    }
+
+    public boolean containsKey(@NonNull ReportField key) {
+        return containsKey(key.toString());
+    }
+
+    @NonNull
+    public String toJSON() throws JSONException {
+        try {
+            return StringFormat.JSON.toFormattedString(this, ImmutableSet.empty(), "", "", false);
+        } catch (JSONException e) {
+            throw e;
+        } catch (Exception e) {
+            throw new JSONException(e.getMessage());
+        }
+    }
+
+    @NonNull
+    public Map<String, Object> toMap() {
+        final Map<String, Object> map = new HashMap<>(content.length());
+        for (final Iterator<String> iterator = content.keys(); iterator.hasNext(); ) {
+            final String key = iterator.next();
+            map.put(key, get(key));
+        }
+        return map;
+    }
+}
diff --git a/acra-core/src/main/java/org/acra/data/CrashReportDataFactory.java b/acra-core/src/main/java/org/acra/data/CrashReportDataFactory.java
new file mode 100644
index 00000000..1c9db8ac
--- /dev/null
+++ b/acra-core/src/main/java/org/acra/data/CrashReportDataFactory.java
@@ -0,0 +1,129 @@
+/*
+ * Copyright (c) 2017
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.data;
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+import org.acra.ACRA;
+import org.acra.builder.ReportBuilder;
+import org.acra.collector.ApplicationStartupCollector;
+import org.acra.collector.Collector;
+import org.acra.collector.CollectorException;
+import org.acra.config.CoreConfiguration;
+
+import java.util.*;
+import java.util.concurrent.ExecutionException;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+import java.util.concurrent.Future;
+
+import static org.acra.ACRA.LOG_TAG;
+
+/**
+ * Responsible for collecting the CrashReportData for an Exception.
+ *
+ * @author F43nd1r
+ * @since 4.3.0
+ */
+public final class CrashReportDataFactory {
+
+    private final Context context;
+    private final CoreConfiguration config;
+    private final List<Collector> collectors;
+
+    public CrashReportDataFactory(@NonNull Context context, @NonNull CoreConfiguration config) {
+        this.context = context;
+        this.config = config;
+        collectors = new ArrayList<>();
+        //noinspection ForLoopReplaceableByForEach need to catch exception in iterator.next()
+        for (final Iterator<Collector> iterator = ServiceLoader.load(Collector.class, getClass().getClassLoader()).iterator(); iterator.hasNext(); ) {
+            try {
+                final Collector collector = iterator.next();
+                if (ACRA.DEV_LOGGING) ACRA.log.d(ACRA.LOG_TAG, "Loaded collector of class " + collector.getClass().getName());
+                collectors.add(collector);
+            }catch (ServiceConfigurationError e){
+                ACRA.log.e(LOG_TAG, "Unable to load collector", e);
+            }
+        }
+        Collections.sort(collectors, (c1, c2) -> {
+            Collector.Order o1;
+            Collector.Order o2;
+            try {
+                o1 = c1.getOrder();
+            } catch (Throwable t) {
+                o1 = Collector.Order.NORMAL;
+            }
+            try {
+                o2 = c2.getOrder();
+            } catch (Throwable t) {
+                o2 = Collector.Order.NORMAL;
+            }
+            return o1.ordinal() - o2.ordinal();
+        });
+    }
+
+    /**
+     * Collects crash data.
+     *
+     * @param builder ReportBuilder for whom to crete the crash report.
+     * @return CrashReportData identifying the current crash.
+     */
+    @NonNull
+    public CrashReportData createCrashData(@NonNull final ReportBuilder builder) {
+        final ExecutorService executorService = config.parallel() ? Executors.newCachedThreadPool() : Executors.newSingleThreadExecutor();
+        final CrashReportData crashReportData = new CrashReportData();
+        final List<Future<?>> futures = new ArrayList<>();
+        for (final Collector collector : collectors) {
+            futures.add(executorService.submit(() -> {
+                //catch absolutely everything possible here so no collector obstructs the others
+                try {
+                    if(ACRA.DEV_LOGGING)ACRA.log.d(LOG_TAG, "Calling collector " + collector.getClass().getName());
+                    collector.collect(context, config, builder, crashReportData);
+                    if(ACRA.DEV_LOGGING)ACRA.log.d(LOG_TAG, "Collector " + collector.getClass().getName() + " completed");
+                }catch (CollectorException e){
+                    ACRA.log.w(LOG_TAG, e);
+                }catch (Throwable t) {
+                    ACRA.log.e(LOG_TAG, "Error in collector " + collector.getClass().getSimpleName(), t);
+                }
+            }));
+        }
+        for (Future<?> future : futures) {
+            while (!future.isDone()) {
+                try {
+                    future.get();
+                } catch (InterruptedException ignored) {
+                } catch (ExecutionException e) {
+                    break;
+                }
+            }
+        }
+        return crashReportData;
+    }
+
+    public void collectStartUp() {
+        for (Collector collector : collectors) {
+            if (collector instanceof ApplicationStartupCollector) {
+                //catch absolutely everything possible here so no collector obstructs the others
+                try {
+                    ((ApplicationStartupCollector) collector).collectApplicationStartUp(context, config);
+                } catch (Throwable t) {
+                    ACRA.log.w(ACRA.LOG_TAG, collector.getClass().getSimpleName() + " failed to collect its startup data", t);
+                }
+            }
+        }
+    }
+}
\ No newline at end of file
diff --git a/acra-core/src/main/java/org/acra/data/StringFormat.java b/acra-core/src/main/java/org/acra/data/StringFormat.java
new file mode 100644
index 00000000..3c442cf0
--- /dev/null
+++ b/acra-core/src/main/java/org/acra/data/StringFormat.java
@@ -0,0 +1,139 @@
+/*
+ * Copyright (c) 2017
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.data;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+
+import org.acra.ACRAConstants;
+import org.acra.ReportField;
+import org.acra.collections.ImmutableSet;
+import org.json.JSONException;
+import org.json.JSONObject;
+import org.json.JSONStringer;
+
+import java.io.UnsupportedEncodingException;
+import java.net.URLEncoder;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+
+/**
+ * Represents possible report formats
+ *
+ * @author F43nd1r
+ * @since 14.11.2017
+ */
+public enum StringFormat {
+    JSON("application/json") {
+        @NonNull
+        @Override
+        public String toFormattedString(@NonNull CrashReportData data, @NonNull ImmutableSet<ReportField> order, @NonNull String mainJoiner, @NonNull String subJoiner, boolean urlEncode) throws JSONException {
+            final Map<String, Object> map = data.toMap();
+            final JSONStringer stringer = new JSONStringer().object();
+            for (ReportField field : order) {
+                stringer.key(field.toString()).value(map.remove(field.toString()));
+            }
+            for (Map.Entry<String, Object> entry : map.entrySet()) {
+                stringer.key(entry.getKey()).value(entry.getValue());
+            }
+            return stringer.endObject().toString();
+        }
+    },
+    KEY_VALUE_LIST("application/x-www-form-urlencoded") {
+        @NonNull
+        @Override
+        public String toFormattedString(@NonNull CrashReportData data, @NonNull ImmutableSet<ReportField> order, @NonNull String mainJoiner, @NonNull String subJoiner, boolean urlEncode) throws UnsupportedEncodingException {
+            final Map<String, String> map = toStringMap(data.toMap(), subJoiner);
+            final StringBuilder builder = new StringBuilder();
+            for (ReportField field : order) {
+                append(builder, field.toString(), map.remove(field.toString()), mainJoiner, urlEncode);
+            }
+            for (Map.Entry<String, String> entry : map.entrySet()) {
+                append(builder, entry.getKey(), entry.getValue(), mainJoiner, urlEncode);
+            }
+            return builder.toString();
+        }
+
+        private void append(@NonNull StringBuilder builder, @Nullable String key, @Nullable String value, @Nullable String joiner, boolean urlEncode) throws UnsupportedEncodingException {
+            if (builder.length() > 0) {
+                builder.append(joiner);
+            }
+            if (urlEncode) {
+                key = key != null ? URLEncoder.encode(key, ACRAConstants.UTF8) : null;
+                value = value != null ? URLEncoder.encode(value, ACRAConstants.UTF8) : null;
+            }
+            builder.append(key).append('=').append(value);
+        }
+
+        @NonNull
+        private Map<String, String> toStringMap(@NonNull Map<String, Object> map, @NonNull String joiner) {
+            final Map<String, String> stringMap = new HashMap<>(map.size());
+            for (final Map.Entry<String, Object> entry : map.entrySet()) {
+                stringMap.put(entry.getKey(), valueToString(joiner, entry.getValue()));
+            }
+            return stringMap;
+        }
+
+        private String valueToString(@NonNull String joiner, @Nullable Object value) {
+            if (value instanceof JSONObject) {
+                return TextUtils.join(joiner, flatten((JSONObject) value));
+            } else {
+                return String.valueOf(value);
+            }
+        }
+
+        @NonNull
+        private List<String> flatten(@NonNull JSONObject json) {
+            final List<String> result = new ArrayList<>();
+            for (final Iterator<String> iterator = json.keys(); iterator.hasNext(); ) {
+                final String key = iterator.next();
+                Object value;
+                try {
+                    value = json.get(key);
+                } catch (JSONException e) {
+                    value = null;
+                }
+                if (value instanceof JSONObject) {
+                    for (String s : flatten((JSONObject) value)) {
+                        result.add(key + "." + s);
+                    }
+                } else {
+                    result.add(key + "=" + value);
+                }
+            }
+            return result;
+        }
+    };
+
+    private final String contentType;
+
+    StringFormat(@NonNull String contentType) {
+        this.contentType = contentType;
+    }
+
+    @NonNull
+    public abstract String toFormattedString(@NonNull CrashReportData data, @NonNull ImmutableSet<ReportField> order, @NonNull String mainJoiner, @NonNull String subJoiner, boolean urlEncode) throws Exception;
+
+    @NonNull
+    public String getMatchingHttpContentType() {
+        return contentType;
+    }
+}
diff --git a/acra/src/main/java/org/acra/file/BulkReportDeleter.java b/acra-core/src/main/java/org/acra/file/BulkReportDeleter.java
similarity index 63%
rename from acra/src/main/java/org/acra/file/BulkReportDeleter.java
rename to acra-core/src/main/java/org/acra/file/BulkReportDeleter.java
index edc9b6b1..2d5135b9 100644
--- a/acra/src/main/java/org/acra/file/BulkReportDeleter.java
+++ b/acra-core/src/main/java/org/acra/file/BulkReportDeleter.java
@@ -1,3 +1,19 @@
+/*
+ * Copyright (c) 2017 the ACRA team
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
 package org.acra.file;
 
 import android.content.Context;
diff --git a/acra/src/main/java/org/acra/file/CrashReportFileNameParser.java b/acra-core/src/main/java/org/acra/file/CrashReportFileNameParser.java
similarity index 59%
rename from acra/src/main/java/org/acra/file/CrashReportFileNameParser.java
rename to acra-core/src/main/java/org/acra/file/CrashReportFileNameParser.java
index 91b64642..3ed5d2c4 100644
--- a/acra/src/main/java/org/acra/file/CrashReportFileNameParser.java
+++ b/acra-core/src/main/java/org/acra/file/CrashReportFileNameParser.java
@@ -20,10 +20,15 @@
 import org.acra.ACRAConstants;
 import org.acra.ErrorReporter;
 
+import java.text.ParseException;
+import java.text.SimpleDateFormat;
+import java.util.Calendar;
+import java.util.Locale;
+
 /**
  * Responsible for determining the state of a Crash Report based on its file name.
  *
- * @author William Ferguson
+ * @author William Ferguson &amp; F43nd1r
  * @since 4.3.0
  */
 public final class CrashReportFileNameParser {
@@ -31,7 +36,7 @@
     /**
      * Guess that a report is silent from its file name.
      *
-     * @param reportFileName    Name of the report to check whether it should be sent silently.
+     * @param reportFileName Name of the report to check whether it should be sent silently.
      * @return True if the report has been declared explicitly silent using {@link ErrorReporter#handleSilentException(Throwable)}.
      */
     public boolean isSilent(@NonNull String reportFileName) {
@@ -41,17 +46,36 @@ public boolean isSilent(@NonNull String reportFileName) {
     /**
      * Returns true if the report is considered as approved.
      * <p>
-          This includes:
+     * This includes:
      * </p>
      * <ul>
      * <li>Reports which were pending when the user agreed to send a report in the NOTIFICATION mode Dialog.</li>
      * <li>Explicit silent reports</li>
      * </ul>
      *
-     * @param reportFileName    Name of report to check whether it is approved to be sent.
+     * @param reportFileName Name of report to check whether it is approved to be sent.
      * @return True if a report can be sent.
+     * @deprecated use {@link ReportLocator#getApprovedReports()} and {@link ReportLocator#getUnapprovedReports()} instead
      */
+    @Deprecated
     public boolean isApproved(@NonNull String reportFileName) {
         return isSilent(reportFileName) || reportFileName.contains(ACRAConstants.APPROVED_SUFFIX);
     }
+
+    /**
+     * Gets the timestamp of a report from its name
+     *
+     * @param reportFileName Name of the report to get the timestamp from.
+     * @return timestamp of the report
+     */
+    @NonNull
+    public Calendar getTimestamp(@NonNull String reportFileName) {
+        final String timestamp = reportFileName.replace(ACRAConstants.REPORTFILE_EXTENSION, "").replace(ACRAConstants.SILENT_SUFFIX, "");
+        final Calendar calendar = Calendar.getInstance();
+        try {
+            calendar.setTime(new SimpleDateFormat(ACRAConstants.DATE_TIME_FORMAT_STRING, Locale.ENGLISH).parse(timestamp));
+        } catch (ParseException ignored) {
+        }
+        return calendar;
+    }
 }
diff --git a/acra/src/main/java/org/acra/file/CrashReportPersister.java b/acra-core/src/main/java/org/acra/file/CrashReportPersister.java
similarity index 56%
rename from acra/src/main/java/org/acra/file/CrashReportPersister.java
rename to acra-core/src/main/java/org/acra/file/CrashReportPersister.java
index ac2ed412..1e79aa69 100644
--- a/acra/src/main/java/org/acra/file/CrashReportPersister.java
+++ b/acra-core/src/main/java/org/acra/file/CrashReportPersister.java
@@ -21,45 +21,30 @@
 
 import android.support.annotation.NonNull;
 
-import org.acra.ACRAConstants;
-import org.acra.collector.CrashReportData;
+import org.acra.data.CrashReportData;
 import org.acra.util.IOUtils;
-import org.acra.util.JsonUtils;
+import org.acra.util.StreamReader;
 import org.json.JSONException;
-import org.json.JSONObject;
 
-import java.io.BufferedInputStream;
 import java.io.File;
-import java.io.FileInputStream;
 import java.io.IOException;
-import java.io.InputStream;
 
 /**
- * Stores a crash reports data with {@link org.acra.ReportField} enum values as keys.
- * This is basically the source of {@link java.util.Properties} adapted to extend an
- * EnumMap instead of Hashtable and with a few tweaks to avoid losing crazy
- * amounts of android time in the generation of a date comment when storing to
- * file.
+ * Handles persistence of {@link CrashReportData}
  */
 public final class CrashReportPersister {
 
     /**
      * Loads properties from the specified {@code File}.
      *
-     * @param file  Report file from which to load the CrashData.
+     * @param file Report file from which to load the CrashData.
      * @return CrashReportData read from the supplied File.
-     * @throws IOException if error occurs during reading from the {@code File}.
+     * @throws IOException   if error occurs during reading from the {@code File}.
      * @throws JSONException if the stream cannot be parsed as a JSON object.
      */
     @NonNull
     public CrashReportData load(@NonNull File file) throws IOException, JSONException {
-
-        final InputStream in = new BufferedInputStream(new FileInputStream(file), ACRAConstants.DEFAULT_BUFFER_SIZE_IN_BYTES);
-        try {
-            return JsonUtils.toCrashReportData(new JSONObject(IOUtils.streamToString(in)));
-        }finally {
-            IOUtils.safeClose(in);
-        }
+        return new CrashReportData(new StreamReader(file).read());
     }
 
     /**
@@ -67,11 +52,12 @@ public CrashReportData load(@NonNull File file) throws IOException, JSONExceptio
      * putting the specified comment at the beginning. The output from this
      * method is suitable for being read by the load() method.
      *
-     * @param crashData     CrashReportData to save.
-     * @param file          File into which to store the CrashReportData.
-     * @throws java.io.IOException if the CrashReportData could not be written to the OutputStream.
+     * @param crashData CrashReportData to save.
+     * @param file      File into which to store the CrashReportData.
+     * @throws IOException   if the CrashReportData could not be written to the OutputStream.
+     * @throws JSONException if the crashData could not be converted to JSON.
      */
-    public void store(@NonNull CrashReportData crashData, @NonNull File file) throws IOException {
-        IOUtils.writeStringToFile(file, crashData.toJSON().toString());
+    public void store(@NonNull CrashReportData crashData, @NonNull File file) throws IOException, JSONException {
+        IOUtils.writeStringToFile(file, crashData.toJSON());
     }
 }
diff --git a/acra/src/main/java/org/acra/file/Directory.java b/acra-core/src/main/java/org/acra/file/Directory.java
similarity index 84%
rename from acra/src/main/java/org/acra/file/Directory.java
rename to acra-core/src/main/java/org/acra/file/Directory.java
index c3903d8b..e6b4ff1f 100644
--- a/acra/src/main/java/org/acra/file/Directory.java
+++ b/acra-core/src/main/java/org/acra/file/Directory.java
@@ -21,6 +21,7 @@
 import android.support.v4.content.ContextCompat;
 
 import java.io.File;
+import java.util.regex.Pattern;
 
 /**
  * @author F43nd1r
@@ -33,6 +34,7 @@
      * Otherwise it behaves like {@link #FILES}.
      */
     FILES_LEGACY {
+        @NonNull
         @Override
         public File getFile(@NonNull Context context, @NonNull String fileName) {
             return (fileName.startsWith("/") ? Directory.ROOT : Directory.FILES).getFile(context, fileName);
@@ -42,6 +44,7 @@ public File getFile(@NonNull Context context, @NonNull String fileName) {
      * Directory returned by {@link Context#getFilesDir()}
      */
     FILES {
+        @NonNull
         @Override
         public File getFile(@NonNull Context context, @NonNull String fileName) {
             return new File(context.getFilesDir(), fileName);
@@ -51,6 +54,7 @@ public File getFile(@NonNull Context context, @NonNull String fileName) {
      * Directory returned by {@link Context#getExternalFilesDir(String)}
      */
     EXTERNAL_FILES {
+        @NonNull
         @Override
         public File getFile(@NonNull Context context, @NonNull String fileName) {
             return new File(context.getExternalFilesDir(null), fileName);
@@ -60,6 +64,7 @@ public File getFile(@NonNull Context context, @NonNull String fileName) {
      * Directory returned by {@link Context#getCacheDir()}
      */
     CACHE {
+        @NonNull
         @Override
         public File getFile(@NonNull Context context, @NonNull String fileName) {
             return new File(context.getCacheDir(), fileName);
@@ -69,6 +74,7 @@ public File getFile(@NonNull Context context, @NonNull String fileName) {
      * Directory returned by {@link Context#getExternalCacheDir()}
      */
     EXTERNAL_CACHE {
+        @NonNull
         @Override
         public File getFile(@NonNull Context context, @NonNull String fileName) {
             return new File(context.getExternalCacheDir(), fileName);
@@ -79,6 +85,7 @@ public File getFile(@NonNull Context context, @NonNull String fileName) {
      * Will fall back to {@link Context#getFilesDir()} on API &lt; 21
      */
     NO_BACKUP_FILES {
+        @NonNull
         @Override
         public File getFile(@NonNull Context context, @NonNull String fileName) {
             return new File(ContextCompat.getNoBackupFilesDir(context), fileName);
@@ -88,6 +95,7 @@ public File getFile(@NonNull Context context, @NonNull String fileName) {
      * Directory returned by {@link Environment#getExternalStorageDirectory()}
      */
     EXTERNAL_STORAGE {
+        @NonNull
         @Override
         public File getFile(@NonNull Context context, @NonNull String fileName) {
             return new File(Environment.getExternalStorageDirectory(), fileName);
@@ -97,11 +105,21 @@ public File getFile(@NonNull Context context, @NonNull String fileName) {
      * Root Directory, paths in this directory are absolute paths
      */
     ROOT {
+        @NonNull
         @Override
         public File getFile(@NonNull Context context, @NonNull String fileName) {
-            return new File("/", fileName);
+            String[] parts = fileName.split(Pattern.quote(File.separator), 2);
+            if (parts.length == 1) return new File(fileName);
+            final File[] roots = File.listRoots();
+            for (File root : roots) {
+                if (parts[0].equals(root.getPath().replace(File.separator, ""))) {
+                    return new File(root, parts[1]);
+                }
+            }
+            return new File(roots[0], fileName);
         }
     };
 
+    @NonNull
     public abstract File getFile(@NonNull Context context, @NonNull String fileName);
 }
diff --git a/acra-core/src/main/java/org/acra/file/LastModifiedComparator.java b/acra-core/src/main/java/org/acra/file/LastModifiedComparator.java
new file mode 100644
index 00000000..e401bb16
--- /dev/null
+++ b/acra-core/src/main/java/org/acra/file/LastModifiedComparator.java
@@ -0,0 +1,34 @@
+/*
+ * Copyright (c) 2017 the ACRA team
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.file;
+
+import android.support.annotation.NonNull;
+
+import java.io.File;
+import java.util.Comparator;
+
+/**
+ * Orders files from oldest to newest based on their last modified date.
+ */
+final class LastModifiedComparator implements Comparator<File> {
+    @Override
+    public int compare(@NonNull File lhs, @NonNull File rhs) {
+        final long l = lhs.lastModified();
+        final long r = rhs.lastModified();
+        return l < r ? -1 : (l == r ? 0 : 1);
+    }
+}
diff --git a/acra/src/main/java/org/acra/file/ReportLocator.java b/acra-core/src/main/java/org/acra/file/ReportLocator.java
similarity index 70%
rename from acra/src/main/java/org/acra/file/ReportLocator.java
rename to acra-core/src/main/java/org/acra/file/ReportLocator.java
index 838a145c..8c909b1b 100644
--- a/acra/src/main/java/org/acra/file/ReportLocator.java
+++ b/acra-core/src/main/java/org/acra/file/ReportLocator.java
@@ -1,3 +1,19 @@
+/*
+ * Copyright (c) 2017 the ACRA team
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
 package org.acra.file;
 
 import android.content.Context;
diff --git a/acra-core/src/main/java/org/acra/interaction/BaseReportInteraction.java b/acra-core/src/main/java/org/acra/interaction/BaseReportInteraction.java
new file mode 100644
index 00000000..dd2f29bf
--- /dev/null
+++ b/acra-core/src/main/java/org/acra/interaction/BaseReportInteraction.java
@@ -0,0 +1,41 @@
+/*
+ * Copyright (c) 2017
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.interaction;
+
+import android.support.annotation.NonNull;
+
+import org.acra.config.ConfigUtils;
+import org.acra.config.Configuration;
+import org.acra.config.CoreConfiguration;
+
+/**
+ * @author F43nd1r
+ * @since 18.10.2017
+ */
+
+public abstract class BaseReportInteraction implements ReportInteraction {
+    private final Class<? extends Configuration> configClass;
+
+    public BaseReportInteraction(Class<? extends Configuration> configClass) {
+        this.configClass = configClass;
+    }
+
+    @Override
+    public final boolean enabled(@NonNull CoreConfiguration config) {
+        return ConfigUtils.getPluginConfiguration(config, configClass).enabled();
+    }
+}
diff --git a/acra-core/src/main/java/org/acra/interaction/ReportInteraction.java b/acra-core/src/main/java/org/acra/interaction/ReportInteraction.java
new file mode 100644
index 00000000..fddd65d8
--- /dev/null
+++ b/acra-core/src/main/java/org/acra/interaction/ReportInteraction.java
@@ -0,0 +1,56 @@
+/*
+ * Copyright (c) 2017
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.interaction;
+
+import android.content.Context;
+import android.support.annotation.Keep;
+import android.support.annotation.NonNull;
+
+import org.acra.config.CoreConfiguration;
+
+import java.io.File;
+
+/**
+ * A user interaction before reports are sent
+ *
+ * @author F43nd1r
+ * @since 02.06.2017
+ */
+@Keep
+public interface ReportInteraction {
+
+    /**
+     * Perform interaction synchronously
+     *
+     * @param context    a context
+     * @param config     the configuration
+     * @param reportFile the file with the report content
+     * @return if reports should be sent instantly
+     */
+    boolean performInteraction(@NonNull Context context, @NonNull CoreConfiguration config, @NonNull File reportFile);
+
+
+    /**
+     * controls if this instance is active
+     *
+     * @param config the current config
+     * @return if this instance should be called
+     */
+    default boolean enabled(@NonNull CoreConfiguration config) {
+        return true;
+    }
+}
diff --git a/acra-core/src/main/java/org/acra/interaction/ReportInteractionExecutor.java b/acra-core/src/main/java/org/acra/interaction/ReportInteractionExecutor.java
new file mode 100644
index 00000000..49f71ada
--- /dev/null
+++ b/acra-core/src/main/java/org/acra/interaction/ReportInteractionExecutor.java
@@ -0,0 +1,91 @@
+/*
+ * Copyright (c) 2017
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.interaction;
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+import org.acra.ACRA;
+import org.acra.config.CoreConfiguration;
+
+import java.io.File;
+import java.util.*;
+import java.util.concurrent.ExecutionException;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
+import java.util.concurrent.Future;
+
+import static org.acra.ACRA.LOG_TAG;
+
+/**
+ * Manages and executes all report interactions
+ *
+ * @author F43nd1r
+ * @since 10.10.2017
+ */
+
+public class ReportInteractionExecutor {
+    private final List<ReportInteraction> reportInteractions;
+    private final Context context;
+    private final CoreConfiguration config;
+
+    public ReportInteractionExecutor(@NonNull final Context context, @NonNull final CoreConfiguration config) {
+        this.context = context;
+        this.config = config;
+        reportInteractions = new ArrayList<>();
+        //noinspection ForLoopReplaceableByForEach
+        for (final Iterator<ReportInteraction> iterator = ServiceLoader.load(ReportInteraction.class, getClass().getClassLoader()).iterator(); iterator.hasNext(); ) {
+            try {
+                final ReportInteraction reportInteraction = iterator.next();
+                if (reportInteraction.enabled(config)) {
+                    reportInteractions.add(reportInteraction);
+                }else if (ACRA.DEV_LOGGING) {
+                    ACRA.log.d(LOG_TAG, "Ignoring disabled ReportInteraction of type " + reportInteraction.getClass().getSimpleName());
+                }
+            } catch (ServiceConfigurationError e) {
+                ACRA.log.e(ACRA.LOG_TAG, "Unable to load ReportInteraction", e);
+            }
+        }
+    }
+
+    public boolean hasInteractions() {
+        return reportInteractions.size() > 0;
+    }
+
+    public boolean performInteractions(@NonNull final File reportFile) {
+        final ExecutorService executorService = Executors.newCachedThreadPool();
+        final List<Future<Boolean>> futures = new ArrayList<>();
+        for (final ReportInteraction reportInteraction : reportInteractions) {
+            futures.add(executorService.submit(() -> {
+                if (ACRA.DEV_LOGGING) ACRA.log.d(ACRA.LOG_TAG, "Calling ReportInteraction of class " + reportInteraction.getClass().getName());
+                return reportInteraction.performInteraction(context, config, reportFile);
+            }));
+        }
+        boolean sendReports = true;
+        for (Future<Boolean> future : futures) {
+            while (!future.isDone()) {
+                try {
+                    sendReports &= future.get();
+                } catch (InterruptedException ignored) {
+                } catch (ExecutionException e) {
+                    //ReportInteraction crashed, so ignore it
+                    break;
+                }
+            }
+        }
+        return sendReports;
+    }
+}
diff --git a/acra/src/main/java/org/acra/legacy/LegacyFileHandler.java b/acra-core/src/main/java/org/acra/legacy/LegacyFileHandler.java
similarity index 77%
rename from acra/src/main/java/org/acra/legacy/LegacyFileHandler.java
rename to acra-core/src/main/java/org/acra/legacy/LegacyFileHandler.java
index e73638a2..a6fc594b 100644
--- a/acra/src/main/java/org/acra/legacy/LegacyFileHandler.java
+++ b/acra-core/src/main/java/org/acra/legacy/LegacyFileHandler.java
@@ -19,9 +19,9 @@
 import android.content.Context;
 import android.content.SharedPreferences;
 
-import org.acra.prefs.PrefUtils;
-
 /**
+ * Converts and moves legacy files
+ *
  * @author F43nd1r
  * @since 12.10.2016
  */
@@ -37,22 +37,20 @@ public LegacyFileHandler(Context context, SharedPreferences prefs) {
         this.prefs = prefs;
     }
 
-    public void updateToCurrentVersionIfNecessary(){
+    public void updateToCurrentVersionIfNecessary() {
         // Check prefs to see if we have converted from legacy (pre 4.8.0) ACRA
         if (!prefs.getBoolean(PREF__LEGACY_ALREADY_CONVERTED_TO_4_8_0, false)) {
             // If not then move reports to approved/unapproved folders and mark as converted.
             new ReportMigrator(context).migrate();
 
             // Mark as converted.
-            final SharedPreferences.Editor editor = prefs.edit().putBoolean(PREF__LEGACY_ALREADY_CONVERTED_TO_4_8_0, true);
-            PrefUtils.save(editor);
+            prefs.edit().putBoolean(PREF__LEGACY_ALREADY_CONVERTED_TO_4_8_0, true).apply();
         }
-        if(!prefs.getBoolean(PREF__LEGACY_ALREADY_CONVERTED_TO_JSON, false)){
+        if (!prefs.getBoolean(PREF__LEGACY_ALREADY_CONVERTED_TO_JSON, false)) {
             new ReportConverter(context).convert();
 
             // Mark as converted.
-            final SharedPreferences.Editor editor = prefs.edit().putBoolean(PREF__LEGACY_ALREADY_CONVERTED_TO_JSON, true);
-            PrefUtils.save(editor);
+            prefs.edit().putBoolean(PREF__LEGACY_ALREADY_CONVERTED_TO_JSON, true).apply();
         }
     }
 }
diff --git a/acra/src/main/java/org/acra/legacy/ReportConverter.java b/acra-core/src/main/java/org/acra/legacy/ReportConverter.java
similarity index 82%
rename from acra/src/main/java/org/acra/legacy/ReportConverter.java
rename to acra-core/src/main/java/org/acra/legacy/ReportConverter.java
index b4df7b5e..6d60aa94 100644
--- a/acra/src/main/java/org/acra/legacy/ReportConverter.java
+++ b/acra-core/src/main/java/org/acra/legacy/ReportConverter.java
@@ -22,16 +22,12 @@
 import org.acra.ACRA;
 import org.acra.ACRAConstants;
 import org.acra.ReportField;
+import org.acra.data.CrashReportData;
 import org.acra.file.CrashReportPersister;
 import org.acra.file.ReportLocator;
-import org.acra.model.BooleanElement;
-import org.acra.model.ComplexElement;
-import org.acra.collector.CrashReportData;
-import org.acra.model.Element;
-import org.acra.model.NumberElement;
-import org.acra.model.StringElement;
 import org.acra.util.IOUtils;
 import org.json.JSONException;
+import org.json.JSONObject;
 
 import java.io.BufferedInputStream;
 import java.io.BufferedReader;
@@ -58,7 +54,7 @@
     private static final int NONE = 0, SLASH = 1, UNICODE = 2, CONTINUE = 3, KEY_DONE = 4, IGNORE = 5;
     private final Context context;
 
-    ReportConverter(Context context) {
+    ReportConverter(@NonNull Context context) {
         this.context = context;
     }
 
@@ -66,7 +62,7 @@ void convert() {
         ACRA.log.i(LOG_TAG, "Converting unsent ACRA reports to json");
         final ReportLocator locator = new ReportLocator(context);
         final CrashReportPersister persister = new CrashReportPersister();
-        final List<File> reportFiles = new ArrayList<File>();
+        final List<File> reportFiles = new ArrayList<>();
         reportFiles.addAll(Arrays.asList(locator.getUnapprovedReports()));
         reportFiles.addAll(Arrays.asList(locator.getApprovedReports()));
         int converted = 0;
@@ -80,7 +76,7 @@ void convert() {
                     converted++;
                 } else {
                     //reports without these keys are probably invalid
-                    IOUtils.deleteReport(report);
+                    IOUtils.deleteFile(report);
                 }
             } catch (Throwable e) {
                 try {
@@ -90,7 +86,7 @@ void convert() {
                 } catch (Throwable t) {
                     //File matches neither of the known formats, remove it.
                     ACRA.log.w(LOG_TAG, "Unable to read report file " + report.getPath() + ". Deleting", e);
-                    IOUtils.deleteReport(report);
+                    IOUtils.deleteFile(report);
                 }
             } finally {
                 IOUtils.safeClose(in);
@@ -233,24 +229,7 @@ private synchronized CrashReportData legacyLoad(@NonNull Reader reader) throws I
                                     keyLength = offset;
                                 }
                                 final String temp = new String(buf, 0, offset);
-                                final String elementString = temp.substring(keyLength);
-                                Element element;
-                                try {
-                                    element = new ComplexElement(elementString);
-                                } catch (JSONException e1) {
-                                    try {
-                                        element = new NumberElement(Double.valueOf(elementString));
-                                    } catch (NumberFormatException e2) {
-                                        if (elementString.equals("true")) {
-                                            element = new BooleanElement(true);
-                                        } else if (elementString.equals("false")) {
-                                            element = new BooleanElement(false);
-                                        } else {
-                                            element = new StringElement(elementString);
-                                        }
-                                    }
-                                }
-                                crashData.put(Enum.valueOf(ReportField.class, temp.substring(0, keyLength)), element);
+                                putKeyValue(crashData, temp.substring(0, keyLength), temp.substring(keyLength));
                             }
                             keyLength = -1;
                             offset = 0;
@@ -303,28 +282,11 @@ private synchronized CrashReportData legacyLoad(@NonNull Reader reader) throws I
             }
             if (keyLength >= 0) {
                 final String temp = new String(buf, 0, offset);
-                final ReportField key = Enum.valueOf(ReportField.class, temp.substring(0, keyLength));
                 String value = temp.substring(keyLength);
                 if (mode == SLASH) {
                     value += "\u0000";
                 }
-                Element element;
-                try {
-                    element = new ComplexElement(value);
-                } catch (JSONException e1) {
-                    try {
-                        element = new NumberElement(Double.valueOf(value));
-                    } catch (NumberFormatException e2) {
-                        if (value.equals("true")) {
-                            element = new BooleanElement(true);
-                        } else if (value.equals("false")) {
-                            element = new BooleanElement(false);
-                        } else {
-                            element = new StringElement(value);
-                        }
-                    }
-                }
-                crashData.put(key, element);
+                putKeyValue(crashData, temp.substring(0, keyLength), value);
             }
 
             IOUtils.safeClose(reader);
@@ -334,4 +296,26 @@ private synchronized CrashReportData legacyLoad(@NonNull Reader reader) throws I
             IOUtils.safeClose(br);
         }
     }
+
+    private void putKeyValue(@NonNull CrashReportData crashData, @NonNull String key, @NonNull String value){
+        try {
+            crashData.put(key, new JSONObject(value));
+        } catch (JSONException e1) {
+            try {
+                crashData.put(key, Double.valueOf(value));
+            } catch (NumberFormatException e2) {
+                switch (value) {
+                    case "true":
+                        crashData.put(key, true);
+                        break;
+                    case "false":
+                        crashData.put(key, false);
+                        break;
+                    default:
+                        crashData.put(key, value);
+                        break;
+                }
+            }
+        }
+    }
 }
diff --git a/acra/src/main/java/org/acra/legacy/ReportMigrator.java b/acra-core/src/main/java/org/acra/legacy/ReportMigrator.java
similarity index 78%
rename from acra/src/main/java/org/acra/legacy/ReportMigrator.java
rename to acra-core/src/main/java/org/acra/legacy/ReportMigrator.java
index f6abe927..f0cbec0b 100644
--- a/acra/src/main/java/org/acra/legacy/ReportMigrator.java
+++ b/acra-core/src/main/java/org/acra/legacy/ReportMigrator.java
@@ -1,3 +1,19 @@
+/*
+ * Copyright (c) 2017 the ACRA team
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
 package org.acra.legacy;
 
 import android.content.Context;
@@ -20,7 +36,6 @@
 
     private final Context context;
     private final CrashReportFileNameParser fileNameParser = new CrashReportFileNameParser();
-    @NonNull
     private final ReportLocator reportLocator;
 
     ReportMigrator(@NonNull Context context) {
@@ -65,12 +80,7 @@ void migrate() {
         if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Looking for error files in " + dir.getAbsolutePath());
 
         // Filter for ".stacktrace" files
-        final FilenameFilter filter = new FilenameFilter() {
-            @Override
-            public boolean accept(File dir, @NonNull String name) {
-                return name.endsWith(ACRAConstants.REPORTFILE_EXTENSION);
-            }
-        };
+        final FilenameFilter filter = (dir1, name) -> name.endsWith(ACRAConstants.REPORTFILE_EXTENSION);
         final File[] result = dir.listFiles(filter);
         return (result == null) ? new File[0] : result;
     }
diff --git a/acra/src/main/java/org/acra/log/ACRALog.java b/acra-core/src/main/java/org/acra/log/ACRALog.java
similarity index 69%
rename from acra/src/main/java/org/acra/log/ACRALog.java
rename to acra-core/src/main/java/org/acra/log/ACRALog.java
index c909448a..51ef8633 100644
--- a/acra/src/main/java/org/acra/log/ACRALog.java
+++ b/acra-core/src/main/java/org/acra/log/ACRALog.java
@@ -1,3 +1,19 @@
+/*
+ * Copyright (c) 2017 the ACRA team
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
 package org.acra.log;
 
 import android.support.annotation.Nullable;
diff --git a/acra/src/main/java/org/acra/log/AndroidLogDelegate.java b/acra-core/src/main/java/org/acra/log/AndroidLogDelegate.java
similarity index 73%
rename from acra/src/main/java/org/acra/log/AndroidLogDelegate.java
rename to acra-core/src/main/java/org/acra/log/AndroidLogDelegate.java
index d7e585e5..d8de08de 100644
--- a/acra/src/main/java/org/acra/log/AndroidLogDelegate.java
+++ b/acra-core/src/main/java/org/acra/log/AndroidLogDelegate.java
@@ -1,3 +1,19 @@
+/*
+ * Copyright (c) 2017 the ACRA team
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
 package org.acra.log;
 
 
diff --git a/acra/src/main/java/org/acra/log/HollowLog.java b/acra-core/src/main/java/org/acra/log/HollowLog.java
similarity index 68%
rename from acra/src/main/java/org/acra/log/HollowLog.java
rename to acra-core/src/main/java/org/acra/log/HollowLog.java
index 94b2cb6c..22f44ae2 100644
--- a/acra/src/main/java/org/acra/log/HollowLog.java
+++ b/acra-core/src/main/java/org/acra/log/HollowLog.java
@@ -1,3 +1,19 @@
+/*
+ * Copyright (c) 2017 the ACRA team
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
 package org.acra.log;
 
 import android.support.annotation.Nullable;
diff --git a/acra-core/src/main/java/org/acra/prefs/SharedPreferencesFactory.java b/acra-core/src/main/java/org/acra/prefs/SharedPreferencesFactory.java
new file mode 100644
index 00000000..ba917b47
--- /dev/null
+++ b/acra-core/src/main/java/org/acra/prefs/SharedPreferencesFactory.java
@@ -0,0 +1,79 @@
+/*
+ * Copyright (c) 2017 the ACRA team
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.prefs;
+
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.preference.PreferenceManager;
+import android.support.annotation.NonNull;
+
+import org.acra.ACRA;
+import org.acra.ACRAConstants;
+import org.acra.config.CoreConfiguration;
+
+/**
+ * Responsible for creating a SharedPreferences instance which stores ACRA settings.
+ * <p>
+ * Retrieves the {@link SharedPreferences} instance where user adjustable settings for ACRA are stored.
+ * Default are the Application default SharedPreferences, but you can provide another SharedPreferences name with {@link org.acra.annotation.AcraCore#sharedPreferencesName()}.
+ * </p>
+ */
+public class SharedPreferencesFactory {
+
+    private final Context context;
+    private final CoreConfiguration config;
+
+    public SharedPreferencesFactory(@NonNull Context context, @NonNull CoreConfiguration config) {
+        this.context = context;
+        this.config = config;
+    }
+
+    /**
+     * Check if the application default shared preferences contains true for the
+     * key "acra.disable", do not activate ACRA. Also checks the alternative
+     * opposite setting "acra.enable" if "acra.disable" is not found.
+     *
+     * @param prefs SharedPreferences to check to see whether ACRA should be
+     *              disabled.
+     * @return true if prefs indicate that ACRA should be enabled.
+     */
+    public static boolean shouldEnableACRA(@NonNull SharedPreferences prefs) {
+        boolean enableAcra = true;
+        try {
+            final boolean disableAcra = prefs.getBoolean(ACRA.PREF_DISABLE_ACRA, false);
+            enableAcra = prefs.getBoolean(ACRA.PREF_ENABLE_ACRA, !disableAcra);
+        } catch (Exception e) {
+            // In case of a ClassCastException
+        }
+        return enableAcra;
+    }
+
+    /**
+     * @return The Shared Preferences where ACRA will retrieve its user adjustable setting.
+     */
+    @NonNull
+    public SharedPreferences create() {
+        //noinspection ConstantConditions
+        if (context == null) {
+            throw new IllegalStateException("Cannot call ACRA.getACRASharedPreferences() before ACRA.init().");
+        } else if (!ACRAConstants.DEFAULT_STRING_VALUE.equals(config.sharedPreferencesName())) {
+            return context.getSharedPreferences(config.sharedPreferencesName(), Context.MODE_PRIVATE);
+        } else {
+            return PreferenceManager.getDefaultSharedPreferences(context);
+        }
+    }
+}
diff --git a/acra-core/src/main/java/org/acra/reporter/ErrorReporterImpl.java b/acra-core/src/main/java/org/acra/reporter/ErrorReporterImpl.java
new file mode 100644
index 00000000..539de78f
--- /dev/null
+++ b/acra-core/src/main/java/org/acra/reporter/ErrorReporterImpl.java
@@ -0,0 +1,210 @@
+/*
+ *  Copyright 2010 Emmanuel Astier &amp; Kevin Gaudin
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.acra.reporter;
+
+import android.app.Application;
+import android.content.SharedPreferences;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import org.acra.ACRA;
+import org.acra.ErrorReporter;
+import org.acra.builder.LastActivityManager;
+import org.acra.builder.ReportBuilder;
+import org.acra.builder.ReportExecutor;
+import org.acra.config.CoreConfiguration;
+import org.acra.data.CrashReportDataFactory;
+import org.acra.prefs.SharedPreferencesFactory;
+import org.acra.util.InstanceCreator;
+import org.acra.util.ProcessFinisher;
+
+import java.lang.Thread.UncaughtExceptionHandler;
+import java.util.HashMap;
+import java.util.Map;
+
+import static org.acra.ACRA.LOG_TAG;
+
+/**
+ * <p>
+ * The ErrorReporter is a Singleton object in charge of collecting crash context
+ * data and sending crash reports. It registers itself as the Application's
+ * Thread default {@link UncaughtExceptionHandler}.
+ * </p>
+ * <p>
+ * When a crash occurs, it collects data of the crash context (device, system,
+ * stack trace...) and writes a report file in the application private
+ * directory, which may then be sent.
+ * </p>
+ */
+@SuppressWarnings({"WeakerAccess", "unused", "SameParameterValue"})
+public class ErrorReporterImpl implements Thread.UncaughtExceptionHandler, SharedPreferences.OnSharedPreferenceChangeListener, ErrorReporter {
+
+    private final boolean supportedAndroidVersion;
+    private final Application context;
+    private final ReportExecutor reportExecutor;
+    private final Map<String, String> customData = new HashMap<>();
+
+
+    /**
+     * @param context                 Context for the application in which ACRA is running.
+     * @param config                  AcraConfig to use when reporting and sending errors.
+     * @param enabled                 Whether this ErrorReporter should capture Exceptions and forward their reports.
+     * @param supportedAndroidVersion the minimal supported version
+     */
+    public ErrorReporterImpl(@NonNull Application context, @NonNull CoreConfiguration config,
+                             boolean enabled, boolean supportedAndroidVersion) {
+
+        this.context = context;
+        this.supportedAndroidVersion = supportedAndroidVersion;
+
+        final CrashReportDataFactory crashReportDataFactory = new CrashReportDataFactory(context, config);
+        crashReportDataFactory.collectStartUp();
+
+        final Thread.UncaughtExceptionHandler defaultExceptionHandler;
+        defaultExceptionHandler = Thread.getDefaultUncaughtExceptionHandler();
+        Thread.setDefaultUncaughtExceptionHandler(this);
+
+        final LastActivityManager lastActivityManager = new LastActivityManager(this.context);
+        final InstanceCreator instanceCreator = new InstanceCreator();
+        final ProcessFinisher processFinisher = new ProcessFinisher(context, config, lastActivityManager);
+
+        reportExecutor = new ReportExecutor(context, config, crashReportDataFactory, defaultExceptionHandler, processFinisher);
+        reportExecutor.setEnabled(enabled);
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public String putCustomData(@NonNull String key, @Nullable String value) {
+        return customData.put(key, value);
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    @Nullable
+    public String removeCustomData(@NonNull String key) {
+        return customData.remove(key);
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public void clearCustomData() {
+        customData.clear();
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    @Nullable
+    public String getCustomData(@NonNull String key) {
+        return customData.get(key);
+    }
+
+    /*
+     * (non-Javadoc)
+     *
+     * @see
+     * java.lang.Thread.UncaughtExceptionHandler#uncaughtException(java.lang
+     * .Thread, java.lang.Throwable)
+     */
+    @Override
+    public void uncaughtException(@Nullable Thread t, @NonNull Throwable e) {
+
+        // If we're not enabled then just pass the Exception on to the defaultExceptionHandler.
+        if (!reportExecutor.isEnabled()) {
+            reportExecutor.handReportToDefaultExceptionHandler(t, e);
+            return;
+        }
+
+        try {
+            ACRA.log.e(LOG_TAG, "ACRA caught a " + e.getClass().getSimpleName() + " for " + context.getPackageName(), e);
+            if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Building report");
+
+            // Generate and send crash report
+            new ReportBuilder()
+                    .uncaughtExceptionThread(t)
+                    .exception(e)
+                    .customData(customData)
+                    .endApplication()
+                    .build(reportExecutor);
+
+        } catch (Throwable fatality) {
+            // ACRA failed. Prevent any recursive call to ACRA.uncaughtException(), let the native reporter do its job.
+            ACRA.log.e(LOG_TAG, "ACRA failed to capture the error - handing off to native error reporter", fatality);
+            reportExecutor.handReportToDefaultExceptionHandler(t, e);
+        }
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public void handleSilentException(@Nullable Throwable e) {
+        new ReportBuilder()
+                .exception(e)
+                .customData(customData)
+                .sendSilently()
+                .build(reportExecutor);
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public void setEnabled(boolean enabled) {
+        if (supportedAndroidVersion) {
+            ACRA.log.i(LOG_TAG, "ACRA is " + (enabled ? "enabled" : "disabled") + " for " + context.getPackageName());
+            reportExecutor.setEnabled(enabled);
+        } else {
+            ACRA.log.w(LOG_TAG, "ACRA 4.7.0+ requires Froyo or greater. ACRA is disabled and will NOT catch crashes or send messages.");
+        }
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public void handleException(@Nullable Throwable e, boolean endApplication) {
+        final ReportBuilder builder = new ReportBuilder();
+        builder.exception(e)
+                .customData(customData);
+        if (endApplication) {
+            builder.endApplication();
+        }
+        builder.build(reportExecutor);
+    }
+
+    /**
+     * {@inheritDoc}
+     */
+    @Override
+    public void handleException(@Nullable Throwable e) {
+        handleException(e, false);
+    }
+
+    @Override
+    public void onSharedPreferenceChanged(@NonNull SharedPreferences sharedPreferences, @Nullable String key) {
+        if (ACRA.PREF_DISABLE_ACRA.equals(key) || ACRA.PREF_ENABLE_ACRA.equals(key)) {
+            setEnabled(SharedPreferencesFactory.shouldEnableACRA(sharedPreferences));
+        }
+    }
+}
\ No newline at end of file
diff --git a/acra-core/src/main/java/org/acra/sender/BaseReportSenderFactory.java b/acra-core/src/main/java/org/acra/sender/BaseReportSenderFactory.java
new file mode 100644
index 00000000..83caa7f3
--- /dev/null
+++ b/acra-core/src/main/java/org/acra/sender/BaseReportSenderFactory.java
@@ -0,0 +1,41 @@
+/*
+ * Copyright (c) 2017
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.sender;
+
+import android.support.annotation.NonNull;
+
+import org.acra.config.ConfigUtils;
+import org.acra.config.Configuration;
+import org.acra.config.CoreConfiguration;
+
+/**
+ * @author F43nd1r
+ * @since 18.10.2017
+ */
+
+public abstract class BaseReportSenderFactory implements ReportSenderFactory {
+    private final Class<? extends Configuration> configClass;
+
+    public BaseReportSenderFactory(Class<? extends Configuration> configClass) {
+        this.configClass = configClass;
+    }
+
+    @Override
+    public final boolean enabled(@NonNull CoreConfiguration config) {
+        return ConfigUtils.getPluginConfiguration(config, configClass).enabled();
+    }
+}
diff --git a/acra-core/src/main/java/org/acra/sender/DefaultReportSenderFactory.java b/acra-core/src/main/java/org/acra/sender/DefaultReportSenderFactory.java
new file mode 100644
index 00000000..e597af81
--- /dev/null
+++ b/acra-core/src/main/java/org/acra/sender/DefaultReportSenderFactory.java
@@ -0,0 +1,68 @@
+/*
+ * Copyright (c) 2017
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.sender;
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+
+import org.acra.ACRA;
+import org.acra.config.CoreConfiguration;
+
+import java.util.ArrayList;
+import java.util.Iterator;
+import java.util.List;
+import java.util.ServiceConfigurationError;
+import java.util.ServiceLoader;
+
+import static org.acra.ACRA.DEV_LOGGING;
+import static org.acra.ACRA.LOG_TAG;
+
+/**
+ * Will auto-discover other ReportSenderFactories. If exactly one is found, delegates to that one. Otherwise returns a {@link NullSender}
+ *
+ * @author F43nd1r
+ */
+public final class DefaultReportSenderFactory implements ReportSenderFactory {
+
+    @NonNull
+    @Override
+    public ReportSender create(@NonNull Context context, @NonNull CoreConfiguration config) {
+        final List<ReportSenderFactory> factoryList = new ArrayList<>();
+        //noinspection ForLoopReplaceableByForEach
+        for (final Iterator<ReportSenderFactory> iterator = ServiceLoader.load(ReportSenderFactory.class, getClass().getClassLoader()).iterator(); iterator.hasNext(); ) {
+            try {
+                final ReportSenderFactory reportSenderFactory = iterator.next();
+                if (reportSenderFactory.enabled(config)) {
+                    factoryList.add(reportSenderFactory);
+                } else if (ACRA.DEV_LOGGING) {
+                    ACRA.log.d(LOG_TAG, "Ignoring disabled ReportSenderFactory of type " + reportSenderFactory.getClass().getSimpleName());
+                }
+            } catch (ServiceConfigurationError e) {
+                ACRA.log.e(ACRA.LOG_TAG, "Unable to load ReportSenderFactory", e);
+            }
+        }
+        if (factoryList.size() == 1) {
+            if (DEV_LOGGING) ACRA.log.d(LOG_TAG, "Autodiscovered ReportSenderFactory of type " + factoryList.get(0).getClass().getSimpleName());
+            return factoryList.get(0).create(context, config);
+        } else if (factoryList.size() > 1) {
+            ACRA.log.w(LOG_TAG, "Multiple ReportSenderFactories were discovered - please configure those you want to use. No reports will be sent");
+        } else {
+            ACRA.log.w(LOG_TAG, "No ReportSenderFactories were discovered. No reports will be sent");
+        }
+        return new NullSender();
+    }
+}
diff --git a/acra-core/src/main/java/org/acra/sender/NullSender.java b/acra-core/src/main/java/org/acra/sender/NullSender.java
new file mode 100644
index 00000000..5351f243
--- /dev/null
+++ b/acra-core/src/main/java/org/acra/sender/NullSender.java
@@ -0,0 +1,35 @@
+/*
+ * Copyright (c) 2017 the ACRA team
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.sender;
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+
+import org.acra.ACRA;
+import org.acra.data.CrashReportData;
+
+import static org.acra.ACRA.LOG_TAG;
+
+/**
+ * Sends no report.
+ */
+final class NullSender implements ReportSender {
+    @Override
+    public void send(@NonNull Context context, @NonNull CrashReportData errorContent) {
+        ACRA.log.w(LOG_TAG, context.getPackageName() + " reports will NOT be sent - no valid ReportSender is configured. Try setting 'formUri' or 'mailTo'");
+    }
+}
diff --git a/acra/src/main/java/org/acra/sender/ReportDistributor.java b/acra-core/src/main/java/org/acra/sender/ReportDistributor.java
similarity index 83%
rename from acra/src/main/java/org/acra/sender/ReportDistributor.java
rename to acra-core/src/main/java/org/acra/sender/ReportDistributor.java
index 9a4fdd20..ff589b5b 100644
--- a/acra/src/main/java/org/acra/sender/ReportDistributor.java
+++ b/acra-core/src/main/java/org/acra/sender/ReportDistributor.java
@@ -20,10 +20,10 @@
 import android.content.pm.PackageManager;
 import android.support.annotation.NonNull;
 import org.acra.ACRA;
-import org.acra.collector.CrashReportData;
-import org.acra.config.ACRAConfiguration;
+import org.acra.config.CoreConfiguration;
 import org.acra.config.DefaultRetryPolicy;
 import org.acra.config.RetryPolicy;
+import org.acra.data.CrashReportData;
 import org.acra.file.CrashReportPersister;
 import org.acra.util.IOUtils;
 import org.acra.util.InstanceCreator;
@@ -45,17 +45,17 @@
 final class ReportDistributor {
 
     private final Context context;
-    private final ACRAConfiguration config;
+    private final CoreConfiguration config;
     private final List<ReportSender> reportSenders;
 
     /**
      * Creates a new {@link ReportDistributor} to try sending pending reports.
      *
-     * @param context               ApplicationContext in which the reports are being sent.
-     * @param config                Configuration to use while sending.
-     * @param reportSenders         List of ReportSender to use to send the crash reports.
+     * @param context       ApplicationContext in which the reports are being sent.
+     * @param config        Configuration to use while sending.
+     * @param reportSenders List of ReportSender to use to send the crash reports.
      */
-    ReportDistributor(@NonNull Context context, @NonNull ACRAConfiguration config, @NonNull List<ReportSender> reportSenders) {
+    ReportDistributor(@NonNull Context context, @NonNull CoreConfiguration config, @NonNull List<ReportSender> reportSenders) {
         this.context = context;
         this.config = config;
         this.reportSenders = reportSenders;
@@ -64,31 +64,34 @@
     /**
      * Send report via all senders.
      *
-     * @param reportFile    Report to send.
+     * @param reportFile Report to send.
+     * @return if distributing was successful
      */
-    public void distribute(@NonNull File reportFile) {
+    public boolean distribute(@NonNull File reportFile) {
 
-        ACRA.log.i(LOG_TAG, "Sending report " + reportFile );
+        ACRA.log.i(LOG_TAG, "Sending report " + reportFile);
         try {
             final CrashReportPersister persister = new CrashReportPersister();
             final CrashReportData previousCrashReport = persister.load(reportFile);
             sendCrashReport(previousCrashReport);
-            IOUtils.deleteReport(reportFile);
+            IOUtils.deleteFile(reportFile);
+            return true;
         } catch (RuntimeException e) {
             ACRA.log.e(LOG_TAG, "Failed to send crash reports for " + reportFile, e);
-            IOUtils.deleteReport(reportFile);
+            IOUtils.deleteFile(reportFile);
         } catch (IOException e) {
             ACRA.log.e(LOG_TAG, "Failed to load crash report for " + reportFile, e);
-            IOUtils.deleteReport(reportFile);
+            IOUtils.deleteFile(reportFile);
         } catch (JSONException e) {
             ACRA.log.e(LOG_TAG, "Failed to load crash report for " + reportFile, e);
-            IOUtils.deleteReport(reportFile);
-        }catch (ReportSenderException e) {
+            IOUtils.deleteFile(reportFile);
+        } catch (ReportSenderException e) {
             ACRA.log.e(LOG_TAG, "Failed to send crash report for " + reportFile, e);
             // An issue occurred while sending this report but we can still try to
             // send other reports. Report sending is limited by ACRAConstants.MAX_SEND_REPORTS
             // so there's not much to fear about overloading a failing server.
         }
+        return false;
     }
 
     /**
@@ -96,12 +99,12 @@ public void distribute(@NonNull File reportFile) {
      * sender completed its job, the report is considered as sent and will not
      * be sent again for failing senders.
      *
-     * @param errorContent  Crash data.
+     * @param errorContent Crash data.
      * @throws ReportSenderException if unable to send the crash report.
      */
     private void sendCrashReport(@NonNull CrashReportData errorContent) throws ReportSenderException {
         if (!isDebuggable() || config.sendReportsInDevMode()) {
-            final List<RetryPolicy.FailedSender> failedSenders = new LinkedList<RetryPolicy.FailedSender>();
+            final List<RetryPolicy.FailedSender> failedSenders = new LinkedList<>();
             for (ReportSender sender : reportSenders) {
                 try {
                     if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Sending report using " + sender.getClass().getName());
@@ -115,7 +118,7 @@ private void sendCrashReport(@NonNull CrashReportData errorContent) throws Repor
             final InstanceCreator instanceCreator = new InstanceCreator();
             if (failedSenders.isEmpty()) {
                 if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Report was sent by all senders");
-            } else if (instanceCreator.create(config.retryPolicyClass(), new DefaultRetryPolicy()).shouldRetrySend(reportSenders, failedSenders)) {
+            } else if (instanceCreator.create(config.retryPolicyClass(), DefaultRetryPolicy::new).shouldRetrySend(reportSenders, failedSenders)) {
                 final Throwable firstFailure = failedSenders.get(0).getException();
                 throw new ReportSenderException("Policy marked this task as incomplete. ACRA will try to send this report again.", firstFailure);
             } else {
diff --git a/acra/src/main/java/org/acra/sender/ReportSender.java b/acra-core/src/main/java/org/acra/sender/ReportSender.java
similarity index 54%
rename from acra/src/main/java/org/acra/sender/ReportSender.java
rename to acra-core/src/main/java/org/acra/sender/ReportSender.java
index f7cb4125..91107b6a 100644
--- a/acra/src/main/java/org/acra/sender/ReportSender.java
+++ b/acra-core/src/main/java/org/acra/sender/ReportSender.java
@@ -18,33 +18,23 @@
 import android.content.Context;
 import android.support.annotation.NonNull;
 
-import org.acra.collector.CrashReportData;
+import org.acra.data.CrashReportData;
 
 /**
  * A simple interface for defining various crash report senders.
  *
- * You can reuse {@link HttpSender} to send reports to your custom server-side report
- * collection script even if you expect (or prefer) specific names for each
- * report field as {@link HttpSender#send(Context, CrashReportData)}
- * can take a {@code Map<ReportField, String>} as an input to convert each field name to
- * your preferred POST parameter name.
- * 
  * @author Kevin Gaudin
  */
 public interface ReportSender {
 
     /**
      * Send crash report data.
-     *
+     * <p>
      * Method will be called from the {@link SenderService}.
      *
-     * @param context       Android Context in which to send the crash report.
-     * @param errorContent  Stores key/value pairs for each report field.
-     *                      A report field is identified by a {@link org.acra.ReportField} enum value.
-     * @throws ReportSenderException
-     *             If anything goes fatally wrong during the handling of crash
-     *             data, you can (should) throw a {@link ReportSenderException}
-     *             with a custom message.
+     * @param context      Android Context in which to send the crash report.
+     * @param errorContent Stores key/value pairs for each report field.
+     * @throws ReportSenderException If anything goes fatally wrong during the handling of crash data, you can (should) throw a {@link ReportSenderException} with a custom message.
      */
     void send(@NonNull Context context, @NonNull CrashReportData errorContent) throws ReportSenderException;
 }
diff --git a/acra/src/main/java/org/acra/sender/ReportSenderException.java b/acra-core/src/main/java/org/acra/sender/ReportSenderException.java
similarity index 81%
rename from acra/src/main/java/org/acra/sender/ReportSenderException.java
rename to acra-core/src/main/java/org/acra/sender/ReportSenderException.java
index 7b832dc4..16196280 100644
--- a/acra/src/main/java/org/acra/sender/ReportSenderException.java
+++ b/acra-core/src/main/java/org/acra/sender/ReportSenderException.java
@@ -18,9 +18,8 @@
 /**
  * This exception is thrown when an error occurred while sending crash data in a
  * {@link ReportSender} implementation.
- * 
+ *
  * @author Kevin Gaudin
- * 
  */
 @SuppressWarnings("serial")
 public class ReportSenderException extends Exception {
@@ -28,11 +27,9 @@
     /**
      * Creates a new {@link ReportSenderException} instance. You can provide a
      * detailed message to explain what went wrong.
-     * 
-     * @param detailMessage
-     *            A message to explain the cause of this exception.
-     * @param throwable
-     *            An optional throwable which caused this Exception.
+     *
+     * @param detailMessage A message to explain the cause of this exception.
+     * @param throwable     An optional throwable which caused this Exception.
      */
     public ReportSenderException(String detailMessage, Throwable throwable) {
         super(detailMessage, throwable);
@@ -41,9 +38,8 @@ public ReportSenderException(String detailMessage, Throwable throwable) {
     /**
      * Creates a new {@link ReportSenderException} instance. You can provide a
      * detailed message to explain what went wrong.
-     * 
-     * @param detailMessage
-     *            A message to explain the cause of this exception.
+     *
+     * @param detailMessage A message to explain the cause of this exception.
      **/
     public ReportSenderException(String detailMessage) {
         super(detailMessage);
diff --git a/acra-core/src/main/java/org/acra/sender/ReportSenderFactory.java b/acra-core/src/main/java/org/acra/sender/ReportSenderFactory.java
new file mode 100644
index 00000000..d319e290
--- /dev/null
+++ b/acra-core/src/main/java/org/acra/sender/ReportSenderFactory.java
@@ -0,0 +1,54 @@
+/*
+ * Copyright (c) 2017 the ACRA team
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.sender;
+
+import android.content.Context;
+import android.support.annotation.Keep;
+import android.support.annotation.NonNull;
+
+import org.acra.config.CoreConfiguration;
+
+/**
+ * Factory for creating and configuring a {@link ReportSender} instance.
+ * Implementations must have a no argument constructor.
+ * <p>
+ * Each configured ReportSenderFactory is created within the {@link SenderService}
+ * and is used to construct and configure a single {@link ReportSender}.
+ * <p>
+ * Created by William on 4-JAN-2016.
+ */
+@Keep
+public interface ReportSenderFactory {
+
+    /**
+     * @param context a context.
+     * @param config  Configuration to use when sending reports.
+     * @return Fully configured instance of the relevant ReportSender.
+     */
+    @NonNull
+    ReportSender create(@NonNull Context context, @NonNull CoreConfiguration config);
+
+    /**
+     * controls if this instance is active
+     *
+     * @param config the current config
+     * @return if this instance should be called
+     */
+    default boolean enabled(@NonNull CoreConfiguration config) {
+        return true;
+    }
+}
diff --git a/acra/src/main/java/org/acra/sender/SenderService.java b/acra-core/src/main/java/org/acra/sender/SenderService.java
similarity index 73%
rename from acra/src/main/java/org/acra/sender/SenderService.java
rename to acra-core/src/main/java/org/acra/sender/SenderService.java
index 607e5670..bb885837 100644
--- a/acra/src/main/java/org/acra/sender/SenderService.java
+++ b/acra-core/src/main/java/org/acra/sender/SenderService.java
@@ -15,17 +15,19 @@
  */
 package org.acra.sender;
 
-import android.app.IntentService;
 import android.content.Intent;
+import android.os.Handler;
+import android.os.Looper;
 import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-
+import android.support.v4.app.JobIntentService;
+import android.widget.Toast;
 import org.acra.ACRA;
 import org.acra.ACRAConstants;
-import org.acra.config.ACRAConfiguration;
+import org.acra.config.CoreConfiguration;
 import org.acra.file.CrashReportFileNameParser;
 import org.acra.file.ReportLocator;
 import org.acra.util.InstanceCreator;
+import org.acra.util.ToastSender;
 
 import java.io.File;
 import java.util.ArrayList;
@@ -34,30 +36,29 @@
 
 import static org.acra.ACRA.LOG_TAG;
 
-public class SenderService extends IntentService {
+public class SenderService extends JobIntentService {
 
     public static final String EXTRA_ONLY_SEND_SILENT_REPORTS = "onlySendSilentReports";
     public static final String EXTRA_APPROVE_REPORTS_FIRST = "approveReportsFirst";
     public static final String EXTRA_ACRA_CONFIG = "acraConfig";
 
-    private final ReportLocator locator = new ReportLocator(this);
+    private final ReportLocator locator;
 
     public SenderService() {
-        super("ACRA SenderService");
-        setIntentRedelivery(true);
+        locator = new ReportLocator(this);
     }
 
     @Override
-    protected void onHandleIntent(@Nullable final Intent intent) {
-        if (intent == null || !intent.hasExtra(EXTRA_ACRA_CONFIG)) {
-            if(ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "SenderService was started but no valid intent was delivered, will now quit");
+    protected void onHandleWork(@NonNull Intent intent) {
+        if (!intent.hasExtra(EXTRA_ACRA_CONFIG)) {
+            if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "SenderService was started but no valid intent was delivered, will now quit");
             return;
         }
 
         final boolean onlySendSilentReports = intent.getBooleanExtra(EXTRA_ONLY_SEND_SILENT_REPORTS, false);
         final boolean approveReportsFirst = intent.getBooleanExtra(EXTRA_APPROVE_REPORTS_FIRST, false);
 
-        final ACRAConfiguration config = (ACRAConfiguration) intent.getSerializableExtra(EXTRA_ACRA_CONFIG);
+        final CoreConfiguration config = (CoreConfiguration) intent.getSerializableExtra(EXTRA_ACRA_CONFIG);
 
         final Collection<Class<? extends ReportSenderFactory>> senderFactoryClasses = config.reportSenderFactoryClasses();
 
@@ -78,17 +79,25 @@ protected void onHandleIntent(@Nullable final Intent intent) {
             // Iterate over approved reports and send via all Senders.
             int reportsSentCount = 0; // Use to rate limit sending
             final CrashReportFileNameParser fileNameParser = new CrashReportFileNameParser();
+            boolean anyNonSilent = false;
             for (final File report : reports) {
-                if (onlySendSilentReports && !fileNameParser.isSilent(report.getName())) {
+                final boolean isNonSilent = !fileNameParser.isSilent(report.getName());
+                if (onlySendSilentReports && isNonSilent) {
                     continue;
                 }
+                anyNonSilent |= isNonSilent;
 
                 if (reportsSentCount >= ACRAConstants.MAX_SEND_REPORTS) {
                     break; // send only a few reports to avoid overloading the network
                 }
 
-                reportDistributor.distribute(report);
-                reportsSentCount++;
+                if (reportDistributor.distribute(report)) {
+                    reportsSentCount++;
+                }
+            }
+            final String toast;
+            if (anyNonSilent && (toast = reportsSentCount > 0 ? config.reportSendSuccessToast() : config.reportSendFailureToast()) != null) {
+                new Handler(Looper.getMainLooper()).post(() -> ToastSender.sendToast(this, toast, Toast.LENGTH_LONG));
             }
         } catch (Exception e) {
             ACRA.log.e(LOG_TAG, "", e);
@@ -98,8 +107,8 @@ protected void onHandleIntent(@Nullable final Intent intent) {
     }
 
     @NonNull
-    private List<ReportSender> getSenderInstances(@NonNull ACRAConfiguration config, @NonNull Collection<Class<? extends ReportSenderFactory>> factoryClasses) {
-        final List<ReportSender> reportSenders = new ArrayList<ReportSender>();
+    private List<ReportSender> getSenderInstances(@NonNull CoreConfiguration config, @NonNull Collection<Class<? extends ReportSenderFactory>> factoryClasses) {
+        final List<ReportSender> reportSenders = new ArrayList<>();
         final InstanceCreator instanceCreator = new InstanceCreator();
         for (ReportSenderFactory factory : instanceCreator.create(factoryClasses)) {
             reportSenders.add(factory.create(this.getApplication(), config));
diff --git a/acra/src/main/java/org/acra/sender/SenderServiceStarter.java b/acra-core/src/main/java/org/acra/sender/SenderServiceStarter.java
similarity index 53%
rename from acra/src/main/java/org/acra/sender/SenderServiceStarter.java
rename to acra-core/src/main/java/org/acra/sender/SenderServiceStarter.java
index 4475e247..1ab3bb59 100644
--- a/acra/src/main/java/org/acra/sender/SenderServiceStarter.java
+++ b/acra-core/src/main/java/org/acra/sender/SenderServiceStarter.java
@@ -1,11 +1,28 @@
+/*
+ * Copyright (c) 2017 the ACRA team
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
 package org.acra.sender;
 
 import android.content.Context;
 import android.content.Intent;
 import android.support.annotation.NonNull;
+import android.support.v4.app.JobIntentService;
 
 import org.acra.ACRA;
-import org.acra.config.ACRAConfiguration;
+import org.acra.config.CoreConfiguration;
 
 import static org.acra.ACRA.LOG_TAG;
 
@@ -15,25 +32,25 @@
 public class SenderServiceStarter {
 
     private final Context context;
-    private final ACRAConfiguration config;
+    private final CoreConfiguration config;
 
-    public SenderServiceStarter(@NonNull Context context, @NonNull ACRAConfiguration config) {
+    public SenderServiceStarter(@NonNull Context context, @NonNull CoreConfiguration config) {
         this.context = context;
         this.config = config;
     }
 
     /**
-     * Starts a Thread to start sending outstanding error reports.
+     * Starts a process to start sending outstanding error reports.
      *
      * @param onlySendSilentReports If true then only send silent reports.
      * @param approveReportsFirst   If true then approve unapproved reports first.
      */
     public void startService(boolean onlySendSilentReports, boolean approveReportsFirst) {
         if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "About to start SenderService");
-        final Intent intent = new Intent(context, SenderService.class);
+        final Intent intent = new Intent();
         intent.putExtra(SenderService.EXTRA_ONLY_SEND_SILENT_REPORTS, onlySendSilentReports);
         intent.putExtra(SenderService.EXTRA_APPROVE_REPORTS_FIRST, approveReportsFirst);
         intent.putExtra(SenderService.EXTRA_ACRA_CONFIG, config);
-        context.startService(intent);
+        JobIntentService.enqueueWork(context, SenderService.class, 0, intent);
     }
 }
diff --git a/acra-core/src/main/java/org/acra/util/ApplicationStartupProcessor.java b/acra-core/src/main/java/org/acra/util/ApplicationStartupProcessor.java
new file mode 100644
index 00000000..449d5be7
--- /dev/null
+++ b/acra-core/src/main/java/org/acra/util/ApplicationStartupProcessor.java
@@ -0,0 +1,129 @@
+/*
+ * Copyright (c) 2017 the ACRA team
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.util;
+
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.content.pm.PackageInfo;
+import android.os.Handler;
+import android.support.annotation.NonNull;
+
+import org.acra.ACRA;
+import org.acra.ACRAConstants;
+import org.acra.config.CoreConfiguration;
+import org.acra.file.BulkReportDeleter;
+import org.acra.file.CrashReportFileNameParser;
+import org.acra.file.ReportLocator;
+import org.acra.interaction.ReportInteractionExecutor;
+import org.acra.prefs.SharedPreferencesFactory;
+import org.acra.sender.SenderServiceStarter;
+
+import java.io.File;
+import java.text.ParseException;
+import java.text.SimpleDateFormat;
+import java.util.Calendar;
+import java.util.Locale;
+
+/**
+ * Looks for any existing reports and starts sending them.
+ */
+public final class ApplicationStartupProcessor {
+
+    private final Context context;
+    private final CoreConfiguration config;
+    private final BulkReportDeleter reportDeleter;
+    private final ReportLocator reportLocator;
+
+    public ApplicationStartupProcessor(@NonNull Context context, @NonNull CoreConfiguration config) {
+        this.context = context;
+        this.config = config;
+        reportDeleter = new BulkReportDeleter(context);
+        reportLocator = new ReportLocator(context);
+    }
+
+    public void checkReports(boolean enableAcra) {
+        final Calendar now = Calendar.getInstance();
+        //application is not ready in onAttachBaseContext, so delay this. also run it on a background thread because we're doing disk I/O
+        new Handler(context.getMainLooper()).post(() -> new Thread(() -> {
+            if (config.deleteOldUnsentReportsOnApplicationStart()) {
+                deleteUnsentReportsFromOldAppVersion();
+            }
+            if (config.deleteUnapprovedReportsOnApplicationStart()) {
+                reportDeleter.deleteReports(false, 1);
+            }
+            if (enableAcra) {
+                sendApprovedReports();
+                approveOneReport(now);
+            }
+        }).start());
+    }
+
+    private void approveOneReport(Calendar ignoreReportsAfter) {
+        final File[] reports = reportLocator.getUnapprovedReports();
+
+        if (reports.length == 0) {
+            return; // There are no unapproved reports, so bail now.
+        }
+        //if a report was created after the application launch, it might be currently handled, so ignore it for now.
+        if (new CrashReportFileNameParser().getTimestamp(reports[0].getName()).before(ignoreReportsAfter)) {
+            //only approve one report at a time to prevent overwhelming users
+            new ReportInteractionExecutor(context, config).performInteractions(reports[0]);
+        }
+    }
+
+    /**
+     * Delete any old unsent reports if this is a newer version of the app than when we last started.
+     */
+    private void deleteUnsentReportsFromOldAppVersion() {
+        final SharedPreferences prefs = new SharedPreferencesFactory(context, config).create();
+        final long lastVersionNr = prefs.getInt(ACRA.PREF_LAST_VERSION_NR, 0);
+        final int appVersion = getAppVersion();
+
+        if (appVersion > lastVersionNr) {
+            reportDeleter.deleteReports(true, 0);
+            reportDeleter.deleteReports(false, 0);
+
+            prefs.edit().putInt(ACRA.PREF_LAST_VERSION_NR, appVersion).apply();
+        }
+    }
+
+    /**
+     * If ReportingInteractionMode == Toast and at least one non silent report then show a Toast.
+     * All approved reports will be sent.
+     */
+    private void sendApprovedReports() {
+        final File[] reportFiles = reportLocator.getApprovedReports();
+
+        if (reportFiles.length == 0) {
+            return; // There are no approved reports, so bail now.
+        }
+
+        // Send the approved reports.
+        final SenderServiceStarter starter = new SenderServiceStarter(context, config);
+        starter.startService(false, false);
+
+    }
+
+    /**
+     * @return app version or 0 if PackageInfo was not available.
+     */
+    private int getAppVersion() {
+        final PackageManagerWrapper packageManagerWrapper = new PackageManagerWrapper(context);
+        final PackageInfo packageInfo = packageManagerWrapper.getPackageInfo();
+        return (packageInfo == null) ? 0 : packageInfo.versionCode;
+    }
+}
diff --git a/acra-core/src/main/java/org/acra/util/IOUtils.java b/acra-core/src/main/java/org/acra/util/IOUtils.java
new file mode 100644
index 00000000..fcf0a3a0
--- /dev/null
+++ b/acra-core/src/main/java/org/acra/util/IOUtils.java
@@ -0,0 +1,73 @@
+/*
+ *  Copyright 2016
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.acra.util;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import org.acra.ACRA;
+import org.acra.ACRAConstants;
+
+import java.io.Closeable;
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.OutputStreamWriter;
+
+import static org.acra.ACRA.LOG_TAG;
+
+/**
+ * @author William Ferguson &amp; F43nd1r
+ * @since 4.6.0
+ */
+public final class IOUtils {
+
+    private IOUtils() {
+    }
+
+
+    /**
+     * Closes a Closeable.
+     *
+     * @param closeable Closeable to close. If closeable is null then method just returns.
+     */
+    public static void safeClose(@Nullable Closeable closeable) {
+        if (closeable == null) return;
+
+        try {
+            closeable.close();
+        } catch (IOException ignored) {
+            // We made out best effort to release this resource. Nothing more we can do.
+        }
+    }
+
+    public static void deleteFile(@NonNull File file) {
+        final boolean deleted = file.delete();
+        if (!deleted) {
+            ACRA.log.w(LOG_TAG, "Could not delete file: " + file);
+        }
+    }
+
+    public static void writeStringToFile(@NonNull File file, @NonNull String content) throws IOException {
+        final OutputStreamWriter writer = new OutputStreamWriter(new FileOutputStream(file), ACRAConstants.UTF8);
+        try {
+            writer.write(content);
+            writer.flush();
+        } finally {
+            safeClose(writer);
+        }
+    }
+}
diff --git a/acra-core/src/main/java/org/acra/util/Installation.java b/acra-core/src/main/java/org/acra/util/Installation.java
new file mode 100644
index 00000000..8b840bd7
--- /dev/null
+++ b/acra-core/src/main/java/org/acra/util/Installation.java
@@ -0,0 +1,63 @@
+/*
+ * Copyright (c) 2017 the ACRA team
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+/*
+ * Class copied from the Android Developers Blog:
+ * http://android-developers.blogspot.com/2011/03/identifying-app-installations.html 
+ */
+package org.acra.util;
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+
+import org.acra.ACRA;
+
+import java.io.File;
+import java.io.IOException;
+import java.util.UUID;
+
+import static org.acra.ACRA.LOG_TAG;
+
+/**
+ * <p>
+ * Creates a file storing a UUID on the first application start. This UUID can then be used as a identifier of this
+ * specific application installation.
+ * </p>
+ * <p>
+ * This was taken from <a href="http://android-developers.blogspot.com/2011/03/identifying-app-installations.html"> the
+ * android developers blog.</a>
+ * </p>
+ */
+public final class Installation {
+    private Installation() {
+    }
+
+    private static final String INSTALLATION = "ACRA-INSTALLATION";
+
+    @NonNull
+    public static synchronized String id(@NonNull Context context) {
+        final File installation = new File(context.getFilesDir(), INSTALLATION);
+        try {
+            if (!installation.exists()) {
+                IOUtils.writeStringToFile(installation, UUID.randomUUID().toString());
+            }
+            return new StreamReader(installation).read();
+        } catch (IOException | RuntimeException e) {
+            ACRA.log.w(LOG_TAG, "Couldn't retrieve InstallationId for " + context.getPackageName(), e);
+            return "Couldn't retrieve InstallationId";
+        }
+    }
+}
diff --git a/acra/src/main/java/org/acra/util/InstanceCreator.java b/acra-core/src/main/java/org/acra/util/InstanceCreator.java
similarity index 70%
rename from acra/src/main/java/org/acra/util/InstanceCreator.java
rename to acra-core/src/main/java/org/acra/util/InstanceCreator.java
index 8b2c85a4..020a7a67 100644
--- a/acra/src/main/java/org/acra/util/InstanceCreator.java
+++ b/acra-core/src/main/java/org/acra/util/InstanceCreator.java
@@ -17,7 +17,7 @@
 
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
-
+import android.support.annotation.VisibleForTesting;
 import org.acra.ACRA;
 
 import java.util.ArrayList;
@@ -34,12 +34,21 @@
 
     /**
      * Create an instance of clazz
-     * @param clazz the clazz to create an instance of
-     * @param fallback the value to return in case of a failure
-     * @param <T> the return type
+     *
+     * @param clazz    the clazz to create an instance of
+     * @param fallback a value provider which provides a fallback in case of a failure
+     * @param <T>      the return type
      * @return a new instance of clazz or fallback
      */
-    public <T> T create(@NonNull Class<? extends T> clazz, @Nullable T fallback) {
+    @NonNull
+    public <T> T create(@NonNull Class<? extends T> clazz, @NonNull Fallback<T> fallback) {
+        T t = create(clazz);
+        return t != null ? t : fallback.get();
+    }
+
+    @VisibleForTesting
+    @Nullable
+    <T> T create(@NonNull Class<? extends T> clazz) {
         try {
             return clazz.newInstance();
         } catch (InstantiationException e) {
@@ -47,24 +56,31 @@
         } catch (IllegalAccessException e) {
             ACRA.log.e(LOG_TAG, "Failed to create instance of class " + clazz.getName(), e);
         }
-        return fallback;
+        return null;
     }
 
     /**
      * Create instances of the given classes
+     *
      * @param classes the classes to create insatnces of
-     * @param <T> the return type
+     * @param <T>     the return type
      * @return a list of successfully created instances, does not contain null
      */
     @NonNull
     public <T> List<T> create(@NonNull Collection<Class<? extends T>> classes) {
-        final List<T> result = new ArrayList<T>();
+        final List<T> result = new ArrayList<>();
         for (Class<? extends T> clazz : classes) {
-            final T instance = create(clazz, null);
+            final T instance = create(clazz);
             if (instance != null) {
                 result.add(instance);
             }
         }
         return result;
     }
+
+    @FunctionalInterface
+    public interface Fallback<T> {
+        @NonNull
+        T get();
+    }
 }
diff --git a/acra/src/main/java/org/acra/util/PackageManagerWrapper.java b/acra-core/src/main/java/org/acra/util/PackageManagerWrapper.java
similarity index 82%
rename from acra/src/main/java/org/acra/util/PackageManagerWrapper.java
rename to acra-core/src/main/java/org/acra/util/PackageManagerWrapper.java
index 2de81172..33c9487c 100644
--- a/acra/src/main/java/org/acra/util/PackageManagerWrapper.java
+++ b/acra-core/src/main/java/org/acra/util/PackageManagerWrapper.java
@@ -1,3 +1,19 @@
+/*
+ * Copyright (c) 2017 the ACRA team
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
 package org.acra.util;
 
 import android.content.Context;
@@ -27,6 +43,7 @@
  */
 public final class PackageManagerWrapper {
 
+    @NonNull
     private final Context context;
 
     public PackageManagerWrapper(@NonNull Context context) {
diff --git a/acra/src/main/java/org/acra/util/ProcessFinisher.java b/acra-core/src/main/java/org/acra/util/ProcessFinisher.java
similarity index 53%
rename from acra/src/main/java/org/acra/util/ProcessFinisher.java
rename to acra-core/src/main/java/org/acra/util/ProcessFinisher.java
index 968106a1..8a7d3e15 100644
--- a/acra/src/main/java/org/acra/util/ProcessFinisher.java
+++ b/acra-core/src/main/java/org/acra/util/ProcessFinisher.java
@@ -26,7 +26,7 @@
 
 import org.acra.ACRA;
 import org.acra.builder.LastActivityManager;
-import org.acra.config.ACRAConfiguration;
+import org.acra.config.CoreConfiguration;
 import org.acra.sender.SenderService;
 
 import java.util.List;
@@ -42,17 +42,16 @@
 
 public final class ProcessFinisher {
     private final Context context;
-    private final ACRAConfiguration config;
+    private final CoreConfiguration config;
     private final LastActivityManager lastActivityManager;
 
-    public ProcessFinisher(@NonNull Context context, @NonNull ACRAConfiguration config, @NonNull LastActivityManager lastActivityManager) {
+    public ProcessFinisher(@NonNull Context context, @NonNull CoreConfiguration config, @NonNull LastActivityManager lastActivityManager) {
         this.context = context;
         this.config = config;
         this.lastActivityManager = lastActivityManager;
     }
 
-    public void endApplication(@Nullable Thread uncaughtExceptionThread) {
-        finishLastActivity(uncaughtExceptionThread);
+    public void endApplication() {
         stopServices();
         killProcessAndExit();
     }
@@ -63,19 +62,20 @@ public void finishLastActivity(@Nullable Thread uncaughtExceptionThread) {
         // it. Activity#finish (and maybe it's parent too).
         final Activity lastActivity = lastActivityManager.getLastActivity();
         if (lastActivity != null) {
-            if (ACRA.DEV_LOGGING)
-                ACRA.log.d(LOG_TAG, "Finishing the last Activity prior to killing the Process");
-            lastActivity.runOnUiThread(new Runnable() {
-                @Override
-                public void run() {
-                    lastActivity.finish();
-                    if (ACRA.DEV_LOGGING)
-                        ACRA.log.d(LOG_TAG, "Finished " + lastActivity.getClass());
-                }
-            });
+            final boolean isMainThread = uncaughtExceptionThread == lastActivity.getMainLooper().getThread();
+            if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Finishing the last Activity prior to killing the Process");
+            final Runnable finisher = () -> {
+                lastActivity.finish();
+                if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Finished " + lastActivity.getClass());
+            };
+            if (isMainThread) {
+                finisher.run();
+            } else {
+                lastActivity.runOnUiThread(finisher);
+            }
 
             // A crashed activity won't continue its lifecycle. So we only wait if something else crashed
-            if (uncaughtExceptionThread != lastActivity.getMainLooper().getThread()) {
+            if (!isMainThread) {
                 lastActivityManager.waitForActivityStop(100);
             }
             lastActivityManager.clearLastActivity();
@@ -84,26 +84,29 @@ public void run() {
 
     private void stopServices() {
         if (config.stopServicesOnCrash()) {
-            final ActivityManager activityManager = (ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE);
-            final List<ActivityManager.RunningServiceInfo> runningServices = activityManager.getRunningServices(Integer.MAX_VALUE);
-            final int pid = Process.myPid();
-            for (ActivityManager.RunningServiceInfo serviceInfo : runningServices) {
-                if (serviceInfo.pid == pid && !SenderService.class.getName().equals(serviceInfo.service.getClassName())) {
-                    try {
-                        final Intent intent = new Intent();
-                        intent.setComponent(serviceInfo.service);
-                        context.stopService(intent);
-                    } catch (SecurityException e) {
-                        if (ACRA.DEV_LOGGING)
-                            ACRA.log.d(ACRA.LOG_TAG, "Unable to stop Service " + serviceInfo.service.getClassName() + ". Permission denied");
+            try {
+                final ActivityManager activityManager = SystemServices.getActivityManager(context);
+                final List<ActivityManager.RunningServiceInfo> runningServices = activityManager.getRunningServices(Integer.MAX_VALUE);
+                final int pid = Process.myPid();
+                for (ActivityManager.RunningServiceInfo serviceInfo : runningServices) {
+                    if (serviceInfo.pid == pid && !SenderService.class.getName().equals(serviceInfo.service.getClassName())) {
+                        try {
+                            final Intent intent = new Intent();
+                            intent.setComponent(serviceInfo.service);
+                            context.stopService(intent);
+                        } catch (SecurityException e) {
+                            if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Unable to stop Service " + serviceInfo.service.getClassName() + ". Permission denied");
+                        }
                     }
                 }
+            } catch (SystemServices.ServiceNotReachedException e) {
+                ACRA.log.e(LOG_TAG, "Unable to stop services", e);
             }
         }
     }
 
     private void killProcessAndExit() {
-        android.os.Process.killProcess(android.os.Process.myPid());
+        Process.killProcess(Process.myPid());
         System.exit(10);
     }
 }
diff --git a/acra-core/src/main/java/org/acra/util/StreamReader.java b/acra-core/src/main/java/org/acra/util/StreamReader.java
new file mode 100644
index 00000000..35db656c
--- /dev/null
+++ b/acra-core/src/main/java/org/acra/util/StreamReader.java
@@ -0,0 +1,147 @@
+/*
+ * Copyright (c) 2017 the ACRA team
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.util;
+
+import android.support.annotation.NonNull;
+import android.text.TextUtils;
+
+import com.android.internal.util.Predicate;
+
+import org.acra.ACRAConstants;
+import org.acra.collections.BoundedLinkedList;
+
+import java.io.ByteArrayOutputStream;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.io.Reader;
+import java.io.StringWriter;
+import java.util.Arrays;
+import java.util.LinkedList;
+import java.util.List;
+
+/**
+ * @author F43nd1r
+ * @since 30.11.2017
+ */
+
+public class StreamReader {
+    private static final int NO_LIMIT = -1;
+    private static final int INDEFINITE = -1;
+    private final InputStream inputStream;
+    private int limit = NO_LIMIT;
+    private int timeout = INDEFINITE;
+    private Predicate<String> filter = null;
+
+    public StreamReader(@NonNull String filename) throws FileNotFoundException {
+        this(new File(filename));
+    }
+
+    public StreamReader(@NonNull File file) throws FileNotFoundException {
+        this(new FileInputStream(file));
+    }
+
+    public StreamReader(@NonNull InputStream inputStream) {
+        this.inputStream = inputStream;
+    }
+
+    @NonNull
+    public StreamReader setLimit(int limit) {
+        this.limit = limit;
+        return this;
+    }
+
+    @NonNull
+    public StreamReader setTimeout(int timeout) {
+        this.timeout = timeout;
+        return this;
+    }
+
+    @NonNull
+    public StreamReader setFilter(Predicate<String> filter) {
+        this.filter = filter;
+        return this;
+    }
+
+    @NonNull
+    public String read() throws IOException {
+        final String text = timeout == INDEFINITE ? readFully() : readWithTimeout();
+        if (filter == null) {
+            if (limit == NO_LIMIT) {
+                return text;
+            }
+            final String[] lines = text.split("\\r?\\n");
+            if(lines.length <= limit){
+                return text;
+            }
+            return TextUtils.join("\n", Arrays.copyOfRange(lines, lines.length - limit, lines.length));
+        }
+        final String[] lines = text.split("\\r?\\n");
+        final List<String> buffer = limit == NO_LIMIT ? new LinkedList<>() : new BoundedLinkedList<>(limit);
+        for (String line : lines) {
+            if (filter.apply(line)) {
+                buffer.add(line);
+            }
+        }
+        return TextUtils.join("\n", buffer);
+    }
+
+    @NonNull
+    private String readFully() throws IOException {
+        final Reader input = new InputStreamReader(inputStream);
+        try {
+            final StringWriter output = new StringWriter();
+            final char[] buffer = new char[ACRAConstants.DEFAULT_BUFFER_SIZE_IN_BYTES];
+            int count;
+            while ((count = input.read(buffer)) != -1) {
+                output.write(buffer, 0, count);
+            }
+            return output.toString();
+        } finally {
+            IOUtils.safeClose(input);
+        }
+    }
+
+    @NonNull
+    private String readWithTimeout() throws IOException {
+        final long until = System.currentTimeMillis() + timeout;
+        try {
+            final ByteArrayOutputStream output = new ByteArrayOutputStream();
+            final byte[] buffer = new byte[ACRAConstants.DEFAULT_BUFFER_SIZE_IN_BYTES];
+            int count;
+            while ((count = fillBufferUntil(buffer, until)) != -1) {
+                output.write(buffer, 0, count);
+            }
+            return output.toString();
+        } finally {
+            IOUtils.safeClose(inputStream);
+        }
+    }
+
+    private int fillBufferUntil(@NonNull byte[] buffer, long until) throws IOException {
+        int bufferOffset = 0;
+        while (System.currentTimeMillis() < until && bufferOffset < buffer.length) {
+            final int readResult = inputStream.read(buffer, bufferOffset, Math.min(inputStream.available(), buffer.length - bufferOffset));
+            if (readResult == -1) break;
+            bufferOffset += readResult;
+        }
+        return bufferOffset;
+    }
+}
diff --git a/acra-core/src/main/java/org/acra/util/StubCreator.java b/acra-core/src/main/java/org/acra/util/StubCreator.java
new file mode 100644
index 00000000..72e29543
--- /dev/null
+++ b/acra-core/src/main/java/org/acra/util/StubCreator.java
@@ -0,0 +1,28 @@
+package org.acra.util;
+
+import android.support.annotation.NonNull;
+import org.acra.ACRA;
+import org.acra.ErrorReporter;
+
+import java.lang.reflect.InvocationHandler;
+import java.lang.reflect.Proxy;
+
+public final class StubCreator {
+    private StubCreator() {
+    }
+
+    @NonNull
+    public static ErrorReporter createErrorReporterStub() {
+        return createStub(ErrorReporter.class, (proxy, method, args) -> {
+            String message = ACRA.isACRASenderServiceProcess() ? "in SenderService process" : "before ACRA#init (if you did call #init, check if your configuration is valid)";
+            ACRA.log.w(ACRA.LOG_TAG, String.format("ErrorReporter#%s called %s. THIS CALL WILL BE IGNORED!", method.getName(), message));
+            return null;
+        });
+    }
+
+    @NonNull
+    public static <T> T createStub(Class<T> interfaceClass, InvocationHandler handler) {
+        //noinspection unchecked
+        return (T) Proxy.newProxyInstance(StubCreator.class.getClassLoader(), new Class[]{interfaceClass}, handler);
+    }
+}
diff --git a/acra-core/src/main/java/org/acra/util/SystemServices.java b/acra-core/src/main/java/org/acra/util/SystemServices.java
new file mode 100644
index 00000000..c21bc71e
--- /dev/null
+++ b/acra-core/src/main/java/org/acra/util/SystemServices.java
@@ -0,0 +1,69 @@
+/*
+ * Copyright (c) 2017
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.util;
+
+import android.app.ActivityManager;
+import android.app.NotificationManager;
+import android.content.Context;
+import android.os.DropBoxManager;
+import android.support.annotation.NonNull;
+import android.telephony.TelephonyManager;
+
+/**
+ * @author F43nd1r
+ * @since 29.09.2017
+ */
+
+public final class SystemServices {
+    private SystemServices() {
+    }
+
+    @NonNull
+    public static TelephonyManager getTelephonyManager(@NonNull Context context) throws ServiceNotReachedException {
+        return (TelephonyManager) getService(context, Context.TELEPHONY_SERVICE);
+    }
+
+    @NonNull
+    public static DropBoxManager getDropBoxManager(@NonNull Context context) throws ServiceNotReachedException {
+        return (DropBoxManager) getService(context, Context.DROPBOX_SERVICE);
+    }
+
+    @NonNull
+    public static NotificationManager getNotificationManager(@NonNull Context context) throws ServiceNotReachedException {
+        return (NotificationManager) getService(context, Context.NOTIFICATION_SERVICE);
+    }
+
+    @NonNull
+    public static ActivityManager getActivityManager(@NonNull Context context) throws ServiceNotReachedException {
+        return (ActivityManager) getService(context, Context.ACTIVITY_SERVICE);
+    }
+
+    @NonNull
+    private static Object getService(@NonNull Context context, @NonNull String id) throws ServiceNotReachedException {
+        final Object service = context.getSystemService(id);
+        if (service == null) {
+            throw new ServiceNotReachedException("Unable to load SystemService " + id);
+        }
+        return service;
+    }
+
+    static class ServiceNotReachedException extends Exception {
+        ServiceNotReachedException(String message) {
+            super(message);
+        }
+    }
+}
diff --git a/acra-core/src/main/java/org/acra/util/ToastSender.java b/acra-core/src/main/java/org/acra/util/ToastSender.java
new file mode 100644
index 00000000..4cf339d9
--- /dev/null
+++ b/acra-core/src/main/java/org/acra/util/ToastSender.java
@@ -0,0 +1,52 @@
+/*
+ * Copyright (c) 2017 the ACRA team
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.util;
+
+import android.content.Context;
+import android.support.annotation.IntRange;
+import android.support.annotation.NonNull;
+import android.widget.Toast;
+
+import org.acra.ACRA;
+
+import static org.acra.ACRA.LOG_TAG;
+
+/**
+ * Responsible for sending Toasts under all circumstances.
+ *
+ * @author William Ferguson
+ * @since 4.3.0
+ */
+public final class ToastSender {
+    private ToastSender() {
+    }
+
+    /**
+     * Sends a Toast and ensures that any Exception thrown during sending is handled.
+     *
+     * @param context     Application context.
+     * @param toast       toast message.
+     * @param toastLength Length of the Toast.
+     */
+    public static void sendToast(@NonNull Context context, String toast, @IntRange(from = 0, to = 1) int toastLength) {
+        try {
+            Toast.makeText(context, toast, toastLength).show();
+        } catch (RuntimeException e) {
+            ACRA.log.w(LOG_TAG, "Could not send crash Toast", e);
+        }
+    }
+}
diff --git a/acra-core/src/test/java/org/acra/attachment/AcraContentProviderTest.java b/acra-core/src/test/java/org/acra/attachment/AcraContentProviderTest.java
new file mode 100644
index 00000000..61e88bfc
--- /dev/null
+++ b/acra-core/src/test/java/org/acra/attachment/AcraContentProviderTest.java
@@ -0,0 +1,89 @@
+/*
+ * Copyright (c) 2017 the ACRA team
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.attachment;
+
+import android.content.ContentResolver;
+import android.database.Cursor;
+import android.net.Uri;
+import android.provider.OpenableColumns;
+import android.webkit.MimeTypeMap;
+
+import com.google.common.net.MediaType;
+
+import org.acra.ACRA;
+import org.acra.log.RobolectricLog;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.Robolectric;
+import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
+import org.robolectric.Shadows;
+
+import java.io.File;
+
+import static junit.framework.Assert.assertEquals;
+import static junit.framework.Assert.assertFalse;
+import static junit.framework.Assert.assertNotNull;
+import static junit.framework.Assert.assertTrue;
+
+/**
+ * @author F43nd1r
+ * @since 04.12.2017
+ */
+@RunWith(RobolectricTestRunner.class)
+public class AcraContentProviderTest {
+    private static final String JSON_EXTENSION = "json";
+    private static final String JSON_MIMETYPE = MediaType.JSON_UTF_8.type() + "/" + MediaType.JSON_UTF_8.subtype();
+
+    private ContentResolver resolver;
+    private File file;
+
+    @Before
+    public void setUp() throws Exception {
+        ACRA.log = new RobolectricLog();
+        ACRA.DEV_LOGGING = true;
+        Robolectric.setupContentProvider(AcraContentProvider.class, RuntimeEnvironment.application.getPackageName() + ".acra");
+        resolver = RuntimeEnvironment.application.getContentResolver();
+        file = File.createTempFile("test", "." + JSON_EXTENSION);
+        Shadows.shadowOf(MimeTypeMap.getSingleton()).addExtensionMimeTypMapping(JSON_EXTENSION, JSON_MIMETYPE);
+    }
+
+    @Test
+    public void query() {
+        final Cursor cursor = resolver.query(AcraContentProvider.getUriForFile(RuntimeEnvironment.application, file), new String[]{OpenableColumns.SIZE, OpenableColumns.DISPLAY_NAME}, null, null, null);
+        assertNotNull(cursor);
+        assertTrue(cursor.moveToFirst());
+        assertEquals(file.length(), cursor.getInt(0));
+        assertEquals(file.getName(), cursor.getString(1));
+        assertFalse(cursor.moveToNext());
+        cursor.close();
+    }
+
+    @Test
+    public void openFile() throws Exception {
+        final Uri uri = AcraContentProvider.getUriForFile(RuntimeEnvironment.application, file);
+        assertNotNull(resolver.openFileDescriptor(uri, "r"));
+
+    }
+
+    @Test
+    public void guessMimeType() {
+        assertEquals(JSON_MIMETYPE, AcraContentProvider.guessMimeType(AcraContentProvider.getUriForFile(RuntimeEnvironment.application, file)));
+    }
+
+}
\ No newline at end of file
diff --git a/acra-core/src/test/java/org/acra/attachment/DefaultAttachmentProviderTest.java b/acra-core/src/test/java/org/acra/attachment/DefaultAttachmentProviderTest.java
new file mode 100644
index 00000000..71ad3867
--- /dev/null
+++ b/acra-core/src/test/java/org/acra/attachment/DefaultAttachmentProviderTest.java
@@ -0,0 +1,48 @@
+/*
+ * Copyright (c) 2017 the ACRA team
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.attachment;
+
+import android.app.Application;
+import android.net.Uri;
+
+import org.acra.config.CoreConfigurationBuilder;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
+
+import java.util.List;
+
+import static junit.framework.Assert.assertEquals;
+import static org.hamcrest.MatcherAssert.assertThat;
+import static org.hamcrest.Matchers.hasSize;
+
+/**
+ * @author F43nd1r
+ * @since 30.11.2017
+ */
+@RunWith(RobolectricTestRunner.class)
+public class DefaultAttachmentProviderTest {
+    @Test
+    public void getAttachments() throws Exception {
+        Uri uri = Uri.parse("content://not-a-valid-content-uri");
+        List<Uri> result = new DefaultAttachmentProvider().getAttachments(RuntimeEnvironment.application, new CoreConfigurationBuilder(new Application()).setAttachmentUris(uri.toString()).build());
+        assertThat(result, hasSize(1));
+        assertEquals(uri, result.get(0));
+    }
+
+}
\ No newline at end of file
diff --git a/acra-core/src/test/java/org/acra/config/CoreConfigurationBuilderTest.java b/acra-core/src/test/java/org/acra/config/CoreConfigurationBuilderTest.java
new file mode 100644
index 00000000..2877ce4d
--- /dev/null
+++ b/acra-core/src/test/java/org/acra/config/CoreConfigurationBuilderTest.java
@@ -0,0 +1,34 @@
+package org.acra.config;
+
+import android.app.Application;
+
+import org.acra.annotation.AcraCore;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
+
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
+/**
+ * @author F43nd1r
+ * @since 01.02.18
+ */
+@RunWith(RobolectricTestRunner.class)
+public class CoreConfigurationBuilderTest {
+
+    @Test
+    public void enabled() {
+        assertTrue(new CoreConfigurationBuilder(new AnnotatedClass()).enabled());
+        assertFalse(new CoreConfigurationBuilder(new NonAnnotatedClass()).enabled());
+    }
+
+    @AcraCore
+    private static class AnnotatedClass extends Application {
+
+    }
+
+    private static class NonAnnotatedClass extends Application {
+
+    }
+}
\ No newline at end of file
diff --git a/acra-core/src/test/java/org/acra/data/CrashReportDataTest.java b/acra-core/src/test/java/org/acra/data/CrashReportDataTest.java
new file mode 100644
index 00000000..347ebce7
--- /dev/null
+++ b/acra-core/src/test/java/org/acra/data/CrashReportDataTest.java
@@ -0,0 +1,67 @@
+/*
+ * Copyright (c) 2017 the ACRA team
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.data;
+
+import org.acra.ReportField;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
+
+import java.util.Map;
+
+import static junit.framework.Assert.assertEquals;
+import static junit.framework.Assert.assertTrue;
+
+/**
+ * @author F43nd1r
+ * @since 29.11.2017
+ */
+@RunWith(RobolectricTestRunner.class)
+public class CrashReportDataTest {
+    @Test
+    public void put() {
+        final CrashReportData data = new CrashReportData();
+        data.put(ReportField.DEVICE_ID, "FAKE_ID");
+        assertEquals("FAKE_ID", data.getString(ReportField.DEVICE_ID));
+        data.put("CUSTOM","\n");
+        assertEquals("\n", data.get("CUSTOM"));
+        data.put(ReportField.DEVICE_ID, -1);
+        assertEquals("-1", data.getString(ReportField.DEVICE_ID));
+        assertEquals(-1, data.get(ReportField.DEVICE_ID.name()));
+    }
+
+    @Test
+    public void containsKey() {
+        final CrashReportData data = new CrashReportData();
+        data.put(ReportField.DEVICE_ID, "FAKE_ID");
+        data.put("CUSTOM","\n");
+        assertTrue(data.containsKey(ReportField.DEVICE_ID));
+        assertTrue(data.containsKey(ReportField.DEVICE_ID.name()));
+        assertTrue(data.containsKey("CUSTOM"));
+    }
+
+    @Test
+    public void toMap() {
+        final CrashReportData data = new CrashReportData();
+        data.put(ReportField.DEVICE_ID, "FAKE_ID");
+        data.put("CUSTOM",-1);
+        final Map<String, Object> map = data.toMap();
+        assertEquals("FAKE_ID", map.get(ReportField.DEVICE_ID.name()));
+        assertEquals(-1, map.get("CUSTOM"));
+    }
+
+}
\ No newline at end of file
diff --git a/acra-core/src/test/java/org/acra/data/StringFormatTest.java b/acra-core/src/test/java/org/acra/data/StringFormatTest.java
new file mode 100644
index 00000000..357c805f
--- /dev/null
+++ b/acra-core/src/test/java/org/acra/data/StringFormatTest.java
@@ -0,0 +1,82 @@
+/*
+ * Copyright (c) 2017 the ACRA team
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.data;
+
+
+import com.google.common.net.MediaType;
+
+import org.acra.ReportField;
+import org.acra.collections.ImmutableSet;
+import org.json.JSONObject;
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
+
+import static junit.framework.Assert.assertEquals;
+
+/**
+ * @author F43nd1r
+ * @since 29.11.2017
+ */
+@RunWith(RobolectricTestRunner.class)
+public class StringFormatTest {
+    private CrashReportData reportData;
+
+    @Before
+    public void setUp() throws Exception {
+        reportData = new CrashReportData();
+        reportData.put(ReportField.DEVICE_ID, "FAKE_ID");
+        final JSONObject jsonObject = new JSONObject();
+        jsonObject.put("VERSION_CODE", -1);
+        jsonObject.put("VERSION_NAME", "Test");
+        reportData.put(ReportField.BUILD_CONFIG, jsonObject);
+    }
+
+    @Test
+    public void toFormattedString() throws Exception {
+        testJson();
+        testKeyValue();
+    }
+
+
+    public void testJson() throws Exception {
+        assertEquals("{\"DEVICE_ID\":\"FAKE_ID\",\"BUILD_CONFIG\":{\"VERSION_CODE\":-1,\"VERSION_NAME\":\"Test\"}}",
+                StringFormat.JSON.toFormattedString(reportData, new ImmutableSet<>(ReportField.DEVICE_ID, ReportField.BUILD_CONFIG), "\n", " ", false));
+        assertEquals("{\"DEVICE_ID\":\"FAKE_ID\",\"BUILD_CONFIG\":{\"VERSION_CODE\":-1,\"VERSION_NAME\":\"Test\"}}",
+                StringFormat.JSON.toFormattedString(reportData, new ImmutableSet<>(ReportField.DEVICE_ID, ReportField.BUILD_CONFIG), "&", "\n", true));
+    }
+
+    public void testKeyValue() throws Exception {
+        assertEquals("DEVICE_ID=FAKE_ID\nBUILD_CONFIG=VERSION_CODE=-1 VERSION_NAME=Test",
+                StringFormat.KEY_VALUE_LIST.toFormattedString(reportData, new ImmutableSet<>(ReportField.DEVICE_ID, ReportField.BUILD_CONFIG), "\n", " ", false));
+        assertEquals("DEVICE_ID=FAKE_ID&BUILD_CONFIG=VERSION_CODE%3D-1%0AVERSION_NAME%3DTest",
+                StringFormat.KEY_VALUE_LIST.toFormattedString(reportData, new ImmutableSet<>(ReportField.DEVICE_ID, ReportField.BUILD_CONFIG), "&", "\n", true));
+    }
+
+    @Test
+    public void getMatchingHttpContentType() {
+        assertEquals(MediaType.JSON_UTF_8.type() + "/" + MediaType.JSON_UTF_8.subtype(), StringFormat.JSON.getMatchingHttpContentType());
+        assertEquals(MediaType.FORM_DATA.type() + "/" + MediaType.FORM_DATA.subtype(), StringFormat.KEY_VALUE_LIST.getMatchingHttpContentType());
+    }
+
+    @Test
+    public void issue626() throws Exception {
+        CrashReportData reportData = new CrashReportData();
+        assertEquals("DEVICE_ID=null", StringFormat.KEY_VALUE_LIST.toFormattedString(reportData, new ImmutableSet<>(ReportField.DEVICE_ID), "\n", " ", true));
+    }
+}
\ No newline at end of file
diff --git a/acra-core/src/test/java/org/acra/log/RobolectricLog.java b/acra-core/src/test/java/org/acra/log/RobolectricLog.java
new file mode 100644
index 00000000..a7ddbaed
--- /dev/null
+++ b/acra-core/src/test/java/org/acra/log/RobolectricLog.java
@@ -0,0 +1,87 @@
+package org.acra.log;
+
+import android.support.annotation.Nullable;
+
+import org.robolectric.util.Logger;
+
+/**
+ * @author F43nd1r
+ * @since 01.02.18
+ */
+public class RobolectricLog implements ACRALog {
+
+    public RobolectricLog() {
+    }
+
+    @Override
+    public int v(String tag, String msg) {
+        Logger.debug(msg.replace("%","%%"));
+        return 0;
+    }
+
+    @Override
+    public int v(String tag, String msg, Throwable tr) {
+        Logger.debug(msg.replace("%","%%"), tr);
+        return 0;
+    }
+
+    @Override
+    public int d(String tag, String msg) {
+        Logger.debug(msg.replace("%","%%"));
+        return 0;
+    }
+
+    @Override
+    public int d(String tag, String msg, Throwable tr) {
+        Logger.debug(msg.replace("%","%%"), tr);
+        return 0;
+    }
+
+    @Override
+    public int i(String tag, String msg) {
+        Logger.info(msg.replace("%","%%"));
+        return 0;
+    }
+
+    @Override
+    public int i(String tag, String msg, Throwable tr) {
+        Logger.info(msg.replace("%","%%"), tr);
+        return 0;
+    }
+
+    @Override
+    public int w(String tag, String msg) {
+        Logger.warn(msg.replace("%","%%"));
+        return 0;
+    }
+
+    @Override
+    public int w(String tag, String msg, Throwable tr) {
+        Logger.warn(msg.replace("%","%%"), tr);
+        return 0;
+    }
+
+    @Override
+    public int w(String tag, Throwable tr) {
+        Logger.warn("", tr);
+        return 0;
+    }
+
+    @Override
+    public int e(String tag, String msg) {
+        Logger.error(msg.replace("%","%%"));
+        return 0;
+    }
+
+    @Override
+    public int e(String tag, String msg, Throwable tr) {
+        Logger.error(msg.replace("%","%%"), tr);
+        return 0;
+    }
+
+    @Nullable
+    @Override
+    public String getStackTraceString(Throwable tr) {
+        return String.valueOf(tr);
+    }
+}
diff --git a/acra-core/src/test/java/org/acra/util/InstallationTest.java b/acra-core/src/test/java/org/acra/util/InstallationTest.java
new file mode 100644
index 00000000..170c2bf4
--- /dev/null
+++ b/acra-core/src/test/java/org/acra/util/InstallationTest.java
@@ -0,0 +1,46 @@
+/*
+ * Copyright (c) 2017 the ACRA team
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.util;
+
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
+import org.robolectric.RuntimeEnvironment;
+
+import java.io.File;
+
+import static junit.framework.Assert.assertEquals;
+import static org.hamcrest.Matchers.not;
+import static org.junit.Assert.assertThat;
+
+/**
+ * @author F43nd1r
+ * @since 29.11.2017
+ */
+@RunWith(RobolectricTestRunner.class)
+public class InstallationTest {
+    @Test
+    public void id() {
+        final String id = Installation.id(RuntimeEnvironment.application);
+        assertEquals(id, Installation.id(RuntimeEnvironment.application));
+        for(File child : RuntimeEnvironment.application.getFilesDir().listFiles()){
+            if(child.isFile()) child.delete();
+        }
+        assertThat(Installation.id(RuntimeEnvironment.application), not(id));
+    }
+
+}
\ No newline at end of file
diff --git a/acra-core/src/test/java/org/acra/util/InstanceCreatorTest.java b/acra-core/src/test/java/org/acra/util/InstanceCreatorTest.java
new file mode 100644
index 00000000..8972acb4
--- /dev/null
+++ b/acra-core/src/test/java/org/acra/util/InstanceCreatorTest.java
@@ -0,0 +1,59 @@
+package org.acra.util;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.robolectric.RobolectricTestRunner;
+
+import java.util.Arrays;
+
+import static org.hamcrest.Matchers.hasSize;
+import static org.junit.Assert.*;
+
+@RunWith(RobolectricTestRunner.class)
+public class InstanceCreatorTest {
+    private InstanceCreator instanceCreator;
+
+    @Before
+    public void setUp() {
+        instanceCreator = new InstanceCreator();
+    }
+
+    @Test
+    public void create() {
+        assertNotNull(instanceCreator.create(ClassWithDefaultConstructor.class));
+        assertNotNull(instanceCreator.create(ClassWithExplicitNoArgsConstructor.class));
+        assertNull(instanceCreator.create(ClassWithPrivateConstructor.class));
+        assertNull(instanceCreator.create(ClassWithImplicitConstructorArg.class));
+        assertNull(instanceCreator.create(ClassWithExplicitConstructorArg.class));
+    }
+
+    @Test
+    public void create1() {
+        assertThat(instanceCreator.create(Arrays.asList(ClassWithDefaultConstructor.class, ClassWithExplicitConstructorArg.class)), hasSize(1));
+    }
+
+    public static class ClassWithDefaultConstructor {
+    }
+
+    public static class ClassWithExplicitNoArgsConstructor {
+        public ClassWithExplicitNoArgsConstructor() {
+            //nothing
+        }
+    }
+
+    public static class ClassWithPrivateConstructor {
+        private ClassWithPrivateConstructor(){
+            //nothing
+        }
+    }
+
+    public class ClassWithImplicitConstructorArg {
+    }
+
+    public static class ClassWithExplicitConstructorArg {
+        public ClassWithExplicitConstructorArg(@SuppressWarnings("unused") String arg){
+            //nothing
+        }
+    }
+}
\ No newline at end of file
diff --git a/acra-dialog/.gitignore b/acra-dialog/.gitignore
new file mode 100644
index 00000000..796b96d1
--- /dev/null
+++ b/acra-dialog/.gitignore
@@ -0,0 +1 @@
+/build
diff --git a/acra-dialog/build.gradle b/acra-dialog/build.gradle
new file mode 100644
index 00000000..7ea05915
--- /dev/null
+++ b/acra-dialog/build.gradle
@@ -0,0 +1,28 @@
+/*
+ * Copyright (c) 2017
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+apply plugin: 'com.android.library'
+apply plugin: 'maven-publish'
+apply plugin: 'com.jfrog.bintray'
+
+dependencies {
+    //noinspection GradleDependency
+    implementation "com.android.support:support-fragment:$supportVersion"
+    api project(':acra-core')
+    compileOnly "com.google.auto.service:auto-service:$autoServiceVersion"
+    annotationProcessor project(':annotationprocessor')
+    compileOnly project(':annotations')
+}
diff --git a/acra-dialog/src/main/AndroidManifest.xml b/acra-dialog/src/main/AndroidManifest.xml
new file mode 100644
index 00000000..63b1c91b
--- /dev/null
+++ b/acra-dialog/src/main/AndroidManifest.xml
@@ -0,0 +1,30 @@
+<!--
+  ~ Copyright (c) 2017
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~     http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="org.acra.dialog">
+
+    <application>
+        <activity
+            android:name="org.acra.dialog.CrashReportDialog"
+            android:excludeFromRecents="true"
+            android:finishOnTaskLaunch="true"
+            android:launchMode="singleInstance"
+            android:process=":acra"
+            android:theme="@android:style/Theme.Dialog"/>
+    </application>
+
+</manifest>
diff --git a/acra-dialog/src/main/java/org/acra/annotation/AcraDialog.java b/acra-dialog/src/main/java/org/acra/annotation/AcraDialog.java
new file mode 100644
index 00000000..15ce6cde
--- /dev/null
+++ b/acra-dialog/src/main/java/org/acra/annotation/AcraDialog.java
@@ -0,0 +1,127 @@
+/*
+ * Copyright (c) 2017
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.annotation;
+
+import android.content.DialogInterface;
+import android.support.annotation.DrawableRes;
+import android.support.annotation.NonNull;
+import android.support.annotation.StringRes;
+import android.support.annotation.StyleRes;
+
+import org.acra.ACRAConstants;
+import org.acra.dialog.BaseCrashReportDialog;
+import org.acra.dialog.CrashReportDialog;
+
+import java.lang.annotation.Documented;
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Inherited;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * CrashReportDialog configuration
+ *
+ * @author F43nd1r
+ * @since 01.06.2017
+ */
+@Documented
+@Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.TYPE)
+@Inherited
+@Configuration
+public @interface AcraDialog {
+
+    /**
+     * Custom CrashReportDialog class
+     *
+     * @return Class for the CrashReportDialog used when prompting the user for crash details.
+     * @since 5.0.0
+     */
+    @Instantiatable @AnyNonDefault @NonNull Class<? extends BaseCrashReportDialog> reportDialogClass() default CrashReportDialog.class;
+
+    /**
+     * label of the positive button
+     *
+     * @return Resource id for the positive button label in the crash dialog.
+     * @see android.app.AlertDialog.Builder#setPositiveButton(int, DialogInterface.OnClickListener)
+     * @since 5.0.0
+     */
+    @StringRes int resPositiveButtonText() default android.R.string.ok;
+
+    /**
+     * label of the negative button
+     *
+     * @return Resource id for the negative button label in the crash dialog.
+     * @see android.app.AlertDialog.Builder#setNegativeButton(int, DialogInterface.OnClickListener)
+     * @since 5.0.0
+     */
+    @StringRes int resNegativeButtonText() default android.R.string.cancel;
+
+    /**
+     * label of the comment input prompt.
+     * If not provided, removes the input field.
+     *
+     * @return Resource id for the user comment input label in the crash dialog.
+     * @since 5.0.0
+     */
+    @StringRes int resCommentPrompt() default ACRAConstants.DEFAULT_RES_VALUE;
+
+    /**
+     * label of the email input prompt.
+     * If not provided, removes the input field.
+     *
+     * @return Resource id for the user email address input label in the crash dialog.
+     * @since 5.0.0
+     */
+    @StringRes int resEmailPrompt() default ACRAConstants.DEFAULT_RES_VALUE;
+
+    /**
+     * icon of the dialog
+     *
+     * @return Resource id for the icon in the crash dialog.
+     * @see android.app.AlertDialog.Builder#setIcon(int)
+     * @since 5.0.0
+     */
+    @DrawableRes int resIcon() default android.R.drawable.ic_dialog_alert;
+
+    /**
+     * text in the dialog
+     *
+     * @return Resource id for the text in the crash dialog.
+     * @since 5.0.0
+     */
+    @AnyNonDefault @StringRes int resText() default ACRAConstants.DEFAULT_RES_VALUE;
+
+    /**
+     * title of the dialog
+     *
+     * @return Resource id for the title in the crash dialog.
+     * @see android.app.AlertDialog.Builder#setTitle(int)
+     * @since 5.0.0
+     */
+    @StringRes int resTitle() default ACRAConstants.DEFAULT_RES_VALUE;
+
+    /**
+     * theme of the dialog
+     *
+     * @return resource id for the crash dialog theme
+     * @see android.app.Activity#setTheme(int)
+     * @since 5.0.0
+     */
+    @StyleRes int resTheme() default ACRAConstants.DEFAULT_RES_VALUE;
+}
diff --git a/acra-dialog/src/main/java/org/acra/dialog/BaseCrashReportDialog.java b/acra-dialog/src/main/java/org/acra/dialog/BaseCrashReportDialog.java
new file mode 100644
index 00000000..af9b4b3c
--- /dev/null
+++ b/acra-dialog/src/main/java/org/acra/dialog/BaseCrashReportDialog.java
@@ -0,0 +1,150 @@
+/*
+ * Copyright (c) 2017
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.dialog;
+
+import android.os.Bundle;
+import android.support.annotation.Nullable;
+import android.support.v4.app.FragmentActivity;
+
+import org.acra.ACRA;
+import org.acra.config.CoreConfiguration;
+import org.acra.data.CrashReportData;
+import org.acra.file.BulkReportDeleter;
+import org.acra.file.CrashReportPersister;
+import org.acra.interaction.DialogInteraction;
+import org.acra.sender.SenderServiceStarter;
+import org.json.JSONException;
+
+import java.io.File;
+import java.io.IOException;
+import java.io.Serializable;
+
+import static org.acra.ACRA.LOG_TAG;
+import static org.acra.ReportField.USER_COMMENT;
+import static org.acra.ReportField.USER_EMAIL;
+
+/**
+ * Activity which implements the base functionality for a CrashReportDialog.
+ * <p>
+ * Activities which extend from this class can override init to create a custom view.
+ * <p>
+ * The methods sendCrash(comment, userEmail) and cancelReports() can be used to send or cancel
+ * sending of reports respectively.
+ * <p>
+ * This Activity must be instantiated with 2 arguments:
+ * <ol>
+ * <li>{@link DialogInteraction#EXTRA_REPORT_FILE}</li>
+ * <li>{@link DialogInteraction#EXTRA_REPORT_CONFIG}</li>
+ * </ol>
+ *
+ * @author F43nd1r &amp; Various
+ */
+@SuppressWarnings({"WeakerAccess", "unused"})
+public abstract class BaseCrashReportDialog extends FragmentActivity {
+
+    private File reportFile;
+    private CoreConfiguration config;
+
+    /**
+     * NB if you were previously creating and showing your dialog in this method,
+     * you should move that code to {@link #init(Bundle)}.
+     *
+     * @param savedInstanceState If the activity is being re-initialized then this Bundle contains the data it most recently supplied in {@link #onSaveInstanceState}.
+     */
+    @Override
+    protected final void onCreate(@Nullable Bundle savedInstanceState) {
+        preInit(savedInstanceState);
+        super.onCreate(savedInstanceState);
+
+
+        if (ACRA.DEV_LOGGING) {
+            ACRA.log.d(LOG_TAG, "CrashReportDialog extras=" + getIntent().getExtras());
+        }
+
+        final Serializable sConfig = getIntent().getSerializableExtra(DialogInteraction.EXTRA_REPORT_CONFIG);
+        final Serializable sReportFile = getIntent().getSerializableExtra(DialogInteraction.EXTRA_REPORT_FILE);
+
+        if ((sConfig instanceof CoreConfiguration) && (sReportFile instanceof File)) {
+            config = (CoreConfiguration) sConfig;
+            reportFile = (File) sReportFile;
+            init(savedInstanceState);
+        } else {
+            ACRA.log.w(LOG_TAG, "Illegal or incomplete call of BaseCrashReportDialog.");
+            finish();
+        }
+    }
+
+    /**
+     * Handle any necessary pre-onCreate() setup here.
+     *
+     * @param savedInstanceState If the activity is being re-initialized then this Bundle contains the data it most recently supplied in {@link #onSaveInstanceState}.
+     */
+    @SuppressWarnings("EmptyMethod")
+    protected void preInit(@Nullable Bundle savedInstanceState) {
+    }
+
+    /**
+     * Responsible for creating and showing the crash report dialog.
+     *
+     * @param savedInstanceState If the activity is being re-initialized then this Bundle contains the data it most recently supplied in {@link #onSaveInstanceState}.
+     */
+    protected void init(@Nullable Bundle savedInstanceState) {
+    }
+
+
+    /**
+     * Cancel any pending crash reports.
+     */
+    protected final void cancelReports() {
+        new Thread(() -> new BulkReportDeleter(this).deleteReports(false, 0)).start();
+    }
+
+
+    /**
+     * Send crash report given user's comment and email address.
+     *
+     * @param comment   Comment (may be null) provided by the user.
+     * @param userEmail Email address (may be null) provided by the client.
+     */
+    protected final void sendCrash(@Nullable String comment, @Nullable String userEmail) {
+        new Thread(() -> {
+            final CrashReportPersister persister = new CrashReportPersister();
+            try {
+                if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Add user comment to " + reportFile);
+                final CrashReportData crashData = persister.load(reportFile);
+                crashData.put(USER_COMMENT, comment == null ? "" : comment);
+                crashData.put(USER_EMAIL, userEmail == null ? "" : userEmail);
+                persister.store(crashData, reportFile);
+            } catch (IOException | JSONException e) {
+                ACRA.log.w(LOG_TAG, "User comment not added: ", e);
+            }
+
+            // Start the report sending task
+            final SenderServiceStarter starter = new SenderServiceStarter(this, config);
+            starter.startService(false, true);
+        }).start();
+    }
+
+    /**
+     * Provides the config to subclasses
+     *
+     * @return the main config
+     */
+    protected final CoreConfiguration getConfig() {
+        return config;
+    }
+}
diff --git a/acra/src/main/java/org/acra/dialog/CrashReportDialog.java b/acra-dialog/src/main/java/org/acra/dialog/CrashReportDialog.java
similarity index 77%
rename from acra/src/main/java/org/acra/dialog/CrashReportDialog.java
rename to acra-dialog/src/main/java/org/acra/dialog/CrashReportDialog.java
index f71f0313..0f6c63c6 100644
--- a/acra/src/main/java/org/acra/dialog/CrashReportDialog.java
+++ b/acra-dialog/src/main/java/org/acra/dialog/CrashReportDialog.java
@@ -1,3 +1,19 @@
+/*
+ * Copyright (c) 2017 the ACRA team
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
 package org.acra.dialog;
 
 import android.app.AlertDialog;
@@ -17,14 +33,16 @@
 
 import org.acra.ACRA;
 import org.acra.ACRAConstants;
-import org.acra.prefs.PrefUtils;
+import org.acra.config.ConfigUtils;
+import org.acra.config.DialogConfiguration;
 import org.acra.prefs.SharedPreferencesFactory;
 
 
 /**
  * This is the dialog Activity used by ACRA to get authorization from the user
- * to send reports. Requires android:launchMode="singleInstance" in your
- * AndroidManifest to work properly.
+ * to send reports.
+ *
+ * @author F43nd1r &amp; Various
  **/
 @SuppressWarnings({"WeakerAccess", "unused"})
 public class CrashReportDialog extends BaseCrashReportDialog implements DialogInterface.OnClickListener {
@@ -37,6 +55,7 @@
     private EditText userCommentView;
     private EditText userEmailView;
     private SharedPreferencesFactory sharedPreferencesFactory;
+    private DialogConfiguration dialogConfiguration;
 
     private AlertDialog mDialog;
 
@@ -46,8 +65,9 @@ protected void init(@Nullable Bundle savedInstanceState) {
         scrollable = new LinearLayout(this);
         scrollable.setOrientation(LinearLayout.VERTICAL);
         sharedPreferencesFactory = new SharedPreferencesFactory(getApplicationContext(), getConfig());
-        final int themeResourceId = getConfig().resDialogTheme();
-        if(themeResourceId != ACRAConstants.DEFAULT_RES_VALUE) setTheme(themeResourceId);
+        dialogConfiguration = ConfigUtils.getPluginConfiguration(getConfig(), DialogConfiguration.class);
+        final int themeResourceId = dialogConfiguration.resTheme();
+        if (themeResourceId != ACRAConstants.DEFAULT_RES_VALUE) setTheme(themeResourceId);
 
         buildAndShowDialog(savedInstanceState);
     }
@@ -59,17 +79,17 @@ protected void init(@Nullable Bundle savedInstanceState) {
      */
     protected void buildAndShowDialog(@Nullable Bundle savedInstanceState) {
         final AlertDialog.Builder dialogBuilder = new AlertDialog.Builder(this);
-        final int titleResourceId = getConfig().resDialogTitle();
-        if (titleResourceId != ACRAConstants.DEFAULT_RES_VALUE) {
-            dialogBuilder.setTitle(titleResourceId);
+        final String title = dialogConfiguration.title();
+        if (title != null) {
+            dialogBuilder.setTitle(title);
         }
-        final int iconResourceId = getConfig().resDialogIcon();
+        final int iconResourceId = dialogConfiguration.resIcon();
         if (iconResourceId != ACRAConstants.DEFAULT_RES_VALUE) {
             dialogBuilder.setIcon(iconResourceId);
         }
         dialogBuilder.setView(buildCustomView(savedInstanceState))
-                .setPositiveButton(getText(getConfig().resDialogPositiveButtonText()), this)
-                .setNegativeButton(getText(getConfig().resDialogNegativeButtonText()), this);
+                .setPositiveButton(dialogConfiguration.positiveButtonText(), this)
+                .setNegativeButton(dialogConfiguration.negativeButtonText(), this);
 
         mDialog = dialogBuilder.create();
         mDialog.setCanceledOnTouchOutside(false);
@@ -125,31 +145,31 @@ protected final void addViewToDialog(@NonNull View v) {
     }
 
     /**
-     * Creates a main view containing text of resDialogText, or nothing if not found
+     * Creates a main view containing text of resText, or nothing if not found
      *
      * @return the main view
      */
     @NonNull
     protected View getMainView() {
         final TextView text = new TextView(this);
-        final int dialogTextId = getConfig().resDialogText();
-        if (dialogTextId != ACRAConstants.DEFAULT_RES_VALUE) {
-            text.setText(getText(dialogTextId));
+        final String dialogText = dialogConfiguration.text();
+        if (dialogText != null) {
+            text.setText(dialogText);
         }
         return text;
     }
 
     /**
-     * creates a comment label view with resDialogCommentPrompt as text
+     * creates a comment label view with resCommentPrompt as text
      *
      * @return the label or null if there is no resource
      */
     @Nullable
     protected View getCommentLabel() {
-        final int commentPromptId = getConfig().resDialogCommentPrompt();
-        if (commentPromptId != ACRAConstants.DEFAULT_RES_VALUE) {
+        final String commentPrompt = dialogConfiguration.commentPrompt();
+        if (commentPrompt != null) {
             final TextView labelView = new TextView(this);
-            labelView.setText(getText(commentPromptId));
+            labelView.setText(commentPrompt);
             return labelView;
         }
         return null;
@@ -172,16 +192,16 @@ protected EditText getCommentPrompt(@Nullable CharSequence savedComment) {
     }
 
     /**
-     * creates a email label view with resDialogEmailPrompt as text
+     * creates a email label view with resEmailPrompt as text
      *
      * @return the label or null if there is no resource
      */
     @Nullable
     protected View getEmailLabel() {
-        final int emailPromptId = getConfig().resDialogEmailPrompt();
-        if (emailPromptId != ACRAConstants.DEFAULT_RES_VALUE) {
+        final String emailPrompt = dialogConfiguration.emailPrompt();
+        if (emailPrompt != null) {
             final TextView labelView = new TextView(this);
-            labelView.setText(getText(emailPromptId));
+            labelView.setText(emailPrompt);
             return labelView;
         }
         return null;
@@ -219,9 +239,7 @@ public void onClick(DialogInterface dialog, int which) {
             final SharedPreferences prefs = sharedPreferencesFactory.create();
             if (userEmailView != null) {
                 userEmail = userEmailView.getText().toString();
-                final SharedPreferences.Editor prefEditor = prefs.edit();
-                prefEditor.putString(ACRA.PREF_USER_EMAIL_ADDRESS, userEmail);
-                PrefUtils.save(prefEditor);
+                prefs.edit().putString(ACRA.PREF_USER_EMAIL_ADDRESS, userEmail).apply();
             } else {
                 userEmail = prefs.getString(ACRA.PREF_USER_EMAIL_ADDRESS, "");
             }
diff --git a/acra-dialog/src/main/java/org/acra/interaction/DialogInteraction.java b/acra-dialog/src/main/java/org/acra/interaction/DialogInteraction.java
new file mode 100644
index 00000000..28aa10f7
--- /dev/null
+++ b/acra-dialog/src/main/java/org/acra/interaction/DialogInteraction.java
@@ -0,0 +1,88 @@
+/*
+ * Copyright (c) 2017
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.interaction;
+
+import android.content.Context;
+import android.content.Intent;
+import android.content.SharedPreferences;
+import android.support.annotation.NonNull;
+
+import com.google.auto.service.AutoService;
+
+import org.acra.ACRA;
+import org.acra.config.ConfigUtils;
+import org.acra.config.CoreConfiguration;
+import org.acra.config.DialogConfiguration;
+import org.acra.prefs.SharedPreferencesFactory;
+
+import java.io.File;
+
+import static org.acra.ACRA.LOG_TAG;
+
+/**
+ * @author F43nd1r
+ * @since 02.06.2017
+ */
+@AutoService(ReportInteraction.class)
+public class DialogInteraction extends BaseReportInteraction {
+    /**
+     * Used in the intent starting CrashReportDialog to provide the name of the
+     * latest generated report file in order to be able to associate the user
+     * comment.
+     */
+    public static final String EXTRA_REPORT_FILE = "REPORT_FILE";
+    /**
+     * Used in the intent starting CrashReportDialog to provide the AcraConfig to use when gathering the crash info.
+     * <p>
+     * This can be used by any BaseCrashReportDialog subclass to custom the dialog.
+     */
+    public static final String EXTRA_REPORT_CONFIG = "REPORT_CONFIG";
+
+    public DialogInteraction() {
+        super(DialogConfiguration.class);
+    }
+
+    @Override
+    public boolean performInteraction(@NonNull Context context, @NonNull CoreConfiguration config, @NonNull File reportFile) {
+        final SharedPreferences prefs = new SharedPreferencesFactory(context, config).create();
+        if (prefs.getBoolean(ACRA.PREF_ALWAYS_ACCEPT, false)) {
+            return true;
+        }
+        // Create a new activity task with the confirmation dialog.
+        // This new task will be persisted on application restart
+        // right after its death.
+        if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Creating CrashReportDialog for " + reportFile);
+        final Intent dialogIntent = createCrashReportDialogIntent(context, config, reportFile);
+        dialogIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+        context.startActivity(dialogIntent);
+        return false;
+    }
+
+    /**
+     * Creates an Intent that can be used to create and show a CrashReportDialog.
+     *
+     * @param reportFile Error report file to display in the crash report dialog.
+     */
+    @NonNull
+    private Intent createCrashReportDialogIntent(@NonNull Context context, @NonNull CoreConfiguration config, @NonNull File reportFile) {
+        if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Creating DialogIntent for " + reportFile);
+        final Intent dialogIntent = new Intent(context, ConfigUtils.getPluginConfiguration(config, DialogConfiguration.class).reportDialogClass());
+        dialogIntent.putExtra(EXTRA_REPORT_FILE, reportFile);
+        dialogIntent.putExtra(EXTRA_REPORT_CONFIG, config);
+        return dialogIntent;
+    }
+}
diff --git a/acra-http/.gitignore b/acra-http/.gitignore
new file mode 100644
index 00000000..796b96d1
--- /dev/null
+++ b/acra-http/.gitignore
@@ -0,0 +1 @@
+/build
diff --git a/acra-http/build.gradle b/acra-http/build.gradle
new file mode 100644
index 00000000..463af566
--- /dev/null
+++ b/acra-http/build.gradle
@@ -0,0 +1,26 @@
+/*
+ * Copyright (c) 2017
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+apply plugin: 'com.android.library'
+apply plugin: 'maven-publish'
+apply plugin: 'com.jfrog.bintray'
+
+dependencies {
+    api project(':acra-core')
+    compileOnly "com.google.auto.service:auto-service:$autoServiceVersion"
+    annotationProcessor project(':annotationprocessor')
+    compileOnly project(':annotations')
+}
diff --git a/acra-http/src/main/AndroidManifest.xml b/acra-http/src/main/AndroidManifest.xml
new file mode 100644
index 00000000..69380393
--- /dev/null
+++ b/acra-http/src/main/AndroidManifest.xml
@@ -0,0 +1,20 @@
+<!--
+  ~ Copyright (c) 2017
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~     http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+    package="org.acra.http">
+    <uses-permission android:name="android.permission.INTERNET"/>
+</manifest>
diff --git a/acra-http/src/main/java/org/acra/annotation/AcraHttpSender.java b/acra-http/src/main/java/org/acra/annotation/AcraHttpSender.java
new file mode 100644
index 00000000..b4feaa80
--- /dev/null
+++ b/acra-http/src/main/java/org/acra/annotation/AcraHttpSender.java
@@ -0,0 +1,139 @@
+/*
+ * Copyright (c) 2017
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.annotation;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.RawRes;
+
+import org.acra.ACRAConstants;
+import org.acra.config.BaseHttpConfigurationBuilder;
+import org.acra.security.KeyStoreFactory;
+import org.acra.security.NoKeyStoreFactory;
+import org.acra.sender.HttpSender;
+
+import java.lang.annotation.Documented;
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Inherited;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * Http sender configuration
+ *
+ * @author F43nd1r
+ * @since 01.06.2017
+ */
+@Documented
+@Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.TYPE)
+@Inherited
+@Configuration(baseBuilderClass = BaseHttpConfigurationBuilder.class)
+public @interface AcraHttpSender {
+    /**
+     * The Uri of your own server-side script that will receive reports.
+     *
+     * @return URI of a server to which to send reports.
+     * @since 5.0.0
+     */
+    @NonNull String uri();
+
+    /**
+     * you can set here and in {@link org.acra.annotation.AcraHttpSender#basicAuthPassword()} the credentials for a BASIC HTTP authentication.
+     *
+     * @return Login to use.
+     * @since 5.0.0
+     */
+    @NonNull String basicAuthLogin() default ACRAConstants.NULL_VALUE;
+
+    /**
+     * you can set here and in {@link org.acra.annotation.AcraHttpSender#basicAuthLogin()} the credentials for a BASIC HTTP authentication.
+     *
+     * @return Password to use.
+     * @since 5.0.0
+     */
+    @NonNull String basicAuthPassword() default ACRAConstants.NULL_VALUE;
+
+    /**
+     * <p>
+     * The {@link HttpSender.Method} to be used when posting with {@link org.acra.annotation.AcraHttpSender#uri()} .
+     * </p>
+     *
+     * @return HTTP method used when posting reports.
+     * @since 5.0.0
+     */
+    @NonNull HttpSender.Method httpMethod();
+
+    /**
+     * timeout for server connection
+     *
+     * @return Value in milliseconds for timeout attempting to connect to a network.
+     * @see java.net.HttpURLConnection#setConnectTimeout(int)
+     * @since 5.0.0
+     */
+    int connectionTimeout() default 5000;
+
+    /**
+     * timeout for socket connection
+     *
+     * @return Value in milliseconds for timeout receiving a response to a network request.
+     * @see java.net.HttpURLConnection#setReadTimeout(int)
+     * @since 5.0.0
+     */
+    int socketTimeout() default 20000;
+
+    /**
+     * allows to prevent resending of timed out reports, possibly relieving server stress, but also reducing received report counts
+     *
+     * @return if timed out reports should be dropped
+     * @since 5.0.0
+     */
+    boolean dropReportsOnTimeout() default false;
+
+    /**
+     * A custom class supplying a {@link java.security.KeyStore}, which will be used for ssl authentication.
+     * A base implementation is available: {@link org.acra.security.BaseKeyStoreFactory}
+     *
+     * @return Class which creates a keystore that can contain trusted certificates
+     * @since 5.0.0
+     */
+    @NonNull Class<? extends KeyStoreFactory> keyStoreFactoryClass() default NoKeyStoreFactory.class;
+
+    /**
+     * a certificate used for ssl authentication
+     *
+     * @return path to a custom trusted certificate. Must start with "asset://" if the file is in the assets folder
+     * @since 5.0.0
+     */
+    @NonNull String certificatePath() default ACRAConstants.DEFAULT_STRING_VALUE;
+
+    /**
+     * a certificate used for ssl authentication
+     *
+     * @return resource id of a custom trusted certificate.
+     * @since 5.0.0
+     */
+    @RawRes int resCertificate() default ACRAConstants.DEFAULT_RES_VALUE;
+
+    /**
+     * type of the certificate used for ssl authentication
+     *
+     * @return specify the type of the certificate set in either {@link org.acra.annotation.AcraHttpSender#certificatePath()} or {@link org.acra.annotation.AcraHttpSender#resCertificate()}
+     * @since 5.0.0
+     */
+    @NonNull String certificateType() default ACRAConstants.DEFAULT_CERTIFICATE_TYPE;
+}
diff --git a/acra-http/src/main/java/org/acra/config/BaseHttpConfigurationBuilder.java b/acra-http/src/main/java/org/acra/config/BaseHttpConfigurationBuilder.java
new file mode 100644
index 00000000..40d7f83b
--- /dev/null
+++ b/acra-http/src/main/java/org/acra/config/BaseHttpConfigurationBuilder.java
@@ -0,0 +1,56 @@
+/*
+ * Copyright (c) 2017
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.config;
+
+import android.support.annotation.NonNull;
+
+import org.acra.annotation.BuilderMethod;
+import org.acra.annotation.ConfigurationValue;
+
+import java.util.HashMap;
+import java.util.Map;
+
+/**
+ * @author F43nd1r
+ * @since 01.06.2017
+ */
+public class BaseHttpConfigurationBuilder {
+
+    private final Map<String, String> httpHeaders;
+
+    BaseHttpConfigurationBuilder() {
+        httpHeaders = new HashMap<>();
+    }
+
+    /**
+     * Set custom HTTP headers to be sent by the provided {@link org.acra.sender.HttpSender}
+     * This should be used also by third party senders.
+     *
+     * @param headers A map associating HTTP header names to their values.
+     */
+    @BuilderMethod
+    public void setHttpHeaders(@NonNull Map<String, String> headers) {
+        this.httpHeaders.clear();
+        this.httpHeaders.putAll(headers);
+    }
+
+    @ConfigurationValue
+    @NonNull
+    Map<String, String> httpHeaders() {
+        return httpHeaders;
+    }
+}
diff --git a/acra/src/main/java/org/acra/http/BaseHttpRequest.java b/acra-http/src/main/java/org/acra/http/BaseHttpRequest.java
similarity index 86%
rename from acra/src/main/java/org/acra/http/BaseHttpRequest.java
rename to acra-http/src/main/java/org/acra/http/BaseHttpRequest.java
index dda45c15..e6ab8581 100644
--- a/acra/src/main/java/org/acra/http/BaseHttpRequest.java
+++ b/acra-http/src/main/java/org/acra/http/BaseHttpRequest.java
@@ -19,42 +19,41 @@
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.util.Base64;
-
+import android.util.Log;
 import org.acra.ACRA;
 import org.acra.ACRAConstants;
-import org.acra.config.ACRAConfiguration;
+import org.acra.BuildConfig;
+import org.acra.config.ConfigUtils;
+import org.acra.config.CoreConfiguration;
+import org.acra.config.HttpSenderConfiguration;
 import org.acra.security.KeyStoreHelper;
 import org.acra.sender.HttpSender.Method;
 import org.acra.util.IOUtils;
 
+import javax.net.ssl.HttpsURLConnection;
+import javax.net.ssl.SSLContext;
+import javax.net.ssl.TrustManagerFactory;
 import java.io.BufferedOutputStream;
 import java.io.IOException;
 import java.io.OutputStream;
 import java.net.HttpURLConnection;
+import java.net.SocketTimeoutException;
 import java.net.URL;
 import java.security.GeneralSecurityException;
 import java.security.KeyStore;
 import java.util.Map;
 
-import javax.net.ssl.HttpsURLConnection;
-import javax.net.ssl.SSLContext;
-import javax.net.ssl.TrustManagerFactory;
-
-import ch.acra.acra.BuildConfig;
-
 import static org.acra.ACRA.LOG_TAG;
 
 /**
  * @author F43nd1r
  * @since 03.03.2017
  */
+@SuppressWarnings("WeakerAccess")
 public abstract class BaseHttpRequest<T> implements HttpRequest<T> {
 
-    @NonNull
-    private final ACRAConfiguration config;
-    @NonNull
+    private final CoreConfiguration config;
     private final Context context;
-    @NonNull
     private final Method method;
     private final String login;
     private final String password;
@@ -62,7 +61,7 @@
     private final int socketTimeOut;
     private final Map<String, String> headers;
 
-    public BaseHttpRequest(@NonNull ACRAConfiguration config, @NonNull Context context, @NonNull Method method,
+    public BaseHttpRequest(@NonNull CoreConfiguration config, @NonNull Context context, @NonNull Method method,
                            @Nullable String login, @Nullable String password, int connectionTimeOut, int socketTimeOut, @Nullable Map<String, String> headers) {
         this.config = config;
         this.context = context;
@@ -95,14 +94,22 @@ public void send(@NonNull URL url, @NonNull T content) throws IOException {
         }
         configureTimeouts(urlConnection, connectionTimeOut, socketTimeOut);
         configureHeaders(urlConnection, login, password, headers, content);
-        if(ACRA.DEV_LOGGING){
+        if (ACRA.DEV_LOGGING) {
             ACRA.log.d(LOG_TAG, "Sending request to " + url);
             ACRA.log.d(LOG_TAG, "Http " + method.name() + " content : ");
             ACRA.log.d(LOG_TAG, content.toString());
         }
-        writeContent(urlConnection, method, content);
-        handleResponse(urlConnection.getResponseCode(), urlConnection.getResponseMessage());
-        urlConnection.disconnect();
+        try {
+            writeContent(urlConnection, method, content);
+            handleResponse(urlConnection.getResponseCode(), urlConnection.getResponseMessage());
+            urlConnection.disconnect();
+        } catch (SocketTimeoutException e) {
+            if (ConfigUtils.getPluginConfiguration(config, HttpSenderConfiguration.class).dropReportsOnTimeout()) {
+                Log.w(ACRA.LOG_TAG, "Dropped report due to timeout");
+            } else {
+                throw e;
+            }
+        }
     }
 
     @SuppressWarnings("WeakerAccess")
@@ -127,7 +134,7 @@ protected void configureHttps(@NonNull HttpsURLConnection connection) throws Gen
     }
 
     @SuppressWarnings("WeakerAccess")
-    protected void configureTimeouts(@NonNull HttpURLConnection connection, int connectionTimeOut, int socketTimeOut){
+    protected void configureTimeouts(@NonNull HttpURLConnection connection, int connectionTimeOut, int socketTimeOut) {
         connection.setConnectTimeout(connectionTimeOut);
         connection.setReadTimeout(socketTimeOut);
     }
@@ -155,10 +162,11 @@ protected void configureHeaders(@NonNull HttpURLConnection connection, @Nullable
         }
     }
 
+    @NonNull
     protected abstract String getContentType(@NonNull Context context, @NonNull T t);
 
     @SuppressWarnings("WeakerAccess")
-    protected void writeContent(@NonNull HttpURLConnection connection, @NonNull Method method, @NonNull T content) throws IOException{
+    protected void writeContent(@NonNull HttpURLConnection connection, @NonNull Method method, @NonNull T content) throws IOException {
         final byte[] contentAsBytes = asBytes(content);
         // write output - see http://developer.android.com/reference/java/net/HttpURLConnection.html
         connection.setRequestMethod(method.name());
@@ -179,11 +187,13 @@ protected void writeContent(@NonNull HttpURLConnection connection, @NonNull Meth
         }
     }
 
-    protected abstract byte[] asBytes(T content) throws IOException;
+    @NonNull
+    protected abstract byte[] asBytes(@NonNull T content) throws IOException;
 
     @SuppressWarnings("WeakerAccess")
     protected void handleResponse(int responseCode, String responseMessage) throws IOException {
-        if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Request response : " + responseCode + " : " + responseMessage);
+        if (ACRA.DEV_LOGGING)
+            ACRA.log.d(LOG_TAG, "Request response : " + responseCode + " : " + responseMessage);
         if (responseCode >= HttpURLConnection.HTTP_OK && responseCode < HttpURLConnection.HTTP_MULT_CHOICE) {
             // All is good
             ACRA.log.i(LOG_TAG, "Request received by server");
@@ -191,7 +201,7 @@ protected void handleResponse(int responseCode, String responseMessage) throws I
             //timeout or server error. Repeat the request later.
             ACRA.log.w(LOG_TAG, "Could not send ACRA Post responseCode=" + responseCode + " message=" + responseMessage);
             throw new IOException("Host returned error code " + responseCode);
-        } else if (responseCode >= HttpURLConnection.HTTP_BAD_REQUEST && responseCode < HttpURLConnection.HTTP_INTERNAL_ERROR) {
+        } else if (responseCode >= HttpURLConnection.HTTP_BAD_REQUEST) {
             // Client error. The request must not be repeated. Discard it.
             ACRA.log.w(LOG_TAG, responseCode + ": Client error - request will be discarded");
         } else {
diff --git a/acra-http/src/main/java/org/acra/http/BinaryHttpRequest.java b/acra-http/src/main/java/org/acra/http/BinaryHttpRequest.java
new file mode 100644
index 00000000..22700f9f
--- /dev/null
+++ b/acra-http/src/main/java/org/acra/http/BinaryHttpRequest.java
@@ -0,0 +1,56 @@
+/*
+ * Copyright (c) 2017 the ACRA team
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.http;
+
+import android.content.Context;
+import android.net.Uri;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import org.acra.config.CoreConfiguration;
+import org.acra.sender.HttpSender;
+import org.acra.util.UriUtils;
+
+import java.io.IOException;
+import java.util.Map;
+
+/**
+ * @author F43nd1r
+ * @since 10.03.2017
+ */
+
+public class BinaryHttpRequest extends BaseHttpRequest<Uri> {
+    private final Context context;
+
+    public BinaryHttpRequest(@NonNull CoreConfiguration config, @NonNull Context context,
+                             @Nullable String login, @Nullable String password, int connectionTimeOut, int socketTimeOut, @Nullable Map<String, String> headers) {
+        super(config, context, HttpSender.Method.PUT, login, password, connectionTimeOut, socketTimeOut, headers);
+        this.context = context;
+    }
+
+    @NonNull
+    @Override
+    protected String getContentType(@NonNull Context context, @NonNull Uri uri) {
+        return UriUtils.getMimeType(context, uri);
+    }
+
+    @NonNull
+    @Override
+    protected byte[] asBytes(@NonNull Uri content) throws IOException {
+        return UriUtils.uriToByteArray(context, content);
+    }
+}
diff --git a/acra/src/main/java/org/acra/http/DefaultHttpRequest.java b/acra-http/src/main/java/org/acra/http/DefaultHttpRequest.java
similarity index 82%
rename from acra/src/main/java/org/acra/http/DefaultHttpRequest.java
rename to acra-http/src/main/java/org/acra/http/DefaultHttpRequest.java
index 2e1a4052..8225983d 100644
--- a/acra/src/main/java/org/acra/http/DefaultHttpRequest.java
+++ b/acra-http/src/main/java/org/acra/http/DefaultHttpRequest.java
@@ -20,7 +20,7 @@
 import android.support.annotation.Nullable;
 
 import org.acra.ACRAConstants;
-import org.acra.config.ACRAConfiguration;
+import org.acra.config.CoreConfiguration;
 import org.acra.sender.HttpSender;
 
 import java.io.IOException;
@@ -32,22 +32,23 @@
  */
 
 public class DefaultHttpRequest extends BaseHttpRequest<String> {
-    @NonNull
-    private final HttpSender.Type type;
+    private final String contentType;
 
-    public DefaultHttpRequest(@NonNull ACRAConfiguration config, @NonNull Context context, @NonNull HttpSender.Method method, @NonNull HttpSender.Type type,
+    public DefaultHttpRequest(@NonNull CoreConfiguration config, @NonNull Context context, @NonNull HttpSender.Method method, @NonNull String contentType,
                               @Nullable String login, @Nullable String password, int connectionTimeOut, int socketTimeOut, @Nullable Map<String, String> headers) {
         super(config, context, method, login, password, connectionTimeOut, socketTimeOut, headers);
-        this.type = type;
+        this.contentType = contentType;
     }
 
+    @NonNull
     @Override
     protected String getContentType(@NonNull Context context, @NonNull String s) {
-        return type.getContentType();
+        return contentType;
     }
 
+    @NonNull
     @Override
-    protected byte[] asBytes(String content) throws IOException {
+    protected byte[] asBytes(@NonNull String content) throws IOException {
         return content.getBytes(ACRAConstants.UTF8);
     }
 }
diff --git a/acra/src/main/java/org/acra/http/HttpRequest.java b/acra-http/src/main/java/org/acra/http/HttpRequest.java
similarity index 96%
rename from acra/src/main/java/org/acra/http/HttpRequest.java
rename to acra-http/src/main/java/org/acra/http/HttpRequest.java
index 79e6ed16..49f6ca22 100644
--- a/acra/src/main/java/org/acra/http/HttpRequest.java
+++ b/acra-http/src/main/java/org/acra/http/HttpRequest.java
@@ -24,6 +24,7 @@
  * @author F43nd1r
  * @since 03.03.2017
  */
+@SuppressWarnings("WeakerAccess")
 public interface HttpRequest<T> {
     void send(@NonNull URL url, @NonNull T content) throws IOException;
 }
diff --git a/acra/src/main/java/org/acra/http/MultipartHttpRequest.java b/acra-http/src/main/java/org/acra/http/MultipartHttpRequest.java
similarity index 76%
rename from acra/src/main/java/org/acra/http/MultipartHttpRequest.java
rename to acra-http/src/main/java/org/acra/http/MultipartHttpRequest.java
index 2457725c..d4b7b327 100644
--- a/acra/src/main/java/org/acra/http/MultipartHttpRequest.java
+++ b/acra-http/src/main/java/org/acra/http/MultipartHttpRequest.java
@@ -23,8 +23,9 @@
 import android.util.Pair;
 
 import org.acra.ACRAConstants;
-import org.acra.config.ACRAConfiguration;
+import org.acra.config.CoreConfiguration;
 import org.acra.sender.HttpSender;
+import org.acra.util.UriUtils;
 
 import java.io.ByteArrayOutputStream;
 import java.io.IOException;
@@ -46,37 +47,38 @@
     private static final String BOUNDARY_FIX = "--";
     private static final String NEW_LINE = "\r\n";
     private static final String CONTENT_TYPE = "Content-Type: ";
-    @NonNull
     private final Context context;
-    @NonNull
-    private final HttpSender.Type type;
+    private final String contentType;
 
-    public MultipartHttpRequest(@NonNull ACRAConfiguration config, @NonNull Context context, @NonNull HttpSender.Type type, @Nullable String login, @Nullable String password,
+    public MultipartHttpRequest(@NonNull CoreConfiguration config, @NonNull Context context, @NonNull String contentType, @Nullable String login, @Nullable String password,
                                 int connectionTimeOut, int socketTimeOut, @Nullable Map<String, String> headers) {
         super(config, context, HttpSender.Method.POST, login, password, connectionTimeOut, socketTimeOut, headers);
         this.context = context;
-        this.type = type;
+        this.contentType = contentType;
     }
 
+    @NonNull
     @Override
     protected String getContentType(@NonNull Context context, @NonNull Pair<String, List<Uri>> stringListPair) {
         return "multipart/mixed; boundary=" + BOUNDARY;
     }
 
+    @NonNull
     @Override
-    protected byte[] asBytes(Pair<String, List<Uri>> content) throws IOException {
+    protected byte[] asBytes(@NonNull Pair<String, List<Uri>> content) throws IOException {
         final ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
         final Writer writer = new OutputStreamWriter(outputStream, ACRAConstants.UTF8);
+        //noinspection TryFinallyCanBeTryWithResources we do not target api 19
         try {
             writer.append(NEW_LINE).append(BOUNDARY_FIX).append(BOUNDARY).append(NEW_LINE);
-            writer.append(CONTENT_TYPE).append(type.getContentType()).append(NEW_LINE).append(NEW_LINE);
+            writer.append(CONTENT_TYPE).append(contentType).append(NEW_LINE).append(NEW_LINE);
             writer.append(content.first);
             for (Uri uri : content.second) {
                 writer.append(NEW_LINE).append(BOUNDARY_FIX).append(BOUNDARY).append(NEW_LINE);
-                writer.append("Content-Disposition: attachment; filename=\"").append(HttpUtils.getFileNameFromUri(context, uri)).append('"').append(NEW_LINE);
-                writer.append(CONTENT_TYPE).append(HttpUtils.getMimeType(context, uri)).append(NEW_LINE).append(NEW_LINE);
+                writer.append("Content-Disposition: attachment; filename=\"").append(UriUtils.getFileNameFromUri(context, uri)).append('"').append(NEW_LINE);
+                writer.append(CONTENT_TYPE).append(UriUtils.getMimeType(context, uri)).append(NEW_LINE).append(NEW_LINE);
                 writer.flush();
-                outputStream.write(HttpUtils.uriToByteArray(context, uri));
+                outputStream.write(UriUtils.uriToByteArray(context, uri));
             }
             writer.append(NEW_LINE).append(BOUNDARY_FIX).append(BOUNDARY).append(BOUNDARY_FIX).append(NEW_LINE);
             writer.flush();
diff --git a/acra/src/main/java/org/acra/security/AssetKeyStoreFactory.java b/acra-http/src/main/java/org/acra/security/AssetKeyStoreFactory.java
similarity index 100%
rename from acra/src/main/java/org/acra/security/AssetKeyStoreFactory.java
rename to acra-http/src/main/java/org/acra/security/AssetKeyStoreFactory.java
diff --git a/acra/src/main/java/org/acra/security/BaseKeyStoreFactory.java b/acra-http/src/main/java/org/acra/security/BaseKeyStoreFactory.java
similarity index 98%
rename from acra/src/main/java/org/acra/security/BaseKeyStoreFactory.java
rename to acra-http/src/main/java/org/acra/security/BaseKeyStoreFactory.java
index b51c9821..fa717f66 100644
--- a/acra/src/main/java/org/acra/security/BaseKeyStoreFactory.java
+++ b/acra-http/src/main/java/org/acra/security/BaseKeyStoreFactory.java
@@ -67,16 +67,19 @@ public BaseKeyStoreFactory(String certificateType) {
         this.certificateType = certificateType;
     }
 
+    @Nullable
     protected abstract InputStream getInputStream(@NonNull Context context);
 
     protected String getKeyStoreType() {
         return KeyStore.getDefaultType();
     }
 
+    @NonNull
     protected Type getStreamType() {
         return Type.CERTIFICATE;
     }
 
+    @Nullable
     protected char[] getPassword() {
         return null;
     }
diff --git a/acra/src/main/java/org/acra/security/FileKeyStoreFactory.java b/acra-http/src/main/java/org/acra/security/FileKeyStoreFactory.java
similarity index 100%
rename from acra/src/main/java/org/acra/security/FileKeyStoreFactory.java
rename to acra-http/src/main/java/org/acra/security/FileKeyStoreFactory.java
diff --git a/acra/src/main/java/org/acra/security/KeyStoreFactory.java b/acra-http/src/main/java/org/acra/security/KeyStoreFactory.java
similarity index 100%
rename from acra/src/main/java/org/acra/security/KeyStoreFactory.java
rename to acra-http/src/main/java/org/acra/security/KeyStoreFactory.java
diff --git a/acra/src/main/java/org/acra/security/KeyStoreHelper.java b/acra-http/src/main/java/org/acra/security/KeyStoreHelper.java
similarity index 76%
rename from acra/src/main/java/org/acra/security/KeyStoreHelper.java
rename to acra-http/src/main/java/org/acra/security/KeyStoreHelper.java
index ace808b3..b2eeceb8 100644
--- a/acra/src/main/java/org/acra/security/KeyStoreHelper.java
+++ b/acra-http/src/main/java/org/acra/security/KeyStoreHelper.java
@@ -20,7 +20,9 @@
 import android.support.annotation.Nullable;
 
 import org.acra.ACRAConstants;
-import org.acra.config.ACRAConfiguration;
+import org.acra.config.ConfigUtils;
+import org.acra.config.CoreConfiguration;
+import org.acra.config.HttpSenderConfiguration;
 import org.acra.util.InstanceCreator;
 
 import java.security.KeyStore;
@@ -44,14 +46,15 @@ private KeyStoreHelper() {
      * @return the keystore, or null if none provided / failure
      */
     @Nullable
-    public static KeyStore getKeyStore(@NonNull Context context, @NonNull ACRAConfiguration config) {
+    public static KeyStore getKeyStore(@NonNull Context context, @NonNull CoreConfiguration config) {
+        final HttpSenderConfiguration senderConfiguration = ConfigUtils.getPluginConfiguration(config, HttpSenderConfiguration.class);
         final InstanceCreator instanceCreator = new InstanceCreator();
-        KeyStore keyStore = instanceCreator.create(config.keyStoreFactoryClass(), new NoKeyStoreFactory()).create(context);
+        KeyStore keyStore = instanceCreator.create(senderConfiguration.keyStoreFactoryClass(), NoKeyStoreFactory::new).create(context);
         if(keyStore == null) {
             //either users factory did not create a keystore, or the configuration is default {@link NoKeyStoreFactory}
-            final int certificateRes = config.resCertificate();
-            final String certificatePath = config.certificatePath();
-            final String certificateType = config.certificateType();
+            final int certificateRes = senderConfiguration.resCertificate();
+            final String certificatePath = senderConfiguration.certificatePath();
+            final String certificateType = senderConfiguration.certificateType();
             if(certificateRes != ACRAConstants.DEFAULT_RES_VALUE){
                 keyStore = new ResourceKeyStoreFactory(certificateType, certificateRes).create(context);
             }else if(!certificatePath.equals(ACRAConstants.DEFAULT_STRING_VALUE)){
diff --git a/acra/src/main/java/org/acra/security/NoKeyStoreFactory.java b/acra-http/src/main/java/org/acra/security/NoKeyStoreFactory.java
similarity index 100%
rename from acra/src/main/java/org/acra/security/NoKeyStoreFactory.java
rename to acra-http/src/main/java/org/acra/security/NoKeyStoreFactory.java
diff --git a/acra/src/main/java/org/acra/security/ResourceKeyStoreFactory.java b/acra-http/src/main/java/org/acra/security/ResourceKeyStoreFactory.java
similarity index 100%
rename from acra/src/main/java/org/acra/security/ResourceKeyStoreFactory.java
rename to acra-http/src/main/java/org/acra/security/ResourceKeyStoreFactory.java
diff --git a/acra-http/src/main/java/org/acra/sender/HttpSender.java b/acra-http/src/main/java/org/acra/sender/HttpSender.java
new file mode 100644
index 00000000..335e671b
--- /dev/null
+++ b/acra-http/src/main/java/org/acra/sender/HttpSender.java
@@ -0,0 +1,226 @@
+/*
+ * Copyright (c) 2017
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.acra.sender;
+
+import android.content.Context;
+import android.net.Uri;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.util.Pair;
+
+import org.acra.ACRA;
+import org.acra.ACRAConstants;
+import org.acra.ReportField;
+import org.acra.attachment.DefaultAttachmentProvider;
+import org.acra.config.ConfigUtils;
+import org.acra.config.CoreConfiguration;
+import org.acra.config.HttpSenderConfiguration;
+import org.acra.data.CrashReportData;
+import org.acra.data.StringFormat;
+import org.acra.http.BinaryHttpRequest;
+import org.acra.http.DefaultHttpRequest;
+import org.acra.http.MultipartHttpRequest;
+import org.acra.util.InstanceCreator;
+import org.acra.util.UriUtils;
+
+import java.io.IOException;
+import java.net.MalformedURLException;
+import java.net.URL;
+import java.util.List;
+import java.util.Map;
+
+import static org.acra.ACRA.LOG_TAG;
+
+/**
+ * The {@link ReportSender} used by ACRA for http sending
+ *
+ * @author F43nd1r &amp; Various
+ */
+public class HttpSender implements ReportSender {
+
+    /**
+     * Available HTTP methods to send data. Only POST and PUT are currently
+     * supported.
+     */
+    public enum Method {
+        POST {
+            @NonNull
+            @Override
+            URL createURL(@NonNull String baseUrl, @NonNull CrashReportData report) throws MalformedURLException {
+                return new URL(baseUrl);
+            }
+        },
+        PUT {
+            @NonNull
+            @Override
+            URL createURL(@NonNull String baseUrl, @NonNull CrashReportData report) throws MalformedURLException {
+                return new URL(baseUrl + '/' + report.getString(ReportField.REPORT_ID));
+            }
+        };
+
+        @NonNull
+        abstract URL createURL(@NonNull String baseUrl, @NonNull CrashReportData report) throws MalformedURLException;
+    }
+
+    private final CoreConfiguration config;
+    private final HttpSenderConfiguration httpConfig;
+    private final Uri mFormUri;
+    private final Method mMethod;
+    private final StringFormat mType;
+    private String mUsername;
+    private String mPassword;
+
+    /**
+     * <p>
+     * Create a new HttpSender instance with its destination taken from the supplied config.
+     * </p>
+     *
+     * @param config AcraConfig declaring the
+     * @param method HTTP {@link Method} to be used to send data. Currently only {@link Method#POST} and {@link Method#PUT} are available.
+     *               If {@link Method#PUT} is used, the {@link ReportField#REPORT_ID} is appended to the formUri to be compliant with RESTful APIs.
+     * @param type   {@link StringFormat} of encoding used to send the report body.
+     *               {@link StringFormat#KEY_VALUE_LIST} is a simple Key/Value pairs list as defined by the application/x-www-form-urlencoded mime type.
+     */
+    public HttpSender(@NonNull CoreConfiguration config, @Nullable Method method, @Nullable StringFormat type) {
+        this(config, method, type, null);
+    }
+
+    /**
+     * <p>
+     * Create a new HttpPostSender instance with a fixed destination provided as
+     * a parameter. Configuration changes to the formUri are not applied.
+     * </p>
+     *
+     * @param config  AcraConfig declaring the
+     * @param method  HTTP {@link Method} to be used to send data. Currently only {@link Method#POST} and {@link Method#PUT} are available.
+     *                If {@link Method#PUT} is used, the {@link ReportField#REPORT_ID} is appended to the formUri to be compliant with RESTful APIs.
+     * @param type    {@link StringFormat} of encoding used to send the report body.
+     *                {@link StringFormat#KEY_VALUE_LIST} is a simple Key/Value pairs list as defined by the application/x-www-form-urlencoded mime type.
+     * @param formUri The URL of your server-side crash report collection script.
+     */
+    public HttpSender(@NonNull CoreConfiguration config, @Nullable Method method, @Nullable StringFormat type, @Nullable String formUri) {
+        this.config = config;
+        this.httpConfig = ConfigUtils.getPluginConfiguration(config, HttpSenderConfiguration.class);
+        mMethod = (method == null) ? httpConfig.httpMethod() : method;
+        mFormUri = Uri.parse((formUri == null) ? httpConfig.uri() : formUri);
+        mType = (type == null) ? config.reportFormat() : type;
+        mUsername = null;
+        mPassword = null;
+    }
+
+    /**
+     * <p>
+     * Set credentials for this HttpSender that override (if present) the ones set globally.
+     * </p>
+     *
+     * @param username The username to set for HTTP Basic Auth.
+     * @param password The password to set for HTTP Basic Auth.
+     */
+    @SuppressWarnings("unused")
+    public void setBasicAuth(@Nullable String username, @Nullable String password) {
+        mUsername = username;
+        mPassword = password;
+    }
+
+    @Override
+    public void send(@NonNull Context context, @NonNull CrashReportData report) throws ReportSenderException {
+        try {
+            final String baseUrl = mFormUri.toString();
+            if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Connect to " + baseUrl);
+
+            final String login = mUsername != null ? mUsername : isNull(httpConfig.basicAuthLogin()) ? null : httpConfig.basicAuthLogin();
+            final String password = mPassword != null ? mPassword : isNull(httpConfig.basicAuthPassword()) ? null : httpConfig.basicAuthPassword();
+
+            final InstanceCreator instanceCreator = new InstanceCreator();
+            final List<Uri> uris = instanceCreator.create(config.attachmentUriProvider(), DefaultAttachmentProvider::new).getAttachments(context, config);
+
+            // Generate report body depending on requested type
+            final String reportAsString = convertToString(report, mType);
+
+            // Adjust URL depending on method
+            final URL reportUrl = mMethod.createURL(baseUrl, report);
+
+            sendHttpRequests(config, context, mMethod, mType.getMatchingHttpContentType(), login, password, httpConfig.connectionTimeout(),
+                    httpConfig.socketTimeout(), httpConfig.httpHeaders(), reportAsString, reportUrl, uris);
+
+        } catch (@NonNull Exception e) {
+            throw new ReportSenderException("Error while sending " + config.reportFormat()
+                    + " report via Http " + mMethod.name(), e);
+        }
+    }
+
+    @SuppressWarnings("WeakerAccess")
+    protected void sendHttpRequests(@NonNull CoreConfiguration configuration, @NonNull Context context, @NonNull Method method, @NonNull String contentType,
+                                    @Nullable String login, @Nullable String password, int connectionTimeOut, int socketTimeOut, @Nullable Map<String, String> headers,
+                                    @NonNull String content, @NonNull URL url, @NonNull List<Uri> attachments) throws IOException {
+        switch (method) {
+            case POST:
+                if (attachments.isEmpty()) {
+                    sendWithoutAttachments(configuration, context, method, contentType, login, password, connectionTimeOut, socketTimeOut, headers, content, url);
+                } else {
+                    postMultipart(configuration, context, contentType, login, password, connectionTimeOut, socketTimeOut, headers, content, url, attachments);
+                }
+                break;
+            case PUT:
+                sendWithoutAttachments(configuration, context, method, contentType, login, password, connectionTimeOut, socketTimeOut, headers, content, url);
+                for (Uri uri : attachments) {
+                    putAttachment(configuration, context, login, password, connectionTimeOut, socketTimeOut, headers, url, uri);
+                }
+                break;
+        }
+    }
+
+    @SuppressWarnings("WeakerAccess")
+    protected void sendWithoutAttachments(@NonNull CoreConfiguration configuration, @NonNull Context context, @NonNull Method method, @NonNull String contentType,
+                                          @Nullable String login, @Nullable String password, int connectionTimeOut, int socketTimeOut, @Nullable Map<String, String> headers,
+                                          @NonNull String content, @NonNull URL url) throws IOException {
+        new DefaultHttpRequest(configuration, context, method, contentType, login, password, connectionTimeOut, socketTimeOut, headers).send(url, content);
+    }
+
+    @SuppressWarnings("WeakerAccess")
+    protected void postMultipart(@NonNull CoreConfiguration configuration, @NonNull Context context, @NonNull String contentType,
+                                 @Nullable String login, @Nullable String password, int connectionTimeOut, int socketTimeOut, @Nullable Map<String, String> headers,
+                                 @NonNull String content, @NonNull URL url, @NonNull List<Uri> attachments) throws IOException {
+        new MultipartHttpRequest(configuration, context, contentType, login, password, connectionTimeOut, socketTimeOut, headers).send(url, Pair.create(content, attachments));
+    }
+
+    @SuppressWarnings("WeakerAccess")
+    protected void putAttachment(@NonNull CoreConfiguration configuration, @NonNull Context context,
+                                 @Nullable String login, @Nullable String password, int connectionTimeOut, int socketTimeOut, @Nullable Map<String, String> headers,
+                                 @NonNull URL url, @NonNull Uri attachment) throws IOException {
+        final URL attachmentUrl = new URL(url.toString() + "-" + UriUtils.getFileNameFromUri(context, attachment));
+        new BinaryHttpRequest(configuration, context, login, password, connectionTimeOut, socketTimeOut, headers).send(attachmentUrl, attachment);
+    }
+
+    /**
+     * Convert a report to string
+     *
+     * @param report the report to convert
+     * @param format the format to convert to
+     * @return a string representation of the report
+     * @throws Exception if conversion failed
+     */
+    @NonNull
+    @SuppressWarnings("WeakerAccess")
+    protected String convertToString(CrashReportData report, @NonNull StringFormat format) throws Exception {
+        return format.toFormattedString(report, config.reportContent(), "&", "\n", true);
+    }
+
+    private boolean isNull(@Nullable String aString) {
+        return aString == null || ACRAConstants.NULL_VALUE.equals(aString);
+    }
+
+}
\ No newline at end of file
diff --git a/acra-http/src/main/java/org/acra/sender/HttpSenderFactory.java b/acra-http/src/main/java/org/acra/sender/HttpSenderFactory.java
new file mode 100644
index 00000000..a49da34c
--- /dev/null
+++ b/acra-http/src/main/java/org/acra/sender/HttpSenderFactory.java
@@ -0,0 +1,41 @@
+/*
+ * Copyright (c) 2017
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.sender;
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+
+import com.google.auto.service.AutoService;
+
+import org.acra.config.CoreConfiguration;
+import org.acra.config.HttpSenderConfiguration;
+
+/**
+ * Constructs a {@link HttpSender} with no report field mappings.
+ */
+@AutoService(ReportSenderFactory.class)
+public final class HttpSenderFactory extends BaseReportSenderFactory {
+    public HttpSenderFactory() {
+        super(HttpSenderConfiguration.class);
+    }
+
+    @NonNull
+    @Override
+    public ReportSender create(@NonNull Context context, @NonNull CoreConfiguration config) {
+        return new HttpSender(config, null, null);
+    }
+}
diff --git a/acra/src/main/java/org/acra/http/HttpUtils.java b/acra-http/src/main/java/org/acra/util/UriUtils.java
similarity index 57%
rename from acra/src/main/java/org/acra/http/HttpUtils.java
rename to acra-http/src/main/java/org/acra/util/UriUtils.java
index 29cc9697..9d2b20b8 100644
--- a/acra/src/main/java/org/acra/http/HttpUtils.java
+++ b/acra-http/src/main/java/org/acra/util/UriUtils.java
@@ -13,7 +13,8 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package org.acra.http;
+
+package org.acra.util;
 
 import android.content.ContentResolver;
 import android.content.Context;
@@ -21,29 +22,26 @@
 import android.net.Uri;
 import android.provider.OpenableColumns;
 import android.support.annotation.NonNull;
-import android.webkit.MimeTypeMap;
 
 import org.acra.ACRAConstants;
+import org.acra.attachment.AcraContentProvider;
 
 import java.io.ByteArrayOutputStream;
 import java.io.FileNotFoundException;
 import java.io.IOException;
 import java.io.InputStream;
-import java.io.UnsupportedEncodingException;
-import java.net.URLEncoder;
-import java.util.Map;
 
 /**
  * @author F43nd1r
  * @since 11.03.2017
  */
 
-public final class HttpUtils {
-    private HttpUtils() {
+public final class UriUtils {
+    private UriUtils() {
     }
 
     @NonNull
-    public static byte[] uriToByteArray(@NonNull Context context, Uri uri) throws IOException {
+    public static byte[] uriToByteArray(@NonNull Context context, @NonNull Uri uri) throws IOException {
         final InputStream inputStream = context.getContentResolver().openInputStream(uri);
         if (inputStream == null) {
             throw new FileNotFoundException("Could not open " + uri.toString());
@@ -57,32 +55,8 @@ private HttpUtils() {
         return outputStream.toByteArray();
     }
 
-    /**
-     * Converts a Map of parameters into a URL encoded Sting.
-     *
-     * @param parameters Map of parameters to convert.
-     * @return URL encoded String representing the parameters.
-     * @throws UnsupportedEncodingException if one of the parameters couldn't be converted to UTF-8.
-     */
     @NonNull
-    public static String getParamsAsFormString(@NonNull Map<?, ?> parameters) throws UnsupportedEncodingException {
-
-        final StringBuilder dataBfr = new StringBuilder();
-        for (final Map.Entry<?, ?> entry : parameters.entrySet()) {
-            if (dataBfr.length() != 0) {
-                dataBfr.append('&');
-            }
-            final Object preliminaryValue = entry.getValue();
-            final Object value = (preliminaryValue == null) ? "" : preliminaryValue;
-            dataBfr.append(URLEncoder.encode(entry.getKey().toString(), ACRAConstants.UTF8));
-            dataBfr.append('=');
-            dataBfr.append(URLEncoder.encode(value.toString(), ACRAConstants.UTF8));
-        }
-
-        return dataBfr.toString();
-    }
-
-    public static String getFileNameFromUri(Context context, Uri uri) {
+    public static String getFileNameFromUri(@NonNull Context context, @NonNull Uri uri) {
         String result = null;
         if (uri.getScheme().equals(ContentResolver.SCHEME_CONTENT)) {
             final Cursor cursor = context.getContentResolver().query(uri, null, null, null, null);
@@ -106,25 +80,14 @@ public static String getFileNameFromUri(Context context, Uri uri) {
         return result;
     }
 
-    public static String getMimeType(Context context, Uri uri) {
+    @NonNull
+    public static String getMimeType(@NonNull Context context, @NonNull Uri uri) {
         if (uri.getScheme().equals(ContentResolver.SCHEME_CONTENT)) {
             final ContentResolver contentResolver = context.getContentResolver();
-            return contentResolver.getType(uri);
+            String type = contentResolver.getType(uri);
+            if (type != null) return type;
         }
-        return guessMimeType(uri);
+        return AcraContentProvider.guessMimeType(uri);
     }
 
-    public static String guessMimeType(Uri uri){
-        String type = null;
-        final String fileExtension = MimeTypeMap.getFileExtensionFromUrl(uri
-                .toString());
-        if (fileExtension != null) {
-            type = MimeTypeMap.getSingleton().getMimeTypeFromExtension(
-                    fileExtension.toLowerCase());
-        }
-        if (type == null) {
-            type = "application/octet-stream";
-        }
-        return type;
-    }
 }
diff --git a/acra-javacore/.gitignore b/acra-javacore/.gitignore
new file mode 100644
index 00000000..796b96d1
--- /dev/null
+++ b/acra-javacore/.gitignore
@@ -0,0 +1 @@
+/build
diff --git a/acra-javacore/build.gradle b/acra-javacore/build.gradle
new file mode 100644
index 00000000..d7658d9f
--- /dev/null
+++ b/acra-javacore/build.gradle
@@ -0,0 +1,26 @@
+/*
+ * Copyright (c) 2017
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+apply plugin: 'java'
+apply plugin: 'maven-publish'
+apply plugin: 'com.jfrog.bintray'
+
+dependencies {
+    compile "com.android.support:support-annotations:$supportVersion"
+}
+
+sourceCompatibility = "1.7"
+targetCompatibility = "1.7"
diff --git a/acra/src/main/java/org/acra/ReportField.java b/acra-javacore/src/main/java/org/acra/ReportField.java
similarity index 50%
rename from acra/src/main/java/org/acra/ReportField.java
rename to acra-javacore/src/main/java/org/acra/ReportField.java
index cb9b1db6..2bb94b0d 100644
--- a/acra/src/main/java/org/acra/ReportField.java
+++ b/acra-javacore/src/main/java/org/acra/ReportField.java
@@ -1,23 +1,21 @@
 /*
- *  Copyright 2010 Kevin Gaudin
+ * Copyright (c) 2017
  *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
  */
-package org.acra;
 
-import android.content.res.Configuration;
+package org.acra;
 
-import org.acra.annotation.ReportsCrashes;
 
 /**
  * Specifies all the different fields available in a crash report.
@@ -33,61 +31,38 @@
     /**
      * Application version code. This is the incremental integer version code
      * used to differentiate versions on the android market.
-     * 
-     * @see android.content.pm.PackageInfo#versionCode
      */
     APP_VERSION_CODE,
     /**
      * Application version name.
-     * 
-     * @see android.content.pm.PackageInfo#versionName
      */
     APP_VERSION_NAME,
     /**
      * Application package name.
-     * 
-     * @see android.content.Context#getPackageName()
      */
     PACKAGE_NAME,
     /**
      * Base path of the application's private file folder.
-     * 
-     * @see android.content.Context#getFilesDir()
      */
     FILE_PATH,
     /**
      * Device model name.
-     * 
-     * @see android.os.Build#MODEL
      */
     PHONE_MODEL,
     /**
      * Device android version name.
-     * 
-     * @see android.os.Build.VERSION#RELEASE
      */
     ANDROID_VERSION,
     /**
      * Android Build details.
-     * 
-     * @see android.os.Build
      */
-    BUILD {
-        @Override
-        public boolean containsKeyValuePairs() {
-            return true;
-        }
-    },
+    BUILD,
     /**
      * Device brand (manufacturer or carrier).
-     * 
-     * @see android.os.Build#BRAND
      */
     BRAND,
     /**
      * Device overall product code.
-     * 
-     * @see android.os.Build#PRODUCT
      */
     PRODUCT,
     /**
@@ -102,22 +77,12 @@ public boolean containsKeyValuePairs() {
      * Contains key = value pairs defined by the application developer during
      * the application build.
      */
-    BUILD_CONFIG {
-        @Override
-        public boolean containsKeyValuePairs() {
-            return true;
-        }
-    },
+    BUILD_CONFIG,
     /**
      * Contains key = value pairs defined by the application developer during
      * the application execution.
      */
-    CUSTOM_DATA {
-        @Override
-        public boolean containsKeyValuePairs() {
-            return true;
-        }
-    },
+    CUSTOM_DATA,
     /**
      * The Holy Stack Trace.
      */
@@ -129,41 +94,20 @@ public boolean containsKeyValuePairs() {
      */
     STACK_TRACE_HASH,
     /**
-     * {@link Configuration} fields state on the application start.
-     * 
-     * @see Configuration
+     * android.content.res.Configuration fields state on the application start.
+     *
      */
-    INITIAL_CONFIGURATION {
-        @Override
-        public boolean containsKeyValuePairs() {
-            return true;
-        }
-    },
+    INITIAL_CONFIGURATION,
     /**
-     * {@link Configuration} fields state on the application crash.
-     * 
-     * @see Configuration
+     * android.content.res.Configuration fields state on the application crash.
      */
-    CRASH_CONFIGURATION {
-        @Override
-        public boolean containsKeyValuePairs() {
-            return true;
-        }
-    },
+    CRASH_CONFIGURATION,
     /**
      * Device display specifications.
-     * 
-     * @see android.view.WindowManager#getDefaultDisplay()
      */
-    DISPLAY {
-        @Override
-        public boolean containsKeyValuePairs() {
-            return true;
-        }
-    },
+    DISPLAY,
     /**
-     * Comment added by the user in the CrashReportDialog displayed in
-     * {@link ReportingInteractionMode#NOTIFICATION} mode.
+     * Comment added by the user in the CrashReportDialog.
      */
     USER_COMMENT,
     /**
@@ -209,69 +153,35 @@ public boolean containsKeyValuePairs() {
      */
     INSTALLATION_ID,
     /**
-     * User email address. Can be provided by the user in the
-     * {@link ACRA#PREF_USER_EMAIL_ADDRESS} SharedPreference.
+     * User email address. Can be provided by the user in SharedPreferences.
      */
     USER_EMAIL,
     /**
      * Features declared as available on this device by the system.
      */
-    DEVICE_FEATURES {
-        @Override
-        public boolean containsKeyValuePairs() {
-            return true;
-        }
-    },
+    DEVICE_FEATURES,
     /**
      * External storage state and standard directories.
      */
-    ENVIRONMENT {
-        @Override
-        public boolean containsKeyValuePairs() {
-            return true;
-        }
-    },
+    ENVIRONMENT,
     /**
      * System settings.
      */
-    SETTINGS_SYSTEM {
-        @Override
-        public boolean containsKeyValuePairs() {
-            return true;
-        }
-    },
+    SETTINGS_SYSTEM,
     /**
      * Secure settings (applications can't modify them).
      */
-    SETTINGS_SECURE {
-        @Override
-        public boolean containsKeyValuePairs() {
-            return true;
-        }
-    },
+    SETTINGS_SECURE,
     /**
      * Global settings, introduced in Android 4.2 (API level 17) to centralize settings for multiple users.
      */
-    SETTINGS_GLOBAL {
-        @Override
-        public boolean containsKeyValuePairs() {
-            return true;
-        }
-    },
+    SETTINGS_GLOBAL,
     /**
      * SharedPreferences contents
      */
-    SHARED_PREFERENCES {
-        @Override
-        public boolean containsKeyValuePairs() {
-            return true;
-        }
-    },
+    SHARED_PREFERENCES,
     /**
-     * Content of your own application log file. To be configured with
-     * {@link ReportsCrashes#applicationLogFile()} to define the path/name of
-     * the log file and {@link ReportsCrashes#applicationLogFileLines()} to set
-     * the number of lines you want to be retrieved.
+     * Content of your own application log file.
      */
     APPLICATION_LOG,
     /**
@@ -287,16 +197,6 @@ public boolean containsKeyValuePairs() {
     /**
      * Retrieves the user IP address(es).
      */
-    USER_IP;
+    USER_IP
 
-    /**
-     * Whether this field is a collection of key/value pairs.
-     * 
-     * @return true if the field contains a string with a key/value pair on each
-     *         line, key and value separated by an equal sign
-     * 
-     */
-    public boolean containsKeyValuePairs() {
-        return false;
-    }
 }
diff --git a/acra/src/main/java/org/acra/collections/BoundedLinkedList.java b/acra-javacore/src/main/java/org/acra/collections/BoundedLinkedList.java
similarity index 88%
rename from acra/src/main/java/org/acra/collections/BoundedLinkedList.java
rename to acra-javacore/src/main/java/org/acra/collections/BoundedLinkedList.java
index 187ce428..05465320 100644
--- a/acra/src/main/java/org/acra/collections/BoundedLinkedList.java
+++ b/acra-javacore/src/main/java/org/acra/collections/BoundedLinkedList.java
@@ -17,13 +17,12 @@
 
 import android.support.annotation.NonNull;
 
+import java.util.ArrayList;
 import java.util.Collection;
 import java.util.LinkedList;
 
 /**
- * A {@link LinkedList} version with a maximum number of elements. When adding
- * elements to the end of the list, first elements in the list are discarded if
- * the maximum size is reached.
+ * A {@link LinkedList} version with a maximum number of elements. When adding elements to the end of the list, first elements in the list are discarded if the maximum size is reached.
  *
  * @author Kevin Gaudin
  */
@@ -71,14 +70,9 @@ public void add(int location, E object) {
     public boolean addAll(@NonNull Collection<? extends E> collection) {
         final int size = collection.size();
         if (size > maxSize) {
-            final LinkedList<? extends E> list = new LinkedList<E>(collection);
-            for (int i = 0; i < size - maxSize; i++) {
-                list.removeFirst();
-            }
-            collection = list;
+            collection = new ArrayList<>(collection).subList(size - maxSize, size);
         }
-        final int totalNeededSize = size() + collection.size();
-        final int overhead = totalNeededSize - maxSize;
+        final int overhead = size() + collection.size() - maxSize;
         if (overhead > 0) {
             removeRange(0, overhead);
         }
diff --git a/acra/src/main/java/org/acra/collections/ImmutableList.java b/acra-javacore/src/main/java/org/acra/collections/ImmutableList.java
similarity index 91%
rename from acra/src/main/java/org/acra/collections/ImmutableList.java
rename to acra-javacore/src/main/java/org/acra/collections/ImmutableList.java
index 61324f93..96e1311a 100644
--- a/acra/src/main/java/org/acra/collections/ImmutableList.java
+++ b/acra-javacore/src/main/java/org/acra/collections/ImmutableList.java
@@ -35,12 +35,13 @@
 
     private final List<E> mList;
 
+    @SafeVarargs
     public ImmutableList(E... elements) {
         this(Arrays.asList(elements));
     }
 
-    public ImmutableList(Collection<E> collection) {
-        this.mList = new ArrayList<E>(collection);
+    public ImmutableList(@NonNull Collection<E> collection) {
+        this.mList = new ArrayList<>(collection);
     }
 
     @Override
@@ -96,7 +97,7 @@ public boolean isEmpty() {
     @NonNull
     @Override
     public Iterator<E> iterator() {
-        return new UnmodifiableIteratorWrapper<E>(mList.iterator());
+        return new UnmodifiableIteratorWrapper<>(mList.iterator());
     }
 
     @Override
@@ -106,13 +107,13 @@ public int lastIndexOf(Object object) {
 
     @Override
     public ListIterator<E> listIterator() {
-        return new UnmodifiableListIteratorWrapper<E>(mList.listIterator());
+        return new UnmodifiableListIteratorWrapper<>(mList.listIterator());
     }
 
     @NonNull
     @Override
     public ListIterator<E> listIterator(int location) {
-        return new UnmodifiableListIteratorWrapper<E>(mList.listIterator(location));
+        return new UnmodifiableListIteratorWrapper<>(mList.listIterator(location));
     }
 
     @Override
diff --git a/acra/src/main/java/org/acra/collections/ImmutableMap.java b/acra-javacore/src/main/java/org/acra/collections/ImmutableMap.java
similarity index 88%
rename from acra/src/main/java/org/acra/collections/ImmutableMap.java
rename to acra-javacore/src/main/java/org/acra/collections/ImmutableMap.java
index dd3a2bb2..a256bf99 100644
--- a/acra/src/main/java/org/acra/collections/ImmutableMap.java
+++ b/acra-javacore/src/main/java/org/acra/collections/ImmutableMap.java
@@ -33,8 +33,8 @@
 
     private final Map<K, V> mMap;
 
-    public ImmutableMap(Map<K, V> map) {
-        this.mMap = new HashMap<K, V>(map);
+    public ImmutableMap(@NonNull Map<K, V> map) {
+        this.mMap = new HashMap<>(map);
     }
 
     @Override
@@ -56,9 +56,9 @@ public boolean containsValue(Object value) {
     @Override
     public Set<Entry<K, V>> entrySet() {
         final Set<Entry<K, V>> original = mMap.entrySet();
-        final ImmutableSet.Builder<Entry<K, V>> builder = new ImmutableSet.Builder<Entry<K, V>>();
+        final ImmutableSet.Builder<Entry<K, V>> builder = new ImmutableSet.Builder<>();
         for (Entry<K, V> entry : original) {
-            builder.add(new ImmutableEntryWrapper<K, V>(entry));
+            builder.add(new ImmutableEntryWrapper<>(entry));
         }
         return builder.build();
     }
@@ -76,7 +76,7 @@ public boolean isEmpty() {
     @NonNull
     @Override
     public Set<K> keySet() {
-        return new ImmutableSet<K>(mMap.keySet());
+        return new ImmutableSet<>(mMap.keySet());
     }
 
     @Override
@@ -102,10 +102,10 @@ public int size() {
     @NonNull
     @Override
     public Collection<V> values() {
-        return new ImmutableList<V>(mMap.values());
+        return new ImmutableList<>(mMap.values());
     }
 
-    public static class ImmutableEntryWrapper<K, V> implements Map.Entry<K, V> {
+    private static class ImmutableEntryWrapper<K, V> implements Map.Entry<K, V> {
         private final Map.Entry<K, V> mEntry;
 
         ImmutableEntryWrapper(Entry<K, V> mEntry) {
@@ -122,6 +122,7 @@ public V getValue() {
             return mEntry.getValue();
         }
 
+        @NonNull
         @Override
         public V setValue(Object object) {
             throw new UnsupportedOperationException();
diff --git a/acra/src/main/java/org/acra/collections/ImmutableSet.java b/acra-javacore/src/main/java/org/acra/collections/ImmutableSet.java
similarity index 82%
rename from acra/src/main/java/org/acra/collections/ImmutableSet.java
rename to acra-javacore/src/main/java/org/acra/collections/ImmutableSet.java
index e2781a8e..6597bbe4 100644
--- a/acra/src/main/java/org/acra/collections/ImmutableSet.java
+++ b/acra-javacore/src/main/java/org/acra/collections/ImmutableSet.java
@@ -20,6 +20,7 @@
 import java.io.Serializable;
 import java.util.Arrays;
 import java.util.Collection;
+import java.util.Collections;
 import java.util.Iterator;
 import java.util.LinkedHashSet;
 import java.util.Set;
@@ -31,15 +32,27 @@
  * @since 4.9.0
  */
 public final class ImmutableSet<E> implements Set<E>, Serializable {
+    private static final ImmutableSet<Object> EMPTY = new ImmutableSet<>();
+
+    @NonNull
+    public static <T> ImmutableSet<T> empty() {
+        //noinspection unchecked
+        return (ImmutableSet<T>) EMPTY;
+    }
 
     private final Set<E> mSet;
 
+    private ImmutableSet(){
+        this.mSet = Collections.emptySet();
+    }
+
+    @SafeVarargs
     public ImmutableSet(E... elements) {
         this(Arrays.asList(elements));
     }
 
-    public ImmutableSet(Collection<E> collection) {
-        this.mSet = new LinkedHashSet<E>(collection);
+    public ImmutableSet(@NonNull Collection<E> collection) {
+        this.mSet = new LinkedHashSet<>(collection);
     }
 
     @Override
@@ -75,7 +88,7 @@ public boolean isEmpty() {
     @NonNull
     @Override
     public Iterator<E> iterator() {
-        return new UnmodifiableIteratorWrapper<E>(mSet.iterator());
+        return new UnmodifiableIteratorWrapper<>(mSet.iterator());
     }
 
     @Override
@@ -115,7 +128,7 @@ public int size() {
         private final Set<E> mSet;
 
         public Builder() {
-            mSet = new LinkedHashSet<E>();
+            mSet = new LinkedHashSet<>();
         }
 
         public void add(E element) {
@@ -123,7 +136,7 @@ public void add(E element) {
         }
 
         public ImmutableSet<E> build() {
-            return new ImmutableSet<E>(mSet);
+            return new ImmutableSet<>(mSet);
         }
     }
 
diff --git a/acra/src/main/java/org/acra/collections/UnmodifiableIteratorWrapper.java b/acra-javacore/src/main/java/org/acra/collections/UnmodifiableIteratorWrapper.java
similarity index 100%
rename from acra/src/main/java/org/acra/collections/UnmodifiableIteratorWrapper.java
rename to acra-javacore/src/main/java/org/acra/collections/UnmodifiableIteratorWrapper.java
diff --git a/acra/src/main/java/org/acra/collections/UnmodifiableListIteratorWrapper.java b/acra-javacore/src/main/java/org/acra/collections/UnmodifiableListIteratorWrapper.java
similarity index 100%
rename from acra/src/main/java/org/acra/collections/UnmodifiableListIteratorWrapper.java
rename to acra-javacore/src/main/java/org/acra/collections/UnmodifiableListIteratorWrapper.java
diff --git a/acra/src/main/java/org/acra/config/ACRAConfigurationException.java b/acra-javacore/src/main/java/org/acra/config/ACRAConfigurationException.java
similarity index 100%
rename from acra/src/main/java/org/acra/config/ACRAConfigurationException.java
rename to acra-javacore/src/main/java/org/acra/config/ACRAConfigurationException.java
diff --git a/acra-javacore/src/main/java/org/acra/config/ClassValidator.java b/acra-javacore/src/main/java/org/acra/config/ClassValidator.java
new file mode 100644
index 00000000..1e910028
--- /dev/null
+++ b/acra-javacore/src/main/java/org/acra/config/ClassValidator.java
@@ -0,0 +1,46 @@
+/*
+ * Copyright (c) 2017
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.config;
+
+import java.lang.reflect.Modifier;
+
+/**
+ * @author F43nd1r
+ * @since 07.06.2017
+ */
+
+public final class ClassValidator {
+    private ClassValidator() {
+    }
+
+    public static void check(Class<?>... classes) throws ACRAConfigurationException {
+        for (Class<?> clazz : classes) {
+            if (clazz.isInterface()) {
+                throw new ACRAConfigurationException("Expected class, but found interface " + clazz.getName() + ".");
+            } else if (Modifier.isAbstract(clazz.getModifiers())) {
+                throw new ACRAConfigurationException("Class " + clazz.getName() + " cannot be abstract.");
+            } else if (clazz.getEnclosingClass() != null && !Modifier.isStatic(clazz.getModifiers())) {
+                throw new ACRAConfigurationException("Class " + clazz.getName() + " has to be static.");
+            }
+            try {
+                clazz.getConstructor();
+            } catch (NoSuchMethodException e) {
+                throw new ACRAConfigurationException("Class " + clazz.getName() + " is missing a no-args Constructor.", e);
+            }
+        }
+    }
+}
diff --git a/acra/src/main/java/org/acra/model/Element.java b/acra-javacore/src/main/java/org/acra/config/Configuration.java
similarity index 68%
rename from acra/src/main/java/org/acra/model/Element.java
rename to acra-javacore/src/main/java/org/acra/config/Configuration.java
index 7e7e1ac0..d4b22b65 100644
--- a/acra/src/main/java/org/acra/model/Element.java
+++ b/acra-javacore/src/main/java/org/acra/config/Configuration.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016
+ * Copyright (c) 2017
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,18 +14,20 @@
  * limitations under the License.
  */
 
-package org.acra.model;
+package org.acra.config;
 
 /**
+ * A configuration object
+ *
  * @author F43nd1r
- * @since 12.10.2016
+ * @since 01.06.2017
  */
-public interface Element {
+
+public interface Configuration {
     /**
-     * @return this elements json value.
-     * This must be one of the valid json types: bull, boolean, number, String, JSONObject or JSONArray
+     * checks if the corresponding plugin is enabled
+     *
+     * @return if this is enabled
      */
-    Object value();
-
-    String[] flatten();
+    boolean enabled();
 }
diff --git a/acra-javacore/src/main/java/org/acra/config/ConfigurationBuilder.java b/acra-javacore/src/main/java/org/acra/config/ConfigurationBuilder.java
new file mode 100644
index 00000000..4c955ae4
--- /dev/null
+++ b/acra-javacore/src/main/java/org/acra/config/ConfigurationBuilder.java
@@ -0,0 +1,37 @@
+/*
+ * Copyright (c) 2017
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.config;
+
+import android.support.annotation.NonNull;
+
+/**
+ * A {@link Configuration} builder
+ *
+ * @author F43nd1r
+ * @since 01.06.2017
+ */
+
+public interface ConfigurationBuilder {
+    /**
+     * Builds the configuration
+     *
+     * @return the fully configured and immutable configuration
+     * @throws ACRAConfigurationException if the configuration is invalid
+     */
+    @NonNull
+    Configuration build() throws ACRAConfigurationException;
+}
diff --git a/acra-limiter/build.gradle b/acra-limiter/build.gradle
new file mode 100644
index 00000000..463af566
--- /dev/null
+++ b/acra-limiter/build.gradle
@@ -0,0 +1,26 @@
+/*
+ * Copyright (c) 2017
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+apply plugin: 'com.android.library'
+apply plugin: 'maven-publish'
+apply plugin: 'com.jfrog.bintray'
+
+dependencies {
+    api project(':acra-core')
+    compileOnly "com.google.auto.service:auto-service:$autoServiceVersion"
+    annotationProcessor project(':annotationprocessor')
+    compileOnly project(':annotations')
+}
diff --git a/acra-limiter/src/main/AndroidManifest.xml b/acra-limiter/src/main/AndroidManifest.xml
new file mode 100644
index 00000000..cf09e6db
--- /dev/null
+++ b/acra-limiter/src/main/AndroidManifest.xml
@@ -0,0 +1,17 @@
+<!--
+  ~ Copyright (c) 2017
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~     http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
+<manifest package="org.acra.limiter" />
diff --git a/acra-limiter/src/main/java/org/acra/annotation/AcraLimiter.java b/acra-limiter/src/main/java/org/acra/annotation/AcraLimiter.java
new file mode 100644
index 00000000..545d7d2b
--- /dev/null
+++ b/acra-limiter/src/main/java/org/acra/annotation/AcraLimiter.java
@@ -0,0 +1,99 @@
+/*
+ * Copyright (c) 2017
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.annotation;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.StringRes;
+
+import org.acra.ACRAConstants;
+
+import java.lang.annotation.Documented;
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Inherited;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+import java.util.concurrent.TimeUnit;
+
+/**
+ * Limiter configuration
+ *
+ * @author F43nd1r
+ * @since 26.10.2017
+ */
+@Documented
+@Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.TYPE)
+@Inherited
+@Configuration
+public @interface AcraLimiter {
+    /**
+     * Unit of {@link org.acra.annotation.AcraLimiter#period()}
+     *
+     * @return a time unit
+     * @since 5.0.0
+     */
+    @NonNull TimeUnit periodUnit() default TimeUnit.DAYS;
+
+    /**
+     * Reports which have been collected before this will not be considered for any limits except {@link org.acra.annotation.AcraLimiter#failedReportLimit()}
+     *
+     * @return number of {@link org.acra.annotation.AcraLimiter#periodUnit()}s in which to limit reports
+     * @since 5.0.0
+     */
+    long period() default 7;
+
+    /**
+     * general limit of reports
+     *
+     * @return maximum number of reports per period
+     * @since 5.0.0
+     */
+    int overallLimit() default 25;
+
+    /**
+     * limit for reports with the same stacktrace
+     *
+     * @return maximum number of reports with the same stacktrace per period
+     * @since 5.0.0
+     */
+    int stacktraceLimit() default 3;
+
+    /**
+     * limit for reports with the same exception class
+     *
+     * @return maximum number of reports with the same exception class per period
+     * @since 5.0.0
+     */
+    int exceptionClassLimit() default 10;
+
+    /**
+     * limit for unsent reports
+     *
+     * @return maximum number of unsent reports to keep
+     * @since 5.0.0
+     */
+    int failedReportLimit() default 5;
+
+    /**
+     * toast shown when a report was not collected or sent because a limit was exceeded
+     *
+     * @return Resource id for the toast shown when a crash was ignored
+     * @since 5.0.0
+     */
+    @StringRes int resIgnoredCrashToast() default ACRAConstants.DEFAULT_RES_VALUE;
+}
diff --git a/acra-limiter/src/main/java/org/acra/config/LimiterData.java b/acra-limiter/src/main/java/org/acra/config/LimiterData.java
new file mode 100644
index 00000000..ce876357
--- /dev/null
+++ b/acra-limiter/src/main/java/org/acra/config/LimiterData.java
@@ -0,0 +1,133 @@
+/*
+ * Copyright (c) 2017
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.config;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import org.acra.ACRAConstants;
+import org.acra.ReportField;
+import org.acra.data.CrashReportData;
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.text.ParseException;
+import java.text.SimpleDateFormat;
+import java.util.ArrayList;
+import java.util.Calendar;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Locale;
+
+/**
+ * @author F43nd1r
+ * @since 26.10.2017
+ */
+
+class LimiterData {
+    private final List<ReportMetadata> list;
+
+    LimiterData(@Nullable String json) throws JSONException {
+        list = new ArrayList<>();
+        if (json != null && !json.isEmpty()) {
+            final JSONArray array = new JSONArray(json);
+            final int length = array.length();
+            for (int i = 0; i < length; i++) {
+                list.add(new ReportMetadata(array.optJSONObject(i)));
+            }
+        }
+    }
+
+    @NonNull
+    public List<ReportMetadata> getReportMetadata() {
+        return list;
+    }
+
+    public void purgeOldData(Calendar keepAfter) {
+        for (final Iterator<ReportMetadata> iterator = list.iterator(); iterator.hasNext(); ) {
+            if (keepAfter.after(iterator.next().getTimestamp())) {
+                iterator.remove();
+            }
+        }
+    }
+
+    public String toJSON() {
+        return new JSONArray(list).toString();
+    }
+
+    public static class ReportMetadata extends JSONObject {
+        private static final String KEY_STACK_TRACE = "stacktrace";
+        private static final String KEY_EXCEPTION_CLASS = "class";
+        private static final String KEY_TIMESTAMP = "timestamp";
+
+        ReportMetadata(@NonNull CrashReportData crashReportData) throws JSONException {
+            final String stacktrace = crashReportData.getString(ReportField.STACK_TRACE);
+            put(KEY_STACK_TRACE, stacktrace);
+            final int index = stacktrace.indexOf('\n');
+            final String firstLine = index == -1 ? stacktrace : stacktrace.substring(0, index);
+            final int index2 = stacktrace.indexOf(':');
+            final String className = index2 == -1 ? firstLine : firstLine.substring(0, index2);
+            try {
+                Class.forName(className);
+                put(KEY_EXCEPTION_CLASS, className);
+            } catch (ClassNotFoundException ignored) {
+            }
+            put(KEY_TIMESTAMP, crashReportData.getString(ReportField.USER_CRASH_DATE));
+
+
+        }
+
+        ReportMetadata(@NonNull JSONObject copyFrom) throws JSONException {
+            super(copyFrom, jsonArrayToList(copyFrom.names()));
+        }
+
+        public String getStacktrace() {
+            return optString(KEY_STACK_TRACE);
+        }
+
+        public String getExceptionClass() {
+            return optString(KEY_EXCEPTION_CLASS);
+        }
+
+        @Nullable
+        Calendar getTimestamp() {
+            final String timestamp = optString(KEY_TIMESTAMP);
+            if (timestamp != null) {
+                try {
+                    final Calendar calendar = Calendar.getInstance();
+                    calendar.setTime(new SimpleDateFormat(ACRAConstants.DATE_TIME_FORMAT_STRING, Locale.ENGLISH).parse(timestamp));
+                    return calendar;
+                } catch (ParseException ignored) {
+                }
+            }
+            return null;
+        }
+    }
+
+    @NonNull
+    private static String[] jsonArrayToList(@Nullable JSONArray array) {
+        final List<String> list = new ArrayList<>();
+        if (array != null) {
+            final int length = array.length();
+            for (int i = 0; i < length; i++) {
+                list.add(String.valueOf(array.opt(i)));
+            }
+        }
+        return list.toArray(new String[list.size()]);
+    }
+}
diff --git a/acra-limiter/src/main/java/org/acra/config/LimitingReportAdministrator.java b/acra-limiter/src/main/java/org/acra/config/LimitingReportAdministrator.java
new file mode 100644
index 00000000..d1ac1664
--- /dev/null
+++ b/acra-limiter/src/main/java/org/acra/config/LimitingReportAdministrator.java
@@ -0,0 +1,163 @@
+/*
+ * Copyright (c) 2017
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.config;
+
+import android.content.Context;
+import android.os.Build;
+import android.os.Handler;
+import android.os.Looper;
+import android.support.annotation.NonNull;
+import android.widget.Toast;
+
+import com.google.auto.service.AutoService;
+
+import org.acra.ACRA;
+import org.acra.builder.ReportBuilder;
+import org.acra.data.CrashReportData;
+import org.acra.file.ReportLocator;
+import org.acra.util.IOUtils;
+import org.acra.util.StreamReader;
+import org.acra.util.ToastSender;
+import org.json.JSONException;
+
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.util.Calendar;
+import java.util.List;
+import java.util.concurrent.ExecutionException;
+import java.util.concurrent.Executors;
+import java.util.concurrent.Future;
+
+import static org.acra.ACRA.LOG_TAG;
+
+/**
+ * @author F43nd1r
+ * @since 26.10.2017
+ */
+@AutoService(ReportingAdministrator.class)
+public class LimitingReportAdministrator implements ReportingAdministrator {
+    private static final String FILE_LIMITER_DATA = "ACRA-limiter.json";
+
+    @Override
+    public boolean shouldStartCollecting(@NonNull Context context, @NonNull CoreConfiguration config, @NonNull ReportBuilder reportBuilder) {
+        try {
+            final LimiterConfiguration limiterConfiguration = ConfigUtils.getPluginConfiguration(config, LimiterConfiguration.class);
+            final ReportLocator reportLocator = new ReportLocator(context);
+            if (reportLocator.getApprovedReports().length + reportLocator.getUnapprovedReports().length >= limiterConfiguration.failedReportLimit()) {
+                if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Reached failedReportLimit, not collecting");
+                return false;
+            }
+            final List<LimiterData.ReportMetadata> reportMetadata = loadLimiterData(context, limiterConfiguration).getReportMetadata();
+            if (reportMetadata.size() >= limiterConfiguration.overallLimit()) {
+                if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Reached overallLimit, not collecting");
+                return false;
+            }
+        } catch (IOException | JSONException e) {
+            ACRA.log.w(LOG_TAG, "Failed to load LimiterData", e);
+        }
+        return true;
+    }
+
+    @Override
+    public boolean shouldSendReport(@NonNull Context context, @NonNull CoreConfiguration config, @NonNull CrashReportData crashReportData) {
+        try {
+            final LimiterConfiguration limiterConfiguration = ConfigUtils.getPluginConfiguration(config, LimiterConfiguration.class);
+            final LimiterData limiterData = loadLimiterData(context, limiterConfiguration);
+            int sameTrace = 0;
+            int sameClass = 0;
+            final LimiterData.ReportMetadata m = new LimiterData.ReportMetadata(crashReportData);
+            for (LimiterData.ReportMetadata metadata : limiterData.getReportMetadata()) {
+                if (m.getStacktrace().equals(metadata.getStacktrace())) {
+                    sameTrace++;
+                }
+                if (m.getExceptionClass().equals(metadata.getExceptionClass())) {
+                    sameClass++;
+                }
+            }
+            if (sameTrace >= limiterConfiguration.stacktraceLimit()) {
+                if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Reached stacktraceLimit, not sending");
+                return false;
+            }
+            if (sameClass >= limiterConfiguration.exceptionClassLimit()) {
+                if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Reached exceptionClassLimit, not sending");
+                return false;
+            }
+            limiterData.getReportMetadata().add(m);
+            saveLimiterData(context, limiterData);
+        } catch (IOException | JSONException e) {
+            ACRA.log.w(LOG_TAG, "Failed to load LimiterData", e);
+        }
+        return true;
+    }
+
+    @Override
+    public void notifyReportDropped(@NonNull final Context context, @NonNull final CoreConfiguration config) {
+        final LimiterConfiguration limiterConfiguration = ConfigUtils.getPluginConfiguration(config, LimiterConfiguration.class);
+        if (limiterConfiguration.ignoredCrashToast() != null) {
+            final Future<?> future = Executors.newSingleThreadExecutor().submit(() -> {
+                Looper.prepare();
+                ToastSender.sendToast(context, limiterConfiguration.ignoredCrashToast(), Toast.LENGTH_LONG);
+                final Looper looper = Looper.myLooper();
+                if (looper != null) {
+                    new Handler(looper).postDelayed(() -> {
+                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {
+                            looper.quitSafely();
+                        } else {
+                            looper.quit();
+                        }
+                    }, 4000);
+                    Looper.loop();
+                }
+            });
+            while (!future.isDone()) {
+                try {
+                    future.get();
+                } catch (InterruptedException ignored) {
+                } catch (ExecutionException e) {
+                    //ReportInteraction crashed, so ignore it
+                    break;
+                }
+            }
+        }
+    }
+
+    @Override
+    public boolean enabled(@NonNull CoreConfiguration config) {
+        return ConfigUtils.getPluginConfiguration(config, LimiterConfiguration.class).enabled();
+    }
+
+    @NonNull
+    private LimiterData loadLimiterData(@NonNull Context context, @NonNull LimiterConfiguration limiterConfiguration) throws IOException, JSONException {
+        String data = null;
+        try {
+            data = new StreamReader(context.openFileInput(FILE_LIMITER_DATA)).read();
+        } catch (FileNotFoundException ignored) {
+            //file does not exist, we will create it
+        }
+        final LimiterData limiterData = new LimiterData(data);
+        final Calendar keepAfter = Calendar.getInstance();
+        keepAfter.add(Calendar.MINUTE, (int) -limiterConfiguration.periodUnit().toMinutes(limiterConfiguration.period()));
+        if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "purging reports older than " + keepAfter.getTime().toString());
+        limiterData.purgeOldData(keepAfter);
+        saveLimiterData(context, limiterData);
+        return limiterData;
+    }
+
+    private void saveLimiterData(@NonNull Context context, LimiterData limiterData) throws IOException {
+        IOUtils.writeStringToFile(context.getFileStreamPath(FILE_LIMITER_DATA), limiterData.toJSON());
+    }
+}
diff --git a/acra-mail/.gitignore b/acra-mail/.gitignore
new file mode 100644
index 00000000..796b96d1
--- /dev/null
+++ b/acra-mail/.gitignore
@@ -0,0 +1 @@
+/build
diff --git a/acra-mail/build.gradle b/acra-mail/build.gradle
new file mode 100644
index 00000000..463af566
--- /dev/null
+++ b/acra-mail/build.gradle
@@ -0,0 +1,26 @@
+/*
+ * Copyright (c) 2017
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+apply plugin: 'com.android.library'
+apply plugin: 'maven-publish'
+apply plugin: 'com.jfrog.bintray'
+
+dependencies {
+    api project(':acra-core')
+    compileOnly "com.google.auto.service:auto-service:$autoServiceVersion"
+    annotationProcessor project(':annotationprocessor')
+    compileOnly project(':annotations')
+}
diff --git a/acra-mail/src/main/AndroidManifest.xml b/acra-mail/src/main/AndroidManifest.xml
new file mode 100644
index 00000000..fa627248
--- /dev/null
+++ b/acra-mail/src/main/AndroidManifest.xml
@@ -0,0 +1,18 @@
+<!--
+  ~ Copyright (c) 2017
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~     http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
+<manifest package="org.acra.mail">
+</manifest>
diff --git a/acra-mail/src/main/java/org/acra/annotation/AcraMailSender.java b/acra-mail/src/main/java/org/acra/annotation/AcraMailSender.java
new file mode 100644
index 00000000..7632e9d1
--- /dev/null
+++ b/acra-mail/src/main/java/org/acra/annotation/AcraMailSender.java
@@ -0,0 +1,75 @@
+/*
+ * Copyright (c) 2017
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.annotation;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.StringRes;
+
+import org.acra.ACRAConstants;
+import org.acra.sender.EmailIntentSender;
+
+import java.lang.annotation.Documented;
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Inherited;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * @author F43nd1r
+ * @since 01.06.2017
+ */
+@Documented
+@Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.TYPE)
+@Inherited
+@Configuration
+public @interface AcraMailSender {
+
+    /**
+     * your crash reports mailbox
+     *
+     * @return email address to which to send reports.
+     * @since 5.0.0
+     */
+    @NonNull String mailTo();
+
+    /**
+     * Sending the report as an attachment prevents issues with report size and the user from modifying it
+     *
+     * @return if the report should be an attachment instead of plain text.
+     * @since 5.0.0
+     */
+    boolean reportAsFile() default true;
+
+    /**
+     * custom file name for the report
+     *
+     * @return report file name
+     * @since 5.0.1
+     */
+    @NonNull String reportFileName() default EmailIntentSender.DEFAULT_REPORT_FILENAME;
+
+    /**
+     * custom email subject.
+     * Default is "&lt;applicationId&gt; Crash Report"
+     *
+     * @return resource id of the custom email subject
+     * @since 5.0.1
+     */
+    @StringRes int resSubject() default ACRAConstants.DEFAULT_RES_VALUE;
+}
diff --git a/acra/src/main/java/org/acra/sender/EmailIntentSender.java b/acra-mail/src/main/java/org/acra/sender/EmailIntentSender.java
similarity index 75%
rename from acra/src/main/java/org/acra/sender/EmailIntentSender.java
rename to acra-mail/src/main/java/org/acra/sender/EmailIntentSender.java
index 7b5b56b0..61542b5a 100644
--- a/acra/src/main/java/org/acra/sender/EmailIntentSender.java
+++ b/acra-mail/src/main/java/org/acra/sender/EmailIntentSender.java
@@ -1,17 +1,17 @@
 /*
- *  Copyright 2010 Kevin Gaudin
+ * Copyright (c) 2017
  *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
  *
- *      http://www.apache.org/licenses/LICENSE-2.0
+ *     http://www.apache.org/licenses/LICENSE-2.0
  *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
  */
 package org.acra.sender;
 
@@ -24,18 +24,15 @@
 import android.os.Build;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
-import android.text.TextUtils;
 
 import org.acra.ACRA;
 import org.acra.ACRAConstants;
-import org.acra.ReportField;
-import org.acra.annotation.ReportsCrashes;
 import org.acra.attachment.AcraContentProvider;
 import org.acra.attachment.DefaultAttachmentProvider;
-import org.acra.collections.ImmutableSet;
-import org.acra.collector.CrashReportData;
-import org.acra.config.ACRAConfiguration;
-import org.acra.model.Element;
+import org.acra.config.ConfigUtils;
+import org.acra.config.CoreConfiguration;
+import org.acra.config.MailSenderConfiguration;
+import org.acra.data.CrashReportData;
 import org.acra.util.IOUtils;
 import org.acra.util.InstanceCreator;
 
@@ -43,7 +40,6 @@
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.List;
-import java.util.Set;
 
 import static org.acra.ACRA.LOG_TAG;
 
@@ -51,16 +47,19 @@
  * Send reports through an email intent.
  * <p>
  * The user will be asked to chose his preferred email client if no default is set. Included report fields can be defined using
- * {@link org.acra.annotation.ReportsCrashes#customReportContent()}. Crash receiving mailbox has to be
- * defined with {@link ReportsCrashes#mailTo()}.
+ * {@link org.acra.annotation.AcraCore#reportContent()}. Crash receiving mailbox has to be
+ * defined with {@link org.acra.annotation.AcraMailSender#mailTo()}.
  */
 @SuppressWarnings("WeakerAccess")
 public class EmailIntentSender implements ReportSender {
+    public static final String DEFAULT_REPORT_FILENAME = "ACRA-report" + ACRAConstants.REPORTFILE_EXTENSION;
 
-    private final ACRAConfiguration config;
+    private final CoreConfiguration config;
+    private final MailSenderConfiguration mailConfig;
 
-    public EmailIntentSender(@NonNull ACRAConfiguration config) {
+    public EmailIntentSender(@NonNull CoreConfiguration config) {
         this.config = config;
+        this.mailConfig = ConfigUtils.getPluginConfiguration(config, MailSenderConfiguration.class);
     }
 
     @Override
@@ -68,9 +67,14 @@ public void send(@NonNull Context context, @NonNull CrashReportData errorContent
         final PackageManager pm = context.getPackageManager();
 
         final String subject = buildSubject(context);
-        final String body = buildBody(errorContent);
-        final ArrayList<Uri> attachments = new ArrayList<Uri>();
-        final boolean contentAttached = fillAttachmentList(context, errorContent, attachments);
+        final String body;
+        try {
+            body = config.reportFormat().toFormattedString(errorContent, config.reportContent(), "\n", "\n\t", false);
+        } catch (Exception e) {
+            throw new ReportSenderException("Failed to convert Report to text", e);
+        }
+        final ArrayList<Uri> attachments = new ArrayList<>();
+        final boolean contentAttached = fillAttachmentList(context, body, attachments);
 
         //we have to resolve with sendto, because send is supported by non-email apps
         final Intent resolveIntent = buildResolveIntent(subject, body);
@@ -138,7 +142,7 @@ private String getPackageName(@NonNull ComponentName resolveActivity, @NonNull L
     @NonNull
     protected Intent buildAttachmentIntent(@NonNull String subject, @NonNull String body, @NonNull ArrayList<Uri> attachments, boolean contentAttached) {
         final Intent intent = new Intent(Intent.ACTION_SEND_MULTIPLE);
-        intent.putExtra(Intent.EXTRA_EMAIL, new String[]{config.mailTo()});
+        intent.putExtra(Intent.EXTRA_EMAIL, new String[]{ConfigUtils.getPluginConfiguration(config, MailSenderConfiguration.class).mailTo()});
         intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
         intent.putExtra(Intent.EXTRA_SUBJECT, subject);
         intent.setType("message/rfc822");
@@ -157,7 +161,7 @@ protected Intent buildAttachmentIntent(@NonNull String subject, @NonNull String
     @NonNull
     protected Intent buildResolveIntent(@NonNull String subject, @NonNull String body) {
         final Intent intent = new Intent(Intent.ACTION_SENDTO);
-        intent.setData(Uri.fromParts("mailto", config.mailTo(), null));
+        intent.setData(Uri.fromParts("mailto", ConfigUtils.getPluginConfiguration(config, MailSenderConfiguration.class).mailTo(), null));
         intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
         intent.putExtra(Intent.EXTRA_SUBJECT, subject);
         intent.putExtra(Intent.EXTRA_TEXT, body);
@@ -167,7 +171,7 @@ protected Intent buildResolveIntent(@NonNull String subject, @NonNull String bod
     @NonNull
     private List<Intent> buildInitialIntents(@NonNull PackageManager pm, @NonNull Intent resolveIntent, @NonNull Intent emailIntent) {
         final List<ResolveInfo> resolveInfoList = pm.queryIntentActivities(resolveIntent, PackageManager.MATCH_DEFAULT_ONLY);
-        final List<Intent> initialIntents = new ArrayList<Intent>();
+        final List<Intent> initialIntents = new ArrayList<>();
         for (ResolveInfo info : resolveInfoList) {
             final Intent packageSpecificIntent = new Intent(emailIntent);
             packageSpecificIntent.setPackage(info.activityInfo.packageName);
@@ -186,7 +190,7 @@ private void showChooser(@NonNull Context context, @NonNull List<Intent> initial
         context.startActivity(chooser);
     }
 
-    private void grantPermission(@NonNull Context context, Intent intent, String packageName, List<Uri> attachments) {
+    private void grantPermission(@NonNull Context context, @NonNull Intent intent, String packageName, @NonNull List<Uri> attachments) {
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
             intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
         } else {
@@ -205,47 +209,26 @@ private void grantPermission(@NonNull Context context, Intent intent, String pac
      */
     @NonNull
     protected String buildSubject(@NonNull Context context) {
-        return context.getPackageName() + " Crash Report";
-    }
-
-    /**
-     * Creates the message body
-     *
-     * @param errorContent the report content
-     * @return the message body
-     */
-    @NonNull
-    protected String buildBody(@NonNull CrashReportData errorContent) {
-        Set<ReportField> fields = config.reportContent();
-        if (fields.isEmpty()) {
-            fields = new ImmutableSet<ReportField>(ACRAConstants.DEFAULT_MAIL_REPORT_FIELDS);
-        }
-
-        final StringBuilder builder = new StringBuilder();
-        for (ReportField field : fields) {
-            builder.append(field.toString()).append('=');
-            final Element value = errorContent.get(field);
-            if (value != null) {
-                builder.append(TextUtils.join("\n\t", value.flatten()));
-            }
-            builder.append('\n');
+        final String subject = mailConfig.subject();
+        if (subject != null) {
+            return subject;
         }
-        return builder.toString();
+        return context.getPackageName() + " Crash Report";
     }
 
     /**
      * Adds all attachment uris into the given list
      *
-     * @param context      a context
-     * @param errorContent the report content
-     * @param attachments  the target list
+     * @param context     a context
+     * @param body        the report content
+     * @param attachments the target list
      * @return if the attachments contain the content
      */
-    protected boolean fillAttachmentList(@NonNull Context context, @NonNull CrashReportData errorContent, @NonNull List<Uri> attachments) {
+    protected boolean fillAttachmentList(@NonNull Context context, @NonNull String body, @NonNull List<Uri> attachments) {
         final InstanceCreator instanceCreator = new InstanceCreator();
-        attachments.addAll(instanceCreator.create(config.attachmentUriProvider(), new DefaultAttachmentProvider()).getAttachments(context, config));
-        if (config.reportAsFile()) {
-            final Uri report = createAttachmentFromString(context, "ACRA-report" + ACRAConstants.REPORTFILE_EXTENSION, errorContent.toJSON().toString());
+        attachments.addAll(instanceCreator.create(config.attachmentUriProvider(), DefaultAttachmentProvider::new).getAttachments(context, config));
+        if (mailConfig.reportAsFile()) {
+            final Uri report = createAttachmentFromString(context, mailConfig.reportFileName(), body);
             if (report != null) {
                 attachments.add(report);
                 return true;
diff --git a/acra-mail/src/main/java/org/acra/sender/EmailIntentSenderFactory.java b/acra-mail/src/main/java/org/acra/sender/EmailIntentSenderFactory.java
new file mode 100644
index 00000000..41a1ab49
--- /dev/null
+++ b/acra-mail/src/main/java/org/acra/sender/EmailIntentSenderFactory.java
@@ -0,0 +1,41 @@
+/*
+ * Copyright (c) 2017
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.sender;
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+
+import com.google.auto.service.AutoService;
+
+import org.acra.config.CoreConfiguration;
+import org.acra.config.MailSenderConfiguration;
+
+/**
+ * Constructs an {@link EmailIntentSender}.
+ */
+@AutoService(ReportSenderFactory.class)
+public final class EmailIntentSenderFactory extends BaseReportSenderFactory {
+    public EmailIntentSenderFactory() {
+        super(MailSenderConfiguration.class);
+    }
+
+    @NonNull
+    @Override
+    public ReportSender create(@NonNull Context context, @NonNull CoreConfiguration config) {
+        return new EmailIntentSender(config);
+    }
+}
diff --git a/acra-notification/build.gradle b/acra-notification/build.gradle
new file mode 100644
index 00000000..6defb3ec
--- /dev/null
+++ b/acra-notification/build.gradle
@@ -0,0 +1,27 @@
+/*
+ * Copyright (c) 2017
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+apply plugin: 'com.android.library'
+apply plugin: 'maven-publish'
+apply plugin: 'com.jfrog.bintray'
+
+dependencies {
+    api project(':acra-core')
+    implementation "com.android.support:support-compat:$supportVersion"
+    compileOnly "com.google.auto.service:auto-service:$autoServiceVersion"
+    annotationProcessor project(':annotationprocessor')
+    compileOnly project(':annotations')
+}
diff --git a/acra-notification/src/main/AndroidManifest.xml b/acra-notification/src/main/AndroidManifest.xml
new file mode 100644
index 00000000..b184254b
--- /dev/null
+++ b/acra-notification/src/main/AndroidManifest.xml
@@ -0,0 +1,26 @@
+<!--
+  ~ Copyright (c) 2017
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~     http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+          package="org.acra.notification">
+
+    <application>
+        <receiver
+            android:name="org.acra.receiver.NotificationBroadcastReceiver"
+            android:exported="false"
+            android:process=":acra"/>
+    </application>
+</manifest>
diff --git a/acra-notification/src/main/java/org/acra/annotation/AcraNotification.java b/acra-notification/src/main/java/org/acra/annotation/AcraNotification.java
new file mode 100644
index 00000000..efca32c5
--- /dev/null
+++ b/acra-notification/src/main/java/org/acra/annotation/AcraNotification.java
@@ -0,0 +1,187 @@
+/*
+ * Copyright (c) 2017
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.annotation;
+
+import android.app.PendingIntent;
+import android.support.annotation.DrawableRes;
+import android.support.annotation.StringRes;
+
+import org.acra.ACRAConstants;
+
+import java.lang.annotation.Documented;
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Inherited;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * @author F43nd1r
+ * @since 15.09.2017
+ */
+@Documented
+@Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.TYPE)
+@Inherited
+@Configuration
+public @interface AcraNotification {
+
+    /**
+     * icon of the notification
+     *
+     * @return Resource id for the icon in the status bar notification.
+     * @see android.support.v4.app.NotificationCompat.Builder#setSmallIcon(int)
+     * @since 5.0.0
+     */
+    @DrawableRes int resIcon() default android.R.drawable.stat_sys_warning;
+
+    /**
+     * title of the notification
+     *
+     * @return Resource id for the title in the status bar notification.
+     * @see android.support.v4.app.NotificationCompat.Builder#setContentTitle(CharSequence)
+     * @since 5.0.0
+     */
+    @StringRes int resTitle();
+
+    /**
+     * text in the notification
+     *
+     * @return Resource id for the text in the status bar notification.
+     * @see android.support.v4.app.NotificationCompat.Builder#setContentText(CharSequence)
+     * @since 5.0.0
+     */
+    @StringRes int resText();
+
+    /**
+     * ticker text for the notification
+     *
+     * @return Resource id for the ticker text in the status bar notification.
+     * @see android.support.v4.app.NotificationCompat.Builder#setTicker(CharSequence)
+     * @since 5.0.0
+     */
+    @StringRes int resTickerText() default ACRAConstants.DEFAULT_RES_VALUE;
+
+    /**
+     * send button text shown in expanded view
+     *
+     * @return Resource id for the send button text in the status bar notification.
+     * @see android.support.v4.app.NotificationCompat.Builder#addAction(int, CharSequence, PendingIntent)
+     * @since 5.0.0
+     */
+    @StringRes int resSendButtonText() default android.R.string.ok;
+
+    /**
+     * send button icon shown in collapsed and sometimes expanded view
+     *
+     * @return Resource id for the send button icon in the status bar notification.
+     * @see android.support.v4.app.NotificationCompat.Builder#addAction(int, CharSequence, PendingIntent)
+     * @since 5.0.0
+     */
+    @DrawableRes int resSendButtonIcon() default android.R.drawable.ic_menu_send;
+
+    /**
+     * discard button text shown in expanded view
+     *
+     * @return Resource id for the discard button text in the status bar notification.
+     * @see android.support.v4.app.NotificationCompat.Builder#addAction(int, CharSequence, PendingIntent)
+     * @since 5.0.0
+     */
+    @StringRes int resDiscardButtonText() default android.R.string.cancel;
+
+    /**
+     * discard button icon shown in collapsed and sometimes expanded view
+     *
+     * @return Resource id for the discard button icon in the status bar notification.
+     * @see android.support.v4.app.NotificationCompat.Builder#addAction(int, CharSequence, PendingIntent)
+     * @since 5.0.0
+     */
+    @DrawableRes int resDiscardButtonIcon() default android.R.drawable.ic_menu_delete;
+
+    /**
+     * notification channel name.
+     * To learn about notification channels, visit the <a href="https://developer.android.com/guide/topics/ui/notifiers/notifications.html#ManageChannels">notification guide</a>
+     *
+     * @return Resource id for the notification channel name
+     * @see android.app.NotificationChannel#NotificationChannel(String, CharSequence, int)
+     * @since 5.0.0
+     */
+    @StringRes int resChannelName();
+
+    /**
+     * notification channel description
+     *
+     * @return Resource id for the notification channel description
+     * @see android.app.NotificationChannel#setDescription(String)
+     * @since 5.0.0
+     */
+    @StringRes int resChannelDescription() default ACRAConstants.DEFAULT_RES_VALUE;
+
+    /**
+     * notification channel importance. Must be one of
+     * <ul>
+     * <li>{@link android.app.NotificationManager#IMPORTANCE_NONE}</li>
+     * <li>{@link android.app.NotificationManager#IMPORTANCE_LOW}</li>
+     * <li>{@link android.app.NotificationManager#IMPORTANCE_DEFAULT}</li>
+     * <li>{@link android.app.NotificationManager#IMPORTANCE_HIGH}</li>
+     * <li>{@link android.app.NotificationManager#IMPORTANCE_MAX}</li>
+     * </ul>
+     *
+     * @return notification channel importance. Default is {@link android.app.NotificationManager#IMPORTANCE_HIGH}
+     * @see android.app.NotificationChannel#NotificationChannel(String, CharSequence, int)
+     * @since 5.0.0
+     */
+    int resChannelImportance() default 4;
+
+    /**
+     * in-line comment button text.
+     * No effect on pre-nougat devices.
+     *
+     * @return Resource id for the send with comment button text in the status bar notification.
+     * @see android.support.v4.app.NotificationCompat.Builder#addAction(int, CharSequence, PendingIntent)
+     * @since 5.0.0
+     */
+    @StringRes int resSendWithCommentButtonText() default ACRAConstants.DEFAULT_RES_VALUE;
+
+    /**
+     * in-line comment button icon.
+     * No effect on pre-nougat devices.
+     *
+     * @return Resource id for the send with comment button icon in the status bar notification.
+     * @see android.support.v4.app.NotificationCompat.Builder#addAction(int, CharSequence, PendingIntent)
+     * @since 5.0.0
+     */
+    @DrawableRes int resSendWithCommentButtonIcon() default android.R.drawable.ic_menu_send;
+
+    /**
+     * in-line comment prompt label.
+     * No effect on pre-nougat devices.
+     *
+     * @return Resource id for the user comment input label in the notification action.
+     * @see android.support.v4.app.RemoteInput.Builder#setLabel(CharSequence)
+     * @since 5.0.0
+     */
+    @StringRes int resCommentPrompt() default ACRAConstants.DEFAULT_RES_VALUE;
+
+    /**
+     * enable to send report even on normal click, not only on button click
+     *
+     * @return if a normal click on the notification should send the report
+     * @since 5.0.0
+     */
+    boolean sendOnClick() default false;
+}
diff --git a/acra-notification/src/main/java/org/acra/interaction/NotificationInteraction.java b/acra-notification/src/main/java/org/acra/interaction/NotificationInteraction.java
new file mode 100644
index 00000000..9ebf52b8
--- /dev/null
+++ b/acra-notification/src/main/java/org/acra/interaction/NotificationInteraction.java
@@ -0,0 +1,157 @@
+/*
+ * Copyright (c) 2017
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.interaction;
+
+import android.app.NotificationChannel;
+import android.app.NotificationManager;
+import android.app.PendingIntent;
+import android.content.Context;
+import android.content.Intent;
+import android.content.SharedPreferences;
+import android.os.Build;
+import android.support.annotation.NonNull;
+import android.support.v4.app.NotificationCompat;
+import android.support.v4.app.RemoteInput;
+import android.widget.RemoteViews;
+
+import com.google.auto.service.AutoService;
+
+import org.acra.ACRA;
+import org.acra.config.ConfigUtils;
+import org.acra.config.CoreConfiguration;
+import org.acra.config.NotificationConfiguration;
+import org.acra.notification.R;
+import org.acra.prefs.SharedPreferencesFactory;
+import org.acra.receiver.NotificationBroadcastReceiver;
+import org.acra.sender.SenderService;
+
+import java.io.File;
+
+/**
+ * @author F43nd1r
+ * @since 15.09.2017
+ */
+
+@AutoService(ReportInteraction.class)
+public class NotificationInteraction extends BaseReportInteraction {
+    public static final String INTENT_ACTION_SEND = "org.acra.intent.send";
+    public static final String INTENT_ACTION_DISCARD = "org.acra.intent.discard";
+    public static final String KEY_COMMENT = "comment";
+    public static final String EXTRA_REPORT_FILE = "REPORT_FILE";
+    public static final int NOTIFICATION_ID = 666;
+    private static final int ACTION_SEND = 667;
+    private static final int ACTION_DISCARD = 668;
+    private static final String CHANNEL = "ACRA";
+
+    public NotificationInteraction() {
+        super(NotificationConfiguration.class);
+    }
+
+    @Override
+    public boolean performInteraction(@NonNull Context context, @NonNull CoreConfiguration config, @NonNull File reportFile) {
+        final SharedPreferences prefs = new SharedPreferencesFactory(context, config).create();
+        if (prefs.getBoolean(ACRA.PREF_ALWAYS_ACCEPT, false)) {
+            return true;
+        }
+        final NotificationManager notificationManager = ((NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE));
+        //can't post notifications
+        if (notificationManager == null) {
+            return true;
+        }
+        final NotificationConfiguration notificationConfig = ConfigUtils.getPluginConfiguration(config, NotificationConfiguration.class);
+        //We have to create a channel on Oreo+, because notifications without one aren't allowed
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
+            final NotificationChannel channel = new NotificationChannel(CHANNEL, notificationConfig.channelName(), notificationConfig.resChannelImportance());
+            channel.setSound(null, null);
+            if (notificationConfig.channelDescription() != null) {
+                channel.setDescription(notificationConfig.channelDescription());
+            }
+            notificationManager.createNotificationChannel(channel);
+        }
+        //configure base notification
+        final NotificationCompat.Builder notification = new NotificationCompat.Builder(context, CHANNEL)
+                .setWhen(System.currentTimeMillis())
+                .setContentTitle(notificationConfig.title())
+                .setContentText(notificationConfig.text())
+                .setSmallIcon(notificationConfig.resIcon())
+                .setPriority(NotificationCompat.PRIORITY_HIGH);
+        //add ticker if set
+        if (notificationConfig.tickerText() != null) {
+            notification.setTicker(notificationConfig.tickerText());
+        }
+        final PendingIntent sendIntent = getSendIntent(context, config, reportFile);
+        final PendingIntent discardIntent = getDiscardIntent(context);
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N && notificationConfig.sendWithCommentButtonText() != null) {
+            final RemoteInput.Builder remoteInput = new RemoteInput.Builder(KEY_COMMENT);
+            if (notificationConfig.commentPrompt() != null) {
+                remoteInput.setLabel(notificationConfig.commentPrompt());
+            }
+            notification.addAction(new NotificationCompat.Action.Builder(notificationConfig.resSendWithCommentButtonIcon(), notificationConfig.sendWithCommentButtonText(), sendIntent)
+                    .addRemoteInput(remoteInput.build()).build());
+        }
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
+            final RemoteViews bigView = getBigView(context, notificationConfig);
+            notification.addAction(notificationConfig.resSendButtonIcon(), notificationConfig.sendButtonText(), sendIntent)
+                    .addAction(notificationConfig.resDiscardButtonIcon(), notificationConfig.discardButtonText(), discardIntent)
+                    .setCustomContentView(getSmallView(context, notificationConfig, sendIntent, discardIntent))
+                    .setCustomBigContentView(bigView)
+                    .setCustomHeadsUpContentView(bigView)
+                    .setStyle(new NotificationCompat.DecoratedCustomViewStyle());
+        }
+        //On old devices we have no notification buttons, so we have to set the intent to the only possible interaction: click
+        if (notificationConfig.sendOnClick() || Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN) {
+            notification.setContentIntent(sendIntent);
+        }
+        notification.setDeleteIntent(discardIntent);
+        notificationManager.notify(NOTIFICATION_ID, notification.build());
+        return false;
+    }
+
+    private PendingIntent getSendIntent(@NonNull Context context, @NonNull CoreConfiguration config, @NonNull File reportFile) {
+        final Intent intent = new Intent(context, NotificationBroadcastReceiver.class);
+        intent.setAction(INTENT_ACTION_SEND);
+        intent.putExtra(SenderService.EXTRA_ACRA_CONFIG, config);
+        intent.putExtra(EXTRA_REPORT_FILE, reportFile);
+        return PendingIntent.getBroadcast(context, ACTION_SEND, intent, PendingIntent.FLAG_UPDATE_CURRENT);
+    }
+
+    private PendingIntent getDiscardIntent(@NonNull Context context) {
+        final Intent intent = new Intent(context, NotificationBroadcastReceiver.class);
+        intent.setAction(INTENT_ACTION_DISCARD);
+        return PendingIntent.getBroadcast(context, ACTION_DISCARD, intent, PendingIntent.FLAG_UPDATE_CURRENT);
+    }
+
+    @NonNull
+    private RemoteViews getSmallView(@NonNull Context context, @NonNull NotificationConfiguration notificationConfig, @NonNull PendingIntent sendIntent, @NonNull PendingIntent discardIntent) {
+        final RemoteViews view = new RemoteViews(context.getPackageName(), R.layout.notification_small);
+        view.setTextViewText(R.id.text, notificationConfig.text());
+        view.setTextViewText(R.id.title, notificationConfig.title());
+        view.setImageViewResource(R.id.button_send, notificationConfig.resSendButtonIcon());
+        view.setImageViewResource(R.id.button_discard, notificationConfig.resDiscardButtonIcon());
+        view.setOnClickPendingIntent(R.id.button_send, sendIntent);
+        view.setOnClickPendingIntent(R.id.button_discard, discardIntent);
+        return view;
+    }
+
+    @NonNull
+    private RemoteViews getBigView(@NonNull Context context, @NonNull NotificationConfiguration notificationConfig) {
+        final RemoteViews view = new RemoteViews(context.getPackageName(), R.layout.notification_big);
+        view.setTextViewText(R.id.text, notificationConfig.text());
+        view.setTextViewText(R.id.title, notificationConfig.title());
+        return view;
+    }
+}
diff --git a/acra-notification/src/main/java/org/acra/receiver/NotificationBroadcastReceiver.java b/acra-notification/src/main/java/org/acra/receiver/NotificationBroadcastReceiver.java
new file mode 100644
index 00000000..a3f33530
--- /dev/null
+++ b/acra-notification/src/main/java/org/acra/receiver/NotificationBroadcastReceiver.java
@@ -0,0 +1,93 @@
+/*
+ * Copyright (c) 2017
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.receiver;
+
+import android.app.NotificationManager;
+import android.content.BroadcastReceiver;
+import android.content.Context;
+import android.content.Intent;
+import android.os.Bundle;
+import android.support.annotation.NonNull;
+import android.support.v4.app.RemoteInput;
+
+import org.acra.ACRA;
+import org.acra.data.CrashReportData;
+import org.acra.config.CoreConfiguration;
+import org.acra.file.BulkReportDeleter;
+import org.acra.file.CrashReportPersister;
+import org.acra.interaction.NotificationInteraction;
+import org.acra.sender.SenderService;
+import org.acra.sender.SenderServiceStarter;
+import org.acra.util.SystemServices;
+import org.json.JSONException;
+
+import java.io.File;
+import java.io.IOException;
+
+import static org.acra.ACRA.LOG_TAG;
+import static org.acra.ReportField.USER_COMMENT;
+
+/**
+ * @author F43nd1r
+ * @since 15.09.2017
+ */
+
+public class NotificationBroadcastReceiver extends BroadcastReceiver {
+    @Override
+    public void onReceive(@NonNull Context context, @NonNull Intent intent) {
+        try {
+            final NotificationManager notificationManager = SystemServices.getNotificationManager(context);
+            notificationManager.cancel(NotificationInteraction.NOTIFICATION_ID);
+            if (intent.getAction() != null) {
+                switch (intent.getAction()) {
+                    case NotificationInteraction.INTENT_ACTION_SEND:
+                        final Object reportFileObject = intent.getSerializableExtra(NotificationInteraction.EXTRA_REPORT_FILE);
+                        final Object configObject = intent.getSerializableExtra(SenderService.EXTRA_ACRA_CONFIG);
+                        if (configObject instanceof CoreConfiguration && reportFileObject instanceof File) {
+                            final CoreConfiguration config = (CoreConfiguration) configObject;
+                            final File reportFile = (File) reportFileObject;
+                            //Grab user comment from notification intent
+                            final Bundle remoteInput = RemoteInput.getResultsFromIntent(intent);
+                            if (remoteInput != null) {
+                                final CharSequence comment = remoteInput.getCharSequence(NotificationInteraction.KEY_COMMENT);
+                                if (comment != null && !"".equals(comment.toString())) {
+                                    final CrashReportPersister persister = new CrashReportPersister();
+                                    try {
+                                        if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Add user comment to " + reportFile);
+                                        final CrashReportData crashData = persister.load(reportFile);
+                                        crashData.put(USER_COMMENT, comment.toString());
+                                        persister.store(crashData, reportFile);
+                                    } catch (@NonNull IOException | JSONException e) {
+                                        ACRA.log.w(LOG_TAG, "User comment not added: ", e);
+                                    }
+                                }
+                            }
+                            new SenderServiceStarter(context, config).startService(false, true);
+                        }
+                        break;
+                    case NotificationInteraction.INTENT_ACTION_DISCARD:
+                        if (ACRA.DEV_LOGGING) ACRA.log.d(ACRA.LOG_TAG, "Discarding reports");
+                        new BulkReportDeleter(context).deleteReports(false, 0);
+                        break;
+                }
+            }
+
+        } catch (Throwable t) {
+            ACRA.log.e(LOG_TAG, "Failed to handle notification action", t);
+        }
+    }
+}
diff --git a/acra-notification/src/main/res/layout/notification_big.xml b/acra-notification/src/main/res/layout/notification_big.xml
new file mode 100644
index 00000000..b0472d59
--- /dev/null
+++ b/acra-notification/src/main/res/layout/notification_big.xml
@@ -0,0 +1,43 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  ~ Copyright (c) 2017
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~     http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+              style="@android:style/TextAppearance.StatusBar.EventContent"
+              android:layout_width="match_parent"
+              android:layout_height="match_parent"
+              android:weightSum="1">
+
+    <LinearLayout
+        android:layout_width="wrap_content"
+        android:layout_height="match_parent"
+        android:layout_weight="1"
+        android:gravity="center_vertical"
+        android:orientation="vertical">
+
+        <TextView
+            android:id="@+id/title"
+            style="@style/TextAppearance.Compat.Notification.Title"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"/>
+
+        <TextView
+            android:id="@+id/text"
+            style="@style/TextAppearance.Compat.Notification"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"/>
+    </LinearLayout>
+</LinearLayout>
\ No newline at end of file
diff --git a/acra-notification/src/main/res/layout/notification_small.xml b/acra-notification/src/main/res/layout/notification_small.xml
new file mode 100644
index 00000000..85fff238
--- /dev/null
+++ b/acra-notification/src/main/res/layout/notification_small.xml
@@ -0,0 +1,61 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  ~ Copyright (c) 2017
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~     http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+              style="@android:style/TextAppearance.StatusBar.EventContent"
+              android:layout_width="match_parent"
+              android:layout_height="match_parent"
+    android:weightSum="1">
+
+    <LinearLayout
+        android:layout_width="wrap_content"
+        android:layout_height="match_parent"
+        android:layout_weight="1"
+        android:gravity="center_vertical"
+        android:orientation="vertical">
+
+        <TextView
+            android:id="@+id/title"
+            style="@style/TextAppearance.Compat.Notification.Title"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"/>
+
+        <TextView
+            android:id="@+id/text"
+            style="@style/TextAppearance.Compat.Notification"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:maxLines="1"
+            android:ellipsize="end"/>
+    </LinearLayout>
+
+    <ImageButton
+        android:id="@+id/button_send"
+        style="@android:style/Widget.DeviceDefault.Button.Borderless.Small"
+        android:layout_width="wrap_content"
+        android:layout_height="match_parent"
+        android:layout_gravity="center"
+        android:scaleType="centerInside"/>
+
+    <ImageButton
+        android:id="@+id/button_discard"
+        style="@android:style/Widget.DeviceDefault.Button.Borderless.Small"
+        android:layout_width="wrap_content"
+        android:layout_height="match_parent"
+        android:layout_gravity="center"
+        android:scaleType="centerInside"/>
+</LinearLayout>
\ No newline at end of file
diff --git a/acra-toast/.gitignore b/acra-toast/.gitignore
new file mode 100644
index 00000000..796b96d1
--- /dev/null
+++ b/acra-toast/.gitignore
@@ -0,0 +1 @@
+/build
diff --git a/acra-toast/build.gradle b/acra-toast/build.gradle
new file mode 100644
index 00000000..463af566
--- /dev/null
+++ b/acra-toast/build.gradle
@@ -0,0 +1,26 @@
+/*
+ * Copyright (c) 2017
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+apply plugin: 'com.android.library'
+apply plugin: 'maven-publish'
+apply plugin: 'com.jfrog.bintray'
+
+dependencies {
+    api project(':acra-core')
+    compileOnly "com.google.auto.service:auto-service:$autoServiceVersion"
+    annotationProcessor project(':annotationprocessor')
+    compileOnly project(':annotations')
+}
diff --git a/acra-toast/src/main/AndroidManifest.xml b/acra-toast/src/main/AndroidManifest.xml
new file mode 100644
index 00000000..1cf510a0
--- /dev/null
+++ b/acra-toast/src/main/AndroidManifest.xml
@@ -0,0 +1,18 @@
+<!--
+  ~ Copyright (c) 2017
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~     http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+
+<manifest package="org.acra.toast">
+</manifest>
diff --git a/acra-toast/src/main/java/org/acra/annotation/AcraToast.java b/acra-toast/src/main/java/org/acra/annotation/AcraToast.java
new file mode 100644
index 00000000..95313636
--- /dev/null
+++ b/acra-toast/src/main/java/org/acra/annotation/AcraToast.java
@@ -0,0 +1,59 @@
+/*
+ * Copyright (c) 2017
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.annotation;
+
+import android.content.Context;
+import android.support.annotation.IntRange;
+import android.support.annotation.StringRes;
+import android.widget.Toast;
+
+import java.lang.annotation.Documented;
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Inherited;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * @author F43nd1r
+ * @since 02.06.2017
+ */
+@Documented
+@Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.TYPE)
+@Inherited
+@Configuration
+public @interface AcraToast {
+
+    /**
+     * toast text triggered when the application crashes
+     *
+     * @return Resource id for the Toast text triggered when the application crashes.
+     * @see android.widget.Toast#makeText(Context, int, int)
+     * @since 5.0.0
+     */
+    @StringRes int resText();
+
+    /**
+     * One of {@link android.widget.Toast#LENGTH_LONG} and {@link android.widget.Toast#LENGTH_SHORT}
+     *
+     * @return toast length
+     * @see android.widget.Toast#makeText(Context, int, int)
+     * @since 5.0.0
+     */
+    @IntRange(from = 0, to = 1) int length() default Toast.LENGTH_LONG;
+}
diff --git a/acra-toast/src/main/java/org/acra/interaction/ToastInteraction.java b/acra-toast/src/main/java/org/acra/interaction/ToastInteraction.java
new file mode 100644
index 00000000..80f9ddd8
--- /dev/null
+++ b/acra-toast/src/main/java/org/acra/interaction/ToastInteraction.java
@@ -0,0 +1,67 @@
+/*
+ * Copyright (c) 2017 the ACRA team
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.interaction;
+
+import android.content.Context;
+import android.os.Build;
+import android.os.Handler;
+import android.os.Looper;
+import android.support.annotation.NonNull;
+import android.widget.Toast;
+
+import com.google.auto.service.AutoService;
+
+import org.acra.config.ConfigUtils;
+import org.acra.config.CoreConfiguration;
+import org.acra.config.ToastConfiguration;
+import org.acra.util.ToastSender;
+
+import java.io.File;
+
+/**
+ * @author F43nd1r
+ * @since 04.06.2017
+ */
+@AutoService(ReportInteraction.class)
+public class ToastInteraction extends BaseReportInteraction {
+    /**
+     * Number of milliseconds to wait after displaying a toast.
+     */
+    private static final int TOAST_WAIT_DURATION = 2000;
+
+    public ToastInteraction() {
+        super(ToastConfiguration.class);
+    }
+
+    @Override
+    public boolean performInteraction(@NonNull Context context, @NonNull CoreConfiguration config, @NonNull File reportFile) {
+        Looper.prepare();
+        ToastSender.sendToast(context, ConfigUtils.getPluginConfiguration(config, ToastConfiguration.class).text(), Toast.LENGTH_LONG);
+        final Looper looper = Looper.myLooper();
+        if(looper != null) {
+            new Handler(looper).postDelayed(() -> {
+                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {
+                    looper.quitSafely();
+                } else {
+                    looper.quit();
+                }
+            }, TOAST_WAIT_DURATION);
+            Looper.loop();
+        }
+        return true;
+    }
+}
diff --git a/acra/build.gradle b/acra/build.gradle
deleted file mode 100644
index f2941316..00000000
--- a/acra/build.gradle
+++ /dev/null
@@ -1,194 +0,0 @@
-apply plugin: 'com.android.library'
-apply plugin: 'signing'
-apply plugin: 'com.github.dcendents.android-maven'
-apply plugin: 'net.researchgate.release'
-apply plugin: 'com.jfrog.artifactory'
-
-android {
-    compileSdkVersion Integer.parseInt(androidVersion)
-    buildToolsVersion '25.0.2'
-
-    lintOptions {
-        abortOnError false
-    }
-
-    defaultConfig {
-        minSdkVersion 8
-        targetSdkVersion androidVersion
-        versionName version
-        consumerProguardFile proguardFile
-    }
-
-    compileOptions {
-        sourceCompatibility JavaVersion.VERSION_1_6
-        targetCompatibility JavaVersion.VERSION_1_6
-    }
-}
-
-dependencies {
-    compile "com.android.support:support-v4:$supportVersion"
-    compile "com.android.support:support-annotations:$supportVersion"
-    annotationProcessor project(':annotationprocessor')
-    provided project(':annotations')
-}
-
-/*
-*   How to oss upload:
-*
-*   Edit or create the file at ~/.gradle/gradle.properties and add
-* signing.keyId=<short ID of your key>
-* signing.password=<passphrase for your key>
-* signing.secretKeyRingFile=<path to your key ring>
-*   Optional, depending on upload destination
-* ossrhUser=<OSSRH user>
-* ossrhPassword=<OSSRH password>
-* artifactoryApiKey=<artifactory key>
-* artifactoryUser=<jfrog artifactory user>
-
-*   Then run for ossrh upload
-* gradlew release
-*
-*   Or for jfrog oss artifactory
-* gradlew artifactoryPublish
-*/
-
-release {
-    failOnUnversionedFiles = false
-    failOnCommitNeeded = true
-    tagTemplate = '$name-$version'
-    git {
-        requireBranch = "master"
-    }
-}
-
-afterReleaseBuild {
-    dependsOn rootProject.closeAndPromoteRepository
-}
-
-rootProject.closeRepository {
-    dependsOn uploadArchives
-}
-
-task sourcesJar(type: Jar) {
-    from android.sourceSets.main.java.srcDirs
-    classifier = 'sources'
-}
-
-task javadoc(type: Javadoc) {
-    source = android.sourceSets.main.java.srcDirs
-    source += files('build/generated/source/aidl/release') + files('build/generated/source/buildConfig/release') + files('build/generated/source/apt/release')
-    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
-}
-
-afterEvaluate {
-    javadoc.classpath += files(android.libraryVariants.collect { variant ->
-        variant.javaCompile.classpath.files
-    })
-    javadoc.dependsOn generateReleaseSources
-}
-
-task javadocJar(type: Jar, dependsOn: javadoc) {
-    classifier = 'javadoc'
-    from javadoc
-}
-
-artifacts {
-    archives javadocJar, sourcesJar
-}
-
-signing {
-    required { signing.hasProperty('keyId') }
-    sign configurations.archives
-}
-
-ext.createPom = { pom ->
-    pom.project {
-        name 'Application Crash Report for Android'
-        description 'Publishes a report of an Android application crash to an end point.'
-        packaging 'aar'
-        url 'http://acra.ch'
-
-        scm {
-            connection 'scm:git:https://github.com/ACRA/acra.git'
-            developerConnection 'scm:git:git@github.com:ACRA/acra.git'
-            url 'https://github.com/ACRA/acra.git'
-        }
-
-        licenses {
-            license {
-                name 'Apache 2'
-                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
-                distribution 'repo'
-            }
-        }
-
-        developers {
-            developer {
-                id = 'kevin.gaudin'
-                name = 'Kevin Gaudin'
-            }
-            developer {
-                id = 'william.ferguson'
-                name = 'William Ferguson'
-            }
-            developer {
-                id = 'f43nd1r'
-                name = 'Lukas Morawietz'
-            }
-        }
-    }
-}
-
-install {
-    repositories.mavenInstaller {
-        createPom(pom)
-    }
-}
-
-uploadArchives {
-    repositories {
-        mavenDeployer {
-            beforeDeployment { deployment -> signing.signPom(deployment) }
-            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
-                authentication(userName: ossrhUser, password: ossrhPassword)
-            }
-            createPom(pom)
-        }
-    }
-}
-
-nexusStaging {
-    username = ossrhUser
-    password = ossrhPassword
-    packageGroup = group
-}
-
-artifactory {
-    contextUrl = 'https://oss.jfrog.org/artifactory'
-    publish {
-        repository {
-            repoKey = version.endsWith('SNAPSHOT') ? 'oss-snapshot-local' : 'oss-release-local'
-            username = artifactoryUser
-            password = artifactoryApiKey
-            maven = true
-        }
-        defaults {
-            publishConfigs('archives')
-            publishPom = true
-            publishIvy = false
-        }
-    }
-    resolve {
-        repository {
-            repoKey = 'jcenter'
-            username = artifactoryUser
-            password = artifactoryApiKey
-        }
-    }
-}
-
-artifactoryPublish {
-    dependsOn javadocJar
-    dependsOn sourcesJar
-    dependsOn install
-}
diff --git a/acra/gradle.properties b/acra/gradle.properties
deleted file mode 100644
index a4171a82..00000000
--- a/acra/gradle.properties
+++ /dev/null
@@ -1,14 +0,0 @@
-version=4.10.1-SNAPSHOT
-group=com.faendir
-archivesBaseName=acra
-androidVersion=24
-supportVersion=24.1.1
-proguardFile=src/main/proguard/proguard.cfg
-release.useAutomaticVersion=true
-ossrhUser=
-ossrhPassword=
-signing.keyId=
-signing.password=
-signing.secretKeyRingFile=
-artifactoryApiKey=
-artifactoryUser=
\ No newline at end of file
diff --git a/acra/src/main/assembly/distribution.xml b/acra/src/main/assembly/distribution.xml
deleted file mode 100644
index 1ba2d60e..00000000
--- a/acra/src/main/assembly/distribution.xml
+++ /dev/null
@@ -1,51 +0,0 @@
-<assembly
-	xmlns="http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.0"
-	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-	xsi:schemaLocation="http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.0 http://maven.apache.org/xsd/assembly-1.1.0.xsd">
-	<id>acra-distribution</id>
-	<formats>
-		<format>zip</format>
-	</formats>
-	<fileSets>
-		<fileSet>
-			<directory>${project.basedir}</directory>
-			<outputDirectory>/</outputDirectory>
-			<includes>
-				<include>LICENSE</include>
-				<include>NOTICE</include>
-			</includes>
-		</fileSet>
-		<fileSet>
-			<directory>${project.build.directory}</directory>
-			<outputDirectory>build</outputDirectory>
-			<includes>
-				<include>${project.build.finalName}.aar</include>
-			</includes>
-		</fileSet>
-		<fileSet>
-			<directory>${project.build.directory}</directory>
-			<outputDirectory>doc</outputDirectory>
-			<includes>
-				<include>${project.build.finalName}-javadoc.jar</include>
-			</includes>
-		</fileSet>
-		<fileSet>
-			<directory>${project.build.directory}</directory>
-			<outputDirectory>src</outputDirectory>
-			<includes>
-				<include>${project.build.finalName}-sources.jar</include>
-			</includes>
-		</fileSet>
-		<fileSet>
-			<directory>${project.basedir}/doc</directory>
-			<includes>
-				<include>CrashReports-Template.csv</include>
-			</includes>
-			<outputDirectory>doc</outputDirectory>
-		</fileSet>
-		<fileSet>
-			<directory>${project.build.directory}/apidocs</directory>
-			<outputDirectory>doc/html-javadoc</outputDirectory>
-		</fileSet>
-	</fileSets>
-</assembly>
diff --git a/acra/src/main/build-config/sun_checks-modified.xml b/acra/src/main/build-config/sun_checks-modified.xml
deleted file mode 100644
index ac9ee293..00000000
--- a/acra/src/main/build-config/sun_checks-modified.xml
+++ /dev/null
@@ -1,189 +0,0 @@
-<?xml version="1.0"?>
-<!DOCTYPE module PUBLIC
-    "-//Puppy Crawl//DTD Check Configuration 1.2//EN"
-    "http://www.puppycrawl.com/dtds/configuration_1_2.dtd">
-
-<!--
-
-  Checkstyle configuration that checks the sun coding conventions from:
-
-    - the Java Language Specification at
-      http://java.sun.com/docs/books/jls/second_edition/html/index.html
-
-    - the Sun Code Conventions at http://java.sun.com/docs/codeconv/
-
-    - the Javadoc guidelines at
-      http://java.sun.com/j2se/javadoc/writingdoccomments/index.html
-
-    - the JDK Api documentation http://java.sun.com/j2se/docs/api/index.html
-
-    - some best practices
-
-  Checkstyle is very configurable. Be sure to read the documentation at
-  http://checkstyle.sf.net (or in your downloaded distribution).
-
-  Most Checks are configurable, be sure to consult the documentation.
-
-  To completely disable a check, just comment it out or delete it from the file.
-
-  Finally, it is worth reading the documentation.
-
--->
-
-<module name="Checker">
-    <!--
-        If you set the basedir property below, then all reported file
-        names will be relative to the specified directory. See
-        http://checkstyle.sourceforge.net/5.x/config.html#Checker
-
-        <property name="basedir" value="${basedir}"/>
-    -->
-
-    <!-- Checks that each Java package has a Javadoc file used for commenting. -->
-    <!-- See http://checkstyle.sf.net/config_javadoc.html#JavadocPackage       -->
-    <module name="JavadocPackage">
-      <property name="allowLegacy" value="true"/>
-    </module>
-
-    <!-- Checks whether files end with a new line.                        -->
-    <!-- See http://checkstyle.sf.net/config_misc.html#NewlineAtEndOfFile -->
-    <module name="NewlineAtEndOfFile"/>
-
-    <!-- Checks that property files contain the same keys.         -->
-    <!-- See http://checkstyle.sf.net/config_misc.html#Translation -->
-    <module name="Translation"/>
-
-    <module name="FileLength"/>
-
-    <!-- Following interprets the header file as regular expressions. -->
-    <!-- <module name="RegexpHeader"/>                                -->
-
-    <module name="FileTabCharacter">
-        <property name="eachLine" value="true"/>
-    </module>
-
-    <module name="RegexpSingleline">
-        <!-- \s matches whitespace character, $ matches end of line. -->
-        <property name="format" value="\s+$"/>
-        <property name="message" value="Line has trailing spaces."/>
-    </module>
-
-    <module name="TreeWalker">
-
-        <property name="cacheFile" value="${checkstyle.cache.file}"/>
-
-        <!-- Checks for Javadoc comments.                     -->
-        <!-- See http://checkstyle.sf.net/config_javadoc.html -->
-        <module name="JavadocMethod"/>
-        <module name="JavadocType"/>
-        <module name="JavadocVariable"/>
-        <module name="JavadocStyle"/>
-
-
-        <!-- Checks for Naming Conventions.                  -->
-        <!-- See http://checkstyle.sf.net/config_naming.html -->
-        <module name="ConstantName"/>
-        <module name="LocalFinalVariableName"/>
-        <module name="LocalVariableName"/>
-        <module name="MemberName"/>
-        <module name="MethodName"/>
-        <module name="PackageName"/>
-        <module name="ParameterName"/>
-        <module name="StaticVariableName"/>
-        <module name="TypeName"/>
-
-
-        <!-- Checks for Headers                                -->
-        <!-- See http://checkstyle.sf.net/config_header.html   -->
-        <!-- <module name="Header">                            -->
-            <!-- The follow property value demonstrates the ability     -->
-            <!-- to have access to ANT properties. In this case it uses -->
-            <!-- the ${basedir} property to allow Checkstyle to be run  -->
-            <!-- from any directory within a project. See property      -->
-            <!-- expansion,                                             -->
-            <!-- http://checkstyle.sf.net/config.html#properties        -->
-            <!-- <property                                              -->
-            <!--     name="headerFile"                                  -->
-            <!--     value="${basedir}/java.header"/>                   -->
-        <!-- </module> -->
-
-
-        <!-- Checks for imports                              -->
-        <!-- See http://checkstyle.sf.net/config_import.html -->
-        <module name="AvoidStarImport"/>
-        <module name="IllegalImport"/> <!-- defaults to sun.* packages -->
-        <module name="RedundantImport"/>
-        <module name="UnusedImports"/>
-
-
-        <!-- Checks for Size Violations.                    -->
-        <!-- See http://checkstyle.sf.net/config_sizes.html -->
-        <module name="LineLength">
-		    <property name="max" value="160"/>
-        </module>
-        <module name="MethodLength"/>
-        <module name="ParameterNumber"/>
-
-
-        <!-- Checks for whitespace                               -->
-        <!-- See http://checkstyle.sf.net/config_whitespace.html -->
-        <module name="EmptyForIteratorPad"/>
-        <module name="MethodParamPad"/>
-        <module name="NoWhitespaceAfter"/>
-        <module name="NoWhitespaceBefore"/>
-        <module name="OperatorWrap"/>
-        <module name="ParenPad"/>
-        <module name="TypecastParenPad"/>
-        <module name="WhitespaceAfter"/>
-        <module name="WhitespaceAround"/>
-
-
-        <!-- Modifier Checks                                    -->
-        <!-- See http://checkstyle.sf.net/config_modifiers.html -->
-        <module name="ModifierOrder"/>
-        <module name="RedundantModifier"/>
-
-
-        <!-- Checks for blocks. You know, those {}'s         -->
-        <!-- See http://checkstyle.sf.net/config_blocks.html -->
-        <module name="AvoidNestedBlocks"/>
-        <module name="EmptyBlock"/>
-        <module name="LeftCurly"/>
-        <module name="NeedBraces"/>
-        <module name="RightCurly"/>
-
-
-        <!-- Checks for common coding problems               -->
-        <!-- See http://checkstyle.sf.net/config_coding.html -->
-        <module name="AvoidInlineConditionals"/>
-        <module name="DoubleCheckedLocking"/>    <!-- MY FAVOURITE -->
-        <module name="EmptyStatement"/>
-        <module name="EqualsHashCode"/>
-        <module name="HiddenField"/>
-        <module name="IllegalInstantiation"/>
-        <module name="InnerAssignment"/>
-        <module name="MagicNumber"/>
-        <module name="MissingSwitchDefault"/>
-        <module name="RedundantThrows"/>
-        <module name="SimplifyBooleanExpression"/>
-        <module name="SimplifyBooleanReturn"/>
-
-        <!-- Checks for class design                         -->
-        <!-- See http://checkstyle.sf.net/config_design.html -->
-        <module name="DesignForExtension"/>
-        <module name="FinalClass"/>
-        <module name="HideUtilityClassConstructor"/>
-        <module name="InterfaceIsType"/>
-        <module name="VisibilityModifier"/>
-
-
-        <!-- Miscellaneous other checks.                   -->
-        <!-- See http://checkstyle.sf.net/config_misc.html -->
-        <module name="ArrayTypeStyle"/>
-        <module name="FinalParameters"/>
-        <module name="TodoComment"/>
-        <module name="UpperEll"/>
-
-    </module>
-
-</module>
diff --git a/acra/src/main/java/org/acra/ACRA.java b/acra/src/main/java/org/acra/ACRA.java
deleted file mode 100644
index 5a53edf8..00000000
--- a/acra/src/main/java/org/acra/ACRA.java
+++ /dev/null
@@ -1,378 +0,0 @@
-/*
- *  Copyright 2010 Emmanuel Astier & Kevin Gaudin
- *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-package org.acra;
-
-import android.app.Application;
-import android.content.Context;
-import android.content.SharedPreferences;
-import android.content.SharedPreferences.OnSharedPreferenceChangeListener;
-import android.os.Build;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-
-import org.acra.annotation.ReportsCrashes;
-import org.acra.config.ACRAConfiguration;
-import org.acra.config.ACRAConfigurationException;
-import org.acra.config.ConfigurationBuilder;
-import org.acra.legacy.LegacyFileHandler;
-import org.acra.log.ACRALog;
-import org.acra.log.AndroidLogDelegate;
-import org.acra.prefs.SharedPreferencesFactory;
-import org.acra.util.ApplicationStartupProcessor;
-import org.acra.util.IOUtils;
-
-import java.io.FileInputStream;
-import java.io.IOException;
-
-/**
- * Use this class to initialize the crash reporting feature using
- * {@link #init(Application)} as soon as possible in your {@link Application}
- * subclass {@link Application#onCreate()} method. Configuration items must have
- * been set by using {@link ReportsCrashes} above the declaration of your
- * {@link Application} subclass.
- *
- * @author Kevin Gaudin
- *
- */
-@SuppressWarnings({"WeakerAccess","unused"})
-public final class ACRA {
-    private ACRA(){}
-
-    public static /*non-final*/ boolean DEV_LOGGING = false; // Should be false for release.
-
-    public static final String LOG_TAG = ACRA.class.getSimpleName();
-
-    @NonNull
-    public static ACRALog log = new AndroidLogDelegate();
-
-    private static final String ACRA_PRIVATE_PROCESS_NAME= ":acra";
-
-    /**
-     * The key of the application default SharedPreference where you can put a
-     * 'true' Boolean value to disable ACRA.
-     */
-    public static final String PREF_DISABLE_ACRA = "acra.disable";
-
-    /**
-     * Alternatively, you can use this key if you prefer your users to have the
-     * checkbox ticked to enable crash reports. If both acra.disable and
-     * acra.enable are set, the value of acra.disable takes over the other.
-     */
-    public static final String PREF_ENABLE_ACRA = "acra.enable";
-
-    /**
-     * The key of the SharedPreference allowing the user to disable sending
-     * content of logcat/dropbox. System logs collection is also dependent of
-     * the READ_LOGS permission.
-     */
-    public static final String PREF_ENABLE_SYSTEM_LOGS = "acra.syslog.enable";
-
-    /**
-     * The key of the SharedPreference allowing the user to disable sending his
-     * device id. Device ID collection is also dependent of the READ_PHONE_STATE
-     * permission.
-     */
-    public static final String PREF_ENABLE_DEVICE_ID = "acra.deviceid.enable";
-
-    /**
-     * The key of the SharedPreference allowing the user to always include his
-     * email address.
-     */
-    public static final String PREF_USER_EMAIL_ADDRESS = "acra.user.email";
-
-    /**
-     * The key of the SharedPreference allowing the user to automatically accept
-     * sending reports.
-     */
-    public static final String PREF_ALWAYS_ACCEPT = "acra.alwaysaccept";
-
-    /**
-     * The version number of the application the last time ACRA was started.
-     * This is used to determine whether unsent reports should be discarded
-     * because they are old and out of date.
-     */
-    public static final String PREF_LAST_VERSION_NR = "acra.lastVersionNr";
-
-    private static Application mApplication;
-    @Nullable
-    private static ACRAConfiguration configProxy;
-
-    // Accessible via ACRA#getErrorReporter().
-    @Nullable
-    private static ErrorReporter errorReporterSingleton;
-
-    // NB don't convert to a local field because then it could be garbage
-    // collected and then we would have no PreferenceListener.
-    private static OnSharedPreferenceChangeListener mPrefListener; // TODO consider moving to ErrorReport so it doesn't need to be a static field.
-
-    /**
-     * <p>
-     * Initialize ACRA for a given Application.
-     *
-     * The call to this method should be placed as soon as possible in the {@link Application#attachBaseContext(Context)} method.
-     *
-     * Uses the configuration as configured with the @ReportCrashes annotation.
-     * Sends any unsent reports.
-     * </p>
-     *
-     * @param app   Your Application class.
-     * @throws IllegalStateException if it is called more than once.
-     */
-    public static void init(@NonNull Application app) {
-        final ReportsCrashes reportsCrashes = app.getClass().getAnnotation(ReportsCrashes.class);
-        if (reportsCrashes == null) {
-            log.e(LOG_TAG, "ACRA#init(Application) called but no ReportsCrashes annotation on Application " + app.getPackageName());
-            return;
-        }
-        init(app, new ConfigurationBuilder(app));
-    }
-
-    /**
-     * <p>
-     * Initialize ACRA for a given Application.
-     *
-     * The call to this method should be placed as soon as possible in the {@link Application#attachBaseContext(Context)} method.
-     *
-     * Uses the configuration as configured with the @ReportCrashes annotation.
-     * Sends any unsent reports.
-     * </p>
-     *
-     * @param app     Your Application class.
-     * @param builder ConfigurationBuilder to manually set up ACRA configuration.
-     */
-    public static void init(@NonNull Application app, @NonNull ConfigurationBuilder builder) {
-        init(app, builder, true);
-    }
-
-    /**
-     * <p>
-     * Initialize ACRA for a given Application.
-     *
-     * The call to this method should be placed as soon as possible in the {@link Application#attachBaseContext(Context)}  method.
-     * </p>
-     *
-     * @param app                            Your Application class.
-     * @param builder                        ConfigurationBuilder to manually set up ACRA configuration.
-     * @param checkReportsOnApplicationStart Whether to invoke ErrorReporter.checkReportsOnApplicationStart().
-     */
-    public static void init(@NonNull Application app, @NonNull ConfigurationBuilder builder, boolean checkReportsOnApplicationStart) {
-        try {
-            init(app, builder.build(), checkReportsOnApplicationStart);
-        } catch (ACRAConfigurationException e) {
-            log.w(LOG_TAG, "Configuration Error - ACRA not started : " + e.getMessage());
-        }
-    }
-
-    /**
-     * <p>
-     * Initialize ACRA for a given Application.
-     *
-     * The call to this method should be placed as soon as possible in the {@link Application#attachBaseContext(Context)} method.
-     *
-     * Sends any unsent reports.
-     * </p>
-     *
-     * @param app       Your Application class.
-     * @param config    ACRAConfiguration to manually set up ACRA configuration.
-     * @throws IllegalStateException if it is called more than once.
-     */
-    public static void init(@NonNull Application app, @NonNull ACRAConfiguration config) {
-        init(app, config, true);
-    }
-
-    /**
-     * <p>
-     * Initialize ACRA for a given Application. The call to this method should
-     * be placed as soon as possible in the {@link Application#attachBaseContext(Context)}
-     * method.
-     * </p>
-     *
-     * @param app       Your Application class.
-     * @param config    ACRAConfiguration to manually set up ACRA configuration.
-     * @param checkReportsOnApplicationStart    Whether to invoke ErrorReporter.checkReportsOnApplicationStart().
-     * @throws IllegalStateException if it is called more than once.
-     */
-    public static void init(@NonNull Application app, @NonNull ACRAConfiguration config, boolean checkReportsOnApplicationStart){
-
-        final boolean senderServiceProcess = isACRASenderServiceProcess();
-        if (senderServiceProcess) {
-            if (ACRA.DEV_LOGGING) log.d(LOG_TAG, "Not initialising ACRA to listen for uncaught Exceptions as this is the SendWorker process and we only send reports, we don't capture them to avoid infinite loops");
-        }
-
-        final boolean supportedAndroidVersion = Build.VERSION.SDK_INT >= Build.VERSION_CODES.FROYO;
-        if (!supportedAndroidVersion){
-            // NB We keep initialising so that everything is configured. But ACRA is never enabled below.
-            log.w(LOG_TAG, "ACRA 4.7.0+ requires Froyo or greater. ACRA is disabled and will NOT catch crashes or send messages.");
-        }
-
-        if (mApplication != null) {
-            log.w(LOG_TAG, "ACRA#init called more than once. Won't do anything more.");
-            return;
-        }
-        mApplication = app;
-
-        //noinspection ConstantConditions
-        if (config == null) {
-            log.e(LOG_TAG, "ACRA#init called but no ACRAConfiguration provided");
-            return;
-        }
-        configProxy = config;
-
-        final SharedPreferences prefs = new SharedPreferencesFactory(mApplication, configProxy).create();
-
-        new LegacyFileHandler(app, prefs).updateToCurrentVersionIfNecessary();
-
-        // Initialize ErrorReporter with all required data
-        final boolean enableAcra = supportedAndroidVersion && !shouldDisableACRA(prefs);
-        if (!senderServiceProcess) {
-            // Indicate that ACRA is or is not listening for crashes.
-            log.i(LOG_TAG, "ACRA is " + (enableAcra ? "enabled" : "disabled") + " for " + mApplication.getPackageName() + ", initializing...");
-        }
-        errorReporterSingleton = new ErrorReporter(mApplication, configProxy, prefs, enableAcra, supportedAndroidVersion, !senderServiceProcess);
-
-        // Check for approved reports and send them (if enabled).
-        // NB don't check if senderServiceProcess as it will gather these reports itself.
-        if (checkReportsOnApplicationStart && !senderServiceProcess) {
-            final ApplicationStartupProcessor startupProcessor = new ApplicationStartupProcessor(mApplication,  config);
-            if (config.deleteOldUnsentReportsOnApplicationStart()) {
-                startupProcessor.deleteUnsentReportsFromOldAppVersion();
-            }
-            if (config.deleteUnapprovedReportsOnApplicationStart()) {
-                startupProcessor.deleteAllUnapprovedReportsBarOne();
-            }
-            if (enableAcra) {
-                startupProcessor.sendApprovedReports();
-            }
-        }
-
-        // We HAVE to keep a reference otherwise the listener could be garbage
-        // collected:
-        // http://stackoverflow.com/questions/2542938/sharedpreferences-onsharedpreferencechangelistener-not-being-called-consistently/3104265#3104265
-        mPrefListener = new OnSharedPreferenceChangeListener() {
-
-            @Override
-            public void onSharedPreferenceChanged(@NonNull SharedPreferences sharedPreferences, String key) {
-                if (PREF_DISABLE_ACRA.equals(key) || PREF_ENABLE_ACRA.equals(key)) {
-                    final boolean enableAcra = !shouldDisableACRA(sharedPreferences);
-                    getErrorReporter().setEnabled(enableAcra);
-                }
-            }
-        };
-
-        // This listener has to be set after initAcra is called to avoid a
-        // NPE in ErrorReporter.disable() because
-        // the context could be null at this moment.
-        prefs.registerOnSharedPreferenceChangeListener(mPrefListener);
-    }
-
-    /**
-     * @return true is ACRA has been initialised.
-     */
-    @SuppressWarnings("unused")
-    public static boolean isInitialised() {
-        return configProxy != null;
-    }
-
-    /**
-     * @return true if the current process is the process running the SenderService.
-     *          NB this assumes that your SenderService is configured to used the default ':acra' process.
-     */
-    public static boolean isACRASenderServiceProcess() {
-        final String processName = getCurrentProcessName();
-        if (ACRA.DEV_LOGGING) log.d(LOG_TAG, "ACRA processName='" + processName + '\'');
-        //processName sometimes (or always?) starts with the package name, so we use endsWith instead of equals
-        return processName != null && processName.endsWith(ACRA_PRIVATE_PROCESS_NAME);
-    }
-
-    @Nullable
-    private static String getCurrentProcessName() {
-        try {
-            return IOUtils.streamToString(new FileInputStream("/proc/self/cmdline")).trim();
-        } catch (IOException e) {
-            return null;
-        }
-    }
-
-    /**
-     * @return the current instance of ErrorReporter.
-     * @throws IllegalStateException if {@link ACRA#init(android.app.Application)} has not yet been called.
-     */
-    @NonNull
-    public static ErrorReporter getErrorReporter() {
-        if (errorReporterSingleton == null) {
-            throw new IllegalStateException("Cannot access ErrorReporter before ACRA#init");
-        }
-        return errorReporterSingleton;
-    }
-
-
-
-    /**
-     * Check if the application default shared preferences contains true for the
-     * key "acra.disable", do not activate ACRA. Also checks the alternative
-     * opposite setting "acra.enable" if "acra.disable" is not found.
-     *
-     * @param prefs
-     *            SharedPreferences to check to see whether ACRA should be
-     *            disabled.
-     * @return true if prefs indicate that ACRA should be disabled.
-     */
-    private static boolean shouldDisableACRA(@NonNull SharedPreferences prefs) {
-        boolean disableAcra = false;
-        try {
-            final boolean enableAcra = prefs.getBoolean(PREF_ENABLE_ACRA, true);
-            disableAcra = prefs.getBoolean(PREF_DISABLE_ACRA, !enableAcra);
-        } catch (Exception e) {
-            // In case of a ClassCastException
-        }
-        return disableAcra;
-    }
-
-    /**
-     * @return The Shared Preferences where ACRA will retrieve its user adjustable setting.
-     * @deprecated since 4.8.0 use {@link SharedPreferencesFactory} instead.
-     */
-    @SuppressWarnings( "unused" )
-    @NonNull
-    public static SharedPreferences getACRASharedPreferences() {
-        if (configProxy == null) {
-            throw new IllegalStateException("Cannot call ACRA.getACRASharedPreferences() before ACRA.init().");
-        }
-        return new SharedPreferencesFactory(mApplication, configProxy).create();
-    }
-
-    /**
-     * Provides the current ACRA configuration.
-     *
-     * @return Current ACRA {@link ReportsCrashes} configuration instance.
-     * @deprecated since 4.8.0 {@link ACRAConfiguration} should be passed into classes instead of retrieved statically.
-     */
-    @NonNull
-    public static ACRAConfiguration getConfig() {
-        if (configProxy == null) {
-            throw new IllegalStateException("Cannot call ACRA.getConfig() before ACRA.init().");
-        }
-        return configProxy;
-    }
-
-    public static void setLog(@NonNull ACRALog log) {
-        //noinspection ConstantConditions (do not rely on annotation alone)
-        if (log == null) {
-            throw new NullPointerException("ACRALog cannot be null");
-        }
-        ACRA.log = log;
-    }
-}
diff --git a/acra/src/main/java/org/acra/ACRAConstants.java b/acra/src/main/java/org/acra/ACRAConstants.java
deleted file mode 100644
index 07ffa3ff..00000000
--- a/acra/src/main/java/org/acra/ACRAConstants.java
+++ /dev/null
@@ -1,169 +0,0 @@
-/*
- *  Copyright 2012 Kevin Gaudin
- *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-package org.acra;
-
-import android.content.Context;
-import android.support.annotation.DrawableRes;
-import android.support.annotation.StringRes;
-
-import org.acra.dialog.CrashReportDialog;
-import org.acra.model.Element;
-import org.acra.model.StringElement;
-
-import static org.acra.ReportField.*;
-
-/**
- * Responsible for collating those constants shared among the ACRA components.
- * 
- * @author William Ferguson
- * @since 4.3.0
- */
-public final class ACRAConstants {
-    private ACRAConstants(){}
-
-    public static final String REPORTFILE_EXTENSION = ".stacktrace";
-
-    /**
-     * Suffix to be added to report files when they have been approved by the
-     * user in NOTIFICATION mode
-     */
-    public static final String APPROVED_SUFFIX = "-approved";
-    /**
-     * This key is used to store the silent state of a report sent by
-     * handleSilentException().
-     */
-    public static final String SILENT_SUFFIX = "-" + IS_SILENT;
-    /**
-     * This is the maximum number of previously stored reports that we send
-     * in one batch to avoid overloading the network.
-     */
-    public static final int MAX_SEND_REPORTS = 5;
-
-    /**
-     * Used in the intent starting CrashReportDialog to provide the name of the
-     * latest generated report file in order to be able to associate the user
-     * comment.
-     */
-    public static final String EXTRA_REPORT_FILE = "REPORT_FILE";
-
-    /**
-     * Used in the intent starting CrashReportDialog to provide the Exception that caused the crash.
-     *
-     * This can be used by any BaseCrashReportDialog subclass to custom the dialog.
-     */
-    public static final String EXTRA_REPORT_EXCEPTION = "REPORT_EXCEPTION";
-
-    /**
-     * Used in the intent starting CrashReportDialog to provide the AcraConfig to use when gathering the crash info.
-     *
-     * This can be used by any BaseCrashReportDialog subclass to custom the dialog.
-     */
-    public static final String EXTRA_REPORT_CONFIG = "REPORT_CONFIG";
-
-    /**
-     * Set this extra to true to force the deletion of reports by the {@link CrashReportDialog} activity.
-     */
-    public static final String EXTRA_FORCE_CANCEL = "FORCE_CANCEL";
-    /**
-     * This is the identifier (value = 666) use for the status bar notification issued when crashes occur.
-     */
-    public static final int NOTIF_CRASH_ID = 666;
-    /**
-     * Number of milliseconds to wait after displaying a toast.
-     */
-    public static final int TOAST_WAIT_DURATION = 2000;
-
-    /**
-     * A special String value to allow the usage of a pseudo-null default value
-     * in annotation parameters.
-     */
-    public static final String NULL_VALUE = "ACRA-NULL-STRING";
-
-    public static final boolean DEFAULT_REPORT_TO_ANDROID_FRAMEWORK = false;
-
-    public static final int DEFAULT_SOCKET_TIMEOUT = 20000;
-
-    public static final int DEFAULT_CONNECTION_TIMEOUT = 5000;
-
-    public static final boolean DEFAULT_DELETE_UNAPPROVED_REPORTS_ON_APPLICATION_START = true;
-
-    public static final boolean DEFAULT_DELETE_OLD_UNSENT_REPORTS_ON_APPLICATION_START = true;
-
-    public static final int DEFAULT_DROPBOX_COLLECTION_MINUTES = 5;
-
-    public static final boolean DEFAULT_INCLUDE_DROPBOX_SYSTEM_TAGS = false;
-
-    public static final int DEFAULT_SHARED_PREFERENCES_MODE = Context.MODE_PRIVATE;
-
-    @DrawableRes
-    public static final int DEFAULT_NOTIFICATION_ICON = android.R.drawable.stat_notify_error;
-
-    @DrawableRes
-    public static final int DEFAULT_DIALOG_ICON = android.R.drawable.ic_dialog_alert;
-
-    @StringRes
-    public static final int DEFAULT_DIALOG_POSITIVE_BUTTON_TEXT = android.R.string.ok;
-
-    @StringRes
-    public static final int DEFAULT_DIALOG_NEGATIVE_BUTTON_TEXT = android.R.string.cancel;
-
-    public static final int DEFAULT_RES_VALUE = 0;
-
-    public static final String DEFAULT_STRING_VALUE = "";
-
-    public static final int DEFAULT_LOGCAT_LINES = 100;
-
-    public static final int DEFAULT_BUFFER_SIZE_IN_BYTES = 8192;
-
-    public static final boolean DEFAULT_LOGCAT_FILTER_BY_PID = false;
-
-    public static final boolean DEFAULT_NON_BLOCKING_READ_FOR_LOGCAT = false;
-
-    public static final boolean DEFAULT_SEND_REPORTS_IN_DEV_MODE = true;
-
-    public static final String DEFAULT_APPLICATION_LOGFILE = DEFAULT_STRING_VALUE;
-
-    public static final int DEFAULT_APPLICATION_LOGFILE_LINES = DEFAULT_LOGCAT_LINES;
-
-    /**
-     * Default list of {@link ReportField}s to be sent in email reports. You can
-     * set your own list with
-     * {@link org.acra.annotation.ReportsCrashes#customReportContent()}.
-     * 
-     * @see org.acra.annotation.ReportsCrashes#mailTo()
-     */
-    public static final ReportField[] DEFAULT_MAIL_REPORT_FIELDS = { USER_COMMENT, ANDROID_VERSION, APP_VERSION_NAME,
-            BRAND, PHONE_MODEL, CUSTOM_DATA, STACK_TRACE };
-
-    /**
-     * Default list of {@link ReportField}s to be sent in reports. You can set
-     * your own list with
-     * {@link org.acra.annotation.ReportsCrashes#customReportContent()}.
-     */
-    public static final ReportField[] DEFAULT_REPORT_FIELDS = { REPORT_ID, APP_VERSION_CODE, APP_VERSION_NAME,
-            PACKAGE_NAME, FILE_PATH, PHONE_MODEL, BRAND, PRODUCT, ANDROID_VERSION, BUILD, TOTAL_MEM_SIZE,
-            AVAILABLE_MEM_SIZE, BUILD_CONFIG, CUSTOM_DATA, IS_SILENT, STACK_TRACE, INITIAL_CONFIGURATION, CRASH_CONFIGURATION,
-            DISPLAY, USER_COMMENT, USER_EMAIL, USER_APP_START_DATE, USER_CRASH_DATE, DUMPSYS_MEMINFO, LOGCAT,
-            INSTALLATION_ID, DEVICE_FEATURES, ENVIRONMENT, SHARED_PREFERENCES };
-
-    public static final String DATE_TIME_FORMAT_STRING = "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ";
-
-    public static final String DEFAULT_CERTIFICATE_TYPE = "X.509";
-
-    public static final Element NOT_AVAILABLE = new StringElement("N/A");
-
-    public static final String UTF8 = "UTF-8";
-}
diff --git a/acra/src/main/java/org/acra/CrashReportDialog.java b/acra/src/main/java/org/acra/CrashReportDialog.java
deleted file mode 100644
index ab733636..00000000
--- a/acra/src/main/java/org/acra/CrashReportDialog.java
+++ /dev/null
@@ -1,21 +0,0 @@
-package org.acra;
-
-import android.os.Bundle;
-
-import static org.acra.ACRA.LOG_TAG;
-
-
-/**
- * Old crash report dialog.
- *
- * @deprecated since 4.8.0 use {@link org.acra.dialog.CrashReportDialog} instead
- **/
-@Deprecated
-public final class CrashReportDialog extends org.acra.dialog.CrashReportDialog {
-
-    @Override
-    protected void buildAndShowDialog(Bundle savedInstanceState){
-        ACRA.log.w(LOG_TAG, "org.acra.CrashReportDialog has been deprecated. Please use org.acra.dialog.CrashReportDialog instead");
-        super.buildAndShowDialog(savedInstanceState);
-    }
-}
\ No newline at end of file
diff --git a/acra/src/main/java/org/acra/ErrorReporter.java b/acra/src/main/java/org/acra/ErrorReporter.java
deleted file mode 100644
index 2d56f0cb..00000000
--- a/acra/src/main/java/org/acra/ErrorReporter.java
+++ /dev/null
@@ -1,380 +0,0 @@
-/*
- *  Copyright 2010 Emmanuel Astier & Kevin Gaudin
- *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-package org.acra;
-
-import android.app.Application;
-import android.content.SharedPreferences;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-
-import org.acra.annotation.ReportsCrashes;
-import org.acra.builder.LastActivityManager;
-import org.acra.builder.NoOpReportPrimer;
-import org.acra.builder.ReportBuilder;
-import org.acra.builder.ReportExecutor;
-import org.acra.builder.ReportPrimer;
-import org.acra.collector.ConfigurationCollector;
-import org.acra.collector.CrashReportDataFactory;
-import org.acra.config.ACRAConfiguration;
-import org.acra.model.Element;
-import org.acra.util.ApplicationStartupProcessor;
-import org.acra.util.InstanceCreator;
-import org.acra.util.ProcessFinisher;
-
-import java.lang.Thread.UncaughtExceptionHandler;
-import java.util.Calendar;
-import java.util.GregorianCalendar;
-
-import static org.acra.ACRA.LOG_TAG;
-
-/**
- * <p>
- * The ErrorReporter is a Singleton object in charge of collecting crash context
- * data and sending crash reports. It registers itself as the Application's
- * Thread default {@link UncaughtExceptionHandler}.
- * </p>
- * <p>
- * When a crash occurs, it collects data of the crash context (device, system,
- * stack trace...) and writes a report file in the application private
- * directory. This report file is then sent:
- * </p>
- * <ul>
- * <li>immediately if {@link ReportsCrashes#mode()} is set to
- * {@link ReportingInteractionMode#SILENT} or
- * {@link ReportingInteractionMode#TOAST},</li>
- * <li>on application start if in the previous case the transmission could not
- * technically be made,</li>
- * <li>when the user accepts to send it if {@link ReportsCrashes#mode()} is set
- * to {@link ReportingInteractionMode#NOTIFICATION}.</li>
- * </ul>
- * <p>
- * If an error occurs while sending a report, it is kept for later attempts.
- * </p>
- */
-public class ErrorReporter implements Thread.UncaughtExceptionHandler {
-
-    private final boolean supportedAndroidVersion;
-
-    private final Application context;
-    @NonNull
-    private final ACRAConfiguration config;
-
-    @NonNull
-    private final CrashReportDataFactory crashReportDataFactory;
-    @NonNull
-    private final ReportExecutor reportExecutor;
-
-    @NonNull
-    private volatile ExceptionHandlerInitializer exceptionHandlerInitializer = new ExceptionHandlerInitializer() {
-        @Override
-        public void initializeExceptionHandler(ErrorReporter reporter) {
-        }
-    };
-
-
-    /**
-     * Can only be constructed from within this class.
-     *
-     * @param context   Context for the application in which ACRA is running.
-     * @param config    AcraConfig to use when reporting and sending errors.
-     * @param prefs     SharedPreferences used by ACRA.
-     * @param enabled   Whether this ErrorReporter should capture Exceptions and forward their reports.
-     * @param listenForUncaughtExceptions   Whether to listen for uncaught Exceptions.
-     */
-    ErrorReporter(@NonNull Application context, @NonNull ACRAConfiguration config, @NonNull SharedPreferences prefs,
-                  boolean enabled, boolean supportedAndroidVersion, boolean listenForUncaughtExceptions) {
-
-        this.context = context;
-        this.config = config;
-        this.supportedAndroidVersion = supportedAndroidVersion;
-
-        // Store the initial Configuration state.
-        // This is expensive to gather, so only do so if we plan to report it.
-        final Element initialConfiguration;
-        if (config.reportContent().contains(ReportField.INITIAL_CONFIGURATION)) {
-            initialConfiguration = ConfigurationCollector.collectConfiguration(this.context);
-        } else {
-            initialConfiguration = ACRAConstants.NOT_AVAILABLE;
-        }
-
-        // Sets the application start date.
-        // This will be included in the reports, will be helpful compared to user_crash date.
-        final Calendar appStartDate = new GregorianCalendar();
-
-        crashReportDataFactory = new CrashReportDataFactory(this.context, config, prefs, appStartDate, initialConfiguration);
-
-        final Thread.UncaughtExceptionHandler defaultExceptionHandler;
-        if (listenForUncaughtExceptions) {
-            defaultExceptionHandler = Thread.getDefaultUncaughtExceptionHandler();
-            Thread.setDefaultUncaughtExceptionHandler(this);
-        } else {
-            defaultExceptionHandler = null;
-        }
-
-        final LastActivityManager lastActivityManager = new LastActivityManager(this.context);
-        final InstanceCreator instanceCreator = new InstanceCreator();
-        final ReportPrimer reportPrimer = instanceCreator.create(config.reportPrimerClass(), new NoOpReportPrimer());
-        final ProcessFinisher processFinisher = new ProcessFinisher(context, config, lastActivityManager);
-
-        reportExecutor = new ReportExecutor(context, config, crashReportDataFactory, defaultExceptionHandler, reportPrimer, processFinisher);
-        reportExecutor.setEnabled(enabled);
-    }
-
-    /**
-     * Deprecated. Use {@link #putCustomData(String, String)}.
-     *
-     * @param key   A key for your custom data.
-     * @param value The value associated to your key.
-     */
-    @Deprecated
-    @SuppressWarnings("unused")
-    public void addCustomData(@NonNull String key, String value) {
-        putCustomData(key, value);
-    }
-
-    /**
-     * <p>
-     * Use this method to provide the ErrorReporter with data of your running
-     * application. You should call this at several key places in your code the
-     * same way as you would output important debug data in a log file. Only the
-     * latest value is kept for each key (no history of the values is sent in
-     * the report).
-     * </p>
-     *
-     * @param key   A key for your custom data.
-     * @param value The value associated to your key.
-     * @return The previous value for this key if there was one, or null.
-     * @see #removeCustomData(String)
-     * @see #getCustomData(String)
-     */
-    @SuppressWarnings("unused")
-    public String putCustomData(@NonNull String key, String value) {
-        return crashReportDataFactory.putCustomData(key, value);
-    }
-
-    /**
-     * <p>
-     * Use this method to perform additional initialization before the
-     * ErrorReporter handles a throwable. This can be used, for example, to put
-     * custom data using {@link #putCustomData(String, String)}, which is not
-     * available immediately after startup. It can be, for example, last 20
-     * requests or something else. The call is thread safe.
-     * </p>
-     * <p>
-     * {@link ExceptionHandlerInitializer#initializeExceptionHandler(ErrorReporter)}
-     * will be executed on the main thread in case of uncaught exception and on
-     * the caller thread of {@link #handleSilentException(Throwable)} or
-     * {@link #handleException(Throwable)}.
-     * </p>
-     * <p>
-     * Example. Add to the {@link Application#onCreate()}:
-     * </p>
-     *
-     * <pre>
-     * ACRA.getErrorReporter().setExceptionHandlerInitializer(new ExceptionHandlerInitializer() {
-     *     <code>@Override</code> public void initializeExceptionHandler(ErrorReporter reporter) {
-     *         reporter.putCustomData("CUSTOM_ACCUMULATED_DATA_TAG", someAccumulatedData.toString);
-     *     }
-     * });
-     * </pre>
-     *
-     * @param initializer   The initializer. Can be <code>null</code>.
-     * @deprecated since 4.8.0 use {@link ReportPrimer} mechanism instead.
-     */
-    public void setExceptionHandlerInitializer(@Nullable ExceptionHandlerInitializer initializer) {
-        exceptionHandlerInitializer = (initializer != null)
-                ? initializer
-                : new ExceptionHandlerInitializer() {
-                    @Override
-                    public void initializeExceptionHandler(ErrorReporter reporter) {
-                    }
-                };
-    }
-
-    /**
-     * Removes a key/value pair from your reports custom data field.
-     *
-     * @param key   The key of the data to be removed.
-     * @return The value for this key before removal.
-     * @see #putCustomData(String, String)
-     * @see #getCustomData(String)
-     */
-    @SuppressWarnings("unused")
-    public String removeCustomData(@NonNull String key) {
-        return crashReportDataFactory.removeCustomData(key);
-    }
-
-    /**
-     * Removes all key/value pairs from your reports custom data field.
-     */
-    @SuppressWarnings("unused")
-    public void clearCustomData() {
-        crashReportDataFactory.clearCustomData();
-    }
-
-    /**
-     * Gets the current value for a key in your reports custom data field.
-     *
-     * @param key
-     *            The key of the data to be retrieved.
-     * @return The value for this key.
-     * @see #putCustomData(String, String)
-     * @see #removeCustomData(String)
-     */
-    @SuppressWarnings("unused")
-    public String getCustomData(@NonNull String key) {
-        return crashReportDataFactory.getCustomData(key);
-    }
-
-    /*
-     * (non-Javadoc)
-     *
-     * @see
-     * java.lang.Thread.UncaughtExceptionHandler#uncaughtException(java.lang
-     * .Thread, java.lang.Throwable)
-     */
-    @Override
-    public void uncaughtException(@Nullable Thread t, @NonNull Throwable e) {
-
-        // If we're not enabled then just pass the Exception on to the defaultExceptionHandler.
-        if (!reportExecutor.isEnabled()) {
-            reportExecutor.handReportToDefaultExceptionHandler(t, e);
-            return;
-        }
-
-        try {
-            ACRA.log.e(LOG_TAG, "ACRA caught a " + e.getClass().getSimpleName() + " for " + context.getPackageName(), e);
-            if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Building report");
-
-            performDeprecatedReportPriming();
-
-            // Generate and send crash report
-            new ReportBuilder()
-                .uncaughtExceptionThread(t)
-                .exception(e)
-                .endApplication()
-                .build(reportExecutor);
-
-        } catch (Throwable fatality) {
-            // ACRA failed. Prevent any recursive call to ACRA.uncaughtException(), let the native reporter do its job.
-            ACRA.log.e(LOG_TAG, "ACRA failed to capture the error - handing off to native error reporter" , fatality);
-            reportExecutor.handReportToDefaultExceptionHandler(t, e);
-        }
-    }
-
-    /**
-     * Mark this report as silent as send it.
-     *
-     * @param e The {@link Throwable} to be reported. If null the report will
-     *          contain a new Exception("Report requested by developer").
-     */
-    @SuppressWarnings("unused")
-    public void handleSilentException(@Nullable Throwable e) {
-        performDeprecatedReportPriming();
-        new ReportBuilder()
-                .exception(e)
-                .sendSilently()
-                .build(reportExecutor);
-    }
-
-    /**
-     * Enable or disable this ErrorReporter. By default it is enabled.
-     *
-     * @param enabled
-     *            Whether this ErrorReporter should capture Exceptions and
-     *            forward them as crash reports.
-     */
-    public void setEnabled(boolean enabled) {
-        if (supportedAndroidVersion) {
-            ACRA.log.i(LOG_TAG, "ACRA is " + (enabled ? "enabled" : "disabled") + " for " + context.getPackageName());
-            reportExecutor.setEnabled(enabled);
-        } else {
-            ACRA.log.w(LOG_TAG, "ACRA 4.7.0+ requires Froyo or greater. ACRA is disabled and will NOT catch crashes or send messages.");
-        }
-    }
-
-    /**
-     * This method looks for pending reports and does the action required depending on the interaction mode set.
-     *
-     * There is no need to call this method as ACRA will by default check for errors on report start.
-     *
-     * Whether ACRA checks for reports on app start is controlled by {@link ACRA#init(Application, ACRAConfiguration, boolean)},
-     * but the default is that it will.
-     *
-     * @deprecated since 4.8.0 No replacement.
-     */
-    @SuppressWarnings( " unused" )
-    public void checkReportsOnApplicationStart() {
-        final ApplicationStartupProcessor startupProcessor = new ApplicationStartupProcessor(context,  config);
-        if (config.deleteOldUnsentReportsOnApplicationStart()) {
-            startupProcessor.deleteUnsentReportsFromOldAppVersion();
-        }
-        if (config.deleteUnapprovedReportsOnApplicationStart()) {
-            startupProcessor.deleteAllUnapprovedReportsBarOne();
-        }
-        if (reportExecutor.isEnabled()) {
-            startupProcessor.sendApprovedReports();
-        }
-    }
-
-    /**
-     * Send a report for a {@link Throwable} with the reporting interaction mode
-     * configured by the developer.
-     *
-     * @param e
-     *            The {@link Throwable} to be reported. If null the report will
-     *            contain a new Exception("Report requested by developer").
-     * @param endApplication
-     *            Set this to true if you want the application to be ended after
-     *            sending the report.
-     */
-    @SuppressWarnings("unused")
-    public void handleException(@Nullable Throwable e, boolean endApplication) {
-        performDeprecatedReportPriming();
-        final ReportBuilder builder = new ReportBuilder();
-        builder.exception(e);
-        if (endApplication) {
-            builder.endApplication();
-        }
-        builder.build(reportExecutor);
-    }
-
-    /**
-     * Send a report for a {@link Throwable} with the reporting interaction mode
-     * configured by the developer, the application is then killed and restarted
-     * by the system.
-     *
-     * @param e
-     *            The {@link Throwable} to be reported. If null the report will
-     *            contain a new Exception("Report requested by developer").
-     */
-    @SuppressWarnings("unused")
-    public void handleException(@Nullable Throwable e) {
-        handleException(e, false);
-    }
-
-    /**
-     * This method is only here to support the deprecated {@link ExceptionHandlerInitializer} mechanism
-     * for adding additional data to a crash report.
-     */
-    private void performDeprecatedReportPriming() {
-        try {
-            exceptionHandlerInitializer.initializeExceptionHandler(this);
-        } catch (Exception exceptionInRunnable) {
-            ACRA.log.w(LOG_TAG, "Failed to initialize " + exceptionHandlerInitializer + " from #handleException");
-        }
-    }
-}
\ No newline at end of file
diff --git a/acra/src/main/java/org/acra/ExceptionHandlerInitializer.java b/acra/src/main/java/org/acra/ExceptionHandlerInitializer.java
deleted file mode 100644
index 4e48616c..00000000
--- a/acra/src/main/java/org/acra/ExceptionHandlerInitializer.java
+++ /dev/null
@@ -1,19 +0,0 @@
-package org.acra;
-
-/**
- * The interface can be used with
- * {@link ErrorReporter#setExceptionHandlerInitializer(ExceptionHandlerInitializer)}
- * to add an additional initialization of the {@link ErrorReporter} before
- * exception is handled.
- * 
- * @see ErrorReporter#setExceptionHandlerInitializer(ExceptionHandlerInitializer)
- * @deprecated since 4.8.0 use {@link org.acra.builder.ReportPrimer} mechanism instead.
- */
-public interface ExceptionHandlerInitializer {
-    /**
-     * Called before {@link ErrorReporter} handles the Exception.
-     * 
-     * @param reporter The {@link ErrorReporter} that will handle the exception
-     */
-    void initializeExceptionHandler(ErrorReporter reporter);
-}
\ No newline at end of file
diff --git a/acra/src/main/java/org/acra/ReportingInteractionMode.java b/acra/src/main/java/org/acra/ReportingInteractionMode.java
deleted file mode 100644
index 1d553857..00000000
--- a/acra/src/main/java/org/acra/ReportingInteractionMode.java
+++ /dev/null
@@ -1,53 +0,0 @@
-/*
- *  Copyright 2010 Emmanuel Astier & Kevin Gaudin
- *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-package org.acra;
-
-/**
- * Defines the different user interaction modes for ACRA.
- * <ul>
- * <li>SILENT: No interaction, reports are sent silently and a "Force close"
- * dialog terminates the app.</li>
- * <li>TOAST: A simple Toast is triggered when the application crashes, the
- * Force close dialog is not displayed.</li>
- * <li>NOTIFICATION: A status bar notification is triggered when the application
- * crashes, the Force close dialog is not displayed. When the user selects the
- * notification, a dialog is displayed asking him if he is ok to send a report</li>
- * </ul>
- */
-public enum ReportingInteractionMode {
-    /**
-     * No interaction, reports are sent silently and a "Force close" dialog
-     * terminates the app.
-     */
-    SILENT,
-    /**
-     * A status bar notification is triggered when the application crashes, the
-     * Force close dialog is not displayed. When the user selects the
-     * notification, a dialog is displayed asking him if he is ok to send a
-     * report.
-     */
-    NOTIFICATION,
-    /**
-     * A simple Toast is triggered when the application crashes, the Force close
-     * dialog is not displayed.
-     */
-    TOAST,
-    /**
-     * Direct dialog: a report confirmation dialog is displayed right after the crash.
-     * Will replace {@link #NOTIFICATION} mode.
-     */
-    DIALOG
-}
\ No newline at end of file
diff --git a/acra/src/main/java/org/acra/annotation/ReportsCrashes.java b/acra/src/main/java/org/acra/annotation/ReportsCrashes.java
deleted file mode 100644
index 0a12f031..00000000
--- a/acra/src/main/java/org/acra/annotation/ReportsCrashes.java
+++ /dev/null
@@ -1,664 +0,0 @@
-/*
- *  Copyright 2010 Emmanuel Astier & Kevin Gaudin
- *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-package org.acra.annotation;
-
-import android.support.annotation.DrawableRes;
-import android.support.annotation.NonNull;
-import android.support.annotation.RawRes;
-import android.support.annotation.StringRes;
-import android.support.annotation.StyleRes;
-
-import org.acra.ACRA;
-import org.acra.ACRAConstants;
-import org.acra.ReportField;
-import org.acra.ReportingInteractionMode;
-import org.acra.attachment.AttachmentUriProvider;
-import org.acra.attachment.DefaultAttachmentProvider;
-import org.acra.builder.NoOpReportPrimer;
-import org.acra.builder.ReportPrimer;
-import org.acra.config.DefaultRetryPolicy;
-import org.acra.config.RetryPolicy;
-import org.acra.dialog.BaseCrashReportDialog;
-import org.acra.dialog.CrashReportDialog;
-import org.acra.file.Directory;
-import org.acra.security.KeyStoreFactory;
-import org.acra.security.NoKeyStoreFactory;
-import org.acra.sender.DefaultReportSenderFactory;
-import org.acra.sender.HttpSender;
-import org.acra.sender.ReportSenderFactory;
-
-import java.lang.annotation.Documented;
-import java.lang.annotation.ElementType;
-import java.lang.annotation.Inherited;
-import java.lang.annotation.Retention;
-import java.lang.annotation.RetentionPolicy;
-import java.lang.annotation.Target;
-
-/**
- * Provide configuration elements to the
- * {@link ACRA#init(android.app.Application)} method.
- *
- * @author Kevin Gaudin
- */
-@Documented
-@Retention(RetentionPolicy.RUNTIME)
-@Target(ElementType.TYPE)
-@Inherited
-@Configuration
-public @interface ReportsCrashes {
-
-    /**
-     * The Uri of your own server-side script that will receive reports.
-     *
-     * @return URI of a custom server to which to post reports.
-     */
-    @NonNull String formUri() default ACRAConstants.DEFAULT_STRING_VALUE;
-
-    /**
-     * <p>
-     * The interaction mode you want to implement. Default is
-     * {@link ReportingInteractionMode#SILENT} which does not require any
-     * resources configuration.
-     * </p>
-     * <p>
-     * Other modes have resources requirements:
-     * </p>
-     * <ul>
-     * <li>{@link ReportingInteractionMode#TOAST} requires
-     * {@link #resToastText()} to be provided to define the text that you want
-     * to be displayed to the user when a report is being sent.</li>
-     * <li>{@link ReportingInteractionMode#NOTIFICATION} requires
-     * {@link #resNotifTickerText()}, {@link #resNotifTitle()},
-     * {@link #resNotifText()}, {@link #resDialogText()}.</li>
-     * <li>{@link ReportingInteractionMode#DIALOG} requires
-     * {@link #resDialogText()}.</li>
-     * </ul>
-     * <p>
-     * Default is {@link ReportingInteractionMode#SILENT}
-     * </p>
-     *
-     * @return the interaction mode that you want ACRA to implement.
-     */
-    @Name("reportingInteractionMode")
-    @NonNull ReportingInteractionMode mode() default ReportingInteractionMode.SILENT;
-
-    /**
-     * @return Resource id for the label of positive button in the crash dialog.
-     * If not provided, defaults to 'OK'.
-     */
-    @StringRes int resDialogPositiveButtonText() default ACRAConstants.DEFAULT_DIALOG_POSITIVE_BUTTON_TEXT;
-
-    /**
-     * @return Resource id for the label of negative button in the crash dialog.
-     * If not provided, defaults to 'cancel'.
-     */
-    @StringRes int resDialogNegativeButtonText() default ACRAConstants.DEFAULT_DIALOG_NEGATIVE_BUTTON_TEXT;
-
-    /**
-     * @return Resource id for the user comment input label in the crash dialog.
-     * If not provided, disables the input field.
-     */
-    @StringRes int resDialogCommentPrompt() default ACRAConstants.DEFAULT_RES_VALUE;
-
-    /**
-     * @return Resource id for the user email address input label in the crash
-     * dialog. If not provided, disables the input field.
-     */
-    @StringRes int resDialogEmailPrompt() default ACRAConstants.DEFAULT_RES_VALUE;
-
-    /**
-     * @return Resource id for the icon in the crash dialog. Default value is
-     * the system alert icon.
-     */
-    @DrawableRes int resDialogIcon() default ACRAConstants.DEFAULT_DIALOG_ICON;
-
-    /**
-     * @return Resource id for the Toast text triggered when the user accepts to
-     * send a report in the crash dialog.
-     */
-    @StringRes int resDialogOkToast() default ACRAConstants.DEFAULT_RES_VALUE;
-
-    /**
-     * @return Resource id for the text in the crash dialog.
-     */
-    @StringRes int resDialogText() default ACRAConstants.DEFAULT_RES_VALUE;
-
-    /**
-     * @return Resource id for the title in the crash dialog.
-     */
-    @StringRes int resDialogTitle() default ACRAConstants.DEFAULT_RES_VALUE;
-
-    /**
-     * @return resource id for the crash dialog theme
-     */
-    @StyleRes int resDialogTheme() default ACRAConstants.DEFAULT_RES_VALUE;
-
-    /**
-     * @return Resource id for the icon in the status bar notification. Default
-     * is the system error notification icon.
-     */
-    @DrawableRes int resNotifIcon() default ACRAConstants.DEFAULT_NOTIFICATION_ICON;
-
-    /**
-     * @return Resource id for the text in the status bar notification.
-     */
-    @StringRes int resNotifText() default ACRAConstants.DEFAULT_RES_VALUE;
-
-    /**
-     * @return Resource id for the ticker text in the status bar notification.
-     */
-    @StringRes int resNotifTickerText() default ACRAConstants.DEFAULT_RES_VALUE;
-
-    /**
-     * @return Resource id for the title in the status bar notification.
-     */
-    @StringRes int resNotifTitle() default ACRAConstants.DEFAULT_RES_VALUE;
-
-    /**
-     * Resource id for the Toast text triggered when the application crashes if
-     * the {@link ReportingInteractionMode#TOAST} mode is used. Can also be used
-     * in {@link ReportingInteractionMode#NOTIFICATION} and
-     * {@link ReportingInteractionMode#DIALOG} modes to display a Toast message
-     * while the report is being created, before the dialog/notification
-     * appears. This allows the user to know what is happening just before the
-     * application is terminated.
-     *
-     * @return Resource id for the Toast text triggered when the application
-     * crashes.
-     */
-    @StringRes int resToastText() default ACRAConstants.DEFAULT_RES_VALUE;
-
-    /**
-     * @return Name of the SharedPreferences that will host ACRA settings you
-     * can make accessible to your users through a preferences screen:
-     * <ul>
-     * <li>
-     * {@link org.acra.ACRA#PREF_DISABLE_ACRA} or {@link org.acra.ACRA#PREF_ENABLE_ACRA}</li>
-     * <li>
-     * {@link org.acra.ACRA#PREF_ALWAYS_ACCEPT}</li>
-     * <li>
-     * {@link org.acra.ACRA#PREF_ENABLE_DEVICE_ID}</li>
-     * <li>
-     * {@link org.acra.ACRA#PREF_ENABLE_SYSTEM_LOGS}</li>
-     * </ul>
-     * preference. Default is to use the application default
-     * SharedPreferences, as retrieved with
-     * {@link android.preference.PreferenceManager#getDefaultSharedPreferences(android.content.Context)}.
-     */
-    @NonNull String sharedPreferencesName() default ACRAConstants.DEFAULT_STRING_VALUE;
-
-    /**
-     * If using a custom {@link ReportsCrashes#sharedPreferencesName()}, pass
-     * here the mode that you need for the SharedPreference file creation:
-     * {@link android.content.Context#MODE_PRIVATE}, {@link android.content.Context#MODE_WORLD_READABLE} or
-     * {@link android.content.Context#MODE_WORLD_WRITEABLE}. Default is
-     * {@link android.content.Context#MODE_PRIVATE}.
-     *
-     * @return Mode to use with the SharedPreference creation.
-     * @see android.content.Context#getSharedPreferences(String, int)
-     */
-    int sharedPreferencesMode() default ACRAConstants.DEFAULT_SHARED_PREFERENCES_MODE;
-
-    /**
-     * If enabled, DropBox events collection will include system tags:
-     * <ul>
-     * <li>system_app_anr</li>
-     * <li>system_app_wtf</li>
-     * <li>system_app_crash</li>
-     * <li>system_server_anr</li>
-     * <li>system_server_wtf</li>
-     * <li>system_server_crash</li>
-     * <li>BATTERY_DISCHARGE_INFO</li>
-     * <li>SYSTEM_RECOVERY_LOG</li>
-     * <li>SYSTEM_BOOT</li>
-     * <li>SYSTEM_LAST_KMSG</li>
-     * <li>APANIC_CONSOLE</li>
-     * <li>APANIC_THREADS</li>
-     * <li>SYSTEM_RESTART</li>
-     * <li>SYSTEM_TOMBSTONE</li>
-     * <li>data_app_strictmode</li>
-     * </ul>
-     *
-     * @return True if system tags are to be included as part of DropBox events.
-     */
-    boolean includeDropBoxSystemTags() default ACRAConstants.DEFAULT_INCLUDE_DROPBOX_SYSTEM_TAGS;
-
-    /**
-     * @return Array of tags that you want to be fetched when collecting DropBox
-     * entries.
-     */
-    @NonNull String[] additionalDropBoxTags() default {};
-
-    /**
-     * @return Number of minutes to look back when collecting events from
-     * DropBoxManager.
-     */
-    int dropboxCollectionMinutes() default ACRAConstants.DEFAULT_DROPBOX_COLLECTION_MINUTES;
-
-    /**
-     * <p>
-     * Arguments to be passed to the logcat command line. Default is { "-t",
-     * "100", "-v", "time" } for:
-     * </p>
-     * <pre>
-     * logcat -t 100 -v time
-     * </pre>
-     * <p>
-     * Do not include -b arguments for buffer selection, include
-     * {@link ReportField#EVENTSLOG} and {@link ReportField#RADIOLOG} in
-     * {@link ReportsCrashes#customReportContent()} to activate alternative
-     * logcat buffers reporting. They will use the same other arguments as those
-     * provided here.
-     * </p>
-     * <p>
-     * See <a href=
-     * "http://developer.android.com/intl/fr/guide/developing/tools/adb.html#logcatoptions"
-     * >Listing of logcat Command Options</a>.
-     * </p>
-     *
-     * @return Array of arguments to supply if retrieving the log as part of the
-     * report.
-     */
-    @NonNull String[] logcatArguments() default {"-t", "" + ACRAConstants.DEFAULT_LOGCAT_LINES, "-v", "time"};
-
-    /**
-     * When using the {@link #formUri()} parameter to send reports to a custom
-     * server-side script, you can set here and in
-     * {@link #formUriBasicAuthPassword()} the credentials for a BASIC HTTP
-     * authentication.
-     *
-     * @return Login to use when posting reports to a custom server.
-     */
-    @NonNull String formUriBasicAuthLogin() default ACRAConstants.NULL_VALUE;
-
-    /**
-     * When using the {@link #formUri()} parameter to send reports to a custom
-     * server-side script, you can set here and in
-     * {@link #formUriBasicAuthLogin()} the credentials for a BASIC HTTP
-     * authentication.
-     *
-     * @return Password to use when posting reports to a custom server.
-     */
-    @NonNull String formUriBasicAuthPassword() default ACRAConstants.NULL_VALUE;
-
-    /**
-     * <p>
-     * Redefines the list of {@link ReportField}s collected and sent in your
-     * reports.
-     * </p>
-     * <p>
-     * The fields order is significant. You can also use this property to modify
-     * fields order in your reports.
-     * </p>
-     * <p>
-     * The default list is the following, except if you send reports by mail
-     * using {@link #mailTo()}.
-     * </p>
-     * <ul>
-     * <li>
-     * {@link ReportField#REPORT_ID}</li>
-     * <li>
-     * {@link ReportField#APP_VERSION_CODE}</li>
-     * <li>
-     * {@link ReportField#APP_VERSION_NAME}</li>
-     * <li>
-     * {@link ReportField#PACKAGE_NAME}</li>
-     * <li>
-     * {@link ReportField#FILE_PATH}</li>
-     * <li>
-     * {@link ReportField#PHONE_MODEL}</li>
-     * <li>
-     * {@link ReportField#BRAND}</li>
-     * <li>
-     * {@link ReportField#PRODUCT}</li>
-     * <li>
-     * {@link ReportField#ANDROID_VERSION}</li>
-     * <li>
-     * {@link ReportField#BUILD}</li>
-     * <li>
-     * {@link ReportField#TOTAL_MEM_SIZE}</li>
-     * <li>
-     * {@link ReportField#AVAILABLE_MEM_SIZE}</li>
-     * <li>
-     * {@link ReportField#CUSTOM_DATA}</li>
-     * <li>
-     * {@link ReportField#IS_SILENT}</li>
-     * <li>
-     * {@link ReportField#STACK_TRACE}</li>
-     * <li>
-     * {@link ReportField#INITIAL_CONFIGURATION}</li>
-     * <li>
-     * {@link ReportField#CRASH_CONFIGURATION}</li>
-     * <li>
-     * {@link ReportField#DISPLAY}</li>
-     * <li>
-     * {@link ReportField#USER_COMMENT}</li>
-     * <li>
-     * {@link ReportField#USER_EMAIL}</li>
-     * <li>
-     * {@link ReportField#USER_APP_START_DATE}</li>
-     * <li>
-     * {@link ReportField#USER_CRASH_DATE}</li>
-     * <li>
-     * {@link ReportField#DUMPSYS_MEMINFO}</li>
-     * <li>
-     * {@link ReportField#LOGCAT}</li>
-     * <li>
-     * {@link ReportField#INSTALLATION_ID}</li>
-     * <li>
-     * {@link ReportField#DEVICE_FEATURES}</li>
-     * <li>
-     * {@link ReportField#ENVIRONMENT}</li>
-     * <li>
-     * {@link ReportField#SHARED_PREFERENCES}</li>
-     * <li>
-     * {@link ReportField#SETTINGS_SYSTEM}</li>
-     * <li>
-     * {@link ReportField#SETTINGS_SECURE}</li>
-     * <li>
-     * {@link ReportField#SETTINGS_GLOBAL}</li>
-     * </ul>
-     *
-     * @return ReportField Array listing the fields to be included in the
-     * report.
-     */
-    @NonNull ReportField[] customReportContent() default {};
-
-    /**
-     * <p>
-     * Add your crash reports mailbox here if you want to send reports via
-     * email. This allows to get rid of the INTERNET permission. Reports content
-     * can be customized with {@link #customReportContent()} . Default fields
-     * are:
-     * </p>
-     * <ul>
-     * <li>
-     * {@link ReportField#USER_COMMENT}</li>
-     * <li>
-     * {@link ReportField#ANDROID_VERSION}</li>
-     * <li>
-     * {@link ReportField#APP_VERSION_NAME}</li>
-     * <li>
-     * {@link ReportField#BRAND}</li>
-     * <li>
-     * {@link ReportField#PHONE_MODEL}</li>
-     * <li>
-     * {@link ReportField#CUSTOM_DATA}</li>
-     * <li>
-     * {@link ReportField#STACK_TRACE}</li>
-     * </ul>
-     *
-     * @return email address to which to send reports.
-     */
-    @NonNull String mailTo() default ACRAConstants.DEFAULT_STRING_VALUE;
-
-    /**
-     * Controls whether unapproved reports are deleted on application start or not.
-     * Default is true.
-     * <p>
-     * Silent and Toast reports are automatically approved.
-     * Dialog and Notification reports required explicit approval by the user before they are sent.
-     * </p>
-     * <p>
-     * On application restart the user is prompted with approval for any unsent reports.
-     * So you generally don't want to accumulate unapproved reports, otherwise you will prompt them multiple times.
-     * </p>
-     * <p>
-     * If this is set to true then all unapproved reports bar one will be deleted on application start.
-     * The last report is always retained because that is the report that probably just happened.
-     * </p>
-     * <p>
-     * If set to false then on restart the user will be prompted with approval for each unapproved report.
-     * </p>
-     *
-     * @return true if ACRA should delete unapproved reports on application start.
-     */
-    boolean deleteUnapprovedReportsOnApplicationStart() default ACRAConstants.DEFAULT_DELETE_UNAPPROVED_REPORTS_ON_APPLICATION_START;
-
-    /**
-     * This property can be used to determine whether old (out of date) reports
-     * should be sent or not. By default they are discarded.
-     *
-     * @return true if ACRA should delete any unsent reports on startup if the
-     * application has been updated since the last time the application
-     * was started.
-     */
-    boolean deleteOldUnsentReportsOnApplicationStart() default ACRAConstants.DEFAULT_DELETE_OLD_UNSENT_REPORTS_ON_APPLICATION_START;
-
-    /**
-     * @return Value in milliseconds for timeout attempting to connect to a network (default 5000ms).
-     */
-    int connectionTimeout() default ACRAConstants.DEFAULT_CONNECTION_TIMEOUT;
-
-    /**
-     * If the request is retried due to timeout, the socketTimeout will double
-     * before retrying the request.
-     *
-     * @return Value in milliseconds for timeout receiving a response to a network request (default 8000ms).
-     */
-    int socketTimeout() default ACRAConstants.DEFAULT_SOCKET_TIMEOUT;
-
-    /**
-     * Set this to true if you prefer displaying the native force close dialog after the ACRA is done.
-     * Recommended: Keep this set to false if using {@link ReportingInteractionMode#DIALOG} for notification.
-     *
-     * @return true if the native force close dialog should be displayed.
-     */
-    boolean alsoReportToAndroidFramework() default ACRAConstants.DEFAULT_REPORT_TO_ANDROID_FRAMEWORK;
-
-    /**
-     * Add here your {@link android.content.SharedPreferences} identifier Strings if you use
-     * others than your application's default. They will be added to the
-     * {@link ReportField#SHARED_PREFERENCES} field.
-     *
-     * @return String Array containing the names of the additional preferences.
-     */
-    @NonNull String[] additionalSharedPreferences() default {};
-
-    /**
-     * Set this to true if you want to include only logcat lines related to your
-     * Application process.
-     *
-     * @return true if you want to filter logcat with your process id.
-     */
-    boolean logcatFilterByPid() default ACRAConstants.DEFAULT_LOGCAT_FILTER_BY_PID;
-
-    /**
-     * Set this to true if you want to read logcat lines in a non blocking way for your
-     * thread. It has a default timeout of 3 seconds.
-     *
-     * @return true if you want that reading of logcat lines to not block current thread.
-     */
-    boolean nonBlockingReadForLogcat() default ACRAConstants.DEFAULT_NON_BLOCKING_READ_FOR_LOGCAT;
-
-    /**
-     * Set this to false if you want to disable sending reports in development
-     * mode. Only signed application packages will send reports. Default value
-     * is true.
-     *
-     * @return false if reports should not be sent.
-     */
-    boolean sendReportsInDevMode() default ACRAConstants.DEFAULT_SEND_REPORTS_IN_DEV_MODE;
-
-    /**
-     * @return true.
-     * @deprecated since 4.8.3 no replacement. Now that we are using the SenderService in a separate process we always send at shutdown.
-     */
-    @Deprecated
-    boolean sendReportsAtShutdown() default true;
-
-    /**
-     * Provide here regex patterns to be evaluated on each SharedPreference key
-     * to exclude KV pairs from the collected SharedPreferences. This allows you
-     * to exclude sensitive user data like passwords to be collected.
-     *
-     * @return an array of regex patterns, every matching key is not collected.
-     */
-    @NonNull String[] excludeMatchingSharedPreferencesKeys() default {};
-
-    /**
-     * Provide here regex patterns to be evaluated on each Settings.System,
-     * Settings.Secure and Settings.Global key to exclude KV pairs from the
-     * collected SharedPreferences. This allows you to exclude sensitive data to
-     * be collected.
-     *
-     * @return an array of regex patterns, every matching key is not collected.
-     */
-    @NonNull String[] excludeMatchingSettingsKeys() default {};
-
-    /**
-     * The default value will be a BuildConfig class residing in the same package as the Application class.
-     *
-     * @return BuildConfig class from which to read any BuildConfig attributes.
-     */
-    @NonNull Class buildConfigClass() default Object.class;
-
-    /**
-     * The default {@link org.acra.sender.ReportSenderFactory} creates an {@link org.acra.sender.EmailIntentSender}
-     * if the 'mailTo' parameter is defined or an {@link org.acra.sender.HttpSender} if the 'formUri' parameter
-     * is defined (and internet permission has been granted.
-     *
-     * @return List of the {@link org.acra.sender.ReportSenderFactory} with which to construct the
-     * {@link org.acra.sender.ReportSender}s that will send the crash reports.
-     */
-    @NonNull Class<? extends ReportSenderFactory>[] reportSenderFactoryClasses() default {DefaultReportSenderFactory.class};
-
-    /**
-     * To use in combination with {@link ReportField#APPLICATION_LOG} to set the
-     * path/name of your application log file. If the string does not contain
-     * any path separator, the file is assumed as being in
-     * {@link android.content.Context#getFilesDir()}.
-     *
-     * @return a String containing the path/name of your application log file.
-     * If the string does not contain any path separator, the file is
-     * assumed as being in {@link android.content.Context#getFilesDir()}.
-     */
-    @NonNull String applicationLogFile() default ACRAConstants.DEFAULT_APPLICATION_LOGFILE;
-
-    /**
-     * To use in combination with {@link ReportField#APPLICATION_LOG} to set the
-     * number of latest lines of your application log file to be collected.
-     * Default value is 100.
-     *
-     * @return number of lines to collect.
-     */
-    int applicationLogFileLines() default ACRAConstants.DEFAULT_APPLICATION_LOGFILE_LINES;
-
-    /**
-     * To use in combination with {@link ReportField#APPLICATION_LOG} to set the root
-     * for the path provided in {@link #applicationLogFile()}
-     *
-     * @return the directory of the application log file
-     */
-    @NonNull Directory applicationLogFileDir() default Directory.FILES_LEGACY;
-
-    /**
-     * @return Class for the CrashReportDialog used when prompting the user for crash details.
-     * If not provided, defaults to CrashReportDialog.class
-     */
-    @NonNull Class<? extends BaseCrashReportDialog> reportDialogClass() default CrashReportDialog.class;
-
-    /**
-     * @return Class that is ued to provide any extra details for a crash.
-     */
-    @NonNull Class<? extends ReportPrimer> reportPrimerClass() default NoOpReportPrimer.class;
-
-    /**
-     * <p>
-     * The {@link HttpSender.Method} to be used when posting with {@link #formUri()}.
-     * </p>
-     *
-     * @return HTTP method used when posting reports.
-     */
-    @NonNull HttpSender.Method httpMethod() default HttpSender.Method.POST;
-
-    /**
-     * <p>
-     * The {@link HttpSender.Type} to be used when posting with {@link #formUri()}.
-     * </p>
-     *
-     * @return the report type used when posting reports
-     */
-    @NonNull HttpSender.Type reportType() default HttpSender.Type.FORM;
-
-    /**
-     * @return Class which creates a keystore that can contain trusted certificates
-     */
-    @NonNull Class<? extends KeyStoreFactory> keyStoreFactoryClass() default NoKeyStoreFactory.class;
-
-    /**
-     * @return path to a custom trusted certificate. Must start with "asset://" if the file is in the assets folder
-     */
-    @NonNull String certificatePath() default ACRAConstants.DEFAULT_STRING_VALUE;
-
-    /**
-     * @return resource id of a custom trusted certificate.
-     */
-    @RawRes int resCertificate() default ACRAConstants.DEFAULT_RES_VALUE;
-
-    /**
-     * @return specify the type of the certificate set in either {@link #certificatePath()} or {@link #resCertificate()}
-     */
-    @NonNull String certificateType() default ACRAConstants.DEFAULT_CERTIFICATE_TYPE;
-
-    /**
-     * @return a Class that decides if a report should be resent (usually if one or more senders failed).
-     * @since 4.9.1
-     */
-    @NonNull Class<? extends RetryPolicy> retryPolicyClass() default DefaultRetryPolicy.class;
-
-    /**
-     * @return true if all services running in a process should be stopped before it is killed.
-     * @since 4.9.2
-     */
-    boolean stopServicesOnCrash() default false;
-
-    /**
-     * Allows to attach files to crash reports.
-     * <p>
-     * ACRA contains a file provider under the following Uri:
-     * content://[applicationId].acra/[Directory]/[Path]
-     * where [applicationId] is your application package name,
-     * [Directory] is one of the enum constants in {@link Directory} in lower case
-     * and [Path] is the relative path to the file in that directory
-     * e.g. content://org.acra.provider/files/thisIsATest.txt
-     * </p>
-     * Side effects:
-     * <ul>
-     * <li>POST mode: requests will be sent with content-type multipart/mixed</li>
-     * <li>PUT mode: There will be additional requests with the attachments. Naming scheme: [report-id]-[filename] </li>
-     * <li>EMAIL mode: Some email clients do not support attachments, so some email may lack these attachments.
-     * Note that attachments will be readable to email clients when they are sent.</li>
-     * </ul>
-     *
-     * @return uris to be attached to crash reports.
-     * @since 4.9.3
-     */
-    @NonNull String[] attachmentUris() default {};
-
-    /**
-     * Allows attachmentUri configuration at runtime instead of compile time.
-     *
-     * @return a class that decides which uris should be attached to reports
-     * @since 4.9.3
-     */
-    @NonNull Class<? extends AttachmentUriProvider> attachmentUriProvider() default DefaultAttachmentProvider.class;
-
-    /**
-     * @return if the report should be an attachment instead of plain text. Supported for email mode.
-     */
-    boolean reportAsFile() default false;
-}
diff --git a/acra/src/main/java/org/acra/attachment/AttachmentUriProvider.java b/acra/src/main/java/org/acra/attachment/AttachmentUriProvider.java
deleted file mode 100644
index c1514de7..00000000
--- a/acra/src/main/java/org/acra/attachment/AttachmentUriProvider.java
+++ /dev/null
@@ -1,20 +0,0 @@
-package org.acra.attachment;
-
-import android.content.Context;
-import android.net.Uri;
-import android.support.annotation.NonNull;
-
-import org.acra.config.ACRAConfiguration;
-
-import java.util.List;
-
-/**
- * @author F43nd1r
- * @since 09.03.2017
- */
-
-public interface AttachmentUriProvider {
-
-    @NonNull
-    List<Uri> getAttachments(Context context, ACRAConfiguration configuration);
-}
diff --git a/acra/src/main/java/org/acra/attachment/DefaultAttachmentProvider.java b/acra/src/main/java/org/acra/attachment/DefaultAttachmentProvider.java
deleted file mode 100644
index 178af90e..00000000
--- a/acra/src/main/java/org/acra/attachment/DefaultAttachmentProvider.java
+++ /dev/null
@@ -1,34 +0,0 @@
-package org.acra.attachment;
-
-import android.content.Context;
-import android.net.Uri;
-import android.support.annotation.NonNull;
-
-import org.acra.ACRA;
-import org.acra.config.ACRAConfiguration;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import static org.acra.ACRA.LOG_TAG;
-
-/**
- * @author F43nd1r
- * @since 10.03.2017
- */
-
-public class DefaultAttachmentProvider implements AttachmentUriProvider {
-    @NonNull
-    @Override
-    public List<Uri> getAttachments(Context context, ACRAConfiguration configuration) {
-        final ArrayList<Uri> result = new ArrayList<Uri>();
-        for (String s : configuration.attachmentUris()){
-            try {
-                result.add(Uri.parse(s));
-            }catch (Exception e){
-                ACRA.log.e(LOG_TAG, "Failed to parse Uri " + s, e);
-            }
-        }
-        return result;
-    }
-}
diff --git a/acra/src/main/java/org/acra/builder/LastActivityManager.java b/acra/src/main/java/org/acra/builder/LastActivityManager.java
deleted file mode 100644
index 83f1c8f9..00000000
--- a/acra/src/main/java/org/acra/builder/LastActivityManager.java
+++ /dev/null
@@ -1,95 +0,0 @@
-package org.acra.builder;
-
-import android.app.Activity;
-import android.app.Application;
-import android.os.Build;
-import android.os.Bundle;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-
-import org.acra.ACRA;
-import org.acra.dialog.BaseCrashReportDialog;
-
-import java.lang.ref.WeakReference;
-
-import static org.acra.ACRA.LOG_TAG;
-
-/**
- * Responsible for tracking the last Activity other than any CrashReport dialog that was created.
- *
- * @since 4.8.0
- */
-public final class LastActivityManager {
-
-    @NonNull
-    private WeakReference<Activity> lastActivityCreated = new WeakReference<Activity>(null);
-
-    public LastActivityManager(@NonNull Application application) {
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.ICE_CREAM_SANDWICH) {
-
-            // ActivityLifecycleCallback only available for API14+
-            application.registerActivityLifecycleCallbacks(new Application.ActivityLifecycleCallbacks() {
-                @Override
-                public void onActivityCreated(@NonNull Activity activity, Bundle savedInstanceState) {
-                    if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "onActivityCreated " + activity.getClass());
-                    if (!(activity instanceof BaseCrashReportDialog)) {
-                        // Ignore CrashReportDialog because we want the last
-                        // application Activity that was started so that we can explicitly kill it off.
-                        lastActivityCreated = new WeakReference<Activity>(activity);
-                    }
-                }
-
-                @Override
-                public void onActivityStarted(@NonNull Activity activity) {
-                    if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "onActivityStarted " + activity.getClass());
-                }
-
-                @Override
-                public void onActivityResumed(@NonNull Activity activity) {
-                    if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "onActivityResumed " + activity.getClass());
-                }
-
-                @Override
-                public void onActivityPaused(@NonNull Activity activity) {
-                    if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "onActivityPaused " + activity.getClass());
-                }
-
-                @Override
-                public void onActivityStopped(@NonNull Activity activity) {
-                    if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "onActivityStopped " + activity.getClass());
-                    synchronized (this){
-                        notify();
-                    }
-                }
-
-                @Override
-                public void onActivitySaveInstanceState(@NonNull Activity activity, Bundle outState) {
-                    if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "onActivitySaveInstanceState " + activity.getClass());
-                }
-
-                @Override
-                public void onActivityDestroyed(@NonNull Activity activity) {
-                    if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "onActivityDestroyed " + activity.getClass());
-                }
-            });
-        }
-    }
-
-    @Nullable
-    public Activity getLastActivity() {
-        return lastActivityCreated.get();
-    }
-
-    public void clearLastActivity() {
-        lastActivityCreated.clear();
-    }
-
-    public void waitForActivityStop(int timeOutInMillis){
-        synchronized (this) {
-            try {
-                wait(timeOutInMillis);
-            } catch (InterruptedException ignored) {
-            }
-        }
-    }
-}
diff --git a/acra/src/main/java/org/acra/builder/NoOpReportPrimer.java b/acra/src/main/java/org/acra/builder/NoOpReportPrimer.java
deleted file mode 100644
index 586ac940..00000000
--- a/acra/src/main/java/org/acra/builder/NoOpReportPrimer.java
+++ /dev/null
@@ -1,16 +0,0 @@
-package org.acra.builder;
-
-import android.content.Context;
-
-/**
- * Does not perform any priming for the current report.
- *
- * @since 4.8.0
- */
-public final class NoOpReportPrimer implements ReportPrimer {
-
-    @Override
-    public void primeReport(Context context, ReportBuilder builder) {
-        // Nothing to do.
-    }
-}
diff --git a/acra/src/main/java/org/acra/builder/ReportExecutor.java b/acra/src/main/java/org/acra/builder/ReportExecutor.java
deleted file mode 100644
index 4f6dfc8d..00000000
--- a/acra/src/main/java/org/acra/builder/ReportExecutor.java
+++ /dev/null
@@ -1,380 +0,0 @@
-package org.acra.builder;
-
-import android.app.Notification;
-import android.app.NotificationManager;
-import android.app.PendingIntent;
-import android.content.Context;
-import android.content.Intent;
-import android.content.SharedPreferences;
-import android.os.Debug;
-import android.os.Looper;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.support.v4.app.NotificationCompat;
-import android.widget.Toast;
-
-import org.acra.ACRA;
-import org.acra.ACRAConstants;
-import org.acra.ReportingInteractionMode;
-import org.acra.collector.CrashReportData;
-import org.acra.collector.CrashReportDataFactory;
-import org.acra.config.ACRAConfiguration;
-import org.acra.dialog.CrashReportDialog;
-import org.acra.file.CrashReportPersister;
-import org.acra.file.ReportLocator;
-import org.acra.prefs.SharedPreferencesFactory;
-import org.acra.sender.SenderServiceStarter;
-import org.acra.util.ProcessFinisher;
-import org.acra.util.ToastSender;
-
-import java.io.File;
-import java.util.Date;
-
-import static org.acra.ACRA.LOG_TAG;
-import static org.acra.ReportField.IS_SILENT;
-import static org.acra.ReportField.USER_CRASH_DATE;
-
-/**
- * Collates, records and initiates the sending of a report.
- *
- * @since 4.8.0
- */
-public final class ReportExecutor {
-
-    private final Context context;
-    private final ACRAConfiguration config;
-    private final CrashReportDataFactory crashReportDataFactory;
-
-    // A reference to the system's previous default UncaughtExceptionHandler
-    // kept in order to execute the default exception handling after sending the report.
-    private final Thread.UncaughtExceptionHandler defaultExceptionHandler;
-
-    private final ReportPrimer reportPrimer;
-    private final ProcessFinisher processFinisher;
-
-    private boolean enabled = false;
-
-    /**
-     * Used to create a new (non-cached) PendingIntent each time a new crash occurs.
-     */
-    private static int mNotificationCounter = 0;
-
-    public ReportExecutor(@NonNull Context context, @NonNull ACRAConfiguration config,
-                          @NonNull CrashReportDataFactory crashReportDataFactory, @Nullable Thread.UncaughtExceptionHandler defaultExceptionHandler,
-                          @NonNull ReportPrimer reportPrimer, @NonNull ProcessFinisher processFinisher) {
-        this.context = context;
-        this.config = config;
-        this.crashReportDataFactory = crashReportDataFactory;
-        this.defaultExceptionHandler = defaultExceptionHandler;
-        this.reportPrimer = reportPrimer;
-        this.processFinisher = processFinisher;
-    }
-
-    /**
-     * Helps manage
-     */
-    private static class TimeHelper {
-
-        private Long initialTimeMillis;
-
-        public void setInitialTimeMillis(long initialTimeMillis) {
-            this.initialTimeMillis = initialTimeMillis;
-        }
-
-        /**
-         * @return 0 if the initial time has yet to be set otherwise returns the difference between now and the initial time.
-         */
-        public long getElapsedTime() {
-            return (initialTimeMillis == null) ? 0 : System.currentTimeMillis() - initialTimeMillis;
-        }
-    }
-
-    public void handReportToDefaultExceptionHandler(@Nullable Thread t, @NonNull Throwable e) {
-        if (defaultExceptionHandler != null) {
-            ACRA.log.i(LOG_TAG, "ACRA is disabled for " + context.getPackageName()
-                    + " - forwarding uncaught Exception on to default ExceptionHandler");
-            defaultExceptionHandler.uncaughtException(t, e);
-        } else {
-            ACRA.log.e(LOG_TAG, "ACRA is disabled for " + context.getPackageName() + " - no default ExceptionHandler");
-            ACRA.log.e(LOG_TAG, "ACRA caught a " + e.getClass().getSimpleName() + " for " + context.getPackageName(), e);
-        }
-
-    }
-
-    public boolean isEnabled() {
-        return enabled;
-    }
-
-    public void setEnabled(boolean enabled) {
-        this.enabled = enabled;
-    }
-
-    /**
-     * Try to send a report, if an error occurs stores a report file for a later attempt.
-     *
-     * @param reportBuilder The report builder used to assemble the report
-     */
-    public void execute(@NonNull final ReportBuilder reportBuilder) {
-
-        if (!enabled) {
-            ACRA.log.v(LOG_TAG, "ACRA is disabled. Report not sent.");
-            return;
-        }
-
-        // Prime this crash report with any extra data.
-        reportPrimer.primeReport(context, reportBuilder);
-
-        boolean sendOnlySilentReports = false;
-        final ReportingInteractionMode reportingInteractionMode;
-        if (!reportBuilder.isSendSilently()) {
-            // No interaction mode defined in the ReportBuilder, we assume it has been set during ACRA.initACRA()
-            reportingInteractionMode = config.reportingInteractionMode();
-        } else {
-            reportingInteractionMode = ReportingInteractionMode.SILENT;
-
-            // An interaction mode has been provided. If ACRA has been
-            // initialized with a non SILENT mode and this mode is overridden
-            // with SILENT, then we have to send only reports which have been
-            // explicitly declared as silent via handleSilentException().
-            if (config.reportingInteractionMode() != ReportingInteractionMode.SILENT) {
-                sendOnlySilentReports = true;
-            }
-        }
-
-        final boolean shouldDisplayToast = reportingInteractionMode == ReportingInteractionMode.TOAST
-                || (config.resToastText() != 0 && (reportingInteractionMode == ReportingInteractionMode.NOTIFICATION || reportingInteractionMode == ReportingInteractionMode.DIALOG));
-
-        final TimeHelper sentToastTimeMillis = new TimeHelper();
-        if (shouldDisplayToast) {
-            new Thread() {
-
-                /*
-                 * (non-Javadoc)
-                 *
-                 * @see java.lang.Thread#run()
-                 */
-                @Override
-                public void run() {
-                    Looper.prepare();
-                    ToastSender.sendToast(context, config.resToastText(), Toast.LENGTH_LONG);
-                    sentToastTimeMillis.setInitialTimeMillis(System.currentTimeMillis());
-                    Looper.loop();
-                }
-
-            }.start();
-
-            // We will wait a few seconds at the end of the method to be sure
-            // that the Toast can be read by the user.
-        }
-
-        final CrashReportData crashReportData = crashReportDataFactory.createCrashData(reportBuilder);
-
-        // Always write the report file
-
-        final File reportFile = getReportFileName(crashReportData);
-        saveCrashReportFile(reportFile, crashReportData);
-
-        final SharedPreferences prefs = new SharedPreferencesFactory(context, config).create();
-        if (reportingInteractionMode == ReportingInteractionMode.SILENT
-                || reportingInteractionMode == ReportingInteractionMode.TOAST
-                || prefs.getBoolean(ACRA.PREF_ALWAYS_ACCEPT, false)) {
-
-            // Approve and then send reports now
-            startSendingReports(sendOnlySilentReports);
-            if ((reportingInteractionMode == ReportingInteractionMode.SILENT) && !reportBuilder.isEndApplication()) {
-                // Report is being sent silently and the application is not ending.
-                // So no need to wait around for the sender to complete.
-                return;
-            }
-
-        } else if (reportingInteractionMode == ReportingInteractionMode.NOTIFICATION) {
-            if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Creating Notification.");
-            createNotification(reportFile, reportBuilder);
-        }
-
-        final boolean showDirectDialog = (reportingInteractionMode == ReportingInteractionMode.DIALOG)
-                && !prefs.getBoolean(ACRA.PREF_ALWAYS_ACCEPT, false);
-
-        if (shouldDisplayToast) {
-            // A toast is being displayed, we have to wait for its end before doing anything else.
-            if (ACRA.DEV_LOGGING)
-                ACRA.log.d(LOG_TAG, "Waiting for " + ACRAConstants.TOAST_WAIT_DURATION
-                        + " millis from " + sentToastTimeMillis.initialTimeMillis
-                        + " currentMillis=" + System.currentTimeMillis());
-            final long sleep = ACRAConstants.TOAST_WAIT_DURATION - sentToastTimeMillis.getElapsedTime();
-            try {
-                // Wait a bit to let the user read the toast
-                if (sleep > 0L) Thread.sleep(sleep);
-            } catch (InterruptedException e1) {
-                if (ACRA.DEV_LOGGING)
-                    ACRA.log.d(LOG_TAG, "Interrupted while waiting for Toast to end.", e1);
-            }
-            if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Finished waiting for Toast");
-        }
-        dialogAndEnd(reportBuilder, reportFile, showDirectDialog);
-    }
-
-    private void dialogAndEnd(@NonNull ReportBuilder reportBuilder, @NonNull File reportFile, boolean shouldShowDialog) {
-        if (shouldShowDialog) {
-            // Create a new activity task with the confirmation dialog.
-            // This new task will be persisted on application restart
-            // right after its death.
-            if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Creating CrashReportDialog for " + reportFile);
-            final Intent dialogIntent = createCrashReportDialogIntent(reportFile, reportBuilder);
-            dialogIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-            context.startActivity(dialogIntent);
-        }
-
-        if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Wait for Toast + worker ended. Kill Application ? " + reportBuilder.isEndApplication());
-
-        if (reportBuilder.isEndApplication()) {
-            if (Debug.isDebuggerConnected()) {
-                //Killing a process with a debugger attached would kill the whole application, so don't do that.
-                final String warning = "Warning: Acra may behave differently with a debugger attached";
-                new Thread() {
-                    @Override
-                    public void run() {
-                        Looper.prepare();
-                        Toast.makeText(context, warning, Toast.LENGTH_LONG).show();
-                        Looper.loop();
-                    }
-                }.start();
-                ACRA.log.w(LOG_TAG, warning);
-                //do as much cleanup as we can without killing the process
-                processFinisher.finishLastActivity(reportBuilder.getUncaughtExceptionThread());
-            } else {
-                endApplication(reportBuilder.getUncaughtExceptionThread(), reportBuilder.getException());
-            }
-        }
-    }
-
-    /**
-     * End the application.
-     */
-    private void endApplication(@Nullable Thread uncaughtExceptionThread, Throwable th) {
-        final boolean letDefaultHandlerEndApplication = config.alsoReportToAndroidFramework();
-
-        final boolean handlingUncaughtException = uncaughtExceptionThread != null;
-        if (handlingUncaughtException && letDefaultHandlerEndApplication && defaultExceptionHandler != null) {
-            // Let the system default handler do it's job and display the force close dialog.
-            if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Handing Exception on to default ExceptionHandler");
-            defaultExceptionHandler.uncaughtException(uncaughtExceptionThread, th);
-        } else {
-            processFinisher.endApplication(uncaughtExceptionThread);
-        }
-    }
-
-    /**
-     * Starts a Thread to start sending outstanding error reports.
-     *
-     * @param onlySendSilentReports If true then only send silent reports.
-     */
-    private void startSendingReports(boolean onlySendSilentReports) {
-        if (enabled) {
-            final SenderServiceStarter starter = new SenderServiceStarter(context, config);
-            starter.startService(onlySendSilentReports, true);
-        } else {
-            ACRA.log.w(LOG_TAG, "Would be sending reports, but ACRA is disabled");
-        }
-    }
-
-    /**
-     * Creates a status bar notification.
-     *
-     * The action triggered when the notification is selected is to start the
-     * {@link CrashReportDialog} Activity.
-     *
-     * @param reportFile Report file to send.
-     */
-    private void createNotification(@NonNull File reportFile, @NonNull ReportBuilder reportBuilder) {
-
-        final NotificationManager notificationManager = (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);
-
-        // Default notification icon is the warning symbol
-        final int icon = config.resNotifIcon();
-
-        final CharSequence tickerText = context.getText(config.resNotifTickerText());
-        final long when = System.currentTimeMillis();
-
-        if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Creating Notification for " + reportFile);
-        final Intent crashReportDialogIntent = createCrashReportDialogIntent(reportFile, reportBuilder);
-        final PendingIntent contentIntent = PendingIntent.getActivity(context, mNotificationCounter++, crashReportDialogIntent, PendingIntent.FLAG_UPDATE_CURRENT);
-
-        final CharSequence contentTitle = context.getText(config.resNotifTitle());
-        final CharSequence contentText = context.getText(config.resNotifText());
-
-        final NotificationCompat.Builder builder = new NotificationCompat.Builder(context);
-        final Notification notification = builder
-                .setSmallIcon(icon)
-                .setTicker(tickerText)
-                .setWhen(when)
-                .setAutoCancel(true)
-                .setContentTitle(contentTitle)
-                .setContentText(contentText)
-                .setContentIntent(contentIntent)
-                .build();
-
-        notification.flags |= Notification.FLAG_AUTO_CANCEL;
-
-        // The deleteIntent is invoked when the user swipes away the Notification.
-        // In this case we invoke the CrashReportDialog with EXTRA_FORCE_CANCEL==true
-        // which will cause BaseCrashReportDialog to clear the crash report and finish itself.
-        final Intent deleteIntent = createCrashReportDialogIntent(reportFile, reportBuilder);
-        deleteIntent.putExtra(ACRAConstants.EXTRA_FORCE_CANCEL, true);
-        notification.deleteIntent = PendingIntent.getActivity(context, -1, deleteIntent, 0);
-
-        // Send new notification
-        notificationManager.notify(ACRAConstants.NOTIF_CRASH_ID, notification);
-    }
-
-    @NonNull
-    private File getReportFileName(@NonNull CrashReportData crashData) {
-        final String timestamp = crashData.getProperty(USER_CRASH_DATE);
-        final String isSilent = crashData.getProperty(IS_SILENT);
-        final String fileName = (timestamp != null ? timestamp : new Date().getTime()) // Need to check for null because old version of ACRA did not always capture USER_CRASH_DATE
-                + (isSilent != null ? ACRAConstants.SILENT_SUFFIX : "")
-                + ACRAConstants.REPORTFILE_EXTENSION;
-        final ReportLocator reportLocator = new ReportLocator(context);
-        return new File(reportLocator.getUnapprovedFolder(), fileName);
-    }
-
-    /**
-     * When a report can't be sent, it is saved here in a file in the root of
-     * the application private directory.
-     *
-     * @param file      In a few rare cases, we write the report again with additional
-     *                  data (user comment for example). In such cases, you can
-     *                  provide the already existing file name here to overwrite the
-     *                  report file. If null, a new file report will be generated
-     * @param crashData Can be used to save an alternative (or previously generated)
-     *                  report data. Used to store again a report with the addition of
-     *                  user comment. If null, the default current crash data are
-     *                  used.
-     */
-    private void saveCrashReportFile(@NonNull File file, @NonNull CrashReportData crashData) {
-        try {
-            if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Writing crash report file " + file);
-            final CrashReportPersister persister = new CrashReportPersister();
-            persister.store(crashData, file);
-        } catch (Exception e) {
-            ACRA.log.e(LOG_TAG, "An error occurred while writing the report file...", e);
-        }
-    }
-
-
-    /**
-     * Creates an Intent that can be used to create and show a CrashReportDialog.
-     *
-     * @param reportFile    Error report file to display in the crash report dialog.
-     * @param reportBuilder ReportBuilder containing the details of the crash.
-     */
-    @NonNull
-    private Intent createCrashReportDialogIntent(@NonNull File reportFile, @NonNull ReportBuilder reportBuilder) {
-        if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Creating DialogIntent for " + reportFile + " exception=" + reportBuilder.getException());
-        final Intent dialogIntent = new Intent(context, config.reportDialogClass());
-        dialogIntent.putExtra(ACRAConstants.EXTRA_REPORT_FILE, reportFile);
-        dialogIntent.putExtra(ACRAConstants.EXTRA_REPORT_EXCEPTION, reportBuilder.getException());
-        dialogIntent.putExtra(ACRAConstants.EXTRA_REPORT_CONFIG, config);
-        return dialogIntent;
-    }
-}
diff --git a/acra/src/main/java/org/acra/builder/ReportPrimer.java b/acra/src/main/java/org/acra/builder/ReportPrimer.java
deleted file mode 100644
index ee03d9b5..00000000
--- a/acra/src/main/java/org/acra/builder/ReportPrimer.java
+++ /dev/null
@@ -1,30 +0,0 @@
-package org.acra.builder;
-
-import android.content.Context;
-
-import java.util.Map;
-
-/**
- * Primes a {@link ReportBuilder} with any extra data to record for the current crash report.
- *
- * ReportPrimer is configured declaratively via {@link org.acra.annotation.ReportsCrashes#reportPrimerClass()}.
- * The ReportPrimer class MUST have a no arg constructor and is created when ACRA is initialised.
- *
- * Created by William on 9 Jan 2016.
- * @since 4.8.0
- */
-public interface ReportPrimer {
-
-    /**
-     * Update builder via {@link ReportBuilder#customData(Map)} or {@link ReportBuilder#customData(String, String)}
-     * with any extra dta application to just this crash.
-     *
-     * Builder is fully constructed when this method is called, so it can be introspected for details of the crash.
-     *
-     * Note that this method will only be called if ACRA is currently enabled.
-     *
-     * @param context   Application context from which to retrieve resources.
-     * @param builder   Full configured {@link ReportBuilder} for the current crash report.
-     */
-    void primeReport(Context context, ReportBuilder builder);
-}
diff --git a/acra/src/main/java/org/acra/collector/Collector.java b/acra/src/main/java/org/acra/collector/Collector.java
deleted file mode 100644
index 7de6c49c..00000000
--- a/acra/src/main/java/org/acra/collector/Collector.java
+++ /dev/null
@@ -1,77 +0,0 @@
-/*
- *  Copyright 2016
- *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-package org.acra.collector;
-
-import android.support.annotation.NonNull;
-import android.support.annotation.Size;
-
-import org.acra.ReportField;
-import org.acra.builder.ReportBuilder;
-import org.acra.model.Element;
-
-import java.util.Set;
-
-/**
- * Represents a collector.
- * Maintains information on which fields can be collected by this collector.
- * Validates constraints in which a field should (not) be collected.
- *
- * @author F43nd1r
- * @since 4.9.1
- */
-abstract class Collector {
-    private final ReportField[] reportFields;
-
-    /**
-     * create a new Collector that is able to collect these reportFields
-     * (Note: @Size is currently not working for varargs, it is still here as a hint to developers)
-     *
-     * @param reportFields the supported reportFields
-     */
-    Collector(@Size(min = 1) @NonNull ReportField... reportFields) {
-        this.reportFields = reportFields;
-    }
-
-    /**
-     * @return all fields this collector can collect
-     */
-    @NonNull
-    final ReportField[] canCollect() {
-        return reportFields;
-    }
-
-    /**
-     * this should check if the set contains the field, but may add additional checks like permissions etc.
-     *
-     * @param crashReportFields configured fields
-     * @param collect           the filed to collect
-     * @param reportBuilder     the current reportBuilder
-     * @return if this field should be collected now
-     */
-    boolean shouldCollect(Set<ReportField> crashReportFields, ReportField collect, ReportBuilder reportBuilder) {
-        return crashReportFields.contains(collect);
-    }
-
-    /**
-     * will only be called if shouldCollect returned true for this ReportField
-     *
-     * @param reportField   the ReportField to collect
-     * @param reportBuilder the current reportBuilder
-     * @return Element of what was collected
-     */
-    @NonNull
-    abstract Element collect(ReportField reportField, ReportBuilder reportBuilder);
-}
diff --git a/acra/src/main/java/org/acra/collector/CrashReportData.java b/acra/src/main/java/org/acra/collector/CrashReportData.java
deleted file mode 100644
index 73ab4f60..00000000
--- a/acra/src/main/java/org/acra/collector/CrashReportData.java
+++ /dev/null
@@ -1,77 +0,0 @@
-/*
- *  Copyright 2012 Kevin Gaudin
- *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-
-package org.acra.collector;
-
-import android.support.annotation.NonNull;
-
-import org.acra.ReportField;
-import org.acra.model.BooleanElement;
-import org.acra.model.Element;
-import org.acra.model.NumberElement;
-import org.acra.model.StringElement;
-import org.acra.util.JsonUtils;
-import org.json.JSONObject;
-
-import java.util.EnumMap;
-import java.util.Properties;
-
-/**
- * Stores a crash reports data with {@link org.acra.ReportField} enum values as keys.
- * <p>
- * This is basically the source of {@link Properties} adapted to extend an
- * EnumMap instead of Hashtable and with a few tweaks to avoid losing crazy
- * amounts of android time in the generation of a date comment when storing to file.
- */
-public final class CrashReportData extends EnumMap<ReportField, Element> {
-
-    private static final long serialVersionUID = 5002578634500874842L;
-
-    /**
-     * Constructs a new {@code Properties} object.
-     */
-    public CrashReportData() {
-        super(ReportField.class);
-    }
-
-    /**
-     * Returns the property with the specified name.
-     *
-     * @param key the name of the property to find.
-     * @return the named property value, or {@code null} if it can't be found.
-     */
-    public String getProperty(@NonNull ReportField key) {
-        return super.get(key).toString();
-    }
-
-    public void putString(@NonNull ReportField key, String value) {
-        put(key, new StringElement(value));
-    }
-
-    public void putNumber(@NonNull ReportField key, Number value) {
-        put(key, new NumberElement(value));
-    }
-
-    public void putBoolean(@NonNull ReportField key, boolean value) {
-        put(key, new BooleanElement(value));
-    }
-
-    @NonNull
-    public JSONObject toJSON() {
-        return JsonUtils.toJson(this);
-    }
-
-}
diff --git a/acra/src/main/java/org/acra/collector/CrashReportDataFactory.java b/acra/src/main/java/org/acra/collector/CrashReportDataFactory.java
deleted file mode 100644
index fead91d7..00000000
--- a/acra/src/main/java/org/acra/collector/CrashReportDataFactory.java
+++ /dev/null
@@ -1,173 +0,0 @@
-/*
- *  Copyright 2012 Kevin Gaudin
- *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-
-package org.acra.collector;
-
-import android.content.Context;
-import android.content.SharedPreferences;
-import android.support.annotation.NonNull;
-
-import org.acra.ACRA;
-import org.acra.ReportField;
-import org.acra.builder.ReportBuilder;
-import org.acra.config.ACRAConfiguration;
-import org.acra.model.Element;
-import org.acra.util.PackageManagerWrapper;
-
-import java.util.ArrayList;
-import java.util.Calendar;
-import java.util.LinkedHashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-
-import static org.acra.ACRA.LOG_TAG;
-
-/**
- * Responsible for creating the CrashReportData for an Exception.
- * <p>
- * Also responsible for holding the custom data to send with each report.
- * </p>
- *
- * @author William Ferguson
- * @since 4.3.0
- */
-public final class CrashReportDataFactory {
-
-    private final Context context;
-    private final ACRAConfiguration config;
-    private final SharedPreferences prefs;
-    private final Map<String, String> customParameters = new LinkedHashMap<String, String>();
-    private final Calendar appStartDate;
-    private final Element initialConfiguration;
-
-    public CrashReportDataFactory(@NonNull Context context, @NonNull ACRAConfiguration config,
-                                  @NonNull SharedPreferences prefs, @NonNull Calendar appStartDate,
-                                  @NonNull Element initialConfiguration) {
-        this.context = context;
-        this.config = config;
-        this.prefs = prefs;
-        this.appStartDate = appStartDate;
-        this.initialConfiguration = initialConfiguration;
-    }
-
-    /**
-     * <p>
-     * Adds a custom key and value to be reported with the generated
-     * CashReportData.
-     * </p>
-     * <p>
-     * The key/value pairs will be stored in the "custom" column, as a text
-     * containing one 'key = value' pair on each line.
-     * </p>
-     *
-     * @param key   A key for your custom data.
-     * @param value The value associated to your key.
-     * @return The previous value for this key if there was one, or null.
-     */
-    public String putCustomData(@NonNull String key, String value) {
-        return customParameters.put(key, value);
-    }
-
-    /**
-     * Removes a key/value pair from the custom data field.
-     *
-     * @param key The key of the data to be removed.
-     * @return The value for this key before removal.
-     */
-    public String removeCustomData(@NonNull String key) {
-        return customParameters.remove(key);
-    }
-
-    /**
-     * Removes all key/value pairs from the custom data field.
-     */
-    public void clearCustomData() {
-        customParameters.clear();
-    }
-
-    /**
-     * Gets the current value for a key in the custom data field.
-     *
-     * @param key The key of the data to be retrieved.
-     * @return The value for this key.
-     */
-    public String getCustomData(@NonNull String key) {
-        return customParameters.get(key);
-    }
-
-    /**
-     * Collects crash data.
-     *
-     * @param builder ReportBuilder for whom to crete the crash report.
-     * @return CrashReportData identifying the current crash.
-     */
-    @NonNull
-    public CrashReportData createCrashData(@NonNull ReportBuilder builder) {
-        final CrashReportData crashReportData = new CrashReportData();
-        try {
-            final Set<ReportField> crashReportFields = config.reportContent();
-            final List<Collector> collectors = getCollectorsOrdered();
-
-            //this will iterate over all collectors in descending order of priority
-            for (Collector collector : collectors) {
-                //catch absolutely everything possible here so no collector obstructs the others
-                try {
-                    for (ReportField reportField : collector.canCollect()) {
-                        try {
-                            if (collector.shouldCollect(crashReportFields, reportField, builder)) {
-                                crashReportData.put(reportField, collector.collect(reportField, builder));
-                            }
-                        } catch (RuntimeException e) {
-                            ACRA.log.e(LOG_TAG, "Error while retrieving " + reportField.name() + " data", e);
-                        }
-                    }
-                } catch (RuntimeException e) {
-                    ACRA.log.e(LOG_TAG, "Error in collector " + collector.getClass().getSimpleName(), e);
-                }
-            }
-
-        } catch (RuntimeException e) {
-            ACRA.log.e(LOG_TAG, "Error while retrieving crash data", e);
-        }
-
-        return crashReportData;
-    }
-
-    private List<Collector> getCollectorsOrdered() {
-        final List<Collector> collectors = new ArrayList<Collector>();
-        final PackageManagerWrapper pm = new PackageManagerWrapper(context);
-        collectors.add(new LogCatCollector(config, pm));
-        collectors.add(new DropBoxCollector(context, config, pm));
-        collectors.add(new StacktraceCollector());
-        collectors.add(new TimeCollector(appStartDate));
-        collectors.add(new SimpleValuesCollector(context));
-        collectors.add(new ConfigurationCollector(context, initialConfiguration));
-        collectors.add(new MemoryInfoCollector());
-        collectors.add(new ReflectionCollector(context, config));
-        collectors.add(new DisplayManagerCollector(context));
-        collectors.add(new CustomDataCollector(customParameters));
-        collectors.add(new SharedPreferencesCollector(context, config, prefs));
-        collectors.add(new DeviceFeaturesCollector(context));
-        collectors.add(new SettingsCollector(context, config));
-        collectors.add(new PackageManagerCollector(pm));
-        collectors.add(new DeviceIdCollector(context, pm, prefs));
-        collectors.add(new LogFileCollector(context, config));
-        collectors.add(new MediaCodecListCollector());
-        collectors.add(new ThreadCollector());
-        return collectors;
-    }
-}
\ No newline at end of file
diff --git a/acra/src/main/java/org/acra/collector/CustomDataCollector.java b/acra/src/main/java/org/acra/collector/CustomDataCollector.java
deleted file mode 100644
index 68bbceec..00000000
--- a/acra/src/main/java/org/acra/collector/CustomDataCollector.java
+++ /dev/null
@@ -1,63 +0,0 @@
-/*
- *  Copyright 2016
- *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-package org.acra.collector;
-
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-
-import org.acra.ReportField;
-import org.acra.builder.ReportBuilder;
-import org.acra.model.ComplexElement;
-import org.acra.model.Element;
-
-import java.util.HashMap;
-import java.util.Map;
-
-/**
- * Collects custom data supplied by the user
- *
- * @author F43nd1r
- * @since 4.9.1
- */
-final class CustomDataCollector extends Collector {
-    private final Map<String, String> customParameters;
-
-    CustomDataCollector(Map<String, String> customParameters){
-        super(ReportField.CUSTOM_DATA);
-        this.customParameters = customParameters;
-    }
-    @NonNull
-    @Override
-    Element collect(ReportField reportField, ReportBuilder reportBuilder) {
-        return createCustomInfoElement(reportBuilder.getCustomData());
-    }
-
-
-    /**
-     * Generates the Element which is posted in the single custom data field
-     *
-     * @return An Element with  key-value-pairs for the supplied custom data.
-     */
-    @NonNull
-    private Element createCustomInfoElement(@Nullable Map<String, String> reportCustomData) {
-        Map<String, String> params = customParameters;
-        if (reportCustomData != null) {
-            params = new HashMap<String, String>(params);
-            params.putAll(reportCustomData);
-        }
-        return new ComplexElement(params);
-    }
-}
diff --git a/acra/src/main/java/org/acra/collector/DeviceIdCollector.java b/acra/src/main/java/org/acra/collector/DeviceIdCollector.java
deleted file mode 100644
index f3c74d9b..00000000
--- a/acra/src/main/java/org/acra/collector/DeviceIdCollector.java
+++ /dev/null
@@ -1,85 +0,0 @@
-/*
- *  Copyright 2016
- *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-package org.acra.collector;
-
-import android.Manifest;
-import android.annotation.SuppressLint;
-import android.content.Context;
-import android.content.SharedPreferences;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.telephony.TelephonyManager;
-
-import org.acra.ACRA;
-import org.acra.ACRAConstants;
-import org.acra.ReportField;
-import org.acra.builder.ReportBuilder;
-import org.acra.model.Element;
-import org.acra.model.StringElement;
-import org.acra.util.PackageManagerWrapper;
-
-import java.util.Set;
-
-import static org.acra.ACRA.LOG_TAG;
-
-/**
- * Collects the device ID
- *
- * @author F43nd1r
- * @since 4.9.1
- */
-final class DeviceIdCollector extends Collector {
-    private final Context context;
-    private final PackageManagerWrapper pm;
-    private final SharedPreferences prefs;
-
-    DeviceIdCollector(Context context, PackageManagerWrapper pm, SharedPreferences prefs) {
-        super(ReportField.DEVICE_ID);
-        this.context = context;
-        this.pm = pm;
-        this.prefs = prefs;
-    }
-
-    @Override
-    boolean shouldCollect(Set<ReportField> crashReportFields, ReportField collect, ReportBuilder reportBuilder) {
-        return super.shouldCollect(crashReportFields, collect, reportBuilder) && prefs.getBoolean(ACRA.PREF_ENABLE_DEVICE_ID, true)
-                && pm.hasPermission(Manifest.permission.READ_PHONE_STATE);
-    }
-
-    @NonNull
-    @Override
-    Element collect(ReportField reportField, ReportBuilder reportBuilder) {
-        final String result = getDeviceId();
-        return result != null ? new StringElement(result) : ACRAConstants.NOT_AVAILABLE;
-    }
-
-    /**
-     * Returns the DeviceId according to the TelephonyManager.
-     *
-     * @return Returns the DeviceId according to the TelephonyManager or null if there is no TelephonyManager.
-     */
-    @SuppressLint("HardwareIds")
-    @Nullable
-    private String getDeviceId() {
-        try {
-            final TelephonyManager tm = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);
-            return tm.getDeviceId();
-        } catch (RuntimeException e) {
-            ACRA.log.w(LOG_TAG, "Couldn't retrieve DeviceId for : " + context.getPackageName(), e);
-            return null;
-        }
-    }
-}
diff --git a/acra/src/main/java/org/acra/collector/LogCatCollector.java b/acra/src/main/java/org/acra/collector/LogCatCollector.java
deleted file mode 100644
index bfc6729e..00000000
--- a/acra/src/main/java/org/acra/collector/LogCatCollector.java
+++ /dev/null
@@ -1,161 +0,0 @@
-/*
- *  Copyright 2010 Kevin Gaudin
- *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-package org.acra.collector;
-
-import android.Manifest;
-import android.os.Build;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-
-import com.android.internal.util.Predicate;
-
-import org.acra.ACRA;
-import org.acra.ACRAConstants;
-import org.acra.ReportField;
-import org.acra.annotation.ReportsCrashes;
-import org.acra.builder.ReportBuilder;
-import org.acra.config.ACRAConfiguration;
-import org.acra.model.Element;
-import org.acra.model.StringElement;
-import org.acra.util.IOUtils;
-import org.acra.util.PackageManagerWrapper;
-
-import java.io.IOException;
-import java.io.InputStream;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Set;
-
-import static org.acra.ACRA.LOG_TAG;
-
-
-/**
- * Executes logcat commands and collects it's output.
- *
- * @author Kevin Gaudin & F43nd1r
- */
-final class LogCatCollector extends Collector {
-
-    private final ACRAConfiguration config;
-    private final PackageManagerWrapper pm;
-
-    LogCatCollector(ACRAConfiguration config, PackageManagerWrapper pm) {
-        super(ReportField.LOGCAT, ReportField.EVENTSLOG, ReportField.RADIOLOG);
-        this.config = config;
-        this.pm = pm;
-    }
-
-    /**
-     * Executes the logcat command with arguments taken from
-     * {@link ReportsCrashes#logcatArguments()}
-     *
-     * @param bufferName The name of the buffer to be read: "main" (default), "radio" or "events".
-     * @return A {@link String} containing the latest lines of the output.
-     * Default is 100 lines, use "-t", "300" in
-     * {@link ReportsCrashes#logcatArguments()} if you want 300 lines.
-     * You should be aware that increasing this value causes a longer
-     * report generation time and a bigger footprint on the device data
-     * plan consumption.
-     */
-    private Element collectLogCat(@Nullable String bufferName) {
-        final int myPid = android.os.Process.myPid();
-        final String myPidStr = config.logcatFilterByPid() && myPid > 0 ? Integer.toString(myPid) + "):" : null;
-
-        final List<String> commandLine = new ArrayList<String>();
-        commandLine.add("logcat");
-        if (bufferName != null) {
-            commandLine.add("-b");
-            commandLine.add(bufferName);
-        }
-
-        final int tailCount;
-        final List<String> logcatArgumentsList = config.logcatArguments();
-
-        final int tailIndex = logcatArgumentsList.indexOf("-t");
-        if (tailIndex > -1 && tailIndex < logcatArgumentsList.size()) {
-            tailCount = Integer.parseInt(logcatArgumentsList.get(tailIndex + 1));
-        } else {
-            tailCount = -1;
-        }
-
-        Element logcat;
-        commandLine.addAll(logcatArgumentsList);
-
-        try {
-            final Process process =  new ProcessBuilder().command(commandLine).redirectErrorStream(true).start();
-
-            if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Retrieving logcat output...");
-
-            logcat = new StringElement(streamToString(process.getInputStream(), new Predicate<String>() {
-                @Override
-                public boolean apply(String s) {
-                    return myPidStr == null || s.contains(myPidStr);
-                }
-            }, tailCount));
-            process.destroy();
-
-        } catch (IOException e) {
-            ACRA.log.e(LOG_TAG, "LogCatCollector.collectLogCat could not retrieve data.", e);
-            logcat = ACRAConstants.NOT_AVAILABLE;
-        }
-
-        return logcat;
-    }
-
-    @Override
-    boolean shouldCollect(Set<ReportField> crashReportFields, ReportField collect, ReportBuilder reportBuilder) {
-        return super.shouldCollect(crashReportFields, collect, reportBuilder)
-                && (pm.hasPermission(Manifest.permission.READ_LOGS)
-                || Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN);
-    }
-
-    @NonNull
-    @Override
-    Element collect(ReportField reportField, ReportBuilder reportBuilder) {
-        String bufferName = null;
-        switch (reportField) {
-            case LOGCAT:
-                bufferName = null;
-                break;
-            case EVENTSLOG:
-                bufferName = "events";
-                break;
-            case RADIOLOG:
-                bufferName = "radio";
-                break;
-        }
-        return collectLogCat(bufferName);
-    }
-
-    /**
-     * Reads an InputStream into a string in an non blocking way for current thread
-     * It has a default timeout of 3 seconds.
-     *
-     * @param input  the stream
-     * @param filter should return false for lines which should be excluded
-     * @param limit  the maximum number of lines to read (the last x lines are kept)
-     * @return the String that was read.
-     * @throws IOException if the stream cannot be read.
-     */
-    @NonNull
-    private String streamToString(@NonNull InputStream input, Predicate<String> filter, int limit) throws IOException {
-        if (config.nonBlockingReadForLogcat()) {
-            return IOUtils.streamToStringNonBlockingRead(input, filter, limit);
-        } else {
-            return IOUtils.streamToString(input, filter, limit);
-        }
-    }
-}
diff --git a/acra/src/main/java/org/acra/collector/LogFileCollector.java b/acra/src/main/java/org/acra/collector/LogFileCollector.java
deleted file mode 100644
index 5e17f4b4..00000000
--- a/acra/src/main/java/org/acra/collector/LogFileCollector.java
+++ /dev/null
@@ -1,102 +0,0 @@
-/*
- *  Copyright 2012 Kevin Gaudin
- *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-
-package org.acra.collector;
-
-import android.app.Application;
-import android.content.Context;
-import android.support.annotation.NonNull;
-
-import org.acra.ACRA;
-import org.acra.ACRAConstants;
-import org.acra.ReportField;
-import org.acra.builder.ReportBuilder;
-import org.acra.config.ACRAConfiguration;
-import org.acra.file.Directory;
-import org.acra.model.Element;
-import org.acra.model.StringElement;
-import org.acra.util.IOUtils;
-
-import java.io.ByteArrayInputStream;
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.IOException;
-import java.io.InputStream;
-
-import static org.acra.ACRA.LOG_TAG;
-
-/**
- * Collects the N last lines of a text stream. Use this collector if your
- * application handles its own logging system.
- *
- * @author Kevin Gaudin & F43nd1r
- */
-final class LogFileCollector extends Collector {
-    private final Context context;
-    private final ACRAConfiguration config;
-
-    LogFileCollector(Context context, ACRAConfiguration config) {
-        super(ReportField.APPLICATION_LOG);
-        this.context = context;
-        this.config = config;
-    }
-
-    /**
-     * Reads the last lines of a custom log file. The file name is assumed as
-     * located in the {@link Application#getFilesDir()} directory if it does not
-     * contain any path separator.
-     *
-     * @return An Element containing all of the requested lines.
-     */
-    @NonNull
-    @Override
-    Element collect(ReportField reportField, ReportBuilder reportBuilder) {
-        try {
-            return new StringElement(IOUtils.streamToString(
-                    getStream(config.applicationLogFileDir(), config.applicationLogFile()),
-                    config.applicationLogFileLines()));
-        } catch (IOException e) {
-            return ACRAConstants.NOT_AVAILABLE;
-        }
-    }
-
-    /**
-     * get the application log file location and open it
-     *
-     * @param directory the base directory for the file path
-     * @param fileName the name of the file
-     * @return a stream to the file or an empty stream if the file was not found
-     */
-    @NonNull
-    private InputStream getStream(@NonNull Directory directory, @NonNull String fileName) {
-        final File file = directory.getFile(context, fileName);
-        if (!file.exists()) {
-            if (ACRA.DEV_LOGGING)
-                ACRA.log.d(LOG_TAG, "Log file '" + file.getPath() + "' does not exist");
-        } else if (file.isDirectory()) {
-            ACRA.log.e(LOG_TAG, "Log file '" + file.getPath() + "' is a directory");
-        } else if (!file.canRead()) {
-            ACRA.log.e(LOG_TAG, "Log file '" + file.getPath() + "' can't be read");
-        } else {
-            try {
-                return new FileInputStream(file);
-            } catch (IOException e) {
-                ACRA.log.e(LOG_TAG, "Could not open stream for log file '" + file.getPath() + "'");
-            }
-        }
-        return new ByteArrayInputStream(new byte[0]);
-    }
-}
diff --git a/acra/src/main/java/org/acra/collector/SettingsCollector.java b/acra/src/main/java/org/acra/collector/SettingsCollector.java
deleted file mode 100644
index 3a55e7bc..00000000
--- a/acra/src/main/java/org/acra/collector/SettingsCollector.java
+++ /dev/null
@@ -1,184 +0,0 @@
-/*
- *  Copyright 2010 Kevin Gaudin
- *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-
-package org.acra.collector;
-
-import android.content.Context;
-import android.os.Build;
-import android.provider.Settings.Global;
-import android.provider.Settings.Secure;
-import android.provider.Settings.System;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-
-import org.acra.ACRA;
-import org.acra.ACRAConstants;
-import org.acra.ReportField;
-import org.acra.builder.ReportBuilder;
-import org.acra.config.ACRAConfiguration;
-import org.acra.model.ComplexElement;
-import org.acra.model.Element;
-import org.json.JSONException;
-
-import java.lang.reflect.Field;
-
-import static org.acra.ACRA.LOG_TAG;
-
-/**
- * collects data from {@link System}, {@link Global} and {@link Secure} Settings
- * classes.
- *
- * @author Kevin Gaudin & F43nd1r
- */
-final class SettingsCollector extends Collector {
-
-    private static final String ERROR = "Error: ";
-
-    private final Context context;
-    private final ACRAConfiguration config;
-
-    SettingsCollector(@NonNull Context context, @NonNull ACRAConfiguration config) {
-        super(ReportField.SETTINGS_SYSTEM, ReportField.SETTINGS_SECURE, ReportField.SETTINGS_GLOBAL);
-        this.context = context;
-        this.config = config;
-    }
-
-    /**
-     * Collect data from {@link System}. This
-     * collector uses reflection to be sure to always get the most accurate data
-     * whatever Android API level it runs on.
-     *
-     * @return collected key-value pairs.
-     */
-    @NonNull
-    private Element collectSystemSettings() throws JSONException {
-        final ComplexElement result = new ComplexElement();
-        final Field[] keys = System.class.getFields();
-        for (final Field key : keys) {
-            // Avoid retrieving deprecated fields... it is useless, has an
-            // impact on prefs, and the system writes many warnings in the
-            // logcat.
-            if (!key.isAnnotationPresent(Deprecated.class) && key.getType() == String.class) {
-                try {
-                    final Object value = System.getString(context.getContentResolver(), (String) key.get(null));
-                    if (value != null) {
-                        result.put(key.getName(), value);
-                    }
-                } catch (@NonNull IllegalArgumentException e) {
-                    ACRA.log.w(LOG_TAG, ERROR, e);
-                } catch (@NonNull IllegalAccessException e) {
-                    ACRA.log.w(LOG_TAG, ERROR, e);
-                }
-            }
-        }
-        return result;
-    }
-
-    /**
-     * Collect data from {@link Secure}. This
-     * collector uses reflection to be sure to always get the most accurate data
-     * whatever Android API level it runs on.
-     *
-     * @return collected key-value pairs.
-     */
-    @NonNull
-    private Element collectSecureSettings() throws JSONException {
-        final ComplexElement result = new ComplexElement();
-        final Field[] keys = Secure.class.getFields();
-        for (final Field key : keys) {
-            if (!key.isAnnotationPresent(Deprecated.class) && key.getType() == String.class && isAuthorized(key)) {
-                try {
-                    final Object value = Secure.getString(context.getContentResolver(), (String) key.get(null));
-                    if (value != null) {
-                        result.put(key.getName(), value);
-                    }
-                } catch (@NonNull IllegalArgumentException e) {
-                    ACRA.log.w(LOG_TAG, ERROR, e);
-                } catch (@NonNull IllegalAccessException e) {
-                    ACRA.log.w(LOG_TAG, ERROR, e);
-                }
-            }
-        }
-        return result;
-    }
-
-    /**
-     * Collect data from {@link Global}. This
-     * collector uses reflection to be sure to always get the most accurate data
-     * whatever Android API level it runs on.
-     *
-     * @return collected key-value pairs.
-     */
-    @NonNull
-    private Element collectGlobalSettings() throws JSONException {
-        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN_MR1) {
-            return ACRAConstants.NOT_AVAILABLE;
-        }
-
-        final ComplexElement result = new ComplexElement();
-        final Field[] keys = Global.class.getFields();
-        for (final Field key : keys) {
-            if (!key.isAnnotationPresent(Deprecated.class) && key.getType() == String.class && isAuthorized(key)) {
-                try {
-                    final Object value = Global.getString(context.getContentResolver(), (String) key.get(null));
-                    if (value != null) {
-                        result.put(key.getName(), value);
-                    }
-                } catch (@NonNull IllegalArgumentException e) {
-                    ACRA.log.w(LOG_TAG, ERROR, e);
-                } catch (@NonNull SecurityException e) {
-                    ACRA.log.w(LOG_TAG, ERROR, e);
-                } catch (@NonNull IllegalAccessException e) {
-                    ACRA.log.w(LOG_TAG, ERROR, e);
-                }
-            }
-        }
-        return result;
-    }
-
-    private boolean isAuthorized(@Nullable Field key) {
-        if (key == null || key.getName().startsWith("WIFI_AP")) {
-            return false;
-        }
-        for (String regex : config.excludeMatchingSettingsKeys()) {
-            if (key.getName().matches(regex)) {
-                return false;
-            }
-        }
-        return true;
-    }
-
-    @NonNull
-    @Override
-    Element collect(ReportField reportField, ReportBuilder reportBuilder) {
-        try {
-        switch (reportField) {
-            case SETTINGS_SYSTEM:
-                    return collectSystemSettings();
-            case SETTINGS_SECURE:
-                return collectSecureSettings();
-            case SETTINGS_GLOBAL:
-                return collectGlobalSettings();
-            default:
-                //will not happen if used correctly
-                throw new IllegalArgumentException();
-        }
-        } catch (JSONException e) {
-            ACRA.log.w("Could not collect Settings", e);
-            return ACRAConstants.NOT_AVAILABLE;
-        }
-    }
-}
diff --git a/acra/src/main/java/org/acra/collector/SimpleValuesCollector.java b/acra/src/main/java/org/acra/collector/SimpleValuesCollector.java
deleted file mode 100644
index 993541f7..00000000
--- a/acra/src/main/java/org/acra/collector/SimpleValuesCollector.java
+++ /dev/null
@@ -1,125 +0,0 @@
-/*
- *  Copyright 2016
- *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-package org.acra.collector;
-
-import android.content.Context;
-import android.os.Build;
-import android.support.annotation.NonNull;
-
-import org.acra.ACRA;
-import org.acra.ReportField;
-import org.acra.builder.ReportBuilder;
-import org.acra.model.BooleanElement;
-import org.acra.model.Element;
-import org.acra.model.StringElement;
-import org.acra.util.Installation;
-
-import java.io.File;
-import java.net.InetAddress;
-import java.net.NetworkInterface;
-import java.net.SocketException;
-import java.util.Enumeration;
-import java.util.Set;
-import java.util.UUID;
-
-import static org.acra.ACRA.LOG_TAG;
-
-/**
- * Collects various simple values
- *
- * @author F43nd1r
- * @since 4.9.1
- */
-final class SimpleValuesCollector extends Collector {
-    private final Context context;
-
-    SimpleValuesCollector(Context context) {
-        super(ReportField.IS_SILENT, ReportField.REPORT_ID, ReportField.INSTALLATION_ID,
-                ReportField.PACKAGE_NAME, ReportField.PHONE_MODEL, ReportField.ANDROID_VERSION,
-                ReportField.BRAND, ReportField.PRODUCT, ReportField.FILE_PATH, ReportField.USER_IP);
-        this.context = context;
-    }
-
-    @Override
-    boolean shouldCollect(Set<ReportField> crashReportFields, ReportField collect, ReportBuilder reportBuilder) {
-        return collect == ReportField.IS_SILENT || collect == ReportField.REPORT_ID || super.shouldCollect(crashReportFields, collect, reportBuilder);
-    }
-
-    @NonNull
-    @Override
-    Element collect(ReportField reportField, ReportBuilder reportBuilder) {
-        switch (reportField) {
-            case IS_SILENT:
-                return new BooleanElement(reportBuilder.isSendSilently());
-            case REPORT_ID:
-                return new StringElement(UUID.randomUUID().toString());
-            case INSTALLATION_ID:
-                return new StringElement(Installation.id(context));
-            case PACKAGE_NAME:
-                return new StringElement(context.getPackageName());
-            case PHONE_MODEL:
-                return new StringElement(Build.MODEL);
-            case ANDROID_VERSION:
-                return new StringElement(Build.VERSION.RELEASE);
-            case BRAND:
-                return new StringElement(Build.BRAND);
-            case PRODUCT:
-                return new StringElement(Build.PRODUCT);
-            case FILE_PATH:
-                return new StringElement(getApplicationFilePath());
-            case USER_IP:
-                return new StringElement(getLocalIpAddress());
-            default:
-                //will not happen if used correctly
-                throw new IllegalArgumentException();
-        }
-    }
-
-    @NonNull
-    private String getApplicationFilePath() {
-        final File filesDir = context.getFilesDir();
-        if (filesDir != null) {
-            return filesDir.getAbsolutePath();
-        }
-
-        ACRA.log.w(LOG_TAG, "Couldn't retrieve ApplicationFilePath for : " + context.getPackageName());
-        return "Couldn't retrieve ApplicationFilePath";
-    }
-
-    @NonNull
-    private static String getLocalIpAddress() {
-        final StringBuilder result = new StringBuilder();
-        boolean first = true;
-        try {
-            for (final Enumeration<NetworkInterface> en = NetworkInterface.getNetworkInterfaces(); en.hasMoreElements(); ) {
-                final NetworkInterface intf = en.nextElement();
-                for (final Enumeration<InetAddress> enumIpAddr = intf.getInetAddresses(); enumIpAddr.hasMoreElements(); ) {
-                    final InetAddress inetAddress = enumIpAddr.nextElement();
-                    if (!inetAddress.isLoopbackAddress()) {
-                        if (!first) {
-                            result.append('\n');
-                        }
-                        result.append(inetAddress.getHostAddress());
-                        first = false;
-                    }
-                }
-            }
-        } catch (SocketException ex) {
-            ACRA.log.w(LOG_TAG, ex.toString());
-        }
-        return result.toString();
-    }
-}
diff --git a/acra/src/main/java/org/acra/collector/ThreadCollector.java b/acra/src/main/java/org/acra/collector/ThreadCollector.java
deleted file mode 100644
index f45bfb0f..00000000
--- a/acra/src/main/java/org/acra/collector/ThreadCollector.java
+++ /dev/null
@@ -1,64 +0,0 @@
-/*
- *  Copyright 2010 Kevin Gaudin
- *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-
-package org.acra.collector;
-
-import android.support.annotation.NonNull;
-
-import org.acra.ACRAConstants;
-import org.acra.ReportField;
-import org.acra.builder.ReportBuilder;
-import org.acra.model.ComplexElement;
-import org.acra.model.Element;
-import org.json.JSONException;
-
-/**
- * Collects some data identifying a Thread
- *
- * @author Kevin Gaudin & F43nd1r
- */
-final class ThreadCollector extends Collector {
-    ThreadCollector() {
-        super(ReportField.THREAD_DETAILS);
-    }
-
-    /**
-     * collects some data identifying the crashed thread
-     *
-     * @return the information including the id, name and priority of the thread.
-     */
-    @NonNull
-    @Override
-    Element collect(ReportField reportField, ReportBuilder reportBuilder) {
-        final Thread t = reportBuilder.getUncaughtExceptionThread();
-        final ComplexElement result = new ComplexElement();
-        if (t != null) {
-            try {
-                result.put("id", t.getId());
-                result.put("name", t.getName());
-                result.put("priority", t.getPriority());
-                if (t.getThreadGroup() != null) {
-                    result.put("groupName", t.getThreadGroup().getName());
-                }
-            } catch (JSONException e) {
-                e.printStackTrace();
-            }
-        } else {
-            return ACRAConstants.NOT_AVAILABLE;
-        }
-        return result;
-    }
-}
diff --git a/acra/src/main/java/org/acra/config/ConfigurationBuilder.java b/acra/src/main/java/org/acra/config/ConfigurationBuilder.java
deleted file mode 100644
index 19781b2e..00000000
--- a/acra/src/main/java/org/acra/config/ConfigurationBuilder.java
+++ /dev/null
@@ -1,186 +0,0 @@
-/*
- *  Copyright 2011 Kevin Gaudin
- *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-package org.acra.config;
-
-import android.app.Application;
-import android.support.annotation.NonNull;
-
-import org.acra.ACRA;
-import org.acra.ReportField;
-import org.acra.annotation.NoPropagation;
-import org.acra.dialog.CrashReportDialog;
-import org.acra.sender.HttpSender;
-
-import java.lang.reflect.Modifier;
-import java.util.Arrays;
-import java.util.EnumMap;
-import java.util.HashMap;
-import java.util.LinkedHashSet;
-import java.util.Map;
-import java.util.Set;
-
-import static org.acra.ACRA.LOG_TAG;
-import static org.acra.ACRAConstants.*;
-
-/**
- * Builder responsible for programmatic construction of an immutable {@link ACRAConfiguration}.
- *
- * @since 4.8.1
- */
-@SuppressWarnings("unused")
-@org.acra.annotation.ConfigurationBuilder
-public final class ConfigurationBuilder extends BaseConfigurationBuilder<ConfigurationBuilder> {
-
-    private final Map<String, String> httpHeaders;
-    private final Map<ReportField, Boolean> reportContentChanges;
-
-    /**
-     * Constructs a ConfigurationBuilder that is prepopulated with any
-     * '@ReportCrashes' annotation declared on the Application class.
-     *
-     * @param app Current Application, from which any annotated config will be gleaned.
-     */
-    public ConfigurationBuilder(@NonNull Application app) {
-        super(app);
-        httpHeaders = new HashMap<String, String>();
-        reportContentChanges = new EnumMap<ReportField, Boolean>(ReportField.class);
-    }
-
-    /**
-     * Builds the {@link ACRAConfiguration} which will be used to configure ACRA.
-     * <p>
-     * You can pass this {@link ConfigurationBuilder} to {@link ACRA#init(Application, ConfigurationBuilder)} and
-     * {@link ACRA#init(Application, ConfigurationBuilder)} will handle any Exception.
-     * </p>
-     *
-     * @return new ACRAConfiguration containing all the properties configured on this builder.
-     * @throws ACRAConfigurationException if the required values for the configured notification mode have not been provided.
-     */
-    @NoPropagation
-    @NonNull
-    public ACRAConfiguration build() throws ACRAConfigurationException {
-
-        switch (reportingInteractionMode()) {
-            case TOAST:
-                if (resToastText() == DEFAULT_RES_VALUE) {
-                    throw new ACRAConfigurationException("TOAST mode: you have to define the resToastText parameter in your application @ReportsCrashes() annotation.");
-                }
-                break;
-            case NOTIFICATION:
-                if (resNotifTickerText() == DEFAULT_RES_VALUE || resNotifTitle() == DEFAULT_RES_VALUE || resNotifText() == DEFAULT_RES_VALUE) {
-                    throw new ACRAConfigurationException("NOTIFICATION mode: you have to define at least the resNotifTickerText, resNotifTitle, resNotifText parameters in your application @ReportsCrashes() annotation.");
-                }
-                if (CrashReportDialog.class.equals(reportDialogClass()) && resDialogText() == DEFAULT_RES_VALUE) {
-                    throw new ACRAConfigurationException("NOTIFICATION mode: using the (default) CrashReportDialog requires you have to define the resDialogText parameter in your application @ReportsCrashes() annotation.");
-                }
-                break;
-            case DIALOG:
-                if (CrashReportDialog.class.equals(reportDialogClass()) && resDialogText() == DEFAULT_RES_VALUE) {
-                    throw new ACRAConfigurationException("DIALOG mode: using the (default) CrashReportDialog requires you to define the resDialogText parameter in your application @ReportsCrashes() annotation.");
-                }
-                break;
-            default:
-                break;
-        }
-
-        if (reportSenderFactoryClasses().length == 0) {
-            throw new ACRAConfigurationException("Report sender factories: using no report senders will make ACRA useless. Configure at least one ReportSenderFactory.");
-        }
-        checkValidity((Class[]) reportSenderFactoryClasses());
-        checkValidity(reportDialogClass(), reportPrimerClass(), retryPolicyClass(), keyStoreFactoryClass());
-
-        return new ACRAConfiguration(this);
-    }
-
-    private void checkValidity(Class<?>... classes) throws ACRAConfigurationException {
-        for (Class<?> clazz : classes) {
-            if (clazz.isInterface()) {
-                throw new ACRAConfigurationException("Expected class, but found interface " + clazz.getName() + ".");
-            } else if (Modifier.isAbstract(clazz.getModifiers())) {
-                throw new ACRAConfigurationException("Class " + clazz.getName() + " cannot be abstract.");
-            }
-            try {
-                clazz.getConstructor();
-            } catch (NoSuchMethodException e) {
-                throw new ACRAConfigurationException("Class " + clazz.getName() + " is missing a no-args Constructor.", e);
-            }
-        }
-    }
-
-    /**
-     * Use this if you want to keep the default configuration of reportContent, but set some fields explicitly.
-     *
-     * @param field  the field to set
-     * @param enable if this field should be reported
-     * @return this instance
-     */
-    @NonNull
-    public ConfigurationBuilder setReportField(@NonNull ReportField field, boolean enable) {
-        this.reportContentChanges.put(field, enable);
-        return this;
-    }
-
-    /**
-     * Set custom HTTP headers to be sent by the provided {@link HttpSender}.
-     * This should be used also by third party senders.
-     *
-     * @param headers A map associating HTTP header names to their values.
-     * @return this instance
-     */
-    @NonNull
-    public ConfigurationBuilder setHttpHeaders(@NonNull Map<String, String> headers) {
-        this.httpHeaders.clear();
-        this.httpHeaders.putAll(headers);
-        return this;
-    }
-
-    @NonNull
-    Map<String, String> httpHeaders() {
-        return httpHeaders;
-    }
-
-    @NoPropagation
-    @NonNull
-    @Override
-    ReportField[] customReportContent() {
-        return super.customReportContent();
-    }
-
-    @NonNull
-    Set<ReportField> reportContent() {
-        final Set<ReportField> reportContent = new LinkedHashSet<ReportField>();
-        if (customReportContent().length != 0) {
-            if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Using custom Report Fields");
-            reportContent.addAll(Arrays.asList(customReportContent()));
-        } else if (DEFAULT_STRING_VALUE.equals(mailTo())) {
-            if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Using default Report Fields");
-            reportContent.addAll(Arrays.asList(DEFAULT_REPORT_FIELDS));
-        } else {
-            if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Using default Mail Report Fields");
-            reportContent.addAll(Arrays.asList(DEFAULT_MAIL_REPORT_FIELDS));
-        }
-
-        // Add or remove any extra fields.
-        for (Map.Entry<ReportField, Boolean> entry : reportContentChanges.entrySet()) {
-            if (entry.getValue()) {
-                reportContent.add(entry.getKey());
-            } else {
-                reportContent.remove(entry.getKey());
-            }
-        }
-        return reportContent;
-    }
-}
diff --git a/acra/src/main/java/org/acra/dialog/BaseCrashReportDialog.java b/acra/src/main/java/org/acra/dialog/BaseCrashReportDialog.java
deleted file mode 100644
index 45676c9c..00000000
--- a/acra/src/main/java/org/acra/dialog/BaseCrashReportDialog.java
+++ /dev/null
@@ -1,154 +0,0 @@
-package org.acra.dialog;
-
-import android.os.Bundle;
-import android.support.annotation.Nullable;
-import android.support.v4.app.FragmentActivity;
-import android.widget.Toast;
-
-import org.acra.ACRA;
-import org.acra.ACRAConstants;
-import org.acra.collector.CrashReportData;
-import org.acra.config.ACRAConfiguration;
-import org.acra.file.BulkReportDeleter;
-import org.acra.file.CrashReportPersister;
-import org.acra.sender.SenderServiceStarter;
-import org.acra.util.ToastSender;
-import org.json.JSONException;
-
-import java.io.File;
-import java.io.IOException;
-import java.io.Serializable;
-
-import static org.acra.ACRA.LOG_TAG;
-import static org.acra.ReportField.USER_COMMENT;
-import static org.acra.ReportField.USER_EMAIL;
-
-/**
- * Activity which implements the base functionality for a CrashReportDialog.
- *
- * Activities which extend from this class can override init to create a custom view.
- *
- * The methods sendCrash(comment, userEmail) and cancelReports() can be used to send or cancel
- * sending of reports respectively.
- *
- * This Activity will be instantiated with 3 (or 4) arguments:
- * <ol>
- * <li>{@link ACRAConstants#EXTRA_REPORT_FILE}</li>
- * <li>{@link ACRAConstants#EXTRA_REPORT_EXCEPTION}</li>
- * <li>{@link ACRAConstants#EXTRA_REPORT_CONFIG}</li>
- * <li>{@link ACRAConstants#EXTRA_FORCE_CANCEL} (optional)</li>
- * </ol>
- */
-@SuppressWarnings({"WeakerAccess", "unused"})
-public abstract class BaseCrashReportDialog extends FragmentActivity {
-
-    private File reportFile;
-    private ACRAConfiguration config;
-    private Throwable exception;
-
-    /**
-     * NB if you were previously creating and showing your dialog in this method,
-     * you should move that code to {@link #init(Bundle)}.
-     *
-     * @param savedInstanceState    If the activity is being re-initialized after
-     *     previously being shut down then this Bundle contains the data it most
-     *     recently supplied in {@link #onSaveInstanceState}.  <b><i>Note: Otherwise it is null.</i></b>
-     */
-    @Override
-    protected final void onCreate(@Nullable Bundle savedInstanceState) {
-        preInit(savedInstanceState);
-        super.onCreate(savedInstanceState);
-
-
-        if (ACRA.DEV_LOGGING) {
-            ACRA.log.d(LOG_TAG, "CrashReportDialog extras=" + getIntent().getExtras());
-        }
-
-        final Serializable sConfig = getIntent().getSerializableExtra(ACRAConstants.EXTRA_REPORT_CONFIG);
-        final Serializable sReportFile = getIntent().getSerializableExtra(ACRAConstants.EXTRA_REPORT_FILE);
-        final Serializable sException = getIntent().getSerializableExtra(ACRAConstants.EXTRA_REPORT_EXCEPTION);
-        final boolean forceCancel = getIntent().getBooleanExtra(ACRAConstants.EXTRA_FORCE_CANCEL, false);
-
-        if (forceCancel) {
-            if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Forced reports deletion.");
-            cancelReports();
-            finish();
-        } else if ((sConfig instanceof ACRAConfiguration) && (sReportFile instanceof File) && ((sException instanceof Throwable) || sException == null)) {
-            config = (ACRAConfiguration) sConfig;
-            reportFile = (File) sReportFile;
-            exception = (Throwable) sException;
-            init(savedInstanceState);
-        } else {
-            ACRA.log.w(LOG_TAG, "Illegal or incomplete call of BaseCrashReportDialog.");
-            finish();
-        }
-    }
-
-    /**
-     * Handle any necessary pre-onCreate() setup here.
-     *
-     * @param savedInstanceState    If the activity is being re-initialized after
-     *     previously being shut down then this Bundle contains the data it most
-     *     recently supplied in {@link #onSaveInstanceState}.  <b><i>Note: Otherwise it is null.</i></b>
-     */
-    protected void preInit(@Nullable Bundle savedInstanceState) {
-    }
-
-    /**
-     * Responsible for creating and showing the crash report dialog.
-     *
-     * @param savedInstanceState    If the activity is being re-initialized after
-     *     previously being shut down then this Bundle contains the data it most
-     *     recently supplied in {@link #onSaveInstanceState}.  <b><i>Note: Otherwise it is null.</i></b>
-     */
-    protected void init(@Nullable Bundle savedInstanceState) {
-    }
-
-
-    /**
-     * Cancel any pending crash reports.
-     */
-    protected final void cancelReports() {
-        new BulkReportDeleter(getApplicationContext()).deleteReports(false, 0);
-    }
-
-
-    /**
-     * Send crash report given user's comment and email address. If none should be empty strings
-     *
-     * @param comment   Comment (may be null) provided by the user.
-     * @param userEmail Email address (may be null) provided by the client.
-     */
-    protected final void sendCrash(@Nullable String comment, @Nullable String userEmail) {
-        final CrashReportPersister persister = new CrashReportPersister();
-        try {
-            if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Add user comment to " + reportFile);
-            final CrashReportData crashData = persister.load(reportFile);
-            crashData.putString(USER_COMMENT, comment == null ? "" : comment);
-            crashData.putString(USER_EMAIL, userEmail == null ? "" : userEmail);
-            persister.store(crashData, reportFile);
-        } catch (IOException e) {
-            ACRA.log.w(LOG_TAG, "User comment not added: ", e);
-        } catch (JSONException e) {
-            ACRA.log.w(LOG_TAG, "User comment not added: ", e);
-        }
-
-        // Start the report sending task
-        final SenderServiceStarter starter = new SenderServiceStarter(getApplicationContext(), config);
-        starter.startService(false, true);
-
-        // Optional Toast to thank the user
-        final int toastId = config.resDialogOkToast();
-        if (toastId != 0) {
-            ToastSender.sendToast(getApplicationContext(), toastId, Toast.LENGTH_LONG);
-        }
-    }
-
-    protected final ACRAConfiguration getConfig() {
-        return config;
-    }
-
-    protected final Throwable getException() {
-        return exception;
-    }
-}
diff --git a/acra/src/main/java/org/acra/file/LastModifiedComparator.java b/acra/src/main/java/org/acra/file/LastModifiedComparator.java
deleted file mode 100644
index 0bcaa808..00000000
--- a/acra/src/main/java/org/acra/file/LastModifiedComparator.java
+++ /dev/null
@@ -1,18 +0,0 @@
-package org.acra.file;
-
-import android.support.annotation.NonNull;
-
-import java.io.File;
-import java.util.Comparator;
-
-/**
- * Orders files from oldest to newest based on their last modified date.
- */
-final class LastModifiedComparator implements Comparator<File> {
-    @Override
-    public int compare(@NonNull File lhs, @NonNull File rhs) {
-        final long l = lhs.lastModified();
-        final long r = rhs.lastModified();
-        return l < r ? -1 : (l == r ? 0 : 1);
-    }
-}
diff --git a/acra/src/main/java/org/acra/http/BinaryHttpRequest.java b/acra/src/main/java/org/acra/http/BinaryHttpRequest.java
deleted file mode 100644
index a5dd08c3..00000000
--- a/acra/src/main/java/org/acra/http/BinaryHttpRequest.java
+++ /dev/null
@@ -1,38 +0,0 @@
-package org.acra.http;
-
-import android.content.Context;
-import android.net.Uri;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-
-import org.acra.config.ACRAConfiguration;
-import org.acra.sender.HttpSender;
-
-import java.io.IOException;
-import java.util.Map;
-
-/**
- * @author F43nd1r
- * @since 10.03.2017
- */
-
-public class BinaryHttpRequest extends BaseHttpRequest<Uri> {
-    @NonNull
-    private final Context context;
-
-    public BinaryHttpRequest(@NonNull ACRAConfiguration config, @NonNull Context context, @NonNull HttpSender.Method method,
-                             @Nullable String login, @Nullable String password, int connectionTimeOut, int socketTimeOut, @Nullable Map<String, String> headers) {
-        super(config, context, method, login, password, connectionTimeOut, socketTimeOut, headers);
-        this.context = context;
-    }
-
-    @Override
-    protected String getContentType(@NonNull Context context, @NonNull Uri uri) {
-        return HttpUtils.getMimeType(context, uri);
-    }
-
-    @Override
-    protected byte[] asBytes(Uri content) throws IOException {
-        return HttpUtils.uriToByteArray(context, content);
-    }
-}
diff --git a/acra/src/main/java/org/acra/model/ComplexElement.java b/acra/src/main/java/org/acra/model/ComplexElement.java
deleted file mode 100644
index 55d16f73..00000000
--- a/acra/src/main/java/org/acra/model/ComplexElement.java
+++ /dev/null
@@ -1,74 +0,0 @@
-/*
- * Copyright (c) 2016
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.acra.model;
-
-import android.support.annotation.NonNull;
-
-import org.acra.util.JsonUtils;
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.util.Map;
-
-/**
- * @author F43nd1r
- * @since 12.10.2016
- */
-public class ComplexElement extends JSONObject implements Element {
-    public ComplexElement() {
-    }
-
-    public ComplexElement(String json) throws JSONException {
-        super(json);
-    }
-
-    public ComplexElement(Map<String, ?> copyFrom) {
-        super(copyFrom);
-    }
-
-    public ComplexElement(JSONObject copyFrom) throws JSONException {
-        super(copyFrom, getNames(copyFrom));
-    }
-
-    @NonNull
-    private static String[] getNames(JSONObject object) throws JSONException {
-        final JSONArray json = object.names();
-        if(json != null) {
-            final String[] names = new String[json.length()];
-            for (int i = 0; i < json.length(); i++) {
-                names[i] = json.getString(i);
-            }
-            return names;
-        }
-        return new String[0];
-    }
-
-    @Override
-    public Object value() {
-        return this;
-    }
-
-    @Override
-    public String[] flatten() {
-        try {
-            return JsonUtils.flatten(this).toArray(new String[0]);
-        } catch (JSONException e) {
-            return new String[0];
-        }
-    }
-}
diff --git a/acra/src/main/java/org/acra/prefs/PrefUtils.java b/acra/src/main/java/org/acra/prefs/PrefUtils.java
deleted file mode 100644
index 1359c6b5..00000000
--- a/acra/src/main/java/org/acra/prefs/PrefUtils.java
+++ /dev/null
@@ -1,17 +0,0 @@
-package org.acra.prefs;
-
-import android.content.SharedPreferences;
-import android.os.Build;
-import android.support.annotation.NonNull;
-
-public final class PrefUtils {
-    private PrefUtils(){}
-
-    public static void save(@NonNull SharedPreferences.Editor editor) {
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD) {
-            editor.apply();
-        } else {
-            editor.commit();
-        }
-    }
-}
diff --git a/acra/src/main/java/org/acra/prefs/SharedPreferencesFactory.java b/acra/src/main/java/org/acra/prefs/SharedPreferencesFactory.java
deleted file mode 100644
index c9695c79..00000000
--- a/acra/src/main/java/org/acra/prefs/SharedPreferencesFactory.java
+++ /dev/null
@@ -1,44 +0,0 @@
-package org.acra.prefs;
-
-import android.content.Context;
-import android.content.SharedPreferences;
-import android.preference.PreferenceManager;
-import android.support.annotation.NonNull;
-
-import org.acra.annotation.ReportsCrashes;
-import org.acra.config.ACRAConfiguration;
-
-/**
- * Responsible for creating a SharedPreferences instance which stores ACRA settings.
- * <p>
- * Retrieves the {@link SharedPreferences} instance where user adjustable
- * settings for ACRA are stored. Default are the Application default
- * SharedPreferences, but you can provide another SharedPreferences name
- * with {@link ReportsCrashes#sharedPreferencesName()}.
- * </p>
- */
-public class SharedPreferencesFactory {
-
-    private final Context context;
-    private final ACRAConfiguration config;
-
-    public SharedPreferencesFactory(@NonNull Context context, @NonNull ACRAConfiguration config) {
-        this.context = context;
-        this.config = config;
-    }
-
-    /**
-     * @return The Shared Preferences where ACRA will retrieve its user adjustable setting.
-     */
-    @NonNull
-    public SharedPreferences create() {
-        //noinspection ConstantConditions
-        if (context == null) {
-            throw new IllegalStateException("Cannot call ACRA.getACRASharedPreferences() before ACRA.init().");
-        } else if (!"".equals(config.sharedPreferencesName())) {
-            return context.getSharedPreferences(config.sharedPreferencesName(), config.sharedPreferencesMode());
-        } else {
-            return PreferenceManager.getDefaultSharedPreferences(context);
-        }
-    }
-}
diff --git a/acra/src/main/java/org/acra/sender/DefaultReportSenderFactory.java b/acra/src/main/java/org/acra/sender/DefaultReportSenderFactory.java
deleted file mode 100644
index 540db463..00000000
--- a/acra/src/main/java/org/acra/sender/DefaultReportSenderFactory.java
+++ /dev/null
@@ -1,50 +0,0 @@
-package org.acra.sender;
-
-import android.Manifest;
-import android.content.Context;
-import android.support.annotation.NonNull;
-
-import org.acra.ACRA;
-import org.acra.ACRAConstants;
-import org.acra.config.ACRAConfiguration;
-import org.acra.util.PackageManagerWrapper;
-
-import static org.acra.ACRA.LOG_TAG;
-
-/**
- * Will send reports by email if the 'mailTo' parameter is configured,
- * otherwise via HTTP if the 'formUri' parameter is configured and
- * internet permission has been granted.
- *
- * If neither 'formUri' or 'mailTo' has been configured, then a NullSender will be returned.
- */
-public final class DefaultReportSenderFactory implements ReportSenderFactory {
-
-    @NonNull
-    @Override
-    public ReportSender create(@NonNull Context context, @NonNull ACRAConfiguration config) {
-        final PackageManagerWrapper pm = new PackageManagerWrapper(context);
-        if (!"".equals(config.mailTo())) {
-            // Try to send by mail. If a mailTo address is provided, do not add other senders.
-            ACRA.log.i(LOG_TAG, context.getPackageName() + " reports will be sent by email (if accepted by user).");
-            return new EmailIntentSenderFactory().create(context, config);
-        } else if (!pm.hasPermission(Manifest.permission.INTERNET)) {
-            // NB If the PackageManager has died then this will erroneously log
-            // the error that the App doesn't have Internet (even though it does).
-            // I think that is a small price to pay to ensure that ACRA doesn't
-            // crash if the PackageManager has died.
-            ACRA.log.e(LOG_TAG,
-                    context.getPackageName()
-                            + " should be granted permission "
-                            + Manifest.permission.INTERNET
-                            + " if you want your crash reports to be sent. If you don't want to add this permission to your application you can also enable sending reports by email. If this is your will then provide your email address in @AcraConfig(mailTo=\"your.account@domain.com\"");
-            return new NullSender();
-        } else if (!ACRAConstants.DEFAULT_STRING_VALUE.equals(config.formUri())) {
-            // If formUri is set, instantiate a sender for a generic HTTP POST form with default mapping.
-            if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, context.getPackageName() + " reports will be sent by Http.");
-            return new HttpSenderFactory().create(context, config);
-        } else {
-            return new NullSender();
-        }
-    }
-}
diff --git a/acra/src/main/java/org/acra/sender/EmailIntentSenderFactory.java b/acra/src/main/java/org/acra/sender/EmailIntentSenderFactory.java
deleted file mode 100644
index 6b23f66a..00000000
--- a/acra/src/main/java/org/acra/sender/EmailIntentSenderFactory.java
+++ /dev/null
@@ -1,18 +0,0 @@
-package org.acra.sender;
-
-import android.content.Context;
-import android.support.annotation.NonNull;
-
-import org.acra.config.ACRAConfiguration;
-
-/**
- * Constructs an {@link EmailIntentSender}.
- */
-public final class EmailIntentSenderFactory implements ReportSenderFactory {
-
-    @NonNull
-    @Override
-    public ReportSender create(@NonNull Context context, @NonNull ACRAConfiguration config) {
-        return new EmailIntentSender(config);
-    }
-}
diff --git a/acra/src/main/java/org/acra/sender/HttpSender.java b/acra/src/main/java/org/acra/sender/HttpSender.java
deleted file mode 100644
index 32807d3e..00000000
--- a/acra/src/main/java/org/acra/sender/HttpSender.java
+++ /dev/null
@@ -1,348 +0,0 @@
-/*
- *  Copyright 2010 Kevin Gaudin
- *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-package org.acra.sender;
-
-import android.content.Context;
-import android.net.Uri;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.text.TextUtils;
-import android.util.Pair;
-
-import org.acra.ACRA;
-import org.acra.ACRAConstants;
-import org.acra.ReportField;
-import org.acra.annotation.ReportsCrashes;
-import org.acra.attachment.DefaultAttachmentProvider;
-import org.acra.collections.ImmutableSet;
-import org.acra.collector.CrashReportData;
-import org.acra.config.ACRAConfiguration;
-import org.acra.http.BinaryHttpRequest;
-import org.acra.http.DefaultHttpRequest;
-import org.acra.http.HttpUtils;
-import org.acra.http.MultipartHttpRequest;
-import org.acra.model.Element;
-import org.acra.util.InstanceCreator;
-import org.json.JSONObject;
-
-import java.io.IOException;
-import java.net.MalformedURLException;
-import java.net.URL;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-
-import static org.acra.ACRA.LOG_TAG;
-
-/**
- * <p>
- * The {@link ReportSender} used by ACRA when {@link ReportsCrashes#formUri()}
- * has been defined in order to post crash data to a custom server-side data
- * collection script. It sends all data in a POST request with parameters named
- * with easy to understand names (basically a string conversion of
- * {@link ReportField} enum values) or based on your own conversion Map from
- * {@link ReportField} values to String.
- * </p>
- * <p>
- * To use specific POST parameter names, you can provide your own report fields
- * mapping scheme:
- * </p>
- * <pre>
- * Just create and declare a {@link ReportSenderFactory} that constructs a mapping
- * from each {@link ReportField} to another name.
- * </pre>
- */
-public class HttpSender implements ReportSender {
-
-    /**
-     * Available HTTP methods to send data. Only POST and PUT are currently
-     * supported.
-     */
-    public enum Method {
-        POST {
-            @Override
-            URL createURL(String baseUrl, CrashReportData report) throws MalformedURLException {
-                return new URL(baseUrl);
-            }
-        },
-        PUT {
-            @Override
-            URL createURL(String baseUrl, CrashReportData report) throws MalformedURLException {
-                return new URL(baseUrl + '/' + report.getProperty(ReportField.REPORT_ID));
-            }
-        };
-
-        abstract URL createURL(String baseUrl, CrashReportData report) throws MalformedURLException;
-    }
-
-    /**
-     * Type of report data encoding, currently supports Html Form encoding and
-     * JSON.
-     */
-    public enum Type {
-        /**
-         * Send data as a www form encoded list of key/values.
-         *
-         * @see <a href="http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4">Form content types</a>
-         */
-        FORM("application/x-www-form-urlencoded") {
-            @Override
-            String convertReport(HttpSender sender, CrashReportData report) throws IOException {
-                return HttpUtils.getParamsAsFormString(sender.convertToForm(report));
-            }
-        },
-        /**
-         * Send data as a structured JSON tree.
-         */
-        JSON("application/json") {
-            @Override
-            String convertReport(HttpSender sender, CrashReportData report) throws IOException {
-                return sender.convertToJson(report).toString();
-            }
-        };
-        private final String contentType;
-
-        Type(String contentType) {
-            this.contentType = contentType;
-        }
-
-        @NonNull
-        public String getContentType() {
-            return contentType;
-        }
-
-        abstract String convertReport(HttpSender sender, CrashReportData report) throws IOException;
-    }
-
-    private final ACRAConfiguration config;
-    @Nullable
-    private final Uri mFormUri;
-    private final Map<ReportField, String> mMapping;
-    private final Method mMethod;
-    private final Type mType;
-    @Nullable
-    private String mUsername;
-    @Nullable
-    private String mPassword;
-
-    /**
-     * <p>
-     * Create a new HttpSender instance with its destination taken from the supplied config.
-     * Uses {@link ReportField} values converted to String with .toString() as form parameters.
-     * </p>
-     *
-     * @param config AcraConfig declaring the
-     * @param method HTTP {@link Method} to be used to send data. Currently only
-     *               {@link Method#POST} and {@link Method#PUT} are available. If
-     *               {@link Method#PUT} is used, the {@link ReportField#REPORT_ID}
-     *               is appended to the formUri to be compliant with RESTful APIs.
-     * @param type   {@link Type} of encoding used to send the report body.
-     *               {@link Type#FORM} is a simple Key/Value pairs list as defined
-     *               by the application/x-www-form-urlencoded mime type.
-     */
-    public HttpSender(@NonNull ACRAConfiguration config, @NonNull Method method, @NonNull Type type) {
-        this(config, method, type, null);
-    }
-
-    /**
-     * <p>
-     * Create a new HttpSender instance with its destination taken from the supplied config.
-     * </p>
-     *
-     * @param config  AcraConfig declaring the
-     * @param method  HTTP {@link Method} to be used to send data. Currently only
-     *                {@link Method#POST} and {@link Method#PUT} are available. If
-     *                {@link Method#PUT} is used, the {@link ReportField#REPORT_ID}
-     *                is appended to the formUri to be compliant with RESTful APIs.
-     * @param type    {@link Type} of encoding used to send the report body.
-     *                {@link Type#FORM} is a simple Key/Value pairs list as defined
-     *                by the application/x-www-form-urlencoded mime type.
-     * @param mapping Applies only to {@link Method#POST} method parameter. If null,
-     *                POST parameters will be named with {@link ReportField} values
-     *                converted to String with .toString(). If not null, POST
-     *                parameters will be named with the result of
-     *                mapping.get(ReportField.SOME_FIELD);
-     */
-    public HttpSender(@NonNull ACRAConfiguration config, @NonNull Method method, @NonNull Type type, @Nullable Map<ReportField, String> mapping) {
-        this(config, method, type, null, mapping);
-    }
-
-    /**
-     * <p>
-     * Create a new HttpPostSender instance with a fixed destination provided as
-     * a parameter. Configuration changes to the formUri are not applied.
-     * </p>
-     *
-     * @param config  AcraConfig declaring the
-     * @param method  HTTP {@link Method} to be used to send data. Currently only
-     *                {@link Method#POST} and {@link Method#PUT} are available. If
-     *                {@link Method#PUT} is used, the {@link ReportField#REPORT_ID}
-     *                is appended to the formUri to be compliant with RESTful APIs.
-     * @param type    {@link Type} of encoding used to send the report body.
-     *                {@link Type#FORM} is a simple Key/Value pairs list as defined
-     *                by the application/x-www-form-urlencoded mime type.
-     * @param formUri The URL of your server-side crash report collection script.
-     * @param mapping Applies only to {@link Method#POST} method parameter. If null,
-     *                POST parameters will be named with {@link ReportField} values
-     *                converted to String with .toString(). If not null, POST
-     *                parameters will be named with the result of
-     *                mapping.get(ReportField.SOME_FIELD);
-     */
-    public HttpSender(@NonNull ACRAConfiguration config, @NonNull Method method, @NonNull Type type, @Nullable String formUri, @Nullable Map<ReportField, String> mapping) {
-        this.config = config;
-        mMethod = method;
-        mFormUri = (formUri == null) ? null : Uri.parse(formUri);
-        mMapping = mapping;
-        mType = type;
-        mUsername = null;
-        mPassword = null;
-    }
-
-    /**
-     * <p>
-     * Set credentials for this HttpSender that override (if present) the ones
-     * set globally.
-     * </p>
-     *
-     * @param username The username to set for HTTP Basic Auth.
-     * @param password The password to set for HTTP Basic Auth.
-     */
-    @SuppressWarnings("unused")
-    public void setBasicAuth(@Nullable String username, @Nullable String password) {
-        mUsername = username;
-        mPassword = password;
-    }
-
-    @Override
-    public void send(@NonNull Context context, @NonNull CrashReportData report) throws ReportSenderException {
-
-        try {
-            final String baseUrl = mFormUri == null ? config.formUri() : mFormUri.toString();
-            if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Connect to " + baseUrl);
-
-            final String login = mUsername != null ? mUsername : isNull(config.formUriBasicAuthLogin()) ? null : config.formUriBasicAuthLogin();
-            final String password = mPassword != null ? mPassword : isNull(config.formUriBasicAuthPassword()) ? null : config.formUriBasicAuthPassword();
-
-            final InstanceCreator instanceCreator = new InstanceCreator();
-            final List<Uri> uris = instanceCreator.create(config.attachmentUriProvider(), new DefaultAttachmentProvider()).getAttachments(context, config);
-
-            // Generate report body depending on requested type
-            final String reportAsString = mType.convertReport(this, report);
-
-            // Adjust URL depending on method
-            final URL reportUrl = mMethod.createURL(baseUrl, report);
-
-            sendHttpRequests(config, context, mMethod, mType, login, password, config.connectionTimeout(),
-                    config.socketTimeout(), config.httpHeaders(), reportAsString, reportUrl, uris);
-
-        } catch (@NonNull IOException e) {
-            throw new ReportSenderException("Error while sending " + config.reportType()
-                    + " report via Http " + mMethod.name(), e);
-        }
-    }
-
-    @SuppressWarnings("WeakerAccess")
-    protected void sendHttpRequests(@NonNull ACRAConfiguration configuration, @NonNull Context context, @NonNull Method method, @NonNull Type type,
-                                    @Nullable String login, @Nullable String password, int connectionTimeOut, int socketTimeOut, @Nullable Map<String, String> headers,
-                                    @NonNull String content, @NonNull URL url, @NonNull List<Uri> attachments) throws IOException {
-        switch (method) {
-            case POST:
-                if (attachments.isEmpty()) {
-                    sendWithoutAttachments(configuration, context, method, type, login, password, connectionTimeOut, socketTimeOut, headers, content, url);
-                } else {
-                    postMultipart(configuration, context, type, login, password, connectionTimeOut, socketTimeOut, headers, content, url, attachments);
-                }
-                break;
-            case PUT:
-                sendWithoutAttachments(configuration, context, method, type, login, password, connectionTimeOut, socketTimeOut, headers, content, url);
-                for (Uri uri : attachments) {
-                    putAttachment(configuration, context, login, password, connectionTimeOut, socketTimeOut, headers, url, uri);
-                }
-                break;
-        }
-    }
-
-    @SuppressWarnings("WeakerAccess")
-    protected void sendWithoutAttachments(@NonNull ACRAConfiguration configuration, @NonNull Context context, @NonNull Method method, @NonNull Type type,
-                                          @Nullable String login, @Nullable String password, int connectionTimeOut, int socketTimeOut, @Nullable Map<String, String> headers,
-                                          @NonNull String content, @NonNull URL url) throws IOException {
-        new DefaultHttpRequest(configuration, context, method, type, login, password, connectionTimeOut, socketTimeOut, headers).send(url, content);
-    }
-
-    @SuppressWarnings("WeakerAccess")
-    protected void postMultipart(@NonNull ACRAConfiguration configuration, @NonNull Context context, @NonNull Type type,
-                                 @Nullable String login, @Nullable String password, int connectionTimeOut, int socketTimeOut, @Nullable Map<String, String> headers,
-                                 @NonNull String content, @NonNull URL url, @NonNull List<Uri> attachments) throws IOException {
-        new MultipartHttpRequest(configuration, context, type, login, password, connectionTimeOut, socketTimeOut, headers).send(url, Pair.create(content, attachments));
-    }
-
-    @SuppressWarnings("WeakerAccess")
-    protected void putAttachment(@NonNull ACRAConfiguration configuration, @NonNull Context context,
-                                 @Nullable String login, @Nullable String password, int connectionTimeOut, int socketTimeOut, @Nullable Map<String, String> headers,
-                                 @NonNull URL url, @NonNull Uri attachment) throws IOException {
-        final URL attachmentUrl = new URL(url.toString() + "-" + HttpUtils.getFileNameFromUri(context, attachment));
-        new BinaryHttpRequest(configuration, context, Method.PUT, login, password, connectionTimeOut, socketTimeOut, headers).send(attachmentUrl, attachment);
-    }
-
-    /**
-     * Convert a report to json
-     *
-     * @param report the report to convert
-     * @return a json representation of the report
-     */
-    @SuppressWarnings("WeakerAccess")
-    protected JSONObject convertToJson(CrashReportData report) {
-        return report.toJSON();
-    }
-
-    /**
-     * Convert a report to a form-prepared map
-     *
-     * @param report the report to convert
-     * @return a form representation of the report
-     */
-    @SuppressWarnings("WeakerAccess")
-    protected Map<String, String> convertToForm(CrashReportData report) {
-        return remap(report);
-    }
-
-    @NonNull
-    private Map<String, String> remap(@NonNull Map<ReportField, Element> report) {
-
-        Set<ReportField> fields = config.reportContent();
-        if (fields.isEmpty()) {
-            fields = new ImmutableSet<ReportField>(ACRAConstants.DEFAULT_REPORT_FIELDS);
-        }
-
-        final Map<String, String> finalReport = new HashMap<String, String>(report.size());
-        for (ReportField field : fields) {
-            final Element element = report.get(field);
-            final String value = element != null ? TextUtils.join("\n", element.flatten()) : null;
-            if (mMapping == null || mMapping.get(field) == null) {
-                finalReport.put(field.toString(), value);
-            } else {
-                finalReport.put(mMapping.get(field), value);
-            }
-        }
-        return finalReport;
-    }
-
-    private boolean isNull(@Nullable String aString) {
-        return aString == null || ACRAConstants.NULL_VALUE.equals(aString);
-    }
-
-}
\ No newline at end of file
diff --git a/acra/src/main/java/org/acra/sender/HttpSenderFactory.java b/acra/src/main/java/org/acra/sender/HttpSenderFactory.java
deleted file mode 100644
index 69fc1d6f..00000000
--- a/acra/src/main/java/org/acra/sender/HttpSenderFactory.java
+++ /dev/null
@@ -1,18 +0,0 @@
-package org.acra.sender;
-
-import android.content.Context;
-import android.support.annotation.NonNull;
-
-import org.acra.config.ACRAConfiguration;
-
-/**
- * Constructs a {@link HttpSender} with no report field mappings.
- */
-public final class HttpSenderFactory implements ReportSenderFactory {
-
-    @NonNull
-    @Override
-    public ReportSender create(@NonNull Context context, @NonNull ACRAConfiguration config) {
-        return new HttpSender(config, config.httpMethod(), config.reportType());
-    }
-}
diff --git a/acra/src/main/java/org/acra/sender/NullSender.java b/acra/src/main/java/org/acra/sender/NullSender.java
deleted file mode 100644
index a3539c06..00000000
--- a/acra/src/main/java/org/acra/sender/NullSender.java
+++ /dev/null
@@ -1,19 +0,0 @@
-package org.acra.sender;
-
-import android.content.Context;
-import android.support.annotation.NonNull;
-
-import org.acra.ACRA;
-import org.acra.collector.CrashReportData;
-
-import static org.acra.ACRA.LOG_TAG;
-
-/**
- * Sends no report.
- */
-final class NullSender implements ReportSender {
-    @Override
-    public void send(@NonNull Context context, @NonNull CrashReportData errorContent) throws ReportSenderException {
-        ACRA.log.w(LOG_TAG, context.getPackageName() + " reports will NOT be sent - no valid ReportSender is configured. Try setting 'formUri' or 'mailTo'");
-    }
-}
diff --git a/acra/src/main/java/org/acra/sender/ReportSenderFactory.java b/acra/src/main/java/org/acra/sender/ReportSenderFactory.java
deleted file mode 100644
index 122abb2e..00000000
--- a/acra/src/main/java/org/acra/sender/ReportSenderFactory.java
+++ /dev/null
@@ -1,25 +0,0 @@
-package org.acra.sender;
-
-import android.content.Context;
-import android.support.annotation.NonNull;
-import org.acra.config.ACRAConfiguration;
-
-/**
- * Factory for creating and configuring a {@link ReportSender} instance.
- * Implementations must have a no argument constructor.
- *
- * Each configured ReportSenderFactory is created within the {@link SenderService}
- * and is used to construct and configure a single {@link ReportSender}.
- *
- * Created by William on 4-JAN-2016.
- */
-public interface ReportSenderFactory {
-
-    /**
-     * @param context   Application context.
-     * @param config    Configuration to use when sending reports.
-     * @return Fully configured instance of the relevant ReportSender.
-     */
-    @NonNull
-    ReportSender create(@NonNull Context context, @NonNull ACRAConfiguration config);
-}
diff --git a/acra/src/main/java/org/acra/util/ApplicationStartupProcessor.java b/acra/src/main/java/org/acra/util/ApplicationStartupProcessor.java
deleted file mode 100644
index 9f21df82..00000000
--- a/acra/src/main/java/org/acra/util/ApplicationStartupProcessor.java
+++ /dev/null
@@ -1,104 +0,0 @@
-package org.acra.util;
-
-import android.content.Context;
-import android.content.SharedPreferences;
-import android.content.pm.PackageInfo;
-import android.support.annotation.NonNull;
-import android.widget.Toast;
-import org.acra.ACRA;
-import org.acra.ReportingInteractionMode;
-import org.acra.config.ACRAConfiguration;
-import org.acra.file.BulkReportDeleter;
-import org.acra.file.CrashReportFileNameParser;
-import org.acra.file.ReportLocator;
-import org.acra.prefs.PrefUtils;
-import org.acra.prefs.SharedPreferencesFactory;
-import org.acra.sender.SenderServiceStarter;
-
-import java.io.File;
-
-/**
- * Looks for any existing reports and starts sending them.
- */
-public final class ApplicationStartupProcessor {
-
-    private final Context context;
-    private final ACRAConfiguration config;
-
-    public ApplicationStartupProcessor(@NonNull Context context, @NonNull ACRAConfiguration config) {
-        this.context = context;
-        this.config = config;
-    }
-
-    /**
-     * Delete any old unsent reports if this is a newer version of the app than when we last started.
-     */
-    public void deleteUnsentReportsFromOldAppVersion() {
-        final SharedPreferences prefs = new SharedPreferencesFactory(context, config).create();
-        final long lastVersionNr = prefs.getInt(ACRA.PREF_LAST_VERSION_NR, 0);
-        final int appVersion = getAppVersion();
-
-        if (appVersion > lastVersionNr) {
-            final BulkReportDeleter reportDeleter = new BulkReportDeleter(context);
-            reportDeleter.deleteReports(true, 0);
-            reportDeleter.deleteReports(false, 0);
-
-            final SharedPreferences.Editor prefsEditor = prefs.edit();
-            prefsEditor.putInt(ACRA.PREF_LAST_VERSION_NR, appVersion);
-            PrefUtils.save(prefsEditor);
-        }
-    }
-
-    /**
-     * Deletes all the unapproved reports except for the last one.
-     *
-     * NOTIFICATION or DIALOG mode require explicit approval by user.
-     * If latest notification/dialog has been ignored: neither accepted nor refused; they will accumulate.
-     * So destroy all unapproved reports bar the last one.
-     */
-    public void deleteAllUnapprovedReportsBarOne() {
-        new BulkReportDeleter(context).deleteReports(false, 1);
-    }
-
-    /**
-     * If ReportingInteractionMode == Toast and at least one non silent report then show a Toast.
-     * All approved reports will be sent.
-     */
-    public void sendApprovedReports() {
-
-        final ReportLocator reportLocator = new ReportLocator(context);
-        final File[] reportFiles = reportLocator.getApprovedReports();
-
-        if (reportFiles.length == 0) {
-            return; // There are no approved reports, so bail now.
-        }
-
-        if (config.reportingInteractionMode() == ReportingInteractionMode.TOAST && hasNonSilentApprovedReports(reportFiles)) {
-            ToastSender.sendToast(context, config.resToastText(), Toast.LENGTH_LONG);
-        }
-
-        // Send the approved reports.
-        final SenderServiceStarter starter = new SenderServiceStarter(context, config);
-        starter.startService(false, false);
-
-    }
-
-    /**
-     * @return app version or 0 if PackageInfo was not available.
-     */
-    private int getAppVersion() {
-        final PackageManagerWrapper packageManagerWrapper = new PackageManagerWrapper(context);
-        final PackageInfo packageInfo = packageManagerWrapper.getPackageInfo();
-        return (packageInfo == null) ? 0 : packageInfo.versionCode;
-    }
-
-    private boolean hasNonSilentApprovedReports(File[] reportFiles) {
-        final CrashReportFileNameParser fileNameParser = new CrashReportFileNameParser();
-        for (final File file : reportFiles) {
-            if (!fileNameParser.isSilent(file.getName())) {
-                return true;
-            }
-        }
-        return false;
-    }
-}
diff --git a/acra/src/main/java/org/acra/util/IOUtils.java b/acra/src/main/java/org/acra/util/IOUtils.java
deleted file mode 100644
index aa1b4199..00000000
--- a/acra/src/main/java/org/acra/util/IOUtils.java
+++ /dev/null
@@ -1,191 +0,0 @@
-/*
- *  Copyright 2016
- *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-package org.acra.util;
-
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.text.TextUtils;
-
-import com.android.internal.util.Predicate;
-
-import org.acra.ACRA;
-import org.acra.ACRAConstants;
-import org.acra.collections.BoundedLinkedList;
-
-import java.io.BufferedReader;
-import java.io.Closeable;
-import java.io.File;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.io.InputStreamReader;
-import java.io.OutputStreamWriter;
-import java.util.LinkedList;
-import java.util.List;
-
-import static org.acra.ACRA.LOG_TAG;
-
-/**
- * @author William Ferguson, F43nd1r
- * @since 4.6.0
- */
-public final class IOUtils {
-
-    private static final Predicate<String> DEFAULT_FILTER = new Predicate<String>() {
-        @Override
-        public boolean apply(String s) {
-            return true;
-        }
-    };
-    private static final int NO_LIMIT = -1;
-    private static final int READ_TIMEOUT = 3000;
-
-    private IOUtils() {
-    }
-
-
-    /**
-     * Closes a Closeable.
-     *
-     * @param closeable Closeable to close. If closeable is null then method just returns.
-     */
-    public static void safeClose(@Nullable Closeable closeable) {
-        if (closeable == null) return;
-
-        try {
-            closeable.close();
-        } catch (IOException ignored) {
-            // We made out best effort to release this resource. Nothing more we can do.
-        }
-    }
-
-    /**
-     * Reads an InputStream into a string
-     *
-     * @param input InputStream to read.
-     * @return the String that was read.
-     * @throws IOException if the InputStream could not be read.
-     */
-    @NonNull
-    public static String streamToString(@NonNull InputStream input) throws IOException {
-        return streamToString(input, DEFAULT_FILTER, NO_LIMIT);
-    }
-
-    /**
-     * Reads an InputStream into a string
-     *
-     * @param input  InputStream to read.
-     * @param filter should return false for lines which should be excluded
-     * @return the String that was read.
-     * @throws IOException if the InputStream could not be read.
-     */
-    @NonNull
-    public static String streamToString(@NonNull InputStream input, Predicate<String> filter) throws IOException {
-        return streamToString(input, filter, NO_LIMIT);
-    }
-
-    /**
-     * Reads an InputStream into a string
-     *
-     * @param input InputStream to read.
-     * @param limit the maximum number of lines to read (the last x lines are kept)
-     * @return the String that was read.
-     * @throws IOException if the InputStream could not be read.
-     */
-    @NonNull
-    public static String streamToString(@NonNull InputStream input, int limit) throws IOException {
-        return streamToString(input, DEFAULT_FILTER, limit);
-    }
-
-    /**
-     * Reads an InputStream into a string
-     *
-     * @param input  InputStream to read.
-     * @param filter Predicate that should return false for lines which should be excluded.
-     * @param limit  the maximum number of lines to read (the last x lines are kept)
-     * @return the String that was read.
-     * @throws IOException if the InputStream could not be read.
-     */
-    @NonNull
-    public static String streamToString(@NonNull InputStream input, Predicate<String> filter, int limit) throws IOException {
-        final BufferedReader reader = new BufferedReader(new InputStreamReader(input), ACRAConstants.DEFAULT_BUFFER_SIZE_IN_BYTES);
-        try {
-            String line;
-            final List<String> buffer = limit == NO_LIMIT ? new LinkedList<String>() : new BoundedLinkedList<String>(limit);
-            while ((line = reader.readLine()) != null) {
-                if (filter.apply(line)) {
-                    buffer.add(line);
-                }
-            }
-            return TextUtils.join("\n", buffer);
-        } finally {
-            safeClose(reader);
-        }
-    }
-
-    /**
-     * Reads an InputStream into a string without blocking the current thread.
-     * It has a default timeout of 3 seconds.
-     *
-     * @param input  InputStream to read.
-     * @param filter Predicate that should return false for lines which should be excluded.
-     * @param limit  the maximum number of lines to read (the last x lines are kept).
-     * @return the String that was read.
-     * @throws IOException if the InputStream could not be read.
-     */
-    @NonNull
-    public static String streamToStringNonBlockingRead(@NonNull InputStream input, Predicate<String> filter, int limit) throws IOException {
-        final BufferedReader reader = new BufferedReader(new InputStreamReader(input), ACRAConstants.DEFAULT_BUFFER_SIZE_IN_BYTES);
-        final NonBlockingBufferedReader nonBlockingReader = new NonBlockingBufferedReader(reader);
-        try {
-            final List<String> buffer = limit == NO_LIMIT ? new LinkedList<String>() : new BoundedLinkedList<String>(limit);
-            final long end = System.currentTimeMillis() + READ_TIMEOUT;
-            try {
-                while ((System.currentTimeMillis() < end)) {
-                    final String line = nonBlockingReader.readLine();
-                    if (line == null) {
-                        break;
-                    }
-                    if (filter.apply(line)) {
-                        buffer.add(line);
-                    }
-                }
-            } catch (InterruptedException e) {
-                if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Interrupted while reading stream", e);
-            }
-            return TextUtils.join("\n", buffer);
-        } finally {
-            nonBlockingReader.close();
-        }
-    }
-
-    public static void deleteReport(@NonNull File file) {
-        final boolean deleted = file.delete();
-        if (!deleted) {
-            ACRA.log.w(LOG_TAG, "Could not delete error report : " + file);
-        }
-    }
-
-    public static void writeStringToFile(@NonNull File file, @NonNull String content) throws IOException {
-        final OutputStreamWriter writer = new OutputStreamWriter(new FileOutputStream(file), ACRAConstants.UTF8);
-        try {
-            writer.write(content);
-            writer.flush();
-        } finally {
-            safeClose(writer);
-        }
-    }
-}
diff --git a/acra/src/main/java/org/acra/util/Installation.java b/acra/src/main/java/org/acra/util/Installation.java
deleted file mode 100644
index 3000000c..00000000
--- a/acra/src/main/java/org/acra/util/Installation.java
+++ /dev/null
@@ -1,78 +0,0 @@
-/*
- * Class copied from the Android Developers Blog:
- * http://android-developers.blogspot.com/2011/03/identifying-app-installations.html 
- */
-package org.acra.util;
-
-import android.content.Context;
-import android.support.annotation.NonNull;
-
-import org.acra.ACRA;
-
-import java.io.File;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.io.RandomAccessFile;
-import java.util.UUID;
-
-import static org.acra.ACRA.LOG_TAG;
-
-/**
- * <p>
- * Creates a file storing a UUID on the first application start. This UUID can then be used as a identifier of this
- * specific application installation.
- * </p>
- * 
- * <p>
- * This was taken from <a href="http://android-developers.blogspot.com/2011/03/identifying-app-installations.html"> the
- * android developers blog.</a>
- * </p>
- */
-public final class Installation {
-    private Installation(){}
-
-    private static String sID;
-    private static final String INSTALLATION = "ACRA-INSTALLATION";
-
-    @NonNull
-    public static synchronized String id(@NonNull Context context) {
-        if (sID == null) {
-            final File installation = new File(context.getFilesDir(), INSTALLATION);
-            try {
-                if (!installation.exists()) {
-                    writeInstallationFile(installation);
-                }
-                sID = readInstallationFile(installation);
-            } catch (IOException e) {
-                ACRA.log.w(LOG_TAG, "Couldn't retrieve InstallationId for " + context.getPackageName(), e);
-                return "Couldn't retrieve InstallationId";
-            } catch (RuntimeException e) {
-                ACRA.log.w(LOG_TAG, "Couldn't retrieve InstallationId for " + context.getPackageName(), e);
-                return "Couldn't retrieve InstallationId";
-            }
-        }
-        return sID;
-    }
-
-    @NonNull
-    private static String readInstallationFile(@NonNull File installation) throws IOException {
-        final RandomAccessFile f = new RandomAccessFile(installation, "r");
-        final byte[] bytes = new byte[(int) f.length()];
-        try {
-            f.readFully(bytes);
-        } finally {
-            IOUtils.safeClose(f);
-        }
-        return new String(bytes);
-    }
-
-    private static void writeInstallationFile(@NonNull File installation) throws IOException {
-        final FileOutputStream out = new FileOutputStream(installation);
-        try {
-            final String id = UUID.randomUUID().toString();
-            out.write(id.getBytes());
-        } finally {
-            IOUtils.safeClose(out);
-        }
-    }
-}
diff --git a/acra/src/main/java/org/acra/util/JsonUtils.java b/acra/src/main/java/org/acra/util/JsonUtils.java
deleted file mode 100644
index e399d573..00000000
--- a/acra/src/main/java/org/acra/util/JsonUtils.java
+++ /dev/null
@@ -1,94 +0,0 @@
-/*
- * Copyright (c) 2016
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.acra.util;
-
-import android.util.Log;
-
-import org.acra.ReportField;
-import org.acra.model.ComplexElement;
-import org.acra.collector.CrashReportData;
-import org.acra.model.Element;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.util.ArrayList;
-import java.util.HashMap;
-import java.util.Iterator;
-import java.util.List;
-import java.util.Map;
-
-import static org.acra.ACRA.LOG_TAG;
-
-/**
- * @author F43nd1r
- * @since 12.10.2016
- */
-
-public final class JsonUtils {
-    private JsonUtils() {
-    }
-
-    public static JSONObject toJson(CrashReportData data) {
-        final Map<String, Object> map = new HashMap<String, Object>();
-        for (Map.Entry<ReportField, Element> entry : data.entrySet()) {
-            final Element element = entry.getValue();
-            map.put(entry.getKey().name(), element.value());
-        }
-        return new JSONObject(map);
-    }
-
-    public static CrashReportData toCrashReportData(JSONObject json) {
-        final CrashReportData data = new CrashReportData();
-        for (final Iterator<String> iterator = json.keys(); iterator.hasNext(); ) {
-            final String key = iterator.next();
-            try {
-                final ReportField field = ReportField.valueOf(key);
-                final Object value = json.get(key);
-                if (value instanceof JSONObject) {
-                    data.put(field, new ComplexElement((JSONObject) value));
-                } else if (value instanceof Number) {
-                    data.putNumber(field, (Number) value);
-                } else if (value instanceof Boolean) {
-                    data.putBoolean(field, (Boolean) value);
-                } else {
-                    data.putString(field, value.toString());
-                }
-            } catch (IllegalArgumentException e) {
-                Log.w(LOG_TAG, "Unknown report key " + key, e);
-            } catch (JSONException e) {
-                Log.w(LOG_TAG, "Unable to read report field " + key, e);
-            }
-        }
-        return data;
-    }
-
-    public static List<String> flatten(JSONObject json) throws JSONException {
-        final List<String> result = new ArrayList<String>();
-        for (final Iterator<String> iterator = json.keys(); iterator.hasNext(); ) {
-            final String key = iterator.next();
-            final Object value = json.get(key);
-            if (value instanceof JSONObject) {
-                for (String s : flatten((JSONObject) value)) {
-                    result.add(key + "." + s);
-                }
-            } else {
-                result.add(key + "=" + value);
-            }
-        }
-        return result;
-    }
-}
diff --git a/acra/src/main/java/org/acra/util/NonBlockingBufferedReader.java b/acra/src/main/java/org/acra/util/NonBlockingBufferedReader.java
deleted file mode 100644
index e9ceb54b..00000000
--- a/acra/src/main/java/org/acra/util/NonBlockingBufferedReader.java
+++ /dev/null
@@ -1,57 +0,0 @@
-package org.acra.util;
-
-import java.io.BufferedReader;
-import java.io.IOException;
-import java.util.concurrent.BlockingQueue;
-import java.util.concurrent.LinkedBlockingQueue;
-import java.util.concurrent.TimeUnit;
-
-/**
- * Asynchronously reads a buffer into a List of String.
- *
- * @author C-Romeo
- * @since 4.9.0
- */
-final class NonBlockingBufferedReader {
-
-    private final BlockingQueue<String> lines = new LinkedBlockingQueue<String>();
-    private Thread backgroundReaderThread = null;
-    private volatile IOException exception = null;
-
-    NonBlockingBufferedReader(final BufferedReader bufferedReader) {
-        backgroundReaderThread = new Thread(new Runnable() {
-            @Override
-            public void run() {
-                try {
-                    while (!Thread.interrupted()) {
-                        final String line = bufferedReader.readLine();
-                        if (line == null) {
-                            break;
-                        }
-                        lines.add(line);
-                    }
-                } catch (IOException e) {
-                    exception = e;
-                } finally {
-                    IOUtils.safeClose(bufferedReader);
-                }
-            }
-        });
-        backgroundReaderThread.setDaemon(true);
-        backgroundReaderThread.start();
-    }
-
-    String readLine() throws InterruptedException, IOException {
-        if(exception != null){
-            throw exception;
-        }
-        return lines.isEmpty() ? null : lines.poll(500L, TimeUnit.MILLISECONDS);
-    }
-
-    void close() {
-        if (backgroundReaderThread != null) {
-            backgroundReaderThread.interrupt();
-            backgroundReaderThread = null;
-        }
-    }
-}
diff --git a/acra/src/main/java/org/acra/util/ToastSender.java b/acra/src/main/java/org/acra/util/ToastSender.java
deleted file mode 100644
index 526fc6b4..00000000
--- a/acra/src/main/java/org/acra/util/ToastSender.java
+++ /dev/null
@@ -1,36 +0,0 @@
-package org.acra.util;
-
-import android.content.Context;
-import android.support.annotation.IntRange;
-import android.support.annotation.NonNull;
-import android.support.annotation.StringRes;
-import android.widget.Toast;
-
-import org.acra.ACRA;
-
-import static org.acra.ACRA.LOG_TAG;
-
-/**
- * Responsible for sending Toasts under all circumstances.
- *
- * @author William Ferguson
- * @since 4.3.0
- */
-public final class ToastSender {
-    private ToastSender(){}
-
-    /**
-     * Sends a Toast and ensures that any Exception thrown during sending is handled.
-     *
-     * @param context         Application context.
-     * @param toastResourceId Id of the resource to send as the Toast message.
-     * @param toastLength     Length of the Toast.
-     */
-    public static void sendToast(@NonNull Context context, @StringRes int toastResourceId, @IntRange(from = 0, to = 1) int toastLength) {
-        try {
-            Toast.makeText(context, toastResourceId, toastLength).show();
-        } catch (RuntimeException e) {
-            ACRA.log.w(LOG_TAG, "Could not send crash Toast", e);
-        }
-    }
-}
diff --git a/acra/src/main/res/values/strings.xml b/acra/src/main/res/values/strings.xml
deleted file mode 100644
index a3d564ca..00000000
--- a/acra/src/main/res/values/strings.xml
+++ /dev/null
@@ -1,8 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-This file is just here to force android-maven-plugin:4.4.3 to include a /res folder in the AAR
-which is now a requirement https://developer.android.com/studio/projects/android-library.html#aar-contents
--->
-<resources>
-    <string name="not_used">Only here to ensure that android-maven-plugin:4.4.3 creates an R.txt</string>
-</resources>
diff --git a/annotationprocessor/build.gradle b/annotationprocessor/build.gradle
index 0c30ea17..3084170e 100644
--- a/annotationprocessor/build.gradle
+++ b/annotationprocessor/build.gradle
@@ -18,11 +18,13 @@ apply plugin: 'java'
 
 dependencies {
     compile fileTree(dir: 'libs', include: ['*.jar'])
-    compile 'com.google.auto.service:auto-service:1.0-rc2'
-    compile 'com.squareup:javapoet:1.7.0'
+    compile "com.google.auto.service:auto-service:$autoServiceVersion"
+    compile 'com.squareup:javapoet:1.9.0'
+    compile 'org.apache.commons:commons-lang3:3.7'
+    compile 'org.apache.commons:commons-text:1.1'
     compile project(':annotations')
+    compile project(':acra-javacore')
 }
 
 sourceCompatibility = "1.8"
 targetCompatibility = "1.8"
-version = '1.0.0'
diff --git a/annotationprocessor/src/main/java/org/acra/AcraAnnotationProcessor.java b/annotationprocessor/src/main/java/org/acra/AcraAnnotationProcessor.java
deleted file mode 100644
index 19d7591f..00000000
--- a/annotationprocessor/src/main/java/org/acra/AcraAnnotationProcessor.java
+++ /dev/null
@@ -1,253 +0,0 @@
-/*
- * Copyright (c) 2017
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.acra;
-
-import com.google.auto.service.AutoService;
-import com.squareup.javapoet.AnnotationSpec;
-import com.squareup.javapoet.ClassName;
-import com.squareup.javapoet.CodeBlock;
-import com.squareup.javapoet.FieldSpec;
-import com.squareup.javapoet.MethodSpec;
-import com.squareup.javapoet.ParameterSpec;
-import com.squareup.javapoet.TypeName;
-import com.squareup.javapoet.TypeSpec;
-import com.squareup.javapoet.TypeVariableName;
-
-import org.acra.annotation.Configuration;
-import org.acra.annotation.ConfigurationBuilder;
-
-import java.io.IOException;
-import java.io.Serializable;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Set;
-import java.util.stream.Collectors;
-
-import javax.annotation.processing.AbstractProcessor;
-import javax.annotation.processing.ProcessingEnvironment;
-import javax.annotation.processing.Processor;
-import javax.annotation.processing.RoundEnvironment;
-import javax.annotation.processing.SupportedSourceVersion;
-import javax.lang.model.SourceVersion;
-import javax.lang.model.element.Element;
-import javax.lang.model.element.ElementKind;
-import javax.lang.model.element.ExecutableElement;
-import javax.lang.model.element.Modifier;
-import javax.lang.model.element.TypeElement;
-import javax.lang.model.type.TypeKind;
-import javax.lang.model.type.TypeMirror;
-import javax.lang.model.util.Elements;
-import javax.lang.model.util.Types;
-import javax.tools.Diagnostic;
-
-import static org.acra.ModelUtils.*;
-
-/**
- * Creates the BaseConfigurationBuilder class based on the annotation annotated with {@link Configuration}.
- * Creates the ACRAConfiguration class based on the BaseConfigurationBuilder and the class annotated with {@link ConfigurationBuilder}
- *
- * @author F43nd1r
- * @since 18.03.2017
- */
-@AutoService(Processor.class)
-@SupportedSourceVersion(SourceVersion.RELEASE_6)
-public class AcraAnnotationProcessor extends AbstractProcessor {
-
-    private Elements elementUtils;
-    private Types typeUtils;
-    private ModelUtils utils;
-
-    @Override
-    public synchronized void init(ProcessingEnvironment processingEnv) {
-        super.init(processingEnv);
-        elementUtils = processingEnv.getElementUtils();
-        typeUtils = processingEnv.getTypeUtils();
-        utils = new ModelUtils(processingEnv);
-    }
-
-    @Override
-    public Set<String> getSupportedAnnotationTypes() {
-        return new HashSet<>(Arrays.asList(Configuration.class.getName(), ConfigurationBuilder.class.getName()));
-    }
-
-    @Override
-    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
-        try {
-            final Set<MethodDefinition> methodDefinitions = process(roundEnv, Configuration.class.getName(), ElementKind.ANNOTATION_TYPE, new HashSet<>(), this::createBuilderClass);
-            process(roundEnv, ConfigurationBuilder.class.getName(), ElementKind.CLASS, null, type -> createConfigClass(type, methodDefinitions));
-        } catch (Exception e) {
-            e.printStackTrace();
-            processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, "Failed to generate acra classes");
-        }
-        return true;
-    }
-
-    private <T> T process(RoundEnvironment roundEnv, String annotationName, ElementKind kind, T defaultValue, CheckedFunction<TypeElement, T> function) throws IOException {
-        final TypeElement annotation = elementUtils.getTypeElement(annotationName);
-        final ArrayList<? extends Element> annotatedElements = new ArrayList<>(roundEnv.getElementsAnnotatedWith(annotation));
-        if (annotatedElements.size() > 1) {
-            for (Element e : annotatedElements) {
-                processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, String.format("Only one %s can be annotated with %s", kind.name(), annotationName), e);
-            }
-        } else if (!annotatedElements.isEmpty()) {
-            final Element e = annotatedElements.get(0);
-            if (e.getKind() == kind) {
-                return function.apply((TypeElement) e);
-            } else {
-                processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, String.format("%s is only supported on %s", annotationName, kind.name()), e);
-            }
-        }
-        return defaultValue;
-    }
-
-    /**
-     * Creates the ACRAConfiguration class
-     *
-     * @param builder           type of the builder which will be used to determine methods to generate
-     * @param methodDefinitions additional methods to be included in the configuration (e.g. from the builder base class)
-     * @return null
-     * @throws IOException if the class file can't be written
-     */
-    private Void createConfigClass(TypeElement builder, Set<MethodDefinition> methodDefinitions) throws IOException {
-        final Set<MethodDefinition> methods = getRelevantMethods(builder, methodDefinitions);
-        final TypeSpec.Builder classBuilder = TypeSpec.classBuilder(ACRA_CONFIGURATION)
-                .addSuperinterface(Serializable.class)
-                .addModifiers(Modifier.PUBLIC, Modifier.FINAL);
-        utils.addClassJavadoc(classBuilder, builder);
-        final CodeBlock.Builder constructor = CodeBlock.builder();
-        for (MethodDefinition method : methods) {
-            final String name = method.getName();
-            final TypeMirror type = utils.getImmutableType(method.getType());
-            if (type != method.getType()) {
-                constructor.addStatement("$1L = new $2T($3L.$1L())", name, type, PARAM_BUILDER);
-            } else {
-                constructor.addStatement("$1L = $2L.$1L()", name, PARAM_BUILDER);
-            }
-            final TypeName typeName = TypeName.get(type);
-            classBuilder.addField(FieldSpec.builder(typeName, name, Modifier.PRIVATE).addAnnotations(method.getAnnotations()).build());
-            classBuilder.addMethod(MethodSpec.methodBuilder(name)
-                    .returns(typeName)
-                    .addModifiers(Modifier.PUBLIC)
-                    .addAnnotations(method.getAnnotations())
-                    .addStatement("return $L", name)
-                    .build());
-        }
-        classBuilder.addMethod(MethodSpec.constructorBuilder().addModifiers(Modifier.PUBLIC)
-                .addParameter(ParameterSpec.builder(TypeName.get(builder.asType()), PARAM_BUILDER)
-                        .addAnnotation(AnnotationSpec.builder(ANNOTATION_NON_NULL).build())
-                        .build())
-                .addCode(constructor.build())
-                .build());
-        utils.write(classBuilder.build());
-        return null;
-    }
-
-    /**
-     * Collects all relevant methods from a type.
-     * For a definition of relevant methods, see {@link ModelUtils#shouldRetain(MethodDefinition)}.
-     *
-     * @param builder the type to collect methods from
-     * @return relevant methods in the type
-     */
-    private Set<MethodDefinition> getRelevantMethods(TypeElement builder, Set<MethodDefinition> methodDefinitions) {
-        final Set<MethodDefinition> result = builder.getEnclosedElements().stream().filter(e -> e.getKind() == ElementKind.METHOD && !e.getModifiers().contains(Modifier.PRIVATE))
-                .map(ExecutableElement.class::cast).map(MethodDefinition::from).collect(Collectors.toCollection(HashSet::new));
-        result.addAll(methodDefinitions);
-        return result.stream().filter(utils::shouldRetain).collect(Collectors.toSet());
-    }
-
-    /**
-     * Creates the BaseConfigurationBuilder class
-     *
-     * @param config the configuration annotation type which will be used to determine methods to generate
-     * @return all generated getters
-     * @throws IOException if the class file can't be written
-     */
-    private Set<MethodDefinition> createBuilderClass(TypeElement config) throws IOException {
-        final TypeVariableName returnType = TypeVariableName.get("T", ClassName.get(CONFIGURATION_PACKAGE, CONFIGURATION_BUILDER));
-        final TypeSpec.Builder classBuilder = TypeSpec.classBuilder(CONFIGURATION_BUILDER)
-                .addModifiers(Modifier.PUBLIC, Modifier.ABSTRACT)
-                .addTypeVariable(returnType);
-        utils.addClassJavadoc(classBuilder, config);
-        final CodeBlock.Builder constructor = CodeBlock.builder()
-                .addStatement("final $1T $2L = $3L.getClass().getAnnotation($1T.class)", config.asType(), VAR_ANNOTATION_CONFIG, PARAM_APP)
-                .beginControlFlow("if ($L != null)", VAR_ANNOTATION_CONFIG);
-        final Set<MethodDefinition> result = config.getEnclosedElements().stream().filter(element -> element.getKind() == ElementKind.METHOD)
-                .map(ExecutableElement.class::cast).filter(utils::isNotDeprecated).map(e -> handleMethod(e, classBuilder, constructor, returnType)).collect(Collectors.toSet());
-        constructor.endControlFlow();
-        classBuilder.addMethod(MethodSpec.constructorBuilder().addModifiers(Modifier.PUBLIC)
-                .addParameter(ParameterSpec.builder(APPLICATION, PARAM_APP)
-                        .addAnnotation(AnnotationSpec.builder(ANNOTATION_NON_NULL).build())
-                        .build())
-                .addCode(constructor.build())
-                .build());
-        utils.write(classBuilder.build());
-        return result;
-    }
-
-    /**
-     * Derives all code from one method: A setter, a getter, a field and a line in the constructor
-     *
-     * @param method       the method to derive from
-     * @param classBuilder the class to add methods to
-     * @param constructor  the constructor in which the field will be initialized
-     * @return the generated getter
-     */
-    private MethodDefinition handleMethod(ExecutableElement method, TypeSpec.Builder classBuilder, CodeBlock.Builder constructor, TypeName returnType) {
-        final String name = utils.getName(method);
-        final TypeMirror type = method.getReturnType();
-        final TypeName typeName = TypeName.get(type);
-        final TypeName boxedType = TypeName.get(utils.getBoxedType(type));
-        final List<AnnotationSpec> annotations = ModelUtils.getAnnotations(method);
-        classBuilder.addField(FieldSpec.builder(boxedType, name, Modifier.PRIVATE)
-                .addAnnotations(annotations)
-                .build());
-        classBuilder.addMethod(utils.addMethodJavadoc(MethodSpec.methodBuilder(PREFIX_SETTER + utils.capitalizeFirst(name)), method)
-                .returns(returnType)
-                .addParameter(ParameterSpec.builder(typeName, name).addAnnotations(annotations).build())
-                .varargs(type.getKind() == TypeKind.ARRAY)
-                .addModifiers(Modifier.PUBLIC)
-                .addStatement("this.$1L = $1L", name)
-                .addStatement("return ($T) this", returnType)
-                .build());
-        final CodeBlock.Builder code = CodeBlock.builder()
-                .beginControlFlow("if ($L != null)", name)
-                .addStatement("return $L", name)
-                .endControlFlow();
-        if (type.getKind() == TypeKind.ARRAY) {
-            code.addStatement("return new $T$L", typeUtils.erasure(type), method.getDefaultValue());
-        } else {
-            code.addStatement("return $L", method.getDefaultValue());
-        }
-        classBuilder.addMethod(MethodSpec.methodBuilder(name)
-                .returns(typeName)
-                .addAnnotations(annotations)
-                .addCode(code.build())
-                .build());
-        constructor.addStatement("$L = $L.$L()", name, VAR_ANNOTATION_CONFIG, method.getSimpleName().toString());
-        return new MethodDefinition(name, type, annotations);
-    }
-
-
-    @FunctionalInterface
-    interface CheckedFunction<T, R> {
-        R apply(T t) throws IOException;
-    }
-
-}
diff --git a/annotationprocessor/src/main/java/org/acra/MethodDefinition.java b/annotationprocessor/src/main/java/org/acra/MethodDefinition.java
deleted file mode 100644
index d21cc58a..00000000
--- a/annotationprocessor/src/main/java/org/acra/MethodDefinition.java
+++ /dev/null
@@ -1,80 +0,0 @@
-/*
- * Copyright (c) 2017
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.acra;
-
-import com.squareup.javapoet.AnnotationSpec;
-
-import java.util.List;
-import java.util.stream.Collectors;
-
-import javax.lang.model.element.ExecutableElement;
-import javax.lang.model.type.TypeMirror;
-
-/**
- * The minimal Definition needed to create a getter
- *
- * @author F43nd1r
- * @since 18.03.2017
- */
-class MethodDefinition {
-    private final String name;
-    private final TypeMirror type;
-    private final List<AnnotationSpec> annotations;
-
-    static MethodDefinition from(ExecutableElement method) {
-        return new MethodDefinition(method.getSimpleName().toString(), method.getReturnType(), ModelUtils.getAnnotations(method));
-    }
-
-    MethodDefinition(String name, TypeMirror type, List<AnnotationSpec> annotations) {
-        this.name = name;
-        this.type = type;
-        this.annotations = annotations;
-    }
-
-    String getName() {
-        return name;
-    }
-
-    TypeMirror getType() {
-        return type;
-    }
-
-    List<AnnotationSpec> getAnnotations() {
-        return annotations;
-    }
-
-    @Override
-    public boolean equals(Object o) {
-        if (this == o) return true;
-        if (o == null || getClass() != o.getClass()) return false;
-
-        final MethodDefinition that = (MethodDefinition) o;
-
-        return name.equals(that.name);
-
-    }
-
-    @Override
-    public int hashCode() {
-        return name.hashCode();
-    }
-
-    @Override
-    public String toString() {
-        return annotations.stream().map(AnnotationSpec::toString).collect(Collectors.joining(" ")) + " " + type + " " + name + "()";
-    }
-}
diff --git a/annotationprocessor/src/main/java/org/acra/ModelUtils.java b/annotationprocessor/src/main/java/org/acra/ModelUtils.java
deleted file mode 100644
index 7582a4ef..00000000
--- a/annotationprocessor/src/main/java/org/acra/ModelUtils.java
+++ /dev/null
@@ -1,213 +0,0 @@
-/*
- * Copyright (c) 2017
- *
- * Licensed under the Apache License, Version 2.0 (the "License");
- * you may not use this file except in compliance with the License.
- * You may obtain a copy of the License at
- *
- *     http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package org.acra;
-
-import com.squareup.javapoet.AnnotationSpec;
-import com.squareup.javapoet.ClassName;
-import com.squareup.javapoet.JavaFile;
-import com.squareup.javapoet.MethodSpec;
-import com.squareup.javapoet.TypeSpec;
-
-import org.acra.annotation.Name;
-import org.acra.annotation.NoPropagation;
-
-import java.io.IOException;
-import java.text.DateFormat;
-import java.util.Calendar;
-import java.util.List;
-import java.util.Map;
-import java.util.Set;
-import java.util.stream.Collectors;
-
-import javax.annotation.processing.ProcessingEnvironment;
-import javax.lang.model.element.ExecutableElement;
-import javax.lang.model.element.TypeElement;
-import javax.lang.model.type.ArrayType;
-import javax.lang.model.type.DeclaredType;
-import javax.lang.model.type.PrimitiveType;
-import javax.lang.model.type.TypeKind;
-import javax.lang.model.type.TypeMirror;
-import javax.lang.model.util.Elements;
-import javax.lang.model.util.Types;
-
-/**
- * Collection of constants and helper methods to generate ACRA classes
- *
- * @author F43nd1r
- * @since 18.03.2017
- */
-
-class ModelUtils {
-    static final String CONFIGURATION_PACKAGE = "org.acra.config";
-    static final String CONFIGURATION_BUILDER = "BaseConfigurationBuilder";
-    static final String ACRA_CONFIGURATION = "ACRAConfiguration";
-    static final String PREFIX_SETTER = "set";
-    static final String PARAM_APP = "app";
-    static final String PARAM_BUILDER = "builder";
-    static final String VAR_ANNOTATION_CONFIG = "annotationConfig";
-    static final ClassName APPLICATION = ClassName.bestGuess("android.app.Application");
-    static final ClassName ANNOTATION_NON_NULL = ClassName.bestGuess("android.support.annotation.NonNull");
-    private static final String IMMUTABLE_MAP = "org.acra.collections.ImmutableMap";
-    private static final String IMMUTABLE_LIST = "org.acra.collections.ImmutableList";
-    private static final String IMMUTABLE_SET = "org.acra.collections.ImmutableSet";
-    private static final ClassName ANNOTATION_NO_PROPAGATION = ClassName.get(NoPropagation.class);
-
-    private final Types typeUtils;
-    private final Elements elementUtils;
-    private final TypeMirror map;
-    private final TypeMirror set;
-    private final TypeElement immutableMap;
-    private final TypeElement immutableSet;
-    private final TypeElement immutableList;
-    private final ProcessingEnvironment processingEnv;
-    private final DateFormat dateFormat;
-
-    ModelUtils(ProcessingEnvironment processingEnv) {
-        this.processingEnv = processingEnv;
-        typeUtils = processingEnv.getTypeUtils();
-        elementUtils = processingEnv.getElementUtils();
-        map = elementUtils.getTypeElement(Map.class.getName()).asType();
-        set = elementUtils.getTypeElement(Set.class.getName()).asType();
-        immutableMap = elementUtils.getTypeElement(IMMUTABLE_MAP);
-        immutableSet = elementUtils.getTypeElement(IMMUTABLE_SET);
-        immutableList = elementUtils.getTypeElement(IMMUTABLE_LIST);
-        dateFormat = DateFormat.getDateTimeInstance();
-    }
-
-    /**
-     * Returns an immutable type extending this type, or if the type is an array a immutable list type
-     *
-     * @param type the type
-     * @return the immutable counterpart (might be type, if type is already immutable or no immutable type was found)
-     */
-    TypeMirror getImmutableType(TypeMirror type) {
-        if (typeUtils.isAssignable(typeUtils.erasure(type), map)) {
-            return getWithParams(immutableMap, type);
-        } else if (typeUtils.isAssignable(typeUtils.erasure(type), set)) {
-            return getWithParams(immutableSet, type);
-        } else if (type.getKind() == TypeKind.ARRAY) {
-            return typeUtils.getDeclaredType(immutableList, ((ArrayType) type).getComponentType());
-        }
-        return type;
-    }
-
-    /**
-     * Creates a type based on base, but with the type parameters from parameterType
-     *
-     * @param baseType      base
-     * @param parameterType parameterType
-     * @return the parametrized type
-     */
-    private TypeMirror getWithParams(TypeElement baseType, TypeMirror parameterType) {
-        final List<? extends TypeMirror> parameters = ((DeclaredType) parameterType).getTypeArguments();
-        return typeUtils.getDeclaredType(baseType, parameters.toArray(new TypeMirror[parameters.size()]));
-    }
-
-    /**
-     * Writes the given class to a respective file in the configuration package
-     *
-     * @param typeSpec the class
-     * @throws IOException if writing fails
-     */
-    void write(TypeSpec typeSpec) throws IOException {
-        JavaFile.builder(CONFIGURATION_PACKAGE, typeSpec)
-                .skipJavaLangImports(true)
-                .indent("    ")
-                .addFileComment("Copyright (c) " + Calendar.getInstance().get(Calendar.YEAR) + "\n\n" +
-                        "Licensed under the Apache License, Version 2.0 (the \"License\");\n" +
-                        "you may not use this file except in compliance with the License.\n\n" +
-                        "http://www.apache.org/licenses/LICENSE-2.0\n\n" +
-                        "Unless required by applicable law or agreed to in writing, software\n" +
-                        "distributed under the License is distributed on an \"AS IS\" BASIS,\n" +
-                        "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n" +
-                        "See the License for the specific language governing permissions and\n" +
-                        "limitations under the License.")
-                .build()
-                .writeTo(processingEnv.getFiler());
-    }
-
-    /**
-     * @param method a method
-     * @return annotationSpecs for all relevant annotations on the method
-     */
-    static List<AnnotationSpec> getAnnotations(ExecutableElement method) {
-        return method.getAnnotationMirrors().stream().map(AnnotationSpec::get)
-                .filter(annotationSpec -> !ClassName.get(Name.class).equals(annotationSpec.type)).collect(Collectors.toList());
-    }
-
-    /**
-     * Box the type if it is primitive
-     *
-     * @param type the type to box
-     * @return the boxed type or type, if it is not primitive
-     */
-    TypeMirror getBoxedType(TypeMirror type) {
-        if (type.getKind().isPrimitive()) {
-            return typeUtils.boxedClass((PrimitiveType) type).asType();
-        } else {
-            return type;
-        }
-    }
-
-    /**
-     * Capitalizes the first letter in the given string
-     *
-     * @param word the string
-     * @return the string with a capitalized first letter
-     */
-    String capitalizeFirst(final String word) {
-        return Character.toUpperCase(word.charAt(0)) + word.substring(1);
-    }
-
-    /**
-     * Determines if a method is relevant for ACRAConfiguration generation
-     * A method is not relevant, if it starts with "set", or is annotated with @Hide
-     *
-     * @param method the method to check
-     * @return if the method is relevant
-     */
-    boolean shouldRetain(MethodDefinition method) {
-        return !method.getName().startsWith(PREFIX_SETTER) && !method.getAnnotations().stream().anyMatch(a -> a.type.equals(ANNOTATION_NO_PROPAGATION));
-    }
-
-    /**
-     * @param method a method
-     * @return false if the method is deprecated
-     */
-    boolean isNotDeprecated(ExecutableElement method) {
-        return method.getAnnotation(Deprecated.class) == null;
-    }
-
-    void addClassJavadoc(TypeSpec.Builder builder, TypeElement base) {
-        builder.addJavadoc("Class generated based on {@link $L} ($L)\n", base.getQualifiedName(), dateFormat.format(Calendar.getInstance().getTime()));
-    }
-
-    MethodSpec.Builder addMethodJavadoc(MethodSpec.Builder builder, ExecutableElement base) {
-        final String baseComment = elementUtils.getDocComment(base);
-        if (baseComment == null) return builder;
-        final String name = getName(base);
-        return builder.addJavadoc(baseComment.replaceAll("(\n|^) ", "$1").replaceAll("@return ((.|\n)*)$", "@param " + name + " $1@return this instance\n"));
-    }
-
-    String getName(ExecutableElement method) {
-        final Name name = method.getAnnotation(Name.class);
-        if(name != null){
-            return name.value();
-        }
-        return method.getSimpleName().toString();
-    }
-}
diff --git a/annotationprocessor/src/main/java/org/acra/processor/AcraAnnotationProcessor.java b/annotationprocessor/src/main/java/org/acra/processor/AcraAnnotationProcessor.java
new file mode 100644
index 00000000..70f7bc79
--- /dev/null
+++ b/annotationprocessor/src/main/java/org/acra/processor/AcraAnnotationProcessor.java
@@ -0,0 +1,75 @@
+/*
+ * Copyright (c) 2018 the ACRA team
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.processor;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import com.google.auto.common.MoreElements;
+import com.google.auto.service.AutoService;
+import com.squareup.javapoet.ClassName;
+import org.acra.annotation.Configuration;
+import org.acra.processor.creator.ClassCreator;
+import org.acra.processor.util.Types;
+
+import javax.annotation.processing.AbstractProcessor;
+import javax.annotation.processing.Processor;
+import javax.annotation.processing.RoundEnvironment;
+import javax.annotation.processing.SupportedSourceVersion;
+import javax.lang.model.SourceVersion;
+import javax.lang.model.element.Element;
+import javax.lang.model.element.ElementKind;
+import javax.lang.model.element.TypeElement;
+import javax.tools.Diagnostic;
+import java.util.ArrayList;
+import java.util.Set;
+import java.util.stream.Collectors;
+
+/**
+ * @author F43nd1r
+ * @since 18.03.2017
+ */
+@AutoService(Processor.class)
+@SupportedSourceVersion(SourceVersion.RELEASE_8)
+public class AcraAnnotationProcessor extends AbstractProcessor {
+
+    @Override
+    public Set<String> getSupportedAnnotationTypes() {
+        return Types.MARKER_ANNOTATIONS.stream().map(ClassName::reflectionName).collect(Collectors.toSet());
+    }
+
+    @Override
+    public boolean process(@Nullable Set<? extends TypeElement> annotations, @NonNull RoundEnvironment roundEnv) {
+        try {
+            final ArrayList<? extends Element> annotatedElements = new ArrayList<>(roundEnv.getElementsAnnotatedWith(Configuration.class));
+            if (!annotatedElements.isEmpty()) {
+                for (final Element e : annotatedElements) {
+                    if (e.getKind() == ElementKind.ANNOTATION_TYPE) {
+                        new ClassCreator(MoreElements.asType(e), e.getAnnotation(Configuration.class), processingEnv).createClasses();
+                    } else {
+                        processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, String.format("%s is only supported on %s",
+                                Configuration.class.getName(), ElementKind.ANNOTATION_TYPE.name()), e);
+                    }
+                }
+            }
+        } catch (Exception e) {
+            e.printStackTrace();
+            processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, "Failed to generate acra classes");
+        }
+        return true;
+    }
+
+}
diff --git a/annotationprocessor/src/main/java/org/acra/processor/creator/BuildMethodCreator.java b/annotationprocessor/src/main/java/org/acra/processor/creator/BuildMethodCreator.java
new file mode 100644
index 00000000..8e4a9faf
--- /dev/null
+++ b/annotationprocessor/src/main/java/org/acra/processor/creator/BuildMethodCreator.java
@@ -0,0 +1,126 @@
+/*
+ * Copyright (c) 2018 the ACRA team
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.processor.creator;
+
+import android.support.annotation.NonNull;
+
+import com.squareup.javapoet.ClassName;
+import com.squareup.javapoet.CodeBlock;
+import com.squareup.javapoet.MethodSpec;
+import com.squareup.javapoet.TypeName;
+
+import org.acra.config.ACRAConfigurationException;
+import org.acra.config.ClassValidator;
+import org.acra.processor.util.Strings;
+import org.acra.processor.util.Types;
+
+import java.util.ArrayList;
+import java.util.LinkedHashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.stream.Collectors;
+
+import javax.lang.model.element.ExecutableElement;
+
+/**
+ * @author F43nd1r
+ * @since 12.06.2017
+ */
+
+public class BuildMethodCreator {
+    private final MethodSpec.Builder methodBuilder;
+    private final Map<String, CodeBlock> anyNonDefault;
+    private final ClassName config;
+    private final List<CodeBlock> statements;
+
+    BuildMethodCreator(@NonNull ExecutableElement override, @NonNull ClassName config) {
+        this.config = config;
+        methodBuilder = Types.overriding(override)
+                .addAnnotation(Types.NON_NULL)
+                .returns(config)
+                .beginControlFlow("if ($L)", Strings.FIELD_ENABLED);
+        anyNonDefault = new LinkedHashMap<>();
+        statements = new ArrayList<>();
+    }
+
+    public void addNotUnset(@NonNull String name, @NonNull TypeName type) {
+        methodBuilder.beginControlFlow("if ($L == $L)", name, getDefault(type))
+                .addStatement("throw new $T(\"$L has to be set\")", ACRAConfigurationException.class, name)
+                .endControlFlow();
+    }
+
+    public void addNotEmpty(@NonNull String name) {
+        methodBuilder.beginControlFlow("if ($L.length == 0)", name)
+                .addStatement("throw new $T(\"$L cannot be empty\")", ACRAConfigurationException.class, name)
+                .endControlFlow();
+    }
+
+    public void addInstantiatable(@NonNull String name) {
+        methodBuilder.addStatement("$T.check($L)", ClassValidator.class, name);
+    }
+
+    public void addAnyNonDefault(@NonNull String name, @NonNull CodeBlock defaultValue) {
+        anyNonDefault.put(name, defaultValue);
+    }
+
+    @NonNull
+    private String getDefault(@NonNull TypeName type) {
+        if (type.isPrimitive()) {
+            if (type.equals(TypeName.BOOLEAN)) {
+                return "false";
+            } else if (type.equals(TypeName.BYTE)) {
+                return "0";
+            } else if (type.equals(TypeName.SHORT)) {
+                return "0";
+            } else if (type.equals(TypeName.INT)) {
+                return "0";
+            } else if (type.equals(TypeName.LONG)) {
+                return "0L";
+            } else if (type.equals(TypeName.CHAR)) {
+                return "\u0000";
+            } else if (type.equals(TypeName.FLOAT)) {
+                return "0.0f";
+            } else if (type.equals(TypeName.DOUBLE)) {
+                return "0.0d";
+            }
+        }
+        return "null";
+    }
+
+    public void addDelegateCall(@NonNull String methodName) {
+        statements.add(CodeBlock.builder().addStatement("$L.$L()", Strings.FIELD_DELEGATE, methodName).build());
+    }
+
+    @NonNull
+    MethodSpec build() {
+        if (anyNonDefault.size() > 0) {
+            methodBuilder.beginControlFlow("if ($L)", anyNonDefault.entrySet().stream().map(field -> CodeBlock.builder().add(field.getKey()).add(" == ").add(field.getValue()).build())
+                    .reduce((c1, c2) -> CodeBlock.builder().add(c1).add(" && ").add(c2).build()).orElseGet(() -> CodeBlock.of("true")))
+                    .addStatement("throw new $T(\"One of $L must not be default\")", ACRAConfigurationException.class,
+                            anyNonDefault.keySet().stream().collect(Collectors.joining(", ")))
+                    .endControlFlow();
+        }
+        methodBuilder.endControlFlow();
+        for (CodeBlock s : statements) {
+            methodBuilder.addCode(s);
+        }
+        methodBuilder.addStatement("return new $T(this)", config);
+        return methodBuilder.build();
+    }
+
+
+}
diff --git a/annotationprocessor/src/main/java/org/acra/processor/creator/ClassCreator.java b/annotationprocessor/src/main/java/org/acra/processor/creator/ClassCreator.java
new file mode 100644
index 00000000..a3132f63
--- /dev/null
+++ b/annotationprocessor/src/main/java/org/acra/processor/creator/ClassCreator.java
@@ -0,0 +1,152 @@
+/*
+ * Copyright (c) 2018 the ACRA team
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.processor.creator;
+
+import android.support.annotation.NonNull;
+import com.google.auto.common.MoreTypes;
+import com.google.auto.service.AutoService;
+import com.squareup.javapoet.*;
+import org.acra.annotation.Configuration;
+import org.acra.config.ConfigurationBuilder;
+import org.acra.processor.element.*;
+import org.acra.processor.util.Strings;
+import org.acra.processor.util.Types;
+
+import javax.annotation.processing.ProcessingEnvironment;
+import javax.lang.model.element.Modifier;
+import javax.lang.model.element.TypeElement;
+import javax.lang.model.type.MirroredTypeException;
+import java.io.IOException;
+import java.io.Serializable;
+import java.util.List;
+
+import static org.acra.processor.util.Strings.*;
+
+/**
+ * @author F43nd1r
+ * @since 04.06.2017
+ */
+
+public class ClassCreator {
+    private final TypeElement baseAnnotation;
+    private final Configuration configuration;
+    private final ProcessingEnvironment processingEnv;
+    private final String factoryName;
+    private final String configName;
+    private final String builderName;
+    private final String builderVisibleName;
+
+    public ClassCreator(@NonNull TypeElement baseAnnotation, Configuration configuration, @NonNull ProcessingEnvironment processingEnv) {
+        this.baseAnnotation = baseAnnotation;
+        this.configuration = configuration;
+        this.processingEnv = processingEnv;
+        configName = baseAnnotation.getSimpleName().toString().replace("Acra", "") + "Configuration";
+        builderVisibleName = configName + "Builder";
+        builderName = configuration.isPlugin() ? builderVisibleName + "Impl" : builderVisibleName;
+        factoryName = builderVisibleName + "Factory";
+
+    }
+
+    public void createClasses() throws IOException {
+        TypeElement baseBuilder;
+        try {
+            baseBuilder = processingEnv.getElementUtils().getTypeElement(configuration.baseBuilderClass().getName());
+        } catch (MirroredTypeException e) {
+            baseBuilder = MoreTypes.asTypeElement(e.getTypeMirror());
+        }
+        final List<Element> elements = new ModelBuilder(baseAnnotation, new ElementFactory(processingEnv.getElementUtils()), baseBuilder, processingEnv.getMessager()).build();
+        createBuilderClass(elements);
+        createConfigClass(elements);
+        if (configuration.isPlugin()) {
+            createBuilderInterface(elements);
+            createFactoryClass();
+        }
+    }
+
+    private void createBuilderInterface(@NonNull List<Element> elements) throws IOException {
+        final TypeSpec.Builder interfaceBuilder = TypeSpec.interfaceBuilder(builderVisibleName)
+                .addModifiers(Modifier.PUBLIC)
+                .addSuperinterface(ConfigurationBuilder.class);
+        final TypeName baseAnnotation = TypeName.get(this.baseAnnotation.asType());
+        Strings.addClassJavadoc(interfaceBuilder, baseAnnotation);
+        ClassName builder = ClassName.get(PACKAGE, builderVisibleName);
+        elements.stream().filter(BuilderElement.Interface.class::isInstance).map(BuilderElement.Interface.class::cast)
+                .forEach(element -> element.addToBuilderInterface(interfaceBuilder, builder));
+        Strings.writeClass(processingEnv.getFiler(), interfaceBuilder.build());
+    }
+
+    private void createBuilderClass(@NonNull List<Element> elements) throws IOException {
+        final TypeSpec.Builder classBuilder = TypeSpec.classBuilder(builderName)
+                .addModifiers(Modifier.FINAL);
+        final TypeName baseAnnotation = TypeName.get(this.baseAnnotation.asType());
+        Strings.addClassJavadoc(classBuilder, baseAnnotation);
+        final MethodSpec.Builder constructor = MethodSpec.constructorBuilder()
+                .addParameter(ParameterSpec.builder(Types.CONTEXT, PARAM_0).addAnnotation(Types.NON_NULL).build())
+                .addJavadoc("@param $L object annotated with {@link $T}\n", PARAM_0, baseAnnotation)
+                .addStatement("final $1T $2L = $3L.getClass().getAnnotation($1T.class)", baseAnnotation, VAR_ANNOTATION, PARAM_0);
+        if (!configuration.isPlugin()) {
+            classBuilder.addModifiers(Modifier.PUBLIC)
+                    .addSuperinterface(ConfigurationBuilder.class);
+            constructor.addModifiers(Modifier.PUBLIC);
+        } else {
+            classBuilder.addSuperinterface(ClassName.get(PACKAGE, builderVisibleName));
+        }
+        final CodeBlock.Builder always = CodeBlock.builder();
+        final CodeBlock.Builder whenAnnotationPresent = CodeBlock.builder();
+        final CodeBlock.Builder whenAnnotationMissing = CodeBlock.builder();
+        ClassName builder = ClassName.get(PACKAGE, builderName);
+        elements.stream().filter(BuilderElement.class::isInstance).map(BuilderElement.class::cast).forEach(m -> m.addToBuilder(classBuilder, builder, always, whenAnnotationPresent, whenAnnotationMissing));
+        constructor.addCode(always.build())
+                .beginControlFlow("if ($L)", Strings.FIELD_ENABLED)
+                .addCode(whenAnnotationPresent.build())
+                .nextControlFlow("else")
+                .addCode(whenAnnotationMissing.build())
+                .endControlFlow();
+        classBuilder.addMethod(constructor.build());
+        final BuildMethodCreator build = new BuildMethodCreator(Types.getOnlyMethod(processingEnv, ConfigurationBuilder.class.getName()), ClassName.get(PACKAGE, configName));
+        elements.stream().filter(ValidatedElement.class::isInstance).map(ValidatedElement.class::cast).forEach(element -> element.addToBuildMethod(build));
+        classBuilder.addMethod(build.build());
+        Strings.writeClass(processingEnv.getFiler(), classBuilder.build());
+    }
+
+
+    private void createConfigClass(@NonNull List<Element> elements) throws IOException {
+        final TypeSpec.Builder classBuilder = TypeSpec.classBuilder(configName)
+                .addSuperinterface(Serializable.class)
+                .addSuperinterface(org.acra.config.Configuration.class)
+                .addModifiers(Modifier.PUBLIC, Modifier.FINAL);
+        Strings.addClassJavadoc(classBuilder, ClassName.get(baseAnnotation.asType()));
+        final MethodSpec.Builder constructor = MethodSpec.constructorBuilder().addModifiers(Modifier.PUBLIC)
+                .addParameter(ParameterSpec.builder(ClassName.get(PACKAGE, builderName), PARAM_0).addAnnotation(Types.NON_NULL).build());
+        elements.stream().filter(ConfigElement.class::isInstance).map(ConfigElement.class::cast).forEach(element -> element.addToConfig(classBuilder, constructor));
+        classBuilder.addMethod(constructor.build());
+        Strings.writeClass(processingEnv.getFiler(), classBuilder.build());
+    }
+
+    private void createFactoryClass() throws IOException {
+        final TypeName configurationBuilderFactory = Types.CONFIGURATION_BUILDER_FACTORY;
+        Strings.writeClass(processingEnv.getFiler(), TypeSpec.classBuilder(factoryName)
+                .addModifiers(Modifier.PUBLIC)
+                .addSuperinterface(configurationBuilderFactory)
+                .addAnnotation(AnnotationSpec.builder(AutoService.class).addMember("value", "$T.class", configurationBuilderFactory).build())
+                .addMethod(Types.overriding(Types.getOnlyMethod(processingEnv, Strings.CONFIGURATION_BUILDER_FACTORY))
+                        .addAnnotation(Types.NON_NULL)
+                        .addStatement("return new $T($L)", ClassName.get(PACKAGE, builderName), PARAM_0)
+                        .build())
+                .build());
+    }
+}
diff --git a/annotationprocessor/src/main/java/org/acra/processor/creator/ModelBuilder.java b/annotationprocessor/src/main/java/org/acra/processor/creator/ModelBuilder.java
new file mode 100644
index 00000000..d85a6bb0
--- /dev/null
+++ b/annotationprocessor/src/main/java/org/acra/processor/creator/ModelBuilder.java
@@ -0,0 +1,126 @@
+/*
+ * Copyright (c) 2018 the ACRA team
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.processor.creator;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.StringRes;
+
+import com.google.auto.common.MoreElements;
+import com.google.auto.common.MoreTypes;
+import com.squareup.javapoet.TypeName;
+
+import org.acra.annotation.BuilderMethod;
+import org.acra.annotation.Configuration;
+import org.acra.annotation.ConfigurationValue;
+import org.acra.annotation.PreBuild;
+import org.acra.annotation.Transform;
+import org.acra.processor.element.BuilderElement;
+import org.acra.processor.element.Element;
+import org.acra.processor.element.ElementFactory;
+import org.acra.processor.util.Types;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Map;
+import java.util.Optional;
+
+import javax.annotation.processing.Messager;
+import javax.lang.model.element.AnnotationMirror;
+import javax.lang.model.element.ExecutableElement;
+import javax.lang.model.element.TypeElement;
+import javax.lang.model.util.ElementFilter;
+import javax.tools.Diagnostic;
+
+/**
+ * @author F43nd1r
+ * @since 10.01.2018
+ */
+
+class ModelBuilder {
+    private final TypeElement baseAnnotation;
+    private final ElementFactory modelFactory;
+    private final Messager messager;
+    private final List<Element> elements;
+    private final TypeElement baseBuilder;
+
+    ModelBuilder(@NonNull TypeElement baseAnnotation, @NonNull ElementFactory modelFactory, @NonNull TypeElement baseBuilder, @NonNull Messager messager) {
+        this.baseAnnotation = baseAnnotation;
+        this.modelFactory = modelFactory;
+        this.messager = messager;
+        this.elements = new ArrayList<>();
+        this.baseBuilder = baseBuilder;
+    }
+
+    private void handleParameter() {
+        elements.add(new BuilderElement.Context());
+        elements.add(new BuilderElement.Enabled());
+    }
+
+    private void handleAnnotationMethods() {
+        for (ExecutableElement method : ElementFilter.methodsIn(baseAnnotation.getEnclosedElements())) {
+            elements.add(MoreElements.isAnnotationPresent(method, StringRes.class) ? modelFactory.fromStringResourceAnnotationMethod(method) : modelFactory.fromAnnotationMethod(method));
+        }
+    }
+
+    private void handleBaseBuilder() {
+        if (!MoreTypes.isTypeOf(Object.class, baseBuilder.asType())) {
+            final List<ExecutableElement> constructors = ElementFilter.constructorsIn(baseBuilder.getEnclosedElements());
+            Optional<ExecutableElement> constructor = constructors.stream().filter(c -> c.getParameters().size() == 0).findAny();
+            if (constructor.isPresent()) {
+                elements.add(modelFactory.fromDelegateConstructor(constructor.get(), false));
+            } else {
+                constructor = constructors.stream().filter(c -> c.getParameters().size() == 1 && Types.CONTEXT.equals(TypeName.get(c.getParameters().get(0).asType()))).findAny();
+                if (constructor.isPresent()) {
+                    elements.add(modelFactory.fromDelegateConstructor(constructor.get(), true));
+                } else {
+                    final AnnotationMirror mirror = baseAnnotation.getAnnotationMirrors().stream()
+                            .filter(m -> MoreTypes.isTypeOf(Configuration.class, m.getAnnotationType()))
+                            .findAny().orElseThrow(IllegalArgumentException::new);
+                    messager.printMessage(Diagnostic.Kind.ERROR, "Classes used as base builder must have a constructor which takes no arguments, " +
+                            "or exactly one argument of type Class", baseAnnotation, mirror, mirror.getElementValues().entrySet().stream()
+                            .filter(entry -> entry.getKey().getSimpleName().toString().equals("builderSuperClass")).findAny().map(Map.Entry::getValue).orElse(null));
+                    throw new IllegalArgumentException();
+                }
+            }
+            handleBaseBuilderMethods();
+        }
+    }
+
+    private void handleBaseBuilderMethods() {
+        for (ExecutableElement method : ElementFilter.methodsIn(baseBuilder.getEnclosedElements())) {
+            if (method.getAnnotation(PreBuild.class) != null) {
+                elements.add(modelFactory.fromPreBuildDelegateMethod(method));
+            } else if (method.getAnnotation(Transform.class) != null) {
+                final String transform = method.getAnnotation(Transform.class).methodName();
+                elements.stream().filter(field -> field.getName().equals(transform)).findAny()
+                        .ifPresent(element -> elements.set(elements.indexOf(element), modelFactory.fromTransformDelegateMethod(method, element)));
+            } else if (method.getAnnotation(ConfigurationValue.class) != null) {
+                elements.add(modelFactory.fromConfigDelegateMethod(method));
+            } else if (method.getAnnotation(BuilderMethod.class) != null) {
+                elements.add(modelFactory.fromBuilderDelegateMethod(method));
+            }
+        }
+    }
+
+    @NonNull
+    List<Element> build() {
+        handleParameter();
+        handleAnnotationMethods();
+        handleBaseBuilder();
+        return elements;
+    }
+}
diff --git a/annotationprocessor/src/main/java/org/acra/processor/element/AbstractElement.java b/annotationprocessor/src/main/java/org/acra/processor/element/AbstractElement.java
new file mode 100644
index 00000000..e249436b
--- /dev/null
+++ b/annotationprocessor/src/main/java/org/acra/processor/element/AbstractElement.java
@@ -0,0 +1,56 @@
+/*
+ * Copyright (c) 2018 the ACRA team
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.processor.element;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import com.squareup.javapoet.AnnotationSpec;
+import com.squareup.javapoet.TypeName;
+
+import java.util.Collection;
+
+/**
+ * @author F43nd1r
+ * @since 12.01.2018
+ */
+
+class AbstractElement implements Element {
+    private final String name;
+    private final TypeName type;
+    private final Collection<AnnotationSpec> annotations;
+
+    AbstractElement(@NonNull String name, @Nullable TypeName type, @NonNull Collection<AnnotationSpec> annotations) {
+        this.type = type;
+        this.name = name;
+        this.annotations = annotations;
+    }
+
+    @Override
+    public String getName() {
+        return name;
+    }
+
+    @Override
+    public TypeName getType() {
+        return type;
+    }
+
+    @Override
+    public Collection<AnnotationSpec> getAnnotations() {
+        return annotations;
+    }
+}
diff --git a/annotationprocessor/src/main/java/org/acra/processor/element/AnnotationField.java b/annotationprocessor/src/main/java/org/acra/processor/element/AnnotationField.java
new file mode 100644
index 00000000..66ffacc3
--- /dev/null
+++ b/annotationprocessor/src/main/java/org/acra/processor/element/AnnotationField.java
@@ -0,0 +1,181 @@
+/*
+ * Copyright (c) 2018 the ACRA team
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.processor.element;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import com.squareup.javapoet.*;
+import org.acra.processor.creator.BuildMethodCreator;
+import org.acra.processor.util.ToCodeBlockVisitor;
+import org.acra.processor.util.IsValidResourceVisitor;
+import org.acra.processor.util.Strings;
+import org.acra.processor.util.Types;
+import org.apache.commons.text.WordUtils;
+
+import javax.lang.model.element.AnnotationValue;
+import javax.lang.model.element.Modifier;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.List;
+
+/**
+ * @author F43nd1r
+ * @since 12.01.2018
+ */
+
+abstract class AnnotationField extends AbstractElement implements TransformedField.Transformable {
+    private final Collection<ClassName> markers;
+    private final String javadoc;
+    private final AnnotationValue defaultValue;
+
+    AnnotationField(@NonNull String name, @NonNull TypeName type, @NonNull Collection<AnnotationSpec> annotations, @Nullable String javadoc, @NonNull Collection<ClassName> markers, AnnotationValue defaultValue) {
+        super(name, type, annotations);
+        this.javadoc = javadoc;
+        this.markers = markers;
+        this.defaultValue = defaultValue;
+    }
+
+    boolean hasMarker(@NonNull ClassName marker) {
+        return markers.contains(marker);
+    }
+
+    @Override
+    public final void addToBuilder(@NonNull TypeSpec.Builder builder, @NonNull ClassName builderName, @NonNull CodeBlock.Builder constructorAlways, @NonNull CodeBlock.Builder constructorWhenAnnotationPresent, CodeBlock.Builder constructorWhenAnnotationMissing) {
+        addWithoutGetter(builder, builderName, constructorAlways, constructorWhenAnnotationPresent, constructorWhenAnnotationMissing);
+        addGetter(builder);
+    }
+
+    @Override
+    public final void addWithoutGetter(@NonNull TypeSpec.Builder builder, ClassName builderName, CodeBlock.Builder constructorAlways, CodeBlock.Builder constructorWhenAnnotationPresent, CodeBlock.Builder constructorWhenAnnotationMissing) {
+        TransformedField.Transformable.super.addToBuilder(builder, builderName, constructorAlways, constructorWhenAnnotationPresent, constructorWhenAnnotationMissing);
+        addSetter(builder, builderName);
+        addInitializer(constructorWhenAnnotationPresent, constructorWhenAnnotationMissing);
+    }
+
+    protected abstract void addInitializer(CodeBlock.Builder constructorWhenAnnotationPresent, CodeBlock.Builder constructorWhenAnnotationMissing);
+
+    AnnotationValue getDefaultValue() {
+        return defaultValue;
+    }
+
+    @Override
+    public void configureSetter(@NonNull MethodSpec.Builder builder) {
+        if (javadoc != null) {
+            final String name = builder.build().parameters.get(0).name;
+            builder.addJavadoc(javadoc.replaceAll("(\n|^) ", "$1").replaceAll("@return ((.|\n)*)$", "@param " + name + " $1@return this instance\n"));
+        }
+    }
+
+    static class Normal extends AnnotationField {
+
+        Normal(String name, TypeName type, Collection<AnnotationSpec> annotations, Collection<ClassName> markers, AnnotationValue defaultValue, String javadoc) {
+            super(name, type, annotations, javadoc, markers, defaultValue);
+        }
+
+        @Override
+        public void addInitializer(@NonNull CodeBlock.Builder constructorWhenAnnotationPresent, CodeBlock.Builder constructorWhenAnnotationMissing) {
+            constructorWhenAnnotationPresent.addStatement("$1L = $2L.$1L()", getName(), Strings.VAR_ANNOTATION);
+            if (getDefaultValue() != null) {
+                constructorWhenAnnotationMissing.addStatement("$L = $L", getName(), getDefaultValue().accept(new ToCodeBlockVisitor(getType()), null));
+            }
+        }
+
+        @Override
+        public void addToBuildMethod(@NonNull BuildMethodCreator method) {
+            if (getDefaultValue() == null) {
+                method.addNotUnset(getName(), getType());
+            }
+            if (hasMarker(Types.NON_EMPTY)) {
+                method.addNotEmpty(getName());
+            }
+            if (hasMarker(Types.INSTANTIATABLE)) {
+                method.addInstantiatable(getName());
+            }
+            if (hasMarker(Types.ANY_NON_DEFAULT)) {
+                method.addAnyNonDefault(getName(), getDefaultValue().accept(new ToCodeBlockVisitor(getType()), null));
+            }
+        }
+
+    }
+
+    static class StringResource extends AnnotationField {
+        private final String originalName;
+        private final boolean hasDefault;
+
+        StringResource(String name, Collection<AnnotationSpec> annotations, Collection<ClassName> markers,
+                       AnnotationValue defaultValue, String javadoc) {
+            super((name.startsWith(Strings.PREFIX_RES)) ? WordUtils.uncapitalize(name.substring(Strings.PREFIX_RES.length())) : name, Types.STRING, annotations, javadoc, markers, defaultValue);
+            this.originalName = name;
+            this.hasDefault = defaultValue != null && getDefaultValue().accept(new IsValidResourceVisitor(), null);
+            getAnnotations().remove(Types.STRING_RES);
+            getAnnotations().add(hasDefault ? Types.NON_NULL : Types.NULLABLE);
+        }
+
+        @Override
+        public void addInitializer(@NonNull CodeBlock.Builder constructorWhenAnnotationPresent, CodeBlock.Builder constructorWhenAnnotationMissing) {
+            constructorWhenAnnotationPresent.beginControlFlow("if ($L.$L() != 0)", Strings.VAR_ANNOTATION, originalName)
+                    .addStatement("$L = $L.getString($L.$L())", getName(), Strings.FIELD_CONTEXT, Strings.VAR_ANNOTATION, originalName)
+                    .endControlFlow();
+            if (hasDefault) {
+                constructorWhenAnnotationMissing.addStatement("$L = $L.getString($L)", getName(), Strings.FIELD_CONTEXT, getDefaultValue());
+            }
+
+        }
+
+        @Override
+        public void addSetter(@NonNull TypeSpec.Builder builder, @NonNull ClassName builderName) {
+            super.addSetter(builder, builderName);
+            final MethodSpec.Builder setter = baseResSetter(builderName)
+                    .addStatement("this.$L = $L.getString($L)", getName(), Strings.FIELD_CONTEXT, Strings.PREFIX_RES + WordUtils.capitalize(getName()))
+                    .addStatement("return this");
+            configureSetter(setter);
+            builder.addMethod(setter.build());
+        }
+
+        private MethodSpec.Builder baseResSetter(ClassName builderName) {
+            final String parameterName = Strings.PREFIX_RES + WordUtils.capitalize(getName());
+            final List<AnnotationSpec> annotations = new ArrayList<>(getAnnotations());
+            annotations.removeIf(Arrays.asList(Types.NULLABLE, Types.NON_NULL)::contains);
+            annotations.add(Types.STRING_RES);
+            return MethodSpec.methodBuilder(Strings.PREFIX_SETTER + WordUtils.capitalize(parameterName))
+                    .addParameter(ParameterSpec.builder(TypeName.INT, parameterName).addAnnotations(annotations).build())
+                    .addModifiers(Modifier.PUBLIC)
+                    .addAnnotation(Types.NON_NULL)
+                    .returns(builderName);
+        }
+
+        @Override
+        public void addToBuilderInterface(@NonNull TypeSpec.Builder builder, @NonNull ClassName builderName) {
+            super.addToBuilderInterface(builder, builderName);
+            final MethodSpec.Builder setter = baseResSetter(builderName).addModifiers(Modifier.ABSTRACT);
+            configureSetter(setter);
+            builder.addMethod(setter.build());
+        }
+
+        @Override
+        public void addToBuildMethod(@NonNull BuildMethodCreator method) {
+            if (getDefaultValue() == null) {
+                method.addNotUnset(getName(), getType());
+            }
+            if (hasMarker(Types.ANY_NON_DEFAULT)) {
+                method.addAnyNonDefault(getName(), CodeBlock.of("null"));
+            }
+        }
+    }
+
+}
diff --git a/annotationprocessor/src/main/java/org/acra/processor/element/BuilderElement.java b/annotationprocessor/src/main/java/org/acra/processor/element/BuilderElement.java
new file mode 100644
index 00000000..b126239b
--- /dev/null
+++ b/annotationprocessor/src/main/java/org/acra/processor/element/BuilderElement.java
@@ -0,0 +1,144 @@
+/*
+ * Copyright (c) 2018 the ACRA team
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.processor.element;
+
+import android.support.annotation.NonNull;
+import com.squareup.javapoet.*;
+import org.acra.processor.util.Strings;
+import org.acra.processor.util.Types;
+import org.apache.commons.text.WordUtils;
+
+import javax.lang.model.element.Modifier;
+import java.util.Collections;
+
+/**
+ * @author F43nd1r
+ * @since 11.01.2018
+ */
+
+public interface BuilderElement extends Element {
+
+    default void addToBuilder(@NonNull TypeSpec.Builder builder, @NonNull ClassName builderName, @NonNull CodeBlock.Builder constructorAlways,
+                              @NonNull CodeBlock.Builder constructorWhenAnnotationPresent, CodeBlock.Builder constructorWhenAnnotationMissing) {
+        final FieldSpec.Builder field = FieldSpec.builder(getType(), getName(), Modifier.PRIVATE).addAnnotations(getAnnotations());
+        configureField(field);
+        builder.addField(field.build());
+    }
+
+    default void configureField(@NonNull FieldSpec.Builder builder) {
+    }
+
+    default void addGetter(@NonNull TypeSpec.Builder builder) {
+        final MethodSpec.Builder method = MethodSpec.methodBuilder(getName())
+                .addAnnotations(getAnnotations())
+                .returns(getType());
+        configureGetter(method);
+        builder.addMethod(method.build());
+    }
+
+    default void configureGetter(@NonNull MethodSpec.Builder builder) {
+        builder.addStatement("return $L", getName());
+    }
+
+    default void addSetter(@NonNull TypeSpec.Builder builder, @NonNull ClassName builderName) {
+        final MethodSpec.Builder method = baseSetter(builderName)
+                .addStatement("this.$1L = $1L", getName())
+                .addStatement("return this");
+        configureSetter(method);
+        builder.addMethod(method.build());
+    }
+
+    default MethodSpec.Builder baseSetter(ClassName builderName) {
+        return MethodSpec.methodBuilder(Strings.PREFIX_SETTER + WordUtils.capitalize(getName()))
+                .addParameter(ParameterSpec.builder(getType(), getName()).addAnnotations(getAnnotations()).build())
+                .varargs(getType() instanceof ArrayTypeName)
+                .addModifiers(Modifier.PUBLIC)
+                .addAnnotation(Types.NON_NULL)
+                .returns(builderName);
+    }
+
+    default void configureSetter(@NonNull MethodSpec.Builder builder) {
+    }
+
+    interface Final extends BuilderElement {
+        default void configureField(@NonNull FieldSpec.Builder builder) {
+            builder.addModifiers(Modifier.FINAL);
+        }
+    }
+
+    interface Interface extends BuilderElement {
+
+        default void addToBuilderInterface(@NonNull TypeSpec.Builder builder, @NonNull ClassName builderName) {
+            MethodSpec.Builder setter = MethodSpec.methodBuilder(Strings.PREFIX_SETTER + WordUtils.capitalize(getName()))
+                    .addParameter(ParameterSpec.builder(getType(), getName()).addAnnotations(getAnnotations()).build())
+                    .varargs(getType() instanceof ArrayTypeName)
+                    .addModifiers(Modifier.PUBLIC, Modifier.ABSTRACT)
+                    .addAnnotation(Types.NON_NULL)
+                    .returns(builderName);
+            configureSetter(setter);
+            builder.addMethod(setter.build());
+        }
+    }
+
+    class Context extends AbstractElement implements Final {
+        public Context() {
+            super(Strings.FIELD_CONTEXT, Types.CONTEXT, Collections.singleton(Types.NON_NULL));
+        }
+
+        @Override
+        public void addToBuilder(@NonNull TypeSpec.Builder builder, @NonNull ClassName builderName, @NonNull CodeBlock.Builder constructorAlways,
+                                 @NonNull CodeBlock.Builder constructorWhenAnnotationPresent, CodeBlock.Builder constructorWhenAnnotationMissing) {
+            Final.super.addToBuilder(builder, builderName, constructorAlways, constructorWhenAnnotationPresent, constructorWhenAnnotationMissing);
+            constructorAlways.addStatement("$L = $L", getName(), Strings.PARAM_0);
+        }
+    }
+
+    class Delegate extends AbstractElement implements Final {
+        private final boolean hasContextParameter;
+
+        Delegate(@NonNull TypeName type, boolean hasContextParameter) {
+            super(Strings.FIELD_DELEGATE, type, Collections.singleton(Types.NON_NULL));
+            this.hasContextParameter = hasContextParameter;
+        }
+
+        @Override
+        public void addToBuilder(@NonNull TypeSpec.Builder builder, @NonNull ClassName builderName, @NonNull CodeBlock.Builder constructorAlways,
+                                 @NonNull CodeBlock.Builder constructorWhenAnnotationPresent, CodeBlock.Builder constructorWhenAnnotationMissing) {
+            Final.super.addToBuilder(builder, builderName, constructorAlways, constructorWhenAnnotationPresent, constructorWhenAnnotationMissing);
+            if (hasContextParameter) {
+                constructorAlways.addStatement("$L = new $T($L)", getName(), getType(), Strings.PARAM_0);
+            } else {
+                constructorAlways.addStatement("$L = new $T()", getName(), getType());
+            }
+        }
+    }
+
+    class Enabled extends AbstractElement implements Interface, ConfigElement {
+        public Enabled() {
+            super(Strings.FIELD_ENABLED, TypeName.BOOLEAN, Collections.emptyList());
+        }
+
+        @Override
+        public void addToBuilder(@NonNull TypeSpec.Builder builder, @NonNull ClassName builderName, @NonNull CodeBlock.Builder constructorAlways,
+                                 @NonNull CodeBlock.Builder constructorWhenAnnotationPresent, CodeBlock.Builder constructorWhenAnnotationMissing) {
+            Interface.super.addToBuilder(builder, builderName, constructorAlways, constructorWhenAnnotationPresent, constructorWhenAnnotationMissing);
+            addSetter(builder, builderName);
+            addGetter(builder);
+            constructorAlways.addStatement("$L = $L != null", getName(), Strings.VAR_ANNOTATION);
+        }
+    }
+}
diff --git a/annotationprocessor/src/main/java/org/acra/processor/element/ConfigElement.java b/annotationprocessor/src/main/java/org/acra/processor/element/ConfigElement.java
new file mode 100644
index 00000000..56c26a48
--- /dev/null
+++ b/annotationprocessor/src/main/java/org/acra/processor/element/ConfigElement.java
@@ -0,0 +1,56 @@
+/*
+ * Copyright (c) 2018 the ACRA team
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.processor.element;
+
+import android.support.annotation.NonNull;
+
+import com.squareup.javapoet.FieldSpec;
+import com.squareup.javapoet.MethodSpec;
+import com.squareup.javapoet.TypeName;
+import com.squareup.javapoet.TypeSpec;
+
+import org.acra.processor.util.Types;
+
+import javax.lang.model.element.Modifier;
+
+import static org.acra.processor.util.Strings.PARAM_0;
+
+/**
+ * @author F43nd1r
+ * @since 10.01.2018
+ */
+
+public interface ConfigElement extends Element {
+
+    default void addToConfig(@NonNull TypeSpec.Builder builder, @NonNull MethodSpec.Builder constructor) {
+        //add field
+        final TypeName type = Types.getImmutableType(getType());
+        builder.addField(FieldSpec.builder(type, getName(), Modifier.PRIVATE, Modifier.FINAL).addAnnotations(getAnnotations()).build());
+        if (!type.equals(getType())) {
+            constructor.addStatement("$1L = new $2T($3L.$1L())", getName(), type, PARAM_0);
+        } else {
+            constructor.addStatement("$1L = $2L.$1L()", getName(), PARAM_0);
+        }
+        //add getter
+        builder.addMethod(MethodSpec.methodBuilder(getName())
+                .addAnnotations(getAnnotations())
+                .returns(type)
+                .addStatement("return $L", getName())
+                .addModifiers(Modifier.PUBLIC)
+                .build());
+    }
+}
diff --git a/annotationprocessor/src/main/java/org/acra/processor/element/DelegateMethod.java b/annotationprocessor/src/main/java/org/acra/processor/element/DelegateMethod.java
new file mode 100644
index 00000000..7472fb8e
--- /dev/null
+++ b/annotationprocessor/src/main/java/org/acra/processor/element/DelegateMethod.java
@@ -0,0 +1,93 @@
+/*
+ * Copyright (c) 2018 the ACRA team
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.processor.element;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import com.squareup.javapoet.*;
+import org.acra.processor.util.Strings;
+import org.acra.processor.util.Types;
+
+import javax.lang.model.element.Modifier;
+import java.util.Collection;
+import java.util.stream.Collectors;
+
+/**
+ * @author F43nd1r
+ * @since 10.01.2018
+ */
+
+class DelegateMethod extends AbstractElement implements BuilderElement.Interface {
+    private final Collection<ParameterSpec> parameters;
+    private final Collection<TypeVariableName> typeVariables;
+    private final Collection<Modifier> modifiers;
+    private final String javadoc;
+
+    DelegateMethod(@NonNull String name, @NonNull TypeName type, @NonNull Collection<AnnotationSpec> annotations, @NonNull Collection<ParameterSpec> parameters,
+                   @NonNull Collection<TypeVariableName> typeVariables, @NonNull Collection<Modifier> modifiers, @Nullable String javadoc) {
+        super(name, type, annotations);
+        this.parameters = parameters;
+        this.typeVariables = typeVariables;
+        this.modifiers = modifiers;
+        this.javadoc = javadoc;
+    }
+
+    @Override
+    public void addToBuilder(@NonNull TypeSpec.Builder builder, @NonNull ClassName builderName, @NonNull CodeBlock.Builder constructorAlways, @NonNull CodeBlock.Builder constructorWhenAnnotationPresent, CodeBlock.Builder constructorWhenAnnotationMissing) {
+        final MethodSpec.Builder method = baseMethod(builderName);
+        if (getType().equals(TypeName.VOID)) {
+            method.addStatement("$L.$L($L)", Strings.FIELD_DELEGATE, getName(), parameters.stream().map(p -> p.name).collect(Collectors.joining(", ")))
+                    .addStatement("return this");
+        } else {
+            method.addStatement("return $L.$L($L)", Strings.FIELD_DELEGATE, getName(), parameters.stream().map(p -> p.name).collect(Collectors.joining(", ")));
+        }
+        builder.addMethod(method.build());
+    }
+
+    private MethodSpec.Builder baseMethod(@NonNull ClassName builderName) {
+        final MethodSpec.Builder method = MethodSpec.methodBuilder(getName())
+                .addModifiers(modifiers)
+                .addParameters(parameters)
+                .addTypeVariables(typeVariables)
+                .addAnnotations(getAnnotations());
+        if (javadoc != null) {
+            method.addJavadoc(javadoc.replaceAll("(\n|^) ", "$1"));
+        }
+        if (getType().equals(TypeName.VOID)) {
+            method.returns(builderName)
+                    .addAnnotation(Types.NON_NULL)
+                    .addJavadoc("@return this instance\n");
+        } else {
+            method.returns(getType());
+        }
+        return method;
+    }
+
+    @Override
+    public void addToBuilderInterface(@NonNull TypeSpec.Builder builder, @NonNull ClassName builderName) {
+        if (modifiers.contains(Modifier.PUBLIC)) {
+            builder.addMethod(baseMethod(builderName).addModifiers(Modifier.ABSTRACT).build());
+        }
+    }
+
+    static class Config extends DelegateMethod implements org.acra.processor.element.ConfigElement {
+        Config(@NonNull String name, @NonNull TypeName type, @NonNull Collection<AnnotationSpec> annotations, @NonNull Collection<ParameterSpec> parameters,
+               @NonNull Collection<TypeVariableName> typeVariables, @NonNull Collection<Modifier> modifiers, @NonNull String javadoc) {
+            super(name, type, annotations, parameters, typeVariables, modifiers, javadoc);
+        }
+    }
+}
diff --git a/annotationprocessor/src/main/java/org/acra/processor/element/Element.java b/annotationprocessor/src/main/java/org/acra/processor/element/Element.java
new file mode 100644
index 00000000..46df8e08
--- /dev/null
+++ b/annotationprocessor/src/main/java/org/acra/processor/element/Element.java
@@ -0,0 +1,35 @@
+/*
+ * Copyright (c) 2018 the ACRA team
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.processor.element;
+
+import com.squareup.javapoet.AnnotationSpec;
+import com.squareup.javapoet.TypeName;
+
+import java.util.Collection;
+
+/**
+ * @author F43nd1r
+ * @since 12.01.2018
+ */
+
+public interface Element {
+    String getName();
+
+    TypeName getType();
+
+    Collection<AnnotationSpec> getAnnotations();
+}
diff --git a/annotationprocessor/src/main/java/org/acra/processor/element/ElementFactory.java b/annotationprocessor/src/main/java/org/acra/processor/element/ElementFactory.java
new file mode 100644
index 00000000..b6a643d8
--- /dev/null
+++ b/annotationprocessor/src/main/java/org/acra/processor/element/ElementFactory.java
@@ -0,0 +1,106 @@
+/*
+ * Copyright (c) 2018 the ACRA team
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.processor.element;
+
+import android.support.annotation.NonNull;
+import com.squareup.javapoet.*;
+import org.apache.commons.lang3.tuple.Pair;
+
+import javax.lang.model.element.ExecutableElement;
+import javax.lang.model.util.Elements;
+import java.util.HashSet;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Set;
+import java.util.stream.Collectors;
+
+/**
+ * @author F43nd1r
+ * @since 10.01.2018
+ */
+
+public class ElementFactory {
+
+    private final Elements elements;
+
+
+    public ElementFactory(@NonNull Elements elements) {
+        this.elements = elements;
+    }
+
+    @NonNull
+    private static Pair<List<AnnotationSpec>, Set<ClassName>> getAnnotations(@NonNull ExecutableElement method) {
+        final List<AnnotationSpec> specs = method.getAnnotationMirrors().stream().map(AnnotationSpec::get).collect(Collectors.toList());
+        final Set<ClassName> markerAnnotations = new HashSet<>();
+        for (final Iterator<AnnotationSpec> iterator = specs.iterator(); iterator.hasNext(); ) {
+            final AnnotationSpec spec = iterator.next();
+            for (ClassName a : org.acra.processor.util.Types.MARKER_ANNOTATIONS) {
+                if (a.equals(spec.type)) {
+                    iterator.remove();
+                    markerAnnotations.add(a);
+                }
+            }
+        }
+        return Pair.of(specs, markerAnnotations);
+    }
+
+    @NonNull
+    public Element fromAnnotationMethod(@NonNull ExecutableElement method) {
+        final Pair<List<AnnotationSpec>, Set<ClassName>> annotations = getAnnotations(method);
+        return new AnnotationField.Normal(method.getSimpleName().toString(), TypeName.get(method.getReturnType()), annotations.getLeft(), annotations.getRight(), method.getDefaultValue(),
+                elements.getDocComment(method));
+    }
+
+    @NonNull
+    public Element fromStringResourceAnnotationMethod(@NonNull ExecutableElement method) {
+        final Pair<List<AnnotationSpec>, Set<ClassName>> annotations = getAnnotations(method);
+        return new AnnotationField.StringResource(method.getSimpleName().toString(), annotations.getLeft(), annotations.getRight(),
+                method.getDefaultValue(), elements.getDocComment(method));
+    }
+
+    @NonNull
+    public Element fromBuilderDelegateMethod(@NonNull ExecutableElement method) {
+        return new DelegateMethod(method.getSimpleName().toString(), TypeName.get(method.getReturnType()), getAnnotations(method).getLeft(),
+                method.getParameters().stream().map(p -> ParameterSpec.builder(TypeName.get(p.asType()), p.getSimpleName().toString()).build()).collect(Collectors.toList()),
+                method.getTypeParameters().stream().map(TypeVariableName::get).collect(Collectors.toList()), method.getModifiers(), elements.getDocComment(method));
+    }
+
+    @NonNull
+    public Element fromConfigDelegateMethod(@NonNull ExecutableElement method) {
+        return new DelegateMethod.Config(method.getSimpleName().toString(), TypeName.get(method.getReturnType()), getAnnotations(method).getLeft(),
+                method.getParameters().stream().map(p -> ParameterSpec.builder(TypeName.get(p.asType()), p.getSimpleName().toString()).build()).collect(Collectors.toList()),
+                method.getTypeParameters().stream().map(TypeVariableName::get).collect(Collectors.toList()), method.getModifiers(), elements.getDocComment(method));
+    }
+
+    @NonNull
+    public Element fromPreBuildDelegateMethod(@NonNull ExecutableElement method) {
+        return new PreBuildMethod(method.getSimpleName().toString());
+    }
+
+    @NonNull
+    public Element fromTransformDelegateMethod(@NonNull ExecutableElement method, Element transform) {
+        if (transform instanceof TransformedField.Transformable) {
+            return new TransformedField(method.getSimpleName().toString(), TypeName.get(method.getReturnType()), (TransformedField.Transformable) transform);
+        }
+        return transform;
+    }
+
+    @NonNull
+    public Element fromDelegateConstructor(@NonNull ExecutableElement constructor, boolean hasContextParameter) {
+        return new BuilderElement.Delegate(TypeName.get(constructor.getEnclosingElement().asType()), hasContextParameter);
+    }
+}
diff --git a/acra/src/main/java/org/acra/model/BooleanElement.java b/annotationprocessor/src/main/java/org/acra/processor/element/PreBuildMethod.java
similarity index 55%
rename from acra/src/main/java/org/acra/model/BooleanElement.java
rename to annotationprocessor/src/main/java/org/acra/processor/element/PreBuildMethod.java
index 29559568..eeab0d05 100644
--- a/acra/src/main/java/org/acra/model/BooleanElement.java
+++ b/annotationprocessor/src/main/java/org/acra/processor/element/PreBuildMethod.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016
+ * Copyright (c) 2018 the ACRA team
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,32 +14,26 @@
  * limitations under the License.
  */
 
-package org.acra.model;
+package org.acra.processor.element;
 
-/**
- * @author F43nd1r
- * @since 13.10.2016
- */
+import android.support.annotation.NonNull;
 
-public class BooleanElement implements Element {
-    private final boolean content;
+import org.acra.processor.creator.BuildMethodCreator;
 
-    public BooleanElement(boolean content) {
-        this.content = content;
-    }
+import java.util.Collections;
 
-    @Override
-    public Object value() {
-        return content;
-    }
+/**
+ * @author F43nd1r
+ * @since 11.01.2018
+ */
 
-    @Override
-    public String[] flatten() {
-        return new String[]{toString()};
+class PreBuildMethod extends AbstractElement implements ValidatedElement {
+    PreBuildMethod(@NonNull String name) {
+        super(name, null, Collections.emptyList());
     }
 
     @Override
-    public String toString() {
-        return String.valueOf(content);
+    public void addToBuildMethod(@NonNull BuildMethodCreator method) {
+        method.addDelegateCall(getName());
     }
 }
diff --git a/annotationprocessor/src/main/java/org/acra/processor/element/TransformedField.java b/annotationprocessor/src/main/java/org/acra/processor/element/TransformedField.java
new file mode 100644
index 00000000..2a0099c9
--- /dev/null
+++ b/annotationprocessor/src/main/java/org/acra/processor/element/TransformedField.java
@@ -0,0 +1,89 @@
+/*
+ * Copyright (c) 2018 the ACRA team
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.processor.element;
+
+import android.support.annotation.NonNull;
+
+import com.squareup.javapoet.AnnotationSpec;
+import com.squareup.javapoet.ClassName;
+import com.squareup.javapoet.CodeBlock;
+import com.squareup.javapoet.MethodSpec;
+import com.squareup.javapoet.TypeName;
+import com.squareup.javapoet.TypeSpec;
+
+import org.acra.processor.creator.BuildMethodCreator;
+import org.acra.processor.util.Strings;
+
+import java.util.Collection;
+
+/**
+ * @author F43nd1r
+ * @since 11.01.2018
+ */
+
+class TransformedField implements ConfigElement, BuilderElement.Interface, ValidatedElement {
+    private final String name;
+    private final TypeName type;
+    private final Transformable transform;
+
+    TransformedField(@NonNull String name, @NonNull TypeName type, @NonNull Transformable transform) {
+        this.name = name;
+        this.type = type;
+        this.transform = transform;
+    }
+
+    @Override
+    public void addToBuilder(@NonNull TypeSpec.Builder builder, @NonNull ClassName builderName, @NonNull CodeBlock.Builder constructorAlways,
+                             @NonNull CodeBlock.Builder constructorWhenAnnotationPresent, CodeBlock.Builder constructorWhenAnnotationMissing) {
+        transform.addWithoutGetter(builder, builderName, constructorAlways, constructorWhenAnnotationPresent, constructorWhenAnnotationMissing);
+        addGetter(builder);
+    }
+
+    @Override
+    public void configureGetter(@NonNull MethodSpec.Builder builder) {
+        builder.addStatement("return $L.$L($L)", Strings.FIELD_DELEGATE, name, getName());
+    }
+
+    @Override
+    public void addToBuildMethod(@NonNull BuildMethodCreator method) {
+        transform.addToBuildMethod(method);
+    }
+
+    @Override
+    public void addToBuilderInterface(@NonNull TypeSpec.Builder builder, @NonNull ClassName builderName) {
+        transform.addToBuilderInterface(builder, builderName);
+    }
+
+    @Override
+    public String getName() {
+        return transform.getName();
+    }
+
+    @Override
+    public TypeName getType() {
+        return type;
+    }
+
+    @Override
+    public Collection<AnnotationSpec> getAnnotations() {
+        return transform.getAnnotations();
+    }
+
+    public interface Transformable extends ConfigElement, Interface, ValidatedElement {
+        void addWithoutGetter(TypeSpec.Builder builder, ClassName builderName, CodeBlock.Builder constructorAlways, CodeBlock.Builder constructorWhenAnnotationPresent, CodeBlock.Builder constructorWhenAnnotationMissing);
+    }
+}
diff --git a/annotationprocessor/src/main/java/org/acra/processor/element/ValidatedElement.java b/annotationprocessor/src/main/java/org/acra/processor/element/ValidatedElement.java
new file mode 100644
index 00000000..757a1b11
--- /dev/null
+++ b/annotationprocessor/src/main/java/org/acra/processor/element/ValidatedElement.java
@@ -0,0 +1,29 @@
+/*
+ * Copyright (c) 2018 the ACRA team
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.processor.element;
+
+import android.support.annotation.NonNull;
+import org.acra.processor.creator.BuildMethodCreator;
+
+/**
+ * @author F43nd1r
+ * @since 11.01.2018
+ */
+
+public interface ValidatedElement extends Element {
+    void addToBuildMethod(@NonNull BuildMethodCreator method);
+}
diff --git a/annotationprocessor/src/main/java/org/acra/processor/util/IsValidResourceVisitor.java b/annotationprocessor/src/main/java/org/acra/processor/util/IsValidResourceVisitor.java
new file mode 100644
index 00000000..7c7dd419
--- /dev/null
+++ b/annotationprocessor/src/main/java/org/acra/processor/util/IsValidResourceVisitor.java
@@ -0,0 +1,15 @@
+package org.acra.processor.util;
+
+import javax.lang.model.util.SimpleAnnotationValueVisitor8;
+
+public class IsValidResourceVisitor extends SimpleAnnotationValueVisitor8<Boolean, Void> {
+    @Override
+    protected Boolean defaultAction(Object o, Void aVoid) {
+        return false;
+    }
+
+    @Override
+    public Boolean visitInt(int i, Void aVoid) {
+        return i != 0;
+    }
+}
diff --git a/annotationprocessor/src/main/java/org/acra/processor/util/Strings.java b/annotationprocessor/src/main/java/org/acra/processor/util/Strings.java
new file mode 100644
index 00000000..e872cfce
--- /dev/null
+++ b/annotationprocessor/src/main/java/org/acra/processor/util/Strings.java
@@ -0,0 +1,77 @@
+/*
+ * Copyright (c) 2018 the ACRA team
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.processor.util;
+
+import android.support.annotation.NonNull;
+import com.squareup.javapoet.JavaFile;
+import com.squareup.javapoet.TypeName;
+import com.squareup.javapoet.TypeSpec;
+
+import javax.annotation.processing.Filer;
+import java.io.IOException;
+import java.text.DateFormat;
+import java.util.Calendar;
+
+/**
+ * @author F43nd1r
+ * @since 08.01.2018
+ */
+
+public final class Strings {
+    public static final String PREFIX_RES = "res";
+    public static final String PREFIX_SETTER = "set";
+    public static final String PARAM_0 = "arg0";
+    public static final String VAR_ANNOTATION = "annotation";
+    public static final String FIELD_DELEGATE = "delegate";
+    public static final String FIELD_CONTEXT = "context";
+    public static final String FIELD_ENABLED = "enabled";
+    public static final String PACKAGE = "org.acra.config";
+    public static final String CONTEXT = "android.content.Context";
+    public static final String CONFIGURATION_BUILDER_FACTORY = "org.acra.config.ConfigurationBuilderFactory";
+    private static final DateFormat DATE_FORMAT = DateFormat.getDateTimeInstance();
+
+    private Strings() {
+    }
+
+    public static void addClassJavadoc(@NonNull TypeSpec.Builder builder, @NonNull TypeName base) {
+        builder.addJavadoc("Class generated based on {@link $T} ($L)\n", base, DATE_FORMAT.format(Calendar.getInstance().getTime()));
+    }
+
+    /**
+     * Writes the given class to a respective file in the configuration package
+     *
+     * @param filer    filer to write to
+     * @param typeSpec the class
+     * @throws IOException if writing fails
+     */
+    public static void writeClass(@NonNull Filer filer, @NonNull TypeSpec typeSpec) throws IOException {
+        JavaFile.builder(PACKAGE, typeSpec)
+                .skipJavaLangImports(true)
+                .indent("    ")
+                .addFileComment("Copyright (c) " + Calendar.getInstance().get(Calendar.YEAR) + "\n\n" +
+                        "Licensed under the Apache License, Version 2.0 (the \"License\");\n" +
+                        "you may not use this file except in compliance with the License.\n\n" +
+                        "http://www.apache.org/licenses/LICENSE-2.0\n\n" +
+                        "Unless required by applicable law or agreed to in writing, software\n" +
+                        "distributed under the License is distributed on an \"AS IS\" BASIS,\n" +
+                        "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n" +
+                        "See the License for the specific language governing permissions and\n" +
+                        "limitations under the License.")
+                .build()
+                .writeTo(filer);
+    }
+}
diff --git a/annotationprocessor/src/main/java/org/acra/processor/util/ToCodeBlockVisitor.java b/annotationprocessor/src/main/java/org/acra/processor/util/ToCodeBlockVisitor.java
new file mode 100644
index 00000000..69b75f6a
--- /dev/null
+++ b/annotationprocessor/src/main/java/org/acra/processor/util/ToCodeBlockVisitor.java
@@ -0,0 +1,78 @@
+/*
+ * Copyright (c) 2018 the ACRA team
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.processor.util;
+
+import android.support.annotation.NonNull;
+
+import com.squareup.javapoet.ArrayTypeName;
+import com.squareup.javapoet.CodeBlock;
+import com.squareup.javapoet.ParameterizedTypeName;
+import com.squareup.javapoet.TypeName;
+
+import java.util.List;
+
+import javax.lang.model.element.AnnotationValue;
+import javax.lang.model.element.VariableElement;
+import javax.lang.model.type.TypeMirror;
+import javax.lang.model.util.SimpleAnnotationValueVisitor8;
+
+/**
+ * @author F43nd1r
+ * @since 12.01.2018
+ */
+public class ToCodeBlockVisitor extends SimpleAnnotationValueVisitor8<CodeBlock, Void> {
+    private final TypeName type;
+
+    public ToCodeBlockVisitor(TypeName type) {
+        this.type = type;
+    }
+
+    @NonNull
+    @Override
+    protected CodeBlock defaultAction(Object o, Void v) {
+        return CodeBlock.of("$L", o);
+    }
+
+    @NonNull
+    @Override
+    public CodeBlock visitString(String s, Void v) {
+        return CodeBlock.of("$S", s);
+    }
+
+    @NonNull
+    @Override
+    public CodeBlock visitEnumConstant(@NonNull VariableElement c, Void v) {
+        return CodeBlock.of("$T.$L", c.asType(), c.getSimpleName());
+    }
+
+    @NonNull
+    @Override
+    public CodeBlock visitType(TypeMirror t, Void v) {
+        return CodeBlock.of("$T.class", t);
+    }
+
+    @NonNull
+    @Override
+    public CodeBlock visitArray(@NonNull List<? extends AnnotationValue> values, Void v) {
+        ArrayTypeName arrayTypeName = (ArrayTypeName) type;
+        if (arrayTypeName.componentType instanceof ParameterizedTypeName) {
+            arrayTypeName = ArrayTypeName.of(((ParameterizedTypeName) arrayTypeName.componentType).rawType);
+        }
+        return CodeBlock.of("new $T{$L}", arrayTypeName, values.stream().map(value -> value.accept(this, null))
+                .reduce((c1, c2) -> CodeBlock.builder().add(c1).add(", ").add(c2).build()).orElseGet(() -> CodeBlock.builder().build()));
+    }
+}
diff --git a/annotationprocessor/src/main/java/org/acra/processor/util/Types.java b/annotationprocessor/src/main/java/org/acra/processor/util/Types.java
new file mode 100644
index 00000000..f2ea37ac
--- /dev/null
+++ b/annotationprocessor/src/main/java/org/acra/processor/util/Types.java
@@ -0,0 +1,114 @@
+/*
+ * Copyright (c) 2018 the ACRA team
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.processor.util;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.support.annotation.StringRes;
+import com.squareup.javapoet.*;
+import org.acra.annotation.*;
+import org.acra.collections.ImmutableList;
+import org.acra.collections.ImmutableMap;
+import org.acra.collections.ImmutableSet;
+
+import javax.annotation.processing.ProcessingEnvironment;
+import javax.lang.model.element.ExecutableElement;
+import javax.lang.model.element.Modifier;
+import javax.lang.model.element.TypeElement;
+import javax.lang.model.util.ElementFilter;
+import javax.tools.Diagnostic;
+import java.util.Arrays;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.stream.Collectors;
+
+/**
+ * @author F43nd1r
+ * @since 11.01.2018
+ */
+
+public final class Types {
+    public static final ClassName IMMUTABLE_MAP = ClassName.get(ImmutableMap.class);
+    public static final ClassName IMMUTABLE_SET = ClassName.get(ImmutableSet.class);
+    public static final ClassName IMMUTABLE_LIST = ClassName.get(ImmutableList.class);
+    public static final ClassName MAP = ClassName.get(Map.class);
+    public static final ClassName SET = ClassName.get(Set.class);
+    public static final ClassName LIST = ClassName.get(List.class);
+    public static final ClassName STRING = ClassName.get(String.class);
+    public static final AnnotationSpec NULLABLE = AnnotationSpec.builder(Nullable.class).build();
+    public static final AnnotationSpec NON_NULL = AnnotationSpec.builder(NonNull.class).build();
+    public static final AnnotationSpec STRING_RES = AnnotationSpec.builder(StringRes.class).build();
+    public static final ClassName ANY_NON_DEFAULT = ClassName.get(AnyNonDefault.class);
+    public static final ClassName BUILDER_METHOD = ClassName.get(BuilderMethod.class);
+    public static final ClassName CONFIGURATION = ClassName.get(Configuration.class);
+    public static final ClassName CONFIGURATION_VALUE = ClassName.get(ConfigurationValue.class);
+    public static final ClassName INSTANTIATABLE = ClassName.get(Instantiatable.class);
+    public static final ClassName NON_EMPTY = ClassName.get(NonEmpty.class);
+    public static final ClassName PRE_BUILD = ClassName.get(PreBuild.class);
+    public static final ClassName TRANSFORM = ClassName.get(Transform.class);
+    public static final ClassName CONTEXT = ClassName.bestGuess(Strings.CONTEXT);
+    public static final ClassName CONFIGURATION_BUILDER_FACTORY = ClassName.bestGuess(Strings.CONFIGURATION_BUILDER_FACTORY);
+    public static final List<ClassName> MARKER_ANNOTATIONS = Arrays.asList(ANY_NON_DEFAULT, BUILDER_METHOD, CONFIGURATION, CONFIGURATION_VALUE, INSTANTIATABLE, NON_EMPTY, PRE_BUILD, TRANSFORM);
+
+    private Types() {
+    }
+
+    public static MethodSpec.Builder overriding(ExecutableElement method) {
+        return MethodSpec.methodBuilder(method.getSimpleName().toString())
+                .addAnnotation(Override.class)
+                .addModifiers(method.getModifiers().stream().filter(modifier -> modifier != Modifier.ABSTRACT).collect(Collectors.toList()))
+                .returns(TypeName.get(method.getReturnType()))
+                .varargs(method.isVarArgs())
+                .addExceptions(method.getThrownTypes().stream().map(TypeName::get).collect(Collectors.toList()))
+                .addTypeVariables(method.getTypeParameters().stream().map(TypeVariableName::get).collect(Collectors.toList()))
+                .addParameters(method.getParameters().stream().map(element -> ParameterSpec.get(element).toBuilder()
+                        .addAnnotations(element.getAnnotationMirrors().stream().map(AnnotationSpec::get).collect(Collectors.toList())).build()).collect(Collectors.toList()));
+    }
+
+    public static ExecutableElement getOnlyMethod(ProcessingEnvironment processingEnv, String className) {
+        final TypeElement typeElement = processingEnv.getElementUtils().getTypeElement(className);
+        final List<ExecutableElement> elements = ElementFilter.methodsIn(typeElement.getEnclosedElements());
+        if (elements.size() == 1) {
+            return elements.get(0);
+        } else {
+            processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, "Needs exactly one method", typeElement);
+            throw new IllegalArgumentException();
+        }
+    }
+
+    @NonNull
+    public static TypeName getImmutableType(TypeName type) {
+        if (type instanceof ParameterizedTypeName) {
+            final TypeName genericType = ((ParameterizedTypeName) type).rawType;
+            if (MAP.equals(genericType)) {
+                type = getWithParams(IMMUTABLE_MAP, (ParameterizedTypeName) type);
+            } else if (SET.equals(genericType)) {
+                return getWithParams(IMMUTABLE_SET, (ParameterizedTypeName) type);
+            } else if (LIST.equals(genericType)) {
+                type = getWithParams(IMMUTABLE_LIST, (ParameterizedTypeName) type);
+            }
+        } else if (type instanceof ArrayTypeName) {
+            type = ParameterizedTypeName.get(IMMUTABLE_LIST, ((ArrayTypeName) type).componentType);
+        }
+        return type;
+    }
+
+    private static TypeName getWithParams(@NonNull ClassName baseType, @NonNull ParameterizedTypeName parameterType) {
+        return ParameterizedTypeName.get(baseType, parameterType.typeArguments.toArray(new TypeName[parameterType.typeArguments.size()]));
+    }
+}
diff --git a/annotations/build.gradle b/annotations/build.gradle
index d9b5d8da..811866d6 100644
--- a/annotations/build.gradle
+++ b/annotations/build.gradle
@@ -15,5 +15,5 @@
  */
 apply plugin: 'java'
 
-sourceCompatibility = "1.6"
-targetCompatibility = "1.6"
+sourceCompatibility = "1.8"
+targetCompatibility = "1.8"
diff --git a/acra/src/main/java/org/acra/model/StringElement.java b/annotations/src/main/java/org/acra/annotation/AnyNonDefault.java
similarity index 55%
rename from acra/src/main/java/org/acra/model/StringElement.java
rename to annotations/src/main/java/org/acra/annotation/AnyNonDefault.java
index 8d33b72f..97c33880 100644
--- a/acra/src/main/java/org/acra/model/StringElement.java
+++ b/annotations/src/main/java/org/acra/annotation/AnyNonDefault.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2016
+ * Copyright (c) 2017 the ACRA team
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -14,31 +14,21 @@
  * limitations under the License.
  */
 
-package org.acra.model;
+package org.acra.annotation;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
 
 /**
+ * Any of the annotation methods annotated with this has to be different from the default value for the configuration to be valid
+ *
  * @author F43nd1r
- * @since 12.10.2016
+ * @since 03.06.2017
  */
-public class StringElement implements Element {
-    private final String content;
-
-    public StringElement(String content) {
-        this.content = content;
-    }
-
-    @Override
-    public Object value() {
-        return content;
-    }
-
-    @Override
-    public String[] flatten() {
-        return new String[]{content};
-    }
 
-    @Override
-    public String toString() {
-        return content;
-    }
+@Retention(RetentionPolicy.SOURCE)
+@Target(ElementType.METHOD)
+public @interface AnyNonDefault {
 }
diff --git a/annotations/src/main/java/org/acra/annotation/Name.java b/annotations/src/main/java/org/acra/annotation/BuilderMethod.java
similarity index 90%
rename from annotations/src/main/java/org/acra/annotation/Name.java
rename to annotations/src/main/java/org/acra/annotation/BuilderMethod.java
index a42d7424..d7376c92 100644
--- a/annotations/src/main/java/org/acra/annotation/Name.java
+++ b/annotations/src/main/java/org/acra/annotation/BuilderMethod.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017
+ * Copyright (c) 2018 the ACRA team
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -23,11 +23,9 @@
 
 /**
  * @author F43nd1r
- * @since 13.04.2017
+ * @since 10.01.2018
  */
-
 @Retention(RetentionPolicy.SOURCE)
 @Target(ElementType.METHOD)
-public @interface Name {
-    String value();
+public @interface BuilderMethod {
 }
diff --git a/annotations/src/main/java/org/acra/annotation/Configuration.java b/annotations/src/main/java/org/acra/annotation/Configuration.java
index 07a0e362..c57c1865 100644
--- a/annotations/src/main/java/org/acra/annotation/Configuration.java
+++ b/annotations/src/main/java/org/acra/annotation/Configuration.java
@@ -22,7 +22,7 @@
 import java.lang.annotation.Target;
 
 /**
- * The annotation annotated with this will be used as basis for the BaseConfigurationBuilder
+ * The annotation annotated with this will be used as basis for Configurations and their Builders
  *
  * @author F43nd1r
  * @since 17.03.2017
@@ -31,4 +31,6 @@
 @Retention(RetentionPolicy.SOURCE)
 @Target(ElementType.ANNOTATION_TYPE)
 public @interface Configuration {
+    Class baseBuilderClass() default Object.class;
+    boolean isPlugin() default true;
 }
diff --git a/annotations/src/main/java/org/acra/annotation/ConfigurationValue.java b/annotations/src/main/java/org/acra/annotation/ConfigurationValue.java
new file mode 100644
index 00000000..0069b6db
--- /dev/null
+++ b/annotations/src/main/java/org/acra/annotation/ConfigurationValue.java
@@ -0,0 +1,31 @@
+/*
+ * Copyright (c) 2018 the ACRA team
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.annotation;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * @author F43nd1r
+ * @since 10.01.2018
+ */
+@Retention(RetentionPolicy.SOURCE)
+@Target(ElementType.METHOD)
+public @interface ConfigurationValue {
+}
diff --git a/annotations/src/main/java/org/acra/annotation/Instantiatable.java b/annotations/src/main/java/org/acra/annotation/Instantiatable.java
new file mode 100644
index 00000000..374320fb
--- /dev/null
+++ b/annotations/src/main/java/org/acra/annotation/Instantiatable.java
@@ -0,0 +1,33 @@
+/*
+ * Copyright (c) 2017 the ACRA team
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.annotation;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * All classes in annotation methods with this have to have a public, no-args constructor for the configuration to be valid
+ *
+ * @author F43nd1r
+ * @since 03.06.2017
+ */
+@Retention(RetentionPolicy.SOURCE)
+@Target(ElementType.METHOD)
+public @interface Instantiatable {
+}
diff --git a/annotations/src/main/java/org/acra/annotation/NoPropagation.java b/annotations/src/main/java/org/acra/annotation/NonEmpty.java
similarity index 83%
rename from annotations/src/main/java/org/acra/annotation/NoPropagation.java
rename to annotations/src/main/java/org/acra/annotation/NonEmpty.java
index 866d8bd2..eb5927d2 100644
--- a/annotations/src/main/java/org/acra/annotation/NoPropagation.java
+++ b/annotations/src/main/java/org/acra/annotation/NonEmpty.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017
+ * Copyright (c) 2017 the ACRA team
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -22,13 +22,13 @@
 import java.lang.annotation.Target;
 
 /**
- * Methods annotated with this will not be propagated into the ACRAConfiguration class
+ * This array must not be empty for the configuration to be valid
  *
  * @author F43nd1r
- * @since 17.03.2017
+ * @since 03.06.2017
  */
 
 @Retention(RetentionPolicy.SOURCE)
 @Target(ElementType.METHOD)
-public @interface NoPropagation {
+public @interface NonEmpty {
 }
diff --git a/annotations/src/main/java/org/acra/annotation/ConfigurationBuilder.java b/annotations/src/main/java/org/acra/annotation/PreBuild.java
similarity index 81%
rename from annotations/src/main/java/org/acra/annotation/ConfigurationBuilder.java
rename to annotations/src/main/java/org/acra/annotation/PreBuild.java
index 157f15c1..f5fd7430 100644
--- a/annotations/src/main/java/org/acra/annotation/ConfigurationBuilder.java
+++ b/annotations/src/main/java/org/acra/annotation/PreBuild.java
@@ -1,5 +1,5 @@
 /*
- * Copyright (c) 2017
+ * Copyright (c) 2017 the ACRA team
  *
  * Licensed under the Apache License, Version 2.0 (the "License");
  * you may not use this file except in compliance with the License.
@@ -22,13 +22,12 @@
 import java.lang.annotation.Target;
 
 /**
- * The class annotated with this will be used as basis for the ACRAConfiguration
+ * This method should run before the configuration is built
  *
  * @author F43nd1r
- * @since 17.03.2017
+ * @since 03.06.2017
  */
-
 @Retention(RetentionPolicy.SOURCE)
-@Target(ElementType.TYPE)
-public @interface ConfigurationBuilder {
+@Target(ElementType.METHOD)
+public @interface PreBuild {
 }
diff --git a/annotations/src/main/java/org/acra/annotation/Transform.java b/annotations/src/main/java/org/acra/annotation/Transform.java
new file mode 100644
index 00000000..39e154c9
--- /dev/null
+++ b/annotations/src/main/java/org/acra/annotation/Transform.java
@@ -0,0 +1,35 @@
+/*
+ * Copyright (c) 2017 the ACRA team
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.annotation;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * This method transforms the content of a field before it is added to the configuration
+ *
+ * @author F43nd1r
+ * @since 04.06.2017
+ */
+
+@Retention(RetentionPolicy.SOURCE)
+@Target(ElementType.METHOD)
+public @interface Transform {
+    String methodName();
+}
diff --git a/build.gradle b/build.gradle
index a033afaf..247251c6 100644
--- a/build.gradle
+++ b/build.gradle
@@ -1,29 +1,292 @@
-// Top-level build file where you can add configuration options common to all sub-projects/modules.
+/*
+ * Copyright (c) 2017 the ACRA team
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+import com.android.build.gradle.LibraryPlugin
+import com.jfrog.bintray.gradle.BintrayPlugin
 
 buildscript {
     repositories {
         jcenter()
+        google()
     }
     dependencies {
-        classpath 'com.android.tools.build:gradle:2.3.3'
-        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'
-        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.4.0"
-        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.9.0"
-        classpath 'net.researchgate:gradle-release:2.5.0'
+        classpath "com.android.tools.build:gradle:$androidBuildPluginVersion"
+        classpath "com.jfrog.bintray.gradle:gradle-bintray-plugin:$bintrayPluginVersion"
+        classpath "net.researchgate:gradle-release:$releasePluginVersion"
+    }
+}
+apply plugin: 'net.researchgate.release'
+
+release {
+    tagTemplate = '$name-$version'
+    git {
+        pushToRemote = 'ACRA'
+        requireBranch = 'master'
+    }
+}
+
+task build {
+    subprojects.each {
+        beforeReleaseBuild.dependsOn "${it.path}:clean"
+        dependsOn "${it.path}:build"
+    }
+}
+
+apply from: 'pom.gradle'
+// allow pom content to be accessed directly
+class MapDelegate {
+    Map map
+    List list
+    String name
+
+    MapDelegate(String name) {
+        def mc = new ExpandoMetaClass(MapDelegate, false, true)
+        mc.initialize()
+        this.metaClass = mc
+        map = [:]
+        list = []
+        this.name = name
+    }
+
+    def methodMissing(String name, args) {
+        def value = args[0]
+        if (value instanceof Closure) {
+            value.delegate = new MapDelegate(name)
+            value.resolveStrategy = Closure.DELEGATE_ONLY
+            value.call()
+            if (this.name == "${name}s") {
+                list.add(value)
+                return
+            }
+        }
+        map.put(name, value)
+    }
 
-        // NOTE: Do not place your application dependencies here; they belong
-        // in the individual module build.gradle files
+    def prepare() {
+        map.each { name, value ->
+            if (value instanceof Closure) {
+                if (value.list.empty) {
+                    value.prepare()
+                } else {
+                    value = value.list
+                    value.each { it -> it.prepare() }
+                }
+            }
+            this.metaClass.registerInstanceMethod("get${name.capitalize()}", { -> value })
+        }
     }
 }
-apply plugin: 'com.jfrog.artifactory'
-apply plugin: 'io.codearte.nexus-staging'
 
-allprojects {
+pom.resolveStrategy = Closure.DELEGATE_ONLY
+pom.delegate = new MapDelegate('project')
+pom.call()
+pom.prepare()
+
+subprojects {
     repositories {
         jcenter()
+        google()
+    }
+    plugins.withType(LibraryPlugin) {
+        android {
+            compileSdkVersion Integer.parseInt(androidVersion)
+            defaultConfig {
+                minSdkVersion androidMinVersion
+                targetSdkVersion androidVersion
+                versionName version
+            }
+            buildTypes {
+                release {
+                    minifyEnabled false
+                }
+            }
+            lintOptions {
+                abortOnError false
+            }
+            testOptions {
+                unitTests {
+                    includeAndroidResources = true
+                    all {
+                        systemProperty 'robolectric.logging.enabled', true
+                    }
+                }
+            }
+            compileOptions {
+                sourceCompatibility = JavaVersion.VERSION_1_8
+                targetCompatibility = JavaVersion.VERSION_1_8
+            }
+        }
+
+        dependencies {
+            testImplementation "junit:junit:$junitVersion"
+            testImplementation "org.robolectric:robolectric:$roboelectricVersion"
+            testImplementation "org.ow2.asm:asm:$asmVersion"
+        }
+
+        task sourcesJar(type: Jar) {
+            from android.sourceSets.main.java.srcDirs
+            classifier = 'sources'
+        }
+
+        task javadoc(type: Javadoc) {
+            source = android.sourceSets.main.java.srcDirs + files("${project.buildDir}/generated/source/aidl/release") + files("${project.buildDir}/generated/source/apt/release")
+            classpath += files(android.getBootClasspath().join(File.pathSeparator)) + files("${project.buildDir}/generated/source/r/release")
+            options.with {
+                linksOffline "http://d.android.com/reference", "${android.sdkDirectory.path}/docs/reference"
+            }
+            doFirst {
+                try {
+                    classpath += files(android.libraryVariants.collect { variant -> variant.javaCompile.classpath.files })
+                } catch (e) {
+                    logger.warn 'failed to get classpath for javadoc', e
+                }
+            }
+            afterEvaluate {
+                dependsOn assembleRelease
+                options { opt ->
+                    project.configurations.implementation.getAllDependencies().each { dep ->
+                        if (dep.group != project.group) return
+                        try {
+                            opt.linksOffline "http://www.javadoc.io/page/${dep.group}/${dep.name}/${dep.version}/", "${rootProject.childProjects[dep.name].buildDir}/docs/javadoc/"
+                        } catch (e) {
+                            logger.warn "${dep.name} javadoc won't be linked", e
+                        }
+                    }
+                }
+            }
+            dependsOn build
+        }
+
+        task javadocJar(type: Jar, dependsOn: javadoc) {
+            from javadoc
+            classifier = 'javadoc'
+        }
+    }
+    plugins.withType(JavaPlugin) {
+        task sourcesJar(type: Jar) {
+            from sourceSets.main.allSource
+            classifier = 'sources'
+        }
+
+        task javadocJar(type: Jar, dependsOn: javadoc) {
+            from javadoc
+            classifier = 'javadoc'
+        }
+    }
+    plugins.withType(MavenPublishPlugin) {
+        publishing {
+            publications {
+                maven(MavenPublication) {
+                    groupId group
+                    version version
+                    artifact sourcesJar
+                    artifact javadocJar
+                    pom.withXml {
+                        asNode().children().last() + rootProject.ext.pom
+                    }
+                    if (tasks.findByName('bundleRelease')) {
+                        artifact bundleRelease
+                        pom.withXml {
+                            def dependenciesNode = asNode().appendNode('dependencies')
+                            // List all compile dependencies and write to POM
+                            configurations.implementation.getAllDependencies().each { dep ->
+                                if (dep.group == null || dep.version == null || dep.name == null || dep.name == "unspecified") return // ignore invalid dependencies
+                                def dependencyNode = dependenciesNode.appendNode('dependency')
+                                dependencyNode.appendNode('groupId', dep.group)
+                                dependencyNode.appendNode('artifactId', dep.name)
+                                dependencyNode.appendNode('version', dep.version)
+                                if (!dep.transitive) {
+                                    // If this dependency is transitive, we should force exclude all its dependencies them from the POM
+                                    def exclusionNode = dependencyNode.appendNode('exclusions').appendNode('exclusion')
+                                    exclusionNode.appendNode('groupId', '*')
+                                    exclusionNode.appendNode('artifactId', '*')
+                                } else if (!dep.properties.excludeRules.empty) {
+                                    // Otherwise add specified exclude rules
+                                    def exclusionsNode = dependencyNode.appendNode('exclusions')
+                                    dep.properties.excludeRules.each { rule ->
+                                        def exclusionNode = exclusionsNode.appendNode('exclusion')
+                                        exclusionNode.appendNode('groupId', rule.group ?: '*')
+                                        exclusionNode.appendNode('artifactId', rule.module ?: '*')
+                                    }
+                                }
+                            }
+                        }
+                    } else {
+                        from components.java
+                    }
+                }
+            }
+        }
+        plugins.withType(BintrayPlugin) {
+            bintray {
+                user = artifactoryUser
+                key = artifactoryApiKey
+                publications = ['maven']
+                publish = true
+                pkg {
+                    repo = 'maven'
+                    userOrg = 'acra'
+                    name = pom.name
+                    websiteUrl = pom.url
+                    vcsUrl = pom.scm.url
+                    licenses = pom.licenses*.name
+                    publicDownloadNumbers = true
+                    version {
+                        name = project.version
+                        desc = pom.description
+                        mavenCentralSync {
+                            sync = true
+                            if (hasProperty('ossrhUser')) {
+                                user = ossrhUser
+                                password = ossrhPassword
+                            }
+                        }
+                    }
+                }
+            }
+            bintrayUpload.dependsOn(build, javadocJar, sourcesJar, 'generatePomFileForMavenPublication')
+            rootProject.afterReleaseBuild.dependsOn bintrayUpload
+        }
     }
 }
 
 task clean(type: Delete) {
     delete rootProject.buildDir
 }
+
+task joinedJavadoc(type: Javadoc) {
+    subprojects { project ->
+        afterEvaluate {
+            def tasks = project.tasks.withType(Javadoc)
+            rootProject.joinedJavadoc {
+                source += files(tasks.collect { it.source })
+                classpath += files(tasks.collect { it.classpath })
+                dependsOn tasks.collect { it.dependsOn }
+            }
+            plugins.withType(LibraryPlugin) {
+                rootProject.joinedJavadoc {
+                    options.with {
+                        linksOffline "http://d.android.com/reference", "${android.sdkDirectory.path}/docs/reference"
+                    }
+                    doFirst {
+                        classpath += files(android.libraryVariants.collect { variant -> variant.javaCompile.classpath.files })
+                    }
+                }
+            }
+        }
+    }
+    destinationDir = file("${project.buildDir}/javadoc")
+}
diff --git a/gradle.properties b/gradle.properties
index ceca5566..add4723b 100644
--- a/gradle.properties
+++ b/gradle.properties
@@ -1,20 +1,39 @@
-# Project-wide Gradle settings.
-
-# IDE (e.g. Android Studio) users:
-# Gradle settings configured through the IDE *will override*
-# any settings specified in this file.
-
-# For more details on how to configure your build environment visit
-# http://www.gradle.org/docs/current/userguide/build_environment.html
+#
+# Copyright (c) 2017 the ACRA team
+#
+# Licensed under the Apache License, Version 2.0 (the "License");
+# you may not use this file except in compliance with the License.
+# You may obtain a copy of the License at
+#
+#     http://www.apache.org/licenses/LICENSE-2.0
+#
+# Unless required by applicable law or agreed to in writing, software
+# distributed under the License is distributed on an "AS IS" BASIS,
+# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+# See the License for the specific language governing permissions and
+# limitations under the License.
+#
 
-# Specifies the JVM arguments used for the daemon process.
-# The setting is particularly useful for tweaking memory settings.
-# Default value: -Xmx10248m -XX:MaxPermSize=256m
-# org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8
+# Project-wide Gradle settings.
 
-# When configured, Gradle will run in incubating parallel mode.
-# This option should only be used with decoupled projects. More details, visit
-# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
-# org.gradle.parallel=true
+# gradle options
 org.gradle.daemon=true
-org.gradle.jvmargs=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005
\ No newline at end of file
+org.gradle.jvmargs=-Xmx4g -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005
+org.gradle.configureondemand=true
+org.gradle.parallel=true
+org.gradle.caching=true
+
+# upload properties
+group=ch.acra
+# versions
+version=5.1.4-SNAPSHOT
+supportVersion=27.0.2
+androidVersion=27
+androidMinVersion=14
+androidBuildPluginVersion=3.2.0-alpha10
+bintrayPluginVersion=1.8.0
+releasePluginVersion=2.6.0
+autoServiceVersion=1.0-rc4
+junitVersion=4.12
+roboelectricVersion=3.8
+asmVersion=6.0
\ No newline at end of file
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
index 0a66667d..45413265 100644
--- a/gradle/wrapper/gradle-wrapper.properties
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -1,6 +1,6 @@
-#Fri Feb 17 03:38:03 CET 2017
+#Sat Sep 23 02:43:52 CEST 2017
 distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-3.3-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-4.6-all.zip
diff --git a/gradlew b/gradlew
old mode 100644
new mode 100755
diff --git a/pom.gradle b/pom.gradle
new file mode 100644
index 00000000..8621e902
--- /dev/null
+++ b/pom.gradle
@@ -0,0 +1,46 @@
+/*
+ * Copyright (c) 2017
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+ext.pom = {
+    name 'ACRA'
+    description 'Publishes reports of Android application crashes to an end point.'
+    url 'http://acra.ch'
+    scm {
+        connection 'scm:git:https://github.com/F43nd1r/acra.git'
+        developerConnection 'scm:git:git@github.com:F43nd1r/acra.git'
+        url 'https://github.com/F43nd1r/acra.git'
+    }
+    licenses {
+        license {
+            name 'Apache-2.0'
+            url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
+            distribution 'repo'
+        }
+    }
+    developers {
+        developer {
+            id 'kevin.gaudin'
+            name 'Kevin Gaudin'
+        }
+        developer {
+            id 'william.ferguson'
+            name 'William Ferguson'
+        }
+        developer {
+            id 'f43nd1r'
+            name 'Lukas Morawietz'
+        }
+    }
+}
diff --git a/settings.gradle b/settings.gradle
index 988a1191..b37c562f 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -1 +1 @@
-include ':acra', ':annotationprocessor', ':annotations'
\ No newline at end of file
+include ':acratest', ':annotationprocessor', ':annotations', ':acra-http', ':acra-core', ':acra-mail', ':acra-dialog', ':acra-toast', ':acra-javacore', ':acra-notification', ':acra-limiter'
\ No newline at end of file
