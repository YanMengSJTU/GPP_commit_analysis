diff --git a/src/main/java/org/acra/ACRA.java b/src/main/java/org/acra/ACRA.java
index b75b3a84..76e66338 100644
--- a/src/main/java/org/acra/ACRA.java
+++ b/src/main/java/org/acra/ACRA.java
@@ -15,6 +15,12 @@
  */
 package org.acra;
 
+import java.io.IOException;
+import java.io.InputStream;
+import java.security.cert.Certificate;
+import java.security.cert.CertificateException;
+import java.security.cert.CertificateFactory;
+
 import org.acra.annotation.ReportsCrashes;
 import org.acra.log.ACRALog;
 import org.acra.log.AndroidLogDelegate;
@@ -135,6 +141,24 @@ public static void init(Application app) {
 
             log.d(LOG_TAG, "ACRA is enabled for " + mApplication.getPackageName() + ", intializing...");
 
+            String trustSSLCertName = getConfig().trustSSLCertName();
+            if (!trustSSLCertName.equals(ACRAConstants.DEFAULT_STRING_VALUE)) {
+                try {
+                    InputStream caInput = mApplication.getAssets().open(trustSSLCertName);
+                    try {
+                        CertificateFactory cf = CertificateFactory.getInstance("X.509");
+                        Certificate ca = cf.generateCertificate(caInput);
+                        getConfig().setTrustSSLCert(ca);
+                    } catch (CertificateException e) {
+                        throw new ACRAConfigurationException("could not parse certificate: " + e.getMessage());
+                    } finally {
+                        caInput.close();
+                    }
+                } catch (IOException e) {
+                    throw new ACRAConfigurationException("could not read certificate: " + e.getMessage());
+                }
+            }
+
             // Initialize ErrorReporter with all required data
             final boolean enableAcra = !shouldDisableACRA(prefs);
             final ErrorReporter errorReporter = new ErrorReporter(mApplication, prefs, enableAcra);
diff --git a/src/main/java/org/acra/ACRAConfiguration.java b/src/main/java/org/acra/ACRAConfiguration.java
index d1afbb50..5d5241d3 100644
--- a/src/main/java/org/acra/ACRAConfiguration.java
+++ b/src/main/java/org/acra/ACRAConfiguration.java
@@ -35,9 +35,11 @@
 import static org.acra.ACRAConstants.DEFAULT_SHARED_PREFERENCES_MODE;
 import static org.acra.ACRAConstants.DEFAULT_SOCKET_TIMEOUT;
 import static org.acra.ACRAConstants.DEFAULT_STRING_VALUE;
+import static org.acra.ACRAConstants.DEFAULT_TRUST_SSL_CERT;
 import static org.acra.ACRAConstants.NULL_VALUE;
 
 import java.lang.annotation.Annotation;
+import java.security.cert.Certificate;
 import java.util.Map;
 
 import org.acra.annotation.ReportsCrashes;
@@ -104,6 +106,9 @@
     private Type mReportType = null;
     private Map<String, String> mHttpHeaders;
 
+    private String mTrustSSLCertName = null;
+    private Certificate mTrustSSLCert = DEFAULT_TRUST_SSL_CERT;
+
     /**
      * Set custom HTTP headers to be sent by the provided {@link HttpSender}.
      * This should be used also by third party senders.
@@ -514,6 +519,18 @@ public void setDisableSSLCertValidation(boolean disableSSLCertValidation) {
         mDisableSSLCertValidation = disableSSLCertValidation;
     }
 
+    /**
+     *
+     * @param trustSSLCertName
+     */
+    public void setTrustSSLCertName(String trustSSLCertName) {
+        mTrustSSLCertName = trustSSLCertName;
+    }
+
+    public void setTrustSSLCert(Certificate trustSSLCert) {
+        mTrustSSLCert = trustSSLCert;
+    }
+
     /**
      * 
      * @param httpMethod
@@ -1061,6 +1078,23 @@ public boolean disableSSLCertValidation() {
         return DEFAULT_DISABLE_SSL_CERT_VALIDATION;
     }
 
+    @Override
+    public String trustSSLCertName() {
+        if (mTrustSSLCertName != null) {
+            return mTrustSSLCertName;
+        }
+
+        if (mReportsCrashes != null) {
+            return mReportsCrashes.trustSSLCertName();
+        }
+
+        return DEFAULT_STRING_VALUE;
+    }
+
+    public Certificate trustSSLCert() {
+        return mTrustSSLCert;
+    }
+
     @Override
     public Method httpMethod() {
         if (mHttpMethod != null) {
diff --git a/src/main/java/org/acra/ACRAConstants.java b/src/main/java/org/acra/ACRAConstants.java
index 3b3a9507..171bc672 100644
--- a/src/main/java/org/acra/ACRAConstants.java
+++ b/src/main/java/org/acra/ACRAConstants.java
@@ -46,6 +46,9 @@
 import static org.acra.ReportField.USER_COMMENT;
 import static org.acra.ReportField.USER_CRASH_DATE;
 import static org.acra.ReportField.USER_EMAIL;
+
+import java.security.cert.Certificate;
+
 import android.content.Context;
 
 /**
@@ -144,6 +147,8 @@
 
     public static final boolean DEFAULT_DISABLE_SSL_CERT_VALIDATION = false;
 
+    public static final Certificate DEFAULT_TRUST_SSL_CERT = null;
+
     /**
      * Default list of {@link ReportField}s to be sent in email reports. You can
      * set your own list with
diff --git a/src/main/java/org/acra/annotation/ReportsCrashes.java b/src/main/java/org/acra/annotation/ReportsCrashes.java
index f5d8e9cf..e87d87df 100644
--- a/src/main/java/org/acra/annotation/ReportsCrashes.java
+++ b/src/main/java/org/acra/annotation/ReportsCrashes.java
@@ -545,4 +545,14 @@
     Method httpMethod() default Method.POST;
 
     Type reportType() default Type.FORM;
+
+    /**
+     * <p>
+     * Set this to the name of the asset that contains a PEM encoded X509 certificate that validates
+     * your server
+     * </p>
+     *
+     * @return the filename of the trusted certificate
+     */
+    String trustSSLCertName() default ACRAConstants.DEFAULT_STRING_VALUE;
 }
diff --git a/src/main/java/org/acra/util/HttpRequest.java b/src/main/java/org/acra/util/HttpRequest.java
index 502b1660..35e62f14 100644
--- a/src/main/java/org/acra/util/HttpRequest.java
+++ b/src/main/java/org/acra/util/HttpRequest.java
@@ -10,10 +10,19 @@
 import java.net.SocketTimeoutException;
 import java.net.URL;
 import java.net.URLEncoder;
+import java.security.GeneralSecurityException;
+import java.security.KeyStore;
+import java.security.cert.Certificate;
+import java.security.cert.CertificateFactory;
+import java.security.cert.X509Certificate;
 import java.util.Iterator;
 import java.util.Map;
 
+import javax.net.ssl.SSLContext;
+import javax.net.ssl.TrustManagerFactory;
+
 import org.acra.ACRA;
+import org.acra.ACRAConstants;
 import org.acra.sender.HttpSender.Method;
 import org.acra.sender.HttpSender.Type;
 import org.apache.http.HttpResponse;
@@ -30,6 +39,7 @@
 import org.apache.http.conn.scheme.PlainSocketFactory;
 import org.apache.http.conn.scheme.Scheme;
 import org.apache.http.conn.scheme.SchemeRegistry;
+import org.apache.http.conn.scheme.SocketFactory;
 import org.apache.http.conn.ssl.SSLSocketFactory;
 import org.apache.http.entity.StringEntity;
 import org.apache.http.impl.auth.BasicScheme;
@@ -138,7 +148,12 @@ public void setMaxNrRetries(int maxNrRetries) {
      */
     public void send(URL url, Method method, String content, Type type) throws IOException {
 
-        final HttpClient httpClient = getHttpClient();
+        final HttpClient httpClient;
+        try {
+            httpClient = getHttpClient();
+        } catch (GeneralSecurityException e) {
+            throw new IOException(e);
+        }
         final HttpEntityEnclosingRequestBase httpRequest = getHttpRequest(url, method, content, type);
 
         ACRA.log.d(ACRA.LOG_TAG, "Sending request to " + url);
@@ -195,8 +210,10 @@ public void send(URL url, Method method, String content, Type type) throws IOExc
 
     /**
      * @return HttpClient to use with this HttpRequest.
+     * @throws IOException
+     * @throws GeneralSecurityException
      */
-    private HttpClient getHttpClient() {
+    private HttpClient getHttpClient() throws GeneralSecurityException, IOException {
         final HttpParams httpParams = new BasicHttpParams();
         httpParams.setParameter(ClientPNames.COOKIE_POLICY, CookiePolicy.RFC_2109);
         HttpConnectionParams.setConnectionTimeout(httpParams, connectionTimeOut);
@@ -208,7 +225,7 @@ private HttpClient getHttpClient() {
         if (ACRA.getConfig().disableSSLCertValidation()) {
             registry.register(new Scheme("https", (new FakeSocketFactory()), 443));
         } else {
-            registry.register(new Scheme("https", SSLSocketFactory.getSocketFactory(), 443));
+            registry.register(new Scheme("https", getSocketFactory(), 443));
         }
 
         final ClientConnectionManager clientConnectionManager = new ThreadSafeClientConnManager(httpParams, registry);
@@ -220,6 +237,22 @@ private HttpClient getHttpClient() {
         return httpClient;
     }
 
+    private static SocketFactory getSocketFactory() throws GeneralSecurityException, IOException {
+        Certificate trustSSLCert = ACRA.getConfig().trustSSLCert();
+
+        if (trustSSLCert == ACRAConstants.DEFAULT_TRUST_SSL_CERT) {
+            return SSLSocketFactory.getSocketFactory();
+        }
+
+        // Create a KeyStore containing our trusted CAs
+        String keyStoreType = KeyStore.getDefaultType();
+        KeyStore keyStore = KeyStore.getInstance(keyStoreType);
+        keyStore.load(null, null);
+        keyStore.setCertificateEntry("ca", trustSSLCert);
+
+        return new SSLSocketFactory(keyStore);
+    }
+
     /**
      * @return Credentials to use with this HttpRequest or null if no
      *         credentials were supplied.
