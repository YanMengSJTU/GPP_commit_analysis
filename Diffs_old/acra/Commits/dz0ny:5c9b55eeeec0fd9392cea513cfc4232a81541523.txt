diff --git a/.settings/org.eclipse.core.resources.prefs b/.settings/org.eclipse.core.resources.prefs
index ee4149c1..f9fe3459 100644
--- a/.settings/org.eclipse.core.resources.prefs
+++ b/.settings/org.eclipse.core.resources.prefs
@@ -1,5 +1,4 @@
-#Sun Oct 09 00:54:43 CEST 2011
-eclipse.preferences.version=1
-encoding//src/main/java=UTF-8
-encoding//src/test/java=UTF-8
-encoding/<project>=UTF-8
+eclipse.preferences.version=1
+encoding//src/main/java=UTF-8
+encoding//src/test/java=UTF-8
+encoding/<project>=UTF-8
diff --git a/src/main/java/org/acra/sender/SentrySender.java b/src/main/java/org/acra/sender/SentrySender.java
new file mode 100644
index 00000000..31dc28cd
--- /dev/null
+++ b/src/main/java/org/acra/sender/SentrySender.java
@@ -0,0 +1,301 @@
+package org.acra.sender;
+
+import static org.acra.ReportField.ANDROID_VERSION;
+import static org.acra.ReportField.APP_VERSION_CODE;
+import static org.acra.ReportField.APP_VERSION_NAME;
+import static org.acra.ReportField.AVAILABLE_MEM_SIZE;
+import static org.acra.ReportField.BRAND;
+import static org.acra.ReportField.FILE_PATH;
+import static org.acra.ReportField.INSTALLATION_ID;
+import static org.acra.ReportField.IS_SILENT;
+import static org.acra.ReportField.PACKAGE_NAME;
+import static org.acra.ReportField.PHONE_MODEL;
+import static org.acra.ReportField.PRODUCT;
+import static org.acra.ReportField.TOTAL_MEM_SIZE;
+import static org.acra.ReportField.USER_APP_START_DATE;
+import static org.acra.ReportField.USER_CRASH_DATE;
+
+import java.io.IOException;
+import java.net.MalformedURLException;
+import java.net.URL;
+import java.text.SimpleDateFormat;
+import java.util.Date;
+import java.util.zip.CRC32;
+import java.util.zip.Checksum;
+
+import org.acra.ACRA;
+import org.acra.ReportField;
+import org.acra.collector.CrashReportData;
+import org.acra.sender.HttpSender.Method;
+import org.acra.util.HttpRequest;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+
+public class SentrySender implements ReportSender {
+
+	private SentryConfig config;
+    public static final ReportField[] SENTRY_TAGS_FIELDS = { APP_VERSION_CODE, APP_VERSION_NAME,
+        PACKAGE_NAME, FILE_PATH, PHONE_MODEL, BRAND, PRODUCT, ANDROID_VERSION, TOTAL_MEM_SIZE,
+        AVAILABLE_MEM_SIZE, IS_SILENT, USER_APP_START_DATE, USER_CRASH_DATE, INSTALLATION_ID };
+	/**
+	 * Takes in a sentryDSN
+	 *
+	 * @param sentryDSN '{PROTOCOL}://{PUBLIC_KEY}:{SECRET_KEY}@{HOST}/{PATH}/{PROJECT_ID}'
+	 */
+	public SentrySender(String sentryDSN) {
+		if (sentryDSN == null) {
+			return;
+		}
+		config = new SentryConfig(sentryDSN);
+	}
+	public SentrySender(){
+		if (ACRA.getConfig().formKey() == null) {
+			return;
+		}
+		config = new SentryConfig( ACRA.getConfig().formKey() );
+	}
+	@Override
+	public void send(CrashReportData errorContent) throws ReportSenderException {
+		
+		if (config == null) {
+			return;
+		}
+		
+		final HttpRequest request = new HttpRequest();
+		request.setConnectionTimeOut(ACRA.getConfig().connectionTimeout());
+		request.setSocketTimeOut(ACRA.getConfig().socketTimeout());
+		request.setMaxNrRetries(ACRA.getConfig().maxNumberOfRequestRetries());
+		request.extra_headers.put("X-Sentry-Auth", buildAuthHeader());
+		try {
+			request.send(config.getSentryURL(), Method.POST, buildJSON(errorContent), org.acra.sender.HttpSender.Type.JSON);
+		} catch (MalformedURLException e) {
+			throw new ReportSenderException("Error while sending report to Sentry.", e);
+		} catch (IOException e) {
+			throw new ReportSenderException("Error while sending report to Sentry.", e);
+		} catch (JSONException e) {
+			throw new ReportSenderException("Error while sending report to Sentry.", e);
+		}
+	}
+	  /**
+     * Build up the sentry auth header in the following format.
+     * <p/>
+     * The header is composed of the timestamp from when the message was generated, and an
+     * arbitrary client version string. The client version should be something distinct to your client,
+     * and is simply for reporting purposes.
+     * <p/>
+     * X-Sentry-Auth: Sentry sentry_version=3,
+     * sentry_timestamp=<signature timestamp>[,
+     * sentry_key=<public api key>,[
+     * sentry_client=<client version, arbitrary>]]
+     *
+     * @param hmacSignature SHA1-signed HMAC
+     * @param publicKey     is either the public_key or the shared global key between client and server.
+     * @return String version of the sentry auth header
+     */
+    protected String buildAuthHeader() {
+        StringBuilder header = new StringBuilder();
+        header.append("sentry_version=3");
+        header.append(",sentry_timestamp=");
+        header.append(new Date().getTime());
+        header.append(",sentry_key=");
+        header.append(config.getPublicKey());
+        header.append(",sentry_client=ACRA,1.0");
+
+        return header.toString();
+    }
+
+	/**
+	 * Given the time right now return a ISO8601 formatted date string
+	 *
+	 * @return ISO8601 formatted date string
+	 */
+	public String getTimestampString() {
+		SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mmZ");
+		return df.format(new Date());
+	}
+
+	private String buildJSON(CrashReportData report) throws JSONException {
+		JSONObject obj = new JSONObject();
+		String message = report.getProperty(ReportField.STACK_TRACE).split("\n")[0];
+		obj.put("event_id", report.getProperty(ReportField.REPORT_ID)); //Hexadecimal string representing a uuid4 value.
+		
+		obj.put("culprit", report.getProperty(ReportField.FILE_PATH));
+		obj.put("sentry.interfaces.Stacktrace", report.getProperty(ReportField.STACK_TRACE));
+		
+		obj.put("level", "error");
+		obj.put("timestamp", getTimestampString());
+		obj.put("message", message);
+
+		obj.put("logger", "org.acra");
+		obj.put("platform", "android");
+		obj.put("tags", remap(report, SENTRY_TAGS_FIELDS));
+		if (ACRA.getConfig().customReportContent().length > 0) {
+			obj.put("extra", remap(report, ACRA.getConfig().customReportContent()));
+		}
+		
+		ACRA.log.d(ACRA.LOG_TAG, obj.toString());
+		
+		return obj.toString();
+	}
+ 
+	private JSONObject remap(CrashReportData report, ReportField[] fields) throws JSONException {
+
+        final JSONObject result = new JSONObject(); 
+        for (ReportField originalKey : fields) {
+        	result.put(originalKey.toString(), report.getProperty(originalKey));
+        	ACRA.log.d(ACRA.LOG_TAG, originalKey.toString() + ": "+ report.getProperty(originalKey));
+        }
+        return result;
+    }
+        
+	private class SentryConfig {
+
+		private String host, protocol, publicKey, secretKey, path, projectId;
+		private int port;
+
+		/**
+		 * Takes in a sentryDSN and builds up the configuration
+		 *
+		 * @param sentryDSN '{PROTOCOL}://{PUBLIC_KEY}:{SECRET_KEY}@{HOST}/{PATH}/{PROJECT_ID}'
+		 */
+		public SentryConfig(String sentryDSN) {
+
+			try {
+				URL url = new URL(sentryDSN);
+				this.host = url.getHost();
+				this.protocol = url.getProtocol();
+				String urlPath = url.getPath();
+
+				int lastSlash = urlPath.lastIndexOf("/");
+				this.path = urlPath.substring(0, lastSlash);
+				// ProjectId is the integer after the last slash in the path
+				this.projectId = urlPath.substring(lastSlash + 1);
+
+				String userInfo = url.getUserInfo();
+				String[] userParts = userInfo.split(":");
+
+				this.secretKey = userParts[1];
+				this.publicKey = userParts[0];
+
+				this.port = url.getPort();
+
+			} catch (MalformedURLException e) {
+				e.printStackTrace();
+			}
+
+		}
+
+		/**
+		 * The Sentry server URL that we post the message to.
+		 *
+		 * @return sentry server url
+		 * @throws MalformedURLException 
+		 */
+		public URL getSentryURL() throws MalformedURLException {
+			StringBuilder serverUrl = new StringBuilder();
+			serverUrl.append(getProtocol());
+			serverUrl.append("://");
+			serverUrl.append(getHost());
+			if ((getPort() != 0) && (getPort() != 80) && getPort() != -1) {
+				serverUrl.append(":").append(getPort());
+			}
+			serverUrl.append(getPath());
+			serverUrl.append("/api/store/");
+			return new URL(serverUrl.toString());
+		}
+
+		/**
+		 * The sentry server host
+		 *
+		 * @return server host
+		 */
+		public String getHost() {
+			return host;
+		}
+
+		public void setHost(String host) {
+			this.host = host;
+		}
+
+		/**
+		 * Sentry server protocol http https?
+		 *
+		 * @return http or https
+		 */
+		public String getProtocol() {
+			return protocol;
+		}
+
+		public void setProtocol(String protocol) {
+			this.protocol = protocol;
+		}
+
+		/**
+		 * The Sentry public key
+		 *
+		 * @return Sentry public key
+		 */
+		public String getPublicKey() {
+			return publicKey;
+		}
+
+		public void setPublicKey(String publicKey) {
+			this.publicKey = publicKey;
+		}
+
+		/**
+		 * The Sentry secret key
+		 *
+		 * @return Sentry secret key
+		 */
+		public String getSecretKey() {
+			return secretKey;
+		}
+
+		public void setSecretKey(String secretKey) {
+			this.secretKey = secretKey;
+		}
+
+		/**
+		 * sentry url path
+		 *
+		 * @return url path
+		 */
+		public String getPath() {
+			return path;
+		}
+
+		public void setPath(String path) {
+			this.path = path;
+		}
+
+		/**
+		 * Sentry project Id
+		 *
+		 * @return project Id
+		 */
+		public String getProjectId() {
+			return projectId;
+		}
+
+		public void setProjectId(String projectId) {
+			this.projectId = projectId;
+		}
+
+		/**
+		 * sentry server port
+		 *
+		 * @return server port
+		 */
+		public int getPort() {
+			return port;
+		}
+
+		public void setPort(int port) {
+			this.port = port;
+		}
+
+	}
+}
+
diff --git a/src/main/java/org/acra/util/HttpRequest.java b/src/main/java/org/acra/util/HttpRequest.java
index 05c7dee3..8e32e9c6 100644
--- a/src/main/java/org/acra/util/HttpRequest.java
+++ b/src/main/java/org/acra/util/HttpRequest.java
@@ -10,6 +10,9 @@
 import java.net.SocketTimeoutException;
 import java.net.URL;
 import java.net.URLEncoder;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.Iterator;
 import java.util.Map;
 
 import org.acra.ACRA;
@@ -43,200 +46,206 @@
 
 public final class HttpRequest {
 
-    private static class SocketTimeOutRetryHandler implements HttpRequestRetryHandler {
-
-        private final HttpParams httpParams;
-        private final int maxNrRetries;
-
-        /**
-         * @param httpParams    HttpParams that will be used in the HttpRequest.
-         * @param maxNrRetries  Max number of times to retry Request on failure due to SocketTimeOutException.
-         */
-        private SocketTimeOutRetryHandler(HttpParams httpParams, int maxNrRetries) {
-            this.httpParams = httpParams;
-            this.maxNrRetries = maxNrRetries;
-        }
-
-        @Override
-        public boolean retryRequest(IOException exception, int executionCount, HttpContext context) {
-            if (exception instanceof SocketTimeoutException) {
-                if (executionCount <= maxNrRetries) {
-
-                    if (httpParams != null) {
-                        final int newSocketTimeOut = HttpConnectionParams.getSoTimeout(httpParams) * 2;
-                        HttpConnectionParams.setSoTimeout(httpParams, newSocketTimeOut);
-                        ACRA.log.d(ACRA.LOG_TAG, "SocketTimeOut - increasing time out to " + newSocketTimeOut + " millis and trying again");
-                    } else {
-                        ACRA.log.d(ACRA.LOG_TAG, "SocketTimeOut - no HttpParams, cannot increase time out. Trying again with current settings");
-                    }
-
-                    return true;
-                }
-
-                ACRA.log.d(ACRA.LOG_TAG, "SocketTimeOut but exceeded max number of retries : " + maxNrRetries);
-            }
-
-            return false;  //To change body of implemented methods use File | Settings | File Templates.
-        }
-    }
-
-
-
-    private String login;
-    private String password;
-    private int connectionTimeOut = 3000;
-    private int socketTimeOut = 3000;
-    private int maxNrRetries = 3;
-
-    public void setLogin(String login) {
-        this.login = login;
-    }
-
-    public void setPassword(String password) {
-        this.password = password;
-    }
-
-    public void setConnectionTimeOut(int connectionTimeOut) {
-        this.connectionTimeOut = connectionTimeOut;
-    }
-
-    public void setSocketTimeOut(int socketTimeOut) {
-        this.socketTimeOut = socketTimeOut;
-    }
-
-    /**
-     * The default number of retries is 3.
-     *
-     * @param maxNrRetries  Max number of times to retry Request on failure due to SocketTimeOutException.
-     */
-    public void setMaxNrRetries(int maxNrRetries) {
-        this.maxNrRetries = maxNrRetries;
-    }
-
-    /**
-     * Posts to a URL.
-     *
-     * @param url           URL to which to post.
-     * @param content    Map of parameters to post to a URL.
-     * @throws IOException if the data cannot be posted.
-     */
-    public void send(URL url, Method method, String content, Type type) throws IOException {
-
-        final HttpClient httpClient = getHttpClient();
-        final HttpEntityEnclosingRequestBase httpRequest = getHttpRequest(url, method, content, type);
-
-        ACRA.log.d(ACRA.LOG_TAG, "Sending request to " + url);
-        if (ACRA.DEV_LOGGING) ACRA.log.d(ACRA.LOG_TAG, "Http " + method.name() + " content : ");
-        if (ACRA.DEV_LOGGING) ACRA.log.d(ACRA.LOG_TAG, content);
-
-        final HttpResponse response = httpClient.execute(httpRequest, new BasicHttpContext());
-        if (response != null) {
-            final StatusLine statusLine = response.getStatusLine();
-            if (statusLine != null) {
-                final String statusCode = Integer.toString(response.getStatusLine().getStatusCode());
-                if (statusCode.startsWith("4") || statusCode.startsWith("5")) {
-                    if (ACRA.DEV_LOGGING) ACRA.log.d(ACRA.LOG_TAG, "Could not send HttpPost : " + httpRequest);
-                    throw new IOException("Host returned error code " + statusCode);
-                }
-            }
-
-            if (ACRA.DEV_LOGGING) ACRA.log.d(ACRA.LOG_TAG, "HttpResponse Status : " + (statusLine != null ? statusLine.getStatusCode() : "NoStatusLine#noCode"));
-            final String respContent = EntityUtils.toString(response.getEntity());
-            if (ACRA.DEV_LOGGING) ACRA.log.d(ACRA.LOG_TAG, "HttpResponse Content : " + respContent.substring(0, Math.min(respContent.length(), 200)));
-
-        } else {
-            if (ACRA.DEV_LOGGING) ACRA.log.d(ACRA.LOG_TAG, "HTTP no Response!!");
-        }
-    }
-
-    /**
-     * @return HttpClient to use with this HttpRequest.
-     */
-    private HttpClient getHttpClient() {
-        final HttpParams httpParams = new BasicHttpParams();
-        httpParams.setParameter(ClientPNames.COOKIE_POLICY, CookiePolicy.RFC_2109);
-        HttpConnectionParams.setConnectionTimeout(httpParams, connectionTimeOut);
-        HttpConnectionParams.setSoTimeout(httpParams, socketTimeOut);
-        HttpConnectionParams.setSocketBufferSize(httpParams, 8192);
-
-        final SchemeRegistry registry = new SchemeRegistry();
-        registry.register(new Scheme("http", new PlainSocketFactory(), 80));
-        if(ACRA.getConfig().disableSSLCertValidation()) {
-            registry.register(new Scheme("https", (new FakeSocketFactory()), 443));
-        } else {
-            registry.register(new Scheme("https", SSLSocketFactory.getSocketFactory(), 443));
-        }
-
-        final ClientConnectionManager clientConnectionManager = new ThreadSafeClientConnManager(httpParams, registry);
-        final DefaultHttpClient httpClient = new DefaultHttpClient(clientConnectionManager, httpParams);
-
-        final HttpRequestRetryHandler retryHandler = new SocketTimeOutRetryHandler(httpParams, maxNrRetries);
-        httpClient.setHttpRequestRetryHandler(retryHandler);
-
-        return httpClient;
-    }
-
-    /**
-     * @return Credentials to use with this HttpRequest or null if no credentials were supplied.
-     */
-    private UsernamePasswordCredentials getCredentials() {
-        if (login != null || password != null) {
-            return new UsernamePasswordCredentials(login, password);
-        }
-
-        return null;
-    }
-
-    private HttpEntityEnclosingRequestBase getHttpRequest(URL url, Method method, String content, Type type) throws UnsupportedEncodingException, UnsupportedOperationException {
-
-        final HttpEntityEnclosingRequestBase httpRequest;
-        switch (method) {
-        case POST:
-            httpRequest = new HttpPost(url.toString());
-            break;
-        case PUT:
-            httpRequest = new HttpPut(url.toString());
-            break;
-        default:
-            throw new UnsupportedOperationException("Unknown method: " + method.name());
-        }
-
-        final UsernamePasswordCredentials creds = getCredentials();
-        if (creds != null) {
-            httpRequest.addHeader(BasicScheme.authenticate(creds, "UTF-8", false));
-        }
-        httpRequest.setHeader("User-Agent", "Android");
-        httpRequest.setHeader("Accept", "text/html,application/xml,application/json,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5");
-        httpRequest.setHeader("Content-Type", type.getContentType());
-
-        httpRequest.setEntity(new StringEntity(content, "UTF-8"));
-
-        return httpRequest;
-    }
-
-    /**
-     * Converts a Map of parameters into a URL encoded Sting.
-     * 
-     * @param parameters
-     *            Map of parameters to convert.
-     * @return URL encoded String representing the parameters.
-     * @throws UnsupportedEncodingException
-     *             if one of the parameters couldn't be converted to UTF-8.
-     */
-    public static String getParamsAsFormString(Map<?, ?> parameters) throws UnsupportedEncodingException {
-
-        final StringBuilder dataBfr = new StringBuilder();
-        for (final Object key : parameters.keySet()) {
-            if (dataBfr.length() != 0) {
-                dataBfr.append('&');
-            }
-            final Object preliminaryValue = parameters.get(key);
-            final Object value = (preliminaryValue == null) ? "" : preliminaryValue;
-            dataBfr.append(URLEncoder.encode(key.toString(), "UTF-8"));
-            dataBfr.append('=');
-            dataBfr.append(URLEncoder.encode(value.toString(), "UTF-8"));
-        }
-
-        return dataBfr.toString();
-    }
+	private static class SocketTimeOutRetryHandler implements HttpRequestRetryHandler {
+
+		private final HttpParams httpParams;
+		private final int maxNrRetries;
+
+		/**
+		 * @param httpParams    HttpParams that will be used in the HttpRequest.
+		 * @param maxNrRetries  Max number of times to retry Request on failure due to SocketTimeOutException.
+		 */
+		private SocketTimeOutRetryHandler(HttpParams httpParams, int maxNrRetries) {
+			this.httpParams = httpParams;
+			this.maxNrRetries = maxNrRetries;
+		}
+
+		@Override
+		public boolean retryRequest(IOException exception, int executionCount, HttpContext context) {
+			if (exception instanceof SocketTimeoutException) {
+				if (executionCount <= maxNrRetries) {
+
+					if (httpParams != null) {
+						final int newSocketTimeOut = HttpConnectionParams.getSoTimeout(httpParams) * 2;
+						HttpConnectionParams.setSoTimeout(httpParams, newSocketTimeOut);
+						ACRA.log.d(ACRA.LOG_TAG, "SocketTimeOut - increasing time out to " + newSocketTimeOut + " millis and trying again");
+					} else {
+						ACRA.log.d(ACRA.LOG_TAG, "SocketTimeOut - no HttpParams, cannot increase time out. Trying again with current settings");
+					}
+
+					return true;
+				}
+
+				ACRA.log.d(ACRA.LOG_TAG, "SocketTimeOut but exceeded max number of retries : " + maxNrRetries);
+			}
+
+			return false;  //To change body of implemented methods use File | Settings | File Templates.
+		}
+	}
+
+
+	public Map<String,String> extra_headers = new HashMap<String, String>();
+	private String login;
+	private String password;
+	private int connectionTimeOut = 3000;
+	private int socketTimeOut = 3000;
+	private int maxNrRetries = 3;
+
+	public void setLogin(String login) {
+		this.login = login;
+	}
+
+	public void setPassword(String password) {
+		this.password = password;
+	}
+
+	public void setConnectionTimeOut(int connectionTimeOut) {
+		this.connectionTimeOut = connectionTimeOut;
+	}
+
+	public void setSocketTimeOut(int socketTimeOut) {
+		this.socketTimeOut = socketTimeOut;
+	}
+
+	/**
+	 * The default number of retries is 3.
+	 *
+	 * @param maxNrRetries  Max number of times to retry Request on failure due to SocketTimeOutException.
+	 */
+	public void setMaxNrRetries(int maxNrRetries) {
+		this.maxNrRetries = maxNrRetries;
+	}
+
+	/**
+	 * Posts to a URL.
+	 *
+	 * @param url           URL to which to post.
+	 * @param content    Map of parameters to post to a URL.
+	 * @throws IOException if the data cannot be posted.
+	 */
+	public void send(URL url, Method method, String content, Type type) throws IOException {
+
+		final HttpClient httpClient = getHttpClient();
+		final HttpEntityEnclosingRequestBase httpRequest = getHttpRequest(url, method, content, type);
+
+		ACRA.log.d(ACRA.LOG_TAG, "Sending request to " + url);
+		if (ACRA.DEV_LOGGING) ACRA.log.d(ACRA.LOG_TAG, "Http " + method.name() + " content : ");
+		if (ACRA.DEV_LOGGING) ACRA.log.d(ACRA.LOG_TAG, content);
+
+		final HttpResponse response = httpClient.execute(httpRequest, new BasicHttpContext());
+		if (response != null) {
+			final StatusLine statusLine = response.getStatusLine();
+			if (statusLine != null) {
+				final String statusCode = Integer.toString(response.getStatusLine().getStatusCode());
+				if (statusCode.startsWith("4") || statusCode.startsWith("5")) {
+					if (ACRA.DEV_LOGGING) ACRA.log.d(ACRA.LOG_TAG, "Could not send HttpPost : " + httpRequest);
+					throw new IOException("Host returned error code " + statusCode);
+				}
+			}
+
+			if (ACRA.DEV_LOGGING) ACRA.log.d(ACRA.LOG_TAG, "HttpResponse Status : " + (statusLine != null ? statusLine.getStatusCode() : "NoStatusLine#noCode"));
+			final String respContent = EntityUtils.toString(response.getEntity());
+			if (ACRA.DEV_LOGGING) ACRA.log.d(ACRA.LOG_TAG, "HttpResponse Content : " + respContent.substring(0, Math.min(respContent.length(), 200)));
+
+		} else {
+			if (ACRA.DEV_LOGGING) ACRA.log.d(ACRA.LOG_TAG, "HTTP no Response!!");
+		}
+	}
+
+	/**
+	 * @return HttpClient to use with this HttpRequest.
+	 */
+	private HttpClient getHttpClient() {
+		final HttpParams httpParams = new BasicHttpParams();
+		httpParams.setParameter(ClientPNames.COOKIE_POLICY, CookiePolicy.RFC_2109);
+		HttpConnectionParams.setConnectionTimeout(httpParams, connectionTimeOut);
+		HttpConnectionParams.setSoTimeout(httpParams, socketTimeOut);
+		HttpConnectionParams.setSocketBufferSize(httpParams, 8192);
+
+		final SchemeRegistry registry = new SchemeRegistry();
+		registry.register(new Scheme("http", new PlainSocketFactory(), 80));
+		if(ACRA.getConfig().disableSSLCertValidation()) {
+			registry.register(new Scheme("https", (new FakeSocketFactory()), 443));
+		} else {
+			registry.register(new Scheme("https", SSLSocketFactory.getSocketFactory(), 443));
+		}
+
+		final ClientConnectionManager clientConnectionManager = new ThreadSafeClientConnManager(httpParams, registry);
+		final DefaultHttpClient httpClient = new DefaultHttpClient(clientConnectionManager, httpParams);
+
+		final HttpRequestRetryHandler retryHandler = new SocketTimeOutRetryHandler(httpParams, maxNrRetries);
+		httpClient.setHttpRequestRetryHandler(retryHandler);
+
+		return httpClient;
+	}
+
+	/**
+	 * @return Credentials to use with this HttpRequest or null if no credentials were supplied.
+	 */
+	private UsernamePasswordCredentials getCredentials() {
+		if (login != null || password != null) {
+			return new UsernamePasswordCredentials(login, password);
+		}
+
+		return null;
+	}
+
+	private HttpEntityEnclosingRequestBase getHttpRequest(URL url, Method method, String content, Type type) throws UnsupportedEncodingException, UnsupportedOperationException {
+
+		final HttpEntityEnclosingRequestBase httpRequest;
+		switch (method) {
+		case POST:
+			httpRequest = new HttpPost(url.toString());
+			break;
+		case PUT:
+			httpRequest = new HttpPut(url.toString());
+			break;
+		default:
+			throw new UnsupportedOperationException("Unknown method: " + method.name());
+		}
+
+		final UsernamePasswordCredentials creds = getCredentials();
+		if (creds != null) {
+			httpRequest.addHeader(BasicScheme.authenticate(creds, "UTF-8", false));
+		}
+
+		httpRequest.setHeader("User-Agent", "Android");
+		httpRequest.setHeader("Accept", "text/html,application/xml,application/json,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5");
+		if (extra_headers != null) {
+			for (Map.Entry<String, String> entry : extra_headers.entrySet()) {
+				httpRequest.setHeader(entry.getKey(), entry.getValue());
+			}
+		}
+
+		httpRequest.setEntity(new StringEntity(content, "UTF-8"));
+
+		return httpRequest;
+	}
+
+	/**
+	 * Converts a Map of parameters into a URL encoded Sting.
+	 * 
+	 * @param parameters
+	 *            Map of parameters to convert.
+	 * @return URL encoded String representing the parameters.
+	 * @throws UnsupportedEncodingException
+	 *             if one of the parameters couldn't be converted to UTF-8.
+	 */
+	public static String getParamsAsFormString(Map<?, ?> parameters) throws UnsupportedEncodingException {
+
+		final StringBuilder dataBfr = new StringBuilder();
+		for (final Object key : parameters.keySet()) {
+			if (dataBfr.length() != 0) {
+				dataBfr.append('&');
+			}
+			final Object preliminaryValue = parameters.get(key);
+			final Object value = (preliminaryValue == null) ? "" : preliminaryValue;
+			dataBfr.append(URLEncoder.encode(key.toString(), "UTF-8"));
+			dataBfr.append('=');
+			dataBfr.append(URLEncoder.encode(value.toString(), "UTF-8"));
+		}
+
+		return dataBfr.toString();
+	}
+
 }
\ No newline at end of file
diff --git a/src/test/java/org/acra/util/HttpRequestTest.java b/src/test/java/org/acra/util/HttpRequestTest.java
index 96c4781d..79181a8f 100644
--- a/src/test/java/org/acra/util/HttpRequestTest.java
+++ b/src/test/java/org/acra/util/HttpRequestTest.java
@@ -69,4 +69,5 @@ public void testSocketTimeOutCausesRequestToBeRetriedSeveralTimes_Issue63() thro
             Assert.fail("Should not get a SocketTimeOut when using SocketTimeOutRetryHandler");
         }
     }
+    
 }
