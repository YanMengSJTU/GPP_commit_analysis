diff --git a/acra-advanced-scheduler/src/main/java/org/acra/scheduler/RestartingAdministrator.java b/acra-advanced-scheduler/src/main/java/org/acra/scheduler/RestartingAdministrator.java
index 3806ab40..bd1a1f31 100644
--- a/acra-advanced-scheduler/src/main/java/org/acra/scheduler/RestartingAdministrator.java
+++ b/acra-advanced-scheduler/src/main/java/org/acra/scheduler/RestartingAdministrator.java
@@ -22,12 +22,16 @@
 import android.content.Context;
 import android.os.PersistableBundle;
 import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
 import com.google.auto.service.AutoService;
 import org.acra.builder.LastActivityManager;
+import org.acra.builder.ReportBuilder;
 import org.acra.config.ConfigUtils;
 import org.acra.config.CoreConfiguration;
 import org.acra.config.ReportingAdministrator;
 import org.acra.config.SchedulerConfiguration;
+import org.acra.data.CrashReportData;
 import org.acra.plugins.HasConfigPlugin;
 
 /**
@@ -42,18 +46,36 @@ public RestartingAdministrator() {
         super(SchedulerConfiguration.class);
     }
 
+    @Override
+    public boolean shouldStartCollecting(@NonNull Context context, @NonNull CoreConfiguration config, @NonNull ReportBuilder reportBuilder) {
+        return true;
+    }
+
+    @Override
+    public boolean shouldSendReport(@NonNull Context context, @NonNull CoreConfiguration config, @NonNull CrashReportData crashReportData) {
+        return true;
+    }
+
+    @Override
+    public void notifyReportDropped(@NonNull Context context, @NonNull CoreConfiguration config) {
+
+    }
+
     @Override
     public boolean shouldFinishActivity(@NonNull Context context, @NonNull CoreConfiguration config, LastActivityManager lastActivityManager) {
         if (ConfigUtils.getPluginConfiguration(config, SchedulerConfiguration.class).restartAfterCrash() && lastActivityManager.getLastActivity() != null) {
-            Thread thread = new Thread(() -> {
-                try {
-                    JobScheduler scheduler = (JobScheduler) context.getSystemService(Context.JOB_SCHEDULER_SERVICE);
-                    assert scheduler != null;
-                    PersistableBundle extras = new PersistableBundle();
-                    extras.putString(RestartingAdministrator.EXTRA_LAST_ACTIVITY, lastActivityManager.getLastActivity().getClass().getName());
-                    scheduler.schedule(new JobInfo.Builder(0, new ComponentName(context, RestartingService.class)).setExtras(extras).build());
-                } catch (Exception e) {
-                    e.printStackTrace();
+            Thread thread = new Thread(new Runnable() {
+                @Override
+                public void run() {
+                    try {
+                        JobScheduler scheduler = (JobScheduler) context.getSystemService(Context.JOB_SCHEDULER_SERVICE);
+                        assert scheduler != null;
+                        PersistableBundle extras = new PersistableBundle();
+                        extras.putString(RestartingAdministrator.EXTRA_LAST_ACTIVITY, lastActivityManager.getLastActivity().getClass().getName());
+                        scheduler.schedule(new JobInfo.Builder(0, new ComponentName(context, RestartingService.class)).setExtras(extras).build());
+                    } catch (Exception e) {
+                        e.printStackTrace();
+                    }
                 }
             });
             thread.start();
@@ -64,4 +86,9 @@ public boolean shouldFinishActivity(@NonNull Context context, @NonNull CoreConfi
         }
         return true;
     }
+
+    @Override
+    public boolean shouldKillApplication(@NonNull Context context, @NonNull CoreConfiguration config, @NonNull ReportBuilder reportBuilder, @Nullable CrashReportData crashReportData) {
+        return true;
+    }
 }
diff --git a/acra-core/src/main/java/org/acra/builder/ReportExecutor.java b/acra-core/src/main/java/org/acra/builder/ReportExecutor.java
index 83f69985..088dd139 100644
--- a/acra-core/src/main/java/org/acra/builder/ReportExecutor.java
+++ b/acra-core/src/main/java/org/acra/builder/ReportExecutor.java
@@ -209,10 +209,13 @@ public final void execute(@NonNull final ReportBuilder reportBuilder) {
                 if (Debug.isDebuggerConnected()) {
                     //Killing a process with a debugger attached would kill the whole application including our service, so we can't do that.
                     final String warning = "Warning: Acra may behave differently with a debugger attached";
-                    new Thread(() -> {
-                        Looper.prepare();
-                        ToastSender.sendToast(context, warning, Toast.LENGTH_LONG);
-                        Looper.loop();
+                    new Thread(new Runnable() {
+                        @Override
+                        public void run() {
+                            Looper.prepare();
+                            ToastSender.sendToast(context, warning, Toast.LENGTH_LONG);
+                            Looper.loop();
+                        }
                     }).start();
                     ACRA.log.w(LOG_TAG, warning);
                 } else {
diff --git a/acra-core/src/main/java/org/acra/collector/BaseReportFieldCollector.java b/acra-core/src/main/java/org/acra/collector/BaseReportFieldCollector.java
index ce7f553a..beaf0c8c 100644
--- a/acra-core/src/main/java/org/acra/collector/BaseReportFieldCollector.java
+++ b/acra-core/src/main/java/org/acra/collector/BaseReportFieldCollector.java
@@ -82,12 +82,19 @@ public final void collect(@NonNull Context context, @NonNull CoreConfiguration c
     /**
      * Collect a ReportField
      *
-     * @param reportField the reportField to collect
-     * @param context a context
-     * @param config current Configuration
+     * @param reportField   the reportField to collect
+     * @param context       a context
+     * @param config        current Configuration
      * @param reportBuilder current ReportBuilder
-     * @param target put results here
+     * @param target        put results here
      * @throws Exception if collection failed
      */
     abstract void collect(@NonNull ReportField reportField, @NonNull Context context, @NonNull CoreConfiguration config, @NonNull ReportBuilder reportBuilder, @NonNull CrashReportData target) throws Exception;
+
+
+    @NonNull
+    @Override
+    public Order getOrder() {
+        return Order.NORMAL;
+    }
 }
diff --git a/acra-core/src/main/java/org/acra/collector/Collector.java b/acra-core/src/main/java/org/acra/collector/Collector.java
index d26137e4..4b58b802 100644
--- a/acra-core/src/main/java/org/acra/collector/Collector.java
+++ b/acra-core/src/main/java/org/acra/collector/Collector.java
@@ -18,6 +18,7 @@
 
 import android.content.Context;
 import android.support.annotation.NonNull;
+
 import org.acra.builder.ReportBuilder;
 import org.acra.config.CoreConfiguration;
 import org.acra.data.CrashReportData;
@@ -43,9 +44,7 @@
      * @return when this collector should be called compared to other collectors
      */
     @NonNull
-    default Order getOrder() {
-        return Order.NORMAL;
-    }
+    Order getOrder();
 
     enum Order {
         FIRST,
diff --git a/acra-core/src/main/java/org/acra/collector/ConfigurationCollector.java b/acra-core/src/main/java/org/acra/collector/ConfigurationCollector.java
index ee35ed00..eb505d0a 100644
--- a/acra-core/src/main/java/org/acra/collector/ConfigurationCollector.java
+++ b/acra-core/src/main/java/org/acra/collector/ConfigurationCollector.java
@@ -270,4 +270,9 @@ private JSONObject collectConfiguration(@NonNull Context context) {
             return null;
         }
     }
+
+    @Override
+    public boolean enabled(@NonNull CoreConfiguration config) {
+        return true;
+    }
 }
diff --git a/acra-core/src/main/java/org/acra/collector/CustomDataCollector.java b/acra-core/src/main/java/org/acra/collector/CustomDataCollector.java
index af5099fa..6612e9bc 100644
--- a/acra-core/src/main/java/org/acra/collector/CustomDataCollector.java
+++ b/acra-core/src/main/java/org/acra/collector/CustomDataCollector.java
@@ -43,4 +43,9 @@ public CustomDataCollector(){
     void collect(@NonNull ReportField reportField, @NonNull Context context, @NonNull CoreConfiguration config, @NonNull ReportBuilder reportBuilder, @NonNull CrashReportData target) {
         target.put(ReportField.CUSTOM_DATA, new JSONObject(reportBuilder.getCustomData()));
     }
+
+    @Override
+    public boolean enabled(@NonNull CoreConfiguration config) {
+        return true;
+    }
 }
diff --git a/acra-core/src/main/java/org/acra/collector/DeviceFeaturesCollector.java b/acra-core/src/main/java/org/acra/collector/DeviceFeaturesCollector.java
index 6064f06e..63729985 100644
--- a/acra-core/src/main/java/org/acra/collector/DeviceFeaturesCollector.java
+++ b/acra-core/src/main/java/org/acra/collector/DeviceFeaturesCollector.java
@@ -56,4 +56,9 @@ void collect(@NonNull ReportField reportField, @NonNull Context context, @NonNul
             }
             target.put(ReportField.DEVICE_FEATURES, result);
     }
+
+    @Override
+    public boolean enabled(@NonNull CoreConfiguration config) {
+        return true;
+    }
 }
diff --git a/acra-core/src/main/java/org/acra/collector/DeviceIdCollector.java b/acra-core/src/main/java/org/acra/collector/DeviceIdCollector.java
index f2bddfe3..9ffd004d 100644
--- a/acra-core/src/main/java/org/acra/collector/DeviceIdCollector.java
+++ b/acra-core/src/main/java/org/acra/collector/DeviceIdCollector.java
@@ -57,4 +57,9 @@ boolean shouldCollect(@NonNull Context context, @NonNull CoreConfiguration confi
     void collect(@NonNull ReportField reportField, @NonNull Context context, @NonNull CoreConfiguration config, @NonNull ReportBuilder reportBuilder, @NonNull CrashReportData target) throws Exception {
         target.put(ReportField.DEVICE_ID, SystemServices.getTelephonyManager(context).getDeviceId());
     }
+
+    @Override
+    public boolean enabled(@NonNull CoreConfiguration config) {
+        return true;
+    }
 }
diff --git a/acra-core/src/main/java/org/acra/collector/DisplayManagerCollector.java b/acra-core/src/main/java/org/acra/collector/DisplayManagerCollector.java
index 80fef7b1..bef610a0 100644
--- a/acra-core/src/main/java/org/acra/collector/DisplayManagerCollector.java
+++ b/acra-core/src/main/java/org/acra/collector/DisplayManagerCollector.java
@@ -233,4 +233,9 @@ private String activeFlags(SparseArray<String> flagNames, int bitfield) {
         }
         return result.toString();
     }
+
+    @Override
+    public boolean enabled(@NonNull CoreConfiguration config) {
+        return true;
+    }
 }
diff --git a/acra-core/src/main/java/org/acra/collector/DropBoxCollector.java b/acra-core/src/main/java/org/acra/collector/DropBoxCollector.java
index a42966bd..ae234122 100644
--- a/acra-core/src/main/java/org/acra/collector/DropBoxCollector.java
+++ b/acra-core/src/main/java/org/acra/collector/DropBoxCollector.java
@@ -126,4 +126,9 @@ boolean shouldCollect(@NonNull Context context, @NonNull CoreConfiguration confi
                 (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN || new PackageManagerWrapper(context).hasPermission(Manifest.permission.READ_LOGS))
                 && new SharedPreferencesFactory(context, config).create().getBoolean(ACRA.PREF_ENABLE_SYSTEM_LOGS, true);
     }
+
+    @Override
+    public boolean enabled(@NonNull CoreConfiguration config) {
+        return true;
+    }
 }
diff --git a/acra-core/src/main/java/org/acra/collector/LogCatCollector.java b/acra-core/src/main/java/org/acra/collector/LogCatCollector.java
index 903f1675..cbe611aa 100644
--- a/acra-core/src/main/java/org/acra/collector/LogCatCollector.java
+++ b/acra-core/src/main/java/org/acra/collector/LogCatCollector.java
@@ -93,7 +93,12 @@ private String collectLogCat(@NonNull CoreConfiguration config, @Nullable String
         if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Retrieving logcat output (buffer:" + (bufferName == null ? "default" : bufferName) + ")...");
 
         try {
-            return streamToString(config, process.getInputStream(), myPidStr == null ? null : s -> s.contains(myPidStr), tailCount);
+            return streamToString(config, process.getInputStream(), myPidStr == null ? null : new Predicate<String>() {
+                @Override
+                public boolean apply(String s) {
+                    return s.contains(myPidStr);
+                }
+            }, tailCount);
         } finally {
             process.destroy();
         }
@@ -140,4 +145,9 @@ private String streamToString(@NonNull CoreConfiguration config, @NonNull InputS
         }
         return reader.read();
     }
+
+    @Override
+    public boolean enabled(@NonNull CoreConfiguration config) {
+        return true;
+    }
 }
diff --git a/acra-core/src/main/java/org/acra/collector/LogFileCollector.java b/acra-core/src/main/java/org/acra/collector/LogFileCollector.java
index a3421201..b383c841 100644
--- a/acra-core/src/main/java/org/acra/collector/LogFileCollector.java
+++ b/acra-core/src/main/java/org/acra/collector/LogFileCollector.java
@@ -52,4 +52,9 @@ void collect(@NonNull ReportField reportField, @NonNull Context context, @NonNul
         target.put(ReportField.APPLICATION_LOG, new StreamReader(config.applicationLogFileDir().getFile(context, config.applicationLogFile()))
                 .setLimit(config.applicationLogFileLines()).read());
     }
+
+    @Override
+    public boolean enabled(@NonNull CoreConfiguration config) {
+        return true;
+    }
 }
diff --git a/acra-core/src/main/java/org/acra/collector/MediaCodecListCollector.java b/acra-core/src/main/java/org/acra/collector/MediaCodecListCollector.java
index 48c9100b..b34c9cd0 100644
--- a/acra-core/src/main/java/org/acra/collector/MediaCodecListCollector.java
+++ b/acra-core/src/main/java/org/acra/collector/MediaCodecListCollector.java
@@ -46,6 +46,11 @@
 @AutoService(Collector.class)
 public final class MediaCodecListCollector extends BaseReportFieldCollector {
 
+    @Override
+    public boolean enabled(@NonNull CoreConfiguration config) {
+        return true;
+    }
+
     private enum CodecType {
         AVC, H263, MPEG4, AAC
 
diff --git a/acra-core/src/main/java/org/acra/collector/MemoryInfoCollector.java b/acra-core/src/main/java/org/acra/collector/MemoryInfoCollector.java
index 09676713..d3d17692 100644
--- a/acra-core/src/main/java/org/acra/collector/MemoryInfoCollector.java
+++ b/acra-core/src/main/java/org/acra/collector/MemoryInfoCollector.java
@@ -138,4 +138,8 @@ private long getTotalInternalMemorySize() {
         return totalBlocks * blockSize;
     }
 
+    @Override
+    public boolean enabled(@NonNull CoreConfiguration config) {
+        return true;
+    }
 }
\ No newline at end of file
diff --git a/acra-core/src/main/java/org/acra/collector/PackageManagerCollector.java b/acra-core/src/main/java/org/acra/collector/PackageManagerCollector.java
index b5b4e317..02b0d5f0 100644
--- a/acra-core/src/main/java/org/acra/collector/PackageManagerCollector.java
+++ b/acra-core/src/main/java/org/acra/collector/PackageManagerCollector.java
@@ -18,6 +18,7 @@
 import android.content.Context;
 import android.content.pm.PackageInfo;
 import android.support.annotation.NonNull;
+import android.text.TextUtils;
 
 import com.google.auto.service.AutoService;
 
@@ -56,4 +57,9 @@ void collect(@NonNull ReportField reportField, @NonNull Context context, @NonNul
             }
         }
     }
+
+    @Override
+    public boolean enabled(@NonNull CoreConfiguration config) {
+        return true;
+    }
 }
diff --git a/acra-core/src/main/java/org/acra/collector/ReflectionCollector.java b/acra-core/src/main/java/org/acra/collector/ReflectionCollector.java
index 4099ff2e..d057b657 100644
--- a/acra-core/src/main/java/org/acra/collector/ReflectionCollector.java
+++ b/acra-core/src/main/java/org/acra/collector/ReflectionCollector.java
@@ -141,4 +141,9 @@ private void collectStaticGettersResults(@NonNull Class<?> someClass, @NonNull J
         final String className = context.getPackageName() + ".BuildConfig";
         return Class.forName(className);
     }
+
+    @Override
+    public boolean enabled(@NonNull CoreConfiguration config) {
+        return true;
+    }
 }
diff --git a/acra-core/src/main/java/org/acra/collector/SettingsCollector.java b/acra-core/src/main/java/org/acra/collector/SettingsCollector.java
index 2ff2099f..eb0207d1 100644
--- a/acra-core/src/main/java/org/acra/collector/SettingsCollector.java
+++ b/acra-core/src/main/java/org/acra/collector/SettingsCollector.java
@@ -103,4 +103,9 @@ private boolean isAuthorized(@NonNull CoreConfiguration config, @Nullable Field
         }
         return true;
     }
+
+    @Override
+    public boolean enabled(@NonNull CoreConfiguration config) {
+        return true;
+    }
 }
diff --git a/acra-core/src/main/java/org/acra/collector/SharedPreferencesCollector.java b/acra-core/src/main/java/org/acra/collector/SharedPreferencesCollector.java
index beb89b6e..d8e52436 100644
--- a/acra-core/src/main/java/org/acra/collector/SharedPreferencesCollector.java
+++ b/acra-core/src/main/java/org/acra/collector/SharedPreferencesCollector.java
@@ -122,4 +122,9 @@ private boolean filteredKey(@NonNull CoreConfiguration config, @NonNull String k
         }
         return false;
     }
+
+    @Override
+    public boolean enabled(@NonNull CoreConfiguration config) {
+        return true;
+    }
 }
diff --git a/acra-core/src/main/java/org/acra/collector/SimpleValuesCollector.java b/acra-core/src/main/java/org/acra/collector/SimpleValuesCollector.java
index ee1cfa61..fbeaa2bc 100644
--- a/acra-core/src/main/java/org/acra/collector/SimpleValuesCollector.java
+++ b/acra-core/src/main/java/org/acra/collector/SimpleValuesCollector.java
@@ -116,4 +116,9 @@ private static String getLocalIpAddress() throws SocketException {
         }
         return result.toString();
     }
+
+    @Override
+    public boolean enabled(@NonNull CoreConfiguration config) {
+        return true;
+    }
 }
diff --git a/acra-core/src/main/java/org/acra/collector/StacktraceCollector.java b/acra-core/src/main/java/org/acra/collector/StacktraceCollector.java
index a6933e37..2794925c 100644
--- a/acra-core/src/main/java/org/acra/collector/StacktraceCollector.java
+++ b/acra-core/src/main/java/org/acra/collector/StacktraceCollector.java
@@ -98,4 +98,9 @@ private String getStackTraceHash(@Nullable Throwable th) {
 
         return Integer.toHexString(res.toString().hashCode());
     }
+
+    @Override
+    public boolean enabled(@NonNull CoreConfiguration config) {
+        return true;
+    }
 }
diff --git a/acra-core/src/main/java/org/acra/collector/ThreadCollector.java b/acra-core/src/main/java/org/acra/collector/ThreadCollector.java
index d8839ce8..07fde70f 100644
--- a/acra-core/src/main/java/org/acra/collector/ThreadCollector.java
+++ b/acra-core/src/main/java/org/acra/collector/ThreadCollector.java
@@ -60,4 +60,9 @@ void collect(@NonNull ReportField reportField, @NonNull Context context, @NonNul
             target.put(ReportField.THREAD_DETAILS, (String) null);
         }
     }
+
+    @Override
+    public boolean enabled(@NonNull CoreConfiguration config) {
+        return true;
+    }
 }
diff --git a/acra-core/src/main/java/org/acra/collector/TimeCollector.java b/acra-core/src/main/java/org/acra/collector/TimeCollector.java
index 905c6414..ca6b72a4 100644
--- a/acra-core/src/main/java/org/acra/collector/TimeCollector.java
+++ b/acra-core/src/main/java/org/acra/collector/TimeCollector.java
@@ -80,4 +80,9 @@ boolean shouldCollect(@NonNull Context context, @NonNull CoreConfiguration confi
     private String getTimeString(@NonNull Calendar time) {
         return dateFormat.format(time.getTimeInMillis());
     }
+
+    @Override
+    public boolean enabled(@NonNull CoreConfiguration config) {
+        return true;
+    }
 }
diff --git a/acra-core/src/main/java/org/acra/config/BaseCoreConfigurationBuilder.java b/acra-core/src/main/java/org/acra/config/BaseCoreConfigurationBuilder.java
index 21d608e2..9bba1d4e 100644
--- a/acra-core/src/main/java/org/acra/config/BaseCoreConfigurationBuilder.java
+++ b/acra-core/src/main/java/org/acra/config/BaseCoreConfigurationBuilder.java
@@ -27,6 +27,8 @@
 import org.acra.plugins.ServicePluginLoader;
 import org.acra.util.StubCreator;
 
+import java.lang.reflect.InvocationHandler;
+import java.lang.reflect.Method;
 import java.util.*;
 
 import static org.acra.ACRA.LOG_TAG;
@@ -142,7 +144,12 @@ public void setReportField(@NonNull ReportField field, boolean enable) {
         }
         if (c.isInterface()) {
             ACRA.log.w(LOG_TAG, "Couldn't find ConfigurationBuilder " + c.getSimpleName() + ". ALL CALLS TO IT WILL BE IGNORED!");
-            return StubCreator.createStub(c, (proxy, method, args) -> proxy);
+            return StubCreator.createStub(c, new InvocationHandler() {
+                @Override
+                public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
+                    return proxy;
+                }
+            });
         }
         throw new IllegalArgumentException("Class " + c.getName() + " is not a registered ConfigurationBuilder");
     }
diff --git a/acra-core/src/main/java/org/acra/config/DefaultRetryPolicy.java b/acra-core/src/main/java/org/acra/config/DefaultRetryPolicy.java
index 77811b2d..747a6660 100644
--- a/acra-core/src/main/java/org/acra/config/DefaultRetryPolicy.java
+++ b/acra-core/src/main/java/org/acra/config/DefaultRetryPolicy.java
@@ -28,6 +28,11 @@
  * @since 4.9.1
  */
 public class DefaultRetryPolicy implements RetryPolicy {
+
+    public DefaultRetryPolicy() {
+
+    }
+
     @Override
     public boolean shouldRetrySend(@NonNull List<ReportSender> senders, @NonNull List<FailedSender> failedSenders) {
         return (senders.size() == failedSenders.size()) && !senders.isEmpty();
diff --git a/acra-core/src/main/java/org/acra/config/ReportingAdministrator.java b/acra-core/src/main/java/org/acra/config/ReportingAdministrator.java
index 8f09851a..99c47d0b 100644
--- a/acra-core/src/main/java/org/acra/config/ReportingAdministrator.java
+++ b/acra-core/src/main/java/org/acra/config/ReportingAdministrator.java
@@ -19,6 +19,7 @@
 import android.content.Context;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
+
 import org.acra.builder.LastActivityManager;
 import org.acra.builder.ReportBuilder;
 import org.acra.data.CrashReportData;
@@ -39,9 +40,7 @@
      * @param reportBuilder the reportBuilder for the report about to be collected
      * @return if this report should be collected
      */
-    default boolean shouldStartCollecting(@NonNull Context context, @NonNull CoreConfiguration config, @NonNull ReportBuilder reportBuilder) {
-        return true;
-    }
+    boolean shouldStartCollecting(@NonNull Context context, @NonNull CoreConfiguration config, @NonNull ReportBuilder reportBuilder);
 
     /**
      * Determines if a collected report should be sent
@@ -51,9 +50,7 @@ default boolean shouldStartCollecting(@NonNull Context context, @NonNull CoreCon
      * @param crashReportData the collected report
      * @return if this report should be sent
      */
-    default boolean shouldSendReport(@NonNull Context context, @NonNull CoreConfiguration config, @NonNull CrashReportData crashReportData) {
-        return true;
-    }
+    boolean shouldSendReport(@NonNull Context context, @NonNull CoreConfiguration config, @NonNull CrashReportData crashReportData);
 
     /**
      * notifies the user about a dropped report
@@ -61,12 +58,9 @@ default boolean shouldSendReport(@NonNull Context context, @NonNull CoreConfigur
      * @param context a context
      * @param config  the current config
      */
-    default void notifyReportDropped(@NonNull Context context, @NonNull CoreConfiguration config) {
-    }
+    void notifyReportDropped(@NonNull Context context, @NonNull CoreConfiguration config);
 
-    default boolean shouldFinishActivity(@NonNull Context context, @NonNull CoreConfiguration config, LastActivityManager lastActivityManager) {
-        return true;
-    }
+    boolean shouldFinishActivity(@NonNull Context context, @NonNull CoreConfiguration config, LastActivityManager lastActivityManager);
 
     /**
      * Determines if the application should be killed
@@ -77,8 +71,6 @@ default boolean shouldFinishActivity(@NonNull Context context, @NonNull CoreConf
      * @param crashReportData the collected report
      * @return if the application should be killed
      */
-    default boolean shouldKillApplication(@NonNull Context context, @NonNull CoreConfiguration config, @NonNull ReportBuilder reportBuilder,
-                                          @Nullable CrashReportData crashReportData) {
-        return true;
-    }
+    boolean shouldKillApplication(@NonNull Context context, @NonNull CoreConfiguration config, @NonNull ReportBuilder reportBuilder,
+                                  @Nullable CrashReportData crashReportData);
 }
diff --git a/acra-core/src/main/java/org/acra/data/CrashReportData.java b/acra-core/src/main/java/org/acra/data/CrashReportData.java
index 52695f19..54d4fd8b 100644
--- a/acra-core/src/main/java/org/acra/data/CrashReportData.java
+++ b/acra-core/src/main/java/org/acra/data/CrashReportData.java
@@ -173,7 +173,7 @@ public boolean containsKey(@NonNull ReportField key) {
     @NonNull
     public String toJSON() throws JSONException {
         try {
-            return StringFormat.JSON.toFormattedString(this, ImmutableSet.empty(), "", "", false);
+            return StringFormat.JSON.toFormattedString(this, new ImmutableSet<ReportField>(), "", "", false);
         } catch (JSONException e) {
             throw e;
         } catch (Exception e) {
diff --git a/acra-core/src/main/java/org/acra/data/CrashReportDataFactory.java b/acra-core/src/main/java/org/acra/data/CrashReportDataFactory.java
index 6ce64ff7..2857024f 100644
--- a/acra-core/src/main/java/org/acra/data/CrashReportDataFactory.java
+++ b/acra-core/src/main/java/org/acra/data/CrashReportDataFactory.java
@@ -27,6 +27,7 @@
 
 import java.util.ArrayList;
 import java.util.Collections;
+import java.util.Comparator;
 import java.util.List;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.ExecutorService;
@@ -52,20 +53,23 @@ public CrashReportDataFactory(@NonNull Context context, @NonNull CoreConfigurati
         this.config = config;
         collectors = config.pluginLoader().loadEnabled(config, Collector.class);
         //noinspection Java8ListSort
-        Collections.sort(collectors, (c1, c2) -> {
-            Collector.Order o1;
-            Collector.Order o2;
-            try {
-                o1 = c1.getOrder();
-            } catch (Exception t) {
-                o1 = Collector.Order.NORMAL;
-            }
-            try {
-                o2 = c2.getOrder();
-            } catch (Exception t) {
-                o2 = Collector.Order.NORMAL;
+        Collections.sort(collectors, new Comparator<Collector>() {
+            @Override
+            public int compare(Collector c1, Collector c2) {
+                Collector.Order o1;
+                Collector.Order o2;
+                try {
+                    o1 = c1.getOrder();
+                } catch (Exception t) {
+                    o1 = Collector.Order.NORMAL;
+                }
+                try {
+                    o2 = c2.getOrder();
+                } catch (Exception t) {
+                    o2 = Collector.Order.NORMAL;
+                }
+                return o1.ordinal() - o2.ordinal();
             }
-            return o1.ordinal() - o2.ordinal();
         });
     }
 
@@ -81,16 +85,21 @@ public CrashReportData createCrashData(@NonNull final ReportBuilder builder) {
         final CrashReportData crashReportData = new CrashReportData();
         final List<Future<?>> futures = new ArrayList<>();
         for (final Collector collector : collectors) {
-            futures.add(executorService.submit(() -> {
-                //catch absolutely everything possible here so no collector obstructs the others
-                try {
-                    if(ACRA.DEV_LOGGING)ACRA.log.d(LOG_TAG, "Calling collector " + collector.getClass().getName());
-                    collector.collect(context, config, builder, crashReportData);
-                    if(ACRA.DEV_LOGGING)ACRA.log.d(LOG_TAG, "Collector " + collector.getClass().getName() + " completed");
-                }catch (CollectorException e){
-                    ACRA.log.w(LOG_TAG, e);
-                }catch (Exception t) {
-                    ACRA.log.e(LOG_TAG, "Error in collector " + collector.getClass().getSimpleName(), t);
+            futures.add(executorService.submit(new Runnable() {
+                @Override
+                public void run() {
+                    //catch absolutely everything possible here so no collector obstructs the others
+                    try {
+                        if (ACRA.DEV_LOGGING)
+                            ACRA.log.d(LOG_TAG, "Calling collector " + collector.getClass().getName());
+                        collector.collect(context, config, builder, crashReportData);
+                        if (ACRA.DEV_LOGGING)
+                            ACRA.log.d(LOG_TAG, "Collector " + collector.getClass().getName() + " completed");
+                    } catch (CollectorException e) {
+                        ACRA.log.w(LOG_TAG, e);
+                    } catch (Exception t) {
+                        ACRA.log.e(LOG_TAG, "Error in collector " + collector.getClass().getSimpleName(), t);
+                    }
                 }
             }));
         }
diff --git a/acra-core/src/main/java/org/acra/interaction/ReportInteractionExecutor.java b/acra-core/src/main/java/org/acra/interaction/ReportInteractionExecutor.java
index c5b768ca..e13de10e 100644
--- a/acra-core/src/main/java/org/acra/interaction/ReportInteractionExecutor.java
+++ b/acra-core/src/main/java/org/acra/interaction/ReportInteractionExecutor.java
@@ -18,12 +18,14 @@
 
 import android.content.Context;
 import android.support.annotation.NonNull;
+
 import org.acra.ACRA;
 import org.acra.config.CoreConfiguration;
 
 import java.io.File;
 import java.util.ArrayList;
 import java.util.List;
+import java.util.concurrent.Callable;
 import java.util.concurrent.ExecutionException;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
@@ -55,9 +57,13 @@ public boolean performInteractions(@NonNull final File reportFile) {
         final ExecutorService executorService = Executors.newCachedThreadPool();
         final List<Future<Boolean>> futures = new ArrayList<>();
         for (final ReportInteraction reportInteraction : reportInteractions) {
-            futures.add(executorService.submit(() -> {
-                if (ACRA.DEV_LOGGING) ACRA.log.d(ACRA.LOG_TAG, "Calling ReportInteraction of class " + reportInteraction.getClass().getName());
-                return reportInteraction.performInteraction(context, config, reportFile);
+            futures.add(executorService.submit(new Callable<Boolean>() {
+                @Override
+                public Boolean call() throws Exception {
+                    if (ACRA.DEV_LOGGING)
+                        ACRA.log.d(ACRA.LOG_TAG, "Calling ReportInteraction of class " + reportInteraction.getClass().getName());
+                    return reportInteraction.performInteraction(context, config, reportFile);
+                }
             }));
         }
         boolean sendReports = true;
diff --git a/acra-core/src/main/java/org/acra/legacy/ReportMigrator.java b/acra-core/src/main/java/org/acra/legacy/ReportMigrator.java
index f0cbec0b..dcd5f7ed 100644
--- a/acra-core/src/main/java/org/acra/legacy/ReportMigrator.java
+++ b/acra-core/src/main/java/org/acra/legacy/ReportMigrator.java
@@ -80,7 +80,12 @@ void migrate() {
         if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Looking for error files in " + dir.getAbsolutePath());
 
         // Filter for ".stacktrace" files
-        final FilenameFilter filter = (dir1, name) -> name.endsWith(ACRAConstants.REPORTFILE_EXTENSION);
+        final FilenameFilter filter = new FilenameFilter() {
+            @Override
+            public boolean accept(File dir1, String name) {
+                return name.endsWith(ACRAConstants.REPORTFILE_EXTENSION);
+            }
+        };
         final File[] result = dir.listFiles(filter);
         return (result == null) ? new File[0] : result;
     }
diff --git a/acra-core/src/main/java/org/acra/plugins/Plugin.java b/acra-core/src/main/java/org/acra/plugins/Plugin.java
index de69143c..8f0f1b89 100644
--- a/acra-core/src/main/java/org/acra/plugins/Plugin.java
+++ b/acra-core/src/main/java/org/acra/plugins/Plugin.java
@@ -17,6 +17,7 @@
 package org.acra.plugins;
 
 import android.support.annotation.NonNull;
+
 import org.acra.config.CoreConfiguration;
 
 /**
@@ -32,7 +33,5 @@
      * @param config the current config
      * @return if this instance should be called
      */
-    default boolean enabled(@NonNull CoreConfiguration config) {
-        return true;
-    }
+    boolean enabled(@NonNull CoreConfiguration config);
 }
diff --git a/acra-core/src/main/java/org/acra/plugins/ServicePluginLoader.java b/acra-core/src/main/java/org/acra/plugins/ServicePluginLoader.java
index 2d449c08..e21f5157 100644
--- a/acra-core/src/main/java/org/acra/plugins/ServicePluginLoader.java
+++ b/acra-core/src/main/java/org/acra/plugins/ServicePluginLoader.java
@@ -35,12 +35,22 @@
 
     @Override
     public <T extends Plugin> List<T> load(@NonNull Class<T> clazz) {
-        return loadInternal(clazz, plugin -> true);
+        return loadInternal(clazz, new Predicate<T>() {
+            @Override
+            public boolean apply(T plugin) {
+                return true;
+            }
+        });
     }
 
     @Override
-    public <T extends Plugin> List<T> loadEnabled(@NonNull CoreConfiguration config, @NonNull Class<T> clazz) {
-        return loadInternal(clazz, plugin -> plugin.enabled(config));
+    public <T extends Plugin> List<T> loadEnabled(@NonNull final CoreConfiguration config, @NonNull Class<T> clazz) {
+        return loadInternal(clazz, new Predicate<T>() {
+            @Override
+            public boolean apply(T plugin) {
+                return plugin.enabled(config);
+            }
+        });
     }
 
     private <T extends Plugin> List<T> loadInternal(@NonNull Class<T> clazz, Predicate<T> shouldLoadPredicate) {
diff --git a/acra-core/src/main/java/org/acra/sender/JobSenderService.java b/acra-core/src/main/java/org/acra/sender/JobSenderService.java
index 758280f7..f5968e85 100644
--- a/acra-core/src/main/java/org/acra/sender/JobSenderService.java
+++ b/acra-core/src/main/java/org/acra/sender/JobSenderService.java
@@ -15,14 +15,17 @@
 @RequiresApi(api = Build.VERSION_CODES.LOLLIPOP_MR1)
 public class JobSenderService extends JobService {
     @Override
-    public boolean onStartJob(JobParameters params) {
+    public boolean onStartJob(final JobParameters params) {
         PersistableBundle extras = params.getExtras();
-        CoreConfiguration config = IOUtils.deserialize(CoreConfiguration.class, extras.getString(LegacySenderService.EXTRA_ACRA_CONFIG));
-        boolean onlySilent = extras.getBoolean(LegacySenderService.EXTRA_ONLY_SEND_SILENT_REPORTS);
+        final CoreConfiguration config = IOUtils.deserialize(CoreConfiguration.class, extras.getString(LegacySenderService.EXTRA_ACRA_CONFIG));
+        final boolean onlySilent = extras.getBoolean(LegacySenderService.EXTRA_ONLY_SEND_SILENT_REPORTS);
         if (config != null) {
-            new Thread(() -> {
-                new SendingConductor(this, config).sendReports(onlySilent);
-                jobFinished(params, false);
+            new Thread(new Runnable() {
+                @Override
+                public void run() {
+                    new SendingConductor(JobSenderService.this, config).sendReports(onlySilent);
+                    JobSenderService.this.jobFinished(params, false);
+                }
             }).start();
         }
         return true;
diff --git a/acra-core/src/main/java/org/acra/sender/LegacySenderService.java b/acra-core/src/main/java/org/acra/sender/LegacySenderService.java
index 674aab78..c5db2781 100644
--- a/acra-core/src/main/java/org/acra/sender/LegacySenderService.java
+++ b/acra-core/src/main/java/org/acra/sender/LegacySenderService.java
@@ -34,9 +34,12 @@ public int onStartCommand(Intent intent, int flags, int startId) {
         if (intent.hasExtra(EXTRA_ACRA_CONFIG)) {
             final boolean onlySendSilentReports = intent.getBooleanExtra(EXTRA_ONLY_SEND_SILENT_REPORTS, false);
             final CoreConfiguration config = (CoreConfiguration) intent.getSerializableExtra(EXTRA_ACRA_CONFIG);
-            new Thread(() -> {
-                new SendingConductor(this, config).sendReports(onlySendSilentReports);
-                stopSelf();
+            new Thread(new Runnable() {
+                @Override
+                public void run() {
+                    new SendingConductor(LegacySenderService.this, config).sendReports(onlySendSilentReports);
+                    LegacySenderService.this.stopSelf();
+                }
             }).start();
         } else {
             if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "SenderService was started but no valid intent was delivered, will now quit");
diff --git a/acra-core/src/main/java/org/acra/sender/ReportDistributor.java b/acra-core/src/main/java/org/acra/sender/ReportDistributor.java
index ff589b5b..f8929ed2 100644
--- a/acra-core/src/main/java/org/acra/sender/ReportDistributor.java
+++ b/acra-core/src/main/java/org/acra/sender/ReportDistributor.java
@@ -118,7 +118,13 @@ private void sendCrashReport(@NonNull CrashReportData errorContent) throws Repor
             final InstanceCreator instanceCreator = new InstanceCreator();
             if (failedSenders.isEmpty()) {
                 if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Report was sent by all senders");
-            } else if (instanceCreator.create(config.retryPolicyClass(), DefaultRetryPolicy::new).shouldRetrySend(reportSenders, failedSenders)) {
+            } else if (instanceCreator.create(config.retryPolicyClass(), new InstanceCreator.Fallback<RetryPolicy>() {
+                @NonNull
+                @Override
+                public RetryPolicy get() {
+                    return new DefaultRetryPolicy();
+                }
+            }).shouldRetrySend(reportSenders, failedSenders)) {
                 final Throwable firstFailure = failedSenders.get(0).getException();
                 throw new ReportSenderException("Policy marked this task as incomplete. ACRA will try to send this report again.", firstFailure);
             } else {
diff --git a/acra-core/src/main/java/org/acra/sender/SendingConductor.java b/acra-core/src/main/java/org/acra/sender/SendingConductor.java
index 2bacdc3a..7076b15c 100644
--- a/acra-core/src/main/java/org/acra/sender/SendingConductor.java
+++ b/acra-core/src/main/java/org/acra/sender/SendingConductor.java
@@ -67,7 +67,12 @@ public void sendReports(boolean onlySendSilentReports) {
             final String toast;
             if (anyNonSilent && (toast = reportsSentCount > 0 ? config.reportSendSuccessToast() : config.reportSendFailureToast()) != null) {
                 if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "About to show " + (reportsSentCount > 0 ? "success" : "failure") + " toast");
-                new Handler(Looper.getMainLooper()).post(() -> ToastSender.sendToast(context, toast, Toast.LENGTH_LONG));
+                new Handler(Looper.getMainLooper()).post(new Runnable() {
+                    @Override
+                    public void run() {
+                        ToastSender.sendToast(context, toast, Toast.LENGTH_LONG);
+                    }
+                });
             }
         } catch (Exception e) {
             ACRA.log.e(LOG_TAG, "", e);
diff --git a/acra-core/src/main/java/org/acra/startup/StartupProcessorExecutor.java b/acra-core/src/main/java/org/acra/startup/StartupProcessorExecutor.java
index fe0478e1..af4d2e7e 100644
--- a/acra-core/src/main/java/org/acra/startup/StartupProcessorExecutor.java
+++ b/acra-core/src/main/java/org/acra/startup/StartupProcessorExecutor.java
@@ -52,40 +52,48 @@ public StartupProcessorExecutor(@NonNull final Context context, @NonNull final C
         this.fileNameParser = new CrashReportFileNameParser();
     }
 
-    public void processReports(boolean isAcraEnabled) {
+    public void processReports(final boolean isAcraEnabled) {
         final Calendar now = Calendar.getInstance();
         //application is not ready in onAttachBaseContext, so delay this. also run it on a background thread because we're doing disk I/O
-        new Handler(context.getMainLooper()).post(() -> new Thread(() -> {
-            final List<Report> reports = new ArrayList<>();
-            for (File r : reportLocator.getUnapprovedReports()) {
-                reports.add(new Report(r, false));
-            }
-            for (File r : reportLocator.getApprovedReports()) {
-                reports.add(new Report(r, true));
-            }
-            final List<StartupProcessor> startupProcessors = config.pluginLoader().loadEnabled(config, StartupProcessor.class);
-            for (StartupProcessor processor : startupProcessors) {
-                processor.processReports(context, config, reports);
-            }
-            boolean send = false;
-            for (Report report : reports) {
-                // ignore reports that were just created for now, they might be handled in another thread
-                if (fileNameParser.getTimestamp(report.getFile().getName()).before(now)) {
-                    if (report.isDelete()) {
-                        if (!report.getFile().delete()) {
-                            ACRA.log.w(LOG_TAG, "Could not delete report " + report.getFile());
+        new Handler(context.getMainLooper()).post(new Runnable() {
+            @Override
+            public void run() {
+                new Thread(new Runnable() {
+                    @Override
+                    public void run() {
+                        final List<Report> reports = new ArrayList<>();
+                        for (File r : reportLocator.getUnapprovedReports()) {
+                            reports.add(new Report(r, false));
+                        }
+                        for (File r : reportLocator.getApprovedReports()) {
+                            reports.add(new Report(r, true));
+                        }
+                        final List<StartupProcessor> startupProcessors = config.pluginLoader().loadEnabled(config, StartupProcessor.class);
+                        for (StartupProcessor processor : startupProcessors) {
+                            processor.processReports(context, config, reports);
+                        }
+                        boolean send = false;
+                        for (Report report : reports) {
+                            // ignore reports that were just created for now, they might be handled in another thread
+                            if (fileNameParser.getTimestamp(report.getFile().getName()).before(now)) {
+                                if (report.isDelete()) {
+                                    if (!report.getFile().delete()) {
+                                        ACRA.log.w(LOG_TAG, "Could not delete report " + report.getFile());
+                                    }
+                                } else if (report.isApproved()) {
+                                    send = true;
+                                } else if (report.isApprove() && isAcraEnabled) {
+                                    new ReportInteractionExecutor(context, config).performInteractions(report.getFile());
+                                }
+                            }
+                        }
+                        if (send && isAcraEnabled) {
+                            schedulerStarter.scheduleReports(null, false);
                         }
-                    } else if (report.isApproved()) {
-                        send = true;
-                    } else if (report.isApprove() && isAcraEnabled) {
-                        new ReportInteractionExecutor(context, config).performInteractions(report.getFile());
                     }
-                }
-            }
-            if(send && isAcraEnabled) {
-                schedulerStarter.scheduleReports(null, false);
+                }).start();
             }
-        }).start());
+        });
 
     }
 }
diff --git a/acra-core/src/main/java/org/acra/startup/UnapprovedStartupProcessor.java b/acra-core/src/main/java/org/acra/startup/UnapprovedStartupProcessor.java
index f2a716b0..0ad50fba 100644
--- a/acra-core/src/main/java/org/acra/startup/UnapprovedStartupProcessor.java
+++ b/acra-core/src/main/java/org/acra/startup/UnapprovedStartupProcessor.java
@@ -24,6 +24,7 @@
 
 import java.util.ArrayList;
 import java.util.Collections;
+import java.util.Comparator;
 import java.util.List;
 
 /**
@@ -43,7 +44,12 @@ public void processReports(@NonNull Context context, @NonNull CoreConfiguration
             }
             if (!sort.isEmpty()) {
                 final LastModifiedComparator comparator = new LastModifiedComparator();
-                Collections.sort(sort, (r1, r2) -> comparator.compare(r1.getFile(), r2.getFile()));
+                Collections.sort(sort, new Comparator<Report>() {
+                    @Override
+                    public int compare(Report r1, Report r2) {
+                        return comparator.compare(r1.getFile(), r2.getFile());
+                    }
+                });
                 if(config.deleteUnapprovedReportsOnApplicationStart()) {
                     for (int i = 0; i < sort.size() - 1; i++) {
                         sort.get(i).delete();
@@ -53,4 +59,9 @@ public void processReports(@NonNull Context context, @NonNull CoreConfiguration
             }
         }
     }
+
+    @Override
+    public boolean enabled(@NonNull CoreConfiguration config) {
+        return true;
+    }
 }
diff --git a/acra-core/src/main/java/org/acra/util/ApplicationStartupProcessor.java b/acra-core/src/main/java/org/acra/util/ApplicationStartupProcessor.java
index af2a7f00..c3404fd7 100644
--- a/acra-core/src/main/java/org/acra/util/ApplicationStartupProcessor.java
+++ b/acra-core/src/main/java/org/acra/util/ApplicationStartupProcessor.java
@@ -43,9 +43,12 @@ public ApplicationStartupProcessor(@NonNull Context context, @NonNull CoreConfig
 
     public void checkReports() {
         //run it on a background thread because we're doing disk I/O
-        new Thread(() -> {
-            if (config.deleteOldUnsentReportsOnApplicationStart()) {
-                deleteUnsentReportsFromOldAppVersion();
+        new Thread(new Runnable() {
+            @Override
+            public void run() {
+                if (config.deleteOldUnsentReportsOnApplicationStart()) {
+                    ApplicationStartupProcessor.this.deleteUnsentReportsFromOldAppVersion();
+                }
             }
         }).start();
     }
diff --git a/acra-core/src/main/java/org/acra/util/ProcessFinisher.java b/acra-core/src/main/java/org/acra/util/ProcessFinisher.java
index 2f137da3..756bbf23 100644
--- a/acra-core/src/main/java/org/acra/util/ProcessFinisher.java
+++ b/acra-core/src/main/java/org/acra/util/ProcessFinisher.java
@@ -60,11 +60,14 @@ public void endApplication() {
     public void finishLastActivity(@Nullable Thread uncaughtExceptionThread) {
         if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Finishing activities prior to killing the Process");
         boolean wait = false;
-        for(Activity activity : lastActivityManager.getLastActivities()) {
+        for(final Activity activity : lastActivityManager.getLastActivities()) {
             final boolean isMainThread = uncaughtExceptionThread == activity.getMainLooper().getThread();
-            final Runnable finisher = () -> {
-                activity.finish();
-                if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Finished " + activity.getClass());
+            final Runnable finisher = new Runnable() {
+                @Override
+                public void run() {
+                    activity.finish();
+                    if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Finished " + activity.getClass());
+                }
             };
             if (isMainThread) {
                 finisher.run();
diff --git a/acra-core/src/main/java/org/acra/util/StreamReader.java b/acra-core/src/main/java/org/acra/util/StreamReader.java
index 29d404e4..c77f81c3 100644
--- a/acra-core/src/main/java/org/acra/util/StreamReader.java
+++ b/acra-core/src/main/java/org/acra/util/StreamReader.java
@@ -86,13 +86,13 @@ public String read() throws IOException {
                 return text;
             }
             final String[] lines = text.split("\\r?\\n");
-            if(lines.length <= limit){
+            if (lines.length <= limit) {
                 return text;
             }
             return TextUtils.join("\n", Arrays.copyOfRange(lines, lines.length - limit, lines.length));
         }
         final String[] lines = text.split("\\r?\\n");
-        final List<String> buffer = limit == NO_LIMIT ? new LinkedList<>() : new BoundedLinkedList<>(limit);
+        final List<String> buffer = limit == NO_LIMIT ? new LinkedList<String>() : new BoundedLinkedList<String>(limit);
         for (String line : lines) {
             if (filter.apply(line)) {
                 buffer.add(line);
diff --git a/acra-core/src/main/java/org/acra/util/StubCreator.java b/acra-core/src/main/java/org/acra/util/StubCreator.java
index 72e29543..31ea09e5 100644
--- a/acra-core/src/main/java/org/acra/util/StubCreator.java
+++ b/acra-core/src/main/java/org/acra/util/StubCreator.java
@@ -5,6 +5,7 @@
 import org.acra.ErrorReporter;
 
 import java.lang.reflect.InvocationHandler;
+import java.lang.reflect.Method;
 import java.lang.reflect.Proxy;
 
 public final class StubCreator {
@@ -13,10 +14,13 @@ private StubCreator() {
 
     @NonNull
     public static ErrorReporter createErrorReporterStub() {
-        return createStub(ErrorReporter.class, (proxy, method, args) -> {
-            String message = ACRA.isACRASenderServiceProcess() ? "in SenderService process" : "before ACRA#init (if you did call #init, check if your configuration is valid)";
-            ACRA.log.w(ACRA.LOG_TAG, String.format("ErrorReporter#%s called %s. THIS CALL WILL BE IGNORED!", method.getName(), message));
-            return null;
+        return createStub(ErrorReporter.class, new InvocationHandler() {
+            @Override
+            public Object invoke(Object proxy, Method method, Object[] args) throws Throwable {
+                String message = ACRA.isACRASenderServiceProcess() ? "in SenderService process" : "before ACRA#init (if you did call #init, check if your configuration is valid)";
+                ACRA.log.w(ACRA.LOG_TAG, String.format("ErrorReporter#%s called %s. THIS CALL WILL BE IGNORED!", method.getName(), message));
+                return null;
+            }
         });
     }
 
diff --git a/acra-core/src/test/java/org/acra/ACRATest.java b/acra-core/src/test/java/org/acra/ACRATest.java
index 09d7c12d..ef6b2137 100644
--- a/acra-core/src/test/java/org/acra/ACRATest.java
+++ b/acra-core/src/test/java/org/acra/ACRATest.java
@@ -19,6 +19,9 @@
 import android.app.Application;
 import android.content.Context;
 import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import org.acra.builder.LastActivityManager;
 import org.acra.builder.ReportBuilder;
 import org.acra.collector.StacktraceCollector;
 import org.acra.config.CoreConfiguration;
@@ -32,7 +35,9 @@
 import org.robolectric.RuntimeEnvironment;
 
 import static org.hamcrest.Matchers.containsString;
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertThat;
+import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.fail;
 
 /**
  * @author lukas
@@ -58,12 +63,37 @@ public void failing() {
     }
 
     public static class TestAdministrator implements ReportingAdministrator {
+        @Override
+        public boolean shouldStartCollecting(@NonNull Context context, @NonNull CoreConfiguration config, @NonNull ReportBuilder reportBuilder) {
+            return true;
+        }
+
         @Override
         public boolean shouldSendReport(@NonNull Context context, @NonNull CoreConfiguration config, @NonNull CrashReportData crashReportData) {
             assertTrue(crashReportData.containsKey(ReportField.STACK_TRACE));
             assertThat(crashReportData.getString(ReportField.STACK_TRACE), containsString("RuntimeException"));
             return false;
         }
+
+        @Override
+        public void notifyReportDropped(@NonNull Context context, @NonNull CoreConfiguration config) {
+
+        }
+
+        @Override
+        public boolean shouldFinishActivity(@NonNull Context context, @NonNull CoreConfiguration config, LastActivityManager lastActivityManager) {
+            return true;
+        }
+
+        @Override
+        public boolean shouldKillApplication(@NonNull Context context, @NonNull CoreConfiguration config, @NonNull ReportBuilder reportBuilder, @Nullable CrashReportData crashReportData) {
+            return true;
+        }
+
+        @Override
+        public boolean enabled(@NonNull CoreConfiguration config) {
+            return true;
+        }
     }
 
     public static class FailingTestAdministrator implements ReportingAdministrator {
@@ -72,5 +102,30 @@ public boolean shouldStartCollecting(@NonNull Context context, @NonNull CoreConf
             fail("Intended failure to test if assertions work");
             return false;
         }
+
+        @Override
+        public boolean shouldSendReport(@NonNull Context context, @NonNull CoreConfiguration config, @NonNull CrashReportData crashReportData) {
+            return true;
+        }
+
+        @Override
+        public void notifyReportDropped(@NonNull Context context, @NonNull CoreConfiguration config) {
+
+        }
+
+        @Override
+        public boolean shouldFinishActivity(@NonNull Context context, @NonNull CoreConfiguration config, LastActivityManager lastActivityManager) {
+            return true;
+        }
+
+        @Override
+        public boolean shouldKillApplication(@NonNull Context context, @NonNull CoreConfiguration config, @NonNull ReportBuilder reportBuilder, @Nullable CrashReportData crashReportData) {
+            return true;
+        }
+
+        @Override
+        public boolean enabled(@NonNull CoreConfiguration config) {
+            return true;
+        }
     }
 }
\ No newline at end of file
diff --git a/acra-limiter/src/main/java/org/acra/config/LimitingReportAdministrator.java b/acra-limiter/src/main/java/org/acra/config/LimitingReportAdministrator.java
index cb245408..07abc766 100644
--- a/acra-limiter/src/main/java/org/acra/config/LimitingReportAdministrator.java
+++ b/acra-limiter/src/main/java/org/acra/config/LimitingReportAdministrator.java
@@ -21,9 +21,11 @@
 import android.os.Handler;
 import android.os.Looper;
 import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 import android.widget.Toast;
 import com.google.auto.service.AutoService;
 import org.acra.ACRA;
+import org.acra.builder.LastActivityManager;
 import org.acra.builder.ReportBuilder;
 import org.acra.data.CrashReportData;
 import org.acra.file.ReportLocator;
@@ -112,11 +114,14 @@ public void notifyReportDropped(@NonNull final Context context, @NonNull final C
                 ToastSender.sendToast(context, limiterConfiguration.ignoredCrashToast(), Toast.LENGTH_LONG);
                 final Looper looper = Looper.myLooper();
                 if (looper != null) {
-                    new Handler(looper).postDelayed(() -> {
-                        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {
-                            looper.quitSafely();
-                        } else {
-                            looper.quit();
+                    new Handler(looper).postDelayed(new Runnable() {
+                        @Override
+                        public void run() {
+                            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {
+                                looper.quitSafely();
+                            } else {
+                                looper.quit();
+                            }
                         }
                     }, 4000);
                     Looper.loop();
@@ -134,6 +139,16 @@ public void notifyReportDropped(@NonNull final Context context, @NonNull final C
         }
     }
 
+    @Override
+    public boolean shouldFinishActivity(@NonNull Context context, @NonNull CoreConfiguration config, LastActivityManager lastActivityManager) {
+        return true;
+    }
+
+    @Override
+    public boolean shouldKillApplication(@NonNull Context context, @NonNull CoreConfiguration config, @NonNull ReportBuilder reportBuilder, @Nullable CrashReportData crashReportData) {
+        return true;
+    }
+
     @NonNull
     private LimiterData loadLimiterData(@NonNull Context context, @NonNull LimiterConfiguration limiterConfiguration) throws IOException {
         final LimiterData limiterData = LimiterData.load(context);
diff --git a/build.gradle b/build.gradle
index 9d7e1b6e..92e3640d 100644
--- a/build.gradle
+++ b/build.gradle
@@ -110,10 +110,10 @@ subprojects {
                     }
                 }
             }
-            compileOptions {
-                sourceCompatibility = JavaVersion.VERSION_1_8
-                targetCompatibility = JavaVersion.VERSION_1_8
-            }
+//            compileOptions {
+//                sourceCompatibility = JavaVersion.VERSION_1_8
+//                targetCompatibility = JavaVersion.VERSION_1_8
+//            }
         }
 
         dependencies {
