diff --git a/pom.xml b/pom.xml
index 22efc0b4..bdf683e6 100644
--- a/pom.xml
+++ b/pom.xml
@@ -39,7 +39,7 @@
 
 	<properties>
 		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
-        <android.version>14</android.version>
+        <android.version>17</android.version>
 	</properties>
 
 	<dependencies>
@@ -53,13 +53,12 @@
             NB The AndroidAPI dependency is included below to allow test execution and javadoc generation.
         -->
         <dependency>
-            <groupId>com.google.android</groupId>
+            <groupId>android</groupId>
             <artifactId>android</artifactId>
-            <version>4.1.1.4</version>
-            <type>jar</type>
+            <version>4.2.2_r2</version>
             <scope>provided</scope>
         </dependency>
-		<dependency>
+        <dependency>
 			<groupId>junit</groupId>
 			<artifactId>junit</artifactId>
 			<version>4.8.1</version>
diff --git a/src/main/java/org/acra/util/HttpRequest.java b/src/main/java/org/acra/util/HttpRequest.java
index f3e13011..eb5654aa 100644
--- a/src/main/java/org/acra/util/HttpRequest.java
+++ b/src/main/java/org/acra/util/HttpRequest.java
@@ -226,7 +226,7 @@ private HttpClient getHttpClient() {
                 registry.register(new Scheme("https", SSLSocketFactory.getSocketFactory(), 443));
             }
         } else {
-            registry.register(new Scheme("https", SSLSocketFactory.getSocketFactory(), 443));
+            registry.register(new Scheme("https", new TlsSniSocketFactory(), 443));
         }
 
         final ClientConnectionManager clientConnectionManager = new SingleClientConnManager(httpParams, registry);
diff --git a/src/main/java/org/acra/util/TlsSniSocketFactory.java b/src/main/java/org/acra/util/TlsSniSocketFactory.java
new file mode 100644
index 00000000..59b6f69d
--- /dev/null
+++ b/src/main/java/org/acra/util/TlsSniSocketFactory.java
@@ -0,0 +1,94 @@
+/*
+ * This class was copied from this blog post:
+ * http://blog.dev001.net/post/67082904181/android-using-sni-and-tlsv1-2-with-apache-httpclient
+ * Thanks go to Dev001!
+ */
+package org.acra.util;
+
+import android.annotation.TargetApi;
+import android.net.SSLCertificateSocketFactory;
+import android.os.Build;
+import android.util.Log;
+
+import org.apache.http.conn.scheme.LayeredSocketFactory;
+import org.apache.http.conn.ssl.StrictHostnameVerifier;
+import org.apache.http.params.HttpParams;
+
+import java.io.IOException;
+import java.net.InetAddress;
+import java.net.Socket;
+
+import javax.net.ssl.HostnameVerifier;
+import javax.net.ssl.SSLPeerUnverifiedException;
+import javax.net.ssl.SSLSession;
+import javax.net.ssl.SSLSocket;
+
+@TargetApi(Build.VERSION_CODES.JELLY_BEAN_MR1)
+public class TlsSniSocketFactory implements LayeredSocketFactory {
+    private static final String TAG =  TlsSniSocketFactory.class.getSimpleName();
+
+    final static HostnameVerifier hostnameVerifier = new StrictHostnameVerifier();
+
+
+    // Plain TCP/IP (layer below TLS)
+
+    @Override
+    public Socket connectSocket(Socket s, String host, int port, InetAddress localAddress, int localPort, HttpParams params) throws IOException {
+        return null;
+    }
+
+    @Override
+    public Socket createSocket() throws IOException {
+        return null;
+    }
+
+    @Override
+    public boolean isSecure(Socket s) throws IllegalArgumentException {
+        if (s instanceof SSLSocket)
+            return ((SSLSocket)s).isConnected();
+        return false;
+    }
+
+
+    // TLS layer
+
+    @Override
+    public Socket createSocket(Socket plainSocket, String host, int port, boolean autoClose) throws IOException {
+        if (autoClose) {
+            // we don't need the plainSocket
+            plainSocket.close();
+        }
+
+        // create and connect SSL socket, but don't do hostname/certificate verification yet
+        SSLCertificateSocketFactory sslSocketFactory = (SSLCertificateSocketFactory)SSLCertificateSocketFactory.getDefault(0);
+        SSLSocket ssl = (SSLSocket)sslSocketFactory.createSocket(InetAddress.getByName(host), port);
+
+        // enable TLSv1.1/1.2 if available
+        // (see https://github.com/rfc2822/davdroid/issues/229)
+        ssl.setEnabledProtocols(ssl.getSupportedProtocols());
+
+        // set up SNI before the handshake
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
+            Log.i(TAG, "Setting SNI hostname");
+            sslSocketFactory.setHostname(ssl, host);
+        } else {
+            Log.d(TAG, "No documented SNI support on Android <4.2, trying with reflection");
+            try {
+                java.lang.reflect.Method setHostnameMethod = ssl.getClass().getMethod("setHostname", String.class);
+                setHostnameMethod.invoke(ssl, host);
+            } catch (Exception e) {
+                Log.w(TAG, "SNI not useable", e);
+            }
+        }
+
+        // verify hostname and certificate
+        SSLSession session = ssl.getSession();
+        if (!hostnameVerifier.verify(host, session))
+            throw new SSLPeerUnverifiedException("Cannot verify hostname: " + host);
+
+        Log.i(TAG, "Established " + session.getProtocol() + " connection with " + session.getPeerHost() +
+                " using " + session.getCipherSuite());
+
+        return ssl;
+    }
+}
