diff --git a/acra-core/src/main/java/org/acra/attachment/DefaultAttachmentProvider.java b/acra-core/src/main/java/org/acra/attachment/DefaultAttachmentProvider.java
index dcf4fb0b..42e67488 100644
--- a/acra-core/src/main/java/org/acra/attachment/DefaultAttachmentProvider.java
+++ b/acra-core/src/main/java/org/acra/attachment/DefaultAttachmentProvider.java
@@ -37,6 +37,10 @@
 
 public class DefaultAttachmentProvider implements AttachmentUriProvider {
 
+
+    public DefaultAttachmentProvider() {
+    }
+
     /**
      * {@inheritDoc}
      */
diff --git a/acra-http/src/main/java/org/acra/security/KeyStoreHelper.java b/acra-http/src/main/java/org/acra/security/KeyStoreHelper.java
index b2eeceb8..d5b7df7a 100644
--- a/acra-http/src/main/java/org/acra/security/KeyStoreHelper.java
+++ b/acra-http/src/main/java/org/acra/security/KeyStoreHelper.java
@@ -41,24 +41,31 @@ private KeyStoreHelper() {
 
     /**
      * try to get the keystore
+     *
      * @param context a context
-     * @param config the configuration
+     * @param config  the configuration
      * @return the keystore, or null if none provided / failure
      */
     @Nullable
     public static KeyStore getKeyStore(@NonNull Context context, @NonNull CoreConfiguration config) {
         final HttpSenderConfiguration senderConfiguration = ConfigUtils.getPluginConfiguration(config, HttpSenderConfiguration.class);
         final InstanceCreator instanceCreator = new InstanceCreator();
-        KeyStore keyStore = instanceCreator.create(senderConfiguration.keyStoreFactoryClass(), NoKeyStoreFactory::new).create(context);
-        if(keyStore == null) {
+        KeyStore keyStore = instanceCreator.create(senderConfiguration.keyStoreFactoryClass(), new InstanceCreator.Fallback<KeyStoreFactory>() {
+            @NonNull
+            @Override
+            public KeyStoreFactory get() {
+                return new NoKeyStoreFactory();
+            }
+        }).create(context);
+        if (keyStore == null) {
             //either users factory did not create a keystore, or the configuration is default {@link NoKeyStoreFactory}
             final int certificateRes = senderConfiguration.resCertificate();
             final String certificatePath = senderConfiguration.certificatePath();
             final String certificateType = senderConfiguration.certificateType();
-            if(certificateRes != ACRAConstants.DEFAULT_RES_VALUE){
+            if (certificateRes != ACRAConstants.DEFAULT_RES_VALUE) {
                 keyStore = new ResourceKeyStoreFactory(certificateType, certificateRes).create(context);
-            }else if(!certificatePath.equals(ACRAConstants.DEFAULT_STRING_VALUE)){
-                if(certificatePath.startsWith(ASSET_PREFIX)) {
+            } else if (!certificatePath.equals(ACRAConstants.DEFAULT_STRING_VALUE)) {
+                if (certificatePath.startsWith(ASSET_PREFIX)) {
                     keyStore = new AssetKeyStoreFactory(certificateType, certificatePath.substring(ASSET_PREFIX.length())).create(context);
                 } else {
                     keyStore = new FileKeyStoreFactory(certificateType, certificatePath).create(context);
diff --git a/acra-http/src/main/java/org/acra/security/NoKeyStoreFactory.java b/acra-http/src/main/java/org/acra/security/NoKeyStoreFactory.java
index da833424..4e3d21bb 100644
--- a/acra-http/src/main/java/org/acra/security/NoKeyStoreFactory.java
+++ b/acra-http/src/main/java/org/acra/security/NoKeyStoreFactory.java
@@ -28,6 +28,11 @@
  * @since 4.9.0
  */
 public class NoKeyStoreFactory implements KeyStoreFactory {
+
+
+    public NoKeyStoreFactory() {
+    }
+
     @Nullable
     @Override
     public KeyStore create(@NonNull Context context) {
diff --git a/acra-http/src/main/java/org/acra/sender/HttpSender.java b/acra-http/src/main/java/org/acra/sender/HttpSender.java
index c3f6e42d..382bdb4e 100644
--- a/acra-http/src/main/java/org/acra/sender/HttpSender.java
+++ b/acra-http/src/main/java/org/acra/sender/HttpSender.java
@@ -20,9 +20,11 @@
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 import android.util.Pair;
+
 import org.acra.ACRA;
 import org.acra.ACRAConstants;
 import org.acra.ReportField;
+import org.acra.attachment.AttachmentUriProvider;
 import org.acra.attachment.DefaultAttachmentProvider;
 import org.acra.config.ConfigUtils;
 import org.acra.config.CoreConfiguration;
@@ -121,7 +123,13 @@ public void send(@NonNull Context context, @NonNull CrashReportData report) thro
             final String password = mPassword != null ? mPassword : isNull(httpConfig.basicAuthPassword()) ? null : httpConfig.basicAuthPassword();
 
             final InstanceCreator instanceCreator = new InstanceCreator();
-            final List<Uri> uris = instanceCreator.create(config.attachmentUriProvider(), DefaultAttachmentProvider::new).getAttachments(context, config);
+            final List<Uri> uris = instanceCreator.create(config.attachmentUriProvider(), new InstanceCreator.Fallback<AttachmentUriProvider>() {
+                @NonNull
+                @Override
+                public AttachmentUriProvider get() {
+                    return new DefaultAttachmentProvider();
+                }
+            }).getAttachments(context, config);
 
             // Generate report body depending on requested type
             final String reportAsString = convertToString(report, mType);
diff --git a/annotationprocessor/src/main/java/org/acra/processor/creator/ClassCreator.java b/annotationprocessor/src/main/java/org/acra/processor/creator/ClassCreator.java
index a3132f63..d17143f4 100644
--- a/annotationprocessor/src/main/java/org/acra/processor/creator/ClassCreator.java
+++ b/annotationprocessor/src/main/java/org/acra/processor/creator/ClassCreator.java
@@ -17,24 +17,39 @@
 package org.acra.processor.creator;
 
 import android.support.annotation.NonNull;
+
 import com.google.auto.common.MoreTypes;
 import com.google.auto.service.AutoService;
-import com.squareup.javapoet.*;
+import com.squareup.javapoet.AnnotationSpec;
+import com.squareup.javapoet.ClassName;
+import com.squareup.javapoet.CodeBlock;
+import com.squareup.javapoet.MethodSpec;
+import com.squareup.javapoet.ParameterSpec;
+import com.squareup.javapoet.TypeName;
+import com.squareup.javapoet.TypeSpec;
+
 import org.acra.annotation.Configuration;
 import org.acra.config.ConfigurationBuilder;
-import org.acra.processor.element.*;
+import org.acra.processor.element.BuilderElement;
+import org.acra.processor.element.ConfigElement;
+import org.acra.processor.element.Element;
+import org.acra.processor.element.ElementFactory;
+import org.acra.processor.element.ValidatedElement;
 import org.acra.processor.util.Strings;
 import org.acra.processor.util.Types;
 
+import java.io.IOException;
+import java.io.Serializable;
+import java.util.List;
+
 import javax.annotation.processing.ProcessingEnvironment;
 import javax.lang.model.element.Modifier;
 import javax.lang.model.element.TypeElement;
 import javax.lang.model.type.MirroredTypeException;
-import java.io.IOException;
-import java.io.Serializable;
-import java.util.List;
 
-import static org.acra.processor.util.Strings.*;
+import static org.acra.processor.util.Strings.PACKAGE;
+import static org.acra.processor.util.Strings.PARAM_0;
+import static org.acra.processor.util.Strings.VAR_ANNOTATION;
 
 /**
  * @author F43nd1r
@@ -146,7 +161,11 @@ private void createFactoryClass() throws IOException {
                 .addMethod(Types.overriding(Types.getOnlyMethod(processingEnv, Strings.CONFIGURATION_BUILDER_FACTORY))
                         .addAnnotation(Types.NON_NULL)
                         .addStatement("return new $T($L)", ClassName.get(PACKAGE, builderName), PARAM_0)
-                        .build())
+                        .build()).addMethod(
+                        Types.overriding(Types.getOnlyMethod(processingEnv, "org.acra.plugins.Plugin"))
+                                .addStatement("return true", "true")
+                                .build()
+                )
                 .build());
     }
 }
