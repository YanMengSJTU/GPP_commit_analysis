diff --git a/NOTICE b/NOTICE
index 88eed4e6..97bd4cb3 100644
--- a/NOTICE
+++ b/NOTICE
@@ -1,5 +1,7 @@
 Application Crash Reporting for Android
-Copyright 2010 Emmanuel Astier & Kevin Gaudin
+Copyright (c) 2013 Kevin Gaudin
+http://acra.ch
 
-This product includes software developed at
-ACRA (http://acra.googlecode.com/).
\ No newline at end of file
+This product is licensed under the terms of the Apache Software License 2.0. See the LICENSE file for the full license text.
+
+This product includes software (package org.acra.jraf.android.util.activitylifecyclecallbackscompat) developed at JRAF, Copyright (C) 2013 Benoit 'BoD' Lubek (BoD@JRAF.org), ASL 2.0.
diff --git a/README.md b/README.md
index 697dac4c..09a73420 100644
--- a/README.md
+++ b/README.md
@@ -1,3 +1,4 @@
+<a href='http://www.pledgie.com/campaigns/18789'><img alt='Click here to lend your support to: ACRA - Application Crash Reports for Android and make a donation at www.pledgie.com !' src='http://www.pledgie.com/campaigns/18789.png?skin_name=chrome' border='0' /></a>
 
 Please tell us how you use ACRA
 ===============================
diff --git a/pom.xml b/pom.xml
index 33677d97..6e6ee52d 100644
--- a/pom.xml
+++ b/pom.xml
@@ -7,7 +7,7 @@
     </parent>
 	<groupId>ch.acra</groupId>
 	<artifactId>acra</artifactId>
-	<version>4.4.1-SNAPSHOT</version>
+	<version>4.5.0-alpha-1</version>
 
 	<name>Application Crash Report for Android</name>
 
@@ -39,7 +39,7 @@
 
 	<properties>
 		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
-        <android.version>3</android.version>
+        <android.version>14</android.version>
 	</properties>
 
 	<dependencies>
@@ -55,7 +55,7 @@
         <dependency>
             <groupId>com.google.android</groupId>
             <artifactId>android</artifactId>
-            <version>1.5_r4</version>
+            <version>4.1.1.4</version>
             <type>jar</type>
             <scope>provided</scope>
         </dependency>
diff --git a/src/main/java/org/acra/ACRA.java b/src/main/java/org/acra/ACRA.java
index 32d5119a..b75b3a84 100644
--- a/src/main/java/org/acra/ACRA.java
+++ b/src/main/java/org/acra/ACRA.java
@@ -116,7 +116,8 @@
     public static void init(Application app) {
 
         if (mApplication != null) {
-            throw new IllegalStateException("ACRA#init called more than once");
+            log.w(LOG_TAG, "ACRA#init called more than once. Won't do anything more.");
+            return;
         }
 
         mApplication = app;
@@ -136,8 +137,7 @@ public static void init(Application app) {
 
             // Initialize ErrorReporter with all required data
             final boolean enableAcra = !shouldDisableACRA(prefs);
-            final ErrorReporter errorReporter = new ErrorReporter(mApplication.getApplicationContext(), prefs,
-                    enableAcra);
+            final ErrorReporter errorReporter = new ErrorReporter(mApplication, prefs, enableAcra);
 
             // Append ReportSenders.
             errorReporter.setDefaultReportSenders();
diff --git a/src/main/java/org/acra/ACRAConfiguration.java b/src/main/java/org/acra/ACRAConfiguration.java
index 962c43f1..b35446c7 100644
--- a/src/main/java/org/acra/ACRAConfiguration.java
+++ b/src/main/java/org/acra/ACRAConfiguration.java
@@ -15,6 +15,12 @@
  */
 package org.acra;
 
+import org.acra.annotation.ReportsCrashes;
+import org.acra.sender.HttpSender.Method;
+import org.acra.sender.HttpSender.Type;
+
+import java.lang.annotation.Annotation;
+
 import static org.acra.ACRAConstants.DEFAULT_APPLICATION_LOGFILE;
 import static org.acra.ACRAConstants.DEFAULT_APPLICATION_LOGFILE_LINES;
 import static org.acra.ACRAConstants.DEFAULT_CONNECTION_TIMEOUT;
@@ -37,12 +43,6 @@
 import static org.acra.ACRAConstants.DEFAULT_STRING_VALUE;
 import static org.acra.ACRAConstants.NULL_VALUE;
 
-import java.lang.annotation.Annotation;
-
-import org.acra.annotation.ReportsCrashes;
-import org.acra.sender.HttpSender.Method;
-import org.acra.sender.HttpSender.Type;
-
 /**
  * This class is to be used if you need to apply dynamic settings. This is
  * needed for example when using ACRA in an Android Library Project since ADT
@@ -449,7 +449,7 @@ public void setExcludeMatchingSharedPreferencesKeys(String[] excludeMatchingShar
 
     /**
      * 
-     * @param excludeMatchingSettingssKeys
+     * @param excludeMatchingSettingsKeys
      *            an array of Strings containing regexp defining
      *            Settings.System, Settings.Secure and Settings.Global keys that
      *            should be excluded from the data collection.
@@ -500,7 +500,7 @@ public void setHttpMethod(Method httpMethod) {
 
     /**
      * 
-     * @param httpMethod
+     * @param type
      *            The type of content encoding to be used to send data to the
      *            server.
      */
diff --git a/src/main/java/org/acra/ErrorReporter.java b/src/main/java/org/acra/ErrorReporter.java
index 9c5ba8d3..1e6b1205 100644
--- a/src/main/java/org/acra/ErrorReporter.java
+++ b/src/main/java/org/acra/ErrorReporter.java
@@ -16,22 +16,23 @@
 package org.acra;
 
 import android.Manifest.permission;
-import android.app.Application;
-import android.app.Notification;
-import android.app.NotificationManager;
-import android.app.PendingIntent;
+import android.app.*;
 import android.content.Context;
 import android.content.Intent;
 import android.content.SharedPreferences;
 import android.content.pm.PackageInfo;
+import android.os.Bundle;
 import android.os.Looper;
 import android.text.format.Time;
 import android.util.Log;
 import android.widget.Toast;
 import org.acra.annotation.ReportsCrashes;
+import org.acra.collector.Compatibility;
 import org.acra.collector.ConfigurationCollector;
 import org.acra.collector.CrashReportData;
 import org.acra.collector.CrashReportDataFactory;
+import org.acra.jraf.android.util.activitylifecyclecallbackscompat.ActivityLifecycleCallbacksCompat;
+import org.acra.jraf.android.util.activitylifecyclecallbackscompat.ApplicationHelper;
 import org.acra.sender.EmailIntentSender;
 import org.acra.sender.GoogleFormSender;
 import org.acra.sender.HttpSender;
@@ -76,7 +77,7 @@
 
     private boolean enabled = false;
 
-    private final Context mContext;
+    private final Application mContext;
     private final SharedPreferences prefs;
 
     /**
@@ -95,6 +96,7 @@
 
     private Thread brokenThread;
     private Throwable unhandledThrowable;
+    private transient Activity lastActivityCreated;
 
     /**
      * This is used to wait for the crash toast to end it's display duration
@@ -113,7 +115,7 @@
      *            Whether this ErrorReporter should capture Exceptions and
      *            forward their reports.
      */
-    ErrorReporter(Context context, SharedPreferences prefs, boolean enabled) {
+    ErrorReporter(Application context, SharedPreferences prefs, boolean enabled) {
 
         this.mContext = context;
         this.prefs = prefs;
@@ -128,6 +130,49 @@
         final Time appStartDate = new Time();
         appStartDate.setToNow();
 
+        if (Compatibility.getAPILevel() >= 14) { // ActivityLifecycleCallback only available for API14+
+            ApplicationHelper.registerActivityLifecycleCallbacks(context, new ActivityLifecycleCallbacksCompat() {
+                @Override
+                public void onActivityCreated(Activity activity, Bundle savedInstanceState) {
+                    if (ACRA.DEV_LOGGING) ACRA.log.d(ACRA.LOG_TAG, "onActivityCreated " + activity.getClass());
+                    if (!(activity instanceof CrashReportDialog)) {
+                        // Ignore CrashReportDialog because we want the last application Activity that was started so that we can explicitly kill it off.
+                        lastActivityCreated = activity;
+                    }
+                }
+
+                @Override
+                public void onActivityStarted(Activity activity) {
+                    if (ACRA.DEV_LOGGING) ACRA.log.d(ACRA.LOG_TAG, "onActivityStarted " + activity.getClass());
+                }
+
+                @Override
+                public void onActivityResumed(Activity activity) {
+                    if (ACRA.DEV_LOGGING) ACRA.log.d(ACRA.LOG_TAG, "onActivityResumed " + activity.getClass());
+                }
+
+                @Override
+                public void onActivityPaused(Activity activity) {
+                    if (ACRA.DEV_LOGGING) ACRA.log.d(ACRA.LOG_TAG, "onActivityPaused " + activity.getClass());
+                }
+
+                @Override
+                public void onActivityStopped(Activity activity) {
+                    if (ACRA.DEV_LOGGING) ACRA.log.d(ACRA.LOG_TAG, "onActivityStopped " + activity.getClass());
+                }
+
+                @Override
+                public void onActivitySaveInstanceState(Activity activity, Bundle outState) {
+                    if (ACRA.DEV_LOGGING) ACRA.log.i(ACRA.LOG_TAG, "onActivitySaveInstanceState " + activity.getClass());
+                }
+
+                @Override
+                public void onActivityDestroyed(Activity activity) {
+                    if (ACRA.DEV_LOGGING) ACRA.log.i(ACRA.LOG_TAG, "onActivityDestroyed " + activity.getClass());
+                }
+            });
+        }
+
         crashReportDataFactory = new CrashReportDataFactory(mContext, prefs, appStartDate, initialConfiguration);
 
         // If mDfltExceptionHandler is not null, initialization is already done.
@@ -330,6 +375,16 @@ private void endApplication() {
             // We choose to close the process ourselves using the same actions.
             Log.e(LOG_TAG, mContext.getPackageName() + " fatal error : " + unhandledThrowable.getMessage(),
                     unhandledThrowable);
+
+            // Trying to solve https://github.com/ACRA/acra/issues/42#issuecomment-12134144
+            // Determine the current/last Activity that was started and close it. Activity#finish (and maybe it's parent too).
+            if (lastActivityCreated != null) {
+                Log.i(LOG_TAG, "Finishing the last Activity prior to killing the Process");
+                lastActivityCreated.finish();
+                Log.i(LOG_TAG, "Finished " + lastActivityCreated.getClass());
+                lastActivityCreated = null;
+            }
+
             android.os.Process.killProcess(android.os.Process.myPid());
             System.exit(10);
         }
@@ -869,7 +924,7 @@ public void setDefaultReportSenders() {
         // If formUri is set, instantiate a sender for a generic HTTP POST form
         // with default mapping.
         if (conf.formUri() != null && !"".equals(conf.formUri())) {
-            setReportSender(new HttpSender(ACRA.getConfig().httpMethod(), null));
+            setReportSender(new HttpSender(ACRA.getConfig().httpMethod(), ACRA.getConfig().reportType(), null));
             return;
         }
 
diff --git a/src/main/java/org/acra/ReportField.java b/src/main/java/org/acra/ReportField.java
index ec6d4627..562e6d96 100644
--- a/src/main/java/org/acra/ReportField.java
+++ b/src/main/java/org/acra/ReportField.java
@@ -267,7 +267,11 @@ public boolean containsKeyValuePairs() {
     /**
      * Retrieves details of the failing thread (id, name, group name).
      */
-    THREAD_DETAILS;
+    THREAD_DETAILS,
+    /**
+     * Retrieves the user IP address(es).
+     */
+    USER_IP;
 
     /**
      * Whether this field is a collection of key/value pairs.
diff --git a/src/main/java/org/acra/collector/Compatibility.java b/src/main/java/org/acra/collector/Compatibility.java
index f21c9e7c..32ac14fb 100644
--- a/src/main/java/org/acra/collector/Compatibility.java
+++ b/src/main/java/org/acra/collector/Compatibility.java
@@ -15,18 +15,18 @@
  */
 package org.acra.collector;
 
-import java.lang.reflect.Field;
-
 import android.content.Context;
 import android.os.Build;
 
+import java.lang.reflect.Field;
+
 /**
  * Utility class containing methods enabling backward compatibility.
  * 
  * @author Normal
  * 
  */
-class Compatibility {
+public final class Compatibility {
 
     /**
      * Retrieves Android SDK API level using the best possible method.
diff --git a/src/main/java/org/acra/collector/CrashReportDataFactory.java b/src/main/java/org/acra/collector/CrashReportDataFactory.java
index 026b7159..24662f75 100644
--- a/src/main/java/org/acra/collector/CrashReportDataFactory.java
+++ b/src/main/java/org/acra/collector/CrashReportDataFactory.java
@@ -53,6 +53,7 @@
 import static org.acra.ReportField.TOTAL_MEM_SIZE;
 import static org.acra.ReportField.USER_CRASH_DATE;
 import static org.acra.ReportField.USER_EMAIL;
+import static org.acra.ReportField.USER_IP;
 
 import java.io.FileNotFoundException;
 import java.io.IOException;
@@ -222,7 +223,7 @@ public CrashReportData createCrashData(Throwable th, boolean isSilentReport, Thr
 
             // Android OS Build details
             if (crashReportFields.contains(BUILD)) {
-                crashReportData.put(BUILD, ReflectionCollector.collectConstants(android.os.Build.class));
+                crashReportData.put(BUILD, ReflectionCollector.collectConstants(android.os.Build.class) + ReflectionCollector.collectConstants(android.os.Build.VERSION.class, "VERSION"));
             }
 
             // Device model
@@ -375,6 +376,11 @@ public CrashReportData createCrashData(Throwable th, boolean isSilentReport, Thr
                 crashReportData.put(THREAD_DETAILS, ThreadCollector.collect(brokenThread));
             }
 
+            // IP addresses
+            if (crashReportFields.contains(USER_IP)) {
+                crashReportData.put(USER_IP, ReportUtils.getLocalIpAddress());
+            }
+
         } catch (RuntimeException e) {
             Log.e(LOG_TAG, "Error while retrieving crash data", e);
         } catch (FileNotFoundException e) {
diff --git a/src/main/java/org/acra/collector/LogCatCollector.java b/src/main/java/org/acra/collector/LogCatCollector.java
index 44b2c7c4..57173ea7 100644
--- a/src/main/java/org/acra/collector/LogCatCollector.java
+++ b/src/main/java/org/acra/collector/LogCatCollector.java
@@ -23,6 +23,7 @@
 
 import java.io.BufferedReader;
 import java.io.IOException;
+import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -99,6 +100,20 @@ public static String collectLogCat(String bufferName) {
             final BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(process.getInputStream()), ACRAConstants.DEFAULT_BUFFER_SIZE_IN_BYTES);
 
             Log.d(LOG_TAG, "Retrieving logcat output...");
+
+            // Dump stderr to null
+            new Thread(new Runnable() {
+                public void run() {
+                    try {
+                        InputStream stderr = process.getErrorStream();
+                        byte[] dummy = new byte[ACRAConstants.DEFAULT_BUFFER_SIZE_IN_BYTES];
+                        while (stderr.read(dummy) >= 0)
+                            ;
+                    } catch (IOException e) {
+                    }
+                }
+            }).start();
+
             while (true) {
                 final String line = bufferedReader.readLine();
                 if (line == null) {
diff --git a/src/main/java/org/acra/collector/ReflectionCollector.java b/src/main/java/org/acra/collector/ReflectionCollector.java
index 8bbb1832..55a34da8 100644
--- a/src/main/java/org/acra/collector/ReflectionCollector.java
+++ b/src/main/java/org/acra/collector/ReflectionCollector.java
@@ -35,14 +35,18 @@
      * Retrieves key/value pairs from static fields of a class.
      *
      * @param someClass the class to be inspected.
+     * 
      * @return A human readable string with a key=value pair on each line.
      */
-    public static String collectConstants(Class<?> someClass) {
+    public static String collectConstants(Class<?> someClass, String prefix) {
 
         final StringBuilder result = new StringBuilder();
 
         final Field[] fields = someClass.getFields();
         for (final Field field : fields) {
+            if(prefix != null && prefix.length() > 0) {
+                result.append(prefix).append('.');
+            }
             result.append(field.getName()).append("=");
             try {
                 result.append(field.get(null).toString());
@@ -87,4 +91,8 @@ public static String collectStaticGettersResults(Class<?> someClass) {
 
         return result.toString();
     }
+
+    public static String collectConstants(Class<?> someClass) {
+        return collectConstants(someClass, "");
+    }
 }
diff --git a/src/main/java/org/acra/collector/SettingsCollector.java b/src/main/java/org/acra/collector/SettingsCollector.java
index ca0b6c92..7b4cbf0f 100644
--- a/src/main/java/org/acra/collector/SettingsCollector.java
+++ b/src/main/java/org/acra/collector/SettingsCollector.java
@@ -121,7 +121,6 @@ public static String collectGlobalSettings(Context ctx) {
             final Field[] keys = globalClass.getFields();
             final Method getString = globalClass.getMethod("getString", ContentResolver.class, String.class);
             for (final Field key : keys) {
-                Log.d(ACRA.LOG_TAG, "Found global setting: " + key);
                 if (!key.isAnnotationPresent(Deprecated.class) && key.getType() == String.class && isAuthorized(key)) {
                     final Object value = getString.invoke(null, ctx.getContentResolver(), (String) key.get(null));
                     if (value != null) {
diff --git a/src/main/java/org/acra/jraf/android/util/activitylifecyclecallbackscompat/ActivityLifecycleCallbacksAdapter.java b/src/main/java/org/acra/jraf/android/util/activitylifecyclecallbackscompat/ActivityLifecycleCallbacksAdapter.java
new file mode 100644
index 00000000..cb0762fa
--- /dev/null
+++ b/src/main/java/org/acra/jraf/android/util/activitylifecyclecallbackscompat/ActivityLifecycleCallbacksAdapter.java
@@ -0,0 +1,56 @@
+/*
+ * This source is part of the
+ *      _____  ___   ____
+ *  __ / / _ \/ _ | / __/___  _______ _
+ * / // / , _/ __ |/ _/_/ _ \/ __/ _ `/
+ * \___/_/|_/_/ |_/_/ (_)___/_/  \_, /
+ *                              /___/
+ * repository.
+ *
+ * Copyright (C) 2013 Benoit 'BoD' Lubek (BoD@JRAF.org)
+ * Copyright (C) 2006 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.acra.jraf.android.util.activitylifecyclecallbackscompat;
+
+import android.app.Activity;
+import android.os.Bundle;
+
+/**
+ * This adapter class provides empty implementations of the methods from {@link ActivityLifecycleCallbacksCompat}.
+ * Any custom listener that cares only about a subset of the methods of this listener can simply subclass this
+ * adapter class instead of implementing the interface directly.
+ */
+public class ActivityLifecycleCallbacksAdapter implements ActivityLifecycleCallbacksCompat {
+    @Override
+    public void onActivityCreated(Activity activity, Bundle savedInstanceState) {}
+
+    @Override
+    public void onActivityStarted(Activity activity) {}
+
+    @Override
+    public void onActivityResumed(Activity activity) {}
+
+    @Override
+    public void onActivityPaused(Activity activity) {}
+
+    @Override
+    public void onActivityStopped(Activity activity) {}
+
+    @Override
+    public void onActivitySaveInstanceState(Activity activity, Bundle outState) {}
+
+    @Override
+    public void onActivityDestroyed(Activity activity) {}
+}
diff --git a/src/main/java/org/acra/jraf/android/util/activitylifecyclecallbackscompat/ActivityLifecycleCallbacksCompat.java b/src/main/java/org/acra/jraf/android/util/activitylifecyclecallbackscompat/ActivityLifecycleCallbacksCompat.java
new file mode 100644
index 00000000..0d7f0df8
--- /dev/null
+++ b/src/main/java/org/acra/jraf/android/util/activitylifecyclecallbackscompat/ActivityLifecycleCallbacksCompat.java
@@ -0,0 +1,51 @@
+/*
+ * This source is part of the
+ *      _____  ___   ____
+ *  __ / / _ \/ _ | / __/___  _______ _
+ * / // / , _/ __ |/ _/_/ _ \/ __/ _ `/
+ * \___/_/|_/_/ |_/_/ (_)___/_/  \_, /
+ *                              /___/
+ * repository.
+ *
+ * Copyright (C) 2013 Benoit 'BoD' Lubek (BoD@JRAF.org)
+ * Copyright (C) 2006 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.acra.jraf.android.util.activitylifecyclecallbackscompat;
+
+import android.app.Activity;
+import android.app.Application;
+import android.app.Application.ActivityLifecycleCallbacks;
+import android.os.Bundle;
+
+/**
+ * Equivalent of {@link ActivityLifecycleCallbacks} to be used with
+ * {@link ApplicationHelper#registerActivityLifecycleCallbacks(Application, ActivityLifecycleCallbacksCompat)} and
+ * {@link ApplicationHelper#unregisterActivityLifecycleCallbacks(Application, ActivityLifecycleCallbacksCompat)}.
+ */
+public interface ActivityLifecycleCallbacksCompat {
+    void onActivityCreated(Activity activity, Bundle savedInstanceState);
+
+    void onActivityStarted(Activity activity);
+
+    void onActivityResumed(Activity activity);
+
+    void onActivityPaused(Activity activity);
+
+    void onActivityStopped(Activity activity);
+
+    void onActivitySaveInstanceState(Activity activity, Bundle outState);
+
+    void onActivityDestroyed(Activity activity);
+}
diff --git a/src/main/java/org/acra/jraf/android/util/activitylifecyclecallbackscompat/ActivityLifecycleCallbacksWrapper.java b/src/main/java/org/acra/jraf/android/util/activitylifecyclecallbackscompat/ActivityLifecycleCallbacksWrapper.java
new file mode 100644
index 00000000..74bcc405
--- /dev/null
+++ b/src/main/java/org/acra/jraf/android/util/activitylifecyclecallbackscompat/ActivityLifecycleCallbacksWrapper.java
@@ -0,0 +1,74 @@
+/*
+ * This source is part of the
+ *      _____  ___   ____
+ *  __ / / _ \/ _ | / __/___  _______ _
+ * / // / , _/ __ |/ _/_/ _ \/ __/ _ `/
+ * \___/_/|_/_/ |_/_/ (_)___/_/  \_, /
+ *                              /___/
+ * repository.
+ *
+ * Copyright (C) 2013 Benoit 'BoD' Lubek (BoD@JRAF.org)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.acra.jraf.android.util.activitylifecyclecallbackscompat;
+
+import android.app.Activity;
+import android.app.Application.ActivityLifecycleCallbacks;
+import android.os.Bundle;
+
+/**
+ * Wraps an {@link ActivityLifecycleCallbacksCompat} into an {@link ActivityLifecycleCallbacks}.
+ */
+/* package */class ActivityLifecycleCallbacksWrapper implements ActivityLifecycleCallbacks {
+    private org.acra.jraf.android.util.activitylifecyclecallbackscompat.ActivityLifecycleCallbacksCompat mCallback;
+
+    public ActivityLifecycleCallbacksWrapper(org.acra.jraf.android.util.activitylifecyclecallbackscompat.ActivityLifecycleCallbacksCompat callback) {
+        mCallback = callback;
+    }
+
+    @Override
+    public void onActivityCreated(Activity activity, Bundle savedInstanceState) {
+        mCallback.onActivityCreated(activity, savedInstanceState);
+    }
+
+    @Override
+    public void onActivityStarted(Activity activity) {
+        mCallback.onActivityStarted(activity);
+    }
+
+    @Override
+    public void onActivityResumed(Activity activity) {
+        mCallback.onActivityResumed(activity);
+    }
+
+    @Override
+    public void onActivityPaused(Activity activity) {
+        mCallback.onActivityPaused(activity);
+    }
+
+    @Override
+    public void onActivityStopped(Activity activity) {
+        mCallback.onActivityStopped(activity);
+    }
+
+    @Override
+    public void onActivitySaveInstanceState(Activity activity, Bundle outState) {
+        mCallback.onActivitySaveInstanceState(activity, outState);
+    }
+
+    @Override
+    public void onActivityDestroyed(Activity activity) {
+        mCallback.onActivityDestroyed(activity);
+    }
+}
diff --git a/src/main/java/org/acra/jraf/android/util/activitylifecyclecallbackscompat/ApplicationHelper.java b/src/main/java/org/acra/jraf/android/util/activitylifecyclecallbackscompat/ApplicationHelper.java
new file mode 100644
index 00000000..c3a8ea3a
--- /dev/null
+++ b/src/main/java/org/acra/jraf/android/util/activitylifecyclecallbackscompat/ApplicationHelper.java
@@ -0,0 +1,96 @@
+/*
+ * This source is part of the
+ *      _____  ___   ____
+ *  __ / / _ \/ _ | / __/___  _______ _
+ * / // / , _/ __ |/ _/_/ _ \/ __/ _ `/
+ * \___/_/|_/_/ |_/_/ (_)___/_/  \_, /
+ *                              /___/
+ * repository.
+ *
+ * Copyright (C) 2013 Benoit 'BoD' Lubek (BoD@JRAF.org)
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.acra.jraf.android.util.activitylifecyclecallbackscompat;
+
+import android.annotation.TargetApi;
+import android.app.Activity;
+import android.app.Application;
+import android.app.Application.ActivityLifecycleCallbacks;
+import android.os.Build;
+
+/**
+ * Helper for accessing {@link Application#registerActivityLifecycleCallbacks(ActivityLifecycleCallbacks)} and
+ * {@link Application#unregisterActivityLifecycleCallbacks(ActivityLifecycleCallbacks)} introduced in API level 14 in a
+ * backwards compatible fashion.<br/>
+ * When running on API level 14 or above, the framework's implementations of these methods will be used.
+ */
+public class ApplicationHelper {
+    public static final boolean PRE_ICS = Build.VERSION.SDK_INT < Build.VERSION_CODES.ICE_CREAM_SANDWICH;
+
+    /*
+     * Register.
+     */
+
+    /**
+     * Registers a callback to be called following the life cycle of the application's {@link Activity activities}.
+     * 
+     * @param application The application with which to register the callback.
+     * @param callback The callback to register.
+     */
+    public static void registerActivityLifecycleCallbacks(Application application, ActivityLifecycleCallbacksCompat callback) {
+        if (PRE_ICS) {
+            preIcsRegisterActivityLifecycleCallbacks(callback);
+        } else {
+            postIcsRegisterActivityLifecycleCallbacks(application, callback);
+        }
+    }
+
+    private static void preIcsRegisterActivityLifecycleCallbacks(ActivityLifecycleCallbacksCompat callback) {
+        MainLifecycleDispatcher.get().registerActivityLifecycleCallbacks(callback);
+    }
+
+    @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH)
+    private static void postIcsRegisterActivityLifecycleCallbacks(Application application, ActivityLifecycleCallbacksCompat callback) {
+        application.registerActivityLifecycleCallbacks(new ActivityLifecycleCallbacksWrapper(callback));
+    }
+
+
+    /*
+     * Unregister.
+     */
+
+    /**
+     * Unregisters a previously registered callback.
+     * 
+     * @param application The application with which to unregister the callback.
+     * @param callback The callback to unregister.
+     */
+    public void unregisterActivityLifecycleCallbacks(Application application, ActivityLifecycleCallbacksCompat callback) {
+        if (PRE_ICS) {
+            preIcsUnregisterActivityLifecycleCallbacks(callback);
+        } else {
+            postIcsUnregisterActivityLifecycleCallbacks(application, callback);
+        }
+    }
+
+    private static void preIcsUnregisterActivityLifecycleCallbacks(ActivityLifecycleCallbacksCompat callback) {
+        MainLifecycleDispatcher.get().unregisterActivityLifecycleCallbacks(callback);
+    }
+
+    @TargetApi(Build.VERSION_CODES.ICE_CREAM_SANDWICH)
+    private static void postIcsUnregisterActivityLifecycleCallbacks(Application application, ActivityLifecycleCallbacksCompat callback) {
+        application.unregisterActivityLifecycleCallbacks(new ActivityLifecycleCallbacksWrapper(callback));
+    }
+
+}
diff --git a/src/main/java/org/acra/jraf/android/util/activitylifecyclecallbackscompat/MainLifecycleDispatcher.java b/src/main/java/org/acra/jraf/android/util/activitylifecyclecallbackscompat/MainLifecycleDispatcher.java
new file mode 100644
index 00000000..de1bb1ed
--- /dev/null
+++ b/src/main/java/org/acra/jraf/android/util/activitylifecyclecallbackscompat/MainLifecycleDispatcher.java
@@ -0,0 +1,142 @@
+/*
+ * This source is part of the
+ *      _____  ___   ____
+ *  __ / / _ \/ _ | / __/___  _______ _
+ * / // / , _/ __ |/ _/_/ _ \/ __/ _ `/
+ * \___/_/|_/_/ |_/_/ (_)___/_/  \_, /
+ *                              /___/
+ * repository.
+ *
+ * Copyright (C) 2013 Benoit 'BoD' Lubek (BoD@JRAF.org)
+ * Copyright (C) 2006 The Android Open Source Project
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.acra.jraf.android.util.activitylifecyclecallbackscompat;
+
+import java.util.ArrayList;
+
+import android.app.Activity;
+import android.app.Application;
+import android.app.Application.ActivityLifecycleCallbacks;
+import android.os.Bundle;
+
+/**
+ * Keeps a list of {@link ActivityLifecycleCallbacksCompat}s that will be called following the life cycle of the application's {@link Activity activities}.
+ * This class is used when the app is running on an older platform version that does not support
+ * {@link Application#registerActivityLifecycleCallbacks(ActivityLifecycleCallbacks)} and
+ * {@link Application#unregisterActivityLifecycleCallbacks(ActivityLifecycleCallbacks)}.
+ */
+public class MainLifecycleDispatcher implements ActivityLifecycleCallbacksCompat {
+    private static final MainLifecycleDispatcher INSTANCE = new MainLifecycleDispatcher();
+
+    public static MainLifecycleDispatcher get() {
+        return INSTANCE;
+    }
+
+    private MainLifecycleDispatcher() {}
+
+    private ArrayList<ActivityLifecycleCallbacksCompat> mActivityLifecycleCallbacks = new ArrayList<ActivityLifecycleCallbacksCompat>();
+
+    /* package */void registerActivityLifecycleCallbacks(ActivityLifecycleCallbacksCompat callback) {
+        synchronized (mActivityLifecycleCallbacks) {
+            mActivityLifecycleCallbacks.add(callback);
+        }
+    }
+
+    /* package */void unregisterActivityLifecycleCallbacks(ActivityLifecycleCallbacksCompat callback) {
+        synchronized (mActivityLifecycleCallbacks) {
+            mActivityLifecycleCallbacks.remove(callback);
+        }
+    }
+
+    private Object[] collectActivityLifecycleCallbacks() {
+        Object[] callbacks = null;
+        synchronized (mActivityLifecycleCallbacks) {
+            if (mActivityLifecycleCallbacks.size() > 0) {
+                callbacks = mActivityLifecycleCallbacks.toArray();
+            }
+        }
+        return callbacks;
+    }
+
+    @Override
+    public void onActivityCreated(Activity activity, Bundle savedInstanceState) {
+        Object[] callbacks = collectActivityLifecycleCallbacks();
+        if (callbacks != null) {
+            for (Object callback : callbacks) {
+                ((ActivityLifecycleCallbacksCompat) callback).onActivityCreated(activity, savedInstanceState);
+            }
+        }
+    }
+
+    @Override
+    public void onActivityStarted(Activity activity) {
+        Object[] callbacks = collectActivityLifecycleCallbacks();
+        if (callbacks != null) {
+            for (Object callback : callbacks) {
+                ((ActivityLifecycleCallbacksCompat) callback).onActivityStarted(activity);
+            }
+        }
+    }
+
+    @Override
+    public void onActivityResumed(Activity activity) {
+        Object[] callbacks = collectActivityLifecycleCallbacks();
+        if (callbacks != null) {
+            for (Object callback : callbacks) {
+                ((ActivityLifecycleCallbacksCompat) callback).onActivityResumed(activity);
+            }
+        }
+    }
+
+    @Override
+    public void onActivityPaused(Activity activity) {
+        Object[] callbacks = collectActivityLifecycleCallbacks();
+        if (callbacks != null) {
+            for (Object callback : callbacks) {
+                ((ActivityLifecycleCallbacksCompat) callback).onActivityPaused(activity);
+            }
+        }
+    }
+
+    @Override
+    public void onActivityStopped(Activity activity) {
+        Object[] callbacks = collectActivityLifecycleCallbacks();
+        if (callbacks != null) {
+            for (Object callback : callbacks) {
+                ((ActivityLifecycleCallbacksCompat) callback).onActivityStopped(activity);
+            }
+        }
+    }
+
+    @Override
+    public void onActivitySaveInstanceState(Activity activity, Bundle outState) {
+        Object[] callbacks = collectActivityLifecycleCallbacks();
+        if (callbacks != null) {
+            for (Object callback : callbacks) {
+                ((ActivityLifecycleCallbacksCompat) callback).onActivitySaveInstanceState(activity, outState);
+            }
+        }
+    }
+
+    @Override
+    public void onActivityDestroyed(Activity activity) {
+        Object[] callbacks = collectActivityLifecycleCallbacks();
+        if (callbacks != null) {
+            for (Object callback : callbacks) {
+                ((ActivityLifecycleCallbacksCompat) callback).onActivityDestroyed(activity);
+            }
+        }
+    }
+}
diff --git a/src/main/java/org/acra/sender/HttpSender.java b/src/main/java/org/acra/sender/HttpSender.java
index 698a8a51..d4c42fbd 100644
--- a/src/main/java/org/acra/sender/HttpSender.java
+++ b/src/main/java/org/acra/sender/HttpSender.java
@@ -100,6 +100,7 @@ public String getContentType() {
     private final Uri mFormUri;
     private final Map<ReportField, String> mMapping;
     private final Method mMethod;
+    private final Type mType;
 
     /**
      * <p>
@@ -114,10 +115,11 @@ public String getContentType() {
      *            .toString(). If not null, POST parameters will be named with
      *            the result of mapping.get(ReportField.SOME_FIELD);
      */
-    public HttpSender(Method method, Map<ReportField, String> mapping) {
+    public HttpSender(Method method, Type type, Map<ReportField, String> mapping) {
         mMethod = method;
         mFormUri = null;
         mMapping = mapping;
+        mType = type;
     }
 
     /**
@@ -134,10 +136,11 @@ public HttpSender(Method method, Map<ReportField, String> mapping) {
      *            .toString(). If not null, POST parameters will be named with
      *            the result of mapping.get(ReportField.SOME_FIELD);
      */
-    public HttpSender(Method method, String formUri, Map<ReportField, String> mapping) {
+    public HttpSender(Method method, Type type, String formUri, Map<ReportField, String> mapping) {
         mMethod = method;
         mFormUri = Uri.parse(formUri);
         mMapping = mapping;
+        mType = type;
     }
 
     @Override
@@ -159,7 +162,6 @@ public void send(CrashReportData report) throws ReportSenderException {
             request.setLogin(login);
             request.setPassword(password);
 
-            Type type = ACRA.getConfig().reportType();
             String reportAsString = "";
             switch (mMethod) {
             case POST:
@@ -173,7 +175,7 @@ public void send(CrashReportData report) throws ReportSenderException {
             default:
                 throw new UnsupportedOperationException("Unknown method: " + mMethod.name());
             }
-            request.send(reportUrl, mMethod, reportAsString, type);
+            request.send(reportUrl, mMethod, reportAsString, mType);
 
         } catch (IOException e) {
             throw new ReportSenderException("Error while sending " + ACRA.getConfig().reportType() + " report via Http " + mMethod.name(), e);
diff --git a/src/main/java/org/acra/util/JSONReportBuilder.java b/src/main/java/org/acra/util/JSONReportBuilder.java
index 0f970f29..9fc2b176 100644
--- a/src/main/java/org/acra/util/JSONReportBuilder.java
+++ b/src/main/java/org/acra/util/JSONReportBuilder.java
@@ -5,6 +5,7 @@
 import java.io.StringReader;
 import java.text.NumberFormat;
 import java.text.ParseException;
+import java.util.Locale;
 
 import org.acra.ACRA;
 import org.acra.ReportField;
@@ -153,8 +154,9 @@ private static Object guessType(String value) {
             return true;
         if (value.equalsIgnoreCase("false"))
             return false;
-        if (value.matches("^[\\s\\d\\.,-]+$")) {
-            NumberFormat format = NumberFormat.getInstance();
+        
+        if (value.matches("(?:^|\\s)([1-9](?:\\d*|(?:\\d{0,2})(?:,\\d{3})*)(?:\\.\\d*[1-9])?|0?\\.\\d*[1-9]|0)(?:\\s|$)")) {
+            NumberFormat format = NumberFormat.getInstance(Locale.US);
             try {
                 Number number = format.parse(value);
                 return number;
diff --git a/src/main/java/org/acra/util/ReportUtils.java b/src/main/java/org/acra/util/ReportUtils.java
index d2facaa2..c3211a54 100644
--- a/src/main/java/org/acra/util/ReportUtils.java
+++ b/src/main/java/org/acra/util/ReportUtils.java
@@ -1,6 +1,10 @@
 package org.acra.util;
 
 import java.io.File;
+import java.net.InetAddress;
+import java.net.NetworkInterface;
+import java.net.SocketException;
+import java.util.Enumeration;
 
 import org.acra.ACRA;
 
@@ -8,11 +12,8 @@
 import android.os.Environment;
 import android.os.StatFs;
 import android.telephony.TelephonyManager;
-import android.util.DisplayMetrics;
 import android.util.Log;
 import android.util.SparseArray;
-import android.view.Display;
-import android.view.WindowManager;
 
 /**
  * Responsible for providing base utilities used when constructing the report.
@@ -75,38 +76,6 @@ public static String getApplicationFilePath(Context context) {
         Log.w(ACRA.LOG_TAG, "Couldn't retrieve ApplicationFilePath for : " + context.getPackageName());
         return "Couldn't retrieve ApplicationFilePath";
     }
-
-    /**
-     * Returns a String representation of the content of a {@link android.view.Display} object.
-     *
-     * @param context   Context for the application being reported.
-     * @return A String representation of the content of the default Display of the Window Service.
-     */
-    public static String getDisplayDetails(Context context) {
-        try {
-            final WindowManager windowManager = (WindowManager) context.getSystemService(android.content.Context.WINDOW_SERVICE);
-            final Display display = windowManager.getDefaultDisplay();
-            final DisplayMetrics metrics = new DisplayMetrics();
-            display.getMetrics(metrics);
-
-            final StringBuilder result = new StringBuilder();
-            result.append("width=").                    append(display.getWidth()).append('\n');
-            result.append("height=").                   append(display.getHeight()).append('\n');
-            result.append("pixelFormat=").              append(display.getPixelFormat()).append('\n');
-            result.append("refreshRate=").              append(display.getRefreshRate()).append("fps").append('\n');
-            result.append("metrics.density=x").         append(metrics.density).append('\n');
-            result.append("metrics.scaledDensity=x").   append(metrics.scaledDensity).append('\n');
-            result.append("metrics.widthPixels=").      append(metrics.widthPixels).append('\n');
-            result.append("metrics.heightPixels=").     append(metrics.heightPixels).append('\n');
-            result.append("metrics.xdpi=").             append(metrics.xdpi).append('\n');
-            result.append("metrics.ydpi=").             append(metrics.ydpi);
-            return result.toString();
-
-        } catch (RuntimeException e) {
-            Log.w(ACRA.LOG_TAG, "Couldn't retrieve DisplayDetails for : " + context.getPackageName(), e);
-            return "Couldn't retrieve Display Details";
-        }
-    }
     
     /**
      * Utility method used for debugging purposes, writes the content of a SparseArray to a String.
@@ -135,4 +104,27 @@ public static String sparseArrayToString(SparseArray<?> sparseArray) {
         result.append('}');
         return result.toString();
     }
+
+    public static String getLocalIpAddress() {
+        StringBuilder result = new StringBuilder();
+        boolean first = true;
+        try {
+            for (Enumeration<NetworkInterface> en = NetworkInterface.getNetworkInterfaces(); en.hasMoreElements();) {
+                NetworkInterface intf = en.nextElement();
+                for (Enumeration<InetAddress> enumIpAddr = intf.getInetAddresses(); enumIpAddr.hasMoreElements();) {
+                    InetAddress inetAddress = enumIpAddr.nextElement();
+                    if (!inetAddress.isLoopbackAddress()) {
+                        if(!first) {
+                            result.append('\n');
+                        }
+                        result.append(inetAddress.getHostAddress().toString());
+                        first = false;
+                    }
+                }
+            }
+        } catch (SocketException ex) {
+            ACRA.log.w(ACRA.LOG_TAG, ex.toString());
+        }
+        return result.toString();
+    }
 }
