diff --git a/src/main/java/org/acra/ACRAConfiguration.java b/src/main/java/org/acra/ACRAConfiguration.java
index d1afbb50..a265a27b 100644
--- a/src/main/java/org/acra/ACRAConfiguration.java
+++ b/src/main/java/org/acra/ACRAConfiguration.java
@@ -15,6 +15,18 @@
  */
 package org.acra;
 
+import org.acra.annotation.ReportsCrashes;
+import org.acra.sender.HttpSender;
+import org.acra.sender.HttpSender.Method;
+import org.acra.sender.HttpSender.Type;
+import org.acra.util.DefaultHttpsSocketFactoryFactory;
+import org.acra.util.HttpsSocketFactoryFactory;
+import org.acra.util.ReflectionException;
+import org.acra.util.ReflectionHelper;
+
+import java.lang.annotation.Annotation;
+import java.util.Map;
+
 import static org.acra.ACRAConstants.DEFAULT_APPLICATION_LOGFILE;
 import static org.acra.ACRAConstants.DEFAULT_APPLICATION_LOGFILE_LINES;
 import static org.acra.ACRAConstants.DEFAULT_CONNECTION_TIMEOUT;
@@ -37,14 +49,6 @@
 import static org.acra.ACRAConstants.DEFAULT_STRING_VALUE;
 import static org.acra.ACRAConstants.NULL_VALUE;
 
-import java.lang.annotation.Annotation;
-import java.util.Map;
-
-import org.acra.annotation.ReportsCrashes;
-import org.acra.sender.HttpSender;
-import org.acra.sender.HttpSender.Method;
-import org.acra.sender.HttpSender.Type;
-
 /**
  * This class is to be used if you need to apply dynamic settings. This is
  * needed for example when using ACRA in an Android Library Project since ADT
@@ -54,6 +58,8 @@
  */
 public class ACRAConfiguration implements ReportsCrashes {
 
+    private final ReflectionHelper reflectionHelper = new ReflectionHelper();
+
     private String[] mAdditionalDropboxTags = null;
 
     private String[] mAdditionalSharedPreferences = null;
@@ -100,6 +106,8 @@
     private String mGoogleFormUrlFormat = null;
 
     private Boolean mDisableSSLCertValidation = null;
+    private String mHttpsSocketFactoryFactoryClass = null;
+    private HttpsSocketFactoryFactory mHttpsSocketFactoryFactory;
     private Method mHttpMethod = null;
     private Type mReportType = null;
     private Map<String, String> mHttpHeaders;
@@ -1061,6 +1069,54 @@ public boolean disableSSLCertValidation() {
         return DEFAULT_DISABLE_SSL_CERT_VALIDATION;
     }
 
+    @Override
+    public String httpsSocketFactoryFactoryClass() {
+        if (mHttpsSocketFactoryFactoryClass != null) {
+            return mHttpsSocketFactoryFactoryClass;
+        }
+
+        if (mReportsCrashes != null) {
+            return mReportsCrashes.httpsSocketFactoryFactoryClass();
+        }
+
+        return mHttpsSocketFactoryFactoryClass;
+    }
+
+    /**
+     * @param httpsSocketFactoryFactory  HttpsSocketFactoryFactory to set.
+     */
+    public void setHttpsSocketFactoryFactory(HttpsSocketFactoryFactory httpsSocketFactoryFactory) {
+        this.mHttpsSocketFactoryFactory = httpsSocketFactoryFactory;
+    }
+
+    public HttpsSocketFactoryFactory getHttpSocketFactoryFactory() {
+        if (mHttpsSocketFactoryFactory != null) {
+            return mHttpsSocketFactoryFactory;
+        }
+
+        final String httpsSocketFactoryFactoryClass = httpsSocketFactoryFactoryClass();
+        if (httpsSocketFactoryFactoryClass != null) {
+            try {
+                final Object object = reflectionHelper.create(mReportsCrashes.httpsSocketFactoryFactoryClass());
+                if (object instanceof HttpsSocketFactoryFactory) {
+                    mHttpsSocketFactoryFactory = (HttpsSocketFactoryFactory) object;
+                } else {
+                    ACRA.log.w(ACRA.LOG_TAG, "Using default httpsSocketFactoryFactory - not a HttpSocketFactoryFactory : " + httpsSocketFactoryFactoryClass);
+                }
+            } catch (ReflectionException e) {
+                ACRA.log.w(ACRA.LOG_TAG, "Using default httpsSocketFactoryFactory - Could not construct : " + httpsSocketFactoryFactoryClass);
+            }
+        }
+
+        // If it's still null then take the default
+        if (mHttpsSocketFactoryFactoryClass != null) {
+            mHttpsSocketFactoryFactory = DefaultHttpsSocketFactoryFactory.INSTANCE;
+        }
+
+        return mHttpsSocketFactoryFactory;
+    }
+
+
     @Override
     public Method httpMethod() {
         if (mHttpMethod != null) {
diff --git a/src/main/java/org/acra/ACRAConstants.java b/src/main/java/org/acra/ACRAConstants.java
index 3b3a9507..8415d3a7 100644
--- a/src/main/java/org/acra/ACRAConstants.java
+++ b/src/main/java/org/acra/ACRAConstants.java
@@ -48,6 +48,7 @@
 import static org.acra.ReportField.USER_EMAIL;
 import android.content.Context;
 
+
 /**
  * Responsible for collating those constants shared among the ACRA components.
  * <p/>
@@ -144,6 +145,8 @@
 
     public static final boolean DEFAULT_DISABLE_SSL_CERT_VALIDATION = false;
 
+    public static final String DEFAULT_HTTP_SOCKET_FACTORY_FACTORY_CLASS = "org.acra.util.DefaultHttpsSocketFactoryFactory";
+
     /**
      * Default list of {@link ReportField}s to be sent in email reports. You can
      * set your own list with
diff --git a/src/main/java/org/acra/SendWorker.java b/src/main/java/org/acra/SendWorker.java
index b0f6df81..1f804ab7 100644
--- a/src/main/java/org/acra/SendWorker.java
+++ b/src/main/java/org/acra/SendWorker.java
@@ -176,7 +176,7 @@ private void sendCrashReport(CrashReportData errorContent) throws ReportSenderEx
             boolean sentAtLeastOnce = false;
             for (ReportSender sender : reportSenders) {
                 try {
-                    sender.send(errorContent);
+                    sender.send(context, errorContent);
                     // If at least one sender worked, don't re-send the report
                     // later.
                     sentAtLeastOnce = true;
diff --git a/src/main/java/org/acra/annotation/ReportsCrashes.java b/src/main/java/org/acra/annotation/ReportsCrashes.java
index f5d8e9cf..174b7de8 100644
--- a/src/main/java/org/acra/annotation/ReportsCrashes.java
+++ b/src/main/java/org/acra/annotation/ReportsCrashes.java
@@ -535,6 +535,8 @@
      */
     boolean disableSSLCertValidation() default ACRAConstants.DEFAULT_DISABLE_SSL_CERT_VALIDATION;
 
+    String httpsSocketFactoryFactoryClass() default ACRAConstants.DEFAULT_HTTP_SOCKET_FACTORY_FACTORY_CLASS;
+
     /**
      * <p>
      * The {@link Method} to be used when posting with {@link #formKey()}.
diff --git a/src/main/java/org/acra/sender/EmailIntentSender.java b/src/main/java/org/acra/sender/EmailIntentSender.java
index f6e61260..fe78dbb4 100644
--- a/src/main/java/org/acra/sender/EmailIntentSender.java
+++ b/src/main/java/org/acra/sender/EmailIntentSender.java
@@ -39,7 +39,7 @@ public EmailIntentSender(Context ctx) {
     }
 
     @Override
-    public void send(CrashReportData errorContent) throws ReportSenderException {
+    public void send(Context context, CrashReportData errorContent) throws ReportSenderException {
 
         final String subject = mContext.getPackageName() + " Crash Report";
         final String body = buildBody(errorContent);
diff --git a/src/main/java/org/acra/sender/GoogleFormSender.java b/src/main/java/org/acra/sender/GoogleFormSender.java
index 75209e67..29b360ba 100644
--- a/src/main/java/org/acra/sender/GoogleFormSender.java
+++ b/src/main/java/org/acra/sender/GoogleFormSender.java
@@ -22,6 +22,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
+import android.content.Context;
 import org.acra.ACRA;
 import org.acra.ACRAConfiguration;
 import org.acra.ACRAConstants;
@@ -67,7 +68,7 @@ public GoogleFormSender(String formKey) {
     }
 
     @Override
-    public void send(CrashReportData report) throws ReportSenderException {
+    public void send(Context context, CrashReportData report) throws ReportSenderException {
         Uri formUri = mFormUri == null ? Uri.parse(String.format(ACRA.getConfig().googleFormUrlFormat(), ACRA
                 .getConfig().formKey())) : mFormUri;
         final Map<String, String> formParams = remap(report);
@@ -85,7 +86,7 @@ public void send(CrashReportData report) throws ReportSenderException {
             request.setConnectionTimeOut(ACRA.getConfig().connectionTimeout());
             request.setSocketTimeOut(ACRA.getConfig().socketTimeout());
             request.setMaxNrRetries(ACRA.getConfig().maxNumberOfRequestRetries());
-            request.send(reportUrl, Method.POST, HttpRequest.getParamsAsFormString(formParams), Type.FORM);
+            request.send(context, reportUrl, Method.POST, HttpRequest.getParamsAsFormString(formParams), Type.FORM);
 
         } catch (IOException e) {
             throw new ReportSenderException("Error while sending report to Google Form.", e);
diff --git a/src/main/java/org/acra/sender/HttpSender.java b/src/main/java/org/acra/sender/HttpSender.java
index 3581140b..5fcd8ed7 100644
--- a/src/main/java/org/acra/sender/HttpSender.java
+++ b/src/main/java/org/acra/sender/HttpSender.java
@@ -22,6 +22,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
+import android.content.Context;
 import org.acra.ACRA;
 import org.acra.ACRAConfiguration;
 import org.acra.ACRAConstants;
@@ -86,8 +87,8 @@
      */
     public enum Type {
         /**
-         * Send data as a www form encoded list of key/values. {@link http
-         * ://www.w3.org/TR/html401/interact/forms.html#h-17.13.4}
+         * Send data as a www form encoded list of key/values.
+         * {@see http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4}
          */
         FORM {
             @Override
@@ -200,7 +201,7 @@ public void setBasicAuth(String username, String password) {
     }    
 
     @Override
-    public void send(CrashReportData report) throws ReportSenderException {
+    public void send(Context context, CrashReportData report) throws ReportSenderException {
 
         try {
             URL reportUrl = mFormUri == null ? new URL(ACRA.getConfig().formUri()) : new URL(mFormUri.toString());
@@ -244,7 +245,7 @@ public void send(CrashReportData report) throws ReportSenderException {
             default:
                 throw new UnsupportedOperationException("Unknown method: " + mMethod.name());
             }
-            request.send(reportUrl, mMethod, reportAsString, mType);
+            request.send(context, reportUrl, mMethod, reportAsString, mType);
 
         } catch (IOException e) {
             throw new ReportSenderException("Error while sending " + ACRA.getConfig().reportType()
diff --git a/src/main/java/org/acra/sender/ReportSender.java b/src/main/java/org/acra/sender/ReportSender.java
index 7a18471a..b2a1781a 100644
--- a/src/main/java/org/acra/sender/ReportSender.java
+++ b/src/main/java/org/acra/sender/ReportSender.java
@@ -15,14 +15,14 @@
  */
 package org.acra.sender;
 
+import android.content.Context;
 import org.acra.collector.CrashReportData;
-import org.acra.ReportField;
 
 /**
  * A simple interface for defining various crash report senders. You can reuse
  * {@link HttpSender} to send reports to your custom server-side report
  * collection script even if you expect (or prefer) specific names for each
- * report field as {@link HttpSender#HttpPostSender(String, java.util.Map)}
+ * report field as {@link HttpSender#send(Context, CrashReportData)}
  * can take a Map<ReportField, String> as an input to convert each field name to
  * your preferred POST parameter name.
  * 
@@ -34,14 +34,17 @@
      * Send crash report data. You don't have to take care of managing Threads,
      * just implement what is necessary to handle the data. ACRA will use a
      * specific Thread (not the UI Thread) to run your sender.
-     * 
+     *
+     *
+     *
+     * @param context       Android Context in which to send the crash report.
      * @param errorContent
      *            Stores key/value pairs for each report field. A report field
-     *            is identified by a {@link ReportField} enum value.
+     *            is identified by a {@link org.acra.ReportField} enum value.
      * @throws ReportSenderException
      *             If anything goes fatally wrong during the handling of crash
      *             data, you can (should) throw a {@link ReportSenderException}
      *             with a custom message.
      */
-    public void send(CrashReportData errorContent) throws ReportSenderException;
+    public void send(Context context, CrashReportData errorContent) throws ReportSenderException;
 }
diff --git a/src/main/java/org/acra/util/DefaultHttpsSocketFactoryFactory.java b/src/main/java/org/acra/util/DefaultHttpsSocketFactoryFactory.java
new file mode 100644
index 00000000..47e716df
--- /dev/null
+++ b/src/main/java/org/acra/util/DefaultHttpsSocketFactoryFactory.java
@@ -0,0 +1,18 @@
+package org.acra.util;
+
+import android.content.Context;
+import org.apache.http.conn.scheme.SocketFactory;
+import org.apache.http.conn.ssl.SSLSocketFactory;
+
+/**
+ * Default implementation of a HttpSocketFactoryFactory.
+ */
+public final class DefaultHttpsSocketFactoryFactory implements HttpsSocketFactoryFactory {
+
+    public static final HttpsSocketFactoryFactory INSTANCE = new DefaultHttpsSocketFactoryFactory();
+
+    @Override
+    public SocketFactory create(Context context) {
+        return SSLSocketFactory.getSocketFactory();
+    }
+}
diff --git a/src/main/java/org/acra/util/HttpRequest.java b/src/main/java/org/acra/util/HttpRequest.java
index 502b1660..fae5872a 100644
--- a/src/main/java/org/acra/util/HttpRequest.java
+++ b/src/main/java/org/acra/util/HttpRequest.java
@@ -13,6 +13,7 @@
 import java.util.Iterator;
 import java.util.Map;
 
+import android.content.Context;
 import org.acra.ACRA;
 import org.acra.sender.HttpSender.Method;
 import org.acra.sender.HttpSender.Type;
@@ -30,6 +31,7 @@
 import org.apache.http.conn.scheme.PlainSocketFactory;
 import org.apache.http.conn.scheme.Scheme;
 import org.apache.http.conn.scheme.SchemeRegistry;
+import org.apache.http.conn.scheme.SocketFactory;
 import org.apache.http.conn.ssl.SSLSocketFactory;
 import org.apache.http.entity.StringEntity;
 import org.apache.http.impl.auth.BasicScheme;
@@ -129,6 +131,8 @@ public void setMaxNrRetries(int maxNrRetries) {
     /**
      * Posts to a URL.
      * 
+     *
+     * @param context
      * @param url
      *            URL to which to post.
      * @param content
@@ -136,9 +140,9 @@ public void setMaxNrRetries(int maxNrRetries) {
      * @throws IOException
      *             if the data cannot be posted.
      */
-    public void send(URL url, Method method, String content, Type type) throws IOException {
+    public void send(Context context, URL url, Method method, String content, Type type) throws IOException {
 
-        final HttpClient httpClient = getHttpClient();
+        final HttpClient httpClient = getHttpClient(context);
         final HttpEntityEnclosingRequestBase httpRequest = getHttpRequest(url, method, content, type);
 
         ACRA.log.d(ACRA.LOG_TAG, "Sending request to " + url);
@@ -196,7 +200,7 @@ public void send(URL url, Method method, String content, Type type) throws IOExc
     /**
      * @return HttpClient to use with this HttpRequest.
      */
-    private HttpClient getHttpClient() {
+    private HttpClient getHttpClient(Context context) {
         final HttpParams httpParams = new BasicHttpParams();
         httpParams.setParameter(ClientPNames.COOKIE_POLICY, CookiePolicy.RFC_2109);
         HttpConnectionParams.setConnectionTimeout(httpParams, connectionTimeOut);
@@ -208,7 +212,9 @@ private HttpClient getHttpClient() {
         if (ACRA.getConfig().disableSSLCertValidation()) {
             registry.register(new Scheme("https", (new FakeSocketFactory()), 443));
         } else {
-            registry.register(new Scheme("https", SSLSocketFactory.getSocketFactory(), 443));
+            final HttpsSocketFactoryFactory factory = ACRA.getConfig().getHttpSocketFactoryFactory();
+            final SocketFactory socketFactory = factory.create(context);
+            registry.register(new Scheme("https", socketFactory, 443));
         }
 
         final ClientConnectionManager clientConnectionManager = new ThreadSafeClientConnManager(httpParams, registry);
diff --git a/src/main/java/org/acra/util/HttpsSocketFactoryFactory.java b/src/main/java/org/acra/util/HttpsSocketFactoryFactory.java
new file mode 100644
index 00000000..398975d1
--- /dev/null
+++ b/src/main/java/org/acra/util/HttpsSocketFactoryFactory.java
@@ -0,0 +1,16 @@
+package org.acra.util;
+
+import android.content.Context;
+import org.apache.http.conn.scheme.SocketFactory;
+
+/**
+ * Factory that creates an instance of a Https SocketFactory.
+ */
+public interface HttpsSocketFactoryFactory {
+
+    /**
+     * @param context   Android context for which to create the SocketFactory.
+     * @return SocketFactory that was created.
+     */
+    public SocketFactory create(Context context);
+}
diff --git a/src/main/java/org/acra/util/ReflectionException.java b/src/main/java/org/acra/util/ReflectionException.java
new file mode 100644
index 00000000..16bb0e26
--- /dev/null
+++ b/src/main/java/org/acra/util/ReflectionException.java
@@ -0,0 +1,11 @@
+package org.acra.util;
+
+/**
+ * Thrown when an error occurs during reflection.
+ */
+public final class ReflectionException extends Exception  {
+
+    public ReflectionException(String msg, Throwable th) {
+        super(msg, th);
+    }
+}
diff --git a/src/main/java/org/acra/util/ReflectionHelper.java b/src/main/java/org/acra/util/ReflectionHelper.java
new file mode 100644
index 00000000..6463e309
--- /dev/null
+++ b/src/main/java/org/acra/util/ReflectionHelper.java
@@ -0,0 +1,20 @@
+package org.acra.util;
+
+/**
+ * Helps to construct objects via reflection.
+ */
+public final class ReflectionHelper {
+
+    public Object create(String className) throws ReflectionException {
+        try {
+            final Class clazz = Class.forName(className);
+            return clazz.newInstance();
+        } catch (ClassNotFoundException e) {
+            throw new ReflectionException("Could not find class : " + className, e);
+        } catch (InstantiationException e) {
+            throw new ReflectionException("Could not instantiate class : " + className, e);
+        } catch (IllegalAccessException e) {
+            throw new ReflectionException("Could not access class : " + className, e);
+        }
+    }
+}
diff --git a/src/test/java/org/acra/util/HttpRequestTest.java b/src/test/java/org/acra/util/HttpRequestTest.java
index 96c4781d..be1d5acb 100644
--- a/src/test/java/org/acra/util/HttpRequestTest.java
+++ b/src/test/java/org/acra/util/HttpRequestTest.java
@@ -7,6 +7,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
+import android.content.Context;
 import org.acra.ACRA;
 import org.acra.log.NonAndroidLog;
 import org.acra.sender.HttpSender.Method;
@@ -54,8 +55,12 @@ public void testSocketTimeOutCausesRequestToBeRetriedSeveralTimes_Issue63() thro
         request.setSocketTimeOut(100); // Set a very low SocketTimeOut. Something that will almost certainly fail.
         request.setMaxNrRetries(0);
 
+        // Context which will be used to create the SocketFactory
+        // Default HttpsSocketFactoryFactory doesn't require the Android Context.
+        final Context context = null;
+
         try {
-            request.send(url, Method.POST, HttpRequest.getParamsAsFormString(params), Type.FORM);
+            request.send(context, url, Method.POST, HttpRequest.getParamsAsFormString(params), Type.FORM);
             Assert.fail("Should not be able to get a response with an impossibly low SocketTimeOut");
         } catch (SocketTimeoutException e) {
             // as expected.
@@ -64,7 +69,7 @@ public void testSocketTimeOutCausesRequestToBeRetriedSeveralTimes_Issue63() thro
         // Tell the HttpRequest to retry on Socket time out.
         request.setMaxNrRetries(5);
         try {
-            request.send(url, Method.POST, HttpRequest.getParamsAsFormString(params), Type.FORM);
+            request.send(context, url, Method.POST, HttpRequest.getParamsAsFormString(params), Type.FORM);
         } catch (SocketTimeoutException e) {
             Assert.fail("Should not get a SocketTimeOut when using SocketTimeOutRetryHandler");
         }
