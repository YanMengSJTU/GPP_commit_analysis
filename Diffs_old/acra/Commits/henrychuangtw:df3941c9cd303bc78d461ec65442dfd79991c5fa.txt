diff --git a/.gitignore b/.gitignore
index 45390c3f..7b0d30b9 100644
--- a/.gitignore
+++ b/.gitignore
@@ -8,4 +8,5 @@ release.properties
 .idea/
 build/
 local.properties
-.gradle
\ No newline at end of file
+.gradle
+acratest/
\ No newline at end of file
diff --git a/acra/build.gradle b/acra/build.gradle
index 79fa8b42..5a058286 100644
--- a/acra/build.gradle
+++ b/acra/build.gradle
@@ -1,7 +1,8 @@
 apply plugin: 'com.android.library'
 apply plugin: 'signing'
-apply plugin: 'maven'
+apply plugin: 'com.github.dcendents.android-maven'
 apply plugin: 'net.researchgate.release'
+apply plugin: 'com.jfrog.artifactory'
 
 android {
     compileSdkVersion Integer.parseInt(androidVersion)
@@ -27,32 +28,46 @@ android {
 dependencies {
     compile "com.android.support:support-v4:$supportVersion"
     compile "com.android.support:support-annotations:$supportVersion"
-    annotationProcessor project(":annotationprocessor")
+    annotationProcessor project(':annotationprocessor')
+    provided project(':annotations')
 }
 
-
 /*
-* How to oss upload:
-* Edit or create the file at ~/.gradle/gradle.properties and add
-* ossrhUser = <OSSRH user>
-* ossrhPassword = <OSSRH password>
+*   How to oss upload:
+*
+*   Edit or create the file at ~/.gradle/gradle.properties and add
 * signing.keyId=<short ID of your key>
 * signing.password=<passphrase for your key>
 * signing.secretKeyRingFile=<path to your key ring>
-*
-* Then run
+*   Optional, depending on upload destination
+* ossrhUser=<OSSRH user>
+* ossrhPassword=<OSSRH password>
+* artifactoryApiKey=<artifactory key>
+* artifactoryUser=<jfrog artifactory user>
+
+*   Then run for ossrh upload
 * gradlew release
+*
+*   Or for jfrog oss artifactory
+* gradlew artifactoryPublish
 */
 
-release{
+release {
     failOnUnversionedFiles = false
     failOnCommitNeeded = false
     tagTemplate = '$name-$version'
-    git{
+    git {
         requireBranch = ""
     }
 }
-afterReleaseBuild.dependsOn ':closeAndPromoteRepository'
+
+afterReleaseBuild {
+    dependsOn rootProject.closeAndPromoteRepository
+}
+
+rootProject.closeRepository {
+    dependsOn uploadArchives
+}
 
 task sourcesJar(type: Jar) {
     from android.sourceSets.main.java.srcDirs
@@ -61,9 +76,8 @@ task sourcesJar(type: Jar) {
 
 task javadoc(type: Javadoc) {
     source = android.sourceSets.main.java.srcDirs
-    source += files('build/generated/source/aidl/release') + files('build/generated/source/buildConfig/release')
+    source += files('build/generated/source/aidl/release') + files('build/generated/source/buildConfig/release') + files('build/generated/source/apt/release')
     classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
-    failOnError false
 }
 
 afterEvaluate {
@@ -83,53 +97,62 @@ artifacts {
 }
 
 signing {
+    required { signing.keyId != "" }
     sign configurations.archives
 }
 
+ext.createPom = { pom ->
+    pom.project {
+        name 'Application Crash Report for Android'
+        description 'Publishes a report of an Android application crash to an end point.'
+        packaging 'aar'
+        url 'http://acra.ch'
+
+        scm {
+            connection 'scm:git:https://github.com/ACRA/acra.git'
+            developerConnection 'scm:git:git@github.com:ACRA/acra.git'
+            url 'https://github.com/ACRA/acra.git'
+        }
+
+        licenses {
+            license {
+                name 'Apache 2'
+                url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
+                distribution 'repo'
+            }
+        }
+
+        developers {
+            developer {
+                id = 'kevin.gaudin'
+                name = 'Kevin Gaudin'
+            }
+            developer {
+                id = 'william.ferguson'
+                name = 'William Ferguson'
+            }
+            developer {
+                id = 'f43nd1r'
+                name = 'Lukas Morawietz'
+            }
+        }
+    }
+}
+
+install {
+    repositories.mavenInstaller {
+        createPom(pom)
+    }
+}
+
 uploadArchives {
     repositories {
         mavenDeployer {
-            // POM signature
             beforeDeployment { deployment -> signing.signPom(deployment) }
-            // Target repository
             repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
                 authentication(userName: ossrhUser, password: ossrhPassword)
             }
-            pom.project {
-                name 'Application Crash Report for Android'
-                description 'Publishes a report of an Android application crash to Google docs (or some other end point).'
-                packaging 'aar'
-                url 'http://acra.ch'
-
-                scm {
-                    connection 'scm:git:https://github.com/ACRA/acra.git'
-                    developerConnection 'scm:git:git@github.com:ACRA/acra.git'
-                    url 'https://github.com/ACRA/acra.git'
-                }
-
-                licenses {
-                    license {
-                        name 'Apache 2'
-                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
-                        distribution 'repo'
-                    }
-                }
-
-                developers {
-                    developer {
-                        id = 'kevin.gaudin'
-                        name = 'Kevin Gaudin'
-                    }
-                    developer {
-                        id = 'william.ferguson'
-                        name = 'William Ferguson'
-                    }
-                    developer {
-                        id = 'f43nd1r'
-                        name = 'Lukas Morawietz'
-                    }
-                }
-            }
+            createPom(pom)
         }
     }
 }
@@ -139,3 +162,33 @@ nexusStaging {
     password = ossrhPassword
     packageGroup = group
 }
+
+artifactory {
+    contextUrl = 'https://oss.jfrog.org/artifactory'
+    publish {
+        repository {
+            repoKey = version.endsWith('SNAPSHOT') ? 'oss-snapshot-local' : 'oss-release-local'
+            username = artifactoryUser
+            password = artifactoryApiKey
+            maven = true
+        }
+        defaults {
+            publishConfigs('archives')
+            publishPom = true
+            publishIvy = false
+        }
+    }
+    resolve {
+        repository {
+            repoKey = 'jcenter'
+            username = artifactoryUser
+            password = artifactoryApiKey
+        }
+    }
+}
+
+artifactoryPublish {
+    dependsOn javadocJar
+    dependsOn sourcesJar
+    dependsOn install
+}
diff --git a/acra/gradle.properties b/acra/gradle.properties
index 9ca6f9a3..f89e19a5 100644
--- a/acra/gradle.properties
+++ b/acra/gradle.properties
@@ -4,4 +4,11 @@ archivesBaseName=acra
 androidVersion=23
 supportVersion=24.1.1
 proguardFile=src/main/proguard/proguard.cfg
-release.useAutomaticVersion=true
\ No newline at end of file
+release.useAutomaticVersion=true
+ossrhUser=
+ossrhPassword=
+signing.keyId=
+signing.password=
+signing.secretKeyRingFile=
+artifactoryApiKey=
+artifactoryUser=
\ No newline at end of file
diff --git a/acra/src/main/java/org/acra/CrashReportDialog.java b/acra/src/main/java/org/acra/CrashReportDialog.java
index f113167f..ab733636 100644
--- a/acra/src/main/java/org/acra/CrashReportDialog.java
+++ b/acra/src/main/java/org/acra/CrashReportDialog.java
@@ -10,6 +10,7 @@
  *
  * @deprecated since 4.8.0 use {@link org.acra.dialog.CrashReportDialog} instead
  **/
+@Deprecated
 public final class CrashReportDialog extends org.acra.dialog.CrashReportDialog {
 
     @Override
diff --git a/acra/src/main/java/org/acra/ErrorReporter.java b/acra/src/main/java/org/acra/ErrorReporter.java
index 94e2738a..1006a339 100644
--- a/acra/src/main/java/org/acra/ErrorReporter.java
+++ b/acra/src/main/java/org/acra/ErrorReporter.java
@@ -52,12 +52,12 @@
  * directory. This report file is then sent:
  * </p>
  * <ul>
- * <li>immediately if {@link ReportsCrashes#mode} is set to
+ * <li>immediately if {@link ReportsCrashes#reportingInteractionMode()} is set to
  * {@link ReportingInteractionMode#SILENT} or
  * {@link ReportingInteractionMode#TOAST},</li>
  * <li>on application start if in the previous case the transmission could not
  * technically be made,</li>
- * <li>when the user accepts to send it if {@link ReportsCrashes#mode()} is set
+ * <li>when the user accepts to send it if {@link ReportsCrashes#reportingInteractionMode()} is set
  * to {@link ReportingInteractionMode#NOTIFICATION}.</li>
  * </ul>
  * <p>
diff --git a/acra/src/main/java/org/acra/annotation/ReportsCrashes.java b/acra/src/main/java/org/acra/annotation/ReportsCrashes.java
index 642bb07b..37cd3304 100644
--- a/acra/src/main/java/org/acra/annotation/ReportsCrashes.java
+++ b/acra/src/main/java/org/acra/annotation/ReportsCrashes.java
@@ -15,9 +15,6 @@
  */
 package org.acra.annotation;
 
-import android.content.Context;
-import android.content.SharedPreferences;
-import android.preference.PreferenceManager;
 import android.support.annotation.DrawableRes;
 import android.support.annotation.NonNull;
 import android.support.annotation.RawRes;
@@ -40,8 +37,7 @@
 import org.acra.security.KeyStoreFactory;
 import org.acra.security.NoKeyStoreFactory;
 import org.acra.sender.DefaultReportSenderFactory;
-import org.acra.sender.HttpSender.Method;
-import org.acra.sender.HttpSender.Type;
+import org.acra.sender.HttpSender;
 import org.acra.sender.ReportSenderFactory;
 
 import java.lang.annotation.Documented;
@@ -53,9 +49,7 @@
 
 /**
  * Provide configuration elements to the
- * {@link ACRA#init(android.app.Application)} method. The only mandatory
- * configuration item is the {@link #formUri()} parameter which is the Uri
- * to the server that will receive your reports.
+ * {@link ACRA#init(android.app.Application)} method.
  *
  * @author Kevin Gaudin
  */
@@ -67,9 +61,7 @@
 public @interface ReportsCrashes {
 
     /**
-     * The Uri of your own server-side script that will receive reports. This is
-     * to use if you don't want to send reports to Google Docs but to your own,
-     * self-hosted script.
+     * The Uri of your own server-side script that will receive reports.
      *
      * @return URI of a custom server to which to post reports.
      */
@@ -193,29 +185,29 @@
      * can make accessible to your users through a preferences screen:
      * <ul>
      * <li>
-     * {@link ACRA#PREF_DISABLE_ACRA} or {@link ACRA#PREF_ENABLE_ACRA}</li>
+     * {@link org.acra.ACRA#PREF_DISABLE_ACRA} or {@link org.acra.ACRA#PREF_ENABLE_ACRA}</li>
      * <li>
-     * {@link ACRA#PREF_ALWAYS_ACCEPT}</li>
+     * {@link org.acra.ACRA#PREF_ALWAYS_ACCEPT}</li>
      * <li>
-     * {@link ACRA#PREF_ENABLE_DEVICE_ID}</li>
+     * {@link org.acra.ACRA#PREF_ENABLE_DEVICE_ID}</li>
      * <li>
-     * {@link ACRA#PREF_ENABLE_SYSTEM_LOGS}</li>
+     * {@link org.acra.ACRA#PREF_ENABLE_SYSTEM_LOGS}</li>
      * </ul>
      * preference. Default is to use the application default
      * SharedPreferences, as retrieved with
-     * {@link PreferenceManager#getDefaultSharedPreferences(Context)}.
+     * {@link android.preference.PreferenceManager#getDefaultSharedPreferences(android.content.Context)}.
      */
     @NonNull String sharedPreferencesName() default ACRAConstants.DEFAULT_STRING_VALUE;
 
     /**
      * If using a custom {@link ReportsCrashes#sharedPreferencesName()}, pass
      * here the mode that you need for the SharedPreference file creation:
-     * {@link Context#MODE_PRIVATE}, {@link Context#MODE_WORLD_READABLE} or
-     * {@link Context#MODE_WORLD_WRITEABLE}. Default is
-     * {@link Context#MODE_PRIVATE}.
+     * {@link android.content.Context#MODE_PRIVATE}, {@link android.content.Context#MODE_WORLD_READABLE} or
+     * {@link android.content.Context#MODE_WORLD_WRITEABLE}. Default is
+     * {@link android.content.Context#MODE_PRIVATE}.
      *
      * @return Mode to use with the SharedPreference creation.
-     * @see Context#getSharedPreferences(String, int)
+     * @see android.content.Context#getSharedPreferences(String, int)
      */
     int sharedPreferencesMode() default ACRAConstants.DEFAULT_SHARED_PREFERENCES_MODE;
 
@@ -260,12 +252,10 @@
      * Arguments to be passed to the logcat command line. Default is { "-t",
      * "100", "-v", "time" } for:
      * </p>
-     * <p>
      * <pre>
      * logcat -t 100 -v time
      * </pre>
      * <p>
-     * <p>
      * Do not include -b arguments for buffer selection, include
      * {@link ReportField#EVENTSLOG} and {@link ReportField#RADIOLOG} in
      * {@link ReportsCrashes#customReportContent()} to activate alternative
@@ -273,7 +263,6 @@
      * provided here.
      * </p>
      * <p>
-     * <p>
      * See <a href=
      * "http://developer.android.com/intl/fr/guide/developing/tools/adb.html#logcatoptions"
      * >Listing of logcat Command Options</a>.
@@ -307,8 +296,7 @@
     /**
      * <p>
      * Redefines the list of {@link ReportField}s collected and sent in your
-     * reports. If you modify this list, you have to create a new Google Drive
-     * Spreadsheet &amp; Form which will be based on these fields as column headers.
+     * reports.
      * </p>
      * <p>
      * The fields order is significant. You can also use this property to modify
@@ -471,7 +459,7 @@
     boolean alsoReportToAndroidFramework() default ACRAConstants.DEFAULT_REPORT_TO_ANDROID_FRAMEWORK;
 
     /**
-     * Add here your {@link SharedPreferences} identifier Strings if you use
+     * Add here your {@link android.content.SharedPreferences} identifier Strings if you use
      * others than your application's default. They will be added to the
      * {@link ReportField#SHARED_PREFERENCES} field.
      *
@@ -551,11 +539,11 @@
      * To use in combination with {@link ReportField#APPLICATION_LOG} to set the
      * path/name of your application log file. If the string does not contain
      * any path separator, the file is assumed as being in
-     * {@link Context#getFilesDir()}.
+     * {@link android.content.Context#getFilesDir()}.
      *
      * @return a String containing the path/name of your application log file.
      * If the string does not contain any path separator, the file is
-     * assumed as being in {@link Context#getFilesDir()}.
+     * assumed as being in {@link android.content.Context#getFilesDir()}.
      */
     @NonNull String applicationLogFile() default ACRAConstants.DEFAULT_APPLICATION_LOGFILE;
 
@@ -589,14 +577,21 @@
 
     /**
      * <p>
-     * The {@link Method} to be used when posting with {@link #formUri()}.
+     * The {@link HttpSender.Method} to be used when posting with {@link #formUri()}.
      * </p>
      *
      * @return HTTP method used when posting reports.
      */
-    @NonNull Method httpMethod() default Method.POST;
+    @NonNull HttpSender.Method httpMethod() default HttpSender.Method.POST;
 
-    @NonNull Type reportType() default Type.FORM;
+    /**
+     * <p>
+     * The {@link HttpSender.Type} to be used when posting with {@link #formUri()}.
+     * </p>
+     *
+     * @return the report type used when posting reports
+     */
+    @NonNull HttpSender.Type reportType() default HttpSender.Type.FORM;
 
     /**
      * @return Class which creates a keystore that can contain trusted certificates
@@ -660,4 +655,9 @@
      * @since 4.9.3
      */
     @NonNull Class<? extends AttachmentUriProvider> attachmentUriProvider() default DefaultAttachmentProvider.class;
+
+    /**
+     * @return if the report should be an attachment instead of plain text. Supported for email mode.
+     */
+    boolean reportAsFile() default false;
 }
diff --git a/acra/src/main/java/org/acra/attachment/AcraContentProvider.java b/acra/src/main/java/org/acra/attachment/AcraContentProvider.java
index 70c176af..1a0c4554 100644
--- a/acra/src/main/java/org/acra/attachment/AcraContentProvider.java
+++ b/acra/src/main/java/org/acra/attachment/AcraContentProvider.java
@@ -18,7 +18,6 @@
 
 import android.content.ContentProvider;
 import android.content.ContentValues;
-import android.content.UriMatcher;
 import android.database.Cursor;
 import android.database.MatrixCursor;
 import android.net.Uri;
@@ -48,23 +47,19 @@
 public class AcraContentProvider extends ContentProvider {
     private static final String[] COLUMNS = {
             OpenableColumns.DISPLAY_NAME, OpenableColumns.SIZE};
-    private static final String ANY_MATCH = "/*";
-    private UriMatcher uriMatcher;
+    private String authority;
 
     @Override
     public boolean onCreate() {
-        final String authority = getContext().getPackageName() + ".acra";
+        authority = getContext().getPackageName() + ".acra";
         if (ACRA.DEV_LOGGING) ACRA.log.d(ACRA.LOG_TAG, "Registered content provider for authority " + authority);
-        uriMatcher = new UriMatcher(UriMatcher.NO_MATCH);
-        for (Directory directory : Directory.values()) {
-            uriMatcher.addURI(authority, directory.name().toLowerCase() + ANY_MATCH, directory.ordinal());
-        }
         return true;
     }
 
     @Nullable
     @Override
     public Cursor query(@NonNull Uri uri, @Nullable String[] projection, @Nullable String selection, @Nullable String[] selectionArgs, @Nullable String sortOrder) {
+        if (ACRA.DEV_LOGGING) ACRA.log.d(ACRA.LOG_TAG, "Query: " + uri);
         final File file = getFileForUri(uri);
         if (file == null) {
             return null;
@@ -87,8 +82,7 @@ public Cursor query(@NonNull Uri uri, @Nullable String[] projection, @Nullable S
 
     @Nullable
     private File getFileForUri(Uri uri) {
-        final int match = uriMatcher.match(uri);
-        if (match == UriMatcher.NO_MATCH) {
+        if(!"content".equals(uri.getScheme()) || !authority.equals(uri.getAuthority())){
             return null;
         }
         final List<String> segments = new ArrayList<String>(uri.getPathSegments());
@@ -129,10 +123,10 @@ public int update(@NonNull Uri uri, @Nullable ContentValues values, @Nullable St
     public ParcelFileDescriptor openFile(@NonNull Uri uri, @NonNull String mode) throws FileNotFoundException {
         final File file = getFileForUri(uri);
         if (file == null || !file.exists()) throw new FileNotFoundException("File represented by uri " + uri + " could not be found");
-        if(ACRA.DEV_LOGGING) {
+        if (ACRA.DEV_LOGGING) {
             if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
                 ACRA.log.d(ACRA.LOG_TAG, getCallingPackage() + " opened " + file.getPath());
-            }else {
+            } else {
                 ACRA.log.d(ACRA.LOG_TAG, file.getPath() + " was opened by an application");
             }
         }
diff --git a/acra/src/main/java/org/acra/collector/ConfigurationCollector.java b/acra/src/main/java/org/acra/collector/ConfigurationCollector.java
index ee5c0385..705b5f43 100644
--- a/acra/src/main/java/org/acra/collector/ConfigurationCollector.java
+++ b/acra/src/main/java/org/acra/collector/ConfigurationCollector.java
@@ -95,7 +95,7 @@ Element collect(ReportField reportField, ReportBuilder reportBuilder) {
     @NonNull
     private static Element configToElement(@NonNull Configuration conf) {
         final ComplexElement result = new ComplexElement();
-        Map<String, SparseArray<String>> valueArrays = getValueArrays();
+        final Map<String, SparseArray<String>> valueArrays = getValueArrays();
         for (final Field f : conf.getClass().getFields()) {
             try {
                 if (!Modifier.isStatic(f.getModifiers())) {
@@ -120,7 +120,7 @@ private static Element configToElement(@NonNull Configuration conf) {
     }
 
     private static Map<String, SparseArray<String>> getValueArrays() {
-        Map<String, SparseArray<String>> valueArrays = new HashMap<String, SparseArray<String>>();
+        final Map<String, SparseArray<String>> valueArrays = new HashMap<String, SparseArray<String>>();
         final SparseArray<String> hardKeyboardHiddenValues = new SparseArray<String>();
         final SparseArray<String> keyboardValues = new SparseArray<String>();
         final SparseArray<String> keyboardHiddenValues = new SparseArray<String>();
diff --git a/acra/src/main/java/org/acra/collector/CrashReportDataFactory.java b/acra/src/main/java/org/acra/collector/CrashReportDataFactory.java
index 7b95ab65..fead91d7 100644
--- a/acra/src/main/java/org/acra/collector/CrashReportDataFactory.java
+++ b/acra/src/main/java/org/acra/collector/CrashReportDataFactory.java
@@ -148,8 +148,8 @@ public CrashReportData createCrashData(@NonNull ReportBuilder builder) {
     }
 
     private List<Collector> getCollectorsOrdered() {
-        List<Collector> collectors = new ArrayList<Collector>();
-        PackageManagerWrapper pm = new PackageManagerWrapper(context);
+        final List<Collector> collectors = new ArrayList<Collector>();
+        final PackageManagerWrapper pm = new PackageManagerWrapper(context);
         collectors.add(new LogCatCollector(config, pm));
         collectors.add(new DropBoxCollector(context, config, pm));
         collectors.add(new StacktraceCollector());
diff --git a/acra/src/main/java/org/acra/collector/DeviceIdCollector.java b/acra/src/main/java/org/acra/collector/DeviceIdCollector.java
index d94229a7..f3c74d9b 100644
--- a/acra/src/main/java/org/acra/collector/DeviceIdCollector.java
+++ b/acra/src/main/java/org/acra/collector/DeviceIdCollector.java
@@ -62,7 +62,7 @@ boolean shouldCollect(Set<ReportField> crashReportFields, ReportField collect, R
     @NonNull
     @Override
     Element collect(ReportField reportField, ReportBuilder reportBuilder) {
-        String result = getDeviceId();
+        final String result = getDeviceId();
         return result != null ? new StringElement(result) : ACRAConstants.NOT_AVAILABLE;
     }
 
diff --git a/acra/src/main/java/org/acra/collector/DisplayManagerCollector.java b/acra/src/main/java/org/acra/collector/DisplayManagerCollector.java
index 82eed946..01afb1af 100644
--- a/acra/src/main/java/org/acra/collector/DisplayManagerCollector.java
+++ b/acra/src/main/java/org/acra/collector/DisplayManagerCollector.java
@@ -148,7 +148,7 @@ private static void collectCurrentSizeRange(@NonNull Display display, @NonNull J
             final Point smallest = new Point();
             final Point largest = new Point();
             display.getCurrentSizeRange(smallest, largest);
-            JSONObject result = new JSONObject();
+            final JSONObject result = new JSONObject();
             result.put("smallest", new JSONArray(Arrays.asList(smallest.x, smallest.y)));
             result.put("largest", new JSONArray(Arrays.asList(largest.x, largest.y)));
             container.put("currentSizeRange", result);
@@ -179,7 +179,7 @@ private static void collectName(@NonNull Display display, JSONObject container)
     private static void collectMetrics(@NonNull Display display, JSONObject container) throws JSONException {
         final DisplayMetrics metrics = new DisplayMetrics();
         display.getMetrics(metrics);
-        JSONObject result = new JSONObject();
+        final JSONObject result = new JSONObject();
         collectMetrics(metrics, result);
         container.put("metrics", result);
     }
@@ -188,7 +188,7 @@ private static void collectRealMetrics(@NonNull Display display, JSONObject cont
         if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
             final DisplayMetrics metrics = new DisplayMetrics();
             display.getRealMetrics(metrics);
-            JSONObject result = new JSONObject();
+            final JSONObject result = new JSONObject();
             collectMetrics(metrics, result);
             container.put("realMetrics", result);
         }
diff --git a/acra/src/main/java/org/acra/collector/MediaCodecListCollector.java b/acra/src/main/java/org/acra/collector/MediaCodecListCollector.java
index 44f72b32..21fd5673 100644
--- a/acra/src/main/java/org/acra/collector/MediaCodecListCollector.java
+++ b/acra/src/main/java/org/acra/collector/MediaCodecListCollector.java
@@ -162,11 +162,11 @@ private Element collectMediaCodecList() throws JSONException {
         final ComplexElement result = new ComplexElement();
         for (int i = 0; i < infos.length; i++) {
             final MediaCodecInfo codecInfo = infos[i];
-            JSONObject codec = new JSONObject();
+            final JSONObject codec = new JSONObject();
             final String[] supportedTypes = codecInfo.getSupportedTypes();
             codec.put("name", codecInfo.getName())
                     .put("isEncoder", codecInfo.isEncoder());
-            JSONObject supportedTypesJson = new JSONObject();
+            final JSONObject supportedTypesJson = new JSONObject();
             for (String type : supportedTypes) {
                 supportedTypesJson.put(type, collectCapabilitiesForType(codecInfo, type));
             }
@@ -194,7 +194,7 @@ private JSONObject collectCapabilitiesForType(@NonNull final MediaCodecInfo code
         // Color Formats
         final int[] colorFormats = codecCapabilities.colorFormats;
         if (colorFormats.length > 0) {
-            JSONArray colorFormatsJson = new JSONArray();
+            final JSONArray colorFormatsJson = new JSONArray();
             for (int colorFormat : colorFormats) {
                 colorFormatsJson.put(mColorFormatValues.get(colorFormat));
             }
@@ -206,7 +206,7 @@ private JSONObject collectCapabilitiesForType(@NonNull final MediaCodecInfo code
         // Profile Levels
         final MediaCodecInfo.CodecProfileLevel[] codecProfileLevels = codecCapabilities.profileLevels;
         if (codecProfileLevels.length > 0) {
-            JSONArray profileLevels = new JSONArray();
+            final JSONArray profileLevels = new JSONArray();
             for (MediaCodecInfo.CodecProfileLevel codecProfileLevel : codecProfileLevels) {
                 final int profileValue = codecProfileLevel.profile;
                 final int levelValue = codecProfileLevel.level;
diff --git a/acra/src/main/java/org/acra/collector/PackageManagerCollector.java b/acra/src/main/java/org/acra/collector/PackageManagerCollector.java
index 2abee1e5..9d88e98a 100644
--- a/acra/src/main/java/org/acra/collector/PackageManagerCollector.java
+++ b/acra/src/main/java/org/acra/collector/PackageManagerCollector.java
@@ -43,7 +43,7 @@
     @NonNull
     @Override
     Element collect(ReportField reportField, ReportBuilder reportBuilder) {
-        PackageInfo info = pm.getPackageInfo();
+        final PackageInfo info = pm.getPackageInfo();
         if (info != null) {
             switch (reportField) {
                 case APP_VERSION_NAME:
diff --git a/acra/src/main/java/org/acra/collector/ReflectionCollector.java b/acra/src/main/java/org/acra/collector/ReflectionCollector.java
index e4dc768e..d4fcd059 100644
--- a/acra/src/main/java/org/acra/collector/ReflectionCollector.java
+++ b/acra/src/main/java/org/acra/collector/ReflectionCollector.java
@@ -109,12 +109,12 @@ private static void collectStaticGettersResults(@NonNull Class<?> someClass, JSO
     @NonNull
     @Override
     Element collect(ReportField reportField, ReportBuilder reportBuilder) {
-        ComplexElement result = new ComplexElement();
+        final ComplexElement result = new ComplexElement();
         try {
             switch (reportField) {
                 case BUILD:
                     collectConstants(Build.class, result);
-                    JSONObject version = new JSONObject();
+                    final JSONObject version = new JSONObject();
                     collectConstants(Build.VERSION.class, version);
                     result.put("VERSION", version);
                     break;
diff --git a/acra/src/main/java/org/acra/collector/SharedPreferencesCollector.java b/acra/src/main/java/org/acra/collector/SharedPreferencesCollector.java
index f3f4082c..686b2cef 100644
--- a/acra/src/main/java/org/acra/collector/SharedPreferencesCollector.java
+++ b/acra/src/main/java/org/acra/collector/SharedPreferencesCollector.java
@@ -89,7 +89,7 @@ private Element collect() throws JSONException {
             if (prefEntries.isEmpty()) {
                 result.put(sharedPrefId, "empty");
             } else {
-                for (Iterator<String> iterator = prefEntries.keySet().iterator(); iterator.hasNext();){
+                for (final Iterator<String> iterator = prefEntries.keySet().iterator(); iterator.hasNext();){
                     if(filteredKey(iterator.next())){
                         iterator.remove();
                     }
@@ -122,7 +122,7 @@ private boolean filteredKey(@NonNull String key) {
     Element collect(ReportField reportField, ReportBuilder reportBuilder) {
         switch (reportField) {
             case USER_EMAIL:
-                String email = prefs.getString(ACRA.PREF_USER_EMAIL_ADDRESS, null);
+                final String email = prefs.getString(ACRA.PREF_USER_EMAIL_ADDRESS, null);
                 return email != null ? new StringElement(email) : ACRAConstants.NOT_AVAILABLE;
             case SHARED_PREFERENCES:
                 try {
diff --git a/acra/src/main/java/org/acra/collector/SimpleValuesCollector.java b/acra/src/main/java/org/acra/collector/SimpleValuesCollector.java
index f57f3899..993541f7 100644
--- a/acra/src/main/java/org/acra/collector/SimpleValuesCollector.java
+++ b/acra/src/main/java/org/acra/collector/SimpleValuesCollector.java
@@ -104,9 +104,9 @@ private static String getLocalIpAddress() {
         final StringBuilder result = new StringBuilder();
         boolean first = true;
         try {
-            for (Enumeration<NetworkInterface> en = NetworkInterface.getNetworkInterfaces(); en.hasMoreElements(); ) {
+            for (final Enumeration<NetworkInterface> en = NetworkInterface.getNetworkInterfaces(); en.hasMoreElements(); ) {
                 final NetworkInterface intf = en.nextElement();
-                for (Enumeration<InetAddress> enumIpAddr = intf.getInetAddresses(); enumIpAddr.hasMoreElements(); ) {
+                for (final Enumeration<InetAddress> enumIpAddr = intf.getInetAddresses(); enumIpAddr.hasMoreElements(); ) {
                     final InetAddress inetAddress = enumIpAddr.nextElement();
                     if (!inetAddress.isLoopbackAddress()) {
                         if (!first) {
diff --git a/acra/src/main/java/org/acra/collector/ThreadCollector.java b/acra/src/main/java/org/acra/collector/ThreadCollector.java
index aab9e7d4..f45bfb0f 100644
--- a/acra/src/main/java/org/acra/collector/ThreadCollector.java
+++ b/acra/src/main/java/org/acra/collector/ThreadCollector.java
@@ -43,7 +43,7 @@
     @NonNull
     @Override
     Element collect(ReportField reportField, ReportBuilder reportBuilder) {
-        Thread t = reportBuilder.getUncaughtExceptionThread();
+        final Thread t = reportBuilder.getUncaughtExceptionThread();
         final ComplexElement result = new ComplexElement();
         if (t != null) {
             try {
diff --git a/acra/src/main/java/org/acra/collector/TimeCollector.java b/acra/src/main/java/org/acra/collector/TimeCollector.java
index a34fb4f5..1b176219 100644
--- a/acra/src/main/java/org/acra/collector/TimeCollector.java
+++ b/acra/src/main/java/org/acra/collector/TimeCollector.java
@@ -51,7 +51,7 @@ boolean shouldCollect(Set<ReportField> crashReportFields, ReportField collect, R
     @NonNull
     @Override
     Element collect(ReportField reportField, ReportBuilder reportBuilder) {
-        Calendar time;
+        final Calendar time;
         switch (reportField) {
             case USER_APP_START_DATE:
                 time = appStartDate;
diff --git a/acra/src/main/java/org/acra/config/ConfigurationBuilder.java b/acra/src/main/java/org/acra/config/ConfigurationBuilder.java
index 3b4f6aa1..19781b2e 100644
--- a/acra/src/main/java/org/acra/config/ConfigurationBuilder.java
+++ b/acra/src/main/java/org/acra/config/ConfigurationBuilder.java
@@ -20,7 +20,7 @@
 
 import org.acra.ACRA;
 import org.acra.ReportField;
-import org.acra.annotation.Hide;
+import org.acra.annotation.NoPropagation;
 import org.acra.dialog.CrashReportDialog;
 import org.acra.sender.HttpSender;
 
@@ -36,15 +36,13 @@
 import static org.acra.ACRAConstants.*;
 
 /**
- * Builder responsible for programmatic construction of an {@link ACRAConfiguration}.
- *
- * {@link ACRAConfiguration} should be considered immutable and in the future will be.
+ * Builder responsible for programmatic construction of an immutable {@link ACRAConfiguration}.
  *
  * @since 4.8.1
  */
 @SuppressWarnings("unused")
 @org.acra.annotation.ConfigurationBuilder
-public final class ConfigurationBuilder extends BaseConfigurationBuilder{
+public final class ConfigurationBuilder extends BaseConfigurationBuilder<ConfigurationBuilder> {
 
     private final Map<String, String> httpHeaders;
     private final Map<ReportField, Boolean> reportContentChanges;
@@ -71,7 +69,7 @@ public ConfigurationBuilder(@NonNull Application app) {
      * @return new ACRAConfiguration containing all the properties configured on this builder.
      * @throws ACRAConfigurationException if the required values for the configured notification mode have not been provided.
      */
-    @Hide
+    @NoPropagation
     @NonNull
     public ACRAConfiguration build() throws ACRAConfigurationException {
 
@@ -154,7 +152,7 @@ public ConfigurationBuilder setHttpHeaders(@NonNull Map<String, String> headers)
         return httpHeaders;
     }
 
-    @Hide
+    @NoPropagation
     @NonNull
     @Override
     ReportField[] customReportContent() {
diff --git a/acra/src/main/java/org/acra/file/LastModifiedComparator.java b/acra/src/main/java/org/acra/file/LastModifiedComparator.java
index a12a5e18..0bcaa808 100644
--- a/acra/src/main/java/org/acra/file/LastModifiedComparator.java
+++ b/acra/src/main/java/org/acra/file/LastModifiedComparator.java
@@ -11,8 +11,8 @@
 final class LastModifiedComparator implements Comparator<File> {
     @Override
     public int compare(@NonNull File lhs, @NonNull File rhs) {
-        long l = lhs.lastModified();
-        long r = rhs.lastModified();
+        final long l = lhs.lastModified();
+        final long r = rhs.lastModified();
         return l < r ? -1 : (l == r ? 0 : 1);
     }
 }
diff --git a/acra/src/main/java/org/acra/legacy/ReportConverter.java b/acra/src/main/java/org/acra/legacy/ReportConverter.java
index 071c1191..b4df7b5e 100644
--- a/acra/src/main/java/org/acra/legacy/ReportConverter.java
+++ b/acra/src/main/java/org/acra/legacy/ReportConverter.java
@@ -74,7 +74,7 @@ void convert() {
             InputStream in = null;
             try {
                 in = new BufferedInputStream(new FileInputStream(report), ACRAConstants.DEFAULT_BUFFER_SIZE_IN_BYTES);
-                CrashReportData data = legacyLoad(new InputStreamReader(in, "ISO8859-1")); //$NON-NLS-1$
+                final CrashReportData data = legacyLoad(new InputStreamReader(in, "ISO8859-1")); //$NON-NLS-1$
                 if (data.containsKey(ReportField.REPORT_ID) && data.containsKey(ReportField.USER_CRASH_DATE)) {
                     persister.store(data, report);
                     converted++;
diff --git a/acra/src/main/java/org/acra/model/ComplexElement.java b/acra/src/main/java/org/acra/model/ComplexElement.java
index 7e2a9f84..55d16f73 100644
--- a/acra/src/main/java/org/acra/model/ComplexElement.java
+++ b/acra/src/main/java/org/acra/model/ComplexElement.java
@@ -47,9 +47,9 @@ public ComplexElement(JSONObject copyFrom) throws JSONException {
 
     @NonNull
     private static String[] getNames(JSONObject object) throws JSONException {
-        JSONArray json = object.names();
+        final JSONArray json = object.names();
         if(json != null) {
-            String[] names = new String[json.length()];
+            final String[] names = new String[json.length()];
             for (int i = 0; i < json.length(); i++) {
                 names[i] = json.getString(i);
             }
diff --git a/acra/src/main/java/org/acra/sender/DefaultReportSenderFactory.java b/acra/src/main/java/org/acra/sender/DefaultReportSenderFactory.java
index e11db3e2..540db463 100644
--- a/acra/src/main/java/org/acra/sender/DefaultReportSenderFactory.java
+++ b/acra/src/main/java/org/acra/sender/DefaultReportSenderFactory.java
@@ -5,6 +5,7 @@
 import android.support.annotation.NonNull;
 
 import org.acra.ACRA;
+import org.acra.ACRAConstants;
 import org.acra.config.ACRAConfiguration;
 import org.acra.util.PackageManagerWrapper;
 
@@ -38,7 +39,7 @@ public ReportSender create(@NonNull Context context, @NonNull ACRAConfiguration
                             + Manifest.permission.INTERNET
                             + " if you want your crash reports to be sent. If you don't want to add this permission to your application you can also enable sending reports by email. If this is your will then provide your email address in @AcraConfig(mailTo=\"your.account@domain.com\"");
             return new NullSender();
-        } else if (config.formUri() != null && !"".equals(config.formUri())) {
+        } else if (!ACRAConstants.DEFAULT_STRING_VALUE.equals(config.formUri())) {
             // If formUri is set, instantiate a sender for a generic HTTP POST form with default mapping.
             if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, context.getPackageName() + " reports will be sent by Http.");
             return new HttpSenderFactory().create(context, config);
diff --git a/acra/src/main/java/org/acra/sender/EmailIntentSender.java b/acra/src/main/java/org/acra/sender/EmailIntentSender.java
index 5501f536..6df0a895 100644
--- a/acra/src/main/java/org/acra/sender/EmailIntentSender.java
+++ b/acra/src/main/java/org/acra/sender/EmailIntentSender.java
@@ -33,9 +33,12 @@
 import org.acra.collections.ImmutableSet;
 import org.acra.collector.CrashReportData;
 import org.acra.config.ACRAConfiguration;
+import org.acra.file.CrashReportPersister;
 import org.acra.model.Element;
 import org.acra.util.InstanceCreator;
 
+import java.io.File;
+import java.io.IOException;
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Set;
@@ -65,6 +68,16 @@ public void send(@NonNull Context context, @NonNull CrashReportData errorContent
         final String body = buildBody(errorContent);
         final InstanceCreator instanceCreator = new InstanceCreator();
         final ArrayList<Uri> attachments = instanceCreator.create(config.attachmentUriProvider(), new DefaultAttachmentProvider()).getAttachments(context, config);
+        boolean contentAttached = false;
+        if (config.reportAsFile()) {
+            final File cache = new File(context.getCacheDir(), "ACRA-report" + ACRAConstants.REPORTFILE_EXTENSION);
+            try {
+                new CrashReportPersister().store(errorContent, cache);
+                attachments.add(Uri.parse("content://" + context.getPackageName() + ".acra/root" + cache.getPath()));
+                contentAttached = true;
+            } catch (IOException ignored) {
+            }
+        }
 
         final Intent resolveIntent = new Intent(android.content.Intent.ACTION_SENDTO);
         resolveIntent.setData(Uri.fromParts("mailto", config.mailTo(), null));
@@ -81,7 +94,7 @@ public void send(@NonNull Context context, @NonNull CrashReportData errorContent
                 emailIntent.putExtra(Intent.EXTRA_EMAIL, new String[]{config.mailTo()});
                 emailIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
                 emailIntent.putExtra(Intent.EXTRA_SUBJECT, subject);
-                emailIntent.putExtra(Intent.EXTRA_TEXT, body);
+                if (!contentAttached) emailIntent.putExtra(Intent.EXTRA_TEXT, body);
                 emailIntent.setType("message/rfc822");
                 emailIntent.putParcelableArrayListExtra(Intent.EXTRA_STREAM, attachments);
                 if (packageName.equals("android")) {
diff --git a/acra/src/main/java/org/acra/util/JsonUtils.java b/acra/src/main/java/org/acra/util/JsonUtils.java
index f05d09d9..e399d573 100644
--- a/acra/src/main/java/org/acra/util/JsonUtils.java
+++ b/acra/src/main/java/org/acra/util/JsonUtils.java
@@ -43,21 +43,21 @@ private JsonUtils() {
     }
 
     public static JSONObject toJson(CrashReportData data) {
-        Map<String, Object> map = new HashMap<String, Object>();
+        final Map<String, Object> map = new HashMap<String, Object>();
         for (Map.Entry<ReportField, Element> entry : data.entrySet()) {
-            Element element = entry.getValue();
+            final Element element = entry.getValue();
             map.put(entry.getKey().name(), element.value());
         }
         return new JSONObject(map);
     }
 
     public static CrashReportData toCrashReportData(JSONObject json) {
-        CrashReportData data = new CrashReportData();
-        for (Iterator<String> iterator = json.keys(); iterator.hasNext(); ) {
-            String key = iterator.next();
+        final CrashReportData data = new CrashReportData();
+        for (final Iterator<String> iterator = json.keys(); iterator.hasNext(); ) {
+            final String key = iterator.next();
             try {
-                ReportField field = ReportField.valueOf(key);
-                Object value = json.get(key);
+                final ReportField field = ReportField.valueOf(key);
+                final Object value = json.get(key);
                 if (value instanceof JSONObject) {
                     data.put(field, new ComplexElement((JSONObject) value));
                 } else if (value instanceof Number) {
@@ -77,10 +77,10 @@ public static CrashReportData toCrashReportData(JSONObject json) {
     }
 
     public static List<String> flatten(JSONObject json) throws JSONException {
-        List<String> result = new ArrayList<String>();
-        for (Iterator<String> iterator = json.keys(); iterator.hasNext(); ) {
-            String key = iterator.next();
-            Object value = json.get(key);
+        final List<String> result = new ArrayList<String>();
+        for (final Iterator<String> iterator = json.keys(); iterator.hasNext(); ) {
+            final String key = iterator.next();
+            final Object value = json.get(key);
             if (value instanceof JSONObject) {
                 for (String s : flatten((JSONObject) value)) {
                     result.add(key + "." + s);
diff --git a/acra/src/main/java/org/acra/util/PackageManagerWrapper.java b/acra/src/main/java/org/acra/util/PackageManagerWrapper.java
index ae08e026..d8184b8b 100644
--- a/acra/src/main/java/org/acra/util/PackageManagerWrapper.java
+++ b/acra/src/main/java/org/acra/util/PackageManagerWrapper.java
@@ -12,17 +12,16 @@
 
 /**
  * Responsible for wrapping calls to PackageManager to ensure that they always complete without throwing RuntimeExceptions.
- * <p>
- *     Depending upon the state of the application it is possible that
+ * Depending upon the state of the application it is possible that
  *     <ul>
  *         <li>Context has no PackageManager.</li>
  *         <li>PackageManager returned by Context throws RuntimeException("Package manager has died")
- *              because it cannot contact the remote PackageManager service.
+ *             because it cannot contact the remote PackageManager service.
  *         </li>
  *     </ul>
- *     I suspect that PackageManager death is caused during app installation.
- *     But we need to make ACRA bullet proof, so it's better to handle the condition safely so that the error report itself doesn't fail.
- * </p>
+ * I suspect that PackageManager death is caused during app installation.
+ * But we need to make ACRA bullet proof, so it's better to handle the condition safely so that the error report itself doesn't fail.
+ *
  * @author William Ferguson
  * @since 4.3.0
  */
@@ -35,7 +34,7 @@ public PackageManagerWrapper(@NonNull Context context) {
     }
 
     /**
-     * @param permission    Manifest.permission to check whether it has been granted.
+     * @param permission Manifest.permission to check whether it has been granted.
      * @return true if the permission has been granted to the app, false if it hasn't been granted or the PackageManager could not be contacted.
      */
     public boolean hasPermission(@NonNull String permission) {
diff --git a/annotationprocessor/build.gradle b/annotationprocessor/build.gradle
index 466bb7a2..0c30ea17 100644
--- a/annotationprocessor/build.gradle
+++ b/annotationprocessor/build.gradle
@@ -20,6 +20,7 @@ dependencies {
     compile fileTree(dir: 'libs', include: ['*.jar'])
     compile 'com.google.auto.service:auto-service:1.0-rc2'
     compile 'com.squareup:javapoet:1.7.0'
+    compile project(':annotations')
 }
 
 sourceCompatibility = "1.8"
diff --git a/annotationprocessor/src/main/java/org/acra/AcraAnnotationProcessor.java b/annotationprocessor/src/main/java/org/acra/AcraAnnotationProcessor.java
index 5107eddc..62b7cf04 100644
--- a/annotationprocessor/src/main/java/org/acra/AcraAnnotationProcessor.java
+++ b/annotationprocessor/src/main/java/org/acra/AcraAnnotationProcessor.java
@@ -25,10 +25,15 @@
 import com.squareup.javapoet.ParameterSpec;
 import com.squareup.javapoet.TypeName;
 import com.squareup.javapoet.TypeSpec;
+import com.squareup.javapoet.TypeVariableName;
+
+import org.acra.annotation.Configuration;
+import org.acra.annotation.ConfigurationBuilder;
 
 import java.io.IOException;
 import java.io.Serializable;
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.HashSet;
 import java.util.List;
 import java.util.Set;
@@ -38,7 +43,6 @@
 import javax.annotation.processing.ProcessingEnvironment;
 import javax.annotation.processing.Processor;
 import javax.annotation.processing.RoundEnvironment;
-import javax.annotation.processing.SupportedAnnotationTypes;
 import javax.annotation.processing.SupportedSourceVersion;
 import javax.lang.model.SourceVersion;
 import javax.lang.model.element.Element;
@@ -52,29 +56,22 @@
 import javax.lang.model.util.Types;
 import javax.tools.Diagnostic;
 
+import static org.acra.ModelUtils.*;
+
+/**
+ * Creates the BaseConfigurationBuilder class based on the annotation annotated with {@link Configuration}.
+ * Creates the ACRAConfiguration class based on the BaseConfigurationBuilder and the class annotated with {@link ConfigurationBuilder}
+ *
+ * @author F43nd1r
+ * @since 18.03.2017
+ */
 @AutoService(Processor.class)
-@SupportedAnnotationTypes({AcraAnnotationProcessor.ANNOTATION_CONFIGURATION, AcraAnnotationProcessor.ANNOTATION_CONFIGURATION_BUILDER})
 @SupportedSourceVersion(SourceVersion.RELEASE_6)
 public class AcraAnnotationProcessor extends AbstractProcessor {
 
-    static final String ANNOTATION_CONFIGURATION = "org.acra.annotation.Configuration";
-    static final String ANNOTATION_CONFIGURATION_BUILDER = "org.acra.annotation.ConfigurationBuilder";
-    static final String CONFIGURATION_PACKAGE = "org.acra.config";
-    static final String PREFIX_SETTER = "set";
-    private static final String CONFIGURATION_NAME = "@Configuration";
-    private static final String CONFIGURATION_BUILDER = "BaseConfigurationBuilder";
-    private static final String ACRA_CONFIGURATION = "ACRAConfiguration";
-    private static final String APPLICATION = "android.app.Application";
-    private static final String PARAM_APP = "app";
-    private static final String PARAM_BUILDER = "builder";
-    private static final String VAR_ANNOTATION_CONFIG = "annotationConfig";
-    private static final String ANNOTATION_NON_NULL = "android.support.annotation.NonNull";
-
     private Elements elementUtils;
     private Types typeUtils;
     private ModelUtils utils;
-    private ClassName nonnull;
-    private ClassName application;
 
     @Override
     public synchronized void init(ProcessingEnvironment processingEnv) {
@@ -82,15 +79,18 @@ public synchronized void init(ProcessingEnvironment processingEnv) {
         elementUtils = processingEnv.getElementUtils();
         typeUtils = processingEnv.getTypeUtils();
         utils = new ModelUtils(processingEnv);
-        nonnull = ClassName.bestGuess(ANNOTATION_NON_NULL);
-        application = ClassName.bestGuess(APPLICATION);
+    }
+
+    @Override
+    public Set<String> getSupportedAnnotationTypes() {
+        return new HashSet<>(Arrays.asList(Configuration.class.getName(), ConfigurationBuilder.class.getName()));
     }
 
     @Override
     public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
         try {
-            final Set<MethodDefinition> methodDefinitions = process(roundEnv, ANNOTATION_CONFIGURATION, ElementKind.ANNOTATION_TYPE, new HashSet<>(), this::createBuilderClass);
-            process(roundEnv, ANNOTATION_CONFIGURATION_BUILDER, ElementKind.CLASS, null, type -> createConfigClass(type, methodDefinitions));
+            final Set<MethodDefinition> methodDefinitions = process(roundEnv, Configuration.class.getName(), ElementKind.ANNOTATION_TYPE, new HashSet<>(), this::createBuilderClass);
+            process(roundEnv, ConfigurationBuilder.class.getName(), ElementKind.CLASS, null, type -> createConfigClass(type, methodDefinitions));
         } catch (Exception e) {
             e.printStackTrace();
             processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, "Failed to generate acra classes");
@@ -103,14 +103,14 @@ public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment
         final ArrayList<? extends Element> annotatedElements = new ArrayList<>(roundEnv.getElementsAnnotatedWith(annotation));
         if (annotatedElements.size() > 1) {
             for (Element e : annotatedElements) {
-                processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, String.format("Only one %s can be annotated with %s", kind.name(), CONFIGURATION_NAME), e);
+                processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, String.format("Only one %s can be annotated with %s", kind.name(), annotationName), e);
             }
         } else if (!annotatedElements.isEmpty()) {
             final Element e = annotatedElements.get(0);
             if (e.getKind() == kind) {
                 return function.apply((TypeElement) e);
             } else {
-                processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, String.format("%s is only supported on %s", kind.name(), CONFIGURATION_NAME), e);
+                processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, String.format("%s is only supported on %s", annotationName, kind.name()), e);
             }
         }
         return defaultValue;
@@ -129,6 +129,7 @@ private Void createConfigClass(TypeElement builder, Set<MethodDefinition> method
         final TypeSpec.Builder classBuilder = TypeSpec.classBuilder(ACRA_CONFIGURATION)
                 .addSuperinterface(Serializable.class)
                 .addModifiers(Modifier.PUBLIC, Modifier.FINAL);
+        utils.addClassJavadoc(classBuilder, builder);
         final CodeBlock.Builder constructor = CodeBlock.builder();
         for (MethodDefinition method : methods) {
             final String name = method.getName();
@@ -149,7 +150,7 @@ private Void createConfigClass(TypeElement builder, Set<MethodDefinition> method
         }
         classBuilder.addMethod(MethodSpec.constructorBuilder().addModifiers(Modifier.PUBLIC)
                 .addParameter(ParameterSpec.builder(TypeName.get(builder.asType()), PARAM_BUILDER)
-                        .addAnnotation(AnnotationSpec.builder(nonnull).build())
+                        .addAnnotation(AnnotationSpec.builder(ANNOTATION_NON_NULL).build())
                         .build())
                 .addCode(constructor.build())
                 .build());
@@ -179,17 +180,20 @@ private Void createConfigClass(TypeElement builder, Set<MethodDefinition> method
      * @throws IOException if the class file can't be written
      */
     private Set<MethodDefinition> createBuilderClass(TypeElement config) throws IOException {
+        final TypeVariableName returnType = TypeVariableName.get("T", ClassName.get(CONFIGURATION_PACKAGE, CONFIGURATION_BUILDER));
         final TypeSpec.Builder classBuilder = TypeSpec.classBuilder(CONFIGURATION_BUILDER)
-                .addModifiers(Modifier.PUBLIC, Modifier.ABSTRACT);
+                .addModifiers(Modifier.PUBLIC, Modifier.ABSTRACT)
+                .addTypeVariable(returnType);
+        utils.addClassJavadoc(classBuilder, config);
         final CodeBlock.Builder constructor = CodeBlock.builder()
                 .addStatement("final $1T $2L = $3L.getClass().getAnnotation($1T.class)", config.asType(), VAR_ANNOTATION_CONFIG, PARAM_APP)
                 .beginControlFlow("if ($L != null)", VAR_ANNOTATION_CONFIG);
         final Set<MethodDefinition> result = config.getEnclosedElements().stream().filter(element -> element.getKind() == ElementKind.METHOD)
-                .map(ExecutableElement.class::cast).filter(utils::isNotDeprecated).map(e -> handleMethod(e, classBuilder, constructor)).collect(Collectors.toSet());
+                .map(ExecutableElement.class::cast).filter(utils::isNotDeprecated).map(e -> handleMethod(e, classBuilder, constructor, returnType)).collect(Collectors.toSet());
         constructor.endControlFlow();
         classBuilder.addMethod(MethodSpec.constructorBuilder().addModifiers(Modifier.PUBLIC)
-                .addParameter(ParameterSpec.builder(application, PARAM_APP)
-                        .addAnnotation(AnnotationSpec.builder(nonnull).build())
+                .addParameter(ParameterSpec.builder(APPLICATION, PARAM_APP)
+                        .addAnnotation(AnnotationSpec.builder(ANNOTATION_NON_NULL).build())
                         .build())
                 .addCode(constructor.build())
                 .build());
@@ -205,7 +209,7 @@ private Void createConfigClass(TypeElement builder, Set<MethodDefinition> method
      * @param constructor  the constructor in which the field will be initialized
      * @return the generated getter
      */
-    private MethodDefinition handleMethod(ExecutableElement method, TypeSpec.Builder classBuilder, CodeBlock.Builder constructor) {
+    private MethodDefinition handleMethod(ExecutableElement method, TypeSpec.Builder classBuilder, CodeBlock.Builder constructor, TypeName returnType) {
         final String name = method.getSimpleName().toString();
         final TypeMirror type = method.getReturnType();
         final TypeName typeName = TypeName.get(type);
@@ -214,12 +218,13 @@ private MethodDefinition handleMethod(ExecutableElement method, TypeSpec.Builder
         classBuilder.addField(FieldSpec.builder(boxedType, name, Modifier.PRIVATE)
                 .addAnnotations(annotations)
                 .build());
-        classBuilder.addMethod(MethodSpec.methodBuilder(PREFIX_SETTER + utils.capitalizeFirst(name))
-                .returns(ClassName.get(CONFIGURATION_PACKAGE, CONFIGURATION_BUILDER))
+        classBuilder.addMethod(utils.addMethodJavadoc(MethodSpec.methodBuilder(PREFIX_SETTER + utils.capitalizeFirst(name)), method)
+                .returns(returnType)
                 .addParameter(ParameterSpec.builder(typeName, name).addAnnotations(annotations).build())
+                .varargs(type.getKind() == TypeKind.ARRAY)
                 .addModifiers(Modifier.PUBLIC)
                 .addStatement("this.$1L = $1L", name)
-                .addStatement("return this")
+                .addStatement("return ($T) this", returnType)
                 .build());
         final CodeBlock.Builder code = CodeBlock.builder()
                 .beginControlFlow("if ($L != null)", name)
diff --git a/annotationprocessor/src/main/java/org/acra/ModelUtils.java b/annotationprocessor/src/main/java/org/acra/ModelUtils.java
index fc6685c5..10b4f5bb 100644
--- a/annotationprocessor/src/main/java/org/acra/ModelUtils.java
+++ b/annotationprocessor/src/main/java/org/acra/ModelUtils.java
@@ -19,9 +19,14 @@
 import com.squareup.javapoet.AnnotationSpec;
 import com.squareup.javapoet.ClassName;
 import com.squareup.javapoet.JavaFile;
+import com.squareup.javapoet.MethodSpec;
 import com.squareup.javapoet.TypeSpec;
 
+import org.acra.annotation.NoPropagation;
+
 import java.io.IOException;
+import java.text.DateFormat;
+import java.util.Calendar;
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
@@ -38,39 +43,48 @@
 import javax.lang.model.util.Elements;
 import javax.lang.model.util.Types;
 
-import static org.acra.AcraAnnotationProcessor.CONFIGURATION_PACKAGE;
-import static org.acra.AcraAnnotationProcessor.PREFIX_SETTER;
-
 /**
+ * Collection of constants and helper methods to generate ACRA classes
+ *
  * @author F43nd1r
  * @since 18.03.2017
  */
 
 class ModelUtils {
+    static final String CONFIGURATION_PACKAGE = "org.acra.config";
+    static final String CONFIGURATION_BUILDER = "BaseConfigurationBuilder";
+    static final String ACRA_CONFIGURATION = "ACRAConfiguration";
+    static final String PREFIX_SETTER = "set";
+    static final String PARAM_APP = "app";
+    static final String PARAM_BUILDER = "builder";
+    static final String VAR_ANNOTATION_CONFIG = "annotationConfig";
+    static final ClassName APPLICATION = ClassName.bestGuess("android.app.Application");
+    static final ClassName ANNOTATION_NON_NULL = ClassName.bestGuess("android.support.annotation.NonNull");
     private static final String IMMUTABLE_MAP = "org.acra.collections.ImmutableMap";
     private static final String IMMUTABLE_LIST = "org.acra.collections.ImmutableList";
     private static final String IMMUTABLE_SET = "org.acra.collections.ImmutableSet";
-    private static final String ANNOTATION_HIDE = "org.acra.annotation.Hide";
+    private static final ClassName ANNOTATION_NO_PROPAGATION = ClassName.get(NoPropagation.class);
 
     private final Types typeUtils;
+    private final Elements elementUtils;
     private final TypeMirror map;
     private final TypeMirror set;
     private final TypeElement immutableMap;
     private final TypeElement immutableSet;
     private final TypeElement immutableList;
     private final ProcessingEnvironment processingEnv;
-    private final ClassName hide;
+    private final DateFormat dateFormat;
 
     ModelUtils(ProcessingEnvironment processingEnv) {
         this.processingEnv = processingEnv;
-        this.typeUtils = processingEnv.getTypeUtils();
-        final Elements elementUtils = processingEnv.getElementUtils();
+        typeUtils = processingEnv.getTypeUtils();
+        elementUtils = processingEnv.getElementUtils();
         map = elementUtils.getTypeElement(Map.class.getName()).asType();
         set = elementUtils.getTypeElement(Set.class.getName()).asType();
         immutableMap = elementUtils.getTypeElement(IMMUTABLE_MAP);
         immutableSet = elementUtils.getTypeElement(IMMUTABLE_SET);
         immutableList = elementUtils.getTypeElement(IMMUTABLE_LIST);
-        hide = ClassName.bestGuess(ANNOTATION_HIDE);
+        dateFormat = DateFormat.getDateTimeInstance();
     }
 
     /**
@@ -112,6 +126,15 @@ void write(TypeSpec typeSpec) throws IOException {
         JavaFile.builder(CONFIGURATION_PACKAGE, typeSpec)
                 .skipJavaLangImports(true)
                 .indent("    ")
+                .addFileComment("Copyright (c) " + Calendar.getInstance().get(Calendar.YEAR) + "\n\n" +
+                        "Licensed under the Apache License, Version 2.0 (the \"License\");\n" +
+                        "you may not use this file except in compliance with the License.\n\n" +
+                        "http://www.apache.org/licenses/LICENSE-2.0\n\n" +
+                        "Unless required by applicable law or agreed to in writing, software\n" +
+                        "distributed under the License is distributed on an \"AS IS\" BASIS,\n" +
+                        "WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n" +
+                        "See the License for the specific language governing permissions and\n" +
+                        "limitations under the License.")
                 .build()
                 .writeTo(processingEnv.getFiler());
     }
@@ -156,14 +179,25 @@ String capitalizeFirst(final String word) {
      * @return if the method is relevant
      */
     boolean shouldRetain(MethodDefinition method) {
-        return !method.getName().startsWith(PREFIX_SETTER) && !method.getAnnotations().stream().anyMatch(a -> a.type.equals(hide));
+        return !method.getName().startsWith(PREFIX_SETTER) && !method.getAnnotations().stream().anyMatch(a -> a.type.equals(ANNOTATION_NO_PROPAGATION));
     }
 
     /**
      * @param method a method
      * @return false if the method is deprecated
      */
-    boolean isNotDeprecated(ExecutableElement method){
+    boolean isNotDeprecated(ExecutableElement method) {
         return method.getAnnotation(Deprecated.class) == null;
     }
+
+    void addClassJavadoc(TypeSpec.Builder builder, TypeElement base) {
+        builder.addJavadoc("Class generated based on {@link $L} ($L)\n", base.getQualifiedName(), dateFormat.format(Calendar.getInstance().getTime()));
+    }
+
+    MethodSpec.Builder addMethodJavadoc(MethodSpec.Builder builder, ExecutableElement base) {
+        final String baseComment = elementUtils.getDocComment(base);
+        if (baseComment == null) return builder;
+        final String name = base.getSimpleName().toString();
+        return builder.addJavadoc(baseComment.replaceAll("(\n|^) ", "$1").replaceAll("@return ((.|\n)*)$", "@param " + name + " $1@return this instance\n"));
+    }
 }
diff --git a/annotations/build.gradle b/annotations/build.gradle
new file mode 100644
index 00000000..d9b5d8da
--- /dev/null
+++ b/annotations/build.gradle
@@ -0,0 +1,19 @@
+/*
+ * Copyright (c) 2017
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+apply plugin: 'java'
+
+sourceCompatibility = "1.6"
+targetCompatibility = "1.6"
diff --git a/acra/src/main/java/org/acra/annotation/Configuration.java b/annotations/src/main/java/org/acra/annotation/Configuration.java
similarity index 97%
rename from acra/src/main/java/org/acra/annotation/Configuration.java
rename to annotations/src/main/java/org/acra/annotation/Configuration.java
index 6e4f9fda..07a0e362 100644
--- a/acra/src/main/java/org/acra/annotation/Configuration.java
+++ b/annotations/src/main/java/org/acra/annotation/Configuration.java
@@ -22,7 +22,7 @@
 import java.lang.annotation.Target;
 
 /**
- * The annotation annotated with this will be used as basis for the configurationBuilder
+ * The annotation annotated with this will be used as basis for the BaseConfigurationBuilder
  *
  * @author F43nd1r
  * @since 17.03.2017
diff --git a/acra/src/main/java/org/acra/annotation/ConfigurationBuilder.java b/annotations/src/main/java/org/acra/annotation/ConfigurationBuilder.java
similarity index 92%
rename from acra/src/main/java/org/acra/annotation/ConfigurationBuilder.java
rename to annotations/src/main/java/org/acra/annotation/ConfigurationBuilder.java
index d7039851..157f15c1 100644
--- a/acra/src/main/java/org/acra/annotation/ConfigurationBuilder.java
+++ b/annotations/src/main/java/org/acra/annotation/ConfigurationBuilder.java
@@ -22,7 +22,7 @@
 import java.lang.annotation.Target;
 
 /**
- * The class annotated with this will be used as basis for the configuration
+ * The class annotated with this will be used as basis for the ACRAConfiguration
  *
  * @author F43nd1r
  * @since 17.03.2017
diff --git a/acra/src/main/java/org/acra/annotation/Hide.java b/annotations/src/main/java/org/acra/annotation/NoPropagation.java
similarity index 88%
rename from acra/src/main/java/org/acra/annotation/Hide.java
rename to annotations/src/main/java/org/acra/annotation/NoPropagation.java
index 852fb344..866d8bd2 100644
--- a/acra/src/main/java/org/acra/annotation/Hide.java
+++ b/annotations/src/main/java/org/acra/annotation/NoPropagation.java
@@ -22,7 +22,7 @@
 import java.lang.annotation.Target;
 
 /**
- * Methods annotated with this will not be propagated into the configuration
+ * Methods annotated with this will not be propagated into the ACRAConfiguration class
  *
  * @author F43nd1r
  * @since 17.03.2017
@@ -30,5 +30,5 @@
 
 @Retention(RetentionPolicy.SOURCE)
 @Target(ElementType.METHOD)
-public @interface Hide {
+public @interface NoPropagation {
 }
diff --git a/build.gradle b/build.gradle
index e72131f9..a782ab44 100644
--- a/build.gradle
+++ b/build.gradle
@@ -5,8 +5,7 @@ buildscript {
         jcenter()
     }
     dependencies {
-        classpath 'com.android.tools.build:gradle:2.3.0'
-        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7'
+        classpath 'com.android.tools.build:gradle:2.3.1'
         classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'
         classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.4.0"
         classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.5.3"
@@ -28,5 +27,3 @@ allprojects {
 task clean(type: Delete) {
     delete rootProject.buildDir
 }
-
-closeRepository.dependsOn ':acra:uploadArchives'
diff --git a/settings.gradle b/settings.gradle
index a1f70e08..f3f06a0e 100644
--- a/settings.gradle
+++ b/settings.gradle
@@ -1 +1 @@
-include ':acra', ':acratest', ':annotationprocessor'
\ No newline at end of file
+include ':acra', ':acratest', ':annotationprocessor', ':annotations'
\ No newline at end of file
