diff --git a/src/main/java/org/acra/ACRA.java b/src/main/java/org/acra/ACRA.java
index b75b3a84..12f87170 100644
--- a/src/main/java/org/acra/ACRA.java
+++ b/src/main/java/org/acra/ACRA.java
@@ -18,14 +18,20 @@
 import org.acra.annotation.ReportsCrashes;
 import org.acra.log.ACRALog;
 import org.acra.log.AndroidLogDelegate;
+import org.acra.nameless.Helper;
 
 import android.app.Application;
+import android.content.ContentResolver;
 import android.content.SharedPreferences;
 import android.content.SharedPreferences.OnSharedPreferenceChangeListener;
 import android.content.pm.ApplicationInfo;
 import android.content.pm.PackageManager;
 import android.content.pm.PackageManager.NameNotFoundException;
+import android.database.ContentObserver;
+import android.os.Handler;
+import android.os.UserHandle;
 import android.preference.PreferenceManager;
+import android.provider.Settings;
 
 /**
  * Use this class to initialize the crash reporting feature using
@@ -45,6 +51,10 @@
     
     public static ACRALog log = new AndroidLogDelegate();
 
+    // Nameless Additions
+    private static final Handler mHandler = new Handler();
+    private static final Object mLock = new Object();
+
     /**
      * The key of the application default SharedPreference where you can put a
      * 'true' Boolean value to disable ACRA.
@@ -166,6 +176,12 @@ public void onSharedPreferenceChanged(SharedPreferences sharedPreferences, Strin
         // NPE in ErrorReporter.disable() because
         // the context could be null at this moment.
         prefs.registerOnSharedPreferenceChangeListener(mPrefListener);
+
+        // Nameless Additions, listen to the System Preference as well
+        if (Helper.isNameless()) {
+            final SettingsObserver settingsObserver = new SettingsObserver(mHandler);
+            settingsObserver.observe();
+        }
     }
 
     /**
@@ -316,4 +332,34 @@ static Application getApplication() {
     public static void setLog(ACRALog log) {
         ACRA.log = log;
     }
+
+    static class SettingsObserver extends ContentObserver {
+        SettingsObserver(Handler handler) {
+            super(handler);
+        }
+
+        void observe() {
+            // Observe all users' changes
+            final ContentResolver resolver = mApplication.getContentResolver();
+            resolver.registerContentObserver(Settings.Nameless.getUriFor(
+                            Settings.Nameless.ENABLE_ACRA), false, this,
+                    UserHandle.USER_ALL);
+
+            updateSettings();
+        }
+
+        @Override public void onChange(boolean selfChange) {
+            updateSettings();
+        }
+    }
+
+    private static void updateSettings() {
+        final ContentResolver resolver = mApplication.getContentResolver();
+        synchronized (mLock) {
+            final boolean enableAcra = Settings.Nameless.getBoolean(resolver,
+                    Settings.Nameless.ENABLE_ACRA,
+                    true);
+            getErrorReporter().setEnabled(enableAcra);
+        }
+    }
 }
diff --git a/src/main/java/org/acra/nameless/Helper.java b/src/main/java/org/acra/nameless/Helper.java
new file mode 100644
index 00000000..5c41deda
--- /dev/null
+++ b/src/main/java/org/acra/nameless/Helper.java
@@ -0,0 +1,36 @@
+package org.acra.nameless;
+
+import java.io.BufferedReader;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.InputStreamReader;
+
+public class Helper {
+
+    public static boolean isNameless() {
+        return existsInBuildProp("ro.nameless.version");
+    }
+
+    public static boolean existsInBuildProp(String filter) {
+        final File f = new File("/system/build.prop");
+        BufferedReader bufferedReader = null;
+        if (f.exists() && f.canRead()) {
+            try {
+                bufferedReader = new BufferedReader(new InputStreamReader(new FileInputStream(f)));
+                String s;
+                while ((s = bufferedReader.readLine()) != null) {
+                    if (s.contains(filter)) return true;
+                }
+            } catch (Exception whoops) {
+                return false;
+            } finally {
+                try {
+                    if (bufferedReader != null) bufferedReader.close();
+                } catch (Exception ignored) {
+                    // mepmep
+                }
+            }
+        }
+        return false;
+    }
+}
