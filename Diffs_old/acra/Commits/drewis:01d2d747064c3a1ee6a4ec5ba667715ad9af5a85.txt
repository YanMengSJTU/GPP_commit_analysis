diff --git a/src/main/java/org/acra/ACRA.java b/src/main/java/org/acra/ACRA.java
index 7a27942c..c694267f 100644
--- a/src/main/java/org/acra/ACRA.java
+++ b/src/main/java/org/acra/ACRA.java
@@ -17,6 +17,7 @@
 
 import org.acra.annotation.ReportsCrashes;
 import org.acra.log.ACRALog;
+import org.acra.log.HollowLog;
 import org.acra.log.AndroidLogDelegate;
 
 import android.app.Application;
@@ -357,8 +358,15 @@ static boolean isDebuggable() {
     static Application getApplication() {
         return mApplication;
     }
-    
+
     public static void setLog(ACRALog log) {
+        if (log == null) {
+            throw new NullPointerException("ACRALog cannot be null");
+        }
         ACRA.log = log;
     }
+
+    public static void disableLog() {
+        ACRA.log = new HollowLog();
+    }
 }
diff --git a/src/main/java/org/acra/log/HollowLog.java b/src/main/java/org/acra/log/HollowLog.java
new file mode 100644
index 00000000..5f6e8a02
--- /dev/null
+++ b/src/main/java/org/acra/log/HollowLog.java
@@ -0,0 +1,66 @@
+package org.acra.log;
+
+/**
+ * Stub implementation of {@link org.acra.log.ACRALog}
+ */
+public class HollowLog implements ACRALog {
+    @Override
+    public int v(String tag, String msg) {
+        return 0;
+    }
+
+    @Override
+    public int v(String tag, String msg, Throwable tr) {
+        return 0;
+    }
+
+    @Override
+    public int d(String tag, String msg) {
+        return 0;
+    }
+
+    @Override
+    public int d(String tag, String msg, Throwable tr) {
+        return 0;
+    }
+
+    @Override
+    public int i(String tag, String msg) {
+        return 0;
+    }
+
+    @Override
+    public int i(String tag, String msg, Throwable tr) {
+        return 0;
+    }
+
+    @Override
+    public int w(String tag, String msg) {
+        return 0;
+    }
+
+    @Override
+    public int w(String tag, String msg, Throwable tr) {
+        return 0;
+    }
+
+    @Override
+    public int w(String tag, Throwable tr) {
+        return 0;
+    }
+
+    @Override
+    public int e(String tag, String msg) {
+        return 0;
+    }
+
+    @Override
+    public int e(String tag, String msg, Throwable tr) {
+        return 0;
+    }
+
+    @Override
+    public String getStackTraceString(Throwable tr) {
+        return null;
+    }
+}
