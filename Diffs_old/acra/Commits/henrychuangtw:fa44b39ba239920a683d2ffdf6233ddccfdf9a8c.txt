diff --git a/.gitignore b/.gitignore
index 1b0642ed..45390c3f 100644
--- a/.gitignore
+++ b/.gitignore
@@ -5,5 +5,7 @@ target
 pom.xml.releaseBackup
 release.properties
 *.iml
-*.idea/*
-build/
\ No newline at end of file
+.idea/
+build/
+local.properties
+.gradle
\ No newline at end of file
diff --git a/README.md b/README.md
index b0907bae..db649f83 100644
--- a/README.md
+++ b/README.md
@@ -3,7 +3,7 @@
 What is ACRA ?
 ==============
 
-ACRA is a library enabling Android Application to automatically post their crash reports to a GoogleDoc form. It is targeted to android applications developers to help them get data from their applications when they crash or behave erroneously.
+ACRA is a library enabling Android Application to automatically post their crash reports to a report server. It is targeted to android applications developers to help them get data from their applications when they crash or behave erroneously.
 
 ACRA is used in 2.68% ([See AppBrain/stats](http://www.appbrain.com/stats/libraries/details/acra/acra)) of all apps on Google Play as of Feb 2016. That's over 53K **apps** using ACRA. And since the average US user has 41 apps installed on their phone that means there is a 70% chance that ACRA is running on any phone. That means ACRA is running on over a **billion devices**.
 
@@ -19,15 +19,14 @@ A crash reporting feature for android apps is native since Android 2.2 (FroYo) b
   * works for any application even if not delivered through Google PLay => great for devices/regions where the Google Play is not available, beta releases or for enterprise private apps
   * if there is no network coverage, reports are kept and sent on a later application restart
   * can be used with [your own self-hosted report receiver script](http://github.com/ACRA/acra/wiki/AdvancedUsage#wiki-Reports_destination)
-  * google doc reports can be shared with a whole development team. Other benefits from the Google Docs platform are still to be investigated (stats, macros...)
 
-ACRA's notification systems are clean. If a crash occurs, your application does not add user notifications over existing system's crash notifications or reporting features. If you use the Toast, Status bar notification or direct dialog modes, the "force close" dialog is not displayed anymore and devices where the system native reporting feature is enabled do not offer the user to send an additional report.
+ACRA's notification systems are clean. If a crash occurs, your application does not add user notifications over existing system's crash notifications or reporting features. By default, the "force close" dialog is not displayed anymore, to enable it set `alsoReportToAndroidFramework` to `true`.
 
 The user is notified of an error only once, and you might enhance the perceived quality of your application by defining your own texts in the notifications/dialogs.
 
 Please do not hesitate to open defects/enhancements requests in [the issue tracker](http://github.com/ACRA/acra/issues).
 
-Latest version ACRA v4.9.0 - 4-JUN-2016
+Latest version ACRA v4.9.2 - 7-JAN-2017
 ===========================================
 
 For a complete changelog, please see the [ChangeLog page](http://github.com/ACRA/acra/wiki/ChangeLog) in the Wiki.
diff --git a/acra/build.gradle b/acra/build.gradle
new file mode 100644
index 00000000..79fa8b42
--- /dev/null
+++ b/acra/build.gradle
@@ -0,0 +1,141 @@
+apply plugin: 'com.android.library'
+apply plugin: 'signing'
+apply plugin: 'maven'
+apply plugin: 'net.researchgate.release'
+
+android {
+    compileSdkVersion Integer.parseInt(androidVersion)
+    buildToolsVersion '25.0.2'
+
+    lintOptions {
+        abortOnError false
+    }
+
+    defaultConfig {
+        minSdkVersion 8
+        targetSdkVersion androidVersion
+        versionName version
+        consumerProguardFile proguardFile
+    }
+
+    compileOptions {
+        sourceCompatibility JavaVersion.VERSION_1_6
+        targetCompatibility JavaVersion.VERSION_1_6
+    }
+}
+
+dependencies {
+    compile "com.android.support:support-v4:$supportVersion"
+    compile "com.android.support:support-annotations:$supportVersion"
+    annotationProcessor project(":annotationprocessor")
+}
+
+
+/*
+* How to oss upload:
+* Edit or create the file at ~/.gradle/gradle.properties and add
+* ossrhUser = <OSSRH user>
+* ossrhPassword = <OSSRH password>
+* signing.keyId=<short ID of your key>
+* signing.password=<passphrase for your key>
+* signing.secretKeyRingFile=<path to your key ring>
+*
+* Then run
+* gradlew release
+*/
+
+release{
+    failOnUnversionedFiles = false
+    failOnCommitNeeded = false
+    tagTemplate = '$name-$version'
+    git{
+        requireBranch = ""
+    }
+}
+afterReleaseBuild.dependsOn ':closeAndPromoteRepository'
+
+task sourcesJar(type: Jar) {
+    from android.sourceSets.main.java.srcDirs
+    classifier = 'sources'
+}
+
+task javadoc(type: Javadoc) {
+    source = android.sourceSets.main.java.srcDirs
+    source += files('build/generated/source/aidl/release') + files('build/generated/source/buildConfig/release')
+    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
+    failOnError false
+}
+
+afterEvaluate {
+    javadoc.classpath += files(android.libraryVariants.collect { variant ->
+        variant.javaCompile.classpath.files
+    })
+    javadoc.dependsOn generateReleaseSources
+}
+
+task javadocJar(type: Jar, dependsOn: javadoc) {
+    classifier = 'javadoc'
+    from javadoc
+}
+
+artifacts {
+    archives javadocJar, sourcesJar
+}
+
+signing {
+    sign configurations.archives
+}
+
+uploadArchives {
+    repositories {
+        mavenDeployer {
+            // POM signature
+            beforeDeployment { deployment -> signing.signPom(deployment) }
+            // Target repository
+            repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
+                authentication(userName: ossrhUser, password: ossrhPassword)
+            }
+            pom.project {
+                name 'Application Crash Report for Android'
+                description 'Publishes a report of an Android application crash to Google docs (or some other end point).'
+                packaging 'aar'
+                url 'http://acra.ch'
+
+                scm {
+                    connection 'scm:git:https://github.com/ACRA/acra.git'
+                    developerConnection 'scm:git:git@github.com:ACRA/acra.git'
+                    url 'https://github.com/ACRA/acra.git'
+                }
+
+                licenses {
+                    license {
+                        name 'Apache 2'
+                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
+                        distribution 'repo'
+                    }
+                }
+
+                developers {
+                    developer {
+                        id = 'kevin.gaudin'
+                        name = 'Kevin Gaudin'
+                    }
+                    developer {
+                        id = 'william.ferguson'
+                        name = 'William Ferguson'
+                    }
+                    developer {
+                        id = 'f43nd1r'
+                        name = 'Lukas Morawietz'
+                    }
+                }
+            }
+        }
+    }
+}
+
+nexusStaging {
+    username = ossrhUser
+    password = ossrhPassword
+    packageGroup = group
+}
diff --git a/acra/gradle.properties b/acra/gradle.properties
new file mode 100644
index 00000000..9ca6f9a3
--- /dev/null
+++ b/acra/gradle.properties
@@ -0,0 +1,7 @@
+version=4.9.3-SNAPSHOT
+group=ch.acra
+archivesBaseName=acra
+androidVersion=23
+supportVersion=24.1.1
+proguardFile=src/main/proguard/proguard.cfg
+release.useAutomaticVersion=true
\ No newline at end of file
diff --git a/acra/src/main/AndroidManifest.xml b/acra/src/main/AndroidManifest.xml
new file mode 100644
index 00000000..b94b34d0
--- /dev/null
+++ b/acra/src/main/AndroidManifest.xml
@@ -0,0 +1,41 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+  ~ Copyright (c) 2017
+  ~
+  ~ Licensed under the Apache License, Version 2.0 (the "License");
+  ~ you may not use this file except in compliance with the License.
+  ~ You may obtain a copy of the License at
+  ~
+  ~     http://www.apache.org/licenses/LICENSE-2.0
+  ~
+  ~ Unless required by applicable law or agreed to in writing, software
+  ~ distributed under the License is distributed on an "AS IS" BASIS,
+  ~ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  ~ See the License for the specific language governing permissions and
+  ~ limitations under the License.
+  -->
+<manifest xmlns:android="http://schemas.android.com/apk/res/android"
+          package="ch.acra.acra">
+
+    <application>
+        <activity
+            android:name="org.acra.dialog.CrashReportDialog"
+            android:theme="@android:style/Theme.Dialog"
+            android:launchMode="singleInstance"
+            android:excludeFromRecents="true"
+            android:finishOnTaskLaunch="true"
+            android:process=":acra"/>
+
+        <service
+            android:name="org.acra.sender.SenderService"
+            android:exported="false"
+            android:process=":acra" />
+
+        <provider
+            android:authorities="${applicationId}.acra"
+            android:name="org.acra.attachment.AcraContentProvider"
+            android:exported="false"
+            android:process=":acra"
+            android:grantUriPermissions="true"/>
+    </application>
+</manifest>
\ No newline at end of file
diff --git a/src/main/assembly/distribution.xml b/acra/src/main/assembly/distribution.xml
similarity index 93%
rename from src/main/assembly/distribution.xml
rename to acra/src/main/assembly/distribution.xml
index f172fbb2..1ba2d60e 100644
--- a/src/main/assembly/distribution.xml
+++ b/acra/src/main/assembly/distribution.xml
@@ -1,51 +1,51 @@
-<assembly
-	xmlns="http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.0"
-	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-	xsi:schemaLocation="http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.0 http://maven.apache.org/xsd/assembly-1.1.0.xsd">
-	<id>acra-distribution</id>
-	<formats>
-		<format>zip</format>
-	</formats>
-	<fileSets>
-		<fileSet>
-			<directory>${project.basedir}</directory>
-			<outputDirectory>/</outputDirectory>
-			<includes>
-				<include>LICENSE</include>
-				<include>NOTICE</include>
-			</includes>
-		</fileSet>
-		<fileSet>
-			<directory>${project.build.directory}</directory>
-			<outputDirectory>build</outputDirectory>
-			<includes>
-				<include>${project.build.finalName}.jar</include>
-			</includes>
-		</fileSet>
-		<fileSet>
-			<directory>${project.build.directory}</directory>
-			<outputDirectory>doc</outputDirectory>
-			<includes>
-				<include>${project.build.finalName}-javadoc.jar</include>
-			</includes>
-		</fileSet>
-		<fileSet>
-			<directory>${project.build.directory}</directory>
-			<outputDirectory>src</outputDirectory>
-			<includes>
-				<include>${project.build.finalName}-sources.jar</include>
-			</includes>
-		</fileSet>
-		<fileSet>
-			<directory>${project.basedir}/doc</directory>
-			<includes>
-				<include>CrashReports-Template.csv</include>
-			</includes>
-			<outputDirectory>doc</outputDirectory>
-		</fileSet>
-		<fileSet>
-			<directory>${project.build.directory}/apidocs</directory>
-			<outputDirectory>doc/html-javadoc</outputDirectory>
-		</fileSet>
-	</fileSets>
-</assembly>
+<assembly
+	xmlns="http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.0"
+	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+	xsi:schemaLocation="http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.0 http://maven.apache.org/xsd/assembly-1.1.0.xsd">
+	<id>acra-distribution</id>
+	<formats>
+		<format>zip</format>
+	</formats>
+	<fileSets>
+		<fileSet>
+			<directory>${project.basedir}</directory>
+			<outputDirectory>/</outputDirectory>
+			<includes>
+				<include>LICENSE</include>
+				<include>NOTICE</include>
+			</includes>
+		</fileSet>
+		<fileSet>
+			<directory>${project.build.directory}</directory>
+			<outputDirectory>build</outputDirectory>
+			<includes>
+				<include>${project.build.finalName}.aar</include>
+			</includes>
+		</fileSet>
+		<fileSet>
+			<directory>${project.build.directory}</directory>
+			<outputDirectory>doc</outputDirectory>
+			<includes>
+				<include>${project.build.finalName}-javadoc.jar</include>
+			</includes>
+		</fileSet>
+		<fileSet>
+			<directory>${project.build.directory}</directory>
+			<outputDirectory>src</outputDirectory>
+			<includes>
+				<include>${project.build.finalName}-sources.jar</include>
+			</includes>
+		</fileSet>
+		<fileSet>
+			<directory>${project.basedir}/doc</directory>
+			<includes>
+				<include>CrashReports-Template.csv</include>
+			</includes>
+			<outputDirectory>doc</outputDirectory>
+		</fileSet>
+		<fileSet>
+			<directory>${project.build.directory}/apidocs</directory>
+			<outputDirectory>doc/html-javadoc</outputDirectory>
+		</fileSet>
+	</fileSets>
+</assembly>
diff --git a/src/main/build-config/sun_checks-modified.xml b/acra/src/main/build-config/sun_checks-modified.xml
similarity index 97%
rename from src/main/build-config/sun_checks-modified.xml
rename to acra/src/main/build-config/sun_checks-modified.xml
index c3a6d095..ac9ee293 100644
--- a/src/main/build-config/sun_checks-modified.xml
+++ b/acra/src/main/build-config/sun_checks-modified.xml
@@ -1,189 +1,189 @@
-<?xml version="1.0"?>
-<!DOCTYPE module PUBLIC
-    "-//Puppy Crawl//DTD Check Configuration 1.2//EN"
-    "http://www.puppycrawl.com/dtds/configuration_1_2.dtd">
-
-<!--
-
-  Checkstyle configuration that checks the sun coding conventions from:
-
-    - the Java Language Specification at
-      http://java.sun.com/docs/books/jls/second_edition/html/index.html
-
-    - the Sun Code Conventions at http://java.sun.com/docs/codeconv/
-
-    - the Javadoc guidelines at
-      http://java.sun.com/j2se/javadoc/writingdoccomments/index.html
-
-    - the JDK Api documentation http://java.sun.com/j2se/docs/api/index.html
-
-    - some best practices
-
-  Checkstyle is very configurable. Be sure to read the documentation at
-  http://checkstyle.sf.net (or in your downloaded distribution).
-
-  Most Checks are configurable, be sure to consult the documentation.
-
-  To completely disable a check, just comment it out or delete it from the file.
-
-  Finally, it is worth reading the documentation.
-
--->
-
-<module name="Checker">
-    <!--
-        If you set the basedir property below, then all reported file
-        names will be relative to the specified directory. See
-        http://checkstyle.sourceforge.net/5.x/config.html#Checker
-
-        <property name="basedir" value="${basedir}"/>
-    -->
-
-    <!-- Checks that each Java package has a Javadoc file used for commenting. -->
-    <!-- See http://checkstyle.sf.net/config_javadoc.html#JavadocPackage       -->
-    <module name="JavadocPackage">
-      <property name="allowLegacy" value="true"/>
-    </module>
-
-    <!-- Checks whether files end with a new line.                        -->
-    <!-- See http://checkstyle.sf.net/config_misc.html#NewlineAtEndOfFile -->
-    <module name="NewlineAtEndOfFile"/>
-
-    <!-- Checks that property files contain the same keys.         -->
-    <!-- See http://checkstyle.sf.net/config_misc.html#Translation -->
-    <module name="Translation"/>
-
-    <module name="FileLength"/>
-
-    <!-- Following interprets the header file as regular expressions. -->
-    <!-- <module name="RegexpHeader"/>                                -->
-
-    <module name="FileTabCharacter">
-        <property name="eachLine" value="true"/>
-    </module>
-
-    <module name="RegexpSingleline">
-        <!-- \s matches whitespace character, $ matches end of line. -->
-        <property name="format" value="\s+$"/>
-        <property name="message" value="Line has trailing spaces."/>
-    </module>
-
-    <module name="TreeWalker">
-
-        <property name="cacheFile" value="${checkstyle.cache.file}"/>
-
-        <!-- Checks for Javadoc comments.                     -->
-        <!-- See http://checkstyle.sf.net/config_javadoc.html -->
-        <module name="JavadocMethod"/>
-        <module name="JavadocType"/>
-        <module name="JavadocVariable"/>
-        <module name="JavadocStyle"/>
-
-
-        <!-- Checks for Naming Conventions.                  -->
-        <!-- See http://checkstyle.sf.net/config_naming.html -->
-        <module name="ConstantName"/>
-        <module name="LocalFinalVariableName"/>
-        <module name="LocalVariableName"/>
-        <module name="MemberName"/>
-        <module name="MethodName"/>
-        <module name="PackageName"/>
-        <module name="ParameterName"/>
-        <module name="StaticVariableName"/>
-        <module name="TypeName"/>
-
-
-        <!-- Checks for Headers                                -->
-        <!-- See http://checkstyle.sf.net/config_header.html   -->
-        <!-- <module name="Header">                            -->
-            <!-- The follow property value demonstrates the ability     -->
-            <!-- to have access to ANT properties. In this case it uses -->
-            <!-- the ${basedir} property to allow Checkstyle to be run  -->
-            <!-- from any directory within a project. See property      -->
-            <!-- expansion,                                             -->
-            <!-- http://checkstyle.sf.net/config.html#properties        -->
-            <!-- <property                                              -->
-            <!--     name="headerFile"                                  -->
-            <!--     value="${basedir}/java.header"/>                   -->
-        <!-- </module> -->
-
-
-        <!-- Checks for imports                              -->
-        <!-- See http://checkstyle.sf.net/config_import.html -->
-        <module name="AvoidStarImport"/>
-        <module name="IllegalImport"/> <!-- defaults to sun.* packages -->
-        <module name="RedundantImport"/>
-        <module name="UnusedImports"/>
-
-
-        <!-- Checks for Size Violations.                    -->
-        <!-- See http://checkstyle.sf.net/config_sizes.html -->
-        <module name="LineLength">
-		    <property name="max" value="160"/>
-        </module>
-        <module name="MethodLength"/>
-        <module name="ParameterNumber"/>
-
-
-        <!-- Checks for whitespace                               -->
-        <!-- See http://checkstyle.sf.net/config_whitespace.html -->
-        <module name="EmptyForIteratorPad"/>
-        <module name="MethodParamPad"/>
-        <module name="NoWhitespaceAfter"/>
-        <module name="NoWhitespaceBefore"/>
-        <module name="OperatorWrap"/>
-        <module name="ParenPad"/>
-        <module name="TypecastParenPad"/>
-        <module name="WhitespaceAfter"/>
-        <module name="WhitespaceAround"/>
-
-
-        <!-- Modifier Checks                                    -->
-        <!-- See http://checkstyle.sf.net/config_modifiers.html -->
-        <module name="ModifierOrder"/>
-        <module name="RedundantModifier"/>
-
-
-        <!-- Checks for blocks. You know, those {}'s         -->
-        <!-- See http://checkstyle.sf.net/config_blocks.html -->
-        <module name="AvoidNestedBlocks"/>
-        <module name="EmptyBlock"/>
-        <module name="LeftCurly"/>
-        <module name="NeedBraces"/>
-        <module name="RightCurly"/>
-
-
-        <!-- Checks for common coding problems               -->
-        <!-- See http://checkstyle.sf.net/config_coding.html -->
-        <module name="AvoidInlineConditionals"/>
-        <module name="DoubleCheckedLocking"/>    <!-- MY FAVOURITE -->
-        <module name="EmptyStatement"/>
-        <module name="EqualsHashCode"/>
-        <module name="HiddenField"/>
-        <module name="IllegalInstantiation"/>
-        <module name="InnerAssignment"/>
-        <module name="MagicNumber"/>
-        <module name="MissingSwitchDefault"/>
-        <module name="RedundantThrows"/>
-        <module name="SimplifyBooleanExpression"/>
-        <module name="SimplifyBooleanReturn"/>
-
-        <!-- Checks for class design                         -->
-        <!-- See http://checkstyle.sf.net/config_design.html -->
-        <module name="DesignForExtension"/>
-        <module name="FinalClass"/>
-        <module name="HideUtilityClassConstructor"/>
-        <module name="InterfaceIsType"/>
-        <module name="VisibilityModifier"/>
-
-
-        <!-- Miscellaneous other checks.                   -->
-        <!-- See http://checkstyle.sf.net/config_misc.html -->
-        <module name="ArrayTypeStyle"/>
-        <module name="FinalParameters"/>
-        <module name="TodoComment"/>
-        <module name="UpperEll"/>
-
-    </module>
-
-</module>
+<?xml version="1.0"?>
+<!DOCTYPE module PUBLIC
+    "-//Puppy Crawl//DTD Check Configuration 1.2//EN"
+    "http://www.puppycrawl.com/dtds/configuration_1_2.dtd">
+
+<!--
+
+  Checkstyle configuration that checks the sun coding conventions from:
+
+    - the Java Language Specification at
+      http://java.sun.com/docs/books/jls/second_edition/html/index.html
+
+    - the Sun Code Conventions at http://java.sun.com/docs/codeconv/
+
+    - the Javadoc guidelines at
+      http://java.sun.com/j2se/javadoc/writingdoccomments/index.html
+
+    - the JDK Api documentation http://java.sun.com/j2se/docs/api/index.html
+
+    - some best practices
+
+  Checkstyle is very configurable. Be sure to read the documentation at
+  http://checkstyle.sf.net (or in your downloaded distribution).
+
+  Most Checks are configurable, be sure to consult the documentation.
+
+  To completely disable a check, just comment it out or delete it from the file.
+
+  Finally, it is worth reading the documentation.
+
+-->
+
+<module name="Checker">
+    <!--
+        If you set the basedir property below, then all reported file
+        names will be relative to the specified directory. See
+        http://checkstyle.sourceforge.net/5.x/config.html#Checker
+
+        <property name="basedir" value="${basedir}"/>
+    -->
+
+    <!-- Checks that each Java package has a Javadoc file used for commenting. -->
+    <!-- See http://checkstyle.sf.net/config_javadoc.html#JavadocPackage       -->
+    <module name="JavadocPackage">
+      <property name="allowLegacy" value="true"/>
+    </module>
+
+    <!-- Checks whether files end with a new line.                        -->
+    <!-- See http://checkstyle.sf.net/config_misc.html#NewlineAtEndOfFile -->
+    <module name="NewlineAtEndOfFile"/>
+
+    <!-- Checks that property files contain the same keys.         -->
+    <!-- See http://checkstyle.sf.net/config_misc.html#Translation -->
+    <module name="Translation"/>
+
+    <module name="FileLength"/>
+
+    <!-- Following interprets the header file as regular expressions. -->
+    <!-- <module name="RegexpHeader"/>                                -->
+
+    <module name="FileTabCharacter">
+        <property name="eachLine" value="true"/>
+    </module>
+
+    <module name="RegexpSingleline">
+        <!-- \s matches whitespace character, $ matches end of line. -->
+        <property name="format" value="\s+$"/>
+        <property name="message" value="Line has trailing spaces."/>
+    </module>
+
+    <module name="TreeWalker">
+
+        <property name="cacheFile" value="${checkstyle.cache.file}"/>
+
+        <!-- Checks for Javadoc comments.                     -->
+        <!-- See http://checkstyle.sf.net/config_javadoc.html -->
+        <module name="JavadocMethod"/>
+        <module name="JavadocType"/>
+        <module name="JavadocVariable"/>
+        <module name="JavadocStyle"/>
+
+
+        <!-- Checks for Naming Conventions.                  -->
+        <!-- See http://checkstyle.sf.net/config_naming.html -->
+        <module name="ConstantName"/>
+        <module name="LocalFinalVariableName"/>
+        <module name="LocalVariableName"/>
+        <module name="MemberName"/>
+        <module name="MethodName"/>
+        <module name="PackageName"/>
+        <module name="ParameterName"/>
+        <module name="StaticVariableName"/>
+        <module name="TypeName"/>
+
+
+        <!-- Checks for Headers                                -->
+        <!-- See http://checkstyle.sf.net/config_header.html   -->
+        <!-- <module name="Header">                            -->
+            <!-- The follow property value demonstrates the ability     -->
+            <!-- to have access to ANT properties. In this case it uses -->
+            <!-- the ${basedir} property to allow Checkstyle to be run  -->
+            <!-- from any directory within a project. See property      -->
+            <!-- expansion,                                             -->
+            <!-- http://checkstyle.sf.net/config.html#properties        -->
+            <!-- <property                                              -->
+            <!--     name="headerFile"                                  -->
+            <!--     value="${basedir}/java.header"/>                   -->
+        <!-- </module> -->
+
+
+        <!-- Checks for imports                              -->
+        <!-- See http://checkstyle.sf.net/config_import.html -->
+        <module name="AvoidStarImport"/>
+        <module name="IllegalImport"/> <!-- defaults to sun.* packages -->
+        <module name="RedundantImport"/>
+        <module name="UnusedImports"/>
+
+
+        <!-- Checks for Size Violations.                    -->
+        <!-- See http://checkstyle.sf.net/config_sizes.html -->
+        <module name="LineLength">
+		    <property name="max" value="160"/>
+        </module>
+        <module name="MethodLength"/>
+        <module name="ParameterNumber"/>
+
+
+        <!-- Checks for whitespace                               -->
+        <!-- See http://checkstyle.sf.net/config_whitespace.html -->
+        <module name="EmptyForIteratorPad"/>
+        <module name="MethodParamPad"/>
+        <module name="NoWhitespaceAfter"/>
+        <module name="NoWhitespaceBefore"/>
+        <module name="OperatorWrap"/>
+        <module name="ParenPad"/>
+        <module name="TypecastParenPad"/>
+        <module name="WhitespaceAfter"/>
+        <module name="WhitespaceAround"/>
+
+
+        <!-- Modifier Checks                                    -->
+        <!-- See http://checkstyle.sf.net/config_modifiers.html -->
+        <module name="ModifierOrder"/>
+        <module name="RedundantModifier"/>
+
+
+        <!-- Checks for blocks. You know, those {}'s         -->
+        <!-- See http://checkstyle.sf.net/config_blocks.html -->
+        <module name="AvoidNestedBlocks"/>
+        <module name="EmptyBlock"/>
+        <module name="LeftCurly"/>
+        <module name="NeedBraces"/>
+        <module name="RightCurly"/>
+
+
+        <!-- Checks for common coding problems               -->
+        <!-- See http://checkstyle.sf.net/config_coding.html -->
+        <module name="AvoidInlineConditionals"/>
+        <module name="DoubleCheckedLocking"/>    <!-- MY FAVOURITE -->
+        <module name="EmptyStatement"/>
+        <module name="EqualsHashCode"/>
+        <module name="HiddenField"/>
+        <module name="IllegalInstantiation"/>
+        <module name="InnerAssignment"/>
+        <module name="MagicNumber"/>
+        <module name="MissingSwitchDefault"/>
+        <module name="RedundantThrows"/>
+        <module name="SimplifyBooleanExpression"/>
+        <module name="SimplifyBooleanReturn"/>
+
+        <!-- Checks for class design                         -->
+        <!-- See http://checkstyle.sf.net/config_design.html -->
+        <module name="DesignForExtension"/>
+        <module name="FinalClass"/>
+        <module name="HideUtilityClassConstructor"/>
+        <module name="InterfaceIsType"/>
+        <module name="VisibilityModifier"/>
+
+
+        <!-- Miscellaneous other checks.                   -->
+        <!-- See http://checkstyle.sf.net/config_misc.html -->
+        <module name="ArrayTypeStyle"/>
+        <module name="FinalParameters"/>
+        <module name="TodoComment"/>
+        <module name="UpperEll"/>
+
+    </module>
+
+</module>
diff --git a/src/main/java/org/acra/ACRA.java b/acra/src/main/java/org/acra/ACRA.java
similarity index 92%
rename from src/main/java/org/acra/ACRA.java
rename to acra/src/main/java/org/acra/ACRA.java
index 33bbc425..5a53edf8 100644
--- a/src/main/java/org/acra/ACRA.java
+++ b/acra/src/main/java/org/acra/ACRA.java
@@ -1,393 +1,378 @@
-/*
- *  Copyright 2010 Emmanuel Astier & Kevin Gaudin
- *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-package org.acra;
-
-import android.app.Application;
-import android.content.Context;
-import android.content.SharedPreferences;
-import android.content.SharedPreferences.OnSharedPreferenceChangeListener;
-import android.os.Build;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-
-import org.acra.annotation.ReportsCrashes;
-import org.acra.config.ACRAConfiguration;
-import org.acra.config.ACRAConfigurationException;
-import org.acra.config.ConfigurationBuilder;
-import org.acra.legacy.ReportMigrator;
-import org.acra.log.ACRALog;
-import org.acra.log.AndroidLogDelegate;
-import org.acra.prefs.PrefUtils;
-import org.acra.prefs.SharedPreferencesFactory;
-import org.acra.util.ApplicationStartupProcessor;
-import org.acra.util.IOUtils;
-
-import java.io.FileInputStream;
-import java.io.IOException;
-
-/**
- * Use this class to initialize the crash reporting feature using
- * {@link #init(Application)} as soon as possible in your {@link Application}
- * subclass {@link Application#onCreate()} method. Configuration items must have
- * been set by using {@link ReportsCrashes} above the declaration of your
- * {@link Application} subclass.
- *
- * @author Kevin Gaudin
- *
- */
-@SuppressWarnings({"WeakerAccess","unused"})
-public final class ACRA {
-    private ACRA(){}
-
-    public static /*non-final*/ boolean DEV_LOGGING = false; // Should be false for release.
-
-    public static final String LOG_TAG = ACRA.class.getSimpleName();
-
-    @NonNull
-    public static ACRALog log = new AndroidLogDelegate();
-
-    private static final String ACRA_PRIVATE_PROCESS_NAME= ":acra";
-
-    /**
-     * The key of the application default SharedPreference where you can put a
-     * 'true' Boolean value to disable ACRA.
-     */
-    public static final String PREF_DISABLE_ACRA = "acra.disable";
-
-    /**
-     * Alternatively, you can use this key if you prefer your users to have the
-     * checkbox ticked to enable crash reports. If both acra.disable and
-     * acra.enable are set, the value of acra.disable takes over the other.
-     */
-    public static final String PREF_ENABLE_ACRA = "acra.enable";
-
-    /**
-     * The key of the SharedPreference allowing the user to disable sending
-     * content of logcat/dropbox. System logs collection is also dependent of
-     * the READ_LOGS permission.
-     */
-    public static final String PREF_ENABLE_SYSTEM_LOGS = "acra.syslog.enable";
-
-    /**
-     * The key of the SharedPreference allowing the user to disable sending his
-     * device id. Device ID collection is also dependent of the READ_PHONE_STATE
-     * permission.
-     */
-    public static final String PREF_ENABLE_DEVICE_ID = "acra.deviceid.enable";
-
-    /**
-     * The key of the SharedPreference allowing the user to always include his
-     * email address.
-     */
-    public static final String PREF_USER_EMAIL_ADDRESS = "acra.user.email";
-
-    /**
-     * The key of the SharedPreference allowing the user to automatically accept
-     * sending reports.
-     */
-    public static final String PREF_ALWAYS_ACCEPT = "acra.alwaysaccept";
-
-    /**
-     * The version number of the application the last time ACRA was started.
-     * This is used to determine whether unsent reports should be discarded
-     * because they are old and out of date.
-     */
-    public static final String PREF_LAST_VERSION_NR = "acra.lastVersionNr";
-
-    private static final String PREF__LEGACY_ALREADY_CONVERTED_TO_4_8_0 = "acra.legacyAlreadyConvertedTo4.8.0";
-
-    private static Application mApplication;
-    @Nullable
-    private static ACRAConfiguration configProxy;
-
-    // Accessible via ACRA#getErrorReporter().
-    @Nullable
-    private static ErrorReporter errorReporterSingleton;
-
-    // NB don't convert to a local field because then it could be garbage
-    // collected and then we would have no PreferenceListener.
-    private static OnSharedPreferenceChangeListener mPrefListener; // TODO consider moving to ErrorReport so it doesn't need to be a static field.
-
-    /**
-     * <p>
-     * Initialize ACRA for a given Application.
-     *
-     * The call to this method should be placed as soon as possible in the {@link Application#attachBaseContext(Context)} method.
-     *
-     * Uses the configuration as configured with the @ReportCrashes annotation.
-     * Sends any unsent reports.
-     * </p>
-     *
-     * @param app   Your Application class.
-     * @throws IllegalStateException if it is called more than once.
-     */
-    public static void init(@NonNull Application app) {
-        final ReportsCrashes reportsCrashes = app.getClass().getAnnotation(ReportsCrashes.class);
-        if (reportsCrashes == null) {
-            log.e(LOG_TAG, "ACRA#init(Application) called but no ReportsCrashes annotation on Application " + app.getPackageName());
-            return;
-        }
-        try {
-            init(app, new ConfigurationBuilder(app).build());
-        } catch (ACRAConfigurationException e) {
-            log.w(LOG_TAG, "Configuration Error - ACRA not started : " + e.getMessage());
-        }
-    }
-
-    /**
-     * <p>
-     * Initialize ACRA for a given Application.
-     *
-     * The call to this method should be placed as soon as possible in the {@link Application#attachBaseContext(Context)} method.
-     *
-     * Uses the configuration as configured with the @ReportCrashes annotation.
-     * Sends any unsent reports.
-     * </p>
-     *
-     * @param app     Your Application class.
-     * @param builder ConfigurationBuilder to manually set up ACRA configuration.
-     */
-    public static void init(@NonNull Application app, @NonNull ConfigurationBuilder builder) {
-        init(app, builder, true);
-    }
-
-    /**
-     * <p>
-     * Initialize ACRA for a given Application.
-     *
-     * The call to this method should be placed as soon as possible in the {@link Application#attachBaseContext(Context)}  method.
-     * </p>
-     *
-     * @param app                            Your Application class.
-     * @param builder                        ConfigurationBuilder to manually set up ACRA configuration.
-     * @param checkReportsOnApplicationStart Whether to invoke ErrorReporter.checkReportsOnApplicationStart().
-     */
-    public static void init(@NonNull Application app, @NonNull ConfigurationBuilder builder, boolean checkReportsOnApplicationStart) {
-        try {
-            init(app, builder.build(), checkReportsOnApplicationStart);
-        } catch (ACRAConfigurationException e) {
-            log.w(LOG_TAG, "Configuration Error - ACRA not started : " + e.getMessage());
-        }
-    }
-
-    /**
-     * <p>
-     * Initialize ACRA for a given Application.
-     *
-     * The call to this method should be placed as soon as possible in the {@link Application#attachBaseContext(Context)} method.
-     *
-     * Sends any unsent reports.
-     * </p>
-     *
-     * @param app       Your Application class.
-     * @param config    ACRAConfiguration to manually set up ACRA configuration.
-     * @throws IllegalStateException if it is called more than once.
-     */
-    public static void init(@NonNull Application app, @NonNull ACRAConfiguration config) {
-        init(app, config, true);
-    }
-
-    /**
-     * <p>
-     * Initialize ACRA for a given Application. The call to this method should
-     * be placed as soon as possible in the {@link Application#attachBaseContext(Context)}
-     * method.
-     * </p>
-     *
-     * @param app       Your Application class.
-     * @param config    ACRAConfiguration to manually set up ACRA configuration.
-     * @param checkReportsOnApplicationStart    Whether to invoke ErrorReporter.checkReportsOnApplicationStart().
-     * @throws IllegalStateException if it is called more than once.
-     */
-    public static void init(@NonNull Application app, @NonNull ACRAConfiguration config, boolean checkReportsOnApplicationStart){
-
-        final boolean senderServiceProcess = isACRASenderServiceProcess();
-        if (senderServiceProcess) {
-            if (ACRA.DEV_LOGGING) log.d(LOG_TAG, "Not initialising ACRA to listen for uncaught Exceptions as this is the SendWorker process and we only send reports, we don't capture them to avoid infinite loops");
-        }
-
-        final boolean supportedAndroidVersion = Build.VERSION.SDK_INT >= Build.VERSION_CODES.FROYO;
-        if (!supportedAndroidVersion){
-            // NB We keep initialising so that everything is configured. But ACRA is never enabled below.
-            log.w(LOG_TAG, "ACRA 4.7.0+ requires Froyo or greater. ACRA is disabled and will NOT catch crashes or send messages.");
-        }
-
-        if (mApplication != null) {
-            log.w(LOG_TAG, "ACRA#init called more than once. Won't do anything more.");
-            return;
-        }
-        mApplication = app;
-
-        //noinspection ConstantConditions
-        if (config == null) {
-            log.e(LOG_TAG, "ACRA#init called but no ACRAConfiguration provided");
-            return;
-        }
-        configProxy = config;
-
-        final SharedPreferences prefs = new SharedPreferencesFactory(mApplication, configProxy).create();
-
-        // Check prefs to see if we have converted from legacy (pre 4.8.0) ACRA
-        if (!prefs.getBoolean(PREF__LEGACY_ALREADY_CONVERTED_TO_4_8_0, false)) {
-            // If not then move reports to approved/unapproved folders and mark as converted.
-            new ReportMigrator(app).migrate();
-
-            // Mark as converted.
-            final SharedPreferences.Editor editor = prefs.edit().putBoolean(PREF__LEGACY_ALREADY_CONVERTED_TO_4_8_0, true);
-            PrefUtils.save(editor);
-        }
-
-        // Initialize ErrorReporter with all required data
-        final boolean enableAcra = supportedAndroidVersion && !shouldDisableACRA(prefs);
-        if (!senderServiceProcess) {
-            // Indicate that ACRA is or is not listening for crashes.
-            log.i(LOG_TAG, "ACRA is " + (enableAcra ? "enabled" : "disabled") + " for " + mApplication.getPackageName() + ", initializing...");
-        }
-        errorReporterSingleton = new ErrorReporter(mApplication, configProxy, prefs, enableAcra, supportedAndroidVersion, !senderServiceProcess);
-
-        // Check for approved reports and send them (if enabled).
-        // NB don't check if senderServiceProcess as it will gather these reports itself.
-        if (checkReportsOnApplicationStart && !senderServiceProcess) {
-            final ApplicationStartupProcessor startupProcessor = new ApplicationStartupProcessor(mApplication,  config);
-            if (config.deleteOldUnsentReportsOnApplicationStart()) {
-                startupProcessor.deleteUnsentReportsFromOldAppVersion();
-            }
-            if (config.deleteUnapprovedReportsOnApplicationStart()) {
-                startupProcessor.deleteAllUnapprovedReportsBarOne();
-            }
-            if (enableAcra) {
-                startupProcessor.sendApprovedReports();
-            }
-        }
-
-        // We HAVE to keep a reference otherwise the listener could be garbage
-        // collected:
-        // http://stackoverflow.com/questions/2542938/sharedpreferences-onsharedpreferencechangelistener-not-being-called-consistently/3104265#3104265
-        mPrefListener = new OnSharedPreferenceChangeListener() {
-
-            @Override
-            public void onSharedPreferenceChanged(@NonNull SharedPreferences sharedPreferences, String key) {
-                if (PREF_DISABLE_ACRA.equals(key) || PREF_ENABLE_ACRA.equals(key)) {
-                    final boolean enableAcra = !shouldDisableACRA(sharedPreferences);
-                    getErrorReporter().setEnabled(enableAcra);
-                }
-            }
-        };
-
-        // This listener has to be set after initAcra is called to avoid a
-        // NPE in ErrorReporter.disable() because
-        // the context could be null at this moment.
-        prefs.registerOnSharedPreferenceChangeListener(mPrefListener);
-    }
-
-    /**
-     * @return true is ACRA has been initialised.
-     */
-    @SuppressWarnings("unused")
-    public static boolean isInitialised() {
-        return configProxy != null;
-    }
-
-    /**
-     * @return true if the current process is the process running the SenderService.
-     *          NB this assumes that your SenderService is configured to used the default ':acra' process.
-     */
-    public static boolean isACRASenderServiceProcess() {
-        final String processName = getCurrentProcessName();
-        if (ACRA.DEV_LOGGING) log.d(LOG_TAG, "ACRA processName='" + processName + '\'');
-        //processName sometimes (or always?) starts with the package name, so we use endsWith instead of equals
-        return processName != null && processName.endsWith(ACRA_PRIVATE_PROCESS_NAME);
-    }
-
-    @Nullable
-    private static String getCurrentProcessName() {
-        try {
-            return IOUtils.streamToString(new FileInputStream("/proc/self/cmdline")).trim();
-        } catch (IOException e) {
-            return null;
-        }
-    }
-
-    /**
-     * @return the current instance of ErrorReporter.
-     * @throws IllegalStateException if {@link ACRA#init(android.app.Application)} has not yet been called.
-     */
-    @NonNull
-    public static ErrorReporter getErrorReporter() {
-        if (errorReporterSingleton == null) {
-            throw new IllegalStateException("Cannot access ErrorReporter before ACRA#init");
-        }
-        return errorReporterSingleton;
-    }
-
-
-
-    /**
-     * Check if the application default shared preferences contains true for the
-     * key "acra.disable", do not activate ACRA. Also checks the alternative
-     * opposite setting "acra.enable" if "acra.disable" is not found.
-     *
-     * @param prefs
-     *            SharedPreferences to check to see whether ACRA should be
-     *            disabled.
-     * @return true if prefs indicate that ACRA should be disabled.
-     */
-    private static boolean shouldDisableACRA(@NonNull SharedPreferences prefs) {
-        boolean disableAcra = false;
-        try {
-            final boolean enableAcra = prefs.getBoolean(PREF_ENABLE_ACRA, true);
-            disableAcra = prefs.getBoolean(PREF_DISABLE_ACRA, !enableAcra);
-        } catch (Exception e) {
-            // In case of a ClassCastException
-        }
-        return disableAcra;
-    }
-
-    /**
-     * @return The Shared Preferences where ACRA will retrieve its user adjustable setting.
-     * @deprecated since 4.8.0 use {@link SharedPreferencesFactory} instead.
-     */
-    @SuppressWarnings( "unused" )
-    @NonNull
-    public static SharedPreferences getACRASharedPreferences() {
-        if (configProxy == null) {
-            throw new IllegalStateException("Cannot call ACRA.getACRASharedPreferences() before ACRA.init().");
-        }
-        return new SharedPreferencesFactory(mApplication, configProxy).create();
-    }
-
-    /**
-     * Provides the current ACRA configuration.
-     *
-     * @return Current ACRA {@link ReportsCrashes} configuration instance.
-     * @deprecated since 4.8.0 {@link ACRAConfiguration} should be passed into classes instead of retrieved statically.
-     */
-    @NonNull
-    public static ACRAConfiguration getConfig() {
-        if (configProxy == null) {
-            throw new IllegalStateException("Cannot call ACRA.getConfig() before ACRA.init().");
-        }
-        return configProxy;
-    }
-
-    public static void setLog(@NonNull ACRALog log) {
-        //noinspection ConstantConditions (do not rely on annotation alone)
-        if (log == null) {
-            throw new NullPointerException("ACRALog cannot be null");
-        }
-        ACRA.log = log;
-    }
-}
+/*
+ *  Copyright 2010 Emmanuel Astier & Kevin Gaudin
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.acra;
+
+import android.app.Application;
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.content.SharedPreferences.OnSharedPreferenceChangeListener;
+import android.os.Build;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import org.acra.annotation.ReportsCrashes;
+import org.acra.config.ACRAConfiguration;
+import org.acra.config.ACRAConfigurationException;
+import org.acra.config.ConfigurationBuilder;
+import org.acra.legacy.LegacyFileHandler;
+import org.acra.log.ACRALog;
+import org.acra.log.AndroidLogDelegate;
+import org.acra.prefs.SharedPreferencesFactory;
+import org.acra.util.ApplicationStartupProcessor;
+import org.acra.util.IOUtils;
+
+import java.io.FileInputStream;
+import java.io.IOException;
+
+/**
+ * Use this class to initialize the crash reporting feature using
+ * {@link #init(Application)} as soon as possible in your {@link Application}
+ * subclass {@link Application#onCreate()} method. Configuration items must have
+ * been set by using {@link ReportsCrashes} above the declaration of your
+ * {@link Application} subclass.
+ *
+ * @author Kevin Gaudin
+ *
+ */
+@SuppressWarnings({"WeakerAccess","unused"})
+public final class ACRA {
+    private ACRA(){}
+
+    public static /*non-final*/ boolean DEV_LOGGING = false; // Should be false for release.
+
+    public static final String LOG_TAG = ACRA.class.getSimpleName();
+
+    @NonNull
+    public static ACRALog log = new AndroidLogDelegate();
+
+    private static final String ACRA_PRIVATE_PROCESS_NAME= ":acra";
+
+    /**
+     * The key of the application default SharedPreference where you can put a
+     * 'true' Boolean value to disable ACRA.
+     */
+    public static final String PREF_DISABLE_ACRA = "acra.disable";
+
+    /**
+     * Alternatively, you can use this key if you prefer your users to have the
+     * checkbox ticked to enable crash reports. If both acra.disable and
+     * acra.enable are set, the value of acra.disable takes over the other.
+     */
+    public static final String PREF_ENABLE_ACRA = "acra.enable";
+
+    /**
+     * The key of the SharedPreference allowing the user to disable sending
+     * content of logcat/dropbox. System logs collection is also dependent of
+     * the READ_LOGS permission.
+     */
+    public static final String PREF_ENABLE_SYSTEM_LOGS = "acra.syslog.enable";
+
+    /**
+     * The key of the SharedPreference allowing the user to disable sending his
+     * device id. Device ID collection is also dependent of the READ_PHONE_STATE
+     * permission.
+     */
+    public static final String PREF_ENABLE_DEVICE_ID = "acra.deviceid.enable";
+
+    /**
+     * The key of the SharedPreference allowing the user to always include his
+     * email address.
+     */
+    public static final String PREF_USER_EMAIL_ADDRESS = "acra.user.email";
+
+    /**
+     * The key of the SharedPreference allowing the user to automatically accept
+     * sending reports.
+     */
+    public static final String PREF_ALWAYS_ACCEPT = "acra.alwaysaccept";
+
+    /**
+     * The version number of the application the last time ACRA was started.
+     * This is used to determine whether unsent reports should be discarded
+     * because they are old and out of date.
+     */
+    public static final String PREF_LAST_VERSION_NR = "acra.lastVersionNr";
+
+    private static Application mApplication;
+    @Nullable
+    private static ACRAConfiguration configProxy;
+
+    // Accessible via ACRA#getErrorReporter().
+    @Nullable
+    private static ErrorReporter errorReporterSingleton;
+
+    // NB don't convert to a local field because then it could be garbage
+    // collected and then we would have no PreferenceListener.
+    private static OnSharedPreferenceChangeListener mPrefListener; // TODO consider moving to ErrorReport so it doesn't need to be a static field.
+
+    /**
+     * <p>
+     * Initialize ACRA for a given Application.
+     *
+     * The call to this method should be placed as soon as possible in the {@link Application#attachBaseContext(Context)} method.
+     *
+     * Uses the configuration as configured with the @ReportCrashes annotation.
+     * Sends any unsent reports.
+     * </p>
+     *
+     * @param app   Your Application class.
+     * @throws IllegalStateException if it is called more than once.
+     */
+    public static void init(@NonNull Application app) {
+        final ReportsCrashes reportsCrashes = app.getClass().getAnnotation(ReportsCrashes.class);
+        if (reportsCrashes == null) {
+            log.e(LOG_TAG, "ACRA#init(Application) called but no ReportsCrashes annotation on Application " + app.getPackageName());
+            return;
+        }
+        init(app, new ConfigurationBuilder(app));
+    }
+
+    /**
+     * <p>
+     * Initialize ACRA for a given Application.
+     *
+     * The call to this method should be placed as soon as possible in the {@link Application#attachBaseContext(Context)} method.
+     *
+     * Uses the configuration as configured with the @ReportCrashes annotation.
+     * Sends any unsent reports.
+     * </p>
+     *
+     * @param app     Your Application class.
+     * @param builder ConfigurationBuilder to manually set up ACRA configuration.
+     */
+    public static void init(@NonNull Application app, @NonNull ConfigurationBuilder builder) {
+        init(app, builder, true);
+    }
+
+    /**
+     * <p>
+     * Initialize ACRA for a given Application.
+     *
+     * The call to this method should be placed as soon as possible in the {@link Application#attachBaseContext(Context)}  method.
+     * </p>
+     *
+     * @param app                            Your Application class.
+     * @param builder                        ConfigurationBuilder to manually set up ACRA configuration.
+     * @param checkReportsOnApplicationStart Whether to invoke ErrorReporter.checkReportsOnApplicationStart().
+     */
+    public static void init(@NonNull Application app, @NonNull ConfigurationBuilder builder, boolean checkReportsOnApplicationStart) {
+        try {
+            init(app, builder.build(), checkReportsOnApplicationStart);
+        } catch (ACRAConfigurationException e) {
+            log.w(LOG_TAG, "Configuration Error - ACRA not started : " + e.getMessage());
+        }
+    }
+
+    /**
+     * <p>
+     * Initialize ACRA for a given Application.
+     *
+     * The call to this method should be placed as soon as possible in the {@link Application#attachBaseContext(Context)} method.
+     *
+     * Sends any unsent reports.
+     * </p>
+     *
+     * @param app       Your Application class.
+     * @param config    ACRAConfiguration to manually set up ACRA configuration.
+     * @throws IllegalStateException if it is called more than once.
+     */
+    public static void init(@NonNull Application app, @NonNull ACRAConfiguration config) {
+        init(app, config, true);
+    }
+
+    /**
+     * <p>
+     * Initialize ACRA for a given Application. The call to this method should
+     * be placed as soon as possible in the {@link Application#attachBaseContext(Context)}
+     * method.
+     * </p>
+     *
+     * @param app       Your Application class.
+     * @param config    ACRAConfiguration to manually set up ACRA configuration.
+     * @param checkReportsOnApplicationStart    Whether to invoke ErrorReporter.checkReportsOnApplicationStart().
+     * @throws IllegalStateException if it is called more than once.
+     */
+    public static void init(@NonNull Application app, @NonNull ACRAConfiguration config, boolean checkReportsOnApplicationStart){
+
+        final boolean senderServiceProcess = isACRASenderServiceProcess();
+        if (senderServiceProcess) {
+            if (ACRA.DEV_LOGGING) log.d(LOG_TAG, "Not initialising ACRA to listen for uncaught Exceptions as this is the SendWorker process and we only send reports, we don't capture them to avoid infinite loops");
+        }
+
+        final boolean supportedAndroidVersion = Build.VERSION.SDK_INT >= Build.VERSION_CODES.FROYO;
+        if (!supportedAndroidVersion){
+            // NB We keep initialising so that everything is configured. But ACRA is never enabled below.
+            log.w(LOG_TAG, "ACRA 4.7.0+ requires Froyo or greater. ACRA is disabled and will NOT catch crashes or send messages.");
+        }
+
+        if (mApplication != null) {
+            log.w(LOG_TAG, "ACRA#init called more than once. Won't do anything more.");
+            return;
+        }
+        mApplication = app;
+
+        //noinspection ConstantConditions
+        if (config == null) {
+            log.e(LOG_TAG, "ACRA#init called but no ACRAConfiguration provided");
+            return;
+        }
+        configProxy = config;
+
+        final SharedPreferences prefs = new SharedPreferencesFactory(mApplication, configProxy).create();
+
+        new LegacyFileHandler(app, prefs).updateToCurrentVersionIfNecessary();
+
+        // Initialize ErrorReporter with all required data
+        final boolean enableAcra = supportedAndroidVersion && !shouldDisableACRA(prefs);
+        if (!senderServiceProcess) {
+            // Indicate that ACRA is or is not listening for crashes.
+            log.i(LOG_TAG, "ACRA is " + (enableAcra ? "enabled" : "disabled") + " for " + mApplication.getPackageName() + ", initializing...");
+        }
+        errorReporterSingleton = new ErrorReporter(mApplication, configProxy, prefs, enableAcra, supportedAndroidVersion, !senderServiceProcess);
+
+        // Check for approved reports and send them (if enabled).
+        // NB don't check if senderServiceProcess as it will gather these reports itself.
+        if (checkReportsOnApplicationStart && !senderServiceProcess) {
+            final ApplicationStartupProcessor startupProcessor = new ApplicationStartupProcessor(mApplication,  config);
+            if (config.deleteOldUnsentReportsOnApplicationStart()) {
+                startupProcessor.deleteUnsentReportsFromOldAppVersion();
+            }
+            if (config.deleteUnapprovedReportsOnApplicationStart()) {
+                startupProcessor.deleteAllUnapprovedReportsBarOne();
+            }
+            if (enableAcra) {
+                startupProcessor.sendApprovedReports();
+            }
+        }
+
+        // We HAVE to keep a reference otherwise the listener could be garbage
+        // collected:
+        // http://stackoverflow.com/questions/2542938/sharedpreferences-onsharedpreferencechangelistener-not-being-called-consistently/3104265#3104265
+        mPrefListener = new OnSharedPreferenceChangeListener() {
+
+            @Override
+            public void onSharedPreferenceChanged(@NonNull SharedPreferences sharedPreferences, String key) {
+                if (PREF_DISABLE_ACRA.equals(key) || PREF_ENABLE_ACRA.equals(key)) {
+                    final boolean enableAcra = !shouldDisableACRA(sharedPreferences);
+                    getErrorReporter().setEnabled(enableAcra);
+                }
+            }
+        };
+
+        // This listener has to be set after initAcra is called to avoid a
+        // NPE in ErrorReporter.disable() because
+        // the context could be null at this moment.
+        prefs.registerOnSharedPreferenceChangeListener(mPrefListener);
+    }
+
+    /**
+     * @return true is ACRA has been initialised.
+     */
+    @SuppressWarnings("unused")
+    public static boolean isInitialised() {
+        return configProxy != null;
+    }
+
+    /**
+     * @return true if the current process is the process running the SenderService.
+     *          NB this assumes that your SenderService is configured to used the default ':acra' process.
+     */
+    public static boolean isACRASenderServiceProcess() {
+        final String processName = getCurrentProcessName();
+        if (ACRA.DEV_LOGGING) log.d(LOG_TAG, "ACRA processName='" + processName + '\'');
+        //processName sometimes (or always?) starts with the package name, so we use endsWith instead of equals
+        return processName != null && processName.endsWith(ACRA_PRIVATE_PROCESS_NAME);
+    }
+
+    @Nullable
+    private static String getCurrentProcessName() {
+        try {
+            return IOUtils.streamToString(new FileInputStream("/proc/self/cmdline")).trim();
+        } catch (IOException e) {
+            return null;
+        }
+    }
+
+    /**
+     * @return the current instance of ErrorReporter.
+     * @throws IllegalStateException if {@link ACRA#init(android.app.Application)} has not yet been called.
+     */
+    @NonNull
+    public static ErrorReporter getErrorReporter() {
+        if (errorReporterSingleton == null) {
+            throw new IllegalStateException("Cannot access ErrorReporter before ACRA#init");
+        }
+        return errorReporterSingleton;
+    }
+
+
+
+    /**
+     * Check if the application default shared preferences contains true for the
+     * key "acra.disable", do not activate ACRA. Also checks the alternative
+     * opposite setting "acra.enable" if "acra.disable" is not found.
+     *
+     * @param prefs
+     *            SharedPreferences to check to see whether ACRA should be
+     *            disabled.
+     * @return true if prefs indicate that ACRA should be disabled.
+     */
+    private static boolean shouldDisableACRA(@NonNull SharedPreferences prefs) {
+        boolean disableAcra = false;
+        try {
+            final boolean enableAcra = prefs.getBoolean(PREF_ENABLE_ACRA, true);
+            disableAcra = prefs.getBoolean(PREF_DISABLE_ACRA, !enableAcra);
+        } catch (Exception e) {
+            // In case of a ClassCastException
+        }
+        return disableAcra;
+    }
+
+    /**
+     * @return The Shared Preferences where ACRA will retrieve its user adjustable setting.
+     * @deprecated since 4.8.0 use {@link SharedPreferencesFactory} instead.
+     */
+    @SuppressWarnings( "unused" )
+    @NonNull
+    public static SharedPreferences getACRASharedPreferences() {
+        if (configProxy == null) {
+            throw new IllegalStateException("Cannot call ACRA.getACRASharedPreferences() before ACRA.init().");
+        }
+        return new SharedPreferencesFactory(mApplication, configProxy).create();
+    }
+
+    /**
+     * Provides the current ACRA configuration.
+     *
+     * @return Current ACRA {@link ReportsCrashes} configuration instance.
+     * @deprecated since 4.8.0 {@link ACRAConfiguration} should be passed into classes instead of retrieved statically.
+     */
+    @NonNull
+    public static ACRAConfiguration getConfig() {
+        if (configProxy == null) {
+            throw new IllegalStateException("Cannot call ACRA.getConfig() before ACRA.init().");
+        }
+        return configProxy;
+    }
+
+    public static void setLog(@NonNull ACRALog log) {
+        //noinspection ConstantConditions (do not rely on annotation alone)
+        if (log == null) {
+            throw new NullPointerException("ACRALog cannot be null");
+        }
+        ACRA.log = log;
+    }
+}
diff --git a/src/main/java/org/acra/ACRAConstants.java b/acra/src/main/java/org/acra/ACRAConstants.java
similarity index 95%
rename from src/main/java/org/acra/ACRAConstants.java
rename to acra/src/main/java/org/acra/ACRAConstants.java
index 73bcd8cb..07ffa3ff 100644
--- a/src/main/java/org/acra/ACRAConstants.java
+++ b/acra/src/main/java/org/acra/ACRAConstants.java
@@ -1,162 +1,169 @@
-/*
- *  Copyright 2012 Kevin Gaudin
- *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-package org.acra;
-
-import android.content.Context;
-import android.support.annotation.DrawableRes;
-import android.support.annotation.StringRes;
-
-import org.acra.dialog.CrashReportDialog;
-
-import static org.acra.ReportField.*;
-
-/**
- * Responsible for collating those constants shared among the ACRA components.
- * 
- * @author William Ferguson
- * @since 4.3.0
- */
-public final class ACRAConstants {
-    private ACRAConstants(){}
-
-    public static final String REPORTFILE_EXTENSION = ".stacktrace";
-
-    /**
-     * Suffix to be added to report files when they have been approved by the
-     * user in NOTIFICATION mode
-     */
-    public static final String APPROVED_SUFFIX = "-approved";
-    /**
-     * This key is used to store the silent state of a report sent by
-     * handleSilentException().
-     */
-    public static final String SILENT_SUFFIX = "-" + IS_SILENT;
-    /**
-     * This is the maximum number of previously stored reports that we send
-     * in one batch to avoid overloading the network.
-     */
-    public static final int MAX_SEND_REPORTS = 5;
-
-    /**
-     * Used in the intent starting CrashReportDialog to provide the name of the
-     * latest generated report file in order to be able to associate the user
-     * comment.
-     */
-    public static final String EXTRA_REPORT_FILE = "REPORT_FILE";
-    public static final String EXTRA_REPORT_FILE_NAME = "REPORT_FILE_NAME";
-
-    /**
-     * Used in the intent starting CrashReportDialog to provide the Exception that caused the crash.
-     *
-     * This can be used by any BaseCrashReportDialog subclass to custom the dialog.
-     */
-    public static final String EXTRA_REPORT_EXCEPTION = "REPORT_EXCEPTION";
-
-    /**
-     * Used in the intent starting CrashReportDialog to provide the AcraConfig to use when gathering the crash info.
-     *
-     * This can be used by any BaseCrashReportDialog subclass to custom the dialog.
-     */
-    public static final String EXTRA_REPORT_CONFIG = "REPORT_CONFIG";
-
-    /**
-     * Set this extra to true to force the deletion of reports by the {@link CrashReportDialog} activity.
-     */
-    public static final String EXTRA_FORCE_CANCEL = "FORCE_CANCEL";
-    /**
-     * This is the identifier (value = 666) use for the status bar notification issued when crashes occur.
-     */
-    public static final int NOTIF_CRASH_ID = 666;
-    /**
-     * Number of milliseconds to wait after displaying a toast.
-     */
-    public static final int TOAST_WAIT_DURATION = 2000;
-
-    /**
-     * A special String value to allow the usage of a pseudo-null default value
-     * in annotation parameters.
-     */
-    public static final String NULL_VALUE = "ACRA-NULL-STRING";
-
-    public static final boolean DEFAULT_REPORT_TO_ANDROID_FRAMEWORK = false;
-
-    public static final int DEFAULT_SOCKET_TIMEOUT = 20000;
-
-    public static final int DEFAULT_CONNECTION_TIMEOUT = 5000;
-
-    public static final boolean DEFAULT_DELETE_UNAPPROVED_REPORTS_ON_APPLICATION_START = true;
-
-    public static final boolean DEFAULT_DELETE_OLD_UNSENT_REPORTS_ON_APPLICATION_START = true;
-
-    public static final int DEFAULT_DROPBOX_COLLECTION_MINUTES = 5;
-
-    public static final boolean DEFAULT_INCLUDE_DROPBOX_SYSTEM_TAGS = false;
-
-    public static final int DEFAULT_SHARED_PREFERENCES_MODE = Context.MODE_PRIVATE;
-
-    @DrawableRes
-    public static final int DEFAULT_NOTIFICATION_ICON = android.R.drawable.stat_notify_error;
-
-    @DrawableRes
-    public static final int DEFAULT_DIALOG_ICON = android.R.drawable.ic_dialog_alert;
-
-    @StringRes
-    public static final int DEFAULT_DIALOG_POSITIVE_BUTTON_TEXT = android.R.string.ok;
-
-    @StringRes
-    public static final int DEFAULT_DIALOG_NEGATIVE_BUTTON_TEXT = android.R.string.cancel;
-
-    public static final int DEFAULT_RES_VALUE = 0;
-
-    public static final String DEFAULT_STRING_VALUE = "";
-
-    public static final int DEFAULT_LOGCAT_LINES = 100;
-
-    public static final int DEFAULT_BUFFER_SIZE_IN_BYTES = 8192;
-
-    public static final boolean DEFAULT_LOGCAT_FILTER_BY_PID = false;
-
-    public static final boolean DEFAULT_SEND_REPORTS_IN_DEV_MODE = true;
-
-    public static final String DEFAULT_APPLICATION_LOGFILE = DEFAULT_STRING_VALUE;
-
-    public static final int DEFAULT_APPLICATION_LOGFILE_LINES = DEFAULT_LOGCAT_LINES;
-
-    /**
-     * Default list of {@link ReportField}s to be sent in email reports. You can
-     * set your own list with
-     * {@link org.acra.annotation.ReportsCrashes#customReportContent()}.
-     * 
-     * @see org.acra.annotation.ReportsCrashes#mailTo()
-     */
-    public static final ReportField[] DEFAULT_MAIL_REPORT_FIELDS = { USER_COMMENT, ANDROID_VERSION, APP_VERSION_NAME,
-            BRAND, PHONE_MODEL, CUSTOM_DATA, STACK_TRACE };
-
-    /**
-     * Default list of {@link ReportField}s to be sent in reports. You can set
-     * your own list with
-     * {@link org.acra.annotation.ReportsCrashes#customReportContent()}.
-     */
-    public static final ReportField[] DEFAULT_REPORT_FIELDS = { REPORT_ID, APP_VERSION_CODE, APP_VERSION_NAME,
-            PACKAGE_NAME, FILE_PATH, PHONE_MODEL, BRAND, PRODUCT, ANDROID_VERSION, BUILD, TOTAL_MEM_SIZE,
-            AVAILABLE_MEM_SIZE, BUILD_CONFIG, CUSTOM_DATA, IS_SILENT, STACK_TRACE, INITIAL_CONFIGURATION, CRASH_CONFIGURATION,
-            DISPLAY, USER_COMMENT, USER_EMAIL, USER_APP_START_DATE, USER_CRASH_DATE, DUMPSYS_MEMINFO, LOGCAT,
-            INSTALLATION_ID, DEVICE_FEATURES, ENVIRONMENT, SHARED_PREFERENCES };
-
-    public static final String DATE_TIME_FORMAT_STRING = "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ";
-
-    public static final String DEFAULT_CERTIFICATE_TYPE = "X.509";
-}
+/*
+ *  Copyright 2012 Kevin Gaudin
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.acra;
+
+import android.content.Context;
+import android.support.annotation.DrawableRes;
+import android.support.annotation.StringRes;
+
+import org.acra.dialog.CrashReportDialog;
+import org.acra.model.Element;
+import org.acra.model.StringElement;
+
+import static org.acra.ReportField.*;
+
+/**
+ * Responsible for collating those constants shared among the ACRA components.
+ * 
+ * @author William Ferguson
+ * @since 4.3.0
+ */
+public final class ACRAConstants {
+    private ACRAConstants(){}
+
+    public static final String REPORTFILE_EXTENSION = ".stacktrace";
+
+    /**
+     * Suffix to be added to report files when they have been approved by the
+     * user in NOTIFICATION mode
+     */
+    public static final String APPROVED_SUFFIX = "-approved";
+    /**
+     * This key is used to store the silent state of a report sent by
+     * handleSilentException().
+     */
+    public static final String SILENT_SUFFIX = "-" + IS_SILENT;
+    /**
+     * This is the maximum number of previously stored reports that we send
+     * in one batch to avoid overloading the network.
+     */
+    public static final int MAX_SEND_REPORTS = 5;
+
+    /**
+     * Used in the intent starting CrashReportDialog to provide the name of the
+     * latest generated report file in order to be able to associate the user
+     * comment.
+     */
+    public static final String EXTRA_REPORT_FILE = "REPORT_FILE";
+
+    /**
+     * Used in the intent starting CrashReportDialog to provide the Exception that caused the crash.
+     *
+     * This can be used by any BaseCrashReportDialog subclass to custom the dialog.
+     */
+    public static final String EXTRA_REPORT_EXCEPTION = "REPORT_EXCEPTION";
+
+    /**
+     * Used in the intent starting CrashReportDialog to provide the AcraConfig to use when gathering the crash info.
+     *
+     * This can be used by any BaseCrashReportDialog subclass to custom the dialog.
+     */
+    public static final String EXTRA_REPORT_CONFIG = "REPORT_CONFIG";
+
+    /**
+     * Set this extra to true to force the deletion of reports by the {@link CrashReportDialog} activity.
+     */
+    public static final String EXTRA_FORCE_CANCEL = "FORCE_CANCEL";
+    /**
+     * This is the identifier (value = 666) use for the status bar notification issued when crashes occur.
+     */
+    public static final int NOTIF_CRASH_ID = 666;
+    /**
+     * Number of milliseconds to wait after displaying a toast.
+     */
+    public static final int TOAST_WAIT_DURATION = 2000;
+
+    /**
+     * A special String value to allow the usage of a pseudo-null default value
+     * in annotation parameters.
+     */
+    public static final String NULL_VALUE = "ACRA-NULL-STRING";
+
+    public static final boolean DEFAULT_REPORT_TO_ANDROID_FRAMEWORK = false;
+
+    public static final int DEFAULT_SOCKET_TIMEOUT = 20000;
+
+    public static final int DEFAULT_CONNECTION_TIMEOUT = 5000;
+
+    public static final boolean DEFAULT_DELETE_UNAPPROVED_REPORTS_ON_APPLICATION_START = true;
+
+    public static final boolean DEFAULT_DELETE_OLD_UNSENT_REPORTS_ON_APPLICATION_START = true;
+
+    public static final int DEFAULT_DROPBOX_COLLECTION_MINUTES = 5;
+
+    public static final boolean DEFAULT_INCLUDE_DROPBOX_SYSTEM_TAGS = false;
+
+    public static final int DEFAULT_SHARED_PREFERENCES_MODE = Context.MODE_PRIVATE;
+
+    @DrawableRes
+    public static final int DEFAULT_NOTIFICATION_ICON = android.R.drawable.stat_notify_error;
+
+    @DrawableRes
+    public static final int DEFAULT_DIALOG_ICON = android.R.drawable.ic_dialog_alert;
+
+    @StringRes
+    public static final int DEFAULT_DIALOG_POSITIVE_BUTTON_TEXT = android.R.string.ok;
+
+    @StringRes
+    public static final int DEFAULT_DIALOG_NEGATIVE_BUTTON_TEXT = android.R.string.cancel;
+
+    public static final int DEFAULT_RES_VALUE = 0;
+
+    public static final String DEFAULT_STRING_VALUE = "";
+
+    public static final int DEFAULT_LOGCAT_LINES = 100;
+
+    public static final int DEFAULT_BUFFER_SIZE_IN_BYTES = 8192;
+
+    public static final boolean DEFAULT_LOGCAT_FILTER_BY_PID = false;
+
+    public static final boolean DEFAULT_NON_BLOCKING_READ_FOR_LOGCAT = false;
+
+    public static final boolean DEFAULT_SEND_REPORTS_IN_DEV_MODE = true;
+
+    public static final String DEFAULT_APPLICATION_LOGFILE = DEFAULT_STRING_VALUE;
+
+    public static final int DEFAULT_APPLICATION_LOGFILE_LINES = DEFAULT_LOGCAT_LINES;
+
+    /**
+     * Default list of {@link ReportField}s to be sent in email reports. You can
+     * set your own list with
+     * {@link org.acra.annotation.ReportsCrashes#customReportContent()}.
+     * 
+     * @see org.acra.annotation.ReportsCrashes#mailTo()
+     */
+    public static final ReportField[] DEFAULT_MAIL_REPORT_FIELDS = { USER_COMMENT, ANDROID_VERSION, APP_VERSION_NAME,
+            BRAND, PHONE_MODEL, CUSTOM_DATA, STACK_TRACE };
+
+    /**
+     * Default list of {@link ReportField}s to be sent in reports. You can set
+     * your own list with
+     * {@link org.acra.annotation.ReportsCrashes#customReportContent()}.
+     */
+    public static final ReportField[] DEFAULT_REPORT_FIELDS = { REPORT_ID, APP_VERSION_CODE, APP_VERSION_NAME,
+            PACKAGE_NAME, FILE_PATH, PHONE_MODEL, BRAND, PRODUCT, ANDROID_VERSION, BUILD, TOTAL_MEM_SIZE,
+            AVAILABLE_MEM_SIZE, BUILD_CONFIG, CUSTOM_DATA, IS_SILENT, STACK_TRACE, INITIAL_CONFIGURATION, CRASH_CONFIGURATION,
+            DISPLAY, USER_COMMENT, USER_EMAIL, USER_APP_START_DATE, USER_CRASH_DATE, DUMPSYS_MEMINFO, LOGCAT,
+            INSTALLATION_ID, DEVICE_FEATURES, ENVIRONMENT, SHARED_PREFERENCES };
+
+    public static final String DATE_TIME_FORMAT_STRING = "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ";
+
+    public static final String DEFAULT_CERTIFICATE_TYPE = "X.509";
+
+    public static final Element NOT_AVAILABLE = new StringElement("N/A");
+
+    public static final String UTF8 = "UTF-8";
+}
diff --git a/src/main/java/org/acra/CrashReportDialog.java b/acra/src/main/java/org/acra/CrashReportDialog.java
similarity index 100%
rename from src/main/java/org/acra/CrashReportDialog.java
rename to acra/src/main/java/org/acra/CrashReportDialog.java
diff --git a/src/main/java/org/acra/ErrorReporter.java b/acra/src/main/java/org/acra/ErrorReporter.java
similarity index 89%
rename from src/main/java/org/acra/ErrorReporter.java
rename to acra/src/main/java/org/acra/ErrorReporter.java
index b59e605a..94e2738a 100644
--- a/src/main/java/org/acra/ErrorReporter.java
+++ b/acra/src/main/java/org/acra/ErrorReporter.java
@@ -1,383 +1,380 @@
-/*
- *  Copyright 2010 Emmanuel Astier & Kevin Gaudin
- *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-package org.acra;
-
-import android.app.Application;
-import android.content.SharedPreferences;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-
-import org.acra.annotation.ReportsCrashes;
-import org.acra.builder.*;
-import org.acra.collector.ConfigurationCollector;
-import org.acra.collector.CrashReportDataFactory;
-import org.acra.util.ApplicationStartupProcessor;
-import org.acra.config.ACRAConfiguration;
-
-import java.lang.Thread.UncaughtExceptionHandler;
-import java.util.Calendar;
-import java.util.GregorianCalendar;
-
-import static org.acra.ACRA.LOG_TAG;
-
-/**
- * <p>
- * The ErrorReporter is a Singleton object in charge of collecting crash context
- * data and sending crash reports. It registers itself as the Application's
- * Thread default {@link UncaughtExceptionHandler}.
- * </p>
- * <p>
- * When a crash occurs, it collects data of the crash context (device, system,
- * stack trace...) and writes a report file in the application private
- * directory. This report file is then sent:
- * </p>
- * <ul>
- * <li>immediately if {@link ReportsCrashes#mode} is set to
- * {@link ReportingInteractionMode#SILENT} or
- * {@link ReportingInteractionMode#TOAST},</li>
- * <li>on application start if in the previous case the transmission could not
- * technically be made,</li>
- * <li>when the user accepts to send it if {@link ReportsCrashes#mode()} is set
- * to {@link ReportingInteractionMode#NOTIFICATION}.</li>
- * </ul>
- * <p>
- * If an error occurs while sending a report, it is kept for later attempts.
- * </p>
- */
-public class ErrorReporter implements Thread.UncaughtExceptionHandler {
-
-    private final boolean supportedAndroidVersion;
-
-    private final Application context;
-    @NonNull
-    private final ACRAConfiguration config;
-
-    @NonNull
-    private final CrashReportDataFactory crashReportDataFactory;
-    @NonNull
-    private final ReportExecutor reportExecutor;
-
-    @NonNull
-    private volatile ExceptionHandlerInitializer exceptionHandlerInitializer = new ExceptionHandlerInitializer() {
-        @Override
-        public void initializeExceptionHandler(ErrorReporter reporter) {
-        }
-    };
-
-
-    /**
-     * Can only be constructed from within this class.
-     *
-     * @param context   Context for the application in which ACRA is running.
-     * @param config    AcraConfig to use when reporting and sending errors.
-     * @param prefs     SharedPreferences used by ACRA.
-     * @param enabled   Whether this ErrorReporter should capture Exceptions and forward their reports.
-     * @param listenForUncaughtExceptions   Whether to listen for uncaught Exceptions.
-     */
-    ErrorReporter(@NonNull Application context, @NonNull ACRAConfiguration config, @NonNull SharedPreferences prefs,
-                  boolean enabled, boolean supportedAndroidVersion, boolean listenForUncaughtExceptions) {
-
-        this.context = context;
-        this.config = config;
-        this.supportedAndroidVersion = supportedAndroidVersion;
-
-        // Store the initial Configuration state.
-        // This is expensive to gather, so only do so if we plan to report it.
-        final String initialConfiguration;
-        if (config.getReportFields().contains(ReportField.INITIAL_CONFIGURATION)) {
-            initialConfiguration = ConfigurationCollector.collectConfiguration(this.context);
-        } else {
-            initialConfiguration = null;
-        }
-
-        // Sets the application start date.
-        // This will be included in the reports, will be helpful compared to user_crash date.
-        final Calendar appStartDate = new GregorianCalendar();
-
-        crashReportDataFactory = new CrashReportDataFactory(this.context, config, prefs, appStartDate, initialConfiguration);
-
-        final Thread.UncaughtExceptionHandler defaultExceptionHandler;
-        if (listenForUncaughtExceptions) {
-            defaultExceptionHandler = Thread.getDefaultUncaughtExceptionHandler();
-            Thread.setDefaultUncaughtExceptionHandler(this);
-        } else {
-            defaultExceptionHandler = null;
-        }
-
-        final LastActivityManager lastActivityManager = new LastActivityManager(this.context);
-        final ReportPrimer reportPrimer = getReportPrimer(config);
-
-        reportExecutor = new ReportExecutor(context, config, crashReportDataFactory, lastActivityManager, defaultExceptionHandler, reportPrimer);
-        reportExecutor.setEnabled(enabled);
-    }
-
-    /**
-     * Deprecated. Use {@link #putCustomData(String, String)}.
-     *
-     * @param key   A key for your custom data.
-     * @param value The value associated to your key.
-     */
-    @Deprecated
-    @SuppressWarnings("unused")
-    public void addCustomData(@NonNull String key, String value) {
-        putCustomData(key, value);
-    }
-
-    /**
-     * <p>
-     * Use this method to provide the ErrorReporter with data of your running
-     * application. You should call this at several key places in your code the
-     * same way as you would output important debug data in a log file. Only the
-     * latest value is kept for each key (no history of the values is sent in
-     * the report).
-     * </p>
-     * <p>
-     * The key/value pairs will be stored in the GoogleDoc spreadsheet in the
-     * "custom" column, as a text containing a 'key = value' pair on each line.
-     * </p>
-     *
-     * @param key   A key for your custom data.
-     * @param value The value associated to your key.
-     * @return The previous value for this key if there was one, or null.
-     * @see #removeCustomData(String)
-     * @see #getCustomData(String)
-     */
-    @SuppressWarnings("unused")
-    public String putCustomData(@NonNull String key, String value) {
-        return crashReportDataFactory.putCustomData(key, value);
-    }
-
-    /**
-     * <p>
-     * Use this method to perform additional initialization before the
-     * ErrorReporter handles a throwable. This can be used, for example, to put
-     * custom data using {@link #putCustomData(String, String)}, which is not
-     * available immediately after startup. It can be, for example, last 20
-     * requests or something else. The call is thread safe.
-     * </p>
-     * <p>
-     * {@link ExceptionHandlerInitializer#initializeExceptionHandler(ErrorReporter)}
-     * will be executed on the main thread in case of uncaught exception and on
-     * the caller thread of {@link #handleSilentException(Throwable)} or
-     * {@link #handleException(Throwable)}.
-     * </p>
-     * <p>
-     * Example. Add to the {@link Application#onCreate()}:
-     * </p>
-     *
-     * <pre>
-     * ACRA.getErrorReporter().setExceptionHandlerInitializer(new ExceptionHandlerInitializer() {
-     *     <code>@Override</code> public void initializeExceptionHandler(ErrorReporter reporter) {
-     *         reporter.putCustomData("CUSTOM_ACCUMULATED_DATA_TAG", someAccumulatedData.toString);
-     *     }
-     * });
-     * </pre>
-     *
-     * @param initializer   The initializer. Can be <code>null</code>.
-     * @deprecated since 4.8.0 use {@link ReportPrimer} mechanism instead.
-     */
-    public void setExceptionHandlerInitializer(@Nullable ExceptionHandlerInitializer initializer) {
-        exceptionHandlerInitializer = (initializer != null)
-                ? initializer
-                : new ExceptionHandlerInitializer() {
-                    @Override
-                    public void initializeExceptionHandler(ErrorReporter reporter) {
-                    }
-                };
-    }
-
-    /**
-     * Removes a key/value pair from your reports custom data field.
-     *
-     * @param key   The key of the data to be removed.
-     * @return The value for this key before removal.
-     * @see #putCustomData(String, String)
-     * @see #getCustomData(String)
-     */
-    @SuppressWarnings("unused")
-    public String removeCustomData(@NonNull String key) {
-        return crashReportDataFactory.removeCustomData(key);
-    }
-
-    /**
-     * Removes all key/value pairs from your reports custom data field.
-     */
-    @SuppressWarnings("unused")
-    public void clearCustomData() {
-        crashReportDataFactory.clearCustomData();
-    }
-
-    /**
-     * Gets the current value for a key in your reports custom data field.
-     *
-     * @param key
-     *            The key of the data to be retrieved.
-     * @return The value for this key.
-     * @see #putCustomData(String, String)
-     * @see #removeCustomData(String)
-     */
-    @SuppressWarnings("unused")
-    public String getCustomData(@NonNull String key) {
-        return crashReportDataFactory.getCustomData(key);
-    }
-
-    /*
-     * (non-Javadoc)
-     *
-     * @see
-     * java.lang.Thread.UncaughtExceptionHandler#uncaughtException(java.lang
-     * .Thread, java.lang.Throwable)
-     */
-    @Override
-    public void uncaughtException(@Nullable Thread t, @NonNull Throwable e) {
-
-        // If we're not enabled then just pass the Exception on to the defaultExceptionHandler.
-        if (!reportExecutor.isEnabled()) {
-            reportExecutor.handReportToDefaultExceptionHandler(t, e);
-            return;
-        }
-
-        try {
-            ACRA.log.e(LOG_TAG, "ACRA caught a " + e.getClass().getSimpleName() + " for " + context.getPackageName(), e);
-            if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Building report");
-
-            performDeprecatedReportPriming();
-
-            // Generate and send crash report
-            new ReportBuilder()
-                .uncaughtExceptionThread(t)
-                .exception(e)
-                .endApplication()
-                .build(reportExecutor);
-
-        } catch (Throwable fatality) {
-            // ACRA failed. Prevent any recursive call to ACRA.uncaughtException(), let the native reporter do its job.
-            ACRA.log.e(LOG_TAG, "ACRA failed to capture the error - handing off to native error reporter" , fatality);
-            reportExecutor.handReportToDefaultExceptionHandler(t, e);
-        }
-    }
-
-    /**
-     * Mark this report as silent as send it.
-     *
-     * @param e The {@link Throwable} to be reported. If null the report will
-     *          contain a new Exception("Report requested by developer").
-     */
-    @SuppressWarnings("unused")
-    public void handleSilentException(@Nullable Throwable e) {
-        performDeprecatedReportPriming();
-        new ReportBuilder()
-                .exception(e)
-                .sendSilently()
-                .build(reportExecutor);
-    }
-
-    /**
-     * Enable or disable this ErrorReporter. By default it is enabled.
-     *
-     * @param enabled
-     *            Whether this ErrorReporter should capture Exceptions and
-     *            forward them as crash reports.
-     */
-    public void setEnabled(boolean enabled) {
-        if (supportedAndroidVersion) {
-            ACRA.log.i(LOG_TAG, "ACRA is " + (enabled ? "enabled" : "disabled") + " for " + context.getPackageName());
-            reportExecutor.setEnabled(enabled);
-        } else {
-            ACRA.log.w(LOG_TAG, "ACRA 4.7.0+ requires Froyo or greater. ACRA is disabled and will NOT catch crashes or send messages.");
-        }
-    }
-
-    /**
-     * This method looks for pending reports and does the action required depending on the interaction mode set.
-     *
-     * @deprecated since 4.8.0 No replacement. Whether to send report on app start is controlled by {@link ACRA#init(Application, ACRAConfiguration, boolean)}.
-     */
-    @SuppressWarnings( " unused" )
-    public void checkReportsOnApplicationStart() {
-        final ApplicationStartupProcessor startupProcessor = new ApplicationStartupProcessor(context,  config);
-        if (config.deleteOldUnsentReportsOnApplicationStart()) {
-            startupProcessor.deleteUnsentReportsFromOldAppVersion();
-        }
-        if (config.deleteUnapprovedReportsOnApplicationStart()) {
-            startupProcessor.deleteAllUnapprovedReportsBarOne();
-        }
-        if (reportExecutor.isEnabled()) {
-            startupProcessor.sendApprovedReports();
-        }
-    }
-
-    /**
-     * Send a report for a {@link Throwable} with the reporting interaction mode
-     * configured by the developer.
-     *
-     * @param e
-     *            The {@link Throwable} to be reported. If null the report will
-     *            contain a new Exception("Report requested by developer").
-     * @param endApplication
-     *            Set this to true if you want the application to be ended after
-     *            sending the report.
-     */
-    @SuppressWarnings("unused")
-    public void handleException(@Nullable Throwable e, boolean endApplication) {
-        performDeprecatedReportPriming();
-        final ReportBuilder builder = new ReportBuilder();
-        builder.exception(e);
-        if (endApplication) {
-            builder.endApplication();
-        }
-        builder.build(reportExecutor);
-    }
-
-    /**
-     * Send a report for a {@link Throwable} with the reporting interaction mode
-     * configured by the developer, the application is then killed and restarted
-     * by the system.
-     *
-     * @param e
-     *            The {@link Throwable} to be reported. If null the report will
-     *            contain a new Exception("Report requested by developer").
-     */
-    @SuppressWarnings("unused")
-    public void handleException(@Nullable Throwable e) {
-        handleException(e, false);
-    }
-
-    /**
-     * This method is only here to support the deprecated {@link ExceptionHandlerInitializer} mechanism
-     * for adding additional data to a crash report.
-     */
-    private void performDeprecatedReportPriming() {
-        try {
-            exceptionHandlerInitializer.initializeExceptionHandler(this);
-        } catch (Exception exceptionInRunnable) {
-            ACRA.log.w(LOG_TAG, "Failed to initialize " + exceptionHandlerInitializer + " from #handleException");
-        }
-    }
-
-    @NonNull
-    private static ReportPrimer getReportPrimer(@NonNull ACRAConfiguration config) {
-        try {
-            return config.reportPrimerClass().newInstance();
-        } catch (InstantiationException e) {
-            ACRA.log.w(LOG_TAG, "Could not construct ReportPrimer from " + config.reportPrimerClass() + " - not priming", e);
-        } catch (IllegalAccessException e) {
-            ACRA.log.w(LOG_TAG, "Could not construct ReportPrimer from " + config.reportPrimerClass() + " - not priming", e);
-        }
-
-        return new NoOpReportPrimer();
-    }
+/*
+ *  Copyright 2010 Emmanuel Astier & Kevin Gaudin
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.acra;
+
+import android.app.Application;
+import android.content.SharedPreferences;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import org.acra.annotation.ReportsCrashes;
+import org.acra.builder.LastActivityManager;
+import org.acra.builder.NoOpReportPrimer;
+import org.acra.builder.ReportBuilder;
+import org.acra.builder.ReportExecutor;
+import org.acra.builder.ReportPrimer;
+import org.acra.collector.ConfigurationCollector;
+import org.acra.collector.CrashReportDataFactory;
+import org.acra.config.ACRAConfiguration;
+import org.acra.model.Element;
+import org.acra.util.ApplicationStartupProcessor;
+import org.acra.util.InstanceCreator;
+import org.acra.util.ProcessFinisher;
+
+import java.lang.Thread.UncaughtExceptionHandler;
+import java.util.Calendar;
+import java.util.GregorianCalendar;
+
+import static org.acra.ACRA.LOG_TAG;
+
+/**
+ * <p>
+ * The ErrorReporter is a Singleton object in charge of collecting crash context
+ * data and sending crash reports. It registers itself as the Application's
+ * Thread default {@link UncaughtExceptionHandler}.
+ * </p>
+ * <p>
+ * When a crash occurs, it collects data of the crash context (device, system,
+ * stack trace...) and writes a report file in the application private
+ * directory. This report file is then sent:
+ * </p>
+ * <ul>
+ * <li>immediately if {@link ReportsCrashes#mode} is set to
+ * {@link ReportingInteractionMode#SILENT} or
+ * {@link ReportingInteractionMode#TOAST},</li>
+ * <li>on application start if in the previous case the transmission could not
+ * technically be made,</li>
+ * <li>when the user accepts to send it if {@link ReportsCrashes#mode()} is set
+ * to {@link ReportingInteractionMode#NOTIFICATION}.</li>
+ * </ul>
+ * <p>
+ * If an error occurs while sending a report, it is kept for later attempts.
+ * </p>
+ */
+public class ErrorReporter implements Thread.UncaughtExceptionHandler {
+
+    private final boolean supportedAndroidVersion;
+
+    private final Application context;
+    @NonNull
+    private final ACRAConfiguration config;
+
+    @NonNull
+    private final CrashReportDataFactory crashReportDataFactory;
+    @NonNull
+    private final ReportExecutor reportExecutor;
+
+    @NonNull
+    private volatile ExceptionHandlerInitializer exceptionHandlerInitializer = new ExceptionHandlerInitializer() {
+        @Override
+        public void initializeExceptionHandler(ErrorReporter reporter) {
+        }
+    };
+
+
+    /**
+     * Can only be constructed from within this class.
+     *
+     * @param context   Context for the application in which ACRA is running.
+     * @param config    AcraConfig to use when reporting and sending errors.
+     * @param prefs     SharedPreferences used by ACRA.
+     * @param enabled   Whether this ErrorReporter should capture Exceptions and forward their reports.
+     * @param listenForUncaughtExceptions   Whether to listen for uncaught Exceptions.
+     */
+    ErrorReporter(@NonNull Application context, @NonNull ACRAConfiguration config, @NonNull SharedPreferences prefs,
+                  boolean enabled, boolean supportedAndroidVersion, boolean listenForUncaughtExceptions) {
+
+        this.context = context;
+        this.config = config;
+        this.supportedAndroidVersion = supportedAndroidVersion;
+
+        // Store the initial Configuration state.
+        // This is expensive to gather, so only do so if we plan to report it.
+        final Element initialConfiguration;
+        if (config.reportContent().contains(ReportField.INITIAL_CONFIGURATION)) {
+            initialConfiguration = ConfigurationCollector.collectConfiguration(this.context);
+        } else {
+            initialConfiguration = ACRAConstants.NOT_AVAILABLE;
+        }
+
+        // Sets the application start date.
+        // This will be included in the reports, will be helpful compared to user_crash date.
+        final Calendar appStartDate = new GregorianCalendar();
+
+        crashReportDataFactory = new CrashReportDataFactory(this.context, config, prefs, appStartDate, initialConfiguration);
+
+        final Thread.UncaughtExceptionHandler defaultExceptionHandler;
+        if (listenForUncaughtExceptions) {
+            defaultExceptionHandler = Thread.getDefaultUncaughtExceptionHandler();
+            Thread.setDefaultUncaughtExceptionHandler(this);
+        } else {
+            defaultExceptionHandler = null;
+        }
+
+        final LastActivityManager lastActivityManager = new LastActivityManager(this.context);
+        final InstanceCreator instanceCreator = new InstanceCreator();
+        final ReportPrimer reportPrimer = instanceCreator.create(config.reportPrimerClass(), new NoOpReportPrimer());
+        final ProcessFinisher processFinisher = new ProcessFinisher(context, config, lastActivityManager);
+
+        reportExecutor = new ReportExecutor(context, config, crashReportDataFactory, defaultExceptionHandler, reportPrimer, processFinisher);
+        reportExecutor.setEnabled(enabled);
+    }
+
+    /**
+     * Deprecated. Use {@link #putCustomData(String, String)}.
+     *
+     * @param key   A key for your custom data.
+     * @param value The value associated to your key.
+     */
+    @Deprecated
+    @SuppressWarnings("unused")
+    public void addCustomData(@NonNull String key, String value) {
+        putCustomData(key, value);
+    }
+
+    /**
+     * <p>
+     * Use this method to provide the ErrorReporter with data of your running
+     * application. You should call this at several key places in your code the
+     * same way as you would output important debug data in a log file. Only the
+     * latest value is kept for each key (no history of the values is sent in
+     * the report).
+     * </p>
+     *
+     * @param key   A key for your custom data.
+     * @param value The value associated to your key.
+     * @return The previous value for this key if there was one, or null.
+     * @see #removeCustomData(String)
+     * @see #getCustomData(String)
+     */
+    @SuppressWarnings("unused")
+    public String putCustomData(@NonNull String key, String value) {
+        return crashReportDataFactory.putCustomData(key, value);
+    }
+
+    /**
+     * <p>
+     * Use this method to perform additional initialization before the
+     * ErrorReporter handles a throwable. This can be used, for example, to put
+     * custom data using {@link #putCustomData(String, String)}, which is not
+     * available immediately after startup. It can be, for example, last 20
+     * requests or something else. The call is thread safe.
+     * </p>
+     * <p>
+     * {@link ExceptionHandlerInitializer#initializeExceptionHandler(ErrorReporter)}
+     * will be executed on the main thread in case of uncaught exception and on
+     * the caller thread of {@link #handleSilentException(Throwable)} or
+     * {@link #handleException(Throwable)}.
+     * </p>
+     * <p>
+     * Example. Add to the {@link Application#onCreate()}:
+     * </p>
+     *
+     * <pre>
+     * ACRA.getErrorReporter().setExceptionHandlerInitializer(new ExceptionHandlerInitializer() {
+     *     <code>@Override</code> public void initializeExceptionHandler(ErrorReporter reporter) {
+     *         reporter.putCustomData("CUSTOM_ACCUMULATED_DATA_TAG", someAccumulatedData.toString);
+     *     }
+     * });
+     * </pre>
+     *
+     * @param initializer   The initializer. Can be <code>null</code>.
+     * @deprecated since 4.8.0 use {@link ReportPrimer} mechanism instead.
+     */
+    public void setExceptionHandlerInitializer(@Nullable ExceptionHandlerInitializer initializer) {
+        exceptionHandlerInitializer = (initializer != null)
+                ? initializer
+                : new ExceptionHandlerInitializer() {
+                    @Override
+                    public void initializeExceptionHandler(ErrorReporter reporter) {
+                    }
+                };
+    }
+
+    /**
+     * Removes a key/value pair from your reports custom data field.
+     *
+     * @param key   The key of the data to be removed.
+     * @return The value for this key before removal.
+     * @see #putCustomData(String, String)
+     * @see #getCustomData(String)
+     */
+    @SuppressWarnings("unused")
+    public String removeCustomData(@NonNull String key) {
+        return crashReportDataFactory.removeCustomData(key);
+    }
+
+    /**
+     * Removes all key/value pairs from your reports custom data field.
+     */
+    @SuppressWarnings("unused")
+    public void clearCustomData() {
+        crashReportDataFactory.clearCustomData();
+    }
+
+    /**
+     * Gets the current value for a key in your reports custom data field.
+     *
+     * @param key
+     *            The key of the data to be retrieved.
+     * @return The value for this key.
+     * @see #putCustomData(String, String)
+     * @see #removeCustomData(String)
+     */
+    @SuppressWarnings("unused")
+    public String getCustomData(@NonNull String key) {
+        return crashReportDataFactory.getCustomData(key);
+    }
+
+    /*
+     * (non-Javadoc)
+     *
+     * @see
+     * java.lang.Thread.UncaughtExceptionHandler#uncaughtException(java.lang
+     * .Thread, java.lang.Throwable)
+     */
+    @Override
+    public void uncaughtException(@Nullable Thread t, @NonNull Throwable e) {
+
+        // If we're not enabled then just pass the Exception on to the defaultExceptionHandler.
+        if (!reportExecutor.isEnabled()) {
+            reportExecutor.handReportToDefaultExceptionHandler(t, e);
+            return;
+        }
+
+        try {
+            ACRA.log.e(LOG_TAG, "ACRA caught a " + e.getClass().getSimpleName() + " for " + context.getPackageName(), e);
+            if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Building report");
+
+            performDeprecatedReportPriming();
+
+            // Generate and send crash report
+            new ReportBuilder()
+                .uncaughtExceptionThread(t)
+                .exception(e)
+                .endApplication()
+                .build(reportExecutor);
+
+        } catch (Throwable fatality) {
+            // ACRA failed. Prevent any recursive call to ACRA.uncaughtException(), let the native reporter do its job.
+            ACRA.log.e(LOG_TAG, "ACRA failed to capture the error - handing off to native error reporter" , fatality);
+            reportExecutor.handReportToDefaultExceptionHandler(t, e);
+        }
+    }
+
+    /**
+     * Mark this report as silent as send it.
+     *
+     * @param e The {@link Throwable} to be reported. If null the report will
+     *          contain a new Exception("Report requested by developer").
+     */
+    @SuppressWarnings("unused")
+    public void handleSilentException(@Nullable Throwable e) {
+        performDeprecatedReportPriming();
+        new ReportBuilder()
+                .exception(e)
+                .sendSilently()
+                .build(reportExecutor);
+    }
+
+    /**
+     * Enable or disable this ErrorReporter. By default it is enabled.
+     *
+     * @param enabled
+     *            Whether this ErrorReporter should capture Exceptions and
+     *            forward them as crash reports.
+     */
+    public void setEnabled(boolean enabled) {
+        if (supportedAndroidVersion) {
+            ACRA.log.i(LOG_TAG, "ACRA is " + (enabled ? "enabled" : "disabled") + " for " + context.getPackageName());
+            reportExecutor.setEnabled(enabled);
+        } else {
+            ACRA.log.w(LOG_TAG, "ACRA 4.7.0+ requires Froyo or greater. ACRA is disabled and will NOT catch crashes or send messages.");
+        }
+    }
+
+    /**
+     * This method looks for pending reports and does the action required depending on the interaction mode set.
+     *
+     * There is no need to call this method as ACRA will by default check for errors on report start.
+     *
+     * Whether ACRA checks for reports on app start is controlled by {@link ACRA#init(Application, ACRAConfiguration, boolean)},
+     * but the default is that it will.
+     *
+     * @deprecated since 4.8.0 No replacement.
+     */
+    @SuppressWarnings( " unused" )
+    public void checkReportsOnApplicationStart() {
+        final ApplicationStartupProcessor startupProcessor = new ApplicationStartupProcessor(context,  config);
+        if (config.deleteOldUnsentReportsOnApplicationStart()) {
+            startupProcessor.deleteUnsentReportsFromOldAppVersion();
+        }
+        if (config.deleteUnapprovedReportsOnApplicationStart()) {
+            startupProcessor.deleteAllUnapprovedReportsBarOne();
+        }
+        if (reportExecutor.isEnabled()) {
+            startupProcessor.sendApprovedReports();
+        }
+    }
+
+    /**
+     * Send a report for a {@link Throwable} with the reporting interaction mode
+     * configured by the developer.
+     *
+     * @param e
+     *            The {@link Throwable} to be reported. If null the report will
+     *            contain a new Exception("Report requested by developer").
+     * @param endApplication
+     *            Set this to true if you want the application to be ended after
+     *            sending the report.
+     */
+    @SuppressWarnings("unused")
+    public void handleException(@Nullable Throwable e, boolean endApplication) {
+        performDeprecatedReportPriming();
+        final ReportBuilder builder = new ReportBuilder();
+        builder.exception(e);
+        if (endApplication) {
+            builder.endApplication();
+        }
+        builder.build(reportExecutor);
+    }
+
+    /**
+     * Send a report for a {@link Throwable} with the reporting interaction mode
+     * configured by the developer, the application is then killed and restarted
+     * by the system.
+     *
+     * @param e
+     *            The {@link Throwable} to be reported. If null the report will
+     *            contain a new Exception("Report requested by developer").
+     */
+    @SuppressWarnings("unused")
+    public void handleException(@Nullable Throwable e) {
+        handleException(e, false);
+    }
+
+    /**
+     * This method is only here to support the deprecated {@link ExceptionHandlerInitializer} mechanism
+     * for adding additional data to a crash report.
+     */
+    private void performDeprecatedReportPriming() {
+        try {
+            exceptionHandlerInitializer.initializeExceptionHandler(this);
+        } catch (Exception exceptionInRunnable) {
+            ACRA.log.w(LOG_TAG, "Failed to initialize " + exceptionHandlerInitializer + " from #handleException");
+        }
+    }
 }
\ No newline at end of file
diff --git a/src/main/java/org/acra/ExceptionHandlerInitializer.java b/acra/src/main/java/org/acra/ExceptionHandlerInitializer.java
similarity index 100%
rename from src/main/java/org/acra/ExceptionHandlerInitializer.java
rename to acra/src/main/java/org/acra/ExceptionHandlerInitializer.java
diff --git a/src/main/java/org/acra/ReportField.java b/acra/src/main/java/org/acra/ReportField.java
similarity index 96%
rename from src/main/java/org/acra/ReportField.java
rename to acra/src/main/java/org/acra/ReportField.java
index 34bf13de..cb9b1db6 100644
--- a/src/main/java/org/acra/ReportField.java
+++ b/acra/src/main/java/org/acra/ReportField.java
@@ -1,302 +1,302 @@
-/*
- *  Copyright 2010 Kevin Gaudin
- *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-package org.acra;
-
-import android.content.res.Configuration;
-
-import org.acra.annotation.ReportsCrashes;
-
-/**
- * Specifies all the different fields available in a crash report.
- * 
- * @author Normal
- * 
- */
-public enum ReportField {
-    /**
-     * Report Identifier.
-     */
-    REPORT_ID,
-    /**
-     * Application version code. This is the incremental integer version code
-     * used to differentiate versions on the android market.
-     * 
-     * @see android.content.pm.PackageInfo#versionCode
-     */
-    APP_VERSION_CODE,
-    /**
-     * Application version name.
-     * 
-     * @see android.content.pm.PackageInfo#versionName
-     */
-    APP_VERSION_NAME,
-    /**
-     * Application package name.
-     * 
-     * @see android.content.Context#getPackageName()
-     */
-    PACKAGE_NAME,
-    /**
-     * Base path of the application's private file folder.
-     * 
-     * @see android.content.Context#getFilesDir()
-     */
-    FILE_PATH,
-    /**
-     * Device model name.
-     * 
-     * @see android.os.Build#MODEL
-     */
-    PHONE_MODEL,
-    /**
-     * Device android version name.
-     * 
-     * @see android.os.Build.VERSION#RELEASE
-     */
-    ANDROID_VERSION,
-    /**
-     * Android Build details.
-     * 
-     * @see android.os.Build
-     */
-    BUILD {
-        @Override
-        public boolean containsKeyValuePairs() {
-            return true;
-        }
-    },
-    /**
-     * Device brand (manufacturer or carrier).
-     * 
-     * @see android.os.Build#BRAND
-     */
-    BRAND,
-    /**
-     * Device overall product code.
-     * 
-     * @see android.os.Build#PRODUCT
-     */
-    PRODUCT,
-    /**
-     * Estimation of the total device memory size based on filesystem stats.
-     */
-    TOTAL_MEM_SIZE,
-    /**
-     * Estimation of the available device memory size based on filesystem stats.
-     */
-    AVAILABLE_MEM_SIZE,
-    /**
-     * Contains key = value pairs defined by the application developer during
-     * the application build.
-     */
-    BUILD_CONFIG {
-        @Override
-        public boolean containsKeyValuePairs() {
-            return true;
-        }
-    },
-    /**
-     * Contains key = value pairs defined by the application developer during
-     * the application execution.
-     */
-    CUSTOM_DATA {
-        @Override
-        public boolean containsKeyValuePairs() {
-            return true;
-        }
-    },
-    /**
-     * The Holy Stack Trace.
-     */
-    STACK_TRACE,
-    /**
-     * A hash of the stack trace, taking only method names into account.<br>
-     * Line numbers are stripped out before computing the hash. This can help you
-     * uniquely identify stack traces.
-     */
-    STACK_TRACE_HASH,
-    /**
-     * {@link Configuration} fields state on the application start.
-     * 
-     * @see Configuration
-     */
-    INITIAL_CONFIGURATION {
-        @Override
-        public boolean containsKeyValuePairs() {
-            return true;
-        }
-    },
-    /**
-     * {@link Configuration} fields state on the application crash.
-     * 
-     * @see Configuration
-     */
-    CRASH_CONFIGURATION {
-        @Override
-        public boolean containsKeyValuePairs() {
-            return true;
-        }
-    },
-    /**
-     * Device display specifications.
-     * 
-     * @see android.view.WindowManager#getDefaultDisplay()
-     */
-    DISPLAY {
-        @Override
-        public boolean containsKeyValuePairs() {
-            return true;
-        }
-    },
-    /**
-     * Comment added by the user in the CrashReportDialog displayed in
-     * {@link ReportingInteractionMode#NOTIFICATION} mode.
-     */
-    USER_COMMENT,
-    /**
-     * User date on application start.
-     */
-    USER_APP_START_DATE,
-    /**
-     * User date immediately after the crash occurred.
-     */
-    USER_CRASH_DATE,
-    /**
-     * Memory state details for the application process.
-     */
-    DUMPSYS_MEMINFO,
-    /**
-     * Content of the android.os.DropBoxManager (introduced in API level 8).
-     * Requires READ_LOGS permission.
-     */
-    DROPBOX,
-    /**
-     * Logcat default extract. Requires READ_LOGS permission.
-     */
-    LOGCAT,
-    /**
-     * Logcat eventslog extract. Requires READ_LOGS permission.
-     */
-    EVENTSLOG,
-    /**
-     * Logcat radio extract. Requires READ_LOGS permission.
-     */
-    RADIOLOG,
-    /**
-     * True if the report has been explicitly sent silently by the developer.
-     */
-    IS_SILENT,
-    /**
-     * Device unique ID (IMEI). Requires READ_PHONE_STATE permission.
-     */
-    DEVICE_ID,
-    /**
-     * Installation unique ID. This identifier allow you to track a specific
-     * user application installation without using any personal data.
-     */
-    INSTALLATION_ID,
-    /**
-     * User email address. Can be provided by the user in the
-     * {@link ACRA#PREF_USER_EMAIL_ADDRESS} SharedPreference.
-     */
-    USER_EMAIL,
-    /**
-     * Features declared as available on this device by the system.
-     */
-    DEVICE_FEATURES {
-        @Override
-        public boolean containsKeyValuePairs() {
-            return true;
-        }
-    },
-    /**
-     * External storage state and standard directories.
-     */
-    ENVIRONMENT {
-        @Override
-        public boolean containsKeyValuePairs() {
-            return true;
-        }
-    },
-    /**
-     * System settings.
-     */
-    SETTINGS_SYSTEM {
-        @Override
-        public boolean containsKeyValuePairs() {
-            return true;
-        }
-    },
-    /**
-     * Secure settings (applications can't modify them).
-     */
-    SETTINGS_SECURE {
-        @Override
-        public boolean containsKeyValuePairs() {
-            return true;
-        }
-    },
-    /**
-     * Global settings, introduced in Android 4.2 (API level 17) to centralize settings for multiple users.
-     */
-    SETTINGS_GLOBAL {
-        @Override
-        public boolean containsKeyValuePairs() {
-            return true;
-        }
-    },
-    /**
-     * SharedPreferences contents
-     */
-    SHARED_PREFERENCES {
-        @Override
-        public boolean containsKeyValuePairs() {
-            return true;
-        }
-    },
-    /**
-     * Content of your own application log file. To be configured with
-     * {@link ReportsCrashes#applicationLogFile()} to define the path/name of
-     * the log file and {@link ReportsCrashes#applicationLogFileLines()} to set
-     * the number of lines you want to be retrieved.
-     */
-    APPLICATION_LOG,
-    /**
-     * Since Android API Level 16 (Android 4.1 - Jelly Beans), retrieve the list
-     * of supported Media codecs and their capabilities (color format, profile
-     * and level).
-     */
-    MEDIA_CODEC_LIST,
-    /**
-     * Retrieves details of the failing thread (id, name, group name).
-     */
-    THREAD_DETAILS,
-    /**
-     * Retrieves the user IP address(es).
-     */
-    USER_IP;
-
-    /**
-     * Whether this field is a collection of key/value pairs.
-     * 
-     * @return true if the field contains a string with a key/value pair on each
-     *         line, key and value separated by an equal sign
-     * 
-     */
-    public boolean containsKeyValuePairs() {
-        return false;
-    }
-}
+/*
+ *  Copyright 2010 Kevin Gaudin
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.acra;
+
+import android.content.res.Configuration;
+
+import org.acra.annotation.ReportsCrashes;
+
+/**
+ * Specifies all the different fields available in a crash report.
+ * 
+ * @author Normal
+ * 
+ */
+public enum ReportField {
+    /**
+     * Report Identifier.
+     */
+    REPORT_ID,
+    /**
+     * Application version code. This is the incremental integer version code
+     * used to differentiate versions on the android market.
+     * 
+     * @see android.content.pm.PackageInfo#versionCode
+     */
+    APP_VERSION_CODE,
+    /**
+     * Application version name.
+     * 
+     * @see android.content.pm.PackageInfo#versionName
+     */
+    APP_VERSION_NAME,
+    /**
+     * Application package name.
+     * 
+     * @see android.content.Context#getPackageName()
+     */
+    PACKAGE_NAME,
+    /**
+     * Base path of the application's private file folder.
+     * 
+     * @see android.content.Context#getFilesDir()
+     */
+    FILE_PATH,
+    /**
+     * Device model name.
+     * 
+     * @see android.os.Build#MODEL
+     */
+    PHONE_MODEL,
+    /**
+     * Device android version name.
+     * 
+     * @see android.os.Build.VERSION#RELEASE
+     */
+    ANDROID_VERSION,
+    /**
+     * Android Build details.
+     * 
+     * @see android.os.Build
+     */
+    BUILD {
+        @Override
+        public boolean containsKeyValuePairs() {
+            return true;
+        }
+    },
+    /**
+     * Device brand (manufacturer or carrier).
+     * 
+     * @see android.os.Build#BRAND
+     */
+    BRAND,
+    /**
+     * Device overall product code.
+     * 
+     * @see android.os.Build#PRODUCT
+     */
+    PRODUCT,
+    /**
+     * Estimation of the total device memory size based on filesystem stats.
+     */
+    TOTAL_MEM_SIZE,
+    /**
+     * Estimation of the available device memory size based on filesystem stats.
+     */
+    AVAILABLE_MEM_SIZE,
+    /**
+     * Contains key = value pairs defined by the application developer during
+     * the application build.
+     */
+    BUILD_CONFIG {
+        @Override
+        public boolean containsKeyValuePairs() {
+            return true;
+        }
+    },
+    /**
+     * Contains key = value pairs defined by the application developer during
+     * the application execution.
+     */
+    CUSTOM_DATA {
+        @Override
+        public boolean containsKeyValuePairs() {
+            return true;
+        }
+    },
+    /**
+     * The Holy Stack Trace.
+     */
+    STACK_TRACE,
+    /**
+     * A hash of the stack trace, taking only method names into account.<br>
+     * Line numbers are stripped out before computing the hash. This can help you
+     * uniquely identify stack traces.
+     */
+    STACK_TRACE_HASH,
+    /**
+     * {@link Configuration} fields state on the application start.
+     * 
+     * @see Configuration
+     */
+    INITIAL_CONFIGURATION {
+        @Override
+        public boolean containsKeyValuePairs() {
+            return true;
+        }
+    },
+    /**
+     * {@link Configuration} fields state on the application crash.
+     * 
+     * @see Configuration
+     */
+    CRASH_CONFIGURATION {
+        @Override
+        public boolean containsKeyValuePairs() {
+            return true;
+        }
+    },
+    /**
+     * Device display specifications.
+     * 
+     * @see android.view.WindowManager#getDefaultDisplay()
+     */
+    DISPLAY {
+        @Override
+        public boolean containsKeyValuePairs() {
+            return true;
+        }
+    },
+    /**
+     * Comment added by the user in the CrashReportDialog displayed in
+     * {@link ReportingInteractionMode#NOTIFICATION} mode.
+     */
+    USER_COMMENT,
+    /**
+     * User date on application start.
+     */
+    USER_APP_START_DATE,
+    /**
+     * User date immediately after the crash occurred.
+     */
+    USER_CRASH_DATE,
+    /**
+     * Memory state details for the application process.
+     */
+    DUMPSYS_MEMINFO,
+    /**
+     * Content of the android.os.DropBoxManager (introduced in API level 8).
+     * Requires READ_LOGS permission.
+     */
+    DROPBOX,
+    /**
+     * Logcat default extract. Requires READ_LOGS permission.
+     */
+    LOGCAT,
+    /**
+     * Logcat eventslog extract. Requires READ_LOGS permission.
+     */
+    EVENTSLOG,
+    /**
+     * Logcat radio extract. Requires READ_LOGS permission.
+     */
+    RADIOLOG,
+    /**
+     * True if the report has been explicitly sent silently by the developer.
+     */
+    IS_SILENT,
+    /**
+     * Device unique ID (IMEI). Requires READ_PHONE_STATE permission.
+     */
+    DEVICE_ID,
+    /**
+     * Installation unique ID. This identifier allow you to track a specific
+     * user application installation without using any personal data.
+     */
+    INSTALLATION_ID,
+    /**
+     * User email address. Can be provided by the user in the
+     * {@link ACRA#PREF_USER_EMAIL_ADDRESS} SharedPreference.
+     */
+    USER_EMAIL,
+    /**
+     * Features declared as available on this device by the system.
+     */
+    DEVICE_FEATURES {
+        @Override
+        public boolean containsKeyValuePairs() {
+            return true;
+        }
+    },
+    /**
+     * External storage state and standard directories.
+     */
+    ENVIRONMENT {
+        @Override
+        public boolean containsKeyValuePairs() {
+            return true;
+        }
+    },
+    /**
+     * System settings.
+     */
+    SETTINGS_SYSTEM {
+        @Override
+        public boolean containsKeyValuePairs() {
+            return true;
+        }
+    },
+    /**
+     * Secure settings (applications can't modify them).
+     */
+    SETTINGS_SECURE {
+        @Override
+        public boolean containsKeyValuePairs() {
+            return true;
+        }
+    },
+    /**
+     * Global settings, introduced in Android 4.2 (API level 17) to centralize settings for multiple users.
+     */
+    SETTINGS_GLOBAL {
+        @Override
+        public boolean containsKeyValuePairs() {
+            return true;
+        }
+    },
+    /**
+     * SharedPreferences contents
+     */
+    SHARED_PREFERENCES {
+        @Override
+        public boolean containsKeyValuePairs() {
+            return true;
+        }
+    },
+    /**
+     * Content of your own application log file. To be configured with
+     * {@link ReportsCrashes#applicationLogFile()} to define the path/name of
+     * the log file and {@link ReportsCrashes#applicationLogFileLines()} to set
+     * the number of lines you want to be retrieved.
+     */
+    APPLICATION_LOG,
+    /**
+     * Since Android API Level 16 (Android 4.1 - Jelly Beans), retrieve the list
+     * of supported Media codecs and their capabilities (color format, profile
+     * and level).
+     */
+    MEDIA_CODEC_LIST,
+    /**
+     * Retrieves details of the failing thread (id, name, group name).
+     */
+    THREAD_DETAILS,
+    /**
+     * Retrieves the user IP address(es).
+     */
+    USER_IP;
+
+    /**
+     * Whether this field is a collection of key/value pairs.
+     * 
+     * @return true if the field contains a string with a key/value pair on each
+     *         line, key and value separated by an equal sign
+     * 
+     */
+    public boolean containsKeyValuePairs() {
+        return false;
+    }
+}
diff --git a/src/main/java/org/acra/ReportingInteractionMode.java b/acra/src/main/java/org/acra/ReportingInteractionMode.java
similarity index 97%
rename from src/main/java/org/acra/ReportingInteractionMode.java
rename to acra/src/main/java/org/acra/ReportingInteractionMode.java
index 0c84aecd..1d553857 100644
--- a/src/main/java/org/acra/ReportingInteractionMode.java
+++ b/acra/src/main/java/org/acra/ReportingInteractionMode.java
@@ -1,53 +1,53 @@
-/*
- *  Copyright 2010 Emmanuel Astier & Kevin Gaudin
- *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-package org.acra;
-
-/**
- * Defines the different user interaction modes for ACRA.
- * <ul>
- * <li>SILENT: No interaction, reports are sent silently and a "Force close"
- * dialog terminates the app.</li>
- * <li>TOAST: A simple Toast is triggered when the application crashes, the
- * Force close dialog is not displayed.</li>
- * <li>NOTIFICATION: A status bar notification is triggered when the application
- * crashes, the Force close dialog is not displayed. When the user selects the
- * notification, a dialog is displayed asking him if he is ok to send a report</li>
- * </ul>
- */
-public enum ReportingInteractionMode {
-    /**
-     * No interaction, reports are sent silently and a "Force close" dialog
-     * terminates the app.
-     */
-    SILENT,
-    /**
-     * A status bar notification is triggered when the application crashes, the
-     * Force close dialog is not displayed. When the user selects the
-     * notification, a dialog is displayed asking him if he is ok to send a
-     * report.
-     */
-    NOTIFICATION,
-    /**
-     * A simple Toast is triggered when the application crashes, the Force close
-     * dialog is not displayed.
-     */
-    TOAST,
-    /**
-     * Direct dialog: a report confirmation dialog is displayed right after the crash.
-     * Will replace {@link #NOTIFICATION} mode.
-     */
-    DIALOG
+/*
+ *  Copyright 2010 Emmanuel Astier & Kevin Gaudin
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.acra;
+
+/**
+ * Defines the different user interaction modes for ACRA.
+ * <ul>
+ * <li>SILENT: No interaction, reports are sent silently and a "Force close"
+ * dialog terminates the app.</li>
+ * <li>TOAST: A simple Toast is triggered when the application crashes, the
+ * Force close dialog is not displayed.</li>
+ * <li>NOTIFICATION: A status bar notification is triggered when the application
+ * crashes, the Force close dialog is not displayed. When the user selects the
+ * notification, a dialog is displayed asking him if he is ok to send a report</li>
+ * </ul>
+ */
+public enum ReportingInteractionMode {
+    /**
+     * No interaction, reports are sent silently and a "Force close" dialog
+     * terminates the app.
+     */
+    SILENT,
+    /**
+     * A status bar notification is triggered when the application crashes, the
+     * Force close dialog is not displayed. When the user selects the
+     * notification, a dialog is displayed asking him if he is ok to send a
+     * report.
+     */
+    NOTIFICATION,
+    /**
+     * A simple Toast is triggered when the application crashes, the Force close
+     * dialog is not displayed.
+     */
+    TOAST,
+    /**
+     * Direct dialog: a report confirmation dialog is displayed right after the crash.
+     * Will replace {@link #NOTIFICATION} mode.
+     */
+    DIALOG
 }
\ No newline at end of file
diff --git a/acra/src/main/java/org/acra/annotation/Configuration.java b/acra/src/main/java/org/acra/annotation/Configuration.java
new file mode 100644
index 00000000..6e4f9fda
--- /dev/null
+++ b/acra/src/main/java/org/acra/annotation/Configuration.java
@@ -0,0 +1,34 @@
+/*
+ * Copyright (c) 2017
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.annotation;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * The annotation annotated with this will be used as basis for the configurationBuilder
+ *
+ * @author F43nd1r
+ * @since 17.03.2017
+ */
+
+@Retention(RetentionPolicy.SOURCE)
+@Target(ElementType.ANNOTATION_TYPE)
+public @interface Configuration {
+}
diff --git a/acra/src/main/java/org/acra/annotation/ConfigurationBuilder.java b/acra/src/main/java/org/acra/annotation/ConfigurationBuilder.java
new file mode 100644
index 00000000..d7039851
--- /dev/null
+++ b/acra/src/main/java/org/acra/annotation/ConfigurationBuilder.java
@@ -0,0 +1,34 @@
+/*
+ * Copyright (c) 2017
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.annotation;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * The class annotated with this will be used as basis for the configuration
+ *
+ * @author F43nd1r
+ * @since 17.03.2017
+ */
+
+@Retention(RetentionPolicy.SOURCE)
+@Target(ElementType.TYPE)
+public @interface ConfigurationBuilder {
+}
diff --git a/acra/src/main/java/org/acra/annotation/Hide.java b/acra/src/main/java/org/acra/annotation/Hide.java
new file mode 100644
index 00000000..852fb344
--- /dev/null
+++ b/acra/src/main/java/org/acra/annotation/Hide.java
@@ -0,0 +1,34 @@
+/*
+ * Copyright (c) 2017
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.annotation;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * Methods annotated with this will not be propagated into the configuration
+ *
+ * @author F43nd1r
+ * @since 17.03.2017
+ */
+
+@Retention(RetentionPolicy.SOURCE)
+@Target(ElementType.METHOD)
+public @interface Hide {
+}
diff --git a/src/main/java/org/acra/annotation/ReportsCrashes.java b/acra/src/main/java/org/acra/annotation/ReportsCrashes.java
similarity index 83%
rename from src/main/java/org/acra/annotation/ReportsCrashes.java
rename to acra/src/main/java/org/acra/annotation/ReportsCrashes.java
index 8858b87a..642bb07b 100644
--- a/src/main/java/org/acra/annotation/ReportsCrashes.java
+++ b/acra/src/main/java/org/acra/annotation/ReportsCrashes.java
@@ -1,603 +1,663 @@
-/*
- *  Copyright 2010 Emmanuel Astier & Kevin Gaudin
- *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-package org.acra.annotation;
-
-import android.content.Context;
-import android.content.SharedPreferences;
-import android.preference.PreferenceManager;
-import android.support.annotation.DrawableRes;
-import android.support.annotation.NonNull;
-import android.support.annotation.RawRes;
-import android.support.annotation.StringRes;
-import android.support.annotation.StyleRes;
-
-import org.acra.ACRA;
-import org.acra.ACRAConstants;
-import org.acra.ReportField;
-import org.acra.ReportingInteractionMode;
-import org.acra.builder.NoOpReportPrimer;
-import org.acra.builder.ReportPrimer;
-import org.acra.config.DefaultRetryPolicy;
-import org.acra.config.RetryPolicy;
-import org.acra.dialog.BaseCrashReportDialog;
-import org.acra.dialog.CrashReportDialog;
-import org.acra.security.KeyStoreFactory;
-import org.acra.security.NoKeyStoreFactory;
-import org.acra.sender.DefaultReportSenderFactory;
-import org.acra.sender.HttpSender.Method;
-import org.acra.sender.HttpSender.Type;
-import org.acra.sender.ReportSenderFactory;
-
-import java.lang.annotation.Documented;
-import java.lang.annotation.ElementType;
-import java.lang.annotation.Inherited;
-import java.lang.annotation.Retention;
-import java.lang.annotation.RetentionPolicy;
-import java.lang.annotation.Target;
-
-/**
- * Provide configuration elements to the
- * {@link ACRA#init(android.app.Application)} method. The only mandatory
- * configuration item is the {@link #formUri()} parameter which is the Uri
- * to the server that will receive your reports.
- * 
- * @author Kevin Gaudin
- * 
- */
-@Documented
-@Retention(RetentionPolicy.RUNTIME)
-@Target(ElementType.TYPE)
-@Inherited
-public @interface ReportsCrashes {
-
-    /**
-     * The Uri of your own server-side script that will receive reports. This is
-     * to use if you don't want to send reports to Google Docs but to your own,
-     * self-hosted script.
-     * 
-     * @return URI of a custom server to which to post reports.
-     */
-    @NonNull String formUri() default ACRAConstants.DEFAULT_STRING_VALUE;
-
-    /**
-     * <p>
-     * The interaction mode you want to implement. Default is
-     * {@link ReportingInteractionMode#SILENT} which does not require any
-     * resources configuration.
-     * </p>
-     * <p>
-     * Other modes have resources requirements:
-     * </p>
-     * <ul>
-     * <li>{@link ReportingInteractionMode#TOAST} requires
-     * {@link #resToastText()} to be provided to define the text that you want
-     * to be displayed to the user when a report is being sent.</li>
-     * <li>{@link ReportingInteractionMode#NOTIFICATION} requires
-     * {@link #resNotifTickerText()}, {@link #resNotifTitle()},
-     * {@link #resNotifText()}, {@link #resDialogText()}.</li>
-     * <li>{@link ReportingInteractionMode#DIALOG} requires
-     * {@link #resDialogText()}.</li>
-     * </ul>
-     * <p>
-     * Default is {@link ReportingInteractionMode#SILENT}
-     * </p>
-     * 
-     * @return the interaction mode that you want ACRA to implement.
-     */
-    @NonNull ReportingInteractionMode mode() default ReportingInteractionMode.SILENT;
-
-    /**
-     * @return Resource id for the label of positive button in the crash dialog.
-     *         If not provided, defaults to 'OK'.
-     */
-    @StringRes int resDialogPositiveButtonText() default ACRAConstants.DEFAULT_DIALOG_POSITIVE_BUTTON_TEXT;
-
-    /**
-     * @return Resource id for the label of negative button in the crash dialog.
-     *         If not provided, defaults to 'cancel'.
-     */
-    @StringRes int resDialogNegativeButtonText() default ACRAConstants.DEFAULT_DIALOG_NEGATIVE_BUTTON_TEXT;
-
-    /**
-     * @return Resource id for the user comment input label in the crash dialog.
-     *         If not provided, disables the input field.
-     */
-    @StringRes int resDialogCommentPrompt() default ACRAConstants.DEFAULT_RES_VALUE;
-
-    /**
-     * @return Resource id for the user email address input label in the crash
-     *         dialog. If not provided, disables the input field.
-     */
-    @StringRes int resDialogEmailPrompt() default ACRAConstants.DEFAULT_RES_VALUE;
-
-    /**
-     * @return Resource id for the icon in the crash dialog. Default value is
-     *         the system alert icon.
-     */
-    @DrawableRes int resDialogIcon() default ACRAConstants.DEFAULT_DIALOG_ICON;
-
-    /**
-     * @return Resource id for the Toast text triggered when the user accepts to
-     *         send a report in the crash dialog.
-     */
-    @StringRes int resDialogOkToast() default ACRAConstants.DEFAULT_RES_VALUE;
-
-    /**
-     * @return Resource id for the text in the crash dialog.
-     */
-    @StringRes int resDialogText() default ACRAConstants.DEFAULT_RES_VALUE;
-
-    /**
-     * @return Resource id for the title in the crash dialog.
-     */
-    @StringRes int resDialogTitle() default ACRAConstants.DEFAULT_RES_VALUE;
-
-    /**
-     *
-     * @return resource id for the crash dialog theme
-     */
-    @StyleRes int resDialogTheme() default ACRAConstants.DEFAULT_RES_VALUE;
-
-    /**
-     * @return Resource id for the icon in the status bar notification. Default
-     *         is the system error notification icon.
-     */
-    @DrawableRes int resNotifIcon() default ACRAConstants.DEFAULT_NOTIFICATION_ICON;
-
-    /**
-     * @return Resource id for the text in the status bar notification.
-     */
-    @StringRes int resNotifText() default ACRAConstants.DEFAULT_RES_VALUE;
-
-    /**
-     * @return Resource id for the ticker text in the status bar notification.
-     */
-    @StringRes int resNotifTickerText() default ACRAConstants.DEFAULT_RES_VALUE;
-
-    /**
-     * @return Resource id for the title in the status bar notification.
-     */
-    @StringRes int resNotifTitle() default ACRAConstants.DEFAULT_RES_VALUE;
-
-    /**
-     * Resource id for the Toast text triggered when the application crashes if
-     * the {@link ReportingInteractionMode#TOAST} mode is used. Can also be used
-     * in {@link ReportingInteractionMode#NOTIFICATION} and
-     * {@link ReportingInteractionMode#DIALOG} modes to display a Toast message
-     * while the report is being created, before the dialog/notification
-     * appears. This allows the user to know what is happening just before the
-     * application is terminated.
-     * 
-     * @return Resource id for the Toast text triggered when the application
-     *         crashes.
-     */
-    @StringRes int resToastText() default ACRAConstants.DEFAULT_RES_VALUE;
-
-    /**
-     * @return Name of the SharedPreferences that will host ACRA settings you
-     *         can make accessible to your users through a preferences screen:
-     *         <ul>
-     *         <li>
-     *         {@link ACRA#PREF_DISABLE_ACRA} or {@link ACRA#PREF_ENABLE_ACRA}</li>
-     *         <li>
-     *         {@link ACRA#PREF_ALWAYS_ACCEPT}</li>
-     *         <li>
-     *         {@link ACRA#PREF_ENABLE_DEVICE_ID}</li>
-     *         <li>
-     *         {@link ACRA#PREF_ENABLE_SYSTEM_LOGS}</li>
-     *         </ul>
-     *         preference. Default is to use the application default
-     *         SharedPreferences, as retrieved with
-     *         {@link PreferenceManager#getDefaultSharedPreferences(Context)}.
-     */
-    @NonNull String sharedPreferencesName() default ACRAConstants.DEFAULT_STRING_VALUE;
-
-    /**
-     * If using a custom {@link ReportsCrashes#sharedPreferencesName()}, pass
-     * here the mode that you need for the SharedPreference file creation:
-     * {@link Context#MODE_PRIVATE}, {@link Context#MODE_WORLD_READABLE} or
-     * {@link Context#MODE_WORLD_WRITEABLE}. Default is
-     * {@link Context#MODE_PRIVATE}.
-     * 
-     * @return Mode to use with the SharedPreference creation.
-     * @see Context#getSharedPreferences(String, int)
-     */
-    int sharedPreferencesMode() default ACRAConstants.DEFAULT_SHARED_PREFERENCES_MODE;
-
-    /**
-     * If enabled, DropBox events collection will include system tags:
-     * <ul>
-     * <li>system_app_anr</li>
-     * <li>system_app_wtf</li>
-     * <li>system_app_crash</li>
-     * <li>system_server_anr</li>
-     * <li>system_server_wtf</li>
-     * <li>system_server_crash</li>
-     * <li>BATTERY_DISCHARGE_INFO</li>
-     * <li>SYSTEM_RECOVERY_LOG</li>
-     * <li>SYSTEM_BOOT</li>
-     * <li>SYSTEM_LAST_KMSG</li>
-     * <li>APANIC_CONSOLE</li>
-     * <li>APANIC_THREADS</li>
-     * <li>SYSTEM_RESTART</li>
-     * <li>SYSTEM_TOMBSTONE</li>
-     * <li>data_app_strictmode</li>
-     * </ul>
-     * 
-     * @return True if system tags are to be included as part of DropBox events.
-     */
-    boolean includeDropBoxSystemTags() default ACRAConstants.DEFAULT_INCLUDE_DROPBOX_SYSTEM_TAGS;
-
-    /**
-     * @return Array of tags that you want to be fetched when collecting DropBox
-     *         entries.
-     */
-    @NonNull String[] additionalDropBoxTags() default {};
-
-    /**
-     * @return Number of minutes to look back when collecting events from
-     *         DropBoxManager.
-     */
-    int dropboxCollectionMinutes() default ACRAConstants.DEFAULT_DROPBOX_COLLECTION_MINUTES;
-
-    /**
-     * <p>
-     * Arguments to be passed to the logcat command line. Default is { "-t",
-     * "100", "-v", "time" } for:
-     * </p>
-     * 
-     * <pre>
-     * logcat -t 100 -v time
-     * </pre>
-     * 
-     * <p>
-     * Do not include -b arguments for buffer selection, include
-     * {@link ReportField#EVENTSLOG} and {@link ReportField#RADIOLOG} in
-     * {@link ReportsCrashes#customReportContent()} to activate alternative
-     * logcat buffers reporting. They will use the same other arguments as those
-     * provided here.
-     * </p>
-     * 
-     * <p>
-     * See <a href=
-     * "http://developer.android.com/intl/fr/guide/developing/tools/adb.html#logcatoptions"
-     * >Listing of logcat Command Options</a>.
-     * </p>
-     * 
-     * @return Array of arguments to supply if retrieving the log as part of the
-     *         report.
-     */
-    @NonNull String[] logcatArguments() default { "-t", "" + ACRAConstants.DEFAULT_LOGCAT_LINES, "-v", "time" };
-
-    /**
-     * When using the {@link #formUri()} parameter to send reports to a custom
-     * server-side script, you can set here and in
-     * {@link #formUriBasicAuthPassword()} the credentials for a BASIC HTTP
-     * authentication.
-     * 
-     * @return Login to use when posting reports to a custom server.
-     */
-    @NonNull String formUriBasicAuthLogin() default ACRAConstants.NULL_VALUE;
-
-    /**
-     * When using the {@link #formUri()} parameter to send reports to a custom
-     * server-side script, you can set here and in
-     * {@link #formUriBasicAuthLogin()} the credentials for a BASIC HTTP
-     * authentication.
-     * 
-     * @return Password to use when posting reports to a custom server.
-     */
-    @NonNull String formUriBasicAuthPassword() default ACRAConstants.NULL_VALUE;
-
-    /**
-     * <p>
-     * Redefines the list of {@link ReportField}s collected and sent in your
-     * reports. If you modify this list, you have to create a new Google Drive
-     * Spreadsheet &amp; Form which will be based on these fields as column headers.
-     * </p>
-     * <p>
-     * The fields order is significant. You can also use this property to modify
-     * fields order in your reports.
-     * </p>
-     * <p>
-     * The default list is the following, except if you send reports by mail
-     * using {@link #mailTo()}.
-     * </p>
-     * <ul>
-     * <li>
-     * {@link ReportField#REPORT_ID}</li>
-     * <li>
-     * {@link ReportField#APP_VERSION_CODE}</li>
-     * <li>
-     * {@link ReportField#APP_VERSION_NAME}</li>
-     * <li>
-     * {@link ReportField#PACKAGE_NAME}</li>
-     * <li>
-     * {@link ReportField#FILE_PATH}</li>
-     * <li>
-     * {@link ReportField#PHONE_MODEL}</li>
-     * <li>
-     * {@link ReportField#BRAND}</li>
-     * <li>
-     * {@link ReportField#PRODUCT}</li>
-     * <li>
-     * {@link ReportField#ANDROID_VERSION}</li>
-     * <li>
-     * {@link ReportField#BUILD}</li>
-     * <li>
-     * {@link ReportField#TOTAL_MEM_SIZE}</li>
-     * <li>
-     * {@link ReportField#AVAILABLE_MEM_SIZE}</li>
-     * <li>
-     * {@link ReportField#CUSTOM_DATA}</li>
-     * <li>
-     * {@link ReportField#IS_SILENT}</li>
-     * <li>
-     * {@link ReportField#STACK_TRACE}</li>
-     * <li>
-     * {@link ReportField#INITIAL_CONFIGURATION}</li>
-     * <li>
-     * {@link ReportField#CRASH_CONFIGURATION}</li>
-     * <li>
-     * {@link ReportField#DISPLAY}</li>
-     * <li>
-     * {@link ReportField#USER_COMMENT}</li>
-     * <li>
-     * {@link ReportField#USER_EMAIL}</li>
-     * <li>
-     * {@link ReportField#USER_APP_START_DATE}</li>
-     * <li>
-     * {@link ReportField#USER_CRASH_DATE}</li>
-     * <li>
-     * {@link ReportField#DUMPSYS_MEMINFO}</li>
-     * <li>
-     * {@link ReportField#LOGCAT}</li>
-     * <li>
-     * {@link ReportField#INSTALLATION_ID}</li>
-     * <li>
-     * {@link ReportField#DEVICE_FEATURES}</li>
-     * <li>
-     * {@link ReportField#ENVIRONMENT}</li>
-     * <li>
-     * {@link ReportField#SHARED_PREFERENCES}</li>
-     * <li>
-     * {@link ReportField#SETTINGS_SYSTEM}</li>
-     * <li>
-     * {@link ReportField#SETTINGS_SECURE}</li>
-     * <li>
-     * {@link ReportField#SETTINGS_GLOBAL}</li>
-     * </ul>
-     * 
-     * @return ReportField Array listing the fields to be included in the
-     *         report.
-     */
-    @NonNull ReportField[] customReportContent() default {};
-
-    /**
-     * <p>
-     * Add your crash reports mailbox here if you want to send reports via
-     * email. This allows to get rid of the INTERNET permission. Reports content
-     * can be customized with {@link #customReportContent()} . Default fields
-     * are:
-     * </p>
-     * <ul>
-     * <li>
-     * {@link ReportField#USER_COMMENT}</li>
-     * <li>
-     * {@link ReportField#ANDROID_VERSION}</li>
-     * <li>
-     * {@link ReportField#APP_VERSION_NAME}</li>
-     * <li>
-     * {@link ReportField#BRAND}</li>
-     * <li>
-     * {@link ReportField#PHONE_MODEL}</li>
-     * <li>
-     * {@link ReportField#CUSTOM_DATA}</li>
-     * <li>
-     * {@link ReportField#STACK_TRACE}</li>
-     * </ul>
-     * 
-     * @return email address to which to send reports.
-     */
-    @NonNull String mailTo() default ACRAConstants.DEFAULT_STRING_VALUE;
-
-    /**
-     * Controls whether unapproved reports are deleted on application start or not.
-     * Default is true.
-     *
-     * Silent and Toast reports are automatically approved.
-     * Dialog and Notification reports required explicit approval by the user before they are sent.
-     *
-     * On application restart the user is prompted with approval for any unsent reports.
-     * So you generally don't want to accumulate unapproved reports, otherwise you will prompt them multiple times.
-     *
-     * If this is set to true then all unapproved reports bar one will be deleted on application start.
-     * The last report is always retained because that is the report that probably just happened.
-     *
-     * If set to false then on restart the user will be prompted with approval for each unapproved report.
-     *
-     * @return true if ACRA should delete unapproved reports on application start.
-     */
-    boolean deleteUnapprovedReportsOnApplicationStart() default ACRAConstants.DEFAULT_DELETE_UNAPPROVED_REPORTS_ON_APPLICATION_START;
-
-    /**
-     * This property can be used to determine whether old (out of date) reports
-     * should be sent or not. By default they are discarded.
-     * 
-     * @return true if ACRA should delete any unsent reports on startup if the
-     *         application has been updated since the last time the application
-     *         was started.
-     */
-    boolean deleteOldUnsentReportsOnApplicationStart() default ACRAConstants.DEFAULT_DELETE_OLD_UNSENT_REPORTS_ON_APPLICATION_START;
-
-    /**
-     * @return Value in milliseconds for timeout attempting to connect to a network (default 5000ms).
-     */
-    int connectionTimeout() default ACRAConstants.DEFAULT_CONNECTION_TIMEOUT;
-
-    /**
-     * If the request is retried due to timeout, the socketTimeout will double
-     * before retrying the request.
-     * 
-     * @return Value in milliseconds for timeout receiving a response to a network request (default 8000ms).
-     */
-    int socketTimeout() default ACRAConstants.DEFAULT_SOCKET_TIMEOUT;
-
-    /**
-     * Set this to true if you prefer displaying the native force close dialog after the ACRA is done.
-     * Recommended: Keep this set to false if using {@link ReportingInteractionMode#DIALOG} for notification.
-     * 
-     * @return true if the native force close dialog should be displayed.
-     */
-    boolean alsoReportToAndroidFramework() default ACRAConstants.DEFAULT_REPORT_TO_ANDROID_FRAMEWORK;
-
-    /**
-     * Add here your {@link SharedPreferences} identifier Strings if you use
-     * others than your application's default. They will be added to the
-     * {@link ReportField#SHARED_PREFERENCES} field.
-     * 
-     * @return String Array containing the names of the additional preferences.
-     */
-    @NonNull String[] additionalSharedPreferences() default {};
-
-    /**
-     * Set this to true if you want to include only logcat lines related to your
-     * Application process.
-     * 
-     * @return true if you want to filter logcat with your process id.
-     */
-    boolean logcatFilterByPid() default ACRAConstants.DEFAULT_LOGCAT_FILTER_BY_PID;
-
-    /**
-     * Set this to false if you want to disable sending reports in development
-     * mode. Only signed application packages will send reports. Default value
-     * is true.
-     * 
-     * @return false if reports should not be sent.
-     */
-    boolean sendReportsInDevMode() default ACRAConstants.DEFAULT_SEND_REPORTS_IN_DEV_MODE;
-
-    /**
-     * @return true.
-     * @deprecated since 4.8.3 no replacement. Now that we are using the SenderService in a separate process we always send at shutdown.
-     */
-    boolean sendReportsAtShutdown() default true;
-
-    /**
-     * Provide here regex patterns to be evaluated on each SharedPreference key
-     * to exclude KV pairs from the collected SharedPreferences. This allows you
-     * to exclude sensitive user data like passwords to be collected.
-     * 
-     * @return an array of regex patterns, every matching key is not collected.
-     */
-    @NonNull String[] excludeMatchingSharedPreferencesKeys() default {};
-
-    /**
-     * Provide here regex patterns to be evaluated on each Settings.System,
-     * Settings.Secure and Settings.Global key to exclude KV pairs from the
-     * collected SharedPreferences. This allows you to exclude sensitive data to
-     * be collected.
-     * 
-     * @return an array of regex patterns, every matching key is not collected.
-     */
-    @NonNull String[] excludeMatchingSettingsKeys() default {};
-
-    /**
-     * The default value will be a BuildConfig class residing in the same package as the Application class.
-     *
-     * @return BuildConfig class from which to read any BuildConfig attributes.
-     */
-    @NonNull Class buildConfigClass() default Object.class;
-
-    /**
-     * The default {@link org.acra.sender.ReportSenderFactory} creates an {@link org.acra.sender.EmailIntentSender}
-     * if the 'mailTo' parameter is defined or an {@link org.acra.sender.HttpSender} if the 'formUri' parameter
-     * is defined (and internet permission has been granted.
-     *
-     * @return List of the {@link org.acra.sender.ReportSenderFactory} with which to construct the
-     *         {@link org.acra.sender.ReportSender}s that will send the crash reports.
-     */
-    @NonNull Class<? extends ReportSenderFactory>[] reportSenderFactoryClasses() default {DefaultReportSenderFactory.class};
-
-    /**
-     * To use in combination with {@link ReportField#APPLICATION_LOG} to set the
-     * path/name of your application log file. If the string does not contain
-     * any path separator, the file is assumed as being in
-     * {@link Context#getFilesDir()}.
-     * 
-     * @return a String containing the path/name of your application log file.
-     *         If the string does not contain any path separator, the file is
-     *         assumed as being in {@link Context#getFilesDir()}.
-     */
-    @NonNull String applicationLogFile() default ACRAConstants.DEFAULT_APPLICATION_LOGFILE;
-
-    /**
-     * To use in combination with {@link ReportField#APPLICATION_LOG} to set the
-     * number of latest lines of your application log file to be collected.
-     * Default value is 100.
-     * 
-     * @return number of lines to collect.
-     */
-    int applicationLogFileLines() default ACRAConstants.DEFAULT_APPLICATION_LOGFILE_LINES;
-
-    /**
-     * @return Class for the CrashReportDialog used when prompting the user for crash details.
-     *          If not provided, defaults to CrashReportDialog.class
-     */
-    @NonNull Class<? extends BaseCrashReportDialog> reportDialogClass() default CrashReportDialog.class;
-
-    /**
-     * @return Class that is ued to provide any extra details for a crash.
-     */
-    @NonNull Class<? extends ReportPrimer> reportPrimerClass() default NoOpReportPrimer.class;
-
-    /**
-     * <p>
-     * The {@link Method} to be used when posting with {@link #formUri()}.
-     * </p>
-     *
-     * @return HTTP method used when posting reports.
-     */
-    @NonNull Method httpMethod() default Method.POST;
-
-    @NonNull Type reportType() default Type.FORM;
-
-    /**
-     * @return Class which creates a keystore that can contain trusted certificates
-     */
-    @NonNull Class<? extends KeyStoreFactory> keyStoreFactoryClass() default NoKeyStoreFactory.class;
-
-    /**
-     * @return path to a custom trusted certificate. Must start with "asset://" if the file is in the assets folder
-     */
-    @NonNull String certificatePath() default ACRAConstants.DEFAULT_STRING_VALUE;
-
-    /**
-     * @return resource id of a custom trusted certificate.
-     */
-    @RawRes int resCertificate() default ACRAConstants.DEFAULT_RES_VALUE;
-
-    /**
-     * @return specify the type of the certificate set in either {@link #certificatePath()} or {@link #resCertificate()}
-     */
-    @NonNull String certificateType() default ACRAConstants.DEFAULT_CERTIFICATE_TYPE;
-
-    /**
-     * @return a Class that decides if a report should be resent (usually if one or more senders failed).
-     * @since 4.9.1
-     */
-    @NonNull Class<? extends RetryPolicy> retryPolicyClass() default DefaultRetryPolicy.class;
-}
+/*
+ *  Copyright 2010 Emmanuel Astier & Kevin Gaudin
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.acra.annotation;
+
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.preference.PreferenceManager;
+import android.support.annotation.DrawableRes;
+import android.support.annotation.NonNull;
+import android.support.annotation.RawRes;
+import android.support.annotation.StringRes;
+import android.support.annotation.StyleRes;
+
+import org.acra.ACRA;
+import org.acra.ACRAConstants;
+import org.acra.ReportField;
+import org.acra.ReportingInteractionMode;
+import org.acra.attachment.AttachmentUriProvider;
+import org.acra.attachment.DefaultAttachmentProvider;
+import org.acra.builder.NoOpReportPrimer;
+import org.acra.builder.ReportPrimer;
+import org.acra.config.DefaultRetryPolicy;
+import org.acra.config.RetryPolicy;
+import org.acra.dialog.BaseCrashReportDialog;
+import org.acra.dialog.CrashReportDialog;
+import org.acra.file.Directory;
+import org.acra.security.KeyStoreFactory;
+import org.acra.security.NoKeyStoreFactory;
+import org.acra.sender.DefaultReportSenderFactory;
+import org.acra.sender.HttpSender.Method;
+import org.acra.sender.HttpSender.Type;
+import org.acra.sender.ReportSenderFactory;
+
+import java.lang.annotation.Documented;
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Inherited;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * Provide configuration elements to the
+ * {@link ACRA#init(android.app.Application)} method. The only mandatory
+ * configuration item is the {@link #formUri()} parameter which is the Uri
+ * to the server that will receive your reports.
+ *
+ * @author Kevin Gaudin
+ */
+@Documented
+@Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.TYPE)
+@Inherited
+@Configuration
+public @interface ReportsCrashes {
+
+    /**
+     * The Uri of your own server-side script that will receive reports. This is
+     * to use if you don't want to send reports to Google Docs but to your own,
+     * self-hosted script.
+     *
+     * @return URI of a custom server to which to post reports.
+     */
+    @NonNull String formUri() default ACRAConstants.DEFAULT_STRING_VALUE;
+
+    /**
+     * <p>
+     * The interaction mode you want to implement. Default is
+     * {@link ReportingInteractionMode#SILENT} which does not require any
+     * resources configuration.
+     * </p>
+     * <p>
+     * Other modes have resources requirements:
+     * </p>
+     * <ul>
+     * <li>{@link ReportingInteractionMode#TOAST} requires
+     * {@link #resToastText()} to be provided to define the text that you want
+     * to be displayed to the user when a report is being sent.</li>
+     * <li>{@link ReportingInteractionMode#NOTIFICATION} requires
+     * {@link #resNotifTickerText()}, {@link #resNotifTitle()},
+     * {@link #resNotifText()}, {@link #resDialogText()}.</li>
+     * <li>{@link ReportingInteractionMode#DIALOG} requires
+     * {@link #resDialogText()}.</li>
+     * </ul>
+     * <p>
+     * Default is {@link ReportingInteractionMode#SILENT}
+     * </p>
+     *
+     * @return the interaction mode that you want ACRA to implement.
+     */
+    @NonNull ReportingInteractionMode reportingInteractionMode() default ReportingInteractionMode.SILENT;
+
+    /**
+     * @return Resource id for the label of positive button in the crash dialog.
+     * If not provided, defaults to 'OK'.
+     */
+    @StringRes int resDialogPositiveButtonText() default ACRAConstants.DEFAULT_DIALOG_POSITIVE_BUTTON_TEXT;
+
+    /**
+     * @return Resource id for the label of negative button in the crash dialog.
+     * If not provided, defaults to 'cancel'.
+     */
+    @StringRes int resDialogNegativeButtonText() default ACRAConstants.DEFAULT_DIALOG_NEGATIVE_BUTTON_TEXT;
+
+    /**
+     * @return Resource id for the user comment input label in the crash dialog.
+     * If not provided, disables the input field.
+     */
+    @StringRes int resDialogCommentPrompt() default ACRAConstants.DEFAULT_RES_VALUE;
+
+    /**
+     * @return Resource id for the user email address input label in the crash
+     * dialog. If not provided, disables the input field.
+     */
+    @StringRes int resDialogEmailPrompt() default ACRAConstants.DEFAULT_RES_VALUE;
+
+    /**
+     * @return Resource id for the icon in the crash dialog. Default value is
+     * the system alert icon.
+     */
+    @DrawableRes int resDialogIcon() default ACRAConstants.DEFAULT_DIALOG_ICON;
+
+    /**
+     * @return Resource id for the Toast text triggered when the user accepts to
+     * send a report in the crash dialog.
+     */
+    @StringRes int resDialogOkToast() default ACRAConstants.DEFAULT_RES_VALUE;
+
+    /**
+     * @return Resource id for the text in the crash dialog.
+     */
+    @StringRes int resDialogText() default ACRAConstants.DEFAULT_RES_VALUE;
+
+    /**
+     * @return Resource id for the title in the crash dialog.
+     */
+    @StringRes int resDialogTitle() default ACRAConstants.DEFAULT_RES_VALUE;
+
+    /**
+     * @return resource id for the crash dialog theme
+     */
+    @StyleRes int resDialogTheme() default ACRAConstants.DEFAULT_RES_VALUE;
+
+    /**
+     * @return Resource id for the icon in the status bar notification. Default
+     * is the system error notification icon.
+     */
+    @DrawableRes int resNotifIcon() default ACRAConstants.DEFAULT_NOTIFICATION_ICON;
+
+    /**
+     * @return Resource id for the text in the status bar notification.
+     */
+    @StringRes int resNotifText() default ACRAConstants.DEFAULT_RES_VALUE;
+
+    /**
+     * @return Resource id for the ticker text in the status bar notification.
+     */
+    @StringRes int resNotifTickerText() default ACRAConstants.DEFAULT_RES_VALUE;
+
+    /**
+     * @return Resource id for the title in the status bar notification.
+     */
+    @StringRes int resNotifTitle() default ACRAConstants.DEFAULT_RES_VALUE;
+
+    /**
+     * Resource id for the Toast text triggered when the application crashes if
+     * the {@link ReportingInteractionMode#TOAST} mode is used. Can also be used
+     * in {@link ReportingInteractionMode#NOTIFICATION} and
+     * {@link ReportingInteractionMode#DIALOG} modes to display a Toast message
+     * while the report is being created, before the dialog/notification
+     * appears. This allows the user to know what is happening just before the
+     * application is terminated.
+     *
+     * @return Resource id for the Toast text triggered when the application
+     * crashes.
+     */
+    @StringRes int resToastText() default ACRAConstants.DEFAULT_RES_VALUE;
+
+    /**
+     * @return Name of the SharedPreferences that will host ACRA settings you
+     * can make accessible to your users through a preferences screen:
+     * <ul>
+     * <li>
+     * {@link ACRA#PREF_DISABLE_ACRA} or {@link ACRA#PREF_ENABLE_ACRA}</li>
+     * <li>
+     * {@link ACRA#PREF_ALWAYS_ACCEPT}</li>
+     * <li>
+     * {@link ACRA#PREF_ENABLE_DEVICE_ID}</li>
+     * <li>
+     * {@link ACRA#PREF_ENABLE_SYSTEM_LOGS}</li>
+     * </ul>
+     * preference. Default is to use the application default
+     * SharedPreferences, as retrieved with
+     * {@link PreferenceManager#getDefaultSharedPreferences(Context)}.
+     */
+    @NonNull String sharedPreferencesName() default ACRAConstants.DEFAULT_STRING_VALUE;
+
+    /**
+     * If using a custom {@link ReportsCrashes#sharedPreferencesName()}, pass
+     * here the mode that you need for the SharedPreference file creation:
+     * {@link Context#MODE_PRIVATE}, {@link Context#MODE_WORLD_READABLE} or
+     * {@link Context#MODE_WORLD_WRITEABLE}. Default is
+     * {@link Context#MODE_PRIVATE}.
+     *
+     * @return Mode to use with the SharedPreference creation.
+     * @see Context#getSharedPreferences(String, int)
+     */
+    int sharedPreferencesMode() default ACRAConstants.DEFAULT_SHARED_PREFERENCES_MODE;
+
+    /**
+     * If enabled, DropBox events collection will include system tags:
+     * <ul>
+     * <li>system_app_anr</li>
+     * <li>system_app_wtf</li>
+     * <li>system_app_crash</li>
+     * <li>system_server_anr</li>
+     * <li>system_server_wtf</li>
+     * <li>system_server_crash</li>
+     * <li>BATTERY_DISCHARGE_INFO</li>
+     * <li>SYSTEM_RECOVERY_LOG</li>
+     * <li>SYSTEM_BOOT</li>
+     * <li>SYSTEM_LAST_KMSG</li>
+     * <li>APANIC_CONSOLE</li>
+     * <li>APANIC_THREADS</li>
+     * <li>SYSTEM_RESTART</li>
+     * <li>SYSTEM_TOMBSTONE</li>
+     * <li>data_app_strictmode</li>
+     * </ul>
+     *
+     * @return True if system tags are to be included as part of DropBox events.
+     */
+    boolean includeDropBoxSystemTags() default ACRAConstants.DEFAULT_INCLUDE_DROPBOX_SYSTEM_TAGS;
+
+    /**
+     * @return Array of tags that you want to be fetched when collecting DropBox
+     * entries.
+     */
+    @NonNull String[] additionalDropBoxTags() default {};
+
+    /**
+     * @return Number of minutes to look back when collecting events from
+     * DropBoxManager.
+     */
+    int dropboxCollectionMinutes() default ACRAConstants.DEFAULT_DROPBOX_COLLECTION_MINUTES;
+
+    /**
+     * <p>
+     * Arguments to be passed to the logcat command line. Default is { "-t",
+     * "100", "-v", "time" } for:
+     * </p>
+     * <p>
+     * <pre>
+     * logcat -t 100 -v time
+     * </pre>
+     * <p>
+     * <p>
+     * Do not include -b arguments for buffer selection, include
+     * {@link ReportField#EVENTSLOG} and {@link ReportField#RADIOLOG} in
+     * {@link ReportsCrashes#customReportContent()} to activate alternative
+     * logcat buffers reporting. They will use the same other arguments as those
+     * provided here.
+     * </p>
+     * <p>
+     * <p>
+     * See <a href=
+     * "http://developer.android.com/intl/fr/guide/developing/tools/adb.html#logcatoptions"
+     * >Listing of logcat Command Options</a>.
+     * </p>
+     *
+     * @return Array of arguments to supply if retrieving the log as part of the
+     * report.
+     */
+    @NonNull String[] logcatArguments() default {"-t", "" + ACRAConstants.DEFAULT_LOGCAT_LINES, "-v", "time"};
+
+    /**
+     * When using the {@link #formUri()} parameter to send reports to a custom
+     * server-side script, you can set here and in
+     * {@link #formUriBasicAuthPassword()} the credentials for a BASIC HTTP
+     * authentication.
+     *
+     * @return Login to use when posting reports to a custom server.
+     */
+    @NonNull String formUriBasicAuthLogin() default ACRAConstants.NULL_VALUE;
+
+    /**
+     * When using the {@link #formUri()} parameter to send reports to a custom
+     * server-side script, you can set here and in
+     * {@link #formUriBasicAuthLogin()} the credentials for a BASIC HTTP
+     * authentication.
+     *
+     * @return Password to use when posting reports to a custom server.
+     */
+    @NonNull String formUriBasicAuthPassword() default ACRAConstants.NULL_VALUE;
+
+    /**
+     * <p>
+     * Redefines the list of {@link ReportField}s collected and sent in your
+     * reports. If you modify this list, you have to create a new Google Drive
+     * Spreadsheet &amp; Form which will be based on these fields as column headers.
+     * </p>
+     * <p>
+     * The fields order is significant. You can also use this property to modify
+     * fields order in your reports.
+     * </p>
+     * <p>
+     * The default list is the following, except if you send reports by mail
+     * using {@link #mailTo()}.
+     * </p>
+     * <ul>
+     * <li>
+     * {@link ReportField#REPORT_ID}</li>
+     * <li>
+     * {@link ReportField#APP_VERSION_CODE}</li>
+     * <li>
+     * {@link ReportField#APP_VERSION_NAME}</li>
+     * <li>
+     * {@link ReportField#PACKAGE_NAME}</li>
+     * <li>
+     * {@link ReportField#FILE_PATH}</li>
+     * <li>
+     * {@link ReportField#PHONE_MODEL}</li>
+     * <li>
+     * {@link ReportField#BRAND}</li>
+     * <li>
+     * {@link ReportField#PRODUCT}</li>
+     * <li>
+     * {@link ReportField#ANDROID_VERSION}</li>
+     * <li>
+     * {@link ReportField#BUILD}</li>
+     * <li>
+     * {@link ReportField#TOTAL_MEM_SIZE}</li>
+     * <li>
+     * {@link ReportField#AVAILABLE_MEM_SIZE}</li>
+     * <li>
+     * {@link ReportField#CUSTOM_DATA}</li>
+     * <li>
+     * {@link ReportField#IS_SILENT}</li>
+     * <li>
+     * {@link ReportField#STACK_TRACE}</li>
+     * <li>
+     * {@link ReportField#INITIAL_CONFIGURATION}</li>
+     * <li>
+     * {@link ReportField#CRASH_CONFIGURATION}</li>
+     * <li>
+     * {@link ReportField#DISPLAY}</li>
+     * <li>
+     * {@link ReportField#USER_COMMENT}</li>
+     * <li>
+     * {@link ReportField#USER_EMAIL}</li>
+     * <li>
+     * {@link ReportField#USER_APP_START_DATE}</li>
+     * <li>
+     * {@link ReportField#USER_CRASH_DATE}</li>
+     * <li>
+     * {@link ReportField#DUMPSYS_MEMINFO}</li>
+     * <li>
+     * {@link ReportField#LOGCAT}</li>
+     * <li>
+     * {@link ReportField#INSTALLATION_ID}</li>
+     * <li>
+     * {@link ReportField#DEVICE_FEATURES}</li>
+     * <li>
+     * {@link ReportField#ENVIRONMENT}</li>
+     * <li>
+     * {@link ReportField#SHARED_PREFERENCES}</li>
+     * <li>
+     * {@link ReportField#SETTINGS_SYSTEM}</li>
+     * <li>
+     * {@link ReportField#SETTINGS_SECURE}</li>
+     * <li>
+     * {@link ReportField#SETTINGS_GLOBAL}</li>
+     * </ul>
+     *
+     * @return ReportField Array listing the fields to be included in the
+     * report.
+     */
+    @NonNull ReportField[] customReportContent() default {};
+
+    /**
+     * <p>
+     * Add your crash reports mailbox here if you want to send reports via
+     * email. This allows to get rid of the INTERNET permission. Reports content
+     * can be customized with {@link #customReportContent()} . Default fields
+     * are:
+     * </p>
+     * <ul>
+     * <li>
+     * {@link ReportField#USER_COMMENT}</li>
+     * <li>
+     * {@link ReportField#ANDROID_VERSION}</li>
+     * <li>
+     * {@link ReportField#APP_VERSION_NAME}</li>
+     * <li>
+     * {@link ReportField#BRAND}</li>
+     * <li>
+     * {@link ReportField#PHONE_MODEL}</li>
+     * <li>
+     * {@link ReportField#CUSTOM_DATA}</li>
+     * <li>
+     * {@link ReportField#STACK_TRACE}</li>
+     * </ul>
+     *
+     * @return email address to which to send reports.
+     */
+    @NonNull String mailTo() default ACRAConstants.DEFAULT_STRING_VALUE;
+
+    /**
+     * Controls whether unapproved reports are deleted on application start or not.
+     * Default is true.
+     * <p>
+     * Silent and Toast reports are automatically approved.
+     * Dialog and Notification reports required explicit approval by the user before they are sent.
+     * </p>
+     * <p>
+     * On application restart the user is prompted with approval for any unsent reports.
+     * So you generally don't want to accumulate unapproved reports, otherwise you will prompt them multiple times.
+     * </p>
+     * <p>
+     * If this is set to true then all unapproved reports bar one will be deleted on application start.
+     * The last report is always retained because that is the report that probably just happened.
+     * </p>
+     * <p>
+     * If set to false then on restart the user will be prompted with approval for each unapproved report.
+     * </p>
+     *
+     * @return true if ACRA should delete unapproved reports on application start.
+     */
+    boolean deleteUnapprovedReportsOnApplicationStart() default ACRAConstants.DEFAULT_DELETE_UNAPPROVED_REPORTS_ON_APPLICATION_START;
+
+    /**
+     * This property can be used to determine whether old (out of date) reports
+     * should be sent or not. By default they are discarded.
+     *
+     * @return true if ACRA should delete any unsent reports on startup if the
+     * application has been updated since the last time the application
+     * was started.
+     */
+    boolean deleteOldUnsentReportsOnApplicationStart() default ACRAConstants.DEFAULT_DELETE_OLD_UNSENT_REPORTS_ON_APPLICATION_START;
+
+    /**
+     * @return Value in milliseconds for timeout attempting to connect to a network (default 5000ms).
+     */
+    int connectionTimeout() default ACRAConstants.DEFAULT_CONNECTION_TIMEOUT;
+
+    /**
+     * If the request is retried due to timeout, the socketTimeout will double
+     * before retrying the request.
+     *
+     * @return Value in milliseconds for timeout receiving a response to a network request (default 8000ms).
+     */
+    int socketTimeout() default ACRAConstants.DEFAULT_SOCKET_TIMEOUT;
+
+    /**
+     * Set this to true if you prefer displaying the native force close dialog after the ACRA is done.
+     * Recommended: Keep this set to false if using {@link ReportingInteractionMode#DIALOG} for notification.
+     *
+     * @return true if the native force close dialog should be displayed.
+     */
+    boolean alsoReportToAndroidFramework() default ACRAConstants.DEFAULT_REPORT_TO_ANDROID_FRAMEWORK;
+
+    /**
+     * Add here your {@link SharedPreferences} identifier Strings if you use
+     * others than your application's default. They will be added to the
+     * {@link ReportField#SHARED_PREFERENCES} field.
+     *
+     * @return String Array containing the names of the additional preferences.
+     */
+    @NonNull String[] additionalSharedPreferences() default {};
+
+    /**
+     * Set this to true if you want to include only logcat lines related to your
+     * Application process.
+     *
+     * @return true if you want to filter logcat with your process id.
+     */
+    boolean logcatFilterByPid() default ACRAConstants.DEFAULT_LOGCAT_FILTER_BY_PID;
+
+    /**
+     * Set this to true if you want to read logcat lines in a non blocking way for your
+     * thread. It has a default timeout of 3 seconds.
+     *
+     * @return true if you want that reading of logcat lines to not block current thread.
+     */
+    boolean nonBlockingReadForLogcat() default ACRAConstants.DEFAULT_NON_BLOCKING_READ_FOR_LOGCAT;
+
+    /**
+     * Set this to false if you want to disable sending reports in development
+     * mode. Only signed application packages will send reports. Default value
+     * is true.
+     *
+     * @return false if reports should not be sent.
+     */
+    boolean sendReportsInDevMode() default ACRAConstants.DEFAULT_SEND_REPORTS_IN_DEV_MODE;
+
+    /**
+     * @return true.
+     * @deprecated since 4.8.3 no replacement. Now that we are using the SenderService in a separate process we always send at shutdown.
+     */
+    @Deprecated
+    boolean sendReportsAtShutdown() default true;
+
+    /**
+     * Provide here regex patterns to be evaluated on each SharedPreference key
+     * to exclude KV pairs from the collected SharedPreferences. This allows you
+     * to exclude sensitive user data like passwords to be collected.
+     *
+     * @return an array of regex patterns, every matching key is not collected.
+     */
+    @NonNull String[] excludeMatchingSharedPreferencesKeys() default {};
+
+    /**
+     * Provide here regex patterns to be evaluated on each Settings.System,
+     * Settings.Secure and Settings.Global key to exclude KV pairs from the
+     * collected SharedPreferences. This allows you to exclude sensitive data to
+     * be collected.
+     *
+     * @return an array of regex patterns, every matching key is not collected.
+     */
+    @NonNull String[] excludeMatchingSettingsKeys() default {};
+
+    /**
+     * The default value will be a BuildConfig class residing in the same package as the Application class.
+     *
+     * @return BuildConfig class from which to read any BuildConfig attributes.
+     */
+    @NonNull Class buildConfigClass() default Object.class;
+
+    /**
+     * The default {@link org.acra.sender.ReportSenderFactory} creates an {@link org.acra.sender.EmailIntentSender}
+     * if the 'mailTo' parameter is defined or an {@link org.acra.sender.HttpSender} if the 'formUri' parameter
+     * is defined (and internet permission has been granted.
+     *
+     * @return List of the {@link org.acra.sender.ReportSenderFactory} with which to construct the
+     * {@link org.acra.sender.ReportSender}s that will send the crash reports.
+     */
+    @NonNull Class<? extends ReportSenderFactory>[] reportSenderFactoryClasses() default {DefaultReportSenderFactory.class};
+
+    /**
+     * To use in combination with {@link ReportField#APPLICATION_LOG} to set the
+     * path/name of your application log file. If the string does not contain
+     * any path separator, the file is assumed as being in
+     * {@link Context#getFilesDir()}.
+     *
+     * @return a String containing the path/name of your application log file.
+     * If the string does not contain any path separator, the file is
+     * assumed as being in {@link Context#getFilesDir()}.
+     */
+    @NonNull String applicationLogFile() default ACRAConstants.DEFAULT_APPLICATION_LOGFILE;
+
+    /**
+     * To use in combination with {@link ReportField#APPLICATION_LOG} to set the
+     * number of latest lines of your application log file to be collected.
+     * Default value is 100.
+     *
+     * @return number of lines to collect.
+     */
+    int applicationLogFileLines() default ACRAConstants.DEFAULT_APPLICATION_LOGFILE_LINES;
+
+    /**
+     * To use in combination with {@link ReportField#APPLICATION_LOG} to set the root
+     * for the path provided in {@link #applicationLogFile()}
+     *
+     * @return the directory of the application log file
+     */
+    @NonNull Directory applicationLogFileDir() default Directory.FILES_LEGACY;
+
+    /**
+     * @return Class for the CrashReportDialog used when prompting the user for crash details.
+     * If not provided, defaults to CrashReportDialog.class
+     */
+    @NonNull Class<? extends BaseCrashReportDialog> reportDialogClass() default CrashReportDialog.class;
+
+    /**
+     * @return Class that is ued to provide any extra details for a crash.
+     */
+    @NonNull Class<? extends ReportPrimer> reportPrimerClass() default NoOpReportPrimer.class;
+
+    /**
+     * <p>
+     * The {@link Method} to be used when posting with {@link #formUri()}.
+     * </p>
+     *
+     * @return HTTP method used when posting reports.
+     */
+    @NonNull Method httpMethod() default Method.POST;
+
+    @NonNull Type reportType() default Type.FORM;
+
+    /**
+     * @return Class which creates a keystore that can contain trusted certificates
+     */
+    @NonNull Class<? extends KeyStoreFactory> keyStoreFactoryClass() default NoKeyStoreFactory.class;
+
+    /**
+     * @return path to a custom trusted certificate. Must start with "asset://" if the file is in the assets folder
+     */
+    @NonNull String certificatePath() default ACRAConstants.DEFAULT_STRING_VALUE;
+
+    /**
+     * @return resource id of a custom trusted certificate.
+     */
+    @RawRes int resCertificate() default ACRAConstants.DEFAULT_RES_VALUE;
+
+    /**
+     * @return specify the type of the certificate set in either {@link #certificatePath()} or {@link #resCertificate()}
+     */
+    @NonNull String certificateType() default ACRAConstants.DEFAULT_CERTIFICATE_TYPE;
+
+    /**
+     * @return a Class that decides if a report should be resent (usually if one or more senders failed).
+     * @since 4.9.1
+     */
+    @NonNull Class<? extends RetryPolicy> retryPolicyClass() default DefaultRetryPolicy.class;
+
+    /**
+     * @return true if all services running in a process should be stopped before it is killed.
+     * @since 4.9.2
+     */
+    boolean stopServicesOnCrash() default false;
+
+    /**
+     * Allows to attach files to crash reports.
+     * <p>
+     * ACRA contains a file provider under the following Uri:
+     * content://[applicationId].acra/[Directory]/[Path]
+     * where [applicationId] is your application package name,
+     * [Directory] is one of the enum constants in {@link Directory} in lower case
+     * and [Path] is the relative path to the file in that directory
+     * e.g. content://org.acra.provider/files/thisIsATest.txt
+     * </p>
+     * Side effects:
+     * <ul>
+     * <li>POST mode: requests will be sent with content-type multipart/mixed</li>
+     * <li>PUT mode: There will be additional requests with the attachments. Naming scheme: [report-id]-[filename] </li>
+     * <li>EMAIL mode: Some email clients do not support attachments, so some email may lack these attachments.
+     * Note that attachments will be readable to email clients when they are sent.</li>
+     * </ul>
+     *
+     * @return uris to be attached to crash reports.
+     * @since 4.9.3
+     */
+    @NonNull String[] attachmentUris() default {};
+
+    /**
+     * Allows attachmentUri configuration at runtime instead of compile time.
+     *
+     * @return a class that decides which uris should be attached to reports
+     * @since 4.9.3
+     */
+    @NonNull Class<? extends AttachmentUriProvider> attachmentUriProvider() default DefaultAttachmentProvider.class;
+}
diff --git a/acra/src/main/java/org/acra/attachment/AcraContentProvider.java b/acra/src/main/java/org/acra/attachment/AcraContentProvider.java
new file mode 100644
index 00000000..70c176af
--- /dev/null
+++ b/acra/src/main/java/org/acra/attachment/AcraContentProvider.java
@@ -0,0 +1,141 @@
+/*
+ * Copyright (c) 2017
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.attachment;
+
+import android.content.ContentProvider;
+import android.content.ContentValues;
+import android.content.UriMatcher;
+import android.database.Cursor;
+import android.database.MatrixCursor;
+import android.net.Uri;
+import android.os.Build;
+import android.os.ParcelFileDescriptor;
+import android.provider.OpenableColumns;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+
+import org.acra.ACRA;
+import org.acra.file.Directory;
+import org.acra.http.HttpUtils;
+
+import java.io.File;
+import java.io.FileNotFoundException;
+import java.util.ArrayList;
+import java.util.LinkedHashMap;
+import java.util.List;
+import java.util.Map;
+
+/**
+ * @author F43nd1r
+ * @since 13.03.2017
+ */
+
+public class AcraContentProvider extends ContentProvider {
+    private static final String[] COLUMNS = {
+            OpenableColumns.DISPLAY_NAME, OpenableColumns.SIZE};
+    private static final String ANY_MATCH = "/*";
+    private UriMatcher uriMatcher;
+
+    @Override
+    public boolean onCreate() {
+        final String authority = getContext().getPackageName() + ".acra";
+        if (ACRA.DEV_LOGGING) ACRA.log.d(ACRA.LOG_TAG, "Registered content provider for authority " + authority);
+        uriMatcher = new UriMatcher(UriMatcher.NO_MATCH);
+        for (Directory directory : Directory.values()) {
+            uriMatcher.addURI(authority, directory.name().toLowerCase() + ANY_MATCH, directory.ordinal());
+        }
+        return true;
+    }
+
+    @Nullable
+    @Override
+    public Cursor query(@NonNull Uri uri, @Nullable String[] projection, @Nullable String selection, @Nullable String[] selectionArgs, @Nullable String sortOrder) {
+        final File file = getFileForUri(uri);
+        if (file == null) {
+            return null;
+        }
+        if (projection == null) {
+            projection = COLUMNS;
+        }
+        final Map<String, Object> columnValueMap = new LinkedHashMap<String, Object>();
+        for (String column : projection) {
+            if (column.equals(OpenableColumns.DISPLAY_NAME)) {
+                columnValueMap.put(OpenableColumns.DISPLAY_NAME, file.getName());
+            } else if (column.equals(OpenableColumns.SIZE)) {
+                columnValueMap.put(OpenableColumns.SIZE, file.length());
+            }
+        }
+        final MatrixCursor cursor = new MatrixCursor(columnValueMap.keySet().toArray(new String[columnValueMap.size()]), 1);
+        cursor.addRow(columnValueMap.values());
+        return cursor;
+    }
+
+    @Nullable
+    private File getFileForUri(Uri uri) {
+        final int match = uriMatcher.match(uri);
+        if (match == UriMatcher.NO_MATCH) {
+            return null;
+        }
+        final List<String> segments = new ArrayList<String>(uri.getPathSegments());
+        if (segments.size() < 2) return null;
+        final String dir = segments.remove(0).toUpperCase();
+        try {
+            final Directory directory = Directory.valueOf(dir);
+            return directory.getFile(getContext(), TextUtils.join(File.separator, segments));
+        } catch (IllegalArgumentException e) {
+            return null;
+        }
+    }
+
+    @Nullable
+    @Override
+    public String getType(@NonNull Uri uri) {
+        return HttpUtils.guessMimeType(uri);
+    }
+
+    @Nullable
+    @Override
+    public Uri insert(@NonNull Uri uri, @Nullable ContentValues values) {
+        throw new UnsupportedOperationException("No insert supported");
+    }
+
+    @Override
+    public int delete(@NonNull Uri uri, @Nullable String selection, @Nullable String[] selectionArgs) {
+        throw new UnsupportedOperationException("No delete supported");
+    }
+
+    @Override
+    public int update(@NonNull Uri uri, @Nullable ContentValues values, @Nullable String selection, @Nullable String[] selectionArgs) {
+        throw new UnsupportedOperationException("No update supported");
+    }
+
+    @Nullable
+    @Override
+    public ParcelFileDescriptor openFile(@NonNull Uri uri, @NonNull String mode) throws FileNotFoundException {
+        final File file = getFileForUri(uri);
+        if (file == null || !file.exists()) throw new FileNotFoundException("File represented by uri " + uri + " could not be found");
+        if(ACRA.DEV_LOGGING) {
+            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
+                ACRA.log.d(ACRA.LOG_TAG, getCallingPackage() + " opened " + file.getPath());
+            }else {
+                ACRA.log.d(ACRA.LOG_TAG, file.getPath() + " was opened by an application");
+            }
+        }
+        return ParcelFileDescriptor.open(file, ParcelFileDescriptor.MODE_READ_ONLY);
+    }
+}
diff --git a/acra/src/main/java/org/acra/attachment/AttachmentUriProvider.java b/acra/src/main/java/org/acra/attachment/AttachmentUriProvider.java
new file mode 100644
index 00000000..74d66927
--- /dev/null
+++ b/acra/src/main/java/org/acra/attachment/AttachmentUriProvider.java
@@ -0,0 +1,20 @@
+package org.acra.attachment;
+
+import android.content.Context;
+import android.net.Uri;
+import android.support.annotation.NonNull;
+
+import org.acra.config.ACRAConfiguration;
+
+import java.util.ArrayList;
+
+/**
+ * @author F43nd1r
+ * @since 09.03.2017
+ */
+
+public interface AttachmentUriProvider {
+
+    @NonNull
+    ArrayList<Uri> getAttachments(Context context, ACRAConfiguration configuration);
+}
diff --git a/acra/src/main/java/org/acra/attachment/DefaultAttachmentProvider.java b/acra/src/main/java/org/acra/attachment/DefaultAttachmentProvider.java
new file mode 100644
index 00000000..ec23ae1b
--- /dev/null
+++ b/acra/src/main/java/org/acra/attachment/DefaultAttachmentProvider.java
@@ -0,0 +1,33 @@
+package org.acra.attachment;
+
+import android.content.Context;
+import android.net.Uri;
+import android.support.annotation.NonNull;
+
+import org.acra.ACRA;
+import org.acra.config.ACRAConfiguration;
+
+import java.util.ArrayList;
+
+import static org.acra.ACRA.LOG_TAG;
+
+/**
+ * @author F43nd1r
+ * @since 10.03.2017
+ */
+
+public class DefaultAttachmentProvider implements AttachmentUriProvider {
+    @NonNull
+    @Override
+    public ArrayList<Uri> getAttachments(Context context, ACRAConfiguration configuration) {
+        final ArrayList<Uri> result = new ArrayList<Uri>();
+        for (String s : configuration.attachmentUris()){
+            try {
+                result.add(Uri.parse(s));
+            }catch (Exception e){
+                ACRA.log.e(LOG_TAG, "Failed to parse Uri " + s, e);
+            }
+        }
+        return result;
+    }
+}
diff --git a/src/main/java/org/acra/builder/LastActivityManager.java b/acra/src/main/java/org/acra/builder/LastActivityManager.java
similarity index 100%
rename from src/main/java/org/acra/builder/LastActivityManager.java
rename to acra/src/main/java/org/acra/builder/LastActivityManager.java
diff --git a/src/main/java/org/acra/builder/NoOpReportPrimer.java b/acra/src/main/java/org/acra/builder/NoOpReportPrimer.java
similarity index 100%
rename from src/main/java/org/acra/builder/NoOpReportPrimer.java
rename to acra/src/main/java/org/acra/builder/NoOpReportPrimer.java
diff --git a/src/main/java/org/acra/builder/ReportBuilder.java b/acra/src/main/java/org/acra/builder/ReportBuilder.java
similarity index 100%
rename from src/main/java/org/acra/builder/ReportBuilder.java
rename to acra/src/main/java/org/acra/builder/ReportBuilder.java
diff --git a/src/main/java/org/acra/builder/ReportExecutor.java b/acra/src/main/java/org/acra/builder/ReportExecutor.java
similarity index 88%
rename from src/main/java/org/acra/builder/ReportExecutor.java
rename to acra/src/main/java/org/acra/builder/ReportExecutor.java
index 88f1f447..f743ff4f 100644
--- a/src/main/java/org/acra/builder/ReportExecutor.java
+++ b/acra/src/main/java/org/acra/builder/ReportExecutor.java
@@ -1,12 +1,12 @@
 package org.acra.builder;
 
-import android.app.Activity;
 import android.app.Notification;
 import android.app.NotificationManager;
 import android.app.PendingIntent;
 import android.content.Context;
 import android.content.Intent;
 import android.content.SharedPreferences;
+import android.os.Debug;
 import android.os.Looper;
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
@@ -24,6 +24,7 @@
 import org.acra.file.ReportLocator;
 import org.acra.prefs.SharedPreferencesFactory;
 import org.acra.sender.SenderServiceStarter;
+import org.acra.util.ProcessFinisher;
 import org.acra.util.ToastSender;
 
 import java.io.File;
@@ -40,18 +41,16 @@
  */
 public final class ReportExecutor {
 
-    private static final int THREAD_SLEEP_INTERVAL_MILLIS = 100;
-
     private final Context context;
     private final ACRAConfiguration config;
     private final CrashReportDataFactory crashReportDataFactory;
-    private final LastActivityManager lastActivityManager;
 
     // A reference to the system's previous default UncaughtExceptionHandler
     // kept in order to execute the default exception handling after sending the report.
     private final Thread.UncaughtExceptionHandler defaultExceptionHandler;
 
     private final ReportPrimer reportPrimer;
+    private final ProcessFinisher processFinisher;
 
     private boolean enabled = false;
 
@@ -60,14 +59,15 @@
      */
     private static int mNotificationCounter = 0;
 
-    public ReportExecutor(@NonNull Context context,@NonNull ACRAConfiguration config,@NonNull CrashReportDataFactory crashReportDataFactory,
-                          @NonNull LastActivityManager lastActivityManager,@Nullable Thread.UncaughtExceptionHandler defaultExceptionHandler,@NonNull ReportPrimer reportPrimer) {
+    public ReportExecutor(@NonNull Context context, @NonNull ACRAConfiguration config,
+                          @NonNull CrashReportDataFactory crashReportDataFactory, @Nullable Thread.UncaughtExceptionHandler defaultExceptionHandler,
+                          @NonNull ReportPrimer reportPrimer, @NonNull ProcessFinisher processFinisher) {
         this.context = context;
         this.config = config;
         this.crashReportDataFactory = crashReportDataFactory;
-        this.lastActivityManager = lastActivityManager;
         this.defaultExceptionHandler = defaultExceptionHandler;
         this.reportPrimer = reportPrimer;
+        this.processFinisher = processFinisher;
     }
 
     /**
@@ -128,7 +128,7 @@ public void execute(@NonNull final ReportBuilder reportBuilder) {
         final ReportingInteractionMode reportingInteractionMode;
         if (!reportBuilder.isSendSilently()) {
             // No interaction mode defined in the ReportBuilder, we assume it has been set during ACRA.initACRA()
-            reportingInteractionMode = config.mode();
+            reportingInteractionMode = config.reportingInteractionMode();
         } else {
             reportingInteractionMode = ReportingInteractionMode.SILENT;
 
@@ -136,7 +136,7 @@ public void execute(@NonNull final ReportBuilder reportBuilder) {
             // initialized with a non SILENT mode and this mode is overridden
             // with SILENT, then we have to send only reports which have been
             // explicitly declared as silent via handleSilentException().
-            if (config.mode() != ReportingInteractionMode.SILENT) {
+            if (config.reportingInteractionMode() != ReportingInteractionMode.SILENT) {
                 sendOnlySilentReports = true;
             }
         }
@@ -236,7 +236,23 @@ private void dialogAndEnd(@NonNull ReportBuilder reportBuilder, @NonNull File re
         if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Wait for Toast + worker ended. Kill Application ? " + reportBuilder.isEndApplication());
 
         if (reportBuilder.isEndApplication()) {
-            endApplication(reportBuilder.getUncaughtExceptionThread(), reportBuilder.getException());
+            if(Debug.isDebuggerConnected()){
+                //Killing a process with a debugger attached would kill the whole application, so don't do that.
+                final String warning = "Warning: Acra may behave differently with a debugger attached";
+                new Thread() {
+                    @Override
+                    public void run() {
+                        Looper.prepare();
+                        Toast.makeText(context, warning, Toast.LENGTH_LONG).show();
+                        Looper.loop();
+                    }
+                }.start();
+                ACRA.log.w(LOG_TAG, warning);
+                //do as much cleanup as we can without killing the process
+                processFinisher.finishLastActivity(reportBuilder.getUncaughtExceptionThread());
+            }else {
+                endApplication(reportBuilder.getUncaughtExceptionThread(), reportBuilder.getException());
+            }
         }
     }
 
@@ -252,33 +268,7 @@ private void endApplication(@Nullable Thread uncaughtExceptionThread, Throwable
             if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Handing Exception on to default ExceptionHandler");
             defaultExceptionHandler.uncaughtException(uncaughtExceptionThread, th);
         } else {
-            // If ACRA handles user notifications with a Toast or a Notification
-            // the Force Close dialog is one more notification to the user...
-            // We choose to close the process ourselves using the same actions.
-
-            // Trying to solve https://github.com/ACRA/acra/issues/42#issuecomment-12134144
-            // Determine the current/last Activity that was started and close
-            // it. Activity#finish (and maybe it's parent too).
-            final Activity lastActivity = lastActivityManager.getLastActivity();
-            if (lastActivity != null) {
-                if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Finishing the last Activity prior to killing the Process");
-                lastActivity.runOnUiThread(new Runnable() {
-                    @Override
-                    public void run() {
-                        lastActivity.finish();
-                        if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Finished " + lastActivity.getClass());
-                    }
-                });
-
-                // A crashed activity won't continue its lifecycle. So we only wait if something else crashed
-                if (uncaughtExceptionThread != lastActivity.getMainLooper().getThread()) {
-                    lastActivityManager.waitForActivityStop(100);
-                }
-                lastActivityManager.clearLastActivity();
-            }
-
-            android.os.Process.killProcess(android.os.Process.myPid());
-            System.exit(10);
+            processFinisher.endApplication(uncaughtExceptionThread);
         }
     }
 
diff --git a/src/main/java/org/acra/builder/ReportPrimer.java b/acra/src/main/java/org/acra/builder/ReportPrimer.java
similarity index 100%
rename from src/main/java/org/acra/builder/ReportPrimer.java
rename to acra/src/main/java/org/acra/builder/ReportPrimer.java
diff --git a/src/main/java/org/acra/collections/BoundedLinkedList.java b/acra/src/main/java/org/acra/collections/BoundedLinkedList.java
similarity index 100%
rename from src/main/java/org/acra/collections/BoundedLinkedList.java
rename to acra/src/main/java/org/acra/collections/BoundedLinkedList.java
diff --git a/src/main/java/org/acra/collections/ImmutableList.java b/acra/src/main/java/org/acra/collections/ImmutableList.java
similarity index 100%
rename from src/main/java/org/acra/collections/ImmutableList.java
rename to acra/src/main/java/org/acra/collections/ImmutableList.java
diff --git a/src/main/java/org/acra/collections/ImmutableMap.java b/acra/src/main/java/org/acra/collections/ImmutableMap.java
similarity index 100%
rename from src/main/java/org/acra/collections/ImmutableMap.java
rename to acra/src/main/java/org/acra/collections/ImmutableMap.java
diff --git a/src/main/java/org/acra/collections/ImmutableSet.java b/acra/src/main/java/org/acra/collections/ImmutableSet.java
similarity index 92%
rename from src/main/java/org/acra/collections/ImmutableSet.java
rename to acra/src/main/java/org/acra/collections/ImmutableSet.java
index f2e9b13e..e2781a8e 100644
--- a/src/main/java/org/acra/collections/ImmutableSet.java
+++ b/acra/src/main/java/org/acra/collections/ImmutableSet.java
@@ -20,12 +20,12 @@
 import java.io.Serializable;
 import java.util.Arrays;
 import java.util.Collection;
-import java.util.HashSet;
 import java.util.Iterator;
+import java.util.LinkedHashSet;
 import java.util.Set;
 
 /**
- * Naive (not optimized) implementation of an Immutable Set
+ * Naive (not optimized) implementation of an Immutable Set with reliable, user-specified iteration order.
  *
  * @author F43nd1r
  * @since 4.9.0
@@ -39,7 +39,7 @@ public ImmutableSet(E... elements) {
     }
 
     public ImmutableSet(Collection<E> collection) {
-        this.mSet = new HashSet<E>(collection);
+        this.mSet = new LinkedHashSet<E>(collection);
     }
 
     @Override
@@ -115,7 +115,7 @@ public int size() {
         private final Set<E> mSet;
 
         public Builder() {
-            mSet = new HashSet<E>();
+            mSet = new LinkedHashSet<E>();
         }
 
         public void add(E element) {
diff --git a/src/main/java/org/acra/collections/UnmodifiableIteratorWrapper.java b/acra/src/main/java/org/acra/collections/UnmodifiableIteratorWrapper.java
similarity index 100%
rename from src/main/java/org/acra/collections/UnmodifiableIteratorWrapper.java
rename to acra/src/main/java/org/acra/collections/UnmodifiableIteratorWrapper.java
diff --git a/src/main/java/org/acra/collections/UnmodifiableListIteratorWrapper.java b/acra/src/main/java/org/acra/collections/UnmodifiableListIteratorWrapper.java
similarity index 100%
rename from src/main/java/org/acra/collections/UnmodifiableListIteratorWrapper.java
rename to acra/src/main/java/org/acra/collections/UnmodifiableListIteratorWrapper.java
diff --git a/acra/src/main/java/org/acra/collector/Collector.java b/acra/src/main/java/org/acra/collector/Collector.java
new file mode 100644
index 00000000..7de6c49c
--- /dev/null
+++ b/acra/src/main/java/org/acra/collector/Collector.java
@@ -0,0 +1,77 @@
+/*
+ *  Copyright 2016
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.acra.collector;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Size;
+
+import org.acra.ReportField;
+import org.acra.builder.ReportBuilder;
+import org.acra.model.Element;
+
+import java.util.Set;
+
+/**
+ * Represents a collector.
+ * Maintains information on which fields can be collected by this collector.
+ * Validates constraints in which a field should (not) be collected.
+ *
+ * @author F43nd1r
+ * @since 4.9.1
+ */
+abstract class Collector {
+    private final ReportField[] reportFields;
+
+    /**
+     * create a new Collector that is able to collect these reportFields
+     * (Note: @Size is currently not working for varargs, it is still here as a hint to developers)
+     *
+     * @param reportFields the supported reportFields
+     */
+    Collector(@Size(min = 1) @NonNull ReportField... reportFields) {
+        this.reportFields = reportFields;
+    }
+
+    /**
+     * @return all fields this collector can collect
+     */
+    @NonNull
+    final ReportField[] canCollect() {
+        return reportFields;
+    }
+
+    /**
+     * this should check if the set contains the field, but may add additional checks like permissions etc.
+     *
+     * @param crashReportFields configured fields
+     * @param collect           the filed to collect
+     * @param reportBuilder     the current reportBuilder
+     * @return if this field should be collected now
+     */
+    boolean shouldCollect(Set<ReportField> crashReportFields, ReportField collect, ReportBuilder reportBuilder) {
+        return crashReportFields.contains(collect);
+    }
+
+    /**
+     * will only be called if shouldCollect returned true for this ReportField
+     *
+     * @param reportField   the ReportField to collect
+     * @param reportBuilder the current reportBuilder
+     * @return Element of what was collected
+     */
+    @NonNull
+    abstract Element collect(ReportField reportField, ReportBuilder reportBuilder);
+}
diff --git a/src/main/java/org/acra/collector/ConfigurationCollector.java b/acra/src/main/java/org/acra/collector/ConfigurationCollector.java
similarity index 65%
rename from src/main/java/org/acra/collector/ConfigurationCollector.java
rename to acra/src/main/java/org/acra/collector/ConfigurationCollector.java
index 60f73126..ee5c0385 100644
--- a/src/main/java/org/acra/collector/ConfigurationCollector.java
+++ b/acra/src/main/java/org/acra/collector/ConfigurationCollector.java
@@ -1,238 +1,260 @@
-/*
- *  Copyright 2010 Emmanuel Astier & Kevin Gaudin
- *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-package org.acra.collector;
-
-import android.content.Context;
-import android.content.res.Configuration;
-import android.support.annotation.NonNull;
-import android.util.SparseArray;
-
-import org.acra.ACRA;
-
-import java.lang.reflect.Field;
-import java.lang.reflect.Modifier;
-import java.util.HashMap;
-import java.util.Map;
-
-import static org.acra.ACRA.LOG_TAG;
-
-/**
- * Inspects a {@link Configuration} object through reflection API in order to
- * generate a human readable String with values replaced with their constants
- * names. The {@link Configuration#toString()} method was not enough as values
- * like 0, 1, 2 or 3 don't look readable to me. Using reflection API allows to
- * retrieve hidden fields and can make us hope to be compatible with all Android
- * API levels, even those which are not published yet.
- * 
- * @author Kevin Gaudin
- * 
- */
-public final class ConfigurationCollector {
-
-    private static final String SUFFIX_MASK = "_MASK";
-    private static final String FIELD_SCREENLAYOUT = "screenLayout";
-    private static final String FIELD_UIMODE = "uiMode";
-    private static final String FIELD_MNC = "mnc";
-    private static final String FIELD_MCC = "mcc";
-    private static final String PREFIX_UI_MODE = "UI_MODE_";
-    private static final String PREFIX_TOUCHSCREEN = "TOUCHSCREEN_";
-    private static final String PREFIX_SCREENLAYOUT = "SCREENLAYOUT_";
-    private static final String PREFIX_ORIENTATION = "ORIENTATION_";
-    private static final String PREFIX_NAVIGATIONHIDDEN = "NAVIGATIONHIDDEN_";
-    private static final String PREFIX_NAVIGATION = "NAVIGATION_";
-    private static final String PREFIX_KEYBOARDHIDDEN = "KEYBOARDHIDDEN_";
-    private static final String PREFIX_KEYBOARD = "KEYBOARD_";
-    private static final String PREFIX_HARDKEYBOARDHIDDEN = "HARDKEYBOARDHIDDEN_";
-
-    private final Map<String, SparseArray<String>> mValueArrays = new HashMap<String, SparseArray<String>>();
-
-    private ConfigurationCollector() {
-
-        final SparseArray<String> hardKeyboardHiddenValues = new SparseArray<String>();
-        final SparseArray<String> keyboardValues = new SparseArray<String>();
-        final SparseArray<String> keyboardHiddenValues = new SparseArray<String>();
-        final SparseArray<String> navigationValues = new SparseArray<String>();
-        final SparseArray<String> navigationHiddenValues = new SparseArray<String>();
-        final SparseArray<String> orientationValues = new SparseArray<String>();
-        final SparseArray<String> screenLayoutValues = new SparseArray<String>();
-        final SparseArray<String> touchScreenValues = new SparseArray<String>();
-        final SparseArray<String> uiModeValues = new SparseArray<String>();
-
-        for (final Field f : Configuration.class.getFields()) {
-            if (Modifier.isStatic(f.getModifiers()) && Modifier.isFinal(f.getModifiers())) {
-                final String fieldName = f.getName();
-                try {
-                    if (fieldName.startsWith(PREFIX_HARDKEYBOARDHIDDEN)) {
-                        hardKeyboardHiddenValues.put(f.getInt(null), fieldName);
-                    } else if (fieldName.startsWith(PREFIX_KEYBOARD)) {
-                        keyboardValues.put(f.getInt(null), fieldName);
-                    } else if (fieldName.startsWith(PREFIX_KEYBOARDHIDDEN)) {
-                        keyboardHiddenValues.put(f.getInt(null), fieldName);
-                    } else if (fieldName.startsWith(PREFIX_NAVIGATION)) {
-                        navigationValues.put(f.getInt(null), fieldName);
-                    } else if (fieldName.startsWith(PREFIX_NAVIGATIONHIDDEN)) {
-                        navigationHiddenValues.put(f.getInt(null), fieldName);
-                    } else if (fieldName.startsWith(PREFIX_ORIENTATION)) {
-                        orientationValues.put(f.getInt(null), fieldName);
-                    } else if (fieldName.startsWith(PREFIX_SCREENLAYOUT)) {
-                        screenLayoutValues.put(f.getInt(null), fieldName);
-                    } else if (fieldName.startsWith(PREFIX_TOUCHSCREEN)) {
-                        touchScreenValues.put(f.getInt(null), fieldName);
-                    } else if (fieldName.startsWith(PREFIX_UI_MODE)) {
-                        uiModeValues.put(f.getInt(null), fieldName);
-                    }
-                } catch (@NonNull IllegalArgumentException e) {
-                    ACRA.log.w(LOG_TAG, "Error while inspecting device configuration: ", e);
-                } catch (@NonNull IllegalAccessException e) {
-                    ACRA.log.w(LOG_TAG, "Error while inspecting device configuration: ", e);
-                }
-            }
-        }
-
-        mValueArrays.put(PREFIX_HARDKEYBOARDHIDDEN, hardKeyboardHiddenValues);
-        mValueArrays.put(PREFIX_KEYBOARD, keyboardValues);
-        mValueArrays.put(PREFIX_KEYBOARDHIDDEN, keyboardHiddenValues);
-        mValueArrays.put(PREFIX_NAVIGATION, navigationValues);
-        mValueArrays.put(PREFIX_NAVIGATIONHIDDEN, navigationHiddenValues);
-        mValueArrays.put(PREFIX_ORIENTATION, orientationValues);
-        mValueArrays.put(PREFIX_SCREENLAYOUT, screenLayoutValues);
-        mValueArrays.put(PREFIX_TOUCHSCREEN, touchScreenValues);
-        mValueArrays.put(PREFIX_UI_MODE, uiModeValues);
-    }
-
-    /**
-     * Use this method to generate a human readable String listing all values
-     * from the provided Configuration instance.
-     * 
-     * @param conf
-     *            The Configuration to be described.
-     * @return A String describing all the fields of the given Configuration,
-     *         with values replaced by constant names.
-     */
-    @NonNull
-    private String toString(@NonNull Configuration conf) {
-        final StringBuilder result = new StringBuilder();
-        for (final Field f : conf.getClass().getFields()) {
-            try {
-                if (!Modifier.isStatic(f.getModifiers())) {
-                    final String fieldName = f.getName();
-                    result.append(fieldName).append('=');
-                    if (f.getType().equals(int.class)) {
-                        result.append(getFieldValueName(conf, f));
-                    } else if(f.get(conf) != null){
-                        result.append(f.get(conf).toString());
-                    }
-                    result.append('\n');
-                }
-            } catch (@NonNull IllegalArgumentException e) {
-                ACRA.log.e(LOG_TAG, "Error while inspecting device configuration: ", e);
-            } catch (@NonNull IllegalAccessException e) {
-                ACRA.log.e(LOG_TAG, "Error while inspecting device configuration: ", e);
-            }
-        }
-        return result.toString();
-    }
-
-    /**
-     * Retrieve the name of the constant defined in the {@link Configuration}
-     * class which defines the value of a field in a {@link Configuration}
-     * instance.
-     * 
-     * @param conf
-     *            The instance of {@link Configuration} where the value is
-     *            stored.
-     * @param f
-     *            The {@link Field} to be inspected in the {@link Configuration}
-     *            instance.
-     * @return The value of the field f in instance conf translated to its
-     *         constant name.
-     * @throws IllegalAccessException if the supplied field is inaccessible.
-     */
-    private String getFieldValueName(@NonNull Configuration conf, @NonNull Field f) throws IllegalAccessException {
-        final String fieldName = f.getName();
-        if (fieldName.equals(FIELD_MCC) || fieldName.equals(FIELD_MNC)) {
-            return Integer.toString(f.getInt(conf));
-        } else if (fieldName.equals(FIELD_UIMODE)) {
-            return activeFlags(mValueArrays.get(PREFIX_UI_MODE), f.getInt(conf));
-        } else if (fieldName.equals(FIELD_SCREENLAYOUT)) {
-            return activeFlags(mValueArrays.get(PREFIX_SCREENLAYOUT), f.getInt(conf));
-        } else {
-            final SparseArray<String> values = mValueArrays.get(fieldName.toUpperCase() + '_');
-            if (values == null) {
-                // Unknown field, return the raw int as String
-                return Integer.toString(f.getInt(conf));
-            }
-
-            final String value = values.get(f.getInt(conf));
-            if (value == null) {
-                // Unknown value, return the raw int as String
-                return Integer.toString(f.getInt(conf));
-            }
-            return value;
-        }
-    }
-
-    /**
-     * Some fields contain multiple value types which can be isolated by
-     * applying a bitmask. That method returns the concatenation of active
-     * values.
-     * 
-     * @param valueNames
-     *            The array containing the different values and names for this
-     *            field. Must contain mask values too.
-     * @param bitfield
-     *            The bitfield to inspect.
-     * @return The names of the different values contained in the bitfield,
-     *         separated by '+'.
-     */
-    @NonNull
-    private static String activeFlags(@NonNull SparseArray<String> valueNames, int bitfield) {
-        final StringBuilder result = new StringBuilder();
-
-        // Look for masks, apply it an retrieve the masked value
-        for (int i = 0; i < valueNames.size(); i++) {
-            final int maskValue = valueNames.keyAt(i);
-            if (valueNames.get(maskValue).endsWith(SUFFIX_MASK)) {
-                final int value = bitfield & maskValue;
-                if (value > 0) {
-                    if (result.length() > 0) {
-                        result.append('+');
-                    }
-                    result.append(valueNames.get(value));
-                }
-            }
-        }
-        return result.toString();
-    }
-    
-    /**
-     * Returns the current Configuration for this application.
-     *
-     * @param context   Context for the application being reported.
-     * @return A String representation of the current configuration for the application.
-     */
-    @NonNull
-    public static String collectConfiguration(@NonNull Context context) {
-        try {
-            final ConfigurationCollector collector = new ConfigurationCollector();
-            final Configuration crashConf = context.getResources().getConfiguration();
-            return collector.toString(crashConf);
-        } catch (RuntimeException e) {
-            ACRA.log.w(LOG_TAG, "Couldn't retrieve CrashConfiguration for : " + context.getPackageName(), e);
-            return "Couldn't retrieve crash config";
-        }
-    }
-}
+/*
+ *  Copyright 2010 Emmanuel Astier & Kevin Gaudin
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.acra.collector;
+
+import android.content.Context;
+import android.content.res.Configuration;
+import android.support.annotation.NonNull;
+import android.util.SparseArray;
+
+import org.acra.ACRA;
+import org.acra.ACRAConstants;
+import org.acra.ReportField;
+import org.acra.builder.ReportBuilder;
+import org.acra.model.ComplexElement;
+import org.acra.model.Element;
+import org.json.JSONException;
+
+import java.lang.reflect.Field;
+import java.lang.reflect.Modifier;
+import java.util.HashMap;
+import java.util.Map;
+
+import static org.acra.ACRA.LOG_TAG;
+
+/**
+ * Inspects a {@link Configuration} object through reflection API in order to
+ * generate a human readable String with values replaced with their constants
+ * names. The {@link Configuration#toString()} method was not enough as values
+ * like 0, 1, 2 or 3 aren't readable. Using reflection API allows to
+ * retrieve hidden fields and can make us hope to be compatible with all Android
+ * API levels, even those which are not published yet.
+ *
+ * @author Kevin Gaudin and F43nd1r
+ */
+public final class ConfigurationCollector extends Collector {
+
+    private static final String SUFFIX_MASK = "_MASK";
+    private static final String FIELD_SCREENLAYOUT = "screenLayout";
+    private static final String FIELD_UIMODE = "uiMode";
+    private static final String FIELD_MNC = "mnc";
+    private static final String FIELD_MCC = "mcc";
+    private static final String PREFIX_UI_MODE = "UI_MODE_";
+    private static final String PREFIX_TOUCHSCREEN = "TOUCHSCREEN_";
+    private static final String PREFIX_SCREENLAYOUT = "SCREENLAYOUT_";
+    private static final String PREFIX_ORIENTATION = "ORIENTATION_";
+    private static final String PREFIX_NAVIGATIONHIDDEN = "NAVIGATIONHIDDEN_";
+    private static final String PREFIX_NAVIGATION = "NAVIGATION_";
+    private static final String PREFIX_KEYBOARDHIDDEN = "KEYBOARDHIDDEN_";
+    private static final String PREFIX_KEYBOARD = "KEYBOARD_";
+    private static final String PREFIX_HARDKEYBOARDHIDDEN = "HARDKEYBOARDHIDDEN_";
+
+    private final Context context;
+    private final Element initialConfiguration;
+
+    public ConfigurationCollector(@NonNull Context context, @NonNull Element initialConfiguration) {
+        super(ReportField.INITIAL_CONFIGURATION, ReportField.CRASH_CONFIGURATION);
+        this.context = context;
+        this.initialConfiguration = initialConfiguration;
+    }
+
+    @NonNull
+    @Override
+    Element collect(ReportField reportField, ReportBuilder reportBuilder) {
+        switch (reportField) {
+            case INITIAL_CONFIGURATION:
+                return initialConfiguration;
+            case CRASH_CONFIGURATION:
+                return collectConfiguration(context);
+            default:
+                throw new IllegalArgumentException();
+        }
+    }
+
+    /**
+     * Creates an Element listing all values human readable
+     * from the provided Configuration instance.
+     *
+     * @param conf The Configuration to be described.
+     * @return An Element describing all the fields of the given Configuration,
+     * with values replaced by constant names.
+     */
+    @NonNull
+    private static Element configToElement(@NonNull Configuration conf) {
+        final ComplexElement result = new ComplexElement();
+        Map<String, SparseArray<String>> valueArrays = getValueArrays();
+        for (final Field f : conf.getClass().getFields()) {
+            try {
+                if (!Modifier.isStatic(f.getModifiers())) {
+                    final String fieldName = f.getName();
+                    try {
+                        if (f.getType().equals(int.class)) {
+                            result.put(fieldName, getFieldValueName(valueArrays, conf, f));
+                        } else if (f.get(conf) != null) {
+                            result.put(fieldName, f.get(conf));
+                        }
+                    } catch (JSONException e) {
+                        ACRA.log.w(LOG_TAG, "Could not collect configuration field " + fieldName, e);
+                    }
+                }
+            } catch (@NonNull IllegalArgumentException e) {
+                ACRA.log.e(LOG_TAG, "Error while inspecting device configuration: ", e);
+            } catch (@NonNull IllegalAccessException e) {
+                ACRA.log.e(LOG_TAG, "Error while inspecting device configuration: ", e);
+            }
+        }
+        return result;
+    }
+
+    private static Map<String, SparseArray<String>> getValueArrays() {
+        Map<String, SparseArray<String>> valueArrays = new HashMap<String, SparseArray<String>>();
+        final SparseArray<String> hardKeyboardHiddenValues = new SparseArray<String>();
+        final SparseArray<String> keyboardValues = new SparseArray<String>();
+        final SparseArray<String> keyboardHiddenValues = new SparseArray<String>();
+        final SparseArray<String> navigationValues = new SparseArray<String>();
+        final SparseArray<String> navigationHiddenValues = new SparseArray<String>();
+        final SparseArray<String> orientationValues = new SparseArray<String>();
+        final SparseArray<String> screenLayoutValues = new SparseArray<String>();
+        final SparseArray<String> touchScreenValues = new SparseArray<String>();
+        final SparseArray<String> uiModeValues = new SparseArray<String>();
+
+        for (final Field f : Configuration.class.getFields()) {
+            if (Modifier.isStatic(f.getModifiers()) && Modifier.isFinal(f.getModifiers())) {
+                final String fieldName = f.getName();
+                try {
+                    if (fieldName.startsWith(PREFIX_HARDKEYBOARDHIDDEN)) {
+                        hardKeyboardHiddenValues.put(f.getInt(null), fieldName);
+                    } else if (fieldName.startsWith(PREFIX_KEYBOARD)) {
+                        keyboardValues.put(f.getInt(null), fieldName);
+                    } else if (fieldName.startsWith(PREFIX_KEYBOARDHIDDEN)) {
+                        keyboardHiddenValues.put(f.getInt(null), fieldName);
+                    } else if (fieldName.startsWith(PREFIX_NAVIGATION)) {
+                        navigationValues.put(f.getInt(null), fieldName);
+                    } else if (fieldName.startsWith(PREFIX_NAVIGATIONHIDDEN)) {
+                        navigationHiddenValues.put(f.getInt(null), fieldName);
+                    } else if (fieldName.startsWith(PREFIX_ORIENTATION)) {
+                        orientationValues.put(f.getInt(null), fieldName);
+                    } else if (fieldName.startsWith(PREFIX_SCREENLAYOUT)) {
+                        screenLayoutValues.put(f.getInt(null), fieldName);
+                    } else if (fieldName.startsWith(PREFIX_TOUCHSCREEN)) {
+                        touchScreenValues.put(f.getInt(null), fieldName);
+                    } else if (fieldName.startsWith(PREFIX_UI_MODE)) {
+                        uiModeValues.put(f.getInt(null), fieldName);
+                    }
+                } catch (@NonNull IllegalArgumentException e) {
+                    ACRA.log.w(LOG_TAG, "Error while inspecting device configuration: ", e);
+                } catch (@NonNull IllegalAccessException e) {
+                    ACRA.log.w(LOG_TAG, "Error while inspecting device configuration: ", e);
+                }
+            }
+        }
+
+        valueArrays.put(PREFIX_HARDKEYBOARDHIDDEN, hardKeyboardHiddenValues);
+        valueArrays.put(PREFIX_KEYBOARD, keyboardValues);
+        valueArrays.put(PREFIX_KEYBOARDHIDDEN, keyboardHiddenValues);
+        valueArrays.put(PREFIX_NAVIGATION, navigationValues);
+        valueArrays.put(PREFIX_NAVIGATIONHIDDEN, navigationHiddenValues);
+        valueArrays.put(PREFIX_ORIENTATION, orientationValues);
+        valueArrays.put(PREFIX_SCREENLAYOUT, screenLayoutValues);
+        valueArrays.put(PREFIX_TOUCHSCREEN, touchScreenValues);
+        valueArrays.put(PREFIX_UI_MODE, uiModeValues);
+        return valueArrays;
+    }
+
+    /**
+     * Retrieve the name of the constant defined in the {@link Configuration}
+     * class which defines the value of a field in a {@link Configuration}
+     * instance.
+     *
+     * @param conf The instance of {@link Configuration} where the value is
+     *             stored.
+     * @param f    The {@link Field} to be inspected in the {@link Configuration}
+     *             instance.
+     * @return The value of the field f in instance conf translated to its
+     * constant name.
+     * @throws IllegalAccessException if the supplied field is inaccessible.
+     */
+    private static Object getFieldValueName(Map<String, SparseArray<String>> valueArrays, @NonNull Configuration conf, @NonNull Field f) throws IllegalAccessException {
+        final String fieldName = f.getName();
+        if (fieldName.equals(FIELD_MCC) || fieldName.equals(FIELD_MNC)) {
+            return f.getInt(conf);
+        } else if (fieldName.equals(FIELD_UIMODE)) {
+            return activeFlags(valueArrays.get(PREFIX_UI_MODE), f.getInt(conf));
+        } else if (fieldName.equals(FIELD_SCREENLAYOUT)) {
+            return activeFlags(valueArrays.get(PREFIX_SCREENLAYOUT), f.getInt(conf));
+        } else {
+            final SparseArray<String> values = valueArrays.get(fieldName.toUpperCase() + '_');
+            if (values == null) {
+                // Unknown field, return the raw int as String
+                return f.getInt(conf);
+            }
+
+            final String value = values.get(f.getInt(conf));
+            if (value == null) {
+                // Unknown value, return the raw int as String
+                return f.getInt(conf);
+            }
+            return value;
+        }
+    }
+
+    /**
+     * Some fields contain multiple value types which can be isolated by
+     * applying a bitmask. That method returns the concatenation of active
+     * values.
+     *
+     * @param valueNames The array containing the different values and names for this
+     *                   field. Must contain mask values too.
+     * @param bitfield   The bitfield to inspect.
+     * @return The names of the different values contained in the bitfield,
+     * separated by '+'.
+     */
+    @NonNull
+    private static String activeFlags(@NonNull SparseArray<String> valueNames, int bitfield) {
+        final StringBuilder result = new StringBuilder();
+
+        // Look for masks, apply it an retrieve the masked value
+        for (int i = 0; i < valueNames.size(); i++) {
+            final int maskValue = valueNames.keyAt(i);
+            if (valueNames.get(maskValue).endsWith(SUFFIX_MASK)) {
+                final int value = bitfield & maskValue;
+                if (value > 0) {
+                    if (result.length() > 0) {
+                        result.append('+');
+                    }
+                    result.append(valueNames.get(value));
+                }
+            }
+        }
+        return result.toString();
+    }
+
+    /**
+     * Returns the current Configuration for this application.
+     *
+     * @param context Context for the application being reported.
+     * @return A String representation of the current configuration for the application.
+     */
+    @NonNull
+    public static Element collectConfiguration(@NonNull Context context) {
+        try {
+            return configToElement(context.getResources().getConfiguration());
+        } catch (RuntimeException e) {
+            ACRA.log.w(LOG_TAG, "Couldn't retrieve CrashConfiguration for : " + context.getPackageName(), e);
+            return ACRAConstants.NOT_AVAILABLE;
+        }
+    }
+}
diff --git a/src/main/java/org/acra/collector/CrashReportData.java b/acra/src/main/java/org/acra/collector/CrashReportData.java
similarity index 68%
rename from src/main/java/org/acra/collector/CrashReportData.java
rename to acra/src/main/java/org/acra/collector/CrashReportData.java
index 3564932e..73ab4f60 100644
--- a/src/main/java/org/acra/collector/CrashReportData.java
+++ b/acra/src/main/java/org/acra/collector/CrashReportData.java
@@ -1,61 +1,77 @@
-/*
- *  Copyright 2012 Kevin Gaudin
- *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-
-package org.acra.collector;
-
-import android.support.annotation.NonNull;
-
-import org.acra.ReportField;
-import org.acra.util.JSONReportBuilder;
-import org.acra.util.JSONReportBuilder.JSONReportException;
-import org.json.JSONObject;
-
-import java.util.EnumMap;
-import java.util.Properties;
-
-/**
- * Stores a crash reports data with {@link org.acra.ReportField} enum values as keys.
- *
- * This is basically the source of {@link Properties} adapted to extend an
- * EnumMap instead of Hashtable and with a few tweaks to avoid losing crazy
- * amounts of android time in the generation of a date comment when storing to file.
- */
-public final class CrashReportData extends EnumMap<ReportField, String> {
-
-    private static final long serialVersionUID = 4112578634029874840L;
-
-    /**
-     * Constructs a new {@code Properties} object.
-     */
-    public CrashReportData() {
-        super(ReportField.class);
-    }
-
-    /**
-     * Returns the property with the specified name.
-     * 
-     * @param key the name of the property to find.
-     * @return the named property value, or {@code null} if it can't be found.
-     */
-    public String getProperty(@NonNull ReportField key) {
-        return super.get(key);
-    }
-
-    @NonNull
-    public JSONObject toJSON() throws JSONReportException {
-        return JSONReportBuilder.buildJSONReport(this);
-    }
-}
+/*
+ *  Copyright 2012 Kevin Gaudin
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+
+package org.acra.collector;
+
+import android.support.annotation.NonNull;
+
+import org.acra.ReportField;
+import org.acra.model.BooleanElement;
+import org.acra.model.Element;
+import org.acra.model.NumberElement;
+import org.acra.model.StringElement;
+import org.acra.util.JsonUtils;
+import org.json.JSONObject;
+
+import java.util.EnumMap;
+import java.util.Properties;
+
+/**
+ * Stores a crash reports data with {@link org.acra.ReportField} enum values as keys.
+ * <p>
+ * This is basically the source of {@link Properties} adapted to extend an
+ * EnumMap instead of Hashtable and with a few tweaks to avoid losing crazy
+ * amounts of android time in the generation of a date comment when storing to file.
+ */
+public final class CrashReportData extends EnumMap<ReportField, Element> {
+
+    private static final long serialVersionUID = 5002578634500874842L;
+
+    /**
+     * Constructs a new {@code Properties} object.
+     */
+    public CrashReportData() {
+        super(ReportField.class);
+    }
+
+    /**
+     * Returns the property with the specified name.
+     *
+     * @param key the name of the property to find.
+     * @return the named property value, or {@code null} if it can't be found.
+     */
+    public String getProperty(@NonNull ReportField key) {
+        return super.get(key).toString();
+    }
+
+    public void putString(@NonNull ReportField key, String value) {
+        put(key, new StringElement(value));
+    }
+
+    public void putNumber(@NonNull ReportField key, Number value) {
+        put(key, new NumberElement(value));
+    }
+
+    public void putBoolean(@NonNull ReportField key, boolean value) {
+        put(key, new BooleanElement(value));
+    }
+
+    @NonNull
+    public JSONObject toJSON() {
+        return JsonUtils.toJson(this);
+    }
+
+}
diff --git a/acra/src/main/java/org/acra/collector/CrashReportDataFactory.java b/acra/src/main/java/org/acra/collector/CrashReportDataFactory.java
new file mode 100644
index 00000000..7b95ab65
--- /dev/null
+++ b/acra/src/main/java/org/acra/collector/CrashReportDataFactory.java
@@ -0,0 +1,173 @@
+/*
+ *  Copyright 2012 Kevin Gaudin
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+
+package org.acra.collector;
+
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.support.annotation.NonNull;
+
+import org.acra.ACRA;
+import org.acra.ReportField;
+import org.acra.builder.ReportBuilder;
+import org.acra.config.ACRAConfiguration;
+import org.acra.model.Element;
+import org.acra.util.PackageManagerWrapper;
+
+import java.util.ArrayList;
+import java.util.Calendar;
+import java.util.LinkedHashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+import static org.acra.ACRA.LOG_TAG;
+
+/**
+ * Responsible for creating the CrashReportData for an Exception.
+ * <p>
+ * Also responsible for holding the custom data to send with each report.
+ * </p>
+ *
+ * @author William Ferguson
+ * @since 4.3.0
+ */
+public final class CrashReportDataFactory {
+
+    private final Context context;
+    private final ACRAConfiguration config;
+    private final SharedPreferences prefs;
+    private final Map<String, String> customParameters = new LinkedHashMap<String, String>();
+    private final Calendar appStartDate;
+    private final Element initialConfiguration;
+
+    public CrashReportDataFactory(@NonNull Context context, @NonNull ACRAConfiguration config,
+                                  @NonNull SharedPreferences prefs, @NonNull Calendar appStartDate,
+                                  @NonNull Element initialConfiguration) {
+        this.context = context;
+        this.config = config;
+        this.prefs = prefs;
+        this.appStartDate = appStartDate;
+        this.initialConfiguration = initialConfiguration;
+    }
+
+    /**
+     * <p>
+     * Adds a custom key and value to be reported with the generated
+     * CashReportData.
+     * </p>
+     * <p>
+     * The key/value pairs will be stored in the "custom" column, as a text
+     * containing one 'key = value' pair on each line.
+     * </p>
+     *
+     * @param key   A key for your custom data.
+     * @param value The value associated to your key.
+     * @return The previous value for this key if there was one, or null.
+     */
+    public String putCustomData(@NonNull String key, String value) {
+        return customParameters.put(key, value);
+    }
+
+    /**
+     * Removes a key/value pair from the custom data field.
+     *
+     * @param key The key of the data to be removed.
+     * @return The value for this key before removal.
+     */
+    public String removeCustomData(@NonNull String key) {
+        return customParameters.remove(key);
+    }
+
+    /**
+     * Removes all key/value pairs from the custom data field.
+     */
+    public void clearCustomData() {
+        customParameters.clear();
+    }
+
+    /**
+     * Gets the current value for a key in the custom data field.
+     *
+     * @param key The key of the data to be retrieved.
+     * @return The value for this key.
+     */
+    public String getCustomData(@NonNull String key) {
+        return customParameters.get(key);
+    }
+
+    /**
+     * Collects crash data.
+     *
+     * @param builder ReportBuilder for whom to crete the crash report.
+     * @return CrashReportData identifying the current crash.
+     */
+    @NonNull
+    public CrashReportData createCrashData(@NonNull ReportBuilder builder) {
+        final CrashReportData crashReportData = new CrashReportData();
+        try {
+            final Set<ReportField> crashReportFields = config.reportContent();
+            final List<Collector> collectors = getCollectorsOrdered();
+
+            //this will iterate over all collectors in descending order of priority
+            for (Collector collector : collectors) {
+                //catch absolutely everything possible here so no collector obstructs the others
+                try {
+                    for (ReportField reportField : collector.canCollect()) {
+                        try {
+                            if (collector.shouldCollect(crashReportFields, reportField, builder)) {
+                                crashReportData.put(reportField, collector.collect(reportField, builder));
+                            }
+                        } catch (RuntimeException e) {
+                            ACRA.log.e(LOG_TAG, "Error while retrieving " + reportField.name() + " data", e);
+                        }
+                    }
+                } catch (RuntimeException e) {
+                    ACRA.log.e(LOG_TAG, "Error in collector " + collector.getClass().getSimpleName(), e);
+                }
+            }
+
+        } catch (RuntimeException e) {
+            ACRA.log.e(LOG_TAG, "Error while retrieving crash data", e);
+        }
+
+        return crashReportData;
+    }
+
+    private List<Collector> getCollectorsOrdered() {
+        List<Collector> collectors = new ArrayList<Collector>();
+        PackageManagerWrapper pm = new PackageManagerWrapper(context);
+        collectors.add(new LogCatCollector(config, pm));
+        collectors.add(new DropBoxCollector(context, config, pm));
+        collectors.add(new StacktraceCollector());
+        collectors.add(new TimeCollector(appStartDate));
+        collectors.add(new SimpleValuesCollector(context));
+        collectors.add(new ConfigurationCollector(context, initialConfiguration));
+        collectors.add(new MemoryInfoCollector());
+        collectors.add(new ReflectionCollector(context, config));
+        collectors.add(new DisplayManagerCollector(context));
+        collectors.add(new CustomDataCollector(customParameters));
+        collectors.add(new SharedPreferencesCollector(context, config, prefs));
+        collectors.add(new DeviceFeaturesCollector(context));
+        collectors.add(new SettingsCollector(context, config));
+        collectors.add(new PackageManagerCollector(pm));
+        collectors.add(new DeviceIdCollector(context, pm, prefs));
+        collectors.add(new LogFileCollector(context, config));
+        collectors.add(new MediaCodecListCollector());
+        collectors.add(new ThreadCollector());
+        return collectors;
+    }
+}
\ No newline at end of file
diff --git a/acra/src/main/java/org/acra/collector/CustomDataCollector.java b/acra/src/main/java/org/acra/collector/CustomDataCollector.java
new file mode 100644
index 00000000..68bbceec
--- /dev/null
+++ b/acra/src/main/java/org/acra/collector/CustomDataCollector.java
@@ -0,0 +1,63 @@
+/*
+ *  Copyright 2016
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.acra.collector;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import org.acra.ReportField;
+import org.acra.builder.ReportBuilder;
+import org.acra.model.ComplexElement;
+import org.acra.model.Element;
+
+import java.util.HashMap;
+import java.util.Map;
+
+/**
+ * Collects custom data supplied by the user
+ *
+ * @author F43nd1r
+ * @since 4.9.1
+ */
+final class CustomDataCollector extends Collector {
+    private final Map<String, String> customParameters;
+
+    CustomDataCollector(Map<String, String> customParameters){
+        super(ReportField.CUSTOM_DATA);
+        this.customParameters = customParameters;
+    }
+    @NonNull
+    @Override
+    Element collect(ReportField reportField, ReportBuilder reportBuilder) {
+        return createCustomInfoElement(reportBuilder.getCustomData());
+    }
+
+
+    /**
+     * Generates the Element which is posted in the single custom data field
+     *
+     * @return An Element with  key-value-pairs for the supplied custom data.
+     */
+    @NonNull
+    private Element createCustomInfoElement(@Nullable Map<String, String> reportCustomData) {
+        Map<String, String> params = customParameters;
+        if (reportCustomData != null) {
+            params = new HashMap<String, String>(params);
+            params.putAll(reportCustomData);
+        }
+        return new ComplexElement(params);
+    }
+}
diff --git a/src/main/java/org/acra/collector/DeviceFeaturesCollector.java b/acra/src/main/java/org/acra/collector/DeviceFeaturesCollector.java
similarity index 55%
rename from src/main/java/org/acra/collector/DeviceFeaturesCollector.java
rename to acra/src/main/java/org/acra/collector/DeviceFeaturesCollector.java
index 0eaaa72a..0a74e8b1 100644
--- a/src/main/java/org/acra/collector/DeviceFeaturesCollector.java
+++ b/acra/src/main/java/org/acra/collector/DeviceFeaturesCollector.java
@@ -1,59 +1,72 @@
-/*
- *  Copyright 2010 Kevin Gaudin
- *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-package org.acra.collector;
-
-import android.content.Context;
-import android.content.pm.FeatureInfo;
-import android.content.pm.PackageManager;
-import android.support.annotation.NonNull;
-import org.acra.ACRA;
-
-import static org.acra.ACRA.LOG_TAG;
-
-/**
- * Features declared as available on the device.
- * 
- * @author Kevin Gaudin
- * 
- */
-final class DeviceFeaturesCollector {
-    private DeviceFeaturesCollector(){}
-
-    @NonNull
-    public static String getFeatures(@NonNull Context ctx) {
-
-        final StringBuilder result = new StringBuilder();
-        try {
-            final PackageManager pm = ctx.getPackageManager();
-            final FeatureInfo[] features = pm.getSystemAvailableFeatures();
-            for (final FeatureInfo feature : features) {
-                final String featureName = feature.name;
-                if(featureName != null) {
-                    result.append(featureName);
-                } else {
-                    result.append("glEsVersion = ").append(feature.getGlEsVersion());
-                }
-                result.append('\n');
-            }
-        } catch (Throwable e) {
-            ACRA.log.w(LOG_TAG, "Couldn't retrieve DeviceFeatures for " + ctx.getPackageName(), e);
-            result.append("Could not retrieve data: ");
-            result.append(e.getMessage());
-        }
-
-        return result.toString();
-    }
-}
+/*
+ *  Copyright 2010 Kevin Gaudin
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.acra.collector;
+
+import android.content.Context;
+import android.content.pm.FeatureInfo;
+import android.content.pm.PackageManager;
+import android.support.annotation.NonNull;
+
+import org.acra.ACRA;
+import org.acra.ReportField;
+import org.acra.builder.ReportBuilder;
+import org.acra.model.ComplexElement;
+import org.acra.model.Element;
+
+import static org.acra.ACRA.LOG_TAG;
+
+/**
+ * Features declared as available on the device.
+ *
+ * @author Kevin Gaudin & F43nd1r
+ */
+final class DeviceFeaturesCollector extends Collector {
+    private final Context context;
+
+    DeviceFeaturesCollector(Context context) {
+        super(ReportField.DEVICE_FEATURES);
+        this.context = context;
+    }
+
+    /**
+     * collects device features
+     *
+     * @param reportField   the ReportField to collect
+     * @param reportBuilder the current reportBuilder
+     * @return Element of all device feature names
+     */
+    @NonNull
+    @Override
+    Element collect(ReportField reportField, ReportBuilder reportBuilder) {
+        final ComplexElement result = new ComplexElement();
+        try {
+            final PackageManager pm = context.getPackageManager();
+            final FeatureInfo[] features = pm.getSystemAvailableFeatures();
+            for (final FeatureInfo feature : features) {
+                final String featureName = feature.name;
+                if (featureName != null) {
+                    result.put(featureName, true);
+                } else {
+                    result.put("glEsVersion", feature.getGlEsVersion());
+                }
+            }
+        } catch (Throwable e) {
+            ACRA.log.w(LOG_TAG, "Couldn't retrieve DeviceFeatures for " + context.getPackageName(), e);
+        }
+
+        return result;
+    }
+}
diff --git a/acra/src/main/java/org/acra/collector/DeviceIdCollector.java b/acra/src/main/java/org/acra/collector/DeviceIdCollector.java
new file mode 100644
index 00000000..d94229a7
--- /dev/null
+++ b/acra/src/main/java/org/acra/collector/DeviceIdCollector.java
@@ -0,0 +1,85 @@
+/*
+ *  Copyright 2016
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.acra.collector;
+
+import android.Manifest;
+import android.annotation.SuppressLint;
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.telephony.TelephonyManager;
+
+import org.acra.ACRA;
+import org.acra.ACRAConstants;
+import org.acra.ReportField;
+import org.acra.builder.ReportBuilder;
+import org.acra.model.Element;
+import org.acra.model.StringElement;
+import org.acra.util.PackageManagerWrapper;
+
+import java.util.Set;
+
+import static org.acra.ACRA.LOG_TAG;
+
+/**
+ * Collects the device ID
+ *
+ * @author F43nd1r
+ * @since 4.9.1
+ */
+final class DeviceIdCollector extends Collector {
+    private final Context context;
+    private final PackageManagerWrapper pm;
+    private final SharedPreferences prefs;
+
+    DeviceIdCollector(Context context, PackageManagerWrapper pm, SharedPreferences prefs) {
+        super(ReportField.DEVICE_ID);
+        this.context = context;
+        this.pm = pm;
+        this.prefs = prefs;
+    }
+
+    @Override
+    boolean shouldCollect(Set<ReportField> crashReportFields, ReportField collect, ReportBuilder reportBuilder) {
+        return super.shouldCollect(crashReportFields, collect, reportBuilder) && prefs.getBoolean(ACRA.PREF_ENABLE_DEVICE_ID, true)
+                && pm.hasPermission(Manifest.permission.READ_PHONE_STATE);
+    }
+
+    @NonNull
+    @Override
+    Element collect(ReportField reportField, ReportBuilder reportBuilder) {
+        String result = getDeviceId();
+        return result != null ? new StringElement(result) : ACRAConstants.NOT_AVAILABLE;
+    }
+
+    /**
+     * Returns the DeviceId according to the TelephonyManager.
+     *
+     * @return Returns the DeviceId according to the TelephonyManager or null if there is no TelephonyManager.
+     */
+    @SuppressLint("HardwareIds")
+    @Nullable
+    private String getDeviceId() {
+        try {
+            final TelephonyManager tm = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);
+            return tm.getDeviceId();
+        } catch (RuntimeException e) {
+            ACRA.log.w(LOG_TAG, "Couldn't retrieve DeviceId for : " + context.getPackageName(), e);
+            return null;
+        }
+    }
+}
diff --git a/acra/src/main/java/org/acra/collector/DisplayManagerCollector.java b/acra/src/main/java/org/acra/collector/DisplayManagerCollector.java
new file mode 100644
index 00000000..82eed946
--- /dev/null
+++ b/acra/src/main/java/org/acra/collector/DisplayManagerCollector.java
@@ -0,0 +1,234 @@
+/*
+ *  Copyright 2016
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.acra.collector;
+
+import android.content.Context;
+import android.graphics.Point;
+import android.graphics.Rect;
+import android.os.Build;
+import android.support.annotation.NonNull;
+import android.support.v4.hardware.display.DisplayManagerCompat;
+import android.util.DisplayMetrics;
+import android.util.SparseArray;
+import android.view.Display;
+import android.view.Surface;
+
+import org.acra.ACRA;
+import org.acra.ReportField;
+import org.acra.builder.ReportBuilder;
+import org.acra.model.ComplexElement;
+import org.acra.model.Element;
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.lang.reflect.Field;
+import java.util.Arrays;
+
+/**
+ * Collects information about the connected display(s)
+ *
+ * @author (original author unknown) & F43nd1r
+ */
+final class DisplayManagerCollector extends Collector {
+    private final Context context;
+    private final SparseArray<String> flagNames = new SparseArray<String>();
+
+    DisplayManagerCollector(Context context) {
+        super(ReportField.DISPLAY);
+        this.context = context;
+    }
+
+
+    @NonNull
+    @Override
+    Element collect(ReportField reportField, ReportBuilder reportBuilder) {
+        final ComplexElement result = new ComplexElement();
+        for (Display display : DisplayManagerCompat.getInstance(context).getDisplays()) {
+            try {
+                result.put(String.valueOf(display.getDisplayId()), collectDisplayData(display));
+            } catch (JSONException e) {
+                ACRA.log.w(ACRA.LOG_TAG, "Failed to collect data for display " + display.getDisplayId(), e);
+            }
+        }
+
+        return result;
+    }
+
+    @NonNull
+    private JSONObject collectDisplayData(@NonNull Display display) throws JSONException {
+        final DisplayMetrics metrics = new DisplayMetrics();
+        display.getMetrics(metrics);
+
+        final JSONObject result = new JSONObject();
+        collectCurrentSizeRange(display, result);
+        collectFlags(display, result);
+        collectMetrics(display, result);
+        collectRealMetrics(display, result);
+        collectName(display, result);
+        collectRealSize(display, result);
+        collectRectSize(display, result);
+        collectSize(display, result);
+        collectRotation(display, result);
+        collectIsValid(display, result);
+        result.put("orientation", display.getRotation())
+                .put("refreshRate", display.getRefreshRate());
+        //noinspection deprecation
+        result.put("height", display.getHeight())
+                .put("width", display.getWidth())
+                .put("pixelFormat", display.getPixelFormat());
+        return result;
+    }
+
+    private static void collectIsValid(@NonNull Display display, JSONObject container) throws JSONException {
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
+            container.put("isValid", display.isValid());
+        }
+    }
+
+    private static void collectRotation(@NonNull Display display, JSONObject container) throws JSONException {
+        container.put("rotation", rotationToString(display.getRotation()));
+    }
+
+    @NonNull
+    private static String rotationToString(int rotation) {
+        switch (rotation) {
+            case Surface.ROTATION_0:
+                return "ROTATION_0";
+            case Surface.ROTATION_90:
+                return "ROTATION_90";
+            case Surface.ROTATION_180:
+                return "ROTATION_180";
+            case Surface.ROTATION_270:
+                return "ROTATION_270";
+            default:
+                return String.valueOf(rotation);
+        }
+    }
+
+    private static void collectRectSize(@NonNull Display display, JSONObject container) throws JSONException {
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR2) {
+            final Rect size = new Rect();
+            display.getRectSize(size);
+            container.put("rectSize", new JSONArray(Arrays.asList(size.top, size.left, size.width(), size.height())));
+        }
+    }
+
+    private static void collectSize(@NonNull Display display, JSONObject container) throws JSONException {
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR2) {
+            final Point size = new Point();
+            display.getSize(size);
+            container.put("size", new JSONArray(Arrays.asList(size.x, size.y)));
+        }
+    }
+
+    private static void collectRealSize(@NonNull Display display, JSONObject container) throws JSONException {
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
+            final Point size = new Point();
+            display.getRealSize(size);
+            container.put("realSize", new JSONArray(Arrays.asList(size.x, size.y)));
+        }
+    }
+
+    private static void collectCurrentSizeRange(@NonNull Display display, @NonNull JSONObject container) throws JSONException {
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
+            final Point smallest = new Point();
+            final Point largest = new Point();
+            display.getCurrentSizeRange(smallest, largest);
+            JSONObject result = new JSONObject();
+            result.put("smallest", new JSONArray(Arrays.asList(smallest.x, smallest.y)));
+            result.put("largest", new JSONArray(Arrays.asList(largest.x, largest.y)));
+            container.put("currentSizeRange", result);
+        }
+    }
+
+    private void collectFlags(@NonNull Display display, @NonNull JSONObject container) throws JSONException {
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
+            final int flags = display.getFlags();
+            for (Field field : display.getClass().getFields()) {
+                if (field.getName().startsWith("FLAG_")) {
+                    try {
+                        flagNames.put(field.getInt(null), field.getName());
+                    } catch (IllegalAccessException ignored) {
+                    }
+                }
+            }
+            container.put("flags", activeFlags(flags));
+        }
+    }
+
+    private static void collectName(@NonNull Display display, JSONObject container) throws JSONException {
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
+            container.put("name", display.getName());
+        }
+    }
+
+    private static void collectMetrics(@NonNull Display display, JSONObject container) throws JSONException {
+        final DisplayMetrics metrics = new DisplayMetrics();
+        display.getMetrics(metrics);
+        JSONObject result = new JSONObject();
+        collectMetrics(metrics, result);
+        container.put("metrics", result);
+    }
+
+    private static void collectRealMetrics(@NonNull Display display, JSONObject container) throws JSONException {
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
+            final DisplayMetrics metrics = new DisplayMetrics();
+            display.getRealMetrics(metrics);
+            JSONObject result = new JSONObject();
+            collectMetrics(metrics, result);
+            container.put("realMetrics", result);
+        }
+    }
+
+    private static void collectMetrics(@NonNull DisplayMetrics metrics, JSONObject container) throws JSONException {
+        container.put("density", metrics.density)
+                .put("densityDpi", metrics.densityDpi)
+                .put("scaledDensity", "x" + metrics.scaledDensity)
+                .put("widthPixels", metrics.widthPixels)
+                .put("heightPixels", metrics.heightPixels)
+                .put("xdpi", metrics.xdpi)
+                .put("ydpi", metrics.ydpi);
+    }
+
+    /**
+     * Some fields contain multiple value types which can be isolated by
+     * applying a bitmask. That method returns the concatenation of active
+     * values.
+     *
+     * @param bitfield The bitfield to inspect.
+     * @return The names of the different values contained in the bitfield,
+     * separated by '+'.
+     */
+    @NonNull
+    private String activeFlags(int bitfield) {
+        final StringBuilder result = new StringBuilder();
+
+        // Look for masks, apply it an retrieve the masked value
+        for (int i = 0; i < flagNames.size(); i++) {
+            final int maskValue = flagNames.keyAt(i);
+            final int value = bitfield & maskValue;
+            if (value > 0) {
+                if (result.length() > 0) {
+                    result.append('+');
+                }
+                result.append(flagNames.get(value));
+            }
+        }
+        return result.toString();
+    }
+
+}
diff --git a/src/main/java/org/acra/collector/DropBoxCollector.java b/acra/src/main/java/org/acra/collector/DropBoxCollector.java
similarity index 64%
rename from src/main/java/org/acra/collector/DropBoxCollector.java
rename to acra/src/main/java/org/acra/collector/DropBoxCollector.java
index d0f7b27d..2d1fd55e 100644
--- a/src/main/java/org/acra/collector/DropBoxCollector.java
+++ b/acra/src/main/java/org/acra/collector/DropBoxCollector.java
@@ -1,115 +1,138 @@
-/*
- *  Copyright 2010 Kevin Gaudin
- *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-package org.acra.collector;
-
-import android.content.Context;
-import android.os.DropBoxManager;
-import android.support.annotation.NonNull;
-
-import org.acra.ACRA;
-import org.acra.config.ACRAConfiguration;
-
-import java.text.SimpleDateFormat;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.Calendar;
-import java.util.List;
-import java.util.Locale;
-import java.util.Set;
-
-import static org.acra.ACRA.LOG_TAG;
-
-/**
- * Collects data from the DropBoxManager introduced with Android API Level 8. A
- * set of DropBox tags have been identified in the Android source code. , we
- * collect data associated to these tags with hope that some of them could help
- * debugging applications. Application specific tags can be provided by the app
- * dev to track his own usage of the DropBoxManager.
- *
- * @author Kevin Gaudin
- */
-final class DropBoxCollector {
-
-    private static final String[] SYSTEM_TAGS = {"system_app_anr", "system_app_wtf", "system_app_crash",
-            "system_server_anr", "system_server_wtf", "system_server_crash", "BATTERY_DISCHARGE_INFO",
-            "SYSTEM_RECOVERY_LOG", "SYSTEM_BOOT", "SYSTEM_LAST_KMSG", "APANIC_CONSOLE", "APANIC_THREADS",
-            "SYSTEM_RESTART", "SYSTEM_TOMBSTONE", "data_app_strictmode"};
-
-    private static final String NO_RESULT = "N/A";
-    private final SimpleDateFormat dateFormat = new SimpleDateFormat("yyyyMMdd'T'HHmmss", Locale.getDefault()); //iCal format (used to prevent logic changes). Why use this bad readable format?
-
-    /**
-     * Read latest messages contained in the DropBox for system related tags and
-     * optional developer-set tags.
-     *
-     * @param context The application context.
-     * @param config  AcraConfig describe what to collect.
-     * @return A readable formatted String listing messages retrieved.
-     */
-    @NonNull
-    public String read(@NonNull Context context, @NonNull ACRAConfiguration config) {
-        try {
-            final DropBoxManager dropbox = (DropBoxManager) context.getSystemService(Context.DROPBOX_SERVICE);
-
-            final Calendar calendar = Calendar.getInstance();
-            calendar.roll(Calendar.MINUTE, -config.dropboxCollectionMinutes());
-            final long time = calendar.getTimeInMillis();
-            dateFormat.format(calendar.getTime());
-
-            final List<String> tags = new ArrayList<String>();
-            if (config.includeDropBoxSystemTags()) {
-                tags.addAll(Arrays.asList(SYSTEM_TAGS));
-            }
-            final Set<String> additionalTags = config.additionalDropBoxTags();
-            if (!additionalTags.isEmpty()) {
-                tags.addAll(additionalTags);
-            }
-
-            if (tags.isEmpty()) {
-                return "No tag configured for collection.";
-            }
-
-            final StringBuilder dropboxContent = new StringBuilder();
-            for (String tag : tags) {
-                dropboxContent.append("Tag: ").append(tag).append('\n');
-                DropBoxManager.Entry entry = dropbox.getNextEntry(tag, time);
-                if (entry == null) {
-                    dropboxContent.append("Nothing.").append('\n');
-                    continue;
-                }
-                while (entry != null) {
-                    final long msec = entry.getTimeMillis();
-                    calendar.setTimeInMillis(msec);
-                    dropboxContent.append('@').append(dateFormat.format(calendar.getTime())).append('\n');
-                    final String text = entry.getText(500);
-                    if (text != null) {
-                        dropboxContent.append("Text: ").append(text).append('\n');
-                    } else {
-                        dropboxContent.append("Not Text!").append('\n');
-                    }
-                    entry.close();
-                    entry = dropbox.getNextEntry(tag, msec);
-                }
-            }
-            return dropboxContent.toString();
-
-        } catch (Exception e) {
-            if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "DropBoxManager not available.");
-        }
-
-        return NO_RESULT;
-    }
-}
+/*
+ *  Copyright 2010 Kevin Gaudin
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.acra.collector;
+
+import android.Manifest;
+import android.content.Context;
+import android.os.Build;
+import android.os.DropBoxManager;
+import android.support.annotation.NonNull;
+
+import org.acra.ACRA;
+import org.acra.ACRAConstants;
+import org.acra.ReportField;
+import org.acra.builder.ReportBuilder;
+import org.acra.config.ACRAConfiguration;
+import org.acra.model.ComplexElement;
+import org.acra.model.Element;
+import org.acra.util.PackageManagerWrapper;
+
+import java.text.SimpleDateFormat;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Calendar;
+import java.util.List;
+import java.util.Locale;
+import java.util.Set;
+
+import static org.acra.ACRA.LOG_TAG;
+
+/**
+ * Collects data from the {@link DropBoxManager}. A
+ * set of DropBox tags have been identified in the Android source code. , we
+ * collect data associated to these tags with hope that some of them could help
+ * debugging applications. Application specific tags can be provided by the app
+ * dev to track his own usage of the DropBoxManager.
+ *
+ * @author Kevin Gaudin & F43nd1r
+ */
+final class DropBoxCollector extends Collector {
+
+    private final Context context;
+    private final ACRAConfiguration config;
+    private final PackageManagerWrapper pm;
+
+    DropBoxCollector(Context context, ACRAConfiguration config, PackageManagerWrapper pm){
+        super(ReportField.DROPBOX);
+        this.context = context;
+        this.config = config;
+        this.pm = pm;
+    }
+
+    private static final String[] SYSTEM_TAGS = {"system_app_anr", "system_app_wtf", "system_app_crash",
+            "system_server_anr", "system_server_wtf", "system_server_crash", "BATTERY_DISCHARGE_INFO",
+            "SYSTEM_RECOVERY_LOG", "SYSTEM_BOOT", "SYSTEM_LAST_KMSG", "APANIC_CONSOLE", "APANIC_THREADS",
+            "SYSTEM_RESTART", "SYSTEM_TOMBSTONE", "data_app_strictmode"};
+
+    private final SimpleDateFormat dateFormat = new SimpleDateFormat("yyyyMMdd'T'HHmmss", Locale.getDefault()); //iCal format (used for backwards compatibility)
+
+    /**
+     * Read latest messages contained in the DropBox for system related tags and
+     * optional developer-set tags.
+     *
+     * @return An Element listing messages retrieved.
+     */
+    @NonNull
+    @Override
+    Element collect(ReportField reportField, ReportBuilder reportBuilder) {
+        try {
+            final DropBoxManager dropbox = (DropBoxManager) context.getSystemService(Context.DROPBOX_SERVICE);
+
+            final Calendar calendar = Calendar.getInstance();
+            calendar.roll(Calendar.MINUTE, -config.dropboxCollectionMinutes());
+            final long time = calendar.getTimeInMillis();
+            dateFormat.format(calendar.getTime());
+
+            final List<String> tags = new ArrayList<String>();
+            if (config.includeDropBoxSystemTags()) {
+                tags.addAll(Arrays.asList(SYSTEM_TAGS));
+            }
+            final List<String> additionalTags = config.additionalDropBoxTags();
+            if (!additionalTags.isEmpty()) {
+                tags.addAll(additionalTags);
+            }
+
+            if (tags.isEmpty()) {
+                return ACRAConstants.NOT_AVAILABLE;
+            }
+
+            final ComplexElement dropboxContent = new ComplexElement();
+            for (String tag : tags) {
+                final StringBuilder builder = new StringBuilder();
+                DropBoxManager.Entry entry = dropbox.getNextEntry(tag, time);
+                if (entry == null) {
+                    builder.append("Nothing.").append('\n');
+                    continue;
+                }
+                while (entry != null) {
+                    final long msec = entry.getTimeMillis();
+                    calendar.setTimeInMillis(msec);
+                    builder.append('@').append(dateFormat.format(calendar.getTime())).append('\n');
+                    final String text = entry.getText(500);
+                    if (text != null) {
+                        builder.append("Text: ").append(text).append('\n');
+                    } else {
+                        builder.append("Not Text!").append('\n');
+                    }
+                    entry.close();
+                    entry = dropbox.getNextEntry(tag, msec);
+                }
+                dropboxContent.put(tag, builder.toString());
+            }
+            return dropboxContent;
+
+        } catch (Exception e) {
+            if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "DropBoxManager not available.");
+        }
+
+        return ACRAConstants.NOT_AVAILABLE;
+    }
+
+    @Override
+    boolean shouldCollect(Set<ReportField> crashReportFields, ReportField collect, ReportBuilder reportBuilder) {
+        return super.shouldCollect(crashReportFields, collect, reportBuilder) && (pm.hasPermission(Manifest.permission.READ_LOGS) || Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN);
+    }
+}
diff --git a/acra/src/main/java/org/acra/collector/LogCatCollector.java b/acra/src/main/java/org/acra/collector/LogCatCollector.java
new file mode 100644
index 00000000..bfc6729e
--- /dev/null
+++ b/acra/src/main/java/org/acra/collector/LogCatCollector.java
@@ -0,0 +1,161 @@
+/*
+ *  Copyright 2010 Kevin Gaudin
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.acra.collector;
+
+import android.Manifest;
+import android.os.Build;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import com.android.internal.util.Predicate;
+
+import org.acra.ACRA;
+import org.acra.ACRAConstants;
+import org.acra.ReportField;
+import org.acra.annotation.ReportsCrashes;
+import org.acra.builder.ReportBuilder;
+import org.acra.config.ACRAConfiguration;
+import org.acra.model.Element;
+import org.acra.model.StringElement;
+import org.acra.util.IOUtils;
+import org.acra.util.PackageManagerWrapper;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Set;
+
+import static org.acra.ACRA.LOG_TAG;
+
+
+/**
+ * Executes logcat commands and collects it's output.
+ *
+ * @author Kevin Gaudin & F43nd1r
+ */
+final class LogCatCollector extends Collector {
+
+    private final ACRAConfiguration config;
+    private final PackageManagerWrapper pm;
+
+    LogCatCollector(ACRAConfiguration config, PackageManagerWrapper pm) {
+        super(ReportField.LOGCAT, ReportField.EVENTSLOG, ReportField.RADIOLOG);
+        this.config = config;
+        this.pm = pm;
+    }
+
+    /**
+     * Executes the logcat command with arguments taken from
+     * {@link ReportsCrashes#logcatArguments()}
+     *
+     * @param bufferName The name of the buffer to be read: "main" (default), "radio" or "events".
+     * @return A {@link String} containing the latest lines of the output.
+     * Default is 100 lines, use "-t", "300" in
+     * {@link ReportsCrashes#logcatArguments()} if you want 300 lines.
+     * You should be aware that increasing this value causes a longer
+     * report generation time and a bigger footprint on the device data
+     * plan consumption.
+     */
+    private Element collectLogCat(@Nullable String bufferName) {
+        final int myPid = android.os.Process.myPid();
+        final String myPidStr = config.logcatFilterByPid() && myPid > 0 ? Integer.toString(myPid) + "):" : null;
+
+        final List<String> commandLine = new ArrayList<String>();
+        commandLine.add("logcat");
+        if (bufferName != null) {
+            commandLine.add("-b");
+            commandLine.add(bufferName);
+        }
+
+        final int tailCount;
+        final List<String> logcatArgumentsList = config.logcatArguments();
+
+        final int tailIndex = logcatArgumentsList.indexOf("-t");
+        if (tailIndex > -1 && tailIndex < logcatArgumentsList.size()) {
+            tailCount = Integer.parseInt(logcatArgumentsList.get(tailIndex + 1));
+        } else {
+            tailCount = -1;
+        }
+
+        Element logcat;
+        commandLine.addAll(logcatArgumentsList);
+
+        try {
+            final Process process =  new ProcessBuilder().command(commandLine).redirectErrorStream(true).start();
+
+            if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Retrieving logcat output...");
+
+            logcat = new StringElement(streamToString(process.getInputStream(), new Predicate<String>() {
+                @Override
+                public boolean apply(String s) {
+                    return myPidStr == null || s.contains(myPidStr);
+                }
+            }, tailCount));
+            process.destroy();
+
+        } catch (IOException e) {
+            ACRA.log.e(LOG_TAG, "LogCatCollector.collectLogCat could not retrieve data.", e);
+            logcat = ACRAConstants.NOT_AVAILABLE;
+        }
+
+        return logcat;
+    }
+
+    @Override
+    boolean shouldCollect(Set<ReportField> crashReportFields, ReportField collect, ReportBuilder reportBuilder) {
+        return super.shouldCollect(crashReportFields, collect, reportBuilder)
+                && (pm.hasPermission(Manifest.permission.READ_LOGS)
+                || Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN);
+    }
+
+    @NonNull
+    @Override
+    Element collect(ReportField reportField, ReportBuilder reportBuilder) {
+        String bufferName = null;
+        switch (reportField) {
+            case LOGCAT:
+                bufferName = null;
+                break;
+            case EVENTSLOG:
+                bufferName = "events";
+                break;
+            case RADIOLOG:
+                bufferName = "radio";
+                break;
+        }
+        return collectLogCat(bufferName);
+    }
+
+    /**
+     * Reads an InputStream into a string in an non blocking way for current thread
+     * It has a default timeout of 3 seconds.
+     *
+     * @param input  the stream
+     * @param filter should return false for lines which should be excluded
+     * @param limit  the maximum number of lines to read (the last x lines are kept)
+     * @return the String that was read.
+     * @throws IOException if the stream cannot be read.
+     */
+    @NonNull
+    private String streamToString(@NonNull InputStream input, Predicate<String> filter, int limit) throws IOException {
+        if (config.nonBlockingReadForLogcat()) {
+            return IOUtils.streamToStringNonBlockingRead(input, filter, limit);
+        } else {
+            return IOUtils.streamToString(input, filter, limit);
+        }
+    }
+}
diff --git a/acra/src/main/java/org/acra/collector/LogFileCollector.java b/acra/src/main/java/org/acra/collector/LogFileCollector.java
new file mode 100644
index 00000000..5e17f4b4
--- /dev/null
+++ b/acra/src/main/java/org/acra/collector/LogFileCollector.java
@@ -0,0 +1,102 @@
+/*
+ *  Copyright 2012 Kevin Gaudin
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+
+package org.acra.collector;
+
+import android.app.Application;
+import android.content.Context;
+import android.support.annotation.NonNull;
+
+import org.acra.ACRA;
+import org.acra.ACRAConstants;
+import org.acra.ReportField;
+import org.acra.builder.ReportBuilder;
+import org.acra.config.ACRAConfiguration;
+import org.acra.file.Directory;
+import org.acra.model.Element;
+import org.acra.model.StringElement;
+import org.acra.util.IOUtils;
+
+import java.io.ByteArrayInputStream;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+
+import static org.acra.ACRA.LOG_TAG;
+
+/**
+ * Collects the N last lines of a text stream. Use this collector if your
+ * application handles its own logging system.
+ *
+ * @author Kevin Gaudin & F43nd1r
+ */
+final class LogFileCollector extends Collector {
+    private final Context context;
+    private final ACRAConfiguration config;
+
+    LogFileCollector(Context context, ACRAConfiguration config) {
+        super(ReportField.APPLICATION_LOG);
+        this.context = context;
+        this.config = config;
+    }
+
+    /**
+     * Reads the last lines of a custom log file. The file name is assumed as
+     * located in the {@link Application#getFilesDir()} directory if it does not
+     * contain any path separator.
+     *
+     * @return An Element containing all of the requested lines.
+     */
+    @NonNull
+    @Override
+    Element collect(ReportField reportField, ReportBuilder reportBuilder) {
+        try {
+            return new StringElement(IOUtils.streamToString(
+                    getStream(config.applicationLogFileDir(), config.applicationLogFile()),
+                    config.applicationLogFileLines()));
+        } catch (IOException e) {
+            return ACRAConstants.NOT_AVAILABLE;
+        }
+    }
+
+    /**
+     * get the application log file location and open it
+     *
+     * @param directory the base directory for the file path
+     * @param fileName the name of the file
+     * @return a stream to the file or an empty stream if the file was not found
+     */
+    @NonNull
+    private InputStream getStream(@NonNull Directory directory, @NonNull String fileName) {
+        final File file = directory.getFile(context, fileName);
+        if (!file.exists()) {
+            if (ACRA.DEV_LOGGING)
+                ACRA.log.d(LOG_TAG, "Log file '" + file.getPath() + "' does not exist");
+        } else if (file.isDirectory()) {
+            ACRA.log.e(LOG_TAG, "Log file '" + file.getPath() + "' is a directory");
+        } else if (!file.canRead()) {
+            ACRA.log.e(LOG_TAG, "Log file '" + file.getPath() + "' can't be read");
+        } else {
+            try {
+                return new FileInputStream(file);
+            } catch (IOException e) {
+                ACRA.log.e(LOG_TAG, "Could not open stream for log file '" + file.getPath() + "'");
+            }
+        }
+        return new ByteArrayInputStream(new byte[0]);
+    }
+}
diff --git a/src/main/java/org/acra/collector/MediaCodecListCollector.java b/acra/src/main/java/org/acra/collector/MediaCodecListCollector.java
similarity index 58%
rename from src/main/java/org/acra/collector/MediaCodecListCollector.java
rename to acra/src/main/java/org/acra/collector/MediaCodecListCollector.java
index bcc878c1..44f72b32 100644
--- a/src/main/java/org/acra/collector/MediaCodecListCollector.java
+++ b/acra/src/main/java/org/acra/collector/MediaCodecListCollector.java
@@ -1,258 +1,279 @@
-/*
- *  Copyright 2012 Kevin Gaudin
- *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-
-package org.acra.collector;
-
-import android.annotation.TargetApi;
-import android.media.MediaCodecInfo;
-import android.media.MediaCodecList;
-import android.os.Build;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.util.SparseArray;
-
-import java.lang.reflect.Field;
-import java.lang.reflect.Modifier;
-import java.util.Arrays;
-
-/**
- * Collects data about available codecs on the device through the MediaCodecList
- * API introduced in Android 4.1 JellyBean.
- *
- * @author Kevin Gaudin
- */
-final class MediaCodecListCollector {
-    private MediaCodecListCollector(){}
-    private enum CodecType {
-        AVC, H263, MPEG4, AAC
-
-    }
-
-    private static final String COLOR_FORMAT_PREFIX = "COLOR_";
-    private static final String[] MPEG4_TYPES = { "mp4", "mpeg4", "MP4", "MPEG4" };
-    private static final String[] AVC_TYPES = { "avc", "h264", "AVC", "H264" };
-    private static final String[] H263_TYPES = { "h263", "H263" };
-    private static final String[] AAC_TYPES = { "aac", "AAC" };
-
-    private static final SparseArray<String> mColorFormatValues = new SparseArray<String>();
-    private static final SparseArray<String> mAVCLevelValues = new SparseArray<String>();
-    private static final SparseArray<String> mAVCProfileValues = new SparseArray<String>();
-    private static final SparseArray<String> mH263LevelValues = new SparseArray<String>();
-    private static final SparseArray<String> mH263ProfileValues = new SparseArray<String>();
-    private static final SparseArray<String> mMPEG4LevelValues = new SparseArray<String>();
-    private static final SparseArray<String> mMPEG4ProfileValues = new SparseArray<String>();
-    private static final SparseArray<String> mAACProfileValues = new SparseArray<String>();
-
-    // static init where nearly all reflection inspection is done.
-    static {
-        try {
-            final Class<?> codecCapabilitiesClass = Class.forName("android.media.MediaCodecInfo$CodecCapabilities");
-
-            // Retrieve list of possible Color Format
-            for (Field f : codecCapabilitiesClass.getFields()) {
-                if (Modifier.isStatic(f.getModifiers()) && Modifier.isFinal(f.getModifiers())
-                        && f.getName().startsWith(COLOR_FORMAT_PREFIX)) {
-                    mColorFormatValues.put(f.getInt(null), f.getName());
-                }
-            }
-
-            // Retrieve lists of possible codecs profiles and levels
-            final Class<?> codecProfileLevelClass = Class.forName("android.media.MediaCodecInfo$CodecProfileLevel");
-            for (Field f : codecProfileLevelClass.getFields()) {
-                if (Modifier.isStatic(f.getModifiers()) && Modifier.isFinal(f.getModifiers())) {
-                    if (f.getName().startsWith("AVCLevel")) {
-                        mAVCLevelValues.put(f.getInt(null), f.getName());
-                    } else if (f.getName().startsWith("AVCProfile")) {
-                        mAVCProfileValues.put(f.getInt(null), f.getName());
-                    } else if (f.getName().startsWith("H263Level")) {
-                        mH263LevelValues.put(f.getInt(null), f.getName());
-                    } else if (f.getName().startsWith("H263Profile")) {
-                        mH263ProfileValues.put(f.getInt(null), f.getName());
-                    } else if (f.getName().startsWith("MPEG4Level")) {
-                        mMPEG4LevelValues.put(f.getInt(null), f.getName());
-                    } else if (f.getName().startsWith("MPEG4Profile")) {
-                        mMPEG4ProfileValues.put(f.getInt(null), f.getName());
-                    } else if (f.getName().startsWith("AAC")) {
-                        mAACProfileValues.put(f.getInt(null), f.getName());
-                    }
-                }
-            }
-        } catch (@NonNull ClassNotFoundException ignored) {
-            // NOOP
-        } catch (@NonNull SecurityException ignored) {
-            // NOOP
-        } catch (@NonNull IllegalAccessException ignored) {
-            // NOOP
-        } catch (@NonNull IllegalArgumentException ignored) {
-            // NOOP
-        }
-
-    }
-
-    /**
-     * Builds a String describing the list of available codecs on the device
-     * with their capabilities (supported Color Formats, Codec Profiles et
-     * Levels).
-     *
-     * @return The media codecs information
-     */
-    @NonNull
-    public static String collectMediaCodecList() {
-        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN) {
-            return "";
-        }
-
-        final MediaCodecInfo[] infos;
-        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP) {
-            //noinspection deprecation
-            final int codecCount = MediaCodecList.getCodecCount();
-            infos = new MediaCodecInfo[codecCount];
-            for (int codecIdx = 0; codecIdx < codecCount; codecIdx++) {
-                //noinspection deprecation
-                infos[codecIdx] = MediaCodecList.getCodecInfoAt(codecIdx);
-            }
-        } else {
-            infos = new MediaCodecList(MediaCodecList.ALL_CODECS).getCodecInfos();
-        }
-
-        final StringBuilder result = new StringBuilder();
-        for (int i = 0; i < infos.length; i++) {
-            final MediaCodecInfo codecInfo = infos[i];
-            result.append('\n')
-                    .append(i).append(": ").append(codecInfo.getName()).append('\n')
-                    .append("isEncoder: ").append(codecInfo.isEncoder()).append('\n');
-
-            final String[] supportedTypes = codecInfo.getSupportedTypes();
-            result.append("Supported types: ").append(Arrays.toString(supportedTypes)).append('\n');
-            for (String type : supportedTypes) {
-                result.append(collectCapabilitiesForType(codecInfo, type));
-            }
-            result.append('\n');
-        }
-        return result.toString();
-    }
-
-    /**
-     * Retrieve capabilities (ColorFormats and CodecProfileLevels) for a
-     * specific codec type.
-     *
-     * @param codecInfo //TODO describe param
-     * @param type      //TODO describe param
-     * @return A string describing the color formats and codec profile levels
-     * available for a specific codec type.
-     */
-    @NonNull
-    @TargetApi(Build.VERSION_CODES.JELLY_BEAN)
-    private static String collectCapabilitiesForType(@NonNull final MediaCodecInfo codecInfo, @NonNull String type){
-
-        final StringBuilder result = new StringBuilder();
-        final MediaCodecInfo.CodecCapabilities codecCapabilities = codecInfo.getCapabilitiesForType(type);
-
-        // Color Formats
-        final int[] colorFormats = codecCapabilities.colorFormats;
-        if (colorFormats.length > 0) {
-            result.append(type).append(" color formats:");
-            for (int i = 0; i < colorFormats.length; i++) {
-                result.append(mColorFormatValues.get(colorFormats[i]));
-                if (i < colorFormats.length - 1) {
-                    result.append(',');
-                }
-            }
-            result.append('\n');
-        }
-
-        final CodecType codecType = identifyCodecType(codecInfo);
-
-        // Profile Levels
-        final MediaCodecInfo.CodecProfileLevel[] codecProfileLevels = codecCapabilities.profileLevels;
-        if (codecProfileLevels.length > 0) {
-            result.append(type).append(" profile levels:");
-            for (int i = 0; i < codecProfileLevels.length; i++) {
-
-                final int profileValue = codecProfileLevels[i].profile;
-                final int levelValue = codecProfileLevels[i].level;
-
-                if (codecType == null) {
-                    // Unknown codec
-                    result.append(profileValue).append('-').append(levelValue);
-                    break;
-                }
-
-                switch (codecType) {
-                    case AVC:
-                        result.append(profileValue).append(mAVCProfileValues.get(profileValue)).append('-')
-                                .append(mAVCLevelValues.get(levelValue));
-                        break;
-                    case H263:
-                        result.append(mH263ProfileValues.get(profileValue)).append('-')
-                                .append(mH263LevelValues.get(levelValue));
-                        break;
-                    case MPEG4:
-                        result.append(mMPEG4ProfileValues.get(profileValue)).append('-')
-                                .append(mMPEG4LevelValues.get(levelValue));
-                        break;
-                    case AAC:
-                        result.append(mAACProfileValues.get(profileValue));
-                        break;
-                    default:
-                        break;
-                }
-
-                if (i < codecProfileLevels.length - 1) {
-                    result.append(',');
-                }
-
-            }
-            result.append('\n');
-        }
-        return result.append('\n').toString();
-    }
-
-    /**
-     * Looks for keywords in the codec name to identify its nature ({@link CodecType}).
-     *
-     * @param codecInfo //TODO describe param
-     * @return //TODO describe return
-     */
-    @Nullable
-    @TargetApi(Build.VERSION_CODES.JELLY_BEAN)
-    private static CodecType identifyCodecType(@NonNull MediaCodecInfo codecInfo)  {
-
-        final String name = codecInfo.getName();
-        for (String token : AVC_TYPES) {
-            if (name.contains(token)) {
-                return CodecType.AVC;
-            }
-        }
-        for (String token : H263_TYPES) {
-            if (name.contains(token)) {
-                return CodecType.H263;
-            }
-        }
-        for (String token : MPEG4_TYPES) {
-            if (name.contains(token)) {
-                return CodecType.MPEG4;
-            }
-        }
-        for (String token : AAC_TYPES) {
-            if (name.contains(token)) {
-                return CodecType.AAC;
-            }
-        }
-
-        return null;
-    }
-}
+/*
+ *  Copyright 2012 Kevin Gaudin
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+
+package org.acra.collector;
+
+import android.annotation.TargetApi;
+import android.media.MediaCodecInfo;
+import android.media.MediaCodecList;
+import android.os.Build;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.util.SparseArray;
+
+import org.acra.ACRA;
+import org.acra.ACRAConstants;
+import org.acra.ReportField;
+import org.acra.builder.ReportBuilder;
+import org.acra.model.ComplexElement;
+import org.acra.model.Element;
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.lang.reflect.Field;
+import java.lang.reflect.Modifier;
+import java.util.Set;
+
+/**
+ * Collects data about available codecs on the device through the MediaCodecList
+ * API introduced in Android 4.1 JellyBean.
+ *
+ * @author Kevin Gaudin & F43nd1r
+ */
+final class MediaCodecListCollector extends Collector {
+
+    private enum CodecType {
+        AVC, H263, MPEG4, AAC
+
+    }
+
+    private static final String COLOR_FORMAT_PREFIX = "COLOR_";
+    private static final String[] MPEG4_TYPES = {"mp4", "mpeg4", "MP4", "MPEG4"};
+    private static final String[] AVC_TYPES = {"avc", "h264", "AVC", "H264"};
+    private static final String[] H263_TYPES = {"h263", "H263"};
+    private static final String[] AAC_TYPES = {"aac", "AAC"};
+
+    private final SparseArray<String> mColorFormatValues = new SparseArray<String>();
+    private final SparseArray<String> mAVCLevelValues = new SparseArray<String>();
+    private final SparseArray<String> mAVCProfileValues = new SparseArray<String>();
+    private final SparseArray<String> mH263LevelValues = new SparseArray<String>();
+    private final SparseArray<String> mH263ProfileValues = new SparseArray<String>();
+    private final SparseArray<String> mMPEG4LevelValues = new SparseArray<String>();
+    private final SparseArray<String> mMPEG4ProfileValues = new SparseArray<String>();
+    private final SparseArray<String> mAACProfileValues = new SparseArray<String>();
+
+    MediaCodecListCollector() {
+        super(ReportField.MEDIA_CODEC_LIST);
+    }
+
+    @TargetApi(Build.VERSION_CODES.JELLY_BEAN)
+    @NonNull
+    @Override
+    Element collect(ReportField reportField, ReportBuilder reportBuilder) {
+        try {
+            return collectMediaCodecList();
+        } catch (JSONException e) {
+            ACRA.log.w("Could not collect media codecs", e);
+            return ACRAConstants.NOT_AVAILABLE;
+        }
+    }
+
+    @Override
+    boolean shouldCollect(Set<ReportField> crashReportFields, ReportField collect, ReportBuilder reportBuilder) {
+        return super.shouldCollect(crashReportFields, collect, reportBuilder) && Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN;
+    }
+
+    /**
+     * use reflection to prepare field arrays.
+     */
+    private void prepare() {
+        try {
+            final Class<?> codecCapabilitiesClass = Class.forName("android.media.MediaCodecInfo$CodecCapabilities");
+
+            // Retrieve list of possible Color Format
+            for (Field f : codecCapabilitiesClass.getFields()) {
+                if (Modifier.isStatic(f.getModifiers()) && Modifier.isFinal(f.getModifiers())
+                        && f.getName().startsWith(COLOR_FORMAT_PREFIX)) {
+                    mColorFormatValues.put(f.getInt(null), f.getName());
+                }
+            }
+
+            // Retrieve lists of possible codecs profiles and levels
+            final Class<?> codecProfileLevelClass = Class.forName("android.media.MediaCodecInfo$CodecProfileLevel");
+            for (Field f : codecProfileLevelClass.getFields()) {
+                if (Modifier.isStatic(f.getModifiers()) && Modifier.isFinal(f.getModifiers())) {
+                    if (f.getName().startsWith("AVCLevel")) {
+                        mAVCLevelValues.put(f.getInt(null), f.getName());
+                    } else if (f.getName().startsWith("AVCProfile")) {
+                        mAVCProfileValues.put(f.getInt(null), f.getName());
+                    } else if (f.getName().startsWith("H263Level")) {
+                        mH263LevelValues.put(f.getInt(null), f.getName());
+                    } else if (f.getName().startsWith("H263Profile")) {
+                        mH263ProfileValues.put(f.getInt(null), f.getName());
+                    } else if (f.getName().startsWith("MPEG4Level")) {
+                        mMPEG4LevelValues.put(f.getInt(null), f.getName());
+                    } else if (f.getName().startsWith("MPEG4Profile")) {
+                        mMPEG4ProfileValues.put(f.getInt(null), f.getName());
+                    } else if (f.getName().startsWith("AAC")) {
+                        mAACProfileValues.put(f.getInt(null), f.getName());
+                    }
+                }
+            }
+        } catch (@NonNull ClassNotFoundException ignored) {
+            // NOOP
+        } catch (@NonNull SecurityException ignored) {
+            // NOOP
+        } catch (@NonNull IllegalAccessException ignored) {
+            // NOOP
+        } catch (@NonNull IllegalArgumentException ignored) {
+            // NOOP
+        }
+
+    }
+
+    /**
+     * Builds an Element describing the list of available codecs on the device
+     * with their capabilities (supported Color Formats, Codec Profiles et
+     * Levels).
+     *
+     * @return The media codecs information
+     */
+    @TargetApi(Build.VERSION_CODES.JELLY_BEAN)
+    @NonNull
+    private Element collectMediaCodecList() throws JSONException {
+        prepare();
+        final MediaCodecInfo[] infos;
+        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP) {
+            //noinspection deprecation
+            final int codecCount = MediaCodecList.getCodecCount();
+            infos = new MediaCodecInfo[codecCount];
+            for (int codecIdx = 0; codecIdx < codecCount; codecIdx++) {
+                //noinspection deprecation
+                infos[codecIdx] = MediaCodecList.getCodecInfoAt(codecIdx);
+            }
+        } else {
+            infos = new MediaCodecList(MediaCodecList.ALL_CODECS).getCodecInfos();
+        }
+
+        final ComplexElement result = new ComplexElement();
+        for (int i = 0; i < infos.length; i++) {
+            final MediaCodecInfo codecInfo = infos[i];
+            JSONObject codec = new JSONObject();
+            final String[] supportedTypes = codecInfo.getSupportedTypes();
+            codec.put("name", codecInfo.getName())
+                    .put("isEncoder", codecInfo.isEncoder());
+            JSONObject supportedTypesJson = new JSONObject();
+            for (String type : supportedTypes) {
+                supportedTypesJson.put(type, collectCapabilitiesForType(codecInfo, type));
+            }
+            codec.put("supportedTypes", supportedTypesJson);
+            result.put(String.valueOf(i), codec);
+        }
+        return result;
+    }
+
+    /**
+     * Retrieve capabilities (ColorFormats and CodecProfileLevels) for a
+     * specific codec type.
+     *
+     * @param codecInfo the currently inspected codec
+     * @param type      supported type to collect
+     * @return the color formats and codec profile levels
+     * available for a specific codec type.
+     */
+    @NonNull
+    @TargetApi(Build.VERSION_CODES.JELLY_BEAN)
+    private JSONObject collectCapabilitiesForType(@NonNull final MediaCodecInfo codecInfo, @NonNull String type) throws JSONException {
+        final JSONObject result = new JSONObject();
+        final MediaCodecInfo.CodecCapabilities codecCapabilities = codecInfo.getCapabilitiesForType(type);
+
+        // Color Formats
+        final int[] colorFormats = codecCapabilities.colorFormats;
+        if (colorFormats.length > 0) {
+            JSONArray colorFormatsJson = new JSONArray();
+            for (int colorFormat : colorFormats) {
+                colorFormatsJson.put(mColorFormatValues.get(colorFormat));
+            }
+            result.put("colorFormats", colorFormatsJson);
+        }
+
+        final CodecType codecType = identifyCodecType(codecInfo);
+
+        // Profile Levels
+        final MediaCodecInfo.CodecProfileLevel[] codecProfileLevels = codecCapabilities.profileLevels;
+        if (codecProfileLevels.length > 0) {
+            JSONArray profileLevels = new JSONArray();
+            for (MediaCodecInfo.CodecProfileLevel codecProfileLevel : codecProfileLevels) {
+                final int profileValue = codecProfileLevel.profile;
+                final int levelValue = codecProfileLevel.level;
+
+                if (codecType == null) {
+                    // Unknown codec
+                    profileLevels.put(profileValue + '-' + levelValue);
+                    break;
+                }
+
+                switch (codecType) {
+                    case AVC:
+                        profileLevels.put(profileValue + mAVCProfileValues.get(profileValue)
+                                + '-' + mAVCLevelValues.get(levelValue));
+                        break;
+                    case H263:
+                        profileLevels.put(mH263ProfileValues.get(profileValue)
+                                + '-' + mH263LevelValues.get(levelValue));
+                        break;
+                    case MPEG4:
+                        profileLevels.put(mMPEG4ProfileValues.get(profileValue)
+                                + '-' + mMPEG4LevelValues.get(levelValue));
+                        break;
+                    case AAC:
+                        profileLevels.put(mAACProfileValues.get(profileValue));
+                        break;
+                    default:
+                        break;
+                }
+            }
+            result.put("profileLevels", profileLevels);
+        }
+        return result;
+    }
+
+    /**
+     * Looks for keywords in the codec name to identify its nature ({@link CodecType}).
+     *
+     * @param codecInfo the currently inspected codec
+     * @return type of the codec or null if it could bot be guessed
+     */
+    @Nullable
+    @TargetApi(Build.VERSION_CODES.JELLY_BEAN)
+    private CodecType identifyCodecType(@NonNull MediaCodecInfo codecInfo) {
+
+        final String name = codecInfo.getName();
+        for (String token : AVC_TYPES) {
+            if (name.contains(token)) {
+                return CodecType.AVC;
+            }
+        }
+        for (String token : H263_TYPES) {
+            if (name.contains(token)) {
+                return CodecType.H263;
+            }
+        }
+        for (String token : MPEG4_TYPES) {
+            if (name.contains(token)) {
+                return CodecType.MPEG4;
+            }
+        }
+        for (String token : AAC_TYPES) {
+            if (name.contains(token)) {
+                return CodecType.AAC;
+            }
+        }
+
+        return null;
+    }
+}
diff --git a/acra/src/main/java/org/acra/collector/MemoryInfoCollector.java b/acra/src/main/java/org/acra/collector/MemoryInfoCollector.java
new file mode 100644
index 00000000..9e328151
--- /dev/null
+++ b/acra/src/main/java/org/acra/collector/MemoryInfoCollector.java
@@ -0,0 +1,140 @@
+/*
+ *  Copyright 2010 Kevin Gaudin
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.acra.collector;
+
+import android.os.Build;
+import android.os.Environment;
+import android.os.StatFs;
+import android.support.annotation.NonNull;
+
+import org.acra.ACRA;
+import org.acra.ACRAConstants;
+import org.acra.ReportField;
+import org.acra.builder.ReportBuilder;
+import org.acra.model.Element;
+import org.acra.model.NumberElement;
+import org.acra.model.StringElement;
+import org.acra.util.IOUtils;
+
+import java.io.File;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Set;
+
+import static org.acra.ACRA.LOG_TAG;
+
+/**
+ * Collects results of the <code>dumpsys</code> command.
+ *
+ * @author Kevin Gaudin & F43nd1r
+ */
+final class MemoryInfoCollector extends Collector {
+    MemoryInfoCollector() {
+        super(ReportField.DUMPSYS_MEMINFO, ReportField.TOTAL_MEM_SIZE, ReportField.AVAILABLE_MEM_SIZE);
+    }
+
+    @Override
+    boolean shouldCollect(Set<ReportField> crashReportFields, ReportField collect, ReportBuilder reportBuilder) {
+        return super.shouldCollect(crashReportFields, collect, reportBuilder) && !(reportBuilder.getException() instanceof OutOfMemoryError);
+    }
+
+    @NonNull
+    @Override
+    Element collect(ReportField reportField, ReportBuilder reportBuilder) {
+        switch (reportField) {
+            case DUMPSYS_MEMINFO:
+                return collectMemInfo();
+            case TOTAL_MEM_SIZE:
+                return new NumberElement(getTotalInternalMemorySize());
+            case AVAILABLE_MEM_SIZE:
+                return new NumberElement(getAvailableInternalMemorySize());
+            default:
+                //will not happen if used correctly
+                throw new IllegalArgumentException();
+        }
+    }
+
+    /**
+     * Collect results of the <code>dumpsys meminfo</code> command restricted to
+     * this application process.
+     *
+     * @return The execution result.
+     */
+    @NonNull
+    private static Element collectMemInfo() {
+
+        try {
+            final List<String> commandLine = new ArrayList<String>();
+            commandLine.add("dumpsys");
+            commandLine.add("meminfo");
+            commandLine.add(Integer.toString(android.os.Process.myPid()));
+
+            final Process process = Runtime.getRuntime().exec(commandLine.toArray(new String[commandLine.size()]));
+            return new StringElement(IOUtils.streamToString(process.getInputStream()));
+        } catch (IOException e) {
+            ACRA.log.e(LOG_TAG, "MemoryInfoCollector.meminfo could not retrieve data", e);
+            return ACRAConstants.NOT_AVAILABLE;
+        }
+    }
+
+    /**
+     * Calculates the free memory of the device. This is based on an inspection of the filesystem, which in android
+     * devices is stored in RAM.
+     *
+     * @return Number of bytes available.
+     */
+    private static long getAvailableInternalMemorySize() {
+        final File path = Environment.getDataDirectory();
+        final StatFs stat = new StatFs(path.getPath());
+        final long blockSize;
+        final long availableBlocks;
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {
+            blockSize = stat.getBlockSizeLong();
+            availableBlocks = stat.getAvailableBlocksLong();
+        } else {
+            //noinspection deprecation
+            blockSize = stat.getBlockSize();
+            //noinspection deprecation
+            availableBlocks = stat.getAvailableBlocks();
+        }
+        return availableBlocks * blockSize;
+    }
+
+    /**
+     * Calculates the total memory of the device. This is based on an inspection of the filesystem, which in android
+     * devices is stored in RAM.
+     *
+     * @return Total number of bytes.
+     */
+    private static long getTotalInternalMemorySize() {
+        final File path = Environment.getDataDirectory();
+        final StatFs stat = new StatFs(path.getPath());
+        final long blockSize;
+        final long totalBlocks;
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {
+            blockSize = stat.getBlockSizeLong();
+            totalBlocks = stat.getBlockCountLong();
+        } else {
+            //noinspection deprecation
+            blockSize = stat.getBlockSize();
+            //noinspection deprecation
+            totalBlocks = stat.getBlockCount();
+        }
+        return totalBlocks * blockSize;
+    }
+
+}
\ No newline at end of file
diff --git a/acra/src/main/java/org/acra/collector/PackageManagerCollector.java b/acra/src/main/java/org/acra/collector/PackageManagerCollector.java
new file mode 100644
index 00000000..2abee1e5
--- /dev/null
+++ b/acra/src/main/java/org/acra/collector/PackageManagerCollector.java
@@ -0,0 +1,57 @@
+/*
+ *  Copyright 2016
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.acra.collector;
+
+import android.content.pm.PackageInfo;
+import android.support.annotation.NonNull;
+
+import org.acra.ACRAConstants;
+import org.acra.ReportField;
+import org.acra.builder.ReportBuilder;
+import org.acra.model.Element;
+import org.acra.model.NumberElement;
+import org.acra.model.StringElement;
+import org.acra.util.PackageManagerWrapper;
+
+/**
+ * Collects PackageInfo values
+ *
+ * @author F43nd1r
+ * @since 4.9.1
+ */
+final class PackageManagerCollector extends Collector {
+    private final PackageManagerWrapper pm;
+
+    PackageManagerCollector(PackageManagerWrapper pm) {
+        super(ReportField.APP_VERSION_NAME, ReportField.APP_VERSION_CODE);
+        this.pm = pm;
+    }
+
+    @NonNull
+    @Override
+    Element collect(ReportField reportField, ReportBuilder reportBuilder) {
+        PackageInfo info = pm.getPackageInfo();
+        if (info != null) {
+            switch (reportField) {
+                case APP_VERSION_NAME:
+                    return new StringElement(info.versionName);
+                case APP_VERSION_CODE:
+                    return new NumberElement(info.versionCode);
+            }
+        }
+        return ACRAConstants.NOT_AVAILABLE;
+    }
+}
diff --git a/acra/src/main/java/org/acra/collector/ReflectionCollector.java b/acra/src/main/java/org/acra/collector/ReflectionCollector.java
new file mode 100644
index 00000000..e4dc768e
--- /dev/null
+++ b/acra/src/main/java/org/acra/collector/ReflectionCollector.java
@@ -0,0 +1,164 @@
+/*
+ *  Copyright 2010 Kevin Gaudin
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+
+package org.acra.collector;
+
+import android.content.Context;
+import android.os.Build;
+import android.os.Environment;
+import android.support.annotation.NonNull;
+
+import org.acra.ACRA;
+import org.acra.ACRAConstants;
+import org.acra.ReportField;
+import org.acra.builder.ReportBuilder;
+import org.acra.config.ACRAConfiguration;
+import org.acra.model.ComplexElement;
+import org.acra.model.Element;
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.lang.reflect.Field;
+import java.lang.reflect.InvocationTargetException;
+import java.lang.reflect.Method;
+import java.util.Arrays;
+
+import static org.acra.ACRA.LOG_TAG;
+
+/**
+ * Collector retrieving key/value pairs from static fields and getters.
+ * Reflection API usage allows to retrieve data without having to
+ * implement a class for each android version of each interesting class.
+ * It can also help find hidden properties.
+ *
+ * @author Kevin Gaudin
+ */
+final class ReflectionCollector extends Collector {
+    private final Context context;
+    private final ACRAConfiguration config;
+
+    ReflectionCollector(Context context, ACRAConfiguration config) {
+        super(ReportField.BUILD, ReportField.BUILD_CONFIG, ReportField.ENVIRONMENT);
+        this.context = context;
+        this.config = config;
+    }
+
+    /**
+     * Retrieves key/value pairs from static fields of a class.
+     *
+     * @param someClass the class to be inspected.
+     */
+    private static void collectConstants(@NonNull Class<?> someClass, @NonNull JSONObject container) throws JSONException {
+        final Field[] fields = someClass.getFields();
+        for (final Field field : fields) {
+            try {
+                final Object value = field.get(null);
+                if (value != null) {
+                    if (field.getType().isArray()) {
+                        container.put(field.getName(), new JSONArray(Arrays.asList((Object[]) value)));
+                    } else {
+                        container.put(field.getName(), value);
+                    }
+                }
+            } catch (IllegalArgumentException ignored) {
+                // NOOP
+            } catch (IllegalAccessException ignored) {
+                // NOOP
+            }
+        }
+    }
+
+    /**
+     * Retrieves key/value pairs from static getters of a class (get*() or is*()).
+     *
+     * @param someClass the class to be inspected.
+     */
+    private static void collectStaticGettersResults(@NonNull Class<?> someClass, JSONObject container) throws JSONException {
+        final Method[] methods = someClass.getMethods();
+        for (final Method method : methods) {
+            if (method.getParameterTypes().length == 0
+                    && (method.getName().startsWith("get") || method.getName().startsWith("is"))
+                    && !"getClass".equals(method.getName())) {
+                try {
+                    container.put(method.getName(), method.invoke(null, (Object[]) null));
+                } catch (@NonNull IllegalArgumentException ignored) {
+                    // NOOP
+                } catch (@NonNull InvocationTargetException ignored) {
+                    // NOOP
+                } catch (@NonNull IllegalAccessException ignored) {
+                    // NOOP
+                }
+            }
+        }
+    }
+
+    @NonNull
+    @Override
+    Element collect(ReportField reportField, ReportBuilder reportBuilder) {
+        ComplexElement result = new ComplexElement();
+        try {
+            switch (reportField) {
+                case BUILD:
+                    collectConstants(Build.class, result);
+                    JSONObject version = new JSONObject();
+                    collectConstants(Build.VERSION.class, version);
+                    result.put("VERSION", version);
+                    break;
+                case BUILD_CONFIG:
+                    try {
+                        collectConstants(getBuildConfigClass(), result);
+                    } catch (ClassNotFoundException e) {
+                        //already logged in getBuildConfigClass
+                    }
+                    break;
+                case ENVIRONMENT:
+                    collectStaticGettersResults(Environment.class, result);
+                    break;
+                default:
+                    //will not happen if used correctly
+                    throw new IllegalArgumentException();
+            }
+        } catch (JSONException e) {
+            ACRA.log.w("Couldn't collect constants", e);
+            return ACRAConstants.NOT_AVAILABLE;
+        }
+        return result;
+    }
+
+    /**
+     * get the configured BuildConfigClass or guess it if not configured
+     * @return the BuildConfigClass
+     * @throws ClassNotFoundException if the class cannot be found
+     */
+    @NonNull
+    private Class<?> getBuildConfigClass() throws ClassNotFoundException {
+        final Class configuredBuildConfig = config.buildConfigClass();
+        if (!configuredBuildConfig.equals(Object.class)) {
+            // If set via annotations or programmatically then it will have a real value,
+            // otherwise it will be Object.class (default).
+            return configuredBuildConfig;
+        }
+
+        final String className = context.getPackageName() + ".BuildConfig";
+        try {
+            return Class.forName(className);
+        } catch (ClassNotFoundException e) {
+            ACRA.log.e(LOG_TAG, "Not adding buildConfig to log. Class Not found : " + className + ". Please configure 'buildConfigClass' in your ACRA config");
+            throw e;
+        }
+    }
+}
diff --git a/src/main/java/org/acra/collector/SettingsCollector.java b/acra/src/main/java/org/acra/collector/SettingsCollector.java
similarity index 59%
rename from src/main/java/org/acra/collector/SettingsCollector.java
rename to acra/src/main/java/org/acra/collector/SettingsCollector.java
index 2ba52fd3..3a55e7bc 100644
--- a/src/main/java/org/acra/collector/SettingsCollector.java
+++ b/acra/src/main/java/org/acra/collector/SettingsCollector.java
@@ -1,160 +1,184 @@
-/*
- *  Copyright 2010 Kevin Gaudin
- *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-
-package org.acra.collector;
-
-import android.content.Context;
-import android.os.Build;
-import android.provider.Settings;
-import android.provider.Settings.Secure;
-import android.provider.Settings.System;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-
-import org.acra.ACRA;
-import org.acra.config.ACRAConfiguration;
-
-import java.lang.reflect.Field;
-
-import static org.acra.ACRA.LOG_TAG;
-
-/**
- * Helper to collect data from {@link System} and {@link Secure} Settings
- * classes.
- *
- * @author Kevin Gaudin
- *
- */
-final class SettingsCollector {
-
-    private static final String ERROR = "Error: ";
-
-    private final Context context;
-    private final ACRAConfiguration config;
-
-    SettingsCollector(@NonNull Context context, @NonNull ACRAConfiguration config) {
-        this.context = context;
-        this.config = config;
-    }
-
-    /**
-     * Collect data from {@link android.provider.Settings.System}. This
-     * collector uses reflection to be sure to always get the most accurate data
-     * whatever Android API level it runs on.
-     *
-     * @return A human readable String containing one key=value pair per line.
-     */
-    @NonNull
-    public String collectSystemSettings() {
-        final StringBuilder result = new StringBuilder();
-        final Field[] keys = Settings.System.class.getFields();
-        for (final Field key : keys) {
-            // Avoid retrieving deprecated fields... it is useless, has an
-            // impact on prefs, and the system writes many warnings in the
-            // logcat.
-            if (!key.isAnnotationPresent(Deprecated.class) && key.getType() == String.class) {
-                try {
-                    final Object value = Settings.System.getString(context.getContentResolver(), (String) key.get(null));
-                    if (value != null) {
-                        result.append(key.getName()).append('=').append(value).append('\n');
-                    }
-                } catch (@NonNull IllegalArgumentException e) {
-                    ACRA.log.w(LOG_TAG, ERROR, e);
-                } catch (@NonNull IllegalAccessException e) {
-                    ACRA.log.w(LOG_TAG, ERROR, e);
-                }
-            }
-        }
-
-        return result.toString();
-    }
-
-    /**
-     * Collect data from {@link android.provider.Settings.Secure}. This
-     * collector uses reflection to be sure to always get the most accurate data
-     * whatever Android API level it runs on.
-     *
-     * @return A human readable String containing one key=value pair per line.
-     */
-    @NonNull
-    public String collectSecureSettings() {
-        final StringBuilder result = new StringBuilder();
-        final Field[] keys = Settings.Secure.class.getFields();
-        for (final Field key : keys) {
-            if (!key.isAnnotationPresent(Deprecated.class) && key.getType() == String.class && isAuthorized(key)) {
-                try {
-                    final Object value = Settings.Secure.getString(context.getContentResolver(), (String) key.get(null));
-                    if (value != null) {
-                        result.append(key.getName()).append('=').append(value).append('\n');
-                    }
-                } catch (@NonNull IllegalArgumentException e) {
-                    ACRA.log.w(LOG_TAG, ERROR, e);
-                } catch (@NonNull IllegalAccessException e) {
-                    ACRA.log.w(LOG_TAG, ERROR, e);
-                }
-            }
-        }
-
-        return result.toString();
-    }
-
-    /**
-     * Collect data from {@link android.provider.Settings.Global}. This
-     * collector uses reflection to be sure to always get the most accurate data
-     * whatever Android API level it runs on.
-     *
-     * @return A human readable String containing one key=value pair per line.
-     */
-    @NonNull
-    public String collectGlobalSettings() {
-        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN_MR1) {
-            return "";
-        }
-
-        final StringBuilder result = new StringBuilder();
-        final Field[] keys = Settings.Global.class.getFields();
-        for (final Field key : keys) {
-            if (!key.isAnnotationPresent(Deprecated.class) && key.getType() == String.class && isAuthorized(key)) {
-                try {
-                    final Object value = Settings.Global.getString(context.getContentResolver(), (String) key.get(null));
-                    if (value != null) {
-                        result.append(key.getName()).append('=').append(value).append('\n');
-                    }
-                } catch (@NonNull IllegalArgumentException e) {
-                    ACRA.log.w(LOG_TAG, ERROR, e);
-                } catch (@NonNull SecurityException e) {
-                    ACRA.log.w(LOG_TAG, ERROR, e);
-                } catch (@NonNull IllegalAccessException e) {
-                    ACRA.log.w(LOG_TAG, ERROR, e);
-                }
-            }
-        }
-        return result.toString();
-    }
-
-    private boolean isAuthorized(@Nullable Field key) {
-        if (key == null || key.getName().startsWith("WIFI_AP")) {
-            return false;
-        }
-        for (String regex : config.excludeMatchingSettingsKeys()) {
-            if(key.getName().matches(regex)) {
-               return false;
-            }
-        }
-        return true;
-    }
-
-}
+/*
+ *  Copyright 2010 Kevin Gaudin
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+
+package org.acra.collector;
+
+import android.content.Context;
+import android.os.Build;
+import android.provider.Settings.Global;
+import android.provider.Settings.Secure;
+import android.provider.Settings.System;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import org.acra.ACRA;
+import org.acra.ACRAConstants;
+import org.acra.ReportField;
+import org.acra.builder.ReportBuilder;
+import org.acra.config.ACRAConfiguration;
+import org.acra.model.ComplexElement;
+import org.acra.model.Element;
+import org.json.JSONException;
+
+import java.lang.reflect.Field;
+
+import static org.acra.ACRA.LOG_TAG;
+
+/**
+ * collects data from {@link System}, {@link Global} and {@link Secure} Settings
+ * classes.
+ *
+ * @author Kevin Gaudin & F43nd1r
+ */
+final class SettingsCollector extends Collector {
+
+    private static final String ERROR = "Error: ";
+
+    private final Context context;
+    private final ACRAConfiguration config;
+
+    SettingsCollector(@NonNull Context context, @NonNull ACRAConfiguration config) {
+        super(ReportField.SETTINGS_SYSTEM, ReportField.SETTINGS_SECURE, ReportField.SETTINGS_GLOBAL);
+        this.context = context;
+        this.config = config;
+    }
+
+    /**
+     * Collect data from {@link System}. This
+     * collector uses reflection to be sure to always get the most accurate data
+     * whatever Android API level it runs on.
+     *
+     * @return collected key-value pairs.
+     */
+    @NonNull
+    private Element collectSystemSettings() throws JSONException {
+        final ComplexElement result = new ComplexElement();
+        final Field[] keys = System.class.getFields();
+        for (final Field key : keys) {
+            // Avoid retrieving deprecated fields... it is useless, has an
+            // impact on prefs, and the system writes many warnings in the
+            // logcat.
+            if (!key.isAnnotationPresent(Deprecated.class) && key.getType() == String.class) {
+                try {
+                    final Object value = System.getString(context.getContentResolver(), (String) key.get(null));
+                    if (value != null) {
+                        result.put(key.getName(), value);
+                    }
+                } catch (@NonNull IllegalArgumentException e) {
+                    ACRA.log.w(LOG_TAG, ERROR, e);
+                } catch (@NonNull IllegalAccessException e) {
+                    ACRA.log.w(LOG_TAG, ERROR, e);
+                }
+            }
+        }
+        return result;
+    }
+
+    /**
+     * Collect data from {@link Secure}. This
+     * collector uses reflection to be sure to always get the most accurate data
+     * whatever Android API level it runs on.
+     *
+     * @return collected key-value pairs.
+     */
+    @NonNull
+    private Element collectSecureSettings() throws JSONException {
+        final ComplexElement result = new ComplexElement();
+        final Field[] keys = Secure.class.getFields();
+        for (final Field key : keys) {
+            if (!key.isAnnotationPresent(Deprecated.class) && key.getType() == String.class && isAuthorized(key)) {
+                try {
+                    final Object value = Secure.getString(context.getContentResolver(), (String) key.get(null));
+                    if (value != null) {
+                        result.put(key.getName(), value);
+                    }
+                } catch (@NonNull IllegalArgumentException e) {
+                    ACRA.log.w(LOG_TAG, ERROR, e);
+                } catch (@NonNull IllegalAccessException e) {
+                    ACRA.log.w(LOG_TAG, ERROR, e);
+                }
+            }
+        }
+        return result;
+    }
+
+    /**
+     * Collect data from {@link Global}. This
+     * collector uses reflection to be sure to always get the most accurate data
+     * whatever Android API level it runs on.
+     *
+     * @return collected key-value pairs.
+     */
+    @NonNull
+    private Element collectGlobalSettings() throws JSONException {
+        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN_MR1) {
+            return ACRAConstants.NOT_AVAILABLE;
+        }
+
+        final ComplexElement result = new ComplexElement();
+        final Field[] keys = Global.class.getFields();
+        for (final Field key : keys) {
+            if (!key.isAnnotationPresent(Deprecated.class) && key.getType() == String.class && isAuthorized(key)) {
+                try {
+                    final Object value = Global.getString(context.getContentResolver(), (String) key.get(null));
+                    if (value != null) {
+                        result.put(key.getName(), value);
+                    }
+                } catch (@NonNull IllegalArgumentException e) {
+                    ACRA.log.w(LOG_TAG, ERROR, e);
+                } catch (@NonNull SecurityException e) {
+                    ACRA.log.w(LOG_TAG, ERROR, e);
+                } catch (@NonNull IllegalAccessException e) {
+                    ACRA.log.w(LOG_TAG, ERROR, e);
+                }
+            }
+        }
+        return result;
+    }
+
+    private boolean isAuthorized(@Nullable Field key) {
+        if (key == null || key.getName().startsWith("WIFI_AP")) {
+            return false;
+        }
+        for (String regex : config.excludeMatchingSettingsKeys()) {
+            if (key.getName().matches(regex)) {
+                return false;
+            }
+        }
+        return true;
+    }
+
+    @NonNull
+    @Override
+    Element collect(ReportField reportField, ReportBuilder reportBuilder) {
+        try {
+        switch (reportField) {
+            case SETTINGS_SYSTEM:
+                    return collectSystemSettings();
+            case SETTINGS_SECURE:
+                return collectSecureSettings();
+            case SETTINGS_GLOBAL:
+                return collectGlobalSettings();
+            default:
+                //will not happen if used correctly
+                throw new IllegalArgumentException();
+        }
+        } catch (JSONException e) {
+            ACRA.log.w("Could not collect Settings", e);
+            return ACRAConstants.NOT_AVAILABLE;
+        }
+    }
+}
diff --git a/src/main/java/org/acra/collector/SharedPreferencesCollector.java b/acra/src/main/java/org/acra/collector/SharedPreferencesCollector.java
similarity index 61%
rename from src/main/java/org/acra/collector/SharedPreferencesCollector.java
rename to acra/src/main/java/org/acra/collector/SharedPreferencesCollector.java
index caf6f978..f3f4082c 100644
--- a/src/main/java/org/acra/collector/SharedPreferencesCollector.java
+++ b/acra/src/main/java/org/acra/collector/SharedPreferencesCollector.java
@@ -1,114 +1,139 @@
-/*
- *  Copyright 2010 Kevin Gaudin
- *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-package org.acra.collector;
-
-import android.content.Context;
-import android.content.SharedPreferences;
-import android.preference.PreferenceManager;
-import android.support.annotation.NonNull;
-
-import org.acra.ACRA;
-import org.acra.annotation.ReportsCrashes;
-import org.acra.config.ACRAConfiguration;
-
-import java.util.Map;
-import java.util.TreeMap;
-
-import static org.acra.ACRA.LOG_TAG;
-
-/**
- * Collects the content (key/value pairs) of SharedPreferences, from the
- * application default preferences or any other preferences asked by the
- * application developer.
- */
-final class SharedPreferencesCollector {
-
-    private final Context context;
-    private final ACRAConfiguration config;
-
-    SharedPreferencesCollector(@NonNull Context context, @NonNull ACRAConfiguration config) {
-        this.context = context;
-        this.config = config;
-    }
-
-    /**
-     * Collects all key/value pairs in SharedPreferences and writes them in a
-     * result String. The application default SharedPreferences are always
-     * collected, and the developer can provide additional SharedPreferences
-     * names in the {@link ReportsCrashes#additionalSharedPreferences()}
-     * configuration item.
-     *
-     * @return A readable formatted String containing all key/value pairs.
-     */
-    @NonNull
-    public String collect() {
-        final StringBuilder result = new StringBuilder();
-
-        // Include the default SharedPreferences
-        final Map<String, SharedPreferences> sharedPrefs = new TreeMap<String, SharedPreferences>();
-        sharedPrefs.put("default", PreferenceManager.getDefaultSharedPreferences(context));
-
-        // Add in any additional SharedPreferences
-        for (final String sharedPrefId : config.additionalSharedPreferences()) {
-            sharedPrefs.put(sharedPrefId, context.getSharedPreferences(sharedPrefId, Context.MODE_PRIVATE));
-        }
-
-        // Iterate over all included preference files and add the preferences from each.
-        for (Map.Entry<String, SharedPreferences> entry : sharedPrefs.entrySet()) {
-            final String sharedPrefId = entry.getKey();
-            final SharedPreferences prefs = entry.getValue();
-
-            final Map<String, ?> prefEntries = prefs.getAll();
-
-            // Show that we have no preferences saved for that preference file.
-            if (prefEntries.isEmpty()) {
-                result.append(sharedPrefId).append('=').append("empty\n");
-                continue;
-            }
-
-            // Add all non-filtered preferences from that preference file.
-            for (final Map.Entry<String, ?> prefEntry : prefEntries.entrySet()) {
-                if (filteredKey(prefEntry.getKey())) {
-                    if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Filtered out sharedPreference=" + sharedPrefId + "  key=" + prefEntry.getKey() + " due to filtering rule");
-                } else {
-                    final Object prefValue = prefEntry.getValue();
-                    result.append(sharedPrefId).append('.').append(prefEntry.getKey()).append('=');
-                    result.append(prefValue == null ? "null" : prefValue.toString());
-                    result.append('\n');
-                }
-            }
-            result.append('\n');
-        }
-
-        return result.toString();
-    }
-
-    /**
-     * Checks if the key matches one of the patterns provided by the developer
-     * to exclude some preferences from reports.
-     *
-     * @param key the name of the preference to be checked
-     * @return true if the key has to be excluded from reports.
-     */
-    private boolean filteredKey(@NonNull String key) {
-        for (String regex : config.excludeMatchingSharedPreferencesKeys()) {
-            if (key.matches(regex)) {
-                return true;
-            }
-        }
-        return false;
-    }
-}
+/*
+ *  Copyright 2010 Kevin Gaudin
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.acra.collector;
+
+import android.content.Context;
+import android.content.SharedPreferences;
+import android.preference.PreferenceManager;
+import android.support.annotation.NonNull;
+
+import org.acra.ACRA;
+import org.acra.ACRAConstants;
+import org.acra.ReportField;
+import org.acra.annotation.ReportsCrashes;
+import org.acra.builder.ReportBuilder;
+import org.acra.config.ACRAConfiguration;
+import org.acra.model.ComplexElement;
+import org.acra.model.Element;
+import org.acra.model.StringElement;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.util.Iterator;
+import java.util.Map;
+import java.util.TreeMap;
+
+import static org.acra.ACRA.LOG_TAG;
+
+/**
+ * Collects the content (key/value pairs) of SharedPreferences, from the
+ * application default preferences or any other preferences asked by the
+ * application developer.
+ */
+final class SharedPreferencesCollector extends Collector {
+
+    private final Context context;
+    private final ACRAConfiguration config;
+    private final SharedPreferences prefs;
+
+    SharedPreferencesCollector(@NonNull Context context, @NonNull ACRAConfiguration config, SharedPreferences prefs) {
+        super(ReportField.USER_EMAIL, ReportField.SHARED_PREFERENCES);
+        this.context = context;
+        this.config = config;
+        this.prefs = prefs;
+    }
+
+    /**
+     * Collects all key/value pairs in SharedPreferences.
+     * The application default SharedPreferences are always
+     * collected, and the developer can provide additional SharedPreferences
+     * names in the {@link ReportsCrashes#additionalSharedPreferences()}
+     * configuration item.
+     *
+     * @return the collected key/value pairs.
+     */
+    @NonNull
+    private Element collect() throws JSONException {
+        final ComplexElement result = new ComplexElement();
+
+        // Include the default SharedPreferences
+        final Map<String, SharedPreferences> sharedPrefs = new TreeMap<String, SharedPreferences>();
+        sharedPrefs.put("default", PreferenceManager.getDefaultSharedPreferences(context));
+
+        // Add in any additional SharedPreferences
+        for (final String sharedPrefId : config.additionalSharedPreferences()) {
+            sharedPrefs.put(sharedPrefId, context.getSharedPreferences(sharedPrefId, Context.MODE_PRIVATE));
+        }
+
+        // Iterate over all included preference files and add the preferences from each.
+        for (Map.Entry<String, SharedPreferences> entry : sharedPrefs.entrySet()) {
+            final String sharedPrefId = entry.getKey();
+            final SharedPreferences prefs = entry.getValue();
+
+            final Map<String, ?> prefEntries = prefs.getAll();
+
+            // Show that we have no preferences saved for that preference file.
+            if (prefEntries.isEmpty()) {
+                result.put(sharedPrefId, "empty");
+            } else {
+                for (Iterator<String> iterator = prefEntries.keySet().iterator(); iterator.hasNext();){
+                    if(filteredKey(iterator.next())){
+                        iterator.remove();
+                    }
+                }
+                result.put(sharedPrefId, new JSONObject(prefEntries));
+            }
+        }
+
+        return result;
+    }
+
+    /**
+     * Checks if the key matches one of the patterns provided by the developer
+     * to exclude some preferences from reports.
+     *
+     * @param key the name of the preference to be checked
+     * @return true if the key has to be excluded from reports.
+     */
+    private boolean filteredKey(@NonNull String key) {
+        for (String regex : config.excludeMatchingSharedPreferencesKeys()) {
+            if (key.matches(regex)) {
+                return true;
+            }
+        }
+        return false;
+    }
+
+    @NonNull
+    @Override
+    Element collect(ReportField reportField, ReportBuilder reportBuilder) {
+        switch (reportField) {
+            case USER_EMAIL:
+                String email = prefs.getString(ACRA.PREF_USER_EMAIL_ADDRESS, null);
+                return email != null ? new StringElement(email) : ACRAConstants.NOT_AVAILABLE;
+            case SHARED_PREFERENCES:
+                try {
+                    return collect();
+                } catch (JSONException e) {
+                    ACRA.log.w(LOG_TAG, "Could not collect shared preferences", e);
+                    return ACRAConstants.NOT_AVAILABLE;
+                }
+            default:
+                //will not happen if used correctly
+                throw new IllegalArgumentException();
+        }
+    }
+}
diff --git a/acra/src/main/java/org/acra/collector/SimpleValuesCollector.java b/acra/src/main/java/org/acra/collector/SimpleValuesCollector.java
new file mode 100644
index 00000000..f57f3899
--- /dev/null
+++ b/acra/src/main/java/org/acra/collector/SimpleValuesCollector.java
@@ -0,0 +1,125 @@
+/*
+ *  Copyright 2016
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.acra.collector;
+
+import android.content.Context;
+import android.os.Build;
+import android.support.annotation.NonNull;
+
+import org.acra.ACRA;
+import org.acra.ReportField;
+import org.acra.builder.ReportBuilder;
+import org.acra.model.BooleanElement;
+import org.acra.model.Element;
+import org.acra.model.StringElement;
+import org.acra.util.Installation;
+
+import java.io.File;
+import java.net.InetAddress;
+import java.net.NetworkInterface;
+import java.net.SocketException;
+import java.util.Enumeration;
+import java.util.Set;
+import java.util.UUID;
+
+import static org.acra.ACRA.LOG_TAG;
+
+/**
+ * Collects various simple values
+ *
+ * @author F43nd1r
+ * @since 4.9.1
+ */
+final class SimpleValuesCollector extends Collector {
+    private final Context context;
+
+    SimpleValuesCollector(Context context) {
+        super(ReportField.IS_SILENT, ReportField.REPORT_ID, ReportField.INSTALLATION_ID,
+                ReportField.PACKAGE_NAME, ReportField.PHONE_MODEL, ReportField.ANDROID_VERSION,
+                ReportField.BRAND, ReportField.PRODUCT, ReportField.FILE_PATH, ReportField.USER_IP);
+        this.context = context;
+    }
+
+    @Override
+    boolean shouldCollect(Set<ReportField> crashReportFields, ReportField collect, ReportBuilder reportBuilder) {
+        return collect == ReportField.IS_SILENT || collect == ReportField.REPORT_ID || super.shouldCollect(crashReportFields, collect, reportBuilder);
+    }
+
+    @NonNull
+    @Override
+    Element collect(ReportField reportField, ReportBuilder reportBuilder) {
+        switch (reportField) {
+            case IS_SILENT:
+                return new BooleanElement(reportBuilder.isSendSilently());
+            case REPORT_ID:
+                return new StringElement(UUID.randomUUID().toString());
+            case INSTALLATION_ID:
+                return new StringElement(Installation.id(context));
+            case PACKAGE_NAME:
+                return new StringElement(context.getPackageName());
+            case PHONE_MODEL:
+                return new StringElement(Build.MODEL);
+            case ANDROID_VERSION:
+                return new StringElement(Build.VERSION.RELEASE);
+            case BRAND:
+                return new StringElement(Build.BRAND);
+            case PRODUCT:
+                return new StringElement(Build.PRODUCT);
+            case FILE_PATH:
+                return new StringElement(getApplicationFilePath());
+            case USER_IP:
+                return new StringElement(getLocalIpAddress());
+            default:
+                //will not happen if used correctly
+                throw new IllegalArgumentException();
+        }
+    }
+
+    @NonNull
+    private String getApplicationFilePath() {
+        final File filesDir = context.getFilesDir();
+        if (filesDir != null) {
+            return filesDir.getAbsolutePath();
+        }
+
+        ACRA.log.w(LOG_TAG, "Couldn't retrieve ApplicationFilePath for : " + context.getPackageName());
+        return "Couldn't retrieve ApplicationFilePath";
+    }
+
+    @NonNull
+    private static String getLocalIpAddress() {
+        final StringBuilder result = new StringBuilder();
+        boolean first = true;
+        try {
+            for (Enumeration<NetworkInterface> en = NetworkInterface.getNetworkInterfaces(); en.hasMoreElements(); ) {
+                final NetworkInterface intf = en.nextElement();
+                for (Enumeration<InetAddress> enumIpAddr = intf.getInetAddresses(); enumIpAddr.hasMoreElements(); ) {
+                    final InetAddress inetAddress = enumIpAddr.nextElement();
+                    if (!inetAddress.isLoopbackAddress()) {
+                        if (!first) {
+                            result.append('\n');
+                        }
+                        result.append(inetAddress.getHostAddress());
+                        first = false;
+                    }
+                }
+            }
+        } catch (SocketException ex) {
+            ACRA.log.w(LOG_TAG, ex.toString());
+        }
+        return result.toString();
+    }
+}
diff --git a/acra/src/main/java/org/acra/collector/StacktraceCollector.java b/acra/src/main/java/org/acra/collector/StacktraceCollector.java
new file mode 100644
index 00000000..98b03fb1
--- /dev/null
+++ b/acra/src/main/java/org/acra/collector/StacktraceCollector.java
@@ -0,0 +1,100 @@
+/*
+ *  Copyright 2016
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.acra.collector;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+
+import org.acra.ReportField;
+import org.acra.builder.ReportBuilder;
+import org.acra.model.Element;
+import org.acra.model.StringElement;
+
+import java.io.PrintWriter;
+import java.io.StringWriter;
+import java.io.Writer;
+import java.util.Set;
+
+/**
+ * Collects the holy stacktrace
+ *
+ * @author F43nd1r
+ * @since 4.9.1
+ */
+final class StacktraceCollector extends Collector {
+    StacktraceCollector() {
+        super(ReportField.STACK_TRACE, ReportField.STACK_TRACE_HASH);
+    }
+
+    @Override
+    boolean shouldCollect(Set<ReportField> crashReportFields, ReportField collect, ReportBuilder reportBuilder) {
+        return collect == ReportField.STACK_TRACE || super.shouldCollect(crashReportFields, collect, reportBuilder);
+    }
+
+    @NonNull
+    @Override
+    Element collect(ReportField reportField, ReportBuilder reportBuilder) {
+        switch (reportField) {
+            case STACK_TRACE:
+                return new StringElement(
+                        getStackTrace(reportBuilder.getMessage(), reportBuilder.getException()));
+            case STACK_TRACE_HASH:
+                return new StringElement(getStackTraceHash(reportBuilder.getException()));
+            default:
+                //will not happen if used correctly
+                throw new IllegalArgumentException();
+        }
+    }
+
+    @NonNull
+    private String getStackTrace(@Nullable String msg, @Nullable Throwable th) {
+        final Writer result = new StringWriter();
+        final PrintWriter printWriter = new PrintWriter(result);
+
+        if (msg != null && !TextUtils.isEmpty(msg)) {
+            printWriter.println(msg);
+        }
+
+        // If the exception was thrown in a background thread inside
+        // AsyncTask, then the actual exception can be found with getCause
+        Throwable cause = th;
+        while (cause != null) {
+            cause.printStackTrace(printWriter);
+            cause = cause.getCause();
+        }
+        final String stacktraceAsString = result.toString();
+        printWriter.close();
+
+        return stacktraceAsString;
+    }
+
+    @NonNull
+    private String getStackTraceHash(@Nullable Throwable th) {
+        final StringBuilder res = new StringBuilder();
+        Throwable cause = th;
+        while (cause != null) {
+            final StackTraceElement[] stackTraceElements = cause.getStackTrace();
+            for (final StackTraceElement e : stackTraceElements) {
+                res.append(e.getClassName());
+                res.append(e.getMethodName());
+            }
+            cause = cause.getCause();
+        }
+
+        return Integer.toHexString(res.toString().hashCode());
+    }
+}
diff --git a/acra/src/main/java/org/acra/collector/ThreadCollector.java b/acra/src/main/java/org/acra/collector/ThreadCollector.java
new file mode 100644
index 00000000..aab9e7d4
--- /dev/null
+++ b/acra/src/main/java/org/acra/collector/ThreadCollector.java
@@ -0,0 +1,64 @@
+/*
+ *  Copyright 2010 Kevin Gaudin
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+
+package org.acra.collector;
+
+import android.support.annotation.NonNull;
+
+import org.acra.ACRAConstants;
+import org.acra.ReportField;
+import org.acra.builder.ReportBuilder;
+import org.acra.model.ComplexElement;
+import org.acra.model.Element;
+import org.json.JSONException;
+
+/**
+ * Collects some data identifying a Thread
+ *
+ * @author Kevin Gaudin & F43nd1r
+ */
+final class ThreadCollector extends Collector {
+    ThreadCollector() {
+        super(ReportField.THREAD_DETAILS);
+    }
+
+    /**
+     * collects some data identifying the crashed thread
+     *
+     * @return the information including the id, name and priority of the thread.
+     */
+    @NonNull
+    @Override
+    Element collect(ReportField reportField, ReportBuilder reportBuilder) {
+        Thread t = reportBuilder.getUncaughtExceptionThread();
+        final ComplexElement result = new ComplexElement();
+        if (t != null) {
+            try {
+                result.put("id", t.getId());
+                result.put("name", t.getName());
+                result.put("priority", t.getPriority());
+                if (t.getThreadGroup() != null) {
+                    result.put("groupName", t.getThreadGroup().getName());
+                }
+            } catch (JSONException e) {
+                e.printStackTrace();
+            }
+        } else {
+            return ACRAConstants.NOT_AVAILABLE;
+        }
+        return result;
+    }
+}
diff --git a/acra/src/main/java/org/acra/collector/TimeCollector.java b/acra/src/main/java/org/acra/collector/TimeCollector.java
new file mode 100644
index 00000000..a34fb4f5
--- /dev/null
+++ b/acra/src/main/java/org/acra/collector/TimeCollector.java
@@ -0,0 +1,74 @@
+/*
+ *  Copyright 2016
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.acra.collector;
+
+import android.support.annotation.NonNull;
+
+import org.acra.ACRAConstants;
+import org.acra.ReportField;
+import org.acra.builder.ReportBuilder;
+import org.acra.model.Element;
+import org.acra.model.StringElement;
+
+import java.text.SimpleDateFormat;
+import java.util.Calendar;
+import java.util.GregorianCalendar;
+import java.util.Locale;
+import java.util.Set;
+
+/**
+ * collects time information
+ *
+ * @author F43nd1r
+ * @since 4.9.1
+ */
+final class TimeCollector extends Collector {
+    private final Calendar appStartDate;
+
+    TimeCollector(Calendar appStartDate) {
+        super(ReportField.USER_APP_START_DATE, ReportField.USER_CRASH_DATE);
+        this.appStartDate = appStartDate;
+    }
+
+    @Override
+    boolean shouldCollect(Set<ReportField> crashReportFields, ReportField collect, ReportBuilder reportBuilder) {
+        return true;
+    }
+
+    @NonNull
+    @Override
+    Element collect(ReportField reportField, ReportBuilder reportBuilder) {
+        Calendar time;
+        switch (reportField) {
+            case USER_APP_START_DATE:
+                time = appStartDate;
+                break;
+            case USER_CRASH_DATE:
+                time = new GregorianCalendar();
+                break;
+            default:
+                //will not happen if used correctly
+                throw new IllegalArgumentException();
+        }
+        return new StringElement(getTimeString(time));
+    }
+
+    @NonNull
+    private static String getTimeString(@NonNull Calendar time) {
+        final SimpleDateFormat format = new SimpleDateFormat(ACRAConstants.DATE_TIME_FORMAT_STRING, Locale.ENGLISH);
+        return format.format(time.getTimeInMillis());
+    }
+}
diff --git a/src/main/java/org/acra/config/ACRAConfigurationException.java b/acra/src/main/java/org/acra/config/ACRAConfigurationException.java
similarity index 88%
rename from src/main/java/org/acra/config/ACRAConfigurationException.java
rename to acra/src/main/java/org/acra/config/ACRAConfigurationException.java
index 381546d7..380d3e79 100644
--- a/src/main/java/org/acra/config/ACRAConfigurationException.java
+++ b/acra/src/main/java/org/acra/config/ACRAConfigurationException.java
@@ -27,4 +27,8 @@
     public ACRAConfigurationException(String msg) {
         super(msg);
     }
+
+    public ACRAConfigurationException(String detailMessage, Throwable throwable) {
+        super(detailMessage, throwable);
+    }
 }
diff --git a/acra/src/main/java/org/acra/config/ConfigurationBuilder.java b/acra/src/main/java/org/acra/config/ConfigurationBuilder.java
new file mode 100644
index 00000000..3b4f6aa1
--- /dev/null
+++ b/acra/src/main/java/org/acra/config/ConfigurationBuilder.java
@@ -0,0 +1,188 @@
+/*
+ *  Copyright 2011 Kevin Gaudin
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.acra.config;
+
+import android.app.Application;
+import android.support.annotation.NonNull;
+
+import org.acra.ACRA;
+import org.acra.ReportField;
+import org.acra.annotation.Hide;
+import org.acra.dialog.CrashReportDialog;
+import org.acra.sender.HttpSender;
+
+import java.lang.reflect.Modifier;
+import java.util.Arrays;
+import java.util.EnumMap;
+import java.util.HashMap;
+import java.util.LinkedHashSet;
+import java.util.Map;
+import java.util.Set;
+
+import static org.acra.ACRA.LOG_TAG;
+import static org.acra.ACRAConstants.*;
+
+/**
+ * Builder responsible for programmatic construction of an {@link ACRAConfiguration}.
+ *
+ * {@link ACRAConfiguration} should be considered immutable and in the future will be.
+ *
+ * @since 4.8.1
+ */
+@SuppressWarnings("unused")
+@org.acra.annotation.ConfigurationBuilder
+public final class ConfigurationBuilder extends BaseConfigurationBuilder{
+
+    private final Map<String, String> httpHeaders;
+    private final Map<ReportField, Boolean> reportContentChanges;
+
+    /**
+     * Constructs a ConfigurationBuilder that is prepopulated with any
+     * '@ReportCrashes' annotation declared on the Application class.
+     *
+     * @param app Current Application, from which any annotated config will be gleaned.
+     */
+    public ConfigurationBuilder(@NonNull Application app) {
+        super(app);
+        httpHeaders = new HashMap<String, String>();
+        reportContentChanges = new EnumMap<ReportField, Boolean>(ReportField.class);
+    }
+
+    /**
+     * Builds the {@link ACRAConfiguration} which will be used to configure ACRA.
+     * <p>
+     * You can pass this {@link ConfigurationBuilder} to {@link ACRA#init(Application, ConfigurationBuilder)} and
+     * {@link ACRA#init(Application, ConfigurationBuilder)} will handle any Exception.
+     * </p>
+     *
+     * @return new ACRAConfiguration containing all the properties configured on this builder.
+     * @throws ACRAConfigurationException if the required values for the configured notification mode have not been provided.
+     */
+    @Hide
+    @NonNull
+    public ACRAConfiguration build() throws ACRAConfigurationException {
+
+        switch (reportingInteractionMode()) {
+            case TOAST:
+                if (resToastText() == DEFAULT_RES_VALUE) {
+                    throw new ACRAConfigurationException("TOAST mode: you have to define the resToastText parameter in your application @ReportsCrashes() annotation.");
+                }
+                break;
+            case NOTIFICATION:
+                if (resNotifTickerText() == DEFAULT_RES_VALUE || resNotifTitle() == DEFAULT_RES_VALUE || resNotifText() == DEFAULT_RES_VALUE) {
+                    throw new ACRAConfigurationException("NOTIFICATION mode: you have to define at least the resNotifTickerText, resNotifTitle, resNotifText parameters in your application @ReportsCrashes() annotation.");
+                }
+                if (CrashReportDialog.class.equals(reportDialogClass()) && resDialogText() == DEFAULT_RES_VALUE) {
+                    throw new ACRAConfigurationException("NOTIFICATION mode: using the (default) CrashReportDialog requires you have to define the resDialogText parameter in your application @ReportsCrashes() annotation.");
+                }
+                break;
+            case DIALOG:
+                if (CrashReportDialog.class.equals(reportDialogClass()) && resDialogText() == DEFAULT_RES_VALUE) {
+                    throw new ACRAConfigurationException("DIALOG mode: using the (default) CrashReportDialog requires you to define the resDialogText parameter in your application @ReportsCrashes() annotation.");
+                }
+                break;
+            default:
+                break;
+        }
+
+        if (reportSenderFactoryClasses().length == 0) {
+            throw new ACRAConfigurationException("Report sender factories: using no report senders will make ACRA useless. Configure at least one ReportSenderFactory.");
+        }
+        checkValidity((Class[]) reportSenderFactoryClasses());
+        checkValidity(reportDialogClass(), reportPrimerClass(), retryPolicyClass(), keyStoreFactoryClass());
+
+        return new ACRAConfiguration(this);
+    }
+
+    private void checkValidity(Class<?>... classes) throws ACRAConfigurationException {
+        for (Class<?> clazz : classes) {
+            if (clazz.isInterface()) {
+                throw new ACRAConfigurationException("Expected class, but found interface " + clazz.getName() + ".");
+            } else if (Modifier.isAbstract(clazz.getModifiers())) {
+                throw new ACRAConfigurationException("Class " + clazz.getName() + " cannot be abstract.");
+            }
+            try {
+                clazz.getConstructor();
+            } catch (NoSuchMethodException e) {
+                throw new ACRAConfigurationException("Class " + clazz.getName() + " is missing a no-args Constructor.", e);
+            }
+        }
+    }
+
+    /**
+     * Use this if you want to keep the default configuration of reportContent, but set some fields explicitly.
+     *
+     * @param field  the field to set
+     * @param enable if this field should be reported
+     * @return this instance
+     */
+    @NonNull
+    public ConfigurationBuilder setReportField(@NonNull ReportField field, boolean enable) {
+        this.reportContentChanges.put(field, enable);
+        return this;
+    }
+
+    /**
+     * Set custom HTTP headers to be sent by the provided {@link HttpSender}.
+     * This should be used also by third party senders.
+     *
+     * @param headers A map associating HTTP header names to their values.
+     * @return this instance
+     */
+    @NonNull
+    public ConfigurationBuilder setHttpHeaders(@NonNull Map<String, String> headers) {
+        this.httpHeaders.clear();
+        this.httpHeaders.putAll(headers);
+        return this;
+    }
+
+    @NonNull
+    Map<String, String> httpHeaders() {
+        return httpHeaders;
+    }
+
+    @Hide
+    @NonNull
+    @Override
+    ReportField[] customReportContent() {
+        return super.customReportContent();
+    }
+
+    @NonNull
+    Set<ReportField> reportContent() {
+        final Set<ReportField> reportContent = new LinkedHashSet<ReportField>();
+        if (customReportContent().length != 0) {
+            if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Using custom Report Fields");
+            reportContent.addAll(Arrays.asList(customReportContent()));
+        } else if (DEFAULT_STRING_VALUE.equals(mailTo())) {
+            if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Using default Report Fields");
+            reportContent.addAll(Arrays.asList(DEFAULT_REPORT_FIELDS));
+        } else {
+            if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Using default Mail Report Fields");
+            reportContent.addAll(Arrays.asList(DEFAULT_MAIL_REPORT_FIELDS));
+        }
+
+        // Add or remove any extra fields.
+        for (Map.Entry<ReportField, Boolean> entry : reportContentChanges.entrySet()) {
+            if (entry.getValue()) {
+                reportContent.add(entry.getKey());
+            } else {
+                reportContent.remove(entry.getKey());
+            }
+        }
+        return reportContent;
+    }
+}
diff --git a/src/main/java/org/acra/config/DefaultRetryPolicy.java b/acra/src/main/java/org/acra/config/DefaultRetryPolicy.java
similarity index 100%
rename from src/main/java/org/acra/config/DefaultRetryPolicy.java
rename to acra/src/main/java/org/acra/config/DefaultRetryPolicy.java
diff --git a/src/main/java/org/acra/config/RetryPolicy.java b/acra/src/main/java/org/acra/config/RetryPolicy.java
similarity index 100%
rename from src/main/java/org/acra/config/RetryPolicy.java
rename to acra/src/main/java/org/acra/config/RetryPolicy.java
diff --git a/src/main/java/org/acra/dialog/BaseCrashReportDialog.java b/acra/src/main/java/org/acra/dialog/BaseCrashReportDialog.java
similarity index 84%
rename from src/main/java/org/acra/dialog/BaseCrashReportDialog.java
rename to acra/src/main/java/org/acra/dialog/BaseCrashReportDialog.java
index 2e4e29ac..45676c9c 100644
--- a/src/main/java/org/acra/dialog/BaseCrashReportDialog.java
+++ b/acra/src/main/java/org/acra/dialog/BaseCrashReportDialog.java
@@ -1,8 +1,8 @@
 package org.acra.dialog;
 
-import android.app.Activity;
 import android.os.Bundle;
 import android.support.annotation.Nullable;
+import android.support.v4.app.FragmentActivity;
 import android.widget.Toast;
 
 import org.acra.ACRA;
@@ -13,6 +13,7 @@
 import org.acra.file.CrashReportPersister;
 import org.acra.sender.SenderServiceStarter;
 import org.acra.util.ToastSender;
+import org.json.JSONException;
 
 import java.io.File;
 import java.io.IOException;
@@ -32,14 +33,14 @@
  *
  * This Activity will be instantiated with 3 (or 4) arguments:
  * <ol>
- * <li>{@link ACRAConstants#EXTRA_REPORT_FILE_NAME}</li>
+ * <li>{@link ACRAConstants#EXTRA_REPORT_FILE}</li>
  * <li>{@link ACRAConstants#EXTRA_REPORT_EXCEPTION}</li>
  * <li>{@link ACRAConstants#EXTRA_REPORT_CONFIG}</li>
  * <li>{@link ACRAConstants#EXTRA_FORCE_CANCEL} (optional)</li>
  * </ol>
  */
 @SuppressWarnings({"WeakerAccess", "unused"})
-public abstract class BaseCrashReportDialog extends Activity {
+public abstract class BaseCrashReportDialog extends FragmentActivity {
 
     private File reportFile;
     private ACRAConfiguration config;
@@ -55,6 +56,7 @@
      */
     @Override
     protected final void onCreate(@Nullable Bundle savedInstanceState) {
+        preInit(savedInstanceState);
         super.onCreate(savedInstanceState);
 
 
@@ -82,6 +84,16 @@ protected final void onCreate(@Nullable Bundle savedInstanceState) {
         }
     }
 
+    /**
+     * Handle any necessary pre-onCreate() setup here.
+     *
+     * @param savedInstanceState    If the activity is being re-initialized after
+     *     previously being shut down then this Bundle contains the data it most
+     *     recently supplied in {@link #onSaveInstanceState}.  <b><i>Note: Otherwise it is null.</i></b>
+     */
+    protected void preInit(@Nullable Bundle savedInstanceState) {
+    }
+
     /**
      * Responsible for creating and showing the crash report dialog.
      *
@@ -112,11 +124,13 @@ protected final void sendCrash(@Nullable String comment, @Nullable String userEm
         try {
             if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Add user comment to " + reportFile);
             final CrashReportData crashData = persister.load(reportFile);
-            crashData.put(USER_COMMENT, comment == null ? "" : comment);
-            crashData.put(USER_EMAIL, userEmail == null ? "" : userEmail);
+            crashData.putString(USER_COMMENT, comment == null ? "" : comment);
+            crashData.putString(USER_EMAIL, userEmail == null ? "" : userEmail);
             persister.store(crashData, reportFile);
         } catch (IOException e) {
             ACRA.log.w(LOG_TAG, "User comment not added: ", e);
+        } catch (JSONException e) {
+            ACRA.log.w(LOG_TAG, "User comment not added: ", e);
         }
 
         // Start the report sending task
diff --git a/src/main/java/org/acra/dialog/CrashReportDialog.java b/acra/src/main/java/org/acra/dialog/CrashReportDialog.java
similarity index 99%
rename from src/main/java/org/acra/dialog/CrashReportDialog.java
rename to acra/src/main/java/org/acra/dialog/CrashReportDialog.java
index 59da57a9..f71f0313 100644
--- a/src/main/java/org/acra/dialog/CrashReportDialog.java
+++ b/acra/src/main/java/org/acra/dialog/CrashReportDialog.java
@@ -17,6 +17,7 @@
 
 import org.acra.ACRA;
 import org.acra.ACRAConstants;
+import org.acra.prefs.PrefUtils;
 import org.acra.prefs.SharedPreferencesFactory;
 
 
@@ -220,7 +221,7 @@ public void onClick(DialogInterface dialog, int which) {
                 userEmail = userEmailView.getText().toString();
                 final SharedPreferences.Editor prefEditor = prefs.edit();
                 prefEditor.putString(ACRA.PREF_USER_EMAIL_ADDRESS, userEmail);
-                prefEditor.commit();
+                PrefUtils.save(prefEditor);
             } else {
                 userEmail = prefs.getString(ACRA.PREF_USER_EMAIL_ADDRESS, "");
             }
diff --git a/src/main/java/org/acra/file/BulkReportDeleter.java b/acra/src/main/java/org/acra/file/BulkReportDeleter.java
similarity index 100%
rename from src/main/java/org/acra/file/BulkReportDeleter.java
rename to acra/src/main/java/org/acra/file/BulkReportDeleter.java
diff --git a/src/main/java/org/acra/file/CrashReportFileNameParser.java b/acra/src/main/java/org/acra/file/CrashReportFileNameParser.java
similarity index 100%
rename from src/main/java/org/acra/file/CrashReportFileNameParser.java
rename to acra/src/main/java/org/acra/file/CrashReportFileNameParser.java
diff --git a/acra/src/main/java/org/acra/file/CrashReportPersister.java b/acra/src/main/java/org/acra/file/CrashReportPersister.java
new file mode 100644
index 00000000..aa275ba4
--- /dev/null
+++ b/acra/src/main/java/org/acra/file/CrashReportPersister.java
@@ -0,0 +1,86 @@
+/*
+ * java.util.Properties.java modified by Kevin Gaudin to allow usage of enums as keys.
+ *
+ *  Licensed to the Apache Software Foundation (ASF) under one or more
+ *  contributor license agreements.  See the NOTICE file distributed with
+ *  this work for additional information regarding copyright ownership.
+ *  The ASF licenses this file to You under the Apache License, Version 2.0
+ *  (the "License"); you may not use this file except in compliance with
+ *  the License.  You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+
+package org.acra.file;
+
+import android.support.annotation.NonNull;
+
+import org.acra.ACRAConstants;
+import org.acra.collector.CrashReportData;
+import org.acra.util.JsonUtils;
+import org.acra.util.IOUtils;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.io.BufferedInputStream;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.OutputStreamWriter;
+
+/**
+ * Stores a crash reports data with {@link org.acra.ReportField} enum values as keys.
+ * This is basically the source of {@link java.util.Properties} adapted to extend an
+ * EnumMap instead of Hashtable and with a few tweaks to avoid losing crazy
+ * amounts of android time in the generation of a date comment when storing to
+ * file.
+ */
+public final class CrashReportPersister {
+
+    /**
+     * Loads properties from the specified {@code File}.
+     *
+     * @param file  Report file from which to load the CrashData.
+     * @return CrashReportData read from the supplied File.
+     * @throws IOException if error occurs during reading from the {@code File}.
+     * @throws JSONException if the stream cannot be parsed as a JSON object.
+     */
+    @NonNull
+    public CrashReportData load(@NonNull File file) throws IOException, JSONException {
+
+        final InputStream in = new BufferedInputStream(new FileInputStream(file), ACRAConstants.DEFAULT_BUFFER_SIZE_IN_BYTES);
+        try {
+            return JsonUtils.toCrashReportData(new JSONObject(IOUtils.streamToString(in)));
+        }finally {
+            IOUtils.safeClose(in);
+        }
+    }
+
+    /**
+     * Stores the mappings in this Properties to the specified OutputStream,
+     * putting the specified comment at the beginning. The output from this
+     * method is suitable for being read by the load() method.
+     *
+     * @param crashData     CrashReportData to save.
+     * @param file          File into which to store the CrashReportData.
+     * @throws java.io.IOException if the CrashReportData could not be written to the OutputStream.
+     */
+    public void store(@NonNull CrashReportData crashData, @NonNull File file) throws IOException {
+
+        final OutputStreamWriter writer = new OutputStreamWriter(new FileOutputStream(file), ACRAConstants.UTF8);
+        try {
+            writer.write(crashData.toJSON().toString());
+            writer.flush();
+        } finally {
+            IOUtils.safeClose(writer);
+        }
+    }
+}
diff --git a/acra/src/main/java/org/acra/file/Directory.java b/acra/src/main/java/org/acra/file/Directory.java
new file mode 100644
index 00000000..c3903d8b
--- /dev/null
+++ b/acra/src/main/java/org/acra/file/Directory.java
@@ -0,0 +1,107 @@
+/*
+ * Copyright (c) 2016
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.acra.file;
+
+import android.content.Context;
+import android.os.Environment;
+import android.support.annotation.NonNull;
+import android.support.v4.content.ContextCompat;
+
+import java.io.File;
+
+/**
+ * @author F43nd1r
+ * @since 4.9.1
+ */
+public enum Directory {
+    /**
+     * Legacy behaviour:
+     * If the string starts with a path separator, this behaves like {@link #ROOT}.
+     * Otherwise it behaves like {@link #FILES}.
+     */
+    FILES_LEGACY {
+        @Override
+        public File getFile(@NonNull Context context, @NonNull String fileName) {
+            return (fileName.startsWith("/") ? Directory.ROOT : Directory.FILES).getFile(context, fileName);
+        }
+    },
+    /**
+     * Directory returned by {@link Context#getFilesDir()}
+     */
+    FILES {
+        @Override
+        public File getFile(@NonNull Context context, @NonNull String fileName) {
+            return new File(context.getFilesDir(), fileName);
+        }
+    },
+    /**
+     * Directory returned by {@link Context#getExternalFilesDir(String)}
+     */
+    EXTERNAL_FILES {
+        @Override
+        public File getFile(@NonNull Context context, @NonNull String fileName) {
+            return new File(context.getExternalFilesDir(null), fileName);
+        }
+    },
+    /**
+     * Directory returned by {@link Context#getCacheDir()}
+     */
+    CACHE {
+        @Override
+        public File getFile(@NonNull Context context, @NonNull String fileName) {
+            return new File(context.getCacheDir(), fileName);
+        }
+    },
+    /**
+     * Directory returned by {@link Context#getExternalCacheDir()}
+     */
+    EXTERNAL_CACHE {
+        @Override
+        public File getFile(@NonNull Context context, @NonNull String fileName) {
+            return new File(context.getExternalCacheDir(), fileName);
+        }
+    },
+    /**
+     * Directory returned by {@link Context#getNoBackupFilesDir()}.
+     * Will fall back to {@link Context#getFilesDir()} on API &lt; 21
+     */
+    NO_BACKUP_FILES {
+        @Override
+        public File getFile(@NonNull Context context, @NonNull String fileName) {
+            return new File(ContextCompat.getNoBackupFilesDir(context), fileName);
+        }
+    },
+    /**
+     * Directory returned by {@link Environment#getExternalStorageDirectory()}
+     */
+    EXTERNAL_STORAGE {
+        @Override
+        public File getFile(@NonNull Context context, @NonNull String fileName) {
+            return new File(Environment.getExternalStorageDirectory(), fileName);
+        }
+    },
+    /**
+     * Root Directory, paths in this directory are absolute paths
+     */
+    ROOT {
+        @Override
+        public File getFile(@NonNull Context context, @NonNull String fileName) {
+            return new File("/", fileName);
+        }
+    };
+
+    public abstract File getFile(@NonNull Context context, @NonNull String fileName);
+}
diff --git a/src/main/java/org/acra/file/LastModifiedComparator.java b/acra/src/main/java/org/acra/file/LastModifiedComparator.java
similarity index 74%
rename from src/main/java/org/acra/file/LastModifiedComparator.java
rename to acra/src/main/java/org/acra/file/LastModifiedComparator.java
index 61dc9432..a12a5e18 100644
--- a/src/main/java/org/acra/file/LastModifiedComparator.java
+++ b/acra/src/main/java/org/acra/file/LastModifiedComparator.java
@@ -11,6 +11,8 @@
 final class LastModifiedComparator implements Comparator<File> {
     @Override
     public int compare(@NonNull File lhs, @NonNull File rhs) {
-        return (int) (lhs.lastModified() - rhs.lastModified());
+        long l = lhs.lastModified();
+        long r = rhs.lastModified();
+        return l < r ? -1 : (l == r ? 0 : 1);
     }
 }
diff --git a/src/main/java/org/acra/file/ReportLocator.java b/acra/src/main/java/org/acra/file/ReportLocator.java
similarity index 100%
rename from src/main/java/org/acra/file/ReportLocator.java
rename to acra/src/main/java/org/acra/file/ReportLocator.java
diff --git a/acra/src/main/java/org/acra/http/BaseHttpRequest.java b/acra/src/main/java/org/acra/http/BaseHttpRequest.java
new file mode 100644
index 00000000..dda45c15
--- /dev/null
+++ b/acra/src/main/java/org/acra/http/BaseHttpRequest.java
@@ -0,0 +1,201 @@
+/*
+ * Copyright (c) 2017
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.acra.http;
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.util.Base64;
+
+import org.acra.ACRA;
+import org.acra.ACRAConstants;
+import org.acra.config.ACRAConfiguration;
+import org.acra.security.KeyStoreHelper;
+import org.acra.sender.HttpSender.Method;
+import org.acra.util.IOUtils;
+
+import java.io.BufferedOutputStream;
+import java.io.IOException;
+import java.io.OutputStream;
+import java.net.HttpURLConnection;
+import java.net.URL;
+import java.security.GeneralSecurityException;
+import java.security.KeyStore;
+import java.util.Map;
+
+import javax.net.ssl.HttpsURLConnection;
+import javax.net.ssl.SSLContext;
+import javax.net.ssl.TrustManagerFactory;
+
+import ch.acra.acra.BuildConfig;
+
+import static org.acra.ACRA.LOG_TAG;
+
+/**
+ * @author F43nd1r
+ * @since 03.03.2017
+ */
+public abstract class BaseHttpRequest<T> implements HttpRequest<T> {
+
+    @NonNull
+    private final ACRAConfiguration config;
+    @NonNull
+    private final Context context;
+    @NonNull
+    private final Method method;
+    private final String login;
+    private final String password;
+    private final int connectionTimeOut;
+    private final int socketTimeOut;
+    private final Map<String, String> headers;
+
+    public BaseHttpRequest(@NonNull ACRAConfiguration config, @NonNull Context context, @NonNull Method method,
+                           @Nullable String login, @Nullable String password, int connectionTimeOut, int socketTimeOut, @Nullable Map<String, String> headers) {
+        this.config = config;
+        this.context = context;
+        this.method = method;
+        this.login = login;
+        this.password = password;
+        this.connectionTimeOut = connectionTimeOut;
+        this.socketTimeOut = socketTimeOut;
+        this.headers = headers;
+    }
+
+
+    /**
+     * Sends to a URL.
+     *
+     * @param url     URL to which to send.
+     * @param content content to send.
+     * @throws IOException if the data cannot be sent.
+     */
+    @Override
+    public void send(@NonNull URL url, @NonNull T content) throws IOException {
+
+        final HttpURLConnection urlConnection = createConnection(url);
+        if (urlConnection instanceof HttpsURLConnection) {
+            try {
+                configureHttps((HttpsURLConnection) urlConnection);
+            } catch (GeneralSecurityException e) {
+                ACRA.log.e(LOG_TAG, "Could not configure SSL for ACRA request to " + url, e);
+            }
+        }
+        configureTimeouts(urlConnection, connectionTimeOut, socketTimeOut);
+        configureHeaders(urlConnection, login, password, headers, content);
+        if(ACRA.DEV_LOGGING){
+            ACRA.log.d(LOG_TAG, "Sending request to " + url);
+            ACRA.log.d(LOG_TAG, "Http " + method.name() + " content : ");
+            ACRA.log.d(LOG_TAG, content.toString());
+        }
+        writeContent(urlConnection, method, content);
+        handleResponse(urlConnection.getResponseCode(), urlConnection.getResponseMessage());
+        urlConnection.disconnect();
+    }
+
+    @SuppressWarnings("WeakerAccess")
+    @NonNull
+    protected HttpURLConnection createConnection(@NonNull URL url) throws IOException {
+        return (HttpURLConnection) url.openConnection();
+    }
+
+    @SuppressWarnings("WeakerAccess")
+    protected void configureHttps(@NonNull HttpsURLConnection connection) throws GeneralSecurityException {
+        // Configure SSL
+        final String algorithm = TrustManagerFactory.getDefaultAlgorithm();
+        final TrustManagerFactory tmf = TrustManagerFactory.getInstance(algorithm);
+        final KeyStore keyStore = KeyStoreHelper.getKeyStore(context, config);
+
+        tmf.init(keyStore);
+
+        final SSLContext sslContext = SSLContext.getInstance("TLS");
+        sslContext.init(null, tmf.getTrustManagers(), null);
+
+        connection.setSSLSocketFactory(sslContext.getSocketFactory());
+    }
+
+    @SuppressWarnings("WeakerAccess")
+    protected void configureTimeouts(@NonNull HttpURLConnection connection, int connectionTimeOut, int socketTimeOut){
+        connection.setConnectTimeout(connectionTimeOut);
+        connection.setReadTimeout(socketTimeOut);
+    }
+
+    @SuppressWarnings("WeakerAccess")
+    protected void configureHeaders(@NonNull HttpURLConnection connection, @Nullable String login, @Nullable String password,
+                                    @Nullable Map<String, String> customHeaders, @NonNull T t) throws IOException {
+        // Set Headers
+        connection.setRequestProperty("User-Agent", String.format("Android ACRA %1$s", BuildConfig.VERSION_NAME)); //sent ACRA version to server
+        connection.setRequestProperty("Accept",
+                "text/html,application/xml,application/json,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5");
+        connection.setRequestProperty("Content-Type", getContentType(context, t));
+
+        // Set Credentials
+        if (login != null && password != null) {
+            final String credentials = login + ':' + password;
+            final String encoded = new String(Base64.encode(credentials.getBytes(ACRAConstants.UTF8), Base64.NO_WRAP), ACRAConstants.UTF8);
+            connection.setRequestProperty("Authorization", "Basic " + encoded);
+        }
+
+        if (customHeaders != null) {
+            for (final Map.Entry<String, String> header : customHeaders.entrySet()) {
+                connection.setRequestProperty(header.getKey(), header.getValue());
+            }
+        }
+    }
+
+    protected abstract String getContentType(@NonNull Context context, @NonNull T t);
+
+    @SuppressWarnings("WeakerAccess")
+    protected void writeContent(@NonNull HttpURLConnection connection, @NonNull Method method, @NonNull T content) throws IOException{
+        final byte[] contentAsBytes = asBytes(content);
+        // write output - see http://developer.android.com/reference/java/net/HttpURLConnection.html
+        connection.setRequestMethod(method.name());
+        connection.setDoOutput(true);
+        connection.setFixedLengthStreamingMode(contentAsBytes.length);
+
+        // Disable ConnectionPooling because otherwise OkHttp ConnectionPool will try to start a Thread on #connect
+        System.setProperty("http.keepAlive", "false");
+
+        connection.connect();
+
+        final OutputStream outputStream = new BufferedOutputStream(connection.getOutputStream());
+        try {
+            outputStream.write(contentAsBytes);
+            outputStream.flush();
+        } finally {
+            IOUtils.safeClose(outputStream);
+        }
+    }
+
+    protected abstract byte[] asBytes(T content) throws IOException;
+
+    @SuppressWarnings("WeakerAccess")
+    protected void handleResponse(int responseCode, String responseMessage) throws IOException {
+        if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Request response : " + responseCode + " : " + responseMessage);
+        if (responseCode >= HttpURLConnection.HTTP_OK && responseCode < HttpURLConnection.HTTP_MULT_CHOICE) {
+            // All is good
+            ACRA.log.i(LOG_TAG, "Request received by server");
+        } else if (responseCode == HttpURLConnection.HTTP_CLIENT_TIMEOUT || responseCode >= HttpURLConnection.HTTP_INTERNAL_ERROR) {
+            //timeout or server error. Repeat the request later.
+            ACRA.log.w(LOG_TAG, "Could not send ACRA Post responseCode=" + responseCode + " message=" + responseMessage);
+            throw new IOException("Host returned error code " + responseCode);
+        } else if (responseCode >= HttpURLConnection.HTTP_BAD_REQUEST && responseCode < HttpURLConnection.HTTP_INTERNAL_ERROR) {
+            // Client error. The request must not be repeated. Discard it.
+            ACRA.log.w(LOG_TAG, responseCode + ": Client error - request will be discarded");
+        } else {
+            ACRA.log.w(LOG_TAG, "Could not send ACRA Post - request will be discarded. responseCode=" + responseCode + " message=" + responseMessage);
+        }
+    }
+}
diff --git a/acra/src/main/java/org/acra/http/BinaryHttpRequest.java b/acra/src/main/java/org/acra/http/BinaryHttpRequest.java
new file mode 100644
index 00000000..a5dd08c3
--- /dev/null
+++ b/acra/src/main/java/org/acra/http/BinaryHttpRequest.java
@@ -0,0 +1,38 @@
+package org.acra.http;
+
+import android.content.Context;
+import android.net.Uri;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import org.acra.config.ACRAConfiguration;
+import org.acra.sender.HttpSender;
+
+import java.io.IOException;
+import java.util.Map;
+
+/**
+ * @author F43nd1r
+ * @since 10.03.2017
+ */
+
+public class BinaryHttpRequest extends BaseHttpRequest<Uri> {
+    @NonNull
+    private final Context context;
+
+    public BinaryHttpRequest(@NonNull ACRAConfiguration config, @NonNull Context context, @NonNull HttpSender.Method method,
+                             @Nullable String login, @Nullable String password, int connectionTimeOut, int socketTimeOut, @Nullable Map<String, String> headers) {
+        super(config, context, method, login, password, connectionTimeOut, socketTimeOut, headers);
+        this.context = context;
+    }
+
+    @Override
+    protected String getContentType(@NonNull Context context, @NonNull Uri uri) {
+        return HttpUtils.getMimeType(context, uri);
+    }
+
+    @Override
+    protected byte[] asBytes(Uri content) throws IOException {
+        return HttpUtils.uriToByteArray(context, content);
+    }
+}
diff --git a/acra/src/main/java/org/acra/http/DefaultHttpRequest.java b/acra/src/main/java/org/acra/http/DefaultHttpRequest.java
new file mode 100644
index 00000000..2e1a4052
--- /dev/null
+++ b/acra/src/main/java/org/acra/http/DefaultHttpRequest.java
@@ -0,0 +1,53 @@
+/*
+ * Copyright (c) 2017
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.acra.http;
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import org.acra.ACRAConstants;
+import org.acra.config.ACRAConfiguration;
+import org.acra.sender.HttpSender;
+
+import java.io.IOException;
+import java.util.Map;
+
+/**
+ * @author F43nd1r
+ * @since 10.03.2017
+ */
+
+public class DefaultHttpRequest extends BaseHttpRequest<String> {
+    @NonNull
+    private final HttpSender.Type type;
+
+    public DefaultHttpRequest(@NonNull ACRAConfiguration config, @NonNull Context context, @NonNull HttpSender.Method method, @NonNull HttpSender.Type type,
+                              @Nullable String login, @Nullable String password, int connectionTimeOut, int socketTimeOut, @Nullable Map<String, String> headers) {
+        super(config, context, method, login, password, connectionTimeOut, socketTimeOut, headers);
+        this.type = type;
+    }
+
+    @Override
+    protected String getContentType(@NonNull Context context, @NonNull String s) {
+        return type.getContentType();
+    }
+
+    @Override
+    protected byte[] asBytes(String content) throws IOException {
+        return content.getBytes(ACRAConstants.UTF8);
+    }
+}
diff --git a/acra/src/main/java/org/acra/http/HttpRequest.java b/acra/src/main/java/org/acra/http/HttpRequest.java
new file mode 100644
index 00000000..79e6ed16
--- /dev/null
+++ b/acra/src/main/java/org/acra/http/HttpRequest.java
@@ -0,0 +1,29 @@
+/*
+ * Copyright (c) 2017
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.acra.http;
+
+import android.support.annotation.NonNull;
+
+import java.io.IOException;
+import java.net.URL;
+
+/**
+ * @author F43nd1r
+ * @since 03.03.2017
+ */
+public interface HttpRequest<T> {
+    void send(@NonNull URL url, @NonNull T content) throws IOException;
+}
diff --git a/acra/src/main/java/org/acra/http/HttpUtils.java b/acra/src/main/java/org/acra/http/HttpUtils.java
new file mode 100644
index 00000000..ffddb072
--- /dev/null
+++ b/acra/src/main/java/org/acra/http/HttpUtils.java
@@ -0,0 +1,130 @@
+/*
+ * Copyright (c) 2017
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package org.acra.http;
+
+import android.content.ContentResolver;
+import android.content.Context;
+import android.database.Cursor;
+import android.net.Uri;
+import android.provider.OpenableColumns;
+import android.support.annotation.NonNull;
+import android.webkit.MimeTypeMap;
+
+import org.acra.ACRAConstants;
+
+import java.io.ByteArrayOutputStream;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.UnsupportedEncodingException;
+import java.net.URLEncoder;
+import java.util.Map;
+
+/**
+ * @author F43nd1r
+ * @since 11.03.2017
+ */
+
+public final class HttpUtils {
+    private HttpUtils() {
+    }
+
+    @NonNull
+    public static byte[] uriToByteArray(@NonNull Context context, Uri uri) throws IOException {
+        final InputStream inputStream = context.getContentResolver().openInputStream(uri);
+        if (inputStream == null) {
+            throw new FileNotFoundException("Could not open " + uri.toString());
+        }
+        final ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
+        final byte[] buffer = new byte[ACRAConstants.DEFAULT_BUFFER_SIZE_IN_BYTES];
+        int length;
+        while ((length = inputStream.read(buffer)) > 0) {
+            outputStream.write(buffer, 0, length);
+        }
+        return outputStream.toByteArray();
+    }
+
+    /**
+     * Converts a Map of parameters into a URL encoded Sting.
+     *
+     * @param parameters Map of parameters to convert.
+     * @return URL encoded String representing the parameters.
+     * @throws UnsupportedEncodingException if one of the parameters couldn't be converted to UTF-8.
+     */
+    @NonNull
+    public static String getParamsAsFormString(@NonNull Map<?, ?> parameters) throws UnsupportedEncodingException {
+
+        final StringBuilder dataBfr = new StringBuilder();
+        for (final Map.Entry<?, ?> entry : parameters.entrySet()) {
+            if (dataBfr.length() != 0) {
+                dataBfr.append('&');
+            }
+            final Object preliminaryValue = entry.getValue();
+            final Object value = (preliminaryValue == null) ? "" : preliminaryValue;
+            dataBfr.append(URLEncoder.encode(entry.getKey().toString(), ACRAConstants.UTF8));
+            dataBfr.append('=');
+            dataBfr.append(URLEncoder.encode(value.toString(), ACRAConstants.UTF8));
+        }
+
+        return dataBfr.toString();
+    }
+
+    public static String getFileNameFromUri(Context context, Uri uri) {
+        String result = null;
+        if (uri.getScheme().equals("content")) {
+            final Cursor cursor = context.getContentResolver().query(uri, null, null, null, null);
+            try {
+                if (cursor != null && cursor.moveToFirst()) {
+                    result = cursor.getString(cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME));
+                }
+            } finally {
+                if (cursor != null) {
+                    cursor.close();
+                }
+            }
+        }
+        if (result == null) {
+            result = uri.getPath();
+            final int cut = result.lastIndexOf('/');
+            if (cut != -1) {
+                result = result.substring(cut + 1);
+            }
+        }
+        return result;
+    }
+
+    public static String getMimeType(Context context, Uri uri) {
+        if (uri.getScheme().equals(ContentResolver.SCHEME_CONTENT)) {
+            final ContentResolver contentResolver = context.getContentResolver();
+            return contentResolver.getType(uri);
+        }
+        return guessMimeType(uri);
+    }
+
+    public static String guessMimeType(Uri uri){
+        String type = null;
+        final String fileExtension = MimeTypeMap.getFileExtensionFromUrl(uri
+                .toString());
+        if (fileExtension != null) {
+            type = MimeTypeMap.getSingleton().getMimeTypeFromExtension(
+                    fileExtension.toLowerCase());
+        }
+        if (type == null) {
+            type = "application/octet-stream";
+        }
+        return type;
+    }
+}
diff --git a/acra/src/main/java/org/acra/http/MultipartHttpRequest.java b/acra/src/main/java/org/acra/http/MultipartHttpRequest.java
new file mode 100644
index 00000000..0031bd0d
--- /dev/null
+++ b/acra/src/main/java/org/acra/http/MultipartHttpRequest.java
@@ -0,0 +1,85 @@
+/*
+ * Copyright (c) 2017
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.http;
+
+import android.content.Context;
+import android.net.Uri;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.util.Pair;
+
+import org.acra.ACRAConstants;
+import org.acra.config.ACRAConfiguration;
+import org.acra.sender.HttpSender;
+
+import java.io.ByteArrayOutputStream;
+import java.io.IOException;
+import java.io.OutputStreamWriter;
+import java.io.Writer;
+import java.util.List;
+import java.util.Map;
+
+/**
+ * @author F43nd1r
+ * @since 11.03.2017
+ */
+
+public class MultipartHttpRequest extends BaseHttpRequest<Pair<String, List<Uri>>> {
+
+    private static final String BOUNDARY = "---ACRA_REPORT_DIVIDER---";
+    private static final char NEW_LINE = '\n';
+    private static final String CONTENT_TYPE = "Content-Type: ";
+    @NonNull
+    private final Context context;
+    @NonNull
+    private final HttpSender.Type type;
+
+    public MultipartHttpRequest(@NonNull ACRAConfiguration config, @NonNull Context context, @NonNull HttpSender.Type type, @Nullable String login, @Nullable String password,
+                                int connectionTimeOut, int socketTimeOut, @Nullable Map<String, String> headers) {
+        super(config, context, HttpSender.Method.POST, login, password, connectionTimeOut, socketTimeOut, headers);
+        this.context = context;
+        this.type = type;
+    }
+
+    @Override
+    protected String getContentType(@NonNull Context context, @NonNull Pair<String, List<Uri>> stringListPair) {
+        return "multipart/mixed; boundary=" + BOUNDARY;
+    }
+
+    @Override
+    protected byte[] asBytes(Pair<String, List<Uri>> content) throws IOException {
+        final ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
+        final Writer writer = new OutputStreamWriter(outputStream, ACRAConstants.UTF8);
+        try {
+            writer.append(NEW_LINE).append(BOUNDARY).append(NEW_LINE);
+            writer.append(CONTENT_TYPE).append(type.getContentType()).append(NEW_LINE);
+            writer.append(content.first);
+            for (Uri uri : content.second) {
+                writer.append(NEW_LINE).append(BOUNDARY).append(NEW_LINE);
+                writer.append("Content-Disposition: attachment; filename=\"").append(HttpUtils.getFileNameFromUri(context, uri)).append('"').append(NEW_LINE);
+                writer.append(CONTENT_TYPE).append(HttpUtils.getMimeType(context, uri)).append(NEW_LINE);
+                writer.flush();
+                outputStream.write(HttpUtils.uriToByteArray(context, uri));
+            }
+            writer.append(NEW_LINE).append(BOUNDARY).append(NEW_LINE);
+            writer.flush();
+            return outputStream.toByteArray();
+        } finally {
+            writer.close();
+        }
+    }
+}
diff --git a/acra/src/main/java/org/acra/legacy/LegacyFileHandler.java b/acra/src/main/java/org/acra/legacy/LegacyFileHandler.java
new file mode 100644
index 00000000..e73638a2
--- /dev/null
+++ b/acra/src/main/java/org/acra/legacy/LegacyFileHandler.java
@@ -0,0 +1,58 @@
+/*
+ * Copyright (c) 2016
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.legacy;
+
+import android.content.Context;
+import android.content.SharedPreferences;
+
+import org.acra.prefs.PrefUtils;
+
+/**
+ * @author F43nd1r
+ * @since 12.10.2016
+ */
+
+public class LegacyFileHandler {
+    private static final String PREF__LEGACY_ALREADY_CONVERTED_TO_4_8_0 = "acra.legacyAlreadyConvertedTo4.8.0";
+    private static final String PREF__LEGACY_ALREADY_CONVERTED_TO_JSON = "acra.legacyAlreadyConvertedToJson";
+    private final Context context;
+    private final SharedPreferences prefs;
+
+    public LegacyFileHandler(Context context, SharedPreferences prefs) {
+        this.context = context;
+        this.prefs = prefs;
+    }
+
+    public void updateToCurrentVersionIfNecessary(){
+        // Check prefs to see if we have converted from legacy (pre 4.8.0) ACRA
+        if (!prefs.getBoolean(PREF__LEGACY_ALREADY_CONVERTED_TO_4_8_0, false)) {
+            // If not then move reports to approved/unapproved folders and mark as converted.
+            new ReportMigrator(context).migrate();
+
+            // Mark as converted.
+            final SharedPreferences.Editor editor = prefs.edit().putBoolean(PREF__LEGACY_ALREADY_CONVERTED_TO_4_8_0, true);
+            PrefUtils.save(editor);
+        }
+        if(!prefs.getBoolean(PREF__LEGACY_ALREADY_CONVERTED_TO_JSON, false)){
+            new ReportConverter(context).convert();
+
+            // Mark as converted.
+            final SharedPreferences.Editor editor = prefs.edit().putBoolean(PREF__LEGACY_ALREADY_CONVERTED_TO_JSON, true);
+            PrefUtils.save(editor);
+        }
+    }
+}
diff --git a/src/main/java/org/acra/file/CrashReportPersister.java b/acra/src/main/java/org/acra/legacy/ReportConverter.java
similarity index 62%
rename from src/main/java/org/acra/file/CrashReportPersister.java
rename to acra/src/main/java/org/acra/legacy/ReportConverter.java
index 3be7836e..071c1191 100644
--- a/src/main/java/org/acra/file/CrashReportPersister.java
+++ b/acra/src/main/java/org/acra/legacy/ReportConverter.java
@@ -1,94 +1,105 @@
 /*
- * java.util.Properties.java modified by Kevin Gaudin to allow usage of enums as keys.
+ * Copyright (c) 2016
  *
- *  Licensed to the Apache Software Foundation (ASF) under one or more
- *  contributor license agreements.  See the NOTICE file distributed with
- *  this work for additional information regarding copyright ownership.
- *  The ASF licenses this file to You under the Apache License, Version 2.0
- *  (the "License"); you may not use this file except in compliance with
- *  the License.  You may obtain a copy of the License at
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
  *
  *     http://www.apache.org/licenses/LICENSE-2.0
  *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
  */
 
-package org.acra.file;
+package org.acra.legacy;
 
+import android.content.Context;
 import android.support.annotation.NonNull;
 
+import org.acra.ACRA;
 import org.acra.ACRAConstants;
 import org.acra.ReportField;
-import org.acra.util.IOUtils;
+import org.acra.file.CrashReportPersister;
+import org.acra.file.ReportLocator;
+import org.acra.model.BooleanElement;
+import org.acra.model.ComplexElement;
 import org.acra.collector.CrashReportData;
+import org.acra.model.Element;
+import org.acra.model.NumberElement;
+import org.acra.model.StringElement;
+import org.acra.util.IOUtils;
+import org.json.JSONException;
+
+import java.io.BufferedInputStream;
+import java.io.BufferedReader;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+import java.io.Reader;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
 
-import java.io.*;
-import java.util.Map;
+import static org.acra.ACRA.LOG_TAG;
 
 /**
- * Stores a crash reports data with {@link org.acra.ReportField} enum values as keys.
- * This is basically the source of {@link java.util.Properties} adapted to extend an
- * EnumMap instead of Hashtable and with a few tweaks to avoid losing crazy
- * amounts of android time in the generation of a date comment when storing to
- * file.
+ * Converts acras old file format to json
+ *
+ * @author F43nd1r
+ * @since 12.10.2016
  */
-public final class CrashReportPersister {
 
+class ReportConverter {
     private static final int NONE = 0, SLASH = 1, UNICODE = 2, CONTINUE = 3, KEY_DONE = 4, IGNORE = 5;
-    private static final String LINE_SEPARATOR = "\n";
+    private final Context context;
 
-    /**
-     * Loads properties from the specified {@code InputStream}. The encoding is ISO8859-1.
-     *
-     * @param file  Report file from which to load the CrashData.
-     * @return CrashReportData read from the supplied InputStream.
-     * @throws java.io.IOException if error occurs during reading from the {@code InputStream}.
-     */
-    @NonNull
-    public CrashReportData load(@NonNull File file) throws IOException {
-
-        final InputStream in = new BufferedInputStream(new FileInputStream(file), ACRAConstants.DEFAULT_BUFFER_SIZE_IN_BYTES);
-        try {
-            return load(new InputStreamReader(in, "ISO8859-1")); //$NON-NLS-1$
-        } finally {
-            IOUtils.safeClose(in);
-        }
+    ReportConverter(Context context) {
+        this.context = context;
     }
 
-    /**
-     * Stores the mappings in this Properties to the specified OutputStream,
-     * putting the specified comment at the beginning. The output from this
-     * method is suitable for being read by the load() method.
-     *
-     * @param crashData     CrashReportData to save.
-     * @param file          File into which to store the CrashReportData.
-     * @throws java.io.IOException if the CrashReportData could not be written to the OutputStream.
-     */
-    public void store(@NonNull CrashReportData crashData, @NonNull File file) throws IOException {
-
-        final OutputStreamWriter writer = new OutputStreamWriter(new FileOutputStream(file), "ISO8859_1"); //$NON-NLS-1$
-        try {
-            final StringBuilder buffer = new StringBuilder(200);
-
-            for (final Map.Entry<ReportField, String> entry : crashData.entrySet()) {
-                final String key = entry.getKey().toString();
-                dumpString(buffer, key, true);
-                buffer.append('=');
-                dumpString(buffer, entry.getValue(), false);
-                buffer.append(LINE_SEPARATOR);
-                writer.write(buffer.toString());
-                buffer.setLength(0);
+    void convert() {
+        ACRA.log.i(LOG_TAG, "Converting unsent ACRA reports to json");
+        final ReportLocator locator = new ReportLocator(context);
+        final CrashReportPersister persister = new CrashReportPersister();
+        final List<File> reportFiles = new ArrayList<File>();
+        reportFiles.addAll(Arrays.asList(locator.getUnapprovedReports()));
+        reportFiles.addAll(Arrays.asList(locator.getApprovedReports()));
+        int converted = 0;
+        for (File report : reportFiles) {
+            InputStream in = null;
+            try {
+                in = new BufferedInputStream(new FileInputStream(report), ACRAConstants.DEFAULT_BUFFER_SIZE_IN_BYTES);
+                CrashReportData data = legacyLoad(new InputStreamReader(in, "ISO8859-1")); //$NON-NLS-1$
+                if (data.containsKey(ReportField.REPORT_ID) && data.containsKey(ReportField.USER_CRASH_DATE)) {
+                    persister.store(data, report);
+                    converted++;
+                } else {
+                    //reports without these keys are probably invalid
+                    IOUtils.deleteReport(report);
+                }
+            } catch (Throwable e) {
+                try {
+                    //If this succeeds the report has already been converted, happens e.g. on preference clear.
+                    persister.load(report);
+                    if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Tried to convert already converted report file " + report.getPath() + ". Ignoring");
+                } catch (Throwable t) {
+                    //File matches neither of the known formats, remove it.
+                    ACRA.log.w(LOG_TAG, "Unable to read report file " + report.getPath() + ". Deleting", e);
+                    IOUtils.deleteReport(report);
+                }
+            } finally {
+                IOUtils.safeClose(in);
             }
-            writer.flush();
-        } finally {
-            IOUtils.safeClose(writer);
         }
+        ACRA.log.i(LOG_TAG, "Converted " + converted + " unsent reports");
     }
 
+
     /**
      * Loads properties from the specified InputStream. The properties are of
      * the form <code>key=value</code>, one property per line. It may be not
@@ -112,16 +123,16 @@ public void store(@NonNull CrashReportData crashData, @NonNull File file) throws
      * "\!", "\#", "\t", "\b", "\f", and "&#92;uXXXX" (unicode character).</li>
      * </ul>
      *
-     * @param reader    Reader from which to read the properties of this CrashReportData.
+     * @param reader Reader from which to read the properties of this CrashReportData.
      * @return CrashReportData read from the supplied Reader.
      * @throws java.io.IOException if the properties could not be read.
      * @since 1.6
      */
     @NonNull
-    private synchronized CrashReportData load(@NonNull Reader reader) throws IOException {
+    private synchronized CrashReportData legacyLoad(@NonNull Reader reader) throws IOException {
         int mode = NONE, unicode = 0, count = 0;
         char nextChar;
-        char[] buf = new char[40]; //TODO: consider using a list instead of manually increasing the size when needed
+        char[] buf = new char[40];
         int offset = 0, keyLength = -1, intVal;
         boolean firstChar = true;
 
@@ -222,7 +233,24 @@ private synchronized CrashReportData load(@NonNull Reader reader) throws IOExcep
                                     keyLength = offset;
                                 }
                                 final String temp = new String(buf, 0, offset);
-                                crashData.put(Enum.valueOf(ReportField.class, temp.substring(0, keyLength)), temp.substring(keyLength));
+                                final String elementString = temp.substring(keyLength);
+                                Element element;
+                                try {
+                                    element = new ComplexElement(elementString);
+                                } catch (JSONException e1) {
+                                    try {
+                                        element = new NumberElement(Double.valueOf(elementString));
+                                    } catch (NumberFormatException e2) {
+                                        if (elementString.equals("true")) {
+                                            element = new BooleanElement(true);
+                                        } else if (elementString.equals("false")) {
+                                            element = new BooleanElement(false);
+                                        } else {
+                                            element = new StringElement(elementString);
+                                        }
+                                    }
+                                }
+                                crashData.put(Enum.valueOf(ReportField.class, temp.substring(0, keyLength)), element);
                             }
                             keyLength = -1;
                             offset = 0;
@@ -280,7 +308,23 @@ private synchronized CrashReportData load(@NonNull Reader reader) throws IOExcep
                 if (mode == SLASH) {
                     value += "\u0000";
                 }
-                crashData.put(key, value);
+                Element element;
+                try {
+                    element = new ComplexElement(value);
+                } catch (JSONException e1) {
+                    try {
+                        element = new NumberElement(Double.valueOf(value));
+                    } catch (NumberFormatException e2) {
+                        if (value.equals("true")) {
+                            element = new BooleanElement(true);
+                        } else if (value.equals("false")) {
+                            element = new BooleanElement(false);
+                        } else {
+                            element = new StringElement(value);
+                        }
+                    }
+                }
+                crashData.put(key, element);
             }
 
             IOUtils.safeClose(reader);
@@ -290,51 +334,4 @@ private synchronized CrashReportData load(@NonNull Reader reader) throws IOExcep
             IOUtils.safeClose(br);
         }
     }
-
-    /**
-     * Constructs a new {@code Properties} object.
-     *
-     * @param buffer    StringBuilder to populate with the supplied property.
-     * @param string    String to append to the buffer.
-     * @param key       Whether the String is a key value or not.
-     */
-    private void dumpString(@NonNull StringBuilder buffer, @NonNull String string, boolean key) {
-        int i = 0;
-        if (!key && i < string.length() && string.charAt(i) == ' ') {
-            buffer.append("\\ "); //$NON-NLS-1$
-            i++;
-        }
-
-        for (; i < string.length(); i++) {
-            char ch = string.charAt(i);
-            switch (ch) {
-            case '\t':
-                buffer.append("\\t"); //$NON-NLS-1$
-                break;
-            case '\n':
-                buffer.append("\\n"); //$NON-NLS-1$
-                break;
-            case '\f':
-                buffer.append("\\f"); //$NON-NLS-1$
-                break;
-            case '\r':
-                buffer.append("\\r"); //$NON-NLS-1$
-                break;
-            default:
-                if ("\\#!=:".indexOf(ch) >= 0 || (key && ch == ' ')) {
-                    buffer.append('\\');
-                }
-                if (ch >= ' ' && ch <= '~') {
-                    buffer.append(ch);
-                } else {
-                    final String hex = Integer.toHexString(ch);
-                    buffer.append("\\u"); //$NON-NLS-1$
-                    for (int j = 0; j < 4 - hex.length(); j++) {
-                        buffer.append('0'); //$NON-NLS-1$
-                    }
-                    buffer.append(hex);
-                }
-            }
-        }
-    }
 }
diff --git a/src/main/java/org/acra/legacy/ReportMigrator.java b/acra/src/main/java/org/acra/legacy/ReportMigrator.java
similarity index 95%
rename from src/main/java/org/acra/legacy/ReportMigrator.java
rename to acra/src/main/java/org/acra/legacy/ReportMigrator.java
index 83a29059..f6abe927 100644
--- a/src/main/java/org/acra/legacy/ReportMigrator.java
+++ b/acra/src/main/java/org/acra/legacy/ReportMigrator.java
@@ -16,19 +16,19 @@
 /**
  * Migrates reports from the pre 4.8.0 location to the 4.8.0+ locations.
  */
-public final class ReportMigrator {
+final class ReportMigrator {
 
     private final Context context;
     private final CrashReportFileNameParser fileNameParser = new CrashReportFileNameParser();
     @NonNull
     private final ReportLocator reportLocator;
 
-    public ReportMigrator(@NonNull Context context) {
+    ReportMigrator(@NonNull Context context) {
         this.context = context;
         this.reportLocator = new ReportLocator(context);
     }
 
-    public void migrate() {
+    void migrate() {
         ACRA.log.i(LOG_TAG, "Migrating unsent ACRA reports to new file locations");
 
         final File[] reportFiles = getCrashReportFiles();
diff --git a/src/main/java/org/acra/log/ACRALog.java b/acra/src/main/java/org/acra/log/ACRALog.java
similarity index 97%
rename from src/main/java/org/acra/log/ACRALog.java
rename to acra/src/main/java/org/acra/log/ACRALog.java
index 1f70afd6..c909448a 100644
--- a/src/main/java/org/acra/log/ACRALog.java
+++ b/acra/src/main/java/org/acra/log/ACRALog.java
@@ -1,30 +1,30 @@
-package org.acra.log;
-
-import android.support.annotation.Nullable;
-
-/**
- * Responsible for providing ACRA classes with a platform neutral way of logging.
- * <p>
- *     One reason for using this mechanism is to allow ACRA classes to use a logging system,
- *     but be able to execute in a test environment outside of an Android JVM.
- * </p>
- * @author William Ferguson
- * @since 4.3.0
- */
-public interface ACRALog {
-    int v(java.lang.String tag, java.lang.String msg);
-    int v(java.lang.String tag, java.lang.String msg, java.lang.Throwable tr);
-    int d(java.lang.String tag, java.lang.String msg);
-    int d(java.lang.String tag, java.lang.String msg, java.lang.Throwable tr);
-    int i(java.lang.String tag, java.lang.String msg);
-    int i(java.lang.String tag, java.lang.String msg, java.lang.Throwable tr);
-    int w(java.lang.String tag, java.lang.String msg);
-    int w(java.lang.String tag, java.lang.String msg, java.lang.Throwable tr);
-    //public native  boolean isLoggable(java.lang.String tag, int level);
-    int w(java.lang.String tag, java.lang.Throwable tr);
-    int e(java.lang.String tag, java.lang.String msg);
-    int e(java.lang.String tag, java.lang.String msg, java.lang.Throwable tr);
-    @Nullable
-    java.lang.String getStackTraceString(java.lang.Throwable tr);
-    //public native  int println(int priority, java.lang.String tag, java.lang.String msg);
-}
+package org.acra.log;
+
+import android.support.annotation.Nullable;
+
+/**
+ * Responsible for providing ACRA classes with a platform neutral way of logging.
+ * <p>
+ *     One reason for using this mechanism is to allow ACRA classes to use a logging system,
+ *     but be able to execute in a test environment outside of an Android JVM.
+ * </p>
+ * @author William Ferguson
+ * @since 4.3.0
+ */
+public interface ACRALog {
+    int v(java.lang.String tag, java.lang.String msg);
+    int v(java.lang.String tag, java.lang.String msg, java.lang.Throwable tr);
+    int d(java.lang.String tag, java.lang.String msg);
+    int d(java.lang.String tag, java.lang.String msg, java.lang.Throwable tr);
+    int i(java.lang.String tag, java.lang.String msg);
+    int i(java.lang.String tag, java.lang.String msg, java.lang.Throwable tr);
+    int w(java.lang.String tag, java.lang.String msg);
+    int w(java.lang.String tag, java.lang.String msg, java.lang.Throwable tr);
+    //public native  boolean isLoggable(java.lang.String tag, int level);
+    int w(java.lang.String tag, java.lang.Throwable tr);
+    int e(java.lang.String tag, java.lang.String msg);
+    int e(java.lang.String tag, java.lang.String msg, java.lang.Throwable tr);
+    @Nullable
+    java.lang.String getStackTraceString(java.lang.Throwable tr);
+    //public native  int println(int priority, java.lang.String tag, java.lang.String msg);
+}
diff --git a/src/main/java/org/acra/log/AndroidLogDelegate.java b/acra/src/main/java/org/acra/log/AndroidLogDelegate.java
similarity index 96%
rename from src/main/java/org/acra/log/AndroidLogDelegate.java
rename to acra/src/main/java/org/acra/log/AndroidLogDelegate.java
index be95efa0..d7e585e5 100644
--- a/src/main/java/org/acra/log/AndroidLogDelegate.java
+++ b/acra/src/main/java/org/acra/log/AndroidLogDelegate.java
@@ -1,63 +1,63 @@
-package org.acra.log;
-
-
-import android.util.Log;
-
-/**
- * Responsible for delegating calls to the Android logging system.
- *
- * @author William Ferguson
- * @since 4.3.0
- */
-public final class AndroidLogDelegate implements ACRALog {
-    @Override
-    public int v(String tag, String msg) {
-        return Log.v(tag, msg);
-    }
-    @Override
-    public int v(String tag, String msg, Throwable tr) {
-        return Log.v(tag, msg, tr);
-    }
-    @Override
-    public int d(String tag, String msg) {
-        return Log.d(tag, msg);
-    }
-    @Override
-    public int d(String tag, String msg, Throwable tr) {
-        return Log.d(tag, msg, tr);
-    }
-    @Override
-    public int i(String tag, String msg) {
-        return Log.i(tag, msg);
-    }
-    @Override
-    public int i(String tag, String msg, Throwable tr) {
-        return Log.i(tag, msg, tr);
-    }
-    @Override
-    public int w(String tag, String msg) {
-        return Log.w(tag, msg);
-    }
-    @Override
-    public int w(String tag, String msg, Throwable tr) {
-        return Log.w(tag, msg, tr);
-    }
-    //public native  boolean isLoggable(java.lang.String tag, int level);
-    @Override
-    public int w(String tag, Throwable tr) {
-        return Log.w(tag, tr);
-    }
-    @Override
-    public int e(String tag, String msg) {
-        return Log.e(tag, msg);
-    }
-    @Override
-    public int e(String tag, String msg, Throwable tr) {
-        return Log.e(tag, msg, tr);
-    }
-    @Override
-    public String getStackTraceString(Throwable tr) {
-        return Log.getStackTraceString(tr);
-    }
-    //public native  int println(int priority, java.lang.String tag, java.lang.String msg);
-}
+package org.acra.log;
+
+
+import android.util.Log;
+
+/**
+ * Responsible for delegating calls to the Android logging system.
+ *
+ * @author William Ferguson
+ * @since 4.3.0
+ */
+public final class AndroidLogDelegate implements ACRALog {
+    @Override
+    public int v(String tag, String msg) {
+        return Log.v(tag, msg);
+    }
+    @Override
+    public int v(String tag, String msg, Throwable tr) {
+        return Log.v(tag, msg, tr);
+    }
+    @Override
+    public int d(String tag, String msg) {
+        return Log.d(tag, msg);
+    }
+    @Override
+    public int d(String tag, String msg, Throwable tr) {
+        return Log.d(tag, msg, tr);
+    }
+    @Override
+    public int i(String tag, String msg) {
+        return Log.i(tag, msg);
+    }
+    @Override
+    public int i(String tag, String msg, Throwable tr) {
+        return Log.i(tag, msg, tr);
+    }
+    @Override
+    public int w(String tag, String msg) {
+        return Log.w(tag, msg);
+    }
+    @Override
+    public int w(String tag, String msg, Throwable tr) {
+        return Log.w(tag, msg, tr);
+    }
+    //public native  boolean isLoggable(java.lang.String tag, int level);
+    @Override
+    public int w(String tag, Throwable tr) {
+        return Log.w(tag, tr);
+    }
+    @Override
+    public int e(String tag, String msg) {
+        return Log.e(tag, msg);
+    }
+    @Override
+    public int e(String tag, String msg, Throwable tr) {
+        return Log.e(tag, msg, tr);
+    }
+    @Override
+    public String getStackTraceString(Throwable tr) {
+        return Log.getStackTraceString(tr);
+    }
+    //public native  int println(int priority, java.lang.String tag, java.lang.String msg);
+}
diff --git a/src/main/java/org/acra/log/HollowLog.java b/acra/src/main/java/org/acra/log/HollowLog.java
similarity index 100%
rename from src/main/java/org/acra/log/HollowLog.java
rename to acra/src/main/java/org/acra/log/HollowLog.java
diff --git a/acra/src/main/java/org/acra/model/BooleanElement.java b/acra/src/main/java/org/acra/model/BooleanElement.java
new file mode 100644
index 00000000..29559568
--- /dev/null
+++ b/acra/src/main/java/org/acra/model/BooleanElement.java
@@ -0,0 +1,45 @@
+/*
+ * Copyright (c) 2016
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.model;
+
+/**
+ * @author F43nd1r
+ * @since 13.10.2016
+ */
+
+public class BooleanElement implements Element {
+    private final boolean content;
+
+    public BooleanElement(boolean content) {
+        this.content = content;
+    }
+
+    @Override
+    public Object value() {
+        return content;
+    }
+
+    @Override
+    public String[] flatten() {
+        return new String[]{toString()};
+    }
+
+    @Override
+    public String toString() {
+        return String.valueOf(content);
+    }
+}
diff --git a/acra/src/main/java/org/acra/model/ComplexElement.java b/acra/src/main/java/org/acra/model/ComplexElement.java
new file mode 100644
index 00000000..7e2a9f84
--- /dev/null
+++ b/acra/src/main/java/org/acra/model/ComplexElement.java
@@ -0,0 +1,74 @@
+/*
+ * Copyright (c) 2016
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.model;
+
+import android.support.annotation.NonNull;
+
+import org.acra.util.JsonUtils;
+import org.json.JSONArray;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.util.Map;
+
+/**
+ * @author F43nd1r
+ * @since 12.10.2016
+ */
+public class ComplexElement extends JSONObject implements Element {
+    public ComplexElement() {
+    }
+
+    public ComplexElement(String json) throws JSONException {
+        super(json);
+    }
+
+    public ComplexElement(Map<String, ?> copyFrom) {
+        super(copyFrom);
+    }
+
+    public ComplexElement(JSONObject copyFrom) throws JSONException {
+        super(copyFrom, getNames(copyFrom));
+    }
+
+    @NonNull
+    private static String[] getNames(JSONObject object) throws JSONException {
+        JSONArray json = object.names();
+        if(json != null) {
+            String[] names = new String[json.length()];
+            for (int i = 0; i < json.length(); i++) {
+                names[i] = json.getString(i);
+            }
+            return names;
+        }
+        return new String[0];
+    }
+
+    @Override
+    public Object value() {
+        return this;
+    }
+
+    @Override
+    public String[] flatten() {
+        try {
+            return JsonUtils.flatten(this).toArray(new String[0]);
+        } catch (JSONException e) {
+            return new String[0];
+        }
+    }
+}
diff --git a/acra/src/main/java/org/acra/model/Element.java b/acra/src/main/java/org/acra/model/Element.java
new file mode 100644
index 00000000..7e7e1ac0
--- /dev/null
+++ b/acra/src/main/java/org/acra/model/Element.java
@@ -0,0 +1,31 @@
+/*
+ * Copyright (c) 2016
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.model;
+
+/**
+ * @author F43nd1r
+ * @since 12.10.2016
+ */
+public interface Element {
+    /**
+     * @return this elements json value.
+     * This must be one of the valid json types: bull, boolean, number, String, JSONObject or JSONArray
+     */
+    Object value();
+
+    String[] flatten();
+}
diff --git a/acra/src/main/java/org/acra/model/NumberElement.java b/acra/src/main/java/org/acra/model/NumberElement.java
new file mode 100644
index 00000000..98c8109d
--- /dev/null
+++ b/acra/src/main/java/org/acra/model/NumberElement.java
@@ -0,0 +1,45 @@
+/*
+ * Copyright (c) 2016
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.model;
+
+/**
+ * @author F43nd1r
+ * @since 13.10.2016
+ */
+
+public class NumberElement implements Element {
+    private final Number content;
+
+    public NumberElement(Number content) {
+        this.content = content;
+    }
+
+    @Override
+    public Object value() {
+        return content;
+    }
+
+    @Override
+    public String[] flatten() {
+        return new String[]{toString()};
+    }
+
+    @Override
+    public String toString() {
+        return content.toString();
+    }
+}
diff --git a/acra/src/main/java/org/acra/model/StringElement.java b/acra/src/main/java/org/acra/model/StringElement.java
new file mode 100644
index 00000000..8d33b72f
--- /dev/null
+++ b/acra/src/main/java/org/acra/model/StringElement.java
@@ -0,0 +1,44 @@
+/*
+ * Copyright (c) 2016
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.model;
+
+/**
+ * @author F43nd1r
+ * @since 12.10.2016
+ */
+public class StringElement implements Element {
+    private final String content;
+
+    public StringElement(String content) {
+        this.content = content;
+    }
+
+    @Override
+    public Object value() {
+        return content;
+    }
+
+    @Override
+    public String[] flatten() {
+        return new String[]{content};
+    }
+
+    @Override
+    public String toString() {
+        return content;
+    }
+}
diff --git a/src/main/java/org/acra/prefs/PrefUtils.java b/acra/src/main/java/org/acra/prefs/PrefUtils.java
similarity index 100%
rename from src/main/java/org/acra/prefs/PrefUtils.java
rename to acra/src/main/java/org/acra/prefs/PrefUtils.java
diff --git a/src/main/java/org/acra/prefs/SharedPreferencesFactory.java b/acra/src/main/java/org/acra/prefs/SharedPreferencesFactory.java
similarity index 100%
rename from src/main/java/org/acra/prefs/SharedPreferencesFactory.java
rename to acra/src/main/java/org/acra/prefs/SharedPreferencesFactory.java
diff --git a/src/main/java/org/acra/security/AssetKeyStoreFactory.java b/acra/src/main/java/org/acra/security/AssetKeyStoreFactory.java
similarity index 100%
rename from src/main/java/org/acra/security/AssetKeyStoreFactory.java
rename to acra/src/main/java/org/acra/security/AssetKeyStoreFactory.java
diff --git a/src/main/java/org/acra/security/BaseKeyStoreFactory.java b/acra/src/main/java/org/acra/security/BaseKeyStoreFactory.java
similarity index 100%
rename from src/main/java/org/acra/security/BaseKeyStoreFactory.java
rename to acra/src/main/java/org/acra/security/BaseKeyStoreFactory.java
diff --git a/src/main/java/org/acra/security/FileKeyStoreFactory.java b/acra/src/main/java/org/acra/security/FileKeyStoreFactory.java
similarity index 100%
rename from src/main/java/org/acra/security/FileKeyStoreFactory.java
rename to acra/src/main/java/org/acra/security/FileKeyStoreFactory.java
diff --git a/src/main/java/org/acra/security/KeyStoreFactory.java b/acra/src/main/java/org/acra/security/KeyStoreFactory.java
similarity index 100%
rename from src/main/java/org/acra/security/KeyStoreFactory.java
rename to acra/src/main/java/org/acra/security/KeyStoreFactory.java
diff --git a/src/main/java/org/acra/security/KeyStoreHelper.java b/acra/src/main/java/org/acra/security/KeyStoreHelper.java
similarity index 82%
rename from src/main/java/org/acra/security/KeyStoreHelper.java
rename to acra/src/main/java/org/acra/security/KeyStoreHelper.java
index 569b5b4e..ace808b3 100644
--- a/src/main/java/org/acra/security/KeyStoreHelper.java
+++ b/acra/src/main/java/org/acra/security/KeyStoreHelper.java
@@ -19,14 +19,12 @@
 import android.support.annotation.NonNull;
 import android.support.annotation.Nullable;
 
-import org.acra.ACRA;
 import org.acra.ACRAConstants;
 import org.acra.config.ACRAConfiguration;
+import org.acra.util.InstanceCreator;
 
 import java.security.KeyStore;
 
-import static org.acra.ACRA.LOG_TAG;
-
 /**
  * Helper to get a KeyStore from a configuration
  *
@@ -47,15 +45,8 @@ private KeyStoreHelper() {
      */
     @Nullable
     public static KeyStore getKeyStore(@NonNull Context context, @NonNull ACRAConfiguration config) {
-        final Class<? extends KeyStoreFactory> keyStoreFactory = config.keyStoreFactoryClass();
-        KeyStore keyStore = null;
-        try {
-            keyStore = keyStoreFactory.newInstance().create(context);
-        } catch (InstantiationException e) {
-            ACRA.log.e(LOG_TAG, "Could not get keystore from factory", e);
-        } catch (IllegalAccessException e) {
-            ACRA.log.e(LOG_TAG, "Could not get keystore from factory", e);
-        }
+        final InstanceCreator instanceCreator = new InstanceCreator();
+        KeyStore keyStore = instanceCreator.create(config.keyStoreFactoryClass(), new NoKeyStoreFactory()).create(context);
         if(keyStore == null) {
             //either users factory did not create a keystore, or the configuration is default {@link NoKeyStoreFactory}
             final int certificateRes = config.resCertificate();
diff --git a/src/main/java/org/acra/security/NoKeyStoreFactory.java b/acra/src/main/java/org/acra/security/NoKeyStoreFactory.java
similarity index 100%
rename from src/main/java/org/acra/security/NoKeyStoreFactory.java
rename to acra/src/main/java/org/acra/security/NoKeyStoreFactory.java
diff --git a/src/main/java/org/acra/security/ResourceKeyStoreFactory.java b/acra/src/main/java/org/acra/security/ResourceKeyStoreFactory.java
similarity index 100%
rename from src/main/java/org/acra/security/ResourceKeyStoreFactory.java
rename to acra/src/main/java/org/acra/security/ResourceKeyStoreFactory.java
diff --git a/src/main/java/org/acra/sender/DefaultReportSenderFactory.java b/acra/src/main/java/org/acra/sender/DefaultReportSenderFactory.java
similarity index 97%
rename from src/main/java/org/acra/sender/DefaultReportSenderFactory.java
rename to acra/src/main/java/org/acra/sender/DefaultReportSenderFactory.java
index 829d0be0..e11db3e2 100644
--- a/src/main/java/org/acra/sender/DefaultReportSenderFactory.java
+++ b/acra/src/main/java/org/acra/sender/DefaultReportSenderFactory.java
@@ -25,7 +25,7 @@ public ReportSender create(@NonNull Context context, @NonNull ACRAConfiguration
         final PackageManagerWrapper pm = new PackageManagerWrapper(context);
         if (!"".equals(config.mailTo())) {
             // Try to send by mail. If a mailTo address is provided, do not add other senders.
-            ACRA.log.w(LOG_TAG, context.getPackageName() + " reports will be sent by email (if accepted by user).");
+            ACRA.log.i(LOG_TAG, context.getPackageName() + " reports will be sent by email (if accepted by user).");
             return new EmailIntentSenderFactory().create(context, config);
         } else if (!pm.hasPermission(Manifest.permission.INTERNET)) {
             // NB If the PackageManager has died then this will erroneously log
diff --git a/acra/src/main/java/org/acra/sender/EmailIntentSender.java b/acra/src/main/java/org/acra/sender/EmailIntentSender.java
new file mode 100644
index 00000000..5501f536
--- /dev/null
+++ b/acra/src/main/java/org/acra/sender/EmailIntentSender.java
@@ -0,0 +1,162 @@
+/*
+ *  Copyright 2010 Kevin Gaudin
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.acra.sender;
+
+import android.content.ComponentName;
+import android.content.Context;
+import android.content.Intent;
+import android.content.pm.PackageManager;
+import android.content.pm.ResolveInfo;
+import android.net.Uri;
+import android.os.Build;
+import android.support.annotation.NonNull;
+import android.text.TextUtils;
+
+import org.acra.ACRA;
+import org.acra.ACRAConstants;
+import org.acra.ReportField;
+import org.acra.annotation.ReportsCrashes;
+import org.acra.attachment.DefaultAttachmentProvider;
+import org.acra.collections.ImmutableSet;
+import org.acra.collector.CrashReportData;
+import org.acra.config.ACRAConfiguration;
+import org.acra.model.Element;
+import org.acra.util.InstanceCreator;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Set;
+
+import static org.acra.ACRA.LOG_TAG;
+
+/**
+ * Send reports through an email intent.
+ * <p>
+ * The user will be asked to chose his preferred email client. Included report fields can be defined using
+ * {@link org.acra.annotation.ReportsCrashes#customReportContent()}. Crash receiving mailbox has to be
+ * defined with {@link ReportsCrashes#mailTo()}.
+ */
+public class EmailIntentSender implements ReportSender {
+
+    private final ACRAConfiguration config;
+
+    public EmailIntentSender(@NonNull ACRAConfiguration config) {
+        this.config = config;
+    }
+
+    @Override
+    public void send(@NonNull Context context, @NonNull CrashReportData errorContent) throws ReportSenderException {
+        final PackageManager pm = context.getPackageManager();
+
+        final String subject = context.getPackageName() + " Crash Report";
+        final String body = buildBody(errorContent);
+        final InstanceCreator instanceCreator = new InstanceCreator();
+        final ArrayList<Uri> attachments = instanceCreator.create(config.attachmentUriProvider(), new DefaultAttachmentProvider()).getAttachments(context, config);
+
+        final Intent resolveIntent = new Intent(android.content.Intent.ACTION_SENDTO);
+        resolveIntent.setData(Uri.fromParts("mailto", config.mailTo(), null));
+        resolveIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+        resolveIntent.putExtra(android.content.Intent.EXTRA_SUBJECT, subject);
+        resolveIntent.putExtra(android.content.Intent.EXTRA_TEXT, body);
+        final ComponentName componentName = resolveIntent.resolveActivity(pm);
+        if (componentName != null) {
+            if (attachments.size() == 0) {
+                context.startActivity(resolveIntent);
+            } else {
+                String packageName = componentName.getPackageName();
+                final Intent emailIntent = new Intent(Intent.ACTION_SEND_MULTIPLE);
+                emailIntent.putExtra(Intent.EXTRA_EMAIL, new String[]{config.mailTo()});
+                emailIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+                emailIntent.putExtra(Intent.EXTRA_SUBJECT, subject);
+                emailIntent.putExtra(Intent.EXTRA_TEXT, body);
+                emailIntent.setType("message/rfc822");
+                emailIntent.putParcelableArrayListExtra(Intent.EXTRA_STREAM, attachments);
+                if (packageName.equals("android")) {
+                    //multiple activities support the intent and no default is set
+                    final List<Intent> initialIntents = buildInitialIntents(context, pm, resolveIntent, emailIntent, attachments);
+                    if (initialIntents.size() > 1) {
+                        showChooser(context, initialIntents);
+                        return;
+                    } else if (initialIntents.size() == 1) {
+                        //only one of them supports attachments, use that one
+                        packageName = initialIntents.get(0).getPackage();
+                    }
+                }
+                emailIntent.setPackage(packageName);
+                if (emailIntent.resolveActivity(pm) != null) {
+                    grantPermission(context, emailIntent, packageName, attachments);
+                    context.startActivity(emailIntent);
+                } else {
+                    ACRA.log.w(LOG_TAG, "No email client supporting attachments found. Attachments will be ignored");
+                    context.startActivity(resolveIntent);
+                }
+            }
+        } else {
+            throw new ReportSenderException("No email client found");
+        }
+    }
+
+    private List<Intent> buildInitialIntents(@NonNull Context context, @NonNull PackageManager pm, @NonNull Intent resolveIntent, @NonNull Intent emailIntent, @NonNull List<Uri> attachments) {
+        final List<ResolveInfo> resolveInfoList = pm.queryIntentActivities(resolveIntent, PackageManager.MATCH_DEFAULT_ONLY);
+        final List<Intent> initialIntents = new ArrayList<Intent>();
+        for (ResolveInfo info : resolveInfoList) {
+            final Intent packageSpecificIntent = new Intent(emailIntent);
+            packageSpecificIntent.setPackage(info.activityInfo.packageName);
+            grantPermission(context, emailIntent, info.activityInfo.packageName, attachments);
+            if (packageSpecificIntent.resolveActivity(pm) != null) {
+                initialIntents.add(packageSpecificIntent);
+            }
+        }
+        return initialIntents;
+    }
+
+    private void showChooser(@NonNull Context context, @NonNull List<Intent> initialIntents) {
+        final Intent chooser = new Intent(Intent.ACTION_CHOOSER);
+        chooser.putExtra(Intent.EXTRA_INTENT, initialIntents.remove(0));
+        chooser.putExtra(Intent.EXTRA_INITIAL_INTENTS, initialIntents.toArray(new Intent[initialIntents.size()]));
+        chooser.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+        context.startActivity(chooser);
+    }
+
+    private void grantPermission(@NonNull Context context, Intent intent, String packageName, List<Uri> attachments) {
+        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
+            intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
+        } else {
+            //flags do not work on extras prior to lollipop, so we have to grant read permissions manually
+            for (Uri uri : attachments) {
+                context.grantUriPermission(packageName, uri, Intent.FLAG_GRANT_READ_URI_PERMISSION);
+            }
+        }
+    }
+
+    private String buildBody(@NonNull CrashReportData errorContent) {
+        Set<ReportField> fields = config.reportContent();
+        if (fields.isEmpty()) {
+            fields = new ImmutableSet<ReportField>(ACRAConstants.DEFAULT_MAIL_REPORT_FIELDS);
+        }
+
+        final StringBuilder builder = new StringBuilder();
+        for (ReportField field : fields) {
+            builder.append(field.toString()).append('=');
+            final Element value = errorContent.get(field);
+            if (value != null) {
+                builder.append(TextUtils.join("\n\t", value.flatten()));
+            }
+            builder.append('\n');
+        }
+        return builder.toString();
+    }
+}
diff --git a/src/main/java/org/acra/sender/EmailIntentSenderFactory.java b/acra/src/main/java/org/acra/sender/EmailIntentSenderFactory.java
similarity index 100%
rename from src/main/java/org/acra/sender/EmailIntentSenderFactory.java
rename to acra/src/main/java/org/acra/sender/EmailIntentSenderFactory.java
diff --git a/acra/src/main/java/org/acra/sender/HttpSender.java b/acra/src/main/java/org/acra/sender/HttpSender.java
new file mode 100644
index 00000000..32807d3e
--- /dev/null
+++ b/acra/src/main/java/org/acra/sender/HttpSender.java
@@ -0,0 +1,348 @@
+/*
+ *  Copyright 2010 Kevin Gaudin
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.acra.sender;
+
+import android.content.Context;
+import android.net.Uri;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+import android.text.TextUtils;
+import android.util.Pair;
+
+import org.acra.ACRA;
+import org.acra.ACRAConstants;
+import org.acra.ReportField;
+import org.acra.annotation.ReportsCrashes;
+import org.acra.attachment.DefaultAttachmentProvider;
+import org.acra.collections.ImmutableSet;
+import org.acra.collector.CrashReportData;
+import org.acra.config.ACRAConfiguration;
+import org.acra.http.BinaryHttpRequest;
+import org.acra.http.DefaultHttpRequest;
+import org.acra.http.HttpUtils;
+import org.acra.http.MultipartHttpRequest;
+import org.acra.model.Element;
+import org.acra.util.InstanceCreator;
+import org.json.JSONObject;
+
+import java.io.IOException;
+import java.net.MalformedURLException;
+import java.net.URL;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+import static org.acra.ACRA.LOG_TAG;
+
+/**
+ * <p>
+ * The {@link ReportSender} used by ACRA when {@link ReportsCrashes#formUri()}
+ * has been defined in order to post crash data to a custom server-side data
+ * collection script. It sends all data in a POST request with parameters named
+ * with easy to understand names (basically a string conversion of
+ * {@link ReportField} enum values) or based on your own conversion Map from
+ * {@link ReportField} values to String.
+ * </p>
+ * <p>
+ * To use specific POST parameter names, you can provide your own report fields
+ * mapping scheme:
+ * </p>
+ * <pre>
+ * Just create and declare a {@link ReportSenderFactory} that constructs a mapping
+ * from each {@link ReportField} to another name.
+ * </pre>
+ */
+public class HttpSender implements ReportSender {
+
+    /**
+     * Available HTTP methods to send data. Only POST and PUT are currently
+     * supported.
+     */
+    public enum Method {
+        POST {
+            @Override
+            URL createURL(String baseUrl, CrashReportData report) throws MalformedURLException {
+                return new URL(baseUrl);
+            }
+        },
+        PUT {
+            @Override
+            URL createURL(String baseUrl, CrashReportData report) throws MalformedURLException {
+                return new URL(baseUrl + '/' + report.getProperty(ReportField.REPORT_ID));
+            }
+        };
+
+        abstract URL createURL(String baseUrl, CrashReportData report) throws MalformedURLException;
+    }
+
+    /**
+     * Type of report data encoding, currently supports Html Form encoding and
+     * JSON.
+     */
+    public enum Type {
+        /**
+         * Send data as a www form encoded list of key/values.
+         *
+         * @see <a href="http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4">Form content types</a>
+         */
+        FORM("application/x-www-form-urlencoded") {
+            @Override
+            String convertReport(HttpSender sender, CrashReportData report) throws IOException {
+                return HttpUtils.getParamsAsFormString(sender.convertToForm(report));
+            }
+        },
+        /**
+         * Send data as a structured JSON tree.
+         */
+        JSON("application/json") {
+            @Override
+            String convertReport(HttpSender sender, CrashReportData report) throws IOException {
+                return sender.convertToJson(report).toString();
+            }
+        };
+        private final String contentType;
+
+        Type(String contentType) {
+            this.contentType = contentType;
+        }
+
+        @NonNull
+        public String getContentType() {
+            return contentType;
+        }
+
+        abstract String convertReport(HttpSender sender, CrashReportData report) throws IOException;
+    }
+
+    private final ACRAConfiguration config;
+    @Nullable
+    private final Uri mFormUri;
+    private final Map<ReportField, String> mMapping;
+    private final Method mMethod;
+    private final Type mType;
+    @Nullable
+    private String mUsername;
+    @Nullable
+    private String mPassword;
+
+    /**
+     * <p>
+     * Create a new HttpSender instance with its destination taken from the supplied config.
+     * Uses {@link ReportField} values converted to String with .toString() as form parameters.
+     * </p>
+     *
+     * @param config AcraConfig declaring the
+     * @param method HTTP {@link Method} to be used to send data. Currently only
+     *               {@link Method#POST} and {@link Method#PUT} are available. If
+     *               {@link Method#PUT} is used, the {@link ReportField#REPORT_ID}
+     *               is appended to the formUri to be compliant with RESTful APIs.
+     * @param type   {@link Type} of encoding used to send the report body.
+     *               {@link Type#FORM} is a simple Key/Value pairs list as defined
+     *               by the application/x-www-form-urlencoded mime type.
+     */
+    public HttpSender(@NonNull ACRAConfiguration config, @NonNull Method method, @NonNull Type type) {
+        this(config, method, type, null);
+    }
+
+    /**
+     * <p>
+     * Create a new HttpSender instance with its destination taken from the supplied config.
+     * </p>
+     *
+     * @param config  AcraConfig declaring the
+     * @param method  HTTP {@link Method} to be used to send data. Currently only
+     *                {@link Method#POST} and {@link Method#PUT} are available. If
+     *                {@link Method#PUT} is used, the {@link ReportField#REPORT_ID}
+     *                is appended to the formUri to be compliant with RESTful APIs.
+     * @param type    {@link Type} of encoding used to send the report body.
+     *                {@link Type#FORM} is a simple Key/Value pairs list as defined
+     *                by the application/x-www-form-urlencoded mime type.
+     * @param mapping Applies only to {@link Method#POST} method parameter. If null,
+     *                POST parameters will be named with {@link ReportField} values
+     *                converted to String with .toString(). If not null, POST
+     *                parameters will be named with the result of
+     *                mapping.get(ReportField.SOME_FIELD);
+     */
+    public HttpSender(@NonNull ACRAConfiguration config, @NonNull Method method, @NonNull Type type, @Nullable Map<ReportField, String> mapping) {
+        this(config, method, type, null, mapping);
+    }
+
+    /**
+     * <p>
+     * Create a new HttpPostSender instance with a fixed destination provided as
+     * a parameter. Configuration changes to the formUri are not applied.
+     * </p>
+     *
+     * @param config  AcraConfig declaring the
+     * @param method  HTTP {@link Method} to be used to send data. Currently only
+     *                {@link Method#POST} and {@link Method#PUT} are available. If
+     *                {@link Method#PUT} is used, the {@link ReportField#REPORT_ID}
+     *                is appended to the formUri to be compliant with RESTful APIs.
+     * @param type    {@link Type} of encoding used to send the report body.
+     *                {@link Type#FORM} is a simple Key/Value pairs list as defined
+     *                by the application/x-www-form-urlencoded mime type.
+     * @param formUri The URL of your server-side crash report collection script.
+     * @param mapping Applies only to {@link Method#POST} method parameter. If null,
+     *                POST parameters will be named with {@link ReportField} values
+     *                converted to String with .toString(). If not null, POST
+     *                parameters will be named with the result of
+     *                mapping.get(ReportField.SOME_FIELD);
+     */
+    public HttpSender(@NonNull ACRAConfiguration config, @NonNull Method method, @NonNull Type type, @Nullable String formUri, @Nullable Map<ReportField, String> mapping) {
+        this.config = config;
+        mMethod = method;
+        mFormUri = (formUri == null) ? null : Uri.parse(formUri);
+        mMapping = mapping;
+        mType = type;
+        mUsername = null;
+        mPassword = null;
+    }
+
+    /**
+     * <p>
+     * Set credentials for this HttpSender that override (if present) the ones
+     * set globally.
+     * </p>
+     *
+     * @param username The username to set for HTTP Basic Auth.
+     * @param password The password to set for HTTP Basic Auth.
+     */
+    @SuppressWarnings("unused")
+    public void setBasicAuth(@Nullable String username, @Nullable String password) {
+        mUsername = username;
+        mPassword = password;
+    }
+
+    @Override
+    public void send(@NonNull Context context, @NonNull CrashReportData report) throws ReportSenderException {
+
+        try {
+            final String baseUrl = mFormUri == null ? config.formUri() : mFormUri.toString();
+            if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Connect to " + baseUrl);
+
+            final String login = mUsername != null ? mUsername : isNull(config.formUriBasicAuthLogin()) ? null : config.formUriBasicAuthLogin();
+            final String password = mPassword != null ? mPassword : isNull(config.formUriBasicAuthPassword()) ? null : config.formUriBasicAuthPassword();
+
+            final InstanceCreator instanceCreator = new InstanceCreator();
+            final List<Uri> uris = instanceCreator.create(config.attachmentUriProvider(), new DefaultAttachmentProvider()).getAttachments(context, config);
+
+            // Generate report body depending on requested type
+            final String reportAsString = mType.convertReport(this, report);
+
+            // Adjust URL depending on method
+            final URL reportUrl = mMethod.createURL(baseUrl, report);
+
+            sendHttpRequests(config, context, mMethod, mType, login, password, config.connectionTimeout(),
+                    config.socketTimeout(), config.httpHeaders(), reportAsString, reportUrl, uris);
+
+        } catch (@NonNull IOException e) {
+            throw new ReportSenderException("Error while sending " + config.reportType()
+                    + " report via Http " + mMethod.name(), e);
+        }
+    }
+
+    @SuppressWarnings("WeakerAccess")
+    protected void sendHttpRequests(@NonNull ACRAConfiguration configuration, @NonNull Context context, @NonNull Method method, @NonNull Type type,
+                                    @Nullable String login, @Nullable String password, int connectionTimeOut, int socketTimeOut, @Nullable Map<String, String> headers,
+                                    @NonNull String content, @NonNull URL url, @NonNull List<Uri> attachments) throws IOException {
+        switch (method) {
+            case POST:
+                if (attachments.isEmpty()) {
+                    sendWithoutAttachments(configuration, context, method, type, login, password, connectionTimeOut, socketTimeOut, headers, content, url);
+                } else {
+                    postMultipart(configuration, context, type, login, password, connectionTimeOut, socketTimeOut, headers, content, url, attachments);
+                }
+                break;
+            case PUT:
+                sendWithoutAttachments(configuration, context, method, type, login, password, connectionTimeOut, socketTimeOut, headers, content, url);
+                for (Uri uri : attachments) {
+                    putAttachment(configuration, context, login, password, connectionTimeOut, socketTimeOut, headers, url, uri);
+                }
+                break;
+        }
+    }
+
+    @SuppressWarnings("WeakerAccess")
+    protected void sendWithoutAttachments(@NonNull ACRAConfiguration configuration, @NonNull Context context, @NonNull Method method, @NonNull Type type,
+                                          @Nullable String login, @Nullable String password, int connectionTimeOut, int socketTimeOut, @Nullable Map<String, String> headers,
+                                          @NonNull String content, @NonNull URL url) throws IOException {
+        new DefaultHttpRequest(configuration, context, method, type, login, password, connectionTimeOut, socketTimeOut, headers).send(url, content);
+    }
+
+    @SuppressWarnings("WeakerAccess")
+    protected void postMultipart(@NonNull ACRAConfiguration configuration, @NonNull Context context, @NonNull Type type,
+                                 @Nullable String login, @Nullable String password, int connectionTimeOut, int socketTimeOut, @Nullable Map<String, String> headers,
+                                 @NonNull String content, @NonNull URL url, @NonNull List<Uri> attachments) throws IOException {
+        new MultipartHttpRequest(configuration, context, type, login, password, connectionTimeOut, socketTimeOut, headers).send(url, Pair.create(content, attachments));
+    }
+
+    @SuppressWarnings("WeakerAccess")
+    protected void putAttachment(@NonNull ACRAConfiguration configuration, @NonNull Context context,
+                                 @Nullable String login, @Nullable String password, int connectionTimeOut, int socketTimeOut, @Nullable Map<String, String> headers,
+                                 @NonNull URL url, @NonNull Uri attachment) throws IOException {
+        final URL attachmentUrl = new URL(url.toString() + "-" + HttpUtils.getFileNameFromUri(context, attachment));
+        new BinaryHttpRequest(configuration, context, Method.PUT, login, password, connectionTimeOut, socketTimeOut, headers).send(attachmentUrl, attachment);
+    }
+
+    /**
+     * Convert a report to json
+     *
+     * @param report the report to convert
+     * @return a json representation of the report
+     */
+    @SuppressWarnings("WeakerAccess")
+    protected JSONObject convertToJson(CrashReportData report) {
+        return report.toJSON();
+    }
+
+    /**
+     * Convert a report to a form-prepared map
+     *
+     * @param report the report to convert
+     * @return a form representation of the report
+     */
+    @SuppressWarnings("WeakerAccess")
+    protected Map<String, String> convertToForm(CrashReportData report) {
+        return remap(report);
+    }
+
+    @NonNull
+    private Map<String, String> remap(@NonNull Map<ReportField, Element> report) {
+
+        Set<ReportField> fields = config.reportContent();
+        if (fields.isEmpty()) {
+            fields = new ImmutableSet<ReportField>(ACRAConstants.DEFAULT_REPORT_FIELDS);
+        }
+
+        final Map<String, String> finalReport = new HashMap<String, String>(report.size());
+        for (ReportField field : fields) {
+            final Element element = report.get(field);
+            final String value = element != null ? TextUtils.join("\n", element.flatten()) : null;
+            if (mMapping == null || mMapping.get(field) == null) {
+                finalReport.put(field.toString(), value);
+            } else {
+                finalReport.put(mMapping.get(field), value);
+            }
+        }
+        return finalReport;
+    }
+
+    private boolean isNull(@Nullable String aString) {
+        return aString == null || ACRAConstants.NULL_VALUE.equals(aString);
+    }
+
+}
\ No newline at end of file
diff --git a/src/main/java/org/acra/sender/HttpSenderFactory.java b/acra/src/main/java/org/acra/sender/HttpSenderFactory.java
similarity index 95%
rename from src/main/java/org/acra/sender/HttpSenderFactory.java
rename to acra/src/main/java/org/acra/sender/HttpSenderFactory.java
index b0872635..69fc1d6f 100644
--- a/src/main/java/org/acra/sender/HttpSenderFactory.java
+++ b/acra/src/main/java/org/acra/sender/HttpSenderFactory.java
@@ -13,6 +13,6 @@
     @NonNull
     @Override
     public ReportSender create(@NonNull Context context, @NonNull ACRAConfiguration config) {
-        return new HttpSender(config, config.httpMethod(), config.reportType(), null);
+        return new HttpSender(config, config.httpMethod(), config.reportType());
     }
 }
diff --git a/src/main/java/org/acra/sender/NullSender.java b/acra/src/main/java/org/acra/sender/NullSender.java
similarity index 100%
rename from src/main/java/org/acra/sender/NullSender.java
rename to acra/src/main/java/org/acra/sender/NullSender.java
diff --git a/src/main/java/org/acra/sender/ReportDistributor.java b/acra/src/main/java/org/acra/sender/ReportDistributor.java
similarity index 85%
rename from src/main/java/org/acra/sender/ReportDistributor.java
rename to acra/src/main/java/org/acra/sender/ReportDistributor.java
index 01e59ff0..9a4fdd20 100644
--- a/src/main/java/org/acra/sender/ReportDistributor.java
+++ b/acra/src/main/java/org/acra/sender/ReportDistributor.java
@@ -25,6 +25,9 @@
 import org.acra.config.DefaultRetryPolicy;
 import org.acra.config.RetryPolicy;
 import org.acra.file.CrashReportPersister;
+import org.acra.util.IOUtils;
+import org.acra.util.InstanceCreator;
+import org.json.JSONException;
 
 import java.io.File;
 import java.io.IOException;
@@ -70,14 +73,17 @@ public void distribute(@NonNull File reportFile) {
             final CrashReportPersister persister = new CrashReportPersister();
             final CrashReportData previousCrashReport = persister.load(reportFile);
             sendCrashReport(previousCrashReport);
-            deleteFile(reportFile);
+            IOUtils.deleteReport(reportFile);
         } catch (RuntimeException e) {
             ACRA.log.e(LOG_TAG, "Failed to send crash reports for " + reportFile, e);
-            deleteFile(reportFile);
+            IOUtils.deleteReport(reportFile);
         } catch (IOException e) {
             ACRA.log.e(LOG_TAG, "Failed to load crash report for " + reportFile, e);
-            deleteFile(reportFile);
-        } catch (ReportSenderException e) {
+            IOUtils.deleteReport(reportFile);
+        } catch (JSONException e) {
+            ACRA.log.e(LOG_TAG, "Failed to load crash report for " + reportFile, e);
+            IOUtils.deleteReport(reportFile);
+        }catch (ReportSenderException e) {
             ACRA.log.e(LOG_TAG, "Failed to send crash report for " + reportFile, e);
             // An issue occurred while sending this report but we can still try to
             // send other reports. Report sending is limited by ACRAConstants.MAX_SEND_REPORTS
@@ -106,9 +112,10 @@ private void sendCrashReport(@NonNull CrashReportData errorContent) throws Repor
                 }
             }
 
+            final InstanceCreator instanceCreator = new InstanceCreator();
             if (failedSenders.isEmpty()) {
                 if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Report was sent by all senders");
-            } else if (getRetryPolicy().shouldRetrySend(reportSenders, failedSenders)) {
+            } else if (instanceCreator.create(config.retryPolicyClass(), new DefaultRetryPolicy()).shouldRetrySend(reportSenders, failedSenders)) {
                 final Throwable firstFailure = failedSenders.get(0).getException();
                 throw new ReportSenderException("Policy marked this task as incomplete. ACRA will try to send this report again.", firstFailure);
             } else {
@@ -123,25 +130,6 @@ private void sendCrashReport(@NonNull CrashReportData errorContent) throws Repor
         }
     }
 
-    private RetryPolicy getRetryPolicy() {
-        try {
-            return config.retryPolicyClass().newInstance();
-        } catch (InstantiationException e) {
-            ACRA.log.e(LOG_TAG, "Failed to create policy instance of class " + config.retryPolicyClass().getName(), e);
-        } catch (IllegalAccessException e) {
-            ACRA.log.e(LOG_TAG, "Failed to create policy instance of class " + config.retryPolicyClass().getName(), e);
-        }
-
-        return new DefaultRetryPolicy();
-    }
-
-    private void deleteFile(@NonNull File file) {
-        final boolean deleted = file.delete();
-        if (!deleted) {
-            ACRA.log.w(LOG_TAG, "Could not delete error report : " + file);
-        }
-    }
-
     /**
      * Returns true if the application is debuggable.
      *
diff --git a/src/main/java/org/acra/sender/ReportSender.java b/acra/src/main/java/org/acra/sender/ReportSender.java
similarity index 97%
rename from src/main/java/org/acra/sender/ReportSender.java
rename to acra/src/main/java/org/acra/sender/ReportSender.java
index 06a56e62..f7cb4125 100644
--- a/src/main/java/org/acra/sender/ReportSender.java
+++ b/acra/src/main/java/org/acra/sender/ReportSender.java
@@ -1,50 +1,50 @@
-/*
- *  Copyright 2010 Kevin Gaudin
- *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-package org.acra.sender;
-
-import android.content.Context;
-import android.support.annotation.NonNull;
-
-import org.acra.collector.CrashReportData;
-
-/**
- * A simple interface for defining various crash report senders.
- *
- * You can reuse {@link HttpSender} to send reports to your custom server-side report
- * collection script even if you expect (or prefer) specific names for each
- * report field as {@link HttpSender#send(Context, CrashReportData)}
- * can take a {@code Map<ReportField, String>} as an input to convert each field name to
- * your preferred POST parameter name.
- * 
- * @author Kevin Gaudin
- */
-public interface ReportSender {
-
-    /**
-     * Send crash report data.
-     *
-     * Method will be called from the {@link SenderService}.
-     *
-     * @param context       Android Context in which to send the crash report.
-     * @param errorContent  Stores key/value pairs for each report field.
-     *                      A report field is identified by a {@link org.acra.ReportField} enum value.
-     * @throws ReportSenderException
-     *             If anything goes fatally wrong during the handling of crash
-     *             data, you can (should) throw a {@link ReportSenderException}
-     *             with a custom message.
-     */
-    void send(@NonNull Context context, @NonNull CrashReportData errorContent) throws ReportSenderException;
-}
+/*
+ *  Copyright 2010 Kevin Gaudin
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.acra.sender;
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+
+import org.acra.collector.CrashReportData;
+
+/**
+ * A simple interface for defining various crash report senders.
+ *
+ * You can reuse {@link HttpSender} to send reports to your custom server-side report
+ * collection script even if you expect (or prefer) specific names for each
+ * report field as {@link HttpSender#send(Context, CrashReportData)}
+ * can take a {@code Map<ReportField, String>} as an input to convert each field name to
+ * your preferred POST parameter name.
+ * 
+ * @author Kevin Gaudin
+ */
+public interface ReportSender {
+
+    /**
+     * Send crash report data.
+     *
+     * Method will be called from the {@link SenderService}.
+     *
+     * @param context       Android Context in which to send the crash report.
+     * @param errorContent  Stores key/value pairs for each report field.
+     *                      A report field is identified by a {@link org.acra.ReportField} enum value.
+     * @throws ReportSenderException
+     *             If anything goes fatally wrong during the handling of crash
+     *             data, you can (should) throw a {@link ReportSenderException}
+     *             with a custom message.
+     */
+    void send(@NonNull Context context, @NonNull CrashReportData errorContent) throws ReportSenderException;
+}
diff --git a/src/main/java/org/acra/sender/ReportSenderException.java b/acra/src/main/java/org/acra/sender/ReportSenderException.java
similarity index 97%
rename from src/main/java/org/acra/sender/ReportSenderException.java
rename to acra/src/main/java/org/acra/sender/ReportSenderException.java
index 54a7b000..7b832dc4 100644
--- a/src/main/java/org/acra/sender/ReportSenderException.java
+++ b/acra/src/main/java/org/acra/sender/ReportSenderException.java
@@ -1,51 +1,51 @@
-/*
- *  Copyright 2010 Kevin Gaudin
- *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-package org.acra.sender;
-
-/**
- * This exception is thrown when an error occurred while sending crash data in a
- * {@link ReportSender} implementation.
- * 
- * @author Kevin Gaudin
- * 
- */
-@SuppressWarnings("serial")
-public class ReportSenderException extends Exception {
-
-    /**
-     * Creates a new {@link ReportSenderException} instance. You can provide a
-     * detailed message to explain what went wrong.
-     * 
-     * @param detailMessage
-     *            A message to explain the cause of this exception.
-     * @param throwable
-     *            An optional throwable which caused this Exception.
-     */
-    public ReportSenderException(String detailMessage, Throwable throwable) {
-        super(detailMessage, throwable);
-    }
-
-    /**
-     * Creates a new {@link ReportSenderException} instance. You can provide a
-     * detailed message to explain what went wrong.
-     * 
-     * @param detailMessage
-     *            A message to explain the cause of this exception.
-     **/
-    public ReportSenderException(String detailMessage) {
-        super(detailMessage);
-    }
-}
+/*
+ *  Copyright 2010 Kevin Gaudin
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.acra.sender;
+
+/**
+ * This exception is thrown when an error occurred while sending crash data in a
+ * {@link ReportSender} implementation.
+ * 
+ * @author Kevin Gaudin
+ * 
+ */
+@SuppressWarnings("serial")
+public class ReportSenderException extends Exception {
+
+    /**
+     * Creates a new {@link ReportSenderException} instance. You can provide a
+     * detailed message to explain what went wrong.
+     * 
+     * @param detailMessage
+     *            A message to explain the cause of this exception.
+     * @param throwable
+     *            An optional throwable which caused this Exception.
+     */
+    public ReportSenderException(String detailMessage, Throwable throwable) {
+        super(detailMessage, throwable);
+    }
+
+    /**
+     * Creates a new {@link ReportSenderException} instance. You can provide a
+     * detailed message to explain what went wrong.
+     * 
+     * @param detailMessage
+     *            A message to explain the cause of this exception.
+     **/
+    public ReportSenderException(String detailMessage) {
+        super(detailMessage);
+    }
+}
diff --git a/src/main/java/org/acra/sender/ReportSenderFactory.java b/acra/src/main/java/org/acra/sender/ReportSenderFactory.java
similarity index 100%
rename from src/main/java/org/acra/sender/ReportSenderFactory.java
rename to acra/src/main/java/org/acra/sender/ReportSenderFactory.java
diff --git a/src/main/java/org/acra/sender/SenderService.java b/acra/src/main/java/org/acra/sender/SenderService.java
similarity index 69%
rename from src/main/java/org/acra/sender/SenderService.java
rename to acra/src/main/java/org/acra/sender/SenderService.java
index 82424dd4..607e5670 100644
--- a/src/main/java/org/acra/sender/SenderService.java
+++ b/acra/src/main/java/org/acra/sender/SenderService.java
@@ -1,17 +1,35 @@
+/*
+ *  Copyright 2017
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
 package org.acra.sender;
 
 import android.app.IntentService;
 import android.content.Intent;
 import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
 
 import org.acra.ACRA;
 import org.acra.ACRAConstants;
 import org.acra.config.ACRAConfiguration;
 import org.acra.file.CrashReportFileNameParser;
 import org.acra.file.ReportLocator;
+import org.acra.util.InstanceCreator;
 
 import java.io.File;
 import java.util.ArrayList;
+import java.util.Collection;
 import java.util.List;
 
 import static org.acra.ACRA.LOG_TAG;
@@ -20,26 +38,29 @@
 
     public static final String EXTRA_ONLY_SEND_SILENT_REPORTS = "onlySendSilentReports";
     public static final String EXTRA_APPROVE_REPORTS_FIRST = "approveReportsFirst";
-    public static final String EXTRA_REPORT_SENDER_FACTORIES = "reportSenderFactories";
     public static final String EXTRA_ACRA_CONFIG = "acraConfig";
 
     private final ReportLocator locator = new ReportLocator(this);
 
     public SenderService() {
         super("ACRA SenderService");
+        setIntentRedelivery(true);
     }
 
     @Override
-    protected void onHandleIntent(@NonNull final Intent intent) {
+    protected void onHandleIntent(@Nullable final Intent intent) {
+        if (intent == null || !intent.hasExtra(EXTRA_ACRA_CONFIG)) {
+            if(ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "SenderService was started but no valid intent was delivered, will now quit");
+            return;
+        }
 
         final boolean onlySendSilentReports = intent.getBooleanExtra(EXTRA_ONLY_SEND_SILENT_REPORTS, false);
         final boolean approveReportsFirst = intent.getBooleanExtra(EXTRA_APPROVE_REPORTS_FIRST, false);
 
-        //noinspection unchecked
-        final List<Class<? extends ReportSenderFactory>> senderFactoryClasses = (List<Class<? extends ReportSenderFactory>>) intent.getSerializableExtra(EXTRA_REPORT_SENDER_FACTORIES);
-
         final ACRAConfiguration config = (ACRAConfiguration) intent.getSerializableExtra(EXTRA_ACRA_CONFIG);
 
+        final Collection<Class<? extends ReportSenderFactory>> senderFactoryClasses = config.reportSenderFactoryClasses();
+
         if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "About to start sending reports from SenderService");
         try {
             final List<ReportSender> senderInstances = getSenderInstances(config, senderFactoryClasses);
@@ -77,18 +98,11 @@ protected void onHandleIntent(@NonNull final Intent intent) {
     }
 
     @NonNull
-    private List<ReportSender> getSenderInstances(@NonNull ACRAConfiguration config, @NonNull List<Class<? extends ReportSenderFactory>> factoryClasses) {
+    private List<ReportSender> getSenderInstances(@NonNull ACRAConfiguration config, @NonNull Collection<Class<? extends ReportSenderFactory>> factoryClasses) {
         final List<ReportSender> reportSenders = new ArrayList<ReportSender>();
-        for (final Class<? extends ReportSenderFactory> factoryClass : factoryClasses) {
-            try {
-                final ReportSenderFactory factory = factoryClass.newInstance();
-                final ReportSender sender = factory.create(this.getApplication(), config);
-                reportSenders.add(sender);
-            } catch (InstantiationException e) {
-                ACRA.log.w(LOG_TAG, "Could not construct ReportSender from " + factoryClass, e);
-            } catch (IllegalAccessException e) {
-                ACRA.log.w(LOG_TAG, "Could not construct ReportSender from " + factoryClass, e);
-            }
+        final InstanceCreator instanceCreator = new InstanceCreator();
+        for (ReportSenderFactory factory : instanceCreator.create(factoryClasses)) {
+            reportSenders.add(factory.create(this.getApplication(), config));
         }
         return reportSenders;
     }
diff --git a/src/main/java/org/acra/sender/SenderServiceStarter.java b/acra/src/main/java/org/acra/sender/SenderServiceStarter.java
similarity index 87%
rename from src/main/java/org/acra/sender/SenderServiceStarter.java
rename to acra/src/main/java/org/acra/sender/SenderServiceStarter.java
index 71ee6dd2..4475e247 100644
--- a/src/main/java/org/acra/sender/SenderServiceStarter.java
+++ b/acra/src/main/java/org/acra/sender/SenderServiceStarter.java
@@ -7,8 +7,6 @@
 import org.acra.ACRA;
 import org.acra.config.ACRAConfiguration;
 
-import java.util.ArrayList;
-
 import static org.acra.ACRA.LOG_TAG;
 
 /**
@@ -35,9 +33,6 @@ public void startService(boolean onlySendSilentReports, boolean approveReportsFi
         final Intent intent = new Intent(context, SenderService.class);
         intent.putExtra(SenderService.EXTRA_ONLY_SEND_SILENT_REPORTS, onlySendSilentReports);
         intent.putExtra(SenderService.EXTRA_APPROVE_REPORTS_FIRST, approveReportsFirst);
-
-        intent.putExtra(SenderService.EXTRA_REPORT_SENDER_FACTORIES, new ArrayList<Class<? extends ReportSenderFactory>>(config.reportSenderFactoryClasses()));
-
         intent.putExtra(SenderService.EXTRA_ACRA_CONFIG, config);
         context.startService(intent);
     }
diff --git a/src/main/java/org/acra/util/ApplicationStartupProcessor.java b/acra/src/main/java/org/acra/util/ApplicationStartupProcessor.java
similarity index 96%
rename from src/main/java/org/acra/util/ApplicationStartupProcessor.java
rename to acra/src/main/java/org/acra/util/ApplicationStartupProcessor.java
index f4814a4a..9f21df82 100644
--- a/src/main/java/org/acra/util/ApplicationStartupProcessor.java
+++ b/acra/src/main/java/org/acra/util/ApplicationStartupProcessor.java
@@ -73,7 +73,7 @@ public void sendApprovedReports() {
             return; // There are no approved reports, so bail now.
         }
 
-        if (config.mode() == ReportingInteractionMode.TOAST && hasNonSilentApprovedReports(reportFiles)) {
+        if (config.reportingInteractionMode() == ReportingInteractionMode.TOAST && hasNonSilentApprovedReports(reportFiles)) {
             ToastSender.sendToast(context, config.resToastText(), Toast.LENGTH_LONG);
         }
 
diff --git a/src/main/java/org/acra/util/IOUtils.java b/acra/src/main/java/org/acra/util/IOUtils.java
similarity index 55%
rename from src/main/java/org/acra/util/IOUtils.java
rename to acra/src/main/java/org/acra/util/IOUtils.java
index de4b90b2..edb13c70 100644
--- a/src/main/java/org/acra/util/IOUtils.java
+++ b/acra/src/main/java/org/acra/util/IOUtils.java
@@ -21,17 +21,21 @@
 
 import com.android.internal.util.Predicate;
 
+import org.acra.ACRA;
 import org.acra.ACRAConstants;
 import org.acra.collections.BoundedLinkedList;
 
 import java.io.BufferedReader;
 import java.io.Closeable;
+import java.io.File;
 import java.io.IOException;
 import java.io.InputStream;
 import java.io.InputStreamReader;
 import java.util.LinkedList;
 import java.util.List;
 
+import static org.acra.ACRA.LOG_TAG;
+
 /**
  * @author William Ferguson, F43nd1r
  * @since 4.6.0
@@ -45,6 +49,7 @@ public boolean apply(String s) {
         }
     };
     private static final int NO_LIMIT = -1;
+    private static final int READ_TIMEOUT = 3000;
 
     private IOUtils() {
     }
@@ -68,9 +73,9 @@ public static void safeClose(@Nullable Closeable closeable) {
     /**
      * Reads an InputStream into a string
      *
-     * @param input the stream
-     * @return the read string
-     * @throws IOException
+     * @param input InputStream to read.
+     * @return the String that was read.
+     * @throws IOException if the InputStream could not be read.
      */
     @NonNull
     public static String streamToString(@NonNull InputStream input) throws IOException {
@@ -80,10 +85,10 @@ public static String streamToString(@NonNull InputStream input) throws IOExcepti
     /**
      * Reads an InputStream into a string
      *
-     * @param input  the stream
+     * @param input  InputStream to read.
      * @param filter should return false for lines which should be excluded
-     * @return the read string
-     * @throws IOException
+     * @return the String that was read.
+     * @throws IOException if the InputStream could not be read.
      */
     @NonNull
     public static String streamToString(@NonNull InputStream input, Predicate<String> filter) throws IOException {
@@ -93,10 +98,10 @@ public static String streamToString(@NonNull InputStream input, Predicate<String
     /**
      * Reads an InputStream into a string
      *
-     * @param input the stream
+     * @param input InputStream to read.
      * @param limit the maximum number of lines to read (the last x lines are kept)
-     * @return the read string
-     * @throws IOException
+     * @return the String that was read.
+     * @throws IOException if the InputStream could not be read.
      */
     @NonNull
     public static String streamToString(@NonNull InputStream input, int limit) throws IOException {
@@ -106,11 +111,11 @@ public static String streamToString(@NonNull InputStream input, int limit) throw
     /**
      * Reads an InputStream into a string
      *
-     * @param input  the stream
-     * @param filter should return false for lines which should be excluded
-     * @param limit the maximum number of lines to read (the last x lines are kept)
-     * @return the read string
-     * @throws IOException
+     * @param input  InputStream to read.
+     * @param filter Predicate that should return false for lines which should be excluded.
+     * @param limit  the maximum number of lines to read (the last x lines are kept)
+     * @return the String that was read.
+     * @throws IOException if the InputStream could not be read.
      */
     @NonNull
     public static String streamToString(@NonNull InputStream input, Predicate<String> filter, int limit) throws IOException {
@@ -128,4 +133,47 @@ public static String streamToString(@NonNull InputStream input, Predicate<String
             safeClose(reader);
         }
     }
+
+    /**
+     * Reads an InputStream into a string without blocking the current thread.
+     * It has a default timeout of 3 seconds.
+     *
+     * @param input  InputStream to read.
+     * @param filter Predicate that should return false for lines which should be excluded.
+     * @param limit  the maximum number of lines to read (the last x lines are kept).
+     * @return the String that was read.
+     * @throws IOException if the InputStream could not be read.
+     */
+    @NonNull
+    public static String streamToStringNonBlockingRead(@NonNull InputStream input, Predicate<String> filter, int limit) throws IOException {
+        final BufferedReader reader = new BufferedReader(new InputStreamReader(input), ACRAConstants.DEFAULT_BUFFER_SIZE_IN_BYTES);
+        final NonBlockingBufferedReader nonBlockingReader = new NonBlockingBufferedReader(reader);
+        try {
+            final List<String> buffer = limit == NO_LIMIT ? new LinkedList<String>() : new BoundedLinkedList<String>(limit);
+            final long end = System.currentTimeMillis() + READ_TIMEOUT;
+            try {
+                while ((System.currentTimeMillis() < end)) {
+                    final String line = nonBlockingReader.readLine();
+                    if (line == null) {
+                        break;
+                    }
+                    if (filter.apply(line)) {
+                        buffer.add(line);
+                    }
+                }
+            } catch (InterruptedException e) {
+                if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Interrupted while reading stream", e);
+            }
+            return TextUtils.join("\n", buffer);
+        } finally {
+            nonBlockingReader.close();
+        }
+    }
+
+    public static void deleteReport(@NonNull File file) {
+        final boolean deleted = file.delete();
+        if (!deleted) {
+            ACRA.log.w(LOG_TAG, "Could not delete error report : " + file);
+        }
+    }
 }
diff --git a/src/main/java/org/acra/util/Installation.java b/acra/src/main/java/org/acra/util/Installation.java
similarity index 96%
rename from src/main/java/org/acra/util/Installation.java
rename to acra/src/main/java/org/acra/util/Installation.java
index 40ccb2e1..3000000c 100644
--- a/src/main/java/org/acra/util/Installation.java
+++ b/acra/src/main/java/org/acra/util/Installation.java
@@ -1,78 +1,78 @@
-/*
- * Class copied from the Android Developers Blog:
- * http://android-developers.blogspot.com/2011/03/identifying-app-installations.html 
- */
-package org.acra.util;
-
-import android.content.Context;
-import android.support.annotation.NonNull;
-
-import org.acra.ACRA;
-
-import java.io.File;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.io.RandomAccessFile;
-import java.util.UUID;
-
-import static org.acra.ACRA.LOG_TAG;
-
-/**
- * <p>
- * Creates a file storing a UUID on the first application start. This UUID can then be used as a identifier of this
- * specific application installation.
- * </p>
- * 
- * <p>
- * This was taken from <a href="http://android-developers.blogspot.com/2011/03/identifying-app-installations.html"> the
- * android developers blog.</a>
- * </p>
- */
-public final class Installation {
-    private Installation(){}
-
-    private static String sID;
-    private static final String INSTALLATION = "ACRA-INSTALLATION";
-
-    @NonNull
-    public static synchronized String id(@NonNull Context context) {
-        if (sID == null) {
-            final File installation = new File(context.getFilesDir(), INSTALLATION);
-            try {
-                if (!installation.exists()) {
-                    writeInstallationFile(installation);
-                }
-                sID = readInstallationFile(installation);
-            } catch (IOException e) {
-                ACRA.log.w(LOG_TAG, "Couldn't retrieve InstallationId for " + context.getPackageName(), e);
-                return "Couldn't retrieve InstallationId";
-            } catch (RuntimeException e) {
-                ACRA.log.w(LOG_TAG, "Couldn't retrieve InstallationId for " + context.getPackageName(), e);
-                return "Couldn't retrieve InstallationId";
-            }
-        }
-        return sID;
-    }
-
-    @NonNull
-    private static String readInstallationFile(@NonNull File installation) throws IOException {
-        final RandomAccessFile f = new RandomAccessFile(installation, "r");
-        final byte[] bytes = new byte[(int) f.length()];
-        try {
-            f.readFully(bytes);
-        } finally {
-            IOUtils.safeClose(f);
-        }
-        return new String(bytes);
-    }
-
-    private static void writeInstallationFile(@NonNull File installation) throws IOException {
-        final FileOutputStream out = new FileOutputStream(installation);
-        try {
-            final String id = UUID.randomUUID().toString();
-            out.write(id.getBytes());
-        } finally {
-            out.close();
-        }
-    }
-}
+/*
+ * Class copied from the Android Developers Blog:
+ * http://android-developers.blogspot.com/2011/03/identifying-app-installations.html 
+ */
+package org.acra.util;
+
+import android.content.Context;
+import android.support.annotation.NonNull;
+
+import org.acra.ACRA;
+
+import java.io.File;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.RandomAccessFile;
+import java.util.UUID;
+
+import static org.acra.ACRA.LOG_TAG;
+
+/**
+ * <p>
+ * Creates a file storing a UUID on the first application start. This UUID can then be used as a identifier of this
+ * specific application installation.
+ * </p>
+ * 
+ * <p>
+ * This was taken from <a href="http://android-developers.blogspot.com/2011/03/identifying-app-installations.html"> the
+ * android developers blog.</a>
+ * </p>
+ */
+public final class Installation {
+    private Installation(){}
+
+    private static String sID;
+    private static final String INSTALLATION = "ACRA-INSTALLATION";
+
+    @NonNull
+    public static synchronized String id(@NonNull Context context) {
+        if (sID == null) {
+            final File installation = new File(context.getFilesDir(), INSTALLATION);
+            try {
+                if (!installation.exists()) {
+                    writeInstallationFile(installation);
+                }
+                sID = readInstallationFile(installation);
+            } catch (IOException e) {
+                ACRA.log.w(LOG_TAG, "Couldn't retrieve InstallationId for " + context.getPackageName(), e);
+                return "Couldn't retrieve InstallationId";
+            } catch (RuntimeException e) {
+                ACRA.log.w(LOG_TAG, "Couldn't retrieve InstallationId for " + context.getPackageName(), e);
+                return "Couldn't retrieve InstallationId";
+            }
+        }
+        return sID;
+    }
+
+    @NonNull
+    private static String readInstallationFile(@NonNull File installation) throws IOException {
+        final RandomAccessFile f = new RandomAccessFile(installation, "r");
+        final byte[] bytes = new byte[(int) f.length()];
+        try {
+            f.readFully(bytes);
+        } finally {
+            IOUtils.safeClose(f);
+        }
+        return new String(bytes);
+    }
+
+    private static void writeInstallationFile(@NonNull File installation) throws IOException {
+        final FileOutputStream out = new FileOutputStream(installation);
+        try {
+            final String id = UUID.randomUUID().toString();
+            out.write(id.getBytes());
+        } finally {
+            IOUtils.safeClose(out);
+        }
+    }
+}
diff --git a/acra/src/main/java/org/acra/util/InstanceCreator.java b/acra/src/main/java/org/acra/util/InstanceCreator.java
new file mode 100644
index 00000000..8b2c85a4
--- /dev/null
+++ b/acra/src/main/java/org/acra/util/InstanceCreator.java
@@ -0,0 +1,70 @@
+/*
+ *  Copyright 2017
+ *
+ *  Licensed under the Apache License, Version 2.0 (the "License");
+ *  you may not use this file except in compliance with the License.
+ *  You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package org.acra.util;
+
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import org.acra.ACRA;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.List;
+
+import static org.acra.ACRA.LOG_TAG;
+
+/**
+ * @author F43nd1r
+ * @since 09.03.2017
+ */
+public final class InstanceCreator {
+
+    /**
+     * Create an instance of clazz
+     * @param clazz the clazz to create an instance of
+     * @param fallback the value to return in case of a failure
+     * @param <T> the return type
+     * @return a new instance of clazz or fallback
+     */
+    public <T> T create(@NonNull Class<? extends T> clazz, @Nullable T fallback) {
+        try {
+            return clazz.newInstance();
+        } catch (InstantiationException e) {
+            ACRA.log.e(LOG_TAG, "Failed to create instance of class " + clazz.getName(), e);
+        } catch (IllegalAccessException e) {
+            ACRA.log.e(LOG_TAG, "Failed to create instance of class " + clazz.getName(), e);
+        }
+        return fallback;
+    }
+
+    /**
+     * Create instances of the given classes
+     * @param classes the classes to create insatnces of
+     * @param <T> the return type
+     * @return a list of successfully created instances, does not contain null
+     */
+    @NonNull
+    public <T> List<T> create(@NonNull Collection<Class<? extends T>> classes) {
+        final List<T> result = new ArrayList<T>();
+        for (Class<? extends T> clazz : classes) {
+            final T instance = create(clazz, null);
+            if (instance != null) {
+                result.add(instance);
+            }
+        }
+        return result;
+    }
+}
diff --git a/acra/src/main/java/org/acra/util/JsonUtils.java b/acra/src/main/java/org/acra/util/JsonUtils.java
new file mode 100644
index 00000000..f05d09d9
--- /dev/null
+++ b/acra/src/main/java/org/acra/util/JsonUtils.java
@@ -0,0 +1,94 @@
+/*
+ * Copyright (c) 2016
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.util;
+
+import android.util.Log;
+
+import org.acra.ReportField;
+import org.acra.model.ComplexElement;
+import org.acra.collector.CrashReportData;
+import org.acra.model.Element;
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
+
+import static org.acra.ACRA.LOG_TAG;
+
+/**
+ * @author F43nd1r
+ * @since 12.10.2016
+ */
+
+public final class JsonUtils {
+    private JsonUtils() {
+    }
+
+    public static JSONObject toJson(CrashReportData data) {
+        Map<String, Object> map = new HashMap<String, Object>();
+        for (Map.Entry<ReportField, Element> entry : data.entrySet()) {
+            Element element = entry.getValue();
+            map.put(entry.getKey().name(), element.value());
+        }
+        return new JSONObject(map);
+    }
+
+    public static CrashReportData toCrashReportData(JSONObject json) {
+        CrashReportData data = new CrashReportData();
+        for (Iterator<String> iterator = json.keys(); iterator.hasNext(); ) {
+            String key = iterator.next();
+            try {
+                ReportField field = ReportField.valueOf(key);
+                Object value = json.get(key);
+                if (value instanceof JSONObject) {
+                    data.put(field, new ComplexElement((JSONObject) value));
+                } else if (value instanceof Number) {
+                    data.putNumber(field, (Number) value);
+                } else if (value instanceof Boolean) {
+                    data.putBoolean(field, (Boolean) value);
+                } else {
+                    data.putString(field, value.toString());
+                }
+            } catch (IllegalArgumentException e) {
+                Log.w(LOG_TAG, "Unknown report key " + key, e);
+            } catch (JSONException e) {
+                Log.w(LOG_TAG, "Unable to read report field " + key, e);
+            }
+        }
+        return data;
+    }
+
+    public static List<String> flatten(JSONObject json) throws JSONException {
+        List<String> result = new ArrayList<String>();
+        for (Iterator<String> iterator = json.keys(); iterator.hasNext(); ) {
+            String key = iterator.next();
+            Object value = json.get(key);
+            if (value instanceof JSONObject) {
+                for (String s : flatten((JSONObject) value)) {
+                    result.add(key + "." + s);
+                }
+            } else {
+                result.add(key + "=" + value);
+            }
+        }
+        return result;
+    }
+}
diff --git a/acra/src/main/java/org/acra/util/NonBlockingBufferedReader.java b/acra/src/main/java/org/acra/util/NonBlockingBufferedReader.java
new file mode 100644
index 00000000..e9ceb54b
--- /dev/null
+++ b/acra/src/main/java/org/acra/util/NonBlockingBufferedReader.java
@@ -0,0 +1,57 @@
+package org.acra.util;
+
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.util.concurrent.BlockingQueue;
+import java.util.concurrent.LinkedBlockingQueue;
+import java.util.concurrent.TimeUnit;
+
+/**
+ * Asynchronously reads a buffer into a List of String.
+ *
+ * @author C-Romeo
+ * @since 4.9.0
+ */
+final class NonBlockingBufferedReader {
+
+    private final BlockingQueue<String> lines = new LinkedBlockingQueue<String>();
+    private Thread backgroundReaderThread = null;
+    private volatile IOException exception = null;
+
+    NonBlockingBufferedReader(final BufferedReader bufferedReader) {
+        backgroundReaderThread = new Thread(new Runnable() {
+            @Override
+            public void run() {
+                try {
+                    while (!Thread.interrupted()) {
+                        final String line = bufferedReader.readLine();
+                        if (line == null) {
+                            break;
+                        }
+                        lines.add(line);
+                    }
+                } catch (IOException e) {
+                    exception = e;
+                } finally {
+                    IOUtils.safeClose(bufferedReader);
+                }
+            }
+        });
+        backgroundReaderThread.setDaemon(true);
+        backgroundReaderThread.start();
+    }
+
+    String readLine() throws InterruptedException, IOException {
+        if(exception != null){
+            throw exception;
+        }
+        return lines.isEmpty() ? null : lines.poll(500L, TimeUnit.MILLISECONDS);
+    }
+
+    void close() {
+        if (backgroundReaderThread != null) {
+            backgroundReaderThread.interrupt();
+            backgroundReaderThread = null;
+        }
+    }
+}
diff --git a/src/main/java/org/acra/util/PackageManagerWrapper.java b/acra/src/main/java/org/acra/util/PackageManagerWrapper.java
similarity index 97%
rename from src/main/java/org/acra/util/PackageManagerWrapper.java
rename to acra/src/main/java/org/acra/util/PackageManagerWrapper.java
index fc582d4b..ae08e026 100644
--- a/src/main/java/org/acra/util/PackageManagerWrapper.java
+++ b/acra/src/main/java/org/acra/util/PackageManagerWrapper.java
@@ -1,77 +1,77 @@
-package org.acra.util;
-
-import android.content.Context;
-import android.content.pm.PackageInfo;
-import android.content.pm.PackageManager;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-
-import org.acra.ACRA;
-
-import static org.acra.ACRA.LOG_TAG;
-
-/**
- * Responsible for wrapping calls to PackageManager to ensure that they always complete without throwing RuntimeExceptions.
- * <p>
- *     Depending upon the state of the application it is possible that
- *     <ul>
- *         <li>Context has no PackageManager.</li>
- *         <li>PackageManager returned by Context throws RuntimeException("Package manager has died")
- *              because it cannot contact the remote PackageManager service.
- *         </li>
- *     </ul>
- *     I suspect that PackageManager death is caused during app installation.
- *     But we need to make ACRA bullet proof, so it's better to handle the condition safely so that the error report itself doesn't fail.
- * </p>
- * @author William Ferguson
- * @since 4.3.0
- */
-public final class PackageManagerWrapper {
-
-    private final Context context;
-
-    public PackageManagerWrapper(@NonNull Context context) {
-        this.context = context;
-    }
-
-    /**
-     * @param permission    Manifest.permission to check whether it has been granted.
-     * @return true if the permission has been granted to the app, false if it hasn't been granted or the PackageManager could not be contacted.
-     */
-    public boolean hasPermission(@NonNull String permission) {
-        final PackageManager pm = context.getPackageManager();
-        if (pm == null) {
-            return false;
-        }
-
-        try {
-            return pm.checkPermission(permission, context.getPackageName()) == PackageManager.PERMISSION_GRANTED;
-        } catch (RuntimeException e) {
-            // To catch RuntimeException("Package manager has died") that can occur on some version of Android,
-            // when the remote PackageManager is unavailable. I suspect this sometimes occurs when the App is being reinstalled.
-            return false;
-        }
-    }
-
-    /**
-     * @return PackageInfo for the current application or null if the PackageManager could not be contacted.
-     */
-    @Nullable
-    public PackageInfo getPackageInfo() {
-        final PackageManager pm = context.getPackageManager();
-        if (pm == null) {
-            return null;
-        }
-
-        try {
-            return pm.getPackageInfo(context.getPackageName(), 0);
-        } catch (PackageManager.NameNotFoundException e) {
-            ACRA.log.w(LOG_TAG, "Failed to find PackageInfo for current App : " + context.getPackageName());
-            return null;
-        } catch (RuntimeException e) {
-            // To catch RuntimeException("Package manager has died") that can occur on some version of Android,
-            // when the remote PackageManager is unavailable. I suspect this sometimes occurs when the App is being reinstalled.
-            return null;
-        }
-    }
-}
+package org.acra.util;
+
+import android.content.Context;
+import android.content.pm.PackageInfo;
+import android.content.pm.PackageManager;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import org.acra.ACRA;
+
+import static org.acra.ACRA.LOG_TAG;
+
+/**
+ * Responsible for wrapping calls to PackageManager to ensure that they always complete without throwing RuntimeExceptions.
+ * <p>
+ *     Depending upon the state of the application it is possible that
+ *     <ul>
+ *         <li>Context has no PackageManager.</li>
+ *         <li>PackageManager returned by Context throws RuntimeException("Package manager has died")
+ *              because it cannot contact the remote PackageManager service.
+ *         </li>
+ *     </ul>
+ *     I suspect that PackageManager death is caused during app installation.
+ *     But we need to make ACRA bullet proof, so it's better to handle the condition safely so that the error report itself doesn't fail.
+ * </p>
+ * @author William Ferguson
+ * @since 4.3.0
+ */
+public final class PackageManagerWrapper {
+
+    private final Context context;
+
+    public PackageManagerWrapper(@NonNull Context context) {
+        this.context = context;
+    }
+
+    /**
+     * @param permission    Manifest.permission to check whether it has been granted.
+     * @return true if the permission has been granted to the app, false if it hasn't been granted or the PackageManager could not be contacted.
+     */
+    public boolean hasPermission(@NonNull String permission) {
+        final PackageManager pm = context.getPackageManager();
+        if (pm == null) {
+            return false;
+        }
+
+        try {
+            return pm.checkPermission(permission, context.getPackageName()) == PackageManager.PERMISSION_GRANTED;
+        } catch (RuntimeException e) {
+            // To catch RuntimeException("Package manager has died") that can occur on some version of Android,
+            // when the remote PackageManager is unavailable. I suspect this sometimes occurs when the App is being reinstalled.
+            return false;
+        }
+    }
+
+    /**
+     * @return PackageInfo for the current application or null if the PackageManager could not be contacted.
+     */
+    @Nullable
+    public PackageInfo getPackageInfo() {
+        final PackageManager pm = context.getPackageManager();
+        if (pm == null) {
+            return null;
+        }
+
+        try {
+            return pm.getPackageInfo(context.getPackageName(), 0);
+        } catch (PackageManager.NameNotFoundException e) {
+            ACRA.log.w(LOG_TAG, "Failed to find PackageInfo for current App : " + context.getPackageName());
+            return null;
+        } catch (RuntimeException e) {
+            // To catch RuntimeException("Package manager has died") that can occur on some version of Android,
+            // when the remote PackageManager is unavailable. I suspect this sometimes occurs when the App is being reinstalled.
+            return null;
+        }
+    }
+}
diff --git a/acra/src/main/java/org/acra/util/ProcessFinisher.java b/acra/src/main/java/org/acra/util/ProcessFinisher.java
new file mode 100644
index 00000000..968106a1
--- /dev/null
+++ b/acra/src/main/java/org/acra/util/ProcessFinisher.java
@@ -0,0 +1,109 @@
+/*
+ * Copyright (c) 2016
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra.util;
+
+import android.app.Activity;
+import android.app.ActivityManager;
+import android.content.Context;
+import android.content.Intent;
+import android.os.Process;
+import android.support.annotation.NonNull;
+import android.support.annotation.Nullable;
+
+import org.acra.ACRA;
+import org.acra.builder.LastActivityManager;
+import org.acra.config.ACRAConfiguration;
+import org.acra.sender.SenderService;
+
+import java.util.List;
+
+import static org.acra.ACRA.LOG_TAG;
+
+/**
+ * Takes care of cleaning up a process and killing it.
+ *
+ * @author F43nd1r
+ * @since 4.9.2
+ */
+
+public final class ProcessFinisher {
+    private final Context context;
+    private final ACRAConfiguration config;
+    private final LastActivityManager lastActivityManager;
+
+    public ProcessFinisher(@NonNull Context context, @NonNull ACRAConfiguration config, @NonNull LastActivityManager lastActivityManager) {
+        this.context = context;
+        this.config = config;
+        this.lastActivityManager = lastActivityManager;
+    }
+
+    public void endApplication(@Nullable Thread uncaughtExceptionThread) {
+        finishLastActivity(uncaughtExceptionThread);
+        stopServices();
+        killProcessAndExit();
+    }
+
+    public void finishLastActivity(@Nullable Thread uncaughtExceptionThread) {
+        // Trying to solve https://github.com/ACRA/acra/issues/42#issuecomment-12134144
+        // Determine the current/last Activity that was started and close
+        // it. Activity#finish (and maybe it's parent too).
+        final Activity lastActivity = lastActivityManager.getLastActivity();
+        if (lastActivity != null) {
+            if (ACRA.DEV_LOGGING)
+                ACRA.log.d(LOG_TAG, "Finishing the last Activity prior to killing the Process");
+            lastActivity.runOnUiThread(new Runnable() {
+                @Override
+                public void run() {
+                    lastActivity.finish();
+                    if (ACRA.DEV_LOGGING)
+                        ACRA.log.d(LOG_TAG, "Finished " + lastActivity.getClass());
+                }
+            });
+
+            // A crashed activity won't continue its lifecycle. So we only wait if something else crashed
+            if (uncaughtExceptionThread != lastActivity.getMainLooper().getThread()) {
+                lastActivityManager.waitForActivityStop(100);
+            }
+            lastActivityManager.clearLastActivity();
+        }
+    }
+
+    private void stopServices() {
+        if (config.stopServicesOnCrash()) {
+            final ActivityManager activityManager = (ActivityManager) context.getSystemService(Context.ACTIVITY_SERVICE);
+            final List<ActivityManager.RunningServiceInfo> runningServices = activityManager.getRunningServices(Integer.MAX_VALUE);
+            final int pid = Process.myPid();
+            for (ActivityManager.RunningServiceInfo serviceInfo : runningServices) {
+                if (serviceInfo.pid == pid && !SenderService.class.getName().equals(serviceInfo.service.getClassName())) {
+                    try {
+                        final Intent intent = new Intent();
+                        intent.setComponent(serviceInfo.service);
+                        context.stopService(intent);
+                    } catch (SecurityException e) {
+                        if (ACRA.DEV_LOGGING)
+                            ACRA.log.d(ACRA.LOG_TAG, "Unable to stop Service " + serviceInfo.service.getClassName() + ". Permission denied");
+                    }
+                }
+            }
+        }
+    }
+
+    private void killProcessAndExit() {
+        android.os.Process.killProcess(android.os.Process.myPid());
+        System.exit(10);
+    }
+}
diff --git a/src/main/java/org/acra/util/ToastSender.java b/acra/src/main/java/org/acra/util/ToastSender.java
similarity index 96%
rename from src/main/java/org/acra/util/ToastSender.java
rename to acra/src/main/java/org/acra/util/ToastSender.java
index d467207a..526fc6b4 100644
--- a/src/main/java/org/acra/util/ToastSender.java
+++ b/acra/src/main/java/org/acra/util/ToastSender.java
@@ -1,36 +1,36 @@
-package org.acra.util;
-
-import android.content.Context;
-import android.support.annotation.IntRange;
-import android.support.annotation.NonNull;
-import android.support.annotation.StringRes;
-import android.widget.Toast;
-
-import org.acra.ACRA;
-
-import static org.acra.ACRA.LOG_TAG;
-
-/**
- * Responsible for sending Toasts under all circumstances.
- *
- * @author William Ferguson
- * @since 4.3.0
- */
-public final class ToastSender {
-    private ToastSender(){}
-
-    /**
-     * Sends a Toast and ensures that any Exception thrown during sending is handled.
-     *
-     * @param context         Application context.
-     * @param toastResourceId Id of the resource to send as the Toast message.
-     * @param toastLength     Length of the Toast.
-     */
-    public static void sendToast(@NonNull Context context, @StringRes int toastResourceId, @IntRange(from = 0, to = 1) int toastLength) {
-        try {
-            Toast.makeText(context, toastResourceId, toastLength).show();
-        } catch (RuntimeException e) {
-            ACRA.log.w(LOG_TAG, "Could not send crash Toast", e);
-        }
-    }
-}
+package org.acra.util;
+
+import android.content.Context;
+import android.support.annotation.IntRange;
+import android.support.annotation.NonNull;
+import android.support.annotation.StringRes;
+import android.widget.Toast;
+
+import org.acra.ACRA;
+
+import static org.acra.ACRA.LOG_TAG;
+
+/**
+ * Responsible for sending Toasts under all circumstances.
+ *
+ * @author William Ferguson
+ * @since 4.3.0
+ */
+public final class ToastSender {
+    private ToastSender(){}
+
+    /**
+     * Sends a Toast and ensures that any Exception thrown during sending is handled.
+     *
+     * @param context         Application context.
+     * @param toastResourceId Id of the resource to send as the Toast message.
+     * @param toastLength     Length of the Toast.
+     */
+    public static void sendToast(@NonNull Context context, @StringRes int toastResourceId, @IntRange(from = 0, to = 1) int toastLength) {
+        try {
+            Toast.makeText(context, toastResourceId, toastLength).show();
+        } catch (RuntimeException e) {
+            ACRA.log.w(LOG_TAG, "Could not send crash Toast", e);
+        }
+    }
+}
diff --git a/src/main/proguard/proguard.cfg b/acra/src/main/proguard/proguard.cfg
similarity index 100%
rename from src/main/proguard/proguard.cfg
rename to acra/src/main/proguard/proguard.cfg
diff --git a/acra/src/main/res/values/strings.xml b/acra/src/main/res/values/strings.xml
new file mode 100644
index 00000000..a3d564ca
--- /dev/null
+++ b/acra/src/main/res/values/strings.xml
@@ -0,0 +1,8 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!--
+This file is just here to force android-maven-plugin:4.4.3 to include a /res folder in the AAR
+which is now a requirement https://developer.android.com/studio/projects/android-library.html#aar-contents
+-->
+<resources>
+    <string name="not_used">Only here to ensure that android-maven-plugin:4.4.3 creates an R.txt</string>
+</resources>
diff --git a/annotationprocessor/build.gradle b/annotationprocessor/build.gradle
new file mode 100644
index 00000000..466bb7a2
--- /dev/null
+++ b/annotationprocessor/build.gradle
@@ -0,0 +1,27 @@
+/*
+ * Copyright (c) 2017
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+apply plugin: 'java'
+
+dependencies {
+    compile fileTree(dir: 'libs', include: ['*.jar'])
+    compile 'com.google.auto.service:auto-service:1.0-rc2'
+    compile 'com.squareup:javapoet:1.7.0'
+}
+
+sourceCompatibility = "1.8"
+targetCompatibility = "1.8"
+version = '1.0.0'
diff --git a/annotationprocessor/src/main/java/org/acra/AcraAnnotationProcessor.java b/annotationprocessor/src/main/java/org/acra/AcraAnnotationProcessor.java
new file mode 100644
index 00000000..5107eddc
--- /dev/null
+++ b/annotationprocessor/src/main/java/org/acra/AcraAnnotationProcessor.java
@@ -0,0 +1,248 @@
+/*
+ * Copyright (c) 2017
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra;
+
+import com.google.auto.service.AutoService;
+import com.squareup.javapoet.AnnotationSpec;
+import com.squareup.javapoet.ClassName;
+import com.squareup.javapoet.CodeBlock;
+import com.squareup.javapoet.FieldSpec;
+import com.squareup.javapoet.MethodSpec;
+import com.squareup.javapoet.ParameterSpec;
+import com.squareup.javapoet.TypeName;
+import com.squareup.javapoet.TypeSpec;
+
+import java.io.IOException;
+import java.io.Serializable;
+import java.util.ArrayList;
+import java.util.HashSet;
+import java.util.List;
+import java.util.Set;
+import java.util.stream.Collectors;
+
+import javax.annotation.processing.AbstractProcessor;
+import javax.annotation.processing.ProcessingEnvironment;
+import javax.annotation.processing.Processor;
+import javax.annotation.processing.RoundEnvironment;
+import javax.annotation.processing.SupportedAnnotationTypes;
+import javax.annotation.processing.SupportedSourceVersion;
+import javax.lang.model.SourceVersion;
+import javax.lang.model.element.Element;
+import javax.lang.model.element.ElementKind;
+import javax.lang.model.element.ExecutableElement;
+import javax.lang.model.element.Modifier;
+import javax.lang.model.element.TypeElement;
+import javax.lang.model.type.TypeKind;
+import javax.lang.model.type.TypeMirror;
+import javax.lang.model.util.Elements;
+import javax.lang.model.util.Types;
+import javax.tools.Diagnostic;
+
+@AutoService(Processor.class)
+@SupportedAnnotationTypes({AcraAnnotationProcessor.ANNOTATION_CONFIGURATION, AcraAnnotationProcessor.ANNOTATION_CONFIGURATION_BUILDER})
+@SupportedSourceVersion(SourceVersion.RELEASE_6)
+public class AcraAnnotationProcessor extends AbstractProcessor {
+
+    static final String ANNOTATION_CONFIGURATION = "org.acra.annotation.Configuration";
+    static final String ANNOTATION_CONFIGURATION_BUILDER = "org.acra.annotation.ConfigurationBuilder";
+    static final String CONFIGURATION_PACKAGE = "org.acra.config";
+    static final String PREFIX_SETTER = "set";
+    private static final String CONFIGURATION_NAME = "@Configuration";
+    private static final String CONFIGURATION_BUILDER = "BaseConfigurationBuilder";
+    private static final String ACRA_CONFIGURATION = "ACRAConfiguration";
+    private static final String APPLICATION = "android.app.Application";
+    private static final String PARAM_APP = "app";
+    private static final String PARAM_BUILDER = "builder";
+    private static final String VAR_ANNOTATION_CONFIG = "annotationConfig";
+    private static final String ANNOTATION_NON_NULL = "android.support.annotation.NonNull";
+
+    private Elements elementUtils;
+    private Types typeUtils;
+    private ModelUtils utils;
+    private ClassName nonnull;
+    private ClassName application;
+
+    @Override
+    public synchronized void init(ProcessingEnvironment processingEnv) {
+        super.init(processingEnv);
+        elementUtils = processingEnv.getElementUtils();
+        typeUtils = processingEnv.getTypeUtils();
+        utils = new ModelUtils(processingEnv);
+        nonnull = ClassName.bestGuess(ANNOTATION_NON_NULL);
+        application = ClassName.bestGuess(APPLICATION);
+    }
+
+    @Override
+    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnv) {
+        try {
+            final Set<MethodDefinition> methodDefinitions = process(roundEnv, ANNOTATION_CONFIGURATION, ElementKind.ANNOTATION_TYPE, new HashSet<>(), this::createBuilderClass);
+            process(roundEnv, ANNOTATION_CONFIGURATION_BUILDER, ElementKind.CLASS, null, type -> createConfigClass(type, methodDefinitions));
+        } catch (Exception e) {
+            e.printStackTrace();
+            processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, "Failed to generate acra classes");
+        }
+        return true;
+    }
+
+    private <T> T process(RoundEnvironment roundEnv, String annotationName, ElementKind kind, T defaultValue, CheckedFunction<TypeElement, T> function) throws IOException {
+        final TypeElement annotation = elementUtils.getTypeElement(annotationName);
+        final ArrayList<? extends Element> annotatedElements = new ArrayList<>(roundEnv.getElementsAnnotatedWith(annotation));
+        if (annotatedElements.size() > 1) {
+            for (Element e : annotatedElements) {
+                processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, String.format("Only one %s can be annotated with %s", kind.name(), CONFIGURATION_NAME), e);
+            }
+        } else if (!annotatedElements.isEmpty()) {
+            final Element e = annotatedElements.get(0);
+            if (e.getKind() == kind) {
+                return function.apply((TypeElement) e);
+            } else {
+                processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, String.format("%s is only supported on %s", kind.name(), CONFIGURATION_NAME), e);
+            }
+        }
+        return defaultValue;
+    }
+
+    /**
+     * Creates the ACRAConfiguration class
+     *
+     * @param builder           type of the builder which will be used to determine methods to generate
+     * @param methodDefinitions additional methods to be included in the configuration (e.g. from the builder base class)
+     * @return null
+     * @throws IOException if the class file can't be written
+     */
+    private Void createConfigClass(TypeElement builder, Set<MethodDefinition> methodDefinitions) throws IOException {
+        final Set<MethodDefinition> methods = getRelevantMethods(builder, methodDefinitions);
+        final TypeSpec.Builder classBuilder = TypeSpec.classBuilder(ACRA_CONFIGURATION)
+                .addSuperinterface(Serializable.class)
+                .addModifiers(Modifier.PUBLIC, Modifier.FINAL);
+        final CodeBlock.Builder constructor = CodeBlock.builder();
+        for (MethodDefinition method : methods) {
+            final String name = method.getName();
+            final TypeMirror type = utils.getImmutableType(method.getType());
+            if (type != method.getType()) {
+                constructor.addStatement("$1L = new $2T($3L.$1L())", name, type, PARAM_BUILDER);
+            } else {
+                constructor.addStatement("$1L = $2L.$1L()", name, PARAM_BUILDER);
+            }
+            final TypeName typeName = TypeName.get(type);
+            classBuilder.addField(FieldSpec.builder(typeName, name, Modifier.PRIVATE).addAnnotations(method.getAnnotations()).build());
+            classBuilder.addMethod(MethodSpec.methodBuilder(name)
+                    .returns(typeName)
+                    .addModifiers(Modifier.PUBLIC)
+                    .addAnnotations(method.getAnnotations())
+                    .addStatement("return $L", name)
+                    .build());
+        }
+        classBuilder.addMethod(MethodSpec.constructorBuilder().addModifiers(Modifier.PUBLIC)
+                .addParameter(ParameterSpec.builder(TypeName.get(builder.asType()), PARAM_BUILDER)
+                        .addAnnotation(AnnotationSpec.builder(nonnull).build())
+                        .build())
+                .addCode(constructor.build())
+                .build());
+        utils.write(classBuilder.build());
+        return null;
+    }
+
+    /**
+     * Collects all relevant methods from a type.
+     * For a definition of relevant methods, see {@link ModelUtils#shouldRetain(MethodDefinition)}.
+     *
+     * @param builder the type to collect methods from
+     * @return relevant methods in the type
+     */
+    private Set<MethodDefinition> getRelevantMethods(TypeElement builder, Set<MethodDefinition> methodDefinitions) {
+        final Set<MethodDefinition> result = builder.getEnclosedElements().stream().filter(e -> e.getKind() == ElementKind.METHOD && !e.getModifiers().contains(Modifier.PRIVATE))
+                .map(ExecutableElement.class::cast).map(MethodDefinition::from).collect(Collectors.toCollection(HashSet::new));
+        result.addAll(methodDefinitions);
+        return result.stream().filter(utils::shouldRetain).collect(Collectors.toSet());
+    }
+
+    /**
+     * Creates the BaseConfigurationBuilder class
+     *
+     * @param config the configuration annotation type which will be used to determine methods to generate
+     * @return all generated getters
+     * @throws IOException if the class file can't be written
+     */
+    private Set<MethodDefinition> createBuilderClass(TypeElement config) throws IOException {
+        final TypeSpec.Builder classBuilder = TypeSpec.classBuilder(CONFIGURATION_BUILDER)
+                .addModifiers(Modifier.PUBLIC, Modifier.ABSTRACT);
+        final CodeBlock.Builder constructor = CodeBlock.builder()
+                .addStatement("final $1T $2L = $3L.getClass().getAnnotation($1T.class)", config.asType(), VAR_ANNOTATION_CONFIG, PARAM_APP)
+                .beginControlFlow("if ($L != null)", VAR_ANNOTATION_CONFIG);
+        final Set<MethodDefinition> result = config.getEnclosedElements().stream().filter(element -> element.getKind() == ElementKind.METHOD)
+                .map(ExecutableElement.class::cast).filter(utils::isNotDeprecated).map(e -> handleMethod(e, classBuilder, constructor)).collect(Collectors.toSet());
+        constructor.endControlFlow();
+        classBuilder.addMethod(MethodSpec.constructorBuilder().addModifiers(Modifier.PUBLIC)
+                .addParameter(ParameterSpec.builder(application, PARAM_APP)
+                        .addAnnotation(AnnotationSpec.builder(nonnull).build())
+                        .build())
+                .addCode(constructor.build())
+                .build());
+        utils.write(classBuilder.build());
+        return result;
+    }
+
+    /**
+     * Derives all code from one method: A setter, a getter, a field and a line in the constructor
+     *
+     * @param method       the method to derive from
+     * @param classBuilder the class to add methods to
+     * @param constructor  the constructor in which the field will be initialized
+     * @return the generated getter
+     */
+    private MethodDefinition handleMethod(ExecutableElement method, TypeSpec.Builder classBuilder, CodeBlock.Builder constructor) {
+        final String name = method.getSimpleName().toString();
+        final TypeMirror type = method.getReturnType();
+        final TypeName typeName = TypeName.get(type);
+        final TypeName boxedType = TypeName.get(utils.getBoxedType(type));
+        final List<AnnotationSpec> annotations = ModelUtils.getAnnotations(method);
+        classBuilder.addField(FieldSpec.builder(boxedType, name, Modifier.PRIVATE)
+                .addAnnotations(annotations)
+                .build());
+        classBuilder.addMethod(MethodSpec.methodBuilder(PREFIX_SETTER + utils.capitalizeFirst(name))
+                .returns(ClassName.get(CONFIGURATION_PACKAGE, CONFIGURATION_BUILDER))
+                .addParameter(ParameterSpec.builder(typeName, name).addAnnotations(annotations).build())
+                .addModifiers(Modifier.PUBLIC)
+                .addStatement("this.$1L = $1L", name)
+                .addStatement("return this")
+                .build());
+        final CodeBlock.Builder code = CodeBlock.builder()
+                .beginControlFlow("if ($L != null)", name)
+                .addStatement("return $L", name)
+                .endControlFlow();
+        if (type.getKind() == TypeKind.ARRAY) {
+            code.addStatement("return new $T$L", typeUtils.erasure(type), method.getDefaultValue());
+        } else {
+            code.addStatement("return $L", method.getDefaultValue());
+        }
+        classBuilder.addMethod(MethodSpec.methodBuilder(name)
+                .returns(typeName)
+                .addAnnotations(annotations)
+                .addCode(code.build())
+                .build());
+        constructor.addStatement("$1L = $2L.$1L()", name, VAR_ANNOTATION_CONFIG);
+        return new MethodDefinition(name, type, annotations);
+    }
+
+
+    @FunctionalInterface
+    interface CheckedFunction<T, R> {
+        R apply(T t) throws IOException;
+    }
+
+}
diff --git a/annotationprocessor/src/main/java/org/acra/MethodDefinition.java b/annotationprocessor/src/main/java/org/acra/MethodDefinition.java
new file mode 100644
index 00000000..d21cc58a
--- /dev/null
+++ b/annotationprocessor/src/main/java/org/acra/MethodDefinition.java
@@ -0,0 +1,80 @@
+/*
+ * Copyright (c) 2017
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra;
+
+import com.squareup.javapoet.AnnotationSpec;
+
+import java.util.List;
+import java.util.stream.Collectors;
+
+import javax.lang.model.element.ExecutableElement;
+import javax.lang.model.type.TypeMirror;
+
+/**
+ * The minimal Definition needed to create a getter
+ *
+ * @author F43nd1r
+ * @since 18.03.2017
+ */
+class MethodDefinition {
+    private final String name;
+    private final TypeMirror type;
+    private final List<AnnotationSpec> annotations;
+
+    static MethodDefinition from(ExecutableElement method) {
+        return new MethodDefinition(method.getSimpleName().toString(), method.getReturnType(), ModelUtils.getAnnotations(method));
+    }
+
+    MethodDefinition(String name, TypeMirror type, List<AnnotationSpec> annotations) {
+        this.name = name;
+        this.type = type;
+        this.annotations = annotations;
+    }
+
+    String getName() {
+        return name;
+    }
+
+    TypeMirror getType() {
+        return type;
+    }
+
+    List<AnnotationSpec> getAnnotations() {
+        return annotations;
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) return true;
+        if (o == null || getClass() != o.getClass()) return false;
+
+        final MethodDefinition that = (MethodDefinition) o;
+
+        return name.equals(that.name);
+
+    }
+
+    @Override
+    public int hashCode() {
+        return name.hashCode();
+    }
+
+    @Override
+    public String toString() {
+        return annotations.stream().map(AnnotationSpec::toString).collect(Collectors.joining(" ")) + " " + type + " " + name + "()";
+    }
+}
diff --git a/annotationprocessor/src/main/java/org/acra/ModelUtils.java b/annotationprocessor/src/main/java/org/acra/ModelUtils.java
new file mode 100644
index 00000000..fc6685c5
--- /dev/null
+++ b/annotationprocessor/src/main/java/org/acra/ModelUtils.java
@@ -0,0 +1,169 @@
+/*
+ * Copyright (c) 2017
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *     http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package org.acra;
+
+import com.squareup.javapoet.AnnotationSpec;
+import com.squareup.javapoet.ClassName;
+import com.squareup.javapoet.JavaFile;
+import com.squareup.javapoet.TypeSpec;
+
+import java.io.IOException;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+import java.util.stream.Collectors;
+
+import javax.annotation.processing.ProcessingEnvironment;
+import javax.lang.model.element.ExecutableElement;
+import javax.lang.model.element.TypeElement;
+import javax.lang.model.type.ArrayType;
+import javax.lang.model.type.DeclaredType;
+import javax.lang.model.type.PrimitiveType;
+import javax.lang.model.type.TypeKind;
+import javax.lang.model.type.TypeMirror;
+import javax.lang.model.util.Elements;
+import javax.lang.model.util.Types;
+
+import static org.acra.AcraAnnotationProcessor.CONFIGURATION_PACKAGE;
+import static org.acra.AcraAnnotationProcessor.PREFIX_SETTER;
+
+/**
+ * @author F43nd1r
+ * @since 18.03.2017
+ */
+
+class ModelUtils {
+    private static final String IMMUTABLE_MAP = "org.acra.collections.ImmutableMap";
+    private static final String IMMUTABLE_LIST = "org.acra.collections.ImmutableList";
+    private static final String IMMUTABLE_SET = "org.acra.collections.ImmutableSet";
+    private static final String ANNOTATION_HIDE = "org.acra.annotation.Hide";
+
+    private final Types typeUtils;
+    private final TypeMirror map;
+    private final TypeMirror set;
+    private final TypeElement immutableMap;
+    private final TypeElement immutableSet;
+    private final TypeElement immutableList;
+    private final ProcessingEnvironment processingEnv;
+    private final ClassName hide;
+
+    ModelUtils(ProcessingEnvironment processingEnv) {
+        this.processingEnv = processingEnv;
+        this.typeUtils = processingEnv.getTypeUtils();
+        final Elements elementUtils = processingEnv.getElementUtils();
+        map = elementUtils.getTypeElement(Map.class.getName()).asType();
+        set = elementUtils.getTypeElement(Set.class.getName()).asType();
+        immutableMap = elementUtils.getTypeElement(IMMUTABLE_MAP);
+        immutableSet = elementUtils.getTypeElement(IMMUTABLE_SET);
+        immutableList = elementUtils.getTypeElement(IMMUTABLE_LIST);
+        hide = ClassName.bestGuess(ANNOTATION_HIDE);
+    }
+
+    /**
+     * Returns an immutable type extending this type, or if the type is an array a immutable list type
+     *
+     * @param type the type
+     * @return the immutable counterpart (might be type, if type is already immutable or no immutable type was found)
+     */
+    TypeMirror getImmutableType(TypeMirror type) {
+        if (typeUtils.isAssignable(typeUtils.erasure(type), map)) {
+            return getWithParams(immutableMap, type);
+        } else if (typeUtils.isAssignable(typeUtils.erasure(type), set)) {
+            return getWithParams(immutableSet, type);
+        } else if (type.getKind() == TypeKind.ARRAY) {
+            return typeUtils.getDeclaredType(immutableList, ((ArrayType) type).getComponentType());
+        }
+        return type;
+    }
+
+    /**
+     * Creates a type based on base, but with the type parameters from parameterType
+     *
+     * @param baseType      base
+     * @param parameterType parameterType
+     * @return the parametrized type
+     */
+    private TypeMirror getWithParams(TypeElement baseType, TypeMirror parameterType) {
+        final List<? extends TypeMirror> parameters = ((DeclaredType) parameterType).getTypeArguments();
+        return typeUtils.getDeclaredType(baseType, parameters.toArray(new TypeMirror[parameters.size()]));
+    }
+
+    /**
+     * Writes the given class to a respective file in the configuration package
+     *
+     * @param typeSpec the class
+     * @throws IOException if writing fails
+     */
+    void write(TypeSpec typeSpec) throws IOException {
+        JavaFile.builder(CONFIGURATION_PACKAGE, typeSpec)
+                .skipJavaLangImports(true)
+                .indent("    ")
+                .build()
+                .writeTo(processingEnv.getFiler());
+    }
+
+    /**
+     * @param method a method
+     * @return annotationSpecs for all present annotations on the method
+     */
+    static List<AnnotationSpec> getAnnotations(ExecutableElement method) {
+        return method.getAnnotationMirrors().stream().map(AnnotationSpec::get).collect(Collectors.toList());
+    }
+
+    /**
+     * Box the type if it is primitive
+     *
+     * @param type the type to box
+     * @return the boxed type or type, if it is not primitive
+     */
+    TypeMirror getBoxedType(TypeMirror type) {
+        if (type.getKind().isPrimitive()) {
+            return typeUtils.boxedClass((PrimitiveType) type).asType();
+        } else {
+            return type;
+        }
+    }
+
+    /**
+     * Capitalizes the first letter in the given string
+     *
+     * @param word the string
+     * @return the string with a capitalized first letter
+     */
+    String capitalizeFirst(final String word) {
+        return Character.toUpperCase(word.charAt(0)) + word.substring(1);
+    }
+
+    /**
+     * Determines if a method is relevant for ACRAConfiguration generation
+     * A method is not relevant, if it starts with "set", or is annotated with @Hide
+     *
+     * @param method the method to check
+     * @return if the method is relevant
+     */
+    boolean shouldRetain(MethodDefinition method) {
+        return !method.getName().startsWith(PREFIX_SETTER) && !method.getAnnotations().stream().anyMatch(a -> a.type.equals(hide));
+    }
+
+    /**
+     * @param method a method
+     * @return false if the method is deprecated
+     */
+    boolean isNotDeprecated(ExecutableElement method){
+        return method.getAnnotation(Deprecated.class) == null;
+    }
+}
diff --git a/build.gradle b/build.gradle
index c1997d58..e72131f9 100644
--- a/build.gradle
+++ b/build.gradle
@@ -1,36 +1,32 @@
-apply plugin: 'com.android.library'
+// Top-level build file where you can add configuration options common to all sub-projects/modules.
 
-ext {
-    final def pom = new XmlSlurper().parse(new File(projectDir, "pom.xml"))
-    acraVersion = pom.version.toString()
-    supportVersion = pom.depthFirst().find { it.name() == 'support.version' }.toString()
-    androidVersion = pom.depthFirst().find { it.name() == 'android.version' }.toInteger()
-    proguardFile = pom.depthFirst().find { it.name() == 'consumerProguardFile' }.toString()
-    println("building ACRA $acraVersion for android $androidVersion with support version $supportVersion")
-}
-
-android {
-    compileSdkVersion androidVersion
-    buildToolsVersion "23.0.3"
-
-    lintOptions {
-        abortOnError false
+buildscript {
+    repositories {
+        jcenter()
     }
+    dependencies {
+        classpath 'com.android.tools.build:gradle:2.3.0'
+        classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.7'
+        classpath 'com.github.dcendents:android-maven-gradle-plugin:1.5'
+        classpath "org.jfrog.buildinfo:build-info-extractor-gradle:4.4.0"
+        classpath "io.codearte.gradle.nexus:gradle-nexus-staging-plugin:0.5.3"
+        classpath 'net.researchgate:gradle-release:2.5.0'
 
-    defaultConfig {
-        minSdkVersion 8
-        targetSdkVersion androidVersion
-        versionName acraVersion
-        consumerProguardFile proguardFile
+        // NOTE: Do not place your application dependencies here; they belong
+        // in the individual module build.gradle files
     }
+}
+apply plugin: 'com.jfrog.artifactory'
+apply plugin: 'io.codearte.nexus-staging'
 
-    compileOptions {
-        sourceCompatibility JavaVersion.VERSION_1_6
-        targetCompatibility JavaVersion.VERSION_1_6
+allprojects {
+    repositories {
+        jcenter()
     }
 }
 
-dependencies {
-    compile "com.android.support:support-v4:$supportVersion"
-    compile "com.android.support:support-annotations:$supportVersion"
+task clean(type: Delete) {
+    delete rootProject.buildDir
 }
+
+closeRepository.dependsOn ':acra:uploadArchives'
diff --git a/gradle.properties b/gradle.properties
new file mode 100644
index 00000000..ceca5566
--- /dev/null
+++ b/gradle.properties
@@ -0,0 +1,20 @@
+# Project-wide Gradle settings.
+
+# IDE (e.g. Android Studio) users:
+# Gradle settings configured through the IDE *will override*
+# any settings specified in this file.
+
+# For more details on how to configure your build environment visit
+# http://www.gradle.org/docs/current/userguide/build_environment.html
+
+# Specifies the JVM arguments used for the daemon process.
+# The setting is particularly useful for tweaking memory settings.
+# Default value: -Xmx10248m -XX:MaxPermSize=256m
+# org.gradle.jvmargs=-Xmx2048m -XX:MaxPermSize=512m -XX:+HeapDumpOnOutOfMemoryError -Dfile.encoding=UTF-8
+
+# When configured, Gradle will run in incubating parallel mode.
+# This option should only be used with decoupled projects. More details, visit
+# http://www.gradle.org/docs/current/userguide/multi_project_builds.html#sec:decoupled_projects
+# org.gradle.parallel=true
+org.gradle.daemon=true
+org.gradle.jvmargs=-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005
\ No newline at end of file
diff --git a/gradle/wrapper/gradle-wrapper.jar b/gradle/wrapper/gradle-wrapper.jar
new file mode 100644
index 00000000..13372aef
Binary files /dev/null and b/gradle/wrapper/gradle-wrapper.jar differ
diff --git a/gradle/wrapper/gradle-wrapper.properties b/gradle/wrapper/gradle-wrapper.properties
new file mode 100644
index 00000000..0a66667d
--- /dev/null
+++ b/gradle/wrapper/gradle-wrapper.properties
@@ -0,0 +1,6 @@
+#Fri Feb 17 03:38:03 CET 2017
+distributionBase=GRADLE_USER_HOME
+distributionPath=wrapper/dists
+zipStoreBase=GRADLE_USER_HOME
+zipStorePath=wrapper/dists
+distributionUrl=https\://services.gradle.org/distributions/gradle-3.3-all.zip
diff --git a/gradlew b/gradlew
new file mode 100644
index 00000000..9d82f789
--- /dev/null
+++ b/gradlew
@@ -0,0 +1,160 @@
+#!/usr/bin/env bash
+
+##############################################################################
+##
+##  Gradle start up script for UN*X
+##
+##############################################################################
+
+# Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+DEFAULT_JVM_OPTS=""
+
+APP_NAME="Gradle"
+APP_BASE_NAME=`basename "$0"`
+
+# Use the maximum available, or set MAX_FD != -1 to use that value.
+MAX_FD="maximum"
+
+warn ( ) {
+    echo "$*"
+}
+
+die ( ) {
+    echo
+    echo "$*"
+    echo
+    exit 1
+}
+
+# OS specific support (must be 'true' or 'false').
+cygwin=false
+msys=false
+darwin=false
+case "`uname`" in
+  CYGWIN* )
+    cygwin=true
+    ;;
+  Darwin* )
+    darwin=true
+    ;;
+  MINGW* )
+    msys=true
+    ;;
+esac
+
+# Attempt to set APP_HOME
+# Resolve links: $0 may be a link
+PRG="$0"
+# Need this for relative symlinks.
+while [ -h "$PRG" ] ; do
+    ls=`ls -ld "$PRG"`
+    link=`expr "$ls" : '.*-> \(.*\)$'`
+    if expr "$link" : '/.*' > /dev/null; then
+        PRG="$link"
+    else
+        PRG=`dirname "$PRG"`"/$link"
+    fi
+done
+SAVED="`pwd`"
+cd "`dirname \"$PRG\"`/" >/dev/null
+APP_HOME="`pwd -P`"
+cd "$SAVED" >/dev/null
+
+CLASSPATH=$APP_HOME/gradle/wrapper/gradle-wrapper.jar
+
+# Determine the Java command to use to start the JVM.
+if [ -n "$JAVA_HOME" ] ; then
+    if [ -x "$JAVA_HOME/jre/sh/java" ] ; then
+        # IBM's JDK on AIX uses strange locations for the executables
+        JAVACMD="$JAVA_HOME/jre/sh/java"
+    else
+        JAVACMD="$JAVA_HOME/bin/java"
+    fi
+    if [ ! -x "$JAVACMD" ] ; then
+        die "ERROR: JAVA_HOME is set to an invalid directory: $JAVA_HOME
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+    fi
+else
+    JAVACMD="java"
+    which java >/dev/null 2>&1 || die "ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+
+Please set the JAVA_HOME variable in your environment to match the
+location of your Java installation."
+fi
+
+# Increase the maximum file descriptors if we can.
+if [ "$cygwin" = "false" -a "$darwin" = "false" ] ; then
+    MAX_FD_LIMIT=`ulimit -H -n`
+    if [ $? -eq 0 ] ; then
+        if [ "$MAX_FD" = "maximum" -o "$MAX_FD" = "max" ] ; then
+            MAX_FD="$MAX_FD_LIMIT"
+        fi
+        ulimit -n $MAX_FD
+        if [ $? -ne 0 ] ; then
+            warn "Could not set maximum file descriptor limit: $MAX_FD"
+        fi
+    else
+        warn "Could not query maximum file descriptor limit: $MAX_FD_LIMIT"
+    fi
+fi
+
+# For Darwin, add options to specify how the application appears in the dock
+if $darwin; then
+    GRADLE_OPTS="$GRADLE_OPTS \"-Xdock:name=$APP_NAME\" \"-Xdock:icon=$APP_HOME/media/gradle.icns\""
+fi
+
+# For Cygwin, switch paths to Windows format before running java
+if $cygwin ; then
+    APP_HOME=`cygpath --path --mixed "$APP_HOME"`
+    CLASSPATH=`cygpath --path --mixed "$CLASSPATH"`
+    JAVACMD=`cygpath --unix "$JAVACMD"`
+
+    # We build the pattern for arguments to be converted via cygpath
+    ROOTDIRSRAW=`find -L / -maxdepth 1 -mindepth 1 -type d 2>/dev/null`
+    SEP=""
+    for dir in $ROOTDIRSRAW ; do
+        ROOTDIRS="$ROOTDIRS$SEP$dir"
+        SEP="|"
+    done
+    OURCYGPATTERN="(^($ROOTDIRS))"
+    # Add a user-defined pattern to the cygpath arguments
+    if [ "$GRADLE_CYGPATTERN" != "" ] ; then
+        OURCYGPATTERN="$OURCYGPATTERN|($GRADLE_CYGPATTERN)"
+    fi
+    # Now convert the arguments - kludge to limit ourselves to /bin/sh
+    i=0
+    for arg in "$@" ; do
+        CHECK=`echo "$arg"|egrep -c "$OURCYGPATTERN" -`
+        CHECK2=`echo "$arg"|egrep -c "^-"`                                 ### Determine if an option
+
+        if [ $CHECK -ne 0 ] && [ $CHECK2 -eq 0 ] ; then                    ### Added a condition
+            eval `echo args$i`=`cygpath --path --ignore --mixed "$arg"`
+        else
+            eval `echo args$i`="\"$arg\""
+        fi
+        i=$((i+1))
+    done
+    case $i in
+        (0) set -- ;;
+        (1) set -- "$args0" ;;
+        (2) set -- "$args0" "$args1" ;;
+        (3) set -- "$args0" "$args1" "$args2" ;;
+        (4) set -- "$args0" "$args1" "$args2" "$args3" ;;
+        (5) set -- "$args0" "$args1" "$args2" "$args3" "$args4" ;;
+        (6) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" ;;
+        (7) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" ;;
+        (8) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" ;;
+        (9) set -- "$args0" "$args1" "$args2" "$args3" "$args4" "$args5" "$args6" "$args7" "$args8" ;;
+    esac
+fi
+
+# Split up the JVM_OPTS And GRADLE_OPTS values into an array, following the shell quoting and substitution rules
+function splitJvmOpts() {
+    JVM_OPTS=("$@")
+}
+eval splitJvmOpts $DEFAULT_JVM_OPTS $JAVA_OPTS $GRADLE_OPTS
+JVM_OPTS[${#JVM_OPTS[*]}]="-Dorg.gradle.appname=$APP_BASE_NAME"
+
+exec "$JAVACMD" "${JVM_OPTS[@]}" -classpath "$CLASSPATH" org.gradle.wrapper.GradleWrapperMain "$@"
diff --git a/gradlew.bat b/gradlew.bat
new file mode 100644
index 00000000..8a0b282a
--- /dev/null
+++ b/gradlew.bat
@@ -0,0 +1,90 @@
+@if "%DEBUG%" == "" @echo off
+@rem ##########################################################################
+@rem
+@rem  Gradle startup script for Windows
+@rem
+@rem ##########################################################################
+
+@rem Set local scope for the variables with windows NT shell
+if "%OS%"=="Windows_NT" setlocal
+
+@rem Add default JVM options here. You can also use JAVA_OPTS and GRADLE_OPTS to pass JVM options to this script.
+set DEFAULT_JVM_OPTS=
+
+set DIRNAME=%~dp0
+if "%DIRNAME%" == "" set DIRNAME=.
+set APP_BASE_NAME=%~n0
+set APP_HOME=%DIRNAME%
+
+@rem Find java.exe
+if defined JAVA_HOME goto findJavaFromJavaHome
+
+set JAVA_EXE=java.exe
+%JAVA_EXE% -version >NUL 2>&1
+if "%ERRORLEVEL%" == "0" goto init
+
+echo.
+echo ERROR: JAVA_HOME is not set and no 'java' command could be found in your PATH.
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:findJavaFromJavaHome
+set JAVA_HOME=%JAVA_HOME:"=%
+set JAVA_EXE=%JAVA_HOME%/bin/java.exe
+
+if exist "%JAVA_EXE%" goto init
+
+echo.
+echo ERROR: JAVA_HOME is set to an invalid directory: %JAVA_HOME%
+echo.
+echo Please set the JAVA_HOME variable in your environment to match the
+echo location of your Java installation.
+
+goto fail
+
+:init
+@rem Get command-line arguments, handling Windowz variants
+
+if not "%OS%" == "Windows_NT" goto win9xME_args
+if "%@eval[2+2]" == "4" goto 4NT_args
+
+:win9xME_args
+@rem Slurp the command line arguments.
+set CMD_LINE_ARGS=
+set _SKIP=2
+
+:win9xME_args_slurp
+if "x%~1" == "x" goto execute
+
+set CMD_LINE_ARGS=%*
+goto execute
+
+:4NT_args
+@rem Get arguments from the 4NT Shell from JP Software
+set CMD_LINE_ARGS=%$
+
+:execute
+@rem Setup the command line
+
+set CLASSPATH=%APP_HOME%\gradle\wrapper\gradle-wrapper.jar
+
+@rem Execute Gradle
+"%JAVA_EXE%" %DEFAULT_JVM_OPTS% %JAVA_OPTS% %GRADLE_OPTS% "-Dorg.gradle.appname=%APP_BASE_NAME%" -classpath "%CLASSPATH%" org.gradle.wrapper.GradleWrapperMain %CMD_LINE_ARGS%
+
+:end
+@rem End local scope for the variables with windows NT shell
+if "%ERRORLEVEL%"=="0" goto mainEnd
+
+:fail
+rem Set variable GRADLE_EXIT_CONSOLE if you need the _script_ return code instead of
+rem the _cmd.exe /c_ return code!
+if  not "" == "%GRADLE_EXIT_CONSOLE%" exit 1
+exit /b 1
+
+:mainEnd
+if "%OS%"=="Windows_NT" endlocal
+
+:omega
diff --git a/pom.xml b/pom.xml
deleted file mode 100644
index ea7bfcde..00000000
--- a/pom.xml
+++ /dev/null
@@ -1,248 +0,0 @@
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
-	<modelVersion>4.0.0</modelVersion>
-    <parent>
-        <groupId>org.sonatype.oss</groupId>
-        <artifactId>oss-parent</artifactId>
-        <version>7</version>
-    </parent>
-	<groupId>ch.acra</groupId>
-	<artifactId>acra</artifactId>
-	<packaging>aar</packaging>
-	<version>4.9.1-SNAPSHOT</version>
-
-	<name>Application Crash Report for Android</name>
-
-	<description>
-        Publishes a report of an Android application crash to Google docs (or some other end point).
-    </description>
-
-	<url>http://acra.ch</url>
-	<inceptionYear>2010</inceptionYear>
-
-	<licenses>
-		<license>
-			<name>Apache 2</name>
-			<distribution>repo</distribution>
-			<url>http://www.apache.org/licenses/LICENSE-2.0.txt</url>
-			<comments>Go for it.</comments>
-		</license>
-	</licenses>
-
-	<developers>
-		<developer>
-			<id>kevin.gaudin</id>
-			<name>Kevin Gaudin</name>
-			<roles>
-				<role>developer</role>
-			</roles>
-		</developer>
-		<developer>
-			<id>william.ferguson</id>
-			<name>William Ferguson</name>
-			<roles>
-				<role>developer</role>
-			</roles>
-		</developer>
-	</developers>
-
-	<properties>
-		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
-
-		<!--
-			NB ACRA supports back to API 8.
-
-			But in order to compile classes and method that will NOT be used except when the target platform is of sufficient version
-			we need to compile against version 23. All such classes are in the org.acra.jraf package.
-		-->
-        <android.version>23</android.version>
-		<support.version>23.3.0</support.version>
-	</properties>
-
-	<dependencies>
-        <!--
-            To get this library to compile (with appropriate warnings) in your IDE, you need to point your IDE project SDK
-            to your Android SDK and choose an Android version. This library has been designed to run in Android-3 and newer versions.
-
-            To get this library to compile in Maven you need to have an Android SDK installed and pointed to
-            by an ANDROID_HOME environment variable. This is because we use a bootclasspath during compilation
-            to ensure that only APIs from a specific Android version have been used.
-            NB The AndroidAPI dependency is included below to allow test execution and javadoc generation.
-        -->
-        <dependency>
-            <groupId>android</groupId> <!-- deployed using the android-maven-sdk-deployer -->
-            <artifactId>android</artifactId>
-            <version>6.0_r1</version>
-            <type>jar</type>
-            <scope>provided</scope>
-        </dependency>
-		<dependency>
-			<groupId>com.android.support</groupId>
-			<artifactId>support-v4</artifactId>
-			<version>${support.version}</version>
-			<type>aar</type>
-		</dependency>
-
-		<dependency>
-			<groupId>com.android.support</groupId>
-			<artifactId>support-annotations</artifactId>
-			<version>${support.version}</version>
-			<type>jar</type>
-		</dependency>
-
-		<dependency>
-			<groupId>junit</groupId>
-			<artifactId>junit</artifactId>
-			<version>4.8.1</version>
-			<type>jar</type>
-			<scope>test</scope>
-		</dependency>
-    </dependencies>
-
-	<build>
-		<pluginManagement>
-			<plugins>
-				<plugin>
-					<artifactId>maven-release-plugin</artifactId>
-					<version>2.1</version>
-				</plugin>
-				<plugin>
-					<artifactId>maven-compiler-plugin</artifactId>
-					<version>2.3.2</version>
-				</plugin>
-				<plugin>
-					<artifactId>maven-assembly-plugin</artifactId>
-					<version>2.2.1</version>
-				</plugin>
-				<plugin>
-					<artifactId>maven-javadoc-plugin</artifactId>
-					<version>2.10.3</version>
-				</plugin>
-				<plugin>
-					<artifactId>maven-source-plugin</artifactId>
-					<version>2.1.2</version>
-				</plugin>
-			</plugins>
-		</pluginManagement>
-
-		<plugins>
-			<plugin>
-				<groupId>com.simpligility.maven.plugins</groupId>
-				<artifactId>android-maven-plugin</artifactId>
-				<version>4.4.2</version>
-				<extensions>true</extensions>
-				<configuration>
-					<consumerProguardFiles>
-						<consumerProguardFile>src/main/proguard/proguard.cfg</consumerProguardFile>
-					</consumerProguardFiles>
-
-					<buildConfigConstants>
-						<buildConfigConstant>
-							<name>VERSION_NAME</name>
-							<type>String</type>
-							<value>${project.version}</value>
-						</buildConfigConstant>
-					</buildConfigConstants>
-
-				</configuration>
-			</plugin>
-
-			<plugin>
-				<artifactId>maven-compiler-plugin</artifactId>
-				<configuration>
-					<source>1.6</source>
-					<target>1.6</target>
-					<showWarnings>true</showWarnings>
-                    <compilerArguments>
-                        <bootclasspath>${env.ANDROID_HOME}/platforms/android-${android.version}/android.jar</bootclasspath>
-                    </compilerArguments>
-				</configuration>
-			</plugin>
-			<plugin>
-				<artifactId>maven-javadoc-plugin</artifactId>
-				<executions>
-					<execution>
-						<id>attach-javadocs</id>
-						<goals>
-							<goal>jar</goal>
-						</goals>
-					</execution>
-				</executions>
-                <configuration>
-					<bootclasspath>${env.JAVA_HOME}/jre/lib/rt.jar;${env.ANDROID_HOME}/platforms/android-${android.version}/android.jar</bootclasspath>
-                    <excludePackageNames>org.acra.log,org.acra.util</excludePackageNames>
-                </configuration>
-			</plugin>
-			<plugin>
-				<artifactId>maven-source-plugin</artifactId>
-				<executions>
-					<execution>
-						<id>attach-sources</id>
-						<goals>
-							<goal>jar</goal>
-						</goals>
-					</execution>
-				</executions>
-			</plugin>
-			<plugin>
-				<artifactId>maven-assembly-plugin</artifactId>
-				<configuration>
-					<descriptors>
-						<descriptor>src/main/assembly/distribution.xml</descriptor>
-					</descriptors>
-					<finalName>${project.build.finalName}</finalName>
-					<appendAssemblyId>false</appendAssemblyId>
-				</configuration>
-				<executions>
-					<execution>
-						<id>make-assembly</id>
-						<phase>package</phase>
-						<goals>
-							<goal>single</goal>
-						</goals>
-					</execution>
-				</executions>
-			</plugin>
-		</plugins>
-		<extensions>
-			<extension>
-				<groupId>org.jvnet.wagon-svn</groupId>
-				<artifactId>wagon-svn</artifactId>
-				<version>1.9</version>
-			</extension>
-		</extensions>
-	</build>
-
-	<scm>
-		<connection>scm:git:git@github.com:ACRA/acra.git</connection>
-		<developerConnection>scm:git:git@github.com:ACRA/acra.git</developerConnection>
-		<url>ssh://git@github.com:ACRA/acra.git</url>
-	</scm>
-    <profiles>
-        <profile>
-            <id>release-sign-artifacts</id>
-            <activation>
-                <property>
-                    <name>performRelease</name>
-                    <value>true</value>
-                </property>
-            </activation>
-            <build>
-                <plugins>
-                    <plugin>
-                        <groupId>org.apache.maven.plugins</groupId>
-                        <artifactId>maven-gpg-plugin</artifactId>
-                        <executions>
-                            <execution>
-                                <id>sign-artifacts</id>
-                                <phase>verify</phase>
-                                    <goals>
-                                        <goal>sign</goal>
-                                    </goals>
-                            </execution>
-                        </executions>
-                    </plugin>
-                </plugins>
-            </build>
-        </profile>
-    </profiles>
-</project>
diff --git a/settings.gradle b/settings.gradle
new file mode 100644
index 00000000..a1f70e08
--- /dev/null
+++ b/settings.gradle
@@ -0,0 +1 @@
+include ':acra', ':acratest', ':annotationprocessor'
\ No newline at end of file
diff --git a/src/main/AndroidManifest.xml b/src/main/AndroidManifest.xml
deleted file mode 100644
index c5d4a733..00000000
--- a/src/main/AndroidManifest.xml
+++ /dev/null
@@ -1,55 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<!--
-  ~ Copyright (c) Xandar IP 2013.
-  ~
-  ~ All Rights Reserved
-  ~ No part of this application may be reproduced, copied, modified or adapted, without the prior written consent
-  ~ of the author, unless otherwise indicated for stand-alone materials.
-  ~
-  ~ Contact support@xandar.com.au for copyright requests.
-  -->
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-          package="ch.acra.acra">
-    
-    <!--
-        Version API Name
-        6.0     23  Marshmallow
-        5.0     21  Lollipop
-        4.4W    20  KitKat Watch
-        4.4.2   19  KitKat
-        4.3     18
-        4.2     17
-        4.1     16  Jelly Bean
-        4.0.3   15
-        4.0     14  Ice Cream Sandwich
-        3.2     13
-        3.1.X   12
-        3.0     11  Honeycomb
-        2.3.3   10  Gingerbread
-        2.3     9
-        2.2     8   Froyo
-        2.1     7   Eclair
-        2.0.1   6
-        2.0     5
-        1.6     4   Donut
-        1.5     3   Cupcake
-        1.1     2
-        1.0     1
-    -->
-    <uses-sdk android:minSdkVersion="8"/>
-
-    <application>
-        <activity
-            android:name="org.acra.dialog.CrashReportDialog"
-            android:theme="@android:style/Theme.Dialog"
-            android:launchMode="singleInstance"
-            android:excludeFromRecents="true"
-            android:finishOnTaskLaunch="true"
-            android:process=":acra"/>
-
-        <service
-            android:name="org.acra.sender.SenderService"
-            android:exported="false"
-            android:process=":acra" />
-    </application>
-</manifest>
\ No newline at end of file
diff --git a/src/main/java/org/acra/collector/CrashReportDataFactory.java b/src/main/java/org/acra/collector/CrashReportDataFactory.java
deleted file mode 100644
index f52f4465..00000000
--- a/src/main/java/org/acra/collector/CrashReportDataFactory.java
+++ /dev/null
@@ -1,635 +0,0 @@
-/*
- *  Copyright 2012 Kevin Gaudin
- *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-
-package org.acra.collector;
-
-import android.Manifest;
-import android.content.Context;
-import android.content.SharedPreferences;
-import android.content.pm.PackageInfo;
-import android.os.Build;
-import android.os.Environment;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.text.TextUtils;
-
-import org.acra.ACRA;
-import org.acra.ReportField;
-import org.acra.builder.ReportBuilder;
-import org.acra.config.ACRAConfiguration;
-import org.acra.util.Installation;
-import org.acra.util.PackageManagerWrapper;
-import org.acra.util.ReportUtils;
-
-import java.io.IOException;
-import java.io.PrintWriter;
-import java.io.StringWriter;
-import java.io.Writer;
-import java.util.Calendar;
-import java.util.GregorianCalendar;
-import java.util.HashMap;
-import java.util.LinkedHashMap;
-import java.util.Map;
-import java.util.Set;
-import java.util.UUID;
-
-import static org.acra.ACRA.LOG_TAG;
-import static org.acra.ReportField.ANDROID_VERSION;
-import static org.acra.ReportField.APPLICATION_LOG;
-import static org.acra.ReportField.APP_VERSION_CODE;
-import static org.acra.ReportField.APP_VERSION_NAME;
-import static org.acra.ReportField.AVAILABLE_MEM_SIZE;
-import static org.acra.ReportField.BRAND;
-import static org.acra.ReportField.BUILD;
-import static org.acra.ReportField.BUILD_CONFIG;
-import static org.acra.ReportField.CRASH_CONFIGURATION;
-import static org.acra.ReportField.CUSTOM_DATA;
-import static org.acra.ReportField.DEVICE_FEATURES;
-import static org.acra.ReportField.DEVICE_ID;
-import static org.acra.ReportField.DISPLAY;
-import static org.acra.ReportField.DROPBOX;
-import static org.acra.ReportField.DUMPSYS_MEMINFO;
-import static org.acra.ReportField.ENVIRONMENT;
-import static org.acra.ReportField.EVENTSLOG;
-import static org.acra.ReportField.FILE_PATH;
-import static org.acra.ReportField.INITIAL_CONFIGURATION;
-import static org.acra.ReportField.INSTALLATION_ID;
-import static org.acra.ReportField.IS_SILENT;
-import static org.acra.ReportField.LOGCAT;
-import static org.acra.ReportField.MEDIA_CODEC_LIST;
-import static org.acra.ReportField.PACKAGE_NAME;
-import static org.acra.ReportField.PHONE_MODEL;
-import static org.acra.ReportField.PRODUCT;
-import static org.acra.ReportField.RADIOLOG;
-import static org.acra.ReportField.SETTINGS_GLOBAL;
-import static org.acra.ReportField.SETTINGS_SECURE;
-import static org.acra.ReportField.SETTINGS_SYSTEM;
-import static org.acra.ReportField.SHARED_PREFERENCES;
-import static org.acra.ReportField.STACK_TRACE;
-import static org.acra.ReportField.STACK_TRACE_HASH;
-import static org.acra.ReportField.THREAD_DETAILS;
-import static org.acra.ReportField.TOTAL_MEM_SIZE;
-import static org.acra.ReportField.USER_EMAIL;
-import static org.acra.ReportField.USER_IP;
-
-/**
- * Responsible for creating the CrashReportData for an Exception.
- * <p>
- * Also responsible for holding the custom data to send with each report.
- * </p>
- *
- * @author William Ferguson
- * @since 4.3.0
- */
-public final class CrashReportDataFactory {
-
-    private final Context context;
-    private final ACRAConfiguration config;
-    private final SharedPreferences prefs;
-    private final Map<String, String> customParameters = new LinkedHashMap<String, String>();
-    private final Calendar appStartDate;
-    private final String initialConfiguration;
-
-    public CrashReportDataFactory(@NonNull Context context, @NonNull ACRAConfiguration config,
-                                  @NonNull SharedPreferences prefs, @NonNull Calendar appStartDate,
-                                  @Nullable String initialConfiguration) {
-        this.context = context;
-        this.config = config;
-        this.prefs = prefs;
-        this.appStartDate = appStartDate;
-        this.initialConfiguration = initialConfiguration;
-    }
-
-    /**
-     * <p>
-     * Adds a custom key and value to be reported with the generated
-     * CashReportData.
-     * </p>
-     * <p>
-     * The key/value pairs will be stored in the "custom" column, as a text
-     * containing one 'key = value' pair on each line.
-     * </p>
-     *
-     * @param key   A key for your custom data.
-     * @param value The value associated to your key.
-     * @return The previous value for this key if there was one, or null.
-     */
-    public String putCustomData(@NonNull String key, String value) {
-        return customParameters.put(key, value);
-    }
-
-    /**
-     * Removes a key/value pair from the custom data field.
-     *
-     * @param key The key of the data to be removed.
-     * @return The value for this key before removal.
-     */
-    public String removeCustomData(@NonNull String key) {
-        return customParameters.remove(key);
-    }
-
-    /**
-     * Removes all key/value pairs from the custom data field.
-     */
-    public void clearCustomData() {
-        customParameters.clear();
-    }
-
-    /**
-     * Gets the current value for a key in the custom data field.
-     *
-     * @param key The key of the data to be retrieved.
-     * @return The value for this key.
-     */
-    public String getCustomData(@NonNull String key) {
-        return customParameters.get(key);
-    }
-
-    /**
-     * Collects crash data.
-     *
-     * @param builder ReportBuilder for whom to crete the crash report.
-     * @return CrashReportData identifying the current crash.
-     */
-    @NonNull
-    public CrashReportData createCrashData(@NonNull ReportBuilder builder) {
-        final CrashReportData crashReportData = new CrashReportData();
-        try {
-            final Set<ReportField> crashReportFields = config.getReportFields();
-
-            // Make every entry here bullet proof and move any slightly dodgy
-            // ones to the end.
-            // This ensures that we collect as much info as possible before
-            // something crashes the collection process.
-
-            try {
-                crashReportData.put(STACK_TRACE, getStackTrace(builder.getMessage(), builder.getException()));
-            } catch (RuntimeException e) {
-                ACRA.log.e(LOG_TAG, "Error while retrieving STACK_TRACE data", e);
-            }
-
-            // Collect DropBox and logcat. This is done first because some ROMs spam the log with every get on
-            // Settings.
-            final PackageManagerWrapper pm = new PackageManagerWrapper(context);
-
-            // Before JellyBean, this required the READ_LOGS permission
-            // Since JellyBean, READ_LOGS is not granted to third-party apps anymore for security reasons.
-            // Though, we can call logcat without any permission and still get traces related to our app.
-            final boolean hasReadLogsPermission = pm.hasPermission(Manifest.permission.READ_LOGS) || Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN;
-            if (prefs.getBoolean(ACRA.PREF_ENABLE_SYSTEM_LOGS, true) && hasReadLogsPermission) {
-                if (ACRA.DEV_LOGGING)
-                    ACRA.log.d(LOG_TAG, "READ_LOGS granted! ACRA can include LogCat and DropBox data.");
-                final LogCatCollector logCatCollector = new LogCatCollector();
-                if (crashReportFields.contains(LOGCAT)) {
-                    try {
-                        crashReportData.put(LOGCAT, logCatCollector.collectLogCat(config, null));
-                    } catch (RuntimeException e) {
-                        ACRA.log.e(LOG_TAG, "Error while retrieving LOGCAT data", e);
-                    }
-                }
-                if (crashReportFields.contains(EVENTSLOG)) {
-                    try {
-                        crashReportData.put(EVENTSLOG, logCatCollector.collectLogCat(config, "events"));
-                    } catch (RuntimeException e) {
-                        ACRA.log.e(LOG_TAG, "Error while retrieving EVENTSLOG data", e);
-                    }
-                }
-                if (crashReportFields.contains(RADIOLOG)) {
-                    try {
-                        crashReportData.put(RADIOLOG, logCatCollector.collectLogCat(config, "radio"));
-                    } catch (RuntimeException e) {
-                        ACRA.log.e(LOG_TAG, "Error while retrieving RADIOLOG data", e);
-                    }
-                }
-                if (crashReportFields.contains(DROPBOX)) {
-                    try {
-                        crashReportData.put(DROPBOX, new DropBoxCollector().read(context, config));
-                    } catch (RuntimeException e) {
-                        ACRA.log.e(LOG_TAG, "Error while retrieving DROPBOX data", e);
-                    }
-                }
-            } else {
-                if (ACRA.DEV_LOGGING)
-                    ACRA.log.d(LOG_TAG, "READ_LOGS not allowed. ACRA will not include LogCat and DropBox data.");
-            }
-
-            try {
-                crashReportData.put(ReportField.USER_APP_START_DATE, ReportUtils.getTimeString(appStartDate));
-            } catch (RuntimeException e) {
-                ACRA.log.e(LOG_TAG, "Error while retrieving USER_APP_START_DATE data", e);
-            }
-
-            if (builder.isSendSilently()) {
-                crashReportData.put(IS_SILENT, "true");
-            }
-
-            // Always generate report uuid
-            try {
-                crashReportData.put(ReportField.REPORT_ID, UUID.randomUUID().toString());
-            } catch (RuntimeException e) {
-                ACRA.log.e(LOG_TAG, "Error while retrieving REPORT_ID data", e);
-            }
-
-            // Always generate crash time
-            try {
-                final Calendar curDate = new GregorianCalendar();
-                crashReportData.put(ReportField.USER_CRASH_DATE, ReportUtils.getTimeString(curDate));
-            } catch (RuntimeException e) {
-                ACRA.log.e(LOG_TAG, "Error while retrieving USER_CRASH_DATE data", e);
-            }
-
-            // StackTrace hash
-            if (crashReportFields.contains(STACK_TRACE_HASH)) {
-                try {
-                    crashReportData.put(ReportField.STACK_TRACE_HASH, getStackTraceHash(builder.getException()));
-                } catch (RuntimeException e) {
-                    ACRA.log.e(LOG_TAG, "Error while retrieving STACK_TRACE_HASH data", e);
-                }
-            }
-
-            // Installation unique ID
-            if (crashReportFields.contains(INSTALLATION_ID)) {
-                try {
-                    crashReportData.put(INSTALLATION_ID, Installation.id(context));
-                } catch (RuntimeException e) {
-                    ACRA.log.e(LOG_TAG, "Error while retrieving INSTALLATION_ID data", e);
-                }
-            }
-
-            // Device Configuration when crashing
-            if (crashReportFields.contains(INITIAL_CONFIGURATION)) {
-                try {
-                    crashReportData.put(INITIAL_CONFIGURATION, initialConfiguration);
-                } catch (RuntimeException e) {
-                    ACRA.log.e(LOG_TAG, "Error while retrieving INITIAL_CONFIGURATION data", e);
-                }
-            }
-            if (crashReportFields.contains(CRASH_CONFIGURATION)) {
-                try {
-                    crashReportData.put(CRASH_CONFIGURATION, ConfigurationCollector.collectConfiguration(context));
-                } catch (RuntimeException e) {
-                    ACRA.log.e(LOG_TAG, "Error while retrieving CRASH_CONFIGURATION data", e);
-                }
-            }
-
-            // Collect meminfo
-            if (!(builder.getException() instanceof OutOfMemoryError) && crashReportFields.contains(DUMPSYS_MEMINFO)) {
-                try {
-                    crashReportData.put(DUMPSYS_MEMINFO, DumpSysCollector.collectMemInfo());
-                } catch (RuntimeException e) {
-                    ACRA.log.e(LOG_TAG, "Error while retrieving DUMPSYS_MEMINFO data", e);
-                }
-            }
-
-            // Application Package name
-            if (crashReportFields.contains(PACKAGE_NAME)) {
-                try {
-                    crashReportData.put(PACKAGE_NAME, context.getPackageName());
-                } catch (RuntimeException e) {
-                    ACRA.log.e(LOG_TAG, "Error while retrieving PACKAGE_NAME data", e);
-                }
-            }
-
-            // Android OS Build details
-            if (crashReportFields.contains(BUILD)) {
-                try {
-                    crashReportData.put(BUILD, ReflectionCollector.collectConstants(android.os.Build.class) + ReflectionCollector.collectConstants(android.os.Build.VERSION.class, "VERSION"));
-                } catch (RuntimeException e) {
-                    ACRA.log.e(LOG_TAG, "Error while retrieving BUILD data", e);
-                }
-            }
-
-            // Device model
-            if (crashReportFields.contains(PHONE_MODEL)) {
-                try {
-                    crashReportData.put(PHONE_MODEL, android.os.Build.MODEL);
-                } catch (RuntimeException e) {
-                    ACRA.log.e(LOG_TAG, "Error while retrieving PHONE_MODEL data", e);
-                }
-            }
-            // Android version
-            if (crashReportFields.contains(ANDROID_VERSION)) {
-                try {
-                    crashReportData.put(ANDROID_VERSION, android.os.Build.VERSION.RELEASE);
-                } catch (RuntimeException e) {
-                    ACRA.log.e(LOG_TAG, "Error while retrieving ANDROID_VERSION data", e);
-                }
-            }
-
-            // Device Brand (manufacturer)
-            if (crashReportFields.contains(BRAND)) {
-                try {
-                    crashReportData.put(BRAND, android.os.Build.BRAND);
-                } catch (RuntimeException e) {
-                    ACRA.log.e(LOG_TAG, "Error while retrieving BRAND data", e);
-                }
-            }
-            if (crashReportFields.contains(PRODUCT)) {
-                try {
-                    crashReportData.put(PRODUCT, android.os.Build.PRODUCT);
-                } catch (RuntimeException e) {
-                    ACRA.log.e(LOG_TAG, "Error while retrieving PRODUCT data", e);
-                }
-            }
-
-            // Device Memory
-            if (crashReportFields.contains(TOTAL_MEM_SIZE)) {
-                try {
-                    crashReportData.put(TOTAL_MEM_SIZE, Long.toString(ReportUtils.getTotalInternalMemorySize()));
-                } catch (RuntimeException e) {
-                    ACRA.log.e(LOG_TAG, "Error while retrieving TOTAL_MEM_SIZE data", e);
-                }
-            }
-            if (crashReportFields.contains(AVAILABLE_MEM_SIZE)) {
-                try {
-                    crashReportData.put(AVAILABLE_MEM_SIZE, Long.toString(ReportUtils.getAvailableInternalMemorySize()));
-                } catch (RuntimeException e) {
-                    ACRA.log.e(LOG_TAG, "Error while retrieving AVAILABLE_MEM_SIZE data", e);
-                }
-            }
-
-            // Application file path
-            if (crashReportFields.contains(FILE_PATH)) {
-                try {
-                    crashReportData.put(FILE_PATH, ReportUtils.getApplicationFilePath(context));
-                } catch (RuntimeException e) {
-                    ACRA.log.e(LOG_TAG, "Error while retrieving FILE_PATH data", e);
-                }
-            }
-
-            // Main display details
-            if (crashReportFields.contains(DISPLAY)) {
-                try {
-                    crashReportData.put(DISPLAY, DisplayManagerCollector.collectDisplays(context));
-                } catch (RuntimeException e) {
-                    ACRA.log.e(LOG_TAG, "Error while retrieving DISPLAY data", e);
-                }
-            }
-
-            // Add custom info, they are all stored in a single field
-            if (crashReportFields.contains(CUSTOM_DATA)) {
-                try {
-                    crashReportData.put(CUSTOM_DATA, createCustomInfoString(builder.getCustomData()));
-                } catch (RuntimeException e) {
-                    ACRA.log.e(LOG_TAG, "Error while retrieving CUSTOM_DATA data", e);
-                }
-            }
-
-            if (crashReportFields.contains(BUILD_CONFIG)) {
-                try {
-                    final Class buildConfigClass = getBuildConfigClass();
-                    crashReportData.put(BUILD_CONFIG, ReflectionCollector.collectConstants(buildConfigClass));
-                } catch (ClassNotFoundException ignored) {
-                    // We have already logged this when we had the name of the class that wasn't found.
-                } catch (RuntimeException e) {
-                    ACRA.log.e(LOG_TAG, "Error while retrieving BUILD_CONFIG data", e);
-                }
-            }
-
-            // Add user email address, if set in the app's preferences
-            if (crashReportFields.contains(USER_EMAIL)) {
-                try {
-                    crashReportData.put(USER_EMAIL, prefs.getString(ACRA.PREF_USER_EMAIL_ADDRESS, "N/A"));
-                } catch (RuntimeException e) {
-                    ACRA.log.e(LOG_TAG, "Error while retrieving USER_EMAIL data", e);
-                }
-            }
-
-            // Device features
-            if (crashReportFields.contains(DEVICE_FEATURES)) {
-                try {
-                    crashReportData.put(DEVICE_FEATURES, DeviceFeaturesCollector.getFeatures(context));
-                } catch (RuntimeException e) {
-                    ACRA.log.e(LOG_TAG, "Error while retrieving DEVICE_FEATURES data", e);
-                }
-            }
-
-            // Environment (External storage state)
-            if (crashReportFields.contains(ENVIRONMENT)) {
-                try {
-                    crashReportData.put(ENVIRONMENT, ReflectionCollector.collectStaticGettersResults(Environment.class));
-                } catch (RuntimeException e) {
-                    ACRA.log.e(LOG_TAG, "Error while retrieving ENVIRONMENT data", e);
-                }
-            }
-
-            final SettingsCollector settingsCollector = new SettingsCollector(context, config);
-            // System settings
-            if (crashReportFields.contains(SETTINGS_SYSTEM)) {
-                try {
-                    crashReportData.put(SETTINGS_SYSTEM, settingsCollector.collectSystemSettings());
-                } catch (RuntimeException e) {
-                    ACRA.log.e(LOG_TAG, "Error while retrieving SETTINGS_SYSTEM data", e);
-                }
-            }
-
-            // Secure settings
-            if (crashReportFields.contains(SETTINGS_SECURE)) {
-                try {
-                    crashReportData.put(SETTINGS_SECURE, settingsCollector.collectSecureSettings());
-                } catch (RuntimeException e) {
-                    ACRA.log.e(LOG_TAG, "Error while retrieving SETTINGS_SECURE data", e);
-                }
-            }
-
-            // Global settings
-            if (crashReportFields.contains(SETTINGS_GLOBAL)) {
-                try {
-
-                    crashReportData.put(SETTINGS_GLOBAL, settingsCollector.collectGlobalSettings());
-                } catch (RuntimeException e) {
-                    ACRA.log.e(LOG_TAG, "Error while retrieving SETTINGS_GLOBAL data", e);
-                }
-            }
-
-            // SharedPreferences
-            if (crashReportFields.contains(SHARED_PREFERENCES)) {
-                try {
-                    crashReportData.put(SHARED_PREFERENCES, new SharedPreferencesCollector(context, config).collect());
-                } catch (RuntimeException e) {
-                    ACRA.log.e(LOG_TAG, "Error while retrieving SHARED_PREFERENCES data", e);
-                }
-            }
-
-            // Now get all the crash data that relies on the PackageManager.getPackageInfo()
-            // (which may or may not be here).
-            try {
-                final PackageInfo pi = pm.getPackageInfo();
-                if (pi != null) {
-                    // Application Version
-                    if (crashReportFields.contains(APP_VERSION_CODE)) {
-                        crashReportData.put(APP_VERSION_CODE, Integer.toString(pi.versionCode));
-                    }
-                    if (crashReportFields.contains(APP_VERSION_NAME)) {
-                        crashReportData.put(APP_VERSION_NAME, pi.versionName != null ? pi.versionName : "not set");
-                    }
-                } else {
-                    // Could not retrieve package info...
-                    crashReportData.put(APP_VERSION_NAME, "Package info unavailable");
-                }
-            } catch (RuntimeException e) {
-                ACRA.log.e(LOG_TAG, "Error while retrieving APP_VERSION_CODE and APP_VERSION_NAME data", e);
-            }
-
-            // Retrieve UDID(IMEI) if permission is available
-            if (crashReportFields.contains(DEVICE_ID) && prefs.getBoolean(ACRA.PREF_ENABLE_DEVICE_ID, true)
-                    && pm.hasPermission(Manifest.permission.READ_PHONE_STATE)) {
-                try {
-                    final String deviceId = ReportUtils.getDeviceId(context);
-                    if (deviceId != null) {
-                        crashReportData.put(DEVICE_ID, deviceId);
-                    }
-                } catch (RuntimeException e) {
-                    ACRA.log.e(LOG_TAG, "Error while retrieving DEVICE_ID data", e);
-                }
-            }
-
-            // Application specific log file
-            if (crashReportFields.contains(APPLICATION_LOG)) {
-                try {
-                    final String logFile = new LogFileCollector().collectLogFile(context, config.applicationLogFile(), config.applicationLogFileLines());
-                    crashReportData.put(APPLICATION_LOG, logFile);
-                } catch (IOException e) {
-                    ACRA.log.e(LOG_TAG, "Error while reading application log file " + config.applicationLogFile(), e);
-                } catch (RuntimeException e) {
-                    ACRA.log.e(LOG_TAG, "Error while retrieving APPLICATION_LOG data", e);
-
-                }
-            }
-
-            // Media Codecs list
-            if (crashReportFields.contains(MEDIA_CODEC_LIST)) {
-                try {
-                    crashReportData.put(MEDIA_CODEC_LIST, MediaCodecListCollector.collectMediaCodecList());
-                } catch (RuntimeException e) {
-                    ACRA.log.e(LOG_TAG, "Error while retrieving MEDIA_CODEC_LIST data", e);
-                }
-            }
-
-            // Failing thread details
-            if (crashReportFields.contains(THREAD_DETAILS)) {
-                try {
-                    crashReportData.put(THREAD_DETAILS, ThreadCollector.collect(builder.getUncaughtExceptionThread()));
-                } catch (RuntimeException e) {
-                    ACRA.log.e(LOG_TAG, "Error while retrieving THREAD_DETAILS data", e);
-                }
-            }
-
-            // IP addresses
-            if (crashReportFields.contains(USER_IP)) {
-                try {
-                    crashReportData.put(USER_IP, ReportUtils.getLocalIpAddress());
-                } catch (RuntimeException e) {
-                    ACRA.log.e(LOG_TAG, "Error while retrieving USER_IP data", e);
-                }
-            }
-
-        } catch (RuntimeException e) {
-            ACRA.log.e(LOG_TAG, "Error while retrieving crash data", e);
-        }
-
-        return crashReportData;
-    }
-
-    /**
-     * Generates the string which is posted in the single custom data field in
-     * the GoogleDocs Form.
-     *
-     * @return A string with a 'key = value' pair on each line.
-     */
-    @NonNull
-    private String createCustomInfoString(@Nullable Map<String, String> reportCustomData) {
-        Map<String, String> params = customParameters;
-
-        if (reportCustomData != null) {
-            params = new HashMap<String, String>(params);
-            params.putAll(reportCustomData);
-        }
-
-        final StringBuilder customInfo = new StringBuilder();
-        for (final Map.Entry<String, String> currentEntry : params.entrySet()) {
-            customInfo.append(currentEntry.getKey());
-            customInfo.append(" = ");
-
-            // We need to escape new lines in values or they are transformed into new
-            // custom fields. => let's replace all '\n' with "\\n"
-            final String currentVal = currentEntry.getValue();
-            if (currentVal != null) {
-                customInfo.append(currentVal.replaceAll("\n", "\\\\n"));
-            } else {
-                customInfo.append("null");
-            }
-            customInfo.append('\n');
-        }
-        return customInfo.toString();
-    }
-
-    @NonNull
-    private String getStackTrace(@Nullable String msg, @Nullable Throwable th) {
-        final Writer result = new StringWriter();
-        final PrintWriter printWriter = new PrintWriter(result);
-
-        if (msg != null && !TextUtils.isEmpty(msg)) {
-            printWriter.println(msg);
-        }
-
-        // If the exception was thrown in a background thread inside
-        // AsyncTask, then the actual exception can be found with getCause
-        Throwable cause = th;
-        while (cause != null) {
-            cause.printStackTrace(printWriter);
-            cause = cause.getCause();
-        }
-        final String stacktraceAsString = result.toString();
-        printWriter.close();
-
-        return stacktraceAsString;
-    }
-
-    @NonNull
-    private String getStackTraceHash(@Nullable Throwable th) {
-        final StringBuilder res = new StringBuilder();
-        Throwable cause = th;
-        while (cause != null) {
-            final StackTraceElement[] stackTraceElements = cause.getStackTrace();
-            for (final StackTraceElement e : stackTraceElements) {
-                res.append(e.getClassName());
-                res.append(e.getMethodName());
-            }
-            cause = cause.getCause();
-        }
-
-        return Integer.toHexString(res.toString().hashCode());
-    }
-
-    @NonNull
-    private Class<?> getBuildConfigClass() throws ClassNotFoundException {
-        final Class configuredBuildConfig = config.buildConfigClass();
-        if (!configuredBuildConfig.equals(Object.class)) {
-            // If set via annotations or programmatically then it will have a real value,
-            // otherwise it will be Object.class (annotation default) or null (explicit programmatic).
-            return configuredBuildConfig;
-        }
-
-        final String className = context.getPackageName() + ".BuildConfig";
-        try {
-            return Class.forName(className);
-        } catch (ClassNotFoundException e) {
-            ACRA.log.e(LOG_TAG, "Not adding buildConfig to log. Class Not found : " + className + ". Please configure 'buildConfigClass' in your ACRA config");
-            throw e;
-        }
-    }
-}
\ No newline at end of file
diff --git a/src/main/java/org/acra/collector/DisplayManagerCollector.java b/src/main/java/org/acra/collector/DisplayManagerCollector.java
deleted file mode 100644
index 9184147f..00000000
--- a/src/main/java/org/acra/collector/DisplayManagerCollector.java
+++ /dev/null
@@ -1,225 +0,0 @@
-package org.acra.collector;
-
-import android.content.Context;
-import android.graphics.Point;
-import android.graphics.Rect;
-import android.hardware.display.DisplayManager;
-import android.os.Build;
-import android.support.annotation.NonNull;
-import android.util.DisplayMetrics;
-import android.util.SparseArray;
-import android.view.Display;
-import android.view.Surface;
-import android.view.WindowManager;
-
-import java.lang.reflect.Field;
-
-final class DisplayManagerCollector {
-    private DisplayManagerCollector(){}
-
-    private static final SparseArray<String> mFlagsNames = new SparseArray<String>();
-
-    @NonNull
-    public static String collectDisplays(@NonNull Context ctx) {
-        final Display[] displays;
-        final StringBuilder result = new StringBuilder();
-
-        if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN_MR1) {
-            // Before Android 4.2, there was a single display available from the
-            // window manager
-            final WindowManager windowManager = (WindowManager) ctx.getSystemService(Context.WINDOW_SERVICE);
-            displays = new Display[1];
-            displays[0] = windowManager.getDefaultDisplay();
-        } else {
-            // Since Android 4.2, we can fetch multiple displays with the
-            // DisplayManager.
-            final DisplayManager displayManager = (DisplayManager) ctx.getSystemService(Context.DISPLAY_SERVICE);
-            displays = displayManager.getDisplays();
-        }
-
-        for (Display display : displays) {
-            result.append(collectDisplayData(display));
-        }
-
-        return result.toString();
-    }
-
-    @NonNull
-    private static Object collectDisplayData(@NonNull Display display) {
-        final DisplayMetrics metrics = new DisplayMetrics();
-        display.getMetrics(metrics);
-
-        //noinspection deprecation
-        return collectCurrentSizeRange(display) +
-                collectFlags(display) +
-                display.getDisplayId() + ".height=" + display.getHeight() + '\n' +
-                collectMetrics(display) +
-                collectName(display) +
-                display.getDisplayId() + ".orientation=" + display.getRotation() + '\n' +
-                display.getDisplayId() + ".pixelFormat=" + display.getPixelFormat() + '\n' +
-                collectRealMetrics(display) +
-                collectRealSize(display) +
-                collectRectSize(display) +
-                display.getDisplayId() + ".refreshRate=" + display.getRefreshRate() + '\n' +
-                collectRotation(display) +
-                collectSize(display) +
-                display.getDisplayId() + ".width=" + display.getWidth() + '\n' +
-                collectIsValid(display);
-    }
-
-    @NonNull
-    private static String collectIsValid(@NonNull Display display) {
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
-            return display.getDisplayId() + ".isValid=" + display.isValid() + '\n';
-        }
-        return "";
-    }
-
-    @NonNull
-    private static String collectRotation(@NonNull Display display) {
-        return display.getDisplayId() + ".rotation=" + rotationToString(display.getRotation()) + '\n';
-    }
-
-    @NonNull
-    private static String rotationToString(int rotation) {
-        switch (rotation) {
-            case Surface.ROTATION_0:
-                return "ROTATION_0";
-            case Surface.ROTATION_90:
-                return "ROTATION_90";
-            case Surface.ROTATION_180:
-                return "ROTATION_180";
-            case Surface.ROTATION_270:
-                return "ROTATION_270";
-            default:
-                return String.valueOf(rotation);
-        }
-    }
-
-    @NonNull
-    private static String collectRectSize(@NonNull Display display) {
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR2) {
-            final Rect size = new Rect();
-            display.getRectSize(size);
-            return display.getDisplayId() + ".rectSize=[" + size.top + ',' + size.left +
-                    ',' + size.width() + ',' + size.height() + ']' + '\n';
-        }
-        return "";
-    }
-
-    @NonNull
-    private static String collectSize(@NonNull Display display) {
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.HONEYCOMB_MR2) {
-            final Point size = new Point();
-            display.getSize(size);
-            return display.getDisplayId() + ".size=[" + size.x
-                    + ',' + size.y + ']' + '\n';
-        }
-        return "";
-    }
-
-    private static String collectRealSize(@NonNull Display display) {
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
-            final Point size = new Point();
-            display.getRealSize(size);
-            return display.getDisplayId() + ".realSize=[" + size.x
-                    + ',' + size.y + ']' + '\n';
-        }
-        return "";
-    }
-
-    @NonNull
-    private static String collectCurrentSizeRange(@NonNull Display display) {
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN) {
-            final Point smallest = new Point();
-            final Point largest = new Point();
-            display.getCurrentSizeRange(smallest, largest);
-            return display.getDisplayId() + ".currentSizeRange.smallest=[" + smallest.x + ',' + smallest.y + "]\n"
-                    + display.getDisplayId() + ".currentSizeRange.largest=[" + largest.x + ',' + largest.y + "]\n";
-        }
-        return "";
-    }
-
-    @NonNull
-    private static String collectFlags(@NonNull Display display) {
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
-            final int flags = display.getFlags();
-            for (Field field : display.getClass().getFields()) {
-                if (field.getName().startsWith("FLAG_")) {
-                    try {
-                        mFlagsNames.put(field.getInt(null), field.getName());
-                    } catch (IllegalAccessException ignored) {
-                    }
-                }
-            }
-            return display.getDisplayId() + ".flags=" + activeFlags(mFlagsNames, flags) + '\n';
-        }
-        return "";
-    }
-
-    @NonNull
-    private static String collectName(@NonNull Display display) {
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
-            return display.getDisplayId() + ".name=" + display.getName() + '\n';
-        }
-        return "";
-    }
-
-    @NonNull
-    private static String collectMetrics(@NonNull Display display) {
-        final DisplayMetrics metrics = new DisplayMetrics();
-        display.getMetrics(metrics);
-        return collectMetrics(display.getDisplayId() + ".metrics", metrics);
-    }
-
-    @NonNull
-    private static String collectRealMetrics(@NonNull Display display) {
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1) {
-            final DisplayMetrics metrics = new DisplayMetrics();
-            display.getRealMetrics(metrics);
-            return collectMetrics(display.getDisplayId() + ".realMetrics", metrics);
-        }
-        return "";
-    }
-
-    @NonNull
-    private static String collectMetrics(@NonNull String prefix, @NonNull DisplayMetrics metrics) {
-        return prefix + ".density=" + metrics.density + '\n'
-                + prefix + ".densityDpi=" + metrics.densityDpi + '\n'
-                + prefix + ".scaledDensity=x" + metrics.scaledDensity + '\n'
-                + prefix + ".widthPixels=" + metrics.widthPixels + '\n'
-                + prefix + ".heightPixels=" + metrics.heightPixels + '\n'
-                + prefix + ".xdpi=" + metrics.xdpi + '\n'
-                + prefix + ".ydpi=" + metrics.ydpi + '\n';
-    }
-
-    /**
-     * Some fields contain multiple value types which can be isolated by
-     * applying a bitmask. That method returns the concatenation of active
-     * values.
-     *
-     * @param valueNames The array containing the different values and names for this
-     *                   field. Must contain mask values too.
-     * @param bitfield   The bitfield to inspect.
-     * @return The names of the different values contained in the bitfield,
-     * separated by '+'.
-     */
-    @NonNull
-    private static String activeFlags(@NonNull SparseArray<String> valueNames, int bitfield) {
-        final StringBuilder result = new StringBuilder();
-
-        // Look for masks, apply it an retrieve the masked value
-        for (int i = 0; i < valueNames.size(); i++) {
-            final int maskValue = valueNames.keyAt(i);
-            final int value = bitfield & maskValue;
-            if (value > 0) {
-                if (result.length() > 0) {
-                    result.append('+');
-                }
-                result.append(valueNames.get(value));
-            }
-        }
-        return result.toString();
-    }
-
-}
diff --git a/src/main/java/org/acra/collector/DumpSysCollector.java b/src/main/java/org/acra/collector/DumpSysCollector.java
deleted file mode 100644
index d792ebca..00000000
--- a/src/main/java/org/acra/collector/DumpSysCollector.java
+++ /dev/null
@@ -1,63 +0,0 @@
-/*
- *  Copyright 2010 Kevin Gaudin
- *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-package org.acra.collector;
-
-import android.support.annotation.NonNull;
-
-import org.acra.ACRA;
-import org.acra.util.IOUtils;
-
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.List;
-
-import static org.acra.ACRA.LOG_TAG;
-
-/**
- * Collects results of the <code>dumpsys</code> command.
- * 
- * @author Kevin Gaudin
- * 
- */
-final class DumpSysCollector {
-    private DumpSysCollector(){}
-
-    /**
-     * Collect results of the <code>dumpsys meminfo</code> command restricted to
-     * this application process.
-     * 
-     * @return The execution result.
-     */
-    @NonNull
-    public static String collectMemInfo() {
-
-        final StringBuilder meminfo = new StringBuilder();
-        try {
-            final List<String> commandLine = new ArrayList<String>();
-            commandLine.add("dumpsys");
-            commandLine.add("meminfo");
-            commandLine.add(Integer.toString(android.os.Process.myPid()));
-
-            final Process process = Runtime.getRuntime().exec(commandLine.toArray(new String[commandLine.size()]));
-            meminfo.append(IOUtils.streamToString(process.getInputStream()));
-
-        } catch (IOException e) {
-            ACRA.log.e(LOG_TAG, "DumpSysCollector.meminfo could not retrieve data", e);
-		}
-
-        return meminfo.toString();
-    }
-}
\ No newline at end of file
diff --git a/src/main/java/org/acra/collector/LogCatCollector.java b/src/main/java/org/acra/collector/LogCatCollector.java
deleted file mode 100644
index 646a9fcd..00000000
--- a/src/main/java/org/acra/collector/LogCatCollector.java
+++ /dev/null
@@ -1,129 +0,0 @@
-/*
- *  Copyright 2010 Kevin Gaudin
- *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-package org.acra.collector;
-
-import android.os.Build;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-
-import com.android.internal.util.Predicate;
-
-import org.acra.ACRA;
-import org.acra.annotation.ReportsCrashes;
-import org.acra.config.ACRAConfiguration;
-import org.acra.collections.BoundedLinkedList;
-import org.acra.util.IOUtils;
-
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.LinkedList;
-import java.util.List;
-
-import static org.acra.ACRA.LOG_TAG;
-
-
-/**
- * Executes logcat commands and collects it's output.
- * 
- * @author Kevin Gaudin
- * 
- */
-class LogCatCollector {
-
-    /**
-     * Default number of latest lines kept from the logcat output.
-     */
-    private static final int DEFAULT_TAIL_COUNT = 100;
-
-    /**
-     * Executes the logcat command with arguments taken from
-     * {@link ReportsCrashes#logcatArguments()}
-     *
-     * @param config        AcraConfig to use when collecting logcat.
-     * @param bufferName    The name of the buffer to be read: "main" (default), "radio" or "events".
-     * @return A {@link String} containing the latest lines of the output.
-     *         Default is 100 lines, use "-t", "300" in
-     *         {@link ReportsCrashes#logcatArguments()} if you want 300 lines.
-     *         You should be aware that increasing this value causes a longer
-     *         report generation time and a bigger footprint on the device data
-     *         plan consumption.
-     */
-    public String collectLogCat(@NonNull ACRAConfiguration config, @Nullable String bufferName) {
-        final int myPid = android.os.Process.myPid();
-        String myPidStr = null;
-        if (config.logcatFilterByPid() && myPid > 0) {
-            myPidStr = Integer.toString(myPid) +"):";
-        }
-
-        final List<String> commandLine = new ArrayList<String>();
-        commandLine.add("logcat");
-        if (bufferName != null) {
-            commandLine.add("-b");
-            commandLine.add(bufferName);
-        }
-
-        // "-t n" argument has been introduced in FroYo (API level 8). For
-        // devices with lower API level, we will have to emulate its job.
-        final int tailCount;
-        final List<String> logcatArgumentsList = config.logcatArguments();
-
-        final int tailIndex = logcatArgumentsList.indexOf("-t");
-        if (tailIndex > -1 && tailIndex < logcatArgumentsList.size()) {
-            tailCount = Integer.parseInt(logcatArgumentsList.get(tailIndex + 1));
-            if (Build.VERSION.SDK_INT < Build.VERSION_CODES.FROYO) {
-                logcatArgumentsList.remove(tailIndex + 1);
-                logcatArgumentsList.remove(tailIndex);
-                logcatArgumentsList.add("-d");
-            }
-        } else {
-            tailCount = -1;
-        }
-
-        final LinkedList<String> logcatBuf = new BoundedLinkedList<String>(tailCount > 0 ? tailCount
-                : DEFAULT_TAIL_COUNT);
-        commandLine.addAll(logcatArgumentsList);
-
-        try {
-            final Process process = Runtime.getRuntime().exec(commandLine.toArray(new String[commandLine.size()]));
-
-            if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Retrieving logcat output...");
-
-            // Dump stderr to null
-            new Thread(new Runnable() {
-                @Override
-                public void run() {
-                    try {
-                        IOUtils.streamToString(process.getErrorStream());
-                    } catch (IOException ignored) {
-                    }
-                }
-            }).start();
-
-            final String finalMyPidStr = myPidStr;
-            logcatBuf.add(IOUtils.streamToString(process.getInputStream(), new Predicate<String>() {
-                @Override
-                public boolean apply(String s) {
-                    return finalMyPidStr == null || s.contains(finalMyPidStr);
-                }
-            }));
-
-        } catch (IOException e) {
-            ACRA.log.e(LOG_TAG, "LogCatCollector.collectLogCat could not retrieve data.", e);
-        }
-
-        return logcatBuf.toString();
-    }
-}
diff --git a/src/main/java/org/acra/collector/LogFileCollector.java b/src/main/java/org/acra/collector/LogFileCollector.java
deleted file mode 100644
index 696024fb..00000000
--- a/src/main/java/org/acra/collector/LogFileCollector.java
+++ /dev/null
@@ -1,76 +0,0 @@
-/*
- *  Copyright 2012 Kevin Gaudin
- *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-
-package org.acra.collector;
-
-import android.app.Application;
-import android.content.Context;
-import android.support.annotation.NonNull;
-
-import org.acra.ACRA;
-import org.acra.util.IOUtils;
-
-import java.io.*;
-
-import static org.acra.ACRA.LOG_TAG;
-
-/**
- * Collects the N last lines of a text stream. Use this collector if your
- * application handles its own logging system.
- * 
- * @author Kevin Gaudin
- * 
- */
-class LogFileCollector {
-
-    /**
-     * Reads the last lines of a custom log file. The file name is assumed as
-     * located in the {@link Application#getFilesDir()} directory if it does not
-     * contain any path separator.
-     * 
-     * @param context       Application context.
-     * @param fileName      Log file to read. It can be an absolute path, or a relative path from the application
-     *                      files folder, or a file within the application files folder.
-     * @param numberOfLines Number of lines to retrieve.
-     * @return A single String containing all of the requested lines.
-     * @throws IOException
-     */
-    @NonNull
-    public String collectLogFile(@NonNull Context context, @NonNull String fileName, int numberOfLines) throws IOException {
-        return IOUtils.streamToString(getStream(context, fileName), numberOfLines);
-    }
-
-    @NonNull
-    private static InputStream getStream(@NonNull Context context, @NonNull String fileName) {
-        try {
-            final FileInputStream inputStream;
-            if (fileName.startsWith("/")) {
-                // Absolute path
-                inputStream = new FileInputStream(fileName);
-            } else if (fileName.contains("/")) {
-                // Relative path from the application files folder (ie a sub folder)
-                inputStream = new FileInputStream(new File(context.getFilesDir(), fileName));
-            } else {
-                // A file directly contained within the application files folder.
-                inputStream = context.openFileInput(fileName);
-            }
-            return inputStream;
-        } catch (FileNotFoundException e) {
-            ACRA.log.e(LOG_TAG, "Cannot find application log file : '" + fileName + '\'');
-            return new ByteArrayInputStream(new byte[0]);
-        }
-    }
-}
diff --git a/src/main/java/org/acra/collector/ReflectionCollector.java b/src/main/java/org/acra/collector/ReflectionCollector.java
deleted file mode 100644
index 27dad8be..00000000
--- a/src/main/java/org/acra/collector/ReflectionCollector.java
+++ /dev/null
@@ -1,113 +0,0 @@
-/*
- *  Copyright 2010 Kevin Gaudin
- *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-
-package org.acra.collector;
-
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-
-import java.lang.reflect.Field;
-import java.lang.reflect.InvocationTargetException;
-import java.lang.reflect.Method;
-import java.util.Arrays;
-
-/**
- * Tools to retrieve key/value pairs from static fields and getters of any
- * class. Reflection API usage allows to retrieve data without having to
- * implement a class for each android version of each interesting class.
- * It can also help find hidden properties.
- * 
- * @author Kevin Gaudin
- * 
- */
-final class ReflectionCollector {
-    private ReflectionCollector(){}
-
-    /**
-     * Retrieves key/value pairs from static fields of a class.
-     *
-     * @param someClass the class to be inspected.
-     * 
-     * @return A human readable string with a key=value pair on each line.
-     */
-    @NonNull
-    public static String collectConstants(@NonNull Class<?> someClass, @Nullable String prefix) {
-
-        final StringBuilder result = new StringBuilder();
-
-        final Field[] fields = someClass.getFields();
-        for (final Field field : fields) {
-            if (prefix != null && !prefix.isEmpty()) {
-                result.append(prefix).append('.');
-            }
-            result.append(field.getName()).append('=');
-            try {
-                final Object value = field.get(null);
-                if (value != null) {
-                    if (field.getType().isArray()) {
-                        result.append(Arrays.toString((Object[]) value));
-                    } else {
-                        result.append(value.toString());
-                    }
-                }
-            } catch (@NonNull IllegalArgumentException e) {
-                result.append("N/A");
-            } catch (@NonNull IllegalAccessException e) {
-                result.append("N/A");
-            }
-            result.append('\n');
-        }
-
-        return result.toString();
-    }
-
-    /**
-     * Retrieves key/value pairs from static getters of a class (get*() or is*()).
-     *
-     * @param someClass the class to be inspected.
-     * @return A human readable string with a key=value pair on each line.
-     */
-    @NonNull
-    public static String collectStaticGettersResults(@NonNull Class<?> someClass) {
-        final StringBuilder result = new StringBuilder();
-        final Method[] methods = someClass.getMethods();
-        for (final Method method : methods) {
-            if (method.getParameterTypes().length == 0
-                    && (method.getName().startsWith("get") || method.getName().startsWith("is"))
-                    && !"getClass".equals(method.getName())) {
-                try {
-                    result.append(method.getName());
-                    result.append('=');
-                    result.append(method.invoke(null, (Object[]) null));
-                    result.append('\n');
-                } catch (@NonNull IllegalArgumentException ignored) {
-                    // NOOP
-                } catch (@NonNull InvocationTargetException ignored) {
-                    // NOOP
-                } catch (@NonNull IllegalAccessException ignored) {
-                    // NOOP
-                }
-            }
-        }
-
-        return result.toString();
-    }
-
-    @NonNull
-    public static String collectConstants(@NonNull Class<?> someClass) {
-        return collectConstants(someClass, "");
-    }
-}
diff --git a/src/main/java/org/acra/collector/ThreadCollector.java b/src/main/java/org/acra/collector/ThreadCollector.java
deleted file mode 100644
index 76d45d69..00000000
--- a/src/main/java/org/acra/collector/ThreadCollector.java
+++ /dev/null
@@ -1,53 +0,0 @@
-/*
- *  Copyright 2010 Kevin Gaudin
- *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-
-package org.acra.collector;
-
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-
-/**
- * Collects some data identifying a Thread, usually the Thread which crashed.
- * 
- * @author Kevin Gaudin
- * 
- */
-final class ThreadCollector {
-    private ThreadCollector(){}
-
-    /**
-     * Convenience method that collects some data identifying a Thread, usually the Thread which
-     * crashed and returns a string containing the thread's id, name, priority and group name.
-     * 
-     * @param t the thread
-     * @return a string representation of the string including the id, name and priority of the thread.
-     */
-    @NonNull
-    public static String collect(@Nullable Thread t) {
-        final StringBuilder result = new StringBuilder();
-        if (t != null) {
-            result.append("id=").append(t.getId()).append('\n');
-            result.append("name=").append(t.getName()).append('\n');
-            result.append("priority=").append(t.getPriority()).append('\n');
-            if (t.getThreadGroup() != null) {
-                result.append("groupName=").append(t.getThreadGroup().getName()).append('\n');
-            }
-        } else {
-            result.append("No broken thread, this might be a silent exception.");
-        }
-        return result.toString();
-    }
-}
diff --git a/src/main/java/org/acra/config/ACRAConfiguration.java b/src/main/java/org/acra/config/ACRAConfiguration.java
deleted file mode 100644
index 80c2e983..00000000
--- a/src/main/java/org/acra/config/ACRAConfiguration.java
+++ /dev/null
@@ -1,426 +0,0 @@
-/*
- *  Copyright 2011 Kevin Gaudin
- *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-package org.acra.config;
-
-import android.support.annotation.DrawableRes;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.support.annotation.RawRes;
-import android.support.annotation.StringRes;
-import android.support.annotation.StyleRes;
-
-import org.acra.ReportField;
-import org.acra.ReportingInteractionMode;
-import org.acra.builder.ReportPrimer;
-import org.acra.collections.ImmutableList;
-import org.acra.dialog.BaseCrashReportDialog;
-import org.acra.security.KeyStoreFactory;
-import org.acra.sender.HttpSender.Method;
-import org.acra.sender.HttpSender.Type;
-import org.acra.sender.ReportSenderFactory;
-import org.acra.collections.ImmutableMap;
-import org.acra.collections.ImmutableSet;
-
-import java.io.Serializable;
-
-/**
- * Represents the configuration that ACRA will use when handling crash reports.
- *
- * Use {@link ConfigurationBuilder} to programmatically construct an ACRAConfiguration.
- */
-public final class ACRAConfiguration implements Serializable {
-
-    private final ImmutableSet<String> additionalDropBoxTags;
-    private final ImmutableSet<String> additionalSharedPreferences;
-    private final int connectionTimeout;
-    private final ImmutableSet<ReportField> reportContent;
-    private final boolean deleteUnapprovedReportsOnApplicationStart;
-    private final boolean deleteOldUnsentReportsOnApplicationStart;
-    private final int dropboxCollectionMinutes;
-    private final boolean alsoReportToAndroidFramework;
-    private final String formUri;
-    private final String formUriBasicAuthLogin;
-    private final String formUriBasicAuthPassword;
-    private final boolean includeDropBoxSystemTags;
-
-    private final ImmutableList<String> logcatArguments;
-    private final String mailTo;
-    private final ReportingInteractionMode reportingInteractionMode;
-    private final Class<? extends BaseCrashReportDialog> reportDialogClass;
-    private final Class<? extends ReportPrimer> reportPrimerClass;
-
-    @StringRes
-    private final int resDialogPositiveButtonText;
-    @StringRes
-    private final int resDialogNegativeButtonText;
-    @StringRes
-    private final int resDialogCommentPrompt;
-    @StringRes
-    private final int resDialogEmailPrompt;
-    @DrawableRes
-    private final int resDialogIcon;
-    @StringRes
-    private final int resDialogOkToast;
-    @StringRes
-    private final int resDialogText;
-    @StringRes
-    private final int resDialogTitle;
-    @StyleRes
-    private final int resDialogTheme;
-    @DrawableRes
-    private final int resNotifIcon;
-    @StringRes
-    private final int resNotifText;
-    @StringRes
-    private final int resNotifTickerText;
-    @StringRes
-    private final int resNotifTitle;
-    @StringRes
-    private final int resToastText;
-    private final int sharedPreferencesMode;
-    private final String sharedPreferencesName;
-    private final int socketTimeout;
-    private final boolean logcatFilterByPid;
-    private final boolean sendReportsInDevMode;
-
-    private final ImmutableSet<String> excludeMatchingSharedPreferencesKeys;
-    private final ImmutableSet<String> excludeMatchingSettingsKeys;
-    private final Class buildConfigClass;
-    private final String applicationLogFile;
-    private final int applicationLogFileLines;
-
-    private final Method httpMethod;
-    private final Type reportType;
-    private final ImmutableMap<String, String> httpHeaders;
-    private final Class<? extends KeyStoreFactory> keyStoreFactoryClass;
-    private final ImmutableSet<Class<? extends ReportSenderFactory>> reportSenderFactoryClasses;
-    @RawRes
-    private final int resCertificate;
-    private final String certificatePath;
-    private final String certificateType;
-    private final Class<? extends RetryPolicy> retryPolicyClass;
-
-    /**
-     * @param builder ConfigurationBuilder with which to initialise this {@link ACRAConfiguration}.
-     */
-    ACRAConfiguration(@NonNull ConfigurationBuilder builder) {
-        additionalDropBoxTags = new ImmutableSet<String>(builder.additionalDropBoxTags());
-        additionalSharedPreferences = new ImmutableSet<String>(builder.additionalSharedPreferences());
-        connectionTimeout = builder.connectionTimeout();
-        reportContent = new ImmutableSet<ReportField>(builder.reportContent());
-        deleteUnapprovedReportsOnApplicationStart = builder.deleteUnapprovedReportsOnApplicationStart();
-        deleteOldUnsentReportsOnApplicationStart = builder.deleteOldUnsentReportsOnApplicationStart();
-        dropboxCollectionMinutes = builder.dropboxCollectionMinutes();
-        alsoReportToAndroidFramework = builder.alsoReportToAndroidFramework();
-        formUri = builder.formUri();
-        formUriBasicAuthLogin = builder.formUriBasicAuthLogin();
-        formUriBasicAuthPassword = builder.formUriBasicAuthPassword();
-        includeDropBoxSystemTags = builder.includeDropBoxSystemTags();
-        logcatArguments = new ImmutableList<String>(builder.logcatArguments());
-        mailTo = builder.mailTo();
-        reportingInteractionMode = builder.reportingInteractionMode();
-        resDialogIcon = builder.resDialogIcon();
-        resDialogPositiveButtonText = builder.resDialogPositiveButtonText();
-        resDialogNegativeButtonText = builder.resDialogNegativeButtonText();
-        resDialogCommentPrompt = builder.resDialogCommentPrompt();
-        resDialogEmailPrompt = builder.resDialogEmailPrompt();
-        resDialogOkToast = builder.resDialogOkToast();
-        resDialogText = builder.resDialogText();
-        resDialogTitle = builder.resDialogTitle();
-        resDialogTheme = builder.resDialogTheme();
-        resNotifIcon = builder.resNotifIcon();
-        resNotifText = builder.resNotifText();
-        resNotifTickerText = builder.resNotifTickerText();
-        resNotifTitle = builder.resNotifTitle();
-        resToastText = builder.resToastText();
-        sharedPreferencesMode = builder.sharedPreferencesMode();
-        sharedPreferencesName = builder.sharedPreferencesName();
-        socketTimeout = builder.socketTimeout();
-        logcatFilterByPid = builder.logcatFilterByPid();
-        sendReportsInDevMode = builder.sendReportsInDevMode();
-        excludeMatchingSharedPreferencesKeys = new ImmutableSet<String>(builder.excludeMatchingSharedPreferencesKeys());
-        excludeMatchingSettingsKeys = new ImmutableSet<String>(builder.excludeMatchingSettingsKeys());
-        buildConfigClass = builder.buildConfigClass();
-        applicationLogFile = builder.applicationLogFile();
-        applicationLogFileLines = builder.applicationLogFileLines();
-        reportDialogClass = builder.reportDialogClass();
-        reportPrimerClass = builder.reportPrimerClass();
-        httpMethod = builder.httpMethod();
-        httpHeaders = new ImmutableMap<String, String>(builder.httpHeaders());
-        reportType = builder.reportType();
-        reportSenderFactoryClasses = new ImmutableSet<Class<? extends ReportSenderFactory>>(builder.reportSenderFactoryClasses());
-        keyStoreFactoryClass = builder.keyStoreFactoryClass();
-        resCertificate = builder.resCertificate();
-        certificatePath = builder.certificatePath();
-        certificateType = builder.certificateType();
-        retryPolicyClass = builder.retryPolicyClass();
-    }
-
-    /**
-     * Retrieve HTTP headers defined by the application developer. These should
-     * be added to requests sent by any third-party sender (over HTTP of
-     * course).
-     *
-     * @return A map associating http header names to their values.
-     */
-    @NonNull
-    public ImmutableMap<String, String> getHttpHeaders() {
-        return httpHeaders;
-    }
-
-    /**
-     * @return List of ReportField that ACRA will provide to the server.
-     */
-    @NonNull
-    public ImmutableSet<ReportField> getReportFields() {
-        return reportContent;
-    }
-
-    @NonNull
-    public ImmutableSet<String> additionalDropBoxTags() {
-        return additionalDropBoxTags;
-    }
-
-    @NonNull
-    public ImmutableSet<String> additionalSharedPreferences() {
-        return additionalSharedPreferences;
-    }
-
-    public int connectionTimeout() {
-        return connectionTimeout;
-    }
-
-    public boolean deleteUnapprovedReportsOnApplicationStart() {
-        return deleteUnapprovedReportsOnApplicationStart;
-    }
-
-    public boolean deleteOldUnsentReportsOnApplicationStart() {
-        return deleteOldUnsentReportsOnApplicationStart;
-    }
-
-    public int dropboxCollectionMinutes() {
-        return dropboxCollectionMinutes;
-    }
-
-    public boolean alsoReportToAndroidFramework() {
-        return alsoReportToAndroidFramework;
-    }
-
-    @Nullable
-    public String formUri() {
-        return formUri;
-    }
-
-    @Nullable
-    public String formUriBasicAuthLogin() {
-        return formUriBasicAuthLogin;
-    }
-
-    @Nullable
-    public String formUriBasicAuthPassword() {
-        return formUriBasicAuthPassword;
-    }
-
-    public boolean includeDropBoxSystemTags() {
-        return includeDropBoxSystemTags;
-    }
-
-    @NonNull
-    public ImmutableList<String> logcatArguments() {
-        return logcatArguments;
-    }
-
-    @Nullable
-    public String mailTo() {
-        return mailTo;
-    }
-
-    @NonNull
-    public ReportingInteractionMode mode() {
-        return reportingInteractionMode;
-    }
-
-    @StringRes
-    public int resDialogPositiveButtonText() {
-        return resDialogPositiveButtonText;
-    }
-
-    @StringRes
-    public int resDialogNegativeButtonText() {
-        return resDialogNegativeButtonText;
-    }
-
-    @StringRes
-    public int resDialogCommentPrompt() {
-        return resDialogCommentPrompt;
-    }
-
-    @StringRes
-    public int resDialogEmailPrompt() {
-        return resDialogEmailPrompt;
-    }
-
-    @DrawableRes
-    public int resDialogIcon() {
-        return resDialogIcon;
-    }
-
-    @StringRes
-    public int resDialogOkToast() {
-        return resDialogOkToast;
-    }
-
-    @StringRes
-    public int resDialogText() {
-        return resDialogText;
-    }
-
-    @StringRes
-    public int resDialogTitle() {
-        return resDialogTitle;
-    }
-
-    @StyleRes
-    public int resDialogTheme() {
-        return resDialogTheme;
-    }
-
-    @DrawableRes
-    public int resNotifIcon() {
-        return resNotifIcon;
-    }
-
-    @StringRes
-    public int resNotifText() {
-        return resNotifText;
-    }
-
-    @StringRes
-    public int resNotifTickerText() {
-        return resNotifTickerText;
-    }
-
-    @StringRes
-    public int resNotifTitle() {
-        return resNotifTitle;
-    }
-
-    @StringRes
-    public int resToastText() {
-        return resToastText;
-    }
-
-    public int sharedPreferencesMode() {
-        return sharedPreferencesMode;
-    }
-
-    @NonNull
-    public String sharedPreferencesName() {
-        return sharedPreferencesName;
-    }
-
-    public int socketTimeout() {
-        return socketTimeout;
-    }
-
-    public boolean logcatFilterByPid() {
-        return logcatFilterByPid;
-    }
-
-    public boolean sendReportsInDevMode() {
-        return sendReportsInDevMode;
-    }
-
-    @NonNull
-    public ImmutableSet<String> excludeMatchingSharedPreferencesKeys() {
-        return excludeMatchingSharedPreferencesKeys;
-    }
-
-    @NonNull
-    public ImmutableSet<String> excludeMatchingSettingsKeys() {
-        return excludeMatchingSettingsKeys;
-    }
-
-    /**
-     * Will return null if no value has been configured.
-     * It is up to clients to construct the recommended default value of context.getClass().getPackage().getName() + BuildConfig.class
-     *
-     * @return Class generated at compile time containing the build config for this application.
-     */
-    @NonNull
-    public Class buildConfigClass() {
-        return buildConfigClass;
-    }
-
-    @NonNull
-    public String applicationLogFile() {
-        return applicationLogFile;
-    }
-
-    public int applicationLogFileLines() {
-        return applicationLogFileLines;
-    }
-
-    @NonNull
-    public Class<? extends BaseCrashReportDialog> reportDialogClass() {
-        return reportDialogClass;
-    }
-
-    @NonNull
-    public Class<? extends ReportPrimer> reportPrimerClass() {
-        return reportPrimerClass;
-    }
-
-    @NonNull
-    public Method httpMethod() {
-        return httpMethod;
-    }
-
-    @NonNull
-    public Type reportType() {
-        return reportType;
-    }
-
-    @NonNull
-    public ImmutableSet<Class<? extends ReportSenderFactory>> reportSenderFactoryClasses() {
-        return reportSenderFactoryClasses;
-    }
-
-    @NonNull
-    public Class<? extends KeyStoreFactory> keyStoreFactoryClass() {
-        return keyStoreFactoryClass;
-    }
-
-    @RawRes
-    public int resCertificate() {
-        return resCertificate;
-    }
-
-    @NonNull
-    public String certificatePath() {
-        return certificatePath;
-    }
-
-    @NonNull
-    public String certificateType() {
-        return certificateType;
-    }
-
-    @NonNull
-    public Class<? extends RetryPolicy> retryPolicyClass() {
-        return retryPolicyClass;
-    }
-}
diff --git a/src/main/java/org/acra/config/ConfigurationBuilder.java b/src/main/java/org/acra/config/ConfigurationBuilder.java
deleted file mode 100644
index bd0f1ba6..00000000
--- a/src/main/java/org/acra/config/ConfigurationBuilder.java
+++ /dev/null
@@ -1,1224 +0,0 @@
-/*
- *  Copyright 2011 Kevin Gaudin
- *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-package org.acra.config;
-
-import android.app.Application;
-import android.support.annotation.DrawableRes;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.support.annotation.RawRes;
-import android.support.annotation.StringRes;
-import android.support.annotation.StyleRes;
-
-import org.acra.ACRA;
-import org.acra.ReportField;
-import org.acra.ReportingInteractionMode;
-import org.acra.annotation.ReportsCrashes;
-import org.acra.builder.NoOpReportPrimer;
-import org.acra.builder.ReportPrimer;
-import org.acra.dialog.BaseCrashReportDialog;
-import org.acra.dialog.CrashReportDialog;
-import org.acra.security.KeyStoreFactory;
-import org.acra.security.NoKeyStoreFactory;
-import org.acra.sender.DefaultReportSenderFactory;
-import org.acra.sender.HttpSender;
-import org.acra.sender.HttpSender.Method;
-import org.acra.sender.HttpSender.Type;
-import org.acra.sender.ReportSenderFactory;
-
-import java.lang.annotation.Annotation;
-import java.util.Arrays;
-import java.util.EnumMap;
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.Map;
-import java.util.Set;
-
-import static org.acra.ACRA.LOG_TAG;
-import static org.acra.ACRAConstants.*;
-
-/**
- * Builder responsible for programmatic construction of an {@link ACRAConfiguration}.
- *
- * {@link ACRAConfiguration} should be considered immutable and in the future will be.
- *
- * @since 4.8.1
- */
-@SuppressWarnings("unused")
-public final class ConfigurationBuilder {
-
-    @Nullable
-    private final Class<? extends Annotation> annotationType;
-
-    private String[] additionalDropBoxTags;
-    private String[] additionalSharedPreferences;
-    private Integer connectionTimeout;
-    private ReportField[] customReportContent;
-    private final Map<ReportField, Boolean> reportContentChanges = new EnumMap<ReportField, Boolean>(ReportField.class);
-    private Boolean deleteUnapprovedReportsOnApplicationStart;
-    private Boolean deleteOldUnsentReportsOnApplicationStart;
-    private Integer dropboxCollectionMinutes;
-    private Boolean alsoReportToAndroidFramework;
-    private String formUri;
-    private String formUriBasicAuthLogin;
-    private String formUriBasicAuthPassword;
-    private Boolean includeDropBoxSystemTags;
-
-    private String[] logcatArguments;
-    private String mailTo;
-    private ReportingInteractionMode reportingInteractionMode;
-    private Class<? extends BaseCrashReportDialog> reportDialogClass;
-    private Class<? extends ReportPrimer> reportPrimerClass;
-
-    @StringRes private Integer resDialogPositiveButtonText;
-    @StringRes private Integer resDialogNegativeButtonText;
-    @StringRes private Integer resDialogCommentPrompt;
-    @StringRes  private Integer resDialogEmailPrompt;
-    @DrawableRes private Integer resDialogIcon;
-    @StringRes private Integer resDialogOkToast;
-    @StringRes private Integer resDialogText;
-    @StringRes private Integer resDialogTitle;
-    @StyleRes private Integer resDialogTheme;
-    @DrawableRes private Integer resNotifIcon;
-    @StringRes private Integer resNotifText;
-    @StringRes private Integer resNotifTickerText;
-    @StringRes private Integer resNotifTitle;
-    @StringRes private Integer resToastText;
-    private Integer sharedPreferencesMode;
-    private String sharedPreferencesName;
-    private Integer socketTimeout;
-    private Boolean logcatFilterByPid;
-    private Boolean sendReportsInDevMode;
-
-    private String[] excludeMatchingSharedPreferencesKeys;
-    private String[] excludeMatchingSettingsKeys;
-    private Class buildConfigClass;
-    private String applicationLogFile;
-    private Integer applicationLogFileLines;
-
-    private Method httpMethod;
-    private Type reportType;
-    private final Map<String, String> httpHeaders = new HashMap<String, String>();
-    private Class<? extends KeyStoreFactory> keyStoreFactoryClass;
-    private Class<? extends ReportSenderFactory>[] reportSenderFactoryClasses;
-    @RawRes private Integer resCertificate;
-    private String certificatePath;
-    private String certificateType;
-    private Class<? extends RetryPolicy> retryPolicyClass;
-
-
-    /**
-     * Constructs a ConfigurationBuilder that is prepopulated with any
-     * '@ReportCrashes' annotation declared on the Application class.
-     *
-     * @param app Current Application, from which any annotated config will be gleaned.
-     */
-    public ConfigurationBuilder(@NonNull Application app) {
-
-        // Populate with annotated config
-        final ReportsCrashes annotationConfig = app.getClass().getAnnotation(ReportsCrashes.class);
-
-        if (annotationConfig != null) {
-            annotationType = annotationConfig.annotationType();
-
-            additionalDropBoxTags = annotationConfig.additionalDropBoxTags();
-            additionalSharedPreferences = annotationConfig.additionalSharedPreferences();
-            connectionTimeout = annotationConfig.connectionTimeout();
-            customReportContent = annotationConfig.customReportContent();
-            deleteUnapprovedReportsOnApplicationStart = annotationConfig.deleteUnapprovedReportsOnApplicationStart();
-            deleteOldUnsentReportsOnApplicationStart = annotationConfig.deleteOldUnsentReportsOnApplicationStart();
-            dropboxCollectionMinutes = annotationConfig.dropboxCollectionMinutes();
-            alsoReportToAndroidFramework = annotationConfig.alsoReportToAndroidFramework();
-            formUri = annotationConfig.formUri();
-            formUriBasicAuthLogin = annotationConfig.formUriBasicAuthLogin();
-            formUriBasicAuthPassword = annotationConfig.formUriBasicAuthPassword();
-            includeDropBoxSystemTags = annotationConfig.includeDropBoxSystemTags();
-            logcatArguments = annotationConfig.logcatArguments();
-            mailTo = annotationConfig.mailTo();
-            reportingInteractionMode = annotationConfig.mode();
-            resDialogIcon = annotationConfig.resDialogIcon();
-            resDialogPositiveButtonText = annotationConfig.resDialogPositiveButtonText();
-            resDialogNegativeButtonText = annotationConfig.resDialogNegativeButtonText();
-            resDialogCommentPrompt = annotationConfig.resDialogCommentPrompt();
-            resDialogEmailPrompt = annotationConfig.resDialogEmailPrompt();
-            resDialogOkToast = annotationConfig.resDialogOkToast();
-            resDialogText = annotationConfig.resDialogText();
-            resDialogTitle = annotationConfig.resDialogTitle();
-            resDialogTheme = annotationConfig.resDialogTheme();
-            resNotifIcon = annotationConfig.resNotifIcon();
-            resNotifText = annotationConfig.resNotifText();
-            resNotifTickerText = annotationConfig.resNotifTickerText();
-            resNotifTitle = annotationConfig.resNotifTitle();
-            resToastText = annotationConfig.resToastText();
-            sharedPreferencesMode = annotationConfig.sharedPreferencesMode();
-            sharedPreferencesName = annotationConfig.sharedPreferencesName();
-            socketTimeout = annotationConfig.socketTimeout();
-            logcatFilterByPid = annotationConfig.logcatFilterByPid();
-            sendReportsInDevMode = annotationConfig.sendReportsInDevMode();
-            excludeMatchingSharedPreferencesKeys = annotationConfig.excludeMatchingSharedPreferencesKeys();
-            excludeMatchingSettingsKeys = annotationConfig.excludeMatchingSettingsKeys();
-            buildConfigClass = annotationConfig.buildConfigClass();
-            applicationLogFile = annotationConfig.applicationLogFile();
-            applicationLogFileLines = annotationConfig.applicationLogFileLines();
-            reportDialogClass = annotationConfig.reportDialogClass();
-            reportPrimerClass = annotationConfig.reportPrimerClass();
-            httpMethod = annotationConfig.httpMethod();
-            reportType = annotationConfig.reportType();
-            reportSenderFactoryClasses = annotationConfig.reportSenderFactoryClasses();
-            keyStoreFactoryClass = annotationConfig.keyStoreFactoryClass();
-            resCertificate = annotationConfig.resCertificate();
-            certificatePath = annotationConfig.certificatePath();
-            certificateType = annotationConfig.certificateType();
-            retryPolicyClass = annotationConfig.retryPolicyClass();
-        } else {
-            annotationType = null;
-        }
-    }
-
-    /**
-     * Builds the {@link ACRAConfiguration} which will be used to configure ACRA.
-     * <p>
-     * You can pass this {@link ConfigurationBuilder} to {@link ACRA#init(Application, ConfigurationBuilder)} and
-     * {@link ACRA#init(Application, ConfigurationBuilder)} will handle any Exception.
-     * </p>
-     * @return new ACRAConfiguration containing all the properties configured on this builder.
-     * @throws ACRAConfigurationException if the required values for the configured notification mode have not been provided.
-     */
-    @NonNull
-    public ACRAConfiguration build() throws ACRAConfigurationException {
-
-        switch (reportingInteractionMode()) {
-            case TOAST:
-                if (resToastText() == DEFAULT_RES_VALUE) {
-                    throw new ACRAConfigurationException("TOAST mode: you have to define the resToastText parameter in your application @ReportsCrashes() annotation.");
-                }
-                break;
-            case NOTIFICATION:
-                if (resNotifTickerText() == DEFAULT_RES_VALUE || resNotifTitle() == DEFAULT_RES_VALUE || resNotifText() == DEFAULT_RES_VALUE) {
-                    throw new ACRAConfigurationException("NOTIFICATION mode: you have to define at least the resNotifTickerText, resNotifTitle, resNotifText parameters in your application @ReportsCrashes() annotation.");
-                }
-                if (CrashReportDialog.class.equals(reportDialogClass()) && resDialogText() == DEFAULT_RES_VALUE) {
-                    throw new ACRAConfigurationException("NOTIFICATION mode: using the (default) CrashReportDialog requires you have to define the resDialogText parameter in your application @ReportsCrashes() annotation.");
-                }
-                break;
-            case DIALOG:
-                if (CrashReportDialog.class.equals(reportDialogClass()) && resDialogText() == DEFAULT_RES_VALUE) {
-                    throw new ACRAConfigurationException("DIALOG mode: using the (default) CrashReportDialog requires you to define the resDialogText parameter in your application @ReportsCrashes() annotation.");
-                }
-                break;
-            default:
-                break;
-        }
-
-        return new ACRAConfiguration(this);
-    }
-
-    /**
-     * Set custom HTTP headers to be sent by the provided {@link HttpSender}.
-     * This should be used also by third party senders.
-     *
-     * @param headers A map associating HTTP header names to their values.
-     * @return this instance
-     */
-    @NonNull
-    public ConfigurationBuilder setHttpHeaders(@NonNull Map<String, String> headers) {
-        this.httpHeaders.clear();
-        this.httpHeaders.putAll(headers);
-        return this;
-    }
-
-    /**
-     * @param additionalDropboxTags the additionalDropboxTags to set
-     * @return this instance
-     */
-    @NonNull
-    public ConfigurationBuilder setAdditionalDropboxTags(@NonNull String... additionalDropboxTags) {
-        this.additionalDropBoxTags = additionalDropboxTags;
-        return this;
-    }
-
-    /**
-     * @param additionalSharedPreferences the additionalSharedPreferences to set
-     * @return this instance
-     */
-    @NonNull
-    public ConfigurationBuilder setAdditionalSharedPreferences(@NonNull String... additionalSharedPreferences) {
-        this.additionalSharedPreferences = additionalSharedPreferences;
-        return this;
-    }
-
-    /**
-     * @param connectionTimeout the connectionTimeout to set
-     * @return this instance
-     */
-    @NonNull
-    public ConfigurationBuilder setConnectionTimeout(int connectionTimeout) {
-        this.connectionTimeout = connectionTimeout;
-        return this;
-    }
-
-    /**
-     * @param customReportContent the customReportContent to set
-     * @return this instance
-     */
-    @NonNull
-    public ConfigurationBuilder setCustomReportContent(@NonNull ReportField... customReportContent) {
-        this.customReportContent = customReportContent;
-        return this;
-    }
-
-    /**
-     * Use this if you want to keep the default configuration of reportContent, but set some fields explicitly.
-     *
-     * @param field  the field to set
-     * @param enable if this field should be reported
-     * @return this instance
-     */
-    @NonNull
-    public ConfigurationBuilder setReportField(@NonNull ReportField field, boolean enable) {
-        this.reportContentChanges.put(field, enable);
-        return this;
-    }
-
-    /**
-     * @param deleteUnapprovedReportsOnApplicationStart the deleteUnapprovedReportsOnApplicationStart to set
-     * @return this instance
-     */
-    @NonNull
-    public ConfigurationBuilder setDeleteUnapprovedReportsOnApplicationStart(boolean deleteUnapprovedReportsOnApplicationStart) {
-        this.deleteUnapprovedReportsOnApplicationStart = deleteUnapprovedReportsOnApplicationStart;
-        return this;
-    }
-
-    /**
-     * @param deleteOldUnsentReportsOnApplicationStart When to delete old (unsent) reports on startup.
-     * @return this instance
-     */
-    @NonNull
-    public ConfigurationBuilder setDeleteOldUnsentReportsOnApplicationStart(boolean deleteOldUnsentReportsOnApplicationStart) {
-        this.deleteOldUnsentReportsOnApplicationStart = deleteOldUnsentReportsOnApplicationStart;
-        return this;
-    }
-
-    /**
-     * @param dropboxCollectionMinutes the dropboxCollectionMinutes to set
-     * @return this instance
-     */
-    @NonNull
-    public ConfigurationBuilder setDropboxCollectionMinutes(int dropboxCollectionMinutes) {
-        this.dropboxCollectionMinutes = dropboxCollectionMinutes;
-        return this;
-    }
-
-    /**
-     * @param alsoReportToAndroidFramework Whether to also report the failure to the Android framework.
-     *                                     NB this will cause the native force dialog dialog to be displayed
-     *                                     as well as any ACRA notification.
-     * @return this instance
-     */
-    @NonNull
-    public ConfigurationBuilder setAlsoReportToAndroidFramework(boolean alsoReportToAndroidFramework) {
-        this.alsoReportToAndroidFramework = alsoReportToAndroidFramework;
-        return this;
-    }
-
-    /**
-     * Modify the formUri of your backend server receiving reports.
-     *
-     * @param formUri formUri to set.
-     * @return this instance
-     */
-    @NonNull
-    public ConfigurationBuilder setFormUri(@Nullable String formUri) {
-        this.formUri = formUri;
-        return this;
-    }
-
-    /**
-     * @param formUriBasicAuthLogin the formUriBasicAuthLogin to set
-     * @return this instance
-     */
-    @NonNull
-    public ConfigurationBuilder setFormUriBasicAuthLogin(@Nullable String formUriBasicAuthLogin) {
-        this.formUriBasicAuthLogin = formUriBasicAuthLogin;
-        return this;
-    }
-
-    /**
-     * @param formUriBasicAuthPassword the formUriBasicAuthPassword to set
-     * @return this instance
-     */
-    @NonNull
-    public ConfigurationBuilder setFormUriBasicAuthPassword(@Nullable String formUriBasicAuthPassword) {
-        this.formUriBasicAuthPassword = formUriBasicAuthPassword;
-        return this;
-    }
-
-    /**
-     * @param includeDropboxSystemTags the includeDropboxSystemTags to set
-     * @return this instance
-     */
-    @NonNull
-    public ConfigurationBuilder setIncludeDropboxSystemTags(boolean includeDropboxSystemTags) {
-        this.includeDropBoxSystemTags = includeDropboxSystemTags;
-        return this;
-    }
-
-    /**
-     * @param logcatArguments the logcatArguments to set
-     * @return this instance
-     */
-    @NonNull
-    public ConfigurationBuilder setLogcatArguments(@NonNull String... logcatArguments) {
-        this.logcatArguments = logcatArguments;
-        return this;
-    }
-
-    /**
-     * Modify the mailTo of the mail account receiving reports.
-     *
-     * @param mailTo mailTo to set.
-     * @return this instance
-     */
-    @NonNull
-    public ConfigurationBuilder setMailTo(@Nullable String mailTo) {
-        this.mailTo = mailTo;
-        return this;
-    }
-
-    /**
-     * Change the current {@link ReportingInteractionMode}.
-     *
-     * @param mode ReportingInteractionMode to set.
-     * @return this instance
-     * @deprecated since 4.8.2 use {@link #setReportingInteractionMode(ReportingInteractionMode)} instead.
-     */
-    @NonNull
-    public ConfigurationBuilder setMode(@NonNull ReportingInteractionMode mode) {
-        this.reportingInteractionMode = mode;
-        return this;
-    }
-
-    /**
-     * Change the current {@link ReportingInteractionMode}.
-     *
-     * @param mode ReportingInteractionMode to set.
-     * @return this instance
-     */
-    @NonNull
-    public ConfigurationBuilder setReportingInteractionMode(@NonNull ReportingInteractionMode mode) {
-        this.reportingInteractionMode = mode;
-        return this;
-    }
-
-    @NonNull
-    public ConfigurationBuilder setResDialogPositiveButtonText(@StringRes int resId) {
-        resDialogPositiveButtonText = resId;
-        return this;
-    }
-
-    @NonNull
-    public ConfigurationBuilder setResDialogNegativeButtonText(@StringRes int resId) {
-        resDialogNegativeButtonText = resId;
-        return this;
-    }
-
-    @NonNull
-    public ConfigurationBuilder setReportDialogClass(@NonNull Class<? extends BaseCrashReportDialog> reportDialogClass) {
-        this.reportDialogClass = reportDialogClass;
-        return this;
-    }
-
-    /**
-     * Use this method if the id you wanted to give to
-     * {@link ReportsCrashes#resDialogCommentPrompt()} comes from an Android
-     * Library Project.
-     *
-     * @param resId The resource id, see {@link ReportsCrashes#resDialogCommentPrompt()}
-     * @return this instance
-     */
-    @NonNull
-    public ConfigurationBuilder setResDialogCommentPrompt(@StringRes int resId) {
-        resDialogCommentPrompt = resId;
-        return this;
-    }
-
-    /**
-     * Use this method if the id you wanted to give to
-     * {@link ReportsCrashes#resDialogEmailPrompt()} comes from an Android Library Project.
-     *
-     * @param resId The resource id, see
-     *              {@link ReportsCrashes#resDialogEmailPrompt()}
-     * @return this instance
-     */
-    @NonNull
-    public ConfigurationBuilder setResDialogEmailPrompt(@StringRes int resId) {
-        resDialogEmailPrompt = resId;
-        return this;
-    }
-
-    /**
-     * Use this method if the id you wanted to give to
-     * {@link ReportsCrashes#resDialogIcon()} comes from an Android Library
-     * Project.
-     *
-     * @param resId The resource id, see {@link ReportsCrashes#resDialogIcon()}
-     * @return this instance
-     */
-    @NonNull
-    public ConfigurationBuilder setResDialogIcon(@DrawableRes int resId) {
-        resDialogIcon = resId;
-        return this;
-    }
-
-    /**
-     * Use this method BEFORE if the id you wanted to give to
-     * {@link ReportsCrashes#resDialogOkToast()} comes from an Android Library
-     * Project.
-     *
-     * @param resId The resource id, see {@link ReportsCrashes#resDialogOkToast()}
-     * @return this instance
-     */
-    @NonNull
-    public ConfigurationBuilder setResDialogOkToast(@StringRes int resId) {
-        resDialogOkToast = resId;
-        return this;
-    }
-
-    /**
-     * Use this method if the id you wanted to give to
-     * {@link ReportsCrashes#resDialogText()} comes from an Android Library
-     * Project.
-     *
-     * @param resId The resource id, see {@link ReportsCrashes#resDialogText()}
-     * @return this instance
-     */
-    @NonNull
-    public ConfigurationBuilder setResDialogText(@StringRes int resId) {
-        resDialogText = resId;
-        return this;
-    }
-
-    /**
-     * Use this method if the id you wanted to give to
-     * {@link ReportsCrashes#resDialogTitle()} comes from an Android Library
-     * Project.
-     *
-     * @param resId The resource id, see {@link ReportsCrashes#resDialogTitle()}
-     * @return this instance
-     */
-    @NonNull
-    public ConfigurationBuilder setResDialogTitle(@StringRes int resId) {
-        resDialogTitle = resId;
-        return this;
-    }
-
-    /**
-     * @param resId The resource id, see {@link ReportsCrashes#resDialogTheme()}
-     * @return this instance
-     */
-    @NonNull
-    public ConfigurationBuilder setResDialogTheme(@StyleRes int resId) {
-        resDialogTheme = resId;
-        return this;
-    }
-
-    /**
-     * Use this method if the id you wanted to give to
-     * {@link ReportsCrashes#resNotifIcon()} comes from an Android Library
-     * Project.
-     *
-     * @param resId The resource id, see {@link ReportsCrashes#resNotifIcon()}
-     * @return this instance
-     */
-    @NonNull
-    public ConfigurationBuilder setResNotifIcon(@DrawableRes int resId) {
-        resNotifIcon = resId;
-        return this;
-    }
-
-    /**
-     * Use this method if the id you wanted to give to
-     * {@link ReportsCrashes#resNotifText()} comes from an Android Library
-     * Project.
-     *
-     * @param resId The resource id, see {@link ReportsCrashes#resNotifText()}
-     * @return this instance
-     */
-    @NonNull
-    public ConfigurationBuilder setResNotifText(@StringRes int resId) {
-        resNotifText = resId;
-        return this;
-    }
-
-    /**
-     * Use this method if the id you wanted to give to
-     * {@link ReportsCrashes#resNotifTickerText()} comes from an Android Library
-     * Project.
-     *
-     * @param resId The resource id, see
-     *              {@link ReportsCrashes#resNotifTickerText()}
-     * @return this instance
-     */
-    @NonNull
-    public ConfigurationBuilder setResNotifTickerText(@StringRes int resId) {
-        resNotifTickerText = resId;
-        return this;
-    }
-
-    /**
-     * Use this method if the id you wanted to give to
-     * {@link ReportsCrashes#resNotifTitle()} comes from an Android Library
-     * Project.
-     *
-     * @param resId The resource id, see {@link ReportsCrashes#resNotifTitle()}
-     * @return this instance
-     */
-    @NonNull
-    public ConfigurationBuilder setResNotifTitle(@StringRes int resId) {
-        resNotifTitle = resId;
-        return this;
-    }
-
-    /**
-     * Use this method if the id you wanted to give to
-     * {@link ReportsCrashes#resToastText()} comes from an Android Library
-     * Project.
-     *
-     * @param resId The resource id, see {@link ReportsCrashes#resToastText()}
-     * @return this instance
-     */
-    @NonNull
-    public ConfigurationBuilder setResToastText(@StringRes int resId) {
-        resToastText = resId;
-        return this;
-    }
-
-    /**
-     * @param sharedPreferenceMode the sharedPreferenceMode to set
-     * @return this instance
-     */
-    @NonNull
-    public ConfigurationBuilder setSharedPreferenceMode(int sharedPreferenceMode) {
-        this.sharedPreferencesMode = sharedPreferenceMode;
-        return this;
-    }
-
-    /**
-     * @param sharedPreferenceName the sharedPreferenceName to set
-     * @return this instance
-     */
-    @NonNull
-    public ConfigurationBuilder setSharedPreferenceName(@NonNull String sharedPreferenceName) {
-        this.sharedPreferencesName = sharedPreferenceName;
-        return this;
-    }
-
-    /**
-     * @param socketTimeout the socketTimeout to set
-     * @return this instance
-     */
-    @NonNull
-    public ConfigurationBuilder setSocketTimeout(int socketTimeout) {
-        this.socketTimeout = socketTimeout;
-        return this;
-    }
-
-    /**
-     * @param filterByPid true if you want to collect only logcat lines related to your
-     *                    application process.
-     * @return this instance
-     */
-    @NonNull
-    public ConfigurationBuilder setLogcatFilterByPid(boolean filterByPid) {
-        logcatFilterByPid = filterByPid;
-        return this;
-    }
-
-    /**
-     * @param sendReportsInDevMode false if you want to disable sending reports in development
-     *                             mode. Reports will be sent only on signed applications.
-     * @return this instance
-     */
-    @NonNull
-    public ConfigurationBuilder setSendReportsInDevMode(boolean sendReportsInDevMode) {
-        this.sendReportsInDevMode = sendReportsInDevMode;
-        return this;
-    }
-
-    /**
-     * @param sendReportsAtShutdown Ignored.
-     * @return this instance
-     * @deprecated since 4.8.3 no replacement. Now that we are using the SenderService in a separate process we always send at shutdown.
-     */
-    @NonNull
-    public ConfigurationBuilder setSendReportsAtShutdown(boolean sendReportsAtShutdown) {
-        return this;
-    }
-
-    /**
-     * @param excludeMatchingSharedPreferencesKeys an array of Strings containing regexp defining
-     *                                             SharedPreferences keys that should be excluded from the data
-     *                                             collection.
-     * @return this instance
-     */
-    @NonNull
-    public ConfigurationBuilder setExcludeMatchingSharedPreferencesKeys(@NonNull String... excludeMatchingSharedPreferencesKeys) {
-        this.excludeMatchingSharedPreferencesKeys = excludeMatchingSharedPreferencesKeys;
-        return this;
-    }
-
-    /**
-     * @param excludeMatchingSettingsKeys an array of Strings containing regexp defining
-     *                                    Settings.System, Settings.Secure and Settings.Global keys that
-     *                                    should be excluded from the data collection.
-     * @return this instance
-     */
-    @NonNull
-    public ConfigurationBuilder setExcludeMatchingSettingsKeys(@NonNull String... excludeMatchingSettingsKeys) {
-        this.excludeMatchingSettingsKeys = excludeMatchingSettingsKeys;
-        return this;
-    }
-
-    @NonNull
-    public ConfigurationBuilder setBuildConfigClass(@Nullable Class buildConfigClass) {
-        this.buildConfigClass = buildConfigClass;
-        return this;
-    }
-
-    /**
-     * @param applicationLogFile The path and file name of your application log file, to be
-     *                           used with {@link ReportField#APPLICATION_LOG}.
-     * @return this instance
-     */
-    @NonNull
-    public ConfigurationBuilder setApplicationLogFile(@NonNull String applicationLogFile) {
-        this.applicationLogFile = applicationLogFile;
-        return this;
-    }
-
-    /**
-     * @param applicationLogFileLines The number of lines of your application log to be collected,
-     *                                to be used with {@link ReportField#APPLICATION_LOG} and
-     *                                {@link ReportsCrashes#applicationLogFile()}.
-     * @return this instance
-     */
-    @NonNull
-    public ConfigurationBuilder setApplicationLogFileLines(int applicationLogFileLines) {
-        this.applicationLogFileLines = applicationLogFileLines;
-        return this;
-    }
-
-    /**
-     * @param httpMethod The method to be used to send data to the server.
-     * @return this instance
-     */
-    @NonNull
-    public ConfigurationBuilder setHttpMethod(@NonNull Method httpMethod) {
-        this.httpMethod = httpMethod;
-        return this;
-    }
-
-    /**
-     * @param type The type of content encoding to be used to send data to the
-     *             server.
-     * @return this instance
-     */
-    @NonNull
-    public ConfigurationBuilder setReportType(@NonNull Type type) {
-        reportType = type;
-        return this;
-    }
-
-    /**
-     * @param keyStoreFactoryClass Set this to a factory class which creates a the keystore that contains the trusted certificates
-     * @return this instance
-     */
-    @NonNull
-    public ConfigurationBuilder setKeyStoreFactoryClass(Class<?extends KeyStoreFactory> keyStoreFactoryClass) {
-        this.keyStoreFactoryClass = keyStoreFactoryClass;
-        return this;
-    }
-
-    /**
-     * @param resCertificate a raw resource of a custom certificate file
-     * @return this instance
-     */
-    @NonNull
-    public ConfigurationBuilder setCertificate(@RawRes int resCertificate){
-        this.resCertificate = resCertificate;
-        return this;
-    }
-
-    /**
-     * @param certificatePath path to a custom trusted certificate. Must start with "asset://" if the file is in the assets folder
-     * @return this instance
-     */
-    @NonNull
-    public ConfigurationBuilder setCertificate(@NonNull String certificatePath) {
-        this.certificatePath = certificatePath;
-        return this;
-    }
-
-    /**
-     * @param type custom certificate type
-     * @return this instance
-     */
-    @NonNull
-    public ConfigurationBuilder setCertificateType(@NonNull String type) {
-        this.certificateType = type;
-        return this;
-    }
-
-    @SafeVarargs
-    @NonNull
-    public final ConfigurationBuilder setReportSenderFactoryClasses(@NonNull Class<? extends ReportSenderFactory>... reportSenderFactoryClasses) {
-        this.reportSenderFactoryClasses = reportSenderFactoryClasses;
-        return this;
-    }
-
-    @NonNull
-    public ConfigurationBuilder setReportPrimerClass(@NonNull Class<? extends ReportPrimer> reportPrimerClass) {
-        this.reportPrimerClass = reportPrimerClass;
-        return this;
-    }
-
-    @NonNull
-    public ConfigurationBuilder setRetryPolicyClass(@NonNull Class<? extends RetryPolicy> retryPolicyClass) {
-        this.retryPolicyClass = retryPolicyClass;
-        return this;
-    }
-
-
-    // Getters - used to provide values and !DEFAULTS! to ACRConfiguration during construction
-
-    @NonNull
-    String[] additionalDropBoxTags() {
-        if (additionalDropBoxTags != null) {
-            return additionalDropBoxTags;
-        }
-        return new String[0];
-    }
-
-    @NonNull
-    String[] additionalSharedPreferences() {
-        if (additionalSharedPreferences != null) {
-            return additionalSharedPreferences;
-        }
-        return new String[0];
-    }
-
-    /**
-     * @deprecated since 4.8.1 no replacement.
-     */
-    @Nullable
-    Class<? extends Annotation> annotationType() {
-        return annotationType; // Why would this ever be needed?
-    }
-
-    int connectionTimeout() {
-        if (connectionTimeout != null) {
-            return connectionTimeout;
-        }
-        return DEFAULT_CONNECTION_TIMEOUT;
-    }
-
-    @NonNull
-    Set<ReportField> reportContent() {
-        final Set<ReportField> reportContent = new HashSet<ReportField>();
-        if (customReportContent != null && customReportContent.length != 0) {
-            if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Using custom Report Fields");
-            reportContent.addAll(Arrays.asList(customReportContent));
-        } else if (mailTo == null || DEFAULT_STRING_VALUE.equals(mailTo)) {
-            if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Using default Report Fields");
-            reportContent.addAll(Arrays.asList(DEFAULT_REPORT_FIELDS));
-        } else {
-            if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Using default Mail Report Fields");
-            reportContent.addAll(Arrays.asList(DEFAULT_MAIL_REPORT_FIELDS));
-        }
-
-        // Add or remove any extra fields.
-        for (Map.Entry<ReportField, Boolean> entry : reportContentChanges.entrySet()) {
-            if (entry.getValue()) {
-                reportContent.add(entry.getKey());
-            } else {
-                reportContent.remove(entry.getKey());
-            }
-        }
-        return reportContent;
-    }
-
-    boolean deleteUnapprovedReportsOnApplicationStart() {
-        if (deleteUnapprovedReportsOnApplicationStart != null) {
-            return deleteUnapprovedReportsOnApplicationStart;
-        }
-        return DEFAULT_DELETE_UNAPPROVED_REPORTS_ON_APPLICATION_START;
-    }
-
-    boolean deleteOldUnsentReportsOnApplicationStart() {
-        if (deleteOldUnsentReportsOnApplicationStart != null) {
-            return deleteOldUnsentReportsOnApplicationStart;
-        }
-        return DEFAULT_DELETE_OLD_UNSENT_REPORTS_ON_APPLICATION_START;
-    }
-
-    int dropboxCollectionMinutes() {
-        if (dropboxCollectionMinutes != null) {
-            return dropboxCollectionMinutes;
-        }
-        return DEFAULT_DROPBOX_COLLECTION_MINUTES;
-    }
-
-    boolean alsoReportToAndroidFramework() {
-        if (alsoReportToAndroidFramework != null) {
-            return alsoReportToAndroidFramework;
-        }
-        return DEFAULT_REPORT_TO_ANDROID_FRAMEWORK;
-    }
-
-    @NonNull
-    String formUri() {
-        if (formUri != null) {
-            return formUri;
-        }
-        return DEFAULT_STRING_VALUE;
-    }
-
-    @NonNull
-    String formUriBasicAuthLogin() {
-        if (formUriBasicAuthLogin != null) {
-            return formUriBasicAuthLogin;
-        }
-        return NULL_VALUE;
-    }
-
-    @NonNull
-    String formUriBasicAuthPassword() {
-        if (formUriBasicAuthPassword != null) {
-            return formUriBasicAuthPassword;
-        }
-        return NULL_VALUE;
-    }
-
-    boolean includeDropBoxSystemTags() {
-        if (includeDropBoxSystemTags != null) {
-            return includeDropBoxSystemTags;
-        }
-        return DEFAULT_INCLUDE_DROPBOX_SYSTEM_TAGS;
-    }
-
-    @NonNull
-    String[] logcatArguments() {
-        if (logcatArguments != null) {
-            return logcatArguments;
-        }
-        return new String[]{"-t", Integer.toString(DEFAULT_LOGCAT_LINES), "-v", "time"};
-    }
-
-    @NonNull
-    String mailTo() {
-        if (mailTo != null) {
-            return mailTo;
-        }
-        return DEFAULT_STRING_VALUE;
-    }
-
-    @NonNull
-    ReportingInteractionMode reportingInteractionMode() {
-        if (reportingInteractionMode != null) {
-            return reportingInteractionMode;
-        }
-        return ReportingInteractionMode.SILENT;
-    }
-
-    @StringRes
-    public int resDialogPositiveButtonText() {
-        if (resDialogPositiveButtonText != null) {
-            return resDialogPositiveButtonText;
-        }
-        return DEFAULT_DIALOG_POSITIVE_BUTTON_TEXT;
-    }
-
-    @StringRes
-    int resDialogNegativeButtonText() {
-        if (resDialogNegativeButtonText != null) {
-            return resDialogNegativeButtonText;
-        }
-        return DEFAULT_DIALOG_NEGATIVE_BUTTON_TEXT;
-    }
-
-    @StringRes
-    int resDialogCommentPrompt() {
-        if (resDialogCommentPrompt != null) {
-            return resDialogCommentPrompt;
-        }
-        return DEFAULT_RES_VALUE;
-    }
-
-    @StringRes
-    int resDialogEmailPrompt() {
-        if (resDialogEmailPrompt != null) {
-            return resDialogEmailPrompt;
-        }
-        return DEFAULT_RES_VALUE;
-    }
-
-    @DrawableRes
-    int resDialogIcon() {
-        if (resDialogIcon != null) {
-            return resDialogIcon;
-        }
-        return DEFAULT_DIALOG_ICON;
-    }
-
-    @StringRes
-    int resDialogOkToast() {
-        if (resDialogOkToast != null) {
-            return resDialogOkToast;
-        }
-        return DEFAULT_RES_VALUE;
-    }
-
-    @StringRes
-    int resDialogText() {
-        if (resDialogText != null) {
-            return resDialogText;
-        }
-        return DEFAULT_RES_VALUE;
-    }
-
-    @StringRes
-    int resDialogTitle() {
-        if (resDialogTitle != null) {
-            return resDialogTitle;
-        }
-        return DEFAULT_RES_VALUE;
-    }
-
-    @StyleRes
-    int resDialogTheme() {
-        if (resDialogTheme != null) {
-            return resDialogTheme;
-        }
-        return DEFAULT_RES_VALUE;
-    }
-
-    @DrawableRes
-    int resNotifIcon() {
-        if (resNotifIcon != null) {
-            return resNotifIcon;
-        }
-        return DEFAULT_NOTIFICATION_ICON;
-    }
-
-    @StringRes
-    int resNotifText() {
-        if (resNotifText != null) {
-            return resNotifText;
-        }
-        return DEFAULT_RES_VALUE;
-    }
-
-    @StringRes
-    int resNotifTickerText() {
-        if (resNotifTickerText != null) {
-            return resNotifTickerText;
-        }
-        return DEFAULT_RES_VALUE;
-    }
-
-    @StringRes
-    int resNotifTitle() {
-        if (resNotifTitle != null) {
-            return resNotifTitle;
-        }
-        return DEFAULT_RES_VALUE;
-    }
-
-    @StringRes
-    int resToastText() {
-        if (resToastText != null) {
-            return resToastText;
-        }
-        return DEFAULT_RES_VALUE;
-    }
-
-    int sharedPreferencesMode() {
-        if (sharedPreferencesMode != null) {
-            return sharedPreferencesMode;
-        }
-        return DEFAULT_SHARED_PREFERENCES_MODE;
-    }
-
-    @NonNull
-    String sharedPreferencesName() {
-        if (sharedPreferencesName != null) {
-            return sharedPreferencesName;
-        }
-
-        return DEFAULT_STRING_VALUE;
-    }
-
-    int socketTimeout() {
-        if (socketTimeout != null) {
-            return socketTimeout;
-        }
-        return DEFAULT_SOCKET_TIMEOUT;
-    }
-
-    boolean logcatFilterByPid() {
-        if (logcatFilterByPid != null) {
-            return logcatFilterByPid;
-        }
-        return DEFAULT_LOGCAT_FILTER_BY_PID;
-    }
-
-    boolean sendReportsInDevMode() {
-        if (sendReportsInDevMode != null) {
-            return sendReportsInDevMode;
-        }
-        return DEFAULT_SEND_REPORTS_IN_DEV_MODE;
-    }
-
-    @NonNull
-    String[] excludeMatchingSharedPreferencesKeys() {
-        if (excludeMatchingSharedPreferencesKeys != null) {
-            return excludeMatchingSharedPreferencesKeys;
-        }
-        return new String[0];
-    }
-
-    @NonNull
-    String[] excludeMatchingSettingsKeys() {
-        if (excludeMatchingSettingsKeys != null) {
-            return excludeMatchingSettingsKeys;
-        }
-        return new String[0];
-    }
-
-    /**
-     * Will return {@link Object} if no value has been configured.
-     * It is up to clients to construct the recommended default value of context.getClass().getPackage().getName() + BuildConfig.class
-     */
-    @NonNull
-    Class buildConfigClass() {
-        if(buildConfigClass != null) {
-            return buildConfigClass;
-        }
-        return Object.class;
-    }
-
-    @NonNull
-    String applicationLogFile() {
-        if (applicationLogFile != null) {
-            return applicationLogFile;
-        }
-        return DEFAULT_APPLICATION_LOGFILE;
-    }
-
-    int applicationLogFileLines() {
-        if (applicationLogFileLines != null) {
-            return applicationLogFileLines;
-        }
-        return DEFAULT_APPLICATION_LOGFILE_LINES;
-    }
-
-    @NonNull
-    Class<? extends BaseCrashReportDialog> reportDialogClass() {
-        if (reportDialogClass != null) {
-            return reportDialogClass;
-        }
-        return CrashReportDialog.class;
-    }
-
-    @NonNull
-    Class<? extends ReportPrimer> reportPrimerClass() {
-        if (reportPrimerClass != null) {
-            return reportPrimerClass;
-        }
-        return NoOpReportPrimer.class;
-    }
-
-    @NonNull
-    Method httpMethod() {
-        if (httpMethod != null) {
-            return httpMethod;
-        }
-        return Method.POST;
-    }
-
-    @NonNull
-    Type reportType() {
-        if (reportType != null) {
-            return reportType;
-        }
-        return Type.FORM;
-    }
-
-    @NonNull
-    Class<? extends ReportSenderFactory>[] reportSenderFactoryClasses() {
-        if (reportSenderFactoryClasses != null) {
-            return reportSenderFactoryClasses;
-        }
-        //noinspection unchecked
-        return new Class[]{DefaultReportSenderFactory.class};
-    }
-
-    @NonNull
-    Class<? extends KeyStoreFactory> keyStoreFactoryClass() {
-        if(keyStoreFactoryClass != null) {
-            return keyStoreFactoryClass;
-        }
-        return NoKeyStoreFactory.class;
-    }
-
-    @RawRes
-    int resCertificate() {
-        if(resCertificate != null){
-            return resCertificate;
-        }
-        return DEFAULT_RES_VALUE;
-    }
-
-    @NonNull
-    String certificatePath() {
-        if(certificatePath != null){
-            return certificatePath;
-        }
-        return DEFAULT_STRING_VALUE;
-    }
-
-    @NonNull
-    String certificateType() {
-        if(certificateType != null){
-            return certificateType;
-        }
-        return DEFAULT_CERTIFICATE_TYPE;
-    }
-
-    @NonNull
-    Map<String, String> httpHeaders() {
-        return httpHeaders;
-    }
-
-    @NonNull
-    Class<? extends RetryPolicy> retryPolicyClass(){
-        if(retryPolicyClass != null){
-            return retryPolicyClass;
-        }
-        return DefaultRetryPolicy.class;
-    }
-}
diff --git a/src/main/java/org/acra/sender/EmailIntentSender.java b/src/main/java/org/acra/sender/EmailIntentSender.java
deleted file mode 100644
index 2e774d6e..00000000
--- a/src/main/java/org/acra/sender/EmailIntentSender.java
+++ /dev/null
@@ -1,75 +0,0 @@
-/*
- *  Copyright 2010 Kevin Gaudin
- *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-package org.acra.sender;
-
-import android.content.Context;
-import android.content.Intent;
-import android.net.Uri;
-import android.support.annotation.NonNull;
-
-import org.acra.ACRAConstants;
-import org.acra.ReportField;
-import org.acra.annotation.ReportsCrashes;
-import org.acra.collector.CrashReportData;
-import org.acra.config.ACRAConfiguration;
-import org.acra.collections.ImmutableSet;
-
-import java.util.Set;
-
-/**
- * Send reports through an email intent.
- *
- * The user will be asked to chose his preferred email client. Included report fields can be defined using
- * {@link org.acra.annotation.ReportsCrashes#customReportContent()}. Crash receiving mailbox has to be
- * defined with {@link ReportsCrashes#mailTo()}.
- */
-public class EmailIntentSender implements ReportSender {
-
-    private final ACRAConfiguration config;
-
-    public EmailIntentSender(@NonNull ACRAConfiguration config) {
-        this.config = config;
-    }
-
-    @Override
-    public void send(@NonNull Context context, @NonNull CrashReportData errorContent) throws ReportSenderException {
-
-        final String subject = context.getPackageName() + " Crash Report";
-        final String body = buildBody(errorContent);
-
-        final Intent emailIntent = new Intent(android.content.Intent.ACTION_SENDTO);
-        emailIntent.setData(Uri.fromParts("mailto", config.mailTo(), null));
-        emailIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-        emailIntent.putExtra(android.content.Intent.EXTRA_SUBJECT, subject);
-        emailIntent.putExtra(android.content.Intent.EXTRA_TEXT, body);
-        context.startActivity(emailIntent);
-    }
-
-    private String buildBody(@NonNull CrashReportData errorContent) {
-        Set<ReportField> fields = config.getReportFields();
-        if(fields.isEmpty()) {
-            fields = new ImmutableSet<ReportField>(ACRAConstants.DEFAULT_MAIL_REPORT_FIELDS);
-        }
-
-        final StringBuilder builder = new StringBuilder();
-        for (ReportField field : fields) {
-            builder.append(field.toString()).append('=');
-            builder.append(errorContent.get(field));
-            builder.append('\n');
-        }
-        return builder.toString();
-    }
-}
diff --git a/src/main/java/org/acra/sender/HttpSender.java b/src/main/java/org/acra/sender/HttpSender.java
deleted file mode 100644
index 43564fb8..00000000
--- a/src/main/java/org/acra/sender/HttpSender.java
+++ /dev/null
@@ -1,268 +0,0 @@
-/*
- *  Copyright 2010 Kevin Gaudin
- *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-package org.acra.sender;
-
-import android.content.Context;
-import android.net.Uri;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-
-import org.acra.ACRA;
-import org.acra.ACRAConstants;
-import org.acra.ReportField;
-import org.acra.annotation.ReportsCrashes;
-import org.acra.collector.CrashReportData;
-import org.acra.config.ACRAConfiguration;
-import org.acra.util.HttpRequest;
-import org.acra.collections.ImmutableSet;
-import org.acra.util.JSONReportBuilder.JSONReportException;
-
-import java.io.IOException;
-import java.net.URL;
-import java.util.HashMap;
-import java.util.Map;
-import java.util.Set;
-
-import static org.acra.ACRA.LOG_TAG;
-
-/**
- * <p>
- * The {@link ReportSender} used by ACRA when {@link ReportsCrashes#formUri()}
- * has been defined in order to post crash data to a custom server-side data
- * collection script. It sends all data in a POST request with parameters named
- * with easy to understand names (basically a string conversion of
- * {@link ReportField} enum values) or based on your own conversion Map from
- * {@link ReportField} values to String.
- * </p>
- * 
- * <p>
- * To use specific POST parameter names, you can provide your own report fields
- * mapping scheme:
- * </p>
- * 
- * <pre>
- * Just create and declare a {@link ReportSenderFactory} that constructs a mapping
- * from each {@link ReportField} to another name.
- * </pre>
- * 
- */
-public class HttpSender implements ReportSender {
-
-    /**
-     * Available HTTP methods to send data. Only POST and PUT are currently
-     * supported.
-     */
-    public enum Method {
-        POST, PUT
-    }
-
-    /**
-     * Type of report data encoding, currently supports Html Form encoding and
-     * JSON.
-     */
-    public enum Type {
-        /**
-         * Send data as a www form encoded list of key/values.
-         * @see <a href="http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4">Form content types</a>
-         */
-        FORM {
-            @NonNull
-            @Override
-            public String getContentType() {
-                return "application/x-www-form-urlencoded";
-            }
-        },
-        /**
-         * Send data as a structured JSON tree.
-         */
-        JSON {
-            @NonNull
-            @Override
-            public String getContentType() {
-                return "application/json";
-            }
-        };
-
-        @NonNull
-        public abstract String getContentType();
-    }
-
-    private final ACRAConfiguration config;
-    @Nullable
-    private final Uri mFormUri;
-    private final Map<ReportField, String> mMapping;
-    private final Method mMethod;
-    private final Type mType;
-    @Nullable
-    private String mUsername;
-    @Nullable
-    private String mPassword;
-
-    /**
-     * <p>
-     * Create a new HttpSender instance with its destination taken from the supplied config.
-     * </p>
-     *
-     * @param config    AcraConfig declaring the
-     * @param method
-     *            HTTP {@link Method} to be used to send data. Currently only
-     *            {@link Method#POST} and {@link Method#PUT} are available. If
-     *            {@link Method#PUT} is used, the {@link ReportField#REPORT_ID}
-     *            is appended to the formUri to be compliant with RESTful APIs.
-     * 
-     * @param type
-     *            {@link Type} of encoding used to send the report body.
-     *            {@link Type#FORM} is a simple Key/Value pairs list as defined
-     *            by the application/x-www-form-urlencoded mime type.
-     * 
-     * @param mapping
-     *            Applies only to {@link Method#POST} method parameter. If null,
-     *            POST parameters will be named with {@link ReportField} values
-     *            converted to String with .toString(). If not null, POST
-     *            parameters will be named with the result of
-     *            mapping.get(ReportField.SOME_FIELD);
-     */
-    public HttpSender(@NonNull ACRAConfiguration config, @NonNull Method method, @NonNull Type type, @Nullable Map<ReportField, String> mapping) {
-        this(config, method, type, null, mapping);
-    }
-
-    /**
-     * <p>
-     * Create a new HttpPostSender instance with a fixed destination provided as
-     * a parameter. Configuration changes to the formUri are not applied.
-     * </p>
-     *
-     * @param config    AcraConfig declaring the
-     * @param method
-     *            HTTP {@link Method} to be used to send data. Currently only
-     *            {@link Method#POST} and {@link Method#PUT} are available. If
-     *            {@link Method#PUT} is used, the {@link ReportField#REPORT_ID}
-     *            is appended to the formUri to be compliant with RESTful APIs.
-     * 
-     * @param type
-     *            {@link Type} of encoding used to send the report body.
-     *            {@link Type#FORM} is a simple Key/Value pairs list as defined
-     *            by the application/x-www-form-urlencoded mime type.
-     * @param formUri
-     *            The URL of your server-side crash report collection script.
-     * @param mapping
-     *            Applies only to {@link Method#POST} method parameter. If null,
-     *            POST parameters will be named with {@link ReportField} values
-     *            converted to String with .toString(). If not null, POST
-     *            parameters will be named with the result of
-     *            mapping.get(ReportField.SOME_FIELD);
-     */
-    public HttpSender(@NonNull ACRAConfiguration config, @NonNull Method method, @NonNull Type type, @Nullable String formUri, @Nullable Map<ReportField, String> mapping) {
-        this.config = config;
-        mMethod = method;
-        mFormUri = (formUri == null) ? null : Uri.parse(formUri);
-        mMapping = mapping;
-        mType = type;
-        mUsername = null;
-        mPassword = null;        
-    }
-    
-    /**
-     * <p>
-     * Set credentials for this HttpSender that override (if present) the ones
-     * set globally.
-     * </p>
-     * 
-     * @param username
-     *            The username to set for HTTP Basic Auth.
-     * @param password
-     *            The password to set for HTTP Basic Auth.
-     */
-    @SuppressWarnings( "unused" )
-    public void setBasicAuth(@Nullable String username, @Nullable String password) {
-        mUsername = username;
-        mPassword = password;
-    }    
-
-    @Override
-    public void send(@NonNull Context context, @NonNull CrashReportData report) throws ReportSenderException {
-
-        try {
-            URL reportUrl = mFormUri == null ? new URL(config.formUri()) : new URL(mFormUri.toString());
-            if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Connect to " + reportUrl.toString());
-
-            final String login = mUsername != null ? mUsername : isNull(config.formUriBasicAuthLogin()) ? null : config.formUriBasicAuthLogin();
-            final String password = mPassword != null ? mPassword : isNull(config.formUriBasicAuthPassword()) ? null : config.formUriBasicAuthPassword();
-
-            final HttpRequest request = new HttpRequest(config);
-            request.setConnectionTimeOut(config.connectionTimeout());
-            request.setSocketTimeOut(config.socketTimeout());
-            request.setLogin(login);
-            request.setPassword(password);
-            request.setHeaders(config.getHttpHeaders());
-
-            // Generate report body depending on requested type
-            final String reportAsString;
-            switch (mType) {
-            case JSON:
-                reportAsString = report.toJSON().toString();
-                break;
-            case FORM:
-            default:
-                final Map<String, String> finalReport = remap(report);
-                reportAsString = HttpRequest.getParamsAsFormString(finalReport);
-                break;
-            }
-
-            // Adjust URL depending on method
-            switch (mMethod) {
-            case POST:
-                break;
-            case PUT:
-                reportUrl = new URL(reportUrl.toString() + '/' + report.getProperty(ReportField.REPORT_ID));
-                break;
-            default:
-                throw new UnsupportedOperationException("Unknown method: " + mMethod.name());
-            }
-            request.send(context, reportUrl, mMethod, reportAsString, mType);
-
-        } catch (@NonNull IOException e) {
-            throw new ReportSenderException("Error while sending " + config.reportType()
-                    + " report via Http " + mMethod.name(), e);
-        } catch (@NonNull JSONReportException e) {
-            throw new ReportSenderException("Error while sending " + config.reportType()
-                    + " report via Http " + mMethod.name(), e);
-        }
-    }
-
-    @NonNull
-    private Map<String, String> remap(@NonNull Map<ReportField, String> report) {
-
-        Set<ReportField> fields = config.getReportFields();
-        if (fields.isEmpty()) {
-            fields = new ImmutableSet<ReportField>(ACRAConstants.DEFAULT_REPORT_FIELDS);
-        }
-
-        final Map<String, String> finalReport = new HashMap<String, String>(report.size());
-        for (ReportField field : fields) {
-            if (mMapping == null || mMapping.get(field) == null) {
-                finalReport.put(field.toString(), report.get(field));
-            } else {
-                finalReport.put(mMapping.get(field), report.get(field));
-            }
-        }
-        return finalReport;
-    }
-
-    private boolean isNull(@Nullable String aString) {
-        return aString == null || ACRAConstants.NULL_VALUE.equals(aString);
-    }
-}
\ No newline at end of file
diff --git a/src/main/java/org/acra/util/HttpRequest.java b/src/main/java/org/acra/util/HttpRequest.java
deleted file mode 100644
index f34e16c0..00000000
--- a/src/main/java/org/acra/util/HttpRequest.java
+++ /dev/null
@@ -1,213 +0,0 @@
-/*
- * This class was copied from this Stackoverflow Q&A:
- * http://stackoverflow.com/questions/2253061/secure-http-post-in-android/2253280#2253280
- * Thanks go to MattC!  
- */
-package org.acra.util;
-
-import android.content.Context;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.util.Base64;
-
-import org.acra.ACRA;
-import org.acra.config.ACRAConfiguration;
-import org.acra.security.KeyStoreHelper;
-import org.acra.sender.HttpSender.Method;
-import org.acra.sender.HttpSender.Type;
-
-import java.io.BufferedOutputStream;
-import java.io.IOException;
-import java.io.OutputStream;
-import java.io.UnsupportedEncodingException;
-import java.net.HttpURLConnection;
-import java.net.URL;
-import java.net.URLEncoder;
-import java.security.GeneralSecurityException;
-import java.security.KeyStore;
-import java.util.Map;
-
-import javax.net.ssl.HttpsURLConnection;
-import javax.net.ssl.SSLContext;
-import javax.net.ssl.TrustManagerFactory;
-
-import ch.acra.acra.BuildConfig;
-
-import static org.acra.ACRA.LOG_TAG;
-
-public final class HttpRequest {
-
-    private static final String UTF8 = "UTF-8";
-    private static final int HTTP_SUCCESS = 200;
-    private static final int HTTP_REDIRECT = 300;
-    private static final int HTTP_CLIENT_ERROR = 400;
-    private static final int HTTP_UNAUTHORIZED = 401;
-    private static final int HTTP_FORBIDDEN = 403;
-    private static final int HTTP_METHOD_NOT_ALLOWED = 405;
-    private static final int HTTP_CONFLICT = 409;
-    private static final int MAX_HTTP_CODE = 600;
-
-    private final ACRAConfiguration config;
-    private String login;
-    private String password;
-    private int connectionTimeOut = 3000;
-    private int socketTimeOut = 3000;
-    private Map<String, String> headers;
-
-    public HttpRequest(@NonNull ACRAConfiguration config) {
-        this.config = config;
-    }
-
-    public void setLogin(@Nullable String login) {
-        this.login = login;
-    }
-
-    public void setPassword(@Nullable String password) {
-        this.password = password;
-    }
-
-    public void setConnectionTimeOut(int connectionTimeOut) {
-        this.connectionTimeOut = connectionTimeOut;
-    }
-
-    public void setSocketTimeOut(int socketTimeOut) {
-        this.socketTimeOut = socketTimeOut;
-    }
-
-    public void setHeaders(@Nullable Map<String, String> headers) {
-        this.headers = headers;
-    }
-
-
-    /**
-     * Posts to a URL.
-     *
-     * @param url     URL to which to post.
-     * @param content Map of parameters to post to a URL.
-     * @throws IOException if the data cannot be posted.
-     */
-    public void send(@NonNull Context context, @NonNull URL url, @NonNull Method method, @NonNull String content, @NonNull Type type) throws IOException {
-
-        final HttpURLConnection urlConnection = (HttpURLConnection) url.openConnection();
-
-        // Configure SSL
-        if (urlConnection instanceof HttpsURLConnection) {
-            try {
-                final HttpsURLConnection httpsUrlConnection = (HttpsURLConnection) urlConnection;
-
-                final String algorithm = TrustManagerFactory.getDefaultAlgorithm();
-                final TrustManagerFactory tmf = TrustManagerFactory.getInstance(algorithm);
-                final KeyStore keyStore = KeyStoreHelper.getKeyStore(context, config);
-
-                tmf.init(keyStore);
-
-                final SSLContext sslContext = SSLContext.getInstance("TLS");
-                sslContext.init(null, tmf.getTrustManagers(), null);
-
-                httpsUrlConnection.setSSLSocketFactory(sslContext.getSocketFactory());
-            } catch (GeneralSecurityException e) {
-                ACRA.log.e(LOG_TAG, "Could not configure SSL for ACRA request to " + url, e);
-            }
-        }
-
-        // Set Credentials
-        if (login != null && password != null) {
-            final String credentials = login + ':' + password;
-            final String encoded = new String(Base64.encode(credentials.getBytes(UTF8), Base64.NO_WRAP), UTF8);
-            urlConnection.setRequestProperty("Authorization", "Basic " + encoded);
-        }
-
-        urlConnection.setConnectTimeout(connectionTimeOut);
-        urlConnection.setReadTimeout(socketTimeOut);
-
-        // Set Headers
-        urlConnection.setRequestProperty("User-Agent", String.format("Android ACRA %1$s", BuildConfig.VERSION_NAME)); //sent ACRA version to server
-        urlConnection.setRequestProperty("Accept",
-                "text/html,application/xml,application/json,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5");
-        urlConnection.setRequestProperty("Content-Type", type.getContentType());
-
-        if (headers != null) {
-            for (final Map.Entry<String, String> header : headers.entrySet()) {
-                urlConnection.setRequestProperty(header.getKey(), header.getValue());
-            }
-        }
-
-        final byte[] contentAsBytes = content.getBytes(UTF8);
-
-        // write output - see http://developer.android.com/reference/java/net/HttpURLConnection.html
-        urlConnection.setRequestMethod(method.name());
-        urlConnection.setDoOutput(true);
-        urlConnection.setFixedLengthStreamingMode(contentAsBytes.length);
-
-        // Disable ConnectionPooling because otherwise OkHttp ConnectionPool will try to start a Thread on #connect
-        System.setProperty("http.keepAlive", "false");
-
-        urlConnection.connect();
-
-        final OutputStream outputStream = new BufferedOutputStream(urlConnection.getOutputStream());
-        try {
-            outputStream.write(contentAsBytes);
-            outputStream.flush();
-        } finally {
-            IOUtils.safeClose(outputStream);
-        }
-
-        if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Sending request to " + url);
-        if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, "Http " + method.name() + " content : ");
-        if (ACRA.DEV_LOGGING) ACRA.log.d(LOG_TAG, content);
-
-        final int responseCode = urlConnection.getResponseCode();
-        if (ACRA.DEV_LOGGING)
-            ACRA.log.d(LOG_TAG, "Request response : " + responseCode + " : " + urlConnection.getResponseMessage());
-        if ((responseCode >= HTTP_SUCCESS) && (responseCode < HTTP_REDIRECT)) {
-            // All is good
-            ACRA.log.i(LOG_TAG, "Request received by server");
-        } else if (responseCode == HTTP_UNAUTHORIZED) {
-            //401 means the server rejected the authentication. The request must not be repeated. Discard it.
-            //This probably means that nothing can be sent with this configuration, maybe ACRA should disable itself after it?
-            ACRA.log.w(LOG_TAG, "401: Login validation error on server - request will be discarded");
-        } else if (responseCode == HTTP_FORBIDDEN) {
-            // 403 is an explicit data validation refusal from the server. The request must not be repeated. Discard it.
-            ACRA.log.w(LOG_TAG, "403: Data validation error on server - request will be discarded");
-        } else if (responseCode == HTTP_METHOD_NOT_ALLOWED) {
-            //405 means the server doesn't allow this request method. The request must not be repeated. Discard it.
-            //This probably means that nothing can be sent with this configuration, maybe ACRA should disable itself after it?
-            ACRA.log.w(LOG_TAG, "405: Server rejected Http " + method + " - request will be discarded");
-        } else if (responseCode == HTTP_CONFLICT) {
-            // 409 means that the report has been received already. So we can discard it.
-            ACRA.log.w(LOG_TAG, "409: Server has already received this post - request will be discarded");
-        } else if ((responseCode >= HTTP_CLIENT_ERROR) && (responseCode < MAX_HTTP_CODE)) {
-            ACRA.log.w(LOG_TAG, "Could not send ACRA Post responseCode=" + responseCode + " message=" + urlConnection.getResponseMessage());
-            throw new IOException("Host returned error code " + responseCode);
-        } else {
-            ACRA.log.w(LOG_TAG, "Could not send ACRA Post - request will be discarded. responseCode=" + responseCode + " message=" + urlConnection.getResponseMessage());
-        }
-
-        urlConnection.disconnect();
-    }
-
-    /**
-     * Converts a Map of parameters into a URL encoded Sting.
-     *
-     * @param parameters Map of parameters to convert.
-     * @return URL encoded String representing the parameters.
-     * @throws UnsupportedEncodingException if one of the parameters couldn't be converted to UTF-8.
-     */
-    @NonNull
-    public static String getParamsAsFormString(@NonNull Map<?, ?> parameters) throws UnsupportedEncodingException {
-
-        final StringBuilder dataBfr = new StringBuilder();
-        for (final Map.Entry<?, ?> entry : parameters.entrySet()) {
-            if (dataBfr.length() != 0) {
-                dataBfr.append('&');
-            }
-            final Object preliminaryValue = entry.getValue();
-            final Object value = (preliminaryValue == null) ? "" : preliminaryValue;
-            dataBfr.append(URLEncoder.encode(entry.getKey().toString(), UTF8));
-            dataBfr.append('=');
-            dataBfr.append(URLEncoder.encode(value.toString(), UTF8));
-        }
-
-        return dataBfr.toString();
-    }
-}
diff --git a/src/main/java/org/acra/util/JSONReportBuilder.java b/src/main/java/org/acra/util/JSONReportBuilder.java
deleted file mode 100644
index c2129a30..00000000
--- a/src/main/java/org/acra/util/JSONReportBuilder.java
+++ /dev/null
@@ -1,237 +0,0 @@
-package org.acra.util;
-
-import android.support.annotation.NonNull;
-
-import org.acra.ACRA;
-import org.acra.ReportField;
-import org.acra.collector.CrashReportData;
-import org.json.JSONArray;
-import org.json.JSONException;
-import org.json.JSONObject;
-
-import java.io.BufferedReader;
-import java.io.IOException;
-import java.io.StringReader;
-import java.text.NumberFormat;
-import java.text.ParseException;
-import java.util.Locale;
-
-import static org.acra.ACRA.LOG_TAG;
-
-public final class JSONReportBuilder {
-    private JSONReportBuilder(){}
-    /**
-     * <p>
-     * Create a JSONObject containing the whole report data with the most
-     * detailed possible structure depth. Fields are not just converted to a
-     * single key=value pair. If a value can be decomposed into subobjects, it
-     * is done.
-     * </p>
-     *
-     * <p>
-     * For example, a String containing:
-     *
-     * <pre>
-     * some.key.name1=value1
-     * some.key.name2=value2
-     * some.other=value3
-     * any.other.key=value4
-     * key.without.value5
-     * </pre>
-     *
-     * is converted to
-     *
-     * <pre>
-     * {
-     *   some : {
-     *     key : {
-     *       name1 : "value1",
-     *       name2 : "value2"
-     *     },
-     *     other : "value3"
-     *   },
-     *   any : {
-     *     other : {
-     *       key : "value4"
-     *     }
-     *   }
-     *   key.without.value : true
-     * }
-     * </pre>
-     *
-     * </p>
-     *
-     * @param errorContent
-     *            The ACRA report data structure.
-     * @return A JSONObject containing all fields from the report converted to
-     *         JSON.
-     * @throws JSONReportException
-     */
-    @NonNull
-    public static JSONObject buildJSONReport(@NonNull CrashReportData errorContent) throws JSONReportException {
-        final JSONObject jsonReport = new JSONObject();
-        BufferedReader reader = null;
-        for (ReportField key : errorContent.keySet()) {
-            try {
-                // Each ReportField can be identified as a substructure and not
-                // a simple String value.
-                if (key.containsKeyValuePairs()) {
-                    final JSONObject subObject = new JSONObject();
-                    final String strContent = errorContent.getProperty(key);
-                    reader = new BufferedReader(new StringReader(strContent), 1024); //TODO: 1024 should be a constant. Use ACRAConstants.DEFAULT_BUFFER_SIZE_IN_BYTES ?
-                    String line;
-                    try {
-                        while ((line = reader.readLine()) != null) {
-                            addJSONFromProperty(subObject, line);
-                        }
-                    } catch (IOException e) {
-                        ACRA.log.w(LOG_TAG, "Error while converting " + key.name() + " to JSON.", e);
-                    }
-                    jsonReport.accumulate(key.name(), subObject);
-                } else {
-                    // This field is a simple String value, store it as it is
-                    jsonReport.accumulate(key.name(), guessType(errorContent.getProperty(key)));
-                }
-            } catch (JSONException e) {
-                throw new JSONReportException("Could not create JSON object for key " + key, e);
-            } finally {
-            	IOUtils.safeClose(reader);
-            }
-        }
-        return jsonReport;
-    }
-
-    /**
-     * <p>
-     * Given a String containing key=value pairs on each line, adds a detailed
-     * JSON structure to an existing JSONObject, reusing intermediate subobjects
-     * if available when keys are composed of a succession of subkeys delimited
-     * by dots.
-     * </p>
-     *
-     * <p>
-     * For example, adding the string "metrics.xdpi=160.0" to an object
-     * containing
-     *
-     * <pre>
-     * {
-     *   "metrics" : { "ydpi" : "160.0"},
-     *   "width" : "320",
-     *   "height" : "533"
-     * }
-     * </pre>
-     *
-     * results in
-     *
-     * <pre>
-     * {
-     *   "metrics" : { "ydpi" : "160.0", "xdpi" : "160.0"},
-     *   "width" : "320",
-     *   "height" : "533"
-     * }
-     * </pre>
-     *
-     * </p>
-     *
-     * @param destination
-     *            The JSONObject where the data must be inserted.
-     * @param propertyString
-     *            A string containing "some.key.name=Any value"
-     * @throws JSONException
-     */
-    private static void addJSONFromProperty(@NonNull JSONObject destination, @NonNull String propertyString) throws JSONException {
-        final int equalsIndex = propertyString.indexOf('=');
-        if (equalsIndex > 0) {
-            final String currentKey = propertyString.substring(0, equalsIndex).trim();
-            final String currentValue = propertyString.substring(equalsIndex + 1).trim();
-            Object value = guessType(currentValue);
-            if(value instanceof String) {
-                value = ((String) value).replaceAll("\\\\n","\n");
-            }
-            final String[] splitKey = currentKey.split("\\.");
-            if (splitKey.length > 1) {
-                addJSONSubTree(destination, splitKey, value);
-            } else {
-                destination.accumulate(currentKey, value);
-            }
-        } else {
-            destination.put(propertyString.trim(), true);
-        }
-    }
-
-    @NonNull
-    private static Object guessType(@NonNull String value) {
-        if ("true".equalsIgnoreCase(value))
-            return true;
-        if ("false".equalsIgnoreCase(value))
-            return false;
-
-        if (value.matches("(?:^|\\s)([1-9](?:\\d*|(?:\\d{0,2})(?:,\\d{3})*)(?:\\.\\d*[1-9])?|0?\\.\\d*[1-9]|0)(?:\\s|$)")) {
-            final NumberFormat format = NumberFormat.getInstance(Locale.US);
-            try {
-                return format.parse(value);
-            } catch (ParseException ignored) {
-                // never mind
-            }
-        }
-        return value;
-    }
-
-    /**
-     * Deep insert a value inside a JSONObject, reusing existing subobjects when
-     * available or creating them when necessary.
-     *
-     * @param destination
-     *            The JSONObject which receives the additional subitem.
-     * @param keys
-     *            An array containing the path keys leading to where the value
-     *            has to be inserted.
-     * @param value
-     *            The value to be inserted.
-     * @throws JSONException
-     */
-    private static void addJSONSubTree(@NonNull JSONObject destination, @NonNull String[] keys, Object value) throws JSONException {
-        for (int i = 0; i < keys.length; i++) {
-            final String subKey = keys[i];
-            if (i < keys.length - 1) {
-                JSONObject intermediate = null;
-                if (destination.isNull(subKey)) {
-                    intermediate = new JSONObject();
-                    destination.accumulate(subKey, intermediate);
-                } else {
-                    final Object target = destination.get(subKey);
-                    if (target instanceof JSONObject) {
-                        intermediate = destination.getJSONObject(subKey);
-                    } else if (target instanceof JSONArray) {
-                        // Unexpected JSONArray, see issue #186
-                        final JSONArray wildCard = destination.getJSONArray(subKey);
-                        for (int j = 0; j < wildCard.length(); j++) {
-                            intermediate = wildCard.optJSONObject(j);
-                            if (intermediate != null) {
-                                // Found the original JSONObject we were looking for
-                                break;
-                            }
-                        }
-                    }
-
-                    if (intermediate == null) {
-                        ACRA.log.w(LOG_TAG, "Unknown json subtree type, see issue #186");
-                        // We should never get here, but if we do, drop this value to still send the report
-                        return;
-                    }
-                }
-                destination = intermediate;
-            } else {
-                destination.accumulate(subKey, value);
-            }
-        }
-    }
-
-    public static class JSONReportException extends Exception {
-        private static final long serialVersionUID = -694684023635442219L;
-
-        public JSONReportException(String message, Throwable e) {
-            super(message, e);
-        }
-    }
-}
diff --git a/src/main/java/org/acra/util/ReportUtils.java b/src/main/java/org/acra/util/ReportUtils.java
deleted file mode 100644
index 7579e74b..00000000
--- a/src/main/java/org/acra/util/ReportUtils.java
+++ /dev/null
@@ -1,137 +0,0 @@
-package org.acra.util;
-
-import android.content.Context;
-import android.os.Build;
-import android.os.Environment;
-import android.os.StatFs;
-import android.support.annotation.NonNull;
-import android.support.annotation.Nullable;
-import android.telephony.TelephonyManager;
-import org.acra.ACRA;
-import org.acra.ACRAConstants;
-
-import java.io.File;
-import java.net.InetAddress;
-import java.net.NetworkInterface;
-import java.net.SocketException;
-import java.text.SimpleDateFormat;
-import java.util.Calendar;
-import java.util.Enumeration;
-import java.util.Locale;
-
-import static org.acra.ACRA.LOG_TAG;
-
-/**
- * Responsible for providing base utilities used when constructing the report.
- *
- * @author William Ferguson
- * @since 4.3.0
- */
-public final class ReportUtils {
-    private ReportUtils(){}
-
-    /**
-     * Calculates the free memory of the device. This is based on an inspection of the filesystem, which in android
-     * devices is stored in RAM.
-     *
-     * @return Number of bytes available.
-     */
-    public static long getAvailableInternalMemorySize() {
-        final File path = Environment.getDataDirectory();
-        final StatFs stat = new StatFs(path.getPath());
-        final long blockSize;
-        final long availableBlocks;
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {
-            blockSize = stat.getBlockSizeLong();
-            availableBlocks = stat.getAvailableBlocksLong();
-        } else {
-            //noinspection deprecation
-            blockSize = stat.getBlockSize();
-            //noinspection deprecation
-            availableBlocks = stat.getAvailableBlocks();
-        }
-        return availableBlocks * blockSize;
-    }
-
-    /**
-     * Calculates the total memory of the device. This is based on an inspection of the filesystem, which in android
-     * devices is stored in RAM.
-     *
-     * @return Total number of bytes.
-     */
-    public static long getTotalInternalMemorySize() {
-        final File path = Environment.getDataDirectory();
-        final StatFs stat = new StatFs(path.getPath());
-        final long blockSize;
-        final long totalBlocks;
-        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {
-            blockSize = stat.getBlockSizeLong();
-            totalBlocks = stat.getBlockCountLong();
-        }
-        else {
-            //noinspection deprecation
-            blockSize = stat.getBlockSize();
-            //noinspection deprecation
-            totalBlocks = stat.getBlockCount();
-        }
-        return totalBlocks * blockSize;
-    }
-
-    /**
-     * Returns the DeviceId according to the TelephonyManager.
-     *
-     * @param context Context for the application being reported.
-     * @return Returns the DeviceId according to the TelephonyManager or null if there is no TelephonyManager.
-     */
-    @Nullable
-    public static String getDeviceId(@NonNull Context context) {
-        try {
-            final TelephonyManager tm = (TelephonyManager) context.getSystemService(Context.TELEPHONY_SERVICE);
-            return tm.getDeviceId();
-        } catch (RuntimeException e) {
-            ACRA.log.w(LOG_TAG, "Couldn't retrieve DeviceId for : " + context.getPackageName(), e);
-            return null;
-        }
-    }
-
-    @NonNull
-    public static String getApplicationFilePath(@NonNull Context context) {
-        final File filesDir = context.getFilesDir();
-        if (filesDir != null) {
-            return filesDir.getAbsolutePath();
-        }
-
-        ACRA.log.w(LOG_TAG, "Couldn't retrieve ApplicationFilePath for : " + context.getPackageName());
-        return "Couldn't retrieve ApplicationFilePath";
-    }
-
-    @NonNull
-    public static String getLocalIpAddress() {
-        final StringBuilder result = new StringBuilder();
-        boolean first = true;
-        try {
-            for (Enumeration<NetworkInterface> en = NetworkInterface.getNetworkInterfaces(); en.hasMoreElements(); ) {
-                final NetworkInterface intf = en.nextElement();
-                for (Enumeration<InetAddress> enumIpAddr = intf.getInetAddresses(); enumIpAddr.hasMoreElements(); ) {
-                    final InetAddress inetAddress = enumIpAddr.nextElement();
-                    if (!inetAddress.isLoopbackAddress()) {
-                        if (!first) {
-                            result.append('\n');
-                        }
-                        result.append(inetAddress.getHostAddress());
-                        first = false;
-                    }
-                }
-            }
-        } catch (SocketException ex) {
-            ACRA.log.w(LOG_TAG, ex.toString());
-        }
-        return result.toString();
-    }
-
-    @NonNull
-    public static String getTimeString(@NonNull Calendar time) {
-        final SimpleDateFormat format = new SimpleDateFormat(ACRAConstants.DATE_TIME_FORMAT_STRING, Locale.ENGLISH);
-        return format.format(time.getTimeInMillis());
-    }
-}
diff --git a/src/test/java/org/acra/log/NonAndroidLog.java b/src/test/java/org/acra/log/NonAndroidLog.java
deleted file mode 100644
index 28f3f601..00000000
--- a/src/test/java/org/acra/log/NonAndroidLog.java
+++ /dev/null
@@ -1,144 +0,0 @@
-package org.acra.log;
-
-
-import android.support.annotation.NonNull;
-
-import java.io.PrintStream;
-import java.io.PrintWriter;
-import java.io.StringWriter;
-import java.io.Writer;
-
-/**
- * Responsible for delegating calls to the Android logging system.
- * <p/>
- * User: William
- * Date: 17/07/11
- * Time: 11:06 AM
- */
-public final class NonAndroidLog implements ACRALog {
-
-    // Not that it really matters but these levels match those used in Android.util.Log
-    public static final int VERBOSE = 2;
-    public static final int DEBUG = 3;
-    public static final int INFO = 4;
-    public static final int WARN = 5;
-    public static final int ERROR = 6;
-    //public static final int ASSERT = 7;
-
-    private int logLevel = VERBOSE;
-    private final PrintStream out = System.out;
-
-    /**
-     * Any log that is output at level less that the supplied logLevel will be ignored.
-     * <p>
-     *     The default log level is {@link NonAndroidLog#VERBOSE}
-     * </p>
-     *
-     * @param logLevel LogLevel to use to filter log output.
-     */
-    public void setLogLevel(int logLevel) {
-        this.logLevel = logLevel;
-    }
-
-    public int v(String tag, String msg) {
-        if (logLevel <= VERBOSE) {
-            out.println(tag + " : " + msg);
-        }
-        return 0;
-    }
-
-    public int v(String tag, String msg, @NonNull Throwable tr) {
-        if (logLevel <= VERBOSE) {
-            out.println(tag + " : " + msg);
-            tr.printStackTrace(out);
-        }
-        return 0;
-    }
-
-    public int d(String tag, String msg) {
-        if (logLevel <= DEBUG) {
-            out.println(tag + " : " + msg);
-        }
-        return 0;
-    }
-
-    public int d(String tag, String msg, @NonNull Throwable tr) {
-        if (logLevel <= DEBUG) {
-            out.println(tag + " : " + msg);
-            tr.printStackTrace(out);
-        }
-        return 0;
-    }
-
-    public int i(String tag, String msg) {
-        if (logLevel <= INFO) {
-            out.println(tag + " : " + msg);
-        }
-        return 0;
-    }
-
-    public int i(String tag, String msg, @NonNull Throwable tr) {
-        if (logLevel <= INFO) {
-            out.println(tag + " : " + msg);
-            tr.printStackTrace(out);
-        }
-        return 0;
-    }
-
-    public int w(String tag, String msg) {
-        if (logLevel <= WARN) {
-            out.println(tag + " : " + msg);
-        }
-        return 0;
-    }
-
-    public int w(String tag, String msg, @NonNull Throwable tr) {
-        if (logLevel <= WARN) {
-            out.println(tag + " : " + msg);
-            tr.printStackTrace(out);
-        }
-        return 0;
-    }
-
-    //public native  boolean isLoggable(java.lang.String tag, int level);
-    public int w(String tag, @NonNull Throwable tr) {
-        if (logLevel <= WARN) {
-            out.println(tag + " : ");
-            tr.printStackTrace(out);
-        }
-        return 0;
-    }
-
-    public int e(String tag, String msg) {
-        if (logLevel <= ERROR) {
-            out.println(tag + " : " + msg);
-        }
-        return 0;
-    }
-
-    public int e(String tag, String msg, @NonNull Throwable tr) {
-        if (logLevel <= ERROR) {
-            out.println(tag + " : " + msg);
-            tr.printStackTrace(out);
-        }
-        return 0;
-    }
-
-    public String getStackTraceString(Throwable tr) {
-        final Writer result = new StringWriter();
-        final PrintWriter printWriter = new PrintWriter(result);
-
-        // If the exception was thrown in a background thread inside
-        // AsyncTask, then the actual exception can be found with getCause
-        Throwable cause = tr;
-        while (cause != null) {
-            cause.printStackTrace(printWriter);
-            cause = cause.getCause();
-        }
-        final String stacktraceAsString = result.toString();
-        printWriter.close();
-
-        return stacktraceAsString;
-    }
-    //public native  int println(int priority, java.lang.String tag, java.lang.String msg);
-}
