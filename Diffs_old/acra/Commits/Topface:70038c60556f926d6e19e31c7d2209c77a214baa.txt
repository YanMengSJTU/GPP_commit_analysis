diff --git a/README.md b/README.md
index 09a73420..a8000ffc 100644
--- a/README.md
+++ b/README.md
@@ -1,4 +1,4 @@
-<a href='http://www.pledgie.com/campaigns/18789'><img alt='Click here to lend your support to: ACRA - Application Crash Reports for Android and make a donation at www.pledgie.com !' src='http://www.pledgie.com/campaigns/18789.png?skin_name=chrome' border='0' /></a>
+[![Click here to lend your support to: ACRA - Application Crash Reports for Android and make a donation at www.pledgie.com !](https://pledgie.com/campaigns/18789.png?skin_name=chrome)](http://www.pledgie.com/campaigns/18789) [![Flattr this project](http://api.flattr.com/button/flattr-badge-large.png)](https://flattr.com/submit/auto?user_id=kevingaudin&url=http://acra.ch&title=ACRA%20-%20Application%20Crash%20Reports%20for%20Android&language=&tags=opensource%2Candroid&category=software&description=ACRA%20%28Application%20Crash%20Reports%20for%20Android%29%20is%20an%20open%20source%20android%20library%20for%20developers%2C%20enabling%20their%20apps%20to%20send%20detailed%20reports%20when%20they%20crash.)
 
 Please tell us how you use ACRA
 ===============================
@@ -16,31 +16,61 @@ What is ACRA ?
 
 ACRA is a library enabling Android Application to automatically post their crash reports to a GoogleDoc form. It is targetted to android applications developers to help them get data from their applications when they crash or behave erroneously.
 
-See [BasicSetup](acra/wiki/BasicSetup) for a step-by-step installation and usage guide.
+See [BasicSetup](http://github.com/ACRA/acra/wiki/BasicSetup) for a step-by-step installation and usage guide.
 
 A crash reporting feature for android apps is native since Android 2.2 (FroYo) but only available through the official Android Market (and with limited data). ACRA is a great help for Android developers :
 
-  * [developer configurable user interaction](acra/wiki/AdvancedUsage#wiki-User_Interaction): silent reports, Toast notification, status bar notification + dialog or direct dialog
+  * [developer configurable user interaction](http://github.com/ACRA/acra/wiki/AdvancedUsage#wiki-User_Interaction): silent reports, Toast notification, status bar notification + dialog or direct dialog
   * usable with ALL versions of android (compiled with 1.5, not tested on 1.0/1.1 but might work... but who does really care ?) and capable of retrieving data from latest versions through reflection.
-  * more [detailed crash reports](acra/wiki/ReportContent) about the device running the app than what is displayed in the Android Market developer console error reports
-  * you can [add your own variables content or debug traces](acra/wiki/AdvancedUsage#wiki-Adding_your_own_variables_content_or_traces_in_crash_reports) to the reports
-  * you can send [error reports even if the application doesn't crash](acra/wiki/AdvancedUsage#wiki-Sending_reports_for_caught_exceptions)
+  * more [detailed crash reports](http://github.com/ACRA/acra/wiki/ReportContent) about the device running the app than what is displayed in the Android Market developer console error reports
+  * you can [add your own variables content or debug traces](http://github.com/ACRA/acra/wiki/AdvancedUsage#wiki-Adding_your_own_variables_content_or_traces_in_crash_reports) to the reports
+  * you can send [error reports even if the application doesn't crash](http://github.com/ACRA/acra/wiki/AdvancedUsage#wiki-Sending_reports_for_caught_exceptions)
   * works for any application even if not delivered through Google's Android Market => great for devices/regions where the Android Market is not available, beta releases or for enterprise private apps
   * if there is no network coverage, reports are kept and sent on a later application restart
-  * can be used with [your own self-hosted report receiver script](acra/wiki/AdvancedUsage#wiki-Reports_destination)
+  * can be used with [your own self-hosted report receiver script](http://github.com/ACRA/acra/wiki/AdvancedUsage#wiki-Reports_destination)
   * google doc reports can be shared with a whole development team. Other benefits from the Google Docs platform are still to be investigated (stats, macros...)
 
 ACRA's notification systems are clean. If a crash occurs, your application does not add user notifications over existing system's crash notifications or reporting features. If you use the Toast, Status bar notification or direct dialog modes, the "force close" dialog is not displayed anymore and devices where the system native reporting feature is enabled do not offer the user to send an additional report.
 
 The user is notified of an error only once, and you might enhance the percieved quality of your application by defining your own texts in the notifications/dialogs.
 
-Please do not hesitate to open defects/enhancements requests in [the issue tracker](acra/issues).
+Please do not hesitate to open defects/enhancements requests in [the issue tracker](http://github.com/ACRA/acra/issues).
+
+Change Log
+==========
+
+For a complete changelog, please see the [ChangeLog page](http://github.com/ACRA/acra/wiki/ChangeLog) in the Wiki.
+
+ACRA v4.5 - enabling the future
+===============================
+
+**ACRA 4.5.0 is now the official stable version.**
+
+https://oss.sonatype.org/content/groups/public/ch/acra/acra/4.5.0/acra-4.5.0.zip
+(also available in Maven Central repository)
+
+The summarized changelog is here: https://github.com/ACRA/acra/wiki/ChangeLog
+
+Included in this release (summarized summary):
+- many bugfixes
+- no more exception thrown in ACRA.init() if called twice (widget developers will enjoy it)
+- HttpPostSender is renamed HttpSender and can send PUT and POST requests with data encoded as FORM (same as before) and JSON. The JSON mode enables a fully structured JSON tree to be sent to your backend.
+- Display configuration details can benefit of the newly introduced DisplayManager from Android 4.2
+- CrashReportDialog is now using AlertDialog.Builder to ensure that dialogs are created using the UX guidelines enforced by the android version. (you should remove its theme attribute in your manifest to benefit from the default theme of the device)
+- Ability to set Http Headers with `ACRAConfig.setHttpHeaders()`
+
+The most important part of this release is to enable the usage of Acralyzer (http://github.com/ACRA/acralyzer) which will be the default backend in future release.
+
+Next release will be 5.0 with important changes in mind:
+- no more default support of old Google Forms
+- use JSON as the default report storage and management mode (current implementation transforms flat data into JSON just before sending it)
+
+New ideas about the project are always welcome, you can open feature requests in the Github issue tracker.
+
 
 ACRA v4.4 - enforcing security
 ==============================
 
-**ACRA 4.4.0 is now the official stable version.**
-
 ACRA has been named in [this report](http://www.cs.utexas.edu/~shmat/shmat_ccs12.pdf) as a potential cause of SSL vulnerability for all android apps using it.
 
 The truth is that, in order to let devs use alternative backends over an SSL connection with self-signed certificates, I chose to disable certificate validation in earlier versions of the lib. But this was done only on the scope of ACRA reports senders. Using ACRA did not imply that your app became unsafe for all its SSL communications.
@@ -99,4 +129,8 @@ And after that?
 
 Now that ACRA is stabilized on the device side (there shouldn't be much more data required...), the effort should be placed on crash data analysis and reports management tools for developers.
 
-You can look at [some contributions](acra/wiki/Contribs) that have already been published. Most of them are work in progress, so if you feel like joining the effort, please do!
+You can look at [some contributions](http://github.com/ACRA/acra/wiki/Contribs) that have already been published. Most of them are work in progress, so if you feel like joining the effort, please do!
+
+[Acralyzer](http://github.com/ACRA/acralyzer) will soon be the official backend for reports storage and analysis. It is a free and open source modern web app, based on a full open stack and using advanced
+technology like CouchDB (JSON document storage with a RESTful API and Map/Reduce querying), AngularJS (one of the most advanced client-side JS frameworks), D3JS (for data visualisation)... If you are interested
+in webapps development, this project can become your playground too ;-)
diff --git a/pom.xml b/pom.xml
index 6e6ee52d..6e4b5dcd 100644
--- a/pom.xml
+++ b/pom.xml
@@ -7,7 +7,7 @@
     </parent>
 	<groupId>ch.acra</groupId>
 	<artifactId>acra</artifactId>
-	<version>4.5.0-alpha-1</version>
+	<version>5.0.0-SNAPSHOT</version>
 
 	<name>Application Crash Report for Android</name>
 
diff --git a/src/main/java/org/acra/ACRAConfiguration.java b/src/main/java/org/acra/ACRAConfiguration.java
index b35446c7..d1afbb50 100644
--- a/src/main/java/org/acra/ACRAConfiguration.java
+++ b/src/main/java/org/acra/ACRAConfiguration.java
@@ -15,12 +15,6 @@
  */
 package org.acra;
 
-import org.acra.annotation.ReportsCrashes;
-import org.acra.sender.HttpSender.Method;
-import org.acra.sender.HttpSender.Type;
-
-import java.lang.annotation.Annotation;
-
 import static org.acra.ACRAConstants.DEFAULT_APPLICATION_LOGFILE;
 import static org.acra.ACRAConstants.DEFAULT_APPLICATION_LOGFILE_LINES;
 import static org.acra.ACRAConstants.DEFAULT_CONNECTION_TIMEOUT;
@@ -43,6 +37,14 @@
 import static org.acra.ACRAConstants.DEFAULT_STRING_VALUE;
 import static org.acra.ACRAConstants.NULL_VALUE;
 
+import java.lang.annotation.Annotation;
+import java.util.Map;
+
+import org.acra.annotation.ReportsCrashes;
+import org.acra.sender.HttpSender;
+import org.acra.sender.HttpSender.Method;
+import org.acra.sender.HttpSender.Type;
+
 /**
  * This class is to be used if you need to apply dynamic settings. This is
  * needed for example when using ACRA in an Android Library Project since ADT
@@ -100,6 +102,29 @@
     private Boolean mDisableSSLCertValidation = null;
     private Method mHttpMethod = null;
     private Type mReportType = null;
+    private Map<String, String> mHttpHeaders;
+
+    /**
+     * Set custom HTTP headers to be sent by the provided {@link HttpSender}.
+     * This should be used also by third party senders.
+     * 
+     * @param headers
+     *            A map associating HTTP header names to their values.
+     */
+    public void setHttpHeaders(Map<String, String> headers) {
+        this.mHttpHeaders = headers;
+    }
+
+    /**
+     * Retrieve HTTP headers defined by the application developer. These should
+     * be added to requests sent by any third-party sender (over HTTP of
+     * course).
+     * 
+     * @return A map associating http header names to their values.
+     */
+    public Map<String, String> getHttpHeaders() {
+        return mHttpHeaders;
+    }
 
     /**
      * @param additionalDropboxTags
diff --git a/src/main/java/org/acra/ACRAConstants.java b/src/main/java/org/acra/ACRAConstants.java
index 627822b7..3b3a9507 100644
--- a/src/main/java/org/acra/ACRAConstants.java
+++ b/src/main/java/org/acra/ACRAConstants.java
@@ -80,7 +80,12 @@
      * latest generated report file in order to be able to associate the user
      * comment.
      */
-    static final String EXTRA_REPORT_FILE_NAME = "REPORT_FILE_NAME";
+    protected static final String EXTRA_REPORT_FILE_NAME = "REPORT_FILE_NAME";
+    /**
+     * Set this extra to true to force the deletion of reports by the
+     * {@link CrashReportDialog} activity.
+     */
+    protected static final String EXTRA_FORCE_CANCEL = "FORCE_CANCEL";
     /**
      * This is the identifier (value = 666) use for the status bar notification
      * issued when crashes occur.
@@ -160,5 +165,4 @@
             DISPLAY, USER_COMMENT, USER_EMAIL, USER_APP_START_DATE, USER_CRASH_DATE, DUMPSYS_MEMINFO, LOGCAT,
             INSTALLATION_ID, DEVICE_FEATURES, ENVIRONMENT, SHARED_PREFERENCES, SETTINGS_SYSTEM, SETTINGS_SECURE,
             SETTINGS_GLOBAL };
-
 }
diff --git a/src/main/java/org/acra/CrashReportDialog.java b/src/main/java/org/acra/CrashReportDialog.java
index 43303313..27b8a1d2 100644
--- a/src/main/java/org/acra/CrashReportDialog.java
+++ b/src/main/java/org/acra/CrashReportDialog.java
@@ -1,19 +1,3 @@
-/*
- *  Copyright 2010 Emmanuel Astier & Kevin Gaudin
- *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-
 package org.acra;
 
 import static org.acra.ACRA.LOG_TAG;
@@ -26,17 +10,17 @@
 import org.acra.util.ToastSender;
 
 import android.app.Activity;
+import android.app.AlertDialog;
 import android.app.NotificationManager;
+import android.content.DialogInterface;
+import android.content.DialogInterface.OnDismissListener;
 import android.content.SharedPreferences;
 import android.content.SharedPreferences.Editor;
 import android.os.Bundle;
 import android.text.InputType;
 import android.util.Log;
-import android.view.KeyEvent;
 import android.view.View;
 import android.view.ViewGroup.LayoutParams;
-import android.view.Window;
-import android.widget.Button;
 import android.widget.EditText;
 import android.widget.LinearLayout;
 import android.widget.ScrollView;
@@ -45,51 +29,72 @@
 
 /**
  * This is the dialog Activity used by ACRA to get authorization from the user
- * to send reports. Requires android:theme="@android:style/Theme.Dialog" and
- * android:launchMode="singleInstance" in your AndroidManifest to work properly.
- * 
- * @author Kevin Gaudin
- */
-public final class CrashReportDialog extends Activity {
-
+ * to send reports. Requires android:launchMode="singleInstance" in your
+ * AndroidManifest to work properly.
+ **/
+public class CrashReportDialog extends Activity implements DialogInterface.OnClickListener, OnDismissListener {
     private static final String STATE_EMAIL = "email";
     private static final String STATE_COMMENT = "comment";
     private SharedPreferences prefs;
     private EditText userComment;
     private EditText userEmail;
     String mReportFileName;
+    AlertDialog mDialog;
 
-    /*
-     * (non-Javadoc)
-     * 
-     * @see android.app.Activity#onCreate(android.os.Bundle)
-     */
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
+        boolean forceCancel = getIntent().getBooleanExtra(ACRAConstants.EXTRA_FORCE_CANCEL, false);
+        if(forceCancel) {
+            ACRA.log.d(ACRA.LOG_TAG, "Forced reports deletion.");
+            cancelReports();
+            finish();
+            return;
+        }
 
         mReportFileName = getIntent().getStringExtra(ACRAConstants.EXTRA_REPORT_FILE_NAME);
         Log.d(LOG_TAG, "Opening CrashReportDialog for " + mReportFileName);
         if (mReportFileName == null) {
             finish();
         }
-        requestWindowFeature(Window.FEATURE_LEFT_ICON);
+        AlertDialog.Builder dialogBuilder = new AlertDialog.Builder(this);
+        int resourceId = ACRA.getConfig().resDialogTitle();
+        if(resourceId != 0) {
+            dialogBuilder.setTitle(resourceId);
+        }
+        resourceId = ACRA.getConfig().resDialogIcon();
+        if(resourceId != 0) {
+            dialogBuilder.setIcon(resourceId);
+        }
+        dialogBuilder.setView(buildCustomView(savedInstanceState));
+        dialogBuilder.setPositiveButton(android.R.string.ok, CrashReportDialog.this);
+        dialogBuilder.setNegativeButton(android.R.string.cancel, CrashReportDialog.this);
+        cancelNotification();
+        mDialog = dialogBuilder.create();
+        mDialog.setCanceledOnTouchOutside(false);
+        mDialog.setOnDismissListener(this);
+        mDialog.show();
+    }
 
+    private View buildCustomView(Bundle savedInstanceState) {
         final LinearLayout root = new LinearLayout(this);
         root.setOrientation(LinearLayout.VERTICAL);
         root.setPadding(10, 10, 10, 10);
-        root.setLayoutParams(new LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
+        root.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.WRAP_CONTENT));
         root.setFocusable(true);
         root.setFocusableInTouchMode(true);
 
         final ScrollView scroll = new ScrollView(this);
-        root.addView(scroll, new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.FILL_PARENT, 1.0f));
+        root.addView(scroll, new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT, 1.0f));
         final LinearLayout scrollable = new LinearLayout(this);
         scrollable.setOrientation(LinearLayout.VERTICAL);
         scroll.addView(scrollable);
 
         final TextView text = new TextView(this);
-        text.setText(getText(ACRA.getConfig().resDialogText()));
+        final int dialogTextId = ACRA.getConfig().resDialogText();
+        if (dialogTextId != 0) {
+            text.setText(getText(dialogTextId));
+        }
         scrollable.addView(text);
 
         // Add an optional prompt for user comments
@@ -99,8 +104,8 @@ protected void onCreate(Bundle savedInstanceState) {
             label.setText(getText(commentPromptId));
 
             label.setPadding(label.getPaddingLeft(), 10, label.getPaddingRight(), label.getPaddingBottom());
-            scrollable.addView(label,
-                    new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
+            scrollable.addView(label, new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,
+                    LayoutParams.WRAP_CONTENT));
 
             userComment = new EditText(this);
             userComment.setLines(2);
@@ -129,7 +134,7 @@ protected void onCreate(Bundle savedInstanceState) {
             prefs = getSharedPreferences(ACRA.getConfig().sharedPreferencesName(), ACRA.getConfig()
                     .sharedPreferencesMode());
             String savedValue = null;
-            if(savedInstanceState != null) {
+            if (savedInstanceState != null) {
                 savedValue = savedInstanceState.getString(STATE_EMAIL);
             }
             if (savedValue != null) {
@@ -137,92 +142,69 @@ protected void onCreate(Bundle savedInstanceState) {
             } else {
                 userEmail.setText(prefs.getString(ACRA.PREF_USER_EMAIL_ADDRESS, ""));
             }
-
             scrollable.addView(userEmail);
         }
 
-        final LinearLayout buttons = new LinearLayout(this);
-        buttons.setLayoutParams(new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
-        buttons.setPadding(buttons.getPaddingLeft(), 10, buttons.getPaddingRight(), buttons.getPaddingBottom());
-
-        final Button yes = new Button(this);
-        yes.setText(android.R.string.yes);
-        yes.setOnClickListener(new View.OnClickListener() {
-
-            @Override
-            public void onClick(View v) {
-                // Retrieve user comment
-                final String comment = userComment != null ? userComment.getText().toString() : "";
-
-                // Store the user email
-                final String usrEmail;
-                if (prefs != null && userEmail != null) {
-                    usrEmail = userEmail.getText().toString();
-                    final Editor prefEditor = prefs.edit();
-                    prefEditor.putString(ACRA.PREF_USER_EMAIL_ADDRESS, usrEmail);
-                    prefEditor.commit();
-                } else {
-                    usrEmail = "";
-                }
-
-                final CrashReportPersister persister = new CrashReportPersister(getApplicationContext());
-                try {
-                    Log.d(LOG_TAG, "Add user comment to " + mReportFileName);
-                    final CrashReportData crashData = persister.load(mReportFileName);
-                    crashData.put(USER_COMMENT, comment);
-                    crashData.put(USER_EMAIL, usrEmail);
-                    persister.store(crashData, mReportFileName);
-                } catch (IOException e) {
-                    Log.w(LOG_TAG, "User comment not added: ", e);
-                }
-
-                // Start the report sending task
-                Log.v(ACRA.LOG_TAG, "About to start SenderWorker from CrashReportDialog");
-                ACRA.getErrorReporter().startSendingReports(false, true);
-
-                // Optional Toast to thank the user
-                final int toastId = ACRA.getConfig().resDialogOkToast();
-                if (toastId != 0) {
-                    ToastSender.sendToast(getApplicationContext(), toastId, Toast.LENGTH_LONG);
-                }
-                finish();
-            }
-
-        });
-        buttons.addView(yes, new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT, 1.0f));
-        final Button no = new Button(this);
-        no.setText(android.R.string.no);
-        no.setOnClickListener(new View.OnClickListener() {
+        return root;
+    }
 
-            @Override
-            public void onClick(View v) {
-                // Let's delete all non approved reports. We keep approved and
-                // silent reports.
-                ACRA.getErrorReporter().deletePendingNonApprovedReports(false);
-                finish();
-            }
+    /**
+     * Disable the notification in the Status Bar.
+     */
+    protected void cancelNotification() {
+        final NotificationManager notificationManager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);
+        notificationManager.cancel(ACRAConstants.NOTIF_CRASH_ID);
+    }
 
-        });
-        buttons.addView(no, new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT, 1.0f));
-        root.addView(buttons, new LinearLayout.LayoutParams(LayoutParams.FILL_PARENT, LayoutParams.WRAP_CONTENT));
+    @Override
+    public void onClick(DialogInterface dialog, int which) {
+        if (which == DialogInterface.BUTTON_POSITIVE)
+            sendCrash();
+        else {
+            cancelReports();
+        }
+        finish();
+    }
 
-        setContentView(root);
+    private void cancelReports() {
+        ACRA.getErrorReporter().deletePendingNonApprovedReports(false);
+    }
 
-        final int resTitle = ACRA.getConfig().resDialogTitle();
-        if (resTitle != 0) {
-            setTitle(resTitle);
+    private void sendCrash() {
+        // Retrieve user comment
+        final String comment = userComment != null ? userComment.getText().toString() : "";
+
+        // Store the user email
+        final String usrEmail;
+        if (prefs != null && userEmail != null) {
+            usrEmail = userEmail.getText().toString();
+            final Editor prefEditor = prefs.edit();
+            prefEditor.putString(ACRA.PREF_USER_EMAIL_ADDRESS, usrEmail);
+            prefEditor.commit();
+        } else {
+            usrEmail = "";
         }
 
-        getWindow().setFeatureDrawableResource(Window.FEATURE_LEFT_ICON, ACRA.getConfig().resDialogIcon());
+        final CrashReportPersister persister = new CrashReportPersister(getApplicationContext());
+        try {
+            Log.d(LOG_TAG, "Add user comment to " + mReportFileName);
+            final CrashReportData crashData = persister.load(mReportFileName);
+            crashData.put(USER_COMMENT, comment);
+            crashData.put(USER_EMAIL, usrEmail);
+            persister.store(crashData, mReportFileName);
+        } catch (IOException e) {
+            Log.w(LOG_TAG, "User comment not added: ", e);
+        }
 
-        cancelNotification();
+        // Start the report sending task
+        Log.v(ACRA.LOG_TAG, "About to start SenderWorker from CrashReportDialog");
+        ACRA.getErrorReporter().startSendingReports(false, true);
 
-        scroll.post(new Runnable() {
-            @Override
-            public void run() {
-                scroll.scrollTo(0, 0);
-            }
-        });
+        // Optional Toast to thank the user
+        final int toastId = ACRA.getConfig().resDialogOkToast();
+        if (toastId != 0) {
+            ToastSender.sendToast(getApplicationContext(), toastId, Toast.LENGTH_LONG);
+        }
     }
 
     /*
@@ -241,20 +223,8 @@ protected void onSaveInstanceState(Bundle outState) {
         }
     }
 
-    /**
-     * Disable the notification in the Status Bar.
-     */
-    protected void cancelNotification() {
-        final NotificationManager notificationManager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);
-        notificationManager.cancel(ACRAConstants.NOTIF_CRASH_ID);
-    }
-    
-    @Override 
-    public boolean onKeyUp(int keyCode, KeyEvent event) {
-        // If BACK button is pressed, handle it like a NO.
-        if (keyCode == KeyEvent.KEYCODE_BACK) {
-            ACRA.getErrorReporter().deletePendingNonApprovedReports(false);
-        }
-        return super.onKeyUp(keyCode, event);
+    @Override
+    public void onDismiss(DialogInterface dialog) {
+        finish();
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/org/acra/ErrorReporter.java b/src/main/java/org/acra/ErrorReporter.java
index 1e6b1205..df6fff24 100644
--- a/src/main/java/org/acra/ErrorReporter.java
+++ b/src/main/java/org/acra/ErrorReporter.java
@@ -15,17 +15,15 @@
  */
 package org.acra;
 
-import android.Manifest.permission;
-import android.app.*;
-import android.content.Context;
-import android.content.Intent;
-import android.content.SharedPreferences;
-import android.content.pm.PackageInfo;
-import android.os.Bundle;
-import android.os.Looper;
-import android.text.format.Time;
-import android.util.Log;
-import android.widget.Toast;
+import static org.acra.ACRA.LOG_TAG;
+import static org.acra.ReportField.IS_SILENT;
+
+import java.io.File;
+import java.lang.Thread.UncaughtExceptionHandler;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+
 import org.acra.annotation.ReportsCrashes;
 import org.acra.collector.Compatibility;
 import org.acra.collector.ConfigurationCollector;
@@ -40,14 +38,21 @@
 import org.acra.util.PackageManagerWrapper;
 import org.acra.util.ToastSender;
 
-import java.io.File;
-import java.lang.Thread.UncaughtExceptionHandler;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
-
-import static org.acra.ACRA.LOG_TAG;
-import static org.acra.ReportField.IS_SILENT;
+import android.Manifest.permission;
+import android.app.Activity;
+import android.app.Application;
+import android.app.Notification;
+import android.app.NotificationManager;
+import android.app.PendingIntent;
+import android.content.Context;
+import android.content.Intent;
+import android.content.SharedPreferences;
+import android.content.pm.PackageInfo;
+import android.os.Bundle;
+import android.os.Looper;
+import android.text.format.Time;
+import android.util.Log;
+import android.widget.Toast;
 
 /**
  * <p>
@@ -104,6 +109,11 @@
      */
     private static boolean toastWaitEnded = true;
 
+    /**
+     * Used to create a new (non-cached) PendingIntent each time a new crash occurs. 
+     */
+    private static int mNotificationCounter = 0;
+    
     /**
      * Can only be constructed from within this class.
      * 
@@ -130,45 +140,55 @@
         final Time appStartDate = new Time();
         appStartDate.setToNow();
 
-        if (Compatibility.getAPILevel() >= 14) { // ActivityLifecycleCallback only available for API14+
+        if (Compatibility.getAPILevel() >= 14) { // ActivityLifecycleCallback
+                                                 // only available for API14+
             ApplicationHelper.registerActivityLifecycleCallbacks(context, new ActivityLifecycleCallbacksCompat() {
                 @Override
                 public void onActivityCreated(Activity activity, Bundle savedInstanceState) {
-                    if (ACRA.DEV_LOGGING) ACRA.log.d(ACRA.LOG_TAG, "onActivityCreated " + activity.getClass());
+                    if (ACRA.DEV_LOGGING)
+                        ACRA.log.d(ACRA.LOG_TAG, "onActivityCreated " + activity.getClass());
                     if (!(activity instanceof CrashReportDialog)) {
-                        // Ignore CrashReportDialog because we want the last application Activity that was started so that we can explicitly kill it off.
+                        // Ignore CrashReportDialog because we want the last
+                        // application Activity that was started so that we can
+                        // explicitly kill it off.
                         lastActivityCreated = activity;
                     }
                 }
 
                 @Override
                 public void onActivityStarted(Activity activity) {
-                    if (ACRA.DEV_LOGGING) ACRA.log.d(ACRA.LOG_TAG, "onActivityStarted " + activity.getClass());
+                    if (ACRA.DEV_LOGGING)
+                        ACRA.log.d(ACRA.LOG_TAG, "onActivityStarted " + activity.getClass());
                 }
 
                 @Override
                 public void onActivityResumed(Activity activity) {
-                    if (ACRA.DEV_LOGGING) ACRA.log.d(ACRA.LOG_TAG, "onActivityResumed " + activity.getClass());
+                    if (ACRA.DEV_LOGGING)
+                        ACRA.log.d(ACRA.LOG_TAG, "onActivityResumed " + activity.getClass());
                 }
 
                 @Override
                 public void onActivityPaused(Activity activity) {
-                    if (ACRA.DEV_LOGGING) ACRA.log.d(ACRA.LOG_TAG, "onActivityPaused " + activity.getClass());
+                    if (ACRA.DEV_LOGGING)
+                        ACRA.log.d(ACRA.LOG_TAG, "onActivityPaused " + activity.getClass());
                 }
 
                 @Override
                 public void onActivityStopped(Activity activity) {
-                    if (ACRA.DEV_LOGGING) ACRA.log.d(ACRA.LOG_TAG, "onActivityStopped " + activity.getClass());
+                    if (ACRA.DEV_LOGGING)
+                        ACRA.log.d(ACRA.LOG_TAG, "onActivityStopped " + activity.getClass());
                 }
 
                 @Override
                 public void onActivitySaveInstanceState(Activity activity, Bundle outState) {
-                    if (ACRA.DEV_LOGGING) ACRA.log.i(ACRA.LOG_TAG, "onActivitySaveInstanceState " + activity.getClass());
+                    if (ACRA.DEV_LOGGING)
+                        ACRA.log.i(ACRA.LOG_TAG, "onActivitySaveInstanceState " + activity.getClass());
                 }
 
                 @Override
                 public void onActivityDestroyed(Activity activity) {
-                    if (ACRA.DEV_LOGGING) ACRA.log.i(ACRA.LOG_TAG, "onActivityDestroyed " + activity.getClass());
+                    if (ACRA.DEV_LOGGING)
+                        ACRA.log.i(ACRA.LOG_TAG, "onActivityDestroyed " + activity.getClass());
                 }
             });
         }
@@ -376,8 +396,10 @@ private void endApplication() {
             Log.e(LOG_TAG, mContext.getPackageName() + " fatal error : " + unhandledThrowable.getMessage(),
                     unhandledThrowable);
 
-            // Trying to solve https://github.com/ACRA/acra/issues/42#issuecomment-12134144
-            // Determine the current/last Activity that was started and close it. Activity#finish (and maybe it's parent too).
+            // Trying to solve
+            // https://github.com/ACRA/acra/issues/42#issuecomment-12134144
+            // Determine the current/last Activity that was started and close
+            // it. Activity#finish (and maybe it's parent too).
             if (lastActivityCreated != null) {
                 Log.i(LOG_TAG, "Finishing the last Activity prior to killing the Process");
                 lastActivityCreated.finish();
@@ -514,9 +536,6 @@ public void checkReportsOnApplicationStart() {
                 // been put on the task stack before killing the app.
                 // The user can explicitly say Yes or No... or ignore the dialog
                 // with the back button.
-                // As there are unapproved reports to send, display the dialog.
-                // The user comment will be associated to the latest report
-                notifyDialog(getLatestNonSilentReport(filesList));
             }
 
         }
@@ -531,7 +550,7 @@ public void checkReportsOnApplicationStart() {
     void deletePendingNonApprovedReports(boolean keepOne) {
         // In NOTIFICATION AND DIALOG mode, we have to keep the latest report
         // which
-        // has been writtent before killing the app.
+        // has been written before killing the app.
         final int nbReportsToKeep = keepOne ? 1 : 0;
         deletePendingReports(false, true, nbReportsToKeep);
     }
@@ -649,9 +668,7 @@ public void run() {
             Log.d(ACRA.LOG_TAG, "About to start ReportSenderWorker from #handleException");
             sender = startSendingReports(sendOnlySilentReports, true);
         } else if (reportingInteractionMode == ReportingInteractionMode.NOTIFICATION) {
-            // Send reports when user accepts
-            Log.d(ACRA.LOG_TAG, "About to send status bar notification from #handleException");
-            notifySendReport(reportFileName);
+            Log.d(ACRA.LOG_TAG, "Notification will be created on application start.");
         }
 
         if (shouldDisplayToast) {
@@ -725,8 +742,8 @@ public void run() {
     }
 
     /**
-     * -------- Function added----- Notify user with a dialog the app has
-     * crashed, ask permission to send it. {@link CrashReportDialog} Activity.
+     * Notify user with a dialog the app has crashed, ask permission to send it.
+     * {@link CrashReportDialog} Activity.
      * 
      * @param reportFileName
      *            Name fo the error report to display in the crash report
@@ -773,13 +790,16 @@ private void notifySendReport(String reportFileName) {
         final Intent notificationIntent = new Intent(mContext, CrashReportDialog.class);
         Log.d(LOG_TAG, "Creating Notification for " + reportFileName);
         notificationIntent.putExtra(ACRAConstants.EXTRA_REPORT_FILE_NAME, reportFileName);
-        final PendingIntent contentIntent = PendingIntent.getActivity(mContext, 0, notificationIntent,
-                PendingIntent.FLAG_UPDATE_CURRENT);
+        final PendingIntent contentIntent = PendingIntent.getActivity(mContext, mNotificationCounter++, notificationIntent, PendingIntent.FLAG_UPDATE_CURRENT);
 
         notification.setLatestEventInfo(mContext, contentTitle, contentText, contentIntent);
 
+        final Intent deleteIntent = new Intent(mContext, CrashReportDialog.class);
+        deleteIntent.putExtra(ACRAConstants.EXTRA_FORCE_CANCEL, true);
+        final PendingIntent pendingDeleteIntent = PendingIntent.getActivity(mContext, -1, deleteIntent, 0);
+        notification.deleteIntent = pendingDeleteIntent;
+        
         // Send new notification
-        notificationManager.cancelAll();
         notificationManager.notify(ACRAConstants.NOTIF_CRASH_ID, notification);
     }
 
@@ -863,6 +883,7 @@ private void deletePendingReports(boolean deleteApprovedReports, boolean deleteN
                 final boolean isReportApproved = fileNameParser.isApproved(fileName);
                 if ((isReportApproved && deleteApprovedReports) || (!isReportApproved && deleteNonApprovedReports)) {
                     final File fileToDelete = new File(mContext.getFilesDir(), fileName);
+                    ACRA.log.d(ACRA.LOG_TAG, "Deleting file " + fileName);
                     if (!fileToDelete.delete()) {
                         Log.e(ACRA.LOG_TAG, "Could not delete report : " + fileToDelete);
                     }
diff --git a/src/main/java/org/acra/SendWorker.java b/src/main/java/org/acra/SendWorker.java
index f2d528c1..b0f6df81 100644
--- a/src/main/java/org/acra/SendWorker.java
+++ b/src/main/java/org/acra/SendWorker.java
@@ -152,8 +152,9 @@ private void checkAndSendReports(Context context, boolean sendOnlySilentReports)
                        // report. Don't try to send any more reports now.
             } catch (ReportSenderException e) {
                 Log.e(ACRA.LOG_TAG, "Failed to send crash report for " + curFileName, e);
-                break; // Something stopped the report being sent. Don't try to
-                       // send any more reports now.
+                // An issue occurred while sending this report but we can still try to
+                // send other reports. Report sending is limited by ACRAConstants.MAX_SEND_REPORTS
+                // so there's not much to fear about overloading a failing server.
             }
             reportsSentCount++;
         }
diff --git a/src/main/java/org/acra/collector/CrashReportDataFactory.java b/src/main/java/org/acra/collector/CrashReportDataFactory.java
index 24662f75..272abd1e 100644
--- a/src/main/java/org/acra/collector/CrashReportDataFactory.java
+++ b/src/main/java/org/acra/collector/CrashReportDataFactory.java
@@ -95,7 +95,6 @@
 
     private final Context context;
     private final SharedPreferences prefs;
-    private final List<ReportField> crashReportFields;
     private final Map<String, String> customParameters = new HashMap<String, String>();
     private final Time appStartDate;
     private final String initialConfiguration;
@@ -106,23 +105,6 @@ public CrashReportDataFactory(Context context, SharedPreferences prefs, Time app
         this.prefs = prefs;
         this.appStartDate = appStartDate;
         this.initialConfiguration = initialConfiguration;
-
-        final ReportsCrashes config = ACRA.getConfig();
-        final ReportField[] customReportFields = config.customReportContent();
-
-        final ReportField[] fieldsList;
-        if (customReportFields.length != 0) {
-            Log.d(LOG_TAG, "Using custom Report Fields");
-            fieldsList = customReportFields;
-        } else if (config.mailTo() == null || "".equals(config.mailTo())) {
-            Log.d(LOG_TAG, "Using default Report Fields");
-            fieldsList = ACRAConstants.DEFAULT_REPORT_FIELDS;
-        } else {
-            Log.d(LOG_TAG, "Using default Mail Report Fields");
-            fieldsList = ACRAConstants.DEFAULT_MAIL_REPORT_FIELDS;
-        }
-
-        this.crashReportFields = Arrays.asList(fieldsList);
     }
 
     /**
@@ -181,6 +163,8 @@ public String getCustomData(String key) {
     public CrashReportData createCrashData(Throwable th, boolean isSilentReport, Thread brokenThread) {
         final CrashReportData crashReportData = new CrashReportData();
         try {
+            final List<ReportField> crashReportFields = getReportFields();
+
             // Make every entry here bullet proof and move any slightly dodgy
             // ones to the end.
             // This ensures that we collect as much info as possible before
@@ -401,9 +385,14 @@ public CrashReportData createCrashData(Throwable th, boolean isSilentReport, Thr
     private String createCustomInfoString() {
         final StringBuilder customInfo = new StringBuilder();
         for (final String currentKey : customParameters.keySet()) {
-            final String currentVal = customParameters.get(currentKey);
+            String currentVal = customParameters.get(currentKey);
             customInfo.append(currentKey);
             customInfo.append(" = ");
+            // We need to escape new lines in values or they are transformed into new
+            // custom fields. => let's replace all '\n' with "\\n"
+            if(currentVal != null) {
+                currentVal = currentVal.replaceAll("\n", "\\\\n");
+            }
             customInfo.append(currentVal);
             customInfo.append("\n");
         }
@@ -427,4 +416,22 @@ private String getStackTrace(Throwable th) {
 
         return stacktraceAsString;
     }
+
+    private List<ReportField> getReportFields() {
+        final ReportsCrashes config = ACRA.getConfig();
+        final ReportField[] customReportFields = config.customReportContent();
+
+        final ReportField[] fieldsList;
+        if (customReportFields.length != 0) {
+            Log.d(LOG_TAG, "Using custom Report Fields");
+            fieldsList = customReportFields;
+        } else if (config.mailTo() == null || "".equals(config.mailTo())) {
+            Log.d(LOG_TAG, "Using default Report Fields");
+            fieldsList = ACRAConstants.DEFAULT_REPORT_FIELDS;
+        } else {
+            Log.d(LOG_TAG, "Using default Mail Report Fields");
+            fieldsList = ACRAConstants.DEFAULT_MAIL_REPORT_FIELDS;
+        }
+        return Arrays.asList(fieldsList);
+    }
 }
diff --git a/src/main/java/org/acra/sender/HttpSender.java b/src/main/java/org/acra/sender/HttpSender.java
index d4c42fbd..416dc62c 100644
--- a/src/main/java/org/acra/sender/HttpSender.java
+++ b/src/main/java/org/acra/sender/HttpSender.java
@@ -54,6 +54,7 @@
  * public class myApplication extends Application {
  * 
  *     public void onCreate() {
+ *         super.onCreate();
  *         ACRA.init(this);
  *         Map&lt;ReportField, String&gt; mapping = new HashMap&lt;ReportField, String&gt;();
  *         mapping.put(ReportField.APP_VERSION_CODE, &quot;myAppVerCode'); 
@@ -64,29 +65,39 @@
  *         ErrorReporter.getInstance().removeAllReportSenders();
  *         // create your own instance with your specific mapping
  *         ErrorReporter.getInstance().addReportSender(new ReportSender(&quot;http://my.domain.com/reports/receiver.py&quot;, mapping));
- *         
- *         
- *         super.onCreate();
  *     }
  * }
  * </pre>
  * 
- * @author Kevin Gaudin
- * 
  */
 public class HttpSender implements ReportSender {
 
+    /**
+     * Available HTTP methods to send data. Only POST and PUT are currently
+     * supported.
+     */
     public enum Method {
         POST, PUT
     }
 
+    /**
+     * Type of report data encoding, currently supports Html Form encoding and
+     * JSON.
+     */
     public enum Type {
+        /**
+         * Send data as a www form encoded list of key/values. {@link http
+         * ://www.w3.org/TR/html401/interact/forms.html#h-17.13.4}
+         */
         FORM {
             @Override
             public String getContentType() {
                 return "application/x-www-form-urlencoded";
             }
         },
+        /**
+         * Send data as a structured JSON tree.
+         */
         JSON {
             @Override
             public String getContentType() {
@@ -109,11 +120,23 @@ public String getContentType() {
      * formUri are applied automatically.
      * </p>
      * 
+     * @param method
+     *            HTTP {@link Method} to be used to send data. Currently only
+     *            {@link Method#POST} and {@link Method#PUT} are available. If
+     *            {@link Method#PUT} is used, the {@link ReportField#REPORT_ID}
+     *            is appended to the formUri to be compliant with RESTful APIs.
+     * 
+     * @param type
+     *            {@link Type} of encoding used to send the report body.
+     *            {@link Type#FORM} is a simple Key/Value pairs list as defined
+     *            by the application/x-www-form-urlencoded mime type.
+     * 
      * @param mapping
-     *            If null, POST parameters will be named with
-     *            {@link ReportField} values converted to String with
-     *            .toString(). If not null, POST parameters will be named with
-     *            the result of mapping.get(ReportField.SOME_FIELD);
+     *            Applies only to {@link Method#POST} method parameter. If null,
+     *            POST parameters will be named with {@link ReportField} values
+     *            converted to String with .toString(). If not null, POST
+     *            parameters will be named with the result of
+     *            mapping.get(ReportField.SOME_FIELD);
      */
     public HttpSender(Method method, Type type, Map<ReportField, String> mapping) {
         mMethod = method;
@@ -128,13 +151,24 @@ public HttpSender(Method method, Type type, Map<ReportField, String> mapping) {
      * a parameter. Configuration changes to the formUri are not applied.
      * </p>
      * 
+     * @param method
+     *            HTTP {@link Method} to be used to send data. Currently only
+     *            {@link Method#POST} and {@link Method#PUT} are available. If
+     *            {@link Method#PUT} is used, the {@link ReportField#REPORT_ID}
+     *            is appended to the formUri to be compliant with RESTful APIs.
+     * 
+     * @param type
+     *            {@link Type} of encoding used to send the report body.
+     *            {@link Type#FORM} is a simple Key/Value pairs list as defined
+     *            by the application/x-www-form-urlencoded mime type.
      * @param formUri
      *            The URL of your server-side crash report collection script.
      * @param mapping
-     *            If null, POST parameters will be named with
-     *            {@link ReportField} values converted to String with
-     *            .toString(). If not null, POST parameters will be named with
-     *            the result of mapping.get(ReportField.SOME_FIELD);
+     *            Applies only to {@link Method#POST} method parameter. If null,
+     *            POST parameters will be named with {@link ReportField} values
+     *            converted to String with .toString(). If not null, POST
+     *            parameters will be named with the result of
+     *            mapping.get(ReportField.SOME_FIELD);
      */
     public HttpSender(Method method, Type type, String formUri, Map<ReportField, String> mapping) {
         mMethod = method;
@@ -161,15 +195,28 @@ public void send(CrashReportData report) throws ReportSenderException {
             request.setMaxNrRetries(ACRA.getConfig().maxNumberOfRequestRetries());
             request.setLogin(login);
             request.setPassword(password);
+            request.setHeaders(ACRA.getConfig().getHttpHeaders());
 
             String reportAsString = "";
-            switch (mMethod) {
-            case POST:
+
+            // Generate report body depending on requested type
+            switch (mType) {
+            case JSON:
+                reportAsString = report.toJSON().toString();
+                break;
+            case FORM:
+            default:
                 final Map<String, String> finalReport = remap(report);
                 reportAsString = HttpRequest.getParamsAsFormString(finalReport);
                 break;
+
+            }
+
+            // Adjust URL depending on method
+            switch (mMethod) {
+            case POST:
+                break;
             case PUT:
-                reportAsString = report.toJSON().toString();
                 reportUrl = new URL(reportUrl.toString() + '/' + report.getProperty(ReportField.REPORT_ID));
                 break;
             default:
@@ -178,9 +225,11 @@ public void send(CrashReportData report) throws ReportSenderException {
             request.send(reportUrl, mMethod, reportAsString, mType);
 
         } catch (IOException e) {
-            throw new ReportSenderException("Error while sending " + ACRA.getConfig().reportType() + " report via Http " + mMethod.name(), e);
+            throw new ReportSenderException("Error while sending " + ACRA.getConfig().reportType()
+                    + " report via Http " + mMethod.name(), e);
         } catch (JSONReportException e) {
-            throw new ReportSenderException("Error while sending " + ACRA.getConfig().reportType() + " report via Http " + mMethod.name(), e);
+            throw new ReportSenderException("Error while sending " + ACRA.getConfig().reportType()
+                    + " report via Http " + mMethod.name(), e);
         }
     }
 
@@ -202,5 +251,4 @@ public void send(CrashReportData report) throws ReportSenderException {
         return finalReport;
     }
 
-
-}
+}
\ No newline at end of file
diff --git a/src/main/java/org/acra/util/HttpRequest.java b/src/main/java/org/acra/util/HttpRequest.java
index 05c7dee3..502b1660 100644
--- a/src/main/java/org/acra/util/HttpRequest.java
+++ b/src/main/java/org/acra/util/HttpRequest.java
@@ -10,6 +10,7 @@
 import java.net.SocketTimeoutException;
 import java.net.URL;
 import java.net.URLEncoder;
+import java.util.Iterator;
 import java.util.Map;
 
 import org.acra.ACRA;
@@ -49,8 +50,11 @@
         private final int maxNrRetries;
 
         /**
-         * @param httpParams    HttpParams that will be used in the HttpRequest.
-         * @param maxNrRetries  Max number of times to retry Request on failure due to SocketTimeOutException.
+         * @param httpParams
+         *            HttpParams that will be used in the HttpRequest.
+         * @param maxNrRetries
+         *            Max number of times to retry Request on failure due to
+         *            SocketTimeOutException.
          */
         private SocketTimeOutRetryHandler(HttpParams httpParams, int maxNrRetries) {
             this.httpParams = httpParams;
@@ -65,9 +69,11 @@ public boolean retryRequest(IOException exception, int executionCount, HttpConte
                     if (httpParams != null) {
                         final int newSocketTimeOut = HttpConnectionParams.getSoTimeout(httpParams) * 2;
                         HttpConnectionParams.setSoTimeout(httpParams, newSocketTimeOut);
-                        ACRA.log.d(ACRA.LOG_TAG, "SocketTimeOut - increasing time out to " + newSocketTimeOut + " millis and trying again");
+                        ACRA.log.d(ACRA.LOG_TAG, "SocketTimeOut - increasing time out to " + newSocketTimeOut
+                                + " millis and trying again");
                     } else {
-                        ACRA.log.d(ACRA.LOG_TAG, "SocketTimeOut - no HttpParams, cannot increase time out. Trying again with current settings");
+                        ACRA.log.d(ACRA.LOG_TAG,
+                                "SocketTimeOut - no HttpParams, cannot increase time out. Trying again with current settings");
                     }
 
                     return true;
@@ -76,18 +82,18 @@ public boolean retryRequest(IOException exception, int executionCount, HttpConte
                 ACRA.log.d(ACRA.LOG_TAG, "SocketTimeOut but exceeded max number of retries : " + maxNrRetries);
             }
 
-            return false;  //To change body of implemented methods use File | Settings | File Templates.
+            return false; // To change body of implemented methods use File |
+                          // Settings | File Templates.
         }
     }
 
-
-
     private String login;
     private String password;
     private int connectionTimeOut = 3000;
     private int socketTimeOut = 3000;
     private int maxNrRetries = 3;
-
+    private Map<String,String> headers;
+    
     public void setLogin(String login) {
         this.login = login;
     }
@@ -104,10 +110,17 @@ public void setSocketTimeOut(int socketTimeOut) {
         this.socketTimeOut = socketTimeOut;
     }
 
+    public void setHeaders(Map<String,String> headers) {
+       this.headers = headers;
+    }
+
+    
     /**
      * The default number of retries is 3.
-     *
-     * @param maxNrRetries  Max number of times to retry Request on failure due to SocketTimeOutException.
+     * 
+     * @param maxNrRetries
+     *            Max number of times to retry Request on failure due to
+     *            SocketTimeOutException.
      */
     public void setMaxNrRetries(int maxNrRetries) {
         this.maxNrRetries = maxNrRetries;
@@ -115,10 +128,13 @@ public void setMaxNrRetries(int maxNrRetries) {
 
     /**
      * Posts to a URL.
-     *
-     * @param url           URL to which to post.
-     * @param content    Map of parameters to post to a URL.
-     * @throws IOException if the data cannot be posted.
+     * 
+     * @param url
+     *            URL to which to post.
+     * @param content
+     *            Map of parameters to post to a URL.
+     * @throws IOException
+     *             if the data cannot be posted.
      */
     public void send(URL url, Method method, String content, Type type) throws IOException {
 
@@ -126,26 +142,54 @@ public void send(URL url, Method method, String content, Type type) throws IOExc
         final HttpEntityEnclosingRequestBase httpRequest = getHttpRequest(url, method, content, type);
 
         ACRA.log.d(ACRA.LOG_TAG, "Sending request to " + url);
-        if (ACRA.DEV_LOGGING) ACRA.log.d(ACRA.LOG_TAG, "Http " + method.name() + " content : ");
-        if (ACRA.DEV_LOGGING) ACRA.log.d(ACRA.LOG_TAG, content);
-
-        final HttpResponse response = httpClient.execute(httpRequest, new BasicHttpContext());
-        if (response != null) {
-            final StatusLine statusLine = response.getStatusLine();
-            if (statusLine != null) {
-                final String statusCode = Integer.toString(response.getStatusLine().getStatusCode());
-                if (statusCode.startsWith("4") || statusCode.startsWith("5")) {
-                    if (ACRA.DEV_LOGGING) ACRA.log.d(ACRA.LOG_TAG, "Could not send HttpPost : " + httpRequest);
-                    throw new IOException("Host returned error code " + statusCode);
+        if (ACRA.DEV_LOGGING)
+            ACRA.log.d(ACRA.LOG_TAG, "Http " + method.name() + " content : ");
+        if (ACRA.DEV_LOGGING)
+            ACRA.log.d(ACRA.LOG_TAG, content);
+
+        HttpResponse response = null;
+        try {
+            response = httpClient.execute(httpRequest, new BasicHttpContext());
+            if (response != null) {
+                final StatusLine statusLine = response.getStatusLine();
+                if (statusLine != null) {
+                    final String statusCode = Integer.toString(response.getStatusLine().getStatusCode());
+    
+                    if (!statusCode.equals("409") // 409 return code means that the
+                                                  // report has been received
+                                                  // already. So we can discard it.
+                            && !statusCode.equals("403") // a 403 error code is an explicit data validation refusal
+                                                         // from the server. The request must not be repeated.
+                                                         // Discard it.
+                            && (statusCode.startsWith("4") || statusCode.startsWith("5"))) {
+                        if (ACRA.DEV_LOGGING) {
+                            ACRA.log.d(ACRA.LOG_TAG, "Could not send HttpPost : " + httpRequest);
+                            ACRA.log.d(ACRA.LOG_TAG, "HttpResponse Status : "
+                                    + (statusLine != null ? statusLine.getStatusCode() : "NoStatusLine#noCode"));
+                            final String respContent = EntityUtils.toString(response.getEntity());
+                            ACRA.log.d(ACRA.LOG_TAG,
+                                    "HttpResponse Content : " + respContent.substring(0, Math.min(respContent.length(), 200)));
+                        }
+                        throw new IOException("Host returned error code " + statusCode);
+                    }
                 }
-            }
-
-            if (ACRA.DEV_LOGGING) ACRA.log.d(ACRA.LOG_TAG, "HttpResponse Status : " + (statusLine != null ? statusLine.getStatusCode() : "NoStatusLine#noCode"));
-            final String respContent = EntityUtils.toString(response.getEntity());
-            if (ACRA.DEV_LOGGING) ACRA.log.d(ACRA.LOG_TAG, "HttpResponse Content : " + respContent.substring(0, Math.min(respContent.length(), 200)));
 
-        } else {
-            if (ACRA.DEV_LOGGING) ACRA.log.d(ACRA.LOG_TAG, "HTTP no Response!!");
+                if (ACRA.DEV_LOGGING)
+                    ACRA.log.d(ACRA.LOG_TAG, "HttpResponse Status : "
+                            + (statusLine != null ? statusLine.getStatusCode() : "NoStatusLine#noCode"));
+                final String respContent = EntityUtils.toString(response.getEntity());
+                if (ACRA.DEV_LOGGING)
+                    ACRA.log.d(ACRA.LOG_TAG,
+                            "HttpResponse Content : " + respContent.substring(0, Math.min(respContent.length(), 200)));
+
+            } else {
+                if (ACRA.DEV_LOGGING)
+                    ACRA.log.d(ACRA.LOG_TAG, "HTTP no Response!!");
+            }
+        } finally {
+            if (response != null) {
+				response.getEntity().consumeContent();
+			}
         }
     }
 
@@ -161,7 +205,7 @@ private HttpClient getHttpClient() {
 
         final SchemeRegistry registry = new SchemeRegistry();
         registry.register(new Scheme("http", new PlainSocketFactory(), 80));
-        if(ACRA.getConfig().disableSSLCertValidation()) {
+        if (ACRA.getConfig().disableSSLCertValidation()) {
             registry.register(new Scheme("https", (new FakeSocketFactory()), 443));
         } else {
             registry.register(new Scheme("https", SSLSocketFactory.getSocketFactory(), 443));
@@ -177,7 +221,8 @@ private HttpClient getHttpClient() {
     }
 
     /**
-     * @return Credentials to use with this HttpRequest or null if no credentials were supplied.
+     * @return Credentials to use with this HttpRequest or null if no
+     *         credentials were supplied.
      */
     private UsernamePasswordCredentials getCredentials() {
         if (login != null || password != null) {
@@ -187,7 +232,8 @@ private UsernamePasswordCredentials getCredentials() {
         return null;
     }
 
-    private HttpEntityEnclosingRequestBase getHttpRequest(URL url, Method method, String content, Type type) throws UnsupportedEncodingException, UnsupportedOperationException {
+    private HttpEntityEnclosingRequestBase getHttpRequest(URL url, Method method, String content, Type type)
+            throws UnsupportedEncodingException, UnsupportedOperationException {
 
         final HttpEntityEnclosingRequestBase httpRequest;
         switch (method) {
@@ -206,9 +252,20 @@ private HttpEntityEnclosingRequestBase getHttpRequest(URL url, Method method, St
             httpRequest.addHeader(BasicScheme.authenticate(creds, "UTF-8", false));
         }
         httpRequest.setHeader("User-Agent", "Android");
-        httpRequest.setHeader("Accept", "text/html,application/xml,application/json,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5");
+        httpRequest
+                .setHeader("Accept",
+                        "text/html,application/xml,application/json,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5");
         httpRequest.setHeader("Content-Type", type.getContentType());
 
+        if(headers !=null) {
+           Iterator<String> headerIt = headers.keySet().iterator();
+           while(headerIt.hasNext()) {
+              String header = headerIt.next();
+              String value = headers.get(header);
+              httpRequest.setHeader(header, value);
+           }
+        }
+        
         httpRequest.setEntity(new StringEntity(content, "UTF-8"));
 
         return httpRequest;
diff --git a/src/main/java/org/acra/util/JSONReportBuilder.java b/src/main/java/org/acra/util/JSONReportBuilder.java
index 9fc2b176..df3fabcc 100644
--- a/src/main/java/org/acra/util/JSONReportBuilder.java
+++ b/src/main/java/org/acra/util/JSONReportBuilder.java
@@ -76,7 +76,7 @@ public static JSONObject buildJSONReport(CrashReportData errorContent) throws JS
                     String line = null;
                     try {
                         while ((line = reader.readLine()) != null) {
-                            addJSONFromPropery(subObject, line);
+                            addJSONFromProperty(subObject, line);
                         }
                     } catch (IOException e) {
                         ACRA.log.e(ACRA.LOG_TAG, "Error while converting " + key.name() + " to JSON.", e);
@@ -131,13 +131,16 @@ public static JSONObject buildJSONReport(CrashReportData errorContent) throws JS
      *            A string containing "some.key.name=Any value"
      * @throws JSONException
      */
-    private static void addJSONFromPropery(JSONObject destination, String propertyString) throws JSONException {
+    private static void addJSONFromProperty(JSONObject destination, String propertyString) throws JSONException {
         int equalsIndex = propertyString.indexOf('=');
         if (equalsIndex > 0) {
             JSONObject finalObject = destination;
             String currentKey = propertyString.substring(0, equalsIndex).trim();
             String currentValue = propertyString.substring(equalsIndex + 1).trim();
             Object value = guessType(currentValue);
+            if(value instanceof String) {
+                value = ((String) value).replaceAll("\\\\n","\n");
+            }
             String[] splitKey = currentKey.split("\\.");
             if (splitKey.length > 1) {
                 addJSONSubTree(finalObject, splitKey, value);
