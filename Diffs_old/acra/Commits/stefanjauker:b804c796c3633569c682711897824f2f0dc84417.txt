diff --git a/.gitignore b/.gitignore
index 2888218d..139fe916 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,3 +1,4 @@
+.DS_Store
 .classpath
 .project
 .settings
diff --git a/pom.xml b/pom.xml
index 6e4b5dcd..3ac63195 100644
--- a/pom.xml
+++ b/pom.xml
@@ -7,7 +7,7 @@
     </parent>
 	<groupId>ch.acra</groupId>
 	<artifactId>acra</artifactId>
-	<version>5.0.0-SNAPSHOT</version>
+	<version>4.5.0-PATCHED</version>
 
 	<name>Application Crash Report for Android</name>
 
diff --git a/src/main/java/org/acra/util/FakeSocketFactory.java b/src/main/java/org/acra/util/FakeSocketFactory.java
deleted file mode 100644
index 73b9a5c2..00000000
--- a/src/main/java/org/acra/util/FakeSocketFactory.java
+++ /dev/null
@@ -1,78 +0,0 @@
-/*
- * Utility class copied from http://transdroid.googlecode.com with the authorization from Eric Kok to redistribute it under Apache Software License. 
- */
-package org.acra.util;
-
-import org.apache.http.conn.scheme.LayeredSocketFactory;
-import org.apache.http.conn.scheme.SocketFactory;
-import org.apache.http.params.HttpConnectionParams;
-import org.apache.http.params.HttpParams;
-
-import javax.net.ssl.SSLContext;
-import javax.net.ssl.SSLSocket;
-import javax.net.ssl.TrustManager;
-import java.io.IOException;
-import java.net.InetAddress;
-import java.net.InetSocketAddress;
-import java.net.Socket;
-
-public class FakeSocketFactory implements SocketFactory, LayeredSocketFactory {
-
-    private SSLContext sslcontext = null;
-
-    private static SSLContext createEasySSLContext() throws IOException {
-        try {
-            final SSLContext context = SSLContext.getInstance("TLS");
-            context.init(null, new TrustManager[] { new NaiveTrustManager() }, null);
-            return context;
-        } catch (Exception e) {
-            throw new IOException(e.getMessage());
-        }
-    }
-
-    private SSLContext getSSLContext() throws IOException {
-        if (this.sslcontext == null) {
-            this.sslcontext = createEasySSLContext();
-        }
-        return this.sslcontext;
-    }
-
-    @Override
-    public Socket connectSocket(Socket sock, String host, int port, InetAddress localAddress, int localPort, HttpParams params) throws IOException {
-        final int connTimeout = HttpConnectionParams.getConnectionTimeout(params);
-        final int soTimeout = HttpConnectionParams.getSoTimeout(params);
-
-        final InetSocketAddress remoteAddress = new InetSocketAddress(host, port);
-        final SSLSocket sslsock = (SSLSocket) ((sock != null) ? sock : createSocket());
-
-        if ((localAddress != null) || (localPort > 0)) {
-            // we need to bind explicitly
-            if (localPort < 0) {
-                localPort = 0; // indicates "any"
-            }
-            final InetSocketAddress isa = new InetSocketAddress(localAddress, localPort);
-            sslsock.bind(isa);
-        }
-
-        sslsock.connect(remoteAddress, connTimeout);
-        sslsock.setSoTimeout(soTimeout);
-
-        return sslsock;
-    }
-
-    @Override
-    public Socket createSocket() throws IOException {
-        return getSSLContext().getSocketFactory().createSocket();
-    }
-
-    @Override
-    public boolean isSecure(Socket arg0) throws IllegalArgumentException {
-        return true;
-    }
-
-    @Override
-    public Socket createSocket(Socket socket, String host, int port, boolean autoClose) throws IOException {
-        return getSSLContext().getSocketFactory().createSocket(socket, host, port, autoClose);
-    }
-
-}
diff --git a/src/main/java/org/acra/util/HttpRequest.java b/src/main/java/org/acra/util/HttpRequest.java
index 502b1660..efa9a988 100644
--- a/src/main/java/org/acra/util/HttpRequest.java
+++ b/src/main/java/org/acra/util/HttpRequest.java
@@ -1,17 +1,10 @@
 /*
  * This class was copied from this Stackoverflow Q&A:
  * http://stackoverflow.com/questions/2253061/secure-http-post-in-android/2253280#2253280
- * Thanks go to MattC!  
+ * Thanks go to MattC!
  */
-package org.acra.util;
 
-import java.io.IOException;
-import java.io.UnsupportedEncodingException;
-import java.net.SocketTimeoutException;
-import java.net.URL;
-import java.net.URLEncoder;
-import java.util.Iterator;
-import java.util.Map;
+package org.acra.util;
 
 import org.acra.ACRA;
 import org.acra.sender.HttpSender.Method;
@@ -42,12 +35,21 @@
 import org.apache.http.protocol.HttpContext;
 import org.apache.http.util.EntityUtils;
 
+import java.io.IOException;
+import java.io.UnsupportedEncodingException;
+import java.net.SocketTimeoutException;
+import java.net.URL;
+import java.net.URLEncoder;
+import java.util.Iterator;
+import java.util.Map;
+
+
 public final class HttpRequest {
 
     private static class SocketTimeOutRetryHandler implements HttpRequestRetryHandler {
 
         private final HttpParams httpParams;
-        private final int maxNrRetries;
+        private final int        maxNrRetries;
 
         /**
          * @param httpParams
@@ -87,13 +89,13 @@ public boolean retryRequest(IOException exception, int executionCount, HttpConte
         }
     }
 
-    private String login;
-    private String password;
-    private int connectionTimeOut = 3000;
-    private int socketTimeOut = 3000;
-    private int maxNrRetries = 3;
-    private Map<String,String> headers;
-    
+    private String              login;
+    private String              password;
+    private int                 connectionTimeOut = 3000;
+    private int                 socketTimeOut     = 3000;
+    private int                 maxNrRetries      = 3;
+    private Map<String, String> headers;
+
     public void setLogin(String login) {
         this.login = login;
     }
@@ -110,11 +112,10 @@ public void setSocketTimeOut(int socketTimeOut) {
         this.socketTimeOut = socketTimeOut;
     }
 
-    public void setHeaders(Map<String,String> headers) {
-       this.headers = headers;
+    public void setHeaders(Map<String, String> headers) {
+        this.headers = headers;
     }
 
-    
     /**
      * The default number of retries is 3.
      * 
@@ -154,7 +155,7 @@ public void send(URL url, Method method, String content, Type type) throws IOExc
                 final StatusLine statusLine = response.getStatusLine();
                 if (statusLine != null) {
                     final String statusCode = Integer.toString(response.getStatusLine().getStatusCode());
-    
+
                     if (!statusCode.equals("409") // 409 return code means that the
                                                   // report has been received
                                                   // already. So we can discard it.
@@ -188,8 +189,8 @@ public void send(URL url, Method method, String content, Type type) throws IOExc
             }
         } finally {
             if (response != null) {
-				response.getEntity().consumeContent();
-			}
+                response.getEntity().consumeContent();
+            }
         }
     }
 
@@ -205,11 +206,7 @@ private HttpClient getHttpClient() {
 
         final SchemeRegistry registry = new SchemeRegistry();
         registry.register(new Scheme("http", new PlainSocketFactory(), 80));
-        if (ACRA.getConfig().disableSSLCertValidation()) {
-            registry.register(new Scheme("https", (new FakeSocketFactory()), 443));
-        } else {
-            registry.register(new Scheme("https", SSLSocketFactory.getSocketFactory(), 443));
-        }
+        registry.register(new Scheme("https", SSLSocketFactory.getSocketFactory(), 443));
 
         final ClientConnectionManager clientConnectionManager = new ThreadSafeClientConnManager(httpParams, registry);
         final DefaultHttpClient httpClient = new DefaultHttpClient(clientConnectionManager, httpParams);
@@ -237,14 +234,14 @@ private HttpEntityEnclosingRequestBase getHttpRequest(URL url, Method method, St
 
         final HttpEntityEnclosingRequestBase httpRequest;
         switch (method) {
-        case POST:
-            httpRequest = new HttpPost(url.toString());
-            break;
-        case PUT:
-            httpRequest = new HttpPut(url.toString());
-            break;
-        default:
-            throw new UnsupportedOperationException("Unknown method: " + method.name());
+            case POST:
+                httpRequest = new HttpPost(url.toString());
+                break;
+            case PUT:
+                httpRequest = new HttpPut(url.toString());
+                break;
+            default:
+                throw new UnsupportedOperationException("Unknown method: " + method.name());
         }
 
         final UsernamePasswordCredentials creds = getCredentials();
@@ -257,15 +254,15 @@ private HttpEntityEnclosingRequestBase getHttpRequest(URL url, Method method, St
                         "text/html,application/xml,application/json,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5");
         httpRequest.setHeader("Content-Type", type.getContentType());
 
-        if(headers !=null) {
-           Iterator<String> headerIt = headers.keySet().iterator();
-           while(headerIt.hasNext()) {
-              String header = headerIt.next();
-              String value = headers.get(header);
-              httpRequest.setHeader(header, value);
-           }
+        if (headers != null) {
+            Iterator<String> headerIt = headers.keySet().iterator();
+            while (headerIt.hasNext()) {
+                String header = headerIt.next();
+                String value = headers.get(header);
+                httpRequest.setHeader(header, value);
+            }
         }
-        
+
         httpRequest.setEntity(new StringEntity(content, "UTF-8"));
 
         return httpRequest;
