diff --git a/src/main/java/org/acra/ErrorReporter.java b/src/main/java/org/acra/ErrorReporter.java
index df6fff24..0d51ddea 100644
--- a/src/main/java/org/acra/ErrorReporter.java
+++ b/src/main/java/org/acra/ErrorReporter.java
@@ -79,8 +79,29 @@
  * </p>
  */
 public class ErrorReporter implements Thread.UncaughtExceptionHandler {
+	
+	/**
+	 * <p>
+	 * Allow to not perform uncaught exception processing for specific uncaught exceptions.
+	 * For example it is possible to discard (not submit reports) crash reports from Android 
+	 * that cannot be fixed at the app level
+	 * </p>
+	 */
+	public static interface UncaughtExceptionFilter {
+		 /**
+	     * filter out a given uncaught exception from default uncaught exception processing
+	     * 
+	     * @param e
+	     *            An uncaught exception
+	     * @return true to filter out (not process) this exception, false to process it
+         *
+	     */
+    	public boolean filter(Throwable e);
+    }
 
     private boolean enabled = false;
+    
+    private UncaughtExceptionFilter uncaughtExceptionFiler = null;
 
     private final Application mContext;
     private final SharedPreferences prefs;
@@ -337,6 +358,16 @@ public void setReportSender(ReportSender sender) {
         removeAllReportSenders();
         addReportSender(sender);
     }
+    
+    /**
+     * Set an uncaught exception filter
+     * 
+     * @param filter
+     *            uncaught exception filter to use or null for none
+     */
+    public void setUncaughtExceptionFilter(UncaughtExceptionFilter filter) {
+    	uncaughtExceptionFiler = filter;
+    }
 
     /*
      * (non-Javadoc)
@@ -347,15 +378,29 @@ public void setReportSender(ReportSender sender) {
      */
     public void uncaughtException(Thread t, Throwable e) {
         try {
+            
+            boolean isFiltered = false;
+            if(uncaughtExceptionFiler != null) {
+            	isFiltered = uncaughtExceptionFiler.filter(e);
+            }
+        	
             // If we're not enabled then just pass the Exception on to any
             // defaultExceptionHandler.
-            if (!enabled) {
+            if (!enabled || isFiltered) {
+            	
+            	String disabledFor;
+            	if(isFiltered) {
+            		disabledFor = e.toString();
+            	} else {
+            		disabledFor = mContext.getPackageName();
+            	}
+            	
                 if (mDfltExceptionHandler != null) {
-                    Log.e(ACRA.LOG_TAG, "ACRA is disabled for " + mContext.getPackageName()
+                    Log.e(ACRA.LOG_TAG, "ACRA is disabled for " + disabledFor
                             + " - forwarding uncaught Exception on to default ExceptionHandler");
                     mDfltExceptionHandler.uncaughtException(t, e);
                 } else {
-                    Log.e(ACRA.LOG_TAG, "ACRA is disabled for " + mContext.getPackageName()
+                    Log.e(ACRA.LOG_TAG, "ACRA is disabled for " + disabledFor
                             + " - no default ExceptionHandler");
                 }
                 return;
@@ -365,11 +410,12 @@ public void uncaughtException(Thread t, Throwable e) {
             unhandledThrowable = e;
 
             Log.e(ACRA.LOG_TAG,
-                    "ACRA caught a " + e.getClass().getSimpleName() + " exception for " + mContext.getPackageName()
-                            + ". Building report.");
+                    "ACRA caught a " + e.getClass().getSimpleName() + " exception for " + mContext.getPackageName() + ". Building report.");
 
-            // Generate and send crash report
-            handleException(e, ACRA.getConfig().mode(), false, true);
+            if(!isFiltered) {
+                // Generate and send crash report
+            	handleException(e, ACRA.getConfig().mode(), false, true);
+            }
         } catch (Throwable fatality) {
             // ACRA failed. Prevent any recursive call to
             // ACRA.uncaughtException(), let the native reporter do its job.
