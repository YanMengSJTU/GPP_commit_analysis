diff --git a/.gitignore b/.gitignore
index a129d2bf..a1049526 100644
--- a/.gitignore
+++ b/.gitignore
@@ -1,7 +1,9 @@
-.classpath
-.project
-.settings
-target
-pom.xml.releaseBackup
-release.properties
-local.properties
+.classpath
+.project
+.settings
+target
+pom.xml.releaseBackup
+release.properties
+local.properties
+*.iml
+*.idea/*
diff --git a/README.md b/README.md
index a8000ffc..7c2a2517 100644
--- a/README.md
+++ b/README.md
@@ -16,6 +16,8 @@ What is ACRA ?
 
 ACRA is a library enabling Android Application to automatically post their crash reports to a GoogleDoc form. It is targetted to android applications developers to help them get data from their applications when they crash or behave erroneously.
 
+ACRA is used in 2.76% ([See AppBrain/stats](http://www.appbrain.com/stats/libraries/details/acra/acra)) of all apps on Google Play as of Jan 2015. That's over 40M **apps** using ACRA. And since the average US user has 41 apps installed on their phone that means there is a 70% that ACRA is running on any phone. That means ACRA is running on over a **billion devices**.
+
 See [BasicSetup](http://github.com/ACRA/acra/wiki/BasicSetup) for a step-by-step installation and usage guide.
 
 A crash reporting feature for android apps is native since Android 2.2 (FroYo) but only available through the official Android Market (and with limited data). ACRA is a great help for Android developers :
@@ -41,6 +43,15 @@ Change Log
 
 For a complete changelog, please see the [ChangeLog page](http://github.com/ACRA/acra/wiki/ChangeLog) in the Wiki.
 
+ACRA v4.6
+===============================
+
+The summarized changelog is here: https://github.com/ACRA/acra/wiki/ChangeLog
+
+Included in this release (summarized summary):
+- CustomReportDialog using @ReportCrashes#reportDialogClass (NB must extend from BaseCrashReportDialog).
+- many bugfixes
+
 ACRA v4.5 - enabling the future
 ===============================
 
diff --git a/pom.xml b/pom.xml
index 6e4b5dcd..f6ed4282 100644
--- a/pom.xml
+++ b/pom.xml
@@ -7,7 +7,7 @@
     </parent>
 	<groupId>ch.acra</groupId>
 	<artifactId>acra</artifactId>
-	<version>5.0.0-SNAPSHOT</version>
+	<version>4.6.2-SNAPSHOT</version>
 
 	<name>Application Crash Report for Android</name>
 
@@ -39,7 +39,7 @@
 
 	<properties>
 		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
-        <android.version>14</android.version>
+        <android.version>17</android.version>
 	</properties>
 
 	<dependencies>
@@ -70,6 +70,7 @@
             <groupId>org.json</groupId>
             <artifactId>json</artifactId>
             <version>20080701</version>
+            <scope>provided</scope>
         </dependency>
     </dependencies>
 
@@ -166,9 +167,9 @@
 	</build>
 
 	<scm>
-		<connection>scm:git:https://github.com/ACRA/acra.git</connection>
-		<developerConnection>scm:git:https://github.com/ACRA/acra.git</developerConnection>
-		<url>https://github.com/ACRA/acra.git</url>
+		<connection>scm:git:git@github.com:ACRA/acra.git</connection>
+		<developerConnection>scm:git:git@github.com:ACRA/acra.git</developerConnection>
+		<url>ssh://git@github.com:ACRA/acra.git</url>
 	</scm>
     <profiles>
         <profile>
diff --git a/src/main/java/org/acra/ACRA.java b/src/main/java/org/acra/ACRA.java
index b75b3a84..31a03e77 100644
--- a/src/main/java/org/acra/ACRA.java
+++ b/src/main/java/org/acra/ACRA.java
@@ -92,7 +92,6 @@
     public static final String PREF_LAST_VERSION_NR = "acra.lastVersionNr";
 
     private static Application mApplication;
-    private static ReportsCrashes mReportsCrashes;
 
     // Accessible via ACRA#getErrorReporter().
     private static ErrorReporter errorReporterSingleton;
@@ -108,32 +107,70 @@
      * method.
      * </p>
      * 
-     * @param app
-     *            Your Application class.
-     * @throws IllegalStateException
-     *             if it is called more than once.
+     * @param app   Your Application class.
+     * @throws IllegalStateException if it is called more than once.
      */
     public static void init(Application app) {
+        final ReportsCrashes reportsCrashes = app.getClass().getAnnotation(ReportsCrashes.class);
+        if (reportsCrashes == null) {
+            log.e(LOG_TAG,
+                    "ACRA#init called but no ReportsCrashes annotation on Application " + app.getPackageName());
+            return;
+        }
+        init(app, new ACRAConfiguration(reportsCrashes));
+    }
+
+    /**
+     * <p>
+     * Initialize ACRA for a given Application. The call to this method should
+     * be placed as soon as possible in the {@link Application#onCreate()}
+     * method.
+     * </p>
+     *
+     * @param app       Your Application class.
+     * @param config    ACRAConfiguration to manually set up ACRA configuration.
+     * @throws IllegalStateException if it is called more than once.
+     */
+    public static void init(Application app, ACRAConfiguration config) {
+        init(app, config, true);
+    }
+
+    /**
+     * <p>
+     * Initialize ACRA for a given Application. The call to this method should
+     * be placed as soon as possible in the {@link Application#onCreate()}
+     * method.
+     * </p>
+     *
+     * @param app       Your Application class.
+     * @param config    ACRAConfiguration to manually set up ACRA configuration.
+     * @param checkReportsOnApplicationStart    Whether to invoke
+     *     ErrorReporter.checkReportsOnApplicationStart(). Apps which adjust the
+     *     ReportSenders should set this to false and call
+     *     checkReportsOnApplicationStart() themselves to prevent a potential
+     *     race with the SendWorker and list of ReportSenders.
+     * @throws IllegalStateException if it is called more than once.
+     */
+    public static void init(Application app, ACRAConfiguration config, boolean checkReportsOnApplicationStart){
 
         if (mApplication != null) {
             log.w(LOG_TAG, "ACRA#init called more than once. Won't do anything more.");
             return;
         }
-
         mApplication = app;
-        mReportsCrashes = mApplication.getClass().getAnnotation(ReportsCrashes.class);
-        if (mReportsCrashes == null) {
-            log.e(LOG_TAG,
-                    "ACRA#init called but no ReportsCrashes annotation on Application " + mApplication.getPackageName());
+        
+        if (config == null) {
+            log.e(LOG_TAG, "ACRA#init called but no ACRAConfiguration provided");
             return;
         }
+        setConfig(config);
 
         final SharedPreferences prefs = getACRASharedPreferences();
 
         try {
-            checkCrashResources();
+            checkCrashResources(config);
 
-            log.d(LOG_TAG, "ACRA is enabled for " + mApplication.getPackageName() + ", intializing...");
+            log.d(LOG_TAG, "ACRA is enabled for " + mApplication.getPackageName() + ", initializing...");
 
             // Initialize ErrorReporter with all required data
             final boolean enableAcra = !shouldDisableACRA(prefs);
@@ -144,6 +181,11 @@ public static void init(Application app) {
 
             errorReporterSingleton = errorReporter;
 
+            // Check for pending reports
+            if (checkReportsOnApplicationStart) {
+                errorReporter.checkReportsOnApplicationStart();
+            }
+
         } catch (ACRAConfigurationException e) {
             log.w(LOG_TAG, "Error : ", e);
         }
@@ -210,8 +252,7 @@ private static boolean shouldDisableACRA(SharedPreferences prefs) {
      * @throws ACRAConfigurationException
      *             if required values are missing.
      */
-    static void checkCrashResources() throws ACRAConfigurationException {
-        ReportsCrashes conf = getConfig();
+    static void checkCrashResources(ReportsCrashes conf) throws ACRAConfigurationException {
         switch (conf.mode()) {
         case TOAST:
             if (conf.resToastText() == 0) {
@@ -220,16 +261,19 @@ static void checkCrashResources() throws ACRAConfigurationException {
             }
             break;
         case NOTIFICATION:
-            if (conf.resNotifTickerText() == 0 || conf.resNotifTitle() == 0 || conf.resNotifText() == 0
-                    || conf.resDialogText() == 0) {
+            if (conf.resNotifTickerText() == 0 || conf.resNotifTitle() == 0 || conf.resNotifText() == 0) {
+                throw new ACRAConfigurationException(
+                        "NOTIFICATION mode: you have to define at least the resNotifTickerText, resNotifTitle, resNotifText parameters in your application @ReportsCrashes() annotation.");
+            }
+            if (CrashReportDialog.class.equals(conf.reportDialogClass()) && conf.resDialogText() == 0) {
                 throw new ACRAConfigurationException(
-                        "NOTIFICATION mode: you have to define at least the resNotifTickerText, resNotifTitle, resNotifText, resDialogText parameters in your application @ReportsCrashes() annotation.");
+                        "NOTIFICATION mode: using the (default) CrashReportDialog requires you have to define the resDialogText parameter in your application @ReportsCrashes() annotation.");
             }
             break;
         case DIALOG:
-            if (conf.resDialogText() == 0) {
+            if (CrashReportDialog.class.equals(conf.reportDialogClass()) && conf.resDialogText() == 0) {
                 throw new ACRAConfigurationException(
-                        "DIALOG mode: you have to define at least the resDialogText parameters in your application @ReportsCrashes() annotation.");
+                        "DIALOG mode: using the (default) CrashReportDialog requires you to define the resDialogText parameter in your application @ReportsCrashes() annotation.");
             }
             break;
 		default:
@@ -282,6 +326,7 @@ public static void setConfig(ACRAConfiguration conf) {
     }
 
     /**
+     * @param app       Your Application class.
      * @return new {@link ACRAConfiguration} instance with values initialized
      *         from the {@link ReportsCrashes} annotation.
      */
diff --git a/src/main/java/org/acra/ACRAConfiguration.java b/src/main/java/org/acra/ACRAConfiguration.java
index d1afbb50..db5efb58 100644
--- a/src/main/java/org/acra/ACRAConfiguration.java
+++ b/src/main/java/org/acra/ACRAConfiguration.java
@@ -15,45 +15,35 @@
  */
 package org.acra;
 
-import static org.acra.ACRAConstants.DEFAULT_APPLICATION_LOGFILE;
-import static org.acra.ACRAConstants.DEFAULT_APPLICATION_LOGFILE_LINES;
-import static org.acra.ACRAConstants.DEFAULT_CONNECTION_TIMEOUT;
-import static org.acra.ACRAConstants.DEFAULT_DELETE_OLD_UNSENT_REPORTS_ON_APPLICATION_START;
-import static org.acra.ACRAConstants.DEFAULT_DELETE_UNAPPROVED_REPORTS_ON_APPLICATION_START;
-import static org.acra.ACRAConstants.DEFAULT_DIALOG_ICON;
-import static org.acra.ACRAConstants.DEFAULT_DISABLE_SSL_CERT_VALIDATION;
-import static org.acra.ACRAConstants.DEFAULT_DROPBOX_COLLECTION_MINUTES;
-import static org.acra.ACRAConstants.DEFAULT_FORCE_CLOSE_DIALOG_AFTER_TOAST;
-import static org.acra.ACRAConstants.DEFAULT_GOOGLE_FORM_URL_FORMAT;
-import static org.acra.ACRAConstants.DEFAULT_INCLUDE_DROPBOX_SYSTEM_TAGS;
-import static org.acra.ACRAConstants.DEFAULT_LOGCAT_FILTER_BY_PID;
-import static org.acra.ACRAConstants.DEFAULT_LOGCAT_LINES;
-import static org.acra.ACRAConstants.DEFAULT_MAX_NUMBER_OF_REQUEST_RETRIES;
-import static org.acra.ACRAConstants.DEFAULT_NOTIFICATION_ICON;
-import static org.acra.ACRAConstants.DEFAULT_RES_VALUE;
-import static org.acra.ACRAConstants.DEFAULT_SEND_REPORTS_IN_DEV_MODE;
-import static org.acra.ACRAConstants.DEFAULT_SHARED_PREFERENCES_MODE;
-import static org.acra.ACRAConstants.DEFAULT_SOCKET_TIMEOUT;
-import static org.acra.ACRAConstants.DEFAULT_STRING_VALUE;
-import static org.acra.ACRAConstants.NULL_VALUE;
-
-import java.lang.annotation.Annotation;
-import java.util.Map;
-
+import android.util.Log;
 import org.acra.annotation.ReportsCrashes;
 import org.acra.sender.HttpSender;
 import org.acra.sender.HttpSender.Method;
 import org.acra.sender.HttpSender.Type;
+import org.acra.util.DefaultHttpsSocketFactoryFactory;
+import org.acra.util.HttpsSocketFactoryFactory;
+import org.acra.util.ReflectionException;
+import org.acra.util.ReflectionHelper;
+
+import java.lang.annotation.Annotation;
+import java.security.KeyStore;
+import java.util.Arrays;
+import java.util.List;
+import java.util.Map;
+
+import static org.acra.ACRA.LOG_TAG;
+import static org.acra.ACRAConstants.*;
 
 /**
  * This class is to be used if you need to apply dynamic settings. This is
  * needed for example when using ACRA in an Android Library Project since ADT
  * v14 where resource ids are not final anymore and can't be passed as
  * annotation parameters values.
- * 
  */
 public class ACRAConfiguration implements ReportsCrashes {
 
+    private final ReflectionHelper reflectionHelper = new ReflectionHelper();
+
     private String[] mAdditionalDropboxTags = null;
 
     private String[] mAdditionalSharedPreferences = null;
@@ -63,7 +53,6 @@
     private Boolean mDeleteOldUnsentReportsOnApplicationStart = null;
     private Integer mDropboxCollectionMinutes = null;
     private Boolean mForceCloseDialogAfterToast = null;
-    private String mFormKey = null;
     private String mFormUri = null;
     private String mFormUriBasicAuthLogin = null;
     private String mFormUriBasicAuthPassword = null;
@@ -74,7 +63,10 @@
     private Integer mMaxNumberOfRequestRetries = null;
     private ReportingInteractionMode mMode = null;
     private ReportsCrashes mReportsCrashes = null;
+    private Class<? extends BaseCrashReportDialog> mReportDialogClass = null;
 
+    private Integer mResDialogPositiveButtonText = null;
+    private Integer mResDialogNegativeButtonText = null;
     private Integer mResDialogCommentPrompt = null;
     private Integer mResDialogEmailPrompt = null;
     private Integer mResDialogIcon = null;
@@ -91,18 +83,21 @@
     private Integer mSocketTimeout = null;
     private Boolean mLogcatFilterByPid = null;
     private Boolean mSendReportsInDevMode = null;
+    private Boolean mSendReportsAtShutdown = null;
 
     private String[] mExcludeMatchingSharedPreferencesKeys = null;
     private String[] mExcludeMatchingSettingsKeys = null;
+    private Class mBuildConfigClass;
     private String mApplicationLogFile = null;
     private Integer mApplicationLogFileLines = null;
 
-    private String mGoogleFormUrlFormat = null;
-
     private Boolean mDisableSSLCertValidation = null;
+    private String mHttpsSocketFactoryFactoryClass = null;
+    private HttpsSocketFactoryFactory mHttpsSocketFactoryFactory;
     private Method mHttpMethod = null;
     private Type mReportType = null;
     private Map<String, String> mHttpHeaders;
+    private KeyStore mKeyStore;
 
     /**
      * Set custom HTTP headers to be sent by the provided {@link HttpSender}.
@@ -110,9 +105,11 @@
      * 
      * @param headers
      *            A map associating HTTP header names to their values.
+     * @return The updated ACRA configuration
      */
-    public void setHttpHeaders(Map<String, String> headers) {
+    public ACRAConfiguration setHttpHeaders(Map<String, String> headers) {
         this.mHttpHeaders = headers;
+        return this;
     }
 
     /**
@@ -126,80 +123,111 @@ public void setHttpHeaders(Map<String, String> headers) {
         return mHttpHeaders;
     }
 
+    /**
+     * @return List of ReportField that ACRA will provide to the server.
+     */
+    public List<ReportField> getReportFields() {
+        final ReportField[] customReportFields = customReportContent();
+
+        final ReportField[] fieldsList;
+        if (customReportFields.length != 0) {
+            Log.d(LOG_TAG, "Using custom Report Fields");
+            fieldsList = customReportFields;
+        } else if (mailTo() == null || "".equals(mailTo())) {
+            Log.d(LOG_TAG, "Using default Report Fields");
+            fieldsList = ACRAConstants.DEFAULT_REPORT_FIELDS;
+        } else {
+            Log.d(LOG_TAG, "Using default Mail Report Fields");
+            fieldsList = ACRAConstants.DEFAULT_MAIL_REPORT_FIELDS;
+        }
+        return Arrays.asList(fieldsList);
+    }
+
     /**
      * @param additionalDropboxTags
      *            the additionalDropboxTags to set
+     * @return The updated ACRA configuration
      */
-    public void setAdditionalDropboxTags(String[] additionalDropboxTags) {
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setAdditionalDropboxTags(String[] additionalDropboxTags) {
         this.mAdditionalDropboxTags = additionalDropboxTags;
+        return this;
     }
 
     /**
      * @param additionalSharedPreferences
      *            the additionalSharedPreferences to set
+     * @return The updated ACRA configuration
      */
-    public void setAdditionalSharedPreferences(String[] additionalSharedPreferences) {
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setAdditionalSharedPreferences(String[] additionalSharedPreferences) {
         this.mAdditionalSharedPreferences = additionalSharedPreferences;
+        return this;
     }
 
     /**
      * @param connectionTimeout
      *            the connectionTimeout to set
+     * @return The updated ACRA configuration
      */
-    public void setConnectionTimeout(Integer connectionTimeout) {
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setConnectionTimeout(Integer connectionTimeout) {
         this.mConnectionTimeout = connectionTimeout;
+        return this;
     }
 
     /**
      * @param customReportContent
      *            the customReportContent to set
+     * @return The updated ACRA configuration
      */
-    public void setCustomReportContent(ReportField[] customReportContent) {
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setCustomReportContent(ReportField[] customReportContent) {
         this.mCustomReportContent = customReportContent;
+        return this;
     }
 
     /**
      * @param deleteUnapprovedReportsOnApplicationStart
      *            the deleteUnapprovedReportsOnApplicationStart to set
+     * @return The updated ACRA configuration
      */
-    public void setDeleteUnapprovedReportsOnApplicationStart(Boolean deleteUnapprovedReportsOnApplicationStart) {
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setDeleteUnapprovedReportsOnApplicationStart(Boolean deleteUnapprovedReportsOnApplicationStart) {
         this.mDeleteUnapprovedReportsOnApplicationStart = deleteUnapprovedReportsOnApplicationStart;
+        return this;
     }
 
     /**
-     * @param deleteOldUnsetReportsOnApplicationStart
+     * @param deleteOldUnsentReportsOnApplicationStart    When to delete old (unsent) reports on startup.
+     * @return The updated ACRA configuration
      */
-    public void setDeleteOldUnsentReportsOnApplicationStart(Boolean deleteOldUnsetReportsOnApplicationStart) {
-        this.mDeleteOldUnsentReportsOnApplicationStart = deleteOldUnsetReportsOnApplicationStart;
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setDeleteOldUnsentReportsOnApplicationStart(Boolean deleteOldUnsentReportsOnApplicationStart) {
+        this.mDeleteOldUnsentReportsOnApplicationStart = deleteOldUnsentReportsOnApplicationStart;
+        return this;
     }
 
     /**
      * @param dropboxCollectionMinutes
      *            the dropboxCollectionMinutes to set
+     * @return The updated ACRA configuration
      */
-    public void setDropboxCollectionMinutes(Integer dropboxCollectionMinutes) {
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setDropboxCollectionMinutes(Integer dropboxCollectionMinutes) {
         this.mDropboxCollectionMinutes = dropboxCollectionMinutes;
+        return this;
     }
 
     /**
      * @param forceCloseDialogAfterToast
      *            the forceCloseDialogAfterToast to set
+     * @return The updated ACRA configuration
      */
-    public void setForceCloseDialogAfterToast(Boolean forceCloseDialogAfterToast) {
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setForceCloseDialogAfterToast(Boolean forceCloseDialogAfterToast) {
         this.mForceCloseDialogAfterToast = forceCloseDialogAfterToast;
-    }
-
-    /**
-     * Modify the formKey of the Google Docs form receiving reports. You need to
-     * call {@link ErrorReporter#setDefaultReportSenders()} after modifying this
-     * value if you were not using a formKey before (a mailTo or formUri
-     * instead).
-     * 
-     * @param formKey
-     *            the formKey to set
-     */
-    public void setFormKey(String formKey) {
-        this.mFormKey = formKey;
+        return this;
     }
 
     /**
@@ -210,41 +238,56 @@ public void setFormKey(String formKey) {
      * 
      * @param formUri
      *            the formUri to set
+     * @return The updated ACRA configuration
      */
-    public void setFormUri(String formUri) {
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setFormUri(String formUri) {
         this.mFormUri = formUri;
+        return this;
     }
 
     /**
      * @param formUriBasicAuthLogin
      *            the formUriBasicAuthLogin to set
+     * @return The updated ACRA configuration
      */
-    public void setFormUriBasicAuthLogin(String formUriBasicAuthLogin) {
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setFormUriBasicAuthLogin(String formUriBasicAuthLogin) {
         this.mFormUriBasicAuthLogin = formUriBasicAuthLogin;
+        return this;
     }
 
     /**
      * @param formUriBasicAuthPassword
      *            the formUriBasicAuthPassword to set
+     * @return The updated ACRA configuration
      */
-    public void setFormUriBasicAuthPassword(String formUriBasicAuthPassword) {
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setFormUriBasicAuthPassword(String formUriBasicAuthPassword) {
         this.mFormUriBasicAuthPassword = formUriBasicAuthPassword;
+        return this;
     }
 
     /**
      * @param includeDropboxSystemTags
      *            the includeDropboxSystemTags to set
+     * @return The updated ACRA configuration
      */
-    public void setIncludeDropboxSystemTags(Boolean includeDropboxSystemTags) {
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setIncludeDropboxSystemTags(Boolean includeDropboxSystemTags) {
         this.mIncludeDropboxSystemTags = includeDropboxSystemTags;
+        return this;
     }
 
     /**
      * @param logcatArguments
      *            the logcatArguments to set
+     * @return The updated ACRA configuration
      */
-    public void setLogcatArguments(String[] logcatArguments) {
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setLogcatArguments(String[] logcatArguments) {
         this.mLogcatArguments = logcatArguments;
+        return this;
     }
 
     /**
@@ -255,17 +298,23 @@ public void setLogcatArguments(String[] logcatArguments) {
      * 
      * @param mailTo
      *            the mailTo to set
+     * @return The updated ACRA configuration
      */
-    public void setMailTo(String mailTo) {
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setMailTo(String mailTo) {
         this.mMailTo = mailTo;
+        return this;
     }
 
     /**
      * @param maxNumberOfRequestRetries
      *            the maxNumberOfRequestRetries to set
+     * @return The updated ACRA configuration
      */
-    public void setMaxNumberOfRequestRetries(Integer maxNumberOfRequestRetries) {
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setMaxNumberOfRequestRetries(Integer maxNumberOfRequestRetries) {
         this.mMaxNumberOfRequestRetries = maxNumberOfRequestRetries;
+        return this;
     }
 
     /**
@@ -274,12 +323,33 @@ public void setMaxNumberOfRequestRetries(Integer maxNumberOfRequestRetries) {
      * 
      * @param mode
      *            the new mode to set.
+     * @return The updated ACRA configuration
      * @throws ACRAConfigurationException
      *             if a configuration item is missing for this mode.
      */
-    public void setMode(ReportingInteractionMode mode) throws ACRAConfigurationException {
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setMode(ReportingInteractionMode mode) throws ACRAConfigurationException {
         this.mMode = mode;
-        ACRA.checkCrashResources();
+        ACRA.checkCrashResources(this);
+        return this;
+    }
+
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setResDialogPositiveButtonText(int resId) {
+        mResDialogPositiveButtonText = resId;
+        return this;
+    }
+
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setResDialogNegativeButtonText(int resId) {
+        mResDialogNegativeButtonText = resId;
+        return this;
+    }
+
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setReportDialogClass(Class<? extends BaseCrashReportDialog> reportDialogClass) {
+        mReportDialogClass = reportDialogClass;
+        return this;
     }
 
     /**
@@ -290,9 +360,12 @@ public void setMode(ReportingInteractionMode mode) throws ACRAConfigurationExcep
      * @param resId
      *            The resource id, see
      *            {@link ReportsCrashes#resDialogCommentPrompt()}
+     * @return The updated ACRA configuration
      */
-    public void setResDialogCommentPrompt(int resId) {
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setResDialogCommentPrompt(int resId) {
         mResDialogCommentPrompt = resId;
+        return this;
     }
 
     /**
@@ -303,9 +376,12 @@ public void setResDialogCommentPrompt(int resId) {
      * @param resId
      *            The resource id, see
      *            {@link ReportsCrashes#resDialogEmailPrompt()}
+     * @return The updated ACRA configuration
      */
-    public void setResDialogEmailPrompt(int resId) {
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setResDialogEmailPrompt(int resId) {
         mResDialogEmailPrompt = resId;
+        return this;
     }
 
     /**
@@ -315,9 +391,12 @@ public void setResDialogEmailPrompt(int resId) {
      * 
      * @param resId
      *            The resource id, see {@link ReportsCrashes#resDialogIcon()}
+     * @return The updated ACRA configuration
      */
-    public void setResDialogIcon(int resId) {
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setResDialogIcon(int resId) {
         mResDialogIcon = resId;
+        return this;
     }
 
     /**
@@ -327,9 +406,12 @@ public void setResDialogIcon(int resId) {
      * 
      * @param resId
      *            The resource id, see {@link ReportsCrashes#resDialogOkToast()}
+     * @return The updated ACRA configuration
      */
-    public void setResDialogOkToast(int resId) {
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setResDialogOkToast(int resId) {
         mResDialogOkToast = resId;
+        return this;
     }
 
     /**
@@ -339,9 +421,12 @@ public void setResDialogOkToast(int resId) {
      * 
      * @param resId
      *            The resource id, see {@link ReportsCrashes#resDialogText()}
+     * @return The updated ACRA configuration
      */
-    public void setResDialogText(int resId) {
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setResDialogText(int resId) {
         mResDialogText = resId;
+        return this;
     }
 
     /**
@@ -351,9 +436,12 @@ public void setResDialogText(int resId) {
      * 
      * @param resId
      *            The resource id, see {@link ReportsCrashes#resDialogTitle()}
+     * @return The updated ACRA configuration
      */
-    public void setResDialogTitle(int resId) {
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setResDialogTitle(int resId) {
         mResDialogTitle = resId;
+        return this;
     }
 
     /**
@@ -363,9 +451,12 @@ public void setResDialogTitle(int resId) {
      * 
      * @param resId
      *            The resource id, see {@link ReportsCrashes#resNotifIcon()}
+     * @return The updated ACRA configuration
      */
-    public void setResNotifIcon(int resId) {
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setResNotifIcon(int resId) {
         mResNotifIcon = resId;
+        return this;
     }
 
     /**
@@ -375,9 +466,12 @@ public void setResNotifIcon(int resId) {
      * 
      * @param resId
      *            The resource id, see {@link ReportsCrashes#resNotifText()}
+     * @return The updated ACRA configuration
      */
-    public void setResNotifText(int resId) {
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setResNotifText(int resId) {
         mResNotifText = resId;
+        return this;
     }
 
     /**
@@ -388,9 +482,12 @@ public void setResNotifText(int resId) {
      * @param resId
      *            The resource id, see
      *            {@link ReportsCrashes#resNotifTickerText()}
+     * @return The updated ACRA configuration
      */
-    public void setResNotifTickerText(int resId) {
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setResNotifTickerText(int resId) {
         mResNotifTickerText = resId;
+        return this;
     }
 
     /**
@@ -400,9 +497,12 @@ public void setResNotifTickerText(int resId) {
      * 
      * @param resId
      *            The resource id, see {@link ReportsCrashes#resNotifTitle()}
+     * @return The updated ACRA configuration
      */
-    public void setResNotifTitle(int resId) {
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setResNotifTitle(int resId) {
         mResNotifTitle = resId;
+        return this;
     }
 
     /**
@@ -412,33 +512,45 @@ public void setResNotifTitle(int resId) {
      * 
      * @param resId
      *            The resource id, see {@link ReportsCrashes#resToastText()}
+     * @return The updated ACRA configuration
      */
-    public void setResToastText(int resId) {
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setResToastText(int resId) {
         mResToastText = resId;
+        return this;
     }
 
     /**
      * @param sharedPreferenceMode
      *            the sharedPreferenceMode to set
+     * @return The updated ACRA configuration
      */
-    public void setSharedPreferenceMode(Integer sharedPreferenceMode) {
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setSharedPreferenceMode(Integer sharedPreferenceMode) {
         this.mSharedPreferenceMode = sharedPreferenceMode;
+        return this;
     }
 
     /**
      * @param sharedPreferenceName
      *            the sharedPreferenceName to set
+     * @return The updated ACRA configuration
      */
-    public void setSharedPreferenceName(String sharedPreferenceName) {
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setSharedPreferenceName(String sharedPreferenceName) {
         this.mSharedPreferenceName = sharedPreferenceName;
+        return this;
     }
 
     /**
      * @param socketTimeout
      *            the socketTimeout to set
+     * @return The updated ACRA configuration
      */
-    public void setSocketTimeout(Integer socketTimeout) {
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setSocketTimeout(Integer socketTimeout) {
         this.mSocketTimeout = socketTimeout;
+        return this;
     }
 
     /**
@@ -446,9 +558,12 @@ public void setSocketTimeout(Integer socketTimeout) {
      * @param filterByPid
      *            true if you want to collect only logcat lines related to your
      *            application process.
+     * @return The updated ACRA configuration
      */
-    public void setLogcatFilterByPid(Boolean filterByPid) {
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setLogcatFilterByPid(Boolean filterByPid) {
         mLogcatFilterByPid = filterByPid;
+        return this;
     }
 
     /**
@@ -456,9 +571,26 @@ public void setLogcatFilterByPid(Boolean filterByPid) {
      * @param sendReportsInDevMode
      *            false if you want to disable sending reports in development
      *            mode. Reports will be sent only on signed applications.
+     * @return The updated ACRA configuration
      */
-    public void setSendReportsInDevMode(Boolean sendReportsInDevMode) {
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setSendReportsInDevMode(Boolean sendReportsInDevMode) {
         mSendReportsInDevMode = sendReportsInDevMode;
+        return this;
+    }
+
+    /**
+     * 
+     * @param sendReportsAtShutdown
+     *            false if you want to disable sending reports at the time the
+     *            exception is caught. Reports will be sent when the application
+     *            is restarted.
+     * @return The updated ACRA configuration
+     */
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setSendReportsAtShutdown(Boolean sendReportsAtShutdown) {
+        mSendReportsAtShutdown = sendReportsAtShutdown;
+        return this;
     }
 
     /**
@@ -467,9 +599,12 @@ public void setSendReportsInDevMode(Boolean sendReportsInDevMode) {
      *            an array of Strings containing regexp defining
      *            SharedPreferences keys that should be excluded from the data
      *            collection.
+     * @return The updated ACRA configuration
      */
-    public void setExcludeMatchingSharedPreferencesKeys(String[] excludeMatchingSharedPreferencesKeys) {
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setExcludeMatchingSharedPreferencesKeys(String[] excludeMatchingSharedPreferencesKeys) {
         mExcludeMatchingSharedPreferencesKeys = excludeMatchingSharedPreferencesKeys;
+        return this;
     }
 
     /**
@@ -478,19 +613,30 @@ public void setExcludeMatchingSharedPreferencesKeys(String[] excludeMatchingShar
      *            an array of Strings containing regexp defining
      *            Settings.System, Settings.Secure and Settings.Global keys that
      *            should be excluded from the data collection.
+     * @return The updated ACRA configuration
      */
-    public void setExcludeMatchingSettingsKeys(String[] excludeMatchingSettingsKeys) {
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setExcludeMatchingSettingsKeys(String[] excludeMatchingSettingsKeys) {
         mExcludeMatchingSettingsKeys = excludeMatchingSettingsKeys;
+        return this;
     }
 
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setBuildConfigClass(Class buildConfigClass) {
+        mBuildConfigClass = buildConfigClass;
+        return this;
+    }
     /**
      * 
      * @param applicationLogFile
      *            The path and file name of your application log file, to be
      *            used with {@link ReportField#APPLICATION_LOG}.
+     * @return The updated ACRA configuration
      */
-    public void setApplicationLogFile(String applicationLogFile) {
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setApplicationLogFile(String applicationLogFile) {
         mApplicationLogFile = applicationLogFile;
+        return this;
     }
 
     /**
@@ -499,9 +645,12 @@ public void setApplicationLogFile(String applicationLogFile) {
      *            The number of lines of your application log to be collected,
      *            to be used with {@link ReportField#APPLICATION_LOG} and
      *            {@link ReportsCrashes#applicationLogFile()}.
+     * @return The updated ACRA configuration
      */
-    public void setApplicationLogFileLines(int applicationLogFileLines) {
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setApplicationLogFileLines(int applicationLogFileLines) {
         mApplicationLogFileLines = applicationLogFileLines;
+        return this;
     }
 
     /**
@@ -509,18 +658,23 @@ public void setApplicationLogFileLines(int applicationLogFileLines) {
      * @param disableSSLCertValidation
      *            Set this to true if you need to send reports to a server over
      *            SSL using a self-signed certificate.
+     * @return The updated ACRA configuration
      */
-    public void setDisableSSLCertValidation(boolean disableSSLCertValidation) {
+    public ACRAConfiguration setDisableSSLCertValidation(boolean disableSSLCertValidation) {
         mDisableSSLCertValidation = disableSSLCertValidation;
+        return this;
     }
 
     /**
      * 
      * @param httpMethod
      *            The method to be used to send data to the server.
+     * @return The updated ACRA configuration
      */
-    public void setHttpMethod(Method httpMethod) {
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setHttpMethod(Method httpMethod) {
         mHttpMethod = httpMethod;
+        return this;
     }
 
     /**
@@ -528,19 +682,39 @@ public void setHttpMethod(Method httpMethod) {
      * @param type
      *            The type of content encoding to be used to send data to the
      *            server.
+     * @return The updated ACRA configuration
      */
-    public void setReportType(Type type) {
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration setReportType(Type type) {
         mReportType = type;
+        return this;
     }
 
     /**
      * 
-     * @param defaults
+     * @param keyStore
+     *            Set this to the keystore that contains the trusted certificates
+     */
+    @SuppressWarnings( "unused" )
+    public void setKeyStore(KeyStore keyStore) {
+        mKeyStore = keyStore;
+    }
+
+    /**
+     * @param defaults  Defaults with which to initialise this {@link ACRAConfiguration}.
      */
     public ACRAConfiguration(ReportsCrashes defaults) {
         mReportsCrashes = defaults;
     }
 
+    /**
+     * Empty constructor which sets no defaults.
+     */
+    @SuppressWarnings( "unused" )
+    public ACRAConfiguration(){
+        this(null);
+    }
+
     @Override
     public String[] additionalDropBoxTags() {
         if (mAdditionalDropboxTags != null) {
@@ -551,8 +725,7 @@ public ACRAConfiguration(ReportsCrashes defaults) {
             return mReportsCrashes.additionalDropBoxTags();
         }
 
-        String[] defaultValue = {};
-        return defaultValue;
+        return new String[0];
     }
 
     @Override
@@ -565,8 +738,7 @@ public ACRAConfiguration(ReportsCrashes defaults) {
             return mReportsCrashes.additionalSharedPreferences();
         }
 
-        String[] defaultValue = {};
-        return defaultValue;
+        return new String[0];
     }
 
     @Override
@@ -597,8 +769,7 @@ public int connectionTimeout() {
             return mReportsCrashes.customReportContent();
         }
 
-        ReportField[] defaultValue = {};
-        return defaultValue;
+        return new ReportField[0];
     }
 
     @Override
@@ -653,19 +824,6 @@ public boolean forceCloseDialogAfterToast() {
         return DEFAULT_FORCE_CLOSE_DIALOG_AFTER_TOAST;
     }
 
-    @Override
-    public String formKey() {
-        if (mFormKey != null) {
-            return mFormKey;
-        }
-
-        if (mReportsCrashes != null) {
-            return mReportsCrashes.formKey();
-        }
-
-        return DEFAULT_STRING_VALUE;
-    }
-
     @Override
     public String formUri() {
         if (mFormUri != null) {
@@ -728,8 +886,7 @@ public boolean includeDropBoxSystemTags() {
             return mReportsCrashes.logcatArguments();
         }
 
-        String[] defaultValues = { "-t", Integer.toString(DEFAULT_LOGCAT_LINES), "-v", "time" };
-        return defaultValues;
+        return new String[] { "-t", Integer.toString(DEFAULT_LOGCAT_LINES), "-v", "time" };
     }
 
     @Override
@@ -771,6 +928,32 @@ public ReportingInteractionMode mode() {
         return ReportingInteractionMode.SILENT;
     }
 
+    @Override
+    public int resDialogPositiveButtonText() {
+        if (mResDialogPositiveButtonText != null) {
+            return mResDialogPositiveButtonText;
+        }
+
+        if (mReportsCrashes != null) {
+            return mReportsCrashes.resDialogPositiveButtonText();
+        }
+
+        return DEFAULT_RES_VALUE;
+    }
+
+    @Override
+    public int resDialogNegativeButtonText() {
+        if (mResDialogNegativeButtonText != null) {
+            return mResDialogNegativeButtonText;
+        }
+
+        if (mReportsCrashes != null) {
+            return mReportsCrashes.resDialogNegativeButtonText();
+        }
+
+        return DEFAULT_RES_VALUE;
+    }
+
     @Override
     public int resDialogCommentPrompt() {
         if (mResDialogCommentPrompt != null) {
@@ -979,6 +1162,19 @@ public boolean sendReportsInDevMode() {
         return DEFAULT_SEND_REPORTS_IN_DEV_MODE;
     }
 
+    @Override
+    public boolean sendReportsAtShutdown() {
+        if (mSendReportsAtShutdown != null) {
+            return mSendReportsAtShutdown;
+        }
+
+        if (mReportsCrashes != null) {
+            return mReportsCrashes.sendReportsAtShutdown();
+        }
+
+        return DEFAULT_SEND_REPORTS_AT_SHUTDOWN;
+    }
+
     @Override
     public String[] excludeMatchingSharedPreferencesKeys() {
         if (mExcludeMatchingSharedPreferencesKeys != null) {
@@ -989,9 +1185,7 @@ public boolean sendReportsInDevMode() {
             return mReportsCrashes.excludeMatchingSharedPreferencesKeys();
         }
 
-        String[] defaultValue = {};
-
-        return defaultValue;
+        return new String[0];
     }
 
     @Override
@@ -1004,9 +1198,24 @@ public boolean sendReportsInDevMode() {
             return mReportsCrashes.excludeMatchingSettingsKeys();
         }
 
-        String[] defaultValue = {};
+        return new String[0];
+    }
+
+    @Override
+    /**
+     * Will return null if no value has been configured.
+     * It is up to clients to construct the recommended default value oof context.getClass().getPackage().getName() + BuildConfig.class
+     */
+    public Class buildConfigClass() {
+        if (mBuildConfigClass != null) {
+            return mBuildConfigClass;
+        }
 
-        return defaultValue;
+        if ((mReportsCrashes != null) && (mReportsCrashes.buildConfigClass() != null)) {
+            return mReportsCrashes.buildConfigClass();
+        }
+
+        return null;
     }
 
     @Override
@@ -1036,31 +1245,81 @@ public int applicationLogFileLines() {
     }
 
     @Override
-    public String googleFormUrlFormat() {
-        if (mGoogleFormUrlFormat != null) {
-            return mGoogleFormUrlFormat;
+    public boolean disableSSLCertValidation() {
+        if (mDisableSSLCertValidation != null) {
+            return mDisableSSLCertValidation;
         }
 
         if (mReportsCrashes != null) {
-            return mReportsCrashes.googleFormUrlFormat();
+            return mReportsCrashes.disableSSLCertValidation();
         }
 
-        return DEFAULT_GOOGLE_FORM_URL_FORMAT;
+        return DEFAULT_DISABLE_SSL_CERT_VALIDATION;
     }
 
     @Override
-    public boolean disableSSLCertValidation() {
-        if (mDisableSSLCertValidation != null) {
-            return mDisableSSLCertValidation;
+    public String httpsSocketFactoryFactoryClass() {
+        if (mHttpsSocketFactoryFactoryClass != null) {
+            return mHttpsSocketFactoryFactoryClass;
         }
 
         if (mReportsCrashes != null) {
-            return mReportsCrashes.disableSSLCertValidation();
+            return mReportsCrashes.httpsSocketFactoryFactoryClass();
         }
 
-        return DEFAULT_DISABLE_SSL_CERT_VALIDATION;
+        return null;
+    }
+
+
+    @Override
+    public Class<? extends BaseCrashReportDialog> reportDialogClass() {
+        if (mReportDialogClass != null) {
+            return mReportDialogClass;
+        }
+
+        if (mReportsCrashes != null) {
+            return mReportsCrashes.reportDialogClass();
+        }
+
+        return CrashReportDialog.class;
+    }
+
+    /**
+     * @param httpsSocketFactoryFactory  HttpsSocketFactoryFactory to set.
+     */
+    @SuppressWarnings( "unused" )
+    public void setHttpsSocketFactoryFactory(HttpsSocketFactoryFactory httpsSocketFactoryFactory) {
+        this.mHttpsSocketFactoryFactory = httpsSocketFactoryFactory;
     }
 
+    public HttpsSocketFactoryFactory getHttpSocketFactoryFactory() {
+        if (mHttpsSocketFactoryFactory != null) {
+            return mHttpsSocketFactoryFactory;
+        }
+
+        final String httpsSocketFactoryFactoryClass = httpsSocketFactoryFactoryClass();
+        if (httpsSocketFactoryFactoryClass != null) {
+            try {
+                final Object object = reflectionHelper.create(mReportsCrashes.httpsSocketFactoryFactoryClass());
+                if (object instanceof HttpsSocketFactoryFactory) {
+                    mHttpsSocketFactoryFactory = (HttpsSocketFactoryFactory) object;
+                } else {
+                    ACRA.log.w(ACRA.LOG_TAG, "Using default httpsSocketFactoryFactory - not a HttpSocketFactoryFactory : " + httpsSocketFactoryFactoryClass);
+                }
+            } catch (ReflectionException e) {
+                ACRA.log.w(ACRA.LOG_TAG, "Using default httpsSocketFactoryFactory - Could not construct : " + httpsSocketFactoryFactoryClass);
+            }
+        }
+
+        // If it's still null then take the default
+        if (mHttpsSocketFactoryFactoryClass == null) {
+            mHttpsSocketFactoryFactory = DefaultHttpsSocketFactoryFactory.INSTANCE;
+        }
+
+        return mHttpsSocketFactoryFactory;
+    }
+
+
     @Override
     public Method httpMethod() {
         if (mHttpMethod != null) {
@@ -1087,6 +1346,14 @@ public Type reportType() {
         return Type.FORM;
     }
 
+    public KeyStore keyStore() {
+        if (mKeyStore != null) {
+            return mKeyStore;
+        }
+
+        return null;
+    }
+
     public static boolean isNull(String aString) {
         return aString == null || ACRAConstants.NULL_VALUE.equals(aString);
     }
diff --git a/src/main/java/org/acra/ACRAConstants.java b/src/main/java/org/acra/ACRAConstants.java
index 3b3a9507..d34f3acf 100644
--- a/src/main/java/org/acra/ACRAConstants.java
+++ b/src/main/java/org/acra/ACRAConstants.java
@@ -15,42 +15,12 @@
  */
 package org.acra;
 
-import static org.acra.ReportField.ANDROID_VERSION;
-import static org.acra.ReportField.APP_VERSION_CODE;
-import static org.acra.ReportField.APP_VERSION_NAME;
-import static org.acra.ReportField.AVAILABLE_MEM_SIZE;
-import static org.acra.ReportField.BRAND;
-import static org.acra.ReportField.BUILD;
-import static org.acra.ReportField.CRASH_CONFIGURATION;
-import static org.acra.ReportField.CUSTOM_DATA;
-import static org.acra.ReportField.DEVICE_FEATURES;
-import static org.acra.ReportField.DISPLAY;
-import static org.acra.ReportField.DUMPSYS_MEMINFO;
-import static org.acra.ReportField.ENVIRONMENT;
-import static org.acra.ReportField.FILE_PATH;
-import static org.acra.ReportField.INITIAL_CONFIGURATION;
-import static org.acra.ReportField.INSTALLATION_ID;
-import static org.acra.ReportField.IS_SILENT;
-import static org.acra.ReportField.LOGCAT;
-import static org.acra.ReportField.PACKAGE_NAME;
-import static org.acra.ReportField.PHONE_MODEL;
-import static org.acra.ReportField.PRODUCT;
-import static org.acra.ReportField.REPORT_ID;
-import static org.acra.ReportField.SETTINGS_GLOBAL;
-import static org.acra.ReportField.SETTINGS_SECURE;
-import static org.acra.ReportField.SETTINGS_SYSTEM;
-import static org.acra.ReportField.SHARED_PREFERENCES;
-import static org.acra.ReportField.STACK_TRACE;
-import static org.acra.ReportField.TOTAL_MEM_SIZE;
-import static org.acra.ReportField.USER_APP_START_DATE;
-import static org.acra.ReportField.USER_COMMENT;
-import static org.acra.ReportField.USER_CRASH_DATE;
-import static org.acra.ReportField.USER_EMAIL;
 import android.content.Context;
 
+import static org.acra.ReportField.*;
+
 /**
  * Responsible for collating those constants shared among the ACRA components.
- * <p/>
  * 
  * @author William Ferguson
  * @since 4.3.0
@@ -75,12 +45,20 @@
      * The number of reports is limited to avoid ANR on application start.
      */
     static final int MAX_SEND_REPORTS = 5;
+
     /**
      * Used in the intent starting CrashReportDialog to provide the name of the
      * latest generated report file in order to be able to associate the user
      * comment.
      */
-    protected static final String EXTRA_REPORT_FILE_NAME = "REPORT_FILE_NAME";
+    public static final String EXTRA_REPORT_FILE_NAME = "REPORT_FILE_NAME";
+    /**
+     * Used in the intent starting CrashReportDialog to provide the Exception that caused the crash.
+     *
+     * This can be used by any BaseCrashReportDialog subclass to custom the dialog.
+     */
+    public static final String EXTRA_REPORT_EXCEPTION = "REPORT_EXCEPTION";
+
     /**
      * Set this extra to true to force the deletion of reports by the
      * {@link CrashReportDialog} activity.
@@ -94,7 +72,7 @@
     /**
      * Number of milliseconds to wait after displaying a toast.
      */
-    static final int TOAST_WAIT_DURATION = 3000;
+    static final int TOAST_WAIT_DURATION = 2000;
 
     /**
      * A special String value to allow the usage of a pseudo-null default value
@@ -124,6 +102,10 @@
 
     public static final int DEFAULT_DIALOG_ICON = android.R.drawable.ic_dialog_alert;
 
+    public static final int DEFAULT_DIALOG_POSITIVE_BUTTON_TEXT = android.R.string.ok;
+
+    public static final int DEFAULT_DIALOG_NEGATIVE_BUTTON_TEXT = android.R.string.cancel;
+
     public static final int DEFAULT_RES_VALUE = 0;
 
     public static final String DEFAULT_STRING_VALUE = "";
@@ -136,14 +118,16 @@
 
     public static final boolean DEFAULT_SEND_REPORTS_IN_DEV_MODE = true;
 
+    public static final boolean DEFAULT_SEND_REPORTS_AT_SHUTDOWN = true;
+
     public static final String DEFAULT_APPLICATION_LOGFILE = DEFAULT_STRING_VALUE;
 
     public static final int DEFAULT_APPLICATION_LOGFILE_LINES = DEFAULT_LOGCAT_LINES;
 
-    public static final String DEFAULT_GOOGLE_FORM_URL_FORMAT = "https://docs.google.com/spreadsheet/formResponse?formkey=%s&ifq";
-
     public static final boolean DEFAULT_DISABLE_SSL_CERT_VALIDATION = false;
 
+    public static final String DEFAULT_HTTP_SOCKET_FACTORY_FACTORY_CLASS = "org.acra.util.DefaultHttpsSocketFactoryFactory";
+
     /**
      * Default list of {@link ReportField}s to be sent in email reports. You can
      * set your own list with
@@ -161,8 +145,10 @@
      */
     public static final ReportField[] DEFAULT_REPORT_FIELDS = { REPORT_ID, APP_VERSION_CODE, APP_VERSION_NAME,
             PACKAGE_NAME, FILE_PATH, PHONE_MODEL, BRAND, PRODUCT, ANDROID_VERSION, BUILD, TOTAL_MEM_SIZE,
-            AVAILABLE_MEM_SIZE, CUSTOM_DATA, IS_SILENT, STACK_TRACE, INITIAL_CONFIGURATION, CRASH_CONFIGURATION,
+            AVAILABLE_MEM_SIZE, BUILD_CONFIG, CUSTOM_DATA, IS_SILENT, STACK_TRACE, INITIAL_CONFIGURATION, CRASH_CONFIGURATION,
             DISPLAY, USER_COMMENT, USER_EMAIL, USER_APP_START_DATE, USER_CRASH_DATE, DUMPSYS_MEMINFO, LOGCAT,
             INSTALLATION_ID, DEVICE_FEATURES, ENVIRONMENT, SHARED_PREFERENCES, SETTINGS_SYSTEM, SETTINGS_SECURE,
             SETTINGS_GLOBAL };
+
+    public static final String DATE_TIME_FORMAT_STRING = "yyyy-MM-dd'T'HH:mm:ss.SSSZZZZZ";
 }
diff --git a/src/main/java/org/acra/BaseCrashReportDialog.java b/src/main/java/org/acra/BaseCrashReportDialog.java
new file mode 100644
index 00000000..6bb1f618
--- /dev/null
+++ b/src/main/java/org/acra/BaseCrashReportDialog.java
@@ -0,0 +1,91 @@
+package org.acra;
+
+import android.app.Activity;
+import android.os.Bundle;
+import android.util.Log;
+import android.widget.Toast;
+import org.acra.collector.CrashReportData;
+import org.acra.util.ToastSender;
+
+import java.io.IOException;
+
+import static org.acra.ACRA.LOG_TAG;
+import static org.acra.ReportField.USER_COMMENT;
+import static org.acra.ReportField.USER_EMAIL;
+
+/**
+ * Activity which implements the base functionality for a CrashReportDialog
+ * Activities which extend from this class can override onCreate() to create a custom view,
+ * but they must call super.onCreate() at the beginning of the method.
+ *
+ * The methods sendCrash(comment, usrEmail) and cancelReports() can be used to send or cancel
+ * sending of reports respectively.
+ *
+ * This Activity will be instantiated with 2 arguments:
+ * <ol>
+ *     <li>{@link ACRAConstants#EXTRA_REPORT_FILE_NAME}</li>
+ *     <li>{@link ACRAConstants#EXTRA_REPORT_EXCEPTION}</li>
+ * </ol>
+ */
+public abstract class BaseCrashReportDialog extends Activity {
+
+    private String mReportFileName;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+
+        ACRA.log.d(ACRA.LOG_TAG, "CrashReportDialog extras=" + getIntent().getExtras());
+
+        final boolean forceCancel = getIntent().getBooleanExtra(ACRAConstants.EXTRA_FORCE_CANCEL, false);
+        if (forceCancel) {
+            ACRA.log.d(ACRA.LOG_TAG, "Forced reports deletion.");
+            cancelReports();
+            finish();
+            return;
+        }
+
+        mReportFileName = getIntent().getStringExtra(ACRAConstants.EXTRA_REPORT_FILE_NAME);
+        Log.d(LOG_TAG, "Opening CrashReportDialog for " + mReportFileName);
+        if (mReportFileName == null) {
+            finish();
+        }
+    }
+
+
+    /**
+     * Cancel any pending crash reports
+     */
+    protected void cancelReports() {
+        ACRA.getErrorReporter().deletePendingNonApprovedReports(false);
+    }
+
+
+    /**
+     * Send crash report given user's comment and email address. If none should be empty strings
+     * @param comment       Comment (may be null) provided by the user.
+     * @param userEmail     Email address (may be null) provided by the client.
+     */
+    protected void sendCrash(String comment, String userEmail) {
+        final CrashReportPersister persister = new CrashReportPersister(getApplicationContext());
+        try {
+            Log.d(LOG_TAG, "Add user comment to " + mReportFileName);
+            final CrashReportData crashData = persister.load(mReportFileName);
+            crashData.put(USER_COMMENT, comment == null ? "" : comment);
+            crashData.put(USER_EMAIL, userEmail == null ? "" : userEmail);
+            persister.store(crashData, mReportFileName);
+        } catch (IOException e) {
+            Log.w(LOG_TAG, "User comment not added: ", e);
+        }
+
+        // Start the report sending task
+        Log.v(ACRA.LOG_TAG, "About to start SenderWorker from CrashReportDialog");
+        ACRA.getErrorReporter().startSendingReports(false, true);
+
+        // Optional Toast to thank the user
+        final int toastId = ACRA.getConfig().resDialogOkToast();
+        if (toastId != 0) {
+            ToastSender.sendToast(getApplicationContext(), toastId, Toast.LENGTH_LONG);
+        }
+    }
+}
diff --git a/src/main/java/org/acra/CrashReportDialog.java b/src/main/java/org/acra/CrashReportDialog.java
index 27b8a1d2..92a3ca42 100644
--- a/src/main/java/org/acra/CrashReportDialog.java
+++ b/src/main/java/org/acra/CrashReportDialog.java
@@ -1,82 +1,56 @@
 package org.acra;
 
-import static org.acra.ACRA.LOG_TAG;
-import static org.acra.ReportField.USER_COMMENT;
-import static org.acra.ReportField.USER_EMAIL;
-
-import java.io.IOException;
-
-import org.acra.collector.CrashReportData;
-import org.acra.util.ToastSender;
-
-import android.app.Activity;
 import android.app.AlertDialog;
-import android.app.NotificationManager;
 import android.content.DialogInterface;
-import android.content.DialogInterface.OnDismissListener;
 import android.content.SharedPreferences;
-import android.content.SharedPreferences.Editor;
 import android.os.Bundle;
 import android.text.InputType;
-import android.util.Log;
 import android.view.View;
 import android.view.ViewGroup.LayoutParams;
 import android.widget.EditText;
 import android.widget.LinearLayout;
 import android.widget.ScrollView;
 import android.widget.TextView;
-import android.widget.Toast;
+
 
 /**
  * This is the dialog Activity used by ACRA to get authorization from the user
  * to send reports. Requires android:launchMode="singleInstance" in your
  * AndroidManifest to work properly.
  **/
-public class CrashReportDialog extends Activity implements DialogInterface.OnClickListener, OnDismissListener {
+public class CrashReportDialog extends BaseCrashReportDialog implements DialogInterface.OnClickListener, DialogInterface.OnDismissListener {
+
     private static final String STATE_EMAIL = "email";
     private static final String STATE_COMMENT = "comment";
-    private SharedPreferences prefs;
-    private EditText userComment;
-    private EditText userEmail;
-    String mReportFileName;
+    private EditText userCommentView;
+    private EditText userEmailView;
+
     AlertDialog mDialog;
 
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         super.onCreate(savedInstanceState);
-        boolean forceCancel = getIntent().getBooleanExtra(ACRAConstants.EXTRA_FORCE_CANCEL, false);
-        if(forceCancel) {
-            ACRA.log.d(ACRA.LOG_TAG, "Forced reports deletion.");
-            cancelReports();
-            finish();
-            return;
-        }
 
-        mReportFileName = getIntent().getStringExtra(ACRAConstants.EXTRA_REPORT_FILE_NAME);
-        Log.d(LOG_TAG, "Opening CrashReportDialog for " + mReportFileName);
-        if (mReportFileName == null) {
-            finish();
-        }
-        AlertDialog.Builder dialogBuilder = new AlertDialog.Builder(this);
-        int resourceId = ACRA.getConfig().resDialogTitle();
-        if(resourceId != 0) {
-            dialogBuilder.setTitle(resourceId);
+        final AlertDialog.Builder dialogBuilder = new AlertDialog.Builder(this);
+        final int titleResourceId = ACRA.getConfig().resDialogTitle();
+        if (titleResourceId != 0) {
+            dialogBuilder.setTitle(titleResourceId);
         }
-        resourceId = ACRA.getConfig().resDialogIcon();
-        if(resourceId != 0) {
-            dialogBuilder.setIcon(resourceId);
+        final int iconResourceId = ACRA.getConfig().resDialogIcon();
+        if (iconResourceId != 0) {
+            dialogBuilder.setIcon(iconResourceId);
         }
         dialogBuilder.setView(buildCustomView(savedInstanceState));
-        dialogBuilder.setPositiveButton(android.R.string.ok, CrashReportDialog.this);
-        dialogBuilder.setNegativeButton(android.R.string.cancel, CrashReportDialog.this);
-        cancelNotification();
+        dialogBuilder.setPositiveButton(getText(ACRA.getConfig().resDialogPositiveButtonText()), CrashReportDialog.this);
+        dialogBuilder.setNegativeButton(getText(ACRA.getConfig().resDialogNegativeButtonText()), CrashReportDialog.this);
+
         mDialog = dialogBuilder.create();
         mDialog.setCanceledOnTouchOutside(false);
         mDialog.setOnDismissListener(this);
         mDialog.show();
     }
 
-    private View buildCustomView(Bundle savedInstanceState) {
+    protected View buildCustomView(Bundle savedInstanceState) {
         final LinearLayout root = new LinearLayout(this);
         root.setOrientation(LinearLayout.VERTICAL);
         root.setPadding(10, 10, 10, 10);
@@ -107,15 +81,15 @@ private View buildCustomView(Bundle savedInstanceState) {
             scrollable.addView(label, new LinearLayout.LayoutParams(LayoutParams.MATCH_PARENT,
                     LayoutParams.WRAP_CONTENT));
 
-            userComment = new EditText(this);
-            userComment.setLines(2);
+            userCommentView = new EditText(this);
+            userCommentView.setLines(2);
             if (savedInstanceState != null) {
                 String savedValue = savedInstanceState.getString(STATE_COMMENT);
                 if (savedValue != null) {
-                    userComment.setText(savedValue);
+                    userCommentView.setText(savedValue);
                 }
             }
-            scrollable.addView(userComment);
+            scrollable.addView(userCommentView);
         }
 
         // Add an optional user email field
@@ -127,84 +101,55 @@ private View buildCustomView(Bundle savedInstanceState) {
             label.setPadding(label.getPaddingLeft(), 10, label.getPaddingRight(), label.getPaddingBottom());
             scrollable.addView(label);
 
-            userEmail = new EditText(this);
-            userEmail.setSingleLine();
-            userEmail.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_EMAIL_ADDRESS);
+            userEmailView = new EditText(this);
+            userEmailView.setSingleLine();
+            userEmailView.setInputType(InputType.TYPE_CLASS_TEXT | InputType.TYPE_TEXT_VARIATION_EMAIL_ADDRESS);
 
-            prefs = getSharedPreferences(ACRA.getConfig().sharedPreferencesName(), ACRA.getConfig()
-                    .sharedPreferencesMode());
             String savedValue = null;
             if (savedInstanceState != null) {
                 savedValue = savedInstanceState.getString(STATE_EMAIL);
             }
             if (savedValue != null) {
-                userEmail.setText(savedValue);
+                userEmailView.setText(savedValue);
             } else {
-                userEmail.setText(prefs.getString(ACRA.PREF_USER_EMAIL_ADDRESS, ""));
+                final SharedPreferences prefs = ACRA.getACRASharedPreferences();
+                userEmailView.setText(prefs.getString(ACRA.PREF_USER_EMAIL_ADDRESS, ""));
             }
-            scrollable.addView(userEmail);
+            scrollable.addView(userEmailView);
         }
 
         return root;
     }
 
-    /**
-     * Disable the notification in the Status Bar.
-     */
-    protected void cancelNotification() {
-        final NotificationManager notificationManager = (NotificationManager) getSystemService(NOTIFICATION_SERVICE);
-        notificationManager.cancel(ACRAConstants.NOTIF_CRASH_ID);
-    }
-
     @Override
     public void onClick(DialogInterface dialog, int which) {
-        if (which == DialogInterface.BUTTON_POSITIVE)
-            sendCrash();
-        else {
+        if (which == DialogInterface.BUTTON_POSITIVE) {
+            // Retrieve user comment
+            final String comment = userCommentView != null ? userCommentView.getText().toString() : "";
+
+            // Store the user email
+            final String userEmail;
+            final SharedPreferences prefs = ACRA.getACRASharedPreferences();
+            if (userEmailView != null) {
+                userEmail = userEmailView.getText().toString();
+                final SharedPreferences.Editor prefEditor = prefs.edit();
+                prefEditor.putString(ACRA.PREF_USER_EMAIL_ADDRESS, userEmail);
+                prefEditor.commit();
+            } else {
+                userEmail = prefs.getString(ACRA.PREF_USER_EMAIL_ADDRESS, "");
+            }
+            sendCrash(comment, userEmail);
+        } else {
             cancelReports();
         }
-        finish();
-    }
 
-    private void cancelReports() {
-        ACRA.getErrorReporter().deletePendingNonApprovedReports(false);
+        finish();
     }
 
-    private void sendCrash() {
-        // Retrieve user comment
-        final String comment = userComment != null ? userComment.getText().toString() : "";
-
-        // Store the user email
-        final String usrEmail;
-        if (prefs != null && userEmail != null) {
-            usrEmail = userEmail.getText().toString();
-            final Editor prefEditor = prefs.edit();
-            prefEditor.putString(ACRA.PREF_USER_EMAIL_ADDRESS, usrEmail);
-            prefEditor.commit();
-        } else {
-            usrEmail = "";
-        }
-
-        final CrashReportPersister persister = new CrashReportPersister(getApplicationContext());
-        try {
-            Log.d(LOG_TAG, "Add user comment to " + mReportFileName);
-            final CrashReportData crashData = persister.load(mReportFileName);
-            crashData.put(USER_COMMENT, comment);
-            crashData.put(USER_EMAIL, usrEmail);
-            persister.store(crashData, mReportFileName);
-        } catch (IOException e) {
-            Log.w(LOG_TAG, "User comment not added: ", e);
-        }
-
-        // Start the report sending task
-        Log.v(ACRA.LOG_TAG, "About to start SenderWorker from CrashReportDialog");
-        ACRA.getErrorReporter().startSendingReports(false, true);
 
-        // Optional Toast to thank the user
-        final int toastId = ACRA.getConfig().resDialogOkToast();
-        if (toastId != 0) {
-            ToastSender.sendToast(getApplicationContext(), toastId, Toast.LENGTH_LONG);
-        }
+    @Override
+    public void onDismiss(DialogInterface dialog) {
+        finish();
     }
 
     /*
@@ -215,16 +160,11 @@ private void sendCrash() {
     @Override
     protected void onSaveInstanceState(Bundle outState) {
         super.onSaveInstanceState(outState);
-        if (userComment != null && userComment.getText() != null) {
-            outState.putString(STATE_COMMENT, userComment.getText().toString());
+        if (userCommentView != null && userCommentView.getText() != null) {
+            outState.putString(STATE_COMMENT, userCommentView.getText().toString());
         }
-        if (userEmail != null && userEmail.getText() != null) {
-            outState.putString(STATE_EMAIL, userEmail.getText().toString());
+        if (userEmailView != null && userEmailView.getText() != null) {
+            outState.putString(STATE_EMAIL, userEmailView.getText().toString());
         }
     }
-
-    @Override
-    public void onDismiss(DialogInterface dialog) {
-        finish();
-    }
 }
\ No newline at end of file
diff --git a/src/main/java/org/acra/CrashReportPersister.java b/src/main/java/org/acra/CrashReportPersister.java
index 3ff6fd95..8f94084b 100644
--- a/src/main/java/org/acra/CrashReportPersister.java
+++ b/src/main/java/org/acra/CrashReportPersister.java
@@ -20,6 +20,8 @@
 package org.acra;
 
 import android.content.Context;
+
+import org.acra.collector.CollectorUtil;
 import org.acra.collector.CrashReportData;
 
 import java.io.BufferedInputStream;
@@ -321,6 +323,8 @@ private synchronized CrashReportData load(Reader reader) throws IOException {
             }
             crashData.put(key, value);
         }
+        
+        CollectorUtil.safeClose(reader);
 
         return crashData;
     }
diff --git a/src/main/java/org/acra/ErrorReporter.java b/src/main/java/org/acra/ErrorReporter.java
index df6fff24..3dec4909 100644
--- a/src/main/java/org/acra/ErrorReporter.java
+++ b/src/main/java/org/acra/ErrorReporter.java
@@ -15,29 +15,6 @@
  */
 package org.acra;
 
-import static org.acra.ACRA.LOG_TAG;
-import static org.acra.ReportField.IS_SILENT;
-
-import java.io.File;
-import java.lang.Thread.UncaughtExceptionHandler;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
-
-import org.acra.annotation.ReportsCrashes;
-import org.acra.collector.Compatibility;
-import org.acra.collector.ConfigurationCollector;
-import org.acra.collector.CrashReportData;
-import org.acra.collector.CrashReportDataFactory;
-import org.acra.jraf.android.util.activitylifecyclecallbackscompat.ActivityLifecycleCallbacksCompat;
-import org.acra.jraf.android.util.activitylifecyclecallbackscompat.ApplicationHelper;
-import org.acra.sender.EmailIntentSender;
-import org.acra.sender.GoogleFormSender;
-import org.acra.sender.HttpSender;
-import org.acra.sender.ReportSender;
-import org.acra.util.PackageManagerWrapper;
-import org.acra.util.ToastSender;
-
 import android.Manifest.permission;
 import android.app.Activity;
 import android.app.Application;
@@ -53,6 +30,30 @@
 import android.text.format.Time;
 import android.util.Log;
 import android.widget.Toast;
+import org.acra.annotation.ReportsCrashes;
+import org.acra.collector.Compatibility;
+import org.acra.collector.ConfigurationCollector;
+import org.acra.collector.CrashReportData;
+import org.acra.collector.CrashReportDataFactory;
+import org.acra.jraf.android.util.activitylifecyclecallbackscompat.ActivityLifecycleCallbacksCompat;
+import org.acra.jraf.android.util.activitylifecyclecallbackscompat.ApplicationHelper;
+import org.acra.sender.EmailIntentSender;
+import org.acra.sender.HttpSender;
+import org.acra.sender.ReportSender;
+import org.acra.util.PackageManagerWrapper;
+import org.acra.util.ToastSender;
+
+import java.io.File;
+import java.lang.Thread.UncaughtExceptionHandler;
+import java.lang.ref.WeakReference;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import static org.acra.ACRA.LOG_TAG;
+import static org.acra.ReportField.IS_SILENT;
 
 /**
  * <p>
@@ -63,7 +64,8 @@
  * <p>
  * When a crash occurs, it collects data of the crash context (device, system,
  * stack trace...) and writes a report file in the application private
- * directory. This report file is then sent :
+ * directory. This report file is then sent:
+ * </p>
  * <ul>
  * <li>immediately if {@link ReportsCrashes#mode} is set to
  * {@link ReportingInteractionMode#SILENT} or
@@ -73,7 +75,6 @@
  * <li>when the user accepts to send it if {@link ReportsCrashes#mode()} is set
  * to {@link ReportingInteractionMode#NOTIFICATION}.</li>
  * </ul>
- * </p>
  * <p>
  * If an error occurs while sending a report, it is kept for later attempts.
  * </p>
@@ -99,24 +100,30 @@
     // report.
     private final Thread.UncaughtExceptionHandler mDfltExceptionHandler;
 
-    private Thread brokenThread;
-    private Throwable unhandledThrowable;
-    private transient Activity lastActivityCreated;
+    private WeakReference<Activity> lastActivityCreated = new WeakReference<Activity>(null);
 
     /**
      * This is used to wait for the crash toast to end it's display duration
      * before killing the Application.
      */
-    private static boolean toastWaitEnded = true;
+    private boolean toastWaitEnded = true;
+
+    private static final ExceptionHandlerInitializer NULL_EXCEPTION_HANDLER_INITIALIZER = new ExceptionHandlerInitializer() {
+        @Override
+        public void initializeExceptionHandler(ErrorReporter reporter) {
+        }
+    };
+
+    private volatile ExceptionHandlerInitializer exceptionHandlerInitializer = NULL_EXCEPTION_HANDLER_INITIALIZER;
 
     /**
-     * Used to create a new (non-cached) PendingIntent each time a new crash occurs. 
+     * Used to create a new (non-cached) PendingIntent each time a new crash occurs.
      */
     private static int mNotificationCounter = 0;
-    
+
     /**
      * Can only be constructed from within this class.
-     * 
+     *
      * @param context
      *            Context for the application in which ACRA is running.
      * @param prefs
@@ -132,7 +139,13 @@
         this.enabled = enabled;
 
         // Store the initial Configuration state.
-        final String initialConfiguration = ConfigurationCollector.collectConfiguration(mContext);
+        // This is expensive to gather, so only do so if we plan to report it.
+        final String initialConfiguration;
+        if (ACRA.getConfig().getReportFields().contains(ReportField.INITIAL_CONFIGURATION)) {
+            initialConfiguration = ConfigurationCollector.collectConfiguration(mContext);
+        } else {
+            initialConfiguration = null;
+        }
 
         // Sets the application start date.
         // This will be included in the reports, will be helpful compared to
@@ -141,17 +154,17 @@
         appStartDate.setToNow();
 
         if (Compatibility.getAPILevel() >= 14) { // ActivityLifecycleCallback
-                                                 // only available for API14+
+            // only available for API14+
             ApplicationHelper.registerActivityLifecycleCallbacks(context, new ActivityLifecycleCallbacksCompat() {
                 @Override
                 public void onActivityCreated(Activity activity, Bundle savedInstanceState) {
                     if (ACRA.DEV_LOGGING)
                         ACRA.log.d(ACRA.LOG_TAG, "onActivityCreated " + activity.getClass());
-                    if (!(activity instanceof CrashReportDialog)) {
+                    if (!(activity instanceof BaseCrashReportDialog)) {
                         // Ignore CrashReportDialog because we want the last
                         // application Activity that was started so that we can
                         // explicitly kill it off.
-                        lastActivityCreated = activity;
+                        lastActivityCreated = new WeakReference<Activity>(activity);
                     }
                 }
 
@@ -199,9 +212,6 @@ public void onActivityDestroyed(Activity activity) {
         // Don't do it twice to avoid losing the original handler.
         mDfltExceptionHandler = Thread.getDefaultUncaughtExceptionHandler();
         Thread.setDefaultUncaughtExceptionHandler(this);
-
-        // Check for pending reports
-        checkReportsOnApplicationStart();
     }
 
     /**
@@ -212,19 +222,21 @@ public void onActivityDestroyed(Activity activity) {
      * @deprecated since 4.3.0 Use {@link org.acra.ACRA#getErrorReporter()}
      *             instead.
      */
+    @Deprecated
     public static ErrorReporter getInstance() {
         return ACRA.getErrorReporter();
     }
 
     /**
      * Deprecated. Use {@link #putCustomData(String, String)}.
-     * 
+     *
      * @param key
      *            A key for your custom data.
      * @param value
      *            The value associated to your key.
      */
     @Deprecated
+    @SuppressWarnings("unused")
     public void addCustomData(String key, String value) {
         crashReportDataFactory.putCustomData(key, value);
     }
@@ -241,7 +253,7 @@ public void addCustomData(String key, String value) {
      * The key/value pairs will be stored in the GoogleDoc spreadsheet in the
      * "custom" column, as a text containing a 'key = value' pair on each line.
      * </p>
-     * 
+     *
      * @param key
      *            A key for your custom data.
      * @param value
@@ -250,39 +262,82 @@ public void addCustomData(String key, String value) {
      * @see #removeCustomData(String)
      * @see #getCustomData(String)
      */
+    @SuppressWarnings("unused")
     public String putCustomData(String key, String value) {
         return crashReportDataFactory.putCustomData(key, value);
     }
 
     /**
-     * Removes a key/value pair from your reports custom data field.
+     * <p>
+     * Use this method to perform additional initialization before the
+     * ErrorReporter handles a throwable. This can be used, for example, to put
+     * custom data using {@link #putCustomData(String, String)}, which is not
+     * available immediately after startup. It can be, for example, last 20
+     * requests or something else. The call is thread safe.
+     * </p>
+     * <p>
+     * {@link ExceptionHandlerInitializer#initializeExceptionHandler(ErrorReporter)}
+     * will be executed on the main thread in case of uncaught exception and on
+     * the caller thread of {@link #handleSilentException(Throwable)} or
+     * {@link #handleException(Throwable)}.
+     * </p>
+     * <p>
+     * Example. Add to the {@link Application#onCreate()}:
+     * </p>
+     * 
+     * <pre>
+     * ACRA.getErrorReporter().setExceptionHandlerInitializer(new ExceptionHandlerInitializer() {
+     *     <code>@Override</code> public void initializeExceptionHandler(ErrorReporter reporter) {
+     *         reporter.putCustomData("CUSTOM_ACCUMULATED_DATA_TAG", someAccumulatedData.toString);
+     *     }
+     * });
+     * </pre>
      * 
+     * @param initializer   The initializer. Can be <code>null</code>.
+     */
+    public void setExceptionHandlerInitializer(ExceptionHandlerInitializer initializer) {
+        exceptionHandlerInitializer = (initializer != null) ? initializer : NULL_EXCEPTION_HANDLER_INITIALIZER;
+    }
+
+    /**
+     * Removes a key/value pair from your reports custom data field.
+     *
      * @param key
      *            The key of the data to be removed.
      * @return The value for this key before removal.
      * @see #putCustomData(String, String)
      * @see #getCustomData(String)
      */
+    @SuppressWarnings("unused")
     public String removeCustomData(String key) {
         return crashReportDataFactory.removeCustomData(key);
     }
 
+    /**
+     * Removes all key/value pairs from your reports custom data field.
+     */
+    @SuppressWarnings("unused")
+    public void clearCustomData() {
+        crashReportDataFactory.clearCustomData();
+    }
+
     /**
      * Gets the current value for a key in your reports custom data field.
-     * 
+     *
      * @param key
      *            The key of the data to be retrieved.
      * @return The value for this key.
      * @see #putCustomData(String, String)
      * @see #removeCustomData(String)
      */
+    @SuppressWarnings("unused")
     public String getCustomData(String key) {
         return crashReportDataFactory.getCustomData(key);
     }
 
     /**
      * Add a {@link ReportSender} to the list of active {@link ReportSender}s.
-     * 
+     *
      * @param sender
      *            The {@link ReportSender} to be added.
      */
@@ -293,20 +348,22 @@ public void addReportSender(ReportSender sender) {
     /**
      * Remove a specific instance of {@link ReportSender} from the list of
      * active {@link ReportSender}s.
-     * 
+     *
      * @param sender
      *            The {@link ReportSender} instance to be removed.
      */
+    @SuppressWarnings("unused")
     public void removeReportSender(ReportSender sender) {
         mReportSenders.remove(sender);
     }
 
     /**
      * Remove all {@link ReportSender} instances from a specific class.
-     * 
+     *
      * @param senderClass
      *            ReportSender class whose instances should be removed.
      */
+    @SuppressWarnings("unused")
     public void removeReportSenders(Class<?> senderClass) {
         if (ReportSender.class.isAssignableFrom(senderClass)) {
             for (ReportSender sender : mReportSenders) {
@@ -329,7 +386,7 @@ public void removeAllReportSenders() {
     /**
      * Removes all previously set {@link ReportSender}s and set the given one as
      * the new {@link ReportSender}.
-     * 
+     *
      * @param sender
      *            ReportSender to set as the sole sender for this ErrorReporter.
      */
@@ -340,11 +397,12 @@ public void setReportSender(ReportSender sender) {
 
     /*
      * (non-Javadoc)
-     * 
+     *
      * @see
      * java.lang.Thread.UncaughtExceptionHandler#uncaughtException(java.lang
      * .Thread, java.lang.Throwable)
      */
+    @Override
     public void uncaughtException(Thread t, Throwable e) {
         try {
             // If we're not enabled then just pass the Exception on to any
@@ -352,24 +410,27 @@ public void uncaughtException(Thread t, Throwable e) {
             if (!enabled) {
                 if (mDfltExceptionHandler != null) {
                     Log.e(ACRA.LOG_TAG, "ACRA is disabled for " + mContext.getPackageName()
-                            + " - forwarding uncaught Exception on to default ExceptionHandler");
+                        + " - forwarding uncaught Exception on to default ExceptionHandler");
                     mDfltExceptionHandler.uncaughtException(t, e);
                 } else {
                     Log.e(ACRA.LOG_TAG, "ACRA is disabled for " + mContext.getPackageName()
-                            + " - no default ExceptionHandler");
+                        + " - no default ExceptionHandler");
+                    Log.e(ACRA.LOG_TAG,
+                          "ACRA caught a " + e.getClass().getSimpleName() + " for " + mContext.getPackageName(), e);
                 }
                 return;
             }
 
-            brokenThread = t;
-            unhandledThrowable = e;
-
             Log.e(ACRA.LOG_TAG,
-                    "ACRA caught a " + e.getClass().getSimpleName() + " exception for " + mContext.getPackageName()
-                            + ". Building report.");
+                  "ACRA caught a " + e.getClass().getSimpleName() + " for " + mContext.getPackageName(), e);
+            Log.d(ACRA.LOG_TAG, "Building report");
 
             // Generate and send crash report
-            handleException(e, ACRA.getConfig().mode(), false, true);
+            reportBuilder()
+                .uncaughtExceptionThread(t)
+                .exception(e)
+                .endsApplication()
+                .send();
         } catch (Throwable fatality) {
             // ACRA failed. Prevent any recursive call to
             // ACRA.uncaughtException(), let the native reporter do its job.
@@ -380,31 +441,37 @@ public void uncaughtException(Thread t, Throwable e) {
     }
 
     /**
-     * 
+     * End the application.
      */
-    private void endApplication() {
-        if (ACRA.getConfig().mode() == ReportingInteractionMode.SILENT
-                || (ACRA.getConfig().mode() == ReportingInteractionMode.TOAST && ACRA.getConfig()
-                        .forceCloseDialogAfterToast())) {
-            // If using silent mode, let the system default handler do it's job
-            // and display the force close dialog.
-            mDfltExceptionHandler.uncaughtException(brokenThread, unhandledThrowable);
+    private void endApplication(Thread uncaughtExceptionThread, Throwable th) {
+        // TODO It would be better to create an explicit config attribute #letDefaultHandlerEndApplication
+        // as the intent is clearer and would allows you to switch it off for SILENT.
+        final boolean letDefaultHandlerEndApplication = (
+             ACRA.getConfig().mode() == ReportingInteractionMode.SILENT ||
+            (ACRA.getConfig().mode() == ReportingInteractionMode.TOAST && ACRA.getConfig().forceCloseDialogAfterToast())
+        );
+
+        final boolean handlingUncaughtException = uncaughtExceptionThread != null;
+        if (handlingUncaughtException && letDefaultHandlerEndApplication && (mDfltExceptionHandler != null)) {
+            // Let the system default handler do it's job and display the force close dialog.
+            Log.d(ACRA.LOG_TAG, "Handing Exception on to default ExceptionHandler");
+            mDfltExceptionHandler.uncaughtException(uncaughtExceptionThread, th);
         } else {
             // If ACRA handles user notifications with a Toast or a Notification
             // the Force Close dialog is one more notification to the user...
             // We choose to close the process ourselves using the same actions.
-            Log.e(LOG_TAG, mContext.getPackageName() + " fatal error : " + unhandledThrowable.getMessage(),
-                    unhandledThrowable);
+            Log.e(LOG_TAG, mContext.getPackageName() + " fatal error : " + th.getMessage(), th);
 
             // Trying to solve
             // https://github.com/ACRA/acra/issues/42#issuecomment-12134144
             // Determine the current/last Activity that was started and close
             // it. Activity#finish (and maybe it's parent too).
-            if (lastActivityCreated != null) {
+            final Activity lastActivity = lastActivityCreated.get();
+            if (lastActivity != null) {
                 Log.i(LOG_TAG, "Finishing the last Activity prior to killing the Process");
-                lastActivityCreated.finish();
-                Log.i(LOG_TAG, "Finished " + lastActivityCreated.getClass());
-                lastActivityCreated = null;
+                lastActivity.finish();
+                Log.i(LOG_TAG, "Finished " + lastActivity.getClass());
+                lastActivityCreated.clear();
             }
 
             android.os.Process.killProcess(android.os.Process.myPid());
@@ -416,7 +483,7 @@ private void endApplication() {
      * Send a report for this {@link Throwable} silently (forces the use of
      * {@link ReportingInteractionMode#SILENT} for this report, whatever is the
      * mode set for the application. Very useful for tracking difficult defects.
-     * 
+     *
      * @param e
      *            The {@link Throwable} to be reported. If null the report will
      *            contain a new Exception("Report requested by developer").
@@ -424,7 +491,10 @@ private void endApplication() {
     public void handleSilentException(Throwable e) {
         // Mark this report as silent.
         if (enabled) {
-            handleException(e, ReportingInteractionMode.SILENT, true, false);
+            reportBuilder()
+                .exception(e)
+                .forceSilent()
+                .send();
             Log.d(LOG_TAG, "ACRA sent Silent report.");
             return;
         }
@@ -434,7 +504,7 @@ public void handleSilentException(Throwable e) {
 
     /**
      * Enable or disable this ErrorReporter. By default it is enabled.
-     * 
+     *
      * @param enabled
      *            Whether this ErrorReporter should capture Exceptions and
      *            forward them as crash reports.
@@ -446,7 +516,7 @@ public void setEnabled(boolean enabled) {
 
     /**
      * Starts a Thread to start sending outstanding error reports.
-     * 
+     *
      * @param onlySendSilentReports
      *            If true then only send silent reports.
      * @param approveReportsFirst
@@ -472,23 +542,27 @@ void deletePendingReports() {
      */
     public void checkReportsOnApplicationStart() {
 
-        // Delete any old unsent reports if this is a newer version of the app
-        // than when we last started.
-        final long lastVersionNr = prefs.getInt(ACRA.PREF_LAST_VERSION_NR, 0);
-        final PackageManagerWrapper packageManagerWrapper = new PackageManagerWrapper(mContext);
-        final PackageInfo packageInfo = packageManagerWrapper.getPackageInfo();
-        final boolean newVersion = (packageInfo != null && packageInfo.versionCode > lastVersionNr);
-        if (newVersion) {
-            if (ACRA.getConfig().deleteOldUnsentReportsOnApplicationStart()) {
-                deletePendingReports();
+        if (ACRA.getConfig().deleteOldUnsentReportsOnApplicationStart()) {
+            // Delete any old unsent reports if this is a newer version of the app
+            // than when we last started.
+            final long lastVersionNr = prefs.getInt(ACRA.PREF_LAST_VERSION_NR, 0);
+            final PackageManagerWrapper packageManagerWrapper = new PackageManagerWrapper(mContext);
+            final PackageInfo packageInfo = packageManagerWrapper.getPackageInfo();
+            if (packageInfo != null) {
+                final boolean newVersion = packageInfo.versionCode > lastVersionNr;
+                if (newVersion) {
+                    deletePendingReports();
+                }
+                final SharedPreferences.Editor prefsEditor = prefs.edit();
+                prefsEditor.putInt(ACRA.PREF_LAST_VERSION_NR, packageInfo.versionCode);
+                prefsEditor.commit();
             }
-            final SharedPreferences.Editor prefsEditor = prefs.edit();
-            prefsEditor.putInt(ACRA.PREF_LAST_VERSION_NR, packageInfo.versionCode);
-            prefsEditor.commit();
         }
 
-        if ((ACRA.getConfig().mode() == ReportingInteractionMode.NOTIFICATION || ACRA.getConfig().mode() == ReportingInteractionMode.DIALOG)
-                && ACRA.getConfig().deleteUnapprovedReportsOnApplicationStart()) {
+        ReportingInteractionMode reportingInteractionMode = ACRA.getConfig().mode();
+
+        if ((reportingInteractionMode == ReportingInteractionMode.NOTIFICATION || reportingInteractionMode == ReportingInteractionMode.DIALOG)
+            && ACRA.getConfig().deleteUnapprovedReportsOnApplicationStart()) {
             // NOTIFICATION or DIALOG mode, and there are unapproved reports to
             // send (latest notification/dialog has been ignored: neither
             // accepted
@@ -509,14 +583,12 @@ public void checkReportsOnApplicationStart() {
             // notify it.
             // If there are unapproved reports in DIALOG mode, show the dialog
 
-            ReportingInteractionMode reportingInteractionMode = ACRA.getConfig().mode();
 
-            filesList = reportFinder.getCrashReportFiles();
             final boolean onlySilentOrApprovedReports = containsOnlySilentOrApprovedReports(filesList);
 
             if (reportingInteractionMode == ReportingInteractionMode.SILENT
-                    || reportingInteractionMode == ReportingInteractionMode.TOAST
-                    || (onlySilentOrApprovedReports && (reportingInteractionMode == ReportingInteractionMode.NOTIFICATION || reportingInteractionMode == ReportingInteractionMode.DIALOG))) {
+                || reportingInteractionMode == ReportingInteractionMode.TOAST
+                || (onlySilentOrApprovedReports && (reportingInteractionMode == ReportingInteractionMode.NOTIFICATION || reportingInteractionMode == ReportingInteractionMode.DIALOG))) {
 
                 if (reportingInteractionMode == ReportingInteractionMode.TOAST && !onlySilentOrApprovedReports) {
                     // Display the Toast in TOAST mode only if there are
@@ -526,16 +598,6 @@ public void checkReportsOnApplicationStart() {
 
                 Log.v(ACRA.LOG_TAG, "About to start ReportSenderWorker from #checkReportOnApplicationStart");
                 startSendingReports(false, false);
-            } else if (ACRA.getConfig().mode() == ReportingInteractionMode.NOTIFICATION) {
-                // NOTIFICATION mode there are unapproved reports to send
-                // Display the notification.
-                // The user comment will be associated to the latest report
-                notifySendReport(getLatestNonSilentReport(filesList));
-            } else if (ACRA.getConfig().mode() == ReportingInteractionMode.DIALOG) {
-                // DIALOG mode: the dialog is always displayed because it has
-                // been put on the task stack before killing the app.
-                // The user can explicitly say Yes or No... or ignore the dialog
-                // with the back button.
             }
 
         }
@@ -543,7 +605,7 @@ public void checkReportsOnApplicationStart() {
 
     /**
      * Delete all pending non approved reports.
-     * 
+     *
      * @param keepOne
      *            If you need to keep the latest report, set this to true.
      */
@@ -558,7 +620,7 @@ void deletePendingNonApprovedReports(boolean keepOne) {
     /**
      * Send a report for a {@link Throwable} with the reporting interaction mode
      * configured by the developer.
-     * 
+     *
      * @param e
      *            The {@link Throwable} to be reported. If null the report will
      *            contain a new Exception("Report requested by developer").
@@ -566,81 +628,113 @@ void deletePendingNonApprovedReports(boolean keepOne) {
      *            Set this to true if you want the application to be ended after
      *            sending the report.
      */
+    @SuppressWarnings("unused")
     public void handleException(Throwable e, boolean endApplication) {
-        handleException(e, ACRA.getConfig().mode(), false, endApplication);
+        final ReportBuilder builder = reportBuilder()
+            .exception(e);
+        if (endApplication) {
+            builder.endsApplication();
+        }
+        builder.send();
     }
 
     /**
      * Send a report for a {@link Throwable} with the reporting interaction mode
      * configured by the developer, the application is then killed and restarted
      * by the system.
-     * 
+     *
      * @param e
      *            The {@link Throwable} to be reported. If null the report will
      *            contain a new Exception("Report requested by developer").
      */
+    @SuppressWarnings("unused")
     public void handleException(Throwable e) {
-        handleException(e, ACRA.getConfig().mode(), false, false);
+        reportBuilder()
+            .exception(e)
+            .send();
+    }
+
+    /**
+     * Creates a new crash report builder
+     *
+     * @return the newly created {@code ReportBuilder}
+     */
+    public ReportBuilder reportBuilder() {
+        return new ReportBuilder();
+    }
+
+    /**
+     * Helps manage
+     */
+    private static class TimeHelper {
+
+        private Long initialTimeMillis;
+
+        public void setInitialTimeMillis(long initialTimeMillis) {
+            this.initialTimeMillis = initialTimeMillis;
+        }
+
+        /**
+         * @return 0 if the initial time has yet to be set otherwise returns the difference between now and the initial time.
+         */
+        public long getElapsedTime() {
+            return (initialTimeMillis == null) ? 0 : System.currentTimeMillis() - initialTimeMillis;
+        }
     }
 
     /**
      * Try to send a report, if an error occurs stores a report file for a later
      * attempt.
-     * 
-     * @param e
-     *            Throwable to be reported. If null the report will contain a
-     *            new Exception("Report requested by developer").
-     * @param reportingInteractionMode
-     *            The desired interaction mode.
-     * @param forceSilentReport
-     *            This report is to be sent silently, whatever mode has been
-     *            configured.
-     * @param endApplication
-     *            Whether to end the application once the error has been
-     *            handled.
+     *
+     * @param reportBuilder The report builder used to assemble the report
      */
-    private void handleException(Throwable e, ReportingInteractionMode reportingInteractionMode,
-            final boolean forceSilentReport, final boolean endApplication) {
+    private void report(final ReportBuilder reportBuilder) {
 
         if (!enabled) {
             return;
         }
 
+        try {
+            exceptionHandlerInitializer.initializeExceptionHandler(this);
+        } catch (Exception exceptionInRunnable) {
+            Log.d(ACRA.LOG_TAG, "Failed to initlize " + exceptionHandlerInitializer + " from #handleException");
+        }
+
         boolean sendOnlySilentReports = false;
-        if (reportingInteractionMode == null) {
+        ReportingInteractionMode reportingInteractionMode;
+        if (!reportBuilder.mForceSilent) {
             // No interaction mode defined, we assume it has been set during
             // ACRA.initACRA()
             reportingInteractionMode = ACRA.getConfig().mode();
         } else {
+            reportingInteractionMode = ReportingInteractionMode.SILENT;
+
             // An interaction mode has been provided. If ACRA has been
             // initialized with a non SILENT mode and this mode is overridden
             // with SILENT, then we have to send only reports which have been
             // explicitly declared as silent via handleSilentException().
-            if (reportingInteractionMode == ReportingInteractionMode.SILENT
-                    && ACRA.getConfig().mode() != ReportingInteractionMode.SILENT) {
+            if (ACRA.getConfig().mode() != ReportingInteractionMode.SILENT) {
                 sendOnlySilentReports = true;
             }
         }
 
-        if (e == null) {
-            e = new Exception("Report requested by developer");
-        }
-
         final boolean shouldDisplayToast = reportingInteractionMode == ReportingInteractionMode.TOAST
-                || (ACRA.getConfig().resToastText() != 0 && (reportingInteractionMode == ReportingInteractionMode.NOTIFICATION || reportingInteractionMode == ReportingInteractionMode.DIALOG));
+            || (ACRA.getConfig().resToastText() != 0 && (reportingInteractionMode == ReportingInteractionMode.NOTIFICATION || reportingInteractionMode == ReportingInteractionMode.DIALOG));
 
+        final TimeHelper sentToastTimeMillis = new TimeHelper();
         if (shouldDisplayToast) {
             new Thread() {
 
                 /*
                  * (non-Javadoc)
-                 * 
+                 *
                  * @see java.lang.Thread#run()
                  */
                 @Override
                 public void run() {
                     Looper.prepare();
                     ToastSender.sendToast(mContext, ACRA.getConfig().resToastText(), Toast.LENGTH_LONG);
+                    sentToastTimeMillis.setInitialTimeMillis(System.currentTimeMillis());
                     Looper.loop();
                 }
 
@@ -650,130 +744,143 @@ public void run() {
             // that the Toast can be read by the user.
         }
 
-        final CrashReportData crashReportData = crashReportDataFactory.createCrashData(e, forceSilentReport,
-                brokenThread);
+        final CrashReportData crashReportData = crashReportDataFactory.createCrashData(reportBuilder.mMessage,
+                                                                                       reportBuilder.mException, reportBuilder.mCustomData,
+                                                                                       reportBuilder.mForceSilent, reportBuilder.mUncaughtExceptionThread);
 
         // Always write the report file
 
         final String reportFileName = getReportFileName(crashReportData);
         saveCrashReportFile(reportFileName, crashReportData);
 
+        if (reportBuilder.mEndsApplication && !ACRA.getConfig().sendReportsAtShutdown()) {
+            endApplication(reportBuilder.mUncaughtExceptionThread, reportBuilder.mException);
+        }
+
         SendWorker sender = null;
 
         if (reportingInteractionMode == ReportingInteractionMode.SILENT
-                || reportingInteractionMode == ReportingInteractionMode.TOAST
-                || prefs.getBoolean(ACRA.PREF_ALWAYS_ACCEPT, false)) {
+            || reportingInteractionMode == ReportingInteractionMode.TOAST
+            || prefs.getBoolean(ACRA.PREF_ALWAYS_ACCEPT, false)) {
 
             // Approve and then send reports now
             Log.d(ACRA.LOG_TAG, "About to start ReportSenderWorker from #handleException");
             sender = startSendingReports(sendOnlySilentReports, true);
+            if ((reportingInteractionMode == ReportingInteractionMode.SILENT) && !reportBuilder.mEndsApplication) {
+                // Report is being sent silently and the application is not ending.
+                // So no need to wait around for the sender to complete.
+                return;
+            }
+
         } else if (reportingInteractionMode == ReportingInteractionMode.NOTIFICATION) {
-            Log.d(ACRA.LOG_TAG, "Notification will be created on application start.");
+            Log.d(ACRA.LOG_TAG, "Creating Notification.");
+            createNotification(reportFileName, reportBuilder);
         }
 
+        toastWaitEnded = true;
         if (shouldDisplayToast) {
-            // A toast is being displayed, we have to wait for its end before
-            // doing anything else.
-            // The toastWaitEnded flag will be checked before any other
-            // operation.
+            // A toast is being displayed, we have to wait for its end before doing anything else.
+            // The toastWaitEnded flag will be checked before any other operation.
             toastWaitEnded = false;
             new Thread() {
 
                 @Override
                 public void run() {
-                    final Time beforeWait = new Time();
-                    final Time currentTime = new Time();
-                    beforeWait.setToNow();
-                    final long beforeWaitInMillis = beforeWait.toMillis(false);
-                    long elapsedTimeInMillis = 0;
-                    while (elapsedTimeInMillis < ACRAConstants.TOAST_WAIT_DURATION) {
+                    Log.d(LOG_TAG, "Waiting for " + ACRAConstants.TOAST_WAIT_DURATION
+                        + " millis from " + sentToastTimeMillis.initialTimeMillis
+                        + " currentMillis=" + System.currentTimeMillis());
+                    while (sentToastTimeMillis.getElapsedTime() < ACRAConstants.TOAST_WAIT_DURATION) {
                         try {
                             // Wait a bit to let the user read the toast
-                            Thread.sleep(ACRAConstants.TOAST_WAIT_DURATION);
+                            Thread.sleep(100);
                         } catch (InterruptedException e1) {
                             Log.d(LOG_TAG, "Interrupted while waiting for Toast to end.", e1);
                         }
-                        currentTime.setToNow();
-                        elapsedTimeInMillis = currentTime.toMillis(false) - beforeWaitInMillis;
                     }
                     toastWaitEnded = true;
                 }
             }.start();
         }
 
-        // start an AsyncTask waiting for the end of the sender
-        // call endApplication() in onPostExecute(), only when (toastWaitEnded
-        // == true)
+        // Start an AsyncTask waiting for the end of the sender.
+        // Once sent, call endApplication() if reportBuilder.mEndApplication
         final SendWorker worker = sender;
         final boolean showDirectDialog = (reportingInteractionMode == ReportingInteractionMode.DIALOG)
-                && !prefs.getBoolean(ACRA.PREF_ALWAYS_ACCEPT, false);
+            && !prefs.getBoolean(ACRA.PREF_ALWAYS_ACCEPT, false);
 
         new Thread() {
 
             @Override
             public void run() {
-                // We have to wait for BOTH the toast display wait AND
-                // the worker job to be completed.
-                Log.d(LOG_TAG, "Waiting for Toast + worker...");
-                while (!toastWaitEnded || (worker != null && worker.isAlive())) {
+                // We have to wait for the toast display to be completed.
+                Log.d(LOG_TAG, "Waiting for Toast");
+                while (!toastWaitEnded) {
                     try {
                         Thread.sleep(100);
                     } catch (InterruptedException e1) {
                         Log.e(LOG_TAG, "Error : ", e1);
                     }
                 }
+                Log.d(LOG_TAG, "Finished waiting for Toast");
+
+                // We have to wait for the worker job to be completed.
+                if (worker != null) {
+                    Log.d(LOG_TAG, "Waiting for Worker");
+                    while (worker.isAlive()) {
+                        try {
+                            Thread.sleep(100);
+                        } catch (InterruptedException e1) {
+                            Log.e(LOG_TAG, "Error : ", e1);
+                        }
+                    }
+                    Log.d(LOG_TAG, "Finished waiting for Worker");
+                }
 
                 if (showDirectDialog) {
                     // Create a new activity task with the confirmation dialog.
                     // This new task will be persisted on application restart
-                    // right
-                    // after its death.
-                    Log.d(ACRA.LOG_TAG, "About to create DIALOG from #handleException");
-                    notifyDialog(reportFileName);
+                    // right after its death.
+                    Log.d(LOG_TAG, "Creating CrashReportDialog for " + reportFileName);
+                    final Intent dialogIntent = createCrashReportDialogIntent(reportFileName, reportBuilder);
+                    dialogIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
+                    mContext.startActivity(dialogIntent);
                 }
 
-                Log.d(LOG_TAG, "Wait for Toast + worker ended. Kill Application ? " + endApplication);
+                Log.d(LOG_TAG, "Wait for Toast + worker ended. Kill Application ? " + reportBuilder.mEndsApplication);
 
-                if (endApplication) {
-                    endApplication();
+                if (reportBuilder.mEndsApplication) {
+                    endApplication(reportBuilder.mUncaughtExceptionThread, reportBuilder.mException);
                 }
             }
         }.start();
     }
 
     /**
-     * Notify user with a dialog the app has crashed, ask permission to send it.
-     * {@link CrashReportDialog} Activity.
-     * 
-     * @param reportFileName
-     *            Name fo the error report to display in the crash report
-     *            dialog.
+     * Creates an Intent that can be used to create and show a CrashReportDialog.
+     *
+     * @param reportFileName    Name of the error report to display in the crash report dialog.
+     * @param reportBuilder     ReportBuilder containing the details of the crash.
      */
-    void notifyDialog(String reportFileName) {
-        Log.d(LOG_TAG, "Creating Dialog for " + reportFileName);
-        Intent dialogIntent = new Intent(mContext, CrashReportDialog.class);
+    private Intent createCrashReportDialogIntent(String reportFileName, ReportBuilder reportBuilder) {
+        Log.d(LOG_TAG, "Creating DialogIntent for " + reportFileName + " exception=" + reportBuilder.mException);
+        final Intent dialogIntent = new Intent(mContext, ACRA.getConfig().reportDialogClass());
         dialogIntent.putExtra(ACRAConstants.EXTRA_REPORT_FILE_NAME, reportFileName);
-        dialogIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-        mContext.startActivity(dialogIntent);
+        dialogIntent.putExtra(ACRAConstants.EXTRA_REPORT_EXCEPTION, reportBuilder.mException);
+        return dialogIntent;
     }
 
+
     /**
-     * Send a status bar notification.
-     * 
+     * Creates a status bar notification.
+     *
      * The action triggered when the notification is selected is to start the
      * {@link CrashReportDialog} Activity.
-     * 
-     * @param reportFileName
-     *            Name of the report file to send.
-     */
-    private void notifySendReport(String reportFileName) {
-        // This notification can't be set to AUTO_CANCEL because after a crash,
-        // clicking on it restarts the application and this triggers a check
-        // for pending reports which issues the notification back.
-        // Notification cancellation is done in the dialog activity displayed
-        // on notification click.
-        final NotificationManager notificationManager = (NotificationManager) mContext
-                .getSystemService(Context.NOTIFICATION_SERVICE);
+     *
+     * @param reportFileName Name of the report file to send.
+     */
+    private void createNotification(String reportFileName, ReportBuilder reportBuilder) {
+
+        final NotificationManager notificationManager = (NotificationManager) mContext.getSystemService(Context.NOTIFICATION_SERVICE);
 
         final ReportsCrashes conf = ACRA.getConfig();
 
@@ -787,18 +894,20 @@ private void notifySendReport(String reportFileName) {
         final CharSequence contentTitle = mContext.getText(conf.resNotifTitle());
         final CharSequence contentText = mContext.getText(conf.resNotifText());
 
-        final Intent notificationIntent = new Intent(mContext, CrashReportDialog.class);
         Log.d(LOG_TAG, "Creating Notification for " + reportFileName);
-        notificationIntent.putExtra(ACRAConstants.EXTRA_REPORT_FILE_NAME, reportFileName);
-        final PendingIntent contentIntent = PendingIntent.getActivity(mContext, mNotificationCounter++, notificationIntent, PendingIntent.FLAG_UPDATE_CURRENT);
+        final Intent crashReportDialogIntent = createCrashReportDialogIntent(reportFileName, reportBuilder);
+        final PendingIntent contentIntent = PendingIntent.getActivity(mContext, mNotificationCounter++, crashReportDialogIntent, PendingIntent.FLAG_UPDATE_CURRENT);
 
         notification.setLatestEventInfo(mContext, contentTitle, contentText, contentIntent);
+        notification.flags = notification.flags | Notification.FLAG_AUTO_CANCEL;
 
-        final Intent deleteIntent = new Intent(mContext, CrashReportDialog.class);
+        // The deleteIntent is invoked when the user swipes away the Notification.
+        // In this case we invoke the CrashReportDialog with EXTRA_FORCE_CANCEL==true
+        // which will cause BaseCrashReportDialog to clear the crash report and finish itself.
+        final Intent deleteIntent = createCrashReportDialogIntent(reportFileName, reportBuilder);
         deleteIntent.putExtra(ACRAConstants.EXTRA_FORCE_CANCEL, true);
-        final PendingIntent pendingDeleteIntent = PendingIntent.getActivity(mContext, -1, deleteIntent, 0);
-        notification.deleteIntent = pendingDeleteIntent;
-        
+        notification.deleteIntent = PendingIntent.getActivity(mContext, -1, deleteIntent, 0);
+
         // Send new notification
         notificationManager.notify(ACRAConstants.NOTIF_CRASH_ID, notification);
     }
@@ -809,13 +918,13 @@ private String getReportFileName(CrashReportData crashData) {
         final long timestamp = now.toMillis(false);
         final String isSilent = crashData.getProperty(IS_SILENT);
         return "" + timestamp + (isSilent != null ? ACRAConstants.SILENT_SUFFIX : "")
-                + ACRAConstants.REPORTFILE_EXTENSION;
+            + ACRAConstants.REPORTFILE_EXTENSION;
     }
 
     /**
      * When a report can't be sent, it is saved here in a file in the root of
      * the application private directory.
-     * 
+     *
      * @param fileName
      *            In a few rare cases, we write the report again with additional
      *            data (user comment for example). In such cases, you can
@@ -837,32 +946,9 @@ private void saveCrashReportFile(String fileName, CrashReportData crashData) {
         }
     }
 
-    /**
-     * Retrieve the most recently created "non silent" report from an array of
-     * report file names. A non silent is any report which has not been created
-     * with {@link #handleSilentException(Throwable)}.
-     * 
-     * @param filesList
-     *            An array of report file names.
-     * @return The most recently created "non silent" report file name.
-     */
-    private String getLatestNonSilentReport(String[] filesList) {
-        if (filesList != null && filesList.length > 0) {
-            for (int i = filesList.length - 1; i >= 0; i--) {
-                if (!fileNameParser.isSilent(filesList[i])) {
-                    return filesList[i];
-                }
-            }
-            // We should never have this result, but this should be secure...
-            return filesList[filesList.length - 1];
-        } else {
-            return null;
-        }
-    }
-
     /**
      * Delete pending reports.
-     * 
+     *
      * @param deleteApprovedReports
      *            Set to true to delete approved and silent reports.
      * @param deleteNonApprovedReports
@@ -871,22 +957,20 @@ private String getLatestNonSilentReport(String[] filesList) {
      *            Number of pending reports to retain.
      */
     private void deletePendingReports(boolean deleteApprovedReports, boolean deleteNonApprovedReports,
-            int nbOfLatestToKeep) {
+                                      int nbOfLatestToKeep) {
         // TODO Check logic and instances where nbOfLatestToKeep = X, because
         // that might stop us from deleting any reports.
         final CrashReportFinder reportFinder = new CrashReportFinder(mContext);
         final String[] filesList = reportFinder.getCrashReportFiles();
         Arrays.sort(filesList);
-        if (filesList != null) {
-            for (int iFile = 0; iFile < filesList.length - nbOfLatestToKeep; iFile++) {
-                final String fileName = filesList[iFile];
-                final boolean isReportApproved = fileNameParser.isApproved(fileName);
-                if ((isReportApproved && deleteApprovedReports) || (!isReportApproved && deleteNonApprovedReports)) {
-                    final File fileToDelete = new File(mContext.getFilesDir(), fileName);
-                    ACRA.log.d(ACRA.LOG_TAG, "Deleting file " + fileName);
-                    if (!fileToDelete.delete()) {
-                        Log.e(ACRA.LOG_TAG, "Could not delete report : " + fileToDelete);
-                    }
+        for (int iFile = 0; iFile < filesList.length - nbOfLatestToKeep; iFile++) {
+            final String fileName = filesList[iFile];
+            final boolean isReportApproved = fileNameParser.isApproved(fileName);
+            if ((isReportApproved && deleteApprovedReports) || (!isReportApproved && deleteNonApprovedReports)) {
+                final File fileToDelete = new File(mContext.getFilesDir(), fileName);
+                ACRA.log.d(ACRA.LOG_TAG, "Deleting file " + fileName);
+                if (!fileToDelete.delete()) {
+                    Log.e(ACRA.LOG_TAG, "Could not delete report : " + fileToDelete);
                 }
             }
         }
@@ -895,7 +979,7 @@ private void deletePendingReports(boolean deleteApprovedReports, boolean deleteN
     /**
      * Checks if an array of reports files names contains only silent or
      * approved reports.
-     * 
+     *
      * @param reportFileNames
      *            Array of report locations to check.
      * @return True if there are only silent or approved reports. False if there
@@ -935,10 +1019,10 @@ public void setDefaultReportSenders() {
             // I think that is a small price to pay to ensure that ACRA doesn't
             // crash if the PackageManager has died.
             Log.e(LOG_TAG,
-                    mApplication.getPackageName()
-                            + " should be granted permission "
-                            + permission.INTERNET
-                            + " if you want your crash reports to be sent. If you don't want to add this permission to your application you can also enable sending reports by email. If this is your will then provide your email address in @ReportsCrashes(mailTo=\"your.account@domain.com\"");
+                  mApplication.getPackageName()
+                      + " should be granted permission "
+                      + permission.INTERNET
+                      + " if you want your crash reports to be sent. If you don't want to add this permission to your application you can also enable sending reports by email. If this is your will then provide your email address in @ReportsCrashes(mailTo=\"your.account@domain.com\"");
             return;
         }
 
@@ -946,13 +1030,117 @@ public void setDefaultReportSenders() {
         // with default mapping.
         if (conf.formUri() != null && !"".equals(conf.formUri())) {
             setReportSender(new HttpSender(ACRA.getConfig().httpMethod(), ACRA.getConfig().reportType(), null));
-            return;
+        }
+    }
+
+    /**
+     * Fluent API used to assemble the different options used for a crash report
+     */
+    public final class ReportBuilder {
+
+        private String mMessage;
+        private Thread mUncaughtExceptionThread;
+        private Throwable mException;
+        private Map<String, String> mCustomData;
+
+        private boolean mForceSilent = false;
+        private boolean mEndsApplication = false;
+
+        /**
+         * Set the error message to be reported.
+         *
+         * @param msg the error message
+         * @return the updated {@code ReportBuilder}
+         */
+        public ReportBuilder message(String msg) {
+            mMessage = msg;
+            return this;
         }
 
-        // The default behavior is to use the formKey for a Google Docs Form. If
-        // a formUri was also provided, we keep its sender.
-        if (conf.formKey() != null && !"".equals(conf.formKey().trim())) {
-            addReportSender(new GoogleFormSender());
+        /**
+         * Sets the Thread on which an uncaught Exception occurred.
+         *
+         * @param thread    Thread on which an uncaught Exception occurred.
+         * @return the updated {@code ReportBuilder}
+         */
+        private ReportBuilder uncaughtExceptionThread(Thread thread) {
+            mUncaughtExceptionThread = thread;
+            return this;
+        }
+
+        /**
+         * Set the stack trace to be reported
+         *
+         * @param e The exception that should be associated with this report
+         * @return the updated {@code ReportBuilder}
+         */
+        public ReportBuilder exception(Throwable e) {
+            mException = e;
+            return this;
+        }
+
+        private void initCustomData() {
+            if (mCustomData ==  null)
+                mCustomData = new HashMap<String, String>();
+        }
+
+        /**
+         * Sets additional values to be added to {@code CUSTOM_DATA}. Values
+         * specified here take precedence over globally specified custom data.
+         *
+         * @param customData a map of custom key-values to be attached to the report
+         * @return the updated {@code ReportBuilder}
+         */
+        @SuppressWarnings("unused")
+        public ReportBuilder customData(Map<String, String> customData) {
+            initCustomData();
+            mCustomData.putAll(customData);
+            return this;
+        }
+
+        /**
+         * Sets an additional value to be added to {@code CUSTOM_DATA}. The value
+         * specified here takes precedence over globally specified custom data.
+         *
+         * @param key the key identifying the custom data
+         * @param value the value for the custom data entry
+         * @return the updated {@code ReportBuilder}
+         */
+        @SuppressWarnings("unused")
+        public ReportBuilder customData(String key, String value) {
+            initCustomData();
+            mCustomData.put(key, value);
+            return this;
+        }
+
+        /**
+         * Forces the report to be sent silently, ignoring the default interaction mode set in the config
+         *
+         * @return the updated {@code ReportBuilder}
+         */
+        public ReportBuilder forceSilent() {
+            mForceSilent = true;
+            return this;
+        }
+
+        /**
+         * Ends the application after sending the crash report
+         *
+         * @return the updated {@code ReportBuilder}
+         */
+        public ReportBuilder endsApplication() {
+            mEndsApplication = true;
+            return this;
+        }
+
+        /**
+         * Assembles and sends the crash report
+         */
+        public void send() {
+            if (mMessage == null && mException == null) {
+                mMessage = "Report requested by developer";
+            }
+            report(this);
         }
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/org/acra/ExceptionHandlerInitializer.java b/src/main/java/org/acra/ExceptionHandlerInitializer.java
new file mode 100644
index 00000000..fc532bb9
--- /dev/null
+++ b/src/main/java/org/acra/ExceptionHandlerInitializer.java
@@ -0,0 +1,18 @@
+package org.acra;
+
+/**
+ * The interface can be used with
+ * {@link ErrorReporter#setExceptionHandlerInitializer(ExceptionHandlerInitializer)}
+ * to add an additional initialization of the {@link ErrorReporter} before
+ * exception is handled.
+ * 
+ * @see ErrorReporter#setExceptionHandlerInitializer(ExceptionHandlerInitializer)
+ */
+public interface ExceptionHandlerInitializer {
+    /**
+     * Called before {@link ErrorReporter} handles the Exception.
+     * 
+     * @param reporter The {@link ErrorReporter} that will handle the exception
+     */
+    void initializeExceptionHandler(ErrorReporter reporter);
+}
\ No newline at end of file
diff --git a/src/main/java/org/acra/ReportField.java b/src/main/java/org/acra/ReportField.java
index 562e6d96..3815b11b 100644
--- a/src/main/java/org/acra/ReportField.java
+++ b/src/main/java/org/acra/ReportField.java
@@ -98,6 +98,16 @@ public boolean containsKeyValuePairs() {
      * Estimation of the available device memory size based on filesystem stats.
      */
     AVAILABLE_MEM_SIZE,
+    /**
+     * Contains key = value pairs defined by the application developer during
+     * the application build.
+     */
+    BUILD_CONFIG {
+        @Override
+        public boolean containsKeyValuePairs() {
+            return true;
+        }
+    },
     /**
      * Contains key = value pairs defined by the application developer during
      * the application execution.
@@ -112,6 +122,12 @@ public boolean containsKeyValuePairs() {
      * The Holy Stack Trace.
      */
     STACK_TRACE,
+    /**
+     * A hash of the stack trace, taking only method names into account.<br>
+     * Line numbers are stripped out before computing the hash. This can help you
+     * uniquely identify stack traces.
+     */
+    STACK_TRACE_HASH,
     /**
      * {@link Configuration} fields state on the application start.
      * 
diff --git a/src/main/java/org/acra/SendWorker.java b/src/main/java/org/acra/SendWorker.java
index b0f6df81..1f804ab7 100644
--- a/src/main/java/org/acra/SendWorker.java
+++ b/src/main/java/org/acra/SendWorker.java
@@ -176,7 +176,7 @@ private void sendCrashReport(CrashReportData errorContent) throws ReportSenderEx
             boolean sentAtLeastOnce = false;
             for (ReportSender sender : reportSenders) {
                 try {
-                    sender.send(errorContent);
+                    sender.send(context, errorContent);
                     // If at least one sender worked, don't re-send the report
                     // later.
                     sentAtLeastOnce = true;
diff --git a/src/main/java/org/acra/annotation/ReportsCrashes.java b/src/main/java/org/acra/annotation/ReportsCrashes.java
index f5d8e9cf..d4683609 100644
--- a/src/main/java/org/acra/annotation/ReportsCrashes.java
+++ b/src/main/java/org/acra/annotation/ReportsCrashes.java
@@ -24,6 +24,8 @@
 
 import org.acra.ACRA;
 import org.acra.ACRAConstants;
+import org.acra.BaseCrashReportDialog;
+import org.acra.CrashReportDialog;
 import org.acra.ReportField;
 import org.acra.ReportingInteractionMode;
 import org.acra.sender.HttpSender.Method;
@@ -36,8 +38,8 @@
 /**
  * Provide configuration elements to the
  * {@link ACRA#init(android.app.Application)} method. The only mandatory
- * configuration item is the {@link #formKey()} parameter which is the Id of
- * your Google Documents form which will receive reports.
+ * configuration item is the {@link #formUri()} parameter which is the Uri
+ * to the server that will receive your reports.
  * 
  * @author Kevin Gaudin
  * 
@@ -48,11 +50,6 @@
 @Inherited
 public @interface ReportsCrashes {
 
-    /**
-     * @return The id of the Google Doc form.
-     */
-    String formKey();
-
     /**
      * The Uri of your own server-side script that will receive reports. This is
      * to use if you don't want to send reports to Google Docs but to your own,
@@ -70,6 +67,7 @@
      * </p>
      * <p>
      * Other modes have resources requirements:
+     * </p>
      * <ul>
      * <li>{@link ReportingInteractionMode#TOAST} requires
      * {@link #resToastText()} to be provided to define the text that you want
@@ -78,15 +76,28 @@
      * {@link #resNotifTickerText()}, {@link #resNotifTitle()},
      * {@link #resNotifText()}, {@link #resDialogText()}.</li>
      * <li>{@link ReportingInteractionMode#DIALOG} requires
-     * {@link #resDialogText()}</li>. Default is
-     * {@link ReportingInteractionMode#SILENT}
+     * {@link #resDialogText()}.</li>
      * </ul>
+     * <p>
+     * Default is {@link ReportingInteractionMode#SILENT}
      * </p>
      * 
      * @return the interaction mode that you want ACRA to implement.
      */
     ReportingInteractionMode mode() default ReportingInteractionMode.SILENT;
 
+    /**
+     * @return Resource id for the label of positive button in the crash dialog.
+     *         If not provided, defaults to 'OK'.
+     */
+    int resDialogPositiveButtonText() default ACRAConstants.DEFAULT_DIALOG_POSITIVE_BUTTON_TEXT;
+
+    /**
+     * @return Resource id for the label of negative button in the crash dialog.
+     *         If not provided, defaults to 'cancel'.
+     */
+    int resDialogNegativeButtonText() default ACRAConstants.DEFAULT_DIALOG_NEGATIVE_BUTTON_TEXT;
+
     /**
      * @return Resource id for the user comment input label in the crash dialog.
      *         If not provided, disables the input field.
@@ -276,7 +287,7 @@
      * <p>
      * Redefines the list of {@link ReportField}s collected and sent in your
      * reports. If you modify this list, you have to create a new Google Drive
-     * Spreadsheet & Form which will be based on these fields as column headers.
+     * Spreadsheet &amp; Form which will be based on these fields as column headers.
      * </p>
      * <p>
      * The fields order is significant. You can also use this property to modify
@@ -285,6 +296,7 @@
      * <p>
      * The default list is the following, except if you send reports by mail
      * using {@link #mailTo()}.
+     * </p>
      * <ul>
      * <li>
      * {@link ReportField#REPORT_ID}</li>
@@ -349,7 +361,6 @@
      * <li>
      * {@link ReportField#SETTINGS_GLOBAL}</li>
      * </ul>
-     * </p>
      * 
      * @return ReportField Array listing the fields to be included in the
      *         report.
@@ -362,6 +373,7 @@
      * email. This allows to get rid of the INTERNET permission. Reports content
      * can be customized with {@link #customReportContent()} . Default fields
      * are:
+     * </p>
      * <ul>
      * <li>
      * {@link ReportField#USER_COMMENT}</li>
@@ -378,7 +390,6 @@
      * <li>
      * {@link ReportField#STACK_TRACE}</li>
      * </ul>
-     * </p>
      * 
      * @return email address to which to send reports.
      */
@@ -466,6 +477,15 @@
      */
     boolean sendReportsInDevMode() default ACRAConstants.DEFAULT_SEND_REPORTS_IN_DEV_MODE;
 
+    /**
+     * Set this to false if you want to disable sending reports at the time the
+     * exception is caught. In this case, reports will not be sent until the
+     * application is restarted.
+     *
+     * @return false if reports should not be sent.
+     */
+    boolean sendReportsAtShutdown() default ACRAConstants.DEFAULT_SEND_REPORTS_AT_SHUTDOWN;
+
     /**
      * Provide here regex patterns to be evaluated on each SharedPreference key
      * to exclude KV pairs from the collected SharedPreferences. This allows you
@@ -485,6 +505,13 @@
      */
     String[] excludeMatchingSettingsKeys() default {};
 
+    /**
+     * The default value will be a BuildConfig class residing in the same package as the Application class.
+     *
+     * @return BuildConfig class from which to read any BuildConfig attributes.
+     */
+    Class buildConfigClass() default Object.class;
+
     /**
      * To use in combination with {@link ReportField#APPLICATION_LOG} to set the
      * path/name of your application log file. If the string does not contain
@@ -506,24 +533,6 @@
      */
     int applicationLogFileLines() default ACRAConstants.DEFAULT_APPLICATION_LOGFILE_LINES;
 
-    /**
-     * <p>
-     * Default behavior is to send reports to an URL following the format:
-     * "https://spreadsheets.google.com/formResponse?formkey=%s&amp;ifq" with %s
-     * replaced by the {@link #formKey()} value.
-     * </p>
-     * 
-     * <p>
-     * If Google ever changed its URI schemes for Forms (changing the host name
-     * or parameters names for example), you would be able to override it with
-     * the new value with the present method.
-     * </p>
-     * 
-     * @return The format of the URL used to post report data in a Google Form,
-     *         including a %s token which is replaced by the formKey.
-     */
-    String googleFormUrlFormat() default ACRAConstants.DEFAULT_GOOGLE_FORM_URL_FORMAT;
-
     /**
      * <p>
      * Set this to true if you need to post reports to your own server using an
@@ -535,12 +544,20 @@
      */
     boolean disableSSLCertValidation() default ACRAConstants.DEFAULT_DISABLE_SSL_CERT_VALIDATION;
 
+    String httpsSocketFactoryFactoryClass() default ACRAConstants.DEFAULT_HTTP_SOCKET_FACTORY_FACTORY_CLASS;
+
+    /**
+     * @return Class for the CrashReportDialog used when sending intent.
+     *  If not provided, defaults to CrashReportDialog.class
+     */
+    Class<? extends BaseCrashReportDialog> reportDialogClass() default CrashReportDialog.class;
+
     /**
      * <p>
-     * The {@link Method} to be used when posting with {@link #formKey()}.
+     * The {@link Method} to be used when posting with {@link #formUri()}.
      * </p>
-     * 
-     * @return
+     *
+     * @return HTTP method used when posting reports.
      */
     Method httpMethod() default Method.POST;
 
diff --git a/src/main/java/org/acra/collector/CollectorUtil.java b/src/main/java/org/acra/collector/CollectorUtil.java
new file mode 100644
index 00000000..fa0f8b5b
--- /dev/null
+++ b/src/main/java/org/acra/collector/CollectorUtil.java
@@ -0,0 +1,22 @@
+package org.acra.collector;
+
+import java.io.IOException;
+import java.io.Reader;
+
+public final class CollectorUtil {
+
+    /**
+     * Closes a Reader.
+     *
+     * @param reader    Reader to close. If reader is null then method just returns.
+     */
+    public static void safeClose(Reader reader) {
+    	if (reader == null) return;
+    	
+        try {
+            reader.close();
+        } catch (IOException e) {
+            // We made out best effort to release this resource. Nothing more we can do.
+        }
+    }
+}
diff --git a/src/main/java/org/acra/collector/ConfigurationCollector.java b/src/main/java/org/acra/collector/ConfigurationCollector.java
index 36662fa8..885208be 100644
--- a/src/main/java/org/acra/collector/ConfigurationCollector.java
+++ b/src/main/java/org/acra/collector/ConfigurationCollector.java
@@ -55,52 +55,43 @@
     private static final String PREFIX_KEYBOARDHIDDEN = "KEYBOARDHIDDEN_";
     private static final String PREFIX_KEYBOARD = "KEYBOARD_";
     private static final String PREFIX_HARDKEYBOARDHIDDEN = "HARDKEYBOARDHIDDEN_";
-    private static SparseArray<String> mHardKeyboardHiddenValues = new SparseArray<String>();
-    private static SparseArray<String> mKeyboardValues = new SparseArray<String>();
-    private static SparseArray<String> mKeyboardHiddenValues = new SparseArray<String>();
-    private static SparseArray<String> mNavigationValues = new SparseArray<String>();
-    private static SparseArray<String> mNavigationHiddenValues = new SparseArray<String>();
-    private static SparseArray<String> mOrientationValues = new SparseArray<String>();
-    private static SparseArray<String> mScreenLayoutValues = new SparseArray<String>();
-    private static SparseArray<String> mTouchScreenValues = new SparseArray<String>();
-    private static SparseArray<String> mUiModeValues = new SparseArray<String>();
-
-    private static final HashMap<String, SparseArray<String>> mValueArrays = new HashMap<String, SparseArray<String>>();
-
-    // Static init
-    static {
-        mValueArrays.put(PREFIX_HARDKEYBOARDHIDDEN, mHardKeyboardHiddenValues);
-        mValueArrays.put(PREFIX_KEYBOARD, mKeyboardValues);
-        mValueArrays.put(PREFIX_KEYBOARDHIDDEN, mKeyboardHiddenValues);
-        mValueArrays.put(PREFIX_NAVIGATION, mNavigationValues);
-        mValueArrays.put(PREFIX_NAVIGATIONHIDDEN, mNavigationHiddenValues);
-        mValueArrays.put(PREFIX_ORIENTATION, mOrientationValues);
-        mValueArrays.put(PREFIX_SCREENLAYOUT, mScreenLayoutValues);
-        mValueArrays.put(PREFIX_TOUCHSCREEN, mTouchScreenValues);
-        mValueArrays.put(PREFIX_UI_MODE, mUiModeValues);
+
+    private final HashMap<String, SparseArray<String>> mValueArrays = new HashMap<String, SparseArray<String>>();
+
+    private ConfigurationCollector() {
+
+        final SparseArray<String> hardKeyboardHiddenValues = new SparseArray<String>();
+        final SparseArray<String> keyboardValues = new SparseArray<String>();
+        final SparseArray<String> keyboardHiddenValues = new SparseArray<String>();
+        final SparseArray<String> navigationValues = new SparseArray<String>();
+        final SparseArray<String> navigationHiddenValues = new SparseArray<String>();
+        final SparseArray<String> orientationValues = new SparseArray<String>();
+        final SparseArray<String> screenLayoutValues = new SparseArray<String>();
+        final SparseArray<String> touchScreenValues = new SparseArray<String>();
+        final SparseArray<String> uiModeValues = new SparseArray<String>();
 
         for (final Field f : Configuration.class.getFields()) {
             if (Modifier.isStatic(f.getModifiers()) && Modifier.isFinal(f.getModifiers())) {
                 final String fieldName = f.getName();
                 try {
                     if (fieldName.startsWith(PREFIX_HARDKEYBOARDHIDDEN)) {
-                        mHardKeyboardHiddenValues.put(f.getInt(null), fieldName);
+                        hardKeyboardHiddenValues.put(f.getInt(null), fieldName);
                     } else if (fieldName.startsWith(PREFIX_KEYBOARD)) {
-                        mKeyboardValues.put(f.getInt(null), fieldName);
+                        keyboardValues.put(f.getInt(null), fieldName);
                     } else if (fieldName.startsWith(PREFIX_KEYBOARDHIDDEN)) {
-                        mKeyboardHiddenValues.put(f.getInt(null), fieldName);
+                        keyboardHiddenValues.put(f.getInt(null), fieldName);
                     } else if (fieldName.startsWith(PREFIX_NAVIGATION)) {
-                        mNavigationValues.put(f.getInt(null), fieldName);
+                        navigationValues.put(f.getInt(null), fieldName);
                     } else if (fieldName.startsWith(PREFIX_NAVIGATIONHIDDEN)) {
-                        mNavigationHiddenValues.put(f.getInt(null), fieldName);
+                        navigationHiddenValues.put(f.getInt(null), fieldName);
                     } else if (fieldName.startsWith(PREFIX_ORIENTATION)) {
-                        mOrientationValues.put(f.getInt(null), fieldName);
+                        orientationValues.put(f.getInt(null), fieldName);
                     } else if (fieldName.startsWith(PREFIX_SCREENLAYOUT)) {
-                        mScreenLayoutValues.put(f.getInt(null), fieldName);
+                        screenLayoutValues.put(f.getInt(null), fieldName);
                     } else if (fieldName.startsWith(PREFIX_TOUCHSCREEN)) {
-                        mTouchScreenValues.put(f.getInt(null), fieldName);
+                        touchScreenValues.put(f.getInt(null), fieldName);
                     } else if (fieldName.startsWith(PREFIX_UI_MODE)) {
-                        mUiModeValues.put(f.getInt(null), fieldName);
+                        uiModeValues.put(f.getInt(null), fieldName);
                     }
                 } catch (IllegalArgumentException e) {
                     Log.w(LOG_TAG, "Error while inspecting device configuration: ", e);
@@ -109,6 +100,16 @@
                 }
             }
         }
+
+        mValueArrays.put(PREFIX_HARDKEYBOARDHIDDEN, hardKeyboardHiddenValues);
+        mValueArrays.put(PREFIX_KEYBOARD, keyboardValues);
+        mValueArrays.put(PREFIX_KEYBOARDHIDDEN, keyboardHiddenValues);
+        mValueArrays.put(PREFIX_NAVIGATION, navigationValues);
+        mValueArrays.put(PREFIX_NAVIGATIONHIDDEN, navigationHiddenValues);
+        mValueArrays.put(PREFIX_ORIENTATION, orientationValues);
+        mValueArrays.put(PREFIX_SCREENLAYOUT, screenLayoutValues);
+        mValueArrays.put(PREFIX_TOUCHSCREEN, touchScreenValues);
+        mValueArrays.put(PREFIX_UI_MODE, uiModeValues);
     }
 
     /**
@@ -120,7 +121,7 @@
      * @return A String describing all the fields of the given Configuration,
      *         with values replaced by constant names.
      */
-    public static String toString(Configuration conf) {
+    private String toString(Configuration conf) {
         final StringBuilder result = new StringBuilder();
         for (final Field f : conf.getClass().getFields()) {
             try {
@@ -158,7 +159,7 @@ public static String toString(Configuration conf) {
      *         constant name.
      * @throws IllegalAccessException if the supplied field is inaccessible.
      */
-    private static String getFieldValueName(Configuration conf, Field f) throws IllegalAccessException {
+    private String getFieldValueName(Configuration conf, Field f) throws IllegalAccessException {
         final String fieldName = f.getName();
         if (fieldName.equals(FIELD_MCC) || fieldName.equals(FIELD_MNC)) {
             return Integer.toString(f.getInt(conf));
@@ -222,8 +223,9 @@ private static String activeFlags(SparseArray<String> valueNames, int bitfield)
      */
     public static String collectConfiguration(Context context) {
         try {
+            final ConfigurationCollector collector = new ConfigurationCollector();
             final Configuration crashConf = context.getResources().getConfiguration();
-            return ConfigurationCollector.toString(crashConf);
+            return collector.toString(crashConf);
         } catch (RuntimeException e) {
             Log.w(ACRA.LOG_TAG, "Couldn't retrieve CrashConfiguration for : " + context.getPackageName(), e);
             return "Couldn't retrieve crash config";
diff --git a/src/main/java/org/acra/collector/CrashReportDataFactory.java b/src/main/java/org/acra/collector/CrashReportDataFactory.java
index 272abd1e..4f72f3d5 100644
--- a/src/main/java/org/acra/collector/CrashReportDataFactory.java
+++ b/src/main/java/org/acra/collector/CrashReportDataFactory.java
@@ -17,59 +17,20 @@
 package org.acra.collector;
 
 import static org.acra.ACRA.LOG_TAG;
-import static org.acra.ReportField.ANDROID_VERSION;
-import static org.acra.ReportField.APPLICATION_LOG;
-import static org.acra.ReportField.APP_VERSION_CODE;
-import static org.acra.ReportField.APP_VERSION_NAME;
-import static org.acra.ReportField.AVAILABLE_MEM_SIZE;
-import static org.acra.ReportField.BRAND;
-import static org.acra.ReportField.BUILD;
-import static org.acra.ReportField.CRASH_CONFIGURATION;
-import static org.acra.ReportField.CUSTOM_DATA;
-import static org.acra.ReportField.DEVICE_FEATURES;
-import static org.acra.ReportField.DEVICE_ID;
-import static org.acra.ReportField.DISPLAY;
-import static org.acra.ReportField.DROPBOX;
-import static org.acra.ReportField.DUMPSYS_MEMINFO;
-import static org.acra.ReportField.ENVIRONMENT;
-import static org.acra.ReportField.EVENTSLOG;
-import static org.acra.ReportField.FILE_PATH;
-import static org.acra.ReportField.INITIAL_CONFIGURATION;
-import static org.acra.ReportField.INSTALLATION_ID;
-import static org.acra.ReportField.IS_SILENT;
-import static org.acra.ReportField.LOGCAT;
-import static org.acra.ReportField.MEDIA_CODEC_LIST;
-import static org.acra.ReportField.PACKAGE_NAME;
-import static org.acra.ReportField.PHONE_MODEL;
-import static org.acra.ReportField.PRODUCT;
-import static org.acra.ReportField.RADIOLOG;
-import static org.acra.ReportField.REPORT_ID;
-import static org.acra.ReportField.SETTINGS_SECURE;
-import static org.acra.ReportField.SETTINGS_SYSTEM;
-import static org.acra.ReportField.SETTINGS_GLOBAL;
-import static org.acra.ReportField.SHARED_PREFERENCES;
-import static org.acra.ReportField.STACK_TRACE;
-import static org.acra.ReportField.THREAD_DETAILS;
-import static org.acra.ReportField.TOTAL_MEM_SIZE;
-import static org.acra.ReportField.USER_CRASH_DATE;
-import static org.acra.ReportField.USER_EMAIL;
-import static org.acra.ReportField.USER_IP;
-
-import java.io.FileNotFoundException;
+import static org.acra.ReportField.*;
+
 import java.io.IOException;
 import java.io.PrintWriter;
 import java.io.StringWriter;
 import java.io.Writer;
-import java.util.Arrays;
 import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.UUID;
 
 import org.acra.ACRA;
-import org.acra.ACRAConstants;
 import org.acra.ReportField;
-import org.acra.annotation.ReportsCrashes;
 import org.acra.util.Installation;
 import org.acra.util.PackageManagerWrapper;
 import org.acra.util.ReportUtils;
@@ -87,7 +48,7 @@
  * <p>
  * Also responsible for holding the custom data to send with each report.
  * </p>
- * 
+ *
  * @author William Ferguson
  * @since 4.3.0
  */
@@ -95,12 +56,12 @@
 
     private final Context context;
     private final SharedPreferences prefs;
-    private final Map<String, String> customParameters = new HashMap<String, String>();
+    private final Map<String, String> customParameters = new LinkedHashMap<String, String>();
     private final Time appStartDate;
     private final String initialConfiguration;
 
     public CrashReportDataFactory(Context context, SharedPreferences prefs, Time appStartDate,
-            String initialConfiguration) {
+                                  String initialConfiguration) {
         this.context = context;
         this.prefs = prefs;
         this.appStartDate = appStartDate;
@@ -116,7 +77,7 @@ public CrashReportDataFactory(Context context, SharedPreferences prefs, Time app
      * The key/value pairs will be stored in the "custom" column, as a text
      * containing one 'key = value' pair on each line.
      * </p>
-     * 
+     *
      * @param key
      *            A key for your custom data.
      * @param value
@@ -129,7 +90,7 @@ public String putCustomData(String key, String value) {
 
     /**
      * Removes a key/value pair from the custom data field.
-     * 
+     *
      * @param key
      *            The key of the data to be removed.
      * @return The value for this key before removal.
@@ -138,9 +99,16 @@ public String removeCustomData(String key) {
         return customParameters.remove(key);
     }
 
+    /**
+     * Removes all key/value pairs from the custom data field.
+     */
+    public void clearCustomData() {
+        customParameters.clear();
+    }
+
     /**
      * Gets the current value for a key in the custom data field.
-     * 
+     *
      * @param key
      *            The key of the data to be retrieved.
      * @return The value for this key.
@@ -151,32 +119,41 @@ public String getCustomData(String key) {
 
     /**
      * Collects crash data.
-     * 
+     *
+     * @param msg
+     *            A message to be associated with the crash report.
      * @param th
      *            Throwable that caused the crash.
+     * @param customData
+     *            Custom key/value pairs to be associated with the crash report.
      * @param isSilentReport
      *            Whether to report this report as being sent silently.
-     * @param brokenThread2
+     * @param brokenThread  Thread on which the error occurred.
      * @return CrashReportData representing the current state of the application
      *         at the instant of the Exception.
      */
-    public CrashReportData createCrashData(Throwable th, boolean isSilentReport, Thread brokenThread) {
+    public CrashReportData createCrashData(String msg, Throwable th, Map<String, String> customData, boolean isSilentReport, Thread brokenThread) {
         final CrashReportData crashReportData = new CrashReportData();
         try {
-            final List<ReportField> crashReportFields = getReportFields();
+            final List<ReportField> crashReportFields = ACRA.getConfig().getReportFields();
 
             // Make every entry here bullet proof and move any slightly dodgy
             // ones to the end.
             // This ensures that we collect as much info as possible before
             // something crashes the collection process.
 
-            crashReportData.put(STACK_TRACE, getStackTrace(th));
-            crashReportData.put(ReportField.USER_APP_START_DATE, appStartDate.format3339(false));
+            crashReportData.put(STACK_TRACE, getStackTrace(msg, th));
+            crashReportData.put(ReportField.USER_APP_START_DATE, ReportUtils.getTimeString(appStartDate));
 
             if (isSilentReport) {
                 crashReportData.put(IS_SILENT, "true");
             }
 
+            // StackTrace hash
+            if (crashReportFields.contains(STACK_TRACE_HASH)) {
+                crashReportData.put(ReportField.STACK_TRACE_HASH, getStackTraceHash(th));
+            }
+
             // Generate report uuid
             if (crashReportFields.contains(REPORT_ID)) {
                 crashReportData.put(ReportField.REPORT_ID, UUID.randomUUID().toString());
@@ -249,12 +226,21 @@ public CrashReportData createCrashData(Throwable th, boolean isSilentReport, Thr
             if (crashReportFields.contains(USER_CRASH_DATE)) {
                 final Time curDate = new Time();
                 curDate.setToNow();
-                crashReportData.put(USER_CRASH_DATE, curDate.format3339(false));
+                crashReportData.put(USER_CRASH_DATE, ReportUtils.getTimeString(curDate));
             }
 
             // Add custom info, they are all stored in a single field
             if (crashReportFields.contains(CUSTOM_DATA)) {
-                crashReportData.put(CUSTOM_DATA, createCustomInfoString());
+                crashReportData.put(CUSTOM_DATA, createCustomInfoString(customData));
+            }
+
+            if (crashReportFields.contains(BUILD_CONFIG)) {
+                try {
+                    final Class buildConfigClass = getBuildConfigClass();
+                    crashReportData.put(BUILD_CONFIG, ReflectionCollector.collectConstants(buildConfigClass));
+                } catch (ClassNotFoundException e) {
+                    // We have already logged this when we had the name of the class that wasn't found.
+                }
             }
 
             // Add user email address, if set in the app's preferences
@@ -312,7 +298,7 @@ public CrashReportData createCrashData(Throwable th, boolean isSilentReport, Thr
 
             // Retrieve UDID(IMEI) if permission is available
             if (crashReportFields.contains(DEVICE_ID) && prefs.getBoolean(ACRA.PREF_ENABLE_DEVICE_ID, true)
-                    && pm.hasPermission(Manifest.permission.READ_PHONE_STATE)) {
+                && pm.hasPermission(Manifest.permission.READ_PHONE_STATE)) {
                 final String deviceId = ReportUtils.getDeviceId(context);
                 if (deviceId != null) {
                     crashReportData.put(DEVICE_ID, deviceId);
@@ -323,9 +309,8 @@ public CrashReportData createCrashData(Throwable th, boolean isSilentReport, Thr
             // Before JellyBean, this required the READ_LOGS permission
             // Since JellyBean, READ_LOGS is not granted to third-party apps anymore for security reasons.
             // Though, we can call logcat without any permission and still get traces related to our app.
-            if (prefs.getBoolean(ACRA.PREF_ENABLE_SYSTEM_LOGS, true)
-            		&& (pm.hasPermission(Manifest.permission.READ_LOGS))
-            			|| Compatibility.getAPILevel() >= 16) {
+            final boolean hasReadLogsPermission = pm.hasPermission(Manifest.permission.READ_LOGS) || (Compatibility.getAPILevel() >= 16);
+            if (prefs.getBoolean(ACRA.PREF_ENABLE_SYSTEM_LOGS, true) && hasReadLogsPermission) {
                 Log.i(ACRA.LOG_TAG, "READ_LOGS granted! ACRA can include LogCat and DropBox data.");
                 if (crashReportFields.contains(LOGCAT)) {
                     crashReportData.put(LOGCAT, LogCatCollector.collectLogCat(null));
@@ -338,7 +323,7 @@ public CrashReportData createCrashData(Throwable th, boolean isSilentReport, Thr
                 }
                 if (crashReportFields.contains(DROPBOX)) {
                     crashReportData.put(DROPBOX,
-                            DropBoxCollector.read(context, ACRA.getConfig().additionalDropBoxTags()));
+                                        DropBoxCollector.read(context, ACRA.getConfig().additionalDropBoxTags()));
                 }
             } else {
                 Log.i(ACRA.LOG_TAG, "READ_LOGS not allowed. ACRA will not include LogCat and DropBox data.");
@@ -346,8 +331,14 @@ public CrashReportData createCrashData(Throwable th, boolean isSilentReport, Thr
 
             // Application specific log file
             if (crashReportFields.contains(APPLICATION_LOG)) {
-                crashReportData.put(APPLICATION_LOG, LogFileCollector.collectLogFile(context, ACRA.getConfig()
-                        .applicationLogFile(), ACRA.getConfig().applicationLogFileLines()));
+                try {
+                    final String logFile = LogFileCollector.collectLogFile(context,
+                                                                           ACRA.getConfig().applicationLogFile(),
+                                                                           ACRA.getConfig().applicationLogFileLines());
+                    crashReportData.put(APPLICATION_LOG, logFile);
+                } catch (IOException e) {
+                    Log.e(LOG_TAG, "Error while reading application log file " + ACRA.getConfig().applicationLogFile(), e);
+                }
             }
 
             // Media Codecs list
@@ -367,10 +358,6 @@ public CrashReportData createCrashData(Throwable th, boolean isSilentReport, Thr
 
         } catch (RuntimeException e) {
             Log.e(LOG_TAG, "Error while retrieving crash data", e);
-        } catch (FileNotFoundException e) {
-            Log.e(LOG_TAG, "Error : application log file " + ACRA.getConfig().applicationLogFile() + " not found.", e);
-        } catch (IOException e) {
-            Log.e(LOG_TAG, "Error while reading application log file " + ACRA.getConfig().applicationLogFile() + ".", e);
         }
 
         return crashReportData;
@@ -379,13 +366,20 @@ public CrashReportData createCrashData(Throwable th, boolean isSilentReport, Thr
     /**
      * Generates the string which is posted in the single custom data field in
      * the GoogleDocs Form.
-     * 
+     *
      * @return A string with a 'key = value' pair on each line.
      */
-    private String createCustomInfoString() {
+    private String createCustomInfoString(Map<String, String> reportCustomData) {
+        Map<String, String> params = customParameters;
+
+        if (reportCustomData != null) {
+            params = new HashMap<String, String>(params);
+            params.putAll(reportCustomData);
+        }
+
         final StringBuilder customInfo = new StringBuilder();
-        for (final String currentKey : customParameters.keySet()) {
-            String currentVal = customParameters.get(currentKey);
+        for (final String currentKey : params.keySet()) {
+            String currentVal = params.get(currentKey);
             customInfo.append(currentKey);
             customInfo.append(" = ");
             // We need to escape new lines in values or they are transformed into new
@@ -399,11 +393,13 @@ private String createCustomInfoString() {
         return customInfo.toString();
     }
 
-    private String getStackTrace(Throwable th) {
-
+    private String getStackTrace(String msg, Throwable th) {
         final Writer result = new StringWriter();
         final PrintWriter printWriter = new PrintWriter(result);
 
+        if (msg != null && !msg.isEmpty())
+            printWriter.println(msg);
+
         // If the exception was thrown in a background thread inside
         // AsyncTask, then the actual exception can be found with getCause
         Throwable cause = th;
@@ -417,21 +413,35 @@ private String getStackTrace(Throwable th) {
         return stacktraceAsString;
     }
 
-    private List<ReportField> getReportFields() {
-        final ReportsCrashes config = ACRA.getConfig();
-        final ReportField[] customReportFields = config.customReportContent();
-
-        final ReportField[] fieldsList;
-        if (customReportFields.length != 0) {
-            Log.d(LOG_TAG, "Using custom Report Fields");
-            fieldsList = customReportFields;
-        } else if (config.mailTo() == null || "".equals(config.mailTo())) {
-            Log.d(LOG_TAG, "Using default Report Fields");
-            fieldsList = ACRAConstants.DEFAULT_REPORT_FIELDS;
-        } else {
-            Log.d(LOG_TAG, "Using default Mail Report Fields");
-            fieldsList = ACRAConstants.DEFAULT_MAIL_REPORT_FIELDS;
+    private String getStackTraceHash(Throwable th) {
+        final StringBuilder res = new StringBuilder();
+        Throwable cause = th;
+        while (cause != null) {
+            final StackTraceElement[] stackTraceElements = cause.getStackTrace();
+            for (final StackTraceElement e : stackTraceElements) {
+                res.append(e.getClassName());
+                res.append(e.getMethodName());
+            }
+            cause = cause.getCause();
+        }
+
+        return Integer.toHexString(res.toString().hashCode());
+    }
+
+    private Class<?> getBuildConfigClass() throws ClassNotFoundException {
+        final Class configuredBuildConfig = ACRA.getConfig().buildConfigClass();
+        if ((configuredBuildConfig != null) && !configuredBuildConfig.equals(Object.class)) {
+            // If set via annotations or programatically then it will have a real value,
+            // otherwise it will be Object.class (annotation default) or null (explicit programmatic).
+            return configuredBuildConfig;
+        }
+
+        final String className = context.getClass().getPackage().getName() + ".BuildConfig";
+        try {
+            return Class.forName(className);
+        } catch (ClassNotFoundException e) {
+            Log.e(ACRA.LOG_TAG, "Not adding buildConfig to log. Class Not found : " + className + ". Please configure 'buildConfigClass' in your ACRA config");
+            throw e;
         }
-        return Arrays.asList(fieldsList);
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/org/acra/collector/DumpSysCollector.java b/src/main/java/org/acra/collector/DumpSysCollector.java
index b7569110..774dd4ab 100644
--- a/src/main/java/org/acra/collector/DumpSysCollector.java
+++ b/src/main/java/org/acra/collector/DumpSysCollector.java
@@ -42,6 +42,7 @@
     public static String collectMemInfo() {
 
         final StringBuilder meminfo = new StringBuilder();
+		BufferedReader bufferedReader = null;
         try {
             final List<String> commandLine = new ArrayList<String>();
             commandLine.add("dumpsys");
@@ -49,7 +50,7 @@ public static String collectMemInfo() {
             commandLine.add(Integer.toString(android.os.Process.myPid()));
 
             final Process process = Runtime.getRuntime().exec(commandLine.toArray(new String[commandLine.size()]));
-            final BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(process.getInputStream()), ACRAConstants.DEFAULT_BUFFER_SIZE_IN_BYTES);
+            bufferedReader = new BufferedReader(new InputStreamReader(process.getInputStream()), ACRAConstants.DEFAULT_BUFFER_SIZE_IN_BYTES);
 
             while (true) {
                 final String line = bufferedReader.readLine();
@@ -62,7 +63,9 @@ public static String collectMemInfo() {
 
         } catch (IOException e) {
             Log.e(ACRA.LOG_TAG, "DumpSysCollector.meminfo could not retrieve data", e);
-        }
+		}
+
+        CollectorUtil.safeClose(bufferedReader);
 
         return meminfo.toString();
     }
diff --git a/src/main/java/org/acra/collector/LogCatCollector.java b/src/main/java/org/acra/collector/LogCatCollector.java
index 57173ea7..325e5ebe 100644
--- a/src/main/java/org/acra/collector/LogCatCollector.java
+++ b/src/main/java/org/acra/collector/LogCatCollector.java
@@ -15,11 +15,7 @@
  */
 package org.acra.collector;
 
-import android.util.Log;
-import org.acra.ACRA;
-import org.acra.ACRAConstants;
-import org.acra.annotation.ReportsCrashes;
-import org.acra.util.BoundedLinkedList;
+import static org.acra.ACRA.LOG_TAG;
 
 import java.io.BufferedReader;
 import java.io.IOException;
@@ -30,7 +26,12 @@
 import java.util.LinkedList;
 import java.util.List;
 
-import static org.acra.ACRA.LOG_TAG;
+import org.acra.ACRA;
+import org.acra.ACRAConstants;
+import org.acra.annotation.ReportsCrashes;
+import org.acra.util.BoundedLinkedList;
+
+import android.util.Log;
 
 /**
  * Executes logcat commands and collects it's output.
@@ -94,10 +95,12 @@ public static String collectLogCat(String bufferName) {
         final LinkedList<String> logcatBuf = new BoundedLinkedList<String>(tailCount > 0 ? tailCount
                 : DEFAULT_TAIL_COUNT);
         commandLine.addAll(logcatArgumentsList);
+        
+        BufferedReader bufferedReader = null;
 
         try {
             final Process process = Runtime.getRuntime().exec(commandLine.toArray(new String[commandLine.size()]));
-            final BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(process.getInputStream()), ACRAConstants.DEFAULT_BUFFER_SIZE_IN_BYTES);
+            bufferedReader = new BufferedReader(new InputStreamReader(process.getInputStream()), ACRAConstants.DEFAULT_BUFFER_SIZE_IN_BYTES);
 
             Log.d(LOG_TAG, "Retrieving logcat output...");
 
@@ -126,6 +129,8 @@ public void run() {
 
         } catch (IOException e) {
             Log.e(ACRA.LOG_TAG, "LogCatCollector.collectLogCat could not retrieve data.", e);
+        } finally {
+            CollectorUtil.safeClose(bufferedReader);
         }
 
         return logcatBuf.toString();
diff --git a/src/main/java/org/acra/collector/LogFileCollector.java b/src/main/java/org/acra/collector/LogFileCollector.java
index 80e68910..c3311365 100644
--- a/src/main/java/org/acra/collector/LogFileCollector.java
+++ b/src/main/java/org/acra/collector/LogFileCollector.java
@@ -53,17 +53,21 @@ private LogFileCollector() {
      * @throws IOException
      */
     public static String collectLogFile(Context context, String fileName, int numberOfLines) throws IOException {
-        BoundedLinkedList<String> resultBuffer = new BoundedLinkedList<String>(numberOfLines);
+        final BoundedLinkedList<String> resultBuffer = new BoundedLinkedList<String>(numberOfLines);
         final BufferedReader reader;
         if (fileName.contains("/")) {
             reader = new BufferedReader(new InputStreamReader(new FileInputStream(fileName)), 1024);
         } else {
             reader = new BufferedReader(new InputStreamReader(context.openFileInput(fileName)), 1024);
         }
-        String line = reader.readLine();
-        while (line != null) {
-            resultBuffer.add(line + "\n");
-            line = reader.readLine();
+        try {
+            String line = reader.readLine();
+            while (line != null) {
+                resultBuffer.add(line + "\n");
+                line = reader.readLine();
+            }
+        } finally {
+            CollectorUtil.safeClose(reader);
         }
         return resultBuffer.toString();
     }
diff --git a/src/main/java/org/acra/collector/MediaCodecListCollector.java b/src/main/java/org/acra/collector/MediaCodecListCollector.java
index 63c8b07f..4ca24819 100644
--- a/src/main/java/org/acra/collector/MediaCodecListCollector.java
+++ b/src/main/java/org/acra/collector/MediaCodecListCollector.java
@@ -133,7 +133,7 @@
      * with their capabilities (supported Color Formats, Codec Profiles et
      * Levels).
      * 
-     * @return
+     * @return The media codecs information
      */
     public static String collecMediaCodecList() {
         StringBuilder result = new StringBuilder();
diff --git a/src/main/java/org/acra/collector/ReflectionCollector.java b/src/main/java/org/acra/collector/ReflectionCollector.java
index 55a34da8..ebde1088 100644
--- a/src/main/java/org/acra/collector/ReflectionCollector.java
+++ b/src/main/java/org/acra/collector/ReflectionCollector.java
@@ -44,12 +44,15 @@ public static String collectConstants(Class<?> someClass, String prefix) {
 
         final Field[] fields = someClass.getFields();
         for (final Field field : fields) {
-            if(prefix != null && prefix.length() > 0) {
+            if (prefix != null && prefix.length() > 0) {
                 result.append(prefix).append('.');
             }
             result.append(field.getName()).append("=");
             try {
-                result.append(field.get(null).toString());
+                final Object value = field.get(null);
+                if (value != null) {
+                    result.append(value.toString());
+                }
             } catch (IllegalArgumentException e) {
                 result.append("N/A");
             } catch (IllegalAccessException e) {
diff --git a/src/main/java/org/acra/collector/SharedPreferencesCollector.java b/src/main/java/org/acra/collector/SharedPreferencesCollector.java
index 85f8bab9..7dd91e51 100644
--- a/src/main/java/org/acra/collector/SharedPreferencesCollector.java
+++ b/src/main/java/org/acra/collector/SharedPreferencesCollector.java
@@ -47,34 +47,42 @@
      */
     public static String collect(Context context) {
         final StringBuilder result = new StringBuilder();
-        final Map<String, SharedPreferences> shrdPrefs = new TreeMap<String, SharedPreferences>();
-        shrdPrefs.put("default", PreferenceManager.getDefaultSharedPreferences(context));
-        final String[] shrdPrefsIds = ACRA.getConfig().additionalSharedPreferences();
-        if (shrdPrefsIds != null) {
-            for (final String shrdPrefId : shrdPrefsIds) {
-                shrdPrefs.put(shrdPrefId, context.getSharedPreferences(shrdPrefId, Context.MODE_PRIVATE));
+
+        // Include the default SharedPreferences
+        final Map<String, SharedPreferences> sharedPrefs = new TreeMap<String, SharedPreferences>();
+        sharedPrefs.put("default", PreferenceManager.getDefaultSharedPreferences(context));
+
+        // Add in any additional SharedPreferences
+        final String[] sharedPrefIds = ACRA.getConfig().additionalSharedPreferences();
+        if (sharedPrefIds != null) {
+            for (final String sharedPrefId : sharedPrefIds) {
+                sharedPrefs.put(sharedPrefId, context.getSharedPreferences(sharedPrefId, Context.MODE_PRIVATE));
             }
         }
 
-        for (final String prefsId : shrdPrefs.keySet()) {
-            final SharedPreferences prefs = shrdPrefs.get(prefsId);
-            if (prefs != null) {
-                final Map<String, ?> kv = prefs.getAll();
-                if (kv != null && kv.size() > 0) {
-                    for (final String key : kv.keySet()) {
-                        if (!filteredKey(key)) {
-                            if (kv.get(key) != null) {
-                                result.append(prefsId).append('.').append(key).append('=').append(kv.get(key).toString()).append("\n");
-                            } else {
-                                result.append(prefsId).append('.').append(key).append('=').append("null\n");
-                            }
-                        }
-                    }
+        // Iterate over all included preference files and add the preferences from each.
+        for (Map.Entry<String, SharedPreferences> entry : sharedPrefs.entrySet()) {
+            final String sharedPrefId = entry.getKey();
+            final SharedPreferences prefs = entry.getValue();
+
+            final Map<String, ?> prefEntries = prefs.getAll();
+
+            // Show that we have no preferences saved for that preference file.
+            if (prefEntries.isEmpty()) {
+                result.append(sharedPrefId).append('=').append("empty\n");
+                continue;
+            }
+
+            // Add all non-filtered preferences from that preference file.
+            for (final String key : prefEntries.keySet()) {
+                if (filteredKey(key)) {
+                    ACRA.log.d(ACRA.LOG_TAG, "Filtered out sharedPreference=" + sharedPrefId + "  key=" + key + " due to filtering rule");
                 } else {
-                    result.append(prefsId).append('=').append("empty\n");
+                    final Object prefValue = prefEntries.get(key);
+                    result.append(sharedPrefId).append('.').append(key).append('=');
+                    result.append(prefValue == null ? "null" : prefValue.toString());
+                    result.append("\n");
                 }
-            } else {
-                result.append("null\n");
             }
             result.append('\n');
         }
diff --git a/src/main/java/org/acra/collector/ThreadCollector.java b/src/main/java/org/acra/collector/ThreadCollector.java
index dcb2ba6d..64e78dc7 100644
--- a/src/main/java/org/acra/collector/ThreadCollector.java
+++ b/src/main/java/org/acra/collector/ThreadCollector.java
@@ -28,7 +28,7 @@
      * Convenience method that collects some data identifying a Thread, usually the Thread which
      * crashed and returns a string containing the thread's id, name, priority and group name.
      * 
-     * @param the thread
+     * @param t the thread
      * @return a string representation of the string including the id, name and priority of the thread.
      */
     public static String collect(Thread t) {
diff --git a/src/main/java/org/acra/jraf/android/util/activitylifecyclecallbackscompat/ActivityLifecycleCallbacksWrapper.java b/src/main/java/org/acra/jraf/android/util/activitylifecyclecallbackscompat/ActivityLifecycleCallbacksWrapper.java
index 74bcc405..da249637 100644
--- a/src/main/java/org/acra/jraf/android/util/activitylifecyclecallbackscompat/ActivityLifecycleCallbacksWrapper.java
+++ b/src/main/java/org/acra/jraf/android/util/activitylifecyclecallbackscompat/ActivityLifecycleCallbacksWrapper.java
@@ -27,6 +27,8 @@
 import android.app.Application.ActivityLifecycleCallbacks;
 import android.os.Bundle;
 
+import java.util.concurrent.Callable;
+
 /**
  * Wraps an {@link ActivityLifecycleCallbacksCompat} into an {@link ActivityLifecycleCallbacks}.
  */
@@ -71,4 +73,24 @@ public void onActivitySaveInstanceState(Activity activity, Bundle outState) {
     public void onActivityDestroyed(Activity activity) {
         mCallback.onActivityDestroyed(activity);
     }
+
+    /**
+     * Compare the current wrapped callback with another object wrapped callback
+     */
+    @Override
+    public boolean equals(Object object) {
+        if( !(object instanceof ActivityLifecycleCallbacksWrapper) )
+            return false;
+        ActivityLifecycleCallbacksWrapper that = ( ActivityLifecycleCallbacksWrapper )object;
+        return null == mCallback ? null == that.mCallback : mCallback.equals( that.mCallback );
+    }
+
+    /**
+     *
+     * return wrapped callback object hashCode
+     */
+    @Override
+    public int hashCode() {
+        return null != mCallback ? mCallback.hashCode() : 0;
+    }
 }
diff --git a/src/main/java/org/acra/jraf/android/util/activitylifecyclecallbackscompat/ApplicationHelper.java b/src/main/java/org/acra/jraf/android/util/activitylifecyclecallbackscompat/ApplicationHelper.java
index c3a8ea3a..3c147c69 100644
--- a/src/main/java/org/acra/jraf/android/util/activitylifecyclecallbackscompat/ApplicationHelper.java
+++ b/src/main/java/org/acra/jraf/android/util/activitylifecyclecallbackscompat/ApplicationHelper.java
@@ -32,7 +32,7 @@
 /**
  * Helper for accessing {@link Application#registerActivityLifecycleCallbacks(ActivityLifecycleCallbacks)} and
  * {@link Application#unregisterActivityLifecycleCallbacks(ActivityLifecycleCallbacks)} introduced in API level 14 in a
- * backwards compatible fashion.<br/>
+ * backwards compatible fashion.<br>
  * When running on API level 14 or above, the framework's implementations of these methods will be used.
  */
 public class ApplicationHelper {
diff --git a/src/main/java/org/acra/sender/EmailIntentSender.java b/src/main/java/org/acra/sender/EmailIntentSender.java
index f6e61260..78cb165c 100644
--- a/src/main/java/org/acra/sender/EmailIntentSender.java
+++ b/src/main/java/org/acra/sender/EmailIntentSender.java
@@ -23,6 +23,7 @@
 
 import android.content.Context;
 import android.content.Intent;
+import android.net.Uri;
 
 /**
  * Send reports through an email intent. The user will be asked to chose his
@@ -39,17 +40,16 @@ public EmailIntentSender(Context ctx) {
     }
 
     @Override
-    public void send(CrashReportData errorContent) throws ReportSenderException {
+    public void send(Context context, CrashReportData errorContent) throws ReportSenderException {
 
         final String subject = mContext.getPackageName() + " Crash Report";
         final String body = buildBody(errorContent);
 
-        final Intent emailIntent = new Intent(android.content.Intent.ACTION_SEND);
+        final Intent emailIntent = new Intent(android.content.Intent.ACTION_SENDTO);
+        emailIntent.setData(Uri.fromParts("mailto", ACRA.getConfig().mailTo(), null));
         emailIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
-        emailIntent.setType("text/plain");
         emailIntent.putExtra(android.content.Intent.EXTRA_SUBJECT, subject);
         emailIntent.putExtra(android.content.Intent.EXTRA_TEXT, body);
-        emailIntent.putExtra(android.content.Intent.EXTRA_EMAIL, new String[] { ACRA.getConfig().mailTo() });
         mContext.startActivity(emailIntent);
     }
 
diff --git a/src/main/java/org/acra/sender/GoogleFormSender.java b/src/main/java/org/acra/sender/GoogleFormSender.java
deleted file mode 100644
index 75209e67..00000000
--- a/src/main/java/org/acra/sender/GoogleFormSender.java
+++ /dev/null
@@ -1,120 +0,0 @@
-/*
- *  Copyright 2010 Kevin Gaudin
- *
- *  Licensed under the Apache License, Version 2.0 (the "License");
- *  you may not use this file except in compliance with the License.
- *  You may obtain a copy of the License at
- *
- *      http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-package org.acra.sender;
-
-import static org.acra.ACRA.LOG_TAG;
-
-import java.io.IOException;
-import java.net.URL;
-import java.util.HashMap;
-import java.util.Map;
-
-import org.acra.ACRA;
-import org.acra.ACRAConfiguration;
-import org.acra.ACRAConstants;
-import org.acra.ReportField;
-import org.acra.collector.CrashReportData;
-import org.acra.sender.HttpSender.Method;
-import org.acra.sender.HttpSender.Type;
-import org.acra.util.HttpRequest;
-
-import android.net.Uri;
-import android.util.Log;
-
-/**
- * ACRA's default {@link ReportSender}: sends report data to a GoogleDocs Form.
- * 
- * @author Kevin Gaudin
- * 
- */
-public class GoogleFormSender implements ReportSender {
-
-    private final Uri mFormUri;
-
-    /**
-     * Creates a new dynamic GoogleFormSender which will send data to a Form
-     * identified by its key. All parameters are retrieved from
-     * {@link ACRA#getConfig()} and can thus be changed dynamically with
-     * {@link ACRAConfiguration#setFormKey(String)}
-     */
-    public GoogleFormSender() {
-        mFormUri = null;
-    }
-
-    /**
-     * Creates a new fixed GoogleFormSender which will send data to a Form
-     * identified by its key provided as a parameter. Once set, the destination
-     * form can not be changed dynamically.
-     * 
-     * @param formKey
-     *            The formKey of the destination Google Doc Form.
-     */
-    public GoogleFormSender(String formKey) {
-        mFormUri = Uri.parse(String.format(ACRA.getConfig().googleFormUrlFormat(), formKey));
-    }
-
-    @Override
-    public void send(CrashReportData report) throws ReportSenderException {
-        Uri formUri = mFormUri == null ? Uri.parse(String.format(ACRA.getConfig().googleFormUrlFormat(), ACRA
-                .getConfig().formKey())) : mFormUri;
-        final Map<String, String> formParams = remap(report);
-        // values observed in the GoogleDocs original html form
-        formParams.put("pageNumber", "0");
-        formParams.put("backupCache", "");
-        formParams.put("submit", "Envoyer");
-
-        try {
-            final URL reportUrl = new URL(formUri.toString());
-            Log.d(LOG_TAG, "Sending report " + report.get(ReportField.REPORT_ID));
-            Log.d(LOG_TAG, "Connect to " + reportUrl);
-
-            final HttpRequest request = new HttpRequest();
-            request.setConnectionTimeOut(ACRA.getConfig().connectionTimeout());
-            request.setSocketTimeOut(ACRA.getConfig().socketTimeout());
-            request.setMaxNrRetries(ACRA.getConfig().maxNumberOfRequestRetries());
-            request.send(reportUrl, Method.POST, HttpRequest.getParamsAsFormString(formParams), Type.FORM);
-
-        } catch (IOException e) {
-            throw new ReportSenderException("Error while sending report to Google Form.", e);
-        }
-    }
-
-    private Map<String, String> remap(Map<ReportField, String> report) {
-
-        ReportField[] fields = ACRA.getConfig().customReportContent();
-        if (fields.length == 0) {
-            fields = ACRAConstants.DEFAULT_REPORT_FIELDS;
-        }
-
-        int inputId = 0;
-        final Map<String, String> result = new HashMap<String, String>();
-        for (ReportField originalKey : fields) {
-            switch (originalKey) {
-            case APP_VERSION_NAME:
-                result.put("entry." + inputId + ".single", "'" + report.get(originalKey));
-                break;
-            case ANDROID_VERSION:
-                result.put("entry." + inputId + ".single", "'" + report.get(originalKey));
-                break;
-            default:
-                result.put("entry." + inputId + ".single", report.get(originalKey));
-                break;
-            }
-            inputId++;
-        }
-        return result;
-    }
-}
diff --git a/src/main/java/org/acra/sender/HttpSender.java b/src/main/java/org/acra/sender/HttpSender.java
index 3581140b..690bcbc1 100644
--- a/src/main/java/org/acra/sender/HttpSender.java
+++ b/src/main/java/org/acra/sender/HttpSender.java
@@ -22,6 +22,7 @@
 import java.util.HashMap;
 import java.util.Map;
 
+import android.content.Context;
 import org.acra.ACRA;
 import org.acra.ACRAConfiguration;
 import org.acra.ACRAConstants;
@@ -86,8 +87,8 @@
      */
     public enum Type {
         /**
-         * Send data as a www form encoded list of key/values. {@link http
-         * ://www.w3.org/TR/html401/interact/forms.html#h-17.13.4}
+         * Send data as a www form encoded list of key/values.
+         * @see <a href="http://www.w3.org/TR/html401/interact/forms.html#h-17.13.4">Form content types</a>
          */
         FORM {
             @Override
@@ -194,13 +195,14 @@ public HttpSender(Method method, Type type, String formUri, Map<ReportField, Str
      * @param password
      *            The password to set for HTTP Basic Auth.
      */
+    @SuppressWarnings( "unused" )
     public void setBasicAuth(String username, String password) {
         mUsername = username;
         mPassword = password;
     }    
 
     @Override
-    public void send(CrashReportData report) throws ReportSenderException {
+    public void send(Context context, CrashReportData report) throws ReportSenderException {
 
         try {
             URL reportUrl = mFormUri == null ? new URL(ACRA.getConfig().formUri()) : new URL(mFormUri.toString());
@@ -219,9 +221,8 @@ public void send(CrashReportData report) throws ReportSenderException {
             request.setPassword(password);
             request.setHeaders(ACRA.getConfig().getHttpHeaders());
 
-            String reportAsString = "";
-
             // Generate report body depending on requested type
+            final String reportAsString;
             switch (mType) {
             case JSON:
                 reportAsString = report.toJSON().toString();
@@ -244,7 +245,7 @@ public void send(CrashReportData report) throws ReportSenderException {
             default:
                 throw new UnsupportedOperationException("Unknown method: " + mMethod.name());
             }
-            request.send(reportUrl, mMethod, reportAsString, mType);
+            request.send(context, reportUrl, mMethod, reportAsString, mType);
 
         } catch (IOException e) {
             throw new ReportSenderException("Error while sending " + ACRA.getConfig().reportType()
diff --git a/src/main/java/org/acra/sender/ReportSender.java b/src/main/java/org/acra/sender/ReportSender.java
index 7a18471a..5271019c 100644
--- a/src/main/java/org/acra/sender/ReportSender.java
+++ b/src/main/java/org/acra/sender/ReportSender.java
@@ -15,15 +15,15 @@
  */
 package org.acra.sender;
 
+import android.content.Context;
 import org.acra.collector.CrashReportData;
-import org.acra.ReportField;
 
 /**
  * A simple interface for defining various crash report senders. You can reuse
  * {@link HttpSender} to send reports to your custom server-side report
  * collection script even if you expect (or prefer) specific names for each
- * report field as {@link HttpSender#HttpPostSender(String, java.util.Map)}
- * can take a Map<ReportField, String> as an input to convert each field name to
+ * report field as {@link HttpSender#send(Context, CrashReportData)}
+ * can take a {@code Map<ReportField, String>} as an input to convert each field name to
  * your preferred POST parameter name.
  * 
  * @author Kevin Gaudin
@@ -34,14 +34,17 @@
      * Send crash report data. You don't have to take care of managing Threads,
      * just implement what is necessary to handle the data. ACRA will use a
      * specific Thread (not the UI Thread) to run your sender.
-     * 
+     *
+     *
+     *
+     * @param context       Android Context in which to send the crash report.
      * @param errorContent
      *            Stores key/value pairs for each report field. A report field
-     *            is identified by a {@link ReportField} enum value.
+     *            is identified by a {@link org.acra.ReportField} enum value.
      * @throws ReportSenderException
      *             If anything goes fatally wrong during the handling of crash
      *             data, you can (should) throw a {@link ReportSenderException}
      *             with a custom message.
      */
-    public void send(CrashReportData errorContent) throws ReportSenderException;
+    public void send(Context context, CrashReportData errorContent) throws ReportSenderException;
 }
diff --git a/src/main/java/org/acra/util/DefaultHttpsSocketFactoryFactory.java b/src/main/java/org/acra/util/DefaultHttpsSocketFactoryFactory.java
new file mode 100644
index 00000000..c5b69bb3
--- /dev/null
+++ b/src/main/java/org/acra/util/DefaultHttpsSocketFactoryFactory.java
@@ -0,0 +1,18 @@
+package org.acra.util;
+
+import android.content.Context;
+import org.apache.http.conn.scheme.SocketFactory;
+import org.apache.http.conn.ssl.SSLSocketFactory;
+
+/**
+ * Default implementation of a HttpSocketFactoryFactory.
+ */
+public final class DefaultHttpsSocketFactoryFactory implements HttpsSocketFactoryFactory {
+
+    public static final HttpsSocketFactoryFactory INSTANCE = new DefaultHttpsSocketFactoryFactory();
+
+    @Override
+    public SocketFactory create(Context context) {
+        return new TlsSniSocketFactory();
+    }
+}
diff --git a/src/main/java/org/acra/util/HttpRequest.java b/src/main/java/org/acra/util/HttpRequest.java
index 502b1660..839cb0fa 100644
--- a/src/main/java/org/acra/util/HttpRequest.java
+++ b/src/main/java/org/acra/util/HttpRequest.java
@@ -10,9 +10,13 @@
 import java.net.SocketTimeoutException;
 import java.net.URL;
 import java.net.URLEncoder;
-import java.util.Iterator;
+import java.security.KeyManagementException;
+import java.security.KeyStoreException;
+import java.security.NoSuchAlgorithmException;
+import java.security.UnrecoverableKeyException;
 import java.util.Map;
 
+import android.content.Context;
 import org.acra.ACRA;
 import org.acra.sender.HttpSender.Method;
 import org.acra.sender.HttpSender.Type;
@@ -30,11 +34,12 @@
 import org.apache.http.conn.scheme.PlainSocketFactory;
 import org.apache.http.conn.scheme.Scheme;
 import org.apache.http.conn.scheme.SchemeRegistry;
+import org.apache.http.conn.scheme.SocketFactory;
 import org.apache.http.conn.ssl.SSLSocketFactory;
 import org.apache.http.entity.StringEntity;
 import org.apache.http.impl.auth.BasicScheme;
 import org.apache.http.impl.client.DefaultHttpClient;
-import org.apache.http.impl.conn.tsccm.ThreadSafeClientConnManager;
+import org.apache.http.impl.conn.SingleClientConnManager;
 import org.apache.http.params.BasicHttpParams;
 import org.apache.http.params.HttpConnectionParams;
 import org.apache.http.params.HttpParams;
@@ -129,16 +134,15 @@ public void setMaxNrRetries(int maxNrRetries) {
     /**
      * Posts to a URL.
      * 
-     * @param url
-     *            URL to which to post.
-     * @param content
-     *            Map of parameters to post to a URL.
-     * @throws IOException
-     *             if the data cannot be posted.
+     *
+     * @param context   Android context for which to create the SocketFactory.
+     * @param url       URL to which to post.
+     * @param content   Map of parameters to post to a URL.
+     * @throws IOException if the data cannot be posted.
      */
-    public void send(URL url, Method method, String content, Type type) throws IOException {
+    public void send(Context context, URL url, Method method, String content, Type type) throws IOException {
 
-        final HttpClient httpClient = getHttpClient();
+        final HttpClient httpClient = getHttpClient(context);
         final HttpEntityEnclosingRequestBase httpRequest = getHttpRequest(url, method, content, type);
 
         ACRA.log.d(ACRA.LOG_TAG, "Sending request to " + url);
@@ -196,7 +200,7 @@ public void send(URL url, Method method, String content, Type type) throws IOExc
     /**
      * @return HttpClient to use with this HttpRequest.
      */
-    private HttpClient getHttpClient() {
+    private HttpClient getHttpClient(Context context) {
         final HttpParams httpParams = new BasicHttpParams();
         httpParams.setParameter(ClientPNames.COOKIE_POLICY, CookiePolicy.RFC_2109);
         HttpConnectionParams.setConnectionTimeout(httpParams, connectionTimeOut);
@@ -207,11 +211,27 @@ private HttpClient getHttpClient() {
         registry.register(new Scheme("http", new PlainSocketFactory(), 80));
         if (ACRA.getConfig().disableSSLCertValidation()) {
             registry.register(new Scheme("https", (new FakeSocketFactory()), 443));
+        } else if (ACRA.getConfig().keyStore() != null) {
+            try {
+                SSLSocketFactory sf = new SSLSocketFactory(ACRA.getConfig().keyStore());
+                sf.setHostnameVerifier(SSLSocketFactory.STRICT_HOSTNAME_VERIFIER);
+                registry.register(new Scheme("https", sf, 443));
+            } catch (KeyManagementException e) {
+                registry.register(new Scheme("https", SSLSocketFactory.getSocketFactory(), 443));
+            } catch (UnrecoverableKeyException e) {
+                registry.register(new Scheme("https", SSLSocketFactory.getSocketFactory(), 443));
+            } catch (NoSuchAlgorithmException e) {
+                registry.register(new Scheme("https", SSLSocketFactory.getSocketFactory(), 443));
+            } catch (KeyStoreException e) {
+                registry.register(new Scheme("https", SSLSocketFactory.getSocketFactory(), 443));
+            }
         } else {
-            registry.register(new Scheme("https", SSLSocketFactory.getSocketFactory(), 443));
+            final HttpsSocketFactoryFactory factory = ACRA.getConfig().getHttpSocketFactoryFactory();
+            final SocketFactory socketFactory = factory.create(context);
+            registry.register(new Scheme("https", socketFactory, 443));
         }
 
-        final ClientConnectionManager clientConnectionManager = new ThreadSafeClientConnManager(httpParams, registry);
+        final ClientConnectionManager clientConnectionManager = new SingleClientConnManager(httpParams, registry);
         final DefaultHttpClient httpClient = new DefaultHttpClient(clientConnectionManager, httpParams);
 
         final HttpRequestRetryHandler retryHandler = new SocketTimeOutRetryHandler(httpParams, maxNrRetries);
@@ -257,11 +277,9 @@ private HttpEntityEnclosingRequestBase getHttpRequest(URL url, Method method, St
                         "text/html,application/xml,application/json,application/xhtml+xml,text/html;q=0.9,text/plain;q=0.8,image/png,*/*;q=0.5");
         httpRequest.setHeader("Content-Type", type.getContentType());
 
-        if(headers !=null) {
-           Iterator<String> headerIt = headers.keySet().iterator();
-           while(headerIt.hasNext()) {
-              String header = headerIt.next();
-              String value = headers.get(header);
+        if(headers != null) {
+            for (final String header : headers.keySet()) {
+              final String value = headers.get(header);
               httpRequest.setHeader(header, value);
            }
         }
diff --git a/src/main/java/org/acra/util/HttpsSocketFactoryFactory.java b/src/main/java/org/acra/util/HttpsSocketFactoryFactory.java
new file mode 100644
index 00000000..398975d1
--- /dev/null
+++ b/src/main/java/org/acra/util/HttpsSocketFactoryFactory.java
@@ -0,0 +1,16 @@
+package org.acra.util;
+
+import android.content.Context;
+import org.apache.http.conn.scheme.SocketFactory;
+
+/**
+ * Factory that creates an instance of a Https SocketFactory.
+ */
+public interface HttpsSocketFactoryFactory {
+
+    /**
+     * @param context   Android context for which to create the SocketFactory.
+     * @return SocketFactory that was created.
+     */
+    public SocketFactory create(Context context);
+}
diff --git a/src/main/java/org/acra/util/JSONReportBuilder.java b/src/main/java/org/acra/util/JSONReportBuilder.java
index df3fabcc..26ae0c45 100644
--- a/src/main/java/org/acra/util/JSONReportBuilder.java
+++ b/src/main/java/org/acra/util/JSONReportBuilder.java
@@ -9,8 +9,10 @@
 
 import org.acra.ACRA;
 import org.acra.ReportField;
+import org.acra.collector.CollectorUtil;
 import org.acra.collector.CrashReportData;
 import org.acra.sender.ReportSenderException;
+import org.json.JSONArray;
 import org.json.JSONException;
 import org.json.JSONObject;
 
@@ -22,10 +24,10 @@
      * single key=value pair. If a value can be decomposed into subobjects, it
      * is done.
      * </p>
-     * 
+     *
      * <p>
      * For example, a String containing:
-     * 
+     *
      * <pre>
      * some.key.name1=value1
      * some.key.name2=value2
@@ -33,15 +35,15 @@
      * any.other.key=value4
      * key.without.value5
      * </pre>
-     * 
+     *
      * is converted to
-     * 
+     *
      * <pre>
      * {
      *   some : {
      *     key : {
      *       name1 : "value1",
-     *       name2 : "value2"     
+     *       name2 : "value2"
      *     },
      *     other : "value3"
      *   },
@@ -53,9 +55,9 @@
      *   key.without.value : true
      * }
      * </pre>
-     * 
+     *
      * </p>
-     * 
+     *
      * @param errorContent
      *            The ACRA report data structure.
      * @return A JSONObject containing all fields from the report converted to
@@ -65,6 +67,7 @@
      */
     public static JSONObject buildJSONReport(CrashReportData errorContent) throws JSONReportException {
         JSONObject jsonReport = new JSONObject();
+        BufferedReader reader = null;
         for (ReportField key : errorContent.keySet()) {
             try {
                 // Each ReportField can be identified as a substructure and not
@@ -72,7 +75,7 @@ public static JSONObject buildJSONReport(CrashReportData errorContent) throws JS
                 if (key.containsKeyValuePairs()) {
                     JSONObject subObject = new JSONObject();
                     String strContent = errorContent.getProperty(key);
-                    BufferedReader reader = new BufferedReader(new StringReader(strContent), 1024);
+                    reader = new BufferedReader(new StringReader(strContent), 1024);
                     String line = null;
                     try {
                         while ((line = reader.readLine()) != null) {
@@ -88,6 +91,8 @@ public static JSONObject buildJSONReport(CrashReportData errorContent) throws JS
                 }
             } catch (JSONException e) {
                 throw new JSONReportException("Could not create JSON object for key " + key, e);
+            } finally {
+            	CollectorUtil.safeClose(reader);
             }
         }
         return jsonReport;
@@ -100,11 +105,11 @@ public static JSONObject buildJSONReport(CrashReportData errorContent) throws JS
      * if available when keys are composed of a succession of subkeys delimited
      * by dots.
      * </p>
-     * 
+     *
      * <p>
      * For example, adding the string "metrics.xdpi=160.0" to an object
      * containing
-     * 
+     *
      * <pre>
      * {
      *   "metrics" : { "ydpi" : "160.0"},
@@ -112,9 +117,9 @@ public static JSONObject buildJSONReport(CrashReportData errorContent) throws JS
      *   "height" : "533"
      * }
      * </pre>
-     * 
+     *
      * results in
-     * 
+     *
      * <pre>
      * {
      *   "metrics" : { "ydpi" : "160.0", "xdpi" : "160.0"},
@@ -122,9 +127,9 @@ public static JSONObject buildJSONReport(CrashReportData errorContent) throws JS
      *   "height" : "533"
      * }
      * </pre>
-     * 
+     *
      * </p>
-     * 
+     *
      * @param destination
      *            The JSONObject where the data must be inserted.
      * @param propertyString
@@ -157,7 +162,7 @@ private static Object guessType(String value) {
             return true;
         if (value.equalsIgnoreCase("false"))
             return false;
-        
+
         if (value.matches("(?:^|\\s)([1-9](?:\\d*|(?:\\d{0,2})(?:,\\d{3})*)(?:\\.\\d*[1-9])?|0?\\.\\d*[1-9]|0)(?:\\s|$)")) {
             NumberFormat format = NumberFormat.getInstance(Locale.US);
             try {
@@ -173,7 +178,7 @@ private static Object guessType(String value) {
     /**
      * Deep insert a value inside a JSONObject, reusing existing subobjects when
      * available or creating them when necessary.
-     * 
+     *
      * @param destination
      *            The JSONObject which receives the additional subitem.
      * @param keys
@@ -192,7 +197,26 @@ private static void addJSONSubTree(JSONObject destination, String[] keys, Object
                     intermediate = new JSONObject();
                     destination.accumulate(subKey, intermediate);
                 } else {
-                    intermediate = destination.getJSONObject(subKey);
+                    Object target = destination.get(subKey);
+                    if (target instanceof JSONObject) {
+                        intermediate = destination.getJSONObject(subKey);
+                    } else if (target instanceof JSONArray) {
+                        // Unexpected JSONArray, see issue #186
+                        JSONArray wildCard = destination.getJSONArray(subKey);
+                        for (int j = 0; j < wildCard.length(); j++) {
+                            intermediate = wildCard.optJSONObject(j);
+                            if (intermediate != null) {
+                                // Found the original JSONObject we were looking for
+                                break;
+                            }
+                        }
+                    }
+
+                    if (intermediate == null) {
+                        ACRA.log.e(ACRA.LOG_TAG, "Unknown json subtree type, see issue #186");
+                        // We should never get here, but if we do, drop this value to still send the report
+                        return;
+                    }
                 }
                 destination = intermediate;
             } else {
diff --git a/src/main/java/org/acra/util/ReflectionException.java b/src/main/java/org/acra/util/ReflectionException.java
new file mode 100644
index 00000000..16bb0e26
--- /dev/null
+++ b/src/main/java/org/acra/util/ReflectionException.java
@@ -0,0 +1,11 @@
+package org.acra.util;
+
+/**
+ * Thrown when an error occurs during reflection.
+ */
+public final class ReflectionException extends Exception  {
+
+    public ReflectionException(String msg, Throwable th) {
+        super(msg, th);
+    }
+}
diff --git a/src/main/java/org/acra/util/ReflectionHelper.java b/src/main/java/org/acra/util/ReflectionHelper.java
new file mode 100644
index 00000000..6463e309
--- /dev/null
+++ b/src/main/java/org/acra/util/ReflectionHelper.java
@@ -0,0 +1,20 @@
+package org.acra.util;
+
+/**
+ * Helps to construct objects via reflection.
+ */
+public final class ReflectionHelper {
+
+    public Object create(String className) throws ReflectionException {
+        try {
+            final Class clazz = Class.forName(className);
+            return clazz.newInstance();
+        } catch (ClassNotFoundException e) {
+            throw new ReflectionException("Could not find class : " + className, e);
+        } catch (InstantiationException e) {
+            throw new ReflectionException("Could not instantiate class : " + className, e);
+        } catch (IllegalAccessException e) {
+            throw new ReflectionException("Could not access class : " + className, e);
+        }
+    }
+}
diff --git a/src/main/java/org/acra/util/ReportUtils.java b/src/main/java/org/acra/util/ReportUtils.java
index c3211a54..0262acd0 100644
--- a/src/main/java/org/acra/util/ReportUtils.java
+++ b/src/main/java/org/acra/util/ReportUtils.java
@@ -4,14 +4,18 @@
 import java.net.InetAddress;
 import java.net.NetworkInterface;
 import java.net.SocketException;
+import java.text.SimpleDateFormat;
 import java.util.Enumeration;
+import java.util.Locale;
 
 import org.acra.ACRA;
+import org.acra.ACRAConstants;
 
 import android.content.Context;
 import android.os.Environment;
 import android.os.StatFs;
 import android.telephony.TelephonyManager;
+import android.text.format.Time;
 import android.util.Log;
 import android.util.SparseArray;
 
@@ -127,4 +131,10 @@ public static String getLocalIpAddress() {
         }
         return result.toString();
     }
+
+    public static String getTimeString(Time time)
+    {
+        SimpleDateFormat format = new SimpleDateFormat(ACRAConstants.DATE_TIME_FORMAT_STRING, Locale.ENGLISH);
+        return format.format(time.toMillis(true));
+    }
 }
diff --git a/src/main/java/org/acra/util/TlsSniSocketFactory.java b/src/main/java/org/acra/util/TlsSniSocketFactory.java
new file mode 100644
index 00000000..5df6db09
--- /dev/null
+++ b/src/main/java/org/acra/util/TlsSniSocketFactory.java
@@ -0,0 +1,202 @@
+/*
+ * This class was copied from this blog post:
+ * http://blog.dev001.net/post/67082904181/android-using-sni-and-tlsv1-2-with-apache-httpclient
+ * Thanks go to Dev001!
+ * Also, changes for using only secure cipher suites were included from code of DAVdroid.
+ * Thankgs go to Ricki Hirner (bitfire web engineering)!
+ */
+package org.acra.util;
+
+import android.annotation.TargetApi;
+import android.net.SSLCertificateSocketFactory;
+import android.os.Build;
+import android.text.TextUtils;
+import android.util.Log;
+
+import org.apache.http.conn.scheme.LayeredSocketFactory;
+import org.apache.http.conn.ssl.BrowserCompatHostnameVerifier;
+import org.apache.http.params.HttpParams;
+
+import java.io.IOException;
+import java.lang.reflect.Method;
+import java.net.InetAddress;
+import java.net.Socket;
+import java.util.Arrays;
+import java.util.HashSet;
+import java.util.LinkedList;
+import java.util.List;
+import java.util.Set;
+
+import javax.net.ssl.HostnameVerifier;
+import javax.net.ssl.SSLPeerUnverifiedException;
+import javax.net.ssl.SSLSession;
+import javax.net.ssl.SSLSocket;
+
+/**
+ * Provides a SSLSocketFactory that is able to use SNI for SSL connections and
+ * therefore allows multiple SSL servers on one IP address.<br/>
+ *   1) socket = createSocket() is called
+ *   2) reasonable encryption settings are applied to socket
+ *   3) SNI is set up for socket
+ *   4) handshake and certificate/host name verification
+ * <p/>
+ * @author Philipp Kapfer
+ * @since 4.6.0
+ */
+public class TlsSniSocketFactory implements LayeredSocketFactory {
+
+    private static final String TAG =  TlsSniSocketFactory.class.getSimpleName();
+    
+    private final static int VERSION_CODES_JELLY_BEAN_MR1 = 17;
+    private final static int VERSION_CODES_LOLLIPOP = 21;
+    
+    private final SSLCertificateSocketFactory sslSocketFactory = (SSLCertificateSocketFactory) SSLCertificateSocketFactory.getDefault(0);
+
+    // use BrowserCompatHostnameVerifier to allow IP addresses in the Common Name
+    private final static HostnameVerifier hostnameVerifier = new BrowserCompatHostnameVerifier();
+
+    private static final List<String> ALLOWED_CIPHERS = Arrays.asList(
+        // allowed secure ciphers according to NIST.SP.800-52r1.pdf Section 3.3.1 (see http://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-52r1.pdf)
+        // TLS 1.2
+        "TLS_RSA_WITH_AES_256_GCM_SHA384",
+        "TLS_RSA_WITH_AES_128_GCM_SHA256",
+        "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256",
+        "TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256",
+        "TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384",
+        "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256",
+        "TLS_ECHDE_RSA_WITH_AES_128_GCM_SHA256",
+        // maximum interoperability
+        "TLS_RSA_WITH_3DES_EDE_CBC_SHA",
+        "TLS_RSA_WITH_AES_128_CBC_SHA",
+        // additionally
+        "TLS_RSA_WITH_AES_256_CBC_SHA",
+        "TLS_ECDHE_ECDSA_WITH_3DES_EDE_CBC_SHA",
+        "TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA",
+        "TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA",
+        "TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA"
+    );
+
+    // Plain TCP/IP (layer below TLS)
+
+    @Override
+    public Socket connectSocket(Socket s, String host, int port, InetAddress localAddress, int localPort, HttpParams params) throws IOException {
+        return null;
+    }
+
+    @Override
+    public Socket createSocket() throws IOException {
+        return null;
+    }
+
+    @Override
+    public boolean isSecure(Socket s) throws IllegalArgumentException {
+        return (s instanceof SSLSocket) && s.isConnected();
+    }
+
+
+    // TLS layer
+
+    @Override
+    public Socket createSocket(Socket plainSocket, String host, int port, boolean autoClose) throws IOException {
+        if (autoClose) {
+            // we don't need the plainSocket
+            plainSocket.close();
+        }
+
+        // create and connect SSL socket, but don't do hostname/certificate verification yet
+        final SSLSocket ssl = (SSLSocket) sslSocketFactory.createSocket(InetAddress.getByName(host), port);
+
+        // establish and verify TLS connection
+        establishAndVerify(ssl, host);
+
+        return ssl;
+    }
+    
+    /**
+     * Establishes and verifies a TLS connection to a (TCP-)connected SSLSocket:
+     *   - set TLS parameters like allowed protocols and ciphers
+     *   - set SNI host name
+     *   - verify host name
+     *   - verify certificate
+     * @param socket    unconnected SSLSocket
+     * @param host      host name for SNI
+     * @throws IOException if the connection could not be established.
+     */
+    private void establishAndVerify(SSLSocket socket, String host) throws IOException {
+        setTlsParameters(socket);
+        setSniHostname(socket, host);
+        
+        // TLS handshake, throws an exception for untrusted certificates
+        socket.startHandshake();
+
+        // verify hostname and certificate
+        SSLSession session = socket.getSession();
+        if (!hostnameVerifier.verify(host, session)) {
+            // throw exception for invalid host names
+            throw new SSLPeerUnverifiedException(host);
+        }
+
+        Log.i(TAG, "Established " + session.getProtocol() + " connection with " + session.getPeerHost() + " using " + session.getCipherSuite());
+    }
+    
+    /**
+     * Prepares a TLS/SSL connection socket by:
+     *   - setting reasonable TLS protocol versions
+     *   - setting reasonable cipher suites (if required)
+     * @param socket   unconnected SSLSocket to prepare
+     */
+    private void setTlsParameters(SSLSocket socket) {
+        // Android 5.0+ (API level21) provides reasonable default settings
+        // but it still allows SSLv3
+        // https://developer.android.com/about/versions/android-5.0-changes.html#ssl
+
+        /* set reasonable protocol versions */
+        // - enable all supported protocols (enables TLSv1.1 and TLSv1.2 on Android <5.0)
+        // - remove all SSL versions (especially SSLv3) because they're insecure now
+        final List<String> protocols = new LinkedList<String>();
+        for (String protocol : socket.getSupportedProtocols()) {
+            if (!protocol.toUpperCase().contains("SSL")) {
+                protocols.add(protocol);
+            }
+        }
+        Log.v(TAG, "Setting allowed TLS protocols: " + TextUtils.join(", ", protocols));
+        socket.setEnabledProtocols(protocols.toArray(new String[protocols.size()]));
+
+        /* set reasonable cipher suites */
+        if (Build.VERSION.SDK_INT < VERSION_CODES_LOLLIPOP) {
+            // choose secure cipher suites
+
+            final List<String> availableCiphers = Arrays.asList(socket.getSupportedCipherSuites());
+            
+            // preferred ciphers = allowed Ciphers \ availableCiphers
+            final Set<String> preferredCiphers = new HashSet<String>(ALLOWED_CIPHERS);
+            preferredCiphers.retainAll(availableCiphers);
+            
+            // add enabled ciphers to preferred ciphers
+            // for maximum security, preferred ciphers should *replace* enabled ciphers,
+            // but for the security level of ACRA, disabling of insecure
+            // ciphers should be a server-side task
+            preferredCiphers.addAll(Arrays.asList(socket.getEnabledCipherSuites()));
+            
+            Log.v(TAG, "Setting allowed TLS ciphers: " + TextUtils.join(", ", preferredCiphers));
+            socket.setEnabledCipherSuites(preferredCiphers.toArray(new String[preferredCiphers.size()]));
+        }
+    }
+    
+    @TargetApi(VERSION_CODES_JELLY_BEAN_MR1)
+    private void setSniHostname(SSLSocket socket, String hostName) {
+        // set SNI host name
+        if (Build.VERSION.SDK_INT >= VERSION_CODES_JELLY_BEAN_MR1) {
+            Log.d(TAG, "Using documented SNI with host name " + hostName);
+            sslSocketFactory.setHostname(socket, hostName);
+        } else {
+            Log.d(TAG, "No documented SNI support on Android <4.2, trying reflection method with host name " + hostName);
+            try {
+                final Method setHostnameMethod = socket.getClass().getMethod("setHostname", String.class);
+                setHostnameMethod.invoke(socket, hostName);
+            } catch (Exception e) {
+                Log.w(TAG, "SNI not usable", e);
+            }
+        }
+    }
+}
diff --git a/src/test/java/org/acra/util/HttpRequestTest.java b/src/test/java/org/acra/util/HttpRequestTest.java
index 96c4781d..10a9a1fc 100644
--- a/src/test/java/org/acra/util/HttpRequestTest.java
+++ b/src/test/java/org/acra/util/HttpRequestTest.java
@@ -54,8 +54,9 @@ public void testSocketTimeOutCausesRequestToBeRetriedSeveralTimes_Issue63() thro
         request.setSocketTimeOut(100); // Set a very low SocketTimeOut. Something that will almost certainly fail.
         request.setMaxNrRetries(0);
 
+        // Context will be null because default HttpsSocketFactoryFactory doesn't require the Android Context.
         try {
-            request.send(url, Method.POST, HttpRequest.getParamsAsFormString(params), Type.FORM);
+            request.send(null /*context*/, url, Method.POST, HttpRequest.getParamsAsFormString(params), Type.FORM);
             Assert.fail("Should not be able to get a response with an impossibly low SocketTimeOut");
         } catch (SocketTimeoutException e) {
             // as expected.
@@ -64,7 +65,7 @@ public void testSocketTimeOutCausesRequestToBeRetriedSeveralTimes_Issue63() thro
         // Tell the HttpRequest to retry on Socket time out.
         request.setMaxNrRetries(5);
         try {
-            request.send(url, Method.POST, HttpRequest.getParamsAsFormString(params), Type.FORM);
+            request.send(null /*context*/, url, Method.POST, HttpRequest.getParamsAsFormString(params), Type.FORM);
         } catch (SocketTimeoutException e) {
             Assert.fail("Should not get a SocketTimeOut when using SocketTimeOutRetryHandler");
         }
