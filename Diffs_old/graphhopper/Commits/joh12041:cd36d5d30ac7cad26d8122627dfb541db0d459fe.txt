diff --git a/reader-osm/src/main/java/com/graphhopper/reader/osm/parallelKSP.java b/reader-osm/src/main/java/com/graphhopper/reader/osm/parallelKSP.java
index 9c0d626243..4471dabe23 100644
--- a/reader-osm/src/main/java/com/graphhopper/reader/osm/parallelKSP.java
+++ b/reader-osm/src/main/java/com/graphhopper/reader/osm/parallelKSP.java
@@ -267,8 +267,8 @@ public void setDataSources() throws Exception {
         } else if (city.equals("man")) {
             osmFile = osmFile + "manila_philippines.osm.pbf";
             graphFolder = graphFolder + "ghosm_man_noch";
-            inputPointsFN = inputPointsFN + "sin_" + route_type + "_od_pairs.csv";
-            outputPointsFN = outputPointsFN + "sin_" + route_type + "_gh_routes.csv";
+            inputPointsFN = inputPointsFN + "man_" + route_type + "_od_pairs.csv";
+            outputPointsFN = outputPointsFN + "man_" + route_type + "_gh_routes.csv";
             gridValuesFNs.add(gvfnStem + "MANILA_logfractionempath_ft.csv");
             gridCTsFNs.add(gctfnStem + "");
         } else {
@@ -389,7 +389,7 @@ public String writeOutput(int i, String optimized, String name, String od_id, Pa
             maneuvers.add(instruction.getSimpleTurnDescription());
         }
 
-        System.out.println(i + " (" + optimized + "): Distance: " + distance + "m;\tTime: " + timeInSec + "sec;\t# Directions: " + numDirections + ";\tSimplicity: " + simplicity + ";\tScore: " + score + ";\tNumCts: " + numCTs + ";\tPctNHT: " + pctNHT + ";\tPctNHD: " + pctNHD);
+        System.out.println(i + " (" + optimized + "): Distance: " + distance + "m;\tTime: " + timeInSec + "sec;\t# Directions: " + numDirections + ";\tSimplicity: " + simplicity + ";\tScore: " + score + ";\tNumCts: " + numCTs + ";\tPctNHT: " + nonHighwayTimeInSec + ";\tPctNHD: " + nonHighwayDistance);
         return od_id + "," + name + "," + "\"[" + pointList + "]\"," + timeInSec + "," + distance + "," + numDirections +
                 ",\"" + maneuvers.toString() + "\"" + "," + score + "," + simplicity + "," + numCTs + "," + pctNHT + "," + pctNHD + System.getProperty("line.separator");
 
@@ -693,7 +693,7 @@ public static void main(String[] args) throws Exception {
         // PBFs from: https://mapzen.com/data/metro-extracts/
 
         //String city = args[0];
-        String city = "lon";  // sf, nyc, chi, lon, man, sin
+        String city = "man";  // sf, nyc, chi, lon, man, sin
         String odtype = "grid";  // grid, rand
         parallelKSP ksp = new parallelKSP(city, odtype);
         boolean matchexternal = false;
diff --git a/reader-osm/src/main/java/com/graphhopper/reader/osm/parallelKSP_debug.java b/reader-osm/src/main/java/com/graphhopper/reader/osm/parallelKSP_debug.java
index e4384fa3c7..59ad637a6e 100644
--- a/reader-osm/src/main/java/com/graphhopper/reader/osm/parallelKSP_debug.java
+++ b/reader-osm/src/main/java/com/graphhopper/reader/osm/parallelKSP_debug.java
@@ -380,6 +380,7 @@ public String writeOutput(String od_id, float[] tradeoffs) {
                 result = result + ",";
             }
         }
+        System.out.println(result);
         return result + System.getProperty("line.separator");
     }
 
@@ -540,6 +541,7 @@ public void process_routes() throws Exception {
                 for (int i = prevbinstep; i < curbinstep; i++) {
                     tradeoffs[i] = time_tradeoff;
                 }
+                prevbinstep = curbinstep;
             }
             j++;
         }
@@ -559,6 +561,7 @@ public void process_routes() throws Exception {
                 for (int i = prevbinstep; i < curbinstep; i++) {
                     tradeoffs[i] = time_tradeoff;
                 }
+                prevbinstep = curbinstep;
             }
             j++;
         }
