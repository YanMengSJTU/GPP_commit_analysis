diff --git a/core/src/main/java/com/graphhopper/routing/QueryGraph.java b/core/src/main/java/com/graphhopper/routing/QueryGraph.java
index 71bd979a51..1f4804b602 100644
--- a/core/src/main/java/com/graphhopper/routing/QueryGraph.java
+++ b/core/src/main/java/com/graphhopper/routing/QueryGraph.java
@@ -624,7 +624,7 @@ public AllEdgesIterator getAllEdges()
     public int getLevel( int nodeId )
     {
         if (isVirtualNode(nodeId))
-            return 0;
+            throw new IllegalStateException("LevelEdgeFilter should prevent fetching level for virtual nodes: " + nodeId + ", See #288");
 
         return ((LevelGraph) mainGraph).getLevel(nodeId);
     }
diff --git a/core/src/main/java/com/graphhopper/routing/util/LevelEdgeFilter.java b/core/src/main/java/com/graphhopper/routing/util/LevelEdgeFilter.java
index 653a5f6bb6..3211474493 100644
--- a/core/src/main/java/com/graphhopper/routing/util/LevelEdgeFilter.java
+++ b/core/src/main/java/com/graphhopper/routing/util/LevelEdgeFilter.java
@@ -28,12 +28,12 @@
 public class LevelEdgeFilter implements EdgeFilter
 {
     private final LevelGraph graph;
-    private final int nodes;
+    private final int maxNodes;
 
     public LevelEdgeFilter( LevelGraph g )
     {
         graph = g;
-        nodes = g.getNodes();
+        maxNodes = g.getNodes();
     }
 
     @Override
@@ -41,8 +41,8 @@ public boolean accept( EdgeIteratorState edgeIterState )
     {
         int base = edgeIterState.getBaseNode();
         int adj = edgeIterState.getAdjNode();
-        // for now workaround for #288
-        if (base >= nodes || adj >= nodes)
+        // always accept virtual edges, see #288
+        if (base >= maxNodes || adj >= maxNodes)
             return true;
 
         return graph.getLevel(base) <= graph.getLevel(adj);
diff --git a/core/src/main/java/com/graphhopper/storage/LevelGraphStorage.java b/core/src/main/java/com/graphhopper/storage/LevelGraphStorage.java
index 8547c929cc..d16a114944 100644
--- a/core/src/main/java/com/graphhopper/storage/LevelGraphStorage.java
+++ b/core/src/main/java/com/graphhopper/storage/LevelGraphStorage.java
@@ -80,7 +80,7 @@ public final int getLevel( int nodeIndex )
     {
         // automatically allocate new nodes only via creating edges or setting node properties
         if (nodeIndex >= getNodes())
-            return 0;
+            throw new IllegalStateException("node " + nodeIndex + " is invalid. Not in [0," + getNodes() + ")");
 
         return nodes.getInt((long) nodeIndex * nodeEntryBytes + I_LEVEL);
     }
