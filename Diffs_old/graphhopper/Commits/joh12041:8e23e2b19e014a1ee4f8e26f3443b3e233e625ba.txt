diff --git a/reader-osm/src/main/java/com/graphhopper/reader/osm/RoutingExample.java b/reader-osm/src/main/java/com/graphhopper/reader/osm/RoutingExample.java
index 24855e0c42..52aec46d17 100644
--- a/reader-osm/src/main/java/com/graphhopper/reader/osm/RoutingExample.java
+++ b/reader-osm/src/main/java/com/graphhopper/reader/osm/RoutingExample.java
@@ -17,25 +17,37 @@
  */
 public class RoutingExample {
 
-    // PBF from: https://mapzen.com/data/metro-extracts/
-    private static final String osmFile = "./reader-osm/files/new-york_new-york.osm.pbf";
-    private static final String graphFolder = "./reader-osm/target/tmp/ghosm_nyc";
-
     private static final TranslationMap trMap = new TranslationMap().doImport();
     private static final Translation usTR = trMap.getWithFallBack(Locale.US);
 
-    public static void main(String[] args) throws Exception {
+    public static void process_routes(String city, String route_type) throws Exception {
+
+        // set paths
+        String osmFile = "./reader-osm/files/";
+        String graphFolder = "./reader-osm/target/tmp/";
+        String inputPointsFN = "../data/output/";
+        String outputPointsFN = "../data/output/";
+        if (city.equals("SF")) {
+            osmFile = osmFile + "san-francisco-bay_california.osm.pbf";
+            graphFolder = graphFolder + "ghosm_sf";
+            inputPointsFN = inputPointsFN + "sf_" + route_type + "_od_pairs.csv";
+            outputPointsFN = outputPointsFN + "sf_" + route_type + "_graphhopper_routes.csv";
+        } else if (city.equals("NYC")) {
+            osmFile = osmFile + "new-york_new-york.osm.pbf";
+            graphFolder = graphFolder + "ghosm_nyc";
+            inputPointsFN = inputPointsFN + "nyc_" + route_type + "_od_pairs.csv";
+            outputPointsFN = outputPointsFN + "nyc_" + route_type + "_graphhopper_routes.csv";
+        } else {
+            return;
+        }
+
         // create one GraphHopper instance
-        System.out.println(usTR);
-//        GraphHopper hopper = new GraphHopper().forDesktop();
         GraphHopper hopper = new GraphHopperOSM().forDesktop();
         hopper.setDataReaderFile(osmFile);
         // where to store graphhopper files?
         hopper.setGraphHopperLocation(graphFolder);
         hopper.setEncodingManager(new EncodingManager("car"));
 
-        String inputPointsFN = "../data/output/nyc_grid_od_pairs.csv";
-        String outputPointsFN = "../data/output/nyc_grid_graphhopper_routes.csv";
         ArrayList<float[]> inputPoints = new ArrayList<float[]>();
         ArrayList<String> id_to_points = new ArrayList<String>();
         ArrayList<String> maneuvers = new ArrayList<>();
@@ -115,7 +127,7 @@ public static void main(String[] args) throws Exception {
             System.out.println(i + ": Distance: " + distance + "m;\tTime: " + timeInSec + "sec;\t# Directions: " + numDirections);
 
             // or get the json
-            iList = il.createJson();
+            //iList = il.createJson();
             //System.out.println("JSON: " + iList);
 
             // or get the result as gpx entries:
@@ -123,8 +135,21 @@ public static void main(String[] args) throws Exception {
             //System.out.println("GPX: " + list);
         }
         // example JSON
-        System.out.println("Example JSON: " + iList);
+        //System.out.println("Example JSON: " + iList);
         System.out.println(routes_skipped + " routes skipped out of " + numPairs);
         sc_out.close();
     }
+
+    public static void main(String[] args) throws Exception {
+
+        // PBF from: https://mapzen.com/data/metro-extracts/
+        // NYC Grid
+        process_routes("NYC", "grid");
+        // NYC Random
+        process_routes("NYC", "rand");
+        // SF Grid
+        process_routes("SF", "grid");
+        // SF Random
+        process_routes("SF", "rand");
+    }
 }
