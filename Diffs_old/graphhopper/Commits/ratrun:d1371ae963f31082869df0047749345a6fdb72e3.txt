diff --git a/docs/core/spatial-rules.md b/docs/core/spatial-rules.md
new file mode 100644
index 0000000000..adf9d79712
--- /dev/null
+++ b/docs/core/spatial-rules.md
@@ -0,0 +1,22 @@
+# Spatial Rules
+
+Spatial rules allow you to create rules for certain areas. One example is that the default accessibility for 
+`highway=track` in Austria is `access=yes`, whereas the default accessibility is `access=destination` in Germany. Other 
+examples are different max speeds for different countries. More information on different road rules can be found in the 
+OSM wiki, different [accessibilities](https://wiki.openstreetmap.org/wiki/OSM_tags_for_routing/Access-Restrictions) and 
+different [speeds](https://wiki.openstreetmap.org/wiki/OSM_tags_for_routing/Maxspeed#Motorcar).
+
+## Enabling Rules
+
+I you have a working GraphHopper setup it is easy to enable Spatial Rules, **but they only work with the DataFlagEncoder**.
+We provide a set of approximate country borders, within the GraphHopper repository. If you need exact borders you can
+get the exact borders from [here](https://github.com/datasets/geo-countries). Go to your `config.properties` and
+uncommend the line: `spatial_rules.location` and point it to where your rules are. You need to re-import your graph after 
+that.
+
+## Creating Rules
+
+Writing your own rules is simple. If you write a rule for a country that is not provided in GraphHopper yet, we'd love
+if you would contribute your rules. You can have a look at the [GermanySpatialRule](https://github.com/graphhopper/graphhopper/blob/master/core/src/main/java/com/graphhopper/routing/util/spatialrules/countries/GermanySpatialRule.java).
+Create something similar for your country. After that you have to extend the [CountriesSpatialRuleFactory](https://github.com/graphhopper/graphhopper/blob/master/web/src/main/java/com/graphhopper/spatialrules/CountriesSpatialRuleFactory.java) 
+to match your country code. 
\ No newline at end of file
diff --git a/docs/core/spatial_rules.md b/docs/core/spatial_rules.md
deleted file mode 100644
index 8616d4d16e..0000000000
--- a/docs/core/spatial_rules.md
+++ /dev/null
@@ -1,22 +0,0 @@
-# Spatial Rules
-
-Spatial rules allow you to create rules for certain areas. One famous example is that `highway=track` should be accessible 
-in Austria, whereas it should be marked as `access=destination`. Other examples are different max speeds for different
-countries. More information on different road rules can be found in the OSM wiki. The article about different 
-[accessibilities](https://wiki.openstreetmap.org/wiki/OSM_tags_for_routing/Access-Restrictions) and about different 
-[speeds](https://wiki.openstreetmap.org/wiki/OSM_tags_for_routing/Maxspeed#Motorcar).
-
-## Enabling Rules
-
-I you have a working GraphHopper setup it is easy to enable Spatial Rules, **but they only work the DataFlagEncoder**.
-We provide a set of approximate country borders, within the GraphHopper repository. If you need exact borders you can
-get the exact borders from [here](https://github.com/datasets/geo-countries). Go to your `config.properties` and
-uncommend the line: `spatial_rules.location` and point it to where your rules are. You need to re-import your graph after 
-that.
-
-## Creating Rules
-
-Writing your own rules is simple. If you write a rule for a country that is not provided in GraphHopper yet, we'd love
-if you would contribute your rules. You can have a look at the [GermanySpatialRule](https://github.com/graphhopper/graphhopper/blob/master/core/src/main/java/com/graphhopper/routing/util/spatialrules/countries/GermanySpatialRule.java).
-Create something similar for your contry. After that you have to extend the [CountriesSpatialRuleFactory](https://github.com/graphhopper/graphhopper/blob/master/web/src/main/java/com/graphhopper/spatialrules/CountriesSpatialRuleFactory.java) 
-to match your country code. 
\ No newline at end of file
diff --git a/docs/index.md b/docs/index.md
index d65b817377..5c6aee5185 100644
--- a/docs/index.md
+++ b/docs/index.md
@@ -61,6 +61,7 @@ Various topics are explained in more detail separately:
  * [Speed Mode](./core/ch.md): Details about speeding up the route calculations via [Contraction Hierarchies](http://en.wikipedia.org/wiki/Contraction_hierarchies).
  * [Low level API](./core/low-level-api.md): Instructions how to use GraphHopper as a Java library.
  * [Create new FlagEncoder](./core/create-new-flagencoder.md): Documentation to create new routing profiles to influence which ways to favor and how the track-time is calculated.
+ * [Spatial Rules](./core/spatial-rules.md): Instruction on how to use and create new SpatialRules. SpatialRules are used to enforce country-specific routing rules.
 
 ### Android
 
