diff --git a/api/src/main/java/com/graphhopper/GHResponse.java b/api/src/main/java/com/graphhopper/GHResponse.java
index 6fe8f8c0e4..5ef2b1717b 100644
--- a/api/src/main/java/com/graphhopper/GHResponse.java
+++ b/api/src/main/java/com/graphhopper/GHResponse.java
@@ -18,6 +18,7 @@
 package com.graphhopper;
 
 import com.graphhopper.util.PMap;
+import com.graphhopper.util.shapes.Polygon;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -32,6 +33,7 @@
     private final List<Throwable> errors = new ArrayList<>(4);
     private final PMap hintsMap = new PMap();
     private final List<PathWrapper> pathWrappers = new ArrayList<>(5);
+    public Polygon polygon = new Polygon(new double[] {}, new double[] {});
     private String debugInfo = "";
 
     public GHResponse() {
diff --git a/core/src/main/java/com/graphhopper/GraphHopper.java b/core/src/main/java/com/graphhopper/GraphHopper.java
index 63b9c84334..1fe0b76010 100644
--- a/core/src/main/java/com/graphhopper/GraphHopper.java
+++ b/core/src/main/java/com/graphhopper/GraphHopper.java
@@ -944,6 +944,7 @@ public Weighting createTurnWeighting(Graph graph, Weighting weighting, Traversal
     @Override
     public GHResponse route(GHRequest request) {
         GHResponse response = new GHResponse();
+        response.polygon = request.getPolygon();
         calcPaths(request, response);
         return response;
     }
diff --git a/web-api/src/main/java/com/graphhopper/http/WebHelper.java b/web-api/src/main/java/com/graphhopper/http/WebHelper.java
index 1b691ea50f..9bed0d021e 100644
--- a/web-api/src/main/java/com/graphhopper/http/WebHelper.java
+++ b/web-api/src/main/java/com/graphhopper/http/WebHelper.java
@@ -189,6 +189,7 @@ public static ObjectNode jsonObject(GHResponse ghRsp, boolean enableInstructions
             if (ar.getFare() != null) {
                 jsonPath.put("fare", NumberFormat.getCurrencyInstance(Locale.ROOT).format(ar.getFare()));
             }
+            jsonPath.putPOJO("polygon", ghRsp.polygon.getCoordinatesAsGHPoints());
         }
         return json;
     }
diff --git a/web/src/main/resources/assets/js/graphhopper/GHRequest.js b/web/src/main/resources/assets/js/graphhopper/GHRequest.js
index 4389259b96..f1fb8c88f7 100644
--- a/web/src/main/resources/assets/js/graphhopper/GHRequest.js
+++ b/web/src/main/resources/assets/js/graphhopper/GHRequest.js
@@ -198,7 +198,7 @@ GHRequest.prototype.createPointParams = function (useRawInput) {
         polygon = this.polygon.getIndex(i);
         str += "&";
         if (typeof polygon.input == 'undefined')
-            str += "polygon=";
+            str += "";
         else if (useRawInput)
             str += "polygon=" + encodeURIComponent(polygon.input);
         else
@@ -211,16 +211,12 @@ GHRequest.prototype.createPointParams = function (useRawInput) {
 
 GHRequest.prototype.createPath = function (url, skipParameters) {
     for (var key in this.api_params) {
-    console.log(key)
-
         if(skipParameters && skipParameters[key])
             continue;
 
         var val = this.api_params[key];
         url += this.flatParameter(key, val);
     }
-    console.log(url)
-
     return url;
 };
 
diff --git a/web/src/main/resources/assets/js/graphhopper/GHRoute.js b/web/src/main/resources/assets/js/graphhopper/GHRoute.js
index 61b8a6f747..3b290f83a1 100644
--- a/web/src/main/resources/assets/js/graphhopper/GHRoute.js
+++ b/web/src/main/resources/assets/js/graphhopper/GHRoute.js
@@ -69,8 +69,6 @@ GHroute.prototype = {
         return this.length;
     },
     add: function (value, to) {
-        console.log(value);
-        console.log("lala");
         if (GHroute.isArray(value)) {
             for (var i = 0; i < value.length; i++) {
                 Array.prototype.push.call(this, (value[i] instanceof GHInput) ? value[i] : new GHInput(value[i]));
diff --git a/web/src/main/resources/assets/js/main-template.js b/web/src/main/resources/assets/js/main-template.js
index a431323cd7..655e5055ef 100644
--- a/web/src/main/resources/assets/js/main-template.js
+++ b/web/src/main/resources/assets/js/main-template.js
@@ -82,7 +82,6 @@ $(document).ready(function (e) {
             // https://github.com/defunkt/jquery-pjax/issues/143#issuecomment-6194330
 
             var state = History.getState();
-            console.log(state);
             initFromParams(state.data, true);
         });
     }
@@ -247,6 +246,17 @@ function initFromParams(params, doQuery) {
         enableTime: true
     });
 
+    console.log(params.polygon)
+    if (Array.isArray(params.polygon)) {
+        console.log(params.polygon);
+        for (var i = 0; i < params.polygon.length; i++) {
+            ghRequest.polygon.set(params.polygon[i], i, true);
+        }
+    } else if (params.polygon !== undefined) {
+        ghRequest.polygon.set(params.polygon, 0, true);
+    }
+    console.log(params.polygon)
+
     if (ghRequest.getEarliestDepartureTime()) {
         flatpickr.setDate(ghRequest.getEarliestDepartureTime());
     }
@@ -392,18 +402,12 @@ function setIntermediateCoord(e) {
 }
 
 function setPolygonCoord(e) {
-//    var routeLayers = mapLayer.getSubLayers("route");
-//    var routeSegments = routeLayers.map(function (rl) {
-//        return {
-//            coordinates: rl.getLatLngs(),
-//            wayPoints: rl.feature.properties.snapped_waypoints.coordinates.map(function (wp) {
-//                return L.latLng(wp[1], wp[0]);
-//            })
-//        };
-//    });
     var index = ghRequest.polygon.size();
-    ghRequest.polygon.add(e.latlng.wrap(), index);
-//    resolveIndex(index);
+    ghRequest.polygon.set(e.latlng.wrap(), index, true);
+    console.log(e.latlng.wrap());
+//    mapLayer.createPolygonMarker(index, e.latlng.wrap(), ghRequest);
+
+    //resolveIndex(index);
     routeIfAllResolved();
 }
 
@@ -550,7 +554,6 @@ function routeLatLng(request, doQuery) {
     $("button#" + request.getVehicle().toLowerCase()).addClass("selectvehicle");
 
     var urlForAPI = request.createURL();
-    console.log(urlForAPI);
     routeResultsDiv.html('<img src="img/indicator.gif"/> Search Route ...');
     request.doRequest(urlForAPI, function (json) {
         routeResultsDiv.html("");
@@ -607,6 +610,8 @@ function routeLatLng(request, doQuery) {
         var defaultRouteStyle = {color: "#00cc33", "weight": 5, "opacity": 0.6};
         var highlightRouteStyle = {color: "#00cc33", "weight": 6, "opacity": 0.8};
         var alternativeRouteStye = {color: "darkgray", "weight": 6, "opacity": 0.8};
+        var polygonStyle = {color: "#FA00FF", "weight": 6, "opacity": 0.8};
+
         var geoJsons = [];
         var firstHeader;
 
@@ -649,6 +654,28 @@ function routeLatLng(request, doQuery) {
 
             geoJsons.push(geojsonFeature);
             mapLayer.addDataToRoutingLayer(geojsonFeature);
+            let polyCoord = []
+            for (var polyIndex = 0; polyIndex < request.polygon.length; polyIndex++) {
+                latlng = [request.polygon[polyIndex].lng,request.polygon[polyIndex].lat];
+                polyCoord.push(latlng)
+                mapLayer.createPolygonMarker(polyIndex, latlng, request);
+            }
+            if (request.polygon[0] !== undefined) {
+                polyCoord.push([request.polygon[0].lng,request.polygon[0].lat])
+            }
+
+            const geojsonPolygon = {
+                "type": "Feature",
+                "geometry": {type:"LineString",coordinates:polyCoord},
+                "properties": {
+                    "style": polygonStyle,
+                    name: "route",
+                }
+            };
+                 console.log(geojsonPolygon)
+
+             mapLayer.addDataToPolygonLayer(geojsonPolygon);
+
             var oneTab = $("<div class='route_result_tab'>");
             routeResultsDiv.append(oneTab);
             tabHeader.click(createClickHandler(geoJsons, pathIndex, tabHeader, oneTab, request.hasElevation(), request.useMiles, path.details));
diff --git a/web/src/main/resources/assets/js/map.js b/web/src/main/resources/assets/js/map.js
index 7e4202bd47..e3a5d75e3d 100644
--- a/web/src/main/resources/assets/js/map.js
+++ b/web/src/main/resources/assets/js/map.js
@@ -3,6 +3,7 @@ var tileLayers = require('./config/tileLayers.js');
 var translate = require('./translate.js');
 
 var routingLayer;
+var polygonLayer;
 var map;
 var menuStart;
 var polyItem;
@@ -90,7 +91,7 @@ function initMap(bounds, setStartCoord, setIntermediateCoord, setEndCoord, setPo
     };
         var _polyItem = {
             text: "Add Polygon Coordinate",
-            icon: './img/marker-small-green.png',
+            icon: './img/marker-small-purple.png',
             callback: setPolygonCoord,
             index: 3
         };
@@ -197,6 +198,7 @@ function initMap(bounds, setStartCoord, setIntermediateCoord, setEndCoord, setPo
         }).addTo(map);
 
     routingLayer = L.geoJson().addTo(map);
+    polygonLayer = L.geoJson().addTo(map);
 
     routingLayer.options = {
         // use style provided by the 'properties' entry of the geojson added by addDataToRoutingLayer
@@ -217,6 +219,12 @@ function initMap(bounds, setStartCoord, setIntermediateCoord, setEndCoord, setPo
         contextmenuInheritItems: false
     };
 
+    polygonLayer.options = {
+        // use style provided by the 'properties' entry of the geojson added by addDataToRoutingLayer
+        style: function (feature) {
+            return feature.properties && feature.properties.style;
+        },
+    };
 }
 
 function focus(coord, zoom, index) {
@@ -231,6 +239,7 @@ function focus(coord, zoom, index) {
 
 module.exports.clearLayers = function () {
     routingLayer.clearLayers();
+    polygonLayer.clearLayers();
 };
 
 module.exports.getRoutingLayer = function () {
@@ -248,6 +257,10 @@ module.exports.addDataToRoutingLayer = function (geoJsonFeature) {
     routingLayer.addData(geoJsonFeature);
 };
 
+module.exports.addDataToPolygonLayer = function (geoJsonFeature) {
+    polygonLayer.addData(geoJsonFeature);
+}
+
 module.exports.eachLayer = function (callback) {
     routingLayer.eachLayer(callback);
 };
@@ -411,7 +424,25 @@ var iconTo = L.icon({
     iconAnchor: [12, 40]
 });
 
+var polygonIcon = L.icon({
+    iconUrl: './img/marker-icon-purple.png',
+    shadowSize: [50, 64],
+    shadowAnchor: [4, 62],
+    iconAnchor: [12, 40]
+});
+
+module.exports.createPolygonMarker = function(index, coord, ghRequest) {
+console.log("lala1")
+
+console.log(coord)
+    return L.marker([coord[1], coord[0]], {icon: polygonIcon, draggable:false}).addTo(map);
+}
+
 module.exports.createMarker = function (index, coord, setToEnd, setToStart, deleteCoord, ghRequest) {
+console.log("lala2")
+
+console.log(coord)
+
     var toFrom = getToFrom(index, ghRequest);
     return L.marker([coord.lat, coord.lng], {
         icon: ((toFrom === FROM) ? iconFrom : ((toFrom === TO) ? iconTo : new L.NumberedDivIcon({number: index}))),
