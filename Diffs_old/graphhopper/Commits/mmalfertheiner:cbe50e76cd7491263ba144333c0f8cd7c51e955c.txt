diff --git a/core/src/main/java/com/graphhopper/routing/Path.java b/core/src/main/java/com/graphhopper/routing/Path.java
index da743c3580..cfc6676015 100644
--- a/core/src/main/java/com/graphhopper/routing/Path.java
+++ b/core/src/main/java/com/graphhopper/routing/Path.java
@@ -228,6 +228,10 @@ protected void processEdge( int edgeId, int adjNode )
         double dist = iter.getDistance();
         distance += dist;
         time += calcMillis(dist, iter.getFlags(), false);
+        int wayType = (int) this.encoder.getDouble(iter.getFlags(), DynamicWeighting.WAY_TYPE_KEY);
+
+        System.out.println(wayType + ": dist: " + dist);
+
         addEdge(edgeId);
     }
 
diff --git a/core/src/main/java/com/graphhopper/routing/util/BikeGenericFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/BikeGenericFlagEncoder.java
index d58763df4e..a6a42944bd 100644
--- a/core/src/main/java/com/graphhopper/routing/util/BikeGenericFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/BikeGenericFlagEncoder.java
@@ -150,7 +150,7 @@ protected BikeGenericFlagEncoder(int speedBits, double speedFactor, int maxTurnC
         unpavedSurfaceTags.add("salt");
         unpavedSurfaceTags.add("sand");
 
-        maxPossibleSpeed = 30;
+        maxPossibleSpeed = 34;
 
         setSurfaceSpeedFactor("concrete:lanes", 0.9f);
         setSurfaceSpeedFactor("concrete:plates", 0.9f);
diff --git a/core/src/main/java/com/graphhopper/routing/util/DynamicWeighting.java b/core/src/main/java/com/graphhopper/routing/util/DynamicWeighting.java
index 06262cedf1..295b1fcdc0 100644
--- a/core/src/main/java/com/graphhopper/routing/util/DynamicWeighting.java
+++ b/core/src/main/java/com/graphhopper/routing/util/DynamicWeighting.java
@@ -85,7 +85,7 @@ public double calcWeight( EdgeIteratorState edgeState, boolean reverse, int prev
         if (penalizeEdge)
             time += heading_penalty;
 
-        return time / (0.5 + getUserPreference(edgeState));
+        return time / (0.5 + Math.pow(getUserPreference(edgeState), 2));
     }
 
     private double getUserPreference(EdgeIteratorState edgeState) {
@@ -101,18 +101,17 @@ private double getUserPreference(EdgeIteratorState edgeState) {
             priority = PriorityCode.AVOID_AT_ALL_COSTS.getValue();
         else if(wayType == 13 || wayType == 14)
             priority = PriorityCode.BEST.getValue();
-        else if(wayType >= 10 && wayType <= 12) {
+        else if(wayType == 10) {
 
-            priority = PriorityCode.AVOID_IF_POSSIBLE.getValue();
+            priority = PriorityCode.REACH_DEST.getValue();
 
             if(incDist2DSum > 10 && incElevation > 0.02) {
-                priority = PriorityCode.AVOID_AT_ALL_COSTS.getValue();
-                //System.out.println(wayType + ": elevation: " + incElevation + ": " + incDist2DSum);
-
-                if(incElevation > 0.1){
-                    priority = PriorityCode.WORST.getValue();
-                }
+                priority = PriorityCode.WORST.getValue();
             }
+
+        } else if (wayType == 11 || wayType == 12) {
+            //Should be considered only for Downhill racers
+            priority = PriorityCode.WORST.getValue();
         } else if (wayType >= 2 && wayType <= 6){
             priority = PriorityCode.PREFER.getValue();
         } else if (wayType == 15){
diff --git a/core/src/main/java/com/graphhopper/routing/util/ProfileSpeedProvider.java b/core/src/main/java/com/graphhopper/routing/util/ProfileSpeedProvider.java
index a5994af5a8..cd27fab348 100644
--- a/core/src/main/java/com/graphhopper/routing/util/ProfileSpeedProvider.java
+++ b/core/src/main/java/com/graphhopper/routing/util/ProfileSpeedProvider.java
@@ -1,6 +1,7 @@
 package com.graphhopper.routing.util;
 
 import com.graphhopper.util.EdgeIteratorState;
+import com.graphhopper.util.Helper;
 import com.graphhopper.util.profiles.RidersProfile;
 
 import java.util.Map;
@@ -100,7 +101,7 @@ private double adjustSpeed(double speed, EdgeIteratorState edgeState, boolean re
             adjustedSpeed = keepIn(speed * (fwdSlower * decDist2DSum + fwdFaster * incDist2DSum) / edgeState.getDistance(), BikeGenericFlagEncoder.PUSHING_SECTION_SPEED / 2, 50);
         }
 
-        //System.out.println("NEW SPEED: " + Helper.round2(adjustedSpeed) + ", SPEED: " + speed + ", INC ELE: " + incElevation + ", DEC ELE: " + decElevation + ", PERCENTAGE: " + incDistPercentage);
+        System.out.println("NEW SPEED: " + Helper.round2(adjustedSpeed) + ", SPEED: " + speed + ", INC ELE: " + incElevation + ", DEC ELE: " + decElevation + ", PERCENTAGE: " + incDistPercentage);
 
         return adjustedSpeed;
     }
diff --git a/graphhopper.sh b/graphhopper.sh
index 31444a70fd..7fb81f4320 100755
--- a/graphhopper.sh
+++ b/graphhopper.sh
@@ -206,7 +206,7 @@ else
 fi
 
 if [ "$JAVA_OPTS" = "" ]; then
-  JAVA_OPTS="-Xmx2000m -Xms2000m -server"
+  JAVA_OPTS="-Xmx3000m -Xms3000m -server"
 fi
 
 
