diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperGPXParserRouteTest.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperGPXParserRouteTest.java
index 62af1113bd..51c1277354 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperGPXParserRouteTest.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperGPXParserRouteTest.java
@@ -300,7 +300,7 @@ public boolean routeContainsTurn(String turnDescription, Route aRoute) {
 		return routeContainsTurn;
 	}
 
-	CloseableHttpResponse sendAndGetResponse(String requestUrl)
+	public CloseableHttpResponse sendAndGetResponse(String requestUrl)
 			throws IOException {
 		String serviceUrl = requestUrl;
 		if (IntegrationTestProperties.getTestPropertyBool("viaApigee")) {
diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperJSONParser.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperJSONParser.java
index 4e4a6f91a8..fbef0c8f8a 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperJSONParser.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperJSONParser.java
@@ -3,9 +3,6 @@
 import java.io.IOException;
 import java.util.HashSet;
 
-
-
-
 import org.alternativevision.gpx.beans.Waypoint;
 import org.apache.commons.io.IOUtils;
 import org.apache.http.client.methods.CloseableHttpResponse;
@@ -40,64 +37,68 @@ public GraphHopperJSONParser() {
 	public JSONWayPoints parseJSONFromString(String jsonString) {
 		this.jsonString = jsonString;
 		JsonParser parser = new JsonParser();
-		
-		try{
-		JsonElement je = parser.parse(jsonString);
-		JsonObject jo = je.getAsJsonObject();
-		JsonArray paths = jo.getAsJsonArray("paths");
-
-		JsonArray instructions = paths.get(0).getAsJsonObject()
-				.getAsJsonArray("instructions");
-
-		for (int i = 0; i < instructions.size(); i++) {
-			Waypoint w = new Waypoint();
-
-			JsonObject instruction = instructions.get(i).getAsJsonObject();
-
-			JsonPrimitive description = instruction.getAsJsonPrimitive("text");
-			JsonPrimitive time = instruction.getAsJsonPrimitive("time");
-			JsonPrimitive distance = instruction.getAsJsonPrimitive("distance");
-
-			double distance_rounding = Double.parseDouble(distance.toString());
-
-			distance_rounding = Math.round(distance_rounding * 10) / 10.0;
 
-			JsonPrimitive azimuth = instruction.getAsJsonPrimitive("azimuth");
-			JsonPrimitive annotation_text = instruction
-					.getAsJsonPrimitive("annotation_text");
-			JsonArray interval = instruction.getAsJsonArray("interval");
-			int coordinateIndex = Integer.parseInt(interval.get(0).toString());
-			JsonElement s = getJSONCoordinates(paths, coordinateIndex);
-			Double longitude = Double.parseDouble(s.getAsJsonArray().get(0)
-					.toString());
-			Double latitude = Double.parseDouble(s.getAsJsonArray().get(1)
-					.toString());
-			w.setLongitude(longitude);
-			w.setLatitude(latitude);
-			w.setDescription(description.toString());
-			w.addExtensionData(ExtensionConstants.DISTANCE,
-					String.valueOf(distance_rounding));
-			w.addExtensionData(ExtensionConstants.TIME, time.toString());
-
-			LOG.info("azimuth :" + azimuth);
-			LOG.info("descritption: " + description);
-			LOG.info("time :" + time);
-			LOG.info("distance :" + distance);
-			if (null != annotation_text) {
-				w.addExtensionData("Annotation_text", annotation_text
-						.getAsString().trim());
-				LOG.info("annotation_text: "
-						+ annotation_text.getAsString().trim());
+		try {
+			JsonElement je = parser.parse(jsonString);
+			JsonObject jo = je.getAsJsonObject();
+			JsonArray paths = jo.getAsJsonArray("paths");
+
+			JsonArray instructions = paths.get(0).getAsJsonObject()
+					.getAsJsonArray("instructions");
+
+			for (int i = 0; i < instructions.size(); i++) {
+				Waypoint w = new Waypoint();
+
+				JsonObject instruction = instructions.get(i).getAsJsonObject();
+
+				JsonPrimitive description = instruction
+						.getAsJsonPrimitive("text");
+				JsonPrimitive time = instruction.getAsJsonPrimitive("time");
+				JsonPrimitive distance = instruction
+						.getAsJsonPrimitive("distance");
+
+				double distance_rounding = Double.parseDouble(distance
+						.toString());
+
+				distance_rounding = Math.round(distance_rounding * 10) / 10.0;
+
+				JsonPrimitive azimuth = instruction
+						.getAsJsonPrimitive("azimuth");
+				JsonPrimitive annotation_text = instruction
+						.getAsJsonPrimitive("annotation_text");
+				JsonArray interval = instruction.getAsJsonArray("interval");
+				int coordinateIndex = Integer.parseInt(interval.get(0)
+						.toString());
+				JsonElement s = getJSONCoordinates(paths, coordinateIndex);
+				Double longitude = Double.parseDouble(s.getAsJsonArray().get(0)
+						.toString());
+				Double latitude = Double.parseDouble(s.getAsJsonArray().get(1)
+						.toString());
+				w.setLongitude(longitude);
+				w.setLatitude(latitude);
+				w.setDescription(description.toString());
+				w.addExtensionData(ExtensionConstants.DISTANCE,
+						String.valueOf(distance_rounding));
+				w.addExtensionData(ExtensionConstants.TIME, time.toString());
+
+				LOG.info("azimuth :" + azimuth);
+				LOG.info("descritption: " + description);
+				LOG.info("time :" + time);
+				LOG.info("distance :" + distance);
+				if (null != annotation_text) {
+					w.addExtensionData("Annotation_text", annotation_text
+							.getAsString().trim());
+					LOG.info("annotation_text: "
+							+ annotation_text.getAsString().trim());
+				}
+				LOG.info("Coordinates : " + w.getLatitude() + ","
+						+ w.getLongitude());
+
+				json.addWayPoint(w);
 			}
-			LOG.info("Coordinates : " + w.getLatitude() + ","
-					+ w.getLongitude());
-
-			json.addWayPoint(w);
-		}
 		}
-		
-		catch(Exception e)
-		{
+
+		catch (Exception e) {
 			LOG.info(e.getMessage());
 		}
 		return json;
@@ -130,9 +131,7 @@ public JSONWayPoints parseCoordinatesFromJson(String jsonString) {
 		return json;
 
 	}
-	
-	
-	
+
 	public String parseErrorMessagesFromJson(String jsonString) {
 		this.jsonString = jsonString;
 		JsonParser parser = new JsonParser();
@@ -146,8 +145,7 @@ public String parseErrorMessagesFromJson(String jsonString) {
 		return errorMessage.getAsString();
 
 	}
-	
-	
+
 	public int parseStatusCodeFromJson(String jsonString) {
 		this.jsonString = jsonString;
 		JsonParser parser = new JsonParser();
@@ -178,93 +176,6 @@ public JsonElement getJSONCoordinates(JsonArray paths, int coordinateIndex) {
 		return coordinates.get(coordinateIndex);
 	}
 
-	public void parse(String routeType, String avoidances, String routeOptions,
-			String[] string) {
-
-		String vehicle = "";
-		String routeOption = "";
-
-		if (routeOptions.split(",").length > 1) {
-			vehicle = routeOptions.split(",")[0];
-			routeOption = routeOptions.split(",")[1];
-		} else {
-			vehicle = routeOptions;
-		}
-		// Set up the URL
-		String jsonResponse = "";
-		String coordinateString = "";
-		String graphHopperUrl;
-
-		for (int i = 0; i < string.length; i++) {
-
-			coordinateString = coordinateString + "&point=" + string[i];
-
-		}
-
-		if (IntegrationTestProperties.getTestPropertyBool("viaApigee")) {
-			graphHopperUrl = IntegrationTestProperties
-					.getTestProperty("graphHopperWebUrlViaApigee");
-		} else {
-			graphHopperUrl = IntegrationTestProperties
-					.getTestProperty("graphHopperWebUrl");
-		}
-
-		String apikey = IntegrationTestProperties.getTestProperty("apiKey");
-		if (vehicle.equalsIgnoreCase("mountainbike")) {
-			vehicle = "mtb";
-		}
-		StringBuilder sb = new StringBuilder();
-		sb.append(graphHopperUrl);
-		sb.append("route?");
-		if (routeType != null) {
-			sb.append("type=");
-			sb.append(routeType);
-		}
-		sb.append("&vehicle=");
-		sb.append(vehicle);
-
-		sb.append(coordinateString);
-		sb.append("&apikey=");
-		sb.append(apikey);
-		sb.append("&points_encoded=false");
-
-		if (!avoidances.equals("")) {
-			sb.append("&avoidances=" + avoidances);
-
-			if (routeOption.isEmpty()) {
-				routeOption = "fastavoid";
-			}
-		}
-
-		else {
-
-			if (routeOption.isEmpty()) {
-				routeOption = "fastest";
-			}
-
-		}
-
-		sb.append("&weighting=");
-
-		sb.append(routeOption);
-		GraphHopperGPXParserRouteTest GPHService = new GraphHopperGPXParserRouteTest();
-		try {
-			CloseableHttpResponse httpResponse = GPHService
-					.sendAndGetResponse(sb.toString());
-			jsonResponse = IOUtils.toString(httpResponse.getEntity()
-					.getContent(), "UTF-8");
-
-		} catch (IOException e) {
-			LOG.info("Exception raised whilst attempting to call graphhopper server "
-					+ e.getMessage());
-		}
-
-		if (jsonResponse != null && jsonResponse.length() > 0) {
-			parseJSONFromString(jsonResponse);
-		}
-
-	}
-
 	/**
 	 * verifies if the waypoint is present in the JSON string.
 	 * 
@@ -328,53 +239,23 @@ public Waypoint buildWayPointForJson(String wayPoint_Coordinates,
 
 	}
 
-	// nearest point
-	public String getNearestPoint(String pointA) {
-
-		String nearestpoint = "";
-		StringBuffer sb = new StringBuffer();
-		if (IntegrationTestProperties
-				.getTestPropertyBool("viaApigee")) {
-			sb.append(IntegrationTestProperties
-					.getTestProperty("graphHopperWebUrlViaApigee"));
-		} else {
-			sb.append(IntegrationTestProperties
-					.getTestProperty("graphHopperWebUrl"));
-		}
-
-		sb.append("nearest?point=");
-		sb.append(pointA);
-		GraphHopperGPXParserRouteTest GPHService = new GraphHopperGPXParserRouteTest();
-
-		try {
-			CloseableHttpResponse httpResponse = GPHService
-					.sendAndGetResponse(sb.toString());
-
-			jsonString = IOUtils.toString(
-					httpResponse.getEntity().getContent(), "UTF-8");
-
-			JsonParser jp = new JsonParser();
-			JsonElement je = jp.parse(jsonString);
-			JsonArray jo = je.getAsJsonObject().getAsJsonArray("coordinates");
+	public String nearestPointJSONParser(String jsoString) {
+		this.jsonString = jsoString;
 
-			nearestpoint = jo.get(1).getAsString() + ","
-					+ jo.get(0).getAsString();
-
-		} catch (IOException e) {
-			LOG.info("Exception raised whilst attempting to call graphhopper server "
-					+ e.getMessage());
-		}
+		JsonParser jp = new JsonParser();
+		JsonElement je = jp.parse(jsonString);
+		JsonArray jo = je.getAsJsonObject().getAsJsonArray("coordinates");
 
-		return nearestpoint;
+		return jo.get(1).getAsString() + "," + jo.get(0).getAsString();
 
 	}
 	
-	
-	
-	
-	
-	public void parse(StringBuffer sb) {
+	public String getJSONString()
+	{
+		return jsonString;
+	}
 
+	public void parse(StringBuffer sb) {
 
 		String jsonResponse = "";
 
@@ -395,15 +276,6 @@ public void parse(StringBuffer sb) {
 		}
 
 	}
-	
-
-	public String getNearestPointDistance() {
-		JsonParser jp = new JsonParser();
-		JsonElement je = jp.parse(jsonString);
-		JsonPrimitive distance = je.getAsJsonObject().getAsJsonPrimitive(
-				"distance");
-		return distance.toString();
-	}
 
 	public long getTotalRouteTime() {
 		JsonParser parser = new JsonParser();
@@ -416,17 +288,19 @@ public long getTotalRouteTime() {
 	}
 
 	public void verifyMessage(String responseMessage) {
-		String actualErrorMessage=parseErrorMessagesFromJson(jsonString);
-		Assert.assertTrue("actual error message:"+actualErrorMessage+" does not match with: "+responseMessage,responseMessage.equalsIgnoreCase(actualErrorMessage));
-		
-		
+		String actualErrorMessage = parseErrorMessagesFromJson(jsonString);
+		Assert.assertTrue("actual error message:" + actualErrorMessage
+				+ " does not match with: " + responseMessage,
+				responseMessage.equalsIgnoreCase(actualErrorMessage));
+
 	}
 
 	public void verifyStatusCode(int statusCode) {
-		int actualStatusCode =parseStatusCodeFromJson(jsonString);
-		Assert.assertTrue("actual error message: "+actualStatusCode+" does not match with: "+ statusCode,(actualStatusCode==statusCode));
-		
-		
+		int actualStatusCode = parseStatusCodeFromJson(jsonString);
+		Assert.assertTrue("actual error message: " + actualStatusCode
+				+ " does not match with: " + statusCode,
+				(actualStatusCode == statusCode));
+
 	}
 
 }
diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperXMLUnitParserRouteTest.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperXMLUnitParserRouteTest.java
index df4c4378e1..d697a34e39 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperXMLUnitParserRouteTest.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperXMLUnitParserRouteTest.java
@@ -9,15 +9,12 @@
 
 import org.custommonkey.xmlunit.XMLTestCase;
 import org.custommonkey.xmlunit.XMLUnit;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
 import org.xml.sax.SAXException;
 
 public class GraphHopperXMLUnitParserRouteTest extends XMLTestCase {
 
 	private DocumentBuilder builder;
-	private static final Logger LOG = LoggerFactory
-			.getLogger(GraphHopperXMLUnitParserRouteTest.class);
+	
 
 	public GraphHopperXMLUnitParserRouteTest(String gpxFileName) {
 		try {
diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
index 3aaa82e5a9..a10bd708c1 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
@@ -7,8 +7,8 @@
 
 import org.junit.Assert;
 
-
 import uk.co.ordnancesurvey.gpx.graphhopper.IntegrationTestProperties;
+import uk.co.ordnancesurvey.gpx.graphhopper.NearestPointServiceUtil;
 import cucumber.api.DataTable;
 import cucumber.api.Scenario;
 import cucumber.api.java.After;
@@ -19,7 +19,8 @@
 
 public class GraphHopperHooks {
 	GraphHopperUIUtil graphUiUtil;
-	String testON="";
+
+	String testON = "";
 
 	String instruction;
 	String nearestPoint = "";
@@ -27,53 +28,44 @@
 	String pointA;
 
 	DataTable routePointsTable;
-	private String routeResponsecode;
-	private String routeResponseMessage;
-	// private Map<String,String> requestParameters= new HashMap<>();
 
-	
+	NearestPointServiceUtil nearestPointUtil= new NearestPointServiceUtil();
+
 	@Before
-	public void init()
-	{
+	public void init() {
+		
 		graphUiUtil = (IntegrationTestProperties
-				.getTestPropertyBool("viaApigee") == true) ?  new GraphHopperUIUtil(
+				.getTestPropertyBool("viaApigee") == true) ? new GraphHopperUIUtil(
 				IntegrationTestProperties
 						.getTestProperty("graphHopperWebUrlViaApigee"))
 				: new GraphHopperUIUtil(
 						IntegrationTestProperties
 								.getTestProperty("graphHopperWebUrl"));
+
 	}
 
-	
-	@Before({"@WebOnly"})
-	public void overrideTestONProperty()
-	{
+	@Before("@WebOnly,@SampleScenario")
+	public void overrideTestONProperty() {
 
-		testON=IntegrationTestProperties.getTestProperty("testON");
+		testON = IntegrationTestProperties.getTestProperty("testON");
 		IntegrationTestProperties.setTestProperty("testON", "Web");
 	}
 
-	
-	@After({"@WebOnly"})
-	public void rollBackTestONProperty()
-	{
+	@After("@WebOnly,@SampleScenario")
+	public void rollBackTestONProperty() {
 		IntegrationTestProperties.setTestProperty("testON", testON);
-		
-		
+
 	}
 
-	
-	
 	@Given("^My routing point for nearestPoint API as \"([^\"]*)\"$")
-	public void I_have_route_point_for_Nearest_Point_API(
-			String pointA) {
-		this.pointA=pointA;
+	public void I_have_route_point_for_Nearest_Point_API(String pointA) {
+		this.pointA = pointA;
 	}
+
 	@When("^I request a nearest point from from Nearest Point API$")
-	public void I_request_a_nearest_point_from_from_Nearest_Point_API(
-			) {
-		nearestPoint = graphUiUtil.nearestPointService(pointA);
-		Distance = graphUiUtil.nearestPointDistance();
+	public void I_request_a_nearest_point_from_from_Nearest_Point_API() {
+		nearestPoint=nearestPointUtil.getNearestPoint(pointA);
+		Distance = nearestPointUtil.getNearestPointDistance();
 
 	}
 
@@ -90,17 +82,6 @@ public void I_should_be_able_to_verify_the_nearest_point_to_be(
 
 	}
 
-	@Then("^I should be able to verify the \"([^\"]*)\" waypoint \"([^\"]*)\" \"([^\"]*)\" \"([^\"]*)\" \"([^\"]*)\" \"([^\"]*)\" \"([^\"]*)\" on the route map$")
-	public void I_should_be_able_to_verify_the_waypoint_on_the_route_map(
-			String wayPointIndex, String wayPoint_Coordinates,
-			String wayPointDescription, String azimuth, String direction,
-			String time, String distance) {
-
-		graphUiUtil.isWayPointonRouteMap(wayPointIndex, wayPoint_Coordinates,
-				wayPointDescription, azimuth, direction, time, distance, "");
-
-	}
-
 	@Then("^I should be able to verify the waypoints on the route map:")
 	public void I_should_be_able_to_verify_the_waypoints_on_the_route_map(
 			List<Map<String, String>> wayPointList) {
@@ -117,7 +98,7 @@ public void I_should_be_able_to_verify_the_not_waypoints_on_the_route_map(
 		Assert.assertFalse(
 				"Waypoint found on the route where it was not expected",
 				graphUiUtil.isWayPointNotonRouteMap(wayPointList));
-	
+
 	}
 
 	@Then("^The total route time should be not more than \"([^\"]*)\"$")
@@ -143,105 +124,38 @@ public void I_should_be_able_to_verify_the_trackpoints_not_on_the_route_map(
 
 	}
 
-	@After
-	public void closeBrowser(Scenario sc) {
-
-		if (sc.isFailed()) {
-
-			try {
-				byte[] screeenshot = graphUiUtil.takescreenAsBiteArray();
-				sc.embed(screeenshot, "image/png");
-
-			} catch (IOException e) {
-				
-				e.printStackTrace();
-			}
-		}
-		
-		graphUiUtil.logout();
-
-
-	}
-
-	@Given("^I request a route between points with \"([^\"]*)\" from RoutingAPI and avoid \"([^\"]*)\"$")
-	public void getRouteWithAvoidancesintermediatepoints(String routeOptions,
-			String avoidances, DataTable dt) throws InterruptedException {
-
-		List<List<String>> data = dt.raw();
-
-		String[] points = new String[data.get(1).size()];
-		points = data.get(1).toArray(points);
-
-		graphUiUtil = new GraphHopperUIUtil(
-				IntegrationTestProperties.getTestProperty("graphHopperWebUrl"));
-
-		String testON = IntegrationTestProperties.getTestProperty("testON");
-
-		switch (testON.toUpperCase()) {
-		case "WEB":
-
-			graphUiUtil.getRouteFromUI(routeOptions, avoidances, points);
-			break;
-		case "SERVICE":
-			graphUiUtil.getRouteFromServiceWithAvoidance(routeOptions,
-					avoidances, points);
-			break;
-		default:
-
-			if (points[0].split(",").length == 2) {
-				graphUiUtil.getRouteFromServiceWithAvoidance(routeOptions,
-						avoidances, points);
-				graphUiUtil.getRouteFromUI(routeOptions, avoidances, points);
-			} else {
-				graphUiUtil.getRouteFromUI(routeOptions, avoidances, points);
-			}
-
-			break;
-
-		}
-	}
-
 	@Given("^I have ([^\"]*) as \"([^\"]*)\"$")
 	public void setParameters_for_RoutingRequest(String paramName,
 			String paramValue) {
-		
+
 		graphUiUtil.addParameter(paramName, paramValue);
 	}
 
-
 	@Given("^I have route ([^\"]*) as$")
-	public void setRoutingpoints(String paramName,DataTable dt) {
-		//graphUiUtil=new GraphHopperUIUtil(IntegrationTestProperties.getTestProperty("graphHopperWebUrl"));
-		routePointsTable=dt;
+	public void setRoutingpoints(String paramName, DataTable dt) {
+
+		routePointsTable = dt;
 		graphUiUtil.addRoutePointsToParameters(paramName, dt);
 
 	}
 
-
-	
-
 	@Then("^I should be able to verify the statuscode as \"([^\"]*)\"$")
-	public void I_should_be_able_to_verify_the_responseCode_as(
-			int  statusCode) {
-		
-		graphUiUtil.verifyStatusCode(statusCode);
+	public void I_should_be_able_to_verify_the_responseCode_as(int statusCode) {
 
+		graphUiUtil.verifyStatusCode(statusCode);
 
 	}
 
 	@Then("^I should be able to verify the response message as \"([^\"]*)\"$")
 	public void I_should_be_able_to_verify_the_response_message_as(
 			String responseMessage) {
-		
+
 		graphUiUtil.verifyErrorMessage(responseMessage);
-	
+
 	}
 
-	
-	
 	@When("^I request for a route$")
 	public void I_request_for_route() {
-		
 
 		String testON = IntegrationTestProperties.getTestProperty("testON");
 
@@ -251,9 +165,7 @@ public void I_request_for_route() {
 			graphUiUtil.getRouteFromUI();
 			break;
 		case "SERVICE":
-			
-			
-			
+
 			graphUiUtil.getRouteFromServiceWithParameters();
 
 			break;
@@ -264,23 +176,52 @@ public void I_request_for_route() {
 			String[] points = new String[data.get(1).size()];
 			points = data.get(1).toArray(points);
 
-
-			if (points[0].split(",").length==2) {
+			if (points[0].split(",").length == 2) {
 				graphUiUtil.getRouteFromServiceWithParameters();
 				graphUiUtil.getRouteFromUI();
 			} else {
-				
+
 				graphUiUtil.getRouteFromUI();
 			}
 
 			break;
 
+		}
+
+	}
+
+	@After("@Current")
+	public void I_should_be_able_to_capture_a_screenshot(Scenario sc)
+			throws ParseException {
+
+		try {
+			byte[] screeenshot = graphUiUtil.takescreenAsBiteArray();
+			sc.embed(screeenshot, "image/png");
 
+		} catch (IOException e) {
+
+			e.printStackTrace();
 		}
-		
 
-		
 	}
-	
-	
+
+	@After
+	public void closeBrowser(Scenario sc) {
+
+		if (sc.isFailed()) {
+
+			try {
+				byte[] screeenshot = graphUiUtil.takescreenAsBiteArray();
+				sc.embed(screeenshot, "image/png");
+
+			} catch (IOException e) {
+
+				e.printStackTrace();
+			}
+		}
+
+		graphUiUtil.logout();
+
+	}
+
 }
\ No newline at end of file
diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
index 02da04b095..eb55538cc5 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
@@ -46,7 +46,6 @@
 
 import org.alternativevision.gpx.beans.Route;
 import org.alternativevision.gpx.beans.Waypoint;
-import org.junit.After;
 import org.junit.Assert;
 import org.openqa.selenium.By;
 import org.openqa.selenium.JavascriptExecutor;
@@ -103,12 +102,11 @@ private void init() throws InterruptedException {
 	@Override
 	public void logout() {
 
-		if (!testOn.equalsIgnoreCase("SERVICE"))
-		{
+		if (!testOn.equalsIgnoreCase("SERVICE")) {
 			LOG.info("Closing Web browser!!!");
 			shutDownWebDrivers();
 		}
-		
+
 	}
 
 	/**
@@ -284,35 +282,6 @@ public boolean verifyInstructionThroughUI(String routeStepNumber,
 
 	}
 
-	public void getRouteFromServiceWithAvoidance(String routeOptions,
-			String avoidances, String... points) {
-
-		if (IntegrationTestProperties.getTestProperty("routeType")
-				.equalsIgnoreCase("gpx")) {
-			GPHService.parseRoute("gpx", avoidances, routeOptions, points);
-		}
-
-		else {
-
-			GPHJsonService.parse("json", avoidances, routeOptions, points);
-		}
-
-	}
-
-	public void getRouteFromService(String routeType, String... points) {
-
-		if (IntegrationTestProperties.getTestProperty("routeType")
-				.equals("gpx")) {
-			GPHService.parseRoute("gpx", "", routeType, points);
-		}
-
-		else {
-
-			GPHJsonService.parse("json", "", routeType, points);
-		}
-
-	}
-
 	public void verifyInstructionThroughService(String stepInstruction) {
 		HashSet<Route> routeInstruction = GPHService.getRoutes();
 
@@ -349,11 +318,8 @@ public boolean isWayPointonRouteMap(String wayPointIndex,
 					wayPointDescription, avoidance);
 			break;
 		case "SERVICE":
-			
-			
-	
-			if (requestParameters.get("type").get(0).equals(
-					"gpx")) {
+
+			if (requestParameters.get("type").get(0).equals("gpx")) {
 				wp = buildWayPoint(wayPoint_Coordinates, wayPointDescription,
 						azimuth, direction, time, distance);
 				isWayPointonRouteMap = GPHService.isWayPointOnGPXRoutes(wp);
@@ -372,8 +338,7 @@ public boolean isWayPointonRouteMap(String wayPointIndex,
 			isWayPointonRouteMapUI = verifyInstructionThroughUI(wayPointIndex,
 					wayPointDescription, avoidance);
 
-			if (requestParameters.get("type").get(0).equals(
-					"gpx")) {
+			if (requestParameters.get("type").get(0).equals("gpx")) {
 				wp = buildWayPoint(wayPoint_Coordinates, wayPointDescription,
 						azimuth, direction, time, distance);
 
@@ -626,8 +591,7 @@ public void isTrackPointNotonRouteMap(
 			// String time = (String) trackPointsList.get(i).get("time");
 
 			Waypoint trackPoint = buildWayPoint(waypointco);
-			if (requestParameters.get("type").get(0).equals(
-					"gpx")) {
+			if (requestParameters.get("type").get(0).equals("gpx")) {
 				assertTrue(!GPHService.isWayPointOnTrack(trackPoint, GPHService
 						.getTracks().iterator().next()));
 			}
@@ -710,17 +674,6 @@ public void verifyWayPointsThroughService() {
 
 	}
 
-	public String nearestPointService(String pointA) {
-
-		return GPHJsonService.getNearestPoint(pointA);
-
-	}
-
-	public String nearestPointDistance() {
-
-		return GPHJsonService.getNearestPointDistance();
-
-	}
 
 	protected void addParameter(String key, String value) {
 		ArrayList<String> tempList = null;
@@ -736,9 +689,6 @@ protected void addParameter(String key, String value) {
 		requestParameters.put(key, tempList);
 	}
 
-	
-
-
 	protected void addRoutePointsToParameters(String paramName, DataTable dt) {
 		List<List<String>> data = dt.raw();
 
@@ -753,8 +703,7 @@ protected void addRoutePointsToParameters(String paramName, DataTable dt) {
 
 	public void getRouteFromServiceWithParameters(StringBuffer sb) {
 
-		if (requestParameters.get("type").get(0).equalsIgnoreCase("gpx"))
-				 {
+		if (requestParameters.get("type").get(0).equalsIgnoreCase("gpx")) {
 			GPHService.parseRoute(sb);
 		}
 
@@ -778,24 +727,21 @@ protected void getRouteFromServiceWithParameters() {
 					.getTestProperty("graphHopperWebUrl"));
 		}
 		sb.append("route?");
-		
-		if (!requestParameters.containsKey("type") )
-		{			
+
+		if (!requestParameters.containsKey("type")) {
 			ArrayList<String> responseType = new ArrayList<String>();
 			responseType.add(IntegrationTestProperties
 					.getTestProperty("routeType"));
-			requestParameters.put("type",responseType);
-		
-		}
-		else
-			if (requestParameters.get("type").get(0).isEmpty()){
-		
+			requestParameters.put("type", responseType);
+
+		} else if (requestParameters.get("type").get(0).isEmpty()) {
+
 			requestParameters.remove("type");
 			ArrayList<String> responseType = new ArrayList<String>();
 			responseType.add(IntegrationTestProperties
 					.getTestProperty("routeType"));
 			requestParameters.put("type", responseType);
-			}
+		}
 		ArrayList<String> pointscoding = new ArrayList<String>();
 		pointscoding.add("false");
 		requestParameters.put("points_encoded", pointscoding);
@@ -843,25 +789,22 @@ public void getRouteFromUI() {
 		String vehicle = requestParameters.get("vehicle").get(0);
 
 		ArrayList<String> points = requestParameters.get("point");
-		
-		if (!requestParameters.containsKey("type") )
-		{			
+
+		if (!requestParameters.containsKey("type")) {
 			ArrayList<String> responseType = new ArrayList<String>();
 			responseType.add(IntegrationTestProperties
 					.getTestProperty("routeType"));
-			requestParameters.put("type",responseType);
-		
-		}
-		else
-			if (requestParameters.get("type").get(0).isEmpty()){
-		
+			requestParameters.put("type", responseType);
+
+		} else if (requestParameters.get("type").get(0).isEmpty()) {
+
 			requestParameters.remove("type");
 			ArrayList<String> responseType = new ArrayList<String>();
 			responseType.add(IntegrationTestProperties
 					.getTestProperty("routeType"));
 			requestParameters.put("type", responseType);
-			}
-		
+		}
+
 		switch (vehicle) {
 		case "car":
 			clickElement(ROUTE_TYPE_CAR);
@@ -975,8 +918,6 @@ public void getRouteFromUI() {
 		clickElement(ROUTE_SEARCH);
 
 		waitFor(INSTRUCTIONS);
-		
-		
 
 	}
 
diff --git a/acceptancetesting/src/test/cucumber/routing.feature b/acceptancetesting/src/test/cucumber/routing.feature
index 7e4a762a6b..26383a69b1 100644
--- a/acceptancetesting/src/test/cucumber/routing.feature
+++ b/acceptancetesting/src/test/cucumber/routing.feature
@@ -908,3 +908,16 @@ Feature: Verify a route from A to B
     Examples: 
       | vehicleType | avoidances | routeType |
       | car         |            | fastest   |
+
+  @SampleScenario
+  Scenario Outline: Verify  Route using 2 intermediate waypoints (Perth to Edinburgh via Stirling and Glasgow )
+    Given I have route point as
+      | pointA              | pointB              | pointC             | pointD              |
+      | 51.746075,-1.263972 | 52.289962,-1.604752 | 52.202814,0.051429 | 51.491412,-0.610276 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have weighting as "<routeType>"
+    When I request for a route
+    Examples: 
+      | vehicleType | avoidances | routeType |
+      | car         |            | fastest   |
diff --git a/acceptancetesting/src/test/resources/test-ci-fullitn.properties b/acceptancetesting/src/test/resources/test-ci-fullitn.properties
index 5f206ae936..1e6ba12b14 100644
--- a/acceptancetesting/src/test/resources/test-ci-fullitn.properties
+++ b/acceptancetesting/src/test/resources/test-ci-fullitn.properties
@@ -2,7 +2,8 @@
 graphHopperWebUrlViaApigee=https://ordnance-eu-test.apigee.net/routing_api/
 graphHopperWebUrl=https://prod-vehicle-routing.elasticbeanstalk.com/
 
-webDriverHubUrl=http://ND28350.ordsvy.gov.uk:5555/wd/hub
+#webDriverHubUrl=http://ND28350.ordsvy.gov.uk:5555/wd/hub
+webDriverHubUrl=http://ND27983.ordsvy.gov.uk:5555/wd/hub
 #webDriverHubUrl=http://ND27983.ordsvy.gov.uk:5555/wd/hub
 
 #testON=Web,Service  // Default both
diff --git a/acceptancetesting/src/test/resources/test.properties b/acceptancetesting/src/test/resources/test.properties
index b027b00114..db52d219f6 100644
--- a/acceptancetesting/src/test/resources/test.properties
+++ b/acceptancetesting/src/test/resources/test.properties
@@ -8,8 +8,8 @@ graphHopperWebUrl=https://dpn-env.elasticbeanstalk.com/
 
 
 
-#webDriverHubUrl=http://ND28350.ordsvy.gov.uk:5555/wd/hub
-webDriverHubUrl=http://ND27983.ordsvy.gov.uk:5555/wd/hub
+webDriverHubUrl=http://ND28350.ordsvy.gov.uk:5555/wd/hub
+#webDriverHubUrl=http://ND27983.ordsvy.gov.uk:5555/wd/hub
 
 #testON=Web,Service  // Default both
 testON=Service
