diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
index 16c180beff..e4dfa72864 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
@@ -6,15 +6,22 @@
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.Map.Entry;
 
+import org.apache.commons.io.IOUtils;
+import org.apache.http.client.methods.CloseableHttpResponse;
+import org.apache.http.client.methods.HttpGet;
+import org.apache.http.impl.client.CloseableHttpClient;
 import org.junit.Assert;
 
+import uk.co.ordnancesurvey.gpx.graphhopper.HttpClientUtils;
 import uk.co.ordnancesurvey.gpx.graphhopper.IntegrationTestProperties;
 import cucumber.api.DataTable;
 import cucumber.api.Scenario;
 import cucumber.api.java.After;
 import cucumber.api.java.en.Given;
 import cucumber.api.java.en.Then;
+import cucumber.api.java.en.When;
 
 public class GraphHopperHooks {
 	GraphHopperUIUtil graphUiUtil;
@@ -23,6 +30,11 @@
 	String nearestPoint = "";
 	String Distance = "";
 
+	private String routeResponse;
+	private String routeResponsecode;
+	private String routeResponseMessage;
+	// private Map<String,String> requestParameters= new HashMap<>();
+	private Map<String, ArrayList<String>> requestParameters = new HashMap<String, ArrayList<String>>();
 
 	@Given("^I request a nearest point from  \"([^\"]*)\" from Nearest Point API$")
 	public void I_request_a_nearest_point_from_from_Nearest_Point_API(
@@ -127,51 +139,148 @@ public void closeBrowser(Scenario sc) {
 
 	}
 
+	@Given("^I request a route between points with \"([^\"]*)\" from RoutingAPI and avoid \"([^\"]*)\"$")
+	public void getRouteWithAvoidancesintermediatepoints(String routeOptions,
+			String avoidances, DataTable dt) throws InterruptedException {
 
+		List<List<String>> data = dt.raw();
 
+		String[] points = new String[data.get(1).size()];
+		points = data.get(1).toArray(points);
 
+		graphUiUtil = new GraphHopperUIUtil(
+				IntegrationTestProperties.getTestProperty("graphHopperWebUrl"));
 
-@Given("^I request a route between points with \"([^\"]*)\" from RoutingAPI and avoid \"([^\"]*)\"$")
-public void getRouteWithAvoidancesintermediatepoints(String routeOptions,String avoidances,DataTable dt)
-		throws InterruptedException {
-	
-	List<List<String>> data =dt.raw();
-   
-   
-String[] points= new String[data.get(1).size()];
-   points= data.get(1).toArray(points);
+		String testON = IntegrationTestProperties.getTestProperty("testON");
 
+		switch (testON.toUpperCase()) {
+		case "WEB":
 
-	
-	graphUiUtil = new GraphHopperUIUtil(
-			IntegrationTestProperties.getTestProperty("graphHopperWebUrl"));
+			graphUiUtil.getRouteFromUI(routeOptions, avoidances, points);
+			break;
+		case "SERVICE":
+			graphUiUtil.getRouteFromServiceWithAvoidance(routeOptions,
+					avoidances, points);
+			break;
+		default:
+
+			if (points[0].split(",").length == 2) {
+				graphUiUtil.getRouteFromServiceWithAvoidance(routeOptions,
+						avoidances, points);
+				graphUiUtil.getRouteFromUI(routeOptions, avoidances, points);
+			} else {
+				graphUiUtil.getRouteFromUI(routeOptions, avoidances, points);
+			}
 
-	String testON = IntegrationTestProperties.getTestProperty("testON");
+			break;
 
-	switch (testON.toUpperCase()) {
-	case "WEB":
+		}
+	}
 
-		graphUiUtil.getRouteFromUI(routeOptions, avoidances, points);
-		break;
-	case "SERVICE":
-		graphUiUtil.getRouteFromServiceWithAvoidance(routeOptions,
-				avoidances, points);
-		break;
-	default:
+	@Given("^I have ([^\"]*) as \"([^\"]*)\"$")
+	public void setParameters_for_RoutingRequest(String paramName,
+			String paramValue) {
 
-		if (points[0].split(",").length == 2) {
-			graphUiUtil.getRouteFromServiceWithAvoidance(routeOptions,
-					avoidances, points);
-			graphUiUtil.getRouteFromUI(routeOptions, avoidances, points);
+		addParameter(paramName, paramValue);
+	}
+
+	private void addParameter(String key, String value) {
+		ArrayList<String> tempList = null;
+		if (requestParameters.containsKey(key)) {
+			tempList = requestParameters.get(key);
+			if (tempList == null)
+				tempList = new ArrayList<String>();
+			tempList.add(value);
 		} else {
-			graphUiUtil.getRouteFromUI(routeOptions, avoidances, points);
+			tempList = new ArrayList<String>();
+			tempList.add(value);
 		}
+		requestParameters.put(key, tempList);
+	}
+
+	@Given("^I have route points as$")
+	public void setRoutingpoints(DataTable dt) {
+		List<List<String>> data = dt.raw();
 
-		break;
+		String[] points = new String[data.get(1).size()];
+		points = data.get(1).toArray(points);
+
+		for (int i = 0; i < points.length; i++) {
+			addParameter("point", points[i]);
+		}
 
 	}
 
+	@Then("^I should be able to verify the responseCode as \"([^\"]*)\"$")
+	public void I_should_be_able_to_verify_the_responseCode_as(
+			String responseCode) {
+		Assert.assertTrue(routeResponsecode
+				+ "response code did not match with " + responseCode,
+				routeResponsecode.equals(responseCode));
+
+	}
+
+	@Then("^I should be able to verify the response message as \"([^\"]*)\"$")
+	public void I_should_be_able_to_verify_the_response_message_as(
+			String responseMessage) {
+		Assert.assertTrue(routeResponseMessage
+				+ "response code did not match with " + responseMessage,
+				routeResponseMessage.equals(responseMessage));
+	}
+
+	@When("^I request for a route$")
+	public void I_request_for_route() {
+
+		graphUiUtil = new GraphHopperUIUtil(
+				IntegrationTestProperties.getTestProperty("graphHopperWebUrl"));
 
+		StringBuffer sb = new StringBuffer();
+
+		if (IntegrationTestProperties.getTestPropertyBool("viaApigee")) {
+			sb.append(IntegrationTestProperties
+					.getTestProperty("graphHopperWebUrlViaApigee"));
+
+		} else {
+			sb.append(IntegrationTestProperties
+					.getTestProperty("graphHopperWebUrl"));
+		}
+		sb.append("route?");
+		for (Entry<String, ArrayList<String>> entry : requestParameters
+				.entrySet()) {
+			String key = entry.getKey();
+			ArrayList<String> value = entry.getValue();
+			for (String string : value) {
+				sb.append("&" + key + "=" + string);
+			}
+
+		}
+
+		if (IntegrationTestProperties.getTestProperty("testON")
+				.equalsIgnoreCase("Service")) {
+
+			try {
+
+				CloseableHttpClient httpClient = HttpClientUtils.createClient();
+				HttpGet httpget = new HttpGet(sb.toString());
+
+				CloseableHttpResponse clientResponse = httpClient
+						.execute(httpget);
+
+				routeResponse = IOUtils.toString(clientResponse.getEntity()
+						.getContent(), "UTF-8");
+
+				routeResponsecode = String.valueOf(clientResponse
+						.getStatusLine().getStatusCode());
+				routeResponseMessage = clientResponse.getStatusLine()
+						.getReasonPhrase();
+
+			} catch (IOException e) {
+
+				System.out.println(e.getMessage());
+			}
+
+		}
+
+	}
 
-}
 }
\ No newline at end of file
diff --git a/acceptancetesting/src/test/cucumber/Routing-Exeter.feature b/acceptancetesting/src/test/cucumber/Routing-Exeter.feature
index 02c5c3e397..9b478c8923 100644
--- a/acceptancetesting/src/test/cucumber/Routing-Exeter.feature
+++ b/acceptancetesting/src/test/cucumber/Routing-Exeter.feature
@@ -644,3 +644,23 @@ Feature: Verify a route from A to B
     Examples: 
       | routeOptions | avoidances |
       | car          |            |
+
+  @yogi
+  Scenario Outline: 
+    Given I have route points as
+    | pointA              | pointB              | 
+    | 50.729961,-3.524853 | 50.723364,-3.523895 | 
+    And I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the responseCode as "<responseCode>"
+    Then I should be able to verify the response message as "<errorMessage>"
+    
+    
+
+    Examples: 
+      | vehicleType | avoidances | routeType |responseFormat|responseCode|errorMessage|
+      | cars         |            | fastest   |json|200|OK|
+
