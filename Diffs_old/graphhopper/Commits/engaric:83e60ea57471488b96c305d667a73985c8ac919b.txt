diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
index c465ebb7a0..e79f4e5ff6 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
@@ -28,6 +28,8 @@
 
 	DataTable routePointsTable;
 
+	private String serviceAppendString;
+
 	
 	@Before({ "~@WebOnly", "~@SampleScenario" })
 	public void init() {
@@ -245,6 +247,17 @@ public void I_request_for_route() {
 		}
 
 	}
+	
+
+	@And("^I prefix the string \"([^\"]*)\" and append the string \"([^\"]*)\" to service URL$")
+	public void I_override_the_service_URL_to_invalid_URL(String str1,String str2)
+	{
+		graphUiUtil.servicePrefixString=str1;
+		graphUiUtil.serviceAppendString=str2;
+				
+	}
+	
+	
 
 	@And("^I request for HTTP \"([^\"]*)\" method$")
 	public void I_request_for_http_mehtod(String httpMethod) {
diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
index 88e8c21ac2..64938e8773 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
@@ -97,6 +97,8 @@
 	private int actualResponseCode;
 	private String actualResponseMsg;
 	StringBuffer sb = new StringBuffer();
+	public String serviceAppendString="";
+	public String servicePrefixString="";
 
 	private static final Logger LOG = LoggerFactory
 			.getLogger(GraphHopperUIUtil.class);
@@ -793,6 +795,8 @@ CloseableHttpResponse doSendAndGetResponse(String serviceUrl)
 		CloseableHttpClient httpClient = HttpClientUtils.createClient();
 
 		HttpUriRequest httpRequest = null;
+		
+		try{
 
 		switch (httpMethod) {
 		case "PUT":
@@ -826,7 +830,11 @@ CloseableHttpResponse doSendAndGetResponse(String serviceUrl)
 			httpRequest = new HttpGet(serviceUrl);
 			break;
 		}
-
+		}
+		catch( Exception e)
+		{
+			LOG.info(e.getMessage());
+		}
 		// HttpGet httpget = new HttpGet(serviceUrl);
 		addCustomHeaders(httpRequest);
 
@@ -843,7 +851,7 @@ protected void getRouteFromServiceWithParameters() {
 			sb.append(IntegrationTestProperties
 					.getTestProperty("graphHopperWebUrl"));
 		}
-		sb.append("route?");
+		sb.append(servicePrefixString+"route"+serviceAppendString+"?");
 
 		if (!requestParameters.containsKey("type")) {
 			ArrayList<String> responseType = new ArrayList<String>();
@@ -1015,6 +1023,7 @@ public void getRouteFromUI() {
 				else {
 					waypoint = new ComponentID(i + "_searchBox");
 					typeIntoField(waypoint, point);
+					waitFor(dropDown);
 					clickElement(dropDown);
 				}
 			}
diff --git a/acceptancetesting/src/test/cucumber/Routing-Errors.feature b/acceptancetesting/src/test/cucumber/Routing-Errors.feature
index 4ff489b393..ca964027ee 100644
--- a/acceptancetesting/src/test/cucumber/Routing-Errors.feature
+++ b/acceptancetesting/src/test/cucumber/Routing-Errors.feature
@@ -22,7 +22,7 @@ Feature: Verify Error Messages from a routing service
     Then I should be able to verify the http response message as "OK"
     And I should be able to verify the http statuscode as "200"
     And I receive a valid routing response
-  
+
     Examples: 
       | point | vehicle | weighting | locale | debug | points_encoded | calc_points | instructions | algorithm | type |
       | point | vehicle | weighting | locale | debug | points_encoded | calc_points | instructions | algorithm | type |
@@ -316,7 +316,7 @@ Feature: Verify Error Messages from a routing service
       | car         |            | fastest   | OPTIONS    | json           | OK                 | 200        |
 
   # Nearest Point : Invalid Parameter Value "point"
-  @ErrorMessages @Current
+  @ErrorMessages
   Scenario Outline: Verify  nearest point of point using NearestPoint API
     Given I have type as "<responseFormat>"
     And My routing points for nearestPoint API as "<pointA>"
@@ -344,7 +344,7 @@ Feature: Verify Error Messages from a routing service
     And I have instructions as "true"
     And I have algorithm as "astar"
     And I have type as "json"
-    When I request for a route
+    When I request for a route with invalid URI
     Then I should be able to verify the http response message as "OK"
     Then I should be able to verify the http statuscode as "200"
 
@@ -520,3 +520,28 @@ Feature: Verify Error Messages from a routing service
       | type |
       | gpx  |
       | json |
+
+  @ErrorMessages
+  Scenario Outline: with invalid uri and verify resource not available
+    Given I have route point as
+      | pointA              | pointB              |
+      | 50.729961,-3.524853 | 50.723364,-3.523895 |
+    And I have vehicle as "car"
+    And I have weighting as "fastest"
+    And I have locale as "en_US"
+    And I have debug as "true"
+    And I have points_encoded as "true"
+    And I have points_calc as "true"
+    And I have instructions as "true"
+    And I have algorithm as "astar"
+    And I have type as "json"
+    And I prefix the string "<prefixString>" and append the string "<appendString" to service URL
+    When I request for a route
+    Then I should be able to verify the http response message as "Not Found"
+    Then I should be able to verify the http statuscode as "404"
+
+    Examples: 
+      | prefixString | appendString |
+      | test/        |              |
+      |              | 1234/        |
+      |              | /1234/       |
diff --git a/acceptancetesting/src/test/cucumber/routing.feature b/acceptancetesting/src/test/cucumber/routing.feature
index ef89e72d6e..e3a3da0e79 100644
--- a/acceptancetesting/src/test/cucumber/routing.feature
+++ b/acceptancetesting/src/test/cucumber/routing.feature
@@ -532,6 +532,7 @@ Feature: Verify a route from A to B
       | vehicleType | avoidances | routeType |
       | car         |            | fastest   |
 
+  @Routing
   Scenario Outline: Verify  Route using one intermediate waypoint (Hounslow to Reading via Staines )
     Given I have route point as
       | pointA                                 | pointB              | pointC                                 |
@@ -991,9 +992,9 @@ Feature: Verify a route from A to B
     And I have weighting as "<routeType>"
     When I request for a route
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco          | waypointdesc  | azimuth | direction | time   | distance | avoidance            |
-      | 4             | 50.946653,-1.476133 | At roundabout | 118.0   | SE        | 143795 | 3994.5   | take exit 1 onto M27 |
+      | wayPointIndex | waypointco          | waypointdesc                     | azimuth | direction | time  | distance | avoidance |
+      | 2             | 50.956976,-1.485761 | Turn right onto COLDHARBOUR LANE | 89.0    | E         | 69870 | 970.4    |           |
 
     Examples: 
       | vehicleType | avoidances | routeType |
-      | car         |            | shortest  |
+      | car         |            | fastest   |
