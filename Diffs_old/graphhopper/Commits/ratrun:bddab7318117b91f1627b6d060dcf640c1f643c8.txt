diff --git a/reader-gtfs/pom.xml b/reader-gtfs/pom.xml
index 90fa652e58..28a91fd4c0 100644
--- a/reader-gtfs/pom.xml
+++ b/reader-gtfs/pom.xml
@@ -34,9 +34,9 @@
             <version>${project.parent.version}</version>
         </dependency>
         <dependency>
-            <groupId>com.github.graphhopper</groupId>
+            <groupId>com.conveyal</groupId>
             <artifactId>gtfs-lib</artifactId>
-            <version>f955eec</version>
+            <version>2.1.0</version>
             <exclusions>
                 <exclusion> 
                     <groupId>org.slf4j</groupId>
diff --git a/reader-gtfs/src/main/java/com/graphhopper/gtfs/fare/FixedFareAttributeLoader.java b/reader-gtfs/src/main/java/com/graphhopper/gtfs/fare/FixedFareAttributeLoader.java
new file mode 100644
index 0000000000..0d823aa2b3
--- /dev/null
+++ b/reader-gtfs/src/main/java/com/graphhopper/gtfs/fare/FixedFareAttributeLoader.java
@@ -0,0 +1,48 @@
+/*
+ *  Licensed to GraphHopper GmbH under one or more contributor
+ *  license agreements. See the NOTICE file distributed with this work for
+ *  additional information regarding copyright ownership.
+ *
+ *  GraphHopper GmbH licenses this file to you under the Apache License,
+ *  Version 2.0 (the "License"); you may not use this file except in
+ *  compliance with the License. You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+
+package com.graphhopper.gtfs.fare;
+
+import com.conveyal.gtfs.GTFSFeed;
+import com.conveyal.gtfs.model.Fare;
+import com.conveyal.gtfs.model.FareAttribute;
+
+import java.io.IOException;
+import java.util.Map;
+
+/**
+ * Workaround for an issue in gtfs-lib where a field (see below), if missing, is assumed set to be 0 while
+ * the (as I understand the spec) more appropriate interpretation would be "practically infinite".
+ *
+ */
+public class FixedFareAttributeLoader extends FareAttribute.Loader {
+    private final Map<String, Fare> fares;
+
+    public FixedFareAttributeLoader(GTFSFeed feed, Map<String, Fare> fares) {
+        super(feed, fares);
+        this.fares = fares;
+    }
+
+    @Override
+    public void loadOneRow() throws IOException {
+        super.loadOneRow();
+        String fareId = getStringField("fare_id", true);
+        final Fare fare = fares.get(fareId);
+        fare.fare_attribute.transfers = getIntField("transfers", false, 0, Integer.MAX_VALUE, Integer.MAX_VALUE);
+    }
+}
diff --git a/reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/GtfsStorage.java b/reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/GtfsStorage.java
index f17c40df15..bcf528da11 100644
--- a/reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/GtfsStorage.java
+++ b/reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/GtfsStorage.java
@@ -20,7 +20,9 @@
 
 import com.conveyal.gtfs.GTFSFeed;
 import com.conveyal.gtfs.model.Fare;
+import com.conveyal.gtfs.model.FareRule;
 import com.google.transit.realtime.GtfsRealtime;
+import com.graphhopper.gtfs.fare.FixedFareAttributeLoader;
 import com.graphhopper.storage.Directory;
 import com.graphhopper.storage.Graph;
 import com.graphhopper.storage.GraphExtension;
@@ -193,6 +195,7 @@ void loadGtfsFromFile(String id, ZipFile zip) {
 		try {
 			GTFSFeed feed = new GTFSFeed(dir.getLocation() + "/" + id);
 			feed.loadFromFile(zip);
+			fixFares(feed, zip);
 			this.gtfsFeeds.put(id, feed);
 		} catch (Exception e) {
 			throw new RuntimeException(e);
@@ -200,6 +203,18 @@ void loadGtfsFromFile(String id, ZipFile zip) {
 		this.gtfsFeedIds.add(id);
 	}
 
+	private void fixFares(GTFSFeed feed, ZipFile zip) {
+		feed.fares.clear();
+		Map<String, Fare> fares = new HashMap<>();
+		try {
+			new FixedFareAttributeLoader(feed, fares).loadTable(zip);
+			new FareRule.Loader(feed, fares).loadTable(zip);
+		} catch (IOException e) {
+			throw new RuntimeException(e);
+		}
+		feed.fares.putAll(fares);
+	}
+
 	@Override
 	public void flush() {
 	}
diff --git a/reader-gtfs/src/test/java/com/graphhopper/gtfs/fare/FareTest.java b/reader-gtfs/src/test/java/com/graphhopper/gtfs/fare/FareTest.java
index 499e4ae3fd..5df3630511 100644
--- a/reader-gtfs/src/test/java/com/graphhopper/gtfs/fare/FareTest.java
+++ b/reader-gtfs/src/test/java/com/graphhopper/gtfs/fare/FareTest.java
@@ -142,7 +142,7 @@ public void buyMoreThanOneTicketIfTripIsLongerThanAllowedOnOne(Map<String, Fare>
     private static Map<String, Fare> parseFares(String fareAttributes, String fareRules) {
         GTFSFeed feed = new GTFSFeed();
         HashMap<String, Fare> fares = new HashMap<>();
-        new FareAttribute.Loader(feed, fares) {
+        new FixedFareAttributeLoader(feed, fares) {
             void load(String input){
                 reader = new CsvReader(new StringReader(input));
                 reader.setHeaders(new String[]{"fare_id","price","currency_type","payment_method","transfers","transfer_duration"});
