diff --git a/android/app/pom.xml b/android/app/pom.xml
index 827c9652e2..148fa33573 100644
--- a/android/app/pom.xml
+++ b/android/app/pom.xml
@@ -16,7 +16,7 @@
         <relativePath>../..</relativePath>
         <groupId>com.graphhopper</groupId>
         <artifactId>graphhopper-parent</artifactId>    	
-        <version>0.12-SNAPSHOT</version>
+        <version>0.13-SNAPSHOT</version>
     </parent>
     <properties>
         <vtm.version>0.10.0</vtm.version>
diff --git a/config-example.yml b/config-example.yml
index 8a41d743b6..a627c7a6f0 100644
--- a/config-example.yml
+++ b/config-example.yml
@@ -160,7 +160,6 @@ logging:
     archivedLogFilenamePattern: ./logs/graphhopper-%d.log.gz
     archivedFileCount: 30
     neverBlock: true
-    immediateFlush: false
   - type: console
     timeZone: UTC
     logFormat: "%d{YYYY-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{36} - %msg%n"
diff --git a/core/files/changelog.txt b/core/files/changelog.txt
index dbf2d7449c..659e0cdfce 100644
--- a/core/files/changelog.txt
+++ b/core/files/changelog.txt
@@ -1,4 +1,5 @@
 0.12
+    renamed VirtualEdgeIteratorState.getOriginalEdgeKey to more precise getOriginalEdgeKey #1549
     access refactoring #1436 that moves AccessValue into SpatialRule.Access
     refactoring of EncodingManager to use builder pattern. Migration should be simple. Replace new EncodingManager with EncodingManager.create
 	The methods GraphHopper.setEnableInstructions/setPreferredLanguage is now in EncodingManager.Builder
diff --git a/core/src/main/java/com/graphhopper/routing/AlternativeRoute.java b/core/src/main/java/com/graphhopper/routing/AlternativeRoute.java
index 38c8097628..8b342cd9ec 100644
--- a/core/src/main/java/com/graphhopper/routing/AlternativeRoute.java
+++ b/core/src/main/java/com/graphhopper/routing/AlternativeRoute.java
@@ -17,12 +17,10 @@
  */
 package com.graphhopper.routing;
 
-import com.carrotsearch.hppc.IntObjectMap;
 import com.carrotsearch.hppc.IntSet;
 import com.carrotsearch.hppc.predicates.IntObjectPredicate;
 import com.graphhopper.coll.GHIntHashSet;
 import com.graphhopper.coll.GHIntObjectHashMap;
-import com.graphhopper.routing.AStar.AStarEntry;
 import com.graphhopper.routing.util.TraversalMode;
 import com.graphhopper.routing.weighting.WeightApproximator;
 import com.graphhopper.routing.weighting.Weighting;
@@ -302,8 +300,8 @@ public Path searchBest(int from, int to) {
                                                       final double maxShareFactor, final double shareInfluence,
                                                       final double minPlateauFactor, final double plateauInfluence) {
             final double maxWeight = maxWeightFactor * bestPath.getWeight();
-            final GHIntObjectHashMap<IntSet> traversalIDMap = new GHIntObjectHashMap<>();
-            final AtomicInteger startTID = addToMap(traversalIDMap, bestPath);
+            final GHIntObjectHashMap<IntSet> traversalIdMap = new GHIntObjectHashMap<>();
+            final AtomicInteger startTID = addToMap(traversalIdMap, bestPath);
 
             // find all 'good' alternatives from forward-SPT matching the backward-SPT and optimize by
             // small total weight (1), small share and big plateau (3a+b) and do these expensive calculations
@@ -467,7 +465,7 @@ SPTEntry getFirstShareEE(SPTEntry startEE, boolean reverse) {
                  */
                 boolean isAlreadyExisting(final int tid) {
                     final AtomicBoolean exists = new AtomicBoolean(false);
-                    traversalIDMap.forEach(new IntObjectPredicate<IntSet>() {
+                    traversalIdMap.forEach(new IntObjectPredicate<IntSet>() {
                         @Override
                         public boolean apply(int key, IntSet set) {
                             if (set.contains(tid)) {
diff --git a/core/src/main/java/com/graphhopper/routing/DijkstraBidirectionCH.java b/core/src/main/java/com/graphhopper/routing/DijkstraBidirectionCH.java
index b28b399692..09391def2d 100644
--- a/core/src/main/java/com/graphhopper/routing/DijkstraBidirectionCH.java
+++ b/core/src/main/java/com/graphhopper/routing/DijkstraBidirectionCH.java
@@ -18,7 +18,6 @@
 package com.graphhopper.routing;
 
 import com.carrotsearch.hppc.IntObjectMap;
-import com.graphhopper.routing.util.TraversalMode;
 import com.graphhopper.routing.weighting.Weighting;
 import com.graphhopper.storage.Graph;
 import com.graphhopper.storage.SPTEntry;
diff --git a/core/src/main/java/com/graphhopper/routing/QueryGraph.java b/core/src/main/java/com/graphhopper/routing/QueryGraph.java
index 7960219fb5..c5639e5b9d 100644
--- a/core/src/main/java/com/graphhopper/routing/QueryGraph.java
+++ b/core/src/main/java/com/graphhopper/routing/QueryGraph.java
@@ -298,8 +298,8 @@ public int compare(QueryResult o1, QueryResult o2) {
 
                 GHPoint3D prevPoint = fullPL.toGHPoint(0);
                 int adjNode = closestEdge.getAdjNode();
-                int origTraversalKey = GHUtility.createEdgeKey(baseNode, adjNode, closestEdge.getEdge(), false);
-                int origRevTraversalKey = GHUtility.createEdgeKey(baseNode, adjNode, closestEdge.getEdge(), true);
+                int origEdgeKey = GHUtility.createEdgeKey(baseNode, adjNode, closestEdge.getEdge(), false);
+                int origRevEdgeKey = GHUtility.createEdgeKey(baseNode, adjNode, closestEdge.getEdge(), true);
                 int prevWayIndex = 1;
                 int prevNodeId = baseNode;
                 int virtNodeId = virtualNodes.getSize() + mainNodes;
@@ -323,7 +323,7 @@ public int compare(QueryResult o1, QueryResult o2) {
 
                     queryResults.add(res);
                     boolean isPillar = res.getSnappedPosition() == QueryResult.Position.PILLAR;
-                    createEdges(origTraversalKey, origRevTraversalKey,
+                    createEdges(origEdgeKey, origRevEdgeKey,
                             prevPoint, prevWayIndex, isPillar,
                             res.getSnappedPoint(), res.getWayIndex(),
                             fullPL, closestEdge, prevNodeId, virtNodeId);
@@ -346,7 +346,7 @@ public int compare(QueryResult o1, QueryResult o2) {
 
                 // two edges between last result and adjacent node are still missing if not all points skipped
                 if (addedEdges)
-                    createEdges(origTraversalKey, origRevTraversalKey,
+                    createEdges(origEdgeKey, origRevEdgeKey,
                             prevPoint, prevWayIndex, false,
                             fullPL.toGHPoint(fullPL.getSize() - 1), fullPL.getSize() - 2,
                             fullPL, closestEdge, virtNodeId - 1, adjNode);
@@ -390,7 +390,7 @@ public QueryGraph setUseEdgeExplorerCache(boolean useEECache) {
         return this;
     }
 
-    private void createEdges(int origTraversalKey, int origRevTraversalKey,
+    private void createEdges(int origEdgeKey, int origRevEdgeKey,
                              GHPoint3D prevSnapped, int prevWayIndex, boolean isPillar, GHPoint3D currSnapped, int wayIndex,
                              PointList fullPL, EdgeIteratorState closestEdge,
                              int prevNodeId, int nodeId) {
@@ -412,9 +412,9 @@ private void createEdges(int origTraversalKey, int origRevTraversalKey,
 
         boolean reverse = closestEdge.get(EdgeIteratorState.REVERSE_STATE);
         // edges between base and snapped point
-        VirtualEdgeIteratorState baseEdge = new VirtualEdgeIteratorState(origTraversalKey,
+        VirtualEdgeIteratorState baseEdge = new VirtualEdgeIteratorState(origEdgeKey,
                 virtEdgeId, prevNodeId, nodeId, baseDistance, closestEdge.getFlags(), closestEdge.getName(), basePoints, reverse);
-        VirtualEdgeIteratorState baseReverseEdge = new VirtualEdgeIteratorState(origRevTraversalKey,
+        VirtualEdgeIteratorState baseReverseEdge = new VirtualEdgeIteratorState(origRevEdgeKey,
                 virtEdgeId, nodeId, prevNodeId, baseDistance, IntsRef.deepCopyOf(closestEdge.getFlags()), closestEdge.getName(), baseReversePoints, !reverse);
 
         baseEdge.setReverseEdge(baseReverseEdge);
diff --git a/core/src/main/java/com/graphhopper/routing/VirtualEdgeIterator.java b/core/src/main/java/com/graphhopper/routing/VirtualEdgeIterator.java
index 7c0eb1bcd7..c873f90e58 100644
--- a/core/src/main/java/com/graphhopper/routing/VirtualEdgeIterator.java
+++ b/core/src/main/java/com/graphhopper/routing/VirtualEdgeIterator.java
@@ -17,7 +17,10 @@
  */
 package com.graphhopper.routing;
 
-import com.graphhopper.routing.profiles.*;
+import com.graphhopper.routing.profiles.BooleanEncodedValue;
+import com.graphhopper.routing.profiles.DecimalEncodedValue;
+import com.graphhopper.routing.profiles.EnumEncodedValue;
+import com.graphhopper.routing.profiles.IntEncodedValue;
 import com.graphhopper.storage.IntsRef;
 import com.graphhopper.util.CHEdgeIteratorState;
 import com.graphhopper.util.EdgeIterator;
@@ -177,24 +180,24 @@ public double getReverse(DecimalEncodedValue property) {
     }
 
     @Override
-    public EdgeIteratorState set(ObjectEncodedValue property, IndexBased value) {
+    public <T extends Enum> EdgeIteratorState set(EnumEncodedValue<T> property, T value) {
         edges.get(current).set(property, value);
         return this;
     }
 
     @Override
-    public IndexBased get(ObjectEncodedValue property) {
+    public <T extends Enum> T get(EnumEncodedValue<T> property) {
         return edges.get(current).get(property);
     }
 
     @Override
-    public EdgeIteratorState setReverse(ObjectEncodedValue property, IndexBased value) {
+    public <T extends Enum> EdgeIteratorState setReverse(EnumEncodedValue<T> property, T value) {
         edges.get(current).setReverse(property, value);
         return this;
     }
 
     @Override
-    public IndexBased getReverse(ObjectEncodedValue property) {
+    public <T extends Enum> T getReverse(EnumEncodedValue<T> property) {
         return edges.get(current).getReverse(property);
     }
 
diff --git a/core/src/main/java/com/graphhopper/routing/VirtualEdgeIteratorState.java b/core/src/main/java/com/graphhopper/routing/VirtualEdgeIteratorState.java
index 439fa2c42d..318c277502 100644
--- a/core/src/main/java/com/graphhopper/routing/VirtualEdgeIteratorState.java
+++ b/core/src/main/java/com/graphhopper/routing/VirtualEdgeIteratorState.java
@@ -17,7 +17,10 @@
  */
 package com.graphhopper.routing;
 
-import com.graphhopper.routing.profiles.*;
+import com.graphhopper.routing.profiles.BooleanEncodedValue;
+import com.graphhopper.routing.profiles.DecimalEncodedValue;
+import com.graphhopper.routing.profiles.EnumEncodedValue;
+import com.graphhopper.routing.profiles.IntEncodedValue;
 import com.graphhopper.storage.IntsRef;
 import com.graphhopper.util.CHEdgeIteratorState;
 import com.graphhopper.util.EdgeIteratorState;
@@ -35,7 +38,7 @@
     private final int edgeId;
     private final int baseNode;
     private final int adjNode;
-    private final int originalTraversalKey;
+    private final int originalEdgeKey;
     private double distance;
     private IntsRef edgeFlags;
     private String name;
@@ -44,9 +47,9 @@
     private EdgeIteratorState reverseEdge;
     private final boolean reverse;
 
-    public VirtualEdgeIteratorState(int originalTraversalKey, int edgeId, int baseNode, int adjNode, double distance,
+    public VirtualEdgeIteratorState(int originalEdgeKey, int edgeId, int baseNode, int adjNode, double distance,
                                     IntsRef edgeFlags, String name, PointList pointList, boolean reverse) {
-        this.originalTraversalKey = originalTraversalKey;
+        this.originalEdgeKey = originalEdgeKey;
         this.edgeId = edgeId;
         this.baseNode = baseNode;
         this.adjNode = adjNode;
@@ -58,13 +61,13 @@ public VirtualEdgeIteratorState(int originalTraversalKey, int edgeId, int baseNo
     }
 
     /**
-     * This method returns the original edge via its traversal key. I.e. also the direction is
+     * This method returns the original edge via its key. I.e. also the direction is
      * already correctly encoded.
      *
      * @see GHUtility#createEdgeKey(int, int, int, boolean)
      */
-    public int getOriginalTraversalKey() {
-        return originalTraversalKey;
+    public int getOriginalEdgeKey() {
+        return originalEdgeKey;
     }
 
     @Override
@@ -200,24 +203,24 @@ public EdgeIteratorState setReverse(DecimalEncodedValue property, double value)
     }
 
     @Override
-    public IndexBased get(ObjectEncodedValue property) {
-        return property.getObject(reverse, edgeFlags);
+    public <T extends Enum> T get(EnumEncodedValue<T> property) {
+        return property.getEnum(reverse, edgeFlags);
     }
 
     @Override
-    public EdgeIteratorState set(ObjectEncodedValue property, IndexBased value) {
-        property.setObject(reverse, edgeFlags, value);
+    public <T extends Enum> EdgeIteratorState set(EnumEncodedValue<T> property, T value) {
+        property.setEnum(reverse, edgeFlags, value);
         return this;
     }
 
     @Override
-    public IndexBased getReverse(ObjectEncodedValue property) {
-        return property.getObject(!reverse, edgeFlags);
+    public <T extends Enum> T getReverse(EnumEncodedValue<T> property) {
+        return property.getEnum(!reverse, edgeFlags);
     }
 
     @Override
-    public EdgeIteratorState setReverse(ObjectEncodedValue property, IndexBased value) {
-        property.setObject(!reverse, edgeFlags, value);
+    public <T extends Enum> EdgeIteratorState setReverse(EnumEncodedValue<T> property, T value) {
+        property.setEnum(!reverse, edgeFlags, value);
         return this;
     }
 
diff --git a/core/src/main/java/com/graphhopper/routing/profiles/DecimalEncodedValue.java b/core/src/main/java/com/graphhopper/routing/profiles/DecimalEncodedValue.java
index a90d50b2c7..f02e777295 100644
--- a/core/src/main/java/com/graphhopper/routing/profiles/DecimalEncodedValue.java
+++ b/core/src/main/java/com/graphhopper/routing/profiles/DecimalEncodedValue.java
@@ -2,6 +2,16 @@
 
 import com.graphhopper.storage.IntsRef;
 
+/**
+ * This class defines how and where to store an unsigned decimal value. It is important to note that:
+ * 1. the range of the number is highly limited (unlike the Java 32bit float or 64bit double values)
+ * so that the storable part of it fits into the specified number of bits
+ * (maximum 32 at the moment for all implementations) and
+ * 2. the default value is always 0.
+ *
+ * @see FactorizedDecimalEncodedValue
+ * @see MappedDecimalEncodedValue
+ */
 public interface DecimalEncodedValue extends EncodedValue {
 
     /**
diff --git a/core/src/main/java/com/graphhopper/routing/profiles/EncodedValueLookup.java b/core/src/main/java/com/graphhopper/routing/profiles/EncodedValueLookup.java
index 15ebf2d2d0..5588bea288 100644
--- a/core/src/main/java/com/graphhopper/routing/profiles/EncodedValueLookup.java
+++ b/core/src/main/java/com/graphhopper/routing/profiles/EncodedValueLookup.java
@@ -27,7 +27,7 @@
 
     DecimalEncodedValue getDecimalEncodedValue(String key);
 
-    ObjectEncodedValue getObjectEncodedValue(String key);
+    <T extends Enum> EnumEncodedValue<T> getEnumEncodedValue(String key, Class<T> enumType);
 
     boolean hasEncoder(String key);
 }
diff --git a/core/src/main/java/com/graphhopper/routing/profiles/MappedObjectEncodedValue.java b/core/src/main/java/com/graphhopper/routing/profiles/EnumEncodedValue.java
similarity index 62%
rename from core/src/main/java/com/graphhopper/routing/profiles/MappedObjectEncodedValue.java
rename to core/src/main/java/com/graphhopper/routing/profiles/EnumEncodedValue.java
index 9c07e7b0e4..51d1c8e598 100644
--- a/core/src/main/java/com/graphhopper/routing/profiles/MappedObjectEncodedValue.java
+++ b/core/src/main/java/com/graphhopper/routing/profiles/EnumEncodedValue.java
@@ -19,29 +19,24 @@
 
 import com.graphhopper.storage.IntsRef;
 
-import java.util.List;
-
 /**
- * This class implements an ObjectEncodedValue and holds an array of IndexBased objects. It stores just the indices
+ * This class implements an ObjectEncodedValue via a list of enums. I.e. it stores just the indices
  * of the used objects as an integer value.
  */
-public final class MappedObjectEncodedValue extends SimpleIntEncodedValue implements ObjectEncodedValue {
-    private final IndexBased[] arr;
-
-    public MappedObjectEncodedValue(String name, List<? extends IndexBased> values) {
-        super(name, 32 - Integer.numberOfLeadingZeros(values.size()));
+public final class EnumEncodedValue<E extends Enum> extends SimpleIntEncodedValue {
+    private final E[] arr;
 
-        arr = values.toArray(new IndexBased[]{});
+    public EnumEncodedValue(String name, Class<E> enumType) {
+        super(name, 32 - Integer.numberOfLeadingZeros(enumType.getEnumConstants().length));
+        arr = enumType.getEnumConstants();
     }
 
-    @Override
-    public final void setObject(boolean reverse, IntsRef ref, IndexBased value) {
+    public final void setEnum(boolean reverse, IntsRef ref, E value) {
         int intValue = value.ordinal();
         super.setInt(reverse, ref, intValue);
     }
 
-    @Override
-    public final IndexBased getObject(boolean reverse, IntsRef ref) {
+    public final E getEnum(boolean reverse, IntsRef ref) {
         int value = super.getInt(reverse, ref);
         return arr[value];
     }
diff --git a/core/src/main/java/com/graphhopper/routing/profiles/IndexBased.java b/core/src/main/java/com/graphhopper/routing/profiles/IndexBased.java
deleted file mode 100644
index a2203640cf..0000000000
--- a/core/src/main/java/com/graphhopper/routing/profiles/IndexBased.java
+++ /dev/null
@@ -1,9 +0,0 @@
-package com.graphhopper.routing.profiles;
-
-/**
- * This interface ensures that at least one method is defined: the index the object should get in an array, to store
- * objects with only few keys in a compact form. We can't use enums as they are not extendable nor customizable.
- */
-public interface IndexBased {
-    int ordinal();
-}
diff --git a/core/src/main/java/com/graphhopper/routing/profiles/IntEncodedValue.java b/core/src/main/java/com/graphhopper/routing/profiles/IntEncodedValue.java
index 230808a7a9..f02cf0c8c7 100644
--- a/core/src/main/java/com/graphhopper/routing/profiles/IntEncodedValue.java
+++ b/core/src/main/java/com/graphhopper/routing/profiles/IntEncodedValue.java
@@ -5,7 +5,9 @@
 /**
  * This class defines how and where to store an unsigned integer. It is important to note that: 1. the range of the
  * integer is highly limited (unlike the Java 32bit integer values) so that the storable part of it fits into the
- * specified number of bits (using the internal shift value) and 2. the default value is always 0.
+ * specified number of bits (maximum 32) and 2. the default value is always 0.
+ *
+ * @see SimpleIntEncodedValue
  */
 public interface IntEncodedValue extends EncodedValue {
 
diff --git a/core/src/main/java/com/graphhopper/routing/profiles/ObjectEncodedValue.java b/core/src/main/java/com/graphhopper/routing/profiles/ObjectEncodedValue.java
deleted file mode 100644
index ef255f8a6d..0000000000
--- a/core/src/main/java/com/graphhopper/routing/profiles/ObjectEncodedValue.java
+++ /dev/null
@@ -1,15 +0,0 @@
-package com.graphhopper.routing.profiles;
-
-import com.graphhopper.storage.IntsRef;
-
-/**
- * This interface provides access to an EncodedValue of an index based object
- *
- * @see IndexBased
- */
-public interface ObjectEncodedValue extends EncodedValue {
-
-    void setObject(boolean reverse, IntsRef ref, IndexBased value);
-
-    IndexBased getObject(boolean reverse, IntsRef ref);
-}
diff --git a/core/src/main/java/com/graphhopper/routing/profiles/RoadClass.java b/core/src/main/java/com/graphhopper/routing/profiles/RoadClass.java
index bba058d605..64536902b6 100644
--- a/core/src/main/java/com/graphhopper/routing/profiles/RoadClass.java
+++ b/core/src/main/java/com/graphhopper/routing/profiles/RoadClass.java
@@ -1,55 +1,21 @@
 package com.graphhopper.routing.profiles;
 
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.List;
-
-public class RoadClass implements IndexBased {
-    private static final List<RoadClass> values = create("_default",
-            "motorway", "motorway_link", "motorroad",
-            "trunk", "trunk_link",
-            "primary", "primary_link",
-            "secondary", "secondary_link",
-            "tertiary", "tertiary_link",
-            "residential", "unclassified",
-            "service", "road", "track", "forestry", "steps", "cycleway", "path", "living_street");
+public enum RoadClass {
+    OTHER("other"), MOTORWAY("motorway"), MOTORROAD("motorroad"),
+    TRUNK("trunk"), PRIMARY("primary"), SECONDARY("secondary"),
+    TERTIARY("tertiary"), RESIDENTIAL("residential"), UNCLASSIFIED("unclassified"),
+    SERVICE("service"), ROAD("road"), TRACK("track"),
+    FORESTRY("forestry"), STEPS("steps"), CYCLEWAY("cycleway"),
+    PATH("path"), LIVING_STREET("living_street");
 
     private final String name;
-    private final int ordinal;
 
-    private RoadClass(String name, int ordinal) {
+    RoadClass(String name) {
         this.name = name;
-        this.ordinal = ordinal;
     }
 
-
     @Override
     public String toString() {
         return name;
     }
-
-    @Override
-    public int ordinal() {
-        return ordinal;
-    }
-
-    @Override
-    public int hashCode() {
-        return ordinal;
-    }
-
-    @Override
-    public boolean equals(Object obj) {
-        if (!(obj instanceof RoadClass))
-            return false;
-        return ((RoadClass) obj).ordinal == ordinal;
-    }
-
-    public static List<RoadClass> create(String... values) {
-        List<RoadClass> list = new ArrayList<>(values.length);
-        for (int i = 0; i < values.length; i++) {
-            list.add(new RoadClass(values[i], i));
-        }
-        return Collections.unmodifiableList(list);
-    }
 }
diff --git a/core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java
index e1afaf9f98..4d7df30659 100644
--- a/core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java
@@ -605,8 +605,8 @@ public DecimalEncodedValue getDecimalEncodedValue(String key) {
     }
 
     @Override
-    public ObjectEncodedValue getObjectEncodedValue(String key) {
-        return encodedValueLookup.getObjectEncodedValue(key);
+    public <T extends Enum> EnumEncodedValue getEnumEncodedValue(String key, Class<T> enumType) {
+        return encodedValueLookup.getEnumEncodedValue(key, enumType);
     }
 
     public void setEncodedValueLookup(EncodedValueLookup encodedValueLookup) {
diff --git a/core/src/main/java/com/graphhopper/routing/util/EncodingManager.java b/core/src/main/java/com/graphhopper/routing/util/EncodingManager.java
index 0b6067de2f..5959c25e5d 100644
--- a/core/src/main/java/com/graphhopper/routing/util/EncodingManager.java
+++ b/core/src/main/java/com/graphhopper/routing/util/EncodingManager.java
@@ -627,8 +627,9 @@ public DecimalEncodedValue getDecimalEncodedValue(String key) {
     }
 
     @Override
-    public ObjectEncodedValue getObjectEncodedValue(String key) {
-        return getEncodedValue(key, ObjectEncodedValue.class);
+    @SuppressWarnings("unchecked")
+    public <T extends Enum> EnumEncodedValue<T> getEnumEncodedValue(String key, Class<T> type) {
+        return (EnumEncodedValue<T>) getEncodedValue(key, EnumEncodedValue.class);
     }
 
     @Override
diff --git a/core/src/main/java/com/graphhopper/storage/BaseGraph.java b/core/src/main/java/com/graphhopper/storage/BaseGraph.java
index 7019cea0ba..f2a938d17a 100644
--- a/core/src/main/java/com/graphhopper/storage/BaseGraph.java
+++ b/core/src/main/java/com/graphhopper/storage/BaseGraph.java
@@ -1256,25 +1256,25 @@ public EdgeIteratorState setReverse(DecimalEncodedValue property, double value)
         }
 
         @Override
-        public IndexBased get(ObjectEncodedValue property) {
-            return property.getObject(reverse, getFlags());
+        public <T extends Enum> T get(EnumEncodedValue<T> property) {
+            return property.getEnum(reverse, getFlags());
         }
 
         @Override
-        public EdgeIteratorState set(ObjectEncodedValue property, IndexBased value) {
-            property.setObject(reverse, getFlags(), value);
+        public <T extends Enum> EdgeIteratorState set(EnumEncodedValue<T> property, T value) {
+            property.setEnum(reverse, getFlags(), value);
             edgeAccess.writeFlags(edgePointer, getFlags());
             return this;
         }
 
         @Override
-        public IndexBased getReverse(ObjectEncodedValue property) {
-            return property.getObject(!reverse, getFlags());
+        public <T extends Enum> T getReverse(EnumEncodedValue<T> property) {
+            return property.getEnum(!reverse, getFlags());
         }
 
         @Override
-        public EdgeIteratorState setReverse(ObjectEncodedValue property, IndexBased value) {
-            property.setObject(!reverse, getFlags(), value);
+        public <T extends Enum> EdgeIteratorState setReverse(EnumEncodedValue<T> property, T value) {
+            property.setEnum(!reverse, getFlags(), value);
             edgeAccess.writeFlags(edgePointer, getFlags());
             return this;
         }
diff --git a/core/src/main/java/com/graphhopper/storage/CHGraphImpl.java b/core/src/main/java/com/graphhopper/storage/CHGraphImpl.java
index 0a08fa9eb9..c142383c45 100644
--- a/core/src/main/java/com/graphhopper/storage/CHGraphImpl.java
+++ b/core/src/main/java/com/graphhopper/storage/CHGraphImpl.java
@@ -694,7 +694,7 @@ public boolean getReverse(BooleanEncodedValue property) {
         public final IntsRef getFlags() {
             if (isShortcut())
                 throw new IllegalStateException("Shortcut should not need to return raw flags!");
-            return getFlags();
+            return super.getFlags();
         }
 
         @Override
diff --git a/core/src/main/java/com/graphhopper/util/EdgeIteratorState.java b/core/src/main/java/com/graphhopper/util/EdgeIteratorState.java
index b041e62b31..1fd0b0d6c0 100644
--- a/core/src/main/java/com/graphhopper/util/EdgeIteratorState.java
+++ b/core/src/main/java/com/graphhopper/util/EdgeIteratorState.java
@@ -89,7 +89,7 @@ public void setBool(boolean reverse, IntsRef ref, boolean value) {
     int getAdjNode();
 
     /**
-     * For roadnetwork data like OSM a way is nearly always a curve not just a straight line. These
+     * For road network data like OSM a way is nearly always a curve not just a straight line. These
      * nodes are called pillar nodes and are between tower nodes (which are used for routing), they
      * are necessary to have a more exact geometry. See the docs for more information
      * (docs/core/low-level-api.md#what-are-pillar-and-tower-nodes). Updates to the returned list
@@ -161,13 +161,13 @@ public void setBool(boolean reverse, IntsRef ref, boolean value) {
 
     EdgeIteratorState setReverse(DecimalEncodedValue property, double value);
 
-    IndexBased get(ObjectEncodedValue property);
+    <T extends Enum> T get(EnumEncodedValue<T> property);
 
-    EdgeIteratorState set(ObjectEncodedValue property, IndexBased value);
+    <T extends Enum> EdgeIteratorState set(EnumEncodedValue<T> property, T value);
 
-    IndexBased getReverse(ObjectEncodedValue property);
+    <T extends Enum> T getReverse(EnumEncodedValue<T> property);
 
-    EdgeIteratorState setReverse(ObjectEncodedValue property, IndexBased value);
+    <T extends Enum> EdgeIteratorState setReverse(EnumEncodedValue<T> property, T value);
 
     String getName();
 
diff --git a/core/src/main/java/com/graphhopper/util/GHUtility.java b/core/src/main/java/com/graphhopper/util/GHUtility.java
index 903374b174..e4596d1b97 100644
--- a/core/src/main/java/com/graphhopper/util/GHUtility.java
+++ b/core/src/main/java/com/graphhopper/util/GHUtility.java
@@ -21,11 +21,10 @@
 import com.graphhopper.coll.GHBitSet;
 import com.graphhopper.coll.GHBitSetImpl;
 import com.graphhopper.coll.GHIntArrayList;
-import com.graphhopper.routing.profiles.*;
-import com.graphhopper.routing.util.AllCHEdgesIterator;
-import com.graphhopper.routing.util.AllEdgesIterator;
-import com.graphhopper.routing.util.EdgeFilter;
-import com.graphhopper.routing.util.FlagEncoder;
+import com.graphhopper.routing.profiles.BooleanEncodedValue;
+import com.graphhopper.routing.profiles.DecimalEncodedValue;
+import com.graphhopper.routing.profiles.EnumEncodedValue;
+import com.graphhopper.routing.profiles.IntEncodedValue;
 import com.graphhopper.routing.util.*;
 import com.graphhopper.storage.*;
 import com.graphhopper.util.shapes.BBox;
@@ -43,6 +42,7 @@
  */
 public class GHUtility {
     private static final Logger LOGGER = LoggerFactory.getLogger(GHUtility.class);
+
     /**
      * This method could throw an exception if problems like index out of bounds etc
      */
@@ -671,22 +671,22 @@ public EdgeIteratorState setReverse(DecimalEncodedValue property, double value)
         }
 
         @Override
-        public IndexBased get(ObjectEncodedValue property) {
+        public <T extends Enum> T get(EnumEncodedValue<T> property) {
             throw new UnsupportedOperationException("Not supported. Edge is empty.");
         }
 
         @Override
-        public EdgeIteratorState set(ObjectEncodedValue property, IndexBased value) {
+        public <T extends Enum> EdgeIteratorState set(EnumEncodedValue<T> property, T value) {
             throw new UnsupportedOperationException("Not supported. Edge is empty.");
         }
 
         @Override
-        public IndexBased getReverse(ObjectEncodedValue property) {
+        public <T extends Enum> T getReverse(EnumEncodedValue<T> property) {
             throw new UnsupportedOperationException("Not supported. Edge is empty.");
         }
 
         @Override
-        public EdgeIteratorState setReverse(ObjectEncodedValue property, IndexBased value) {
+        public <T extends Enum> EdgeIteratorState setReverse(EnumEncodedValue<T> property, T value) {
             throw new UnsupportedOperationException("Not supported. Edge is empty.");
         }
 
diff --git a/core/src/main/java/com/graphhopper/util/details/EdgeIdDetails.java b/core/src/main/java/com/graphhopper/util/details/EdgeIdDetails.java
index eeee952086..f4b6bc2f6d 100644
--- a/core/src/main/java/com/graphhopper/util/details/EdgeIdDetails.java
+++ b/core/src/main/java/com/graphhopper/util/details/EdgeIdDetails.java
@@ -48,7 +48,7 @@ public boolean isEdgeDifferentToLastEdge(EdgeIteratorState edge) {
 
     private int edgeId(EdgeIteratorState edge) {
         if (edge instanceof VirtualEdgeIteratorState) {
-            return GHUtility.getEdgeFromEdgeKey(((VirtualEdgeIteratorState) edge).getOriginalTraversalKey());
+            return GHUtility.getEdgeFromEdgeKey(((VirtualEdgeIteratorState) edge).getOriginalEdgeKey());
         } else {
             return edge.getEdge();
         }
diff --git a/core/src/test/java/com/graphhopper/routing/QueryGraphTest.java b/core/src/test/java/com/graphhopper/routing/QueryGraphTest.java
index 06be7bd4bc..5010b7cd22 100644
--- a/core/src/test/java/com/graphhopper/routing/QueryGraphTest.java
+++ b/core/src/test/java/com/graphhopper/routing/QueryGraphTest.java
@@ -638,7 +638,7 @@ public void testunfavorVirtualEdgePair() {
     }
 
     @Test
-    public void testInternalAPIOriginalTraversalKey() {
+    public void testInternalAPIOriginalEdgeKey() {
         initGraph(g);
 
         EdgeExplorer explorer = g.createEdgeExplorer();
@@ -657,12 +657,12 @@ public void testInternalAPIOriginalTraversalKey() {
         assertTrue(iter.next());
         assertEquals(0, iter.getAdjNode());
         assertEquals(GHUtility.createEdgeKey(1, 0, origEdgeId, false),
-                ((VirtualEdgeIteratorState) queryGraph.getEdgeIteratorState(iter.getEdge(), 0)).getOriginalTraversalKey());
+                ((VirtualEdgeIteratorState) queryGraph.getEdgeIteratorState(iter.getEdge(), 0)).getOriginalEdgeKey());
 
         assertTrue(iter.next());
         assertEquals(1, iter.getAdjNode());
         assertEquals(GHUtility.createEdgeKey(0, 1, origEdgeId, false),
-                ((VirtualEdgeIteratorState) queryGraph.getEdgeIteratorState(iter.getEdge(), 1)).getOriginalTraversalKey());
+                ((VirtualEdgeIteratorState) queryGraph.getEdgeIteratorState(iter.getEdge(), 1)).getOriginalEdgeKey());
     }
 
     @Test
diff --git a/core/src/test/java/com/graphhopper/routing/profiles/EnumEncodedValueTest.java b/core/src/test/java/com/graphhopper/routing/profiles/EnumEncodedValueTest.java
new file mode 100644
index 0000000000..f3c18da936
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/routing/profiles/EnumEncodedValueTest.java
@@ -0,0 +1,26 @@
+package com.graphhopper.routing.profiles;
+
+import com.graphhopper.storage.IntsRef;
+import org.junit.Test;
+
+import static org.junit.Assert.assertEquals;
+
+public class EnumEncodedValueTest {
+
+    @Test
+    public void testInit() {
+        EnumEncodedValue<RoadClass> prop = new EnumEncodedValue<>("road_class", RoadClass.class);
+        EncodedValue.InitializerConfig init = new EncodedValue.InitializerConfig();
+        assertEquals(5, prop.init(init));
+        assertEquals(5, prop.bits);
+        assertEquals(0, init.dataIndex);
+        assertEquals(0, init.shift);
+        IntsRef ref = new IntsRef(1);
+        // default if empty
+        ref.ints[0] = 0;
+        assertEquals(RoadClass.OTHER, prop.getEnum(false, ref));
+
+        prop.setEnum(false, ref, RoadClass.SECONDARY);
+        assertEquals(RoadClass.SECONDARY, prop.getEnum(false, ref));
+    }
+}
\ No newline at end of file
diff --git a/core/src/test/java/com/graphhopper/routing/profiles/MappedObjectEncodedValueTest.java b/core/src/test/java/com/graphhopper/routing/profiles/MappedObjectEncodedValueTest.java
deleted file mode 100644
index fc835f8855..0000000000
--- a/core/src/test/java/com/graphhopper/routing/profiles/MappedObjectEncodedValueTest.java
+++ /dev/null
@@ -1,31 +0,0 @@
-package com.graphhopper.routing.profiles;
-
-import com.graphhopper.storage.IntsRef;
-import org.junit.Test;
-
-import java.util.List;
-
-import static org.junit.Assert.assertEquals;
-
-public class MappedObjectEncodedValueTest {
-
-    @Test
-    public void testInit() {
-        List<RoadClass> list = RoadClass.create("primary", "secondary");
-        RoadClass primary = list.get(0);
-        RoadClass secondary = list.get(1);
-        MappedObjectEncodedValue prop = new MappedObjectEncodedValue("road_class", list);
-        EncodedValue.InitializerConfig init = new EncodedValue.InitializerConfig();
-        assertEquals(2, prop.init(init));
-        assertEquals(2, prop.bits);
-        assertEquals(0, init.dataIndex);
-        assertEquals(0, init.shift);
-        IntsRef ref = new IntsRef(1);
-        // default if empty
-        ref.ints[0] = 0;
-        assertEquals(primary, prop.getObject(false, ref));
-
-        prop.setObject(false, ref, secondary);
-        assertEquals(secondary, prop.getObject(false, ref));
-    }
-}
\ No newline at end of file
diff --git a/reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/GraphExplorer.java b/reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/GraphExplorer.java
index 27f1bc974e..18fcd2f7ff 100644
--- a/reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/GraphExplorer.java
+++ b/reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/GraphExplorer.java
@@ -74,7 +74,7 @@ public GraphExplorer(Graph graph, Weighting accessEgressWeighting, PtFlagEncoder
                 throw new RuntimeException();
             }
             extraEdgesBySource.put(extraEdge.getBaseNode(), extraEdge);
-            extraEdgesByDestination.put(extraEdge.getAdjNode(), new VirtualEdgeIteratorState(extraEdge.getOriginalTraversalKey(), extraEdge.getEdge(), extraEdge.getAdjNode(),
+            extraEdgesByDestination.put(extraEdge.getAdjNode(), new VirtualEdgeIteratorState(extraEdge.getOriginalEdgeKey(), extraEdge.getEdge(), extraEdge.getAdjNode(),
                     extraEdge.getBaseNode(), extraEdge.getDistance(), extraEdge.getFlags(), extraEdge.getName(), extraEdge.fetchWayGeometry(3), false));
         }
         this.walkOnly = walkOnly;
diff --git a/reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/GraphSupport.java b/reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/GraphSupport.java
index 03c7ab0900..53b85c0ed3 100644
--- a/reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/GraphSupport.java
+++ b/reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/GraphSupport.java
@@ -18,7 +18,10 @@
 
 package com.graphhopper.reader.gtfs;
 
-import com.graphhopper.routing.profiles.*;
+import com.graphhopper.routing.profiles.BooleanEncodedValue;
+import com.graphhopper.routing.profiles.DecimalEncodedValue;
+import com.graphhopper.routing.profiles.EnumEncodedValue;
+import com.graphhopper.routing.profiles.IntEncodedValue;
 import com.graphhopper.routing.util.AllEdgesIterator;
 import com.graphhopper.routing.util.EdgeFilter;
 import com.graphhopper.storage.*;
@@ -257,23 +260,23 @@ public EdgeIteratorState setReverse(DecimalEncodedValue property, double value)
                     }
 
                     @Override
-                    public IndexBased get(ObjectEncodedValue property) {
+                    public <T extends Enum> T get(EnumEncodedValue<T> property) {
                         return edge.get(property);
                     }
 
                     @Override
-                    public EdgeIteratorState set(ObjectEncodedValue property, IndexBased value) {
+                    public <T extends Enum> EdgeIteratorState set(EnumEncodedValue<T> property, T value) {
                         edge.set(property, value);
                         return this;
                     }
 
                     @Override
-                    public IndexBased getReverse(ObjectEncodedValue property) {
+                    public <T extends Enum> T getReverse(EnumEncodedValue<T> property) {
                         return edge.getReverse(property);
                     }
 
                     @Override
-                    public EdgeIteratorState setReverse(ObjectEncodedValue property, IndexBased value) {
+                    public <T extends Enum> EdgeIteratorState setReverse(EnumEncodedValue<T> property, T value) {
                         edge.setReverse(property, value);
                         return this;
                     }
diff --git a/reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/WrapperGraph.java b/reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/WrapperGraph.java
index 38f5bd27e1..032292df9b 100644
--- a/reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/WrapperGraph.java
+++ b/reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/WrapperGraph.java
@@ -19,7 +19,10 @@
 package com.graphhopper.reader.gtfs;
 
 import com.graphhopper.routing.VirtualEdgeIteratorState;
-import com.graphhopper.routing.profiles.*;
+import com.graphhopper.routing.profiles.BooleanEncodedValue;
+import com.graphhopper.routing.profiles.DecimalEncodedValue;
+import com.graphhopper.routing.profiles.EnumEncodedValue;
+import com.graphhopper.routing.profiles.IntEncodedValue;
 import com.graphhopper.routing.util.AllEdgesIterator;
 import com.graphhopper.routing.util.EdgeFilter;
 import com.graphhopper.storage.Graph;
@@ -95,7 +98,7 @@ public int length() {
                 return IntStream.concat(
                         IntStream.of(baseGraph.getAllEdges().length() - 1),
                         extraEdges.stream().mapToInt(VirtualEdgeIteratorState::getEdge))
-                        .max().getAsInt()+1;
+                        .max().getAsInt() + 1;
             }
 
             @Override
@@ -229,22 +232,22 @@ public EdgeIteratorState setReverse(DecimalEncodedValue property, double value)
             }
 
             @Override
-            public IndexBased get(ObjectEncodedValue property) {
+            public <T extends Enum> T get(EnumEncodedValue<T> property) {
                 throw new UnsupportedOperationException();
             }
 
             @Override
-            public IndexBased getReverse(ObjectEncodedValue property) {
+            public <T extends Enum> T getReverse(EnumEncodedValue<T> property) {
                 throw new UnsupportedOperationException();
             }
 
             @Override
-            public EdgeIteratorState set(ObjectEncodedValue property, IndexBased value) {
+            public <T extends Enum> EdgeIteratorState set(EnumEncodedValue<T> property, T value) {
                 throw new UnsupportedOperationException();
             }
 
             @Override
-            public EdgeIteratorState setReverse(ObjectEncodedValue property, IndexBased value) {
+            public <T extends Enum> EdgeIteratorState setReverse(EnumEncodedValue<T> property, T value) {
                 throw new UnsupportedOperationException();
             }
 
