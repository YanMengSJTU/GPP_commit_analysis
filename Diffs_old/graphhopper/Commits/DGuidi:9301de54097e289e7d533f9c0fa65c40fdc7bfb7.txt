diff --git a/core/src/main/java/com/graphhopper/GraphHopper.java b/core/src/main/java/com/graphhopper/GraphHopper.java
index e7b0ded7cc..34d8a63c2f 100644
--- a/core/src/main/java/com/graphhopper/GraphHopper.java
+++ b/core/src/main/java/com/graphhopper/GraphHopper.java
@@ -597,7 +597,7 @@ protected DataReader createReader( GraphStorage tmpGraph )
     }
 
     protected OSMReader newReader(GraphStorage tmpGraph) {
-      return new OSMReader(tmpGraph);
+        return new OSMReader(tmpGraph);
     }
 
     protected OSMReader initOSMReader( OSMReader reader )
@@ -808,7 +808,7 @@ else if (request.getAlgorithm().equals("astarbi"))
         if (places.size() - 1 != paths.size())
             throw new RuntimeException("There should be exactly one more places than paths. places:" + places.size() + ", paths:" + paths.size());
 
-        new PathMerger().
+        newMerger(encoder).
                 setCalcPoints(calcPoints).
                 setDouglasPeucker(peucker).
                 setEnableInstructions(enableInstructions).
@@ -816,6 +816,10 @@ else if (request.getAlgorithm().equals("astarbi"))
                 doWork(rsp, paths);
         return rsp;
     }
+    
+    protected PathMerger newMerger(FlagEncoder encoder) {
+        return new PathMerger();
+    }
 
     protected LocationIndex createLocationIndex( Directory dir )
     {
diff --git a/core/src/main/java/com/graphhopper/routing/Path.java b/core/src/main/java/com/graphhopper/routing/Path.java
index 0fedf4089a..bc698fe2fb 100644
--- a/core/src/main/java/com/graphhopper/routing/Path.java
+++ b/core/src/main/java/com/graphhopper/routing/Path.java
@@ -66,7 +66,7 @@ public Path( Graph graph, FlagEncoder encoder )
     /**
      * Populates an unextracted path instances from the specified path p.
      */
-    Path( Path p )
+    protected Path( Path p )
     {
         this(p.graph, p.encoder);
         weight = p.weight;
@@ -342,6 +342,7 @@ public InstructionList calcInstructions()
         if (edgeIds.isEmpty())
             return cachedWays;
 
+        final Path root = this;
         final int tmpNode = getFromNode();
         forEveryEdge(new EdgeVisitor()
         {
@@ -378,6 +379,10 @@ public InstructionList calcInstructions()
             @Override
             public void next( EdgeIteratorState edge, int index )
             {
+                if (root.pathInterceptor != null) {
+                  root.pathInterceptor.handle(edge, index);
+                }
+                
                 // baseNode is the current node and adjNode is the next
                 int adjNode = edge.getAdjNode();
                 double adjLat = nodeAccess.getLatitude(adjNode);
@@ -545,4 +550,10 @@ public String toDetailsString()
         }
         return toString() + ", " + str;
     }
+
+    private PathInterceptor pathInterceptor;
+    
+    public void setPathInterceptor(PathInterceptor interceptor) {
+      this.pathInterceptor = interceptor;
+    }
 }
diff --git a/core/src/main/java/com/graphhopper/routing/PathInterceptor.java b/core/src/main/java/com/graphhopper/routing/PathInterceptor.java
new file mode 100644
index 0000000000..71e7103451
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/routing/PathInterceptor.java
@@ -0,0 +1,7 @@
+package com.graphhopper.routing;
+
+import com.graphhopper.util.EdgeIteratorState;
+
+public interface PathInterceptor {
+  void handle(EdgeIteratorState edge, int index);
+}
diff --git a/core/src/main/java/com/graphhopper/util/InstructionList.java b/core/src/main/java/com/graphhopper/util/InstructionList.java
index 5a1a93d6f1..8ccec23291 100644
--- a/core/src/main/java/com/graphhopper/util/InstructionList.java
+++ b/core/src/main/java/com/graphhopper/util/InstructionList.java
@@ -119,7 +119,7 @@ public int size()
         return instrList;
     }
 
-    private String getTurnDescription( Instruction instruction, TranslationMap.Translation tr )
+    protected String getTurnDescription( Instruction instruction, TranslationMap.Translation tr )
     {
         String str;
         String n = getWayName(instruction.getName(), instruction.getPavementType(), instruction.getWayType(), tr);
diff --git a/web/src/main/webapp/img/err.png b/web/src/main/webapp/img/err.png
new file mode 100644
index 0000000000..1a082c8eac
Binary files /dev/null and b/web/src/main/webapp/img/err.png differ
diff --git a/web/src/main/webapp/img/ok.png b/web/src/main/webapp/img/ok.png
new file mode 100644
index 0000000000..0c93f1fbd7
Binary files /dev/null and b/web/src/main/webapp/img/ok.png differ
diff --git a/web/src/main/webapp/img/warn.png b/web/src/main/webapp/img/warn.png
new file mode 100644
index 0000000000..49ab567384
Binary files /dev/null and b/web/src/main/webapp/img/warn.png differ
diff --git a/web/src/main/webapp/js/main.js b/web/src/main/webapp/js/main.js
index 7477abe53a..a02a793cf2 100644
--- a/web/src/main/webapp/js/main.js
+++ b/web/src/main/webapp/js/main.js
@@ -820,6 +820,12 @@ function addInstruction(main, instr, instrIndex, lngLat) {
         sign = "sharp_right";
     else if (sign === 4)
         sign = "marker-icon-red";
+    else if (sign === 5)
+    	sign = "ok";
+    else if (sign === 6)
+    	sign = "warn";
+    else if (sign === 7)
+    	sign = "err";
     else
         throw "did not found sign " + sign;
     var title = instr.text;
