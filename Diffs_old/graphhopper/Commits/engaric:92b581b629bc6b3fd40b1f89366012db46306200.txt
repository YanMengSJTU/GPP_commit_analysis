diff --git a/core/src/main/java/com/graphhopper/util/shapes/GHPoint.java b/core/src/main/java/com/graphhopper/util/shapes/GHPoint.java
index e3b972d5ea..35f11d20aa 100644
--- a/core/src/main/java/com/graphhopper/util/shapes/GHPoint.java
+++ b/core/src/main/java/com/graphhopper/util/shapes/GHPoint.java
@@ -134,13 +134,7 @@ public static GHPoint parse( String str, String srs )
 	    }
 	    try
         {
-	    	String[] fromStrs = str.split(",");
-	    	double sourceXCoordinate = Double.parseDouble(fromStrs[0]);
-			double sourceYCoordinate = Double.parseDouble(fromStrs[1]);
-	        CoordinateReferenceSystem outputCRS = OpenCoordConverter.wgs84CoordRefSystem;
-	        CoordinateReferenceSystem inputCRS = srs.equalsIgnoreCase(BNG)||srs.equalsIgnoreCase(OpenCoordConverter.BNG_CRS_CODE)?OpenCoordConverter.bngCoordRefSystem:CRS.decode(srs);
-	        LatLong transformFromSourceCRSToTargetCRS = OpenCoordConverter.transformFromSourceCRSToTargetCRS(inputCRS, outputCRS, sourceXCoordinate, sourceYCoordinate, true);
-	        return new GHPoint(transformFromSourceCRSToTargetCRS.getLatAngle(), transformFromSourceCRSToTargetCRS.getLongAngle());
+	    	return doParse(str, srs);
         } catch (TransformException | IllegalArgumentException e)
         {
         	throw new IllegalArgumentException("Point "
@@ -153,4 +147,16 @@ public static GHPoint parse( String str, String srs )
 	       throw new IllegalArgumentException("Srs " + srs + " is not a valid srs for input.");
         } 
     }
+
+	private static GHPoint doParse( String str, String srs ) throws NoSuchAuthorityCodeException,
+            FactoryException, TransformException
+    {
+	    String[] fromStrs = str.split(",");
+	    double sourceXCoordinate = Double.parseDouble(fromStrs[0]);
+	    double sourceYCoordinate = Double.parseDouble(fromStrs[1]);
+	    CoordinateReferenceSystem outputCRS = OpenCoordConverter.wgs84CoordRefSystem;
+	    CoordinateReferenceSystem inputCRS = srs.equalsIgnoreCase(BNG)||srs.equalsIgnoreCase(OpenCoordConverter.BNG_CRS_CODE)?OpenCoordConverter.bngCoordRefSystem:CRS.decode(srs);
+	    LatLong transformFromSourceCRSToTargetCRS = OpenCoordConverter.transformFromSourceCRSToTargetCRS(inputCRS, outputCRS, sourceXCoordinate, sourceYCoordinate, true);
+	    return new GHPoint(transformFromSourceCRSToTargetCRS.getLatAngle(), transformFromSourceCRSToTargetCRS.getLongAngle());
+    }
 }
diff --git a/core/src/main/java/com/graphhopper/util/shapes/GHResponseCoordinateTransformer.java b/core/src/main/java/com/graphhopper/util/shapes/GHResponseCoordinateTransformer.java
index ed94e095b3..82440cbf1d 100644
--- a/core/src/main/java/com/graphhopper/util/shapes/GHResponseCoordinateTransformer.java
+++ b/core/src/main/java/com/graphhopper/util/shapes/GHResponseCoordinateTransformer.java
@@ -45,17 +45,7 @@ public void transformCoordinates( GHResponse response )
 			GHPoint transformedPoint;
 			for (GHPoint ghPoint : points)
 			{
-				LatLong transformedCoordinate = OpenCoordConverter
-				        .transformFromSourceCRSToTargetCRS(OpenCoordConverter.wgs84CoordRefSystem,
-				                targetCRS, ghPoint.getLat(), ghPoint.getLon(), true);
-				if (points.is3D()) {
-					GHPoint3D threedPoint = (GHPoint3D) ghPoint;
-					transformedPoint = new GHPoint3D(transformedCoordinate.getLatAngle(),
-					        transformedCoordinate.getLongAngle(), threedPoint.getElevation());
-				}
-				else
-					transformedPoint = new GHPoint(transformedCoordinate.getLatAngle(),
-					        transformedCoordinate.getLongAngle());
+				transformedPoint = doTransformPoint(ghPoint);
 
 				transformedPoints.add(transformedPoint);
 			}
@@ -67,5 +57,27 @@ public void transformCoordinates( GHResponse response )
 		}
 
 	}
+	
+	public GHPoint transformPoint(GHPoint ghPoint) throws FactoryException, TransformException {
+		if(targetCRS.equals(OpenCoordConverter.wgs84CoordRefSystem))
+			return ghPoint;
+		return doTransformPoint(ghPoint);
+	}
 
+	private GHPoint doTransformPoint( GHPoint ghPoint ) throws FactoryException, TransformException
+    {
+	    GHPoint transformedPoint;
+	    LatLong transformedCoordinate = OpenCoordConverter
+	            .transformFromSourceCRSToTargetCRS(OpenCoordConverter.wgs84CoordRefSystem,
+	                    targetCRS, ghPoint.getLat(), ghPoint.getLon(), true);
+	    if (ghPoint instanceof GHPoint3D) {
+	    	GHPoint3D threedPoint = (GHPoint3D) ghPoint;
+	    	transformedPoint = new GHPoint3D(transformedCoordinate.getLatAngle(),
+	    	        transformedCoordinate.getLongAngle(), threedPoint.getElevation());
+	    }
+	    else
+	    	transformedPoint = new GHPoint(transformedCoordinate.getLatAngle(),
+	    	        transformedCoordinate.getLongAngle());
+	    return transformedPoint;
+    }
 }
diff --git a/web/src/main/java/com/graphhopper/http/NearestServlet.java b/web/src/main/java/com/graphhopper/http/NearestServlet.java
index a0f9b89956..066b0caf4d 100644
--- a/web/src/main/java/com/graphhopper/http/NearestServlet.java
+++ b/web/src/main/java/com/graphhopper/http/NearestServlet.java
@@ -31,6 +31,8 @@
 
 import org.json.JSONArray;
 import org.json.JSONObject;
+import org.opengis.referencing.FactoryException;
+import org.opengis.referencing.operation.TransformException;
 
 import com.graphhopper.GHResponse;
 import com.graphhopper.GraphHopper;
@@ -88,10 +90,15 @@ public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes )
 			{
 				GHPoint3D snappedPoint = qr.getSnappedPoint();
 				map.put("type", "Point");
-
+				GHPoint outputPoint;
+				try {
+					outputPoint = transformer.transformPoint(snappedPoint);
+				} catch (FactoryException | TransformException e) {
+					throw new InvalidParameterException("Nearest point WGS84:" + snappedPoint.toString() + "is not valid in output srs " + outputSrs);
+				}
 				JSONArray coord = new JSONArray();
-				coord.put(snappedPoint.lon);
-				coord.put(snappedPoint.lat);
+				coord.put(outputPoint.lon);
+				coord.put(outputPoint.lat);
 
 				if (hopper.hasElevation() && enabledElevation)
 					coord.put(snappedPoint.ele);
