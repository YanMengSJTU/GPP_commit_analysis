diff --git a/android/app/build.gradle b/android/app/build.gradle
index 60b02405bc..13bc699c35 100644
--- a/android/app/build.gradle
+++ b/android/app/build.gradle
@@ -2,7 +2,7 @@ apply plugin: 'com.android.application'
 
 android {
     compileSdkVersion 27
-    buildToolsVersion "27.0.1"
+    buildToolsVersion "27.0.3"
 
     defaultConfig {
         applicationId "com.graphhopper.android"
@@ -42,15 +42,15 @@ dependencies {
        exclude group: 'org.apache.xmlgraphics', module: 'xmlgraphics-commons'
     }
 
-    implementation 'org.mapsforge:vtm:0.9.0'
-    implementation 'org.mapsforge:vtm-android:0.9.0'
-    implementation 'org.mapsforge:vtm-android:0.9.0:natives-armeabi'
-    implementation 'org.mapsforge:vtm-android:0.9.0:natives-armeabi-v7a'
-    implementation 'org.mapsforge:vtm-android:0.9.0:natives-arm64-v8a'
-    implementation 'org.mapsforge:vtm-android:0.9.0:natives-x86'
-    implementation 'org.mapsforge:vtm-android:0.9.0:natives-x86_64'
-    implementation 'org.mapsforge:vtm-jts:0.9.0'
-    implementation 'org.mapsforge:vtm-themes:0.9.0'
+    implementation 'org.mapsforge:vtm:0.9.1'
+    implementation 'org.mapsforge:vtm-android:0.9.1'
+    implementation 'org.mapsforge:vtm-android:0.9.1:natives-armeabi'
+    implementation 'org.mapsforge:vtm-android:0.9.1:natives-armeabi-v7a'
+    implementation 'org.mapsforge:vtm-android:0.9.1:natives-arm64-v8a'
+    implementation 'org.mapsforge:vtm-android:0.9.1:natives-x86'
+    implementation 'org.mapsforge:vtm-android:0.9.1:natives-x86_64'
+    implementation 'org.mapsforge:vtm-jts:0.9.1'
+    implementation 'org.mapsforge:vtm-themes:0.9.1'
     implementation 'com.caverock:androidsvg:1.2.2-beta-1'
 
     implementation 'org.slf4j:slf4j-api:1.7.25'
diff --git a/client-hc/src/test/java/com/graphhopper/api/GraphHopperWebIT.java b/client-hc/src/test/java/com/graphhopper/api/GraphHopperWebIT.java
index 2724370451..dc3eef9fba 100644
--- a/client-hc/src/test/java/com/graphhopper/api/GraphHopperWebIT.java
+++ b/client-hc/src/test/java/com/graphhopper/api/GraphHopperWebIT.java
@@ -120,11 +120,11 @@ public void testRetrieveOnlyStreetname() {
                 addPoint(new GHPoint(52.399067, 13.469238));
 
         GHResponse res = gh.route(req);
-        assertEquals("Turn right onto B 246", res.getBest().getInstructions().get(4).getName());
+        assertEquals("Continue onto B 96", res.getBest().getInstructions().get(4).getName());
 
         req.getHints().put("turn_description", false);
         res = gh.route(req);
-        assertEquals("B 246", res.getBest().getInstructions().get(4).getName());
+        assertEquals("B 96", res.getBest().getInstructions().get(4).getName());
     }
 
     @Test
diff --git a/core/src/main/java/com/graphhopper/GraphHopper.java b/core/src/main/java/com/graphhopper/GraphHopper.java
index e83fb13aa6..d108a0a8f9 100644
--- a/core/src/main/java/com/graphhopper/GraphHopper.java
+++ b/core/src/main/java/com/graphhopper/GraphHopper.java
@@ -86,6 +86,7 @@
     private boolean allowWrites = true;
     private String preferredLanguage = "";
     private boolean fullyLoaded = false;
+    private boolean smoothElevation = false;
     // for routing
     private int maxRoundTripRetries = 3;
     private boolean simplifyResponse = true;
@@ -555,6 +556,7 @@ public GraphHopper init(CmdArgs args) {
 
         // elevation
         String eleProviderStr = toLowerCase(args.get("graph.elevation.provider", "noop"));
+        this.smoothElevation = args.getBool("graph.elevation.smoothing", false);
 
         // keep fallback until 0.8
         boolean eleCalcMean = args.has("graph.elevation.calcmean")
@@ -703,7 +705,8 @@ protected DataReader initDataReader(DataReader reader) {
         return reader.setFile(new File(dataReaderFile)).
                 setElevationProvider(eleProvider).
                 setWorkerThreads(dataReaderWorkerThreads).
-                setWayPointMaxDistance(dataReaderWayPointMaxDistance);
+                setWayPointMaxDistance(dataReaderWayPointMaxDistance).
+                setSmoothElevation(this.smoothElevation);
     }
 
     /**
@@ -1271,4 +1274,5 @@ protected void ensureWriteAccess() {
     public void setNonChMaxWaypointDistance(int nonChMaxWaypointDistance) {
         this.nonChMaxWaypointDistance = nonChMaxWaypointDistance;
     }
+
 }
diff --git a/core/src/main/java/com/graphhopper/reader/DataReader.java b/core/src/main/java/com/graphhopper/reader/DataReader.java
index 362ac348a7..0a37be8c83 100644
--- a/core/src/main/java/com/graphhopper/reader/DataReader.java
+++ b/core/src/main/java/com/graphhopper/reader/DataReader.java
@@ -36,6 +36,8 @@
 
     DataReader setWayPointMaxDistance(double wayPointMaxDistance);
 
+    DataReader setSmoothElevation(boolean smoothElevation);
+
     /**
      * This method triggers reading the underlying data to create a graph
      */
diff --git a/core/src/main/java/com/graphhopper/reader/dem/GraphElevationSmoothing.java b/core/src/main/java/com/graphhopper/reader/dem/GraphElevationSmoothing.java
new file mode 100644
index 0000000000..3deb4b3022
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/dem/GraphElevationSmoothing.java
@@ -0,0 +1,62 @@
+package com.graphhopper.reader.dem;
+
+import com.graphhopper.util.Helper;
+import com.graphhopper.util.PointList;
+
+/**
+ * This class smooths the elevation data of a PointList by calculating the average elevation over
+ * multiple points of that PointList.
+ * <p>
+ * The ElevationData is read from rectangular tiles. Especially when going along a cliff,
+ * valley, or pass, it can happen that a small part of the road contains incorrect elevation data.
+ * This is because the elevation data is coarse and sometimes contains errors.
+ * <p>
+ * This can lead to incorrect ascend, descend, and distance calculation of a route.
+ *
+ * @author Robin Boldt
+ */
+public class GraphElevationSmoothing {
+
+    // If the point is farther then this, we stop averaging
+    private final static int MAX_SEARCH_DISTANCE = 150;
+
+    public static PointList smoothElevation(PointList geometry) {
+        for (int i = 1; i < geometry.size() - 1; i++) {
+
+            int start = i;
+            for (int j = i-1; j >= 0 ; j--) {
+                if (MAX_SEARCH_DISTANCE > Helper.DIST_PLANE.calcDist(geometry.getLat(i), geometry.getLon(i), geometry.getLat(j), geometry.getLon(j))) {
+                    start = j;
+                }else{
+                    break;
+                }
+            }
+
+            int end = i;
+            for (int j = i+1; j < geometry.size(); j++) {
+                if (MAX_SEARCH_DISTANCE > Helper.DIST_PLANE.calcDist(geometry.getLat(i), geometry.getLon(i), geometry.getLat(j), geometry.getLon(j))) {
+                    // +1 because the end is exclusive
+                    end = j+1;
+                }else{
+                    break;
+                }
+            }
+
+            // In this case we cannot find any points withing the max search distance, so we simply skip this point
+            if(start == end)
+                continue;
+
+            double sum = 0;
+            for (int j = start; j < end; j++) {
+                // We skip points that are too far away, important for motorways
+                if (MAX_SEARCH_DISTANCE > Helper.DIST_PLANE.calcDist(geometry.getLat(i), geometry.getLon(i), geometry.getLat(j), geometry.getLon(j))) {
+                    sum += geometry.getEle(j);
+                }
+            }
+            double smoothed = sum / (end-start);
+            geometry.setElevation(i, smoothed);
+        }
+        return geometry;
+    }
+
+}
diff --git a/core/src/main/java/com/graphhopper/util/PointList.java b/core/src/main/java/com/graphhopper/util/PointList.java
index a4dd1d356b..cece58286e 100644
--- a/core/src/main/java/com/graphhopper/util/PointList.java
+++ b/core/src/main/java/com/graphhopper/util/PointList.java
@@ -69,6 +69,11 @@ public void clear() {
             throw new RuntimeException("cannot change EMPTY PointList");
         }
 
+        @Override
+        public void setElevation(int index, double ele) {
+            throw new RuntimeException("cannot change EMPTY PointList");
+        }
+
         @Override
         public void trimToSize(int newSize) {
             throw new RuntimeException("cannot change EMPTY PointList");
@@ -319,6 +324,14 @@ public double getElevation(int index) {
         return elevations[index];
     }
 
+    public void setElevation(int index, double ele) {
+        if (index >= size)
+            throw new ArrayIndexOutOfBoundsException(ERR_MSG + " index:" + index + ", size:" + size);
+        if (!is3D)
+            throw new IllegalStateException("This is a 2D PointList, you cannot set it's elevation");
+        this.elevations[index] = ele;
+    }
+
     @Override
     public double getEle(int index) {
         return getElevation(index);
diff --git a/core/src/main/java/com/graphhopper/util/ShallowImmutablePointList.java b/core/src/main/java/com/graphhopper/util/ShallowImmutablePointList.java
index 24288d4872..7523843d50 100644
--- a/core/src/main/java/com/graphhopper/util/ShallowImmutablePointList.java
+++ b/core/src/main/java/com/graphhopper/util/ShallowImmutablePointList.java
@@ -80,6 +80,11 @@ public double getElevation(int index) {
         return wrappedPointList.getElevation(fromOffset + index);
     }
 
+    @Override
+    public void setElevation(int index, double ele) {
+        wrappedPointList.setElevation(fromOffset + index, ele);
+    }
+
     public void makeImmutable() {
         this.wrappedPointList.makeImmutable();
     }
diff --git a/core/src/test/java/com/graphhopper/reader/dem/GraphElevationSmoothingTest.java b/core/src/test/java/com/graphhopper/reader/dem/GraphElevationSmoothingTest.java
new file mode 100644
index 0000000000..89c718533e
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/dem/GraphElevationSmoothingTest.java
@@ -0,0 +1,56 @@
+/*
+ *  Licensed to GraphHopper GmbH under one or more contributor
+ *  license agreements. See the NOTICE file distributed with this work for 
+ *  additional information regarding copyright ownership.
+ * 
+ *  GraphHopper GmbH licenses this file to you under the Apache License, 
+ *  Version 2.0 (the "License"); you may not use this file except in 
+ *  compliance with the License. You may obtain a copy of the License at
+ * 
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package com.graphhopper.reader.dem;
+
+import com.graphhopper.util.PointList;
+import org.junit.Test;
+
+import static org.junit.Assert.assertEquals;
+
+/**
+ * @author Robin Boldt
+ */
+public class GraphElevationSmoothingTest {
+
+    @Test
+    public void interpolatesElevationOfPillarNodes() {
+
+        PointList pl1 = new PointList(3, true);
+        pl1.add(0, 0, 0);
+        pl1.add(0.0005, 0.0005, 100);
+        pl1.add(0.001, 0.001, 50);
+        GraphElevationSmoothing.smoothElevation(pl1);
+        assertEquals(3, pl1.size());
+        assertEquals(50, pl1.getElevation(1), .1);
+
+        PointList pl2 = new PointList(3, true);
+        pl2.add(0.001, 0.001, 50);
+        pl2.add(0.0015, 0.0015, 160);
+        pl2.add(0.0016, 0.0015, 150);
+        pl2.add(0.0017, 0.0015, 220);
+        pl2.add(0.002, 0.002, 20);
+        GraphElevationSmoothing.smoothElevation(pl2);
+        assertEquals(5, pl2.size());
+        assertEquals(120, pl2.getElevation(1), .1);
+        // This is not 120 anymore, as the point at index 1 was smoothed from 160=>120
+        assertEquals(112, pl2.getElevation(2), .1);
+
+        assertEquals(50, pl2.getEle(0), .1);
+    }
+
+}
diff --git a/reader-osm/src/main/java/com/graphhopper/reader/osm/OSMReader.java b/reader-osm/src/main/java/com/graphhopper/reader/osm/OSMReader.java
index 9621b33e92..1ab9b83aae 100644
--- a/reader-osm/src/main/java/com/graphhopper/reader/osm/OSMReader.java
+++ b/reader-osm/src/main/java/com/graphhopper/reader/osm/OSMReader.java
@@ -29,6 +29,7 @@
 import com.graphhopper.coll.LongIntMap;
 import com.graphhopper.reader.*;
 import com.graphhopper.reader.dem.ElevationProvider;
+import com.graphhopper.reader.dem.GraphElevationSmoothing;
 import com.graphhopper.reader.osm.OSMTurnRelation.TurnCostTableEntry;
 import com.graphhopper.routing.util.DefaultEdgeFilter;
 import com.graphhopper.routing.util.EncodingManager;
@@ -85,6 +86,7 @@
     private final DistanceCalc distCalc = Helper.DIST_EARTH;
     private final DistanceCalc3D distCalc3D = Helper.DIST_3D;
     private final DouglasPeucker simplifyAlgo = new DouglasPeucker();
+    private boolean smoothElevation = false;
     private final boolean exitOnlyPillarNodeException = true;
     private final Map<FlagEncoder, EdgeExplorer> outExplorerMap = new HashMap<FlagEncoder, EdgeExplorer>();
     private final Map<FlagEncoder, EdgeExplorer> inExplorerMap = new HashMap<FlagEncoder, EdgeExplorer>();
@@ -681,6 +683,10 @@ EdgeIteratorState addEdge(int fromIndex, int toIndex, PointList pointList, long
         if (pointList.getDimension() != nodeAccess.getDimension())
             throw new AssertionError("Dimension does not match for pointList vs. nodeAccess " + pointList.getDimension() + " <-> " + nodeAccess.getDimension());
 
+        // Smooth the elevation before calculating the distance because the distance will be incorrect if calculated afterwards
+        if (this.smoothElevation)
+            pointList = GraphElevationSmoothing.smoothElevation(pointList);
+
         double towerNodeDistance = 0;
         double prevLat = pointList.getLatitude(0);
         double prevLon = pointList.getLongitude(0);
@@ -882,6 +888,12 @@ public OSMReader setWayPointMaxDistance(double maxDist) {
         return this;
     }
 
+    @Override
+    public DataReader setSmoothElevation(boolean smoothElevation) {
+        this.smoothElevation = smoothElevation;
+        return this;
+    }
+
     @Override
     public OSMReader setWorkerThreads(int numOfWorkers) {
         this.workerThreads = numOfWorkers;
diff --git a/reader-shp/src/main/java/com/graphhopper/reader/shp/OSMShapeFileReader.java b/reader-shp/src/main/java/com/graphhopper/reader/shp/OSMShapeFileReader.java
index 70c4d4ed33..4ecb63dd91 100644
--- a/reader-shp/src/main/java/com/graphhopper/reader/shp/OSMShapeFileReader.java
+++ b/reader-shp/src/main/java/com/graphhopper/reader/shp/OSMShapeFileReader.java
@@ -62,7 +62,7 @@
     private static final Logger LOGGER = LoggerFactory.getLogger(OSMShapeFileReader.class);
     private final HashSet<EdgeAddedListener> edgeAddedListeners = new HashSet<>();
     private int nextNodeId = FIRST_NODE_ID;
-    private final String encoding= "utf8";
+    private final String encoding = "utf8";
 
     public OSMShapeFileReader(GraphHopperStorage ghStorage) {
         super(ghStorage);
@@ -248,6 +248,12 @@ public DataReader setWayPointMaxDistance(double wayPointMaxDistance) {
         return this;
     }
 
+    @Override
+    public DataReader setSmoothElevation(boolean smoothElevation) {
+        // TODO implement elevation smoothing for shape files
+        return this;
+    }
+
     @Override
     public Date getDataDate() {
         return null;
