diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/Marmoset.java b/marmoset/src/main/java/com/graphhopper/marmoset/Marmoset.java
index 12b7169f45..d98f0ca218 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/Marmoset.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/Marmoset.java
@@ -93,10 +93,19 @@ private static void startFileServer()
     }
 
     public static void nextTimestep() {
-        logger.info("===ITERATION [" + iteration + "]===");
-        iteration++;
-        mh.timestep();
-        ByteBuffer data = mh.getVehicleBytes();
-        mss.distributeData(data);
+        if (mh.timestep())
+        {
+            logger.info("===ITERATION [" + iteration + "]===");
+            mh.getMetrics();
+            iteration++;
+            ByteBuffer data = mh.getVehicleBytes();
+            mss.distributeData(data);
+        }
+        else
+        {
+            logger.info("Timestep failed, not iterating");
+        }
     }
+
+    public
 }
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetHopper.java b/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetHopper.java
index 407a9aaefa..73e2c5fb7a 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetHopper.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetHopper.java
@@ -86,10 +86,11 @@ public synchronized void startSimulation(int initialVehicles)
         IntStream.range(0, initialVehicles).forEach(v -> addVehicle());
     }
 
-    public synchronized void timestep()
+    public synchronized boolean timestep()
     {
-        if (isPaused)
-            return;
+        if (isPaused || vehicles.size() == 0)
+            return false;
+
         vehicles.stream().forEach(Vehicle::accelerationStep);
         vehicles.stream().forEach(Vehicle::slowStep);
         vehicles.stream().forEach(Vehicle::randomStep);
@@ -98,12 +99,22 @@ public synchronized void timestep()
 
         vehicles = vehicles.stream().filter(v -> !v.isFinished()).collect(Collectors.toList());
 
+        return true;
+    }
+
+    public synchronized String getMetrics()
+    {
+        if (vehicles.size() == 0)
+            return null;
+
         int slowed = vehicles.stream().mapToInt(v -> v.didSlow() ? 1 : 0).reduce(0, (acc, i) -> acc + i);
         double averageVelocity = vehicles.stream().mapToDouble(Vehicle::getVelocity).average().getAsDouble();
         long deltaV = vehicles.stream().filter(v -> v.getMaxVelocity() <= v.getVelocity()).count();
-        logger.info(String.format("%d/%d (%.2f%%) of vehicles slowed, moving at %.2fc/s with %d not at max",
+
+        return String.format("%d/%d (%.2f%%) of vehicles slowed, moving at %.2fc/s with %d not at max",
                 slowed, vehicles.size(), (float) slowed * 100.0/ vehicles.size(),
                 averageVelocity, deltaV));
+
     }
 
     public synchronized String getVehicleString()
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/util/CellIterator.java b/marmoset/src/main/java/com/graphhopper/marmoset/util/CellIterator.java
index 7339bd03c1..3d4c338ae2 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/util/CellIterator.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/util/CellIterator.java
@@ -49,7 +49,6 @@ public int getCellSpeed()
     {
         double roadSpeed = route.getRoadSpeed();
         double v = (roadSpeed / (cg.cellSize * 3.6));
-        int max = Math.max(1, (int) Math.ceil(v));
-        return max;
+        return Math.max(1, (int) Math.ceil(v));
     }
 }
