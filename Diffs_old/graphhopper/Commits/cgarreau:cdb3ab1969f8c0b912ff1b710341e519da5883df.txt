diff --git a/config-example.properties b/config-example.properties
index a8456b82ba..b906cb8c6f 100644
--- a/config-example.properties
+++ b/config-example.properties
@@ -19,10 +19,6 @@ prepare.chShortcuts=fastest
 # prepare.updates.lazy=10
 # prepare.updates.neighbor=20
 
-# uncomment prepare.minNetworkSize to remove small networks to avoid routing failure in isolated networks - default=200
-# prepare.minNetworkSize=200
-# uncomment prepare.minCarNetworkSize to remove one-way nodes that drives to dead-end - default=0 (does nothing)
-prepare.minCarNetworkSize=50
 
 # increase from 1 to 5, to reduce way geometry e.g. for android
 osmreader.wayPointMaxDistance=1
diff --git a/core/src/main/java/com/graphhopper/GraphHopper.java b/core/src/main/java/com/graphhopper/GraphHopper.java
index 6ee5859e36..ac06263d1d 100644
--- a/core/src/main/java/com/graphhopper/GraphHopper.java
+++ b/core/src/main/java/com/graphhopper/GraphHopper.java
@@ -989,7 +989,7 @@ protected void cleanUp()
         logger.info("edges: " + graph.getAllEdges().getMaxId() + ", nodes " + n + ", there were " + preparation.getSubNetworks()
                 + " subnetworks. removed them => " + (prev - n) + " less nodes. Remaining subnetworks:" + remainingSubnetworks);
     }
-    
+
     protected void flush()
     {
         logger.info("flushing graph " + graph.toString() + ", details:" + graph.toDetailsString() + ", " + Helper.getMemInfo() + ")");
diff --git a/core/src/main/java/com/graphhopper/routing/util/PrepareRoutingSubnetworks.java b/core/src/main/java/com/graphhopper/routing/util/PrepareRoutingSubnetworks.java
index 84f98dbb54..dc04c94963 100644
--- a/core/src/main/java/com/graphhopper/routing/util/PrepareRoutingSubnetworks.java
+++ b/core/src/main/java/com/graphhopper/routing/util/PrepareRoutingSubnetworks.java
@@ -74,7 +74,7 @@ public void doWork()
 
         int unvisitedDeadEnds = 0;
         if (this.encodingManager.getVehicleCount() == 1)
-            unvisitedDeadEnds = RemoveDeadEndUnvisitedNetworks(g, this.encodingManager.getSingle(), minNetworkSize, logger);
+            unvisitedDeadEnds = removeDeadEndUnvisitedNetworks(g, this.encodingManager.getSingle(), minNetworkSize, logger);
 
         logger.info("optimize to remove subnetworks (" + map.size() + "), zero-degree-nodes (" + del + "), "
                 + "unvisited-dead-end-nodes(" + unvisitedDeadEnds + "), "
@@ -238,19 +238,19 @@ int removeZeroDegreeNodes()
      * <p/>
      * @return removed nodes;
      */
-    public static int RemoveDeadEndUnvisitedNetworks(final GraphStorage g, final FlagEncoder encoder, final int minNetworkSize, final Logger logger)
+    public static int removeDeadEndUnvisitedNetworks(final GraphStorage g, final FlagEncoder encoder, final int minNetworkSize, final Logger logger)
     {
         int removed = 0;
 
         StopWatch sw = new StopWatch().start();
-        logger.info("RemoveDeadEndUnvisitedNetworks: searching forward");
-        removed += RemoveDeadEndUnvisitedNetworks(g, g.createEdgeExplorer(new DefaultEdgeFilter(encoder, true, false)), minNetworkSize, logger);
-        logger.info("RemoveDeadEndUnvisitedNetworks: forward search completed in " + sw.stop().getSeconds() + "s");
+        logger.info("removeDeadEndUnvisitedNetworks: searching forward");
+        removed += removeDeadEndUnvisitedNetworks(g, g.createEdgeExplorer(new DefaultEdgeFilter(encoder, true, false)), minNetworkSize, logger);
+        logger.info("removeDeadEndUnvisitedNetworks: forward search completed in " + sw.stop().getSeconds() + "s");
         
         sw.start();
-        logger.info("RemoveDeadEndUnvisitedNetworks: searching backward");
-        removed += RemoveDeadEndUnvisitedNetworks(g, g.createEdgeExplorer(new DefaultEdgeFilter(encoder, false, true)), minNetworkSize, logger);
-        logger.info("RemoveDeadEndUnvisitedNetworks: backward search completed in " + sw.stop().getSeconds() + "s");
+        logger.info("removeDeadEndUnvisitedNetworks: searching backward");
+        removed += removeDeadEndUnvisitedNetworks(g, g.createEdgeExplorer(new DefaultEdgeFilter(encoder, false, true)), minNetworkSize, logger);
+        logger.info("removeDeadEndUnvisitedNetworks: backward search completed in " + sw.stop().getSeconds() + "s");
 
         return removed;
     }
@@ -270,7 +270,7 @@ public int compare(K k1, K k2)
         return sortedByValues;
     }
     
-    private static int RemoveDeadEndUnvisitedNetworks(final GraphStorage g, final EdgeExplorer explorer, final int minNetworkSize, final Logger logger)
+    public static int removeDeadEndUnvisitedNetworks(final GraphStorage g, final EdgeExplorer explorer, final int minNetworkSize, final Logger logger)
     {
         final AtomicInteger removed = new AtomicInteger(0);
         
diff --git a/core/src/test/java/com/graphhopper/GraphHopperTest.java b/core/src/test/java/com/graphhopper/GraphHopperTest.java
index 256abbb97f..ea1e50565d 100644
--- a/core/src/test/java/com/graphhopper/GraphHopperTest.java
+++ b/core/src/test/java/com/graphhopper/GraphHopperTest.java
@@ -448,9 +448,12 @@ public void testPrepareOnly()
     public void testVia()
     {
         instance = new GraphHopper().setInMemory(true).
-                setEncodingManager(new EncodingManager("CAR")).
-                setGraphHopperLocation(ghLoc).
-                setOSMFile(testOsm3);
+                init(
+                new CmdArgs().
+                put("prepare.minNetworkSize", "1").
+                put("osmreader.acceptWay", "CAR").
+                put("osmreader.osm", testOsm3)).
+                setGraphHopperLocation(ghLoc);
         instance.importOrLoad();
 
         // A -> B -> C
diff --git a/core/src/test/java/com/graphhopper/routing/util/PrepareRoutingSubnetworksTest.java b/core/src/test/java/com/graphhopper/routing/util/PrepareRoutingSubnetworksTest.java
index f172436b74..8e4fbb93af 100644
--- a/core/src/test/java/com/graphhopper/routing/util/PrepareRoutingSubnetworksTest.java
+++ b/core/src/test/java/com/graphhopper/routing/util/PrepareRoutingSubnetworksTest.java
@@ -17,16 +17,17 @@
  */
 package com.graphhopper.routing.util;
 
-import com.graphhopper.reader.OSMWay;
-import com.graphhopper.storage.Graph;
 import com.graphhopper.storage.GraphBuilder;
 import com.graphhopper.storage.GraphStorage;
 import com.graphhopper.util.EdgeExplorer;
 import com.graphhopper.util.GHUtility;
 import java.util.Arrays;
 import java.util.Map;
+import static javax.swing.text.html.HTML.Tag.I;
 import org.junit.*;
 import static org.junit.Assert.*;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  *
@@ -148,4 +149,51 @@ public void testRemoveSubnetworkIfOnlyOneVehicle()
         g.optimize();
         assertEquals(7, g.getNodes());
     }
+
+    GraphStorage createDeadEndUnvisitedNetworkGraph( EncodingManager em )
+    {
+        GraphStorage g = createGraph(em);
+        // 0 <-> 1 <-> 2 <-> 3 <-> 4 <- 5 <-> 6
+        g.edge(0, 1, 1, true);
+        g.edge(1, 2, 1, true);
+        g.edge(2, 3, 1, true);
+        g.edge(3, 4, 1, true);
+        g.edge(5, 4, 1, false);
+        g.edge(5, 6, 1, true);
+
+        // 7 -> 8 <-> 9 <-> 10
+        g.edge(7, 8, 1, false);
+        g.edge(8, 9, 1, true);
+        g.edge(9, 10, 1, true);
+        return g;
+    }
+
+    @Test
+    public void testRemoveDeadEndUnvisitedNetworksOneWay()
+    {
+        GraphStorage g = createDeadEndUnvisitedNetworkGraph(em);
+        Logger logger = LoggerFactory.getLogger(getClass());
+        FlagEncoder encoder = new EncodingManager("CAR").getSingle();
+
+        EdgeExplorer explorer = g.createEdgeExplorer(new DefaultEdgeFilter(encoder, false, true));
+        int removed = PrepareRoutingSubnetworks.removeDeadEndUnvisitedNetworks(g, explorer, 3, logger);
+        assertEquals(2, removed);
+
+        g.optimize();
+        assertEquals(9, g.getNodes());
+    }
+
+    @Test
+    public void testRemoveDeadEndUnvisitedNetworks()
+    {
+        GraphStorage g = createDeadEndUnvisitedNetworkGraph(em);
+        Logger logger = LoggerFactory.getLogger(getClass());
+        FlagEncoder encoder = new EncodingManager("CAR").getSingle();
+
+        int removed = PrepareRoutingSubnetworks.removeDeadEndUnvisitedNetworks(g, encoder, 3, logger);
+        assertEquals(3, removed);
+
+        g.optimize();
+        assertEquals(8, g.getNodes());
+    }
 }
