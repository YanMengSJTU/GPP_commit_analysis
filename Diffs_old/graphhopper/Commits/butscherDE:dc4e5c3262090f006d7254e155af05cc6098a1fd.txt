diff --git a/core/src/main/java/com/graphhopper/routing/template/PolygonThroughRoutingTemplate.java b/core/src/main/java/com/graphhopper/routing/template/PolygonThroughRoutingTemplate.java
index 34c6783b43..9d4cdc40bc 100644
--- a/core/src/main/java/com/graphhopper/routing/template/PolygonThroughRoutingTemplate.java
+++ b/core/src/main/java/com/graphhopper/routing/template/PolygonThroughRoutingTemplate.java
@@ -2,6 +2,7 @@
 
 import com.graphhopper.GHRequest;
 import com.graphhopper.GHResponse;
+import com.graphhopper.routing.Path;
 import com.graphhopper.routing.template.polygonRoutingUtil.*;
 import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.routing.util.FlagEncoder;
@@ -19,6 +20,7 @@
 public class PolygonThroughRoutingTemplate extends PolygonRoutingTemplate {
     private ManyToManyRouting pathSkeletonRouter;
     private final FlagEncoder flagEncoder;
+    private LOTNodeExtractor lotNodes;
 
     public PolygonThroughRoutingTemplate(GHRequest ghRequest, GHResponse ghRsp, LocationIndex locationIndex,
                                          EncodingManager encodingManager) {
@@ -31,7 +33,7 @@ protected void findCandidateRoutes() {
         final List<Integer> nodesInPolygon = getNodesInPolygon();
         final List<Integer> polygonEntryExitPoints = findPolygonEntryExitPoints(nodesInPolygon);
         final List<Integer> viaPointNodeIds = this.extractNodeIdsFromQueryResults();
-        final LOTNodeExtractor lotNodes = LOTNodeExtractor.createExtractedData(this.graph, this.algoFactory, this.algorithmOptions, viaPointNodeIds, polygonEntryExitPoints);
+        lotNodes = LOTNodeExtractor.createExtractedData(this.graph, this.algoFactory, this.algorithmOptions, viaPointNodeIds, polygonEntryExitPoints);
 
         final List<QueryResult> queryResults = createQueryResults(polygonEntryExitPoints, flagEncoder);
         this.pathSkeletonRouter = new ManyToManyRouting(nodesInPolygon, polygonEntryExitPoints, this.graph, queryResults, this.algoFactory, this.algorithmOptions);
@@ -84,9 +86,14 @@ private void buildRouteCandidatesForCurrentPoint(final int currentViaPoint, fina
         }
     }
 
-    private RouteCandidatePolygon buildCandidatePath(int currentPointID, int nextPointID, int LOTNodeL, int LOTNodeLPrime) {
-        final RouteCandidatePolygon routeCandidate = new RouteCandidatePolygonThrough(this, currentPointID, nextPointID, LOTNodeL, LOTNodeLPrime);
-        routeCandidate.calcPaths();
+    private RouteCandidatePolygon buildCandidatePath(int currentPointID, int nextPointID, int lotNodeL, int lotNodeLPrime) {
+        final Path startToDetourEntry = this.lotNodes.getLotNodePathFor(currentPointID, lotNodeL);
+        final Path detourEntryToDetourExit = this.pathSkeletonRouter.getPathByFromEndNodeID(lotNodeL, lotNodeLPrime);
+        final Path detourExitToEnd = this.lotNodes.getLotNodePathFor(lotNodeLPrime, nextPointID);
+        final Path directRoute = this.getNewRoutingAlgorithm().calcPath(currentPointID, nextPointID);
+
+        final RouteCandidatePolygon routeCandidate = new RouteCandidatePolygon(currentPointID, nextPointID, lotNodeL, lotNodeLPrime, startToDetourEntry, detourEntryToDetourExit,
+                                                                               detourExitToEnd, directRoute);
 
         return routeCandidate;
     }
@@ -126,10 +133,6 @@ private void addToEntryExitIfNotExistentAndNotInPolygon(List<Integer> nodesInPol
         return visitor.getNodesInPolygon();
     }
 
-    public ManyToManyRouting getPathSkeletonRouter() {
-        return this.pathSkeletonRouter;
-    }
-
     private static class NodesInPolygonFindingVisitor extends LocationIndex.Visitor {
         private final List<Integer> nodesInPolygon = new ArrayList<>();
         private final Polygon polygon;
diff --git a/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/LOTNodeExtractor.java b/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/LOTNodeExtractor.java
index da8a4b556d..45ae469e5a 100644
--- a/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/LOTNodeExtractor.java
+++ b/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/LOTNodeExtractor.java
@@ -7,14 +7,13 @@
 import com.graphhopper.storage.Graph;
 import com.graphhopper.util.EdgeExplorer;
 import com.graphhopper.util.EdgeIterator;
-import com.graphhopper.util.StopWatch;
 import javafx.util.Pair;
 import org.locationtech.jts.util.Stopwatch;
 
 import java.util.*;
 
 /**
- * Takes a set of polygon entry exit points as well as a set of via routing points and extracts the local optimal touch nodes for each point.
+ * Takes a set of polygon entry exit points as well as a set of via routing points and extracts the local optimal touch nodes for each via point.
  */
 public class LOTNodeExtractor {
     private final Graph graph;
@@ -50,26 +49,55 @@ public static LOTNodeExtractor createExtractedData(final Graph graph, final Rout
     }
 
     private void extractData() {
-        this.saveDistancesBetweenAllViaPointsAndEntryExitPoints();
+        this.savePathBetweenAllViaPointsAndEntryExitPoints();
         this.saveLOTNodesForEachViaPoint();
     }
 
-    private void saveDistancesBetweenAllViaPointsAndEntryExitPoints() {
-        for (final int viaPoint : this.viaPoints) {
-            for (final int entryExitPoint : this.entryExitPoints) {
-                saveDistanceBetween(viaPoint, entryExitPoint);
-            }
+    private void savePathBetweenAllViaPointsAndEntryExitPoints() {
+        savePathFromStartPoint();
+        savePathFromIntermediatePoints();
+        savePathFromRouteEndpoint();
+    }
+
+    private void savePathFromStartPoint() {
+        final int firstViaPoint = this.viaPoints.get(0);
+        savePathToAllEntryExitPoints(firstViaPoint);
+    }
+
+    private void savePathFromIntermediatePoints() {
+        for (int i = 1; i < this.viaPoints.size() - 2; i++) {
+            final int currentViaPoint = this.viaPoints.get(i);
+            savePathToAllEntryExitPoints(currentViaPoint);
+            savePathFromAllEntryExitPoints(currentViaPoint);
+        }
+    }
+
+    private void savePathFromRouteEndpoint() {
+        final int lastViaPoint = this.viaPoints.get(this.viaPoints.size() - 1);
+        savePathToAllEntryExitPoints(lastViaPoint);
+        savePathFromAllEntryExitPoints(lastViaPoint);
+    }
+
+    private void savePathToAllEntryExitPoints(final int viaPointNodeId) {
+        for (final int entryExitPoint : this.entryExitPoints) {
+            savePathBetween(viaPointNodeId, entryExitPoint);
+        }
+    }
+
+    private void savePathFromAllEntryExitPoints(final int viaPointNodeId) {
+        for (final int entryExitPoint : this.entryExitPoints) {
+            savePathBetween(entryExitPoint, viaPointNodeId);
         }
     }
 
-    private void saveDistanceBetween(final int viaPoint, final int entryExitPoint) {
-        final Path path = this.calcPathBetween(viaPoint, entryExitPoint);
-        this.viaPointToEntryExitPointPath.put(new Pair<>(viaPoint, entryExitPoint), path);
+    private void savePathBetween(final int startNodeId, final int endNodeId) {
+        final Path path = this.calcPathBetween(startNodeId, endNodeId);
+        this.viaPointToEntryExitPointPath.put(new Pair<>(startNodeId, endNodeId), path);
     }
 
-    private Path calcPathBetween(final int viaPoint, final int entryExitPoint) {
+    private Path calcPathBetween(final int startNodeId, final int endNodeId) {
         final RoutingAlgorithm routingAlgorithm = this.routingAlgorithmFactory.createAlgo(graph, algorithmOptions);
-        return routingAlgorithm.calcPath(viaPoint, entryExitPoint);
+        return routingAlgorithm.calcPath(startNodeId, endNodeId);
     }
 
     private void saveLOTNodesForEachViaPoint() {
diff --git a/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidatePolygon.java b/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidatePolygon.java
index 7058251851..5a3736bab1 100644
--- a/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidatePolygon.java
+++ b/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidatePolygon.java
@@ -9,31 +9,26 @@
 /**
  * A route candidate as in Prof. Dr. Sabine Storandts Paper Region-Aware Route Planning.
  */
-public abstract class RouteCandidatePolygon implements Comparable<RouteCandidatePolygon> {
+public class RouteCandidatePolygon implements Comparable<RouteCandidatePolygon> {
     Path startToDetourEntry;
     Path detourEntryToDetourExit;
     Path detourExitToEnd;
     Path directRouteStartEnd;
-    final PolygonRoutingTemplate polygonRoutingTemplate;
     RoutingAlgorithm routingAlgorithm;
     final int startNodeID, endNodeID, polygonEntryNodeID, polygonExitNodeID;
     PathMerge mergedPath = null;
 
-    public RouteCandidatePolygon(final PolygonRoutingTemplate polygonRoutingTemplate, final int startNodeID, final int endNodeID, final int polygonEntryNodeID,
-                                 final int polygonExitNodeID) {
-        this.polygonRoutingTemplate = polygonRoutingTemplate;
-
+    public RouteCandidatePolygon(final int startNodeID, final int endNodeID, final int polygonEntryNodeID,
+                                 final int polygonExitNodeID, final Path startToDetourEntry, final Path detourEntryToDetourExit, final Path detourExitToEnd,
+                                 final Path directRouteStartEnd) {
         this.startNodeID = startNodeID;
         this.endNodeID = endNodeID;
         this.polygonEntryNodeID = polygonEntryNodeID;
         this.polygonExitNodeID = polygonExitNodeID;
-    }
-
-    public abstract void calcPaths();
-
-    void calcDirectRouteFromStartToEnd() {
-        this.routingAlgorithm = this.polygonRoutingTemplate.getNewRoutingAlgorithm();
-        this.directRouteStartEnd = this.routingAlgorithm.calcPath(startNodeID, endNodeID);
+        this.startToDetourEntry = startToDetourEntry;
+        this.detourEntryToDetourExit = detourEntryToDetourExit;
+        this.detourExitToEnd = detourExitToEnd;
+        this.directRouteStartEnd = directRouteStartEnd;
     }
 
     public Path getMergedPath(final QueryGraph queryGraph, final AlgorithmOptions algoOpts) {
diff --git a/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidatePolygonThrough.java b/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidatePolygonThrough.java
deleted file mode 100644
index b795500e6d..0000000000
--- a/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidatePolygonThrough.java
+++ /dev/null
@@ -1,35 +0,0 @@
-package com.graphhopper.routing.template.polygonRoutingUtil;
-
-import com.graphhopper.routing.template.PolygonThroughRoutingTemplate;
-
-public class RouteCandidatePolygonThrough extends RouteCandidatePolygon {
-    private final ManyToManyRouting pathSkeletonRouter;
-
-    public RouteCandidatePolygonThrough(PolygonThroughRoutingTemplate polygonRoutingTemplate, int startNodeID, int endNodeID,
-                                        int polygonEntryNodeID, int polygonExitNodeID) {
-        super(polygonRoutingTemplate, startNodeID, endNodeID, polygonEntryNodeID, polygonExitNodeID);
-        this.pathSkeletonRouter = polygonRoutingTemplate.getPathSkeletonRouter();
-    }
-
-    private void calcPathFromStartToDetourEntry() {
-        this.routingAlgorithm = this.polygonRoutingTemplate.getNewRoutingAlgorithm();
-        this.startToDetourEntry = this.routingAlgorithm.calcPath(startNodeID, polygonEntryNodeID);
-    }
-
-    private void calcDetourPath() {
-        this.detourEntryToDetourExit = this.pathSkeletonRouter.getPathByFromEndNodeID(polygonEntryNodeID, polygonExitNodeID);
-    }
-
-    private void calcPathFromDetourExitToEnd() {
-        this.routingAlgorithm = this.polygonRoutingTemplate.getNewRoutingAlgorithm();
-        this.detourExitToEnd = this.routingAlgorithm.calcPath(polygonExitNodeID, endNodeID);
-    }
-
-    @Override
-    public void calcPaths() {
-        calcPathFromStartToDetourEntry();
-        calcDetourPath();
-        calcPathFromDetourExitToEnd();
-        calcDirectRouteFromStartToEnd();
-    }
-}
diff --git a/core/src/test/java/com/graphhopper/routing/template/PolygonThroughRoutingTemplateTest.java b/core/src/test/java/com/graphhopper/routing/template/PolygonThroughRoutingTemplateTest.java
index 163c349983..63d719fc47 100644
--- a/core/src/test/java/com/graphhopper/routing/template/PolygonThroughRoutingTemplateTest.java
+++ b/core/src/test/java/com/graphhopper/routing/template/PolygonThroughRoutingTemplateTest.java
@@ -14,6 +14,7 @@
 import java.util.List;
 
 import static com.graphhopper.util.Parameters.Routing.*;
+import static org.junit.Assert.assertEquals;
 
 public class PolygonThroughRoutingTemplateTest {
     private final PolygonRoutingTestGraph graphMocker = new PolygonRoutingTestGraph();
@@ -21,11 +22,9 @@
     @Test
     public void quickStartingTest() {
         // Just to let something run
-        GHRequest request = buildRequest(new GHPoint(25, 0), new GHPoint(25, 46));
-        GHResponse response = new GHResponse();
-        final int maxVisitedNodes = this.graphMocker.algorithmHints.getInt(MAX_VISITED_NODES, Integer.MAX_VALUE);
-        final RoutingTemplate routingTemplate = new PolygonThroughRoutingTemplate(request, response, this.graphMocker.locationIndex,
-                                                                                  this.graphMocker.encodingManager);
+        final GHRequest request = buildRequest(new GHPoint(25, 0), new GHPoint(25, 46));
+        final GHResponse response = new GHResponse();
+        final RoutingTemplate routingTemplate = new PolygonThroughRoutingTemplate(request, response, this.graphMocker.locationIndex, this.graphMocker.encodingManager);
         final RoutingAlgorithmFactory algorithmFactory = new RoutingAlgorithmFactorySimple();
         final AlgorithmOptions algorithmOptions = graphMocker.algorithmOptions;
         final QueryGraph queryGraph = createQueryGraph(request, routingTemplate);
@@ -33,6 +32,8 @@ public void quickStartingTest() {
         List<Path> paths = routingTemplate.calcPaths(queryGraph, algorithmFactory, algorithmOptions);
 
         printPath(paths);
+
+        assertEquals(new ArrayList<Integer>(Arrays.asList(new Integer[] {0, 7, 44, 46, 54, 56, 49, 32, 12, 13, 5, 6})), paths.get(0).getNodesInPathOrder());
     }
 
     private QueryGraph createQueryGraph(GHRequest request, RoutingTemplate routingTemplate) {
diff --git a/core/src/test/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidateListTest.java b/core/src/test/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidateListTest.java
index 75b8734fe2..54f9a43a56 100644
--- a/core/src/test/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidateListTest.java
+++ b/core/src/test/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidateListTest.java
@@ -5,8 +5,6 @@
 import com.graphhopper.routing.Path;
 import com.graphhopper.routing.PathMerge;
 import com.graphhopper.routing.QueryGraph;
-import com.graphhopper.routing.template.PolygonRoutingTemplate;
-import com.graphhopper.routing.template.PolygonThroughRoutingTemplate;
 import com.graphhopper.routing.template.util.PolygonRoutingTestGraph;
 import com.graphhopper.routing.weighting.Weighting;
 import com.graphhopper.storage.Graph;
@@ -20,46 +18,52 @@
 public class RouteCandidateListTest {
     private final PolygonRoutingTestGraph graphMocker = new PolygonRoutingTestGraph();
     private final RouteCandidateList<RouteCandidateMocker> candidateList = new RouteCandidateList<>();
-    private final GHRequest ghRequest = new GHRequest(0, 0, 10, 10).setPolygon(new Polygon(new double [] {5, 10, 10, 5}, new double [] {5, 5, 10, 10})).setVehicle("car");
-    private final PolygonThroughRoutingTemplate routingTemplate = new PolygonThroughRoutingTemplate(ghRequest, null, graphMocker.locationIndex,
-                                                                                                    graphMocker.encodingManager);
+    private final GHRequest ghRequest = new GHRequest(0, 0, 10, 10).setPolygon(new Polygon(new double[]{5, 10, 10, 5}, new double[]{5, 5, 10, 10})).setVehicle("car");
 
     private void addTestingCandidates() {
         this.candidateList.getCandidates().clear();
-        this.candidateList.getCandidates().add(new RouteCandidateMocker(routingTemplate, 3, 6, 1, "a"));
-        this.candidateList.getCandidates().get(0).startToDetourEntry = new PathMerge(graphMocker.graph, graphMocker.weighting);
-        this.candidateList.getCandidates().get(0).detourEntryToDetourExit = new PathMerge(graphMocker.graph, graphMocker.weighting);
-        this.candidateList.getCandidates().get(0).detourExitToEnd = new PathMerge(graphMocker.graph, graphMocker.weighting);
-
-        this.candidateList.getCandidates().add(new RouteCandidateMocker(routingTemplate, 2, 3, 1, "b"));
-        this.candidateList.getCandidates().get(1).startToDetourEntry = new PathMerge(graphMocker.graph, graphMocker.weighting);
-        this.candidateList.getCandidates().get(1).detourEntryToDetourExit = new PathMerge(graphMocker.graph, graphMocker.weighting);
-        this.candidateList.getCandidates().get(1).detourExitToEnd = new PathMerge(graphMocker.graph, graphMocker.weighting);
-
-        this.candidateList.getCandidates().add(new RouteCandidateMocker(routingTemplate, 6, 6, 5, "c"));
-        this.candidateList.getCandidates().get(2).startToDetourEntry = new PathMerge(graphMocker.graph, graphMocker.weighting);
-        this.candidateList.getCandidates().get(2).detourEntryToDetourExit = new PathMerge(graphMocker.graph, graphMocker.weighting);
-        this.candidateList.getCandidates().get(2).detourExitToEnd = new PathMerge(graphMocker.graph, graphMocker.weighting);
-
-        this.candidateList.getCandidates().add(new RouteCandidateMocker(routingTemplate, 4, 5, 3, "d"));
-        this.candidateList.getCandidates().get(3).startToDetourEntry = new PathMerge(graphMocker.graph, graphMocker.weighting);
-        this.candidateList.getCandidates().get(3).detourEntryToDetourExit = new PathMerge(graphMocker.graph, graphMocker.weighting);
-        this.candidateList.getCandidates().get(3).detourExitToEnd = new PathMerge(graphMocker.graph, graphMocker.weighting);
-
-        this.candidateList.getCandidates().add(new RouteCandidateMocker(routingTemplate, 8, 4, 6, "e"));
-        this.candidateList.getCandidates().get(4).startToDetourEntry = new PathMerge(graphMocker.graph, graphMocker.weighting);
-        this.candidateList.getCandidates().get(4).detourEntryToDetourExit = new PathMerge(graphMocker.graph, graphMocker.weighting);
-        this.candidateList.getCandidates().get(4).detourExitToEnd = new PathMerge(graphMocker.graph, graphMocker.weighting);
-
-        this.candidateList.getCandidates().add(new RouteCandidateMocker(routingTemplate, 6, 1, 3, "f"));
-        this.candidateList.getCandidates().get(5).startToDetourEntry = new PathMerge(graphMocker.graph, graphMocker.weighting);
-        this.candidateList.getCandidates().get(5).detourEntryToDetourExit = new PathMerge(graphMocker.graph, graphMocker.weighting);
-        this.candidateList.getCandidates().get(5).detourExitToEnd = new PathMerge(graphMocker.graph, graphMocker.weighting);
-
-        this.candidateList.getCandidates().add(new RouteCandidateMocker(routingTemplate, 7, 1, 6, "g"));
-        this.candidateList.getCandidates().get(6).startToDetourEntry = new PathMerge(graphMocker.graph, graphMocker.weighting);
-        this.candidateList.getCandidates().get(6).detourEntryToDetourExit = new PathMerge(graphMocker.graph, graphMocker.weighting);
-        this.candidateList.getCandidates().get(6).detourExitToEnd = new PathMerge(graphMocker.graph, graphMocker.weighting);
+
+        Path startToDetourEntry = new PathMerge(graphMocker.graph, graphMocker.weighting);
+        Path detourEntryToDetourExit = new PathMerge(graphMocker.graph, graphMocker.weighting);
+        Path detourExitToEnd = new PathMerge(graphMocker.graph, graphMocker.weighting);
+        this.candidateList.getCandidates().add(new RouteCandidateMocker(3, 6, 1, "a", startToDetourEntry,
+                                                                        detourEntryToDetourExit, detourExitToEnd, null));
+
+        startToDetourEntry = new PathMerge(graphMocker.graph, graphMocker.weighting);
+        detourEntryToDetourExit = new PathMerge(graphMocker.graph, graphMocker.weighting);
+        detourExitToEnd = new PathMerge(graphMocker.graph, graphMocker.weighting);
+        this.candidateList.getCandidates().add(new RouteCandidateMocker(2, 3, 1, "b", startToDetourEntry,
+                                                                        detourEntryToDetourExit, detourExitToEnd, null));
+
+        startToDetourEntry = new PathMerge(graphMocker.graph, graphMocker.weighting);
+        detourEntryToDetourExit = new PathMerge(graphMocker.graph, graphMocker.weighting);
+        detourExitToEnd = new PathMerge(graphMocker.graph, graphMocker.weighting);
+        this.candidateList.getCandidates().add(new RouteCandidateMocker(6, 6, 5, "c", startToDetourEntry,
+                                                                        detourEntryToDetourExit, detourExitToEnd, null));
+
+        startToDetourEntry = new PathMerge(graphMocker.graph, graphMocker.weighting);
+        detourEntryToDetourExit = new PathMerge(graphMocker.graph, graphMocker.weighting);
+        detourExitToEnd = new PathMerge(graphMocker.graph, graphMocker.weighting);
+        this.candidateList.getCandidates().add(new RouteCandidateMocker(4, 5, 3, "d", startToDetourEntry,
+                                                                        detourEntryToDetourExit, detourExitToEnd, null));
+
+        startToDetourEntry = new PathMerge(graphMocker.graph, graphMocker.weighting);
+        detourEntryToDetourExit = new PathMerge(graphMocker.graph, graphMocker.weighting);
+        detourExitToEnd = new PathMerge(graphMocker.graph, graphMocker.weighting);
+        this.candidateList.getCandidates().add(new RouteCandidateMocker(8, 4, 6, "e", startToDetourEntry,
+                                                                        detourEntryToDetourExit, detourExitToEnd, null));
+
+        startToDetourEntry = new PathMerge(graphMocker.graph, graphMocker.weighting);
+        detourEntryToDetourExit = new PathMerge(graphMocker.graph, graphMocker.weighting);
+        detourExitToEnd = new PathMerge(graphMocker.graph, graphMocker.weighting);
+        this.candidateList.getCandidates().add(new RouteCandidateMocker(6, 1, 3, "f", startToDetourEntry,
+                                                                        detourEntryToDetourExit, detourExitToEnd, null));
+
+        startToDetourEntry = new PathMerge(graphMocker.graph, graphMocker.weighting);
+        detourEntryToDetourExit = new PathMerge(graphMocker.graph, graphMocker.weighting);
+        detourExitToEnd = new PathMerge(graphMocker.graph, graphMocker.weighting);
+        this.candidateList.getCandidates().add(new RouteCandidateMocker(7, 1, 6, "g", startToDetourEntry,
+                                                                        detourEntryToDetourExit, detourExitToEnd, null));
     }
 
     @Test
@@ -93,9 +97,10 @@ public void assertCorrectTopThreeRoutes() {
         final double directDistance;
         final String name;
 
-        RouteCandidateMocker(PolygonRoutingTemplate polygonRoutingTemplate, final double polygonRouteDistance, final double distanceInROI, final double directDistance,
-                             final String name) {
-            super(polygonRoutingTemplate, 0,3,1,2);
+        RouteCandidateMocker(final double polygonRouteDistance, final double distanceInROI, final double directDistance,
+                             final String name, final Path startToDetourEntry, final Path detourEntryToDetourExit, final Path detourExitToEnd,
+                             final Path directRouteStartEnd) {
+            super(0, 3, 1, 2, startToDetourEntry, detourEntryToDetourExit, detourExitToEnd, directRouteStartEnd);
 
             this.polygonRouteDistance = polygonRouteDistance;
             this.roiDistance = distanceInROI;
@@ -104,18 +109,19 @@ public void assertCorrectTopThreeRoutes() {
         }
 
         @Override
-        public void calcPaths() {
-
+        public double getDistance() {
+            return this.polygonRouteDistance;
         }
 
         @Override
-        public double getDistance() { return this.polygonRouteDistance; }
-
-        @Override
-        public double getDistanceInROI() { return this.roiDistance; }
+        public double getDistanceInROI() {
+            return this.roiDistance;
+        }
 
         @Override
-        public double getDetourDistance() { return this.getDistance() - this.directDistance; }
+        public double getDetourDistance() {
+            return this.getDistance() - this.directDistance;
+        }
 
         @Override
         public String toString() {
diff --git a/core/src/test/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidateTest.java b/core/src/test/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidateTest.java
index 7c230053c0..e0c464f55f 100644
--- a/core/src/test/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidateTest.java
+++ b/core/src/test/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidateTest.java
@@ -15,11 +15,8 @@
 import static org.junit.Assert.assertFalse;
 
 public class RouteCandidateTest {
-    private final GHRequest ghRequest = new GHRequest(0, 0, 10, 10).setPolygon(new Polygon(new double [] {5, 10, 10, 5}, new double [] {5, 5, 10, 10})).setVehicle("car");
+    private final GHRequest ghRequest = new GHRequest(0, 0, 10, 10).setPolygon(new Polygon(new double[]{5, 10, 10, 5}, new double[]{5, 5, 10, 10})).setVehicle("car");
     private final PolygonRoutingTestGraph graphMocker = new PolygonRoutingTestGraph();
-    private final PolygonThroughRoutingTemplate routingTemplate = new PolygonThroughRoutingTemplate(ghRequest, null, graphMocker.locationIndex,
-                                                                                                    graphMocker.encodingManager);
-
 
     @Test
     public void testCorrectDistanceMetricsSmaller() {
@@ -53,23 +50,25 @@ public void testCorrectComparision() {
     }
 
     private RouteCandidatePolygon setupSmallerRouteCandidate() {
-        RouteCandidatePolygon test = new RouteCandidatePolygonThrough(routingTemplate, 1, 3, 28, 29);
+        Path startToDetourEntry = createTestSubPath(7, 28, 1);
+        Path detourEntryToDetourExit = createTestSubPath(72, 29, 1).setFromNode(0);
+        Path detourExitToEnd = createTestSubPath(12, 3, 1);
+        Path directRouteStartEnd = createDirectRoute(2);
 
-        test.startToDetourEntry = createTestSubPath(7, 28, 1);
-        test.detourEntryToDetourExit = createTestSubPath(72, 29, 1).setFromNode(0);
-        test.detourExitToEnd = createTestSubPath(12, 3, 1);
-        test.directRouteStartEnd = createDirectRoute(2);
+        RouteCandidatePolygon test = new RouteCandidatePolygon( 1, 3, 28, 29, startToDetourEntry, detourEntryToDetourExit,
+                                                                detourExitToEnd, directRouteStartEnd);
 
         return test;
     }
 
     private RouteCandidatePolygon setupGreaterRouteCandidate() {
-        RouteCandidatePolygon test = new RouteCandidatePolygonThrough(routingTemplate, 1, 3, 28, 29);
+        Path startToDetourEntry = createTestSubPath(7, 28, 2);
+        Path detourEntryToDetourExit = createTestSubPath(72, 29, 2).setFromNode(0);
+        Path detourExitToEnd = createTestSubPath(12, 3, 2);
+        Path directRouteStartEnd = createDirectRoute(5);
 
-        test.startToDetourEntry = createTestSubPath(7, 28, 2);
-        test.detourEntryToDetourExit = createTestSubPath(72, 29, 2).setFromNode(0);
-        test.detourExitToEnd = createTestSubPath(12, 3, 2);
-        test.directRouteStartEnd = createDirectRoute(5);
+        RouteCandidatePolygon test = new RouteCandidatePolygon(1, 3, 28, 29, startToDetourEntry, detourEntryToDetourExit,
+                                                               detourExitToEnd, directRouteStartEnd);
 
         return test;
     }
@@ -110,11 +109,11 @@ public void testSelfintersection() {
     }
 
     private RouteCandidatePolygon setupNonSelfintersectingRouteCandidate() {
-        return createSimpleMergedCandidate(0,3, 0, 3, 8);
+        return createSimpleMergedCandidate(0, 3, 0, 3, 8);
     }
 
     private RouteCandidatePolygon setupSelfintersectingRouteCandidate() {
-        return createSimpleMergedCandidate(0,3, 0, 3, 9, 73, 10, 8);
+        return createSimpleMergedCandidate(0, 3, 0, 3, 9, 73, 10, 8);
     }
 
     private RouteCandidatePolygon createSimpleMergedCandidate(final int from, final int to, final int... edgeIds) {
@@ -125,7 +124,7 @@ private RouteCandidatePolygon createSimpleMergedCandidate(final int from, final
     }
 
     private RouteCandidatePolygon createRouteCandidateWithMergedPath(int from, int to) {
-        RouteCandidatePolygon candidate = new RouteCandidatePolygonThrough(routingTemplate, from, to, -1, -1);
+        RouteCandidatePolygon candidate = new RouteCandidatePolygon(from, to, -1, -1, null, null, null, null);
         candidate.mergedPath = new PathMerge(graphMocker.graph, graphMocker.weighting);
         return candidate;
     }
