diff --git a/core/src/main/java/com/graphhopper/GraphHopper.java b/core/src/main/java/com/graphhopper/GraphHopper.java
index 76e9b46e5e..b2bbfe12cc 100644
--- a/core/src/main/java/com/graphhopper/GraphHopper.java
+++ b/core/src/main/java/com/graphhopper/GraphHopper.java
@@ -907,11 +907,7 @@ public GHResponse route( GHRequest request )
         weighting = createTurnWeighting(weighting, queryGraph, encoder);
 
         String algoStr = request.getAlgorithm().isEmpty() ? AlgorithmOptions.DIJKSTRA_BI : request.getAlgorithm();
-        AlgorithmOptions algoOpts = new AlgorithmOptions().
-                setAlgorithm(algoStr).
-                setTraversalMode(tMode).
-                setFlagEncoder(encoder).
-                setWeighting(weighting);
+        AlgorithmOptions algoOpts = AlgorithmOptions.start().algorithm(algoStr).traversalMode(tMode).flagEncoder(encoder).weighting(weighting).build();
 
         for (int placeIndex = 1; placeIndex < points.size(); placeIndex++)
         {
diff --git a/core/src/main/java/com/graphhopper/routing/AlgorithmOptions.java b/core/src/main/java/com/graphhopper/routing/AlgorithmOptions.java
index 6e1a484606..6cd1313e15 100644
--- a/core/src/main/java/com/graphhopper/routing/AlgorithmOptions.java
+++ b/core/src/main/java/com/graphhopper/routing/AlgorithmOptions.java
@@ -23,7 +23,14 @@
 import com.graphhopper.util.PMap;
 
 /**
- *
+ * The algorithm options. Create an immutable object via:
+ * <pre>
+ * AlgorithmOptions algoOpts = AlgorithmOptions.start().
+ *        algorithm(AlgorithmOptions.DIJKSTRA).
+ *        weighting(weighting).
+ *        build();
+ * </pre>
+ * <p>
  * @author Peter Karich
  */
 public class AlgorithmOptions
@@ -48,12 +55,16 @@
      * Bidirectional A*
      */
     public static final String ASTAR_BI = "astarbi";
-    private String algorithm;
+    private String algorithm = DIJKSTRA_BI;
     private Weighting weighting;
     private TraversalMode traversalMode = TraversalMode.NODE_BASED;
     private FlagEncoder flagEncoder;
     private final PMap hints = new PMap(5);
 
+    private AlgorithmOptions()
+    {
+    }
+
     /**
      * Default traversal mode NODE_BASED is used.
      */
@@ -72,13 +83,6 @@ public AlgorithmOptions( String algorithm, FlagEncoder flagEncoder, Weighting we
         this.traversalMode = tMode;
     }
 
-    /**
-     * This constructor requires to set the flagEncoder, weighting and in most cases also algorithm.
-     */
-    public AlgorithmOptions()
-    {
-    }
-
     /**
      * @return the traversal mode, where node-based is the default.
      */
@@ -87,54 +91,24 @@ public TraversalMode getTraversalMode()
         return traversalMode;
     }
 
-    public AlgorithmOptions setTraversalMode( TraversalMode traversalMode )
-    {
-        if (traversalMode == null)
-            throw new IllegalArgumentException("null as traversal mode is not allowed");
-
-        this.traversalMode = traversalMode;
-        return this;
-    }
-
     public Weighting getWeighting()
     {
         assertNotNull(weighting, "weighting");
         return weighting;
     }
 
-    public AlgorithmOptions setWeighting( Weighting weighting )
-    {
-        this.weighting = weighting;
-        return this;
-    }
-
     public String getAlgorithm()
     {
         assertNotNull(algorithm, "algorithm");
         return algorithm;
     }
 
-    /**
-     * For possible values see AlgorithmOptions.*
-     */
-    public AlgorithmOptions setAlgorithm( String algorithm )
-    {
-        this.algorithm = algorithm;
-        return this;
-    }
-
     public FlagEncoder getFlagEncoder()
     {
         assertNotNull(flagEncoder, "flagEncoder");
         return flagEncoder;
     }
 
-    public AlgorithmOptions setFlagEncoder( FlagEncoder flagEncoder )
-    {
-        this.flagEncoder = flagEncoder;
-        return this;
-    }
-
     public PMap getHints()
     {
         return hints;
@@ -150,5 +124,71 @@ private void assertNotNull( Object optionValue, String optionName )
     public String toString()
     {
         return algorithm + ", " + weighting + ", " + flagEncoder + ", " + traversalMode;
-    }        
+    }
+
+    /**
+     * This method starts the building process for AlgorithmOptions.
+     */
+    public static Builder start()
+    {
+        return new Builder();
+    }
+
+    /**
+     * This method clones the specified AlgorithmOption object with the possibility for further
+     * changes.
+     */
+    public static Builder start( AlgorithmOptions opts )
+    {
+        Builder b = new Builder();
+        if (opts.algorithm != null)
+            b.algorithm(opts.getAlgorithm());
+        if (opts.flagEncoder != null)
+            b.flagEncoder(opts.getFlagEncoder());
+        if (opts.traversalMode != null)
+            b.traversalMode(opts.getTraversalMode());
+        if (opts.weighting != null)
+            b.weighting(opts.getWeighting());
+        return b;
+    }
+
+    public static class Builder
+    {
+        private final AlgorithmOptions opts = new AlgorithmOptions();
+
+        public Builder traversalMode( TraversalMode traversalMode )
+        {
+            if (traversalMode == null)
+                throw new IllegalArgumentException("null as traversal mode is not allowed");
+
+            this.opts.traversalMode = traversalMode;
+            return this;
+        }
+
+        public Builder weighting( Weighting weighting )
+        {
+            this.opts.weighting = weighting;
+            return this;
+        }
+
+        /**
+         * For possible values see AlgorithmOptions.*
+         */
+        public Builder algorithm( String algorithm )
+        {
+            this.opts.algorithm = algorithm;
+            return this;
+        }
+
+        public Builder flagEncoder( FlagEncoder flagEncoder )
+        {
+            this.opts.flagEncoder = flagEncoder;
+            return this;
+        }
+
+        public AlgorithmOptions build()
+        {
+            return opts;
+        }
+    }
 }
diff --git a/core/src/main/java/com/graphhopper/routing/util/TestAlgoCollector.java b/core/src/main/java/com/graphhopper/routing/util/TestAlgoCollector.java
index 6cb4c62be1..8272ba92dd 100644
--- a/core/src/main/java/com/graphhopper/routing/util/TestAlgoCollector.java
+++ b/core/src/main/java/com/graphhopper/routing/util/TestAlgoCollector.java
@@ -57,7 +57,7 @@ public TestAlgoCollector assertDistance( AlgoHelperEntry algoEntry, List<QueryRe
         AlgorithmOptions opts = algoEntry.opts;
         FlagEncoder encoder = opts.getFlagEncoder();
         if (encoder.supports(TurnWeighting.class))
-            opts.setWeighting(new TurnWeighting(opts.getWeighting(), opts.getFlagEncoder(), (TurnCostExtension) queryGraph.getExtension()));
+            algoEntry.setAlgorithmOptions(AlgorithmOptions.start(opts).weighting(new TurnWeighting(opts.getWeighting(), opts.getFlagEncoder(), (TurnCostExtension) queryGraph.getExtension())).build());
 
         for (int i = 0; i < queryList.size() - 1; i++)
         {
@@ -163,6 +163,11 @@ public AlgoHelperEntry( Graph g, AlgorithmOptions opts, LocationIndex idx )
             this.idx = idx;
         }
 
+        public void setAlgorithmOptions( AlgorithmOptions opts )
+        {
+            this.opts = opts;
+        }
+
         public LocationIndex getIdx()
         {
             return idx;
diff --git a/core/src/test/java/com/graphhopper/routing/AbstractRoutingAlgorithmTester.java b/core/src/test/java/com/graphhopper/routing/AbstractRoutingAlgorithmTester.java
index 0eefe6c391..0a2ef22cb2 100644
--- a/core/src/test/java/com/graphhopper/routing/AbstractRoutingAlgorithmTester.java
+++ b/core/src/test/java/com/graphhopper/routing/AbstractRoutingAlgorithmTester.java
@@ -40,9 +40,7 @@
     protected static final EncodingManager encodingManager = new EncodingManager("CAR,FOOT");
     protected FlagEncoder carEncoder = (CarFlagEncoder) encodingManager.getEncoder("CAR");
     protected FlagEncoder footEncoder = (FootFlagEncoder) encodingManager.getEncoder("FOOT");
-    protected AlgorithmOptions defaultOpts = new AlgorithmOptions().
-            setFlagEncoder(carEncoder).
-            setWeighting(new ShortestWeighting());
+    protected AlgorithmOptions defaultOpts = AlgorithmOptions.start().flagEncoder(carEncoder).weighting(new ShortestWeighting()).build();
 
     protected Graph createGraph( EncodingManager em, boolean is3D )
     {
@@ -89,9 +87,8 @@ public void testCalcFastestPath()
 
         Graph graphFastest = createGraph(false);
         initDirectedAndDiffSpeed(graphFastest);
-        Path p2 = createAlgo(graphFastest, new AlgorithmOptions().
-                setFlagEncoder(carEncoder).
-                setWeighting(new FastestWeighting(carEncoder))).
+        Path p2 = createAlgo(graphFastest, 
+                AlgorithmOptions.start().flagEncoder(carEncoder).weighting(new FastestWeighting(carEncoder)).build()).
                 calcPath(0, 3);
         assertEquals(Helper.createTList(0, 4, 6, 7, 5, 3), p2.calcNodes());
         assertEquals(p2.toString(), 1261.714, p2.getDistance(), 1e-6);
@@ -144,9 +141,7 @@ public void testCalcFootPath()
     {
         Graph graphShortest = createGraph(false);
         initFootVsCar(graphShortest);
-        Path p1 = createAlgo(graphShortest, new AlgorithmOptions().
-                setFlagEncoder(footEncoder).
-                setWeighting(new ShortestWeighting())).
+        Path p1 = createAlgo(graphShortest, AlgorithmOptions.start().flagEncoder(footEncoder).weighting(new ShortestWeighting()).build()).
                 calcPath(0, 7);
         assertEquals(p1.toString(), 17000, p1.getDistance(), 1e-6);
         assertEquals(p1.toString(), 12240 * 1000, p1.getMillis());
@@ -611,7 +606,7 @@ Path calcPathViaQuery( String weighting, Graph graph, double fromLat, double fro
             w = new FastestWeighting(carEncoder);
 
         // correct order for CH: in factory do prepare and afterwards wrap in query graph
-        AlgorithmOptions opts = new AlgorithmOptions().setFlagEncoder(carEncoder).setWeighting(w);
+        AlgorithmOptions opts = AlgorithmOptions.start().flagEncoder(carEncoder).weighting(w).build();
         RoutingAlgorithmFactory factory = createFactory(graph, opts);
         QueryGraph qGraph = new QueryGraph(graph).lookup(from, to);
         return factory.createAlgo(qGraph, opts).
@@ -663,8 +658,7 @@ public void testTwoWeightsPerEdge()
 
         // for two weights per edge it happened that Path (and also the Weighting) read the wrong side 
         // of the speed and read 0 => infinity weight => overflow of millis => negative millis!
-        Path p = createAlgo(graph, new AlgorithmOptions().setFlagEncoder(encoder).
-                setWeighting(new FastestWeighting(encoder))).calcPath(0, 10);
+        Path p = createAlgo(graph, AlgorithmOptions.start().flagEncoder(encoder).weighting(new FastestWeighting(encoder)).build()).calcPath(0, 10);
 //        assertEquals(Helper.createTList(13, 0, 1, 2, 11, 7, 10, 12), p.calcNodes());
         assertEquals(85124371, p.getMillis());
         assertEquals(425622, p.getDistance(), 1);
@@ -715,7 +709,7 @@ else if (adj == 4)
         QueryResult from = newQR(graph, 3, 0);
         QueryResult to = newQR(graph, 10, 9);
 
-        AlgorithmOptions opts = new AlgorithmOptions().setFlagEncoder(carEncoder).setWeighting(fakeWeighting);
+        AlgorithmOptions opts = AlgorithmOptions.start().flagEncoder(carEncoder).weighting(fakeWeighting).build();
         RoutingAlgorithmFactory factory = createFactory(graph, opts);
         QueryGraph qGraph = new QueryGraph(graph).lookup(from, to);
         p = factory.createAlgo(qGraph, opts).calcPath(from.getClosestNode(), to.getClosestNode());
diff --git a/core/src/test/java/com/graphhopper/routing/EdgeBasedRoutingAlgorithmTest.java b/core/src/test/java/com/graphhopper/routing/EdgeBasedRoutingAlgorithmTest.java
index 060bdead47..9ad40f5555 100644
--- a/core/src/test/java/com/graphhopper/routing/EdgeBasedRoutingAlgorithmTest.java
+++ b/core/src/test/java/com/graphhopper/routing/EdgeBasedRoutingAlgorithmTest.java
@@ -74,10 +74,10 @@ public EdgeBasedRoutingAlgorithmTest( String algo )
 
     public RoutingAlgorithm createAlgo( Graph g, AlgorithmOptions opts )
     {
-        opts.setAlgorithm(algoStr);
+        opts = AlgorithmOptions.start(opts).algorithm(algoStr).build();
         return new RoutingAlgorithmFactorySimple().createAlgo(g, opts);
     }
-    
+
     protected GraphStorage createGraph( EncodingManager em )
     {
         return new GraphBuilder(em).create();
@@ -142,25 +142,16 @@ public void testBasicTurnRestriction()
         initGraph(g);
         TurnCostExtension tcs = (TurnCostExtension) g.getExtension();
         initTurnRestrictions(g, tcs, carEncoder);
-        Path p = createAlgo(g, new AlgorithmOptions().
-                setFlagEncoder(carEncoder).
-                setWeighting(createWeighting(carEncoder, tcs)).
-                setTraversalMode(TraversalMode.EDGE_BASED_2DIR)).
+        Path p = createAlgo(g, AlgorithmOptions.start().flagEncoder(carEncoder).weighting(createWeighting(carEncoder, tcs)).traversalMode(TraversalMode.EDGE_BASED_2DIR).build()).
                 calcPath(5, 1);
         assertEquals(Helper.createTList(5, 2, 3, 4, 7, 6, 3, 1), p.calcNodes());
 
         // test 7-6-5 and reverse
-        p = createAlgo(g, new AlgorithmOptions().
-                setFlagEncoder(carEncoder).
-                setWeighting(createWeighting(carEncoder, tcs)).
-                setTraversalMode(TraversalMode.EDGE_BASED_1DIR)).
+        p = createAlgo(g, AlgorithmOptions.start().flagEncoder(carEncoder).weighting(createWeighting(carEncoder, tcs)).traversalMode(TraversalMode.EDGE_BASED_1DIR).build()).
                 calcPath(5, 7);
         assertEquals(Helper.createTList(5, 6, 7), p.calcNodes());
 
-        p = createAlgo(g, new AlgorithmOptions().
-                setFlagEncoder(carEncoder).
-                setWeighting(createWeighting(carEncoder, tcs)).
-                setTraversalMode(TraversalMode.EDGE_BASED_1DIR)).
+        p = createAlgo(g, AlgorithmOptions.start().flagEncoder(carEncoder).weighting(createWeighting(carEncoder, tcs)).traversalMode(TraversalMode.EDGE_BASED_1DIR).build()).
                 calcPath(7, 5);
         assertEquals(Helper.createTList(7, 6, 3, 2, 5), p.calcNodes());
     }
@@ -182,21 +173,15 @@ public void testUTurns()
 
         tcs.addTurnInfo(6, getEdge(g, 7, 6).getEdge(), getEdge(g, 6, 5).getEdge(), tflags);
         tcs.addTurnInfo(3, getEdge(g, 4, 3).getEdge(), e3_6.getEdge(), tflags);
-        Path p = createAlgo(g, 
-                new AlgorithmOptions().
-                setFlagEncoder(carEncoder).
-                setWeighting(createWeighting(carEncoder, tcs)).
-                setTraversalMode(TraversalMode.EDGE_BASED_2DIR_UTURN)).
+        Path p = createAlgo(g,
+                AlgorithmOptions.start().flagEncoder(carEncoder).weighting(createWeighting(carEncoder, tcs)).traversalMode(TraversalMode.EDGE_BASED_2DIR_UTURN).build()).
                 calcPath(7, 5);
 
         assertEquals(Helper.createTList(7, 6, 3, 6, 5), p.calcNodes());
 
         // no u-turn    from 6-3
         tcs.addTurnInfo(3, getEdge(g, 6, 3).getEdge(), getEdge(g, 3, 6).getEdge(), tflags);
-        p = createAlgo(g, new AlgorithmOptions().
-                setFlagEncoder(carEncoder).
-                setWeighting(createWeighting(carEncoder, tcs)).
-                setTraversalMode(TraversalMode.EDGE_BASED_2DIR_UTURN)).
+        p = createAlgo(g, AlgorithmOptions.start().flagEncoder(carEncoder).weighting(createWeighting(carEncoder, tcs)).traversalMode(TraversalMode.EDGE_BASED_2DIR_UTURN).build()).
                 calcPath(7, 5);
 
         assertEquals(Helper.createTList(7, 6, 3, 2, 5), p.calcNodes());
@@ -208,10 +193,7 @@ public void testBasicTurnCosts()
         GraphStorage g = createGraph(createEncodingManager(false));
         initGraph(g);
         TurnCostExtension tcs = (TurnCostExtension) g.getExtension();
-        Path p = createAlgo(g, new AlgorithmOptions().
-                setFlagEncoder(carEncoder).
-                setWeighting(createWeighting(carEncoder, tcs)).
-                setTraversalMode(TraversalMode.EDGE_BASED_1DIR)).
+        Path p = createAlgo(g, AlgorithmOptions.start().flagEncoder(carEncoder).weighting(createWeighting(carEncoder, tcs)).traversalMode(TraversalMode.EDGE_BASED_1DIR).build()).
                 calcPath(5, 1);
 
         // no restriction and costs
@@ -223,10 +205,7 @@ public void testBasicTurnCosts()
         long tflags = carEncoder.getTurnFlags(false, 2);
         tcs.addTurnInfo(2, getEdge(g, 5, 2).getEdge(), getEdge(g, 2, 3).getEdge(), tflags);
 
-        p = createAlgo(g, new AlgorithmOptions().
-                setFlagEncoder(carEncoder).
-                setWeighting(createWeighting(carEncoder, tcs)).
-                setTraversalMode(TraversalMode.EDGE_BASED_1DIR)).
+        p = createAlgo(g, AlgorithmOptions.start().flagEncoder(carEncoder).weighting(createWeighting(carEncoder, tcs)).traversalMode(TraversalMode.EDGE_BASED_1DIR).build()).
                 calcPath(5, 1);
         assertEquals(Helper.createTList(5, 6, 3, 1), p.calcNodes());
     }
diff --git a/core/src/test/java/com/graphhopper/routing/RoutingAlgorithmIT.java b/core/src/test/java/com/graphhopper/routing/RoutingAlgorithmIT.java
index a060936355..e0ba038f66 100644
--- a/core/src/test/java/com/graphhopper/routing/RoutingAlgorithmIT.java
+++ b/core/src/test/java/com/graphhopper/routing/RoutingAlgorithmIT.java
@@ -563,10 +563,7 @@ public void testMonacoParallel() throws IOException
                         public void run()
                         {
                             OneRun oneRun = instances.get(instanceIndex);
-                            AlgorithmOptions opts = new AlgorithmOptions().
-                                    setFlagEncoder(carEncoder).
-                                    setWeighting(weighting).
-                                    setAlgorithm(algoStr);
+                            AlgorithmOptions opts = AlgorithmOptions.start().flagEncoder(carEncoder).weighting(weighting).algorithm(algoStr).build();
                             testCollector.assertDistance(new AlgoHelperEntry(g, opts, idx),
                                     oneRun.getList(idx, filter), oneRun);
                             integ.addAndGet(1);
diff --git a/core/src/test/java/com/graphhopper/routing/ch/DijkstraBidirectionCHTest.java b/core/src/test/java/com/graphhopper/routing/ch/DijkstraBidirectionCHTest.java
index 154af81dea..5f0e744c8b 100644
--- a/core/src/test/java/com/graphhopper/routing/ch/DijkstraBidirectionCHTest.java
+++ b/core/src/test/java/com/graphhopper/routing/ch/DijkstraBidirectionCHTest.java
@@ -74,8 +74,6 @@ public RoutingAlgorithm createAlgo( Graph g, AlgorithmOptions opts )
     @Override
     public RoutingAlgorithmFactory createFactory( Graph g, AlgorithmOptions opts )
     {
-        // set default opts for factory.createAlgo
-        opts.setAlgorithm(AlgorithmOptions.DIJKSTRA_BI);
         PrepareContractionHierarchies ch = new PrepareContractionHierarchies((LevelGraph) g,
                 opts.getFlagEncoder(), opts.getWeighting(), TraversalMode.NODE_BASED);
         // hack: prepare matrixGraph only once
