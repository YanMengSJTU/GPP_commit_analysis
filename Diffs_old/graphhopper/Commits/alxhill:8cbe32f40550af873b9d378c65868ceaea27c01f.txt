diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/Vehicle.java b/marmoset/src/main/java/com/graphhopper/marmoset/Vehicle.java
index 43bbcfda69..e7d5daa22c 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/Vehicle.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/Vehicle.java
@@ -55,6 +55,12 @@ public boolean isFinished()
         return finished;
     }
 
+    private void finish(String error)
+    {
+        logger.error(error);
+        finished = true;
+    }
+
     public void init()
     {
         cellId = 0; // TODO: figure out which cell the vehicle should start at
@@ -69,8 +75,13 @@ public void init()
         List<Path> paths = gh.calcPaths(ghRequest, ghResponse);
         if (ghResponse.hasErrors())
         {
-            logger.error("Routing failed:" + ghResponse.getErrors().stream().map(Throwable::toString).collect(Collectors.joining("\n")));
-            finished = true;
+            finish("Routing failed:" + ghResponse.getErrors().stream().map(Throwable::toString).collect(Collectors.joining("\n")));
+            return;
+        }
+
+        if (paths.size() == 0)
+        {
+            finish("No path found");
             return;
         }
 
@@ -78,6 +89,12 @@ public void init()
         // start from 1 to avoid the 'fake' edge added by the query graph
         edgeIndex = 1;
 
+        if (edgeList.size() <= 1)
+        {
+            finish("Edge list too short");
+            return;
+        }
+
         EdgeIteratorState e = edgeList.get(edgeIndex);
         int maxId = edgeList.stream().mapToInt(EdgeIteratorState::getEdge).max().getAsInt();
         int minId = edgeList.stream().mapToInt(EdgeIteratorState::getEdge).min().getAsInt();
