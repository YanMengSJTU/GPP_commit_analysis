diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/Marmoset.java b/marmoset/src/main/java/com/graphhopper/marmoset/Marmoset.java
index 1b03429bcf..0c2e5356a6 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/Marmoset.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/Marmoset.java
@@ -1,4 +1,5 @@
 package com.graphhopper.marmoset;
+
 import fi.iki.elonen.NanoHTTPD;
 import fi.iki.elonen.SimpleWebServer;
 import org.slf4j.Logger;
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetHopper.java b/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetHopper.java
index 9c9d6182a1..f13e47f99d 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetHopper.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetHopper.java
@@ -4,6 +4,7 @@
 import com.graphhopper.marmoset.util.CellGraph;
 import com.graphhopper.marmoset.util.Location;
 import com.graphhopper.marmoset.vehicle.DijkstraVehicle;
+import com.graphhopper.marmoset.vehicle.RandomVehicle;
 import com.graphhopper.marmoset.vehicle.Vehicle;
 import com.graphhopper.util.CmdArgs;
 import org.slf4j.Logger;
@@ -11,7 +12,8 @@
 
 import java.io.IOException;
 import java.nio.ByteBuffer;
-import java.util.*;
+import java.util.ArrayList;
+import java.util.List;
 import java.util.stream.Collectors;
 import java.util.stream.IntStream;
 
@@ -59,7 +61,11 @@ public void init()
 
     public synchronized void addVehicle()
     {
-        Vehicle v = new DijkstraVehicle(this, Location.randLondon(), Location.randCentralLondon());
+        Vehicle v;
+        if (Math.random() < 0.2)
+            v = new DijkstraVehicle(this, Location.randLondon(), Location.randCentralLondon());
+        else
+            v = new RandomVehicle(this, Location.randLondon(), Location.randCentralLondon());
         v.init();
         if (v.isFinished())
             addVehicle();
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/util/CellIterator.java b/marmoset/src/main/java/com/graphhopper/marmoset/util/CellIterator.java
index d2936ac102..93d88a6d98 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/util/CellIterator.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/util/CellIterator.java
@@ -1,6 +1,5 @@
 package com.graphhopper.marmoset.util;
 
-import com.graphhopper.marmoset.vehicle.DijkstraVehicleIterator;
 import com.graphhopper.marmoset.vehicle.VehicleIterator;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/BaseVehicle.java b/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/BaseVehicle.java
index e0208e02a6..784215a260 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/BaseVehicle.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/BaseVehicle.java
@@ -1,10 +1,12 @@
 package com.graphhopper.marmoset.vehicle;
 
 import com.graphhopper.marmoset.MarmosetHopper;
-import com.graphhopper.marmoset.util.CellIterator;
 import com.graphhopper.marmoset.util.CellGraph;
+import com.graphhopper.marmoset.util.CellIterator;
 import com.graphhopper.marmoset.util.Location;
-import com.graphhopper.util.*;
+import com.graphhopper.util.DistanceCalc;
+import com.graphhopper.util.DistanceCalc2D;
+import com.graphhopper.util.PointList;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/DijkstraVehicle.java b/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/DijkstraVehicle.java
index 7fef6ec0a9..bc346bcd84 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/DijkstraVehicle.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/DijkstraVehicle.java
@@ -32,7 +32,7 @@ public VehicleIterator getVehicleIterator()
         List<Path> paths = gh.calcPaths(ghRequest, ghResponse);
         if (ghResponse.hasErrors())
         {
-            finish("Routing failed:" + ghResponse.getErrors().stream().map(Throwable::toString).collect(Collectors.joining("\n")));
+            finish("Routing failed (id "+id+"):" + ghResponse.getErrors().stream().map(Throwable::toString).collect(Collectors.joining("\n")));
             return null;
         }
 
@@ -54,4 +54,5 @@ public VehicleIterator getVehicleIterator()
         FlagEncoder carEncoder = gh.getEncodingManager().getEncoder("car");
         return new DijkstraVehicleIterator(edgeList, carEncoder);
     }
+
 }
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/RandomVehicle.java b/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/RandomVehicle.java
new file mode 100644
index 0000000000..ab52efd6b0
--- /dev/null
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/RandomVehicle.java
@@ -0,0 +1,34 @@
+package com.graphhopper.marmoset.vehicle;
+
+import com.graphhopper.GraphHopper;
+import com.graphhopper.marmoset.MarmosetHopper;
+import com.graphhopper.marmoset.util.Location;
+import com.graphhopper.routing.util.EdgeFilter;
+import com.graphhopper.routing.util.FlagEncoder;
+import com.graphhopper.storage.index.LocationIndex;
+import com.graphhopper.storage.index.QueryResult;
+
+/**
+ * Created by alexander on 23/03/2016.
+ */
+public class RandomVehicle extends BaseVehicle {
+
+    public RandomVehicle(MarmosetHopper hopper, Location start, Location dest)
+    {
+        super(hopper, start, dest);
+    }
+
+    @Override
+    public VehicleIterator getVehicleIterator()
+    {
+        GraphHopper gh = hopper.getGraphHopper();
+        LocationIndex index = gh.getLocationIndex();
+
+        QueryResult qr = index.findClosest(loc.getLat(), loc.getLon(), EdgeFilter.ALL_EDGES);
+
+        FlagEncoder carEncoder = gh.getEncodingManager().getEncoder("car");
+
+        return new RandomVehicleIterator(qr.getClosestEdge(), carEncoder, gh.getGraphHopperStorage());
+    }
+
+}
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/RandomVehicleIterator.java b/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/RandomVehicleIterator.java
index 6075801c7a..7faf17caca 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/RandomVehicleIterator.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/RandomVehicleIterator.java
@@ -36,14 +36,23 @@ public boolean hasNext()
     @Override
     public boolean next()
     {
-        EdgeIterator it = edgeExplorer.setBaseNode(edge.getBaseNode());
+        EdgeIterator it = edgeExplorer.setBaseNode(edge.getAdjNode());
         int i = 0;
         while (it.next())
+            i++;
+
+        int travelId = (int) (i * Math.random());
+
+        it = edgeExplorer.setBaseNode(edge.getBaseNode());
+        while (travelId >= 0)
         {
-            logger.info("random vehicle edge number " + i);
+            travelId--;
+            it.next();
         }
 
-        return false;
+        edge = it;
+
+        return true;
     }
 
     @Override
