diff --git a/acceptancetesting/src/test/cucumber/Routing-Exeter-Errors.feature b/acceptancetesting/src/test/cucumber/Routing-Exeter-Errors.feature
index dad0440fd8..3b0ba15e63 100644
--- a/acceptancetesting/src/test/cucumber/Routing-Exeter-Errors.feature
+++ b/acceptancetesting/src/test/cucumber/Routing-Exeter-Errors.feature
@@ -377,6 +377,40 @@ Feature: Verify Error Messages for Vehicle Routing Service (Exeter)
       | car         |            | fastest   | GET        | json           | OK                 | 200        |
       | car         |            | fastest   | OPTIONS    | json           | OK                 | 200        |
 
+  @Routing
+  Scenario Outline: Verify  a route for non-emergencey services on a(Transit through Springfield-private true )
+    Given I have route point as
+      | pointA              | pointB              |
+      | 50.733653,-3.523541 | 50.732695,-3.520218 |
+    And I have vehicle as "emv"
+    And I have private as "true"
+    And I have srs as "BNG"
+    And I have output_srs as "WGS84"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | errorMessage                             | statusCode |
+      | Cannot find point 0: 50.733653,-3.523541 | 400        |
+
+  @Routing
+  Scenario Outline: Verify  a route for non-emergencey services on a(Transit through Springfield-private true )
+    Given I have route point as
+      | pointA       | pointB       |
+      | 93778,292579 | 93667,292811 |
+    And I have vehicle as "car"
+    And I have private as "true"
+    And I have srs as "WGS84"
+    And I have output_srs as "BNG"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | errorMessage                      | statusCode |
+      | Cannot find point 0: 93778,292579 | 400        |
+
   # Nearest Point : Invalid Parameter Value "point"
   @ErrorMessages
   Scenario Outline: Verify  nearest point of point using NearestPoint API
@@ -622,7 +656,7 @@ Feature: Verify Error Messages for Vehicle Routing Service (Exeter)
     And I have instructions as "true"
     And I have algorithm as "astar"
     And I have type as "json"
-    And I have type as "<SRS>"
+    And I have srs as "<SRS>"
     When I request for a route
     Then I should be able to verify the http response message as "OK"
     Then I should be able to verify the http statuscode as "200"
diff --git a/acceptancetesting/src/test/cucumber/Routing-Exeter.feature b/acceptancetesting/src/test/cucumber/Routing-Exeter.feature
index 2039cb953c..495d726040 100644
--- a/acceptancetesting/src/test/cucumber/Routing-Exeter.feature
+++ b/acceptancetesting/src/test/cucumber/Routing-Exeter.feature
@@ -1313,7 +1313,8 @@ Feature: Verify a route from A to B
     Examples: 
       | vehicleType | avoidances | routeType |
       | car         |            | fastest   |
-@Routing
+
+  @Routing
   Scenario Outline: Verify  a route for non-emergencey services on a(End on Clinton road-private false )
     Given I have route point as
       | pointA              | pointB              |
@@ -1357,24 +1358,84 @@ Feature: Verify a route from A to B
     And I have private as "true"
     When I request for a route
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco          | waypointdesc                     | azimuth | direction | time  | distance | avoidance |
-      | 2             | 50.733764,-3.523212 | Turn right onto VICTORIA STREET | 150.0   | SE         | 17884 | 213.6    |           |
+      | wayPointIndex | waypointco          | waypointdesc                    | azimuth | direction | time  | distance | avoidance |
+      | 2             | 50.733764,-3.523212 | Turn right onto VICTORIA STREET | 150.0   | SE        | 17884 | 213.6    |           |
+
     Examples: 
       | vehicleType | avoidances | routeType |
       | car         |            | fastest   |
 
-@Routing
+  @Routing
   Scenario Outline: Verify  a route for non-emergencey services on a(Not to transit through Springfield-private false )
     Given I have route point as
-      | pointA              | pointB              |
-      | 50.73384,-3.522834 | 50.732806,-3.521275|
+      | pointA             | pointB              |
+      | 50.73384,-3.522834 | 50.732806,-3.521275 |
     And I have vehicle as "<vehicleType>"
     And I have weighting as "<routeType>"
-   And I have private as "false"
-   When I request for a route
+    And I have private as "false"
+    When I request for a route
     Then I should be able to verify the response message as "Not found"
     Then I should be able to verify the statuscode as "400"
 
     Examples: 
       | vehicleType | avoidances | routeType |
-      | car         |            | fastest   |
\ No newline at end of file
+      | car         |            | fastest   |
+
+  # BNG  and WGS84 Projections
+  @Routing
+  Scenario: Verify  a route for non-emergencey services on a(Transit through Springfield-private true )
+    Given I have route point as
+      | pointA              | pointB              |
+      | 50.733653,-3.523541 | 50.732695,-3.520218 |
+    And I have vehicle as "<vehicleType>"
+    And I have weighting as "<routeType>"
+    And I have private as "true"
+    And I have srs as "WGS84"
+    And I have output_srs as "WGS84"
+    When I request for a route
+    Then I should be able to verify the waypoints on the route map:
+      | wayPointIndex | waypointco          | waypointdesc                    | azimuth | direction | time | distance | avoidance |
+      | 2             | 50.733764,-3.523212 | Turn right onto VICTORIA STREET | 150.0   | SE        | 7186 | 213.6    |           |
+
+  @Routing
+  Scenario: Verify  a route for non-emergencey services on a(Transit through Springfield-private true )
+    Given I have route point as
+      | pointA       | pointB       |
+      | 292575,93781 | 292736,93681 |
+    And I have vehicle as "<vehicleType>"
+    And I have weighting as "<routeType>"
+    And I have private as "true"
+    And I have srs as "BNG"
+    And I have output_srs as "BNG"
+    When I request for a route
+    Then I should be able to verify the waypoints on the route map:
+      | wayPointIndex | waypointco                 | waypointdesc                    | azimuth | direction | time | distance | avoidance |
+      | 2             | 292602.008429,93789.988765 | Turn right onto VICTORIA STREET | 150.0   | SE        | 7186 | 213.6    |           |
+
+  @Routing @Current
+  Scenario: Verify  a route for non-emergencey services on a(Transit through Springfield-private true )
+    Given I have route point as
+      | pointA              | pointB              |
+      | 50.733653,-3.523541 | 50.732695,-3.520218 |
+    And I have vehicle as "emv"
+    And I have private as "true"
+    And I have srs as "WGS84"
+    And I have output_srs as "BNG"
+    When I request for a route
+    Then I should be able to verify the waypoints on the route map:
+      | wayPointIndex | waypointco                  | waypointdesc                    | azimuth | direction | time | distance | avoidance |
+      | 2             | 292602.008429, 93789.988765 | Turn right onto VICTORIA STREET | 150.0   | SE        | 7186 | 213.6    |           |
+
+  @Routing @Current
+  Scenario: Verify  a route for non-emergencey services on a(Not to transit through Springfield-private false )
+    Given I have route point as
+      | pointA       | pointB       |
+      | 292629,93798 | 292736,93681 |
+    And I have vehicle as "car"
+    And I have private as "true"
+    And I have srs as "BNG"
+    And I have output_srs as "WGS84"
+    When I request for a route
+    Then I should be able to verify the waypoints on the route map:
+      | wayPointIndex | waypointco          | waypointdesc                    | azimuth | direction | time | distance | avoidance |
+      | 2             | 50.734191,-3.521511 | Turn right onto CULVERLAND ROAD | 158.0   | SE        | 6009 | 178.6    |           |
diff --git a/acceptancetesting/src/test/cucumber/Routing-PeakDistrict-Errors.feature b/acceptancetesting/src/test/cucumber/Routing-PeakDistrict-Errors.feature
index fd9159c86a..dee795a545 100644
--- a/acceptancetesting/src/test/cucumber/Routing-PeakDistrict-Errors.feature
+++ b/acceptancetesting/src/test/cucumber/Routing-PeakDistrict-Errors.feature
@@ -377,6 +377,38 @@ Feature: Verify Error Messages for non-vehicle Routing service (Peak District)
       | mtb         |            | fastest   | GET        | json           | OK                 | 200        |
       | foot        |            | fastest   | OPTIONS    | json           | OK                 | 200        |
 
+  @Routing
+  Scenario Outline: Invalid Parameter Value for "point in BNG"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 51.206305,-3.683483 | 51.195761,-3.848208 |
+    And I have vehicle as "foot"
+    And I have srs as "BNG"
+    And I have output_srs as "BNG"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | errorMessage                             | statusCode |
+      | Cannot find point 0: 51.206305,-3.683483 | 400        |
+
+  @Routing
+  Scenario Outline: Invalid Parameter Value for "point in WGS84"
+    Given I have route point as
+      | pointA        | pointB        |
+      | 146580,282492 | 145684,270956 |
+    And I have vehicle as "mtb"
+    And I have srs as "WGS84"
+    And I have output_srs as "WGS84"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | errorMessage                       | statusCode |
+      | Cannot find point 0: 146580,282492 | 400        |
+
   # Nearest Point : Invalid Parameter Value "point"
   @ErrorMessages
   Scenario Outline: Verify  nearest point of point using NearestPoint API
diff --git a/core/pom.xml b/core/pom.xml
index 7a1bb5f1f8..5ccb5f982a 100644
--- a/core/pom.xml
+++ b/core/pom.xml
@@ -5,7 +5,7 @@
     <groupId>com.graphhopper</groupId>
     <artifactId>graphhopper</artifactId>
     <name>GraphHopper</name>
-    <version>0.8-SNAPSHOT</version>
+    <version>1.20-SNAPSHOT</version>
     <packaging>jar</packaging> 
     <description>
         GraphHopper is a fast and memory efficient Java road routing engine 
@@ -14,7 +14,7 @@
     <parent>
         <groupId>com.graphhopper</groupId>
         <artifactId>graphhopper-parent</artifactId>    	
-        <version>0.8-SNAPSHOT</version>
+        <version>1.20-SNAPSHOT</version>
     </parent>
         
     <properties>  
diff --git a/core/src/main/java/com/graphhopper/routing/util/EscapePrivateWeighting.java b/core/src/main/java/com/graphhopper/routing/util/EscapePrivateWeighting.java
index 98d67923cb..63b36d89af 100644
--- a/core/src/main/java/com/graphhopper/routing/util/EscapePrivateWeighting.java
+++ b/core/src/main/java/com/graphhopper/routing/util/EscapePrivateWeighting.java
@@ -37,11 +37,9 @@ public double getMinWeight( double distance )
 	@Override
 	public double calcWeight( EdgeIteratorState edgeState, boolean reverse, int prevOrNextEdgeId )
 	{
-		System.err.println(edgeState.getClass() + ":" + edgeState.toString());
 		double calcWeight = innerWeighting.calcWeight(edgeState, reverse, prevOrNextEdgeId);
 		if(encoder.getLong(edgeState.getFlags(), KEY)>0) {
 			EdgeIteratorState edgeProps=null;
-			System.err.println("EDGE"+ edgeState.getEdge()+":PREVNEXT"  + prevOrNextEdgeId);
 			if(!isStartOrEnd(edgeState) && prevOrNextEdgeId>EdgeIterator.NO_EDGE) {
 				edgeProps = graph.getEdgeProps(prevOrNextEdgeId, Integer.MIN_VALUE);
 			}
@@ -52,7 +50,6 @@ public double calcWeight( EdgeIteratorState edgeState, boolean reverse, int prev
 				calcWeight = Double.POSITIVE_INFINITY;
 			}
 		}
-		System.err.println("WEIGHT:" +calcWeight);
 		return calcWeight;
 	}
 
@@ -61,7 +58,6 @@ private boolean isStartOrEnd( EdgeIteratorState edgeState )
 	    int baseNode = edgeState.getBaseNode();
 		int adjNode = edgeState.getAdjNode();
 		boolean startEnd = baseNode == start  || baseNode == end  || adjNode == start || adjNode == end;
-		System.err.println("STARTEND:" + startEnd + ":" + edgeState.toString());
 		return startEnd;
     }
 
diff --git a/core/src/main/java/com/graphhopper/util/shapes/GHPoint.java b/core/src/main/java/com/graphhopper/util/shapes/GHPoint.java
index e3b972d5ea..35f11d20aa 100644
--- a/core/src/main/java/com/graphhopper/util/shapes/GHPoint.java
+++ b/core/src/main/java/com/graphhopper/util/shapes/GHPoint.java
@@ -134,13 +134,7 @@ public static GHPoint parse( String str, String srs )
 	    }
 	    try
         {
-	    	String[] fromStrs = str.split(",");
-	    	double sourceXCoordinate = Double.parseDouble(fromStrs[0]);
-			double sourceYCoordinate = Double.parseDouble(fromStrs[1]);
-	        CoordinateReferenceSystem outputCRS = OpenCoordConverter.wgs84CoordRefSystem;
-	        CoordinateReferenceSystem inputCRS = srs.equalsIgnoreCase(BNG)||srs.equalsIgnoreCase(OpenCoordConverter.BNG_CRS_CODE)?OpenCoordConverter.bngCoordRefSystem:CRS.decode(srs);
-	        LatLong transformFromSourceCRSToTargetCRS = OpenCoordConverter.transformFromSourceCRSToTargetCRS(inputCRS, outputCRS, sourceXCoordinate, sourceYCoordinate, true);
-	        return new GHPoint(transformFromSourceCRSToTargetCRS.getLatAngle(), transformFromSourceCRSToTargetCRS.getLongAngle());
+	    	return doParse(str, srs);
         } catch (TransformException | IllegalArgumentException e)
         {
         	throw new IllegalArgumentException("Point "
@@ -153,4 +147,16 @@ public static GHPoint parse( String str, String srs )
 	       throw new IllegalArgumentException("Srs " + srs + " is not a valid srs for input.");
         } 
     }
+
+	private static GHPoint doParse( String str, String srs ) throws NoSuchAuthorityCodeException,
+            FactoryException, TransformException
+    {
+	    String[] fromStrs = str.split(",");
+	    double sourceXCoordinate = Double.parseDouble(fromStrs[0]);
+	    double sourceYCoordinate = Double.parseDouble(fromStrs[1]);
+	    CoordinateReferenceSystem outputCRS = OpenCoordConverter.wgs84CoordRefSystem;
+	    CoordinateReferenceSystem inputCRS = srs.equalsIgnoreCase(BNG)||srs.equalsIgnoreCase(OpenCoordConverter.BNG_CRS_CODE)?OpenCoordConverter.bngCoordRefSystem:CRS.decode(srs);
+	    LatLong transformFromSourceCRSToTargetCRS = OpenCoordConverter.transformFromSourceCRSToTargetCRS(inputCRS, outputCRS, sourceXCoordinate, sourceYCoordinate, true);
+	    return new GHPoint(transformFromSourceCRSToTargetCRS.getLatAngle(), transformFromSourceCRSToTargetCRS.getLongAngle());
+    }
 }
diff --git a/core/src/main/java/com/graphhopper/util/shapes/GHResponseCoordinateTransformer.java b/core/src/main/java/com/graphhopper/util/shapes/GHResponseCoordinateTransformer.java
index ed94e095b3..82440cbf1d 100644
--- a/core/src/main/java/com/graphhopper/util/shapes/GHResponseCoordinateTransformer.java
+++ b/core/src/main/java/com/graphhopper/util/shapes/GHResponseCoordinateTransformer.java
@@ -45,17 +45,7 @@ public void transformCoordinates( GHResponse response )
 			GHPoint transformedPoint;
 			for (GHPoint ghPoint : points)
 			{
-				LatLong transformedCoordinate = OpenCoordConverter
-				        .transformFromSourceCRSToTargetCRS(OpenCoordConverter.wgs84CoordRefSystem,
-				                targetCRS, ghPoint.getLat(), ghPoint.getLon(), true);
-				if (points.is3D()) {
-					GHPoint3D threedPoint = (GHPoint3D) ghPoint;
-					transformedPoint = new GHPoint3D(transformedCoordinate.getLatAngle(),
-					        transformedCoordinate.getLongAngle(), threedPoint.getElevation());
-				}
-				else
-					transformedPoint = new GHPoint(transformedCoordinate.getLatAngle(),
-					        transformedCoordinate.getLongAngle());
+				transformedPoint = doTransformPoint(ghPoint);
 
 				transformedPoints.add(transformedPoint);
 			}
@@ -67,5 +57,27 @@ public void transformCoordinates( GHResponse response )
 		}
 
 	}
+	
+	public GHPoint transformPoint(GHPoint ghPoint) throws FactoryException, TransformException {
+		if(targetCRS.equals(OpenCoordConverter.wgs84CoordRefSystem))
+			return ghPoint;
+		return doTransformPoint(ghPoint);
+	}
 
+	private GHPoint doTransformPoint( GHPoint ghPoint ) throws FactoryException, TransformException
+    {
+	    GHPoint transformedPoint;
+	    LatLong transformedCoordinate = OpenCoordConverter
+	            .transformFromSourceCRSToTargetCRS(OpenCoordConverter.wgs84CoordRefSystem,
+	                    targetCRS, ghPoint.getLat(), ghPoint.getLon(), true);
+	    if (ghPoint instanceof GHPoint3D) {
+	    	GHPoint3D threedPoint = (GHPoint3D) ghPoint;
+	    	transformedPoint = new GHPoint3D(transformedCoordinate.getLatAngle(),
+	    	        transformedCoordinate.getLongAngle(), threedPoint.getElevation());
+	    }
+	    else
+	    	transformedPoint = new GHPoint(transformedCoordinate.getLatAngle(),
+	    	        transformedCoordinate.getLongAngle());
+	    return transformedPoint;
+    }
 }
diff --git a/pom.xml b/pom.xml
index 592c8be13c..cc483b2cd7 100644
--- a/pom.xml
+++ b/pom.xml
@@ -5,7 +5,7 @@
 	<groupId>com.graphhopper</groupId>
 	<artifactId>graphhopper-parent</artifactId>
 	<name>GraphHopper Parent Project</name>
-	<version>0.8-SNAPSHOT</version>
+	<version>1.20-SNAPSHOT</version>
 	<packaging>pom</packaging>
 	<url>http://graphhopper.com</url>
 	<inceptionYear>2012</inceptionYear>
@@ -46,13 +46,11 @@
 	</properties>
 
 	<scm>
-		<connection>scm:git:https://github.com/engaric/graphhopper.git</connection>
-		<developerConnection>scm:git:https://github.com/engaric/graphhopper.git</developerConnection>
-		<!-- <connection>scm:git:git@github.com:engaric/graphhopper.git</connection> -->
-		<!-- <developerConnection>scm:git:git@github.com:engaric/graphhopper.git</developerConnection> -->
-		<!-- <url>git@github.com:engaric/graphhopper.git</url> -->
-		<url>https://github.com/engaric/graphhopper.git</url>
-	  <tag>HEAD</tag>
+		<connection>scm:git:git@github.com:engaric/graphhopper.git</connection>
+		<developerConnection>scm:git:git@github.com:engaric/graphhopper.git</developerConnection>
+		<url>git@github.com:engaric/graphhopper.git</url>
+<!-- 	  <tag>HEAD</tag> -->
+    <tag>HEAD</tag>
   </scm>
 	<distributionManagement>
 		<snapshotRepository>
diff --git a/tools/pom.xml b/tools/pom.xml
index e9f726af87..25ad4a4c83 100644
--- a/tools/pom.xml
+++ b/tools/pom.xml
@@ -4,7 +4,7 @@
 
     <groupId>com.graphhopper</groupId>
     <artifactId>graphhopper-tools</artifactId>
-    <version>0.8-SNAPSHOT</version>
+    <version>1.20-SNAPSHOT</version>
     <packaging>jar</packaging>
     <name>GraphHopper Tools</name>
     <properties>
@@ -14,7 +14,7 @@
     <parent>
         <groupId>com.graphhopper</groupId>
         <artifactId>graphhopper-parent</artifactId>    	
-        <version>0.8-SNAPSHOT</version>
+        <version>1.20-SNAPSHOT</version>
     </parent>
     <repositories>
         <repository>
diff --git a/web/pom.xml b/web/pom.xml
index c006085f8b..37620957b9 100644
--- a/web/pom.xml
+++ b/web/pom.xml
@@ -5,14 +5,14 @@
 	<groupId>com.graphhopper</groupId>
 	<artifactId>graphhopper-web</artifactId>
 	<packaging>war</packaging>
-	<version>0.8-SNAPSHOT</version>
+	<version>1.20-SNAPSHOT</version>
 	<name>GraphHopper Web</name>
 	<description>Example on how to use GraphHopper in a web-based application</description>
 
 	<parent>
 		<groupId>com.graphhopper</groupId>
 		<artifactId>graphhopper-parent</artifactId>
-		<version>0.8-SNAPSHOT</version>
+		<version>1.20-SNAPSHOT</version>
 	</parent>
 	<properties>
 		<jetty.version>8.1.16.v20140903</jetty.version>
diff --git a/web/src/main/java/com/graphhopper/http/GHBaseServlet.java b/web/src/main/java/com/graphhopper/http/GHBaseServlet.java
index 49fe1da02d..e26b3140f2 100644
--- a/web/src/main/java/com/graphhopper/http/GHBaseServlet.java
+++ b/web/src/main/java/com/graphhopper/http/GHBaseServlet.java
@@ -318,4 +318,13 @@ public void writeResponse( HttpServletResponse res, String str )
 			logger.error("Cannot write message:" + str, ex);
 		}
 	}
+
+	protected void addSrsObject(String outputSrs, Map<String, Object> geoJsonFeature) {
+		Map<String, Object> crsObj = new HashMap<String, Object>();
+		crsObj.put("type", "name");
+		Map<String, Object> propObj = new HashMap<String, Object>();
+		propObj.put("name", outputSrs);
+		crsObj.put("properties", propObj );
+		geoJsonFeature.put("crs", crsObj);
+	}
 }
diff --git a/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java b/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
index ec47475b51..e8807dec2f 100644
--- a/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
+++ b/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
@@ -66,33 +66,34 @@
 import com.graphhopper.util.shapes.GHResponseCoordinateTransformer;
 
 /**
- * Servlet to use GraphHopper in a remote client application like mobile or browser. Note: If type
- * is json it returns the points in GeoJson format (longitude,latitude) unlike the format "lat,lon"
- * used otherwise. See the full API response format in docs/web/api-doc.md
+ * Servlet to use GraphHopper in a remote client application like mobile or
+ * browser. Note: If type is json it returns the points in GeoJson format
+ * (longitude,latitude) unlike the format "lat,lon" used otherwise. See the full
+ * API response format in docs/web/api-doc.md
  * <p/>
  *
  * @author Peter Karich
  */
-public class GraphHopperServlet extends GHBaseServlet
-{
+public class GraphHopperServlet extends GHBaseServlet {
 	private static final long serialVersionUID = 1L;
 
 	@Inject
 	private GraphHopper hopper;
 
 	@Override
-	public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes )
-			throws ServletException, IOException
-	{
+	public void doGet(HttpServletRequest httpReq, HttpServletResponse httpRes)
+			throws ServletException, IOException {
 		getGHResponse(httpReq, httpRes);
 	}
 
-	public GHResponse getGHResponse( HttpServletRequest httpReq, HttpServletResponse httpRes )
-			throws JSONException, IOException
-	{
-		boolean writeGPX = "gpx".equalsIgnoreCase(getParam(httpReq, "type", "json"));
-		double minPathPrecision = getDoubleParam(httpReq, "way_point_max_distance", 1d);
-		boolean enableInstructions = writeGPX || getBooleanParam(httpReq, "instructions", true);
+	public GHResponse getGHResponse(HttpServletRequest httpReq,
+			HttpServletResponse httpRes) throws JSONException, IOException {
+		boolean writeGPX = "gpx".equalsIgnoreCase(getParam(httpReq, "type",
+				"json"));
+		double minPathPrecision = getDoubleParam(httpReq,
+				"way_point_max_distance", 1d);
+		boolean enableInstructions = writeGPX
+				|| getBooleanParam(httpReq, "instructions", true);
 		boolean calcPoints = getBooleanParam(httpReq, "calc_points", true);
 		boolean enableElevation = getBooleanParam(httpReq, "elevation", false);
 		boolean pointsEncoded = getBooleanParam(httpReq, "points_encoded", true);
@@ -100,7 +101,8 @@ public GHResponse getGHResponse( HttpServletRequest httpReq, HttpServletResponse
 		String vehicleStr = getParam(httpReq, "vehicle", null);
 		String weighting = getParam(httpReq, "weighting", "fastest");
 		String algoStr = getParam(httpReq, "algorithm", null);
-		String localeStr = getParam(httpReq, "locale", "en_GB").replace('-', '_');
+		String localeStr = getParam(httpReq, "locale", "en_GB").replace('-',
+				'_');
 
 		StopWatch sw = new StopWatch().start();
 
@@ -116,191 +118,195 @@ public GHResponse getGHResponse( HttpServletRequest httpReq, HttpServletResponse
 
 		GHResponse ghRsp = null;
 		List<GHPoint> infoPoints = null;
-		GHResponseCoordinateTransformer transformer =null;
+		GHResponseCoordinateTransformer transformer = null;
 
-		try
-		{
+		try {
 			infoPoints = getPoints(httpReq, "point");
 
 			ApiResource.ROUTE.checkAllRequestParameters(httpReq);
 
-			// we can reduce the path length based on the maximum differences to the original
+			// we can reduce the path length based on the maximum differences to
+			// the original
 			// coordinates
-			
-			if(outputSrs.length()>0) {
+
+			if (outputSrs.length() > 0) {
 				transformer = new GHResponseCoordinateTransformer(outputSrs);
 			}
 
-			if (!new CaseInsensitiveStringListValidator()
-			.isValid(localeStr, TranslationMap.LOCALES))
-			{
+			if (!new CaseInsensitiveStringListValidator().isValid(localeStr,
+					TranslationMap.LOCALES)) {
 				String errMesg = buildErrorMessageString(localeStr, "locale",
 						TranslationMap.LOCALES);
 				ghRsp = new GHResponse()
-				.addError(new InvalidParameterException(errMesg.toString()));
+						.addError(new InvalidParameterException(errMesg
+								.toString()));
 			} else if (null != algoStr
-					&& !new CaseInsensitiveStringListValidator().isValid(algoStr,
-							AlgorithmOptions.ASTAR, AlgorithmOptions.ASTAR_BI,
-							AlgorithmOptions.DIJKSTRA, AlgorithmOptions.DIJKSTRA_BI,
-							AlgorithmOptions.DIJKSTRA_ONE_TO_MANY))
-			{
+					&& !new CaseInsensitiveStringListValidator().isValid(
+							algoStr, AlgorithmOptions.ASTAR,
+							AlgorithmOptions.ASTAR_BI,
+							AlgorithmOptions.DIJKSTRA,
+							AlgorithmOptions.DIJKSTRA_BI,
+							AlgorithmOptions.DIJKSTRA_ONE_TO_MANY)) {
 				String errMesg = buildErrorMessageString(algoStr, "algorithm",
 						AlgorithmOptions.ASTAR, AlgorithmOptions.ASTAR_BI,
-						AlgorithmOptions.DIJKSTRA, AlgorithmOptions.DIJKSTRA_BI,
+						AlgorithmOptions.DIJKSTRA,
+						AlgorithmOptions.DIJKSTRA_BI,
 						AlgorithmOptions.DIJKSTRA_ONE_TO_MANY);
-				ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg));
+				ghRsp = new GHResponse()
+						.addError(new InvalidParameterException(errMesg));
 			} else if (null != weighting
-					&& !new CaseInsensitiveStringListValidator().isValid(weighting, "fastest",
-			                "shortest"))
-			{
-				String errMesg = buildErrorMessageString(weighting, "weighting", "fastest",
-				        "shortest");
-				ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg));
-			} else if (!new BooleanValidator().isValid(instructionsString))
-			{
-				String errMesg = buildBooleanErrorMessageString(instructionsString, "instructions");
-				ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg));
-			} else if (!new BooleanValidator().isValid(pointsEncodedString))
-			{
-				String errMesg = buildBooleanErrorMessageString(pointsEncodedString,
-						"points_encoded");
-				ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg));
-			} else if (!new BooleanValidator().isValid(calcPointsString))
-			{
-				String errMesg = buildBooleanErrorMessageString(calcPointsString, "calc_points");
-				ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg));
-			} else if (!new BooleanValidator().isValid(debugString))
-			{
-				String errMesg = buildBooleanErrorMessageString(debugString, "debug");
-				ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg));
-			} else if (!new BooleanValidator().isValid(prettyString))
-			{
-				String errMesg = buildBooleanErrorMessageString(prettyString, "pretty");
-				ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg));
-			} else if (!hopper.getEncodingManager().supports(vehicleStr))
-			{
-				String supported = hopper.getGraph().getEncodingManager().toString();
-				String errMesg = String.format(
-						"Vehicle %s is not a valid vehicle. Valid vehicles are %s", vehicleStr,
-						supported);
-				ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg));
-			} else if (!new BooleanValidator().isValid(noThroughAccessString))
-			{
-				String errMesg = buildBooleanErrorMessageString(noThroughAccessString, "private");
-				ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg));
-
-			} else if (enableElevation && !hopper.hasElevation())
-			{
-				ghRsp = new GHResponse().addError(new InvalidParameterException(
-						"Elevation not supported!"));
-			} else
-			{
-				FlagEncoder algoVehicle = hopper.getEncodingManager().getEncoder(vehicleStr);
+					&& !new CaseInsensitiveStringListValidator().isValid(
+							weighting, "fastest", "shortest")) {
+				String errMesg = buildErrorMessageString(weighting,
+						"weighting", "fastest", "shortest");
+				ghRsp = new GHResponse()
+						.addError(new InvalidParameterException(errMesg));
+			} else if (!new BooleanValidator().isValid(instructionsString)) {
+				String errMesg = buildBooleanErrorMessageString(
+						instructionsString, "instructions");
+				ghRsp = new GHResponse()
+						.addError(new InvalidParameterException(errMesg));
+			} else if (!new BooleanValidator().isValid(pointsEncodedString)) {
+				String errMesg = buildBooleanErrorMessageString(
+						pointsEncodedString, "points_encoded");
+				ghRsp = new GHResponse()
+						.addError(new InvalidParameterException(errMesg));
+			} else if (!new BooleanValidator().isValid(calcPointsString)) {
+				String errMesg = buildBooleanErrorMessageString(
+						calcPointsString, "calc_points");
+				ghRsp = new GHResponse()
+						.addError(new InvalidParameterException(errMesg));
+			} else if (!new BooleanValidator().isValid(debugString)) {
+				String errMesg = buildBooleanErrorMessageString(debugString,
+						"debug");
+				ghRsp = new GHResponse()
+						.addError(new InvalidParameterException(errMesg));
+			} else if (!new BooleanValidator().isValid(prettyString)) {
+				String errMesg = buildBooleanErrorMessageString(prettyString,
+						"pretty");
+				ghRsp = new GHResponse()
+						.addError(new InvalidParameterException(errMesg));
+			} else if (!hopper.getEncodingManager().supports(vehicleStr)) {
+				String supported = hopper.getGraph().getEncodingManager()
+						.toString();
+				String errMesg = String
+						.format("Vehicle %s is not a valid vehicle. Valid vehicles are %s",
+								vehicleStr, supported);
+				ghRsp = new GHResponse()
+						.addError(new InvalidParameterException(errMesg));
+			} else if (!new BooleanValidator().isValid(noThroughAccessString)) {
+				String errMesg = buildBooleanErrorMessageString(
+						noThroughAccessString, "private");
+				ghRsp = new GHResponse()
+						.addError(new InvalidParameterException(errMesg));
 
-				// Lots of lovely braces. I will tidy this up next week... promise!
-				if (avoidancesString != null)
-				{
+			} else if (enableElevation && !hopper.hasElevation()) {
+				ghRsp = new GHResponse()
+						.addError(new InvalidParameterException(
+								"Elevation not supported!"));
+			} else {
+				FlagEncoder algoVehicle = hopper.getEncodingManager()
+						.getEncoder(vehicleStr);
+
+				// Lots of lovely braces. I will tidy this up next week...
+				// promise!
+				if (avoidancesString != null) {
 					List<String> allowedAvoidances = new ArrayList<>();
 					// Check Avoidances
-					if (algoVehicle instanceof AbstractFlagEncoder)
-					{
+					if (algoVehicle instanceof AbstractFlagEncoder) {
 						AbstractFlagEncoder abstractFlagEncoder = (AbstractFlagEncoder) algoVehicle;
 						List<EncoderDecorator> encoderDecorators = abstractFlagEncoder
 								.getEncoderDecorators();
-						if (encoderDecorators != null)
-						{
-							for (EncoderDecorator encoderDecorator : encoderDecorators)
-							{
-								if (encoderDecorator instanceof AbstractAvoidanceDecorator)
-								{
+						if (encoderDecorators != null) {
+							for (EncoderDecorator encoderDecorator : encoderDecorators) {
+								if (encoderDecorator instanceof AbstractAvoidanceDecorator) {
 									AbstractAvoidanceDecorator abstractAvoidanceDecorator = (AbstractAvoidanceDecorator) encoderDecorator;
-									allowedAvoidances.addAll(Arrays
-											.asList(abstractAvoidanceDecorator
-													.getEdgeAttributesOfInterestNames()));
+									allowedAvoidances
+											.addAll(Arrays
+													.asList(abstractAvoidanceDecorator
+															.getEdgeAttributesOfInterestNames()));
 								}
 							}
 						}
 					}
 					String avoidanceArray[] = avoidancesString.split(",");
-					for (String avoidance : avoidanceArray)
-					{
-						if (!allowedAvoidances.contains(avoidance.trim()))
-						{
-							String errMesg = buildErrorMessageString(avoidance, "avoidances",
-									allowedAvoidances);
-							ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg
-									.toString()));
+					for (String avoidance : avoidanceArray) {
+						if (!allowedAvoidances.contains(avoidance.trim())) {
+							String errMesg = buildErrorMessageString(avoidance,
+									"avoidances", allowedAvoidances);
+							ghRsp = new GHResponse()
+									.addError(new InvalidParameterException(
+											errMesg.toString()));
 						}
 					}
 				}
 
-				if (ghRsp == null)
-				{
+				if (ghRsp == null) {
 					GHRequest request = new GHRequest(infoPoints);
 
 					initHints(request, httpReq.getParameterMap());
-					request.setVehicle(algoVehicle.toString()).setWeighting(weighting)
-					.setAlgorithm(algoStr).setLocale(localeStr).getHints()
-					.put("calcPoints", calcPoints).put("instructions", enableInstructions)
-					.put("wayPointMaxDistance", minPathPrecision);
+					request.setVehicle(algoVehicle.toString())
+							.setWeighting(weighting).setAlgorithm(algoStr)
+							.setLocale(localeStr).getHints()
+							.put("calcPoints", calcPoints)
+							.put("instructions", enableInstructions)
+							.put("wayPointMaxDistance", minPathPrecision);
 					ghRsp = hopper.route(request);
 				}
 			}
-		} catch (Exception e)
-		{
+		} catch (Exception e) {
 			if (e instanceof IllegalArgumentException) {
 				e = new InvalidParameterException(e.getMessage());
-			} 
+			}
 			ghRsp = new GHResponse().addError(e);
-		} finally
-		{
-			if(!ghRsp.hasErrors()  && !writeGPX) {
+		} finally {
+			if (!ghRsp.hasErrors() && !writeGPX) {
 				transformer.transformCoordinates(ghRsp);
 			}
 			float took = sw.stop().getSeconds();
-			String infoStr = httpReq.getRemoteAddr() + " " + httpReq.getLocale() + " "
+			String infoStr = httpReq.getRemoteAddr() + " "
+					+ httpReq.getLocale() + " "
 					+ httpReq.getHeader("User-Agent");
-			String logStr = httpReq.getQueryString() + " " + infoStr + " " + infoPoints + ", took:"
-					+ took + ", " + algoStr + ", " + weighting + ", " + vehicleStr;
+			String logStr = httpReq.getQueryString() + " " + infoStr + " "
+					+ infoPoints + ", took:" + took + ", " + algoStr + ", "
+					+ weighting + ", " + vehicleStr;
 
-			if (ghRsp.hasErrors())
-			{
+			if (ghRsp.hasErrors()) {
 				logger.error(logStr + ", errors:" + ghRsp.getErrors());
 				logger.info("GraphHopperServlet.getGHResponse(ERROR)");
 			} else
-				logger.info(logStr + ", distance: " + ghRsp.getDistance() + ", time:"
-						+ Math.round(ghRsp.getTime() / 60000f) + "min, points:"
-						+ ghRsp.getPoints().getSize() + ", debug - " + ghRsp.getDebugInfo());
+				logger.info(logStr + ", distance: " + ghRsp.getDistance()
+						+ ", time:" + Math.round(ghRsp.getTime() / 60000f)
+						+ "min, points:" + ghRsp.getPoints().getSize()
+						+ ", debug - " + ghRsp.getDebugInfo());
 
-			if (writeGPX)
-			{
+			if (writeGPX) {
 				String xml = createGPXString(httpReq, httpRes, ghRsp);
-				if (ghRsp.hasErrors())
-				{
+				if (ghRsp.hasErrors()) {
 					httpRes.setStatus(SC_BAD_REQUEST);
 					httpRes.getWriter().append(xml);
 				} else
 					writeResponse(httpRes, xml);
-			} else
-			{
+			} else {
 				String type = getParam(httpReq, "type", "json");
 				if (!"json".equalsIgnoreCase(type)
-						|| (!"jsonp".equalsIgnoreCase(type) && jsonpAllowed))
-				{
+						|| (!"jsonp".equalsIgnoreCase(type) && jsonpAllowed)) {
 					String errorMessage = type
 							+ " is not a valid value for parameter type. Valid values are ";
-					errorMessage += jsonpAllowed ? "JSON, GPX or JSONP." : "GPX or JSON.";
+					errorMessage += jsonpAllowed ? "JSON, GPX or JSONP."
+							: "GPX or JSON.";
 					ghRsp.addError(new InvalidParameterException(errorMessage));
 				}
-				logger.info("GraphHopperServlet.getGHResponse(" + enableInstructions + ")");
-				Map<String, Object> map = createJson(ghRsp, calcPoints, pointsEncoded,
-						enableElevation, enableInstructions);
+				logger.info("GraphHopperServlet.getGHResponse("
+						+ enableInstructions + ")");
+				Map<String, Object> map = createJson(ghRsp, calcPoints,
+						pointsEncoded, enableElevation, enableInstructions,
+						outputSrs);
 				Object infoMap = map.get("info");
 				if (infoMap != null)
 					((Map) infoMap).put("took", Math.round(took * 1000));
 
-				if (ghRsp.hasErrors())
-				{
+				if (ghRsp.hasErrors()) {
 					writeJsonError(httpRes, SC_BAD_REQUEST, new JSONObject(map));
 				} else
 					writeJson(httpReq, httpRes, new JSONObject(map));
@@ -312,51 +318,49 @@ public GHResponse getGHResponse( HttpServletRequest httpReq, HttpServletResponse
 		return ghRsp;
 	}
 
-	private String buildBooleanErrorMessageString( String paramValue, String paramName )
-	{
-		return buildErrorMessageString(paramValue, paramName,
-				Arrays.asList(new String[] { Boolean.TRUE.toString(), Boolean.FALSE.toString() }));
+	private String buildBooleanErrorMessageString(String paramValue,
+			String paramName) {
+		return buildErrorMessageString(
+				paramValue,
+				paramName,
+				Arrays.asList(new String[] { Boolean.TRUE.toString(),
+						Boolean.FALSE.toString() }));
 	}
 
-	private String buildErrorMessageString( String paramValue, String paramName,
-			String... validValues )
-	{
-		return buildErrorMessageString(paramValue, paramName, Arrays.asList(validValues));
+	private String buildErrorMessageString(String paramValue, String paramName,
+			String... validValues) {
+		return buildErrorMessageString(paramValue, paramName,
+				Arrays.asList(validValues));
 	}
 
-	private String buildErrorMessageString( String paramValue, String paramName,
-			List<String> validValues )
-	{
+	private String buildErrorMessageString(String paramValue, String paramName,
+			List<String> validValues) {
 		StringBuilder errMesg = new StringBuilder(paramValue)
-		.append(" is not a valid value for parameter ").append(paramName)
-		.append(". Valid values are ");
-		for (int i = 0; i < validValues.size(); i++)
-		{
+				.append(" is not a valid value for parameter ")
+				.append(paramName).append(". Valid values are ");
+		for (int i = 0; i < validValues.size(); i++) {
 			String validStr = validValues.get(i);
-			if (i == validValues.size() - 1)
-			{
+			if (i == validValues.size() - 1) {
 				errMesg.append(" or ");
 			}
 			errMesg.append(validStr);
-			if (i < validValues.size() - 2)
-			{
+			if (i < validValues.size() - 2) {
 				errMesg.append(", ");
 			}
 		}
 		return errMesg.toString();
 	}
 
-	protected Map<String, Object> createJson( GHResponse rsp, boolean calcPoints,
-			boolean pointsEncoded, boolean includeElevation, boolean enableInstructions )
-			{
+	protected Map<String, Object> createJson(GHResponse rsp,
+			boolean calcPoints, boolean pointsEncoded,
+			boolean includeElevation, boolean enableInstructions,
+			String outputSrs) {
 		Map<String, Object> json = new HashMap<String, Object>();
 
-		if (rsp.hasErrors())
-		{
+		if (rsp.hasErrors()) {
 			processResponseErrors(rsp, json, internalErrorsAllowed);
 
-		} else
-		{
+		} else {
 			Map<String, Object> jsonInfo = new HashMap<String, Object>();
 			json.put("info", jsonInfo);
 			// jsonInfo.put("copyrights", Arrays.asList("GraphHopper",
@@ -366,48 +370,51 @@ private String buildErrorMessageString( String paramValue, String paramName,
 			jsonPath.put("weight", Helper.round6(rsp.getDistance()));
 			jsonPath.put("time", rsp.getTime());
 
-			if (calcPoints)
-			{
+			if (calcPoints) {
 				jsonPath.put("points_encoded", pointsEncoded);
 
 				PointList points = rsp.getPoints();
-				if (points.getSize() >= 2)
-				{
+				if (points.getSize() >= 2) {
 					BBox maxBounds = hopper.getGraph().getBounds();
-					BBox maxBounds2D = new BBox(maxBounds.minLon, maxBounds.maxLon,
-							maxBounds.minLat, maxBounds.maxLat);
-					jsonPath.put("bbox", rsp.calcRouteBBox(maxBounds2D).toGeoJson());
+					BBox maxBounds2D = new BBox(maxBounds.minLon,
+							maxBounds.maxLon, maxBounds.minLat,
+							maxBounds.maxLat);
+					jsonPath.put("bbox", rsp.calcRouteBBox(maxBounds2D)
+							.toGeoJson());
 				}
 
-				jsonPath.put("points", createPoints(points, pointsEncoded, includeElevation));
+				jsonPath.put(
+						"points",
+						createPoints(points, pointsEncoded, includeElevation,
+								outputSrs));
 
-				if (enableInstructions)
-				{
+				if (enableInstructions) {
 					InstructionList instructions = rsp.getInstructions();
 					jsonPath.put("instructions", instructions.createJson());
+					addSrsObject(outputSrs, jsonPath);
 				}
 			}
 			json.put("paths", Collections.singletonList(jsonPath));
 		}
 		return json;
-			}
+	}
 
-	protected Object createPoints( PointList points, boolean pointsEncoded, boolean includeElevation )
-	{
+	protected Object createPoints(PointList points, boolean pointsEncoded,
+			boolean includeElevation, String outputSrs) {
 		if (pointsEncoded)
 			return WebHelper.encodePolyline(points, includeElevation);
 
 		Map<String, Object> jsonPoints = new HashMap<String, Object>();
 		jsonPoints.put("type", "LineString");
+		addSrsObject(outputSrs, jsonPoints);
 		jsonPoints.put("coordinates", points.toGeoJson(includeElevation));
 		return jsonPoints;
 	}
 
-	protected void initHints( GHRequest request, Map<String, String[]> parameterMap )
-	{
+	protected void initHints(GHRequest request,
+			Map<String, String[]> parameterMap) {
 		WeightingMap m = request.getHints();
-		for (Entry<String, String[]> e : parameterMap.entrySet())
-		{
+		for (Entry<String, String[]> e : parameterMap.entrySet()) {
 			if (e.getValue().length == 1)
 				m.put(e.getKey(), e.getValue()[0]);
 		}
diff --git a/web/src/main/java/com/graphhopper/http/NearestServlet.java b/web/src/main/java/com/graphhopper/http/NearestServlet.java
index a0f9b89956..05400f67f7 100644
--- a/web/src/main/java/com/graphhopper/http/NearestServlet.java
+++ b/web/src/main/java/com/graphhopper/http/NearestServlet.java
@@ -31,6 +31,8 @@
 
 import org.json.JSONArray;
 import org.json.JSONObject;
+import org.opengis.referencing.FactoryException;
+import org.opengis.referencing.operation.TransformException;
 
 import com.graphhopper.GHResponse;
 import com.graphhopper.GraphHopper;
@@ -88,14 +90,19 @@ public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes )
 			{
 				GHPoint3D snappedPoint = qr.getSnappedPoint();
 				map.put("type", "Point");
-
+				GHPoint outputPoint;
+				try {
+					outputPoint = transformer.transformPoint(snappedPoint);
+				} catch (FactoryException | TransformException e) {
+					throw new InvalidParameterException("Nearest point WGS84:" + snappedPoint.toString() + "is not valid in output srs " + outputSrs);
+				}
 				JSONArray coord = new JSONArray();
-				coord.put(snappedPoint.lon);
-				coord.put(snappedPoint.lat);
+				coord.put(outputPoint.lon);
+				coord.put(outputPoint.lat);
 
 				if (hopper.hasElevation() && enabledElevation)
 					coord.put(snappedPoint.ele);
-
+				addSrsObject(outputSrs, map);
 				map.put("coordinates", coord);
 
 				// Distance from input to snapped point in meters
@@ -115,7 +122,6 @@ public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes )
 			writeJsonError(httpRes, SC_BAD_REQUEST, new JSONObject(map));
 		} else
 		{
-			transformer.transformCoordinates(ghRsp);
 			writeJson(httpReq, httpRes, new JSONObject(map));
 		}
 	}
diff --git a/web/src/test/java/com/graphhopper/http/GraphHopperServletTest.java b/web/src/test/java/com/graphhopper/http/GraphHopperServletTest.java
index 8f88489d3a..4e9d769089 100644
--- a/web/src/test/java/com/graphhopper/http/GraphHopperServletTest.java
+++ b/web/src/test/java/com/graphhopper/http/GraphHopperServletTest.java
@@ -775,7 +775,7 @@ public void testGetPointsWithRequestSrs() throws InvalidParameterException {
 	}
 	
 	@Test 
-	public void testGetPointsWithInvalidRequestSrs() {
+	public void testGetPointsWithInvalidRequestSrs() throws InvalidParameterException {
 		allParameters.put("point", POINTS);
 		allParameters.put("vehicle", new String[] { VEHICLES[0] });
 		allParameters.put("locale", new String[] { LOCALES[0] });
@@ -787,11 +787,9 @@ public void testGetPointsWithInvalidRequestSrs() {
 		try {
 			List<GHPoint> points = graphHopperServlet.getPoints(httpServletRequest, "point");
 			fail("Should have thrown error as srs is invalid");
-		} catch (InvalidParameterException ipe) {
-			assertEquals("Point " + POINTS[0]
-								+ " is not a valid point. Point must be a comma separated coordinate in "
-								+ invalidSRS
-								+ " projection.", ipe.getStatusMessage());
+		} catch (IllegalArgumentException ipe) {
+			assertEquals("Srs " + invalidSRS
+								+ " is not a valid srs for input.", ipe.getMessage());
 		}
 	}
 
