diff --git a/core/src/main/java/com/graphhopper/routing/util/DynamicWeighting.java b/core/src/main/java/com/graphhopper/routing/util/DynamicWeighting.java
index c8a3854c65..0cc9c38c65 100644
--- a/core/src/main/java/com/graphhopper/routing/util/DynamicWeighting.java
+++ b/core/src/main/java/com/graphhopper/routing/util/DynamicWeighting.java
@@ -21,6 +21,10 @@
 import com.graphhopper.util.EdgeIteratorState;
 import com.graphhopper.util.Helper;
 import com.graphhopper.util.PMap;
+import com.graphhopper.util.profiles.ProfileManager;
+import com.graphhopper.util.profiles.RidersProfile;
+
+import java.util.Map;
 
 import static com.graphhopper.util.Helper.keepIn;
 
@@ -37,7 +41,7 @@
     private final double heading_penalty;
     protected final FlagEncoder flagEncoder;
     private final double maxSpeed;
-    private String user = "martin";
+    private Map<Integer, double[]> userSpeeds;
 
     /**
      * For now used only in BikeGenericFlagEncoder
@@ -56,7 +60,13 @@ public DynamicWeighting(FlagEncoder encoder, PMap pMap)
 
         this.flagEncoder = encoder;
         heading_penalty = pMap.getDouble("heading_penalty", DEFAULT_HEADING_PENALTY);
+        String user = pMap.get("profile", "");
         maxSpeed = encoder.getMaxSpeed() / SPEED_CONV;
+
+        RidersProfile profile = new ProfileManager().getProfile(user);
+        if(profile != null)
+            userSpeeds = profile.getFilterSpeeds();
+
     }
 
     public DynamicWeighting(FlagEncoder encoder)
@@ -67,13 +77,11 @@ public DynamicWeighting(FlagEncoder encoder)
     @Override
     public double calcWeight( EdgeIteratorState edgeState, boolean reverse, int prevOrNextEdgeId )
     {
-        double speed = flagEncoder.getSpeed(edgeState.getFlags());
+        double speed = getUserSpeed(edgeState, reverse);
 
         if (speed == 0)
             return Double.POSITIVE_INFINITY;
 
-        speed = adjustSpeed(speed, edgeState, reverse);
-
         double time = edgeState.getDistance() / speed * SPEED_CONV;
 
         // add direction penalties at start/stop/via points
@@ -84,10 +92,46 @@ public double calcWeight( EdgeIteratorState edgeState, boolean reverse, int prev
         return time / (0.5 + getUserPreference(edgeState));
     }
 
-    private double getUserSpeed(EdgeIteratorState edgeState){
+    private double getUserSpeed(EdgeIteratorState edgeState, boolean reverse){
+
+        double speed = 0;
         int wayType = (int) flagEncoder.getDouble(edgeState.getFlags(), DynamicWeighting.WAY_TYPE_KEY);
 
-        return 0;
+        if(userSpeeds != null){
+            double[] speeds = userSpeeds.get(wayType);
+            if(speeds != null){
+
+                int incElevation = (int)flagEncoder.getDouble(edgeState.getFlags(), DynamicWeighting.INC_SLOPE_KEY);
+                int decElevation = (int)flagEncoder.getDouble(edgeState.getFlags(), DynamicWeighting.DEC_SLOPE_KEY);
+                double incDistPercentage = flagEncoder.getDouble(edgeState.getFlags(), DynamicWeighting.INC_DIST_PERCENTAGE_KEY) / 100;
+
+                double incSpeed = speeds[RidersProfile.SLOPES / 2 + incElevation];
+                double decSpeed = speeds[RidersProfile.SLOPES / 2 - decElevation];
+
+                double incDist2DSum = edgeState.getDistance() * incDistPercentage;
+                double decDist2DSum = edgeState.getDistance() - incDist2DSum;
+
+                if (!reverse)
+                {
+                    speed = keepIn((incSpeed * incDist2DSum + decSpeed * decDist2DSum) / edgeState.getDistance(), BikeGenericFlagEncoder.PUSHING_SECTION_SPEED / 2, 50);
+                } else {
+                    speed = keepIn((decSpeed * incDist2DSum + incSpeed * decDist2DSum) / edgeState.getDistance(), BikeGenericFlagEncoder.PUSHING_SECTION_SPEED / 2, 50);
+                }
+
+            }
+
+        }
+
+        if(speed == 0){
+            speed = flagEncoder.getSpeed(edgeState.getFlags());
+
+            if (speed == 0)
+                return Double.POSITIVE_INFINITY;
+
+            speed = adjustSpeed(speed, edgeState, reverse);
+        }
+
+        return speed;
     }
 
 
diff --git a/core/src/main/java/com/graphhopper/util/profiles/ProfileManager.java b/core/src/main/java/com/graphhopper/util/profiles/ProfileManager.java
index 37d713881b..86d8c274cd 100644
--- a/core/src/main/java/com/graphhopper/util/profiles/ProfileManager.java
+++ b/core/src/main/java/com/graphhopper/util/profiles/ProfileManager.java
@@ -108,6 +108,10 @@ public void saveProfile(String name){
 
 
     public RidersProfile getProfile(String name){
+
+        if(name == null || name.equals(""))
+            return null;
+
         if (ridersProfile == null) {
             readProfile(name);
         }
diff --git a/core/src/main/java/com/graphhopper/util/profiles/Main.java b/core/src/main/java/com/graphhopper/util/profiles/Profiles.java
similarity index 99%
rename from core/src/main/java/com/graphhopper/util/profiles/Main.java
rename to core/src/main/java/com/graphhopper/util/profiles/Profiles.java
index 6db3f07291..07c2d6f036 100644
--- a/core/src/main/java/com/graphhopper/util/profiles/Main.java
+++ b/core/src/main/java/com/graphhopper/util/profiles/Profiles.java
@@ -5,7 +5,7 @@
 import com.graphhopper.util.profiles.operations.Operation;
 import com.graphhopper.util.profiles.operations.PrintProfileOperation;
 
-public class Main {
+public class Profiles {
 
     public static void main(String[] args) {
 
diff --git a/profiles.sh b/profiles.sh
new file mode 100755
index 0000000000..9f978cebd7
--- /dev/null
+++ b/profiles.sh
@@ -0,0 +1,14 @@
+#!/usr/bin/env bash
+
+GH_CLASS=com.graphhopper.util.profiles.Profiles
+
+ACTION=$1
+USER=$2
+FILE=$3
+LOCATION=$4
+
+CONFIG=config.properties
+VERSION=$(grep  "<name>" -A 1 pom.xml | grep version | cut -d'>' -f2 | cut -d'<' -f1)
+JAR=tools/target/graphhopper-tools-$VERSION-jar-with-dependencies.jar
+
+java -cp "$JAR" "$GH_CLASS" "$ACTION" "$USER" config="$CONFIG" graph.location="$GRAPH" osmreader.osm="$LOCATION"
\ No newline at end of file
