diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetHopper.java b/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetHopper.java
index 95735d4a1a..50b02fa079 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetHopper.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetHopper.java
@@ -5,9 +5,9 @@
 import com.graphhopper.util.CmdArgs;
 
 import java.io.IOException;
-import java.util.ArrayList;
-import java.util.List;
+import java.util.*;
 import java.util.stream.Collectors;
+import java.util.stream.Stream;
 
 /**
  * Created by alexander on 15/02/2016.
@@ -38,8 +38,17 @@ public void init()
         args.put("osmreader.osm", "british-isles-latest.osm.pbf");
         hopper.init(args);
         hopper.importOrLoad();
-        vehicles.add(new Vehicle(hopper, new Location(51.505, -0.09), new Location(51.48, -0.10)));
-        vehicles.add(new Vehicle(hopper, new Location(51.611621,0.10643), new Location(51.433892,-0.291824)));
+        int count = 100;
+        Random latRan = new Random(123);
+        Random lonRan = new Random(456);
+
+        LinkedList<Double> longitudes = lonRan.doubles(-0.5, 0.25).limit(count * 2).boxed().collect(Collectors.toCollection(LinkedList::new));
+        LinkedList<Double> latitudes = latRan.doubles(51.2, 51.7).limit(count * 2).boxed().collect(Collectors.toCollection(LinkedList::new));
+
+        while (count-- > 0)
+        {
+            vehicles.add(new Vehicle(hopper, new Location(latitudes.poll(), longitudes.poll()), new Location(latitudes.poll(), longitudes.poll())));
+        }
     }
 
     public void timestep() {
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/Vehicle.java b/marmoset/src/main/java/com/graphhopper/marmoset/Vehicle.java
index 6ef8ef06d1..3008e7da6f 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/Vehicle.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/Vehicle.java
@@ -29,6 +29,12 @@ public Vehicle(GraphHopper hopper, Location start, Location dest)
         finished = false;
     }
 
+    public boolean isFinished()
+    {
+        return finished;
+    }
+
+//    private PathWrapper route;
     public void calculateStep()
     {
         if (finished)
@@ -40,15 +46,15 @@ public void calculateStep()
         PointList path = route.getPoints();
         InstructionList il = route.getInstructions();
 
-        if (route.getPoints().size() < 2)
+        if (route.getPoints().size() <= 3)
         {
             System.out.println("Vehicle " + id + " reached destination");
             finished = true;
             return;
         }
 
-        System.out.println(path.toString());
-        System.out.println(il.toString());
+//        System.out.println(path.toString());
+//        System.out.println(il.toString());
         loc.set(path.getLat(2), path.getLon(2));
     }
 
