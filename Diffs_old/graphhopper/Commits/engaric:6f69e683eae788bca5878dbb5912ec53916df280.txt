diff --git a/web/src/main/java/com/graphhopper/http/GraphHopperWeb.java b/web/src/main/java/com/graphhopper/http/GraphHopperWeb.java
index c1445d9616..0e9b5e951d 100644
--- a/web/src/main/java/com/graphhopper/http/GraphHopperWeb.java
+++ b/web/src/main/java/com/graphhopper/http/GraphHopperWeb.java
@@ -22,39 +22,25 @@
 import com.graphhopper.GraphHopperAPI;
 import com.graphhopper.util.*;
 import com.graphhopper.util.shapes.GHPoint;
-import java.util.Arrays;
 import org.json.JSONArray;
 import org.json.JSONObject;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 /**
- * Main wrapper of the offline API for a simple and efficient usage.
+ * Main wrapper of the GraphHopper Directions API for a simple and efficient usage.
  * <p/>
  * @author Peter Karich
  */
 public class GraphHopperWeb implements GraphHopperAPI
 {
-    public static void main( String[] args )
-    {
-        GraphHopperWeb gh = new GraphHopperWeb();
-        gh.setKey("<your-key>");
-
-        // for local server: gh.load("http://localhost:8989/route");        
-        gh.load("https://graphhopper.com/api/1/route");
-
-        //GHResponse ph = gh.route(new GHRequest(53.080827, 9.074707, 50.597186, 11.184082));
-        GHResponse ph = gh.route(new GHRequest(49.6724, 11.3494, 49.6550, 11.4180));
-        System.out.println(ph);
-    }
     private final Logger logger = LoggerFactory.getLogger(getClass());
-    private String serviceUrl;
-    private boolean pointsEncoded = true;
-    private Downloader downloader = new Downloader("GraphHopperWeb");
-    private boolean instructions = true;
+    private Downloader downloader = new Downloader("GraphHopper Java Client");
+    private String serviceUrl = "https://graphhopper.com/api/1/route";
     private String key = "";
-    private boolean withElevation = false;
-    private final TranslationMap trMap = new TranslationMap().doImport();
+    private boolean instructions = true;
+    private boolean calcPoints = true;
+    private boolean elevation = false;
 
     public GraphHopperWeb()
     {
@@ -65,37 +51,37 @@ public void setDownloader( Downloader downloader )
         this.downloader = downloader;
     }
 
-    /**
-     * Example url: http://localhost:8989 or http://217.92.216.224:8080
-     */
     @Override
-    public boolean load( String url )
+    public boolean load( String serviceUrl )
     {
-        this.serviceUrl = url;
+        this.serviceUrl = serviceUrl;
         return true;
     }
 
-    public GraphHopperWeb setPointsEncoded( boolean b )
+    public GraphHopperWeb setKey( String key )
     {
-        pointsEncoded = b;
+        if (key == null || key.isEmpty())
+            throw new IllegalStateException("Key cannot be empty");
+
+        this.key = key;
         return this;
     }
 
-    public GraphHopperWeb setInstructions( boolean b )
+    public GraphHopperWeb setCalcPoints( boolean calcPoints )
     {
-        instructions = b;
+        this.calcPoints = calcPoints;
         return this;
     }
 
-    public GraphHopperWeb setElevation( boolean withElevation )
+    public GraphHopperWeb setInstructions( boolean b )
     {
-        this.withElevation = withElevation;
+        instructions = b;
         return this;
     }
 
-    public GraphHopperWeb setKey( String key )
+    public GraphHopperWeb setElevation( boolean withElevation )
     {
-        this.key = key;
+        this.elevation = withElevation;
         return this;
     }
 
@@ -112,21 +98,32 @@ public GHResponse route( GHRequest request )
                 places += "point=" + p.lat + "," + p.lon + "&";
             }
 
+            boolean tmpInstructions = request.getHints().getBool("instructions", instructions);
+            boolean tmpCalcPoints = request.getHints().getBool("calcPoints", calcPoints);
+
+            if (tmpInstructions && !tmpCalcPoints)
+                throw new IllegalStateException("Cannot calculate instructions without points (only points without instructions). "
+                        + "Use calcPoints=false and instructions=false to disable point and instruction calculation");
+
+            boolean tmpElevation = request.getHints().getBool("elevation", elevation);
+            String tmpKey = request.getHints().get("key", key);
+
             String url = serviceUrl
                     + "?"
                     + places
                     + "&type=json"
-                    + "&points_encoded=" + pointsEncoded
-                    + "&way_point_max_distance=" + request.getHints().getDouble("wayPointMaxDistance", 1)
+                    + "&instructions=" + tmpInstructions
+                    + "&points_encoded=true"
+                    + "&calc_points=" + tmpCalcPoints
                     + "&algo=" + request.getAlgorithm()
                     + "&locale=" + request.getLocale().toString()
-                    + "&elevation=" + withElevation;
+                    + "&elevation=" + tmpElevation;
 
             if (!request.getVehicle().isEmpty())
                 url += "&vehicle=" + request.getVehicle();
 
-            if (!key.isEmpty())
-                url += "&key=" + key;
+            if (!tmpKey.isEmpty())
+                url += "&key=" + tmpKey;
 
             String str = downloader.downloadAsString(url);
             JSONObject json = new JSONObject(str);
@@ -169,56 +166,69 @@ public GHResponse route( GHRequest request )
                 JSONObject firstPath = paths.getJSONObject(0);
                 double distance = firstPath.getDouble("distance");
                 int time = firstPath.getInt("time");
-                PointList pointList;
-                if (pointsEncoded)
+                if (tmpCalcPoints)
                 {
                     String pointStr = firstPath.getString("points");
-                    pointList = WebHelper.decodePolyline(pointStr, 100, withElevation);
-                } else
-                {
-                    JSONArray coords = firstPath.getJSONObject("points").getJSONArray("coordinates");
-                    pointList = new PointList(coords.length(), withElevation);
-                    for (int i = 0; i < coords.length(); i++)
-                    {
-                        JSONArray arr = coords.getJSONArray(i);
-                        double lon = arr.getDouble(0);
-                        double lat = arr.getDouble(1);
-                        if (withElevation)
-                            pointList.add(lat, lon, arr.getDouble(2));
-                        else
-                            pointList.add(lat, lon);
-                    }
-                }
+                    PointList pointList = WebHelper.decodePolyline(pointStr, 100, tmpElevation);
+                    res.setPoints(pointList);
 
-                if (instructions)
-                {
-                    JSONArray instrArr = firstPath.getJSONArray("instructions");
-
-                    InstructionList il = new InstructionList(trMap.getWithFallBack(request.getLocale()));
-                    for (int instrIndex = 0; instrIndex < instrArr.length(); instrIndex++)
+                    if (tmpInstructions)
                     {
-                        JSONObject jsonObj = instrArr.getJSONObject(instrIndex);
-                        double instDist = jsonObj.getDouble("distance");
-                        String text = jsonObj.getString("text");
-                        long instTime = jsonObj.getLong("time");
-                        int sign = jsonObj.getInt("sign");
-                        JSONArray iv = jsonObj.getJSONArray("interval");
-                        int from = iv.getInt(0);
-                        int to = iv.getInt(1);
-                        PointList instPL = new PointList(to - from, withElevation);
-                        for (int j = from; j <= to; j++)
+                        JSONArray instrArr = firstPath.getJSONArray("instructions");
+
+                        InstructionList il = new InstructionList(null);
+                        int viaCount = 1;
+                        for (int instrIndex = 0; instrIndex < instrArr.length(); instrIndex++)
                         {
-                            instPL.add(pointList, j);
+                            JSONObject jsonObj = instrArr.getJSONObject(instrIndex);
+                            double instDist = jsonObj.getDouble("distance");
+                            String text = jsonObj.getString("text");
+                            long instTime = jsonObj.getLong("time");
+                            int sign = jsonObj.getInt("sign");
+                            JSONArray iv = jsonObj.getJSONArray("interval");
+                            int from = iv.getInt(0);
+                            int to = iv.getInt(1);
+                            PointList instPL = new PointList(to - from, tmpElevation);
+                            for (int j = from; j <= to; j++)
+                            {
+                                instPL.add(pointList, j);
+                            }
+
+                            InstructionAnnotation ia = InstructionAnnotation.EMPTY;
+                            if (jsonObj.has("annotation_importance") && jsonObj.has("annotation_text"))
+                            {
+                                ia = new InstructionAnnotation(jsonObj.getInt("annotation_importance"), jsonObj.getString("annotation_text"));
+                            }
+
+                            Instruction instr;
+                            if (sign == Instruction.USE_ROUNDABOUT || sign == Instruction.LEAVE_ROUNDABOUT)
+                            {
+                                instr = new RoundaboutInstruction(sign, text, ia, instPL);
+                            } else if (sign == Instruction.REACHED_VIA)
+                            {
+                                ViaInstruction tmpInstr = new ViaInstruction(text, ia, instPL);
+                                tmpInstr.setViaCount(viaCount);
+                                viaCount++;
+                                instr = tmpInstr;
+                            } else if (sign == Instruction.FINISH)
+                            {
+                                instr = new FinishInstruction(instPL, 0);
+                            } else
+                            {
+                                instr = new Instruction(sign, text, ia, instPL);
+                            }
+
+                            // The translation is done from the routing service so just use the provided string
+                            // instead of creating a combination with sign and name etc
+                            instr.setUseRawName();
+
+                            instr.setDistance(instDist).setTime(instTime);
+                            il.add(instr);
                         }
-
-                        // TODO way and payment type
-                        Instruction instr = new Instruction(sign, text, InstructionAnnotation.EMPTY, instPL).
-                                setDistance(instDist).setTime(instTime);
-                        il.add(instr);
+                        res.setInstructions(il);
                     }
-                    res.setInstructions(il);
                 }
-                return res.setPoints(pointList).setDistance(distance).setMillis(time);
+                return res.setDistance(distance).setMillis(time);
             }
         } catch (Exception ex)
         {
diff --git a/web/src/main/webapp/js/ghrequest.js b/web/src/main/webapp/js/ghrequest.js
index d1a1265773..294f52f9a5 100644
--- a/web/src/main/webapp/js/ghrequest.js
+++ b/web/src/main/webapp/js/ghrequest.js
@@ -398,7 +398,7 @@ GHRequest.prototype.createGeocodeURL = function (host, prevIndex) {
     if (host)
         tmpHost = host;
 
-    var path = this.createPath(tmpHost + "/geocode?limit=8&type=" + this.dataType + "&key=" + this.key);
+    var path = this.createPath(tmpHost + "/geocode?limit=6&type=" + this.dataType + "&key=" + this.key);
     if (prevIndex >= 0 && prevIndex < this.route.size()) {
         var point = this.route.getIndex(prevIndex);
         path += "&lat=" + point.lat + "&lon=" + point.lng;
diff --git a/web/src/main/webapp/js/main.js b/web/src/main/webapp/js/main.js
index 9909577d8d..3e7bf456c9 100644
--- a/web/src/main/webapp/js/main.js
+++ b/web/src/main/webapp/js/main.js
@@ -1063,11 +1063,14 @@ function routeLatLng(request, doQuery) {
 
             var exportLink = $("#export-link a");
             exportLink.attr('href', urlForHistory);
-            var startOsmLink = $("<a>start</a>");
-            startOsmLink.attr("href", "https://www.openstreetmap.org/?zoom=14&mlat=" + request.from.lat + "&mlon=" + request.from.lng);
-            var endOsmLink = $("<a>end</a>");
-            endOsmLink.attr("href", "https://www.openstreetmap.org/?zoom=14&mlat=" + request.to.lat + "&mlon=" + request.to.lng);
-            hiddenDiv.append("<br/><span>View on OSM: </span>").append(startOsmLink).append(endOsmLink);
+            var osmRouteLink = $("<br/><a>view on OSM</a>");
+
+            var osmVehicle = "bicycle";
+            if (request.vehicle.toUpperCase() === "FOOT") {
+                osmVehicle = "foot";
+            }
+            osmRouteLink.attr("href", "http://www.openstreetmap.org/directions?engine=graphhopper_" + osmVehicle + "&route=" + encodeURIComponent(request.from.lat + "," + request.from.lng + ";" + request.to.lat + "," + request.to.lng));
+            hiddenDiv.append(osmRouteLink);
 
             var osrmLink = $("<a>OSRM</a>");
             osrmLink.attr("href", "http://map.project-osrm.org/?loc=" + request.from + "&loc=" + request.to);
@@ -1152,11 +1155,11 @@ function addInstruction(main, instr, instrIndex, lngLat) {
     else
         throw "did not found sign " + sign;
     var title = instr.text;
-    if (instr.annotationText) {
+    if (instr.annotation_text) {
         if (!title)
-            title = instr.annotationText;
+            title = instr.annotation_text;
         else
-            title = title + ", " + instr.annotationText;
+            title = title + ", " + instr.annotation_text;
     }
     var distance = instr.distance;
     var str = "<td class='instr_title'>" + title + "</td>";
diff --git a/web/src/test/java/com/graphhopper/http/GraphHopperServletIT.java b/web/src/test/java/com/graphhopper/http/GraphHopperServletIT.java
index 10a09d601d..6f74987210 100644
--- a/web/src/test/java/com/graphhopper/http/GraphHopperServletIT.java
+++ b/web/src/test/java/com/graphhopper/http/GraphHopperServletIT.java
@@ -22,7 +22,10 @@
 import com.graphhopper.GraphHopperAPI;
 import com.graphhopper.util.CmdArgs;
 import com.graphhopper.util.Helper;
+import com.graphhopper.util.shapes.GHPoint;
 import java.io.File;
+import java.util.List;
+import java.util.Map;
 import org.json.JSONObject;
 import org.junit.AfterClass;
 import org.junit.Before;
@@ -70,7 +73,7 @@ public void testJsonRounding() throws Exception
     {
         JSONObject json = query("point=42.554851234,1.536198&point=42.510071,1.548128&points_encoded=false");
         JSONObject cson = json.getJSONArray("paths").getJSONObject(0).getJSONObject("points");
-        assertTrue("unexpected precision!", cson.toString().indexOf("[1.536374,42.554839]") >= 0);
+        assertTrue("unexpected precision!", cson.toString().contains("[1.536374,42.554839]"));
     }
 
     @Test
@@ -91,6 +94,19 @@ public void testGraphHopperWeb() throws Exception
         assertTrue(rsp.getErrors().toString(), rsp.getErrors().isEmpty());
         assertTrue("distance wasn't correct:" + rsp.getDistance(), rsp.getDistance() > 9000);
         assertTrue("distance wasn't correct:" + rsp.getDistance(), rsp.getDistance() < 9500);
+
+        rsp = hopper.route(new GHRequest().
+                addPoint(new GHPoint(42.554851, 1.536198)).
+                addPoint(new GHPoint(42.531896, 1.553278)).
+                addPoint(new GHPoint(42.510071, 1.548128)));
+        assertTrue(rsp.getErrors().toString(), rsp.getErrors().isEmpty());
+        assertTrue("distance wasn't correct:" + rsp.getDistance(), rsp.getDistance() > 20000);
+        assertTrue("distance wasn't correct:" + rsp.getDistance(), rsp.getDistance() < 21000);
+
+        List<Map<String, Object>> instructions = rsp.getInstructions().createJson();
+        assertEquals(23, instructions.size());
+        assertEquals("Continue onto la Callisa", instructions.get(0).get("text"));
+        assertEquals("At roundabout, take exit 2", instructions.get(3).get("text"));
     }
 
     @Test
@@ -108,7 +124,7 @@ public void testGraphHopperWebRealExceptions()
 
         ex = rsp.getErrors().get(0);
         assertTrue("Wrong Exception found: " + ex.getClass().getName()
-            + ", IllegalStateException expected.", ex instanceof IllegalStateException);
+                + ", IllegalStateException expected.", ex instanceof IllegalStateException);
 
         // IllegalArgumentException (Wrong Points)
         rsp = hopper.route(new GHRequest(0.0, 0.0, 0.0, 0.0));
diff --git a/web/src/test/java/com/graphhopper/http/GraphHopperServletWithEleIT.java b/web/src/test/java/com/graphhopper/http/GraphHopperServletWithEleIT.java
index a70129ef98..7e5aa6af65 100644
--- a/web/src/test/java/com/graphhopper/http/GraphHopperServletWithEleIT.java
+++ b/web/src/test/java/com/graphhopper/http/GraphHopperServletWithEleIT.java
@@ -84,7 +84,7 @@ public void testNoElevation() throws Exception
         assertTrue("distance wasn't correct:" + distance, distance > 2500);
         assertTrue("distance wasn't correct:" + distance, distance < 2700);
         JSONObject cson = path.getJSONObject("points");
-        assertTrue("Elevation should not be included!", cson.toString().indexOf("[7.421392,43.7307]") >= 0);
+        assertTrue("Elevation should not be included!", cson.toString().contains("[7.421392,43.7307]"));
 
         // disable elevation
         json = query("point=43.730864,7.420771&point=43.727687,7.418737&points_encoded=false&elevation=false");
@@ -92,6 +92,6 @@ public void testNoElevation() throws Exception
         assertFalse(infoJson.has("errors"));
         path = json.getJSONArray("paths").getJSONObject(0);
         cson = path.getJSONObject("points");
-        assertTrue("Elevation should not be included!", cson.toString().indexOf("[7.421392,43.7307]") >= 0);
+        assertTrue("Elevation should not be included!", cson.toString().contains("[7.421392,43.7307]"));
     }
 }
diff --git a/web/src/test/java/com/graphhopper/http/GraphHopperWebTest.java b/web/src/test/java/com/graphhopper/http/GraphHopperWebTest.java
index 6b29124e4d..c7c6de2be3 100644
--- a/web/src/test/java/com/graphhopper/http/GraphHopperWebTest.java
+++ b/web/src/test/java/com/graphhopper/http/GraphHopperWebTest.java
@@ -31,25 +31,7 @@
  */
 public class GraphHopperWebTest
 {
-
-    @Test
-    public void testReadUnencoded() throws Exception
-    {
-        Downloader downloader = new Downloader("GraphHopper Test")
-        {
-            @Override
-            public InputStream fetch( String url ) throws IOException
-            {
-                return getClass().getResourceAsStream("test.json");
-            }
-        };
-        GraphHopperWeb instance = new GraphHopperWeb().setPointsEncoded(false);
-        instance.setDownloader(downloader);
-        GHResponse res = instance.route(new GHRequest(52.47379, 13.362808, 52.4736925, 13.3904394));
-        assertEquals(2138.3, res.getDistance(), 1e-1);
-        assertEquals(17, res.getPoints().getSize());
-        assertEquals(5, res.getInstructions().getSize());
-    }
+    // see also GraphHopperServletIT.testGraphHopperWeb for real routes against local jetty service    
 
     @Test
     public void testReadEncoded() throws Exception
@@ -62,7 +44,7 @@ public InputStream fetch( String url ) throws IOException
                 return getClass().getResourceAsStream("test_encoded.json");
             }
         };
-        GraphHopperWeb instance = new GraphHopperWeb().setPointsEncoded(true);
+        GraphHopperWeb instance = new GraphHopperWeb();
         instance.setDownloader(downloader);
         GHResponse res = instance.route(new GHRequest(52.47379, 13.362808, 52.4736925, 13.3904394));
         assertEquals(2138.3, res.getDistance(), 1e-1);
diff --git a/web/src/test/resources/com/graphhopper/http/test.json b/web/src/test/resources/com/graphhopper/http/test.json
deleted file mode 100644
index 734968699f..0000000000
--- a/web/src/test/resources/com/graphhopper/http/test.json
+++ /dev/null
@@ -1,139 +0,0 @@
-{
-  "info": {"took": 0.004322056192904711},
-  "paths": [{
-    "bbox": [
-      13.362853824187303,
-      52.469481955531585,
-      13.385836736460217,
-      52.473849308838446
-    ],
-    "distance": 2138.3027624572337,
-    "instructions": [
-      {
-        "distance": 1268.519329705091,
-        "interval": [
-          0,
-          10
-        ],
-        "sign": 0,
-        "text": "Geradeaus auf A 100",
-        "time": 65237
-      },
-      {
-        "distance": 379.74399999999997,
-        "interval": [
-          10,
-          11
-        ],
-        "sign": 0,
-        "text": "Geradeaus auf Strasse",
-        "time": 24855
-      },
-      {
-        "distance": 16.451,
-        "interval": [
-          11,
-          11
-        ],
-        "sign": 0,
-        "text": "Geradeaus auf Tempelhofer Damm",
-        "time": 1316
-      },
-      {
-        "distance": 473.58843275214315,
-        "interval": [
-          11,
-          12
-        ],
-        "sign": -2,
-        "text": "Links abbiegen auf Tempelhofer Damm, B 96",
-        "time": 37882
-      },
-      {
-        "distance": 0,
-        "interval": [
-          12,
-          12
-        ],
-        "sign": 4,
-        "text": "Ziel erreicht!",
-        "time": 0
-      }
-    ],
-    "points": {
-      "coordinates": [
-        [
-          13.362853824187303,
-          52.473849308838446
-        ],
-        [
-          13.36361795731525,
-          52.47361367509396
-        ],
-        [
-          13.365841769408624,
-          52.47262889458155
-        ],
-        [
-          13.368347585983893,
-          52.47146995674379
-        ],
-        [
-          13.369309455960455,
-          52.47115535597106
-        ],
-        [
-          13.370299824408438,
-          52.470938171541796
-        ],
-        [
-          13.372544498127949,
-          52.47050901808982
-        ],
-        [
-          13.373925277007936,
-          52.47029332377672
-        ],
-        [
-          13.374831267628773,
-          52.470171134252205
-        ],
-        [
-          13.375656233183806,
-          52.47009346194774
-        ],
-        [
-          13.378514089700149,
-          52.46991055019
-        ],
-        [
-          13.379928396193574,
-          52.46987162090551
-        ],
-        [
-          13.384775557773759,
-          52.46952423757742
-        ],
-        [
-          13.385498264107815,
-          52.46948735720264
-        ],
-        [
-          13.385740966776185,
-          52.469481955531585
-        ],
-        [
-          13.385832236390536,
-          52.47358033374504
-        ],
-        [
-          13.385836736460217,
-          52.47374048466245
-        ]
-      ],
-      "type": "LineString"
-    },
-    "points_encoded": false,
-    "time": 129290
-  }]
-}
\ No newline at end of file
