diff --git a/core/src/main/java/com/graphhopper/GraphHopper.java b/core/src/main/java/com/graphhopper/GraphHopper.java
index cb7262a456..641a6fa98d 100644
--- a/core/src/main/java/com/graphhopper/GraphHopper.java
+++ b/core/src/main/java/com/graphhopper/GraphHopper.java
@@ -1152,9 +1152,7 @@ private RoutingTemplate buildRoutingTemplate(GHRequest request, GHResponse ghRsp
         } else if (ALT_ROUTE.equalsIgnoreCase(algoStr)) {
             routingTemplate = new AlternativeRoutingTemplate(request, ghRsp, locationIndex, encodingManager);
         } else if (validPolygonInRequest(request)) {
-            routingTemplate =
-                    new PolygonThroughRoutingTemplate(request, ghRsp, locationIndex, this.getGraphHopperStorage().getNodeAccess(),
-                    this.getGraphHopperStorage(), encodingManager);
+            routingTemplate = new PolygonThroughRoutingTemplate(request, ghRsp, locationIndex, encodingManager);
         } else {
             routingTemplate = new ViaRoutingTemplate(request, ghRsp, locationIndex, encodingManager);
         }
diff --git a/core/src/main/java/com/graphhopper/routing/QueryGraph.java b/core/src/main/java/com/graphhopper/routing/QueryGraph.java
index 09f4ac8d93..407025a19f 100644
--- a/core/src/main/java/com/graphhopper/routing/QueryGraph.java
+++ b/core/src/main/java/com/graphhopper/routing/QueryGraph.java
@@ -695,7 +695,9 @@ public EdgeExplorer createEdgeExplorer() {
 
     @Override
     public AllEdgesIterator getAllEdges() {
-        throw new UnsupportedOperationException("Not supported yet.");
+        // TODO maybe dangerous, let's see...
+        return mainGraph.getAllEdges();
+//        throw new UnsupportedOperationException("Not supported yet.");
     }
 
     @Override
diff --git a/core/src/main/java/com/graphhopper/routing/template/PolygonRoutingTemplate.java b/core/src/main/java/com/graphhopper/routing/template/PolygonRoutingTemplate.java
index 141ba711a7..3a76163065 100644
--- a/core/src/main/java/com/graphhopper/routing/template/PolygonRoutingTemplate.java
+++ b/core/src/main/java/com/graphhopper/routing/template/PolygonRoutingTemplate.java
@@ -6,13 +6,10 @@
 import com.graphhopper.routing.template.polygonRoutingUtil.RouteCandidateList;
 import com.graphhopper.routing.template.polygonRoutingUtil.RouteCandidatePolygon;
 import com.graphhopper.routing.util.EncodingManager;
-import com.graphhopper.storage.Graph;
-import com.graphhopper.storage.GraphHopperStorage;
 import com.graphhopper.storage.NodeAccess;
 import com.graphhopper.storage.index.LocationIndex;
 import com.graphhopper.util.PathMerger;
 import com.graphhopper.util.Translation;
-import com.graphhopper.util.shapes.Polygon;
 import sun.reflect.generics.reflectiveObjects.NotImplementedException;
 
 import java.util.ArrayList;
@@ -20,23 +17,17 @@
 
 public abstract class PolygonRoutingTemplate extends ViaRoutingTemplate {
     private final GHRequest ghRequest;
-    final GraphHopperStorage ghStorage;
-    final NodeAccess nodeAccess;
     final LocationIndex locationIndex;
-    final Graph graph;
-    private QueryGraph queryGraph;
+    NodeAccess nodeAccess;
+    QueryGraph graph;
     AlgorithmOptions algorithmOptions;
     RoutingAlgorithmFactory algoFactory;
     RouteCandidateList<RouteCandidatePolygon> routeCandidates;
 
-    PolygonRoutingTemplate(GHRequest ghRequest, GHResponse ghRsp, LocationIndex locationIndex, Graph graph, NodeAccess nodeAccess, GraphHopperStorage ghStorage,
-                           EncodingManager encodingManager) {
+    PolygonRoutingTemplate(GHRequest ghRequest, GHResponse ghRsp, LocationIndex locationIndex, EncodingManager encodingManager) {
         super(ghRequest, ghRsp, locationIndex, encodingManager);
         this.ghRequest = ghRequest;
-        this.ghStorage = ghStorage;
-        this.nodeAccess = nodeAccess;
         this.locationIndex = locationIndex;
-        this.graph = graph;
         this.pathList = new ArrayList<>(ghRequest.getPoints().size() - 1);
     }
 
@@ -51,7 +42,8 @@
     }
 
     private void setCalcPathsParams(QueryGraph queryGraph, RoutingAlgorithmFactory algoFactory, AlgorithmOptions algoOpts) {
-        this.queryGraph = queryGraph;
+        this.graph = queryGraph;
+        this.nodeAccess = graph.getNodeAccess();
         this.algoFactory = algoFactory;
         this.algorithmOptions = algoOpts;
         this.routeCandidates = new RouteCandidateList<>();
@@ -67,7 +59,7 @@ private void setCalcPathsParams(QueryGraph queryGraph, RoutingAlgorithmFactory a
     private void extractBestPathCandidate() {
         // TODO Maybe more? Dont know what happens in the gui then.
         this.routeCandidates.sortByGainAscending();
-        final List<Path> bestPath = this.routeCandidates.getFirstAsPathList(1, this.queryGraph, this.algorithmOptions);
+        final List<Path> bestPath = this.routeCandidates.getFirstAsPathList(1, this.graph, this.algorithmOptions);
         this.pathList.addAll(bestPath);
     }
 
@@ -105,6 +97,6 @@ public GHRequest getGhRequest() {
     }
 
     public RoutingAlgorithm getNewRoutingAlgorithm() {
-        return this.algoFactory.createAlgo(queryGraph, algorithmOptions);
+        return this.algoFactory.createAlgo(this.graph, this.algorithmOptions);
     }
 }
diff --git a/core/src/main/java/com/graphhopper/routing/template/PolygonThroughRoutingTemplate.java b/core/src/main/java/com/graphhopper/routing/template/PolygonThroughRoutingTemplate.java
index 128c721c5e..3f7845fa12 100644
--- a/core/src/main/java/com/graphhopper/routing/template/PolygonThroughRoutingTemplate.java
+++ b/core/src/main/java/com/graphhopper/routing/template/PolygonThroughRoutingTemplate.java
@@ -4,7 +4,6 @@
 import com.graphhopper.GHResponse;
 import com.graphhopper.routing.template.polygonRoutingUtil.*;
 import com.graphhopper.routing.util.EncodingManager;
-import com.graphhopper.storage.GraphHopperStorage;
 import com.graphhopper.storage.NodeAccess;
 import com.graphhopper.storage.index.LocationIndex;
 import com.graphhopper.storage.index.QueryResult;
@@ -18,9 +17,9 @@
 public class PolygonThroughRoutingTemplate extends PolygonRoutingTemplate {
     private ManyToManyRouting pathSkeletonRouter;
 
-    public PolygonThroughRoutingTemplate(GHRequest ghRequest, GHResponse ghRsp, LocationIndex locationIndex, NodeAccess nodeAccess, GraphHopperStorage ghStorage,
+    public PolygonThroughRoutingTemplate(GHRequest ghRequest, GHResponse ghRsp, LocationIndex locationIndex,
                                          EncodingManager encodingManager) {
-        super(ghRequest, ghRsp, locationIndex, ghStorage.getBaseGraph(), nodeAccess, ghStorage, encodingManager);
+        super(ghRequest, ghRsp, locationIndex, encodingManager);
     }
 
     protected void findCandidateRoutes() {
@@ -71,7 +70,7 @@ private RouteCandidatePolygon buildCandidatePath(int currentPointID, int nextPoi
 
     private List<Integer> findPolygonEntryExitPoints(final List<Integer> nodesInPolygon) {
         final List<Integer> entryExitPoints = new ArrayList<>();
-        final EdgeExplorer edgeExplorer = ghStorage.getBaseGraph().createEdgeExplorer();
+        final EdgeExplorer edgeExplorer = this.graph.createEdgeExplorer();//ghStorage.getBaseGraph().createEdgeExplorer();
 
         addAllNodesNotInPolygonButDirectlyAccessibleFromThereToEntryExitPoints(nodesInPolygon, entryExitPoints, edgeExplorer);
 
diff --git a/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/LOTNodeExtractor.java b/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/LOTNodeExtractor.java
index 7447d3a562..da8a4b556d 100644
--- a/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/LOTNodeExtractor.java
+++ b/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/LOTNodeExtractor.java
@@ -7,7 +7,9 @@
 import com.graphhopper.storage.Graph;
 import com.graphhopper.util.EdgeExplorer;
 import com.graphhopper.util.EdgeIterator;
+import com.graphhopper.util.StopWatch;
 import javafx.util.Pair;
+import org.locationtech.jts.util.Stopwatch;
 
 import java.util.*;
 
@@ -35,7 +37,11 @@ private LOTNodeExtractor(final Graph graph, final RoutingAlgorithmFactory routin
         this.viaPointToLOTNodes = new HashMap<>();
         this.viaPointToEntryExitPointPath = new HashMap<>();
 
+        final Stopwatch sw = new Stopwatch();
+        sw.start();
         this.extractData();
+        sw.stop();
+        System.out.println(sw.getTimeString());
     }
 
     public static LOTNodeExtractor createExtractedData(final Graph graph, final RoutingAlgorithmFactory routingAlgorithmFactory, final AlgorithmOptions algorithmOptions,
diff --git a/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/ManyToManyRouting.java b/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/ManyToManyRouting.java
index 14ad747051..4541b2ae7a 100644
--- a/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/ManyToManyRouting.java
+++ b/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/ManyToManyRouting.java
@@ -5,6 +5,7 @@
 import com.graphhopper.routing.RoutingAlgorithmFactory;
 import com.graphhopper.routing.template.util.QueryGraphCreator;
 import com.graphhopper.storage.Graph;
+import com.graphhopper.storage.GraphHopperStorage;
 
 import java.util.List;
 
diff --git a/core/src/test/java/com/graphhopper/routing/template/PolygonThroughRoutingTemplateTest.java b/core/src/test/java/com/graphhopper/routing/template/PolygonThroughRoutingTemplateTest.java
index 4dff8a98ef..163c349983 100644
--- a/core/src/test/java/com/graphhopper/routing/template/PolygonThroughRoutingTemplateTest.java
+++ b/core/src/test/java/com/graphhopper/routing/template/PolygonThroughRoutingTemplateTest.java
@@ -24,8 +24,7 @@ public void quickStartingTest() {
         GHRequest request = buildRequest(new GHPoint(25, 0), new GHPoint(25, 46));
         GHResponse response = new GHResponse();
         final int maxVisitedNodes = this.graphMocker.algorithmHints.getInt(MAX_VISITED_NODES, Integer.MAX_VALUE);
-        final RoutingTemplate routingTemplate = new PolygonThroughRoutingTemplate(request, response, this.graphMocker.locationIndex, this.graphMocker.nodeAccess,
-                                                                                  this.graphMocker.graph,
+        final RoutingTemplate routingTemplate = new PolygonThroughRoutingTemplate(request, response, this.graphMocker.locationIndex,
                                                                                   this.graphMocker.encodingManager);
         final RoutingAlgorithmFactory algorithmFactory = new RoutingAlgorithmFactorySimple();
         final AlgorithmOptions algorithmOptions = graphMocker.algorithmOptions;
diff --git a/core/src/test/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidateListTest.java b/core/src/test/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidateListTest.java
index 2827541d7b..a9ea46d23d 100644
--- a/core/src/test/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidateListTest.java
+++ b/core/src/test/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidateListTest.java
@@ -21,8 +21,8 @@
     private final PolygonRoutingTestGraph graphMocker = new PolygonRoutingTestGraph();
     private final RouteCandidateList<RouteCandidateMocker> candidateList = new RouteCandidateList<>();
     private final GHRequest ghRequest = new GHRequest(0, 0, 10, 10).setPolygon(new Polygon(new double [] {5, 10, 10, 5}, new double [] {5, 5, 10, 10}));
-    private final PolygonThroughRoutingTemplate routingTemplate = new PolygonThroughRoutingTemplate(ghRequest, null, graphMocker.locationIndex, graphMocker.nodeAccess,
-                                                                                                    graphMocker.graph,graphMocker.encodingManager);
+    private final PolygonThroughRoutingTemplate routingTemplate = new PolygonThroughRoutingTemplate(ghRequest, null, graphMocker.locationIndex,
+                                                                                                    graphMocker.encodingManager);
 
     private void addTestingCandidates() {
         this.candidateList.getCandidates().clear();
diff --git a/core/src/test/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidateTest.java b/core/src/test/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidateTest.java
index 1309f8a252..d431ffa17a 100644
--- a/core/src/test/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidateTest.java
+++ b/core/src/test/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidateTest.java
@@ -17,9 +17,8 @@
 public class RouteCandidateTest {
     private final GHRequest ghRequest = new GHRequest(0, 0, 10, 10).setPolygon(new Polygon(new double [] {5, 10, 10, 5}, new double [] {5, 5, 10, 10}));
     private final PolygonRoutingTestGraph graphMocker = new PolygonRoutingTestGraph();
-    private final PolygonThroughRoutingTemplate routingTemplate = new PolygonThroughRoutingTemplate(ghRequest, null, graphMocker.locationIndex, graphMocker.nodeAccess,
-                                                                                                    graphMocker.graph
-            , graphMocker.encodingManager);
+    private final PolygonThroughRoutingTemplate routingTemplate = new PolygonThroughRoutingTemplate(ghRequest, null, graphMocker.locationIndex,
+                                                                                                    graphMocker.encodingManager);
 
 
     @Test
