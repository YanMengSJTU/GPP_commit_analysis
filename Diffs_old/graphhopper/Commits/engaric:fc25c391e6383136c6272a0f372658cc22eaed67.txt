diff --git a/core/src/main/java/com/graphhopper/GraphHopper.java b/core/src/main/java/com/graphhopper/GraphHopper.java
index 73367faffc..8adf1a44d8 100644
--- a/core/src/main/java/com/graphhopper/GraphHopper.java
+++ b/core/src/main/java/com/graphhopper/GraphHopper.java
@@ -1,14 +1,14 @@
 /*
  *  Licensed to GraphHopper and Peter Karich under one or more contributor
- *  license agreements. See the NOTICE file distributed with this work for 
+ *  license agreements. See the NOTICE file distributed with this work for
  *  additional information regarding copyright ownership.
- * 
- *  GraphHopper licenses this file to you under the Apache License, 
- *  Version 2.0 (the "License"); you may not use this file except in 
+ *
+ *  GraphHopper licenses this file to you under the Apache License,
+ *  Version 2.0 (the "License"); you may not use this file except in
  *  compliance with the License. You may obtain a copy of the License at
- * 
+ *
  *       http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  *  Unless required by applicable law or agreed to in writing, software
  *  distributed under the License is distributed on an "AS IS" BASIS,
  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -144,10 +144,10 @@ public GraphHopper()
      */
     protected GraphHopper loadGraph(GraphStorage g)
     {
-	this.graph = g;
-	fullyLoaded = true;
-	initLocationIndex();
-	return this;
+        this.graph = g;
+        fullyLoaded = true;
+        initLocationIndex();
+        return this;
     }
 
     /**
@@ -156,24 +156,24 @@ protected GraphHopper loadGraph(GraphStorage g)
      */
     public GraphHopper setEncodingManager(EncodingManager em)
     {
-	ensureNotLoaded();
-	this.encodingManager = em;
-	return this;
+        ensureNotLoaded();
+        this.encodingManager = em;
+        return this;
     }
 
     public EncodingManager getEncodingManager()
     {
-	return encodingManager;
+        return encodingManager;
     }
 
     public GraphHopper setElevationProvider(ElevationProvider eleProvider)
     {
-	if (eleProvider == null || eleProvider == ElevationProvider.NOOP)
-	    setElevation(false);
-	else
-	    setElevation(true);
-	this.eleProvider = eleProvider;
-	return this;
+        if (eleProvider == null || eleProvider == ElevationProvider.NOOP)
+            setElevation(false);
+        else
+            setElevation(true);
+        this.eleProvider = eleProvider;
+        return this;
     }
 
     /**
@@ -181,7 +181,7 @@ public GraphHopper setElevationProvider(ElevationProvider eleProvider)
      */
     protected int getWorkerThreads()
     {
-	return workerThreads;
+        return workerThreads;
     }
 
     /**
@@ -189,7 +189,7 @@ protected int getWorkerThreads()
      */
     protected double getWayPointMaxDistance()
     {
-	return osmReaderWayPointMaxDistance;
+        return osmReaderWayPointMaxDistance;
     }
 
     /**
@@ -198,8 +198,8 @@ protected double getWayPointMaxDistance()
      */
     public GraphHopper setWayPointMaxDistance(double wayPointMaxDistance)
     {
-	this.osmReaderWayPointMaxDistance = wayPointMaxDistance;
-	return this;
+        this.osmReaderWayPointMaxDistance = wayPointMaxDistance;
+        return this;
     }
 
     /**
@@ -207,13 +207,13 @@ public GraphHopper setWayPointMaxDistance(double wayPointMaxDistance)
      */
     public GraphHopper setTraversalMode(TraversalMode traversalMode)
     {
-	this.traversalMode = traversalMode;
-	return this;
+        this.traversalMode = traversalMode;
+        return this;
     }
 
     public TraversalMode getTraversalMode()
     {
-	return traversalMode;
+        return traversalMode;
     }
 
     /**
@@ -221,9 +221,9 @@ public TraversalMode getTraversalMode()
      */
     public GraphHopper forServer()
     {
-	// simplify to reduce network IO
-	setSimplifyResponse(true);
-	return setInMemory();
+        // simplify to reduce network IO
+        setSimplifyResponse(true);
+        return setInMemory();
     }
 
     /**
@@ -232,8 +232,8 @@ public GraphHopper forServer()
      */
     public GraphHopper forDesktop()
     {
-	setSimplifyResponse(false);
-	return setInMemory();
+        setSimplifyResponse(false);
+        return setInMemory();
     }
 
     /**
@@ -242,8 +242,8 @@ public GraphHopper forDesktop()
      */
     public GraphHopper forMobile()
     {
-	setSimplifyResponse(false);
-	return setMemoryMapped();
+        setSimplifyResponse(false);
+        return setMemoryMapped();
     }
 
     /**
@@ -253,9 +253,9 @@ public GraphHopper forMobile()
      */
     public GraphHopper setPreciseIndexResolution(int precision)
     {
-	ensureNotLoaded();
-	preciseIndexResolution = precision;
-	return this;
+        ensureNotLoaded();
+        preciseIndexResolution = precision;
+        return this;
     }
 
     /**
@@ -263,9 +263,9 @@ public GraphHopper setPreciseIndexResolution(int precision)
      */
     public GraphHopper setInMemory()
     {
-	ensureNotLoaded();
-	dataAccessType = DAType.RAM_STORE;
-	return this;
+        ensureNotLoaded();
+        dataAccessType = DAType.RAM_STORE;
+        return this;
     }
 
     /**
@@ -278,12 +278,12 @@ public GraphHopper setInMemory()
      */
     public GraphHopper setStoreOnFlush(boolean storeOnFlush)
     {
-	ensureNotLoaded();
-	if (storeOnFlush)
-	    dataAccessType = DAType.RAM_STORE;
-	else
-	    dataAccessType = DAType.RAM;
-	return this;
+        ensureNotLoaded();
+        if (storeOnFlush)
+            dataAccessType = DAType.RAM_STORE;
+        else
+            dataAccessType = DAType.RAM;
+        return this;
     }
 
     /**
@@ -291,9 +291,9 @@ public GraphHopper setStoreOnFlush(boolean storeOnFlush)
      */
     public GraphHopper setMemoryMapped()
     {
-	ensureNotLoaded();
-	dataAccessType = DAType.MMAP;
-	return this;
+        ensureNotLoaded();
+        dataAccessType = DAType.MMAP;
+        return this;
     }
 
     /**
@@ -301,9 +301,9 @@ public GraphHopper setMemoryMapped()
      */
     private GraphHopper setUnsafeMemory()
     {
-	ensureNotLoaded();
-	dataAccessType = DAType.UNSAFE_STORE;
-	return this;
+        ensureNotLoaded();
+        dataAccessType = DAType.UNSAFE_STORE;
+        return this;
     }
 
     /**
@@ -311,8 +311,8 @@ private GraphHopper setUnsafeMemory()
      */
     public GraphHopper setDoPrepare(boolean doPrepare)
     {
-	this.doPrepare = doPrepare;
-	return this;
+        this.doPrepare = doPrepare;
+        return this;
     }
 
     /**
@@ -324,14 +324,14 @@ public GraphHopper setDoPrepare(boolean doPrepare)
      */
     public GraphHopper setCHWeighting(String weighting)
     {
-	ensureNotLoaded();
-	chWeighting = weighting;
-	return this;
+        ensureNotLoaded();
+        chWeighting = weighting;
+        return this;
     }
 
     public String getCHWeighting()
     {
-	return chWeighting;
+        return chWeighting;
     }
 
     /**
@@ -339,14 +339,14 @@ public String getCHWeighting()
      */
     public GraphHopper setCHEnable(boolean enable)
     {
-	ensureNotLoaded();
-	chEnabled = enable;
-	return this;
+        ensureNotLoaded();
+        chEnabled = enable;
+        return this;
     }
 
     public boolean isCHEnabled()
     {
-	return chEnabled;
+        return chEnabled;
     }
 
     /**
@@ -354,7 +354,7 @@ public boolean isCHEnabled()
      */
     public boolean hasElevation()
     {
-	return elevation;
+        return elevation;
     }
 
     /**
@@ -362,8 +362,8 @@ public boolean hasElevation()
      */
     public GraphHopper setElevation(boolean includeElevation)
     {
-	this.elevation = includeElevation;
-	return this;
+        this.elevation = includeElevation;
+        return this;
     }
 
     /**
@@ -372,9 +372,9 @@ public GraphHopper setElevation(boolean includeElevation)
      */
     public GraphHopper setEnableInstructions(boolean b)
     {
-	ensureNotLoaded();
-	enableInstructions = b;
-	return this;
+        ensureNotLoaded();
+        enableInstructions = b;
+        return this;
     }
 
     /**
@@ -382,8 +382,8 @@ public GraphHopper setEnableInstructions(boolean b)
      */
     public GraphHopper setEnableCalcPoints(boolean b)
     {
-	calcPoints = b;
-	return this;
+        calcPoints = b;
+        return this;
     }
 
     /**
@@ -392,8 +392,8 @@ public GraphHopper setEnableCalcPoints(boolean b)
      */
     private GraphHopper setSimplifyResponse(boolean doSimplify)
     {
-	this.simplifyResponse = doSimplify;
-	return this;
+        this.simplifyResponse = doSimplify;
+        return this;
     }
 
     /**
@@ -401,17 +401,17 @@ private GraphHopper setSimplifyResponse(boolean doSimplify)
      */
     public GraphHopper setGraphHopperLocation(String ghLocation)
     {
-	ensureNotLoaded();
-	if (ghLocation == null)
-	    throw new IllegalArgumentException("graphhopper location cannot be null");
+        ensureNotLoaded();
+        if (ghLocation == null)
+            throw new IllegalArgumentException("graphhopper location cannot be null");
 
-	this.ghLocation = ghLocation;
-	return this;
+        this.ghLocation = ghLocation;
+        return this;
     }
 
     public String getGraphHopperLocation()
     {
-	return ghLocation;
+        return ghLocation;
     }
 
     /**
@@ -420,17 +420,17 @@ public String getGraphHopperLocation()
      */
     public GraphHopper setOSMFile(String osmFileStr)
     {
-	ensureNotLoaded();
-	if (Helper.isEmpty(osmFileStr))
-	    throw new IllegalArgumentException("OSM file cannot be empty.");
+        ensureNotLoaded();
+        if (Helper.isEmpty(osmFileStr))
+            throw new IllegalArgumentException("OSM file cannot be empty.");
 
-	osmFile = osmFileStr;
-	return this;
+        osmFile = osmFileStr;
+        return this;
     }
 
     public String getOSMFile()
     {
-	return osmFile;
+        return osmFile;
     }
 
     /**
@@ -441,20 +441,20 @@ public String getOSMFile()
      */
     public GraphStorage getGraph()
     {
-	if (graph == null)
-	    throw new IllegalStateException("Graph not initialized");
+        if (graph == null)
+            throw new IllegalStateException("Graph not initialized");
 
-	return graph;
+        return graph;
     }
 
     public void setGraph(GraphStorage graph)
     {
-	this.graph = graph;
+        this.graph = graph;
     }
 
     protected void setLocationIndex(LocationIndex locationIndex)
     {
-	this.locationIndex = locationIndex;
+        this.locationIndex = locationIndex;
     }
 
     /**
@@ -465,15 +465,15 @@ protected void setLocationIndex(LocationIndex locationIndex)
      */
     public LocationIndex getLocationIndex()
     {
-	if (locationIndex == null)
-	    throw new IllegalStateException("Location index not initialized");
+        if (locationIndex == null)
+            throw new IllegalStateException("Location index not initialized");
 
-	return locationIndex;
+        return locationIndex;
     }
 
     public AlgorithmPreparation getPreparation()
     {
-	return prepare;
+        return prepare;
     }
 
     /**
@@ -481,9 +481,9 @@ public AlgorithmPreparation getPreparation()
      */
     public GraphHopper setSortGraph(boolean sortGraph)
     {
-	ensureNotLoaded();
-	this.sortGraph = sortGraph;
-	return this;
+        ensureNotLoaded();
+        this.sortGraph = sortGraph;
+        return this;
     }
 
     /**
@@ -492,18 +492,18 @@ public GraphHopper setSortGraph(boolean sortGraph)
      */
     public GraphHopper setAllowWrites(boolean allowWrites)
     {
-	this.allowWrites = allowWrites;
-	return this;
+        this.allowWrites = allowWrites;
+        return this;
     }
 
     public boolean isAllowWrites()
     {
-	return allowWrites;
+        return allowWrites;
     }
 
     public TranslationMap getTranslationMap()
     {
-	return trMap;
+        return trMap;
     }
 
     /**
@@ -513,99 +513,99 @@ public TranslationMap getTranslationMap()
      */
     public GraphHopper init(CmdArgs args)
     {
-	args = CmdArgs.readFromConfigAndMerge(args, "config", "graphhopper.config");
-	String tmpOsmFile = args.get("osmreader.osm", "");
-	if (!Helper.isEmpty(tmpOsmFile))
-	    osmFile = tmpOsmFile;
-
-	dataReader = args.get("reader.implementation", dataReader);
-
-	String graphHopperFolder = args.get("graph.location", "");
-	if (Helper.isEmpty(graphHopperFolder) && Helper.isEmpty(ghLocation))
-	{
-	    if (Helper.isEmpty(osmFile))
-		throw new IllegalArgumentException("You need to specify an OSM file.");
-
-	    graphHopperFolder = Helper.pruneFileEnd(osmFile) + "-gh";
-	}
-
-	// graph
-	setGraphHopperLocation(graphHopperFolder);
-	defaultSegmentSize = args.getInt("graph.dataaccess.segmentSize", defaultSegmentSize);
-
-	String graphDATypeStr = args.get("graph.dataaccess", "RAM_STORE");
-	dataAccessType = DAType.fromString(graphDATypeStr);
-
-	sortGraph = args.getBool("graph.doSort", sortGraph);
-	removeZipped = args.getBool("graph.removeZipped", removeZipped);
-	int bytesForFlags = args.getInt("graph.bytesForFlags", 4);
-	if (args.get("graph.locktype", "native").equals("simple"))
-	    lockFactory = new SimpleFSLockFactory();
-	else
-	    lockFactory = new NativeFSLockFactory();
-
-	// elevation
-	String eleProviderStr = args.get("graph.elevation.provider", "noop").toLowerCase();
-	boolean eleCalcMean = args.getBool("graph.elevation.calcmean", false);
-	String cacheDirStr = args.get("graph.elevation.cachedir", "");
-	String baseURL = args.get("graph.elevation.baseurl", "");
-	DAType elevationDAType = DAType.fromString(args.get("graph.elevation.dataaccess", "MMAP"));
-	ElevationProvider tmpProvider = ElevationProvider.NOOP;
-	if (eleProviderStr.equalsIgnoreCase("srtm"))
-	    tmpProvider = new SRTMProvider();
-	else if (eleProviderStr.equalsIgnoreCase("cgiar"))
-	{
-	    CGIARProvider cgiarProvider = new CGIARProvider();
-	    cgiarProvider.setAutoRemoveTemporaryFiles(args.getBool("graph.elevation.cgiar.clear",
-			    true));
-	    tmpProvider = cgiarProvider;
-	}
-
-	tmpProvider.setCalcMean(eleCalcMean);
-	tmpProvider.setCacheDir(new File(cacheDirStr));
-	if (!baseURL.isEmpty())
-	    tmpProvider.setBaseURL(baseURL);
-	tmpProvider.setDAType(elevationDAType);
-	setElevationProvider(tmpProvider);
-
-	// optimizable prepare
-	minNetworkSize = args.getInt("prepare.minNetworkSize", minNetworkSize);
-	minOnewayNetworkSize = args.getInt("prepare.minOnewayNetworkSize", minOnewayNetworkSize);
-
-	// prepare CH
-	doPrepare = args.getBool("prepare.doPrepare", doPrepare);
-	String tmpCHWeighting = args.get("prepare.chWeighting", "fastest");
-	chEnabled = "fastest".equals(tmpCHWeighting) || "shortest".equals(tmpCHWeighting);
-	if (chEnabled)
-	    setCHWeighting(tmpCHWeighting);
-
-	periodicUpdates = args.getInt("prepare.updates.periodic", periodicUpdates);
-	lazyUpdates = args.getInt("prepare.updates.lazy", lazyUpdates);
-	neighborUpdates = args.getInt("prepare.updates.neighbor", neighborUpdates);
-	logMessages = args.getDouble("prepare.logmessages", logMessages);
-
-	// osm import
-	osmReaderWayPointMaxDistance = args.getDouble("osmreader.wayPointMaxDistance",
-			osmReaderWayPointMaxDistance);
-	String flagEncoders = args.get("graph.flagEncoders", "CAR");
-	if (flagEncoders.toLowerCase().contains("turncosts=true"))
-	    traversalMode = TraversalMode.EDGE_BASED_2DIR;
-	encodingManager = new EncodingManager(flagEncoders, bytesForFlags);
-	workerThreads = args.getInt("osmreader.workerThreads", workerThreads);
-	enableInstructions = args.getBool("osmreader.instructions", enableInstructions);
-
-	// index
-	preciseIndexResolution = args.getInt("index.highResolution", preciseIndexResolution);
-	maxRegionSearch = args.getInt("index.maxRegionSearch", maxRegionSearch);
-	return this;
+        args = CmdArgs.readFromConfigAndMerge(args, "config", "graphhopper.config");
+        String tmpOsmFile = args.get("osmreader.osm", "");
+        if (!Helper.isEmpty(tmpOsmFile))
+            osmFile = tmpOsmFile;
+
+        dataReader = args.get("reader.implementation", dataReader);
+
+        String graphHopperFolder = args.get("graph.location", "");
+        if (Helper.isEmpty(graphHopperFolder) && Helper.isEmpty(ghLocation))
+        {
+            if (Helper.isEmpty(osmFile))
+                throw new IllegalArgumentException("You need to specify an OSM file.");
+
+            graphHopperFolder = Helper.pruneFileEnd(osmFile) + "-gh";
+        }
+
+        // graph
+        setGraphHopperLocation(graphHopperFolder);
+        defaultSegmentSize = args.getInt("graph.dataaccess.segmentSize", defaultSegmentSize);
+
+        String graphDATypeStr = args.get("graph.dataaccess", "RAM_STORE");
+        dataAccessType = DAType.fromString(graphDATypeStr);
+
+        sortGraph = args.getBool("graph.doSort", sortGraph);
+        removeZipped = args.getBool("graph.removeZipped", removeZipped);
+        int bytesForFlags = args.getInt("graph.bytesForFlags", 4);
+        if (args.get("graph.locktype", "native").equals("simple"))
+            lockFactory = new SimpleFSLockFactory();
+        else
+            lockFactory = new NativeFSLockFactory();
+
+        // elevation
+        String eleProviderStr = args.get("graph.elevation.provider", "noop").toLowerCase();
+        boolean eleCalcMean = args.getBool("graph.elevation.calcmean", false);
+        String cacheDirStr = args.get("graph.elevation.cachedir", "");
+        String baseURL = args.get("graph.elevation.baseurl", "");
+        DAType elevationDAType = DAType.fromString(args.get("graph.elevation.dataaccess", "MMAP"));
+        ElevationProvider tmpProvider = ElevationProvider.NOOP;
+        if (eleProviderStr.equalsIgnoreCase("srtm"))
+            tmpProvider = new SRTMProvider();
+        else if (eleProviderStr.equalsIgnoreCase("cgiar"))
+        {
+            CGIARProvider cgiarProvider = new CGIARProvider();
+            cgiarProvider.setAutoRemoveTemporaryFiles(args.getBool("graph.elevation.cgiar.clear",
+                    true));
+            tmpProvider = cgiarProvider;
+        }
+
+        tmpProvider.setCalcMean(eleCalcMean);
+        tmpProvider.setCacheDir(new File(cacheDirStr));
+        if (!baseURL.isEmpty())
+            tmpProvider.setBaseURL(baseURL);
+        tmpProvider.setDAType(elevationDAType);
+        setElevationProvider(tmpProvider);
+
+        // optimizable prepare
+        minNetworkSize = args.getInt("prepare.minNetworkSize", minNetworkSize);
+        minOnewayNetworkSize = args.getInt("prepare.minOnewayNetworkSize", minOnewayNetworkSize);
+
+        // prepare CH
+        doPrepare = args.getBool("prepare.doPrepare", doPrepare);
+        String tmpCHWeighting = args.get("prepare.chWeighting", "fastest");
+        chEnabled = "fastest".equals(tmpCHWeighting) || "shortest".equals(tmpCHWeighting);
+        if (chEnabled)
+            setCHWeighting(tmpCHWeighting);
+
+        periodicUpdates = args.getInt("prepare.updates.periodic", periodicUpdates);
+        lazyUpdates = args.getInt("prepare.updates.lazy", lazyUpdates);
+        neighborUpdates = args.getInt("prepare.updates.neighbor", neighborUpdates);
+        logMessages = args.getDouble("prepare.logmessages", logMessages);
+
+        // osm import
+        osmReaderWayPointMaxDistance = args.getDouble("osmreader.wayPointMaxDistance",
+                osmReaderWayPointMaxDistance);
+        String flagEncoders = args.get("graph.flagEncoders", "CAR");
+        if (flagEncoders.toLowerCase().contains("turncosts=true"))
+            traversalMode = TraversalMode.EDGE_BASED_2DIR;
+        encodingManager = new EncodingManager(flagEncoders, bytesForFlags);
+        workerThreads = args.getInt("osmreader.workerThreads", workerThreads);
+        enableInstructions = args.getBool("osmreader.instructions", enableInstructions);
+
+        // index
+        preciseIndexResolution = args.getInt("index.highResolution", preciseIndexResolution);
+        maxRegionSearch = args.getInt("index.maxRegionSearch", maxRegionSearch);
+        return this;
     }
 
     private void printInfo()
     {
-	logger.info("version " + Constants.VERSION + "|" + Constants.BUILD_DATE + " ("
-			+ Constants.getVersions() + ")");
-	if (graph != null)
-	    logger.info("graph " + graph.toString() + ", details:" + graph.toDetailsString());
+        logger.info("version " + Constants.VERSION + "|" + Constants.BUILD_DATE + " ("
+                + Constants.getVersions() + ")");
+        if (graph != null)
+            logger.info("graph " + graph.toString() + ", details:" + graph.toDetailsString());
     }
 
     /**
@@ -615,13 +615,13 @@ private void printInfo()
      */
     public GraphHopper importOrLoad()
     {
-	if (!load(ghLocation))
-	{
-	    printInfo();
-	    process(ghLocation);
-	} else
-	    printInfo();
-	return this;
+        if (!load(ghLocation))
+        {
+            printInfo();
+            process(ghLocation);
+        } else
+            printInfo();
+        return this;
     }
 
     /**
@@ -629,85 +629,85 @@ public GraphHopper importOrLoad()
      */
     private GraphHopper process(String graphHopperLocation)
     {
-	setGraphHopperLocation(graphHopperLocation);
-	Lock lock = null;
-	try
-	{
-	    if (graph.getDirectory().getDefaultType().isStoring())
-	    {
-		lockFactory.setLockDir(new File(graphHopperLocation));
-		lock = lockFactory.create(fileLockName, true);
-		if (!lock.tryLock())
-		    throw new RuntimeException(
-				    "To avoid multiple writers we need to obtain a write lock but it failed. In "
-						    + graphHopperLocation,
-				    lock.getObtainFailedReason());
-	    }
-
-	    try
-	    {
-		importData();
-		graph.getProperties().put("osmreader.import.date", formatDateTime(new Date()));
-	    } catch (IOException ex)
-	    {
-		throw new RuntimeException("Cannot parse OSM file " + getOSMFile(), ex);
-	    }
-	    cleanUp();
-	    optimize();
-	    postProcessing();
-	    flush();
-	} finally
-	{
-	    if (lock != null)
-		lock.release();
-	}
-	return this;
+        setGraphHopperLocation(graphHopperLocation);
+        Lock lock = null;
+        try
+        {
+            if (graph.getDirectory().getDefaultType().isStoring())
+            {
+                lockFactory.setLockDir(new File(graphHopperLocation));
+                lock = lockFactory.create(fileLockName, true);
+                if (!lock.tryLock())
+                    throw new RuntimeException(
+                            "To avoid multiple writers we need to obtain a write lock but it failed. In "
+                                    + graphHopperLocation,
+                                    lock.getObtainFailedReason());
+            }
+
+            try
+            {
+                importData();
+                graph.getProperties().put("osmreader.import.date", formatDateTime(new Date()));
+            } catch (IOException ex)
+            {
+                throw new RuntimeException("Cannot parse OSM file " + getOSMFile(), ex);
+            }
+            cleanUp();
+            optimize();
+            postProcessing();
+            flush();
+        } finally
+        {
+            if (lock != null)
+                lock.release();
+        }
+        return this;
     }
 
     protected DataReader importData() throws IOException
     {
-	ensureWriteAccess();
-	if (graph == null)
-	    throw new IllegalStateException("Load graph before importing OSM data");
+        ensureWriteAccess();
+        if (graph == null)
+            throw new IllegalStateException("Load graph before importing OSM data");
 
-	if (osmFile == null)
-	    throw new IllegalStateException("Couldn't load from existing folder: " + ghLocation
-			    + " but also cannot import from OSM file as it wasn't specified!");
+        if (osmFile == null)
+            throw new IllegalStateException("Couldn't load from existing folder: " + ghLocation
+                    + " but also cannot import from OSM file as it wasn't specified!");
 
-	encodingManager.setEnableInstructions(enableInstructions);
-	DataReader reader = createReader(graph);
-	logger.info("using " + graph.toString() + ", memory:" + Helper.getMemInfo());
-	reader.readGraph();
-	return reader;
+        encodingManager.setEnableInstructions(enableInstructions);
+        DataReader reader = createReader(graph);
+        logger.info("using " + graph.toString() + ", memory:" + Helper.getMemInfo());
+        reader.readGraph();
+        return reader;
     }
 
     protected DataReader createReader(GraphStorage tmpGraph)
     {
-	DataReader reader;
-	if ("OSM".equals(dataReader))
-	    reader = new OSMReader(tmpGraph);
-	else if ("OSITN".equals(dataReader))
-	    reader = new OsItnReader(tmpGraph);
-	else if ("OSDPN".equals(dataReader))
-	    reader = new OsDpnReader(tmpGraph);
-	else
-	{
-	    String exceptionMessage = String.format(READER_UNAVAILABLE, dataReader);
-	    throw new IllegalArgumentException(exceptionMessage);
-	}
-	return initReader(reader);
+        DataReader reader;
+        if ("OSM".equals(dataReader))
+            reader = new OSMReader(tmpGraph);
+        else if ("OSITN".equals(dataReader))
+            reader = new OsItnReader(tmpGraph);
+        else if ("OSDPN".equals(dataReader))
+            reader = new OsDpnReader(tmpGraph);
+        else
+        {
+            String exceptionMessage = String.format(READER_UNAVAILABLE, dataReader);
+            throw new IllegalArgumentException(exceptionMessage);
+        }
+        return initReader(reader);
     }
 
     protected DataReader initReader(DataReader reader)
     {
-	if (osmFile == null)
-	    throw new IllegalArgumentException("No OSM file specified");
+        if (osmFile == null)
+            throw new IllegalArgumentException("No OSM file specified");
 
-	logger.info("start creating graph from " + osmFile);
-	File osmTmpFile = new File(osmFile);
-	return reader.setOSMFile(osmTmpFile).setElevationProvider(eleProvider)
-			.setWorkerThreads(workerThreads).setEncodingManager(encodingManager)
-			.setWayPointMaxDistance(osmReaderWayPointMaxDistance);
+        logger.info("start creating graph from " + osmFile);
+        File osmTmpFile = new File(osmFile);
+        return reader.setOSMFile(osmTmpFile).setElevationProvider(eleProvider)
+                .setWorkerThreads(workerThreads).setEncodingManager(encodingManager)
+                .setWayPointMaxDistance(osmReaderWayPointMaxDistance);
     }
 
     /**
@@ -719,83 +719,83 @@ protected DataReader initReader(DataReader reader)
     @Override
     public boolean load(String graphHopperFolder)
     {
-	if (Helper.isEmpty(graphHopperFolder))
-	    throw new IllegalStateException(
-			    "graphHopperLocation is not specified. call init before");
-
-	if (fullyLoaded)
-	    throw new IllegalStateException("graph is already successfully loaded");
-
-	if (graphHopperFolder.endsWith("-gh"))
-	{
-	    // do nothing
-	} else if (graphHopperFolder.endsWith(".osm") || graphHopperFolder.endsWith(".xml"))
-	    throw new IllegalArgumentException("To import an osm file you need to use importOrLoad");
-	else if (!graphHopperFolder.contains("."))
-	{
-	    if (new File(graphHopperFolder + "-gh").exists())
-		graphHopperFolder += "-gh";
-	} else
-	{
-	    File compressed = new File(graphHopperFolder + ".ghz");
-	    if (compressed.exists() && !compressed.isDirectory())
-		try
-		{
-		    new Unzipper().unzip(compressed.getAbsolutePath(), graphHopperFolder,
-				    removeZipped);
-		} catch (IOException ex)
-		{
-		    throw new RuntimeException("Couldn't extract file "
-				    + compressed.getAbsolutePath() + " to " + graphHopperFolder, ex);
-		}
-	}
-
-	setGraphHopperLocation(graphHopperFolder);
-
-	if (encodingManager == null)
-	    encodingManager = EncodingManager.create(ghLocation);
-
-	if (!allowWrites && dataAccessType.isMMap())
-	    dataAccessType = DAType.MMAP_RO;
-
-	GHDirectory dir = new GHDirectory(ghLocation, dataAccessType);
-	if (chEnabled)
-	    graph = new LevelGraphStorage(dir, encodingManager, hasElevation());
-	else if (encodingManager.needsTurnCostsSupport())
-	    graph = new GraphHopperStorage(dir, encodingManager, hasElevation(),
-			    new TurnCostStorage());
-	else
-	    graph = new GraphHopperStorage(dir, encodingManager, hasElevation());
-
-	graph.setSegmentSize(defaultSegmentSize);
-
-	Lock lock = null;
-	try
-	{
-	    // create locks only if writes are allowed, if they are not allowed
-	    // a lock cannot be created
-	    // (e.g. on a read only filesystem locks would fail)
-	    if (graph.getDirectory().getDefaultType().isStoring() && isAllowWrites())
-	    {
-		lockFactory.setLockDir(new File(ghLocation));
-		lock = lockFactory.create(fileLockName, false);
-		if (!lock.tryLock())
-		    throw new RuntimeException(
-				    "To avoid reading partial data we need to obtain the read lock but it failed. In "
-						    + ghLocation, lock.getObtainFailedReason());
-	    }
-
-	    if (!graph.loadExisting())
-		return false;
-
-	    postProcessing();
-	    fullyLoaded = true;
-	    return true;
-	} finally
-	{
-	    if (lock != null)
-		lock.release();
-	}
+        if (Helper.isEmpty(graphHopperFolder))
+            throw new IllegalStateException(
+                    "graphHopperLocation is not specified. call init before");
+
+        if (fullyLoaded)
+            throw new IllegalStateException("graph is already successfully loaded");
+
+        if (graphHopperFolder.endsWith("-gh"))
+        {
+            // do nothing
+        } else if (graphHopperFolder.endsWith(".osm") || graphHopperFolder.endsWith(".xml"))
+            throw new IllegalArgumentException("To import an osm file you need to use importOrLoad");
+        else if (!graphHopperFolder.contains("."))
+        {
+            if (new File(graphHopperFolder + "-gh").exists())
+                graphHopperFolder += "-gh";
+        } else
+        {
+            File compressed = new File(graphHopperFolder + ".ghz");
+            if (compressed.exists() && !compressed.isDirectory())
+                try
+            {
+                    new Unzipper().unzip(compressed.getAbsolutePath(), graphHopperFolder,
+                            removeZipped);
+            } catch (IOException ex)
+            {
+                throw new RuntimeException("Couldn't extract file "
+                        + compressed.getAbsolutePath() + " to " + graphHopperFolder, ex);
+            }
+        }
+
+        setGraphHopperLocation(graphHopperFolder);
+
+        if (encodingManager == null)
+            encodingManager = EncodingManager.create(ghLocation);
+
+        if (!allowWrites && dataAccessType.isMMap())
+            dataAccessType = DAType.MMAP_RO;
+
+        GHDirectory dir = new GHDirectory(ghLocation, dataAccessType);
+        if (chEnabled)
+            graph = new LevelGraphStorage(dir, encodingManager, hasElevation());
+        else if (encodingManager.needsTurnCostsSupport())
+            graph = new GraphHopperStorage(dir, encodingManager, hasElevation(),
+                    new TurnCostStorage());
+        else
+            graph = new GraphHopperStorage(dir, encodingManager, hasElevation());
+
+        graph.setSegmentSize(defaultSegmentSize);
+
+        Lock lock = null;
+        try
+        {
+            // create locks only if writes are allowed, if they are not allowed
+            // a lock cannot be created
+            // (e.g. on a read only filesystem locks would fail)
+            if (graph.getDirectory().getDefaultType().isStoring() && isAllowWrites())
+            {
+                lockFactory.setLockDir(new File(ghLocation));
+                lock = lockFactory.create(fileLockName, false);
+                if (!lock.tryLock())
+                    throw new RuntimeException(
+                            "To avoid reading partial data we need to obtain the read lock but it failed. In "
+                                    + ghLocation, lock.getObtainFailedReason());
+            }
+
+            if (!graph.loadExisting())
+                return false;
+
+            postProcessing();
+            fullyLoaded = true;
+            return true;
+        } finally
+        {
+            if (lock != null)
+                lock.release();
+        }
     }
 
     /**
@@ -803,30 +803,30 @@ else if (encodingManager.needsTurnCostsSupport())
      */
     protected void postProcessing()
     {
-	encodingManager = graph.getEncodingManager();
-	if (chEnabled)
-	    initCHPrepare();
+        encodingManager = graph.getEncodingManager();
+        if (chEnabled)
+            initCHPrepare();
 
-	if (!isPrepared())
-	    prepare();
-	initLocationIndex();
+        if (!isPrepared())
+            prepare();
+        initLocationIndex();
     }
 
     private boolean isPrepared()
     {
-	return "true".equals(graph.getProperties().get("prepare.done"));
+        return "true".equals(graph.getProperties().get("prepare.done"));
     }
 
     protected void initCHPrepare()
     {
-	FlagEncoder encoder = encodingManager.getSingle();
-	PrepareContractionHierarchies tmpPrepareCH = new PrepareContractionHierarchies(encoder,
-			createWeighting(new WeightingMap(chWeighting), encoder), traversalMode);
-	tmpPrepareCH.setPeriodicUpdates(periodicUpdates).setLazyUpdates(lazyUpdates)
-			.setNeighborUpdates(neighborUpdates).setLogMessages(logMessages);
+        FlagEncoder encoder = encodingManager.getSingle();
+        PrepareContractionHierarchies tmpPrepareCH = new PrepareContractionHierarchies(encoder,
+                createWeighting(new WeightingMap(chWeighting), encoder), traversalMode);
+        tmpPrepareCH.setPeriodicUpdates(periodicUpdates).setLazyUpdates(lazyUpdates)
+        .setNeighborUpdates(neighborUpdates).setLogMessages(logMessages);
 
-	prepare = tmpPrepareCH;
-	prepare.setGraph(graph);
+        prepare = tmpPrepareCH;
+        prepare.setGraph(graph);
     }
 
     /**
@@ -834,7 +834,7 @@ protected void initCHPrepare()
      * created. Note that all URL parameters are available in the weightingParameters as String if
      * you use the GraphHopper Web module.
      * <p>
-     * 
+     *
      * @see Weighting.Params.create
      * @param wMap
      *            all parameters influencing the weighting. E.g. URL parameters coming via GHRequest
@@ -844,186 +844,186 @@ protected void initCHPrepare()
      */
     public Weighting createWeighting(WeightingMap wMap, FlagEncoder encoder)
     {
-	String weighting = wMap.getWeighting();
-	Weighting result;
+        String weighting = wMap.getWeighting();
+        Weighting result;
 
-	if ("shortest".equalsIgnoreCase(weighting))
-	    result = new ShortestWeighting();
-	else if ("fastest".equalsIgnoreCase(weighting) || weighting.isEmpty())
-	{
-	    if (encoder.supports(PriorityWeighting.class))
-		result = new PriorityWeighting(encoder);
-	    else
-		result = new FastestWeighting(encoder);
-	} else
-	    throw new UnsupportedOperationException("weighting " + weighting + " not supported");
+        if ("shortest".equalsIgnoreCase(weighting))
+            result = new ShortestWeighting();
+        else if ("fastest".equalsIgnoreCase(weighting) || weighting.isEmpty())
+        {
+            if (encoder.supports(PriorityWeighting.class))
+                result = new PriorityWeighting(encoder);
+            else
+                result = new FastestWeighting(encoder);
+        } else
+            throw new UnsupportedOperationException("weighting " + weighting + " not supported");
 
-	if (encoder.supports(TurnWeighting.class))
-	    result = new TurnWeighting(result, encoder,
-			    (TurnCostStorage) graph.getExtendedStorage());
-	return result;
+        if (encoder.supports(TurnWeighting.class))
+            result = new TurnWeighting(result, encoder,
+                    (TurnCostStorage) graph.getExtendedStorage());
+        return result;
     }
 
     @Override
     public GHResponse route(GHRequest request)
     {
-	if (graph == null || !fullyLoaded)
-	    throw new IllegalStateException("Call load or importOrLoad before routing");
+        if (graph == null || !fullyLoaded)
+            throw new IllegalStateException("Call load or importOrLoad before routing");
 
-	if (graph.isClosed())
-	    throw new IllegalStateException(
-			    "You need to create a new GraphHopper instance as it is already closed");
+        if (graph.isClosed())
+            throw new IllegalStateException(
+                    "You need to create a new GraphHopper instance as it is already closed");
 
-	GHResponse response = new GHResponse();
-	List<Path> paths = getPaths(request, response);
-	if (response.hasErrors())
-	    return response;
+        GHResponse response = new GHResponse();
+        List<Path> paths = getPaths(request, response);
+        if (response.hasErrors())
+            return response;
 
-	enableInstructions = request.getHints().getBool("instructions", enableInstructions);
-	calcPoints = request.getHints().getBool("calcPoints", calcPoints);
-	double wayPointMaxDistance = request.getHints().getDouble("wayPointMaxDistance", 1d);
-	Locale locale = request.getLocale();
-	DouglasPeucker peucker = new DouglasPeucker().setMaxDistance(wayPointMaxDistance);
+        enableInstructions = request.getHints().getBool("instructions", enableInstructions);
+        calcPoints = request.getHints().getBool("calcPoints", calcPoints);
+        double wayPointMaxDistance = request.getHints().getDouble("wayPointMaxDistance", 1d);
+        Locale locale = request.getLocale();
+        DouglasPeucker peucker = new DouglasPeucker().setMaxDistance(wayPointMaxDistance);
 
-	new PathMerger().setCalcPoints(calcPoints).setDouglasPeucker(peucker)
-			.setEnableInstructions(enableInstructions)
-			.setSimplifyResponse(simplifyResponse && wayPointMaxDistance > 0)
-			.doWork(response, paths, trMap.getWithFallBack(locale));
-	return response;
+        new PathMerger().setCalcPoints(calcPoints).setDouglasPeucker(peucker)
+        .setEnableInstructions(enableInstructions)
+        .setSimplifyResponse(simplifyResponse && wayPointMaxDistance > 0)
+        .doWork(response, paths, trMap.getWithFallBack(locale));
+        return response;
     }
 
     protected List<Path> getPaths(GHRequest request, GHResponse rsp)
     {
-	String vehicle = request.getVehicle();
-	if (vehicle.isEmpty())
-	    vehicle = encodingManager.getSingle().toString();
-
-	if (!encodingManager.supports(vehicle))
-	{
-	    rsp.addError(new IllegalArgumentException("Vehicle " + vehicle + " unsupported. "
-			    + "Supported are: " + getEncodingManager()));
-	    return Collections.emptyList();
-	}
-
-	TraversalMode tMode;
-	String tModeStr = request.getHints().get("traversal_mode", traversalMode.toString());
-	try
-	{
-	    tMode = TraversalMode.fromString(tModeStr);
-	} catch (Exception ex)
-	{
-	    rsp.addError(ex);
-	    return Collections.emptyList();
-	}
-
-	List<GHPoint> points = request.getPoints();
-	if (points.size() < 2)
-	{
-	    rsp.addError(new IllegalStateException(
-			    "At least 2 points has to be specified, but was:" + points.size()));
-	    return Collections.emptyList();
-	}
-
-	FlagEncoder encoder = encodingManager.getEncoder(vehicle);
-	EdgeFilter edgeFilter = new DefaultEdgeFilter(encoder);
-	GHPoint startPoint = points.get(0);
-	StopWatch sw = new StopWatch().start();
-	QueryResult fromRes = locationIndex.findClosest(startPoint.lat, startPoint.lon, edgeFilter);
-	String debug = "idLookup[0]:" + sw.stop().getSeconds() + "s";
-	sw.stop();
-	if (!fromRes.isValid())
-	{
-	    rsp.addError(new IllegalArgumentException("Cannot find point 0: " + startPoint));
-	    return Collections.emptyList();
-	}
-
-	List<Path> paths = new ArrayList<Path>(points.size() - 1);
-	for (int placeIndex = 1; placeIndex < points.size(); placeIndex++)
-	{
-	    GHPoint point = points.get(placeIndex);
-	    sw = new StopWatch().start();
-	    QueryResult toRes = locationIndex.findClosest(point.lat, point.lon, edgeFilter);
-	    debug += ", [" + placeIndex + "] idLookup:" + sw.stop().getSeconds() + "s";
-	    if (!toRes.isValid())
-	    {
-		rsp.addError(new IllegalArgumentException("Cannot find point " + placeIndex + ": "
-				+ point));
-		break;
-	    }
-
-	    sw = new StopWatch().start();
-	    String algoStr = request.getAlgorithm().isEmpty() ? "dijkstrabi" : request
-			    .getAlgorithm();
-	    RoutingAlgorithm algo = null;
-	    if (chEnabled)
-	    {
-		if (prepare == null)
-		    throw new IllegalStateException(
-				    "Preparation object is null. CH-preparation wasn't done or did you "
-						    + "forget to call setCHEnable(false)?");
-
-		if (algoStr.equals("dijkstrabi"))
-		    algo = prepare.createAlgo();
-		else if (algoStr.equals("astarbi"))
-		    algo = ((PrepareContractionHierarchies) prepare).createAStar();
-		else
-		{
-		    rsp.addError(new IllegalStateException(
-				    "Only dijkstrabi and astarbi is supported for LevelGraph (using contraction hierarchies)!"));
-		    break;
-		}
-	    } else
-	    {
-		Weighting weighting = createWeighting(request.getHints(), encoder);
-		prepare = NoOpAlgorithmPreparation.createAlgoPrepare(graph, algoStr, encoder,
-				weighting, tMode);
-		algo = prepare.createAlgo();
-	    }
-
-	    debug += ", algoInit:" + sw.stop().getSeconds() + "s";
-	    sw = new StopWatch().start();
-
-	    Path path = algo.calcPath(fromRes, toRes);
-	    if (path.getMillis() < 0)
-		throw new RuntimeException("Time was negative. Please report as bug and include:"
-				+ request);
-
-	    paths.add(path);
-	    debug += ", " + algo.getName() + "-routing:" + sw.stop().getSeconds() + "s, "
-			    + path.getDebugInfo();
-	    visitedSum.addAndGet(algo.getVisitedNodes());
-	    fromRes = toRes;
-	}
-
-	if (rsp.hasErrors())
-	    return Collections.emptyList();
-
-	if (points.size() - 1 != paths.size())
-	    throw new RuntimeException(
-			    "There should be exactly one more places than paths. places:"
-					    + points.size() + ", paths:" + paths.size());
-
-	rsp.setDebugInfo(debug);
-	return paths;
+        String vehicle = request.getVehicle();
+        if (vehicle.isEmpty())
+            vehicle = encodingManager.getSingle().toString();
+
+        if (!encodingManager.supports(vehicle))
+        {
+            rsp.addError(new IllegalArgumentException("Vehicle " + vehicle + " unsupported. "
+                    + "Supported are: " + getEncodingManager()));
+            return Collections.emptyList();
+        }
+
+        TraversalMode tMode;
+        String tModeStr = request.getHints().get("traversal_mode", traversalMode.toString());
+        try
+        {
+            tMode = TraversalMode.fromString(tModeStr);
+        } catch (Exception ex)
+        {
+            rsp.addError(ex);
+            return Collections.emptyList();
+        }
+
+        List<GHPoint> points = request.getPoints();
+        if (points.size() < 2)
+        {
+            rsp.addError(new IllegalStateException(
+                    "At least 2 points has to be specified, but was:" + points.size()));
+            return Collections.emptyList();
+        }
+
+        FlagEncoder encoder = encodingManager.getEncoder(vehicle);
+        EdgeFilter edgeFilter = new DefaultEdgeFilter(encoder);
+        GHPoint startPoint = points.get(0);
+        StopWatch sw = new StopWatch().start();
+        QueryResult fromRes = locationIndex.findClosest(startPoint.lat, startPoint.lon, edgeFilter);
+        String debug = "idLookup[0]:" + sw.stop().getSeconds() + "s";
+        sw.stop();
+        if (!fromRes.isValid())
+        {
+            rsp.addError(new IllegalArgumentException("Cannot find point 0: " + startPoint));
+            return Collections.emptyList();
+        }
+
+        List<Path> paths = new ArrayList<Path>(points.size() - 1);
+        for (int placeIndex = 1; placeIndex < points.size(); placeIndex++)
+        {
+            GHPoint point = points.get(placeIndex);
+            sw = new StopWatch().start();
+            QueryResult toRes = locationIndex.findClosest(point.lat, point.lon, edgeFilter);
+            debug += ", [" + placeIndex + "] idLookup:" + sw.stop().getSeconds() + "s";
+            if (!toRes.isValid())
+            {
+                rsp.addError(new IllegalArgumentException("Cannot find point " + placeIndex + ": "
+                        + point));
+                break;
+            }
+
+            sw = new StopWatch().start();
+            String algoStr = request.getAlgorithm().isEmpty() ? "dijkstrabi" : request
+                    .getAlgorithm();
+            RoutingAlgorithm algo = null;
+            if (chEnabled)
+            {
+                if (prepare == null)
+                    throw new IllegalStateException(
+                            "Preparation object is null. CH-preparation wasn't done or did you "
+                                    + "forget to call setCHEnable(false)?");
+
+                if (algoStr.equals("dijkstrabi"))
+                    algo = prepare.createAlgo();
+                else if (algoStr.equals("astarbi"))
+                    algo = ((PrepareContractionHierarchies) prepare).createAStar();
+                else
+                {
+                    rsp.addError(new IllegalStateException(
+                            "Only dijkstrabi and astarbi is supported for LevelGraph (using contraction hierarchies)!"));
+                    break;
+                }
+            } else
+            {
+                Weighting weighting = createWeighting(request.getHints(), encoder);
+                prepare = NoOpAlgorithmPreparation.createAlgoPrepare(graph, algoStr, encoder,
+                        weighting, tMode);
+                algo = prepare.createAlgo();
+            }
+
+            debug += ", algoInit:" + sw.stop().getSeconds() + "s";
+            sw = new StopWatch().start();
+
+            Path path = algo.calcPath(fromRes, toRes);
+            if (path.getMillis() < 0)
+                throw new RuntimeException("Time was negative. Please report as bug and include:"
+                        + request);
+
+            paths.add(path);
+            debug += ", " + algo.getName() + "-routing:" + sw.stop().getSeconds() + "s, "
+                    + path.getDebugInfo();
+            visitedSum.addAndGet(algo.getVisitedNodes());
+            fromRes = toRes;
+        }
+
+        if (rsp.hasErrors())
+            return Collections.emptyList();
+
+        if (points.size() - 1 != paths.size())
+            throw new RuntimeException(
+                    "There should be exactly one more places than paths. places:"
+                            + points.size() + ", paths:" + paths.size());
+
+        rsp.setDebugInfo(debug);
+        return paths;
     }
 
     protected LocationIndex createLocationIndex(Directory dir)
     {
-	LocationIndex tmpIndex;
-	if (graph instanceof LevelGraph)
-	    tmpIndex = new LocationIndexTreeSC((LevelGraph) graph, dir);
-	else
-	    tmpIndex = new LocationIndexTree(graph, dir);
-	tmpIndex.setResolution(preciseIndexResolution);
-	((LocationIndexTree) tmpIndex).setMaxRegionSearch(maxRegionSearch);
+        LocationIndex tmpIndex;
+        if (graph instanceof LevelGraph)
+            tmpIndex = new LocationIndexTreeSC((LevelGraph) graph, dir);
+        else
+            tmpIndex = new LocationIndexTree(graph, dir);
+        tmpIndex.setResolution(preciseIndexResolution);
+        ((LocationIndexTree) tmpIndex).setMaxRegionSearch(maxRegionSearch);
 
-	if (!tmpIndex.loadExisting())
-	{
-	    ensureWriteAccess();
-	    tmpIndex.prepareIndex();
-	}
+        if (!tmpIndex.loadExisting())
+        {
+            ensureWriteAccess();
+            tmpIndex.prepareIndex();
+        }
 
-	return tmpIndex;
+        return tmpIndex;
     }
 
     /**
@@ -1034,77 +1034,77 @@ protected LocationIndex createLocationIndex(Directory dir)
      */
     protected void initLocationIndex()
     {
-	if (locationIndex != null)
-	    throw new IllegalStateException("Cannot initialize locationIndex twice!");
+        if (locationIndex != null)
+            throw new IllegalStateException("Cannot initialize locationIndex twice!");
 
-	locationIndex = createLocationIndex(graph.getDirectory());
+        locationIndex = createLocationIndex(graph.getDirectory());
     }
 
     protected void optimize()
     {
-	logger.info("optimizing ... (" + Helper.getMemInfo() + ")");
-	graph.optimize();
-	logger.info("finished optimize (" + Helper.getMemInfo() + ")");
+        logger.info("optimizing ... (" + Helper.getMemInfo() + ")");
+        graph.optimize();
+        logger.info("finished optimize (" + Helper.getMemInfo() + ")");
 
-	// Later: move this into the GraphStorage.optimize method
-	// Or: Doing it after preparation to optimize shortcuts too. But not
-	// possible yet #12
-	if (sortGraph)
-	{
-	    if (graph instanceof LevelGraph && isPrepared())
-		throw new IllegalArgumentException(
-				"Sorting prepared LevelGraph is not possible yet. See #12");
+        // Later: move this into the GraphStorage.optimize method
+        // Or: Doing it after preparation to optimize shortcuts too. But not
+        // possible yet #12
+        if (sortGraph)
+        {
+            if (graph instanceof LevelGraph && isPrepared())
+                throw new IllegalArgumentException(
+                        "Sorting prepared LevelGraph is not possible yet. See #12");
 
-	    GraphStorage newGraph = GHUtility.newStorage(graph);
-	    GHUtility.sortDFS(graph, newGraph);
-	    logger.info("graph sorted (" + Helper.getMemInfo() + ")");
-	    graph = newGraph;
-	}
+            GraphStorage newGraph = GHUtility.newStorage(graph);
+            GHUtility.sortDFS(graph, newGraph);
+            logger.info("graph sorted (" + Helper.getMemInfo() + ")");
+            graph = newGraph;
+        }
     }
 
     protected void prepare()
     {
-	boolean tmpPrepare = doPrepare && prepare != null;
-	if (tmpPrepare)
-	{
-	    ensureWriteAccess();
-	    if (prepare instanceof PrepareContractionHierarchies
-			    && encodingManager.getVehicleCount() > 1)
-		throw new IllegalArgumentException("Contraction hierarchies preparation "
-				+ "requires (at the moment) only one vehicle. But was:"
-				+ encodingManager);
+        boolean tmpPrepare = doPrepare && prepare != null;
+        if (tmpPrepare)
+        {
+            ensureWriteAccess();
+            if (prepare instanceof PrepareContractionHierarchies
+                    && encodingManager.getVehicleCount() > 1)
+                throw new IllegalArgumentException("Contraction hierarchies preparation "
+                        + "requires (at the moment) only one vehicle. But was:"
+                        + encodingManager);
 
-	    logger.info("calling prepare.doWork for " + encodingManager.toString() + " ... ("
-			    + Helper.getMemInfo() + ")");
-	    prepare.doWork();
-	    graph.getProperties().put("prepare.date", formatDateTime(new Date()));
-	}
-	graph.getProperties().put("prepare.done", tmpPrepare);
+            logger.info("calling prepare.doWork for " + encodingManager.toString() + " ... ("
+                    + Helper.getMemInfo() + ")");
+            prepare.doWork();
+            graph.getProperties().put("prepare.date", formatDateTime(new Date()));
+        }
+        graph.getProperties().put("prepare.done", tmpPrepare);
     }
 
     protected void cleanUp()
     {
-	int prev = graph.getNodes();
-	PrepareRoutingSubnetworks preparation = new PrepareRoutingSubnetworks(graph,
-			encodingManager);
-	preparation.setMinNetworkSize(minNetworkSize);
-	preparation.setMinOnewayNetworkSize(this.minOnewayNetworkSize);
-	logger.info("start finding subnetworks, " + Helper.getMemInfo());
-	preparation.doWork();
-	int n = graph.getNodes();
-	// calculate remaining subnetworks
-	int remainingSubnetworks = preparation.findSubnetworks().size();
-	logger.info("edges: " + graph.getAllEdges().getMaxId() + ", nodes " + n + ", there were "
-			+ preparation.getSubNetworks() + " subnetworks. removed them => "
-			+ (prev - n) + " less nodes. Remaining subnetworks:" + remainingSubnetworks);
+        int prev = graph.getNodes();
+        PrepareRoutingSubnetworks preparation = new PrepareRoutingSubnetworks(graph,
+                encodingManager);
+        preparation.setMinNetworkSize(minNetworkSize);
+        preparation.setMinOnewayNetworkSize(this.minOnewayNetworkSize);
+        logger.info("start finding subnetworks, " + Helper.getMemInfo());
+        preparation.doWork();
+        int n = graph.getNodes();
+        // calculate remaining subnetworks
+        int remainingSubnetworks = preparation.findSubnetworks().size();
+        logger.info("edges: " + graph.getAllEdges().getMaxId() + ", nodes " + n + ", there were "
+                + preparation.getSubNetworks() + " subnetworks. removed them => "
+                + (prev - n) + " less nodes. Remaining subnetworks:" + remainingSubnetworks);
     }
 
     protected void flush()
     {
-	logger.info("flushing graph " + graph.toString() + ", details:" + graph.toDetailsString()
-			+ ", " + Helper.getMemInfo() + ")");
-	graph.flush();
-	fullyLoaded = true;
+        logger.info("flushing graph " + graph.toString() + ", details:" + graph.toDetailsString()
+                + ", " + Helper.getMemInfo() + ")");
+        graph.flush();
+        fullyLoaded = true;
     }
 
     /**
@@ -1113,20 +1113,20 @@ protected void flush()
      */
     public void close()
     {
-	if (graph != null)
-	    graph.close();
+        if (graph != null)
+            graph.close();
 
-	if (locationIndex != null)
-	    locationIndex.close();
+        if (locationIndex != null)
+            locationIndex.close();
 
-	try
-	{
-	    lockFactory.forceRemove(fileLockName, true);
-	} catch (Exception ex)
-	{
-	    // silently fail e.g. on Windows where we cannot remove an
-	    // unreleased native lock
-	}
+        try
+        {
+            lockFactory.forceRemove(fileLockName, true);
+        } catch (Exception ex)
+        {
+            // silently fail e.g. on Windows where we cannot remove an
+            // unreleased native lock
+        }
     }
 
     /**
@@ -1135,32 +1135,32 @@ public void close()
      */
     public void clean()
     {
-	if (getGraphHopperLocation().isEmpty())
-	    throw new IllegalStateException(
-			    "Cannot clean GraphHopper without specified graphHopperLocation");
+        if (getGraphHopperLocation().isEmpty())
+            throw new IllegalStateException(
+                    "Cannot clean GraphHopper without specified graphHopperLocation");
 
-	File folder = new File(getGraphHopperLocation());
-	Helper.removeDir(folder);
+        File folder = new File(getGraphHopperLocation());
+        Helper.removeDir(folder);
     }
 
     // make sure this is identical to buildDate used in pom.xml
     // <maven.build.timestamp.format>yyyy-MM-dd'T'HH:mm:ssZ</maven.build.timestamp.format>
     private String formatDateTime(Date date)
     {
-	return new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ").format(date);
+        return new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ").format(date);
     }
 
     protected void ensureNotLoaded()
     {
-	if (fullyLoaded)
-	    throw new IllegalStateException(
-			    "No configuration changes are possible after loading the graph");
+        if (fullyLoaded)
+            throw new IllegalStateException(
+                    "No configuration changes are possible after loading the graph");
     }
 
     protected void ensureWriteAccess()
     {
-	if (!allowWrites)
-	    throw new IllegalStateException("Writes are not allowed!");
+        if (!allowWrites)
+            throw new IllegalStateException("Writes are not allowed!");
     }
 
     /**
@@ -1169,6 +1169,18 @@ protected void ensureWriteAccess()
      */
     public long getVisitedSum()
     {
-	return visitedSum.get();
+        return visitedSum.get();
+    }
+    public GraphHopper setAsOSMReader() {
+        dataReader = "OSM";
+        return this;
+    }
+    public GraphHopper setAsItnReader() {
+        dataReader = "OSITN";
+        return this;
+    }
+    public GraphHopper setAsDpnReader() {
+        dataReader = "OSDPN";
+        return this;
     }
 }
diff --git a/core/src/main/java/com/graphhopper/reader/OSMInputFile.java b/core/src/main/java/com/graphhopper/reader/OSMInputFile.java
index 737d304d55..8c826d0633 100644
--- a/core/src/main/java/com/graphhopper/reader/OSMInputFile.java
+++ b/core/src/main/java/com/graphhopper/reader/OSMInputFile.java
@@ -1,14 +1,14 @@
 /*
  *  Licensed to GraphHopper and Peter Karich under one or more contributor
- *  license agreements. See the NOTICE file distributed with this work for 
+ *  license agreements. See the NOTICE file distributed with this work for
  *  additional information regarding copyright ownership.
- * 
- *  GraphHopper licenses this file to you under the Apache License, 
- *  Version 2.0 (the "License"); you may not use this file except in 
+ *
+ *  GraphHopper licenses this file to you under the Apache License,
+ *  Version 2.0 (the "License"); you may not use this file except in
  *  compliance with the License. You may obtain a copy of the License at
- * 
+ *
  *       http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  *  Unless required by applicable law or agreed to in writing, software
  *  distributed under the License is distributed on an "AS IS" BASIS,
  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -17,14 +17,13 @@
  */
 package com.graphhopper.reader;
 
-import com.graphhopper.reader.pbf.Sink;
-import com.graphhopper.reader.pbf.PbfReader;
-
-import javax.xml.stream.XMLInputFactory;
-import javax.xml.stream.XMLStreamConstants;
-import javax.xml.stream.XMLStreamException;
-import javax.xml.stream.XMLStreamReader;
-import java.io.*;
+import java.io.BufferedInputStream;
+import java.io.Closeable;
+import java.io.File;
+import java.io.FileInputStream;
+import java.io.FileNotFoundException;
+import java.io.IOException;
+import java.io.InputStream;
 import java.lang.reflect.Constructor;
 import java.util.concurrent.BlockingQueue;
 import java.util.concurrent.LinkedBlockingQueue;
@@ -32,6 +31,14 @@
 import java.util.zip.GZIPInputStream;
 import java.util.zip.ZipInputStream;
 
+import javax.xml.stream.XMLInputFactory;
+import javax.xml.stream.XMLStreamConstants;
+import javax.xml.stream.XMLStreamException;
+import javax.xml.stream.XMLStreamReader;
+
+import com.graphhopper.reader.pbf.PbfReader;
+import com.graphhopper.reader.pbf.Sink;
+
 /**
  * A readable OSM file.
  * <p/>
@@ -151,7 +158,7 @@ private void openXMLStream( InputStream in )
         int event = parser.next();
         if (event != XMLStreamConstants.START_ELEMENT || !parser.getLocalName().equalsIgnoreCase("osm"))
         {
-            throw new IllegalArgumentException("File is not a valid OSM stream");
+            throw new IllegalArgumentException("File is not a valid OSM stream. LocalName is " + parser.getLocalName());
         }
 
         eof = false;
@@ -190,23 +197,23 @@ private RoutingElement getNextXML() throws XMLStreamException
                     long id = 0;
                     switch (name.charAt(0))
                     {
-                        case 'n':
-                            // note vs. node
-                            if ("node".equals(name))
-                            {
-                                id = Long.parseLong(idStr);
-                                return OSMNode.create(id, parser);
-                            }
-                            break;
-
-                        case 'w':
+                    case 'n':
+                        // note vs. node
+                        if ("node".equals(name))
                         {
                             id = Long.parseLong(idStr);
-                            return OSMWay.create(id, parser);
+                            return OSMNode.create(id, parser);
                         }
-                        case 'r':
-                            id = Long.parseLong(idStr);
-                            return OSMRelation.create(id, parser);
+                        break;
+
+                    case 'w':
+                    {
+                        id = Long.parseLong(idStr);
+                        return OSMWay.create(id, parser);
+                    }
+                    case 'r':
+                        id = Long.parseLong(idStr);
+                        return OSMRelation.create(id, parser);
                     }
                 }
             }
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/OSITNNode.java b/core/src/main/java/com/graphhopper/reader/osgb/OSITNNode.java
index 21327d543d..0576aacb5d 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/OSITNNode.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/OSITNNode.java
@@ -1,14 +1,14 @@
 /*
  *  Licensed to GraphHopper and Peter Karich under one or more contributor
- *  license agreements. See the NOTICE file distributed with this work for 
+ *  license agreements. See the NOTICE file distributed with this work for
  *  additional information regarding copyright ownership.
- * 
- *  GraphHopper licenses this file to you under the Apache License, 
- *  Version 2.0 (the "License"); you may not use this file except in 
+ *
+ *  GraphHopper licenses this file to you under the Apache License,
+ *  Version 2.0 (the "License"); you may not use this file except in
  *  compliance with the License. You may obtain a copy of the License at
- * 
+ *
  *       http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  *  Unless required by applicable law or agreed to in writing, software
  *  distributed under the License is distributed on an "AS IS" BASIS,
  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -37,7 +37,7 @@
 /**
  * Represents an OSM Node
  * <p/>
- * 
+ *
  * @author Nop
  */
 public class OSITNNode extends OSITNElement implements Node {
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/OsItnReader.java b/core/src/main/java/com/graphhopper/reader/osgb/OsItnReader.java
index 857b1d00aa..0436255309 100755
--- a/core/src/main/java/com/graphhopper/reader/osgb/OsItnReader.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/OsItnReader.java
@@ -949,7 +949,8 @@ private TLongList createStartTowerNodeAndEdge(TLongList osmNodeIds,
         // to a tower.
         int graphIndex = getNodeMap().get(nodeId);
         if (graphIndex < TOWER_NODE) {
-            OSITNNode newNode = addBarrierNode(nodeId);
+            OSITNNode newNode = addBarrierNode(nodeId, true);
+            //            System.out.println("Add Node at start of way from " + nodeId + " to " + osmNodeIds.get(osmNodeIds.size()-1) + " lat lon is " + newNode.getLat() + " " + newNode.getLon());
             long newNodeId = newNode.getId();
             int nodeType = getNodeMap().get(newNodeId);
 
@@ -1391,9 +1392,12 @@ private String checkForNoEntryDirection(long wayId, String wayCoord) {
             // An index < TOWER_NODE means it is a tower node.
             boolean doInsertAdditionalTowerNodes = addAdditionalTowerNodes && (graphIndex < TOWER_NODE);
 
+            //            System.out.println("doInsertAdditionalTowerNodes is " + doInsertAdditionalTowerNodes + " for lastNodeId "+ lastNodeId );
+
             // add end tower here
             if (doInsertAdditionalTowerNodes) {
-                OSITNNode newNode = addBarrierNode(lastNodeId);
+                OSITNNode newNode = addBarrierNode(lastNodeId, true);
+                //                System.out.println("Add End shadow node between " + nodeIdsToCreateWaysFor.get(0) + " and " + lastNodeId + " lat lon is " + newNode.getLat() + " " + newNode.getLon());
                 newNodeId = newNode.getId();
 
                 nodeIdsToCreateWaysFor.set(nodeIdsToCreateWaysFor.size() - 1,
@@ -1613,7 +1617,7 @@ void prepareHighwayNode(long osmId) {
         }
     }
 
-    int addTowerNode(long osmId, double lat, double lon, double ele) {
+    private int addTowerNode(long osmId, double lat, double lon, double ele) {
         if (nodeAccess.is3D())
             nodeAccess.setNode(nextTowerId, lat, lon, ele);
         else
@@ -1834,47 +1838,37 @@ protected void finishedReading() {
         edgeIdToOsmIdMap = null;
         edgeIdToNodeMap = null;
     }
-
     /**
      * Create a copy of the barrier node
      */
     private OSITNNode addBarrierNode(long nodeId) {
+        return addBarrierNode(nodeId, false);
+    }
+    private OSITNNode addBarrierNode(long nodeId, boolean forceAsTower) {
         OSITNNode newNode = null;
         int graphIndex = getNodeMap().get(nodeId);
 
-        if (graphIndex < TOWER_NODE) {
+        if (graphIndex < TOWER_NODE||forceAsTower) {
             graphIndex = -graphIndex - 3;
             // System.out.println("Create Tower node for nodeId " + nodeId +
             // " graphIndex is " + graphIndex);
+
             newNode = new OSITNNode(createNewNodeId(), nodeAccess, graphIndex);
         } else {
             graphIndex = graphIndex - 3;
             try {
-                // System.out.println("Create Pillar node for nodeId " + nodeId
-                // + " graphIndex is " + graphIndex);
-                newNode = new OSITNNode(createNewNodeId(), pillarInfo,
-                        graphIndex);
-                // System.out.println("newNode is " + newNode);
+                newNode = new OSITNNode(createNewNodeId(), pillarInfo, graphIndex);
             } catch (ArrayIndexOutOfBoundsException e) {
                 e.printStackTrace();
             }
         }
 
         final long id = newNode.getId();
-        prepareHighwayNode(id);
-        addNode(newNode);
-        return newNode;
-    }
-
-    /**
-     * Create a copy of the barrier node
-     */
-    private OSITNNode addBarrierNode(long nodeId, double lat, double lon) {
-        OSITNNode newNode = null;
-        newNode = new OSITNNode(createNewNodeId(), lat, lon);
-
-        final long id = newNode.getId();
-        prepareHighwayNode(id);
+        if(forceAsTower) {
+            getNodeMap().put(id, TOWER_NODE);
+        } else {
+            prepareHighwayNode(id);
+        }
         addNode(newNode);
         return newNode;
     }
diff --git a/core/src/main/java/com/graphhopper/routing/Path.java b/core/src/main/java/com/graphhopper/routing/Path.java
index c16696181d..d1dcc2f5f3 100644
--- a/core/src/main/java/com/graphhopper/routing/Path.java
+++ b/core/src/main/java/com/graphhopper/routing/Path.java
@@ -1,14 +1,14 @@
 /*
  *  Licensed to GraphHopper and Peter Karich under one or more contributor
- *  license agreements. See the NOTICE file distributed with this work for 
+ *  license agreements. See the NOTICE file distributed with this work for
  *  additional information regarding copyright ownership.
- * 
- *  GraphHopper licenses this file to you under the Apache License, 
- *  Version 2.0 (the "License"); you may not use this file except in 
+ *
+ *  GraphHopper licenses this file to you under the Apache License,
+ *  Version 2.0 (the "License"); you may not use this file except in
  *  compliance with the License. You may obtain a copy of the License at
- * 
+ *
  *       http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  *  Unless required by applicable law or agreed to in writing, software
  *  distributed under the License is distributed on an "AS IS" BASIS,
  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -46,7 +46,7 @@
  * <p/>
  * @author Peter Karich
  * @author Ottavio Campana
- */     
+ */
 public class Path
 {
     private static final AngleCalc ac = new AngleCalc();
@@ -269,10 +269,11 @@ private void forEveryEdge( EdgeVisitor visitor )
             tmpNode = edgeBase.getBaseNode();
             // later: more efficient swap
             edgeBase = graph.getEdgeProps(edgeBase.getEdge(), tmpNode);
-            // If the add.additional.tower.nodes property is set to true additional zero length edges are created. This means that 
-            // direction calculations are not accurate because they are being calculated between identical locations. To overcome this 
-            // we will skip zero length edges
-            if (edgeBase.getDistance()>0.0) {
+            // If the add.additional.tower.nodes property is set to true additional zero length edges are created. This means that
+            // direction calculations are not accurate because they are being calculated between identical locations. To overcome this
+            // we will skip zero length edges. Unfortunately there is a loss of precision in Lat/Lon calculations in GHNodeAccess so we
+            // have to handle <=0.1 as zero length.
+            if (edgeBase.getDistance()>0.1) {
                 visitor.next(edgeBase, i);
             }
         }
@@ -401,13 +402,14 @@ public void next( EdgeIteratorState edge, int index )
                 double adjLon = nodeAccess.getLongitude(adjNode);
                 double latitude, longitude;
                 PointList wayGeo = edge.fetchWayGeometry(3);
-
                 if (wayGeo.getSize() <= 2)
                 {
+                    // The way is a straight line
                     latitude = adjLat;
                     longitude = adjLon;
                 } else
                 {
+                    // The way contains pillar nodes so calc angle based on the latitude of the 1st one along.
                     latitude = wayGeo.getLatitude(1);
                     longitude = wayGeo.getLongitude(1);
 
@@ -478,12 +480,15 @@ public void next( EdgeIteratorState edge, int index )
 
                 prevLat = adjLat;
                 prevLon = adjLon;
-                if (wayGeo.getSize() <= 2)
+                if (wayGeo.getSize() <= 2) {
                     prevOrientation = orientation;
+                }
                 else
                 {
                     int beforeLast = wayGeo.getSize() - 2;
-                    prevOrientation = ac.calcOrientation(wayGeo.getLatitude(beforeLast), wayGeo.getLongitude(beforeLast),
+                    double latBeforeLast = wayGeo.getLatitude(beforeLast);
+                    double lonBeforeLast = wayGeo.getLongitude(beforeLast);
+                    prevOrientation = ac.calcOrientation(latBeforeLast, lonBeforeLast,
                             adjLat, adjLon);
                 }
 
diff --git a/core/src/main/java/com/graphhopper/util/PointList.java b/core/src/main/java/com/graphhopper/util/PointList.java
index bea0842850..f9af4daf73 100644
--- a/core/src/main/java/com/graphhopper/util/PointList.java
+++ b/core/src/main/java/com/graphhopper/util/PointList.java
@@ -1,15 +1,15 @@
 /*
  *  Licensed to GraphHopper and Peter Karich under one or more contributor
- *  license agreements. See the NOTICE file distributed with this work for 
+ *  license agreements. See the NOTICE file distributed with this work for
  *  additional information regarding copyright ownership.
- * 
- *  GraphHopper licenses this file to you under the Apache License, 
- *  Version 2.0 (the "License"); you may not use this file except 
- *  in compliance with the License. You may obtain a copy of the 
+ *
+ *  GraphHopper licenses this file to you under the Apache License,
+ *  Version 2.0 (the "License"); you may not use this file except
+ *  in compliance with the License. You may obtain a copy of the
  *  License at
  *
  *       http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  *  Unless required by applicable law or agreed to in writing, software
  *  distributed under the License is distributed on an "AS IS" BASIS,
  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -18,12 +18,13 @@
  */
 package com.graphhopper.util;
 
-import com.graphhopper.util.shapes.GHPoint;
-import com.graphhopper.util.shapes.GHPoint3D;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
 
+import com.graphhopper.util.shapes.GHPoint;
+import com.graphhopper.util.shapes.GHPoint3D;
+
 /**
  * Slim list to store several points (without the need for a point object).
  * <p/>
@@ -296,14 +297,14 @@ public String toString()
         {
             if (includeElevation)
                 points.add(new Double[]
-                {
-                    Helper.round6(getLongitude(i)), Helper.round6(getLatitude(i)), Helper.round2(getElevation(i))
-                });
+                        {
+                        Helper.round6(getLongitude(i)), Helper.round6(getLatitude(i)), Helper.round2(getElevation(i))
+                        });
             else
                 points.add(new Double[]
-                {
-                    Helper.round6(getLongitude(i)), Helper.round6(getLatitude(i))
-                });
+                        {
+                        Helper.round6(getLongitude(i)), Helper.round6(getLatitude(i))
+                        });
         }
         return points;
     }
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/WickhamDirectionErrorTest.java b/core/src/test/java/com/graphhopper/reader/osgb/WickhamDirectionErrorTest.java
new file mode 100644
index 0000000000..2b992ad4f5
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/WickhamDirectionErrorTest.java
@@ -0,0 +1,135 @@
+package com.graphhopper.reader.osgb;
+
+import static com.graphhopper.util.GHUtility.count;
+import static org.junit.Assert.assertEquals;
+
+import java.io.File;
+import java.io.IOException;
+import java.util.Locale;
+
+import org.junit.Test;
+
+import com.graphhopper.GHRequest;
+import com.graphhopper.GHResponse;
+import com.graphhopper.GraphHopper;
+import com.graphhopper.routing.util.CarFlagEncoder;
+import com.graphhopper.routing.util.EncodingManager;
+import com.graphhopper.storage.GraphHopperStorage;
+import com.graphhopper.storage.GraphStorage;
+import com.graphhopper.util.EdgeExplorer;
+import com.graphhopper.util.Instruction;
+import com.graphhopper.util.InstructionList;
+import com.graphhopper.util.Translation;
+import com.graphhopper.util.TranslationMap;
+import com.graphhopper.util.shapes.GHPoint;
+
+public class WickhamDirectionErrorTest extends AbstractOsItnReaderTest {
+
+    @Test
+    public void testLeftTurn() throws IOException {
+        final boolean turnRestrictionsImport = true;
+        final boolean is3D = false;
+        final GraphHopperStorage graph = configureStorage(turnRestrictionsImport, is3D, true);
+
+        final File file = new File("./src/test/resources/com/graphhopper/reader/os-itn-wickham-direction-error.xml");
+        readGraphFile(graph, file);
+        testNodes(graph, printNodes(graph));
+    }
+
+    @Test
+    public void testActualGraph() {
+        String graphLoc = "./target/output/os-itn-wickham-direction-error-gh";
+        String inputFile = "./src/test/resources/com/graphhopper/reader/os-itn-wickham-direction-error.xml";
+        GraphHopper graphHopper = new GraphHopper().setInMemory().setOSMFile(inputFile).setGraphHopperLocation(graphLoc).setCHEnable(false).setEncodingManager(encodingManager).setAsItnReader();
+        graphHopper.importOrLoad();
+        GraphStorage graph = graphHopper.getGraph();
+        //        printNodes(graph);
+        testNodes(graph);
+
+        InstructionList instructionList = route(graphHopper, 50.899566,-1.183887, 50.899554,-1.183985);
+        assertEquals(Instruction.CONTINUE_ON_STREET, instructionList.get(0).getSign());
+        assertEquals(Instruction.TURN_SHARP_LEFT, instructionList.get(1).getSign());
+        assertEquals(Instruction.FINISH, instructionList.get(2).getSign());
+
+        instructionList = route(graphHopper, 50.899769,-1.184209, 50.899554,-1.183985);
+        assertEquals(Instruction.CONTINUE_ON_STREET, instructionList.get(0).getSign());
+        assertEquals(Instruction.TURN_RIGHT, instructionList.get(1).getSign());
+        assertEquals(Instruction.FINISH, instructionList.get(2).getSign());
+
+        instructionList = route(graphHopper, 50.899554,-1.183985, 50.899566,-1.183887);
+        assertEquals(Instruction.CONTINUE_ON_STREET, instructionList.get(0).getSign());
+        assertEquals(Instruction.TURN_SHARP_RIGHT, instructionList.get(1).getSign());
+        assertEquals(Instruction.FINISH, instructionList.get(2).getSign());
+
+        instructionList = route(graphHopper, 50.899554,-1.183985, 50.899769,-1.184209);
+        assertEquals(Instruction.CONTINUE_ON_STREET, instructionList.get(0).getSign());
+        assertEquals(Instruction.TURN_LEFT, instructionList.get(1).getSign());
+        assertEquals(Instruction.FINISH, instructionList.get(2).getSign());
+
+        instructionList = route(graphHopper, 50.899799,-1.183769, 50.899368,-1.184035);
+        assertEquals(Instruction.CONTINUE_ON_STREET, instructionList.get(0).getSign());
+        assertEquals(Instruction.TURN_SLIGHT_LEFT, instructionList.get(1).getSign());
+        assertEquals(Instruction.FINISH, instructionList.get(2).getSign());
+
+        instructionList = route(graphHopper, 50.899368,-1.184035, 50.899799,-1.183769);
+        assertEquals(Instruction.CONTINUE_ON_STREET, instructionList.get(0).getSign());
+        assertEquals(Instruction.TURN_SLIGHT_RIGHT, instructionList.get(1).getSign());
+        assertEquals(Instruction.FINISH, instructionList.get(2).getSign());
+
+    }
+    @Test
+    public void testWorkingTurn() {
+        String graphLoc = "/home/phopkins/Documents/graphhopper/core/itn-gh";
+        String inputFile = "/home/phopkins/Development/OSMMITN/data";
+        EncodingManager enc = new EncodingManager(new CarFlagEncoder(5, 5, 3));
+        GraphHopper graphHopper = new GraphHopper().setInMemory().setOSMFile(inputFile).setGraphHopperLocation(graphLoc).setCHEnable(false).setEncodingManager(enc).setAsItnReader();
+        graphHopper.importOrLoad();
+        route(graphHopper, 50.901825,-1.18542, 50.90206,-1.185326);
+
+    }
+
+    private InstructionList route(GraphHopper graphHopper, double lat1, double lon1, double lat2, double lon2) {
+        GHPoint start = new GHPoint(lat1, lon1);
+        GHPoint end = new GHPoint(lat2, lon2);
+        System.out.println("Route from " + start + " to " + end);
+        GHRequest ghRequest = new GHRequest(start, end);
+        ghRequest.setVehicle("car");
+        GHResponse ghResponse = graphHopper.route(ghRequest);
+        //        System.err.println("ghResponse.getPoints() " + ghResponse.getPoints());
+        InstructionList instructionList = ghResponse.getInstructions();
+        //        outputInstructionList(instructionList);
+        return instructionList;
+    }
+    private void outputInstructionList(InstructionList instructionList) {
+        //        System.err.println("ghResponse.getInstructions() " + ghResponse.getInstructions());
+        //        System.err.println("ghResponse.getDebugInfo() " + ghResponse.getDebugInfo());
+        System.out.println("Turn Descriptions:");
+        Translation tr = new TranslationMap().doImport().getWithFallBack(Locale.US);
+        for (Instruction instruction : instructionList) {
+            System.out.println("\t" + instruction.getName() + "\t" + instruction.getDistance() + "\t" + instruction.getSign() + "\t" + instruction.getTime() + "\t" + instruction.getTurnDescription(tr));
+        }
+        System.out.println("End Turn Descriptions");
+
+    }
+    private EdgeExplorer printNodes(GraphStorage graph) {
+        final EdgeExplorer explorer = graph.createEdgeExplorer(carOutEdges);
+        printNodes(explorer, 9);
+        return explorer;
+    }
+    private void testNodes(GraphStorage graph) {
+        testNodes(graph, graph.createEdgeExplorer(carOutEdges));
+    }
+    private void testNodes(GraphStorage graph, EdgeExplorer explorer) {
+        assertEquals(9, graph.getNodes());
+        assertEquals(4, count(explorer.setBaseNode(0)));
+        assertEquals(2, count(explorer.setBaseNode(1)));
+        assertEquals(1, count(explorer.setBaseNode(2)));
+        assertEquals(2, count(explorer.setBaseNode(3)));
+        assertEquals(1, count(explorer.setBaseNode(4)));
+        assertEquals(2, count(explorer.setBaseNode(5)));
+        assertEquals(1, count(explorer.setBaseNode(6)));
+        assertEquals(2, count(explorer.setBaseNode(7)));
+        assertEquals(1, count(explorer.setBaseNode(8)));
+
+    }
+}
diff --git a/core/src/test/resources/com/graphhopper/reader/os-itn-wickham-direction-error.xml b/core/src/test/resources/com/graphhopper/reader/os-itn-wickham-direction-error.xml
new file mode 100644
index 0000000000..ed8eda6a13
--- /dev/null
+++ b/core/src/test/resources/com/graphhopper/reader/os-itn-wickham-direction-error.xml
@@ -0,0 +1,1340 @@
+<?xml version='1.0' encoding='UTF-8'?>
+<osgb:FeatureCollection xmlns:osgb='http://www.ordnancesurvey.co.uk/xml/namespaces/osgb'
+	xmlns:gml='http://www.opengis.net/gml' xmlns:xlink='http://www.w3.org/1999/xlink' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
+	xsi:schemaLocation='http://www.ordnancesurvey.co.uk/xml/namespaces/osgb http://www.ordnancesurvey.co.uk/xml/schema/v7/OSDNFFeatures.xsd'
+	fid='GDS-58096-1'>
+	<gml:description>Ordnance Survey, (c) Crown Copyright. All rights reserved, 2009-07-30</gml:description>
+	<gml:boundedBy>
+		<gml:null>unknown</gml:null>
+	</gml:boundedBy>
+	<osgb:queryTime>2009-07-30T02:01:07</osgb:queryTime>
+	<osgb:queryExtent>
+		<osgb:Rectangle srsName='osgb:BNG'>
+			<gml:coordinates>291000.000,92000.000 293000.000,94000.000</gml:coordinates>
+		</osgb:Rectangle>
+	</osgb:queryExtent>
+	<osgb:networkMember>
+		<osgb:RoadLink fid='osgb4000000023260646'>
+			<osgb:version>6</osgb:version>
+			<osgb:versionDate>2009-01-28</osgb:versionDate>
+			<osgb:theme>Road Network</osgb:theme>
+			<osgb:changeHistory>
+				<osgb:changeDate>2002-11-06</osgb:changeDate>
+				<osgb:reasonForChange>New</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2005-01-21</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2008-12-23</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:descriptiveGroup>Road Topology</osgb:descriptiveGroup>
+			<osgb:descriptiveTerm>A Road</osgb:descriptiveTerm>
+			<osgb:natureOfRoad>Single Carriageway</osgb:natureOfRoad>
+			<osgb:length>730.58</osgb:length>
+			<osgb:polyline>
+				<gml:LineString srsName='osgb:BNG'>
+					<gml:coordinates>457940.811,112011.509 457932.392,112000.346 457884.944,111934.464 457847.967,111886.226
+						457763.419,111782.254 457736.288,111750.000 457667.372,111668.067 457656.185,111653.348 457626.757,111607.877
+						457612.647,111586.974 457564.430,111527.395 457543.652,111504.939 457529.923,111493.301 457514.553,111481.630
+						457494.446,111462.840 457488.200,111456.708 457485.208,111453.419 457482.672,111445.524 </gml:coordinates>
+				</gml:LineString>
+			</osgb:polyline>
+			<osgb:directedNode orientation='-' xlink:href='#osgb4000000023816646' />
+			<osgb:directedNode orientation='+' xlink:href='#osgb4000000023116559' />
+			<osgb:referenceToTopographicArea xlink:href='#osgb1000000138153077' />
+			<osgb:referenceToTopographicArea xlink:href='#osgb1000002105570177' />
+			<osgb:referenceToTopographicArea xlink:href='#osgb1000002105687867' />
+		</osgb:RoadLink>
+	</osgb:networkMember>
+	<osgb:networkMember>
+		<osgb:RoadLink fid='osgb4000000023268896'>
+			<osgb:version>5</osgb:version>
+			<osgb:versionDate>2005-09-15</osgb:versionDate>
+			<osgb:theme>Road Network</osgb:theme>
+			<osgb:changeHistory>
+				<osgb:changeDate>2002-11-06</osgb:changeDate>
+				<osgb:reasonForChange>New</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2002-11-06</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2005-01-21</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:descriptiveGroup>Road Topology</osgb:descriptiveGroup>
+			<osgb:descriptiveTerm>A Road</osgb:descriptiveTerm>
+			<osgb:natureOfRoad>Single Carriageway</osgb:natureOfRoad>
+			<osgb:length>217.97</osgb:length>
+			<osgb:polyline>
+				<gml:LineString srsName='osgb:BNG'>
+					<gml:coordinates>457482.672,111445.524 457479.758,111425.858 457478.496,111421.202 457478.525,111399.219
+						457479.729,111369.831 457483.067,111290.806 457487.766,111230.089 457487.771,111230.000 457487.874,111228.207
+					</gml:coordinates>
+				</gml:LineString>
+			</osgb:polyline>
+			<osgb:directedNode orientation='-' xlink:href='#osgb4000000023116559' />
+			<osgb:directedNode orientation='+' xlink:href='#osgb4000000023116530' />
+			<osgb:referenceToTopographicArea xlink:href='#osgb1000002105570177' />
+			<osgb:referenceToTopographicArea xlink:href='#osgb1000002105570285' />
+			<osgb:referenceToTopographicArea xlink:href='#osgb1000002105571082' />
+			<osgb:referenceToTopographicArea xlink:href='#osgb1000002105569880' />
+		</osgb:RoadLink>
+	</osgb:networkMember>
+	<osgb:networkMember>
+		<osgb:RoadLink fid='osgb4000000023319651'>
+			<osgb:version>6</osgb:version>
+			<osgb:versionDate>2009-01-31</osgb:versionDate>
+			<osgb:theme>Road Network</osgb:theme>
+			<osgb:changeHistory>
+				<osgb:changeDate>2002-11-06</osgb:changeDate>
+				<osgb:reasonForChange>New</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2005-01-21</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2006-01-06</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2008-12-23</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:descriptiveGroup>Road Topology</osgb:descriptiveGroup>
+			<osgb:descriptiveTerm>Minor Road</osgb:descriptiveTerm>
+			<osgb:natureOfRoad>Single Carriageway</osgb:natureOfRoad>
+			<osgb:length>56.44</osgb:length>
+			<osgb:polyline>
+				<gml:LineString srsName='osgb:BNG'>
+					<gml:coordinates>457437.267,111478.508 457444.619,111473.927 457459.127,111464.575 457462.923,111462.274
+						457477.009,111452.265 457482.672,111445.524 </gml:coordinates>
+				</gml:LineString>
+			</osgb:polyline>
+			<osgb:directedNode orientation='-' xlink:href='#osgb4000000023816638' />
+			<osgb:directedNode orientation='+' xlink:href='#osgb4000000023116559' />
+			<osgb:referenceToTopographicArea xlink:href='#osgb1000002105570174' />
+			<osgb:referenceToTopographicArea xlink:href='#osgb1000002105570176' />
+			<osgb:referenceToTopographicArea xlink:href='#osgb1000002105570177' />
+			<osgb:referenceToTopographicArea xlink:href='#osgb1000002105687867' />
+		</osgb:RoadLink>
+	</osgb:networkMember>
+	<osgb:networkMember>
+		<osgb:RoadNode fid='osgb4000000023116530'>
+			<osgb:version>3</osgb:version>
+			<osgb:versionDate>2005-09-12</osgb:versionDate>
+			<osgb:theme>Road Network</osgb:theme>
+			<osgb:changeHistory>
+				<osgb:changeDate>2002-10-28</osgb:changeDate>
+				<osgb:reasonForChange>New</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2005-01-21</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:descriptiveGroup>Road Topology</osgb:descriptiveGroup>
+			<osgb:point>
+				<gml:Point srsName='osgb:BNG'>
+					<gml:coordinates>457487.874,111228.207</gml:coordinates>
+				</gml:Point>
+			</osgb:point>
+			<osgb:referenceToTopographicArea xlink:href='#osgb1000002105571082' />
+		</osgb:RoadNode>
+	</osgb:networkMember>
+	<osgb:networkMember>
+		<osgb:RoadNode fid='osgb4000000023116559'>
+			<osgb:version>3</osgb:version>
+			<osgb:versionDate>2005-09-12</osgb:versionDate>
+			<osgb:theme>Road Network</osgb:theme>
+			<osgb:changeHistory>
+				<osgb:changeDate>2002-11-06</osgb:changeDate>
+				<osgb:reasonForChange>New</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2005-01-21</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:descriptiveGroup>Road Topology</osgb:descriptiveGroup>
+			<osgb:point>
+				<gml:Point srsName='osgb:BNG'>
+					<gml:coordinates>457482.672,111445.524</gml:coordinates>
+				</gml:Point>
+			</osgb:point>
+			<osgb:referenceToTopographicArea xlink:href='#osgb1000002105570177' />
+		</osgb:RoadNode>
+	</osgb:networkMember>
+	<osgb:networkMember>
+		<osgb:RoadNode fid='osgb4000000023116560'>
+			<osgb:version>3</osgb:version>
+			<osgb:versionDate>2005-09-12</osgb:versionDate>
+			<osgb:theme>Road Network</osgb:theme>
+			<osgb:changeHistory>
+				<osgb:changeDate>2002-10-28</osgb:changeDate>
+				<osgb:reasonForChange>New</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2005-01-21</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:descriptiveGroup>Road Topology</osgb:descriptiveGroup>
+			<osgb:point>
+				<gml:Point srsName='osgb:BNG'>
+					<gml:coordinates>457541.924,111405.869</gml:coordinates>
+				</gml:Point>
+			</osgb:point>
+			<osgb:referenceToTopographicArea xlink:href='#osgb1000002105687868' />
+		</osgb:RoadNode>
+	</osgb:networkMember>
+	<osgb:networkMember>
+		<osgb:RoadNode fid='osgb4000000023816638'>
+			<osgb:version>1</osgb:version>
+			<osgb:versionDate>2009-01-28</osgb:versionDate>
+			<osgb:theme>Road Network</osgb:theme>
+			<osgb:changeHistory>
+				<osgb:changeDate>2008-12-23</osgb:changeDate>
+				<osgb:reasonForChange>New</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:descriptiveGroup>Road Topology</osgb:descriptiveGroup>
+			<osgb:point>
+				<gml:Point srsName='osgb:BNG'>
+					<gml:coordinates>457437.267,111478.508</gml:coordinates>
+				</gml:Point>
+			</osgb:point>
+			<osgb:referenceToTopographicArea xlink:href='#osgb1000002105570174' />
+		</osgb:RoadNode>
+	</osgb:networkMember>
+	<osgb:networkMember>
+		<osgb:RoadNode fid='osgb4000000023816646'>
+			<osgb:version>1</osgb:version>
+			<osgb:versionDate>2009-01-28</osgb:versionDate>
+			<osgb:theme>Road Network</osgb:theme>
+			<osgb:changeHistory>
+				<osgb:changeDate>2008-12-23</osgb:changeDate>
+				<osgb:reasonForChange>New</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:descriptiveGroup>Road Topology</osgb:descriptiveGroup>
+			<osgb:point>
+				<gml:Point srsName='osgb:BNG'>
+					<gml:coordinates>457940.811,112011.509</gml:coordinates>
+				</gml:Point>
+			</osgb:point>
+			<osgb:referenceToTopographicArea xlink:href='#osgb1000000138153077' />
+		</osgb:RoadNode>
+	</osgb:networkMember>
+	<osgb:roadMember>
+		<osgb:Road fid='osgb4000000023468466'>
+			<osgb:version>3</osgb:version>
+			<osgb:versionDate>2010-04-01</osgb:versionDate>
+			<osgb:theme>Road Network</osgb:theme>
+			<osgb:changeHistory>
+				<osgb:changeDate>2003-03-13</osgb:changeDate>
+				<osgb:reasonForChange>New</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2010-02-18</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:descriptiveGroup>Named Road</osgb:descriptiveGroup>
+			<osgb:roadName>SCHOOL ROAD</osgb:roadName>
+			<osgb:networkMember xlink:href='#osgb4000000023268896' />
+			<osgb:networkMember xlink:href='#osgb4000000023285730' />
+			<osgb:networkMember xlink:href='#osgb4000000023417251' />
+			<osgb:networkMember xlink:href='#osgb4000000023417254' />
+			<osgb:boundedBy>
+				<gml:Box srsName='osgb:BNG'>
+					<gml:coordinates>457478.496,111016.932 457502.950,111445.524</gml:coordinates>
+				</gml:Box>
+			</osgb:boundedBy>
+		</osgb:Road>
+	</osgb:roadMember>
+	<osgb:roadMember>
+		<osgb:Road fid='osgb4000000023472757'>
+			<osgb:version>2</osgb:version>
+			<osgb:versionDate>2005-09-12</osgb:versionDate>
+			<osgb:theme>Road Network</osgb:theme>
+			<osgb:changeHistory>
+				<osgb:changeDate>2003-03-13</osgb:changeDate>
+				<osgb:reasonForChange>New</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:descriptiveGroup>Named Road</osgb:descriptiveGroup>
+			<osgb:roadName>SOUTHWICK ROAD</osgb:roadName>
+			<osgb:networkMember xlink:href='#osgb4000000023260515' />
+			<osgb:networkMember xlink:href='#osgb4000000023260517' />
+			<osgb:networkMember xlink:href='#osgb4000000023268898' />
+			<osgb:networkMember xlink:href='#osgb4000000023285735' />
+			<osgb:networkMember xlink:href='#osgb4000000023319648' />
+			<osgb:networkMember xlink:href='#osgb4000000023370450' />
+			<osgb:networkMember xlink:href='#osgb4000000023370471' />
+			<osgb:networkMember xlink:href='#osgb4000000023370472' />
+			<osgb:boundedBy>
+				<gml:Box srsName='osgb:BNG'>
+					<gml:coordinates>457482.672,110844.229 459331.606,111445.524</gml:coordinates>
+				</gml:Box>
+			</osgb:boundedBy>
+		</osgb:Road>
+	</osgb:roadMember>
+	<osgb:roadMember>
+		<osgb:Road fid='osgb4000000023481095'>
+			<osgb:version>3</osgb:version>
+			<osgb:versionDate>2009-02-02</osgb:versionDate>
+			<osgb:theme>Road Network</osgb:theme>
+			<osgb:changeHistory>
+				<osgb:changeDate>2003-03-13</osgb:changeDate>
+				<osgb:reasonForChange>New</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2008-12-23</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:descriptiveGroup>Named Road</osgb:descriptiveGroup>
+			<osgb:roadName>BRIDGE STREET</osgb:roadName>
+			<osgb:networkMember xlink:href='#osgb4000000023319651' />
+			<osgb:networkMember xlink:href='#osgb4000000023319652' />
+			<osgb:networkMember xlink:href='#osgb4000000023816656' />
+			<osgb:boundedBy>
+				<gml:Box srsName='osgb:BNG'>
+					<gml:coordinates>457300.287,111445.524 457482.672,111534.965</gml:coordinates>
+				</gml:Box>
+			</osgb:boundedBy>
+		</osgb:Road>
+	</osgb:roadMember>
+	<osgb:roadMember>
+		<osgb:Road fid='osgb4000000023510367'>
+			<osgb:version>28</osgb:version>
+			<osgb:versionDate>2014-04-03</osgb:versionDate>
+			<osgb:theme>Road Network</osgb:theme>
+			<osgb:changeHistory>
+				<osgb:changeDate>2004-10-09</osgb:changeDate>
+				<osgb:reasonForChange>New</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2005-02-11</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2005-04-24</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2005-11-16</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2006-04-07</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2006-06-16</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2006-10-20</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2006-11-24</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2007-03-16</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2007-07-18</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2008-03-26</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2008-07-18</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2008-09-05</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2008-10-28</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2008-11-20</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2009-01-16</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2009-02-23</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2009-05-26</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2009-09-28</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2009-11-17</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2010-04-21</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2011-03-28</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2012-06-27</osgb:changeDate>
+				<osgb:reasonForChange>Attributes</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2013-07-11</osgb:changeDate>
+				<osgb:reasonForChange>Attributes</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2013-10-11</osgb:changeDate>
+				<osgb:reasonForChange>Attributes</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2014-01-17</osgb:changeDate>
+				<osgb:reasonForChange>Attributes</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2014-04-03</osgb:changeDate>
+				<osgb:reasonForChange>Attributes</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:descriptiveGroup>B Road</osgb:descriptiveGroup>
+			<osgb:roadName>B2177</osgb:roadName>
+			<osgb:networkMember xlink:href='#osgb4000000023260486' />
+			<osgb:networkMember xlink:href='#osgb4000000023260487' />
+			<osgb:networkMember xlink:href='#osgb4000000023260515' />
+			<osgb:networkMember xlink:href='#osgb4000000023260517' />
+			<osgb:networkMember xlink:href='#osgb4000000023260521' />
+			<osgb:networkMember xlink:href='#osgb4000000023260522' />
+			<osgb:networkMember xlink:href='#osgb4000000023260524' />
+			<osgb:networkMember xlink:href='#osgb4000000023260527' />
+			<osgb:networkMember xlink:href='#osgb4000000023260534' />
+			<osgb:networkMember xlink:href='#osgb4000000023260536' />
+			<osgb:networkMember xlink:href='#osgb4000000023260588' />
+			<osgb:networkMember xlink:href='#osgb4000000023260598' />
+			<osgb:networkMember xlink:href='#osgb4000000023260615' />
+			<osgb:networkMember xlink:href='#osgb4000000023260616' />
+			<osgb:networkMember xlink:href='#osgb4000000023260633' />
+			<osgb:networkMember xlink:href='#osgb4000000023260635' />
+			<osgb:networkMember xlink:href='#osgb4000000023260739' />
+			<osgb:networkMember xlink:href='#osgb4000000023260743' />
+			<osgb:networkMember xlink:href='#osgb4000000023268849' />
+			<osgb:networkMember xlink:href='#osgb4000000023268855' />
+			<osgb:networkMember xlink:href='#osgb4000000023268898' />
+			<osgb:networkMember xlink:href='#osgb4000000023268912' />
+			<osgb:networkMember xlink:href='#osgb4000000023268913' />
+			<osgb:networkMember xlink:href='#osgb4000000023269040' />
+			<osgb:networkMember xlink:href='#osgb4000000023269055' />
+			<osgb:networkMember xlink:href='#osgb4000000023269062' />
+			<osgb:networkMember xlink:href='#osgb4000000023269093' />
+			<osgb:networkMember xlink:href='#osgb4000000023269095' />
+			<osgb:networkMember xlink:href='#osgb4000000023269106' />
+			<osgb:networkMember xlink:href='#osgb4000000023269321' />
+			<osgb:networkMember xlink:href='#osgb4000000023269322' />
+			<osgb:networkMember xlink:href='#osgb4000000023285590' />
+			<osgb:networkMember xlink:href='#osgb4000000023285591' />
+			<osgb:networkMember xlink:href='#osgb4000000023285602' />
+			<osgb:networkMember xlink:href='#osgb4000000023285654' />
+			<osgb:networkMember xlink:href='#osgb4000000023285734' />
+			<osgb:networkMember xlink:href='#osgb4000000023285735' />
+			<osgb:networkMember xlink:href='#osgb4000000023285763' />
+			<osgb:networkMember xlink:href='#osgb4000000023286049' />
+			<osgb:networkMember xlink:href='#osgb4000000023286050' />
+			<osgb:networkMember xlink:href='#osgb4000000023286051' />
+			<osgb:networkMember xlink:href='#osgb4000000023286066' />
+			<osgb:networkMember xlink:href='#osgb4000000023286067' />
+			<osgb:networkMember xlink:href='#osgb4000000023286181' />
+			<osgb:networkMember xlink:href='#osgb4000000023286185' />
+			<osgb:networkMember xlink:href='#osgb4000000023286193' />
+			<osgb:networkMember xlink:href='#osgb4000000023286195' />
+			<osgb:networkMember xlink:href='#osgb4000000023286200' />
+			<osgb:networkMember xlink:href='#osgb4000000023286210' />
+			<osgb:networkMember xlink:href='#osgb4000000023286215' />
+			<osgb:networkMember xlink:href='#osgb4000000023286237' />
+			<osgb:networkMember xlink:href='#osgb4000000023286494' />
+			<osgb:networkMember xlink:href='#osgb4000000023286518' />
+			<osgb:networkMember xlink:href='#osgb4000000023286540' />
+			<osgb:networkMember xlink:href='#osgb4000000023286541' />
+			<osgb:networkMember xlink:href='#osgb4000000023286542' />
+			<osgb:networkMember xlink:href='#osgb4000000023286543' />
+			<osgb:networkMember xlink:href='#osgb4000000023286824' />
+			<osgb:networkMember xlink:href='#osgb4000000023319456' />
+			<osgb:networkMember xlink:href='#osgb4000000023319475' />
+			<osgb:networkMember xlink:href='#osgb4000000023319495' />
+			<osgb:networkMember xlink:href='#osgb4000000023319496' />
+			<osgb:networkMember xlink:href='#osgb4000000023319556' />
+			<osgb:networkMember xlink:href='#osgb4000000023319558' />
+			<osgb:networkMember xlink:href='#osgb4000000023319648' />
+			<osgb:networkMember xlink:href='#osgb4000000023319669' />
+			<osgb:networkMember xlink:href='#osgb4000000023319677' />
+			<osgb:networkMember xlink:href='#osgb4000000023319695' />
+			<osgb:networkMember xlink:href='#osgb4000000023319696' />
+			<osgb:networkMember xlink:href='#osgb4000000023319697' />
+			<osgb:networkMember xlink:href='#osgb4000000023320328' />
+			<osgb:networkMember xlink:href='#osgb4000000023320341' />
+			<osgb:networkMember xlink:href='#osgb4000000023320356' />
+			<osgb:networkMember xlink:href='#osgb4000000023320367' />
+			<osgb:networkMember xlink:href='#osgb4000000023320396' />
+			<osgb:networkMember xlink:href='#osgb4000000023320704' />
+			<osgb:networkMember xlink:href='#osgb4000000023320714' />
+			<osgb:networkMember xlink:href='#osgb4000000023320715' />
+			<osgb:networkMember xlink:href='#osgb4000000023320728' />
+			<osgb:networkMember xlink:href='#osgb4000000023320729' />
+			<osgb:networkMember xlink:href='#osgb4000000023320730' />
+			<osgb:networkMember xlink:href='#osgb4000000023320751' />
+			<osgb:networkMember xlink:href='#osgb4000000023320813' />
+			<osgb:networkMember xlink:href='#osgb4000000023321146' />
+			<osgb:networkMember xlink:href='#osgb4000000023321147' />
+			<osgb:networkMember xlink:href='#osgb4000000023321177' />
+			<osgb:networkMember xlink:href='#osgb4000000023321199' />
+			<osgb:networkMember xlink:href='#osgb4000000023321200' />
+			<osgb:networkMember xlink:href='#osgb4000000023321201' />
+			<osgb:networkMember xlink:href='#osgb4000000023321202' />
+			<osgb:networkMember xlink:href='#osgb4000000023321764' />
+			<osgb:networkMember xlink:href='#osgb4000000023370278' />
+			<osgb:networkMember xlink:href='#osgb4000000023370279' />
+			<osgb:networkMember xlink:href='#osgb4000000023370280' />
+			<osgb:networkMember xlink:href='#osgb4000000023370281' />
+			<osgb:networkMember xlink:href='#osgb4000000023370282' />
+			<osgb:networkMember xlink:href='#osgb4000000023370329' />
+			<osgb:networkMember xlink:href='#osgb4000000023370431' />
+			<osgb:networkMember xlink:href='#osgb4000000023370450' />
+			<osgb:networkMember xlink:href='#osgb4000000023370471' />
+			<osgb:networkMember xlink:href='#osgb4000000023370472' />
+			<osgb:networkMember xlink:href='#osgb4000000023370488' />
+			<osgb:networkMember xlink:href='#osgb4000000023370489' />
+			<osgb:networkMember xlink:href='#osgb4000000023370490' />
+			<osgb:networkMember xlink:href='#osgb4000000023371198' />
+			<osgb:networkMember xlink:href='#osgb4000000023371205' />
+			<osgb:networkMember xlink:href='#osgb4000000023371242' />
+			<osgb:networkMember xlink:href='#osgb4000000023371243' />
+			<osgb:networkMember xlink:href='#osgb4000000023371504' />
+			<osgb:networkMember xlink:href='#osgb4000000023371506' />
+			<osgb:networkMember xlink:href='#osgb4000000023371507' />
+			<osgb:networkMember xlink:href='#osgb4000000023371530' />
+			<osgb:networkMember xlink:href='#osgb4000000023371532' />
+			<osgb:networkMember xlink:href='#osgb4000000023371558' />
+			<osgb:networkMember xlink:href='#osgb4000000023371924' />
+			<osgb:networkMember xlink:href='#osgb4000000023371945' />
+			<osgb:networkMember xlink:href='#osgb4000000023417161' />
+			<osgb:networkMember xlink:href='#osgb4000000023417162' />
+			<osgb:networkMember xlink:href='#osgb4000000023417163' />
+			<osgb:networkMember xlink:href='#osgb4000000023417164' />
+			<osgb:networkMember xlink:href='#osgb4000000023417165' />
+			<osgb:networkMember xlink:href='#osgb4000000023417166' />
+			<osgb:networkMember xlink:href='#osgb4000000023417187' />
+			<osgb:networkMember xlink:href='#osgb4000000023417193' />
+			<osgb:networkMember xlink:href='#osgb4000000023417264' />
+			<osgb:networkMember xlink:href='#osgb4000000023417267' />
+			<osgb:networkMember xlink:href='#osgb4000000023417268' />
+			<osgb:networkMember xlink:href='#osgb4000000023417275' />
+			<osgb:networkMember xlink:href='#osgb4000000023417276' />
+			<osgb:networkMember xlink:href='#osgb4000000023417277' />
+			<osgb:networkMember xlink:href='#osgb4000000023417278' />
+			<osgb:networkMember xlink:href='#osgb4000000023417752' />
+			<osgb:networkMember xlink:href='#osgb4000000023417880' />
+			<osgb:networkMember xlink:href='#osgb4000000023417881' />
+			<osgb:networkMember xlink:href='#osgb4000000023417913' />
+			<osgb:networkMember xlink:href='#osgb4000000023417916' />
+			<osgb:networkMember xlink:href='#osgb4000000023417927' />
+			<osgb:networkMember xlink:href='#osgb4000000023417929' />
+			<osgb:networkMember xlink:href='#osgb4000000023417930' />
+			<osgb:networkMember xlink:href='#osgb4000000023417931' />
+			<osgb:networkMember xlink:href='#osgb4000000023417932' />
+			<osgb:networkMember xlink:href='#osgb4000000023417933' />
+			<osgb:networkMember xlink:href='#osgb4000000023417934' />
+			<osgb:networkMember xlink:href='#osgb4000000023417935' />
+			<osgb:networkMember xlink:href='#osgb4000000023417936' />
+			<osgb:networkMember xlink:href='#osgb4000000023417937' />
+			<osgb:networkMember xlink:href='#osgb4000000023417969' />
+			<osgb:networkMember xlink:href='#osgb4000000023418159' />
+			<osgb:networkMember xlink:href='#osgb4000000023418180' />
+			<osgb:networkMember xlink:href='#osgb4000000023418181' />
+			<osgb:networkMember xlink:href='#osgb4000000023418182' />
+			<osgb:networkMember xlink:href='#osgb4000000023418183' />
+			<osgb:networkMember xlink:href='#osgb4000000023418184' />
+			<osgb:networkMember xlink:href='#osgb4000000023418185' />
+			<osgb:networkMember xlink:href='#osgb4000000023446144' />
+			<osgb:networkMember xlink:href='#osgb4000000023446145' />
+			<osgb:networkMember xlink:href='#osgb4000000023446154' />
+			<osgb:networkMember xlink:href='#osgb4000000023446155' />
+			<osgb:networkMember xlink:href='#osgb4000000023446156' />
+			<osgb:networkMember xlink:href='#osgb4000000023446470' />
+			<osgb:networkMember xlink:href='#osgb4000000023446472' />
+			<osgb:networkMember xlink:href='#osgb4000000023446572' />
+			<osgb:networkMember xlink:href='#osgb4000000023446674' />
+			<osgb:networkMember xlink:href='#osgb4000000023446683' />
+			<osgb:networkMember xlink:href='#osgb4000000023446684' />
+			<osgb:networkMember xlink:href='#osgb4000000023446685' />
+			<osgb:networkMember xlink:href='#osgb4000000023446686' />
+			<osgb:networkMember xlink:href='#osgb4000000023460316' />
+			<osgb:networkMember xlink:href='#osgb4000000023460317' />
+			<osgb:networkMember xlink:href='#osgb4000000023460318' />
+			<osgb:networkMember xlink:href='#osgb4000000023460319' />
+			<osgb:networkMember xlink:href='#osgb4000000023460429' />
+			<osgb:networkMember xlink:href='#osgb4000000023460437' />
+			<osgb:networkMember xlink:href='#osgb4000000023460438' />
+			<osgb:networkMember xlink:href='#osgb4000000023464522' />
+			<osgb:networkMember xlink:href='#osgb4000000023606300' />
+			<osgb:networkMember xlink:href='#osgb4000000023627881' />
+			<osgb:networkMember xlink:href='#osgb4000000023720627' />
+			<osgb:networkMember xlink:href='#osgb4000000023726854' />
+			<osgb:networkMember xlink:href='#osgb4000000023780034' />
+			<osgb:networkMember xlink:href='#osgb4000000023780035' />
+			<osgb:networkMember xlink:href='#osgb4000000023783246' />
+			<osgb:networkMember xlink:href='#osgb4000000023783247' />
+			<osgb:networkMember xlink:href='#osgb4000000023804368' />
+			<osgb:networkMember xlink:href='#osgb4000000023807212' />
+			<osgb:networkMember xlink:href='#osgb4000000023812694' />
+			<osgb:networkMember xlink:href='#osgb4000000023814270' />
+			<osgb:networkMember xlink:href='#osgb4000000023818080' />
+			<osgb:networkMember xlink:href='#osgb4000000023818081' />
+			<osgb:networkMember xlink:href='#osgb4000000023818082' />
+			<osgb:networkMember xlink:href='#osgb4000000023822942' />
+			<osgb:networkMember xlink:href='#osgb4000000023831625' />
+			<osgb:networkMember xlink:href='#osgb4000000023831626' />
+			<osgb:networkMember xlink:href='#osgb4000000023835659' />
+			<osgb:networkMember xlink:href='#osgb4000000023844487' />
+			<osgb:networkMember xlink:href='#osgb4000000023844488' />
+			<osgb:networkMember xlink:href='#osgb4000000023844490' />
+			<osgb:networkMember xlink:href='#osgb4000000023854593' />
+			<osgb:networkMember xlink:href='#osgb5000005103734819' />
+			<osgb:networkMember xlink:href='#osgb5000005111477189' />
+			<osgb:networkMember xlink:href='#osgb5000005111477190' />
+			<osgb:networkMember xlink:href='#osgb5000005111477191' />
+			<osgb:networkMember xlink:href='#osgb5000005111477192' />
+			<osgb:networkMember xlink:href='#osgb5000005111514108' />
+			<osgb:networkMember xlink:href='#osgb5000005111514111' />
+			<osgb:networkMember xlink:href='#osgb5000005111514114' />
+			<osgb:networkMember xlink:href='#osgb5000005111514115' />
+			<osgb:networkMember xlink:href='#osgb5000005111514131' />
+			<osgb:networkMember xlink:href='#osgb5000005111514138' />
+			<osgb:networkMember xlink:href='#osgb5000005111514156' />
+			<osgb:networkMember xlink:href='#osgb5000005111514161' />
+			<osgb:networkMember xlink:href='#osgb5000005111514163' />
+			<osgb:networkMember xlink:href='#osgb5000005111514166' />
+			<osgb:networkMember xlink:href='#osgb5000005111514177' />
+			<osgb:networkMember xlink:href='#osgb5000005111514183' />
+			<osgb:networkMember xlink:href='#osgb5000005111514193' />
+			<osgb:networkMember xlink:href='#osgb5000005111514200' />
+			<osgb:networkMember xlink:href='#osgb5000005114254657' />
+			<osgb:networkMember xlink:href='#osgb5000005114254663' />
+			<osgb:networkMember xlink:href='#osgb5000005114254684' />
+			<osgb:networkMember xlink:href='#osgb5000005121067766' />
+			<osgb:networkMember xlink:href='#osgb5000005121067775' />
+			<osgb:networkMember xlink:href='#osgb5000005121067783' />
+			<osgb:networkMember xlink:href='#osgb5000005121067785' />
+			<osgb:networkMember xlink:href='#osgb5000005121067786' />
+			<osgb:networkMember xlink:href='#osgb5000005121067788' />
+			<osgb:networkMember xlink:href='#osgb5000005123192216' />
+			<osgb:networkMember xlink:href='#osgb5000005123192222' />
+			<osgb:networkMember xlink:href='#osgb5000005123192227' />
+			<osgb:networkMember xlink:href='#osgb5000005123192232' />
+			<osgb:boundedBy>
+				<gml:Box srsName='osgb:BNG'>
+					<gml:coordinates>448834.973,105859.000 470315.000,121014.054</gml:coordinates>
+				</gml:Box>
+			</osgb:boundedBy>
+		</osgb:Road>
+	</osgb:roadMember>
+	<osgb:roadMember>
+		<osgb:Road fid='osgb4000000023625277'>
+			<osgb:version>48</osgb:version>
+			<osgb:versionDate>2014-03-30</osgb:versionDate>
+			<osgb:theme>Road Network</osgb:theme>
+			<osgb:changeHistory>
+				<osgb:changeDate>2005-02-15</osgb:changeDate>
+				<osgb:reasonForChange>New</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2005-04-24</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2005-07-22</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2005-11-22</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2006-02-21</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2006-04-04</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2006-05-31</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2006-10-17</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2007-06-12</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2007-09-03</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2007-10-04</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2007-12-05</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2008-02-07</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2008-04-01</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2008-05-23</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2008-09-04</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2008-09-30</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2009-01-21</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2009-02-18</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2009-04-01</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2009-08-12</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2009-10-29</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2010-02-18</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2010-05-11</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2010-07-28</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2010-10-12</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2010-12-09</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2012-01-10</osgb:changeDate>
+				<osgb:reasonForChange>Attributes</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2012-04-19</osgb:changeDate>
+				<osgb:reasonForChange>Attributes</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2012-11-21</osgb:changeDate>
+				<osgb:reasonForChange>Attributes</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2013-07-10</osgb:changeDate>
+				<osgb:reasonForChange>Attributes</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2013-10-17</osgb:changeDate>
+				<osgb:reasonForChange>Attributes</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2013-10-18</osgb:changeDate>
+				<osgb:reasonForChange>Attributes</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2013-11-01</osgb:changeDate>
+				<osgb:reasonForChange>Attributes</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2013-11-13</osgb:changeDate>
+				<osgb:reasonForChange>Attributes</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2013-12-09</osgb:changeDate>
+				<osgb:reasonForChange>Attributes</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2013-12-10</osgb:changeDate>
+				<osgb:reasonForChange>Attributes</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2013-12-23</osgb:changeDate>
+				<osgb:reasonForChange>Attributes</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2014-01-07</osgb:changeDate>
+				<osgb:reasonForChange>Attributes</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2014-01-21</osgb:changeDate>
+				<osgb:reasonForChange>Attributes</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2014-02-27</osgb:changeDate>
+				<osgb:reasonForChange>Attributes</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2014-03-09</osgb:changeDate>
+				<osgb:reasonForChange>Attributes</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2014-03-10</osgb:changeDate>
+				<osgb:reasonForChange>Attributes</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2014-03-15</osgb:changeDate>
+				<osgb:reasonForChange>Attributes</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2014-03-19</osgb:changeDate>
+				<osgb:reasonForChange>Attributes</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2014-03-30</osgb:changeDate>
+				<osgb:reasonForChange>Attributes</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:descriptiveGroup>A Road</osgb:descriptiveGroup>
+			<osgb:roadName>A32</osgb:roadName>
+			<osgb:networkMember xlink:href='#osgb4000000023256382' />
+			<osgb:networkMember xlink:href='#osgb4000000023257148' />
+			<osgb:networkMember xlink:href='#osgb4000000023257787' />
+			<osgb:networkMember xlink:href='#osgb4000000023257798' />
+			<osgb:networkMember xlink:href='#osgb4000000023257964' />
+			<osgb:networkMember xlink:href='#osgb4000000023257969' />
+			<osgb:networkMember xlink:href='#osgb4000000023260490' />
+			<osgb:networkMember xlink:href='#osgb4000000023260499' />
+			<osgb:networkMember xlink:href='#osgb4000000023260646' />
+			<osgb:networkMember xlink:href='#osgb4000000023260651' />
+			<osgb:networkMember xlink:href='#osgb4000000023260653' />
+			<osgb:networkMember xlink:href='#osgb4000000023260669' />
+			<osgb:networkMember xlink:href='#osgb4000000023261979' />
+			<osgb:networkMember xlink:href='#osgb4000000023261989' />
+			<osgb:networkMember xlink:href='#osgb4000000023262028' />
+			<osgb:networkMember xlink:href='#osgb4000000023262032' />
+			<osgb:networkMember xlink:href='#osgb4000000023262260' />
+			<osgb:networkMember xlink:href='#osgb4000000023262263' />
+			<osgb:networkMember xlink:href='#osgb4000000023262273' />
+			<osgb:networkMember xlink:href='#osgb4000000023262404' />
+			<osgb:networkMember xlink:href='#osgb4000000023262438' />
+			<osgb:networkMember xlink:href='#osgb4000000023268646' />
+			<osgb:networkMember xlink:href='#osgb4000000023268649' />
+			<osgb:networkMember xlink:href='#osgb4000000023268673' />
+			<osgb:networkMember xlink:href='#osgb4000000023268677' />
+			<osgb:networkMember xlink:href='#osgb4000000023268678' />
+			<osgb:networkMember xlink:href='#osgb4000000023268870' />
+			<osgb:networkMember xlink:href='#osgb4000000023268878' />
+			<osgb:networkMember xlink:href='#osgb4000000023268890' />
+			<osgb:networkMember xlink:href='#osgb4000000023268891' />
+			<osgb:networkMember xlink:href='#osgb4000000023268892' />
+			<osgb:networkMember xlink:href='#osgb4000000023268893' />
+			<osgb:networkMember xlink:href='#osgb4000000023268896' />
+			<osgb:networkMember xlink:href='#osgb4000000023269224' />
+			<osgb:networkMember xlink:href='#osgb4000000023269229' />
+			<osgb:networkMember xlink:href='#osgb4000000023269232' />
+			<osgb:networkMember xlink:href='#osgb4000000023269244' />
+			<osgb:networkMember xlink:href='#osgb4000000023271366' />
+			<osgb:networkMember xlink:href='#osgb4000000023271378' />
+			<osgb:networkMember xlink:href='#osgb4000000023271379' />
+			<osgb:networkMember xlink:href='#osgb4000000023271380' />
+			<osgb:networkMember xlink:href='#osgb4000000023271415' />
+			<osgb:networkMember xlink:href='#osgb4000000023271705' />
+			<osgb:networkMember xlink:href='#osgb4000000023271925' />
+			<osgb:networkMember xlink:href='#osgb4000000023271938' />
+			<osgb:networkMember xlink:href='#osgb4000000023271939' />
+			<osgb:networkMember xlink:href='#osgb4000000023283965' />
+			<osgb:networkMember xlink:href='#osgb4000000023283991' />
+			<osgb:networkMember xlink:href='#osgb4000000023284990' />
+			<osgb:networkMember xlink:href='#osgb4000000023285050' />
+			<osgb:networkMember xlink:href='#osgb4000000023285063' />
+			<osgb:networkMember xlink:href='#osgb4000000023285084' />
+			<osgb:networkMember xlink:href='#osgb4000000023285085' />
+			<osgb:networkMember xlink:href='#osgb4000000023285086' />
+			<osgb:networkMember xlink:href='#osgb4000000023285124' />
+			<osgb:networkMember xlink:href='#osgb4000000023285668' />
+			<osgb:networkMember xlink:href='#osgb4000000023285669' />
+			<osgb:networkMember xlink:href='#osgb4000000023285670' />
+			<osgb:networkMember xlink:href='#osgb4000000023285676' />
+			<osgb:networkMember xlink:href='#osgb4000000023285677' />
+			<osgb:networkMember xlink:href='#osgb4000000023285683' />
+			<osgb:networkMember xlink:href='#osgb4000000023285684' />
+			<osgb:networkMember xlink:href='#osgb4000000023285685' />
+			<osgb:networkMember xlink:href='#osgb4000000023285710' />
+			<osgb:networkMember xlink:href='#osgb4000000023285724' />
+			<osgb:networkMember xlink:href='#osgb4000000023285730' />
+			<osgb:networkMember xlink:href='#osgb4000000023286259' />
+			<osgb:networkMember xlink:href='#osgb4000000023286261' />
+			<osgb:networkMember xlink:href='#osgb4000000023286382' />
+			<osgb:networkMember xlink:href='#osgb4000000023286396' />
+			<osgb:networkMember xlink:href='#osgb4000000023286406' />
+			<osgb:networkMember xlink:href='#osgb4000000023290390' />
+			<osgb:networkMember xlink:href='#osgb4000000023290391' />
+			<osgb:networkMember xlink:href='#osgb4000000023290412' />
+			<osgb:networkMember xlink:href='#osgb4000000023290847' />
+			<osgb:networkMember xlink:href='#osgb4000000023290848' />
+			<osgb:networkMember xlink:href='#osgb4000000023291147' />
+			<osgb:networkMember xlink:href='#osgb4000000023291149' />
+			<osgb:networkMember xlink:href='#osgb4000000023316145' />
+			<osgb:networkMember xlink:href='#osgb4000000023316161' />
+			<osgb:networkMember xlink:href='#osgb4000000023316163' />
+			<osgb:networkMember xlink:href='#osgb4000000023316168' />
+			<osgb:networkMember xlink:href='#osgb4000000023316169' />
+			<osgb:networkMember xlink:href='#osgb4000000023316200' />
+			<osgb:networkMember xlink:href='#osgb4000000023316201' />
+			<osgb:networkMember xlink:href='#osgb4000000023316202' />
+			<osgb:networkMember xlink:href='#osgb4000000023316203' />
+			<osgb:networkMember xlink:href='#osgb4000000023316233' />
+			<osgb:networkMember xlink:href='#osgb4000000023316234' />
+			<osgb:networkMember xlink:href='#osgb4000000023316235' />
+			<osgb:networkMember xlink:href='#osgb4000000023316236' />
+			<osgb:networkMember xlink:href='#osgb4000000023316286' />
+			<osgb:networkMember xlink:href='#osgb4000000023318259' />
+			<osgb:networkMember xlink:href='#osgb4000000023318410' />
+			<osgb:networkMember xlink:href='#osgb4000000023318431' />
+			<osgb:networkMember xlink:href='#osgb4000000023318432' />
+			<osgb:networkMember xlink:href='#osgb4000000023318433' />
+			<osgb:networkMember xlink:href='#osgb4000000023318497' />
+			<osgb:networkMember xlink:href='#osgb4000000023318498' />
+			<osgb:networkMember xlink:href='#osgb4000000023318507' />
+			<osgb:networkMember xlink:href='#osgb4000000023318508' />
+			<osgb:networkMember xlink:href='#osgb4000000023319575' />
+			<osgb:networkMember xlink:href='#osgb4000000023319587' />
+			<osgb:networkMember xlink:href='#osgb4000000023319623' />
+			<osgb:networkMember xlink:href='#osgb4000000023319624' />
+			<osgb:networkMember xlink:href='#osgb4000000023319625' />
+			<osgb:networkMember xlink:href='#osgb4000000023319626' />
+			<osgb:networkMember xlink:href='#osgb4000000023320835' />
+			<osgb:networkMember xlink:href='#osgb4000000023320836' />
+			<osgb:networkMember xlink:href='#osgb4000000023320901' />
+			<osgb:networkMember xlink:href='#osgb4000000023320998' />
+			<osgb:networkMember xlink:href='#osgb4000000023321000' />
+			<osgb:networkMember xlink:href='#osgb4000000023321022' />
+			<osgb:networkMember xlink:href='#osgb4000000023321023' />
+			<osgb:networkMember xlink:href='#osgb4000000023321033' />
+			<osgb:networkMember xlink:href='#osgb4000000023321034' />
+			<osgb:networkMember xlink:href='#osgb4000000023327587' />
+			<osgb:networkMember xlink:href='#osgb4000000023327598' />
+			<osgb:networkMember xlink:href='#osgb4000000023327599' />
+			<osgb:networkMember xlink:href='#osgb4000000023328241' />
+			<osgb:networkMember xlink:href='#osgb4000000023328617' />
+			<osgb:networkMember xlink:href='#osgb4000000023366768' />
+			<osgb:networkMember xlink:href='#osgb4000000023366769' />
+			<osgb:networkMember xlink:href='#osgb4000000023366774' />
+			<osgb:networkMember xlink:href='#osgb4000000023366775' />
+			<osgb:networkMember xlink:href='#osgb4000000023366776' />
+			<osgb:networkMember xlink:href='#osgb4000000023366777' />
+			<osgb:networkMember xlink:href='#osgb4000000023366814' />
+			<osgb:networkMember xlink:href='#osgb4000000023366815' />
+			<osgb:networkMember xlink:href='#osgb4000000023366816' />
+			<osgb:networkMember xlink:href='#osgb4000000023366817' />
+			<osgb:networkMember xlink:href='#osgb4000000023366818' />
+			<osgb:networkMember xlink:href='#osgb4000000023366819' />
+			<osgb:networkMember xlink:href='#osgb4000000023366820' />
+			<osgb:networkMember xlink:href='#osgb4000000023366821' />
+			<osgb:networkMember xlink:href='#osgb4000000023366822' />
+			<osgb:networkMember xlink:href='#osgb4000000023366823' />
+			<osgb:networkMember xlink:href='#osgb4000000023366846' />
+			<osgb:networkMember xlink:href='#osgb4000000023366847' />
+			<osgb:networkMember xlink:href='#osgb4000000023366848' />
+			<osgb:networkMember xlink:href='#osgb4000000023366892' />
+			<osgb:networkMember xlink:href='#osgb4000000023366893' />
+			<osgb:networkMember xlink:href='#osgb4000000023366895' />
+			<osgb:networkMember xlink:href='#osgb4000000023366896' />
+			<osgb:networkMember xlink:href='#osgb4000000023369068' />
+			<osgb:networkMember xlink:href='#osgb4000000023369069' />
+			<osgb:networkMember xlink:href='#osgb4000000023369300' />
+			<osgb:networkMember xlink:href='#osgb4000000023369301' />
+			<osgb:networkMember xlink:href='#osgb4000000023369381' />
+			<osgb:networkMember xlink:href='#osgb4000000023369385' />
+			<osgb:networkMember xlink:href='#osgb4000000023369386' />
+			<osgb:networkMember xlink:href='#osgb4000000023370359' />
+			<osgb:networkMember xlink:href='#osgb4000000023370360' />
+			<osgb:networkMember xlink:href='#osgb4000000023370361' />
+			<osgb:networkMember xlink:href='#osgb4000000023370373' />
+			<osgb:networkMember xlink:href='#osgb4000000023370422' />
+			<osgb:networkMember xlink:href='#osgb4000000023370437' />
+			<osgb:networkMember xlink:href='#osgb4000000023370438' />
+			<osgb:networkMember xlink:href='#osgb4000000023371785' />
+			<osgb:networkMember xlink:href='#osgb4000000023371786' />
+			<osgb:networkMember xlink:href='#osgb4000000023378217' />
+			<osgb:networkMember xlink:href='#osgb4000000023378231' />
+			<osgb:networkMember xlink:href='#osgb4000000023378232' />
+			<osgb:networkMember xlink:href='#osgb4000000023378850' />
+			<osgb:networkMember xlink:href='#osgb4000000023379237' />
+			<osgb:networkMember xlink:href='#osgb4000000023379239' />
+			<osgb:networkMember xlink:href='#osgb4000000023415124' />
+			<osgb:networkMember xlink:href='#osgb4000000023415127' />
+			<osgb:networkMember xlink:href='#osgb4000000023415142' />
+			<osgb:networkMember xlink:href='#osgb4000000023415143' />
+			<osgb:networkMember xlink:href='#osgb4000000023415144' />
+			<osgb:networkMember xlink:href='#osgb4000000023415145' />
+			<osgb:networkMember xlink:href='#osgb4000000023415146' />
+			<osgb:networkMember xlink:href='#osgb4000000023415147' />
+			<osgb:networkMember xlink:href='#osgb4000000023415148' />
+			<osgb:networkMember xlink:href='#osgb4000000023415149' />
+			<osgb:networkMember xlink:href='#osgb4000000023415150' />
+			<osgb:networkMember xlink:href='#osgb4000000023415151' />
+			<osgb:networkMember xlink:href='#osgb4000000023415152' />
+			<osgb:networkMember xlink:href='#osgb4000000023415153' />
+			<osgb:networkMember xlink:href='#osgb4000000023415154' />
+			<osgb:networkMember xlink:href='#osgb4000000023415155' />
+			<osgb:networkMember xlink:href='#osgb4000000023415156' />
+			<osgb:networkMember xlink:href='#osgb4000000023415166' />
+			<osgb:networkMember xlink:href='#osgb4000000023415184' />
+			<osgb:networkMember xlink:href='#osgb4000000023416454' />
+			<osgb:networkMember xlink:href='#osgb4000000023416455' />
+			<osgb:networkMember xlink:href='#osgb4000000023416456' />
+			<osgb:networkMember xlink:href='#osgb4000000023416457' />
+			<osgb:networkMember xlink:href='#osgb4000000023416495' />
+			<osgb:networkMember xlink:href='#osgb4000000023416497' />
+			<osgb:networkMember xlink:href='#osgb4000000023416574' />
+			<osgb:networkMember xlink:href='#osgb4000000023416575' />
+			<osgb:networkMember xlink:href='#osgb4000000023416576' />
+			<osgb:networkMember xlink:href='#osgb4000000023416577' />
+			<osgb:networkMember xlink:href='#osgb4000000023416636' />
+			<osgb:networkMember xlink:href='#osgb4000000023416637' />
+			<osgb:networkMember xlink:href='#osgb4000000023416638' />
+			<osgb:networkMember xlink:href='#osgb4000000023416639' />
+			<osgb:networkMember xlink:href='#osgb4000000023416640' />
+			<osgb:networkMember xlink:href='#osgb4000000023416641' />
+			<osgb:networkMember xlink:href='#osgb4000000023416642' />
+			<osgb:networkMember xlink:href='#osgb4000000023416643' />
+			<osgb:networkMember xlink:href='#osgb4000000023416667' />
+			<osgb:networkMember xlink:href='#osgb4000000023416668' />
+			<osgb:networkMember xlink:href='#osgb4000000023416669' />
+			<osgb:networkMember xlink:href='#osgb4000000023416670' />
+			<osgb:networkMember xlink:href='#osgb4000000023416671' />
+			<osgb:networkMember xlink:href='#osgb4000000023416676' />
+			<osgb:networkMember xlink:href='#osgb4000000023416677' />
+			<osgb:networkMember xlink:href='#osgb4000000023416682' />
+			<osgb:networkMember xlink:href='#osgb4000000023417198' />
+			<osgb:networkMember xlink:href='#osgb4000000023417199' />
+			<osgb:networkMember xlink:href='#osgb4000000023417200' />
+			<osgb:networkMember xlink:href='#osgb4000000023417208' />
+			<osgb:networkMember xlink:href='#osgb4000000023417209' />
+			<osgb:networkMember xlink:href='#osgb4000000023417210' />
+			<osgb:networkMember xlink:href='#osgb4000000023417211' />
+			<osgb:networkMember xlink:href='#osgb4000000023417236' />
+			<osgb:networkMember xlink:href='#osgb4000000023417237' />
+			<osgb:networkMember xlink:href='#osgb4000000023417238' />
+			<osgb:networkMember xlink:href='#osgb4000000023417239' />
+			<osgb:networkMember xlink:href='#osgb4000000023417240' />
+			<osgb:networkMember xlink:href='#osgb4000000023417241' />
+			<osgb:networkMember xlink:href='#osgb4000000023417242' />
+			<osgb:networkMember xlink:href='#osgb4000000023417251' />
+			<osgb:networkMember xlink:href='#osgb4000000023417254' />
+			<osgb:networkMember xlink:href='#osgb4000000023418064' />
+			<osgb:networkMember xlink:href='#osgb4000000023418072' />
+			<osgb:networkMember xlink:href='#osgb4000000023418084' />
+			<osgb:networkMember xlink:href='#osgb4000000023422110' />
+			<osgb:networkMember xlink:href='#osgb4000000023422119' />
+			<osgb:networkMember xlink:href='#osgb4000000023422120' />
+			<osgb:networkMember xlink:href='#osgb4000000023422149' />
+			<osgb:networkMember xlink:href='#osgb4000000023422529' />
+			<osgb:networkMember xlink:href='#osgb4000000023422534' />
+			<osgb:networkMember xlink:href='#osgb4000000023445211' />
+			<osgb:networkMember xlink:href='#osgb4000000023445212' />
+			<osgb:networkMember xlink:href='#osgb4000000023445214' />
+			<osgb:networkMember xlink:href='#osgb4000000023445215' />
+			<osgb:networkMember xlink:href='#osgb4000000023445216' />
+			<osgb:networkMember xlink:href='#osgb4000000023445217' />
+			<osgb:networkMember xlink:href='#osgb4000000023445218' />
+			<osgb:networkMember xlink:href='#osgb4000000023445219' />
+			<osgb:networkMember xlink:href='#osgb4000000023445231' />
+			<osgb:networkMember xlink:href='#osgb4000000023445237' />
+			<osgb:networkMember xlink:href='#osgb4000000023445831' />
+			<osgb:networkMember xlink:href='#osgb4000000023445850' />
+			<osgb:networkMember xlink:href='#osgb4000000023445869' />
+			<osgb:networkMember xlink:href='#osgb4000000023445875' />
+			<osgb:networkMember xlink:href='#osgb4000000023445883' />
+			<osgb:networkMember xlink:href='#osgb4000000023446162' />
+			<osgb:networkMember xlink:href='#osgb4000000023446163' />
+			<osgb:networkMember xlink:href='#osgb4000000023446164' />
+			<osgb:networkMember xlink:href='#osgb4000000023446165' />
+			<osgb:networkMember xlink:href='#osgb4000000023446166' />
+			<osgb:networkMember xlink:href='#osgb4000000023446167' />
+			<osgb:networkMember xlink:href='#osgb4000000023446168' />
+			<osgb:networkMember xlink:href='#osgb4000000023446169' />
+			<osgb:networkMember xlink:href='#osgb4000000023446182' />
+			<osgb:networkMember xlink:href='#osgb4000000023446183' />
+			<osgb:networkMember xlink:href='#osgb4000000023446184' />
+			<osgb:networkMember xlink:href='#osgb4000000023446185' />
+			<osgb:networkMember xlink:href='#osgb4000000023446186' />
+			<osgb:networkMember xlink:href='#osgb4000000023446201' />
+			<osgb:networkMember xlink:href='#osgb4000000023446202' />
+			<osgb:networkMember xlink:href='#osgb4000000023446203' />
+			<osgb:networkMember xlink:href='#osgb4000000023446204' />
+			<osgb:networkMember xlink:href='#osgb4000000023446209' />
+			<osgb:networkMember xlink:href='#osgb4000000023446637' />
+			<osgb:networkMember xlink:href='#osgb4000000023446638' />
+			<osgb:networkMember xlink:href='#osgb4000000023446640' />
+			<osgb:networkMember xlink:href='#osgb4000000023446651' />
+			<osgb:networkMember xlink:href='#osgb4000000023446652' />
+			<osgb:networkMember xlink:href='#osgb4000000023448528' />
+			<osgb:networkMember xlink:href='#osgb4000000023448531' />
+			<osgb:networkMember xlink:href='#osgb4000000023448546' />
+			<osgb:networkMember xlink:href='#osgb4000000023459976' />
+			<osgb:networkMember xlink:href='#osgb4000000023459977' />
+			<osgb:networkMember xlink:href='#osgb4000000023459981' />
+			<osgb:networkMember xlink:href='#osgb4000000023459982' />
+			<osgb:networkMember xlink:href='#osgb4000000023459985' />
+			<osgb:networkMember xlink:href='#osgb4000000023459988' />
+			<osgb:networkMember xlink:href='#osgb4000000023460192' />
+			<osgb:networkMember xlink:href='#osgb4000000023460210' />
+			<osgb:networkMember xlink:href='#osgb4000000023460212' />
+			<osgb:networkMember xlink:href='#osgb4000000023460300' />
+			<osgb:networkMember xlink:href='#osgb4000000023460301' />
+			<osgb:networkMember xlink:href='#osgb4000000023460302' />
+			<osgb:networkMember xlink:href='#osgb4000000023460308' />
+			<osgb:networkMember xlink:href='#osgb4000000023460309' />
+			<osgb:networkMember xlink:href='#osgb4000000023460310' />
+			<osgb:networkMember xlink:href='#osgb4000000023460311' />
+			<osgb:networkMember xlink:href='#osgb4000000023464480' />
+			<osgb:networkMember xlink:href='#osgb4000000023464481' />
+			<osgb:networkMember xlink:href='#osgb4000000023464482' />
+			<osgb:networkMember xlink:href='#osgb4000000023464483' />
+			<osgb:networkMember xlink:href='#osgb4000000023586871' />
+			<osgb:networkMember xlink:href='#osgb4000000023604795' />
+			<osgb:networkMember xlink:href='#osgb4000000023604796' />
+			<osgb:networkMember xlink:href='#osgb4000000023604797' />
+			<osgb:networkMember xlink:href='#osgb4000000023604800' />
+			<osgb:networkMember xlink:href='#osgb4000000023606295' />
+			<osgb:networkMember xlink:href='#osgb4000000023606296' />
+			<osgb:networkMember xlink:href='#osgb4000000023606299' />
+			<osgb:networkMember xlink:href='#osgb4000000023643126' />
+			<osgb:networkMember xlink:href='#osgb4000000023665097' />
+			<osgb:networkMember xlink:href='#osgb4000000023665098' />
+			<osgb:networkMember xlink:href='#osgb4000000023665099' />
+			<osgb:networkMember xlink:href='#osgb4000000023665100' />
+			<osgb:networkMember xlink:href='#osgb4000000023665101' />
+			<osgb:networkMember xlink:href='#osgb4000000023665102' />
+			<osgb:networkMember xlink:href='#osgb4000000023665103' />
+			<osgb:networkMember xlink:href='#osgb4000000023665104' />
+			<osgb:networkMember xlink:href='#osgb4000000023665105' />
+			<osgb:networkMember xlink:href='#osgb4000000023665106' />
+			<osgb:networkMember xlink:href='#osgb4000000023703372' />
+			<osgb:networkMember xlink:href='#osgb4000000023703374' />
+			<osgb:networkMember xlink:href='#osgb4000000023704581' />
+			<osgb:networkMember xlink:href='#osgb4000000023704582' />
+			<osgb:networkMember xlink:href='#osgb4000000023706413' />
+			<osgb:networkMember xlink:href='#osgb4000000023706414' />
+			<osgb:networkMember xlink:href='#osgb4000000023712758' />
+			<osgb:networkMember xlink:href='#osgb4000000023719852' />
+			<osgb:networkMember xlink:href='#osgb4000000023726338' />
+			<osgb:networkMember xlink:href='#osgb4000000023739566' />
+			<osgb:networkMember xlink:href='#osgb4000000023741039' />
+			<osgb:networkMember xlink:href='#osgb4000000023746914' />
+			<osgb:networkMember xlink:href='#osgb4000000023746917' />
+			<osgb:networkMember xlink:href='#osgb4000000023752105' />
+			<osgb:networkMember xlink:href='#osgb4000000023752107' />
+			<osgb:networkMember xlink:href='#osgb4000000023752108' />
+			<osgb:networkMember xlink:href='#osgb4000000023752109' />
+			<osgb:networkMember xlink:href='#osgb4000000023752110' />
+			<osgb:networkMember xlink:href='#osgb4000000023752111' />
+			<osgb:networkMember xlink:href='#osgb4000000023752112' />
+			<osgb:networkMember xlink:href='#osgb4000000023752113' />
+			<osgb:networkMember xlink:href='#osgb4000000023752223' />
+			<osgb:networkMember xlink:href='#osgb4000000023772575' />
+			<osgb:networkMember xlink:href='#osgb4000000023776095' />
+			<osgb:networkMember xlink:href='#osgb4000000023785288' />
+			<osgb:networkMember xlink:href='#osgb4000000023809753' />
+			<osgb:networkMember xlink:href='#osgb4000000023809754' />
+			<osgb:networkMember xlink:href='#osgb4000000023809755' />
+			<osgb:networkMember xlink:href='#osgb4000000023816652' />
+			<osgb:networkMember xlink:href='#osgb4000000023819973' />
+			<osgb:networkMember xlink:href='#osgb4000000023821972' />
+			<osgb:networkMember xlink:href='#osgb4000000023822336' />
+			<osgb:networkMember xlink:href='#osgb4000000023822338' />
+			<osgb:networkMember xlink:href='#osgb4000000023827571' />
+			<osgb:networkMember xlink:href='#osgb4000000023847992' />
+			<osgb:networkMember xlink:href='#osgb4000000023850971' />
+			<osgb:networkMember xlink:href='#osgb4000000023852447' />
+			<osgb:networkMember xlink:href='#osgb4000000023852448' />
+			<osgb:networkMember xlink:href='#osgb4000000026172909' />
+			<osgb:networkMember xlink:href='#osgb4000000026172910' />
+			<osgb:networkMember xlink:href='#osgb4000000026182006' />
+			<osgb:networkMember xlink:href='#osgb4000000026187868' />
+			<osgb:networkMember xlink:href='#osgb4000000026203120' />
+			<osgb:networkMember xlink:href='#osgb4000000026223637' />
+			<osgb:networkMember xlink:href='#osgb5000005101548768' />
+			<osgb:networkMember xlink:href='#osgb5000005101548771' />
+			<osgb:networkMember xlink:href='#osgb5000005101548772' />
+			<osgb:networkMember xlink:href='#osgb5000005101548774' />
+			<osgb:networkMember xlink:href='#osgb5000005101548776' />
+			<osgb:networkMember xlink:href='#osgb5000005101548780' />
+			<osgb:networkMember xlink:href='#osgb5000005101548789' />
+			<osgb:networkMember xlink:href='#osgb5000005101548793' />
+			<osgb:networkMember xlink:href='#osgb5000005101548795' />
+			<osgb:networkMember xlink:href='#osgb5000005101548796' />
+			<osgb:networkMember xlink:href='#osgb5000005101548799' />
+			<osgb:networkMember xlink:href='#osgb5000005102890720' />
+			<osgb:networkMember xlink:href='#osgb5000005106283391' />
+			<osgb:networkMember xlink:href='#osgb5000005111514101' />
+			<osgb:networkMember xlink:href='#osgb5000005111514141' />
+			<osgb:networkMember xlink:href='#osgb5000005114518239' />
+			<osgb:networkMember xlink:href='#osgb5000005114600277' />
+			<osgb:networkMember xlink:href='#osgb5000005115325412' />
+			<osgb:networkMember xlink:href='#osgb5000005115325413' />
+			<osgb:networkMember xlink:href='#osgb5000005116589893' />
+			<osgb:networkMember xlink:href='#osgb5000005116589895' />
+			<osgb:networkMember xlink:href='#osgb5000005116589911' />
+			<osgb:networkMember xlink:href='#osgb5000005116589925' />
+			<osgb:networkMember xlink:href='#osgb5000005116589932' />
+			<osgb:networkMember xlink:href='#osgb5000005116589938' />
+			<osgb:networkMember xlink:href='#osgb5000005116589941' />
+			<osgb:networkMember xlink:href='#osgb5000005116589949' />
+			<osgb:networkMember xlink:href='#osgb5000005116827190' />
+			<osgb:networkMember xlink:href='#osgb5000005116827206' />
+			<osgb:networkMember xlink:href='#osgb5000005118216502' />
+			<osgb:networkMember xlink:href='#osgb5000005118216504' />
+			<osgb:networkMember xlink:href='#osgb5000005118216527' />
+			<osgb:networkMember xlink:href='#osgb5000005119041321' />
+			<osgb:networkMember xlink:href='#osgb5000005119041367' />
+			<osgb:networkMember xlink:href='#osgb5000005119041375' />
+			<osgb:networkMember xlink:href='#osgb5000005119041465' />
+			<osgb:networkMember xlink:href='#osgb5000005119041469' />
+			<osgb:networkMember xlink:href='#osgb5000005119569166' />
+			<osgb:networkMember xlink:href='#osgb5000005121280150' />
+			<osgb:networkMember xlink:href='#osgb5000005121289834' />
+			<osgb:networkMember xlink:href='#osgb5000005121873250' />
+			<osgb:networkMember xlink:href='#osgb5000005121873269' />
+			<osgb:networkMember xlink:href='#osgb5000005122260958' />
+			<osgb:networkMember xlink:href='#osgb5000005122260971' />
+			<osgb:networkMember xlink:href='#osgb5000005122260976' />
+			<osgb:networkMember xlink:href='#osgb5000005122384390' />
+			<osgb:networkMember xlink:href='#osgb5000005122822176' />
+			<osgb:networkMember xlink:href='#osgb5000005122822177' />
+			<osgb:networkMember xlink:href='#osgb5000005122822187' />
+			<osgb:networkMember xlink:href='#osgb5000005122822191' />
+			<osgb:networkMember xlink:href='#osgb5000005122822193' />
+			<osgb:networkMember xlink:href='#osgb5000005122822197' />
+			<osgb:networkMember xlink:href='#osgb5000005122822201' />
+			<osgb:networkMember xlink:href='#osgb5000005122822207' />
+			<osgb:networkMember xlink:href='#osgb5000005122822208' />
+			<osgb:networkMember xlink:href='#osgb5000005122822212' />
+			<osgb:networkMember xlink:href='#osgb5000005122822214' />
+			<osgb:networkMember xlink:href='#osgb5000005122822216' />
+			<osgb:boundedBy>
+				<gml:Box srsName='osgb:BNG'>
+					<gml:coordinates>457478.496,99836.729 470616.000,137457.260</gml:coordinates>
+				</gml:Box>
+			</osgb:boundedBy>
+		</osgb:Road>
+	</osgb:roadMember>
+	<osgb:networkMember>
+		<osgb:RoadLink fid='osgb4000000023370450'>
+			<osgb:version>4</osgb:version>
+			<osgb:versionDate>2005-09-15</osgb:versionDate>
+			<osgb:theme>Road Network</osgb:theme>
+			<osgb:changeHistory>
+				<osgb:changeDate>2002-11-06</osgb:changeDate>
+				<osgb:reasonForChange>New</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2005-01-21</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:descriptiveGroup>Road Topology</osgb:descriptiveGroup>
+			<osgb:descriptiveTerm>B Road</osgb:descriptiveTerm>
+			<osgb:natureOfRoad>Single Carriageway</osgb:natureOfRoad>
+			<osgb:length>72.23</osgb:length>
+			<osgb:polyline>
+				<gml:LineString srsName='osgb:BNG'>
+					<gml:coordinates>457482.672,111445.524 457489.502,111435.915 457511.711,111424.148 457541.924,111405.869
+					</gml:coordinates>
+				</gml:LineString>
+			</osgb:polyline>
+			<osgb:directedNode orientation='-' xlink:href='#osgb4000000023116559' />
+			<osgb:directedNode orientation='+' xlink:href='#osgb4000000023116560' />
+			<osgb:referenceToTopographicArea xlink:href='#osgb1000002105570177' />
+			<osgb:referenceToTopographicArea xlink:href='#osgb1000002105570285' />
+			<osgb:referenceToTopographicArea xlink:href='#osgb1000002105569911' />
+			<osgb:referenceToTopographicArea xlink:href='#osgb1000002105687868' />
+		</osgb:RoadLink>
+	</osgb:networkMember>
+	<osgb:roadInformationMember>
+		<osgb:RoadLinkInformation fid='osgb4000000023036178'>
+			<osgb:version>4</osgb:version>
+			<osgb:versionDate>2009-02-02</osgb:versionDate>
+			<osgb:theme>Road Routing Information</osgb:theme>
+			<osgb:changeHistory>
+				<osgb:changeDate>2002-11-06</osgb:changeDate>
+				<osgb:reasonForChange>New</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2005-01-21</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2008-12-23</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:descriptiveGroup>Road Routing Information</osgb:descriptiveGroup>
+			<osgb:environmentQualifier>
+				<osgb:classification>Bridge Over Road</osgb:classification>
+			</osgb:environmentQualifier>
+			<osgb:referenceToRoadLink xlink:href='#osgb4000000023319651' />
+			<osgb:distanceFromStart>25.92</osgb:distanceFromStart>
+			<osgb:point>
+				<gml:Point srsName='osgb:BNG'>
+					<gml:coordinates>457459.127,111464.575</gml:coordinates>
+				</gml:Point>
+			</osgb:point>
+		</osgb:RoadLinkInformation>
+	</osgb:roadInformationMember>
+	<osgb:boundedBy>
+		<gml:Box srsName='osgb:BNG'>
+			<gml:coordinates>290822.000,91912.000 293199.000,94222.000</gml:coordinates>
+		</gml:Box>
+	</osgb:boundedBy>
+</osgb:FeatureCollection>
diff --git a/tools/src/main/java/com/graphhopper/tools/routeExtractor/AbstractProblemRouteExtractor.java b/tools/src/main/java/com/graphhopper/tools/routeExtractor/AbstractProblemRouteExtractor.java
index 0d43020d25..9cf0bac533 100644
--- a/tools/src/main/java/com/graphhopper/tools/routeExtractor/AbstractProblemRouteExtractor.java
+++ b/tools/src/main/java/com/graphhopper/tools/routeExtractor/AbstractProblemRouteExtractor.java
@@ -32,7 +32,7 @@
 import com.graphhopper.reader.Relation;
 import com.graphhopper.reader.RelationMember;
 import com.graphhopper.reader.RoutingElement;
-import com.graphhopper.reader.osgb.OSITNRelation;
+import com.graphhopper.reader.osgb.OSITNElement;
 import com.graphhopper.reader.osgb.OSITNWay;
 import com.graphhopper.reader.osgb.OsItnInputFile;
 import com.graphhopper.util.Helper;
@@ -74,8 +74,8 @@ void setInnerProcess(final ProcessVisitor<T> process) {
             innerProcess = process;
         }
     }
-    
-  
+
+
 
     protected  ProcessFileVisitor<RoutingElement> fileProcessProcessor = new ProcessFileVisitor<RoutingElement>() {
 
@@ -149,7 +149,8 @@ public boolean execute(final long testNode) {
         @Override
         void processVisitor(final RoutingElement item) {
             if (item.isType(OSMElement.RELATION)) {
-                final OSITNRelation rel = (OSITNRelation) item;
+                final Relation rel = (Relation) item;
+                //                    final OSITNRelation rel = (OSITNRelation) item;
                 final ArrayList<? extends RelationMember> links = rel.getMembers();
                 final long start = links.get(0).ref();
                 final long end = links.get(links.size() - 1).ref();
@@ -157,7 +158,8 @@ void processVisitor(final RoutingElement item) {
                     @Override
                     public boolean execute(final long testNode) {
                         if ((testNode == start) || (testNode == end)) {
-                            relationList.add(rel.getId());
+                            // It will be either an OSITNRelation or an OsItnMetaData both of which are OSITNElement
+                            relationList.add(((OSITNElement)item).getId());
                             return false;
                         }
                         return true;
@@ -188,7 +190,7 @@ void processVisitor(final File element) throws XMLStreamException, IOException,
                 public boolean execute(long value) {
                     System.out.println("Fid is " + value);
                     return true;
-                }});           
+                }});
             fidList.addAll(roadFidList);
 
             outputListedFids(fidList, bis);
diff --git a/tools/src/main/java/com/graphhopper/tools/routeExtractor/NodeListRouteExtractor.java b/tools/src/main/java/com/graphhopper/tools/routeExtractor/NodeListRouteExtractor.java
index 12da3577a3..427166c3ac 100644
--- a/tools/src/main/java/com/graphhopper/tools/routeExtractor/NodeListRouteExtractor.java
+++ b/tools/src/main/java/com/graphhopper/tools/routeExtractor/NodeListRouteExtractor.java
@@ -20,9 +20,10 @@
 import org.xml.sax.SAXException;
 
 import com.graphhopper.reader.OSMElement;
+import com.graphhopper.reader.Relation;
 import com.graphhopper.reader.RelationMember;
 import com.graphhopper.reader.RoutingElement;
-import com.graphhopper.reader.osgb.OSITNRelation;
+import com.graphhopper.reader.osgb.OSITNElement;
 import com.graphhopper.reader.osgb.OSITNWay;
 
 public class NodeListRouteExtractor extends AbstractProblemRouteExtractor {
@@ -111,22 +112,21 @@ void processVisitor(final RoutingElement someitem) {
                 @Override
                 public boolean execute(final long testWayId) {
                     if (item.isType(OSMElement.RELATION)) {
-                        final OSITNRelation relation = (OSITNRelation) item;
+                        final Relation relation = (Relation) item;
 
                         ArrayList<? extends RelationMember> members = relation.getMembers();
                         for (RelationMember relationMember : members) {
                             if (relationMember.ref() == testWayId) {
-                                System.out.println("\tRelation found for way "+testWayId+". Add the relation Id: " + relation.getId());
-                                roadFidList.add(relation.getId());
+                                // It will be either an OSITNRelation or an OsItnMetaData both of which are OSITNElement
+                                roadFidList.add(((OSITNElement)item).getId());
                                 return false;
                             }
                         }
-
                     }
                     return true;
                 }
             };
-//            System.out.println("Iterate over " + origFullNodeList.size());
+            //            System.out.println("Iterate over " + origFullNodeList.size());
             fullWayList.forEach(addWayIfNodeExists);
 
         }
@@ -163,9 +163,9 @@ public void process(String outputFileName) throws TransformerException, ParserCo
         findRoadLinksForWays(itnFile);
         findNodesOnBothWays(itnFile);
         origFullNodeList.forEach(nodeOutput);
-//         findWaysLinkedAtJunctionOfBothRoads(itnFile);
+        //         findWaysLinkedAtJunctionOfBothRoads(itnFile);
         fullWayList.forEach(wayOutput);
-//         findRelationsAtJunctionOfBothRoads(itnFile);
+        //         findRelationsAtJunctionOfBothRoads(itnFile);
         relationList.forEach(relOutput);
         // } else {
         // fullNodeList.forEach(nodeOutput);
