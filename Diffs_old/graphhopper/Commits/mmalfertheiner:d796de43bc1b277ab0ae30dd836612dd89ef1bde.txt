diff --git a/core/src/main/java/com/graphhopper/routing/util/BikeGenericFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/BikeGenericFlagEncoder.java
index 4fa12dcfb2..f1381d28b7 100644
--- a/core/src/main/java/com/graphhopper/routing/util/BikeGenericFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/BikeGenericFlagEncoder.java
@@ -264,10 +264,12 @@ public long reverseFlags( long flags )
 
         // swap slopes
         double incValue = inclineSlopeEncoder.getDoubleValue(flags);
-        flags = inclineSlopeEncoder.setDoubleValue(flags, declineSlopeEncoder.getDoubleValue(flags));
+        double decValue = declineSlopeEncoder.getDoubleValue(flags);
+        flags = inclineSlopeEncoder.setDoubleValue(flags, decValue);
         double inclineDistPercentage = 100 - inclineDistancePercentageEncoder.getDoubleValue(flags);
         flags = inclineDistancePercentageEncoder.setDoubleValue(flags, inclineDistPercentage);
-        return declineSlopeEncoder.setDoubleValue(flags, incValue);
+        flags = declineSlopeEncoder.setDoubleValue(flags, incValue);
+        return flags;
     }
 
     @Override
@@ -488,7 +490,7 @@ long handleBikeRelated( OSMWay way, long encoded, long partOfCycleRelation )
         WayType wayType = WayType.SMALL_WAY_PAVED;
         boolean isPushingSection = isPushingSection(way);
 
-        if (isPushingSection && !(partOfCycleRelation > BicycleNetworkCode.FERRY.getValue()) || "steps".equals(highway) || "ice".equals(surfaceTag))
+        if (isPushingSection && !(partOfCycleRelation > BicycleNetworkCode.FERRY.getValue()) || "ice".equals(surfaceTag))
             wayType = WayType.PUSHING_SECTION;
         else if ("motorway".equals(highway) || "motorway_link".equals(highway) || "trunk".equals(highway) || "trunk_link".equals(highway))
             wayType = WayType.MOTORWAY;
@@ -520,13 +522,13 @@ else if (("grade2".equals(trackType) || "grade3".equals(trackType)) && (surfaceT
         else if ("path".equals(highway)) {
             if("horrible".equals(smoothness) || "very_horrible".equals(smoothness) || "demanding_mountain_hiking".equals(sacScale) || "mountain_hiking".equals(sacScale) || "4".equals(mtbScale) || "5".equals(mtbScale))
                 wayType = WayType.PATH_HARD;
-            else if("bad".equals(smoothness) || "very_bad".equals(smoothness) || "hiking".equals(sacScale) || "1".equals(mtbScale) || "3".equals(mtbScale) && !pavedSurfaceTags.contains(surfaceTag) && !way.hasTag("bicycle", intendedValues))
+            else if("bad".equals(smoothness) || "very_bad".equals(smoothness) || "hiking".equals(sacScale) || "1".equals(mtbScale) || "2".equals(mtbScale) || "3".equals(mtbScale) && !pavedSurfaceTags.contains(surfaceTag) && !way.hasTag("bicycle", intendedValues))
                 wayType = WayType.PATH_MIDDLE;
             else
                 wayType = WayType.PATH_EASY;
         }
 
-        if(partOfCycleRelation == BicycleNetworkCode.MOUNTAIN_BIKE_ROUTE.getValue()){
+        if(partOfCycleRelation == BicycleNetworkCode.MOUNTAIN_BIKE_ROUTE.getValue() || (way.hasTag("bicycle", "designated") && !pavedSurfaceTags.contains(surfaceTag))){
             wayType = WayType.MTB_CYCLEWAY;
         } else if ("cycleway".equals(highway) || way.hasTag("bicycle", "designated") || (partOfCycleRelation > BicycleNetworkCode.FERRY.getValue()))
         {
diff --git a/core/src/main/java/com/graphhopper/routing/util/DynamicWeighting.java b/core/src/main/java/com/graphhopper/routing/util/DynamicWeighting.java
index 958ffa95e2..83162676dd 100644
--- a/core/src/main/java/com/graphhopper/routing/util/DynamicWeighting.java
+++ b/core/src/main/java/com/graphhopper/routing/util/DynamicWeighting.java
@@ -89,6 +89,8 @@ public double calcWeight( EdgeIteratorState edgeState, boolean reverse, int prev
         if (penalizeEdge)
             time += heading_penalty;
 
+        System.out.println("ID: " + edgeState.getEdge() + ", REVERSE: " + reverse + ", TIME: " + time);
+
         return time / Math.pow((0.5 + getEdgePreference(edgeState, reverse)), 2);
     }
 
@@ -107,20 +109,20 @@ protected double getEdgePreference(EdgeIteratorState edgeState, boolean reverse)
         if(reverse){
             incSlope = flagEncoder.getDouble(edgeState.getFlags(), DynamicWeighting.DEC_SLOPE_KEY) / 100;
             decSlope = flagEncoder.getDouble(edgeState.getFlags(), DynamicWeighting.INC_SLOPE_KEY) / 100;
-            incDist2DSum = (1 - incDistPercentage) * edgeState.getDistance();
-            decDist2DSum = edgeState.getDistance() - incDist2DSum;
+            incDistPercentage = 1.0 - incDistPercentage;
         } else {
             incSlope = flagEncoder.getDouble(edgeState.getFlags(), DynamicWeighting.INC_SLOPE_KEY) / 100;
             decSlope = flagEncoder.getDouble(edgeState.getFlags(), DynamicWeighting.DEC_SLOPE_KEY) / 100;
-            incDist2DSum = edgeState.getDistance() * incDistPercentage;
-            decDist2DSum = edgeState.getDistance() - incDist2DSum;
         }
 
+        incDist2DSum = edgeState.getDistance() * incDistPercentage;
+        decDist2DSum = edgeState.getDistance() - incDist2DSum;
+
         priority += preferenceProvider.calcWayTypePreference(wayType);
         priority += preferenceProvider.calcSurfacePreference(pavedSurface);
         priority += preferenceProvider.calcSlopePreference(wayType, incSlope, incDist2DSum, decSlope, decDist2DSum);
 
-        System.out.println("WAYTYPE: " + wayType + ", INC SLOPE: " + incSlope + ", DEC SLOPE: " + decSlope +", PRIORITY: " + Helper.keepIn(priority, PriorityCode.WORST.getValue(), PriorityCode.BEST.getValue()));
+        //System.out.println("ID: " + edgeState.getEdge() + ", REVERSE: " + reverse +", WAYTYPE: " + wayType + ", INC SLOPE: " + incSlope + ", DEC SLOPE: " + decSlope +", PRIORITY: " + Helper.keepIn(priority, PriorityCode.WORST.getValue(), PriorityCode.BEST.getValue()));
 
         return Helper.keepIn(priority, PriorityCode.WORST.getValue(), PriorityCode.BEST.getValue()) / PriorityCode.BEST.getValue();
 
diff --git a/core/src/main/java/com/graphhopper/routing/util/EncoderSpeedProvider.java b/core/src/main/java/com/graphhopper/routing/util/EncoderSpeedProvider.java
index 6834bdd998..31c6450710 100644
--- a/core/src/main/java/com/graphhopper/routing/util/EncoderSpeedProvider.java
+++ b/core/src/main/java/com/graphhopper/routing/util/EncoderSpeedProvider.java
@@ -1,6 +1,7 @@
 package com.graphhopper.routing.util;
 
 import com.graphhopper.util.EdgeIteratorState;
+import com.graphhopper.util.Helper;
 
 import static com.graphhopper.util.Helper.keepIn;
 
@@ -30,26 +31,24 @@ protected double adjustSpeed(double speed, EdgeIteratorState edgeState, boolean
 
         double adjustedSpeed = speed;
 
-        if (!reverse)
+        if(reverse)
         {
-            // use weighted mean so that longer incline infuences speed more than shorter
-            double fwdFaster = 1 + 30 * keepIn(decElevation, 0, 0.2);
-            fwdFaster = Math.sqrt(fwdFaster);
-            double fwdSlower = 1 - 5 * keepIn(incElevation, 0, 0.2);
-            fwdSlower = fwdSlower * fwdSlower;
-            double incDist2DSum = edgeState.getDistance() * incDistPercentage;
-            double decDist2DSum = edgeState.getDistance() - incDist2DSum;
-            adjustedSpeed = keepIn(speed * (fwdSlower * incDist2DSum + fwdFaster * decDist2DSum) / edgeState.getDistance(), BikeGenericFlagEncoder.PUSHING_SECTION_SPEED / 2, 50);
-        } else {
-            double fwdFaster = 1 + 30 * keepIn(incElevation, 0, 0.2);
-            fwdFaster = Math.sqrt(fwdFaster);
-            double fwdSlower = 1 - 5 * keepIn(decElevation, 0, 0.2);
-            fwdSlower = fwdSlower * fwdSlower;
-            double incDist2DSum = edgeState.getDistance() * (1 - incDistPercentage);
-            double decDist2DSum = edgeState.getDistance() - incDist2DSum;
-            adjustedSpeed = keepIn(speed * (fwdSlower * decDist2DSum + fwdFaster * incDist2DSum) / edgeState.getDistance(), BikeGenericFlagEncoder.PUSHING_SECTION_SPEED / 2, 50);
+            incElevation = decElevation;
+            decElevation = encoder.getDouble(edgeState.getFlags(), DynamicWeighting.INC_SLOPE_KEY) / 100;
+            incDistPercentage = 1.0 - incDistPercentage;
         }
 
+        //System.out.println("ID: " + edgeState.getEdge() + ", REVERSE: " + reverse + ", INC SLOPE: " + incElevation + ", DEC SLOPE: " + decElevation);
+
+        // use weighted mean so that longer incline infuences speed more than shorter
+        double fwdFaster = 1 + 30 * keepIn(decElevation, 0, 0.2);
+        fwdFaster = Math.sqrt(fwdFaster);
+        double fwdSlower = 1 - 5 * keepIn(incElevation, 0, 0.2);
+        fwdSlower = fwdSlower * fwdSlower;
+        double incDist2DSum = edgeState.getDistance() * incDistPercentage;
+        double decDist2DSum = edgeState.getDistance() - incDist2DSum;
+        adjustedSpeed = keepIn(speed * (fwdSlower * incDist2DSum + fwdFaster * decDist2DSum) / edgeState.getDistance(), BikeGenericFlagEncoder.PUSHING_SECTION_SPEED / 2, 50);
+
         //System.out.println("NEW SPEED: " + Helper.round2(adjustedSpeed) + ", SPEED: " + speed + ", INC ELE: " + incElevation + ", DEC ELE: " + decElevation + ", PERCENTAGE: " + incDistPercentage + " CORRECT:");
 
         return adjustedSpeed;
diff --git a/core/src/main/java/com/graphhopper/routing/util/ProfilePreferenceProvider.java b/core/src/main/java/com/graphhopper/routing/util/ProfilePreferenceProvider.java
index d75244d9ad..19536eb039 100644
--- a/core/src/main/java/com/graphhopper/routing/util/ProfilePreferenceProvider.java
+++ b/core/src/main/java/com/graphhopper/routing/util/ProfilePreferenceProvider.java
@@ -42,7 +42,7 @@ public int calcSurfacePreference(boolean pavedSurface) {
         else if(!profileManager.prefersPavedSurface() && pavedSurface)
             preference = -2;
 
-        System.out.println("PREFERENCE: " + preference + ", profileManager: " + profileManager.prefersPavedSurface());
+        //System.out.println("PREFERENCE: " + preference + ", profileManager: " + profileManager.prefersPavedSurface());
 
         return preference;
     }
diff --git a/core/src/main/java/com/graphhopper/util/profiles/GPXDataExtractor.java b/core/src/main/java/com/graphhopper/util/profiles/GPXDataExtractor.java
index f652f438b4..91bc1d432c 100644
--- a/core/src/main/java/com/graphhopper/util/profiles/GPXDataExtractor.java
+++ b/core/src/main/java/com/graphhopper/util/profiles/GPXDataExtractor.java
@@ -27,8 +27,8 @@
     private List<TrackPart> trackParts;
     private MapMatching mapMatching;
     private BikeGenericFlagEncoder encoder;
-    private int filterType = FILTER_KALMAN_FORWARD;
-    private int filterDistance = 100;
+    private int filterType = FILTER_KALMAN_COMBINED;
+    private int filterDistance = 60;
 
     private double[] distances;
     private double[] elevations;
@@ -134,7 +134,6 @@ private void processGPXData(){
             double secondLon = inputGPXEntries.get(i).getLon();
 
             distances[i-1] = distCalc.calcDist(firstLat, firstLon, secondLat, secondLon);
-            System.out.print(", " + distances[i-1]);
             elevations[i] = inputGPXEntries.get(i).getEle();
 
         }
diff --git a/core/src/main/java/com/graphhopper/util/profiles/ProfileManager.java b/core/src/main/java/com/graphhopper/util/profiles/ProfileManager.java
index aa9f013a1b..b0d81b44f5 100644
--- a/core/src/main/java/com/graphhopper/util/profiles/ProfileManager.java
+++ b/core/src/main/java/com/graphhopper/util/profiles/ProfileManager.java
@@ -134,7 +134,6 @@ public double getSpeedPerSlope(int wayType, int slopeIndex, double baseSpeed, Bi
                 double weight = ridersEntries[i].getDistance();
                 int slope = i - (RidersProfile.SLOPES / 2);
                 double speed = ridersEntries[i].getSpeed() / maxSpeed;
-                System.out.println("WEIGHT: " + weight + ", SLOPE: " + slope + ", SPEED: " + speed);
                 points.add(new WeightedObservedPoint(weight, slope, speed));
             }
         }
@@ -150,7 +149,6 @@ public double getSpeedPerSlope(int wayType, int slopeIndex, double baseSpeed, Bi
 
         for( int i = - offset; i < offset + 1; i++){
             result[i + offset] = sigF.value(i, coef) * maxSpeed;
-            System.out.println("WAYTYPE: " + wayType + ", SLOPE: " + i + ", SPEED" + result[i + offset]);
         }
 
         return result;
