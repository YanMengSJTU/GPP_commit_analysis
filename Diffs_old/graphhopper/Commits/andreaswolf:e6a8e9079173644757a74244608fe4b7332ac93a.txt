diff --git a/core/src/main/java/com/graphhopper/reader/OSMReader.java b/core/src/main/java/com/graphhopper/reader/OSMReader.java
index ea72a62e48..99b4b468fb 100644
--- a/core/src/main/java/com/graphhopper/reader/OSMReader.java
+++ b/core/src/main/java/com/graphhopper/reader/OSMReader.java
@@ -669,16 +669,16 @@ int addTowerNode( long osmId, double lat, double lon, double ele )
         {
             for (int i = 0; i < osmNodeIds.size(); i++)
             {
-                long osmId = osmNodeIds.get(i);
-                int tmpNode = getNodeMap().get(osmId);
-                if (tmpNode == EMPTY)
+                long osmNodeId = osmNodeIds.get(i);
+                int internalNodeId = getNodeMap().get(osmNodeId);
+                if (internalNodeId == EMPTY)
                     continue;
 
                 // skip osmIds with no associated pillar or tower id (e.g. !OSMReader.isBounds)
-                if (tmpNode == TOWER_NODE)
+                if (internalNodeId == TOWER_NODE)
                     continue;
 
-                if (tmpNode == PILLAR_NODE)
+                if (internalNodeId == PILLAR_NODE)
                 {
                     // In some cases no node information is saved for the specified osmId.
                     // ie. a way references a <node> which does not exist in the current file.
@@ -686,49 +686,53 @@ int addTowerNode( long osmId, double lat, double lon, double ele )
                     if (!pointList.isEmpty() && lastInBoundsPillarNode > -TOWER_NODE)
                     {
                         // transform the pillar node to a tower node
-                        tmpNode = lastInBoundsPillarNode;
-                        tmpNode = handlePillarNode(tmpNode, osmId, null, true);
-                        tmpNode = -tmpNode - 3;
+                        internalNodeId = lastInBoundsPillarNode;
+                        internalNodeId = handlePillarNode(internalNodeId, osmNodeId, null, true);
+                        internalNodeId = -internalNodeId - 3;
                         if (pointList.getSize() > 1 && firstNode >= 0)
                         {
                             // TOWER node
-                            newEdges.add(addEdge(firstNode, tmpNode, pointList, flags, wayOsmId));
+                            newEdges.add(addEdge(firstNode, internalNodeId, pointList, flags, wayOsmId));
+
                             pointList.clear();
-                            pointList.add(nodeAccess, tmpNode);
+                            pointList.add(nodeAccess, internalNodeId);
                         }
-                        firstNode = tmpNode;
+                        firstNode = internalNodeId;
                         lastInBoundsPillarNode = -1;
                     }
                     continue;
                 }
 
-                if (tmpNode <= -TOWER_NODE && tmpNode >= TOWER_NODE)
-                    throw new AssertionError("Mapped index not in correct bounds " + tmpNode + ", " + osmId);
+                if (internalNodeId <= -TOWER_NODE && internalNodeId >= TOWER_NODE)
+                    throw new AssertionError("Mapped index not in correct bounds " + internalNodeId + ", " + osmNodeId);
 
-                if (tmpNode > -TOWER_NODE)
+                
+                if (internalNodeId > -TOWER_NODE) // node is pillar node
                 {
                     boolean convertToTowerNode = i == 0 || i == lastIndex;
                     if (!convertToTowerNode)
                     {
-                        lastInBoundsPillarNode = tmpNode;
+                        lastInBoundsPillarNode = internalNodeId;
                     }
 
                     // PILLAR node, but convert to towerNode if end-standing
-                    tmpNode = handlePillarNode(tmpNode, osmId, pointList, convertToTowerNode);
+                    internalNodeId = handlePillarNode(internalNodeId, osmNodeId, pointList, convertToTowerNode);
                 }
 
-                if (tmpNode < TOWER_NODE)
+                if (internalNodeId < TOWER_NODE) // node is tower node
                 {
                     // TOWER node
-                    tmpNode = -tmpNode - 3;
-                    pointList.add(nodeAccess, tmpNode);
+                    internalNodeId = -internalNodeId - 3;
+                    pointList.add(nodeAccess, internalNodeId);
                     if (firstNode >= 0)
                     {
-                        newEdges.add(addEdge(firstNode, tmpNode, pointList, flags, wayOsmId));
+                        newEdges.add(addEdge(firstNode, internalNodeId, pointList, flags, wayOsmId));
+
+                        // reset waypoint list
                         pointList.clear();
-                        pointList.add(nodeAccess, tmpNode);
+                        pointList.add(nodeAccess, internalNodeId);
                     }
-                    firstNode = tmpNode;
+                    firstNode = internalNodeId;
                 }
             }
         } catch (RuntimeException ex)
