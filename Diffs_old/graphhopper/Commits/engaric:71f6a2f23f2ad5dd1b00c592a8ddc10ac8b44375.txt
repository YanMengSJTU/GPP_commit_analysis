diff --git a/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java b/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
index cec3bf266a..a34ba965cc 100644
--- a/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
+++ b/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
@@ -76,7 +76,7 @@
 
 	@Override
 	public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes )
-			throws ServletException, IOException
+	        throws ServletException, IOException
 	{
 		List<GHPoint> infoPoints = getPoints(httpReq, "point");
 
@@ -98,6 +98,7 @@ public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes )
 		GHResponse ghRsp;
 
 		String instructionsString = getParam(httpReq, "instructions", "true");
+		String pointsEncodedString = getParam(httpReq, "points_encoded", "true");
 
 		boolean validLocale = false;
 		for (String validLocaleStr : TranslationMap.LOCALES)
@@ -112,7 +113,7 @@ public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes )
 		if (!validLocale)
 		{
 			StringBuilder errMesg = new StringBuilder(localeStr)
-			.append(" is not a valid value for parameter locale. Valid values are ");
+			        .append(" is not a valid value for parameter locale. Valid values are ");
 			for (int i = 0; i < TranslationMap.LOCALES.size(); i++)
 			{
 				String validLocaleStr = TranslationMap.LOCALES.get(i);
@@ -128,35 +129,42 @@ public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes )
 			}
 			ghRsp = new GHResponse().addError(new IllegalArgumentException(errMesg.toString()));
 		} else if (!AlgorithmOptions.ASTAR.equalsIgnoreCase(algoStr)
-				&& !AlgorithmOptions.ASTAR_BI.equalsIgnoreCase(algoStr)
-				&& !AlgorithmOptions.DIJKSTRA.equalsIgnoreCase(algoStr)
-				&& !AlgorithmOptions.DIJKSTRA_BI.equalsIgnoreCase(algoStr)
-				&& !AlgorithmOptions.DIJKSTRA_ONE_TO_MANY.equalsIgnoreCase(algoStr))
+		        && !AlgorithmOptions.ASTAR_BI.equalsIgnoreCase(algoStr)
+		        && !AlgorithmOptions.DIJKSTRA.equalsIgnoreCase(algoStr)
+		        && !AlgorithmOptions.DIJKSTRA_BI.equalsIgnoreCase(algoStr)
+		        && !AlgorithmOptions.DIJKSTRA_ONE_TO_MANY.equalsIgnoreCase(algoStr))
 		{
 			String errMesg = String
-					.format("%s is not a valid value for parameter algorithm. Valid values are %s, %s, %s, %s or %s",
-							algoStr, AlgorithmOptions.ASTAR, AlgorithmOptions.ASTAR_BI,
-							AlgorithmOptions.DIJKSTRA, AlgorithmOptions.DIJKSTRA_BI,
-							AlgorithmOptions.DIJKSTRA_ONE_TO_MANY);
+			        .format("%s is not a valid value for parameter algorithm. Valid values are %s, %s, %s, %s or %s",
+			                algoStr, AlgorithmOptions.ASTAR, AlgorithmOptions.ASTAR_BI,
+			                AlgorithmOptions.DIJKSTRA, AlgorithmOptions.DIJKSTRA_BI,
+			                AlgorithmOptions.DIJKSTRA_ONE_TO_MANY);
 			ghRsp = new GHResponse().addError(new IllegalArgumentException(errMesg));
 		} else if (!"true".equalsIgnoreCase(instructionsString)
-				&& !"false".equalsIgnoreCase(instructionsString))
+		        && !"false".equalsIgnoreCase(instructionsString))
 		{
 			String errMesg = String
-					.format("%s is not a valid value for parameter instructions. Valid vehicles are true or false",
-							instructionsString);
+			        .format("%s is not a valid value for parameter instructions. Valid values are true or false",
+			                instructionsString);
+			ghRsp = new GHResponse().addError(new IllegalArgumentException(errMesg));
+		} else if (!"true".equalsIgnoreCase(pointsEncodedString)
+		        && !"false".equalsIgnoreCase(pointsEncodedString))
+		{
+			String errMesg = String
+			        .format("%s is not a valid value for parameter pointsEncodedString. Valid values are true or false",
+			                pointsEncodedString);
 			ghRsp = new GHResponse().addError(new IllegalArgumentException(errMesg));
 		} else if (!hopper.getEncodingManager().supports(vehicleStr))
 		{
 			String supported = hopper.getGraph().getEncodingManager().toString();
 			String errMesg = String.format(
-					"Vehicle %s is not a valid vehicle. Valid vehicles are %s", vehicleStr,
-					supported);
+			        "Vehicle %s is not a valid vehicle. Valid vehicles are %s", vehicleStr,
+			        supported);
 			ghRsp = new GHResponse().addError(new IllegalArgumentException(errMesg));
 		} else if (enableElevation && !hopper.hasElevation())
 		{
 			ghRsp = new GHResponse().addError(new IllegalArgumentException(
-					"Elevation not supported!"));
+			        "Elevation not supported!"));
 		} else
 		{
 			FlagEncoder algoVehicle = hopper.getEncodingManager().getEncoder(vehicleStr);
@@ -164,25 +172,25 @@ public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes )
 
 			initHints(request, httpReq.getParameterMap());
 			request.setVehicle(algoVehicle.toString()).setWeighting(weighting)
-			.setAlgorithm(algoStr).setLocale(localeStr).getHints()
-			.put("calcPoints", calcPoints).put("instructions", enableInstructions)
-			.put("wayPointMaxDistance", minPathPrecision);
+			        .setAlgorithm(algoStr).setLocale(localeStr).getHints()
+			        .put("calcPoints", calcPoints).put("instructions", enableInstructions)
+			        .put("wayPointMaxDistance", minPathPrecision);
 
 			ghRsp = hopper.route(request);
 		}
 
 		float took = sw.stop().getSeconds();
 		String infoStr = httpReq.getRemoteAddr() + " " + httpReq.getLocale() + " "
-				+ httpReq.getHeader("User-Agent");
+		        + httpReq.getHeader("User-Agent");
 		String logStr = httpReq.getQueryString() + " " + infoStr + " " + infoPoints + ", took:"
-				+ took + ", " + algoStr + ", " + weighting + ", " + vehicleStr;
+		        + took + ", " + algoStr + ", " + weighting + ", " + vehicleStr;
 
 		if (ghRsp.hasErrors())
 			logger.error(logStr + ", errors:" + ghRsp.getErrors());
 		else
 			logger.info(logStr + ", distance: " + ghRsp.getDistance() + ", time:"
-					+ Math.round(ghRsp.getTime() / 60000f) + "min, points:"
-					+ ghRsp.getPoints().getSize() + ", debug - " + ghRsp.getDebugInfo());
+			        + Math.round(ghRsp.getTime() / 60000f) + "min, points:"
+			        + ghRsp.getPoints().getSize() + ", debug - " + ghRsp.getDebugInfo());
 
 		if (writeGPX)
 		{
@@ -199,12 +207,12 @@ public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes )
 			if (!"json".equalsIgnoreCase(type) || (!"jsonp".equalsIgnoreCase(type) && jsonpAllowed))
 			{
 				String errorMessage = type
-						+ " is not a valid value for parameter type. Valid values are ";
+				        + " is not a valid value for parameter type. Valid values are ";
 				errorMessage += jsonpAllowed ? "JSON, GPX or JSONP." : "GPX or JSON.";
 				ghRsp.addError(new IllegalArgumentException(errorMessage));
 			}
 			Map<String, Object> map = createJson(ghRsp, calcPoints, pointsEncoded, enableElevation,
-					enableInstructions);
+			        enableInstructions);
 			Object infoMap = map.get("info");
 			if (infoMap != null)
 				((Map) infoMap).put("took", Math.round(took * 1000));
@@ -218,7 +226,7 @@ public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes )
 	}
 
 	protected String createGPXString( HttpServletRequest req, HttpServletResponse res,
-			GHResponse rsp )
+	        GHResponse rsp )
 	{
 		boolean includeElevation = getBooleanParam(req, "elevation", false);
 		res.setCharacterEncoding("UTF-8");
@@ -279,8 +287,8 @@ String errorsToXML( List<Throwable> list )
 	}
 
 	protected Map<String, Object> createJson( GHResponse rsp, boolean calcPoints,
-			boolean pointsEncoded, boolean includeElevation, boolean enableInstructions )
-			{
+	        boolean pointsEncoded, boolean includeElevation, boolean enableInstructions )
+	{
 		Map<String, Object> json = new HashMap<String, Object>();
 
 		if (rsp.hasErrors())
@@ -321,7 +329,7 @@ String errorsToXML( List<Throwable> list )
 				{
 					BBox maxBounds = hopper.getGraph().getBounds();
 					BBox maxBounds2D = new BBox(maxBounds.minLon, maxBounds.maxLon,
-							maxBounds.minLat, maxBounds.maxLat);
+					        maxBounds.minLat, maxBounds.maxLat);
 					jsonPath.put("bbox", rsp.calcRouteBBox(maxBounds2D).toGeoJson());
 				}
 
@@ -336,7 +344,7 @@ String errorsToXML( List<Throwable> list )
 			json.put("paths", Collections.singletonList(jsonPath));
 		}
 		return json;
-			}
+	}
 
 	protected Object createPoints( PointList points, boolean pointsEncoded, boolean includeElevation )
 	{
