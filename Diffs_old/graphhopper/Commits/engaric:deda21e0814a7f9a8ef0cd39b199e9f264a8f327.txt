diff --git a/core/src/main/java/com/graphhopper/routing/util/AbstractAvoidanceDecorator.java b/core/src/main/java/com/graphhopper/routing/util/AbstractAvoidanceDecorator.java
index 29ca7faeec..994001ae2c 100644
--- a/core/src/main/java/com/graphhopper/routing/util/AbstractAvoidanceDecorator.java
+++ b/core/src/main/java/com/graphhopper/routing/util/AbstractAvoidanceDecorator.java
@@ -4,80 +4,112 @@
 import com.graphhopper.util.InstructionAnnotation;
 import com.graphhopper.util.Translation;
 
-public abstract class AbstractAvoidanceDecorator implements EncoderDecorator {
+public abstract class AbstractAvoidanceDecorator implements EncoderDecorator
+{
 
 	protected EncodedValue wayTypeEncoder;
 	protected int originalShift;
 	public static final int KEY = 303;
 
-	protected abstract void defineEncoder(int shift);
+	protected abstract void defineEncoder( int shift );
+
 	protected abstract EdgeAttribute[] getEdgeAttributesOfInterest();
 
-	public int defineWayBits(int shift) {
+	@Override
+	public int defineWayBits( int shift )
+	{
 		originalShift = shift;
 		defineEncoder(shift);
 		shift += wayTypeEncoder.getBits();
 		return shift;
 	}
-	
-	public int getOriginalShift() {
+
+	@Override
+	public int getOriginalShift()
+	{
 		return originalShift;
 	}
 
+	@Override
 	public InstructionAnnotation getAnnotation( long flags, Translation tr )
-    {
-        long wayType = wayTypeEncoder.getValue(flags);
-        String wayName = getWayName(wayType, tr);
-        return new InstructionAnnotation(0, wayName);
-    }
+	{
+		long wayType = wayTypeEncoder.getValue(flags);
+		String wayName = getWayName(wayType, tr);
+		return new InstructionAnnotation(0, wayName);
+	}
 
-	public boolean supports(int key) {
+	@Override
+	public boolean supports( int key )
+	{
 		return key == KEY;
 	};
-	
+
 	@Override
-	public long getLong(long flags) {
+	public long getLong( long flags )
+	{
 		return wayTypeEncoder.getValue(flags);
 	}
-	
+
 	@Override
-	public double getDouble(long flags) {
+	public double getDouble( long flags )
+	{
 		double avoidanceType = wayTypeEncoder.getValue(flags);
 		return avoidanceType;
 	}
 
-	public long handleWayTags(Way way) {
+	@Override
+	public long handleWayTags( Way way )
+	{
 		long avoidanceValue = 0;
-	
-		for (EdgeAttribute aType : getEdgeAttributesOfInterest()) {
-			if (aType.isValidForWay(way)) {
+
+		for (EdgeAttribute aType : getEdgeAttributesOfInterest())
+		{
+			if (aType.isValidForWay(way))
+			{
 				avoidanceValue += aType.getValue();
 			}
 		}
 		return wayTypeEncoder.setValue(0L, avoidanceValue);
 	}
 
-	private String getWayName(long wayType, Translation tr) {
+	private String getWayName( long wayType, Translation tr )
+	{
 		String wayName = "";
-		for (EdgeAttribute aType : getEdgeAttributesOfInterest()) {
-			if ((wayType & aType.getValue()) == aType.getValue()) {
+		for (EdgeAttribute aType : getEdgeAttributesOfInterest())
+		{
+			if ((wayType & aType.getValue()) == aType.getValue())
+			{
 				wayName += " ";
 				wayName += aType.name();
 			}
 		}
-	
+
 		return wayName;
 	}
 
 	@Override
-	public long getBitMask(String[] attributes) {
+	public long getBitMask( String[] attributes )
+	{
 		long avoidanceValue = 0;
-		for (EdgeAttribute aType : getEdgeAttributesOfInterest()) {
-			if (aType.representedIn(attributes)) {
+		for (EdgeAttribute aType : getEdgeAttributesOfInterest())
+		{
+			if (aType.representedIn(attributes))
+			{
 				avoidanceValue += aType.getValue();
 			}
 		}
 		return avoidanceValue;
 	}
 
+	public String[] getEdgeAttributesOfInterestNames()
+	{
+		EdgeAttribute[] edgeAttributes = getEdgeAttributesOfInterest();
+		String[] results = new String[edgeAttributes.length];
+		for (int i = 0; i < edgeAttributes.length; i++)
+		{
+			results[i] = edgeAttributes[i].toString();
+		}
+		return results;
+	}
+
 }
diff --git a/core/src/main/java/com/graphhopper/routing/util/OsVehicleAvoidanceDecorator.java b/core/src/main/java/com/graphhopper/routing/util/OsVehicleAvoidanceDecorator.java
index 68472bbe3c..c0d589d309 100644
--- a/core/src/main/java/com/graphhopper/routing/util/OsVehicleAvoidanceDecorator.java
+++ b/core/src/main/java/com/graphhopper/routing/util/OsVehicleAvoidanceDecorator.java
@@ -5,55 +5,69 @@
 /**
  * Created by sadam on 4/15/15.
  */
-public class OsVehicleAvoidanceDecorator extends AbstractAvoidanceDecorator {
-    protected enum AvoidanceType implements EdgeAttribute
-    {
-        MOTORWAYS(1) {
-            @Override
-            public boolean isValidForWay(Way way) {
-               return way.hasTag("highway", "Motorway", "motorway");
-            }
-        },
-        TOLL(2) {
-            @Override
-            public boolean isValidForWay(Way way) {
-                return way.hasTag("toll", "yes");
-            }
-        };
-
-
-        private final long value;
-
-        private AvoidanceType( long value )
-        {
-            this.value = value;
-        }
-
-        public long getValue()
-        {
-            return value;
-        }
-
-        public boolean isValidForWay(Way way) {
-            return false;
-        }
-        
-        public boolean representedIn(String[] attributes) {
-			for (String attribute : attributes) {
-				if(attribute.equals(this.toString())) {
+public class OsVehicleAvoidanceDecorator extends AbstractAvoidanceDecorator
+{
+	protected enum AvoidanceType implements EdgeAttribute
+	{
+		MOTORWAYS(1)
+		{
+			@Override
+			public boolean isValidForWay( Way way )
+			{
+				return way.hasTag("highway", "Motorway", "motorway");
+			}
+		},
+		TOLL(2)
+		{
+			@Override
+			public boolean isValidForWay( Way way )
+			{
+				return way.hasTag("toll", "yes");
+			}
+		};
+
+		private final long value;
+
+		private AvoidanceType( long value )
+		{
+			this.value = value;
+		}
+
+		@Override
+		public long getValue()
+		{
+			return value;
+		}
+
+		@Override
+		public boolean isValidForWay( Way way )
+		{
+			return false;
+		}
+
+		@Override
+		public boolean representedIn( String[] attributes )
+		{
+			for (String attribute : attributes)
+			{
+				if (attribute.equals(this.toString()))
+				{
 					return true;
 				}
 			}
 			return false;
 		}
-    }
+	}
 
-    @Override
-	protected void defineEncoder(int shift) {
+	@Override
+	protected void defineEncoder( int shift )
+	{
 		wayTypeEncoder = new EncodedValue("HazardType", shift, 3, 1, 0, 4, true);
 	}
-    
-    protected EdgeAttribute[] getEdgeAttributesOfInterest() {
+
+	@Override
+	protected EdgeAttribute[] getEdgeAttributesOfInterest()
+	{
 		return AvoidanceType.values();
 	}
 
diff --git a/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java b/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
index 3628396510..d346c76f3a 100644
--- a/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
+++ b/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
@@ -22,6 +22,7 @@
 import java.io.IOException;
 import java.io.StringWriter;
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.List;
@@ -51,6 +52,9 @@
 import com.graphhopper.http.validation.BooleanValidator;
 import com.graphhopper.http.validation.CaseInsensitiveStringListValidator;
 import com.graphhopper.routing.AlgorithmOptions;
+import com.graphhopper.routing.util.AbstractAvoidanceDecorator;
+import com.graphhopper.routing.util.AbstractFlagEncoder;
+import com.graphhopper.routing.util.EncoderDecorator;
 import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.routing.util.WeightingMap;
 import com.graphhopper.util.Helper;
@@ -98,71 +102,46 @@ public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes )
 		String localeStr = getParam(httpReq, "locale", "en_US");
 
 		StopWatch sw = new StopWatch().start();
-		GHResponse ghRsp;
+		GHResponse ghRsp = null;
 
 		String instructionsString = getParam(httpReq, "instructions", "true");
 		String pointsEncodedString = getParam(httpReq, "points_encoded", "true");
 		String calcPointsString = getParam(httpReq, "calc_points", "true");
 		String debugString = getParam(httpReq, "debug", "true");
 		String prettyString = getParam(httpReq, "pretty", "true");
+		String avoidancesString = getParam(httpReq, "avoidances", null);
 
 		if (!new CaseInsensitiveStringListValidator().isValid(localeStr, TranslationMap.LOCALES))
 		{
-			StringBuilder errMesg = new StringBuilder(localeStr)
-			        .append(" is not a valid value for parameter locale. Valid values are ");
-			for (int i = 0; i < TranslationMap.LOCALES.size(); i++)
-			{
-				String validLocaleStr = TranslationMap.LOCALES.get(i);
-				if (i == TranslationMap.LOCALES.size() - 1)
-				{
-					errMesg.append(" or ");
-				}
-				errMesg.append(validLocaleStr);
-				if (i < TranslationMap.LOCALES.size() - 2)
-				{
-					errMesg.append(", ");
-				}
-			}
+			String errMesg = buildErrorMessageString(localeStr, "locale", TranslationMap.LOCALES);
 			ghRsp = new GHResponse().addError(new IllegalArgumentException(errMesg.toString()));
 		} else if (!new CaseInsensitiveStringListValidator().isValid(algoStr,
-				AlgorithmOptions.ASTAR, AlgorithmOptions.ASTAR_BI, AlgorithmOptions.DIJKSTRA,
-				AlgorithmOptions.DIJKSTRA_BI, AlgorithmOptions.DIJKSTRA_ONE_TO_MANY))
+		        AlgorithmOptions.ASTAR, AlgorithmOptions.ASTAR_BI, AlgorithmOptions.DIJKSTRA,
+		        AlgorithmOptions.DIJKSTRA_BI, AlgorithmOptions.DIJKSTRA_ONE_TO_MANY))
 		{
-			String errMesg = String
-			        .format("%s is not a valid value for parameter algorithm. Valid values are %s, %s, %s, %s or %s",
-			                algoStr, AlgorithmOptions.ASTAR, AlgorithmOptions.ASTAR_BI,
-			                AlgorithmOptions.DIJKSTRA, AlgorithmOptions.DIJKSTRA_BI,
-			                AlgorithmOptions.DIJKSTRA_ONE_TO_MANY);
+			String errMesg = buildErrorMessageString(algoStr, "algorithm", AlgorithmOptions.ASTAR,
+			        AlgorithmOptions.ASTAR_BI, AlgorithmOptions.DIJKSTRA,
+			        AlgorithmOptions.DIJKSTRA_BI, AlgorithmOptions.DIJKSTRA_ONE_TO_MANY);
 			ghRsp = new GHResponse().addError(new IllegalArgumentException(errMesg));
 		} else if (!new BooleanValidator().isValid(instructionsString))
 		{
-			String errMesg = String
-			        .format("%s is not a valid value for parameter instructions. Valid values are true or false",
-			                instructionsString);
+			String errMesg = buildBooleanErrorMessageString(instructionsString, "instructions");
 			ghRsp = new GHResponse().addError(new IllegalArgumentException(errMesg));
 		} else if (!new BooleanValidator().isValid(pointsEncodedString))
 		{
-			String errMesg = String
-			        .format("%s is not a valid value for parameter pointsEncodedString. Valid values are true or false",
-			                pointsEncodedString);
+			String errMesg = buildBooleanErrorMessageString(pointsEncodedString, "points_encoded");
 			ghRsp = new GHResponse().addError(new IllegalArgumentException(errMesg));
 		} else if (!new BooleanValidator().isValid(calcPointsString))
 		{
-			String errMesg = String
-			        .format("%s is not a valid value for parameter calc_points. Valid values are true or false",
-			                calcPointsString);
+			String errMesg = buildBooleanErrorMessageString(calcPointsString, "calc_points");
 			ghRsp = new GHResponse().addError(new IllegalArgumentException(errMesg));
 		} else if (!new BooleanValidator().isValid(debugString))
 		{
-			String errMesg = String.format(
-			        "%s is not a valid value for parameter debug. Valid values are true or false",
-			        debugString);
+			String errMesg = buildBooleanErrorMessageString(debugString, "debug");
 			ghRsp = new GHResponse().addError(new IllegalArgumentException(errMesg));
 		} else if (!new BooleanValidator().isValid(prettyString))
 		{
-			String errMesg = String.format(
-			        "%s is not a valid value for parameter pretty. Valid values are true or false",
-			        prettyString);
+			String errMesg = buildBooleanErrorMessageString(prettyString, "pretty");
 			ghRsp = new GHResponse().addError(new IllegalArgumentException(errMesg));
 		} else if (!hopper.getEncodingManager().supports(vehicleStr))
 		{
@@ -178,15 +157,52 @@ public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes )
 		} else
 		{
 			FlagEncoder algoVehicle = hopper.getEncodingManager().getEncoder(vehicleStr);
-			GHRequest request = new GHRequest(infoPoints);
 
-			initHints(request, httpReq.getParameterMap());
-			request.setVehicle(algoVehicle.toString()).setWeighting(weighting)
-			        .setAlgorithm(algoStr).setLocale(localeStr).getHints()
-			        .put("calcPoints", calcPoints).put("instructions", enableInstructions)
-			        .put("wayPointMaxDistance", minPathPrecision);
+			// Lots of lovely braces. I will tidy this up next week... promise!
+			if (avoidancesString != null)
+			{
+				System.out.println("Avoidances for " + algoVehicle);
+				List<String> allowedAvoidances = new ArrayList<>();
+				// Check Avoidances
+				if (algoVehicle instanceof AbstractFlagEncoder)
+				{
+					AbstractFlagEncoder abstractFlagEncoder = (AbstractFlagEncoder) algoVehicle;
+					List<EncoderDecorator> encoderDecorators = abstractFlagEncoder
+					        .getEncoderDecorators();
+					if (encoderDecorators != null)
+					{
+						for (EncoderDecorator encoderDecorator : encoderDecorators)
+						{
+							if (encoderDecorator instanceof AbstractAvoidanceDecorator)
+							{
+								AbstractAvoidanceDecorator abstractAvoidanceDecorator = (AbstractAvoidanceDecorator) encoderDecorator;
+								allowedAvoidances.addAll(Arrays.asList(abstractAvoidanceDecorator
+								        .getEdgeAttributesOfInterestNames()));
+							}
+						}
+					}
+				}
+				if (!allowedAvoidances.contains(avoidancesString))
+				{
+					String errMesg = buildErrorMessageString(avoidancesString, "avoidances",
+					        allowedAvoidances);
+					ghRsp = new GHResponse().addError(new IllegalArgumentException(errMesg
+					        .toString()));
+				}
+			}
+
+			if (ghRsp == null)
+			{
+				GHRequest request = new GHRequest(infoPoints);
+
+				initHints(request, httpReq.getParameterMap());
+				request.setVehicle(algoVehicle.toString()).setWeighting(weighting)
+				        .setAlgorithm(algoStr).setLocale(localeStr).getHints()
+				        .put("calcPoints", calcPoints).put("instructions", enableInstructions)
+				        .put("wayPointMaxDistance", minPathPrecision);
 
-			ghRsp = hopper.route(request);
+				ghRsp = hopper.route(request);
+			}
 		}
 
 		float took = sw.stop().getSeconds();
@@ -235,6 +251,40 @@ public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes )
 		}
 	}
 
+	private String buildBooleanErrorMessageString( String paramValue, String paramName )
+	{
+		return buildErrorMessageString(paramValue, paramName,
+		        Arrays.asList(new String[] { Boolean.TRUE.toString(), Boolean.FALSE.toString() }));
+	}
+
+	private String buildErrorMessageString( String paramValue, String paramName,
+	        String... validValues )
+	{
+		return buildErrorMessageString(paramValue, paramName, Arrays.asList(validValues));
+	}
+
+	private String buildErrorMessageString( String paramValue, String paramName,
+	        List<String> validValues )
+	{
+		StringBuilder errMesg = new StringBuilder(paramValue)
+		        .append(" is not a valid value for parameter ").append(paramName)
+		        .append(". Valid values are ");
+		for (int i = 0; i < validValues.size(); i++)
+		{
+			String validStr = validValues.get(i);
+			if (i == validValues.size() - 1)
+			{
+				errMesg.append(" or ");
+			}
+			errMesg.append(validStr);
+			if (i < validValues.size() - 2)
+			{
+				errMesg.append(", ");
+			}
+		}
+		return errMesg.toString();
+	}
+
 	protected String createGPXString( HttpServletRequest req, HttpServletResponse res,
 	        GHResponse rsp )
 	{
