diff --git a/core/pom.xml b/core/pom.xml
index a3e7388aab..13552a2af0 100644
--- a/core/pom.xml
+++ b/core/pom.xml
@@ -109,7 +109,13 @@ working seamlessly with OpenStreetMap data.
 			<artifactId>neo4j</artifactId>
 			<version>2.1.5</version>
 		</dependency>
-	</dependencies>
+        <dependency>
+            <groupId>org.mockito</groupId>
+            <artifactId>mockito-all</artifactId>
+            <version>1.9.5</version>
+            <scope>test</scope>
+        </dependency>
+    </dependencies>
 	<build>
 		<pluginManagement>
 			<plugins>
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/AbstractOsDpnOsmAttibuteMappingVisitor.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/AbstractOsDpnOsmAttibuteMappingVisitor.java
new file mode 100644
index 0000000000..3cd8a0fd42
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/AbstractOsDpnOsmAttibuteMappingVisitor.java
@@ -0,0 +1,20 @@
+package com.graphhopper.reader.osgb.dpn;
+
+import com.graphhopper.reader.Way;
+
+/**
+ * Created by sadam on 13/02/15.
+ */
+public abstract class AbstractOsDpnOsmAttibuteMappingVisitor implements OsDpnOsmAttributeMappingVisitor {
+    protected String visitorName = this.getClass().getSimpleName();
+
+    @Override
+    public void visitWayAttribute(String attributeValue, Way way) {
+        System.out.println(visitorName);
+        if (visitorName.equals(attributeValue.replaceAll(" ", ""))) {
+            applyAttributes(way);
+        }
+    }
+
+    protected abstract void applyAttributes(Way way);
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/BridleWay.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/BridleWay.java
new file mode 100644
index 0000000000..d8c4487afd
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/BridleWay.java
@@ -0,0 +1,15 @@
+package com.graphhopper.reader.osgb.dpn;
+
+import com.graphhopper.reader.Way;
+
+/**
+ * Created by sadam on 13/02/15.
+ */
+public class BridleWay extends AbstractOsDpnOsmAttibuteMappingVisitor {
+
+    @Override
+    protected void applyAttributes(Way way) {
+        way.setTag("designation", "public_bridleway");
+    }
+
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnOsmAttributeMappingVisitor.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnOsmAttributeMappingVisitor.java
new file mode 100644
index 0000000000..70198548c6
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnOsmAttributeMappingVisitor.java
@@ -0,0 +1,10 @@
+package com.graphhopper.reader.osgb.dpn;
+
+import com.graphhopper.reader.Way;
+
+/**
+ * Created by sadam on 13/02/15.
+ */
+public interface OsDpnOsmAttributeMappingVisitor {
+    void visitWayAttribute(String attributeValue, Way way);
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/PermissivePath.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/PermissivePath.java
new file mode 100644
index 0000000000..8e0b46993e
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/PermissivePath.java
@@ -0,0 +1,15 @@
+package com.graphhopper.reader.osgb.dpn;
+
+import com.graphhopper.reader.Way;
+
+/**
+ * Created by sadam on 13/02/15.
+ */
+public class PermissivePath extends AbstractOsDpnOsmAttibuteMappingVisitor {
+
+    @Override
+    protected void applyAttributes(Way way) {
+        way.setTag("foot", "permissive");
+    }
+
+}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/BridleWayTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/BridleWayTest.java
new file mode 100644
index 0000000000..29096c090e
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/BridleWayTest.java
@@ -0,0 +1,33 @@
+package com.graphhopper.reader.osgb.dpn;
+
+import com.graphhopper.reader.Way;
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import static org.mockito.Mockito.verify;
+
+public class BridleWayTest {
+    static OsDpnOsmAttributeMappingVisitor visitor;
+    @Mock
+    Way way;
+
+    @BeforeClass
+    public static void createVisitor() {
+        visitor = new BridleWay();
+    }
+
+    @Before
+    public void init() {
+        MockitoAnnotations.initMocks(this);
+    }
+
+    @Test
+    public void testAddDesignation() {
+        visitor.visitWayAttribute("BridleWay", way);
+        verify(way).setTag("designation", "public_bridleway");
+    }
+
+}
\ No newline at end of file
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/PermissivePathTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/PermissivePathTest.java
new file mode 100644
index 0000000000..bebd96db5d
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/PermissivePathTest.java
@@ -0,0 +1,34 @@
+package com.graphhopper.reader.osgb.dpn;
+
+import com.graphhopper.reader.Way;
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import static org.junit.Assert.*;
+import static org.mockito.Mockito.verify;
+
+public class PermissivePathTest {
+
+    static OsDpnOsmAttributeMappingVisitor visitor;
+    @Mock
+    Way way;
+
+    @BeforeClass
+    public static void createVisitor() {
+        visitor = new PermissivePath();
+    }
+
+    @Before
+    public void init() {
+        MockitoAnnotations.initMocks(this);
+    }
+
+    @Test
+    public void testVisitWayAttribute() throws Exception {
+        visitor.visitWayAttribute("Permissive Path", way);
+        verify(way).setTag("foot", "permissive");
+    }
+}
\ No newline at end of file
