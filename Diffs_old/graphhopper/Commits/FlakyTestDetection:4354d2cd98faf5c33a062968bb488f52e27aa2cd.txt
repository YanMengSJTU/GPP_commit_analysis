diff --git a/core/src/main/java/com/graphhopper/routing/InstructionsHelper.java b/core/src/main/java/com/graphhopper/routing/InstructionsHelper.java
index 6408371a99..daebfb9543 100644
--- a/core/src/main/java/com/graphhopper/routing/InstructionsHelper.java
+++ b/core/src/main/java/com/graphhopper/routing/InstructionsHelper.java
@@ -30,7 +30,7 @@
 class InstructionsHelper {
 
     static double calculateOrientationDelta(double prevLatitude, double prevLongitude, double latitude, double longitude, double prevOrientation) {
-        double orientation = Helper.ANGLE_CALC.calcOrientation(prevLatitude, prevLongitude, latitude, longitude);
+        double orientation = Helper.ANGLE_CALC.calcOrientation(prevLatitude, prevLongitude, latitude, longitude, false);
         orientation = Helper.ANGLE_CALC.alignOrientation(prevOrientation, orientation);
         return orientation - prevOrientation;
     }
diff --git a/core/src/main/java/com/graphhopper/util/AngleCalc.java b/core/src/main/java/com/graphhopper/util/AngleCalc.java
index 211a4f671e..b780f0ee74 100644
--- a/core/src/main/java/com/graphhopper/util/AngleCalc.java
+++ b/core/src/main/java/com/graphhopper/util/AngleCalc.java
@@ -52,15 +52,23 @@ static final double atan2(double y, double x) {
         return angle;
     }
 
+    public double calcOrientation(double lat1, double lon1, double lat2, double lon2) {
+        return calcOrientation(lat1, lon1, lat2, lon2, true);
+    }
+
     /**
      * Return orientation of line relative to east.
      * <p>
      *
+     * @param exact If false the atan gets calculated faster, but it might contain small errors
      * @return Orientation in interval -pi to +pi where 0 is east
      */
-    public double calcOrientation(double lat1, double lon1, double lat2, double lon2) {
+    public double calcOrientation(double lat1, double lon1, double lat2, double lon2, boolean exact) {
         double shrinkFactor = cos(toRadians((lat1 + lat2) / 2));
-        return Math.atan2(lat2 - lat1, shrinkFactor * (lon2 - lon1));
+        if (exact)
+            return Math.atan2(lat2 - lat1, shrinkFactor * (lon2 - lon1));
+        else
+            return atan2(lat2 - lat1, shrinkFactor * (lon2 - lon1));
     }
 
     /**
@@ -107,7 +115,7 @@ public double calcAzimuth(double lat1, double lon1, double lat2, double lon2) {
         if (orientation < 0)
             orientation += 2 * Math.PI;
 
-        return Math.toDegrees(Helper.round4(orientation));
+        return Math.toDegrees(Helper.round4(orientation))%360;
     }
 
     String azimuth2compassPoint(double azimuth) {
diff --git a/core/src/test/java/com/graphhopper/util/AngleCalcTest.java b/core/src/test/java/com/graphhopper/util/AngleCalcTest.java
index 485b575940..1e57838a6a 100644
--- a/core/src/test/java/com/graphhopper/util/AngleCalcTest.java
+++ b/core/src/test/java/com/graphhopper/util/AngleCalcTest.java
@@ -29,7 +29,7 @@
     private final AngleCalc AC = Helper.ANGLE_CALC;
 
     @Test
-    public void testOrientation() {
+    public void testOrientationExact() {
         assertEquals(90.0, Math.toDegrees(AC.calcOrientation(0, 0, 1, 0)), 0.01);
         assertEquals(45.0, Math.toDegrees(AC.calcOrientation(0, 0, 1, 1)), 0.01);
         assertEquals(0.0, Math.toDegrees(AC.calcOrientation(0, 0, 0, 1)), 0.01);
@@ -41,6 +41,19 @@ public void testOrientation() {
         assertEquals(-90 - 32.76, Math.toDegrees(AC.calcOrientation(49.944, 11.582, 49.942, 11.580)), 0.01);
     }
 
+    @Test
+    public void testOrientationFast() {
+        assertEquals(90.0, Math.toDegrees(AC.calcOrientation(0, 0, 1, 0, false)), 0.01);
+        assertEquals(45.0, Math.toDegrees(AC.calcOrientation(0, 0, 1, 1, false)), 0.01);
+        assertEquals(0.0, Math.toDegrees(AC.calcOrientation(0, 0, 0, 1, false)), 0.01);
+        assertEquals(-45.0, Math.toDegrees(AC.calcOrientation(0, 0, -1, 1, false)), 0.01);
+        assertEquals(-135.0, Math.toDegrees(AC.calcOrientation(0, 0, -1, -1, false)), 0.01);
+
+        // is symetric?
+        assertEquals(90 - 32.92, Math.toDegrees(AC.calcOrientation(49.942, 11.580, 49.944, 11.582, false)), 0.01);
+        assertEquals(-90 - 32.92, Math.toDegrees(AC.calcOrientation(49.944, 11.582, 49.942, 11.580, false)), 0.01);
+    }
+
     @Test
     public void testAlignOrientation() {
         assertEquals(90.0, Math.toDegrees(AC.alignOrientation(Math.toRadians(90), Math.toRadians(90))), 0.001);
