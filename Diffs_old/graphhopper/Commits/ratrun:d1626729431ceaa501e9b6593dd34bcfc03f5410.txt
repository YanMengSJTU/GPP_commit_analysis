diff --git a/web/src/main/java/com/graphhopper/http/ChangeGraphServlet.java b/web/src/main/java/com/graphhopper/http/ChangeGraphServlet.java
index 3527d318b3..f8660dff48 100644
--- a/web/src/main/java/com/graphhopper/http/ChangeGraphServlet.java
+++ b/web/src/main/java/com/graphhopper/http/ChangeGraphServlet.java
@@ -59,7 +59,7 @@ protected void doPost(HttpServletRequest httpReq, HttpServletResponse httpRes) t
             }
             // TODO make asynchronous!
             ChangeGraphResponse rsp = ((GraphHopper) graphHopper).changeGraph(collection.getFeatures());
-            ObjectNode resObject = jsonNodeFactory.objectNode();
+            ObjectNode resObject = objectMapper.createObjectNode();
             resObject.put("updates", rsp.getUpdateCount());
             // prepare the consumer to get some changes not immediately when returning after POST
             resObject.put("scheduled_updates", 0);
diff --git a/web/src/main/java/com/graphhopper/http/GHBaseServlet.java b/web/src/main/java/com/graphhopper/http/GHBaseServlet.java
index 483a2903d6..637fdeec63 100644
--- a/web/src/main/java/com/graphhopper/http/GHBaseServlet.java
+++ b/web/src/main/java/com/graphhopper/http/GHBaseServlet.java
@@ -46,7 +46,6 @@
  */
 public class GHBaseServlet extends HttpServlet {
     protected static final Logger logger = LoggerFactory.getLogger(GHBaseServlet.class);
-    protected final JsonNodeFactory jsonNodeFactory = new JsonNodeFactory(false);
 
     @Inject
     protected ObjectMapper objectMapper;
@@ -79,7 +78,7 @@ protected void writeJson(HttpServletRequest req, HttpServletResponse res, JsonNo
     }
 
     protected void writeError(HttpServletResponse res, int code, String message) {
-        ObjectNode json = jsonNodeFactory.objectNode();
+        ObjectNode json = objectMapper.createObjectNode();
         json.put("message", message);
         writeJsonError(res, code, json);
     }
diff --git a/web/src/main/java/com/graphhopper/http/GHServer.java b/web/src/main/java/com/graphhopper/http/GHServer.java
index de402bf56d..458b891abb 100644
--- a/web/src/main/java/com/graphhopper/http/GHServer.java
+++ b/web/src/main/java/com/graphhopper/http/GHServer.java
@@ -74,8 +74,6 @@ public void start(Injector injector) throws Exception {
         servHandler.setErrorHandler(new GHErrorHandler());
         servHandler.setContextPath("/");
 
-        servHandler.addServlet(new ServletHolder(new InvalidRequestServlet()), "/*");
-
         FilterHolder guiceFilter = new FilterHolder(injector.getInstance(GuiceFilter.class));
         servHandler.addFilter(guiceFilter, "/*", EnumSet.allOf(DispatcherType.class));
 
diff --git a/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java b/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
index 64c4176cc1..934270a5cb 100644
--- a/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
+++ b/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
@@ -184,9 +184,9 @@ public void doGet(HttpServletRequest httpReq, HttpServletResponse httpRes) throw
                 ((Map) infoMap).put("took", Math.round(took * 1000));
 
             if (ghRsp.hasErrors())
-                writeJsonError(httpRes, SC_BAD_REQUEST, jsonNodeFactory.pojoNode(map));
+                writeJsonError(httpRes, SC_BAD_REQUEST, objectMapper.getNodeFactory().pojoNode(map));
             else {
-                writeJson(httpReq, httpRes, jsonNodeFactory.pojoNode(map));
+                writeJson(httpReq, httpRes, objectMapper.getNodeFactory().pojoNode(map));
             }
         }
     }
diff --git a/web/src/main/java/com/graphhopper/http/GraphHopperServletModule.java b/web/src/main/java/com/graphhopper/http/GraphHopperServletModule.java
index 9cdb86100d..109dc82d17 100644
--- a/web/src/main/java/com/graphhopper/http/GraphHopperServletModule.java
+++ b/web/src/main/java/com/graphhopper/http/GraphHopperServletModule.java
@@ -84,6 +84,9 @@ protected void configureServlets() {
 
         serve("/change*").with(ChangeGraphServlet.class);
         bind(ChangeGraphServlet.class).in(Singleton.class);
+
+        serve("/*").with(InvalidRequestServlet.class);
+        bind(InvalidRequestServlet.class).in(Singleton.class);
     }
 
     @Provides
diff --git a/web/src/main/java/com/graphhopper/http/I18NServlet.java b/web/src/main/java/com/graphhopper/http/I18NServlet.java
index faf25beeeb..6142e81bbe 100644
--- a/web/src/main/java/com/graphhopper/http/I18NServlet.java
+++ b/web/src/main/java/com/graphhopper/http/I18NServlet.java
@@ -51,7 +51,7 @@ public void doGet(HttpServletRequest req, HttpServletResponse res) throws Servle
         }
 
         Translation tr = map.get(locale);
-        ObjectNode json = jsonNodeFactory.objectNode();
+        ObjectNode json = objectMapper.createObjectNode();
         if (tr != null && !Locale.US.equals(tr.getLocale()))
             json.putPOJO("default", tr.asMap());
 
diff --git a/web/src/main/java/com/graphhopper/http/InvalidRequestServlet.java b/web/src/main/java/com/graphhopper/http/InvalidRequestServlet.java
index c7ef8af1c8..5ff491f608 100644
--- a/web/src/main/java/com/graphhopper/http/InvalidRequestServlet.java
+++ b/web/src/main/java/com/graphhopper/http/InvalidRequestServlet.java
@@ -25,7 +25,7 @@
 public class InvalidRequestServlet extends GHBaseServlet {
     @Override
     protected void service(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {
-        ObjectNode json = jsonNodeFactory.objectNode();
+        ObjectNode json = objectMapper.createObjectNode();
         json.put("message", "Not found");
         writeJsonError(res, HttpServletResponse.SC_NOT_FOUND, json);
     }
diff --git a/web/src/main/java/com/graphhopper/http/NearestServlet.java b/web/src/main/java/com/graphhopper/http/NearestServlet.java
index a9f7fd8f02..e933c220ff 100644
--- a/web/src/main/java/com/graphhopper/http/NearestServlet.java
+++ b/web/src/main/java/com/graphhopper/http/NearestServlet.java
@@ -50,7 +50,7 @@ public void doGet(HttpServletRequest httpReq, HttpServletResponse httpRes) throw
         String pointStr = getParam(httpReq, "point", null);
         boolean enabledElevation = getBooleanParam(httpReq, "elevation", false);
 
-        ObjectNode result = jsonNodeFactory.objectNode();
+        ObjectNode result = objectMapper.createObjectNode();
         if (pointStr != null && !pointStr.equalsIgnoreCase("")) {
             GHPoint place = GHPoint.parse(pointStr);
             QueryResult qr = index.findClosest(place.lat, place.lon, EdgeFilter.ALL_EDGES);
