diff --git a/core/src/main/java/com/samsix/graphhopper/GasFinderFlagEncoder.java b/core/src/main/java/com/samsix/graphhopper/GasFinderFlagEncoder.java
deleted file mode 100644
index 858986182b..0000000000
--- a/core/src/main/java/com/samsix/graphhopper/GasFinderFlagEncoder.java
+++ /dev/null
@@ -1,25 +0,0 @@
-package com.samsix.graphhopper;
-
-import com.graphhopper.routing.util.FootFlagEncoder;
-
-public class GasFinderFlagEncoder
-    extends
-        FootFlagEncoder
-{
-    public GasFinderFlagEncoder()
-    {
-        super();
-        
-        //
-        // For running gas mains we don't want to avoid
-        // crossing private property.
-        //
-        restrictedValues.remove("private");
-    }
-
-    @Override
-    public String toString()
-    {
-        return "gasfinder";
-    }
-}
diff --git a/core/src/main/java/com/samsix/graphhopper/ServiceFlagEncoder.java b/core/src/main/java/com/samsix/graphhopper/ServiceFlagEncoder.java
deleted file mode 100644
index 7d50ec5fe8..0000000000
--- a/core/src/main/java/com/samsix/graphhopper/ServiceFlagEncoder.java
+++ /dev/null
@@ -1,27 +0,0 @@
-package com.samsix.graphhopper;
-
-import com.graphhopper.reader.OSMWay;
-import com.graphhopper.routing.util.CarFlagEncoder;
-import com.graphhopper.routing.util.FootFlagEncoder;
-
-public class ServiceFlagEncoder
-    extends
-        CarFlagEncoder
-{
-    public ServiceFlagEncoder()
-    {
-        super();
-        
-        //
-        // Allow our service vehicles to take private roads
-        // to get to the equipment they need to get to.
-        //
-        restrictedValues.remove("private");
-    }
-
-    @Override
-    public String toString()
-    {
-        return "service";
-    }
-}
diff --git a/core/src/main/java/com/samsix/graphhopper/s6FootFlagEncoder.java b/core/src/main/java/com/samsix/graphhopper/s6FootFlagEncoder.java
new file mode 100644
index 0000000000..c9c97b1f47
--- /dev/null
+++ b/core/src/main/java/com/samsix/graphhopper/s6FootFlagEncoder.java
@@ -0,0 +1,31 @@
+package com.samsix.graphhopper;
+
+import com.graphhopper.routing.util.FootFlagEncoder;
+
+public class S6FootFlagEncoder
+    extends
+        FootFlagEncoder
+{
+    /**
+     * We could make this a specific GasFinderFlagEncoder
+     * due to the private property crossing. BUT I want
+     * to have a general "FOOT" flag encoder as well since
+     * our RouteFinder has a TripMode=WALKING that I need
+     * a FootFlagEncoder for. So, we might as well just use
+     * this one. If we *ever* need to have a walking route
+     * (for whatever reason) that shouldn't cross private
+     * territory then we can change it then. We would have
+     * to refactor our RouteFinder to either have some extra
+     * parameters or add different TripModes.
+     */
+    public S6FootFlagEncoder()
+    {
+        super();
+        
+        //
+        // For running gas mains we don't want to avoid
+        // crossing private property.
+        //
+        restrictedValues.remove("private");
+    }
+}
diff --git a/core/src/main/java/com/samsix/graphhopper/tools/S6Import.java b/core/src/main/java/com/samsix/graphhopper/tools/S6Import.java
index 8fd54d2070..6f62e16aca 100644
--- a/core/src/main/java/com/samsix/graphhopper/tools/S6Import.java
+++ b/core/src/main/java/com/samsix/graphhopper/tools/S6Import.java
@@ -9,7 +9,7 @@
 import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.util.CmdArgs;
 import com.samsix.graphhopper.FeederPatrolFlagEncoder;
-import com.samsix.graphhopper.GasFinderFlagEncoder;
+import com.samsix.graphhopper.S6FootFlagEncoder;
 import com.samsix.graphhopper.S6GraphHopper;
 import com.samsix.graphhopper.TruckServiceFlagEncoder;
 
@@ -21,7 +21,7 @@ public static void main( String[] strs ) throws Exception
         GraphHopper hopper = new S6GraphHopper().init(args);
 
         List<FlagEncoder> encoders = new ArrayList<FlagEncoder>();
-        encoders.add(new GasFinderFlagEncoder());
+        encoders.add(new S6FootFlagEncoder());
         encoders.add(new FeederPatrolFlagEncoder());
         encoders.add(new CarFlagEncoder());
         encoders.add(new TruckServiceFlagEncoder());
