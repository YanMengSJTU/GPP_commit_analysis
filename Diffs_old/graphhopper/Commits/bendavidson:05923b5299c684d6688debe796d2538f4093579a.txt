diff --git a/core/src/main/java/com/graphhopper/GraphHopper.java b/core/src/main/java/com/graphhopper/GraphHopper.java
index 024f1f0bf9..c450e2afc5 100644
--- a/core/src/main/java/com/graphhopper/GraphHopper.java
+++ b/core/src/main/java/com/graphhopper/GraphHopper.java
@@ -402,23 +402,25 @@ public GraphHopper setEnableInstructions( boolean b )
      * <p>
      * Language code as defined in ISO 639-1 or ISO 639-2.
      * <ul>
-     * <li>If no preferred language is specified, only the default language with no tag will be imported.</li>
-     * <li>If a language is specified, it will be imported if its tag is found, otherwise fall back to default language.</li>
+     * <li>If no preferred language is specified, only the default language with no tag will be
+     * imported.</li>
+     * <li>If a language is specified, it will be imported if its tag is found, otherwise fall back
+     * to default language.</li>
      * </ul>
      */
     public GraphHopper setPreferredLanguage( String preferredLanguage )
     {
-    	ensureNotLoaded();
-    	if (preferredLanguage == null)
-    		throw new IllegalArgumentException("preferred language cannot be null");
+        ensureNotLoaded();
+        if (preferredLanguage == null)
+            throw new IllegalArgumentException("preferred language cannot be null");
 
-    	this.preferredLanguage = preferredLanguage;
-    	return this;
+        this.preferredLanguage = preferredLanguage;
+        return this;
     }
 
     public String getPreferredLanguage()
     {
-    	return preferredLanguage;
+        return preferredLanguage;
     }
 
     /**
@@ -577,6 +579,10 @@ public GraphHopper init( CmdArgs args )
         sortGraph = args.getBool("graph.doSort", sortGraph);
         removeZipped = args.getBool("graph.removeZipped", removeZipped);
         int bytesForFlags = args.getInt("graph.bytesForFlags", 4);
+        String flagEncoders = args.get("graph.flagEncoders", "");
+        if (!flagEncoders.isEmpty())
+            setEncodingManager(new EncodingManager(flagEncoders, bytesForFlags));
+
         if (args.get("graph.locktype", "native").equals("simple"))
             lockFactory = new SimpleFSLockFactory();
         else
@@ -627,9 +633,6 @@ public GraphHopper init( CmdArgs args )
 
         // osm import
         osmReaderWayPointMaxDistance = args.getDouble("osmreader.wayPointMaxDistance", osmReaderWayPointMaxDistance);
-        String flagEncoders = args.get("graph.flagEncoders", "");
-        if (!flagEncoders.isEmpty())
-            setEncodingManager(new EncodingManager(flagEncoders, bytesForFlags));
 
         workerThreads = args.getInt("osmreader.workerThreads", workerThreads);
         enableInstructions = args.getBool("osmreader.instructions", enableInstructions);
diff --git a/core/src/main/java/com/graphhopper/routing/util/MotorcycleFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/MotorcycleFlagEncoder.java
index 3d166949d2..99cbc46b37 100644
--- a/core/src/main/java/com/graphhopper/routing/util/MotorcycleFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/MotorcycleFlagEncoder.java
@@ -128,7 +128,7 @@ public int defineWayBits( int index, int shift )
         shift += reverseSpeedEncoder.getBits();
 
         priorityWayEncoder = new EncodedValue("PreferWay", shift, 3, 1, 3, 7);
-        shift += reverseSpeedEncoder.getBits();
+        shift += priorityWayEncoder.getBits();
 
         return shift;
     }
diff --git a/core/src/main/java/com/graphhopper/storage/GraphHopperStorage.java b/core/src/main/java/com/graphhopper/storage/GraphHopperStorage.java
index 7c70837c46..17f8e084c2 100644
--- a/core/src/main/java/com/graphhopper/storage/GraphHopperStorage.java
+++ b/core/src/main/java/com/graphhopper/storage/GraphHopperStorage.java
@@ -267,7 +267,11 @@ public boolean loadExisting()
 
             String byteOrder = properties.get("graph.byteOrder");
             if (!byteOrder.equalsIgnoreCase("" + dir.getByteOrder()))
-                throw new IllegalStateException("Configured byteOrder (" + byteOrder + ") is not equal to byteOrder of loaded graph (" + dir.getByteOrder() + ")");
+                throw new IllegalStateException("Configured graph.byteOrder (" + dir.getByteOrder() + ") is not equal to loaded " + byteOrder + "");
+
+            String bytesForFlags = properties.get("graph.bytesForFlags");
+            if (!bytesForFlags.equalsIgnoreCase("" + encodingManager.getBytesForFlags()))
+                throw new IllegalStateException("Configured graph.bytesForFlags (" + encodingManager.getBytesForFlags() + ") is not equal to loaded " + bytesForFlags);
 
             String dim = properties.get("graph.dimension");
             baseGraph.loadExisting(dim);
diff --git a/core/src/test/java/com/graphhopper/GraphHopperTest.java b/core/src/test/java/com/graphhopper/GraphHopperTest.java
index d34e339f06..79aa608512 100644
--- a/core/src/test/java/com/graphhopper/GraphHopperTest.java
+++ b/core/src/test/java/com/graphhopper/GraphHopperTest.java
@@ -395,6 +395,25 @@ public void testFailsForWrongConfig() throws IOException
             assertTrue(false);
         } catch (Exception ex)
         {
+            assertTrue(ex.getMessage(), ex.getMessage().startsWith("Encoding does not match"));
+        }
+
+        // different bytesForFlags should fail to load
+        instance = new GraphHopper().init(
+                new CmdArgs().
+                put("osmreader.osm", testOsm3).
+                put("osmreader.dataaccess", "RAM").
+                put("graph.flagEncoders", "FOOT,CAR").
+                put("graph.bytesForFlags", 8).
+                put("prepare.chWeighting", "no")).
+                setOSMFile(testOsm3);
+        try
+        {
+            instance.load(ghLoc);
+            assertTrue(false);
+        } catch (Exception ex)
+        {
+            assertTrue(ex.getMessage(), ex.getMessage().startsWith("Configured graph.bytesForFlags (8) is not equal to loaded 4"));
         }
 
         // different order is no longer okay, see #350
@@ -410,6 +429,7 @@ public void testFailsForWrongConfig() throws IOException
             assertTrue(false);
         } catch (Exception ex)
         {
+            assertTrue(ex.getMessage(), ex.getMessage().startsWith("Encoding does not match"));
         }
     }
 
