diff --git a/core/files/update-translations.sh b/core/files/update-translations.sh
index ab79455565..24496ac1b3 100755
--- a/core/files/update-translations.sh
+++ b/core/files/update-translations.sh
@@ -3,7 +3,7 @@ cd $HOME/..
 
 destination=src/main/resources/com/graphhopper/util/
 
-translations="en_US SKIP ar ast bg ca cs_CZ da_DK de_DE el eo es fa fil fi fr_FR fr_CH gl he hr_HR hsb hu_HU it ja ko lt_LT ne nl pl_PL pt_BR pt_PT ro ru sk sl_SI sr_RS sv_SE tr uk vi_VI zh_CN zh_HK"
+translations="en_US SKIP SKIP ar ast bg ca cs_CZ da_DK de_DE el eo es fa fil fi fr_FR fr_CH gl he hr_HR hsb hu_HU it ja ko lt_LT ne nl pl_PL pt_BR pt_PT ro ru sk sl_SI sr_RS sv_SE tr uk vi_VI zh_CN zh_HK"
 file=$1
 
 # You can execute the following
diff --git a/web/src/test/java/com/graphhopper/http/BaseServletTester.java b/web/src/test/java/com/graphhopper/http/BaseServletTester.java
index 7e561d98af..128070afa7 100644
--- a/web/src/test/java/com/graphhopper/http/BaseServletTester.java
+++ b/web/src/test/java/com/graphhopper/http/BaseServletTester.java
@@ -84,6 +84,8 @@ private void bootJetty(CmdArgs args, int retryCount) {
         if (injector == null)
             setUpGuice(server.createModule());
 
+        boolean started = false;
+
         for (int i = 0; i < retryCount; i++) {
             port = 18080 + i;
             args.put("jetty.port", "" + port);
@@ -91,12 +93,17 @@ private void bootJetty(CmdArgs args, int retryCount) {
                 LOGGER.info("Trying to start jetty at port " + port);
                 server.start(injector);
 //                server.join();
+                started = true;
                 break;
             } catch (Exception ex) {
                 server = null;
                 LOGGER.error("Cannot start jetty at port " + port + " " + ex.getMessage());
             }
         }
+
+        if (!started) {
+            throw new IllegalStateException("Unable to start the server");
+        }
     }
 
     protected String getTestRouteAPIUrl() {
diff --git a/web/src/test/java/com/graphhopper/http/GraphHopperDataflagEncoderSpatialRulesIT.java b/web/src/test/java/com/graphhopper/http/GraphHopperDataflagEncoderSpatialRulesIT.java
new file mode 100644
index 0000000000..831cd6e121
--- /dev/null
+++ b/web/src/test/java/com/graphhopper/http/GraphHopperDataflagEncoderSpatialRulesIT.java
@@ -0,0 +1,71 @@
+/*
+ *  Licensed to GraphHopper GmbH under one or more contributor
+ *  license agreements. See the NOTICE file distributed with this work for 
+ *  additional information regarding copyright ownership.
+ * 
+ *  GraphHopper GmbH licenses this file to you under the Apache License, 
+ *  Version 2.0 (the "License"); you may not use this file except in 
+ *  compliance with the License. You may obtain a copy of the License at
+ * 
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package com.graphhopper.http;
+
+import com.fasterxml.jackson.databind.JsonNode;
+import com.graphhopper.util.CmdArgs;
+import com.graphhopper.util.Helper;
+import org.junit.AfterClass;
+import org.junit.Before;
+import org.junit.Test;
+
+import java.io.File;
+
+import static org.junit.Assert.*;
+
+/**
+ * Tests the DataFlagencoder with the SpatialRuleLookup enabled
+ *
+ * @author Robin Boldt
+ */
+public class GraphHopperDataflagEncoderSpatialRulesIT extends BaseServletTester {
+    private static final String DIR = "./target/north-bayreuth-gh/";
+
+    @AfterClass
+    public static void cleanUp() {
+        Helper.removeDir(new File(DIR));
+        shutdownJetty(true);
+    }
+
+    @Before
+    public void setUp() {
+        CmdArgs args = new CmdArgs().
+                put("config", "../config-example.properties").
+                put("graph.flag_encoders", "generic").
+                put("prepare.ch.weightings", "no").
+                put("spatial_rules.location", "../web/src/main/resources/com/graphhopper/spatialrules/countries.geo.json").
+                put("spatial_rules.max_bbox", "11.4,11.7,49.9,50.1").
+                put("datareader.file", "../core/files/north-bayreuth.osm.gz").
+                put("graph.location", DIR);
+        setUpJetty(args);
+    }
+
+    @Test
+    public void testDetourToComplyWithSpatialRule() throws Exception {
+        JsonNode json = query("point=49.995933,11.54809&point=50.004871,11.517191&vehicle=generic", 200);
+        JsonNode infoJson = json.get("info");
+        assertFalse(infoJson.has("errors"));
+        JsonNode path = json.get("paths").get(0);
+        double distance = path.get("distance").asDouble();
+        // Makes sure that SpatialRules are enforced. Without SpatialRules we take a shortcut trough the forest
+        // so the route would be only 3.31km
+        assertTrue("distance wasn't correct:" + distance, distance > 7000);
+        assertTrue("distance wasn't correct:" + distance, distance < 7500);
+    }
+
+}
