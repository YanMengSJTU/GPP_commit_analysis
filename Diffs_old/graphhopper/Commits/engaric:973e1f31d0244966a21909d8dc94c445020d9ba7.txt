diff --git a/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java b/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
index 68d6b09e15..3628396510 100644
--- a/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
+++ b/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
@@ -48,6 +48,8 @@
 import com.graphhopper.GHRequest;
 import com.graphhopper.GHResponse;
 import com.graphhopper.GraphHopper;
+import com.graphhopper.http.validation.BooleanValidator;
+import com.graphhopper.http.validation.CaseInsensitiveStringListValidator;
 import com.graphhopper.routing.AlgorithmOptions;
 import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.routing.util.WeightingMap;
@@ -77,7 +79,7 @@
 
 	@Override
 	public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes )
-			throws ServletException, IOException
+	        throws ServletException, IOException
 	{
 		List<GHPoint> infoPoints = getPoints(httpReq, "point");
 
@@ -104,20 +106,10 @@ public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes )
 		String debugString = getParam(httpReq, "debug", "true");
 		String prettyString = getParam(httpReq, "pretty", "true");
 
-		boolean validLocale = false;
-		for (String validLocaleStr : TranslationMap.LOCALES)
-		{
-			if (validLocaleStr.equalsIgnoreCase(localeStr))
-			{
-				validLocale = true;
-				break;
-			}
-		}
-
-		if (!validLocale)
+		if (!new CaseInsensitiveStringListValidator().isValid(localeStr, TranslationMap.LOCALES))
 		{
 			StringBuilder errMesg = new StringBuilder(localeStr)
-			.append(" is not a valid value for parameter locale. Valid values are ");
+			        .append(" is not a valid value for parameter locale. Valid values are ");
 			for (int i = 0; i < TranslationMap.LOCALES.size(); i++)
 			{
 				String validLocaleStr = TranslationMap.LOCALES.get(i);
@@ -132,63 +124,57 @@ public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes )
 				}
 			}
 			ghRsp = new GHResponse().addError(new IllegalArgumentException(errMesg.toString()));
-		} else if (!AlgorithmOptions.ASTAR.equalsIgnoreCase(algoStr)
-				&& !AlgorithmOptions.ASTAR_BI.equalsIgnoreCase(algoStr)
-				&& !AlgorithmOptions.DIJKSTRA.equalsIgnoreCase(algoStr)
-				&& !AlgorithmOptions.DIJKSTRA_BI.equalsIgnoreCase(algoStr)
-				&& !AlgorithmOptions.DIJKSTRA_ONE_TO_MANY.equalsIgnoreCase(algoStr))
+		} else if (!new CaseInsensitiveStringListValidator().isValid(algoStr,
+				AlgorithmOptions.ASTAR, AlgorithmOptions.ASTAR_BI, AlgorithmOptions.DIJKSTRA,
+				AlgorithmOptions.DIJKSTRA_BI, AlgorithmOptions.DIJKSTRA_ONE_TO_MANY))
 		{
 			String errMesg = String
-					.format("%s is not a valid value for parameter algorithm. Valid values are %s, %s, %s, %s or %s",
-							algoStr, AlgorithmOptions.ASTAR, AlgorithmOptions.ASTAR_BI,
-							AlgorithmOptions.DIJKSTRA, AlgorithmOptions.DIJKSTRA_BI,
-							AlgorithmOptions.DIJKSTRA_ONE_TO_MANY);
+			        .format("%s is not a valid value for parameter algorithm. Valid values are %s, %s, %s, %s or %s",
+			                algoStr, AlgorithmOptions.ASTAR, AlgorithmOptions.ASTAR_BI,
+			                AlgorithmOptions.DIJKSTRA, AlgorithmOptions.DIJKSTRA_BI,
+			                AlgorithmOptions.DIJKSTRA_ONE_TO_MANY);
 			ghRsp = new GHResponse().addError(new IllegalArgumentException(errMesg));
-		} else if (!"true".equalsIgnoreCase(instructionsString)
-				&& !"false".equalsIgnoreCase(instructionsString))
+		} else if (!new BooleanValidator().isValid(instructionsString))
 		{
 			String errMesg = String
-					.format("%s is not a valid value for parameter instructions. Valid values are true or false",
-							instructionsString);
+			        .format("%s is not a valid value for parameter instructions. Valid values are true or false",
+			                instructionsString);
 			ghRsp = new GHResponse().addError(new IllegalArgumentException(errMesg));
-		} else if (!"true".equalsIgnoreCase(pointsEncodedString)
-				&& !"false".equalsIgnoreCase(pointsEncodedString))
+		} else if (!new BooleanValidator().isValid(pointsEncodedString))
 		{
 			String errMesg = String
-					.format("%s is not a valid value for parameter pointsEncodedString. Valid values are true or false",
-							pointsEncodedString);
+			        .format("%s is not a valid value for parameter pointsEncodedString. Valid values are true or false",
+			                pointsEncodedString);
 			ghRsp = new GHResponse().addError(new IllegalArgumentException(errMesg));
-		} else if (!"true".equalsIgnoreCase(calcPointsString)
-		        && !"false".equalsIgnoreCase(calcPointsString))
+		} else if (!new BooleanValidator().isValid(calcPointsString))
 		{
 			String errMesg = String
 			        .format("%s is not a valid value for parameter calc_points. Valid values are true or false",
 			                calcPointsString);
 			ghRsp = new GHResponse().addError(new IllegalArgumentException(errMesg));
-		} else if (!"true".equalsIgnoreCase(debugString) && !"false".equalsIgnoreCase(debugString))
+		} else if (!new BooleanValidator().isValid(debugString))
 		{
 			String errMesg = String.format(
-					"%s is not a valid value for parameter debug. Valid values are true or false",
-					debugString);
+			        "%s is not a valid value for parameter debug. Valid values are true or false",
+			        debugString);
 			ghRsp = new GHResponse().addError(new IllegalArgumentException(errMesg));
-		} else if (!"true".equalsIgnoreCase(prettyString)
-				&& !"false".equalsIgnoreCase(prettyString))
+		} else if (!new BooleanValidator().isValid(prettyString))
 		{
 			String errMesg = String.format(
-					"%s is not a valid value for parameter pretty. Valid values are true or false",
-					prettyString);
+			        "%s is not a valid value for parameter pretty. Valid values are true or false",
+			        prettyString);
 			ghRsp = new GHResponse().addError(new IllegalArgumentException(errMesg));
 		} else if (!hopper.getEncodingManager().supports(vehicleStr))
 		{
 			String supported = hopper.getGraph().getEncodingManager().toString();
 			String errMesg = String.format(
-					"Vehicle %s is not a valid vehicle. Valid vehicles are %s", vehicleStr,
-					supported);
+			        "Vehicle %s is not a valid vehicle. Valid vehicles are %s", vehicleStr,
+			        supported);
 			ghRsp = new GHResponse().addError(new IllegalArgumentException(errMesg));
 		} else if (enableElevation && !hopper.hasElevation())
 		{
 			ghRsp = new GHResponse().addError(new IllegalArgumentException(
-					"Elevation not supported!"));
+			        "Elevation not supported!"));
 		} else
 		{
 			FlagEncoder algoVehicle = hopper.getEncodingManager().getEncoder(vehicleStr);
@@ -196,25 +182,25 @@ public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes )
 
 			initHints(request, httpReq.getParameterMap());
 			request.setVehicle(algoVehicle.toString()).setWeighting(weighting)
-			.setAlgorithm(algoStr).setLocale(localeStr).getHints()
-			.put("calcPoints", calcPoints).put("instructions", enableInstructions)
-			.put("wayPointMaxDistance", minPathPrecision);
+			        .setAlgorithm(algoStr).setLocale(localeStr).getHints()
+			        .put("calcPoints", calcPoints).put("instructions", enableInstructions)
+			        .put("wayPointMaxDistance", minPathPrecision);
 
 			ghRsp = hopper.route(request);
 		}
 
 		float took = sw.stop().getSeconds();
 		String infoStr = httpReq.getRemoteAddr() + " " + httpReq.getLocale() + " "
-				+ httpReq.getHeader("User-Agent");
+		        + httpReq.getHeader("User-Agent");
 		String logStr = httpReq.getQueryString() + " " + infoStr + " " + infoPoints + ", took:"
-				+ took + ", " + algoStr + ", " + weighting + ", " + vehicleStr;
+		        + took + ", " + algoStr + ", " + weighting + ", " + vehicleStr;
 
 		if (ghRsp.hasErrors())
 			logger.error(logStr + ", errors:" + ghRsp.getErrors());
 		else
 			logger.info(logStr + ", distance: " + ghRsp.getDistance() + ", time:"
-					+ Math.round(ghRsp.getTime() / 60000f) + "min, points:"
-					+ ghRsp.getPoints().getSize() + ", debug - " + ghRsp.getDebugInfo());
+			        + Math.round(ghRsp.getTime() / 60000f) + "min, points:"
+			        + ghRsp.getPoints().getSize() + ", debug - " + ghRsp.getDebugInfo());
 
 		if (writeGPX)
 		{
@@ -231,12 +217,12 @@ public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes )
 			if (!"json".equalsIgnoreCase(type) || (!"jsonp".equalsIgnoreCase(type) && jsonpAllowed))
 			{
 				String errorMessage = type
-						+ " is not a valid value for parameter type. Valid values are ";
+				        + " is not a valid value for parameter type. Valid values are ";
 				errorMessage += jsonpAllowed ? "JSON, GPX or JSONP." : "GPX or JSON.";
 				ghRsp.addError(new IllegalArgumentException(errorMessage));
 			}
 			Map<String, Object> map = createJson(ghRsp, calcPoints, pointsEncoded, enableElevation,
-					enableInstructions);
+			        enableInstructions);
 			Object infoMap = map.get("info");
 			if (infoMap != null)
 				((Map) infoMap).put("took", Math.round(took * 1000));
@@ -250,7 +236,7 @@ public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes )
 	}
 
 	protected String createGPXString( HttpServletRequest req, HttpServletResponse res,
-			GHResponse rsp )
+	        GHResponse rsp )
 	{
 		boolean includeElevation = getBooleanParam(req, "elevation", false);
 		res.setCharacterEncoding("UTF-8");
@@ -311,8 +297,8 @@ String errorsToXML( List<Throwable> list )
 	}
 
 	protected Map<String, Object> createJson( GHResponse rsp, boolean calcPoints,
-			boolean pointsEncoded, boolean includeElevation, boolean enableInstructions )
-			{
+	        boolean pointsEncoded, boolean includeElevation, boolean enableInstructions )
+	{
 		Map<String, Object> json = new HashMap<String, Object>();
 
 		if (rsp.hasErrors())
@@ -353,7 +339,7 @@ String errorsToXML( List<Throwable> list )
 				{
 					BBox maxBounds = hopper.getGraph().getBounds();
 					BBox maxBounds2D = new BBox(maxBounds.minLon, maxBounds.maxLon,
-							maxBounds.minLat, maxBounds.maxLat);
+					        maxBounds.minLat, maxBounds.maxLat);
 					jsonPath.put("bbox", rsp.calcRouteBBox(maxBounds2D).toGeoJson());
 				}
 
@@ -368,7 +354,7 @@ String errorsToXML( List<Throwable> list )
 			json.put("paths", Collections.singletonList(jsonPath));
 		}
 		return json;
-			}
+	}
 
 	protected Object createPoints( PointList points, boolean pointsEncoded, boolean includeElevation )
 	{
diff --git a/web/src/main/java/com/graphhopper/http/validation/BooleanValidator.java b/web/src/main/java/com/graphhopper/http/validation/BooleanValidator.java
new file mode 100644
index 0000000000..b02e178f2a
--- /dev/null
+++ b/web/src/main/java/com/graphhopper/http/validation/BooleanValidator.java
@@ -0,0 +1,11 @@
+package com.graphhopper.http.validation;
+
+public class BooleanValidator
+{
+
+	public boolean isValid( String param )
+	{
+		return "true".equalsIgnoreCase(param) || "false".equalsIgnoreCase(param);
+	}
+
+}
diff --git a/web/src/main/java/com/graphhopper/http/validation/CaseInsensitiveStringListValidator.java b/web/src/main/java/com/graphhopper/http/validation/CaseInsensitiveStringListValidator.java
new file mode 100644
index 0000000000..a91b52f34c
--- /dev/null
+++ b/web/src/main/java/com/graphhopper/http/validation/CaseInsensitiveStringListValidator.java
@@ -0,0 +1,24 @@
+package com.graphhopper.http.validation;
+
+import java.util.Arrays;
+import java.util.List;
+
+public class CaseInsensitiveStringListValidator
+{
+	public boolean isValid( String value, String... validValues )
+	{
+		return isValid(value, Arrays.asList(validValues));
+	}
+
+	public boolean isValid( String value, List<String> validValues )
+	{
+		for (String validValue : validValues)
+		{
+			if (value.equalsIgnoreCase(validValue))
+			{
+				return true;
+			}
+		}
+		return false;
+	}
+}
