diff --git a/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java b/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
index d0aa9dd79c..ce4b546707 100644
--- a/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
+++ b/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
@@ -93,9 +93,9 @@ public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes )
 		boolean enableElevation = getBooleanParam(httpReq, "elevation", false);
 		boolean pointsEncoded = getBooleanParam(httpReq, "points_encoded", true);
 
-		String vehicleStr = getParam(httpReq, "vehicle", "car");
+		String vehicleStr = getParam(httpReq, "vehicle", null);
 		String weighting = getParam(httpReq, "weighting", "fastest");
-		String algoStr = getParam(httpReq, "algorithm", "");
+		String algoStr = getParam(httpReq, "algorithm", null);
 		String localeStr = getParam(httpReq, "locale", "en");
 
 		StopWatch sw = new StopWatch().start();
@@ -119,8 +119,8 @@ public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes )
 			{
 				String errMesg = buildErrorMessageString(localeStr, "locale",
 				        TranslationMap.LOCALES);
-				ghRsp = new GHResponse().addError(new IllegalArgumentException(errMesg.toString()));
-			} else if (!new CaseInsensitiveStringListValidator().isValid(algoStr,
+				ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg.toString()));
+			} else if (null!=algoStr && !new CaseInsensitiveStringListValidator().isValid(algoStr,
 			        AlgorithmOptions.ASTAR, AlgorithmOptions.ASTAR_BI, AlgorithmOptions.DIJKSTRA,
 			        AlgorithmOptions.DIJKSTRA_BI, AlgorithmOptions.DIJKSTRA_ONE_TO_MANY))
 			{
@@ -128,38 +128,38 @@ public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes )
 				        AlgorithmOptions.ASTAR, AlgorithmOptions.ASTAR_BI,
 				        AlgorithmOptions.DIJKSTRA, AlgorithmOptions.DIJKSTRA_BI,
 				        AlgorithmOptions.DIJKSTRA_ONE_TO_MANY);
-				ghRsp = new GHResponse().addError(new IllegalArgumentException(errMesg));
+				ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg));
 			} else if (!new BooleanValidator().isValid(instructionsString))
 			{
 				String errMesg = buildBooleanErrorMessageString(instructionsString, "instructions");
-				ghRsp = new GHResponse().addError(new IllegalArgumentException(errMesg));
+				ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg));
 			} else if (!new BooleanValidator().isValid(pointsEncodedString))
 			{
 				String errMesg = buildBooleanErrorMessageString(pointsEncodedString,
 				        "points_encoded");
-				ghRsp = new GHResponse().addError(new IllegalArgumentException(errMesg));
+				ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg));
 			} else if (!new BooleanValidator().isValid(calcPointsString))
 			{
 				String errMesg = buildBooleanErrorMessageString(calcPointsString, "calc_points");
-				ghRsp = new GHResponse().addError(new IllegalArgumentException(errMesg));
+				ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg));
 			} else if (!new BooleanValidator().isValid(debugString))
 			{
 				String errMesg = buildBooleanErrorMessageString(debugString, "debug");
-				ghRsp = new GHResponse().addError(new IllegalArgumentException(errMesg));
+				ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg));
 			} else if (!new BooleanValidator().isValid(prettyString))
 			{
 				String errMesg = buildBooleanErrorMessageString(prettyString, "pretty");
-				ghRsp = new GHResponse().addError(new IllegalArgumentException(errMesg));
+				ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg));
 			} else if (!hopper.getEncodingManager().supports(vehicleStr))
 			{
 				String supported = hopper.getGraph().getEncodingManager().toString();
 				String errMesg = String.format(
 				        "Vehicle %s is not a valid vehicle. Valid vehicles are %s", vehicleStr,
 				        supported);
-				ghRsp = new GHResponse().addError(new IllegalArgumentException(errMesg));
+				ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg));
 			} else if (enableElevation && !hopper.hasElevation())
 			{
-				ghRsp = new GHResponse().addError(new IllegalArgumentException(
+				ghRsp = new GHResponse().addError(new InvalidParameterException(
 				        "Elevation not supported!"));
 			} else
 			{
@@ -190,13 +190,17 @@ public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes )
 							}
 						}
 					}
-					if (!allowedAvoidances.contains(avoidancesString))
-					{
-						String errMesg = buildErrorMessageString(avoidancesString, "avoidances",
-						        allowedAvoidances);
-						ghRsp = new GHResponse().addError(new IllegalArgumentException(errMesg
-						        .toString()));
-					}
+					String avoidanceArray[] = avoidancesString.split(",");
+					for (String avoidance : avoidanceArray)
+                    {
+						if (!allowedAvoidances.contains(avoidance))
+						{
+							String errMesg = buildErrorMessageString(avoidance, "avoidances",
+									allowedAvoidances);
+							ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg
+									.toString()));
+						}
+                    }
 				}
 
 				if (ghRsp == null)
diff --git a/web/src/main/java/com/graphhopper/http/GraphHopperWeb.java b/web/src/main/java/com/graphhopper/http/GraphHopperWeb.java
index f47267d105..406a13c6a1 100644
--- a/web/src/main/java/com/graphhopper/http/GraphHopperWeb.java
+++ b/web/src/main/java/com/graphhopper/http/GraphHopperWeb.java
@@ -22,7 +22,9 @@
 import com.graphhopper.GraphHopperAPI;
 import com.graphhopper.util.*;
 import com.graphhopper.util.shapes.GHPoint;
+
 import java.util.List;
+
 import org.json.JSONArray;
 import org.json.JSONObject;
 import org.slf4j.Logger;
@@ -116,9 +118,14 @@ public GHResponse route( GHRequest request )
                     + "&instructions=" + tmpInstructions
                     + "&points_encoded=true"
                     + "&calc_points=" + tmpCalcPoints
-                    + "&algo=" + request.getAlgorithm()
-                    + "&locale=" + request.getLocale().toString()
-                    + "&elevation=" + tmpElevation;
+                    + "&locale=" + request.getLocale().toString();
+            String algorithm = request.getAlgorithm();
+			if(algorithm!=null  && algorithm.trim().length()>0) {
+            	url += "&algorithm=" + algorithm;
+            }
+            if (tmpElevation) {
+            	url += "&elevation=" + tmpElevation;
+            }
 
             if (!request.getVehicle().isEmpty())
                 url += "&vehicle=" + request.getVehicle();
diff --git a/web/src/test/java/com/graphhopper/http/GraphHopperServletIT.java b/web/src/test/java/com/graphhopper/http/GraphHopperServletIT.java
index 638f07eab7..795b4c3091 100644
--- a/web/src/test/java/com/graphhopper/http/GraphHopperServletIT.java
+++ b/web/src/test/java/com/graphhopper/http/GraphHopperServletIT.java
@@ -59,7 +59,7 @@ public void setUp()
     @Test
     public void testBasicQuery() throws Exception
     {
-        JSONObject json = query("point=42.554851,1.536198&point=42.510071,1.548128", 200);
+        JSONObject json = query("point=42.554851,1.536198&point=42.510071,1.548128&vehicle=car&locale=en_US", 200);
         JSONObject infoJson = json.getJSONObject("info");
         assertFalse(infoJson.has("errors"));
         JSONObject path = json.getJSONArray("paths").getJSONObject(0);
@@ -71,7 +71,7 @@ public void testBasicQuery() throws Exception
     @Test
     public void testJsonRounding() throws Exception
     {
-        JSONObject json = query("point=42.554851234,1.536198&point=42.510071,1.548128&points_encoded=false", 200);
+        JSONObject json = query("point=42.554851234,1.536198&point=42.510071,1.548128&points_encoded=false&vehicle=car&locale=en_US", 200);
         JSONObject cson = json.getJSONArray("paths").getJSONObject(0).getJSONObject("points");
         assertTrue("unexpected precision!", cson.toString().contains("[1.536374,42.554839]"));
     }
@@ -79,9 +79,9 @@ public void testJsonRounding() throws Exception
     @Test
     public void testFailIfElevationRequestedButNotIncluded() throws Exception
     {
-        JSONObject json = query("point=42.554851234,1.536198&point=42.510071,1.548128&points_encoded=false&elevation=true", 400);
-        assertTrue(json.has("message"));
-        assertEquals("Elevation not supported!", json.get("message"));
+        JSONObject json = query("point=42.554851234,1.536198&point=42.510071,1.548128&points_encoded=false&elevation=true&vehicle=car&locale=en_US", 400);
+        assertTrue(json.has("error"));
+        assertEquals("Elevation not supported!", json.get("error"));
         assertEquals("Elevation not supported!", json.getJSONArray("hints").getJSONObject(0).getString("message"));
     }
 
@@ -90,7 +90,10 @@ public void testGraphHopperWeb() throws Exception
     {
         GraphHopperAPI hopper = new GraphHopperWeb();
         assertTrue(hopper.load(getTestRouteAPIUrl()));
-        GHResponse rsp = hopper.route(new GHRequest(42.554851, 1.536198, 42.510071, 1.548128));
+        GHRequest request = new GHRequest(42.554851, 1.536198, 42.510071, 1.548128);
+        request.setVehicle("car");
+        request.setLocale("en_US");
+		GHResponse rsp = hopper.route(request);
         assertTrue(rsp.getErrors().toString(), rsp.getErrors().isEmpty());
         assertTrue("distance wasn't correct:" + rsp.getDistance(), rsp.getDistance() > 9000);
         assertTrue("distance wasn't correct:" + rsp.getDistance(), rsp.getDistance() < 9500);
@@ -98,7 +101,7 @@ public void testGraphHopperWeb() throws Exception
         rsp = hopper.route(new GHRequest().
                 addPoint(new GHPoint(42.554851, 1.536198)).
                 addPoint(new GHPoint(42.531896, 1.553278)).
-                addPoint(new GHPoint(42.510071, 1.548128)));
+                addPoint(new GHPoint(42.510071, 1.548128)).setVehicle("car").setLocale("en_US"));
         assertTrue(rsp.getErrors().toString(), rsp.getErrors().isEmpty());
         assertTrue("distance wasn't correct:" + rsp.getDistance(), rsp.getDistance() > 20000);
         assertTrue("distance wasn't correct:" + rsp.getDistance(), rsp.getDistance() < 21000);
@@ -147,7 +150,7 @@ public void testGraphHopperWebRealExceptions()
     @Test
     public void testGPX() throws Exception
     {
-        String str = queryString("point=42.554851,1.536198&point=42.510071,1.548128&type=gpx", 200);
+        String str = queryString("point=42.554851,1.536198&point=42.510071,1.548128&type=gpx&vehicle=car&locale=en_US", 200);
         assertTrue(str.contains("<gh:distance>115.1</gh:distance>"));
         assertTrue(str.contains("<trkpt lat=\"42.554839\" lon=\"1.536374\"><time>"));
     }
@@ -155,10 +158,10 @@ public void testGPX() throws Exception
     @Test
     public void testGPXWithError() throws Exception
     {
-        String str = queryString("point=42.554851,1.536198&type=gpx", 400);
+        String str = queryString("point=42.554851,1.536198&type=gpx&vehicle=car&locale=en_US", 400);
         assertFalse(str, str.contains("<html>"));
         assertFalse(str, str.contains("{"));
         assertTrue("Expected error but was: " + str, str.contains("<message>At least 2 points has to be specified, but was:1</message>"));
-        assertTrue("Expected error but was: " + str, str.contains("<hints><error details=\"java"));
+        assertTrue("Expected error but was: " + str, str.contains("<hints>"));
     }
 }
