diff --git a/core/src/main/java/com/graphhopper/routing/util/LeastNoisyWeighting.java b/core/src/main/java/com/graphhopper/routing/util/LeastNoisyWeighting.java
index dd711c3934..2af42b2fcd 100644
--- a/core/src/main/java/com/graphhopper/routing/util/LeastNoisyWeighting.java
+++ b/core/src/main/java/com/graphhopper/routing/util/LeastNoisyWeighting.java
@@ -24,7 +24,8 @@
 import java.net.URISyntaxException;
 import java.util.HashMap;                                                      
 import java.util.Map;                                                          
-import java.util.List;                                                          
+import java.util.List;   
+import java.util.*;
                                                                                
 import redis.clients.jedis.BinaryJedis;                                        
 import redis.clients.jedis.Jedis;                                              
@@ -45,6 +46,34 @@
     public LeastNoisyWeighting()
     {
         System.out.println("LeastNoiseWeighting instantiated!");
+        try
+        {
+        
+        Jedis jedis = new Jedis("localhost");
+        String hashname = "dublin_ways_set";
+        //Map<String, String> decibles = jedis.hgetAll(hashname);
+        //System.out.println("Noise Entries = " + decibles);
+        Set<String> affectedEdges = jedis.smembers(hashname);
+        System.out.println("dublin_ways_set = " + affectedEdges);
+        
+        /*for(Map.Entry<String, String> value: decibles.entrySet())
+        {
+            String date = value.getKey();
+            String noise = value.getValue();
+            System.out.println("on " + date + ", noise was: " + noise);
+        }*/
+        } catch(JedisConnectionException e)
+        {
+            System.out.println("JedisConnectionException: " +e.getMessage());
+        } catch(JedisDataException e)
+        {
+            System.out.println("JedisDataException: " +e.getMessage());
+            
+        } catch(Exception e)
+        {
+            System.out.println("Error: " +e.getMessage());
+            
+        }
         
     }
     
@@ -59,17 +88,17 @@ public double getMinWeight( double noiseValue )
     public double calcWeight( EdgeIteratorState edge, boolean reverse )
     {
         //Experimenting with returning a random radom between 0-80...Worked!
-        /*Random nw = new Random();
+        Random nw = new Random();
         double returnedRandom = nw.nextInt(100);
-        System.out.println("Random noise value for edge = " +edge+ " = "+ returnedRandom );
-        return returnedRandom;*/
+       // System.out.println("Random noise value for edge = " +edge+ " = "+ returnedRandom );
+        return returnedRandom;
         
-        double noiseValue = getNoiseFromRedis(edge);
-        return noiseValue;
+        //double noiseValue = getNoiseFromRedis(edge);
+        //return noiseValue;
     
     }
     
-      double getNoiseFromRedis(EdgeIteratorState edge)
+      double getNoiseFromRedis(EdgeIteratorState edge) throws JedisConnectionException, JedisDataException
     {
         double noiseValue=0;
         String city = getCurrentCity();
@@ -77,6 +106,7 @@ public double calcWeight( EdgeIteratorState edge, boolean reverse )
         //based on the value of city, the appropriate database is selected, and query with the edge to return the noise value
         //check if we can increment the time of the noise reading to instructions in the response??
         
+
         
         return noiseValue;
     }
@@ -93,6 +123,7 @@ String getCurrentCity()
           
       }
     
+
     
     @Override
     public String toString()
diff --git a/pom.xml b/pom.xml
index 6826d1f1e4..81e1736410 100644
--- a/pom.xml
+++ b/pom.xml
@@ -143,25 +143,6 @@
                 <groupId>ru.trylogic.maven.plugins</groupId>
                 <artifactId>redis-maven-plugin</artifactId>
                 <version>1.2.3</version>
-                <configuration>
-                    <forked>true</forked>
-                </configuration>
-                <executions>
-                    <execution>
-                        <id>start-redis</id>
-                        <phase>pre-integration-test</phase>
-                        <goals>
-                            <goal>run</goal>
-                        </goals>
-                    </execution>
-                    <execution>
-                        <id>stop-redis</id>
-                        <phase>post-integration-test</phase>
-                        <goals>
-                            <goal>shutdown</goal>
-                        </goals>
-                    </execution>
-                </executions>
             </plugin>
             
         </plugins>
diff --git a/sensors-config-files/dublin.config b/sensors-config-files/dublin.config
index ea118c03b9..511c5fa3fb 100644
--- a/sensors-config-files/dublin.config
+++ b/sensors-config-files/dublin.config
@@ -11,8 +11,8 @@ sensor1 = Noisetube
 #implemented in the web app). Given available sensor data, the user can also choose to maximize, minimize sensor data;i.e LeastNoisy for the Noisetube sensor.
 text = Least_Noisy 
 
-# Type of sensor readings; e.g. noise, air...etc. To be used to in name the hashes, such as city_type_set. That's important to be able to retrieve the readings from Graphhooper
-#during routing
+# Type of sensor readings; e.g. noise, air...etc. To be used to in naming the hashes, such as city_type_set. That's important to be able to retrieve the relevant readings  of the
+#relevant city from Graphhooper during routing calculation
 type = noise
 
 
