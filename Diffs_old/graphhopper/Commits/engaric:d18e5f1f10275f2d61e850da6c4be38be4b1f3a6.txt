diff --git a/core/src/main/java/com/graphhopper/reader/dem/ElevationProvider.java b/core/src/main/java/com/graphhopper/reader/dem/ElevationProvider.java
index aed7740ae7..1725703c08 100644
--- a/core/src/main/java/com/graphhopper/reader/dem/ElevationProvider.java
+++ b/core/src/main/java/com/graphhopper/reader/dem/ElevationProvider.java
@@ -19,80 +19,73 @@
 package com.graphhopper.reader.dem;
 
 import com.graphhopper.storage.DAType;
+
 import java.io.File;
 
 /**
  * @author Peter Karich
  */
-public interface ElevationProvider
-{
+public interface ElevationProvider {
     /**
      * @return returns the hight in meter or Double.NaN if invalid
      */
-    double getEle( double lat, double lon );
+    double getEle(double lat, double lon);
 
     /**
      * Specifies the service URL where to download the elevation data. An empty string should set it
      * to the default URL. Default is a provider-dependent URL which should work out of the box.
      */
-    ElevationProvider setBaseURL( String baseURL );
+    ElevationProvider setBaseURL(String baseURL);
 
     /**
      * Specifies the directory where to temporarily store the elevation data after fetched from base
      * URL. Default is a custom provider-dependent subdirectory in '/tmp'
      */
-    ElevationProvider setCacheDir( File cacheDir );
+    ElevationProvider setCacheDir(File cacheDir);
 
     /**
      * Set to true if you have a small area and need high speed access. Default is DAType.MMAP
      */
-    ElevationProvider setDAType( DAType daType );
+    ElevationProvider setDAType(DAType daType);
 
     /**
      * Configuration option to include surrounding elevation points when fetching the elevation. Has
      * only an effect if called before the first getEle call. Turned off by default.
      */
-    void setCalcMean( boolean calcMean );
+    void setCalcMean(boolean calcMean);
 
     /**
      * Release resources.
      */
     void release();
 
-    public final static ElevationProvider NOOP = new ElevationProvider()
-    {
+    final ElevationProvider NOOP = new ElevationProvider() {
         @Override
-        public double getEle( double lat, double lon )
-        {
+        public double getEle(double lat, double lon) {
             return Double.NaN;
         }
 
         @Override
-        public ElevationProvider setCacheDir( File cacheDir )
-        {
+        public ElevationProvider setCacheDir(File cacheDir) {
             return this;
         }
 
         @Override
-        public ElevationProvider setBaseURL( String baseURL )
-        {
+        public ElevationProvider setBaseURL(String baseURL) {
             return this;
         }
 
         @Override
-        public ElevationProvider setDAType( DAType daType )
-        {
+        public ElevationProvider setDAType(DAType daType) {
             return this;
         }
 
         @Override
-        public void release()
-        {
+        public void release() {
         }
 
         @Override
-        public void setCalcMean( boolean eleCalcMean )
-        {
+        public void setCalcMean(boolean eleCalcMean) {
         }
     };
 }
diff --git a/web/src/main/java/com/graphhopper/http/APIException.java b/web/src/main/java/com/graphhopper/http/APIException.java
index 70f9634612..bd801ec2dc 100644
--- a/web/src/main/java/com/graphhopper/http/APIException.java
+++ b/web/src/main/java/com/graphhopper/http/APIException.java
@@ -4,23 +4,23 @@
 import org.eclipse.jetty.http.HttpStatus.Code;
 
 public class APIException extends Exception {
-	/**
-	 * 
-	 */
-	private static final long serialVersionUID = 1L;
-	private HttpStatus.Code statusCode;
+    /**
+     *
+     */
+    private static final long serialVersionUID = 1L;
+    private HttpStatus.Code statusCode;
 
-	public APIException(Code statusCode, String message) {
-		super(message);
-		this.statusCode = statusCode;
-	}
-	
-	public HttpStatus.Code getStatusCode() {
-		return statusCode;
-	}
-	
-	public String getStatusMessage() {
-		return getMessage();
-	}
+    public APIException(Code statusCode, String message) {
+        super(message);
+        this.statusCode = statusCode;
+    }
+
+    public HttpStatus.Code getStatusCode() {
+        return statusCode;
+    }
+
+    public String getStatusMessage() {
+        return getMessage();
+    }
 
 }
