diff --git a/web/src/main/java/com/graphhopper/http/InvalidParameterException.java b/web/src/main/java/com/graphhopper/http/InvalidParameterException.java
index 526d4ce38e..594935d248 100644
--- a/web/src/main/java/com/graphhopper/http/InvalidParameterException.java
+++ b/web/src/main/java/com/graphhopper/http/InvalidParameterException.java
@@ -4,14 +4,13 @@
 
 public class InvalidParameterException extends APIException {
 
-	public InvalidParameterException(String message )
-    {
-	    super(Code.BAD_REQUEST, message);
+    public InvalidParameterException(String message) {
+        super(Code.BAD_REQUEST, message);
     }
 
-	/**
-	 * 
-	 */
+    /**
+     *
+     */
     private static final long serialVersionUID = 1L;
 
 }
diff --git a/web/src/main/java/com/graphhopper/http/InvalidRequestServlet.java b/web/src/main/java/com/graphhopper/http/InvalidRequestServlet.java
index 59047fecfc..e3fc9595e6 100644
--- a/web/src/main/java/com/graphhopper/http/InvalidRequestServlet.java
+++ b/web/src/main/java/com/graphhopper/http/InvalidRequestServlet.java
@@ -15,51 +15,44 @@
  */
 package com.graphhopper.http;
 
-import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;
-
-import java.io.IOException;
-import java.util.HashMap;
-import java.util.Map;
+import com.graphhopper.GHResponse;
+import org.eclipse.jetty.http.HttpStatus.Code;
+import org.json.JSONObject;
 
 import javax.servlet.ServletException;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
+import java.io.IOException;
+import java.util.HashMap;
+import java.util.Map;
 
-import org.eclipse.jetty.http.HttpStatus.Code;
-import org.json.JSONObject;
-
-import com.graphhopper.GHResponse;
+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;
 
-public class InvalidRequestServlet extends GHBaseServlet
-{
-	@Override
-	protected void service( HttpServletRequest req, HttpServletResponse res )
-			throws ServletException, IOException
-	{
-		String resource = req.getRequestURI();
-		if (resource.startsWith("/") && resource.length() > 1)
-		{
-			resource = resource.substring(1, resource.length());
-		}
+public class InvalidRequestServlet extends GHBaseServlet {
+    @Override
+    protected void service(HttpServletRequest req, HttpServletResponse res)
+            throws ServletException, IOException {
+        String resource = req.getRequestURI();
+        if (resource.startsWith("/") && resource.length() > 1) {
+            resource = resource.substring(1, resource.length());
+        }
 
-		String message = "Resource " + resource
-				+ " does not exist. Valid resources are route, nearest.";
-		boolean isGpx = "gpx".equals(req.getParameter("type"));
-		if (isGpx)
-		{
-			GHResponse ghResponse = new GHResponse().addError(new APIException(Code.NOT_FOUND,
-			        message));
-			String xml = createGPXString(req, res, ghResponse);
-			res.setStatus(SC_NOT_FOUND);
-			res.getWriter().append(xml);
-		} else
-		{
-			JSONObject json = new JSONObject();
-			Map<String, Object> map = new HashMap<>();
-			map.put("statuscode", "" + HttpServletResponse.SC_NOT_FOUND);
-			map.put("message", message);
-			json.put("error", map);
-			writeJsonError(res, HttpServletResponse.SC_NOT_FOUND, json);
-		}
-	}
+        String message = "Resource " + resource
+                + " does not exist. Valid resources are route, nearest.";
+        boolean isGpx = "gpx".equals(req.getParameter("type"));
+        if (isGpx) {
+            GHResponse ghResponse = new GHResponse().addError(new APIException(Code.NOT_FOUND,
+                    message));
+            String xml = createGPXString(req, res, ghResponse);
+            res.setStatus(SC_NOT_FOUND);
+            res.getWriter().append(xml);
+        } else {
+            JSONObject json = new JSONObject();
+            Map<String, Object> map = new HashMap<>();
+            map.put("statuscode", "" + HttpServletResponse.SC_NOT_FOUND);
+            map.put("message", message);
+            json.put("error", map);
+            writeJsonError(res, HttpServletResponse.SC_NOT_FOUND, json);
+        }
+    }
 }
\ No newline at end of file
diff --git a/web/src/main/java/com/graphhopper/http/MissingParameterException.java b/web/src/main/java/com/graphhopper/http/MissingParameterException.java
index 5300e9ba2f..8b46a7542a 100644
--- a/web/src/main/java/com/graphhopper/http/MissingParameterException.java
+++ b/web/src/main/java/com/graphhopper/http/MissingParameterException.java
@@ -4,15 +4,15 @@
 
 public class MissingParameterException extends APIException {
 
-	/**
-	 * 
-	 */
-	private static final long serialVersionUID = 1L;
-	
-	private static String message = "No %s parameter provided.";
+    /**
+     *
+     */
+    private static final long serialVersionUID = 1L;
 
-	public MissingParameterException(String parameter) {
-		super(HttpStatus.Code.BAD_REQUEST, String.format(message , parameter));
-	}
+    private static String message = "No %s parameter provided.";
+
+    public MissingParameterException(String parameter) {
+        super(HttpStatus.Code.BAD_REQUEST, String.format(message, parameter));
+    }
 
 }
diff --git a/web/src/main/java/com/graphhopper/http/NoSuchParameterException.java b/web/src/main/java/com/graphhopper/http/NoSuchParameterException.java
index aaf6cf4d18..fba8b31d15 100644
--- a/web/src/main/java/com/graphhopper/http/NoSuchParameterException.java
+++ b/web/src/main/java/com/graphhopper/http/NoSuchParameterException.java
@@ -4,13 +4,13 @@
 
 public class NoSuchParameterException extends APIException {
 
-	public NoSuchParameterException(String message) {
-		super(Code.BAD_REQUEST, message);
-	}
+    public NoSuchParameterException(String message) {
+        super(Code.BAD_REQUEST, message);
+    }
 
-	/**
-	 * 
-	 */
-	private static final long serialVersionUID = 1L;
+    /**
+     *
+     */
+    private static final long serialVersionUID = 1L;
 
 }
