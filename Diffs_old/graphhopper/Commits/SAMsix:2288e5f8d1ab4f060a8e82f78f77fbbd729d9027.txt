diff --git a/core/src/main/java/com/graphhopper/storage/index/LocationIndexTree.java b/core/src/main/java/com/graphhopper/storage/index/LocationIndexTree.java
index 27946fa9eb..f3b8b38ca6 100644
--- a/core/src/main/java/com/graphhopper/storage/index/LocationIndexTree.java
+++ b/core/src/main/java/com/graphhopper/storage/index/LocationIndexTree.java
@@ -116,12 +116,12 @@ public LocationIndexTree setMinResolutionInMeter( int minResolutionInMeter )
      */
     public LocationIndexTree setMaxRegionSearch( int numTiles )
     {
-//        if (numTiles < 1)
-//            throw new IllegalArgumentException("Region of location index must be at least 1 but was " + numTiles);
-//
-//        // see #232
-//        if (numTiles % 2 == 1)
-//            numTiles++;
+        if (numTiles < 1)
+            throw new IllegalArgumentException("Region of location index must be at least 1 but was " + numTiles);
+
+        // see #232
+        if (numTiles % 2 == 1)
+            numTiles++;
 
         this.maxRegionSearch = numTiles;
         return this;
@@ -701,6 +701,7 @@ GHPoint getCenter( double lat, double lon )
         keyAlgo.decode(key, center);
         return center;
     }
+    
 
     /**
      * This method collects the node indices from the quad tree data structure in a certain order
@@ -738,22 +739,22 @@ public final TIntHashSet findNetworkEntries( double queryLat, double queryLon, i
             }
 
             // see #232
-            if (iteration % 2 == 1)
-            {
-                // Check if something was found already...
-                if (foundEntries.size() > 0)
-                {
-                    double rMin = calculateRMin(queryLat, queryLon, iteration);
-                    double minDistance = calcMinDistance(queryLat, queryLon, foundEntries);
-
-                    if (minDistance < rMin)
-                    {   // resultEntries contains a nearest node for sure
-                        break;
-                    } // else: continue an undetected nearer node may sit in a neighbouring tile.
-                    // Now calculate how far we have to look outside to find any hidden nearest nodes
-                    // and repeat whole process with wider search area until this distance is covered.
-                }
-            }
+//            if (iteration % 2 == 1)
+//            {
+//                // Check if something was found already...
+//                if (foundEntries.size() > 0)
+//                {
+//                    double rMin = calculateRMin(queryLat, queryLon, iteration);
+//                    double minDistance = calcMinDistance(queryLat, queryLon, foundEntries);
+//
+//                    if (minDistance < rMin)
+//                    {   // resultEntries contains a nearest node for sure
+//                        break;
+//                    } // else: continue an undetected nearer node may sit in a neighbouring tile.
+//                    // Now calculate how far we have to look outside to find any hidden nearest nodes
+//                    // and repeat whole process with wider search area until this distance is covered.
+//                }
+//            }
         }
         return foundEntries;
     }
diff --git a/graphhopper.sh b/graphhopper.sh
index 8b3e95d836..df8e86d625 100755
--- a/graphhopper.sh
+++ b/graphhopper.sh
@@ -189,7 +189,7 @@ else
 fi
 
 if [ "x$JAVA_OPTS" = "x" ]; then
-  JAVA_OPTS="-Xmx2000m -Xms2000m -server"
+  JAVA_OPTS="-Xmx3000m -Xms2000m -server"
 fi
 
 
diff --git a/import.sh b/import.sh
new file mode 100755
index 0000000000..5c87f2e0f6
--- /dev/null
+++ b/import.sh
@@ -0,0 +1,12 @@
+#!/bin/bash
+
+./graphhopper.sh import $1/us-midwest-latest.osm.pbf
+./graphhopper.sh import $1/us-west-latest.osm.pbf
+./graphhopper.sh import $1/us-northeast-latest.osm.pbf
+./graphhopper.sh import $1/us-south-latest.osm.pbf
+
+cd $1
+tar -cvzf us-midwest-latest.osm.tgz us-midwest-latest.osm-gh
+tar -cvzf us-west-latest.osm.tgz us-west-latest.osm-gh
+tar -cvzf us-northeast-latest.osm.tgz us-northeast-latest.osm-gh
+tar -cvzf us-south-latest.osm.tgz us-south-latest.osm-gh
