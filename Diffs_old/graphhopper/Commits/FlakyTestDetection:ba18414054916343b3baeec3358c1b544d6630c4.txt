diff --git a/core/src/main/java/com/graphhopper/routing/util/spatialrules/Polygon.java b/core/src/main/java/com/graphhopper/routing/util/spatialrules/Polygon.java
index 31d2daa8af..2d981ebcac 100644
--- a/core/src/main/java/com/graphhopper/routing/util/spatialrules/Polygon.java
+++ b/core/src/main/java/com/graphhopper/routing/util/spatialrules/Polygon.java
@@ -72,6 +72,19 @@ public Polygon(double[] lat, double[] lon) {
         epsilon = (maxLat - minLat) / 10;
     }
 
+    /**
+     * Lossy conversion to a GraphHopper Polygon.
+     */
+    public static Polygon create(com.vividsolutions.jts.geom.Polygon polygon) {
+        double[] lats = new double[polygon.getNumPoints()];
+        double[] lons = new double[polygon.getNumPoints()];
+        for (int i = 0; i < polygon.getNumPoints(); i++) {
+            lats[i] = polygon.getCoordinates()[i].y;
+            lons[i] = polygon.getCoordinates()[i].x;
+        }
+        return new Polygon(lats, lons);
+    }
+
     /**
      * Wrapper method for {@link Polygon#contains(double, double)}.
      */
diff --git a/core/src/main/java/com/graphhopper/routing/util/spatialrules/SpatialRuleLookupBuilder.java b/core/src/main/java/com/graphhopper/routing/util/spatialrules/SpatialRuleLookupBuilder.java
index 43f227689a..9c696c259f 100644
--- a/core/src/main/java/com/graphhopper/routing/util/spatialrules/SpatialRuleLookupBuilder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/spatialrules/SpatialRuleLookupBuilder.java
@@ -51,7 +51,7 @@ public static SpatialRuleLookup buildIndex(JsonFeatureCollection jsonFeatureColl
             for (int i = 0; i < jsonFeature.getGeometry().getNumGeometries(); i++) {
                 Geometry poly = jsonFeature.getGeometry().getGeometryN(i);
                 if (poly instanceof com.vividsolutions.jts.geom.Polygon)
-                    borders.add(ghPolygonFromJTS((com.vividsolutions.jts.geom.Polygon) poly));
+                    borders.add(Polygon.create((com.vividsolutions.jts.geom.Polygon) poly));
                 else
                     throw new IllegalArgumentException("Geometry for " + id + " (" + i + ") not supported " + poly.getClass().getSimpleName());
             }
@@ -87,15 +87,4 @@ public static SpatialRuleLookup buildIndex(JsonFeatureCollection jsonFeatureColl
     public static SpatialRuleLookup buildIndex(JsonFeatureCollection jsonFeatureCollection, String jsonIdField, SpatialRuleFactory spatialRuleFactory) {
         return buildIndex(jsonFeatureCollection, jsonIdField, spatialRuleFactory, .1, new BBox(-180, 180, -90, 90));
     }
-
-    private static Polygon ghPolygonFromJTS(com.vividsolutions.jts.geom.Polygon polygon) {
-        double[] lats = new double[polygon.getNumPoints()];
-        double[] lons = new double[polygon.getNumPoints()];
-        for (int i = 0; i < polygon.getNumPoints(); i++) {
-            lats[i] = polygon.getCoordinates()[i].y;
-            lons[i] = polygon.getCoordinates()[i].x;
-        }
-        return new Polygon(lats, lons);
-    }
-
 }
diff --git a/core/src/main/java/com/graphhopper/storage/GraphEdgeIdFinder.java b/core/src/main/java/com/graphhopper/storage/GraphEdgeIdFinder.java
index 704933ab65..8750594f76 100644
--- a/core/src/main/java/com/graphhopper/storage/GraphEdgeIdFinder.java
+++ b/core/src/main/java/com/graphhopper/storage/GraphEdgeIdFinder.java
@@ -103,7 +103,7 @@ protected boolean checkAdjacent(EdgeIteratorState edge) {
      */
     public void fillEdgeIDs(GHIntHashSet edgeIds, Geometry geometry, EdgeFilter filter) {
         if (geometry instanceof Point) {
-            GHPoint point = GHPoint.from((Point) geometry);
+            GHPoint point = GHPoint.create((Point) geometry);
             findClosestEdgeToPoint(edgeIds, point, filter);
         } else if (geometry instanceof LineString) {
             PointList pl = PointList.from((LineString) geometry);
diff --git a/core/src/main/java/com/graphhopper/util/shapes/GHPoint.java b/core/src/main/java/com/graphhopper/util/shapes/GHPoint.java
index 9d2c2257ba..636bb12b94 100644
--- a/core/src/main/java/com/graphhopper/util/shapes/GHPoint.java
+++ b/core/src/main/java/com/graphhopper/util/shapes/GHPoint.java
@@ -35,6 +35,10 @@ public GHPoint(double lat, double lon) {
         this.lon = lon;
     }
 
+    public static GHPoint create(Point point) {
+        return new GHPoint(point.getY(), point.getX());
+    }
+
     public static GHPoint parse(String str) {
         return parse(str, false);
     }
@@ -100,8 +104,4 @@ public String toString() {
     public Double[] toGeoJson() {
         return new Double[]{lon, lat};
     }
-
-    public static GHPoint from(Point point) {
-        return new GHPoint(point.getY(), point.getX());
-    }
 }
diff --git a/reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/GraphHopperGtfs.java b/reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/GraphHopperGtfs.java
index d19a18aa74..6789d14835 100644
--- a/reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/GraphHopperGtfs.java
+++ b/reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/GraphHopperGtfs.java
@@ -304,7 +304,7 @@ public static GraphHopperStorage createOrLoad(GHDirectory directory, EncodingMan
             for (String osmFile : osmFiles) {
                 OSMReader osmReader = new OSMReader(graphHopperStorage);
                 osmReader.setFile(new File(osmFile));
-                osmReader.setDontCreateStorage(true);
+                osmReader.setCreateStorage(false);
                 try {
                     osmReader.readGraph();
                 } catch (IOException e) {
diff --git a/reader-osm/src/main/java/com/graphhopper/reader/osm/OSMReader.java b/reader-osm/src/main/java/com/graphhopper/reader/osm/OSMReader.java
index 1ab9b83aae..fb2627a6aa 100644
--- a/reader-osm/src/main/java/com/graphhopper/reader/osm/OSMReader.java
+++ b/reader-osm/src/main/java/com/graphhopper/reader/osm/OSMReader.java
@@ -17,15 +17,8 @@
  */
 package com.graphhopper.reader.osm;
 
-import com.carrotsearch.hppc.IntLongMap;
-import com.carrotsearch.hppc.LongArrayList;
-import com.carrotsearch.hppc.LongIndexedContainer;
-import com.carrotsearch.hppc.LongLongMap;
-import com.carrotsearch.hppc.LongSet;
-import com.graphhopper.coll.GHIntLongHashMap;
-import com.graphhopper.coll.GHLongHashSet;
-import com.graphhopper.coll.GHLongIntBTree;
-import com.graphhopper.coll.GHLongLongHashMap;
+import com.carrotsearch.hppc.*;
+import com.graphhopper.coll.*;
 import com.graphhopper.coll.LongIntMap;
 import com.graphhopper.reader.*;
 import com.graphhopper.reader.dem.ElevationProvider;
@@ -119,7 +112,7 @@
     private ElevationProvider eleProvider = ElevationProvider.NOOP;
     private File osmFile;
     private Date osmDataDate;
-    private boolean dontCreateStorage = false;
+    private boolean createStorage = true;
 
     public OSMReader(GraphHopperStorage ghStorage) {
         this.ghStorage = ghStorage;
@@ -252,9 +245,9 @@ boolean filterWay(ReaderWay item) {
     private void writeOsm2Graph(File osmFile) {
         int tmp = (int) Math.max(getNodeMap().getSize() / 50, 100);
         LOGGER.info("creating graph. Found nodes (pillar+tower):" + nf(getNodeMap().getSize()) + ", " + Helper.getMemInfo());
-        if (!dontCreateStorage) {
+        if (createStorage)
             ghStorage.create(tmp);
-        }
+
         long wayStart = -1;
         long relationStart = -1;
         long counter = 1;
@@ -931,8 +924,12 @@ public Date getDataDate() {
         return osmDataDate;
     }
 
-    public void setDontCreateStorage(boolean dontCreateStorage) {
-        this.dontCreateStorage = dontCreateStorage;
+    /**
+     * Per default the storage used in this OSMReader is uninitialized and created i.e. createStorage is true. Specify
+     * false if you call the create method outside of OSMReader.
+     */
+    public void setCreateStorage(boolean createStorage) {
+        this.createStorage = createStorage;
     }
 
     @Override
