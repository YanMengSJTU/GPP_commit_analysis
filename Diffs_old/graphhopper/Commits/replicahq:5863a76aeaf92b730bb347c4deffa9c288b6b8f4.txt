diff --git a/web-bundle/src/main/java/com/graphhopper/swl/CustomCarFlagEncoder.java b/web-bundle/src/main/java/com/graphhopper/swl/CustomCarFlagEncoder.java
index 3335a3814b..6b88d641e2 100644
--- a/web-bundle/src/main/java/com/graphhopper/swl/CustomCarFlagEncoder.java
+++ b/web-bundle/src/main/java/com/graphhopper/swl/CustomCarFlagEncoder.java
@@ -29,6 +29,7 @@
 public class CustomCarFlagEncoder extends CarFlagEncoder {
 
     private SimpleIntEncodedValue[] stableIdByte = new SimpleIntEncodedValue[16];
+    private SimpleIntEncodedValue[] reverseStableIdByte = new SimpleIntEncodedValue[16];
 
     public CustomCarFlagEncoder() {
         super();
@@ -42,24 +43,30 @@ public void createEncodedValues(List<EncodedValue> registerNewEncodedValue, Stri
             stableIdByte[i] = new SimpleIntEncodedValue("stable-id-byte-"+i, 8);
             registerNewEncodedValue.add(stableIdByte[i]);
         }
+        for (int i=0; i<16; i++) {
+            reverseStableIdByte[i] = new SimpleIntEncodedValue("reverse-stable-id-byte-"+i, 8);
+            registerNewEncodedValue.add(reverseStableIdByte[i]);
+        }
     }
 
-    final String getStableId(EdgeIteratorState edge) {
+    final String getStableId(boolean reverse, EdgeIteratorState edge) {
         byte[] stableId = new byte[16];
+        SimpleIntEncodedValue[] idByte = reverse ? reverseStableIdByte : stableIdByte;
         for (int i=0; i<16; i++) {
-            stableId[i] = (byte) edge.get(stableIdByte[i]);
+            stableId[i] = (byte) edge.get(idByte[i]);
         }
         return DatatypeConverter.printHexBinary(stableId).toLowerCase();
     }
 
-    final void setStableId(EdgeIteratorState edge, String stableId) {
+    final void setStableId(boolean reverse, EdgeIteratorState edge, String stableId) {
         byte[] stableIdBytes = DatatypeConverter.parseHexBinary(stableId);
 
         if (stableIdBytes.length != 16)
             throw new IllegalArgumentException("stable ID must be 16 bytes: " + DatatypeConverter.printHexBinary(stableIdBytes));
 
+        SimpleIntEncodedValue[] idByte = reverse ? reverseStableIdByte : stableIdByte;
         for (int i=0; i<16; i++) {
-            edge.set(stableIdByte[i], Byte.toUnsignedInt(stableIdBytes[i]));
+            edge.set(idByte[i], Byte.toUnsignedInt(stableIdBytes[i]));
         }
     }
 
diff --git a/web-bundle/src/main/java/com/graphhopper/swl/R5EdgeIdPathDetailsBuilder.java b/web-bundle/src/main/java/com/graphhopper/swl/R5EdgeIdPathDetailsBuilder.java
index ad8d51255c..04a5cfc8db 100644
--- a/web-bundle/src/main/java/com/graphhopper/swl/R5EdgeIdPathDetailsBuilder.java
+++ b/web-bundle/src/main/java/com/graphhopper/swl/R5EdgeIdPathDetailsBuilder.java
@@ -50,7 +50,8 @@ private String getR5EdgeId(EdgeIteratorState edge) {
         if (edge instanceof VirtualEdgeIteratorState) {
             return String.valueOf(GHUtility.getEdgeFromEdgeKey(((VirtualEdgeIteratorState) edge).getOriginalEdgeKey()));
         } else {
-            return originalDirectionFlagEncoder.getStableId(edge);
+            boolean reverse = edge.get(EdgeIteratorState.REVERSE_STATE);
+            return originalDirectionFlagEncoder.getStableId(reverse, edge);
         }
     }
 
