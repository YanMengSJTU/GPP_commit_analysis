diff --git a/core/files/changelog.txt b/core/files/changelog.txt
index 01daaa0cde..91df1973af 100644
--- a/core/files/changelog.txt
+++ b/core/files/changelog.txt
@@ -1,4 +1,5 @@
 0.5
+    breaking change in HTTP API: error JSON format changed to be message:"" instead of within info.errors, see updated api documentation
     made GHResponse.getMillis, Path.getMillis, GPXEntry.getMillis deprecated, use getTime instead
 
 0.4
diff --git a/core/src/main/java/com/graphhopper/GHResponse.java b/core/src/main/java/com/graphhopper/GHResponse.java
index c434109d6b..a0f468d586 100644
--- a/core/src/main/java/com/graphhopper/GHResponse.java
+++ b/core/src/main/java/com/graphhopper/GHResponse.java
@@ -202,8 +202,8 @@ public BBox calcRouteBBox( BBox _fallback )
     @Override
     public String toString()
     {
-        String str = "nodes:" + list.getSize() + ": " + list.toString();
-        if (!instructions.isEmpty())
+        String str = "nodes:" + list.getSize() + "; " + list.toString();
+        if (instructions != null && !instructions.isEmpty())
             str += ", " + instructions.toString();
 
         if (hasErrors())
diff --git a/core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java
index df429d01b3..35300fdd8c 100644
--- a/core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java
@@ -206,6 +206,7 @@ public int defineWayBits(int index, int shift) {
 		acceptBit = 1L << index;
 		ferryBit = 2L << index;
 
+		//TODO handle these at the reader or manager level
 		if (null != encoderDecorators) {
 			for (EncoderDecorator decorator : encoderDecorators) {
 				shift = decorator.defineWayBits(shift);
@@ -501,11 +502,6 @@ protected static int parseDuration(String str) {
 	 * stored in the specified edge.
 	 */
 	public void applyWayTags(Way way, EdgeIteratorState edge) {
-		if (null != encoderDecorators) {
-			for (EncoderDecorator decorator : encoderDecorators) {
-
-			}
-		}
 	}
 
 	/**
diff --git a/core/src/main/java/com/graphhopper/util/Downloader.java b/core/src/main/java/com/graphhopper/util/Downloader.java
index 297a917ccb..99edb61a61 100644
--- a/core/src/main/java/com/graphhopper/util/Downloader.java
+++ b/core/src/main/java/com/graphhopper/util/Downloader.java
@@ -65,17 +65,27 @@ public Downloader setReferrer( String referrer )
 
     public InputStream fetch( HttpURLConnection conn ) throws IOException
     {
-        // create connection but before reading get the correct inputstream based on the compression
+        // create connection but before reading get the correct inputstream based on the compression and if error
         conn.connect();
-        String encoding = conn.getContentEncoding();
+
         InputStream is;
-        if (encoding != null && encoding.equalsIgnoreCase("gzip"))
-            is = new GZIPInputStream(conn.getInputStream());
-        else if (encoding != null && encoding.equalsIgnoreCase("deflate"))
-            is = new InflaterInputStream(conn.getInputStream(), new Inflater(true));
+        if (conn.getResponseCode() >= 400 && conn.getErrorStream() != null)
+            is = conn.getErrorStream();
         else
             is = conn.getInputStream();
 
+        // wrap
+        try
+        {
+            String encoding = conn.getContentEncoding();
+            if (encoding != null && encoding.equalsIgnoreCase("gzip"))
+                is = new GZIPInputStream(is);
+            else if (encoding != null && encoding.equalsIgnoreCase("deflate"))
+                is = new InflaterInputStream(is, new Inflater(true));
+        } catch (IOException ex)
+        {
+        }
+
         return is;
     }
 
diff --git a/core/src/test/java/com/graphhopper/GHResponseTest.java b/core/src/test/java/com/graphhopper/GHResponseTest.java
new file mode 100644
index 0000000000..d303593cd6
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/GHResponseTest.java
@@ -0,0 +1,11 @@
+package com.graphhopper;
+
+import junit.framework.TestCase;
+
+public class GHResponseTest extends TestCase
+{
+    public void testToString() throws Exception
+    {
+        assertEquals("nodes:0; ", new GHResponse().toString());
+    }
+}
\ No newline at end of file
diff --git a/docs/web/api-doc.md b/docs/web/api-doc.md
index f8a190dc4e..c582ad1fa2 100644
--- a/docs/web/api-doc.md
+++ b/docs/web/api-doc.md
@@ -147,13 +147,11 @@ import_date         | [optional] The date time at which the OSM import was done
 prepare_date        | [optional] The date time at which the preparation (contraction hierarchies) was done. If nothing was done this is empty
 supported_vehicles  | [deprecated] An array of strings for all supported vehicles
 
-### Output if expected error(s) while routing:
+### Error Output
 ```json
 {
-  "info": {"errors": [{
-    "details": "java.lang.IllegalArgumentException",
-    "message": "Cannot find point 2: 2248.224673, 3.867187"
-  }]}
+  "message": "Cannot find point 2: 2248.224673, 3.867187",
+  "hints": [{"message": "something", ...}]
 }
 ```
 
@@ -162,9 +160,8 @@ indicate a bug in the routing engine and is expected to a certain degree if too
 
 JSON path/attribute    | Description
 :----------------------|:------------
-info.errors            | A list of error messages
-info.errors[0].details | E.g. to see the underlying exception, if any
-info.errors[0].message | Not intended to be displayed to the user as it is currently not translated
+message                | Not intended to be displayed to the user as it is not translated
+hints                  | An optional list of details regarding the error message e.g. `[{"message": "first error message in hints"}]`
 
 
 ### HTTP Error codes
diff --git a/web/src/main/java/com/graphhopper/http/GHBaseServlet.java b/web/src/main/java/com/graphhopper/http/GHBaseServlet.java
index 07fe5d9f38..9ca5a32c23 100644
--- a/web/src/main/java/com/graphhopper/http/GHBaseServlet.java
+++ b/web/src/main/java/com/graphhopper/http/GHBaseServlet.java
@@ -17,24 +17,27 @@
  */
 package com.graphhopper.http;
 
-import java.io.IOException;
-import javax.inject.Named;
-import javax.inject.Inject;
-import javax.servlet.http.HttpServlet;
-import javax.servlet.http.HttpServletRequest;
-import javax.servlet.http.HttpServletResponse;
 import org.json.JSONException;
 import org.json.JSONObject;
-import static javax.servlet.http.HttpServletResponse.*;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import javax.inject.Inject;
+import javax.inject.Named;
+import javax.servlet.http.HttpServlet;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+import java.io.IOException;
+
+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;
+import static javax.servlet.http.HttpServletResponse.SC_OK;
+
 /**
  * @author Peter Karich
  */
 public class GHBaseServlet extends HttpServlet
 {
-    protected Logger logger = LoggerFactory.getLogger(getClass());
+    protected static Logger logger = LoggerFactory.getLogger(GHBaseServlet.class);
     @Inject
     @Named("jsonpAllowed")
     private boolean jsonpAllowed;
@@ -49,40 +52,53 @@ protected void writeJson( HttpServletRequest req, HttpServletResponse res, JSONO
             res.setContentType("application/javascript");
             if (!jsonpAllowed)
             {
-                res.sendError(SC_BAD_REQUEST, "Server is not configured to allow jsonp!");
+                writeError(res, SC_BAD_REQUEST, "Server is not configured to allow jsonp!");
                 return;
             }
 
             String callbackName = getParam(req, "callback", null);
             if (callbackName == null)
             {
-                res.sendError(SC_BAD_REQUEST, "No callback provided, necessary if type=jsonp");
+                writeError(res, SC_BAD_REQUEST, "No callback provided, necessary if type=jsonp");
                 return;
             }
 
             if (debug)
-            {
                 writeResponse(res, callbackName + "(" + json.toString(2) + ")");
-            } else
-            {
+            else
                 writeResponse(res, callbackName + "(" + json.toString() + ")");
-            }
+
         } else
         {
             res.setContentType("application/json");
             if (debug)
-            {
                 writeResponse(res, json.toString(2));
-            } else
-            {
+            else
                 writeResponse(res, json.toString());
-            }
         }
     }
 
-    void returnError( HttpServletResponse res, String errorMessage ) throws IOException
+    protected void writeError( HttpServletResponse res, int code, String message )
     {
-        res.sendError(SC_BAD_REQUEST, errorMessage);
+        JSONObject json = new JSONObject();
+        json.put("message", message);
+        writeJsonError(res, code, json);
+    }
+
+    protected void writeJsonError( HttpServletResponse res, int code, JSONObject json )
+    {
+        try
+        {
+            // no type parameter check here as jsonp does not work if an error
+            // also no debug parameter yet
+            res.setContentType("application/json");
+            res.setCharacterEncoding("UTF-8");
+            res.setStatus(code);
+            res.getWriter().append(json.toString(2));
+        } catch (IOException ex)
+        {
+            logger.error("Cannot write error " + ex.getMessage());
+        }
     }
 
     protected String getParam( HttpServletRequest req, String string, String _default )
@@ -137,17 +153,6 @@ protected double getDoubleParam( HttpServletRequest req, String string, double _
         }
     }
 
-    public void writeError( HttpServletResponse res, int code, String str )
-    {
-        try
-        {
-            res.sendError(code, str);
-        } catch (IOException ex)
-        {
-            logger.error("Cannot write error " + code + " message:" + str, ex);
-        }
-    }
-
     public void writeResponse( HttpServletResponse res, String str )
     {
         try
diff --git a/web/src/main/java/com/graphhopper/http/GHErrorHandler.java b/web/src/main/java/com/graphhopper/http/GHErrorHandler.java
new file mode 100644
index 0000000000..907117a607
--- /dev/null
+++ b/web/src/main/java/com/graphhopper/http/GHErrorHandler.java
@@ -0,0 +1,51 @@
+/*
+ *  Licensed to GraphHopper and Peter Karich under one or more contributor
+ *  license agreements. See the NOTICE file distributed with this work for
+ *  additional information regarding copyright ownership.
+ *
+ *  GraphHopper licenses this file to you under the Apache License,
+ *  Version 2.0 (the "License"); you may not use this file except in
+ *  compliance with the License. You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package com.graphhopper.http;
+
+import java.io.IOException;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+import static javax.servlet.http.HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
+import org.eclipse.jetty.server.Request;
+import org.eclipse.jetty.server.handler.ErrorHandler;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * @author Peter Karich
+ */
+public class GHErrorHandler extends ErrorHandler
+{
+    private static final long serialVersionUID = 1L;
+    private final Logger logger = LoggerFactory.getLogger(GHErrorHandler.class);
+
+    @Override
+    public void handle( String str, Request req, HttpServletRequest httpReq, HttpServletResponse httpRes ) throws IOException
+    {
+        Throwable throwable = (Throwable) httpReq.getAttribute("javax.servlet.error.exception");
+        if (throwable != null)
+        {
+            String message = throwable.getMessage();
+            logger.error(message, throwable);
+        } else
+            logger.error("Internal error, throwable not known!");
+
+        // you can't call sendError( 500, "Server Error" ) without triggering Jetty's DefaultErrorHandler
+        httpRes.setStatus(SC_INTERNAL_SERVER_ERROR);
+    }
+}
diff --git a/web/src/main/java/com/graphhopper/http/GHServer.java b/web/src/main/java/com/graphhopper/http/GHServer.java
index 4a749c50ad..c3ceda83aa 100644
--- a/web/src/main/java/com/graphhopper/http/GHServer.java
+++ b/web/src/main/java/com/graphhopper/http/GHServer.java
@@ -23,12 +23,14 @@
 import com.google.inject.Module;
 import com.google.inject.servlet.GuiceFilter;
 import com.graphhopper.util.CmdArgs;
-import java.net.InetSocketAddress;
+
+
 import org.eclipse.jetty.server.Server;
 import org.eclipse.jetty.servlet.ServletHolder;
 
 import java.util.EnumSet;
 import javax.servlet.DispatcherType;
+
 import org.eclipse.jetty.server.Handler;
 import org.eclipse.jetty.server.handler.HandlerList;
 import org.eclipse.jetty.server.handler.ResourceHandler;
@@ -76,6 +78,7 @@ public void start( Injector injector ) throws Exception
         server = new Server();
         // getSessionHandler and getSecurityHandler should always return null
         ServletContextHandler servHandler = new ServletContextHandler(ServletContextHandler.NO_SECURITY | ServletContextHandler.NO_SESSIONS);
+        servHandler.setErrorHandler(new GHErrorHandler());
         servHandler.setContextPath("/");
 
         servHandler.addServlet(new ServletHolder(new InvalidRequestServlet()), "/*");
diff --git a/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java b/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
index 3c30178ff5..2a27a6f1b7 100644
--- a/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
+++ b/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
@@ -18,37 +18,41 @@
 package com.graphhopper.http;
 
 import com.graphhopper.GHRequest;
-import com.graphhopper.GraphHopper;
 import com.graphhopper.GHResponse;
+import com.graphhopper.GraphHopper;
 import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.routing.util.WeightingMap;
-import com.graphhopper.util.*;
 import com.graphhopper.util.Helper;
+import com.graphhopper.util.InstructionList;
+import com.graphhopper.util.PointList;
+import com.graphhopper.util.StopWatch;
 import com.graphhopper.util.shapes.BBox;
 import com.graphhopper.util.shapes.GHPoint;
-import java.io.IOException;
-import java.io.StringWriter;
-import java.util.*;
-import java.util.Map.Entry;
+import org.json.JSONObject;
+import org.w3c.dom.Document;
+import org.w3c.dom.Element;
+
 import javax.inject.Inject;
 import javax.servlet.ServletException;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
-import static javax.servlet.http.HttpServletResponse.*;
 import javax.xml.parsers.DocumentBuilder;
 import javax.xml.parsers.DocumentBuilderFactory;
 import javax.xml.transform.Transformer;
 import javax.xml.transform.TransformerFactory;
 import javax.xml.transform.dom.DOMSource;
 import javax.xml.transform.stream.StreamResult;
-import org.json.JSONObject;
-import org.w3c.dom.Document;
-import org.w3c.dom.Element;
+import java.io.IOException;
+import java.io.StringWriter;
+import java.util.*;
+import java.util.Map.Entry;
+
+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;
 
 /**
- * Servlet to use GraphHopper in a remote application (mobile or browser). Attention: If type is
- * json it returns the points in GeoJson format (longitude,latitude) unlike the format "lat,lon"
- * used otherwise.
+ * Servlet to use GraphHopper in a remote client application like mobile or browser. Note: If type
+ * is json it returns the points in GeoJson format (longitude,latitude) unlike the format "lat,lon"
+ * used otherwise. See the full API response format in docs/web/api-doc.md
  * <p/>
  * @author Peter Karich
  */
@@ -58,22 +62,7 @@
     private GraphHopper hopper;
 
     @Override
-    public void doGet( HttpServletRequest req, HttpServletResponse res ) throws ServletException, IOException
-    {
-        try
-        {
-            writePath(req, res);
-        } catch (IllegalArgumentException ex)
-        {
-            writeError(res, SC_BAD_REQUEST, ex.getMessage());
-        } catch (Exception ex)
-        {
-            logger.error("Error while executing request: " + req.getQueryString(), ex);
-            writeError(res, SC_INTERNAL_SERVER_ERROR, "Problem occured:" + ex.getMessage());
-        }
-    }
-
-    void writePath( HttpServletRequest httpReq, HttpServletResponse res ) throws Exception
+    public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes ) throws ServletException, IOException
     {
         List<GHPoint> infoPoints = getPoints(httpReq, "point");
 
@@ -130,21 +119,29 @@ void writePath( HttpServletRequest httpReq, HttpServletResponse res ) throws Exc
 
         if (writeGPX)
         {
-            writeResponse(res, createGPXString(httpReq, res, ghRsp));
+            String xml = createGPXString(httpReq, httpRes, ghRsp);
+            if (ghRsp.hasErrors())
+            {
+                httpRes.setStatus(SC_BAD_REQUEST);
+                httpRes.getWriter().append(xml);
+            } else
+                writeResponse(httpRes, xml);
         } else
         {
-            Map<String, Object> map = createJson(ghRsp,
-                    calcPoints, pointsEncoded, enableElevation, enableInstructions);
+            Map<String, Object> map = createJson(ghRsp, calcPoints, pointsEncoded, enableElevation, enableInstructions);
             Object infoMap = map.get("info");
             if (infoMap != null)
                 ((Map) infoMap).put("took", Math.round(took * 1000));
 
-            writeJson(httpReq, res, new JSONObject(map));
+            if (ghRsp.hasErrors())
+            {
+                writeJsonError(httpRes, SC_BAD_REQUEST, new JSONObject(map));
+            } else
+                writeJson(httpReq, httpRes, new JSONObject(map));
         }
     }
 
     protected String createGPXString( HttpServletRequest req, HttpServletResponse res, GHResponse rsp )
-            throws Exception
     {
         boolean includeElevation = getBooleanParam(req, "elevation", false);
         res.setCharacterEncoding("UTF-8");
@@ -158,49 +155,58 @@ protected String createGPXString( HttpServletRequest req, HttpServletResponse re
             return rsp.getInstructions().createGPX(trackName, time, includeElevation);
     }
 
-    String errorsToXML( List<Throwable> list ) throws Exception
+    String errorsToXML( List<Throwable> list )
     {
-        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
-        DocumentBuilder builder = factory.newDocumentBuilder();
-        Document doc = builder.newDocument();
-        Element gpxElement = doc.createElement("gpx");
-        gpxElement.setAttribute("creator", "GraphHopper");
-        gpxElement.setAttribute("version", "1.1");
-        doc.appendChild(gpxElement);
+        try
+        {
+            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
+            DocumentBuilder builder = factory.newDocumentBuilder();
+            Document doc = builder.newDocument();
+            Element gpxElement = doc.createElement("gpx");
+            gpxElement.setAttribute("creator", "GraphHopper");
+            gpxElement.setAttribute("version", "1.1");
+            doc.appendChild(gpxElement);
+
+            Element mdElement = doc.createElement("metadata");
+            gpxElement.appendChild(mdElement);
 
-        Element mdElement = doc.createElement("metadata");
-        gpxElement.appendChild(mdElement);
+            Element extensionsElement = doc.createElement("extensions");
+            mdElement.appendChild(extensionsElement);
 
-        Element errorsElement = doc.createElement("extensions");
-        mdElement.appendChild(errorsElement);
+            Element messageElement = doc.createElement("message");
+            extensionsElement.appendChild(messageElement);
+            messageElement.setTextContent(list.get(0).getMessage());
 
-        for (Throwable t : list)
+            Element hintsElement = doc.createElement("hints");
+            extensionsElement.appendChild(hintsElement);
+
+            for (Throwable t : list)
+            {
+                Element error = doc.createElement("error");
+                hintsElement.appendChild(error);
+                error.setAttribute("message", t.getMessage());
+                error.setAttribute("details", t.getClass().getName());
+            }
+            TransformerFactory transformerFactory = TransformerFactory.newInstance();
+            Transformer transformer = transformerFactory.newTransformer();
+            StringWriter writer = new StringWriter();
+            transformer.transform(new DOMSource(doc), new StreamResult(writer));
+            return writer.toString();
+        } catch (Exception ex)
         {
-            Element error = doc.createElement("error");
-            errorsElement.appendChild(error);
-            error.setAttribute("message", t.getMessage());
-            error.setAttribute("details", t.getClass().getName());
+            throw new RuntimeException(ex);
         }
-        TransformerFactory transformerFactory = TransformerFactory.newInstance();
-        Transformer transformer = transformerFactory.newTransformer();
-        StringWriter writer = new StringWriter();
-        transformer.transform(new DOMSource(doc), new StreamResult(writer));
-        return writer.toString();
     }
 
     protected Map<String, Object> createJson( GHResponse rsp,
-            boolean calcPoints,
-            boolean pointsEncoded,
-            boolean includeElevation,
-            boolean enableInstructions )
+                                              boolean calcPoints, boolean pointsEncoded,
+                                              boolean includeElevation, boolean enableInstructions )
     {
         Map<String, Object> json = new HashMap<String, Object>();
-        Map<String, Object> jsonInfo = new HashMap<String, Object>();
-        json.put("info", jsonInfo);
-        jsonInfo.put("copyrights", Arrays.asList("GraphHopper", "OpenStreetMap contributors"));
 
         if (rsp.hasErrors())
         {
+            json.put("message", rsp.getErrors().get(0).getMessage());
             List<Map<String, String>> list = new ArrayList<Map<String, String>>();
             for (Throwable t : rsp.getErrors())
             {
@@ -209,9 +215,12 @@ String errorsToXML( List<Throwable> list ) throws Exception
                 map.put("details", t.getClass().getName());
                 list.add(map);
             }
-            jsonInfo.put("errors", list);
+            json.put("hints", list);
         } else
         {
+            Map<String, Object> jsonInfo = new HashMap<String, Object>();
+            json.put("info", jsonInfo);
+            jsonInfo.put("copyrights", Arrays.asList("GraphHopper", "OpenStreetMap contributors"));
             Map<String, Object> jsonPath = new HashMap<String, Object>();
             jsonPath.put("distance", Helper.round(rsp.getDistance(), 3));
             jsonPath.put("weight", Helper.round6(rsp.getDistance()));
diff --git a/web/src/main/java/com/graphhopper/http/GraphHopperWeb.java b/web/src/main/java/com/graphhopper/http/GraphHopperWeb.java
index 5d0e60d8e0..f47267d105 100644
--- a/web/src/main/java/com/graphhopper/http/GraphHopperWeb.java
+++ b/web/src/main/java/com/graphhopper/http/GraphHopperWeb.java
@@ -129,25 +129,17 @@ public GHResponse route( GHRequest request )
             String str = downloader.downloadAsString(url);
             JSONObject json = new JSONObject(str);
 
-            if (json.has("message"))
-                throw new RuntimeException(json.getString("message") + ", code:" + json.getInt("code"));
-
             GHResponse res = new GHResponse();
-
-            if (json.getJSONObject("info").has("errors"))
-            {
-                JSONArray errors = json.getJSONObject("info").getJSONArray("errors");
-                readErrors(res.getErrors(), errors);
+            readErrors(res.getErrors(), json);
+            if (res.hasErrors())
                 return res;
 
-            } else
-            {
-                took = json.getJSONObject("info").getDouble("took");
-                JSONArray paths = json.getJSONArray("paths");
-                JSONObject firstPath = paths.getJSONObject(0);
-                readPath(res, firstPath, tmpCalcPoints, tmpInstructions, tmpElevation);
-                return res;
-            }
+            took = json.getJSONObject("info").getDouble("took");
+            JSONArray paths = json.getJSONArray("paths");
+            JSONObject firstPath = paths.getJSONObject(0);
+            readPath(res, firstPath, tmpCalcPoints, tmpInstructions, tmpElevation);
+            return res;
+
         } catch (Exception ex)
         {
             throw new RuntimeException("Problem while fetching path " + request.getPoints() + ": " + ex.getMessage(), ex);
@@ -229,37 +221,57 @@ public static void readPath( GHResponse res, JSONObject firstPath,
         res.setDistance(distance).setTime(time);
     }
 
-    public static void readErrors( List<Throwable> errors, JSONArray errorJson )
+    public static void readErrors( List<Throwable> errors, JSONObject json )
     {
+        JSONArray errorJson;
+
+        if (json.has("message"))
+        {
+            if (json.has("hints"))
+            {
+                errorJson = json.getJSONArray("hints");
+            } else
+            {
+                // should not happen
+                errors.add(new RuntimeException(json.getString("message")));
+                return;
+            }
+        } else if (json.has("info"))
+        {
+            // deprecated JSON format for errors, remove in 0.5 release
+            JSONObject jsonInfo = json.getJSONObject("info");
+            if (jsonInfo.has("errors"))
+                errorJson = jsonInfo.getJSONArray("errors");
+            else
+                return;
+
+        } else
+            return;
+
         for (int i = 0; i < errorJson.length(); i++)
         {
             JSONObject error = errorJson.getJSONObject(i);
             String exClass = "";
             if (error.has("details"))
-            {
                 exClass = error.getString("details");
-            }
+
             String exMessage = error.getString("message");
 
             if (exClass.equals(UnsupportedOperationException.class.getName()))
-            {
                 errors.add(new UnsupportedOperationException(exMessage));
-            } else if (exClass.equals(IllegalStateException.class.getName()))
-            {
+            else if (exClass.equals(IllegalStateException.class.getName()))
                 errors.add(new IllegalStateException(exMessage));
-            } else if (exClass.equals(RuntimeException.class.getName()))
-            {
+            else if (exClass.equals(RuntimeException.class.getName()))
                 errors.add(new RuntimeException(exMessage));
-            } else if (exClass.equals(IllegalArgumentException.class.getName()))
-            {
+            else if (exClass.equals(IllegalArgumentException.class.getName()))
                 errors.add(new IllegalArgumentException(exMessage));
-            } else if (exClass.isEmpty())
-            {
-                errors.add(new Exception(exMessage));
-            } else
-            {
-                errors.add(new Exception(exClass + " " + exMessage));
-            }
+            else if (exClass.isEmpty())
+                errors.add(new RuntimeException(exMessage));
+            else
+                errors.add(new RuntimeException(exClass + " " + exMessage));
         }
+
+        if (json.has("message") && errors.isEmpty())
+            errors.add(new RuntimeException(json.getString("message")));
     }
 }
diff --git a/web/src/main/java/com/graphhopper/http/I18NServlet.java b/web/src/main/java/com/graphhopper/http/I18NServlet.java
index 833246508a..f3fff81f3c 100644
--- a/web/src/main/java/com/graphhopper/http/I18NServlet.java
+++ b/web/src/main/java/com/graphhopper/http/I18NServlet.java
@@ -40,33 +40,26 @@
     @Override
     public void doGet( HttpServletRequest req, HttpServletResponse res ) throws ServletException, IOException
     {
-        try
-        {
-            String locale = "";
-            String path = req.getPathInfo();
-            if (!Helper.isEmpty(path) && path.startsWith("/"))
-                locale = path.substring(1);
-
-            if (Helper.isEmpty(locale))
-            {
-                // fall back to language specified in header e.g. via browser settings
-                String acceptLang = req.getHeader("Accept-Language");
-                if (!Helper.isEmpty(acceptLang))
-                    locale = acceptLang.split(",")[0];
-            }
-
-            Translation tr = map.get(locale);
-            JSONObject json = new JSONObject();
-            if (tr != null && !Locale.US.equals(tr.getLocale()))
-                json.put("default", tr.asMap());
+        String locale = "";
+        String path = req.getPathInfo();
+        if (!Helper.isEmpty(path) && path.startsWith("/"))
+            locale = path.substring(1);
 
-            json.put("locale", locale.toString());
-            json.put("en", map.get("en").asMap());
-            writeJson(req, res, json);
-        } catch (Exception ex)
+        if (Helper.isEmpty(locale))
         {
-            logger.error("Error while executing request: " + req.getQueryString(), ex);
-            writeError(res, SC_INTERNAL_SERVER_ERROR, "Problem occured:" + ex.getMessage());
+            // fall back to language specified in header e.g. via browser settings
+            String acceptLang = req.getHeader("Accept-Language");
+            if (!Helper.isEmpty(acceptLang))
+                locale = acceptLang.split(",")[0];
         }
+
+        Translation tr = map.get(locale);
+        JSONObject json = new JSONObject();
+        if (tr != null && !Locale.US.equals(tr.getLocale()))
+            json.put("default", tr.asMap());
+
+        json.put("locale", locale.toString());
+        json.put("en", map.get("en").asMap());
+        writeJson(req, res, json);
     }
 }
diff --git a/web/src/main/java/com/graphhopper/http/InfoServlet.java b/web/src/main/java/com/graphhopper/http/InfoServlet.java
index 824d5c3ee1..1491e91928 100644
--- a/web/src/main/java/com/graphhopper/http/InfoServlet.java
+++ b/web/src/main/java/com/graphhopper/http/InfoServlet.java
@@ -43,21 +43,6 @@
 
     @Override
     public void doGet( HttpServletRequest req, HttpServletResponse res ) throws ServletException, IOException
-    {
-        try
-        {
-            writeInfos(req, res);
-        } catch (IllegalArgumentException ex)
-        {
-            writeError(res, SC_BAD_REQUEST, ex.getMessage());
-        } catch (Exception ex)
-        {
-            logger.error("Error while executing request: " + req.getQueryString(), ex);
-            writeError(res, SC_INTERNAL_SERVER_ERROR, "Problem occured:" + ex.getMessage());
-        }
-    }
-
-    void writeInfos( HttpServletRequest req, HttpServletResponse res ) throws Exception
     {
         BBox bb = hopper.getGraph().getBounds();
         List<Double> list = new ArrayList<Double>(4);
diff --git a/web/src/main/java/com/graphhopper/http/InvalidRequestServlet.java b/web/src/main/java/com/graphhopper/http/InvalidRequestServlet.java
index b320b38854..8de227530b 100644
--- a/web/src/main/java/com/graphhopper/http/InvalidRequestServlet.java
+++ b/web/src/main/java/com/graphhopper/http/InvalidRequestServlet.java
@@ -15,22 +15,20 @@
  */
 package com.graphhopper.http;
 
+import org.json.JSONObject;
+
 import javax.servlet.ServletException;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 import java.io.IOException;
-import org.json.JSONObject;
 
 public class InvalidRequestServlet extends GHBaseServlet
 {
     @Override
     protected void service( HttpServletRequest req, HttpServletResponse res ) throws ServletException, IOException
     {
-        res.setStatus(HttpServletResponse.SC_NOT_FOUND);
-        res.setContentType("text/plain");
-        res.setContentType("UTF-8");
         JSONObject json = new JSONObject();
-        json.put("error_code", "404");
-        writeJson(req, res, json);
+        json.put("message", "Not found");
+        writeJsonError(res, HttpServletResponse.SC_NOT_FOUND, json);
     }
 }
diff --git a/web/src/main/java/com/graphhopper/http/NearestServlet.java b/web/src/main/java/com/graphhopper/http/NearestServlet.java
index 0fcb4eaa3a..5696fce229 100644
--- a/web/src/main/java/com/graphhopper/http/NearestServlet.java
+++ b/web/src/main/java/com/graphhopper/http/NearestServlet.java
@@ -21,18 +21,18 @@
 import com.graphhopper.routing.util.EdgeFilter;
 import com.graphhopper.storage.index.LocationIndex;
 import com.graphhopper.storage.index.QueryResult;
-import com.graphhopper.util.DistanceCalcEarth;
+import com.graphhopper.util.DistanceCalc;
+import com.graphhopper.util.Helper;
 import com.graphhopper.util.shapes.GHPoint;
 import com.graphhopper.util.shapes.GHPoint3D;
-import java.io.IOException;
+import org.json.JSONArray;
+import org.json.JSONObject;
+
 import javax.inject.Inject;
 import javax.servlet.ServletException;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
-import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;
-import static javax.servlet.http.HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
-import org.json.JSONArray;
-import org.json.JSONObject;
+import java.io.IOException;
 
 /**
  * @author svantulden
@@ -41,65 +41,46 @@
 {
     @Inject
     private GraphHopper hopper;
+    private final DistanceCalc calc = Helper.DIST_EARTH;
 
     @Override
-    public void doGet( HttpServletRequest req, HttpServletResponse res ) throws ServletException, IOException
+    public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes ) throws ServletException, IOException
     {
-        try
-        {
-            writeNearest(req, res);
-        } catch (IllegalArgumentException ex)
-        {
-            writeError(res, SC_BAD_REQUEST, ex.getMessage());
-        } catch (Exception ex)
-        {
-            logger.error("Error while executing request: " + req.getQueryString(), ex);
-            writeError(res, SC_INTERNAL_SERVER_ERROR, "Problem occured:" + ex.getMessage());
-        }
-    }
+        String pointStr = getParam(httpReq, "point", null);
+        boolean enabledElevation = getBooleanParam(httpReq, "elevation", false);
 
-    void writeNearest( HttpServletRequest req, HttpServletResponse res ) throws Exception
-    {
-        String pointStr = getParam(req, "point", null);
-        boolean enableElevation = getBooleanParam(req, "elevation", false);
-        
         JSONObject result = new JSONObject();
-        if (pointStr != null && !pointStr.equalsIgnoreCase("")) {
+        if (pointStr != null && !pointStr.equalsIgnoreCase(""))
+        {
             GHPoint place = GHPoint.parse(pointStr);
-            
             LocationIndex index = hopper.getLocationIndex();
-            QueryResult qr = index.findClosest( place.lat, place.lon, EdgeFilter.ALL_EDGES );
-            
-            GHPoint3D snappedPoint = null;
-            try {
-                snappedPoint = qr.getSnappedPoint();
-            } catch (IllegalStateException ex) {
+            QueryResult qr = index.findClosest(place.lat, place.lon, EdgeFilter.ALL_EDGES);
+
+            if (!qr.isValid())
+            {
                 result.put("error", "Nearest point cannot be found!");
-            }
-            
-            if (snappedPoint != null) {
+            } else
+            {
+                GHPoint3D snappedPoint = qr.getSnappedPoint();
                 result.put("type", "Point");
-                
+
                 JSONArray coord = new JSONArray();
                 coord.put(snappedPoint.lon);
                 coord.put(snappedPoint.lat);
-                
-                if (hopper.hasElevation() && enableElevation) {
+
+                if (hopper.hasElevation() && enabledElevation)
                     coord.put(snappedPoint.ele);
-                }
 
                 result.put("coordinates", coord);
-                
-                DistanceCalcEarth calc = new DistanceCalcEarth();
-                double distance = calc.calcDist(place.lat, place.lon, snappedPoint.lat, snappedPoint.lon);
-                
+
                 // Distance from input to snapped point in meters
-                result.put("distance", distance);
+                result.put("distance", calc.calcDist(place.lat, place.lon, snappedPoint.lat, snappedPoint.lon));
             }
-        } else {
+        } else
+        {
             result.put("error", "No lat/lon specified!");
-        }  
-        
-        writeJson(req, res, result);
+        }
+
+        writeJson(httpReq, httpRes, result);
     }
 }
diff --git a/web/src/main/webapp/js/ghrequest.js b/web/src/main/webapp/js/ghrequest.js
index 41217c50de..9606555e93 100644
--- a/web/src/main/webapp/js/ghrequest.js
+++ b/web/src/main/webapp/js/ghrequest.js
@@ -566,22 +566,20 @@ GHRequest.prototype.doRequest = function (url, callback) {
             // problematic: this callback is not invoked when using JSONP!
             // http://stackoverflow.com/questions/19035557/jsonp-request-error-handling
             var msg = "API did not respond! ";
+            var json;
+
             if (err && err.responseText && err.responseText.indexOf('{') >= 0) {
-                var jsonError = JSON.parse(err.responseText);
-                msg += jsonError.message;
-            } else if (err && err.statusText && err.statusText !== "OK")
+                json = JSON.parse(err.responseText);
+            } else if (err && err.statusText && err.statusText !== "OK") {
                 msg += err.statusText;
-
+                var details = "Error for " + url;
+                json = {
+                    message: msg,
+                    hints: [{"message": msg, "details": details}]
+                };
+            }
             log(msg + " " + JSON.stringify(err));
-            var details = "Error for " + url;
-            var json = {
-                "info": {
-                    "errors": [{
-                            "message": msg,
-                            "details": details
-                        }]
-                }
-            };
+
             callback(json);
         },
         type: "GET",
diff --git a/web/src/main/webapp/js/main-bng.js b/web/src/main/webapp/js/main-bng.js
index 38ae1f2312..67f9d23219 100644
--- a/web/src/main/webapp/js/main-bng.js
+++ b/web/src/main/webapp/js/main-bng.js
@@ -30,25 +30,25 @@ var defaultTranslationMap = null;
 var enTranslationMap = null;
 var routeSegmentPopup = null;
 var elevationControl = null;
-var activeLayer = 'Lyrk';
+var activeLayer = '';
 var i18nIsInitialized;
 
 var iconFrom = L.icon({
-    iconUrl: 'img/marker-icon-green.png',
+    iconUrl: './img/marker-icon-green.png',
     shadowSize: [50, 64],
     shadowAnchor: [4, 62],
     iconAnchor: [12, 40]
 });
 
 var iconTo = L.icon({
-    iconUrl: 'img/marker-icon-red.png',
+    iconUrl: './img/marker-icon-red.png',
     shadowSize: [50, 64],
     shadowAnchor: [4, 62],
     iconAnchor: [12, 40]
 });
 
 var iconInt = L.icon({
-    iconUrl: 'img/marker-icon-blue.png',
+    iconUrl: './img/marker-icon-blue.png',
     shadowSize: [50, 64],
     shadowAnchor: [4, 62],
     iconAnchor: [12, 40]
@@ -65,7 +65,7 @@ $(document).ready(function (e) {
     if (History.enabled) {
         History.Adapter.bind(window, 'statechange', function () {
             // No need for workaround?
-            // Chrome and Safari always emit a popstate event on page load, but Firefox doesnt
+            // Chrome and Safari always emit a popstate event on page load, but Firefox doesn’t
             // https://github.com/defunkt/jquery-pjax/issues/143#issuecomment-6194330
 
             var state = History.getState();
@@ -244,13 +244,15 @@ function checkInput() {
     // properly unbind previously click handlers
     $("#locationpoints .pointDelete").off();
 
-    // console.log("#### new checkInput #### ");
+    // console.log("## new checkInput");
     for (var i = 0; i < len; i++) {
         var div = $('#locationpoints > div.pointDiv').eq(i);
+        // console.log(div.length + ", index:" + i + ", len:" + len);
         if (div.length === 0) {
             $('#locationpoints > div.pointAdd').before(nanoTemplate(template, {id: i}));
             div = $('#locationpoints > div.pointDiv').eq(i);
         }
+
         var toFrom = getToFrom(i);
         div.data("index", i);
         div.find(".pointFlag").attr("src",
@@ -436,10 +438,19 @@ function getTopLeftCorners() {
         subdomains: ['otile1', 'otile2', 'otile3', 'otile4']
     });
 
-    var openMapsSurfer = L.tileLayer('http://openmapsurfer.uni-hd.de/tiles/roads/x={x}&y={y}&z={z}', {
+    var openMapSurfer = L.tileLayer('http://openmapsurfer.uni-hd.de/tiles/roads/x={x}&y={y}&z={z}', {
         attribution: osmAttr + ', <a href="http://openmapsurfer.uni-hd.de/contact.html">GIScience Heidelberg</a>'
     });
 
+    // not an option as too fast over limit
+//    var mapbox= L.tileLayer('https://{s}.tiles.mapbox.com/v4/peterk.map-vkt0kusv/{z}/{x}/{y}.png?access_token=pk.eyJ1IjoicGV0ZXJrIiwiYSI6IkdFc2FJd2MifQ.YUd7dS_gOpT3xrQnB8_K-w', {
+//        attribution: osmAttr + ', <a href="https://www.mapbox.com/about/maps/">&copy; MapBox</a>'
+//    });
+
+    var sorbianLang = L.tileLayer('http://map.dgpsonline.eu/osmsb/{z}/{x}/{y}.png', {
+        attribution: osmAttr + ', <a href="http://www.alberding.eu/">&copy; Alberding GmbH, CC-BY-SA</a>'
+    });
+
     var thunderTransport = L.tileLayer('http://{s}.tile.thunderforest.com/transport/{z}/{x}/{y}.png', {
         attribution: osmAttr + ', <a href="http://www.thunderforest.com/transport/" target="_blank">Thunderforest Transport</a>',
         subdomains: ['a', 'b', 'c']
@@ -491,7 +502,7 @@ function getTopLeftCorners() {
     	crs: crs,
         layers: [defaultLayer],
         contextmenu: true,
-        contextmenuWidth: 140,
+        contextmenuWidth: 145,
         contextmenuItems: [{
                 separator: true,
                 index: 3,
@@ -559,8 +570,12 @@ function getTopLeftCorners() {
     L.control.layers(baseMaps/*, overlays*/).addTo(map);
 
     map.on('baselayerchange', function (a) {
-        if (a.name)
+        if (a.name) {
             activeLayer = a.name;
+            $("#export-link a").attr('href', function (i, v) {
+                return v.replace(/(layer=)([\w\s]+)/, '$1' + activeLayer);
+            });
+        }
     });
 
     L.control.scale().addTo(map);
@@ -1015,12 +1030,13 @@ function routeLatLng(request, doQuery) {
     descriptionDiv.html('<img src="img/indicator.gif"/> Search Route ...');
     request.doRequest(urlForAPI, function (json) {
         descriptionDiv.html("");
-        if (json.info.errors) {
-            var tmpErrors = json.info.errors;
+        if (json.message) {
+            var tmpErrors = json.message;
             log(tmpErrors);
-            for (var m = 0; m < tmpErrors.length; m++) {
-                descriptionDiv.append("<div class='error'>" + tmpErrors[m].message + "</div>");
-            }
+            if (json.hints)
+                for (var m = 0; m < json.hints.length; m++) {
+                    descriptionDiv.append("<div class='error'>" + json.hints[m].message + "</div>");
+                }
             return;
         }
         var path = json.paths[0];
@@ -1531,8 +1547,8 @@ function setAutoCompleteList(index) {
             return val === undefined;
         },
         serviceUrl: function () {
-            // see http://graphhopper.com/#enterprise
-            return ghRequest.createGeocodeURL(host, index -1);
+            // see https://graphhopper.com/#directions-api
+            return ghRequest.createGeocodeURL(host, index - 1);
         },
         transformResult: function (response, originalQuery) {
             response.suggestions = [];
diff --git a/web/src/main/webapp/js/main.js b/web/src/main/webapp/js/main.js
index f483ad51d3..95d85b3208 100644
--- a/web/src/main/webapp/js/main.js
+++ b/web/src/main/webapp/js/main.js
@@ -318,12 +318,12 @@ function initMap(selectLayer) {
         attribution: osmAttr + ', <a href="https://geodienste.lyrk.de/">Lyrk</a>',
         subdomains: ['a', 'b', 'c']
     });
-        
+
     var omniscale = L.tileLayer.wms('https://maps.omniscale.net/v1/mapsgraph-bf48cc0b/tile', {
-            layers: 'osm',
+        layers: 'osm',
         attribution: osmAttr + ', &copy; <a href="http://maps.omniscale.com/">Omniscale</a>'
     });
-            
+
     var mapquest = L.tileLayer('http://{s}.mqcdn.com/tiles/1.0.0/osm/{z}/{x}/{y}.png', {
         attribution: osmAttr + ', <a href="http://open.mapquest.co.uk" target="_blank">MapQuest</a>',
         subdomains: ['otile1', 'otile2', 'otile3', 'otile4']
@@ -385,7 +385,7 @@ function initMap(selectLayer) {
 
     var baseMaps = {
         "Lyrk": lyrk,
-        "Omniscale" : omniscale,
+        "Omniscale": omniscale,
         "MapQuest": mapquest,
         "MapQuest Aerial": mapquestAerial,
         "Esri Aerial": esriAerial,
@@ -977,12 +977,13 @@ function routeLatLng(request, doQuery) {
     descriptionDiv.html('<img src="img/indicator.gif"/> Search Route ...');
     request.doRequest(urlForAPI, function (json) {
         descriptionDiv.html("");
-        if (json.info.errors) {
-            var tmpErrors = json.info.errors;
+        if (json.message) {
+            var tmpErrors = json.message;
             log(tmpErrors);
-            for (var m = 0; m < tmpErrors.length; m++) {
-                descriptionDiv.append("<div class='error'>" + tmpErrors[m].message + "</div>");
-            }
+            if (json.hints)
+                for (var m = 0; m < json.hints.length; m++) {
+                    descriptionDiv.append("<div class='error'>" + json.hints[m].message + "</div>");
+                }
             return;
         }
         var path = json.paths[0];
diff --git a/web/src/test/java/com/graphhopper/http/BaseServletTester.java b/web/src/test/java/com/graphhopper/http/BaseServletTester.java
index 2669c2e3e9..253da1b222 100644
--- a/web/src/test/java/com/graphhopper/http/BaseServletTester.java
+++ b/web/src/test/java/com/graphhopper/http/BaseServletTester.java
@@ -22,10 +22,15 @@
 import com.google.inject.Module;
 import com.graphhopper.util.CmdArgs;
 import com.graphhopper.util.Downloader;
+import com.graphhopper.util.Helper;
 import org.json.JSONObject;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import java.net.HttpURLConnection;
+
+import static org.junit.Assert.assertEquals;
+
 /**
  * @author Peter Karich
  */
@@ -100,14 +105,14 @@ protected String getTestRouteAPIUrl()
         String host = "localhost";
         return "http://" + host + ":" + port + "/route";
     }
-    
+
     protected String getTestNearestAPIUrl()
     {
         String host = "localhost";
         return "http://" + host + ":" + port + "/nearest";
     }
-    
-    protected JSONObject query( String query ) throws Exception
+
+    protected String queryString( String query, int code ) throws Exception
     {
         String resQuery = "";
         for (String q : query.split("\\&"))
@@ -121,10 +126,18 @@ protected JSONObject query( String query ) throws Exception
             resQuery += "&";
         }
         String url = getTestRouteAPIUrl() + "?" + resQuery;
-        Downloader downloader = new Downloader("web integration tester");
-        return new JSONObject(downloader.downloadAsString(url));
-    } 
-    
+        Downloader downloader = new Downloader("web integration tester").setTimeout(1000);
+        HttpURLConnection conn = downloader.createConnection(url);
+        conn.connect();
+        assertEquals(code, conn.getResponseCode());
+        return Helper.isToString(downloader.fetch(conn));
+    }
+
+    protected JSONObject query( String query, int code ) throws Exception
+    {
+        return new JSONObject(queryString(query, code));
+    }
+
     protected JSONObject nearestQuery( String query ) throws Exception
     {
         String resQuery = "";
@@ -141,5 +154,5 @@ protected JSONObject nearestQuery( String query ) throws Exception
         String url = getTestNearestAPIUrl() + "?" + resQuery;
         Downloader downloader = new Downloader("web integration tester");
         return new JSONObject(downloader.downloadAsString(url));
-    } 
+    }
 }
diff --git a/web/src/test/java/com/graphhopper/http/GraphHopperServletIT.java b/web/src/test/java/com/graphhopper/http/GraphHopperServletIT.java
index 140ef8bc42..638f07eab7 100644
--- a/web/src/test/java/com/graphhopper/http/GraphHopperServletIT.java
+++ b/web/src/test/java/com/graphhopper/http/GraphHopperServletIT.java
@@ -59,7 +59,7 @@ public void setUp()
     @Test
     public void testBasicQuery() throws Exception
     {
-        JSONObject json = query("point=42.554851,1.536198&point=42.510071,1.548128");
+        JSONObject json = query("point=42.554851,1.536198&point=42.510071,1.548128", 200);
         JSONObject infoJson = json.getJSONObject("info");
         assertFalse(infoJson.has("errors"));
         JSONObject path = json.getJSONArray("paths").getJSONObject(0);
@@ -71,7 +71,7 @@ public void testBasicQuery() throws Exception
     @Test
     public void testJsonRounding() throws Exception
     {
-        JSONObject json = query("point=42.554851234,1.536198&point=42.510071,1.548128&points_encoded=false");
+        JSONObject json = query("point=42.554851234,1.536198&point=42.510071,1.548128&points_encoded=false", 200);
         JSONObject cson = json.getJSONArray("paths").getJSONObject(0).getJSONObject("points");
         assertTrue("unexpected precision!", cson.toString().contains("[1.536374,42.554839]"));
     }
@@ -79,10 +79,10 @@ public void testJsonRounding() throws Exception
     @Test
     public void testFailIfElevationRequestedButNotIncluded() throws Exception
     {
-        JSONObject json = query("point=42.554851234,1.536198&point=42.510071,1.548128&points_encoded=false&elevation=true");
-        JSONObject infoJson = json.getJSONObject("info");
-        assertTrue(infoJson.has("errors"));
-        assertEquals("Elevation not supported!", infoJson.getJSONArray("errors").getJSONObject(0).getString("message"));
+        JSONObject json = query("point=42.554851234,1.536198&point=42.510071,1.548128&points_encoded=false&elevation=true", 400);
+        assertTrue(json.has("message"));
+        assertEquals("Elevation not supported!", json.get("message"));
+        assertEquals("Elevation not supported!", json.getJSONArray("hints").getJSONObject(0).getString("message"));
     }
 
     @Test
@@ -112,17 +112,14 @@ public void testGraphHopperWeb() throws Exception
     @Test
     public void testGraphHopperWebRealExceptions()
     {
-        GHResponse rsp;
-        Throwable ex;
-
         GraphHopperAPI hopper = new GraphHopperWeb();
         assertTrue(hopper.load(getTestRouteAPIUrl()));
 
         // IllegalStateException (Wrong Request)
-        rsp = hopper.route(new GHRequest());
+        GHResponse rsp = hopper.route(new GHRequest());
         assertFalse("Errors expected but not found.", rsp.getErrors().isEmpty());
 
-        ex = rsp.getErrors().get(0);
+        Throwable ex = rsp.getErrors().get(0);
         assertTrue("Wrong Exception found: " + ex.getClass().getName()
                 + ", IllegalStateException expected.", ex instanceof IllegalStateException);
 
@@ -146,4 +143,22 @@ public void testGraphHopperWebRealExceptions()
         // RuntimeException
         // Exception
     }
+
+    @Test
+    public void testGPX() throws Exception
+    {
+        String str = queryString("point=42.554851,1.536198&point=42.510071,1.548128&type=gpx", 200);
+        assertTrue(str.contains("<gh:distance>115.1</gh:distance>"));
+        assertTrue(str.contains("<trkpt lat=\"42.554839\" lon=\"1.536374\"><time>"));
+    }
+
+    @Test
+    public void testGPXWithError() throws Exception
+    {
+        String str = queryString("point=42.554851,1.536198&type=gpx", 400);
+        assertFalse(str, str.contains("<html>"));
+        assertFalse(str, str.contains("{"));
+        assertTrue("Expected error but was: " + str, str.contains("<message>At least 2 points has to be specified, but was:1</message>"));
+        assertTrue("Expected error but was: " + str, str.contains("<hints><error details=\"java"));
+    }
 }
diff --git a/web/src/test/java/com/graphhopper/http/GraphHopperServletWithEleIT.java b/web/src/test/java/com/graphhopper/http/GraphHopperServletWithEleIT.java
index 7e5aa6af65..f00aa146e8 100644
--- a/web/src/test/java/com/graphhopper/http/GraphHopperServletWithEleIT.java
+++ b/web/src/test/java/com/graphhopper/http/GraphHopperServletWithEleIT.java
@@ -56,7 +56,7 @@ public void setUp()
     @Test
     public void testElevation() throws Exception
     {
-        JSONObject json = query("point=43.730864,7.420771&point=43.727687,7.418737&points_encoded=false&elevation=true");
+        JSONObject json = query("point=43.730864,7.420771&point=43.727687,7.418737&points_encoded=false&elevation=true", 200);
         JSONObject infoJson = json.getJSONObject("info");
         assertFalse(infoJson.has("errors"));
         JSONObject path = json.getJSONArray("paths").getJSONObject(0);
@@ -76,7 +76,7 @@ public void testElevation() throws Exception
     public void testNoElevation() throws Exception
     {
         // default is elevation=false
-        JSONObject json = query("point=43.730864,7.420771&point=43.727687,7.418737&points_encoded=false");
+        JSONObject json = query("point=43.730864,7.420771&point=43.727687,7.418737&points_encoded=false", 200);
         JSONObject infoJson = json.getJSONObject("info");
         assertFalse(infoJson.has("errors"));
         JSONObject path = json.getJSONArray("paths").getJSONObject(0);
@@ -87,7 +87,7 @@ public void testNoElevation() throws Exception
         assertTrue("Elevation should not be included!", cson.toString().contains("[7.421392,43.7307]"));
 
         // disable elevation
-        json = query("point=43.730864,7.420771&point=43.727687,7.418737&points_encoded=false&elevation=false");
+        json = query("point=43.730864,7.420771&point=43.727687,7.418737&points_encoded=false&elevation=false", 200);
         infoJson = json.getJSONObject("info");
         assertFalse(infoJson.has("errors"));
         path = json.getJSONArray("paths").getJSONObject(0);
