diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperJSONParser.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperJSONParser.java
index f483294e7f..66604c71e7 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperJSONParser.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperJSONParser.java
@@ -40,7 +40,7 @@ public GraphHopperJSONParser() {
 	}
 
 	public JSONWayPoints parseJSONFromString(String jsonString) {
-		this.jsonString=jsonString;
+		this.jsonString = jsonString;
 		JsonParser parser = new JsonParser();
 		JsonElement je = parser.parse(jsonString);
 		JsonObject jo = je.getAsJsonObject();
@@ -84,8 +84,10 @@ public JSONWayPoints parseJSONFromString(String jsonString) {
 			LOG.info("time :" + time);
 			LOG.info("distance :" + distance);
 			if (null != annotation_text) {
-				w.setAnnotation_text(annotation_text.toString());
-				LOG.info("annotation_text: " + annotation_text.toString());
+				w.addExtensionData("Annotation_text", annotation_text
+						.getAsString().trim());
+				LOG.info("annotation_text: "
+						+ annotation_text.getAsString().trim());
 			}
 			LOG.info("Coordinates : " + w.getLatitude() + ","
 					+ w.getLongitude());
@@ -93,17 +95,12 @@ public JSONWayPoints parseJSONFromString(String jsonString) {
 			json.addWayPoint(w);
 		}
 
-		
-		
-
 		return json;
 
 	}
 
-	
-	public JSONWayPoints parseCoordinatesFromJson(String jsonString)
-	{
-		this.jsonString=jsonString;
+	public JSONWayPoints parseCoordinatesFromJson(String jsonString) {
+		this.jsonString = jsonString;
 		JsonParser parser = new JsonParser();
 		JsonElement je = parser.parse(jsonString);
 		JsonObject jo = je.getAsJsonObject();
@@ -112,33 +109,29 @@ public JSONWayPoints parseCoordinatesFromJson(String jsonString)
 				.getAsJsonObject("points");
 		JsonArray coordinates = points.getAsJsonObject().getAsJsonArray(
 				"coordinates");
-		
 
 		for (JsonElement jsonElement : coordinates) {
 			Waypoint w = new Waypoint();
-			Double longitude = Double.parseDouble(jsonElement.getAsJsonArray().get(0)
-					.toString());
-			Double latitude = Double.parseDouble(jsonElement.getAsJsonArray().get(1)
-					.toString());
+			Double longitude = Double.parseDouble(jsonElement.getAsJsonArray()
+					.get(0).toString());
+			Double latitude = Double.parseDouble(jsonElement.getAsJsonArray()
+					.get(1).toString());
 			w.setLongitude(longitude);
 			w.setLatitude(latitude);
 			json.addWayPoint(w);
-			
-			}
 
-		
+		}
+
 		return json;
-		
+
 	}
-	
-	
-	public HashSet<Waypoint> getJsonCoordinatesAsHashSet()
-	{
-		
+
+	public HashSet<Waypoint> getJsonCoordinatesAsHashSet() {
+
 		parseCoordinatesFromJson(jsonString);
 		return json.getInstructions();
 	}
-	
+
 	public JsonElement getJSONCoordinates(JsonArray paths, int coordinateIndex) {
 
 		JsonObject points = paths.get(0).getAsJsonObject()
@@ -149,21 +142,17 @@ public JsonElement getJSONCoordinates(JsonArray paths, int coordinateIndex) {
 		return coordinates.get(coordinateIndex);
 	}
 
-	
 	public void parse(String routeType, String avoidances, String routeOptions,
 			String[] string) {
 
-		String vehicle="";
-		String routeOption="";
-		
-		if (routeOptions.split(",").length>1)
-		{
-		 vehicle=routeOptions.split(",")[0];
-		 routeOption=routeOptions.split(",")[1];
-		}
-		else
-		{
-			vehicle=routeOptions;
+		String vehicle = "";
+		String routeOption = "";
+
+		if (routeOptions.split(",").length > 1) {
+			vehicle = routeOptions.split(",")[0];
+			routeOption = routeOptions.split(",")[1];
+		} else {
+			vehicle = routeOptions;
 		}
 		// Set up the URL
 		String jsonResponse = "";
@@ -195,8 +184,7 @@ public void parse(String routeType, String avoidances, String routeOptions,
 		}
 		sb.append("&vehicle=");
 		sb.append(vehicle);
-		sb.append("&weighting=");
-		sb.append(routeOption);
+
 		sb.append(coordinateString);
 		sb.append("&apikey=");
 		sb.append(apikey);
@@ -204,7 +192,23 @@ public void parse(String routeType, String avoidances, String routeOptions,
 
 		if (!avoidances.equals("")) {
 			sb.append("&avoidances=" + avoidances);
-					}
+
+			if (routeOption.isEmpty()) {
+				routeOption = "fastavoid";
+			}
+		}
+
+		else {
+
+			if (routeOption.isEmpty()) {
+				routeOption = "fastest";
+			}
+
+		}
+
+		sb.append("&weighting=");
+
+		sb.append(routeOption);
 		GraphHopperGPXParserRouteTest GPHService = new GraphHopperGPXParserRouteTest();
 		try {
 			CloseableHttpResponse httpResponse = GPHService
@@ -244,26 +248,25 @@ public boolean isWayPointinPath(Waypoint w) {
 
 		return iswaypointinPath;
 
-				
 	}
 
-	public boolean isWayPointinPath(Waypoint we,HashSet<Waypoint> wa) {
+	public boolean isWayPointinPath(Waypoint we, HashSet<Waypoint> wa) {
 		boolean iswaypointinPath = false;
 
 		for (Waypoint waypoint : wa) {
-			
-			if( new RouteWayPoint(we).equals(new RouteWayPoint(waypoint)))
-			{
-				iswaypointinPath=true;
+
+			if (new RouteWayPoint(we).equals(new RouteWayPoint(waypoint))) {
+				iswaypointinPath = true;
 				LOG.info("WayPoint " + we + " Found In a Path");
 			}
 			if (iswaypointinPath) {
 				break;
 			}
 		}
-		
+
 		return iswaypointinPath;
 	}
+
 	/**
 	 * Creates a Waypoint with below attributes
 	 * 
@@ -273,7 +276,8 @@ public boolean isWayPointinPath(Waypoint we,HashSet<Waypoint> wa) {
 	 * @return Waypoint
 	 */
 	public Waypoint buildWayPointForJson(String wayPoint_Coordinates,
-			String wayPointDescription, String time, String distance) {
+			String wayPointDescription, String time, String distance,
+			String avoidance) {
 		Waypoint w = new Waypoint();
 		String waypoint[] = wayPoint_Coordinates.split(",");
 		w.setLatitude(new Double(waypoint[0]));
@@ -281,6 +285,7 @@ public Waypoint buildWayPointForJson(String wayPoint_Coordinates,
 		w.setDescription(wayPointDescription);
 		w.addExtensionData(ExtensionConstants.DISTANCE, distance);
 		w.addExtensionData(ExtensionConstants.TIME, time);
+		w.addExtensionData("Annotation_text", avoidance.trim());
 		return w;
 
 	}
@@ -307,8 +312,8 @@ public String getNearestPoint(String pointA) {
 			CloseableHttpResponse httpResponse = GPHService
 					.sendAndGetResponse(sb.toString());
 
-			jsonString = IOUtils.toString(httpResponse.getEntity()
-					.getContent(), "UTF-8");
+			jsonString = IOUtils.toString(
+					httpResponse.getEntity().getContent(), "UTF-8");
 
 			JsonParser jp = new JsonParser();
 			JsonElement je = jp.parse(jsonString);
@@ -325,12 +330,12 @@ public String getNearestPoint(String pointA) {
 		return nearestpoint;
 
 	}
-	
-	public String getNearestPointDistance()
-	{
+
+	public String getNearestPointDistance() {
 		JsonParser jp = new JsonParser();
 		JsonElement je = jp.parse(jsonString);
-		JsonPrimitive distance = je.getAsJsonObject().getAsJsonPrimitive("distance");
+		JsonPrimitive distance = je.getAsJsonObject().getAsJsonPrimitive(
+				"distance");
 		return distance.toString();
 	}
 
@@ -339,12 +344,9 @@ public long getTotalRouteTime() {
 		JsonElement je = parser.parse(jsonString);
 		JsonObject jo = je.getAsJsonObject();
 		JsonArray paths = jo.getAsJsonArray("paths");
-		JsonPrimitive totalTime = paths.get(0).getAsJsonObject().getAsJsonPrimitive("time");
+		JsonPrimitive totalTime = paths.get(0).getAsJsonObject()
+				.getAsJsonPrimitive("time");
 		return Long.parseLong(totalTime.toString());
 	}
 
-
-
-
-
 }
diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
index b8c93165a5..1361d85ba1 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
@@ -272,7 +272,7 @@ public void I_should_be_able_to_verify_the_trackpoints_not_on_the_route_map(
 
 	}
 
-	@After({ "@Routing" })
+	@After
 	public void closeBrowser(Scenario sc) {
 
 		if (sc.isFailed()) {
diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
index 38f66b6881..eb16ba02d8 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
@@ -281,7 +281,7 @@ public void getRouteFromServiceWithAvoidance(String routeOptions,
 			String avoidances, String... points) {
 
 		if (IntegrationTestProperties.getTestProperty("routeType")
-				.equals("gpx")) {
+				.equalsIgnoreCase("gpx")) {
 			GPHService.parseRoute("gpx", avoidances, routeOptions, points);
 		}
 
@@ -348,7 +348,7 @@ public boolean isWayPointonRouteMap(String wayPointIndex,
 
 			} else {
 				wp = GPHJsonService.buildWayPointForJson(wayPoint_Coordinates,
-						wayPointDescription, time, distance);
+						wayPointDescription, time, distance,avoidance);
 				isWayPointonRouteMap = GPHJsonService.isWayPointinPath(wp);
 
 			}
@@ -367,7 +367,7 @@ public boolean isWayPointonRouteMap(String wayPointIndex,
 
 			} else {
 				wp = GPHJsonService.buildWayPointForJson(wayPoint_Coordinates,
-						wayPointDescription, time, distance);
+						wayPointDescription, time, distance,avoidance);
 				isWayPointonRouteMap = GPHJsonService.isWayPointinPath(wp);
 
 			}
diff --git a/acceptancetesting/src/test/cucumber/DPNRouting.feature b/acceptancetesting/src/test/cucumber/DPNRouting.feature
index 59478925b1..2031d40fe4 100644
--- a/acceptancetesting/src/test/cucumber/DPNRouting.feature
+++ b/acceptancetesting/src/test/cucumber/DPNRouting.feature
@@ -59,12 +59,13 @@ Feature: Verify a route from A to B
       | pointA              | pointB             | routetype | avoidances |
       | 53.122676,-1.909914 | 53.088159,-1.87142 | foot      |            |
 
-  @Routing
+ @Routing 
   Scenario Outline: Verify  Road Names on a Walking Route (Martin's Low)
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco          | waypointdesc          | azimuth | direction | time  | distance | avoidance |
-      | 3             | 53.066198,-1.905401 | Turn right onto Track | 105.0   | E         | 38678 | 53.7     |           |
+      | 3             | 53.071624,-1.914417 | Turn right onto Path | 356.0  | N         | 425697 | 591.2     |           |
+
 
     Examples: 
       | pointA             | pointB              | routetype | avoidances |
@@ -228,23 +229,23 @@ Feature: Verify a route from A to B
       | 53.267104,-1.818304 | 53.131858,-1.661941 | foot      | Scree      |
 
   #cliff
-  @Routing
+  ##############
+  @Routing  @Current
   Scenario Outline: Verify DPN Route without cliff avoidance -(cliff)
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco          | waypointdesc        | azimuth | direction | time   | distance | avoidance |
-      | 4             | 53.312731,-1.627617 | Continue onto Route | 164.0   | S         | 264332 | 367.1    | Cliff     |
-
-    Examples: 
+      | 5             | 53.311409,-1.627165 | Continue onto Route | 178.0  | S         | 2655 | 3.7   | Cliff     |
+   Examples: 
       | pointA             | pointB              | routetype | avoidances |
       | 53.31676,-1.631903 | 53.156465,-1.908797 | foot      |            |
 
-  @Routing
+ @Routing @Current
   Scenario Outline: Verify DPN Route with cliff avoidance -(cliff)
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints not on the route map:
       | wayPointIndex | waypointco          | waypointdesc        | azimuth | direction | time   | distance | avoidance |
-      | 4             | 53.312731,-1.627617 | Continue onto Route | 164.0   | S         | 264332 | 367.1    | Cliff     |
+        | 5             | 53.311409,-1.627165 | Continue onto Route | 178.0  | S         | 2655 | 3.7   | Cliff     |
 
     Examples: 
       | pointA             | pointB              | routetype | avoidances |
@@ -263,7 +264,7 @@ Feature: Verify a route from A to B
       | pointA            | pointB              | routetype | avoidances |
       | 53.5534,-1.983177 | 53.540061,-1.978324 | foot      |            |
 
-  @Routing
+  @Current
   Scenario Outline: Verify DPN Route with cliff avoidance -(cliff)
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints not on the route map:
@@ -288,7 +289,7 @@ Feature: Verify a route from A to B
       | pointA              | pointB              | routetype | avoidances |
       | 53.311217,-1.629849 | 53.156465,-1.908797 | foot      |            |
 
-  @Routing
+  @Current
   Scenario Outline: Verify DPN Route with boulders avoidance -(boulders)
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints not on the route map:
diff --git a/acceptancetesting/src/test/cucumber/routing.feature b/acceptancetesting/src/test/cucumber/routing.feature
index 959463c8f2..9fe5a60df7 100644
--- a/acceptancetesting/src/test/cucumber/routing.feature
+++ b/acceptancetesting/src/test/cucumber/routing.feature
@@ -434,18 +434,26 @@ Feature: Verify a route from A to B
       | 56.38721,-3.466273 | 56.136656,-3.970408 | 55.871665,-4.195067 | 55.950467,-3.208924 | car,fastest  |            |
 
   @Routing
-  Scenario Outline: Verify  nearest point on a Route
+  Scenario Outline: Verify  nearest point of point using NearestPoint API
     Given I request a nearest point from  "<pointA>" from Nearest Point API
     Then I should be able to verify the nearest point to be "<pointB>" at a distance of "<distance>"
 
     Examples: 
-      | pointA              | pointB                                 | distance          |
-      | 51.878966,-0.903849 | 51.875144098888576,-0.9107481891829116 | 636.3215777261629 |
+      | pointA                                 | pointB                                 | distance           |
+      | 51.878966,-0.903849                    | 51.875144098888576,-0.9107481891829116 | 636.3215777261629  |
+      | 53.101756,-1.954888                    | 53.10043020792586,-1.961414745138117 | 460.0011625834564  |
+      | 53.065293927002806,-1.9071498141906338 | 53.065293927002806,-1.9071498141906338 | 0                  |
+      | 52.784893,-1.84522                     | 52.79515894789604,-1.8521510478589918  | 1233.001210212637   |
+      | 52.79515894789604,-1.8521510478589918  | 52.79515894789604,-1.8521510478589918  | 0                  |
+      | 54.094977,-2.006081                    | 54.09420551570219,-2.0283477834242833  | 1454.551799711362  |
+      | 54.115309,-2.111881                    | 54.133065323525635,-2.131028334744908  | 2335.612435123903  |
+      | 54.095897,-2.144795                    | 54.08689388826998,-2.1488754559056935  | 1035.8644445463867 |
+      | 50.658849,-1.386463                    | 50.65520130477257,-1.4000444889283343  | 1039.7773305822475 |
+      | 56.025277,-4.917874                    | 56.02196904113215,-4.906092518708935   | 819.3253424080308  |
+      | 50.664175,-1.358463                    | 50.66192580003871,-1.3486298102579224  | 736.8284619868352  |
 
-  
   # Fastest and Shortest Route Scenarios
-  
-  @Routing @Current
+  @Routing
   Scenario Outline: Verify  waypoints on a Route from Hounslow to Reading
     Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints on the route map:
@@ -458,7 +466,7 @@ Feature: Verify a route from A to B
       | pointA                                 | pointB                                 | routeOptions | avoidances |
       | 51.471546541834144,-0.3618621826171875 | 51.45914115860512,-0.96679687499999995 | car,shortest |            |
 
-  @Routing @Current
+  @Routing
   Scenario Outline: Verify  waypoints on a Route from Hounslow to Reading
     Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints on the route map:
