diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperComponentIdentification.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperComponentIdentification.java
index e96ca53a45..a0ed1e73b7 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperComponentIdentification.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperComponentIdentification.java
@@ -24,6 +24,18 @@
 	public static final ComponentIdentifier  ZOOM_OUT=new ComponentByXPATH("//*[@title='Zoom out']");
 	public static final ComponentIdentifier  ZOOM_IN=new ComponentByXPATH("//*[@title='Zoom in']");
 	public static final ComponentIdentifier dropDown =new ComponentByXPATH("//span/div/span/div[*]/p/strong");
+	public static final ComponentIdentifier settingsButton =new ComponentByXPATH("//*[@id='settings-btn']");
+	public static final ComponentIdentifier avoidance_ARoad=new ComponentByXPATH("//*[@name='avoidances[]'][@value='aroad']");
+	public static final ComponentIdentifier avoidance_Boulders=new ComponentByXPATH("//*[@name='avoidances[]'][@value='boulders']");
+	public static final ComponentIdentifier avoidance_Cliff=new ComponentByXPATH("//*[@name='avoidances[]'][@value='cliff']");
+	public static final ComponentIdentifier avoidance_InlandWater=new ComponentByXPATH("//*[@name='avoidances[]'][@value='inlandwater']");
+	public static final ComponentIdentifier avoidance_Marsh=new ComponentByXPATH("//*[@name='avoidances[]'][@value='marsh']");
+	public static final ComponentIdentifier avoidance_QuarryOrPit=new ComponentByXPATH("//*[@name='avoidances[]'][@value='quarryorpit']");
+	public static final ComponentIdentifier avoidance_Scree=new ComponentByXPATH("//*[@name='avoidances[]'][@value='scree']");
+	public static final ComponentIdentifier avoidance_Rock=new ComponentByXPATH("//*[@name='avoidances[]'][@value='rock']");
+	public static final ComponentIdentifier avoidance_Mud=new ComponentByXPATH("//*[@name='avoidances[]'][@value='mud']");
+	public static final ComponentIdentifier avoidance_Sand=new ComponentByXPATH("//*[@name='avoidances[]'][@value='sand']");
+	public static final ComponentIdentifier avoidance_Shingle=new ComponentByXPATH("//*[@name='avoidances[]'][@value='shingle']");
 	
 	
 }
diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
index 68781c9e15..45343d1c52 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
@@ -41,7 +41,7 @@ public void getRoute(String pointA, String pointB, String routeType)
 		switch (testON.toUpperCase()) {
 		case "WEB":
 
-			graphUiUtil.getRouteFromUI(routeType, pointA, pointB);
+			graphUiUtil.getRouteFromUI(routeType, "",pointA, pointB);
 			break;
 		case "SERVICE":
 			graphUiUtil.getRouteFromService(routeType, pointA, pointB);
@@ -50,9 +50,9 @@ public void getRoute(String pointA, String pointB, String routeType)
 
 			if (pointA.split(",").length == 2) {
 				graphUiUtil.getRouteFromService(routeType, pointA, pointB);
-				graphUiUtil.getRouteFromUI(routeType, pointA, pointB);
+				graphUiUtil.getRouteFromUI(routeType,"", pointA, pointB);
 			} else {
-				graphUiUtil.getRouteFromUI(routeType, pointA, pointB);
+				graphUiUtil.getRouteFromUI(routeType, "",pointA, pointB);
 			}
 
 			break;
@@ -81,7 +81,7 @@ public void getRouteWithAvoidance(String pointA, String pointB,
 		switch (testON.toUpperCase()) {
 		case "WEB":
 
-			graphUiUtil.getRouteFromUI(routeType, pointA, pointB);
+			graphUiUtil.getRouteFromUI(routeType,avoidance, pointA, pointB);
 			break;
 		case "SERVICE":
 			graphUiUtil.getRouteFromServiceWithAvoidance(routeType, avoidance, pointA,
@@ -93,7 +93,7 @@ public void getRouteWithAvoidance(String pointA, String pointB,
 				graphUiUtil.getRouteFromServiceWithAvoidance(routeType, avoidance,pointA, pointB);
 				graphUiUtil.getRouteFromUI(routeType, pointA, pointB);
 			} else {
-				graphUiUtil.getRouteFromUI(routeType, pointA, pointB);
+				graphUiUtil.getRouteFromUI(routeType,avoidance, pointA, pointB);
 			}
 
 			break;
@@ -122,7 +122,7 @@ public void getRoute(String pointA, String pointB, String routeType,
 		switch (testON.toUpperCase()) {
 		case "WEB":
 
-			graphUiUtil.getRouteFromUI(routeType, pointA, pointB, pointC);
+			graphUiUtil.getRouteFromUI(routeType,"",pointA, pointB, pointC);
 			break;
 		case "SERVICE":
 			graphUiUtil.getRouteFromService(routeType, pointA, pointB, pointC);
@@ -134,7 +134,7 @@ public void getRoute(String pointA, String pointB, String routeType,
 						pointC);
 				graphUiUtil.getRouteFromUI(routeType, pointA, pointB, pointC);
 			} else {
-				graphUiUtil.getRouteFromUI(routeType, pointA, pointB, pointC);
+				graphUiUtil.getRouteFromUI(routeType,"", pointA, pointB, pointC);
 			}
 
 			break;
@@ -155,7 +155,7 @@ public void getRoute(String pointA, String pointB, String routeType,
 		switch (testON.toUpperCase()) {
 		case "WEB":
 
-			graphUiUtil.getRouteFromUI(routeType, pointA, pointB, pointC,
+			graphUiUtil.getRouteFromUI(routeType, "",pointA, pointB, pointC,
 					pointD);
 			break;
 		case "SERVICE":
@@ -167,10 +167,10 @@ public void getRoute(String pointA, String pointB, String routeType,
 			if (pointA.split(",").length == 2) {
 				graphUiUtil.getRouteFromService(routeType, pointA, pointB,
 						pointC, pointD);
-				graphUiUtil.getRouteFromUI(routeType, pointA, pointB, pointC,
+				graphUiUtil.getRouteFromUI(routeType,"", pointA, pointB, pointC,
 						pointD);
 			} else {
-				graphUiUtil.getRouteFromUI(routeType, pointA, pointB, pointC,
+				graphUiUtil.getRouteFromUI(routeType, "",pointA, pointB, pointC,
 						pointD);
 			}
 
diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
index 78c2ca20e3..188e1b8ac7 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
@@ -2,15 +2,7 @@
 
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
-import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.ADD_WAYPOINT;
-import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.INSTRUCTIONS;
-import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.ROUTE_SEARCH;
-import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.ROUTE_TYPE_BIKE;
-import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.ROUTE_TYPE_CAR;
-import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.ROUTE_TYPE_WALK;
-import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.TOTAL_ROUTE_TIME;
-import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.dropDown;
-import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.waypoint;
+import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.*;
 
 import java.awt.Graphics2D;
 import java.awt.RenderingHints;
@@ -39,7 +31,9 @@
 import uk.co.ordnancesurvey.gpx.extensions.ExtensionConstants;
 import uk.co.ordnancesurvey.gpx.graphhopper.GraphHopperGPXParserRouteTest;
 import uk.co.ordnancesurvey.gpx.graphhopper.GraphHopperJSONParser;
+import uk.co.ordnancesurvey.webtests.base.ComponentByXPATH;
 import uk.co.ordnancesurvey.webtests.base.ComponentID;
+import uk.co.ordnancesurvey.webtests.base.ComponentIdentifier;
 import uk.co.ordnancesurvey.webtests.base.ImageComparison;
 import uk.co.ordnancesurvey.webtests.multiplatform.MultiplatformTest;
 import uk.co.ordnancesurvey.webtests.platforms.BrowserPlatformOptions;
@@ -94,18 +88,22 @@ public void logout() {
 
 	/**
 	 * <p>
+	 * getRouteFromUI is to get a route from web interface using the provided
+	 * start, end and intermediate waypoints.
 	 * <p>
-	 * <p>
+	 * all avoidances will be considered while generating a route.
 	 * 
-	 * @param pointA
-	 * @param pointB
 	 * @param routeType
-	 *            <p>
-	 *            Route type can be Car, walk or Cycle.
+	 *            can be car/bike/foot
+	 * @param avoidance
+	 *            can be aroad,cliff.. etc and it can be "" if no avoidance is
+	 *            need to be set
+	 * @param points
+	 *            start and end points along with any intermediate points
 	 * @throws InterruptedException
 	 */
-	public void getRouteFromUI(String routeType, String... points)
-			throws InterruptedException {
+	public void getRouteFromUI(String routeType, String avoidance,
+			String... points) throws InterruptedException {
 
 		switch (routeType) {
 		case "car":
@@ -149,6 +147,53 @@ public void getRouteFromUI(String routeType, String... points)
 			}
 		}
 
+		if (avoidance != "") {
+
+			clickElement(settingsButton);
+			switch (avoidance.toLowerCase().trim()) {
+
+			case "aroad":
+				clickElement(avoidance_ARoad);
+				break;
+
+			case "boulders":
+				clickElement(avoidance_Boulders);
+				break;
+			case "cliff":
+				clickElement(avoidance_Cliff);
+				break;
+			case "inlandwater":
+				clickElement(avoidance_InlandWater);
+				break;
+			case "marsh":
+				clickElement(avoidance_Marsh);
+				break;
+			case "quarryorpit":
+				clickElement(avoidance_QuarryOrPit);
+				break;
+			case "scree":
+				clickElement(avoidance_Scree);
+				break;
+			case "rock":
+				clickElement(avoidance_Rock);
+				break;
+			case "mud":
+				clickElement(avoidance_Mud);
+				break;
+
+			case "sand":
+				clickElement(avoidance_Sand);
+				break;
+
+			case "shingle":
+				clickElement(avoidance_Shingle);
+				break;
+
+			default:
+				break;
+			}
+
+		}
 		clickElement(ROUTE_SEARCH);
 		waitFor(INSTRUCTIONS);
 
@@ -230,7 +275,7 @@ public boolean isWayPointonRouteMap(String wayPointIndex,
 		case "WEB":
 
 			verifyInstructionThroughUI(wayPointIndex, wayPointDescription);
-			isWayPointonRouteMap=true;
+			isWayPointonRouteMap = true;
 			break;
 		case "SERVICE":
 			if (IntegrationTestProperties.getTestProperty("routeType").equals(
