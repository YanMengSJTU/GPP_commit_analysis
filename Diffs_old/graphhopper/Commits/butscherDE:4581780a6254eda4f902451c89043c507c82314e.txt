diff --git a/core/src/main/java/com/graphhopper/routing/template/PolygonRoutingTemplate.java b/core/src/main/java/com/graphhopper/routing/template/PolygonRoutingTemplate.java
index ee2c8c2929..6764243307 100644
--- a/core/src/main/java/com/graphhopper/routing/template/PolygonRoutingTemplate.java
+++ b/core/src/main/java/com/graphhopper/routing/template/PolygonRoutingTemplate.java
@@ -32,7 +32,7 @@
     RouteCandidateList<RouteCandidatePolygon> routeCandidates;
 
     public PolygonRoutingTemplate(GHRequest ghRequest, GHResponse ghRsp, LocationIndex locationIndex, Graph graph, NodeAccess nodeAccess, GraphHopperStorage ghStorage,
-                                         EncodingManager encodingManager) {
+                                  EncodingManager encodingManager) {
         super(ghRequest, ghRsp, locationIndex, encodingManager);
         this.ghRequest = ghRequest;
         this.polygon = ghRequest.getPolygon();
diff --git a/core/src/main/java/com/graphhopper/routing/template/PolygonThroughRoutingTemplate.java b/core/src/main/java/com/graphhopper/routing/template/PolygonThroughRoutingTemplate.java
index 945ef33072..588f9986f4 100644
--- a/core/src/main/java/com/graphhopper/routing/template/PolygonThroughRoutingTemplate.java
+++ b/core/src/main/java/com/graphhopper/routing/template/PolygonThroughRoutingTemplate.java
@@ -73,7 +73,7 @@ private RouteCandidatePolygon buildCandidatePath(int currentPointID, int nextPoi
         return routeCandidate;
     }
 
-     private List<Integer> findPolygonEntryExitPoints(final List<Integer> nodesInPolygon) {
+    private List<Integer> findPolygonEntryExitPoints(final List<Integer> nodesInPolygon) {
         final List<Integer> entryExitPoints = new ArrayList<>();
         final EdgeExplorer edgeExplorer = ghStorage.getBaseGraph().createEdgeExplorer();
 
diff --git a/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/ManyToManyRouting.java b/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/ManyToManyRouting.java
index bb16db06b9..14ad747051 100644
--- a/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/ManyToManyRouting.java
+++ b/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/ManyToManyRouting.java
@@ -34,7 +34,8 @@ private QueryGraph prepareQueryGraph() {
     void calculatePaths() {
         for (int fromNode : nodesToBuildRoutesWith) {
             final OneToManyRouting
-                    oneToManyRouting = new OneToManyRouting(fromNode, this.nodesToBuildRoutesWith, nodesToConsiderForRouting, this.queryGraph, this.routingAlgorithmFactory, this.algorithmOptions);
+                    oneToManyRouting =
+                    new OneToManyRouting(fromNode, this.nodesToBuildRoutesWith, nodesToConsiderForRouting, this.queryGraph, this.routingAlgorithmFactory, this.algorithmOptions);
             oneToManyRouting.findPathBetweenAllNodePairs();
             this.allFoundPaths.putAll(oneToManyRouting.getAllFoundPathsMap());
         }
diff --git a/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/MultiRouting.java b/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/MultiRouting.java
index 4b983bd379..58a735491b 100644
--- a/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/MultiRouting.java
+++ b/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/MultiRouting.java
@@ -32,6 +32,7 @@ private boolean pathsNotAlreadySearched() {
 
     /**
      * Outputs a list of all found paths
+     *
      * @return
      */
     public List<Path> getAllFoundPaths() {
@@ -48,7 +49,7 @@ private boolean pathsNotAlreadySearched() {
      * Gets a specific path between two nodes.
      *
      * @param fromNodeId node where the path shall start from.
-     * @param toNodeId node where the path shall end to.
+     * @param toNodeId   node where the path shall end to.
      * @return
      */
     public Path getPathByFromEndNodeID(Integer fromNodeId, Integer toNodeId) {
diff --git a/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidateList.java b/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidateList.java
index 54496075fc..a23840337f 100644
--- a/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidateList.java
+++ b/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidateList.java
@@ -9,7 +9,7 @@
 import java.util.Comparator;
 import java.util.List;
 
-public class RouteCandidateList <T extends RouteCandidatePolygon> {
+public class RouteCandidateList<T extends RouteCandidatePolygon> {
     private List<T> candidates;
 
     public RouteCandidateList() {
@@ -50,7 +50,7 @@ public int compare(RouteCandidatePolygon rc1, RouteCandidatePolygon rc2) {
     }
 
     private List<Path> addPathsBasedOnIntersectionStatus(int nOfFirstElements, QueryGraph queryGraph, AlgorithmOptions algorithmOptions, int endOfCandidates,
-                                                   boolean addSelfIntersecting) {
+                                                         boolean addSelfIntersecting) {
         List<Path> paths = new ArrayList<>(nOfFirstElements);
         int indexIntoCandidates = endOfCandidates;
         while (indexIntoCandidates >= 0 && paths.size() < nOfFirstElements) {
diff --git a/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidatePolygonThrough.java b/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidatePolygonThrough.java
index 0b669cec13..b795500e6d 100644
--- a/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidatePolygonThrough.java
+++ b/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidatePolygonThrough.java
@@ -4,6 +4,7 @@
 
 public class RouteCandidatePolygonThrough extends RouteCandidatePolygon {
     private final ManyToManyRouting pathSkeletonRouter;
+
     public RouteCandidatePolygonThrough(PolygonThroughRoutingTemplate polygonRoutingTemplate, int startNodeID, int endNodeID,
                                         int polygonEntryNodeID, int polygonExitNodeID) {
         super(polygonRoutingTemplate, startNodeID, endNodeID, polygonEntryNodeID, polygonExitNodeID);
diff --git a/core/src/main/java/com/graphhopper/routing/template/util/QueryGraphCreator.java b/core/src/main/java/com/graphhopper/routing/template/util/QueryGraphCreator.java
index 61a6282903..f745254336 100644
--- a/core/src/main/java/com/graphhopper/routing/template/util/QueryGraphCreator.java
+++ b/core/src/main/java/com/graphhopper/routing/template/util/QueryGraphCreator.java
@@ -30,7 +30,7 @@ public QueryGraph createQueryGraph() {
     }
 
     public List<QueryResult> getQueryResults() {
-        final List <QueryResult> queryResults = new ArrayList<>(this.nodesToLookup.size());
+        final List<QueryResult> queryResults = new ArrayList<>(this.nodesToLookup.size());
 
         for (final int node : this.nodesToLookup) {
             final double latitude = this.graph.getNodeAccess().getLatitude(node);
