diff --git a/api/src/main/java/com/graphhopper/GHResponse.java b/api/src/main/java/com/graphhopper/GHResponse.java
index 6fe8f8c0e4..5ef2b1717b 100644
--- a/api/src/main/java/com/graphhopper/GHResponse.java
+++ b/api/src/main/java/com/graphhopper/GHResponse.java
@@ -18,6 +18,7 @@
 package com.graphhopper;
 
 import com.graphhopper.util.PMap;
+import com.graphhopper.util.shapes.Polygon;
 
 import java.util.ArrayList;
 import java.util.List;
@@ -32,6 +33,7 @@
     private final List<Throwable> errors = new ArrayList<>(4);
     private final PMap hintsMap = new PMap();
     private final List<PathWrapper> pathWrappers = new ArrayList<>(5);
+    public Polygon polygon = new Polygon(new double[] {}, new double[] {});
     private String debugInfo = "";
 
     public GHResponse() {
diff --git a/core/src/main/java/com/graphhopper/GraphHopper.java b/core/src/main/java/com/graphhopper/GraphHopper.java
index 63b9c84334..1fe0b76010 100644
--- a/core/src/main/java/com/graphhopper/GraphHopper.java
+++ b/core/src/main/java/com/graphhopper/GraphHopper.java
@@ -944,6 +944,7 @@ public Weighting createTurnWeighting(Graph graph, Weighting weighting, Traversal
     @Override
     public GHResponse route(GHRequest request) {
         GHResponse response = new GHResponse();
+        response.polygon = request.getPolygon();
         calcPaths(request, response);
         return response;
     }
diff --git a/core/src/main/java/com/graphhopper/routing/template/PolygonThroughRoutingTemplate.java b/core/src/main/java/com/graphhopper/routing/template/PolygonThroughRoutingTemplate.java
index f3fbf08546..ecd4bf5e08 100644
--- a/core/src/main/java/com/graphhopper/routing/template/PolygonThroughRoutingTemplate.java
+++ b/core/src/main/java/com/graphhopper/routing/template/PolygonThroughRoutingTemplate.java
@@ -53,6 +53,7 @@ protected void findCandidateRoutes() {
         lotNodes = LOTNodeExtractor.createExtractedData(this.graph, this.algoFactory, this.algorithmOptions, viaPointNodeIds, polygonEntryExitPoints);
         sw.stop();
         System.out.println(sw.toString());
+        System.out.println("# LOT nodes: " + lotNodes.getLotNodesFor(viaPointNodeIds.get(0)).size());
 
         final List<QueryResult> queryResults = createQueryResults(polygonEntryExitPoints, flagEncoder);
 
diff --git a/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidatePolygon.java b/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidatePolygon.java
index bdebc4734e..81f0756836 100644
--- a/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidatePolygon.java
+++ b/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidatePolygon.java
@@ -28,53 +28,6 @@ public RouteCandidatePolygon(final int startNodeID, final int endNodeID, final i
         this.detourEntryToDetourExit = detourEntryToDetourExit;
         this.detourExitToEnd = detourExitToEnd;
         this.directRouteStartEnd = directRouteStartEnd;
-
-        if (startNodeID == 906161 || startNodeID == 270195
-            || endNodeID == 906161 || endNodeID == 270195
-            || polygonEntryNodeID == 906161 || polygonEntryNodeID == 270195
-            || polygonExitNodeID == 906161 || polygonExitNodeID == 270195) {
-            System.out.println("hit2");
-        }
-
-//        if (startToDetourEntry.getNodesInPathOrder().contains(906161) && startToDetourEntry.getNodesInPathOrder().contains(270195)) {
-//            System.out.println("hit3");
-//        }
-//
-//        if (detourEntryToDetourExit.getNodesInPathOrder().contains(906161) && detourEntryToDetourExit.getNodesInPathOrder().contains(270195)) {
-//            System.out.println("hit4");
-//        }
-//
-//        if (detourExitToEnd.getNodesInPathOrder().contains(906161) && detourExitToEnd.getNodesInPathOrder().contains(270195)) {
-//            System.out.println("hit5");
-//        }
-//
-//        if (directRouteStartEnd.getNodesInPathOrder().contains(906161) && directRouteStartEnd.getNodesInPathOrder().contains(270195)) {
-//            System.out.println("hit6");
-//        }
-//
-//        for (EdgeIteratorState state : startToDetourEntry.calcEdges()) {
-//            if (state.getEdge() == 17733429) {
-//                System.out.println("hit7");
-//            }
-//        }
-//
-//        for (EdgeIteratorState state : detourEntryToDetourExit.calcEdges()) {
-//            if (state.getEdge() == 17733429) {
-//                System.out.println("hit8");
-//            }
-//        }
-//
-//        for (EdgeIteratorState state : detourExitToEnd.calcEdges()) {
-//            if (state.getEdge() == 17733429) {
-//                System.out.println("hit9");
-//            }
-//        }
-//
-//        for (EdgeIteratorState state : directRouteStartEnd.calcEdges()) {
-//            if (state.getEdge() == 17733429) {
-//                System.out.println("hit10");
-//            }
-//        }
     }
 
     public Path getMergedPath(final QueryGraph queryGraph, final AlgorithmOptions algoOpts) {
@@ -122,7 +75,6 @@ public boolean isDetourSelfIntersecting(final QueryGraph queryGraph, final Algor
         mergePathIfNotDone(queryGraph, algoOpts);
 
         return checkForRedundantNodes();
-        // TODO: Selfintersecting: Complete route or detour part?
     }
 
     private void mergePathIfNotDone(QueryGraph queryGraph, AlgorithmOptions algoOpts) {
diff --git a/core/src/main/java/com/graphhopper/storage/CHGraphImpl.java b/core/src/main/java/com/graphhopper/storage/CHGraphImpl.java
index a9c5584b9a..59714e1089 100644
--- a/core/src/main/java/com/graphhopper/storage/CHGraphImpl.java
+++ b/core/src/main/java/com/graphhopper/storage/CHGraphImpl.java
@@ -483,9 +483,6 @@ public CHEdgeIteratorImpl(BaseGraph baseGraph, EdgeAccess edgeAccess, EdgeFilter
 
         @Override
         public final IntsRef getFlags() {
-            if (edgeId == 17733429) {
-                System.out.println("hit");
-            }
             checkShortcut(false, "getFlags");
             return super.getFlags();
         }
diff --git a/web-api/src/main/java/com/graphhopper/http/WebHelper.java b/web-api/src/main/java/com/graphhopper/http/WebHelper.java
index 1b691ea50f..9bed0d021e 100644
--- a/web-api/src/main/java/com/graphhopper/http/WebHelper.java
+++ b/web-api/src/main/java/com/graphhopper/http/WebHelper.java
@@ -189,6 +189,7 @@ public static ObjectNode jsonObject(GHResponse ghRsp, boolean enableInstructions
             if (ar.getFare() != null) {
                 jsonPath.put("fare", NumberFormat.getCurrencyInstance(Locale.ROOT).format(ar.getFare()));
             }
+            jsonPath.putPOJO("polygon", ghRsp.polygon.getCoordinatesAsGHPoints());
         }
         return json;
     }
diff --git a/web/src/main/resources/assets/js/graphhopper/GHRequest.js b/web/src/main/resources/assets/js/graphhopper/GHRequest.js
index a91f8f6b18..f1fb8c88f7 100644
--- a/web/src/main/resources/assets/js/graphhopper/GHRequest.js
+++ b/web/src/main/resources/assets/js/graphhopper/GHRequest.js
@@ -30,6 +30,7 @@ if (!Function.prototype.bind) {
 var GHRequest = function (host, api_key) {
     this.host = host;
     this.route = new GHRoute(new GHInput(), new GHInput());
+    this.polygon = new GHRoute();
     this.from = this.route.first();
     this.to = this.route.last();
     this.features = {};
@@ -61,7 +62,8 @@ var GHRequest = function (host, api_key) {
 
 GHRequest.prototype.init = function (params) {
     for (var key in params) {
-        if (key === "point" || key === "mathRandom" || key === "do_zoom" || key === "layer" || key === "use_miles")
+        if (key === "point" || key === "mathRandom" || key === "do_zoom" || key === "layer" || key === "use_miles" ||
+        key === "polygon")
             continue;
 
         var val = params[key];
@@ -191,6 +193,19 @@ GHRequest.prototype.createPointParams = function (useRawInput) {
         else
             str += "point=" + encodeURIComponent(point.toString());
     }
+
+    for (i = 0, l = this.polygon.size(); i < l; i++) {
+        polygon = this.polygon.getIndex(i);
+        str += "&";
+        if (typeof polygon.input == 'undefined')
+            str += "";
+        else if (useRawInput)
+            str += "polygon=" + encodeURIComponent(polygon.input);
+        else
+            str += "polygon=" + encodeURIComponent(polygon.toString());
+    }
+
+
     return (str);
 };
 
diff --git a/web/src/main/resources/assets/js/lib/leaflet_numbered_markers.js b/web/src/main/resources/assets/js/lib/leaflet_numbered_markers.js
index 2ab1983b9a..9ff3b529c2 100644
--- a/web/src/main/resources/assets/js/lib/leaflet_numbered_markers.js
+++ b/web/src/main/resources/assets/js/lib/leaflet_numbered_markers.js
@@ -27,4 +27,35 @@ L.NumberedDivIcon = L.Icon.extend({
   createShadow: function () {
     return null;
   }
+});
+
+L.NumberedDivIconPolygon = L.Icon.extend({
+    options: {
+        iconUrl: './img/marker_hole_purple.png',
+        number: '',
+        shadowUrl: null,
+        iconSize: new L.Point(25, 41),
+        iconAnchor: new L.Point(12, 40),
+        popupAnchor: new L.Point(0, -33),
+        shadowSize: new L.Point(50, -64),
+        shadowAnchor: new L.Point(4, -62),
+        className: 'leaflet-div-icon'
+    },
+
+    createIcon: function () {
+        var div = document.createElement('div');
+        var img = this._createImg(this.options['iconUrl']);
+        var numdiv = document.createElement('div');
+        numdiv.setAttribute ( "class", "number" );
+        numdiv.innerHTML = this.options['number'] || '';
+        div.appendChild ( img );
+        div.appendChild ( numdiv );
+        this._setIconStyles(div, 'icon');
+        return div;
+    },
+
+    //you could change this to add a shadow like in the normal marker if you really wanted
+        createShadow: function () {
+        return null;
+    }
 });
\ No newline at end of file
diff --git a/web/src/main/resources/assets/js/main-template.js b/web/src/main/resources/assets/js/main-template.js
index 47891ead8a..97ac9ecac8 100644
--- a/web/src/main/resources/assets/js/main-template.js
+++ b/web/src/main/resources/assets/js/main-template.js
@@ -82,7 +82,6 @@ $(document).ready(function (e) {
             // https://github.com/defunkt/jquery-pjax/issues/143#issuecomment-6194330
 
             var state = History.getState();
-            console.log(state);
             initFromParams(state.data, true);
         });
     }
@@ -163,7 +162,8 @@ $(document).ready(function (e) {
                 }
                 metaVersionInfo = messages.extractMetaVersionInfo(json);
 
-                mapLayer.initMap(bounds, setStartCoord, setIntermediateCoord, setEndCoord, urlParams.layer, urlParams.use_miles);
+                mapLayer.initMap(bounds, setStartCoord, setIntermediateCoord, setEndCoord, setPolygonCoord, urlParams.layer,
+                urlParams.use_miles);
 
                 // execute query
                 initFromParams(urlParams, true);
@@ -180,7 +180,7 @@ $(document).ready(function (e) {
                     "maxLat": 90
                 };
                 nominatim.setBounds(bounds);
-                mapLayer.initMap(bounds, setStartCoord, setIntermediateCoord, setEndCoord, urlParams.layer, urlParams.use_miles);
+                mapLayer.initMap(bounds, setStartCoord, setIntermediateCoord, setEndCoord, setPolygonCoord, urlParams.layer, urlParams.use_miles);
             });
 
     var language_code = urlParams.locale && urlParams.locale.split('-', 1)[0];
@@ -246,6 +246,17 @@ function initFromParams(params, doQuery) {
         enableTime: true
     });
 
+    console.log(params.polygon)
+    if (Array.isArray(params.polygon)) {
+        console.log(params.polygon);
+        for (var i = 0; i < params.polygon.length; i++) {
+            ghRequest.polygon.set(params.polygon[i], i, true);
+        }
+    } else if (params.polygon !== undefined) {
+        ghRequest.polygon.set(params.polygon, 0, true);
+    }
+    console.log(params.polygon)
+
     if (ghRequest.getEarliestDepartureTime()) {
         flatpickr.setDate(ghRequest.getEarliestDepartureTime());
     }
@@ -390,6 +401,16 @@ function setIntermediateCoord(e) {
     routeIfAllResolved();
 }
 
+function setPolygonCoord(e) {
+    var index = ghRequest.polygon.size();
+    ghRequest.polygon.set(e.latlng.wrap(), index, true);
+    console.log(e.latlng.wrap());
+//    mapLayer.createPolygonMarker(index, e.latlng.wrap(), ghRequest);
+
+    //resolveIndex(index);
+    routeIfAllResolved();
+}
+
 function deleteCoord(e) {
     var latlng = e.relatedTarget.getLatLng();
     ghRequest.route.removeSingle(latlng);
@@ -397,6 +418,13 @@ function deleteCoord(e) {
     routeLatLng(ghRequest, false);
 }
 
+function deletePolygon(e) {
+    var latlng = e.relatedTarget.getLatLng();
+    ghRequest.polygon.removeSingle(latlng);
+    mapLayer.clearLayers();
+    routeLatLng(ghRequest, false);
+}
+
 function setEndCoord(e) {
     var index = ghRequest.route.size() - 1;
     ghRequest.route.set(e.latlng.wrap(), index);
@@ -589,6 +617,8 @@ function routeLatLng(request, doQuery) {
         var defaultRouteStyle = {color: "#00cc33", "weight": 5, "opacity": 0.6};
         var highlightRouteStyle = {color: "#00cc33", "weight": 6, "opacity": 0.8};
         var alternativeRouteStye = {color: "darkgray", "weight": 6, "opacity": 0.8};
+        var polygonStyle = {color: "#FA00FF", "weight": 6, "opacity": 0.8};
+
         var geoJsons = [];
         var firstHeader;
 
@@ -631,6 +661,29 @@ function routeLatLng(request, doQuery) {
 
             geoJsons.push(geojsonFeature);
             mapLayer.addDataToRoutingLayer(geojsonFeature);
+            let polyCoord = [];
+            var marker;
+            for (var polyIndex = 0; polyIndex < request.polygon.length; polyIndex++) {
+                latlng = [request.polygon[polyIndex].lng,request.polygon[polyIndex].lat];
+                polyCoord.push(latlng)
+                generatePolyFlags(polyIndex,latlng,request)
+            }
+            if (request.polygon[0] !== undefined) {
+                polyCoord.push([request.polygon[0].lng,request.polygon[0].lat])
+            }
+
+            const geojsonPolygon = {
+                "type": "Feature",
+                "geometry": {type:"LineString",coordinates:polyCoord},
+                "properties": {
+                    "style": polygonStyle,
+                    name: "route",
+                }
+            };
+                 console.log(geojsonPolygon)
+
+             mapLayer.addDataToPolygonLayer(geojsonPolygon);
+
             var oneTab = $("<div class='route_result_tab'>");
             routeResultsDiv.append(oneTab);
             tabHeader.click(createClickHandler(geoJsons, pathIndex, tabHeader, oneTab, request.hasElevation(), request.useMiles, path.details));
@@ -727,7 +780,21 @@ function routeLatLng(request, doQuery) {
         });
     });
 }
-
+function generatePolyFlags(polyIndex, latlng, request){
+                marker = mapLayer.createPolygonMarker(polyIndex, latlng, request, deletePolygon);
+                marker.on('dragend', function (e) {
+                            mapLayer.clearLayers();
+                            // inconsistent leaflet API: event.target.getLatLng vs. mouseEvent.latlng?
+                            var latlng = e.target.getLatLng();
+                            autocomplete.hide();
+                            console.log(polyIndex)
+                            request.polygon.getIndex(polyIndex).setCoord(latlng.lat, latlng.lng);
+                            //resolveIndex(polyIndex);
+                            // do not wait for resolving and avoid zooming when dragging
+                            request.do_zoom = false;
+                            routeLatLng(request, false);
+                        });
+}
 function mySubmit() {
     var fromStr,
             toStr,
diff --git a/web/src/main/resources/assets/js/map.js b/web/src/main/resources/assets/js/map.js
index 04d2ec9346..631a409c66 100644
--- a/web/src/main/resources/assets/js/map.js
+++ b/web/src/main/resources/assets/js/map.js
@@ -3,8 +3,10 @@ var tileLayers = require('./config/tileLayers.js');
 var translate = require('./translate.js');
 
 var routingLayer;
+var polygonLayer;
 var map;
 var menuStart;
+var polyItem;
 var menuIntermediate;
 var menuEnd;
 var elevationControl = null;
@@ -47,7 +49,7 @@ function adjustMapSize() {
     // somehow this does not work: map.invalidateSize();
 }
 
-function initMap(bounds, setStartCoord, setIntermediateCoord, setEndCoord, selectLayer, useMiles) {
+function initMap(bounds, setStartCoord, setIntermediateCoord, setEndCoord, setPolygonCoord, selectLayer, useMiles) {
     adjustMapSize();
     // console.log("init map at " + JSON.stringify(bounds));
 
@@ -87,6 +89,13 @@ function initMap(bounds, setStartCoord, setIntermediateCoord, setEndCoord, selec
         callback: setStartCoord,
         index: 0
     };
+        var _polyItem = {
+            text: "Add Polygon Coordinate",
+            icon: './img/marker-small-purple.png',
+            callback: setPolygonCoord,
+            index: 3
+        };
+
     var _intItem = {
         text: translate.tr('set_intermediate'),
         icon: './img/marker-small-blue.png',
@@ -103,6 +112,7 @@ function initMap(bounds, setStartCoord, setIntermediateCoord, setEndCoord, selec
     menuStart = map.contextmenu.insertItem(_startItem, _startItem.index);
     menuIntermediate = map.contextmenu.insertItem(_intItem, _intItem.index);
     menuEnd = map.contextmenu.insertItem(_endItem, _endItem.index);
+    menuPoly = map.contextmenu.insertItem(_polyItem, _polyItem.index);
 
     var zoomControl = new L.Control.Zoom({
         position: 'topleft',
@@ -188,6 +198,7 @@ function initMap(bounds, setStartCoord, setIntermediateCoord, setEndCoord, selec
         }).addTo(map);
 
     routingLayer = L.geoJson().addTo(map);
+    polygonLayer = L.geoJson().addTo(map);
 
     routingLayer.options = {
         // use style provided by the 'properties' entry of the geojson added by addDataToRoutingLayer
@@ -208,6 +219,12 @@ function initMap(bounds, setStartCoord, setIntermediateCoord, setEndCoord, selec
         contextmenuInheritItems: false
     };
 
+    polygonLayer.options = {
+        // use style provided by the 'properties' entry of the geojson added by addDataToRoutingLayer
+        style: function (feature) {
+            return feature.properties && feature.properties.style;
+        },
+    };
 }
 
 function focus(coord, zoom, index) {
@@ -222,6 +239,7 @@ function focus(coord, zoom, index) {
 
 module.exports.clearLayers = function () {
     routingLayer.clearLayers();
+    polygonLayer.clearLayers();
 };
 
 module.exports.getRoutingLayer = function () {
@@ -239,6 +257,10 @@ module.exports.addDataToRoutingLayer = function (geoJsonFeature) {
     routingLayer.addData(geoJsonFeature);
 };
 
+module.exports.addDataToPolygonLayer = function (geoJsonFeature) {
+    polygonLayer.addData(geoJsonFeature);
+}
+
 module.exports.eachLayer = function (callback) {
     routingLayer.eachLayer(callback);
 };
@@ -402,6 +424,26 @@ var iconTo = L.icon({
     iconAnchor: [12, 40]
 });
 
+var polygonIcon = L.icon({
+    iconUrl: './img/marker-icon-purple.png',
+    shadowSize: [50, 64],
+    shadowAnchor: [4, 62],
+    iconAnchor: [12, 40]
+});
+
+module.exports.createPolygonMarker = function(index, coord, ghRequest, deletePolygon) {
+    return L.marker([coord[1], coord[0]], {icon: new L.NumberedDivIconPolygon({number: index + 1}), draggable:true,
+          contextmenu: true,
+          contextmenuItems: defaultContextmenuItems.concat([{
+                  text: "Delete from Polygon",
+                  callback: deletePolygon,
+                  disabled: false, // prevent to and from
+                  index: 0
+              }]),
+          contextmenuInheritItems: false})
+    .addTo(polygonLayer);
+}
+
 module.exports.createMarker = function (index, coord, setToEnd, setToStart, deleteCoord, ghRequest) {
     var toFrom = getToFrom(index, ghRequest);
     return L.marker([coord.lat, coord.lng], {
