diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperGPXParserRouteTest.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperGPXParserRouteTest.java
index 839430030c..62a67cfdb9 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperGPXParserRouteTest.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperGPXParserRouteTest.java
@@ -108,10 +108,17 @@ public String parseRoute(String routeType, String vehicle, String[] points) {
 
 		}
 
-		graphHopperUrl = vehicle.equalsIgnoreCase("car") ? (IntegrationTestProperties
-				.getTestProperty("graphHopperWebUrl"))
-				: (IntegrationTestProperties
-						.getTestProperty("graphHopperWebUrl"));
+		
+		if (IntegrationTestProperties.getTestPropertyBool("viaApigee"))
+		{
+			graphHopperUrl = IntegrationTestProperties.getTestProperty("graphHopperWebUrlViaApigee");
+		}
+		else
+		{
+			graphHopperUrl = IntegrationTestProperties.getTestProperty("graphHopperWebUrl");
+		}
+		
+				
 
 		StringBuilder sb = new StringBuilder();
 		sb.append(graphHopperUrl);
diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
index 44dd42298e..78edd746ac 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
@@ -9,7 +9,7 @@
 import java.util.List;
 import java.util.Map;
 
-import uk.co.ordnancesurvey.webtests.IntegrationTestProperties;
+import uk.co.ordnancesurvey.gpx.graphhopper.IntegrationTestProperties;
 import cucumber.api.Scenario;
 import cucumber.api.java.After;
 import cucumber.api.java.Before;
@@ -25,10 +25,24 @@
 	@Given("^I request a route between \"([^\"]*)\" and \"([^\"]*)\" as a \"([^\"]*)\" from RoutingAPI$")
 	public void getRoute(String pointA, String pointB, String routeType)
 			throws InterruptedException {
+		String graphHopperWebUrl;
+		
+		if(IntegrationTestProperties.getTestPropertyBool("viaApigee"))
+		{
+			 graphHopperWebUrl=IntegrationTestProperties
+			.getTestProperty("graphHopperWebUrlViaApigee");
+		}
+		else
+		{
+			 graphHopperWebUrl=IntegrationTestProperties
+					.getTestProperty("graphHopperWebUrl");
+		}
+
+		
+			graphUiUtil = new GraphHopperUIUtil(graphHopperWebUrl);
+					
+					
 
-			graphUiUtil = new GraphHopperUIUtil(
-					IntegrationTestProperties
-							.getTestProperty("graphHopperWebUrl"));
 
 		String testON = IntegrationTestProperties.getTestProperty("testON");
 
@@ -59,10 +73,21 @@ public void getRoute(String pointA, String pointB, String routeType)
 	@Given("^I request a route between \"([^\"]*)\" and \"([^\"]*)\" as a \"([^\"]*)\" from RoutingAPI via \"([^\"]*)\"$")
 	public void getRoute(String pointA, String pointB, String routeType,String pointC)
 			throws InterruptedException {
+		String graphHopperWebUrl;
+		
+		if(IntegrationTestProperties.getTestPropertyBool("viaApigee"))
+		{
+			 graphHopperWebUrl=IntegrationTestProperties
+			.getTestProperty("graphHopperWebUrlViaApigee");
+		}
+		else
+		{
+			 graphHopperWebUrl=IntegrationTestProperties
+					.getTestProperty("graphHopperWebUrl");
+		}
 
 			graphUiUtil = new GraphHopperUIUtil(
-					IntegrationTestProperties
-							.getTestProperty("graphHopperWebUrl"));
+					graphHopperWebUrl);
 
 		String testON = IntegrationTestProperties.getTestProperty("testON");
 
diff --git a/acceptancetesting/src/test/resources/test.properties b/acceptancetesting/src/test/resources/test.properties
index 9d536efa13..04b0938c74 100644
--- a/acceptancetesting/src/test/resources/test.properties
+++ b/acceptancetesting/src/test/resources/test.properties
@@ -1,7 +1,8 @@
 # Exeter Sample ITN
 #graphHopperWebUrl=http://os-gh-ite.elasticbeanstalk.com/
 # Full UK ITN data set
-graphHopperWebUrl=https://ordnance-eu-test.apigee.net/routing_api/
+graphHopperWebUrlViaApigee=https://ordnance-eu-test.apigee.net/routing_api/
+graphHopperWebUrl=https://dpn-env.elasticbeanstalk.com/
 # DPN data set
 #graphHopperWebUrl=http://dpn-env.elasticbeanstalk.com/
 
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/QuarryOrPit.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/QuarryOrPit.java
new file mode 100644
index 0000000000..814c288f77
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/QuarryOrPit.java
@@ -0,0 +1,16 @@
+package com.graphhopper.reader.osgb.dpn;
+
+import com.graphhopper.reader.Way;
+
+/**
+ * Created by sadam on 13/02/15.
+ */
+public class QuarryOrPit extends AbstractOsDpnOsmAttibuteMappingVisitor {
+
+    @Override
+    protected void applyAttributes(Way way)
+    {
+        way.setTag("natural", "excavation");
+    }
+
+}
diff --git a/core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java
index 3d134126c3..f1492f543f 100644
--- a/core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java
@@ -95,6 +95,7 @@
     private boolean blockFords = true;
     protected final int speedBits;
     protected final double speedFactor;
+	protected List<EncoderDecorator> encoderDecorators=null;
 
     /**
      * @param speedBits specify the number of bits used for speed
@@ -188,6 +189,11 @@ public int defineWayBits( int index, int shift )
         acceptBit = 1L << index;
         ferryBit = 2L << index;
 
+        if(null!=encoderDecorators) {
+        	for (EncoderDecorator decorator : encoderDecorators) {
+        		shift = decorator.defineWayBits(shift);
+        	}
+        }
         return shift;
     }
 
@@ -220,7 +226,14 @@ public int defineRelationBits( int index, int shift )
      * Analyze properties of a way and create the routing flags. This method is called in the second
      * parsing step.
      */
-    public abstract long handleWayTags( Way way, long allowed, long relationFlags );
+    public long handleWayTags( Way way, long allowed, long relationFlags ) {
+    	if(null!=encoderDecorators) {
+    		for (EncoderDecorator decorator : encoderDecorators) {
+				relationFlags = decorator.handleWayTags(way, relationFlags);
+			}
+    	}
+    	return relationFlags;
+    };
 
     /**
      * Parse tags on nodes. Node tags can add to speed (like traffic_signals) where the value is
@@ -264,6 +277,14 @@ public long handleNodeTags( Node node )
     @Override
     public InstructionAnnotation getAnnotation( long flags, Translation tr )
     {
+    	if(null!=encoderDecorators) {
+    		for (EncoderDecorator decorator : encoderDecorators) {
+				InstructionAnnotation anno = decorator.getAnnotation(flags, tr);
+				if(!anno.isEmpty()) {
+					return anno;
+				}
+			}
+    	}
         return InstructionAnnotation.EMPTY;
     }
 
@@ -487,6 +508,11 @@ protected static int parseDuration( String str )
      */
     public void applyWayTags( Way way, EdgeIteratorState edge )
     {
+    	if(null!=encoderDecorators) {
+    		for (EncoderDecorator decorator : encoderDecorators) {
+    			
+			}
+    	}
     }
 
     /**
diff --git a/core/src/main/java/com/graphhopper/routing/util/EncoderDecorator.java b/core/src/main/java/com/graphhopper/routing/util/EncoderDecorator.java
new file mode 100644
index 0000000000..be4fddbcde
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/routing/util/EncoderDecorator.java
@@ -0,0 +1,11 @@
+package com.graphhopper.routing.util;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.util.InstructionAnnotation;
+import com.graphhopper.util.Translation;
+
+public interface EncoderDecorator {
+	int defineWayBits(int shift);
+	long handleWayTags(Way way, long encoded);
+	public InstructionAnnotation getAnnotation(long flags, Translation tr);
+}
diff --git a/core/src/main/java/com/graphhopper/routing/util/EncodingManager.java b/core/src/main/java/com/graphhopper/routing/util/EncodingManager.java
index 32deb6d820..af11ee5b84 100644
--- a/core/src/main/java/com/graphhopper/routing/util/EncodingManager.java
+++ b/core/src/main/java/com/graphhopper/routing/util/EncodingManager.java
@@ -149,10 +149,10 @@ public int getBytesForFlags()
 
             AbstractFlagEncoder fe;
             if (entry.equals(CAR))
-                fe = new CarFlagEncoder(entryVal);
+                fe = new OsCarFlagEncoder(entryVal);
 
             else if (entry.equals(BIKE))
-                fe = new BikeFlagEncoder(entryVal);
+                fe = new OsBikeFlagEncoder(entryVal);
 
             else if (entry.equals(BIKE2))
                 fe = new Bike2WeightFlagEncoder(entryVal);
diff --git a/core/src/main/java/com/graphhopper/routing/util/OsAvoidanceDecorator.java b/core/src/main/java/com/graphhopper/routing/util/OsAvoidanceDecorator.java
new file mode 100644
index 0000000000..f0f9c9a4f7
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/routing/util/OsAvoidanceDecorator.java
@@ -0,0 +1,171 @@
+package com.graphhopper.routing.util;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.util.InstructionAnnotation;
+import com.graphhopper.util.Translation;
+
+/**
+ * Created by sadam on 4/15/15.
+ */
+public class OsAvoidanceDecorator implements EncoderDecorator {
+    private EncodedValue wayTypeEncoder;
+
+
+    protected enum AvoidanceType
+    {
+        MOTORWAYS(1) {
+            @Override
+            public boolean isValidForWay(Way way) {
+               return way.hasTag("highway", "Motorway", "motorway");
+            }
+        },
+        TOLL(2) {
+            @Override
+            public boolean isValidForWay(Way way) {
+                return way.hasTag("toll", "yes");
+            }
+        },
+        Boulders(4) {
+            @Override
+            public boolean isValidForWay(Way way) {
+                return hasTag(way, "natural", "boulder");
+            }
+        },
+        Cliff(8) {
+            @Override
+            public boolean isValidForWay(Way way) {
+                return hasTag(way, "natural","cliff");
+            }
+        },
+        Marsh(16) {
+            @Override
+            public boolean isValidForWay(Way way) {
+                return way.hasTag("wetland", "marsh");
+            }
+        },
+        Mud(32) {
+            @Override
+            public boolean isValidForWay(Way way) {
+                return hasTag(way, "natural", "mud");
+            }
+        },
+        Sand(64) {
+            @Override
+            public boolean isValidForWay(Way way) {
+                return hasTag(way, "natural", "sand");
+            }
+        },
+        Scree(128) {
+            @Override
+            public boolean isValidForWay(Way way) {
+                return hasTag(way, "natural", "scree");
+            }
+        },
+        Shingle(256) {
+            @Override
+            public boolean isValidForWay(Way way) {
+                return hasTag(way, "natural", "shingle");
+            }
+        },
+        Spoil(512) {
+            @Override
+            public boolean isValidForWay(Way way) {
+                return hasTag(way, "natural", "spoil");
+            }
+        },
+        Rock(1024) {
+            @Override
+            public boolean isValidForWay(Way way) {
+                return hasTag(way, "natural", "rock");
+            }
+        },
+        TidalWater(2048) {
+            @Override
+            public boolean isValidForWay(Way way) {
+                return hasTag(way, "natural", "water")  && way.hasTag("tidal", "yes");
+            }
+        },
+        InlandWater(4096) {
+            @Override
+            public boolean isValidForWay(Way way) {
+                return hasTag(way, "natural", "water")  && way.hasTag("tidal", "no");
+            }
+        },
+        QuarryOrPit(8192) {
+            @Override
+            public boolean isValidForWay(Way way) {
+                return hasTag(way, "natural", "excavation");
+            }
+        };
+
+        private static boolean hasTag(Way way, String key, String value) {
+            String wayTag = way.getTag(key);
+            if(null!=wayTag) {
+                String[] values = wayTag.split(",");
+                for (String tvalue : values) {
+                    if (tvalue.equals(value)) {
+                        return true;
+                    }
+                }
+            }
+            return false;
+        }
+
+
+        private final long value;
+
+        private AvoidanceType( long value )
+        {
+            this.value = value;
+        }
+
+        public long getValue()
+        {
+            return value;
+        }
+
+        public boolean isValidForWay(Way way) {
+            return false;
+        }
+
+
+
+    }
+
+    public int defineWayBits(int shift) {
+        wayTypeEncoder = new EncodedValue("WayType", shift, 14, 1, 0, 16383, true);
+        shift += wayTypeEncoder.getBits();
+        return shift;
+    }
+
+    public long handleWayTags(Way way, long encoded) {
+        long avoidanceValue=0;
+
+        for (AvoidanceType aType: AvoidanceType.values()) {
+            if(aType.isValidForWay(way)) {
+                avoidanceValue += aType.getValue();
+            }
+        }
+        return wayTypeEncoder.setValue(encoded, avoidanceValue);
+    }
+
+    public InstructionAnnotation getAnnotation( long flags, Translation tr )
+    {
+        long wayType = wayTypeEncoder.getValue(flags);
+        String wayName = getWayName(wayType, tr);
+        return new InstructionAnnotation(0, wayName);
+    }
+
+    private String getWayName(long wayType, Translation tr) {
+        String wayName="";
+        for (AvoidanceType aType: AvoidanceType.values()) {
+            if ((wayType & aType.getValue()) == aType.getValue()) {
+                wayName += " ";
+                wayName += aType.name();
+            }
+        }
+
+        return wayName;
+    }
+
+}
diff --git a/core/src/main/java/com/graphhopper/routing/util/OsBikeFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/OsBikeFlagEncoder.java
new file mode 100644
index 0000000000..11946aefba
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/routing/util/OsBikeFlagEncoder.java
@@ -0,0 +1,31 @@
+package com.graphhopper.routing.util;
+
+import java.util.ArrayList;
+
+public class OsBikeFlagEncoder extends BikeFlagEncoder {
+	
+		public OsBikeFlagEncoder() {
+	        super(4, 2, 0);
+	        setOsAvoidanceDecorator();
+	    }
+
+	    public OsBikeFlagEncoder( String propertiesStr )
+	    {
+	    	super(propertiesStr);
+	    	setOsAvoidanceDecorator();
+	    }
+
+	    public OsBikeFlagEncoder( int speedBits, double speedFactor, int maxTurnCosts )
+	    {
+	    	super(speedBits, speedFactor, maxTurnCosts);
+	    	 setOsAvoidanceDecorator();
+	    	
+	    }
+
+		private void setOsAvoidanceDecorator() {
+			if(null==encoderDecorators) {
+				encoderDecorators = new ArrayList<EncoderDecorator>(2);
+			}
+			encoderDecorators.add(new OsAvoidanceDecorator());
+		}
+}
diff --git a/core/src/main/java/com/graphhopper/routing/util/OsCarFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/OsCarFlagEncoder.java
new file mode 100644
index 0000000000..327c3de2ce
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/routing/util/OsCarFlagEncoder.java
@@ -0,0 +1,29 @@
+package com.graphhopper.routing.util;
+
+import java.util.ArrayList;
+
+public class OsCarFlagEncoder extends CarFlagEncoder {
+	public OsCarFlagEncoder() {
+		super(5, 5, 0);
+		setOsAvoidanceDecorator();
+	}
+
+	public OsCarFlagEncoder(String propertiesStr) {
+		super(propertiesStr);
+		setOsAvoidanceDecorator();
+	}
+
+	public OsCarFlagEncoder(int speedBits, double speedFactor, int maxTurnCosts) {
+		super(speedBits, speedFactor, maxTurnCosts);
+		setOsAvoidanceDecorator();
+
+	}
+
+	private void setOsAvoidanceDecorator() {
+		if (null == encoderDecorators) {
+			encoderDecorators = new ArrayList<EncoderDecorator>(2);
+		}
+		encoderDecorators.add(new OsAvoidanceDecorator());
+	}
+
+}
diff --git a/core/src/main/java/com/graphhopper/routing/util/OsFootFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/OsFootFlagEncoder.java
new file mode 100644
index 0000000000..f4ade0b8a7
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/routing/util/OsFootFlagEncoder.java
@@ -0,0 +1,31 @@
+package com.graphhopper.routing.util;
+
+import java.util.ArrayList;
+
+public class OsFootFlagEncoder extends FootFlagEncoder {
+	public OsFootFlagEncoder() {
+        super(4, 1);
+        setOsAvoidanceDecorator();
+    }
+
+    public OsFootFlagEncoder( String propertiesStr )
+    {
+    	super(propertiesStr);
+    	setOsAvoidanceDecorator();
+    }
+
+    public OsFootFlagEncoder( int speedBits, double speedFactor, int maxTurnCosts )
+    {
+    	super(speedBits, speedFactor);
+    	 setOsAvoidanceDecorator();
+    	
+    }
+
+	private void setOsAvoidanceDecorator() {
+		if(null==encoderDecorators) {
+			encoderDecorators = new ArrayList<EncoderDecorator>(2);
+		}
+		encoderDecorators.add(new OsAvoidanceDecorator());
+	}
+
+}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/QuarryOrPitTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/QuarryOrPitTest.java
new file mode 100644
index 0000000000..f05499e808
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/QuarryOrPitTest.java
@@ -0,0 +1,36 @@
+package com.graphhopper.reader.osgb.dpn;
+
+import static org.mockito.Mockito.verify;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Ignore;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+
+public class QuarryOrPitTest {
+	 static OsDpnOsmAttributeMappingVisitor visitor;
+	    @Mock
+	    Way way;
+
+	    @BeforeClass
+	    public static void createVisitor() {
+	        visitor = new QuarryOrPit();
+	    }
+
+	    @Before
+	    public void init() {
+	        MockitoAnnotations.initMocks(this);
+	    }
+
+	    @Test
+        @Ignore
+	    public void testVisitWayAttribute() throws Exception {
+	        visitor.visitWayAttribute("quarryorpit", way);
+	        verify(way).setTag("natural", "excavation");
+	    }
+
+}
diff --git a/core/src/test/java/com/graphhopper/routing/util/OsAvoidanceDecoratorTest.java b/core/src/test/java/com/graphhopper/routing/util/OsAvoidanceDecoratorTest.java
new file mode 100644
index 0000000000..ed574bab36
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/routing/util/OsAvoidanceDecoratorTest.java
@@ -0,0 +1,177 @@
+package com.graphhopper.routing.util;
+
+import com.graphhopper.reader.Way;
+
+import com.graphhopper.reader.osgb.itn.OSITNWay;
+import com.graphhopper.util.InstructionAnnotation;
+import org.junit.Before;
+import org.junit.Test;
+
+import static org.junit.Assert.*;
+
+public class OsAvoidanceDecoratorTest {
+    OsAvoidanceDecorator osAvoidances = new OsAvoidanceDecorator();
+
+    @Before
+    public void defineWayBits() {
+        osAvoidances.defineWayBits(0);
+    }
+
+    @Test
+    public void testMotorwayAttributeStorage() {
+        Way way = new OSITNWay(1L);
+        way.setTag("highway", "motorway");
+        long wayFlag = osAvoidances.handleWayTags(way,0);
+        assertEquals(OsAvoidanceDecorator.AvoidanceType.MOTORWAYS.getValue(), wayFlag);
+        way.setTag("highway", "Motorway");
+        wayFlag = osAvoidances.handleWayTags(way,0);
+        assertEquals(OsAvoidanceDecorator.AvoidanceType.MOTORWAYS.getValue(), wayFlag);
+
+    }
+
+    @Test
+    public void testTollAttributeStorage() {
+        Way way = new OSITNWay(1L);
+        way.setTag("toll", "yes");
+        long wayFlag = osAvoidances.handleWayTags(way,0);
+        assertEquals(OsAvoidanceDecorator.AvoidanceType.TOLL.getValue(), wayFlag);
+
+    }
+
+    @Test
+    public void testBoulderAttributeStorage() {
+        Way way = new OSITNWay(1L);
+        way.setTag("natural", "boulder");
+        long wayFlag = osAvoidances.handleWayTags(way,0);
+        assertEquals(OsAvoidanceDecorator.AvoidanceType.Boulders.getValue(), wayFlag);
+
+    }
+
+    @Test
+    public void testCliffAttributeStorage() {
+        Way way = new OSITNWay(1L);
+        way.setTag("natural", "cliff");
+        long wayFlag = osAvoidances.handleWayTags(way,0);
+        assertEquals(OsAvoidanceDecorator.AvoidanceType.Cliff.getValue(), wayFlag);
+
+    }
+
+    @Test
+    public void testMarshAttributeStorage() {
+        Way way = new OSITNWay(1L);
+        way.setTag("wetland", "marsh");
+        long wayFlag = osAvoidances.handleWayTags(way,0);
+        assertEquals(OsAvoidanceDecorator.AvoidanceType.Marsh.getValue(), wayFlag);
+
+    }
+
+    @Test
+    public void testMudAttributeStorage() {
+        Way way = new OSITNWay(1L);
+        way.setTag("natural", "mud");
+        long wayFlag = osAvoidances.handleWayTags(way,0);
+        assertEquals(OsAvoidanceDecorator.AvoidanceType.Mud.getValue(), wayFlag);
+
+    }
+
+    @Test
+    public void testSandAttributeStorage() {
+        Way way = new OSITNWay(1L);
+        way.setTag("natural", "sand");
+        long wayFlag = osAvoidances.handleWayTags(way,0);
+        assertEquals(OsAvoidanceDecorator.AvoidanceType.Sand.getValue(), wayFlag);
+
+    }
+
+    @Test
+    public void testScreeAttributeStorage() {
+        Way way = new OSITNWay(1L);
+        way.setTag("natural", "scree");
+        long wayFlag = osAvoidances.handleWayTags(way,0);
+        assertEquals(OsAvoidanceDecorator.AvoidanceType.Scree.getValue(), wayFlag);
+
+    }
+
+    @Test
+    public void testShingleAttributeStorage() {
+        Way way = new OSITNWay(1L);
+        way.setTag("natural", "shingle");
+        long wayFlag = osAvoidances.handleWayTags(way,0);
+        assertEquals(OsAvoidanceDecorator.AvoidanceType.Shingle.getValue(), wayFlag);
+
+    }
+
+    @Test
+    public void testSpoilAttributeStorage() {
+        Way way = new OSITNWay(1L);
+        way.setTag("natural", "spoil");
+        long wayFlag = osAvoidances.handleWayTags(way,0);
+        assertEquals(OsAvoidanceDecorator.AvoidanceType.Spoil.getValue(), wayFlag);
+
+    }
+
+    @Test
+    public void testTidalWaterAttributeStorage() {
+        Way way = new OSITNWay(1L);
+        way.setTag("natural", "water");
+        way.setTag("tidal", "yes");
+        long wayFlag = osAvoidances.handleWayTags(way,0);
+        assertEquals(OsAvoidanceDecorator.AvoidanceType.TidalWater.getValue(), wayFlag);
+
+    }
+
+    @Test
+    public void testInlandWaterAttributeStorage() {
+        Way way = new OSITNWay(1L);
+        way.setTag("natural", "water");
+        way.setTag("tidal","no");
+        long wayFlag = osAvoidances.handleWayTags(way,0);
+        assertEquals(OsAvoidanceDecorator.AvoidanceType.InlandWater.getValue(), wayFlag);
+
+    }
+
+    @Test
+    public void testQuarryOrPitAttributeStorage() {
+        Way way = new OSITNWay(1L);
+        way.setTag("natural", "excavation");
+        long wayFlag = osAvoidances.handleWayTags(way,0);
+        assertEquals(OsAvoidanceDecorator.AvoidanceType.QuarryOrPit.getValue(), wayFlag);
+
+    }
+
+    @Test
+    public void testMultiAttributeStorage() {
+        Way way = new OSITNWay(1L);
+        way.setTag("highway", "motorway");
+        way.setTag("natural", "excavation");
+        long wayFlag = osAvoidances.handleWayTags(way,0);
+        //BITMASK test?
+        assertEquals(OsAvoidanceDecorator.AvoidanceType.QuarryOrPit.getValue(), wayFlag - OsAvoidanceDecorator.AvoidanceType.MOTORWAYS.getValue());
+        assertEquals(OsAvoidanceDecorator.AvoidanceType.MOTORWAYS.getValue(), wayFlag  - OsAvoidanceDecorator.AvoidanceType.QuarryOrPit.getValue() );
+
+    }
+
+    @Test
+    public void testMultiEqualAttributeStorage() {
+        Way way = new OSITNWay(1L);
+        way.setTag("natural", "sand,excavation");
+        long wayFlag = osAvoidances.handleWayTags(way,0);
+        //BITMASK test?
+        assertEquals(OsAvoidanceDecorator.AvoidanceType.QuarryOrPit.getValue(), wayFlag - OsAvoidanceDecorator.AvoidanceType.Sand.getValue());
+        assertEquals(OsAvoidanceDecorator.AvoidanceType.Sand.getValue(), wayFlag  - OsAvoidanceDecorator.AvoidanceType.QuarryOrPit.getValue() );
+
+    }
+
+    @Test
+    public void testMultiEqualAttributeRetrieval() {
+        Way way = new OSITNWay(1L);
+        way.setTag("natural", "sand,excavation");
+        long wayFlag = osAvoidances.handleWayTags(way,0);
+        //BITMASK test?
+        assertEquals(OsAvoidanceDecorator.AvoidanceType.QuarryOrPit.getValue(), wayFlag - OsAvoidanceDecorator.AvoidanceType.Sand.getValue());
+        assertEquals(OsAvoidanceDecorator.AvoidanceType.Sand.getValue(), wayFlag  - OsAvoidanceDecorator.AvoidanceType.QuarryOrPit.getValue() );
+        InstructionAnnotation annotation = osAvoidances.getAnnotation(wayFlag, null);
+        assertEquals(" Sand QuarryOrPit", annotation.getMessage());
+    }
+
+}
\ No newline at end of file
