diff --git a/web/src/main/java/com/graphhopper/http/GHBaseServlet.java b/web/src/main/java/com/graphhopper/http/GHBaseServlet.java
index 7affd88b61..49fe1da02d 100644
--- a/web/src/main/java/com/graphhopper/http/GHBaseServlet.java
+++ b/web/src/main/java/com/graphhopper/http/GHBaseServlet.java
@@ -203,7 +203,6 @@ protected double getDoubleParam( HttpServletRequest req, String string, double _
 				infoPoints.add(point);
 			} else
 			{
-				System.out.println("Throw an exception");
 				throw new InvalidParameterException(
 						"Point "
 								+ str
diff --git a/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java b/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
index 13ec79198b..553e7cc329 100644
--- a/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
+++ b/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
@@ -111,7 +111,7 @@ public GHResponse getGHResponse( HttpServletRequest httpReq, HttpServletResponse
 		String prettyString = getParam(httpReq, "pretty", "true");
 		String avoidancesString = getParam(httpReq, "avoidances", null);
 		String noThroughAccessString = getParam(httpReq, "private", "true");
-		String srs = getParam(httpReq, "srs", "bng");
+		String srs = getParam(httpReq, "srs", defaultSRS);
 		String outputSrs = getParam(httpReq, "output_srs", srs);
 
 		GHResponse ghRsp = null;
diff --git a/web/src/main/java/com/graphhopper/http/NearestServlet.java b/web/src/main/java/com/graphhopper/http/NearestServlet.java
index 1b526c3d82..a0f9b89956 100644
--- a/web/src/main/java/com/graphhopper/http/NearestServlet.java
+++ b/web/src/main/java/com/graphhopper/http/NearestServlet.java
@@ -41,6 +41,7 @@
 import com.graphhopper.util.Helper;
 import com.graphhopper.util.shapes.GHPoint;
 import com.graphhopper.util.shapes.GHPoint3D;
+import com.graphhopper.util.shapes.GHResponseCoordinateTransformer;
 
 /**
  * @author svantulden
@@ -58,18 +59,24 @@ public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes )
 	{
 		GHResponse ghRsp = null;
 		Map<String, Object> map = new HashMap<>();
+		GHResponseCoordinateTransformer transformer = null;
 		try
 		{
 			ApiResource.NEAREST.checkAllRequestParameters(httpReq);
+			String srs = getParam(httpReq, "srs", defaultSRS);
+			String outputSrs = getParam(httpReq, "output_srs", srs);
 
 			List<GHPoint> infoPoints = getPoints(httpReq, "point");
 			if (infoPoints.size() > 1)
 			{
 				throw new InvalidParameterException(
-				        "Only one point should be specified and it must be a comma separated coordinate in WGS84 projection.");
+				        "Only one point should be specified and it must be a comma separated coordinate in "
+				        + srs
+				        + " projection.");
 			}
-
+			
 			boolean enabledElevation = getBooleanParam(httpReq, "elevation", false);
+			transformer = new GHResponseCoordinateTransformer(outputSrs);
 
 			GHPoint place = infoPoints.get(0);
 			LocationIndex index = hopper.getLocationIndex();
@@ -98,6 +105,8 @@ public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes )
 		} catch (NoSuchParameterException | MissingParameterException | InvalidParameterException e)
 		{
 			ghRsp = new GHResponse().addError(e);
+		} catch (IllegalArgumentException iae) {
+			ghRsp = new GHResponse().addError(new InvalidParameterException(iae.getMessage()));
 		}
 
 		if (ghRsp != null && ghRsp.hasErrors())
@@ -106,6 +115,7 @@ public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes )
 			writeJsonError(httpRes, SC_BAD_REQUEST, new JSONObject(map));
 		} else
 		{
+			transformer.transformCoordinates(ghRsp);
 			writeJson(httpReq, httpRes, new JSONObject(map));
 		}
 	}
diff --git a/web/src/test/java/com/graphhopper/http/NearestServletTest.java b/web/src/test/java/com/graphhopper/http/NearestServletTest.java
index fd2b082b8d..014f2f4b06 100644
--- a/web/src/test/java/com/graphhopper/http/NearestServletTest.java
+++ b/web/src/test/java/com/graphhopper/http/NearestServletTest.java
@@ -101,6 +101,9 @@ public void testDoGetHttpServletRequestHttpServletResponseWithMoreThanOnePoint()
         nearestServlet.doGet(httpServletRequest, httpServletResponse);
 
         writer.flush();
+        System.err.println(FileUtils
+                .readFileToString(new File("httpServletResponseContents"), "UTF-8")
+                );
         assertTrue(FileUtils
                 .readFileToString(new File("httpServletResponseContents"), "UTF-8")
                 .contains(
