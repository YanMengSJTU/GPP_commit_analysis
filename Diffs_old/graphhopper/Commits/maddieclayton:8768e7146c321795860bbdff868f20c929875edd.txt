diff --git a/core/src/main/java/com/graphhopper/Main.java b/core/src/main/java/com/graphhopper/Main.java
index c6b46e0816..9425f5c2b6 100644
--- a/core/src/main/java/com/graphhopper/Main.java
+++ b/core/src/main/java/com/graphhopper/Main.java
@@ -19,7 +19,7 @@ public static void main(String[] args) {
 
 		hopper.importOrLoad();
 
-		GHRequest req = new GHRequest(40.3524738, -74.6511219, 40.3884395, -74.6551584).
+		GHRequest req = new GHRequest(40.3453849, -74.663214, 40.3723288, 74.645158).
 		    setVehicle("bike").setAlgorithm(AlgorithmOptions.ASTAR);
 		GHResponse res = hopper.route(req);
 		
diff --git a/core/src/main/java/com/graphhopper/routing/AStar.java b/core/src/main/java/com/graphhopper/routing/AStar.java
index 7ea376edd2..074fc7a4d3 100755
--- a/core/src/main/java/com/graphhopper/routing/AStar.java
+++ b/core/src/main/java/com/graphhopper/routing/AStar.java
@@ -22,7 +22,6 @@
 import gnu.trove.map.hash.TIntObjectHashMap;
 
 import java.util.PriorityQueue;
-import java.util.HashMap;
 
 import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.routing.util.TraversalMode;
@@ -34,11 +33,6 @@
 import com.graphhopper.util.EdgeExplorer;
 import com.graphhopper.util.EdgeIterator;
 
-import com.graphhopper.routing.safety.ColorMapParser;
-import com.graphhopper.routing.safety.NodeInformation;
-import com.graphhopper.routing.safety.OSMParser;
-import com.graphhopper.routing.safety.Way;
-
 /**
  * This class implements the A* algorithm according to
  * http://en.wikipedia.org/wiki/A*_search_algorithm
@@ -56,7 +50,7 @@
     private AStarEntry currEdge;
     private int to1 = -1;
 
-    public AStar( Graph g, FlagEncoder encoder, Weighting weighting, TraversalMode tMode )
+    public AStar( Graph g, FlagEncoder encoder, Weighting weighting, TraversalMode tMode)
     {
         super(g, encoder, weighting, tMode);
         initCollections(1000);
@@ -98,16 +92,6 @@ public Path calcPath( int from, int to )
 
     private Path runAlgo()
     {
-        HashMap<Long, NodeInformation> nodeMap = new HashMap<Long, NodeInformation>();
-        HashMap<Long, Way> wayMap = new HashMap<Long, Way>();
-        HashMap<Long, HashMap<Long, Integer>> scores = new HashMap<Long, HashMap<Long, Integer>>();
-        double maxLong = -74.65986;
-        double minLat = 40.34993;
-        double minLong = -74.66236;
-        double maxLat = 40.35111;
-        OSMParser.parseFile(nodeMap, wayMap);
-        ColorMapParser.parseFile(nodeMap, wayMap, scores);
-
         double currWeightToGoal, estimationFullWeight;
         EdgeExplorer explorer = outEdgeExplorer;
         while (true)
@@ -128,9 +112,7 @@ private Path runAlgo()
 
                 int neighborNode = iter.getAdjNode();
                 int traversalId = traversalMode.createTraversalId(iter, false);
-                int safetyWeight = ColorMapParser.getSafetyWeight((long) currVertex,
-                    (long) neighborNode, scores);
-                double alreadyVisitedWeight = (weighting.calcWeight(iter, false, currEdge.edge))*safetyWeight
+                double alreadyVisitedWeight = (weighting.calcWeight(iter, false, currEdge.edge))
                         + currEdge.weightOfVisitedPath;
                 if (Double.isInfinite(alreadyVisitedWeight))
                     continue;
diff --git a/core/src/main/java/com/graphhopper/routing/safety/ColorMapParser.java b/core/src/main/java/com/graphhopper/routing/safety/ColorMapParser.java
index 36e09441af..a507821dd6 100644
--- a/core/src/main/java/com/graphhopper/routing/safety/ColorMapParser.java
+++ b/core/src/main/java/com/graphhopper/routing/safety/ColorMapParser.java
@@ -14,8 +14,8 @@
 
 public class ColorMapParser {
 
-    public static void parseFile(HashMap<Long, NodeInformation> nodeMap, 
-        HashMap<Long, Way> wayMap, HashMap<Long, HashMap<Long, Integer>> scores) {
+    public static HashMap<Long, HashMap<Long, Integer>> parseFile(HashMap<Long, NodeInformation> nodeMap, HashMap<Long, Way> wayMap) {
+        HashMap<Long, HashMap<Long, Integer>> scores = new HashMap<Long, HashMap<Long, Integer>>();
         try {
             File file = new File("colorinfo.xls");
             FileInputStream fs = new FileInputStream(file);
@@ -229,6 +229,7 @@ else if (inPath) {
         } catch(Exception ioe) {
             ioe.printStackTrace();
         }
+        return scores;
     }
 
     public static int getSafetyWeight(long first, long second, HashMap<Long, HashMap<Long, Integer>> scores) {
@@ -245,11 +246,10 @@ public static int getSafetyWeight(long first, long second, HashMap<Long, HashMap
     }
 
     public static void main(String[] args) {
-        HashMap<Long, NodeInformation> nodeMap = new HashMap<Long, NodeInformation>();
+    	HashMap<Long, NodeInformation> nodeMap = new HashMap<Long, NodeInformation>();
         HashMap<Long, Way> wayMap = new HashMap<Long, Way>();
-        HashMap<Long, HashMap<Long, Integer>> scores = new HashMap<Long, HashMap<Long, Integer>>();
         OSMParser.parseFile(nodeMap, wayMap);
-        parseFile(nodeMap, wayMap, scores);
+    	HashMap<Long, HashMap<Long, Integer>> scores = parseFile(nodeMap, wayMap);
         for (Long key : scores.keySet()) {
         	for (Long key1 : scores.get(key).keySet()) {
         		System.out.println(key + " " + key1 + " " + 
