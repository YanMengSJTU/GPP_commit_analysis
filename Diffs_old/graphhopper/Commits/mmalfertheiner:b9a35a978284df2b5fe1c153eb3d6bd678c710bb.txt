diff --git a/android/app/pom.xml b/android/app/pom.xml
index 5ac47188b4..7940a07587 100644
--- a/android/app/pom.xml
+++ b/android/app/pom.xml
@@ -141,7 +141,7 @@
     </build>
     
     <repositories>        		
-        <!-- Android is in maven central! To install android sdk in a continuos integration environment see http://stackoverflow.com/q/4681697/194609
+        <!-- Android is in maven central! To install android sdk in a continuos integration environment see http://stackoverflow.com/processNoise/4681697/194609
         For mapsforge see scripts/maven-install-mapsforge.sh  -->
     </repositories>
     
diff --git a/core/src/main/java/com/graphhopper/reader/OSMReader.java b/core/src/main/java/com/graphhopper/reader/OSMReader.java
index c17521a5a7..ec4d007ae6 100644
--- a/core/src/main/java/com/graphhopper/reader/OSMReader.java
+++ b/core/src/main/java/com/graphhopper/reader/OSMReader.java
@@ -372,13 +372,30 @@ void processWay( OSMWay way )
         if(osmNodeIds.size() > 3) {
 
             double[] tmpElevations = new double[osmNodeIds.size()];
+            double[] tmpDistances = new double[osmNodeIds.size()];
 
             for (int i = 0; i < tmpElevations.length; i++) {
                 int osmNodeId = getNodeMap().get(osmNodeIds.get(i));
                 tmpElevations[i] = getElevation(osmNodeId);
+
+                if( i > 0) {
+                    int first = getNodeMap().get(osmNodeIds.get(i-1));
+                    int last = getNodeMap().get(osmNodeIds.get(i));
+                    double firstLat = getTmpLatitude(first), firstLon = getTmpLongitude(first);
+                    double lastLat = getTmpLatitude(last), lastLon = getTmpLongitude(last);
+
+                    if (!Double.isNaN(firstLat) && !Double.isNaN(firstLon) && !Double.isNaN(lastLat) && !Double.isNaN(lastLon))
+                    {
+                        double estimatedDist = distCalc.calcDist(firstLat, firstLon, lastLat, lastLon);
+                        tmpDistances[i] = estimatedDist;
+                    }
+
+                } else {
+                    tmpDistances[i] = 0.0;
+                }
             }
 
-            SimpleKalmanFilter skf = new SimpleKalmanFilter(tmpElevations, tmpElevations[0], 1, 6, 0.2);
+            SimpleKalmanFilter skf = new SimpleKalmanFilter(tmpElevations, tmpElevations[0], 1, 6, tmpDistances, 20);
             skf.run();
 
             double[] estimatedElevations = skf.getEstimatedValues();
diff --git a/core/src/main/java/com/graphhopper/reader/SimpleKalmanFilter.java b/core/src/main/java/com/graphhopper/reader/SimpleKalmanFilter.java
index 1bfebdfd23..c1206b9e8a 100644
--- a/core/src/main/java/com/graphhopper/reader/SimpleKalmanFilter.java
+++ b/core/src/main/java/com/graphhopper/reader/SimpleKalmanFilter.java
@@ -11,52 +11,75 @@
 
 public class SimpleKalmanFilter {
 
-    private double[] z; //Array with original values
-    private double[] x; //Array with estimated values
-    private double[] p; //Array with error covariance
+    private double[] originalMeasurements; //Array with original values
+    private double[] estimates; //Array with estimated values
+    private double[] error; //Array with error covariance
 
     private double r;   //Environment noise
-    private double q;
+    private Double q;
+
+    private double[] processNoise;
+    private int processNoiseScalingFactor;
 
     public SimpleKalmanFilter(double[] measurement, double x0, double p0, double eNoise, double q) {
 
-        z = measurement;
-        x = new double[measurement.length + 1]; //because we have a prior
-        p = new double[measurement.length + 1];
+        originalMeasurements = measurement;
+        estimates = new double[measurement.length + 1]; //because we have a prior
+        error = new double[measurement.length + 1];
 
-        x[0] = x0;
-        p[0] = p0;
+        estimates[0] = x0;
+        error[0] = p0;
 
         r = eNoise;
         this.q = q;
 
     }
 
+    public SimpleKalmanFilter(double[] measurement, double x0, double p0, double eNoise, double[] processNoise, int processNoiseScalingFactor) {
+        originalMeasurements = measurement;
+        estimates = new double[measurement.length + 1]; //because we have a prior
+        error = new double[measurement.length + 1];
+
+        estimates[0] = x0;
+        error[0] = p0;
+
+        r = eNoise;
+        this.processNoise = processNoise;
+        this.processNoiseScalingFactor = processNoiseScalingFactor;
+    }
+
+    private double getQ(int index){
+        if(q != null)
+            return q;
+
+        return processNoise[index] / processNoiseScalingFactor;
+    }
+
     public void run(){
 
-        for(int i = 0; i < z.length; i++){
+        for(int i = 0; i < originalMeasurements.length; i++){
 
             // Time update
-            double xPrior = 1 * x[i];
-            double pPrior = p[i] + q;
+            double xPrior = 1 * estimates[i];
+            double pPrior = error[i] + getQ(i);
 
             // Measurement update
             double kalmanGain = pPrior / (pPrior + r);
 
-            double estimate = xPrior + kalmanGain * (z[i] - xPrior);
-            x[i+1] = estimate;
+            double estimate = xPrior + kalmanGain * (originalMeasurements[i] - xPrior);
+            estimates[i+1] = estimate;
 
             double error = (1 - kalmanGain) * pPrior;
-            p[i+1] = error;
+            this.error[i+1] = error;
         }
 
     }
 
     public double[] getEstimatedValues(){
 
-        if(x != null){
+        if(estimates != null){
 
-            return Arrays.copyOfRange(x, 1, x.length);
+            return Arrays.copyOfRange(estimates, 1, estimates.length);
 
         }
 
diff --git a/docs/web/api-doc.md b/docs/web/api-doc.md
index 4b0027bd75..69299b8dc9 100644
--- a/docs/web/api-doc.md
+++ b/docs/web/api-doc.md
@@ -117,7 +117,7 @@ paths[0].instructions[0].turn_angle           | [optional] Only available for US
         "time": 0
       }
     ],
-    "points": "oxg_Iy|ppAl@wCdE}LfFsN|@_Ej@eEtAaMh@sGVuDNcDb@{PFyGdAi]FoC?q@sXQ_@?",
+    "points": "oxg_Iy|ppAl@wCdE}LfFsN|@_Ej@eEtAaMh@sGVuDNcDb@{PFyGdAi]FoC?processNoise@sXQ_@?",
     "points_encoded": true,
     "time": 129290
   }]
diff --git a/docs/web/open-search.md b/docs/web/open-search.md
index ce5f526239..9c7e423166 100644
--- a/docs/web/open-search.md
+++ b/docs/web/open-search.md
@@ -11,6 +11,6 @@ Add GraphHopper Maps to your Browser
 
 ## Chrome
 
-1. Open your settings in chrome and go to 'search' to add a new search engine. Use the URL `http://graphhopper.com/maps/?q=%s`
+1. Open your settings in chrome and go to 'search' to add a new search engine. Use the URL `http://graphhopper.com/maps/?processNoise=%s`
 2. Finally search via GraphHopper Maps: type 'gh ' and then put 'p:' before your locations.
 ![chrome](http://karussell.files.wordpress.com/2013/08/chrome.png)
\ No newline at end of file
diff --git a/graphhopper.sh b/graphhopper.sh
index 02e344e8db..31444a70fd 100755
--- a/graphhopper.sh
+++ b/graphhopper.sh
@@ -296,7 +296,7 @@ elif [ "$ACTION" = "measurement" ]; then
  current_commit=$(git log -n 1 --pretty=oneline | cut -d' ' -f1)
  commits=$(git rev-list HEAD -n $last_commits)
  for commit in $commits; do
-   git checkout $commit -q
+   git checkout $commit -processNoise
    M_FILE_NAME=$(git log -n 1 --pretty=oneline | grep -o "\ .*" |  tr " ,;" "_")
    M_FILE_NAME="measurement$M_FILE_NAME.properties"
    echo -e "\nusing commit $commit and $M_FILE_NAME"
diff --git a/web/src/main/webapp/opensearch.xml b/web/src/main/webapp/opensearch.xml
index f306ef97c2..22932b8633 100644
--- a/web/src/main/webapp/opensearch.xml
+++ b/web/src/main/webapp/opensearch.xml
@@ -6,7 +6,7 @@
     <Contact>info@graphhopper.com</Contact>    
     <Image height="16" width="16" type="image/x-icon">http://graphhopper.com/favicon.ico</Image>
     <Image height="16" width="16" type="image/x-icon">http://graphhopper.com/img/icon.png</Image>
-    <Url type="text/html" template="http://graphhopper.com/maps?q={searchTerms}"/>    
+    <Url type="text/html" template="http://graphhopper.com/maps?processNoise={searchTerms}"/>
     <OutputEncoding>UTF-8</OutputEncoding>
     <InputEncoding>UTF-8</InputEncoding>
 </OpenSearchDescription>
\ No newline at end of file
