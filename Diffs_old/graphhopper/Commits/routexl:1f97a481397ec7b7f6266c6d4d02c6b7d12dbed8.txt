diff --git a/.travis.yml b/.travis.yml
index e068803c58..4d4ddff8eb 100644
--- a/.travis.yml
+++ b/.travis.yml
@@ -38,7 +38,7 @@ before_script:
   - "mvn --version"
   - "if [ -z \"$API_KEY\" ]; then API_KEY=78da6e9a-273e-43d1-bdda-8f24e007a1fa; fi" # change in GraphHopperWebIT too
 script:
-  - "mvn -Dkey=$API_KEY clean test verify checkstyle:check findbugs:check forbiddenapis:check -B"
+  - "mvn -Dkey=$API_KEY clean test verify checkstyle:check spotbugs:check forbiddenapis:check -B"
 
 after_success:
   # deploy snapshot artifacts to sonatype and if tagged deploy then release to maven central
diff --git a/CONTRIBUTORS.md b/CONTRIBUTORS.md
index 3f26531b71..39b9c68ffc 100644
--- a/CONTRIBUTORS.md
+++ b/CONTRIBUTORS.md
@@ -7,11 +7,13 @@ state this as a comment via a separate, signed commit.
 
 Here is an overview:
 
- * ammagamma, improvements like #700, #703
+ * ammagamma, several improvements on core algorithms
  * AnahitaS, docs for Android, Android, Tomcat
  * andreaswolf, flag encoder versioning and more
+ * andreylh, polygon for blocked area #1306
  * agouge, discussion and API refactoring
  * b3nn0, Android improvements
+ * baumboi, path detail and landmark improvements
  * boldtrn, one of the core developers with motorcycle knowledge :)
  * cgarreau, increase of routing success rate via subnetwork cleanup
  * ChristianSeitzer, motorcycle improvements
diff --git a/Dockerfile b/Dockerfile
index fb274b8fcc..dcb3a11aac 100644
--- a/Dockerfile
+++ b/Dockerfile
@@ -1,6 +1,6 @@
 FROM openjdk:8-jdk
 
-ENV JAVA_OPTS "-server -Xconcurrentio -Xmx1g -Xms1g -XX:+UseG1GC -XX:MetaspaceSize=100M -Ddw.server.applicationConnectors[0].bindHost=0.0.0.0 -Ddw.server.applicationConnectors[0].port=11111"
+ENV JAVA_OPTS "-server -Xconcurrentio -Xmx1g -Xms1g -XX:+UseG1GC -XX:MetaspaceSize=100M -Ddw.server.applicationConnectors[0].bindHost=0.0.0.0 -Ddw.server.applicationConnectors[0].port=8989"
 
 RUN mkdir -p /data && \
     mkdir -p /graphhopper
@@ -13,7 +13,7 @@ RUN ./graphhopper.sh build
 
 VOLUME [ "/data" ]
 
-EXPOSE 11111
+EXPOSE 8989
 
 ENTRYPOINT [ "./graphhopper.sh", "web" ]
 
diff --git a/README.md b/README.md
index 02600c653a..23ebffc074 100644
--- a/README.md
+++ b/README.md
@@ -13,11 +13,12 @@ We have a prospering community and welcome everyone. Let us know your problems,
 
 To get started, read through our documentation and install the GraphHopper Web Service locally:
 
- * unstable: [docs](https://github.com/graphhopper/graphhopper/blob/master/docs/index.md), [zip](https://oss.sonatype.org/content/groups/public/com/graphhopper/graphhopper-web/0.11-SNAPSHOT/), [Android APK](https://oss.sonatype.org/content/groups/public/com/graphhopper/graphhopper-android/0.11-SNAPSHOT/)
- * 0.10.0 latest stable: [announcement](https://www.graphhopper.com/blog/2018/03/08/graphhopper-routing-engine-0-10-released/), [docs](https://github.com/graphhopper/graphhopper/blob/0.10/docs/index.md), [zip](https://graphhopper.com/public/releases/graphhopper-web-0.10.0-bin.zip), [Android APK](https://graphhopper.com/public/releases/graphhopper-android-0.10.0.apk)
- * 0.9.0: [announcement](https://www.graphhopper.com/blog/2017/05/31/graphhopper-routing-engine-0-9-released/), [docs](https://github.com/graphhopper/graphhopper/blob/0.9/docs/index.md), [zip](https://graphhopper.com/public/releases/graphhopper-web-0.9.0-bin.zip), [Android APK](https://graphhopper.com/public/releases/graphhopper-android-0.9.0.apk)
- * 0.8.2: [announcement](https://www.graphhopper.com/blog/2016/10/18/graphhopper-routing-engine-0-8-released/), [docs](https://github.com/graphhopper/graphhopper/blob/0.8/docs/index.md), [zip](https://graphhopper.com/public/releases/graphhopper-web-0.8.2-bin.zip), [Android APK](https://graphhopper.com/public/releases/graphhopper-android-0.8.2.apk)
- * 0.7.0: [announcement](https://www.graphhopper.com/blog/2016/06/15/graphhopper-routing-engine-0-7-released/), [docs](https://github.com/graphhopper/graphhopper/blob/0.7/docs/index.md), [zip](https://graphhopper.com/public/releases/graphhopper-web-0.7.0-bin.zip), [Android APK](https://graphhopper.com/public/releases/graphhopper-android-0.7.0.apk)
+ * unstable: [documentation](https://github.com/graphhopper/graphhopper/blob/master/docs/index.md), [web service jar](https://oss.sonatype.org/content/groups/public/com/graphhopper/graphhopper-web/0.12-SNAPSHOT/), [Android APK](https://oss.sonatype.org/content/groups/public/com/graphhopper/graphhopper-android/0.12-SNAPSHOT/)
+ * 0.11.0 latest stable: [announcement](https://www.graphhopper.com/blog/2018/09/17/graphhopper-routing-engine-0-11-release-open-sourcing-the-isochrone-module/), [documentation](https://github.com/graphhopper/graphhopper/blob/0.11/docs/index.md), [web service jar](https://graphhopper.com/public/releases/graphhopper-web-0.11.0.jar), [Android APK](https://graphhopper.com/public/releases/graphhopper-android-0.11.0.apk)
+ * 0.10.0: [announcement](https://www.graphhopper.com/blog/2018/03/08/graphhopper-routing-engine-0-10-released/), [documentation](https://github.com/graphhopper/graphhopper/blob/0.10/docs/index.md), [web service zip](https://graphhopper.com/public/releases/graphhopper-web-0.10.3-bin.zip), [Android APK](https://graphhopper.com/public/releases/graphhopper-android-0.10.3.apk)
+ * 0.9.0: [announcement](https://www.graphhopper.com/blog/2017/05/31/graphhopper-routing-engine-0-9-released/), [documentation](https://github.com/graphhopper/graphhopper/blob/0.9/docs/index.md), [web service zip](https://graphhopper.com/public/releases/graphhopper-web-0.9.0-bin.zip), [Android APK](https://graphhopper.com/public/releases/graphhopper-android-0.9.0.apk)
+ * 0.8.2: [announcement](https://www.graphhopper.com/blog/2016/10/18/graphhopper-routing-engine-0-8-released/), [documentation](https://github.com/graphhopper/graphhopper/blob/0.8/docs/index.md), [web service zip](https://graphhopper.com/public/releases/graphhopper-web-0.8.2-bin.zip), [Android APK](https://graphhopper.com/public/releases/graphhopper-android-0.8.2.apk)
+ * 0.7.0: [announcement](https://www.graphhopper.com/blog/2016/06/15/graphhopper-routing-engine-0-7-released/), [documentation](https://github.com/graphhopper/graphhopper/blob/0.7/docs/index.md), [web service zip](https://graphhopper.com/public/releases/graphhopper-web-0.7.0-bin.zip), [Android APK](https://graphhopper.com/public/releases/graphhopper-android-0.7.0.apk)
 
 ## Questions
 
@@ -39,13 +40,20 @@ a Routing API via GraphHopper, a Route Optimization API via [jsprit](http://jspr
 and an address search via [Photon](https://github.com/komoot/photon). Additionally, map tiles from various providers are used 
 where the default is [Omniscale](http://omniscale.com/). All of these are available for free, via encrypted connections and from German servers for a nice and private route planning experience!
 
+## For Public Transit
+
+[Get started](./reader-gtfs/README.md#quick-start)
+
+[![Realtime Demo](https://www.graphhopper.com/wp-content/uploads/2018/05/Screen-Shot-2018-05-16-at-21.23.25-600x538.png)](./reader-gtfs/README.md#quick-start)
 
 ## For Mobile Apps
 
 There are subprojects to make GraphHopper working offline
-on [Android](https://github.com/graphhopper/graphhopper/tree/master/android)
+on [Android](./android/README.md)
 and [iOS](http://github.com/graphhopper/graphhopper-ios)
 
+[![simple routing](https://www.graphhopper.com/wp-content/uploads/2016/10/android-demo-screenshot-2.png)](./android/README.md)
+
 ## For Analysis
 
 There is the isochrone subproject to calculate and visualize the reachable area for a certain travel mode
@@ -162,7 +170,7 @@ docker-compose up -d
 If you don't want to use docker-compose you can do the following:
 ```bash
 docker build -t graphhopper:master .
-docker run -d --name graphhopper -v <path_data_directory>/data:/data -p 11111:11111 graphhopper:master
+docker run -d --name graphhopper -v <path_data_directory>/data:/data -p 8989:8989 graphhopper:master
 ```
 
 
diff --git a/android/app/pom.xml b/android/app/pom.xml
index af79e68c23..c4c66c0ba2 100644
--- a/android/app/pom.xml
+++ b/android/app/pom.xml
@@ -4,7 +4,7 @@
     <modelVersion>4.0.0</modelVersion>
     <groupId>com.graphhopper</groupId>
     <artifactId>graphhopper-android</artifactId>
-    <version>0.11-SNAPSHOT</version>
+    <version>0.12-SNAPSHOT</version>
     <name>GraphHopper Android</name>
     <packaging>apk</packaging>    
     <organization>
@@ -16,7 +16,7 @@
         <relativePath>../..</relativePath>
         <groupId>com.graphhopper</groupId>
         <artifactId>graphhopper-parent</artifactId>    	
-        <version>0.11-SNAPSHOT</version>
+        <version>0.12-SNAPSHOT</version>
     </parent>
     <properties>
         <vtm.version>0.9.2</vtm.version>
diff --git a/api/pom.xml b/api/pom.xml
index 47bd25a5b2..1d7c433ee7 100644
--- a/api/pom.xml
+++ b/api/pom.xml
@@ -6,14 +6,14 @@
     <groupId>com.graphhopper</groupId>
     <artifactId>graphhopper-api</artifactId>
     <packaging>jar</packaging>
-    <version>0.11-SNAPSHOT</version>
+    <version>0.12-SNAPSHOT</version>
     <name>GraphHopper API</name>
     <description>Use the GraphHopper routing engine as a web-service</description>
 
     <parent>
         <groupId>com.graphhopper</groupId>
         <artifactId>graphhopper-parent</artifactId>
-        <version>0.11-SNAPSHOT</version>
+        <version>0.12-SNAPSHOT</version>
     </parent>
 
     <dependencies>
diff --git a/appveyor.yml b/appveyor.yml
index a55cd20df4..0348495fdc 100644
--- a/appveyor.yml
+++ b/appveyor.yml
@@ -24,7 +24,7 @@ install:
 build_script:
   - mvn clean install -DskipTests=true -B
 test_script:
-  - mvn test verify -B && mvn checkstyle:check findbugs:check forbiddenapis:check -B
+  - mvn test verify -B && mvn checkstyle:check spotbugs:check forbiddenapis:check -B
 cache:
   - C:\maven\
   - C:\Users\appveyor\.m2
diff --git a/client-hc/pom.xml b/client-hc/pom.xml
index dfea2f2887..255d45cbfa 100644
--- a/client-hc/pom.xml
+++ b/client-hc/pom.xml
@@ -23,14 +23,14 @@
 
     <groupId>com.graphhopper</groupId>
     <artifactId>directions-api-client-hc</artifactId>
-    <version>0.11-SNAPSHOT</version>
+    <version>0.12-SNAPSHOT</version>
     <packaging>jar</packaging>
     <name>GraphHopper Directions API hand-crafted Java Client.</name>
      
     <parent>
         <groupId>com.graphhopper</groupId>
         <artifactId>graphhopper-parent</artifactId>
-        <version>0.11-SNAPSHOT</version>
+        <version>0.12-SNAPSHOT</version>
     </parent>  
     
     <dependencies>
diff --git a/core/files/findbugs-exclude.xml b/core/files/spotbugs-exclude.xml
similarity index 100%
rename from core/files/findbugs-exclude.xml
rename to core/files/spotbugs-exclude.xml
diff --git a/core/pom.xml b/core/pom.xml
index 0bfd37bedc..c4b2c1f694 100644
--- a/core/pom.xml
+++ b/core/pom.xml
@@ -6,7 +6,7 @@
     <groupId>com.graphhopper</groupId>
     <artifactId>graphhopper-core</artifactId>
     <name>GraphHopper Core</name>
-    <version>0.11-SNAPSHOT</version>
+    <version>0.12-SNAPSHOT</version>
     <packaging>jar</packaging>
     <description>
         GraphHopper is a fast and memory efficient Java road routing engine
@@ -15,7 +15,7 @@
     <parent>
         <groupId>com.graphhopper</groupId>
         <artifactId>graphhopper-parent</artifactId>
-        <version>0.11-SNAPSHOT</version>
+        <version>0.12-SNAPSHOT</version>
     </parent>
 
     <properties>
diff --git a/core/src/main/java/com/graphhopper/routing/lm/LandmarkStorage.java b/core/src/main/java/com/graphhopper/routing/lm/LandmarkStorage.java
index 0c97372fee..bf42c1f9a4 100644
--- a/core/src/main/java/com/graphhopper/routing/lm/LandmarkStorage.java
+++ b/core/src/main/java/com/graphhopper/routing/lm/LandmarkStorage.java
@@ -61,8 +61,6 @@
     // one node has an associated landmark information ('one landmark row'): the forward and backward weight
     private long LM_ROW_LENGTH;
     private int landmarks;
-    private final int FROM_OFFSET;
-    private final int TO_OFFSET;
     private final DataAccess landmarkWeightDA;
     /* every subnetwork has its own landmark mapping but the count of landmarks is always the same */
     private final List<int[]> landmarkIDs;
@@ -74,15 +72,11 @@
     private Weighting lmSelectionWeighting;
     private final TraversalMode traversalMode;
     private boolean initialized;
-    private int minimumNodes = 500_000;
+    private int minimumNodes;
     private final SubnetworkStorage subnetworkStorage;
     private List<LandmarkSuggestion> landmarkSuggestions = Collections.emptyList();
     private SpatialRuleLookup ruleLookup;
     private boolean logDetails = false;
-    /**
-     * 'to' and 'from' fit into 32 bit => 16 bit for each of them => 65536
-     */
-    static final long PRECISION = 1 << 16;
 
     public LandmarkStorage(GraphHopperStorage graph, Directory dir, final Weighting weighting, int landmarks) {
         this.graph = graph;
@@ -117,12 +111,14 @@ public String toString() {
         this.landmarks = landmarks;
         // one short per landmark and two directions => 2*2 byte
         this.LM_ROW_LENGTH = landmarks * 4;
-        this.FROM_OFFSET = 0;
-        this.TO_OFFSET = 2;
         this.landmarkIDs = new ArrayList<>();
         this.subnetworkStorage = new SubnetworkStorage(dir, "landmarks_" + name);
     }
 
+    public int getVersion() {
+        return 1;
+    }
+
     /**
      * Specify the maximum possible value for your used area. With this maximum weight value you can influence the storage
      * precision for your weights that help A* finding its way to the goal. The same value is used for all subnetworks.
@@ -214,8 +210,8 @@ public void createLandmarks() {
         this.landmarkWeightDA.create(2000);
         this.landmarkWeightDA.ensureCapacity(maxBytes);
 
-        for (long pointer = 0; pointer < maxBytes; pointer += 2) {
-            landmarkWeightDA.setShort(pointer, (short) SHORT_INFINITY);
+        for (long pointer = 0; pointer < maxBytes; pointer += 4) {
+            landmarkWeightDA.setInt(pointer, (DELTA_INF << FROM_WEIGHT_BITS) | FROM_WEIGHT_INF);
         }
 
         String additionalInfo = "";
@@ -253,7 +249,7 @@ public void createLandmarks() {
         if (ruleLookup != null && ruleLookup.size() > 0) {
             StopWatch sw = new StopWatch().start();
             blockedEdges = findBorderEdgeIds(ruleLookup);
-            tarjanFilter = new BlockedEdgesFilter(encoder, false, true, blockedEdges);
+            tarjanFilter = new BlockedEdgesFilter(encoder, true, false, blockedEdges);
             if (logDetails)
                 LOGGER.info("Made " + blockedEdges.size() + " edges inaccessible. Calculated country cut in " + sw.stop().getSeconds() + "s, " + Helper.getMemInfo());
         }
@@ -308,12 +304,14 @@ public void createLandmarks() {
             }
         }
 
-        landmarkWeightDA.setHeader(0 * 4, graph.getNodes());
+        // make backward incompatible to force rebuilt (pre 0.11 releases had nodes count at 0)
+        landmarkWeightDA.setHeader(0 * 4, getVersion());
         landmarkWeightDA.setHeader(1 * 4, landmarks);
         landmarkWeightDA.setHeader(2 * 4, subnetworkCount);
         if (factor * DOUBLE_MLTPL > Integer.MAX_VALUE)
             throw new UnsupportedOperationException("landmark weight factor cannot be bigger than Integer.MAX_VALUE " + factor * DOUBLE_MLTPL);
         landmarkWeightDA.setHeader(3 * 4, (int) Math.round(factor * DOUBLE_MLTPL));
+        landmarkWeightDA.setHeader(4 * 4, graph.getNodes());
 
         // serialize fast byte[] into DataAccess
         subnetworkStorage.create(graph.getNodes());
@@ -407,9 +405,9 @@ private boolean createLandmarksForSubnetwork(final int startNode, final byte[] s
             int lmNodeId = tmpLandmarkNodeIds[lmIdx];
             LandmarkExplorer explorer = new LandmarkExplorer(graph, this, weighting, traversalMode, true);
             explorer.setStartNode(lmNodeId);
-            explorer.setFilter(blockedEdges, false, true);
+            explorer.setFilter(blockedEdges, true, false);
             explorer.runAlgo();
-            explorer.initLandmarkWeights(lmIdx, lmNodeId, LM_ROW_LENGTH, FROM_OFFSET);
+            explorer.initLandmarkWeights(lmIdx, lmNodeId, LM_ROW_LENGTH);
 
             // set subnetwork id to all explored nodes, but do this only for the first landmark
             if (lmIdx == 0) {
@@ -419,9 +417,9 @@ private boolean createLandmarksForSubnetwork(final int startNode, final byte[] s
 
             explorer = new LandmarkExplorer(graph, this, weighting, traversalMode, false);
             explorer.setStartNode(lmNodeId);
-            explorer.setFilter(blockedEdges, true, false);
+            explorer.setFilter(blockedEdges, false, true);
             explorer.runAlgo();
-            explorer.initLandmarkWeights(lmIdx, lmNodeId, LM_ROW_LENGTH, TO_OFFSET);
+            explorer.initLandmarkWeights(lmIdx, lmNodeId, LM_ROW_LENGTH);
 
             if (lmIdx == 0) {
                 if (explorer.setSubnetworks(subnetworks, subnetworkId))
@@ -479,17 +477,14 @@ protected IntHashSet findBorderEdgeIds(SpatialRuleLookup ruleLookup) {
      * a node ID but the internal index of the landmark array.
      */
     int getFromWeight(int landmarkIndex, int node) {
-        int res = (int) landmarkWeightDA.getShort((long) node * LM_ROW_LENGTH + landmarkIndex * 4 + FROM_OFFSET)
-                & 0x0000FFFF;
-        assert res >= 0 : "Negative to weight " + res + ", landmark index:" + landmarkIndex + ", node:" + node;
-        if (res == SHORT_INFINITY)
-            // TODO can happen if endstanding oneway
-            // we should set a 'from' value to SHORT_MAX if the 'to' value was already set to find real bugs
-            // and what to return? Integer.MAX_VALUE i.e. convert to Double.pos_infinity upstream?
-            return SHORT_MAX;
+        //only the right bits of this integer store the backward value
+        int res = landmarkWeightDA.getInt((long) node * LM_ROW_LENGTH + landmarkIndex * 4) & FROM_WEIGHT_INF;
+
+        if (res == FROM_WEIGHT_INF)
+            return Integer.MAX_VALUE;
         // throw new IllegalStateException("Do not call getFromWeight for wrong landmark[" + landmarkIndex + "]=" + landmarkIDs[landmarkIndex] + " and node " + node);
-        // TODO if(res == MAX) fallback to beeline approximation!?
 
+        assert res >= 0 : "Negative backward weight " + res + ", landmark index:" + landmarkIndex + ", node:" + node;
         return res;
     }
 
@@ -497,40 +492,87 @@ int getFromWeight(int landmarkIndex, int node) {
      * @return the weight from the specified node to the landmark (specified *as index*)
      */
     int getToWeight(int landmarkIndex, int node) {
-        int res = (int) landmarkWeightDA.getShort((long) node * LM_ROW_LENGTH + landmarkIndex * 4 + TO_OFFSET)
-                & 0x0000FFFF;
-        assert res >= 0 : "Negative to weight " + res + ", landmark index:" + landmarkIndex + ", node:" + node;
-        if (res == SHORT_INFINITY)
-            return SHORT_MAX;
-//            throw new IllegalStateException("Do not call getToWeight for wrong landmark[" + landmarkIndex + "]=" + landmarkIDs[landmarkIndex] + " and node " + node);
+        int res = landmarkWeightDA.getInt((long) node * LM_ROW_LENGTH + landmarkIndex * 4);
+
+        //the left bits of "res" store the difference between forward and backward value
+        int delta = res >> FROM_WEIGHT_BITS;
 
+        if (delta == DELTA_INF)
+            return Integer.MAX_VALUE;
+        // throw new IllegalStateException("Do not call getToWeight for wrong landmark[" + landmarkIndex + "]=" + landmarkIDs[landmarkIndex] + " and node " + node);
+
+        //the right bits of "res" store the backward value
+        int from = res & FROM_WEIGHT_INF;
+
+        if (from == FROM_WEIGHT_INF) {
+            from = DELTA_INF + 1;
+        }
+
+        //to get the forward value you have to add the backward to the delta value
+        res = from + delta;
+
+        assert res >= 0 : "Negative forward weight " + res + ", landmark index:" + landmarkIndex + ", node:" + node;
         return res;
     }
 
-    // Short.MAX_VALUE = 2^15-1 but we have unsigned short so we need 2^16-1
-    private static final int SHORT_INFINITY = Short.MAX_VALUE * 2 + 1;
-    // We have large values that do not fit into a short, use a specific maximum value
-    private static final int SHORT_MAX = SHORT_INFINITY - 1;
+    // 'to' and 'from' fit into 32 bit => 16 bit for each of them => 65536
+    static final long PRECISION = 1 << 16;
+    /* This value sets the amount of bits used to store the backward weight.
+    The rest of overall 32 bits stores the difference between forward and backward weight*/
+    private static final int FROM_WEIGHT_BITS = 18;
+    // The backward weight is unsigned --> 2^x - 1
+    private static final int FROM_WEIGHT_INF = (int) Math.pow(2, FROM_WEIGHT_BITS) - 1;
+    // This value will be used if the backward weight is too large
+    private static final int FROM_WEIGHT_MAX = FROM_WEIGHT_INF - 1;
+    /* The difference between forward and backward weight is signed
+    --> 2^(31-x) - 1 instead of 2^(32-x) - 1*/
+    private static final int DELTA_INF = (int) Math.pow(2, 31 - FROM_WEIGHT_BITS) - 1;
+    // This value will be used if the difference between these weights is too large and forward > backward
+    private static final int DELTA_MAX = DELTA_INF - 1;
+    // This value will be used if the difference between these weights is too large and forward < backward
+    private static final int DELTA_MIN = -DELTA_INF - 1;
 
     /**
-     * @return false if the value capacity was reached and instead of the real value the SHORT_MAX was stored.
+     * @return false if the value capacity was reached and instead of the real value the MAX was stored.
      */
-    final boolean setWeight(long pointer, double value) {
+    final boolean setWeight(int lmIdx, int nodeId, long rowSize, double value, boolean from) {
         double tmpVal = value / factor;
         if (tmpVal > Integer.MAX_VALUE)
-            throw new UnsupportedOperationException("Cannot store infinity explicitely, pointer=" + pointer + ", value: " + value);
+            throw new UnsupportedOperationException("Cannot store infinity explicitly, landmark: " + lmIdx + ", node: " + nodeId + ", value: " + value);
 
-        if (tmpVal >= SHORT_MAX) {
-            landmarkWeightDA.setShort(pointer, (short) SHORT_MAX);
-            return false;
+        if (from) {
+            if (tmpVal >= FROM_WEIGHT_MAX) {
+                landmarkWeightDA.setInt(nodeId * rowSize + lmIdx * 4, (DELTA_INF << FROM_WEIGHT_BITS) | FROM_WEIGHT_MAX);
+                return false;
+            } else {
+                landmarkWeightDA.setInt(nodeId * rowSize + lmIdx * 4, (DELTA_INF << FROM_WEIGHT_BITS) | (int) tmpVal);
+                return true;
+            }
         } else {
-            landmarkWeightDA.setShort(pointer, (short) tmpVal);
-            return true;
+            int fromWeight = getFromWeight(lmIdx, nodeId);
+            int delta;
+            if (fromWeight == Integer.MAX_VALUE) {
+                fromWeight = FROM_WEIGHT_INF;
+                delta = (int) tmpVal - DELTA_INF + 1;
+            } else {
+                delta = (int) tmpVal - fromWeight;
+            }
+
+            if (delta >= DELTA_MAX) {
+                landmarkWeightDA.setInt(nodeId * rowSize + lmIdx * 4, (DELTA_MAX << FROM_WEIGHT_BITS) | fromWeight);
+                return false;
+            } else if (delta <= DELTA_MIN) {
+                landmarkWeightDA.setInt(nodeId * rowSize + lmIdx * 4, (DELTA_MIN << FROM_WEIGHT_BITS) | fromWeight);
+                return false;
+            } else {
+                landmarkWeightDA.setInt(nodeId * rowSize + lmIdx * 4, (delta << FROM_WEIGHT_BITS) | fromWeight);
+                return true;
+            }
         }
     }
 
     boolean isInfinity(long pointer) {
-        return ((int) landmarkWeightDA.getShort(pointer) & 0x0000FFFF) == SHORT_INFINITY;
+        return (landmarkWeightDA.getInt(pointer) & FROM_WEIGHT_INF) == FROM_WEIGHT_INF;
     }
 
     int calcWeight(EdgeIteratorState edge, boolean reverse) {
@@ -661,9 +703,13 @@ public boolean loadExisting() {
             if (!subnetworkStorage.loadExisting())
                 throw new IllegalStateException("landmark weights loaded but not the subnetworks!?");
 
-            int nodes = landmarkWeightDA.getHeader(0 * 4);
+            int version = landmarkWeightDA.getHeader(0 * 4);
+            if (version != getVersion())
+                throw new IllegalArgumentException("Cannot load landmark data due to incompatible version. Storage used version: " + version + ", expected: " + getVersion());
+            int nodes = landmarkWeightDA.getHeader(4 * 4);
             if (nodes != graph.getNodes())
                 throw new IllegalArgumentException("Cannot load landmark data as written for different graph storage with " + nodes + " nodes, not " + graph.getNodes());
+
             landmarks = landmarkWeightDA.getHeader(1 * 4);
             int subnetworks = landmarkWeightDA.getHeader(2 * 4);
             factor = landmarkWeightDA.getHeader(3 * 4) / DOUBLE_MLTPL;
@@ -728,7 +774,7 @@ public LandmarkExplorer(Graph g, LandmarkStorage lms, Weighting weighting, Trave
             super(g, weighting, tMode);
             this.lms = lms;
             this.from = from;
-            // set one of the bi directions as already finished            
+            // set one of the bi directions as already finished
             if (from)
                 finishedTo = true;
             else
@@ -737,8 +783,15 @@ public LandmarkExplorer(Graph g, LandmarkStorage lms, Weighting weighting, Trave
             setUpdateBestPath(false);
         }
 
-        public void setFilter(IntHashSet set, boolean bwd, boolean fwd) {
-            EdgeFilter ef = new BlockedEdgesFilter(flagEncoder, bwd, fwd, set);
+        public void setStartNode(int startNode) {
+            if (from)
+                initFrom(startNode, 0);
+            else
+                initTo(startNode, 0);
+        }
+
+        void setFilter(IntHashSet set, boolean fwd, boolean bwd) {
+            EdgeFilter ef = new BlockedEdgesFilter(flagEncoder, fwd, bwd, set);
             outEdgeExplorer = graph.createEdgeExplorer(ef);
             inEdgeExplorer = graph.createEdgeExplorer(ef);
         }
@@ -755,13 +808,6 @@ public int getLastNode() {
             return lastNode;
         }
 
-        public void setStartNode(int startNode) {
-            if (from)
-                initFrom(startNode, 0);
-            else
-                initTo(startNode, 0);
-        }
-
         public void runAlgo() {
             super.runAlgo();
         }
@@ -777,7 +823,7 @@ public boolean finished() {
             }
         }
 
-        public boolean setSubnetworks(final byte[] subnetworks, final int subnetworkId) {
+        boolean setSubnetworks(final byte[] subnetworks, final int subnetworkId) {
             if (subnetworkId > 127)
                 throw new IllegalStateException("Too many subnetworks " + subnetworkId);
 
@@ -805,7 +851,7 @@ public boolean apply(int nodeId, SPTEntry value) {
             return failed.get();
         }
 
-        public void initLandmarkWeights(final int lmIdx, int lmNodeId, final long rowSize, final int offset) {
+        public void initLandmarkWeights(final int lmIdx, int lmNodeId, final long rowSize) {
             IntObjectMap<SPTEntry> map = from ? bestWeightMapFrom : bestWeightMapTo;
             final AtomicInteger maxedout = new AtomicInteger(0);
             final Map.Entry<Double, Double> finalMaxWeight = new MapEntry<>(0d, 0d);
@@ -813,7 +859,7 @@ public void initLandmarkWeights(final int lmIdx, int lmNodeId, final long rowSiz
             map.forEach(new IntObjectProcedure<SPTEntry>() {
                 @Override
                 public void apply(int nodeId, SPTEntry b) {
-                    if (!lms.setWeight(nodeId * rowSize + lmIdx * 4 + offset, b.weight)) {
+                    if (!lms.setWeight(lmIdx, nodeId, rowSize, b.weight, from)) {
                         maxedout.incrementAndGet();
                         finalMaxWeight.setValue(Math.max(b.weight, finalMaxWeight.getValue()));
                     }
@@ -822,8 +868,8 @@ public void apply(int nodeId, SPTEntry b) {
 
             if ((double) maxedout.get() / map.size() > 0.1) {
                 LOGGER.warn("landmark " + lmIdx + " (" + nodeAccess.getLatitude(lmNodeId) + "," + nodeAccess.getLongitude(lmNodeId) + "): " +
-                        "too many weights were maxed out (" + maxedout.get() + "/" + map.size() + "). Use a bigger factor than " + lms.factor
-                        + ". For example use the following in the config.yml: weighting=" + weighting.getName() + "|maximum=" + finalMaxWeight.getValue() * 1.2);
+                        "too many " + (from ? "backward" : "delta") + " weights were maxed out (" + maxedout.get() + "/" + map.size() + "). Factor is too small " + lms.factor
+                        + ". To fix this increase maximum in config.yml: prepare.lm.weighting: " + weighting.getName() + "|maximum=" + finalMaxWeight.getValue() * 1.2);
             }
         }
     }
@@ -838,7 +884,7 @@ public int compare(Map.Entry<Integer, Integer> o1, Map.Entry<Integer, Integer> o
         }
     };
 
-    static GHPoint createPoint(Graph graph, int nodeId) {
+    private static GHPoint createPoint(Graph graph, int nodeId) {
         return new GHPoint(graph.getNodeAccess().getLatitude(nodeId), graph.getNodeAccess().getLongitude(nodeId));
     }
 
@@ -862,7 +908,7 @@ public boolean accept(EdgeIteratorState edgeState) {
         private final boolean fwd;
         private final boolean bwd;
 
-        public BlockedEdgesFilter(FlagEncoder encoder, boolean bwd, boolean fwd, IntHashSet blockedEdges) {
+        public BlockedEdgesFilter(FlagEncoder encoder, boolean fwd, boolean bwd, IntHashSet blockedEdges) {
             this.encoder = encoder;
             this.bwd = bwd;
             this.fwd = fwd;
@@ -888,4 +934,4 @@ public String toString() {
             return encoder.toString() + ", bwd:" + bwd + ", fwd:" + fwd;
         }
     }
-}
+}
\ No newline at end of file
diff --git a/core/src/main/java/com/graphhopper/routing/lm/PrepareLandmarks.java b/core/src/main/java/com/graphhopper/routing/lm/PrepareLandmarks.java
index afec484f93..785bd91fbe 100644
--- a/core/src/main/java/com/graphhopper/routing/lm/PrepareLandmarks.java
+++ b/core/src/main/java/com/graphhopper/routing/lm/PrepareLandmarks.java
@@ -130,7 +130,7 @@ public void doSpecificWork() {
         lms.createLandmarks();
         lms.flush();
 
-        LOGGER.info("Calculating landmarks for " + (lms.getSubnetworksWithLandmarks() - 1) + " subnetworks took:" + sw.stop().getSeconds() + " => "
+        LOGGER.info("Calculated landmarks for " + (lms.getSubnetworksWithLandmarks() - 1) + " subnetworks, took:" + sw.stop().getSeconds() + " => "
                 + lms.getLandmarksAsGeoJSON() + ", stored weights:" + lms.getLandmarkCount()
                 + ", nodes:" + graph.getNodes() + ", " + Helper.getMemInfo());
     }
diff --git a/core/src/main/resources/com/graphhopper/util/hu_HU.txt b/core/src/main/resources/com/graphhopper/util/hu_HU.txt
index bb38a659d5..3dbd457649 100644
--- a/core/src/main/resources/com/graphhopper/util/hu_HU.txt
+++ b/core/src/main/resources/com/graphhopper/util/hu_HU.txt
@@ -63,8 +63,8 @@ pt_transfer_to=szálljon át erre: %1$s
 web.start_label=Indulás
 web.intermediate_label=Köztes célpont
 web.end_label=Célpont
-web.set_start=Beállítás köztes célpontnak
-web.set_intermediate=Beállítás kiindulási pontnak
+web.set_start=Beállítás kiindulási pontnak
+web.set_intermediate=Beállítás köztes célpontnak
 web.set_end=Beállítás célpontnak
 web.center_map=Beállítás a térkép középpontjának
 web.show_coords=Pozíció megjelenítése
diff --git a/core/src/test/java/com/graphhopper/routing/lm/LandmarkStorageTest.java b/core/src/test/java/com/graphhopper/routing/lm/LandmarkStorageTest.java
index f3fbe7060f..5049865d27 100644
--- a/core/src/test/java/com/graphhopper/routing/lm/LandmarkStorageTest.java
+++ b/core/src/test/java/com/graphhopper/routing/lm/LandmarkStorageTest.java
@@ -89,21 +89,33 @@ public void testSetGetWeight() {
 
         LandmarkStorage lms = new LandmarkStorage(ghStorage, dir, new FastestWeighting(encoder), 4).
                 setMaximumWeight(LandmarkStorage.PRECISION);
-        // 2^16=65536, use -1 for infinity and -2 for maximum
-        lms.setWeight(0, 65536);
-        // reached maximum value but do not reset to 0 instead use 2^16-2
-        assertEquals(65536 - 2, lms.getFromWeight(0, 0));
-        lms.setWeight(0, 65535);
-        assertEquals(65534, lms.getFromWeight(0, 0));
-        lms.setWeight(0, 79999);
-        assertEquals(65534, lms.getFromWeight(0, 0));
+        /* FROM_WEIGHT_BITS = 18
+        2^18 = 262144, use -1 for infinity and -2 for maximum
+        As the backward weight reaches a too high value it will use the maximum instead of 0 or infinity*/
+        lms.setWeight(0, 0, 16, Math.pow(2, 18), true);
+        assertEquals((int) Math.pow(2, 18) - 2, lms.getFromWeight(0, 0));
+        lms.setWeight(0, 0, 16, 999999, true);
+        assertEquals((int) Math.pow(2, 18) - 2, lms.getFromWeight(0, 0));
+
+        /* FROM_WEIGHT_BITS = 18 --> remaining bits: 32-18 = 14
+        The delta value is signed and will therefore go from -2^(14-1) to 2^(14-1).
+        Now 2^13-1 is used for infinity, 2^13-2 as maximum and -2^13 as minimum.
+        If the difference between forward and backward weight is too large it will use
+        the maximum (if positive) or the minimum (if negative) instead of 0 or infinity
+        The delta will then be added to the backward weight*/
+        lms.setWeight(0, 0, 16, 999999, false);
+        assertEquals((int) (Math.pow(2, 18) - 2 + Math.pow(2, 13) - 2), lms.getToWeight(0, 0));
+        //                 {backward weight}   {delta weight}
+        lms.setWeight(0, 0, 16, 1, false);
+        assertEquals((int) (Math.pow(2, 18) - 2 + -Math.pow(2, 13)), lms.getToWeight(0, 0));
+        //                 {backward weight}   {delta weight}
 
         da.setInt(0, Integer.MAX_VALUE);
         assertTrue(lms.isInfinity(0));
         // for infinity return much bigger value
         // assertEquals(Integer.MAX_VALUE, lms.getFromWeight(0, 0));
 
-        lms.setWeight(0, 79999);
+        lms.setWeight(0, 0, 16, 999999, true);
         assertFalse(lms.isInfinity(0));
     }
 
@@ -228,4 +240,75 @@ public BBox getBounds() {
         storage.createLandmarks();
         assertEquals(3, storage.getSubnetworksWithLandmarks());
     }
+
+    @Test
+    public void testDelta() {
+        int distance = 1000000;
+
+        ghStorage.edge(1, 2, distance, false);
+        ghStorage.edge(2, 3, distance, false);
+        ghStorage.edge(3, 1, distance, false);
+
+        ghStorage.edge(2, 4, distance, true);
+        ghStorage.edge(4, 5, distance, true);
+        ghStorage.edge(5, 6, distance, true);
+        ghStorage.edge(6, 7, distance, true);
+        ghStorage.edge(7, 8, distance, true);
+        ghStorage.edge(8, 9, distance, true);
+
+        ghStorage.edge(3, 10, distance, true);
+        ghStorage.edge(10, 11, distance, true);
+        ghStorage.edge(11, 12, distance, true);
+        ghStorage.edge(12, 13, distance, true);
+        ghStorage.edge(13, 14, distance, true);
+        ghStorage.edge(14, 15, distance, true);
+
+        LandmarkStorage storage = new LandmarkStorage(ghStorage, new RAMDirectory(), new FastestWeighting(encoder), 2);
+        storage.createLandmarks();
+
+        assertEquals(15, storage.getLandmarks(1)[0]);
+        assertEquals(9, storage.getLandmarks(1)[1]);
+
+        assertEquals(35680, storage.getFromWeight(0, 1));
+        assertEquals(40777, storage.getToWeight(0, 1));
+        assertEquals(71361, storage.getFromWeight(0, 9));
+        assertEquals(66264, storage.getToWeight(0, 9));
+        assertEquals(15291, storage.getFromWeight(0, 12));
+        assertEquals(15291, storage.getToWeight(0, 12));
+        assertEquals(40777, storage.getFromWeight(1, 1));
+        assertEquals(35680, storage.getToWeight(1, 1));
+        assertEquals(50972, storage.getFromWeight(1, 12));
+        assertEquals(56069, storage.getToWeight(1, 12));
+        assertEquals(66264, storage.getFromWeight(1, 15));
+        assertEquals(71361, storage.getToWeight(1, 15));
+    }
+
+    @Test
+    public void testDeltaWarning() {
+        int distance = 1000000;
+
+        ghStorage.edge(1, 2, distance, false);
+        ghStorage.edge(2, 3, distance, false);
+        ghStorage.edge(3, 4, distance, false);
+        ghStorage.edge(4, 5, distance, false);
+        ghStorage.edge(5, 6, distance, false);
+        ghStorage.edge(6, 1, distance, false);
+
+        ghStorage.edge(1, 7, distance, true);
+        ghStorage.edge(7, 8, distance, true);
+        ghStorage.edge(8, 9, distance, true);
+
+        ghStorage.edge(6, 10, distance, true);
+        ghStorage.edge(10, 11, distance, true);
+        ghStorage.edge(11, 12, distance, true);
+
+        LandmarkStorage storage = new LandmarkStorage(ghStorage, new RAMDirectory(), new FastestWeighting(encoder), 2);
+        storage.createLandmarks();
+
+        assertEquals(12, storage.getLandmarks(1)[0]);
+        assertEquals(9, storage.getLandmarks(1)[1]);
+
+        assertEquals((int) Math.pow(2, 13) - 2, storage.getToWeight(0, 9) - storage.getFromWeight(0, 9));
+        assertEquals((int) -Math.pow(2, 13), storage.getToWeight(1, 12) - storage.getFromWeight(1, 12));
+    }
 }
diff --git a/docs/web/quickstart.md b/docs/web/quickstart.md
index ac47f822b8..a28bd1fc1a 100644
--- a/docs/web/quickstart.md
+++ b/docs/web/quickstart.md
@@ -3,14 +3,15 @@
 If you want to build GraphHopper from source look at the [Developers page](../core/quickstart-from-source.md). 
 The following steps are simpler and only need the JRE, a jar file and an OSM file.
 
- 1. Install the latest JRE and get the [GraphHopper Web Service](https://github.com/graphhopper/graphhopper/blob/master/README.md#get-started)
-as jar file
- 2. Copy an OSM file to the same directory. For example [berlin-latest.osm.pbf](http://download.geofabrik.de/europe/germany/berlin.html)
- 3. Start GraphHopper Maps via: 
+ 1. Install the latest JRE 
+ 2. Get the [GraphHopper Web Service](https://github.com/graphhopper/graphhopper/blob/master/README.md#get-started)
+as jar file and download this [config-example.yml](https://raw.githubusercontent.com/graphhopper/graphhopper/master/config-example.yml)
+ 3. Copy an OSM file to the same directory. For example [berlin-latest.osm.pbf](http://download.geofabrik.de/europe/germany/berlin.html)
+ 4. Start GraphHopper Maps via: 
     ```bash
     java -Dgraphhopper.datareader.file=berlin-latest.osm.pbf -jar *.jar server config-example.yml
     ```
- 4. After you see 'Started server at HTTP 8989' go to [http://localhost:8989/](http://localhost:8989/) and you should see a map of Berlin. You should be able to click on the map and a route appears.
+ 5. After you see 'Started server at HTTP 8989' go to [http://localhost:8989/](http://localhost:8989/) and you should see a map of Berlin. You should be able to click on the map and a route appears.
 
 See [here](./../core/elevation.md) how to easily enable elevation data. To see how GraphHopper is configured for production usage, see the [deployment guide](./../core/deploy.md).
 
diff --git a/isochrone/pom.xml b/isochrone/pom.xml
index dd9569004d..3482995f05 100644
--- a/isochrone/pom.xml
+++ b/isochrone/pom.xml
@@ -6,14 +6,14 @@
     <groupId>com.graphhopper</groupId>
     <artifactId>graphhopper-isochrone</artifactId>
     <packaging>jar</packaging>
-    <version>0.11-SNAPSHOT</version>
+    <version>0.12-SNAPSHOT</version>
     <name>GraphHopper Isochrone</name>
     <description>Isochrone calculation with GraphHopper</description>
 
     <parent>
         <groupId>com.graphhopper</groupId>
         <artifactId>graphhopper-parent</artifactId>
-        <version>0.11-SNAPSHOT</version>
+        <version>0.12-SNAPSHOT</version>
     </parent>
 
 
diff --git a/pom.xml b/pom.xml
index 45649938b8..4fde973f8b 100644
--- a/pom.xml
+++ b/pom.xml
@@ -6,7 +6,7 @@
     <groupId>com.graphhopper</groupId>
     <artifactId>graphhopper-parent</artifactId>
     <name>GraphHopper Parent Project</name>
-    <version>0.11-SNAPSHOT</version>
+    <version>0.12-SNAPSHOT</version>
     <packaging>pom</packaging>
     <url>https://www.graphhopper.com</url>
     <inceptionYear>2012</inceptionYear>
@@ -153,13 +153,21 @@
             </plugin>
 
             <plugin>
-                <groupId>org.codehaus.mojo</groupId>
-                <artifactId>findbugs-maven-plugin</artifactId>
-                <version>3.0.5</version>
+                <groupId>com.github.spotbugs</groupId>
+                <artifactId>spotbugs-maven-plugin</artifactId>
+                <version>3.1.6</version>
+                <!-- required as 3.1.7 is not yet released for the plugin but we hit problem spotbugs#711 -->
+                <dependencies>
+		    <dependency>
+		      <groupId>com.github.spotbugs</groupId>
+		      <artifactId>spotbugs</artifactId>
+		      <version>3.1.7</version>
+		    </dependency>
+		</dependencies>
                 <configuration>
                     <maxRank>4</maxRank>
                     <failOnError>true</failOnError>
-                    <excludeFilterFile>core/files/findbugs-exclude.xml</excludeFilterFile>
+                    <excludeFilterFile>core/files/spotbugs-exclude.xml</excludeFilterFile>
                 </configuration>
             </plugin>
             <plugin>
diff --git a/reader-gtfs/pom.xml b/reader-gtfs/pom.xml
index 51011d4c04..e9963bf3a1 100644
--- a/reader-gtfs/pom.xml
+++ b/reader-gtfs/pom.xml
@@ -5,14 +5,14 @@
 
     <groupId>com.graphhopper</groupId>
     <artifactId>graphhopper-reader-gtfs</artifactId>
-    <version>0.11-SNAPSHOT</version>
+    <version>0.12-SNAPSHOT</version>
     <packaging>jar</packaging>
     <name>GraphHopper Reader for Gtfs Data</name>
 
     <parent>
         <groupId>com.graphhopper</groupId>
         <artifactId>graphhopper-parent</artifactId>    	
-        <version>0.11-SNAPSHOT</version>
+        <version>0.12-SNAPSHOT</version>
     </parent>
 
     <dependencies>
diff --git a/reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/GraphHopperGtfs.java b/reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/GraphHopperGtfs.java
index 66920608c4..8dbcccbfd9 100644
--- a/reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/GraphHopperGtfs.java
+++ b/reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/GraphHopperGtfs.java
@@ -420,14 +420,22 @@ public GHResponse route(GHRequest request) {
                     final GraphExplorer graphExplorer = new GraphExplorer(queryGraph, accessEgressWeighting, flagEncoder, gtfsStorage, realtimeFeed, false, Collections.emptyList(), true, 5.0);
 
                     MultiCriteriaLabelSetting router = new MultiCriteriaLabelSetting(graphExplorer, flagEncoder, false, Double.MAX_VALUE, false, false, false, Integer.MAX_VALUE, new ArrayList<>());
-                    final Stream<Label> labels = router.calcLabels(fromnode, tonode, Instant.ofEpochMilli(0), 0);
-                    List<Label> solutions = labels
-                            .filter(current -> tonode == current.adjNode)
-                            .collect(Collectors.toList());
+                    Iterator<Label> iterator = router.calcLabels(fromnode, tonode, Instant.ofEpochMilli(0), 0).iterator();
+                    Label solution = null;
+                    while (iterator.hasNext()) {
+                        Label label = iterator.next();
+                        if (tonode == label.adjNode) {
+                            solution = label;
+                            break;
+                        }
+                    }
+                    if (solution == null) {
+                        throw new RuntimeException("Can't find a transfer walk route.");
+                    }
                     TransferWithTime transferWithTime = new TransferWithTime();
                     transferWithTime.id = e.getKey();
                     transferWithTime.transfer = e.getValue();
-                    transferWithTime.time = solutions.get(0).currentTime;
+                    transferWithTime.time = solution.currentTime;
                     return transferWithTime;
                 });
     }
diff --git a/reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/WrapperGraph.java b/reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/WrapperGraph.java
index 3255171196..cbc83b675a 100644
--- a/reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/WrapperGraph.java
+++ b/reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/WrapperGraph.java
@@ -89,7 +89,7 @@ public int length() {
                 return IntStream.concat(
                         IntStream.of(baseGraph.getAllEdges().length() - 1),
                         extraEdges.stream().mapToInt(VirtualEdgeIteratorState::getEdge))
-                        .max().getAsInt();
+                        .max().getAsInt()+1;
             }
 
             @Override
diff --git a/reader-gtfs/src/test/java/com/graphhopper/reader/gtfs/WrapperGraphTest.java b/reader-gtfs/src/test/java/com/graphhopper/reader/gtfs/WrapperGraphTest.java
new file mode 100644
index 0000000000..28079a3ced
--- /dev/null
+++ b/reader-gtfs/src/test/java/com/graphhopper/reader/gtfs/WrapperGraphTest.java
@@ -0,0 +1,57 @@
+/*
+ *  Licensed to GraphHopper GmbH under one or more contributor
+ *  license agreements. See the NOTICE file distributed with this work for
+ *  additional information regarding copyright ownership.
+ *
+ *  GraphHopper GmbH licenses this file to you under the Apache License,
+ *  Version 2.0 (the "License"); you may not use this file except in
+ *  compliance with the License. You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+
+package com.graphhopper.reader.gtfs;
+
+import com.graphhopper.routing.util.EncodingManager;
+import com.graphhopper.routing.util.FootFlagEncoder;
+import com.graphhopper.storage.GraphExtension;
+import com.graphhopper.storage.GraphHopperStorage;
+import com.graphhopper.storage.RAMDirectory;
+import org.junit.Assert;
+import org.junit.Assume;
+import org.junit.Test;
+
+import java.util.Arrays;
+import java.util.Collections;
+
+import static org.junit.Assert.assertEquals;
+
+public class WrapperGraphTest {
+
+    private final PtFlagEncoder pt;
+    private final FootFlagEncoder foot;
+    private final EncodingManager encodingManager;
+
+    public WrapperGraphTest() {
+        pt = new PtFlagEncoder();
+        foot = new FootFlagEncoder();
+        encodingManager = new EncodingManager(Arrays.asList(pt, foot), 8);
+    }
+
+    @Test
+    public void testEternalOffByOneError() {
+        GraphHopperStorage graph = new GraphHopperStorage(new RAMDirectory("wurst"), encodingManager, false, new GraphExtension.NoOpExtension());
+        assertEquals(0, graph.getNodes());
+        assertEquals(0, graph.getAllEdges().length());
+        WrapperGraph wrapperGraph = new WrapperGraph(graph, Collections.emptyList());
+        assertEquals(0, wrapperGraph.getNodes());
+        assertEquals(0, wrapperGraph.getAllEdges().length());
+    }
+
+}
diff --git a/reader-osm/pom.xml b/reader-osm/pom.xml
index f7d2e4c0fe..f1466e1126 100644
--- a/reader-osm/pom.xml
+++ b/reader-osm/pom.xml
@@ -5,14 +5,14 @@
 
     <groupId>com.graphhopper</groupId>
     <artifactId>graphhopper-reader-osm</artifactId>
-    <version>0.11-SNAPSHOT</version>
+    <version>0.12-SNAPSHOT</version>
     <packaging>jar</packaging>
     <name>GraphHopper Reader for OpenStreetMap Data</name>
 
     <parent>
         <groupId>com.graphhopper</groupId>
         <artifactId>graphhopper-parent</artifactId>    	
-        <version>0.11-SNAPSHOT</version>
+        <version>0.12-SNAPSHOT</version>
     </parent>
 
     <dependencies>
diff --git a/reader-osm/src/test/java/com/graphhopper/GraphHopperIT.java b/reader-osm/src/test/java/com/graphhopper/GraphHopperIT.java
index 1729b19b26..e19b2e9fef 100644
--- a/reader-osm/src/test/java/com/graphhopper/GraphHopperIT.java
+++ b/reader-osm/src/test/java/com/graphhopper/GraphHopperIT.java
@@ -83,7 +83,7 @@ public void tearDown() {
     }
 
     @Test
-    public void testMonacoWithInstructions() throws Exception {
+    public void testMonacoWithInstructions() {
         GHResponse rsp = hopper.route(new GHRequest(43.727687, 7.418737, 43.74958, 7.436566).
                 setAlgorithm(ASTAR).setVehicle(vehicle).setWeighting(weightCalcStr));
 
@@ -952,7 +952,7 @@ public void testFlexMode_631() {
                 setDisablingAllowed(true);
 
         tmpHopper.getLMFactoryDecorator().setEnabled(true).
-                setWeightingsAsStrings(Arrays.asList("fastest")).
+                setWeightingsAsStrings(Arrays.asList("fastest|maximum=2000")).
                 setDisablingAllowed(true);
 
         tmpHopper.importOrLoad();
diff --git a/reader-osm/src/test/java/com/graphhopper/routing/RoutingAlgorithmWithOSMIT.java b/reader-osm/src/test/java/com/graphhopper/routing/RoutingAlgorithmWithOSMIT.java
index b6c16f73cf..8db3858caa 100644
--- a/reader-osm/src/test/java/com/graphhopper/routing/RoutingAlgorithmWithOSMIT.java
+++ b/reader-osm/src/test/java/com/graphhopper/routing/RoutingAlgorithmWithOSMIT.java
@@ -527,8 +527,8 @@ Graph runAlgo(TestAlgoCollector testCollector, String osmFile,
             // avoid that path.getDistance is too different to path.getPoint.calcDistance
             hopper.setWayPointMaxDistance(0);
 
-            // always enable landmarks
-            hopper.getLMFactoryDecorator().addWeighting(weightStr).
+            // always enable landmarks, add maximum information to reduce warnings
+            hopper.getLMFactoryDecorator().addWeighting(weightStr+"|maximum=60000").
                     setEnabled(true).setDisablingAllowed(true);
 
             if (withCH)
diff --git a/reader-shp/pom.xml b/reader-shp/pom.xml
index 9247e4a145..4b9040f1cd 100644
--- a/reader-shp/pom.xml
+++ b/reader-shp/pom.xml
@@ -5,7 +5,7 @@
 
     <groupId>com.graphhopper</groupId>
     <artifactId>graphhopper-reader-shp</artifactId>
-    <version>0.11-SNAPSHOT</version>
+    <version>0.12-SNAPSHOT</version>
     <packaging>jar</packaging>
     <name>GraphHopper Reader for Shapefile Data</name>
 	
@@ -16,7 +16,7 @@
     <parent>
         <groupId>com.graphhopper</groupId>
         <artifactId>graphhopper-parent</artifactId>    	
-        <version>0.11-SNAPSHOT</version>
+        <version>0.12-SNAPSHOT</version>
     </parent>
 
     <dependencies>
diff --git a/tools/pom.xml b/tools/pom.xml
index 0c23f1b7e5..71fc082799 100644
--- a/tools/pom.xml
+++ b/tools/pom.xml
@@ -5,14 +5,14 @@
 
     <groupId>com.graphhopper</groupId>
     <artifactId>graphhopper-tools</artifactId>
-    <version>0.11-SNAPSHOT</version>
+    <version>0.12-SNAPSHOT</version>
     <packaging>jar</packaging>
     <name>GraphHopper Tools</name>
 
     <parent>
         <groupId>com.graphhopper</groupId>
         <artifactId>graphhopper-parent</artifactId>    	
-        <version>0.11-SNAPSHOT</version>
+        <version>0.12-SNAPSHOT</version>
     </parent>
 
     <dependencies>
diff --git a/web-api/pom.xml b/web-api/pom.xml
index b26859400f..e5a1930fc9 100644
--- a/web-api/pom.xml
+++ b/web-api/pom.xml
@@ -6,14 +6,14 @@
     <groupId>com.graphhopper</groupId>
     <artifactId>graphhopper-web-api</artifactId>
     <packaging>jar</packaging>
-    <version>0.11-SNAPSHOT</version>
+    <version>0.12-SNAPSHOT</version>
     <name>GraphHopper Web API</name>
     <description>JSON Representation of the API classes</description>
 
     <parent>
         <groupId>com.graphhopper</groupId>
         <artifactId>graphhopper-parent</artifactId>
-        <version>0.11-SNAPSHOT</version>
+        <version>0.12-SNAPSHOT</version>
     </parent>
 
     <dependencies>
diff --git a/web-bundle/pom.xml b/web-bundle/pom.xml
index 8550a06300..0e62020bba 100644
--- a/web-bundle/pom.xml
+++ b/web-bundle/pom.xml
@@ -6,14 +6,14 @@
     <groupId>com.graphhopper</groupId>
     <artifactId>graphhopper-web-bundle</artifactId>
     <packaging>jar</packaging>
-    <version>0.11-SNAPSHOT</version>
+    <version>0.12-SNAPSHOT</version>
     <name>GraphHopper Dropwizard Bundle</name>
     <description>Use the GraphHopper routing engine as a web-service</description>
 
     <parent>
         <groupId>com.graphhopper</groupId>
         <artifactId>graphhopper-parent</artifactId>
-        <version>0.11-SNAPSHOT</version>
+        <version>0.12-SNAPSHOT</version>
     </parent>
 
     <dependencies>
diff --git a/web-bundle/src/main/java/com/graphhopper/http/GraphHopperBundle.java b/web-bundle/src/main/java/com/graphhopper/http/GraphHopperBundle.java
index ce9f5e0250..b7bddf6b82 100644
--- a/web-bundle/src/main/java/com/graphhopper/http/GraphHopperBundle.java
+++ b/web-bundle/src/main/java/com/graphhopper/http/GraphHopperBundle.java
@@ -28,6 +28,7 @@
 import com.fasterxml.jackson.databind.ser.BeanPropertyWriter;
 import com.fasterxml.jackson.databind.ser.BeanSerializerModifier;
 import com.fasterxml.jackson.databind.util.ISO8601DateFormat;
+import com.fasterxml.jackson.databind.util.StdDateFormat;
 import com.graphhopper.GraphHopper;
 import com.graphhopper.GraphHopperAPI;
 import com.graphhopper.http.health.GraphHopperHealthCheck;
@@ -162,7 +163,7 @@ public void dispose(RasterHullBuilder rasterHullBuilder) {
 
     @Override
     public void initialize(Bootstrap<?> bootstrap) {
-        bootstrap.getObjectMapper().setDateFormat(new ISO8601DateFormat());
+        bootstrap.getObjectMapper().setDateFormat(new StdDateFormat());
         bootstrap.getObjectMapper().registerModule(new JtsModule());
         bootstrap.getObjectMapper().registerModule(new GraphHopperModule());
         bootstrap.getObjectMapper().setSerializationInclusion(JsonInclude.Include.NON_NULL);
diff --git a/web/pom.xml b/web/pom.xml
index 801f3f2da8..70b36f6ca9 100644
--- a/web/pom.xml
+++ b/web/pom.xml
@@ -6,14 +6,14 @@
     <groupId>com.graphhopper</groupId>
     <artifactId>graphhopper-web</artifactId>
     <packaging>jar</packaging>
-    <version>0.11-SNAPSHOT</version>
+    <version>0.12-SNAPSHOT</version>
     <name>GraphHopper Web</name>
     <description>Use the GraphHopper routing engine as a web-service</description>
 
     <parent>
         <groupId>com.graphhopper</groupId>
         <artifactId>graphhopper-parent</artifactId>
-        <version>0.11-SNAPSHOT</version>
+        <version>0.12-SNAPSHOT</version>
     </parent>
     <properties>
         <jetty.version>9.4.2.v20170220</jetty.version>
diff --git a/web/src/main/resources/assets/css/style.css b/web/src/main/resources/assets/css/style.css
index 817b29b81d..d0c296eeee 100644
--- a/web/src/main/resources/assets/css/style.css
+++ b/web/src/main/resources/assets/css/style.css
@@ -205,7 +205,6 @@ body {
     /* color: #666666; */
     font-size: smaller;
     opacity: 0.8;
-    width: 200px;
 }
 
 #footer {
diff --git a/web/src/main/resources/assets/index.html b/web/src/main/resources/assets/index.html
index bb0958fb6d..715aba0cae 100644
--- a/web/src/main/resources/assets/index.html
+++ b/web/src/main/resources/assets/index.html
@@ -33,7 +33,7 @@
         <link rel="stylesheet" href="css/leaflet.loading.css?v=0.1.24" />
         <link rel="stylesheet" href="css/ui-lightness/jquery-ui.min.css" />
         <link rel="stylesheet" href="css/flatpickr.min.css?v=4.4.6">
-        <script type="text/javascript" src="js/main.js?v=0.10.1"></script>
+        <script type="text/javascript" src="js/main.js?v=0.11.0"></script>
         <link rel="stylesheet" type="text/css" href="css/style.css" />
     </head>
     <body>
diff --git a/web/src/main/resources/assets/js/autocomplete.js b/web/src/main/resources/assets/js/autocomplete.js
index b8e3ee00d0..5fc477f7af 100644
--- a/web/src/main/resources/assets/js/autocomplete.js
+++ b/web/src/main/resources/assets/js/autocomplete.js
@@ -159,15 +159,6 @@ AutoComplete.prototype.showListForIndex = function (ghRequest, routeIfAllResolve
     };
 
     myAutoDiv.autocomplete(options);
-
-    // with the following more stable code we cannot click on suggestions any longer
-//    $("#" + fromOrTo + "Input").focusout(function() {
-//        myAutoDiv.autocomplete().disable();
-//        myAutoDiv.autocomplete().hide();
-//    });
-//    $("#" + fromOrTo + "Input").focusin(function() {
-//        myAutoDiv.autocomplete().enable();
-//    });
 };
 
 AutoComplete.prototype.createStub = function () {
diff --git a/web/src/main/resources/assets/js/main.js b/web/src/main/resources/assets/js/main.js
index 1443b38d8f..af33ef9b41 100644
--- a/web/src/main/resources/assets/js/main.js
+++ b/web/src/main/resources/assets/js/main.js
@@ -95,7 +95,7 @@ module.exports.getSortedVehicleKeys=function(e,r){var t=Object.keys(e);return t.
 
 },{}],32:[function(require,module,exports){
 (function (global){
-var i18nIsInitialized,defaultTranslationMap=null,enTranslationMap=null,mathTools=require("./tools/math.js");function tr2(t,r){if(null===t)return console.log("ERROR: key was null?"),"";if(null===defaultTranslationMap)return console.log("ERROR: defaultTranslationMap was not initialized?"),t;t=t.toLowerCase();var o=defaultTranslationMap[t];return!o&&enTranslationMap&&(o=enTranslationMap[t]),o?stringFormat(o,r):t}function tr(t,r){return t!==t.toLowerCase()&&console.log("key "+t+" has to be lower case"),tr2("web."+t,r)}function stringFormat(t,r){if("string"==typeof r&&(r=[r]),t.indexOf("%1$s")>=0)return t.replace(/\%(\d+)\$s/g,function(t,o){return void 0!==r[--o]?r[o]:t});var o=0;return t.replace(/\%s/g,function(t){var n=void 0!==r[o]?r[o]:t;return o++,n})}function initI18N(){if(global.$){$("#searchButton").attr("value",tr("search_button"));var t=$("#locationpoints > div.pointDiv > input.pointInput"),r=t.size;$(t).each(function(t){0===t?$(this).attr("placeholder",tr("from_hint")):t===r-1?$(this).attr("placeholder",tr("to_hint")):$(this).attr("placeholder",tr("via_hint"))}),$(".pointFlag").each(function(){$(this).attr("title",tr("drag_to_reorder"))}),$(".pointDelete").each(function(){$(this).attr("title",tr("delete_from_route"))}),$("#export-link").attr("title",tr("staticlink")),$("#gpxExportButton").attr("title",tr("gpx_export_button"))}}function mToKm(t){return t/1e3}function mToFt(t){return t/.3048}function mToMi(t){return t/1609.344}module.exports.createDistanceString=function(t,r){return r?t<152?mathTools.round(mToFt(t),1)+tr2("ft_abbr"):((t=mathTools.round(mToMi(t),100))>100&&(t=mathTools.round(t,1)),t+tr2("mi_abbr")):t<900?mathTools.round(t,1)+tr2("m_abbr"):((t=mathTools.round(mToKm(t),100))>100&&(t=mathTools.round(t,1)),t+tr2("km_abbr"))},module.exports.createEleInfoString=function(t,r,o){var n="";return(t>0||r>0)&&(n="<br/> ",t>0&&(n+=o?"&#8599;"+mathTools.round(mToFt(t),1)+tr2("ft_abbr"):"&#8599;"+mathTools.round(t,1)+tr2("m_abbr")),r>0&&(n+=o?" &#8600;"+mathTools.round(mToFt(r),1)+tr2("ft_abbr"):" &#8600;"+mathTools.round(r,1)+tr2("m_abbr"))),n},module.exports.createTimeString=function(t){var r,o=mathTools.round(t/60/1e3,1e3);return o>60?o/60>24?(r=mathTools.floor(o/60/24,1)+tr2("day_abbr"),(o=mathTools.floor(o/60%24,1))>0&&(r+=" "+o+tr2("hour_abbr"))):(r=mathTools.floor(o/60,1)+tr2("hour_abbr"),(o=mathTools.floor(o%60,1))>0&&(r+=" "+o+tr2("min_abbr"))):r=mathTools.round(o%60,1)+tr2("min_abbr"),r},module.exports.tr=tr,module.exports.tr2=tr2,module.exports.nanoTemplate=function(t,r){return t.replace(/\{([\w\.]*)\}/g,function(t,o){var n=o.split("."),a=r[n.shift()];for(i=0,l=n.length;i<l;_i++)a=a[this];return void 0!==a&&null!==a?a:""})},module.exports.init=function(t){defaultTranslationMap=t.default,enTranslationMap=t.en,defaultTranslationMap||(defaultTranslationMap=enTranslationMap),i18nIsInitialized=!0,initI18N()},module.exports.isI18nIsInitialized=function(){return i18nIsInitialized};
+var i18nIsInitialized,defaultTranslationMap=null,enTranslationMap=null,mathTools=require("./tools/math.js");function tr2(t,r){if(null===t)return console.log("ERROR: key was null?"),"";if(null===defaultTranslationMap)return console.log("ERROR: defaultTranslationMap was not initialized?"),t;t=t.toLowerCase();var o=defaultTranslationMap[t];return!o&&enTranslationMap&&(o=enTranslationMap[t]),o?stringFormat(o,r):t}function tr(t,r){return t!==t.toLowerCase()&&console.log("key "+t+" has to be lower case"),tr2("web."+t,r)}function stringFormat(t,r){if("string"==typeof r&&(r=[r]),t.indexOf("%1$s")>=0)return t.replace(/\%(\d+)\$s/g,function(t,o){return void 0!==r[--o]?r[o]:t});var o=0;return t.replace(/\%s/g,function(t){var n=void 0!==r[o]?r[o]:t;return o++,n})}function initI18N(){if(global.$){$("#searchButton").attr("value",tr("search_button"));var t=$("#locationpoints > div.pointDiv > input.pointInput"),r=t.size;$(t).each(function(t){0===t?($(this).attr("placeholder",tr("from_hint")),$(this).focus()):t===r-1?$(this).attr("placeholder",tr("to_hint")):$(this).attr("placeholder",tr("via_hint"))}),$(".pointFlag").each(function(){$(this).attr("title",tr("drag_to_reorder"))}),$(".pointDelete").each(function(){$(this).attr("title",tr("delete_from_route"))}),$("#export-link").attr("title",tr("staticlink")),$("#gpxExportButton").attr("title",tr("gpx_export_button"))}}function mToKm(t){return t/1e3}function mToFt(t){return t/.3048}function mToMi(t){return t/1609.344}module.exports.createDistanceString=function(t,r){return r?t<152?mathTools.round(mToFt(t),1)+tr2("ft_abbr"):((t=mathTools.round(mToMi(t),100))>100&&(t=mathTools.round(t,1)),t+tr2("mi_abbr")):t<900?mathTools.round(t,1)+tr2("m_abbr"):((t=mathTools.round(mToKm(t),100))>100&&(t=mathTools.round(t,1)),t+tr2("km_abbr"))},module.exports.createEleInfoString=function(t,r,o){var n="";return(t>0||r>0)&&(n="<br/> ",t>0&&(n+=o?"&#8599;"+mathTools.round(mToFt(t),1)+tr2("ft_abbr"):"&#8599;"+mathTools.round(t,1)+tr2("m_abbr")),r>0&&(n+=o?" &#8600;"+mathTools.round(mToFt(r),1)+tr2("ft_abbr"):" &#8600;"+mathTools.round(r,1)+tr2("m_abbr"))),n},module.exports.createTimeString=function(t){var r,o=mathTools.round(t/60/1e3,1e3);return o>60?o/60>24?(r=mathTools.floor(o/60/24,1)+tr2("day_abbr"),(o=mathTools.floor(o/60%24,1))>0&&(r+=" "+o+tr2("hour_abbr"))):(r=mathTools.floor(o/60,1)+tr2("hour_abbr"),(o=mathTools.floor(o%60,1))>0&&(r+=" "+o+tr2("min_abbr"))):r=mathTools.round(o%60,1)+tr2("min_abbr"),r},module.exports.tr=tr,module.exports.tr2=tr2,module.exports.nanoTemplate=function(t,r){return t.replace(/\{([\w\.]*)\}/g,function(t,o){var n=o.split("."),a=r[n.shift()];for(i=0,l=n.length;i<l;_i++)a=a[this];return void 0!==a&&null!==a?a:""})},module.exports.init=function(t){defaultTranslationMap=t.default,enTranslationMap=t.en,defaultTranslationMap||(defaultTranslationMap=enTranslationMap),i18nIsInitialized=!0,initI18N()},module.exports.isI18nIsInitialized=function(){return i18nIsInitialized};
 
 }).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
 },{"./tools/math.js":29}]},{},[23]);
diff --git a/web/src/main/resources/assets/js/translate.js b/web/src/main/resources/assets/js/translate.js
index 1d382cbe5e..5df696ac55 100644
--- a/web/src/main/resources/assets/js/translate.js
+++ b/web/src/main/resources/assets/js/translate.js
@@ -57,12 +57,14 @@ function initI18N() {
         var location_points = $("#locationpoints > div.pointDiv > input.pointInput");
         var l = location_points.size;
         $(location_points).each(function (index) {
-            if (index === 0)
+            if (index === 0) {
                 $(this).attr("placeholder", tr("from_hint"));
-            else if (index === (l - 1))
+                $(this).focus();
+            } else if (index === (l - 1)) {
                 $(this).attr("placeholder", tr("to_hint"));
-            else
+            } else {
                 $(this).attr("placeholder", tr("via_hint"));
+            }
         });
         $('.pointFlag').each(function () {
             $(this).attr('title', tr('drag_to_reorder'));
