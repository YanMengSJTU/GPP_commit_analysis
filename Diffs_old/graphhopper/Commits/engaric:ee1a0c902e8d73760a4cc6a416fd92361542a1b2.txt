diff --git a/core/src/main/java/com/graphhopper/GraphHopper.java b/core/src/main/java/com/graphhopper/GraphHopper.java
index 2456cf044b..19dc5fed1d 100644
--- a/core/src/main/java/com/graphhopper/GraphHopper.java
+++ b/core/src/main/java/com/graphhopper/GraphHopper.java
@@ -39,6 +39,7 @@
 import com.graphhopper.reader.osgb.hn.OsHnReader;
 import com.graphhopper.reader.osgb.itn.OsItnReader;
 import com.graphhopper.routing.AlgorithmOptions;
+import com.graphhopper.routing.EscapePrivateWeighting;
 import com.graphhopper.routing.Path;
 import com.graphhopper.routing.QueryGraph;
 import com.graphhopper.routing.RoutingAlgorithm;
@@ -974,6 +975,16 @@ public Weighting createTurnWeighting( Weighting weighting, Graph graph, FlagEnco
 			return new TurnWeighting(weighting, encoder, (TurnCostExtension) graph.getExtension());
 		return weighting;
 	}
+	
+	/**
+	 * Potentially wraps the specified weighting into a EscapePrivateWeighting instance.
+	 */
+	public Weighting createEscapePrivateWeighting( Weighting weighting, Graph graph, FlagEncoder encoder )
+	{
+		if (encoder.supports(EscapePrivateWeighting.class))
+			return new EscapePrivateWeighting(graph, encoder, weighting);
+		return weighting;
+	}
 
 	@Override
 	public GHResponse route( GHRequest request )
@@ -1086,6 +1097,7 @@ public GHResponse route( GHRequest request )
 			return Collections.emptyList();
 		}
 		weighting = createTurnWeighting(weighting, queryGraph, encoder);
+		weighting = createEscapePrivateWeighting(weighting, queryGraph, encoder);
 
 		double weightLimit = request.getHints().getDouble("defaultWeightLimit", defaultWeightLimit);
 		String algoStr = request.getAlgorithm().isEmpty() ? AlgorithmOptions.DIJKSTRA_BI : request
diff --git a/core/src/main/java/com/graphhopper/routing/AStar.java b/core/src/main/java/com/graphhopper/routing/AStar.java
index 4a77796207..c29870bb26 100644
--- a/core/src/main/java/com/graphhopper/routing/AStar.java
+++ b/core/src/main/java/com/graphhopper/routing/AStar.java
@@ -18,6 +18,7 @@
 package com.graphhopper.routing;
 
 import com.graphhopper.util.DistancePlaneProjection;
+
 import gnu.trove.map.TIntObjectMap;
 import gnu.trove.map.hash.TIntObjectHashMap;
 
@@ -78,6 +79,11 @@ protected void initCollections( int size )
     public Path calcPath( int from, int to )
     {
         checkAlreadyRun();
+        if (weighting instanceof EscapePrivateWeighting)
+        {
+	        EscapePrivateWeighting escapeWeighting = (EscapePrivateWeighting) weighting;
+	        escapeWeighting.setFromTo(from, to);
+        }
         to1 = to;
         weightApprox.setGoalNode(to);
         currEdge = createEdgeEntry(from, 0);
diff --git a/core/src/main/java/com/graphhopper/routing/AbstractBidirAlgo.java b/core/src/main/java/com/graphhopper/routing/AbstractBidirAlgo.java
index 7e92c25b06..b6c2051342 100644
--- a/core/src/main/java/com/graphhopper/routing/AbstractBidirAlgo.java
+++ b/core/src/main/java/com/graphhopper/routing/AbstractBidirAlgo.java
@@ -58,6 +58,11 @@ public Path calcPath( int from, int to )
         createAndInitPath();
         initFrom(from, 0);
         initTo(to, 0);
+        if (weighting instanceof EscapePrivateWeighting)
+        {
+	        EscapePrivateWeighting escapeWeighting = (EscapePrivateWeighting) weighting;
+	        escapeWeighting.setFromTo(from, to);
+        }
         runAlgo();
         return extractPath();
     }
diff --git a/core/src/main/java/com/graphhopper/routing/Dijkstra.java b/core/src/main/java/com/graphhopper/routing/Dijkstra.java
index f207b85e86..6b016d5d09 100644
--- a/core/src/main/java/com/graphhopper/routing/Dijkstra.java
+++ b/core/src/main/java/com/graphhopper/routing/Dijkstra.java
@@ -60,6 +60,11 @@ protected void initCollections( int size )
     public Path calcPath( int from, int to )
     {
         checkAlreadyRun();
+        if (weighting instanceof EscapePrivateWeighting)
+        {
+	        EscapePrivateWeighting escapeWeighting = (EscapePrivateWeighting) weighting;
+	        escapeWeighting.setFromTo(from, to);
+        }
         this.to = to;
         currEdge = createEdgeEntry(from, 0);
         if (!traversalMode.isEdgeBased())
diff --git a/core/src/main/java/com/graphhopper/routing/EscapePrivateWeighting.java b/core/src/main/java/com/graphhopper/routing/EscapePrivateWeighting.java
index 0d24ed5d02..0751ed6efe 100644
--- a/core/src/main/java/com/graphhopper/routing/EscapePrivateWeighting.java
+++ b/core/src/main/java/com/graphhopper/routing/EscapePrivateWeighting.java
@@ -17,15 +17,18 @@
 	private int start;
 	private int end;
 
-	public EscapePrivateWeighting( Graph graph, FlagEncoder encoder, Weighting weighting, int start, int end )
+	public EscapePrivateWeighting( Graph graph, FlagEncoder encoder, Weighting weighting)
     {
 	    super();
 	    this.graph = graph;
 	    this.encoder = encoder;
 	    this.innerWeighting = weighting;
-	    this.start = start;
-	    this.end = end;
     }
+	
+	public void setFromTo(int from , int to) {
+		start = from;
+		end = to;
+	}
 
 	@Override
 	public double getMinWeight( double distance )
