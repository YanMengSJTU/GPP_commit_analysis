diff --git a/automate.py b/automate.py
index 45780b6544..47cc2024c0 100644
--- a/automate.py
+++ b/automate.py
@@ -44,6 +44,25 @@ def haversine(lon1, lat1, lon2, lat2):
 	r = 6371 # Radius of earth in kilometers. Use 3956 for miles
 	return c * r
 
+def spawn_radius(lon0, lat0, radius):
+	   
+	radiusInDegrees = radius / (111.32 * 1000 * cos(lat0 * (pi / 180)));
+
+	u = random.random()
+	v = random.random()
+	w = radiusInDegrees * sqrt(u)
+	
+	t = 2 * pi * v
+	x = w * cos(t)
+	y = w * sin(t)
+
+	new_x = x / cos(lat0)
+
+	foundLongitude = new_x + lon0
+	foundLatitude = y + lat0
+	#print "Longitude: " + str(foundLongitude) + "  Latitude: " + str(foundLatitude)
+	return (foundLongitude, foundLatitude)
+
 def tcp_client():
 	#5, 6, 9, 10
 
@@ -80,6 +99,9 @@ def tcp_client():
 			num_spawn = 25
 			exception_count = 0
 
+			client = socket.socket( socket.AF_INET, socket.SOCK_STREAM)
+			client.connect((HOST, PORT))
+
 			for spawn_i in xrange(0, num_spawn):
 
 				pickup_longitude = float(firstdata[5])
@@ -88,24 +110,20 @@ def tcp_client():
 				dropoff_latitude = float(firstdata[10])
 
 				if(spawn_i > 0):
-					off1 = random.randint(-1000, 1000)/300000.0
-					off2 = random.randint(-1000, 1000)/300000.0
-					off3 = random.randint(-1000, 1000)/300000.0
-					off4 = random.randint(-1000, 1000)/300000.0
-
-					#print str(off1) + " " + str(off2) + " " + str(off3) + " " + str(off4)
 
-					pickup_longitude += off1
-					pickup_latitude  += off2
-					dropoff_longitude += off3
-					dropoff_latitude += off4
+					pickup_new = spawn_radius(pickup_longitude, pickup_latitude, 250)
+					dropoff_new = spawn_radius(dropoff_longitude, dropoff_latitude, 250)
+					
+					pickup_longitude = pickup_new[0]
+					pickup_latitude = pickup_new[1]
+					dropoff_longitude = dropoff_new[0]
+					dropoff_latitude = dropoff_new[1]
 				
 				l1 = 'GET http://localhost:8989/route?point=' + str(pickup_latitude) + '%2C' + str(pickup_longitude) + '&point=' + str(dropoff_latitude) + '%2C' + str(dropoff_longitude) + '&type=json&key=&locale=en-US&vehicle=car&weighting=fastest&elevation=false HTTP/1.1\r\n'
 				l7 = 'Referer: http://localhost:8989/?point=' + str(pickup_latitude) + '%2C' + str(pickup_longitude) + '&point=' + str(dropoff_latitude) + '%2C' + str(dropoff_longitude) + '&locale=en-US&vehicle=car&weighting=fastest&elevation=false&use_miles=false&layer=Omniscale\\\r\n'
 				DATA = l1 + l2 + l3 + l4 + l5 + l6 + l7 + l8
 				#print DATA
-				client = socket.socket( socket.AF_INET, socket.SOCK_STREAM)
-				client.connect((HOST, PORT ))
+
 
 				client.send(DATA)
 
@@ -207,7 +225,7 @@ def tcp_client():
 					#print str(coord[0]) + ", " + str(coord[1])
 				#print "decompressed_data: " + json_data[1][1]
 
-				client.close()
+			client.close()
 
 			spawn_valid = num_spawn - exception_count - 1
 			if spawn_valid == 0:
@@ -221,7 +239,7 @@ def tcp_client():
 				total_length += seg_length
 				overlap_ratio = float(coord_hash[key])/float(spawn_valid)
 				#print "overlap_ratio: " + str(coord_hash[key])
-				if overlap_ratio > cdf_ratio:
+				if overlap_ratio >= cdf_ratio:
 					overlap_length += seg_length
 				
 			if total_length > 0:
@@ -239,5 +257,6 @@ def tcp_client():
 
 if __name__ == '__main__':
 	print haversine(-73.988537,40.750073,-73.815099,40.963191)
+	spawn_radius(-73.988537,40.750073, 250)
 	#40.750073,-73.988537/@40.963191,-73.815099
 	tcp_client()
\ No newline at end of file
