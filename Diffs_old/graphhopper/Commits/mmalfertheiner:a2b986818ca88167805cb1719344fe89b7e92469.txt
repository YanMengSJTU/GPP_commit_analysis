diff --git a/Setup.md b/Setup.md
new file mode 100644
index 0000000000..5c9fdb94e0
--- /dev/null
+++ b/Setup.md
@@ -0,0 +1,69 @@
+# First Elevation Aware Router - feveR
+
+This is a simple guide to run feveR on vagrant. Once the repo has been cloned move to the feveR directory and you can start with the following instructions. 
+
+### Copy default config file into graphhopper/
+
+```sh
+$ cd config/config.properties graphhopper/
+```
+
+### Download PBF
+
+There exist many hoster that provide pbf files of parts of OSM. A very convenient one is: [BBBike].
+
+e.g. Pbf file for Innsbruck: [BBBike IBK]
+
+Download the file and place it in the graphhopper/ directory.
+
+
+### Vagrant
+
+```sh
+$ vagrant up
+$ vagrant ssh
+$ cd /vagrant/graphhopper/
+```
+
+### Start feveR
+
+```sh
+$ ./graphhopper.sh web Innsbruck.osm.pbf
+```
+
+
+### Use feveR
+
+Open browser: http://192.168.5.2:8989
+Or click here: [feveR]
+
+* Select map visualization on the top right corner
+* Click on bike button top left corner to use feveR routing
+* Enter start and end points
+* Click on search button
+* Right lower corner visualizes elevation profile
+
+
+### Using and creating profiles
+
+Up to now it is only possible to create, delete and add tracks to a profile through the command line on the server.
+
+Creating a new profile:
+
+```sh
+$ ./profiles.sh create <profile>
+```
+
+Add track to profile
+
+```sh
+$ ./profiles.sh add <profile> <track> <pbf-file>
+```
+
+Searching a route for this profile:
+
+* Add parameter to url: &profile=<profile>
+
+[BBBike]: <http://download.bbbike.org/osm/>
+[BBBike IBK]: <http://download.bbbike.org/osm/bbbike/Innsbruck/>
+[feveR]: <http://192.168.5.2:8989>
\ No newline at end of file
diff --git a/core/src/main/java/com/graphhopper/routing/util/DynamicWeighting.java b/core/src/main/java/com/graphhopper/routing/util/DynamicWeighting.java
index 83162676dd..b2389551b7 100644
--- a/core/src/main/java/com/graphhopper/routing/util/DynamicWeighting.java
+++ b/core/src/main/java/com/graphhopper/routing/util/DynamicWeighting.java
@@ -89,8 +89,6 @@ public double calcWeight( EdgeIteratorState edgeState, boolean reverse, int prev
         if (penalizeEdge)
             time += heading_penalty;
 
-        System.out.println("ID: " + edgeState.getEdge() + ", REVERSE: " + reverse + ", TIME: " + time);
-
         return time / Math.pow((0.5 + getEdgePreference(edgeState, reverse)), 2);
     }
 
@@ -121,9 +119,7 @@ protected double getEdgePreference(EdgeIteratorState edgeState, boolean reverse)
         priority += preferenceProvider.calcWayTypePreference(wayType);
         priority += preferenceProvider.calcSurfacePreference(pavedSurface);
         priority += preferenceProvider.calcSlopePreference(wayType, incSlope, incDist2DSum, decSlope, decDist2DSum);
-
-        //System.out.println("ID: " + edgeState.getEdge() + ", REVERSE: " + reverse +", WAYTYPE: " + wayType + ", INC SLOPE: " + incSlope + ", DEC SLOPE: " + decSlope +", PRIORITY: " + Helper.keepIn(priority, PriorityCode.WORST.getValue(), PriorityCode.BEST.getValue()));
-
+        
         return Helper.keepIn(priority, PriorityCode.WORST.getValue(), PriorityCode.BEST.getValue()) / PriorityCode.BEST.getValue();
 
     }
diff --git a/core/src/main/java/com/graphhopper/routing/util/EncoderSpeedProvider.java b/core/src/main/java/com/graphhopper/routing/util/EncoderSpeedProvider.java
index 31c6450710..ab399572c3 100644
--- a/core/src/main/java/com/graphhopper/routing/util/EncoderSpeedProvider.java
+++ b/core/src/main/java/com/graphhopper/routing/util/EncoderSpeedProvider.java
@@ -38,7 +38,6 @@ protected double adjustSpeed(double speed, EdgeIteratorState edgeState, boolean
             incDistPercentage = 1.0 - incDistPercentage;
         }
 
-        //System.out.println("ID: " + edgeState.getEdge() + ", REVERSE: " + reverse + ", INC SLOPE: " + incElevation + ", DEC SLOPE: " + decElevation);
 
         // use weighted mean so that longer incline infuences speed more than shorter
         double fwdFaster = 1 + 30 * keepIn(decElevation, 0, 0.2);
@@ -49,8 +48,6 @@ protected double adjustSpeed(double speed, EdgeIteratorState edgeState, boolean
         double decDist2DSum = edgeState.getDistance() - incDist2DSum;
         adjustedSpeed = keepIn(speed * (fwdSlower * incDist2DSum + fwdFaster * decDist2DSum) / edgeState.getDistance(), BikeGenericFlagEncoder.PUSHING_SECTION_SPEED / 2, 50);
 
-        //System.out.println("NEW SPEED: " + Helper.round2(adjustedSpeed) + ", SPEED: " + speed + ", INC ELE: " + incElevation + ", DEC ELE: " + decElevation + ", PERCENTAGE: " + incDistPercentage + " CORRECT:");
-
         return adjustedSpeed;
     }
 
diff --git a/core/src/main/java/com/graphhopper/util/profiles/ProfileManager.java b/core/src/main/java/com/graphhopper/util/profiles/ProfileManager.java
index b0d81b44f5..1289482653 100644
--- a/core/src/main/java/com/graphhopper/util/profiles/ProfileManager.java
+++ b/core/src/main/java/com/graphhopper/util/profiles/ProfileManager.java
@@ -2,7 +2,6 @@
 
 
 import com.graphhopper.routing.util.BikeGenericFlagEncoder;
-import com.graphhopper.util.EdgeIteratorState;
 import org.apache.commons.math3.fitting.WeightedObservedPoint;
 
 import java.util.ArrayList;
