diff --git a/web/src/main/java/com/graphhopper/http/GraphHopperManaged.java b/web/src/main/java/com/graphhopper/http/GraphHopperManaged.java
index 1353f3d572..1ebf14853e 100644
--- a/web/src/main/java/com/graphhopper/http/GraphHopperManaged.java
+++ b/web/src/main/java/com/graphhopper/http/GraphHopperManaged.java
@@ -20,14 +20,15 @@
 
 import com.graphhopper.GraphHopper;
 import com.graphhopper.reader.osm.GraphHopperOSM;
+import com.graphhopper.routing.VirtualEdgeIteratorState;
 import com.graphhopper.routing.util.DefaultFlagEncoderFactory;
 import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.routing.util.FlagEncoderFactory;
-import com.graphhopper.routing.util.HintsMap;
 import com.graphhopper.routing.weighting.Weighting;
 import com.graphhopper.spatialrules.SpatialRuleLookupHelper;
 import com.graphhopper.util.CmdArgs;
 import com.graphhopper.util.EdgeIteratorState;
+import com.graphhopper.util.GHUtility;
 import com.graphhopper.util.PMap;
 import com.graphhopper.util.Parameters;
 import com.graphhopper.util.details.AbstractPathDetailsBuilder;
@@ -37,10 +38,10 @@
 import com.graphhopper.util.details.PathDetailsBuilderFactory;
 import com.graphhopper.util.details.StreetNameDetails;
 import com.graphhopper.util.details.TimeDetails;
+import com.michaz.OriginalDirectionFlagEncoder;
 import io.dropwizard.lifecycle.Managed;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-import com.michaz.OriginalDirectionFlagEncoder;
 
 import javax.inject.Inject;
 import javax.inject.Singleton;
@@ -96,7 +97,13 @@ public FlagEncoder createFlagEncoder(String name, PMap configuration) {
 
                         @Override
                         public boolean isEdgeDifferentToLastEdge(EdgeIteratorState edge) {
-                            int newEdgeId = edge.getEdge() * 2 + (originalDirectionFlagEncoder.isOriginalDirection(edge.getFlags()) ? 0 : 1);
+                            final int ghEdgeKey;
+                            if (edge instanceof VirtualEdgeIteratorState) {
+                                ghEdgeKey = GHUtility.getEdgeFromEdgeKey(((VirtualEdgeIteratorState) edge).getOriginalTraversalKey());
+                            } else {
+                                ghEdgeKey = edge.getEdge();
+                            }
+                            int newEdgeId = ghEdgeKey * 2 + (originalDirectionFlagEncoder.isOriginalDirection(edge.getFlags()) ? 0 : 1);
                             if (newEdgeId != edgeId) {
                                 edgeId = newEdgeId;
                                 return true;
