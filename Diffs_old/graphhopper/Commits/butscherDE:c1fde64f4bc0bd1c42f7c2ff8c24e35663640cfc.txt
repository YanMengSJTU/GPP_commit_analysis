diff --git a/core/src/main/java/com/graphhopper/routing/template/PolygonRoutingTemplate.java b/core/src/main/java/com/graphhopper/routing/template/PolygonRoutingTemplate.java
index 1e16821198..351db9c9c9 100644
--- a/core/src/main/java/com/graphhopper/routing/template/PolygonRoutingTemplate.java
+++ b/core/src/main/java/com/graphhopper/routing/template/PolygonRoutingTemplate.java
@@ -3,8 +3,8 @@
 import com.graphhopper.GHRequest;
 import com.graphhopper.GHResponse;
 import com.graphhopper.routing.*;
-import com.graphhopper.routing.template.PolygonRoutingUtil.RouteCandidateList;
-import com.graphhopper.routing.template.PolygonRoutingUtil.RouteCandidatePolygon;
+import com.graphhopper.routing.template.polygonRoutingUtil.RouteCandidateList;
+import com.graphhopper.routing.template.polygonRoutingUtil.RouteCandidatePolygon;
 import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.storage.GraphHopperStorage;
diff --git a/core/src/main/java/com/graphhopper/routing/template/PolygonThroughRoutingTemplate.java b/core/src/main/java/com/graphhopper/routing/template/PolygonThroughRoutingTemplate.java
index d2c249cff2..db4d690e31 100644
--- a/core/src/main/java/com/graphhopper/routing/template/PolygonThroughRoutingTemplate.java
+++ b/core/src/main/java/com/graphhopper/routing/template/PolygonThroughRoutingTemplate.java
@@ -3,9 +3,9 @@
 import com.graphhopper.GHRequest;
 import com.graphhopper.GHResponse;
 import com.graphhopper.routing.*;
-import com.graphhopper.routing.template.PolygonRoutingUtil.RouteCandidatePolygon;
-import com.graphhopper.routing.template.PolygonRoutingUtil.RouteCandidateList;
-import com.graphhopper.routing.template.PolygonRoutingUtil.RouteCandidatePolygonThrough;
+import com.graphhopper.routing.template.polygonRoutingUtil.RouteCandidatePolygon;
+import com.graphhopper.routing.template.polygonRoutingUtil.RouteCandidateList;
+import com.graphhopper.routing.template.polygonRoutingUtil.RouteCandidatePolygonThrough;
 import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.storage.GraphHopperStorage;
 import com.graphhopper.storage.NodeAccess;
diff --git a/core/src/main/java/com/graphhopper/routing/template/PolygonRoutingUtil/RouteCandidateList.java b/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidateList.java
similarity index 98%
rename from core/src/main/java/com/graphhopper/routing/template/PolygonRoutingUtil/RouteCandidateList.java
rename to core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidateList.java
index 267b70ddcb..3d5b8fb720 100644
--- a/core/src/main/java/com/graphhopper/routing/template/PolygonRoutingUtil/RouteCandidateList.java
+++ b/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidateList.java
@@ -1,4 +1,4 @@
-package com.graphhopper.routing.template.PolygonRoutingUtil;
+package com.graphhopper.routing.template.polygonRoutingUtil;
 
 import com.graphhopper.routing.AlgorithmOptions;
 import com.graphhopper.routing.Path;
diff --git a/core/src/main/java/com/graphhopper/routing/template/PolygonRoutingUtil/RouteCandidatePolygon.java b/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidatePolygon.java
similarity index 98%
rename from core/src/main/java/com/graphhopper/routing/template/PolygonRoutingUtil/RouteCandidatePolygon.java
rename to core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidatePolygon.java
index 967ba372e0..cee985e9e5 100644
--- a/core/src/main/java/com/graphhopper/routing/template/PolygonRoutingUtil/RouteCandidatePolygon.java
+++ b/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidatePolygon.java
@@ -1,4 +1,4 @@
-package com.graphhopper.routing.template.PolygonRoutingUtil;
+package com.graphhopper.routing.template.polygonRoutingUtil;
 
 import com.graphhopper.routing.*;
 import com.graphhopper.routing.template.PolygonRoutingTemplate;
diff --git a/core/src/main/java/com/graphhopper/routing/template/PolygonRoutingUtil/RouteCandidatePolygonThrough.java b/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidatePolygonThrough.java
similarity index 96%
rename from core/src/main/java/com/graphhopper/routing/template/PolygonRoutingUtil/RouteCandidatePolygonThrough.java
rename to core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidatePolygonThrough.java
index bf90d3bb04..7ed8ac19b4 100644
--- a/core/src/main/java/com/graphhopper/routing/template/PolygonRoutingUtil/RouteCandidatePolygonThrough.java
+++ b/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidatePolygonThrough.java
@@ -1,4 +1,4 @@
-package com.graphhopper.routing.template.PolygonRoutingUtil;
+package com.graphhopper.routing.template.polygonRoutingUtil;
 
 import com.graphhopper.routing.DijkstraManyToMany;
 import com.graphhopper.routing.template.PolygonThroughRoutingTemplate;
diff --git a/core/src/test/java/com/graphhopper/routing/template/PolygonThroughRoutingTemplateTest.java b/core/src/test/java/com/graphhopper/routing/template/PolygonThroughRoutingTemplateTest.java
index 442e8d2de2..71ede8c1fc 100644
--- a/core/src/test/java/com/graphhopper/routing/template/PolygonThroughRoutingTemplateTest.java
+++ b/core/src/test/java/com/graphhopper/routing/template/PolygonThroughRoutingTemplateTest.java
@@ -7,21 +7,16 @@
 import com.graphhopper.routing.util.*;
 import com.graphhopper.routing.weighting.Weighting;
 import com.graphhopper.util.shapes.GHPoint;
-import org.junit.Before;
 import org.junit.Test;
 
 import java.util.ArrayList;
+import java.util.Arrays;
 import java.util.List;
 
 import static com.graphhopper.util.Parameters.Routing.*;
 
 public class PolygonThroughRoutingTemplateTest {
-    private PolygonRoutingTestGraph testGraph = new PolygonRoutingTestGraph();
-
-
-    @Before
-    public void initVariables() {
-    }
+    private final PolygonRoutingTestGraph testGraph = new PolygonRoutingTestGraph();
 
     @Test
     public void quickStartingTest() {
@@ -58,7 +53,6 @@ private AlgorithmOptions buildAlgorithmOptions(HintsMap hints, TraversalMode tMo
 
     private GHRequest buildRequest(GHPoint... startViaEndPoints) {
         List<GHPoint> startViaEndPointList = convertPointsToListFormat(startViaEndPoints);
-        List<Double> favoredHeadings = new ArrayList<>(0);
         String vehicleStr = "car";
         String weighting = "fastest";
         String algoStr = "";
@@ -84,10 +78,7 @@ private GHRequest buildRequest(GHPoint... startViaEndPoints) {
     }
 
     private static List<GHPoint> convertPointsToListFormat(GHPoint[] startViaEndPoints) {
-        List<GHPoint> startViaEndPointList = new ArrayList<GHPoint>();
-        for (GHPoint point : startViaEndPoints) {
-            startViaEndPointList.add(point);
-        }
+        List<GHPoint> startViaEndPointList = new ArrayList<>(Arrays.asList(startViaEndPoints));
 
         return startViaEndPointList;
     }
diff --git a/core/src/test/java/com/graphhopper/routing/template/PolygonRoutingUtil/RouteCandidateListTest.java b/core/src/test/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidateListTest.java
similarity index 70%
rename from core/src/test/java/com/graphhopper/routing/template/PolygonRoutingUtil/RouteCandidateListTest.java
rename to core/src/test/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidateListTest.java
index 76def82074..eac2a89e69 100644
--- a/core/src/test/java/com/graphhopper/routing/template/PolygonRoutingUtil/RouteCandidateListTest.java
+++ b/core/src/test/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidateListTest.java
@@ -1,4 +1,4 @@
-package com.graphhopper.routing.template.PolygonRoutingUtil;
+package com.graphhopper.routing.template.polygonRoutingUtil;
 
 import com.graphhopper.GHRequest;
 import com.graphhopper.routing.AlgorithmOptions;
@@ -17,10 +17,10 @@
 import static org.junit.Assert.assertEquals;
 
 public class RouteCandidateListTest {
-    final RouteCandidateList<RouteCandidateMocker> candidateList = new RouteCandidateList<>();
-    final GHRequest ghRequest = new GHRequest(0,0, 10, 10).setPolygon(new Polygon(new double [] {5,10,10,5}, new double [] {5,5,10,10}));
-    final PolygonThroughRoutingTemplate routingTemplate = new PolygonThroughRoutingTemplate(ghRequest, null, null, null, null, null);
-    final PolygonRoutingTestGraph graphMocker = new PolygonRoutingTestGraph();
+    private final RouteCandidateList<RouteCandidateMocker> candidateList = new RouteCandidateList<>();
+    private final GHRequest ghRequest = new GHRequest(0, 0, 10, 10).setPolygon(new Polygon(new double [] {5, 10, 10, 5}, new double [] {5, 5, 10, 10}));
+    private final PolygonThroughRoutingTemplate routingTemplate = new PolygonThroughRoutingTemplate(ghRequest, null, null, null, null, null);
+    private final PolygonRoutingTestGraph graphMocker = new PolygonRoutingTestGraph();
 
     private void addTestingCandidates() {
         this.candidateList.getCandidates().clear();
@@ -58,19 +58,14 @@ public void assertCorrectTopThreeRoutes() {
         assertEquals(3, topCandidates.size());
     }
 
-    @Test
-    public void assertCorrectBestCandidate() {
-
-    }
-
-    public class RouteCandidateMocker extends RouteCandidatePolygon {
-        protected final double polygonRouteDistance;
-        protected final double roiDistance;
-        protected final double directDistance;
-        protected final String name;
+    class RouteCandidateMocker extends RouteCandidatePolygon {
+        final double polygonRouteDistance;
+        final double roiDistance;
+        final double directDistance;
+        final String name;
 
-        public RouteCandidateMocker(PolygonRoutingTemplate polygonRoutingTemplate, final double polygonRouteDistance, final double distanceInROI, final double directDistance,
-                                    final String name) {
+        RouteCandidateMocker(PolygonRoutingTemplate polygonRoutingTemplate, final double polygonRouteDistance, final double distanceInROI, final double directDistance,
+                             final String name) {
             super(polygonRoutingTemplate, 0,3,1,2);
 
             this.polygonRouteDistance = polygonRouteDistance;
@@ -95,26 +90,23 @@ public void calcPaths() {
 
         @Override
         public String toString() {
-            StringBuilder sb = new StringBuilder();
-
-            sb.append(super.toString());
-            sb.append(", name: ");
-            sb.append(name);
 
-            return sb.toString();
+            String sb = super.toString() +
+                        ", name: " +
+                        name;
+            return sb;
         }
 
         @Override
         public Path getMergedPath(final QueryGraph queryGraph, final AlgorithmOptions algorithmOptions) {
-            Path mergedPath = new TestPath(graphMocker.graph, graphMocker.weighting, this.name);
-            return mergedPath;
+            return new TestPath(graphMocker.graph, graphMocker.weighting, this.name);
         }
     }
 
-    private class TestPath extends Path {
+    private static class TestPath extends Path {
         final String name;
 
-        public TestPath(Graph graph, Weighting weighting, final String name) {
+        TestPath(Graph graph, Weighting weighting, final String name) {
             super(graph, weighting);
             this.name = name;
         }
diff --git a/core/src/test/java/com/graphhopper/routing/template/PolygonRoutingUtil/RouteCandidateTest.java b/core/src/test/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidateTest.java
similarity index 87%
rename from core/src/test/java/com/graphhopper/routing/template/PolygonRoutingUtil/RouteCandidateTest.java
rename to core/src/test/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidateTest.java
index d6ffcb649b..3673fb5169 100644
--- a/core/src/test/java/com/graphhopper/routing/template/PolygonRoutingUtil/RouteCandidateTest.java
+++ b/core/src/test/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidateTest.java
@@ -1,4 +1,4 @@
-package com.graphhopper.routing.template.PolygonRoutingUtil;
+package com.graphhopper.routing.template.polygonRoutingUtil;
 
 import com.graphhopper.GHRequest;
 import com.graphhopper.routing.Path;
@@ -11,9 +11,9 @@
 import static org.junit.Assert.assertEquals;
 
 public class RouteCandidateTest {
-    final GHRequest ghRequest = new GHRequest(0, 0, 10, 10).setPolygon(new Polygon(new double [] {5, 10, 10, 5}, new double [] {5, 5, 10, 10}));
-    final PolygonRoutingTestGraph graphMocker = new PolygonRoutingTestGraph();
-    final PolygonThroughRoutingTemplate routingTemplate = new PolygonThroughRoutingTemplate(ghRequest, null, graphMocker.locationIndex, graphMocker.nodeAccess, graphMocker.graph
+    private final GHRequest ghRequest = new GHRequest(0, 0, 10, 10).setPolygon(new Polygon(new double [] {5, 10, 10, 5}, new double [] {5, 5, 10, 10}));
+    private final PolygonRoutingTestGraph graphMocker = new PolygonRoutingTestGraph();
+    private final PolygonThroughRoutingTemplate routingTemplate = new PolygonThroughRoutingTemplate(ghRequest, null, graphMocker.locationIndex, graphMocker.nodeAccess, graphMocker.graph
             , graphMocker.encodingManager);
 
 
diff --git a/core/src/test/java/com/graphhopper/routing/template/util/PolygonRoutingTestGraph.java b/core/src/test/java/com/graphhopper/routing/template/util/PolygonRoutingTestGraph.java
index a5534b334e..53eff5ae4e 100644
--- a/core/src/test/java/com/graphhopper/routing/template/util/PolygonRoutingTestGraph.java
+++ b/core/src/test/java/com/graphhopper/routing/template/util/PolygonRoutingTestGraph.java
@@ -16,11 +16,11 @@
 import sun.reflect.generics.reflectiveObjects.NotImplementedException;
 
 public class PolygonRoutingTestGraph {
-    public final TurnCostExtension turnCostExtension;
-    public Node[] nodes;
-    public DistanceCalc2D distanceCalculator;
+    private final TurnCostExtension turnCostExtension;
+    private Node[] nodes;
+    private final DistanceCalc2D distanceCalculator;
     public EncodingManager encodingManager;
-    public FlagEncoder flagEncoder;
+    private FlagEncoder flagEncoder;
     public GraphHopperStorage graph;
     public Polygon polygon;
     public LocationIndex locationIndex;
@@ -44,7 +44,7 @@ public PolygonRoutingTestGraph() {
         this.setWeighting();
     }
 
-    public GraphHopperStorage createPolygonTestGraph() {
+    private GraphHopperStorage createPolygonTestGraph() {
         this.graph = new GraphHopperStorage(new RAMDirectory(), this.encodingManager, false, turnCostExtension);
         this.graph.create(1000);
 
@@ -124,7 +124,7 @@ private void getNodeList() {
 
     private void setDistanceToEuclidean() {
         for (Node node : nodes) {
-            node.updateDistance(this.graph);
+            node.updateDistance();
         }
     }
 
@@ -269,12 +269,11 @@ private void buildEdges() {
         this.graph.edge(56, 57, 1, true);
     }
 
-    public Polygon createPolygon() {
-        final Polygon polygon = new Polygon(new double[]{19, 19, 8, 8}, new double[]{14, 24, 24, 14});
-        return polygon;
+    private Polygon createPolygon() {
+        return new Polygon(new double[]{19, 19, 8, 8}, new double[]{14, 24, 24, 14});
     }
 
-    public LocationIndex getCorrespondingIndex() {
+    private LocationIndex getCorrespondingIndex() {
         return new LocationIndex() {
             @Override
             public LocationIndex setResolution(int resolution) {
@@ -294,9 +293,7 @@ public QueryResult findClosest(double lat, double lon, EdgeFilter edgeFilter) {
                 Node minNode = minDistanceNodeFinder.getMinNode();
                 EdgeIteratorState firstEdgeAdjacentToMinNode = findClosestEdge(minNode);
 
-                QueryResult result = createQueryResult(minDistance, minNode, firstEdgeAdjacentToMinNode);
-
-                return result;
+                return createQueryResult(minDistance, minNode, firstEdgeAdjacentToMinNode);
             }
 
             private EdgeIteratorState findClosestEdge(Node minNode) {
@@ -367,46 +364,42 @@ public long getCapacity() {
         };
     }
 
-    public NodeAccess getCorrespondingNodeAccess() {
-        return this.graph.getNodeAccess();
-    }
-
     private class Node {
-        public final int id;
-        public final double latitude;
-        public final double longitude;
+        final int id;
+        final double latitude;
+        final double longitude;
 
-        public Node(final int id, final double latitude, final double longitude) {
+        Node(final int id, final double latitude, final double longitude) {
             this.id = id;
             this.latitude = latitude;
             this.longitude = longitude;
         }
 
-        public void updateDistance(final GraphHopperStorage ghs) {
+        void updateDistance() {
             AbstractRoutingAlgorithmTester.updateDistancesFor(graph, this.id, this.latitude, this.longitude);
         }
     }
 
     private class MinDistanceNodeFinder {
-        private double lat;
-        private double lon;
+        private final double lat;
+        private final double lon;
         private double minDistance;
         private Node minNode;
 
-        public MinDistanceNodeFinder(double lat, double lon) {
+        MinDistanceNodeFinder(double lat, double lon) {
             this.lat = lat;
             this.lon = lon;
         }
 
-        public double getMinDistance() {
+        double getMinDistance() {
             return minDistance;
         }
 
-        public Node getMinNode() {
+        Node getMinNode() {
             return minNode;
         }
 
-        public MinDistanceNodeFinder invoke() {
+        MinDistanceNodeFinder invoke() {
             minDistance = Double.MAX_VALUE;
             minNode = null;
 
