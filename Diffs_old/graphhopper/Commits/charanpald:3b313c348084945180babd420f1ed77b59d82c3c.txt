diff --git a/core/src/main/java/com/graphhopper/routing/VirtualEdgeIterator.java b/core/src/main/java/com/graphhopper/routing/VirtualEdgeIterator.java
index e5701b33a2..f57d74e2ac 100644
--- a/core/src/main/java/com/graphhopper/routing/VirtualEdgeIterator.java
+++ b/core/src/main/java/com/graphhopper/routing/VirtualEdgeIterator.java
@@ -32,6 +32,7 @@
 class VirtualEdgeIterator implements EdgeIterator, CHEdgeIteratorState {
     private final List<EdgeIteratorState> edges;
     private int current;
+    private long osmWayId;
 
     public VirtualEdgeIterator(int edgeCount) {
         edges = new ArrayList<EdgeIteratorState>(edgeCount);
@@ -74,6 +75,10 @@ public int getBaseNode() {
         return edges.get(current).getBaseNode();
     }
 
+    public long getOsmWayId() { return osmWayId; }
+
+    public void setOsmWayId(long osmWayId) { this.osmWayId = osmWayId; }
+
     @Override
     public int getAdjNode() {
         return edges.get(current).getAdjNode();
diff --git a/core/src/main/java/com/graphhopper/routing/VirtualEdgeIteratorState.java b/core/src/main/java/com/graphhopper/routing/VirtualEdgeIteratorState.java
index e82b2f023b..f9e36f3776 100644
--- a/core/src/main/java/com/graphhopper/routing/VirtualEdgeIteratorState.java
+++ b/core/src/main/java/com/graphhopper/routing/VirtualEdgeIteratorState.java
@@ -36,6 +36,7 @@
     private final int adjNode;
     private final int originalTraversalKey;
     private double distance;
+    private long osmWayId;
     private long flags;
     private String name;
     // indication if edges are dispreferred as start/stop edge 
@@ -79,6 +80,10 @@ public int getAdjNode() {
         return adjNode;
     }
 
+    public long getOsmWayId() { return osmWayId; }
+
+    public void setOsmWayId(long osmWayId) { this.osmWayId = osmWayId; }
+
     @Override
     public PointList fetchWayGeometry(int mode) {
         if (pointList.getSize() == 0)
diff --git a/core/src/main/java/com/graphhopper/storage/BaseGraph.java b/core/src/main/java/com/graphhopper/storage/BaseGraph.java
index 1d812c022e..e19bb7718d 100644
--- a/core/src/main/java/com/graphhopper/storage/BaseGraph.java
+++ b/core/src/main/java/com/graphhopper/storage/BaseGraph.java
@@ -896,6 +896,7 @@ private long nextGeoRef(int arrayLength) {
     protected static class EdgeIterable extends CommonEdgeIterator implements EdgeExplorer, EdgeIterator {
         final EdgeFilter filter;
         int nextEdgeId;
+        long osmWayId;
 
         public EdgeIterable(BaseGraph baseGraph, EdgeAccess edgeAccess, EdgeFilter filter) {
             super(-1, edgeAccess, baseGraph);
@@ -909,6 +910,15 @@ final void setEdgeId(int edgeId) {
             this.nextEdgeId = this.edgeId = edgeId;
         }
 
+        public void setOsmWayId(long osmWayId) {
+            this.osmWayId = osmWayId;
+        }
+
+        public long getOsmWayId() {
+            return this.osmWayId;
+        }
+
+
         final boolean init(int tmpEdgeId, int expectedAdjNode) {
             setEdgeId(tmpEdgeId);
             if (tmpEdgeId != EdgeIterator.NO_EDGE) {
@@ -996,6 +1006,7 @@ public EdgeIteratorState detach(boolean reverseArg) {
      * Include all edges of this storage in the iterator.
      */
     protected static class AllEdgeIterator extends CommonEdgeIterator implements AllEdgesIterator {
+        long osmWayId;
         public AllEdgeIterator(BaseGraph baseGraph) {
             this(baseGraph, baseGraph.edgeAccess);
         }
@@ -1009,6 +1020,14 @@ public int getMaxId() {
             return baseGraph.edgeCount;
         }
 
+        public void setOsmWayId(long osmWayId) {
+            this.osmWayId = osmWayId;
+        }
+
+        public long getOsmWayId() {
+            return this.osmWayId;
+        }
+
         @Override
         public boolean next() {
             while (true) {
diff --git a/core/src/main/java/com/graphhopper/util/EdgeIteratorState.java b/core/src/main/java/com/graphhopper/util/EdgeIteratorState.java
index e6aad36139..7ab94f5c20 100644
--- a/core/src/main/java/com/graphhopper/util/EdgeIteratorState.java
+++ b/core/src/main/java/com/graphhopper/util/EdgeIteratorState.java
@@ -135,4 +135,9 @@
      * @return the specified edge e
      */
     EdgeIteratorState copyPropertiesTo(EdgeIteratorState e);
+
+
+    public long getOsmWayId();
+
+    public void setOsmWayId(long osmWayId);
 }
diff --git a/core/src/main/java/com/graphhopper/util/GHUtility.java b/core/src/main/java/com/graphhopper/util/GHUtility.java
index 9df8c7941b..cc1bf88b48 100644
--- a/core/src/main/java/com/graphhopper/util/GHUtility.java
+++ b/core/src/main/java/com/graphhopper/util/GHUtility.java
@@ -392,6 +392,10 @@ public int getBaseNode() {
             throw new UnsupportedOperationException("Not supported. Edge is empty.");
         }
 
+        public long getOsmWayId() { throw new UnsupportedOperationException("Not supported. Edge is empty.");}
+
+        public void setOsmWayId(long osmWayId) { throw new UnsupportedOperationException("Not supported. Edge is empty."); }
+
         @Override
         public int getAdjNode() {
             throw new UnsupportedOperationException("Not supported. Edge is empty.");
diff --git a/reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/GraphSupport.java b/reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/GraphSupport.java
index 4f6a9a4459..b702abe1df 100644
--- a/reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/GraphSupport.java
+++ b/reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/GraphSupport.java
@@ -117,6 +117,16 @@ public int getAdjNode() {
                         return edge.getAdjNode();
                     }
 
+                    @Override
+                    public long getOsmWayId() {
+                        return edge.getAdjNode();
+                    }
+
+                    @Override
+                    public void setOsmWayId(long osmWayId) {
+                        edge.setOsmWayId(osmWayId);
+                    }
+
                     @Override
                     public PointList fetchWayGeometry(int mode) {
                         return edge.fetchWayGeometry(mode);
diff --git a/reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/WrapperGraph.java b/reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/WrapperGraph.java
index 189cbbe679..e85cc638bf 100644
--- a/reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/WrapperGraph.java
+++ b/reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/WrapperGraph.java
@@ -112,6 +112,16 @@ public int getAdjNode() {
                 throw new UnsupportedOperationException();
             }
 
+            @Override
+            public long getOsmWayId() {
+                throw new UnsupportedOperationException();
+            }
+
+            @Override
+            public void setOsmWayId(long osmWayId) {
+                throw new UnsupportedOperationException();
+            }
+
             @Override
             public PointList fetchWayGeometry(int mode) {
                 throw new UnsupportedOperationException();
diff --git a/reader-osm/src/main/java/com/graphhopper/reader/osm/OSMReader.java b/reader-osm/src/main/java/com/graphhopper/reader/osm/OSMReader.java
index 0649d7f04f..1b9d734655 100644
--- a/reader-osm/src/main/java/com/graphhopper/reader/osm/OSMReader.java
+++ b/reader-osm/src/main/java/com/graphhopper/reader/osm/OSMReader.java
@@ -263,6 +263,7 @@ private void writeOsm2Graph(File osmFile) {
                 long osmId= Long.parseLong(row.get(0));
                 double speed = Double.parseDouble(row.get(1));
                 speedsMap.put(osmId, speed);
+                LOGGER.info("Adding speed " + speed + " for way " + osmId);
             }
         } catch (Exception e) {
             e.printStackTrace();
@@ -752,6 +753,8 @@ EdgeIteratorState addEdge(int fromIndex, int toIndex, PointList pointList, long
 
             iter.setWayGeometry(pillarNodes);
         }
+        iter.setOsmWayId(wayOsmId);
+
         storeOsmWayID(iter.getEdge(), wayOsmId);
         return iter;
     }
