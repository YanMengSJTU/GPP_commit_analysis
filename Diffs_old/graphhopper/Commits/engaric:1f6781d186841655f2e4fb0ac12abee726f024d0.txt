diff --git a/core/src/main/java/com/graphhopper/GraphHopper.java b/core/src/main/java/com/graphhopper/GraphHopper.java
index fed6ef28c2..17fb27a7e1 100644
--- a/core/src/main/java/com/graphhopper/GraphHopper.java
+++ b/core/src/main/java/com/graphhopper/GraphHopper.java
@@ -1077,9 +1077,7 @@ public GHResponse route( GHRequest request )
 			GHPoint point = points.get(placeIndex);
 			QueryResult res = locationIndex.findClosest(point.lat, point.lon, edgeFilter);
 			if (!res.isValid())
-				rsp.addError(new IllegalArgumentException("Cannot find point " + placeIndex + ": "
-						+ point));
-
+				rsp.addError(new InvalidPointParameter(placeIndex,point));
 			qResults.add(res);
 		}
 
diff --git a/core/src/main/java/com/graphhopper/InvalidPointParameter.java b/core/src/main/java/com/graphhopper/InvalidPointParameter.java
new file mode 100644
index 0000000000..9114d4ab3c
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/InvalidPointParameter.java
@@ -0,0 +1,34 @@
+package com.graphhopper;
+
+import com.graphhopper.util.shapes.GHPoint;
+
+public class InvalidPointParameter extends IllegalArgumentException
+{
+	private String prefix = "Cannot find point ";
+	private String separator = ": ";
+	private int placeIndex;
+	private GHPoint point=null;
+	private String pointStr = null;
+
+	public InvalidPointParameter( int placeIndex, GHPoint point )
+	{
+		this.placeIndex = placeIndex;
+		this.point = point;
+	}
+	
+	public InvalidPointParameter( int placeIndex, String pointStr )
+	{
+		this.placeIndex = placeIndex;
+		this.pointStr  = pointStr;
+	}
+
+	@Override
+	public String getMessage()
+	{	
+		return prefix + placeIndex + separator + (null!=point?point:pointStr);
+	}
+	
+	public int getIndex() {
+		return placeIndex;
+	}
+}
diff --git a/web/src/main/java/com/graphhopper/http/GHBaseServlet.java b/web/src/main/java/com/graphhopper/http/GHBaseServlet.java
index e26b3140f2..6da76e22d3 100644
--- a/web/src/main/java/com/graphhopper/http/GHBaseServlet.java
+++ b/web/src/main/java/com/graphhopper/http/GHBaseServlet.java
@@ -55,276 +55,291 @@
  */
 public class GHBaseServlet extends HttpServlet
 {
-	protected static Logger logger = LoggerFactory.getLogger(GHBaseServlet.class);
-	@Inject
-	@Named("jsonpAllowed")
-	protected boolean jsonpAllowed;
-
-	@Inject
-	@Named("internalErrorsAllowed")
-	protected boolean internalErrorsAllowed;
-	
-	@Inject
-	@Named("defaultSrs")
-	protected String defaultSRS = "EPSG:4326";
-
-	protected void writeJson( HttpServletRequest req, HttpServletResponse res, JSONObject json )
-			throws JSONException, IOException
-	{
-		String type = getParam(req, "type", "json");
-		res.setCharacterEncoding("UTF-8");
-		boolean debug = getBooleanParam(req, "debug", false)
-				|| getBooleanParam(req, "pretty", false);
-		if ("jsonp".equals(type))
-		{
-			res.setContentType("application/javascript");
-			if (!jsonpAllowed)
-			{
-				writeError(res, SC_BAD_REQUEST, "Server is not configured to allow jsonp!");
-				return;
-			}
-
-			String callbackName = getParam(req, "callback", null);
-			if (callbackName == null)
-			{
-				writeError(res, SC_BAD_REQUEST, "No callback provided, necessary if type=jsonp");
-				return;
-			}
-
-			if (debug)
-				writeResponse(res, callbackName + "(" + json.toString(2) + ")");
-			else
-				writeResponse(res, callbackName + "(" + json.toString() + ")");
-
-		} else
-		{
-			res.setContentType("application/json");
-			if (debug)
-				writeResponse(res, json.toString(2));
-			else
-				writeResponse(res, json.toString());
-		}
-	}
-
-	protected void writeError( HttpServletResponse res, int code, String message )
-	{
-		JSONObject json = new JSONObject();
-		json.put("message", message);
-		writeJsonError(res, code, json);
-	}
-
-	protected void writeJsonError( HttpServletResponse res, int code, JSONObject json )
-	{
-		try
-		{
-			// no type parameter check here as jsonp does not work if an error
-			// also no debug parameter yet
-			res.setContentType("application/json");
-			res.setCharacterEncoding("UTF-8");
-			res.setStatus(code);
-			res.getWriter().append(json.toString(2));
-		} catch (IOException ex)
-		{
-			logger.error("Cannot write error " + ex.getMessage());
-		}
-	}
-
-	protected String getParam( HttpServletRequest req, String string, String _default )
-	{
-		String[] l = req.getParameterMap().get(string);
-		if (l != null && l.length > 0)
-			return l[0];
-
-		return _default;
-	}
-
-	protected String[] getParams( HttpServletRequest req, String string )
-	{
-		String[] l = req.getParameterMap().get(string);
-		if (l != null && l.length > 0)
-		{
-			return l;
-		}
-		return new String[0];
-	}
-
-	protected long getLongParam( HttpServletRequest req, String string, long _default )
-	{
-		try
-		{
-			return Long.parseLong(getParam(req, string, "" + _default));
-		} catch (Exception ex)
-		{
-			return _default;
-		}
-	}
-
-	protected boolean getBooleanParam( HttpServletRequest req, String string, boolean _default )
-	{
-		try
-		{
-			return Boolean.parseBoolean(getParam(req, string, "" + _default));
-		} catch (Exception ex)
-		{
-			return _default;
-		}
-	}
-
-	protected double getDoubleParam( HttpServletRequest req, String string, double _default )
-	{
-		try
-		{
-			return Double.parseDouble(getParam(req, string, "" + _default));
-		} catch (Exception ex)
-		{
-			return _default;
-		}
-	}
-
-	protected List<GHPoint> getPoints( HttpServletRequest req, String key )
-			throws InvalidParameterException
-			{
-		String[] pointsAsStr = getParams(req, key);
-		String[] srs = getParams(req, "srs");
-		final List<GHPoint> infoPoints = new ArrayList<GHPoint>(pointsAsStr.length);
-		for (String str : pointsAsStr)
-		{
-			GHPoint point;
-			String useSrs;
-			if(srs.length>0) 
-				useSrs = srs[0];
-			else 
-				useSrs = defaultSRS;
-			
-			point = GHPoint.parse(str,useSrs);
-			
-			if (point != null)
-			{
-				infoPoints.add(point);
-			} else
-			{
-				throw new InvalidParameterException(
-						"Point "
-								+ str
-								+ " is not a valid point. Point must be a comma separated coordinate in "
-								+ useSrs
-								+ " projection.");
-			}
-		}
-
-		return infoPoints;
-			}
-
-	protected void processResponseErrors( GHResponse rsp, Map<String, Object> json,
-	        boolean internalErrorsAllowed )
-	{
-		if (rsp.hasErrors())
-		{
-			Map<String, String> map = new HashMap<String, String>();
-			json.put("error", map);
-			Throwable throwable = rsp.getErrors().get(0);
-			map.put("message", throwable.getMessage());
-			String statusCode = "" + HttpStatus.BAD_REQUEST_400;
-			if (throwable instanceof APIException)
-			{
-				statusCode = "" + ((APIException) throwable).getStatusCode().getCode();
-				logger.error("Unhandled exception, defaulting it to 400");
-			}
-			map.put("statuscode", statusCode);
-			List<Map<String, String>> list = new ArrayList<Map<String, String>>();
-			for (Throwable t : rsp.getErrors())
-			{
-				Map<String, String> hintMap = new HashMap<String, String>();
-				hintMap.put("message", t.getMessage());
-				if (internalErrorsAllowed)
-				{
-					hintMap.put("details", t.getClass().getName());
-				}
-				list.add(hintMap);
-			}
-			json.put("hints", list);
-		}
-	}
-
-	protected String createGPXString( HttpServletRequest req, HttpServletResponse res,
-	        GHResponse rsp )
-	{
-		boolean includeElevation = getBooleanParam(req, "elevation", false);
-		res.setCharacterEncoding("UTF-8");
-		res.setContentType("application/xml");
-		String trackName = getParam(req, "track", "GraphHopper Track");
-		res.setHeader("Content-Disposition", "inline; filename=" + "GraphHopper.gpx");
-		long time = getLongParam(req, "millis", System.currentTimeMillis());
-		if (rsp.hasErrors())
-			return errorsToXML(rsp.getErrors());
-		else
-			return rsp.getInstructions().createGPX(trackName, time, includeElevation);
-	}
-
-	protected String errorsToXML( List<Throwable> list )
-	{
-		try
-		{
-			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
-			DocumentBuilder builder = factory.newDocumentBuilder();
-			Document doc = builder.newDocument();
-			Element gpxElement = doc.createElement("gpx");
-			gpxElement.setAttribute("creator", "GraphHopper");
-			gpxElement.setAttribute("version", "1.1");
-			doc.appendChild(gpxElement);
-
-			Element mdElement = doc.createElement("metadata");
-			gpxElement.appendChild(mdElement);
-
-			Element extensionsElement = doc.createElement("extensions");
-			mdElement.appendChild(extensionsElement);
-
-			Element messageElement = doc.createElement("message");
-			extensionsElement.appendChild(messageElement);
-			messageElement.setTextContent(list.get(0).getMessage());
-
-			Element hintsElement = doc.createElement("hints");
-			extensionsElement.appendChild(hintsElement);
-
-			for (Throwable t : list)
-			{
-				Element error = doc.createElement("error");
-				hintsElement.appendChild(error);
-				error.setAttribute("message", t.getMessage());
-				if (internalErrorsAllowed)
-				{
-					error.setAttribute("details", t.getClass().getName());
-				}
-			}
-			TransformerFactory transformerFactory = TransformerFactory.newInstance();
-			Transformer transformer = transformerFactory.newTransformer();
-			StringWriter writer = new StringWriter();
-			transformer.transform(new DOMSource(doc), new StreamResult(writer));
-			return writer.toString();
-		} catch (Exception ex)
-		{
-			throw new RuntimeException(ex);
-		}
-	}
-
-	public void writeResponse( HttpServletResponse res, String str )
-	{
-		try
-		{
-			res.setStatus(SC_OK);
-			res.getWriter().append(str);
-		} catch (IOException ex)
-		{
-			logger.error("Cannot write message:" + str, ex);
-		}
-	}
-
-	protected void addSrsObject(String outputSrs, Map<String, Object> geoJsonFeature) {
-		Map<String, Object> crsObj = new HashMap<String, Object>();
-		crsObj.put("type", "name");
-		Map<String, Object> propObj = new HashMap<String, Object>();
-		propObj.put("name", outputSrs);
-		crsObj.put("properties", propObj );
-		geoJsonFeature.put("crs", crsObj);
-	}
+    protected static Logger logger = LoggerFactory
+            .getLogger(GHBaseServlet.class);
+    @Inject
+    @Named("jsonpAllowed")
+    protected boolean jsonpAllowed;
+
+    @Inject
+    @Named("internalErrorsAllowed")
+    protected boolean internalErrorsAllowed;
+
+    @Inject
+    @Named("defaultSrs")
+    protected String defaultSRS = "EPSG:4326";
+
+    protected void writeJson(HttpServletRequest req, HttpServletResponse res,
+            JSONObject json) throws JSONException, IOException
+    {
+        String type = getParam(req, "type", "json");
+        res.setCharacterEncoding("UTF-8");
+        boolean debug = getBooleanParam(req, "debug", false)
+                || getBooleanParam(req, "pretty", false);
+        if ("jsonp".equals(type))
+        {
+            res.setContentType("application/javascript");
+            if (!jsonpAllowed)
+            {
+                writeError(res, SC_BAD_REQUEST,
+                        "Server is not configured to allow jsonp!");
+                return;
+            }
+
+            String callbackName = getParam(req, "callback", null);
+            if (callbackName == null)
+            {
+                writeError(res, SC_BAD_REQUEST,
+                        "No callback provided, necessary if type=jsonp");
+                return;
+            }
+
+            if (debug)
+                writeResponse(res, callbackName + "(" + json.toString(2) + ")");
+            else
+                writeResponse(res, callbackName + "(" + json.toString() + ")");
+
+        } else
+        {
+            res.setContentType("application/json");
+            if (debug)
+                writeResponse(res, json.toString(2));
+            else
+                writeResponse(res, json.toString());
+        }
+    }
+
+    protected void writeError(HttpServletResponse res, int code, String message)
+    {
+        JSONObject json = new JSONObject();
+        json.put("message", message);
+        writeJsonError(res, code, json);
+    }
+
+    protected void writeJsonError(HttpServletResponse res, int code,
+            JSONObject json)
+    {
+        try
+        {
+            // no type parameter check here as jsonp does not work if an error
+            // also no debug parameter yet
+            res.setContentType("application/json");
+            res.setCharacterEncoding("UTF-8");
+            res.setStatus(code);
+            res.getWriter().append(json.toString(2));
+        } catch (IOException ex)
+        {
+            logger.error("Cannot write error " + ex.getMessage());
+        }
+    }
+
+    protected String getParam(HttpServletRequest req, String string,
+            String _default)
+    {
+        String[] l = req.getParameterMap().get(string);
+        if (l != null && l.length > 0)
+            return l[0];
+
+        return _default;
+    }
+
+    protected String[] getParams(HttpServletRequest req, String string)
+    {
+        String[] l = req.getParameterMap().get(string);
+        if (l != null && l.length > 0)
+        {
+            return l;
+        }
+        return new String[0];
+    }
+
+    protected long getLongParam(HttpServletRequest req, String string,
+            long _default)
+    {
+        try
+        {
+            return Long.parseLong(getParam(req, string, "" + _default));
+        } catch (Exception ex)
+        {
+            return _default;
+        }
+    }
+
+    protected boolean getBooleanParam(HttpServletRequest req, String string,
+            boolean _default)
+    {
+        try
+        {
+            return Boolean.parseBoolean(getParam(req, string, "" + _default));
+        } catch (Exception ex)
+        {
+            return _default;
+        }
+    }
+
+    protected double getDoubleParam(HttpServletRequest req, String string,
+            double _default)
+    {
+        try
+        {
+            return Double.parseDouble(getParam(req, string, "" + _default));
+        } catch (Exception ex)
+        {
+            return _default;
+        }
+    }
+
+    protected List<GHPoint> getPoints(HttpServletRequest req, String key)
+            throws InvalidParameterException
+    {
+        String[] pointsAsStr = getParams(req, key);
+        String[] srs = getParams(req, "srs");
+        final List<GHPoint> infoPoints = new ArrayList<GHPoint>(
+                pointsAsStr.length);
+        for (String str : pointsAsStr)
+        {
+            GHPoint point;
+            String useSrs;
+            if (srs.length > 0)
+                useSrs = srs[0];
+            else
+                useSrs = defaultSRS;
+
+            point = GHPoint.parse(str, useSrs);
+
+            if (point != null)
+            {
+                infoPoints.add(point);
+            } else
+            {
+                throw new InvalidParameterException(
+                        "Point "
+                                + str
+                                + " is not a valid point. Point must be a comma separated coordinate in "
+                                + useSrs + " projection.");
+            }
+        }
+
+        return infoPoints;
+    }
+
+    protected void processResponseErrors(GHResponse rsp,
+            Map<String, Object> json, boolean internalErrorsAllowed)
+    {
+        if (rsp.hasErrors())
+        {
+            Map<String, String> map = new HashMap<String, String>();
+            json.put("error", map);
+            Throwable throwable = rsp.getErrors().get(0);
+            map.put("message", throwable.getMessage());
+            String statusCode = "" + HttpStatus.BAD_REQUEST_400;
+            if (throwable instanceof APIException)
+            {
+                statusCode = ""
+                        + ((APIException) throwable).getStatusCode().getCode();
+                logger.error("Unhandled exception, defaulting it to 400");
+            }
+            map.put("statuscode", statusCode);
+            List<Map<String, String>> list = new ArrayList<Map<String, String>>();
+            for (Throwable t : rsp.getErrors())
+            {
+                Map<String, String> hintMap = new HashMap<String, String>();
+                hintMap.put("message", t.getMessage());
+                if (internalErrorsAllowed)
+                {
+                    hintMap.put("details", t.getClass().getName());
+                }
+                list.add(hintMap);
+            }
+            json.put("hints", list);
+        }
+    }
+
+    protected String createGPXString(HttpServletRequest req,
+            HttpServletResponse res, GHResponse rsp)
+    {
+        boolean includeElevation = getBooleanParam(req, "elevation", false);
+        res.setCharacterEncoding("UTF-8");
+        res.setContentType("application/xml");
+        String trackName = getParam(req, "track", "GraphHopper Track");
+        res.setHeader("Content-Disposition", "inline; filename="
+                + "GraphHopper.gpx");
+        long time = getLongParam(req, "millis", System.currentTimeMillis());
+        if (rsp.hasErrors())
+            return errorsToXML(rsp.getErrors());
+        else
+            return rsp.getInstructions().createGPX(trackName, time,
+                    includeElevation);
+    }
+
+    protected String errorsToXML(List<Throwable> list)
+    {
+        try
+        {
+            DocumentBuilderFactory factory = DocumentBuilderFactory
+                    .newInstance();
+            DocumentBuilder builder = factory.newDocumentBuilder();
+            Document doc = builder.newDocument();
+            Element gpxElement = doc.createElement("gpx");
+            gpxElement.setAttribute("creator", "GraphHopper");
+            gpxElement.setAttribute("version", "1.1");
+            doc.appendChild(gpxElement);
+
+            Element mdElement = doc.createElement("metadata");
+            gpxElement.appendChild(mdElement);
+
+            Element extensionsElement = doc.createElement("extensions");
+            mdElement.appendChild(extensionsElement);
+
+            Element messageElement = doc.createElement("message");
+            extensionsElement.appendChild(messageElement);
+            messageElement.setTextContent(list.get(0).getMessage());
+
+            Element hintsElement = doc.createElement("hints");
+            extensionsElement.appendChild(hintsElement);
+
+            for (Throwable t : list)
+            {
+                Element error = doc.createElement("error");
+                hintsElement.appendChild(error);
+                error.setAttribute("message", t.getMessage());
+                if (internalErrorsAllowed)
+                {
+                    error.setAttribute("details", t.getClass().getName());
+                }
+            }
+            TransformerFactory transformerFactory = TransformerFactory
+                    .newInstance();
+            Transformer transformer = transformerFactory.newTransformer();
+            StringWriter writer = new StringWriter();
+            transformer.transform(new DOMSource(doc), new StreamResult(writer));
+            return writer.toString();
+        } catch (Exception ex)
+        {
+            throw new RuntimeException(ex);
+        }
+    }
+
+    public void writeResponse(HttpServletResponse res, String str)
+    {
+        try
+        {
+            res.setStatus(SC_OK);
+            res.getWriter().append(str);
+        } catch (IOException ex)
+        {
+            logger.error("Cannot write message:" + str, ex);
+        }
+    }
+
+    protected void addSrsObject(String outputSrs,
+            Map<String, Object> geoJsonFeature)
+    {
+        Map<String, Object> crsObj = new HashMap<String, Object>();
+        crsObj.put("type", "name");
+        Map<String, Object> propObj = new HashMap<String, Object>();
+        propObj.put("name", outputSrs);
+        crsObj.put("properties", propObj);
+        geoJsonFeature.put("crs", crsObj);
+    }
 }
diff --git a/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java b/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
index e8807dec2f..6ceec4d4fa 100644
--- a/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
+++ b/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
@@ -24,6 +24,7 @@
 import java.util.Arrays;
 import java.util.Collections;
 import java.util.HashMap;
+import java.util.Iterator;
 import java.util.List;
 import java.util.Map;
 import java.util.Map.Entry;
@@ -47,6 +48,7 @@
 import com.graphhopper.GHRequest;
 import com.graphhopper.GHResponse;
 import com.graphhopper.GraphHopper;
+import com.graphhopper.InvalidPointParameter;
 import com.graphhopper.http.validation.BooleanValidator;
 import com.graphhopper.http.validation.CaseInsensitiveStringListValidator;
 import com.graphhopper.routing.AlgorithmOptions;
@@ -254,15 +256,32 @@ public GHResponse getGHResponse(HttpServletRequest httpReq,
 					ghRsp = hopper.route(request);
 				}
 			}
-		} catch (Exception e) {
-			if (e instanceof IllegalArgumentException) {
-				e = new InvalidParameterException(e.getMessage());
-			}
+		} catch (IllegalArgumentException iae) {
+			Exception ipe = new InvalidParameterException(iae.getMessage());
+			ghRsp = new GHResponse().addError(ipe);
+		}
+		catch (Exception e) {
 			ghRsp = new GHResponse().addError(e);
 		} finally {
 			if (!ghRsp.hasErrors() && !writeGPX) {
 				transformer.transformCoordinates(ghRsp);
 			}
+			if(ghRsp.hasErrors()  && !isInternalSRS(srs)) {
+				List<Throwable> errors = ghRsp.getErrors();
+				Iterator<Throwable> iterator = errors.iterator();
+				List<Throwable> newErrors = new ArrayList<Throwable>();
+				while(iterator.hasNext()) {
+					Throwable throwable = iterator.next();
+					if (throwable instanceof InvalidPointParameter) {
+						iterator.remove();
+						InvalidPointParameter ipp = (InvalidPointParameter) throwable;
+						String[] pointsAsStr = getParams(httpReq, "point");
+						ipp = new InvalidPointParameter(ipp.getIndex(), pointsAsStr[ipp.getIndex()]);
+						newErrors.add(ipp);
+					}
+				}
+				errors.addAll(newErrors);
+			}
 			float took = sw.stop().getSeconds();
 			String infoStr = httpReq.getRemoteAddr() + " "
 					+ httpReq.getLocale() + " "
@@ -318,6 +337,10 @@ public GHResponse getGHResponse(HttpServletRequest httpReq,
 		return ghRsp;
 	}
 
+	private boolean isInternalSRS(String srs) {
+		return srs.equalsIgnoreCase(OpenCoordConverter.WGS84_CRS_CODE) || srs.equalsIgnoreCase("WGS84");
+	}
+
 	private String buildBooleanErrorMessageString(String paramValue,
 			String paramName) {
 		return buildErrorMessageString(
