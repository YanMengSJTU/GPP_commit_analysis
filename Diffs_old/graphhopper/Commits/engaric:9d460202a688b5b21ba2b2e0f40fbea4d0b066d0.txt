diff --git a/core/src/main/java/com/graphhopper/reader/osgb/AbstractOsInputFile.java b/core/src/main/java/com/graphhopper/reader/osgb/AbstractOsInputFile.java
index 57d6a9411f..1cc4189705 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/AbstractOsInputFile.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/AbstractOsInputFile.java
@@ -41,12 +41,17 @@
     private boolean binary = false;
     private final BlockingQueue<RoutingElement> itemQueue;
     private final String name;
+    private String idKey;
     /**
      * The factory to use to create RoutingElements. eg Itn, Dpn or Hn
      */
     private AbstractRoutingElementFactory<T> abstractFactory;
 
     public AbstractOsInputFile(File file, AbstractRoutingElementFactory<T> abstractFactory) throws IOException {
+        this(file, abstractFactory, "id");
+    }
+    public AbstractOsInputFile(File file, AbstractRoutingElementFactory<T> abstractFactory, String idKey) throws IOException {
+        this.idKey = idKey;
         this.abstractFactory = abstractFactory;
         name = file.getAbsolutePath();
         bis = decode(file);
@@ -179,10 +184,10 @@ private T getNextXML() throws XMLStreamException,
         int event = parser.next();
         while (event != XMLStreamConstants.END_DOCUMENT) {
             if (event == XMLStreamConstants.START_ELEMENT) {
-                String idStr = parser.getAttributeValue(null, "fid");
+                String idStr = parser.getAttributeValue(null, idKey);
                 if (idStr != null) {
                     String name = parser.getLocalName();
-                    idStr = idStr.substring(4);
+                    //                    idStr = idStr.substring(4);
                     result = abstractFactory.create(name, idStr, parser);
                     if (result!=null) {
                         return result;
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/hn/OsHnReader.java b/core/src/main/java/com/graphhopper/reader/osgb/hn/OsHnReader.java
index 2e60fcf072..93f7ecf1bf 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/hn/OsHnReader.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/hn/OsHnReader.java
@@ -85,9 +85,7 @@ protected void writeOsm2Graph(File osmFile) {
     private void preProcessSingleFile(OsHnInputFile in)
             throws XMLStreamException, MismatchedDimensionException,
             FactoryException, TransformException {
-        System.out.println("==== preProcessSingleFile");
-        //        long tmpWayCounter = 1;
-        //        long tmpRelationCounter = 1;
+        logger.error("==== preProcessSingleFile");
         RoutingElement item;
         while ((item = in.getNext()) != null) {
             // Don't do anything different to the InputFile
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/hn/OsHnRoutingElementFactory.java b/core/src/main/java/com/graphhopper/reader/osgb/hn/OsHnRoutingElementFactory.java
index 9dd9cc2215..d0ecec067c 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/hn/OsHnRoutingElementFactory.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/hn/OsHnRoutingElementFactory.java
@@ -20,7 +20,6 @@
 
     @Override
     public RoutingElement create(String name, String idStr, XMLStreamReader parser) throws MismatchedDimensionException, XMLStreamException, FactoryException, TransformException {
-        //        idStr = idStr.substring(4);
         //      <highway:ResponsibleAuthority gml:id="LOCAL_ID_29378">
         //        <highway:identifier>114</highway:identifier>
         //        <highway:authorityName>Bath And North East Somerset</highway:authorityName>
@@ -29,9 +28,8 @@ public RoutingElement create(String name, String idStr, XMLStreamReader parser)
         if (name.equals("ResponsibleAuthority")||name.equals("LineString")||name.equals("Point")||name.equals("Street")||name.equals("TimePeriod")) {
             return null;
         }
-        if (!idStr.startsWith("4000")&&!idStr.startsWith("5000")&&!idStr.startsWith("9999")&&!idStr.startsWith("9998")) {
-            logger.error(idStr + "  :  " + name);
-        }
+        // Strip of the osgb prefix
+        idStr = idStr.substring(4);
         long id;
         try {
             id = Long.parseLong(idStr);
@@ -41,12 +39,12 @@ public RoutingElement create(String name, String idStr, XMLStreamReader parser)
         }
         switch (name) {
         case "RoadNode": {
-            //            System.out.println(">>>>>>>>>>>> RoadNode " + id);
+            logger.error(">>>>>>>>>>>> RoadNode " + id);
             //            return OSITNNode.create(id, parser);
             //            new OsHnRoadLink(id, parser);
         }
         case "RoadLink": {
-            //            System.out.println(">>>>>>>>>>>> RoadLink " + id);
+            logger.error(">>>>>>>>>>>> RoadLink " + id);
             //            return OSITNWay.create(id, parser);
             //            new OsHnRoadLink(id, parser);
         }
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnInputFile.java b/core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnInputFile.java
index fc643a826e..b99a01c9bf 100755
--- a/core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnInputFile.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnInputFile.java
@@ -31,6 +31,6 @@
 public class OsItnInputFile extends AbstractOsInputFile<OSITNElement> {
     public OsItnInputFile(File file) throws IOException {
         // We don't specify a factory as it will be different depending on which stage of the ingestion we are at.
-        super(file, null);
+        super(file, null, "fid");
     }
 }
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnPreProcessRoutingElementFactory.java b/core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnPreProcessRoutingElementFactory.java
index 9aab57bb8b..22f52ffd5d 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnPreProcessRoutingElementFactory.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnPreProcessRoutingElementFactory.java
@@ -25,7 +25,8 @@
 
     @Override
     public OSITNElement create(String name, String idStr, XMLStreamReader parser) throws MismatchedDimensionException, XMLStreamException, FactoryException, TransformException {
-        //        idStr = idStr.substring(4);
+        // Strip of the osgb prefix
+        idStr = idStr.substring(4);
         logger.info(idStr + ":" + name + ":");
 
         long id;
@@ -44,6 +45,9 @@ public OSITNElement create(String name, String idStr, XMLStreamReader parser) th
         case "RoadRouteInformation": {
             return OSITNRelation.create(id, parser);
         }
+        case "Road": {
+            return OsItnMetaData.create(id, parser);
+        }
         }
         return null;
     }
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnProcessStageOneRoutingElementFactory.java b/core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnProcessStageOneRoutingElementFactory.java
index b1710e3ac9..0bac919f0f 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnProcessStageOneRoutingElementFactory.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnProcessStageOneRoutingElementFactory.java
@@ -24,7 +24,8 @@
 
     @Override
     public OSITNElement create(String name, String idStr, XMLStreamReader parser) throws MismatchedDimensionException, XMLStreamException, FactoryException, TransformException {
-        //        idStr = idStr.substring(4);
+        // Strip of the osgb prefix
+        idStr = idStr.substring(4);
         logger.info(idStr + ":" + name + ":");
 
         long id;
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnProcessStageThreeRoutingElementFactory.java b/core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnProcessStageThreeRoutingElementFactory.java
index e3c599f882..e9a89cd36a 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnProcessStageThreeRoutingElementFactory.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnProcessStageThreeRoutingElementFactory.java
@@ -24,7 +24,8 @@
 
     @Override
     public OSITNElement create(String name, String idStr, XMLStreamReader parser) throws MismatchedDimensionException, XMLStreamException, FactoryException, TransformException {
-        //        idStr = idStr.substring(4);
+        // Strip of the osgb prefix
+        idStr = idStr.substring(4);
         logger.info(idStr + ":" + name + ":");
 
         long id;
@@ -40,6 +41,9 @@ public OSITNElement create(String name, String idStr, XMLStreamReader parser) th
         case "RoadRouteInformation": {
             return OSITNRelation.create(id, parser);
         }
+        case "Road": {
+            return OsItnMetaData.create(id, parser);
+        }
         }
         return null;
     }
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnProcessStageTwoRoutingElementFactory.java b/core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnProcessStageTwoRoutingElementFactory.java
index 4c313a0372..a1d4f585ff 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnProcessStageTwoRoutingElementFactory.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnProcessStageTwoRoutingElementFactory.java
@@ -25,7 +25,8 @@
 
     @Override
     public OSITNElement create(String name, String idStr, XMLStreamReader parser) throws MismatchedDimensionException, XMLStreamException, FactoryException, TransformException {
-        //        idStr = idStr.substring(4);
+        // Strip of the osgb prefix
+        idStr = idStr.substring(4);
         logger.info(idStr + ":" + name + ":");
 
         long id;
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnReader.java b/core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnReader.java
index bff932c7e3..2a4437fd1c 100755
--- a/core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnReader.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnReader.java
@@ -49,8 +49,9 @@
 import com.graphhopper.reader.Way;
 import com.graphhopper.reader.dem.ElevationProvider;
 import com.graphhopper.reader.osgb.AbstractOsReader;
-import com.graphhopper.reader.osgb.hn.OsHnReader;
+import com.graphhopper.routing.util.CarFlagEncoder;
 import com.graphhopper.routing.util.EncodingManager;
+import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.storage.GraphExtension;
 import com.graphhopper.storage.GraphStorage;
 import com.graphhopper.storage.NodeAccess;
@@ -291,7 +292,7 @@ private void preProcessSingleFile(File osmFile) throws XMLStreamException, IOExc
     }
 
     private void preProcessSingleFile(OsItnInputFile in) throws XMLStreamException, MismatchedDimensionException, FactoryException, TransformException {
-        System.out.println("==== preProcessSingleFile");
+        logger.error("==== preProcessSingleFile");
         long tmpWayCounter = 1;
         long tmpRelationCounter = 1;
         RoutingElement item;
@@ -649,7 +650,7 @@ private void writeOsm2GraphFromSingleFile(File osmFile, ProcessData processData,
     }
 
     private void processStageOne(ProcessData processData, OsItnInputFile in) throws XMLStreamException, MismatchedDimensionException, FactoryException, TransformException {
-        System.out.println("==== processStageOne");
+        logger.error("==== processStageOne");
         RoutingElement item;
         LongIntMap nodeFilter = getNodeMap();
         // Limit the number of xml nodes we process to speed up ingestion
@@ -690,20 +691,35 @@ private void processStageOne(ProcessData processData, OsItnInputFile in) throws
     private void decorateItnDataWithHighwaysNetworkData() {
         if (commandLineArguments != null) {
             String hnPath = commandLineArguments.get("hn.data", null);
-            if (hnPath != null) {
-                System.out.println("=================================================>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>");
-                System.out.println("==== decorateItnDataWithHighwaysNetworkData from " + hnPath);
-                GraphHopper hnGraphHopper = new GraphHopper();
-                hnGraphHopper.load(hnPath);
-                OsHnReader hnReader = new OsHnReader(hnGraphHopper.getGraph());
-                System.out.println("<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<=================================================");
+            String hnGraphLocation = commandLineArguments.get("hn.graph.location", null);
+            if (hnPath != null && hnGraphLocation!= null) {
+                logger.error("=================================================>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>");
+                logger.error("==== decorateItnDataWithHighwaysNetworkData from " + hnPath);
+                FlagEncoder carEncoder = new CarFlagEncoder(5, 5, 3);
+                EncodingManager encodingManager = new EncodingManager(carEncoder);
+                GraphHopper hnGraphHopper = new GraphHopper(){
+                    @Override
+                    protected void postProcessing()
+                    {
+                        System.out.println("DON'T DO postProcessing()");
+                    }
+                    @Override
+                    protected void flush()
+                    {
+                        //                fullyLoaded = true;
+                    }
+
+                }.setOSMFile(hnPath).setGraphHopperLocation(hnGraphLocation).setEncodingManager(encodingManager).setCHEnable(false).setAsHnReader();
+                hnGraphHopper.importOrLoad();
+                //                OsHnReader hnReader = new OsHnReader(hnGraphHopper.getGraph());
+                logger.error("<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<<=================================================");
 
             }
         }
     }
 
     private void processStageTwo(ProcessData processData, OsItnInputFile in) throws XMLStreamException, MismatchedDimensionException, FactoryException, TransformException {
-        System.out.println("==== processStageTwo");
+        logger.error("==== processStageTwo");
         RoutingElement item;
         LongIntMap nodeFilter = getNodeMap();
         // Limit the number of xml nodes we process to speed up ingestion
@@ -741,7 +757,7 @@ private void processStageTwo(ProcessData processData, OsItnInputFile in) throws
     }
 
     private void processStageThree(ProcessData processData, OsItnInputFile in) throws XMLStreamException, MismatchedDimensionException, FactoryException, TransformException {
-        System.out.println("==== processStageThree");
+        logger.error("==== processStageThree");
         RoutingElement item;
         // Limit the number of xml nodes we process to speed up ingestion
         in.setAbstractFactory(new OsItnProcessStageThreeRoutingElementFactory());
@@ -884,7 +900,7 @@ private TLongList createStartTowerNodeAndEdge(TLongList osmNodeIds, OSITNWay way
         int graphIndex = getNodeMap().get(nodeId);
         if (graphIndex < TOWER_NODE) {
             OSITNNode newNode = addBarrierNode(nodeId, true);
-            // System.out.println("Add Node at start of way from " + nodeId +
+            // logger.error("Add Node at start of way from " + nodeId +
             // " to " + osmNodeIds.get(osmNodeIds.size()-1) + " lat lon is " +
             // newNode.getLat() + " " + newNode.getLon());
             long newNodeId = newNode.getId();
@@ -1277,13 +1293,13 @@ private String checkForNoEntryDirection(long wayId, String wayCoord) {
             // An index < TOWER_NODE means it is a tower node.
             boolean doInsertAdditionalTowerNodes = addAdditionalTowerNodes && (graphIndex < TOWER_NODE);
 
-            // System.out.println("doInsertAdditionalTowerNodes is " +
+            // logger.error("doInsertAdditionalTowerNodes is " +
             // doInsertAdditionalTowerNodes + " for lastNodeId "+ lastNodeId );
 
             // add end tower here
             if (doInsertAdditionalTowerNodes) {
                 OSITNNode newNode = addBarrierNode(lastNodeId, true);
-                // System.out.println("Add End shadow node between " +
+                // logger.error("Add End shadow node between " +
                 // nodeIdsToCreateWaysFor.get(0) + " and " + lastNodeId +
                 // " lat lon is " + newNode.getLat() + " " + newNode.getLon());
                 newNodeId = newNode.getId();
@@ -1703,7 +1719,7 @@ private OSITNNode addBarrierNode(long nodeId, boolean forceAsTower) {
 
         if (graphIndex < TOWER_NODE || forceAsTower) {
             graphIndex = -graphIndex - 3;
-            // System.out.println("Create Tower node for nodeId " + nodeId +
+            // logger.error("Create Tower node for nodeId " + nodeId +
             // " graphIndex is " + graphIndex);
 
             newNode = new OSITNNode(createNewNodeId(), nodeAccess, graphIndex);
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/hn/OsHnReaderTest.java b/core/src/test/java/com/graphhopper/reader/osgb/hn/OsHnReaderTest.java
index 70f26dca38..a4f2078175 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/hn/OsHnReaderTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/hn/OsHnReaderTest.java
@@ -29,7 +29,19 @@ public void createEncodingManager() {
     public void testReader() {
         String graphLoc = "./target/output/hn-gh";
         String inputFile = "/data/Development/highways_network";
-        GraphHopper graphHopper = new GraphHopper().setInMemory().setOSMFile(inputFile).setGraphHopperLocation(graphLoc).setCHEnable(false).setEncodingManager(encodingManager).setAsHnReader();
+        GraphHopper graphHopper = new GraphHopper(){
+            @Override
+            protected void postProcessing()
+            {
+                System.out.println("DON'T DO postProcessing()");
+            }
+            @Override
+            protected void flush()
+            {
+                //                fullyLoaded = true;
+            }
+
+        }.setInMemory().setOSMFile(inputFile).setGraphHopperLocation(graphLoc).setCHEnable(false).setEncodingManager(encodingManager).setAsHnReader();
         // THIS WILL FAIL FOR NOW UNTIL THE READER GENERATES SOME OSM NODES
         graphHopper.importOrLoad();
         GraphStorage graph = graphHopper.getGraph();
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/itn/OsItnReaderTest.java b/core/src/test/java/com/graphhopper/reader/osgb/itn/OsItnReaderTest.java
index 33d0898382..330639395e 100755
--- a/core/src/test/java/com/graphhopper/reader/osgb/itn/OsItnReaderTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/itn/OsItnReaderTest.java
@@ -329,12 +329,14 @@ public void testItnGraphHopperWithHighwaysNetworkData() {
 
         Map<String, String> args = new HashMap<>();
         args.put("hn.data", "/data/Development/highways_network/");
+        args.put("hn.graph.location", "./target/output/highways_network");
         args.put("graph.location", graphLoc);
+        args.put("osmreader.osm", inputFile);
         args.put("config", "../config.properties");
         CmdArgs commandLineArguments = new CmdArgs(args);
         commandLineArguments = CmdArgs.readFromConfigAndMerge(commandLineArguments, "config", "graphhopper.config");
 
-        GraphHopper graphHopper = new GraphHopper().setInMemory().setOSMFile(inputFile).setCHEnable(false).setEncodingManager(encodingManager).setAsItnReader().init(commandLineArguments);
+        GraphHopper graphHopper = new GraphHopper().setInMemory().setAsItnReader().init(commandLineArguments);
         graphHopper.importOrLoad();
         GraphStorage graph = graphHopper.getGraph();
 
