diff --git a/CONTRIBUTORS.md b/CONTRIBUTORS.md
index 30a472952d..1b4e199d52 100644
--- a/CONTRIBUTORS.md
+++ b/CONTRIBUTORS.md
@@ -1,14 +1,20 @@
 [Members](https://github.com/graphhopper?tab=members) and [Contributors](https://github.com/graphhopper/graphhopper/contributors)
 
- * AnahitaS
+ * AnahitaS, docs for Android, Android, Tomcat
  * agouge, discussion and API refactoring
  * b3nn0, Android improvements
  * cgarreau, increase of routing success rate via subnetwork cleanup
  * daisy1754, fixed usage of graphhopper.sh script
  * dardin88, instructions improved
- * dewos
+ * dewos, web API bug fixes
+ * devemux86, improvements regarding Android and GPX
+ * dos65, bug fixes in routing algo
+ * drnextgis, ru translation and JS fixes
+ * duongnt, fixes in storage
  * lmar, improved instructions information
- * fredao, translations
+ * florent-morel, improvements regarding fords, #320
+ * fredao, translations 
+ * henningvs, doc improvements
  * jansoe, one of the core developers
  * jansonhanson, general host config
  * JohannesPelzer, improved GPX information and various other things
@@ -18,7 +24,7 @@
  * NopMap, massive improvements regarding OSM, parsing and encoding, route relations
  * ocampana, initial implementation for instructions
  * ratrun, route relations, GPX information, bike handling etc
- * rodneyodonnell, improved dead end removal
+ * rodneyodonnell, improved dead end removal and fords
  * rodo, more descriptions
 
 # Translations
diff --git a/README.md b/README.md
index 177e708507..726eaf0a82 100644
--- a/README.md
+++ b/README.md
@@ -14,8 +14,8 @@ See GraphHopper in action on [GraphHopper Maps](https://graphhopper.com/maps)
 
 GraphHopper Maps uses the [Directions API for Business](https://graphhopper.com/#directions-api), which provides 
 routing and matrix routing through GraphHopper and also a fast address search via [Photon](https://github.com/komoot/photon).
-Additionally the map tiles from various Providers like [Lyrk](https://geodienste.lyrk.de/pakete)
-are used and all is available for free and through HTTPS for a secure route planning experience!
+Additionally the map tiles from various Providers are used and all is 
+available for free for a nice route planning experience!
 
 
 GraphHopper for Mobile
diff --git a/android/app/build.gradle b/android/app/build.gradle
index f22f47f714..d1437430be 100644
--- a/android/app/build.gradle
+++ b/android/app/build.gradle
@@ -41,10 +41,10 @@ dependencies {
        exclude group: 'org.apache.xmlgraphics', module: 'xmlgraphics-commons'
     }
 
-    compile group: 'org.mapsforge', name: 'mapsforge-core', version: '0.5.0'
-    compile group: 'org.mapsforge', name: 'mapsforge-map', version: '0.5.0'
-    compile group: 'org.mapsforge', name: 'mapsforge-map-android', version: '0.5.0'
-    compile group: 'org.mapsforge', name: 'mapsforge-map-reader', version: '0.5.0'
+    compile group: 'org.mapsforge', name: 'mapsforge-core', version: '0.5.1'
+    compile group: 'org.mapsforge', name: 'mapsforge-map', version: '0.5.1'
+    compile group: 'org.mapsforge', name: 'mapsforge-map-android', version: '0.5.1'
+    compile group: 'org.mapsforge', name: 'mapsforge-map-reader', version: '0.5.1'
 
     compile group: 'org.slf4j', name: 'slf4j-android', version: '1.7.10'
     compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.10'
diff --git a/android/app/pom.xml b/android/app/pom.xml
index dd631781c5..717a64c65e 100644
--- a/android/app/pom.xml
+++ b/android/app/pom.xml
@@ -19,7 +19,7 @@
         <version>0.5-SNAPSHOT</version>
     </parent>
     <properties>
-        <mapsforge.version>0.5.0</mapsforge.version>
+        <mapsforge.version>0.5.1</mapsforge.version>
         <!-- do not put the properties here as it differs from dev to dev <android.sdk.path>/home/peterk/Programme/android-sdk-linux_x86</android.sdk.path>
         instead use your IDE to set it up or specify android sdk via command line
         using -Dandroid.sdk.path=... or by setting environment variable ANDROID_HOME
diff --git a/android/scripts/googlecode_upload.py b/android/scripts/googlecode_upload.py
deleted file mode 100644
index 16912361ee..0000000000
--- a/android/scripts/googlecode_upload.py
+++ /dev/null
@@ -1,256 +0,0 @@
-#!/usr/bin/env python
-#
-# Copyright 2006, 2007 Google Inc. All Rights Reserved.
-# Author: danderson@google.com (David Anderson)
-#
-# Script for uploading files to a Google Code project.
-#
-# This is intended to be both a useful script for people who want to
-# streamline project uploads and a reference implementation for
-# uploading files to Google Code projects.
-#
-# To upload a file to Google Code, you need to provide a path to the
-# file on your local machine, a small summary of what the file is, a
-# project name, and a valid account that is a member or owner of that
-# project.  You can optionally provide a list of labels that apply to
-# the file.  The file will be uploaded under the same name that it has
-# in your local filesystem (that is, the "basename" or last path
-# component).  Run the script with '--help' to get the exact syntax
-# and available options.
-#
-# Note that the upload script requests that you enter your
-# googlecode.com password.  This is NOT your Gmail account password!
-# This is the password you use on googlecode.com for committing to
-# Subversion and uploading files.  You can find your password by going
-# to http://code.google.com/hosting/settings when logged in with your
-# Gmail account. If you have already committed to your project's
-# Subversion repository, the script will automatically retrieve your
-# credentials from there (unless disabled, see the output of '--help'
-# for details).
-#
-# If you are looking at this script as a reference for implementing
-# your own Google Code file uploader, then you should take a look at
-# the upload() function, which is the meat of the uploader.  You
-# basically need to build a multipart/form-data POST request with the
-# right fields and send it to https://PROJECT.googlecode.com/files .
-# Authenticate the request using HTTP Basic authentication, as is
-# shown below.
-#
-# Licensed under the terms of the Apache Software License 2.0:
-#  http://www.apache.org/licenses/LICENSE-2.0
-#
-# Questions, comments, feature requests and patches are most welcome.
-# Please direct all of these to the Google Code users group:
-#  http://groups.google.com/group/google-code-hosting
-
-"""Google Code file uploader script.
-"""
-
-__author__ = 'danderson@google.com (David Anderson)'
-
-import httplib
-import os.path
-import optparse
-import getpass
-import base64
-import sys
-
-
-def upload(file, project_name, user_name, password, summary, labels=None):
-  """Upload a file to a Google Code project's file server.
-
-  Args:
-    file: The local path to the file.
-    project_name: The name of your project on Google Code.
-    user_name: Your Google account name.
-    password: The googlecode.com password for your account.
-              Note that this is NOT your global Google Account password!
-    summary: A small description for the file.
-    labels: an optional list of label strings with which to tag the file.
-
-  Returns: a tuple:
-    http_status: 201 if the upload succeeded, something else if an
-                 error occured.
-    http_reason: The human-readable string associated with http_status
-    file_url: If the upload succeeded, the URL of the file on Google
-              Code, None otherwise.
-  """
-  # The login is the user part of user@gmail.com. If the login provided
-  # is in the full user@domain form, strip it down.
-  if user_name.endswith('@gmail.com'):
-    user_name = user_name[:user_name.index('@gmail.com')]
-
-  form_fields = [('summary', summary)]
-  if labels is not None:
-    form_fields.extend([('label', l.strip()) for l in labels])
-
-  content_type, body = encode_upload_request(form_fields, file)
-
-  upload_host = '%s.googlecode.com' % project_name
-  upload_uri = '/files'
-  auth_token = base64.b64encode('%s:%s'% (user_name, password))
-  headers = {
-    'Authorization': 'Basic %s' % auth_token,
-    'User-Agent': 'Googlecode.com uploader v0.9.4',
-    'Content-Type': content_type,
-    }
-
-  server = httplib.HTTPSConnection(upload_host)
-  server.request('POST', upload_uri, body, headers)
-  resp = server.getresponse()
-  server.close()
-
-  if resp.status == 201:
-    location = resp.getheader('Location', None)
-  else:
-    location = None
-  return resp.status, resp.reason, location
-
-
-def encode_upload_request(fields, file_path):
-  """Encode the given fields and file into a multipart form body.
-
-  fields is a sequence of (name, value) pairs. file is the path of
-  the file to upload. The file will be uploaded to Google Code with
-  the same file name.
-
-  Returns: (content_type, body) ready for httplib.HTTP instance
-  """
-  BOUNDARY = '----------Googlecode_boundary_reindeer_flotilla'
-  CRLF = '\r\n'
-
-  body = []
-
-  # Add the metadata about the upload first
-  for key, value in fields:
-    body.extend(
-      ['--' + BOUNDARY,
-       'Content-Disposition: form-data; name="%s"' % key,
-       '',
-       value,
-       ])
-
-  # Now add the file itself
-  file_name = os.path.basename(file_path)
-  f = open(file_path, 'rb')
-  file_content = f.read()
-  f.close()
-
-  body.extend(
-    ['--' + BOUNDARY,
-     'Content-Disposition: form-data; name="filename"; filename="%s"'
-     % file_name,
-     # The upload server determines the mime-type, no need to set it.
-     'Content-Type: application/octet-stream',
-     '',
-     file_content,
-     ])
-
-  # Finalize the form body
-  body.extend(['--' + BOUNDARY + '--', ''])
-
-  return 'multipart/form-data; boundary=%s' % BOUNDARY, CRLF.join(body)
-
-
-def upload_find_auth(file_path, project_name, summary, labels=None,
-                     user_name=None, password=None, tries=3):
-  """Find credentials and upload a file to a Google Code project's file server.
-
-  file_path, project_name, summary, and labels are passed as-is to upload.
-
-  Args:
-    file_path: The local path to the file.
-    project_name: The name of your project on Google Code.
-    summary: A small description for the file.
-    labels: an optional list of label strings with which to tag the file.
-    config_dir: Path to Subversion configuration directory, 'none', or None.
-    user_name: Your Google account name.
-    tries: How many attempts to make.
-  """
-  if user_name is None or password is None:
-    from netrc import netrc
-    authenticators = netrc().authenticators("code.google.com")
-    if authenticators:
-      if user_name is None:
-        user_name = authenticators[0]
-      if password is None:
-        password = authenticators[2]
-
-  while tries > 0:
-    if user_name is None:
-      # Read username if not specified or loaded from svn config, or on
-      # subsequent tries.
-      sys.stdout.write('Please enter your googlecode.com username: ')
-      sys.stdout.flush()
-      user_name = sys.stdin.readline().rstrip()
-    if password is None:
-      # Read password if not loaded from svn config, or on subsequent tries.
-      print 'Please enter your googlecode.com password.'
-      print '** Note that this is NOT your Gmail account password! **'
-      print 'It is the password you use to access Subversion repositories,'
-      print 'and can be found here: http://code.google.com/hosting/settings'
-      password = getpass.getpass()
-
-    status, reason, url = upload(file_path, project_name, user_name, password,
-                                 summary, labels)
-    # Returns 403 Forbidden instead of 401 Unauthorized for bad
-    # credentials as of 2007-07-17.
-    if status in [httplib.FORBIDDEN, httplib.UNAUTHORIZED]:
-      # Rest for another try.
-      user_name = password = None
-      tries = tries - 1
-    else:
-      # We're done.
-      break
-
-  return status, reason, url
-
-
-def main():
-  parser = optparse.OptionParser(usage='googlecode-upload.py -s SUMMARY '
-                                 '-p PROJECT [options] FILE')
-  parser.add_option('-s', '--summary', dest='summary',
-                    help='Short description of the file')
-  parser.add_option('-p', '--project', dest='project',
-                    help='Google Code project name')
-  parser.add_option('-u', '--user', dest='user',
-                    help='Your Google Code username')
-  parser.add_option('-w', '--password', dest='password',
-                    help='Your Google Code password')
-  parser.add_option('-l', '--labels', dest='labels',
-                    help='An optional list of comma-separated labels to attach '
-                    'to the file')
-
-  options, args = parser.parse_args()
-
-  if not options.summary:
-    parser.error('File summary is missing.')
-  elif not options.project:
-    parser.error('Project name is missing.')
-  elif len(args) < 1:
-    parser.error('File to upload not provided.')
-  elif len(args) > 1:
-    parser.error('Only one file may be specified.')
-
-  file_path = args[0]
-
-  if options.labels:
-    labels = options.labels.split(',')
-  else:
-    labels = None
-
-  status, reason, url = upload_find_auth(file_path, options.project,
-                                         options.summary, labels,
-                                         options.user, options.password)
-  if url:
-    print 'The file was uploaded successfully.'
-    print 'URL: %s' % url
-    return 0
-  else:
-    print 'An error occurred. Your file was not uploaded.'
-    print 'Google Code upload server said: %s (%s)' % (reason, status)
-    return 1
-
-
-if __name__ == '__main__':
-  sys.exit(main())
diff --git a/android/scripts/maven-install-mapsforge.sh b/android/scripts/maven-install-mapsforge.sh
deleted file mode 100755
index f1fac1393c..0000000000
--- a/android/scripts/maven-install-mapsforge.sh
+++ /dev/null
@@ -1,20 +0,0 @@
-# do the following
-# git clone https://code.google.com/p/mapsforge/
-# cd mapsforge; and fix http://code.google.com/p/mapsforge/issues/detail?id=461
-# mvn clean install
-# cp mapsforge-map/target/mapsforge-map-0.3.1-SNAPSHOT-jar-with-dependencies.jar graphhopper/android/libs/mapsforge-0.3.1-SNAPSHOT.jar
-
-# if we would do it via normal maven dependency management we run into strange things which I was not able to fix
-# http://stackoverflow.com/a/8315600/194609
-
-# MAVEN_HOME/bin/mvn
-MVN=mvn
-VERSION=0.4.0
-libs="map map-android map-reader core"
-
-for lib in $libs; do
-  FILE=$(ls ./libs/mapsforge-$lib-$VERSION.jar)
-  echo "installing file: $FILE"
-  ARGS="-DgroupId=com.graphhopper -DartifactId=mapsforge-$lib -Dversion=$VERSION -Dpackaging=jar -Dfile=$FILE"
-  $MVN install:install-file $ARGS
-done
diff --git a/core/files/live_measurement.sh b/core/files/live_measurement.sh
deleted file mode 100755
index 1fbafd5ae6..0000000000
--- a/core/files/live_measurement.sh
+++ /dev/null
@@ -1,59 +0,0 @@
-#!/bin/bash
-
-# before execution do
-# 1. cp files/measurement.sh files/live_measurement.sh
-#    to ensure that you have your customized measurement.sh file available and git has no problems to switch versions
-# 2. adapt memory usage in JAVA_OPTS
-# 3. adapt the OSM location GH_MAIN
-# 4. adapt last_commits
-
-GH_HOME=$(dirname $0)/..
-cd $GH_HOME
-
-JAVA=$JAVA_HOME/bin/java
-if [ "x$JAVA_HOME" = "x" ]; then
- JAVA=java
-fi
-
-VERSION=`grep  "<name>" -A 1 pom.xml | grep version | cut -d'>' -f2 | cut -d'<' -f1`
-JAR=target/graphhopper-$VERSION-jar-with-dependencies.jar
-
-# make sure this stays the same for all measurements
-JAVA_OPTS="-Xmx1000m -Xms1000m" 
-
-GH_MAIN=/media/SAMSUNG/maps/unterfranken
-
-# should we call?
-# mvn clean install assembly:single
-
-# import graph
-OSM_XML=$GH_MAIN.osm
-GL=$GH_MAIN-gh
-ARGS="osmreader.graph-location=$GL osmreader.osm=$OSM_XML osmreader.chWeighting=fastest osmreader.type=CAR"
-echo -e "\ncreate graph via $ARGS, $JAR"
-$JAVA $JAVA_OPTS -cp $JAR com.graphhopper.reader.OSMReader $ARGS osmreader.doPrepare=false
-
-function startMeasurement {
-  COUNT=5000
-  ARGS="$ARGS osmreader.doPrepare=true measurement.count=$COUNT measurement.location=$M_FILE_NAME"
-  echo -e "\nperform measurement via $ARGS, $JAR"
-  $JAVA $JAVA_OPTS -cp $JAR com.graphhopper.util.Measurement $ARGS
-}
-
-# use current version
-mvn -DskipTests clean install assembly:single  
-startMeasurement
-exit
-
-# use git
-last_commits=1
-commits=$(git rev-list HEAD -n $last_commits)
-for commit in $commits; do
-  git checkout $commit -q
-  M_FILE_NAME=`git log -n 1 --pretty=oneline | grep -o "\ .*" |  tr " ,;" "_"`
-  M_FILE_NAME="measurement$M_FILE_NAME.properties"
-  echo -e "\nusing commit $commit and $M_FILE_NAME"
-  
-  mvn -DskipTests clean install assembly:single
-  startMeasurement
-done
diff --git a/core/files/postgis/gh_from_a_to_b_local.sql b/core/files/postgis/gh_from_a_to_b_local.sql
new file mode 100644
index 0000000000..380ae87141
--- /dev/null
+++ b/core/files/postgis/gh_from_a_to_b_local.sql
@@ -0,0 +1,62 @@
+
+CREATE OR REPLACE FUNCTION gh_from_a_to_b_local(lata double precision, lona double precision, latb double precision, lonb double precision, vehicle varchar)
+  RETURNS text[] AS
+$BODY$
+import requests, json,os
+def ms_to_hms(milliseconds):
+    hours, milliseconds = divmod(milliseconds, 3600000)
+    minutes, milliseconds = divmod(milliseconds, 60000)
+    seconds = float(milliseconds) / 1000
+    s = "%i:%02i" % (hours, minutes)
+    return s
+def ghroutetime(p1,p2,v):
+    gcurl="http://localhost:8989/route?"
+    params=[]
+    result={}
+    #result=''
+    for x in range(6):
+        params.append([])
+    params[0].append('point')
+    params[0].append(p1)
+    params[1].append('point')
+    params[1].append(p2)
+    params[2].append('instructions')
+    params[2].append('false')
+    params[3].append('calc_points')
+    params[3].append('true')
+    params[4].append('vehicle')
+    params[4].append(v)
+    params[5].append('points_encoded')
+    params[5].append('false')
+    data = requests.get(url=gcurl, params=params)
+    binary = data.content
+    result=json.loads(binary)
+    result['paths'][0]['time']=ms_to_hms(result['paths'][0]['time'])
+    distance=(result['paths'][0]['distance'])
+    time=result['paths'][0]['time']
+    geom=json.dumps(result['paths'][0]['points'])
+    return distance,time,geom
+def format_point(lat, lon):
+	p=str(lat)+', '+str(lon)
+	return p
+try:
+	dist,time,geom=ghroutetime(format_point(lata,lona),format_point(latb,lonb),vehicle)
+except:
+	dist,time,geom=0,0,''
+return dist,time,geom	
+$BODY$
+  LANGUAGE plpythonu VOLATILE
+  COST 100;
+  
+comment on function gh_from_a_to_b_local(lata double precision, lona double precision, latb double precision, lonb double precision, vehicle varchar) is 
+'
+pl/python function to enable graphhopper routing from postgis.
+Make sure to have created the extension plpythonu beforehand.
+
+Result is a text array with 
+
+Distance[m] 
+drivetime[hh:mm] 
+Geometry as GeoJSON in CRS 4326 (WGS84)
+To transform the GeoJSON geometry to wkb, use the postgis function "st_geomfromgeojson(geojson)"
+';
diff --git a/core/files/release.sh b/core/files/release.sh
deleted file mode 100755
index 4ecc63bdd1..0000000000
--- a/core/files/release.sh
+++ /dev/null
@@ -1,79 +0,0 @@
-#!/bin/bash
-
-# assumptions:
-# 1. you have run unit and integration tests successfully
-# 2. no changes on master
-
-# TODO when we understand the commands we can use the release plugin
-# mvn release:clean 
-# # Prepare: build, test, release version update, commit, tag, next snapshot version update, commit
-# mvn release:prepare -DgenerateBackupPoms=false
-# # Perform: export a release from SCM, run the deploy goal
-# mvn release:perform
-# https://docs.sonatype.org/display/Repository/Sonatype+OSS+Maven+Repository+Usage+Guide
-
-GH_CORE_HOME=$(dirname $0)/..
-cd $GH_CORE_HOME
-VERSION=0.1
-NEW_VERSION=0.2-SNAPSHOT
-TARGET=./target
-GIT_E=true
-
-mvn versions:set -DnewVersion=$VERSION -DgenerateBackupPoms=false
-# as android is not referenced in parent we need to do it manually
-cd android
-mvn versions:set -DnewVersion=$VERSION -DgenerateBackupPoms=false
-cd ..
-
-if [ "x$GIT_E" = "xtrue" ]; then
-  git checkout -b $VERSION
-  git add .
-  git commit -m "releasing $VERSION"
-fi
-
-
-##############################
-# create jar and android files
-mvn -DskipTests=true clean install assembly:single
-
-if [ $? -ne 0 ]; then
-  echo "cannot install jars?"
-  exit
-fi  
-
-# now create binary distribution where no maven is necessary to run import
-cp ../graphhopper.sh $TARGET/graphhopper.sh
-JAR=`cd $TARGET && ls -1 *-with-dependencies.jar`
-# use @ instead of the common / to avoid problems with paths in $JAR
-sed -i "s@JAR=.*@JAR=$JAR@g" $TARGET/graphhopper.sh
-# if you use -x option use backslash avoids shell substitution e.g. -x \*~
-zip -j $TARGET/graphhopper-$VERSION-bin.zip $TARGET/graphhopper.sh $TARGET/$JAR ../config-example.properties ../*.txt ../*.md
-
-
-########################
-# deployment to sonatype
-$MVN install deploy
-
-if [ $? -ne 0 ]; then
-  echo "cannot deploy to sonatype?"
-  exit
-fi    
-
-cd android
-export ANDROID_HOME=/install/android/sdk
-$MVN clean install deploy
-cd ..
-
-
-##########################
-# deployment to our server
-
-# TODO
-
-mvn versions:set -DnewVersion=$NEW_VERSION -DgenerateBackupPoms=false
-
-if [ "x$GIT_E" = "xtrue" ]; then
-  git checkout master
-  git add .
-  git commit -m "new development version $NEW_VERSION"
-fi
diff --git a/core/files/update-translations.sh b/core/files/update-translations.sh
index c9e090a465..fafb5e55e0 100755
--- a/core/files/update-translations.sh
+++ b/core/files/update-translations.sh
@@ -3,11 +3,11 @@ cd $HOME/..
 
 destination=src/main/resources/com/graphhopper/util/
 
-translations="en_US SKIP bg ca de_DE el es fa fil fi fr gl he it ja ne nl pt_BR pt_PT ro ru si sk sv_SE tr uk vi_VI zh_CN"
+translations="en_US SKIP bg ca cz de_DE el es fa fil fi fr gl he hu_HU it ja ne nl pl_PL pt_BR pt_PT ro ru si sk sv_SE tr uk vi_VI zh_CN"
 file=$1
 
 # You can execute the following
-# curl "https://docs.google.com/spreadsheet/pub?key=0AmukcXek0JP6dGM4R1VTV2d3TkRSUFVQakhVeVBQRHc&single=true&gid=0&output=txt" > tmp.tsv
+# curl 'https://docs.google.com/spreadsheets/d/10HKSFmxGVEIO92loVQetVmjXT0qpf3EA2jxuQSSYTdU/export?format=tsv&id=10HKSFmxGVEIO92loVQetVmjXT0qpf3EA2jxuQSSYTdU&gid=0' > tmp.tsv
 # ./files/update-translations.sh tmp.tsv && rm tmp.tsv
 
 INDEX=1
diff --git a/docs/core/eclipse-setup.md b/docs/core/eclipse-setup.md
index eb2093e9a2..b38754cea3 100644
--- a/docs/core/eclipse-setup.md
+++ b/docs/core/eclipse-setup.md
@@ -3,7 +3,8 @@ Getting started with GraphHopper in Eclipse
 This manual covers step by step instructions on setting up a development and run environment for GraphHopper (web App only) using Eclipse. The instructions and tools used are platform independent and should be applicable for windows, Linux and Mac operating systems. 
 Instructions for Android branch will be provided in future.
 
-The first part of this document covers configuring Eclipse for cloning and importing GraphHopper repository. Setting up Apache Tomcat server and configuring it to run GraphHopper will be covered in subsequent documents.
+The first part of this document covers configuring Eclipse for cloning and importing GraphHopper repository. 
+Setting up Apache Tomcat server and configuring it to run GraphHopper is covered in [Setting up Apache Tomcat Server](./eclipse-tomcat-setup.md).
 
 ###1. Download Eclipse
 
diff --git a/docs/core/eclipse-tomcat-setup.md b/docs/core/eclipse-tomcat-setup.md
new file mode 100644
index 0000000000..40365e4836
--- /dev/null
+++ b/docs/core/eclipse-tomcat-setup.md
@@ -0,0 +1,148 @@
+Setting up Apache Tomcat Server
+=========
+After ["Configuring Eclipse to get started with GraphHopper"](https://github.com/graphhopper/graphhopper/blob/master/docs/core/eclipse-setup.md), in this document we cover how to set up Apache Tomcat server and configure it to run GraphHopper.
+
+###1. Install Apache Tomcat Server
+
+To install Tomcat server, open Eclipse and choose a workspace you have already configured to work with GraphHopper. Details for configuring eclipse can be found in this ["document"](https://github.com/graphhopper/graphhopper/blob/master/docs/core/eclipse-setup.md).
+
+ At first you have to make sure that “Dynamic Web Module” has been checked in the project: 
+
+* On Project explorer, right click on _graphhopper-web [graphhopper master]_ and go to "Properties". 
+
+* Choose "Project Facets" and make sure that "Dynamic Web Module" has been selected. If not, select it and then apply the changes.  
+
+![](./images/2.jpg)
+
+Now you are ready to add or create a new server:
+
+* If you do not see any tab called “Servers” , then go to _window -> Show view_ and then choose "Servers". Please note you may need to choose "Other..." and then "Servers".
+
+* If this is the first time you are creating a server, in the “Servers” area you will see a link as “No servers are available click this link to create a new server”. Click the link.
+
+![](./images/1.jpg)
+
+* “Define a New Server” window will be opened, In “Select the server type”. Open “Apache” and choose an appropriate Tomcat version. For this document we chose “Tomcat v8.0 Server”.
+
+* Leave “Server’s host name” as  _localhost_. You can give any name that you want to “Server name”. Then click “Next”. 
+
+![](./images/3.jpg)
+
+* In “Tomcat Server” page, you need to specify the installation directory for Tomcat. At first in “JRE” part, choose the jre you have installed in your system (e.g.  jre 1.8.0_31).
+
+* If this is the first time you are installing this version of Tomcat you have to click on “Download and Install” to automatically get and install Tomcat, otherwise choose the installation directory for Tomcat as shown in figure. 
+
+![](./images/5.jpg)
+
+* If this is the first time you are installing a specific version of Tomcat, then the feature license page appears for you. Review the license to decide whether to accept the terms of the agreement. After accepting the terms, choose the installation directory and click "Next".
+
+* In “Add and Remove” page add _graphhopper-web_ from “available:” column to “configured:”. Then click on “Finish”.  Please note that you should wait until the installation completes so that the current Window automatically be closed.
+
+![](./images/4.jpg)
+
+
+###2.	Basic Configurations
+After downloading and installing Tomcat, you need to change some of the default settings: 
+
+* In the "Overview" tab double click the name of the created server. Now in your dashboard you should be able to see the whole overview of the server.
+
+![](./images/18.jpg)
+
+* In “Timeouts” part, change _start_ and _stop times_ appropriately. Please note that when running GraphHopper for the first time, a new graph should be created and it may take some time. Therefore these times (specially the start time) should be increased to give enough time for creating the graph. Here we chose 200 for both times.
+
+![](./images/6.jpg)
+
+* In The “Ports” part you can choose any port you want for the server to work with. You can also leave the default settings as the below figure.
+
+![](./images/7.jpg)
+
+* On "Project explorer", right click on _graphhopper-web [graphhopper master]_ and go to “Build Path” -->”Configure build path” --> “Deployment Assembly”. 
+* Make sure in the “Web Deployment Assembly” "src/main/webapp" is added as below figure.
+
+![](./images/9.jpg)
+
+* If not added,select "Add" button.
+ * In "Select Directive Type", choose _Folder_ and click "Next".
+ * In "Folder" page, click _src_ , then choose _main_  and then select _webapp_. Click "Finish"
+ 
+![](./images/15.jpg)
+###3.	VM Arguments Configuration
+At this step you need to include specific VM arguments corresponds to _map_ and _configuration_ files so that the GraphHopper works without any problem.  
+
+* First of all make sure that you have a configuration folder with _map_ and _configuration_ files. Therefore, create a folder (at any location in your system that you want) and copy the the appropriate _map_ and _configuration_ files to this folder as described below:
+
+ * **Configuration file (config.properties)**: Is a file that contains GraphHopper's configurations. From the GraphHopper git repository, copy the file named “config-example.properties” into the configuration folder you created. Rename the file to “config.properties” ( or any name you want).
+
+ * **Map file (map.osm)**:  Any .osm file can have the map data. The name of the .osm file is defined in the config.properties and by default it is map.osm. You can keep the default name. Get an .osm file and put it in the configuration folder and name it map.osm. Please note you can get an .osm file from ["OpenStreetMap site"](http://www.openstreetmap.org/#map=14/44.5763/-123.2788).
+ 
+ * **Graph folder**: This folder is created automatically based on defining the correct VM argument and upon running GraphHopper. Graph folder is used to keep the created graph by GraphHopper.
+ 
+* Now to add VM arguments, go to “Overview” part and in “General information”, click on “Open launch configuration”.
+
+* In “(x)= Arguments”  tab,  and in “VM arguments” part, add the necessary arguments and their corresponding paths that are not included. You only need to add the below arguments and paths:
+ * **1.-Dgraphhopper.config="_Path to config.properties file_"**: config.properties is a file that contains GraphHopper's configurations.
+ * **2.-Dgraphhopper.graph.location="_Path to graph folder_"**: In _graph_ folder ( with any optional name) a graph would be created. Upon running GraphHopper a folder ( with the name defined in VM arguments) will be created to keep the graph. So do not worry about manually creating it in the configuration folder.
+ * **3.-Dgraphhopper.osmreader.osm="_Path to map.osm file_"**:  *.osm file contains the map data. The name of the .osm file is defined in the config.properties and by default it is map.osm. 
+
+![](./images/8.jpg)
+
+
+
+* _-Xmx1G_  is optional and is used to restrict the maximum heap size for Java virtual machine. It should be configured based on the amount of RAM dedicated to run the server. Here we chose 1G. If you have enough RAM on your system, you can increase the number. For example change _-Xmx1G_ to _–Xmx4G_. Please consider that if you choose a wrong amount of RAM, you may face errors. You may also want to not add this optional argument. In this case a predefined heap size will be allocated for Java virtual machine.
+
+###4.  Configuring Web Modules
+To complete setting up the Tomcat server go through the below steps: 
+
+* Click the “Modules” tab to go to “Web Modules” .
+
+* Select “graphhopper-web” row. Then click “Edit”.
+
+* Edit the “path” from "_/graphhopper-web_" to "_/_". 
+
+![](./images/13.jpg)
+
+###5. Run Server
+ After going through all the previous steps, you are ready to run GraphHopper using Apache Tomcat server in Eclipse. Right click on the name of you server and choose "Start". Or simply click on the green "start" icon.
+ If you faced no error and the server started successfully, in your browser type the server address and port. In our example it is : http://localhost:8080/. 
+ Congratulations! You have GraphHopper (with basic settings) running and ready for work!
+ However it is possible that you face an error as **"NoClassDefFoundError"**. If so, please see the section "6. Configuring Classpath and Resolving Maven Dependencies Problem"
+  
+ ![](./images/17.jpg)
+ 
+
+###6. Configuring Classpath and Resolving Maven Dependencies Problem
+Depending on your Eclipse version or the _m2e_ that you use, _Maven_ may not set _Classpath_ for dependencies properly. Therefore, while running your Tomcat server you may face an error as **"NoClassDefFoundError"**. 
+If you faced such an error, at first please check the below websites for the additional plug-ins, instructions on changing pom.xml and solving the similar problem:
+
+* ["Maven not setting classpath for dependencies properly"](http://stackoverflow.com/questions/4687609/maven-not-setting-classpath-for-dependencies-properly)
+
+* ["How to configure Eclipse build path to use Maven dependencies?"](http://stackoverflow.com/questions/2037188/how-to-configure-eclipse-build-path-to-use-maven-dependencies)
+
+However your problem may still not be solved. We could not find any accurate solution for this problem but here is a workaround: 
+
+* In “Configure build path”--> “Java Build Path”, click on “Libraries” tab and choose “Maven Dependencies”. Take a look at all “.jar files". Be ready to find all these .jar files in your system, and to make a copy of them in a folder.
+
+![](./images/10.jpg)
+
+* You have to add all these files to “Classpath” as well. 
+ On Project explorer, right click on _graphhopper-web [graphhopper master]_ and go to “Run As” --> “Run configuration…” then choose “Classpass” tab. Under “User Entries” , you see only a few “.jar files”. It should look like the below figure.
+ 
+ ![](./images/11.jpg)
+ 
+* You have to find the location of each .jar file, you saw previously in "Build Path" and add them as an “External JARs” to the Classpath. Since there are lots of files, we suggest that you at first manually copy (not cut!) all the “.jar” files into a folder so that you can use them in future as well.  
+
+* Again go to “User Entries” on “Classpath” and click on “ External JARs…”.  In the “Jar Selection” Window go to the folder you already created with all the .Jar files and select all those files. Now your Classpath should look like below. 
+
+![](./images/12.jpg)
+
+* Finally you also have to add "graphhoper" Project to "Classpath". Click “User Entries” on “Classpath” and select "Add Projects...". Check "graphopper" and click "OK".
+ 
+ ![](./images/16.jpg)
+ 
+The Problem should be resolved with this workaround.
+ 
+ 
+ 
+
+
+
diff --git a/docs/core/images/1.jpg b/docs/core/images/1.jpg
new file mode 100644
index 0000000000..777de4d6da
Binary files /dev/null and b/docs/core/images/1.jpg differ
diff --git a/docs/core/images/10.jpg b/docs/core/images/10.jpg
new file mode 100644
index 0000000000..7d50ff238e
Binary files /dev/null and b/docs/core/images/10.jpg differ
diff --git a/docs/core/images/11.jpg b/docs/core/images/11.jpg
new file mode 100644
index 0000000000..7e98136d8f
Binary files /dev/null and b/docs/core/images/11.jpg differ
diff --git a/docs/core/images/12.jpg b/docs/core/images/12.jpg
new file mode 100644
index 0000000000..1f408f117a
Binary files /dev/null and b/docs/core/images/12.jpg differ
diff --git a/docs/core/images/13.jpg b/docs/core/images/13.jpg
new file mode 100644
index 0000000000..aa4f1cff55
Binary files /dev/null and b/docs/core/images/13.jpg differ
diff --git a/docs/core/images/15.jpg b/docs/core/images/15.jpg
new file mode 100644
index 0000000000..077e5fb79f
Binary files /dev/null and b/docs/core/images/15.jpg differ
diff --git a/docs/core/images/16.jpg b/docs/core/images/16.jpg
new file mode 100644
index 0000000000..5197142ba4
Binary files /dev/null and b/docs/core/images/16.jpg differ
diff --git a/docs/core/images/17.jpg b/docs/core/images/17.jpg
new file mode 100644
index 0000000000..bceb49f6e4
Binary files /dev/null and b/docs/core/images/17.jpg differ
diff --git a/docs/core/images/18.jpg b/docs/core/images/18.jpg
new file mode 100644
index 0000000000..cd7e1dfc2d
Binary files /dev/null and b/docs/core/images/18.jpg differ
diff --git a/docs/core/images/2.jpg b/docs/core/images/2.jpg
new file mode 100644
index 0000000000..b5b90af561
Binary files /dev/null and b/docs/core/images/2.jpg differ
diff --git a/docs/core/images/3.jpg b/docs/core/images/3.jpg
new file mode 100644
index 0000000000..6db9ea63e0
Binary files /dev/null and b/docs/core/images/3.jpg differ
diff --git a/docs/core/images/4.jpg b/docs/core/images/4.jpg
new file mode 100644
index 0000000000..32d38e158e
Binary files /dev/null and b/docs/core/images/4.jpg differ
diff --git a/docs/core/images/5.jpg b/docs/core/images/5.jpg
new file mode 100644
index 0000000000..c9334b5ecb
Binary files /dev/null and b/docs/core/images/5.jpg differ
diff --git a/docs/core/images/6.jpg b/docs/core/images/6.jpg
new file mode 100644
index 0000000000..6cf5b0f3b6
Binary files /dev/null and b/docs/core/images/6.jpg differ
diff --git a/docs/core/images/7.jpg b/docs/core/images/7.jpg
new file mode 100644
index 0000000000..58e03063f8
Binary files /dev/null and b/docs/core/images/7.jpg differ
diff --git a/docs/core/images/8.jpg b/docs/core/images/8.jpg
new file mode 100644
index 0000000000..443a2507e8
Binary files /dev/null and b/docs/core/images/8.jpg differ
diff --git a/docs/core/images/9.jpg b/docs/core/images/9.jpg
new file mode 100644
index 0000000000..50ba8d4d74
Binary files /dev/null and b/docs/core/images/9.jpg differ
diff --git a/docs/core/routing.md b/docs/core/routing.md
index ae1fd60d9d..42ebe461e3 100644
--- a/docs/core/routing.md
+++ b/docs/core/routing.md
@@ -35,7 +35,7 @@ if(!rsp.isFound()) {
 // points, distance in meters and time in millis of the full path
 PointList pointList = rsp.getPoints();
 double distance = rsp.getDistance();
-long millis = rsp.getMillis();
+long timeInMs = rsp.getTime();
 
 // get the turn instructions for the path
 InstructionList il = rsp.getInstructions();
diff --git a/docs/core/translations.md b/docs/core/translations.md
index 4f7d6eb502..e78415c906 100644
--- a/docs/core/translations.md
+++ b/docs/core/translations.md
@@ -2,7 +2,7 @@
 
 You can help improve GraphHopper by adding your language!
 
-See [this spreadsheet](https://docs.google.com/spreadsheet/ccc?key=0AmukcXek0JP6dGM4R1VTV2d3TkRSUFVQakhVeVBQRHc#gid=0)
+See [this spreadsheet](https://docs.google.com/spreadsheets/d/10HKSFmxGVEIO92loVQetVmjXT0qpf3EA2jxuQSSYTdU/pub)
 and add a column for your language. Revisit it regularly to update or add new items. And see your language live at GraphHopper Maps e.g. explicitely specify the locale via:
 
 [https://graphhopper.com/maps/?point=40.979898%2C-3.164062&point=39.909736%2C-2.8125&locale=de](https://graphhopper.com/maps/?point=40.979898%2C-3.164062&point=39.909736%2C-2.8125&locale=de) 
@@ -28,7 +28,7 @@ want to try your changes or want to speed up the integration you can do the foll
 
  * Make GraphHopper working on your computer, where you need to git clone the repository - see [here](./quickstart-from-source.md) for more information.
  * If you created a new language then add it in lexicographical order to TranslationMap.LOCALES (core/src/main/java/com/graphhopper/util) and to the script: core/files/update-translations.sh
- * Do `cd graphhopper/core; curl "https://docs.google.com/spreadsheet/pub?key=0AmukcXek0JP6dGM4R1VTV2d3TkRSUFVQakhVeVBQRHc&single=true&gid=0&output=txt" > tmp.tsv`
+ * Do `cd graphhopper/core; curl 'https://docs.google.com/spreadsheets/d/10HKSFmxGVEIO92loVQetVmjXT0qpf3EA2jxuQSSYTdU/export?format=tsv&id=10HKSFmxGVEIO92loVQetVmjXT0qpf3EA2jxuQSSYTdU&gid=0' > tmp.tsv`
  * Then `./files/update-translations.sh tmp.tsv && rm tmp.tsv`
  * Now you can see your changes via `git diff`. Make sure that is the only one with `git status`
  * Now execute `mvn clean test` to see if you did not miss arguments in your translation (see point 2 in the questions above)
diff --git a/docs/index.md b/docs/index.md
index 5d6268d75c..7b0f01c7dd 100644
--- a/docs/index.md
+++ b/docs/index.md
@@ -1,40 +1,40 @@
 # Users
 
- * [Quickstart](./web/quickstart.md) for users
- * [Read Overview](http://graphhopper.com/#overview)
- * [Add GraphHopper Maps to your Browser](./web/open-search.md)
- * [GraphHopper on Twitter](https://twitter.com/graphhopper)
+ * [Quickstart](./web/quickstart.md): HowTo for users.
+ * [Read Overview](https://graphhopper.com/#overview): Summary of the product Graphhopper. 
+ * [Add GraphHopper Maps to your Browser](./web/open-search.md): Instructions how to setup Graphhopper as the standart search enginge in your browser.
+ * [GraphHopper on Twitter](https://twitter.com/graphhopper): Find the official Graphhopper account on Twitter.
 
 # Translators
 
-* [Translations](./core/translations.md)
+* [Translations](./core/translations.md): Tutorial how to help with the Graphhopper translations or how to setup a new language.
 
 
 # Developers
 
- * [Quickstart](./core/quickstart-from-source.md) for developers. Explains git checkout, IDE setup and commands for setting up a graphhopper server.
- * [Android](./android/index.md)
- * [Windows](./core/windows-setup.md)
- * [Set up and run GraphHopper in Eclipse](./core/eclipse-setup.md)
- * [iOS](https://github.com/graphhopper/graphhopper-ios/)
+ * [Quickstart](./core/quickstart-from-source.md): Introduction for developers. Explains git checkout, IDE setup and commands for setting up a graphhopper server.
+ * [Android](./android/index.md): Instructions how to setup the demo project for Graphhopper on Android as base for further development (i.e. with Android Studio).
+ * [Windows](./core/windows-setup.md): Documentation about how to get an Graphhopper instance running on windows (cygwin).
+ * [Set up and run GraphHopper in Eclipse](./core/eclipse-setup.md): Detailed instructions how to setup Graphhopper in eclipse with maven.
+ * [iOS](https://github.com/graphhopper/graphhopper-ios/): Link to the Graphhopper-iOS github repository.
 
 ## Core
 
- * [Simple routing](./core/routing.md) to integrate GraphHopper in your Java application (or pick any JVM language)
- * [Create custom weighting](./core/weighting.md)
- * [Elevation](./core/elevation.md)
- * [Technical overview](./core/technical.md)
- * [Slides from 2014](http://graphhopper.com/public/slides/)
- * [Contraction Hierarchies](./core/ch.md)
+ * [Simple routing](./core/routing.md): Tutorial how to integrate GraphHopper in your Java application (or pick any JVM language)
+ * [Create custom weighting](./core/weighting.md): Documentation about how to create a custom weighting class to influence the track calculation.
+ * [Elevation](./core/elevation.md): Documentation how to enable the usage of elevation for the output of the track.
+ * [Technical overview](./core/technical.md): Technical details about how graphhoppers calculations are working.
+ * [Slides from 2014](https://graphhopper.com/public/slides/): Small presentations about how graphhopper ist working.
+ * [Contraction Hierarchies](./core/ch.md): Details about speeding up the track calculations by [Contraction Hierarchies](http://en.wikipedia.org/wiki/Contraction_hierarchies).
 
 ## Web
 
- * [Routing API](./web/api-doc.md) Documentation of the Web API to communicate with any graphhopper server via http.
+ * [Routing API](./web/api-doc.md): Documentation of the Web API to communicate with any graphhopper server via http.
  
 ## Advanced Topics
 
- * [Low level API](./core/low-level-api.md) Use Graphhopper as a Java library.
- * [Create new FlagEncoder](./core/create-new-flagencoder.md) to create new routing profiles to influence which ways to favor and how the track-time is calculated.
- * [LocationIndex](./core/location-index.md) to get the location index to get i.e. the nearest edge.
- * [World-Wide-Road-Network](./core/world-wide.md) Details about using the whole world wide street data.
- * [Changelog](https://github.com/graphhopper/graphhopper/blob/master/core/files/changelog.txt) Latest changes.
+ * [Low level API](./core/low-level-api.md): Instructions how to use Graphhopper as a Java library.
+ * [Create new FlagEncoder](./core/create-new-flagencoder.md): Documentation to create new routing profiles to influence which ways to favor and how the track-time is calculated.
+ * [LocationIndex](./core/location-index.md): Documentation about how to get the location index for getting i.e. the nearest edge.
+ * [World-Wide-Road-Network](./core/world-wide.md): Details about using the whole world wide street data.
+ * [Changelog](https://github.com/graphhopper/graphhopper/blob/master/core/files/changelog.txt): Latest changes.
diff --git a/graphhopper.sh b/graphhopper.sh
index b1bf8d0030..968d9d5997 100755
--- a/graphhopper.sh
+++ b/graphhopper.sh
@@ -262,7 +262,7 @@ elif [ "$ACTION" = "torture" ]; then
  "$JAVA" $JAVA_OPTS -cp "$JAR" com.graphhopper.tools.QueryTorture $3 $4 $5 $6 $7 $8 $9
 
 
-elif [ "$ACTION" = "xminiui" ]; then
+elif [ "$ACTION" = "miniui" ]; then
  "$MAVEN_HOME/bin/mvn" --projects tools -DskipTests clean install assembly:single
  JAR=tools/target/graphhopper-tools-$VERSION-jar-with-dependencies.jar   
  "$JAVA" $JAVA_OPTS -cp "$JAR" com.graphhopper.ui.MiniGraphUI osmreader.osm="$OSM_FILE" config=$CONFIG \
