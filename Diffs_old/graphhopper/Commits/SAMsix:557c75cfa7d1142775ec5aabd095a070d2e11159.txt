diff --git a/README.md b/README.md
index 071ec834fa..7161b61031 100644
--- a/README.md
+++ b/README.md
@@ -9,14 +9,14 @@ It is tuned towards road networks with OpenStreetMap data but can be useful for
 Get Started & Contribute
 ---------------
 
-Read through our [wiki](https://github.com/graphhopper/graphhopper/wiki/), 
+Read through our [docs](https://github.com/graphhopper/graphhopper/blob/master/docs/index.md), 
 [how to contribute](https://github.com/graphhopper/graphhopper/blob/master/CONTRIBUTING.md) and 
 ask questions on [Stackoverflow](http://stackoverflow.com/questions/tagged/graphhopper)
 or sign up to the [mailing list](http://graphhopper.com/#developers).
 
 **Please only email me directly if you need consultancy** or can't explain your problem in the public.
 
-There are subprojects to make GraphHopper working on [Android](https://github.com/graphhopper/graphhopper/wiki/Android) or 
+There are subprojects to make GraphHopper working on [Android](https://github.com/graphhopper/graphhopper/blob/master/docs/android/index.md) or 
 as a [web application](https://github.com/graphhopper/graphhopper/tree/master/web). Have a look into our [live application](http://graphhopper.com/maps)
 
 
diff --git a/android/libs/mapsforge-core-0.4.0-SNAPSHOT.jar b/android/libs/mapsforge-core-0.4.3.jar
similarity index 86%
rename from android/libs/mapsforge-core-0.4.0-SNAPSHOT.jar
rename to android/libs/mapsforge-core-0.4.3.jar
index 75765118b6..82d62ee4f7 100644
Binary files a/android/libs/mapsforge-core-0.4.0-SNAPSHOT.jar and b/android/libs/mapsforge-core-0.4.3.jar differ
diff --git a/android/libs/mapsforge-map-0.4.0-SNAPSHOT.jar b/android/libs/mapsforge-map-0.4.3.jar
similarity index 88%
rename from android/libs/mapsforge-map-0.4.0-SNAPSHOT.jar
rename to android/libs/mapsforge-map-0.4.3.jar
index 3ace39569f..eba6643ef4 100644
Binary files a/android/libs/mapsforge-map-0.4.0-SNAPSHOT.jar and b/android/libs/mapsforge-map-0.4.3.jar differ
diff --git a/android/libs/mapsforge-map-android-0.4.0-SNAPSHOT.jar b/android/libs/mapsforge-map-android-0.4.3.jar
similarity index 87%
rename from android/libs/mapsforge-map-android-0.4.0-SNAPSHOT.jar
rename to android/libs/mapsforge-map-android-0.4.3.jar
index d8044b0b0f..0a6789d6c8 100644
Binary files a/android/libs/mapsforge-map-android-0.4.0-SNAPSHOT.jar and b/android/libs/mapsforge-map-android-0.4.3.jar differ
diff --git a/android/libs/mapsforge-map-reader-0.4.0-SNAPSHOT.jar b/android/libs/mapsforge-map-reader-0.4.3.jar
similarity index 86%
rename from android/libs/mapsforge-map-reader-0.4.0-SNAPSHOT.jar
rename to android/libs/mapsforge-map-reader-0.4.3.jar
index cce15f7fee..214bb5c8f3 100644
Binary files a/android/libs/mapsforge-map-reader-0.4.0-SNAPSHOT.jar and b/android/libs/mapsforge-map-reader-0.4.3.jar differ
diff --git a/android/pom.xml b/android/pom.xml
index d3b6d99bb8..487f992983 100644
--- a/android/pom.xml
+++ b/android/pom.xml
@@ -4,7 +4,7 @@
     <modelVersion>4.0.0</modelVersion>
     <groupId>com.graphhopper</groupId>
     <artifactId>graphhopper-android</artifactId>
-    <version>0.3-SNAPSHOT</version>
+    <version>0.4-SNAPSHOT</version>
     <name>GraphHopper Android</name>
     <packaging>apk</packaging>    
     <organization>
@@ -15,10 +15,13 @@
     <parent>
         <groupId>com.graphhopper</groupId>
         <artifactId>graphhopper-parent</artifactId>    	
-        <version>0.3-SNAPSHOT</version>
+        <version>0.4-SNAPSHOT</version>
     </parent>
     <properties>
+        <!--
         <mapsforge.version>0.3-0.4.0-SNAPSHOT</mapsforge.version>
+        -->
+        <mapsforge.version>0.4.3</mapsforge.version>
         <!-- do not put the properties here as it differs from dev to dev <android.sdk.path>/home/peterk/Programme/android-sdk-linux_x86</android.sdk.path>
         instead use your IDE to set it up or specify android sdk via command line
         using -Dandroid.sdk.path=... or by setting environment variable ANDROID_HOME
@@ -55,26 +58,27 @@
             </exclusions>
         </dependency>        
           
-        <!-- see scripts/maven-install-mapsforge.sh !
-            if we would use system dep it doesn't work (classnotfound). See also script for more infos.
+        <!-- see scripts/maven-install-mapsforge.sh if downloading from
+             maven central does not work (it should). 
+             if we would use system dep it doesn't work (classnotfound). See also script for more infos.
         -->          
         <dependency>
-            <groupId>com.graphhopper</groupId>            
+            <groupId>org.mapsforge</groupId>            
             <artifactId>mapsforge-core</artifactId>
             <version>${mapsforge.version}</version>
         </dependency>    
         <dependency>
-            <groupId>com.graphhopper</groupId>            
+            <groupId>org.mapsforge</groupId>            
             <artifactId>mapsforge-map</artifactId>
             <version>${mapsforge.version}</version>
         </dependency>
         <dependency>
-            <groupId>com.graphhopper</groupId>            
+            <groupId>org.mapsforge</groupId>            
             <artifactId>mapsforge-map-android</artifactId>
             <version>${mapsforge.version}</version>
         </dependency>        
         <dependency>
-            <groupId>com.graphhopper</groupId>            
+            <groupId>org.mapsforge</groupId>            
             <artifactId>mapsforge-map-reader</artifactId>
             <version>${mapsforge.version}</version>
         </dependency>
diff --git a/android/scripts/maven-install-mapsforge.sh b/android/scripts/maven-install-mapsforge.sh
index c396e286e0..f1fac1393c 100755
--- a/android/scripts/maven-install-mapsforge.sh
+++ b/android/scripts/maven-install-mapsforge.sh
@@ -9,12 +9,12 @@
 
 # MAVEN_HOME/bin/mvn
 MVN=mvn
-VERSION=0.4.0-SNAPSHOT
+VERSION=0.4.0
 libs="map map-android map-reader core"
 
 for lib in $libs; do
   FILE=$(ls ./libs/mapsforge-$lib-$VERSION.jar)
   echo "installing file: $FILE"
-  ARGS="-DgroupId=com.graphhopper -DartifactId=mapsforge-$lib -Dversion=0.3-0.4.0-SNAPSHOT -Dpackaging=jar -Dfile=$FILE"
+  ARGS="-DgroupId=com.graphhopper -DartifactId=mapsforge-$lib -Dversion=$VERSION -Dpackaging=jar -Dfile=$FILE"
   $MVN install:install-file $ARGS
 done
diff --git a/core/files/N50E011hgt.zip b/core/files/N50E011hgt.zip
new file mode 100644
index 0000000000..623adc98a9
Binary files /dev/null and b/core/files/N50E011hgt.zip differ
diff --git a/core/files/changelog.txt b/core/files/changelog.txt
index 20790804e9..ac3ec1275a 100644
--- a/core/files/changelog.txt
+++ b/core/files/changelog.txt
@@ -1,4 +1,6 @@
 0.3.0
+    introduced prefer bits, now bike uses more bits and 3 bike encoder do not fit into 32 bit anymore, will be fixed later
+    moved Translation argument into Path.calcInstruction for more fine grained control, instructions are now uncached and GHRequest: new locale parameter
     CoordTrig and the like are removed, GHPlace is mostly replaced by GHPoint and so GHRequest has now methods ala addPoint instead
     removed isBoth from AbstractFlagEncoder, moved canBeOverwritten and associated test to PrepareEncoder
     removed unused directory.rename
diff --git a/core/files/harsdorf.osm.pbf b/core/files/harsdorf.osm.pbf
new file mode 100644
index 0000000000..ca290fffe1
Binary files /dev/null and b/core/files/harsdorf.osm.pbf differ
diff --git a/core/files/neudrossenfeld.osm.pbf b/core/files/neudrossenfeld.osm.pbf
new file mode 100644
index 0000000000..680adc70aa
Binary files /dev/null and b/core/files/neudrossenfeld.osm.pbf differ
diff --git a/core/files/travis-build.sh b/core/files/travis-build.sh
index 7ff63eb41d..fd46e3dd5a 100755
--- a/core/files/travis-build.sh
+++ b/core/files/travis-build.sh
@@ -4,7 +4,7 @@ cd $HOME/../..
 modules="core web tools"
 for module in $modules; do
   echo "====== INSTALL $module ====="
-  mvn -pl $module install -DskipTests=true
+  mvn -pl $module clean install -DskipTests=true
   EXIT_VAL="$?"    
   if [[ "x$EXIT_VAL" != "x0" ]]; then
     exit $EXIT_VAL
diff --git a/core/files/update-translations.sh b/core/files/update-translations.sh
index ff4626a2e9..d7f579d41f 100755
--- a/core/files/update-translations.sh
+++ b/core/files/update-translations.sh
@@ -3,7 +3,7 @@ cd $HOME/..
 
 destination=src/main/resources/com/graphhopper/util/
 
-translations="en_US SKIP de_DE ro pt_PT pt_BR bg es ru ja fr si tr nl it fil SKIP el"
+translations="en_US SKIP de_DE ro pt_PT pt_BR bg es ru ja fr si tr nl it fil gl el uk ca"
 file=$1
 
 # TODO we need tsv but Google throws Internal Error when doing (works for csv):
diff --git a/core/pom.xml b/core/pom.xml
index e1dd80cb75..62a3d7c0dc 100644
--- a/core/pom.xml
+++ b/core/pom.xml
@@ -6,7 +6,7 @@
     <groupId>com.graphhopper</groupId>
     <artifactId>graphhopper</artifactId>
     <name>GraphHopper</name>
-    <version>0.3-SNAPSHOT</version>
+    <version>0.4-SNAPSHOT</version>
     <packaging>jar</packaging> 
     <description>
         GraphHopper is a fast and memory efficient Java road routing engine 
@@ -15,7 +15,7 @@
     <parent>
         <groupId>com.graphhopper</groupId>
         <artifactId>graphhopper-parent</artifactId>    	
-        <version>0.3-SNAPSHOT</version>
+        <version>0.4-SNAPSHOT</version>
     </parent>
         
     <properties>  
diff --git a/core/src/main/java/com/graphhopper/GHRequest.java b/core/src/main/java/com/graphhopper/GHRequest.java
index ab3e60ce09..2c84eea6e1 100644
--- a/core/src/main/java/com/graphhopper/GHRequest.java
+++ b/core/src/main/java/com/graphhopper/GHRequest.java
@@ -17,10 +17,12 @@
  */
 package com.graphhopper;
 
+import com.graphhopper.util.Helper;
 import com.graphhopper.util.shapes.GHPoint;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
+import java.util.Locale;
 import java.util.Map;
 
 /**
@@ -37,6 +39,7 @@
     private String vehicle = "";
     private String weighting = "";
     private boolean possibleToAdd = false;
+    private Locale locale = Locale.US;
 
     public GHRequest()
     {
@@ -111,6 +114,23 @@ public String getAlgorithm()
         return algo;
     }
 
+    public Locale getLocale()
+    {
+        return locale;
+    }
+
+    public GHRequest setLocale( Locale locale )
+    {
+        if (locale != null)
+            this.locale = locale;
+        return this;
+    }
+
+    public GHRequest setLocale( String localeStr )
+    {
+        return setLocale(Helper.getLocale(localeStr));
+    }
+
     /**
      * By default it supports fastest and shortest. Or specify empty to use default.
      */
diff --git a/core/src/main/java/com/graphhopper/GHResponse.java b/core/src/main/java/com/graphhopper/GHResponse.java
index 4c1bd15bbd..743a2e4a0e 100644
--- a/core/src/main/java/com/graphhopper/GHResponse.java
+++ b/core/src/main/java/com/graphhopper/GHResponse.java
@@ -31,7 +31,7 @@
     private PointList list = PointList.EMPTY;
     private double distance;
     private long time;
-    private InstructionList instructions = new InstructionList(0);
+    private InstructionList instructions = InstructionList.EMPTY;
     private boolean found;
 
     public GHResponse()
diff --git a/core/src/main/java/com/graphhopper/GraphHopper.java b/core/src/main/java/com/graphhopper/GraphHopper.java
index c6145183d5..bfb62dfbd7 100644
--- a/core/src/main/java/com/graphhopper/GraphHopper.java
+++ b/core/src/main/java/com/graphhopper/GraphHopper.java
@@ -24,6 +24,7 @@
 import java.util.Collections;
 import java.util.Date;
 import java.util.List;
+import java.util.Locale;
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -74,7 +75,7 @@ public static void main( String[] strs ) throws Exception
     private DAType dataAccessType = DAType.RAM_STORE;
     private boolean sortGraph = false;
     boolean removeZipped = true;
-    private int dimension = 2;
+    private boolean elevation = false;
     // for routing
     private boolean simplifyRequest = true;
     // for index
@@ -102,6 +103,7 @@ public static void main( String[] strs ) throws Exception
     private boolean enableInstructions = true;
     private boolean calcPoints = true;
     private boolean fullyLoaded = false;
+    private final TranslationMap trMap = new TranslationMap().doImport();
     private ElevationProvider eleProvider = ElevationProvider.NOOP;
 
     public GraphHopper()
@@ -138,9 +140,9 @@ public EncodingManager getEncodingManager()
     public GraphHopper setElevationProvider( ElevationProvider eleProvider )
     {
         if (eleProvider == null || eleProvider == ElevationProvider.NOOP)
-            set3D(false);
+            setElevation(false);
         else
-            set3D(true);
+            setElevation(true);
         this.eleProvider = eleProvider;
         return this;
     }
@@ -296,20 +298,17 @@ public boolean isCHEnabled()
     /**
      * @return true if storing and fetching elevation data is enabled. Default is false
      */
-    public boolean is3D()
+    public boolean hasElevation()
     {
-        return dimension == 3;
+        return elevation;
     }
 
     /**
      * Enable storing and fetching elevation data. Default is false
      */
-    public GraphHopper set3D( boolean is3D )
+    public GraphHopper setElevation( boolean includeElevation )
     {
-        if (is3D)
-            this.dimension = 3;
-        else
-            this.dimension = 2;
+        this.elevation = includeElevation;
         return this;
     }
 
@@ -444,6 +443,11 @@ public GraphHopper setSortGraph( boolean sortGraph )
         return this;
     }
 
+    public TranslationMap getTranslationMap()
+    {
+        return trMap;
+    }
+
     /*
      * Command line configuration overwrites the ones in the config file
      */
@@ -488,7 +492,6 @@ public GraphHopper init( CmdArgs args )
         // graph
         setGraphHopperLocation(graphHopperFolder);
         defaultSegmentSize = args.getInt("graph.dataaccess.segmentSize", defaultSegmentSize);
-        dimension = args.getInt("graph.dimension", dimension);
 
         String graphDATypeStr = args.get("graph.dataaccess", "RAM_STORE");
         dataAccessType = DAType.fromString(graphDATypeStr);
@@ -670,11 +673,11 @@ public boolean load( String graphHopperFolder )
         GHDirectory dir = new GHDirectory(ghLocation, dataAccessType);
 
         if (chEnabled)
-            graph = new LevelGraphStorage(dir, encodingManager, is3D());
+            graph = new LevelGraphStorage(dir, encodingManager, hasElevation());
         else if (turnCosts)
-            graph = new GraphHopperStorage(dir, encodingManager, is3D(), new TurnCostStorage());
+            graph = new GraphHopperStorage(dir, encodingManager, hasElevation(), new TurnCostStorage());
         else
-            graph = new GraphHopperStorage(dir, encodingManager, is3D());
+            graph = new GraphHopperStorage(dir, encodingManager, hasElevation());
 
         graph.setSegmentSize(defaultSegmentSize);
         if (!graph.loadExisting())
@@ -727,9 +730,14 @@ public Weighting createWeighting( String weighting, FlagEncoder encoder )
     {
         // ignore case
         weighting = weighting.toLowerCase();
-        if ("shortest".equals(weighting))
-            return new ShortestWeighting();
-        return new FastestWeighting(encoder);
+        if ("fastest".equals(weighting))
+        {
+            if (encoder instanceof BikeCommonFlagEncoder)
+                return new PriorityWeighting((BikeCommonFlagEncoder) encoder);
+            else
+                return new FastestWeighting(encoder);
+        }
+        return new ShortestWeighting();
     }
 
     @Override
@@ -750,6 +758,7 @@ public GHResponse route( GHRequest request )
         calcPoints = request.getHint("calcPoints", calcPoints);
         simplifyRequest = request.getHint("simplifyRequest", simplifyRequest);
         double minPathPrecision = request.getHint("douglas.minprecision", 1d);
+        Locale locale = request.getLocale();
         DouglasPeucker peucker = new DouglasPeucker().setMaxDistance(minPathPrecision);
 
         new PathMerger().
@@ -757,7 +766,7 @@ public GHResponse route( GHRequest request )
                 setDouglasPeucker(peucker).
                 setEnableInstructions(enableInstructions).
                 setSimplifyRequest(simplifyRequest && minPathPrecision > 0).
-                doWork(response, paths);
+                doWork(response, paths, trMap.getWithFallBack(locale));
         return response;
     }
 
diff --git a/core/src/main/java/com/graphhopper/routing/AStar.java b/core/src/main/java/com/graphhopper/routing/AStar.java
index eb23dac775..5eb2432695 100644
--- a/core/src/main/java/com/graphhopper/routing/AStar.java
+++ b/core/src/main/java/com/graphhopper/routing/AStar.java
@@ -125,7 +125,7 @@ private Path runAlgo()
                     }
                     nEdge.parent = currEdge;
                     prioQueueOpenSet.add(nEdge);
-                    updateShortest(nEdge, adjNode);
+                    updateBestPath(nEdge, adjNode);
                 }
             }
 
diff --git a/core/src/main/java/com/graphhopper/routing/AbstractRoutingAlgorithm.java b/core/src/main/java/com/graphhopper/routing/AbstractRoutingAlgorithm.java
index b4f6c5b335..f96130ef76 100644
--- a/core/src/main/java/com/graphhopper/routing/AbstractRoutingAlgorithm.java
+++ b/core/src/main/java/com/graphhopper/routing/AbstractRoutingAlgorithm.java
@@ -97,7 +97,7 @@ protected boolean accept( EdgeIterator iter )
         return additionalEdgeFilter == null || additionalEdgeFilter.accept(iter);
     }
 
-    protected void updateShortest( EdgeEntry shortestDE, int currLoc )
+    protected void updateBestPath( EdgeEntry shortestDE, int currLoc )
     {
     }
 
diff --git a/core/src/main/java/com/graphhopper/routing/Dijkstra.java b/core/src/main/java/com/graphhopper/routing/Dijkstra.java
index 17d5d064cf..4cada7b77d 100644
--- a/core/src/main/java/com/graphhopper/routing/Dijkstra.java
+++ b/core/src/main/java/com/graphhopper/routing/Dijkstra.java
@@ -101,7 +101,7 @@ private Path runAlgo()
                     fromHeap.add(nEdge);
                 }
 
-                updateShortest(nEdge, startNode);
+                updateBestPath(nEdge, startNode);
             }
 
             if (fromHeap.isEmpty())
diff --git a/core/src/main/java/com/graphhopper/routing/DijkstraBidirectionRef.java b/core/src/main/java/com/graphhopper/routing/DijkstraBidirectionRef.java
index 5d35b86009..6a8f6835c0 100644
--- a/core/src/main/java/com/graphhopper/routing/DijkstraBidirectionRef.java
+++ b/core/src/main/java/com/graphhopper/routing/DijkstraBidirectionRef.java
@@ -45,6 +45,7 @@
     protected EdgeEntry currFrom;
     protected EdgeEntry currTo;
     protected PathBidirRef bestPath;
+    private boolean updateBestPath = true;
 
     public DijkstraBidirectionRef( Graph graph, FlagEncoder encoder, Weighting weighting )
     {
@@ -70,7 +71,7 @@ public void initFrom( int from, double dist )
         if (currTo != null)
         {
             bestWeightMapOther = bestWeightMapTo;
-            updateShortest(currTo, from);
+            updateBestPath(currTo, from);
         }
     }
 
@@ -83,7 +84,7 @@ public void initTo( int to, double dist )
         if (currFrom != null)
         {
             bestWeightMapOther = bestWeightMapFrom;
-            updateShortest(currFrom, to);
+            updateBestPath(currFrom, to);
         }
     }
 
@@ -177,12 +178,13 @@ void fillEdges( EdgeEntry currEdge, PriorityQueue<EdgeEntry> prioQueue,
                 prioQueue.add(de);
             }
 
-            updateShortest(de, adjNode);
+            if (updateBestPath)
+                updateBestPath(de, adjNode);
         }
     }
 
     @Override
-    protected void updateShortest( EdgeEntry shortestEE, int currLoc )
+    protected void updateBestPath( EdgeEntry shortestEE, int currLoc )
     {
         EdgeEntry entryOther = bestWeightMapOther.get(currLoc);
         if (entryOther == null)
@@ -240,6 +242,11 @@ void setToDataStructures( DijkstraBidirectionRef dijkstra )
         // inEdgeExplorer
     }
 
+    void setUpdateBestPath( boolean b )
+    {
+        updateBestPath = b;
+    }
+
     void setBestPath( PathBidirRef bestPath )
     {
         this.bestPath = bestPath;
diff --git a/core/src/main/java/com/graphhopper/routing/Path.java b/core/src/main/java/com/graphhopper/routing/Path.java
index c513da5d43..829c4696a2 100644
--- a/core/src/main/java/com/graphhopper/routing/Path.java
+++ b/core/src/main/java/com/graphhopper/routing/Path.java
@@ -37,7 +37,7 @@
  */
 public class Path
 {
-    private static final AngleCalc2D ac = new AngleCalc2D();
+    private static final AngleCalc ac = new AngleCalc();
     protected Graph graph;
     private FlagEncoder encoder;
     protected double distance;
@@ -335,14 +335,11 @@ public void next( EdgeIteratorState eb, int index )
     }
 
     /**
-     * @return the cached list of ways for this path
+     * @return the list of instructions for this path.
      */
-    public InstructionList calcInstructions()
+    public InstructionList calcInstructions( final Translation tr )
     {
-        if (cachedWays != null)
-            return cachedWays;
-
-        cachedWays = new InstructionList(edgeIds.size() / 4);
+        cachedWays = new InstructionList(edgeIds.size() / 4, tr);
         if (edgeIds.isEmpty())
             return cachedWays;
 
@@ -375,14 +372,14 @@ public InstructionList calcInstructions()
             private Instruction prevInstruction;
             private PointList points = new PointList(10, nodeAccess.is3D());
             private String name = null;
-            private int pavementType;
-            private int wayType;
+            private InstructionAnnotation annotation;
 
             @Override
             public void next( EdgeIteratorState edge, int index )
             {
                 // baseNode is the current node and adjNode is the next
                 int adjNode = edge.getAdjNode();
+                long flags = edge.getFlags();
                 double adjLat = nodeAccess.getLatitude(adjNode);
                 double adjLon = nodeAccess.getLongitude(adjNode);
                 double latitude, longitude;
@@ -407,25 +404,21 @@ public void next( EdgeIteratorState edge, int index )
                 {
                     // very first instruction
                     name = edge.getName();
-                    pavementType = encoder.getPavementType(edge.getFlags());
-                    wayType = encoder.getWayType(edge.getFlags());
-                    prevInstruction = new Instruction(Instruction.CONTINUE_ON_STREET, name, wayType, pavementType, points);
+                    annotation = encoder.getAnnotation(flags, tr);
+                    prevInstruction = new Instruction(Instruction.CONTINUE_ON_STREET, name, annotation, points);
                     updatePointsAndInstruction(edge, wayGeo);
                     cachedWays.add(prevInstruction);
                 } else
                 {
                     double tmpOrientation = ac.alignOrientation(prevOrientation, orientation);
                     String tmpName = edge.getName();
-                    int tmpPavement = encoder.getPavementType(edge.getFlags());
-                    int tmpWayType = encoder.getWayType(edge.getFlags());
+                    InstructionAnnotation tmpAnnotation = encoder.getAnnotation(flags, tr);
                     if ((!name.equals(tmpName))
-                            || (pavementType != tmpPavement)
-                            || (wayType != tmpWayType))
+                            || (!annotation.equals(tmpAnnotation)))
                     {
                         points = new PointList(10, nodeAccess.is3D());
                         name = tmpName;
-                        pavementType = tmpPavement;
-                        wayType = tmpWayType;
+                        annotation = tmpAnnotation;
                         double delta = Math.abs(tmpOrientation - prevOrientation);
                         int sign;
                         if (delta < 0.2)
@@ -458,7 +451,7 @@ public void next( EdgeIteratorState edge, int index )
 
                         }
 
-                        prevInstruction = new Instruction(sign, name, wayType, pavementType, points);
+                        prevInstruction = new Instruction(sign, name, annotation, points);
                         cachedWays.add(prevInstruction);
                     }
 
diff --git a/core/src/main/java/com/graphhopper/routing/QueryGraph.java b/core/src/main/java/com/graphhopper/routing/QueryGraph.java
index 57b0f12d48..e9eab955b4 100644
--- a/core/src/main/java/com/graphhopper/routing/QueryGraph.java
+++ b/core/src/main/java/com/graphhopper/routing/QueryGraph.java
@@ -360,7 +360,7 @@ public EdgeIteratorState getEdgeProps( int origEdgeId, int adjNode )
 
         int edgeId = origEdgeId - mainEdges;
         EdgeIteratorState eis = virtualEdges.get(edgeId);
-        if (eis.getAdjNode() == adjNode)
+        if (eis.getAdjNode() == adjNode || adjNode == Integer.MIN_VALUE)
             return eis;
 
         // find reverse edge via convention. see virtualEdges comment above
diff --git a/core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java
index 947cce1ed0..c07e036d2c 100644
--- a/core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java
@@ -70,7 +70,7 @@
 
     /* restriction definitions */
     protected String[] restrictions;
-    protected HashSet<String> intended = new HashSet<String>();
+    protected HashSet<String> intendedValues = new HashSet<String>();
     protected HashSet<String> restrictedValues = new HashSet<String>(5);
     protected HashSet<String> ferries = new HashSet<String>(5);
     protected HashSet<String> oneways = new HashSet<String>(5);
@@ -94,6 +94,7 @@ public AbstractFlagEncoder( int speedBits, double speedFactor )
 
         acceptedRailways.add("tram");
         acceptedRailways.add("abandoned");
+        acceptedRailways.add("disused");
     }
 
     /**
@@ -196,12 +197,12 @@ public long handleNodeTags( OSMNode node )
     {
         // movable barriers block if they are not marked as passable
         if (node.hasTag("barrier", potentialBarriers)
-                && !node.hasTag(restrictions, intended)
+                && !node.hasTag(restrictions, intendedValues)
                 && !node.hasTag("locked", "no"))
             return directionBitMask;
 
         if ((node.hasTag("highway", "ford")
-                || node.hasTag("ford")) && !node.hasTag(restrictions, intended))
+                || node.hasTag("ford")) && !node.hasTag(restrictions, intendedValues))
             return directionBitMask;
 
         return 0;
@@ -228,15 +229,9 @@ public boolean isBackward( long flags )
     }
 
     @Override
-    public int getPavementType( long flags )
+    public InstructionAnnotation getAnnotation( long flags, Translation tr )
     {
-        return 0;
-    }
-
-    @Override
-    public int getWayType( long flags )
-    {
-        return 0;
+        return InstructionAnnotation.EMPTY;
     }
 
     /**
@@ -313,21 +308,21 @@ public double getMaxSpeed()
         return speedEncoder.getMaxValue();
     }
 
-    protected double reduceToMaxSpeed( double speed, OSMWay way )
+    /**
+     * @return -1 if no maxspeed found
+     */
+    protected double getMaxSpeed( OSMWay way )
     {
-        double maxspeed = parseSpeed(way.getTag("maxspeed"));
-        // apply speed limit no matter of the road type
-        if (maxspeed >= 0)
-            // reduce speed limit to reflect average speed
-            speed = maxspeed * 0.9;
+        double maxSpeed = parseSpeed(way.getTag("maxspeed"));
+        double fwdSpeed = parseSpeed(way.getTag("maxspeed:forward"));
+        if (fwdSpeed >= 0 && (maxSpeed < 0 || fwdSpeed < maxSpeed))
+            maxSpeed = fwdSpeed;
 
-        double maxSpeed = parseSpeed(way.getTag("maxspeed:forward"));
         double backSpeed = parseSpeed(way.getTag("maxspeed:backward"));
-        if (maxSpeed >= 0)
-            speed = maxSpeed * 0.9;
-        if (backSpeed >= 0 && speed > backSpeed * 0.9)
-            speed = backSpeed * 0.9;
-        return speed;
+        if (backSpeed >= 0 && (maxSpeed < 0 || backSpeed < maxSpeed))
+            maxSpeed = backSpeed;
+
+        return maxSpeed;
     }
 
     @Override
diff --git a/core/src/main/java/com/graphhopper/routing/util/Bike2WeightFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/Bike2WeightFlagEncoder.java
index 20b6dd7809..7bf4db95f9 100644
--- a/core/src/main/java/com/graphhopper/routing/util/Bike2WeightFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/Bike2WeightFlagEncoder.java
@@ -130,7 +130,9 @@ public void applyWayTags( OSMWay way, EdgeIteratorState edge )
 
         long flags = edge.getFlags();
 
-        // TODO increase speed due to decline only if surface is okay
+        // Decrease the speed for ele increase (incline), and decrease the speed for ele decrease (decline). The speed-decrease 
+        // has to be bigger (compared to the speed-increase) for the same elevation difference to simulate loosing energy and avoiding hills.
+        // For the reverse speed this has to be the opposite but again keeping in mind that up+down difference.
         if (way.hasTag("highway", "steps"))
         {
             double speed = getHighwaySpeed("steps");
@@ -139,55 +141,72 @@ public void applyWayTags( OSMWay way, EdgeIteratorState edge )
         {
             double incEleSum = 0, incDist2DSum = 0;
             double decEleSum = 0, decDist2DSum = 0;
-            double prevLat = pl.getLatitude(0), prevLon = pl.getLongitude(0), prevEle = pl.getElevation(0);
+            // double prevLat = pl.getLatitude(0), prevLon = pl.getLongitude(0);
+            double prevEle = pl.getElevation(0);
             double fullDist2D = 0;
-            for (int i = 1; i < pl.size(); i++)
+
+            fullDist2D = edge.getDistance();
+            double eleDelta = pl.getElevation(pl.size() - 1) - prevEle;
+            if (eleDelta > 0.1)
+            {
+                incEleSum = eleDelta;
+                incDist2DSum = fullDist2D;
+            } else if (eleDelta < -0.1)
             {
-                double lat = pl.getLatitude(i);
-                double lon = pl.getLongitude(i);
-                double ele = pl.getElevation(i);
-                double eleDelta = ele - prevEle;
-                double dist2D = distCalc.calcDist(prevLat, prevLon, lat, lon);
-                if (eleDelta > 0)
-                {
-                    incEleSum += eleDelta;
-                    incDist2DSum += dist2D;
-                } else
-                {
-                    decEleSum += -eleDelta;
-                    decDist2DSum += dist2D;
-                }
-                fullDist2D += dist2D;
-                prevLat = lat;
-                prevLon = lon;
+                decEleSum = -eleDelta;
+                decDist2DSum = fullDist2D;
             }
 
-            // Calculate slop via tan(asin(height/distance)) but for rather smallish angles tan a=a and sin a=a.
+//            // get a more detailed elevation information, but due to bad SRTM data this does not make sense now.
+//            for (int i = 1; i < pl.size(); i++)
+//            {
+//                double lat = pl.getLatitude(i);
+//                double lon = pl.getLongitude(i);
+//                double ele = pl.getElevation(i);
+//                double eleDelta = ele - prevEle;
+//                double dist2D = distCalc.calcDist(prevLat, prevLon, lat, lon);
+//                if (eleDelta > 0.1)
+//                {
+//                    incEleSum += eleDelta;
+//                    incDist2DSum += dist2D;
+//                } else if (eleDelta < -0.1)
+//                {
+//                    decEleSum += -eleDelta;
+//                    decDist2DSum += dist2D;
+//                }
+//                fullDist2D += dist2D;
+//                prevLat = lat;
+//                prevLon = lon;
+//                prevEle = ele;
+//            }
+            // Calculate slop via tan(asin(height/distance)) but for rather smallish angles where we can assume tan a=a and sin a=a.
             // Then calculate a factor which decreases or increases the speed.
             // Do this via a simple quadratic equation where y(0)=1 and y(0.3)=1/4 for incline and y(0.3)=2 for decline        
-            double fwdInc = incDist2DSum > 1 ? incEleSum / incDist2DSum : 0;
-            double fwdDec = decDist2DSum > 1 ? decEleSum / decDist2DSum : 0;
+            double fwdIncline = incDist2DSum > 1 ? incEleSum / incDist2DSum : 0;
+            double fwdDecline = decDist2DSum > 1 ? decEleSum / decDist2DSum : 0;
             double restDist2D = fullDist2D - incDist2DSum - decDist2DSum;
             double maxSpeed = getHighwaySpeed("cycleway");
             if (isForward(flags))
             {
+                // use weighted mean so that longer incline infuences speed more than shorter
                 double speed = getSpeed(flags);
-                // for decline use a maximum factor between 1 and 2
-                double fwdFaster = keepIn(11.1 * fwdDec * fwdDec + 1, 1, 2);
-                // for ascending use a minimum factor of 1/4 and 1
-                double fwdSlower = keepIn(-8.3 * fwdInc * fwdInc + 1, .25, 1);
-                // use weighted mean so that longer incline infuences speed more            
+                double fwdFaster = 1 + 2 * keepIn(fwdDecline, 0, 0.2);
+                fwdFaster = fwdFaster * fwdFaster;
+                double fwdSlower = 1 - 5 * keepIn(fwdIncline, 0, 0.2);
+                fwdSlower = fwdSlower * fwdSlower;
                 speed = speed * (fwdSlower * incDist2DSum + fwdFaster * decDist2DSum + 1 * restDist2D) / fullDist2D;
-                flags = this.setSpeed(flags, keepIn(speed, PUSHING_SECTION_SPEED, maxSpeed));
+                flags = this.setSpeed(flags, keepIn(speed, PUSHING_SECTION_SPEED / 2, maxSpeed));
             }
 
             if (isBackward(flags))
             {
                 double speedReverse = getReverseSpeed(flags);
-                double bwFaster = keepIn(11.1 * fwdInc * fwdInc + 1, 1, 2);
-                double bwSlower = keepIn(-8.3 * fwdDec * fwdDec + 1, 1 / 4, 1);
+                double bwFaster = 1 + 2 * keepIn(fwdIncline, 0, 0.2);
+                bwFaster = bwFaster * bwFaster;
+                double bwSlower = 1 - 5 * keepIn(fwdDecline, 0, 0.2);
+                bwSlower = bwSlower * bwSlower;
                 speedReverse = speedReverse * (bwFaster * incDist2DSum + bwSlower * decDist2DSum + 1 * restDist2D) / fullDist2D;
-                flags = this.setReverseSpeed(flags, keepIn(speedReverse, PUSHING_SECTION_SPEED, maxSpeed));
+                flags = this.setReverseSpeed(flags, keepIn(speedReverse, PUSHING_SECTION_SPEED / 2, maxSpeed));
             }
         }
         edge.setFlags(flags);
diff --git a/core/src/main/java/com/graphhopper/routing/util/BikeFlagCommonEncoder.java b/core/src/main/java/com/graphhopper/routing/util/BikeCommonFlagEncoder.java
similarity index 51%
rename from core/src/main/java/com/graphhopper/routing/util/BikeFlagCommonEncoder.java
rename to core/src/main/java/com/graphhopper/routing/util/BikeCommonFlagEncoder.java
index 070d1c1377..5da0f09642 100644
--- a/core/src/main/java/com/graphhopper/routing/util/BikeFlagCommonEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/BikeCommonFlagEncoder.java
@@ -20,12 +20,12 @@
 import com.graphhopper.reader.OSMNode;
 import com.graphhopper.reader.OSMWay;
 import com.graphhopper.reader.OSMRelation;
+import static com.graphhopper.routing.util.BikeCommonFlagEncoder.PriorityCode.*;
 import com.graphhopper.util.Helper;
+import com.graphhopper.util.InstructionAnnotation;
+import com.graphhopper.util.Translation;
 
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.Map;
-import java.util.Set;
+import java.util.*;
 
 /**
  * Defines bit layout of bicycles (not motorbikes) for speed, access and relations (network).
@@ -34,34 +34,35 @@
  * @author Nop
  * @author ratrun
  */
-public class BikeFlagCommonEncoder extends AbstractFlagEncoder
+public class BikeCommonFlagEncoder extends AbstractFlagEncoder
 {
-    protected static final int DEFAULT_REL_CODE = 4;
     protected static final int PUSHING_SECTION_SPEED = 4;
-    // private int safeWayBit = 0;
     private int unpavedBit = 0;
     // Pushing section heighways are parts where you need to get off your bike and push it (German: Schiebestrecke)
-    private final HashSet<String> pushingSections = new HashSet<String>();
+    protected final HashSet<String> pushingSections = new HashSet<String>();
     protected final HashSet<String> oppositeLanes = new HashSet<String>();
-    private final Set<String> unpavedSurfaceTags = new HashSet<String>();
+    protected final Set<String> preferHighwayTags = new HashSet<String>();
+    protected final Set<String> avoidHighwayTags = new HashSet<String>();
+    protected final Set<String> unpavedSurfaceTags = new HashSet<String>();
     private final Map<String, Integer> trackTypeSpeed = new HashMap<String, Integer>();
     private final Map<String, Integer> surfaceSpeed = new HashMap<String, Integer>();
     private final Set<String> roadValues = new HashSet<String>();
     private final Map<String, Integer> highwaySpeed = new HashMap<String, Integer>();
     //Convert network tag of bicycle routes into a way route code stored in the wayMAP
     private final Map<String, Integer> bikeNetworkToCode = new HashMap<String, Integer>();
-    protected EncodedValue relationCodeEncoder;
+    EncodedValue relationCodeEncoder;
     private EncodedValue wayTypeEncoder;
+    private EncodedValue preferWayEncoder;
 
     /**
      * Should be only instantied via EncodingManager
      */
-    protected BikeFlagCommonEncoder()
+    protected BikeCommonFlagEncoder()
     {
         this(4, 2);
     }
 
-    protected BikeFlagCommonEncoder( int speedBits, double speedFactor )
+    protected BikeCommonFlagEncoder( int speedBits, double speedFactor )
     {
         super(speedBits, speedFactor);
         // strict set, usually vehicle and agricultural/forestry are ignored by cyclists
@@ -73,10 +74,10 @@ protected BikeFlagCommonEncoder( int speedBits, double speedFactor )
         restrictedValues.add("no");
         restrictedValues.add("restricted");
 
-        intended.add("yes");
-        intended.add("designated");
-        intended.add("official");
-        intended.add("permissive");
+        intendedValues.add("yes");
+        intendedValues.add("designated");
+        intendedValues.add("official");
+        intendedValues.add("permissive");
 
         oppositeLanes.add("opposite");
         oppositeLanes.add("opposite_lane");
@@ -91,8 +92,6 @@ protected BikeFlagCommonEncoder( int speedBits, double speedFactor )
         absoluteBarriers.add("kissing_gate");
         absoluteBarriers.add("stile");
         absoluteBarriers.add("turnstile");
-        // very dangerous
-        // acceptedRailways.remove("tram");
 
         unpavedSurfaceTags.add("unpaved");
         unpavedSurfaceTags.add("gravel");
@@ -123,7 +122,76 @@ protected BikeFlagCommonEncoder( int speedBits, double speedFactor )
         roadValues.add("tertiary");
         roadValues.add("tertiary_link");
 
-        setCyclingNetworkPreference("deprecated", RelationMapCode.AVOID_AT_ALL_COSTS.getValue());
+        setTrackTypeSpeed("grade1", 18); // paved
+        setTrackTypeSpeed("grade2", 12); // now unpaved ...
+        setTrackTypeSpeed("grade3", 8);
+        setTrackTypeSpeed("grade4", 6);
+        setTrackTypeSpeed("grade5", 4); // like sand/grass     
+
+        setSurfaceSpeed("paved", 18);
+        setSurfaceSpeed("asphalt", 18);
+        setSurfaceSpeed("cobblestone", 8);
+        setSurfaceSpeed("cobblestone:flattened", 10);
+        setSurfaceSpeed("sett", 10);
+        setSurfaceSpeed("concrete", 18);
+        setSurfaceSpeed("concrete:lanes", 16);
+        setSurfaceSpeed("concrete:plates", 16);
+        setSurfaceSpeed("paving_stones", 12);
+        setSurfaceSpeed("paving_stones:30", 12);
+        setSurfaceSpeed("unpaved", 14);
+        setSurfaceSpeed("compacted", 16);
+        setSurfaceSpeed("dirt", 10);
+        setSurfaceSpeed("earth", 12);
+        setSurfaceSpeed("fine_gravel", 18);
+        setSurfaceSpeed("grass", 8);
+        setSurfaceSpeed("grass_paver", 8);
+        setSurfaceSpeed("gravel", 12);
+        setSurfaceSpeed("ground", 12);
+        setSurfaceSpeed("ice", PUSHING_SECTION_SPEED / 2);
+        setSurfaceSpeed("metal", 10);
+        setSurfaceSpeed("mud", 10);
+        setSurfaceSpeed("pebblestone", 16);
+        setSurfaceSpeed("salt", 6);
+        setSurfaceSpeed("sand", 6);
+        setSurfaceSpeed("wood", 6);
+
+        setHighwaySpeed("living_street", 6);
+        setHighwaySpeed("steps", PUSHING_SECTION_SPEED / 2);
+
+        setHighwaySpeed("cycleway", 18);
+        setHighwaySpeed("path", 18);
+        setHighwaySpeed("footway", 6);
+        setHighwaySpeed("pedestrian", 6);
+        setHighwaySpeed("track", 12);
+        setHighwaySpeed("service", 14);
+        setHighwaySpeed("residential", 18);
+        // no other highway applies:
+        setHighwaySpeed("unclassified", 16);
+        // unknown road:
+        setHighwaySpeed("road", 12);
+
+        setHighwaySpeed("trunk", 18);
+        setHighwaySpeed("trunk_link", 18);
+        setHighwaySpeed("primary", 18);
+        setHighwaySpeed("primary_link", 18);
+        setHighwaySpeed("secondary", 18);
+        setHighwaySpeed("secondary_link", 18);
+        setHighwaySpeed("tertiary", 18);
+        setHighwaySpeed("tertiary_link", 18);
+
+        // special case see tests and #191
+        setHighwaySpeed("motorway", 18);
+        setHighwaySpeed("motorway_link", 18);
+        avoidHighwayTags.add("motorway");
+        avoidHighwayTags.add("motorway_link");
+
+        setCyclingNetworkPreference("icn", PriorityCode.BEST.getValue());
+        setCyclingNetworkPreference("ncn", PriorityCode.BEST.getValue());
+        setCyclingNetworkPreference("rcn", PriorityCode.VERY_NICE.getValue());
+        setCyclingNetworkPreference("lcn", PriorityCode.PREFER.getValue());
+        setCyclingNetworkPreference("mtb", PriorityCode.UNCHANGED.getValue());
+
+        setCyclingNetworkPreference("deprecated", PriorityCode.AVOID_AT_ALL_COSTS.getValue());
     }
 
     @Override
@@ -132,20 +200,24 @@ public int defineWayBits( int index, int shift )
         // first two bits are reserved for route handling in superclass
         shift = super.defineWayBits(index, shift);
         speedEncoder = new EncodedDoubleValue("Speed", shift, speedBits, speedFactor, highwaySpeed.get("cycleway"), 30);
-        shift += speedBits;
+        shift += speedEncoder.getBits();
 
-        //safeWayBit = 1 << shift++;
         unpavedBit = 1 << shift++;
         // 2 bits
-        wayTypeEncoder = new EncodedValue("WayType", shift, 2, 1, 0, 3);
-        return shift + 2;
+        wayTypeEncoder = new EncodedValue("WayType", shift, 2, 1, 0, 3, true);
+        shift += wayTypeEncoder.getBits();
+
+        preferWayEncoder = new EncodedValue("PreferWay", shift, 3, 1, 0, 7);
+        shift += preferWayEncoder.getBits();
+
+        return shift;
     }
 
     @Override
     public int defineRelationBits( int index, int shift )
     {
         relationCodeEncoder = new EncodedValue("RelationCode", shift, 3, 1, 0, 7);
-        return shift + 3;
+        return shift + relationCodeEncoder.getBits();
     }
 
     @Override
@@ -168,9 +240,13 @@ public long acceptWay( OSMWay way )
             return 0;
 
         // use the way if it is tagged for bikes
-        if (way.hasTag("bicycle", intended))
+        if (way.hasTag("bicycle", intendedValues))
             return acceptBit;
 
+        // accept only if explicitely tagged for bike usage
+        if ("motorway".equals(highwayValue) || "motorway_link".equals(highwayValue))
+            return 0;
+
         if (way.hasTag("motorroad", "yes"))
             return 0;
 
@@ -192,60 +268,43 @@ public long acceptWay( OSMWay way )
     @Override
     public long handleRelationTags( OSMRelation relation, long oldRelationFlags )
     {
-        int code = RelationMapCode.UNCHANGED.getValue();
+        int code = 0;
         if (relation.hasTag("route", "bicycle"))
         {
             Integer val = bikeNetworkToCode.get(relation.getTag("network"));
             if (val != null)
                 code = val;
+        } else if (relation.hasTag("route", "ferry"))
+        {
+            code = PriorityCode.AVOID_IF_POSSIBLE.getValue();
         }
+
         int oldCode = (int) relationCodeEncoder.getValue(oldRelationFlags);
         if (oldCode < code)
             return relationCodeEncoder.setValue(0, code);
         return oldRelationFlags;
     }
 
-    // In case that the way belongs to a relation for which we do have a relation triggered weight change.    
-    // FIXME: Re-write in case that there is a more generic way to influence the weighting (issue #124).
-    // Here we boost or reduce the speed according to the relationWeightCode:
-    int relationWeightCodeToSpeed( int highwaySpeed, int relationCode )
-    {
-        int speed;
-        if (highwaySpeed < 15)
-            // We know that our way belongs to a cycle route, so we are optimistic and assume 15km/h minimum,
-            // irrespective of the tracktype and surface
-            speed = 15;
-        else
-            speed = highwaySpeed;
-        // Add or remove 4km/h per every relation weight boost point
-        return speed + 4 * (relationCode - DEFAULT_REL_CODE);
-    }
-
     @Override
     public long handleWayTags( OSMWay way, long allowed, long relationFlags )
     {
         if ((allowed & acceptBit) == 0)
             return 0;
 
-        long encoded;
+        long encoded = 0;
         if ((allowed & ferryBit) == 0)
         {
-            // set speed
-            // FIXME Rewrite necessary after decision #124 for other weighting than speed!
-            // Currently there is only speed, so we increase it.
-            double speed;
-            if (relationFlags == 0)
-            {
-                // In case that the way does not belong to a relation
-                speed = getSpeed(way);
-            } else
-            {
-                speed = relationWeightCodeToSpeed(getSpeed(way), (int) relationCodeEncoder.getValue(relationFlags));
-            }
+            double speed = getSpeed(way);
+            int priorityFromRelation = 0;
+            if (relationFlags != 0)
+                priorityFromRelation = (int) relationCodeEncoder.getValue(relationFlags);
 
-            speed = reduceToMaxSpeed(speed, way);
-            encoded = handleSpeed(way, speed, 0);
-            encoded = handleBikeRelated(way, encoded);
+            encoded = preferWayEncoder.setValue(encoded, handlePriority(way, priorityFromRelation));
+
+            // bike maxspeed handling is different from car as we don't increase speed
+            speed = reduceToMaxSpeed(way, speed);
+            encoded = handleSpeed(way, speed, encoded);
+            encoded = handleBikeRelated(way, encoded, relationFlags > UNCHANGED.getValue());
 
         } else
         {
@@ -258,6 +317,18 @@ public long handleWayTags( OSMWay way, long allowed, long relationFlags )
         return encoded;
     }
 
+    protected double reduceToMaxSpeed( OSMWay way, double speed )
+    {
+        double maxSpeed = getMaxSpeed(way);
+        // apply only if smaller maxSpeed
+        if (maxSpeed >= 0)
+        {
+            if (maxSpeed < speed)
+                return maxSpeed * 0.9;
+        }
+        return speed;
+    }
+
     @Override
     public long handleNodeTags( OSMNode node )
     {
@@ -271,7 +342,6 @@ public long handleNodeTags( OSMNode node )
     int getSpeed( OSMWay way )
     {
         int speed = PUSHING_SECTION_SPEED;
-
         String s = way.getTag("surface");
         if (!Helper.isEmpty(s))
         {
@@ -306,7 +376,7 @@ int getSpeed( OSMWay way )
         // Until now we assumed that the way is no pusing section
         // Now we check, but only in case that our speed is bigger compared to the PUSHING_SECTION_SPEED
         if ((speed > PUSHING_SECTION_SPEED)
-                && (!way.hasTag("bicycle", intended) && way.hasTag("highway", pushingSections)))
+                && (!way.hasTag("bicycle", intendedValues) && way.hasTag("highway", pushingSections)))
         {
             if (way.hasTag("highway", "steps"))
                 speed = PUSHING_SECTION_SPEED / 2;
@@ -318,58 +388,166 @@ int getSpeed( OSMWay way )
     }
 
     @Override
-    public int getPavementType( long flags )
+    public InstructionAnnotation getAnnotation( long flags, Translation tr )
     {
+        int paveType = 0; // paved
         if ((flags & unpavedBit) != 0)
-            return 1; // unpaved
-        else
-            return 0; // paved
+            paveType = 1; // unpaved        
+
+        int wayType = (int) wayTypeEncoder.getValue(flags);
+        String wayName = getWayName(paveType, wayType, tr);
+        return new InstructionAnnotation(0, wayName);
     }
 
-    @Override
-    public int getWayType( long flags )
+    String getWayName( int pavementType, int wayType, Translation tr )
+    {
+        String pavementName = "";
+        if (pavementType == 1)
+            pavementName = tr.tr("unpaved");
+
+        String wayTypeName = "";
+        switch (wayType)
+        {
+            case 0:
+                wayTypeName = tr.tr("road");
+                break;
+            case 1:
+                wayTypeName = tr.tr("off_bike");
+                break;
+            case 2:
+                wayTypeName = tr.tr("cycleway");
+                break;
+            case 3:
+                wayTypeName = tr.tr("way");
+                break;
+        }
+
+        if (pavementName.isEmpty())
+        {
+            if (wayType == 0 || wayType == 3)
+                return "";
+            return wayTypeName;
+        } else
+        {
+            if (wayTypeName.isEmpty())
+                return pavementName;
+            else
+                return wayTypeName + ", " + pavementName;
+        }
+    }
+
+    /**
+     * Returns a double value in [0, 1] to identify ways as good or bad regarding safety or other
+     * preferences.
+     */
+    public double getPriority( long flags )
     {
-        return (int) wayTypeEncoder.getValue(flags);
+        double prio = preferWayEncoder.getValue(flags);
+        if (prio == 0)
+            return (double) UNCHANGED.getValue() / BEST.getValue();
+
+        return prio / BEST.getValue();
     }
 
-    protected long handleBikeRelated( OSMWay way, long encoded )
+    /**
+     * In this method we prefer cycleways or roads with designated bike access and avoid big roads
+     * or roads with trams or pedestrian.
+     * <p>
+     * @return new priority based on priorityFromRelation and on the tags in OSMWay.
+     */
+    protected int handlePriority( OSMWay way, int priorityFromRelation )
     {
+        TreeMap<Double, Integer> weightToPrioMap = new TreeMap<Double, Integer>();
+        if (priorityFromRelation == 0)
+            weightToPrioMap.put(0d, UNCHANGED.getValue());
+        else
+            weightToPrioMap.put(110d, priorityFromRelation);
+
+        collect(way, weightToPrioMap);
+
+        // pick priority with biggest order value
+        return weightToPrioMap.lastEntry().getValue();
+    }
+
+    /**
+     * @param weightToPrioMap associate a weight with every priority. This sorted map allows
+     * subclasses to 'insert' more important priorities as well as overwrite determined priorities.
+     */
+    void collect( OSMWay way, TreeMap<Double, Integer> weightToPrioMap )
+    {
+        String service = way.getTag("service");
         String highway = way.getTag("highway");
+        if (way.hasTag("bicycle", "designated"))
+            weightToPrioMap.put(100d, PREFER.getValue());
+        if ("cycleway".equals(highway))
+            weightToPrioMap.put(100d, VERY_NICE.getValue());
 
-        /*            
-         // mark safe ways or ways with cycle lanes
-         if (SAFE_HIGHWAY_TAGS.contains(highway) || way.hasTag("cycleway"))
-         {
-         encoded |= safeWayBit;
-         }
-         */
-        // mark unpaved bit
+        if (preferHighwayTags.contains(highway))
+        {
+            weightToPrioMap.put(40d, PREFER.getValue());
+            if (way.hasTag("tunnel", intendedValues))
+                weightToPrioMap.put(40d, UNCHANGED.getValue());
+        }
+
+        if (pushingSections.contains(highway) || "parking_aisle".equals(service))
+            weightToPrioMap.put(50d, AVOID_IF_POSSIBLE.getValue());
+
+        double maxSpeed = getMaxSpeed(way);
+        if (avoidHighwayTags.contains(highway) || maxSpeed > 80)
+        {
+            weightToPrioMap.put(50d, REACH_DEST.getValue());
+            if (way.hasTag("tunnel", intendedValues))
+                weightToPrioMap.put(50d, AVOID_AT_ALL_COSTS.getValue());
+        }
+
+        if (way.hasTag("railway", "tram"))
+            weightToPrioMap.put(50d, AVOID_AT_ALL_COSTS.getValue());
+    }
+
+    /**
+     * Handle surface and wayType encoding
+     */
+    long handleBikeRelated( OSMWay way, long encoded, boolean partOfCycleRelation )
+    {
         String surfaceTag = way.getTag("surface");
+        String highway = way.getTag("highway");
         String trackType = way.getTag("tracktype");
-        if ("track".equals(highway) && trackType == null
-                || ("track".equals(highway) && !"grade1".equals(trackType))
-                || (surfaceTag == null && way.hasTag("highway", "path"))
+
+        // Populate bits at wayTypeMask with wayType            
+        WayType wayType = WayType.OTHER_SMALL_WAY;
+        boolean isPusingSection = isPushingSection(way);
+        if (isPusingSection && !partOfCycleRelation || "steps".equals(highway))
+            wayType = WayType.PUSHING_SECTION;
+
+        if ("track".equals(highway) && (trackType == null || !"grade1".equals(trackType))
+                || "path".equals(highway) && surfaceTag == null
                 || unpavedSurfaceTags.contains(surfaceTag))
         {
             encoded |= unpavedBit;
         }
 
-        // Populate bits at wayTypeMask with wayType            
-        WayType ourWayType = WayType.OTHER_SMALL_WAY;
-        if (way.hasTag("highway", pushingSections))
-            ourWayType = WayType.PUSHING_SECTION;
-        if ((way.hasTag("bicycle", intended) && way.hasTag("highway", pushingSections))
-                || ("cycleway".equals(way.getTag("highway"))))
-            ourWayType = WayType.CYCLEWAY;
-        if (way.hasTag("highway", roadValues))
-            ourWayType = WayType.ROAD;
-
-        return wayTypeEncoder.setValue(encoded, ourWayType.getValue());
+        if (way.hasTag("bicycle", intendedValues))
+        {
+            if (isPusingSection && !way.hasTag("bicycle", "designated"))
+                wayType = WayType.OTHER_SMALL_WAY;
+            else
+                wayType = WayType.CYCLEWAY;
+        } else if ("cycleway".equals(highway))
+            wayType = WayType.CYCLEWAY;
+        else if (roadValues.contains(highway))
+            wayType = WayType.ROAD;
+
+        return wayTypeEncoder.setValue(encoded, wayType.getValue());
+    }
+
+    boolean isPushingSection( OSMWay way )
+    {
+        return way.hasTag("highway", pushingSections);
     }
 
     protected long handleSpeed( OSMWay way, double speed, long encoded )
     {
-        encoded = setSpeed(0, speed);
+        encoded = setSpeed(encoded, speed);
 
         // handle oneways
         if ((way.hasTag("oneway", oneways) || way.hasTag("junction", "roundabout"))
@@ -388,7 +566,7 @@ protected long handleSpeed( OSMWay way, double speed, long encoded )
         return encoded;
     }
 
-    public enum RelationMapCode
+    enum PriorityCode
     {
         /* Inspired by http://wiki.openstreetmap.org/wiki/Class:bicycle
          "-3" = Avoid at all cost. 
@@ -400,21 +578,22 @@ protected long handleSpeed( OSMWay way, double speed, long encoded )
          "1" = Prefer 
          "2" = Very Nice way to cycle 
          "3" = This way is so nice, it pays out to make a detour also if this means taking 
-         many unsuitable ways to get here. Outstanding for its intended usage class.
+         many unsuitable ways to get here. Outstanding for its intendedValues usage class.
          */
         //We can't store negative numbers into our map, therefore we add 
         //unspecifiedRelationWeight=4 to the schema from above
+        WORST(0),
         AVOID_AT_ALL_COSTS(1),
         REACH_DEST(2),
         AVOID_IF_POSSIBLE(3),
-        UNCHANGED(DEFAULT_REL_CODE),
+        UNCHANGED(4),
         PREFER(5),
         VERY_NICE(6),
-        OUTSTANDING_NICE(7);
+        BEST(7);
 
         private final int value;
 
-        private RelationMapCode( int value )
+        private PriorityCode( int value )
         {
             this.value = value;
         }
@@ -443,35 +622,34 @@ public int getValue()
         {
             return value;
         }
-
     };
 
-    protected void setTrackTypeSpeed( String tracktype, int speed )
+    protected void setHighwaySpeed( String highway, int speed )
     {
-        trackTypeSpeed.put(tracktype, speed);
+        highwaySpeed.put(highway, speed);
     }
 
-    protected void setSurfaceSpeed( String surface, int speed )
+    protected int getHighwaySpeed( String key )
     {
-        surfaceSpeed.put(surface, speed);
+        return highwaySpeed.get(key);
     }
 
-    protected void setHighwaySpeed( String highway, int speed )
+    void setTrackTypeSpeed( String tracktype, int speed )
     {
-        highwaySpeed.put(highway, speed);
+        trackTypeSpeed.put(tracktype, speed);
     }
 
-    protected int getHighwaySpeed( String key )
+    void setSurfaceSpeed( String surface, int speed )
     {
-        return highwaySpeed.get(key);
+        surfaceSpeed.put(surface, speed);
     }
 
-    protected void setCyclingNetworkPreference( String network, int code )
+    void setCyclingNetworkPreference( String network, int code )
     {
         bikeNetworkToCode.put(network, code);
     }
 
-    protected void setPushingSection( String highway )
+    void addPushingSection( String highway )
     {
         pushingSections.add(highway);
     }
diff --git a/core/src/main/java/com/graphhopper/routing/util/BikeFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/BikeFlagEncoder.java
index d5a1fa75d2..05fd78b42c 100644
--- a/core/src/main/java/com/graphhopper/routing/util/BikeFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/BikeFlagEncoder.java
@@ -17,81 +17,45 @@
  */
 package com.graphhopper.routing.util;
 
+import com.graphhopper.reader.OSMWay;
+
 /**
  * Specifies the settings for cycletouring/trekking
  * <p/>
  * @author ratrun
+ * @author Peter Karich
  */
-public class BikeFlagEncoder extends BikeFlagCommonEncoder
+public class BikeFlagEncoder extends BikeCommonFlagEncoder
 {
     BikeFlagEncoder()
     {
-        setTrackTypeSpeed("grade1", 20); // paved
-        setTrackTypeSpeed("grade2", 12); // now unpaved ...
-        setTrackTypeSpeed("grade3", 12);
-        setTrackTypeSpeed("grade4", 10);
-        setTrackTypeSpeed("grade5", 8); // like sand/grass     
-
-        setSurfaceSpeed("paved", 20);
-        setSurfaceSpeed("asphalt", 20);
-        setSurfaceSpeed("cobblestone", 10);
-        setSurfaceSpeed("cobblestone:flattened", 10);
-        setSurfaceSpeed("sett", 8);
-        setSurfaceSpeed("concrete", 20);
-        setSurfaceSpeed("concrete:lanes", 16);
-        setSurfaceSpeed("concrete:plates", 16);
-        setSurfaceSpeed("paving_stones", 10);
-        setSurfaceSpeed("paving_stones:30", 10);
-        setSurfaceSpeed("unpaved", 16);
-        setSurfaceSpeed("compacted", 18);
-        setSurfaceSpeed("dirt", 10);
-        setSurfaceSpeed("earth", 10);
-        setSurfaceSpeed("fine_gravel", 18);
-        setSurfaceSpeed("grass", 8);
-        setSurfaceSpeed("grass_paver", 8);
-        setSurfaceSpeed("gravel", 12);
-        setSurfaceSpeed("ground", 12);
-        setSurfaceSpeed("ice", PUSHING_SECTION_SPEED / 2);
-        setSurfaceSpeed("metal", 10);
-        setSurfaceSpeed("mud", 10);
-        setSurfaceSpeed("pebblestone", 16);
-        setSurfaceSpeed("salt", 6);
-        setSurfaceSpeed("sand", 8);
-        setSurfaceSpeed("wood", 10);
-
-        setHighwaySpeed("living_street", 15);
-        setHighwaySpeed("steps", PUSHING_SECTION_SPEED / 2);
-
-        setHighwaySpeed("cycleway", 18);
-        setHighwaySpeed("path", 18);
-        setHighwaySpeed("footway", 18);
-        setHighwaySpeed("pedestrian", 16);
-        setHighwaySpeed("road", 10);
-        setHighwaySpeed("track", 20);
-        setHighwaySpeed("service", 20);
-        setHighwaySpeed("unclassified", 20);
-        setHighwaySpeed("residential", 20);
+        addPushingSection("path");
+        addPushingSection("footway");
+        addPushingSection("pedestrian");
+        addPushingSection("steps");
 
-        setHighwaySpeed("trunk", 18);
-        setHighwaySpeed("trunk_link", 18);
-        setHighwaySpeed("primary", 18);
-        setHighwaySpeed("primary_link", 15);
-        setHighwaySpeed("secondary", 16);
-        setHighwaySpeed("secondary_link", 16);
-        setHighwaySpeed("tertiary", 18);
-        setHighwaySpeed("tertiary_link", 18);
+        avoidHighwayTags.add("trunk");
+        avoidHighwayTags.add("trunk_link");
+        avoidHighwayTags.add("primary");
+        avoidHighwayTags.add("primary_link");
+        avoidHighwayTags.add("secondary");
+        avoidHighwayTags.add("secondary_link");
 
-        setPushingSection("path");
-        setPushingSection("track");
-        setPushingSection("footway");
-        setPushingSection("pedestrian");
-        setPushingSection("steps");
+        // preferHighwayTags.add("road");
+        preferHighwayTags.add("service");
+        preferHighwayTags.add("tertiary");
+        preferHighwayTags.add("tertiary_link");
+        preferHighwayTags.add("residential");
+        preferHighwayTags.add("unclassified");
+    }
 
-        setCyclingNetworkPreference("icn", RelationMapCode.OUTSTANDING_NICE.getValue());
-        setCyclingNetworkPreference("ncn", RelationMapCode.OUTSTANDING_NICE.getValue());
-        setCyclingNetworkPreference("rcn", RelationMapCode.VERY_NICE.getValue());
-        setCyclingNetworkPreference("lcn", RelationMapCode.PREFER.getValue());
-        setCyclingNetworkPreference("mtb", RelationMapCode.UNCHANGED.getValue());
+    @Override
+    boolean isPushingSection( OSMWay way )
+    {
+        String highway = way.getTag("highway");
+        String trackType = way.getTag("tracktype");
+        return way.hasTag("highway", pushingSections)
+                || "track".equals(highway) && trackType != null && !"grade1".equals(trackType);
     }
 
     @Override
diff --git a/core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
index 42c1053236..97bf949409 100644
--- a/core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
@@ -68,9 +68,10 @@ protected CarFlagEncoder( int speedBits, double speedFactor )
         restrictedValues.add("forestry");
         restrictedValues.add("no");
         restrictedValues.add("restricted");
+        restrictedValues.add("delivery");
 
-        intended.add("yes");
-        intended.add("permissive");
+        intendedValues.add("yes");
+        intendedValues.add("permissive");
 
         potentialBarriers.add("gate");
         potentialBarriers.add("lift_gate");
@@ -175,6 +176,13 @@ public long acceptWay( OSMWay way )
             return 0;
         }
 
+        if ("track".equals(highwayValue))
+        {
+            String tt = way.getTag("tracktype");
+            if (tt != null && !tt.equals("grade1"))
+                return 0;
+        }
+
         if (!defaultSpeedMap.containsKey(highwayValue))
             return 0;
 
@@ -182,11 +190,12 @@ public long acceptWay( OSMWay way )
             return 0;
 
         // do not drive street cars into fords
-        if ((way.hasTag("highway", "ford") || way.hasTag("ford")) && !way.hasTag(restrictions, intended))
+        boolean carsAllowed = way.hasTag(restrictions, intendedValues);
+        if (("ford".equals(highwayValue) || way.hasTag("ford")) && !carsAllowed)
             return 0;
 
         // check access restrictions
-        if (way.hasTag(restrictions, restrictedValues))
+        if (way.hasTag(restrictions, restrictedValues) && !carsAllowed)
             return 0;
 
         // do not drive cars over railways (sometimes incorrectly mapped!)
@@ -213,7 +222,10 @@ public long handleWayTags( OSMWay way, long allowed, long relationCode )
         {
             // get assumed speed from highway type
             double speed = getSpeed(way);
-            speed = reduceToMaxSpeed(speed, way);            
+            double maxSpeed = getMaxSpeed(way);
+            if (maxSpeed > 0)
+                // apply maxSpeed which can mean increase or decrease
+                speed = maxSpeed * 0.9;
 
             // limit speed to max 30 km/h if bad surface
             if (speed > 30 && way.hasTag("surface", badSurfaceSpeedMap))
diff --git a/core/src/main/java/com/graphhopper/routing/util/FlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/FlagEncoder.java
index 6057d0bc20..6020955b19 100644
--- a/core/src/main/java/com/graphhopper/routing/util/FlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/FlagEncoder.java
@@ -17,6 +17,9 @@
  */
 package com.graphhopper.routing.util;
 
+import com.graphhopper.util.InstructionAnnotation;
+import com.graphhopper.util.Translation;
+
 /**
  * This class provides methods to define how a value (like speed or direction) converts to a flag
  * (currently an integer value), which is stored in an edge .
@@ -68,17 +71,10 @@
 
     boolean isForward( long flags );
 
-    boolean isBackward( long flags );    
-
-    /**
-     * @return the number to identify a pavement of a road.
-     * @see InstructionList#getWayName
-     */
-    int getPavementType( long flags );
+    boolean isBackward( long flags );
 
     /**
-     * @return the number to identify a pushing section, cycle way etc.
-     * @see InstructionList#getWayName
+     * @return additional cost or warning information for an instruction like ferry or road charges.
      */
-    int getWayType( long flags );
+    InstructionAnnotation getAnnotation( long flags, Translation tr );
 }
diff --git a/core/src/main/java/com/graphhopper/routing/util/FootFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/FootFlagEncoder.java
index f14cff77a5..f0c7af515a 100644
--- a/core/src/main/java/com/graphhopper/routing/util/FootFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/FootFlagEncoder.java
@@ -59,10 +59,10 @@ protected FootFlagEncoder( int speedBits, double speedFactor )
         restrictedValues.add("no");
         restrictedValues.add("restricted");
 
-        intended.add("yes");
-        intended.add("designated");
-        intended.add("official");
-        intended.add("permissive");
+        intendedValues.add("yes");
+        intendedValues.add("designated");
+        intendedValues.add("official");
+        intendedValues.add("permissive");
 
         sidewalks.add("yes");
         sidewalks.add("both");
@@ -182,7 +182,7 @@ public long acceptWay( OSMWay way )
             return acceptBit;
 
         // no need to evaluate ferries or fords - already included here
-        if (way.hasTag("foot", intended))
+        if (way.hasTag("foot", intendedValues))
             return acceptBit;
 
         if (!allowedHighwayTags.contains(highwayValue))
@@ -252,16 +252,4 @@ public long handleWayTags( OSMWay way, long allowed, long relationCode )
 
         return encoded;
     }
-
-    @Override
-    public int getPavementType( long flags )
-    {
-        return 0;
-    }
-
-    @Override
-    public int getWayType( long flags )
-    {
-        return 0;
-    }
 }
diff --git a/core/src/main/java/com/graphhopper/routing/util/MountainBikeFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/MountainBikeFlagEncoder.java
index ea8abfb323..6096a42e80 100644
--- a/core/src/main/java/com/graphhopper/routing/util/MountainBikeFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/MountainBikeFlagEncoder.java
@@ -17,82 +17,136 @@
  */
 package com.graphhopper.routing.util;
 
-import static com.graphhopper.routing.util.BikeFlagCommonEncoder.PUSHING_SECTION_SPEED;
+import com.graphhopper.reader.OSMRelation;
+import com.graphhopper.reader.OSMWay;
+import static com.graphhopper.routing.util.BikeCommonFlagEncoder.PUSHING_SECTION_SPEED;
+import static com.graphhopper.routing.util.BikeCommonFlagEncoder.PriorityCode.*;
+import java.util.TreeMap;
 
 /**
  * Specifies the settings for mountain biking
  * <p/>
  * @author ratrun
+ * @author Peter Karich
  */
-public class MountainBikeFlagEncoder extends BikeFlagCommonEncoder
+public class MountainBikeFlagEncoder extends BikeCommonFlagEncoder
 {
     MountainBikeFlagEncoder()
     {
-        setTrackTypeSpeed("grade1", 12); // paved
-        setTrackTypeSpeed("grade2", 20); // now unpaved ...
-        setTrackTypeSpeed("grade3", 20);
-        setTrackTypeSpeed("grade4", 20);
-        setTrackTypeSpeed("grade5", 20); // like sand/grass     
-
-        setSurfaceSpeed("paved", 12);
-        setSurfaceSpeed("asphalt", 12);
+        setTrackTypeSpeed("grade1", 18); // paved
+        setTrackTypeSpeed("grade2", 16); // now unpaved ...
+        setTrackTypeSpeed("grade3", 12);
+        setTrackTypeSpeed("grade4", 8);
+        setTrackTypeSpeed("grade5", 6); // like sand/grass     
+
+        setSurfaceSpeed("paved", 18);
+        setSurfaceSpeed("asphalt", 18);
         setSurfaceSpeed("cobblestone", 10);
         setSurfaceSpeed("cobblestone:flattened", 10);
         setSurfaceSpeed("sett", 10);
-        setSurfaceSpeed("concrete", 12);
-        setSurfaceSpeed("concrete:lanes", 14);
-        setSurfaceSpeed("concrete:plates", 14);
-        setSurfaceSpeed("paving_stones", 14);
-        setSurfaceSpeed("paving_stones:30", 14);
-        setSurfaceSpeed("unpaved", 20);
-        setSurfaceSpeed("compacted", 20);
-        setSurfaceSpeed("dirt", 20);
-        setSurfaceSpeed("earth", 20);
-        setSurfaceSpeed("fine_gravel", 20);
-        setSurfaceSpeed("grass", 20);
+        setSurfaceSpeed("concrete", 14);
+        setSurfaceSpeed("concrete:lanes", 16);
+        setSurfaceSpeed("concrete:plates", 16);
+        setSurfaceSpeed("paving_stones", 16);
+        setSurfaceSpeed("paving_stones:30", 16);
+        setSurfaceSpeed("unpaved", 14);
+        setSurfaceSpeed("compacted", 14);
+        setSurfaceSpeed("dirt", 14);
+        setSurfaceSpeed("earth", 14);
+        setSurfaceSpeed("fine_gravel", 18);
+        setSurfaceSpeed("grass", 14);
         setSurfaceSpeed("grass_paver", 14);
-        setSurfaceSpeed("gravel", 20);
-        setSurfaceSpeed("ground", 20);
+        setSurfaceSpeed("gravel", 16);
+        setSurfaceSpeed("ground", 16);
         setSurfaceSpeed("ice", PUSHING_SECTION_SPEED / 2);
         setSurfaceSpeed("metal", 10);
-        setSurfaceSpeed("mud", 20);
+        setSurfaceSpeed("mud", 12);
         setSurfaceSpeed("pebblestone", 12);
         setSurfaceSpeed("salt", 12);
-        setSurfaceSpeed("sand", 20);
-        setSurfaceSpeed("wood", 20);
-
-        setHighwaySpeed("living_street", 15);
-        setHighwaySpeed("steps", PUSHING_SECTION_SPEED / 2);
-
-        setHighwaySpeed("cycleway", 12);
-        setHighwaySpeed("path", 24);
-        setHighwaySpeed("footway", 15);
-        setHighwaySpeed("pedestrian", 15);
-        setHighwaySpeed("road", 10);
-        setHighwaySpeed("track", 24);
-        setHighwaySpeed("service", 15);
-        setHighwaySpeed("unclassified", 15);
-        setHighwaySpeed("residential", 15);
-
-        setHighwaySpeed("trunk", 12);
-        setHighwaySpeed("trunk_link", 12);
-        setHighwaySpeed("primary", 10);
-        setHighwaySpeed("primary_link", 10);
-        setHighwaySpeed("secondary", 12);
-        setHighwaySpeed("secondary_link", 12);
-        setHighwaySpeed("tertiary", 14);
-        setHighwaySpeed("tertiary_link", 14);
-
-        setPushingSection("footway");
-        setPushingSection("pedestrian");
-        setPushingSection("steps");
-
-        setCyclingNetworkPreference("icn", BikeFlagCommonEncoder.RelationMapCode.PREFER.getValue());
-        setCyclingNetworkPreference("ncn", BikeFlagCommonEncoder.RelationMapCode.PREFER.getValue());
-        setCyclingNetworkPreference("rcn", BikeFlagCommonEncoder.RelationMapCode.PREFER.getValue());
-        setCyclingNetworkPreference("lcn", BikeFlagCommonEncoder.RelationMapCode.PREFER.getValue());
-        setCyclingNetworkPreference("mtb", BikeFlagCommonEncoder.RelationMapCode.OUTSTANDING_NICE.getValue());
+        setSurfaceSpeed("sand", 10);
+        setSurfaceSpeed("wood", 10);
+
+        setHighwaySpeed("living_street", 6);
+        setHighwaySpeed("steps", PUSHING_SECTION_SPEED);
+
+        setHighwaySpeed("cycleway", 18);
+        setHighwaySpeed("path", 18);
+        setHighwaySpeed("footway", 6);
+        setHighwaySpeed("pedestrian", 6);
+        setHighwaySpeed("road", 12);
+        setHighwaySpeed("track", 18);
+        setHighwaySpeed("service", 14);
+        setHighwaySpeed("unclassified", 16);
+        setHighwaySpeed("residential", 16);
+
+        setHighwaySpeed("trunk", 18);
+        setHighwaySpeed("trunk_link", 18);
+        setHighwaySpeed("primary", 18);
+        setHighwaySpeed("primary_link", 18);
+        setHighwaySpeed("secondary", 18);
+        setHighwaySpeed("secondary_link", 18);
+        setHighwaySpeed("tertiary", 18);
+        setHighwaySpeed("tertiary_link", 18);
+
+        addPushingSection("footway");
+        addPushingSection("pedestrian");
+        addPushingSection("steps");
+
+        setCyclingNetworkPreference("icn", PREFER.getValue());
+        setCyclingNetworkPreference("ncn", PREFER.getValue());
+        setCyclingNetworkPreference("rcn", PREFER.getValue());
+        setCyclingNetworkPreference("lcn", PREFER.getValue());
+        setCyclingNetworkPreference("mtb", BEST.getValue());
+
+        addPushingSection("footway");
+        addPushingSection("pedestrian");
+        addPushingSection("steps");
+
+        avoidHighwayTags.add("primary");
+        avoidHighwayTags.add("primary_link");
+        avoidHighwayTags.add("secondary");
+        avoidHighwayTags.add("secondary_link");
+
+        preferHighwayTags.add("road");
+        preferHighwayTags.add("track");
+        preferHighwayTags.add("path");
+        preferHighwayTags.add("service");
+        preferHighwayTags.add("tertiary");
+        preferHighwayTags.add("tertiary_link");
+        preferHighwayTags.add("residential");
+        preferHighwayTags.add("unclassified");
+    }
+
+    @Override
+    void collect( OSMWay way, TreeMap<Double, Integer> weightToPrioMap )
+    {
+        super.collect(way, weightToPrioMap);
+
+        String highway = way.getTag("highway");
+        if ("track".equals(highway))
+        {
+            String trackType = way.getTag("tracktype");
+            if ("grade1".equals(trackType))
+                weightToPrioMap.put(50d, UNCHANGED.getValue());
+            else if (trackType == null)
+                weightToPrioMap.put(90d, PREFER.getValue());
+            else if (trackType.startsWith("grade"))
+                weightToPrioMap.put(100d, VERY_NICE.getValue());
+        }
+    }
+
+    @Override
+    public long handleRelationTags( OSMRelation relation, long oldRelationFlags )
+    {
+        oldRelationFlags = super.handleRelationTags(relation, oldRelationFlags);
+        int code = 0;
+        if (relation.hasTag("route", "mtb"))
+            code = PREFER.getValue();
 
+        int oldCode = (int) relationCodeEncoder.getValue(oldRelationFlags);
+        if (oldCode < code)
+            return relationCodeEncoder.setValue(0, code);
+        return oldRelationFlags;
     }
 
     @Override
diff --git a/core/src/main/java/com/graphhopper/routing/util/PriorityWeighting.java b/core/src/main/java/com/graphhopper/routing/util/PriorityWeighting.java
new file mode 100644
index 0000000000..f01b27a5b1
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/routing/util/PriorityWeighting.java
@@ -0,0 +1,46 @@
+/*
+ *  Licensed to Peter Karich under one or more contributor license
+ *  agreements. See the NOTICE file distributed with this work for
+ *  additional information regarding copyright ownership.
+ *
+ *  Peter Karich licenses this file to you under the Apache License,
+ *  Version 2.0 (the "License"); you may not use this file except
+ *  in compliance with the License. You may obtain a copy of the
+ *  License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package com.graphhopper.routing.util;
+
+import com.graphhopper.util.EdgeIteratorState;
+
+/**
+ * Special weighting for bike, uses the experimental API of encoder.getPriority(EdgeIteratorState)
+ * <p>
+ * @author Peter Karich
+ */
+public class PriorityWeighting extends FastestWeighting
+{
+    private final BikeCommonFlagEncoder encoder;
+
+    public PriorityWeighting( BikeCommonFlagEncoder encoder )
+    {
+        super(encoder);
+        this.encoder = encoder;
+    }
+
+    @Override
+    public double calcWeight( EdgeIteratorState edge, boolean reverse )
+    {
+        double weight = super.calcWeight(edge, reverse);
+        if (Double.isInfinite(weight))
+            return Double.POSITIVE_INFINITY;        
+        return weight / (0.5 + encoder.getPriority(edge.getFlags()));
+    }
+}
diff --git a/core/src/main/java/com/graphhopper/routing/util/RacingBikeFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/RacingBikeFlagEncoder.java
index 7abd5b9206..9cc902e6e5 100644
--- a/core/src/main/java/com/graphhopper/routing/util/RacingBikeFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/RacingBikeFlagEncoder.java
@@ -17,20 +17,32 @@
  */
 package com.graphhopper.routing.util;
 
+import com.graphhopper.reader.OSMWay;
+import static com.graphhopper.routing.util.BikeCommonFlagEncoder.PriorityCode.*;
+import java.util.TreeMap;
+
 /**
  * Specifies the settings for racebikeing
  * <p/>
  * @author ratrun
+ * @author Peter Karich
  */
-public class RacingBikeFlagEncoder extends BikeFlagCommonEncoder
+public class RacingBikeFlagEncoder extends BikeCommonFlagEncoder
 {
     RacingBikeFlagEncoder()
     {
+        preferHighwayTags.add("road");
+        preferHighwayTags.add("secondary");
+        preferHighwayTags.add("secondary_link");
+        preferHighwayTags.add("tertiary");
+        preferHighwayTags.add("tertiary_link");
+        preferHighwayTags.add("residential");
+
         setTrackTypeSpeed("grade1", 20); // paved
-        setTrackTypeSpeed("grade2", PUSHING_SECTION_SPEED); // now unpaved ...
-        setTrackTypeSpeed("grade3", PUSHING_SECTION_SPEED / 2);
-        setTrackTypeSpeed("grade4", PUSHING_SECTION_SPEED / 2);
-        setTrackTypeSpeed("grade5", PUSHING_SECTION_SPEED / 2); // like sand/grass     
+        setTrackTypeSpeed("grade2", 10); // now unpaved ...
+        setTrackTypeSpeed("grade3", PUSHING_SECTION_SPEED);
+        setTrackTypeSpeed("grade4", PUSHING_SECTION_SPEED);
+        setTrackTypeSpeed("grade5", PUSHING_SECTION_SPEED);
 
         setSurfaceSpeed("paved", 20);
         setSurfaceSpeed("asphalt", 20);
@@ -59,60 +71,64 @@
         setSurfaceSpeed("sand", PUSHING_SECTION_SPEED / 2);
         setSurfaceSpeed("wood", PUSHING_SECTION_SPEED / 2);
 
-        setHighwaySpeed("living_street", 15);
-        setHighwaySpeed("steps", PUSHING_SECTION_SPEED / 2);
-
         setHighwaySpeed("cycleway", 18);
-        setHighwaySpeed("path", 15);
-        setHighwaySpeed("footway", 15);
-        setHighwaySpeed("pedestrian", 15);
-        setHighwaySpeed("road", 10);
+        setHighwaySpeed("path", 8);
+        setHighwaySpeed("footway", 6);
+        setHighwaySpeed("pedestrian", 6);
+        setHighwaySpeed("road", 12);
         setHighwaySpeed("track", PUSHING_SECTION_SPEED / 2); // assume unpaved
-        setHighwaySpeed("service", 20);
-        setHighwaySpeed("unclassified", 20);
-        setHighwaySpeed("residential", 20);
+        setHighwaySpeed("service", 12);
+        setHighwaySpeed("unclassified", 16);
+        setHighwaySpeed("residential", 16);
 
         setHighwaySpeed("trunk", 20);
         setHighwaySpeed("trunk_link", 20);
         setHighwaySpeed("primary", 20);
         setHighwaySpeed("primary_link", 20);
-        setHighwaySpeed("secondary", 24);
-        setHighwaySpeed("secondary_link", 24);
-        setHighwaySpeed("tertiary", 24);
-        setHighwaySpeed("tertiary_link", 24);
-
-        setPushingSection("path");
-        setPushingSection("track");
-        setPushingSection("footway");
-        setPushingSection("pedestrian");
-        setPushingSection("steps");
+        setHighwaySpeed("secondary", 20);
+        setHighwaySpeed("secondary_link", 20);
+        setHighwaySpeed("tertiary", 20);
+        setHighwaySpeed("tertiary_link", 20);
 
-        setCyclingNetworkPreference("icn", RelationMapCode.OUTSTANDING_NICE.getValue());
-        setCyclingNetworkPreference("ncn", RelationMapCode.OUTSTANDING_NICE.getValue());
-        setCyclingNetworkPreference("rcn", RelationMapCode.VERY_NICE.getValue());
-        setCyclingNetworkPreference("lcn", RelationMapCode.UNCHANGED.getValue());
-        setCyclingNetworkPreference("mtb", RelationMapCode.UNCHANGED.getValue());
+        addPushingSection("path");
+        addPushingSection("track");
+        addPushingSection("footway");
+        addPushingSection("pedestrian");
+        addPushingSection("steps");
 
+        setCyclingNetworkPreference("icn", PriorityCode.BEST.getValue());
+        setCyclingNetworkPreference("ncn", PriorityCode.BEST.getValue());
+        setCyclingNetworkPreference("rcn", PriorityCode.VERY_NICE.getValue());
+        setCyclingNetworkPreference("lcn", PriorityCode.UNCHANGED.getValue());
+        setCyclingNetworkPreference("mtb", PriorityCode.UNCHANGED.getValue());
     }
 
-    // In case that the way belongs to a relation for which we do have a relation triggered weight change.    
-    // FIXME: Re-write in case that there is a more generic way to influence the weighting (issue #124).
-    // Here we boost or reduce the speed according to the relationWeightCode:
     @Override
-    int relationWeightCodeToSpeed( int highwaySpeed, int relationCode )
+    void collect( OSMWay way, TreeMap<Double, Integer> weightToPrioMap )
     {
-        int speed;
-        if ((highwaySpeed > PUSHING_SECTION_SPEED) && (highwaySpeed < 15))
-            // We know that our way belongs to a cycle route, so we assume 15km/h minimum
-            speed = 15;
-        else
-            speed = highwaySpeed;
+        super.collect(way, weightToPrioMap);
 
-        if (speed > PUSHING_SECTION_SPEED)
-            // Add or remove 4km/h per every relation weight boost point
-            return speed + 4 * (relationCode - DEFAULT_REL_CODE);
-        else
-            return speed;   // We are not pushing unpaved parts
+        String highway = way.getTag("highway");
+        if ("service".equals(highway))
+        {
+            weightToPrioMap.put(40d, UNCHANGED.getValue());
+        } else if ("track".equals(highway))
+        {
+            String trackType = way.getTag("tracktype");
+            if ("grade1".equals(trackType))
+                weightToPrioMap.put(110d, PREFER.getValue());
+            else if (trackType == null || trackType.startsWith("grade"))
+                weightToPrioMap.put(110d, AVOID_AT_ALL_COSTS.getValue());
+        }
+    }
+
+    @Override
+    boolean isPushingSection( OSMWay way )
+    {
+        String highway = way.getTag("highway");
+        String trackType = way.getTag("tracktype");
+        return way.hasTag("highway", pushingSections)
+                || "track".equals(highway) && trackType != null && !"grade1".equals(trackType);
     }
 
     @Override
diff --git a/core/src/main/java/com/graphhopper/routing/util/RoutingAlgorithmSpecialAreaTests.java b/core/src/main/java/com/graphhopper/routing/util/RoutingAlgorithmSpecialAreaTests.java
index f80966fe1b..b86c0430bc 100644
--- a/core/src/main/java/com/graphhopper/routing/util/RoutingAlgorithmSpecialAreaTests.java
+++ b/core/src/main/java/com/graphhopper/routing/util/RoutingAlgorithmSpecialAreaTests.java
@@ -86,17 +86,17 @@ void testAlgos()
 
             OneRun or = new OneRun(50.0314, 10.5105, 50.0303, 10.5070, 571, 22);
             testCollector.assertDistance(prepare, or.getList(idx, ef), or);
-            or = new OneRun(49.51451, 9.967346, 50.2920, 10.4650, 107545, 1946);
+            or = new OneRun(49.51451, 9.967346, 50.2920, 10.4650, 107909, 1929);
             testCollector.assertDistance(prepare, or.getList(idx, ef), or);
-            or = new OneRun(50.0780, 9.1570, 49.5860, 9.9750, 91715, 1413);
+            or = new OneRun(50.0780, 9.1570, 49.5860, 9.9750, 95562, 1556);
             testCollector.assertDistance(prepare, or.getList(idx, ef), or);
-            or = new OneRun(50.2800, 9.7190, 49.8960, 10.3890, 76414, 1671);
+            or = new OneRun(50.2800, 9.7190, 49.8960, 10.3890, 81016, 1724);
             testCollector.assertDistance(prepare, or.getList(idx, ef), or);
-            or = new OneRun(49.8020, 9.2470, 50.4940, 10.1970, 125633, 2449);
+            or = new OneRun(49.8020, 9.2470, 50.4940, 10.1970, 134767, 2295);
             testCollector.assertDistance(prepare, or.getList(idx, ef), or);
-            or = new OneRun(49.72449, 9.23482, 50.4140, 10.2750, 137264, 2718);
+            or = new OneRun(49.72449, 9.23482, 50.4140, 10.2750, 140809, 2680);
             testCollector.assertDistance(prepare, or.getList(idx, ef), or);
-            or = new OneRun(50.1100, 10.7530, 49.6500, 10.3410, 73533, 1818);
+            or = new OneRun(50.1100, 10.7530, 49.6500, 10.3410, 77381, 1863);
             testCollector.assertDistance(prepare, or.getList(idx, ef), or);
 
             System.out.println("unterfranken " + prepare.createAlgo() + ": " + (testCollector.errors.size() - failed) + " failed");
@@ -118,12 +118,12 @@ public ME( AlgorithmPreparation ap, LocationIndex idx )
     {
         // List<Entry<AlgorithmPreparation, LocationIndex>> prepare = new ArrayList<Entry<AlgorithmPreparation, LocationIndex>>();
         List<Entry<AlgorithmPreparation, LocationIndex>> prepare = new ArrayList<Entry<AlgorithmPreparation, LocationIndex>>();
-        prepare.add(new ME(createAlgoPrepare(g, "astar", encoder, weighting), idx));
-        // prepare.add(new ME(createAlgoPrepare(g, "dijkstraOneToMany", encoder, weighting), idx));
-        prepare.add(new ME(createAlgoPrepare(g, "astarbi", encoder, weighting), idx));
-        prepare.add(new ME(createAlgoPrepare(g, "dijkstraNativebi", encoder, weighting), idx));
+//        prepare.add(new ME(createAlgoPrepare(g, "astar", encoder, weighting), idx));
+//        // prepare.add(new ME(createAlgoPrepare(g, "dijkstraOneToMany", encoder, weighting), idx));
+//        prepare.add(new ME(createAlgoPrepare(g, "astarbi", encoder, weighting), idx));
+//        prepare.add(new ME(createAlgoPrepare(g, "dijkstraNativebi", encoder, weighting), idx));
         prepare.add(new ME(createAlgoPrepare(g, "dijkstrabi", encoder, weighting), idx));
-        prepare.add(new ME(createAlgoPrepare(g, "dijkstra", encoder, weighting), idx));
+//        prepare.add(new ME(createAlgoPrepare(g, "dijkstra", encoder, weighting), idx));
 
         if (withCh)
         {
diff --git a/core/src/main/java/com/graphhopper/routing/util/TestAlgoCollector.java b/core/src/main/java/com/graphhopper/routing/util/TestAlgoCollector.java
index cc34953e2e..ca4bade82a 100644
--- a/core/src/main/java/com/graphhopper/routing/util/TestAlgoCollector.java
+++ b/core/src/main/java/com/graphhopper/routing/util/TestAlgoCollector.java
@@ -26,9 +26,11 @@
 import com.graphhopper.util.DistanceCalcEarth;
 import com.graphhopper.util.PathMerger;
 import com.graphhopper.util.PointList;
+import com.graphhopper.util.TranslationMap;
 import com.graphhopper.util.shapes.GHPoint;
 import java.util.ArrayList;
 import java.util.List;
+import java.util.Locale;
 
 /**
  * @author Peter Karich
@@ -37,6 +39,7 @@
 {
     private final String name;
     private final DistanceCalc distCalc = new DistanceCalcEarth();
+    private final TranslationMap trMap = new TranslationMap().doImport();
     public List<String> errors = new ArrayList<String>();
 
     public TestAlgoCollector( String name )
@@ -50,6 +53,7 @@ public TestAlgoCollector assertDistance( AlgorithmPreparation prepare, List<Quer
         for (int i = 0; i < queryList.size() - 1; i++)
         {
             Path path = prepare.createAlgo().calcPath(queryList.get(i), queryList.get(i + 1));
+            // System.out.println(path.calcInstructions().createGPX("temp", 0, "GMT"));
             viaPaths.add(path);
         }
         PathMerger pathMerger = new PathMerger().
@@ -57,7 +61,7 @@ public TestAlgoCollector assertDistance( AlgorithmPreparation prepare, List<Quer
                 setSimplifyRequest(false).
                 setEnableInstructions(true);
         GHResponse rsp = new GHResponse();
-        pathMerger.doWork(rsp, viaPaths);
+        pathMerger.doWork(rsp, viaPaths, trMap.getWithFallBack(Locale.US));
 
         if (!rsp.isFound())
         {
@@ -68,14 +72,14 @@ public TestAlgoCollector assertDistance( AlgorithmPreparation prepare, List<Quer
 
         PointList pointList = rsp.getPoints();
         double tmpDist = pointList.calcDistance(distCalc);
-        if (Math.abs(rsp.getDistance() - tmpDist) > .9)
+        if (Math.abs(rsp.getDistance() - tmpDist) > 2)
         {
             errors.add(prepare + " path.getDistance was  " + rsp.getDistance()
                     + "\t pointList.calcDistance was " + tmpDist + "\t (expected points " + oneRun.getLocs()
                     + ", expected distance " + oneRun.getDistance() + ") " + queryList);
         }
 
-        if (Math.abs(rsp.getDistance() - oneRun.getDistance()) > .9)
+        if (Math.abs(rsp.getDistance() - oneRun.getDistance()) > 2)
         {
             errors.add(prepare + " returns path not matching the expected distance of " + oneRun.getDistance()
                     + "\t Returned was " + rsp.getDistance() + "\t (expected points " + oneRun.getLocs()
diff --git a/core/src/main/java/com/graphhopper/storage/GHNodeAccess.java b/core/src/main/java/com/graphhopper/storage/GHNodeAccess.java
index 63760d7f37..67927b1f71 100644
--- a/core/src/main/java/com/graphhopper/storage/GHNodeAccess.java
+++ b/core/src/main/java/com/graphhopper/storage/GHNodeAccess.java
@@ -28,12 +28,12 @@
 class GHNodeAccess implements NodeAccess
 {
     private final GraphHopperStorage that;
-    private final boolean enabled3D;
+    private final boolean elevation;
 
-    public GHNodeAccess( GraphHopperStorage that, boolean enabled3D )
+    public GHNodeAccess( GraphHopperStorage that, boolean withElevation )
     {
         this.that = that;
-        this.enabled3D = enabled3D;
+        this.elevation = withElevation;
     }
 
     @Override
@@ -93,7 +93,7 @@ public final double getLongitude( int nodeId )
     @Override
     public final double getElevation( int nodeId )
     {
-        if (!enabled3D)
+        if (!elevation)
             throw new IllegalStateException("Cannot access elevation - 3D is not enabled");
 
         return Helper.intToEle(that.nodes.getInt((long) nodeId * that.nodeEntryBytes + that.N_ELE));
@@ -143,13 +143,13 @@ public final int getAdditionalNodeField( int index )
     @Override
     public final boolean is3D()
     {
-        return enabled3D;
+        return elevation;
     }
 
     @Override
     public int getDimension()
     {
-        if (enabled3D)
+        if (elevation)
             return 3;
         return 2;
     }
diff --git a/core/src/main/java/com/graphhopper/storage/GraphBuilder.java b/core/src/main/java/com/graphhopper/storage/GraphBuilder.java
index c6f3f41950..40bc7db1bf 100644
--- a/core/src/main/java/com/graphhopper/storage/GraphBuilder.java
+++ b/core/src/main/java/com/graphhopper/storage/GraphBuilder.java
@@ -31,7 +31,7 @@
     private boolean mmap;
     private boolean store;
     private boolean level;
-    private boolean is3D;
+    private boolean elevation;
     private long byteCapacity = 100;
 
     public GraphBuilder( EncodingManager encodingManager )
@@ -74,15 +74,15 @@ public GraphBuilder setExpectedSize( byte cap )
         return this;
     }
 
-    public GraphBuilder set3D( boolean is3D )
+    public GraphBuilder set3D( boolean withElevation )
     {
-        this.is3D = is3D;
+        this.elevation = withElevation;
         return this;
     }
 
-    public boolean is3D()
+    public boolean hasElevation()
     {
-        return is3D;
+        return elevation;
     }
 
     public LevelGraphStorage levelGraphBuild()
@@ -113,9 +113,9 @@ GraphStorage build()
 
         GraphStorage graph;
         if (level)
-            graph = new LevelGraphStorage(dir, encodingManager, is3D);
+            graph = new LevelGraphStorage(dir, encodingManager, elevation);
         else
-            graph = new GraphHopperStorage(dir, encodingManager, is3D);
+            graph = new GraphHopperStorage(dir, encodingManager, elevation);
 
         return graph;
     }
diff --git a/core/src/main/java/com/graphhopper/storage/GraphHopperStorage.java b/core/src/main/java/com/graphhopper/storage/GraphHopperStorage.java
index ef0128dfe3..dbfbb155c8 100644
--- a/core/src/main/java/com/graphhopper/storage/GraphHopperStorage.java
+++ b/core/src/main/java/com/graphhopper/storage/GraphHopperStorage.java
@@ -91,12 +91,12 @@
     final ExtendedStorage extStorage;
     private final NodeAccess nodeAccess;
 
-    public GraphHopperStorage( Directory dir, EncodingManager encodingManager, boolean enabledEle )
+    public GraphHopperStorage( Directory dir, EncodingManager encodingManager, boolean withElevation )
     {
-        this(dir, encodingManager, enabledEle, new ExtendedStorage.NoExtendedStorage());
+        this(dir, encodingManager, withElevation, new ExtendedStorage.NoExtendedStorage());
     }
 
-    public GraphHopperStorage( Directory dir, EncodingManager encodingManager, boolean enabled3D, ExtendedStorage extendedStorage )
+    public GraphHopperStorage( Directory dir, EncodingManager encodingManager, boolean withElevation, ExtendedStorage extendedStorage )
     {
         // here encoding manager can be null e.g. if we want to load existing graph
         this.encodingManager = encodingManager;
@@ -109,7 +109,7 @@ public GraphHopperStorage( Directory dir, EncodingManager encodingManager, boole
         this.nameIndex = new NameIndex(dir);
         this.properties = new StorableProperties(dir);
         this.bounds = BBox.INVERSE.clone();
-        this.nodeAccess = new GHNodeAccess(this, enabled3D);
+        this.nodeAccess = new GHNodeAccess(this, withElevation);
         extendedStorage.init(this);
     }
 
diff --git a/core/src/main/java/com/graphhopper/storage/index/LocationIndexTree.java b/core/src/main/java/com/graphhopper/storage/index/LocationIndexTree.java
index 5e3e9f95c7..4b586d0beb 100644
--- a/core/src/main/java/com/graphhopper/storage/index/LocationIndexTree.java
+++ b/core/src/main/java/com/graphhopper/storage/index/LocationIndexTree.java
@@ -50,7 +50,7 @@
 {
     private final Logger logger = LoggerFactory.getLogger(getClass());
     private final int MAGIC_INT;
-    protected static DistanceCalc distCalc = new DistancePlaneProjection();
+    protected DistanceCalc distCalc = new DistancePlaneProjection();
     private DistanceCalc preciseDistCalc = new DistanceCalcEarth();
     protected final Graph graph;
     private final NodeAccess nodeAccess;
diff --git a/core/src/main/java/com/graphhopper/util/AngleCalc2D.java b/core/src/main/java/com/graphhopper/util/AngleCalc.java
similarity index 63%
rename from core/src/main/java/com/graphhopper/util/AngleCalc2D.java
rename to core/src/main/java/com/graphhopper/util/AngleCalc.java
index 275676650e..4b1a3f1f65 100644
--- a/core/src/main/java/com/graphhopper/util/AngleCalc2D.java
+++ b/core/src/main/java/com/graphhopper/util/AngleCalc.java
@@ -18,80 +18,43 @@
 package com.graphhopper.util;
 
 /**
- * Calculates the angle of a turn, defined by three points. The fast atan2 method is by Riven
- * http://riven8192.blogspot.de/2009/08/fastmath-atan2-lookup-table.html
+ * Calculates the angle of a turn, defined by three points. The fast atan2 method is from Jim Shima,
+ * 1999, http://www.dspguru.com/dsp/tricks/fixed-point-atan2-with-self-normalization
  * <p>
  * @author Johannes Pelzer
  * @author Peter Karich
  */
-public class AngleCalc2D
+public class AngleCalc
 {
-    private static final int ATAN2_BITS = 7;
-    private static final int ATAN2_BITS2 = ATAN2_BITS << 1;
-    private static final int ATAN2_MASK = ~(-1 << ATAN2_BITS2);
-    private static final int ATAN2_COUNT = ATAN2_MASK + 1;
-    private static final int ATAN2_DIM = (int) Math.sqrt(ATAN2_COUNT);
-    private static final double INV_ATAN2_DIM_MINUS_1 = 1.0 / (ATAN2_DIM - 1);
-    private static final double[] atan2 = new double[ATAN2_COUNT];
-
-    static
-    {
-        for (int i = 0; i < ATAN2_DIM; i++)
-        {
-            for (int j = 0; j < ATAN2_DIM; j++)
-            {
-                double x0 = (double) i / ATAN2_DIM;
-                double y0 = (double) j / ATAN2_DIM;
-
-                atan2[j * ATAN2_DIM + i] = Math.atan2(y0, x0);
-            }
-        }
-    }
+    private final static double PI_4 = Math.PI / 4.0;
+    private final static double PI3_4 = 3.0 * Math.PI / 4.0;
 
     static final double atan2( double y, double x )
     {
-        double add, mul;
+        // kludge to prevent 0/0 condition
+        double absY = Math.abs(y) + 1e-10;
+        double r, angle;
         if (x < 0.0)
         {
-            if (y < 0.0)
-            {
-                x = -x;
-                y = -y;
-                mul = 1.0;
-            } else
-            {
-                x = -x;
-                mul = -1.0;
-            }
-
-            add = -Math.PI;
+            r = (x + absY) / (absY - x);
+            angle = PI3_4;
         } else
         {
-            if (y < 0.0)
-            {
-                y = -y;
-                mul = -1.0;
-            } else
-            {
-                mul = 1.0;
-            }
-
-            add = 0.0;
+            r = (x - absY) / (x + absY);
+            angle = PI_4;
         }
 
-        double invDiv = 1.0 / (((x < y) ? y : x) * INV_ATAN2_DIM_MINUS_1);
-        int xi = Math.min((int) (x * invDiv), ATAN2_DIM);
-        int yi = Math.min((int) (y * invDiv), ATAN2_DIM);
-        return (atan2[yi * ATAN2_DIM + xi] + add) * mul;
+        angle += (0.1963 * r * r - 0.9817) * r;
+        if (y < 0.0)
+            // negate if in quad III or IV
+            return -angle;
+        return angle;
     }
 
     /**
      * Return orientation of line relative to east.
      * <p>
      * @return Orientation in interval -pi to +pi where 0 is east
-     * <p>
-     * @Deprecated because it seems to be nicer to align to north so try to use calcOrientationNorth
-     * instaead
      */
     public double calcOrientation( double lat1, double lon1, double lat2, double lon2 )
     {
@@ -124,24 +87,16 @@ public double alignOrientation( double baseOrientation, double orientation )
     }
 
     /**
-     * Calculate Azimuth for a line given by two coordinates. Direction in Degree where 0 is North,
-     * 90 is East, and 270 is West
-     * <p>
-     * @param lat1
-     * @param lon1
-     * @param lat2
-     * @param lon2
-     * @return
+     * Calculate Azimuth for a line given by two coordinates. Direction in 'degree' where 0 is
+     * north, 90 is east, 180 is south and 270 is west.
      */
     double calcAzimuth( double lat1, double lon1, double lat2, double lon2 )
     {
         double orientation = -calcOrientation(lat1, lon1, lat2, lon2);
-        orientation += (Math.PI / 2);
-
+        orientation = Helper.round4(orientation + Math.PI / 2);        
         if (orientation < 0)
-        {
             orientation += 2 * Math.PI;
-        }
+
         return Math.toDegrees(orientation);
     }
 
diff --git a/core/src/main/java/com/graphhopper/util/DistanceCalcEarth.java b/core/src/main/java/com/graphhopper/util/DistanceCalcEarth.java
index c2c88e9eba..209ee796c8 100644
--- a/core/src/main/java/com/graphhopper/util/DistanceCalcEarth.java
+++ b/core/src/main/java/com/graphhopper/util/DistanceCalcEarth.java
@@ -103,9 +103,7 @@ public boolean isDateLineCrossOver( double lon1, double lon2 )
     public BBox createBBox( double lat, double lon, double radiusInMeter )
     {
         if (radiusInMeter <= 0)
-        {
             throw new IllegalArgumentException("Distance must not be zero or negative! " + radiusInMeter + " lat,lon:" + lat + "," + lon);
-        }
 
         // length of a circle at specified lat / dist
         double dLon = (360 / (calcCircumference(lat) / radiusInMeter));
diff --git a/core/src/main/java/com/graphhopper/util/DistancePlaneProjection.java b/core/src/main/java/com/graphhopper/util/DistancePlaneProjection.java
index 112bbaa1ab..e210cb7fbd 100644
--- a/core/src/main/java/com/graphhopper/util/DistancePlaneProjection.java
+++ b/core/src/main/java/com/graphhopper/util/DistancePlaneProjection.java
@@ -17,6 +17,7 @@
  */
 package com.graphhopper.util;
 
+import com.graphhopper.util.AngleCalc;
 import static java.lang.Math.*;
 
 /**
diff --git a/core/src/main/java/com/graphhopper/util/FinishInstruction.java b/core/src/main/java/com/graphhopper/util/FinishInstruction.java
index 80e573ccf8..d0b64b939e 100644
--- a/core/src/main/java/com/graphhopper/util/FinishInstruction.java
+++ b/core/src/main/java/com/graphhopper/util/FinishInstruction.java
@@ -26,7 +26,7 @@
 
     public FinishInstruction( final double lat, final double lon, final double ele )
     {
-        super(FINISH, "", 0, 0, new PointList(2, true)
+        super(FINISH, "", InstructionAnnotation.EMPTY, new PointList(2, true)
         {   
             {
                 add(lat, lon, ele);
diff --git a/core/src/main/java/com/graphhopper/util/GPXEntry.java b/core/src/main/java/com/graphhopper/util/GPXEntry.java
index 8fcd97b5fe..d9279ca1c3 100644
--- a/core/src/main/java/com/graphhopper/util/GPXEntry.java
+++ b/core/src/main/java/com/graphhopper/util/GPXEntry.java
@@ -18,11 +18,12 @@
 package com.graphhopper.util;
 
 import com.graphhopper.util.shapes.GHPoint;
+import com.graphhopper.util.shapes.GHPoint3D;
 
 /**
  * @author Peter Karich
  */
-public class GPXEntry extends GHPoint
+public class GPXEntry extends GHPoint3D
 {
     private long time;
 
@@ -33,10 +34,21 @@ public GPXEntry( GHPoint p, long millis )
 
     public GPXEntry( double lat, double lon, long millis )
     {
-        super(lat, lon);
+        super(lat, lon, Double.NaN);
         this.time = millis;
     }
 
+    public GPXEntry( double lat, double lon, double ele, long millis )
+    {
+        super(lat, lon, ele);
+        this.time = millis;
+    }
+
+    boolean is3D()
+    {
+        return !Double.isNaN(ele);
+    }
+
     /**
      * The time relative to the start time.
      */
diff --git a/core/src/main/java/com/graphhopper/util/Helper.java b/core/src/main/java/com/graphhopper/util/Helper.java
index e8fc5513c7..e9d51e267e 100644
--- a/core/src/main/java/com/graphhopper/util/Helper.java
+++ b/core/src/main/java/com/graphhopper/util/Helper.java
@@ -435,6 +435,11 @@ public static final double round6( double value )
     {
         return Math.round(value * 1e6) / 1e6;
     }
+    
+    public static final double round4( double value )
+    {
+        return Math.round(value * 1e4) / 1e4;
+    }
 
     public static final double round2( double value )
     {
diff --git a/core/src/main/java/com/graphhopper/util/Instruction.java b/core/src/main/java/com/graphhopper/util/Instruction.java
index 706e3044a8..ca9ca9c282 100644
--- a/core/src/main/java/com/graphhopper/util/Instruction.java
+++ b/core/src/main/java/com/graphhopper/util/Instruction.java
@@ -18,12 +18,11 @@
 package com.graphhopper.util;
 
 import java.util.List;
-import java.text.DecimalFormat;
 
 public class Instruction
 {
-    private static final AngleCalc2D ac = new AngleCalc2D();
-    private static final DistanceCalc distanceCalc = new DistanceCalcEarth();
+    private static final AngleCalc ac = new AngleCalc();
+    private static final DistanceCalc3D distanceCalc = new DistanceCalc3D();
     public static final int TURN_SHARP_LEFT = -3;
     public static final int TURN_LEFT = -2;
     public static final int TURN_SLIGHT_LEFT = -1;
@@ -38,30 +37,23 @@
     private double distance;
     private long time;
     final PointList points;
-    private final int pavementType;
-    private final int wayType;
+    private final InstructionAnnotation annotation;
 
     /**
      * The points, distances and times have exactly the same count. The last point of this
      * instruction is not duplicated here and should be in the next one.
      */
-    public Instruction( int sign, String name, int wayType, int pavementType, PointList pl )
+    public Instruction( int sign, String name, InstructionAnnotation ia, PointList pl )
     {
         this.sign = sign;
         this.name = name;
         this.points = pl;
-        this.wayType = wayType;
-        this.pavementType = pavementType;
+        this.annotation = ia;
     }
 
-    public int getPavementType()
+    public InstructionAnnotation getAnnotation()
     {
-        return pavementType;
-    }
-
-    public int getWayType()
-    {
-        return wayType;
+        return annotation;
     }
 
     public int getSign()
@@ -121,6 +113,11 @@ public long getTime()
         return points.getLongitude(0);
     }
 
+    double getFirstEle()
+    {
+        return points.getElevation(0);
+    }
+
     public PointList getPoints()
     {
         return points;
@@ -140,17 +137,27 @@ long fillGPXList( List<GPXEntry> list, long time,
         long prevTime = time;
         double lat = points.getLatitude(0);
         double lon = points.getLongitude(0);
+        double ele = Double.NaN;
+        boolean is3D = points.is3D();
+        if (is3D)
+            ele = points.getLongitude(0);
+
         for (int i = 0; i < len; i++)
         {
             boolean last = i + 1 == len;
             double nextLat = last ? nextInstr.getFirstLat() : points.getLatitude(i + 1);
             double nextLon = last ? nextInstr.getFirstLon() : points.getLongitude(i + 1);
+            double nextEle = is3D ? (last ? nextInstr.getFirstEle() : points.getElevation(i + 1)) : Double.NaN;
+
+            list.add(new GPXEntry(lat, lon, ele, prevTime));
+            if (is3D)
+                prevTime = Math.round(prevTime + this.time * distanceCalc.calcDist(nextLat, nextLon, nextEle, lat, lon, ele) / distance);
+            else
+                prevTime = Math.round(prevTime + this.time * distanceCalc.calcDist(nextLat, nextLon, lat, lon) / distance);
 
-            list.add(new GPXEntry(lat, lon, prevTime));
-            // TODO in the case of elevation data the air-line distance is probably not precise enough
-            prevTime = Math.round(prevTime + this.time * distanceCalc.calcDist(nextLat, nextLon, lat, lon) / distance);
             lat = nextLat;
             lon = nextLon;
+            ele = nextEle;
         }
         return time + this.time;
     }
@@ -160,12 +167,9 @@ public String toString()
     {
         StringBuilder sb = new StringBuilder();
         sb.append('(');
-        sb.append(sign);
-        sb.append(',');
-        sb.append(name);
-        sb.append(',');
-        sb.append(distance);
-        sb.append(',');
+        sb.append(sign).append(',');
+        sb.append(name).append(',');
+        sb.append(distance).append(',');
         sb.append(time);
         sb.append(')');
         return sb.toString();
@@ -173,7 +177,7 @@ public String toString()
 
     /**
      * Return Direction/Compass point based on the first tracksegment of the instruction. If
-     * Instruction does not contain enough coordinate points, NULL will be returned.
+     * Instruction does not contain enough coordinate points, an empty string will be returned.
      * <p>
      * @return
      */
@@ -181,26 +185,22 @@ String getDirection( Instruction nextI )
     {
         double azimuth = calcAzimuth(nextI);
         if (Double.isNaN(azimuth))
-            return null;
+            return "";
 
-        String dir = ac.azimuth2compassPoint(azimuth);
-        return dir;
+        return ac.azimuth2compassPoint(azimuth);
     }
 
     /**
      * Return Azimuth based on the first tracksegment of the instruction. If Instruction does not
-     * contain enough coordinate points, NULL will be returned.
-     * <p>
-     * @return
+     * contain enough coordinate points, an empty string will be returned.
      */
     String getAzimuth( Instruction nextI )
     {
         double az = calcAzimuth(nextI);
         if (Double.isNaN(az))
-            return null;
+            return "";
 
-        DecimalFormat angleFormatter = new DecimalFormat("#");
-        return angleFormatter.format(az);
+        return "" + Math.round(az);
     }
 
     private double calcAzimuth( Instruction nextI )
@@ -223,9 +223,7 @@ private double calcAzimuth( Instruction nextI )
 
         double lat = points.getLatitude(0);
         double lon = points.getLongitude(0);
-
-        double azimuth = ac.calcAzimuth(lat, lon, nextLat, nextLon);
-        return azimuth;
+        return ac.calcAzimuth(lat, lon, nextLat, nextLon);
     }
 
     void checkOne()
@@ -233,4 +231,50 @@ void checkOne()
         if (points.size() < 1)
             throw new IllegalStateException("Instruction must contain at least one point " + toString());
     }
+
+    public String getTurnDescription( Translation tr )
+    {
+        String str;
+        String n = getName();
+        int indi = getSign();
+        if (indi == Instruction.FINISH)
+        {
+            str = tr.tr("finish");
+        } else if (indi == Instruction.REACHED_VIA)
+        {
+            str = tr.tr("stopover", ((FinishInstruction) this).getViaPosition());
+        } else if (indi == Instruction.CONTINUE_ON_STREET)
+        {
+            str = Helper.isEmpty(n) ? tr.tr("continue") : tr.tr("continue_onto", n);
+        } else
+        {
+            String dir = null;
+            switch (indi)
+            {
+                case Instruction.TURN_SHARP_LEFT:
+                    dir = tr.tr("sharp_left");
+                    break;
+                case Instruction.TURN_LEFT:
+                    dir = tr.tr("left");
+                    break;
+                case Instruction.TURN_SLIGHT_LEFT:
+                    dir = tr.tr("slight_left");
+                    break;
+                case Instruction.TURN_SLIGHT_RIGHT:
+                    dir = tr.tr("slight_right");
+                    break;
+                case Instruction.TURN_RIGHT:
+                    dir = tr.tr("right");
+                    break;
+                case Instruction.TURN_SHARP_RIGHT:
+                    dir = tr.tr("sharp_right");
+                    break;
+            }
+            if (dir == null)
+                throw new IllegalStateException("Indication not found " + indi);
+
+            str = Helper.isEmpty(n) ? tr.tr("turn", dir) : tr.tr("turn_onto", dir, n);
+        }
+        return str;
+    }
 }
diff --git a/core/src/main/java/com/graphhopper/util/InstructionAnnotation.java b/core/src/main/java/com/graphhopper/util/InstructionAnnotation.java
new file mode 100644
index 0000000000..942498e316
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/util/InstructionAnnotation.java
@@ -0,0 +1,89 @@
+/*
+ *  Licensed to Peter Karich under one or more contributor license
+ *  agreements. See the NOTICE file distributed with this work for
+ *  additional information regarding copyright ownership.
+ *
+ *  Peter Karich licenses this file to you under the Apache License,
+ *  Version 2.0 (the "License"); you may not use this file except
+ *  in compliance with the License. You may obtain a copy of the
+ *  License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package com.graphhopper.util;
+
+/**
+ * @author Peter Karich
+ */
+public class InstructionAnnotation
+{
+    public final static InstructionAnnotation EMPTY = new InstructionAnnotation();
+    private final boolean empty;
+    private final int importance;
+    private final String message;
+
+    private InstructionAnnotation()
+    {
+        this.empty = true;
+        this.importance = 0;
+        this.message = "";
+    }
+
+    public InstructionAnnotation( int importance, String message )
+    {
+        this.empty = false;
+        this.importance = importance;
+        this.message = message;
+    }
+
+    public boolean isEmpty()
+    {
+        return empty;
+    }
+
+    public int getImportance()
+    {
+        return importance;
+    }
+
+    public String getMessage()
+    {
+        return message;
+    }
+
+    @Override
+    public String toString()
+    {
+        return importance + ": " + getMessage();
+    }
+
+    @Override
+    public int hashCode()
+    {
+        int hash = 3;
+        hash = 83 * hash + this.importance;
+        hash = 83 * hash + (this.message != null ? this.message.hashCode() : 0);
+        return hash;
+    }
+
+    @Override
+    public boolean equals( Object obj )
+    {
+        if (obj == null)
+            return false;
+        if (getClass() != obj.getClass())
+            return false;
+        final InstructionAnnotation other = (InstructionAnnotation) obj;
+        if (this.importance != other.importance)
+            return false;
+        if ((this.message == null) ? (other.message != null) : !this.message.equals(other.message))
+            return false;
+        return true;
+    }
+}
diff --git a/core/src/main/java/com/graphhopper/util/InstructionList.java b/core/src/main/java/com/graphhopper/util/InstructionList.java
index c1b8b41e17..9b625c4472 100644
--- a/core/src/main/java/com/graphhopper/util/InstructionList.java
+++ b/core/src/main/java/com/graphhopper/util/InstructionList.java
@@ -25,16 +25,24 @@
  */
 public class InstructionList implements Iterable<Instruction>
 {
+    public static final InstructionList EMPTY = new InstructionList();
     private final List<Instruction> instructions;
+    private final Translation tr;
 
-    public InstructionList()
+    private InstructionList()
     {
-        this(10);
+        this(0, null);
     }
 
-    public InstructionList( int cap )
+    public InstructionList( Translation tr )
+    {
+        this(10, tr);
+    }
+
+    public InstructionList( int cap, Translation tr )
     {
         instructions = new ArrayList<Instruction>(cap);
+        this.tr = tr;
     }
 
     public void add( Instruction instr )
@@ -52,7 +60,10 @@ public int size()
         return instructions.size();
     }
 
-    public List<String> createDistances( TranslationMap.Translation tr, boolean mile )
+    /**
+     * Returns the descriptions of the distance per instruction.
+     */
+    public List<String> createDistances( boolean mile )
     {
         List<String> labels = new ArrayList<String>(instructions.size());
         for (int i = 0; i < instructions.size(); i++)
@@ -90,7 +101,7 @@ public int size()
         return labels;
     }
 
-    public List<Map<String, Object>> createJson( TranslationMap.Translation tr )
+    public List<Map<String, Object>> createJson()
     {
         List<Map<String, Object>> instrList = new ArrayList<Map<String, Object>>(instructions.size());
         int pointsIndex = 0;
@@ -100,7 +111,17 @@ public int size()
             Map<String, Object> instrJson = new HashMap<String, Object>();
             instrList.add(instrJson);
 
-            instrJson.put("text", Helper.firstBig(getTurnDescription(instruction, tr)));
+            InstructionAnnotation ia = instruction.getAnnotation();
+            String str = instruction.getTurnDescription(tr);
+            if (Helper.isEmpty(str))
+                str = ia.getMessage();
+            instrJson.put("text", Helper.firstBig(str));
+            if (!ia.isEmpty())
+            {
+                instrJson.put("annotationText", ia.getMessage());
+                instrJson.put("annotationImportance", ia.getImportance());
+            }
+
             instrJson.put("time", instruction.getTime());
             instrJson.put("distance", Helper.round(instruction.getDistance(), 3));
             instrJson.put("sign", instruction.getSign());
@@ -118,52 +139,6 @@ public int size()
         return instrList;
     }
 
-    public static String getTurnDescription( Instruction instruction, TranslationMap.Translation tr )
-    {
-        String str;
-        String n = getWayName(instruction.getName(), instruction.getPavementType(), instruction.getWayType(), tr);
-        int indi = instruction.getSign();
-        if (indi == Instruction.FINISH)
-        {
-            str = tr.tr("finish");
-        } else if (indi == Instruction.REACHED_VIA)
-        {
-            str = tr.tr("stopover", ((FinishInstruction) instruction).getViaPosition());
-        } else if (indi == Instruction.CONTINUE_ON_STREET)
-        {
-            str = Helper.isEmpty(n) ? tr.tr("continue") : tr.tr("continue_onto", n);
-        } else
-        {
-            String dir = null;
-            switch (indi)
-            {
-                case Instruction.TURN_SHARP_LEFT:
-                    dir = tr.tr("sharp_left");
-                    break;
-                case Instruction.TURN_LEFT:
-                    dir = tr.tr("left");
-                    break;
-                case Instruction.TURN_SLIGHT_LEFT:
-                    dir = tr.tr("slight_left");
-                    break;
-                case Instruction.TURN_SLIGHT_RIGHT:
-                    dir = tr.tr("slight_right");
-                    break;
-                case Instruction.TURN_RIGHT:
-                    dir = tr.tr("right");
-                    break;
-                case Instruction.TURN_SHARP_RIGHT:
-                    dir = tr.tr("sharp_right");
-                    break;
-            }
-            if (dir == null)
-                throw new IllegalStateException("Indication not found " + indi);
-
-            str = Helper.isEmpty(n) ? tr.tr("turn", dir) : tr.tr("turn_onto", dir, n);
-        }
-        return str;
-    }
-
     public boolean isEmpty()
     {
         return instructions.isEmpty();
@@ -216,11 +191,22 @@ public String toString()
     }
 
     /**
-     * Creates the GPX Format out of the points.
+     * Creates the standard GPX string out of the points.
      * <p/>
      * @return string to be stored as gpx file
      */
+    public String createGPX()
+    {
+        return createGPX("GraphHopper", 0, "GMT");
+    }
+
     public String createGPX( String trackName, long startTimeMillis, String timeZoneId )
+    {
+        boolean includeElevation = getSize() > 0 ? get(0).getPoints().is3D() : false;
+        return createGPX(trackName, startTimeMillis, timeZoneId, includeElevation);
+    }
+
+    public String createGPX( String trackName, long startTimeMillis, String timeZoneId, boolean includeElevation )
     {
         SimpleDateFormat formatter = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ");
         TimeZone tz = TimeZone.getDefault();
@@ -244,8 +230,11 @@ public String createGPX( String trackName, long startTimeMillis, String timeZone
         {
             track.append("\n<trkpt lat='").append(Helper.round6(entry.getLat()));
             track.append("' lon='").append(Helper.round6(entry.getLon())).append("'>");
-            track.append("<time>").append(tzHack(formatter.format(startTimeMillis + entry.getMillis())));
-            track.append("</time>").append("</trkpt>");
+            track.append("<time>").append(tzHack(formatter.format(startTimeMillis + entry.getMillis()))).append("</time>");
+            if (includeElevation)
+                track.append("<ele>").append(Helper.round2(entry.getEle())).append("</ele>");
+
+            track.append("</trkpt>");
         }
         track.append("</trkseg>");
         track.append("</trk>");
@@ -278,48 +267,13 @@ private static String tzHack( String str )
         return str.substring(0, str.length() - 2) + ":" + str.substring(str.length() - 2);
     }
 
-    private static final TranslationMap.Translation NO_TRANSLATE = new TranslationMap.Translation()
-    {
-
-        @Override
-        public String tr( String key, Object... params )
-        {
-            if (key.equals("turn_onto") || key.equals("turn"))
-                key = "";
-
-            for (Object p : params)
-            {
-                key += " " + p.toString();
-            }
-            return key.trim();
-        }
-
-        @Override
-        public Map<String, String> asMap()
-        {
-            throw new UnsupportedOperationException("Not supported yet.");
-        }
-
-        @Override
-        public Locale getLocale()
-        {
-            throw new UnsupportedOperationException("Not supported yet.");
-        }
-
-        @Override
-        public String getLanguage()
-        {
-            throw new UnsupportedOperationException("Not supported yet.");
-        }
-    };
-
     private void createRteptBlock( StringBuilder output, Instruction instruction, Instruction nextI )
     {
         output.append("<rtept lat=\"").append(Helper.round6(instruction.getFirstLat())).
                 append("\" lon=\"").append(Helper.round6(instruction.getFirstLon())).append("\">");
 
         if (!instruction.getName().isEmpty())
-            output.append("<desc>").append(getTurnDescription(instruction, NO_TRANSLATE)).append("</desc>");
+            output.append("<desc>").append(instruction.getTurnDescription(tr)).append("</desc>");
 
         output.append("<extensions>");
         output.append("<distance>").append(Helper.round(instruction.getDistance(), 3)).append("</distance>");
@@ -337,46 +291,6 @@ private void createRteptBlock( StringBuilder output, Instruction instruction, In
         output.append("</rtept>");
     }
 
-    public static String getWayName( String name, int paveType, int wayType, TranslationMap.Translation tr )
-    {
-        String pavementName = "";
-        if (paveType == 1)
-            pavementName = tr.tr("unpaved");
-
-        String wayClass = "";
-        switch (wayType)
-        {
-            case 0:
-                wayClass = tr.tr("road");
-                break;
-            case 1:
-                wayClass = tr.tr("pushing_section");
-                break;
-            case 2:
-                wayClass = tr.tr("cycleway");
-                break;
-            case 3:
-                wayClass = tr.tr("way");
-                break;
-        }
-
-        if (name.isEmpty())
-            if (pavementName.isEmpty())
-            {
-                if (wayType == 0 || wayType == 3)
-                    return "";
-                return wayClass;
-            } else
-                return wayClass + ", " + pavementName;
-        else if (pavementName.isEmpty())
-            if (wayType == 0)
-                return name;
-            else
-                return name + ", " + wayClass;
-        else
-            return name + ", " + pavementName;
-    }
-
     /**
      * @return list of lat lon
      */
diff --git a/core/src/main/java/com/graphhopper/util/PathMerger.java b/core/src/main/java/com/graphhopper/util/PathMerger.java
index f820c2b839..c77887520a 100644
--- a/core/src/main/java/com/graphhopper/util/PathMerger.java
+++ b/core/src/main/java/com/graphhopper/util/PathMerger.java
@@ -30,12 +30,12 @@
  */
 public class PathMerger
 {
-    boolean enableInstructions = true;
-    boolean simplifyRequest = false;
-    DouglasPeucker douglasPeucker;
-    boolean calcPoints;
+    private boolean enableInstructions = true;
+    private boolean simplifyRequest = false;
+    private DouglasPeucker douglasPeucker;
+    private boolean calcPoints;
 
-    public void doWork( GHResponse rsp, List<Path> paths )
+    public void doWork( GHResponse rsp, List<Path> paths, Translation tr )
     {
         int origPoints = 0;
         StopWatch sw;
@@ -43,7 +43,7 @@ public void doWork( GHResponse rsp, List<Path> paths )
         double fullDistance = 0;
         boolean allFound = true;
 
-        InstructionList fullInstructions = new InstructionList();
+        InstructionList fullInstructions = new InstructionList(tr);
         PointList fullPoints = PointList.EMPTY;
         for (int pathIndex = 0; pathIndex < paths.size(); pathIndex++)
         {
@@ -52,7 +52,7 @@ public void doWork( GHResponse rsp, List<Path> paths )
             fullDistance += path.getDistance();
             if (enableInstructions)
             {
-                InstructionList il = path.calcInstructions();
+                InstructionList il = path.calcInstructions(tr);
                 sw = new StopWatch().start();
 
                 if (!il.isEmpty())
diff --git a/core/src/main/java/com/graphhopper/util/PointList.java b/core/src/main/java/com/graphhopper/util/PointList.java
index 8cca5fa920..bea0842850 100644
--- a/core/src/main/java/com/graphhopper/util/PointList.java
+++ b/core/src/main/java/com/graphhopper/util/PointList.java
@@ -285,10 +285,16 @@ public String toString()
      */
     public List<Double[]> toGeoJson()
     {
+        return toGeoJson(is3D);
+    }
+
+    public List<Double[]> toGeoJson( boolean includeElevation )
+    {
+
         ArrayList<Double[]> points = new ArrayList<Double[]>(size);
         for (int i = 0; i < size; i++)
         {
-            if (is3D)
+            if (includeElevation)
                 points.add(new Double[]
                 {
                     Helper.round6(getLongitude(i)), Helper.round6(getLatitude(i)), Helper.round2(getElevation(i))
diff --git a/core/src/main/java/com/graphhopper/util/QueryTorture.java b/core/src/main/java/com/graphhopper/util/QueryTorture.java
index 4651cb04eb..68a0efe6f5 100644
--- a/core/src/main/java/com/graphhopper/util/QueryTorture.java
+++ b/core/src/main/java/com/graphhopper/util/QueryTorture.java
@@ -68,10 +68,10 @@ public void start( CmdArgs read )
         if (Helper.isEmpty(baseUrl))
             throw new IllegalArgumentException("baseUrl cannot be empty!?");
 
-        if (baseUrl.endsWith("/"))
-            baseUrl = baseUrl.substring(0, baseUrl.length() - 1);
-        if (!baseUrl.endsWith("/route"))
-            baseUrl += "/route";
+        if (!baseUrl.endsWith("/"))
+            baseUrl += "/";
+        if (!baseUrl.endsWith("route/"))
+            baseUrl += "route/";
         if (!baseUrl.endsWith("?"))
             baseUrl += "?";
 
@@ -167,7 +167,8 @@ void execute( int workerNo ) throws InterruptedException
         Query query = queryQueue.take();
         try
         {
-            String res = new Downloader("QueryTorture!").setTimeout(timeout).downloadAsString(baseUrl + query.queryString);
+            String url = baseUrl + query.queryString;
+            String res = new Downloader("QueryTorture!").setTimeout(timeout).downloadAsString(url);
             if (res.contains("errors"))
                 routingErrorCounter.incrementAndGet();
             else
@@ -259,6 +260,7 @@ static Query parse( String logLine )
                 if (!param.startsWith("point="))
                     continue;
 
+                param = param.replace("%2C", ",");
                 GHPoint point = GHPoint.parse(param.substring(6));
                 if (point == null)
                     continue;
diff --git a/core/src/main/java/com/graphhopper/storage/Graph3D.java b/core/src/main/java/com/graphhopper/util/Translation.java
similarity index 50%
rename from core/src/main/java/com/graphhopper/storage/Graph3D.java
rename to core/src/main/java/com/graphhopper/util/Translation.java
index 9f077d3ac3..a99296c402 100644
--- a/core/src/main/java/com/graphhopper/storage/Graph3D.java
+++ b/core/src/main/java/com/graphhopper/util/Translation.java
@@ -1,28 +1,37 @@
 /*
- *  Licensed to GraphHopper and Peter Karich under one or more contributor
- *  license agreements. See the NOTICE file distributed with this work for 
+ *  Licensed to Peter Karich under one or more contributor license
+ *  agreements. See the NOTICE file distributed with this work for
  *  additional information regarding copyright ownership.
- * 
- *  GraphHopper licenses this file to you under the Apache License, 
- *  Version 2.0 (the "License"); you may not use this file except in 
- *  compliance with the License. You may obtain a copy of the License at
- * 
+ *
+ *  Peter Karich licenses this file to you under the Apache License,
+ *  Version 2.0 (the "License"); you may not use this file except
+ *  in compliance with the License. You may obtain a copy of the
+ *  License at
+ *
  *       http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  *  Unless required by applicable law or agreed to in writing, software
  *  distributed under the License is distributed on an "AS IS" BASIS,
  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package com.graphhopper.storage;
+package com.graphhopper.util;
+
+import java.util.Locale;
+import java.util.Map;
 
 /**
  * @author Peter Karich
  */
-public interface Graph3D extends Graph
+public interface Translation
 {
-    void setNode( int index, double lat, double lon, double height );
 
-    double getHeight( int index );
+    String tr( String key, Object... params );
+
+    Map<String, String> asMap();
+
+    Locale getLocale();
+
+    String getLanguage();
 }
diff --git a/core/src/main/java/com/graphhopper/util/TranslationMap.java b/core/src/main/java/com/graphhopper/util/TranslationMap.java
index 70b79c227e..42c6c23bb5 100644
--- a/core/src/main/java/com/graphhopper/util/TranslationMap.java
+++ b/core/src/main/java/com/graphhopper/util/TranslationMap.java
@@ -33,8 +33,9 @@
 public class TranslationMap
 {
     // use 'en_US' as reference
-    private static final List<String> LOCALES = Arrays.asList("bg", "de_DE", "el", "en_US", "es", "fil", "fr", "it", "ja", "nl", "pt_BR", "pt_PT", "ro", "ru", "si", "tr");
-    private Map<String, Translation> translations = new HashMap<String, Translation>();
+    private static final List<String> LOCALES = Arrays.asList("bg", "ca", "de_DE", "el", "en_US", "es", "fil",
+            "fr", "gl", "it", "ja", "nl", "pt_BR", "pt_PT", "ro", "ru", "si", "tr", "uk");
+    private final Map<String, Translation> translations = new HashMap<String, Translation>();
 
     /**
      * This loads the translation files from the specified folder.
@@ -103,7 +104,7 @@ public Translation getWithFallBack( Locale locale )
     }
 
     /**
-     * Returns the Translation object for the specified locale.
+     * Returns the Translation object for the specified locale and returns null if not found.
      */
     public Translation get( String locale )
     {
@@ -157,21 +158,10 @@ private void postImportHook()
         }
     }
 
-    public static interface Translation
-    {
-        String tr( String key, Object... params );
-
-        Map<String, String> asMap();
-
-        Locale getLocale();
-
-        String getLanguage();
-    }
-
     public static class TranslationHashMap implements Translation
     {
         private final Map<String, String> map = new HashMap<String, String>();
-        private final Locale locale;
+        final Locale locale;
 
         public TranslationHashMap( Locale locale )
         {
@@ -261,4 +251,40 @@ public String toString()
     {
         return translations.toString();
     }
+
+    // unused
+    private static final Translation NO_TRANSLATE = new Translation()
+    {
+
+        @Override
+        public String tr( String key, Object... params )
+        {
+            if (key.equals("turn_onto") || key.equals("turn"))
+                key = "";
+
+            for (Object p : params)
+            {
+                key += " " + p.toString();
+            }
+            return key.trim();
+        }
+
+        @Override
+        public Map<String, String> asMap()
+        {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+        @Override
+        public Locale getLocale()
+        {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+
+        @Override
+        public String getLanguage()
+        {
+            throw new UnsupportedOperationException("Not supported yet.");
+        }
+    };
 }
diff --git a/core/src/main/java/com/graphhopper/util/shapes/GHPoint3D.java b/core/src/main/java/com/graphhopper/util/shapes/GHPoint3D.java
index e2a34c803b..b24aafaaf7 100644
--- a/core/src/main/java/com/graphhopper/util/shapes/GHPoint3D.java
+++ b/core/src/main/java/com/graphhopper/util/shapes/GHPoint3D.java
@@ -33,6 +33,11 @@ public GHPoint3D( double lat, double lon, double elevation )
         this.ele = elevation;
     }
 
+    public double getElevation()
+    {
+        return ele;
+    }
+
     public double getEle()
     {
         return ele;
@@ -53,7 +58,7 @@ public boolean equals( Object obj )
             return false;
 
         @SuppressWarnings("unchecked")
-        final GHPoint3D other = (GHPoint3D) obj;        
+        final GHPoint3D other = (GHPoint3D) obj;
         if (Double.isNaN(ele))
             // very special case necessary in QueryGraph, asserted via test
             return NumHelper.equalsEps(lat, other.lat) && NumHelper.equalsEps(lon, other.lon);
diff --git a/core/src/main/resources/com/graphhopper/util/bg.txt b/core/src/main/resources/com/graphhopper/util/bg.txt
index 5ad691fc8c..62f737a5e1 100644
--- a/core/src/main/resources/com/graphhopper/util/bg.txt
+++ b/core/src/main/resources/com/graphhopper/util/bg.txt
@@ -1,6 +1,6 @@
 # do not edit manually, instead use spreadsheet https://t.co/f086oJXAEI and script ./core/files/update-translations.sh
 
-sharp_left=рязко няляво
+sharp_left=рязко наляво
 sharp_right=рязко надясно
 left=наляво
 right=надясно
@@ -22,6 +22,7 @@ web.racingbike=Състезателно колело
 web.mtb=Планинско колело
 web.car=Автомобил
 web.foot=Пеш
+web.staticlink=
 finish=Крайна цел!
 hourAbbr=ч
 dayAbbr=д
@@ -31,11 +32,11 @@ mAbbr=m
 miAbbr=mi
 ftAbbr=ft
 road=улица
-pushing_section=участък за бутане
-cycleway=велотрасе/велоалея
+off_bike=в този участък трябва да слезеш от колелото!
+cycleway=велоалея
 way=път
-paved=павиран път
-unpaved=непавиран път
+paved=асфалтиран
+unpaved=черен
 stopover=прехвърляне %1$s
 roundaboutInstruction=Влез в кръговото и използвай изход %1$s
 roundaboutInstructionWithDir=Влез в кръговото и използвай изход %1$s в посока %2$s
diff --git a/core/src/main/resources/com/graphhopper/util/ca.txt b/core/src/main/resources/com/graphhopper/util/ca.txt
new file mode 100644
index 0000000000..68137ec0ff
--- /dev/null
+++ b/core/src/main/resources/com/graphhopper/util/ca.txt
@@ -0,0 +1,42 @@
+# do not edit manually, instead use spreadsheet https://t.co/f086oJXAEI and script ./core/files/update-translations.sh
+
+sharp_left=just a l'esquerra
+sharp_right=just a la dreta
+left=esquerra
+right=dreta
+slight_left=lleugerament a l'esquerra
+slight_right=lleugerament a la dreta
+continue=continua
+continue_onto=continua per %1$s
+turn=gira %1$s
+turn_onto=gira %1$s per %2$s
+web.searchButton=Buscar
+web.fromHint=Des de
+web.toHint=Cap a
+web.moreButton=més
+web.gpxExportButton=Exportar GPX
+web.routeInfo=%1$s trigarás %2$s
+web.locationsNotFound=No hi ha cap ruta. El destí no es troba dins l'àrea.
+web.bike=Bicicleta
+web.racingbike=Bicicleta de carrera
+web.mtb=Bicicleta de montanya
+web.car=Cotxe
+web.foot=A peu
+web.staticlink=
+finish=Has arribat !!
+hourAbbr=h
+dayAbbr=d
+minAbbr=min
+kmAbbr=km
+mAbbr=m
+miAbbr=mi
+ftAbbr=pe
+road=carretera
+off_bike=Tros a peu
+cycleway=via ciclista
+way=camí
+paved=pavimentat
+unpaved=sense pavimentar
+stopover=passant per %1$s
+roundaboutInstruction=Entra a la rotonda y agafa la %1$ sortida
+roundaboutInstructionWithDir=Entra a la rotonda y agafa la %1$s sortida direcció %2$s
diff --git a/core/src/main/resources/com/graphhopper/util/de_DE.txt b/core/src/main/resources/com/graphhopper/util/de_DE.txt
index 1c33506d63..368df0f1c2 100644
--- a/core/src/main/resources/com/graphhopper/util/de_DE.txt
+++ b/core/src/main/resources/com/graphhopper/util/de_DE.txt
@@ -22,6 +22,7 @@ web.racingbike=Rennrad
 web.mtb=Mountainbike
 web.car=Auto
 web.foot=Zu Fuß
+web.staticlink=Link
 finish=Ziel erreicht!
 hourAbbr=h
 dayAbbr=d
@@ -31,7 +32,7 @@ mAbbr=m
 miAbbr=mi
 ftAbbr=ft
 road=Straße
-pushing_section=Schiebestrecke
+off_bike=Schiebestrecke
 cycleway=Radweg
 way=Weg
 paved=befestigt
diff --git a/core/src/main/resources/com/graphhopper/util/el.txt b/core/src/main/resources/com/graphhopper/util/el.txt
index 5ea0f0ccc9..62790544fb 100644
--- a/core/src/main/resources/com/graphhopper/util/el.txt
+++ b/core/src/main/resources/com/graphhopper/util/el.txt
@@ -22,6 +22,7 @@ web.racingbike=Αγωνιστικό ποδήλατο
 web.mtb=Ποδήλατο βουνού
 web.car=Αυτοκίνητο
 web.foot=Πεζός
+web.staticlink=στατική διεύθυνση
 finish=Τέρμα!
 hourAbbr=h
 dayAbbr=d
@@ -31,7 +32,7 @@ mAbbr=m
 miAbbr=mi
 ftAbbr=ft
 road=δρόμος
-pushing_section=τμήμα ώθησης
+off_bike=κατεβείτε από το ποδήλατο
 cycleway=ποδηλατόδρομος
 way=δρόμος
 paved=ασφαλτοστρωμένος
diff --git a/core/src/main/resources/com/graphhopper/util/en_US.txt b/core/src/main/resources/com/graphhopper/util/en_US.txt
index d0e6309f49..3624dec1b8 100644
--- a/core/src/main/resources/com/graphhopper/util/en_US.txt
+++ b/core/src/main/resources/com/graphhopper/util/en_US.txt
@@ -22,6 +22,7 @@ web.racingbike=Racingbike
 web.mtb=Mountainbike
 web.car=Car
 web.foot=Foot
+web.staticlink=static link
 finish=Finish!
 hourAbbr=h
 dayAbbr=d
@@ -31,7 +32,7 @@ mAbbr=m
 miAbbr=mi
 ftAbbr=ft
 road=road
-pushing_section=pushing section
+off_bike=get off the bike
 cycleway=cycleway
 way=way
 paved=paved
diff --git a/core/src/main/resources/com/graphhopper/util/es.txt b/core/src/main/resources/com/graphhopper/util/es.txt
index 8f0bb7dc0a..0763e9de51 100644
--- a/core/src/main/resources/com/graphhopper/util/es.txt
+++ b/core/src/main/resources/com/graphhopper/util/es.txt
@@ -22,6 +22,7 @@ web.racingbike=
 web.mtb=
 web.car=Coche
 web.foot=A pié
+web.staticlink=
 finish=Objetivo logrado
 hourAbbr=h
 dayAbbr=d
@@ -31,7 +32,7 @@ mAbbr=m
 miAbbr=mi
 ftAbbr=ft
 road=
-pushing_section=
+off_bike=
 cycleway=
 way=
 paved=
diff --git a/core/src/main/resources/com/graphhopper/util/fil.txt b/core/src/main/resources/com/graphhopper/util/fil.txt
index 263381d29d..b9495bae0c 100644
--- a/core/src/main/resources/com/graphhopper/util/fil.txt
+++ b/core/src/main/resources/com/graphhopper/util/fil.txt
@@ -22,6 +22,7 @@ web.racingbike=RacingBike
 web.mtb=MountainBike
 web.car=kotse
 web.foot=lumakad
+web.staticlink=
 finish=Tapusin!
 hourAbbr=h
 dayAbbr=d
@@ -31,7 +32,7 @@ mAbbr=m
 miAbbr=mi
 ftAbbr=ft
 road=kalsada 
-pushing_section=seksyon pagtulak 
+off_bike=seksyon pagtulak 
 cycleway=cycleway
 way=landas
 paved=aspaltado 
diff --git a/core/src/main/resources/com/graphhopper/util/fr.txt b/core/src/main/resources/com/graphhopper/util/fr.txt
index b9db2325a7..9b5ae097bc 100644
--- a/core/src/main/resources/com/graphhopper/util/fr.txt
+++ b/core/src/main/resources/com/graphhopper/util/fr.txt
@@ -14,14 +14,15 @@ web.searchButton=Rechercher
 web.fromHint=De
 web.toHint=À
 web.moreButton=plus
-web.gpxExportButton=
+web.gpxExportButton=Export GPX
 web.routeInfo=%1$s durera %2$s 
 web.locationsNotFound=Calcul d'itinéraire impossible. Position(s) non trouvée(s) dans la zone.
 web.bike=Vélo
-web.racingbike=
-web.mtb=
+web.racingbike=Vélo de route
+web.mtb=VTT
 web.car=Voiture
 web.foot=À pied
+web.staticlink=
 finish=Fini!
 hourAbbr=h
 dayAbbr=j
@@ -30,12 +31,12 @@ kmAbbr=km
 mAbbr=m
 miAbbr=mi
 ftAbbr=ft
-road=
-pushing_section=
-cycleway=
-way=
-paved=
-unpaved=
-stopover=
-roundaboutInstruction=
-roundaboutInstructionWithDir=
+road=route
+off_bike=Descendez du vélo
+cycleway=piste cyclable
+way=chemin
+paved=pavé
+unpaved=non-pavé
+stopover=escale %1$s
+roundaboutInstruction=empruntez le rond point et prenez la sortie %1$s
+roundaboutInstructionWithDir=empruntez le rond point et prenez la sortie %1$s, en direction de %2$s
diff --git a/core/src/main/resources/com/graphhopper/util/gl.txt b/core/src/main/resources/com/graphhopper/util/gl.txt
new file mode 100644
index 0000000000..21e510b803
--- /dev/null
+++ b/core/src/main/resources/com/graphhopper/util/gl.txt
@@ -0,0 +1,42 @@
+# do not edit manually, instead use spreadsheet https://t.co/f086oJXAEI and script ./core/files/update-translations.sh
+
+sharp_left=xusto á esquerda
+sharp_right=xusto á dereita
+left=esquerda
+right=dereita
+slight_left=vire á esquerda
+slight_right=vire á dereita
+continue=continúe
+continue_onto=continúe por %1$s
+turn=vire por %1$s
+turn_onto=vire %1$s por %2$s
+web.searchButton=buscar
+web.fromHint=dende
+web.toHint=ata
+web.moreButton=máis
+web.gpxExportButton=GPX Exportación
+web.routeInfo=%1$s tardará %2$s
+web.locationsNotFound=Non se atopou a ruta. O destino non se atopa na área
+web.bike=Bicicleta
+web.racingbike=Bicleta de carreiras
+web.mtb=Bicicleta de montaña
+web.car=automóbil
+web.foot=A pé
+web.staticlink=
+finish=Obxectivo acadado
+hourAbbr=h
+dayAbbr=d
+minAbbr=min
+kmAbbr=km
+mAbbr=mts
+miAbbr=mi
+ftAbbr=ft
+road=estrada
+off_bike=sector a pé
+cycleway=vía ciclista
+way=vía 
+paved=asfaltada
+unpaved=non pavimentada
+stopover=escala%1$s
+roundaboutInstruction= Entre na rotonda e tome a saída %1$s
+roundaboutInstructionWithDir= Entre na rotonda e tome a saída %1$s en dirección%2$s
diff --git a/core/src/main/resources/com/graphhopper/util/it.txt b/core/src/main/resources/com/graphhopper/util/it.txt
index eb4d06cd0d..b75e72cd46 100644
--- a/core/src/main/resources/com/graphhopper/util/it.txt
+++ b/core/src/main/resources/com/graphhopper/util/it.txt
@@ -2,14 +2,14 @@
 
 sharp_left=nettamente a sinistra
 sharp_right=nettamente a destra
-left=sinistra
-right=destra
+left=a sinistra
+right=a destra
 slight_left=leggermente a sinistra
 slight_right=leggermente a destra
 continue=continua
 continue_onto=continua su %1$s
-turn=gira a %1$s
-turn_onto=gira a %1$s su %2$s
+turn=gira %1$s
+turn_onto=gira %1$s su %2$s
 web.searchButton=Ricerca
 web.fromHint=Da
 web.toHint=A
@@ -22,6 +22,7 @@ web.racingbike=Bici da corsa
 web.mtb=Mountainbike
 web.car=Auto
 web.foot=A piedi
+web.staticlink=
 finish=Arrivo!
 hourAbbr=hh
 dayAbbr=gg
@@ -31,7 +32,7 @@ mAbbr=mt
 miAbbr=mi
 ftAbbr=ft
 road=strada
-pushing_section=sezione a piedi
+off_bike=sezione a piedi
 cycleway=pista ciclabile
 way=via
 paved=pavimentata
diff --git a/core/src/main/resources/com/graphhopper/util/ja.txt b/core/src/main/resources/com/graphhopper/util/ja.txt
index 133306cb96..5a19974261 100644
--- a/core/src/main/resources/com/graphhopper/util/ja.txt
+++ b/core/src/main/resources/com/graphhopper/util/ja.txt
@@ -22,6 +22,7 @@ web.racingbike=レースバイク
 web.mtb=マウンテンバイク
 web.car=車
 web.foot=徒歩
+web.staticlink=
 finish=目標達成
 hourAbbr=時間
 dayAbbr=日
@@ -31,7 +32,7 @@ mAbbr=m
 miAbbr=mi
 ftAbbr=ft
 road=路
-pushing_section=自転車を押して歩く
+off_bike=自転車を押して歩く
 cycleway=自転車用道路
 way=道
 paved=舗装された道
diff --git a/core/src/main/resources/com/graphhopper/util/nl.txt b/core/src/main/resources/com/graphhopper/util/nl.txt
index e138cf3dc3..01bc1fd720 100644
--- a/core/src/main/resources/com/graphhopper/util/nl.txt
+++ b/core/src/main/resources/com/graphhopper/util/nl.txt
@@ -22,6 +22,7 @@ web.racingbike=racefiets
 web.mtb=mountainbike
 web.car=auto
 web.foot=te voet
+web.staticlink=
 finish=bestemming bereikt!
 hourAbbr=h
 dayAbbr=d
@@ -31,7 +32,7 @@ mAbbr=m
 miAbbr=mi
 ftAbbr=ft
 road=weg
-pushing_section=voetpad
+off_bike=voetpad
 cycleway=fietspad
 way=weg
 paved=verhard
diff --git a/core/src/main/resources/com/graphhopper/util/pt_BR.txt b/core/src/main/resources/com/graphhopper/util/pt_BR.txt
index af5ae34595..955bbea2c1 100644
--- a/core/src/main/resources/com/graphhopper/util/pt_BR.txt
+++ b/core/src/main/resources/com/graphhopper/util/pt_BR.txt
@@ -22,6 +22,7 @@ web.racingbike=BicicletadeCorrida
 web.mtb=Mountainbike
 web.car=Carro
 web.foot=A pé
+web.staticlink=
 finish=Destino alcançado
 hourAbbr=h
 dayAbbr=d
@@ -31,7 +32,7 @@ mAbbr=m
 miAbbr=mi
 ftAbbr=ft
 road=
-pushing_section=
+off_bike=
 cycleway=
 way=
 paved=
diff --git a/core/src/main/resources/com/graphhopper/util/pt_PT.txt b/core/src/main/resources/com/graphhopper/util/pt_PT.txt
index ffaf9c9bed..216b2764b0 100644
--- a/core/src/main/resources/com/graphhopper/util/pt_PT.txt
+++ b/core/src/main/resources/com/graphhopper/util/pt_PT.txt
@@ -7,12 +7,12 @@ right=direita
 slight_left=esquerda ligeira
 slight_right=direita ligeira
 continue=continuar
-continue_onto=continue para %1$s
+continue_onto=continue na %1$s
 turn=vire à %1$s
 turn_onto=vire à %1$s para %2$s
 web.searchButton=Pesquisar
-web.fromHint=De
-web.toHint=Para
+web.fromHint=Iniciar de
+web.toHint=Acabar em
 web.moreButton=mais
 web.gpxExportButton=Exportar GPX
 web.routeInfo=%1$s irá levar %2$s
@@ -22,6 +22,7 @@ web.racingbike=Bicicleta de corrida
 web.mtb=Bicicleta de montanha
 web.car=Carro
 web.foot=A pé
+web.staticlink=
 finish=meta alcançada
 hourAbbr=h
 dayAbbr=d
@@ -31,7 +32,7 @@ mAbbr=m
 miAbbr=mi
 ftAbbr=ft
 road=Estrada
-pushing_section=Secção de envio
+off_bike=Secção de envio
 cycleway=Ciclovia
 way=Caminho
 paved=Pavimentado
diff --git a/core/src/main/resources/com/graphhopper/util/ro.txt b/core/src/main/resources/com/graphhopper/util/ro.txt
index 63dfb2b828..485093f43a 100644
--- a/core/src/main/resources/com/graphhopper/util/ro.txt
+++ b/core/src/main/resources/com/graphhopper/util/ro.txt
@@ -22,6 +22,7 @@ web.racingbike=bicicletă de curse
 web.mtb=Mountainbike
 web.car=mașină
 web.foot=pe jos
+web.staticlink=
 finish=obiectiv atins
 hourAbbr=h
 dayAbbr=z
@@ -31,7 +32,7 @@ mAbbr=m
 miAbbr=mi
 ftAbbr=ft
 road=stradă
-pushing_section=zonă pentru împins
+off_bike=zonă pentru împins
 cycleway=pistă pentru biciclete
 way=cale
 paved=pavat
diff --git a/core/src/main/resources/com/graphhopper/util/ru.txt b/core/src/main/resources/com/graphhopper/util/ru.txt
index 9a86e5bd34..24dcb6bc49 100644
--- a/core/src/main/resources/com/graphhopper/util/ru.txt
+++ b/core/src/main/resources/com/graphhopper/util/ru.txt
@@ -22,6 +22,7 @@ web.racingbike=
 web.mtb=
 web.car=Автомобиль
 web.foot=Пешком
+web.staticlink=
 finish=Целевая достигнуто
 hourAbbr=h
 dayAbbr=d
@@ -31,7 +32,7 @@ mAbbr=m
 miAbbr=mi
 ftAbbr=ft
 road=
-pushing_section=
+off_bike=
 cycleway=
 way=
 paved=
diff --git a/core/src/main/resources/com/graphhopper/util/si.txt b/core/src/main/resources/com/graphhopper/util/si.txt
index 3ca6dd3a57..cd7f0d9269 100644
--- a/core/src/main/resources/com/graphhopper/util/si.txt
+++ b/core/src/main/resources/com/graphhopper/util/si.txt
@@ -22,6 +22,7 @@ web.racingbike=cestno kolo
 web.mtb=gorsko kolo
 web.car=Avto
 web.foot=Peš
+web.staticlink=
 finish=Konec!
 hourAbbr=h
 dayAbbr=d
@@ -31,7 +32,7 @@ mAbbr=m
 miAbbr=mi
 ftAbbr=ft
 road=cesta
-pushing_section=peš odsek
+off_bike=peš odsek
 cycleway=kolesarska steza
 way=smer
 paved=tlakovana
diff --git a/core/src/main/resources/com/graphhopper/util/tr.txt b/core/src/main/resources/com/graphhopper/util/tr.txt
index fe35e31cd1..275aae67c8 100644
--- a/core/src/main/resources/com/graphhopper/util/tr.txt
+++ b/core/src/main/resources/com/graphhopper/util/tr.txt
@@ -22,6 +22,7 @@ web.racingbike=
 web.mtb=
 web.car=Otomobil
 web.foot=Yürüyerek
+web.staticlink=
 finish=Bitti !
 hourAbbr=s
 dayAbbr=g
@@ -31,7 +32,7 @@ mAbbr=m
 miAbbr=mi
 ftAbbr=ft
 road=
-pushing_section=
+off_bike=
 cycleway=
 way=
 paved=
diff --git a/core/src/main/resources/com/graphhopper/util/uk.txt b/core/src/main/resources/com/graphhopper/util/uk.txt
new file mode 100644
index 0000000000..09f29e04db
--- /dev/null
+++ b/core/src/main/resources/com/graphhopper/util/uk.txt
@@ -0,0 +1,42 @@
+# do not edit manually, instead use spreadsheet https://t.co/f086oJXAEI and script ./core/files/update-translations.sh
+
+sharp_left=різко наліво
+sharp_right=різко направо
+left=наліво
+right=направо
+slight_left=трохи лівіше
+slight_right=трохи правіше
+continue=продовжуйте
+continue_onto=продовжуйте по %1$s
+turn=поверніть %1$s
+turn_onto=поверніть %1$s на %2$s
+web.searchButton=Пошук
+web.fromHint=Від
+web.toHint=До
+web.moreButton=ще
+web.gpxExportButton=Експорт в GPX
+web.routeInfo=%1$s займе %2$s
+web.locationsNotFound=Побудова маршруту неможлива. Місцезнаходження не визначено.
+web.bike=Велосипед
+web.racingbike=Шосейний велосипед
+web.mtb=Гірський велосипед
+web.car=Автомобіль
+web.foot=Пішки
+web.staticlink=
+finish=Фініш!
+hourAbbr=год
+dayAbbr=д
+minAbbr=хв
+kmAbbr=км
+mAbbr=м
+miAbbr=милі
+ftAbbr=фути
+road=дорога
+off_bike=секція, що відкривається натисканням
+cycleway=велосипедна доріжка
+way=шлях
+paved=з покриттям
+unpaved=без покриття
+stopover=зупинка %1$s
+roundaboutInstruction=в’їзд на кільце та виїзд по %1$s
+roundaboutInstructionWithDir=в’їзд на кільце та виїзд по %1$s у напрямку %2$s
diff --git a/core/src/test/java/com/graphhopper/reader/OSMReaderTest.java b/core/src/test/java/com/graphhopper/reader/OSMReaderTest.java
index 137a9f41b7..e0714be4da 100644
--- a/core/src/test/java/com/graphhopper/reader/OSMReaderTest.java
+++ b/core/src/test/java/com/graphhopper/reader/OSMReaderTest.java
@@ -114,7 +114,7 @@ protected DataReader createReader( GraphStorage tmpGraph )
         @Override
         protected DataReader importData() throws IOException
         {
-            GraphStorage tmpGraph = newGraph(dir, getEncodingManager(), is3D(), isEnableTurnRestrictions());
+            GraphStorage tmpGraph = newGraph(dir, getEncodingManager(), hasElevation(), isEnableTurnRestrictions());
             setGraph(tmpGraph);
 
             DataReader osmReader = createReader(tmpGraph);
@@ -664,7 +664,7 @@ protected double getElevation( OSMNode node )
                     }
                 });
             }
-        }.set3D(true).importOrLoad();
+        }.setElevation(true).importOrLoad();
 
         Graph graph = hopper.getGraph();
         int n20 = AbstractGraphStorageTester.getIdOf(graph, 52);
@@ -681,8 +681,7 @@ public void testReadEleFromDataProvider()
         // get N10E046.hgt.zip
         ElevationProvider provider = new SRTMProvider();
         provider.setCacheDir(new File("./files"));
-        hopper.set3D(true).
-                setElevationProvider(provider);
+        hopper.setElevationProvider(provider);
         hopper.importOrLoad();
 
         Graph graph = hopper.getGraph();
diff --git a/core/src/test/java/com/graphhopper/routing/GraphHopperIT.java b/core/src/test/java/com/graphhopper/routing/GraphHopperIT.java
index 2d07880ee2..03c6072004 100644
--- a/core/src/test/java/com/graphhopper/routing/GraphHopperIT.java
+++ b/core/src/test/java/com/graphhopper/routing/GraphHopperIT.java
@@ -23,12 +23,10 @@
 import com.graphhopper.reader.dem.SRTMProvider;
 import com.graphhopper.routing.util.*;
 import com.graphhopper.util.*;
-import com.graphhopper.util.TranslationMap.Translation;
 import com.graphhopper.util.shapes.GHPoint;
 
 import java.io.File;
 import java.util.List;
-import java.util.Locale;
 import java.util.Map;
 import org.junit.After;
 import org.junit.Test;
@@ -40,8 +38,6 @@
  */
 public class GraphHopperIT
 {
-    TranslationMap trMap = TranslationMapTest.SINGLETON;
-    Translation tr = trMap.getWithFallBack(Locale.US);
     String graphFile = "target/graph-GraphHopperIT";
     String osmFile = "files/monaco.osm.gz";
     String vehicle = "FOOT";
@@ -81,7 +77,7 @@ public void testMonacoWithInstructions() throws Exception
         InstructionList il = rsp.getInstructions();
         assertEquals(13, il.size());
 
-        List<Map<String, Object>> resultJson = il.createJson(tr);
+        List<Map<String, Object>> resultJson = il.createJson();
         // TODO roundabout fine tuning -> enter + leave roundabout (+ two rounabouts -> is it necessary if we do not leave the street?)
         assertEquals("Continue onto Avenue des Guelfes", resultJson.get(0).get("text"));
         assertEquals("Turn slight left onto Avenue des Papalins", resultJson.get(1).get("text"));
@@ -146,6 +142,64 @@ public void testSRTMWithInstructions() throws Exception
                         + "(43.7316401391843,7.420850152243305,52.0), (43.731674039326776,7.421050014072285,45.0)"));
     }
 
+    @Test
+    public void testKremsCyclewayInstructionsWithWayTypeInfo()
+    {
+        String osmFile = "files/krems.osm.gz";
+        String graphFile = "target/graph-krems";
+        String vehicle = "BIKE";
+        String importVehicles = "CAR,BIKE";
+        String weightCalcStr = "fastest";
+
+        try
+        {
+            // make sure we are using fresh graphhopper files with correct vehicle
+            Helper.removeDir(new File(graphFile));
+            GraphHopper hopper = new GraphHopper().
+                    setInMemory(true).
+                    setOSMFile(osmFile).
+                    disableCHShortcuts().
+                    setGraphHopperLocation(graphFile).
+                    setEncodingManager(new EncodingManager(importVehicles)).
+                    importOrLoad();
+
+            GHResponse rsp = hopper.route(new GHRequest(48.410987, 15.599492, 48.383419, 15.659294).
+                    setAlgorithm("astar").setVehicle(vehicle).setWeighting(weightCalcStr));
+
+            assertEquals(6932.24, rsp.getDistance(), .1);
+            assertEquals(110, rsp.getPoints().getSize());
+
+            InstructionList il = rsp.getInstructions();
+            assertEquals(19, il.size());
+            List<Map<String, Object>> resultJson = il.createJson();
+
+            assertEquals("Continue onto Obere Landstraße", resultJson.get(0).get("text"));
+            assertEquals("get off the bike", resultJson.get(0).get("annotationText"));
+            assertEquals("Turn sharp left onto Kirchengasse", resultJson.get(1).get("text"));
+            assertEquals("get off the bike", resultJson.get(1).get("annotationText"));
+
+            assertEquals("Turn sharp right onto Pfarrplatz", resultJson.get(2).get("text"));
+            assertEquals("Turn right onto Margarethenstraße", resultJson.get(3).get("text"));
+            assertEquals("Turn left onto Hoher Markt", resultJson.get(4).get("text"));
+            assertEquals("Turn slight right onto Wegscheid", resultJson.get(5).get("text"));
+            assertEquals("Turn slight left onto Untere Landstraße", resultJson.get(6).get("text"));
+            assertEquals("Turn right onto Ringstraße, L73", resultJson.get(7).get("text"));
+            assertEquals("Continue onto Eyblparkstraße", resultJson.get(8).get("text"));
+            assertEquals("Continue onto Austraße", resultJson.get(9).get("text"));
+            assertEquals("Turn slight left onto Rechte Kremszeile", resultJson.get(10).get("text"));
+            //..
+            assertEquals("Turn right onto Treppelweg", resultJson.get(15).get("text"));
+            assertEquals("cycleway", resultJson.get(15).get("annotationText"));
+
+        } catch (Exception ex)
+        {
+            throw new RuntimeException("cannot handle osm file " + osmFile, ex);
+        } finally
+        {
+            Helper.removeDir(new File(graphFile));
+        }
+    }
+
     @Test
     public void testMonacoVia()
     {
@@ -168,7 +222,7 @@ public void testMonacoVia()
 
         InstructionList il = rsp.getInstructions();
         assertEquals(26, il.size());
-        List<Map<String, Object>> resultJson = il.createJson(tr);
+        List<Map<String, Object>> resultJson = il.createJson();
         assertEquals("Continue onto Avenue des Guelfes", resultJson.get(0).get("text"));
         assertEquals("Turn slight left onto Avenue des Papalins", resultJson.get(1).get("text"));
         assertEquals("Turn sharp right onto Quai Jean-Charles Rey", resultJson.get(2).get("text"));
diff --git a/core/src/test/java/com/graphhopper/routing/PathTest.java b/core/src/test/java/com/graphhopper/routing/PathTest.java
index 3245735630..adfe9ea1ec 100644
--- a/core/src/test/java/com/graphhopper/routing/PathTest.java
+++ b/core/src/test/java/com/graphhopper/routing/PathTest.java
@@ -43,7 +43,7 @@
     private final EncodingManager carManager = new EncodingManager("CAR");
     private final FlagEncoder encoder = new EncodingManager("CAR").getEncoder("CAR");
     private final TranslationMap trMap = TranslationMapTest.SINGLETON;
-    private final TranslationMap.Translation tr = trMap.getWithFallBack(Locale.US);
+    private final Translation tr = trMap.getWithFallBack(Locale.US);
 
     @Test
     public void testFound()
@@ -91,8 +91,8 @@ public void testWayList()
         path.extract();
         // 0-1-2
         assertPList(Helper.createPointList(0, 0.1, 8, 1, 9, 1, 1, 0.1, 10, 1, 11, 1, 2, 0.1), path.calcPoints());
-        InstructionList instr = path.calcInstructions();
-        List<Map<String, Object>> res = instr.createJson(tr);
+        InstructionList instr = path.calcInstructions(tr);
+        List<Map<String, Object>> res = instr.createJson();
         Map<String, Object> tmp = res.get(0);
         assertEquals(3000.0, tmp.get("distance"));
         assertEquals(504000L, tmp.get("time"));
@@ -115,8 +115,8 @@ public void testWayList()
         e1.parent.parent = new EdgeEntry(-1, 0, 1);
         path.setEdgeEntry(e1);
         path.extract();
-        instr = path.calcInstructions();
-        res = instr.createJson(tr);
+        instr = path.calcInstructions(tr);
+        res = instr.createJson();
 
         tmp = res.get(0);
         assertEquals(1000.0, tmp.get("distance"));
@@ -141,9 +141,9 @@ public void testWayList()
         path.extract();
         // 2-1-0
         assertPList(Helper.createPointList(2, 0.1, 11, 1, 10, 1, 1, 0.1, 9, 1, 8, 1, 0, 0.1), path.calcPoints());
-        instr = path.calcInstructions();
-
-        res = instr.createJson(tr);
+        
+        instr = path.calcInstructions(tr);
+        res = instr.createJson();
         tmp = res.get(0);
         assertEquals(2000.0, tmp.get("distance"));
         assertEquals(144000L, tmp.get("time"));
@@ -192,7 +192,7 @@ public void testFindInstruction()
         path.setEdgeEntry(e1);
         path.extract();
 
-        path.calcInstructions();
+        path.calcInstructions(tr);
         Instruction nextInstr1 = path.findInstruction(0.0, 0.1);
         Instruction nextInstr2 = path.findInstruction(5.0, 0.4);
         Instruction nextInstr3 = path.findInstruction(9.0, 0.53);
diff --git a/core/src/test/java/com/graphhopper/routing/QueryGraphTest.java b/core/src/test/java/com/graphhopper/routing/QueryGraphTest.java
index afd46f539e..2622a32343 100644
--- a/core/src/test/java/com/graphhopper/routing/QueryGraphTest.java
+++ b/core/src/test/java/com/graphhopper/routing/QueryGraphTest.java
@@ -379,6 +379,20 @@ public void testEdgesShareOneNode()
         assertNotNull(GHUtility.getEdge(queryGraph, 0, 3));
     }
 
+    @Test
+    public void testGetEdgeProps()
+    {
+        initGraph(g);
+        EdgeIteratorState e1 = GHUtility.getEdge(g, 0, 2);
+        QueryGraph queryGraph = new QueryGraph(g);
+        QueryResult res1 = createLocationResult(0.5, 0, e1, 0, EDGE);
+        queryGraph.lookup(Arrays.asList(res1));
+        // get virtual edge
+        e1 = GHUtility.getEdge(queryGraph, res1.getClosestNode(), 0);
+        EdgeIteratorState e2 = queryGraph.getEdgeProps(e1.getEdge(), Integer.MIN_VALUE);
+        assertEquals(e1.getEdge(), e2.getEdge());
+    }
+
     PointList getPoints( Graph g, int base, int adj )
     {
         EdgeIteratorState edge = GHUtility.getEdge(g, base, adj);
diff --git a/core/src/test/java/com/graphhopper/routing/RoutingAlgorithmIT.java b/core/src/test/java/com/graphhopper/routing/RoutingAlgorithmIT.java
index 1b501cbd02..ec6a4b472f 100644
--- a/core/src/test/java/com/graphhopper/routing/RoutingAlgorithmIT.java
+++ b/core/src/test/java/com/graphhopper/routing/RoutingAlgorithmIT.java
@@ -81,7 +81,7 @@ public void setUp()
     @Test
     public void testMonaco()
     {
-        runAlgo(testCollector, "files/monaco.osm.gz", "target/graph-monaco",
+        runAlgo(testCollector, "files/monaco.osm.gz", "target/monaco-gh",
                 createMonacoCar(), "CAR", true, "CAR", "shortest", false);
         assertEquals(testCollector.toString(), 0, testCollector.errors.size());
     }
@@ -96,7 +96,7 @@ public void testOneWayCircleBug()
         // now exacle the opposite direction: going into the circle (shorter)
         list.add(new OneRun(51.376509, -0.530863, 51.376197, -0.531576, 75, 15));
 
-        runAlgo(testCollector, "files/circle-bug.osm.gz", "target/graph-circle-bug",
+        runAlgo(testCollector, "files/circle-bug.osm.gz", "target/circle-bug-gh",
                 list, "CAR", true, "CAR", "shortest", false);
         assertEquals(testCollector.toString(), 0, testCollector.errors.size());
     }
@@ -115,7 +115,7 @@ public void testMoscow()
         // respect one way!
         // http://localhost:8989/?point=55.819066%2C37.596374&point=55.818898%2C37.59661
         list.add(new OneRun(55.819066, 37.596374, 55.818898, 37.59661, 1114, 23));
-        runAlgo(testCollector, "files/moscow.osm.gz", "target/graph-moscow",
+        runAlgo(testCollector, "files/moscow.osm.gz", "target/moscow-gh",
                 list, "CAR", true, "CAR", "fastest", false);
         assertEquals(testCollector.toString(), 0, testCollector.errors.size());
     }
@@ -130,7 +130,7 @@ public void testMonacoFastest()
         list.get(3).setLocs(1, 141);
         list.get(4).setDistance(1, 2149);
         list.get(4).setLocs(1, 120);
-        runAlgo(testCollector, "files/monaco.osm.gz", "target/graph-monaco",
+        runAlgo(testCollector, "files/monaco.osm.gz", "target/monaco-gh",
                 list, "CAR", true, "CAR", "fastest", false);
         assertEquals(testCollector.toString(), 0, testCollector.errors.size());
     }
@@ -147,7 +147,7 @@ public void testMonacoMixed()
         list.get(3).setLocs(1, 137);
         list.get(4).setLocs(1, 116);
 
-        runAlgo(testCollector, "files/monaco.osm.gz", "target/graph-monaco",
+        runAlgo(testCollector, "files/monaco.osm.gz", "target/monaco-gh",
                 list, "CAR,FOOT", false, "CAR", "shortest", false);
         assertEquals(testCollector.toString(), 0, testCollector.errors.size());
     }
@@ -165,7 +165,7 @@ public void testMonacoMixed()
     @Test
     public void testMonacoFoot()
     {
-        runAlgo(testCollector, "files/monaco.osm.gz", "target/graph-monaco",
+        runAlgo(testCollector, "files/monaco.osm.gz", "target/monaco-gh",
                 createMonacoFoot(), "FOOT", true, "FOOT", "shortest", false);
         assertEquals(testCollector.toString(), 0, testCollector.errors.size());
     }
@@ -180,7 +180,7 @@ public void testMonacoFoot3D()
         list.get(2).setDistance(1, 2182);
         list.get(3).setDistance(1, 1498);
 
-        runAlgo(testCollector, "files/monaco.osm.gz", "target/graph-monaco",
+        runAlgo(testCollector, "files/monaco.osm.gz", "target/monaco-gh",
                 list, "FOOT", true, "FOOT", "shortest", true);
         assertEquals(testCollector.toString(), 0, testCollector.errors.size());
     }
@@ -189,17 +189,23 @@ public void testMonacoFoot3D()
     public void testMonacoBike3D_twoSpeedsPerEdge()
     {
         List<OneRun> list = new ArrayList<OneRun>();
-        list.add(new OneRun(43.730864, 7.420771, 43.727687, 7.418737, 1724, 87));
-        list.add(new OneRun(43.727687, 7.418737, 43.74958, 7.436566, 3835, 176));
-        list.add(new OneRun(43.728677, 7.41016, 43.739213, 7.427806, 2425, 122));
-        list.add(new OneRun(43.733802, 7.413433, 43.739662, 7.424355, 1578, 86));
+        // 1. alternative: go over steps 'Rampe Major' => 1.7km vs. around 2.7km
+        list.add(new OneRun(43.730864, 7.420771, 43.727687, 7.418737, 1740, 88));
+        // 2.
+        list.add(new OneRun(43.728499, 7.417907, 43.74958, 7.436566, 4492, 230));
+        // 3.
+        list.add(new OneRun(43.728677, 7.41016, 43.739213, 7.427806, 2782, 152));
+        // 4.
+        list.add(new OneRun(43.733802, 7.413433, 43.739662, 7.424355, 1609, 85));
 
         // try reverse direction
-        list.add(new OneRun(43.727687, 7.418737, 43.730864, 7.420771, 2623, 117));
-        list.add(new OneRun(43.74958, 7.436566, 43.727687, 7.418737, 4255, 163));
-        list.add(new OneRun(43.739213, 7.427806, 43.728677, 7.41016, 2852, 149));
-        list.add(new OneRun(43.739662, 7.424355, 43.733802, 7.413433, 2382, 107));
-        runAlgo(testCollector, "files/monaco.osm.gz", "target/graph-monaco",
+        // 1.
+        list.add(new OneRun(43.727687, 7.418737, 43.730864, 7.420771, 1928, 93));
+        list.add(new OneRun(43.74958, 7.436566, 43.728499, 7.417907, 4073, 172));
+        list.add(new OneRun(43.739213, 7.427806, 43.728677, 7.41016, 3043, 157));
+        // 4. avoid tunnel(s)!
+        list.add(new OneRun(43.739662, 7.424355, 43.733802, 7.413433, 1586, 80));
+        runAlgo(testCollector, "files/monaco.osm.gz", "target/monaco-gh",
                 list, "BIKE2", true, "BIKE2", "fastest", true);
         assertEquals(testCollector.toString(), 0, testCollector.errors.size());
     }
@@ -212,7 +218,7 @@ public void testMonacoBike()
         list.add(new OneRun(43.727687, 7.418737, 43.74958, 7.436566, 3580, 168));
         list.add(new OneRun(43.728677, 7.41016, 43.739213, 7.427806, 2323, 121));
         list.add(new OneRun(43.733802, 7.413433, 43.739662, 7.424355, 1434, 89));
-        runAlgo(testCollector, "files/monaco.osm.gz", "target/graph-monaco",
+        runAlgo(testCollector, "files/monaco.osm.gz", "target/monaco-gh",
                 list, "BIKE", true, "BIKE", "shortest", false);
         assertEquals(testCollector.toString(), 0, testCollector.errors.size());
     }
@@ -221,16 +227,17 @@ public void testMonacoBike()
     public void testMonacoMountainBike()
     {
         List<OneRun> list = new ArrayList<OneRun>();
-        list.add(new OneRun(43.730864, 7.420771, 43.727687, 7.418737, 2332, 108));
+        list.add(new OneRun(43.730864, 7.420771, 43.727687, 7.418737, 2322, 110));
         list.add(new OneRun(43.727687, 7.418737, 43.74958, 7.436566, 3588, 170));
-        list.add(new OneRun(43.728677, 7.41016, 43.739213, 7.427806, 2700, 170));
-        list.add(new OneRun(43.733802, 7.413433, 43.739662, 7.424355, 1475, 88));
-        runAlgo(testCollector, "files/monaco.osm.gz", "target/graph-monaco",
+        list.add(new OneRun(43.728677, 7.41016, 43.739213, 7.427806, 2323, 122));
+        // hard to select between secondard and primary (both are AVOID for mtb)
+        list.add(new OneRun(43.733802, 7.413433, 43.739662, 7.424355, 1459, 88));
+        runAlgo(testCollector, "files/monaco.osm.gz", "target/monaco-gh",
                 list, "MTB", true, "MTB", "fastest", false);
         assertEquals(testCollector.toString(), 0, testCollector.errors.size());
 
-        runAlgo(testCollector, "files/monaco.osm.gz", "target/graph-monaco",
-                list, "BIKE,MTB,RACINGBIKE", false, "MTB", "fastest", false);
+        runAlgo(testCollector, "files/monaco.osm.gz", "target/monaco-gh",
+                list, "MTB,RACINGBIKE", false, "MTB", "fastest", false);
         assertEquals(testCollector.toString(), 0, testCollector.errors.size());
     }
 
@@ -242,11 +249,11 @@ public void testMonacoRacingBike()
         list.add(new OneRun(43.727687, 7.418737, 43.74958, 7.436566, 3588, 170));
         list.add(new OneRun(43.728677, 7.41016, 43.739213, 7.427806, 2323, 122));
         list.add(new OneRun(43.733802, 7.413433, 43.739662, 7.424355, 1490, 84));
-        runAlgo(testCollector, "files/monaco.osm.gz", "target/graph-monaco",
+        runAlgo(testCollector, "files/monaco.osm.gz", "target/monaco-gh",
                 list, "RACINGBIKE", true, "RACINGBIKE", "fastest", false);
         assertEquals(testCollector.toString(), 0, testCollector.errors.size());
 
-        runAlgo(testCollector, "files/monaco.osm.gz", "target/graph-monaco",
+        runAlgo(testCollector, "files/monaco.osm.gz", "target/monaco-gh",
                 list, "CAR,BIKE,RACINGBIKE", false, "RACINGBIKE", "fastest", false);
         assertEquals(testCollector.toString(), 0, testCollector.errors.size());
     }
@@ -256,14 +263,14 @@ public void testKremsBikeRelation()
     {
         List<OneRun> list = new ArrayList<OneRun>();
         list.add(new OneRun(48.409523, 15.602394, 48.375466, 15.72916, 12491, 159));
-        list.add(new OneRun(48.410061, 15.63951, 48.411386, 15.604899, 3113, 87));
+        list.add(new OneRun(48.410061, 15.63951, 48.411386, 15.604899, 3091, 92));
         list.add(new OneRun(48.412294, 15.62007, 48.398306, 15.609667, 3965, 94));
 
-        runAlgo(testCollector, "files/krems.osm.gz", "target/graph-krems",
+        runAlgo(testCollector, "files/krems.osm.gz", "target/krems-gh",
                 list, "BIKE", true, "BIKE", "fastest", false);
         assertEquals(testCollector.toString(), 0, testCollector.errors.size());
 
-        runAlgo(testCollector, "files/krems.osm.gz", "target/graph-krems",
+        runAlgo(testCollector, "files/krems.osm.gz", "target/krems-gh",
                 list, "CAR,BIKE,MTB", false, "BIKE", "fastest", false);
         assertEquals(testCollector.toString(), 0, testCollector.errors.size());
     }
@@ -272,15 +279,15 @@ public void testKremsBikeRelation()
     public void testKremsMountainBikeRelation()
     {
         List<OneRun> list = new ArrayList<OneRun>();
-        list.add(new OneRun(48.409523, 15.602394, 48.375466, 15.72916, 12480, 156));
-        list.add(new OneRun(48.410061, 15.63951, 48.411386, 15.604899, 3113, 87));
+        list.add(new OneRun(48.409523, 15.602394, 48.375466, 15.72916, 12574, 169));
+        list.add(new OneRun(48.410061, 15.63951, 48.411386, 15.604899, 3101, 94));
         list.add(new OneRun(48.412294, 15.62007, 48.398306, 15.609667, 3965, 95));
 
-        runAlgo(testCollector, "files/krems.osm.gz", "target/graph-krems",
+        runAlgo(testCollector, "files/krems.osm.gz", "target/krems-gh",
                 list, "MTB", true, "MTB", "fastest", false);
         assertEquals(testCollector.toString(), 0, testCollector.errors.size());
 
-        runAlgo(testCollector, "files/krems.osm.gz", "target/graph-krems",
+        runAlgo(testCollector, "files/krems.osm.gz", "target/krems-gh",
                 list, "CAR,BIKE,MTB", false, "MTB", "fastest", false);
         assertEquals(testCollector.toString(), 0, testCollector.errors.size());
     }
@@ -296,7 +303,7 @@ public void testKremsMountainBikeRelation()
     @Test
     public void testAndorra()
     {
-        runAlgo(testCollector, "files/andorra.osm.gz", "target/graph-andorra",
+        runAlgo(testCollector, "files/andorra.osm.gz", "target/andorra-gh",
                 createAndorra(), "CAR", true, "CAR", "shortest", false);
         assertEquals(testCollector.toString(), 0, testCollector.errors.size());
     }
@@ -304,7 +311,7 @@ public void testAndorra()
     @Test
     public void testAndorraPbf()
     {
-        runAlgo(testCollector, "files/andorra.osm.pbf", "target/graph-andorra",
+        runAlgo(testCollector, "files/andorra.osm.pbf", "target/andorra-gh",
                 createAndorra(), "CAR", true, "CAR", "shortest", false);
         assertEquals(testCollector.toString(), 0, testCollector.errors.size());
     }
@@ -318,7 +325,7 @@ public void testAndorraFoot()
         list.get(1).setDistance(1, 12701);
         list.get(1).setLocs(1, 431);
 
-        runAlgo(testCollector, "files/andorra.osm.gz", "target/graph-andorra",
+        runAlgo(testCollector, "files/andorra.osm.gz", "target/andorra-gh",
                 list, "FOOT", true, "FOOT", "shortest", false);
         assertEquals(testCollector.toString(), 0, testCollector.errors.size());
     }
@@ -334,7 +341,7 @@ public void testCampoGrande()
         List<OneRun> list = new ArrayList<OneRun>();
         list.add(new OneRun(-20.4, -54.6, -20.6, -54.54, 25516, 271));
         list.add(new OneRun(-20.43, -54.54, -20.537, -54.674, 18009, 237));
-        runAlgo(testCollector, "files/campo-grande.osm.gz", "target/graph-campo-grande", list,
+        runAlgo(testCollector, "files/campo-grande.osm.gz", "target/campo-grande-gh", list,
                 "CAR", false, "CAR", "shortest", false);
         assertEquals(testCollector.toString(), 0, testCollector.errors.size());
     }
@@ -350,11 +357,37 @@ public void testMonacoVia()
         List<OneRun> list = new ArrayList<OneRun>();
         list.add(oneRun);
 
-        runAlgo(testCollector, "files/monaco.osm.gz", "target/graph-monaco",
+        runAlgo(testCollector, "files/monaco.osm.gz", "target/monaco-gh",
                 list, "CAR", true, "CAR", "shortest", false);
         assertEquals(testCollector.toString(), 0, testCollector.errors.size());
     }
 
+    @Test
+    public void testHarsdorf()
+    {
+        List<OneRun> list = new ArrayList<OneRun>();
+        // choose Unterloher Weg and the following residential + cycleway
+        list.add(new OneRun(50.004333, 11.600254, 50.044449, 11.543434, 6931, 184));
+        runAlgo(testCollector, "files/harsdorf.osm.pbf", "target/harsdorf-gh",
+                list, "bike", true, "bike", "fastest-bike", false);
+        assertEquals(testCollector.toString(), 0, testCollector.errors.size());
+    }
+
+    @Test
+    public void testNeudrossenfeld()
+    {
+        List<OneRun> list = new ArrayList<OneRun>();
+        // choose cycleway (Dreschenauer Straße)
+        list.add(new OneRun(49.987132, 11.510496, 50.018839, 11.505024, 3989, 106));
+
+        runAlgo(testCollector, "files/neudrossenfeld.osm.pbf", "target/neudrossenfeld-gh",
+                list, "bike", true, "bike", "fastest-bike", true);
+
+        runAlgo(testCollector, "files/neudrossenfeld.osm.pbf", "target/neudrossenfeld2-gh",
+                list, "bike2", true, "bike2", "fastest-bike", true);
+        assertEquals(testCollector.toString(), 0, testCollector.errors.size());
+    }
+
     void runAlgo( TestAlgoCollector testCollector, String osmFile,
             String graphFile, List<OneRun> forEveryAlgo, String importVehicles,
             boolean ch, String vehicle, String weightCalcStr, boolean is3D )
@@ -381,6 +414,8 @@ void runAlgo( TestAlgoCollector testCollector, String osmFile,
             Weighting weighting = new ShortestWeighting();
             if ("fastest".equalsIgnoreCase(weightCalcStr))
                 weighting = new FastestWeighting(encoder);
+            if ("fastest-bike".equalsIgnoreCase(weightCalcStr))
+                weighting = new PriorityWeighting((BikeCommonFlagEncoder) encoder);
 
             Collection<Entry<AlgorithmPreparation, LocationIndex>> prepares = RoutingAlgorithmSpecialAreaTests.
                     createAlgos(hopper.getGraph(), hopper.getLocationIndex(), encoder, ch, weighting, hopper.getEncodingManager());
@@ -455,7 +490,7 @@ public void testPerformance() throws IOException
     public void testMonacoParallel() throws IOException
     {
         System.out.println("testMonacoParallel takes a bit time...");
-        String graphFile = "target/graph-monaco";
+        String graphFile = "target/monaco-gh";
         Helper.removeDir(new File(graphFile));
         final EncodingManager encodingManager = new EncodingManager("CAR");
         GraphHopper hopper = new GraphHopper().
@@ -510,7 +545,7 @@ public String toString()
                                 {
                                     return algo.toString();
                                 }
-                                
+
                             }, oneRun.getList(idx, filter), oneRun);
                             integ.addAndGet(1);
                         }
diff --git a/core/src/test/java/com/graphhopper/routing/util/AbstractBikeFlagEncoderTester.java b/core/src/test/java/com/graphhopper/routing/util/AbstractBikeFlagEncoderTester.java
index a7885a63c9..7842fcddd0 100644
--- a/core/src/test/java/com/graphhopper/routing/util/AbstractBikeFlagEncoderTester.java
+++ b/core/src/test/java/com/graphhopper/routing/util/AbstractBikeFlagEncoderTester.java
@@ -18,14 +18,11 @@
 package com.graphhopper.routing.util;
 
 import com.graphhopper.reader.OSMWay;
-import com.graphhopper.util.InstructionList;
-import com.graphhopper.util.TranslationMap;
+import static com.graphhopper.routing.util.BikeCommonFlagEncoder.PriorityCode.*;
+import com.graphhopper.util.Translation;
 import static com.graphhopper.util.TranslationMapTest.SINGLETON;
 import java.util.Locale;
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
-import static org.junit.Assert.assertNotSame;
-import static org.junit.Assert.assertTrue;
+import static org.junit.Assert.*;
 import org.junit.Before;
 import org.junit.Test;
 
@@ -35,7 +32,7 @@
  */
 public abstract class AbstractBikeFlagEncoderTester
 {
-    protected BikeFlagCommonEncoder encoder;
+    protected BikeCommonFlagEncoder encoder;
 
     @Before
     public void setUp()
@@ -43,24 +40,36 @@ public void setUp()
         encoder = createBikeEncoder();
     }
 
-    abstract BikeFlagCommonEncoder createBikeEncoder();
+    protected abstract BikeCommonFlagEncoder createBikeEncoder();
 
-    public double getEncodedDecodedSpeed( OSMWay way )
+    protected void assertPriority( int expectedPrio, OSMWay way )
+    {
+        assertPriority(expectedPrio, way, 0);
+    }
+
+    protected void assertPriority( int expectedPrio, OSMWay way, long relationFlags )
+    {
+        assertEquals(expectedPrio, encoder.handlePriority(way, (int) encoder.relationCodeEncoder.getValue(relationFlags)));
+    }
+
+    protected double getSpeedFromFlags( OSMWay way )
     {
         long allowed = encoder.acceptBit;
         long flags = encoder.handleWayTags(way, allowed, 0);
         return encoder.getSpeed(flags);
     }
 
-    public String encodeDecodeWayType( String name, OSMWay way )
+    protected String getWayTypeFromFlags( OSMWay way )
     {
-        long allowed = encoder.acceptBit;
-        long flags = encoder.handleWayTags(way, allowed, 0);
-        int pavement = encoder.getPavementType(flags);
-        int wayType = encoder.getWayType(flags);
+        return getWayTypeFromFlags(way, 0);
+    }
 
-        TranslationMap.Translation enMap = SINGLETON.getWithFallBack(Locale.UK);
-        return InstructionList.getWayName(name, pavement, wayType, enMap);
+    protected String getWayTypeFromFlags( OSMWay way, long relationFlags )
+    {
+        long allowed = encoder.acceptBit;
+        long flags = encoder.handleWayTags(way, allowed, relationFlags);
+        Translation enMap = SINGLETON.getWithFallBack(Locale.UK);
+        return encoder.getAnnotation(flags, enMap).getMessage();
     }
 
     @Test
@@ -71,6 +80,10 @@ public void testAccess()
         way.setTag("highway", "motorway");
         assertFalse(encoder.acceptWay(way) > 0);
 
+        way.setTag("highway", "motorway");
+        way.setTag("bicycle", "yes");
+        assertTrue(encoder.acceptWay(way) > 0);
+
         way.setTag("highway", "footway");
         assertTrue(encoder.acceptWay(way) > 0);
 
@@ -148,7 +161,7 @@ public void testAccess()
         way.setTag("route", "ferry");
         way.setTag("foot", "yes");
         assertFalse(encoder.acceptWay(way) > 0);
-        
+
         way.clearTags();
         way.setTag("highway", "cycleway");
         way.setTag("cycleway", "track");
@@ -186,6 +199,38 @@ public void testTramStations()
         assertEquals(0, encoder.acceptWay(way));
     }
 
+    @Test
+    public void testAvoidTunnel()
+    {
+        OSMWay osmWay = new OSMWay(1);
+        osmWay.setTag("highway", "residential");
+        assertPriority(PREFER.getValue(), osmWay);
+
+        osmWay.setTag("tunnel", "yes");
+        assertPriority(UNCHANGED.getValue(), osmWay);
+
+        osmWay.setTag("highway", "secondary");
+        osmWay.setTag("tunnel", "yes");
+        assertPriority(AVOID_AT_ALL_COSTS.getValue(), osmWay);
+
+        osmWay.setTag("bicycle", "designated");
+        assertPriority(PREFER.getValue(), osmWay);
+    }
+
+    @Test
+    public void testTram()
+    {
+        OSMWay way = new OSMWay(1);
+        // very dangerous
+        way.setTag("highway", "secondary");
+        way.setTag("railway", "tram");
+        assertPriority(AVOID_AT_ALL_COSTS.getValue(), way);
+
+        // should be safe now
+        way.setTag("bicycle", "designated");
+        assertPriority(PREFER.getValue(), way);
+    }
+
     @Test
     public void testHandleCommonWayTags()
     {
@@ -193,50 +238,106 @@ public void testHandleCommonWayTags()
         String wayType;
 
         way.setTag("highway", "steps");
-        wayType = encodeDecodeWayType("", way);
-        assertEquals("pushing section", wayType);
-
-        way.setTag("highway", "steps");
-        wayType = encodeDecodeWayType("Famous steps", way);
-        assertEquals("Famous steps, pushing section", wayType);
+        wayType = getWayTypeFromFlags(way);
+        assertEquals("get off the bike", wayType);
 
         way.setTag("highway", "footway");
-        wayType = encodeDecodeWayType("", way);
-        assertEquals("pushing section", wayType);
+        wayType = getWayTypeFromFlags(way);
+        assertEquals("get off the bike", wayType);
 
         way.setTag("highway", "footway");
         way.setTag("surface", "pebblestone");
-        wayType = encodeDecodeWayType("", way);
-        assertEquals("pushing section", wayType);
+        wayType = getWayTypeFromFlags(way);
+        assertEquals("get off the bike", wayType);
 
         way.setTag("highway", "residential");
-        wayType = encodeDecodeWayType("", way);
+        wayType = getWayTypeFromFlags(way);
         assertEquals("", wayType);
+        assertPriority(PREFER.getValue(), way);
 
+        way.clearTags();
         way.setTag("highway", "cycleway");
-        wayType = encodeDecodeWayType("", way);
+        wayType = getWayTypeFromFlags(way);
         assertEquals("cycleway", wayType);
+        assertPriority(VERY_NICE.getValue(), way);
 
         way.setTag("surface", "grass");
-        wayType = encodeDecodeWayType("", way);
+        wayType = getWayTypeFromFlags(way);
         assertEquals("cycleway, unpaved", wayType);
 
         way.setTag("surface", "asphalt");
-        wayType = encodeDecodeWayType("", way);
+        wayType = getWayTypeFromFlags(way);
         assertEquals("cycleway", wayType);
+        assertPriority(VERY_NICE.getValue(), way);
 
         way.setTag("highway", "footway");
         way.setTag("bicycle", "yes");
         way.setTag("surface", "grass");
-        wayType = encodeDecodeWayType("", way);
+        wayType = getWayTypeFromFlags(way);
+        assertEquals("way, unpaved", wayType);
+
+        way.setTag("bicycle", "designated");
+        wayType = getWayTypeFromFlags(way);
         assertEquals("cycleway, unpaved", wayType);
 
         way.clearTags();
         way.setTag("highway", "footway");
         way.setTag("bicycle", "yes");
         way.setTag("surface", "grass");
-        wayType = encodeDecodeWayType("", way);
-        assertEquals("cycleway, unpaved", wayType);
+        wayType = getWayTypeFromFlags(way);
+        assertEquals("way, unpaved", wayType);
+    }
+
+    @Test
+    public void testService()
+    {
+        OSMWay way = new OSMWay(1);
+        way.setTag("highway", "service");
+        assertEquals(14, encoder.getSpeed(way));
+        assertPriority(PREFER.getValue(), way);
+
+        way.setTag("service", "parking_aisle");
+        assertEquals(6, encoder.getSpeed(way));
+        assertPriority(AVOID_IF_POSSIBLE.getValue(), way);
+    }
+
+    @Test
+    public void testReduceToMaxSpeed()
+    {
+        OSMWay way = new OSMWay(12);
+        way.setTag("maxspeed", "90");
+        assertEquals(12, encoder.reduceToMaxSpeed(way, 12), 1e-2);
+    }
+
+    @Test
+    public void testMaxAndMinSpeed()
+    {
+        OSMWay osmWay = new OSMWay(1);
+        osmWay.setTag("highway", "tertiary");
+        assertEquals(30, encoder.getSpeed(encoder.setSpeed(0, encoder.reduceToMaxSpeed(osmWay, 49))), 1e-1);
+        assertPriority(PREFER.getValue(), osmWay);
+
+        osmWay.setTag("highway", "tertiary");
+        osmWay.setTag("maxspeed", "90");
+        assertEquals(20, encoder.getSpeed(encoder.setSpeed(0, encoder.reduceToMaxSpeed(osmWay, 20))), 1e-1);
+        assertPriority(REACH_DEST.getValue(), osmWay);
     }
 
+    @Test
+    public void testHandleWayTagsCallsHandlePriority()
+    {
+        OSMWay osmWay = new OSMWay(1);
+        osmWay.setTag("highway", "cycleway");
+        long encoded = encoder.handleWayTags(osmWay, encoder.acceptBit, 0);
+        assertEquals((double) VERY_NICE.getValue() / BEST.getValue(), encoder.getPriority(encoded), 1e-3);
+    }
+
+    @Test
+    public void testAvoidMotorway()
+    {
+        OSMWay osmWay = new OSMWay(1);
+        osmWay.setTag("highway", "motorway");
+        osmWay.setTag("bicycle", "yes");
+        assertPriority(REACH_DEST.getValue(), osmWay);
+    }
 }
diff --git a/core/src/test/java/com/graphhopper/routing/util/Bike2WeightFlagEncoderTest.java b/core/src/test/java/com/graphhopper/routing/util/Bike2WeightFlagEncoderTest.java
index 2088078bd5..1cbf82afb4 100644
--- a/core/src/test/java/com/graphhopper/routing/util/Bike2WeightFlagEncoderTest.java
+++ b/core/src/test/java/com/graphhopper/routing/util/Bike2WeightFlagEncoderTest.java
@@ -19,6 +19,7 @@
 package com.graphhopper.routing.util;
 
 import com.graphhopper.reader.OSMWay;
+import com.graphhopper.routing.AbstractRoutingAlgorithmTester;
 import com.graphhopper.storage.*;
 import com.graphhopper.util.EdgeIteratorState;
 import com.graphhopper.util.GHUtility;
@@ -30,7 +31,7 @@
  *
  * @author Peter Karich
  */
-public class Bike2WeightFlagEncoderTest
+public class Bike2WeightFlagEncoderTest extends BikeFlagEncoderTest
 {
     private Graph initExampleGraph( FlagEncoder instance )
     {
@@ -42,6 +43,7 @@ private Graph initExampleGraph( FlagEncoder instance )
         na.setNode(1, 51.1, 12.002, 60);
         EdgeIteratorState edge = gs.edge(0, 1).
                 setWayGeometry(Helper.createPointList3D(51.1, 12.0011, 49, 51.1, 12.0015, 55));
+        edge.setDistance(100);
 
         edge.setFlags(instance.setReverseSpeed(instance.setProperties(10, true, true), 15));
         return gs;
@@ -58,11 +60,11 @@ public void testApplyWayTags()
 
         long flags = edge.getFlags();
         // decrease speed
-        assertEquals(6, instance.getSpeed(flags), 1e-1);
+        assertEquals(2, instance.getSpeed(flags), 1e-1);
         // increase speed but use maximum speed (calculated was 24)
         assertEquals(18, instance.getReverseSpeed(flags), 1e-1);
     }
-
+        
     @Test
     public void testSteps()
     {
diff --git a/core/src/test/java/com/graphhopper/routing/util/BikeFlagEncoderTest.java b/core/src/test/java/com/graphhopper/routing/util/BikeFlagEncoderTest.java
index d20f8200fc..a1058baf50 100644
--- a/core/src/test/java/com/graphhopper/routing/util/BikeFlagEncoderTest.java
+++ b/core/src/test/java/com/graphhopper/routing/util/BikeFlagEncoderTest.java
@@ -19,22 +19,21 @@
 
 import com.graphhopper.reader.OSMRelation;
 import com.graphhopper.reader.OSMWay;
+import static com.graphhopper.routing.util.BikeCommonFlagEncoder.PriorityCode.*;
 import org.junit.Test;
 
-import java.util.concurrent.atomic.AtomicInteger;
-
 import static org.junit.Assert.*;
 
 /**
- *
  * @author Peter Karich
+ * @ratrun
  */
 public class BikeFlagEncoderTest extends AbstractBikeFlagEncoderTester
 {
     @Override
-    BikeFlagCommonEncoder createBikeEncoder()
+    protected BikeCommonFlagEncoder createBikeEncoder()
     {
-        return (BikeFlagCommonEncoder) new EncodingManager("BIKE,MTB,RACINGBIKE").getEncoder("BIKE");
+        return (BikeCommonFlagEncoder) new EncodingManager("BIKE,MTB").getEncoder("BIKE");
     }
 
     @Test
@@ -45,41 +44,45 @@ public void testGetSpeed()
         OSMWay way = new OSMWay(1);
         way.setTag("highway", "primary");
         assertEquals(18, encoder.getSpeed(way));
+        assertPriority(REACH_DEST.getValue(), way);
 
-        way.setTag("highway", "residential");
-        assertEquals(20, encoder.getSpeed(way));
-        // Test pushing section speeds
         way.setTag("highway", "footway");
         assertEquals(4, encoder.getSpeed(way));
-        way.setTag("highway", "track");
-        assertEquals(4, encoder.getSpeed(way));
+        assertPriority(AVOID_IF_POSSIBLE.getValue(), way);
 
-        way.setTag("highway", "steps");
-        assertEquals(2, encoder.getSpeed(way));
+        way.setTag("highway", "track");
+        assertEquals(12, encoder.getSpeed(way));
+        assertPriority(UNCHANGED.getValue(), way);
 
-        way.setTag("highway", "service");
-        assertEquals(20, encoder.getSpeed(way));
-        way.setTag("service", "parking_aisle");
-        assertEquals(15, encoder.getSpeed(way));
-        way.clearTags();
+        way.setTag("tracktype", "grade1");
+        assertEquals(18, encoder.getSpeed(way));
+        assertPriority(UNCHANGED.getValue(), way);
 
-        // test speed for allowed pushing section types
         way.setTag("highway", "track");
-        way.setTag("bicycle", "yes");
-        assertEquals(20, encoder.getSpeed(way));
+        way.setTag("tracktype", "grade2");
+        assertEquals(12, encoder.getSpeed(way));
+        assertPriority(UNCHANGED.getValue(), way);
 
+        // test speed for allowed get off the bike types
         way.setTag("highway", "track");
         way.setTag("bicycle", "yes");
-        way.setTag("tracktype", "grade3");
         assertEquals(12, encoder.getSpeed(way));
 
+        way.clearTags();
+        way.setTag("highway", "steps");
+        assertEquals(2, encoder.getSpeed(way));
+        assertPriority(AVOID_IF_POSSIBLE.getValue(), way);
+
+        way.clearTags();
+        way.setTag("highway", "track");
         way.setTag("surface", "paved");
-        assertEquals(20, encoder.getSpeed(way));
+        assertEquals(18, encoder.getSpeed(way));
 
         way.clearTags();
         way.setTag("highway", "path");
         way.setTag("surface", "ground");
         assertEquals(4, encoder.getSpeed(way));
+        assertPriority(AVOID_IF_POSSIBLE.getValue(), way);
 
         way.clearTags();
         way.setTag("highway", "track");
@@ -87,12 +90,18 @@ public void testGetSpeed()
         way.setTag("surface", "fine_gravel");
         assertEquals(18, encoder.getSpeed(way));
 
-        way.clearTags();
-        way.setTag("highway", "track");
-        way.setTag("bicycle", "yes");
         way.setTag("surface", "unknown_surface");
         assertEquals(4, encoder.getSpeed(way));
-
+        
+        way.clearTags();
+        way.setTag("highway", "residential");
+        way.setTag("surface", "asphalt");
+        assertEquals(18, encoder.getSpeed(way));
+        
+        way.clearTags();
+        way.setTag("highway", "motorway");
+        way.setTag("bicycle", "yes");
+        assertEquals(18, encoder.getSpeed(way));
     }
 
     @Test
@@ -100,125 +109,136 @@ public void testHandleWayTags()
     {
         OSMWay way = new OSMWay(1);
         String wayType;
-
         way.setTag("highway", "track");
-        wayType = encodeDecodeWayType("", way);
-        assertEquals("pushing section, unpaved", wayType);
+        wayType = getWayTypeFromFlags(way);
+        assertEquals("way, unpaved", wayType);
 
         way.clearTags();
         way.setTag("highway", "path");
-        wayType = encodeDecodeWayType("", way);
-        assertEquals("pushing section, unpaved", wayType);
+        wayType = getWayTypeFromFlags(way);
+        assertEquals("get off the bike, unpaved", wayType);
 
         way.clearTags();
         way.setTag("highway", "path");
         way.setTag("surface", "grass");
-        wayType = encodeDecodeWayType("", way);
-        assertEquals("pushing section, unpaved", wayType);
+        wayType = getWayTypeFromFlags(way);
+        assertEquals("get off the bike, unpaved", wayType);
 
         way.clearTags();
         way.setTag("highway", "path");
         way.setTag("surface", "concrete");
-        wayType = encodeDecodeWayType("", way);
-        assertEquals("pushing section", wayType);
+        wayType = getWayTypeFromFlags(way);
+        assertEquals("get off the bike", wayType);
 
         way.clearTags();
         way.setTag("highway", "track");
         way.setTag("foot", "yes");
         way.setTag("surface", "paved");
         way.setTag("tracktype", "grade1");
-        wayType = encodeDecodeWayType("", way);
-        assertEquals("pushing section", wayType);
+        wayType = getWayTypeFromFlags(way);
+        assertEquals("", wayType);
 
-        way.clearTags();
-        way.setTag("highway", "track");
-        way.setTag("foot", "yes");
-        way.setTag("surface", "paved");
         way.setTag("tracktype", "grade2");
-        wayType = encodeDecodeWayType("", way);
-        assertEquals("pushing section, unpaved", wayType);
-
+        wayType = getWayTypeFromFlags(way);
+        assertEquals("get off the bike, unpaved", wayType);
     }
 
     @Test
     public void testHandleWayTagsInfluencedByRelation()
     {
         OSMWay osmWay = new OSMWay(1);
-        osmWay.setTag("highway", "track");
+        osmWay.setTag("highway", "road");
         long allowed = encoder.acceptBit;
 
         OSMRelation osmRel = new OSMRelation(1);
-
         long relFlags = encoder.handleRelationTags(osmRel, 0);
         // unchanged
         long flags = encoder.handleWayTags(osmWay, allowed, relFlags);
-        assertEquals(16, encoder.getSpeed(flags), 1e-1);
-        assertEquals(1, encoder.getWayType(flags));
-        assertEquals(1, encoder.getPavementType(flags));
+        assertEquals(12, encoder.getSpeed(flags), 1e-1);
+        assertPriority(UNCHANGED.getValue(), osmWay, relFlags);
 
         // relation code is PREFER
         osmRel.setTag("route", "bicycle");
         osmRel.setTag("network", "lcn");
         relFlags = encoder.handleRelationTags(osmRel, 0);
         flags = encoder.handleWayTags(osmWay, allowed, relFlags);
-        assertEquals(20, encoder.getSpeed(flags), 1e-1);
-        assertEquals(1, encoder.getWayType(flags));
-        assertEquals(1, encoder.getPavementType(flags));
+        assertEquals(12, encoder.getSpeed(flags), 1e-1);
+        assertPriority(PREFER.getValue(), osmWay, relFlags);
 
         // relation code is VERY_NICE
         osmRel.setTag("network", "rcn");
         relFlags = encoder.handleRelationTags(osmRel, 0);
-        flags = encoder.handleWayTags(osmWay, allowed, relFlags);
-        assertEquals(24, encoder.getSpeed(flags), 1e-1);
+        assertPriority(VERY_NICE.getValue(), osmWay, relFlags);
 
-        // relation code is OUTSTANDING_NICE
+        // relation code is BEST
         osmRel.setTag("network", "ncn");
         relFlags = encoder.handleRelationTags(osmRel, 0);
-        flags = encoder.handleWayTags(osmWay, allowed, relFlags);
-        assertEquals(28, encoder.getSpeed(flags), 1e-1);
+        assertPriority(BEST.getValue(), osmWay, relFlags);
 
-        // PREFER relation, but tertiary road
-        // => no pushing section but road wayTypeCode and faster
+        // PREFER relation, but tertiary road => no get off the bike but road wayTypeCode and faster
         osmWay.clearTags();
         osmWay.setTag("highway", "tertiary");
+        osmRel.setTag("route", "bicycle");
+        osmRel.setTag("network", "lcn");
+        relFlags = encoder.handleRelationTags(osmRel, 0);
+        assertPriority(PREFER.getValue(), osmWay, relFlags);
 
+        // A footway is not of waytype get off the bike in case that it is part of a cycle route
+        osmRel.clearTags();
+        osmWay.clearTags();
+        osmWay.setTag("highway", "footway");
+        osmWay.setTag("surface", "grass");
+
+        // First tests without a cycle route relation, this is a get off the bike
+        relFlags = encoder.handleRelationTags(osmRel, 0);
+        String wayType = getWayTypeFromFlags(osmWay, relFlags);
+        assertEquals("get off the bike, unpaved", wayType);
+
+        // now as part of a cycle route relation
+        osmRel.setTag("type", "route");
         osmRel.setTag("route", "bicycle");
         osmRel.setTag("network", "lcn");
         relFlags = encoder.handleRelationTags(osmRel, 0);
-        flags = encoder.handleWayTags(osmWay, allowed, relFlags);
-        assertEquals(22, encoder.getSpeed(flags), 1e-1);
-        assertEquals(0, encoder.getWayType(flags));
-
-        // test max and min speed
-        final AtomicInteger fakeSpeed = new AtomicInteger(40);
-        BikeFlagEncoder fakeEncoder = new BikeFlagEncoder()
-        {
-            @Override
-            int relationWeightCodeToSpeed( int highwaySpeed, int relationCode )
-            {
-                return fakeSpeed.get();
-            }
-        };
-        // call necessary register
-        new EncodingManager(fakeEncoder);
-        allowed = fakeEncoder.acceptBit;
-
-        flags = fakeEncoder.handleWayTags(osmWay, allowed, 1);
-        assertEquals(30, fakeEncoder.getSpeed(flags), 1e-1);
-
-        fakeSpeed.set(-2);
-        try
-        {
-            flags = fakeEncoder.handleWayTags(osmWay, allowed, 1);
-            assertTrue(false);
-        } catch (IllegalArgumentException ex)
-        {
-        }
-
-        fakeSpeed.set(0);
-        flags = fakeEncoder.handleWayTags(osmWay, allowed, 1);
-        assertEquals(0, fakeEncoder.getSpeed(flags), 1e-1);
+        wayType = getWayTypeFromFlags(osmWay, relFlags);
+        assertEquals("way, unpaved", wayType);
+
+        // steps are still shown as get off the bike
+        osmWay.clearTags();
+        osmWay.setTag("highway", "steps");
+        relFlags = encoder.handleRelationTags(osmRel, 0);
+        wayType = getWayTypeFromFlags(osmWay, relFlags);
+        assertEquals("get off the bike", wayType);
+    }
+
+    @Test
+    public void testUnchangedRelationShouldNotInfluencePriority()
+    {
+        OSMWay osmWay = new OSMWay(1);
+        osmWay.setTag("highway", "secondary");
+
+        OSMRelation osmRel = new OSMRelation(1);
+        osmRel.setTag("description", "something");
+        long relFlags = encoder.handleRelationTags(osmRel, 0);
+        assertPriority(REACH_DEST.getValue(), osmWay, relFlags);
+    }
+
+    @Test
+    public void testCalcPriority()
+    {
+        long allowed = encoder.acceptBit;
+        OSMWay osmWay = new OSMWay(1);
+        OSMRelation osmRel = new OSMRelation(1);
+        osmRel.setTag("route", "bicycle");
+        osmRel.setTag("network", "icn");
+        long relFlags = encoder.handleRelationTags(osmRel, 0);
+        long flags = encoder.handleWayTags(osmWay, allowed, relFlags);
+        assertEquals((double) BEST.getValue() / BEST.getValue(), encoder.getPriority(flags), 1e-3);
 
+        // important: UNCHANGED should not get 0 priority!
+        osmWay = new OSMWay(1);
+        osmWay.setTag("highway", "somethingelse");
+        flags = encoder.handleWayTags(osmWay, allowed, 0);
+        assertEquals((double) UNCHANGED.getValue() / BEST.getValue(), encoder.getPriority(flags), 1e-3);
     }
 
     @Test
diff --git a/core/src/test/java/com/graphhopper/routing/util/CarFlagEncoderTest.java b/core/src/test/java/com/graphhopper/routing/util/CarFlagEncoderTest.java
index 5af8a86c52..a23c71d6d5 100644
--- a/core/src/test/java/com/graphhopper/routing/util/CarFlagEncoderTest.java
+++ b/core/src/test/java/com/graphhopper/routing/util/CarFlagEncoderTest.java
@@ -43,9 +43,28 @@ public void testAccess()
 
         way.clearTags();
         way.setTag("highway", "track");
+        assertTrue(encoder.acceptWay(way) > 0);
+        
         way.setTag("motorcar", "no");
         assertFalse(encoder.acceptWay(way) > 0);
 
+        way.clearTags();
+        way.setTag("highway", "track");
+        way.setTag("tracktype", "grade2");
+        // disallow too rough tracks
+        assertFalse(encoder.acceptWay(way) > 0);
+
+        way.clearTags();
+        way.setTag("highway", "service");
+        way.setTag("access", "no");
+        way.setTag("motorcar", "yes");
+        assertTrue(encoder.acceptWay(way) > 0);
+
+        way.clearTags();
+        way.setTag("highway", "service");
+        way.setTag("access", "delivery");
+        assertFalse(encoder.acceptWay(way) > 0);
+
         way.clearTags();
         way.setTag("highway", "unclassified");
         way.setTag("ford", "yes");
@@ -104,13 +123,13 @@ public void testMaxSpeed()
         way.setTag("maxspeed:forward", "20");
         encoded = encoder.handleWayTags(way, encoder.acceptWay(way), 0);
         assertEquals(10, encoder.getSpeed(encoded), 1e-1);
-        
+
         way = new OSMWay(1);
         way.setTag("highway", "primary");
         way.setTag("maxspeed:forward", "20");
         encoded = encoder.handleWayTags(way, encoder.acceptWay(way), 0);
         assertEquals(20, encoder.getSpeed(encoded), 1e-1);
-        
+
         way = new OSMWay(1);
         way.setTag("highway", "primary");
         way.setTag("maxspeed:backward", "20");
@@ -149,13 +168,6 @@ public void testSpeed()
         encoded = encoder.handleWayTags(way, allowed, 0);
         assertEquals(20, encoder.getSpeed(encoded), 1e-1);
 
-        way.clearTags();
-        way.setTag("highway", "track");
-        way.setTag("tracktype", "grade5");
-        allowed = encoder.acceptWay(way);
-        encoded = encoder.handleWayTags(way, allowed, 0);
-        assertEquals(5, encoder.getSpeed(encoded), 1e-1);
-
         try
         {
             encoder.setSpeed(0, -1);
@@ -178,7 +190,18 @@ public void testRailway()
         way.setTag("highway", "secondary");
         way.setTag("railway", "rail");
         // disallow rail
-        assertEquals(0, encoder.acceptWay(way));
+        assertTrue(encoder.acceptWay(way) == 0);
+
+        way.clearTags();
+        way.setTag("highway", "path");
+        way.setTag("railway", "abandoned");
+        assertTrue(encoder.acceptWay(way) == 0);
+
+        way.setTag("highway", "track");
+        assertTrue(encoder.acceptWay(way) > 0);
+
+        way.setTag("motorcar", "no");
+        assertTrue(encoder.acceptWay(way) == 0);
 
         way = new OSMWay(1);
         way.setTag("highway", "secondary");
@@ -341,4 +364,12 @@ public void testRegisterOnlyOnceAllowed()
 
         }
     }
+
+    @Test
+    public void testSetToMaxSpeed()
+    {
+        OSMWay way = new OSMWay(12);
+        way.setTag("maxspeed", "90");
+        assertEquals(90, encoder.getMaxSpeed(way), 1e-2);
+    }
 }
diff --git a/core/src/test/java/com/graphhopper/routing/util/EncodingManagerTest.java b/core/src/test/java/com/graphhopper/routing/util/EncodingManagerTest.java
index c492adf212..da833c2720 100644
--- a/core/src/test/java/com/graphhopper/routing/util/EncodingManagerTest.java
+++ b/core/src/test/java/com/graphhopper/routing/util/EncodingManagerTest.java
@@ -123,9 +123,9 @@ public long handleRelationTags( OSMRelation relation, long oldRelFlags )
             }
 
             @Override
-            int relationWeightCodeToSpeed( int highwaySpeed, int relationCode )
+            protected int handlePriority( OSMWay way, int priorityFromRelation )
             {
-                return highwaySpeed;
+                return priorityFromRelation;
             }
 
             @Override
@@ -143,8 +143,7 @@ public String toString()
         long allow = defaultBike.acceptBit | lessRelationCodes.acceptBit;
         long flags = manager.handleWayTags(osmWay, allow, relFlags);
 
-        assertEquals(20, defaultBike.getSpeed(flags), 1e-1);
-        assertEquals(4, lessRelationCodes.getSpeed(flags), 1e-1);
+        assertTrue(defaultBike.getPriority(flags) > lessRelationCodes.getPriority(flags));
     }
 
     @Test
@@ -167,10 +166,9 @@ public void testMixBikeTypesAndRelationCombination()
         long allow = bikeEncoder.acceptBit | mtbEncoder.acceptBit;
         long flags = manager.handleWayTags(osmWay, allow, relFlags);
 
-        // uninfluenced speed for grade1 bikeencoder = 4 (pushing section) -> smaller than 15 -> VERYNICE -> 22
-        assertEquals(24, bikeEncoder.getSpeed(flags), 1e-1);
-        // uninfluenced speed for grade1 bikeencoder = 12 -> smaller than 15 -> PREFER -> 18
-        assertEquals(20, mtbEncoder.getSpeed(flags), 1e-1);
+        // bike: uninfluenced speed for grade but via network => VERY_NICE                
+        // mtb: uninfluenced speed only PREFER
+        assertTrue(bikeEncoder.getPriority(flags) > mtbEncoder.getPriority(flags));
     }
 
     public void testFullBitMask()
diff --git a/core/src/test/java/com/graphhopper/routing/util/MountainBikeFlagEncoderTest.java b/core/src/test/java/com/graphhopper/routing/util/MountainBikeFlagEncoderTest.java
index 6009a455ca..8e0db7ee7c 100644
--- a/core/src/test/java/com/graphhopper/routing/util/MountainBikeFlagEncoderTest.java
+++ b/core/src/test/java/com/graphhopper/routing/util/MountainBikeFlagEncoderTest.java
@@ -19,15 +19,17 @@
 
 import com.graphhopper.reader.OSMRelation;
 import com.graphhopper.reader.OSMWay;
+import com.graphhopper.routing.util.BikeCommonFlagEncoder.PriorityCode;
+import static com.graphhopper.routing.util.BikeCommonFlagEncoder.PriorityCode.*;
 import org.junit.Test;
 import static org.junit.Assert.*;
 
 public class MountainBikeFlagEncoderTest extends AbstractBikeFlagEncoderTester
 {
     @Override
-    BikeFlagCommonEncoder createBikeEncoder()
+    protected BikeCommonFlagEncoder createBikeEncoder()
     {
-        return (BikeFlagCommonEncoder) new EncodingManager("BIKE,MTB").getEncoder("MTB");
+        return (BikeCommonFlagEncoder) new EncodingManager("BIKE,MTB").getEncoder("MTB");
     }
 
     @Test
@@ -37,42 +39,47 @@ public void testGetSpeed()
         assertEquals(10, encoder.getSpeed(result), 1e-1);
         OSMWay way = new OSMWay(1);
         way.setTag("highway", "primary");
-        assertEquals(10, encoder.getSpeed(way));
+        assertEquals(18, encoder.getSpeed(way));
+        assertPriority(REACH_DEST.getValue(), way);
 
         way.setTag("highway", "residential");
-        assertEquals(15, encoder.getSpeed(way));
+        assertEquals(16, encoder.getSpeed(way));
+        assertPriority(PREFER.getValue(), way);
+
         // Test pushing section speeds
         way.setTag("highway", "footway");
         assertEquals(4, encoder.getSpeed(way));
+        assertPriority(AVOID_IF_POSSIBLE.getValue(), way);
+
         way.setTag("highway", "track");
-        assertEquals(24, encoder.getSpeed(way));
+        assertEquals(18, encoder.getSpeed(way));
+        assertPriority(PREFER.getValue(), way);
 
         way.setTag("highway", "steps");
-        assertEquals(2, encoder.getSpeed(way));
-
-        way.setTag("highway", "service");
-        assertEquals(15, encoder.getSpeed(way));
-        way.setTag("service", "parking_aisle");
-        assertEquals(15, encoder.getSpeed(way));
+        assertEquals(4, encoder.getSpeed(way));
+        assertPriority(AVOID_IF_POSSIBLE.getValue(), way);
         way.clearTags();
 
         // test speed for allowed pushing section types
         way.setTag("highway", "track");
         way.setTag("bicycle", "yes");
-        assertEquals(24, encoder.getSpeed(way));
+        assertEquals(18, encoder.getSpeed(way));
+        assertPriority(PREFER.getValue(), way);
 
         way.setTag("highway", "track");
         way.setTag("bicycle", "yes");
         way.setTag("tracktype", "grade3");
-        assertEquals(20, encoder.getSpeed(way));
+        assertPriority(VERY_NICE.getValue(), way);
 
         way.setTag("surface", "paved");
-        assertEquals(12, encoder.getSpeed(way));
+        assertEquals(18, encoder.getSpeed(way));
+        assertPriority(VERY_NICE.getValue(), way);
 
         way.clearTags();
         way.setTag("highway", "path");
         way.setTag("surface", "ground");
-        assertEquals(20, encoder.getSpeed(way));
+        assertEquals(16, encoder.getSpeed(way));
+        assertPriority(PREFER.getValue(), way);
     }
 
     @Test
@@ -82,24 +89,24 @@ public void testHandleWayTags()
         String wayType;
 
         way.setTag("highway", "track");
-        wayType = encodeDecodeWayType("", way);
+        wayType = getWayTypeFromFlags(way);
         assertEquals("way, unpaved", wayType);
 
         way.clearTags();
         way.setTag("highway", "path");
-        wayType = encodeDecodeWayType("", way);
+        wayType = getWayTypeFromFlags(way);
         assertEquals("way, unpaved", wayType);
 
         way.clearTags();
         way.setTag("highway", "path");
         way.setTag("surface", "grass");
-        wayType = encodeDecodeWayType("", way);
+        wayType = getWayTypeFromFlags(way);
         assertEquals("way, unpaved", wayType);
 
         way.clearTags();
         way.setTag("highway", "path");
         way.setTag("surface", "concrete");
-        wayType = encodeDecodeWayType("", way);
+        wayType = getWayTypeFromFlags(way);
         assertEquals("", wayType);
 
         way.clearTags();
@@ -107,7 +114,7 @@ public void testHandleWayTags()
         way.setTag("foot", "yes");
         way.setTag("surface", "paved");
         way.setTag("tracktype", "grade1");
-        wayType = encodeDecodeWayType("", way);
+        wayType = getWayTypeFromFlags(way);
         assertEquals("", wayType);
 
         way.clearTags();
@@ -115,9 +122,13 @@ public void testHandleWayTags()
         way.setTag("foot", "yes");
         way.setTag("surface", "paved");
         way.setTag("tracktype", "grade2");
-        wayType = encodeDecodeWayType("", way);
+        wayType = getWayTypeFromFlags(way);
         assertEquals("way, unpaved", wayType);
 
+        way.clearTags();
+        way.setTag("highway", "pedestrian");
+        wayType = getWayTypeFromFlags(way);
+        assertEquals("get off the bike", wayType);
     }
 
     @Test
@@ -128,34 +139,35 @@ public void testHandleWayTagsInfluencedByRelation()
         long allowed = encoder.acceptBit;
 
         OSMRelation osmRel = new OSMRelation(1);
-
         long relFlags = encoder.handleRelationTags(osmRel, 0);
         // unchanged
         long flags = encoder.handleWayTags(osmWay, allowed, relFlags);
-        assertEquals(24, encoder.getSpeed(flags), 1e-1);
-        assertEquals(3, encoder.getWayType(flags));
-        assertEquals(1, encoder.getPavementType(flags));
+        assertEquals(18, encoder.getSpeed(flags), 1e-1);
+        assertPriority(PriorityCode.PREFER.getValue(), osmWay);
+        assertEquals("way, unpaved", getWayTypeFromFlags(osmWay));
 
         // relation code is PREFER
         osmRel.setTag("route", "bicycle");
         osmRel.setTag("network", "lcn");
         relFlags = encoder.handleRelationTags(osmRel, 0);
         flags = encoder.handleWayTags(osmWay, allowed, relFlags);
-        assertEquals(28, encoder.getSpeed(flags), 1e-1);
-        assertEquals(3, encoder.getWayType(flags));
-        assertEquals(1, encoder.getPavementType(flags));
+        assertEquals(18, encoder.getSpeed(flags), 1e-1);
+        assertPriority(PriorityCode.PREFER.getValue(), osmWay);
+        assertEquals("way, unpaved", getWayTypeFromFlags(osmWay));
 
         // relation code is PREFER
         osmRel.setTag("network", "rcn");
         relFlags = encoder.handleRelationTags(osmRel, 0);
         flags = encoder.handleWayTags(osmWay, allowed, relFlags);
-        assertEquals(28, encoder.getSpeed(flags), 1e-1);
+        assertPriority(PriorityCode.PREFER.getValue(), osmWay);
+        assertEquals(18, encoder.getSpeed(flags), 1e-1);
 
         // relation code is PREFER
         osmRel.setTag("network", "ncn");
         relFlags = encoder.handleRelationTags(osmRel, 0);
         flags = encoder.handleWayTags(osmWay, allowed, relFlags);
-        assertEquals(28, encoder.getSpeed(flags), 1e-1);
+        assertPriority(PriorityCode.PREFER.getValue(), osmWay);
+        assertEquals(18, encoder.getSpeed(flags), 1e-1);
 
         // PREFER relation, but tertiary road
         // => no pushing section but road wayTypeCode and faster
@@ -166,7 +178,8 @@ public void testHandleWayTagsInfluencedByRelation()
         osmRel.setTag("network", "lcn");
         relFlags = encoder.handleRelationTags(osmRel, 0);
         flags = encoder.handleWayTags(osmWay, allowed, relFlags);
-        assertEquals(20, encoder.getSpeed(flags), 1e-1);
-        assertEquals(0, encoder.getWayType(flags));
+        assertEquals(18, encoder.getSpeed(flags), 1e-1);
+        assertPriority(PriorityCode.PREFER.getValue(), osmWay);
+        assertEquals("", getWayTypeFromFlags(osmWay));
     }
 }
diff --git a/core/src/test/java/com/graphhopper/routing/util/RacingBikeFlagEncoderTest.java b/core/src/test/java/com/graphhopper/routing/util/RacingBikeFlagEncoderTest.java
index 0cc304222d..e558f9aa95 100644
--- a/core/src/test/java/com/graphhopper/routing/util/RacingBikeFlagEncoderTest.java
+++ b/core/src/test/java/com/graphhopper/routing/util/RacingBikeFlagEncoderTest.java
@@ -19,9 +19,8 @@
 
 import com.graphhopper.reader.OSMRelation;
 import com.graphhopper.reader.OSMWay;
-import static com.graphhopper.routing.util.BikeFlagCommonEncoder.PUSHING_SECTION_SPEED;
-import java.util.HashMap;
-import java.util.Map;
+import static com.graphhopper.routing.util.BikeCommonFlagEncoder.PUSHING_SECTION_SPEED;
+import static com.graphhopper.routing.util.BikeCommonFlagEncoder.PriorityCode.*;
 import org.junit.Test;
 import static org.junit.Assert.*;
 
@@ -32,9 +31,41 @@
 public class RacingBikeFlagEncoderTest extends AbstractBikeFlagEncoderTester
 {
     @Override
-    BikeFlagCommonEncoder createBikeEncoder()
+    protected BikeCommonFlagEncoder createBikeEncoder()
     {
-        return (BikeFlagCommonEncoder) new EncodingManager("BIKE,MTB,RACINGBIKE").getEncoder("RACINGBIKE");
+        return (BikeCommonFlagEncoder) new EncodingManager("BIKE,RACINGBIKE").getEncoder("RACINGBIKE");
+    }
+
+    @Test
+    @Override
+    public void testAvoidTunnel()
+    {
+        // tunnel is not that bad for racing bike
+        OSMWay osmWay = new OSMWay(1);
+        osmWay.setTag("highway", "residential");
+        osmWay.setTag("tunnel", "yes");
+        assertPriority(UNCHANGED.getValue(), osmWay);
+
+        osmWay.setTag("highway", "secondary");
+        osmWay.setTag("tunnel", "yes");
+        assertPriority(UNCHANGED.getValue(), osmWay);
+
+        osmWay.setTag("bicycle", "designated");
+        assertPriority(PREFER.getValue(), osmWay);
+    }
+
+    @Test
+    @Override
+    public void testService()
+    {
+        OSMWay way = new OSMWay(1);
+        way.setTag("highway", "service");
+        assertEquals(12, encoder.getSpeed(way));
+        assertPriority(UNCHANGED.getValue(), way);
+
+        way.setTag("service", "parking_aisle");
+        assertEquals(6, encoder.getSpeed(way));
+        assertPriority(AVOID_IF_POSSIBLE.getValue(), way);
     }
 
     @Test
@@ -45,55 +76,87 @@ public void testGetSpeed()
         OSMWay way = new OSMWay(1);
         way.setTag("highway", "track");
         way.setTag("tracktype", "grade3");
-        // Pushing section speed/2
-        assertEquals(PUSHING_SECTION_SPEED / 2, getEncodedDecodedSpeed(way), 1e-1);
+        // Pushing section
+        assertEquals(PUSHING_SECTION_SPEED, getSpeedFromFlags(way), 1e-1);
 
-        // Even if it is part of a cycle way PUSHING_SECTION_SPEED/2
+        // Even if it is part of a cycle way
         way.setTag("bicycle", "yes");
-        assertEquals(PUSHING_SECTION_SPEED / 2, getEncodedDecodedSpeed(way), 1e-1);
+        assertEquals(PUSHING_SECTION_SPEED, getSpeedFromFlags(way), 1e-1);
 
         way.clearTags();
         way.setTag("highway", "steps");
-        assertEquals(2, getEncodedDecodedSpeed(way), 1e-1);
-
+        assertEquals(2, getSpeedFromFlags(way), 1e-1);
     }
 
     @Test
     public void testHandleWayTagsInfluencedByRelation()
     {
         OSMWay osmWay = new OSMWay(1);
-        osmWay.setTag("highway", "track");
+        osmWay.setTag("highway", "track");        
+        assertEquals(PUSHING_SECTION_SPEED / 2, getSpeedFromFlags(osmWay), 1e-1);
+        assertEquals("get off the bike, unpaved", getWayTypeFromFlags(osmWay, 0));
+        
+        // relation code is PREFER
         long allowed = encoder.acceptBit;
-
         OSMRelation osmRel = new OSMRelation(1);
-
-        assertEquals(PUSHING_SECTION_SPEED / 2, getEncodedDecodedSpeed(osmWay), 1e-1);
-
-        // relation code is PREFER
         osmRel.setTag("route", "bicycle");
         osmRel.setTag("network", "lcn");
         long relFlags = encoder.handleRelationTags(osmRel, 0);
         long flags = encoder.handleWayTags(osmWay, allowed, relFlags);
         assertEquals(2, encoder.getSpeed(flags), 1e-1);
-        assertEquals(1, encoder.getWayType(flags)); // Pushing section
-        assertEquals(1, encoder.getPavementType(flags)); //  Unpaved
+        assertPriority(AVOID_AT_ALL_COSTS.getValue(), osmWay, relFlags);
+        assertEquals("way, unpaved", getWayTypeFromFlags(osmWay, relFlags));
 
         // relation code is OUTSTANDING NICE but as unpaved, the speed is still PUSHING_SECTION_SPEED/2
         osmRel.setTag("network", "icn");
         relFlags = encoder.handleRelationTags(osmRel, 0);
         flags = encoder.handleWayTags(osmWay, allowed, relFlags);
         assertEquals(2, encoder.getSpeed(flags), 1e-1);
+        assertPriority(AVOID_AT_ALL_COSTS.getValue(), osmWay, relFlags);
 
         // Now we assume bicycle=yes, anyhow still unpaved
         osmWay.setTag("bicycle", "yes");
         relFlags = encoder.handleRelationTags(osmRel, 0);
         flags = encoder.handleWayTags(osmWay, allowed, relFlags);
         assertEquals(2, encoder.getSpeed(flags), 1e-1);
+        assertPriority(AVOID_AT_ALL_COSTS.getValue(), osmWay, relFlags);
 
-        // Now we assume bicycle=yes, and paved -> The speed is pushed!
+        // Now we assume bicycle=yes, and paved
         osmWay.setTag("tracktype", "grade1");
         relFlags = encoder.handleRelationTags(osmRel, 0);
         flags = encoder.handleWayTags(osmWay, allowed, relFlags);
-        assertEquals(30, encoder.getSpeed(flags), 1e-1);
+        assertEquals(20, encoder.getSpeed(flags), 1e-1);
+        assertPriority(PREFER.getValue(), osmWay, relFlags);
+        assertEquals("", getWayTypeFromFlags(osmWay, relFlags));
+
+        // Now we assume bicycle=yes, and unpaved as part of a cycle relation
+        osmWay.setTag("tracktype", "grade2");
+        osmWay.setTag("bicycle", "yes");
+        relFlags = encoder.handleRelationTags(osmRel, 0);
+        flags = encoder.handleWayTags(osmWay, allowed, relFlags);
+        assertEquals(10, encoder.getSpeed(flags), 1e-1);
+        assertPriority(AVOID_AT_ALL_COSTS.getValue(), osmWay, relFlags);
+        assertEquals("way, unpaved", getWayTypeFromFlags(osmWay, relFlags));
+
+        // Now we assume bicycle=yes, and unpaved not part of a cycle relation
+        osmRel.clearTags();
+        osmWay.clearTags();
+        osmWay.setTag("highway", "track");
+        osmWay.setTag("tracktype", "grade3");
+        relFlags = encoder.handleRelationTags(osmRel, 0);
+        flags = encoder.handleWayTags(osmWay, allowed, relFlags);
+        assertEquals(4, encoder.getSpeed(flags), 1e-1);
+        assertPriority(AVOID_AT_ALL_COSTS.getValue(), osmWay, relFlags);
+        assertEquals("get off the bike, unpaved", getWayTypeFromFlags(osmWay, relFlags));
+
+        // Now we assume bicycle=yes, and tracktype = null
+        osmRel.clearTags();
+        osmWay.clearTags();
+        osmWay.setTag("highway", "track");
+        relFlags = encoder.handleRelationTags(osmRel, 0);
+        flags = encoder.handleWayTags(osmWay, allowed, relFlags);
+        assertEquals(2, encoder.getSpeed(flags), 1e-1);
+        assertPriority(AVOID_AT_ALL_COSTS.getValue(), osmWay, relFlags);
+        assertEquals("get off the bike, unpaved", getWayTypeFromFlags(osmWay, relFlags));
     }
 }
diff --git a/core/src/test/java/com/graphhopper/util/AngleCalc2DTest.java b/core/src/test/java/com/graphhopper/util/AngleCalcTest.java
similarity index 63%
rename from core/src/test/java/com/graphhopper/util/AngleCalc2DTest.java
rename to core/src/test/java/com/graphhopper/util/AngleCalcTest.java
index da6ea7fef3..80d19d350a 100644
--- a/core/src/test/java/com/graphhopper/util/AngleCalc2DTest.java
+++ b/core/src/test/java/com/graphhopper/util/AngleCalcTest.java
@@ -24,43 +24,44 @@
  * @author Johannes Pelzer
  * @author Peter Karich
  */
-public class AngleCalc2DTest
+public class AngleCalcTest
 {
-    private final AngleCalc2D ac = new AngleCalc2D();
+    private final AngleCalc ac = new AngleCalc();
 
     @Test
     public void testOrientation()
     {
-        assertEquals(90.0, Math.toDegrees(ac.calcOrientation(0, 0, 10, 0)), 0.0001);
-        assertEquals(45.0, Math.toDegrees(ac.calcOrientation(0, 0, 10, 10)), 0.0001);
-        assertEquals(0.0, Math.toDegrees(ac.calcOrientation(0, 0, 0, 10)), 0.0001);
-        assertEquals(-45.0, Math.toDegrees(ac.calcOrientation(0, 0, -10, 10)), 0.0001);
-        assertEquals(-135.0, Math.toDegrees(ac.calcOrientation(0, 0, -10, -10)), 0.0001);
+        assertEquals(90.0, Math.toDegrees(ac.calcOrientation(0, 0, 10, 0)), 0.001);
+        assertEquals(45.0, Math.toDegrees(ac.calcOrientation(0, 0, 10, 10)), 0.001);
+        assertEquals(0.0, Math.toDegrees(ac.calcOrientation(0, 0, 0, 10)), 0.001);
+        assertEquals(-45.0, Math.toDegrees(ac.calcOrientation(0, 0, -10, 10)), 0.001);
+        assertEquals(-135.0, Math.toDegrees(ac.calcOrientation(0, 0, -10, -10)), 0.001);
     }
 
     @Test
     public void testAlignOrientation()
     {
-        assertEquals(90.0, Math.toDegrees(ac.alignOrientation(Math.toRadians(90), Math.toRadians(90))), 0.0001);
-        assertEquals(225.0, Math.toDegrees(ac.alignOrientation(Math.toRadians(90), Math.toRadians(-135))), 0.0001);
-        assertEquals(-45.0, Math.toDegrees(ac.alignOrientation(Math.toRadians(-135), Math.toRadians(-45))), 0.0001);
-        assertEquals(-270.0, Math.toDegrees(ac.alignOrientation(Math.toRadians(-135), Math.toRadians(90))), 0.0001);
+        assertEquals(90.0, Math.toDegrees(ac.alignOrientation(Math.toRadians(90), Math.toRadians(90))), 0.001);
+        assertEquals(225.0, Math.toDegrees(ac.alignOrientation(Math.toRadians(90), Math.toRadians(-135))), 0.001);
+        assertEquals(-45.0, Math.toDegrees(ac.alignOrientation(Math.toRadians(-135), Math.toRadians(-45))), 0.001);
+        assertEquals(-270.0, Math.toDegrees(ac.alignOrientation(Math.toRadians(-135), Math.toRadians(90))), 0.001);
     }
 
     @Test
     public void testCombined()
     {
         double orientation = ac.calcOrientation(52.414918, 13.244221, 52.415333, 13.243595);
-        assertEquals(146.5, Math.toDegrees(ac.alignOrientation(0, orientation)), 0.1);
+        assertEquals(146.5, Math.toDegrees(ac.alignOrientation(0, orientation)), 1);
     }
 
     @Test
     public void testCalcAzimuth()
     {
-        assertEquals(45.0, ac.calcAzimuth(0, 0, 10, 10), 0.0001);
-        assertEquals(90.0, ac.calcAzimuth(0, 0, 0, 10), 0.0001);
-        assertEquals(180.0, ac.calcAzimuth(0, 0, -10, 0), 0.0001);
-        assertEquals(270.0, ac.calcAzimuth(0, 0, 0, -10), 0.0001);
+        assertEquals(45.0, ac.calcAzimuth(0, 0, 10, 10), 0.001);
+        assertEquals(90.0, ac.calcAzimuth(0, 0, 0, 10), 0.001);
+        assertEquals(180.0, ac.calcAzimuth(0, 0, -10, 0), 0.001);
+        assertEquals(270.0, ac.calcAzimuth(0, 0, 0, -10), 0.001);
+        assertEquals(0.0, ac.calcAzimuth(49.942, 11.580, 49.944, 11.580), 0.001);
     }
 
     @Test
@@ -68,18 +69,19 @@ public void testAzimuthCompassPoint()
     {
         assertEquals("S", ac.azimuth2compassPoint(199));
     }
-
+    
     @Test
     public void testAtan2()
     {
-        assertEquals(0, AngleCalc2D.atan2(0, 0), 1e-4);
-        assertEquals(45, AngleCalc2D.atan2(5, 5) * 180 / Math.PI, 1e-2);
-        assertEquals(-45, AngleCalc2D.atan2(-5, 5) * 180 / Math.PI, 1e-2);
-        assertEquals(11.14, AngleCalc2D.atan2(1, 5) * 180 / Math.PI, 1e-2);
-        assertEquals(180, AngleCalc2D.atan2(0, -5) * 180 / Math.PI, 1e-2);
-        assertEquals(-90, AngleCalc2D.atan2(-5, 0) * 180 / Math.PI, 1e-2);
+        // assertEquals(0, AngleCalc.atan2(0, 0), 1e-4);
+        // assertEquals(0, AngleCalc.atan2(-0.002, 0), 1e-4);
+        assertEquals(45, AngleCalc.atan2(5, 5) * 180 / Math.PI, 1e-2);
+        assertEquals(-45, AngleCalc.atan2(-5, 5) * 180 / Math.PI, 1e-2);
+        assertEquals(11.14, AngleCalc.atan2(1, 5) * 180 / Math.PI, 1);
+        assertEquals(180, AngleCalc.atan2(0, -5) * 180 / Math.PI, 1e-2);
+        assertEquals(-90, AngleCalc.atan2(-5, 0) * 180 / Math.PI, 1e-2);
 
         assertEquals(90, Math.atan2(1, 0) * 180 / Math.PI, 1e-2);
-        assertEquals(90, AngleCalc2D.atan2(1, 0) * 180 / Math.PI, 1e-2);
+        assertEquals(90, AngleCalc.atan2(1, 0) * 180 / Math.PI, 1e-2);
     }
 }
diff --git a/core/src/test/java/com/graphhopper/util/HelperTest.java b/core/src/test/java/com/graphhopper/util/HelperTest.java
index 5e7b8a55b1..71e153efba 100644
--- a/core/src/test/java/com/graphhopper/util/HelperTest.java
+++ b/core/src/test/java/com/graphhopper/util/HelperTest.java
@@ -63,7 +63,7 @@ public void testGetLocale() throws Exception
         assertEquals(Locale.ENGLISH, Helper.getLocale("en"));
         assertEquals(Locale.US, Helper.getLocale("en_US"));
     }
-    
+
     @Test
     public void testRound()
     {
@@ -71,4 +71,12 @@ public void testRound()
         assertEquals(100.9, Helper.round(100.94, 1), 1e-7);
         assertEquals(101.0, Helper.round(100.95, 1), 1e-7);
     }
+
+    @Test
+    public void testKeepIn()
+    {
+        assertEquals(2, Helper.keepIn(2, 1, 4), 1e-2);
+        assertEquals(3, Helper.keepIn(2, 3, 4), 1e-2);
+        assertEquals(3, Helper.keepIn(-2, 3, 4), 1e-2);
+    }
 }
diff --git a/core/src/test/java/com/graphhopper/util/InstructionListTest.java b/core/src/test/java/com/graphhopper/util/InstructionListTest.java
index c86e0036fa..39dd696a43 100644
--- a/core/src/test/java/com/graphhopper/util/InstructionListTest.java
+++ b/core/src/test/java/com/graphhopper/util/InstructionListTest.java
@@ -39,8 +39,10 @@
  */
 public class InstructionListTest
 {
-    TranslationMap trMap = TranslationMapTest.SINGLETON;
+    private final TranslationMap trMap = TranslationMapTest.SINGLETON;
+    private final Translation usTR = trMap.getWithFallBack(Locale.US);
 
+    @SuppressWarnings("unchecked")
     @Test
     public void testWayList()
     {
@@ -91,24 +93,27 @@ public void testWayList()
         iter2.setWayGeometry(list);
 
         Path p = new Dijkstra(g, carManager.getEncoder("CAR"), new ShortestWeighting()).calcPath(0, 10);
-        InstructionList wayList = p.calcInstructions();
-        List<String> tmpList = pick("text", wayList.createJson(trMap.getWithFallBack(Locale.CANADA)));
+        InstructionList wayList = p.calcInstructions(usTR);
+        List<String> tmpList = pick("text", wayList.createJson());
         assertEquals(Arrays.asList("Continue onto 0-1", "Turn right onto 1-4", "Continue onto 4-7",
                 "Turn left onto 7-8", "Continue onto 8-9", "Turn right", "Finish!"),
                 tmpList);
+        
+        List<String> distStrings = wayList.createDistances(true);
+        assertEquals(Arrays.asList("6.21 mi", "6.21 mi", "6.21 mi", "6.21 mi", "12.43 mi", "6.21 mi", "0 ft"),
+                distStrings);
 
-        tmpList = pick("text", wayList.createJson(trMap.getWithFallBack(Locale.GERMAN)));
+        wayList = p.calcInstructions(trMap.getWithFallBack(Locale.GERMAN));
+        tmpList = pick("text", wayList.createJson());
         assertEquals(Arrays.asList("Geradeaus auf 0-1", "Rechts abbiegen auf 1-4", "Geradeaus auf 4-7",
                 "Links abbiegen auf 7-8", "Geradeaus auf 8-9", "Rechts abbiegen", "Ziel erreicht!"),
                 tmpList);
 
         assertEquals(70000.0, sumDistances(wayList), 1e-1);
-        List<String> distStrings = wayList.createDistances(trMap.get("de"), false);
+        distStrings = wayList.createDistances(false);
         assertEquals(Arrays.asList("10.0 km", "10.0 km", "10.0 km", "10.0 km", "20.0 km", "10.0 km", "0 m"),
                 distStrings);
-        distStrings = wayList.createDistances(trMap.get("en_US"), true);
-        assertEquals(Arrays.asList("6.21 mi", "6.21 mi", "6.21 mi", "6.21 mi", "12.43 mi", "6.21 mi", "0 ft"),
-                distStrings);
+
         List<GPXEntry> gpxes = wayList.createGPXList();
         assertEquals(10, gpxes.size());
         // check order of tower nodes        
@@ -127,8 +132,9 @@ public void testWayList()
         p = new Dijkstra(g, carManager.getEncoder("CAR"), new ShortestWeighting()).calcPath(6, 2);
         assertEquals(42000, p.getDistance(), 1e-2);
         assertEquals(Helper.createTList(6, 7, 8, 5, 2), p.calcNodes());
-        wayList = p.calcInstructions();
-        tmpList = pick("text", wayList.createJson(trMap.getWithFallBack(Locale.CANADA)));
+
+        wayList = p.calcInstructions(usTR);
+        tmpList = pick("text", wayList.createJson());
         assertEquals(Arrays.asList("Continue onto 6-7", "Continue onto 7-8", "Turn left onto 5-8", "Continue onto 5-2", "Finish!"),
                 tmpList);
 
@@ -216,14 +222,15 @@ public void testWayList2()
         iter.setWayGeometry(list);
 
         Path p = new Dijkstra(g, carManager.getEncoder("CAR"), new ShortestWeighting()).calcPath(2, 3);
-        InstructionList wayList = p.calcInstructions();
-        List<String> tmpList = pick("text", wayList.createJson(trMap.getWithFallBack(Locale.CANADA)));
+
+        InstructionList wayList = p.calcInstructions(usTR);
+        List<String> tmpList = pick("text", wayList.createJson());
         assertEquals(Arrays.asList("Continue onto 2-4", "Turn slight right onto 3-4", "Finish!"),
                 tmpList);
 
         p = new Dijkstra(g, carManager.getEncoder("CAR"), new ShortestWeighting()).calcPath(3, 5);
-        wayList = p.calcInstructions();
-        tmpList = pick("text", wayList.createJson(trMap.getWithFallBack(Locale.CANADA)));
+        wayList = p.calcInstructions(usTR);
+        tmpList = pick("text", wayList.createJson());
         assertEquals(Arrays.asList("Continue onto 3-4", "Continue onto 4-5", "Finish!"),
                 tmpList);
     }
@@ -255,8 +262,8 @@ public void testNoInstructionIfSameStreet()
         iter.setWayGeometry(list);
 
         Path p = new Dijkstra(g, carManager.getEncoder("CAR"), new ShortestWeighting()).calcPath(2, 3);
-        InstructionList wayList = p.calcInstructions();
-        List<String> tmpList = pick("text", wayList.createJson(trMap.getWithFallBack(Locale.CANADA)));
+        InstructionList wayList = p.calcInstructions(usTR);
+        List<String> tmpList = pick("text", wayList.createJson());
         assertEquals(Arrays.asList("Continue onto street", "Finish!"), tmpList);
     }
 
@@ -283,7 +290,7 @@ public void testInstructionsWithTimeAndPlace()
         g.edge(4, 5, 10000, true).setName("4-5").setFlags(flagsForSpeed(carManager, 100));
 
         Path p = new Dijkstra(g, carManager.getEncoder("CAR"), new ShortestWeighting()).calcPath(1, 5);
-        InstructionList wayList = p.calcInstructions();
+        InstructionList wayList = p.calcInstructions(usTR);
         assertEquals(5, wayList.size());
 
         List<GPXEntry> gpxList = wayList.createGPXList();
@@ -315,28 +322,57 @@ public void testInstructionsWithTimeAndPlace()
         assertTrue(gpxStr, gpxStr.contains("<extensions>") && gpxStr.contains("</extensions>"));
         assertTrue(gpxStr, gpxStr.contains("<rtept lat=\"15.1\" lon=\"10.0\">"));
         assertTrue(gpxStr, gpxStr.contains("<distance>8000.0</distance>"));
-        assertTrue(gpxStr, gpxStr.contains("<desc>left 2-3</desc>"));
+        assertTrue(gpxStr, gpxStr.contains("<desc>turn left onto 2-3</desc>"));
 
         assertTrue(gpxStr, gpxStr.contains("<direction>N</direction>"));
         assertTrue(gpxStr, gpxStr.contains("<azimuth>0</azimuth>"));
+        assertFalse(gpxStr, gpxStr.contains("NaN"));
+    }
+
+    @Test
+    public void testCreateGPXWithEle()
+    {
+        final List<GPXEntry> fakeList = new ArrayList<GPXEntry>();
+        fakeList.add(new GPXEntry(12, 13, 0));
+        fakeList.add(new GPXEntry(12.5, 13, 1000));
+        InstructionList il = new InstructionList(usTR)
+        {
+            @Override
+            public List<GPXEntry> createGPXList()
+            {
+                return fakeList;
+            }
+        };
+        String gpxStr = il.createGPX("test", 0, "GMT");
+        assertFalse(gpxStr, gpxStr.contains("NaN"));
+        assertFalse(gpxStr, gpxStr.contains("<ele>"));
+
+        fakeList.clear();
+        fakeList.add(new GPXEntry(12, 13, 11, 0));
+        fakeList.add(new GPXEntry(12.5, 13, 10, 1000));
+        gpxStr = il.createGPX("test", 0, "GMT", true);
+
+        assertTrue(gpxStr, gpxStr.contains("<ele>11.0</ele>"));
+        assertFalse(gpxStr, gpxStr.contains("NaN"));
     }
 
     @Test
     public void testCreateGPX()
     {
-        InstructionList instructions = new InstructionList();
+        InstructionAnnotation ea = InstructionAnnotation.EMPTY;
+        InstructionList instructions = new InstructionList(usTR);
         PointList pl = new PointList();
         pl.add(49.942576, 11.580384);
         pl.add(49.941858, 11.582422);
-        instructions.add(new Instruction(Instruction.CONTINUE_ON_STREET, "temp", 0, 0, pl).setDistance(240).setTime(15000));
+        instructions.add(new Instruction(Instruction.CONTINUE_ON_STREET, "temp", ea, pl).setDistance(240).setTime(15000));
 
         pl = new PointList();
         pl.add(49.941575, 11.583501);
-        instructions.add(new Instruction(Instruction.TURN_LEFT, "temp2", 0, 0, pl).setDistance(25).setTime(4000));
+        instructions.add(new Instruction(Instruction.TURN_LEFT, "temp2", ea, pl).setDistance(25).setTime(4000));
 
         pl = new PointList();
         pl.add(49.941389, 11.584311);
-        instructions.add(new Instruction(Instruction.TURN_LEFT, "temp2", 0, 0, pl).setDistance(25).setTime(3000));
+        instructions.add(new Instruction(Instruction.TURN_LEFT, "temp2", ea, pl).setDistance(25).setTime(3000));
         instructions.add(new FinishInstruction(49.941029, 11.584514, 0));
 
         List<GPXEntry> result = instructions.createGPXList();
@@ -363,9 +399,8 @@ public void testEmptyList()
         EncodingManager carManager = new EncodingManager("CAR");
         Graph g = new GraphBuilder(carManager).create();
         Path p = new Dijkstra(g, carManager.getSingle(), new ShortestWeighting()).calcPath(0, 1);
-        InstructionList il = p.calcInstructions();
+        InstructionList il = p.calcInstructions(usTR);
         assertEquals(0, il.size());
         assertEquals(0, il.createStartPoints().size());
     }
-
 }
diff --git a/core/src/test/java/com/graphhopper/util/InstructionTest.java b/core/src/test/java/com/graphhopper/util/InstructionTest.java
index f34b17f4bb..0e7e4c52ef 100644
--- a/core/src/test/java/com/graphhopper/util/InstructionTest.java
+++ b/core/src/test/java/com/graphhopper/util/InstructionTest.java
@@ -25,53 +25,47 @@
  * @author Johannes Pelzer
  */
 public class InstructionTest
-{   
+{
     @Test
-    public void testGetAzimuthAndGetDirection() {
+    public void testGetAzimuthAndGetDirection()
+    {
+        InstructionAnnotation ea = InstructionAnnotation.EMPTY;
         PointList pl = new PointList();
         pl.add(49.942, 11.584);
         pl.add(49.942, 11.582);
-        Instruction i1 = new Instruction(Instruction.CONTINUE_ON_STREET, "temp", 0, 0, pl).setDistance(240).setTime(15000);
-        
+        Instruction i1 = new Instruction(Instruction.CONTINUE_ON_STREET, "temp", ea, pl).setDistance(240).setTime(15000);
+
         assertEquals("270", i1.getAzimuth(null));
         assertEquals("W", i1.getDirection(null));
 
-        
         PointList p2 = new PointList();
         p2.add(49.942, 11.580);
         p2.add(49.944, 11.582);
-        Instruction i2 = new Instruction(Instruction.CONTINUE_ON_STREET, "temp", 0, 0, p2).setDistance(240).setTime(15000);
-        
+        Instruction i2 = new Instruction(Instruction.CONTINUE_ON_STREET, "temp", ea, p2).setDistance(240).setTime(15000);
+
         assertEquals("45", i2.getAzimuth(null));
         assertEquals("NE", i2.getDirection(null));
-        
-        
+
         PointList p3 = new PointList();
         p3.add(49.942, 11.580);
         p3.add(49.944, 11.580);
-        Instruction i3 = new Instruction(Instruction.CONTINUE_ON_STREET, "temp", 0, 0, p3).setDistance(240).setTime(15000);
-        
-        
+        Instruction i3 = new Instruction(Instruction.CONTINUE_ON_STREET, "temp", ea, p3).setDistance(240).setTime(15000);
+
         assertEquals("0", i3.getAzimuth(null));
         assertEquals("N", i3.getDirection(null));
-        
+
         PointList p4 = new PointList();
         p4.add(49.940, 11.580);
         p4.add(49.920, 11.586);
-        Instruction i4 = new Instruction(Instruction.CONTINUE_ON_STREET, "temp", 0, 0, p4).setDistance(240).setTime(15000);
-        
-        
-        
+        Instruction i4 = new Instruction(Instruction.CONTINUE_ON_STREET, "temp", ea, p4).setDistance(240).setTime(15000);
+
         assertEquals("S", i4.getDirection(null));
- 
+
         PointList p5 = new PointList();
         p5.add(49.940, 11.580);
-        Instruction i5 = new Instruction(Instruction.CONTINUE_ON_STREET, "temp", 0, 0, p5).setDistance(240).setTime(15000);
-        
-        assertEquals(null, i5.getAzimuth(null));
-        assertEquals(null, i5.getDirection(null));
+        Instruction i5 = new Instruction(Instruction.CONTINUE_ON_STREET, "temp", ea, p5).setDistance(240).setTime(15000);
+
+        assertEquals("", i5.getAzimuth(null));
+        assertEquals("", i5.getDirection(null));
     }
-    
-    
-    
 }
diff --git a/core/src/test/java/com/graphhopper/util/TranslationMapTest.java b/core/src/test/java/com/graphhopper/util/TranslationMapTest.java
index 0e66e5fc8d..e8e0981fe0 100644
--- a/core/src/test/java/com/graphhopper/util/TranslationMapTest.java
+++ b/core/src/test/java/com/graphhopper/util/TranslationMapTest.java
@@ -17,7 +17,6 @@
  */
 package com.graphhopper.util;
 
-import com.graphhopper.util.TranslationMap.Translation;
 import java.util.Locale;
 import org.junit.Test;
 import static org.junit.Assert.*;
diff --git a/docs/android/index.md b/docs/android/index.md
index 87fb299ddb..ae02db1b3a 100644
--- a/docs/android/index.md
+++ b/docs/android/index.md
@@ -13,12 +13,11 @@ $ cd graphhopper
 $ ./graphhopper.sh import your-area.pbf
 ```
 
-And go to the Android SDK Manager and install at least 2.2 (API 8)
+And go to the Android SDK Manager and install at least 2.3 (API 9)
 
 **Either via Maven and Command line -> use this for NetBeans**
- 1. Download [Maven SDK Deployer](https://github.com/mosabua/maven-android-sdk-deployer) and execute `mvn install -P 2.2` - it uses [Android Maven Plugin](http://code.google.com/p/maven-android-plugin/wiki/GettingStarted) under the hood where you need to set up ANDROID_HOME
- 2. Install Mapsforge in your local repository via the provided script `scripts/maven-install-mapsforge.sh` - see some [explanations/issues](https://github.com/graphhopper/graphhopper/issues/122)
- 3. Now do `./graphhopper.sh android`
+ 1. Download [Maven SDK Deployer](https://github.com/mosabua/maven-android-sdk-deployer) and execute `mvn install -P 2.3` - it uses [Android Maven Plugin](http://code.google.com/p/maven-android-plugin/wiki/GettingStarted) under the hood where you need to set up ANDROID_HOME
+ 2. Now do `./graphhopper.sh android`
 
 **Or Eclipse**
 
@@ -36,14 +35,14 @@ Now that you have a running android app you need to copy somehow the routing and
  2. Execute `./graphhopper.sh import <your-osm-file>`. This creates the routing data
  3. [Download a map](http://download.mapsforge.org/maps/) e.g. berlin.map
  4. Copy berlin.map into the created berlin-gh folder
- 5. Optional Compression Step: Bundle a graphhopper zip file via cd berlin-gh;zip -r berlin.ghz *
+ 5. Optional Compression Step: Bundle a graphhopper zip file via `cd berlin-gh; zip -r berlin.ghz *`
  6. Now copy the berlin-gh folder from step 4 (or the .ghz file from step 5) to your Android device. /[download-folder]/graphhopper/maps, where the download-folder can e.g. be /mnt/sdcard/download or /storage/sdcard/Download/ - e.g. use [SSHDroid](https://play.google.com/store/apps/details?id=berserker.android.apps.sshdroid): `scp -P 2222 berlin.ghz root@$URL:/mnt/sdcard/download/graphhopper/maps/`
 
 ## Limitations
 
- * For now OSMReader does not work on Android due to some javax.xml dependencies. But you can simply create the graphhopper folder on your desktop and copy them to the Android storage.
+ * You have to create the graphhopper folder on your desktop and copy it to the Android storage.
 
- * [A memory bound a* algoritm](http://en.wikipedia.org/wiki/SMA*) is not yet implemented so you can use disableShortcuts only for small routes. Let me know if you need this!
+ * [A memory bound a* algoritm](http://en.wikipedia.org/wiki/SMA*) is not yet implemented so you can use disableShortcuts only for small routes.
 
 ## Problems
 
diff --git a/docs/core/quickstart-from-source.md b/docs/core/quickstart-from-source.md
index a405fc60fc..cc23bd964d 100644
--- a/docs/core/quickstart-from-source.md
+++ b/docs/core/quickstart-from-source.md
@@ -1,20 +1,21 @@
 ## Try out
 
 For a start which requires only the JRE have a look [here](../web/quickstart.md). 
-Windows user can find a quick guide [here](https://github.com/graphhopper/graphhopper/wiki/Windows). 
+Windows user can find a quick guide [here](./windows-setup.md). 
 
 Now, before you proceed install git and jdk6, 7 or 8. Then do:
 
 ```bash
 $ git clone git://github.com/graphhopper/graphhopper.git
-$ cd graphhopper; ./graphhopper.sh web europe_germany_berlin.pbf
+$ cd graphhopper; git checkout master
+$ ./graphhopper.sh web europe_germany_berlin.pbf
 now go to http://localhost:8989/
 ```
 
   1. These steps make the Berlin area routable. It'll download and unzip the osm file for you.
   2. It builds the graphhopper jars. If Maven is not available it will automatically download it.
   3. Then it creates routable files for graphhopper in the folder europe_germany_berlin-gh. It'll skip this step if files are already present.
-  4. Also check the instructions for [Android](https://github.com/graphhopper/graphhopper/wiki/Android)
+  4. Also check the instructions for [Android](../android/index.md)
 
 For you favourite area do
 
@@ -32,7 +33,7 @@ installed when executing graphhopper.sh.
 
 Have a look into the [Java API documentation](./) for further details.
 
-For more details on Android-usage have a look into this [Android site](https://github.com/graphhopper/graphhopper/wiki/Android)
+For more details on Android-usage have a look into this [Android site](../android/index.md)
 
 ### Library
 
diff --git a/docs/web/api-doc.md b/docs/web/api-doc.md
index f3b618a189..e53b573f6f 100644
--- a/docs/web/api-doc.md
+++ b/docs/web/api-doc.md
@@ -15,21 +15,21 @@ All official parameters are shown in the following table
 Parameter   | Default | Description
 :-----------|:--------|:-----------
 point       | -       | Specifiy multiple points for which the route should be calculated. The order is important. Specify at least two points.
-locale      | en      | The locale of the result. E.g. pt_PT for Portuguese or de for German
-instructions| true  | If instruction should be calculated and returned
+locale      | en      | The locale of the result. E.g. `pt_PT` for Portuguese or `de` for German
+instructions| true    | If instruction should be calculated and returned
 vehicle     | car     | The vehicle for which the route should be calculated. Other vehicles are foot and bike
-weighting   | fastest | Which kind of 'best' route calculation you need. Other option is 'shortest', currently not available in the public service.
-algorithm   | dijkstrabi | The algorithm to calculate the route. Other options are dijkstra, astar and astarbi. For the public service only dijkstrabi is supported.
-points_encoded     | true | If the resulting route should be 'compressed' using a special algorithm leading to massive bandwith reduction. You'll need a special handling on the client, if enabled. We provide Open Source code in Java and JavaScript.
+weighting   | fastest | Which kind of 'best' route calculation you need. Other option is 'shortest', currently not available in the WEB API.
+elevation   | false   | If `true` a third dimension - the elevation - is included in the polyline or in the GeoJson. IMPORTANT: If enabled you have to use a modified version of the decoding method or set points_encoded to `false`. See the points_encoded attribute for more details. Additionally a request can fail if the vehicle does not support elevation. See the features object for every vehicle.
+algorithm   | dijkstrabi     | The algorithm to calculate the route. Other options are dijkstra, astar and astarbi. The WEB API supports only dijkstrabi.
+points_encoded     | true    | If `false` a GeoJson array in `point` is returned. If `true` the resulting route will be encoded leading to big bandwith reduction. You'll need a special handling for the decoding of this string on the client-side. We provide Open Source code in [Java](https://github.com/graphhopper/graphhopper/blob/d70b63660ac5200b03c38ba3406b8f93976628a6/web/src/main/java/com/graphhopper/http/WebHelper.java#L43) and [JavaScript](https://github.com/graphhopper/graphhopper/blob/d70b63660ac5200b03c38ba3406b8f93976628a6/web/src/main/webapp/js/ghrequest.js#L139). It is especially important to use our decoding methods if you set `elevation=true`!
 debug              | false   | If true, the output will be formated.
 calc_points        | true    | If the points for the route should be calculated at all. Sometimes only the distance and time is necessary.
 type               | json    | Specifies the resulting format of the route, for json the content type will be application/json. Other possible format options: <br> jsonp you'll need to provide the callback function via the callback parameter. The content type will be application/javascript<br> gpx, the content type will be application/xml
-min_path_precision | 1  | Not recommended to change. Increase this number if you want to further reduce bandwith.
+min_path_precision | 1       | Not recommended to change. Increase this number if you want to further reduce bandwith.
 
 ## Example output for the case type=json
 
-Keep in mind that some attributes which are not documented here can be removed in the future - 
-so you should not rely on them!
+Keep in mind that some attributes which are not documented here can be removed in the future - you should not rely on them!
 
 ```json
 {
@@ -111,14 +111,15 @@ paths[0].distance          | The overall distance of the route, in meter
 paths[0].time              | The overall time of the route, in ms
 paths[0].points            | The polyline encoded coordinates of the path. Order is lat,lon,elelevation as it is no geoJson!
 paths[0].points_encoded    | Is true if the points are encoded, if not paths[0].points contains the geo json of the path (then order is lon,lat,elevation), which is easier to handle but consumes more bandwidth compared to encoded version
-paths[0].points_dimension  | The dimension of the points field. Can be 2 or 3.
 paths[0].bbox              | The bounding box of the route, format: <br> minLon, minLat, maxLon, maxLat
 paths[0].instructions      | Contains information about the instructions for this route. The last instruction is always the Finish instruction and takes 0ms and 0meter. Keep in mind that instructions are currently under active development and can sometimes contain misleading information, so, make sure you always show an image of the map at the same time when navigating your users!
-paths[0].instructions[0].text     | A description what the user has to do in order to follow the route. The language depends on the locale parameter.
-paths[0].instructions[0].distance | The distance for this instruction, in meter
-paths[0].instructions[0].time     | The duration for this instruction, in ms
-paths[0].instructions[0].interval | An array containing the first and the last index (relative to paths[0].points) of the points for this instruction
-paths[0].instructions[0].sign     | A number which specifies the sign to show e.g. for right turn etc <br>TURN_SHARP_LEFT = -3<br>TURN_LEFT = -2<br>TURN_SLIGHT_LEFT = -1<br>CONTINUE_ON_STREET = 0<br>TURN_SLIGHT_RIGHT = 1<br>TURN_RIGHT = 2<br>TURN_SHARP_RIGHT = 3<br>FINISH = 4<br>VIA_REACHED = 5
+paths[0].instructions[0].text                 | A description what the user has to do in order to follow the route. The language depends on the locale parameter.
+paths[0].instructions[0].distance             | The distance for this instruction, in meter
+paths[0].instructions[0].time                 | The duration for this instruction, in ms
+paths[0].instructions[0].interval             | An array containing the first and the last index (relative to paths[0].points) of the points for this instruction. This is useful to know for which part of the route the instructions are valid.
+paths[0].instructions[0].sign                 | A number which specifies the sign to show e.g. for right turn etc <br>TURN_SHARP_LEFT = -3<br>TURN_LEFT = -2<br>TURN_SLIGHT_LEFT = -1<br>CONTINUE_ON_STREET = 0<br>TURN_SLIGHT_RIGHT = 1<br>TURN_RIGHT = 2<br>TURN_SHARP_RIGHT = 3<br>FINISH = 4<br>VIA_REACHED = 5
+paths[0].instructions[0].annotationText       | [optional] A text describing the instruction in more detail, e.g. like surface of the way, warnings or involved costs
+paths[0].instructions[0].annotationImportance | [optional] 0 stands for INFO, 1 for warning, 2 for costs, 3 for costs and warning
 
 
 ## Area information
@@ -130,20 +131,22 @@ If you need to find out defails about the area or need to ping the service use '
 ### Example output:
 ```json
 { "build_date":"2014-02-21T16:52",
-  "bbox":[13.0726237909337,52.33350773901,13.7639719344073,52.679616459003],
+  "bbox":[13.072624,52.333508,13.763972,52.679616],
   "version":"0.3",
-  "supported_vehicles": ["foot"]
+  "features": { "foot" : { "elevation" : true  }, 
+                "car"  : { "elevation" : false } }
 }
 ```
 
 JSON path/attribute | Description
 :-------------------|:------------
-build_date          | The GraphHopper build date
 version             | The GraphHopper version
-supported_vehicles  | An array of strings indicating the supported vehicles
 bbox                | The maximum bounding box of the area, format: <br> minLon, minLat, maxLon, maxLat
+features            | A json object per supported vehicles with name and supported features like elevation
+build_date          | [optional] The GraphHopper build date
 import_date         | [optional] The date time at which the OSM import was done
 prepare_date        | [optional] The date time at which the preparation (contraction hierarchies) was done. If nothing was done this is empty
+supported_vehicles  | [deprecated] An array of strings for all supported vehicles
 
 ### Output if expected error(s) while routing:
 ```json
@@ -155,8 +158,8 @@ prepare_date        | [optional] The date time at which the preparation (contrac
 }
 ```
 
-Sometimes a point can be too offroad and you'll get 'cannot find point', this normally does not
-indicate a bug in the routing engine and is expected to a certain degree.
+Sometimes a point can be "off the road" and you'll get 'cannot find point', this normally does not
+indicate a bug in the routing engine and is expected to a certain degree if too far away.
 
 JSON path/attribute    | Description
 :----------------------|:------------
diff --git a/docs/web/quickstart.md b/docs/web/quickstart.md
index 957f81daa6..30ae92802c 100644
--- a/docs/web/quickstart.md
+++ b/docs/web/quickstart.md
@@ -3,10 +3,10 @@
 If you want to build GraphHopper from source look at the [Developers page](../core/quickstart-from-source.md). 
 The following steps are simpler and only need the JRE, a jar file and an OSM file.
 
- 1. Install the latest JRE and get [graphhopper](https://oss.sonatype.org/content/repositories/snapshots/com/graphhopper/graphhopper-web/0.3-SNAPSHOT/) (a zip file, ~7MB)
+ 1. Install the latest JRE and get GraphHopper Server as [zip](https://oss.sonatype.org/content/groups/public/com/graphhopper/graphhopper-web/0.4-SNAPSHOT/) (~7MB)
  2. Unzip it and copy an OSM file into the created directory. For example [berlin-latest.osm.pbf](http://download.geofabrik.de/europe/germany/berlin.html)
- 3. Start GraphHopper Maps via: java -jar *.jar jetty.resourcebase=webapp config=config-example.properties osmreader.osm=berlin-latest.osm.pbf
- 4. Go to [http://localhost:8989/](http://localhost:8989/) and you should see a map of Berlin. You should be able to click on the map and a route appears.
+ 3. Start GraphHopper Maps via: `java -jar *.jar jetty.resourcebase=webapp config=config-example.properties osmreader.osm=berlin-latest.osm.pbf`
+ 4. After you see 'Started server at HTTP 8989' go to [http://localhost:8989/](http://localhost:8989/) and you should see a map of Berlin. You should be able to click on the map and a route appears.
 
 
 ## Troubleshooting
diff --git a/pom.xml b/pom.xml
index b43fc9717d..a7ad26d5c9 100644
--- a/pom.xml
+++ b/pom.xml
@@ -6,7 +6,7 @@
     <groupId>com.graphhopper</groupId>
     <artifactId>graphhopper-parent</artifactId>
     <name>GraphHopper Parent Project</name>
-    <version>0.3-SNAPSHOT</version>
+    <version>0.4-SNAPSHOT</version>
     <packaging>pom</packaging> 
     <url>http://graphhopper.com</url> 
     <inceptionYear>2012</inceptionYear>
@@ -115,7 +115,6 @@
                     <execution>
                         <goals>
                             <goal>integration-test</goal>
-                            <goal>verify</goal>
                         </goals>
                     </execution>
                 </executions>
diff --git a/tools/pom.xml b/tools/pom.xml
index afbbeb5f8e..c6bafaab06 100644
--- a/tools/pom.xml
+++ b/tools/pom.xml
@@ -5,14 +5,14 @@
 
     <groupId>com.graphhopper</groupId>
     <artifactId>graphhopper-tools</artifactId>
-    <version>0.3-SNAPSHOT</version>
+    <version>0.4-SNAPSHOT</version>
     <packaging>jar</packaging>
     <name>GraphHopper Tools</name>
 
     <parent>
         <groupId>com.graphhopper</groupId>
         <artifactId>graphhopper-parent</artifactId>    	
-        <version>0.3-SNAPSHOT</version>
+        <version>0.4-SNAPSHOT</version>
     </parent>
 
     <dependencies>
diff --git a/tools/src/main/java/com/graphhopper/ui/DebugAStar.java b/tools/src/main/java/com/graphhopper/ui/DebugAStar.java
index 23b5bbe438..835c0a8ec2 100644
--- a/tools/src/main/java/com/graphhopper/ui/DebugAStar.java
+++ b/tools/src/main/java/com/graphhopper/ui/DebugAStar.java
@@ -46,12 +46,12 @@ public void setGraphics2D( Graphics2D g2 )
     }
 
     @Override
-    public void updateShortest( EdgeEntry shortestDE, int currLoc )
+    public void updateBestPath( EdgeEntry shortestDE, int currLoc )
     {
         if (g2 != null)
         {
             mg.plotNode(g2, currLoc, Color.YELLOW);
         }
-        super.updateShortest(shortestDE, currLoc);
+        super.updateBestPath(shortestDE, currLoc);
     }
 }
diff --git a/tools/src/main/java/com/graphhopper/ui/DebugAStarBi.java b/tools/src/main/java/com/graphhopper/ui/DebugAStarBi.java
index 77df456145..029b6142d8 100644
--- a/tools/src/main/java/com/graphhopper/ui/DebugAStarBi.java
+++ b/tools/src/main/java/com/graphhopper/ui/DebugAStarBi.java
@@ -46,12 +46,12 @@ public void setGraphics2D( Graphics2D g2 )
     }
 
     @Override
-    public void updateShortest( EdgeEntry shortestDE, int currLoc )
+    public void updateBestPath( EdgeEntry shortestDE, int currLoc )
     {
         if (g2 != null)
         {
             mg.plotNode(g2, currLoc, Color.YELLOW);
         }
-        super.updateShortest(shortestDE, currLoc);
+        super.updateBestPath(shortestDE, currLoc);
     }
 }
diff --git a/tools/src/main/java/com/graphhopper/ui/DebugDijkstraBidirection.java b/tools/src/main/java/com/graphhopper/ui/DebugDijkstraBidirection.java
index c53ee5ffb3..7d026c6a9a 100644
--- a/tools/src/main/java/com/graphhopper/ui/DebugDijkstraBidirection.java
+++ b/tools/src/main/java/com/graphhopper/ui/DebugDijkstraBidirection.java
@@ -46,13 +46,13 @@ public void setGraphics2D( Graphics2D g2 )
     }
 
     @Override
-    public void updateShortest( EdgeEntry shortestDE, int currLoc )
+    public void updateBestPath( EdgeEntry shortestDE, int currLoc )
     {
         if (g2 != null)
         {
             mg.plotNode(g2, currLoc, Color.BLUE);
         }
         // System.out.println("new node:" + currLoc);
-        super.updateShortest(shortestDE, currLoc);
+        super.updateBestPath(shortestDE, currLoc);
     }
 }
diff --git a/tools/src/main/java/com/graphhopper/ui/DebugDijkstraSimple.java b/tools/src/main/java/com/graphhopper/ui/DebugDijkstraSimple.java
index ff91a22c38..7d1ae1096d 100644
--- a/tools/src/main/java/com/graphhopper/ui/DebugDijkstraSimple.java
+++ b/tools/src/main/java/com/graphhopper/ui/DebugDijkstraSimple.java
@@ -46,12 +46,12 @@ public void setGraphics2D( Graphics2D g2 )
     }
 
     @Override
-    public void updateShortest( EdgeEntry shortestDE, int currLoc )
+    public void updateBestPath( EdgeEntry shortestDE, int currLoc )
     {
         if (g2 != null)
         {
             mg.plotNode(g2, currLoc, Color.YELLOW);
         }
-        super.updateShortest(shortestDE, currLoc);
+        super.updateBestPath(shortestDE, currLoc);
     }
 }
diff --git a/tools/src/main/java/com/graphhopper/ui/MiniGraphUI.java b/tools/src/main/java/com/graphhopper/ui/MiniGraphUI.java
index 3daefdf17d..0ecd384439 100644
--- a/tools/src/main/java/com/graphhopper/ui/MiniGraphUI.java
+++ b/tools/src/main/java/com/graphhopper/ui/MiniGraphUI.java
@@ -23,10 +23,10 @@
 import com.graphhopper.routing.Path;
 import com.graphhopper.routing.RoutingAlgorithm;
 import com.graphhopper.routing.util.AlgorithmPreparation;
+import com.graphhopper.routing.util.BikeCommonFlagEncoder;
 import com.graphhopper.routing.util.EdgeFilter;
-import com.graphhopper.routing.util.FastestWeighting;
-import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.routing.util.NoOpAlgorithmPreparation;
+import com.graphhopper.routing.util.PriorityWeighting;
 import com.graphhopper.routing.util.Weighting;
 import com.graphhopper.storage.Graph;
 import com.graphhopper.storage.NodeAccess;
@@ -75,14 +75,15 @@ public static void main( String[] strs ) throws Exception
     private final MapLayer pathLayer;
     private boolean fastPaint = false;
     private final Weighting weighting;
+    private final BikeCommonFlagEncoder encoder;
 
     public MiniGraphUI( GraphHopper hopper, boolean debug )
     {
         this.graph = hopper.getGraph();
         this.na = graph.getNodeAccess();
         prepare = hopper.getPreparation();
-        FlagEncoder encoder = hopper.getEncodingManager().getSingle();
-        weighting = new FastestWeighting(encoder);
+        encoder = (BikeCommonFlagEncoder) hopper.getEncodingManager().getEncoder("bike");
+        weighting = new PriorityWeighting(encoder);
         if (prepare == null)
             prepare = NoOpAlgorithmPreparation.createAlgoPrepare(graph, "dijkstrabi", encoder, weighting);
 
@@ -177,7 +178,27 @@ public void paintComponent( Graphics2D g2 )
                         }
                         double lat2 = na.getLatitude(nodeId);
                         double lon2 = na.getLongitude(nodeId);
+
+                        // mg.plotText(g2, lat * 0.9 + lat2 * 0.1, lon * 0.9 + lon2 * 0.1, iter.getName());
+                        mg.plotText(g2, lat * 0.9 + lat2 * 0.1, lon * 0.9 + lon2 * 0.1, "s:" + (int) encoder.getSpeed(iter.getFlags()));
+                        g2.setColor(Color.BLACK);
+
+                        double prio = encoder.getPriority(iter.getFlags());
+                        if (prio < 0.2)
+                            g2.setColor(Color.RED.darker());
+                        else if (prio < 0.3)
+                            g2.setColor(Color.RED.brighter());
+                        else if (prio < 0.5)
+                            g2.setColor(Color.ORANGE);
+                        else if (prio < 0.6)
+                            g2.setColor(Color.GRAY);
+                        else if (prio < 0.8)
+                            g2.setColor(Color.GREEN.brighter());
+                        else
+                            g2.setColor(Color.GREEN.darker());
+
                         mg.plotEdge(g2, lat, lon, lat2, lon2);
+                        g2.setColor(Color.BLACK);
                     }
                 }
             }
@@ -199,9 +220,6 @@ public void paintComponent( Graphics2D g2 )
                 }
 
                 StopWatch sw = new StopWatch().start();
-                fromRes = index.findClosest(49.973878, 11.604132, EdgeFilter.ALL_EDGES);
-                toRes = index.findClosest(49.973896, 11.604363, EdgeFilter.ALL_EDGES);
-
                 logger.info("start searching from:" + fromRes + " to:" + toRes + " " + weighting);
                 path = algo.calcPath(fromRes, toRes);
 //                mg.plotNode(g2, dijkstraFromId, Color.red);
diff --git a/web/nbactions.xml b/web/nbactions.xml
index 0b77976f45..284d63f126 100644
--- a/web/nbactions.xml
+++ b/web/nbactions.xml
@@ -18,7 +18,7 @@
                 <goal>org.codehaus.mojo:exec-maven-plugin:1.2.1:exec</goal>
             </goals>
             <properties>
-                <exec.args>-classpath %classpath com.graphhopper.http.GHServer graph.elevation.cachedir=../srtmprovider jetty.port=8900 config=../config.properties osmreader.osm=/home/peterk/Dokumente/download/map_bt_trebgast.osm</exec.args>
+                <exec.args>-classpath %classpath com.graphhopper.http.GHServer graph.elevation.cachedir=../srtmprovider jetty.port=8989 config=../config.properties osmreader.osm=../core/files/neudrossenfeld.osm.pbf</exec.args>
                 <exec.executable>java</exec.executable>
             </properties>
         </action>
@@ -32,7 +32,7 @@
                 <goal>org.codehaus.mojo:exec-maven-plugin:1.2.1:exec</goal>
             </goals>
             <properties>
-                <exec.args>-Xdebug -Xrunjdwp:transport=dt_socket,server=n,address=${jpda.address} -classpath %classpath com.graphhopper.http.GHServer graph.elevation.cachedir=../srtmprovider jetty.port=8900 config=../config.properties osmreader.osm=/home/peterk/Dokumente/download/map_bt_trebgast.osm</exec.args>
+                <exec.args>-Xdebug -Xrunjdwp:transport=dt_socket,server=n,address=${jpda.address} -classpath %classpath com.graphhopper.http.GHServer graph.elevation.cachedir=../srtmprovider jetty.port=8989 config=../config.properties osmreader.osm=../core/files/neudrossenfeld.osm.pbf</exec.args>
                 <exec.executable>java</exec.executable>
                 <jpda.listen>true</jpda.listen>
             </properties>
@@ -47,7 +47,7 @@
                 <goal>org.codehaus.mojo:exec-maven-plugin:1.2.1:exec</goal>
             </goals>
             <properties>
-                <exec.args>-classpath %classpath com.graphhopper.http.GHServer graph.elevation.cachedir=../srtmprovider jetty.port=8900 config=../config.properties osmreader.osm=/home/peterk/Dokumente/download/map_bt_trebgast.osm</exec.args>
+                <exec.args>-classpath %classpath com.graphhopper.http.GHServer graph.elevation.cachedir=../srtmprovider jetty.port=8989 config=../config.properties osmreader.osm=../core/files/neudrossenfeld.osm.pbf</exec.args>
                 <exec.executable>java</exec.executable>
             </properties>
         </action>
diff --git a/web/pom.xml b/web/pom.xml
index 2dfbfd39e7..8ecedff859 100644
--- a/web/pom.xml
+++ b/web/pom.xml
@@ -6,14 +6,14 @@
     <groupId>com.graphhopper</groupId>
     <artifactId>graphhopper-web</artifactId>
     <packaging>jar</packaging>
-    <version>0.3-SNAPSHOT</version>
+    <version>0.4-SNAPSHOT</version>
     <name>GraphHopper Web</name>
     <description>Example on how to use GraphHopper in a web-based application</description>
         
     <parent>
         <groupId>com.graphhopper</groupId>
         <artifactId>graphhopper-parent</artifactId>    	
-        <version>0.3-SNAPSHOT</version>
+        <version>0.4-SNAPSHOT</version>
     </parent>
     <properties>
         <jetty.version>8.1.14.v20131031</jetty.version>
@@ -129,7 +129,7 @@
             </plugin>            
             <plugin>
                 <artifactId>maven-assembly-plugin</artifactId>
-                
+                <version>2.4</version>
                 <configuration>
                     <archive>
                         <manifest>
@@ -145,8 +145,9 @@
                 <executions>
                     <execution>
                         <id>make-assembly</id>
-                        <phase>package</phase>
-                        <goals>
+                        <!-- bind to verify and not package to pass integration tests before creating assemblies -->
+                        <phase>integration-test</phase> 
+                       <goals>
                             <goal>single</goal>
                         </goals>
                     </execution>
diff --git a/web/src/main/java/com/graphhopper/http/DefaultModule.java b/web/src/main/java/com/graphhopper/http/DefaultModule.java
index 0707acdb38..b810045a51 100644
--- a/web/src/main/java/com/graphhopper/http/DefaultModule.java
+++ b/web/src/main/java/com/graphhopper/http/DefaultModule.java
@@ -53,8 +53,8 @@ protected void configure()
             bind(GraphHopper.class).toInstance(hopper);
 
             long timeout = args.getLong("web.timeout", 3000);
-            bind(Long.class).annotatedWith(Names.named("timeout")).toInstance(timeout);
-            bind(TranslationMap.class).toInstance(new TranslationMap().doImport());
+            bind(Long.class).annotatedWith(Names.named("timeout")).toInstance(timeout);            
+            bind(TranslationMap.class).toInstance(hopper.getTranslationMap());
         } catch (Exception ex)
         {
             throw new IllegalStateException("Couldn't load graph", ex);
diff --git a/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java b/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
index 746031c17e..66f23af58d 100644
--- a/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
+++ b/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
@@ -23,7 +23,7 @@
 import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.util.*;
 import com.graphhopper.util.Helper;
-import com.graphhopper.util.TranslationMap.Translation;
+import com.graphhopper.util.Translation;
 import com.graphhopper.util.shapes.GHPoint;
 import java.io.IOException;
 import java.util.*;
@@ -46,8 +46,6 @@
 {
     @Inject
     private GraphHopper hopper;
-    @Inject
-    private TranslationMap trMap;
 
     @Override
     public void doGet( HttpServletRequest req, HttpServletResponse res ) throws ServletException, IOException
@@ -74,25 +72,31 @@ void writePath( HttpServletRequest req, HttpServletResponse res ) throws Excepti
         boolean writeGPX = "gpx".equalsIgnoreCase(getParam(req, "type", "json"));
         boolean enableInstructions = writeGPX || getBooleanParam(req, "instructions", true);
         boolean calcPoints = getBooleanParam(req, "calc_points", true);
+        boolean elevation = getBooleanParam(req, "elevation", false);
         String vehicleStr = getParam(req, "vehicle", "CAR").toUpperCase();
         String weighting = getParam(req, "weighting", "fastest");
         String algoStr = getParam(req, "algorithm", "");
+        String localeStr = getParam(req, "locale", "en");
 
         StopWatch sw = new StopWatch().start();
         GHResponse rsp;
-        if (hopper.getEncodingManager().supports(vehicleStr))
+        if (!hopper.getEncodingManager().supports(vehicleStr))
+        {
+            rsp = new GHResponse().addError(new IllegalArgumentException("Vehicle not supported: " + vehicleStr));
+        } else if (elevation && !hopper.hasElevation())
+        {
+            rsp = new GHResponse().addError(new IllegalArgumentException("Elevation not supported!"));
+        } else
         {
             FlagEncoder algoVehicle = hopper.getEncodingManager().getEncoder(vehicleStr);
             rsp = hopper.route(new GHRequest(infoPoints).
                     setVehicle(algoVehicle.toString()).
                     setWeighting(weighting).
                     setAlgorithm(algoStr).
+                    setLocale(localeStr).
                     putHint("calcPoints", calcPoints).
                     putHint("instructions", enableInstructions).
                     putHint("douglas.minprecision", minPathPrecision));
-        } else
-        {
-            rsp = new GHResponse().addError(new IllegalArgumentException("Vehicle not supported: " + vehicleStr));
         }
 
         float took = sw.stop().getSeconds();
@@ -117,22 +121,23 @@ void writePath( HttpServletRequest req, HttpServletResponse res ) throws Excepti
 
     private void writeGPX( HttpServletRequest req, HttpServletResponse res, GHResponse rsp )
     {
+        boolean includeElevation = getBooleanParam(req, "elevation", false);
         res.setCharacterEncoding("UTF-8");
         res.setContentType("application/xml");
         String trackName = getParam(req, "track", "GraphHopper Track");
         res.setHeader("Content-Disposition", "attachment;filename=" + "GraphHopper.gpx");
         String timeZone = getParam(req, "timezone", "GMT");
         long time = getLongParam(req, "millis", System.currentTimeMillis());
-        writeResponse(res, rsp.getInstructions().createGPX(trackName, time, timeZone));
+        writeResponse(res, rsp.getInstructions().createGPX(trackName, time, timeZone, includeElevation));
     }
 
     private void writeJson( HttpServletRequest req, HttpServletResponse res,
             GHResponse rsp, float took ) throws JSONException, IOException
     {
         boolean enableInstructions = getBooleanParam(req, "instructions", true);
-        Locale locale = Helper.getLocale(getParam(req, "locale", "en"));
         boolean pointsEncoded = getBooleanParam(req, "points_encoded", true);
         boolean calcPoints = getBooleanParam(req, "calc_points", true);
+        boolean includeElevation = getBooleanParam(req, "elevation", false);
         JSONObject json = new JSONObject();
         JSONObject jsonInfo = new JSONObject();
         json.put("info", jsonInfo);
@@ -169,14 +174,12 @@ private void writeJson( HttpServletRequest req, HttpServletResponse res,
                 if (points.getSize() >= 2)
                     jsonPath.put("bbox", rsp.calcRouteBBox(hopper.getGraph().getBounds()).toGeoJson());
 
-                jsonPath.put("points", createPoints(points, pointsEncoded));
-                jsonPath.put("points_dimension", points.getDimension());
+                jsonPath.put("points", createPoints(points, pointsEncoded, includeElevation));                
 
                 if (enableInstructions)
                 {
-                    Translation tr = trMap.getWithFallBack(locale);
                     InstructionList instructions = rsp.getInstructions();
-                    jsonPath.put("instructions", instructions.createJson(tr));
+                    jsonPath.put("instructions", instructions.createJson());
                 }
             }
             json.put("paths", Collections.singletonList(jsonPath));
@@ -185,14 +188,14 @@ private void writeJson( HttpServletRequest req, HttpServletResponse res,
         writeJson(req, res, json);
     }
 
-    Object createPoints( PointList points, boolean pointsEncoded ) throws JSONException
+    Object createPoints( PointList points, boolean pointsEncoded, boolean includeElevation ) throws JSONException
     {
         if (pointsEncoded)
-            return WebHelper.encodePolyline(points);
+            return WebHelper.encodePolyline(points, includeElevation);
 
         JSONObject jsonPoints = new JSONObject();
         jsonPoints.put("type", "LineString");
-        jsonPoints.put("coordinates", points.toGeoJson());
+        jsonPoints.put("coordinates", points.toGeoJson(includeElevation));
         return jsonPoints;
     }
 
diff --git a/web/src/main/java/com/graphhopper/http/GraphHopperWeb.java b/web/src/main/java/com/graphhopper/http/GraphHopperWeb.java
index 044d4f625d..b0dce68bd6 100644
--- a/web/src/main/java/com/graphhopper/http/GraphHopperWeb.java
+++ b/web/src/main/java/com/graphhopper/http/GraphHopperWeb.java
@@ -20,11 +20,7 @@
 import com.graphhopper.GHRequest;
 import com.graphhopper.GHResponse;
 import com.graphhopper.GraphHopperAPI;
-import com.graphhopper.util.Downloader;
-import com.graphhopper.util.Instruction;
-import com.graphhopper.util.InstructionList;
-import com.graphhopper.util.PointList;
-import com.graphhopper.util.StopWatch;
+import com.graphhopper.util.*;
 import com.graphhopper.util.shapes.GHPoint;
 import org.json.JSONArray;
 import org.json.JSONObject;
@@ -51,6 +47,7 @@ public static void main( String[] args )
     private boolean pointsEncoded = true;
     private Downloader downloader = new Downloader("GraphHopperWeb");
     private boolean instructions = true;
+    private final TranslationMap trMap = new TranslationMap().doImport();
 
     public GraphHopperWeb()
     {
@@ -95,38 +92,40 @@ public GHResponse route( GHRequest request )
             {
                 places += "point=" + p.lat + "," + p.lon + "&";
             }
+            
+            boolean withElevation = false;
+            
             String url = serviceUrl
                     + "?"
                     + places
                     + "&type=json"
                     + "&points_encoded=" + pointsEncoded
                     + "&min_path_precision=" + request.getHint("douglas.minprecision", 1)
-                    + "&algo=" + request.getAlgorithm();
+                    + "&algo=" + request.getAlgorithm()
+                    + "&locale=" + request.getLocale().toString()
+                    + "&elevation=" + withElevation;
+            
             String str = downloader.downloadAsString(url);
             JSONObject json = new JSONObject(str);
             took = json.getJSONObject("info").getDouble("took");
             JSONArray paths = json.getJSONArray("paths");
-            JSONObject firstPath = paths.getJSONObject(0);
-
-            boolean is3D = false;
-            if (firstPath.has("points_dim"))
-                is3D = "3".equals(firstPath.getString("points_dim"));
+            JSONObject firstPath = paths.getJSONObject(0);            
             double distance = firstPath.getDouble("distance");
             int time = firstPath.getInt("time");
             PointList pointList;
             if (pointsEncoded)
             {
-                pointList = WebHelper.decodePolyline(firstPath.getString("points"), 100, is3D);
+                pointList = WebHelper.decodePolyline(firstPath.getString("points"), 100, withElevation);
             } else
             {
                 JSONArray coords = firstPath.getJSONObject("points").getJSONArray("coordinates");
-                pointList = new PointList(coords.length(), is3D);
+                pointList = new PointList(coords.length(), withElevation);
                 for (int i = 0; i < coords.length(); i++)
                 {
                     JSONArray arr = coords.getJSONArray(i);
                     double lon = arr.getDouble(0);
                     double lat = arr.getDouble(1);
-                    if (is3D)
+                    if (withElevation)
                         pointList.add(lat, lon, arr.getDouble(2));
                     else
                         pointList.add(lat, lon);
@@ -136,8 +135,8 @@ public GHResponse route( GHRequest request )
             if (instructions)
             {
                 JSONArray instrArr = firstPath.getJSONArray("instructions");
-
-                InstructionList il = new InstructionList();
+                
+                InstructionList il = new InstructionList(trMap.getWithFallBack(request.getLocale()));
                 for (int instrIndex = 0; instrIndex < instrArr.length(); instrIndex++)
                 {
                     JSONObject jsonObj = instrArr.getJSONObject(instrIndex);
@@ -148,14 +147,14 @@ public GHResponse route( GHRequest request )
                     JSONArray iv = jsonObj.getJSONArray("interval");
                     int from = iv.getInt(0);
                     int to = iv.getInt(1);
-                    PointList instPL = new PointList(to - from, is3D);
+                    PointList instPL = new PointList(to - from, withElevation);
                     for (int j = from; j <= to; j++)
                     {
                         instPL.add(pointList, j);
                     }
 
                     // TODO way and payment type
-                    Instruction instr = new Instruction(sign, text, -1, -1, instPL).
+                    Instruction instr = new Instruction(sign, text, InstructionAnnotation.EMPTY, instPL).
                             setDistance(instDist).setTime(instTime);
                     il.add(instr);
                 }
diff --git a/web/src/main/java/com/graphhopper/http/I18NServlet.java b/web/src/main/java/com/graphhopper/http/I18NServlet.java
index 714ae86582..833246508a 100644
--- a/web/src/main/java/com/graphhopper/http/I18NServlet.java
+++ b/web/src/main/java/com/graphhopper/http/I18NServlet.java
@@ -19,7 +19,7 @@
 
 import com.graphhopper.util.Helper;
 import com.graphhopper.util.TranslationMap;
-import com.graphhopper.util.TranslationMap.Translation;
+import com.graphhopper.util.Translation;
 import java.io.IOException;
 import java.util.Locale;
 import javax.inject.Inject;
diff --git a/web/src/main/java/com/graphhopper/http/InfoServlet.java b/web/src/main/java/com/graphhopper/http/InfoServlet.java
index 9e284b7dad..824d5c3ee1 100644
--- a/web/src/main/java/com/graphhopper/http/InfoServlet.java
+++ b/web/src/main/java/com/graphhopper/http/InfoServlet.java
@@ -68,7 +68,18 @@ void writeInfos( HttpServletRequest req, HttpServletResponse res ) throws Except
 
         JSONObject json = new JSONObject();
         json.put("bbox", list);
-        json.put("supported_vehicles", hopper.getGraph().getEncodingManager().toString().split(","));
+
+        String[] vehicles = hopper.getGraph().getEncodingManager().toString().split(",");
+        json.put("supported_vehicles", vehicles);
+        JSONObject features = new JSONObject();
+        for (String v : vehicles)
+        {
+            JSONObject perVehicleJson = new JSONObject();
+            perVehicleJson.put("elevation", hopper.hasElevation());
+            features.put(v, perVehicleJson);
+        }
+        json.put("features", features);
+
         json.put("version", Constants.VERSION);
         json.put("build_date", Constants.BUILD_DATE);
 
diff --git a/web/src/main/java/com/graphhopper/http/WebHelper.java b/web/src/main/java/com/graphhopper/http/WebHelper.java
index 3767f34904..d73f0b8081 100644
--- a/web/src/main/java/com/graphhopper/http/WebHelper.java
+++ b/web/src/main/java/com/graphhopper/http/WebHelper.java
@@ -93,6 +93,11 @@ public static PointList decodePolyline( String encoded, int initCap, boolean is3
 
     // https://developers.google.com/maps/documentation/utilities/polylinealgorithm?hl=de
     public static String encodePolyline( PointList poly )
+    {
+        return encodePolyline(poly, poly.is3D());
+    }
+
+    public static String encodePolyline( PointList poly, boolean includeElevation )
     {
         StringBuilder sb = new StringBuilder();
         int size = poly.getSize();
@@ -107,7 +112,7 @@ public static String encodePolyline( PointList poly )
             num = (int) Math.floor(poly.getLongitude(i) * 1e5);
             encodeNumber(sb, num - prevLon);
             prevLon = num;
-            if (poly.is3D())
+            if (includeElevation)
             {
                 num = (int) Math.floor(poly.getElevation(i) * 100);
                 encodeNumber(sb, num - prevEle);
diff --git a/web/src/main/webapp/img/bike2.png b/web/src/main/webapp/img/bike2.png
index 2bc450e6c1..54a802bb12 100644
Binary files a/web/src/main/webapp/img/bike2.png and b/web/src/main/webapp/img/bike2.png differ
diff --git a/web/src/main/webapp/index.html b/web/src/main/webapp/index.html
index 4aba05dcea..47b67b5949 100644
--- a/web/src/main/webapp/index.html
+++ b/web/src/main/webapp/index.html
@@ -21,8 +21,8 @@
         <script type="text/javascript" src="js/jquery.history.js"></script>
         <!--        <script type="text/javascript" src="js/jquery.autocomplete.min.js"></script>-->
         <script type="text/javascript" src="js/jquery.autocomplete.js"></script>
-        <script type="text/javascript" src="js/ghrequest.js"></script>
-        <script type="text/javascript" src="js/main.js"></script>         
+        <script type="text/javascript" src="js/ghrequest.js?v=0.4.1"></script>
+        <script type="text/javascript" src="js/main.js?v=0.4.1"></script>         
         <link rel="stylesheet" type="text/css" href="css/style.css" />
     </head>
     <body>
diff --git a/web/src/main/webapp/js/ghrequest.js b/web/src/main/webapp/js/ghrequest.js
index 4847709ba5..b60012fbbe 100644
--- a/web/src/main/webapp/js/ghrequest.js
+++ b/web/src/main/webapp/js/ghrequest.js
@@ -23,12 +23,14 @@ GHRequest = function(host) {
     this.weighting = "fastest";
     this.points_encoded = true;
     this.instructions = true;
+    this.elevation = false;
+    this.features = {};
     this.debug = false;
     this.locale = "en";
     this.do_zoom = true;
     // use jsonp here if host allows CORS
     this.dataType = "json";
-    this.key = "tcV28oCCNIzu4GD1Hsp8dYGAHqFBXvYrBvBwthGE";
+    this.key = "K1KVyGYve5choCJAbyejstj5Ho0dEa6RbBnwHbSw";
 };
 
 GHRequest.prototype.init = function(params) {
@@ -55,9 +57,21 @@ GHRequest.prototype.init = function(params) {
     if (params.locale)
         this.locale = params.locale;
 
-    this.handleBoolean("do_zoom", params);
-    this.handleBoolean("instructions", params);
-    this.handleBoolean("points_encoded", params);
+    if ('do_zoom' in params)
+        this.do_zoom = params.do_zoom;
+    if ('instructions' in params)
+        this.instructions = params.instructions;
+    if ('points_encoded' in params)
+        this.points_encoded = params.points_encoded;
+
+    this.elevation = false;
+    var featureSet = this.features[this.vehicle];
+    if (featureSet && featureSet.elevation) {
+        if ('elevation' in params)
+            this.elevation = params.elevation;
+        else
+            this.elevation = true;
+    }
 
     if (params.q) {
         var qStr = params.q;
@@ -87,14 +101,22 @@ GHRequest.prototype.init = function(params) {
     }
 };
 
-GHRequest.prototype.handleBoolean = function(key, params) {
-    if (key in params)
-        this[key] = params[key] === "true" || params[key] === true;
+GHRequest.prototype.initVehicle = function(vehicle) {
+    this.vehicle = vehicle;
+    var featureSet = this.features[this.vehicle];
+    if (featureSet && featureSet.elevation)
+        this.elevation = true;
+    else
+        this.elevation = false;
+};
+
+GHRequest.prototype.hasElevation = function() {
+    return this.elevation;
 };
 
 GHRequest.prototype.createGeocodeURL = function(host) {
     var tmpHost = this.host;
-    if(host)
+    if (host)
         tmpHost = host;
     return this.createPath(tmpHost + "/geocode?limit=8&type=" + this.dataType + "&key=" + this.key);
 };
@@ -115,26 +137,29 @@ GHRequest.prototype.createFullURL = function() {
 };
 
 GHRequest.prototype.createPath = function(url) {
-    if (this.vehicle && this.vehicle != "car")
+    if (this.vehicle && this.vehicle !== "car")
         url += "&vehicle=" + this.vehicle;
     // fastest or shortest
-    if (this.weighting && this.weighting != "fastest")
+    if (this.weighting && this.weighting !== "fastest")
         url += "&weighting=" + this.weighting;
-    if (this.locale && this.locale != "en")
+    if (this.locale && this.locale !== "en")
         url += "&locale=" + this.locale;
     // dijkstra, dijkstrabi, astar, astarbi
-    if (this.algorithm && this.algorithm != "dijkstrabi")
+    if (this.algorithm && this.algorithm !== "dijkstrabi")
         url += "&algorithm=" + this.algorithm;
+    if (this.min_path_precision !== 1)
+        url += "&min_path_precision=" + this.min_path_precision;
     if (!this.instructions)
         url += "&instructions=false";
     if (!this.points_encoded)
         url += "&points_encoded=false";
-    if (this.min_path_precision !== 1)
-        url += "&min_path_precision=" + this.min_path_precision;
+
+    if(this.elevation)
+        url += "&elevation=true";
     if (this.debug)
         url += "&debug=true";
     return url;
-}
+};
 
 function decodePath(encoded, is3D) {
     // var start = new Date().getTime();
@@ -189,6 +214,7 @@ function decodePath(encoded, is3D) {
 }
 
 GHRequest.prototype.doRequest = function(url, callback) {
+    var that = this;
     $.ajax({
         "timeout": 30000,
         "url": url,
@@ -198,7 +224,7 @@ GHRequest.prototype.doRequest = function(url, callback) {
                     var path = json.paths[i];
                     // convert encoded polyline to geo json
                     if (path.points_encoded) {
-                        var tmpArray = decodePath(path.points, path.points_dimension === 3);
+                        var tmpArray = decodePath(path.points, that.hasElevation());
                         path.points = {
                             "type": "LineString",
                             "coordinates": tmpArray
@@ -212,7 +238,7 @@ GHRequest.prototype.doRequest = function(url, callback) {
             // problematic: this callback is not invoked when using JSONP!
             // http://stackoverflow.com/questions/19035557/jsonp-request-error-handling
             var msg = "API did not respond! ";
-            if (err && err.statusText && err.statusText != "OK")
+            if (err && err.statusText && err.statusText !== "OK")
                 msg += err.statusText;
 
             console.log(msg + " " + JSON.stringify(err));
diff --git a/web/src/main/webapp/js/jquery.autocomplete.js b/web/src/main/webapp/js/jquery.autocomplete.js
index a9dabb00c7..3028e735a6 100644
--- a/web/src/main/webapp/js/jquery.autocomplete.js
+++ b/web/src/main/webapp/js/jquery.autocomplete.js
@@ -195,7 +195,7 @@
             var that = this;
             that.fixPosition();
             if (that.options.minChars <= that.el.val().length) {
-                that.onValueChange();
+                // that.onValueChange();
             }
         },
 
diff --git a/web/src/main/webapp/js/main.js b/web/src/main/webapp/js/main.js
index e4be9479ba..1392aa1a48 100644
--- a/web/src/main/webapp/js/main.js
+++ b/web/src/main/webapp/js/main.js
@@ -5,7 +5,7 @@
  */
 var tmpArgs = parseUrlWithHisto();
 var host = tmpArgs["host"];
-// var host = "http://graphhopper.com/api/1";
+var host = "http://graphhopper.com/api/1";
 if (!host) {
     if (location.port === '') {
         host = location.protocol + '//' + location.hostname;
@@ -48,7 +48,7 @@ $(document).ready(function(e) {
     // fixing cross domain support e.g in Opera
     jQuery.support.cors = true;
 
-    if (host.indexOf("graphhopper.com") > 0)
+    if (isProduction())
         $('#hosting').show();
 
     var History = window.History;
@@ -88,7 +88,7 @@ $(document).ready(function(e) {
                 ghRequest.setLocale(translations["locale"]);
                 defaultTranslationMap = translations["default"];
                 enTranslationMap = translations["en"];
-                if (defaultTranslationMap == null)
+                if (!defaultTranslationMap)
                     defaultTranslationMap = enTranslationMap;
 
                 initI18N();
@@ -103,12 +103,11 @@ $(document).ready(function(e) {
                 bounds.maxLat = tmp[3];
                 var vehiclesDiv = $("#vehicles");
                 function createButton(vehicle) {
-                    var vehicle = vehicle.toLowerCase();
                     var button = $("<button class='vehicle-btn' title='" + tr(vehicle) + "'/>");
                     button.attr('id', vehicle);
                     button.html("<img src='img/" + vehicle + ".png' alt='" + tr(vehicle) + "'></img>");
                     button.click(function() {
-                        ghRequest.vehicle = vehicle;
+                        ghRequest.initVehicle(vehicle);
                         resolveFrom();
                         resolveTo();
                         routeLatLng(ghRequest);
@@ -116,13 +115,17 @@ $(document).ready(function(e) {
                     return button;
                 }
 
-                if (json.supported_vehicles) {
-                    var vehicles = json.supported_vehicles;
+                if (json.features) {
+                    ghRequest.features = json.features;
+                    if (isProduction())
+                        delete json.features['bike']
+
+                    var vehicles = Object.keys(json.features);
                     if (vehicles.length > 0)
-                        ghRequest.vehicle = vehicles[0];
+                        ghRequest.initVehicle(vehicles[0]);
 
-                    for (var i = 0; i < vehicles.length; i++) {
-                        vehiclesDiv.append(createButton(vehicles[i]));
+                    for (var key in json.features) {
+                        vehiclesDiv.append(createButton(key.toLowerCase()));
                     }
                 }
 
@@ -132,7 +135,8 @@ $(document).ready(function(e) {
                 initFromParams(urlParams, true);
             }, function(err) {
                 console.log(err);
-                $('#error').html('GraphHopper API offline? ' + host);
+                $('#error').html('GraphHopper API offline? <a href="http://graphhopper.com/maps">Refresh</a>'
+                        + '<br/>Status: ' + err.statusText + '<br/>' + host);
 
                 bounds = {
                     "minLon": -180,
@@ -254,7 +258,7 @@ function initMap() {
 
     // default
     map = L.map('map', {
-        layers: [mapquest]
+        layers: [lyrk]
     });
 
     var baseMaps = {
@@ -386,8 +390,11 @@ function resolve(fromOrTo, locCoord) {
         var errorDiv = $("#" + fromOrTo + "ResolveError");
         errorDiv.empty();
 
-        if (locCoord.error)
-            errorDiv.text(locCoord.error);
+        if (locCoord.error) {
+            errorDiv.show();
+            errorDiv.text(locCoord.error).fadeOut(5000);
+            locCoord.error = '';
+        }
 
         $("#" + fromOrTo + "Indicator").hide();
         $("#" + fromOrTo + "Flag").show();
@@ -648,7 +655,7 @@ function routeLatLng(request, doQuery) {
             "geometry": path.points
         };
 
-        if (path.points_dimension === 3) {
+        if (request.hasElevation()) {
             if (elevationControl === null) {
                 elevationControl = L.control.elevation({
                     position: "bottomright",
@@ -712,7 +719,7 @@ function routeLatLng(request, doQuery) {
             $("#info").append(instructionsElement);
 
             if (partialInstr) {
-                var moreDiv = $("<button id='moreButton'>More...</button>");
+                var moreDiv = $("<button id='moreButton'>" + tr("moreButton") + "..</button>");
                 moreDiv.click(function() {
                     moreDiv.remove();
                     for (var m = len; m < path.instructions.length; m++) {
@@ -824,6 +831,12 @@ function addInstruction(main, instr, instrIndex, lngLat) {
     else
         throw "did not found sign " + sign;
     var title = instr.text;
+    if (instr.annotationText) {
+        if (!title)
+            title = instr.annotationText;
+        else
+            title = title + ", " + instr.annotationText;
+    }
     var distance = instr.distance;
     var str = "<td class='instr_title'>" + title + "</td>";
 
@@ -893,9 +906,19 @@ function parseUrl(query) {
         var value = vars[i].substring(indexPos + 1);
         value = decodeURIComponent(value.replace(/\+/g, ' '));
 
-        if (typeof res[key] === "undefined")
-            res[key] = value;
-        else if (typeof res[key] === "string") {
+        if (typeof res[key] === "undefined") {
+            if (value === 'true')
+                res[key] = true;
+            else if (value === 'false')
+                res[key] = false;
+            else {
+                var tmp = Number(value);
+                if (isNaN(tmp))
+                    res[key] = value;
+                else
+                    res[key] = Number(value);
+            }
+        } else if (typeof res[key] === "string") {
             var arr = [res[key], value];
             res[key] = arr;
         } else
@@ -945,19 +968,19 @@ function tr(key, args) {
 }
 
 function tr2(key, args) {
-    if (key == null) {
+    if (key === null) {
         console.log("ERROR: key was null?");
         return "";
     }
-    if (defaultTranslationMap == null) {
+    if (defaultTranslationMap === null) {
         console.log("ERROR: defaultTranslationMap was not initialized?");
         return key;
     }
     key = key.toLowerCase();
     var val = defaultTranslationMap[key];
-    if (val == null && enTranslationMap)
+    if (!val && enTranslationMap)
         val = enTranslationMap[key];
-    if (val == null)
+    if (!val)
         return key;
 
     return stringFormat(val, args);
@@ -988,6 +1011,7 @@ function initI18N() {
     $('#searchButton').attr("value", tr("searchButton"));
     $('#fromInput').attr("placeholder", tr("fromHint"));
     $('#toInput').attr("placeholder", tr("toHint"));
+    $('#gpxExportButton').attr("title", tr("gpxExportButton"));
 }
 
 function exportGPX() {
@@ -1035,7 +1059,7 @@ function setAutoCompleteList(fromOrTo) {
             return val === undefined;
         },
         serviceUrl: function() {
-            return ghRequest.createGeocodeURL();
+            return ghRequest.createGeocodeURL("http://graphhopper.com/api/1");
         },
         transformResult: function(response, originalQuery) {
             response.suggestions = [];
@@ -1077,8 +1101,12 @@ function setAutoCompleteList(fromOrTo) {
 
     myAutoDiv.autocomplete(options);
     $("#" + fromOrTo + "Input").focusout(function() {
+        myAutoDiv.autocomplete().disable();
         myAutoDiv.autocomplete().hide();
     });
+    $("#" + fromOrTo + "Input").focusin(function() {
+        myAutoDiv.autocomplete().enable();
+    });
 }
 
 function dataToHtml(data, query) {
@@ -1122,3 +1150,7 @@ function dataToText(data) {
         text = insComma(text, data.country);
     return text;
 }
+
+function isProduction() {
+    return host.indexOf("graphhopper.com") > 0;
+}
\ No newline at end of file
diff --git a/web/src/test/java/com/graphhopper/http/BaseServletTest.java b/web/src/test/java/com/graphhopper/http/BaseServletTester.java
similarity index 87%
rename from web/src/test/java/com/graphhopper/http/BaseServletTest.java
rename to web/src/test/java/com/graphhopper/http/BaseServletTester.java
index 12995eb1ce..5e66eadd61 100644
--- a/web/src/test/java/com/graphhopper/http/BaseServletTest.java
+++ b/web/src/test/java/com/graphhopper/http/BaseServletTester.java
@@ -24,13 +24,14 @@
 import com.graphhopper.util.CmdArgs;
 import com.graphhopper.util.Downloader;
 import org.json.JSONObject;
+import org.junit.AfterClass;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 /**
  * @author Peter Karich
  */
-public class BaseServletTest
+public class BaseServletTester
 {
     private static GHServer server;
     protected static Logger logger = LoggerFactory.getLogger(GraphHopperServletIT.class);
@@ -45,24 +46,19 @@ public void setUpGuice( Module... modules )
     /**
      * This method will start jetty with andorra area loaded as OSM.
      */
-    public void setUpJetty()
+    public void setUpJetty( CmdArgs args )
     {
         if (injector != null)
             throw new UnsupportedOperationException("do not call guice before");
 
-        bootJetty(3);
+        bootJetty(args, 3);
     }
 
-    private void bootJetty( int retryCount )
+    private void bootJetty( CmdArgs args, int retryCount )
     {
         if (server != null)
             return;
 
-        CmdArgs args = new CmdArgs().
-                put("config", "../config-example.properties").
-                put("osmreader.osm", "../core/files/andorra.osm.pbf").
-                put("graph.location", "./target/andorra-gh/");
-
         server = new GHServer(args);
 
         if (injector == null)
@@ -86,7 +82,7 @@ private void bootJetty( int retryCount )
         }
     }
 
-    public void shutdownJetty( boolean force )
+    public static void shutdownJetty( boolean force )
     {
         // this is too slow so allow force == false. Then on setUpJetty a new server is created on a different port
         if (force && server != null)
@@ -98,9 +94,6 @@ public void shutdownJetty( boolean force )
                 logger.error("Cannot stop jetty", ex);
             }
 
-        if (injector != null)
-            new GuiceFilter().destroy();
-        injector = null;
         server = null;
     }
 
diff --git a/web/src/test/java/com/graphhopper/http/GraphHopperServletIT.java b/web/src/test/java/com/graphhopper/http/GraphHopperServletIT.java
index fce942f9b6..e1a902b3f4 100644
--- a/web/src/test/java/com/graphhopper/http/GraphHopperServletIT.java
+++ b/web/src/test/java/com/graphhopper/http/GraphHopperServletIT.java
@@ -20,7 +20,11 @@
 import com.graphhopper.GHRequest;
 import com.graphhopper.GHResponse;
 import com.graphhopper.GraphHopperAPI;
+import com.graphhopper.util.CmdArgs;
+import com.graphhopper.util.Helper;
+import java.io.File;
 import org.json.JSONObject;
+import org.junit.AfterClass;
 import org.junit.Before;
 import org.junit.Test;
 import static org.junit.Assert.*;
@@ -28,12 +32,25 @@
 /**
  * @author Peter Karich
  */
-public class GraphHopperServletIT extends BaseServletTest
+public class GraphHopperServletIT extends BaseServletTester
 {
+    private static final String dir = "./target/andorra-gh/";
+
+    @AfterClass
+    public static void cleanUp()
+    {
+        Helper.removeDir(new File(dir));
+        shutdownJetty(true);
+    }
+
     @Before
     public void setUp()
     {
-        setUpJetty();
+        CmdArgs args = new CmdArgs().
+                put("config", "../config-example.properties").
+                put("osmreader.osm", "../core/files/andorra.osm.pbf").
+                put("graph.location", dir);
+        setUpJetty(args);
     }
 
     @Test
@@ -42,7 +59,8 @@ public void testBasicQuery() throws Exception
         JSONObject json = query("point=42.554851,1.536198&point=42.510071,1.548128");
         JSONObject infoJson = json.getJSONObject("info");
         assertFalse(infoJson.has("errors"));
-        double distance = json.getJSONArray("paths").getJSONObject(0).getDouble("distance");
+        JSONObject path = json.getJSONArray("paths").getJSONObject(0);
+        double distance = path.getDouble("distance");
         assertTrue("distance wasn't correct:" + distance, distance > 9000);
         assertTrue("distance wasn't correct:" + distance, distance < 9500);
     }
@@ -55,6 +73,15 @@ public void testJsonRounding() throws Exception
         assertTrue("unexpected precision!", cson.toString().indexOf("[1.536374,42.554839]") >= 0);
     }
 
+    @Test
+    public void testFailIfElevationRequestedButNotIncluded() throws Exception
+    {
+        JSONObject json = query("point=42.554851234,1.536198&point=42.510071,1.548128&points_encoded=false&elevation=true");
+        JSONObject infoJson = json.getJSONObject("info");
+        assertTrue(infoJson.has("errors"));
+        assertEquals("Elevation not supported!", infoJson.getJSONArray("errors").getJSONObject(0).getString("message"));
+    }
+
     @Test
     public void testGraphHopperWeb() throws Exception
     {
diff --git a/web/src/test/java/com/graphhopper/http/GraphHopperServletWithEleIT.java b/web/src/test/java/com/graphhopper/http/GraphHopperServletWithEleIT.java
new file mode 100644
index 0000000000..f7f025200a
--- /dev/null
+++ b/web/src/test/java/com/graphhopper/http/GraphHopperServletWithEleIT.java
@@ -0,0 +1,94 @@
+/*
+ *  Licensed to GraphHopper and Peter Karich under one or more contributor
+ *  license agreements. See the NOTICE file distributed with this work for 
+ *  additional information regarding copyright ownership.
+ * 
+ *  GraphHopper licenses this file to you under the Apache License, 
+ *  Version 2.0 (the "License"); you may not use this file except in 
+ *  compliance with the License. You may obtain a copy of the License at
+ * 
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package com.graphhopper.http;
+
+import com.graphhopper.util.CmdArgs;
+import com.graphhopper.util.Helper;
+import java.io.File;
+import org.json.JSONObject;
+import org.junit.AfterClass;
+import org.junit.Before;
+import org.junit.Test;
+import static org.junit.Assert.*;
+import org.junit.BeforeClass;
+
+/**
+ * @author Peter Karich
+ */
+public class GraphHopperServletWithEleIT extends BaseServletTester
+{
+    private static final String dir = "./target/monaco-gh/";
+
+    @AfterClass
+    public static void cleanUp()
+    {
+        Helper.removeDir(new File(dir));
+        shutdownJetty(true);
+    }
+
+    @Before
+    public void setUp()
+    {
+        CmdArgs args = new CmdArgs().
+                put("graph.elevation.provider", "srtm").
+                put("graph.elevation.cachedir", "../core/files/").
+                put("prepare.chShortcuts", "no").
+                put("config", "../config-example.properties").
+                put("osmreader.osm", "../core/files/monaco.osm.gz").
+                put("graph.location", dir);
+        setUpJetty(args);
+    }
+
+    @Test
+    public void testElevation() throws Exception
+    {
+        JSONObject json = query("point=43.730864,7.420771&point=43.727687,7.418737&points_encoded=false&elevation=true");
+        JSONObject infoJson = json.getJSONObject("info");
+        assertFalse(infoJson.has("errors"));
+        JSONObject path = json.getJSONArray("paths").getJSONObject(0);
+        double distance = path.getDouble("distance");
+        assertTrue("distance wasn't correct:" + distance, distance > 2500);
+        assertTrue("distance wasn't correct:" + distance, distance < 2700);
+
+        JSONObject cson = path.getJSONObject("points");
+        assertTrue("no elevation?", cson.toString().indexOf("[7.421392,43.7307,66]") >= 0);        
+    }
+
+    @Test
+    public void testNoElevation() throws Exception
+    {
+        // default is elevation=false
+        JSONObject json = query("point=43.730864,7.420771&point=43.727687,7.418737&points_encoded=false");
+        JSONObject infoJson = json.getJSONObject("info");
+        assertFalse(infoJson.has("errors"));
+        JSONObject path = json.getJSONArray("paths").getJSONObject(0);
+        double distance = path.getDouble("distance");
+        assertTrue("distance wasn't correct:" + distance, distance > 2500);
+        assertTrue("distance wasn't correct:" + distance, distance < 2700);
+        JSONObject cson = path.getJSONObject("points");
+        assertTrue("Elevation should not be included!", cson.toString().indexOf("[7.421392,43.7307]") >= 0);        
+
+        // disable elevation
+        json = query("point=43.730864,7.420771&point=43.727687,7.418737&points_encoded=false&elevation=false");
+        infoJson = json.getJSONObject("info");
+        assertFalse(infoJson.has("errors"));
+        path = json.getJSONArray("paths").getJSONObject(0);
+        cson = path.getJSONObject("points");
+        assertTrue("Elevation should not be included!", cson.toString().indexOf("[7.421392,43.7307]") >= 0);        
+    }
+}
diff --git a/web/src/test/webapp/spec/UtilsSpec.js b/web/src/test/webapp/spec/UtilsSpec.js
index d35a2b2c21..837e20c24f 100644
--- a/web/src/test/webapp/spec/UtilsSpec.js
+++ b/web/src/test/webapp/spec/UtilsSpec.js
@@ -69,6 +69,45 @@ describe("utils", function() {
         expect(list).toEqual([[-120.2, 38.5, 10], [-120.95, 40.7, 1234], [-126.45300000000002, 43.252, 1234]]);
     });
 
+    it("should parse URL correctly", function() {
+        var params = parseUrl("localhost:8989?test=pest&test2=true&test3=false&test4=2&test5=1.1");
+        expect("pest").toEqual(params.test);
+        expect(true).toEqual(params.test2);
+        expect(false).toEqual(params.test3);
+        expect(2).toEqual(params.test4);
+        expect(1.1).toEqual(params.test5);
+    });
+
+    it("features should work", function() {
+        var ghRequest = new GHRequest("http://test.de?vehicle=car");
+        var params = {};
+        params.elevation = true;
+        ghRequest.features = {"car":{}};
+        ghRequest.init(params);
+        expect(ghRequest.elevation).toEqual(false);
+        
+        ghRequest.features = {"car":{ elevation: true}};
+        ghRequest.init(params);
+        expect(ghRequest.elevation).toEqual(true);
+        
+        var params = {};
+        ghRequest.features = {"car":{ elevation: true}};
+        ghRequest.init(params);
+        expect(ghRequest.elevation).toEqual(true);
+        
+        var params = {};
+        params.elevation = false;
+        ghRequest.features = {"car":{ elevation: true}};
+        ghRequest.init(params);
+        expect(ghRequest.elevation).toEqual(false);
+        
+        var params = {};
+        params.elevation = true;
+        ghRequest.features = {"car":{ elevation: false}};
+        ghRequest.init(params);
+        expect(ghRequest.elevation).toEqual(false);
+    });
+    
     it("ghrequest should init correctly from params", function() {
         var ghRequest = new GHRequest("http://test.de");
         var params = {};
@@ -81,7 +120,7 @@ describe("utils", function() {
         expect(ghRequest.do_zoom).toEqual(params.do_zoom);
     });
 
-    it("input should accept 0", function() {        
+    it("input should accept 0", function() {
         var input = new GHInput("12,0");
         expect(input.toString()).toEqual("12,0");
         var input = new GHInput("bluo,0");
@@ -91,7 +130,7 @@ describe("utils", function() {
         var input = new GHInput("");
         expect(input.toString()).toEqual(undefined);
     });
-    
+
     it("point should be parsable", function() {
         expect(new GHInput("12.44, 68.44").lat).toEqual(12.44);
         expect(new GHInput("12.44, 68.44").lng).toEqual(68.44);
