diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/BouldersTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/BouldersTest.java
index 4b55358ac3..0bacae1d32 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/BouldersTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/BouldersTest.java
@@ -11,24 +11,24 @@
 import com.graphhopper.reader.Way;
 
 public class BouldersTest {
-	 static OsDpnOsmAttributeMappingVisitor visitor;
-	    @Mock
-	    Way way;
-
-	    @BeforeClass
-	    public static void createVisitor() {
-	        visitor = new Boulders();
-	    }
-
-	    @Before
-	    public void init() {
-	        MockitoAnnotations.initMocks(this);
-	    }
-
-	    @Test
-	    public void testVisitWayAttribute() throws Exception {
-	        visitor.visitWayAttribute("boulders", way);
-	        verify(way).setTag("natural", "boulders");  // Not an osm tag but what makes sense for dpn
-	    }
+    static OsDpnOsmAttributeMappingVisitor visitor;
+    @Mock
+    Way way;
+
+    @BeforeClass
+    public static void createVisitor() {
+        visitor = new Boulders();
+    }
+
+    @Before
+    public void init() {
+        MockitoAnnotations.initMocks(this);
+    }
+
+    @Test
+    public void testVisitWayAttribute() throws Exception {
+        visitor.visitWayAttribute("boulders", way);
+        verify(way).setTag("natural", "boulders");  // Not an osm tag but what makes sense for dpn
+    }
 
 }
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/CliffTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/CliffTest.java
index 87474acdb4..bd427b6703 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/CliffTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/CliffTest.java
@@ -11,24 +11,23 @@
 import com.graphhopper.reader.Way;
 
 public class CliffTest {
-	 static OsDpnOsmAttributeMappingVisitor visitor;
-	    @Mock
-	    Way way;
-
-	    @BeforeClass
-	    public static void createVisitor() {
-	        visitor = new Cliff();
-	    }
-
-	    @Before
-	    public void init() {
-	        MockitoAnnotations.initMocks(this);
-	    }
-
-	    @Test
-	    public void testVisitWayAttribute() throws Exception {
-	        visitor.visitWayAttribute("cliff", way);
-	        verify(way).setTag("natural", "cliff");
-	    }
-
+    static OsDpnOsmAttributeMappingVisitor visitor;
+    @Mock
+    Way way;
+
+    @BeforeClass
+    public static void createVisitor() {
+        visitor = new Cliff();
+    }
+
+    @Before
+    public void init() {
+        MockitoAnnotations.initMocks(this);
+    }
+
+    @Test
+    public void testVisitWayAttribute() throws Exception {
+        visitor.visitWayAttribute("cliff", way);
+        verify(way).setTag("natural", "cliff");
+    }
 }
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/DpnAttributeAvoidanceTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/DpnAttributeAvoidanceTest.java
index d5c19e79d9..8f60973bdf 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/DpnAttributeAvoidanceTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/DpnAttributeAvoidanceTest.java
@@ -14,25 +14,24 @@
 import com.graphhopper.util.InstructionList;
 
 public class DpnAttributeAvoidanceTest extends AbstractOsDpnReaderTest {
-	
 
-	@Test
-	public void testAvoidBoulder() throws IOException {
-		File file = new File("./src/test/resources/com/graphhopper/reader/osgb/dpn/os-dpn-avoid.xml");
-		GraphHopper hopper = new GraphHopper();
-		Map<String, String> map = new HashMap<String, String>();
-		map.put("graph.flagencoders", "foot2");
-		map.put("osmreader.osm", file.getAbsolutePath());
-		map.put("reader.implementation", "OSDPN");
-		map.put("prepare.chweighting", "none");
-		map.put("graph.location", "./target/output/dpn-avoid-gh");
-		CmdArgs args = new CmdArgs(map);
-		hopper.init(args);
-		hopper.importOrLoad();
-		InstructionList instructionList = route(hopper, 50.70, -3.49, 50.69, -3.91, null);
+    @Test
+    public void testAvoidBoulder() throws IOException {
+        File file = new File("./src/test/resources/com/graphhopper/reader/osgb/dpn/os-dpn-avoid.xml");
+        GraphHopper hopper = new GraphHopper();
+        Map<String, String> map = new HashMap<>();
+        map.put("graph.flagencoders", "foot");
+        map.put("osmreader.osm", file.getAbsolutePath());
+        map.put("reader.implementation", "OSDPN");
+        map.put("prepare.chweighting", "none");
+        map.put("graph.location", "./target/output/dpn-avoid-gh");
+        CmdArgs args = new CmdArgs(map);
+        hopper.init(args);
+        hopper.importOrLoad();
+        InstructionList instructionList = route(hopper, 50.70, -3.49, 50.69, -3.91, null);
         assertEquals("Should be Link 17 as that is the shorteste route", "Link 17", instructionList.get(1).getName());
         instructionList = route(hopper, 50.70, -3.49, 50.69, -3.91, "boulders");
         assertEquals("Should be Link 19 as that avoids the boulder field", "Link 19", instructionList.get(1).getName());
-	}
+    }
 
 }
