diff --git a/core/src/main/java/com/graphhopper/routing/template/PolygonThroughRoutingTemplate.java b/core/src/main/java/com/graphhopper/routing/template/PolygonThroughRoutingTemplate.java
index 9d4cdc40bc..1c34e79b83 100644
--- a/core/src/main/java/com/graphhopper/routing/template/PolygonThroughRoutingTemplate.java
+++ b/core/src/main/java/com/graphhopper/routing/template/PolygonThroughRoutingTemplate.java
@@ -2,6 +2,7 @@
 
 import com.graphhopper.GHRequest;
 import com.graphhopper.GHResponse;
+import com.graphhopper.Trip;
 import com.graphhopper.routing.Path;
 import com.graphhopper.routing.template.polygonRoutingUtil.*;
 import com.graphhopper.routing.util.EncodingManager;
@@ -11,6 +12,7 @@
 import com.graphhopper.storage.index.QueryResult;
 import com.graphhopper.util.EdgeExplorer;
 import com.graphhopper.util.EdgeIterator;
+import com.graphhopper.util.StopWatch;
 import com.graphhopper.util.shapes.BBox;
 import com.graphhopper.util.shapes.GHPoint;
 import com.graphhopper.util.shapes.Polygon;
@@ -30,15 +32,36 @@ public PolygonThroughRoutingTemplate(GHRequest ghRequest, GHResponse ghRsp, Loca
     }
 
     protected void findCandidateRoutes() {
+        StopWatch sw = new StopWatch("finding nodes in polygon");
+        sw.start();
         final List<Integer> nodesInPolygon = getNodesInPolygon();
+        sw.stop();
+        System.out.println(sw.toString());
+        System.out.println("# nodes in Polygon: " + nodesInPolygon.size());
+
+        sw = new StopWatch("finding entry exit points");
+        sw.start();
         final List<Integer> polygonEntryExitPoints = findPolygonEntryExitPoints(nodesInPolygon);
+        sw.stop();
+        System.out.println(sw.toString());
+        System.out.println("# Entry/Exit Points: " + polygonEntryExitPoints.size());
+
         final List<Integer> viaPointNodeIds = this.extractNodeIdsFromQueryResults();
+
+        sw = new StopWatch("LOT node generation");
+        sw.start();
         lotNodes = LOTNodeExtractor.createExtractedData(this.graph, this.algoFactory, this.algorithmOptions, viaPointNodeIds, polygonEntryExitPoints);
+        sw.stop();
+        System.out.println(sw.toString());
 
         final List<QueryResult> queryResults = createQueryResults(polygonEntryExitPoints, flagEncoder);
+
+        sw = new StopWatch("Generate path skeleton");
+        sw.start();
         this.pathSkeletonRouter = new ManyToManyRouting(nodesInPolygon, polygonEntryExitPoints, this.graph, queryResults, this.algoFactory, this.algorithmOptions);
         this.pathSkeletonRouter.findPathBetweenAllNodePairs();
-
+        sw.stop();
+        System.out.println(sw.toString());
 
         for (int i = 0; i < viaPointNodeIds.size() - 1; i++) {
             final int viaPointNodeId = viaPointNodeIds.get(i);
diff --git a/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/LOTNodeExtractor.java b/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/LOTNodeExtractor.java
index 45ae469e5a..f04d28c94f 100644
--- a/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/LOTNodeExtractor.java
+++ b/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/LOTNodeExtractor.java
@@ -7,6 +7,7 @@
 import com.graphhopper.storage.Graph;
 import com.graphhopper.util.EdgeExplorer;
 import com.graphhopper.util.EdgeIterator;
+import com.graphhopper.util.StopWatch;
 import javafx.util.Pair;
 import org.locationtech.jts.util.Stopwatch;
 
@@ -36,11 +37,7 @@ private LOTNodeExtractor(final Graph graph, final RoutingAlgorithmFactory routin
         this.viaPointToLOTNodes = new HashMap<>();
         this.viaPointToEntryExitPointPath = new HashMap<>();
 
-        final Stopwatch sw = new Stopwatch();
-        sw.start();
         this.extractData();
-        sw.stop();
-        System.out.println(sw.getTimeString());
     }
 
     public static LOTNodeExtractor createExtractedData(final Graph graph, final RoutingAlgorithmFactory routingAlgorithmFactory, final AlgorithmOptions algorithmOptions,
@@ -54,9 +51,23 @@ private void extractData() {
     }
 
     private void savePathBetweenAllViaPointsAndEntryExitPoints() {
+        StopWatch sw = new StopWatch("StartPoint Node Extraction");
+        sw.start();
         savePathFromStartPoint();
+        sw.stop();
+        System.out.println(sw.toString());
+
+        sw = new StopWatch("Intermediate Node Extraction");
+        sw.start();
         savePathFromIntermediatePoints();
+        sw.stop();
+        System.out.println(sw.toString());
+
+        sw = new StopWatch("EndPoint Node Extraction");
+        sw.start();
         savePathFromRouteEndpoint();
+        sw.stop();
+        System.out.println(sw.toString());
     }
 
     private void savePathFromStartPoint() {
diff --git a/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/ManyToManyRouting.java b/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/ManyToManyRouting.java
index 9f24d02719..d69d95b6b7 100644
--- a/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/ManyToManyRouting.java
+++ b/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/ManyToManyRouting.java
@@ -3,10 +3,7 @@
 import com.graphhopper.routing.AlgorithmOptions;
 import com.graphhopper.routing.QueryGraph;
 import com.graphhopper.routing.RoutingAlgorithmFactory;
-import com.graphhopper.routing.template.util.QueryGraphCreator;
-import com.graphhopper.routing.util.EdgeFilter;
 import com.graphhopper.storage.Graph;
-import com.graphhopper.storage.index.LocationIndex;
 import com.graphhopper.storage.index.QueryResult;
 
 import java.util.List;
@@ -37,8 +34,7 @@ private QueryGraph prepareQueryGraph(final List<QueryResult> queryResults) {
 
     void calculatePaths() {
         for (int fromNode : nodesToBuildRoutesWith) {
-            final OneToManyRouting
-                    oneToManyRouting =
+            final OneToManyRouting oneToManyRouting =
                     new OneToManyRouting(fromNode, this.nodesToBuildRoutesWith, nodesToConsiderForRouting, this.queryGraph, this.routingAlgorithmFactory, this.algorithmOptions);
             oneToManyRouting.findPathBetweenAllNodePairs();
             this.allFoundPaths.putAll(oneToManyRouting.getAllFoundPathsMap());
diff --git a/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/OneToManyRouting.java b/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/OneToManyRouting.java
index 25e297f374..fe1af42768 100644
--- a/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/OneToManyRouting.java
+++ b/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/OneToManyRouting.java
@@ -3,6 +3,7 @@
 import com.graphhopper.routing.*;
 import com.graphhopper.routing.util.EdgeFilter;
 import com.graphhopper.util.EdgeIteratorState;
+import com.graphhopper.util.StopWatch;
 import javafx.util.Pair;
 
 import java.util.ArrayList;
@@ -28,11 +29,15 @@ public OneToManyRouting(final int fromNode, final List<Integer> toNodes, List<In
     }
 
     void calculatePaths() {
+        StopWatch sw = new StopWatch("one to many routing complete");
+        sw.start();
         for (final int toNode : toNodes) {
             final RoutingAlgorithm routingAlgorithm = buildRoutingAlgorithmForFromToPair(toNode);
             final Path path = routingAlgorithm.calcPath(this.fromNode, toNode);
             this.allFoundPaths.put(new Pair<>(this.fromNode, toNode), path);
         }
+        sw.stop();
+        System.out.println(sw.toString());
     }
 
     private RoutingAlgorithm buildRoutingAlgorithmForFromToPair(int toNode) {
