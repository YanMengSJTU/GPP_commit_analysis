diff --git a/core/src/main/java/com/graphhopper/routing/template/PolygonThroughRoutingTemplate.java b/core/src/main/java/com/graphhopper/routing/template/PolygonThroughRoutingTemplate.java
index c0f927f58e..6bfa5d0722 100644
--- a/core/src/main/java/com/graphhopper/routing/template/PolygonThroughRoutingTemplate.java
+++ b/core/src/main/java/com/graphhopper/routing/template/PolygonThroughRoutingTemplate.java
@@ -153,7 +153,7 @@ private void addEntryExitPointsCopyTo(List<Integer> polygonEntryExitPoints, List
 
     private List<Integer> findPolygonEntryExitPoints(final List<Integer> nodesInPolygon) {
         this.dijkstraForLOTNodes = new DijkstraOneToMany(this.queryGraph, this.algorithmOptions.getWeighting(), this.algorithmOptions.getTraversalMode());
-        final List<Integer> entryExitPoints = new LinkedList<>();
+        final List<Integer> entryExitPoints = new ArrayList<>();
         final EdgeExplorer edgeExplorer = ghStorage.getBaseGraph().createEdgeExplorer();
 
         addAllNodesNotInPolygonButDirectlyAccessibleFromThereToEntryExitPoints(nodesInPolygon, entryExitPoints, edgeExplorer);
@@ -197,7 +197,7 @@ public DijkstraManyToMany getPathSkeletonRouter() {
     }
 
     private class NodesInPolygonFindingVisitor extends LocationIndex.Visitor {
-        private final List<Integer> nodesInPolygon = new LinkedList<>();
+        private final List<Integer> nodesInPolygon = new ArrayList<>();
         private final Polygon polygon;
         private final NodeAccess nodeAccess;
 
diff --git a/core/src/test/java/com/graphhopper/routing/template/util/PolygonRoutingTestGraphs.java b/core/src/test/java/com/graphhopper/routing/template/util/PolygonRoutingTestGraphs.java
index e4181ca6e5..9f7ed35dd5 100644
--- a/core/src/test/java/com/graphhopper/routing/template/util/PolygonRoutingTestGraphs.java
+++ b/core/src/test/java/com/graphhopper/routing/template/util/PolygonRoutingTestGraphs.java
@@ -8,6 +8,7 @@
 import com.graphhopper.storage.index.QueryResult;
 import com.graphhopper.util.DistanceCalc2D;
 import com.graphhopper.util.EdgeExplorer;
+import com.graphhopper.util.EdgeIterator;
 import com.graphhopper.util.EdgeIteratorState;
 import com.graphhopper.util.shapes.BBox;
 import com.graphhopper.util.shapes.Polygon;
@@ -280,7 +281,9 @@ public QueryResult findClosest(double lat, double lon, EdgeFilter edgeFilter) {
 
             private EdgeIteratorState findClosestEdge(Node minNode) {
                 EdgeExplorer edgeExplorer = graph.createEdgeExplorer();
-                return edgeExplorer.setBaseNode(minNode.id);
+                EdgeIterator edgeIterator = edgeExplorer.setBaseNode(minNode.id);
+                edgeIterator.next();
+                return edgeIterator;
             }
 
             private QueryResult createQueryResult(double minDistance, Node minNode, EdgeIteratorState firstEdgeAdjacentToMinNode) {
@@ -288,6 +291,8 @@ private QueryResult createQueryResult(double minDistance, Node minNode, EdgeIter
                 result.setClosestNode(minNode.id);
                 result.setQueryDistance(minDistance);
                 result.setClosestEdge(firstEdgeAdjacentToMinNode);
+                result.setWayIndex(0);
+                result.calcSnappedPoint(new DistanceCalc2D());
                 return result;
             }
 
@@ -303,7 +308,11 @@ public void setSegmentSize(int bytes) {
 
             @Override
             public void query(BBox queryBBox, Visitor function) {
-                throw new NotImplementedException();
+                for (final Node node : nodes) {
+                    if (queryBBox.contains(node.latitude, node.longitude)) {
+                        function.onNode(node.id);
+                    }
+                }
             }
 
             @Override
