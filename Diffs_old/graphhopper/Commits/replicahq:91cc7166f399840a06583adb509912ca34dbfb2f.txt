diff --git a/web/files/swl-andorra-r5-export/edges b/web/files/swl-andorra-r5-export/edges
index ab11c2f0ac..0b53d2e171 100644
Binary files a/web/files/swl-andorra-r5-export/edges and b/web/files/swl-andorra-r5-export/edges differ
diff --git a/web/files/swl-andorra-r5-export/nodes_ch_fastest_bike b/web/files/swl-andorra-r5-export/nodes_ch_fastest_bike
new file mode 100644
index 0000000000..330910e04f
Binary files /dev/null and b/web/files/swl-andorra-r5-export/nodes_ch_fastest_bike differ
diff --git a/web/files/swl-andorra-r5-export/nodes_ch_fastest_foot b/web/files/swl-andorra-r5-export/nodes_ch_fastest_foot
new file mode 100644
index 0000000000..3dc62ee0cf
Binary files /dev/null and b/web/files/swl-andorra-r5-export/nodes_ch_fastest_foot differ
diff --git a/web/files/swl-andorra-r5-export/properties b/web/files/swl-andorra-r5-export/properties
index 49e73f89b6..4dde8f3e8f 100644
Binary files a/web/files/swl-andorra-r5-export/properties and b/web/files/swl-andorra-r5-export/properties differ
diff --git a/web/files/swl-andorra-r5-export/shortcuts_fastest_bike b/web/files/swl-andorra-r5-export/shortcuts_fastest_bike
new file mode 100644
index 0000000000..1f3bfff009
Binary files /dev/null and b/web/files/swl-andorra-r5-export/shortcuts_fastest_bike differ
diff --git a/web/files/swl-andorra-r5-export/shortcuts_fastest_foot b/web/files/swl-andorra-r5-export/shortcuts_fastest_foot
new file mode 100644
index 0000000000..325bd6e6ec
Binary files /dev/null and b/web/files/swl-andorra-r5-export/shortcuts_fastest_foot differ
diff --git a/web/pom.xml b/web/pom.xml
index 990561c4be..5ec1f85544 100644
--- a/web/pom.xml
+++ b/web/pom.xml
@@ -68,6 +68,12 @@
             <version>1.2.2</version>
             <scope>test</scope>
         </dependency>
+        <dependency>
+            <groupId>org.hamcrest</groupId>
+            <artifactId>hamcrest-library</artifactId>
+            <version>1.3</version>
+            <scope>test</scope>
+        </dependency>
 
         <!-- for integration tests of service -->
         <dependency>
diff --git a/web/src/main/java/com/graphhopper/http/GraphHopperManaged.java b/web/src/main/java/com/graphhopper/http/GraphHopperManaged.java
index 65dd22d8c2..fc4dcae4e6 100644
--- a/web/src/main/java/com/graphhopper/http/GraphHopperManaged.java
+++ b/web/src/main/java/com/graphhopper/http/GraphHopperManaged.java
@@ -27,7 +27,7 @@
 import com.graphhopper.routing.weighting.Weighting;
 import com.graphhopper.spatialrules.SpatialRuleLookupHelper;
 import com.graphhopper.storage.Graph;
-import com.graphhopper.swl.FileTravelTimeCalculator;
+import com.graphhopper.swl.FileSpeedCalculator;
 import com.graphhopper.swl.PathDetailsBuilderFactoryWithR5EdgeId;
 import com.graphhopper.swl.TDCarWeighting;
 import com.graphhopper.util.CmdArgs;
@@ -50,7 +50,7 @@
     @Inject
     public GraphHopperManaged(CmdArgs configuration) {
         OriginalDirectionFlagEncoder originalDirectionFlagEncoder = new OriginalDirectionFlagEncoder();
-        FileTravelTimeCalculator speedCalculator = new FileTravelTimeCalculator(originalDirectionFlagEncoder,configuration.get("r5.link_speed_file", "required!!"));
+        FileSpeedCalculator speedCalculator = new FileSpeedCalculator(originalDirectionFlagEncoder,configuration.get("r5.link_speed_file", "required!!"));
         graphHopper = new GraphHopperOSM(
                 SpatialRuleLookupHelper.createLandmarkSplittingFeatureCollection(configuration.get(Parameters.Landmark.PREPARE + "split_area_location", ""))
         ) {
diff --git a/web/src/main/java/com/graphhopper/swl/FileTravelTimeCalculator.java b/web/src/main/java/com/graphhopper/swl/FileSpeedCalculator.java
similarity index 94%
rename from web/src/main/java/com/graphhopper/swl/FileTravelTimeCalculator.java
rename to web/src/main/java/com/graphhopper/swl/FileSpeedCalculator.java
index b0e8e46be6..adc519ffec 100644
--- a/web/src/main/java/com/graphhopper/swl/FileTravelTimeCalculator.java
+++ b/web/src/main/java/com/graphhopper/swl/FileSpeedCalculator.java
@@ -20,7 +20,6 @@
 
 import com.csvreader.CsvReader;
 import com.graphhopper.GHRequest;
-import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.util.EdgeIteratorState;
 import org.slf4j.LoggerFactory;
 
@@ -34,8 +33,8 @@
 import java.util.stream.IntStream;
 import java.util.stream.Stream;
 
-public class FileTravelTimeCalculator implements SpeedCalculator {
-    private static final org.slf4j.Logger LOG = LoggerFactory.getLogger(FileTravelTimeCalculator.class);
+public class FileSpeedCalculator implements SpeedCalculator {
+    private static final org.slf4j.Logger LOG = LoggerFactory.getLogger(FileSpeedCalculator.class);
 
     private final OriginalDirectionFlagEncoder encoder;
     private final SpeedCalculator delegateTravelTimeCalculator;
@@ -55,7 +54,7 @@
      *             - path to the local file with congestion data.
      *             - path on GCS to a text file, containing the path on GCS to a file with congestion data.
      */
-    public FileTravelTimeCalculator(OriginalDirectionFlagEncoder encoder, String path) {
+    public FileSpeedCalculator(OriginalDirectionFlagEncoder encoder, String path) {
         this.encoder = encoder;
         linkTravelTimes = readTravelTimes(new File(path));
         delegateTravelTimeCalculator = new DefaultSpeedCalculator(encoder);
diff --git a/web/src/test/java/com/graphhopper/swl/TDNetworkIT.java b/web/src/test/java/com/graphhopper/swl/TDNetworkIT.java
index a25aa36208..1a10d9af44 100644
--- a/web/src/test/java/com/graphhopper/swl/TDNetworkIT.java
+++ b/web/src/test/java/com/graphhopper/swl/TDNetworkIT.java
@@ -21,12 +21,6 @@
 import com.graphhopper.GHResponse;
 import com.graphhopper.GraphHopper;
 import com.graphhopper.http.GraphHopperManaged;
-import com.graphhopper.reader.osm.GraphHopperOSM;
-import com.graphhopper.routing.util.EncodingManager;
-import com.graphhopper.routing.util.FlagEncoder;
-import com.graphhopper.routing.util.HintsMap;
-import com.graphhopper.routing.weighting.Weighting;
-import com.graphhopper.storage.Graph;
 import com.graphhopper.util.CmdArgs;
 import com.graphhopper.util.details.PathDetail;
 import org.junit.Before;
@@ -34,8 +28,11 @@
 
 import java.util.Arrays;
 import java.util.List;
+import java.util.stream.Collectors;
 
+import static org.hamcrest.Matchers.contains;
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertThat;
 
 public class TDNetworkIT {
     private GraphHopper graphHopper;
@@ -149,16 +146,37 @@ public void testMonacoTD() {
         GHResponse route = graphHopper.route(request);
         List<PathDetail> time = route.getBest().getPathDetails().get("time");
         List<PathDetail> edgeIds = route.getBest().getPathDetails().get("r5_edge_id");
-        final int EXPECTED_LINKS_IN_PATH = 52;
         final long EXPECTED_TOTAL_TRAVEL_TIME = 1292460;
 
-        assertEquals(EXPECTED_LINKS_IN_PATH, time.size());
-        assertEquals(EXPECTED_LINKS_IN_PATH, edgeIds.size());
+        List<Integer> actualEdgeIds = edgeIds.stream().map(pd -> ((Integer) pd.getValue())).collect(Collectors.toList());
+        assertThat(actualEdgeIds, contains(4344,31,32,39,1038,1032,1605,1603,1601,71,69,4319,1591,1589,1587,1585,1583,1581,1579,1577,1553,1551,1549,1547,2375,3443,3441,3395,1383,1381,1379,583,581,579,577,575,573,571,560,562,564,554,568,542,552,2510,1918,1818,1816,1722,1724,1726));
 
         assertEquals(EXPECTED_TOTAL_TRAVEL_TIME, route.getBest().getTime());
         assertEquals(EXPECTED_TOTAL_TRAVEL_TIME, sumTimes(time));
     }
 
+    @Test
+    public void testMonacoTDLater() {
+        GHRequest request = new GHRequest(42.56819, 1.603231, 42.571034, 1.520662);
+        request.setAlgorithm("dijkstra");
+        request.setPathDetails(Arrays.asList("time", "r5_edge_id"));
+        request.getHints().put("ch.disable", true);
+        request.setWeighting("td");
+        request.getHints().put("departure_time", 8*60*60);
+        GHResponse route = graphHopper.route(request);
+        List<PathDetail> time = route.getBest().getPathDetails().get("time");
+        List<PathDetail> edgeIds = route.getBest().getPathDetails().get("r5_edge_id");
+
+        // During the morning peak, we choose a different route (and it is slower)
+        final long EXPECTED_TOTAL_TRAVEL_TIME = 1386060;
+        List<Integer> actualEdgeIds = edgeIds.stream().map(pd -> ((Integer) pd.getValue())).collect(Collectors.toList());
+        assertThat(actualEdgeIds, contains(4344,31,32,34,1040,1042,1020,1025,1063,1061,1031,5613,1603,1601,71,69,4319,1591,1589,1587,1585,1583,1581,1579,1577,1553,1551,1549,1547,2375,3443,3441,3395,1383,1381,1379,583,581,579,577,575,573,571,560,562,564,554,568,542,552,2510,1918,1818,1816,1722,1724,1726));
+
+        assertEquals(EXPECTED_TOTAL_TRAVEL_TIME, route.getBest().getTime());
+        assertEquals(EXPECTED_TOTAL_TRAVEL_TIME, sumTimes(time));
+    }
+
+
     private long sumTimes(List<PathDetail> time) {
         long sum = 0;
         for (PathDetail pathDetail : time) {
