diff --git a/acceptancetesting/src/main/java/org/alternativevision/gpx/beans/Waypoint.java b/acceptancetesting/src/main/java/org/alternativevision/gpx/beans/Waypoint.java
index ec605b95f5..340e7bdd04 100644
--- a/acceptancetesting/src/main/java/org/alternativevision/gpx/beans/Waypoint.java
+++ b/acceptancetesting/src/main/java/org/alternativevision/gpx/beans/Waypoint.java
@@ -101,8 +101,10 @@
 	private Double pdop;
 	private Double ageOfGPSData;
 	private Integer dgpsid;
+	private String  Annotation_text;
 	
 	
+
 	/**
 	 * Returns the latitude of this waypoint.
 	 * @return a Double value representing the latitude of this waypoint.
@@ -407,6 +409,19 @@ public void setDgpsid(Integer dgpsid) {
 		this.dgpsid = dgpsid;
 	}
 	
+	
+	public String getAnnotation_text() {
+		return Annotation_text;
+	}
+
+	/**Setter for the waypoint annotation_text/avoidance. This maps to annotation_text in json route string
+	 * @param annotation_text an avoidance String
+	 */
+	public void setAnnotation_text(String Annotation_text) {
+		this.Annotation_text = Annotation_text;
+	}
+
+	
 	/**
 	 * Returns a String representation of this waypoint.
 	 */
diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperJSONParser.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperJSONParser.java
index f095952f78..0c6455a6cb 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperJSONParser.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperJSONParser.java
@@ -55,6 +55,8 @@ public JSONWayPoints parseJSONFromString(String jsonString) {
 			JsonPrimitive time = instruction.getAsJsonPrimitive("time");
 			JsonPrimitive distance = instruction.getAsJsonPrimitive("distance");
 			JsonPrimitive azimuth = instruction.getAsJsonPrimitive("azimuth");
+			JsonPrimitive annotation_text = instruction
+					.getAsJsonPrimitive("annotation_text");
 			JsonArray interval = instruction.getAsJsonArray("interval");
 			int coordinateIndex = Integer.parseInt(interval.get(0).toString());
 			JsonElement s = getJSONCoordinates(paths, coordinateIndex);
@@ -67,13 +69,22 @@ public JSONWayPoints parseJSONFromString(String jsonString) {
 			w.setDescription(description.toString());
 			w.addExtensionData(ExtensionConstants.DISTANCE, distance.toString());
 			w.addExtensionData(ExtensionConstants.TIME, time.toString());
+	
+				
+
+			
 			LOG.info("azimuth :" + azimuth);
 			LOG.info("descritption: " + description);
 			LOG.info("time :" + time);
 			LOG.info("distance :" + distance);
-			LOG.info("Coordinates : " + w.getLatitude()+","+ w.getLongitude());
-			
-			
+			if(null!=annotation_text)
+			{
+			w.setAnnotation_text(annotation_text.toString());
+			LOG.info("annotation_text: " + annotation_text.toString());
+			}
+			LOG.info("Coordinates : " + w.getLatitude() + ","
+					+ w.getLongitude());
+
 			json.addWayPoint(w);
 		}
 
@@ -91,7 +102,7 @@ public JsonElement getJSONCoordinates(JsonArray paths, int coordinateIndex) {
 		return coordinates.get(coordinateIndex);
 	}
 
-	public void parse(String routeType, String vehicle, String[] string) {
+	public void parse(String routeType,String avoidance, String vehicle, String[] string) {
 
 		// Set up the URL
 		String jsonResponse = "";
@@ -126,6 +137,8 @@ public void parse(String routeType, String vehicle, String[] string) {
 		sb.append("&apikey=");
 		sb.append(apikey);
 		sb.append("&points_encoded=false");
+		sb.append("&avoidances="+avoidance);
+		sb.append("&weighting=fastavoid");
 		GraphHopperGPXParserRouteTest GPHService = new GraphHopperGPXParserRouteTest();
 		try {
 			CloseableHttpResponse httpResponse = GPHService
diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
index 78edd746ac..68781c9e15 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
@@ -1,7 +1,5 @@
 package uk.co.ordnancesurvey.routing;
 
-
-
 import gherkin.formatter.model.Feature;
 
 import java.io.IOException;
@@ -9,6 +7,8 @@
 import java.util.List;
 import java.util.Map;
 
+import org.junit.Assert;
+
 import uk.co.ordnancesurvey.gpx.graphhopper.IntegrationTestProperties;
 import cucumber.api.Scenario;
 import cucumber.api.java.After;
@@ -20,47 +20,80 @@
 	GraphHopperUIUtil graphUiUtil;
 
 	String instruction;
-	
 
 	@Given("^I request a route between \"([^\"]*)\" and \"([^\"]*)\" as a \"([^\"]*)\" from RoutingAPI$")
 	public void getRoute(String pointA, String pointB, String routeType)
 			throws InterruptedException {
 		String graphHopperWebUrl;
-		
-		if(IntegrationTestProperties.getTestPropertyBool("viaApigee"))
-		{
-			 graphHopperWebUrl=IntegrationTestProperties
-			.getTestProperty("graphHopperWebUrlViaApigee");
-		}
-		else
-		{
-			 graphHopperWebUrl=IntegrationTestProperties
+
+		if (IntegrationTestProperties.getTestPropertyBool("viaApigee")) {
+			graphHopperWebUrl = IntegrationTestProperties
+					.getTestProperty("graphHopperWebUrlViaApigee");
+		} else {
+			graphHopperWebUrl = IntegrationTestProperties
 					.getTestProperty("graphHopperWebUrl");
 		}
 
-		
-			graphUiUtil = new GraphHopperUIUtil(graphHopperWebUrl);
-					
-					
+		graphUiUtil = new GraphHopperUIUtil(graphHopperWebUrl);
 
+		String testON = IntegrationTestProperties.getTestProperty("testON");
+
+		switch (testON.toUpperCase()) {
+		case "WEB":
+
+			graphUiUtil.getRouteFromUI(routeType, pointA, pointB);
+			break;
+		case "SERVICE":
+			graphUiUtil.getRouteFromService(routeType, pointA, pointB);
+			break;
+		default:
+
+			if (pointA.split(",").length == 2) {
+				graphUiUtil.getRouteFromService(routeType, pointA, pointB);
+				graphUiUtil.getRouteFromUI(routeType, pointA, pointB);
+			} else {
+				graphUiUtil.getRouteFromUI(routeType, pointA, pointB);
+			}
+
+			break;
+
+		}
+
+	}
+
+	@Given("^I request a route between \"([^\"]*)\" and \"([^\"]*)\" as a \"([^\"]*)\" from RoutingAPI and avoid \"([^\"]*)\"$")
+	public void getRouteWithAvoidance(String pointA, String pointB,
+			String routeType, String avoidance) throws InterruptedException {
+		String graphHopperWebUrl;
+
+		if (IntegrationTestProperties.getTestPropertyBool("viaApigee")) {
+			graphHopperWebUrl = IntegrationTestProperties
+					.getTestProperty("graphHopperWebUrlViaApigee");
+		} else {
+			graphHopperWebUrl = IntegrationTestProperties
+					.getTestProperty("graphHopperWebUrl");
+		}
+
+		graphUiUtil = new GraphHopperUIUtil(graphHopperWebUrl);
 
 		String testON = IntegrationTestProperties.getTestProperty("testON");
 
 		switch (testON.toUpperCase()) {
 		case "WEB":
 
-			graphUiUtil.getRouteFromUI(routeType,pointA, pointB);
+			graphUiUtil.getRouteFromUI(routeType, pointA, pointB);
 			break;
 		case "SERVICE":
-			graphUiUtil.getRouteFromService(routeType,pointA, pointB);
+			graphUiUtil.getRouteFromServiceWithAvoidance(routeType, avoidance, pointA,
+					pointB);
 			break;
 		default:
 
 			if (pointA.split(",").length == 2) {
-				graphUiUtil.getRouteFromService(routeType,pointA, pointB);
-				graphUiUtil.getRouteFromUI(routeType,pointA, pointB);
+				graphUiUtil.getRouteFromServiceWithAvoidance(routeType, avoidance,pointA, pointB);
+				graphUiUtil.getRouteFromUI(routeType, pointA, pointB);
 			} else {
-				graphUiUtil.getRouteFromUI(routeType,pointA, pointB);
+				graphUiUtil.getRouteFromUI(routeType, pointA, pointB);
 			}
 
 			break;
@@ -68,44 +101,40 @@ public void getRoute(String pointA, String pointB, String routeType)
 		}
 
 	}
-	
-	
+
 	@Given("^I request a route between \"([^\"]*)\" and \"([^\"]*)\" as a \"([^\"]*)\" from RoutingAPI via \"([^\"]*)\"$")
-	public void getRoute(String pointA, String pointB, String routeType,String pointC)
-			throws InterruptedException {
+	public void getRoute(String pointA, String pointB, String routeType,
+			String pointC) throws InterruptedException {
 		String graphHopperWebUrl;
-		
-		if(IntegrationTestProperties.getTestPropertyBool("viaApigee"))
-		{
-			 graphHopperWebUrl=IntegrationTestProperties
-			.getTestProperty("graphHopperWebUrlViaApigee");
-		}
-		else
-		{
-			 graphHopperWebUrl=IntegrationTestProperties
+
+		if (IntegrationTestProperties.getTestPropertyBool("viaApigee")) {
+			graphHopperWebUrl = IntegrationTestProperties
+					.getTestProperty("graphHopperWebUrlViaApigee");
+		} else {
+			graphHopperWebUrl = IntegrationTestProperties
 					.getTestProperty("graphHopperWebUrl");
 		}
 
-			graphUiUtil = new GraphHopperUIUtil(
-					graphHopperWebUrl);
+		graphUiUtil = new GraphHopperUIUtil(graphHopperWebUrl);
 
 		String testON = IntegrationTestProperties.getTestProperty("testON");
 
 		switch (testON.toUpperCase()) {
 		case "WEB":
 
-			graphUiUtil.getRouteFromUI(routeType,pointA, pointB, pointC);
+			graphUiUtil.getRouteFromUI(routeType, pointA, pointB, pointC);
 			break;
 		case "SERVICE":
-			graphUiUtil.getRouteFromService(routeType,pointA, pointB, pointC);
+			graphUiUtil.getRouteFromService(routeType, pointA, pointB, pointC);
 			break;
 		default:
 
 			if (pointA.split(",").length == 2) {
-				graphUiUtil.getRouteFromService(routeType,pointA, pointB, pointC);
-				graphUiUtil.getRouteFromUI(routeType,pointA, pointB, pointC);
+				graphUiUtil.getRouteFromService(routeType, pointA, pointB,
+						pointC);
+				graphUiUtil.getRouteFromUI(routeType, pointA, pointB, pointC);
 			} else {
-				graphUiUtil.getRouteFromUI(routeType,pointA, pointB, pointC);
+				graphUiUtil.getRouteFromUI(routeType, pointA, pointB, pointC);
 			}
 
 			break;
@@ -113,33 +142,36 @@ public void getRoute(String pointA, String pointB, String routeType,String point
 		}
 
 	}
-	
-	
+
 	@Given("^I request a route between \"([^\"]*)\" and \"([^\"]*)\" as a \"([^\"]*)\" from RoutingAPI via \"([^\"]*)\" and \"([^\"]*)\"$")
-	public void getRoute(String pointA, String pointB, String routeType,String pointC,String pointD)
-			throws InterruptedException {
+	public void getRoute(String pointA, String pointB, String routeType,
+			String pointC, String pointD) throws InterruptedException {
 
-			graphUiUtil = new GraphHopperUIUtil(
-					IntegrationTestProperties
-							.getTestProperty("graphHopperWebUrl"));
+		graphUiUtil = new GraphHopperUIUtil(
+				IntegrationTestProperties.getTestProperty("graphHopperWebUrl"));
 
 		String testON = IntegrationTestProperties.getTestProperty("testON");
 
 		switch (testON.toUpperCase()) {
 		case "WEB":
 
-			graphUiUtil.getRouteFromUI(routeType,pointA, pointB, pointC,pointD);
+			graphUiUtil.getRouteFromUI(routeType, pointA, pointB, pointC,
+					pointD);
 			break;
 		case "SERVICE":
-			graphUiUtil.getRouteFromService(routeType,pointA, pointB, pointC,pointD);
+			graphUiUtil.getRouteFromService(routeType, pointA, pointB, pointC,
+					pointD);
 			break;
 		default:
 
 			if (pointA.split(",").length == 2) {
-				graphUiUtil.getRouteFromService(routeType,pointA, pointB, pointC,pointD);
-				graphUiUtil.getRouteFromUI(routeType,pointA, pointB, pointC,pointD);
+				graphUiUtil.getRouteFromService(routeType, pointA, pointB,
+						pointC, pointD);
+				graphUiUtil.getRouteFromUI(routeType, pointA, pointB, pointC,
+						pointD);
 			} else {
-				graphUiUtil.getRouteFromUI(routeType,pointA, pointB, pointC,pointD);
+				graphUiUtil.getRouteFromUI(routeType, pointA, pointB, pointC,
+						pointD);
 			}
 
 			break;
@@ -162,8 +194,7 @@ public void I_should_be_able_to_verify_the_waypoint_on_the_route_map(
 	@Then("^I should be able to verify the waypoints on the route map:")
 	public void I_should_be_able_to_verify_the_waypoints_on_the_route_map(
 			List<Map<String, String>> wayPointList) {
-
-		graphUiUtil.isWayPointonRouteMap(wayPointList);
+		Assert.assertTrue("Waypoint not found on the route where it was expected",graphUiUtil.isWayPointonRouteMap(wayPointList));
 
 	}
 
@@ -171,7 +202,8 @@ public void I_should_be_able_to_verify_the_waypoints_on_the_route_map(
 	public void I_should_be_able_to_verify_the_not_waypoints_on_the_route_map(
 			List<Map<String, String>> wayPointList) {
 
-		graphUiUtil.isWayPointNotonRouteMap(wayPointList);
+		Assert.assertFalse("Waypoint found on the route where it was not expected",graphUiUtil.isWayPointonRouteMap(wayPointList));
+		// graphUiUtil.isWayPointNotonRouteMap(wayPointList);
 
 	}
 
@@ -200,7 +232,6 @@ public void I_should_be_able_to_verify_the_trackpoints_not_on_the_route_map(
 
 	@After({ "@Routing" })
 	public void closeBrowser(Scenario sc) {
-	
 
 		if (sc.isFailed()) {
 
diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
index 6e97328ba2..929eaad640 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
@@ -171,6 +171,21 @@ public void verifyInstructionThroughUI(String routeStepNumber,
 
 	}
 
+	public void getRouteFromServiceWithAvoidance(String routeType,
+			String avoidance, String... points) {
+
+		if (IntegrationTestProperties.getTestProperty("routeType")
+				.equals("gpx")) {
+			GPHService.parseRoute("gpx", routeType, points);
+		}
+
+		else {
+
+			GPHJsonService.parse("json", avoidance, routeType, points);
+		}
+
+	}
+
 	public void getRouteFromService(String routeType, String... points) {
 
 		if (IntegrationTestProperties.getTestProperty("routeType")
@@ -180,7 +195,7 @@ public void getRouteFromService(String routeType, String... points) {
 
 		else {
 
-			GPHJsonService.parse("json", routeType, points);
+			GPHJsonService.parse("json", "", routeType, points);
 		}
 
 	}
@@ -205,10 +220,10 @@ private Waypoint buildWayPoint(String waypointco) throws ParseException {
 		return wp;
 	}
 
-	public void isWayPointonRouteMap(String wayPointIndex,
+	public boolean isWayPointonRouteMap(String wayPointIndex,
 			String wayPoint_Coordinates, String wayPointDescription,
 			String azimuth, String direction, String time, String distance) {
-
+		boolean isWayPointonRouteMap = false;
 		Waypoint wp;
 
 		switch (testOn.toUpperCase()) {
@@ -222,12 +237,13 @@ public void isWayPointonRouteMap(String wayPointIndex,
 					"gpx")) {
 				wp = buildWayPoint(wayPoint_Coordinates, wayPointDescription,
 						azimuth, direction, time, distance);
-				Assert.assertTrue(GPHService.isWayPointOnGPXRoutes(wp));
+				isWayPointonRouteMap = GPHService.isWayPointOnGPXRoutes(wp);
+				// Assert.assertTrue(GPHService.isWayPointOnGPXRoutes(wp));
 			} else {
 				wp = GPHJsonService.buildWayPointForJson(wayPoint_Coordinates,
 						wayPointDescription, time, distance);
-
-				Assert.assertTrue(GPHJsonService.isWayPointinPath(wp));
+				isWayPointonRouteMap = GPHJsonService.isWayPointinPath(wp);
+				// Assert.assertTrue(GPHJsonService.isWayPointinPath(wp));
 			}
 
 			break;
@@ -239,15 +255,17 @@ public void isWayPointonRouteMap(String wayPointIndex,
 					"gpx")) {
 				wp = buildWayPoint(wayPoint_Coordinates, wayPointDescription,
 						azimuth, direction, time, distance);
-				Assert.assertTrue(GPHService.isWayPointOnGPXRoutes(wp));
+				isWayPointonRouteMap = GPHService.isWayPointOnGPXRoutes(wp);
+				// Assert.assertTrue(GPHService.isWayPointOnGPXRoutes(wp));
 			} else {
 				wp = GPHJsonService.buildWayPointForJson(wayPoint_Coordinates,
 						wayPointDescription, time, distance);
-
-				Assert.assertTrue(GPHJsonService.isWayPointinPath(wp));
+				isWayPointonRouteMap = GPHJsonService.isWayPointinPath(wp);
+				// Assert.assertTrue(GPHJsonService.isWayPointinPath(wp));
 			}
 			break;
 		}
+		return isWayPointonRouteMap;
 
 	}
 
@@ -270,27 +288,14 @@ private Waypoint buildWayPoint(String wayPoint_Coordinates,
 		return wp;
 	}
 
-	public void isWayPointNotonRouteMap(List<Map<String, String>> wayPointList) {
-
-		for (int i = 0; i < wayPointList.size(); i++) {
-
-			String waypointco = (String) wayPointList.get(i).get("waypointco");
-			String waypointdesc = (String) wayPointList.get(i).get(
-					"waypointdesc");
-			String azimuth = (String) wayPointList.get(i).get("azimuth");
-			String direction = (String) wayPointList.get(i).get("direction");
-			String time = (String) wayPointList.get(i).get("time");
-			String distance = (String) wayPointList.get(i).get("distance");
-			Waypoint wp = buildWayPoint(waypointco, waypointdesc, azimuth,
-					direction, time, distance);
-			assertTrue(!GPHService.isWayPointOnGPXRoutes(wp));
-
-		}
-
+	public boolean isWayPointNotonRouteMap(
+			List<Map<String, String>> wayPointList) {
+		boolean isWayPointonRouteMap = isWayPointonRouteMap(wayPointList);
+		return isWayPointonRouteMap;
 	}
 
-	public void isWayPointonRouteMap(List<Map<String, String>> waypointList) {
-
+	public boolean isWayPointonRouteMap(List<Map<String, String>> waypointList) {
+		boolean isWayPointonRouteMap = false;
 		for (int i = 0; i < waypointList.size(); i++) {
 
 			if (waypointList.get(i).size() > 2) {
@@ -305,8 +310,9 @@ public void isWayPointonRouteMap(List<Map<String, String>> waypointList) {
 						.get("direction");
 				String time = (String) waypointList.get(i).get("time");
 				String distance = (String) waypointList.get(i).get("distance");
-				isWayPointonRouteMap(wayPointIndex, waypointco, waypointdesc,
-						azimuth, direction, time, distance);
+				isWayPointonRouteMap = isWayPointonRouteMap(wayPointIndex,
+						waypointco, waypointdesc, azimuth, direction, time,
+						distance);
 			}
 
 			else
@@ -318,10 +324,12 @@ public void isWayPointonRouteMap(List<Map<String, String>> waypointList) {
 				String waypointdesc = (String) waypointList.get(i).get(
 						"waypointdesc");
 				verifyInstructionThroughUI(wayPointIndex, waypointdesc);
+				isWayPointonRouteMap = true;
 
 			}
 
 		}
+		return isWayPointonRouteMap;
 
 	}
 
diff --git a/acceptancetesting/src/test/cucumber/DPNRouting.feature b/acceptancetesting/src/test/cucumber/DPNRouting.feature
index 50155c35d0..5a2678410e 100644
--- a/acceptancetesting/src/test/cucumber/DPNRouting.feature
+++ b/acceptancetesting/src/test/cucumber/DPNRouting.feature
@@ -203,3 +203,26 @@ Feature: Verify a route from A to B
     Examples: 
       | pointA              | pointB              | pointC              | pointD             | routetype |
       | 53.206965,-1.839021 | 53.203607,-1.857557 | 53.149631,-1.867364 | 53.11417,-1.895082 | foot      |
+
+  # Avoidances : A Road,Boulders,Cliff,Inland Water,Marsh,Quarry Or Pit,Scree,Rock,Mud,Sand,Shingle
+  @Routing
+  Scenario Outline: Verify  Road Names on a Walking Route  (Mill lane-BUXTON)
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI and avoid "<avoidance>"
+    Then I should be able to verify the waypoints on the route map:
+      | wayPointIndex | waypointco          | waypointdesc        | azimuth | direction | time   | distance |
+      | 4             | 53.251736,-1.845811 | Turn left onto Path | 173.0   | S         | 656592 | 911.934  |
+
+    Examples: 
+      | pointA              | pointB              | routetype | avoidance |
+      | 53.267104,-1.818304 | 53.131858,-1.661941 | foot      | scree     |
+
+  @Routing
+  Scenario Outline: Verify  Road Names on a Walking Route  (Mill lane-BUXTON)
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI and avoid "<avoidance>"
+    Then I should be able to verify the waypoints not on the route map:
+      | wayPointIndex | waypointco          | waypointdesc        | azimuth | direction | time   | distance |
+      | 4             | 53.251736,-1.845811 | Turn left onto Path | 173.0   | S         | 656592 | 911.934  |
+
+    Examples: 
+      | pointA              | pointB              | routetype | avoidance |
+      | 53.267104,-1.818304 | 53.131858,-1.661941 | foot      |           |
