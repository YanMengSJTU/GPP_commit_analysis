diff --git a/config.yml b/config.yml
index 83647a0b37..9998af5428 100644
--- a/config.yml
+++ b/config.yml
@@ -8,7 +8,7 @@ graphhopper:
 
   # Possible options: car,foot,bike,bike2,mtb,racingbike,motorcycle (comma separated)
   # bike2 takes elevation data into account (like up-hill is slower than down-hill) and requires enabling graph.elevation.provider below
-  graph.flag_encoders: mapcrider2, racingbike
+  graph.flag_encoders: mapcrider2,racingbike
 
 
   # Enable turn restrictions for car or motorcycle.
@@ -37,11 +37,11 @@ graphhopper:
   # By default the speed mode with the 'fastest' weighting is used. Internally a graph preparation via
   # contraction hierarchies (CH) is done to speed routing up. This requires more RAM/disc space for holding the
   # graph but less for every request. You can also setup multiple weightings, by providing a comma separated list.
-  prepare.ch.weightings: fastest
-
-  prepare.ch.landmarks: 64g
-  # Disable the speed mode. Should be used only with routing.max_visited_nodes or when the hybrid mode is enabled instead
 #  prepare.ch.weightings: fastest
+  prepare.ch.weightings: no
+  # prepare.ch.landmarks: 64
+  # Disable the speed mode. Should be used only with routing.max_visited_nodes or when the hybrid mode is enabled instead
+  # prepare.ch.weightings: fastest
 
 
   # To make CH preparation faster for multiple flagEncoders you can increase the default threads if you have enough RAM.
@@ -50,13 +50,13 @@ graphhopper:
 
 
   # The hybrid mode can be enabled with
-#  prepare.lm.weightings: fastest
+  prepare.lm.weightings: fastest
 
   # To tune the performance vs. memory usage for the hybrid mode use
-#  prepare.lm.landmarks: 64
+  prepare.lm.landmarks: 64
 
   # Make landmark preparation parallel if you have enough RAM. Change this only if you know what you are doing and if the default worked for you.
-#  prepare.lm.threads: 2
+  #  prepare.lm.threads: 2
 
   # avoid being stuck in a (oneway) subnetwork, see https://discuss.graphhopper.com/t/93
   prepare.min_network_size: 200
@@ -102,7 +102,7 @@ graphhopper:
 
 
   # Sort the graph after import to make requests roughly ~10% faster. Note that this requires significantly more RAM on import.
-#  graph.do_sort: true
+  #  graph.do_sort: true
   graph.bytes_for_flags: 8
 
 
@@ -132,13 +132,13 @@ graphhopper:
 # Dropwizard server configuration
 server:
   applicationConnectors:
-  - type: http
-    port: 8989
-    # for security reasons bind to localhost
-    bindHost: localhost
+    - type: http
+      port: 8989
+      # for security reasons bind to localhost
+      bindHost: localhost
   requestLog:
-      appenders: []
+    appenders: []
   adminConnectors:
-  - type: http
-    port: 8990
-    bindHost: localhost
+    - type: http
+      port: 8990
+      bindHost: localhost
diff --git a/core/src/main/java/com/graphhopper/routing/util/BikeFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/BikeFlagEncoder.java
index 20d3d98fdc..9716e71ec3 100644
--- a/core/src/main/java/com/graphhopper/routing/util/BikeFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/BikeFlagEncoder.java
@@ -103,6 +103,26 @@ public String getSurfaceAsString(EdgeIteratorState edge) {
         return null;
     }
 
+    @Override
+    public String getStressAsString(long flags) {
+        return null;
+    }
+
+    @Override
+    public int getStress(EdgeIteratorState edge) {
+        return 0;
+    }
+
+    @Override
+    public int getStress(long flags) {
+        return 0;
+    }
+
+    @Override
+    public String getStressAsString(EdgeIteratorState edge) {
+        return null;
+    }
+
     @Override
     boolean isPushingSection(ReaderWay way) {
         String highway = way.getTag("highway");
diff --git a/core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
index b7c27bb70f..7c93651635 100644
--- a/core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
@@ -177,6 +177,26 @@ public String getSurfaceAsString(EdgeIteratorState edge) {
         return null;
     }
 
+    @Override
+    public String getStressAsString(long flags) {
+        return null;
+    }
+
+    @Override
+    public int getStress(EdgeIteratorState edge) {
+        return 0;
+    }
+
+    @Override
+    public int getStress(long flags) {
+        return 0;
+    }
+
+    @Override
+    public String getStressAsString(EdgeIteratorState edge) {
+        return null;
+    }
+
 
     /**
      * Define the place of the speedBits in the edge flags for car.
diff --git a/core/src/main/java/com/graphhopper/routing/util/DataFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/DataFlagEncoder.java
index f01143d75b..5c8afef0b6 100644
--- a/core/src/main/java/com/graphhopper/routing/util/DataFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/DataFlagEncoder.java
@@ -608,6 +608,26 @@ public String getSurfaceAsString(EdgeIteratorState edge) {
         return null;
     }
 
+    @Override
+    public String getStressAsString(long flags) {
+        return null;
+    }
+
+    @Override
+    public int getStress(EdgeIteratorState edge) {
+        return 0;
+    }
+
+    @Override
+    public int getStress(long flags) {
+        return 0;
+    }
+
+    @Override
+    public String getStressAsString(EdgeIteratorState edge) {
+        return null;
+    }
+
     public int getTransportMode(EdgeIteratorState edge) {
         return (int) transportModeEncoder.getValue(edge.getFlags());
     }
diff --git a/core/src/main/java/com/graphhopper/routing/util/FlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/FlagEncoder.java
index e8541bde8a..e896b8c3a9 100644
--- a/core/src/main/java/com/graphhopper/routing/util/FlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/FlagEncoder.java
@@ -153,4 +153,14 @@
     int getSurface(long flags);
 
     String getSurfaceAsString(EdgeIteratorState edge);
+
+
+
+    String getStressAsString(long flags);
+
+    int getStress(EdgeIteratorState edge);
+
+    int getStress(long flags);
+
+    String getStressAsString(EdgeIteratorState edge);
 }
diff --git a/core/src/main/java/com/graphhopper/routing/util/FootFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/FootFlagEncoder.java
index 73cef92e26..aedeb163a6 100644
--- a/core/src/main/java/com/graphhopper/routing/util/FootFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/FootFlagEncoder.java
@@ -400,6 +400,26 @@ public String getSurfaceAsString(EdgeIteratorState edge) {
         return null;
     }
 
+    @Override
+    public String getStressAsString(long flags) {
+        return null;
+    }
+
+    @Override
+    public int getStress(EdgeIteratorState edge) {
+        return 0;
+    }
+
+    @Override
+    public int getStress(long flags) {
+        return 0;
+    }
+
+    @Override
+    public String getStressAsString(EdgeIteratorState edge) {
+        return null;
+    }
+
     @Override
     public String toString() {
         return "foot";
diff --git a/core/src/main/java/com/graphhopper/routing/util/MapcRider2WeightFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/MapcRider2WeightFlagEncoder.java
index 136afca59f..9ae8fae5f7 100644
--- a/core/src/main/java/com/graphhopper/routing/util/MapcRider2WeightFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/MapcRider2WeightFlagEncoder.java
@@ -38,9 +38,11 @@
 public class MapcRider2WeightFlagEncoder extends BikeCommonFlagEncoder {
     final Set<String> safeHighwayTags = new HashSet<>();
     protected final Map<String, Integer> surfaceMap = new HashMap<>();
+    protected final Map<String, Integer> stressMap = new HashMap<>();
     protected final Map<String, Integer> highwayMap = new HashMap<>();
     private EncodedDoubleValue reverseSpeedEncoder;
     private EncodedValue surfaceEncoder;
+    private EncodedValue stressEncoder;
     private EncodedValue highwayEncoder;
     private boolean storeSurface = false;
 //
@@ -81,6 +83,13 @@ public MapcRider2WeightFlagEncoder(int speedBits, double speedFactor, int maxTur
         for (String s : surfaceList) {
             surfaceMap.put(s, counter++);
         }
+
+        List<String> stressList = Arrays.asList("_default", "low", "high");
+        counter = 0;
+        for (String srs : stressList) {
+            stressMap.put(srs, counter++);
+        }
+
         avoidHighwayTags.add("trunk");
         avoidHighwayTags.add("trunk_link");
         avoidHighwayTags.add("primary");
@@ -162,7 +171,7 @@ public MapcRider2WeightFlagEncoder(int speedBits, double speedFactor, int maxTur
         setCyclingNetworkPreference("icn", PriorityCode.BEST.getValue());
         setCyclingNetworkPreference("ncn", PriorityCode.BEST.getValue());
         setCyclingNetworkPreference("rcn", PriorityCode.VERY_NICE.getValue());
-        setCyclingNetworkPreference("lcn", PriorityCode.PREFER.getValue());
+        setCyclingNetworkPreference("lcn", PriorityCode.VERY_NICE.getValue());
         setCyclingNetworkPreference("mtb", PriorityCode.UNCHANGED.getValue());
 
         absoluteBarriers.add("kissing_gate");
@@ -188,6 +197,8 @@ public int defineWayBits(int index, int shift) {
         shift += highwayEncoder.getBits();
         surfaceEncoder = new EncodedValue("surface", shift, 4, 1, 0, surfaceMap.size(), true);
         shift += surfaceEncoder.getBits();
+        stressEncoder = new EncodedValue("stress_level", shift, 4, 1, 0, stressMap.size(), true);
+        shift += surfaceEncoder.getBits();
         return shift;
     }
 
@@ -314,10 +325,21 @@ public int getSurface(EdgeIteratorState edge) {
         return (int) surfaceEncoder.getValue(edge.getFlags());
     }
 
+    @Override
+    public int getStress(EdgeIteratorState edge) {
+        return (int) stressEncoder.getValue(edge.getFlags());
+    }
+
     @Override
     public int getSurface(long flags) {
         return (int) surfaceEncoder.getValue(flags);
     }
+
+    @Override
+    public int getStress(long flags) {
+        return (int) stressEncoder.getValue(flags);
+    }
+
     @Override
     public String getSurfaceAsString(long flags) {
         int val = getSurface(flags);
@@ -331,6 +353,19 @@ public String getSurfaceAsString(long flags) {
         return null;
     }
 
+    @Override
+    public String getStressAsString(long flags) {
+        int val = getStress(flags);
+        // System.out.println("Get surface in mapc2  flags"+flags);
+        // System.out.println("Get surface in mapc2  val   "+val);
+        // System.out.println("surfaceMap: "+surfaceMap.keySet());
+        for (Map.Entry<String, Integer> es : stressMap.entrySet()) {
+            if (es.getValue() == val)
+                return es.getKey();
+        }
+        return null;
+    }
+
     @Override
     public String getSurfaceAsString(EdgeIteratorState edge) {
         int val = getSurface(edge);
@@ -344,6 +379,18 @@ public String getSurfaceAsString(EdgeIteratorState edge) {
     }
 
 
+    @Override
+    public String getStressAsString(EdgeIteratorState edge) {
+        int val = getStress(edge);
+//        System.out.println("Get surface in bike commen flag"+val);
+//        System.out.println("surfaceMap: "+surfaceMap.keySet());
+        for (Map.Entry<String, Integer> es : stressMap.entrySet()) {
+            if (es.getValue() == val)
+                return es.getKey();
+        }
+        return null;
+    }
+
     @Override
     protected String getPropertiesString() {
         return super.getPropertiesString() +
@@ -450,7 +497,13 @@ public void applyWayTags(ReaderWay way, EdgeIteratorState edge) {
         if (sValue == null)
             sValue = 0;
         flags = surfaceEncoder.setValue(flags, sValue);
-        // HIGHWAY
+        // stress
+
+        String stressValue = way.getTag("stress_level");
+        Integer strValue = stressMap.get(stressValue);
+        if (strValue == null)
+            strValue = 0;
+        flags = stressEncoder.setValue(flags, strValue);
 
 
 
@@ -505,8 +558,8 @@ void collect(ReaderWay way, double wayTypeSpeed, TreeMap<Double, Integer> weight
         }
 
 
-        if ("residential".equals(highway)!=true){
-            if  (way.hasTag("cycleway", "no") || way.hasTag("cycleway")!=true){
+        if (!"residential".equals(highway)){
+            if  (way.hasTag("cycleway", "no") || !way.hasTag("cycleway")){
                 weightToPrioMap.put(44d, AVOID_AT_ALL_COSTS.getValue());
 
 
diff --git a/core/src/main/java/com/graphhopper/routing/util/MapcRiderFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/MapcRiderFlagEncoder.java
index 27cd99ef33..ca8dff5ba3 100644
--- a/core/src/main/java/com/graphhopper/routing/util/MapcRiderFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/MapcRiderFlagEncoder.java
@@ -174,6 +174,26 @@ public String getSurfaceAsString(EdgeIteratorState edge) {
         return null;
     }
 
+    @Override
+    public String getStressAsString(long flags) {
+        return null;
+    }
+
+    @Override
+    public int getStress(EdgeIteratorState edge) {
+        return 0;
+    }
+
+    @Override
+    public int getStress(long flags) {
+        return 0;
+    }
+
+    @Override
+    public String getStressAsString(EdgeIteratorState edge) {
+        return null;
+    }
+
     @Override
     void collect(ReaderWay way, double wayTypeSpeed, TreeMap<Double, Integer> weightToPrioMap) {
         super.collect(way, wayTypeSpeed, weightToPrioMap);
diff --git a/core/src/main/java/com/graphhopper/routing/util/MountainBikeFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/MountainBikeFlagEncoder.java
index c5b332a5ae..4235c31bc9 100644
--- a/core/src/main/java/com/graphhopper/routing/util/MountainBikeFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/MountainBikeFlagEncoder.java
@@ -169,6 +169,26 @@ public String getSurfaceAsString(EdgeIteratorState edge) {
         return null;
     }
 
+    @Override
+    public String getStressAsString(long flags) {
+        return null;
+    }
+
+    @Override
+    public int getStress(EdgeIteratorState edge) {
+        return 0;
+    }
+
+    @Override
+    public int getStress(long flags) {
+        return 0;
+    }
+
+    @Override
+    public String getStressAsString(EdgeIteratorState edge) {
+        return null;
+    }
+
 
     @Override
     void collect(ReaderWay way, double wayTypeSpeed, TreeMap<Double, Integer> weightToPrioMap) {
diff --git a/core/src/main/java/com/graphhopper/routing/util/RacingBikeFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/RacingBikeFlagEncoder.java
index 97e5daf454..9f2ec31f2a 100644
--- a/core/src/main/java/com/graphhopper/routing/util/RacingBikeFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/RacingBikeFlagEncoder.java
@@ -161,6 +161,26 @@ public String getSurfaceAsString(EdgeIteratorState edge) {
         return null;
     }
 
+    @Override
+    public String getStressAsString(long flags) {
+        return null;
+    }
+
+    @Override
+    public int getStress(EdgeIteratorState edge) {
+        return 0;
+    }
+
+    @Override
+    public int getStress(long flags) {
+        return 0;
+    }
+
+    @Override
+    public String getStressAsString(EdgeIteratorState edge) {
+        return null;
+    }
+
 
     @Override
     void collect(ReaderWay way, double wayTypeSpeed, TreeMap<Double, Integer> weightToPrioMap) {
diff --git a/core/src/main/java/com/graphhopper/routing/util/SecondMapcBikeFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/SecondMapcBikeFlagEncoder.java
index f5bf2fb180..5df4bd6f46 100644
--- a/core/src/main/java/com/graphhopper/routing/util/SecondMapcBikeFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/SecondMapcBikeFlagEncoder.java
@@ -161,6 +161,26 @@ public String getSurfaceAsString(EdgeIteratorState edge) {
         return null;
     }
 
+    @Override
+    public String getStressAsString(long flags) {
+        return null;
+    }
+
+    @Override
+    public int getStress(EdgeIteratorState edge) {
+        return 0;
+    }
+
+    @Override
+    public int getStress(long flags) {
+        return 0;
+    }
+
+    @Override
+    public String getStressAsString(EdgeIteratorState edge) {
+        return null;
+    }
+
     @Override
     void collect(ReaderWay way, double wayTypeSpeed, TreeMap<Double, Integer> weightToPrioMap) {
         super.collect(way, wayTypeSpeed, weightToPrioMap);
diff --git a/core/src/main/java/com/graphhopper/util/details/FacilitiesOveralDetails.java b/core/src/main/java/com/graphhopper/util/details/FacilitiesOveralDetails.java
index c4bd98f2d5..6c803b5830 100644
--- a/core/src/main/java/com/graphhopper/util/details/FacilitiesOveralDetails.java
+++ b/core/src/main/java/com/graphhopper/util/details/FacilitiesOveralDetails.java
@@ -44,7 +44,7 @@ public boolean isEdgeDifferentToLastEdge(EdgeIteratorState edge) {
 //            return true;
 //        }
 //        String facils = encoder();
-        this.facilitiesOverals = this.encoder.getSurfaceAsString(edge.getFlags()) + " | " + this.encoder.getHighwayAsString(edge) + " | "+ this.encoder.getReverseSpeed(edge.getFlags());
+        this.facilitiesOverals = this.encoder.getSurfaceAsString(edge.getFlags()) + " | " + this.encoder.getHighwayAsString(edge) + " | "+ this.encoder.getReverseSpeed(edge.getFlags())+ " | " + edge.getDistance() + " | " + this.encoder.getStressAsString(edge.getFlags());
         return true;
     }
 
diff --git a/core/src/test/java/com/graphhopper/routing/util/EncodingManagerTest.java b/core/src/test/java/com/graphhopper/routing/util/EncodingManagerTest.java
index 7eca3cd488..d0329e4497 100644
--- a/core/src/test/java/com/graphhopper/routing/util/EncodingManagerTest.java
+++ b/core/src/test/java/com/graphhopper/routing/util/EncodingManagerTest.java
@@ -127,6 +127,26 @@ public String getSurfaceAsString(EdgeIteratorState edge) {
                 return null;
             }
 
+            @Override
+            public String getStressAsString(long flags) {
+                return null;
+            }
+
+            @Override
+            public int getStress(EdgeIteratorState edge) {
+                return 0;
+            }
+
+            @Override
+            public int getStress(long flags) {
+                return 0;
+            }
+
+            @Override
+            public String getStressAsString(EdgeIteratorState edge) {
+                return null;
+            }
+
             @Override
             public String toString() {
                 return "new_encoder";
diff --git a/latest.osm.pbf b/latest.osm.pbf
index f5b5f89f80..b3d9cb653d 100644
Binary files a/latest.osm.pbf and b/latest.osm.pbf differ
diff --git a/config-example.yml b/prod-config.yml
similarity index 86%
rename from config-example.yml
rename to prod-config.yml
index 9d43778a1a..6bc586e582 100644
--- a/config-example.yml
+++ b/prod-config.yml
@@ -8,7 +8,7 @@ graphhopper:
 
   # Possible options: car,foot,bike,bike2,mtb,racingbike,motorcycle (comma separated)
   # bike2 takes elevation data into account (like up-hill is slower than down-hill) and requires enabling graph.elevation.provider below
-  graph.flag_encoders: racingbike
+  graph.flag_encoders: mapcrider2, racingbike
 
 
   # Enable turn restrictions for car or motorcycle.
@@ -19,15 +19,15 @@ graphhopper:
 
 
   # To populate your graph with elevation data use SRTM, default is noop (no elevation)
-   graph.elevation.provider: srtm
+  graph.elevation.provider: cgiar # multi
 
 
   # default location for cache is /tmp/srtm
-  # graph.elevation.cache_dir: ./srtmprovider/
+  graph.elevation.cache_dir: ./multielevationprovider/
 
 
   # If you have a slow disk or plenty of RAM change the default MMAP to:
-  # graph.elevation.dataaccess: RAM_STORE
+  graph.elevation.dataaccess: RAM_STORE
 
 
 
@@ -38,26 +38,25 @@ graphhopper:
   # contraction hierarchies (CH) is done to speed routing up. This requires more RAM/disc space for holding the
   # graph but less for every request. You can also setup multiple weightings, by providing a comma separated list.
   prepare.ch.weightings: fastest
-
-
-  # Disable the speed mode. Should be used only with routing.max_visited_nodes or when the hybrid mode is enabled instead
   # prepare.ch.weightings: no
+  # prepare.ch.landmarks: 64
+  # Disable the speed mode. Should be used only with routing.max_visited_nodes or when the hybrid mode is enabled instead
+  # prepare.ch.weightings: fastest
 
 
   # To make CH preparation faster for multiple flagEncoders you can increase the default threads if you have enough RAM.
   # Change this setting only if you know what you are doing and if the default worked for you.
-  # prepare.ch.threads: 1
+  prepare.ch.threads: 2
 
 
   # The hybrid mode can be enabled with
-  # prepare.lm.weightings: fastest
+  prepare.lm.weightings: fastest
 
   # To tune the performance vs. memory usage for the hybrid mode use
-  # prepare.lm.landmarks: 16
+  prepare.lm.landmarks: 64
 
   # Make landmark preparation parallel if you have enough RAM. Change this only if you know what you are doing and if the default worked for you.
-  # prepare.lm.threads: 1
-
+  #  prepare.lm.threads: 2
 
   # avoid being stuck in a (oneway) subnetwork, see https://discuss.graphhopper.com/t/93
   prepare.min_network_size: 200
@@ -70,20 +69,20 @@ graphhopper:
 
   # You can define the maximum visited nodes when routing. This may result in not found connections if there is no
   # connection between two points within the given visited nodes. The default is Integer.MAX_VALUE. Useful for flexibility mode
-  # routing.max_visited_nodes: 1000000
+  routing.max_visited_nodes: 1000000
 
 
   # If enabled, allows a user to run flexibility requests even if speed mode is enabled. Every request then has to include a hint routing.ch.disable=true.
   # Attention, non-CH route calculations take way more time and resources, compared to CH routing.
   # A possible attacker might exploit this to slow down your service. Only enable it if you need it and with routing.maxVisitedNodes
-  # routing.ch.disabling_allowed: true
+  routing.ch.disabling_allowed: true
 
 
   # If enabled, allows a user to run flexible mode requests even if the hybrid mode is enabled. Every such request then has to include a hint routing.lm.disable=true.
-  # routing.lm.disabling_allowed: true
+  routing.lm.disabling_allowed: true
 
   # Control how many active landmarks are picked per default, this can improve query performance
-  # routing.lm.active_landmarks: 4
+  routing.lm.active_landmarks: 8
 
 
   # You can limit the max distance between two consecutive waypoints of flexible routing requests to be less or equal
@@ -103,7 +102,8 @@ graphhopper:
 
 
   # Sort the graph after import to make requests roughly ~10% faster. Note that this requires significantly more RAM on import.
-  # graph.do_sort: true
+  #  graph.do_sort: true
+  graph.bytes_for_flags: 8
 
 
 
@@ -132,13 +132,13 @@ graphhopper:
 # Dropwizard server configuration
 server:
   applicationConnectors:
-  - type: http
-    port: 8989
-    # for security reasons bind to localhost
-    bindHost: localhost
+    - type: http
+      port: 8989
+      # for security reasons bind to localhost
+      bindHost: localhost
   requestLog:
-      appenders: []
+    appenders: []
   adminConnectors:
-  - type: http
-    port: 8990
-    bindHost: localhost
+    - type: http
+      port: 8990
+      bindHost: localhost
diff --git a/reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/PtFlagEncoder.java b/reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/PtFlagEncoder.java
index 128a9a595d..5d94878575 100644
--- a/reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/PtFlagEncoder.java
+++ b/reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/PtFlagEncoder.java
@@ -137,4 +137,24 @@ public int getSurface(long flags) {
 	public String getSurfaceAsString(EdgeIteratorState edge) {
 		return null;
 	}
+
+	@Override
+	public String getStressAsString(long flags) {
+		return null;
+	}
+
+	@Override
+	public int getStress(EdgeIteratorState edge) {
+		return 0;
+	}
+
+	@Override
+	public int getStress(long flags) {
+		return 0;
+	}
+
+	@Override
+	public String getStressAsString(EdgeIteratorState edge) {
+		return null;
+	}
 }
diff --git a/viz/package.json b/viz/package.json
index cf2ca16130..1a47f4ab42 100644
--- a/viz/package.json
+++ b/viz/package.json
@@ -2,6 +2,11 @@
   "name": "viz",
   "version": "0.1.0",
   "private": true,
+  "scripts": {
+    "serve": "vue serve src/main.js",
+    "build": "vue-cli-service build",
+    "lint": "vue-cli-service lint"
+  },
   "devDependencies": {
     "@vue/cli-plugin-babel": "latest",
     "@vue/cli-plugin-eslint": "latest",
diff --git a/viz/src/components/MapView.vue b/viz/src/components/MapView.vue
index 09057de8de..6cc3a39c37 100644
--- a/viz/src/components/MapView.vue
+++ b/viz/src/components/MapView.vue
@@ -81,7 +81,7 @@
                 // console.log($route.params.route)
 
                 let routeChoice = "home to mapc";
-                let num_of_alterntves = 1;
+                let num_of_alterntves = 2;
                 let encoderFlg = "mapcrider2";
 
 
@@ -99,28 +99,35 @@
                         .range([1,8]);
                 console.log("self in MapView", self)
                 let files = [];
-                routesDataMap.set("mapc to neu", "point=42.355278%2C-71.0616&point=42.337207%2C-71.089543");
-                routesDataMap.set("neu to mapc", "point=42.337207%2C-71.089543&point=42.355278%2C-71.0616");
+                // routesDataMap.set("mapc to neu", "point=42.355278%2C-71.0616&point=42.337207%2C-71.089543");
+                // routesDataMap.set("neu to mapc", "point=42.337207%2C-71.089543&point=42.355278%2C-71.0616");
                 routesDataMap.set("mapc to home", "point=42.355097%2C-71.061361&point=42.318246%2C-71.105052")
-                routesDataMap.set("home to mapc", "point=42.318246%2C-71.105052&point=42.355097%2C-71.061361")
-                routesDataMap.set("home to neu", "point=42.318246%2C-71.105052&point=42.337043%2C-71.089667")
+                // routesDataMap.set("home to mapc", "point=42.318246%2C-71.105052&point=42.355097%2C-71.061361")
+                // routesDataMap.set("home to neu", "point=42.318246%2C-71.105052&point=42.337043%2C-71.089667")
+                routesDataMap.set("mapc to alwife", "point=42.355297%2C-71.061762&point=42.395944%2C-71.139007")
+                routesDataMap.set("centralsq to govcentr", "point=42.365515%2C-71.103489&point=42.359309%2C-71.059664")
+                routesDataMap.set("packardcrnr to kandalmit", "point=42.352045%2C-71.124788&point=42.362526%2C-71.085679")
                 // if (num_of_alterntves>1)
-
-                for (let [key, value] of mapdata) {
-                                if (num_of_alterntves<2) {
-                                        files.push("http://0.0.0.0:8989/route?"+routesDataMap.get(routeChoice)+"&locale=en-US&vehicle=" + value + "&weighting=fastest&points_encoded=false&elevation=true&use_miles=true&details=weight_value&details=street_name&details=edge_id&details=average_speed&details=facilities_overal")
-
-                                } else {
-                                files.push(
-                                        "http://0.0.0.0:8989/route?"+routesDataMap.get(routeChoice)+"&locale=en-US&vehicle=" + value + "&weighting=fastest&points_encoded=false&algorithm=alternative_route&alternative_route.max_paths=" + num_of_alterntves + "&alternative_route.max_share_factor=0.3&elevation=true&use_miles=true&details=weight_value&details=street_name&details=edge_id&details=average_speed"
-                                )
-                                // files.push(
-                                //         "http://0.0.0.0:8989/route?point=42.338875%2C-71.088759&point=42.355695%2C-71.060661&locale=en-US&vehicle="+key+"&weighting=fastest&points_encoded=false&elevation=true&use_miles=true&details=weight_value&details=street_name&details=edge_id&details=average_speed"
-                                // )
-                        }
+                for (let [k,v] of routesDataMap){
+                        console.log(k, v)
+                        files.push("http://0.0.0.0:8989/route?"+v+"&ch.disable=false&locale=en-US&vehicle=" + mapdata.get("encoderFlg") + "&weighting=fastest&points_encoded=false&algorithm=alternative_route&alternative_route.max_paths=" + num_of_alterntves + "&elevation=true&use_miles=true$details=distance&details=weight_value&details=street_name&details=edge_id&details=average_speed&details=facilities_overal")
                 }
-
-                console.log(files.length)
+                // for (let [key, value] of mapdata) {
+                //                 if (num_of_alterntves<2) {
+                //                         files.push("http://0.0.0.0:8989/route?"+routesDataMap.get(routeChoice)+"&ch.disable=true&locale=en-US&vehicle=" + value + "&weighting=fastest&points_encoded=false&elevation=true&use_miles=true&details=weight_value&details=street_name&details=edge_id&details=average_speed&details=facilities_overal")
+
+                //                 } else {
+                //                 files.push(
+                //                         "http://0.0.0.0:8989/route?"+routesDataMap.get(routeChoice)+"&locale=en-US&vehicle=" + value + "&weighting=fastest&points_encoded=false&algorithm=alternative_route&alternative_route.max_paths=" + num_of_alterntves + "&alternative_route.max_share_factor=0.3&elevation=true&use_miles=true&details=weight_value&details=street_name&details=edge_id&details=average_speed"
+                //                 )
+                //                 // files.push(
+                //                 //         "http://0.0.0.0:8989/route?point=42.338875%2C-71.088759&point=42.355695%2C-71.060661&locale=en-US&vehicle="+key+"&weighting=fastest&points_encoded=false&elevation=true&use_miles=true&details=weight_value&details=street_name&details=edge_id&details=average_speed"
+                //                 // )
+                //         }
+                // }
+
+                console.log("files.length: ",files.length)
+                console.log("files ", files)
                 Promise.all(
                         files.map(
                                 url => d3.json(url)
@@ -132,6 +139,17 @@
                         let dataitems = [];
                         let colors = [
                                 ["darkred","red"],
+                                
+                                ["darkgreen","lightgreen"],
+                                 ["darkblue","blue"],
+                                ["grey","black"],
+                                ["darkgreen","lightgreen"],
+                                ["darkred","lightred"],
+                                 ["darkred","red"],
+                                ["darkred","lightred"],
+                                ["darkgreen","lightgreen"], ["darkred","red"],
+                                ["darkred","lightred"],
+                                ["darkgreen","lightgreen"], ["darkred","red"],
                                 ["darkred","lightred"],
                                 ["darkgreen","lightgreen"]
                         ];
@@ -179,8 +197,12 @@
 
 
                                         )
+                                        let temp_inde = 0
                                         d[jo]["paths"][j]["details"]["weight_value"].forEach(function (event) {
-                                                weight_range.push(event[2])
+                                                 let dist_seg = d[jo]["paths"][j]["details"]["facilities_overal"][temp_inde]
+                                                weight_range.push(event[2] / Math.round(dist_seg[2].split(" | ")[3]))
+                                                console.log(event[2] / Math.round(dist_seg[2].split(" | ")[3]))
+                                                temp_inde++
                                         })
                                 }
                         }
@@ -194,8 +216,12 @@
                                         .range(colors[joz])
                                         .interpolate(d3.interpolateHcl);
                                 for (let i = 0; i < num_of_alterntves; i++) {
+                                        let temp_inde = 0
                                         d[joz]["paths"][i]["details"]["weight_value"].forEach(function(event){
-                                                weight_range.push(event[2])
+                                                let dist_seg = d[joz]["paths"][i]["details"]["facilities_overal"][temp_inde]
+                                                weight_range.push(event[2] / Math.round(dist_seg[2].split(" | ")[3]))
+                                                console.log(event[2] / Math.round(dist_seg[2].split(" | ")[3]))
+                                                temp_inde++
                                         })
                                         console.log(d[joz]["paths"][i]["details"]["average_speed"]);console.log(d[joz]["paths"][i]["details"]["weight_value"]);
                                         d[joz]["paths"][i]["details"]["weight_value"].forEach(function(event){
@@ -238,12 +264,14 @@
                                                 let tolat = d[joz]["paths"][i]["points"]["coordinates"][event[1]][1]
                                                 let weight_val = event[2]
                                                 // ancG["geometry"]["coordinates"].push([[fromlon,fromlat],[tolon,tolat]])
+                                                console.log(Math.round(foevent.split(" | ")[3]))
+                                                console.log((weight_val / Math.round(foevent.split(" | ")[3])))
                                                 dateArr.push(
                                                         {
                                                                 'type': 'Feature',
                                                                 'properties': {
                                                                         'color': color(i),
-                                                                        'width': lineScale(weight_val),
+                                                                        'width': lineScale(weight_val / Math.round(foevent.split(" | ")[3])),
                                                                         'opacity': 0.7,
                                                                         'title': "w=" + Math.round(weight_val)+aver_spd+foevent
 
