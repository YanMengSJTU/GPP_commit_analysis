diff --git a/graphhopper-teavm/src/main/java/com/graphhopper/teavm/DataEntry.java b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/DataEntry.java
index c64495f560..a8a199fc93 100644
--- a/graphhopper-teavm/src/main/java/com/graphhopper/teavm/DataEntry.java
+++ b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/DataEntry.java
@@ -20,4 +20,7 @@
 
     @JSProperty
     String getHeader();
+
+    @JSProperty
+    int getLength();
 }
diff --git a/graphhopper-teavm/src/main/java/com/graphhopper/teavm/GraphhopperJsonGenerator.java b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/GraphhopperJsonGenerator.java
index 82e7bd5850..ec689da3c1 100644
--- a/graphhopper-teavm/src/main/java/com/graphhopper/teavm/GraphhopperJsonGenerator.java
+++ b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/GraphhopperJsonGenerator.java
@@ -32,22 +32,23 @@ public static void main(String[] args) throws IOException {
             byte[] headerBytes = new byte[80];
             for (int i = 0; i < 20; ++i) {
                 int val = dataAccess.getHeader(i * 4);
-                headerBytes[i * 4 + 0] = (byte)(val >>> 24);
-                headerBytes[i * 4 + 1] = (byte)(val >>> 16);
-                headerBytes[i * 4 + 2] = (byte)(val >>> 8);
-                headerBytes[i * 4 + 3] = (byte)val;
+                headerBytes[i * 4 + 0] = (byte)val;
+                headerBytes[i * 4 + 1] = (byte)(val >>> 8);
+                headerBytes[i * 4 + 2] = (byte)(val >>> 16);
+                headerBytes[i * 4 + 3] = (byte)(val >>> 24);
             }
             out.print("\"header\":\"" + Base64.encode(headerBytes) + "\",");
+            out.print("\"length\":" + dataAccess.getCapacity() +  ",");
             out.println("\"data\":[");
 
             for (int i = 0; i < dataAccess.getCapacity(); i += buffer.length) {
                 int sz = (int)(Math.min(i + buffer.length, dataAccess.getCapacity()) - i);
                 for (int j = 0; j < sz; j += 4) {
                     int val = dataAccess.getInt(i + j);
-                    buffer[j + 0] = (byte)(val >>> 24);
-                    buffer[j + 1] = (byte)(val >>> 16);
-                    buffer[j + 2] = (byte)(val >>> 8);
-                    buffer[j + 3] = (byte)(val >>> 0);
+                    buffer[j + 0] = (byte)(val >>> 0);
+                    buffer[j + 1] = (byte)(val >>> 8);
+                    buffer[j + 2] = (byte)(val >>> 16);
+                    buffer[j + 3] = (byte)(val >>> 24);
                 }
                 if (i > 0) {
                     out.println(",");
diff --git a/graphhopper-teavm/src/main/java/com/graphhopper/teavm/InMemoryDataAccess.java b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/InMemoryDataAccess.java
index 32408a3552..cd7d3081ac 100644
--- a/graphhopper-teavm/src/main/java/com/graphhopper/teavm/InMemoryDataAccess.java
+++ b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/InMemoryDataAccess.java
@@ -145,42 +145,34 @@ public final short getShort( long bytePos )
     @Override
     public void setBytes( long bytePos, byte[] values, int length )
     {
-        assert length <= segmentSizeInBytes : "the length has to be smaller or equal to the segment size: " + length + " vs. " + segmentSizeInBytes;
         assert segmentSizePower > 0 : "call create or loadExisting before usage!";
-        int bufferIndex = (int) (bytePos >>> segmentSizePower);
-        int index = (int) (bytePos & indexDivisor);
-        byte[] seg = segments[bufferIndex];
-        int delta = index + length - segmentSizeInBytes;
-        if (delta > 0)
-        {
-            length -= delta;
-            System.arraycopy(values, 0, seg, index, length);
-            seg = segments[bufferIndex + 1];
-            System.arraycopy(values, length, seg, 0, delta);
-        } else
-        {
-            System.arraycopy(values, 0, seg, index, length);
+        int sourceIndex = 0;
+        while (length > 0) {
+            int index = (int) (bytePos & indexDivisor);
+            int bufferIndex = (int) (bytePos >>> segmentSizePower);
+            byte[] seg = segments[bufferIndex];
+            int localLength = Math.min(length, segmentSizeInBytes - index);
+            System.arraycopy(values, sourceIndex, seg, index, localLength);
+            bytePos += localLength;
+            sourceIndex += localLength;
+            length -= localLength;
         }
     }
 
     @Override
     public void getBytes( long bytePos, byte[] values, int length )
     {
-        assert length <= segmentSizeInBytes : "the length has to be smaller or equal to the segment size: " + length + " vs. " + segmentSizeInBytes;
         assert segmentSizePower > 0 : "call create or loadExisting before usage!";
         int bufferIndex = (int) (bytePos >>> segmentSizePower);
-        int index = (int) (bytePos & indexDivisor);
-        byte[] seg = segments[bufferIndex];
-        int delta = index + length - segmentSizeInBytes;
-        if (delta > 0)
-        {
-            length -= delta;
-            System.arraycopy(seg, index, values, 0, length);
-            seg = segments[bufferIndex + 1];
-            System.arraycopy(seg, 0, values, length, delta);
-        } else
-        {
-            System.arraycopy(seg, index, values, 0, length);
+        int targetIndex = 0;
+        while (length > 0) {
+            int index = (int) (bytePos & indexDivisor);
+            byte[] seg = segments[bufferIndex];
+            int localLength = Math.min(length, segmentSizeInBytes - index);
+            System.arraycopy(seg, index, values, targetIndex, localLength);
+            bytePos += localLength;
+            targetIndex += localLength;
+            length -= localLength;
         }
     }
 
diff --git a/graphhopper-teavm/src/main/java/com/graphhopper/teavm/Main.java b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/Main.java
index f88d547efc..646b4fdb9a 100644
--- a/graphhopper-teavm/src/main/java/com/graphhopper/teavm/Main.java
+++ b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/Main.java
@@ -48,17 +48,18 @@ private static void readAll(InMemoryDirectory directory) {
             DataEntry entry = data.get(i);
             DataAccess file = directory.find(entry.getName());
             file.setSegmentSize(entry.getSegmentSize());
-            long pos = 0;
+            file.create(entry.getLength());
+            int pos = 0;
             for (int j = 0; j < entry.getData().getLength(); ++j) {
-                byte[] bytes = Base64.decode(JS.unwrapString(entry.getData().get(0)));
-                for (int k = 0; k < bytes.length; k += 4) {
-                    int val = (bytes[k]) | (bytes[k + 1] << 8) | (bytes[k + 2] << 16) | (bytes[k + 3] << 24);
-                    file.setInt(j + k, val);
-                }
+                byte[] bytes = Base64.decode(JS.unwrapString(entry.getData().get(j)));
                 file.setBytes(pos, bytes, bytes.length);
                 pos += bytes.length;
             }
-            file.setHeader(i, i);
+            byte[] header = Base64.decode(entry.getHeader());
+            for (int j = 0; j < 80; j += 4) {
+                int val = (header[j]) | (header[j + 1] << 8) | (header[j + 2] << 16) | (header[j + 3] << 24);
+                file.setHeader(j, val);
+            }
         }
     }
 }
