diff --git a/core/src/main/java/com/graphhopper/routing/AbstractRoutingAlgorithm.java b/core/src/main/java/com/graphhopper/routing/AbstractRoutingAlgorithm.java
index 9dd433077b..19192e9866 100644
--- a/core/src/main/java/com/graphhopper/routing/AbstractRoutingAlgorithm.java
+++ b/core/src/main/java/com/graphhopper/routing/AbstractRoutingAlgorithm.java
@@ -121,7 +121,7 @@ protected SPTEntry createSPTEntry(int node, double weight) {
     }
 
     public Path calcTDPath(int from, int to, long at) {
-        throw new RuntimeException();
+        throw new RuntimeException("Unsupported. (Add algorithm=dijkstra to request?)");
     }
 
     protected Path createEmptyPath() {
diff --git a/core/src/main/java/com/graphhopper/routing/Dijkstra.java b/core/src/main/java/com/graphhopper/routing/Dijkstra.java
index ff50733bdc..e33ed89a7b 100644
--- a/core/src/main/java/com/graphhopper/routing/Dijkstra.java
+++ b/core/src/main/java/com/graphhopper/routing/Dijkstra.java
@@ -69,6 +69,7 @@ public Path calcPath(int from, int to) {
         return extractPath();
     }
 
+    @Override
     public Path calcTDPath(int from, int to, long at) {
         if (!(weighting instanceof TDWeightingI)) throw new RuntimeException();
         checkAlreadyRun();
diff --git a/kansas_city.yml b/kansas_city.yml
new file mode 100644
index 0000000000..a924a94c02
--- /dev/null
+++ b/kansas_city.yml
@@ -0,0 +1,10 @@
+graphhopper:
+  graph.location: ../../git/r5/transit_data/kansas_city/graphhopper
+  routing.ch.disabling_allowed: true
+
+server:
+  applicationConnectors:
+  - type: http
+    port: 8998
+  requestLog:
+    appenders: []
diff --git a/web/src/main/java/com/graphhopper/http/GraphHopperManaged.java b/web/src/main/java/com/graphhopper/http/GraphHopperManaged.java
index fc4dcae4e6..428969f58e 100644
--- a/web/src/main/java/com/graphhopper/http/GraphHopperManaged.java
+++ b/web/src/main/java/com/graphhopper/http/GraphHopperManaged.java
@@ -27,13 +27,10 @@
 import com.graphhopper.routing.weighting.Weighting;
 import com.graphhopper.spatialrules.SpatialRuleLookupHelper;
 import com.graphhopper.storage.Graph;
-import com.graphhopper.swl.FileSpeedCalculator;
-import com.graphhopper.swl.PathDetailsBuilderFactoryWithR5EdgeId;
-import com.graphhopper.swl.TDCarWeighting;
+import com.graphhopper.swl.*;
 import com.graphhopper.util.CmdArgs;
 import com.graphhopper.util.PMap;
 import com.graphhopper.util.Parameters;
-import com.graphhopper.swl.OriginalDirectionFlagEncoder;
 import io.dropwizard.lifecycle.Managed;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -50,7 +47,13 @@
     @Inject
     public GraphHopperManaged(CmdArgs configuration) {
         OriginalDirectionFlagEncoder originalDirectionFlagEncoder = new OriginalDirectionFlagEncoder();
-        FileSpeedCalculator speedCalculator = new FileSpeedCalculator(originalDirectionFlagEncoder,configuration.get("r5.link_speed_file", "required!!"));
+        String linkSpeedFile = configuration.get("r5.link_speed_file", null);
+        final SpeedCalculator speedCalculator;
+        if (linkSpeedFile != null) {
+            speedCalculator = new FileSpeedCalculator(originalDirectionFlagEncoder, linkSpeedFile);
+        } else {
+            speedCalculator = new DefaultSpeedCalculator(originalDirectionFlagEncoder);
+        }
         graphHopper = new GraphHopperOSM(
                 SpatialRuleLookupHelper.createLandmarkSplittingFeatureCollection(configuration.get(Parameters.Landmark.PREPARE + "split_area_location", ""))
         ) {
diff --git a/web/src/main/java/com/graphhopper/swl/DefaultSpeedCalculator.java b/web/src/main/java/com/graphhopper/swl/DefaultSpeedCalculator.java
index 0a6d88cedc..3c7ce48091 100644
--- a/web/src/main/java/com/graphhopper/swl/DefaultSpeedCalculator.java
+++ b/web/src/main/java/com/graphhopper/swl/DefaultSpeedCalculator.java
@@ -22,7 +22,7 @@
 import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.util.EdgeIteratorState;
 
-class DefaultSpeedCalculator implements SpeedCalculator {
+public class DefaultSpeedCalculator implements SpeedCalculator {
     private final FlagEncoder encoder;
 
     public DefaultSpeedCalculator(FlagEncoder encoder) {
