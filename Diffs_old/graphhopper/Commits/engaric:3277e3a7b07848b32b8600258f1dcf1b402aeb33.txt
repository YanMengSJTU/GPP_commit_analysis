diff --git a/core/src/main/java/com/graphhopper/reader/osgb/AbstractOsReader.java b/core/src/main/java/com/graphhopper/reader/osgb/AbstractOsReader.java
index 28e55a3153..dbae9dda7f 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/AbstractOsReader.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/AbstractOsReader.java
@@ -3,6 +3,11 @@
 import java.io.File;
 import java.io.IOException;
 
+import javax.xml.stream.XMLStreamException;
+
+import org.opengis.geometry.MismatchedDimensionException;
+import org.opengis.referencing.FactoryException;
+import org.opengis.referencing.operation.TransformException;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -19,15 +24,14 @@
     private static final String TIME_PASS1_PASS2_TOTAL_FORMAT = "time(pass1): {} pass2: {} total: ";
     protected static final String PREPROCESS_FORMAT = "preprocess: {}";
 
-    protected EncodingManager encodingManager = null;
+    protected EncodingManager encodingManager;
     protected int workerThreads = -1;
     protected final DouglasPeucker simplifyAlgo = new DouglasPeucker();
     protected boolean doSimplify = true;
     private File routingFile;
     protected final GraphStorage graphStorage;
     protected final NodeAccess nodeAccess;
-    protected ElevationProvider eleProvider = ElevationProvider.NOOP;
-
+    protected ElevationProvider elevationProvider = ElevationProvider.NOOP;
 
     private static final Logger logger = LoggerFactory.getLogger(AbstractOsReader.class.getName());
     protected static final String WE_HAVE_EVALUATED_WAY_NODES_FORMAT = "We have evaluated {} way nodes.";
@@ -37,6 +41,7 @@ public AbstractOsReader(GraphStorage storage) {
         this.nodeAccess = graphStorage.getNodeAccess();
 
     }
+
     /**
      * Specify the type of the path calculation (car, bike, ...).
      */
@@ -65,32 +70,59 @@ public void readGraph() throws IOException {
             throw new IllegalStateException("Encoding manager was not set.");
 
         if (routingFile == null)
-            throw new IllegalStateException("No OS ITN file specified");
+            throw new IllegalStateException("No OS file specified");
 
         if (!routingFile.exists())
-            throw new IllegalStateException(
-                    "Your specified OS ITN file does not exist:"
-                            + routingFile.getAbsolutePath());
+            throw new IllegalStateException("Your specified OS file does not exist:" + routingFile.getAbsolutePath());
 
         StopWatch sw1 = new StopWatch().start();
         preProcess(routingFile);
         sw1.stop();
 
         StopWatch sw2 = new StopWatch().start();
-        writeOsm2Graph(routingFile);
+        try {
+            writeOsm2Graph(routingFile);
+        } catch (MismatchedDimensionException | XMLStreamException | IOException | FactoryException | TransformException e) {
+            logger.error("Exception in writing OSM2Graph", e);
+            throw new IllegalStateException("Exception in writing OSM2Graph");
+        }
         sw2.stop();
 
-        logger.info(TIME_PASS1_PASS2_TOTAL_FORMAT, (int) sw1.getSeconds(),
-                (int) sw2.getSeconds(),
-                ((int) (sw1.getSeconds() + sw2.getSeconds())));
+        logger.info(TIME_PASS1_PASS2_TOTAL_FORMAT, (int) sw1.getSeconds(), (int) sw2.getSeconds(), ((int) (sw1.getSeconds() + sw2.getSeconds())));
+    }
+
+    /**
+     * Preprocessing of routing file to select nodes which are used for
+     * highways. This allows a more compact graph data structure.
+     */
+    protected void preProcess(File routingFile) {
+        try {
+            preProcessDirOrFile(routingFile);
+        } catch (Exception ex) {
+            throw new RuntimeException("Problem while parsing file", ex);
+        }
+    }
+
+    protected void preProcessDirOrFile(File routingFile) throws XMLStreamException, IOException, MismatchedDimensionException, FactoryException, TransformException {
+        if (routingFile.isDirectory()) {
+            String absolutePath = routingFile.getAbsolutePath();
+            String[] list = routingFile.list();
+            for (String file : list) {
+                File nextFile = new File(absolutePath + File.separator + file);
+                preProcessDirOrFile(nextFile);
+            }
+        } else {
+            preProcessSingleFile(routingFile);
+        }
     }
 
-    abstract protected void preProcess(File itnFile);
-    abstract protected void writeOsm2Graph(File osmFile);
+    abstract protected void preProcessSingleFile(File routingFile) throws XMLStreamException, IOException, MismatchedDimensionException, FactoryException, TransformException;
+
+    abstract protected void writeOsm2Graph(File routingFile) throws MismatchedDimensionException, XMLStreamException, IOException, FactoryException, TransformException;
 
     @Override
-    public AbstractOsReader<E> setOSMFile(File osmFile) {
-        this.routingFile = osmFile;
+    public AbstractOsReader<E> setOSMFile(File routingFile) {
+        this.routingFile = routingFile;
         return this;
     }
 
@@ -98,21 +130,21 @@ public void readGraph() throws IOException {
     public GraphStorage getGraphStorage() {
         return graphStorage;
     }
+
     @Override
     public String toString() {
         return getClass().getSimpleName();
     }
+
     @Override
-    public AbstractOsReader<E> setElevationProvider(ElevationProvider eleProvider) {
-        if (eleProvider == null)
-            throw new IllegalStateException(
-                    "Use the NOOP elevation provider instead of null or don't call setElevationProvider");
+    public AbstractOsReader<E> setElevationProvider(ElevationProvider elevationProvider) {
+        if (elevationProvider == null)
+            throw new IllegalStateException("Use the NOOP elevation provider instead of null or don't call setElevationProvider");
 
-        if (!nodeAccess.is3D() && ElevationProvider.NOOP != eleProvider)
-            throw new IllegalStateException(
-                    "Make sure you graph accepts 3D data");
+        if (!nodeAccess.is3D() && ElevationProvider.NOOP != elevationProvider)
+            throw new IllegalStateException("Make sure you graph accepts 3D data");
 
-        this.eleProvider = eleProvider;
+        this.elevationProvider = elevationProvider;
         return this;
     }
 
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnReader.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnReader.java
index 509c39cfce..825f8738c1 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnReader.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnReader.java
@@ -41,7 +41,6 @@
 import com.graphhopper.util.EdgeIteratorState;
 import com.graphhopper.util.Helper;
 import com.graphhopper.util.PointList;
-import com.graphhopper.util.StopWatch;
 import com.graphhopper.util.shapes.GHPoint;
 
 /*
@@ -129,7 +128,8 @@
     // negative but increasing to avoid clash with custom created OSM files
     private long newUniqueOsmId = -Long.MAX_VALUE;
     private final boolean exitOnlyPillarNodeException = true;
-    private File routingFile;
+    private static final String PROCESS_FORMAT = "PROCESS: {}";
+    private static final String STORAGE_NODES_FORMAT = "storage nodes: {}";
 
     public OsDpnReader(GraphStorage storage) {
         super(storage);
@@ -137,45 +137,26 @@ public OsDpnReader(GraphStorage storage) {
         osmNodeIdToInternalNodeMap = new TObjectIntHashMap<String>(200, .5f, -1);
         osmNodeIdToNodeFlagsMap = new TObjectLongHashMap<String>(200, .5f, 0);
         osmWayIdToRouteWeightMap = new TObjectLongHashMap<String>(200, .5f, 0);
-        pillarInfo = new PillarInfo(nodeAccess.is3D(),
-                graphStorage.getDirectory());
+        pillarInfo = new PillarInfo(nodeAccess.is3D(), graphStorage.getDirectory());
     }
 
-    @Override
-    public void readGraph() throws IOException {
-        if (encodingManager == null)
-            throw new IllegalStateException("Encoding manager was not set.");
-
-        if (routingFile == null)
-            throw new IllegalStateException("No OS DPN file specified");
-
-        if (!routingFile.exists())
-            throw new IllegalStateException(
-                    "Your specified OS DPN file does not exist:"
-                            + routingFile.getAbsolutePath());
-
-        StopWatch sw1 = new StopWatch().start();
-        preProcess(routingFile);
-        sw1.stop();
+    public class ProcessVisitor {
+        public void process(ProcessData processData, OsDpnInputFile in) throws XMLStreamException, MismatchedDimensionException, FactoryException, TransformException {
+        }
+    }
 
-        StopWatch sw2 = new StopWatch().start();
-        writeOsm2Graph(routingFile);
-        sw2.stop();
+    public class ProcessData {
+        long wayStart = -1;
+        long relationStart = -1;
+        long counter = 1;
 
-        logger.info("time(pass1): " + (int) sw1.getSeconds() + " pass2: "
-                + (int) sw2.getSeconds() + " total:"
-                + ((int) (sw1.getSeconds() + sw2.getSeconds())));
     }
 
-    /**
-     * Preprocessing of OSM file to select nodes which are used for highways.
-     * This allows a more compact graph data structure.
-     */
     @Override
-    protected void preProcess(File osmFile) {
+    protected void preProcessSingleFile(File dpnFile) {
         OsDpnInputFile in = null;
         try {
-            in = new OsDpnInputFile(osmFile);
+            in = new OsDpnInputFile(dpnFile);
             in.setWorkerThreads(workerThreads).open();
 
             long tmpWayCounter = 1;
@@ -204,23 +185,6 @@ protected void preProcess(File osmFile) {
                         }
                     }
                 }
-                // if (item.isType(OSMElement.RELATION)) {
-                // final OSMRelation relation = (OSMRelation) item;
-                // if (!relation.isMetaRelation()
-                // && relation.hasTag("type", "route"))
-                // prepareWaysWithRelationInfo(relation);
-                //
-                // if (relation.hasTag("type", "restriction"))
-                // prepareRestrictionRelation(relation);
-                //
-                // if (++tmpRelationCounter % 50000 == 0) {
-                // logger.info(nf(tmpRelationCounter)
-                // + " (preprocess), osmWayMap:"
-                // + nf(getRelFlagsMap().size()) + " "
-                // + Helper.getMemInfo());
-                // }
-                //
-                // }
             }
         } catch (Exception ex) {
             throw new RuntimeException("Problem while parsing file", ex);
@@ -229,14 +193,6 @@ protected void preProcess(File osmFile) {
         }
     }
 
-    /*
-     * private void prepareRestrictionRelation(OSMRelation relation) {
-     * TurnRelation turnRelation = createTurnRelation(relation); if
-     * (turnRelation != null) {
-     * getOsmIdStoreRequiredSet().add(turnRelation.getOsmIdFrom());
-     * getOsmIdStoreRequiredSet().add(turnRelation.getOsmIdTo()); } }
-     */
-
     private THashSet<String> getOsmIdStoreRequiredSet() {
         return osmIdStoreRequiredSet;
     }
@@ -271,74 +227,81 @@ boolean filterWay(OsDpnWay way) {
 
     /**
      * Creates the edges and nodes files from the specified osm file.
+     * @throws TransformException
+     * @throws FactoryException
+     * @throws IOException
+     * @throws XMLStreamException
+     * @throws MismatchedDimensionException
      */
     @Override
-    protected void writeOsm2Graph(File osmFile) {
+    protected void writeOsm2Graph(File osmFile) throws MismatchedDimensionException, XMLStreamException, IOException, FactoryException, TransformException {
         int tmp = Math.max(getNodeMap().size() / 50, 100);
-        logger.info("creating graph. Found nodes (pillar+tower):"
-                + nf(getNodeMap().size()) + ", " + Helper.getMemInfo());
         graphStorage.create(tmp);
-        long wayStart = -1;
-        long relationStart = -1;
-        long counter = 1;
-        OsDpnInputFile in = null;
+        ProcessData processData = new ProcessData();
         try {
-            in = new OsDpnInputFile(osmFile);
-            in.setWorkerThreads(workerThreads).open();
-            TObjectIntMap<String> nodeFilter = getNodeMap();
-
-            RoutingElement item;
-            while ((item = in.getNext()) != null) {
-                switch (item.getType()) {
-                case OSMElement.NODE:
-                    OsDpnNode dpnNode = (OsDpnNode) item;
-                    String id = dpnNode.getId();
-                    logger.info("NODEITEMID:" + id);
-                    if (nodeFilter.get(id) != -1) {
-                        processNode(dpnNode);
-                    }
-                    break;
-
-                case OSMElement.WAY:
-                    OsDpnWay dpnWay = (OsDpnWay) item;
-                    logger.info("WAY:" + dpnWay.getId() + ":" + wayStart);
-                    if (wayStart < 0) {
-                        logger.info(nf(counter) + ", now parsing ways");
-                        wayStart = counter;
-                    }
-                    prepareWaysNodes(dpnWay, getNodeMap());
-                    processWay(dpnWay);
-                    dpnWay.clearStoredCoords();
-                    break;
-                case OSMElement.RELATION:
-                    if (relationStart < 0) {
-                        logger.info(nf(counter) + ", now parsing relations");
-                        relationStart = counter;
-                    }
-                    processRelation((Relation) item);
-                    break;
+            ProcessVisitor processVisitor = new ProcessVisitor() {
+                @Override
+                public void process(ProcessData processData, OsDpnInputFile in) throws XMLStreamException, MismatchedDimensionException, FactoryException, TransformException {
+                    logger.info("PROCESS STAGE 1");
+                    processStageOne(in);
                 }
-                if (++counter % 5000000 == 0) {
-                    logger.info(nf(counter) + ", locs:" + nf(locations) + " ("
-                            + skippedLocations + ") " + Helper.getMemInfo());
+            };
+            logger.info("PROCESS NODES");
+            writeOsm2GraphFromDirOrFile(osmFile, processData, processVisitor);
+            processVisitor = new ProcessVisitor() {
+                @Override
+                public void process(ProcessData processData, OsDpnInputFile in) throws XMLStreamException, MismatchedDimensionException, FactoryException, TransformException {
+                    logger.info("PROCESS STAGE 2");
+                    processStageTwo(processData, in);
                 }
-            }
+            };
+            logger.info("PROCESS WAY");
+            writeOsm2GraphFromDirOrFile(osmFile, processData, processVisitor);
+            processVisitor = new ProcessVisitor() {
+                @Override
+                public void process(ProcessData processData, OsDpnInputFile in) throws XMLStreamException, MismatchedDimensionException, FactoryException, TransformException {
+                    logger.info("PROCESS STAGE 3");
+                    processStageThree(processData, in);
+                }
+            };
+            logger.info("PROCESS RELATION");
+            writeOsm2GraphFromDirOrFile(osmFile, processData, processVisitor);
 
-            // logger.info("storage nodes:" + graphStorage.getNodes());
         } catch (Exception ex) {
-            System.out.println(ex.getClass());
-            // throw new RuntimeException("Couldn't process file " + osmFile,
-            // ex);
-        } finally {
-            Helper.close(in);
+            throw new RuntimeException("Couldn't process file " + osmFile, ex);
         }
 
         finishedReading();
-        if (graphStorage.getNodes() == 0)
-            throw new IllegalStateException("dpn must not be empty. read "
-                    + counter + " lines and " + locations + " locations");
+
     }
 
+    private void writeOsm2GraphFromDirOrFile(File osmFile, ProcessData processData, ProcessVisitor processVisitor) throws XMLStreamException, IOException, MismatchedDimensionException, FactoryException, TransformException {
+        if (osmFile.isDirectory()) {
+            String absolutePath = osmFile.getAbsolutePath();
+            String[] list = osmFile.list();
+            for (String file : list) {
+                File nextFile = new File(absolutePath + File.separator + file);
+                writeOsm2GraphFromDirOrFile(nextFile, processData, processVisitor);
+            }
+        } else {
+            writeOsm2GraphFromSingleFile(osmFile, processData, processVisitor);
+        }
+    }
+
+    private void writeOsm2GraphFromSingleFile(File osmFile, ProcessData processData, ProcessVisitor processVisitor) throws XMLStreamException, IOException, MismatchedDimensionException, FactoryException, TransformException {
+        OsDpnInputFile in = null;
+        try {
+            logger.info(PROCESS_FORMAT, osmFile.getName());
+            in = new OsDpnInputFile(osmFile);
+            in.setWorkerThreads(workerThreads).open();
+            processVisitor.process(processData, in);
+            logger.info(STORAGE_NODES_FORMAT, graphStorage.getNodes());
+        } finally {
+            Helper.close(in);
+        }
+    }
+
+
     private List<OsDpnNode> prepareWaysNodes(RoutingElement item, TObjectIntMap<String> nodeFilter) throws MismatchedDimensionException, FactoryException, TransformException {
         List<OsDpnNode> evaluateWayNodes = ((OsDpnWay) item).evaluateWayNodes(null);
         for (OsDpnNode osdpnNode : evaluateWayNodes) {
@@ -567,12 +530,12 @@ boolean addNode(OsDpnNode node) {
     }
 
     private double getElevation(Node node) {
-        if(null==eleProvider)
+        if(null==elevationProvider)
         {
             String eleString = node.getTag("ele");
             return Double.valueOf(eleString);
         }
-        return eleProvider.getEle(node.getLat(), node.getLon());
+        return elevationProvider.getEle(node.getLat(), node.getLon());
     }
 
     /*
@@ -816,9 +779,9 @@ private int handlePillarNode(int tmpNode, String osmId,
     protected void finishedReading() {
         printInfo("way");
         pillarInfo.clear();
-        eleProvider.release();
-        osmNodeIdToInternalNodeMap = null;
-        osmNodeIdToNodeFlagsMap = null;
+        elevationProvider.release();
+        // osmNodeIdToInternalNodeMap = null;
+        // osmNodeIdToNodeFlagsMap = null;
         osmWayIdToRouteWeightMap = null;
         osmIdStoreRequiredSet = null;
         edgeIdToOsmIdMap = null;
@@ -917,11 +880,6 @@ boolean isInBounds(Node node) {
         return osmWayIdToRouteWeightMap;
     }
 
-    @Override
-    public OsDpnReader setOSMFile(File osmFile) {
-        this.routingFile = osmFile;
-        return this;
-    }
 
     private void printInfo(String str) {
         LoggerFactory.getLogger(getClass()).info(
@@ -932,4 +890,53 @@ private void printInfo(String str) {
                         + ", relFlagsMap.size:" + getRelFlagsMap().size() + " "
                         + Helper.getMemInfo());
     }
+
+    private void processStageOne(OsDpnInputFile in) throws XMLStreamException, MismatchedDimensionException, FactoryException, TransformException {
+        RoutingElement item;
+        while ((item = in.getNext()) != null) {
+            switch (item.getType()) {
+            case OSMElement.NODE:
+                OsDpnNode dpnNode = (OsDpnNode) item;
+                String id = dpnNode.getId();
+                logger.info("NODEITEMID:" + id);
+                if (getNodeMap().get(id) != -1) {
+                    processNode(dpnNode);
+                }
+            }
+        }
+    }
+
+    private void processStageTwo(ProcessData processData, OsDpnInputFile in) throws XMLStreamException, MismatchedDimensionException, FactoryException, TransformException {
+        RoutingElement item;
+        while ((item = in.getNext()) != null) {
+            switch (item.getType()) {
+            case OSMElement.WAY:
+            OsDpnWay dpnWay = (OsDpnWay) item;
+            logger.info("WAY:" + dpnWay.getId() + ":" + processData.wayStart);
+            if (processData.wayStart < 0) {
+                logger.info(nf(processData.counter) + ", now parsing ways");
+                processData.wayStart = processData.counter;
+            }
+            prepareWaysNodes(dpnWay, getNodeMap());
+            processWay(dpnWay);
+            dpnWay.clearStoredCoords();
+        }}
+    }
+
+    private void processStageThree(ProcessData processData, OsDpnInputFile in) throws XMLStreamException, MismatchedDimensionException, FactoryException, TransformException {
+        RoutingElement item;
+        if (processData.relationStart < 0) {
+            logger.info(nf(processData.counter) + ", now parsing relations");
+            processData.relationStart = processData.counter;
+        }
+        while ((item = in.getNext()) != null) {
+            switch (item.getType()) {
+            case OSMElement.RELATION:
+                processRelation((Relation) item);
+                if (++processData.counter % 5000000 == 0) {
+                    logger.info(nf(processData.counter) + ", locs:" + nf(locations) + " (" + skippedLocations + ") " + Helper.getMemInfo());
+                }
+            }
+        }
+    }
 }
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/hn/OsHnReader.java b/core/src/main/java/com/graphhopper/reader/osgb/hn/OsHnReader.java
index 39cac91a80..4cad675955 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/hn/OsHnReader.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/hn/OsHnReader.java
@@ -1,6 +1,5 @@
 package com.graphhopper.reader.osgb.hn;
 
-
 import gnu.trove.map.TLongObjectMap;
 
 import java.io.File;
@@ -21,14 +20,14 @@
 
 public class OsHnReader extends AbstractOsReader<Long> {
 
-
-    private static final Logger logger = LoggerFactory.getLogger(OsHnReader.class.getName());
+    private static final Logger logger = LoggerFactory.getLogger(OsHnReader.class);
 
     private TLongObjectMap<String> edgeEnvironmentMap;
 
     public OsHnReader(GraphStorage storage) {
         this(storage, null);
     }
+
     public OsHnReader(GraphStorage storage, TLongObjectMap<String> edgeEnvironmentMap) {
         super(storage);
         this.edgeEnvironmentMap = edgeEnvironmentMap;
@@ -46,37 +45,11 @@ public Long getOsmIdOfInternalEdge(int edge) {
         return null;
     }
 
-    @Override
-    protected void preProcess(File itnFile) {
-        try {
-            preProcessDirOrFile(itnFile);
-        } catch (Exception ex) {
-            throw new RuntimeException("Problem while parsing file", ex);
-        }
-    }
-
-    private void preProcessDirOrFile(File osmFile) throws XMLStreamException,
-    IOException, MismatchedDimensionException, FactoryException,
-    TransformException {
-        if (osmFile.isDirectory()) {
-            String absolutePath = osmFile.getAbsolutePath();
-            String[] list = osmFile.list();
-            for (String file : list) {
-                File nextFile = new File(absolutePath + File.separator + file);
-                preProcessDirOrFile(nextFile);
-            }
-        } else {
-            preProcessSingleFile(osmFile);
-        }
-    }
-
-    private void preProcessSingleFile(File osmFile) throws XMLStreamException,
-    IOException, MismatchedDimensionException, FactoryException,
-    TransformException {
+    protected void preProcessSingleFile(File hnFile) throws XMLStreamException, IOException, MismatchedDimensionException, FactoryException, TransformException {
         OsHnInputFile in = null;
         try {
-            logger.error(PREPROCESS_FORMAT, osmFile.getName());
-            in = new OsHnInputFile(osmFile);
+            logger.error(PREPROCESS_FORMAT, hnFile.getName());
+            in = new OsHnInputFile(hnFile);
             in.setWorkerThreads(workerThreads).open();
             preProcessSingleFile(in);
         } finally {
@@ -90,25 +63,24 @@ protected void writeOsm2Graph(File osmFile) {
 
     }
 
-    private void preProcessSingleFile(OsHnInputFile in)
-            throws XMLStreamException, MismatchedDimensionException,
-            FactoryException, TransformException {
+    protected void preProcessSingleFile(OsHnInputFile in) throws XMLStreamException, MismatchedDimensionException, FactoryException, TransformException {
         logger.error("==== preProcessSingleFile");
         RoutingElement item;
         while ((item = in.getNext()) != null) {
-            // Look for this road (or is a road link) in the itn data and add additional tags based on environment
-            if (edgeEnvironmentMap!=null) {
-                // No instanceof check required yet as only OsHnRoadLink are returned
-                //if (item instanceof OsHnRoadLink) {
-                OsHnRoadLink osHnRoadLink = (OsHnRoadLink)item;
+            // Look for this road (or is a road link) in the itn data and add
+            // additional tags based on environment
+            if (edgeEnvironmentMap != null) {
+                // No instanceof check required yet as only OsHnRoadLink are
+                // returned
+                // if (item instanceof OsHnRoadLink) {
+                OsHnRoadLink osHnRoadLink = (OsHnRoadLink) item;
                 String environment = osHnRoadLink.getEnvironment();
                 long id = osHnRoadLink.getId();
                 edgeEnvironmentMap.put(id, environment);
-                //}
+                // }
             }
         }
         System.out.println("=====================> We have found environments for " + edgeEnvironmentMap.size() + " ways");
     }
 
-
 }
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnReader.java b/core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnReader.java
index cc44f6e921..e8045adaa2 100755
--- a/core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnReader.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnReader.java
@@ -255,37 +255,12 @@ public OsItnReader(GraphStorage storage, CmdArgs commandLineArguments) {
         pillarInfo = new PillarInfo(nodeAccess.is3D(), graphStorage.getDirectory());
     }
 
-    /**
-     * Preprocessing of ITN file to select nodes which are used for highways.
-     * This allows a more compact graph data structure.
-     */
-    @Override
-    protected void preProcess(File itnFile) {
-        try {
-            preProcessDirOrFile(itnFile);
-        } catch (Exception ex) {
-            throw new RuntimeException("Problem while parsing file", ex);
-        }
-    }
-
-    private void preProcessDirOrFile(File osmFile) throws XMLStreamException, IOException, MismatchedDimensionException, FactoryException, TransformException {
-        if (osmFile.isDirectory()) {
-            String absolutePath = osmFile.getAbsolutePath();
-            String[] list = osmFile.list();
-            for (String file : list) {
-                File nextFile = new File(absolutePath + File.separator + file);
-                preProcessDirOrFile(nextFile);
-            }
-        } else {
-            preProcessSingleFile(osmFile);
-        }
-    }
 
-    private void preProcessSingleFile(File osmFile) throws XMLStreamException, IOException, MismatchedDimensionException, FactoryException, TransformException {
+    protected void preProcessSingleFile(File itnFile) throws XMLStreamException, IOException, MismatchedDimensionException, FactoryException, TransformException {
         OsItnInputFile in = null;
         try {
-            logger.error(PREPROCESS_FORMAT, osmFile.getName());
-            in = new OsItnInputFile(osmFile);
+            logger.error(PREPROCESS_FORMAT, itnFile.getName());
+            in = new OsItnInputFile(itnFile);
             in.setWorkerThreads(workerThreads).open();
             preProcessSingleFile(in);
         } finally {
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/AbstractOsDpnReaderTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/AbstractOsDpnReaderTest.java
index 60bc185a94..6b94b53417 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/AbstractOsDpnReaderTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/AbstractOsDpnReaderTest.java
@@ -37,13 +37,13 @@
 
 public abstract class AbstractOsDpnReaderTest {
 
-	protected EncodingManager encodingManager;
+    protected EncodingManager encodingManager;
     protected EdgeFilter footOutEdges;
     protected EdgeFilter footInEdges;
     protected boolean turnCosts = false;
     protected BikeFlagEncoder bikeEncoder;
     protected FootFlagEncoder footEncoder;
-	protected EdgeExplorer footExplorer;
+    protected EdgeExplorer footExplorer;
 
     // RoadNode 880
     protected static double node0Lat = 50.6992070044d;
@@ -83,14 +83,14 @@ public void initEncoding() {
      * @return
      */
     protected EncodingManager createEncodingManager() {
-    	List<FlagEncoder> list = new ArrayList<FlagEncoder>();
-    	list.add(footEncoder);
-    	list.add(bikeEncoder);
+        List<FlagEncoder> list = new ArrayList<FlagEncoder>();
+        list.add(footEncoder);
+        list.add(bikeEncoder);
         return new EncodingManager(list, 8);
     }
 
     /**
-     * 
+     *
      * @param graph
      * @param file
      * @param maxWayPointDistance 0 disables DouglasPeuker simplification 1 = default
@@ -162,7 +162,7 @@ protected void printNodes(EdgeExplorer outExplorer, int numNodes) {
             }
         }
     }
-    
+
     protected InstructionList route(GraphHopper graphHopper, double lat1, double lon1, double lat2, double lon2, String avoid) {
         GHPoint start = new GHPoint(lat1, lon1);
         GHPoint end = new GHPoint(lat2, lon2);
@@ -170,8 +170,8 @@ protected InstructionList route(GraphHopper graphHopper, double lat1, double lon
         GHRequest ghRequest = new GHRequest(start, end);
         ghRequest.setVehicle("foot");
         if(null!=avoid  && !Helper.isEmpty(avoid)) {
-        	ghRequest.setWeighting("fastavoid");
-        	ghRequest.getHints().put("avoidances", avoid);
+            ghRequest.setWeighting("fastavoid");
+            ghRequest.getHints().put("avoidances", avoid);
         }
         GHResponse ghResponse = graphHopper.route(ghRequest);
         //        System.err.println("ghResponse.getPoints() " + ghResponse.getPoints());
@@ -179,7 +179,7 @@ protected InstructionList route(GraphHopper graphHopper, double lat1, double lon
         //        outputInstructionList(instructionList);
         return instructionList;
     }
-    
+
     protected void outputInstructionList(InstructionList instructionList) {
         //        System.err.println("ghResponse.getInstructions() " + ghResponse.getInstructions());
         //        System.err.println("ghResponse.getDebugInfo() " + ghResponse.getDebugInfo());
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/OsDpnReaderTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/OsDpnReaderTest.java
index 83bb1765be..2973e0bcc2 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/OsDpnReaderTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/OsDpnReaderTest.java
@@ -13,19 +13,66 @@
 import com.graphhopper.routing.util.DefaultEdgeFilter;
 import com.graphhopper.routing.util.EdgeFilter;
 import com.graphhopper.storage.GraphHopperStorage;
+import com.graphhopper.storage.GraphStorage;
 import com.graphhopper.util.EdgeIterator;
 import com.graphhopper.util.GHUtility;
 
 public class OsDpnReaderTest extends AbstractOsDpnReaderTest
 {
-    private GraphHopperStorage graph;
+    private GraphStorage graphStorage;
 
     @Test
     public void testReadDpnSampleLayout() throws IOException
     {
         configure(0);
 
-        assertEquals(5, graph.getNodes());
+        assertEquals(5, graphStorage.getNodes());
+
+        assertEquals(4, count(footExplorer.setBaseNode(0))); // Central Tower
+        assertEquals(1, count(footExplorer.setBaseNode(1))); // Cross Road Vertex
+        assertEquals(1, count(footExplorer.setBaseNode(2))); // Cross Road Vertex
+        assertEquals(1, count(footExplorer.setBaseNode(3))); // Cross Road Vertex
+        assertEquals(1, count(footExplorer.setBaseNode(4))); // Cross Road Vertex
+
+        // Assert that this is true
+        EdgeIterator iter = footExplorer.setBaseNode(0);
+        assertTrue(iter.next());
+        assertEquals(4, iter.getAdjNode());
+        assertTrue(iter.next());
+        assertEquals(3, iter.getAdjNode());
+        assertTrue(iter.next());
+        assertEquals(2, iter.getAdjNode());
+        assertTrue(iter.next());
+        assertEquals(1, iter.getAdjNode());
+        assertFalse(iter.next());
+
+        iter = footExplorer.setBaseNode(1);
+        assertTrue(iter.next());
+        assertEquals(0, iter.getAdjNode());
+        assertFalse(iter.next());
+
+        iter = footExplorer.setBaseNode(2);
+        assertTrue(iter.next());
+        assertEquals(0, iter.getAdjNode());
+        assertFalse(iter.next());
+
+        iter = footExplorer.setBaseNode(3);
+        assertTrue(iter.next());
+        assertEquals(0, iter.getAdjNode());
+        assertFalse(iter.next());
+
+        iter = footExplorer.setBaseNode(4);
+        assertTrue(iter.next());
+        assertEquals(0, iter.getAdjNode());
+        assertFalse(iter.next());
+    }
+
+    @Test
+    public void testDirectoryIngestion() throws IOException
+    {
+        configure(0, "directory_ingestion");
+
+        assertEquals(5, graphStorage.getNodes());
 
         assertEquals(4, count(footExplorer.setBaseNode(0))); // Central Tower
         assertEquals(1, count(footExplorer.setBaseNode(1))); // Cross Road Vertex
@@ -152,26 +199,37 @@ public void testReadDpnWayGeometryWithSimplifiedWayGeometry() throws IOException
      * @throws IOException
      */
     private void configure(int maxWayPointDistance) throws IOException {
-        graph = readGraph(maxWayPointDistance);
-        GHUtility.printInfo(graph, 0, 30, EdgeFilter.ALL_EDGES);
-        configureExplorer(graph);
+        graphStorage = readGraph(maxWayPointDistance);
+        GHUtility.printInfo(graphStorage, 0, 30, EdgeFilter.ALL_EDGES);
+        configureExplorer(graphStorage);
+    }
+
+    private void configure(int maxWayPointDistance, String filename) throws IOException {
+        graphStorage = readGraph(maxWayPointDistance, filename);
+        GHUtility.printInfo(graphStorage, 0, 30, EdgeFilter.ALL_EDGES);
+        configureExplorer(graphStorage);
+    }
+
+    private void configureExplorer(final GraphStorage graphStorage)
+    {
+        footExplorer = graphStorage.createEdgeExplorer(new DefaultEdgeFilter(footEncoder, true, true));
     }
 
-    private void configureExplorer(final GraphHopperStorage graph)
+    private GraphStorage readGraph(int maxWayPointDistance) throws IOException
     {
-        footExplorer = graph.createEdgeExplorer(new DefaultEdgeFilter(footEncoder, true, true));
+        return readGraph(maxWayPointDistance, "os-dpn-sample.xml");
     }
 
-    private GraphHopperStorage readGraph(int maxWayPointDistance) throws IOException
+    private GraphStorage readGraph(int maxWayPointDistance, String filename) throws IOException
     {
         final boolean turnRestrictionsImport = false;
         final boolean is3D = false;
-        final GraphHopperStorage graph = configureStorage(turnRestrictionsImport, is3D);
+        final GraphHopperStorage graphStorage = configureStorage(turnRestrictionsImport, is3D);
 
         final File file = new File(
-                "./src/test/resources/com/graphhopper/reader/osgb/dpn/os-dpn-sample.xml");
-        readGraphFile(graph, file, maxWayPointDistance);
-        return graph;
+                "./src/test/resources/com/graphhopper/reader/osgb/dpn/" + filename);
+        readGraphFile(graphStorage, file, maxWayPointDistance);
+        return graphStorage;
     }
 
 }
diff --git a/core/src/test/resources/com/graphhopper/reader/osgb/dpn/directory_ingestion/os-dpn-sample1.xml b/core/src/test/resources/com/graphhopper/reader/osgb/dpn/directory_ingestion/os-dpn-sample1.xml
new file mode 100644
index 0000000000..a11dca23af
--- /dev/null
+++ b/core/src/test/resources/com/graphhopper/reader/osgb/dpn/directory_ingestion/os-dpn-sample1.xml
@@ -0,0 +1,109 @@
+<?xml version="1.0" encoding="UTF-8"?><gml:FeatureCollection xmlns:gml="http://www.opengis.net/gml/3.2" xsi:schemaLocation="http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd" gml:id="DPN" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:dpn="http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0" xmlns:gmd="http://www.isotc211.org/2005/gmd" xmlns:gco="http://www.isotc211.org/2005/gco" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:gss="http://www.isotc211.org/2005/gss" xmlns:gts="http://www.isotc211.org/2005/gts" xmlns:gsr="http://www.isotc211.org/2005/gsr" xmlns:gmlxbt="http://www.opengis.net/gml/3.3/xbt">
+  <gml:featureMember>
+    <dpn:RouteNode gml:id="osgbdf162dd8-c284-469b-81d6-d63105a39c7f">
+      <dpn:featureID>df162dd8-c284-469b-81d6-d63105a39c7f</dpn:featureID>
+      <dpn:versionID>1</dpn:versionID>
+      <dpn:versionDate>2014-12-12</dpn:versionDate>
+      <dpn:descriptiveGroup codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>
+      <dpn:descriptiveTerm codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/RouteNodeDescriptiveTermValue#Pseudo">Pseudo</dpn:descriptiveTerm>
+      <dpn:geometry>
+        <gml:Point srsName="urn:ogc:def:crs:EPSG::7405" gml:id="LOCAL_ID_0">
+          <gml:pos>427974.346 380503.251 362.62</gml:pos>
+        </gml:Point>
+      </dpn:geometry>
+    </dpn:RouteNode>
+  </gml:featureMember>
+  <gml:featureMember>
+    <dpn:RouteNode gml:id="osgb2357d994-6688-44b1-8769-6466ffdd69dd">
+      <dpn:featureID>2357d994-6688-44b1-8769-6466ffdd69dd</dpn:featureID>
+      <dpn:versionID>1</dpn:versionID>
+      <dpn:versionDate>2014-12-12</dpn:versionDate>
+      <dpn:descriptiveGroup codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>
+      <dpn:descriptiveTerm codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/RouteNodeDescriptiveTermValue#Junction">Junction</dpn:descriptiveTerm>
+      <dpn:geometry>
+        <gml:Point srsName="urn:ogc:def:crs:EPSG::7405" gml:id="LOCAL_ID_1">
+          <gml:pos>427006.894 380515.857000001 370.2</gml:pos>
+        </gml:Point>
+      </dpn:geometry>
+    </dpn:RouteNode>
+  </gml:featureMember>
+  <gml:featureMember>
+    <dpn:RouteNode gml:id="osgba1d8f9ca-33f8-4875-bd61-fa9097c44e4c">
+      <dpn:featureID>a1d8f9ca-33f8-4875-bd61-fa9097c44e4c</dpn:featureID>
+      <dpn:versionID>1</dpn:versionID>
+      <dpn:versionDate>2014-12-12</dpn:versionDate>
+      <dpn:descriptiveGroup codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>
+      <dpn:descriptiveTerm codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/RouteNodeDescriptiveTermValue#Junction">Junction</dpn:descriptiveTerm>
+      <dpn:geometry>
+        <gml:Point srsName="urn:ogc:def:crs:EPSG::7405" gml:id="LOCAL_ID_2">
+          <gml:pos>427587.116 380549.403999999 382.11</gml:pos>
+        </gml:Point>
+      </dpn:geometry>
+    </dpn:RouteNode>
+  </gml:featureMember>
+  <gml:featureMember>
+    <dpn:RouteLink gml:id="osgb016c1a07-6bfa-4e52-91f2-d894a6873313">
+      <dpn:featureID>016c1a07-6bfa-4e52-91f2-d894a6873313</dpn:featureID>
+      <dpn:versionID>1</dpn:versionID>
+      <dpn:versionDate>2014-12-12</dpn:versionDate>
+      <dpn:startNode xlink:href="#a1d8f9ca-33f8-4875-bd61-fa9097c44e4c"/>
+      <dpn:endNode xlink:href="#56dc4c0b-0586-4849-b3e2-1e00ee149429"/>
+      <dpn:descriptiveGroup codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>
+      <dpn:descriptiveTerm codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#NoPhysicalManifestation">No Physical Manifestation</dpn:descriptiveTerm>
+      <dpn:surfaceType codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#Unmade">Unmade</dpn:surfaceType>
+      <dpn:physicalLevel codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#SurfaceLevel">Surface Level</dpn:physicalLevel>
+      <dpn:rightOfUse codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/RightOfWayValue#Bridleway">Bridleway</dpn:rightOfUse>
+      <dpn:adoptedByNationalCycleRoute>false</dpn:adoptedByNationalCycleRoute>
+      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>
+      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>
+      <dpn:withinAccessLand>true</dpn:withinAccessLand>
+      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>
+      <dpn:verticalGain>
+        <dpn:VerticalGainType>
+          <dpn:inDirection uom="m">9</dpn:inDirection>
+          <dpn:againstDirection uom="m">0</dpn:againstDirection>
+        </dpn:VerticalGainType>
+      </dpn:verticalGain>
+      <dpn:planimetricLength uom="m">87</dpn:planimetricLength>
+      <dpn:surfaceLength uom="m">88</dpn:surfaceLength>
+      <dpn:geometry>
+        <gml:LineString srsName="urn:ogc:def:crs:EPSG::7405" gml:id="LOCAL_ID_29521">
+          <gml:posList srsDimension="3" count="3">428671.969 379945.721000001 319.83 428657.598 379936.514 321.96 428599.756 379896.501 328.75</gml:posList>
+        </gml:LineString>
+      </dpn:geometry>
+    </dpn:RouteLink>
+  </gml:featureMember>
+  <gml:featureMember>
+    <dpn:RouteLink gml:id="osgbcc33c9f4-ff8e-41fb-86b3-3fd9daa8a6e0">
+      <dpn:featureID>cc33c9f4-ff8e-41fb-86b3-3fd9daa8a6e0</dpn:featureID>
+      <dpn:versionID>1</dpn:versionID>
+      <dpn:versionDate>2014-12-12</dpn:versionDate>
+      <dpn:startNode xlink:href="#39e9eba8-4500-44cb-88c8-4f450bf7da14"/>
+      <dpn:endNode xlink:href="#56dc4c0b-0586-4849-b3e2-1e00ee149429"/>
+      <dpn:descriptiveGroup codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>
+      <dpn:descriptiveTerm codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#Alley">Alley</dpn:descriptiveTerm>
+      <dpn:surfaceType codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#Unmade">Unmade</dpn:surfaceType>
+      <dpn:physicalLevel codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#SurfaceLevel">Surface Level</dpn:physicalLevel>
+      <dpn:rightOfUse codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/RightOfWayValue#Bridleway">Bridleway</dpn:rightOfUse>
+      <dpn:adoptedByNationalCycleRoute>false</dpn:adoptedByNationalCycleRoute>
+      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>
+      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>
+      <dpn:withinAccessLand>true</dpn:withinAccessLand>
+      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>
+      <dpn:potentialHazardCrossed>Boulders</dpn:potentialHazardCrossed>
+      <dpn:verticalGain>
+        <dpn:VerticalGainType>
+          <dpn:inDirection uom="m">7</dpn:inDirection>
+          <dpn:againstDirection uom="m">0</dpn:againstDirection>
+        </dpn:VerticalGainType>
+      </dpn:verticalGain>
+      <dpn:planimetricLength uom="m">61</dpn:planimetricLength>
+      <dpn:surfaceLength uom="m">62</dpn:surfaceLength>
+      <dpn:geometry>
+        <gml:LineString srsName="urn:ogc:def:crs:EPSG::7405" gml:id="LOCAL_ID_29522">
+          <gml:posList srsDimension="3" count="3">428725.224 379975.602 312.5 428698.988 379962.476 316.06 428671.969 379945.721000001 319.83</gml:posList>
+        </gml:LineString>
+      </dpn:geometry>
+    </dpn:RouteLink>
+  </gml:featureMember>
+</gml:FeatureCollection>
diff --git a/core/src/test/resources/com/graphhopper/reader/osgb/dpn/directory_ingestion/os-dpn-sample2.xml b/core/src/test/resources/com/graphhopper/reader/osgb/dpn/directory_ingestion/os-dpn-sample2.xml
new file mode 100644
index 0000000000..e7ba68d588
--- /dev/null
+++ b/core/src/test/resources/com/graphhopper/reader/osgb/dpn/directory_ingestion/os-dpn-sample2.xml
@@ -0,0 +1,97 @@
+<?xml version="1.0" encoding="UTF-8"?><gml:FeatureCollection xmlns:gml="http://www.opengis.net/gml/3.2" xsi:schemaLocation="http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd" gml:id="DPN" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xs="http://www.w3.org/2001/XMLSchema" xmlns:dpn="http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0" xmlns:gmd="http://www.isotc211.org/2005/gmd" xmlns:gco="http://www.isotc211.org/2005/gco" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:gss="http://www.isotc211.org/2005/gss" xmlns:gts="http://www.isotc211.org/2005/gts" xmlns:gsr="http://www.isotc211.org/2005/gsr" xmlns:gmlxbt="http://www.opengis.net/gml/3.3/xbt">
+  <gml:featureMember>
+    <dpn:RouteNode gml:id="osgb39e9eba8-4500-44cb-88c8-4f450bf7da14">
+      <dpn:featureID>39e9eba8-4500-44cb-88c8-4f450bf7da14</dpn:featureID>
+      <dpn:versionID>1</dpn:versionID>
+      <dpn:versionDate>2014-12-12</dpn:versionDate>
+      <dpn:descriptiveGroup codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>
+      <dpn:descriptiveTerm codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/RouteNodeDescriptiveTermValue#Junction">Junction</dpn:descriptiveTerm>
+      <dpn:geometry>
+        <gml:Point srsName="urn:ogc:def:crs:EPSG::7405" gml:id="LOCAL_ID_3">
+          <gml:pos>427759.043 380573.641000001 375.8</gml:pos>
+        </gml:Point>
+      </dpn:geometry>
+    </dpn:RouteNode>
+  </gml:featureMember>
+  <gml:featureMember>
+    <dpn:RouteNode gml:id="osgb56dc4c0b-0586-4849-b3e2-1e00ee149429">
+      <dpn:featureID>56dc4c0b-0586-4849-b3e2-1e00ee149429</dpn:featureID>
+      <dpn:versionID>1</dpn:versionID>
+      <dpn:versionDate>2014-12-12</dpn:versionDate>
+      <dpn:descriptiveGroup codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>
+      <dpn:descriptiveTerm codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/RouteNodeDescriptiveTermValue#Junction">Junction</dpn:descriptiveTerm>
+      <dpn:geometry>
+        <gml:Point srsName="urn:ogc:def:crs:EPSG::7405" gml:id="LOCAL_ID_4">
+          <gml:pos>427272.14 380580.807 379.03</gml:pos>
+        </gml:Point>
+      </dpn:geometry>
+    </dpn:RouteNode>
+  </gml:featureMember>
+  <gml:featureMember>
+    <dpn:RouteLink gml:id="osgb35cff694-c2a8-461e-9540-730e3ae11a7a">
+      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>
+      <dpn:versionID>1</dpn:versionID>
+      <dpn:versionDate>2014-12-12</dpn:versionDate>
+      <dpn:startNode xlink:href="#df162dd8-c284-469b-81d6-d63105a39c7f"/>
+      <dpn:endNode xlink:href="#56dc4c0b-0586-4849-b3e2-1e00ee149429"/>
+      <dpn:descriptiveGroup codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>
+      <dpn:descriptiveTerm codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#NoPhysicalManifestation">No Physical Manifestation</dpn:descriptiveTerm>
+      <dpn:surfaceType codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#Unmade">Unmade</dpn:surfaceType>
+      <dpn:physicalLevel codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#BelowSurfaceLevelTunnel">Below Surface Level Tunnel</dpn:physicalLevel>
+      <dpn:name>Named Road</dpn:name>
+        <dpn:rightOfUse codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/RightOfWayValue#Footpath">Footpath</dpn:rightOfUse>
+      <dpn:adoptedByNationalCycleRoute>false</dpn:adoptedByNationalCycleRoute>
+      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>
+      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>
+      <dpn:withinAccessLand>true</dpn:withinAccessLand>
+      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>
+      <dpn:verticalGain>
+        <dpn:VerticalGainType>
+          <dpn:inDirection uom="m">9</dpn:inDirection>
+          <dpn:againstDirection uom="m">2</dpn:againstDirection>
+        </dpn:VerticalGainType>
+      </dpn:verticalGain>
+      <dpn:planimetricLength uom="m">85</dpn:planimetricLength>
+      <dpn:surfaceLength uom="m">86</dpn:surfaceLength>
+      <dpn:geometry>
+        <gml:LineString srsName="urn:ogc:def:crs:EPSG::7405" gml:id="LOCAL_ID_29519">
+          <gml:posList srsDimension="3" count="10">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>
+        </gml:LineString>
+      </dpn:geometry>
+    </dpn:RouteLink>
+  </gml:featureMember>
+  <gml:featureMember>
+    <dpn:RouteLink gml:id="osgb34dd4b18-ade0-48ea-9a34-e567107bd061">
+      <dpn:featureID>34dd4b18-ade0-48ea-9a34-e567107bd061</dpn:featureID>
+      <dpn:versionID>1</dpn:versionID>
+      <dpn:versionDate>2014-12-12</dpn:versionDate>
+      <dpn:startNode xlink:href="#2357d994-6688-44b1-8769-6466ffdd69dd"/>
+      <dpn:endNode xlink:href="#56dc4c0b-0586-4849-b3e2-1e00ee149429"/>
+      <dpn:descriptiveGroup codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>
+      <dpn:descriptiveTerm codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#Cableway">Cableway</dpn:descriptiveTerm>
+      <dpn:surfaceType codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#"/>
+      <dpn:physicalLevel codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#SurfaceLevel">Surface Level</dpn:physicalLevel>
+      <dpn:name>Named Road Two</dpn:name>
+      <dpn:alternativeName>With Alternate</dpn:alternativeName>
+      <dpn:rightOfUse codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/RightOfWayValue#Footpath">Footpath</dpn:rightOfUse>
+      <dpn:adoptedByNationalCycleRoute>false</dpn:adoptedByNationalCycleRoute>
+      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>
+      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>
+      <dpn:withinAccessLand>true</dpn:withinAccessLand>
+      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>
+      <dpn:verticalGain>
+        <dpn:VerticalGainType>
+          <dpn:inDirection uom="m">0</dpn:inDirection>
+          <dpn:againstDirection uom="m">13</dpn:againstDirection>
+        </dpn:VerticalGainType>
+      </dpn:verticalGain>
+      <dpn:planimetricLength uom="m">146</dpn:planimetricLength>
+      <dpn:surfaceLength uom="m">146</dpn:surfaceLength>
+      <dpn:geometry>
+        <gml:LineString srsName="urn:ogc:def:crs:EPSG::7405" gml:id="LOCAL_ID_29520">
+          <gml:posList srsDimension="3" count="7">428599.756 379896.501 328.75 428601.06 379899.210999999 328.64 428607.078 379918.685000001 328.36 428614.969 379924.207 327.59 428645.017 379945.234999999 323.68 428705.048 379981.904999999 315.9 428709.584 379985.062999999 315.34</gml:posList>
+        </gml:LineString>
+      </dpn:geometry>
+    </dpn:RouteLink>
+  </gml:featureMember>
+</gml:FeatureCollection>
