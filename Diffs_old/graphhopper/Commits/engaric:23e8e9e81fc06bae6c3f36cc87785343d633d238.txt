diff --git a/core/src/main/java/com/graphhopper/util/Instruction.java b/core/src/main/java/com/graphhopper/util/Instruction.java
index ab9bb92d6d..feef36b489 100644
--- a/core/src/main/java/com/graphhopper/util/Instruction.java
+++ b/core/src/main/java/com/graphhopper/util/Instruction.java
@@ -18,7 +18,6 @@
 package com.graphhopper.util;
 
 import java.util.Collections;
-import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
 
@@ -38,6 +37,7 @@
     public static final int REACHED_VIA = 5;
     public static final int USE_ROUNDABOUT = 6;
 
+    protected boolean rawName;
     protected int sign;
     protected String name;
     protected double distance;
@@ -49,7 +49,7 @@
      * The points, distances and times have exactly the same count. The last point of this
      * instruction is not duplicated here and should be in the next one.
      */
-    public Instruction( int sign, String name, InstructionAnnotation ia, PointList pl)
+    public Instruction( int sign, String name, InstructionAnnotation ia, PointList pl )
     {
         this.sign = sign;
         this.name = name;
@@ -57,6 +57,15 @@ public Instruction( int sign, String name, InstructionAnnotation ia, PointList p
         this.annotation = ia;
     }
 
+    /**
+     * This method does not perform translation or combination with the sign - it just uses the
+     * provided name as instruction.
+     */
+    public void setUseRawName()
+    {
+        rawName = true;
+    }
+
     public InstructionAnnotation getAnnotation()
     {
         return annotation;
@@ -75,17 +84,17 @@ public String getName()
         return name;
     }
 
-    public void setName(String name)
+    public void setName( String name )
     {
         this.name = name;
     }
 
-    public Map<String,Object> getExtraInfoJSON()
+    public Map<String, Object> getExtraInfoJSON()
     {
         return Collections.<String, Object>emptyMap();
     }
 
-    public void setExtraInfo(String key, Object value)
+    public void setExtraInfo( String key, Object value )
     {
         throw new IllegalArgumentException("Key" + key + " is not a valid option");
     }
@@ -210,8 +219,9 @@ String calcDirection( Instruction nextI )
     }
 
     /**
-     * Return the azimuth in degree based on the first tracksegment of the instruction. If
-     * Instruction does not contain enough coordinate points, an empty string will be returned.
+     * Return the azimuth in degree based on the first tracksegment of this instruction. If this
+     * instruction contains less than 2 points then NaN will be returned or the specified
+     * instruction will be used if that is the finish instruction.
      */
     public double calcAzimuth( Instruction nextI )
     {
@@ -244,16 +254,13 @@ void checkOne()
 
     public String getTurnDescription( Translation tr )
     {
+        if (rawName)
+            return getName();
+
         String str;
         String streetName = getName();
         int indi = getSign();
-        if (indi == Instruction.FINISH)
-        {
-            str = tr.tr("finish");
-        } else if (indi == Instruction.REACHED_VIA)
-        {
-            str = tr.tr("stopover", ((FinishInstruction) this).getViaPosition());
-        } else if (indi == Instruction.CONTINUE_ON_STREET)
+        if (indi == Instruction.CONTINUE_ON_STREET)
         {
             str = Helper.isEmpty(streetName) ? tr.tr("continue") : tr.tr("continue_onto", streetName);
         } else
diff --git a/core/src/main/java/com/graphhopper/util/PathMerger.java b/core/src/main/java/com/graphhopper/util/PathMerger.java
index a8c8288634..2aa1237ab1 100644
--- a/core/src/main/java/com/graphhopper/util/PathMerger.java
+++ b/core/src/main/java/com/graphhopper/util/PathMerger.java
@@ -81,8 +81,9 @@ public void doWork( GHResponse rsp, List<Path> paths, Translation tr )
                     // if not yet reached finish replace with 'reached via'
                     if (pathIndex + 1 < paths.size())
                     {
-                        FinishInstruction fi = (FinishInstruction) fullInstructions.get(fullInstructions.size() - 1);
-                        fi.setVia(pathIndex + 1);
+                        ViaInstruction newInstr = new ViaInstruction(fullInstructions.get(fullInstructions.size() - 1));
+                        newInstr.setViaCount(pathIndex + 1);
+                        fullInstructions.replaceLast(newInstr);
                     }
                 }
 
diff --git a/core/src/main/java/com/graphhopper/util/ViaInstruction.java b/core/src/main/java/com/graphhopper/util/ViaInstruction.java
new file mode 100644
index 0000000000..028a21541a
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/util/ViaInstruction.java
@@ -0,0 +1,59 @@
+/*
+ * Copyright 2015 Peter Karich.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.graphhopper.util;
+
+/**
+ *
+ * @author Peter Karich
+ */
+public class ViaInstruction extends Instruction
+{
+    private int viaPosition = -1;
+
+    public ViaInstruction( String name, InstructionAnnotation ia, PointList pl )
+    {
+        super(REACHED_VIA, name, ia, pl);
+    }
+
+    public ViaInstruction( Instruction instr )
+    {
+        this(instr.getName(), instr.getAnnotation(), instr.getPoints());
+        setDistance(instr.getDistance());
+        setTime(instr.getTime());
+    }
+
+    public void setViaCount( int count )
+    {
+        this.viaPosition = count;
+    }
+
+    public int getViaCount()
+    {
+        if (viaPosition < 0)
+            throw new IllegalStateException("Uninitialized via count in instruction " + getName());
+
+        return viaPosition;
+    }
+
+    @Override
+    public String getTurnDescription( Translation tr )
+    {
+        if (rawName)
+            return getName();
+
+        return tr.tr("stopover", viaPosition);
+    }
+}
diff --git a/core/src/test/java/com/graphhopper/util/InstructionTest.java b/core/src/test/java/com/graphhopper/util/InstructionTest.java
index f65170813b..70d8a5f83a 100644
--- a/core/src/test/java/com/graphhopper/util/InstructionTest.java
+++ b/core/src/test/java/com/graphhopper/util/InstructionTest.java
@@ -46,7 +46,7 @@ public void testCalcAzimuthAndGetDirection()
         p2.add(49.944, 11.582);
         Instruction i2 = new Instruction(Instruction.CONTINUE_ON_STREET, "temp", ea, p2);
 
-        assertEquals(45, i2.calcAzimuth(null), .1);
+        assertEquals(32.76, i2.calcAzimuth(null), .1);
         assertEquals("NE", i2.calcDirection(null));
 
         PointList p3 = new PointList();
