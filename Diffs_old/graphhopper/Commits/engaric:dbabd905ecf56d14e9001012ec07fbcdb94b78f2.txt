diff --git a/graphhopper.sh b/graphhopper.sh
index 346f48c14e..fbd089a4b2 100755
--- a/graphhopper.sh
+++ b/graphhopper.sh
@@ -22,18 +22,25 @@ fi
 ACTION=$1
 FILE=$2
 
-USAGE="./graphhopper.sh import|web|clean|build <your-osm-file>"
+function printUsage {
+ echo
+ echo "./graphhopper.sh import|web <your-osm-file>"
+ echo "./graphhopper.sh clean|build|help"
+ echo
+ echo "  help        this message"
+ echo "  import      creates the graphhopper files used for later (faster) starts"
+ echo "  web         starts a local server for user access at localhost:8989 and developer access at localhost:8989/route"
+ echo "  build       creates the graphhopper JAR (without the web module)"
+ echo "  clean       removes all JARs, necessary if you need to use the latest source (e.g. after switching the branch etc)"
+ echo "  measurement does performance analysis of the current source version via artificial, random routes (Measurement class)"
+ echo "  torture     can be used to test real world routes via feeding graphhopper logs into a graphhopper system (Torture class)"
+ echo "  miniui      is a simple Java/Swing application used for debugging purposes only (MiniGraphUI class)"
+ echo "  extract     calls the overpass API to easily grab any area as .osm file"
+}
+
 if [ "x$ACTION" = "x" ]; then
- echo -e "## action $ACTION not found. try \n$USAGE"
- 
- echo 'import' creates the graphhopper files used for later (faster) starts
- echo 'ui' or 'web' starts the server (on 8989) which you can access via localhost:8989 with the browser and makes also a routing calculation interface available at localhost:8989/route
- echo 'measurement' calls the Measurement class and does performance analysis of the current version (or older git commits) but only via artificial&random routes
- echo 'torture' can be used to test real world routes via feeding graphhopper logs into a local or remote graphhopper system
- echo 'miniui' is a simple Java/Swing application used for debugging purposes only
- echo 'extract' calls the overpass API to easily grab any area as .osm file
- echo 'build' creates the graphhopper JAR (without the web module)
- echo 'clean' removes all JARs, necessary if you need to use the latest source (e.g. after switching the branch etc)                                                                          
+ echo "## action $ACTION not found. try" 
+ printUsage
 fi
 
 function ensureOsmXml { 
@@ -151,7 +158,8 @@ elif [ "x$ACTION" = "xandroid" ]; then
 fi
 
 if [ "x$FILE" = "x" ]; then
-  echo -e "no file specified? try \n$USAGE"
+  echo -e "no file specified? try"
+  printUsage
   exit
 fi
 
