diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperGPXParserRouteTest.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperGPXParserRouteTest.java
index 0d4bfba3ca..eb50d01d36 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperGPXParserRouteTest.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperGPXParserRouteTest.java
@@ -95,12 +95,25 @@ CloseableHttpResponse doSendAndGetResponse(String serviceUrl)
 		return httpClient.execute(httpget);
 	}
 
-	public String parseRoute(String routeType, String avoidance,String vehicle, String[] points) {
+	public String parseRoute(String routeType, String avoidances,String routeOptions, String[] points) {
 		LOG.debug("Here we are");
 		// Set up the URL
 		String xmlResponse = "";
 		String coordinateString = "";
 		String graphHopperUrl;
+		
+		String vehicle="";
+		String routeOption="";
+		
+		if (routeOptions.split(",").length>1)
+		{
+		 vehicle=routeOptions.split(",")[0];
+		 routeOption=routeOptions.split(",")[1];
+		}
+		else
+		{
+			vehicle=routeOptions;
+		}
 
 		for (int i = 0; i < points.length; i++) {
 
@@ -119,7 +132,12 @@ public String parseRoute(String routeType, String avoidance,String vehicle, Stri
 		}
 		
 				
+		String apikey = IntegrationTestProperties.getTestProperty("apiKey");
 
+		if (vehicle.equalsIgnoreCase("mountainbike"))
+		{
+			vehicle="mtb";
+		}
 		StringBuilder sb = new StringBuilder();
 		sb.append(graphHopperUrl);
 		sb.append("route?");
@@ -129,13 +147,14 @@ public String parseRoute(String routeType, String avoidance,String vehicle, Stri
 		}
 		sb.append("&vehicle=");
 		sb.append(vehicle);
+		sb.append("&weighting=");
+		sb.append(routeOption);
 		sb.append(coordinateString);
-		if(!avoidance.equals(""))
-		{
-		sb.append("&weighting=fastavoid");
-		sb.append("&avoidances="+avoidance);
-		}
-
+		sb.append("&apikey=");
+		sb.append(apikey);
+		if (!avoidances.equals("")) {
+			sb.append("&avoidances=" + avoidances);
+					}
 		try {
 			CloseableHttpResponse httpResponse = sendAndGetResponse(sb
 					.toString());
diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperJSONParser.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperJSONParser.java
index 6b2107c282..1a007a48da 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperJSONParser.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperJSONParser.java
@@ -1,15 +1,22 @@
 package uk.co.ordnancesurvey.gpx.graphhopper;
 
+import gherkin.JSONParser;
+import gherkin.formatter.JSONPrettyFormatter;
+
 import java.io.IOException;
+import java.util.HashSet;
+import java.util.List;
 
 import org.alternativevision.gpx.beans.Waypoint;
 import org.apache.commons.io.IOUtils;
 import org.apache.http.client.methods.CloseableHttpResponse;
+import org.json.JSONObject;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import uk.co.ordnancesurvey.gpx.beans.RouteWayPoint;
 import uk.co.ordnancesurvey.gpx.extensions.ExtensionConstants;
+import uk.co.ordnancesurvey.webtests.platforms.BrowserPlatformOptions;
 
 import com.google.gson.JsonArray;
 import com.google.gson.JsonElement;
@@ -33,7 +40,7 @@ public GraphHopperJSONParser() {
 	}
 
 	public JSONWayPoints parseJSONFromString(String jsonString) {
-
+		this.jsonString = jsonString;
 		JsonParser parser = new JsonParser();
 		JsonElement je = parser.parse(jsonString);
 		JsonObject jo = je.getAsJsonObject();
@@ -50,13 +57,11 @@ public JSONWayPoints parseJSONFromString(String jsonString) {
 			JsonPrimitive description = instruction.getAsJsonPrimitive("text");
 			JsonPrimitive time = instruction.getAsJsonPrimitive("time");
 			JsonPrimitive distance = instruction.getAsJsonPrimitive("distance");
-			
-		double distance_rounding=Double.parseDouble(distance.toString());
-		
-		distance_rounding=Math.round(distance_rounding*10)/10.0;
-		
-		
-			
+
+			double distance_rounding = Double.parseDouble(distance.toString());
+
+			distance_rounding = Math.round(distance_rounding * 10) / 10.0;
+
 			JsonPrimitive azimuth = instruction.getAsJsonPrimitive("azimuth");
 			JsonPrimitive annotation_text = instruction
 					.getAsJsonPrimitive("annotation_text");
@@ -70,19 +75,19 @@ public JSONWayPoints parseJSONFromString(String jsonString) {
 			w.setLongitude(longitude);
 			w.setLatitude(latitude);
 			w.setDescription(description.toString());
-			w.addExtensionData(ExtensionConstants.DISTANCE, String.valueOf(distance_rounding));
+			w.addExtensionData(ExtensionConstants.DISTANCE,
+					String.valueOf(distance_rounding));
 			w.addExtensionData(ExtensionConstants.TIME, time.toString());
-	
 
-			
 			LOG.info("azimuth :" + azimuth);
 			LOG.info("descritption: " + description);
 			LOG.info("time :" + time);
 			LOG.info("distance :" + distance);
-			if(null!=annotation_text)
-			{
-			w.setAnnotation_text(annotation_text.toString());
-			LOG.info("annotation_text: " + annotation_text.toString());
+			if (null != annotation_text) {
+				w.addExtensionData("Annotation_text", annotation_text
+						.getAsString().trim());
+				LOG.info("annotation_text: "
+						+ annotation_text.getAsString().trim());
 			}
 			LOG.info("Coordinates : " + w.getLatitude() + ","
 					+ w.getLongitude());
@@ -94,6 +99,39 @@ public JSONWayPoints parseJSONFromString(String jsonString) {
 
 	}
 
+	public JSONWayPoints parseCoordinatesFromJson(String jsonString) {
+		this.jsonString = jsonString;
+		JsonParser parser = new JsonParser();
+		JsonElement je = parser.parse(jsonString);
+		JsonObject jo = je.getAsJsonObject();
+		JsonArray paths = jo.getAsJsonArray("paths");
+		JsonObject points = paths.get(0).getAsJsonObject()
+				.getAsJsonObject("points");
+		JsonArray coordinates = points.getAsJsonObject().getAsJsonArray(
+				"coordinates");
+
+		for (JsonElement jsonElement : coordinates) {
+			Waypoint w = new Waypoint();
+			Double longitude = Double.parseDouble(jsonElement.getAsJsonArray()
+					.get(0).toString());
+			Double latitude = Double.parseDouble(jsonElement.getAsJsonArray()
+					.get(1).toString());
+			w.setLongitude(longitude);
+			w.setLatitude(latitude);
+			json.addWayPoint(w);
+
+		}
+
+		return json;
+
+	}
+
+	public HashSet<Waypoint> getJsonCoordinatesAsHashSet() {
+
+		parseCoordinatesFromJson(jsonString);
+		return json.getInstructions();
+	}
+
 	public JsonElement getJSONCoordinates(JsonArray paths, int coordinateIndex) {
 
 		JsonObject points = paths.get(0).getAsJsonObject()
@@ -104,8 +142,18 @@ public JsonElement getJSONCoordinates(JsonArray paths, int coordinateIndex) {
 		return coordinates.get(coordinateIndex);
 	}
 
-	public void parse(String routeType,String avoidance, String vehicle, String[] string) {
+	public void parse(String routeType, String avoidances, String routeOptions,
+			String[] string) {
 
+		String vehicle = "";
+		String routeOption = "";
+
+		if (routeOptions.split(",").length > 1) {
+			vehicle = routeOptions.split(",")[0];
+			routeOption = routeOptions.split(",")[1];
+		} else {
+			vehicle = routeOptions;
+		}
 		// Set up the URL
 		String jsonResponse = "";
 		String coordinateString = "";
@@ -126,6 +174,9 @@ public void parse(String routeType,String avoidance, String vehicle, String[] st
 		}
 
 		String apikey = IntegrationTestProperties.getTestProperty("apiKey");
+		if (vehicle.equalsIgnoreCase("mountainbike")) {
+			vehicle = "mtb";
+		}
 		StringBuilder sb = new StringBuilder();
 		sb.append(graphHopperUrl);
 		sb.append("route?");
@@ -135,14 +186,31 @@ public void parse(String routeType,String avoidance, String vehicle, String[] st
 		}
 		sb.append("&vehicle=");
 		sb.append(vehicle);
+
 		sb.append(coordinateString);
 		sb.append("&apikey=");
 		sb.append(apikey);
 		sb.append("&points_encoded=false");
-		
-		if (!avoidance.equals("")){
-			sb.append("&avoidances="+avoidance);
-		sb.append("&weighting=fastavoid");}
+
+		if (!avoidances.equals("")) {
+			sb.append("&avoidances=" + avoidances);
+
+			if (routeOption.isEmpty()) {
+				routeOption = "fastavoid";
+			}
+		}
+
+		else {
+
+			if (routeOption.isEmpty()) {
+				routeOption = "fastest";
+			}
+
+		}
+
+		sb.append("&weighting=");
+
+		sb.append(routeOption);
 		GraphHopperGPXParserRouteTest GPHService = new GraphHopperGPXParserRouteTest();
 		try {
 			CloseableHttpResponse httpResponse = GPHService
@@ -184,6 +252,23 @@ public boolean isWayPointinPath(Waypoint w) {
 
 	}
 
+	public boolean isWayPointinPath(Waypoint we, HashSet<Waypoint> wa) {
+		boolean iswaypointinPath = false;
+
+		for (Waypoint waypoint : wa) {
+
+			if (new RouteWayPoint(we).equals(new RouteWayPoint(waypoint))) {
+				iswaypointinPath = true;
+				LOG.info("WayPoint " + we + " Found In a Path");
+			}
+			if (iswaypointinPath) {
+				break;
+			}
+		}
+
+		return iswaypointinPath;
+	}
+
 	/**
 	 * Creates a Waypoint with below attributes
 	 * 
@@ -193,7 +278,8 @@ public boolean isWayPointinPath(Waypoint w) {
 	 * @return Waypoint
 	 */
 	public Waypoint buildWayPointForJson(String wayPoint_Coordinates,
-			String wayPointDescription, String time, String distance) {
+			String wayPointDescription, String time, String distance,
+			String avoidance) {
 		Waypoint w = new Waypoint();
 		String waypoint[] = wayPoint_Coordinates.split(",");
 		w.setLatitude(new Double(waypoint[0]));
@@ -201,8 +287,68 @@ public Waypoint buildWayPointForJson(String wayPoint_Coordinates,
 		w.setDescription(wayPointDescription);
 		w.addExtensionData(ExtensionConstants.DISTANCE, distance);
 		w.addExtensionData(ExtensionConstants.TIME, time);
+		w.addExtensionData("Annotation_text", avoidance.trim());
 		return w;
 
 	}
 
-}
\ No newline at end of file
+	// nearest point
+	public String getNearestPoint(String pointA) {
+
+		String nearestpoint = "";
+		StringBuffer sb = new StringBuffer();
+		if (Boolean.parseBoolean(IntegrationTestProperties
+				.getTestProperty("viaApagee"))) {
+			sb.append(IntegrationTestProperties
+					.getTestProperty("graphHopperWebUrlViaApigee"));
+		} else {
+			sb.append(IntegrationTestProperties
+					.getTestProperty("graphHopperWebUrl"));
+		}
+
+		sb.append("nearest?point=");
+		sb.append(pointA);
+		GraphHopperGPXParserRouteTest GPHService = new GraphHopperGPXParserRouteTest();
+
+		try {
+			CloseableHttpResponse httpResponse = GPHService
+					.sendAndGetResponse(sb.toString());
+
+			jsonString = IOUtils.toString(
+					httpResponse.getEntity().getContent(), "UTF-8");
+
+			JsonParser jp = new JsonParser();
+			JsonElement je = jp.parse(jsonString);
+			JsonArray jo = je.getAsJsonObject().getAsJsonArray("coordinates");
+
+			nearestpoint = jo.get(1).getAsString() + ","
+					+ jo.get(0).getAsString();
+
+		} catch (IOException e) {
+			LOG.info("Exception raised whilst attempting to call graphhopper server "
+					+ e.getMessage());
+		}
+
+		return nearestpoint;
+
+	}
+
+	public String getNearestPointDistance() {
+		JsonParser jp = new JsonParser();
+		JsonElement je = jp.parse(jsonString);
+		JsonPrimitive distance = je.getAsJsonObject().getAsJsonPrimitive(
+				"distance");
+		return distance.toString();
+	}
+
+	public long getTotalRouteTime() {
+		JsonParser parser = new JsonParser();
+		JsonElement je = parser.parse(jsonString);
+		JsonObject jo = je.getAsJsonObject();
+		JsonArray paths = jo.getAsJsonArray("paths");
+		JsonPrimitive totalTime = paths.get(0).getAsJsonObject()
+				.getAsJsonPrimitive("time");
+		return Long.parseLong(totalTime.toString());
+	}
+
+}
diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/JSONWayPoints.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/JSONWayPoints.java
index 0c20196dfb..6b9d603c24 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/JSONWayPoints.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/JSONWayPoints.java
@@ -9,7 +9,7 @@
 	
 	
 	String JSONString;
-	ArrayList<Waypoint> instructions= new ArrayList<Waypoint>();
+	HashSet<Waypoint> instructions= new HashSet<Waypoint>();
 
 	
 	/**
@@ -26,11 +26,12 @@ public void addWayPoint(Waypoint w) {
 /**
  * @return List of WayPoints in a JSON Route String
  */
-public   ArrayList<Waypoint> getInstructions()
+public   HashSet<Waypoint> getInstructions()
 {
 	return instructions;
 }
 	
+
 	
 	
 	
diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperComponentIdentification.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperComponentIdentification.java
index a0ed1e73b7..aa04c222ba 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperComponentIdentification.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperComponentIdentification.java
@@ -15,6 +15,7 @@
 	public static final ComponentIdentifier ADD_WAYPOINT= new ComponentByXPATH("//*[@class='pointAdd']");
 	public static final  ComponentIdentifier ROUTE_TYPE_CAR = new ComponentID("car");
 	public static final  ComponentIdentifier ROUTE_TYPE_BIKE = new ComponentID("bike");
+	public static final  ComponentIdentifier ROUTE_TYPE_MOUNTAINBIKE = new ComponentByXPATH("//*[@id='mtb']");
 	public static final  ComponentIdentifier ROUTE_TYPE_WALK = new ComponentID("foot");
 	public static final  ComponentIdentifier ROUTE_SEARCH = new ComponentID("searchButton");
 	public static final  ComponentIdentifier WAYPOINT_ONMAP = new ComponentByXPATH("//*[@class='leaflet-popup-content']", INNER_HTML);
@@ -36,6 +37,8 @@
 	public static final ComponentIdentifier avoidance_Mud=new ComponentByXPATH("//*[@name='avoidances[]'][@value='mud']");
 	public static final ComponentIdentifier avoidance_Sand=new ComponentByXPATH("//*[@name='avoidances[]'][@value='sand']");
 	public static final ComponentIdentifier avoidance_Shingle=new ComponentByXPATH("//*[@name='avoidances[]'][@value='shingle']");
+	public static final ComponentIdentifier fastest_RButton=new ComponentByXPATH("//input[@value='fastest']");
+	public static final ComponentIdentifier shortest_RButton=new ComponentByXPATH("//input[@value='shortest']");
 	
 	
 }
diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
index b5fe5c042b..f3618a03d3 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
@@ -1,7 +1,5 @@
 package uk.co.ordnancesurvey.routing;
 
-import gherkin.formatter.model.Feature;
-
 import java.io.IOException;
 import java.text.ParseException;
 import java.util.List;
@@ -12,7 +10,6 @@
 import uk.co.ordnancesurvey.gpx.graphhopper.IntegrationTestProperties;
 import cucumber.api.Scenario;
 import cucumber.api.java.After;
-import cucumber.api.java.Before;
 import cucumber.api.java.en.Given;
 import cucumber.api.java.en.Then;
 
@@ -20,52 +17,14 @@
 	GraphHopperUIUtil graphUiUtil;
 
 	String instruction;
-
-	@Given("^I request a route between \"([^\"]*)\" and \"([^\"]*)\" as a \"([^\"]*)\" from RoutingAPI$")
-	public void getRoute(String pointA, String pointB, String routeType)
-			throws InterruptedException {
-		String graphHopperWebUrl;
-
-		if (IntegrationTestProperties.getTestPropertyBool("viaApigee")) {
-			graphHopperWebUrl = IntegrationTestProperties
-					.getTestProperty("graphHopperWebUrlViaApigee");
-		} else {
-			graphHopperWebUrl = IntegrationTestProperties
-					.getTestProperty("graphHopperWebUrl");
-		}
-
-		graphUiUtil = new GraphHopperUIUtil(graphHopperWebUrl);
-
-		String testON = IntegrationTestProperties.getTestProperty("testON");
-
-		switch (testON.toUpperCase()) {
-		case "WEB":
-
-			graphUiUtil.getRouteFromUI(routeType, "",pointA, pointB);
-			break;
-		case "SERVICE":
-			graphUiUtil.getRouteFromService(routeType, pointA, pointB);
-			break;
-		default:
-
-			if (pointA.split(",").length == 2) {
-				graphUiUtil.getRouteFromService(routeType, pointA, pointB);
-				graphUiUtil.getRouteFromUI(routeType,"", pointA, pointB);
-			} else {
-				graphUiUtil.getRouteFromUI(routeType, "",pointA, pointB);
-			}
-
-			break;
-
-		}
-
-	}
+	String nearestPoint = "";
+	String Distance = "";
 
 	@Given("^I request a route between \"([^\"]*)\" and \"([^\"]*)\" as a \"([^\"]*)\" from RoutingAPI and avoid \"([^\"]*)\"$")
 	public void getRouteWithAvoidance(String pointA, String pointB,
-			String routeType, String avoidance) throws InterruptedException {
+			String routeOptions, String avoidances) throws InterruptedException {
 		String graphHopperWebUrl;
-		avoidance= avoidance.toLowerCase().trim();
+		avoidances = avoidances.toLowerCase().trim();
 		if (IntegrationTestProperties.getTestPropertyBool("viaApigee")) {
 			graphHopperWebUrl = IntegrationTestProperties
 					.getTestProperty("graphHopperWebUrlViaApigee");
@@ -81,19 +40,23 @@ public void getRouteWithAvoidance(String pointA, String pointB,
 		switch (testON.toUpperCase()) {
 		case "WEB":
 
-			graphUiUtil.getRouteFromUI(routeType,avoidance, pointA, pointB);
+			graphUiUtil
+					.getRouteFromUI(routeOptions, avoidances, pointA, pointB);
 			break;
 		case "SERVICE":
-			graphUiUtil.getRouteFromServiceWithAvoidance(routeType, avoidance, pointA,
-					pointB);
+			graphUiUtil.getRouteFromServiceWithAvoidance(routeOptions,
+					avoidances, pointA, pointB);
 			break;
 		default:
 
 			if (pointA.split(",").length == 2) {
-				graphUiUtil.getRouteFromServiceWithAvoidance(routeType, avoidance,pointA, pointB);
-				graphUiUtil.getRouteFromUI(routeType,avoidance, pointA, pointB);
+				graphUiUtil.getRouteFromServiceWithAvoidance(routeOptions,
+						avoidances, pointA, pointB);
+				graphUiUtil.getRouteFromUI(routeOptions, avoidances, pointA,
+						pointB);
 			} else {
-				graphUiUtil.getRouteFromUI(routeType,avoidance, pointA, pointB);
+				graphUiUtil.getRouteFromUI(routeOptions, avoidances, pointA,
+						pointB);
 			}
 
 			break;
@@ -102,9 +65,10 @@ public void getRouteWithAvoidance(String pointA, String pointB,
 
 	}
 
-	@Given("^I request a route between \"([^\"]*)\" and \"([^\"]*)\" as a \"([^\"]*)\" from RoutingAPI via \"([^\"]*)\"$")
-	public void getRoute(String pointA, String pointB, String routeType,
-			String pointC) throws InterruptedException {
+	@Given("^I request a route between \"([^\"]*)\" and \"([^\"]*)\" as a \"([^\"]*)\" from RoutingAPI and avoid \"([^\"]*)\" via \"([^\"]*)\"$")
+	public void getRouteWithAvoidances(String pointA, String pointB,
+			String routeOptions, String avoidance, String pointC)
+			throws InterruptedException {
 		String graphHopperWebUrl;
 
 		if (IntegrationTestProperties.getTestPropertyBool("viaApigee")) {
@@ -122,19 +86,23 @@ public void getRoute(String pointA, String pointB, String routeType,
 		switch (testON.toUpperCase()) {
 		case "WEB":
 
-			graphUiUtil.getRouteFromUI(routeType,"",pointA, pointB, pointC);
+			graphUiUtil
+					.getRouteFromUI(routeOptions, "", pointA, pointB, pointC);
 			break;
 		case "SERVICE":
-			graphUiUtil.getRouteFromService(routeType, pointA, pointB, pointC);
+			graphUiUtil.getRouteFromServiceWithAvoidance(routeOptions,
+					avoidance, pointA, pointB, pointC);
 			break;
 		default:
 
 			if (pointA.split(",").length == 2) {
-				graphUiUtil.getRouteFromService(routeType, pointA, pointB,
-						pointC);
-				graphUiUtil.getRouteFromUI(routeType,"", pointA, pointB, pointC);
+				graphUiUtil.getRouteFromServiceWithAvoidance(routeOptions,
+						avoidance, pointA, pointB, pointC);
+				graphUiUtil
+						.getRouteFromUI(routeOptions, pointA, pointB, pointC);
 			} else {
-				graphUiUtil.getRouteFromUI(routeType,"", pointA, pointB, pointC);
+				graphUiUtil.getRouteFromUI(routeOptions, "", pointA, pointB,
+						pointC);
 			}
 
 			break;
@@ -142,51 +110,47 @@ public void getRoute(String pointA, String pointB, String routeType,
 		}
 
 	}
-	
-	
-	@Given("^I request a route between \"([^\"]*)\" and \"([^\"]*)\" as a \"([^\"]*)\" from RoutingAPI and avoid \"([^\"]*)\" via \"([^\"]*)\"$")
-	public void getRouteWithAvoidances(String pointA, String pointB, String routeType,String avoidance,
-			String pointC) throws InterruptedException {
-		String graphHopperWebUrl;
-
-		if (IntegrationTestProperties.getTestPropertyBool("viaApigee")) {
-			graphHopperWebUrl = IntegrationTestProperties
-					.getTestProperty("graphHopperWebUrlViaApigee");
-		} else {
-			graphHopperWebUrl = IntegrationTestProperties
-					.getTestProperty("graphHopperWebUrl");
-		}
+/*
+	public void getRoute(String pointA, String pointB, String routeOptions,
+			String pointC, String pointD) throws InterruptedException {
 
-		graphUiUtil = new GraphHopperUIUtil(graphHopperWebUrl);
+		graphUiUtil = new GraphHopperUIUtil(
+				IntegrationTestProperties.getTestProperty("graphHopperWebUrl"));
 
 		String testON = IntegrationTestProperties.getTestProperty("testON");
 
 		switch (testON.toUpperCase()) {
 		case "WEB":
 
-			graphUiUtil.getRouteFromUI(routeType,"",pointA, pointB, pointC);
+			graphUiUtil.getRouteFromUI(routeOptions, "", pointA, pointB,
+					pointC, pointD);
 			break;
 		case "SERVICE":
-			graphUiUtil.getRouteFromServiceWithAvoidance(routeType, avoidance,pointA, pointB, pointC);
+			graphUiUtil.getRouteFromService(routeOptions, pointA, pointB,
+					pointC, pointD);
 			break;
 		default:
 
 			if (pointA.split(",").length == 2) {
-				graphUiUtil.getRouteFromServiceWithAvoidance(routeType, avoidance,pointA, pointB, pointC);
-				graphUiUtil.getRouteFromUI(routeType, pointA, pointB, pointC);
+				graphUiUtil.getRouteFromService(routeOptions, pointA, pointB,
+						pointC, pointD);
+				graphUiUtil.getRouteFromUI(routeOptions, "", pointA, pointB,
+						pointC, pointD);
 			} else {
-				graphUiUtil.getRouteFromUI(routeType,"", pointA, pointB, pointC);
+				graphUiUtil.getRouteFromUI(routeOptions, "", pointA, pointB,
+						pointC, pointD);
 			}
 
 			break;
 
 		}
 
-	}
+	}*/
 
-	@Given("^I request a route between \"([^\"]*)\" and \"([^\"]*)\" as a \"([^\"]*)\" from RoutingAPI via \"([^\"]*)\" and \"([^\"]*)\"$")
-	public void getRoute(String pointA, String pointB, String routeType,
-			String pointC, String pointD) throws InterruptedException {
+	@Given("^I request a route between \"([^\"]*)\" and \"([^\"]*)\" as a \"([^\"]*)\" from RoutingAPI and avoid \"([^\"]*)\" via \"([^\"]*)\" and \"([^\"]*)\"$")
+	public void getRouteWithAvoidances(String pointA, String pointB,
+			String routeOptions, String avoidance, String pointC, String pointD)
+			throws InterruptedException {
 
 		graphUiUtil = new GraphHopperUIUtil(
 				IntegrationTestProperties.getTestProperty("graphHopperWebUrl"));
@@ -196,23 +160,23 @@ public void getRoute(String pointA, String pointB, String routeType,
 		switch (testON.toUpperCase()) {
 		case "WEB":
 
-			graphUiUtil.getRouteFromUI(routeType, "",pointA, pointB, pointC,
-					pointD);
+			graphUiUtil.getRouteFromUI(routeOptions, "", pointA, pointB,
+					pointC, pointD);
 			break;
 		case "SERVICE":
-			graphUiUtil.getRouteFromService(routeType, pointA, pointB, pointC,
-					pointD);
+			graphUiUtil.getRouteFromServiceWithAvoidance(routeOptions,
+					avoidance, pointA, pointB, pointC, pointD);
 			break;
 		default:
 
 			if (pointA.split(",").length == 2) {
-				graphUiUtil.getRouteFromService(routeType, pointA, pointB,
+				graphUiUtil.getRouteFromServiceWithAvoidance(routeOptions,
+						avoidance, pointA, pointB, pointC, pointD);
+				graphUiUtil.getRouteFromUI(routeOptions, "", pointA, pointB,
 						pointC, pointD);
-				graphUiUtil.getRouteFromUI(routeType,"", pointA, pointB, pointC,
-						pointD);
 			} else {
-				graphUiUtil.getRouteFromUI(routeType, "",pointA, pointB, pointC,
-						pointD);
+				graphUiUtil.getRouteFromUI(routeOptions, "", pointA, pointB,
+						pointC, pointD);
 			}
 
 			break;
@@ -220,42 +184,34 @@ public void getRoute(String pointA, String pointB, String routeType,
 		}
 
 	}
-	
-	
-	@Given("^I request a route between \"([^\"]*)\" and \"([^\"]*)\" as a \"([^\"]*)\" from RoutingAPI and avoid \"([^\"]*)\" via \"([^\"]*)\" and \"([^\"]*)\"$")
-	public void getRouteWithAvoidances(String pointA, String pointB, String routeType,String avoidance,
-			String pointC, String pointD) throws InterruptedException {
 
-		graphUiUtil = new GraphHopperUIUtil(
-				IntegrationTestProperties.getTestProperty("graphHopperWebUrl"));
+	@Given("^I request a nearest point from  \"([^\"]*)\" from Nearest Point API$")
+	public void I_request_a_nearest_point_from_from_Nearest_Point_API(
+			String pointA) {
 
-		String testON = IntegrationTestProperties.getTestProperty("testON");
+		graphUiUtil = (IntegrationTestProperties
+				.getTestPropertyBool("viaApigee") == true) ? new GraphHopperUIUtil(
+				IntegrationTestProperties
+						.getTestProperty("graphHopperWebUrlViaApigee"))
+				: new GraphHopperUIUtil(
+						IntegrationTestProperties
+								.getTestProperty("graphHopperWebUrl"));
 
-		switch (testON.toUpperCase()) {
-		case "WEB":
+		nearestPoint = graphUiUtil.nearestPointService(pointA);
+		Distance = graphUiUtil.nearestPointDistance();
 
-			graphUiUtil.getRouteFromUI(routeType, "",pointA, pointB, pointC,
-					pointD);
-			break;
-		case "SERVICE":
-			graphUiUtil.getRouteFromServiceWithAvoidance(routeType,avoidance, pointA, pointB, pointC,
-					pointD);
-			break;
-		default:
-
-			if (pointA.split(",").length == 2) {
-				graphUiUtil.getRouteFromServiceWithAvoidance(routeType,avoidance, pointA, pointB, pointC,
-						pointD);
-				graphUiUtil.getRouteFromUI(routeType,"", pointA, pointB, pointC,
-						pointD);
-			} else {
-				graphUiUtil.getRouteFromUI(routeType, "",pointA, pointB, pointC,
-						pointD);
-			}
+	}
 
-			break;
+	@Then("^I should be able to verify the nearest point to be \"([^\"]*)\" at a distance of \"([^\"]*)\"$")
+	public void I_should_be_able_to_verify_the_nearest_point_to_be(
+			String pointB, String distance) {
 
-		}
+		Assert.assertTrue("******Expected nearest Point " + pointB
+				+ " is not matching with " + nearestPoint + "********",
+				pointB.equals(nearestPoint));
+		Assert.assertTrue("******Expected nearest Point distance " + distance
+				+ " is not matcching with " + Distance,
+				Distance.equals(distance));
 
 	}
 
@@ -266,17 +222,16 @@ public void I_should_be_able_to_verify_the_waypoint_on_the_route_map(
 			String time, String distance) {
 
 		graphUiUtil.isWayPointonRouteMap(wayPointIndex, wayPoint_Coordinates,
-				wayPointDescription, azimuth, direction, time, distance,"");
+				wayPointDescription, azimuth, direction, time, distance, "");
 
 	}
-	
-	
-	
 
 	@Then("^I should be able to verify the waypoints on the route map:")
 	public void I_should_be_able_to_verify_the_waypoints_on_the_route_map(
 			List<Map<String, String>> wayPointList) {
-		Assert.assertTrue("Waypoint not found on the route where it was expected",graphUiUtil.isWayPointonRouteMap(wayPointList));
+		Assert.assertTrue(
+				"Waypoint not found on the route where it was expected",
+				graphUiUtil.isWayPointonRouteMap(wayPointList));
 
 	}
 
@@ -284,7 +239,9 @@ public void I_should_be_able_to_verify_the_waypoints_on_the_route_map(
 	public void I_should_be_able_to_verify_the_not_waypoints_on_the_route_map(
 			List<Map<String, String>> wayPointList) {
 
-		Assert.assertFalse("Waypoint found on the route where it was not expected",graphUiUtil.isWayPointonRouteMap(wayPointList));
+		Assert.assertFalse(
+				"Waypoint found on the route where it was not expected",
+				graphUiUtil.isWayPointonRouteMap(wayPointList));
 		// graphUiUtil.isWayPointNotonRouteMap(wayPointList);
 
 	}
@@ -312,7 +269,7 @@ public void I_should_be_able_to_verify_the_trackpoints_not_on_the_route_map(
 
 	}
 
-	@After({ "@Routing" })
+	@After
 	public void closeBrowser(Scenario sc) {
 
 		if (sc.isFailed()) {
diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
index 51ed38bf17..eb16ba02d8 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
@@ -21,6 +21,7 @@
 
 import org.alternativevision.gpx.beans.Route;
 import org.alternativevision.gpx.beans.Waypoint;
+import org.apache.http.client.methods.CloseableHttpResponse;
 import org.junit.Assert;
 import org.openqa.selenium.By;
 import org.openqa.selenium.JavascriptExecutor;
@@ -46,7 +47,6 @@
 	String testOn = IntegrationTestProperties.getTestProperty("testON");
 	GraphHopperGPXParserRouteTest GPHService = new GraphHopperGPXParserRouteTest();
 	GraphHopperJSONParser GPHJsonService = new GraphHopperJSONParser();
-	GraphHopperJSONParser JSONService = new GraphHopperJSONParser();
 
 	JavascriptExecutor js = (JavascriptExecutor) driver;
 	WebElement we;
@@ -67,6 +67,7 @@ public GraphHopperUIUtil(String url) {
 		}
 	}
 
+
 	private void init() throws InterruptedException {
 		// baseUrl = IntegrationTestProperties
 		// .getTestProperty("graphHopperWebUrl");
@@ -93,19 +94,27 @@ public void logout() {
 	 * <p>
 	 * all avoidances will be considered while generating a route.
 	 * 
-	 * @param routeType
+	 * @param routeOptions
 	 *            can be car/bike/foot
-	 * @param avoidance
+	 * @param avoidances
 	 *            can be aroad,cliff.. etc and it can be "" if no avoidance is
 	 *            need to be set
 	 * @param points
 	 *            start and end points along with any intermediate points
 	 * @throws InterruptedException
 	 */
-	public void getRouteFromUI(String routeType, String avoidance,
+	public void getRouteFromUI(String routeOptions, String avoidances,
 			String... points) throws InterruptedException {
+		String vehicle = "";
+		String routeOption = "";
+		if (routeOptions.split(",").length > 1) {
+			vehicle = routeOptions.split(",")[0];
+			routeOption = routeOptions.split(",")[1];
+		} else {
+			vehicle = routeOptions;
+		}
 
-		switch (routeType) {
+		switch (vehicle) {
 		case "car":
 			clickElement(ROUTE_TYPE_CAR);
 
@@ -121,6 +130,91 @@ public void getRouteFromUI(String routeType, String avoidance,
 			break;
 
 		}
+		clickElement(settingsButton);
+
+		if (!avoidances.equals("")) {
+			for (int i = 0; i < avoidances.split(",").length; i++) {
+				String avoidance = avoidances.split(",")[i];
+				switch (avoidance.toLowerCase().trim()) {
+
+				case "aroad":
+					clickElement(avoidance_ARoad);
+					break;
+
+				case "boulders":
+					clickElement(avoidance_Boulders);
+					break;
+				case "cliff":
+					clickElement(avoidance_Cliff);
+					break;
+				case "inlandwater":
+					clickElement(avoidance_InlandWater);
+					break;
+				case "marsh":
+					clickElement(avoidance_Marsh);
+					break;
+				case "quarryorpit":
+					clickElement(avoidance_QuarryOrPit);
+					break;
+				case "scree":
+					clickElement(avoidance_Scree);
+					break;
+				case "rock":
+					clickElement(avoidance_Rock);
+					break;
+				case "mud":
+					clickElement(avoidance_Mud);
+					break;
+
+				case "sand":
+					clickElement(avoidance_Sand);
+					break;
+
+				case "shingle":
+					clickElement(avoidance_Shingle);
+					break;
+
+				default:
+					break;
+				}
+			}
+/*switch (routeOption) {
+case "shortavoid":
+	clickElement(shortest_RButton);
+	break;
+case "fastavoid":
+	clickElement(fastest_RButton);
+	break;
+case "fastest":
+	
+	clickElement(fastest_RButton);
+	break;
+case "shortest":
+	clickElement(shortest_RButton);
+	break;
+
+default:
+	break;
+}
+		*/	if (routeOption.equalsIgnoreCase("shortavoid")) {
+				clickElement(shortest_RButton);
+			}
+
+			else {
+				clickElement(fastest_RButton);
+			}
+
+		}
+
+		else {
+			if (routeOption.equalsIgnoreCase("shortest")) {
+				clickElement(shortest_RButton);
+			}
+
+			else {
+				clickElement(fastest_RButton);
+			}
+		}
 
 		for (int i = 0; i < points.length - 2; i++)
 
@@ -147,55 +241,8 @@ public void getRouteFromUI(String routeType, String avoidance,
 			}
 		}
 
-		if (!avoidance.isEmpty()) {
-
-			clickElement(settingsButton);
-			switch (avoidance.toLowerCase().trim()) {
-
-			case "aroad":
-				clickElement(avoidance_ARoad);
-				break;
-
-			case "boulders":
-				clickElement(avoidance_Boulders);
-				break;
-			case "cliff":
-				clickElement(avoidance_Cliff);
-				break;
-			case "inlandwater":
-				clickElement(avoidance_InlandWater);
-				break;
-			case "marsh":
-				clickElement(avoidance_Marsh);
-				break;
-			case "quarryorpit":
-				clickElement(avoidance_QuarryOrPit);
-				break;
-			case "scree":
-				clickElement(avoidance_Scree);
-				break;
-			case "rock":
-				clickElement(avoidance_Rock);
-				break;
-			case "mud":
-				clickElement(avoidance_Mud);
-				break;
-
-			case "sand":
-				clickElement(avoidance_Sand);
-				break;
-
-			case "shingle":
-				clickElement(avoidance_Shingle);
-				break;
-
-			default:
-				break;
-			}
-
-		}
 		clickElement(ROUTE_SEARCH);
-		
+
 		waitFor(INSTRUCTIONS);
 
 	}
@@ -216,15 +263,12 @@ public boolean verifyInstructionThroughUI(String routeStepNumber,
 			LOG.info(e.getMessage());
 			return false;
 		}
-		if (null!=avoidance)
-		{
-		if (!avoidance.isEmpty()) {
-			avoidance = ",  " + avoidance;
-		}
-		}
-		else
-		{
-			avoidance="";
+		if (null != avoidance) {
+			if (!avoidance.isEmpty()) {
+				avoidance = ",  " + avoidance;
+			}
+		} else {
+			avoidance = "";
 		}
 
 		return getTableRowStatus(INSTRUCTIONS,
@@ -233,17 +277,17 @@ public boolean verifyInstructionThroughUI(String routeStepNumber,
 
 	}
 
-	public void getRouteFromServiceWithAvoidance(String routeType,
-			String avoidance, String... points) {
+	public void getRouteFromServiceWithAvoidance(String routeOptions,
+			String avoidances, String... points) {
 
 		if (IntegrationTestProperties.getTestProperty("routeType")
-				.equals("gpx")) {
-			GPHService.parseRoute("gpx", avoidance, routeType, points);
+				.equalsIgnoreCase("gpx")) {
+			GPHService.parseRoute("gpx", avoidances, routeOptions, points);
 		}
 
 		else {
 
-			GPHJsonService.parse("json", avoidance, routeType, points);
+			GPHJsonService.parse("json", avoidances, routeOptions, points);
 		}
 
 	}
@@ -304,7 +348,7 @@ public boolean isWayPointonRouteMap(String wayPointIndex,
 
 			} else {
 				wp = GPHJsonService.buildWayPointForJson(wayPoint_Coordinates,
-						wayPointDescription, time, distance);
+						wayPointDescription, time, distance,avoidance);
 				isWayPointonRouteMap = GPHJsonService.isWayPointinPath(wp);
 
 			}
@@ -323,7 +367,7 @@ public boolean isWayPointonRouteMap(String wayPointIndex,
 
 			} else {
 				wp = GPHJsonService.buildWayPointForJson(wayPoint_Coordinates,
-						wayPointDescription, time, distance);
+						wayPointDescription, time, distance,avoidance);
 				isWayPointonRouteMap = GPHJsonService.isWayPointinPath(wp);
 
 			}
@@ -432,7 +476,13 @@ public void verifyTotalRouteTime(String totalRouteTime)
 			break;
 
 		case "SERVICE":
-			aTime.setTime(GPHService.getTotalRouteTime());
+
+			if (IntegrationTestProperties.getTestProperty("routeType")
+					.equalsIgnoreCase("GPX")) {
+				aTime.setTime(GPHService.getTotalRouteTime());
+			} else {
+				aTime.setTime(GPHJsonService.getTotalRouteTime());
+			}
 			LOG.info("The total route time expected is " + eTime.getTime()
 					+ " and actual is " + aTime.getTime());
 			assertTrue("The total route time expected " + eTime.getTime()
@@ -442,13 +492,12 @@ public void verifyTotalRouteTime(String totalRouteTime)
 
 		default:
 
-			aTime.setTime(GPHService.getTotalRouteTime());
-			LOG.info("The total route time expected is " + eTime.getTime()
-					+ " and actual is " + aTime.getTime());
-			assertTrue("The total route time expected " + eTime.getTime()
-					+ " is not matchin with actual " + aTime.getTime(),
-					aTime.getTime() <= eTime.getTime());
-
+			if (IntegrationTestProperties.getTestProperty("routeType")
+					.equalsIgnoreCase("GPX")) {
+				aTime.setTime(GPHService.getTotalRouteTime());
+			} else {
+				aTime.setTime(GPHJsonService.getTotalRouteTime());
+			}
 			actualTime = getValue(TOTAL_ROUTE_TIME).split("take ")[1].trim()
 					.replaceAll(" ", "");
 			if (!actualTime.contains("h")) {
@@ -479,8 +528,17 @@ public void isTrackPointonRouteMap(List<Map<String, String>> trackPointsList)
 			// String time = (String) trackPointsList.get(i).get("time");
 
 			Waypoint trackPoint = buildWayPoint(waypointco);
-			assertTrue(GPHService.isWayPointOnTrack(trackPoint, GPHService
-					.getTracks().iterator().next()));
+			if (IntegrationTestProperties.getTestProperty("routeType").equals(
+					"gpx")) {
+				assertTrue(GPHService.isWayPointOnTrack(trackPoint, GPHService
+						.getTracks().iterator().next()));
+			}
+
+			else {
+				assertTrue(GPHJsonService.isWayPointinPath(trackPoint,GPHJsonService
+						.getJsonCoordinatesAsHashSet()));
+
+			}
 
 		}
 
@@ -496,8 +554,17 @@ public void isTrackPointNotonRouteMap(
 			// String time = (String) trackPointsList.get(i).get("time");
 
 			Waypoint trackPoint = buildWayPoint(waypointco);
-			assertTrue(!GPHService.isWayPointOnTrack(trackPoint, GPHService
-					.getTracks().iterator().next()));
+			if (IntegrationTestProperties.getTestProperty("routeType").equals(
+					"gpx")) {
+				assertTrue(!GPHService.isWayPointOnTrack(trackPoint, GPHService
+						.getTracks().iterator().next()));
+			}
+
+			else {
+				assertTrue(!GPHJsonService.isWayPointinPath(trackPoint,GPHJsonService
+						.getJsonCoordinatesAsHashSet()));
+
+			}
 
 		}
 
@@ -570,4 +637,17 @@ public BufferedImage resize(BufferedImage img, int newW, int newH) {
 	public void verifyWayPointsThroughService() {
 
 	}
+
+	public String nearestPointService(String pointA) {
+
+		return GPHJsonService.getNearestPoint(pointA);
+
+	}
+
+	public String nearestPointDistance() {
+
+		return GPHJsonService.getNearestPointDistance();
+
+	}
+
 }
diff --git a/acceptancetesting/src/test/cucumber/DPNRouting.feature b/acceptancetesting/src/test/cucumber/DPNRouting.feature
index 88ba78e28d..3c325d03f6 100644
--- a/acceptancetesting/src/test/cucumber/DPNRouting.feature
+++ b/acceptancetesting/src/test/cucumber/DPNRouting.feature
@@ -5,129 +5,129 @@ Feature: Verify a route from A to B
 
   @Routing
   Scenario Outline: Verify  Road Names on a Walking Route  (Mill lane-BUXTON)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI and avoid "<avoidance>"
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco        | waypointdesc            | azimuth | direction | time  | distance | avoidance |
       | 4             | 53.1356,-1.820891 | Continue onto Mill Lane | 70.0    | E         | 23171 | 32.2     |           |
 
     Examples: 
-      | pointA              | pointB             | routetype | avoidance |
-      | 53.176062,-1.871472 | 53.154773,-1.77272 | foot      |           |
+      | pointA              | pointB             | routeOptions | avoidances |
+      | 53.176062,-1.871472 | 53.154773,-1.77272 | foot         |            |
 
   @Routing
   Scenario Outline: Verify  Road Names on a Walking Route  (Chatswoth Park)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI and avoid "<avoidance>"
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco          | waypointdesc                  | azimuth | direction | time   | distance | avoidance |
       | 2             | 53.221055,-1.623152 | Turn right onto B Road        | 157.0   | SE        | 984273 | 1367.1   |           |
       | 5             | 53.197269,-1.608797 | Continue onto Chatsworth Road | 181.0   | S         | 678871 | 942.9    |           |
 
     Examples: 
-      | pointA              | pointB              | routetype | avoidance |
-      | 53.211013,-1.619393 | 53.185757,-1.611969 | foot      |           |
+      | pointA              | pointB              | routeOptions | avoidances |
+      | 53.211013,-1.619393 | 53.185757,-1.611969 | foot         |            |
 
   @Routing
   Scenario Outline: Verify  Road Names on a Walking Route (Musden Low)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI and avoid "<avoidance>"
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco          | waypointdesc          | azimuth | direction | time  | distance | avoidance |
       | 3             | 53.042479,-1.820522 | Turn right onto Route | 297.0   | NW        | 35181 | 48.9     |           |
 
     Examples: 
-      | pointA              | pointB              | routetype | avoidance |
-      | 53.049589,-1.823866 | 53.076372,-1.853379 | foot      |           |
+      | pointA              | pointB              | routeOptions | avoidances |
+      | 53.049589,-1.823866 | 53.076372,-1.853379 | foot         |            |
 
   @Routing
   Scenario Outline: Verify  Road Names on a Walking Route (A54)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI and avoid "<avoidance>"
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco          | waypointdesc         | azimuth | direction | time   | distance | avoidance |
       | 4             | 53.176842,-2.069334 | Turn left onto Track | 255.0   | W         | 187602 | 260.6    |           |
 
     Examples: 
-      | pointA              | pointB              | routetype | avoidance |
-      | 53.173064,-2.060321 | 53.214387,-2.017271 | foot      |           |
+      | pointA              | pointB              | routeOptions | avoidances |
+      | 53.173064,-2.060321 | 53.214387,-2.017271 | foot         |            |
 
   @Routing
   Scenario Outline: Verify  Road Names on a Walking Route (Townhead )
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI and avoid "<avoidance>"
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco         | waypointdesc                | azimuth | direction | time  | distance | avoidance |
       | 5             | 53.11862,-1.909506 | Turn slight left onto Route | 169.0   | S         | 51007 | 70.8     |           |
 
     Examples: 
-      | pointA              | pointB             | routetype | avoidance |
-      | 53.122676,-1.909914 | 53.088159,-1.87142 | foot      |           |
+      | pointA              | pointB             | routeOptions | avoidances |
+      | 53.122676,-1.909914 | 53.088159,-1.87142 | foot         |            |
 
   @Routing
   Scenario Outline: Verify  Road Names on a Walking Route (Martin's Low)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI and avoid "<avoidance>"
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco          | waypointdesc          | azimuth | direction | time  | distance | avoidance |
-      | 3             | 53.066198,-1.905401 | Turn right onto Track | 105.0   | E         | 38678 | 53.7     |           |
+      | wayPointIndex | waypointco          | waypointdesc         | azimuth | direction | time   | distance | avoidance |
+      | 3             | 53.071624,-1.914417 | Turn right onto Path | 356.0   | N         | 425697 | 591.2    |           |
 
     Examples: 
-      | pointA             | pointB              | routetype | avoidance |
-      | 53.06535,-1.906169 | 53.100994,-1.956274 | foot      |           |
+      | pointA             | pointB              | routeOptions | avoidances |
+      | 53.06535,-1.906169 | 53.100994,-1.956274 | foot         |            |
 
   @Routing
   Scenario Outline: Verify  Road Names on a Walking Route (Castleton Road)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI and avoid "<avoidance>"
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco          | waypointdesc                  | azimuth | direction | time   | distance | avoidance |
       | 2             | 53.347406,-1.760973 | Turn left onto Castleton Road | 109.0   | E         | 878424 | 1220.0   | ARoad     |
 
     Examples: 
-      | pointA              | pointB              | routetype | avoidance |
-      | 53.348832,-1.761122 | 53.197338,-1.594157 | foot      |           |
+      | pointA              | pointB              | routeOptions | avoidances |
+      | 53.348832,-1.761122 | 53.197338,-1.594157 | foot         |            |
 
   @Routing
   Scenario Outline: Verify  Road Names on a Walking Route (Hernstone Lane )
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI and avoid "<avoidance>"
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco          | waypointdesc                 | azimuth | direction | time   | distance | avoidance |
       | 3             | 53.305821,-1.814508 | Continue onto Hernstone Lane | 299.0   | NW        | 304923 | 423.5    | ARoad     |
 
     Examples: 
-      | pointA              | pointB              | routetype | avoidance |
-      | 53.300714,-1.786126 | 53.287803,-1.816746 | foot      |           |
+      | pointA              | pointB              | routeOptions | avoidances |
+      | 53.300714,-1.786126 | 53.287803,-1.816746 | foot         |            |
 
   @Routing
   Scenario Outline: Verify  Road Names on a Walking Route (Monyash Road)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI and avoid "<avoidance>"
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco         | waypointdesc               | azimuth | direction | time   | distance | avoidance |
       | 5             | 53.20882,-1.688212 | Continue onto Monyash Road | 55.0    | NE        | 482979 | 670.8    |           |
 
     Examples: 
-      | pointA              | pointB              | routetype | avoidance |
-      | 53.194909,-1.710481 | 53.156696,-1.634947 | foot      |           |
+      | pointA              | pointB              | routeOptions | avoidances |
+      | 53.194909,-1.710481 | 53.156696,-1.634947 | foot         |            |
 
   @Routing
   Scenario Outline: Verify  Road Names on a Walking Route (Whitfield lane)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI and avoid "<avoidance>"
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco          | waypointdesc               | azimuth | direction | time   | distance | avoidance |
       | 4             | 53.143286,-1.647841 | Turn right onto Elton Road | 282.0   | W         | 195384 | 271.4    |           |
 
     Examples: 
-      | pointA              | pointB              | routetype | avoidance |
-      | 53.142876,-1.642599 | 53.163897,-1.714249 | foot      |           |
+      | pointA              | pointB              | routeOptions | avoidances |
+      | 53.142876,-1.642599 | 53.163897,-1.714249 | foot         |            |
 
   @Routing
   Scenario Outline: Verify  Road Names on a Walking Route  (Cardlemere Lane)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI and avoid "<avoidance>"
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco          | waypointdesc                   | azimuth | direction | time   | distance | avoidance |
       | 4             | 53.129383,-1.754591 | Turn left onto Cardlemere Lane | 121.0   | SE        | 594909 | 826.3    |           |
 
     Examples: 
-      | pointA              | pointB             | routetype | avoidance |
-      | 53.114295,-1.762789 | 53.086961,-1.69626 | foot      |           |
+      | pointA              | pointB             | routeOptions | avoidances |
+      | 53.114295,-1.762789 | 53.086961,-1.69626 | foot         |            |
 
   @Routing
   Scenario Outline: Verify  Road Names on a Walking Route using one intermediate point ( Old Coalpit Lane)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI and avoid "<avoidance>" via "<pointC>"
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>" via "<pointC>"
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco          | waypointdesc                    | azimuth | direction | time   | distance | avoidance |
       | 2             | 53.23952,-1.803512  | Turn left onto Sough Lane       | 189.0   | S         | 452948 | 629.1    |           |
@@ -135,24 +135,24 @@ Feature: Verify a route from A to B
       | 34            | 53.129146,-1.866738 | Turn left onto Cheadle Road     | 179.0   | S         | 171195 | 237.8    |           |
 
     Examples: 
-      | pointA              | pointB            | pointC              | routetype | avoidance |
-      | 53.238625,-1.794511 | 53.1651,-1.776435 | 53.125221,-1.871205 | foot      |           |
+      | pointA              | pointB            | pointC              | routeOptions | avoidances |
+      | 53.238625,-1.794511 | 53.1651,-1.776435 | 53.125221,-1.871205 | foot         |            |
 
   @Routing
   Scenario Outline: Verify  Road Names on a Walking Route using one intermediate point ( Newhouses Farm)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI and avoid "<avoidance>" via "<pointC>"
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>" via "<pointC>"
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco          | waypointdesc                          | azimuth | direction | time    | distance | avoidance |
       | 7             | 53.305394,-1.819253 | Turn slight right onto Hernstone Lane | 66.0    | NE        | 304923  | 423.5    | ARoad     |
       | 14            | 53.25475,-1.727239  | Continue onto Castlegate Lane         | 183.0   | S         | 1156073 | 1605.7   |           |
 
     Examples: 
-      | pointA              | pointB             | pointC              | routetype | avoidance |
-      | 53.303058,-1.836061 | 53.28261,-1.761964 | 53.233207,-1.633878 | foot      |           |
+      | pointA              | pointB             | pointC              | routeOptions | avoidances |
+      | 53.303058,-1.836061 | 53.28261,-1.761964 | 53.233207,-1.633878 | foot         |            |
 
   @Routing
   Scenario Outline: Verify  Road Names on a Walking Route using one intermediate point ( Bakewell)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI and avoid "<avoidance>" via "<pointC>"
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>" via "<pointC>"
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco          | waypointdesc                   | azimuth | direction | time    | distance | avoidance |
       | 6             | 53.145466,-1.778242 | Continue onto Tissington Trail | 17.0    | N         | 2006616 | 2787.0   |           |
@@ -160,12 +160,12 @@ Feature: Verify a route from A to B
       | 19            | 53.20882,-1.688212  | Continue onto Monyash Road     | 55.0    | NE        | 369935  | 513.8    |           |
 
     Examples: 
-      | pointA              | pointB              | pointC              | routetype | avoidance |
-      | 53.138247,-1.752507 | 53.195653,-1.762655 | 53.211574,-1.682278 | foot      |           |
+      | pointA              | pointB              | pointC              | routeOptions | avoidances |
+      | 53.138247,-1.752507 | 53.195653,-1.762655 | 53.211574,-1.682278 | foot         |            |
 
   @Routing
   Scenario Outline: Verify  Road Names on a Walking Route  using 2 intermediate waypoints (Mill Lane)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI and avoid "<avoidance>" via "<pointC>" and "<pointD>"
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>" via "<pointC>" and "<pointD>"
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco          | waypointdesc                    | azimuth | direction | time   | distance | avoidance |
       | 5             | 53.140548,-1.810174 | Turn slight left onto Mill Lane | 216.0   | SW        | 49046  | 68.1     |           |
@@ -173,12 +173,12 @@ Feature: Verify a route from A to B
       | 16            | 53.181282,-1.869038 | Turn left onto Market Place     | 315.0   | NW        | 791    | 1.1      |           |
 
     Examples: 
-      | pointA              | pointB              | pointC             | pointD              | routetype | avoidance |
-      | 53.139805,-1.803217 | 53.133646,-1.826223 | 53.14993,-1.868096 | 53.181298,-1.869034 | foot      |           |
+      | pointA              | pointB              | pointC             | pointD              | routeOptions | avoidances |
+      | 53.139805,-1.803217 | 53.133646,-1.826223 | 53.14993,-1.868096 | 53.181298,-1.869034 | foot         |            |
 
   @Routing
   Scenario Outline: Verify  Road Names on a Walking Route  using 2 intermediate waypoints (Tag Lane)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI and avoid "<avoidance>" via "<pointC>" and "<pointD>"
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>" via "<pointC>" and "<pointD>"
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco          | waypointdesc                    | azimuth | direction | time    | distance | avoidance |
       | 7             | 53.227765,-1.848174 | Turn left onto Old Coalpit Lane | 58.0    | NE        | 908755  | 1262.2   | ARoad     |
@@ -187,12 +187,12 @@ Feature: Verify a route from A to B
       | 32            | 53.224822,-1.70717  | Turn left onto Hall End Lane    | 59.0    | NE        | 80272   | 111.5    |           |
 
     Examples: 
-      | pointA              | pointB              | pointC              | pointD              | routetype | avoidance |
-      | 53.190346,-1.802704 | 53.239419,-1.818421 | 53.280601,-1.764495 | 53.233207,-1.633878 | foot      |           |
+      | pointA              | pointB              | pointC              | pointD              | routeOptions | avoidances |
+      | 53.190346,-1.802704 | 53.239419,-1.818421 | 53.280601,-1.764495 | 53.233207,-1.633878 | foot         |            |
 
   @Routing
   Scenario Outline: Verify  Road Names on a Walking Route  using 2 intermediate waypoints (Dowlow Farm)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI and avoid "<avoidance>" via "<pointC>" and "<pointD>"
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>" via "<pointC>" and "<pointD>"
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco          | waypointdesc                  | azimuth | direction | time   | distance | avoidance |
       | 2             | 53.206014,-1.83483  | Turn right onto Midshires Way | 191.0   | S         | 265210 | 368.3    |           |
@@ -200,59 +200,60 @@ Feature: Verify a route from A to B
       | 28            | 53.124725,-1.870683 | Turn right onto Cheadle Road  | 243.0   | SW        | 121072 | 168.2    |           |
 
     Examples: 
-      | pointA              | pointB              | pointC              | pointD             | routetype | avoidance |
-      | 53.206965,-1.839021 | 53.203607,-1.857557 | 53.149631,-1.867364 | 53.11417,-1.895082 | foot      |           |
+      | pointA              | pointB              | pointC              | pointD             | routeOptions | avoidances |
+      | 53.206965,-1.839021 | 53.203607,-1.857557 | 53.149631,-1.867364 | 53.11417,-1.895082 | foot         |            |
 
   # Avoidances : A Road,Boulders,Cliff,Inland Water,Marsh,Quarry Or Pit,Scree,Rock,Mud,Sand,Shingle
   #scree
   @Routing
   Scenario Outline: Verify DPN Route without Scree avoidance -(scree)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI and avoid "<avoidance>"
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco          | waypointdesc       | azimuth | direction | time  | distance | avoidance |
       | 15            | 53.252061,-1.826618 | Continue onto Path | 97.0    | E         | 24386 | 33.9     | Scree     |
 
     Examples: 
-      | pointA              | pointB              | routetype | avoidance |
-      | 53.267104,-1.818304 | 53.131858,-1.661941 | foot      |           |
+      | pointA              | pointB              | routeOptions | avoidances |
+      | 53.267104,-1.818304 | 53.131858,-1.661941 | foot         |            |
 
   @Routing
   Scenario Outline: Verify DPN Route with Scree avoidance -(scree)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI and avoid "<avoidance>"
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints not on the route map:
       | wayPointIndex | waypointco          | waypointdesc       | azimuth | direction | time  | distance | avoidance |
       | 15            | 53.252061,-1.826618 | Continue onto Path | 97.0    | E         | 24386 | 33.9     | Scree     |
 
     Examples: 
-      | pointA              | pointB              | routetype | avoidance |
-      | 53.267104,-1.818304 | 53.131858,-1.661941 | foot      | Scree     |
+      | pointA              | pointB              | routeOptions | avoidances |
+      | 53.267104,-1.818304 | 53.131858,-1.661941 | foot         | Scree      |
 
   #cliff
+  ##############
   @Routing
   Scenario Outline: Verify DPN Route without cliff avoidance -(cliff)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI and avoid "<avoidance>"
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco          | waypointdesc        | azimuth | direction | time   | distance | avoidance |
-      | 4             | 53.312731,-1.627617 | Continue onto Route | 164.0   | S         | 264332 | 367.1    | Cliff     |
+      | wayPointIndex | waypointco          | waypointdesc        | azimuth | direction | time | distance | avoidance |
+      | 5             | 53.311409,-1.627165 | Continue onto Route | 178.0   | S         | 2655 | 3.7      | Cliff     |
 
     Examples: 
-      | pointA             | pointB              | routetype | avoidance |
-      | 53.31676,-1.631903 | 53.156465,-1.908797 | foot      |           |
+      | pointA             | pointB              | routeOptions | avoidances |
+      | 53.31676,-1.631903 | 53.156465,-1.908797 | foot         |            |
 
   @Routing
   Scenario Outline: Verify DPN Route with cliff avoidance -(cliff)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI and avoid "<avoidance>"
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints not on the route map:
-      | wayPointIndex | waypointco          | waypointdesc        | azimuth | direction | time   | distance | avoidance |
-      | 4             | 53.312731,-1.627617 | Continue onto Route | 164.0   | S         | 264332 | 367.1    | Cliff     |
+      | wayPointIndex | waypointco          | waypointdesc        | azimuth | direction | time | distance | avoidance |
+      | 5             | 53.311409,-1.627165 | Continue onto Route | 178.0   | S         | 2655 | 3.7      | Cliff     |
 
     Examples: 
-      | pointA             | pointB              | routetype | avoidance |
-      | 53.31676,-1.631903 | 53.156465,-1.908797 | foot      | Cliff     |
+      | pointA             | pointB              | routeOptions | avoidances |
+      | 53.31676,-1.631903 | 53.156465,-1.908797 | foot         | Cliff      |
 
   @Routing
   Scenario Outline: Verify DPN Route with cliff avoidance -(cliff)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI and avoid "<avoidance>"
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco          | waypointdesc        | azimuth | direction | time | distance | avoidance |
       | 3             | 53.547029,-1.979038 | Continue onto Route | 191.0   | S         | 3920 | 5.4      | Cliff     |
@@ -260,12 +261,11 @@ Feature: Verify a route from A to B
       | 7             | 53.542735,-1.981237 | Continue onto Route | 185.0   | S         | 9321 | 12.9     | Cliff     |
 
     Examples: 
-      | pointA            | pointB              | routetype | avoidance |
-      | 53.5534,-1.983177 | 53.540061,-1.978324 | foot      |           |
+      | pointA            | pointB              | routeOptions | avoidances |
+      | 53.5534,-1.983177 | 53.540061,-1.978324 | foot         |            |
 
-  @Routing
   Scenario Outline: Verify DPN Route with cliff avoidance -(cliff)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI and avoid "<avoidance>"
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints not on the route map:
       | wayPointIndex | waypointco          | waypointdesc        | azimuth | direction | time | distance | avoidance |
       | 3             | 53.547029,-1.979038 | Continue onto Route | 191.0   | S         | 3920 | 5.4      | Cliff     |
@@ -273,28 +273,63 @@ Feature: Verify a route from A to B
       | 7             | 53.542735,-1.981237 | Continue onto Route | 185.0   | S         | 9321 | 12.9     | Cliff     |
 
     Examples: 
-      | pointA            | pointB              | routetype | avoidance |
-      | 53.5534,-1.983177 | 53.540061,-1.978324 | foot      | Cliff     |
+      | pointA            | pointB              | routeOptions | avoidances |
+      | 53.5534,-1.983177 | 53.540061,-1.978324 | foot         | Cliff      |
 
   #boulders
   @Routing
   Scenario Outline: Verify DPN Route without boulders avoidance -(boulders)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI and avoid "<avoidance>"
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco          | waypointdesc        | azimuth | direction | time  | distance | avoidance |
       | 3             | 53.309004,-1.627564 | Turn left onto Path | 98.0    | E         | 99563 | 138.3    | Boulders  |
 
     Examples: 
-      | pointA              | pointB              | routetype | avoidance |
-      | 53.311217,-1.629849 | 53.156465,-1.908797 | foot      |           |
+      | pointA              | pointB              | routeOptions | avoidances |
+      | 53.311217,-1.629849 | 53.156465,-1.908797 | foot         |            |
 
-  @Routing
   Scenario Outline: Verify DPN Route with boulders avoidance -(boulders)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI and avoid "<avoidance>"
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints not on the route map:
       | wayPointIndex | waypointco          | waypointdesc        | azimuth | direction | time  | distance | avoidance |
       | 3             | 53.309004,-1.627564 | Turn left onto Path | 98.0    | E         | 99563 | 138.3    | Boulders  |
 
     Examples: 
-      | pointA              | pointB              | routetype | avoidance |
-      | 53.311217,-1.629849 | 53.156465,-1.908797 | foot      | Boulders  |
+      | pointA              | pointB              | routeOptions | avoidances |
+      | 53.311217,-1.629849 | 53.156465,-1.908797 | foot         | Boulders   |
+
+  #Multiple Avoidance
+  @Routing
+  Scenario Outline: Verify DPN Route without boulders avoidance -(boulders)
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
+    Then I should be able to verify the waypoints on the route map:
+      | wayPointIndex | waypointco          | waypointdesc        | azimuth | direction | time   | distance | avoidance |
+      | 6             | 53.545217,-1.986871 | Continue onto Route | 106.0   | E         | 1660   | 2.3      | Cliff     |
+      | 9             | 53.545038,-1.986338 | Continue onto Route | 130.0   | SE        | 178328 | 247.7    | Boulders  |
+
+    Examples: 
+      | pointA            | pointB              | routeOptions | avoidances |
+      | 53.5534,-1.983177 | 53.490733,-1.977715 | foot         |            |
+
+  @Routing
+  Scenario Outline: Verify DPN Route with boulders avoidance -(boulders)
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
+    Then I should be able to verify the waypoints not on the route map:
+      | wayPointIndex | waypointco          | waypointdesc        | azimuth | direction | time   | distance | avoidance |
+      | 6             | 53.545217,-1.986871 | Continue onto Route | 106.0   | E         | 1660   | 2.3      | Cliff     |
+      | 9             | 53.545038,-1.986338 | Continue onto Route | 130.0   | SE        | 178328 | 247.7    | Boulders  |
+
+    Examples: 
+      | pointA            | pointB              | routeOptions   | avoidances     |
+      | 53.5534,-1.983177 | 53.490733,-1.977715 | foot,fastavoid | Boulders,Cliff |
+
+  @Current
+  Scenario Outline: Verify DPN Route with boulders avoidance -()
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
+    Then I should be able to verify the waypoints on the route map:
+      | wayPointIndex | waypointco          | waypointdesc                        | azimuth | direction | time  | distance | avoidance         |
+      | 1             | 53.297007,-1.679015 | Continue onto Sir William Hill Road | 79.0    | E         | 61737 | 308.7    | cycleway, unpaved |
+
+    Examples: 
+      | pointA              | pointB              | routeOptions | avoidances |
+      | 53.298525,-1.679533 | 53.203145,-1.799292 | mountainbike |            |
diff --git a/acceptancetesting/src/test/cucumber/Routing-Exeter.feature b/acceptancetesting/src/test/cucumber/Routing-Exeter.feature
index d24d4c9d4d..31f8b33b08 100644
--- a/acceptancetesting/src/test/cucumber/Routing-Exeter.feature
+++ b/acceptancetesting/src/test/cucumber/Routing-Exeter.feature
@@ -6,400 +6,465 @@ Feature: Verify a route from A to B
   # One Way Restrictions
   @Routing
   Scenario Outline: Verify  one Way  Restrictions  on a Route (EX-Bridge South - Exteter)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco          | waypointdesc                      | azimuth | direction | time  | distance |
-      | 2             | 50.719156,-3.537811 | Continue onto A3015 (FROG STREET) | 41.0    | NE        | 13259 | 221.8    |
+      | wayPointIndex | waypointco          | waypointdesc                      | azimuth | direction | time  | distance | avoidance |
+      | 2             | 50.719156,-3.537811 | Continue onto A3015 (FROG STREET) | 41.0    | NE        | 13259 | 221.8    |           |
 
     Examples: 
-      | pointA              | pointB              | routetype |
-      | 50.717615,-3.536538 | 50.719106,-3.535359 | car       |
+      | pointA              | pointB              | routeOptions | avoidances |
+      | 50.717615,-3.536538 | 50.719106,-3.535359 | car          |            |
 
   # Same route but different waypointdesc
   @Routing
   Scenario Outline: Verify  one Way  Restrictions on a Route (Cleveladn Street-Exeter)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco         | waypointdesc               | azimuth | direction | time | distance |
-      | 2             | 50.717806,-3.54264 | Turn left onto BULLER ROAD | 137.0   | SE        | 4467 | 55.8     |
+      | wayPointIndex | waypointco         | waypointdesc               | azimuth | direction | time | distance | avoidance |
+      | 2             | 50.717806,-3.54264 | Turn left onto BULLER ROAD | 137.0   | SE        | 4467 | 55.8     |           |
 
     Examples: 
-      | pointA              | pointB              | routetype |
-      | 50.717951,-3.542331 | 50.718613,-3.539589 | car       |
+      | pointA              | pointB              | routeOptions | avoidances |
+      | 50.717951,-3.542331 | 50.718613,-3.539589 | car          |            |
 
   @Routing
   Scenario Outline: Verify  one Way  Restrictions on a Route (Cleveladn Street-Exeter)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco          | waypointdesc                    | azimuth | direction | time  | distance |
-      | 4             | 50.718462,-3.541302 | Turn left onto CLEVELAND STREET | 232.0   | SW        | 9534 | 119.2    |
+      | wayPointIndex | waypointco          | waypointdesc                    | azimuth | direction | time | distance | avoidance |
+      | 4             | 50.718462,-3.541302 | Turn left onto CLEVELAND STREET | 232.0   | SW        | 9534 | 119.2    |           |
 
     Examples: 
-      | pointA              | pointB              | routetype |
-      | 50.718282,-3.538437 | 50.717687,-3.541511 | car       |
+      | pointA              | pointB              | routeOptions | avoidances |
+      | 50.718282,-3.538437 | 50.717687,-3.541511 | car          |            |
 
   @Routing
   Scenario Outline: Verify  one Way  Restrictions (Except Buses) on a Route (SIDWELL STREET-Exeter)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco         | waypointdesc                    | azimuth | direction | time | distance |
-      | 4             | 50.726689,-3.52712 | Turn left onto LONGBROOK STREET | 190.0   | S         | 6267 | 78.3     |
+      | wayPointIndex | waypointco         | waypointdesc                    | azimuth | direction | time | distance | avoidance |
+      | 4             | 50.726689,-3.52712 | Turn left onto LONGBROOK STREET | 190.0   | S         | 6267 | 78.3     |           |
 
     Examples: 
-      | pointA              | pointB               | routetype |
-      | 50.727949,-3.523498 | 50.726428,-3.5251291 | car       |
+      | pointA              | pointB               | routeOptions | avoidances |
+      | 50.727949,-3.523498 | 50.726428,-3.5251291 | car          |            |
 
   @Routing
   Scenario Outline: Verify  oneway Restrictions on a Route (Exeter)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the trackPoints not on the route map:
       | trackPointco       |
       | 50.71958,-3.534089 |
 
     Examples: 
-      | pointA              | pointB             | routetype |
-      | 50.720492,-3.535221 | 50.718641,-3.53476 | car       |
+      | pointA              | pointB             | routeOptions | avoidances |
+      | 50.720492,-3.535221 | 50.718641,-3.53476 | car          |            |
 
   @KnownIssues
   Scenario Outline: Verify  one Way  Restrictions  on a Route (Exeter WSPIP-98)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints not on the route map:
-      | wayPointIndex | waypointco          | waypointdesc                    | azimuth | direction | time | distance |
-      | 7             | 50.722198,-3.526704 | Turn left onto SOUTHERNHAY EAST | 32      | NE        | 5838 | 56.761   |
+      | wayPointIndex | waypointco          | waypointdesc                    | azimuth | direction | time | distance | avoidance |
+      | 7             | 50.722198,-3.526704 | Turn left onto SOUTHERNHAY EAST | 32      | NE        | 5838 | 56.761   |           |
 
     Examples: 
-      | pointA              | pointB              | routetype |
-      | 50.720454,-3.530089 | 50.722657,-3.526321 | car       |
+      | pointA              | pointB              | routeOptions | avoidances |
+      | 50.720454,-3.530089 | 50.722657,-3.526321 | car          |            |
 
   # No Entry Restrictions
   @Routing
   Scenario Outline: Verify  No Entry  Restrictions on a Route (High Street(London Inn Square)-Exeter)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco         | waypointdesc                                 | azimuth | direction | time  | distance |
-      | 2             | 50.725549,-3.52693 | Turn slight left onto NEW NORTH ROAD (B3183) | 285.0   | W         | 57545 | 729.1    |
+      | wayPointIndex | waypointco         | waypointdesc                                 | azimuth | direction | time  | distance | avoidance |
+      | 2             | 50.725549,-3.52693 | Turn slight left onto NEW NORTH ROAD (B3183) | 285.0   | W         | 57545 | 729.1    |           |
 
     Examples: 
-      | pointA              | pointB             | routetype |
-      | 50.725425,-3.526925 | 50.72442,-3.532756 | car       |
+      | pointA              | pointB             | routeOptions | avoidances |
+      | 50.725425,-3.526925 | 50.72442,-3.532756 | car          |            |
 
   @Routing
   Scenario Outline: Verify  No Entry  Restrictions on a Route (CHEEK STREET-Exeter)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco          | waypointdesc                     | azimuth | direction | time | distance |
-      | 2             | 50.727244,-3.522476 | Turn left onto SUMMERLAND STREET | 313.0   | NW        | 5223 | 65.3     |
+      | wayPointIndex | waypointco          | waypointdesc                     | azimuth | direction | time | distance | avoidance |
+      | 2             | 50.727244,-3.522476 | Turn left onto SUMMERLAND STREET | 313.0   | NW        | 5223 | 65.3     |           |
 
     Examples: 
-      | pointA              | pointB             | routetype |
-      | 50.726234,-3.524072 | 50.727186,-3.52392 | car       |
+      | pointA              | pointB             | routeOptions | avoidances |
+      | 50.726234,-3.524072 | 50.727186,-3.52392 | car          |            |
 
   @Routing
   Scenario Outline: Verify  No Entry(Except for Buses and Taxis)  Restrictions on a Route (Sidwell Street-Exeter)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco         | waypointdesc                           | azimuth | direction | time  | distance |
-      | 4             | 50.726418,-3.52381 | Turn slight left onto BAMPFYLDE STREET | 45.0    | NE        | 10510 | 131.4    |
+      | wayPointIndex | waypointco         | waypointdesc                           | azimuth | direction | time  | distance | avoidance |
+      | 4             | 50.726418,-3.52381 | Turn slight left onto BAMPFYLDE STREET | 45.0    | NE        | 10510 | 131.4    |           |
 
     Examples: 
-      | pointA              | pointB             | routetype |
-      | 50.726529,-3.524928 | 50.727002,-3.52419 | car       |
+      | pointA              | pointB             | routeOptions | avoidances |
+      | 50.726529,-3.524928 | 50.727002,-3.52419 | car          |            |
 
   # No Turns Restrictions and Roundabout
   @Routing
   Scenario Outline: Verify  No Turn  Restrictions on a Route (Western Way-Exeter)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco          | waypointdesc                                   | azimuth | direction | time  | distance |
-      | 2             | 50.728509,-3.520647 | At roundabout, take exit 1 onto SIDWELL STREET | 282.0   | W         | 16437 | 212.5    |
+      | wayPointIndex | waypointco          | waypointdesc                                   | azimuth | direction | time  | distance | avoidance |
+      | 2             | 50.728509,-3.520647 | At roundabout, take exit 1 onto SIDWELL STREET | 282.0   | W         | 16437 | 212.5    |           |
 
     Examples: 
-      | pointA              | pointB              | routetype |
-      | 50.726735,-3.520955 | 50.726914,-3.522033 | car       |
+      | pointA              | pointB              | routeOptions | avoidances |
+      | 50.726735,-3.520955 | 50.726914,-3.522033 | car          |            |
 
   @Routing
   Scenario Outline: Verify  No Turn Restriction (Denmark Road-Exeter)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco          | waypointdesc                  | azimuth | direction | time  | distance |
-      | 3             | 50.725002,-3.520632 | Turn left onto RUSSELL STREET | 303.0   | NW        | 19909 | 248.9    |
+      | wayPointIndex | waypointco          | waypointdesc                  | azimuth | direction | time  | distance | avoidance |
+      | 3             | 50.725002,-3.520632 | Turn left onto RUSSELL STREET | 303.0   | NW        | 19909 | 248.9    |           |
 
     Examples: 
-      | pointA              | pointB              | routetype |
-      | 50.724901,-3.521588 | 50.724524,-3.520923 | car       |
+      | pointA              | pointB              | routeOptions | avoidances |
+      | 50.724901,-3.521588 | 50.724524,-3.520923 | car          |            |
 
   @Routing
   Scenario Outline: Verify  Turn Restrictions  on a Route (Exeter)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the trackPoints not on the route map:
       | trackPointco        |
       | 50.721201,-3.532498 |
 
     Examples: 
-      | pointA             | pointB             | routetype |
-      | 50.72148,-3.532485 | 50.721888,-3.53182 | car       |
+      | pointA             | pointB             | routeOptions | avoidances |
+      | 50.72148,-3.532485 | 50.721888,-3.53182 | car          |            |
 
+  # The below issue is a data issue and been reported into jira as route-67
   @KnownIssues
   Scenario Outline: Verify No  Turn Restrictions(Except Bus)  on a Route (BELGROVE ROAD -Exeter ROUTE-67)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints not on the route map:
-      | wayPointIndex | waypointco         | waypointdesc                 | azimuth | direction | time | distance |
-      | 2             | 50.725997,-3.52296 | Turn left onto CHEEKE STREET | 135     | SE        | 5639 | 56.915   |
+      | wayPointIndex | waypointco         | waypointdesc                 | azimuth | direction | time | distance | avoidance |
+      | 2             | 50.725997,-3.52296 | Turn left onto CHEEKE STREET | 135     | SE        | 5639 | 56.915   |           |
 
     Examples: 
-      | pointA              | pointB             | routetype |
-      | 50.726085,-3.522837 | 50.725076,-3.52442 | car       |
+      | pointA              | pointB             | routeOptions | avoidances |
+      | 50.726085,-3.522837 | 50.725076,-3.52442 | car          |            |
 
   # Mandatory Turn Restrictions
   @Routing
   Scenario Outline: Verify  Mandatory Turn(with exceptions) at Exeter area
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco          | waypointdesc                | azimuth | direction | time | distance |
-      | 2             | 50.726462,-3.523882 | Continue onto CHEEKE STREET | 133.0   | SE        | 564  | 7.1      |
+      | wayPointIndex | waypointco          | waypointdesc                | azimuth | direction | time | distance | avoidance |
+      | 2             | 50.726462,-3.523882 | Continue onto CHEEKE STREET | 133.0   | SE        | 564  | 7.1      |           |
 
     Examples: 
-      | pointA              | pointB              | routetype |
-      | 50.726823,-3.524432 | 50.725423,-3.526813 | car       |
+      | pointA              | pointB              | routeOptions | avoidances |
+      | 50.726823,-3.524432 | 50.725423,-3.526813 | car          |            |
 
   @Routing
   Scenario Outline: Verify  Mandatory Turn at Exeter area(DENMARK ROAD)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco          | waypointdesc                  | azimuth | direction | time  | distance |
-      | 2             | 50.725002,-3.520632 | Turn left onto RUSSELL STREET | 303.0   | NW        | 19909 | 248.9    |
+      | wayPointIndex | waypointco          | waypointdesc                  | azimuth | direction | time  | distance | avoidance |
+      | 2             | 50.725002,-3.520632 | Turn left onto RUSSELL STREET | 303.0   | NW        | 19909 | 248.9    |           |
 
     Examples: 
-      | pointA              | pointB              | routetype |
-      | 50.724777,-3.520811 | 50.724394,-3.520953 | car       |
+      | pointA              | pointB              | routeOptions | avoidances |
+      | 50.724777,-3.520811 | 50.724394,-3.520953 | car          |            |
 
   @Routing @KnownIssues
   Scenario Outline: Verify  Mandatory Turn at Exeter area(COLLEGE ROAD)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco         | waypointdesc                | azimuth | direction | time  | distance |
-      | 2             | 50.72133,-3.519451 | Turn right onto SPICER ROAD | 278     | W         | 41233 | 400.903  |
+      | wayPointIndex | waypointco         | waypointdesc                | azimuth | direction | time  | distance | avoidance |
+      | 2             | 50.72133,-3.519451 | Turn right onto SPICER ROAD | 278     | W         | 41233 | 400.903  |           |
 
     Examples: 
-      | pointA             | pointB              | routetype |
-      | 50.723597,-3.51776 | 50.723773,-3.517251 | car       |
+      | pointA             | pointB              | routeOptions | avoidances |
+      | 50.723597,-3.51776 | 50.723773,-3.517251 | car          |            |
 
   @Routing
   Scenario Outline: Verify  Mandatory Turn Restriction (Denmark Road-Exeter)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints not on the route map:
-      | wayPointIndex | waypointco          | waypointdesc                           | azimuth | direction | time | distance |
-      | 2             | 50.724703,-3.520835 | Turn right onto HEAVITREE ROAD (B3183) | 293.0   | NW        | 1118 | 10.9     |
+      | wayPointIndex | waypointco          | waypointdesc                           | azimuth | direction | time | distance | avoidance |
+      | 2             | 50.724703,-3.520835 | Turn right onto HEAVITREE ROAD (B3183) | 293.0   | NW        | 1118 | 10.9     |           |
 
     Examples: 
-      | pointA              | pointB             | routetype |
-      | 50.724378,-3.520993 | 50.72413,-3.518874 | car       |
+      | pointA              | pointB             | routeOptions | avoidances |
+      | 50.724378,-3.520993 | 50.72413,-3.518874 | car          |            |
 
   # Access Limited To
   @Routing
   Scenario Outline: Verify  Access Limited To  Restrictions on a Route (North Street-Exeter)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco       | waypointdesc               | azimuth | direction | time  | distance |
-      | 2             | 50.72258,-3.5326 | Continue onto SOUTH STREET | 135.0   | SE        | 15537 | 194.2    |
+      | wayPointIndex | waypointco       | waypointdesc               | azimuth | direction | time  | distance | avoidance |
+      | 2             | 50.72258,-3.5326 | Continue onto SOUTH STREET | 135.0   | SE        | 15537 | 194.2    |           |
 
     Examples: 
-      | pointA              | pointB              | routetype |
-      | 50.722996,-3.533354 | 50.726428,-3.525129 | car       |
+      | pointA              | pointB              | routeOptions | avoidances |
+      | 50.722996,-3.533354 | 50.726428,-3.525129 | car          |            |
 
   @Routing
   Scenario Outline: Verify  Access Limited To  Restrictions on a Route (Paris Street-Exeter)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco         | waypointdesc                           | azimuth | direction | time  | distance |
-      | 5             | 50.726418,-3.52381 | Turn slight left onto BAMPFYLDE STREET | 45.0    | NE        | 10510 | 131.4    |
+      | wayPointIndex | waypointco         | waypointdesc                           | azimuth | direction | time  | distance | avoidance |
+      | 5             | 50.726418,-3.52381 | Turn slight left onto BAMPFYLDE STREET | 45.0    | NE        | 10510 | 131.4    |           |
 
     Examples: 
-      | pointA              | pointB              | routetype |
-      | 50.724989,-3.526006 | 50.729735,-3.519862 | car       |
+      | pointA              | pointB              | routeOptions | avoidances |
+      | 50.724989,-3.526006 | 50.729735,-3.519862 | car          |            |
 
   # Access Prohibited To
   @Routing
   Scenario Outline: Verify  Access Prohibited To  Restrictions on a Route (Iron Bridge Street-Exeter)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco         | waypointdesc                   | azimuth | direction | time  | distance |
-      | 2             | 50.724661,-3.53639 | Turn left onto ST DAVID'S HILL | 310.0   | NW        | 35154 | 439.4    |
+      | wayPointIndex | waypointco         | waypointdesc                   | azimuth | direction | time  | distance | avoidance |
+      | 2             | 50.724661,-3.53639 | Turn left onto ST DAVID'S HILL | 310.0   | NW        | 35154 | 439.4    |           |
 
     Examples: 
-      | pointA             | pointB              | routetype |
-      | 50.72458,-3.536493 | 50.723442,-3.534131 | car       |
+      | pointA             | pointB              | routeOptions | avoidances |
+      | 50.72458,-3.536493 | 50.723442,-3.534131 | car          |            |
 
   @Routing @KnownIssues
   Scenario Outline: Verify  Access Prohibited To  Restrictions on a Route (Upper Paul Street-Exeter)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco          | waypointdesc                | azimuth | direction | time  | distance |
-      | 2             | 50.724819,-3.532223 | Turn left onto QUEEN STREET | 324.0   | NW        | 37994 | 369.4    |
+      | wayPointIndex | waypointco          | waypointdesc                | azimuth | direction | time  | distance | avoidance |
+      | 2             | 50.724819,-3.532223 | Turn left onto QUEEN STREET | 324.0   | NW        | 37994 | 369.4    |           |
 
     Examples: 
-      | pointA              | pointB              | routetype |
-      | 50.724614,-3.532555 | 50.724639,-3.530457 | car       |
+      | pointA              | pointB              | routeOptions | avoidances |
+      | 50.724614,-3.532555 | 50.724639,-3.530457 | car          |            |
 
   # Ford
   @Routing
   Scenario Outline: Verify  Ford  Restrictions on a Route (BONHAY Road-Exeter)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco          | waypointdesc                    | azimuth | direction | time  | distance |
-      | 4             | 50.727823,-3.540036 | Turn slight left onto HELE ROAD | 85.0    | E         | 12281 | 153.5    |
+      | wayPointIndex | waypointco          | waypointdesc                    | azimuth | direction | time  | distance | avoidance |
+      | 4             | 50.727823,-3.540036 | Turn slight left onto HELE ROAD | 85.0    | E         | 12281 | 153.5    |           |
 
     Examples: 
-      | pointA             | pointB              | routetype |
-      | 50.731111,-3.54277 | 50.719327,-3.538255 | car       |
+      | pointA             | pointB              | routeOptions | avoidances |
+      | 50.731111,-3.54277 | 50.719327,-3.538255 | car          |            |
 
   @Routing
   Scenario Outline: Verify  Ford  Restrictions on a Route (Quadrangle Road-Exeter)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco          | waypointdesc               | azimuth | direction | time  | distance |
-      | 2             | 50.730716,-3.530028 | Turn left onto HORSEGUARDS | 189.0   | S         | 21893 | 273.7    |
+      | wayPointIndex | waypointco          | waypointdesc               | azimuth | direction | time  | distance | avoidance |
+      | 2             | 50.730716,-3.530028 | Turn left onto HORSEGUARDS | 189.0   | S         | 21893 | 273.7    |           |
 
     Examples: 
-      | pointA             | pointB              | routetype |
-      | 50.730861,-3.52934 | 50.731808,-3.529829 | car       |
+      | pointA             | pointB              | routeOptions | avoidances |
+      | 50.730861,-3.52934 | 50.731808,-3.529829 | car          |            |
 
   # Gate
   @Routing
   Scenario Outline: Verify  Gate  Restrictions on a Route (Cathedral Close Road-Exeter)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco          | waypointdesc                     | azimuth | direction | time  | distance |
-      | 3             | 50.722198,-3.526704 | Turn right onto SOUTHERNHAY EAST | 202.0   | SW        | 20129 | 255.9    |
+      | wayPointIndex | waypointco          | waypointdesc                     | azimuth | direction | time  | distance | avoidance |
+      | 3             | 50.722198,-3.526704 | Turn right onto SOUTHERNHAY EAST | 202.0   | SW        | 20129 | 255.9    |           |
 
     Examples: 
-      | pointA              | pointB             | routetype |
-      | 50.722333,-3.527488 | 50.72243,-3.532372 | car       |
+      | pointA              | pointB             | routeOptions | avoidances |
+      | 50.722333,-3.527488 | 50.72243,-3.532372 | car          |            |
 
   @Routing
   Scenario Outline: Verify  Gate  Restrictions on a Route (Lower Northen Road-Exeter)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco          | waypointdesc        | azimuth | direction | time  | distance |
-      | 2             | 50.722081,-3.539012 | Turn left onto A377 | 166.0   | S         | 29003 | 395.5    |
+      | wayPointIndex | waypointco          | waypointdesc        | azimuth | direction | time  | distance | avoidance |
+      | 2             | 50.722081,-3.539012 | Turn left onto A377 | 166.0   | S         | 29003 | 395.5    |           |
 
     Examples: 
-      | pointA            | pointB              | routetype |
-      | 50.7244,-3.535817 | 50.723705,-3.534493 | car       |
+      | pointA            | pointB              | routeOptions | avoidances |
+      | 50.7244,-3.535817 | 50.723705,-3.534493 | car          |            |
 
   #Private Road
   @Routing
   Scenario Outline: Verify  a Private Road (Publicly Accessible) on a Route  (PERRY ROAD)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco         | waypointdesc                    | azimuth | direction | time  | distance |
-      | 2             | 50.732011,-3.53798 | Turn right onto STREATHAM DRIVE | 2.0     | N         | 13195 | 166.8    |
+      | wayPointIndex | waypointco         | waypointdesc                    | azimuth | direction | time  | distance | avoidance |
+      | 2             | 50.732011,-3.53798 | Turn right onto STREATHAM DRIVE | 2.0     | N         | 13195 | 166.8    |           |
 
     Examples: 
-      | pointA              | pointB              | routetype |
-      | 50.732296,-3.535372 | 50.733538,-3.537462 | car       |
+      | pointA              | pointB              | routeOptions | avoidances |
+      | 50.732296,-3.535372 | 50.733538,-3.537462 | car          |            |
 
   #Roundabout
   @Routing
   Scenario Outline: Verify a  Private Road (Publicly Accessible) on a Route (QUEEN STREET)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco          | waypointdesc                                           | azimuth | direction | time  | distance |
-      | 2             | 50.727397,-3.535531 | At roundabout, take exit 3 onto NEW NORTH ROAD (B3183) | 295.0   | NW        | 14023 | 181.3    |
+      | wayPointIndex | waypointco          | waypointdesc                                           | azimuth | direction | time  | distance | avoidance |
+      | 2             | 50.727397,-3.535531 | At roundabout, take exit 3 onto NEW NORTH ROAD (B3183) | 295.0   | NW        | 14023 | 181.3    |           |
 
     Examples: 
-      | pointA              | pointB              | routetype |
-      | 50.727003,-3.535041 | 50.727023,-3.533083 | car       |
+      | pointA              | pointB              | routeOptions | avoidances |
+      | 50.727003,-3.535041 | 50.727023,-3.533083 | car          |            |
 
   @Routing
   Scenario Outline: Verify a PrivateRoad -Restricted Access(WESTERN WAY)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco         | waypointdesc                      | azimuth | direction | time | distance |
-      | 1             | 50.72593,-3.521909 | Continue onto B3212 (WESTERN WAY) | 38.0    | NE        | 3099 | 38.7     |
+      | wayPointIndex | waypointco         | waypointdesc                      | azimuth | direction | time | distance | avoidance |
+      | 1             | 50.72593,-3.521909 | Continue onto B3212 (WESTERN WAY) | 38.0    | NE        | 3099 | 38.7     |           |
 
     Examples: 
-      | pointA              | pointB             | routetype |
-      | 50.725876,-3.521801 | 50.72619,-3.521541 | car       |
+      | pointA              | pointB             | routeOptions | avoidances |
+      | 50.725876,-3.521801 | 50.72619,-3.521541 | car          |            |
 
   @Routing
   Scenario Outline: Verify a Private Road - Restricted Access (Denmark Road-Exeter)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the trackPoints not on the route map:
       | trackPointco      |
       | 50.723966,-3.5198 |
 
     Examples: 
-      | pointA              | pointB             | routetype |
-      | 50.724316,-3.521008 | 50.72413,-3.518874 | car       |
+      | pointA              | pointB             | routeOptions | avoidances |
+      | 50.724316,-3.521008 | 50.72413,-3.518874 | car          |            |
 
   #Roundabouts
   @Routing
   Scenario Outline: Verify a roundabout(WESTERN WAY)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco          | waypointdesc                                   | azimuth | direction | time  | distance |
-      | 2             | 50.728793,-3.520273 | At roundabout, take exit 2 onto SIDWELL STREET | 178.0   | S         | 19800 | 259.2    |
+      | wayPointIndex | waypointco          | waypointdesc                                   | azimuth | direction | time  | distance | avoidance |
+      | 2             | 50.728793,-3.520273 | At roundabout, take exit 2 onto SIDWELL STREET | 178.0   | S         | 19800 | 259.2    |           |
 
     Examples: 
-      | pointA              | pointB              | routetype |
-      | 50.729277,-3.519078 | 50.728889,-3.522884 | car       |
+      | pointA              | pointB              | routeOptions | avoidances |
+      | 50.729277,-3.519078 | 50.728889,-3.522884 | car          |            |
 
   @Routing
   Scenario Outline: Verify a roundabout(WESTERN WAY)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco          | waypointdesc                                        | azimuth | direction | time  | distance |
-      | 2             | 50.725096,-3.522378 | At roundabout, take exit 4 onto B3212 (WESTERN WAY) | 239.0   | SW        | 19384 | 255.8    |
+      | wayPointIndex | waypointco          | waypointdesc                                        | azimuth | direction | time  | distance | avoidance |
+      | 2             | 50.725096,-3.522378 | At roundabout, take exit 4 onto B3212 (WESTERN WAY) | 239.0   | SW        | 19384 | 255.8    |           |
 
     Examples: 
-      | pointA              | pointB              | routetype |
-      | 50.724137,-3.518937 | 50.728366,-3.524132 | car       |
-      
-     # Quickest route
+      | pointA              | pointB              | routeOptions | avoidances |
+      | 50.724137,-3.518937 | 50.728366,-3.524132 | car          |            |
+
+  # Quickest route
   # Motorways (Victoria Street, Union Road ,Blackhall Road ,Well Street ,Devon Shire Place, Culverland Road).These roads are converted into motorways in Exeter
-      
-      @Routing
+  @Routing
   Scenario Outline: Verify  a quickest route  on a Route (Springfield Road-Exeter)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco          | waypointdesc                    | azimuth | direction | time | distance |
-      | 2             | 50.733764,-3.523212 | Turn right onto VICTORIA STREET | 150.0   | SE        | 7689 | 213.6    |
+      | wayPointIndex | waypointco          | waypointdesc                    | azimuth | direction | time | distance | avoidance |
+      | 2             | 50.733764,-3.523212 | Turn right onto VICTORIA STREET | 150.0   | SE        | 7689 | 213.6    |           |
 
     Examples: 
-      | pointA             | pointB            | routetype |
-      | 50.733719,-3.52332 | 50.732556,-3.5211 | car       |
+      | pointA             | pointB            | routeOptions | avoidances |
+      | 50.733719,-3.52332 | 50.732556,-3.5211 | car          |            |
 
   @Routing
   Scenario Outline: Verify  a quickest route  on a Route (DEVON SHIRE PLACE-Exeter)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco          | waypointdesc                      | azimuth | direction | time | distance |
-      | 3             | 50.733574,-3.524027 | Turn right onto DEVON SHIRE PLACE | 162.0   | S         | 8490 | 235.9    |
+      | wayPointIndex | waypointco          | waypointdesc                      | azimuth | direction | time | distance | avoidance |
+      | 3             | 50.733574,-3.524027 | Turn right onto DEVON SHIRE PLACE | 162.0   | S         | 8490 | 235.9    |           |
 
     Examples: 
-      | pointA              | pointB             | routetype |
-      | 50.734095,-3.524696 | 50.72809,-3.524451 | car       |
+      | pointA              | pointB             | routeOptions | avoidances |
+      | 50.734095,-3.524696 | 50.72809,-3.524451 | car          |            |
 
   @Routing
   Scenario Outline: Verify  a quickest route  on a Route (BLACKALL ROAD-Exeter)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco          | waypointdesc                                | azimuth | direction | time  | distance |
-      | 3             | 50.727984,-3.530548 | Turn sharp left onto NEW NORTH ROAD (B3183) | 117.0   | SE        | 22108 | 276.4    |
+      | wayPointIndex | waypointco          | waypointdesc                                | azimuth | direction | time  | distance | avoidance |
+      | 3             | 50.727984,-3.530548 | Turn sharp left onto NEW NORTH ROAD (B3183) | 117.0   | SE        | 22108 | 276.4    |           |
 
     Examples: 
-      | pointA              | pointB             | routetype |
-      | 50.729887,-3.526896 | 50.726279,-3.52780 | car       |
+      | pointA              | pointB             | routeOptions | avoidances |
+      | 50.729887,-3.526896 | 50.726279,-3.52780 | car          |            |
 
   @Routing
   Scenario Outline: Verify  a quickest route  on a Route (VICTORIA STREET-Exeter)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
+    Then I should be able to verify the waypoints on the route map:
+      | wayPointIndex | waypointco          | waypointdesc                    | azimuth | direction | time | distance | avoidance |
+      | 2             | 50.733764,-3.523212 | Turn right onto VICTORIA STREET | 150.0   | SE        | 7689 | 213.6    |           |
+
+    Examples: 
+      | pointA              | pointB              | routeOptions | avoidances |
+      | 50.733648,-3.523662 | 50.732844,-3.521332 | car          |            |
+
+  # Shortest and Fastest Routes
+  @Routing
+  Scenario Outline: Verify  a shortest route  on a Route (St DAVID's-Exeter)
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
+    Then I should be able to verify the waypoints on the route map:
+      | wayPointIndex | waypointco         | waypointdesc                        | azimuth | direction | time  | distance | avoidance |
+      | 6             | 50.725549,-3.52693 | Turn sharp left onto SIDWELL STREET | 47.0    | NE        | 17774 | 226.1    |           |
+
+    Examples: 
+      | pointA              | pointB             | routeOptions | avoidances |
+      | 50.729373,-3.540902 | 50.725564,-3.51809 | car,shortest |            |
+
+  @Routing
+  Scenario Outline: Verify  a fastest route  on a Route (St DAVID's-Exeter)
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
+    Then I should be able to verify the waypoints on the route map:
+      | wayPointIndex | waypointco          | waypointdesc                 | azimuth | direction | time  | distance | avoidance |
+      | 6             | 50.727984,-3.530548 | Turn left onto BLACKALL ROAD | 34.0    | NE        | 13596 | 377.7    |           |
+
+    Examples: 
+      | pointA              | pointB             | routeOptions | avoidances |
+      | 50.729373,-3.540902 | 50.725564,-3.51809 | car,fastest  |            |
+
+  @Routing
+  Scenario Outline: Verify  a shortest route  on a Route (Prince Of Wales Road-Exeter)
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
+    Then I should be able to verify the waypoints on the route map:
+      | wayPointIndex | waypointco         | waypointdesc                          | azimuth | direction | time  | distance | avoidance |
+      | 2             | 50.727823,-3.540036 | Turn slight left onto HELE ROAD | 85.0   | E        | 12281 | 153.5    |           |
+    Examples: 
+      | pointA              | pointB             | routeOptions | avoidances |
+      | 50.729373,-3.540902 | 50.725564,-3.51809 | car,shortest |            |
+
+  @Routing
+  Scenario Outline: Verify  a fastest route  on a Route (Prince Of Wales Road-Exeter)
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
+    Then I should be able to verify the waypoints on the route map:
+      | wayPointIndex | waypointco          | waypointdesc             | azimuth | direction | time | distance | avoidance |
+      | 2             | 50.733417,-3.524972 | Continue onto UNION ROAD | 77.0    | E         | 2478 | 68.8     |           |
+
+    Examples: 
+      | pointA              | pointB             | routeOptions | avoidances |
+      | 50.732019,-3.537145 | 50.725564,-3.51809 | car,fastest  |            |
+
+  @Routing
+  Scenario Outline: Verify  a shortest route  on a Route (Blackall Road - Exeter)
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
+    Then I should be able to verify the waypoints on the route map:
+      | wayPointIndex | waypointco          | waypointdesc                                | azimuth | direction | time  | distance | avoidance |
+      | 2             | 50.727984,-3.530548 | Turn sharp left onto NEW NORTH ROAD (B3183) | 117.0   | SE        | 29739 | 378.4    |           |
+
+    Examples: 
+      | pointA              | pointB              | routeOptions | avoidances |
+      | 50.728119,-3.530372 | 50.723788,-3.517289 | car,shortest |            |
+
+  @Routing
+  Scenario Outline: Verify  a fastest route  on a Route (Blackall Road - Exeter)
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco          | waypointdesc                    | azimuth | direction | time | distance |
-      | 2             | 50.733764,-3.523212 | Turn right onto VICTORIA STREET | 150.0   | SE        | 7689 | 213.6    |
+      | wayPointIndex | waypointco         | waypointdesc                      | azimuth | direction | time | distance | avoidance |
+      | 2             | 50.729609,-3.52599 | Turn right onto PENNSYLVANIA ROAD | 193.0   | S         | 4106 | 51.3     |           |
 
     Examples: 
-      | pointA              | pointB              | routetype |
-      | 50.733648,-3.523662 | 50.732844,-3.521332 | car       |
-      
+      | pointA              | pointB              | routeOptions | avoidances |
+      | 50.728119,-3.530372 | 50.723788,-3.517289 | car,fastest  |            |
diff --git a/acceptancetesting/src/test/cucumber/routing.feature b/acceptancetesting/src/test/cucumber/routing.feature
index 341a660e1c..c67fbdf1c9 100644
--- a/acceptancetesting/src/test/cucumber/routing.feature
+++ b/acceptancetesting/src/test/cucumber/routing.feature
@@ -5,434 +5,587 @@ Feature: Verify a route from A to B
 
   @Routing
   Scenario Outline: Verify  waypoints on a Route
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco          | waypointdesc                 | azimuth | direction | time | distance |
-      | 1             | 51.472387,-0.361788 | Continue onto ELLINGTON ROAD | 286.0   | W         | 8390 | 104.9    |
+      | wayPointIndex | waypointco          | waypointdesc                 | azimuth | direction | time | distance | avoidance |
+      | 1             | 51.472387,-0.361788 | Continue onto ELLINGTON ROAD | 286.0   | W         | 8390 | 104.9    |           |
 
     Examples: 
-      | pointA                                 | pointB                                 | routetype |
-      | 51.471546541834144,-0.3618621826171875 | 51.45914115860512,-0.96679687499999995 | car       |
+      | pointA                                 | pointB                                 | routeOptions | avoidances |
+      | 51.471546541834144,-0.3618621826171875 | 51.45914115860512,-0.96679687499999995 | car          |            |
 
   @Routing
   Scenario Outline: Verify  waypoints on a Route from Hounslow to Reading
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco          | waypointdesc                           | azimuth | direction | time  | distance |
-      | 1             | 51.472387,-0.361788 | Continue onto ELLINGTON ROAD           | 286.0   | W         | 8390  | 104.9    |
-      | 9             | 51.435626,-0.866024 | Continue onto A329(M)                  | 301.0   | NW        | 72994 | 2027.7   |
-      | 16            | 51.453903,-0.961826 | Continue onto WATLINGTON STREET (A329) | 341.0   | N         | 8584  | 132.7    |
+      | wayPointIndex | waypointco          | waypointdesc                           | azimuth | direction | time  | distance | avoidance |
+      | 1             | 51.472387,-0.361788 | Continue onto ELLINGTON ROAD           | 286.0   | W         | 8390  | 104.9    |           |
+      | 9             | 51.435626,-0.866024 | Continue onto A329(M)                  | 301.0   | NW        | 72994 | 2027.7   |           |
+      | 16            | 51.453903,-0.961826 | Continue onto WATLINGTON STREET (A329) | 341.0   | N         | 8584  | 132.7    |           |
 
     Examples: 
-      | pointA                                 | pointB                                 | routetype |
-      | 51.471546541834144,-0.3618621826171875 | 51.45914115860512,-0.96679687499999995 | car       |
+      | pointA                                 | pointB                                 | routeOptions | avoidances |
+      | 51.471546541834144,-0.3618621826171875 | 51.45914115860512,-0.96679687499999995 | car          |            |
 
   @Routing
   Scenario Outline: Verify  waypoints on a Route from Southampton to Glasgow
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco          | waypointdesc                                             | azimuth | direction | time    | distance |
-      | 1             | 50.896796,-1.400544 | Continue onto PLATFORM ROAD (A33)                        | 254.0   | W         | 3192    | 84.3     |
-      | 16            | 50.951921,-1.404239 | At roundabout, take exit 1 onto A33                      | 318.0   | NW        | 7083    | 187.0    |
-      | 17            | 50.953446,-1.403571 | Turn slight right onto M3                                | 28.0    | NE        | 566900  | 15747.6  |
-      | 18            | 51.07086,-1.292917  | At roundabout, take exit 2 onto A34 (WINCHESTER BY-PASS) | 284.0   | NE        | 55129   | 1454.8   |
-      | 20            | 51.868385,-1.199845 | At roundabout, take exit 1 onto M40                      | 357.0   | N         | 2636747 | 73242.2  |
-      | 24            | 52.381175,-1.790061 | At roundabout, take exit 1 onto A34 (STRATFORD ROAD)     | 301.0   | NW        | 46514   | 1227.5   |
+      | wayPointIndex | waypointco          | waypointdesc                                             | azimuth | direction | time    | distance | avoidance |
+      | 1             | 50.896796,-1.400544 | Continue onto PLATFORM ROAD (A33)                        | 254.0   | W         | 3192    | 84.3     |           |
+      | 16            | 50.951921,-1.404239 | At roundabout, take exit 1 onto A33                      | 318.0   | NW        | 7083    | 187.0    |           |
+      | 17            | 50.953446,-1.403571 | Turn slight right onto M3                                | 28.0    | NE        | 566900  | 15747.6  |           |
+      | 18            | 51.07086,-1.292917  | At roundabout, take exit 2 onto A34 (WINCHESTER BY-PASS) | 284.0   | NE        | 55129   | 1454.8   |           |
+      | 20            | 51.868385,-1.199845 | At roundabout, take exit 1 onto M40                      | 357.0   | N         | 2636747 | 73242.2  |           |
+      | 24            | 52.381175,-1.790061 | At roundabout, take exit 1 onto A34 (STRATFORD ROAD)     | 301.0   | NW        | 46514   | 1227.5   |           |
 
     Examples: 
-      | pointA              | pointB             | routetype |
-      | 50.896617,-1.400465 | 55.861284,-4.24996 | car       |
+      | pointA              | pointB             | routeOptions | avoidances |
+      | 50.896617,-1.400465 | 55.861284,-4.24996 | car          |            |
 
-  @Routing 
+  @Routing
   Scenario Outline: Verify  waypoints on a Route from London to Birmingham
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco          | waypointdesc                                       | azimuth | direction | time  | distance |
-      | 1             | 51.507234,-0.127584 | At roundabout, take exit 2 onto CHARING CROSS (A4) | 253.0   | W         | 4202  | 111.0    |
-      | 7             | 51.517207,-0.142804 | Turn slight left onto A4201                        | 307.0   | NW        | 1628  | 43.0     |
-      | 21            | 51.577774,-0.220823 | Continue onto A41 (HENDON WAY)                     | 301.0   | NW        | 28342 | 748.0    |
-      | 22            | 51.582726,-0.227154 | Continue onto A41 (WATFORD WAY)            | 340.0   | N        | 88373 | 2332.3    |
-      | 23            | 51.601209,-0.234509 | Continue onto A1 (WATFORD WAY (BARNET BY-PASS))                     | 325.0   | NW        | 72410 | 1911.0    |
+      | wayPointIndex | waypointco          | waypointdesc                                       | azimuth | direction | time  | distance | avoidance |
+      | 1             | 51.507234,-0.127584 | At roundabout, take exit 2 onto CHARING CROSS (A4) | 253.0   | W         | 4202  | 111.0    |           |
+      | 7             | 51.517207,-0.142804 | Turn slight left onto A4201                        | 307.0   | NW        | 1628  | 43.0     |           |
+      | 21            | 51.577774,-0.220823 | Continue onto A41 (HENDON WAY)                     | 301.0   | NW        | 28342 | 748.0    |           |
+      | 22            | 51.582726,-0.227154 | Continue onto A41 (WATFORD WAY)                    | 340.0   | N         | 88373 | 2332.3   |           |
+      | 23            | 51.601209,-0.234509 | Continue onto A1 (WATFORD WAY (BARNET BY-PASS))    | 325.0   | NW        | 72410 | 1911.0   |           |
 
     Examples: 
-      | pointA              | pointB              | routetype |
-      | 51.507229,-0.127581 | 52.481875,-1.898743 | car       |
+      | pointA              | pointB              | routeOptions | avoidances |
+      | 51.507229,-0.127581 | 52.481875,-1.898743 | car          |            |
 
-  @Routing 
+  @Routing
   Scenario Outline: Verify  waypoints on a Route from London to Birmingham and the total route time estimate
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then The total route time should be not more than "<totalRouteTime>"
 
     Examples: 
-      | pointA              | pointB              | routetype | totalRouteTime |
-      | 51.507229,-0.127581 | 52.481875,-1.898743 | car       | 03h00min       |
+      | pointA              | pointB              | routeOptions | avoidances | totalRouteTime |
+      | 51.507229,-0.127581 | 52.481875,-1.898743 | car          |            | 03h00min       |
 
-  @Routing 
+  @Routing
   Scenario Outline: Verify  waypoints on a Route from Hounslow to Burnham and the total route time estimate
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then The total route time should be not more than "<totalRouteTime>"
 
     Examples: 
-      | pointA             | pointB              | routetype | totalRouteTime |
-      | 51.475161,-0.39591 | 51.536292,-0.656802 | car       | 0h30min        |
+      | pointA             | pointB              | routeOptions | avoidances | totalRouteTime |
+      | 51.475161,-0.39591 | 51.536292,-0.656802 | car          |            | 0h30min        |
 
-  @Routing 
+  @Routing
   Scenario Outline: Verify  waypoints on a Route from Southampton to Glasgow
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the trackPoints on the route map:
       | trackPointco        |
-      | 52.52355,-1.902136 |
+      | 52.52355,-1.902136  |
       | 53.779418,-2.647821 |
       | 54.304996,-2.646641 |
-      |55.802602,-4.053713|
+      | 55.802602,-4.053713 |
 
     Examples: 
-      | pointA              | pointB             | routetype |
-      | 50.896617,-1.400465 | 55.861284,-4.24996 | car       |
+      | pointA              | pointB             | routeOptions | avoidances |
+      | 50.896617,-1.400465 | 55.861284,-4.24996 | car          |            |
 
-  @Routing 
+  @Routing
   Scenario Outline: Verify  oneway Restrictions on a Route (Burmingham Route with one way restriction-WSPIP-74)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the trackPoints not on the route map:
       | trackPointco        | time                      |
       | 52.446899,-1.929721 | 2014-10-31T19:17:22+00:00 |
 
     Examples: 
-      | pointA              | pointB              | routetype |
-      | 52.446823,-1.929077 | 52.446604,-1.930043 | car       |
+      | pointA              | pointB              | routeOptions | avoidances |
+      | 52.446823,-1.929077 | 52.446604,-1.930043 | car          |            |
 
-  @Routing 
+  @KnownIssues @Routing
   Scenario Outline: Verify  No Turn Restrictions  on a Route (Birmingham WSPIP-77)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the trackPoints not on the route map:
       | trackPointco        |
       | 52.446779,-1.929385 |
 
     Examples: 
-      | pointA              | pointB              | routetype |
-      | 52.446564,-1.930268 | 52.446744,-1.929469 | car       |
+      | pointA              | pointB              | routeOptions | avoidances |
+      | 52.446564,-1.930268 | 52.446744,-1.929469 | car          |            |
 
   @KnownIssues
   Scenario Outline: Verify  No Turn Restrictions  on a Route (Birmingham Bristol Road WSPIP-83)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the trackPoints not on the route map:
       | trackPointco        |
       | 52.446764,-1.929391 |
 
     Examples: 
-      | pointA              | pointB              | routetype |
-      | 52.446823,-1.929077 | 52.446672,-1.929691 | car       |
+      | pointA              | pointB              | routeOptions | avoidances |
+      | 52.446823,-1.929077 | 52.446672,-1.929691 | car          |            |
 
-  @Routing 
+  @Routing
   Scenario Outline: Verify  under pass still finds route  from top road (Southampton- Charle WattsWay)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the trackPoints on the route map:
       | trackPointco        |
       | 50.917268,-1.316368 |
 
     Examples: 
-      | pointA              | pointB              | routetype |
-      | 50.917598,-1.317992 | 50.919748,-1.310342 | car       |
+      | pointA              | pointB              | routeOptions | avoidances |
+      | 50.917598,-1.317992 | 50.919748,-1.310342 | car          |            |
 
   @Routing
   Scenario Outline: Verify  under pass still finds route from bottom road  (Southampton- Charle WattsWay)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the trackPoints on the route map:
       | trackPointco        |
       | 50.919194,-1.316553 |
 
     Examples: 
-      | pointA             | pointB             | routetype |
-      | 50.91525,-1.318761 | 50.92045,-1.316021 | car       |
+      | pointA             | pointB             | routeOptions | avoidances |
+      | 50.91525,-1.318761 | 50.92045,-1.316021 | car          |            |
 
   @Routing
   Scenario Outline: Verify  No Turn   (WSPIP-76:Eastley- TWYFORD ROAD )
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco          | waypointdesc                | azimuth | direction | time | distance |
-      | 3             | 50.971952,-1.350891 | Turn left onto THE CRESCENT | 294.0   | NW        | 2981 | 37.3     |
+      | wayPointIndex | waypointco          | waypointdesc                | azimuth | direction | time | distance | avoidance |
+      | 3             | 50.971952,-1.350891 | Turn left onto THE CRESCENT | 294.0   | NW        | 2981 | 37.3     |           |
 
     Examples: 
-      | pointA              | pointB              | routetype |
-      | 50.972281,-1.350942 | 50.972212,-1.351183 | car       |
+      | pointA              | pointB              | routeOptions | avoidances |
+      | 50.972281,-1.350942 | 50.972212,-1.351183 | car          |            |
 
-  @Routing 
+  @Routing
   Scenario Outline: Verify  No Turn   (WSPIP-76:Eastley- Station Hill Road)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco          | waypointdesc                      | azimuth | direction | time | distance |
-      | 2             | 50.969817,-1.350504 | Continue onto STATION HILL (A335) | 180.0   | S         | 4583 | 57.3     |
+      | wayPointIndex | waypointco          | waypointdesc                      | azimuth | direction | time | distance | avoidance |
+      | 2             | 50.969817,-1.350504 | Continue onto STATION HILL (A335) | 180.0   | S         | 4583 | 57.3     |           |
 
     Examples: 
-      | pointA              | pointB             | routetype |
-      | 50.970024,-1.350267 | 50.97008,-1.350521 | car       |
+      | pointA              | pointB             | routeOptions | avoidances |
+      | 50.970024,-1.350267 | 50.97008,-1.350521 | car          |            |
 
-  @Routing 
+  @Routing
   Scenario Outline: Verify  No Turn   (Treaty Center-Hounslow- Fairfields Road)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco          | waypointdesc                        | azimuth | direction | time  | distance |
-      | 2             | 51.468925,-0.359049 | Turn left onto HANWORTH ROAD (A315) | 239.0   | SW        | 17328 | 224.0    |
+      | wayPointIndex | waypointco          | waypointdesc                        | azimuth | direction | time  | distance | avoidance |
+      | 2             | 51.468925,-0.359049 | Turn left onto HANWORTH ROAD (A315) | 239.0   | SW        | 17328 | 224.0    |           |
 
     Examples: 
-      | pointA             | pointB              | routetype |
-      | 51.46882,-0.358687 | 51.469454,-0.357831 | car       |
+      | pointA             | pointB              | routeOptions | avoidances |
+      | 51.46882,-0.358687 | 51.469454,-0.357831 | car          |            |
 
   @KnownIssues
   Scenario Outline: Verify  No Turns with Exceptions(Vehicle Type:Bus)   (High Street-Hounslow)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the trackPoints not on the route map:
       | trackPointco        |
       | 51.470009,-0.357019 |
 
     Examples: 
-      | pointA              | pointB              | routetype |
-      | 51.470198,-0.356036 | 51.470352,-0.357388 | car       |
+      | pointA              | pointB              | routeOptions | avoidances |
+      | 51.470198,-0.356036 | 51.470352,-0.357388 | car          |            |
 
-  @Routing  
+  @Routing
   Scenario Outline: Verify  Mandatory Turn   (Alexandra Road-Hounslow- Fairfields Road)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco          | waypointdesc                   | azimuth | direction | time  | distance |
-      | 2             | 51.470846,-0.363527 | Turn right onto LANSDOWNE ROAD | 259.0   | W         | 9934 | 124.2    |
+      | wayPointIndex | waypointco          | waypointdesc                   | azimuth | direction | time | distance | avoidance |
+      | 2             | 51.470846,-0.363527 | Turn right onto LANSDOWNE ROAD | 259.0   | W         | 9934 | 124.2    |           |
 
     Examples: 
-      | pointA             | pointB              | routetype |
-      | 51.47118,-0.363609 | 51.470254,-0.363412 | car       |
+      | pointA             | pointB              | routeOptions | avoidances |
+      | 51.47118,-0.363609 | 51.470254,-0.363412 | car          |            |
 
-  @Routing 
+  @Routing
   Scenario Outline: Verify  Private Road Restricted Access (Warwick Road-Carlisle)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the trackPoints not on the route map:
       | trackPointco        |
       | 54.894721,-2.921665 |
 
     Examples: 
-      | pointA              | pointB            | routetype |
-      | 54.894427,-2.921111 | 54.8922,-2.928296 | car       |
+      | pointA              | pointB            | routeOptions | avoidances |
+      | 54.894427,-2.921111 | 54.8922,-2.928296 | car          |            |
 
   @Routing
   Scenario Outline: Verify  Ford Gate at CRAMPOOR ROAD(ROMSEY-Southampton)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco          | waypointdesc                         | azimuth | direction | time  | distance |
-      | 2             | 50.993815,-1.461397 | Turn slight right onto HIGHWOOD LANE | 349.0   | N         | 41337 | 520.5    |
+      | wayPointIndex | waypointco          | waypointdesc                         | azimuth | direction | time  | distance | avoidance |
+      | 2             | 50.993815,-1.461397 | Turn slight right onto HIGHWOOD LANE | 349.0   | N         | 41337 | 520.5    |           |
 
     Examples: 
-      | pointA              | pointB              | routetype |
-      | 50.995817,-1.454224 | 50.998501,-1.454504 | car       |
+      | pointA              | pointB              | routeOptions | avoidances |
+      | 50.995817,-1.454224 | 50.998501,-1.454504 | car          |            |
 
   @Routing
   Scenario Outline: Verify  Ford Gate at CRAMPOOR ROAD(ROMSEY-Southampton)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco          | waypointdesc                               | azimuth | direction | time  | distance |
-      | 3             | 50.782654,-1.060556 | Turn sharp left onto A288 (EASTERN PARADE) | 248.0   | W         | 56982 | 712.3    |
+      | wayPointIndex | waypointco          | waypointdesc                               | azimuth | direction | time  | distance | avoidance |
+      | 3             | 50.782654,-1.060556 | Turn sharp left onto A288 (EASTERN PARADE) | 248.0   | W         | 56982 | 712.3    |           |
 
     Examples: 
-      | pointA             | pointB              | routetype |
-      | 50.78222,-1.059975 | 50.779123,-1.080019 | car       |
+      | pointA             | pointB              | routeOptions | avoidances |
+      | 50.78222,-1.059975 | 50.779123,-1.080019 | car          |            |
 
-  @Routing @WebOnly 
+  @Routing @WebOnly
   Scenario Outline: Verify  Route using Full UK Address (Southampton to London)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointdesc                                  |
       | 3             | At roundabout, take exit 2 onto BROWNHILL WAY |
-      | 18            | Continue onto PICCADILLY (A4)  |
+      | 18            | Continue onto PICCADILLY (A4)                 |
 
     Examples: 
-      | pointA                                           | pointB                                 | routetype |
-      | ORDNANCE SURVEY, 4, ADANAC DRIVE, NURSLING, SOUTHAMPTON, SO16 0AS | 1, PICCADILLY ARCADE, LONDON, SW1Y 6NH | car       |
+      | pointA                                                            | pointB                                 | routeOptions | avoidances |
+      | ORDNANCE SURVEY, 4, ADANAC DRIVE, NURSLING, SOUTHAMPTON, SO16 0AS | 1, PICCADILLY ARCADE, LONDON, SW1Y 6NH | car          |            |
 
   @Routing @WebOnly
   Scenario Outline: Verify  Route using Full UK Address (Hounslow to Slough)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointdesc                                   |
       | 9             | At roundabout, take exit 1 onto BATH ROAD (A4) |
       | 10            | Turn right onto HUNTERCOMBE LANE NORTH         |
 
     Examples: 
-      | pointA                              | pointB                                      | routetype |
-      | 131, TIVOLI ROAD, HOUNSLOW, TW4 6AS | 40, CHILTERN ROAD, BURNHAM, SLOUGH, SL1 7NH | car       |
+      | pointA                              | pointB                                      | routeOptions | avoidances |
+      | 131, TIVOLI ROAD, HOUNSLOW, TW4 6AS | 40, CHILTERN ROAD, BURNHAM, SLOUGH, SL1 7NH | car          |            |
 
-  @Routing   @WebOnly
+  @Routing @WebOnly
   Scenario Outline: Verify  Route using Full UK Address (Southampton to London)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointdesc                   |
+      | wayPointIndex | waypointdesc                            |
       | 2             | Turn sharp left onto A35 (TEBOURBA WAY) |
-      | 20            | Turn slight left onto PALL MALL (A4)              |
+      | 20            | Turn slight left onto PALL MALL (A4)    |
 
     Examples: 
-      | pointA                                                      | pointB                                                                                | routetype |
-      | SOUTHAMPTON MEGABOWL, AUCKLAND ROAD, SOUTHAMPTON, SO15 0SD | CANARY WHARF LTD, 1, CANADA SQUARE, LONDON, E14 5AB | car       |
+      | pointA                                                     | pointB                                              | routeOptions | avoidances |
+      | SOUTHAMPTON MEGABOWL, AUCKLAND ROAD, SOUTHAMPTON, SO15 0SD | CANARY WHARF LTD, 1, CANADA SQUARE, LONDON, E14 5AB | car          |            |
 
-  @Routing  @WebOnly
+  @Routing @WebOnly
   Scenario Outline: Verify  Route using Full UK Address (Birmingham to reading)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointdesc                   |
-      | 2             | Turn left onto MONTAGUE STREET |
-      | 19            | At roundabout, take exit 2 onto A34 (STRATFORD ROAD)             |
+      | wayPointIndex | waypointdesc                                         |
+      | 2             | Turn left onto MONTAGUE STREET                       |
+      | 19            | At roundabout, take exit 2 onto A34 (STRATFORD ROAD) |
 
     Examples: 
-      | pointA                                                      | pointB                                                                                | routetype |
-      | BIRMINGHAM VOLKSWAGEN, LAWLEY MIDDLEWAY, BIRMINGHAM, B4 7XH | READING ENTERPRISE CENTRE, UNIVERSITY OF READING, WHITEKNIGHTS ROAD, READING, RG6 6BU | car       |
+      | pointA                                                      | pointB                                                                                | routeOptions | avoidances |
+      | BIRMINGHAM VOLKSWAGEN, LAWLEY MIDDLEWAY, BIRMINGHAM, B4 7XH | READING ENTERPRISE CENTRE, UNIVERSITY OF READING, WHITEKNIGHTS ROAD, READING, RG6 6BU | car          |            |
 
   @Routing @WebOnly
   Scenario Outline: Verify  Route using Full UK Address (Southhampton to London)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointdesc                                |
-      | 3             | Continue onto ENDLE STREET |
+      | wayPointIndex | waypointdesc                        |
+      | 3             | Continue onto ENDLE STREET          |
       | 21            | At roundabout, take exit 3 onto A30 |
 
     Examples: 
-      | pointA                                               | pointB                           | routetype |
-      | 6, CHANNEL WAY, OCEAN VILLAGE, SOUTHAMPTON, SO14 3TG | 311, CITY ROAD, LONDON, EC1V 1LA | car       |
+      | pointA                                               | pointB                           | routeOptions | avoidances |
+      | 6, CHANNEL WAY, OCEAN VILLAGE, SOUTHAMPTON, SO14 3TG | 311, CITY ROAD, LONDON, EC1V 1LA | car          |            |
 
   @Routing @WebOnly
   Scenario Outline: Verify  Route using Full UK Address (Coventry)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointdesc                        |
-      | 3             | Turn right onto HOWES LANE (B4115)  |
+      | wayPointIndex | waypointdesc                         |
+      | 3             | Turn right onto HOWES LANE (B4115)   |
       | 6             | At roundabout, take exit 2 onto A444 |
-      | 16            | Turn right onto PENNY PARK LANE          |
+      | 16            | Turn right onto PENNY PARK LANE      |
 
     Examples: 
-      | pointA                                                         | pointB                              | routetype |
-      | 3 BROMLEIGH VILLAS, COVENTRY ROAD, BAGINTON, COVENTRY, CV8 3AS | 2, PAXMEAD CLOSE, COVENTRY, CV6 2NJ | car       |
+      | pointA                                                         | pointB                              | routeOptions | avoidances |
+      | 3 BROMLEIGH VILLAS, COVENTRY ROAD, BAGINTON, COVENTRY, CV8 3AS | 2, PAXMEAD CLOSE, COVENTRY, CV6 2NJ | car          |            |
 
-  @Routing  @WebOnly
+  @Routing @WebOnly
   Scenario Outline: Verify  Route using Full UK Address (Kington to London )
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointdesc                        |
-      | 6             | Turn slight left onto HEADBROOK |
-      | 16            | At roundabout, take exit 3 onto A49 (VICTORIA STREET)                |
+      | wayPointIndex | waypointdesc                                          |
+      | 6             | Turn slight left onto HEADBROOK                       |
+      | 16            | At roundabout, take exit 3 onto A49 (VICTORIA STREET) |
 
     Examples: 
-      | pointA                           | pointB                                | routetype |
-      | 5, OXFORD LANE, KINGTON, HR5 3ED | 64, TOWER MILL ROAD, LONDON, SE15 6BZ | car       |
+      | pointA                           | pointB                                | routeOptions | avoidances |
+      | 5, OXFORD LANE, KINGTON, HR5 3ED | 64, TOWER MILL ROAD, LONDON, SE15 6BZ | car          |            |
 
-  @Routing 
+  @Routing
   Scenario Outline: Verify a Roundabout(Charles Watts Way)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco          | waypointdesc                                             | azimuth | direction | time  | distance |
-      | 3             | 50.920147,-1.310351 | At roundabout, take exit 2 onto CHARLES WATTS WAY (A334) | 0.0     | N         | 17647 | 465.7    |
+      | wayPointIndex | waypointco          | waypointdesc                                             | azimuth | direction | time  | distance | avoidance |
+      | 3             | 50.920147,-1.310351 | At roundabout, take exit 2 onto CHARLES WATTS WAY (A334) | 0.0     | N         | 17647 | 465.7    |           |
 
     Examples: 
-      | pointA             | pointB              | routetype |
-      | 50.915416,-1.31902 | 50.915551,-1.294049 | car       |
+      | pointA             | pointB              | routeOptions | avoidances |
+      | 50.915416,-1.31902 | 50.915551,-1.294049 | car          |            |
 
-  @Routing 
+  @Routing
   Scenario Outline: Verify a Roundabout(A30)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco          | waypointdesc              | azimuth | direction | time  | distance |
-      | 3             | 50.726474,-3.727558 | Turn slight left onto A30 | 4.0     | N         | 11694 | 308.6    |
+      | wayPointIndex | waypointco          | waypointdesc              | azimuth | direction | time  | distance | avoidance |
+      | 3             | 50.726474,-3.727558 | Turn slight left onto A30 | 4.0     | N         | 11694 | 308.6    |           |
 
     Examples: 
-      | pointA              | pointB             | routetype |
-      | 50.729071,-3.732732 | 50.72813,-3.730887 | car       |
+      | pointA              | pointB             | routeOptions | avoidances |
+      | 50.729071,-3.732732 | 50.72813,-3.730887 | car          |            |
 
-  @Routing 
+  @Routing
   Scenario Outline: Verify a Roundabout(The City Of Edinburgh By-pass)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco          | waypointdesc                         | azimuth | direction | time  | distance |
-      | 3             | 55.913915,-3.065976 | At roundabout, take exit 1 onto A720 | 199.0   | S         | 49235 | 1299.3   |
+      | wayPointIndex | waypointco          | waypointdesc                         | azimuth | direction | time  | distance | avoidance |
+      | 3             | 55.913915,-3.065976 | At roundabout, take exit 1 onto A720 | 199.0   | S         | 49235 | 1299.3   |           |
 
     Examples: 
-      | pointA              | pointB              | routetype |
-      | 55.913061,-3.060099 | 55.924345,-3.053462 | car       |
+      | pointA              | pointB              | routeOptions | avoidances |
+      | 55.913061,-3.060099 | 55.924345,-3.053462 | car          |            |
 
   @Routing
   Scenario Outline: Verify  Route using one intermediate waypoint (Hounslow to Reading via Staines )
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI via "<pointC>"
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>" via "<pointC>"
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco          | waypointdesc                         | azimuth | direction | time   | distance |
-      | 1             | 51.472387,-0.361788 | Continue onto ELLINGTON ROAD         | 286.0   | W         | 10789  | 104.9    |
-      | 9             | 51.477555,-0.403923 | At roundabout, take exit 3 onto A312 | 238.0   | SW        | 115905 | 1770.8   |
-      | 15            | 51.355407,-0.679946 | At roundabout, take exit 3 onto A322 | 184.0   | S         | 224937 | 5936.2   |
+      | wayPointIndex | waypointco          | waypointdesc                         | azimuth | direction | time   | distance | avoidance |
+      | 1             | 51.472387,-0.361788 | Continue onto ELLINGTON ROAD         | 286.0   | W         | 10789  | 104.9    |           |
+      | 9             | 51.477555,-0.403923 | At roundabout, take exit 3 onto A312 | 238.0   | SW        | 115905 | 1770.8   |           |
+      | 15            | 51.355407,-0.679946 | At roundabout, take exit 3 onto A322 | 184.0   | S         | 224937 | 5936.2   |           |
 
     Examples: 
-      | pointA                                 | pointB              | pointC                                 | routetype |
-      | 51.471546541834144,-0.3618621826171875 | 51.433882,-0.537904 | 51.45914115860512,-0.96679687499999995 | car       |
+      | pointA                                 | pointB              | pointC                                 | routeOptions | avoidances |
+      | 51.471546541834144,-0.3618621826171875 | 51.433882,-0.537904 | 51.45914115860512,-0.96679687499999995 | car          |            |
 
-  @Routing 
+  @Routing
   Scenario Outline: Verify  Route using one intermediate waypoint (Wentworth to Ascot via Windsor Park )
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI via "<pointC>"
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>" via "<pointC>"
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco          | waypointdesc                          | azimuth | direction | time   | distance |
-      | 2             | 51.40643,-0.596399  | Turn right onto BLACKNEST ROAD (A329) | 289.0   | W         | 73038  | 1115.9   |
-      | 5             | 51.407984,-0.617235 | Continue onto LONDON ROAD (A329)      | 274.0   | W         | 166263 | 2540.3   |
-      | 7             | 51.410306,-0.668737 | Turn right onto WINKFIELD ROAD (A330) | 7.0     | N         | 46532  | 955.5    |
+      | wayPointIndex | waypointco          | waypointdesc                          | azimuth | direction | time   | distance | avoidance |
+      | 2             | 51.40643,-0.596399  | Turn right onto BLACKNEST ROAD (A329) | 289.0   | W         | 73038  | 1115.9   |           |
+      | 5             | 51.407984,-0.617235 | Continue onto LONDON ROAD (A329)      | 274.0   | W         | 166263 | 2540.3   |           |
+      | 7             | 51.410306,-0.668737 | Turn right onto WINKFIELD ROAD (A330) | 7.0     | N         | 46532  | 955.5    |           |
 
     Examples: 
-      | pointA              | pointB              | pointC             | routetype |
-      | 51.409426,-0.591727 | 51.407904,-0.617237 | 51.41855,-0.672385 | car       |
+      | pointA              | pointB              | pointC             | routeOptions | avoidances |
+      | 51.409426,-0.591727 | 51.407904,-0.617237 | 51.41855,-0.672385 | car          |            |
 
-  @Routing  
-    Scenario Outline: Verify  Route using one intermediate waypoint ( Chelsea to Winchester via Windlesham)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI via "<pointC>"
+  @Routing
+  Scenario Outline: Verify  Route using one intermediate waypoint ( Chelsea to Winchester via Windlesham)
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>" via "<pointC>"
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco          | waypointdesc                       | azimuth | direction | time    | distance |
-      | 4             | 51.489964,-0.172906 | Turn left onto DOVEHOUSE STREET | 321.0   | NW         | 7600  | 95.0   |
-      | 9             | 51.493673,-0.174548  | Turn right onto PELHAM STREET (A3218)                  | 0.0   | N        | 2446 | 55.7  |
-      | 13            | 51.486844,-0.252027 | At roundabout, take exit 3 onto A4  | 189.0   | S        | 69313   |1829.3   |
+      | wayPointIndex | waypointco          | waypointdesc                          | azimuth | direction | time  | distance | avoidance |
+      | 4             | 51.489964,-0.172906 | Turn left onto DOVEHOUSE STREET       | 321.0   | NW        | 7600  | 95.0     |           |
+      | 9             | 51.493673,-0.174548 | Turn right onto PELHAM STREET (A3218) | 0.0     | N         | 2446  | 55.7     |           |
+      | 13            | 51.486844,-0.252027 | At roundabout, take exit 3 onto A4    | 189.0   | S         | 69313 | 1829.3   |           |
 
     Examples: 
-      | pointA             | pointB             | pointC              | routetype |
-      | 51.48676,-0.170426 | 51.36166,-0.645979 | 51.070889,-1.315293 | car       |
+      | pointA             | pointB             | pointC              | routeOptions | avoidances |
+      | 51.48676,-0.170426 | 51.36166,-0.645979 | 51.070889,-1.315293 | car          |            |
 
-  @Routing  @yogi
+  @Routing
   Scenario Outline: Verify  Route using 2 intermediate waypoints (Hounslow to Reading via Staines and Bracknell )
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI via "<pointC>" and "<pointD>"
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>" via "<pointC>" and "<pointD>"
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco          | waypointdesc                            | azimuth | direction | time   | distance |
-      | 1             | 51.472387,-0.361788 | Continue onto ELLINGTON ROAD            | 286.0   | W         | 8390  | 104.9    |
-      | 9             | 51.406127,-0.539808 | Continue onto M3 | 162.0    | S         | 445073   | 12363.5    |
-      | 16            |51.414151,-0.747502 |Continue onto CHURCH ROAD (A3095)   | 28.0  | NE         | 12891 |340.2   |
-      | 27            | 51.451397,-0.960099 | Turn right onto WATLINGTON STREET   | 333.0   | NW        | 11978  | 149.7    |
-      | 55            | 51.440767,-0.531845 | Continue onto A30                       | 17.0    | N         | 14025 | 370.1  |
-
+      | wayPointIndex | waypointco          | waypointdesc                      | azimuth | direction | time   | distance | avoidance |
+      | 1             | 51.472387,-0.361788 | Continue onto ELLINGTON ROAD      | 286.0   | W         | 8390   | 104.9    |           |
+      | 9             | 51.406127,-0.539808 | Continue onto M3                  | 162.0   | S         | 445073 | 12363.5  |           |
+      | 16            | 51.414151,-0.747502 | Continue onto CHURCH ROAD (A3095) | 28.0    | NE        | 12891  | 340.2    |           |
+      | 27            | 51.451397,-0.960099 | Turn right onto WATLINGTON STREET | 333.0   | NW        | 11978  | 149.7    |           |
+      | 55            | 51.440767,-0.531845 | Continue onto A30                 | 17.0    | N         | 14025  | 370.1    |           |
 
     Examples: 
-      | pointA                                 | pointB              | pointC                                 | pointD              | routetype |
-      | 51.471546541834144,-0.3618621826171875 | 51.414152,-0.747504 | 51.45914115860512,-0.96679687499999995 | 51.433882,-0.537904 | car       |
-
+      | pointA                                 | pointB              | pointC                                 | pointD              | routeOptions | avoidances |
+      | 51.471546541834144,-0.3618621826171875 | 51.414152,-0.747504 | 51.45914115860512,-0.96679687499999995 | 51.433882,-0.537904 | car          |            |
 
-@Routing
+  @Routing
   Scenario Outline: Verify  Route using 2 intermediate waypoints (Oxford to Eaton via Warwick and Cambridge )
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI via "<pointC>" and "<pointD>"
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>" via "<pointC>" and "<pointD>"
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco          | waypointdesc                                         | azimuth | direction | time   | distance |
-      | 5             | 51.748432,-1.261457 | Turn left onto THAMES STREET (A420)                  | 275.0   | W         | 5517   | 145.6    |
-      | 21            | 52.289769,-1.60905  | At roundabout, take exit 3 onto A46                  | 249.0   | W         | 481412 | 12704.3  |
-      | 32            | 52.256925,-0.123683 | At roundabout, take exit 3 onto ST IVES ROAD (A1198) | 95.0    | E         | 57226  | 1510.2   |
-      | 68            | 51.560087,-0.496049 | At roundabout, take exit 2 onto A412 (DENHAM ROAD)   | 98.0    | E         | 31561  | 832.9    |
+      | wayPointIndex | waypointco          | waypointdesc                                         | azimuth | direction | time   | distance | avoidance |
+      | 5             | 51.748432,-1.261457 | Turn left onto THAMES STREET (A420)                  | 275.0   | W         | 5517   | 145.6    |           |
+      | 21            | 52.289769,-1.60905  | At roundabout, take exit 3 onto A46                  | 249.0   | W         | 481412 | 12704.3  |           |
+      | 32            | 52.256925,-0.123683 | At roundabout, take exit 3 onto ST IVES ROAD (A1198) | 95.0    | E         | 57226  | 1510.2   |           |
+      | 68            | 51.560087,-0.496049 | At roundabout, take exit 2 onto A412 (DENHAM ROAD)   | 98.0    | E         | 31561  | 832.9    |           |
 
     Examples: 
-      | pointA              | pointB              | pointC             | pointD              | routetype |
-      | 51.746075,-1.263972 | 52.289962,-1.604752 | 52.202814,0.051429 | 51.491412,-0.610276 | car       |
+      | pointA              | pointB              | pointC             | pointD              | routeOptions | avoidances |
+      | 51.746075,-1.263972 | 52.289962,-1.604752 | 52.202814,0.051429 | 51.491412,-0.610276 | car          |            |
 
   @Routing
   Scenario Outline: Verify  Route using 2 intermediate waypoints (Perth to Edinburgh via Stirling and Glasgow )
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI via "<pointC>" and "<pointD>"
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>" via "<pointC>" and "<pointD>"
+    Then I should be able to verify the waypoints on the route map:
+      | wayPointIndex | waypointco          | waypointdesc                                           | azimuth | direction | time   | distance | avoidance |
+      | 5             | 56.170837,-3.970499 | At roundabout, take exit 3 onto M9                     | 91.0    | E         | 142970 | 3961.4   |           |
+      | 11            | 55.917381,-4.067178 | At roundabout, take exit 2 onto CUMBERNAULD ROAD (A80) | 156.0   | SE        | 175684 | 4636.2   |           |
+      | 20            | 55.938772,-3.402452 | At roundabout, take exit 4 onto A8 (GLASGOW ROAD)      | 302.0   | NW        | 266985 | 7046.2   |           |
+      | 30            | 55.949621,-3.214174 | Turn right onto MELVILLE STREET (MELVILLE CRESCENT)    | 51.0    | NE        | 2218   | 30.8     |           |
+
+    Examples: 
+      | pointA             | pointB              | pointC              | pointD              | routeOptions | avoidances |
+      | 56.38721,-3.466273 | 56.136656,-3.970408 | 55.871665,-4.195067 | 55.950467,-3.208924 | car,fastest  |            |
+
+  @Routing
+  Scenario Outline: Verify  nearest point on a Route
+    Given I request a nearest point from  "<pointA>" from Nearest Point API
+    Then I should be able to verify the nearest point to be "<pointB>" at a distance of "<distance>"
+
+    Examples: 
+      | pointA              | pointB                                 | distance          |
+      | 51.878966,-0.903849 | 51.875144098888576,-0.9107481891829116 | 636.3215777261629 |
+
+  # Fastest and Shortest Route Scenarios
+  @Routing
+  Scenario Outline: Verify  waypoints on a Route from Hounslow to Reading
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
+    Then I should be able to verify the waypoints on the route map:
+      | wayPointIndex | waypointco          | waypointdesc                        | azimuth | direction | time   | distance | avoidance |
+      | 1             | 51.472387,-0.361788 | Continue onto ELLINGTON ROAD        | 286.0   | W         | 8390   | 104.9    |           |
+      | 9             | 51.468674,-0.370905 | Turn right onto BATH ROAD (A3006)   | 280.0   | W         | 134212 | 1758.0   |           |
+      | 17            | 51.483218,-0.583061 | Turn right onto WINDSOR ROAD (B470) | 321.0   | NW        | 60059  | 750.7    |           |
+
+    Examples: 
+      | pointA                                 | pointB                                 | routeOptions | avoidances |
+      | 51.471546541834144,-0.3618621826171875 | 51.45914115860512,-0.96679687499999995 | car,shortest |            |
+
+  @Routing
+  Scenario Outline: Verify  waypoints on a Route from Hounslow to Reading
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
+    Then I should be able to verify the waypoints on the route map:
+      | wayPointIndex | waypointco          | waypointdesc                           | azimuth | direction | time    | distance | avoidance |
+      | 1             | 51.472387,-0.361788 | Continue onto ELLINGTON ROAD           | 286.0   | W         | 8390    | 104.9    |           |
+      | 8             | 51.491316,-0.41082  | At roundabout, take exit 2 onto M4     | 339.0   | N         | 1300443 | 36121.5  |           |
+      | 16            | 51.453903,-0.961826 | Continue onto WATLINGTON STREET (A329) | 341.0   | N         | 8584    | 132.7    |           |
+
+    Examples: 
+      | pointA                                 | pointB                                 | routeOptions | avoidances |
+      | 51.471546541834144,-0.3618621826171875 | 51.45914115860512,-0.96679687499999995 | car,fastest  |            |
+
+  @Routing
+  Scenario Outline: Verify  waypoints on a Route from London to Liverpool
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
+    Then I should be able to verify the waypoints on the route map:
+      | wayPointIndex | waypointco          | waypointdesc                                      | azimuth | direction | time    | distance | avoidance |
+      | 9             | 53.47091,-2.632536  | Turn slight left onto M6                          | 186.0   | S         | 6600018 | 183338.0 |           |
+      | 11            | 51.632754,-0.299837 | Continue onto A41 (EDGWARE WAY (WATFORD BY-PASS)) | 156.0   | SE        | 48011   | 1267.0   |           |
+
+    Examples: 
+      | pointA              | pointB              | routeOptions | avoidances |
+      | 53.432923,-2.971511 | 51.505165,-0.147902 | car,fastest  |            |
+
+  @Routing
+  Scenario Outline: Verify  waypoints on a Route from London to Liverpool
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco          | waypointdesc                                           | azimuth | direction | time   | distance |
-      | 5             | 56.170837,-3.970499 | At roundabout, take exit 3 onto M9                     | 91.0    | E         | 142970 | 3961.4   |
-      | 11            | 55.917381,-4.067178 | At roundabout, take exit 2 onto CUMBERNAULD ROAD (A80) | 156.0   | SE        | 175684 | 4636.2   |
-      | 20            | 55.938772,-3.402452 | At roundabout, take exit 4 onto A8 (GLASGOW ROAD)      | 302.0   | NW        | 266985 | 7046.2   |
-      | 30            | 55.949621,-3.214174 | Turn right onto MELVILLE STREET (MELVILLE CRESCENT     | 51.0    | NE        | 2218   | 30.8     |
+      | wayPointIndex | waypointco          | waypointdesc                                        | azimuth | direction | time  | distance | avoidance |
+      | 30            | 53.340148,-2.735071 | Turn slight left onto A533 (BRIDGEWATER EXPRESSWAY) | 96.0    | E         | 34015 | 897.7    |           |
+      | 41            | 53.291868,-2.591888 | Turn slight right onto A49 (WARRINGTON ROAD)        | 162.0   | S         | 99801 | 2633.8   |           |
+      | 80            | 53.101356,-2.286824 | Turn slight left onto LINLEY LANE (A50)             | 174.0   | S         | 6872  | 85.9     |           |
 
     Examples: 
-      | pointA             | pointB              | pointC              | pointD              | routetype |
-      | 56.38721,-3.466273 | 56.136656,-3.970408 | 55.871665,-4.195067 | 55.950467,-3.208924 | car       |
+      | pointA              | pointB              | routeOptions | avoidances |
+      | 53.432923,-2.971511 | 51.505165,-0.147902 | car,shortest |            |
+
+  @Routing
+  Scenario Outline: Verify  waypoints on a Route in Isle of Wight
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
+    Then I should be able to verify the waypoints on the route map:
+      | wayPointIndex | waypointco          | waypointdesc                          | azimuth | direction | time   | distance | avoidance |
+      | 5             | 50.705368,-1.324668 | Turn right onto GUNVILLE ROAD         | 161.0   | S         | 119526 | 1494.1   |           |
+      | 9             | 50.687826,-1.320457 | Turn right onto BOWCOMBE ROAD (B3323) | 200.0   | S         | 274969 | 3715.5   |           |
 
+    Examples: 
+      | pointA             | pointB              | routeOptions | avoidances |
+      | 50.690318,-1.38526 | 50.664175,-1.358463 | car,fastest  |            |
 
+  @Routing
+  Scenario Outline: Verify  waypoints on a Route in Isle of Wight
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
+    Then I should be able to verify the waypoints on the route map:
+      | wayPointIndex | waypointco          | waypointdesc                               | azimuth | direction | time  | distance | avoidance |
+      | 6             | 50.643066,-1.391581 | Turn left onto LIMERSTONE ROAD (B3399)     | 77.0    | E         | 74475 | 1034.4   |           |
+      | 10            | 50.64454,-1.354991  | Turn slight left onto FARRIERS WAY (B3323) | 11.0    | N         | 22784 | 284.8    |           |
+
+    Examples: 
+      | pointA             | pointB              | routeOptions | avoidances |
+      | 50.690318,-1.38526 | 50.664175,-1.358463 | car,shortest |            |
+
+  @Routing
+  Scenario Outline: Verify  waypoints on a Route  from Stronchullin to Admore
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
+    Then I should be able to verify the waypoints on the route map:
+      | wayPointIndex | waypointco          | waypointdesc                           | azimuth | direction | time  | distance | avoidance |
+      | 10            | 56.005209,-4.750748 | Continue onto WEST CLYDE STREET (A814) | 97.0    | E         | 40914 | 1079.8   |           |
+      | 16            | 55.986711,-4.666085 | Continue onto STONEYMOLLAN ROAD        | 2.0     | N         | 44867 | 623.2    |           |
+
+    Examples: 
+      | pointA              | pointB              | routeOptions | avoidances |
+      | 56.025277,-4.917874 | 55.992355,-4.636534 | car,fastest  |            |
+
+  @Routing
+  Scenario Outline: Verify  waypoints on a Route from Stronchullin to Admore
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
+    Then I should be able to verify the waypoints on the route map:
+      | wayPointIndex | waypointco          | waypointdesc                         | azimuth | direction | time   | distance | avoidance |
+      | 5             | 56.09353,-4.836554  | At roundabout, take exit 1 onto A814 | 86.0    | E         | 76206  | 2011.0   |           |
+      | 15            | 55.975811,-4.678383 | Turn left onto RED ROAD              | 42.0    | NE        | 120144 | 1668.7   |           |
+
+    Examples: 
+      | pointA              | pointB              | routeOptions | avoidances |
+      | 56.025277,-4.917874 | 55.992355,-4.636534 | car,shortest |            |
+
+  @Routing
+  Scenario Outline: Verify  waypoints on a Route from Swansea to Bath
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
+    Then I should be able to verify the waypoints on the route map:
+      | wayPointIndex | waypointco          | waypointdesc                         | azimuth | direction | time  | distance | avoidance |
+      | 7             | 51.624622,-3.857058 | At roundabout, take exit 3 onto A483 | 5.0     | N         | 52856 | 1394.9   |           |
+      | 15            | 51.387526,-2.346317 | Turn right onto WARMINSTER ROAD      | 161.0   | S         | 759   | 9.5      |           |
+
+    Examples: 
+      | pointA              | pointB              | routeOptions | avoidances |
+      | 51.630586,-3.943108 | 51.386345,-2.344899 | car,fastest  |            |
+
+  @Routing
+  Scenario Outline: Verify  waypoints on a Route from Swansea to Bath
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
+    Then I should be able to verify the waypoints on the route map:
+      | wayPointIndex | waypointco          | waypointdesc                                         | azimuth | direction | time   | distance | avoidance |
+      | 15            | 51.531866,-3.681224 | Turn left onto BRIDGE STREET (B4281)                 | 50.0    | NE        | 780    | 9.8      |           |
+      | 32            | 51.567867,-3.022101 | At roundabout, take exit 1 onto CARDIFF ROAD (B4237) | 36.0    | NE        | 203767 | 2710.8   |           |
+
+    Examples: 
+      | pointA              | pointB              | routeOptions | avoidances |
+      | 51.630586,-3.943108 | 51.386345,-2.344899 | car,shortest |            |
+
+  @Routing
+  Scenario Outline: Verify  waypoints on a Route from Turbo to Plymouth
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
+    Then I should be able to verify the waypoints on the route map:
+      | wayPointIndex | waypointco          | waypointdesc                  | azimuth | direction | time | distance | avoidance |
+      | 10            | 50.413722,-4.328221 | Continue onto A38 (MILL ROAD) | 74.0    | E         | 5105 | 134.8    |           |
+      | 19            | 50.398962,-4.133073 | Turn left onto MAITLAND DRIVE | 36.0    | NE        | 4813 | 60.2     |           |
+
+    Examples: 
+      | pointA              | pointB              | routeOptions | avoidances |
+      | 50.270096,-5.052681 | 50.399429,-4.132644 | car,fastest  |            |
+
+  @Routing
+  Scenario Outline: Verify  waypoints on a Route from Turbo to Plymouth
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
+    Then I should be able to verify the waypoints on the route map:
+      | wayPointIndex | waypointco          | waypointdesc                         | azimuth | direction | time   | distance | avoidance |
+      | 15            | 50.292674,-4.941538 | At roundabout, take exit 1 onto A390 | 87.0    | E         | 604536 | 12232.4  |           |
+      | 42            | 50.440131,-4.411407 | Turn slight left onto EAST ROAD      | 87.0    | E         | 24268  | 303.4    |           |
+
+    Examples: 
+      | pointA              | pointB              | routeOptions | avoidances |
+      | 50.270096,-5.052681 | 50.399429,-4.132644 | car,shortest |            |
diff --git a/core/itngen.sh b/core/itngen.sh
index a41c3392fe..523cfeb37b 100755
--- a/core/itngen.sh
+++ b/core/itngen.sh
@@ -3,17 +3,22 @@ STARTTIME=$(date +%s)
 LOGIT=
 #LOGIT=:${HOME}/.m2/repository/org/slf4j/slf4j-log4j12/1.7.7/slf4j-log4j12-1.7.7.jar:${HOME}/.m2/repository/log4j/log4j/1.2.17/log4j-1.2.17.jar
 
+# Highways Network Data
+#ITNDATA=/data/Development/highways_network
+#GRAPHOUTPUTDIR=${HOME}/Documents/graphhopper/core/hn-gh
+
+
 # Actual ITN Data
 #ITNDATA=${HOME}/Development/OSMMITN/data
-GRAPHOUTPUTDIR=${HOME}/Documents/graphhopper/core/itn-gh
+#GRAPHOUTPUTDIR=${HOME}/Documents/graphhopper/core/itn-gh
 
 # Sample Data
 #ITNDATA=${HOME}/Development/geoserver-service-test/geoservertest/itn-sample-data/58096-SX9192-2c1.gz
 #GRAPHOUTPUTDIR=${HOME}/Documents/graphhopper/core/58096-SX9192-2c1-gh
 
 # Modified Sample Data
-ITNDATA=/media/sf_/media/shared/modified-exeter/58096-SX9192-modified.xml
-#GRAPHOUTPUTDIR=${HOME}/Documents/graphhopper/core/58096-SX9192-modified-gh
+ ITNDATA=/media/sf_/media/shared/modified-exeter/58096-SX9192-modified.xml
+ GRAPHOUTPUTDIR=${HOME}/Documents/graphhopper/core/58096-SX9192-modified-gh
 
 #ITNDATA=${HOME}/Development/graphhopper2/graphhopper/tools/os-itn-m27-m3-north.xml
 #GRAPHOUTPUTDIR=${HOME}/Documents/graphhopper/core/os-itn-m27-m3-north-gh
@@ -24,7 +29,10 @@ ITNDATA=/media/sf_/media/shared/modified-exeter/58096-SX9192-modified.xml
 #ITNDATA=${HOME}/Development/graphhopper2/graphhopper/tools/os-itn-wickham-direction-error.xml
 #GRAPHOUTPUTDIR=${HOME}/Documents/graphhopper/core/os-itn-wickham-direction-error-gh
 
-java -Xmx4596m -Xms2048m -XX:+UseParallelGC -XX:+UseParallelOldGC -cp ../tools/target/classes:target/classes:${HOME}/.m2/repository/net/java/dev/jsr-275/jsr-275/1.0-beta-2/jsr-275-1.0-beta-2.jar:${HOME}/.m2/repository/java3d/vecmath/1.3.2/vecmath-1.3.2.jar:${HOME}/.m2/repository/org/geotools/gt-opengis/12.1/gt-opengis-12.1.jar:${HOME}/.m2/repository/org/geotools/gt-epsg-hsql/12.1/gt-epsg-hsql-12.1.jar:${HOME}/.m2/repository/org/hsqldb/hsqldb/2.3.2/hsqldb-2.3.2.jar:${HOME}/.m2/repository/javax/media/jai_core/1.1.3/jai_core-1.1.3.jar:${HOME}/.m2/repository/org/geotools/gt-referencing/12.1/gt-referencing-12.1.jar:${HOME}/.m2/repository/org/geotools/gt-metadata/12.1/gt-metadata-12.1.jar:${HOME}/.m2/repository/org/slf4j/slf4j-api/1.7.7/slf4j-api-1.7.7.jar:${HOME}/.m2/repository/net/sf/trove4j/trove4j/3.0.3/trove4j-3.0.3.jar${LOGIT} com.graphhopper.tools.Import osmreader.osm=${ITNDATA} reader.implementation=OSITN graph.location=${GRAPHOUTPUTDIR} config=../config.properties
+java -Xmx4596m -Xms2048m -XX:+UseParallelGC -XX:+UseParallelOldGC -cp ../tools/target/classes:target/classes:${HOME}/.m2/repository/net/java/dev/jsr-275/jsr-275/1.0-beta-2/jsr-275-1.0-beta-2.jar:${HOME}/.m2/repository/java3d/vecmath/1.3.2/vecmath-1.3.2.jar:${HOME}/.m2/repository/org/geotools/gt-opengis/12.1/gt-opengis-12.1.jar:${HOME}/.m2/repository/org/geotools/gt-epsg-hsql/12.1/gt-epsg-hsql-12.1.jar:${HOME}/.m2/repository/org/hsqldb/hsqldb/2.3.2/hsqldb-2.3.2.jar:${HOME}/.m2/repository/javax/media/jai_core/1.1.3/jai_core-1.1.3.jar:${HOME}/.m2/repository/org/geotools/gt-referencing/12.1/gt-referencing-12.1.jar:${HOME}/.m2/repository/org/geotools/gt-metadata/12.1/gt-metadata-12.1.jar:${HOME}/.m2/repository/org/slf4j/slf4j-api/1.7.7/slf4j-api-1.7.7.jar:${HOME}/.m2/repository/net/sf/trove4j/trove4j/3.0.3/trove4j-3.0.3.jar${LOGIT} com.graphhopper.tools.Import osmreader.osm=${ITNDATA} reader.implementation=OSITN graph.location=${GRAPHOUTPUTDIR} graph.flagEncoders="car|turnCosts=true" prepare.chWeighting=none osmreader.acceptWay=car config=../config.properties
+
+
+#osmreader.osm=../58096-SX9192-modified.xml reader.implementation=OSITN graph.location=target/ingestion/58096-SX9192-modified/itn-gh graph.flagEncoders="car|turnCosts=true" prepare.chWeighting=none osmreader.acceptWay=car config=../config.properties
 
 ENDTIME=$(date +%s)
 echo "Generation took $[$ENDTIME - $STARTTIME] seconds"
diff --git a/core/src/main/java/com/graphhopper/GraphHopper.java b/core/src/main/java/com/graphhopper/GraphHopper.java
index 1b1e5c650e..21ffa3f9e6 100644
--- a/core/src/main/java/com/graphhopper/GraphHopper.java
+++ b/core/src/main/java/com/graphhopper/GraphHopper.java
@@ -90,1153 +90,1074 @@
 /**
  * Easy to use access point to configure import and (offline) routing.
  * <p/>
- * 
+ *
  * @see GraphHopperAPI
  * @author Peter Karich
  */
 public class GraphHopper implements GraphHopperAPI {
-	private static final String READER_UNAVAILABLE = "DataReader implementation %s not available check your setting for reader.implementation.  Allowed options are OSM, OSITN or OSDPN";
-	private final Logger logger = LoggerFactory.getLogger(getClass());
-	// for graph:
-	private GraphStorage graph;
-	private EncodingManager encodingManager;
-	private int defaultSegmentSize = -1;
-	private String ghLocation = "";
-	private DAType dataAccessType = DAType.RAM_STORE;
-	private boolean sortGraph = false;
-	boolean removeZipped = true;
-	private boolean elevation = false;
-	private LockFactory lockFactory = new NativeFSLockFactory();
-	private final String fileLockName = "gh.lock";
-	private boolean allowWrites = true;
-	boolean enableInstructions = true;
-	private boolean fullyLoaded = false;
-	// for routing
-	private double defaultWeightLimit = Double.MAX_VALUE;
-	private boolean simplifyResponse = true;
-	private TraversalMode traversalMode = TraversalMode.NODE_BASED;
-	private RoutingAlgorithmFactory algoFactory;
-	// for index
-	private LocationIndex locationIndex;
-	private int preciseIndexResolution = 300;
-	private int maxRegionSearch = 4;
-	// for prepare
-	private int minNetworkSize = 200;
-	private int minOneWayNetworkSize = 0;
-	// for CH prepare
-	private boolean doPrepare = true;
-	private boolean chEnabled = true;
-	private String chWeightingStr = "fastest";
-	private int periodicUpdates = -1;
-	private int lazyUpdates = -1;
-	private int neighborUpdates = -1;
-	private double logMessages = -1;
-	// for OSM import
-	private String dataReader = "OSM";
-	private String osmFile;
-	private double osmReaderWayPointMaxDistance = 1;
-	private int workerThreads = -1;
-	private boolean calcPoints = true;
-	// utils
-	private final TranslationMap trMap = new TranslationMap().doImport();
-	private ElevationProvider eleProvider = ElevationProvider.NOOP;
-	private final AtomicLong visitedSum = new AtomicLong(0);
-
-	/**
-	 * Certain readers require additional arguments so this can be passed to
-	 * them as a constructor parameter
-	 */
-	private CmdArgs args;
-
-	public GraphHopper() {
-	}
-
-	/**
-	 * For testing only
-	 */
-	protected GraphHopper loadGraph(GraphStorage g) {
-		this.graph = g;
-		fullyLoaded = true;
-		initLocationIndex();
-		return this;
-	}
-
-	/**
-	 * Specify which vehicles can be read by this GraphHopper instance. An
-	 * encoding manager defines how data from every vehicle is written (und
-	 * read) into edges of the graph.
-	 */
-	public GraphHopper setEncodingManager(EncodingManager em) {
-		ensureNotLoaded();
-		this.encodingManager = em;
-		if (em.needsTurnCostsSupport())
-			traversalMode = TraversalMode.EDGE_BASED_2DIR;
-
-		return this;
-	}
-
-	FlagEncoder getDefaultVehicle() {
-		if (encodingManager == null) {
-			throw new IllegalStateException(
-					"No encoding manager specified or loaded");
-		}
-
-		return encodingManager.fetchEdgeEncoders().get(0);
-	}
-
-	public EncodingManager getEncodingManager() {
-		return encodingManager;
-	}
-
-	public GraphHopper setElevationProvider(ElevationProvider eleProvider) {
-		if (eleProvider == null || eleProvider == ElevationProvider.NOOP)
-			setElevation(false);
-		else
-			setElevation(true);
-		this.eleProvider = eleProvider;
-		return this;
-	}
-
-	/**
-	 * Threads for data reading.
-	 */
-	protected int getWorkerThreads() {
-		return workerThreads;
-	}
-
-	/**
-	 * Return maximum distance (in meter) to reduce points via douglas peucker
-	 * while OSM import.
-	 */
-	protected double getWayPointMaxDistance() {
-		return osmReaderWayPointMaxDistance;
-	}
-
-	/**
-	 * This parameter specifies how to reduce points via douglas peucker while
-	 * OSM import. Higher value means more details, unit is meter. Default is 1.
-	 * Disable via 0.
-	 */
-	public GraphHopper setWayPointMaxDistance(double wayPointMaxDistance) {
-		this.osmReaderWayPointMaxDistance = wayPointMaxDistance;
-		return this;
-	}
-
-	/**
-	 * Sets the default traversal mode used for the algorithms and preparation.
-	 */
-	public GraphHopper setTraversalMode(TraversalMode traversalMode) {
-		this.traversalMode = traversalMode;
-		return this;
-	}
-
-	public TraversalMode getTraversalMode() {
-		return traversalMode;
-	}
-
-	/**
-	 * Configures the underlying storage and response to be used on a well
-	 * equipped server. Result also optimized for usage in the web module i.e.
-	 * try reduce network IO.
-	 */
-	public GraphHopper forServer() {
-		setSimplifyResponse(true);
-		return setInMemory();
-	}
-
-	/**
-	 * Configures the underlying storage to be used on a Desktop computer or
-	 * within another Java application with enough RAM but no network latency.
-	 */
-	public GraphHopper forDesktop() {
-		setSimplifyResponse(false);
-		return setInMemory();
-	}
-
-	/**
-	 * Configures the underlying storage to be used on a less powerful machine
-	 * like Android or Raspberry Pi with only few MB of RAM.
-	 */
-	public GraphHopper forMobile() {
-		setSimplifyResponse(false);
-		return setMemoryMapped();
-	}
-
-	/**
-	 * Precise location resolution index means also more space (disc/RAM) could
-	 * be consumed and probably slower query times, which would be e.g. not
-	 * suitable for Android. The resolution specifies the tile width (in meter).
-	 */
-	public GraphHopper setPreciseIndexResolution(int precision) {
-		ensureNotLoaded();
-		preciseIndexResolution = precision;
-		return this;
-	}
-
-	public void setMinNetworkSize(int minNetworkSize, int minOneWayNetworkSize) {
-		this.minNetworkSize = minNetworkSize;
-		this.minOneWayNetworkSize = minOneWayNetworkSize;
-	}
-
-	/**
-	 * This method call results in an in-memory graph.
-	 */
-	public GraphHopper setInMemory() {
-		ensureNotLoaded();
-		dataAccessType = DAType.RAM_STORE;
-		return this;
-	}
-
-	/**
-	 * Only valid option for in-memory graph and if you e.g. want to disable
-	 * store on flush for unit tests. Specify storeOnFlush to true if you want
-	 * that existing data will be loaded FROM disc and all in-memory data will
-	 * be flushed TO disc after flush is called e.g. while OSM import.
-	 * <p>
-	 * 
-	 * @param storeOnFlush
-	 *            true by default
-	 */
-	public GraphHopper setStoreOnFlush(boolean storeOnFlush) {
-		ensureNotLoaded();
-		if (storeOnFlush)
-			dataAccessType = DAType.RAM_STORE;
-		else
-			dataAccessType = DAType.RAM;
-		return this;
-	}
-
-	/**
-	 * Enable memory mapped configuration if not enough memory is available on
-	 * the target platform.
-	 */
-	public GraphHopper setMemoryMapped() {
-		ensureNotLoaded();
-		dataAccessType = DAType.MMAP;
-		return this;
-	}
-
-	/**
-	 * Not yet stable enough to offer it for everyone
-	 */
-	private GraphHopper setUnsafeMemory() {
-		ensureNotLoaded();
-		dataAccessType = DAType.UNSAFE_STORE;
-		return this;
-	}
-
-	/**
-	 * Enables the use of contraction hierarchies to reduce query times. Enabled
-	 * by default.
-	 * <p/>
-	 * 
-	 * @param weighting
-	 *            can be "fastest", "shortest" or your own weight-calculation
-	 *            type.
-	 * @see #setCHEnable(boolean)
-	 */
-	public GraphHopper setCHWeighting(String weighting) {
-		ensureNotLoaded();
-		chWeightingStr = weighting;
-		return this;
-	}
-
-	public String getCHWeighting() {
-		return chWeightingStr;
-	}
-
-	/**
-	 * Disables the "CH-preparation" preparation only. Use only if you know what
-	 * you do. To disable the full usage of CH use setCHEnable(false) instead.
-	 */
-	public GraphHopper setDoPrepare(boolean doPrepare) {
-		this.doPrepare = doPrepare;
-		return this;
-	}
-
-	/**
-	 * Enables or disables contraction hierarchies (CH). This speed-up mode is
-	 * enabled by default. Disabling CH is only recommended for short routes or
-	 * in combination with setDefaultWeightLimit and called flexibility mode
-	 * <p>
-	 * 
-	 * @see #setDefaultWeightLimit(double)
-	 */
-	public GraphHopper setCHEnable(boolean enable) {
-		ensureNotLoaded();
-		algoFactory = null;
-		chEnabled = enable;
-		return this;
-	}
-
-	/**
-	 * This methods stops the algorithm from searching further if the resulting
-	 * path would go over specified weight, important if CH is disabled. The
-	 * unit is defined by the used weighting created from createWeighting, e.g.
-	 * distance for shortest or seconds for the standard FastestWeighting
-	 * implementation.
-	 */
-	public void setDefaultWeightLimit(double defaultWeightLimit) {
-		this.defaultWeightLimit = defaultWeightLimit;
-	}
-
-	public boolean isCHEnabled() {
-		return chEnabled;
-	}
-
-	/**
-	 * @return true if storing and fetching elevation data is enabled. Default
-	 *         is false
-	 */
-	public boolean hasElevation() {
-		return elevation;
-	}
-
-	/**
-	 * Enable storing and fetching elevation data. Default is false
-	 */
-	public GraphHopper setElevation(boolean includeElevation) {
-		this.elevation = includeElevation;
-		return this;
-	}
-
-	/**
-	 * This method specifies if the import should include way names to be able
-	 * to return instructions for a route.
-	 */
-	public GraphHopper setEnableInstructions(boolean b) {
-		ensureNotLoaded();
-		enableInstructions = b;
-		return this;
-	}
-
-	/**
-	 * This methods enables gps point calculation. If disabled only distance
-	 * will be calculated.
-	 */
-	public GraphHopper setEnableCalcPoints(boolean b) {
-		calcPoints = b;
-		return this;
-	}
-
-	/**
-	 * This method specifies if the returned path should be simplified or not,
-	 * via douglas-peucker or similar algorithm.
-	 */
-	private GraphHopper setSimplifyResponse(boolean doSimplify) {
-		this.simplifyResponse = doSimplify;
-		return this;
-	}
-
-	/**
-	 * Sets the graphhopper folder.
-	 */
-	public GraphHopper setGraphHopperLocation(String ghLocation) {
-		ensureNotLoaded();
-		if (ghLocation == null)
-			throw new IllegalArgumentException(
-					"graphhopper location cannot be null");
-
-		this.ghLocation = ghLocation;
-		return this;
-	}
-
-	public String getGraphHopperLocation() {
-		return ghLocation;
-	}
-
-	/**
-	 * This file can be an osm xml (.osm), a compressed xml (.osm.zip or
-	 * .osm.gz) or a protobuf file (.pbf).
-	 */
-	public GraphHopper setOSMFile(String osmFileStr) {
-		ensureNotLoaded();
-		if (Helper.isEmpty(osmFileStr))
-			throw new IllegalArgumentException("OSM file cannot be empty.");
-
-		osmFile = osmFileStr;
-		return this;
-	}
-
-	public String getOSMFile() {
-		return osmFile;
-	}
-
-	/**
-	 * The underlying graph used in algorithms.
-	 * <p>
-	 * 
-	 * @throws IllegalStateException
-	 *             if graph is not instantiated.
-	 */
-	public GraphStorage getGraph() {
-		if (graph == null)
-			throw new IllegalStateException("Graph not initialized");
-
-		return graph;
-	}
-
-	public void setGraph(GraphStorage graph) {
-		this.graph = graph;
-	}
-
-	protected void setLocationIndex(LocationIndex locationIndex) {
-		this.locationIndex = locationIndex;
-	}
-
-	/**
-	 * The location index created from the graph.
-	 * <p>
-	 * 
-	 * @throws IllegalStateException
-	 *             if index is not initialized
-	 */
-	public LocationIndex getLocationIndex() {
-		if (locationIndex == null)
-			throw new IllegalStateException("Location index not initialized");
-
-		return locationIndex;
-	}
-
-	/**
-	 * Sorts the graph which requires more RAM while import. See #12
-	 */
-	public GraphHopper setSortGraph(boolean sortGraph) {
-		ensureNotLoaded();
-		this.sortGraph = sortGraph;
-		return this;
-	}
-
-	/**
-	 * Specifies if it is allowed for GraphHopper to write. E.g. for read only
-	 * filesystems it is not possible to create a lock file and so we can avoid
-	 * write locks.
-	 */
-	public GraphHopper setAllowWrites(boolean allowWrites) {
-		this.allowWrites = allowWrites;
-		return this;
-	}
-
-	public boolean isAllowWrites() {
-		return allowWrites;
-	}
-
-	public TranslationMap getTranslationMap() {
-		return trMap;
-	}
-
-	/**
-	 * Reads configuration from a CmdArgs object. Which can be manually filled,
-	 * or via main(String[] args) ala CmdArgs.read(args) or via configuration
-	 * file ala CmdArgs.readFromConfig("config.properties",
-	 * "graphhopper.config")
-	 */
-	public GraphHopper init(CmdArgs args) {
-		args = CmdArgs.readFromConfigAndMerge(args, "config",
-				"graphhopper.config");
-		this.args=args;
-		String tmpOsmFile = args.get("osmreader.osm", "");
-		if (!Helper.isEmpty(tmpOsmFile))
-			osmFile = tmpOsmFile;
-
-		dataReader = args.get("reader.implementation", dataReader);
-
-		String graphHopperFolder = args.get("graph.location", "");
-		if (Helper.isEmpty(graphHopperFolder) && Helper.isEmpty(ghLocation)) {
-			if (Helper.isEmpty(osmFile))
-				throw new IllegalArgumentException(
-						"You need to specify an OSM file.");
-
-			graphHopperFolder = Helper.pruneFileEnd(osmFile) + "-gh";
-		}
-
-		// graph
-		setGraphHopperLocation(graphHopperFolder);
-		defaultSegmentSize = args.getInt("graph.dataaccess.segmentSize",
-				defaultSegmentSize);
-
-		String graphDATypeStr = args.get("graph.dataaccess", "RAM_STORE");
-		dataAccessType = DAType.fromString(graphDATypeStr);
-
-		sortGraph = args.getBool("graph.doSort", sortGraph);
-		removeZipped = args.getBool("graph.removeZipped", removeZipped);
-		int bytesForFlags = args.getInt("graph.bytesForFlags", 8);
-		if (args.get("graph.locktype", "native").equals("simple"))
-			lockFactory = new SimpleFSLockFactory();
-		else
-			lockFactory = new NativeFSLockFactory();
-
-		// elevation
-		String eleProviderStr = args.get("graph.elevation.provider", "noop")
-				.toLowerCase();
-		boolean eleCalcMean = args.getBool("graph.elevation.calcmean", false);
-		String cacheDirStr = args.get("graph.elevation.cachedir", "");
-		String baseURL = args.get("graph.elevation.baseurl", "");
-		DAType elevationDAType = DAType.fromString(args.get(
-				"graph.elevation.dataaccess", "MMAP"));
-		ElevationProvider tmpProvider = ElevationProvider.NOOP;
-		if (eleProviderStr.equalsIgnoreCase("srtm")) {
-			tmpProvider = new SRTMProvider();
-		} else if (eleProviderStr.equalsIgnoreCase("cgiar")) {
-			CGIARProvider cgiarProvider = new CGIARProvider();
-			cgiarProvider.setAutoRemoveTemporaryFiles(args.getBool(
-					"graph.elevation.cgiar.clear", true));
-			tmpProvider = cgiarProvider;
-		}
-
-		tmpProvider.setCalcMean(eleCalcMean);
-		tmpProvider.setCacheDir(new File(cacheDirStr));
-		if (!baseURL.isEmpty())
-			tmpProvider.setBaseURL(baseURL);
-		tmpProvider.setDAType(elevationDAType);
-		setElevationProvider(tmpProvider);
-
-		// optimizable prepare
-		minNetworkSize = args.getInt("prepare.minNetworkSize", minNetworkSize);
-		minOneWayNetworkSize = args.getInt("prepare.minOneWayNetworkSize",
-				minOneWayNetworkSize);
-
-		// prepare CH
-		doPrepare = args.getBool("prepare.doPrepare", doPrepare);
-		String tmpCHWeighting = args.get("prepare.chWeighting", "fastest");
-		chEnabled = "fastest".equals(tmpCHWeighting)
-				|| "shortest".equals(tmpCHWeighting);
-		if (chEnabled)
-			setCHWeighting(tmpCHWeighting);
-
-		periodicUpdates = args.getInt("prepare.updates.periodic",
-				periodicUpdates);
-		lazyUpdates = args.getInt("prepare.updates.lazy", lazyUpdates);
-		neighborUpdates = args.getInt("prepare.updates.neighbor",
-				neighborUpdates);
-		logMessages = args.getDouble("prepare.logmessages", logMessages);
-
-		// osm import
-		osmReaderWayPointMaxDistance = args.getDouble(
-				"osmreader.wayPointMaxDistance", osmReaderWayPointMaxDistance);
-		String flagEncoders = args.get("graph.flagEncoders", "");
-		if (!flagEncoders.isEmpty())
-			setEncodingManager(new EncodingManager(flagEncoders, bytesForFlags));
-
-		workerThreads = args.getInt("osmreader.workerThreads", workerThreads);
-		enableInstructions = args.getBool("osmreader.instructions",
-				enableInstructions);
-
-		// index
-		preciseIndexResolution = args.getInt("index.highResolution",
-				preciseIndexResolution);
-		maxRegionSearch = args.getInt("index.maxRegionSearch", maxRegionSearch);
-
-		// routing
-		defaultWeightLimit = args.getDouble("routing.defaultWeightLimit",
-				defaultWeightLimit);
-		return this;
-	}
-
-	private void printInfo() {
-		logger.info("version " + Constants.VERSION + "|" + Constants.BUILD_DATE
-				+ " (" + Constants.getVersions() + ")");
-		if (graph != null)
-			logger.info("graph " + graph.toString() + ", details:"
-					+ graph.toDetailsString());
-	}
-
-	/**
-	 * Imports provided data from disc and creates graph. Depending on the
-	 * settings the resulting graph will be stored to disc so on a second call
-	 * this method will only load the graph from disc which is usually a lot
-	 * faster.
-	 */
-	public GraphHopper importOrLoad() {
-		if (!load(ghLocation)) {
-			printInfo();
-			process(ghLocation);
-		} else {
-			printInfo();
-		}
-		return this;
-	}
-
-	/**
-	 * Creates the graph from OSM data.
-	 */
-	private GraphHopper process(String graphHopperLocation) {
-		setGraphHopperLocation(graphHopperLocation);
-		Lock lock = null;
-		try {
-			if (graph.getDirectory().getDefaultType().isStoring()) {
-				lockFactory.setLockDir(new File(graphHopperLocation));
-				lock = lockFactory.create(fileLockName, true);
-				if (!lock.tryLock())
-					throw new RuntimeException(
-							"To avoid multiple writers we need to obtain a write lock but it failed. In "
-									+ graphHopperLocation,
-							lock.getObtainFailedReason());
-			}
-
-			try {
-				importData();
-				graph.getProperties().put("osmreader.import.date",
-						formatDateTime(new Date()));
-			} catch (IOException ex) {
-				throw new RuntimeException("Cannot parse OSM file "
-						+ getOSMFile(), ex);
-			}
-			cleanUp();
-			optimize();
-			postProcessing();
-			flush();
-		} finally {
-			if (lock != null)
-				lock.release();
-		}
-		return this;
-	}
-
-	protected DataReader importData() throws IOException {
-		ensureWriteAccess();
-		if (graph == null)
-			throw new IllegalStateException(
-					"Load graph before importing OSM data");
-
-		if (osmFile == null)
-			throw new IllegalStateException(
-					"Couldn't load from existing folder: "
-							+ ghLocation
-							+ " but also cannot import from OSM file as it wasn't specified!");
-
-		encodingManager.setEnableInstructions(enableInstructions);
-		DataReader reader = createReader(graph);
-		logger.info("using " + graph.toString() + ", memory:"
-				+ Helper.getMemInfo());
-		reader.readGraph();
-		return reader;
-	}
-
-	protected DataReader createReader(GraphStorage tmpGraph) {
-		DataReader reader;
-		if ("OSM".equals(dataReader))
-			reader = new OSMReader(tmpGraph);
-		else if ("OSITN".equals(dataReader))
-			reader = new OsItnReader(tmpGraph, args);
-		else if ("OSDPN".equals(dataReader))
-			reader = new OsDpnReader(tmpGraph);
-		else if ("OSHN".equals(dataReader))
-			reader = new OsHnReader(tmpGraph);
-		else {
-			String exceptionMessage = String.format(READER_UNAVAILABLE,
-					dataReader);
-			throw new IllegalArgumentException(exceptionMessage);
-		}
-		return initReader(reader);
-	}
-
-	protected DataReader initReader(DataReader reader) {
-		if (osmFile == null)
-			throw new IllegalArgumentException("No OSM file specified");
-
-		logger.info("start creating graph from " + osmFile);
-		File osmTmpFile = new File(osmFile);
-		return reader.setOSMFile(osmTmpFile).setElevationProvider(eleProvider)
-				.setWorkerThreads(workerThreads)
-				.setEncodingManager(encodingManager)
-				.setWayPointMaxDistance(osmReaderWayPointMaxDistance);
-	}
-
-	/**
-	 * Opens existing graph.
-	 * <p/>
-	 * 
-	 * @param graphHopperFolder
-	 *            is the folder containing graphhopper files (which can be
-	 *            compressed too)
-	 */
-	@Override
-	public boolean load(String graphHopperFolder) {
-		if (Helper.isEmpty(graphHopperFolder))
-			throw new IllegalStateException(
-					"graphHopperLocation is not specified. call init before");
-
-		if (fullyLoaded)
-			throw new IllegalStateException(
-					"graph is already successfully loaded");
-
-		if (graphHopperFolder.endsWith("-gh")) {
-			// do nothing
-		} else if (graphHopperFolder.endsWith(".osm")
-				|| graphHopperFolder.endsWith(".xml")) {
-			throw new IllegalArgumentException(
-					"To import an osm file you need to use importOrLoad");
-		} else if (!graphHopperFolder.contains(".")) {
-			if (new File(graphHopperFolder + "-gh").exists())
-				graphHopperFolder += "-gh";
-		} else {
-			File compressed = new File(graphHopperFolder + ".ghz");
-			if (compressed.exists() && !compressed.isDirectory()) {
-				try {
-					new Unzipper().unzip(compressed.getAbsolutePath(),
-							graphHopperFolder, removeZipped);
-				} catch (IOException ex) {
-					throw new RuntimeException("Couldn't extract file "
-							+ compressed.getAbsolutePath() + " to "
-							+ graphHopperFolder, ex);
-				}
-			}
-		}
-
-		setGraphHopperLocation(graphHopperFolder);
-
-		if (encodingManager == null)
-			setEncodingManager(EncodingManager.create(ghLocation));
-
-		if (!allowWrites && dataAccessType.isMMap())
-			dataAccessType = DAType.MMAP_RO;
-
-		GHDirectory dir = new GHDirectory(ghLocation, dataAccessType);
-		if (chEnabled)
-			graph = new LevelGraphStorage(dir, encodingManager, hasElevation());
-		else if (encodingManager.needsTurnCostsSupport())
-			graph = new GraphHopperStorage(dir, encodingManager,
-					hasElevation(), new TurnCostExtension());
-		else
-			graph = new GraphHopperStorage(dir, encodingManager, hasElevation());
-
-		graph.setSegmentSize(defaultSegmentSize);
-
-		Lock lock = null;
-		try {
-			// create locks only if writes are allowed, if they are not allowed
-			// a lock cannot be created
-			// (e.g. on a read only filesystem locks would fail)
-			if (graph.getDirectory().getDefaultType().isStoring()
-					&& isAllowWrites()) {
-				lockFactory.setLockDir(new File(ghLocation));
-				lock = lockFactory.create(fileLockName, false);
-				if (!lock.tryLock())
-					throw new RuntimeException(
-							"To avoid reading partial data we need to obtain the read lock but it failed. In "
-									+ ghLocation, lock.getObtainFailedReason());
-			}
-
-			if (!graph.loadExisting())
-				return false;
-
-			postProcessing();
-			fullyLoaded = true;
-			return true;
-		} finally {
-			if (lock != null)
-				lock.release();
-		}
-	}
-
-	public RoutingAlgorithmFactory getAlgorithmFactory() {
-		if (algoFactory == null)
-			this.algoFactory = new RoutingAlgorithmFactorySimple();
-
-		return algoFactory;
-	}
-
-	public void setAlgorithmFactory(RoutingAlgorithmFactory algoFactory) {
-		this.algoFactory = algoFactory;
-	}
-
-	/**
-	 * Sets EncodingManager, does the preparation and creates the locationIndex
-	 */
-	protected void postProcessing() {
-		initLocationIndex();
-		if (chEnabled)
-			algoFactory = createPrepare();
-		else
-			algoFactory = new RoutingAlgorithmFactorySimple();
-
-		if (!isPrepared())
-			prepare();
-	}
-
-	private boolean isPrepared() {
-		return "true".equals(graph.getProperties().get("prepare.done"));
-	}
-
-	protected RoutingAlgorithmFactory createPrepare() {
-		FlagEncoder defaultVehicle = getDefaultVehicle();
-		Weighting weighting = createWeighting(new WeightingMap(chWeightingStr),
-				defaultVehicle);
-		PrepareContractionHierarchies tmpPrepareCH = new PrepareContractionHierarchies(
-				new GHDirectory("", DAType.RAM_INT), (LevelGraph) graph,
-				defaultVehicle, weighting, traversalMode);
-		tmpPrepareCH.setPeriodicUpdates(periodicUpdates)
-				.setLazyUpdates(lazyUpdates)
-				.setNeighborUpdates(neighborUpdates)
-				.setLogMessages(logMessages);
-
-		return tmpPrepareCH;
-	}
-
-	/**
-	 * Based on the weightingParameters and the specified vehicle a Weighting
-	 * instance can be created. Note that all URL parameters are available in
-	 * the weightingParameters as String if you use the GraphHopper Web module.
-	 * <p>
-	 * 
-	 * @see WeightingMap
-	 * @param weightingMap
-	 *            all parameters influencing the weighting. E.g. parameters
-	 *            coming via GHRequest.getHints or directly via "&api.xy=" from
-	 *            the URL of the web UI
-	 * @param encoder
-	 *            the required vehicle
-	 * @return the weighting to be used for route calculation
-	 */
-	public Weighting createWeighting(WeightingMap weightingMap,
-			FlagEncoder encoder) {
-		String weighting = weightingMap.getWeighting();
-		Weighting result;
-
-		if ("shortest".equalsIgnoreCase(weighting)) {
-			result = new ShortestWeighting();
-		} else if ("fastest".equalsIgnoreCase(weighting) || weighting.isEmpty()) {
-			if (encoder.supports(PriorityWeighting.class))
-				result = new PriorityWeighting(encoder);
-			else
-				result = new FastestWeighting(encoder);
-		} else if ("fastavoid".equalsIgnoreCase(weighting)) {
-			String avoidanceString = weightingMap.get("avoidances", "cliff");
-			String[] avoidances = avoidanceString.split(",");
-			if (encoder.supports(PriorityWeighting.class))
-				result = new PriorityWithAvoidancesWeighting(encoder, avoidances);
-			else
-				result = new FastestWithAvoidancesWeighting(encoder, avoidances);
-		} else if ("shortavoid".equalsIgnoreCase(weighting)) {
-			String avoidanceString = weightingMap.get("avoidances", "cliff");
-			String[] avoidances = avoidanceString.split(",");
-			result = new ShortestWithAvoidancesWeighting(encoder, avoidances);
-		} else {
-			throw new UnsupportedOperationException("weighting " + weighting
-					+ " not supported");
-		}
-		return result;
-	}
-
-	/**
-	 * Potentially wraps the specified weighting into a TurnWeighting instance.
-	 */
-	public Weighting createTurnWeighting(Weighting weighting, Graph graph,
-			FlagEncoder encoder) {
-		if (encoder.supports(TurnWeighting.class))
-			return new TurnWeighting(weighting, encoder,
-					(TurnCostExtension) graph.getExtension());
-		return weighting;
-	}
-
-	@Override
-	public GHResponse route(GHRequest request) {
-		GHResponse response = new GHResponse();
-		List<Path> paths = getPaths(request, response);
-		if (response.hasErrors())
-			return response;
-
-		boolean tmpEnableInstructions = request.getHints().getBool(
-				"instructions", enableInstructions);
-		boolean tmpCalcPoints = request.getHints().getBool("calcPoints",
-				calcPoints);
-		double wayPointMaxDistance = request.getHints().getDouble(
-				"wayPointMaxDistance", 1d);
-		Locale locale = request.getLocale();
-		DouglasPeucker peucker = new DouglasPeucker()
-				.setMaxDistance(wayPointMaxDistance);
-
-		new PathMerger()
-				.setCalcPoints(tmpCalcPoints)
-				.setDouglasPeucker(peucker)
-				.setEnableInstructions(tmpEnableInstructions)
-				.setSimplifyResponse(
-						simplifyResponse && wayPointMaxDistance > 0)
-				.doWork(response, paths, trMap.getWithFallBack(locale));
-		return response;
-	}
-
-	protected List<Path> getPaths(GHRequest request, GHResponse rsp) {
-		if (graph == null || !fullyLoaded)
-			throw new IllegalStateException(
-					"Call load or importOrLoad before routing");
-
-		if (graph.isClosed())
-			throw new IllegalStateException(
-					"You need to create a new GraphHopper instance as it is already closed");
-
-		String vehicle = request.getVehicle();
-		if (vehicle.isEmpty())
-			vehicle = getDefaultVehicle().toString();
-
-		if (!encodingManager.supports(vehicle)) {
-			rsp.addError(new IllegalArgumentException("Vehicle " + vehicle
-					+ " unsupported. " + "Supported are: "
-					+ getEncodingManager()));
-			return Collections.emptyList();
-		}
-
-		TraversalMode tMode;
-		String tModeStr = request.getHints().get("traversal_mode",
-				traversalMode.toString());
-		try {
-			tMode = TraversalMode.fromString(tModeStr);
-		} catch (Exception ex) {
-			rsp.addError(ex);
-			return Collections.emptyList();
-		}
-
-		List<GHPoint> points = request.getPoints();
-		if (points.size() < 2) {
-			rsp.addError(new IllegalStateException(
-					"At least 2 points has to be specified, but was:"
-							+ points.size()));
-			return Collections.emptyList();
-		}
-
-		visitedSum.set(0);
-
-		FlagEncoder encoder = encodingManager.getEncoder(vehicle);
-		EdgeFilter edgeFilter = new DefaultEdgeFilter(encoder);
-
-		StopWatch sw = new StopWatch().start();
-		List<QueryResult> qResults = new ArrayList<QueryResult>(points.size());
-		for (int placeIndex = 0; placeIndex < points.size(); placeIndex++) {
-			GHPoint point = points.get(placeIndex);
-			QueryResult res = locationIndex.findClosest(point.lat, point.lon,
-					edgeFilter);
-			if (!res.isValid())
-				rsp.addError(new IllegalArgumentException("Cannot find point "
-						+ placeIndex + ": " + point));
-
-			qResults.add(res);
-		}
-
-		if (rsp.hasErrors())
-			return Collections.emptyList();
-
-		String debug = "idLookup:" + sw.stop().getSeconds() + "s";
-
-		QueryGraph queryGraph;
-		RoutingAlgorithmFactory tmpAlgoFactory = getAlgorithmFactory();
-		if (chEnabled
-				&& !vehicle.equalsIgnoreCase(getDefaultVehicle().toString())) {
-			// fall back to normal traversing
-			tmpAlgoFactory = new RoutingAlgorithmFactorySimple();
-			queryGraph = new QueryGraph(graph.getBaseGraph());
-		} else {
-			queryGraph = new QueryGraph(graph);
-		}
-
-		queryGraph.lookup(qResults);
-
-		List<Path> paths = new ArrayList<Path>(points.size() - 1);
-		QueryResult fromQResult = qResults.get(0);
-		Weighting weighting = createWeighting(request.getHints(), encoder);
-		weighting = createTurnWeighting(weighting, queryGraph, encoder);
-
-		double weightLimit = request.getHints().getDouble("defaultWeightLimit",
-				defaultWeightLimit);
-		String algoStr = request.getAlgorithm().isEmpty() ? AlgorithmOptions.DIJKSTRA_BI
-				: request.getAlgorithm();
-		AlgorithmOptions algoOpts = AlgorithmOptions.start().algorithm(algoStr)
-				.traversalMode(tMode).flagEncoder(encoder).weighting(weighting)
-				.build();
-
-		for (int placeIndex = 1; placeIndex < points.size(); placeIndex++) {
-			QueryResult toQResult = qResults.get(placeIndex);
-			sw = new StopWatch().start();
-			RoutingAlgorithm algo = tmpAlgoFactory.createAlgo(queryGraph,
-					algoOpts);
-			algo.setWeightLimit(weightLimit);
-			debug += ", algoInit:" + sw.stop().getSeconds() + "s";
-
-			sw = new StopWatch().start();
-			Path path = algo.calcPath(fromQResult.getClosestNode(),
-					toQResult.getClosestNode());
-			if (path.getTime() < 0)
-				throw new RuntimeException(
-						"Time was negative. Please report as bug and include:"
-								+ request);
-
-			paths.add(path);
-			debug += ", " + algo.getName() + "-routing:"
-					+ sw.stop().getSeconds() + "s, " + path.getDebugInfo();
-
-			visitedSum.addAndGet(algo.getVisitedNodes());
-			fromQResult = toQResult;
-		}
-
-		if (rsp.hasErrors())
-			return Collections.emptyList();
-
-		if (points.size() - 1 != paths.size())
-			throw new RuntimeException(
-					"There should be exactly one more places than paths. places:"
-							+ points.size() + ", paths:" + paths.size());
-
-		rsp.setDebugInfo(debug);
-		return paths;
-	}
-
-	protected LocationIndex createLocationIndex(Directory dir) {
-		LocationIndexTree tmpIndex = new LocationIndexTree(
-				graph.getBaseGraph(), dir);
-		tmpIndex.setResolution(preciseIndexResolution);
-		tmpIndex.setMaxRegionSearch(maxRegionSearch);
-		if (!tmpIndex.loadExisting()) {
-			ensureWriteAccess();
-			tmpIndex.prepareIndex();
-		}
-
-		return tmpIndex;
-	}
-
-	/**
-	 * Initializes the location index after the import is done.
-	 */
-	protected void initLocationIndex() {
-		if (locationIndex != null)
-			throw new IllegalStateException(
-					"Cannot initialize locationIndex twice!");
-
-		locationIndex = createLocationIndex(graph.getDirectory());
-	}
-
-	protected void optimize() {
-		logger.info("optimizing ... (" + Helper.getMemInfo() + ")");
-		graph.optimize();
-		logger.info("finished optimize (" + Helper.getMemInfo() + ")");
-
-		// Later: move this into the GraphStorage.optimize method
-		// Or: Doing it after preparation to optimize shortcuts too. But not
-		// possible yet #12
-		if (sortGraph) {
-			if (graph instanceof LevelGraph && isPrepared())
-				throw new IllegalArgumentException(
-						"Sorting prepared LevelGraph is not possible yet. See #12");
-
-			GraphStorage newGraph = GHUtility.newStorage(graph);
-			GHUtility.sortDFS(graph, newGraph);
-			logger.info("graph sorted (" + Helper.getMemInfo() + ")");
-			graph = newGraph;
-		}
-	}
-
-	protected void prepare() {
-		boolean tmpPrepare = doPrepare
-				&& algoFactory instanceof PrepareContractionHierarchies;
-		if (tmpPrepare) {
-			ensureWriteAccess();
-			logger.info("calling prepare.doWork for " + getDefaultVehicle()
-					+ " ... (" + Helper.getMemInfo() + ")");
-			((PrepareContractionHierarchies) algoFactory).doWork();
-			graph.getProperties().put("prepare.date",
-					formatDateTime(new Date()));
-		}
-		graph.getProperties().put("prepare.done", tmpPrepare);
-	}
-
-	protected void cleanUp() {
-		int prev = graph.getNodes();
-		PrepareRoutingSubnetworks preparation = new PrepareRoutingSubnetworks(
-				graph, encodingManager);
-		preparation.setMinNetworkSize(minNetworkSize);
-		preparation.setMinOneWayNetworkSize(minOneWayNetworkSize);
-		logger.info("start finding subnetworks, " + Helper.getMemInfo());
-		preparation.doWork();
-		int n = graph.getNodes();
-		// calculate remaining subnetworks
-		int remainingSubnetworks = preparation.findSubnetworks().size();
-		logger.info("edges: " + graph.getAllEdges().getCount() + ", nodes " + n
-				+ ", there were " + preparation.getSubNetworks()
-				+ " subnetworks. removed them => " + (prev - n)
-				+ " less nodes. Remaining subnetworks:" + remainingSubnetworks);
-	}
-
-	protected void flush() {
-		logger.info("flushing graph " + graph.toString() + ", details:"
-				+ graph.toDetailsString() + ", " + Helper.getMemInfo() + ")");
-		graph.flush();
-		fullyLoaded = true;
-	}
-
-	/**
-	 * Releases all associated resources like memory or files. But it does not
-	 * remove them. To remove the files created in graphhopperLocation you have
-	 * to call clean().
-	 */
-	public void close() {
-		if (graph != null)
-			graph.close();
-
-		if (locationIndex != null)
-			locationIndex.close();
-
-		try {
-			lockFactory.forceRemove(fileLockName, true);
-		} catch (Exception ex) {
-			// silently fail e.g. on Windows where we cannot remove an
-			// unreleased native lock
-		}
-	}
-
-	/**
-	 * Removes the on-disc routing files. Call only after calling close or
-	 * before importOrLoad or load
-	 */
-	public void clean() {
-		if (getGraphHopperLocation().isEmpty())
-			throw new IllegalStateException(
-					"Cannot clean GraphHopper without specified graphHopperLocation");
-
-		File folder = new File(getGraphHopperLocation());
-		Helper.removeDir(folder);
-	}
-
-	// make sure this is identical to buildDate used in pom.xml
-	// <maven.build.timestamp.format>yyyy-MM-dd'T'HH:mm:ssZ</maven.build.timestamp.format>
-	private String formatDateTime(Date date) {
-		return new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ").format(date);
-	}
-
-	protected void ensureNotLoaded() {
-		if (fullyLoaded)
-			throw new IllegalStateException(
-					"No configuration changes are possible after loading the graph");
-	}
-
-	protected void ensureWriteAccess() {
-		if (!allowWrites)
-			throw new IllegalStateException("Writes are not allowed!");
-	}
-
-	/**
-	 * Returns the current sum of the visited nodes while routing. Mainly for
-	 * statistic and debugging purposes.
-	 */
-	public long getVisitedSum() {
-		return visitedSum.get();
-	}
-
-	public GraphHopper setAsOSMReader() {
-		dataReader = "OSM";
-		return this;
-	}
-
-	public GraphHopper setAsItnReader() {
-		dataReader = "OSITN";
-		return this;
-	}
-
-	public GraphHopper setAsHnReader() {
-		dataReader = "OSHN";
-		return this;
-	}
-
-	public GraphHopper setAsDpnReader() {
-		dataReader = "OSDPN";
-		return this;
-	}
+    private static final String READER_UNAVAILABLE = "DataReader implementation %s not available check your setting for reader.implementation.  Allowed options are OSM, OSITN or OSDPN";
+    private final Logger logger = LoggerFactory.getLogger(getClass());
+    // for graph:
+    private GraphStorage graph;
+    private EncodingManager encodingManager;
+    private int defaultSegmentSize = -1;
+    private String ghLocation = "";
+    private DAType dataAccessType = DAType.RAM_STORE;
+    private boolean sortGraph = false;
+    boolean removeZipped = true;
+    private boolean elevation = false;
+    private LockFactory lockFactory = new NativeFSLockFactory();
+    private final String fileLockName = "gh.lock";
+    private boolean allowWrites = true;
+    boolean enableInstructions = true;
+    private boolean fullyLoaded = false;
+    // for routing
+    private double defaultWeightLimit = Double.MAX_VALUE;
+    private boolean simplifyResponse = true;
+    private TraversalMode traversalMode = TraversalMode.NODE_BASED;
+    private RoutingAlgorithmFactory algoFactory;
+    // for index
+    private LocationIndex locationIndex;
+    private int preciseIndexResolution = 300;
+    private int maxRegionSearch = 4;
+    // for prepare
+    private int minNetworkSize = 200;
+    private int minOneWayNetworkSize = 0;
+    // for CH prepare
+    private boolean doPrepare = true;
+    private boolean chEnabled = true;
+    private String chWeightingStr = "fastest";
+    private int periodicUpdates = -1;
+    private int lazyUpdates = -1;
+    private int neighborUpdates = -1;
+    private double logMessages = -1;
+    // for OSM import
+    private String dataReader = "OSM";
+    private String osmFile;
+    private double osmReaderWayPointMaxDistance = 1;
+    private int workerThreads = -1;
+    private boolean calcPoints = true;
+    // utils
+    private final TranslationMap trMap = new TranslationMap().doImport();
+    private ElevationProvider eleProvider = ElevationProvider.NOOP;
+    private final AtomicLong visitedSum = new AtomicLong(0);
+
+    /**
+     * Certain readers require additional arguments so this can be passed to
+     * them as a constructor parameter
+     */
+    private CmdArgs args;
+
+    public GraphHopper() {
+    }
+
+    /**
+     * For testing only
+     */
+    protected GraphHopper loadGraph(GraphStorage g) {
+        this.graph = g;
+        fullyLoaded = true;
+        initLocationIndex();
+        return this;
+    }
+
+    /**
+     * Specify which vehicles can be read by this GraphHopper instance. An
+     * encoding manager defines how data from every vehicle is written (und
+     * read) into edges of the graph.
+     */
+    public GraphHopper setEncodingManager(EncodingManager em) {
+        ensureNotLoaded();
+        this.encodingManager = em;
+        if (em.needsTurnCostsSupport())
+            traversalMode = TraversalMode.EDGE_BASED_2DIR;
+
+        return this;
+    }
+
+    FlagEncoder getDefaultVehicle() {
+        if (encodingManager == null) {
+            throw new IllegalStateException("No encoding manager specified or loaded");
+        }
+
+        return encodingManager.fetchEdgeEncoders().get(0);
+    }
+
+    public EncodingManager getEncodingManager() {
+        return encodingManager;
+    }
+
+    public GraphHopper setElevationProvider(ElevationProvider eleProvider) {
+        if (eleProvider == null || eleProvider == ElevationProvider.NOOP)
+            setElevation(false);
+        else
+            setElevation(true);
+        this.eleProvider = eleProvider;
+        return this;
+    }
+
+    /**
+     * Threads for data reading.
+     */
+    protected int getWorkerThreads() {
+        return workerThreads;
+    }
+
+    /**
+     * Return maximum distance (in meter) to reduce points via douglas peucker
+     * while OSM import.
+     */
+    protected double getWayPointMaxDistance() {
+        return osmReaderWayPointMaxDistance;
+    }
+
+    /**
+     * This parameter specifies how to reduce points via douglas peucker while
+     * OSM import. Higher value means more details, unit is meter. Default is 1.
+     * Disable via 0.
+     */
+    public GraphHopper setWayPointMaxDistance(double wayPointMaxDistance) {
+        this.osmReaderWayPointMaxDistance = wayPointMaxDistance;
+        return this;
+    }
+
+    /**
+     * Sets the default traversal mode used for the algorithms and preparation.
+     */
+    public GraphHopper setTraversalMode(TraversalMode traversalMode) {
+        this.traversalMode = traversalMode;
+        return this;
+    }
+
+    public TraversalMode getTraversalMode() {
+        return traversalMode;
+    }
+
+    /**
+     * Configures the underlying storage and response to be used on a well
+     * equipped server. Result also optimized for usage in the web module i.e.
+     * try reduce network IO.
+     */
+    public GraphHopper forServer() {
+        setSimplifyResponse(true);
+        return setInMemory();
+    }
+
+    /**
+     * Configures the underlying storage to be used on a Desktop computer or
+     * within another Java application with enough RAM but no network latency.
+     */
+    public GraphHopper forDesktop() {
+        setSimplifyResponse(false);
+        return setInMemory();
+    }
+
+    /**
+     * Configures the underlying storage to be used on a less powerful machine
+     * like Android or Raspberry Pi with only few MB of RAM.
+     */
+    public GraphHopper forMobile() {
+        setSimplifyResponse(false);
+        return setMemoryMapped();
+    }
+
+    /**
+     * Precise location resolution index means also more space (disc/RAM) could
+     * be consumed and probably slower query times, which would be e.g. not
+     * suitable for Android. The resolution specifies the tile width (in meter).
+     */
+    public GraphHopper setPreciseIndexResolution(int precision) {
+        ensureNotLoaded();
+        preciseIndexResolution = precision;
+        return this;
+    }
+
+    public void setMinNetworkSize(int minNetworkSize, int minOneWayNetworkSize) {
+        this.minNetworkSize = minNetworkSize;
+        this.minOneWayNetworkSize = minOneWayNetworkSize;
+    }
+
+    /**
+     * This method call results in an in-memory graph.
+     */
+    public GraphHopper setInMemory() {
+        ensureNotLoaded();
+        dataAccessType = DAType.RAM_STORE;
+        return this;
+    }
+
+    /**
+     * Only valid option for in-memory graph and if you e.g. want to disable
+     * store on flush for unit tests. Specify storeOnFlush to true if you want
+     * that existing data will be loaded FROM disc and all in-memory data will
+     * be flushed TO disc after flush is called e.g. while OSM import.
+     * <p>
+     * 
+     * @param storeOnFlush
+     *            true by default
+     */
+    public GraphHopper setStoreOnFlush(boolean storeOnFlush) {
+        ensureNotLoaded();
+        if (storeOnFlush)
+            dataAccessType = DAType.RAM_STORE;
+        else
+            dataAccessType = DAType.RAM;
+        return this;
+    }
+
+    /**
+     * Enable memory mapped configuration if not enough memory is available on
+     * the target platform.
+     */
+    public GraphHopper setMemoryMapped() {
+        ensureNotLoaded();
+        dataAccessType = DAType.MMAP;
+        return this;
+    }
+
+    /**
+     * Not yet stable enough to offer it for everyone
+     */
+    private GraphHopper setUnsafeMemory() {
+        ensureNotLoaded();
+        dataAccessType = DAType.UNSAFE_STORE;
+        return this;
+    }
+
+    /**
+     * Enables the use of contraction hierarchies to reduce query times. Enabled
+     * by default.
+     * <p/>
+     * 
+     * @param weighting
+     *            can be "fastest", "shortest" or your own weight-calculation
+     *            type.
+     * @see #setCHEnable(boolean)
+     */
+    public GraphHopper setCHWeighting(String weighting) {
+        ensureNotLoaded();
+        chWeightingStr = weighting;
+        return this;
+    }
+
+    public String getCHWeighting() {
+        return chWeightingStr;
+    }
+
+    /**
+     * Disables the "CH-preparation" preparation only. Use only if you know what
+     * you do. To disable the full usage of CH use setCHEnable(false) instead.
+     */
+    public GraphHopper setDoPrepare(boolean doPrepare) {
+        this.doPrepare = doPrepare;
+        return this;
+    }
+
+    /**
+     * Enables or disables contraction hierarchies (CH). This speed-up mode is
+     * enabled by default. Disabling CH is only recommended for short routes or
+     * in combination with setDefaultWeightLimit and called flexibility mode
+     * <p>
+     * 
+     * @see #setDefaultWeightLimit(double)
+     */
+    public GraphHopper setCHEnable(boolean enable) {
+        ensureNotLoaded();
+        algoFactory = null;
+        chEnabled = enable;
+        return this;
+    }
+
+    /**
+     * This methods stops the algorithm from searching further if the resulting
+     * path would go over specified weight, important if CH is disabled. The
+     * unit is defined by the used weighting created from createWeighting, e.g.
+     * distance for shortest or seconds for the standard FastestWeighting
+     * implementation.
+     */
+    public void setDefaultWeightLimit(double defaultWeightLimit) {
+        this.defaultWeightLimit = defaultWeightLimit;
+    }
+
+    public boolean isCHEnabled() {
+        return chEnabled;
+    }
+
+    /**
+     * @return true if storing and fetching elevation data is enabled. Default
+     *         is false
+     */
+    public boolean hasElevation() {
+        return elevation;
+    }
+
+    /**
+     * Enable storing and fetching elevation data. Default is false
+     */
+    public GraphHopper setElevation(boolean includeElevation) {
+        this.elevation = includeElevation;
+        return this;
+    }
+
+    /**
+     * This method specifies if the import should include way names to be able
+     * to return instructions for a route.
+     */
+    public GraphHopper setEnableInstructions(boolean b) {
+        ensureNotLoaded();
+        enableInstructions = b;
+        return this;
+    }
+
+    /**
+     * This methods enables gps point calculation. If disabled only distance
+     * will be calculated.
+     */
+    public GraphHopper setEnableCalcPoints(boolean b) {
+        calcPoints = b;
+        return this;
+    }
+
+    /**
+     * This method specifies if the returned path should be simplified or not,
+     * via douglas-peucker or similar algorithm.
+     */
+    private GraphHopper setSimplifyResponse(boolean doSimplify) {
+        this.simplifyResponse = doSimplify;
+        return this;
+    }
+
+    /**
+     * Sets the graphhopper folder.
+     */
+    public GraphHopper setGraphHopperLocation(String ghLocation) {
+        ensureNotLoaded();
+        if (ghLocation == null)
+            throw new IllegalArgumentException("graphhopper location cannot be null");
+
+        this.ghLocation = ghLocation;
+        return this;
+    }
+
+    public String getGraphHopperLocation() {
+        return ghLocation;
+    }
+
+    /**
+     * This file can be an osm xml (.osm), a compressed xml (.osm.zip or
+     * .osm.gz) or a protobuf file (.pbf).
+     */
+    public GraphHopper setOSMFile(String osmFileStr) {
+        ensureNotLoaded();
+        if (Helper.isEmpty(osmFileStr))
+            throw new IllegalArgumentException("OSM file cannot be empty.");
+
+        osmFile = osmFileStr;
+        return this;
+    }
+
+    public String getOSMFile() {
+        return osmFile;
+    }
+
+    /**
+     * The underlying graph used in algorithms.
+     * <p>
+     * 
+     * @throws IllegalStateException
+     *             if graph is not instantiated.
+     */
+    public GraphStorage getGraph() {
+        if (graph == null)
+            throw new IllegalStateException("Graph not initialized");
+
+        return graph;
+    }
+
+    public void setGraph(GraphStorage graph) {
+        this.graph = graph;
+    }
+
+    protected void setLocationIndex(LocationIndex locationIndex) {
+        this.locationIndex = locationIndex;
+    }
+
+    /**
+     * The location index created from the graph.
+     * <p>
+     * 
+     * @throws IllegalStateException
+     *             if index is not initialized
+     */
+    public LocationIndex getLocationIndex() {
+        if (locationIndex == null)
+            throw new IllegalStateException("Location index not initialized");
+
+        return locationIndex;
+    }
+
+    /**
+     * Sorts the graph which requires more RAM while import. See #12
+     */
+    public GraphHopper setSortGraph(boolean sortGraph) {
+        ensureNotLoaded();
+        this.sortGraph = sortGraph;
+        return this;
+    }
+
+    /**
+     * Specifies if it is allowed for GraphHopper to write. E.g. for read only
+     * filesystems it is not possible to create a lock file and so we can avoid
+     * write locks.
+     */
+    public GraphHopper setAllowWrites(boolean allowWrites) {
+        this.allowWrites = allowWrites;
+        return this;
+    }
+
+    public boolean isAllowWrites() {
+        return allowWrites;
+    }
+
+    public TranslationMap getTranslationMap() {
+        return trMap;
+    }
+
+    /**
+     * Reads configuration from a CmdArgs object. Which can be manually filled,
+     * or via main(String[] args) ala CmdArgs.read(args) or via configuration
+     * file ala CmdArgs.readFromConfig("config.properties",
+     * "graphhopper.config")
+     */
+    public GraphHopper init(CmdArgs args) {
+        args = CmdArgs.readFromConfigAndMerge(args, "config", "graphhopper.config");
+        this.args = args;
+        String tmpOsmFile = args.get("osmreader.osm", "");
+        if (!Helper.isEmpty(tmpOsmFile))
+            osmFile = tmpOsmFile;
+
+        dataReader = args.get("reader.implementation", dataReader);
+
+        String graphHopperFolder = args.get("graph.location", "");
+        if (Helper.isEmpty(graphHopperFolder) && Helper.isEmpty(ghLocation)) {
+            if (Helper.isEmpty(osmFile))
+                throw new IllegalArgumentException("You need to specify an OSM file.");
+
+            graphHopperFolder = Helper.pruneFileEnd(osmFile) + "-gh";
+        }
+
+        // graph
+        setGraphHopperLocation(graphHopperFolder);
+        defaultSegmentSize = args.getInt("graph.dataaccess.segmentSize", defaultSegmentSize);
+
+        String graphDATypeStr = args.get("graph.dataaccess", "RAM_STORE");
+        dataAccessType = DAType.fromString(graphDATypeStr);
+
+        sortGraph = args.getBool("graph.doSort", sortGraph);
+        removeZipped = args.getBool("graph.removeZipped", removeZipped);
+        int bytesForFlags = args.getInt("graph.bytesForFlags", 8);
+        if (args.get("graph.locktype", "native").equals("simple"))
+            lockFactory = new SimpleFSLockFactory();
+        else
+            lockFactory = new NativeFSLockFactory();
+
+        // elevation
+        String eleProviderStr = args.get("graph.elevation.provider", "noop").toLowerCase();
+        boolean eleCalcMean = args.getBool("graph.elevation.calcmean", false);
+        String cacheDirStr = args.get("graph.elevation.cachedir", "");
+        String baseURL = args.get("graph.elevation.baseurl", "");
+        DAType elevationDAType = DAType.fromString(args.get("graph.elevation.dataaccess", "MMAP"));
+        ElevationProvider tmpProvider = ElevationProvider.NOOP;
+        if (eleProviderStr.equalsIgnoreCase("srtm")) {
+            tmpProvider = new SRTMProvider();
+        } else if (eleProviderStr.equalsIgnoreCase("cgiar")) {
+            CGIARProvider cgiarProvider = new CGIARProvider();
+            cgiarProvider.setAutoRemoveTemporaryFiles(args.getBool("graph.elevation.cgiar.clear", true));
+            tmpProvider = cgiarProvider;
+        }
+
+        tmpProvider.setCalcMean(eleCalcMean);
+        tmpProvider.setCacheDir(new File(cacheDirStr));
+        if (!baseURL.isEmpty())
+            tmpProvider.setBaseURL(baseURL);
+        tmpProvider.setDAType(elevationDAType);
+        setElevationProvider(tmpProvider);
+
+        // optimizable prepare
+        minNetworkSize = args.getInt("prepare.minNetworkSize", minNetworkSize);
+        minOneWayNetworkSize = args.getInt("prepare.minOneWayNetworkSize", minOneWayNetworkSize);
+
+        // prepare CH
+        doPrepare = args.getBool("prepare.doPrepare", doPrepare);
+        String tmpCHWeighting = args.get("prepare.chWeighting", "fastest");
+        chEnabled = "fastest".equals(tmpCHWeighting) || "shortest".equals(tmpCHWeighting);
+        if (chEnabled)
+            setCHWeighting(tmpCHWeighting);
+
+        periodicUpdates = args.getInt("prepare.updates.periodic", periodicUpdates);
+        lazyUpdates = args.getInt("prepare.updates.lazy", lazyUpdates);
+        neighborUpdates = args.getInt("prepare.updates.neighbor", neighborUpdates);
+        logMessages = args.getDouble("prepare.logmessages", logMessages);
+
+        // osm import
+        osmReaderWayPointMaxDistance = args.getDouble("osmreader.wayPointMaxDistance", osmReaderWayPointMaxDistance);
+        String flagEncoders = args.get("graph.flagEncoders", "");
+        if (!flagEncoders.isEmpty())
+            setEncodingManager(new EncodingManager(flagEncoders, bytesForFlags));
+
+        workerThreads = args.getInt("osmreader.workerThreads", workerThreads);
+        enableInstructions = args.getBool("osmreader.instructions", enableInstructions);
+
+        // index
+        preciseIndexResolution = args.getInt("index.highResolution", preciseIndexResolution);
+        maxRegionSearch = args.getInt("index.maxRegionSearch", maxRegionSearch);
+
+        // routing
+        defaultWeightLimit = args.getDouble("routing.defaultWeightLimit", defaultWeightLimit);
+        return this;
+    }
+
+    private void printInfo() {
+        logger.info("version " + Constants.VERSION + "|" + Constants.BUILD_DATE + " (" + Constants.getVersions() + ")");
+        if (graph != null)
+            logger.info("graph " + graph.toString() + ", details:" + graph.toDetailsString());
+    }
+
+    /**
+     * Imports provided data from disc and creates graph. Depending on the
+     * settings the resulting graph will be stored to disc so on a second call
+     * this method will only load the graph from disc which is usually a lot
+     * faster.
+     */
+    public GraphHopper importOrLoad() {
+        if (!load(ghLocation)) {
+            printInfo();
+            process(ghLocation);
+        } else {
+            printInfo();
+        }
+        return this;
+    }
+
+    /**
+     * Creates the graph from OSM data.
+     */
+    private GraphHopper process(String graphHopperLocation) {
+        setGraphHopperLocation(graphHopperLocation);
+        Lock lock = null;
+        try {
+            if (graph.getDirectory().getDefaultType().isStoring()) {
+                lockFactory.setLockDir(new File(graphHopperLocation));
+                lock = lockFactory.create(fileLockName, true);
+                if (!lock.tryLock())
+                    throw new RuntimeException(
+                            "To avoid multiple writers we need to obtain a write lock but it failed. In "
+                                    + graphHopperLocation, lock.getObtainFailedReason());
+            }
+
+            try {
+                importData();
+                graph.getProperties().put("osmreader.import.date", formatDateTime(new Date()));
+            } catch (IOException ex) {
+                throw new RuntimeException("Cannot parse OSM file " + getOSMFile(), ex);
+            }
+            cleanUp();
+            optimize();
+            postProcessing();
+            flush();
+        } finally {
+            if (lock != null)
+                lock.release();
+        }
+        return this;
+    }
+
+    protected DataReader importData() throws IOException {
+        ensureWriteAccess();
+        if (graph == null)
+            throw new IllegalStateException("Load graph before importing OSM data");
+
+        if (osmFile == null)
+            throw new IllegalStateException("Couldn't load from existing folder: " + ghLocation
+                    + " but also cannot import from OSM file as it wasn't specified!");
+
+        encodingManager.setEnableInstructions(enableInstructions);
+        DataReader reader = createReader(graph);
+        logger.info("using " + graph.toString() + ", memory:" + Helper.getMemInfo());
+        reader.readGraph();
+        return reader;
+    }
+
+    protected DataReader createReader(GraphStorage tmpGraph) {
+        DataReader reader;
+        if ("OSM".equals(dataReader))
+            reader = new OSMReader(tmpGraph);
+        else if ("OSITN".equals(dataReader))
+            reader = new OsItnReader(tmpGraph, args);
+        else if ("OSDPN".equals(dataReader))
+            reader = new OsDpnReader(tmpGraph, args);
+        else if ("OSHN".equals(dataReader))
+            reader = new OsHnReader(tmpGraph);
+        else {
+            String exceptionMessage = String.format(READER_UNAVAILABLE, dataReader);
+            throw new IllegalArgumentException(exceptionMessage);
+        }
+        return initReader(reader);
+    }
+
+    protected DataReader initReader(DataReader reader) {
+        if (osmFile == null)
+            throw new IllegalArgumentException("No OSM file specified");
+
+        logger.info("start creating graph from " + osmFile);
+        File osmTmpFile = new File(osmFile);
+        return reader.setOSMFile(osmTmpFile).setElevationProvider(eleProvider).setWorkerThreads(workerThreads)
+                .setEncodingManager(encodingManager).setWayPointMaxDistance(osmReaderWayPointMaxDistance);
+    }
+
+    /**
+     * Opens existing graph.
+     * <p/>
+     * 
+     * @param graphHopperFolder
+     *            is the folder containing graphhopper files (which can be
+     *            compressed too)
+     */
+    @Override
+    public boolean load(String graphHopperFolder) {
+        if (Helper.isEmpty(graphHopperFolder))
+            throw new IllegalStateException("graphHopperLocation is not specified. call init before");
+
+        if (fullyLoaded)
+            throw new IllegalStateException("graph is already successfully loaded");
+
+        if (graphHopperFolder.endsWith("-gh")) {
+            // do nothing
+        } else if (graphHopperFolder.endsWith(".osm") || graphHopperFolder.endsWith(".xml")) {
+            throw new IllegalArgumentException("To import an osm file you need to use importOrLoad");
+        } else if (!graphHopperFolder.contains(".")) {
+            if (new File(graphHopperFolder + "-gh").exists())
+                graphHopperFolder += "-gh";
+        } else {
+            File compressed = new File(graphHopperFolder + ".ghz");
+            if (compressed.exists() && !compressed.isDirectory()) {
+                try {
+                    new Unzipper().unzip(compressed.getAbsolutePath(), graphHopperFolder, removeZipped);
+                } catch (IOException ex) {
+                    throw new RuntimeException("Couldn't extract file " + compressed.getAbsolutePath() + " to "
+                            + graphHopperFolder, ex);
+                }
+            }
+        }
+
+        setGraphHopperLocation(graphHopperFolder);
+
+        if (encodingManager == null)
+            setEncodingManager(EncodingManager.create(ghLocation));
+
+        if (!allowWrites && dataAccessType.isMMap())
+            dataAccessType = DAType.MMAP_RO;
+
+        GHDirectory dir = new GHDirectory(ghLocation, dataAccessType);
+        if (chEnabled)
+            graph = new LevelGraphStorage(dir, encodingManager, hasElevation());
+        else if (encodingManager.needsTurnCostsSupport())
+            graph = new GraphHopperStorage(dir, encodingManager, hasElevation(), new TurnCostExtension());
+        else
+            graph = new GraphHopperStorage(dir, encodingManager, hasElevation());
+
+        graph.setSegmentSize(defaultSegmentSize);
+
+        Lock lock = null;
+        try {
+            // create locks only if writes are allowed, if they are not allowed
+            // a lock cannot be created
+            // (e.g. on a read only filesystem locks would fail)
+            if (graph.getDirectory().getDefaultType().isStoring() && isAllowWrites()) {
+                lockFactory.setLockDir(new File(ghLocation));
+                lock = lockFactory.create(fileLockName, false);
+                if (!lock.tryLock())
+                    throw new RuntimeException(
+                            "To avoid reading partial data we need to obtain the read lock but it failed. In "
+                                    + ghLocation, lock.getObtainFailedReason());
+            }
+
+            if (!graph.loadExisting())
+                return false;
+
+            postProcessing();
+            fullyLoaded = true;
+            return true;
+        } finally {
+            if (lock != null)
+                lock.release();
+        }
+    }
+
+    public RoutingAlgorithmFactory getAlgorithmFactory() {
+        if (algoFactory == null)
+            this.algoFactory = new RoutingAlgorithmFactorySimple();
+
+        return algoFactory;
+    }
+
+    public void setAlgorithmFactory(RoutingAlgorithmFactory algoFactory) {
+        this.algoFactory = algoFactory;
+    }
+
+    /**
+     * Sets EncodingManager, does the preparation and creates the locationIndex
+     */
+    protected void postProcessing() {
+        initLocationIndex();
+        if (chEnabled)
+            algoFactory = createPrepare();
+        else
+            algoFactory = new RoutingAlgorithmFactorySimple();
+
+        if (!isPrepared())
+            prepare();
+    }
+
+    private boolean isPrepared() {
+        return "true".equals(graph.getProperties().get("prepare.done"));
+    }
+
+    protected RoutingAlgorithmFactory createPrepare() {
+        FlagEncoder defaultVehicle = getDefaultVehicle();
+        Weighting weighting = createWeighting(new WeightingMap(chWeightingStr), defaultVehicle);
+        PrepareContractionHierarchies tmpPrepareCH = new PrepareContractionHierarchies(new GHDirectory("",
+                DAType.RAM_INT), (LevelGraph) graph, defaultVehicle, weighting, traversalMode);
+        tmpPrepareCH.setPeriodicUpdates(periodicUpdates).setLazyUpdates(lazyUpdates)
+                .setNeighborUpdates(neighborUpdates).setLogMessages(logMessages);
+
+        return tmpPrepareCH;
+    }
+
+    /**
+     * Based on the weightingParameters and the specified vehicle a Weighting
+     * instance can be created. Note that all URL parameters are available in
+     * the weightingParameters as String if you use the GraphHopper Web module.
+     * <p>
+     * 
+     * @see WeightingMap
+     * @param weightingMap
+     *            all parameters influencing the weighting. E.g. parameters
+     *            coming via GHRequest.getHints or directly via "&api.xy=" from
+     *            the URL of the web UI
+     * @param encoder
+     *            the required vehicle
+     * @return the weighting to be used for route calculation
+     */
+    public Weighting createWeighting(WeightingMap weightingMap, FlagEncoder encoder) {
+        String weighting = weightingMap.getWeighting();
+        Weighting result;
+
+        if ("shortest".equalsIgnoreCase(weighting)) {
+            result = new ShortestWeighting();
+        } else if ("fastest".equalsIgnoreCase(weighting) || weighting.isEmpty()) {
+            if (encoder.supports(PriorityWeighting.class))
+                result = new PriorityWeighting(encoder);
+            else
+                result = new FastestWeighting(encoder);
+        } else if ("fastavoid".equalsIgnoreCase(weighting)) {
+            String avoidanceString = weightingMap.get("avoidances", "cliff");
+            String[] avoidances = avoidanceString.split(",");
+            if (encoder.supports(PriorityWeighting.class))
+                result = new PriorityWithAvoidancesWeighting(encoder, avoidances);
+            else
+                result = new FastestWithAvoidancesWeighting(encoder, avoidances);
+        } else if ("shortavoid".equalsIgnoreCase(weighting)) {
+            String avoidanceString = weightingMap.get("avoidances", "cliff");
+            String[] avoidances = avoidanceString.split(",");
+            result = new ShortestWithAvoidancesWeighting(encoder, avoidances);
+        } else {
+            throw new UnsupportedOperationException("weighting " + weighting + " not supported");
+        }
+        return result;
+    }
+
+    /**
+     * Potentially wraps the specified weighting into a TurnWeighting instance.
+     */
+    public Weighting createTurnWeighting(Weighting weighting, Graph graph, FlagEncoder encoder) {
+        if (encoder.supports(TurnWeighting.class))
+            return new TurnWeighting(weighting, encoder, (TurnCostExtension) graph.getExtension());
+        return weighting;
+    }
+
+    @Override
+    public GHResponse route(GHRequest request) {
+        GHResponse response = new GHResponse();
+        List<Path> paths = getPaths(request, response);
+        if (response.hasErrors())
+            return response;
+
+        boolean tmpEnableInstructions = request.getHints().getBool("instructions", enableInstructions);
+        boolean tmpCalcPoints = request.getHints().getBool("calcPoints", calcPoints);
+        double wayPointMaxDistance = request.getHints().getDouble("wayPointMaxDistance", 1d);
+        Locale locale = request.getLocale();
+        DouglasPeucker peucker = new DouglasPeucker().setMaxDistance(wayPointMaxDistance);
+
+        new PathMerger().setCalcPoints(tmpCalcPoints).setDouglasPeucker(peucker)
+                .setEnableInstructions(tmpEnableInstructions)
+                .setSimplifyResponse(simplifyResponse && wayPointMaxDistance > 0)
+                .doWork(response, paths, trMap.getWithFallBack(locale));
+        return response;
+    }
+
+    protected List<Path> getPaths(GHRequest request, GHResponse rsp) {
+        if (graph == null || !fullyLoaded)
+            throw new IllegalStateException("Call load or importOrLoad before routing");
+
+        if (graph.isClosed())
+            throw new IllegalStateException("You need to create a new GraphHopper instance as it is already closed");
+
+        String vehicle = request.getVehicle();
+        if (vehicle.isEmpty())
+            vehicle = getDefaultVehicle().toString();
+
+        if (!encodingManager.supports(vehicle)) {
+            rsp.addError(new IllegalArgumentException("Vehicle " + vehicle + " unsupported. " + "Supported are: "
+                    + getEncodingManager()));
+            return Collections.emptyList();
+        }
+
+        TraversalMode tMode;
+        String tModeStr = request.getHints().get("traversal_mode", traversalMode.toString());
+        try {
+            tMode = TraversalMode.fromString(tModeStr);
+        } catch (Exception ex) {
+            rsp.addError(ex);
+            return Collections.emptyList();
+        }
+
+        List<GHPoint> points = request.getPoints();
+        if (points.size() < 2) {
+            rsp.addError(new IllegalStateException("At least 2 points has to be specified, but was:" + points.size()));
+            return Collections.emptyList();
+        }
+
+        visitedSum.set(0);
+
+        FlagEncoder encoder = encodingManager.getEncoder(vehicle);
+        EdgeFilter edgeFilter = new DefaultEdgeFilter(encoder);
+
+        StopWatch sw = new StopWatch().start();
+        List<QueryResult> qResults = new ArrayList<QueryResult>(points.size());
+        for (int placeIndex = 0; placeIndex < points.size(); placeIndex++) {
+            GHPoint point = points.get(placeIndex);
+            QueryResult res = locationIndex.findClosest(point.lat, point.lon, edgeFilter);
+            if (!res.isValid())
+                rsp.addError(new IllegalArgumentException("Cannot find point " + placeIndex + ": " + point));
+
+            qResults.add(res);
+        }
+
+        if (rsp.hasErrors())
+            return Collections.emptyList();
+
+        String debug = "idLookup:" + sw.stop().getSeconds() + "s";
+
+        QueryGraph queryGraph;
+        RoutingAlgorithmFactory tmpAlgoFactory = getAlgorithmFactory();
+        if (chEnabled && !vehicle.equalsIgnoreCase(getDefaultVehicle().toString())) {
+            // fall back to normal traversing
+            tmpAlgoFactory = new RoutingAlgorithmFactorySimple();
+            queryGraph = new QueryGraph(graph.getBaseGraph());
+        } else {
+            queryGraph = new QueryGraph(graph);
+        }
+
+        queryGraph.lookup(qResults);
+
+        List<Path> paths = new ArrayList<Path>(points.size() - 1);
+        QueryResult fromQResult = qResults.get(0);
+        Weighting weighting = createWeighting(request.getHints(), encoder);
+        weighting = createTurnWeighting(weighting, queryGraph, encoder);
+
+        double weightLimit = request.getHints().getDouble("defaultWeightLimit", defaultWeightLimit);
+        String algoStr = request.getAlgorithm().isEmpty() ? AlgorithmOptions.DIJKSTRA_BI : request.getAlgorithm();
+        AlgorithmOptions algoOpts = AlgorithmOptions.start().algorithm(algoStr).traversalMode(tMode)
+                .flagEncoder(encoder).weighting(weighting).build();
+
+        for (int placeIndex = 1; placeIndex < points.size(); placeIndex++) {
+            QueryResult toQResult = qResults.get(placeIndex);
+            sw = new StopWatch().start();
+            RoutingAlgorithm algo = tmpAlgoFactory.createAlgo(queryGraph, algoOpts);
+            algo.setWeightLimit(weightLimit);
+            debug += ", algoInit:" + sw.stop().getSeconds() + "s";
+
+            sw = new StopWatch().start();
+            Path path = algo.calcPath(fromQResult.getClosestNode(), toQResult.getClosestNode());
+            if (path.getTime() < 0)
+                throw new RuntimeException("Time was negative. Please report as bug and include:" + request);
+
+            paths.add(path);
+            debug += ", " + algo.getName() + "-routing:" + sw.stop().getSeconds() + "s, " + path.getDebugInfo();
+
+            visitedSum.addAndGet(algo.getVisitedNodes());
+            fromQResult = toQResult;
+        }
+
+        if (rsp.hasErrors())
+            return Collections.emptyList();
+
+        if (points.size() - 1 != paths.size())
+            throw new RuntimeException("There should be exactly one more places than paths. places:" + points.size()
+                    + ", paths:" + paths.size());
+
+        rsp.setDebugInfo(debug);
+        return paths;
+    }
+
+    protected LocationIndex createLocationIndex(Directory dir) {
+        LocationIndexTree tmpIndex = new LocationIndexTree(graph.getBaseGraph(), dir);
+        tmpIndex.setResolution(preciseIndexResolution);
+        tmpIndex.setMaxRegionSearch(maxRegionSearch);
+        if (!tmpIndex.loadExisting()) {
+            ensureWriteAccess();
+            tmpIndex.prepareIndex();
+        }
+
+        return tmpIndex;
+    }
+
+    /**
+     * Initializes the location index after the import is done.
+     */
+    protected void initLocationIndex() {
+        if (locationIndex != null)
+            throw new IllegalStateException("Cannot initialize locationIndex twice!");
+
+        locationIndex = createLocationIndex(graph.getDirectory());
+    }
+
+    protected void optimize() {
+        logger.info("optimizing ... (" + Helper.getMemInfo() + ")");
+        graph.optimize();
+        logger.info("finished optimize (" + Helper.getMemInfo() + ")");
+
+        // Later: move this into the GraphStorage.optimize method
+        // Or: Doing it after preparation to optimize shortcuts too. But not
+        // possible yet #12
+        if (sortGraph) {
+            if (graph instanceof LevelGraph && isPrepared())
+                throw new IllegalArgumentException("Sorting prepared LevelGraph is not possible yet. See #12");
+
+            GraphStorage newGraph = GHUtility.newStorage(graph);
+            GHUtility.sortDFS(graph, newGraph);
+            logger.info("graph sorted (" + Helper.getMemInfo() + ")");
+            graph = newGraph;
+        }
+    }
+
+    protected void prepare() {
+        boolean tmpPrepare = doPrepare && algoFactory instanceof PrepareContractionHierarchies;
+        if (tmpPrepare) {
+            ensureWriteAccess();
+            logger.info("calling prepare.doWork for " + getDefaultVehicle() + " ... (" + Helper.getMemInfo() + ")");
+            ((PrepareContractionHierarchies) algoFactory).doWork();
+            graph.getProperties().put("prepare.date", formatDateTime(new Date()));
+        }
+        graph.getProperties().put("prepare.done", tmpPrepare);
+    }
+
+    protected void cleanUp() {
+        int prev = graph.getNodes();
+        PrepareRoutingSubnetworks preparation = new PrepareRoutingSubnetworks(graph, encodingManager);
+        preparation.setMinNetworkSize(minNetworkSize);
+        preparation.setMinOneWayNetworkSize(minOneWayNetworkSize);
+        logger.info("start finding subnetworks, " + Helper.getMemInfo());
+        preparation.doWork();
+        int n = graph.getNodes();
+        // calculate remaining subnetworks
+        int remainingSubnetworks = preparation.findSubnetworks().size();
+        logger.info("edges: " + graph.getAllEdges().getCount() + ", nodes " + n + ", there were "
+                + preparation.getSubNetworks() + " subnetworks. removed them => " + (prev - n)
+                + " less nodes. Remaining subnetworks:" + remainingSubnetworks);
+    }
+
+    protected void flush() {
+        logger.info("flushing graph " + graph.toString() + ", details:" + graph.toDetailsString() + ", "
+                + Helper.getMemInfo() + ")");
+        graph.flush();
+        fullyLoaded = true;
+    }
+
+    /**
+     * Releases all associated resources like memory or files. But it does not
+     * remove them. To remove the files created in graphhopperLocation you have
+     * to call clean().
+     */
+    public void close() {
+        if (graph != null)
+            graph.close();
+
+        if (locationIndex != null)
+            locationIndex.close();
+
+        try {
+            lockFactory.forceRemove(fileLockName, true);
+        } catch (Exception ex) {
+            // silently fail e.g. on Windows where we cannot remove an
+            // unreleased native lock
+        }
+    }
+
+    /**
+     * Removes the on-disc routing files. Call only after calling close or
+     * before importOrLoad or load
+     */
+    public void clean() {
+        if (getGraphHopperLocation().isEmpty())
+            throw new IllegalStateException("Cannot clean GraphHopper without specified graphHopperLocation");
+
+        File folder = new File(getGraphHopperLocation());
+        Helper.removeDir(folder);
+    }
+
+    // make sure this is identical to buildDate used in pom.xml
+    // <maven.build.timestamp.format>yyyy-MM-dd'T'HH:mm:ssZ</maven.build.timestamp.format>
+    private String formatDateTime(Date date) {
+        return new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ").format(date);
+    }
+
+    protected void ensureNotLoaded() {
+        if (fullyLoaded)
+            throw new IllegalStateException("No configuration changes are possible after loading the graph");
+    }
+
+    protected void ensureWriteAccess() {
+        if (!allowWrites)
+            throw new IllegalStateException("Writes are not allowed!");
+    }
+
+    /**
+     * Returns the current sum of the visited nodes while routing. Mainly for
+     * statistic and debugging purposes.
+     */
+    public long getVisitedSum() {
+        return visitedSum.get();
+    }
+
+    public GraphHopper setAsOSMReader() {
+        dataReader = "OSM";
+        return this;
+    }
+
+    public GraphHopper setAsItnReader() {
+        dataReader = "OSITN";
+        return this;
+    }
+
+    public GraphHopper setAsHnReader() {
+        dataReader = "OSHN";
+        return this;
+    }
+
+    public GraphHopper setAsDpnReader() {
+        dataReader = "OSDPN";
+        return this;
+    }
 }
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/AbstractOsDpnOsmAttibuteMappingVisitor.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/AbstractOsDpnOsmAttibuteMappingVisitor.java
index bcd1cfac01..399f557299 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/AbstractOsDpnOsmAttibuteMappingVisitor.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/AbstractOsDpnOsmAttibuteMappingVisitor.java
@@ -1,6 +1,7 @@
 package com.graphhopper.reader.osgb.dpn;
 
 import com.graphhopper.reader.Way;
+import com.graphhopper.routing.util.OsFlagUtils;
 
 /**
  * Created by sadam on 13/02/15.
@@ -9,11 +10,17 @@
     protected String visitorName = this.getClass().getSimpleName().toLowerCase();
 
     @Override
-    public void visitWayAttribute(String attributeValue, Way way) {
+    public boolean visitWayAttribute(String attributeValue, Way way) {
         if (visitorName.equals(attributeValue)) {
             applyAttributes(way);
+            return true;
         }
+        return false;
     }
 
     protected abstract void applyAttributes(Way way);
+
+    protected void setOrAppendTag(Way way, String key, String value) {
+        OsFlagUtils.setOrAppendTag(way, key, value);
+    }
 }
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/Boulders.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/Boulders.java
deleted file mode 100644
index 102fe82a65..0000000000
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/Boulders.java
+++ /dev/null
@@ -1,16 +0,0 @@
-package com.graphhopper.reader.osgb.dpn;
-
-import com.graphhopper.reader.Way;
-
-/**
- * Created by sadam on 13/02/15.
- */
-public class Boulders extends AbstractOsDpnOsmAttibuteMappingVisitor {
-
-    @Override
-    protected void applyAttributes(Way way)
-    {
-        way.setTag("natural", "boulders");
-    }
-
-}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/BridleWay.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/BridleWay.java
deleted file mode 100644
index ec3a5a91bb..0000000000
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/BridleWay.java
+++ /dev/null
@@ -1,18 +0,0 @@
-package com.graphhopper.reader.osgb.dpn;
-
-import com.graphhopper.reader.Way;
-
-/**
- * Created by sadam on 13/02/15.
- */
-public class BridleWay extends AbstractOsDpnOsmAttibuteMappingVisitor {
-
-    @Override
-    protected void applyAttributes(Way way)
-    {
-        way.setTag("designation", "public_bridleway");
-        way.setTag("highway", "bridleway");
-        way.setTag("foot", "yes");
-    }
-
-}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/Cliff.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/Cliff.java
deleted file mode 100644
index 6f47ac1983..0000000000
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/Cliff.java
+++ /dev/null
@@ -1,16 +0,0 @@
-package com.graphhopper.reader.osgb.dpn;
-
-import com.graphhopper.reader.Way;
-
-/**
- * Created by sadam on 13/02/15.
- */
-public class Cliff extends AbstractOsDpnOsmAttibuteMappingVisitor {
-
-    @Override
-    protected void applyAttributes(Way way)
-    {
-        way.setTag("natural", "cliff");
-    }
-
-}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/Foreshore.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/Foreshore.java
deleted file mode 100644
index fdd456ba95..0000000000
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/Foreshore.java
+++ /dev/null
@@ -1,16 +0,0 @@
-package com.graphhopper.reader.osgb.dpn;
-
-import com.graphhopper.reader.Way;
-
-/**
- * Created by sadam on 13/02/15.
- */
-public class Foreshore extends AbstractOsDpnOsmAttibuteMappingVisitor {
-
-    @Override
-    protected void applyAttributes(Way way)
-    {
-        way.setTag("water", "tidal");
-    }
-
-}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/InlandWater.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/InlandWater.java
deleted file mode 100644
index 4e99bff6bf..0000000000
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/InlandWater.java
+++ /dev/null
@@ -1,16 +0,0 @@
-package com.graphhopper.reader.osgb.dpn;
-
-import com.graphhopper.reader.Way;
-
-/**
- * Created by sadam on 13/02/15.
- */
-public class InlandWater extends AbstractOsDpnOsmAttibuteMappingVisitor {
-
-    @Override
-    protected void applyAttributes(Way way)
-    {
-        way.setTag("natural", "water");
-    }
-
-}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/Marsh.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/Marsh.java
deleted file mode 100644
index f7788ce1e0..0000000000
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/Marsh.java
+++ /dev/null
@@ -1,16 +0,0 @@
-package com.graphhopper.reader.osgb.dpn;
-
-import com.graphhopper.reader.Way;
-
-/**
- * Created by sadam on 13/02/15.
- */
-public class Marsh extends AbstractOsDpnOsmAttibuteMappingVisitor {
-
-    @Override
-    protected void applyAttributes(Way way)
-    {
-        way.setTag("wetland", "marsh");
-    }
-
-}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/Mud.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/Mud.java
deleted file mode 100644
index 8f5588d2b3..0000000000
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/Mud.java
+++ /dev/null
@@ -1,16 +0,0 @@
-package com.graphhopper.reader.osgb.dpn;
-
-import com.graphhopper.reader.Way;
-
-/**
- * Created by sadam on 13/02/15.
- */
-public class Mud extends AbstractOsDpnOsmAttibuteMappingVisitor {
-
-    @Override
-    protected void applyAttributes(Way way)
-    {
-        way.setTag("natural", "mud");
-    }
-
-}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/None.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/None.java
deleted file mode 100644
index 68a012f725..0000000000
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/None.java
+++ /dev/null
@@ -1,16 +0,0 @@
-package com.graphhopper.reader.osgb.dpn;
-
-import com.graphhopper.reader.Way;
-
-/**
- * Created by sadam on 16/02/15.
- */
-public class None extends AbstractOsDpnOsmAttibuteMappingVisitor {
-
-    @Override
-    protected void applyAttributes(Way way) {
-        way.setTag("foot", "no");
-        way.setTag("bicycle", "no");
-        way.setTag("horse", "no");
-    }
-}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnElement.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnElement.java
index 24b7b7fab8..7c0ec997b8 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnElement.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnElement.java
@@ -42,8 +42,7 @@
  * @author Nop
  * @author Peter
  */
-public abstract class OsDpnElement implements RoutingElement
-{
+public abstract class OsDpnElement implements RoutingElement {
     public static final int NODE = 0;
     public static final int WAY = 1;
     public static final int RELATION = 2;
@@ -54,28 +53,25 @@
 
     private boolean nameSet = false;
 
-    protected OsDpnElement(String id, int type)
-    {
-	this.id = id;
-	this.type = type;
+    protected OsDpnElement(String id, int type) {
+        this.id = id;
+        this.type = type;
     }
 
-    public String getId()
-    {
-	return id;
+    public String getId() {
+        return id;
     }
 
-    protected void readTags(XMLStreamReader parser) throws XMLStreamException,
-		    MismatchedDimensionException, FactoryException, TransformException
-    {
-	int event = parser.getEventType();
-	while (event != XMLStreamConstants.END_DOCUMENT
-			&& (event != XMLStreamConstants.END_ELEMENT || !exitElement(parser)))
-	    if (event == XMLStreamConstants.CHARACTERS)
-            event = parser.next();
-	    else if (event == XMLStreamConstants.START_ELEMENT)
-            // logger.info("LOCALNAME: {}", parser.getLocalName());
-            switch (parser.getLocalName()) {
+    protected void readTags(XMLStreamReader parser) throws XMLStreamException, MismatchedDimensionException,
+    FactoryException, TransformException {
+        int event = parser.getEventType();
+        while (event != XMLStreamConstants.END_DOCUMENT
+                && (event != XMLStreamConstants.END_ELEMENT || !exitElement(parser)))
+            if (event == XMLStreamConstants.CHARACTERS)
+                event = parser.next();
+            else if (event == XMLStreamConstants.START_ELEMENT)
+                // logger.info("LOCALNAME: {}", parser.getLocalName());
+                switch (parser.getLocalName()) {
                 case "pos":
                 case "coordinates": {
                     event = handleCoordinates(parser);
@@ -112,183 +108,160 @@ else if (event == XMLStreamConstants.START_ELEMENT)
                     break;
                 }
                 case "name":
-                case "alternativeName":
-                {
+                case "alternativeName": {
                     event = handleName(parser);
                     break;
                 }
-                case "physicalLevel":
-                {
+                case "physicalLevel": {
                     event = handlePhysicalLevel(parser);
                     break;
                 }
-                case "rightOfUse":
-                {
+                case "rightOfUse": {
                     event = handleRightOfUse(parser);
                     break;
                 }
-                case "potentialHazardCrossed":
-                {
+                case "potentialHazardCrossed": {
                     event = handlePotentialHazard(parser);
                     break;
                 }
 
-                case "withinAccessLand" :
-                {
-                    event = handleAccessLand(parser);
-                    break;
-                }
-
-                case "adoptedByNationalCycleRoute" :
-                case "adoptedByOtherCycleRoute" :
-                {
-                    event = handleCycleRoute(parser);
+                case "adoptedByNationalCycleRoute":
+                case "adoptedByOtherCycleRoute":
+                case "adoptedByRecreationalRoute":
+                case "withinAccessLand": {
+                    event = handleAdditionalRights(parser);
                     break;
                 }
                 default: {
                     event = parser.next();
                 }
-            }
-	    else
-            // logger.trace("EVENT:" + event);
-            event = parser.next();
+                }
+            else
+                // logger.trace("EVENT:" + event);
+                event = parser.next();
     }
 
-    protected int handleCycleRoute(XMLStreamReader parser) throws XMLStreamException
-    {
+    protected int handleAdditionalRights(XMLStreamReader parser) throws XMLStreamException {
         return parser.next();
     }
 
-    protected int handleAccessLand(XMLStreamReader parser) throws XMLStreamException
-    {
+    //
+    // protected int handleAccessLand(XMLStreamReader parser) throws
+    // XMLStreamException
+    // {
+    // return parser.next();
+    // }
+
+    protected int handleSurfaceType(XMLStreamReader parser) throws XMLStreamException {
         return parser.next();
     }
 
-    protected int handleSurfaceType(XMLStreamReader parser) throws XMLStreamException
-    {
+    protected int handlePhysicalLevel(XMLStreamReader parser) throws XMLStreamException {
         return parser.next();
     }
 
-    protected int handlePhysicalLevel(XMLStreamReader parser) throws XMLStreamException
-    {
+    protected int handleRightOfUse(XMLStreamReader parser) throws XMLStreamException {
         return parser.next();
     }
 
-    protected int handleRightOfUse(XMLStreamReader parser) throws XMLStreamException
-    {
+    protected int handlePotentialHazard(XMLStreamReader parser) throws XMLStreamException {
         return parser.next();
     }
 
-    protected int handlePotentialHazard(XMLStreamReader parser) throws XMLStreamException
-    {
+    private int handleName(XMLStreamReader parser) throws XMLStreamException {
+        StringBuilder nameString = new StringBuilder();
+        if (nameSet) {
+            nameString.append(getTag("name"));
+            nameString.append(" (");
+        }
+        nameString.append(parser.getElementText());
+        if (nameSet)
+            nameString.append(")");
+        nameSet = true;
+        setTag("name", nameString.toString());
+        return parser.getEventType();
+    }
+
+    private int handleDescriptiveTerm(XMLStreamReader parser) throws XMLStreamException {
+        String roadType = parser.getElementText();
+        setTag("type", "route");
+        setTag("highway", getOsmMappedTypeName(roadType));
+        setTag("name", getTypeBasedName(roadType));
+        return parser.getEventType();
+    }
+
+    private String getTypeBasedName(String roadType) {
+        if (roadType.equals("No Physical Manifestation"))
+            return "Route";
+        return roadType;
+    }
+
+    private String getOsmMappedTypeName(String roadType) {
+        String typeName = roadType;
+        switch (roadType) {
+        case "A Road":
+            typeName = "primary";
+            break;
+        case "B Road":
+            typeName = "secondary";
+            break;
+        case "Alley":
+            typeName = "service";
+            setTag("service", "alley");
+            break;
+        case "Private Road":
+            typeName = "private";
+            break;
+        case "Path":
+            typeName = "path";
+            break;
+        default:
+            break;
+        }
+        return typeName;
+    }
+
+    private int handleDirectedLink(XMLStreamReader parser) throws XMLStreamException {
+        String orientation = parser.getAttributeValue(null, "orientation");
+        String nodeId = parser.getAttributeValue("http://www.w3.org/1999/xlink", "href");
+        addDirectedLink(nodeId, orientation);
         return parser.next();
     }
 
-    private int handleName(XMLStreamReader parser) throws XMLStreamException
-    {
-	StringBuilder nameString = new StringBuilder();
-	if (nameSet)
-	{
-	    nameString.append(getTag("name"));
-	    nameString.append(" (");
-	}
-	nameString.append(parser.getElementText());
-	if (nameSet)
-	    nameString.append(")");
-	nameSet = true;
-	setTag("name", nameString.toString());
-	return parser.getEventType();
-    }
-
-    private int handleDescriptiveTerm(XMLStreamReader parser) throws XMLStreamException
-    {
-	String roadType = parser.getElementText();
-	setTag("type", "route");
-	setTag("highway", getOsmMappedTypeName(roadType));
-	setTag("name", getTypeBasedName(roadType));
-	return parser.getEventType();
-    }
-
-    private String getTypeBasedName(String roadType)
-    {
-	if (roadType.equals("No Physical Manifestation"))
-	    return "Route";
-	return roadType;
-    }
-
-    private String getOsmMappedTypeName(String roadType)
-    {
-    	String typeName = roadType;
-    	switch (roadType) {
-		case "A Road":
-			typeName = "primary";
-			break;
-		case "B Road":
-			typeName = "secondary";
-			break;
-		case "Alley":
-			typeName="service";
-			setTag("service", "alley");
-			break;
-		case "Private Road":
-			typeName="private";
-			break;
-		case "Path":
-			typeName="path";
-			break;
-		default:
-			break;
-		}
-    	return typeName;
-    }
-
-    private int handleDirectedLink(XMLStreamReader parser) throws XMLStreamException
-    {
-	String orientation = parser.getAttributeValue(null, "orientation");
-	String nodeId = parser.getAttributeValue("http://www.w3.org/1999/xlink", "href");
-	addDirectedLink(nodeId, orientation);
-	return parser.next();
-    }
-
-    private int handleNode(XMLStreamReader parser) throws XMLStreamException
-    {
-	String nodeId = parser.getAttributeValue("http://www.w3.org/1999/xlink", "href");
-	addNode(nodeId);
-	return parser.next();
-    }
-
-    private int handleTag(String key, XMLStreamReader parser) throws XMLStreamException
-    {
-	properties.put(key, parser.getElementText());
-	return parser.getEventType();
-    }
-
-    private int handleNetworkMember(XMLStreamReader parser) throws XMLStreamException
-    {
-	String elementText = parser.getAttributeValue("http://www.w3.org/1999/xlink", "href");
-	parseNetworkMember(elementText);
-	return parser.next();
-    }
-
-    private int handleCoordinates(XMLStreamReader parser) throws XMLStreamException,
-		    MismatchedDimensionException, FactoryException, TransformException
-    {
-	String elementText = parser.getElementText();
-	parseCoords(elementText);
-	return parser.getEventType();
-    }
-
-    private int handleMultiDimensionCoords(XMLStreamReader parser) throws XMLStreamException
-    {
-	String dimensionality = parser.getAttributeValue(null, "srsDimension");
-	logger.info("Dimensions:" + dimensionality);
-	String elementText = parser.getElementText();
-	parseCoords(Integer.valueOf(dimensionality), elementText);
-	return parser.getEventType();
-    }
-
-    protected abstract void parseCoords(String coordinates) throws MismatchedDimensionException,
-		    FactoryException, TransformException;
+    private int handleNode(XMLStreamReader parser) throws XMLStreamException {
+        String nodeId = parser.getAttributeValue("http://www.w3.org/1999/xlink", "href");
+        addNode(nodeId);
+        return parser.next();
+    }
+
+    private int handleTag(String key, XMLStreamReader parser) throws XMLStreamException {
+        properties.put(key, parser.getElementText());
+        return parser.getEventType();
+    }
+
+    private int handleNetworkMember(XMLStreamReader parser) throws XMLStreamException {
+        String elementText = parser.getAttributeValue("http://www.w3.org/1999/xlink", "href");
+        parseNetworkMember(elementText);
+        return parser.next();
+    }
+
+    private int handleCoordinates(XMLStreamReader parser) throws XMLStreamException, MismatchedDimensionException,
+    FactoryException, TransformException {
+        String elementText = parser.getElementText();
+        parseCoords(elementText);
+        return parser.getEventType();
+    }
+
+    private int handleMultiDimensionCoords(XMLStreamReader parser) throws XMLStreamException {
+        String dimensionality = parser.getAttributeValue(null, "srsDimension");
+        logger.info("Dimensions:" + dimensionality);
+        String elementText = parser.getElementText();
+        parseCoords(Integer.valueOf(dimensionality), elementText);
+        return parser.getEventType();
+    }
+
+    protected abstract void parseCoords(String coordinates) throws MismatchedDimensionException, FactoryException,
+    TransformException;
 
     protected abstract void parseCoords(int dimensions, String lineDefinition);
 
@@ -298,147 +271,129 @@ protected abstract void parseCoords(String coordinates) throws MismatchedDimensi
 
     protected abstract void parseNetworkMember(String elementText);
 
-    private boolean exitElement(XMLStreamReader parser)
-    {
-	switch (parser.getLocalName())
-	{
-	case "RouteNode":
-	case "RouteLink":
-	case "Route":
-	    return true;
-	}
-	return false;
+    private boolean exitElement(XMLStreamReader parser) {
+        switch (parser.getLocalName()) {
+        case "RouteNode":
+        case "RouteLink":
+        case "Route":
+            return true;
+        }
+        return false;
     }
 
-    protected String tagsToString()
-    {
-	if (properties.isEmpty())
-	    return "<empty>";
+    protected String tagsToString() {
+        if (properties.isEmpty())
+            return "<empty>";
 
-	StringBuilder tagTxt = new StringBuilder();
-	for (Map.Entry<String, Object> entry : properties.entrySet())
-	{
-	    tagTxt.append(entry.getKey());
-	    tagTxt.append("=");
-	    tagTxt.append(entry.getValue());
-	    tagTxt.append("\n");
-	}
-	return tagTxt.toString();
+        StringBuilder tagTxt = new StringBuilder();
+        for (Map.Entry<String, Object> entry : properties.entrySet()) {
+            tagTxt.append(entry.getKey());
+            tagTxt.append("=");
+            tagTxt.append(entry.getValue());
+            tagTxt.append("\n");
+        }
+        return tagTxt.toString();
     }
 
-    protected Map<String, Object> getTags()
-    {
-	return properties;
+    protected Map<String, Object> getTags() {
+        return properties;
     }
 
-    public void setTags(Map<String, String> newTags)
-    {
-	properties.clear();
-	if (newTags != null)
-	    for (Entry<String, String> e : newTags.entrySet())
-		setTag(e.getKey(), e.getValue());
+    public void setTags(Map<String, String> newTags) {
+        properties.clear();
+        if (newTags != null)
+            for (Entry<String, String> e : newTags.entrySet())
+                setTag(e.getKey(), e.getValue());
     }
 
     @Override
-    public boolean hasTags()
-    {
-	return !properties.isEmpty();
+    public boolean hasTags() {
+        return !properties.isEmpty();
     }
 
     @Override
-    public String getTag(String name)
-    {
+    public String getTag(String name) {
         Object object = properties.get(name);
         return (null != object) ? (String) object.toString() : null;
     }
 
     @Override
     @SuppressWarnings("unchecked")
-    public <T> T getTag(String key, T defaultValue)
-    {
-	T val = (T) properties.get(key);
-	if (val == null)
-	    return defaultValue;
-	return val;
+    public <T> T getTag(String key, T defaultValue) {
+        T val = (T) properties.get(key);
+        if (val == null)
+            return defaultValue;
+        return val;
     }
 
     @Override
-    public void setTag(String name, Object value)
-    {
-	properties.put(name, value);
+    public void setTag(String name, Object value) {
+        properties.put(name, value);
     }
 
     /**
      * Chaeck that the object has a given tag with a given value.
      */
     @Override
-    public boolean hasTag(String key, Object value)
-    {
-	return value.equals(properties.get(key));
+    public boolean hasTag(String key, Object value) {
+        return value.equals(properties.get(key));
     }
 
     /**
-     * Check that a given tag has one of the specified values. If no values are given, just checks
-     * for presence of the tag
+     * Check that a given tag has one of the specified values. If no values are
+     * given, just checks for presence of the tag
      */
     @Override
-    public boolean hasTag(String key, String... values)
-    {
-	Object osmValue = properties.get(key);
-	if (osmValue == null)
-	    return false;
+    public boolean hasTag(String key, String... values) {
+        Object osmValue = properties.get(key);
+        if (osmValue == null)
+            return false;
 
-	// tag present, no values given: success
-	if (values.length == 0)
-	    return true;
+        // tag present, no values given: success
+        if (values.length == 0)
+            return true;
 
-	for (String val : values)
-	    if (val.equals(osmValue))
-		return true;
-	return false;
+        for (String val : values)
+            if (val.equals(osmValue))
+                return true;
+        return false;
     }
 
     /**
      * Check that a given tag has one of the specified values.
      */
     @Override
-    public final boolean hasTag(String key, Set<String> values)
-    {
-	return values.contains(properties.get(key));
+    public final boolean hasTag(String key, Set<String> values) {
+        return values.contains(properties.get(key));
     }
 
     /**
-     * Check a number of tags in the given order for the any of the given values. Used to parse
-     * hierarchical access restrictions
+     * Check a number of tags in the given order for the any of the given
+     * values. Used to parse hierarchical access restrictions
      */
     @Override
-    public boolean hasTag(List<String> keyList, Set<String> values)
-    {
-	for (String key : keyList)
-	    if (values.contains(properties.get(key)))
-		return true;
-	return false;
+    public boolean hasTag(List<String> keyList, Set<String> values) {
+        for (String key : keyList)
+            if (values.contains(properties.get(key)))
+                return true;
+        return false;
     }
 
-    public void removeTag(String name)
-    {
-	properties.remove(name);
+    public void removeTag(String name) {
+        properties.remove(name);
     }
 
-    public void clearTags()
-    {
-	properties.clear();
+    public void clearTags() {
+        properties.clear();
     }
 
     @Override
-    public int getType()
-    {
-	return type;
+    public int getType() {
+        return type;
     }
 
     @Override
-    public boolean isType(int type)
-    {
-	return this.type == type;
+    public boolean isType(int type) {
+        return this.type == type;
     }
 }
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnOsmAttributeMappingVisitor.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnOsmAttributeMappingVisitor.java
index 70198548c6..66eed80667 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnOsmAttributeMappingVisitor.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnOsmAttributeMappingVisitor.java
@@ -6,5 +6,11 @@
  * Created by sadam on 13/02/15.
  */
 public interface OsDpnOsmAttributeMappingVisitor {
-    void visitWayAttribute(String attributeValue, Way way);
+    /**
+     *
+     * @param attributeValue
+     * @param way
+     * @return true if this visitor handled the attribute
+     */
+    boolean visitWayAttribute(String attributeValue, Way way);
 }
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnReader.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnReader.java
index 825f8738c1..7dfd9d4a00 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnReader.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnReader.java
@@ -35,6 +35,7 @@
 import com.graphhopper.reader.osgb.AbstractOsReader;
 import com.graphhopper.reader.osgb.itn.OSITNTurnRelation;
 import com.graphhopper.storage.GraphStorage;
+import com.graphhopper.util.CmdArgs;
 import com.graphhopper.util.DistanceCalc;
 import com.graphhopper.util.DistanceCalc3D;
 import com.graphhopper.util.DistanceCalcEarth;
@@ -95,8 +96,7 @@
     protected static final int PILLAR_NODE = 1;
     // tower node is <= -3
     protected static final int TOWER_NODE = -2;
-    private static final Logger logger = LoggerFactory
-            .getLogger(OsDpnReader.class);
+    private static final Logger logger = LoggerFactory.getLogger(OsDpnReader.class);
     private long locations;
     private long skippedLocations;
     protected long zeroCounter = 0;
@@ -131,9 +131,11 @@
     private static final String PROCESS_FORMAT = "PROCESS: {}";
     private static final String STORAGE_NODES_FORMAT = "storage nodes: {}";
 
-    public OsDpnReader(GraphStorage storage) {
+    public OsDpnReader(GraphStorage storage, CmdArgs commandLineArguments) {
         super(storage);
-
+        // Not as clean as I would like. Might use Guice.
+        OsDpnWay.THROW_EXCEPTION_ON_INVALID_HAZARD = commandLineArguments != null ? commandLineArguments.getBool(
+                "fail.on.invalid.potentialHazard", false) : false;
         osmNodeIdToInternalNodeMap = new TObjectIntHashMap<String>(200, .5f, -1);
         osmNodeIdToNodeFlagsMap = new TObjectLongHashMap<String>(200, .5f, 0);
         osmWayIdToRouteWeightMap = new TObjectLongHashMap<String>(200, .5f, 0);
@@ -141,7 +143,8 @@ public OsDpnReader(GraphStorage storage) {
     }
 
     public class ProcessVisitor {
-        public void process(ProcessData processData, OsDpnInputFile in) throws XMLStreamException, MismatchedDimensionException, FactoryException, TransformException {
+        public void process(ProcessData processData, OsDpnInputFile in) throws XMLStreamException,
+        MismatchedDimensionException, FactoryException, TransformException {
         }
     }
 
@@ -163,8 +166,7 @@ protected void preProcessSingleFile(File dpnFile) {
             long tmpRelationCounter = 1;
             RoutingElement item;
             while ((item = in.getNext()) != null) {
-                logger.trace("OsDpnReader.preProcess( " + item.getType()
-                        + " )");
+                logger.trace("OsDpnReader.preProcess( " + item.getType() + " )");
                 if (item.isType(OSMElement.WAY)) {
                     final OsDpnWay way = (OsDpnWay) item;
                     boolean valid = filterWay(way);
@@ -178,9 +180,7 @@ protected void preProcessSingleFile(File dpnFile) {
                         }
 
                         if (++tmpWayCounter % 500000 == 0) {
-                            logger.info(nf(tmpWayCounter)
-                                    + " (preprocess), osmIdMap:"
-                                    + nf(getNodeMap().size())
+                            logger.info(nf(tmpWayCounter) + " (preprocess), osmIdMap:" + nf(getNodeMap().size())
                                     + Helper.getMemInfo());
                         }
                     }
@@ -199,8 +199,7 @@ protected void preProcessSingleFile(File dpnFile) {
 
     private TLongObjectMap<String> getEdgeIdToOsmidMap() {
         if (edgeIdToOsmIdMap == null)
-            edgeIdToOsmIdMap = new TLongObjectHashMap<String>(
-                    getOsmIdStoreRequiredSet().size());
+            edgeIdToOsmIdMap = new TLongObjectHashMap<String>(getOsmIdStoreRequiredSet().size());
 
         return edgeIdToOsmIdMap;
     }
@@ -219,14 +218,15 @@ boolean filterWay(OsDpnWay way) {
             return false;
 
         // ignore multipolygon geometry
-        //if (!way.hasTags())
-        //    return false;
+        // if (!way.hasTags())
+        // return false;
 
         return encodingManager.acceptWay(way) > 0;
     }
 
     /**
      * Creates the edges and nodes files from the specified osm file.
+     *
      * @throws TransformException
      * @throws FactoryException
      * @throws IOException
@@ -234,14 +234,16 @@ boolean filterWay(OsDpnWay way) {
      * @throws MismatchedDimensionException
      */
     @Override
-    protected void writeOsm2Graph(File osmFile) throws MismatchedDimensionException, XMLStreamException, IOException, FactoryException, TransformException {
+    protected void writeOsm2Graph(File osmFile) throws MismatchedDimensionException, XMLStreamException, IOException,
+    FactoryException, TransformException {
         int tmp = Math.max(getNodeMap().size() / 50, 100);
         graphStorage.create(tmp);
         ProcessData processData = new ProcessData();
         try {
             ProcessVisitor processVisitor = new ProcessVisitor() {
                 @Override
-                public void process(ProcessData processData, OsDpnInputFile in) throws XMLStreamException, MismatchedDimensionException, FactoryException, TransformException {
+                public void process(ProcessData processData, OsDpnInputFile in) throws XMLStreamException,
+                MismatchedDimensionException, FactoryException, TransformException {
                     logger.info("PROCESS STAGE 1");
                     processStageOne(in);
                 }
@@ -250,7 +252,8 @@ public void process(ProcessData processData, OsDpnInputFile in) throws XMLStream
             writeOsm2GraphFromDirOrFile(osmFile, processData, processVisitor);
             processVisitor = new ProcessVisitor() {
                 @Override
-                public void process(ProcessData processData, OsDpnInputFile in) throws XMLStreamException, MismatchedDimensionException, FactoryException, TransformException {
+                public void process(ProcessData processData, OsDpnInputFile in) throws XMLStreamException,
+                MismatchedDimensionException, FactoryException, TransformException {
                     logger.info("PROCESS STAGE 2");
                     processStageTwo(processData, in);
                 }
@@ -259,7 +262,8 @@ public void process(ProcessData processData, OsDpnInputFile in) throws XMLStream
             writeOsm2GraphFromDirOrFile(osmFile, processData, processVisitor);
             processVisitor = new ProcessVisitor() {
                 @Override
-                public void process(ProcessData processData, OsDpnInputFile in) throws XMLStreamException, MismatchedDimensionException, FactoryException, TransformException {
+                public void process(ProcessData processData, OsDpnInputFile in) throws XMLStreamException,
+                MismatchedDimensionException, FactoryException, TransformException {
                     logger.info("PROCESS STAGE 3");
                     processStageThree(processData, in);
                 }
@@ -275,7 +279,8 @@ public void process(ProcessData processData, OsDpnInputFile in) throws XMLStream
 
     }
 
-    private void writeOsm2GraphFromDirOrFile(File osmFile, ProcessData processData, ProcessVisitor processVisitor) throws XMLStreamException, IOException, MismatchedDimensionException, FactoryException, TransformException {
+    private void writeOsm2GraphFromDirOrFile(File osmFile, ProcessData processData, ProcessVisitor processVisitor)
+            throws XMLStreamException, IOException, MismatchedDimensionException, FactoryException, TransformException {
         if (osmFile.isDirectory()) {
             String absolutePath = osmFile.getAbsolutePath();
             String[] list = osmFile.list();
@@ -288,7 +293,8 @@ private void writeOsm2GraphFromDirOrFile(File osmFile, ProcessData processData,
         }
     }
 
-    private void writeOsm2GraphFromSingleFile(File osmFile, ProcessData processData, ProcessVisitor processVisitor) throws XMLStreamException, IOException, MismatchedDimensionException, FactoryException, TransformException {
+    private void writeOsm2GraphFromSingleFile(File osmFile, ProcessData processData, ProcessVisitor processVisitor)
+            throws XMLStreamException, IOException, MismatchedDimensionException, FactoryException, TransformException {
         OsDpnInputFile in = null;
         try {
             logger.info(PROCESS_FORMAT, osmFile.getName());
@@ -301,8 +307,8 @@ private void writeOsm2GraphFromSingleFile(File osmFile, ProcessData processData,
         }
     }
 
-
-    private List<OsDpnNode> prepareWaysNodes(RoutingElement item, TObjectIntMap<String> nodeFilter) throws MismatchedDimensionException, FactoryException, TransformException {
+    private List<OsDpnNode> prepareWaysNodes(RoutingElement item, TObjectIntMap<String> nodeFilter)
+            throws MismatchedDimensionException, FactoryException, TransformException {
         List<OsDpnNode> evaluateWayNodes = ((OsDpnWay) item).evaluateWayNodes(null);
         for (OsDpnNode osdpnNode : evaluateWayNodes) {
             nodeFilter.put(osdpnNode.getId(), PILLAR_NODE);
@@ -340,18 +346,14 @@ void processWay(OsDpnWay way) {
             int last = getNodeMap().get(osmNodeIds.get(osmNodeIds.size() - 1));
             double firstLat = getTmpLatitude(first), firstLon = getTmpLongitude(first);
             double lastLat = getTmpLatitude(last), lastLon = getTmpLongitude(last);
-            if (!Double.isNaN(firstLat) && !Double.isNaN(firstLon)
-                    && !Double.isNaN(lastLat) && !Double.isNaN(lastLon)) {
-                double estimatedDist = distCalc.calcDist(firstLat, firstLon,
-                        lastLat, lastLon);
+            if (!Double.isNaN(firstLat) && !Double.isNaN(firstLon) && !Double.isNaN(lastLat) && !Double.isNaN(lastLon)) {
+                double estimatedDist = distCalc.calcDist(firstLat, firstLon, lastLat, lastLon);
                 way.setTag("estimated_distance", estimatedDist);
-                way.setTag("estimated_center", new GHPoint(
-                        (firstLat + lastLat) / 2, (firstLon + lastLon) / 2));
+                way.setTag("estimated_center", new GHPoint((firstLat + lastLat) / 2, (firstLon + lastLon) / 2));
             }
         }
 
-        long wayFlags = encodingManager.handleWayTags(way, includeWay,
-                relationFlags);
+        long wayFlags = encodingManager.handleWayTags(way, includeWay, relationFlags);
         if (wayFlags == 0)
             return;
 
@@ -379,19 +381,15 @@ void processWay(OsDpnWay way) {
 
                         // add way up to barrier shadow node
                         String transfer[] = { "" };
-                        transfer = osmNodeIds.subList(lastBarrier,
-                                i - lastBarrier + 1).toArray(transfer);
+                        transfer = osmNodeIds.subList(lastBarrier, i - lastBarrier + 1).toArray(transfer);
                         transfer[transfer.length - 1] = newNodeId;
-                        createdEdges.addAll(addOSMWay(transfer, wayFlags,
-                                wayOsmId));
+                        createdEdges.addAll(addOSMWay(transfer, wayFlags, wayOsmId));
 
                         // create zero length edge for barrier
-                        createdEdges.addAll(addBarrierEdge(newNodeId, nodeId,
-                                wayFlags, nodeFlags, wayOsmId));
+                        createdEdges.addAll(addBarrierEdge(newNodeId, nodeId, wayFlags, nodeFlags, wayOsmId));
                     } else {
                         // run edge from real first node to shadow node
-                        createdEdges.addAll(addBarrierEdge(nodeId, newNodeId,
-                                wayFlags, nodeFlags, wayOsmId));
+                        createdEdges.addAll(addBarrierEdge(nodeId, newNodeId, wayFlags, nodeFlags, wayOsmId));
 
                         // exchange first node for created barrier node
                         osmNodeIds.set(0, newNodeId);
@@ -406,8 +404,7 @@ void processWay(OsDpnWay way) {
         if (lastBarrier >= 0) {
             if (lastBarrier < size - 1) {
                 String transfer[] = { "" };
-                transfer = osmNodeIds.subList(lastBarrier, size - lastBarrier)
-                        .toArray(transfer);
+                transfer = osmNodeIds.subList(lastBarrier, size - lastBarrier).toArray(transfer);
                 createdEdges.addAll(addOSMWay(transfer, wayFlags, wayOsmId));
             }
         } else {
@@ -492,7 +489,7 @@ public int getInternalNodeIdOfOsmNode(String nodeOsmId) {
     }
 
     private void processNode(OsDpnNode node) {
-    	logger.trace("PROCESSING:" + node.getId());
+        logger.trace("PROCESSING:" + node.getId());
         if (isInBounds(node)) {
             addNode(node);
 
@@ -520,8 +517,7 @@ boolean addNode(OsDpnNode node) {
         if (nodeType == TOWER_NODE) {
             addTowerNode(node.getId(), lat, lon, ele);
         } else if (nodeType == PILLAR_NODE) {
-        	logger.trace("OsDpnReader.addPillarNode(" + nextPillarId
-        			+ ")");
+            logger.trace("OsDpnReader.addPillarNode(" + nextPillarId + ")");
             pillarInfo.setNode(nextPillarId, lat, lon, ele);
             getNodeMap().put(node.getId(), nextPillarId + 3);
             nextPillarId++;
@@ -530,8 +526,7 @@ boolean addNode(OsDpnNode node) {
     }
 
     private double getElevation(Node node) {
-        if(null==elevationProvider)
-        {
+        if (null == elevationProvider) {
             String eleString = node.getTag("ele");
             return Double.valueOf(eleString);
         }
@@ -574,8 +569,7 @@ void prepareHighwayNode(String idStr) {
     }
 
     int addTowerNode(String osmId, double lat, double lon, double ele) {
-    	logger.trace("OsDpnReader.addTowerNode(" + osmId
-    			+ ")");
+        logger.trace("OsDpnReader.addTowerNode(" + osmId + ")");
         if (nodeAccess.is3D())
             nodeAccess.setNode(nextTowerId, lat, lon, ele);
         else
@@ -591,10 +585,8 @@ int addTowerNode(String osmId, double lat, double lon, double ele) {
      * This method creates from an OSM way (via the osm ids) one or more edges
      * in the graph.
      */
-    Collection<EdgeIteratorState> addOSMWay(String[] osmNodeIds, long flags,
-            String wayOsmId) {
-        PointList pointList = new PointList(osmNodeIds.length,
-                nodeAccess.is3D());
+    Collection<EdgeIteratorState> addOSMWay(String[] osmNodeIds, long flags, String wayOsmId) {
+        PointList pointList = new PointList(osmNodeIds.length, nodeAccess.is3D());
         List<EdgeIteratorState> newEdges = new ArrayList<EdgeIteratorState>(5);
         int firstNode = -1;
         int lastIndex = osmNodeIds.length - 1;
@@ -618,16 +610,14 @@ int addTowerNode(String osmId, double lat, double lon, double ele) {
                     // current file.
                     // => if the node before was a pillar node then convert into
                     // to tower node (as it is also end-standing).
-                    if (!pointList.isEmpty()
-                            && lastInBoundsPillarNode > -TOWER_NODE) {
+                    if (!pointList.isEmpty() && lastInBoundsPillarNode > -TOWER_NODE) {
                         // transform the pillar node to a tower node
                         tmpNode = lastInBoundsPillarNode;
                         tmpNode = handlePillarNode(tmpNode, osmId, null, true);
                         tmpNode = -tmpNode - 3;
                         if (pointList.getSize() > 1 && firstNode >= 0) {
                             // TOWER node
-                            newEdges.add(addEdge(firstNode, tmpNode, pointList,
-                                    flags, wayOsmId));
+                            newEdges.add(addEdge(firstNode, tmpNode, pointList, flags, wayOsmId));
                             pointList.clear();
                             pointList.add(nodeAccess, tmpNode);
                         }
@@ -638,9 +628,7 @@ int addTowerNode(String osmId, double lat, double lon, double ele) {
                 }
 
                 if (tmpNode <= -TOWER_NODE && tmpNode >= TOWER_NODE)
-                    throw new AssertionError(
-                            "Mapped index not in correct bounds " + tmpNode
-                            + ", " + osmId);
+                    throw new AssertionError("Mapped index not in correct bounds " + tmpNode + ", " + osmId);
 
                 if (tmpNode > -TOWER_NODE) {
                     boolean convertToTowerNode = i == 0 || i == lastIndex;
@@ -649,8 +637,7 @@ int addTowerNode(String osmId, double lat, double lon, double ele) {
                     }
 
                     // PILLAR node, but convert to towerNode if end-standing
-                    tmpNode = handlePillarNode(tmpNode, osmId, pointList,
-                            convertToTowerNode);
+                    tmpNode = handlePillarNode(tmpNode, osmId, pointList, convertToTowerNode);
                 }
 
                 if (tmpNode < TOWER_NODE) {
@@ -658,8 +645,7 @@ int addTowerNode(String osmId, double lat, double lon, double ele) {
                     tmpNode = -tmpNode - 3;
                     pointList.add(nodeAccess, tmpNode);
                     if (firstNode >= 0) {
-                        newEdges.add(addEdge(firstNode, tmpNode, pointList,
-                                flags, wayOsmId));
+                        newEdges.add(addEdge(firstNode, tmpNode, pointList, flags, wayOsmId));
                         pointList.clear();
                         pointList.add(nodeAccess, tmpNode);
                     }
@@ -667,35 +653,28 @@ int addTowerNode(String osmId, double lat, double lon, double ele) {
                 }
             }
         } catch (RuntimeException ex) {
-            logger.error("Couldn't properly add edge with osm ids:"
-                    + osmNodeIds, ex);
+            logger.error("Couldn't properly add edge with osm ids:" + osmNodeIds, ex);
             if (exitOnlyPillarNodeException)
                 throw ex;
         }
         return newEdges;
     }
 
-    EdgeIteratorState addEdge(int fromIndex, int toIndex, PointList pointList,
-            long flags, String wayOsmId) {
+    EdgeIteratorState addEdge(int fromIndex, int toIndex, PointList pointList, long flags, String wayOsmId) {
         // sanity checks
         if (fromIndex < 0 || toIndex < 0)
-            throw new AssertionError(
-                    "to or from index is invalid for this edge " + fromIndex
-                    + "->" + toIndex + ", points:" + pointList);
+            throw new AssertionError("to or from index is invalid for this edge " + fromIndex + "->" + toIndex
+                    + ", points:" + pointList);
         if (pointList.getDimension() != nodeAccess.getDimension())
-            throw new AssertionError(
-                    "Dimension does not match for pointList vs. nodeAccess "
-                            + pointList.getDimension() + " <-> "
-                            + nodeAccess.getDimension());
+            throw new AssertionError("Dimension does not match for pointList vs. nodeAccess "
+                    + pointList.getDimension() + " <-> " + nodeAccess.getDimension());
 
         double towerNodeDistance = 0;
         double prevLat = pointList.getLatitude(0);
         double prevLon = pointList.getLongitude(0);
-        double prevEle = pointList.is3D() ? pointList.getElevation(0)
-                : Double.NaN;
+        double prevEle = pointList.is3D() ? pointList.getElevation(0) : Double.NaN;
         double lat, lon, ele = Double.NaN;
-        PointList pillarNodes = new PointList(pointList.getSize() - 2,
-                nodeAccess.is3D());
+        PointList pillarNodes = new PointList(pointList.getSize() - 2, nodeAccess.is3D());
         int nodes = pointList.getSize();
         for (int i = 1; i < nodes; i++) {
             // we could save some lines if we would use
@@ -704,12 +683,10 @@ EdgeIteratorState addEdge(int fromIndex, int toIndex, PointList pointList,
             lon = pointList.getLongitude(i);
             if (pointList.is3D()) {
                 ele = pointList.getElevation(i);
-                towerNodeDistance += distCalc3D.calcDist(prevLat, prevLon,
-                        prevEle, lat, lon, ele);
+                towerNodeDistance += distCalc3D.calcDist(prevLat, prevLon, prevEle, lat, lon, ele);
                 prevEle = ele;
             } else
-                towerNodeDistance += distCalc.calcDist(prevLat, prevLon, lat,
-                        lon);
+                towerNodeDistance += distCalc.calcDist(prevLat, prevLon, lat, lon);
             prevLat = lat;
             prevLon = lon;
             if (nodes > 2 && i < nodes - 1) {
@@ -727,8 +704,7 @@ EdgeIteratorState addEdge(int fromIndex, int toIndex, PointList pointList,
             towerNodeDistance = 0.0001;
         }
 
-        EdgeIteratorState iter = graphStorage.edge(fromIndex, toIndex)
-                .setDistance(towerNodeDistance).setFlags(flags);
+        EdgeIteratorState iter = graphStorage.edge(fromIndex, toIndex).setDistance(towerNodeDistance).setFlags(flags);
         if (nodes > 2) {
             if (doSimplify)
                 simplifyAlgo.simplify(pillarNodes);
@@ -748,23 +724,19 @@ private void storeOSMWayID(int edgeId, String osmWayID) {
     /**
      * @return converted tower node
      */
-    private int handlePillarNode(int tmpNode, String osmId,
-            PointList pointList, boolean convertToTowerNode) {
-        logger.info("Converting Pillar " + osmId, " to pillar? "
-                + convertToTowerNode);
+    private int handlePillarNode(int tmpNode, String osmId, PointList pointList, boolean convertToTowerNode) {
+        logger.info("Converting Pillar " + osmId, " to pillar? " + convertToTowerNode);
         tmpNode = tmpNode - 3;
         double lat = pillarInfo.getLatitude(tmpNode);
         double lon = pillarInfo.getLongitude(tmpNode);
         double ele = pillarInfo.getElevation(tmpNode);
         if (lat == Double.MAX_VALUE || lon == Double.MAX_VALUE)
-            throw new RuntimeException(
-                    "Conversion pillarNode to towerNode already happended!? "
-                            + "osmId:" + osmId + " pillarIndex:" + tmpNode);
+            throw new RuntimeException("Conversion pillarNode to towerNode already happended!? " + "osmId:" + osmId
+                    + " pillarIndex:" + tmpNode);
 
         if (convertToTowerNode) {
             // convert pillarNode type to towerNode, make pillar values invalid
-            pillarInfo.setNode(tmpNode, Double.MAX_VALUE, Double.MAX_VALUE,
-                    Double.MAX_VALUE);
+            pillarInfo.setNode(tmpNode, Double.MAX_VALUE, Double.MAX_VALUE, Double.MAX_VALUE);
             tmpNode = addTowerNode(osmId, lat, lon, ele);
         } else {
             if (pointList.is3D())
@@ -814,8 +786,7 @@ private String createNewNodeId() {
     /**
      * Add a zero length edge with reduced routing options to the graph.
      */
-    Collection<EdgeIteratorState> addBarrierEdge(String fromId, String toId,
-            long flags, long nodeFlags, String wayOsmId) {
+    Collection<EdgeIteratorState> addBarrierEdge(String fromId, String toId, long flags, long nodeFlags, String wayOsmId) {
         // clear barred directions from routing flags
         flags &= ~nodeFlags;
         // add edge
@@ -831,8 +802,7 @@ private String createNewNodeId() {
      *         relation
      */
     TurnRelation createTurnRelation(Relation relation) {
-        OSMTurnRelation.Type type = OSITNTurnRelation
-                .getRestrictionType(relation.getTag("restriction"));
+        OSMTurnRelation.Type type = OSITNTurnRelation.getRestrictionType(relation.getTag("restriction"));
         if (type != OSMTurnRelation.Type.UNSUPPORTED) {
             long fromWayID = -1;
             long viaNodeID = -1;
@@ -845,13 +815,11 @@ TurnRelation createTurnRelation(Relation relation) {
                     } else if ("to".equals(member.role())) {
                         toWayID = member.ref();
                     }
-                } else if (OSMElement.NODE == member.type()
-                        && "via".equals(member.role())) {
+                } else if (OSMElement.NODE == member.type() && "via".equals(member.role())) {
                     viaNodeID = member.ref();
                 }
             }
-            if (type != OSMTurnRelation.Type.UNSUPPORTED && fromWayID >= 0
-                    && toWayID >= 0 && viaNodeID >= 0) {
+            if (type != OSMTurnRelation.Type.UNSUPPORTED && fromWayID >= 0 && toWayID >= 0 && viaNodeID >= 0) {
                 return new OSMTurnRelation(fromWayID, viaNodeID, toWayID, type);
             }
         }
@@ -880,18 +848,15 @@ boolean isInBounds(Node node) {
         return osmWayIdToRouteWeightMap;
     }
 
-
     private void printInfo(String str) {
         LoggerFactory.getLogger(getClass()).info(
-                "finished " + str + " processing." + " nodes: "
-                        + graphStorage.getNodes() + ", osmIdMap.size:"
-                        + getNodeMap().size() + ", osmIdMap:"
-                        + ", nodeFlagsMap.size:" + getNodeFlagsMap().size()
-                        + ", relFlagsMap.size:" + getRelFlagsMap().size() + " "
-                        + Helper.getMemInfo());
+                "finished " + str + " processing." + " nodes: " + graphStorage.getNodes() + ", osmIdMap.size:"
+                        + getNodeMap().size() + ", osmIdMap:" + ", nodeFlagsMap.size:" + getNodeFlagsMap().size()
+                        + ", relFlagsMap.size:" + getRelFlagsMap().size() + " " + Helper.getMemInfo());
     }
 
-    private void processStageOne(OsDpnInputFile in) throws XMLStreamException, MismatchedDimensionException, FactoryException, TransformException {
+    private void processStageOne(OsDpnInputFile in) throws XMLStreamException, MismatchedDimensionException,
+    FactoryException, TransformException {
         RoutingElement item;
         while ((item = in.getNext()) != null) {
             switch (item.getType()) {
@@ -906,24 +871,27 @@ private void processStageOne(OsDpnInputFile in) throws XMLStreamException, Misma
         }
     }
 
-    private void processStageTwo(ProcessData processData, OsDpnInputFile in) throws XMLStreamException, MismatchedDimensionException, FactoryException, TransformException {
+    private void processStageTwo(ProcessData processData, OsDpnInputFile in) throws XMLStreamException,
+    MismatchedDimensionException, FactoryException, TransformException {
         RoutingElement item;
         while ((item = in.getNext()) != null) {
             switch (item.getType()) {
             case OSMElement.WAY:
-            OsDpnWay dpnWay = (OsDpnWay) item;
-            logger.info("WAY:" + dpnWay.getId() + ":" + processData.wayStart);
-            if (processData.wayStart < 0) {
-                logger.info(nf(processData.counter) + ", now parsing ways");
-                processData.wayStart = processData.counter;
+                OsDpnWay dpnWay = (OsDpnWay) item;
+                logger.info("WAY:" + dpnWay.getId() + ":" + processData.wayStart);
+                if (processData.wayStart < 0) {
+                    logger.info(nf(processData.counter) + ", now parsing ways");
+                    processData.wayStart = processData.counter;
+                }
+                prepareWaysNodes(dpnWay, getNodeMap());
+                processWay(dpnWay);
+                dpnWay.clearStoredCoords();
             }
-            prepareWaysNodes(dpnWay, getNodeMap());
-            processWay(dpnWay);
-            dpnWay.clearStoredCoords();
-        }}
+        }
     }
 
-    private void processStageThree(ProcessData processData, OsDpnInputFile in) throws XMLStreamException, MismatchedDimensionException, FactoryException, TransformException {
+    private void processStageThree(ProcessData processData, OsDpnInputFile in) throws XMLStreamException,
+    MismatchedDimensionException, FactoryException, TransformException {
         RoutingElement item;
         if (processData.relationStart < 0) {
             logger.info(nf(processData.counter) + ", now parsing relations");
@@ -934,7 +902,8 @@ private void processStageThree(ProcessData processData, OsDpnInputFile in) throw
             case OSMElement.RELATION:
                 processRelation((Relation) item);
                 if (++processData.counter % 5000000 == 0) {
-                    logger.info(nf(processData.counter) + ", locs:" + nf(locations) + " (" + skippedLocations + ") " + Helper.getMemInfo());
+                    logger.info(nf(processData.counter) + ", locs:" + nf(locations) + " (" + skippedLocations + ") "
+                            + Helper.getMemInfo());
                 }
             }
         }
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnWay.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnWay.java
index 4d1699f468..cebdf35916 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnWay.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnWay.java
@@ -1,14 +1,14 @@
 /*
  *  Licensed to GraphHopper and Peter Karich under one or more contributor
- *  license agreements. See the NOTICE file distributed with this work for 
+ *  license agreements. See the NOTICE file distributed with this work for
  *  additional information regarding copyright ownership.
- * 
- *  GraphHopper licenses this file to you under the Apache License, 
- *  Version 2.0 (the "License"); you may not use this file except in 
+ *
+ *  GraphHopper licenses this file to you under the Apache License,
+ *  Version 2.0 (the "License"); you may not use this file except in
  *  compliance with the License. You may obtain a copy of the License at
- * 
+ *
  *       http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  *  Unless required by applicable law or agreed to in writing, software
  *  distributed under the License is distributed on an "AS IS" BASIS,
  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -17,299 +17,329 @@
  */
 package com.graphhopper.reader.osgb.dpn;
 
-import com.graphhopper.reader.Way;
-
 import gnu.trove.map.TDoubleLongMap;
 import gnu.trove.map.TDoubleObjectMap;
 import gnu.trove.map.TLongObjectMap;
 
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+
+import javax.xml.stream.XMLStreamException;
+import javax.xml.stream.XMLStreamReader;
+
 import org.opengis.geometry.MismatchedDimensionException;
 import org.opengis.referencing.FactoryException;
 import org.opengis.referencing.operation.TransformException;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import javax.xml.stream.XMLStreamException;
-import javax.xml.stream.XMLStreamReader;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.additionalRights.AdoptedByNationalCycleRoute;
+import com.graphhopper.reader.osgb.dpn.additionalRights.AdoptedByOtherCycleRoute;
+import com.graphhopper.reader.osgb.dpn.additionalRights.AdoptedByRecreationalRoute;
+import com.graphhopper.reader.osgb.dpn.additionalRights.WithinAccessLand;
+import com.graphhopper.reader.osgb.dpn.potentialHazards.Boulders;
+import com.graphhopper.reader.osgb.dpn.potentialHazards.Cliff;
+import com.graphhopper.reader.osgb.dpn.potentialHazards.Foreshore;
+import com.graphhopper.reader.osgb.dpn.potentialHazards.InlandWater;
+import com.graphhopper.reader.osgb.dpn.potentialHazards.InvalidPotentialHazardException;
+import com.graphhopper.reader.osgb.dpn.potentialHazards.Marsh;
+import com.graphhopper.reader.osgb.dpn.potentialHazards.Mud;
+import com.graphhopper.reader.osgb.dpn.potentialHazards.QuarryOrPit;
+import com.graphhopper.reader.osgb.dpn.potentialHazards.Rock;
+import com.graphhopper.reader.osgb.dpn.potentialHazards.Sand;
+import com.graphhopper.reader.osgb.dpn.potentialHazards.Scree;
+import com.graphhopper.reader.osgb.dpn.potentialHazards.Shingle;
+import com.graphhopper.reader.osgb.dpn.potentialHazards.Spoil;
+import com.graphhopper.reader.osgb.dpn.potentialHazards.TidalWater;
+import com.graphhopper.reader.osgb.dpn.rightOfWay.BridleWay;
+import com.graphhopper.reader.osgb.dpn.rightOfWay.BywayOpenToAllTraffic;
+import com.graphhopper.reader.osgb.dpn.rightOfWay.CorePath;
+import com.graphhopper.reader.osgb.dpn.rightOfWay.Footpath;
+import com.graphhopper.reader.osgb.dpn.rightOfWay.None;
+import com.graphhopper.reader.osgb.dpn.rightOfWay.NormalPermissibleUses;
+import com.graphhopper.reader.osgb.dpn.rightOfWay.OtherRouteWithPublicAccess;
+import com.graphhopper.reader.osgb.dpn.rightOfWay.PermissiveBridleWay;
+import com.graphhopper.reader.osgb.dpn.rightOfWay.PermissivePath;
+import com.graphhopper.reader.osgb.dpn.rightOfWay.RestrictedByway;
 
 /**
  * Represents an OSM Way
  * <p/>
- * 
+ *
  * @author Nop
  */
 public class OsDpnWay extends OsDpnElement implements Way {
-	protected final List<String> nodes = new ArrayList<String>(5);
-	private String endNode;
-	protected String startCoord;
-	protected String endCoord;
-	private String[] wayCoords;
-	private static final Logger logger = LoggerFactory
-			.getLogger(OsDpnWay.class);
-	private static OsDpnOsmAttributeMappingVisitor[] rightOfWayVisitors = {
-			new BridleWay(), new PermissiveBridleWay(),
-			new BywayOpenToAllTraffic(), new None(),
-			new OtherRouteWithPublicAccess(), new Footpath(),
-			new PermissivePath(), new RestrictedByway() };
-	private static OsDpnOsmAttributeMappingVisitor[] potentialHazardVisitors = {
-			new Boulders(), new Cliff(), new Marsh(), new Mud(), new Sand(),
-			new Scree(), new Shingle(), new Spoil(), new Rock(),
-			new TidalWater() };
-
-	/**
-	 * Constructor for XML Parser
-	 * 
-	 * @throws TransformException
-	 * @throws FactoryException
-	 * @throws MismatchedDimensionException
-	 */
-	public static OsDpnWay create(String idStr, XMLStreamReader parser)
-			throws XMLStreamException, MismatchedDimensionException,
-			FactoryException, TransformException {
-		logger.trace("OsDpnWay.create()");
-		OsDpnWay way = new OsDpnWay(idStr);
-		parser.nextTag();
-		way.setTag("highway", "track");
-		way.readTags(parser);
-		logger.trace(way.toString());
-		return way;
-	}
-
-	public OsDpnWay(String id) {
-		super(id, WAY);
-	}
-
-	public List<String> getNodes() {
-		return nodes;
-	}
-
-	@Override
-	protected int handleCycleRoute(XMLStreamReader parser)
-			throws XMLStreamException {
-		String access = parser.getElementText();
-		if ("true".equals(access)) {
-			setTag("bicycle", "yes");
-		}
-		return parser.getEventType();
-	}
-
-	@Override
-	protected int handleAccessLand(XMLStreamReader parser)
-			throws XMLStreamException {
-		String access = parser.getElementText();
-		if ("true".equals(access)) {
-			setTag("foot", "yes");
-		}
-		return parser.getEventType();
-	}
-
-	@Override
-	protected int handleSurfaceType(XMLStreamReader parser)
-			throws XMLStreamException {
-		String surface;
-		String surfaceType = parser.getElementText();
-		if ("Made Sealed".equals(surfaceType)) {
-			surface = "paved";
-		} else if ("Unmade".equals(surfaceType)) {
-			surface = "ground";
-		} else {
-			surface = "unpaved";
-		}
-		setTag("surface", surface);
-		return parser.getEventType();
-	}
-
-	@Override
-	protected int handlePhysicalLevel(XMLStreamReader parser)
-			throws XMLStreamException {
-		String text = parser.getElementText();
-		if ("Below Surface Level Tunnel".equals(text)) {
-			setTag("tunnel", "yes");
-		} else if ("Above Surface Level On Structure".equals(text)) {
-			setTag("bridge", "yes");
-		}
-		return parser.getEventType();
-	}
-
-	@Override
-	protected int handleRightOfUse(XMLStreamReader parser)
-			throws XMLStreamException {
-		String attributeValue = parser.getElementText().replaceAll(" ", "")
-				.toLowerCase();
-		for (OsDpnOsmAttributeMappingVisitor rightOfWayVisitor : rightOfWayVisitors) {
-			rightOfWayVisitor.visitWayAttribute(attributeValue, this);
-		}
-		return parser.getEventType();
-	}
-
-	@Override
-	protected int handlePotentialHazard(XMLStreamReader parser)
-			throws XMLStreamException {
-		String attributeValue = parser.getElementText().replaceAll(" ", "")
-				.toLowerCase();
-		for (OsDpnOsmAttributeMappingVisitor potentialHazzardVisitor : potentialHazardVisitors) {
-			potentialHazzardVisitor.visitWayAttribute(attributeValue, this);
-		}
-		return parser.getEventType();
-	}
-
-	@Override
-	protected void parseCoords(String lineDefinition) {
-		String[] lineSegments = lineDefinition.split(" ");
-		wayCoords = Arrays
-				.copyOfRange(lineSegments, 1, lineSegments.length - 1);
-		logger.info("parseCoords1" + toString() + " "
-				+ ((wayCoords.length == 0) ? "0" : wayCoords[0]));
-	}
-
-	/**
-	 * Ignores first and last coordinate set as they are also the start and end
-	 * node coordinates and therefore already captured as towers
-	 */
-	@Override
-	protected void parseCoords(int dimensions, String lineDefinition) {
-		String[] lineSegments = lineDefinition.split(" ");
-		int innerCoordCount = lineSegments.length / dimensions - 2;
-		if (innerCoordCount > 0) {
-			wayCoords = new String[innerCoordCount];
-			StringBuilder curString = null;
-			for (int i = dimensions; i < lineSegments.length - dimensions; i++) {
-				String string = lineSegments[i];
-				switch (i % dimensions) {
-				case 0: {
-					int coordNumber = (i / dimensions) - 1;
-					if (coordNumber > 0) {
-						wayCoords[coordNumber - 1] = curString.toString();
-					}
-					curString = new StringBuilder();
-					curString.append(string);
-					break;
-				}
-
-				case 1:
-				case 2: {
-					curString.append(' ');
-					curString.append(string);
-				}
-				}
-			}
-			wayCoords[wayCoords.length - 1] = curString.toString();
-			addWayNodes();
-			logger.info("parsecoord2" + toString() + " "
-					+ ((wayCoords.length == 0) ? "0" : wayCoords[0]));
-		}
-		else
-		{
-			wayCoords = null;
-		}
-		nodes.add(endNode);
-	}
-
-	@Override
-	protected void parseNetworkMember(String elementText) {
-		throw new UnsupportedOperationException();
-	}
-
-	@Override
-	protected void addNode(String nodeId) {
-		String idStr = nodeId.substring(4);
-		if (0 == nodes.size()) {
-			nodes.add(idStr);
-		} else {
-			endNode = idStr;
-		}
-	}
-
-	protected void addWayNodes() {
-		for (int i = 1; i <= wayCoords.length; i++) {
-			long idPrefix = i;
-			String extraId = idPrefix + getId();
-			nodes.add(extraId);
-		}
-	}
-
-	@Override
-	protected void addDirectedLink(String nodeId, String orientation) {
-		throw new UnsupportedOperationException();
-	}
-
-	/**
-	 * Creates a new OsDpnNode for each wayCoord. This also Looks for direction
-	 * flags in edgeIdToXToYToNodeFlagsMap for the wayId, x, y combination. If
-	 * it exists then set the node tag TAG_KEY_NOENTRY_ORIENTATION to true and
-	 * the TAG_KEY_ONEWAY_ORIENTATION node tag to -1 for one direction and true
-	 * for the other.
-	 * 
-	 * @param edgeIdToXToYToNodeFlagsMap
-	 * @return
-	 * @throws TransformException
-	 * @throws FactoryException
-	 * @throws MismatchedDimensionException
-	 */
-	public List<OsDpnNode> evaluateWayNodes(TLongObjectMap<TDoubleObjectMap<TDoubleLongMap>> edgeIdToXToYToNodeFlagsMap)
-			throws MismatchedDimensionException, FactoryException, TransformException 
-			{
-		List<OsDpnNode> wayNodes = new ArrayList<OsDpnNode>();
-
-		if (null != wayCoords) {
-			for (int i = 0; i < wayCoords.length; i++) {
-				String wayCoord = wayCoords[i];
-
-				long idPrefix = (i + 1);
-				String id = idPrefix + getId();
-				OsDpnNode wayNode = new OsDpnNode(id);
-				wayNode.parseCoords(wayCoord);
-
-				logger.info("Node " + getId() + " coords: " + wayCoord
-						+ " tags: ");
-				for (String tagKey : wayNode.getTags().keySet()) {
-					logger.info("\t " + tagKey + " : " + wayNode.getTag(tagKey));
-				}
-				wayNodes.add(wayNode);
-			}
-		}
-		return wayNodes;
-	}
-
-	/**
-	 * Memory management method. Once a way is processed the stored string
-	 * coordinates are no longer required so set them to null so they can be
-	 * garbage collected
-	 */
-	public void clearStoredCoords() 
-	{
-		wayCoords = null;
-		startCoord = null;
-		endCoord = null;
-	}
-
-	public String[] getWayCoords() {
-		return wayCoords;
-	}
-
-	public String getStartCoord() {
-		return startCoord;
-	}
-
-	public String getEndCoord() {
-		return endCoord;
-	}
-
-	protected void parseCoordinateString(String elementText,
-			String elementSeparator) {
-		throw new UnsupportedOperationException();
-
-	}
-
-	@Override
-	public String toString() {
-		return super.toString() + " id:" + getId() + " start:" + nodes.get(0)
-				+ " end:" + nodes.get(nodes.size() - 1) + " NAME:"
-				+ getTag("name");
-	}
+    protected final List<String> nodes = new ArrayList<String>(5);
+    private String endNode;
+    protected String startCoord;
+    protected String endCoord;
+    private String[] wayCoords;
+    private static final Logger logger = LoggerFactory.getLogger(OsDpnWay.class);
+    private static OsDpnOsmAttributeMappingVisitor[] RIGHT_OF_WAY_VISITORS = { new BridleWay(),
+        new BywayOpenToAllTraffic(), new CorePath(), new Footpath(), new None(), new NormalPermissibleUses(),
+        new OtherRouteWithPublicAccess(), new PermissiveBridleWay(), new PermissivePath(), new RestrictedByway() };
+    private static OsDpnOsmAttributeMappingVisitor[] POTENTIAL_HAZARD_VISITORS = { new Boulders(), new Cliff(),
+        new Marsh(), new Mud(), new Sand(), new Scree(), new Shingle(), new Spoil(), new Rock(), new TidalWater(),
+        new QuarryOrPit(), new InlandWater(), new Foreshore() };
+    private static OsDpnOsmAttributeMappingVisitor[] ADDITIONAL_RIGHTS_VISITORS = { new AdoptedByNationalCycleRoute(),
+        new AdoptedByOtherCycleRoute(), new AdoptedByRecreationalRoute(), new WithinAccessLand() };
+
+    public static boolean THROW_EXCEPTION_ON_INVALID_HAZARD = false;
+
+    /**
+     * Constructor for XML Parser
+     *
+     * @throws TransformException
+     * @throws FactoryException
+     * @throws MismatchedDimensionException
+     */
+    public static OsDpnWay create(String idStr, XMLStreamReader parser) throws XMLStreamException,
+    MismatchedDimensionException, FactoryException, TransformException {
+        logger.trace("OsDpnWay.create()");
+        OsDpnWay way = new OsDpnWay(idStr);
+        parser.nextTag();
+        way.setTag("highway", "track");
+        way.readTags(parser);
+        logger.trace(way.toString());
+        return way;
+    }
+
+    public OsDpnWay(String id) {
+        super(id, WAY);
+    }
+
+    public List<String> getNodes() {
+        return nodes;
+    }
+
+    @Override
+    protected int handleAdditionalRights(XMLStreamReader parser) throws XMLStreamException {
+        String access = parser.getElementText();
+        if ("true".equals(access)) {
+            for (OsDpnOsmAttributeMappingVisitor visitor : ADDITIONAL_RIGHTS_VISITORS) {
+                visitor.visitWayAttribute(parser.getLocalName().toLowerCase(), this);
+            }
+        }
+        return parser.getEventType();
+    }
+
+    @Override
+    protected int handleSurfaceType(XMLStreamReader parser) throws XMLStreamException {
+        String surface;
+        String surfaceType = parser.getElementText();
+        if ("Made Sealed".equals(surfaceType)) {
+            surface = "paved";
+        } else if ("Unmade".equals(surfaceType)) {
+            surface = "ground";
+        } else {
+            surface = "unpaved";
+        }
+        setTag("surface", surface);
+        return parser.getEventType();
+    }
+
+    @Override
+    protected int handlePhysicalLevel(XMLStreamReader parser) throws XMLStreamException {
+        String text = parser.getElementText();
+        if ("Below Surface Level Tunnel".equals(text)) {
+            setTag("tunnel", "yes");
+        } else if ("Above Surface Level On Structure".equals(text)) {
+            setTag("bridge", "yes");
+        }
+        return parser.getEventType();
+    }
+
+    @Override
+    protected int handleRightOfUse(XMLStreamReader parser) throws XMLStreamException {
+        String attributeValue = parser.getElementText().replaceAll(" ", "").toLowerCase();
+        for (OsDpnOsmAttributeMappingVisitor visitor : RIGHT_OF_WAY_VISITORS) {
+            visitor.visitWayAttribute(attributeValue, this);
+        }
+        return parser.getEventType();
+    }
+
+    @Override
+    protected int handlePotentialHazard(XMLStreamReader parser) throws XMLStreamException {
+        String attributeValue = parser.getElementText().replaceAll(" ", "").toLowerCase();
+        // DPN data has a defect where potential hazards are currently comma
+        // delimited rather than having multiple elements
+        if (attributeValue.indexOf(",") > -1) {
+            for (String subValue : attributeValue.split(",")) {
+                visitPotentialHazards(subValue);
+            }
+        } else {
+            visitPotentialHazards(attributeValue);
+        }
+        return parser.getEventType();
+    }
+
+    private void visitPotentialHazards(String attributeValue) throws XMLStreamException {
+        // Code to handle error in beta DPN data such that multiple potential
+        // hazards are not specified as multiple elements such as:
+        // <dpn:potentialHazardCrossed>Boulders</dpn:potentialHazardCrossed>
+        // <dpn:potentialHazardCrossed>Inland Water</dpn:potentialHazardCrossed>
+        // but a single element comma-space delimited. Such as:
+        // <dpn:potentialHazardCrossed>Boulders, Inland
+        // Wat</dpn:potentialHazardCrossed>
+        boolean handled = false;
+        for (OsDpnOsmAttributeMappingVisitor visitor : POTENTIAL_HAZARD_VISITORS) {
+            handled |= visitor.visitWayAttribute(attributeValue, this);
+        }
+        if (!handled) {
+            System.err.println(">>>>>>> Unsupported <dpn:potentialHazardCrossed> value in : " + attributeValue);
+            if (THROW_EXCEPTION_ON_INVALID_HAZARD) {
+                throw new InvalidPotentialHazardException("Unsupported <dpn:potentialHazardCrossed> value in : "
+                        + attributeValue);
+            }
+        }
+
+    }
+
+    @Override
+    protected void parseCoords(String lineDefinition) {
+        String[] lineSegments = lineDefinition.split(" ");
+        wayCoords = Arrays.copyOfRange(lineSegments, 1, lineSegments.length - 1);
+        logger.info("parseCoords1" + toString() + " " + ((wayCoords.length == 0) ? "0" : wayCoords[0]));
+    }
+
+    /**
+     * Ignores first and last coordinate set as they are also the start and end
+     * node coordinates and therefore already captured as towers
+     */
+    @Override
+    protected void parseCoords(int dimensions, String lineDefinition) {
+        String[] lineSegments = lineDefinition.split(" ");
+        int innerCoordCount = lineSegments.length / dimensions - 2;
+        if (innerCoordCount > 0) {
+            wayCoords = new String[innerCoordCount];
+            StringBuilder curString = null;
+            for (int i = dimensions; i < lineSegments.length - dimensions; i++) {
+                String string = lineSegments[i];
+                switch (i % dimensions) {
+                case 0: {
+                    int coordNumber = (i / dimensions) - 1;
+                    if (coordNumber > 0) {
+                        wayCoords[coordNumber - 1] = curString.toString();
+                    }
+                    curString = new StringBuilder();
+                    curString.append(string);
+                    break;
+                }
+
+                case 1:
+                case 2: {
+                    curString.append(' ');
+                    curString.append(string);
+                }
+                }
+            }
+            wayCoords[wayCoords.length - 1] = curString.toString();
+            addWayNodes();
+            logger.info("parsecoord2" + toString() + " " + ((wayCoords.length == 0) ? "0" : wayCoords[0]));
+        } else {
+            wayCoords = null;
+        }
+        nodes.add(endNode);
+    }
+
+    @Override
+    protected void parseNetworkMember(String elementText) {
+        throw new UnsupportedOperationException();
+    }
+
+    @Override
+    protected void addNode(String nodeId) {
+        String idStr = nodeId.substring(4);
+        if (0 == nodes.size()) {
+            nodes.add(idStr);
+        } else {
+            endNode = idStr;
+        }
+    }
+
+    protected void addWayNodes() {
+        for (int i = 1; i <= wayCoords.length; i++) {
+            long idPrefix = i;
+            String extraId = idPrefix + getId();
+            nodes.add(extraId);
+        }
+    }
+
+    @Override
+    protected void addDirectedLink(String nodeId, String orientation) {
+        throw new UnsupportedOperationException();
+    }
+
+    /**
+     * Creates a new OsDpnNode for each wayCoord. This also Looks for direction
+     * flags in edgeIdToXToYToNodeFlagsMap for the wayId, x, y combination. If
+     * it exists then set the node tag TAG_KEY_NOENTRY_ORIENTATION to true and
+     * the TAG_KEY_ONEWAY_ORIENTATION node tag to -1 for one direction and true
+     * for the other.
+     *
+     * @param edgeIdToXToYToNodeFlagsMap
+     * @return
+     * @throws TransformException
+     * @throws FactoryException
+     * @throws MismatchedDimensionException
+     */
+    public List<OsDpnNode> evaluateWayNodes(TLongObjectMap<TDoubleObjectMap<TDoubleLongMap>> edgeIdToXToYToNodeFlagsMap)
+            throws MismatchedDimensionException, FactoryException, TransformException {
+        List<OsDpnNode> wayNodes = new ArrayList<OsDpnNode>();
+
+        if (null != wayCoords) {
+            for (int i = 0; i < wayCoords.length; i++) {
+                String wayCoord = wayCoords[i];
+
+                long idPrefix = (i + 1);
+                String id = idPrefix + getId();
+                OsDpnNode wayNode = new OsDpnNode(id);
+                wayNode.parseCoords(wayCoord);
+
+                logger.info("Node " + getId() + " coords: " + wayCoord + " tags: ");
+                for (String tagKey : wayNode.getTags().keySet()) {
+                    logger.info("\t " + tagKey + " : " + wayNode.getTag(tagKey));
+                }
+                wayNodes.add(wayNode);
+            }
+        }
+        return wayNodes;
+    }
+
+    /**
+     * Memory management method. Once a way is processed the stored string
+     * coordinates are no longer required so set them to null so they can be
+     * garbage collected
+     */
+    public void clearStoredCoords() {
+        wayCoords = null;
+        startCoord = null;
+        endCoord = null;
+    }
+
+    public String[] getWayCoords() {
+        return wayCoords;
+    }
+
+    public String getStartCoord() {
+        return startCoord;
+    }
+
+    public String getEndCoord() {
+        return endCoord;
+    }
+
+    protected void parseCoordinateString(String elementText, String elementSeparator) {
+        throw new UnsupportedOperationException();
+
+    }
+
+    @Override
+    public String toString() {
+        return super.toString() + " id:" + getId() + " start:" + nodes.get(0) + " end:" + nodes.get(nodes.size() - 1)
+                + " NAME:" + getTag("name");
+    }
 
 }
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OtherRouteWithPublicAccess.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OtherRouteWithPublicAccess.java
deleted file mode 100644
index b4718b39a9..0000000000
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OtherRouteWithPublicAccess.java
+++ /dev/null
@@ -1,14 +0,0 @@
-package com.graphhopper.reader.osgb.dpn;
-
-import com.graphhopper.reader.Way;
-
-/**
- * Created by sadam on 16/02/15.
- */
-public class OtherRouteWithPublicAccess extends AbstractOsDpnOsmAttibuteMappingVisitor {
-    @Override
-    protected void applyAttributes(Way way)
-    {
-        way.setTag("foot", "yes");
-    }
-}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/PermissivePath.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/PermissivePath.java
deleted file mode 100644
index 8e0b46993e..0000000000
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/PermissivePath.java
+++ /dev/null
@@ -1,15 +0,0 @@
-package com.graphhopper.reader.osgb.dpn;
-
-import com.graphhopper.reader.Way;
-
-/**
- * Created by sadam on 13/02/15.
- */
-public class PermissivePath extends AbstractOsDpnOsmAttibuteMappingVisitor {
-
-    @Override
-    protected void applyAttributes(Way way) {
-        way.setTag("foot", "permissive");
-    }
-
-}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/QuarryOrPit.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/QuarryOrPit.java
deleted file mode 100644
index 814c288f77..0000000000
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/QuarryOrPit.java
+++ /dev/null
@@ -1,16 +0,0 @@
-package com.graphhopper.reader.osgb.dpn;
-
-import com.graphhopper.reader.Way;
-
-/**
- * Created by sadam on 13/02/15.
- */
-public class QuarryOrPit extends AbstractOsDpnOsmAttibuteMappingVisitor {
-
-    @Override
-    protected void applyAttributes(Way way)
-    {
-        way.setTag("natural", "excavation");
-    }
-
-}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/RestrictedByway.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/RestrictedByway.java
deleted file mode 100644
index dcb2ca4daf..0000000000
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/RestrictedByway.java
+++ /dev/null
@@ -1,18 +0,0 @@
-package com.graphhopper.reader.osgb.dpn;
-
-import com.graphhopper.reader.Way;
-
-/**
- * Created by sadam on 13/02/15.
- */
-public class RestrictedByway extends AbstractOsDpnOsmAttibuteMappingVisitor {
-
-    @Override
-    protected void applyAttributes(Way way)
-    {
-        way.setTag("designation", "restricted_byway");
-        way.setTag("highway", "track");
-        way.setTag("motor_vehicle", "no");
-    }
-
-}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/Rock.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/Rock.java
deleted file mode 100644
index 9ece1e942a..0000000000
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/Rock.java
+++ /dev/null
@@ -1,16 +0,0 @@
-package com.graphhopper.reader.osgb.dpn;
-
-import com.graphhopper.reader.Way;
-
-/**
- * Created by sadam on 13/02/15.
- */
-public class Rock extends AbstractOsDpnOsmAttibuteMappingVisitor {
-
-    @Override
-    protected void applyAttributes(Way way)
-    {
-        way.setTag("natural", "rocks");
-    }
-
-}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/Sand.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/Sand.java
deleted file mode 100644
index 0de861c817..0000000000
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/Sand.java
+++ /dev/null
@@ -1,16 +0,0 @@
-package com.graphhopper.reader.osgb.dpn;
-
-import com.graphhopper.reader.Way;
-
-/**
- * Created by sadam on 13/02/15.
- */
-public class Sand extends AbstractOsDpnOsmAttibuteMappingVisitor {
-
-    @Override
-    protected void applyAttributes(Way way)
-    {
-        way.setTag("natural", "sand");
-    }
-
-}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/Scree.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/Scree.java
deleted file mode 100644
index bfb312be81..0000000000
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/Scree.java
+++ /dev/null
@@ -1,16 +0,0 @@
-package com.graphhopper.reader.osgb.dpn;
-
-import com.graphhopper.reader.Way;
-
-/**
- * Created by sadam on 13/02/15.
- */
-public class Scree extends AbstractOsDpnOsmAttibuteMappingVisitor {
-
-    @Override
-    protected void applyAttributes(Way way)
-    {
-        way.setTag("natural", "scree");
-    }
-
-}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/Shingle.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/Shingle.java
deleted file mode 100644
index 4aefacbf13..0000000000
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/Shingle.java
+++ /dev/null
@@ -1,16 +0,0 @@
-package com.graphhopper.reader.osgb.dpn;
-
-import com.graphhopper.reader.Way;
-
-/**
- * Created by sadam on 13/02/15.
- */
-public class Shingle extends AbstractOsDpnOsmAttibuteMappingVisitor {
-
-    @Override
-    protected void applyAttributes(Way way)
-    {
-        way.setTag("natural", "shingle");
-    }
-
-}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/Spoil.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/Spoil.java
deleted file mode 100644
index 0310568891..0000000000
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/Spoil.java
+++ /dev/null
@@ -1,16 +0,0 @@
-package com.graphhopper.reader.osgb.dpn;
-
-import com.graphhopper.reader.Way;
-
-/**
- * Created by sadam on 13/02/15.
- */
-public class Spoil extends AbstractOsDpnOsmAttibuteMappingVisitor {
-
-    @Override
-    protected void applyAttributes(Way way)
-    {
-        way.setTag("man_made", "spoil_heap");
-    }
-
-}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/TidalWater.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/TidalWater.java
deleted file mode 100644
index 47232fd5d3..0000000000
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/TidalWater.java
+++ /dev/null
@@ -1,17 +0,0 @@
-package com.graphhopper.reader.osgb.dpn;
-
-import com.graphhopper.reader.Way;
-
-/**
- * Created by sadam on 13/02/15.
- */
-public class TidalWater extends AbstractOsDpnOsmAttibuteMappingVisitor {
-
-    @Override
-    protected void applyAttributes(Way way)
-    {
-    	way.setTag("natural", "water");
-        way.setTag("tidal", "yes");
-    }
-
-}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByNationalCycleRoute.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByNationalCycleRoute.java
new file mode 100644
index 0000000000..85f5527f2f
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByNationalCycleRoute.java
@@ -0,0 +1,25 @@
+package com.graphhopper.reader.osgb.dpn.additionalRights;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
+
+/**
+ * Description: A link part of the National Cycle Network
+ *
+ * Confirmed Allowable users: Pedestrians, Cyclists
+ *
+ * @author phopkins
+ *
+ */
+public class AdoptedByNationalCycleRoute extends AbstractOsDpnOsmAttibuteMappingVisitor {
+
+    @Override
+    protected void applyAttributes(Way way) {
+        // Assign value to use for priority
+        way.setTag("network", "ncn");
+
+        way.setTag("bicycle", "yes");
+        way.setTag("foot", "yes");
+    }
+
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByOtherCycleRoute.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByOtherCycleRoute.java
new file mode 100644
index 0000000000..ab453aaba4
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByOtherCycleRoute.java
@@ -0,0 +1,28 @@
+package com.graphhopper.reader.osgb.dpn.additionalRights;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
+
+/**
+ *
+ * Description: A link part of a Cycle Network that is not part of the National
+ * Cycle Network
+ *
+ * Confirmed Allowable users: Pedestrians, Cyclists
+ *
+ * @author phopkins
+ *
+ */
+public class AdoptedByOtherCycleRoute extends AbstractOsDpnOsmAttibuteMappingVisitor {
+
+    @Override
+    protected void applyAttributes(Way way) {
+        // Assign value to use for priority. Could be local or regional but we
+        // are chosing local cycle network
+        way.setTag("network", "lcn");
+
+        way.setTag("bicycle", "yes");
+        way.setTag("foot", "yes");
+    }
+
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByRecreationalRoute.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByRecreationalRoute.java
new file mode 100644
index 0000000000..37001354f0
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByRecreationalRoute.java
@@ -0,0 +1,24 @@
+package com.graphhopper.reader.osgb.dpn.additionalRights;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
+
+/**
+ *
+ * Description: A link part of a Recreational Route
+ *
+ * Confirmed Allowable users: Pedestrians
+ *
+ * @author phopkins
+ *
+ */
+public class AdoptedByRecreationalRoute extends AbstractOsDpnOsmAttibuteMappingVisitor {
+
+    @Override
+    protected void applyAttributes(Way way) {
+        // Assign value to use for priority
+        way.setTag("network", "lwn");
+        way.setTag("foot", "yes");
+    }
+
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/additionalRights/WithinAccessLand.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/additionalRights/WithinAccessLand.java
new file mode 100644
index 0000000000..dee8b7a5df
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/additionalRights/WithinAccessLand.java
@@ -0,0 +1,24 @@
+package com.graphhopper.reader.osgb.dpn.additionalRights;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
+
+/**
+ *
+ * Description: A link within Access Land
+ *
+ * Confirmed Allowable users: Pedestrians Note for Private Roads where the only
+ * right to use is because the road is in Access Land there may not be a right
+ * to use the road itself.
+ *
+ * @author phopkins
+ *
+ */
+public class WithinAccessLand extends AbstractOsDpnOsmAttibuteMappingVisitor {
+
+    @Override
+    protected void applyAttributes(Way way) {
+        way.setTag("foot", "yes");
+    }
+
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Boulders.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Boulders.java
new file mode 100644
index 0000000000..dbdfea1ab9
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Boulders.java
@@ -0,0 +1,16 @@
+package com.graphhopper.reader.osgb.dpn.potentialHazards;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
+
+/**
+ * Created by sadam on 13/02/15.
+ */
+public class Boulders extends AbstractOsDpnOsmAttibuteMappingVisitor {
+
+    @Override
+    protected void applyAttributes(Way way) {
+        setOrAppendTag(way, "natural", "boulders");
+    }
+
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Cliff.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Cliff.java
new file mode 100644
index 0000000000..e7f91d26a5
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Cliff.java
@@ -0,0 +1,16 @@
+package com.graphhopper.reader.osgb.dpn.potentialHazards;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
+
+/**
+ * Created by sadam on 13/02/15.
+ */
+public class Cliff extends AbstractOsDpnOsmAttibuteMappingVisitor {
+
+    @Override
+    protected void applyAttributes(Way way) {
+        setOrAppendTag(way, "natural", "cliff");
+    }
+
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Foreshore.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Foreshore.java
new file mode 100644
index 0000000000..8bf388e8a7
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Foreshore.java
@@ -0,0 +1,16 @@
+package com.graphhopper.reader.osgb.dpn.potentialHazards;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
+
+/**
+ * Created by sadam on 13/02/15.
+ */
+public class Foreshore extends AbstractOsDpnOsmAttibuteMappingVisitor {
+
+    @Override
+    protected void applyAttributes(Way way) {
+        setOrAppendTag(way, "water", "tidal");
+    }
+
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/InlandWater.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/InlandWater.java
new file mode 100644
index 0000000000..a1ad54e788
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/InlandWater.java
@@ -0,0 +1,17 @@
+package com.graphhopper.reader.osgb.dpn.potentialHazards;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
+
+/**
+ * Created by sadam on 13/02/15.
+ */
+public class InlandWater extends AbstractOsDpnOsmAttibuteMappingVisitor {
+
+    @Override
+    protected void applyAttributes(Way way) {
+        setOrAppendTag(way, "natural", "water");
+        setOrAppendTag(way, "tidal", "no");
+    }
+
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/InvalidPotentialHazardException.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/InvalidPotentialHazardException.java
new file mode 100644
index 0000000000..2d7e2971c0
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/InvalidPotentialHazardException.java
@@ -0,0 +1,10 @@
+package com.graphhopper.reader.osgb.dpn.potentialHazards;
+
+import javax.xml.stream.XMLStreamException;
+
+public class InvalidPotentialHazardException extends XMLStreamException {
+
+    public InvalidPotentialHazardException(String msg) {
+        super(msg);
+    }
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Marsh.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Marsh.java
new file mode 100644
index 0000000000..1bf6f1b3a4
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Marsh.java
@@ -0,0 +1,16 @@
+package com.graphhopper.reader.osgb.dpn.potentialHazards;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
+
+/**
+ * Created by sadam on 13/02/15.
+ */
+public class Marsh extends AbstractOsDpnOsmAttibuteMappingVisitor {
+
+    @Override
+    protected void applyAttributes(Way way) {
+        setOrAppendTag(way, "wetland", "marsh");
+    }
+
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Mud.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Mud.java
new file mode 100644
index 0000000000..fad73016c7
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Mud.java
@@ -0,0 +1,16 @@
+package com.graphhopper.reader.osgb.dpn.potentialHazards;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
+
+/**
+ * Created by sadam on 13/02/15.
+ */
+public class Mud extends AbstractOsDpnOsmAttibuteMappingVisitor {
+
+    @Override
+    protected void applyAttributes(Way way) {
+        setOrAppendTag(way, "natural", "mud");
+    }
+
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/QuarryOrPit.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/QuarryOrPit.java
new file mode 100644
index 0000000000..55d7c8fe62
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/QuarryOrPit.java
@@ -0,0 +1,16 @@
+package com.graphhopper.reader.osgb.dpn.potentialHazards;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
+
+/**
+ * Created by sadam on 13/02/15.
+ */
+public class QuarryOrPit extends AbstractOsDpnOsmAttibuteMappingVisitor {
+
+    @Override
+    protected void applyAttributes(Way way) {
+        setOrAppendTag(way, "natural", "excavation");
+    }
+
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Rock.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Rock.java
new file mode 100644
index 0000000000..ad83eaf547
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Rock.java
@@ -0,0 +1,16 @@
+package com.graphhopper.reader.osgb.dpn.potentialHazards;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
+
+/**
+ * Created by sadam on 13/02/15.
+ */
+public class Rock extends AbstractOsDpnOsmAttibuteMappingVisitor {
+
+    @Override
+    protected void applyAttributes(Way way) {
+        setOrAppendTag(way, "natural", "rocks");
+    }
+
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Sand.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Sand.java
new file mode 100644
index 0000000000..1a78705c13
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Sand.java
@@ -0,0 +1,16 @@
+package com.graphhopper.reader.osgb.dpn.potentialHazards;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
+
+/**
+ * Created by sadam on 13/02/15.
+ */
+public class Sand extends AbstractOsDpnOsmAttibuteMappingVisitor {
+
+    @Override
+    protected void applyAttributes(Way way) {
+        setOrAppendTag(way, "natural", "sand");
+    }
+
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Scree.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Scree.java
new file mode 100644
index 0000000000..80e50d909c
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Scree.java
@@ -0,0 +1,16 @@
+package com.graphhopper.reader.osgb.dpn.potentialHazards;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
+
+/**
+ * Created by sadam on 13/02/15.
+ */
+public class Scree extends AbstractOsDpnOsmAttibuteMappingVisitor {
+
+    @Override
+    protected void applyAttributes(Way way) {
+        setOrAppendTag(way, "natural", "scree");
+    }
+
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Shingle.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Shingle.java
new file mode 100644
index 0000000000..6ab889b21e
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Shingle.java
@@ -0,0 +1,16 @@
+package com.graphhopper.reader.osgb.dpn.potentialHazards;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
+
+/**
+ * Created by sadam on 13/02/15.
+ */
+public class Shingle extends AbstractOsDpnOsmAttibuteMappingVisitor {
+
+    @Override
+    protected void applyAttributes(Way way) {
+        setOrAppendTag(way, "natural", "shingle");
+    }
+
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Spoil.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Spoil.java
new file mode 100644
index 0000000000..214ab87c73
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Spoil.java
@@ -0,0 +1,16 @@
+package com.graphhopper.reader.osgb.dpn.potentialHazards;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
+
+/**
+ * Created by sadam on 13/02/15.
+ */
+public class Spoil extends AbstractOsDpnOsmAttibuteMappingVisitor {
+
+    @Override
+    protected void applyAttributes(Way way) {
+        setOrAppendTag(way, "man_made", "spoil_heap");
+    }
+
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/TidalWater.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/TidalWater.java
new file mode 100644
index 0000000000..98652a3f60
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/TidalWater.java
@@ -0,0 +1,17 @@
+package com.graphhopper.reader.osgb.dpn.potentialHazards;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
+
+/**
+ * Created by sadam on 13/02/15.
+ */
+public class TidalWater extends AbstractOsDpnOsmAttibuteMappingVisitor {
+
+    @Override
+    protected void applyAttributes(Way way) {
+        setOrAppendTag(way, "natural", "water");
+        setOrAppendTag(way, "tidal", "yes");
+    }
+
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/BridleWay.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/BridleWay.java
new file mode 100644
index 0000000000..610d7f44de
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/BridleWay.java
@@ -0,0 +1,26 @@
+package com.graphhopper.reader.osgb.dpn.rightOfWay;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
+
+/**
+ * Description: A route where there is a right to travel on foot, on horseback, to lead a horse and to ride a bicycle
+ *
+ * Confirmed Allowable users: Pedestrians, Horses, Cyclists
+ *
+ * Created by sadam on 13/02/15.
+ */
+public class BridleWay extends AbstractOsDpnOsmAttibuteMappingVisitor {
+
+    @Override
+    protected void applyAttributes(Way way)
+    {
+        way.setTag("designation", "public_bridleway");
+        way.setTag("highway", "bridleway");
+
+        way.setTag("foot", "yes");
+        way.setTag("horse", "yes");
+        way.setTag("bicycle", "yes");
+    }
+
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/BywayOpenToAllTraffic.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/BywayOpenToAllTraffic.java
similarity index 59%
rename from core/src/main/java/com/graphhopper/reader/osgb/dpn/BywayOpenToAllTraffic.java
rename to core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/BywayOpenToAllTraffic.java
index a059774668..10ac1c305f 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/BywayOpenToAllTraffic.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/BywayOpenToAllTraffic.java
@@ -1,8 +1,13 @@
-package com.graphhopper.reader.osgb.dpn;
+package com.graphhopper.reader.osgb.dpn.rightOfWay;
 
 import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
 
 /**
+ * Description: A highway open to all traffic
+ *
+ * Confirmed Allowable users: Pedestrians, Horses, Cyclists, Motorised Vehicles
+ *
  * Created by sadam on 13/02/15.
  */
 public class BywayOpenToAllTraffic extends AbstractOsDpnOsmAttibuteMappingVisitor {
@@ -14,6 +19,7 @@ protected void applyAttributes(Way way) {
         way.setTag("foot", "yes");
         way.setTag("horse", "yes");
         way.setTag("bicycle", "yes");
+        way.setTag("motor_vehicle", "yes");
     }
 
 }
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/CorePath.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/CorePath.java
new file mode 100644
index 0000000000..10d2703cff
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/CorePath.java
@@ -0,0 +1,21 @@
+package com.graphhopper.reader.osgb.dpn.rightOfWay;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
+
+/**
+ * Description: A route in Scotland identified as part of the Core Path network.
+ *
+ * Confirmed Allowable users: Not populated in release 1.
+ *
+ * Not yet used
+ * @author phopkins
+ *
+ */
+public class CorePath extends AbstractOsDpnOsmAttibuteMappingVisitor {
+
+    @Override
+    protected void applyAttributes(Way way) {
+    }
+
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/Footpath.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/Footpath.java
similarity index 59%
rename from core/src/main/java/com/graphhopper/reader/osgb/dpn/Footpath.java
rename to core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/Footpath.java
index d8a8d2e265..8a83f70d5a 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/Footpath.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/Footpath.java
@@ -1,8 +1,13 @@
-package com.graphhopper.reader.osgb.dpn;
+package com.graphhopper.reader.osgb.dpn.rightOfWay;
 
 import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
 
 /**
+ * Description: A route where there is a right to travel on foot.
+ *
+ * Confirmed Allowable users: Pedestrians
+ *
  * Created by sadam on 13/02/15.
  */
 public class Footpath extends AbstractOsDpnOsmAttibuteMappingVisitor {
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/None.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/None.java
new file mode 100644
index 0000000000..8608148896
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/None.java
@@ -0,0 +1,26 @@
+package com.graphhopper.reader.osgb.dpn.rightOfWay;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
+
+/**
+ * Description: A route where no permissive or conventional right of way has been identified. Use may be allowed if the route has been identified as a cycle route,
+ * see NationalCycleRoute, OtherCycleRoute, part of a RecreationalRoute or as lying within an area of Access Land.
+ *
+ * Confirmed Allowable users: See NationalCycleRoute, OtherCycleRoute, part of a RecreationalRoute or as lying within an area of Access Land.
+ *
+ * Created by sadam on 16/02/15.
+ */
+public class None extends AbstractOsDpnOsmAttibuteMappingVisitor {
+
+    /**
+     * This code is written with the assumption that any further DPN elements that will override the bicycle=no will be processed after the rightOfWay element.
+     * This assumption is based on the current DPN xml structure. If this were to change in the future we would need to rethink how we process this rightOfWay.
+     */
+    @Override
+    protected void applyAttributes(Way way) {
+        way.setTag("foot", "no");
+        way.setTag("bicycle", "no");
+        way.setTag("horse", "no");
+    }
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/NormalPermissibleUses.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/NormalPermissibleUses.java
new file mode 100644
index 0000000000..339c3c8f87
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/NormalPermissibleUses.java
@@ -0,0 +1,23 @@
+package com.graphhopper.reader.osgb.dpn.rightOfWay;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
+
+/**
+ * Description: No known restrictions on pedestrians, cyclists or horses being ridden. Restrictions may apply to vehicles.
+ *
+ * Confirmed Allowable users: Pedestrians, Horses, Cyclists – used for public roads without a restriction
+ *
+ * @author phopkins
+ *
+ */
+public class NormalPermissibleUses  extends AbstractOsDpnOsmAttibuteMappingVisitor {
+
+    @Override
+    protected void applyAttributes(Way way) {
+        way.setTag("foot", "yes");
+        way.setTag("horse", "yes");
+        way.setTag("bicycle", "yes");
+    }
+
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/OtherRouteWithPublicAccess.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/OtherRouteWithPublicAccess.java
new file mode 100644
index 0000000000..acdfbcd5a3
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/OtherRouteWithPublicAccess.java
@@ -0,0 +1,24 @@
+package com.graphhopper.reader.osgb.dpn.rightOfWay;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
+
+/**
+ * Description: A route that is the responsibility of local highway authorities and maintained at public expense.
+ * All ORPAs have rights for pedestrians. Beyond that, any particular ORPA may, or may not, have rights for cyclists and equestrians,
+ * and may or may not have rights for motor vehicles. Other Routes with Public Access (ORPA) are sometimes known as unclassified
+ * unsurfaced roads (or unclassified country roads).
+ *
+ * Confirmed Allowable users: Pedestrians *
+ *
+ * * Other rights may exist; these will need to be determined from the local Highway Authority
+ *
+ * Created by sadam on 16/02/15.
+ */
+public class OtherRouteWithPublicAccess extends AbstractOsDpnOsmAttibuteMappingVisitor {
+    @Override
+    protected void applyAttributes(Way way)
+    {
+        way.setTag("foot", "yes");
+    }
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/PermissiveBridleWay.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/PermissiveBridleWay.java
similarity index 52%
rename from core/src/main/java/com/graphhopper/reader/osgb/dpn/PermissiveBridleWay.java
rename to core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/PermissiveBridleWay.java
index ae589aaca9..1f01b07fc0 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/PermissiveBridleWay.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/PermissiveBridleWay.java
@@ -1,8 +1,14 @@
-package com.graphhopper.reader.osgb.dpn;
+package com.graphhopper.reader.osgb.dpn.rightOfWay;
 
 import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
 
 /**
+ * Description: A route where the landowner has permitted travel on foot, on horseback or leading a horse and to ride a bicycle.
+ * This right may be withdrawn by the landowner.
+ *
+ * Confirmed Allowable users: Pedestrians, Horses, Cyclists
+ *
  * Created by sadam on 13/02/15.
  */
 public class PermissiveBridleWay extends AbstractOsDpnOsmAttibuteMappingVisitor {
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/PermissivePath.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/PermissivePath.java
new file mode 100644
index 0000000000..8413da9160
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/PermissivePath.java
@@ -0,0 +1,20 @@
+package com.graphhopper.reader.osgb.dpn.rightOfWay;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
+
+/**
+ * Description: A route where the landowner has permitted travel on foot. This right may be withdrawn by the landowner.
+ *
+ * Confirmed Allowable users: Pedestrians
+ *
+ * Created by sadam on 13/02/15.
+ */
+public class PermissivePath extends AbstractOsDpnOsmAttibuteMappingVisitor {
+
+    @Override
+    protected void applyAttributes(Way way) {
+        way.setTag("foot", "permissive");
+    }
+
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/RestrictedByway.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/RestrictedByway.java
new file mode 100644
index 0000000000..c6791c626e
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/RestrictedByway.java
@@ -0,0 +1,25 @@
+package com.graphhopper.reader.osgb.dpn.rightOfWay;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
+
+/**
+ * Description: A route open to all traffic except mechanically propelled vehicles. Formerly known as Road Used as Public Path (RUPP).
+ *
+ * Confirmed Allowable users: Pedestrians, Horses, Cyclists
+ *
+ * Created by sadam on 13/02/15.
+ */
+public class RestrictedByway extends AbstractOsDpnOsmAttibuteMappingVisitor {
+
+    @Override
+    protected void applyAttributes(Way way)
+    {
+        way.setTag("designation", "restricted_byway");
+        way.setTag("highway", "track");
+        way.setTag("motor_vehicle", "no");
+        way.setTag("foot", "yes");
+        way.setTag("horse", "yes");
+        way.setTag("bicycle", "yes");    }
+
+}
diff --git a/core/src/main/java/com/graphhopper/routing/util/FootFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/FootFlagEncoder.java
index 90508b7e50..0ad02dd6f2 100644
--- a/core/src/main/java/com/graphhopper/routing/util/FootFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/FootFlagEncoder.java
@@ -1,10 +1,10 @@
 /*
  *  Licensed to GraphHopper and Peter Karich under one or more contributor
- *  license agreements. See the NOTICE file distributed with this work for 
+ *  license agreements. See the NOTICE file distributed with this work for
  *  additional information regarding copyright ownership.
  *
- *  GraphHopper licenses this file to you under the Apache License, 
- *  Version 2.0 (the "License"); you may not use this file except in 
+ *  GraphHopper licenses this file to you under the Apache License,
+ *  Version 2.0 (the "License"); you may not use this file except in
  *  compliance with the License. You may obtain a copy of the License at
  *
  *       http://www.apache.org/licenses/LICENSE-2.0
@@ -17,9 +17,20 @@
  */
 package com.graphhopper.routing.util;
 
-import static com.graphhopper.routing.util.PriorityCode.*;
-
-import java.util.*;
+import static com.graphhopper.routing.util.PriorityCode.AVOID_AT_ALL_COSTS;
+import static com.graphhopper.routing.util.PriorityCode.AVOID_IF_POSSIBLE;
+import static com.graphhopper.routing.util.PriorityCode.BEST;
+import static com.graphhopper.routing.util.PriorityCode.PREFER;
+import static com.graphhopper.routing.util.PriorityCode.REACH_DEST;
+import static com.graphhopper.routing.util.PriorityCode.UNCHANGED;
+import static com.graphhopper.routing.util.PriorityCode.VERY_NICE;
+
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Map;
+import java.util.Set;
+import java.util.TreeMap;
 
 import com.graphhopper.reader.Relation;
 import com.graphhopper.reader.Way;
@@ -27,12 +38,12 @@
 /**
  * Defines bit layout for pedestrians (speed, access, surface, ...).
  * <p>
+ * 
  * @author Peter Karich
  * @author Nop
  * @author Karl Hübner
  */
-public class FootFlagEncoder extends AbstractFlagEncoder
-{
+public class FootFlagEncoder extends AbstractFlagEncoder {
     static final int SLOW_SPEED = 2;
     static final int MEAN_SPEED = 5;
     static final int FERRY_SPEED = 10;
@@ -48,20 +59,16 @@
     /**
      * Should be only instantiated via EncodingManager
      */
-    public FootFlagEncoder()
-    {
+    public FootFlagEncoder() {
         this(4, 1);
     }
 
-    public FootFlagEncoder( String propertiesStr )
-    {
-        this((int) parseLong(propertiesStr, "speedBits", 4),
-                parseDouble(propertiesStr, "speedFactor", 1));
+    public FootFlagEncoder(String propertiesStr) {
+        this((int) parseLong(propertiesStr, "speedBits", 4), parseDouble(propertiesStr, "speedFactor", 1));
         this.setBlockFords(parseBoolean(propertiesStr, "blockFords", true));
     }
 
-    public FootFlagEncoder( int speedBits, double speedFactor )
-    {
+    public FootFlagEncoder(int speedBits, double speedFactor) {
         super(speedBits, speedFactor, 0);
         restrictions.addAll(Arrays.asList("foot", "access"));
         restrictedValues.add("private");
@@ -100,7 +107,7 @@ public FootFlagEncoder( int speedBits, double speedFactor )
         avoidHighwayTags.add("tertiary");
         avoidHighwayTags.add("tertiary_link");
         // for now no explicit avoiding #257
-        //avoidHighwayTags.add("cycleway"); 
+        // avoidHighwayTags.add("cycleway");
 
         allowedHighwayTags.addAll(safeHighwayTags);
         allowedHighwayTags.addAll(avoidHighwayTags);
@@ -110,19 +117,22 @@ public FootFlagEncoder( int speedBits, double speedFactor )
         allowedHighwayTags.add("unclassified");
         allowedHighwayTags.add("road");
         // disallowed in some countries
-        //allowedHighwayTags.add("bridleway");
+        // allowedHighwayTags.add("bridleway");
 
+        // International Walking Network
         hikingNetworkToCode.put("iwn", BEST.getValue());
+        // National Walking Network
         hikingNetworkToCode.put("nwn", BEST.getValue());
+        // Regional Walking Network
         hikingNetworkToCode.put("rwn", VERY_NICE.getValue());
+        // Local Walking Network
         hikingNetworkToCode.put("lwn", VERY_NICE.getValue());
-        
+
         maxPossibleSpeed = FERRY_SPEED;
     }
 
     @Override
-    public int defineWayBits( int index, int shift )
-    {
+    public int defineWayBits(int index, int shift) {
         // first two bits are reserved for route handling in superclass
         shift = super.defineWayBits(index, shift);
         // larger value required - ferries are faster than pedestrians
@@ -135,8 +145,7 @@ public int defineWayBits( int index, int shift )
     }
 
     @Override
-    public int defineRelationBits( int index, int shift )
-    {
+    public int defineRelationBits(int index, int shift) {
         relationCodeEncoder = new EncodedValue("RelationCode", shift, 3, 1, 0, 7);
         return shift + relationCodeEncoder.getBits();
     }
@@ -145,52 +154,48 @@ public int defineRelationBits( int index, int shift )
      * Foot flag encoder does not provide any turn cost / restrictions
      */
     @Override
-    public int defineTurnBits( int index, int shift )
-    {
+    public int defineTurnBits(int index, int shift) {
         return shift;
     }
 
     /**
      * Foot flag encoder does not provide any turn cost / restrictions
      * <p>
+     * 
      * @return <code>false</code>
      */
     @Override
-    public boolean isTurnRestricted( long flag )
-    {
+    public boolean isTurnRestricted(long flag) {
         return false;
     }
 
     /**
      * Foot flag encoder does not provide any turn cost / restrictions
      * <p>
+     * 
      * @return 0
      */
     @Override
-    public double getTurnCost( long flag )
-    {
+    public double getTurnCost(long flag) {
         return 0;
     }
 
     @Override
-    public long getTurnFlags( boolean restricted, double costs )
-    {
+    public long getTurnFlags(boolean restricted, double costs) {
         return 0;
     }
 
     /**
      * Some ways are okay but not separate for pedestrians.
      * <p/>
+     * 
      * @param way
      */
     @Override
-    public long acceptWay( Way way )
-    {
+    public long acceptWay(Way way) {
         String highwayValue = way.getTag("highway");
-        if (highwayValue == null)
-        {
-            if (way.hasTag("route", ferries))
-            {
+        if (highwayValue == null) {
+            if (way.hasTag("route", ferries)) {
                 String footTag = way.getTag("foot");
                 if (footTag == null || "yes".equals(footTag))
                     return acceptBit | ferryBit;
@@ -204,11 +209,11 @@ public long acceptWay( Way way )
         }
 
         String sacScale = way.getTag("sac_scale");
-        if (sacScale != null)
-        {
+        if (sacScale != null) {
             if (!"hiking".equals(sacScale) && !"mountain_hiking".equals(sacScale)
                     && !"demanding_mountain_hiking".equals(sacScale) && !"alpine_hiking".equals(sacScale))
-                // other scales are too dangerous, see http://wiki.openstreetmap.org/wiki/Key:sac_scale
+                // other scales are too dangerous, see
+                // http://wiki.openstreetmap.org/wiki/Key:sac_scale
                 return 0;
         }
 
@@ -241,16 +246,13 @@ public long acceptWay( Way way )
     }
 
     @Override
-    public long handleRelationTags( Relation relation, long oldRelationFlags )
-    {
+    public long handleRelationTags(Relation relation, long oldRelationFlags) {
         int code = 0;
-        if (relation.hasTag("route", "hiking") || relation.hasTag("route", "foot"))
-        {
+        if (relation.hasTag("route", "hiking") || relation.hasTag("route", "foot")) {
             Integer val = hikingNetworkToCode.get(relation.getTag("network"));
             if (val != null)
                 code = val;
-        } else if (relation.hasTag("route", "ferry"))
-        {
+        } else if (relation.hasTag("route", "ferry")) {
             code = PriorityCode.AVOID_IF_POSSIBLE.getValue();
         }
 
@@ -261,23 +263,19 @@ public long handleRelationTags( Relation relation, long oldRelationFlags )
     }
 
     @Override
-    public long handleWayTags( Way way, long allowed, long relationFlags )
-    {
+    public long handleWayTags(Way way, long allowed, long relationFlags) {
         if (!isAccept(allowed))
             return 0;
 
         long encoded;
-        if (!isFerry(allowed))
-        {
+        if (!isFerry(allowed)) {
             String sacScale = way.getTag("sac_scale");
-            if (sacScale != null)
-            {
+            if (sacScale != null) {
                 if ("hiking".equals(sacScale))
                     encoded = speedEncoder.setDoubleValue(0, MEAN_SPEED);
                 else
                     encoded = speedEncoder.setDoubleValue(0, SLOW_SPEED);
-            } else
-            {
+            } else {
                 encoded = speedEncoder.setDoubleValue(0, MEAN_SPEED);
             }
             encoded |= directionBitMask;
@@ -289,63 +287,54 @@ public long handleWayTags( Way way, long allowed, long relationFlags )
             encoded = setLong(encoded, PriorityWeighting.KEY, handlePriority(way, priorityFromRelation));
 
             boolean isRoundabout = way.hasTag("junction", "roundabout");
-            if (isRoundabout)
-            {
+            if (isRoundabout) {
                 encoded = setBool(encoded, K_ROUNDABOUT, true);
             }
 
-        } else
-        {
+        } else {
             encoded = handleFerryTags(way, SLOW_SPEED, MEAN_SPEED, FERRY_SPEED);
             encoded |= directionBitMask;
         }
         long anno = super.handleWayTagsDecorators(way);
-        
-        return encoded|= anno;
+
+        return encoded |= anno;
     }
 
     @Override
-    public double getDouble( long flags, int key )
-    {
-        switch (key)
-        {
-            case PriorityWeighting.KEY:
-                double prio = preferWayEncoder.getValue(flags);
-                if (prio == 0)
-                    return (double) UNCHANGED.getValue() / BEST.getValue();
-
-                return prio / BEST.getValue();
-            default:
-                return super.getDouble(flags, key);
+    public double getDouble(long flags, int key) {
+        switch (key) {
+        case PriorityWeighting.KEY:
+            double prio = preferWayEncoder.getValue(flags);
+            if (prio == 0)
+                return (double) UNCHANGED.getValue() / BEST.getValue();
+
+            return prio / BEST.getValue();
+        default:
+            return super.getDouble(flags, key);
         }
     }
 
     @Override
-    public long getLong( long flags, int key )
-    {
-        switch (key)
-        {
-            case PriorityWeighting.KEY:
-                return preferWayEncoder.getValue(flags);
-            default:
-                return super.getLong(flags, key);
+    public long getLong(long flags, int key) {
+        switch (key) {
+        case PriorityWeighting.KEY:
+            return preferWayEncoder.getValue(flags);
+        default:
+            return super.getLong(flags, key);
         }
     }
 
     @Override
-    public long setLong( long flags, int key, long value )
-    {
-        switch (key)
-        {
-            case PriorityWeighting.KEY:
-                return preferWayEncoder.setValue(flags, value);
-            default:
-                return super.setLong(flags, key, value);
+    public long setLong(long flags, int key, long value) {
+        switch (key) {
+        case PriorityWeighting.KEY:
+            return preferWayEncoder.setValue(flags, value);
+        default:
+            return super.setLong(flags, key, value);
         }
     }
 
-    protected int handlePriority( Way way, int priorityFromRelation )
-    {
+    protected int handlePriority(Way way, int priorityFromRelation) {
         TreeMap<Double, Integer> weightToPrioMap = new TreeMap<Double, Integer>();
         if (priorityFromRelation == 0)
             weightToPrioMap.put(0d, UNCHANGED.getValue());
@@ -359,35 +348,32 @@ protected int handlePriority( Way way, int priorityFromRelation )
     }
 
     /**
-     * @param weightToPrioMap associate a weight with every priority. This sorted map allows
-     * subclasses to 'insert' more important priorities as well as overwrite determined priorities.
+     * @param weightToPrioMap
+     *            associate a weight with every priority. This sorted map allows
+     *            subclasses to 'insert' more important priorities as well as
+     *            overwrite determined priorities.
      */
-    void collect( Way way, TreeMap<Double, Integer> weightToPrioMap )
-    {
+    void collect(Way way, TreeMap<Double, Integer> weightToPrioMap) {
         String highway = way.getTag("highway");
         if (way.hasTag("foot", "designated"))
             weightToPrioMap.put(100d, PREFER.getValue());
 
         double maxSpeed = getMaxSpeed(way);
-        if (safeHighwayTags.contains(highway) || maxSpeed > 0 && maxSpeed <= 20)
-        {
+        if (safeHighwayTags.contains(highway) || maxSpeed > 0 && maxSpeed <= 20) {
             weightToPrioMap.put(40d, PREFER.getValue());
             if (way.hasTag("tunnel", intendedValues))
                 weightToPrioMap.put(40d, UNCHANGED.getValue());
         }
 
-        if (way.hasTag("bicycle", "official") || way.hasTag("bicycle", "designated"))
-        {
+        if (way.hasTag("bicycle", "official") || way.hasTag("bicycle", "designated")) {
             weightToPrioMap.put(44d, AVOID_IF_POSSIBLE.getValue());
         }
 
-        if (way.hasTag("sidewalk", sidewalks))
-        {
+        if (way.hasTag("sidewalk", sidewalks)) {
             weightToPrioMap.put(45d, PREFER.getValue());
         }
 
-        if (avoidHighwayTags.contains(highway) || maxSpeed > 50)
-        {
+        if (avoidHighwayTags.contains(highway) || maxSpeed > 50) {
             weightToPrioMap.put(50d, REACH_DEST.getValue());
 
             if (way.hasTag("tunnel", intendedValues))
@@ -396,8 +382,7 @@ void collect( Way way, TreeMap<Double, Integer> weightToPrioMap )
     }
 
     @Override
-    public boolean supports( Class<?> feature )
-    {
+    public boolean supports(Class<?> feature) {
         if (super.supports(feature))
             return true;
 
@@ -405,8 +390,7 @@ public boolean supports( Class<?> feature )
     }
 
     @Override
-    public String toString()
-    {
+    public String toString() {
         return "foot";
     }
 }
diff --git a/core/src/main/java/com/graphhopper/routing/util/MountainBikeFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/MountainBikeFlagEncoder.java
index da8fbc756d..a9e7ffc028 100644
--- a/core/src/main/java/com/graphhopper/routing/util/MountainBikeFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/MountainBikeFlagEncoder.java
@@ -1,10 +1,10 @@
 /*
  *  Licensed to GraphHopper and Peter Karich under one or more contributor
- *  license agreements. See the NOTICE file distributed with this work for 
+ *  license agreements. See the NOTICE file distributed with this work for
  *  additional information regarding copyright ownership.
  *
- *  GraphHopper licenses this file to you under the Apache License, 
- *  Version 2.0 (the "License"); you may not use this file except in 
+ *  GraphHopper licenses this file to you under the Apache License,
+ *  Version 2.0 (the "License"); you may not use this file except in
  *  compliance with the License. You may obtain a copy of the License at
  *
  *       http://www.apache.org/licenses/LICENSE-2.0
@@ -17,8 +17,6 @@
  */
 package com.graphhopper.routing.util;
 
-import static com.graphhopper.routing.util.BikeCommonFlagEncoder.PUSHING_SECTION_SPEED;
-
 import static com.graphhopper.routing.util.PriorityCode.BEST;
 import static com.graphhopper.routing.util.PriorityCode.PREFER;
 import static com.graphhopper.routing.util.PriorityCode.UNCHANGED;
@@ -26,41 +24,34 @@
 
 import java.util.TreeMap;
 
-import com.graphhopper.reader.OSMRelation;
-import com.graphhopper.reader.OSMWay;
-
 import com.graphhopper.reader.Relation;
 import com.graphhopper.reader.Way;
 
 /**
  * Specifies the settings for mountain biking
  * <p/>
+ * 
  * @author ratrun
  * @author Peter Karich
  */
-public class MountainBikeFlagEncoder extends BikeCommonFlagEncoder
-{
-    public MountainBikeFlagEncoder()
-    {
+public class MountainBikeFlagEncoder extends BikeCommonFlagEncoder {
+    public MountainBikeFlagEncoder() {
         this(4, 2, 0);
     }
 
-    public MountainBikeFlagEncoder( String propertiesStr )
-    {
-        this((int) parseLong(propertiesStr, "speedBits", 4),
-                parseDouble(propertiesStr, "speedFactor", 2),
+    public MountainBikeFlagEncoder(String propertiesStr) {
+        this((int) parseLong(propertiesStr, "speedBits", 4), parseDouble(propertiesStr, "speedFactor", 2),
                 parseBoolean(propertiesStr, "turnCosts", false) ? 3 : 0);
         this.setBlockFords(parseBoolean(propertiesStr, "blockFords", true));
     }
 
-    public MountainBikeFlagEncoder( int speedBits, double speedFactor, int maxTurnCosts )
-    {
+    public MountainBikeFlagEncoder(int speedBits, double speedFactor, int maxTurnCosts) {
         super(speedBits, speedFactor, maxTurnCosts);
         setTrackTypeSpeed("grade1", 18); // paved
         setTrackTypeSpeed("grade2", 16); // now unpaved ...
         setTrackTypeSpeed("grade3", 12);
         setTrackTypeSpeed("grade4", 8);
-        setTrackTypeSpeed("grade5", 6); // like sand/grass     
+        setTrackTypeSpeed("grade5", 6); // like sand/grass
 
         setSurfaceSpeed("paved", 18);
         setSurfaceSpeed("asphalt", 18);
@@ -115,10 +106,15 @@ public MountainBikeFlagEncoder( int speedBits, double speedFactor, int maxTurnCo
         addPushingSection("pedestrian");
         addPushingSection("steps");
 
+        // International Cycle Network
         setCyclingNetworkPreference("icn", PREFER.getValue());
+        // National Cycle Network
         setCyclingNetworkPreference("ncn", PREFER.getValue());
+        // Regional Cycle Network
         setCyclingNetworkPreference("rcn", PREFER.getValue());
+        // Local Cycle Network
         setCyclingNetworkPreference("lcn", PREFER.getValue());
+        // Mountain Bike
         setCyclingNetworkPreference("mtb", BEST.getValue());
 
         addPushingSection("footway");
@@ -141,13 +137,11 @@ public MountainBikeFlagEncoder( int speedBits, double speedFactor, int maxTurnCo
     }
 
     @Override
-    void collect( Way way, TreeMap<Double, Integer> weightToPrioMap )
-    {
+    void collect(Way way, TreeMap<Double, Integer> weightToPrioMap) {
         super.collect(way, weightToPrioMap);
 
         String highway = way.getTag("highway");
-        if ("track".equals(highway))
-        {
+        if ("track".equals(highway)) {
             String trackType = way.getTag("tracktype");
             if ("grade1".equals(trackType))
                 weightToPrioMap.put(50d, UNCHANGED.getValue());
@@ -159,8 +153,7 @@ else if (trackType.startsWith("grade"))
     }
 
     @Override
-    public long handleRelationTags( Relation relation, long oldRelationFlags )
-    {
+    public long handleRelationTags(Relation relation, long oldRelationFlags) {
         oldRelationFlags = super.handleRelationTags(relation, oldRelationFlags);
         int code = 0;
         if (relation.hasTag("route", "mtb"))
@@ -173,16 +166,15 @@ public long handleRelationTags( Relation relation, long oldRelationFlags )
     }
 
     @Override
-    boolean allowedSacScale( String sacScale )
-    {
-        // other scales are too dangerous even for MTB, see http://wiki.openstreetmap.org/wiki/Key:sac_scale
+    boolean allowedSacScale(String sacScale) {
+        // other scales are too dangerous even for MTB, see
+        // http://wiki.openstreetmap.org/wiki/Key:sac_scale
         return "hiking".equals(sacScale) || "mountain_hiking".equals(sacScale)
                 || "demanding_mountain_hiking".equals(sacScale) || "alpine_hiking".equals(sacScale);
     }
 
     @Override
-    public String toString()
-    {        
+    public String toString() {
         return "mtb";
     }
 }
diff --git a/core/src/main/java/com/graphhopper/routing/util/OsAvoidanceDecorator.java b/core/src/main/java/com/graphhopper/routing/util/OsAvoidanceDecorator.java
index 51f34582c6..f52c79346d 100644
--- a/core/src/main/java/com/graphhopper/routing/util/OsAvoidanceDecorator.java
+++ b/core/src/main/java/com/graphhopper/routing/util/OsAvoidanceDecorator.java
@@ -7,141 +7,133 @@
  */
 public class OsAvoidanceDecorator extends AbstractAvoidanceDecorator {
 
-	protected enum AvoidanceType implements EdgeAttribute {
-		ARoad(1) {
-			@Override
-			public boolean isValidForWay(Way way) {
-				return hasTag(way, "highway", "primary");
-			}
-		},
-		Boulders(2) {
-			@Override
-			public boolean isValidForWay(Way way) {
-				return hasTag(way, "natural", "boulders");
-			}
-		},
-		Cliff(4) {
-			@Override
-			public boolean isValidForWay(Way way) {
-				return hasTag(way, "natural", "cliff");
-			}
-		},
-		InlandWater(8) {
-			@Override
-			public boolean isValidForWay(Way way) {
-				return hasTag(way, "natural", "water")
-						&& way.hasTag("tidal", "no");
-			}
-		},
-		Marsh(16) {
-			@Override
-			public boolean isValidForWay(Way way) {
-				return way.hasTag("wetland", "marsh");
-			}
-		},
-		QuarryOrPit(32) {
-			@Override
-			public boolean isValidForWay(Way way) {
-				return hasTag(way, "natural", "excavation");
-			}
-		},
-		Scree(64) {
-			@Override
-			public boolean isValidForWay(Way way) {
-				return hasTag(way, "natural", "scree");
-			}
-		},
-		Rock(128) {
-			@Override
-			public boolean isValidForWay(Way way) {
-				return hasTag(way, "natural", "rock");
-			}
-		},
-		Mud(256) {
-			@Override
-			public boolean isValidForWay(Way way) {
-				return hasTag(way, "natural", "mud");
-			}
-		},
-		Sand(512) {
-			@Override
-			public boolean isValidForWay(Way way) {
-				return hasTag(way, "natural", "sand");
-			}
-		},
-
-		Shingle(1024) {
-			@Override
-			public boolean isValidForWay(Way way) {
-				return hasTag(way, "natural", "shingle");
-			}
-		}
-		 ,
-		 Spoil(2048) {
-		 @Override
-		 public boolean isValidForWay(Way way) {
-		 return hasTag(way, "natural", "spoil");
-		 }
-		 },
-		
-		 TidalWater(4096) {
-		 @Override
-		 public boolean isValidForWay(Way way) {
-		 return hasTag(way, "natural", "water")
-		 && way.hasTag("tidal", "yes");
-		 }
-		 }
-		;
-
-		public String toString() {
-			return super.toString().toLowerCase();
-		}
-
-		private static boolean hasTag(Way way, String key, String value) {
-			String wayTag = way.getTag(key);
-			if (null != wayTag) {
-				String[] values = wayTag.split(",");
-				for (String tvalue : values) {
-					if (tvalue.equals(value)) {
-						return true;
-					}
-				}
-			}
-			return false;
-		}
-
-		private final long value;
-
-		private AvoidanceType(long value) {
-			this.value = value;
-		}
-
-		public long getValue() {
-			return value;
-		}
-
-		public boolean isValidForWay(Way way) {
-			return false;
-		}
-
-		public boolean representedIn(String[] attributes) {
-			for (String attribute : attributes) {
-				if (attribute.equals(this.toString())) {
-					return true;
-				}
-			}
-			return false;
-		}
-
-	}
-
-	protected void defineEncoder(int shift) {
-		wayTypeEncoder = new EncodedValue("HazardType", shift, 14, 1, 0, 8191,
-				true);
-	}
-
-	protected EdgeAttribute[] getEdgeAttributesOfInterest() {
-		return AvoidanceType.values();
-	}
+    protected enum AvoidanceType implements EdgeAttribute {
+        ARoad(1) {
+            @Override
+            public boolean isValidForWay(Way way) {
+                return hasTag(way, "highway", "primary");
+            }
+        },
+        Boulders(2) {
+            @Override
+            public boolean isValidForWay(Way way) {
+                return hasTag(way, "natural", "boulders");
+            }
+        },
+        Cliff(4) {
+            @Override
+            public boolean isValidForWay(Way way) {
+                return hasTag(way, "natural", "cliff");
+            }
+        },
+        InlandWater(8) {
+            @Override
+            public boolean isValidForWay(Way way) {
+                return hasTag(way, "natural", "water") && hasTag(way, "tidal", "no");
+            }
+        },
+        Marsh(16) {
+            @Override
+            public boolean isValidForWay(Way way) {
+                return hasTag(way, "wetland", "marsh");
+            }
+        },
+        QuarryOrPit(32) {
+            @Override
+            public boolean isValidForWay(Way way) {
+                return hasTag(way, "natural", "excavation");
+            }
+        },
+        Scree(64) {
+            @Override
+            public boolean isValidForWay(Way way) {
+                return hasTag(way, "natural", "scree");
+            }
+        },
+        Rock(128) {
+            @Override
+            public boolean isValidForWay(Way way) {
+                return hasTag(way, "natural", "rock");
+            }
+        },
+        Mud(256) {
+            @Override
+            public boolean isValidForWay(Way way) {
+                return hasTag(way, "natural", "mud");
+            }
+        },
+        Sand(512) {
+            @Override
+            public boolean isValidForWay(Way way) {
+                return hasTag(way, "natural", "sand");
+            }
+        },
+
+        Shingle(1024) {
+            @Override
+            public boolean isValidForWay(Way way) {
+                return hasTag(way, "natural", "shingle");
+            }
+        },
+        Spoil(2048) {
+            @Override
+            public boolean isValidForWay(Way way) {
+                return hasTag(way, "natural", "spoil");
+            }
+        },
+
+        TidalWater(4096) {
+            @Override
+            public boolean isValidForWay(Way way) {
+                return hasTag(way, "natural", "water") && hasTag(way, "tidal", "yes");
+            }
+        };
+
+        @Override
+        public String toString() {
+            return super.toString().toLowerCase();
+        }
+
+        private static boolean hasTag(Way way, String key, String value) {
+            return OsFlagUtils.hasTag(way, key, value);
+        }
+
+        private final long value;
+
+        private AvoidanceType(long value) {
+            this.value = value;
+        }
+
+        @Override
+        public long getValue() {
+            return value;
+        }
+
+        @Override
+        public boolean isValidForWay(Way way) {
+            return false;
+        }
+
+        @Override
+        public boolean representedIn(String[] attributes) {
+            for (String attribute : attributes) {
+                if (attribute.equals(this.toString())) {
+                    return true;
+                }
+            }
+            return false;
+        }
+
+    }
+
+    @Override
+    protected void defineEncoder(int shift) {
+        wayTypeEncoder = new EncodedValue("HazardType", shift, 14, 1, 0, 8191, true);
+    }
+
+    @Override
+    protected EdgeAttribute[] getEdgeAttributesOfInterest() {
+        return AvoidanceType.values();
+    }
 
 }
diff --git a/core/src/main/java/com/graphhopper/routing/util/OsFlagUtils.java b/core/src/main/java/com/graphhopper/routing/util/OsFlagUtils.java
new file mode 100644
index 0000000000..b401d038b7
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/routing/util/OsFlagUtils.java
@@ -0,0 +1,35 @@
+package com.graphhopper.routing.util;
+
+import com.graphhopper.reader.Way;
+
+/**
+ * Utility class to contain more complex flag and tag operations
+ *
+ * @author phopkins
+ *
+ */
+public class OsFlagUtils {
+    public static boolean hasTag(Way way, String key, String value) {
+        String wayTag = way.getTag(key);
+        if (null != wayTag) {
+            String[] values = wayTag.split(",");
+            for (String tvalue : values) {
+                if (tvalue.equals(value)) {
+                    return true;
+                }
+            }
+        }
+        return false;
+    }
+
+    public static void setOrAppendTag(Way way, String key, String value) {
+        String currentValue = way.getTag(key);
+        if (currentValue != null) {
+            way.setTag(key, currentValue + "," + value);
+        } else {
+            // This is the first time we are adding it so just add it
+            way.setTag(key, value);
+        }
+    }
+
+}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/AbstractOsDpnReaderTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/AbstractOsDpnReaderTest.java
index 6b94b53417..a794e2dc3f 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/AbstractOsDpnReaderTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/AbstractOsDpnReaderTest.java
@@ -93,13 +93,14 @@ protected EncodingManager createEncodingManager() {
      *
      * @param graph
      * @param file
-     * @param maxWayPointDistance 0 disables DouglasPeuker simplification 1 = default
+     * @param maxWayPointDistance
+     *            0 disables DouglasPeuker simplification 1 = default
      * @return
      * @throws IOException
      */
     protected OsDpnReader readGraphFile(GraphHopperStorage graph, File file, int maxWayPointDistance)
             throws IOException {
-        OsDpnReader osDpnReader = new OsDpnReader(graph);
+        OsDpnReader osDpnReader = new OsDpnReader(graph, null);
         System.out.println("Read " + file.getAbsolutePath());
         osDpnReader.setOSMFile(file);
         osDpnReader.setWayPointMaxDistance(maxWayPointDistance);
@@ -108,12 +109,12 @@ protected OsDpnReader readGraphFile(GraphHopperStorage graph, File file, int max
         return osDpnReader;
     }
 
-    protected GraphHopperStorage configureStorage(
-            boolean turnRestrictionsImport, boolean is3D) {
+    protected GraphHopperStorage configureStorage(boolean turnRestrictionsImport, boolean is3D) {
         String directory = "/tmp";
-        GraphExtension extendedStorage = turnRestrictionsImport ? new TurnCostExtension() : new GraphExtension.NoExtendedStorage();
-        GraphHopperStorage graph = new GraphHopperStorage(new RAMDirectory(
-                directory, false), encodingManager, is3D, extendedStorage);
+        GraphExtension extendedStorage = turnRestrictionsImport ? new TurnCostExtension()
+                : new GraphExtension.NoExtendedStorage();
+        GraphHopperStorage graph = new GraphHopperStorage(new RAMDirectory(directory, false), encodingManager, is3D,
+                extendedStorage);
         footExplorer = graph.createEdgeExplorer(new DefaultEdgeFilter(footEncoder, false, true));
         return graph;
     }
@@ -128,20 +129,16 @@ protected int getEdge(int from, int to) {
         return EdgeIterator.NO_EDGE;
     }
 
-    protected void evaluateRouting(final EdgeIterator iter, final int node,
-            final boolean forward, final boolean backward,
-            final boolean finished) {
+    protected void evaluateRouting(final EdgeIterator iter, final int node, final boolean forward,
+            final boolean backward, final boolean finished) {
         evaluateRouting(iter, node, forward, backward, finished, footEncoder);
     }
 
-    protected void evaluateRouting(final EdgeIterator iter, final int node,
-            final boolean forward, final boolean backward,
-            final boolean finished, AbstractFlagEncoder flagEncoder) {
+    protected void evaluateRouting(final EdgeIterator iter, final int node, final boolean forward,
+            final boolean backward, final boolean finished, AbstractFlagEncoder flagEncoder) {
         assertEquals("Incorrect adjacent node", node, iter.getAdjNode());
-        assertEquals("Incorrect forward instructions", forward,
-                flagEncoder.isForward(iter.getFlags()));
-        assertEquals("Incorrect backward instructions", backward,
-                flagEncoder.isBackward(iter.getFlags()));
+        assertEquals("Incorrect forward instructions", forward, flagEncoder.isForward(iter.getFlags()));
+        assertEquals("Incorrect backward instructions", backward, flagEncoder.isBackward(iter.getFlags()));
         assertEquals(!finished, iter.next());
     }
 
@@ -149,8 +146,7 @@ protected void printNodes(EdgeExplorer outExplorer, int numNodes) {
         for (int i = 0; i < numNodes; i++) {
             // logger.info("Node " + i + " " +
             // count(outExplorer.setBaseNode(i)));
-            System.out.println("Node " + i + " "
-                    + count(outExplorer.setBaseNode(i)));
+            System.out.println("Node " + i + " " + count(outExplorer.setBaseNode(i)));
         }
 
         EdgeIterator iter = null;
@@ -163,30 +159,35 @@ protected void printNodes(EdgeExplorer outExplorer, int numNodes) {
         }
     }
 
-    protected InstructionList route(GraphHopper graphHopper, double lat1, double lon1, double lat2, double lon2, String avoid) {
+    protected InstructionList route(GraphHopper graphHopper, double lat1, double lon1, double lat2, double lon2,
+            String avoid) {
         GHPoint start = new GHPoint(lat1, lon1);
         GHPoint end = new GHPoint(lat2, lon2);
         System.out.println("Route from " + start + " to " + end);
         GHRequest ghRequest = new GHRequest(start, end);
         ghRequest.setVehicle("foot");
-        if(null!=avoid  && !Helper.isEmpty(avoid)) {
+        if (null != avoid && !Helper.isEmpty(avoid)) {
             ghRequest.setWeighting("fastavoid");
             ghRequest.getHints().put("avoidances", avoid);
         }
         GHResponse ghResponse = graphHopper.route(ghRequest);
-        //        System.err.println("ghResponse.getPoints() " + ghResponse.getPoints());
+        // System.err.println("ghResponse.getPoints() " +
+        // ghResponse.getPoints());
         InstructionList instructionList = ghResponse.getInstructions();
-        //        outputInstructionList(instructionList);
+        // outputInstructionList(instructionList);
         return instructionList;
     }
 
     protected void outputInstructionList(InstructionList instructionList) {
-        //        System.err.println("ghResponse.getInstructions() " + ghResponse.getInstructions());
-        //        System.err.println("ghResponse.getDebugInfo() " + ghResponse.getDebugInfo());
+        // System.err.println("ghResponse.getInstructions() " +
+        // ghResponse.getInstructions());
+        // System.err.println("ghResponse.getDebugInfo() " +
+        // ghResponse.getDebugInfo());
         System.out.println("Turn Descriptions:");
         Translation tr = new TranslationMap().doImport().getWithFallBack(Locale.US);
         for (Instruction instruction : instructionList) {
-            System.out.println("\t" + instruction.getName() + "\t" + instruction.getDistance() + "\t" + instruction.getSign() + "\t" + instruction.getTime() + "\t" + instruction.getTurnDescription(tr));
+            System.out.println("\t" + instruction.getName() + "\t" + instruction.getDistance() + "\t"
+                    + instruction.getSign() + "\t" + instruction.getTime() + "\t" + instruction.getTurnDescription(tr));
         }
         System.out.println("End Turn Descriptions");
 
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/ForeshoreTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/ForeshoreTest.java
deleted file mode 100644
index 72a91b7ad6..0000000000
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/ForeshoreTest.java
+++ /dev/null
@@ -1,34 +0,0 @@
-package com.graphhopper.reader.osgb.dpn;
-
-import static org.mockito.Mockito.verify;
-
-import org.junit.Before;
-import org.junit.BeforeClass;
-import org.junit.Test;
-import org.mockito.Mock;
-import org.mockito.MockitoAnnotations;
-
-import com.graphhopper.reader.Way;
-
-public class ForeshoreTest {
-	 static OsDpnOsmAttributeMappingVisitor visitor;
-	    @Mock
-	    Way way;
-
-	    @BeforeClass
-	    public static void createVisitor() {
-	        visitor = new Foreshore();
-	    }
-
-	    @Before
-	    public void init() {
-	        MockitoAnnotations.initMocks(this);
-	    }
-
-	    @Test
-	    public void testVisitWayAttribute() throws Exception {
-	        visitor.visitWayAttribute("foreshore", way);
-	        verify(way).setTag("water", "tidal");
-	    }
-
-}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/InlandWaterTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/InlandWaterTest.java
deleted file mode 100644
index 978b802f23..0000000000
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/InlandWaterTest.java
+++ /dev/null
@@ -1,34 +0,0 @@
-package com.graphhopper.reader.osgb.dpn;
-
-import static org.mockito.Mockito.verify;
-
-import org.junit.Before;
-import org.junit.BeforeClass;
-import org.junit.Test;
-import org.mockito.Mock;
-import org.mockito.MockitoAnnotations;
-
-import com.graphhopper.reader.Way;
-
-public class InlandWaterTest {
-	 static OsDpnOsmAttributeMappingVisitor visitor;
-	    @Mock
-	    Way way;
-
-	    @BeforeClass
-	    public static void createVisitor() {
-	        visitor = new InlandWater();
-	    }
-
-	    @Before
-	    public void init() {
-	        MockitoAnnotations.initMocks(this);
-	    }
-
-	    @Test
-	    public void testVisitWayAttribute() throws Exception {
-	        visitor.visitWayAttribute("inlandwater", way);
-	        verify(way).setTag("natural", "water");
-	    }
-
-}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/MarshTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/MarshTest.java
deleted file mode 100644
index 235cc06660..0000000000
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/MarshTest.java
+++ /dev/null
@@ -1,34 +0,0 @@
-package com.graphhopper.reader.osgb.dpn;
-
-import static org.mockito.Mockito.verify;
-
-import org.junit.Before;
-import org.junit.BeforeClass;
-import org.junit.Test;
-import org.mockito.Mock;
-import org.mockito.MockitoAnnotations;
-
-import com.graphhopper.reader.Way;
-
-public class MarshTest {
-	 static OsDpnOsmAttributeMappingVisitor visitor;
-	    @Mock
-	    Way way;
-
-	    @BeforeClass
-	    public static void createVisitor() {
-	        visitor = new Marsh();
-	    }
-
-	    @Before
-	    public void init() {
-	        MockitoAnnotations.initMocks(this);
-	    }
-
-	    @Test
-	    public void testVisitWayAttribute() throws Exception {
-	        visitor.visitWayAttribute("marsh", way);
-	        verify(way).setTag("wetland", "marsh");
-	    }
-
-}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/MudTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/MudTest.java
deleted file mode 100644
index 1e2d26979b..0000000000
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/MudTest.java
+++ /dev/null
@@ -1,34 +0,0 @@
-package com.graphhopper.reader.osgb.dpn;
-
-import static org.mockito.Mockito.verify;
-
-import org.junit.Before;
-import org.junit.BeforeClass;
-import org.junit.Test;
-import org.mockito.Mock;
-import org.mockito.MockitoAnnotations;
-
-import com.graphhopper.reader.Way;
-
-public class MudTest {
-	 static OsDpnOsmAttributeMappingVisitor visitor;
-	    @Mock
-	    Way way;
-
-	    @BeforeClass
-	    public static void createVisitor() {
-	        visitor = new Mud();
-	    }
-
-	    @Before
-	    public void init() {
-	        MockitoAnnotations.initMocks(this);
-	    }
-
-	    @Test
-	    public void testVisitWayAttribute() throws Exception {
-	        visitor.visitWayAttribute("mud", way);
-	        verify(way).setTag("natural", "mud");
-	    }
-
-}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/OsDpnWayTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/OsDpnWayTest.java
index 63a4657123..544b1d0fb9 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/OsDpnWayTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/OsDpnWayTest.java
@@ -13,591 +13,653 @@
 import org.opengis.referencing.FactoryException;
 import org.opengis.referencing.operation.TransformException;
 
+import com.graphhopper.reader.osgb.dpn.potentialHazards.InvalidPotentialHazardException;
+
 public class OsDpnWayTest {
 
-    public static final String aboveSurfaceWay = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">" +
-            "  <gml:featureMember>\n" +
-            "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">" +
-            "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n" +
-            "      <dpn:versionID>1</dpn:versionID>\n" +
-            "      <dpn:versionDate>2014-12-12</dpn:versionDate>\n" +
-            "      <dpn:startNode xlink:href=\"#df162dd8-c284-469b-81d6-d63105a39c7f\"/>\n" +
-            "      <dpn:endNode xlink:href=\"#56dc4c0b-0586-4849-b3e2-1e00ee149429\"/>\n" +
-            "      <dpn:descriptiveGroup codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork\">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>\n" +
-            "      <dpn:descriptiveTerm codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#NoPhysicalManifestation\">No Physical Manifestation</dpn:descriptiveTerm>\n" +
-            "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#Unmade\">Unmade</dpn:surfaceType>\n" +
-            "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#AboveSurfaceLevelOnStructure\">Above Surface Level On Structure</dpn:physicalLevel>\n" +
-            "      <dpn:name>Named Road</dpn:name>\n" +
-            "      <dpn:adoptedByNationalCycleRoute>false</dpn:adoptedByNationalCycleRoute>\n" +
-            "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n" +
-            "      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>\n" +
-            "      <dpn:withinAccessLand>true</dpn:withinAccessLand>\n" +
-            "      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>\n" +
-            "      <dpn:verticalGain>\n" +
-            "        <dpn:VerticalGainType>\n" +
-            "          <dpn:inDirection uom=\"m\">9</dpn:inDirection>\n" +
-            "          <dpn:againstDirection uom=\"m\">2</dpn:againstDirection>\n" +
-            "        </dpn:VerticalGainType>\n" +
-            "      </dpn:verticalGain>\n" +
-            "      <dpn:planimetricLength uom=\"m\">85</dpn:planimetricLength>\n" +
-            "      <dpn:surfaceLength uom=\"m\">86</dpn:surfaceLength>\n" +
-            "      <dpn:geometry>\n" +
-            "        <gml:LineString srsName=\"urn:ogc:def:crs:EPSG::7405\" gml:id=\"LOCAL_ID_29519\">\n" +
-            "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n" +
-            "        </gml:LineString>\n" +
-            "      </dpn:geometry>\n" +
-            "    </dpn:RouteLink>";
-    public static final String surfaceWay = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">" +
-            "  <gml:featureMember>\n" +
-            "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">" +
-            "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n" +
-            "      <dpn:versionID>1</dpn:versionID>\n" +
-            "      <dpn:versionDate>2014-12-12</dpn:versionDate>\n" +
-            "      <dpn:startNode xlink:href=\"#df162dd8-c284-469b-81d6-d63105a39c7f\"/>\n" +
-            "      <dpn:endNode xlink:href=\"#56dc4c0b-0586-4849-b3e2-1e00ee149429\"/>\n" +
-            "      <dpn:descriptiveGroup codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork\">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>\n" +
-            "      <dpn:descriptiveTerm codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#NoPhysicalManifestation\">No Physical Manifestation</dpn:descriptiveTerm>\n" +
-            "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#Unmade\">Unmade</dpn:surfaceType>\n" +
-            "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#SurfaceLevel\">Surface Level</dpn:physicalLevel>\n" +
-            "      <dpn:name>Named Road</dpn:name>\n" +
-            "      <dpn:adoptedByNationalCycleRoute>false</dpn:adoptedByNationalCycleRoute>\n" +
-            "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n" +
-            "      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>\n" +
-            "      <dpn:withinAccessLand>true</dpn:withinAccessLand>\n" +
-            "      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>\n" +
-            "      <dpn:verticalGain>\n" +
-            "        <dpn:VerticalGainType>\n" +
-            "          <dpn:inDirection uom=\"m\">9</dpn:inDirection>\n" +
-            "          <dpn:againstDirection uom=\"m\">2</dpn:againstDirection>\n" +
-            "        </dpn:VerticalGainType>\n" +
-            "      </dpn:verticalGain>\n" +
-            "      <dpn:planimetricLength uom=\"m\">85</dpn:planimetricLength>\n" +
-            "      <dpn:surfaceLength uom=\"m\">86</dpn:surfaceLength>\n" +
-            "      <dpn:geometry>\n" +
-            "        <gml:LineString srsName=\"urn:ogc:def:crs:EPSG::7405\" gml:id=\"LOCAL_ID_29519\">\n" +
-            "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n" +
-            "        </gml:LineString>\n" +
-            "      </dpn:geometry>\n" +
-            "    </dpn:RouteLink>";
-    public static final String tunnelWay = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">" +
-            "  <gml:featureMember>\n" +
-            "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">" +
-            "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n" +
-            "      <dpn:versionID>1</dpn:versionID>\n" +
-            "      <dpn:versionDate>2014-12-12</dpn:versionDate>\n" +
-            "      <dpn:startNode xlink:href=\"#df162dd8-c284-469b-81d6-d63105a39c7f\"/>\n" +
-            "      <dpn:endNode xlink:href=\"#56dc4c0b-0586-4849-b3e2-1e00ee149429\"/>\n" +
-            "      <dpn:descriptiveGroup codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork\">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>\n" +
-            "      <dpn:descriptiveTerm codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#NoPhysicalManifestation\">No Physical Manifestation</dpn:descriptiveTerm>\n" +
-            "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#Unmade\">Unmade</dpn:surfaceType>\n" +
-            "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#BelowSurfaceLevelTunnel\">Below Surface Level Tunnel</dpn:physicalLevel>\n" +
-            "      <dpn:name>Named Road</dpn:name>\n" +
-            "      <dpn:adoptedByNationalCycleRoute>false</dpn:adoptedByNationalCycleRoute>\n" +
-            "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n" +
-            "      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>\n" +
-            "      <dpn:withinAccessLand>true</dpn:withinAccessLand>\n" +
-            "      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>\n" +
-            "      <dpn:verticalGain>\n" +
-            "        <dpn:VerticalGainType>\n" +
-            "          <dpn:inDirection uom=\"m\">9</dpn:inDirection>\n" +
-            "          <dpn:againstDirection uom=\"m\">2</dpn:againstDirection>\n" +
-            "        </dpn:VerticalGainType>\n" +
-            "      </dpn:verticalGain>\n" +
-            "      <dpn:planimetricLength uom=\"m\">85</dpn:planimetricLength>\n" +
-            "      <dpn:surfaceLength uom=\"m\">86</dpn:surfaceLength>\n" +
-            "      <dpn:geometry>\n" +
-            "        <gml:LineString srsName=\"urn:ogc:def:crs:EPSG::7405\" gml:id=\"LOCAL_ID_29519\">\n" +
-            "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n" +
-            "        </gml:LineString>\n" +
-            "      </dpn:geometry>\n" +
-            "    </dpn:RouteLink>";
-
-    public static final String bridleWay = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">" +
-            "  <gml:featureMember>\n" +
-            "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">" +
-            "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n" +
-            "      <dpn:versionID>1</dpn:versionID>\n" +
-            "      <dpn:versionDate>2014-12-12</dpn:versionDate>\n" +
-            "      <dpn:startNode xlink:href=\"#df162dd8-c284-469b-81d6-d63105a39c7f\"/>\n" +
-            "      <dpn:endNode xlink:href=\"#56dc4c0b-0586-4849-b3e2-1e00ee149429\"/>\n" +
-            "      <dpn:descriptiveGroup codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork\">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>\n" +
-            "      <dpn:descriptiveTerm codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#NoPhysicalManifestation\">No Physical Manifestation</dpn:descriptiveTerm>\n" +
-            "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#Unmade\">Unmade</dpn:surfaceType>\n" +
-            "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#BelowSurfaceLevelTunnel\">Below Surface Level Tunnel</dpn:physicalLevel>\n" +
-            "      <dpn:name>Named Road</dpn:name>\n" +
-            "      <dpn:rightOfUse>Bridleway</dpn:rightOfUse>\n" +
-            "      <dpn:adoptedByNationalCycleRoute>false</dpn:adoptedByNationalCycleRoute>\n" +
-            "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n" +
-            "      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>\n" +
-            "      <dpn:withinAccessLand>true</dpn:withinAccessLand>\n" +
-            "      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>\n" +
-            "      <dpn:verticalGain>\n" +
-            "        <dpn:VerticalGainType>\n" +
-            "          <dpn:inDirection uom=\"m\">9</dpn:inDirection>\n" +
-            "          <dpn:againstDirection uom=\"m\">2</dpn:againstDirection>\n" +
-            "        </dpn:VerticalGainType>\n" +
-            "      </dpn:verticalGain>\n" +
-            "      <dpn:planimetricLength uom=\"m\">85</dpn:planimetricLength>\n" +
-            "      <dpn:surfaceLength uom=\"m\">86</dpn:surfaceLength>\n" +
-            "      <dpn:geometry>\n" +
-            "        <gml:LineString srsName=\"urn:ogc:def:crs:EPSG::7405\" gml:id=\"LOCAL_ID_29519\">\n" +
-            "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n" +
-            "        </gml:LineString>\n" +
-            "      </dpn:geometry>\n" +
-            "    </dpn:RouteLink>";
-    public static final String restrictedByWay = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">" +
-            "  <gml:featureMember>\n" +
-            "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">" +
-            "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n" +
-            "      <dpn:versionID>1</dpn:versionID>\n" +
-            "      <dpn:versionDate>2014-12-12</dpn:versionDate>\n" +
-            "      <dpn:startNode xlink:href=\"#df162dd8-c284-469b-81d6-d63105a39c7f\"/>\n" +
-            "      <dpn:endNode xlink:href=\"#56dc4c0b-0586-4849-b3e2-1e00ee149429\"/>\n" +
-            "      <dpn:descriptiveGroup codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork\">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>\n" +
-            "      <dpn:descriptiveTerm codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#NoPhysicalManifestation\">No Physical Manifestation</dpn:descriptiveTerm>\n" +
-            "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#Unmade\">Unmade</dpn:surfaceType>\n" +
-            "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#BelowSurfaceLevelTunnel\">Below Surface Level Tunnel</dpn:physicalLevel>\n" +
-            "      <dpn:name>Named Road</dpn:name>\n" +
-            "      <dpn:rightOfUse>Restricted Byway</dpn:rightOfUse>\n" +
-            "      <dpn:adoptedByNationalCycleRoute>false</dpn:adoptedByNationalCycleRoute>\n" +
-            "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n" +
-            "      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>\n" +
-            "      <dpn:withinAccessLand>true</dpn:withinAccessLand>\n" +
-            "      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>\n" +
-            "      <dpn:verticalGain>\n" +
-            "        <dpn:VerticalGainType>\n" +
-            "          <dpn:inDirection uom=\"m\">9</dpn:inDirection>\n" +
-            "          <dpn:againstDirection uom=\"m\">2</dpn:againstDirection>\n" +
-            "        </dpn:VerticalGainType>\n" +
-            "      </dpn:verticalGain>\n" +
-            "      <dpn:planimetricLength uom=\"m\">85</dpn:planimetricLength>\n" +
-            "      <dpn:surfaceLength uom=\"m\">86</dpn:surfaceLength>\n" +
-            "      <dpn:geometry>\n" +
-            "        <gml:LineString srsName=\"urn:ogc:def:crs:EPSG::7405\" gml:id=\"LOCAL_ID_29519\">\n" +
-            "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n" +
-            "        </gml:LineString>\n" +
-            "      </dpn:geometry>\n" +
-            "    </dpn:RouteLink>";
-    public static final String hazardMud = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">" +
-            "  <gml:featureMember>\n" +
-            "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">" +
-            "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n" +
-            "      <dpn:versionID>1</dpn:versionID>\n" +
-            "      <dpn:versionDate>2014-12-12</dpn:versionDate>\n" +
-            "      <dpn:startNode xlink:href=\"#df162dd8-c284-469b-81d6-d63105a39c7f\"/>\n" +
-            "      <dpn:endNode xlink:href=\"#56dc4c0b-0586-4849-b3e2-1e00ee149429\"/>\n" +
-            "      <dpn:descriptiveGroup codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork\">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>\n" +
-            "      <dpn:descriptiveTerm codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#NoPhysicalManifestation\">No Physical Manifestation</dpn:descriptiveTerm>\n" +
-            "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#Unmade\">Unmade</dpn:surfaceType>\n" +
-            "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#BelowSurfaceLevelTunnel\">Below Surface Level Tunnel</dpn:physicalLevel>\n" +
-            "      <dpn:name>Named Road</dpn:name>\n" +
-            "      <dpn:rightOfUse>Restricted Byway</dpn:rightOfUse>\n" +
-            "      <dpn:potentialHazardCrossed>Mud</dpn:potentialHazardCrossed>\n" +
-            "      <dpn:adoptedByNationalCycleRoute>false</dpn:adoptedByNationalCycleRoute>\n" +
-            "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n" +
-            "      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>\n" +
-            "      <dpn:withinAccessLand>true</dpn:withinAccessLand>\n" +
-            "      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>\n" +
-            "      <dpn:verticalGain>\n" +
-            "        <dpn:VerticalGainType>\n" +
-            "          <dpn:inDirection uom=\"m\">9</dpn:inDirection>\n" +
-            "          <dpn:againstDirection uom=\"m\">2</dpn:againstDirection>\n" +
-            "        </dpn:VerticalGainType>\n" +
-            "      </dpn:verticalGain>\n" +
-            "      <dpn:planimetricLength uom=\"m\">85</dpn:planimetricLength>\n" +
-            "      <dpn:surfaceLength uom=\"m\">86</dpn:surfaceLength>\n" +
-            "      <dpn:geometry>\n" +
-            "        <gml:LineString srsName=\"urn:ogc:def:crs:EPSG::7405\" gml:id=\"LOCAL_ID_29519\">\n" +
-            "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n" +
-            "        </gml:LineString>\n" +
-            "      </dpn:geometry>\n" +
-            "    </dpn:RouteLink>";
-    
-
-    public static final String madeSealed = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">" +
-            "  <gml:featureMember>\n" +
-            "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">" +
-            "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n" +
-            "      <dpn:versionID>1</dpn:versionID>\n" +
-            "      <dpn:versionDate>2014-12-12</dpn:versionDate>\n" +
-            "      <dpn:startNode xlink:href=\"#df162dd8-c284-469b-81d6-d63105a39c7f\"/>\n" +
-            "      <dpn:endNode xlink:href=\"#56dc4c0b-0586-4849-b3e2-1e00ee149429\"/>\n" +
-            "      <dpn:descriptiveGroup codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork\">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>\n" +
-            "      <dpn:descriptiveTerm codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#NoPhysicalManifestation\">No Physical Manifestation</dpn:descriptiveTerm>\n" +
-            "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#MadeSealed\">Made Sealed</dpn:surfaceType>\n" +
-            "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#BelowSurfaceLevelTunnel\">Below Surface Level Tunnel</dpn:physicalLevel>\n" +
-            "      <dpn:name>Named Road</dpn:name>\n" +
-            "      <dpn:rightOfUse>Restricted Byway</dpn:rightOfUse>\n" +
-            "      <dpn:adoptedByNationalCycleRoute>false</dpn:adoptedByNationalCycleRoute>\n" +
-            "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n" +
-            "      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>\n" +
-            "      <dpn:withinAccessLand>true</dpn:withinAccessLand>\n" +
-            "      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>\n" +
-            "      <dpn:verticalGain>\n" +
-            "        <dpn:VerticalGainType>\n" +
-            "          <dpn:inDirection uom=\"m\">9</dpn:inDirection>\n" +
-            "          <dpn:againstDirection uom=\"m\">2</dpn:againstDirection>\n" +
-            "        </dpn:VerticalGainType>\n" +
-            "      </dpn:verticalGain>\n" +
-            "      <dpn:planimetricLength uom=\"m\">85</dpn:planimetricLength>\n" +
-            "      <dpn:surfaceLength uom=\"m\">86</dpn:surfaceLength>\n" +
-            "      <dpn:geometry>\n" +
-            "        <gml:LineString srsName=\"urn:ogc:def:crs:EPSG::7405\" gml:id=\"LOCAL_ID_29519\">\n" +
-            "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n" +
-            "        </gml:LineString>\n" +
-            "      </dpn:geometry>\n" +
-            "    </dpn:RouteLink>";
-
-    public static final String madeUnsealed = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">" +
-            "  <gml:featureMember>\n" +
-            "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">" +
-            "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n" +
-            "      <dpn:versionID>1</dpn:versionID>\n" +
-            "      <dpn:versionDate>2014-12-12</dpn:versionDate>\n" +
-            "      <dpn:startNode xlink:href=\"#df162dd8-c284-469b-81d6-d63105a39c7f\"/>\n" +
-            "      <dpn:endNode xlink:href=\"#56dc4c0b-0586-4849-b3e2-1e00ee149429\"/>\n" +
-            "      <dpn:descriptiveGroup codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork\">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>\n" +
-            "      <dpn:descriptiveTerm codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#NoPhysicalManifestation\">No Physical Manifestation</dpn:descriptiveTerm>\n" +
-            "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#MadeUnsealed\">Made Unsealed</dpn:surfaceType>\n" +
-            "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#BelowSurfaceLevelTunnel\">Below Surface Level Tunnel</dpn:physicalLevel>\n" +
-            "      <dpn:name>Named Road</dpn:name>\n" +
-            "      <dpn:rightOfUse>Restricted Byway</dpn:rightOfUse>\n" +
-            "      <dpn:adoptedByNationalCycleRoute>false</dpn:adoptedByNationalCycleRoute>\n" +
-            "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n" +
-            "      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>\n" +
-            "      <dpn:withinAccessLand>true</dpn:withinAccessLand>\n" +
-            "      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>\n" +
-            "      <dpn:verticalGain>\n" +
-            "        <dpn:VerticalGainType>\n" +
-            "          <dpn:inDirection uom=\"m\">9</dpn:inDirection>\n" +
-            "          <dpn:againstDirection uom=\"m\">2</dpn:againstDirection>\n" +
-            "        </dpn:VerticalGainType>\n" +
-            "      </dpn:verticalGain>\n" +
-            "      <dpn:planimetricLength uom=\"m\">85</dpn:planimetricLength>\n" +
-            "      <dpn:surfaceLength uom=\"m\">86</dpn:surfaceLength>\n" +
-            "      <dpn:geometry>\n" +
-            "        <gml:LineString srsName=\"urn:ogc:def:crs:EPSG::7405\" gml:id=\"LOCAL_ID_29519\">\n" +
-            "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n" +
-            "        </gml:LineString>\n" +
-            "      </dpn:geometry>\n" +
-            "    </dpn:RouteLink>";
-
-    public static final String madeUnknown = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">" +
-            "  <gml:featureMember>\n" +
-            "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">" +
-            "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n" +
-            "      <dpn:versionID>1</dpn:versionID>\n" +
-            "      <dpn:versionDate>2014-12-12</dpn:versionDate>\n" +
-            "      <dpn:startNode xlink:href=\"#df162dd8-c284-469b-81d6-d63105a39c7f\"/>\n" +
-            "      <dpn:endNode xlink:href=\"#56dc4c0b-0586-4849-b3e2-1e00ee149429\"/>\n" +
-            "      <dpn:descriptiveGroup codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork\">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>\n" +
-            "      <dpn:descriptiveTerm codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#NoPhysicalManifestation\">No Physical Manifestation</dpn:descriptiveTerm>\n" +
-            "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#MadeUnknown\">Made Unknown</dpn:surfaceType>\n" +
-            "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#BelowSurfaceLevelTunnel\">Below Surface Level Tunnel</dpn:physicalLevel>\n" +
-            "      <dpn:name>Named Road</dpn:name>\n" +
-            "      <dpn:rightOfUse>Restricted Byway</dpn:rightOfUse>\n" +
-            "      <dpn:adoptedByNationalCycleRoute>false</dpn:adoptedByNationalCycleRoute>\n" +
-            "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n" +
-            "      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>\n" +
-            "      <dpn:withinAccessLand>true</dpn:withinAccessLand>\n" +
-            "      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>\n" +
-            "      <dpn:verticalGain>\n" +
-            "        <dpn:VerticalGainType>\n" +
-            "          <dpn:inDirection uom=\"m\">9</dpn:inDirection>\n" +
-            "          <dpn:againstDirection uom=\"m\">2</dpn:againstDirection>\n" +
-            "        </dpn:VerticalGainType>\n" +
-            "      </dpn:verticalGain>\n" +
-            "      <dpn:planimetricLength uom=\"m\">85</dpn:planimetricLength>\n" +
-            "      <dpn:surfaceLength uom=\"m\">86</dpn:surfaceLength>\n" +
-            "      <dpn:geometry>\n" +
-            "        <gml:LineString srsName=\"urn:ogc:def:crs:EPSG::7405\" gml:id=\"LOCAL_ID_29519\">\n" +
-            "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n" +
-            "        </gml:LineString>\n" +
-            "      </dpn:geometry>\n" +
-            "    </dpn:RouteLink>";
-
-    public static final String unmadeNoPhysicalButWithinAccessLand = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">" +
-            "  <gml:featureMember>\n" +
-            "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">" +
-            "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n" +
-            "      <dpn:versionID>1</dpn:versionID>\n" +
-            "      <dpn:versionDate>2014-12-12</dpn:versionDate>\n" +
-            "      <dpn:startNode xlink:href=\"#df162dd8-c284-469b-81d6-d63105a39c7f\"/>\n" +
-            "      <dpn:endNode xlink:href=\"#56dc4c0b-0586-4849-b3e2-1e00ee149429\"/>\n" +
-            "      <dpn:descriptiveGroup codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork\">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>\n" +
-            "      <dpn:descriptiveTerm codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#NoPhysicalManifestation\">No Physical Manifestation</dpn:descriptiveTerm>\n" +
-            "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#Unmade\">Unmade</dpn:surfaceType>\n" +
-            "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#BelowSurfaceLevelTunnel\">Below Surface Level Tunnel</dpn:physicalLevel>\n" +
-            "      <dpn:name>Named Road</dpn:name>\n" +
-            "      <dpn:adoptedByNationalCycleRoute>false</dpn:adoptedByNationalCycleRoute>\n" +
-            "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n" +
-            "      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>\n" +
-            "      <dpn:withinAccessLand>true</dpn:withinAccessLand>\n" +
-            "      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>\n" +
-            "      <dpn:verticalGain>\n" +
-            "        <dpn:VerticalGainType>\n" +
-            "          <dpn:inDirection uom=\"m\">9</dpn:inDirection>\n" +
-            "          <dpn:againstDirection uom=\"m\">2</dpn:againstDirection>\n" +
-            "        </dpn:VerticalGainType>\n" +
-            "      </dpn:verticalGain>\n" +
-            "      <dpn:planimetricLength uom=\"m\">85</dpn:planimetricLength>\n" +
-            "      <dpn:surfaceLength uom=\"m\">86</dpn:surfaceLength>\n" +
-            "      <dpn:geometry>\n" +
-            "        <gml:LineString srsName=\"urn:ogc:def:crs:EPSG::7405\" gml:id=\"LOCAL_ID_29519\">\n" +
-            "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n" +
-            "        </gml:LineString>\n" +
-            "      </dpn:geometry>\n" +
-            "    </dpn:RouteLink>";
-
-    public static final String adoptedNationalCycleRoute = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">" +
-            "  <gml:featureMember>\n" +
-            "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">" +
-            "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n" +
-            "      <dpn:versionID>1</dpn:versionID>\n" +
-            "      <dpn:versionDate>2014-12-12</dpn:versionDate>\n" +
-            "      <dpn:startNode xlink:href=\"#df162dd8-c284-469b-81d6-d63105a39c7f\"/>\n" +
-            "      <dpn:endNode xlink:href=\"#56dc4c0b-0586-4849-b3e2-1e00ee149429\"/>\n" +
-            "      <dpn:descriptiveGroup codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork\">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>\n" +
-            "      <dpn:descriptiveTerm codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#NoPhysicalManifestation\">No Physical Manifestation</dpn:descriptiveTerm>\n" +
-            "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#Unmade\">Unmade</dpn:surfaceType>\n" +
-            "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#BelowSurfaceLevelTunnel\">Below Surface Level Tunnel</dpn:physicalLevel>\n" +
-            "      <dpn:name>Named Road</dpn:name>\n" +
-            "      <dpn:adoptedByNationalCycleRoute>true</dpn:adoptedByNationalCycleRoute>\n" +
-            "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n" +
-            "      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>\n" +
-            "      <dpn:withinAccessLand>true</dpn:withinAccessLand>\n" +
-            "      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>\n" +
-            "      <dpn:verticalGain>\n" +
-            "        <dpn:VerticalGainType>\n" +
-            "          <dpn:inDirection uom=\"m\">9</dpn:inDirection>\n" +
-            "          <dpn:againstDirection uom=\"m\">2</dpn:againstDirection>\n" +
-            "        </dpn:VerticalGainType>\n" +
-            "      </dpn:verticalGain>\n" +
-            "      <dpn:planimetricLength uom=\"m\">85</dpn:planimetricLength>\n" +
-            "      <dpn:surfaceLength uom=\"m\">86</dpn:surfaceLength>\n" +
-            "      <dpn:geometry>\n" +
-            "        <gml:LineString srsName=\"urn:ogc:def:crs:EPSG::7405\" gml:id=\"LOCAL_ID_29519\">\n" +
-            "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n" +
-            "        </gml:LineString>\n" +
-            "      </dpn:geometry>\n" +
-            "    </dpn:RouteLink>";
-
-    public static final String adoptedOtherCycleRoute = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">" +
-            "  <gml:featureMember>\n" +
-            "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">" +
-            "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n" +
-            "      <dpn:versionID>1</dpn:versionID>\n" +
-            "      <dpn:versionDate>2014-12-12</dpn:versionDate>\n" +
-            "      <dpn:startNode xlink:href=\"#df162dd8-c284-469b-81d6-d63105a39c7f\"/>\n" +
-            "      <dpn:endNode xlink:href=\"#56dc4c0b-0586-4849-b3e2-1e00ee149429\"/>\n" +
-            "      <dpn:descriptiveGroup codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork\">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>\n" +
-            "      <dpn:descriptiveTerm codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#NoPhysicalManifestation\">No Physical Manifestation</dpn:descriptiveTerm>\n" +
-            "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#Unmade\">Unmade</dpn:surfaceType>\n" +
-            "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#BelowSurfaceLevelTunnel\">Below Surface Level Tunnel</dpn:physicalLevel>\n" +
-            "      <dpn:name>Named Road</dpn:name>\n" +
-            "      <dpn:adoptedByNationalCycleRoute>true</dpn:adoptedByNationalCycleRoute>\n" +
-            "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n" +
-            "      <dpn:adoptedByOtherCycleRoute>true</dpn:adoptedByOtherCycleRoute>\n" +
-            "      <dpn:withinAccessLand>true</dpn:withinAccessLand>\n" +
-            "      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>\n" +
-            "      <dpn:verticalGain>\n" +
-            "        <dpn:VerticalGainType>\n" +
-            "          <dpn:inDirection uom=\"m\">9</dpn:inDirection>\n" +
-            "          <dpn:againstDirection uom=\"m\">2</dpn:againstDirection>\n" +
-            "        </dpn:VerticalGainType>\n" +
-            "      </dpn:verticalGain>\n" +
-            "      <dpn:planimetricLength uom=\"m\">85</dpn:planimetricLength>\n" +
-            "      <dpn:surfaceLength uom=\"m\">86</dpn:surfaceLength>\n" +
-            "      <dpn:geometry>\n" +
-            "        <gml:LineString srsName=\"urn:ogc:def:crs:EPSG::7405\" gml:id=\"LOCAL_ID_29519\">\n" +
-            "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n" +
-            "        </gml:LineString>\n" +
-            "      </dpn:geometry>\n" +
-            "    </dpn:RouteLink>";
-    
-    public static final String aRoad = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">" +
-            "  <gml:featureMember>\n" +
-            "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">" +
-            "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n" +
-            "      <dpn:versionID>1</dpn:versionID>\n" +
-            "      <dpn:versionDate>2014-12-12</dpn:versionDate>\n" +
-            "      <dpn:startNode xlink:href=\"#df162dd8-c284-469b-81d6-d63105a39c7f\"/>\n" +
-            "      <dpn:endNode xlink:href=\"#56dc4c0b-0586-4849-b3e2-1e00ee149429\"/>\n" +
-            "      <dpn:descriptiveGroup codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork\">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>\n" +
-            "      <dpn:descriptiveTerm codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#ARoad\">A Road</dpn:descriptiveTerm>\n" +
-            "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#Unmade\">Unmade</dpn:surfaceType>\n" +
-            "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#BelowSurfaceLevelTunnel\">Below Surface Level Tunnel</dpn:physicalLevel>\n" +
-            "      <dpn:name>Named Road</dpn:name>\n" +
-            "      <dpn:adoptedByNationalCycleRoute>false</dpn:adoptedByNationalCycleRoute>\n" +
-            "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n" +
-            "      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>\n" +
-            "      <dpn:withinAccessLand>true</dpn:withinAccessLand>\n" +
-            "      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>\n" +
-            "      <dpn:verticalGain>\n" +
-            "        <dpn:VerticalGainType>\n" +
-            "          <dpn:inDirection uom=\"m\">9</dpn:inDirection>\n" +
-            "          <dpn:againstDirection uom=\"m\">2</dpn:againstDirection>\n" +
-            "        </dpn:VerticalGainType>\n" +
-            "      </dpn:verticalGain>\n" +
-            "      <dpn:planimetricLength uom=\"m\">85</dpn:planimetricLength>\n" +
-            "      <dpn:surfaceLength uom=\"m\">86</dpn:surfaceLength>\n" +
-            "      <dpn:geometry>\n" +
-            "        <gml:LineString srsName=\"urn:ogc:def:crs:EPSG::7405\" gml:id=\"LOCAL_ID_29519\">\n" +
-            "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n" +
-            "        </gml:LineString>\n" +
-            "      </dpn:geometry>\n" +
-            "    </dpn:RouteLink>";
-    
-    public static final String bRoad = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">" +
-            "  <gml:featureMember>\n" +
-            "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">" +
-            "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n" +
-            "      <dpn:versionID>1</dpn:versionID>\n" +
-            "      <dpn:versionDate>2014-12-12</dpn:versionDate>\n" +
-            "      <dpn:startNode xlink:href=\"#df162dd8-c284-469b-81d6-d63105a39c7f\"/>\n" +
-            "      <dpn:endNode xlink:href=\"#56dc4c0b-0586-4849-b3e2-1e00ee149429\"/>\n" +
-            "      <dpn:descriptiveGroup codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork\">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>\n" +
-            "      <dpn:descriptiveTerm codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#BRoad\">B Road</dpn:descriptiveTerm>\n" +
-            "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#Unmade\">Unmade</dpn:surfaceType>\n" +
-            "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#BelowSurfaceLevelTunnel\">Below Surface Level Tunnel</dpn:physicalLevel>\n" +
-            "      <dpn:name>Named Road</dpn:name>\n" +
-            "      <dpn:adoptedByNationalCycleRoute>false</dpn:adoptedByNationalCycleRoute>\n" +
-            "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n" +
-            "      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>\n" +
-            "      <dpn:withinAccessLand>true</dpn:withinAccessLand>\n" +
-            "      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>\n" +
-            "      <dpn:verticalGain>\n" +
-            "        <dpn:VerticalGainType>\n" +
-            "          <dpn:inDirection uom=\"m\">9</dpn:inDirection>\n" +
-            "          <dpn:againstDirection uom=\"m\">2</dpn:againstDirection>\n" +
-            "        </dpn:VerticalGainType>\n" +
-            "      </dpn:verticalGain>\n" +
-            "      <dpn:planimetricLength uom=\"m\">85</dpn:planimetricLength>\n" +
-            "      <dpn:surfaceLength uom=\"m\">86</dpn:surfaceLength>\n" +
-            "      <dpn:geometry>\n" +
-            "        <gml:LineString srsName=\"urn:ogc:def:crs:EPSG::7405\" gml:id=\"LOCAL_ID_29519\">\n" +
-            "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n" +
-            "        </gml:LineString>\n" +
-            "      </dpn:geometry>\n" +
-            "    </dpn:RouteLink>";
-    
-    public static final String alley = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">" +
-            "  <gml:featureMember>\n" +
-            "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">" +
-            "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n" +
-            "      <dpn:versionID>1</dpn:versionID>\n" +
-            "      <dpn:versionDate>2014-12-12</dpn:versionDate>\n" +
-            "      <dpn:startNode xlink:href=\"#df162dd8-c284-469b-81d6-d63105a39c7f\"/>\n" +
-            "      <dpn:endNode xlink:href=\"#56dc4c0b-0586-4849-b3e2-1e00ee149429\"/>\n" +
-            "      <dpn:descriptiveGroup codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork\">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>\n" +
-            "      <dpn:descriptiveTerm codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#Alley\">Alley</dpn:descriptiveTerm>\n" +
-            "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#Unmade\">Unmade</dpn:surfaceType>\n" +
-            "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#BelowSurfaceLevelTunnel\">Below Surface Level Tunnel</dpn:physicalLevel>\n" +
-            "      <dpn:name>Named Road</dpn:name>\n" +
-            "      <dpn:adoptedByNationalCycleRoute>false</dpn:adoptedByNationalCycleRoute>\n" +
-            "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n" +
-            "      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>\n" +
-            "      <dpn:withinAccessLand>true</dpn:withinAccessLand>\n" +
-            "      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>\n" +
-            "      <dpn:verticalGain>\n" +
-            "        <dpn:VerticalGainType>\n" +
-            "          <dpn:inDirection uom=\"m\">9</dpn:inDirection>\n" +
-            "          <dpn:againstDirection uom=\"m\">2</dpn:againstDirection>\n" +
-            "        </dpn:VerticalGainType>\n" +
-            "      </dpn:verticalGain>\n" +
-            "      <dpn:planimetricLength uom=\"m\">85</dpn:planimetricLength>\n" +
-            "      <dpn:surfaceLength uom=\"m\">86</dpn:surfaceLength>\n" +
-            "      <dpn:geometry>\n" +
-            "        <gml:LineString srsName=\"urn:ogc:def:crs:EPSG::7405\" gml:id=\"LOCAL_ID_29519\">\n" +
-            "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n" +
-            "        </gml:LineString>\n" +
-            "      </dpn:geometry>\n" +
-            "    </dpn:RouteLink>";
-    
-    public static final String privateRoad = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">" +
-            "  <gml:featureMember>\n" +
-            "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">" +
-            "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n" +
-            "      <dpn:versionID>1</dpn:versionID>\n" +
-            "      <dpn:versionDate>2014-12-12</dpn:versionDate>\n" +
-            "      <dpn:startNode xlink:href=\"#df162dd8-c284-469b-81d6-d63105a39c7f\"/>\n" +
-            "      <dpn:endNode xlink:href=\"#56dc4c0b-0586-4849-b3e2-1e00ee149429\"/>\n" +
-            "      <dpn:descriptiveGroup codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork\">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>\n" +
-            "      <dpn:descriptiveTerm codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#PrivateRoad\">Private Road</dpn:descriptiveTerm>\n" +
-            "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#Unmade\">Unmade</dpn:surfaceType>\n" +
-            "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#BelowSurfaceLevelTunnel\">Below Surface Level Tunnel</dpn:physicalLevel>\n" +
-            "      <dpn:name>Named Road</dpn:name>\n" +
-            "      <dpn:adoptedByNationalCycleRoute>false</dpn:adoptedByNationalCycleRoute>\n" +
-            "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n" +
-            "      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>\n" +
-            "      <dpn:withinAccessLand>true</dpn:withinAccessLand>\n" +
-            "      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>\n" +
-            "      <dpn:verticalGain>\n" +
-            "        <dpn:VerticalGainType>\n" +
-            "          <dpn:inDirection uom=\"m\">9</dpn:inDirection>\n" +
-            "          <dpn:againstDirection uom=\"m\">2</dpn:againstDirection>\n" +
-            "        </dpn:VerticalGainType>\n" +
-            "      </dpn:verticalGain>\n" +
-            "      <dpn:planimetricLength uom=\"m\">85</dpn:planimetricLength>\n" +
-            "      <dpn:surfaceLength uom=\"m\">86</dpn:surfaceLength>\n" +
-            "      <dpn:geometry>\n" +
-            "        <gml:LineString srsName=\"urn:ogc:def:crs:EPSG::7405\" gml:id=\"LOCAL_ID_29519\">\n" +
-            "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n" +
-            "        </gml:LineString>\n" +
-            "      </dpn:geometry>\n" +
-            "    </dpn:RouteLink>";
-    
-    public static final String path = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">" +
-            "  <gml:featureMember>\n" +
-            "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">" +
-            "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n" +
-            "      <dpn:versionID>1</dpn:versionID>\n" +
-            "      <dpn:versionDate>2014-12-12</dpn:versionDate>\n" +
-            "      <dpn:startNode xlink:href=\"#df162dd8-c284-469b-81d6-d63105a39c7f\"/>\n" +
-            "      <dpn:endNode xlink:href=\"#56dc4c0b-0586-4849-b3e2-1e00ee149429\"/>\n" +
-            "      <dpn:descriptiveGroup codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork\">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>\n" +
-            "      <dpn:descriptiveTerm codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#Path\">Path</dpn:descriptiveTerm>\n" +
-            "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#Unmade\">Unmade</dpn:surfaceType>\n" +
-            "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#BelowSurfaceLevelTunnel\">Below Surface Level Tunnel</dpn:physicalLevel>\n" +
-            "      <dpn:name>Named Road</dpn:name>\n" +
-            "      <dpn:adoptedByNationalCycleRoute>false</dpn:adoptedByNationalCycleRoute>\n" +
-            "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n" +
-            "      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>\n" +
-            "      <dpn:withinAccessLand>true</dpn:withinAccessLand>\n" +
-            "      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>\n" +
-            "      <dpn:verticalGain>\n" +
-            "        <dpn:VerticalGainType>\n" +
-            "          <dpn:inDirection uom=\"m\">9</dpn:inDirection>\n" +
-            "          <dpn:againstDirection uom=\"m\">2</dpn:againstDirection>\n" +
-            "        </dpn:VerticalGainType>\n" +
-            "      </dpn:verticalGain>\n" +
-            "      <dpn:planimetricLength uom=\"m\">85</dpn:planimetricLength>\n" +
-            "      <dpn:surfaceLength uom=\"m\">86</dpn:surfaceLength>\n" +
-            "      <dpn:geometry>\n" +
-            "        <gml:LineString srsName=\"urn:ogc:def:crs:EPSG::7405\" gml:id=\"LOCAL_ID_29519\">\n" +
-            "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n" +
-            "        </gml:LineString>\n" +
-            "      </dpn:geometry>\n" +
-            "    </dpn:RouteLink>";
+    public static final String aboveSurfaceWay = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">"
+            + "  <gml:featureMember>\n"
+            + "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">"
+            + "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n"
+            + "      <dpn:versionID>1</dpn:versionID>\n"
+            + "      <dpn:versionDate>2014-12-12</dpn:versionDate>\n"
+            + "      <dpn:startNode xlink:href=\"#df162dd8-c284-469b-81d6-d63105a39c7f\"/>\n"
+            + "      <dpn:endNode xlink:href=\"#56dc4c0b-0586-4849-b3e2-1e00ee149429\"/>\n"
+            + "      <dpn:descriptiveGroup codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork\">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>\n"
+            + "      <dpn:descriptiveTerm codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#NoPhysicalManifestation\">No Physical Manifestation</dpn:descriptiveTerm>\n"
+            + "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#Unmade\">Unmade</dpn:surfaceType>\n"
+            + "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#AboveSurfaceLevelOnStructure\">Above Surface Level On Structure</dpn:physicalLevel>\n"
+            + "      <dpn:name>Named Road</dpn:name>\n"
+            + "      <dpn:adoptedByNationalCycleRoute>false</dpn:adoptedByNationalCycleRoute>\n"
+            + "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n"
+            + "      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>\n"
+            + "      <dpn:withinAccessLand>true</dpn:withinAccessLand>\n"
+            + "      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>\n"
+            + "      <dpn:verticalGain>\n"
+            + "        <dpn:VerticalGainType>\n"
+            + "          <dpn:inDirection uom=\"m\">9</dpn:inDirection>\n"
+            + "          <dpn:againstDirection uom=\"m\">2</dpn:againstDirection>\n"
+            + "        </dpn:VerticalGainType>\n"
+            + "      </dpn:verticalGain>\n"
+            + "      <dpn:planimetricLength uom=\"m\">85</dpn:planimetricLength>\n"
+            + "      <dpn:surfaceLength uom=\"m\">86</dpn:surfaceLength>\n"
+            + "      <dpn:geometry>\n"
+            + "        <gml:LineString srsName=\"urn:ogc:def:crs:EPSG::7405\" gml:id=\"LOCAL_ID_29519\">\n"
+            + "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n"
+            + "        </gml:LineString>\n" + "      </dpn:geometry>\n" + "    </dpn:RouteLink>";
+    public static final String surfaceWay = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">"
+            + "  <gml:featureMember>\n"
+            + "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">"
+            + "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n"
+            + "      <dpn:versionID>1</dpn:versionID>\n"
+            + "      <dpn:versionDate>2014-12-12</dpn:versionDate>\n"
+            + "      <dpn:startNode xlink:href=\"#df162dd8-c284-469b-81d6-d63105a39c7f\"/>\n"
+            + "      <dpn:endNode xlink:href=\"#56dc4c0b-0586-4849-b3e2-1e00ee149429\"/>\n"
+            + "      <dpn:descriptiveGroup codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork\">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>\n"
+            + "      <dpn:descriptiveTerm codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#NoPhysicalManifestation\">No Physical Manifestation</dpn:descriptiveTerm>\n"
+            + "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#Unmade\">Unmade</dpn:surfaceType>\n"
+            + "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#SurfaceLevel\">Surface Level</dpn:physicalLevel>\n"
+            + "      <dpn:name>Named Road</dpn:name>\n"
+            + "      <dpn:adoptedByNationalCycleRoute>false</dpn:adoptedByNationalCycleRoute>\n"
+            + "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n"
+            + "      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>\n"
+            + "      <dpn:withinAccessLand>true</dpn:withinAccessLand>\n"
+            + "      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>\n"
+            + "      <dpn:verticalGain>\n"
+            + "        <dpn:VerticalGainType>\n"
+            + "          <dpn:inDirection uom=\"m\">9</dpn:inDirection>\n"
+            + "          <dpn:againstDirection uom=\"m\">2</dpn:againstDirection>\n"
+            + "        </dpn:VerticalGainType>\n"
+            + "      </dpn:verticalGain>\n"
+            + "      <dpn:planimetricLength uom=\"m\">85</dpn:planimetricLength>\n"
+            + "      <dpn:surfaceLength uom=\"m\">86</dpn:surfaceLength>\n"
+            + "      <dpn:geometry>\n"
+            + "        <gml:LineString srsName=\"urn:ogc:def:crs:EPSG::7405\" gml:id=\"LOCAL_ID_29519\">\n"
+            + "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n"
+            + "        </gml:LineString>\n" + "      </dpn:geometry>\n" + "    </dpn:RouteLink>";
+    public static final String tunnelWay = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">"
+            + "  <gml:featureMember>\n"
+            + "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">"
+            + "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n"
+            + "      <dpn:versionID>1</dpn:versionID>\n"
+            + "      <dpn:versionDate>2014-12-12</dpn:versionDate>\n"
+            + "      <dpn:startNode xlink:href=\"#df162dd8-c284-469b-81d6-d63105a39c7f\"/>\n"
+            + "      <dpn:endNode xlink:href=\"#56dc4c0b-0586-4849-b3e2-1e00ee149429\"/>\n"
+            + "      <dpn:descriptiveGroup codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork\">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>\n"
+            + "      <dpn:descriptiveTerm codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#NoPhysicalManifestation\">No Physical Manifestation</dpn:descriptiveTerm>\n"
+            + "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#Unmade\">Unmade</dpn:surfaceType>\n"
+            + "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#BelowSurfaceLevelTunnel\">Below Surface Level Tunnel</dpn:physicalLevel>\n"
+            + "      <dpn:name>Named Road</dpn:name>\n"
+            + "      <dpn:adoptedByNationalCycleRoute>false</dpn:adoptedByNationalCycleRoute>\n"
+            + "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n"
+            + "      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>\n"
+            + "      <dpn:withinAccessLand>true</dpn:withinAccessLand>\n"
+            + "      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>\n"
+            + "      <dpn:verticalGain>\n"
+            + "        <dpn:VerticalGainType>\n"
+            + "          <dpn:inDirection uom=\"m\">9</dpn:inDirection>\n"
+            + "          <dpn:againstDirection uom=\"m\">2</dpn:againstDirection>\n"
+            + "        </dpn:VerticalGainType>\n"
+            + "      </dpn:verticalGain>\n"
+            + "      <dpn:planimetricLength uom=\"m\">85</dpn:planimetricLength>\n"
+            + "      <dpn:surfaceLength uom=\"m\">86</dpn:surfaceLength>\n"
+            + "      <dpn:geometry>\n"
+            + "        <gml:LineString srsName=\"urn:ogc:def:crs:EPSG::7405\" gml:id=\"LOCAL_ID_29519\">\n"
+            + "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n"
+            + "        </gml:LineString>\n" + "      </dpn:geometry>\n" + "    </dpn:RouteLink>";
+
+    public static final String bridleWay = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">"
+            + "  <gml:featureMember>\n"
+            + "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">"
+            + "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n"
+            + "      <dpn:versionID>1</dpn:versionID>\n"
+            + "      <dpn:versionDate>2014-12-12</dpn:versionDate>\n"
+            + "      <dpn:startNode xlink:href=\"#df162dd8-c284-469b-81d6-d63105a39c7f\"/>\n"
+            + "      <dpn:endNode xlink:href=\"#56dc4c0b-0586-4849-b3e2-1e00ee149429\"/>\n"
+            + "      <dpn:descriptiveGroup codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork\">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>\n"
+            + "      <dpn:descriptiveTerm codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#NoPhysicalManifestation\">No Physical Manifestation</dpn:descriptiveTerm>\n"
+            + "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#Unmade\">Unmade</dpn:surfaceType>\n"
+            + "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#BelowSurfaceLevelTunnel\">Below Surface Level Tunnel</dpn:physicalLevel>\n"
+            + "      <dpn:name>Named Road</dpn:name>\n"
+            + "      <dpn:rightOfUse>Bridleway</dpn:rightOfUse>\n"
+            + "      <dpn:adoptedByNationalCycleRoute>false</dpn:adoptedByNationalCycleRoute>\n"
+            + "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n"
+            + "      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>\n"
+            + "      <dpn:withinAccessLand>true</dpn:withinAccessLand>\n"
+            + "      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>\n"
+            + "      <dpn:verticalGain>\n"
+            + "        <dpn:VerticalGainType>\n"
+            + "          <dpn:inDirection uom=\"m\">9</dpn:inDirection>\n"
+            + "          <dpn:againstDirection uom=\"m\">2</dpn:againstDirection>\n"
+            + "        </dpn:VerticalGainType>\n"
+            + "      </dpn:verticalGain>\n"
+            + "      <dpn:planimetricLength uom=\"m\">85</dpn:planimetricLength>\n"
+            + "      <dpn:surfaceLength uom=\"m\">86</dpn:surfaceLength>\n"
+            + "      <dpn:geometry>\n"
+            + "        <gml:LineString srsName=\"urn:ogc:def:crs:EPSG::7405\" gml:id=\"LOCAL_ID_29519\">\n"
+            + "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n"
+            + "        </gml:LineString>\n" + "      </dpn:geometry>\n" + "    </dpn:RouteLink>";
+    public static final String restrictedByWay = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">"
+            + "  <gml:featureMember>\n"
+            + "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">"
+            + "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n"
+            + "      <dpn:versionID>1</dpn:versionID>\n"
+            + "      <dpn:versionDate>2014-12-12</dpn:versionDate>\n"
+            + "      <dpn:startNode xlink:href=\"#df162dd8-c284-469b-81d6-d63105a39c7f\"/>\n"
+            + "      <dpn:endNode xlink:href=\"#56dc4c0b-0586-4849-b3e2-1e00ee149429\"/>\n"
+            + "      <dpn:descriptiveGroup codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork\">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>\n"
+            + "      <dpn:descriptiveTerm codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#NoPhysicalManifestation\">No Physical Manifestation</dpn:descriptiveTerm>\n"
+            + "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#Unmade\">Unmade</dpn:surfaceType>\n"
+            + "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#BelowSurfaceLevelTunnel\">Below Surface Level Tunnel</dpn:physicalLevel>\n"
+            + "      <dpn:name>Named Road</dpn:name>\n"
+            + "      <dpn:rightOfUse>Restricted Byway</dpn:rightOfUse>\n"
+            + "      <dpn:adoptedByNationalCycleRoute>false</dpn:adoptedByNationalCycleRoute>\n"
+            + "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n"
+            + "      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>\n"
+            + "      <dpn:withinAccessLand>true</dpn:withinAccessLand>\n"
+            + "      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>\n"
+            + "      <dpn:verticalGain>\n"
+            + "        <dpn:VerticalGainType>\n"
+            + "          <dpn:inDirection uom=\"m\">9</dpn:inDirection>\n"
+            + "          <dpn:againstDirection uom=\"m\">2</dpn:againstDirection>\n"
+            + "        </dpn:VerticalGainType>\n"
+            + "      </dpn:verticalGain>\n"
+            + "      <dpn:planimetricLength uom=\"m\">85</dpn:planimetricLength>\n"
+            + "      <dpn:surfaceLength uom=\"m\">86</dpn:surfaceLength>\n"
+            + "      <dpn:geometry>\n"
+            + "        <gml:LineString srsName=\"urn:ogc:def:crs:EPSG::7405\" gml:id=\"LOCAL_ID_29519\">\n"
+            + "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n"
+            + "        </gml:LineString>\n" + "      </dpn:geometry>\n" + "    </dpn:RouteLink>";
+    public static final String hazardMud = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">"
+            + "  <gml:featureMember>\n"
+            + "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">"
+            + "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n"
+            + "      <dpn:versionID>1</dpn:versionID>\n"
+            + "      <dpn:versionDate>2014-12-12</dpn:versionDate>\n"
+            + "      <dpn:startNode xlink:href=\"#df162dd8-c284-469b-81d6-d63105a39c7f\"/>\n"
+            + "      <dpn:endNode xlink:href=\"#56dc4c0b-0586-4849-b3e2-1e00ee149429\"/>\n"
+            + "      <dpn:descriptiveGroup codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork\">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>\n"
+            + "      <dpn:descriptiveTerm codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#NoPhysicalManifestation\">No Physical Manifestation</dpn:descriptiveTerm>\n"
+            + "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#Unmade\">Unmade</dpn:surfaceType>\n"
+            + "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#BelowSurfaceLevelTunnel\">Below Surface Level Tunnel</dpn:physicalLevel>\n"
+            + "      <dpn:name>Named Road</dpn:name>\n"
+            + "      <dpn:rightOfUse>Restricted Byway</dpn:rightOfUse>\n"
+            + "      <dpn:potentialHazardCrossed>Mud</dpn:potentialHazardCrossed>\n"
+            + "      <dpn:adoptedByNationalCycleRoute>false</dpn:adoptedByNationalCycleRoute>\n"
+            + "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n"
+            + "      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>\n"
+            + "      <dpn:withinAccessLand>true</dpn:withinAccessLand>\n"
+            + "      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>\n"
+            + "      <dpn:verticalGain>\n"
+            + "        <dpn:VerticalGainType>\n"
+            + "          <dpn:inDirection uom=\"m\">9</dpn:inDirection>\n"
+            + "          <dpn:againstDirection uom=\"m\">2</dpn:againstDirection>\n"
+            + "        </dpn:VerticalGainType>\n"
+            + "      </dpn:verticalGain>\n"
+            + "      <dpn:planimetricLength uom=\"m\">85</dpn:planimetricLength>\n"
+            + "      <dpn:surfaceLength uom=\"m\">86</dpn:surfaceLength>\n"
+            + "      <dpn:geometry>\n"
+            + "        <gml:LineString srsName=\"urn:ogc:def:crs:EPSG::7405\" gml:id=\"LOCAL_ID_29519\">\n"
+            + "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n"
+            + "        </gml:LineString>\n" + "      </dpn:geometry>\n" + "    </dpn:RouteLink>";
+    public static final String hazardInvalid = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">"
+            + "  <gml:featureMember>\n"
+            + "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">"
+            + "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n"
+            + "      <dpn:versionID>1</dpn:versionID>\n"
+            + "      <dpn:versionDate>2014-12-12</dpn:versionDate>\n"
+            + "      <dpn:startNode xlink:href=\"#df162dd8-c284-469b-81d6-d63105a39c7f\"/>\n"
+            + "      <dpn:endNode xlink:href=\"#56dc4c0b-0586-4849-b3e2-1e00ee149429\"/>\n"
+            + "      <dpn:descriptiveGroup codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork\">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>\n"
+            + "      <dpn:descriptiveTerm codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#NoPhysicalManifestation\">No Physical Manifestation</dpn:descriptiveTerm>\n"
+            + "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#Unmade\">Unmade</dpn:surfaceType>\n"
+            + "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#BelowSurfaceLevelTunnel\">Below Surface Level Tunnel</dpn:physicalLevel>\n"
+            + "      <dpn:name>Named Road</dpn:name>\n"
+            + "      <dpn:rightOfUse>Restricted Byway</dpn:rightOfUse>\n"
+            + "      <dpn:potentialHazardCrossed>Mud, Unknown Hazard</dpn:potentialHazardCrossed>\n"
+            + "      <dpn:adoptedByNationalCycleRoute>false</dpn:adoptedByNationalCycleRoute>\n"
+            + "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n"
+            + "      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>\n"
+            + "      <dpn:withinAccessLand>true</dpn:withinAccessLand>\n"
+            + "      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>\n"
+            + "      <dpn:verticalGain>\n"
+            + "        <dpn:VerticalGainType>\n"
+            + "          <dpn:inDirection uom=\"m\">9</dpn:inDirection>\n"
+            + "          <dpn:againstDirection uom=\"m\">2</dpn:againstDirection>\n"
+            + "        </dpn:VerticalGainType>\n"
+            + "      </dpn:verticalGain>\n"
+            + "      <dpn:planimetricLength uom=\"m\">85</dpn:planimetricLength>\n"
+            + "      <dpn:surfaceLength uom=\"m\">86</dpn:surfaceLength>\n"
+            + "      <dpn:geometry>\n"
+            + "        <gml:LineString srsName=\"urn:ogc:def:crs:EPSG::7405\" gml:id=\"LOCAL_ID_29519\">\n"
+            + "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n"
+            + "        </gml:LineString>\n" + "      </dpn:geometry>\n" + "    </dpn:RouteLink>";
+    public static final String hazardMultipleOneLine = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">"
+            + "  <gml:featureMember>\n"
+            + "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">"
+            + "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n"
+            + "      <dpn:versionID>1</dpn:versionID>\n"
+            + "      <dpn:versionDate>2014-12-12</dpn:versionDate>\n"
+            + "      <dpn:startNode xlink:href=\"#df162dd8-c284-469b-81d6-d63105a39c7f\"/>\n"
+            + "      <dpn:endNode xlink:href=\"#56dc4c0b-0586-4849-b3e2-1e00ee149429\"/>\n"
+            + "      <dpn:descriptiveGroup codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork\">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>\n"
+            + "      <dpn:descriptiveTerm codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#NoPhysicalManifestation\">No Physical Manifestation</dpn:descriptiveTerm>\n"
+            + "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#Unmade\">Unmade</dpn:surfaceType>\n"
+            + "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#BelowSurfaceLevelTunnel\">Below Surface Level Tunnel</dpn:physicalLevel>\n"
+            + "      <dpn:name>Named Road</dpn:name>\n"
+            + "      <dpn:rightOfUse>Restricted Byway</dpn:rightOfUse>\n"
+            + "      <dpn:potentialHazardCrossed>Mud, Scree</dpn:potentialHazardCrossed>\n"
+            + "      <dpn:adoptedByNationalCycleRoute>false</dpn:adoptedByNationalCycleRoute>\n"
+            + "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n"
+            + "      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>\n"
+            + "      <dpn:withinAccessLand>true</dpn:withinAccessLand>\n"
+            + "      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>\n"
+            + "      <dpn:verticalGain>\n"
+            + "        <dpn:VerticalGainType>\n"
+            + "          <dpn:inDirection uom=\"m\">9</dpn:inDirection>\n"
+            + "          <dpn:againstDirection uom=\"m\">2</dpn:againstDirection>\n"
+            + "        </dpn:VerticalGainType>\n"
+            + "      </dpn:verticalGain>\n"
+            + "      <dpn:planimetricLength uom=\"m\">85</dpn:planimetricLength>\n"
+            + "      <dpn:surfaceLength uom=\"m\">86</dpn:surfaceLength>\n"
+            + "      <dpn:geometry>\n"
+            + "        <gml:LineString srsName=\"urn:ogc:def:crs:EPSG::7405\" gml:id=\"LOCAL_ID_29519\">\n"
+            + "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n"
+            + "        </gml:LineString>\n" + "      </dpn:geometry>\n" + "    </dpn:RouteLink>";
+    public static final String hazardMultiple = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">"
+            + "  <gml:featureMember>\n"
+            + "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">"
+            + "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n"
+            + "      <dpn:versionID>1</dpn:versionID>\n"
+            + "      <dpn:versionDate>2014-12-12</dpn:versionDate>\n"
+            + "      <dpn:startNode xlink:href=\"#df162dd8-c284-469b-81d6-d63105a39c7f\"/>\n"
+            + "      <dpn:endNode xlink:href=\"#56dc4c0b-0586-4849-b3e2-1e00ee149429\"/>\n"
+            + "      <dpn:descriptiveGroup codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork\">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>\n"
+            + "      <dpn:descriptiveTerm codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#NoPhysicalManifestation\">No Physical Manifestation</dpn:descriptiveTerm>\n"
+            + "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#Unmade\">Unmade</dpn:surfaceType>\n"
+            + "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#BelowSurfaceLevelTunnel\">Below Surface Level Tunnel</dpn:physicalLevel>\n"
+            + "      <dpn:name>Named Road</dpn:name>\n"
+            + "      <dpn:rightOfUse>Restricted Byway</dpn:rightOfUse>\n"
+            + "      <dpn:potentialHazardCrossed>Mud</dpn:potentialHazardCrossed>\n"
+            + "      <dpn:potentialHazardCrossed>Scree</dpn:potentialHazardCrossed>\n"
+            + "      <dpn:adoptedByNationalCycleRoute>false</dpn:adoptedByNationalCycleRoute>\n"
+            + "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n"
+            + "      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>\n"
+            + "      <dpn:withinAccessLand>true</dpn:withinAccessLand>\n"
+            + "      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>\n"
+            + "      <dpn:verticalGain>\n"
+            + "        <dpn:VerticalGainType>\n"
+            + "          <dpn:inDirection uom=\"m\">9</dpn:inDirection>\n"
+            + "          <dpn:againstDirection uom=\"m\">2</dpn:againstDirection>\n"
+            + "        </dpn:VerticalGainType>\n"
+            + "      </dpn:verticalGain>\n"
+            + "      <dpn:planimetricLength uom=\"m\">85</dpn:planimetricLength>\n"
+            + "      <dpn:surfaceLength uom=\"m\">86</dpn:surfaceLength>\n"
+            + "      <dpn:geometry>\n"
+            + "        <gml:LineString srsName=\"urn:ogc:def:crs:EPSG::7405\" gml:id=\"LOCAL_ID_29519\">\n"
+            + "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n"
+            + "        </gml:LineString>\n" + "      </dpn:geometry>\n" + "    </dpn:RouteLink>";
+
+    public static final String madeSealed = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">"
+            + "  <gml:featureMember>\n"
+            + "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">"
+            + "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n"
+            + "      <dpn:versionID>1</dpn:versionID>\n"
+            + "      <dpn:versionDate>2014-12-12</dpn:versionDate>\n"
+            + "      <dpn:startNode xlink:href=\"#df162dd8-c284-469b-81d6-d63105a39c7f\"/>\n"
+            + "      <dpn:endNode xlink:href=\"#56dc4c0b-0586-4849-b3e2-1e00ee149429\"/>\n"
+            + "      <dpn:descriptiveGroup codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork\">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>\n"
+            + "      <dpn:descriptiveTerm codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#NoPhysicalManifestation\">No Physical Manifestation</dpn:descriptiveTerm>\n"
+            + "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#MadeSealed\">Made Sealed</dpn:surfaceType>\n"
+            + "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#BelowSurfaceLevelTunnel\">Below Surface Level Tunnel</dpn:physicalLevel>\n"
+            + "      <dpn:name>Named Road</dpn:name>\n"
+            + "      <dpn:rightOfUse>Restricted Byway</dpn:rightOfUse>\n"
+            + "      <dpn:adoptedByNationalCycleRoute>false</dpn:adoptedByNationalCycleRoute>\n"
+            + "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n"
+            + "      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>\n"
+            + "      <dpn:withinAccessLand>true</dpn:withinAccessLand>\n"
+            + "      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>\n"
+            + "      <dpn:verticalGain>\n"
+            + "        <dpn:VerticalGainType>\n"
+            + "          <dpn:inDirection uom=\"m\">9</dpn:inDirection>\n"
+            + "          <dpn:againstDirection uom=\"m\">2</dpn:againstDirection>\n"
+            + "        </dpn:VerticalGainType>\n"
+            + "      </dpn:verticalGain>\n"
+            + "      <dpn:planimetricLength uom=\"m\">85</dpn:planimetricLength>\n"
+            + "      <dpn:surfaceLength uom=\"m\">86</dpn:surfaceLength>\n"
+            + "      <dpn:geometry>\n"
+            + "        <gml:LineString srsName=\"urn:ogc:def:crs:EPSG::7405\" gml:id=\"LOCAL_ID_29519\">\n"
+            + "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n"
+            + "        </gml:LineString>\n" + "      </dpn:geometry>\n" + "    </dpn:RouteLink>";
+
+    public static final String madeUnsealed = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">"
+            + "  <gml:featureMember>\n"
+            + "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">"
+            + "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n"
+            + "      <dpn:versionID>1</dpn:versionID>\n"
+            + "      <dpn:versionDate>2014-12-12</dpn:versionDate>\n"
+            + "      <dpn:startNode xlink:href=\"#df162dd8-c284-469b-81d6-d63105a39c7f\"/>\n"
+            + "      <dpn:endNode xlink:href=\"#56dc4c0b-0586-4849-b3e2-1e00ee149429\"/>\n"
+            + "      <dpn:descriptiveGroup codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork\">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>\n"
+            + "      <dpn:descriptiveTerm codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#NoPhysicalManifestation\">No Physical Manifestation</dpn:descriptiveTerm>\n"
+            + "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#MadeUnsealed\">Made Unsealed</dpn:surfaceType>\n"
+            + "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#BelowSurfaceLevelTunnel\">Below Surface Level Tunnel</dpn:physicalLevel>\n"
+            + "      <dpn:name>Named Road</dpn:name>\n"
+            + "      <dpn:rightOfUse>Restricted Byway</dpn:rightOfUse>\n"
+            + "      <dpn:adoptedByNationalCycleRoute>false</dpn:adoptedByNationalCycleRoute>\n"
+            + "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n"
+            + "      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>\n"
+            + "      <dpn:withinAccessLand>true</dpn:withinAccessLand>\n"
+            + "      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>\n"
+            + "      <dpn:verticalGain>\n"
+            + "        <dpn:VerticalGainType>\n"
+            + "          <dpn:inDirection uom=\"m\">9</dpn:inDirection>\n"
+            + "          <dpn:againstDirection uom=\"m\">2</dpn:againstDirection>\n"
+            + "        </dpn:VerticalGainType>\n"
+            + "      </dpn:verticalGain>\n"
+            + "      <dpn:planimetricLength uom=\"m\">85</dpn:planimetricLength>\n"
+            + "      <dpn:surfaceLength uom=\"m\">86</dpn:surfaceLength>\n"
+            + "      <dpn:geometry>\n"
+            + "        <gml:LineString srsName=\"urn:ogc:def:crs:EPSG::7405\" gml:id=\"LOCAL_ID_29519\">\n"
+            + "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n"
+            + "        </gml:LineString>\n" + "      </dpn:geometry>\n" + "    </dpn:RouteLink>";
+
+    public static final String madeUnknown = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">"
+            + "  <gml:featureMember>\n"
+            + "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">"
+            + "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n"
+            + "      <dpn:versionID>1</dpn:versionID>\n"
+            + "      <dpn:versionDate>2014-12-12</dpn:versionDate>\n"
+            + "      <dpn:startNode xlink:href=\"#df162dd8-c284-469b-81d6-d63105a39c7f\"/>\n"
+            + "      <dpn:endNode xlink:href=\"#56dc4c0b-0586-4849-b3e2-1e00ee149429\"/>\n"
+            + "      <dpn:descriptiveGroup codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork\">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>\n"
+            + "      <dpn:descriptiveTerm codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#NoPhysicalManifestation\">No Physical Manifestation</dpn:descriptiveTerm>\n"
+            + "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#MadeUnknown\">Made Unknown</dpn:surfaceType>\n"
+            + "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#BelowSurfaceLevelTunnel\">Below Surface Level Tunnel</dpn:physicalLevel>\n"
+            + "      <dpn:name>Named Road</dpn:name>\n"
+            + "      <dpn:rightOfUse>Restricted Byway</dpn:rightOfUse>\n"
+            + "      <dpn:adoptedByNationalCycleRoute>false</dpn:adoptedByNationalCycleRoute>\n"
+            + "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n"
+            + "      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>\n"
+            + "      <dpn:withinAccessLand>true</dpn:withinAccessLand>\n"
+            + "      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>\n"
+            + "      <dpn:verticalGain>\n"
+            + "        <dpn:VerticalGainType>\n"
+            + "          <dpn:inDirection uom=\"m\">9</dpn:inDirection>\n"
+            + "          <dpn:againstDirection uom=\"m\">2</dpn:againstDirection>\n"
+            + "        </dpn:VerticalGainType>\n"
+            + "      </dpn:verticalGain>\n"
+            + "      <dpn:planimetricLength uom=\"m\">85</dpn:planimetricLength>\n"
+            + "      <dpn:surfaceLength uom=\"m\">86</dpn:surfaceLength>\n"
+            + "      <dpn:geometry>\n"
+            + "        <gml:LineString srsName=\"urn:ogc:def:crs:EPSG::7405\" gml:id=\"LOCAL_ID_29519\">\n"
+            + "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n"
+            + "        </gml:LineString>\n" + "      </dpn:geometry>\n" + "    </dpn:RouteLink>";
+
+    public static final String unmadeNoPhysicalButWithinAccessLand = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">"
+            + "  <gml:featureMember>\n"
+            + "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">"
+            + "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n"
+            + "      <dpn:versionID>1</dpn:versionID>\n"
+            + "      <dpn:versionDate>2014-12-12</dpn:versionDate>\n"
+            + "      <dpn:startNode xlink:href=\"#df162dd8-c284-469b-81d6-d63105a39c7f\"/>\n"
+            + "      <dpn:endNode xlink:href=\"#56dc4c0b-0586-4849-b3e2-1e00ee149429\"/>\n"
+            + "      <dpn:descriptiveGroup codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork\">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>\n"
+            + "      <dpn:descriptiveTerm codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#NoPhysicalManifestation\">No Physical Manifestation</dpn:descriptiveTerm>\n"
+            + "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#Unmade\">Unmade</dpn:surfaceType>\n"
+            + "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#BelowSurfaceLevelTunnel\">Below Surface Level Tunnel</dpn:physicalLevel>\n"
+            + "      <dpn:name>Named Road</dpn:name>\n"
+            + "      <dpn:adoptedByNationalCycleRoute>false</dpn:adoptedByNationalCycleRoute>\n"
+            + "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n"
+            + "      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>\n"
+            + "      <dpn:withinAccessLand>true</dpn:withinAccessLand>\n"
+            + "      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>\n"
+            + "      <dpn:verticalGain>\n"
+            + "        <dpn:VerticalGainType>\n"
+            + "          <dpn:inDirection uom=\"m\">9</dpn:inDirection>\n"
+            + "          <dpn:againstDirection uom=\"m\">2</dpn:againstDirection>\n"
+            + "        </dpn:VerticalGainType>\n"
+            + "      </dpn:verticalGain>\n"
+            + "      <dpn:planimetricLength uom=\"m\">85</dpn:planimetricLength>\n"
+            + "      <dpn:surfaceLength uom=\"m\">86</dpn:surfaceLength>\n"
+            + "      <dpn:geometry>\n"
+            + "        <gml:LineString srsName=\"urn:ogc:def:crs:EPSG::7405\" gml:id=\"LOCAL_ID_29519\">\n"
+            + "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n"
+            + "        </gml:LineString>\n" + "      </dpn:geometry>\n" + "    </dpn:RouteLink>";
+
+    public static final String adoptedNationalCycleRoute = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">"
+            + "  <gml:featureMember>\n"
+            + "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">"
+            + "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n"
+            + "      <dpn:versionID>1</dpn:versionID>\n"
+            + "      <dpn:versionDate>2014-12-12</dpn:versionDate>\n"
+            + "      <dpn:startNode xlink:href=\"#df162dd8-c284-469b-81d6-d63105a39c7f\"/>\n"
+            + "      <dpn:endNode xlink:href=\"#56dc4c0b-0586-4849-b3e2-1e00ee149429\"/>\n"
+            + "      <dpn:descriptiveGroup codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork\">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>\n"
+            + "      <dpn:descriptiveTerm codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#NoPhysicalManifestation\">No Physical Manifestation</dpn:descriptiveTerm>\n"
+            + "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#Unmade\">Unmade</dpn:surfaceType>\n"
+            + "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#BelowSurfaceLevelTunnel\">Below Surface Level Tunnel</dpn:physicalLevel>\n"
+            + "      <dpn:name>Named Road</dpn:name>\n"
+            + "      <dpn:adoptedByNationalCycleRoute>true</dpn:adoptedByNationalCycleRoute>\n"
+            + "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n"
+            + "      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>\n"
+            + "      <dpn:withinAccessLand>true</dpn:withinAccessLand>\n"
+            + "      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>\n"
+            + "      <dpn:verticalGain>\n"
+            + "        <dpn:VerticalGainType>\n"
+            + "          <dpn:inDirection uom=\"m\">9</dpn:inDirection>\n"
+            + "          <dpn:againstDirection uom=\"m\">2</dpn:againstDirection>\n"
+            + "        </dpn:VerticalGainType>\n"
+            + "      </dpn:verticalGain>\n"
+            + "      <dpn:planimetricLength uom=\"m\">85</dpn:planimetricLength>\n"
+            + "      <dpn:surfaceLength uom=\"m\">86</dpn:surfaceLength>\n"
+            + "      <dpn:geometry>\n"
+            + "        <gml:LineString srsName=\"urn:ogc:def:crs:EPSG::7405\" gml:id=\"LOCAL_ID_29519\">\n"
+            + "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n"
+            + "        </gml:LineString>\n" + "      </dpn:geometry>\n" + "    </dpn:RouteLink>";
+
+    public static final String adoptedOtherCycleRoute = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">"
+            + "  <gml:featureMember>\n"
+            + "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">"
+            + "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n"
+            + "      <dpn:versionID>1</dpn:versionID>\n"
+            + "      <dpn:versionDate>2014-12-12</dpn:versionDate>\n"
+            + "      <dpn:startNode xlink:href=\"#df162dd8-c284-469b-81d6-d63105a39c7f\"/>\n"
+            + "      <dpn:endNode xlink:href=\"#56dc4c0b-0586-4849-b3e2-1e00ee149429\"/>\n"
+            + "      <dpn:descriptiveGroup codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork\">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>\n"
+            + "      <dpn:descriptiveTerm codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#NoPhysicalManifestation\">No Physical Manifestation</dpn:descriptiveTerm>\n"
+            + "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#Unmade\">Unmade</dpn:surfaceType>\n"
+            + "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#BelowSurfaceLevelTunnel\">Below Surface Level Tunnel</dpn:physicalLevel>\n"
+            + "      <dpn:name>Named Road</dpn:name>\n"
+            + "      <dpn:adoptedByNationalCycleRoute>true</dpn:adoptedByNationalCycleRoute>\n"
+            + "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n"
+            + "      <dpn:adoptedByOtherCycleRoute>true</dpn:adoptedByOtherCycleRoute>\n"
+            + "      <dpn:withinAccessLand>true</dpn:withinAccessLand>\n"
+            + "      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>\n"
+            + "      <dpn:verticalGain>\n"
+            + "        <dpn:VerticalGainType>\n"
+            + "          <dpn:inDirection uom=\"m\">9</dpn:inDirection>\n"
+            + "          <dpn:againstDirection uom=\"m\">2</dpn:againstDirection>\n"
+            + "        </dpn:VerticalGainType>\n"
+            + "      </dpn:verticalGain>\n"
+            + "      <dpn:planimetricLength uom=\"m\">85</dpn:planimetricLength>\n"
+            + "      <dpn:surfaceLength uom=\"m\">86</dpn:surfaceLength>\n"
+            + "      <dpn:geometry>\n"
+            + "        <gml:LineString srsName=\"urn:ogc:def:crs:EPSG::7405\" gml:id=\"LOCAL_ID_29519\">\n"
+            + "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n"
+            + "        </gml:LineString>\n" + "      </dpn:geometry>\n" + "    </dpn:RouteLink>";
+
+    public static final String aRoad = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">"
+            + "  <gml:featureMember>\n"
+            + "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">"
+            + "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n"
+            + "      <dpn:versionID>1</dpn:versionID>\n"
+            + "      <dpn:versionDate>2014-12-12</dpn:versionDate>\n"
+            + "      <dpn:startNode xlink:href=\"#df162dd8-c284-469b-81d6-d63105a39c7f\"/>\n"
+            + "      <dpn:endNode xlink:href=\"#56dc4c0b-0586-4849-b3e2-1e00ee149429\"/>\n"
+            + "      <dpn:descriptiveGroup codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork\">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>\n"
+            + "      <dpn:descriptiveTerm codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#ARoad\">A Road</dpn:descriptiveTerm>\n"
+            + "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#Unmade\">Unmade</dpn:surfaceType>\n"
+            + "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#BelowSurfaceLevelTunnel\">Below Surface Level Tunnel</dpn:physicalLevel>\n"
+            + "      <dpn:name>Named Road</dpn:name>\n"
+            + "      <dpn:adoptedByNationalCycleRoute>false</dpn:adoptedByNationalCycleRoute>\n"
+            + "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n"
+            + "      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>\n"
+            + "      <dpn:withinAccessLand>true</dpn:withinAccessLand>\n"
+            + "      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>\n"
+            + "      <dpn:verticalGain>\n"
+            + "        <dpn:VerticalGainType>\n"
+            + "          <dpn:inDirection uom=\"m\">9</dpn:inDirection>\n"
+            + "          <dpn:againstDirection uom=\"m\">2</dpn:againstDirection>\n"
+            + "        </dpn:VerticalGainType>\n"
+            + "      </dpn:verticalGain>\n"
+            + "      <dpn:planimetricLength uom=\"m\">85</dpn:planimetricLength>\n"
+            + "      <dpn:surfaceLength uom=\"m\">86</dpn:surfaceLength>\n"
+            + "      <dpn:geometry>\n"
+            + "        <gml:LineString srsName=\"urn:ogc:def:crs:EPSG::7405\" gml:id=\"LOCAL_ID_29519\">\n"
+            + "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n"
+            + "        </gml:LineString>\n" + "      </dpn:geometry>\n" + "    </dpn:RouteLink>";
+
+    public static final String bRoad = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">"
+            + "  <gml:featureMember>\n"
+            + "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">"
+            + "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n"
+            + "      <dpn:versionID>1</dpn:versionID>\n"
+            + "      <dpn:versionDate>2014-12-12</dpn:versionDate>\n"
+            + "      <dpn:startNode xlink:href=\"#df162dd8-c284-469b-81d6-d63105a39c7f\"/>\n"
+            + "      <dpn:endNode xlink:href=\"#56dc4c0b-0586-4849-b3e2-1e00ee149429\"/>\n"
+            + "      <dpn:descriptiveGroup codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork\">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>\n"
+            + "      <dpn:descriptiveTerm codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#BRoad\">B Road</dpn:descriptiveTerm>\n"
+            + "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#Unmade\">Unmade</dpn:surfaceType>\n"
+            + "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#BelowSurfaceLevelTunnel\">Below Surface Level Tunnel</dpn:physicalLevel>\n"
+            + "      <dpn:name>Named Road</dpn:name>\n"
+            + "      <dpn:adoptedByNationalCycleRoute>false</dpn:adoptedByNationalCycleRoute>\n"
+            + "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n"
+            + "      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>\n"
+            + "      <dpn:withinAccessLand>true</dpn:withinAccessLand>\n"
+            + "      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>\n"
+            + "      <dpn:verticalGain>\n"
+            + "        <dpn:VerticalGainType>\n"
+            + "          <dpn:inDirection uom=\"m\">9</dpn:inDirection>\n"
+            + "          <dpn:againstDirection uom=\"m\">2</dpn:againstDirection>\n"
+            + "        </dpn:VerticalGainType>\n"
+            + "      </dpn:verticalGain>\n"
+            + "      <dpn:planimetricLength uom=\"m\">85</dpn:planimetricLength>\n"
+            + "      <dpn:surfaceLength uom=\"m\">86</dpn:surfaceLength>\n"
+            + "      <dpn:geometry>\n"
+            + "        <gml:LineString srsName=\"urn:ogc:def:crs:EPSG::7405\" gml:id=\"LOCAL_ID_29519\">\n"
+            + "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n"
+            + "        </gml:LineString>\n" + "      </dpn:geometry>\n" + "    </dpn:RouteLink>";
+
+    public static final String alley = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">"
+            + "  <gml:featureMember>\n"
+            + "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">"
+            + "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n"
+            + "      <dpn:versionID>1</dpn:versionID>\n"
+            + "      <dpn:versionDate>2014-12-12</dpn:versionDate>\n"
+            + "      <dpn:startNode xlink:href=\"#df162dd8-c284-469b-81d6-d63105a39c7f\"/>\n"
+            + "      <dpn:endNode xlink:href=\"#56dc4c0b-0586-4849-b3e2-1e00ee149429\"/>\n"
+            + "      <dpn:descriptiveGroup codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork\">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>\n"
+            + "      <dpn:descriptiveTerm codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#Alley\">Alley</dpn:descriptiveTerm>\n"
+            + "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#Unmade\">Unmade</dpn:surfaceType>\n"
+            + "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#BelowSurfaceLevelTunnel\">Below Surface Level Tunnel</dpn:physicalLevel>\n"
+            + "      <dpn:name>Named Road</dpn:name>\n"
+            + "      <dpn:adoptedByNationalCycleRoute>false</dpn:adoptedByNationalCycleRoute>\n"
+            + "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n"
+            + "      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>\n"
+            + "      <dpn:withinAccessLand>true</dpn:withinAccessLand>\n"
+            + "      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>\n"
+            + "      <dpn:verticalGain>\n"
+            + "        <dpn:VerticalGainType>\n"
+            + "          <dpn:inDirection uom=\"m\">9</dpn:inDirection>\n"
+            + "          <dpn:againstDirection uom=\"m\">2</dpn:againstDirection>\n"
+            + "        </dpn:VerticalGainType>\n"
+            + "      </dpn:verticalGain>\n"
+            + "      <dpn:planimetricLength uom=\"m\">85</dpn:planimetricLength>\n"
+            + "      <dpn:surfaceLength uom=\"m\">86</dpn:surfaceLength>\n"
+            + "      <dpn:geometry>\n"
+            + "        <gml:LineString srsName=\"urn:ogc:def:crs:EPSG::7405\" gml:id=\"LOCAL_ID_29519\">\n"
+            + "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n"
+            + "        </gml:LineString>\n" + "      </dpn:geometry>\n" + "    </dpn:RouteLink>";
+
+    public static final String privateRoad = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">"
+            + "  <gml:featureMember>\n"
+            + "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">"
+            + "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n"
+            + "      <dpn:versionID>1</dpn:versionID>\n"
+            + "      <dpn:versionDate>2014-12-12</dpn:versionDate>\n"
+            + "      <dpn:startNode xlink:href=\"#df162dd8-c284-469b-81d6-d63105a39c7f\"/>\n"
+            + "      <dpn:endNode xlink:href=\"#56dc4c0b-0586-4849-b3e2-1e00ee149429\"/>\n"
+            + "      <dpn:descriptiveGroup codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork\">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>\n"
+            + "      <dpn:descriptiveTerm codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#PrivateRoad\">Private Road</dpn:descriptiveTerm>\n"
+            + "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#Unmade\">Unmade</dpn:surfaceType>\n"
+            + "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#BelowSurfaceLevelTunnel\">Below Surface Level Tunnel</dpn:physicalLevel>\n"
+            + "      <dpn:name>Named Road</dpn:name>\n"
+            + "      <dpn:adoptedByNationalCycleRoute>false</dpn:adoptedByNationalCycleRoute>\n"
+            + "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n"
+            + "      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>\n"
+            + "      <dpn:withinAccessLand>true</dpn:withinAccessLand>\n"
+            + "      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>\n"
+            + "      <dpn:verticalGain>\n"
+            + "        <dpn:VerticalGainType>\n"
+            + "          <dpn:inDirection uom=\"m\">9</dpn:inDirection>\n"
+            + "          <dpn:againstDirection uom=\"m\">2</dpn:againstDirection>\n"
+            + "        </dpn:VerticalGainType>\n"
+            + "      </dpn:verticalGain>\n"
+            + "      <dpn:planimetricLength uom=\"m\">85</dpn:planimetricLength>\n"
+            + "      <dpn:surfaceLength uom=\"m\">86</dpn:surfaceLength>\n"
+            + "      <dpn:geometry>\n"
+            + "        <gml:LineString srsName=\"urn:ogc:def:crs:EPSG::7405\" gml:id=\"LOCAL_ID_29519\">\n"
+            + "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n"
+            + "        </gml:LineString>\n" + "      </dpn:geometry>\n" + "    </dpn:RouteLink>";
+
+    public static final String path = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">"
+            + "  <gml:featureMember>\n"
+            + "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">"
+            + "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n"
+            + "      <dpn:versionID>1</dpn:versionID>\n"
+            + "      <dpn:versionDate>2014-12-12</dpn:versionDate>\n"
+            + "      <dpn:startNode xlink:href=\"#df162dd8-c284-469b-81d6-d63105a39c7f\"/>\n"
+            + "      <dpn:endNode xlink:href=\"#56dc4c0b-0586-4849-b3e2-1e00ee149429\"/>\n"
+            + "      <dpn:descriptiveGroup codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork\">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>\n"
+            + "      <dpn:descriptiveTerm codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#Path\">Path</dpn:descriptiveTerm>\n"
+            + "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#Unmade\">Unmade</dpn:surfaceType>\n"
+            + "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#BelowSurfaceLevelTunnel\">Below Surface Level Tunnel</dpn:physicalLevel>\n"
+            + "      <dpn:name>Named Road</dpn:name>\n"
+            + "      <dpn:adoptedByNationalCycleRoute>false</dpn:adoptedByNationalCycleRoute>\n"
+            + "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n"
+            + "      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>\n"
+            + "      <dpn:withinAccessLand>true</dpn:withinAccessLand>\n"
+            + "      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>\n"
+            + "      <dpn:verticalGain>\n"
+            + "        <dpn:VerticalGainType>\n"
+            + "          <dpn:inDirection uom=\"m\">9</dpn:inDirection>\n"
+            + "          <dpn:againstDirection uom=\"m\">2</dpn:againstDirection>\n"
+            + "        </dpn:VerticalGainType>\n"
+            + "      </dpn:verticalGain>\n"
+            + "      <dpn:planimetricLength uom=\"m\">85</dpn:planimetricLength>\n"
+            + "      <dpn:surfaceLength uom=\"m\">86</dpn:surfaceLength>\n"
+            + "      <dpn:geometry>\n"
+            + "        <gml:LineString srsName=\"urn:ogc:def:crs:EPSG::7405\" gml:id=\"LOCAL_ID_29519\">\n"
+            + "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n"
+            + "        </gml:LineString>\n" + "      </dpn:geometry>\n" + "    </dpn:RouteLink>";
 
     @Test
-    public void testSurface() throws XMLStreamException, FactoryException, TransformException
-    {
+    public void testSurface() throws XMLStreamException, FactoryException, TransformException {
         OsDpnWay way = getOsDpnWay(surfaceWay);
         assertFalse("Way should not have a tunnel", way.hasTag("tunnel", "yes"));
         assertFalse("Way should not have a bridge", way.hasTag("bridge", "yes"));
     }
 
     @Test
-    public void testWithinAccessLand() throws XMLStreamException, FactoryException, TransformException
-    {
+    public void testWithinAccessLand() throws XMLStreamException, FactoryException, TransformException {
         OsDpnWay way = getOsDpnWay(unmadeNoPhysicalButWithinAccessLand);
-        assertTrue("Should allow walking as within access land even though no other right of way declared", way.hasTag("foot", "yes"));
+        assertTrue("Should allow walking as within access land even though no other right of way declared",
+                way.hasTag("foot", "yes"));
     }
 
     @Test
-    public void testBelowSurfaceTunnel() throws XMLStreamException, FactoryException, TransformException
-    {
+    public void testBelowSurfaceTunnel() throws XMLStreamException, FactoryException, TransformException {
         OsDpnWay way = getOsDpnWay(tunnelWay);
         assertTrue("Way should have a tunnel", way.hasTag("tunnel", "yes"));
         assertFalse("Way should not have a bridge", way.hasTag("bridge", "yes"));
@@ -621,13 +683,31 @@ public void testRightOfWayRestrictedByway() throws XMLStreamException, FactoryEx
         OsDpnWay way = getOsDpnWay(restrictedByWay);
         assertTrue("Way should be designation bridleway", way.hasTag("designation", "restricted_byway"));
     }
-    
+
     @Test
     public void testPotentialHazardMud() throws XMLStreamException, FactoryException, TransformException {
         OsDpnWay way = getOsDpnWay(hazardMud);
         assertTrue("Way should be tagged natural=mud", way.hasTag("natural", "mud"));
     }
 
+    @Test(expected = InvalidPotentialHazardException.class)
+    public void testPotentialHazardInvalid() throws XMLStreamException, FactoryException, TransformException {
+        OsDpnWay.THROW_EXCEPTION_ON_INVALID_HAZARD = true;
+        getOsDpnWay(hazardInvalid);
+    }
+
+    @Test
+    public void testPotentialHazardMultipleOneLine() throws XMLStreamException, FactoryException, TransformException {
+        OsDpnWay way = getOsDpnWay(hazardMultipleOneLine);
+        assertTrue("Mud and Scree", way.hasTag("natural", "mud,scree"));
+    }
+
+    @Test
+    public void testPotentialHazardMultiple() throws XMLStreamException, FactoryException, TransformException {
+        OsDpnWay way = getOsDpnWay(hazardMultiple);
+        assertTrue("Mud", way.hasTag("natural", "mud,scree"));
+    }
+
     @Test
     public void testMadeSealed() throws XMLStreamException, FactoryException, TransformException {
         OsDpnWay way = getOsDpnWay(madeSealed);
@@ -641,7 +721,8 @@ public void testMadeUnsealed() throws XMLStreamException, FactoryException, Tran
     }
 
     /**
-     * With no better information to go on this will need to be classified as the same as Made Unsealed
+     * With no better information to go on this will need to be classified as
+     * the same as Made Unsealed
      *
      */
     @Test
@@ -667,32 +748,32 @@ public void testAdoptedOtherCycleRoute() throws XMLStreamException, FactoryExcep
         OsDpnWay way = getOsDpnWay(adoptedOtherCycleRoute);
         assertTrue("Way bicycle accessible", way.hasTag("bicycle", "yes"));
     }
-    
+
     @Test
     public void testARoad() throws XMLStreamException, FactoryException, TransformException {
         OsDpnWay way = getOsDpnWay(aRoad);
         assertTrue("A Roads are primary", way.hasTag("highway", "primary"));
     }
-    
+
     @Test
     public void testBRoad() throws XMLStreamException, FactoryException, TransformException {
         OsDpnWay way = getOsDpnWay(bRoad);
         assertTrue("B Roads are secondary", way.hasTag("highway", "secondary"));
     }
-    
+
     @Test
     public void testAlley() throws XMLStreamException, FactoryException, TransformException {
         OsDpnWay way = getOsDpnWay(alley);
         assertTrue("Alleys are service roads", way.hasTag("highway", "service"));
         assertTrue("Alleys are service roads", way.hasTag("service", "alley"));
     }
-    
+
     @Test
     public void testPrivate() throws XMLStreamException, FactoryException, TransformException {
         OsDpnWay way = getOsDpnWay(privateRoad);
         assertTrue(way.hasTag("highway", "private"));
     }
-    
+
     @Test
     public void testPath() throws XMLStreamException, FactoryException, TransformException {
         OsDpnWay way = getOsDpnWay(path);
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/QuarryOrPitTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/QuarryOrPitTest.java
deleted file mode 100644
index f64554a70a..0000000000
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/QuarryOrPitTest.java
+++ /dev/null
@@ -1,35 +0,0 @@
-package com.graphhopper.reader.osgb.dpn;
-
-import static org.mockito.Mockito.verify;
-
-import org.junit.Before;
-import org.junit.BeforeClass;
-import org.junit.Ignore;
-import org.junit.Test;
-import org.mockito.Mock;
-import org.mockito.MockitoAnnotations;
-
-import com.graphhopper.reader.Way;
-
-public class QuarryOrPitTest {
-	 static OsDpnOsmAttributeMappingVisitor visitor;
-	    @Mock
-	    Way way;
-
-	    @BeforeClass
-	    public static void createVisitor() {
-	        visitor = new QuarryOrPit();
-	    }
-
-	    @Before
-	    public void init() {
-	        MockitoAnnotations.initMocks(this);
-	    }
-
-	    @Test
-	    public void testVisitWayAttribute() throws Exception {
-	        visitor.visitWayAttribute("quarryorpit", way);
-	        verify(way).setTag("natural", "excavation");
-	    }
-
-}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/RockTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/RockTest.java
deleted file mode 100644
index 230a282ac3..0000000000
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/RockTest.java
+++ /dev/null
@@ -1,34 +0,0 @@
-package com.graphhopper.reader.osgb.dpn;
-
-import static org.mockito.Mockito.verify;
-
-import org.junit.Before;
-import org.junit.BeforeClass;
-import org.junit.Test;
-import org.mockito.Mock;
-import org.mockito.MockitoAnnotations;
-
-import com.graphhopper.reader.Way;
-
-public class RockTest {
-	 static OsDpnOsmAttributeMappingVisitor visitor;
-	    @Mock
-	    Way way;
-
-	    @BeforeClass
-	    public static void createVisitor() {
-	        visitor = new Rock();
-	    }
-
-	    @Before
-	    public void init() {
-	        MockitoAnnotations.initMocks(this);
-	    }
-
-	    @Test
-	    public void testVisitWayAttribute() throws Exception {
-	        visitor.visitWayAttribute("rock", way);
-	        verify(way).setTag("natural", "rocks");
-	    }
-
-}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/SandTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/SandTest.java
deleted file mode 100644
index 611c85e9b9..0000000000
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/SandTest.java
+++ /dev/null
@@ -1,34 +0,0 @@
-package com.graphhopper.reader.osgb.dpn;
-
-import static org.mockito.Mockito.verify;
-
-import org.junit.Before;
-import org.junit.BeforeClass;
-import org.junit.Test;
-import org.mockito.Mock;
-import org.mockito.MockitoAnnotations;
-
-import com.graphhopper.reader.Way;
-
-public class SandTest {
-	 static OsDpnOsmAttributeMappingVisitor visitor;
-	    @Mock
-	    Way way;
-
-	    @BeforeClass
-	    public static void createVisitor() {
-	        visitor = new Sand();
-	    }
-
-	    @Before
-	    public void init() {
-	        MockitoAnnotations.initMocks(this);
-	    }
-
-	    @Test
-	    public void testVisitWayAttribute() throws Exception {
-	        visitor.visitWayAttribute("sand", way);
-	        verify(way).setTag("natural", "sand");
-	    }
-
-}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/ScreeTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/ScreeTest.java
deleted file mode 100644
index 671ccaa1fb..0000000000
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/ScreeTest.java
+++ /dev/null
@@ -1,34 +0,0 @@
-package com.graphhopper.reader.osgb.dpn;
-
-import static org.mockito.Mockito.verify;
-
-import org.junit.Before;
-import org.junit.BeforeClass;
-import org.junit.Test;
-import org.mockito.Mock;
-import org.mockito.MockitoAnnotations;
-
-import com.graphhopper.reader.Way;
-
-public class ScreeTest {
-	 static OsDpnOsmAttributeMappingVisitor visitor;
-	    @Mock
-	    Way way;
-
-	    @BeforeClass
-	    public static void createVisitor() {
-	        visitor = new Scree();
-	    }
-
-	    @Before
-	    public void init() {
-	        MockitoAnnotations.initMocks(this);
-	    }
-
-	    @Test
-	    public void testVisitWayAttribute() throws Exception {
-	        visitor.visitWayAttribute("scree", way);
-	        verify(way).setTag("natural", "scree");
-	    }
-
-}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/ShingleTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/ShingleTest.java
deleted file mode 100644
index 0f7fcbd719..0000000000
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/ShingleTest.java
+++ /dev/null
@@ -1,34 +0,0 @@
-package com.graphhopper.reader.osgb.dpn;
-
-import static org.mockito.Mockito.verify;
-
-import org.junit.Before;
-import org.junit.BeforeClass;
-import org.junit.Test;
-import org.mockito.Mock;
-import org.mockito.MockitoAnnotations;
-
-import com.graphhopper.reader.Way;
-
-public class ShingleTest {
-	 static OsDpnOsmAttributeMappingVisitor visitor;
-	    @Mock
-	    Way way;
-
-	    @BeforeClass
-	    public static void createVisitor() {
-	        visitor = new Shingle();
-	    }
-
-	    @Before
-	    public void init() {
-	        MockitoAnnotations.initMocks(this);
-	    }
-
-	    @Test
-	    public void testVisitWayAttribute() throws Exception {
-	        visitor.visitWayAttribute("shingle", way);
-	        verify(way).setTag("natural", "shingle");
-	    }
-
-}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/SpoilTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/SpoilTest.java
deleted file mode 100644
index d9f6e438aa..0000000000
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/SpoilTest.java
+++ /dev/null
@@ -1,34 +0,0 @@
-package com.graphhopper.reader.osgb.dpn;
-
-import static org.mockito.Mockito.verify;
-
-import org.junit.Before;
-import org.junit.BeforeClass;
-import org.junit.Test;
-import org.mockito.Mock;
-import org.mockito.MockitoAnnotations;
-
-import com.graphhopper.reader.Way;
-
-public class SpoilTest {
-	 static OsDpnOsmAttributeMappingVisitor visitor;
-	    @Mock
-	    Way way;
-
-	    @BeforeClass
-	    public static void createVisitor() {
-	        visitor = new Spoil();
-	    }
-
-	    @Before
-	    public void init() {
-	        MockitoAnnotations.initMocks(this);
-	    }
-
-	    @Test
-	    public void testVisitWayAttribute() throws Exception {
-	        visitor.visitWayAttribute("spoil", way);
-	        verify(way).setTag("man_made", "spoil_heap");
-	    }
-
-}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/TidalWaterTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/TidalWaterTest.java
deleted file mode 100644
index 9024c2d9b9..0000000000
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/TidalWaterTest.java
+++ /dev/null
@@ -1,35 +0,0 @@
-package com.graphhopper.reader.osgb.dpn;
-
-import static org.mockito.Mockito.verify;
-
-import org.junit.Before;
-import org.junit.BeforeClass;
-import org.junit.Test;
-import org.mockito.Mock;
-import org.mockito.MockitoAnnotations;
-
-import com.graphhopper.reader.Way;
-
-public class TidalWaterTest {
-	 static OsDpnOsmAttributeMappingVisitor visitor;
-	    @Mock
-	    Way way;
-
-	    @BeforeClass
-	    public static void createVisitor() {
-	        visitor = new TidalWater();
-	    }
-
-	    @Before
-	    public void init() {
-	        MockitoAnnotations.initMocks(this);
-	    }
-
-	    @Test
-	    public void testVisitWayAttribute() throws Exception {
-	        visitor.visitWayAttribute("tidalwater", way);
-	        verify(way).setTag("natural", "water");
-	        verify(way).setTag("tidal", "yes");
-	    }
-
-}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByNationalCycleRouteTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByNationalCycleRouteTest.java
new file mode 100644
index 0000000000..bfc3991d64
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByNationalCycleRouteTest.java
@@ -0,0 +1,39 @@
+package com.graphhopper.reader.osgb.dpn.additionalRights;
+
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
+
+public class AdoptedByNationalCycleRouteTest {
+    static OsDpnOsmAttributeMappingVisitor visitor;
+    @Mock
+    Way way;
+
+    @BeforeClass
+    public static void createVisitor() {
+        visitor = new AdoptedByNationalCycleRoute();
+    }
+
+    @Before
+    public void init() {
+        MockitoAnnotations.initMocks(this);
+    }
+
+    @Test
+    public void testVisitWayAttribute() {
+        visitor.visitWayAttribute("adoptedbynationalcycleroute", way);
+        verify(way).setTag("network", "ncn");
+        verify(way).setTag("foot", "yes");
+        verify(way).setTag("bicycle", "yes");
+        verifyNoMoreInteractions(way);
+    }
+
+}
\ No newline at end of file
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByOtherCycleRouteTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByOtherCycleRouteTest.java
new file mode 100644
index 0000000000..74b5047ae0
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByOtherCycleRouteTest.java
@@ -0,0 +1,39 @@
+package com.graphhopper.reader.osgb.dpn.additionalRights;
+
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
+
+public class AdoptedByOtherCycleRouteTest {
+    static OsDpnOsmAttributeMappingVisitor visitor;
+    @Mock
+    Way way;
+
+    @BeforeClass
+    public static void createVisitor() {
+        visitor = new AdoptedByOtherCycleRoute();
+    }
+
+    @Before
+    public void init() {
+        MockitoAnnotations.initMocks(this);
+    }
+
+    @Test
+    public void testVisitWayAttribute() {
+        visitor.visitWayAttribute("adoptedbyothercycleroute", way);
+        verify(way).setTag("network", "lcn");
+        verify(way).setTag("foot", "yes");
+        verify(way).setTag("bicycle", "yes");
+        verifyNoMoreInteractions(way);
+    }
+
+}
\ No newline at end of file
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByRecreationalRouteTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByRecreationalRouteTest.java
new file mode 100644
index 0000000000..a4e664ceb9
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByRecreationalRouteTest.java
@@ -0,0 +1,38 @@
+package com.graphhopper.reader.osgb.dpn.additionalRights;
+
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
+
+public class AdoptedByRecreationalRouteTest {
+    static OsDpnOsmAttributeMappingVisitor visitor;
+    @Mock
+    Way way;
+
+    @BeforeClass
+    public static void createVisitor() {
+        visitor = new AdoptedByRecreationalRoute();
+    }
+
+    @Before
+    public void init() {
+        MockitoAnnotations.initMocks(this);
+    }
+
+    @Test
+    public void testVisitWayAttribute() {
+        visitor.visitWayAttribute("adoptedbyrecreationalroute", way);
+        verify(way).setTag("network", "lwn");
+        verify(way).setTag("foot", "yes");
+        verifyNoMoreInteractions(way);
+    }
+
+}
\ No newline at end of file
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/additionalRights/WithinAccessLandTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/additionalRights/WithinAccessLandTest.java
new file mode 100644
index 0000000000..6b7cbdb11d
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/additionalRights/WithinAccessLandTest.java
@@ -0,0 +1,37 @@
+package com.graphhopper.reader.osgb.dpn.additionalRights;
+
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
+
+public class WithinAccessLandTest {
+    static OsDpnOsmAttributeMappingVisitor visitor;
+    @Mock
+    Way way;
+
+    @BeforeClass
+    public static void createVisitor() {
+        visitor = new WithinAccessLand();
+    }
+
+    @Before
+    public void init() {
+        MockitoAnnotations.initMocks(this);
+    }
+
+    @Test
+    public void testVisitWayAttribute() {
+        visitor.visitWayAttribute("withinaccessland", way);
+        verify(way).setTag("foot", "yes");
+        verifyNoMoreInteractions(way);
+    }
+
+}
\ No newline at end of file
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/BouldersTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/BouldersTest.java
similarity index 63%
rename from core/src/test/java/com/graphhopper/reader/osgb/dpn/BouldersTest.java
rename to core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/BouldersTest.java
index 0bacae1d32..e3eb8cf0bc 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/BouldersTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/BouldersTest.java
@@ -1,6 +1,7 @@
-package com.graphhopper.reader.osgb.dpn;
+package com.graphhopper.reader.osgb.dpn.potentialHazards;
 
 import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
 
 import org.junit.Before;
 import org.junit.BeforeClass;
@@ -9,6 +10,7 @@
 import org.mockito.MockitoAnnotations;
 
 import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
 
 public class BouldersTest {
     static OsDpnOsmAttributeMappingVisitor visitor;
@@ -28,7 +30,10 @@ public void init() {
     @Test
     public void testVisitWayAttribute() throws Exception {
         visitor.visitWayAttribute("boulders", way);
-        verify(way).setTag("natural", "boulders");  // Not an osm tag but what makes sense for dpn
+        verify(way).getTag("natural");
+        verify(way).setTag("natural", "boulders"); // Not an osm tag but what
+        // makes sense for dpn
+        verifyNoMoreInteractions(way);
     }
 
 }
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/CliffTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/CliffTest.java
similarity index 71%
rename from core/src/test/java/com/graphhopper/reader/osgb/dpn/CliffTest.java
rename to core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/CliffTest.java
index bd427b6703..ef8bfb6266 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/CliffTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/CliffTest.java
@@ -1,6 +1,7 @@
-package com.graphhopper.reader.osgb.dpn;
+package com.graphhopper.reader.osgb.dpn.potentialHazards;
 
 import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
 
 import org.junit.Before;
 import org.junit.BeforeClass;
@@ -9,6 +10,7 @@
 import org.mockito.MockitoAnnotations;
 
 import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
 
 public class CliffTest {
     static OsDpnOsmAttributeMappingVisitor visitor;
@@ -28,6 +30,8 @@ public void init() {
     @Test
     public void testVisitWayAttribute() throws Exception {
         visitor.visitWayAttribute("cliff", way);
+        verify(way).getTag("natural");
         verify(way).setTag("natural", "cliff");
+        verifyNoMoreInteractions(way);
     }
 }
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/ForeshoreTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/ForeshoreTest.java
new file mode 100644
index 0000000000..95d88b8f35
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/ForeshoreTest.java
@@ -0,0 +1,38 @@
+package com.graphhopper.reader.osgb.dpn.potentialHazards;
+
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
+
+public class ForeshoreTest {
+    static OsDpnOsmAttributeMappingVisitor visitor;
+    @Mock
+    Way way;
+
+    @BeforeClass
+    public static void createVisitor() {
+        visitor = new Foreshore();
+    }
+
+    @Before
+    public void init() {
+        MockitoAnnotations.initMocks(this);
+    }
+
+    @Test
+    public void testVisitWayAttribute() throws Exception {
+        visitor.visitWayAttribute("foreshore", way);
+        verify(way).getTag("water");
+        verify(way).setTag("water", "tidal");
+        verifyNoMoreInteractions(way);
+    }
+
+}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/InlandWaterTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/InlandWaterTest.java
new file mode 100644
index 0000000000..6e74406400
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/InlandWaterTest.java
@@ -0,0 +1,40 @@
+package com.graphhopper.reader.osgb.dpn.potentialHazards;
+
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
+
+public class InlandWaterTest {
+    static OsDpnOsmAttributeMappingVisitor visitor;
+    @Mock
+    Way way;
+
+    @BeforeClass
+    public static void createVisitor() {
+        visitor = new InlandWater();
+    }
+
+    @Before
+    public void init() {
+        MockitoAnnotations.initMocks(this);
+    }
+
+    @Test
+    public void testVisitWayAttribute() throws Exception {
+        visitor.visitWayAttribute("inlandwater", way);
+        verify(way).getTag("natural");
+        verify(way).setTag("natural", "water");
+        verify(way).getTag("tidal");
+        verify(way).setTag("tidal", "no");
+        verifyNoMoreInteractions(way);
+    }
+
+}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/MarshTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/MarshTest.java
new file mode 100644
index 0000000000..a341152db6
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/MarshTest.java
@@ -0,0 +1,38 @@
+package com.graphhopper.reader.osgb.dpn.potentialHazards;
+
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
+
+public class MarshTest {
+    static OsDpnOsmAttributeMappingVisitor visitor;
+    @Mock
+    Way way;
+
+    @BeforeClass
+    public static void createVisitor() {
+        visitor = new Marsh();
+    }
+
+    @Before
+    public void init() {
+        MockitoAnnotations.initMocks(this);
+    }
+
+    @Test
+    public void testVisitWayAttribute() throws Exception {
+        visitor.visitWayAttribute("marsh", way);
+        verify(way).getTag("wetland");
+        verify(way).setTag("wetland", "marsh");
+        verifyNoMoreInteractions(way);
+    }
+
+}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/MudTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/MudTest.java
new file mode 100644
index 0000000000..4193c88d22
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/MudTest.java
@@ -0,0 +1,38 @@
+package com.graphhopper.reader.osgb.dpn.potentialHazards;
+
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
+
+public class MudTest {
+    static OsDpnOsmAttributeMappingVisitor visitor;
+    @Mock
+    Way way;
+
+    @BeforeClass
+    public static void createVisitor() {
+        visitor = new Mud();
+    }
+
+    @Before
+    public void init() {
+        MockitoAnnotations.initMocks(this);
+    }
+
+    @Test
+    public void testVisitWayAttribute() throws Exception {
+        visitor.visitWayAttribute("mud", way);
+        verify(way).getTag("natural");
+        verify(way).setTag("natural", "mud");
+        verifyNoMoreInteractions(way);
+    }
+
+}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/QuarryOrPitTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/QuarryOrPitTest.java
new file mode 100644
index 0000000000..48a2070371
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/QuarryOrPitTest.java
@@ -0,0 +1,38 @@
+package com.graphhopper.reader.osgb.dpn.potentialHazards;
+
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
+
+public class QuarryOrPitTest {
+    static OsDpnOsmAttributeMappingVisitor visitor;
+    @Mock
+    Way way;
+
+    @BeforeClass
+    public static void createVisitor() {
+        visitor = new QuarryOrPit();
+    }
+
+    @Before
+    public void init() {
+        MockitoAnnotations.initMocks(this);
+    }
+
+    @Test
+    public void testVisitWayAttribute() throws Exception {
+        visitor.visitWayAttribute("quarryorpit", way);
+        verify(way).getTag("natural");
+        verify(way).setTag("natural", "excavation");
+        verifyNoMoreInteractions(way);
+    }
+
+}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/RockTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/RockTest.java
new file mode 100644
index 0000000000..04184a048b
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/RockTest.java
@@ -0,0 +1,38 @@
+package com.graphhopper.reader.osgb.dpn.potentialHazards;
+
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
+
+public class RockTest {
+    static OsDpnOsmAttributeMappingVisitor visitor;
+    @Mock
+    Way way;
+
+    @BeforeClass
+    public static void createVisitor() {
+        visitor = new Rock();
+    }
+
+    @Before
+    public void init() {
+        MockitoAnnotations.initMocks(this);
+    }
+
+    @Test
+    public void testVisitWayAttribute() throws Exception {
+        visitor.visitWayAttribute("rock", way);
+        verify(way).getTag("natural");
+        verify(way).setTag("natural", "rocks");
+        verifyNoMoreInteractions(way);
+    }
+
+}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/SandTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/SandTest.java
new file mode 100644
index 0000000000..d28d57e14b
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/SandTest.java
@@ -0,0 +1,38 @@
+package com.graphhopper.reader.osgb.dpn.potentialHazards;
+
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
+
+public class SandTest {
+    static OsDpnOsmAttributeMappingVisitor visitor;
+    @Mock
+    Way way;
+
+    @BeforeClass
+    public static void createVisitor() {
+        visitor = new Sand();
+    }
+
+    @Before
+    public void init() {
+        MockitoAnnotations.initMocks(this);
+    }
+
+    @Test
+    public void testVisitWayAttribute() throws Exception {
+        visitor.visitWayAttribute("sand", way);
+        verify(way).getTag("natural");
+        verify(way).setTag("natural", "sand");
+        verifyNoMoreInteractions(way);
+    }
+
+}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/ScreeTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/ScreeTest.java
new file mode 100644
index 0000000000..a95f4c1fc7
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/ScreeTest.java
@@ -0,0 +1,38 @@
+package com.graphhopper.reader.osgb.dpn.potentialHazards;
+
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
+
+public class ScreeTest {
+    static OsDpnOsmAttributeMappingVisitor visitor;
+    @Mock
+    Way way;
+
+    @BeforeClass
+    public static void createVisitor() {
+        visitor = new Scree();
+    }
+
+    @Before
+    public void init() {
+        MockitoAnnotations.initMocks(this);
+    }
+
+    @Test
+    public void testVisitWayAttribute() throws Exception {
+        visitor.visitWayAttribute("scree", way);
+        verify(way).getTag("natural");
+        verify(way).setTag("natural", "scree");
+        verifyNoMoreInteractions(way);
+    }
+
+}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/ShingleTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/ShingleTest.java
new file mode 100644
index 0000000000..a1d7e1951b
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/ShingleTest.java
@@ -0,0 +1,38 @@
+package com.graphhopper.reader.osgb.dpn.potentialHazards;
+
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
+
+public class ShingleTest {
+    static OsDpnOsmAttributeMappingVisitor visitor;
+    @Mock
+    Way way;
+
+    @BeforeClass
+    public static void createVisitor() {
+        visitor = new Shingle();
+    }
+
+    @Before
+    public void init() {
+        MockitoAnnotations.initMocks(this);
+    }
+
+    @Test
+    public void testVisitWayAttribute() throws Exception {
+        visitor.visitWayAttribute("shingle", way);
+        verify(way).getTag("natural");
+        verify(way).setTag("natural", "shingle");
+        verifyNoMoreInteractions(way);
+    }
+
+}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/SpoilTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/SpoilTest.java
new file mode 100644
index 0000000000..02d8454fb0
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/SpoilTest.java
@@ -0,0 +1,38 @@
+package com.graphhopper.reader.osgb.dpn.potentialHazards;
+
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
+
+public class SpoilTest {
+    static OsDpnOsmAttributeMappingVisitor visitor;
+    @Mock
+    Way way;
+
+    @BeforeClass
+    public static void createVisitor() {
+        visitor = new Spoil();
+    }
+
+    @Before
+    public void init() {
+        MockitoAnnotations.initMocks(this);
+    }
+
+    @Test
+    public void testVisitWayAttribute() throws Exception {
+        visitor.visitWayAttribute("spoil", way);
+        verify(way).getTag("man_made");
+        verify(way).setTag("man_made", "spoil_heap");
+        verifyNoMoreInteractions(way);
+    }
+
+}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/TidalWaterTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/TidalWaterTest.java
new file mode 100644
index 0000000000..99e6d72809
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/TidalWaterTest.java
@@ -0,0 +1,40 @@
+package com.graphhopper.reader.osgb.dpn.potentialHazards;
+
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
+
+public class TidalWaterTest {
+    static OsDpnOsmAttributeMappingVisitor visitor;
+    @Mock
+    Way way;
+
+    @BeforeClass
+    public static void createVisitor() {
+        visitor = new TidalWater();
+    }
+
+    @Before
+    public void init() {
+        MockitoAnnotations.initMocks(this);
+    }
+
+    @Test
+    public void testVisitWayAttribute() throws Exception {
+        visitor.visitWayAttribute("tidalwater", way);
+        verify(way).getTag("natural");
+        verify(way).getTag("tidal");
+        verify(way).setTag("natural", "water");
+        verify(way).setTag("tidal", "yes");
+        verifyNoMoreInteractions(way);
+    }
+
+}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/BridleWayTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/BridleWayTest.java
similarity index 71%
rename from core/src/test/java/com/graphhopper/reader/osgb/dpn/BridleWayTest.java
rename to core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/BridleWayTest.java
index e9fd0a3d81..4c33dcc736 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/BridleWayTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/BridleWayTest.java
@@ -1,6 +1,7 @@
-package com.graphhopper.reader.osgb.dpn;
+package com.graphhopper.reader.osgb.dpn.rightOfWay;
 
 import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
 
 import org.junit.Before;
 import org.junit.BeforeClass;
@@ -9,6 +10,7 @@
 import org.mockito.MockitoAnnotations;
 
 import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
 
 public class BridleWayTest {
     static OsDpnOsmAttributeMappingVisitor visitor;
@@ -31,6 +33,9 @@ public void testVisitWayAttribute() {
         verify(way).setTag("designation", "public_bridleway");
         verify(way).setTag("highway", "bridleway");
         verify(way).setTag("foot", "yes");
+        verify(way).setTag("horse", "yes");
+        verify(way).setTag("bicycle", "yes");
+        verifyNoMoreInteractions(way);
     }
 
 }
\ No newline at end of file
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/BywayOpenToAllTrafficTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/BywayOpenToAllTrafficTest.java
similarity index 77%
rename from core/src/test/java/com/graphhopper/reader/osgb/dpn/BywayOpenToAllTrafficTest.java
rename to core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/BywayOpenToAllTrafficTest.java
index b809caa4c1..3d3f0a35f3 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/BywayOpenToAllTrafficTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/BywayOpenToAllTrafficTest.java
@@ -1,6 +1,7 @@
-package com.graphhopper.reader.osgb.dpn;
+package com.graphhopper.reader.osgb.dpn.rightOfWay;
 
 import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
 
 import org.junit.Before;
 import org.junit.BeforeClass;
@@ -9,6 +10,7 @@
 import org.mockito.MockitoAnnotations;
 
 import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
 
 public class BywayOpenToAllTrafficTest {
 
@@ -34,5 +36,7 @@ public void testVisitWayAttribute() throws Exception {
         verify(way).setTag("foot", "yes");
         verify(way).setTag("horse", "yes");
         verify(way).setTag("bicycle", "yes");
+        verify(way).setTag("motor_vehicle", "yes");
+        verifyNoMoreInteractions(way);
     }
 }
\ No newline at end of file
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/CorePathTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/CorePathTest.java
new file mode 100644
index 0000000000..958cca220b
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/CorePathTest.java
@@ -0,0 +1,35 @@
+package com.graphhopper.reader.osgb.dpn.rightOfWay;
+
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
+
+public class CorePathTest {
+    static OsDpnOsmAttributeMappingVisitor visitor;
+    @Mock
+    Way way;
+
+    @BeforeClass
+    public static void createVisitor() {
+        visitor = new BridleWay();
+    }
+
+    @Before
+    public void init() {
+        MockitoAnnotations.initMocks(this);
+    }
+
+    @Test
+    public void testVisitWayAttribute() {
+        visitor.visitWayAttribute("corepath", way);
+        verifyNoMoreInteractions(way);
+    }
+
+}
\ No newline at end of file
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/FootpathTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/FootpathTest.java
similarity index 66%
rename from core/src/test/java/com/graphhopper/reader/osgb/dpn/FootpathTest.java
rename to core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/FootpathTest.java
index c13efb38a7..89f63a5721 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/FootpathTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/FootpathTest.java
@@ -1,6 +1,7 @@
-package com.graphhopper.reader.osgb.dpn;
+package com.graphhopper.reader.osgb.dpn.rightOfWay;
 
 import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
 
 import org.junit.Before;
 import org.junit.BeforeClass;
@@ -9,6 +10,7 @@
 import org.mockito.MockitoAnnotations;
 
 import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
 
 public class FootpathTest {
     static OsDpnOsmAttributeMappingVisitor visitor;
@@ -16,24 +18,22 @@
     Way way;
 
     @BeforeClass
-    public static void createVisitor()
-    {
+    public static void createVisitor() {
         visitor = new Footpath();
     }
 
     @Before
-    public void init()
-    {
+    public void init() {
         MockitoAnnotations.initMocks(this);
     }
 
     @Test
-    public void testVisitWayAttribute()
-    {
+    public void testVisitWayAttribute() {
         visitor.visitWayAttribute("footpath", way);
         verify(way).setTag("designation", "public_footpath");
         verify(way).setTag("highway", "footway");
         verify(way).setTag("foot", "yes");
+        verifyNoMoreInteractions(way);
     }
 
 }
\ No newline at end of file
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/NoneTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/NoneTest.java
similarity index 76%
rename from core/src/test/java/com/graphhopper/reader/osgb/dpn/NoneTest.java
rename to core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/NoneTest.java
index 98d4612f1d..8c790c1835 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/NoneTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/NoneTest.java
@@ -1,14 +1,16 @@
-package com.graphhopper.reader.osgb.dpn;
+package com.graphhopper.reader.osgb.dpn.rightOfWay;
+
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
 
-import com.graphhopper.reader.Way;
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.Test;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
 
-import static org.junit.Assert.*;
-import static org.mockito.Mockito.verify;
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
 
 public class NoneTest {
     static OsDpnOsmAttributeMappingVisitor visitor;
@@ -31,6 +33,7 @@ public void testVisitWayAttribute() {
         verify(way).setTag("foot", "no");
         verify(way).setTag("bicycle", "no");
         verify(way).setTag("horse", "no");
+        verifyNoMoreInteractions(way);
     }
 
 }
\ No newline at end of file
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/NormalPermissiveUsesTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/NormalPermissiveUsesTest.java
new file mode 100644
index 0000000000..6c43a58663
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/NormalPermissiveUsesTest.java
@@ -0,0 +1,39 @@
+package com.graphhopper.reader.osgb.dpn.rightOfWay;
+
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
+
+public class NormalPermissiveUsesTest {
+    static OsDpnOsmAttributeMappingVisitor visitor;
+    @Mock
+    Way way;
+
+    @BeforeClass
+    public static void createVisitor() {
+        visitor = new NormalPermissibleUses();
+    }
+
+    @Before
+    public void init() {
+        MockitoAnnotations.initMocks(this);
+    }
+
+    @Test
+    public void testVisitWayAttribute() {
+        visitor.visitWayAttribute("normalpermissibleuses", way);
+        verify(way).setTag("foot", "yes");
+        verify(way).setTag("horse", "yes");
+        verify(way).setTag("bicycle", "yes");
+        verifyNoMoreInteractions(way);
+    }
+
+}
\ No newline at end of file
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/OtherRouteWithPublicAccessTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/OtherRouteWithPublicAccessTest.java
similarity index 76%
rename from core/src/test/java/com/graphhopper/reader/osgb/dpn/OtherRouteWithPublicAccessTest.java
rename to core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/OtherRouteWithPublicAccessTest.java
index ae03268def..d077b2bbaa 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/OtherRouteWithPublicAccessTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/OtherRouteWithPublicAccessTest.java
@@ -1,13 +1,16 @@
-package com.graphhopper.reader.osgb.dpn;
+package com.graphhopper.reader.osgb.dpn.rightOfWay;
+
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
 
-import com.graphhopper.reader.Way;
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.Test;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
 
-import static org.mockito.Mockito.verify;
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
 
 public class OtherRouteWithPublicAccessTest {
     static OsDpnOsmAttributeMappingVisitor visitor;
@@ -28,6 +31,7 @@ public void init() {
     public void testVisitWayAttribute() {
         visitor.visitWayAttribute("otherroutewithpublicaccess", way);
         verify(way).setTag("foot", "yes");
+        verifyNoMoreInteractions(way);
     }
 
 }
\ No newline at end of file
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/PermissiveBridleWayTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/PermissiveBridleWayTest.java
similarity index 69%
rename from core/src/test/java/com/graphhopper/reader/osgb/dpn/PermissiveBridleWayTest.java
rename to core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/PermissiveBridleWayTest.java
index c98e6b7917..1158e464a7 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/PermissiveBridleWayTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/PermissiveBridleWayTest.java
@@ -1,6 +1,7 @@
-package com.graphhopper.reader.osgb.dpn;
+package com.graphhopper.reader.osgb.dpn.rightOfWay;
 
 import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
 
 import org.junit.Before;
 import org.junit.BeforeClass;
@@ -9,6 +10,7 @@
 import org.mockito.MockitoAnnotations;
 
 import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
 
 public class PermissiveBridleWayTest {
     static OsDpnOsmAttributeMappingVisitor visitor;
@@ -16,25 +18,23 @@
     Way way;
 
     @BeforeClass
-    public static void createVisitor()
-    {
+    public static void createVisitor() {
         visitor = new PermissiveBridleWay();
     }
 
     @Before
-    public void init()
-    {
+    public void init() {
         MockitoAnnotations.initMocks(this);
     }
 
     @Test
-    public void testVisitWayAttribute()
-    {
+    public void testVisitWayAttribute() {
         visitor.visitWayAttribute("permissivebridleway", way);
         verify(way).setTag("highway", "bridleway");
         verify(way).setTag("horse", "permissive");
         verify(way).setTag("bicycle", "permissive");
         verify(way).setTag("foot", "permissive");
+        verifyNoMoreInteractions(way);
     }
 
 }
\ No newline at end of file
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/PermissivePathTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/PermissivePathTest.java
similarity index 76%
rename from core/src/test/java/com/graphhopper/reader/osgb/dpn/PermissivePathTest.java
rename to core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/PermissivePathTest.java
index dcc09b373c..9c16b6f1d3 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/PermissivePathTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/PermissivePathTest.java
@@ -1,6 +1,7 @@
-package com.graphhopper.reader.osgb.dpn;
+package com.graphhopper.reader.osgb.dpn.rightOfWay;
 
 import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
 
 import org.junit.Before;
 import org.junit.BeforeClass;
@@ -9,6 +10,7 @@
 import org.mockito.MockitoAnnotations;
 
 import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
 
 public class PermissivePathTest {
 
@@ -30,5 +32,6 @@ public void init() {
     public void testVisitWayAttribute() throws Exception {
         visitor.visitWayAttribute("permissivepath", way);
         verify(way).setTag("foot", "permissive");
+        verifyNoMoreInteractions(way);
     }
 }
\ No newline at end of file
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/RestrictedBywayTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/RestrictedBywayTest.java
similarity index 59%
rename from core/src/test/java/com/graphhopper/reader/osgb/dpn/RestrictedBywayTest.java
rename to core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/RestrictedBywayTest.java
index 39ba29421e..3b2714606f 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/RestrictedBywayTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/RestrictedBywayTest.java
@@ -1,6 +1,7 @@
-package com.graphhopper.reader.osgb.dpn;
+package com.graphhopper.reader.osgb.dpn.rightOfWay;
 
 import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
 
 import org.junit.Before;
 import org.junit.BeforeClass;
@@ -9,6 +10,7 @@
 import org.mockito.MockitoAnnotations;
 
 import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
 
 public class RestrictedBywayTest {
     static OsDpnOsmAttributeMappingVisitor visitor;
@@ -16,23 +18,24 @@
     Way way;
 
     @BeforeClass
-    public static void createVisitor()
-    {
+    public static void createVisitor() {
         visitor = new RestrictedByway();
     }
 
     @Before
-    public void init()
-    {
+    public void init() {
         MockitoAnnotations.initMocks(this);
     }
 
     @Test
-    public void testVisitWayAttribute() throws Exception
-    {
+    public void testVisitWayAttribute() throws Exception {
         visitor.visitWayAttribute("restrictedbyway", way);
         verify(way).setTag("designation", "restricted_byway");
         verify(way).setTag("highway", "track");
         verify(way).setTag("motor_vehicle", "no");
+        verify(way).setTag("foot", "yes");
+        verify(way).setTag("horse", "yes");
+        verify(way).setTag("bicycle", "yes");
+        verifyNoMoreInteractions(way);
     }
 }
\ No newline at end of file
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/hn/OsHnReaderTest.java b/core/src/test/java/com/graphhopper/reader/osgb/hn/OsHnReaderTest.java
index 6f34b77429..7848998b49 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/hn/OsHnReaderTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/hn/OsHnReaderTest.java
@@ -53,12 +53,13 @@ protected void flush()
      */
     @Test
     public void testMotorwayARoadNetwork_NoHighwaysNetworkData() {
+        System.out.println("===>>> testMotorwayARoadNetwork_NoHighwaysNetworkData()");
         String graphLoc = "./target/output/testMotorwayARoadNetwork_NoHighwaysNetworkData/os-itn-hn-test-network-gh";
         String inputFile = "./src/test/resources/com/graphhopper/reader/os-itn-hn-test-network.xml";
         GraphHopper graphHopper = new GraphHopper().setInMemory().setOSMFile(inputFile).setGraphHopperLocation(graphLoc).setCHEnable(false).setEncodingManager(encodingManager).setAsItnReader();
         graphHopper.importOrLoad();
         GraphStorage graph = graphHopper.getGraph();
-        printNodes(graph.createEdgeExplorer(carOutEdges), 6);
+        //        printNodes(graph.createEdgeExplorer(carOutEdges), 6);
         testNodes(graph);
         // 79 => 295000.000 90000.000 = -3.49   50.70
         // 80 => 290000.000,90000.000 = -3.56   50.70
@@ -88,6 +89,7 @@ public void testMotorwayARoadNetwork_NoHighwaysNetworkData() {
      */
     @Test
     public void testMotorwayARoadNetwork_WithHighwaysNetworkData() {
+        System.out.println("===>>> testMotorwayARoadNetwork_WithHighwaysNetworkData()");
         String graphLoc = "./target/output/testMotorwayARoadNetwork_WithHighwaysNetworkData/os-itn-hn-test-network-gh";
         String inputFile = "./src/test/resources/com/graphhopper/reader/os-itn-hn-test-network.xml";
 
@@ -105,7 +107,7 @@ public void testMotorwayARoadNetwork_WithHighwaysNetworkData() {
         graphHopper.importOrLoad();
         GraphStorage graph = graphHopper.getGraph();
 
-        printNodes(graph.createEdgeExplorer(carOutEdges), 6);
+        //        printNodes(graph.createEdgeExplorer(carOutEdges), 6);
         testNodes(graph);
         // 79 => 295000.000 90000.000 = -3.49   50.70
         // 80 => 290000.000,90000.000 = -3.56   50.70
diff --git a/core/src/test/java/com/graphhopper/routing/util/OsFlagUtilsTest.java b/core/src/test/java/com/graphhopper/routing/util/OsFlagUtilsTest.java
new file mode 100644
index 0000000000..fcb1bab6f8
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/routing/util/OsFlagUtilsTest.java
@@ -0,0 +1,114 @@
+package com.graphhopper.routing.util;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+import org.junit.Before;
+import org.junit.Test;
+
+import com.graphhopper.reader.Way;
+
+public class OsFlagUtilsTest {
+
+    private Way testWay = null;
+
+    @Before
+    public void setup() {
+        testWay = new Way() {
+            private final Map<String, Object> properties = new HashMap<>();
+
+            @Override
+            public void setTag(String name, Object value) {
+                properties.put(name, value);
+            }
+
+            @Override
+            public String getTag(String name) {
+                Object object = properties.get(name);
+                return (null != object) ? (String) object.toString() : null;
+            }
+
+            @Override
+            public <T> T getTag(String key, T defaultValue) {
+                // TODO Auto-generated method stub
+                return null;
+            }
+
+            @Override
+            public boolean hasTags() {
+                // TODO Auto-generated method stub
+                return false;
+            }
+
+            @Override
+            public boolean hasTag(String key, String... values) {
+                // TODO Auto-generated method stub
+                return false;
+            }
+
+            @Override
+            public boolean hasTag(String key, Object value) {
+                // TODO Auto-generated method stub
+                return false;
+            }
+
+            @Override
+            public boolean hasTag(String key, Set<String> values) {
+                // TODO Auto-generated method stub
+                return false;
+            }
+
+            @Override
+            public boolean hasTag(List<String> keyList, Set<String> values) {
+                // TODO Auto-generated method stub
+                return false;
+            }
+
+            @Override
+            public int getType() {
+                // TODO Auto-generated method stub
+                return 0;
+            }
+
+            @Override
+            public boolean isType(int way) {
+                // TODO Auto-generated method stub
+                return false;
+            }
+
+        };
+    }
+
+    @Test
+    public void testHasTag_singleValue() {
+        testWay.setTag("key", "value1");
+        assertTrue("value1 should be in key", OsFlagUtils.hasTag(testWay, "key", "value1"));
+    }
+
+    @Test
+    public void testHasTag_multipleValues() {
+        testWay.setTag("key", "value1,value2");
+        assertTrue("value1 should be in key", OsFlagUtils.hasTag(testWay, "key", "value1"));
+        assertTrue("value2 should be in key", OsFlagUtils.hasTag(testWay, "key", "value2"));
+        assertFalse("value3 should NOT be in key", OsFlagUtils.hasTag(testWay, "key", "value3"));
+    }
+
+    @Test
+    public void testSetOrAppendTag_singleValue() {
+        OsFlagUtils.setOrAppendTag(testWay, "key", "value1");
+        OsFlagUtils.setOrAppendTag(testWay, "key", "value2");
+        assertEquals("value1,value2 should be in key", testWay.getTag("key"), "value1,value2");
+    }
+
+    @Test
+    public void testSetOrAppendTag_multipleValues() {
+        OsFlagUtils.setOrAppendTag(testWay, "key", "value1");
+        assertEquals("value1 should be in key", testWay.getTag("key"), "value1");
+    }
+}
