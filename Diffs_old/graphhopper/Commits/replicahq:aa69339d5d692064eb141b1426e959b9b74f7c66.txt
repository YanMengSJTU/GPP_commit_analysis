diff --git a/pom.xml b/pom.xml
index 3a95815a5f..b592cd0ec1 100644
--- a/pom.xml
+++ b/pom.xml
@@ -213,6 +213,13 @@
         </extensions>
     </build>
 
+    <repositories>
+        <repository>
+            <id>graphhopper-matrix</id>
+            <url>https://packagecloud.io/priv/${env.GRAPHHOPPER_TOKEN}/graphhopper/matrix/maven2</url>
+        </repository>
+    </repositories>
+
     <distributionManagement>
         <snapshotRepository>
             <id>ossrh</id>
diff --git a/web-bundle/pom.xml b/web-bundle/pom.xml
index 330cd350ab..cb5d51977a 100644
--- a/web-bundle/pom.xml
+++ b/web-bundle/pom.xml
@@ -39,6 +39,12 @@
             <version>${project.parent.version}</version>
         </dependency>
 
+        <dependency>
+            <groupId>com.graphhopper</groupId>
+            <artifactId>graphhopper-matrix</artifactId>
+            <version>0.13.0-tardur3</version>
+        </dependency>
+
         <!-- required for JDK9 -->
         <dependency>
             <groupId>javax.xml.ws</groupId>
diff --git a/web-bundle/src/main/java/com/graphhopper/http/GraphHopperBundle.java b/web-bundle/src/main/java/com/graphhopper/http/GraphHopperBundle.java
index adaae90921..0dcfa12634 100644
--- a/web-bundle/src/main/java/com/graphhopper/http/GraphHopperBundle.java
+++ b/web-bundle/src/main/java/com/graphhopper/http/GraphHopperBundle.java
@@ -34,11 +34,15 @@
 import com.graphhopper.http.health.GraphHopperStorageHealthCheck;
 import com.graphhopper.isochrone.algorithm.DelaunayTriangulationIsolineBuilder;
 import com.graphhopper.jackson.GraphHopperModule;
+import com.graphhopper.matrix.http.MatrixResource;
+import com.graphhopper.matrix.model.MatrixQueue;
 import com.graphhopper.reader.gtfs.GraphHopperGtfs;
 import com.graphhopper.reader.gtfs.GtfsStorage;
 import com.graphhopper.reader.gtfs.PtFlagEncoder;
 import com.graphhopper.reader.gtfs.RealtimeFeed;
 import com.graphhopper.resources.*;
+import com.graphhopper.routing.GHMatrixAPI;
+import com.graphhopper.routing.MatrixAPI;
 import com.graphhopper.routing.util.CarFlagEncoder;
 import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.routing.util.FootFlagEncoder;
@@ -53,6 +57,7 @@
 import io.dropwizard.setup.Environment;
 import org.glassfish.hk2.api.Factory;
 import org.glassfish.hk2.utilities.binding.AbstractBinder;
+import org.slf4j.LoggerFactory;
 
 import javax.inject.Inject;
 import javax.ws.rs.ext.WriterInterceptor;
@@ -288,6 +293,21 @@ protected void configure() {
         environment.jersey().register(I18NResource.class);
         environment.jersey().register(InfoResource.class);
         environment.healthChecks().register("graphhopper", new GraphHopperHealthCheck(graphHopperManaged.getGraphHopper()));
+
+
+        MatrixAPI matrixAPI = new GHMatrixAPI(graphHopperManaged.getGraphHopper());
+        MatrixQueue matrixQueue = createAndStartQueue(configuration, matrixAPI, configuration.getInt("matrix.default_customer_priority", 1));
+        environment.jersey().register(new MatrixResource(configuration, matrixAPI, matrixQueue));
+    }
+
+    private MatrixQueue createAndStartQueue(CmdArgs args, MatrixAPI mCalc, Integer defaultCustomerPriority) {
+        // restrict to available processors (one thread for the GC and one for the free queue)
+        int threads = Runtime.getRuntime().availableProcessors() - 1;
+        threads = args.getInt("matrix.threads", threads);
+        LoggerFactory.getLogger(getClass()).info("default customer priority: " + defaultCustomerPriority + ", matrix threads " + (threads - 1) + ", free threads: 1");
+        MatrixQueue mQueue = new MatrixQueue(threads, mCalc);
+        mQueue.start();
+        return mQueue;
     }
 
 }
