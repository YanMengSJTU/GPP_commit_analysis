diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperComponentIdentification.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperComponentIdentification.java
index f4d7f685c5..354177a2a4 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperComponentIdentification.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperComponentIdentification.java
@@ -25,22 +25,24 @@
 	public static final ComponentIdentifier  MAP=new ComponentByXPATH("//*[@id='map']");
 	public static final ComponentIdentifier  ZOOM_OUT=new ComponentByXPATH("//*[@title='Zoom out']");
 	public static final ComponentIdentifier  ZOOM_IN=new ComponentByXPATH("//*[@title='Zoom in']");
-	public static final ComponentIdentifier dropDown =new ComponentByXPATH("//span/div/span/div[*]/p/strong");
-	public static final ComponentIdentifier settingsButton =new ComponentByXPATH("//*[@id='settings-btn']");
-	public static final ComponentIdentifier avoidance_ARoad=new ComponentByXPATH("//*[@name='avoidances[]'][@value='aroad']");
-	public static final ComponentIdentifier avoidance_Boulders=new ComponentByXPATH("//*[@name='avoidances[]'][@value='boulders']");
-	public static final ComponentIdentifier avoidance_Cliff=new ComponentByXPATH("//*[@name='avoidances[]'][@value='cliff']");
-	public static final ComponentIdentifier avoidance_InlandWater=new ComponentByXPATH("//*[@name='avoidances[]'][@value='inlandwater']");
-	public static final ComponentIdentifier avoidance_Marsh=new ComponentByXPATH("//*[@name='avoidances[]'][@value='marsh']");
-	public static final ComponentIdentifier avoidance_QuarryOrPit=new ComponentByXPATH("//*[@name='avoidances[]'][@value='quarryorpit']");
-	public static final ComponentIdentifier avoidance_Scree=new ComponentByXPATH("//*[@name='avoidances[]'][@value='scree']");
-	public static final ComponentIdentifier avoidance_Rock=new ComponentByXPATH("//*[@name='avoidances[]'][@value='rock']");
-	public static final ComponentIdentifier avoidance_Mud=new ComponentByXPATH("//*[@name='avoidances[]'][@value='mud']");
-	public static final ComponentIdentifier avoidance_Sand=new ComponentByXPATH("//*[@name='avoidances[]'][@value='sand']");
-	public static final ComponentIdentifier avoidance_Shingle=new ComponentByXPATH("//*[@name='avoidances[]'][@value='shingle']");
-	public static final ComponentIdentifier fastest_RButton=new ComponentByXPATH("//input[@value='fastest']");
-	public static final ComponentIdentifier shortest_RButton=new ComponentByXPATH("//input[@value='shortest']");
-	public static final ComponentIdentifier error_Message= new ComponentByXPATH("//*[@class='error']");
-	
+	public static final ComponentIdentifier DROPDOWN =new ComponentByXPATH("//span/div/span/div[*]/p/strong");
+	public static final ComponentIdentifier SETTINGSBUTTON =new ComponentByXPATH("//*[@id='settings-btn']");
+	public static final ComponentIdentifier AVOIDANCE_AROAD=new ComponentByXPATH("//*[@name='avoidances[]'][@value='aroad']");
+	public static final ComponentIdentifier AVOIDANCE_BOULDERS=new ComponentByXPATH("//*[@name='avoidances[]'][@value='boulders']");
+	public static final ComponentIdentifier AVOIDANCE__CLIFF=new ComponentByXPATH("//*[@name='avoidances[]'][@value='cliff']");
+	public static final ComponentIdentifier AVOIDANCE__INLANDWATERr=new ComponentByXPATH("//*[@name='avoidances[]'][@value='inlandwater']");
+	public static final ComponentIdentifier AVOIDANCE__MARSH=new ComponentByXPATH("//*[@name='avoidances[]'][@value='marsh']");
+	public static final ComponentIdentifier AVOIDANCE__QUARRYORPIT=new ComponentByXPATH("//*[@name='avoidances[]'][@value='quarryorpit']");
+	public static final ComponentIdentifier AVOIDANCE__SCREE=new ComponentByXPATH("//*[@name='avoidances[]'][@value='scree']");
+	public static final ComponentIdentifier AVOIDANCE__ROCK=new ComponentByXPATH("//*[@name='avoidances[]'][@value='rock']");
+	public static final ComponentIdentifier AVOIDANCE__MUD=new ComponentByXPATH("//*[@name='avoidances[]'][@value='mud']");
+	public static final ComponentIdentifier AVOIDANCE__SAND=new ComponentByXPATH("//*[@name='avoidances[]'][@value='sand']");
+	public static final ComponentIdentifier AVOIDANCE_SHINGLE=new ComponentByXPATH("//*[@name='avoidances[]'][@value='shingle']");
+	public static final ComponentIdentifier FASTEST_RBUTTON=new ComponentByXPATH("//input[@value='fastest']");
+	public static final ComponentIdentifier SHORTEST_RBUTTON=new ComponentByXPATH("//input[@value='shortest']");
+	public static final ComponentIdentifier ERROR_MESSAGE= new ComponentByXPATH("//*[@class='error']");
+	public static final ComponentIdentifier PRIVATE_ACCESS_ALLOWED = new ComponentByXPATH("//*[@name='access' and @value='allow']");
+	public static final ComponentIdentifier PRIVATE_ACCESS_NOTALLOWED = new ComponentByXPATH("//*[@name='access' and @value='disallow']");
+
 	
 }
diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
index 8661718476..af9742bf7f 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
@@ -159,7 +159,7 @@ public void getRouteFromUI(String routeOptions, String avoidances,
 			break;
 
 		}
-		clickElement(settingsButton);
+		clickElement(SETTINGSBUTTON);
 
 		if (!avoidances.equals("")) {
 			for (int i = 0; i < avoidances.split(",").length; i++) {
@@ -167,40 +167,40 @@ public void getRouteFromUI(String routeOptions, String avoidances,
 				switch (avoidance.toLowerCase().trim()) {
 
 				case "aroad":
-					clickElement(avoidance_ARoad);
+					clickElement(AVOIDANCE_AROAD);
 					break;
 
 				case "boulders":
-					clickElement(avoidance_Boulders);
+					clickElement(AVOIDANCE_BOULDERS);
 					break;
 				case "cliff":
-					clickElement(avoidance_Cliff);
+					clickElement(AVOIDANCE__CLIFF);
 					break;
 				case "inlandwater":
-					clickElement(avoidance_InlandWater);
+					clickElement(AVOIDANCE__INLANDWATERr);
 					break;
 				case "marsh":
-					clickElement(avoidance_Marsh);
+					clickElement(AVOIDANCE__MARSH);
 					break;
 				case "quarryorpit":
-					clickElement(avoidance_QuarryOrPit);
+					clickElement(AVOIDANCE__QUARRYORPIT);
 					break;
 				case "scree":
-					clickElement(avoidance_Scree);
+					clickElement(AVOIDANCE__SCREE);
 					break;
 				case "rock":
-					clickElement(avoidance_Rock);
+					clickElement(AVOIDANCE__ROCK);
 					break;
 				case "mud":
-					clickElement(avoidance_Mud);
+					clickElement(AVOIDANCE__MUD);
 					break;
 
 				case "sand":
-					clickElement(avoidance_Sand);
+					clickElement(AVOIDANCE__SAND);
 					break;
 
 				case "shingle":
-					clickElement(avoidance_Shingle);
+					clickElement(AVOIDANCE_SHINGLE);
 					break;
 
 				default:
@@ -209,22 +209,22 @@ public void getRouteFromUI(String routeOptions, String avoidances,
 			}
 
 			if (routeOption.equalsIgnoreCase("shortavoid")) {
-				clickElement(shortest_RButton);
+				clickElement(SHORTEST_RBUTTON);
 			}
 
 			else {
-				clickElement(fastest_RButton);
+				clickElement(FASTEST_RBUTTON);
 			}
 
 		}
 
 		else {
 			if (routeOption.equalsIgnoreCase("shortest")) {
-				clickElement(shortest_RButton);
+				clickElement(SHORTEST_RBUTTON);
 			}
 
 			else {
-				clickElement(fastest_RButton);
+				clickElement(FASTEST_RBUTTON);
 			}
 		}
 
@@ -249,7 +249,7 @@ public void getRouteFromUI(String routeOptions, String avoidances,
 			else {
 				waypoint = new ComponentID(i + "_searchBox");
 				typeIntoField(waypoint, point);
-				clickElement(dropDown);
+				clickElement(DROPDOWN);
 			}
 		}
 
@@ -905,12 +905,24 @@ public void getRouteFromUI() {
 			case "foot":
 				clickElement(ROUTE_TYPE_WALK);
 				break;
+			case "emv":
+				clickElement(ROUTE_TYPE_EMERGENCY);
+				break;
 			default:
 				clickElement(ROUTE_TYPE_CAR);
 				break;
 
 			}
-			clickElement(settingsButton);
+			clickElement(SETTINGSBUTTON);
+			if(Boolean.parseBoolean(requestParameters.get("private").get(0)))
+			{
+				clickElement(PRIVATE_ACCESS_ALLOWED);
+				
+			}
+			else
+			{
+				clickElement(PRIVATE_ACCESS_NOTALLOWED);
+			}
 
 			if (!avoidances.equals("")) {
 				for (int i = 0; i < avoidances.split(",").length; i++) {
@@ -918,40 +930,40 @@ public void getRouteFromUI() {
 					switch (avoidance.toLowerCase().trim()) {
 
 					case "aroad":
-						clickElement(avoidance_ARoad);
+						clickElement(AVOIDANCE_AROAD);
 						break;
 
 					case "boulders":
-						clickElement(avoidance_Boulders);
+						clickElement(AVOIDANCE_BOULDERS);
 						break;
 					case "cliff":
-						clickElement(avoidance_Cliff);
+						clickElement(AVOIDANCE__CLIFF);
 						break;
 					case "inlandwater":
-						clickElement(avoidance_InlandWater);
+						clickElement(AVOIDANCE__INLANDWATERr);
 						break;
 					case "marsh":
-						clickElement(avoidance_Marsh);
+						clickElement(AVOIDANCE__MARSH);
 						break;
 					case "quarryorpit":
-						clickElement(avoidance_QuarryOrPit);
+						clickElement(AVOIDANCE__QUARRYORPIT);
 						break;
 					case "scree":
-						clickElement(avoidance_Scree);
+						clickElement(AVOIDANCE__SCREE);
 						break;
 					case "rock":
-						clickElement(avoidance_Rock);
+						clickElement(AVOIDANCE__ROCK);
 						break;
 					case "mud":
-						clickElement(avoidance_Mud);
+						clickElement(AVOIDANCE__MUD);
 						break;
 
 					case "sand":
-						clickElement(avoidance_Sand);
+						clickElement(AVOIDANCE__SAND);
 						break;
 
 					case "shingle":
-						clickElement(avoidance_Shingle);
+						clickElement(AVOIDANCE_SHINGLE);
 						break;
 
 					default:
@@ -960,22 +972,22 @@ public void getRouteFromUI() {
 				}
 
 				if (weighting.equalsIgnoreCase("shortavoid")) {
-					clickElement(shortest_RButton);
+					clickElement(SHORTEST_RBUTTON);
 				}
 
 				else {
-					clickElement(fastest_RButton);
+					clickElement(FASTEST_RBUTTON);
 				}
 
 			}
 
 			else {
 				if (weighting.equalsIgnoreCase("shortest")) {
-					clickElement(shortest_RButton);
+					clickElement(SHORTEST_RBUTTON);
 				}
 
 				else {
-					clickElement(fastest_RButton);
+					clickElement(FASTEST_RBUTTON);
 				}
 			}
 
@@ -1000,8 +1012,8 @@ public void getRouteFromUI() {
 				else {
 					waypoint = new ComponentID(i + "_searchBox");
 					typeIntoField(waypoint, point);
-					waitFor(dropDown);
-					clickElement(dropDown);
+					waitFor(DROPDOWN);
+					clickElement(DROPDOWN);
 				}
 			}
 
@@ -1015,14 +1027,23 @@ public void getRouteFromUI() {
 	}
 
 	public void verifyErrorMessage(String responseMessage) {
-
+		String type;
+		if(requestParameters.containsKey("type")){
+			type=requestParameters.get("type").get(0);
+		}
+		else
+		{
+			type= IntegrationTestProperties.getTestProperty("routeType");
+		}
 		switch (testOn) {
 		case "Web":
 			navigateTo(sb.toString());
 
 			break;
 		case "Service":
-			if (requestParameters.get("type").get(0).equalsIgnoreCase("gpx")) {
+			
+
+			if (type.equalsIgnoreCase("gpx")) {
 				GPHServiceUtil.verifyMessage(responseMessage);
 			} else {
 				GPHJSONUtil.verifyMessage(responseMessage);
@@ -1034,7 +1055,7 @@ public void verifyErrorMessage(String responseMessage) {
 
 			navigateTo(sb.toString());
 
-			if (requestParameters.get("type").get(0).equalsIgnoreCase("gpx")) {
+			if (type.equalsIgnoreCase("gpx")) {
 				GPHServiceUtil.verifyMessage(responseMessage);
 			} else {
 				GPHJSONUtil.verifyMessage(responseMessage);
@@ -1046,8 +1067,8 @@ public void verifyErrorMessage(String responseMessage) {
 	private void verifyUIErrorMessage(String responseMessage) {
 
 		Assert.assertTrue("Web Interface: Actual Error Message"
-				+ getTextValue(error_Message) + " is not matching with :"
-				+ responseMessage, getTextValue(error_Message)
+				+ getTextValue(ERROR_MESSAGE) + " is not matching with :"
+				+ responseMessage, getTextValue(ERROR_MESSAGE)
 				.equalsIgnoreCase(responseMessage));
 
 	}
@@ -1129,4 +1150,13 @@ public void isValidRouteResponse() {
 		
 	}
 
-}
+	public void privateAccess() {
+
+			
+		}
+		
+	}
+
+
+
+
