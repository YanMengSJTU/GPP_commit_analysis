diff --git a/core/pom.xml b/core/pom.xml
index 3ee4357f23..d95f0ca5d0 100644
--- a/core/pom.xml
+++ b/core/pom.xml
@@ -95,12 +95,6 @@
             <artifactId>jts-core</artifactId>
             <version>1.14.0</version>
         </dependency>
-
-        <dependency>
-            <groupId>com.opencsv</groupId>
-            <artifactId>opencsv</artifactId>
-            <version>4.3.2</version>
-        </dependency>
     </dependencies>
 
     <build>
diff --git a/core/src/main/java/com/graphhopper/routing/util/GreenWalkFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/GreenWalkFlagEncoder.java
index 3845626693..12a2744345 100644
--- a/core/src/main/java/com/graphhopper/routing/util/GreenWalkFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/GreenWalkFlagEncoder.java
@@ -22,10 +22,7 @@
 import com.graphhopper.routing.weighting.GreenWalkWeighting;
 import com.graphhopper.routing.weighting.PriorityWeighting;
 import com.graphhopper.util.PMap;
-import com.opencsv.CSVReader;
 
-import java.io.FileReader;
-import java.io.IOException;
 import java.util.*;
 
 import static com.graphhopper.routing.util.PriorityCode.*;
diff --git a/core/src/main/java/com/graphhopper/routing/weighting/GreenWalkWeighting.java b/core/src/main/java/com/graphhopper/routing/weighting/GreenWalkWeighting.java
index 14a5e2607a..f7913723ad 100644
--- a/core/src/main/java/com/graphhopper/routing/weighting/GreenWalkWeighting.java
+++ b/core/src/main/java/com/graphhopper/routing/weighting/GreenWalkWeighting.java
@@ -44,12 +44,12 @@ public double calcWeight(EdgeIteratorState edge, boolean reverse, int prevOrNext
 
         double distance = edge.getDistance();
         double factor = 1 / (0.5 + priority);
-        if (greenness > 0) {
-            factor *= 1 / greenness;
-        }
+//        if (greenness > 0) {
+//            factor *= 1 / greenness;
+//        }
 
         if (pollution > 0) {
-            factor *= (pollution - 5.0) / 8.0;
+            factor *= 1 + (pollution - 5.0) / 4 * 2;
         }
 
         factor = Math.max(factor, minFactor);
diff --git a/reader-osm/src/main/java/com/graphhopper/reader/osm/GraphHopperOSM.java b/reader-osm/src/main/java/com/graphhopper/reader/osm/GraphHopperOSM.java
index 1b1f5cccee..4223488418 100644
--- a/reader-osm/src/main/java/com/graphhopper/reader/osm/GraphHopperOSM.java
+++ b/reader-osm/src/main/java/com/graphhopper/reader/osm/GraphHopperOSM.java
@@ -27,6 +27,7 @@
 
 import java.util.List;
 
+
 /**
  * This class is the simplified entry to all functionality if you import from OpenStreetMap data.
  *
diff --git a/reader-osm/src/main/java/com/graphhopper/reader/osm/OSMReader.java b/reader-osm/src/main/java/com/graphhopper/reader/osm/OSMReader.java
index 470d4f4ef9..dd0a72f7be 100644
--- a/reader-osm/src/main/java/com/graphhopper/reader/osm/OSMReader.java
+++ b/reader-osm/src/main/java/com/graphhopper/reader/osm/OSMReader.java
@@ -38,9 +38,7 @@
 import org.slf4j.LoggerFactory;
 
 import javax.xml.stream.XMLStreamException;
-import java.io.File;
-import java.io.FileReader;
-import java.io.IOException;
+import java.io.*;
 import java.util.*;
 
 import static com.graphhopper.util.Helper.nf;
@@ -160,8 +158,6 @@ public OSMReader(GraphHopperStorage ghStorage) {
                 cpt ++;
             }
 
-        } catch (FileNotFoundException e) {
-            e.printStackTrace();
         } catch (IOException e) {
             e.printStackTrace();
         } finally {
@@ -439,7 +435,7 @@ void processWay(ReaderWay way) {
 
             way.setTag("nearby_trees", Integer.toString(nearbyTrees));
 
-            int pollution = 0;
+            int pollution;
 
             if ((firstLat < Latmin || lastLat < Latmin || firstLat > Latmax || lastLat > Latmax)
                     || (firstLon < Lonmin || lastLon < Lonmin || firstLon > Lonmax || lastLon > Lonmax)) {
@@ -449,13 +445,15 @@ void processWay(ReaderWay way) {
                 double stepLat = (Latmax - Latmin) / 99;
                 double stepLon = (Lonmax - Lonmin) / 99;
 
-                int i = (firstLat - Latmin) / stepLat;
-                int j = (firstLon - Lonmin) / stepLon;
-                pollution = (pollutions[i][j] + pollutions[i+1][j] + pollutions[i][j+1] + pollutions[i+1][j+1]) / 8;
+                int i = (int) ((firstLat - Latmin) / stepLat);
+                int j = (int) ((firstLon - Lonmin) / stepLon);
+                double tmpPollution = (pollutions[i][j] + pollutions[i+1][j] + pollutions[i][j+1] + pollutions[i+1][j+1]) / 8;
+
+                i = (int) ((lastLat - Latmin) / stepLat);
+                j = (int) ((lastLon - Lonmin) / stepLon);
+                tmpPollution += (pollutions[i][j] + pollutions[i+1][j] + pollutions[i][j+1] + pollutions[i+1][j+1]) / 8;
 
-                i = (lastLat - Latmin) / stepLat;
-                j = (lastLon - Lonmin) / stepLon;
-                pollution += (pollutions[i][j] + pollutions[i+1][j] + pollutions[i][j+1] + pollutions[i+1][j+1]) / 8;
+                pollution = (int) (8 * tmpPollution + 1);
             }
 
             way.setTag("pollution", Integer.toString(pollution));
