diff --git a/core/src/main/java/com/graphhopper/routing/template/AbstractRoutingTemplate.java b/core/src/main/java/com/graphhopper/routing/template/AbstractRoutingTemplate.java
index ca15e6678a..2aa5a4e92a 100644
--- a/core/src/main/java/com/graphhopper/routing/template/AbstractRoutingTemplate.java
+++ b/core/src/main/java/com/graphhopper/routing/template/AbstractRoutingTemplate.java
@@ -10,11 +10,11 @@
 /**
  * @author Peter Karich
  */
-public class AbstractRoutingTemplate {
+class AbstractRoutingTemplate {
     // result from lookup
-    protected List<QueryResult> queryResults;
+    List<QueryResult> queryResults;
 
-    protected PointList getWaypoints() {
+    PointList getWaypoints() {
         PointList pointList = new PointList(queryResults.size(), true);
         for (QueryResult qr : queryResults) {
             pointList.add(qr.getSnappedPoint());
@@ -22,7 +22,7 @@ protected PointList getWaypoints() {
         return pointList;
     }
 
-    public void failOnNumPathsInvalid(final GHRequest ghrequest, final List<Path> paths) {
+    void failOnNumPathsInvalid(final GHRequest ghrequest, final List<Path> paths) {
         if (ghrequest.getPoints().size() - 1 != paths.size())
             throw new RuntimeException("There should be exactly one more points than paths. points:" + ghrequest.getPoints().size() + ", paths:" + paths.size());
     }
diff --git a/core/src/main/java/com/graphhopper/routing/template/PolygonRoutingTemplate.java b/core/src/main/java/com/graphhopper/routing/template/PolygonRoutingTemplate.java
index 6764243307..141ba711a7 100644
--- a/core/src/main/java/com/graphhopper/routing/template/PolygonRoutingTemplate.java
+++ b/core/src/main/java/com/graphhopper/routing/template/PolygonRoutingTemplate.java
@@ -19,23 +19,20 @@
 import java.util.List;
 
 public abstract class PolygonRoutingTemplate extends ViaRoutingTemplate {
-    final GHRequest ghRequest;
-    final Polygon polygon;
+    private final GHRequest ghRequest;
     final GraphHopperStorage ghStorage;
     final NodeAccess nodeAccess;
     final LocationIndex locationIndex;
     final Graph graph;
-    QueryGraph queryGraph;
+    private QueryGraph queryGraph;
     AlgorithmOptions algorithmOptions;
     RoutingAlgorithmFactory algoFactory;
-    RoutingAlgorithm routingAlgorithm;
     RouteCandidateList<RouteCandidatePolygon> routeCandidates;
 
-    public PolygonRoutingTemplate(GHRequest ghRequest, GHResponse ghRsp, LocationIndex locationIndex, Graph graph, NodeAccess nodeAccess, GraphHopperStorage ghStorage,
-                                  EncodingManager encodingManager) {
+    PolygonRoutingTemplate(GHRequest ghRequest, GHResponse ghRsp, LocationIndex locationIndex, Graph graph, NodeAccess nodeAccess, GraphHopperStorage ghStorage,
+                           EncodingManager encodingManager) {
         super(ghRequest, ghRsp, locationIndex, encodingManager);
         this.ghRequest = ghRequest;
-        this.polygon = ghRequest.getPolygon();
         this.ghStorage = ghStorage;
         this.nodeAccess = nodeAccess;
         this.locationIndex = locationIndex;
@@ -57,7 +54,6 @@ private void setCalcPathsParams(QueryGraph queryGraph, RoutingAlgorithmFactory a
         this.queryGraph = queryGraph;
         this.algoFactory = algoFactory;
         this.algorithmOptions = algoOpts;
-        this.routingAlgorithm = algoFactory.createAlgo(queryGraph, algoOpts);
         this.routeCandidates = new RouteCandidateList<>();
     }
 
@@ -90,7 +86,7 @@ private void pruneLowerQuantileInROIcandidateRoutes() {
         }
     }
 
-    protected abstract RouteCandidateList findCandidateRoutes();
+    protected abstract void findCandidateRoutes();
 
     @Override
     public boolean isReady(PathMerger pathMerger, Translation translation) {
diff --git a/core/src/main/java/com/graphhopper/routing/template/PolygonThroughRoutingTemplate.java b/core/src/main/java/com/graphhopper/routing/template/PolygonThroughRoutingTemplate.java
index 588f9986f4..128c721c5e 100644
--- a/core/src/main/java/com/graphhopper/routing/template/PolygonThroughRoutingTemplate.java
+++ b/core/src/main/java/com/graphhopper/routing/template/PolygonThroughRoutingTemplate.java
@@ -2,7 +2,6 @@
 
 import com.graphhopper.GHRequest;
 import com.graphhopper.GHResponse;
-import com.graphhopper.routing.*;
 import com.graphhopper.routing.template.polygonRoutingUtil.*;
 import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.storage.GraphHopperStorage;
@@ -17,17 +16,15 @@
 import java.util.*;
 
 public class PolygonThroughRoutingTemplate extends PolygonRoutingTemplate {
-    private OneToManyRouting lotNodeRouter;
     private ManyToManyRouting pathSkeletonRouter;
-    private List<Integer> nodesInPolygon;
 
     public PolygonThroughRoutingTemplate(GHRequest ghRequest, GHResponse ghRsp, LocationIndex locationIndex, NodeAccess nodeAccess, GraphHopperStorage ghStorage,
                                          EncodingManager encodingManager) {
         super(ghRequest, ghRsp, locationIndex, ghStorage.getBaseGraph(), nodeAccess, ghStorage, encodingManager);
     }
 
-    protected RouteCandidateList findCandidateRoutes() {
-        this.nodesInPolygon = getNodesInPolygon();
+    protected void findCandidateRoutes() {
+        List<Integer> nodesInPolygon = getNodesInPolygon();
         final List<Integer> polygonEntryExitPoints = findPolygonEntryExitPoints(nodesInPolygon);
         final List<Integer> viaPointNodeIds = this.extractNodeIdsFromQueryResults();
         final LOTNodeExtractor LOTNodes = LOTNodeExtractor.createExtractedData(this.graph, this.algoFactory, this.algorithmOptions, viaPointNodeIds, polygonEntryExitPoints);
@@ -39,7 +36,6 @@ protected RouteCandidateList findCandidateRoutes() {
             buildRouteCandidatesForCurrentPoint(LOTNodes.getLotNodesFor(viaPointNodeId));
         }
 
-        return this.routeCandidates;
     }
 
     private List<Integer> extractNodeIdsFromQueryResults() {
@@ -112,12 +108,12 @@ public ManyToManyRouting getPathSkeletonRouter() {
         return this.pathSkeletonRouter;
     }
 
-    private class NodesInPolygonFindingVisitor extends LocationIndex.Visitor {
+    private static class NodesInPolygonFindingVisitor extends LocationIndex.Visitor {
         private final List<Integer> nodesInPolygon = new ArrayList<>();
         private final Polygon polygon;
         private final NodeAccess nodeAccess;
 
-        public NodesInPolygonFindingVisitor(final Polygon polygon, final NodeAccess nodeAccess) {
+        NodesInPolygonFindingVisitor(final Polygon polygon, final NodeAccess nodeAccess) {
             this.polygon = polygon;
             this.nodeAccess = nodeAccess;
         }
@@ -132,7 +128,7 @@ public void onNode(int nodeId) {
             }
         }
 
-        public List<Integer> getNodesInPolygon() {
+        List<Integer> getNodesInPolygon() {
             return this.nodesInPolygon;
         }
     }
diff --git a/core/src/main/java/com/graphhopper/routing/template/RoundTripRoutingTemplate.java b/core/src/main/java/com/graphhopper/routing/template/RoundTripRoutingTemplate.java
index 9f9fcfbc5d..73abf55139 100644
--- a/core/src/main/java/com/graphhopper/routing/template/RoundTripRoutingTemplate.java
+++ b/core/src/main/java/com/graphhopper/routing/template/RoundTripRoutingTemplate.java
@@ -56,7 +56,6 @@
     private final GHResponse ghResponse;
     private final LocationIndex locationIndex;
     private final EncodingManager encodingManager;
-    private PathWrapper altResponse;
     // result from route
     private List<Path> pathList;
 
@@ -151,7 +150,7 @@ public void setPaths(List<Path> pathList) {
 
     @Override
     public boolean isReady(PathMerger pathMerger, Translation tr) {
-        altResponse = new PathWrapper();
+        PathWrapper altResponse = new PathWrapper();
         altResponse.setWaypoints(getWaypoints());
         ghResponse.add(altResponse);
         pathMerger.doWork(altResponse, pathList, encodingManager, tr);
diff --git a/core/src/main/java/com/graphhopper/routing/template/RoutingTemplate.java b/core/src/main/java/com/graphhopper/routing/template/RoutingTemplate.java
index 709e5b629f..d3ccfdaf03 100644
--- a/core/src/main/java/com/graphhopper/routing/template/RoutingTemplate.java
+++ b/core/src/main/java/com/graphhopper/routing/template/RoutingTemplate.java
@@ -59,5 +59,5 @@
      */
     int getMaxRetries();
 
-    public GHRequest getGhRequest();
+    GHRequest getGhRequest();
 }
diff --git a/core/src/main/java/com/graphhopper/routing/template/ViaRoutingTemplate.java b/core/src/main/java/com/graphhopper/routing/template/ViaRoutingTemplate.java
index d45aa045f0..038658f6a2 100644
--- a/core/src/main/java/com/graphhopper/routing/template/ViaRoutingTemplate.java
+++ b/core/src/main/java/com/graphhopper/routing/template/ViaRoutingTemplate.java
@@ -44,12 +44,12 @@
  */
 public class ViaRoutingTemplate extends AbstractRoutingTemplate implements RoutingTemplate {
     private final GHRequest ghRequest;
-    protected final GHResponse ghResponse;
-    protected final PathWrapper altResponse = new PathWrapper();
+    final GHResponse ghResponse;
+    final PathWrapper altResponse = new PathWrapper();
     private final LocationIndex locationIndex;
-    protected final EncodingManager encodingManager;
+    final EncodingManager encodingManager;
     // result from route
-    protected List<Path> pathList;
+    List<Path> pathList;
 
     public ViaRoutingTemplate(GHRequest ghRequest, GHResponse ghRsp, LocationIndex locationIndex, EncodingManager encodingManager) {
         this.locationIndex = locationIndex;
diff --git a/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/LOTNodeExtractor.java b/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/LOTNodeExtractor.java
index 24e0bb402b..7447d3a562 100644
--- a/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/LOTNodeExtractor.java
+++ b/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/LOTNodeExtractor.java
@@ -63,8 +63,7 @@ private void saveDistanceBetween(final int viaPoint, final int entryExitPoint) {
 
     private Path calcPathBetween(final int viaPoint, final int entryExitPoint) {
         final RoutingAlgorithm routingAlgorithm = this.routingAlgorithmFactory.createAlgo(graph, algorithmOptions);
-        final Path path = routingAlgorithm.calcPath(viaPoint, entryExitPoint);
-        return path;
+        return routingAlgorithm.calcPath(viaPoint, entryExitPoint);
     }
 
     private void saveLOTNodesForEachViaPoint() {
diff --git a/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/MultiRouting.java b/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/MultiRouting.java
index 58a735491b..66a85f9946 100644
--- a/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/MultiRouting.java
+++ b/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/MultiRouting.java
@@ -9,9 +9,9 @@
 import java.util.Map;
 
 public abstract class MultiRouting {
-    protected final Map<Pair<Integer, Integer>, Path> allFoundPaths;
+    final Map<Pair<Integer, Integer>, Path> allFoundPaths;
 
-    public MultiRouting() {
+    MultiRouting() {
         this.allFoundPaths = new HashMap<>();
     }
 
@@ -33,14 +33,12 @@ private boolean pathsNotAlreadySearched() {
     /**
      * Outputs a list of all found paths
      *
-     * @return
+     * @return the list of all found paths
      */
     public List<Path> getAllFoundPaths() {
         final List<Path> allFoundPathsList = new ArrayList<>(this.allFoundPaths.size());
 
-        for (final Path path : this.allFoundPaths.values()) {
-            allFoundPathsList.add(path);
-        }
+        allFoundPathsList.addAll(this.allFoundPaths.values());
 
         return allFoundPathsList;
     }
@@ -50,9 +48,9 @@ private boolean pathsNotAlreadySearched() {
      *
      * @param fromNodeId node where the path shall start from.
      * @param toNodeId   node where the path shall end to.
-     * @return
+     * @return the path that starts at fromNodeId and ends at toNodeId
      */
     public Path getPathByFromEndNodeID(Integer fromNodeId, Integer toNodeId) {
-        return this.allFoundPaths.get(new Pair<Integer, Integer>(fromNodeId, toNodeId));
+        return this.allFoundPaths.get(new Pair<>(fromNodeId, toNodeId));
     }
 }
diff --git a/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/OneToManyRouting.java b/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/OneToManyRouting.java
index 2075d3ce6a..25e297f374 100644
--- a/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/OneToManyRouting.java
+++ b/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/OneToManyRouting.java
@@ -3,7 +3,6 @@
 import com.graphhopper.routing.*;
 import com.graphhopper.routing.util.EdgeFilter;
 import com.graphhopper.util.EdgeIteratorState;
-import com.graphhopper.util.StopWatch;
 import javafx.util.Pair;
 
 import java.util.ArrayList;
@@ -32,7 +31,7 @@ void calculatePaths() {
         for (final int toNode : toNodes) {
             final RoutingAlgorithm routingAlgorithm = buildRoutingAlgorithmForFromToPair(toNode);
             final Path path = routingAlgorithm.calcPath(this.fromNode, toNode);
-            this.allFoundPaths.put(new Pair(this.fromNode, toNode), path);
+            this.allFoundPaths.put(new Pair<>(this.fromNode, toNode), path);
         }
     }
 
@@ -47,10 +46,10 @@ private RoutingAlgorithm buildRoutingAlgorithmForFromToPair(int toNode) {
         return this.allFoundPaths;
     }
 
-    private class NodesToConsiderEdgeFilter implements EdgeFilter {
+    private static class NodesToConsiderEdgeFilter implements EdgeFilter {
         List<Integer> nodesToConsiderInclusiveStartEndPoint;
 
-        public NodesToConsiderEdgeFilter(final List<Integer> nodesToConsiderForRouting, final int fromNode, final int toNode) {
+        NodesToConsiderEdgeFilter(final List<Integer> nodesToConsiderForRouting, final int fromNode, final int toNode) {
             prepareConsiderableNodesList(nodesToConsiderForRouting, fromNode, toNode);
         }
 
diff --git a/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidateList.java b/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidateList.java
index a23840337f..54707a90a7 100644
--- a/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidateList.java
+++ b/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidateList.java
@@ -115,7 +115,7 @@ private boolean indexInCandidateBounds(int currentPruningCandidateIndex) {
         return candidates;
     }
 
-    public void setCandidates(List<T> candidates) {
+    void setCandidates(List<T> candidates) {
         this.candidates = candidates;
     }
 }
diff --git a/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidatePolygon.java b/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidatePolygon.java
index e04a1ec1af..7058251851 100644
--- a/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidatePolygon.java
+++ b/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidatePolygon.java
@@ -2,7 +2,6 @@
 
 import com.graphhopper.routing.*;
 import com.graphhopper.routing.template.PolygonRoutingTemplate;
-import com.graphhopper.util.EdgeIteratorState;
 
 import java.util.HashMap;
 import java.util.Map;
@@ -117,8 +116,6 @@ private boolean checkForRedundantNodes() {
 
     @Override
     public int compareTo(RouteCandidatePolygon o) {
-        final double thisGain = this.getGain();
-        final double thatGain = o.getGain();
         final double gainDifference = this.getGain() - o.getGain();
         if (gainDifference < 0) {
             return -1;
@@ -131,17 +128,14 @@ public int compareTo(RouteCandidatePolygon o) {
 
     @Override
     public String toString() {
-        final StringBuilder sb = new StringBuilder();
-
-        sb.append("startNodeID: " + startNodeID + ", ");
-        sb.append("endNodeID: " + endNodeID + ", ");
-        sb.append("polygonEntryNodeID: " + polygonEntryNodeID + ", ");
-        sb.append("polygonExitNodeID: " + polygonExitNodeID + ", ");
-        sb.append("Distance: " + this.getDistance() + ", ");
-        sb.append("DistanceInROI: " + getDistanceInROI() + ", ");
-        sb.append("detour distance: " + getDetourDistance() + ", ");
-        sb.append("gain: " + this.getGain());
-
-        return sb.toString();
+        String sb = "startNodeID: " + startNodeID + ", " +
+                    "endNodeID: " + endNodeID + ", " +
+                    "polygonEntryNodeID: " + polygonEntryNodeID + ", " +
+                    "polygonExitNodeID: " + polygonExitNodeID + ", " +
+                    "Distance: " + this.getDistance() + ", " +
+                    "DistanceInROI: " + getDistanceInROI() + ", " +
+                    "detour distance: " + getDetourDistance() + ", " +
+                    "gain: " + this.getGain();
+        return sb;
     }
 }
diff --git a/core/src/main/java/com/graphhopper/routing/template/util/QueryGraphCreator.java b/core/src/main/java/com/graphhopper/routing/template/util/QueryGraphCreator.java
index f745254336..bcdce58cf2 100644
--- a/core/src/main/java/com/graphhopper/routing/template/util/QueryGraphCreator.java
+++ b/core/src/main/java/com/graphhopper/routing/template/util/QueryGraphCreator.java
@@ -29,7 +29,7 @@ public QueryGraph createQueryGraph() {
         return queryGraph;
     }
 
-    public List<QueryResult> getQueryResults() {
+    private List<QueryResult> getQueryResults() {
         final List<QueryResult> queryResults = new ArrayList<>(this.nodesToLookup.size());
 
         for (final int node : this.nodesToLookup) {
@@ -42,7 +42,7 @@ public QueryGraph createQueryGraph() {
         return queryResults;
     }
 
-    public QueryResult createQueryReult(int node, double latitude, double longitude) {
+    private QueryResult createQueryReult(int node, double latitude, double longitude) {
         QueryResult queryResult = new QueryResult(latitude, longitude);
         queryResult.setClosestNode(node);
         queryResult.setWayIndex(0);
@@ -51,7 +51,7 @@ public QueryResult createQueryReult(int node, double latitude, double longitude)
         return queryResult;
     }
 
-    public EdgeIteratorState findClosestEdge(final int baseNode) {
+    private EdgeIteratorState findClosestEdge(final int baseNode) {
         EdgeExplorer edgeExplorer = this.graph.createEdgeExplorer();
         EdgeIterator edgeIterator = edgeExplorer.setBaseNode(baseNode);
         edgeIterator.next();
