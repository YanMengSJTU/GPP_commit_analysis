diff --git a/android/app/build.gradle b/android/app/build.gradle
deleted file mode 100644
index b98fc068b3..0000000000
--- a/android/app/build.gradle
+++ /dev/null
@@ -1,51 +0,0 @@
-apply plugin: 'com.android.application'
-
-android {
-    compileSdkVersion 23
-    buildToolsVersion "23.0.2"
-
-    defaultConfig {
-        applicationId "com.graphhopper.android"
-        minSdkVersion 10
-        targetSdkVersion 22
-    }
-
-    buildTypes {
-        release {
-            minifyEnabled false
-            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.txt'
-        }
-    }
-
-    lintOptions {
-        /* CGIARProvider refers to java.awt
-         * Helper7 refers to java.lang.management
-         * HeightTile refers to javax.imageio and java.awt
-         * OSMElement refers to javax.xml.stream
-         */
-        disable 'InvalidPackage'
-    }
-}
-
-/** only necessary if you need to use latest SNAPSHOT
-configurations.all {
-    // check for updates every build
-    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
-}
- **/
-
-dependencies {
-    compile(group: 'com.graphhopper', name: 'graphhopper', version: '0.7-SNAPSHOT') {
-       exclude group: 'com.google.protobuf', module: 'protobuf-java'
-       exclude group: 'org.openstreetmap.osmosis', module: 'osmosis-osm-binary'
-       exclude group: 'org.apache.xmlgraphics', module: 'xmlgraphics-commons'
-    }
-
-    compile group: 'org.mapsforge', name: 'mapsforge-core', version: '0.6.0'
-    compile group: 'org.mapsforge', name: 'mapsforge-map', version: '0.6.0'
-    compile group: 'org.mapsforge', name: 'mapsforge-map-android', version: '0.6.0'
-    compile group: 'org.mapsforge', name: 'mapsforge-map-reader', version: '0.6.0'
-
-    compile group: 'org.slf4j', name: 'slf4j-android', version: '1.7.12'
-    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.12'
-}
diff --git a/android/app/pom.xml b/android/app/pom.xml
deleted file mode 100644
index 3bb2c70660..0000000000
--- a/android/app/pom.xml
+++ /dev/null
@@ -1,148 +0,0 @@
-<?xml version="1.0" encoding="UTF-8"?>
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
-    <modelVersion>4.0.0</modelVersion>
-    <groupId>com.graphhopper</groupId>
-    <artifactId>graphhopper-android</artifactId>
-    <version>0.7-SNAPSHOT</version>
-    <name>GraphHopper Android</name>
-    <packaging>apk</packaging>    
-    <organization>
-        <name>GraphHopper</name>
-        <url>http://graphhopper.com</url>
-    </organization>
-    
-    <parent>
-        <relativePath>../..</relativePath>
-        <groupId>com.graphhopper</groupId>
-        <artifactId>graphhopper-parent</artifactId>    	
-        <version>0.7-SNAPSHOT</version>
-    </parent>
-    <properties>
-        <mapsforge.version>0.6.0</mapsforge.version>
-        <!-- do not put the properties here as it differs from dev to dev <android.sdk.path>/home/peterk/Programme/android-sdk-linux_x86</android.sdk.path>
-        instead use your IDE to set it up or specify android sdk via command line
-        using -Dandroid.sdk.path=... or by setting environment variable ANDROID_HOME
-        https://github.com/rgladwell/m2e-android/issues/52 -->
-    </properties>    
-    
-    <dependencies>        
-        <dependency>
-            <groupId>com.graphhopper</groupId>
-            <artifactId>graphhopper</artifactId>
-            <version>${project.parent.version}</version>            
-            <type>jar</type>
-            <exclusions>
-                <exclusion>
-                    <groupId>com.google.protobuf</groupId>
-                    <artifactId>protobuf-java</artifactId>                    
-                </exclusion>
-                <exclusion>
-                    <groupId>org.openstreetmap.osmosis</groupId>
-                    <artifactId>osmosis-osm-binary</artifactId>                    
-                </exclusion>
-                <exclusion>
-                    <groupId>org.apache.xmlgraphics</groupId>
-                    <artifactId>xmlgraphics-commons</artifactId>
-                </exclusion>
-            </exclusions>
-        </dependency>        
-          
-        <!-- see scripts/maven-install-mapsforge.sh if downloading from
-             maven central does not work (it should). 
-             if we would use system dep it doesn't work (classnotfound). See also script for more infos.
-        -->          
-        <dependency>
-            <groupId>org.mapsforge</groupId>            
-            <artifactId>mapsforge-core</artifactId>
-            <version>${mapsforge.version}</version>
-        </dependency>    
-        <dependency>
-            <groupId>org.mapsforge</groupId>            
-            <artifactId>mapsforge-map</artifactId>
-            <version>${mapsforge.version}</version>
-        </dependency>
-        <dependency>
-            <groupId>org.mapsforge</groupId>            
-            <artifactId>mapsforge-map-android</artifactId>
-            <version>${mapsforge.version}</version>
-        </dependency>        
-        <dependency>
-            <groupId>org.mapsforge</groupId>            
-            <artifactId>mapsforge-map-reader</artifactId>
-            <version>${mapsforge.version}</version>
-        </dependency>
-        
-        <dependency>
-            <groupId>org.slf4j</groupId>
-            <artifactId>slf4j-android</artifactId>
-            <version>1.7.12</version>
-        </dependency>
-        
-        <dependency>
-            <groupId>org.slf4j</groupId>
-            <artifactId>slf4j-api</artifactId>
-            <version>1.7.12</version>
-        </dependency>
-
-        <!-- Make sure this is above (!) the android dependencies -->
-        <!--
-        <dependency>
-            <groupId>com.pivotallabs</groupId>
-            <artifactId>robolectric</artifactId>
-            <version>1.1</version>
-            <scope>test</scope>
-        </dependency>
-        -->
-        <dependency>
-            <groupId>com.google.android</groupId>
-            <artifactId>android</artifactId>
-            <version>2.2.1</version>
-            <scope>provided</scope>
-        </dependency>
-
-    </dependencies>
-
-    <build>
-        <finalName>${project.artifactId}</finalName>        
-        
-        <plugins>     
-            <plugin>
-                <groupId>org.apache.maven.plugins</groupId>
-                <artifactId>maven-compiler-plugin</artifactId>
-                <configuration>
-                    <!-- <compilerArgument>-Xlint:unchecked</compilerArgument>
-                    -->
-                    <source>1.7</source>
-                    <target>1.7</target>
-                </configuration>
-            </plugin>       
-            <plugin>
-                <!-- See http://code.google.com/p/maven-android-plugin/ -->
-                <groupId>com.jayway.maven.plugins.android.generation2</groupId>
-                <artifactId>android-maven-plugin</artifactId>
-                <version>4.0.0-rc.2</version>
-                <extensions>true</extensions>
-                <configuration>
-                    <sdk>
-                        <!-- platform or api level (api level 8 = platform 2.2) -->                        
-                        <platform>22</platform>
-                    </sdk>
-                    <deleteConflictingFiles>true</deleteConflictingFiles>
-                    <undeployBeforeDeploy>true</undeployBeforeDeploy>
-		    
-                    <!--
-                    bug in maven plugin I think
-                    <extractDuplicates>true</extractDuplicates>
-                    -->
-                </configuration>                
-            </plugin>            
-        </plugins>
-    </build>
-    
-    <repositories>        		
-        <!-- Android is in maven central! To install android sdk in a continuos integration environment see http://stackoverflow.com/q/4681697/194609
-        For mapsforge see scripts/maven-install-mapsforge.sh  -->
-    </repositories>
-    
-</project>
diff --git a/android/app/project.properties b/android/app/project.properties
deleted file mode 100644
index 916037e334..0000000000
--- a/android/app/project.properties
+++ /dev/null
@@ -1,14 +0,0 @@
-# This file is automatically generated by Android Tools.
-# Do not modify this file -- YOUR CHANGES WILL BE ERASED!
-#
-# This file must be checked in Version Control Systems.
-#
-# To customize properties used by the Ant build system edit
-# "ant.properties", and override values to adapt the script to your
-# project structure.
-#
-# To enable ProGuard to shrink and obfuscate your code, uncomment this (available properties: sdk.dir, user.home):
-#proguard.config=${sdk.dir}/tools/proguard/proguard-android.txt:proguard-project.txt
-
-# Project target.
-target=android-23
diff --git a/android/app/src/main/AndroidManifest.xml b/android/app/src/main/AndroidManifest.xml
deleted file mode 100644
index aa1cea3964..0000000000
--- a/android/app/src/main/AndroidManifest.xml
+++ /dev/null
@@ -1,35 +0,0 @@
-<manifest xmlns:android="http://schemas.android.com/apk/res/android"
-    package="com.graphhopper.android"
-    android:versionCode="1"
-    android:versionName="0.1" >
-
-    <!-- mapsforge cache and saving maps -->
-    <uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE" />
-
-    <!-- necessary to easily download maps via wifi -->
-    <uses-permission android:name="android.permission.INTERNET" />
-    <uses-permission android:name="android.permission.ACCESS_NETWORK_STATE" />
-
-    <uses-sdk
-        android:minSdkVersion="10"
-        android:targetSdkVersion="22" />
-
-    <application
-        android:hardwareAccelerated="false"
-        android:allowBackup="true"        
-        android:icon="@drawable/logo"
-        android:label="@string/app_name"
-        android:theme="@style/AppTheme" >
-        <activity
-            android:name=".MainActivity"
-            android:label="@string/title_activity_main"
-            android:screenOrientation="portrait" >
-            <intent-filter>
-                <action android:name="android.intent.action.MAIN" />
-
-                <category android:name="android.intent.category.LAUNCHER" />
-            </intent-filter>
-        </activity>
-    </application>
-
-</manifest>
\ No newline at end of file
diff --git a/android/app/src/main/java/com/graphhopper/android/AndroidDownloader.java b/android/app/src/main/java/com/graphhopper/android/AndroidDownloader.java
deleted file mode 100644
index e5fdcda78f..0000000000
--- a/android/app/src/main/java/com/graphhopper/android/AndroidDownloader.java
+++ /dev/null
@@ -1,11 +0,0 @@
-package com.graphhopper.android;
-
-import com.graphhopper.util.Downloader;
-
-public class AndroidDownloader extends Downloader
-{
-    public AndroidDownloader()
-    {
-        super("GraphHopper Android");
-    }
-}
diff --git a/android/app/src/main/java/com/graphhopper/android/AndroidHelper.java b/android/app/src/main/java/com/graphhopper/android/AndroidHelper.java
deleted file mode 100644
index c618ccc2db..0000000000
--- a/android/app/src/main/java/com/graphhopper/android/AndroidHelper.java
+++ /dev/null
@@ -1,53 +0,0 @@
-package com.graphhopper.android;
-
-import java.io.BufferedReader;
-import java.io.IOException;
-import java.io.Reader;
-import java.util.ArrayList;
-import java.util.List;
-
-import android.content.Context;
-import android.net.ConnectivityManager;
-import android.net.NetworkInfo;
-
-public class AndroidHelper
-{
-    public static List<String> readFile( Reader simpleReader ) throws IOException
-    {
-        BufferedReader reader = new BufferedReader(simpleReader);
-        try
-        {
-            List<String> res = new ArrayList<String>();
-            String line;
-            while ((line = reader.readLine()) != null)
-            {
-                res.add(line);
-            }
-            return res;
-        } finally
-        {
-            reader.close();
-        }
-    }
-
-    public static boolean isFastDownload( Context ctx )
-    {
-        ConnectivityManager mgrConn = (ConnectivityManager) ctx
-                .getSystemService(Context.CONNECTIVITY_SERVICE);
-        return mgrConn.getActiveNetworkInfo() != null
-                && mgrConn.getActiveNetworkInfo().getState() == NetworkInfo.State.CONNECTED;
-        // TelephonyManager mgrTel = (TelephonyManager)
-        // ctx.getSystemService(Context.TELEPHONY_SERVICE);
-        // || mgrTel.getNetworkType() == TelephonyManager.NETWORK_TYPE_UMTS) {
-    }
-
-    public static String getFileName( String str )
-    {
-        int index = str.lastIndexOf("/");
-        if (index > 0)
-        {
-            return str.substring(index + 1);
-        }
-        return str;
-    }
-}
diff --git a/android/app/src/main/java/com/graphhopper/android/GHAsyncTask.java b/android/app/src/main/java/com/graphhopper/android/GHAsyncTask.java
deleted file mode 100644
index e60f0d4663..0000000000
--- a/android/app/src/main/java/com/graphhopper/android/GHAsyncTask.java
+++ /dev/null
@@ -1,41 +0,0 @@
-package com.graphhopper.android;
-
-import android.os.AsyncTask;
-
-public abstract class GHAsyncTask<A, B, C> extends AsyncTask<A, B, C>
-{
-    private Throwable error;
-
-    protected abstract C saveDoInBackground( A... params ) throws Exception;
-
-    protected C doInBackground( A... params )
-    {
-        try
-        {
-            return saveDoInBackground(params);
-        } catch (Throwable t)
-        {
-            error = t;
-            return null;
-        }
-    }
-
-    public boolean hasError()
-    {
-        return error != null;
-    }
-
-    public Throwable getError()
-    {
-        return error;
-    }
-
-    public String getErrorMessage()
-    {
-        if (hasError())
-        {
-            return error.getMessage();
-        }
-        return "No Error";
-    }
-}
diff --git a/android/app/src/main/java/com/graphhopper/android/MainActivity.java b/android/app/src/main/java/com/graphhopper/android/MainActivity.java
deleted file mode 100644
index 2a10bea4af..0000000000
--- a/android/app/src/main/java/com/graphhopper/android/MainActivity.java
+++ /dev/null
@@ -1,586 +0,0 @@
-package com.graphhopper.android;
-
-import android.app.Activity;
-import android.app.ProgressDialog;
-import android.content.Intent;
-import android.graphics.Color;
-import android.graphics.Path;
-import android.graphics.drawable.Drawable;
-import android.net.Uri;
-import android.os.AsyncTask;
-import android.os.Build;
-import android.os.Bundle;
-import android.os.Environment;
-import android.util.Log;
-import android.view.Menu;
-import android.view.MenuItem;
-import android.view.View;
-import android.view.View.OnClickListener;
-import android.view.Window;
-import android.widget.ArrayAdapter;
-import android.widget.Button;
-import android.widget.EditText;
-import android.widget.Spinner;
-import android.widget.TextView;
-import android.widget.Toast;
-import com.graphhopper.PathWrapper;
-
-import com.graphhopper.GHRequest;
-import com.graphhopper.GHResponse;
-import com.graphhopper.GraphHopper;
-import com.graphhopper.routing.AlgorithmOptions;
-import com.graphhopper.util.Constants;
-import com.graphhopper.util.Helper;
-import com.graphhopper.util.PointList;
-import com.graphhopper.util.ProgressListener;
-import com.graphhopper.util.StopWatch;
-
-import org.mapsforge.core.graphics.Bitmap;
-import org.mapsforge.core.graphics.Paint;
-import org.mapsforge.core.graphics.Style;
-import org.mapsforge.core.model.LatLong;
-import org.mapsforge.core.model.MapPosition;
-import org.mapsforge.core.model.Point;
-import org.mapsforge.map.android.graphics.AndroidGraphicFactory;
-import org.mapsforge.map.android.util.AndroidUtil;
-import org.mapsforge.map.android.view.MapView;
-import org.mapsforge.map.datastore.MapDataStore;
-import org.mapsforge.map.layer.Layers;
-import org.mapsforge.map.layer.cache.TileCache;
-import org.mapsforge.map.layer.overlay.Marker;
-import org.mapsforge.map.layer.overlay.Polyline;
-import org.mapsforge.map.layer.renderer.TileRendererLayer;
-import org.mapsforge.map.reader.MapFile;
-import org.mapsforge.map.rendertheme.InternalRenderTheme;
-
-import java.io.File;
-import java.io.FilenameFilter;
-import java.util.ArrayList;
-import java.util.List;
-import java.util.Map;
-import java.util.TreeMap;
-
-public class MainActivity extends Activity
-{
-    private MapView mapView;
-    private GraphHopper hopper;
-    private LatLong start;
-    private LatLong end;
-    private Spinner localSpinner;
-    private Button localButton;
-    private Spinner remoteSpinner;
-    private Button remoteButton;
-    private volatile boolean prepareInProgress = false;
-    private volatile boolean shortestPathRunning = false;
-    private String currentArea = "berlin";
-    private String fileListURL = "http://download2.graphhopper.com/public/maps/0.7/";
-    private String prefixURL = fileListURL;
-    private String downloadURL;
-    private File mapsFolder;
-    private TileCache tileCache;
-    private TileRendererLayer tileRendererLayer;
-
-    protected boolean onMapTap( LatLong tapLatLong, Point layerXY, Point tapXY )
-    {
-        if (!isReady())
-            return false;
-
-        if (shortestPathRunning)
-        {
-            logUser("Calculation still in progress");
-            return false;
-        }
-        Layers layers = mapView.getLayerManager().getLayers();
-
-        if (start != null && end == null)
-        {
-            end = tapLatLong;
-            shortestPathRunning = true;
-            Marker marker = createMarker(tapLatLong, R.drawable.flag_red);
-            if (marker != null)
-            {
-                layers.add(marker);
-            }
-
-            calcPath(start.latitude, start.longitude, end.latitude,
-                    end.longitude);
-        } else
-        {
-            start = tapLatLong;
-            end = null;
-            // remove all layers but the first one, which is the map
-            while (layers.size() > 1)
-            {
-                layers.remove(1);
-            }
-
-            Marker marker = createMarker(start, R.drawable.flag_green);
-            if (marker != null)
-            {
-                layers.add(marker);
-            }
-        }
-        return true;
-    }
-
-    @Override
-    protected void onCreate( Bundle savedInstanceState )
-    {
-        requestWindowFeature(Window.FEATURE_NO_TITLE);
-        super.onCreate(savedInstanceState);
-        setContentView(R.layout.main);
-        AndroidGraphicFactory.createInstance(getApplication());
-
-        mapView = new MapView(this);
-        mapView.setClickable(true);
-        mapView.setBuiltInZoomControls(true);
-
-        tileCache = AndroidUtil.createTileCache(this, getClass().getSimpleName(), mapView.getModel().displayModel.getTileSize(),
-                1f, mapView.getModel().frameBufferModel.getOverdrawFactor());
-
-        final EditText input = new EditText(this);
-        input.setText(currentArea);
-        boolean greaterOrEqKitkat = Build.VERSION.SDK_INT >= 19;
-        if (greaterOrEqKitkat)
-        {
-            if (!Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED))
-            {
-                logUser("GraphHopper is not usable without an external storage!");
-                return;
-            }
-            mapsFolder = new File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS),
-                    "/graphhopper/maps/");
-        } else
-            mapsFolder = new File(Environment.getExternalStorageDirectory(), "/graphhopper/maps/");
-
-        if (!mapsFolder.exists())
-            mapsFolder.mkdirs();
-
-        TextView welcome = (TextView) findViewById(R.id.welcome);
-        welcome.setText("Welcome to GraphHopper " + Constants.VERSION + "!");
-        welcome.setPadding(6, 3, 3, 3);
-        localSpinner = (Spinner) findViewById(R.id.locale_area_spinner);
-        localButton = (Button) findViewById(R.id.locale_button);
-        remoteSpinner = (Spinner) findViewById(R.id.remote_area_spinner);
-        remoteButton = (Button) findViewById(R.id.remote_button);
-        // TODO get user confirmation to download
-        // if (AndroidHelper.isFastDownload(this))
-        chooseAreaFromRemote();
-        chooseAreaFromLocal();
-    }
-
-    @Override
-    protected void onDestroy()
-    {
-        super.onDestroy();
-        if (hopper != null)
-            hopper.close();
-
-        hopper = null;
-        // necessary?
-        System.gc();
-
-        // Cleanup Mapsforge
-        this.mapView.destroyAll();
-    }
-
-    boolean isReady()
-    {
-        // only return true if already loaded
-        if (hopper != null)
-            return true;
-
-        if (prepareInProgress)
-        {
-            logUser("Preparation still in progress");
-            return false;
-        }
-        logUser("Prepare finished but hopper not ready. This happens when there was an error while loading the files");
-        return false;
-    }
-
-    private void initFiles( String area )
-    {
-        prepareInProgress = true;
-        currentArea = area;
-        downloadingFiles();
-    }
-
-    private void chooseAreaFromLocal()
-    {
-        List<String> nameList = new ArrayList<String>();
-        String[] files = mapsFolder.list(new FilenameFilter()
-        {
-            @Override
-            public boolean accept( File dir, String filename )
-            {
-                return filename != null
-                        && (filename.endsWith(".ghz") || filename
-                        .endsWith("-gh"));
-            }
-        });
-        for (String file : files)
-        {
-            nameList.add(file);
-        }
-
-        if (nameList.isEmpty())
-            return;
-
-        chooseArea(localButton, localSpinner, nameList,
-                new MySpinnerListener()
-                {
-                    @Override
-                    public void onSelect( String selectedArea, String selectedFile )
-                    {
-                        initFiles(selectedArea);
-                    }
-                });
-    }
-
-    private void chooseAreaFromRemote()
-    {
-        new GHAsyncTask<Void, Void, List<String>>()
-        {
-            protected List<String> saveDoInBackground( Void... params )
-                    throws Exception
-            {
-                String[] lines = new AndroidDownloader().downloadAsString(fileListURL, false).split("\n");
-                List<String> res = new ArrayList<String>();
-                for (String str : lines)
-                {
-                    int index = str.indexOf("href=\"");
-                    if (index >= 0)
-                    {
-                        index += 6;
-                        int lastIndex = str.indexOf(".ghz", index);
-                        if (lastIndex >= 0)
-                            res.add(prefixURL + str.substring(index, lastIndex)
-                                    + ".ghz");
-                    }
-                }
-
-                return res;
-            }
-
-            @Override
-            protected void onPostExecute( List<String> nameList )
-            {
-                if (hasError())
-                {
-                    getError().printStackTrace();
-                    logUser("Are you connected to the internet? Problem while fetching remote area list: "
-                            + getErrorMessage());
-                    return;
-                } else if (nameList == null || nameList.isEmpty())
-                {
-                    logUser("No maps created for your version!? " + fileListURL);
-                    return;
-                }
-
-                MySpinnerListener spinnerListener = new MySpinnerListener()
-                {
-                    @Override
-                    public void onSelect( String selectedArea, String selectedFile )
-                    {
-                        if (selectedFile == null
-                                || new File(mapsFolder, selectedArea + ".ghz").exists()
-                                || new File(mapsFolder, selectedArea + "-gh").exists())
-                        {
-                            downloadURL = null;
-                        } else
-                        {
-                            downloadURL = selectedFile;
-                        }
-                        initFiles(selectedArea);
-                    }
-                };
-                chooseArea(remoteButton, remoteSpinner, nameList,
-                        spinnerListener);
-            }
-        }.execute();
-    }
-
-    private void chooseArea( Button button, final Spinner spinner,
-                             List<String> nameList, final MySpinnerListener mylistener )
-    {
-        final Map<String, String> nameToFullName = new TreeMap<String, String>();
-        for (String fullName : nameList)
-        {
-            String tmp = Helper.pruneFileEnd(fullName);
-            if (tmp.endsWith("-gh"))
-                tmp = tmp.substring(0, tmp.length() - 3);
-
-            tmp = AndroidHelper.getFileName(tmp);
-            nameToFullName.put(tmp, fullName);
-        }
-        nameList.clear();
-        nameList.addAll(nameToFullName.keySet());
-        ArrayAdapter<String> spinnerArrayAdapter = new ArrayAdapter<String>(
-                this, android.R.layout.simple_spinner_dropdown_item, nameList);
-        spinner.setAdapter(spinnerArrayAdapter);
-        button.setOnClickListener(new OnClickListener()
-        {
-            @Override
-            public void onClick( View v )
-            {
-                Object o = spinner.getSelectedItem();
-                if (o != null && o.toString().length() > 0 && !nameToFullName.isEmpty())
-                {
-                    String area = o.toString();
-                    mylistener.onSelect(area, nameToFullName.get(area));
-                } else
-                {
-                    mylistener.onSelect(null, null);
-                }
-            }
-        });
-    }
-
-    public interface MySpinnerListener
-    {
-        void onSelect( String selectedArea, String selectedFile );
-    }
-
-    void downloadingFiles()
-    {
-        final File areaFolder = new File(mapsFolder, currentArea + "-gh");
-        if (downloadURL == null || areaFolder.exists())
-        {
-            loadMap(areaFolder);
-            return;
-        }
-
-        final ProgressDialog dialog = new ProgressDialog(this);
-        dialog.setMessage("Downloading and uncompressing " + downloadURL);
-        dialog.setIndeterminate(false);
-        dialog.setMax(100);
-        dialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
-        dialog.show();
-
-        new GHAsyncTask<Void, Integer, Object>()
-        {
-            protected Object saveDoInBackground( Void... _ignore )
-                    throws Exception
-            {
-                String localFolder = Helper.pruneFileEnd(AndroidHelper.getFileName(downloadURL));
-                localFolder = new File(mapsFolder, localFolder + "-gh").getAbsolutePath();
-                log("downloading & unzipping " + downloadURL + " to " + localFolder);
-                AndroidDownloader downloader = new AndroidDownloader();
-                downloader.setTimeout(30000);
-                downloader.downloadAndUnzip(downloadURL, localFolder,
-                        new ProgressListener()
-                        {
-                            @Override
-                            public void update( long val )
-                            {
-                                publishProgress((int) val);
-                            }
-                        });
-                return null;
-            }
-
-            protected void onProgressUpdate( Integer... values )
-            {
-                super.onProgressUpdate(values);
-                dialog.setProgress(values[0]);
-            }
-
-            protected void onPostExecute( Object _ignore )
-            {
-                dialog.hide();
-                if (hasError())
-                {
-                    String str = "An error happend while retrieving maps:" + getErrorMessage();
-                    log(str, getError());
-                    logUser(str);
-                } else
-                {
-                    loadMap(areaFolder);
-                }
-            }
-        }.execute();
-    }
-
-    void loadMap( File areaFolder )
-    {
-        logUser("loading map");
-        MapDataStore mapDataStore = new MapFile(new File(areaFolder, currentArea + ".map"));
-
-        mapView.getLayerManager().getLayers().clear();
-
-        tileRendererLayer = new TileRendererLayer(tileCache, mapDataStore,
-                mapView.getModel().mapViewPosition, false, true, AndroidGraphicFactory.INSTANCE)
-                {
-                    @Override
-                    public boolean onLongPress( LatLong tapLatLong, Point layerXY, Point tapXY )
-                    {
-                        return onMapTap(tapLatLong, layerXY, tapXY);
-                    }
-                };
-        tileRendererLayer.setTextScale(1.5f);
-        tileRendererLayer.setXmlRenderTheme(InternalRenderTheme.OSMARENDER);
-        mapView.getModel().mapViewPosition.setMapPosition(new MapPosition(mapDataStore.boundingBox().getCenterPoint(), (byte) 15));
-        mapView.getLayerManager().getLayers().add(tileRendererLayer);
-
-        setContentView(mapView);
-        loadGraphStorage();
-    }
-
-    void loadGraphStorage()
-    {
-        logUser("loading graph (" + Constants.VERSION + ") ... ");
-        new GHAsyncTask<Void, Void, Path>()
-        {
-            protected Path saveDoInBackground( Void... v ) throws Exception
-            {
-                GraphHopper tmpHopp = new GraphHopper().forMobile();
-                tmpHopp.load(new File(mapsFolder, currentArea).getAbsolutePath());
-                log("found graph " + tmpHopp.getGraphHopperStorage().toString() + ", nodes:" + tmpHopp.getGraphHopperStorage().getNodes());
-                hopper = tmpHopp;
-                return null;
-            }
-
-            protected void onPostExecute( Path o )
-            {
-                if (hasError())
-                {
-                    logUser("An error happend while creating graph:"
-                            + getErrorMessage());
-                } else
-                {
-                    logUser("Finished loading graph. Press long to define where to start and end the route.");
-                }
-
-                finishPrepare();
-            }
-        }.execute();
-    }
-
-    private void finishPrepare()
-    {
-        prepareInProgress = false;
-    }
-
-    private Polyline createPolyline( PathWrapper response )
-    {
-        Paint paintStroke = AndroidGraphicFactory.INSTANCE.createPaint();
-        paintStroke.setStyle(Style.STROKE);
-        paintStroke.setColor(Color.argb(128, 0, 0xCC, 0x33));
-        paintStroke.setDashPathEffect(new float[]
-        {
-            25, 15
-        });
-        paintStroke.setStrokeWidth(8);
-
-        Polyline line = new Polyline((org.mapsforge.core.graphics.Paint) paintStroke, AndroidGraphicFactory.INSTANCE);
-        List<LatLong> geoPoints = line.getLatLongs();
-        PointList tmp = response.getPoints();
-        for (int i = 0; i < response.getPoints().getSize(); i++)
-        {
-            geoPoints.add(new LatLong(tmp.getLatitude(i), tmp.getLongitude(i)));
-        }
-
-        return line;
-    }
-
-    private Marker createMarker( LatLong p, int resource )
-    {
-        Drawable drawable = getResources().getDrawable(resource);
-        Bitmap bitmap = AndroidGraphicFactory.convertToBitmap(drawable);
-        return new Marker(p, bitmap, 0, -bitmap.getHeight() / 2);
-    }
-
-    public void calcPath( final double fromLat, final double fromLon,
-                          final double toLat, final double toLon )
-    {
-
-        log("calculating path ...");
-        new AsyncTask<Void, Void, PathWrapper>()
-        {
-            float time;
-
-            protected PathWrapper doInBackground( Void... v )
-            {
-                StopWatch sw = new StopWatch().start();
-                GHRequest req = new GHRequest(fromLat, fromLon, toLat, toLon).
-                        setAlgorithm(AlgorithmOptions.DIJKSTRA_BI);
-                req.getHints().
-                        put("instructions", "false");
-                GHResponse resp = hopper.route(req);
-                time = sw.stop().getSeconds();
-                return resp.getBest();
-            }
-
-            protected void onPostExecute( PathWrapper resp )
-            {
-                if (!resp.hasErrors())
-                {
-                    log("from:" + fromLat + "," + fromLon + " to:" + toLat + ","
-                            + toLon + " found path with distance:" + resp.getDistance()
-                            / 1000f + ", nodes:" + resp.getPoints().getSize() + ", time:"
-                            + time + " " + resp.getDebugInfo());
-                    logUser("the route is " + (int) (resp.getDistance() / 100) / 10f
-                            + "km long, time:" + resp.getTime() / 60000f + "min, debug:" + time);
-
-                    mapView.getLayerManager().getLayers().add(createPolyline(resp));
-                    //mapView.redraw();
-                } else
-                {
-                    logUser("Error:" + resp.getErrors());
-                }
-                shortestPathRunning = false;
-            }
-        }.execute();
-    }
-
-    private void log( String str )
-    {
-        Log.i("GH", str);
-    }
-
-    private void log( String str, Throwable t )
-    {
-        Log.i("GH", str, t);
-    }
-
-    private void logUser( String str )
-    {
-        log(str);
-        Toast.makeText(this, str, Toast.LENGTH_LONG).show();
-    }
-
-    private static final int NEW_MENU_ID = Menu.FIRST + 1;
-
-    @Override
-    public boolean onCreateOptionsMenu( Menu menu )
-    {
-        super.onCreateOptionsMenu(menu);
-        menu.add(0, NEW_MENU_ID, 0, "Google");
-        // menu.add(0, NEW_MENU_ID + 1, 0, "Other");
-        return true;
-    }
-
-    public boolean onOptionsItemSelected( MenuItem item )
-    {
-        switch (item.getItemId())
-        {
-            case NEW_MENU_ID:
-                if (start == null || end == null)
-                {
-                    logUser("tap screen to set start and end of route");
-                    break;
-                }
-                Intent intent = new Intent(Intent.ACTION_VIEW);
-                // get rid of the dialog
-                intent.setClassName("com.google.android.apps.maps",
-                        "com.google.android.maps.MapsActivity");
-                intent.setData(Uri.parse("http://maps.google.com/maps?saddr="
-                        + start.latitude + "," + start.longitude + "&daddr="
-                        + end.latitude + "," + end.longitude));
-                startActivity(intent);
-                break;
-        }
-        return true;
-    }
-}
diff --git a/android/app/src/main/res/drawable/flag_green.png b/android/app/src/main/res/drawable/flag_green.png
deleted file mode 100644
index e4bc611f87..0000000000
Binary files a/android/app/src/main/res/drawable/flag_green.png and /dev/null differ
diff --git a/android/app/src/main/res/drawable/flag_red.png b/android/app/src/main/res/drawable/flag_red.png
deleted file mode 100644
index e8a602da7b..0000000000
Binary files a/android/app/src/main/res/drawable/flag_red.png and /dev/null differ
diff --git a/android/app/src/main/res/drawable/logo.png b/android/app/src/main/res/drawable/logo.png
deleted file mode 100644
index b8c4f3e7bf..0000000000
Binary files a/android/app/src/main/res/drawable/logo.png and /dev/null differ
diff --git a/android/app/src/main/res/layout/main.xml b/android/app/src/main/res/layout/main.xml
deleted file mode 100644
index da52af8fcb..0000000000
--- a/android/app/src/main/res/layout/main.xml
+++ /dev/null
@@ -1,68 +0,0 @@
-<?xml version="1.0" encoding="utf-8"?>
-<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
-    android:layout_width="fill_parent"
-    android:layout_height="fill_parent"
-    android:orientation="vertical" >
-
-    <LinearLayout
-        android:layout_width="fill_parent"
-        android:layout_height="100dp"
-        android:orientation="horizontal" >
-
-        <TextView
-            android:id="@+id/welcome"
-            android:layout_width="wrap_content"
-            android:layout_height="wrap_content"
-            android:text="Welcome to GraphHopper!"
-            android:textAppearance="?android:attr/textAppearanceLarge" />
-    </LinearLayout>
-
-    <LinearLayout
-        android:layout_width="fill_parent"
-        android:layout_height="100dp"
-        android:orientation="horizontal" >
-
-        <TextView
-            android:id="@+id/textView1"
-            android:layout_width="50dp"
-            android:layout_height="wrap_content"
-            android:text="Local" />
-
-        <Spinner
-            android:id="@+id/locale_area_spinner"
-            android:layout_width="180dp"
-            android:layout_height="60dp"
-            android:layout_weight="0.80" />
-
-        <Button
-            android:id="@+id/locale_button"
-            android:layout_width="86dp"
-            android:layout_height="60dp"
-            android:text="OK" />
-    </LinearLayout>
-
-    <LinearLayout
-        android:layout_width="fill_parent"
-        android:layout_height="100dp"
-        android:orientation="horizontal" >
-
-        <TextView
-            android:id="@+id/textView2"
-            android:layout_width="50dp"
-            android:layout_height="wrap_content"
-            android:text="Remote" />
-
-        <Spinner
-            android:id="@+id/remote_area_spinner"
-            android:layout_width="180dp"
-            android:layout_height="60dp"
-            android:layout_weight="0.80" />
-
-        <Button
-            android:id="@+id/remote_button"
-            android:layout_width="86dp"
-            android:layout_height="60dp"
-            android:text="Download" />
-    </LinearLayout>
-
-</LinearLayout>
\ No newline at end of file
diff --git a/android/app/src/main/res/values-large/dimens.xml b/android/app/src/main/res/values-large/dimens.xml
deleted file mode 100644
index 5c4a502e7a..0000000000
--- a/android/app/src/main/res/values-large/dimens.xml
+++ /dev/null
@@ -1,7 +0,0 @@
-<resources>
-
-    <dimen name="padding_small">8dp</dimen>
-    <dimen name="padding_medium">16dp</dimen>
-    <dimen name="padding_large">16dp</dimen>
-
-</resources>
\ No newline at end of file
diff --git a/android/app/src/main/res/values/dimens.xml b/android/app/src/main/res/values/dimens.xml
deleted file mode 100644
index ec966461c7..0000000000
--- a/android/app/src/main/res/values/dimens.xml
+++ /dev/null
@@ -1,7 +0,0 @@
-<resources>
-
-    <dimen name="padding_small">8dp</dimen>
-    <dimen name="padding_medium">8dp</dimen>
-    <dimen name="padding_large">16dp</dimen>
-
-</resources>
\ No newline at end of file
diff --git a/android/app/src/main/res/values/strings.xml b/android/app/src/main/res/values/strings.xml
deleted file mode 100644
index 37659acc40..0000000000
--- a/android/app/src/main/res/values/strings.xml
+++ /dev/null
@@ -1,6 +0,0 @@
-<resources>
-
-    <string name="app_name">GraphHopper</string>
-    <string name="title_activity_main">GraphHopper</string>
- 
-</resources>
\ No newline at end of file
diff --git a/android/app/src/main/res/values/styles.xml b/android/app/src/main/res/values/styles.xml
deleted file mode 100644
index 4dba0d0a4c..0000000000
--- a/android/app/src/main/res/values/styles.xml
+++ /dev/null
@@ -1,5 +0,0 @@
-<resources>
-
-    <style name="AppTheme" parent="android:Theme.Light" />
-
-</resources>
\ No newline at end of file
diff --git a/core/src/main/java/com/graphhopper/routing/safety/ColorMapParser.java b/core/src/main/java/com/graphhopper/routing/safety/ColorMapParser.java
index 3ab43485f9..0cdfadb986 100644
--- a/core/src/main/java/com/graphhopper/routing/safety/ColorMapParser.java
+++ b/core/src/main/java/com/graphhopper/routing/safety/ColorMapParser.java
@@ -16,7 +16,7 @@
     public static void parseFile(HashMap<Long, NodeInformation> nodeMap, 
         HashMap<Long, Way> wayMap, HashMap<Long, HashMap<Long, Integer>> scores) {
         try {
-            File file = new File("ColorInfo.xlsx");
+            File file = new File("colorinfo.xlsx");
             FileInputStream fs = new FileInputStream(file);
             XSSFWorkbook wb = new XSSFWorkbook(fs);
             XSSFSheet sheet = wb.getSheetAt(0);
