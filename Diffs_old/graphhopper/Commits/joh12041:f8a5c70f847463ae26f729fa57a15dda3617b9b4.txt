diff --git a/reader-osm/src/main/java/com/graphhopper/reader/osm/runKSP.java b/reader-osm/src/main/java/com/graphhopper/reader/osm/runKSP.java
index 8a8be7dbd0..eeeaef38b7 100644
--- a/reader-osm/src/main/java/com/graphhopper/reader/osm/runKSP.java
+++ b/reader-osm/src/main/java/com/graphhopper/reader/osm/runKSP.java
@@ -4,6 +4,7 @@
 import com.graphhopper.GHResponse;
 import com.graphhopper.GraphHopper;
 import com.graphhopper.PathWrapper;
+import com.graphhopper.matching.EdgeMatch;
 import com.graphhopper.matching.MapMatching;
 import com.graphhopper.matching.MatchResult;
 import com.graphhopper.routing.AlgorithmOptions;
@@ -118,27 +119,36 @@ else if (pointsHeader[i].equalsIgnoreCase("millis")) {
             }
             else if (pointsList.size() > 0) {
                 path = GPXToPath(pointsList);
+                //path = trimPath(path, pointsList);
                 if (path.getDistance() > 0) {
                     score = getBeauty(path);
-                    writeOutput(sc_out, i, "Google", routeID, path, score);
+                    writeOutput(sc_out, i, "Google", prevRouteID, path, score);
                 }
                 pointsList.clear();
                 i++;
+                pointsList.add(pt);
+                if (i % 10 == 0) {
+                    for (FileWriter fw : outputFiles) {
+                        fw.flush();
+                    }
+                }
             }
-            pointsList.add(pt);
             prevRouteID = routeID;
         }
         if (pointsList.size() > 0) {
             path = GPXToPath(pointsList);
             if (path.getDistance() > 0) {
                 score = getBeauty(path);
-                writeOutput(sc_out, i, "Google", routeID, path, score);
+                writeOutput(sc_out, i, "Google", prevRouteID, path, score);
             }
         }
         sc_out.close();
         sc_in.close();
     }
 
+    public PathWrapper trimPath(PathWrapper path, ArrayList<GPXEntry> original) {
+        return new PathWrapper();
+    }
 
 
     public void setDataSources() throws Exception {
@@ -213,13 +223,14 @@ public void prepMapMatcher() {
 
         // create MapMatching object, can and should be shared accross threads
         AlgorithmOptions algoOpts = AlgorithmOptions.start().
-                algorithm(Parameters.Algorithms.DIJKSTRA_BI).
+                algorithm(Parameters.Algorithms.DIJKSTRA).
                 traversalMode(hopper.getTraversalMode()).
                 hints(new HintsMap().put("weighting", "fastest").put("vehicle", "car")).
                 build();
         mapMatching = new MapMatching(hopper, algoOpts);
         mapMatching.setTransitionProbabilityBeta(0.00959442);
-        mapMatching.setMeasurementErrorSigma(40);
+//        mapMatching.setTransitionProbabilityBeta(0.000959442);
+        mapMatching.setMeasurementErrorSigma(100);
     }
 
 
@@ -306,6 +317,12 @@ public void process_routes() throws Exception {
         int routes_skipped = 0;
         for (int i=0; i<numPairs; i++) {
 
+            if (i % 50 == 0) {
+                for (FileWriter fw : outputFiles) {
+                    fw.flush();
+                }
+            }
+
             // Get Routes
             points = inputPoints.get(i);
             od_id = id_to_points.get(i);
@@ -420,7 +437,9 @@ public static void main(String[] args) throws Exception {
         //ksp.setCity("SF");
         //ksp.setRouteType("grid");
         ksp.prepMapMatcher();
-        ksp.PointsToPath("../data/output/sf_grid_google_gpx.csv", "../data/output/sf_grid_google_ghenhanced.csv");
-
+        //ksp.PointsToPath("../data/output/sf_grid_google_gpx.csv", "../data/output/sf_grid_google_ghenhanced_sigma100_transitionDefault.csv");
+        ksp.PointsToPath("../data/output/sf_grid_mapquest_gpx.csv", "../data/output/sf_grid_mapquest_ghenhanced_sigma100_transitionDefault.csv");
+        ksp.PointsToPath("../data/output/nyc_grid_mapquest_gpx.csv", "../data/output/nyc_grid_mapquest_ghenhanced_sigma100_transitionDefault.csv");
+        ksp.PointsToPath("../data/output/nyc_grid_google_gpx.csv", "../data/output/nyc_grid_google_ghenhanced_sigma100_transitionDefault.csv");
     }
 }
