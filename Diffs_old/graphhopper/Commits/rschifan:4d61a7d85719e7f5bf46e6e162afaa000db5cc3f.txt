diff --git a/api/src/main/java/com/graphhopper/util/Parameters.java b/api/src/main/java/com/graphhopper/util/Parameters.java
index 0ec9de5fc3..04a1fd0397 100644
--- a/api/src/main/java/com/graphhopper/util/Parameters.java
+++ b/api/src/main/java/com/graphhopper/util/Parameters.java
@@ -198,6 +198,7 @@
         public static final String EDGE_ID = "edge_id";
         public static final String TIME = "time";
         public static final String DISTANCE = "distance";
+        public static final String HIGHWAY = "highway";
     }
 
     public static final class PT {
diff --git a/core/src/main/java/com/graphhopper/routing/util/HappyMapsFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/HappyMapsFlagEncoder.java
index 7032afa2f4..1fefdcda3e 100644
--- a/core/src/main/java/com/graphhopper/routing/util/HappyMapsFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/HappyMapsFlagEncoder.java
@@ -4,28 +4,88 @@
 import com.graphhopper.reader.ReaderWay;
 import com.graphhopper.util.EdgeIteratorState;
 import com.graphhopper.util.PMap;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
+//import org.slf4j.Logger;
+//import org.slf4j.LoggerFactory;
 
 import java.io.*;
 import java.util.HashMap;
 import java.util.Map;
+import java.util.List;
+import java.util.Arrays;
 
 public class HappyMapsFlagEncoder extends FootFlagEncoder {
-    private final static Logger logger = LoggerFactory.getLogger(HappyMapsFlagEncoder.class);
+//    private final static Logger logger = LoggerFactory.getLogger(HappyMapsFlagEncoder.class);
 
     static final int MAX_NATURE = 3;
 
     protected EncodedDoubleValue natureEncoder;
+    protected EncodedValue highwayEncoder;
 
     private final Map<Long, Map<String, Double>> wayid2weights = new HashMap<>();
-
+    private final Map<String, Integer> highwayMap = new HashMap<>();
 
     public HappyMapsFlagEncoder(PMap configuration) {
         super(configuration);
 
+        // highway and certain tags like ferry and shuttle_train which can be used here (no logical overlap)
+        List<String> highwayList = Arrays.asList(
+                /* reserve index=0 for unset roads (not accessible) */
+                "_default",
+                "motorway", "motorway_link", "motorroad", "trunk", "trunk_link",
+                "primary", "primary_link", "secondary", "secondary_link", "tertiary", "tertiary_link",
+                "unclassified", "residential", "living_street", "service", "road", "track",
+                "forestry", "cycleway", "steps", "path", "footway", "pedestrian",
+                "ferry", "shuttle_train");
+        int counter = 0;
+        for (String hw : highwayList) {
+            highwayMap.put(hw, counter++);
+        }
+
         loadCustomWeights();
+    }
+
+    public String getHighwayString(Integer code){
+
+        String key= null;
+
+        for(Map.Entry entry: highwayMap.entrySet()){
+            if(code.equals(entry.getValue())) {
+                key = (String) entry.getKey();
+                break; //breaking because its one to one map
+            }
+        }
+        return key;
+    }
+
+
+    public int getHighway(EdgeIteratorState edge) {
+        return (int) highwayEncoder.getValue(edge.getFlags());
+    }
+
+    /**
+     * Do not use within weighting as this is suboptimal from performance point of view.
+     */
+    public String getHighwayAsString(EdgeIteratorState edge) {
+        int val = getHighway(edge);
+        for (Map.Entry<String, Integer> e : highwayMap.entrySet()) {
+            if (e.getValue() == val)
+                return e.getKey();
+        }
+        return null;
+    }
+
+    int getHighwayValue(ReaderWay way) {
+        String highwayValue = way.getTag("highway");
+
+        Integer hwValue = highwayMap.get(highwayValue);
 
+        if (way.hasTag("impassable", "yes") || way.hasTag("status", "impassable"))
+            hwValue = 0;
+
+        if (hwValue == null)
+            return 0;
+
+        return hwValue;
     }
 
 
@@ -94,9 +154,11 @@ public int defineWayBits(int index, int shift) {
         shift = super.defineWayBits(index, shift);
 
         natureEncoder = new EncodedDoubleValue("Nature", shift, 16, 0.001, 0, MAX_NATURE);
-
         shift += natureEncoder.getBits();
 
+        highwayEncoder = new EncodedValue("highway", shift, 5, 1, 0, highwayMap.size(), true);
+        shift += highwayEncoder.getBits();
+
         return shift;
     }
 
@@ -105,12 +167,14 @@ public long handleWayTags(ReaderWay way, long allowed, long relationFlags){
 
         long flags = super.handleWayTags(way, allowed, relationFlags);
 
-        long wayid = way.getId();
-
-        double nature = this.getCustomWeightByWayId(wayid, "nature");
+        double nature = this.getCustomWeightByWayId(way.getId(), "nature");
 
         flags = natureEncoder.setDoubleValue(flags, nature);
 
+        // HIGHWAY
+        int hwValue = getHighwayValue(way);
+        flags = highwayEncoder.setValue(flags, hwValue);
+
         return flags;
     }
 
diff --git a/core/src/main/java/com/graphhopper/routing/weighting/HappyMapsWeighting.java b/core/src/main/java/com/graphhopper/routing/weighting/HappyMapsWeighting.java
index a3ce8ad1ef..2ae3100390 100644
--- a/core/src/main/java/com/graphhopper/routing/weighting/HappyMapsWeighting.java
+++ b/core/src/main/java/com/graphhopper/routing/weighting/HappyMapsWeighting.java
@@ -3,23 +3,21 @@
 import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.routing.util.HappyMapsFlagEncoder;
 import com.graphhopper.util.EdgeIteratorState;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
 
 
 public class HappyMapsWeighting extends AbstractWeighting {
 
-    private final Logger logger = LoggerFactory.getLogger(getClass());
     private final HappyMapsFlagEncoder happymapsFlagEncoder;
 
+
     public HappyMapsWeighting(FlagEncoder flagEncoder) {
+
         super(flagEncoder);
 
         happymapsFlagEncoder = (HappyMapsFlagEncoder) flagEncoder;
+    }
 
-        logger.info("HappyMapsWeighting: create new instance");
 
-    }
 
     @Override
     public double getMinWeight(double currDistToGoal) {
diff --git a/core/src/main/java/com/graphhopper/util/details/HighwayDetails.java b/core/src/main/java/com/graphhopper/util/details/HighwayDetails.java
new file mode 100644
index 0000000000..9b7d4512c6
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/util/details/HighwayDetails.java
@@ -0,0 +1,36 @@
+package com.graphhopper.util.details;
+
+import com.graphhopper.routing.util.FlagEncoder;
+import com.graphhopper.routing.util.HappyMapsFlagEncoder;
+import com.graphhopper.util.EdgeIteratorState;
+
+import static com.graphhopper.util.Parameters.DETAILS.HIGHWAY;
+
+public class HighwayDetails extends AbstractPathDetailsBuilder {
+
+    private int highway = -1;
+    private final HappyMapsFlagEncoder encoder;
+
+    public HighwayDetails(FlagEncoder encoder) {
+
+        super(HIGHWAY);
+        this.encoder = (HappyMapsFlagEncoder) encoder;
+    }
+
+    @Override
+    public boolean isEdgeDifferentToLastEdge(EdgeIteratorState edge) {
+
+        int current = encoder.getHighway(edge);
+
+        if (highway == -1 || highway!=current) {
+            highway = current;
+            return true;
+        }
+        return false;
+    }
+
+    @Override
+    public Object getCurrentValue() {
+        return encoder.getHighwayString(new Integer(highway));
+    }
+}
\ No newline at end of file
diff --git a/core/src/main/java/com/graphhopper/util/details/PathDetailsBuilderFactory.java b/core/src/main/java/com/graphhopper/util/details/PathDetailsBuilderFactory.java
index 290323e199..88e777c267 100644
--- a/core/src/main/java/com/graphhopper/util/details/PathDetailsBuilderFactory.java
+++ b/core/src/main/java/com/graphhopper/util/details/PathDetailsBuilderFactory.java
@@ -50,6 +50,9 @@
         if (requestedPathDetails.contains(DISTANCE))
             builders.add(new DistanceDetails());
 
+        if (requestedPathDetails.contains(HIGHWAY))
+            builders.add(new HighwayDetails(encoder));
+
         if (requestedPathDetails.size() != builders.size()) {
             throw new IllegalArgumentException("You requested the details " + requestedPathDetails + " but we could only find " + builders);
         }
