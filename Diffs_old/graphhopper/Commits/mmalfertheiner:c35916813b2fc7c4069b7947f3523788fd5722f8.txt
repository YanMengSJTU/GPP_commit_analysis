diff --git a/core/src/main/java/com/graphhopper/reader/OSMReader.java b/core/src/main/java/com/graphhopper/reader/OSMReader.java
index f44eb8d81b..8b0cc660ac 100644
--- a/core/src/main/java/com/graphhopper/reader/OSMReader.java
+++ b/core/src/main/java/com/graphhopper/reader/OSMReader.java
@@ -880,6 +880,7 @@ EdgeIteratorState addEdge( int fromIndex, int toIndex, PointList pointList, long
             towerNodeDistance = 1;
         }
 
+        //TODO add incline and decline
         EdgeIteratorState iter = graph.edge(fromIndex, toIndex).setDistance(towerNodeDistance).setFlags(flags);
 
         if (nodes > 2)
diff --git a/core/src/main/java/com/graphhopper/routing/util/BikeGenericFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/BikeGenericFlagEncoder.java
index 47294f33f9..06346ce7d8 100644
--- a/core/src/main/java/com/graphhopper/routing/util/BikeGenericFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/BikeGenericFlagEncoder.java
@@ -60,6 +60,10 @@
     protected EncodedValue relationCodeEncoder;
     protected EncodedValue wayTypeEncoder;
     EncodedValue priorityWayEncoder;
+    protected EncodedValue inclineSlopeEncoder;
+    protected EncodedValue declineSlopeEncoder;
+    protected EncodedValue inclineDistancePercentageEncoder;
+
 
     // Car speed limit which switches the preference from UNCHANGED to AVOID_IF_POSSIBLE
     private int avoidSpeedLimit;
@@ -238,9 +242,22 @@ public int defineWayBits( int index, int shift )
         wayTypeEncoder = new EncodedValue("WayType", shift, 4, 1, 0, 15, true);
         shift += wayTypeEncoder.getBits();
 
+        // 3 bits to store preference on specific ways
         priorityWayEncoder = new EncodedValue("PreferWay", shift, 3, 1, 0, 7);
         shift += priorityWayEncoder.getBits();
 
+        // 6 bits to store incline
+        inclineSlopeEncoder = new EncodedValue("InclineSlope", shift, 6, 1, 0, 40, true);
+        shift += inclineSlopeEncoder.getBits();
+
+        // 6 bits to store decline
+        declineSlopeEncoder = new EncodedValue("DeclineSlope", shift, 6, 1, 0, 40, true);
+        shift += declineSlopeEncoder.getBits();
+
+        // 7 bits to store percentage of inclining distance
+        inclineDistancePercentageEncoder = new EncodedValue("InclineDistancePercentage", shift, 7, 1, 50, 100, true);
+        shift += inclineDistancePercentageEncoder.getBits();
+
         return shift;
     }
 
