diff --git a/core/src/main/java/com/graphhopper/storage/NativeFSLockFactory.java b/core/src/main/java/com/graphhopper/storage/NativeFSLockFactory.java
index dcbe812323..7456456bbc 100644
--- a/core/src/main/java/com/graphhopper/storage/NativeFSLockFactory.java
+++ b/core/src/main/java/com/graphhopper/storage/NativeFSLockFactory.java
@@ -46,9 +46,6 @@ public NativeFSLockFactory( File dir )
     @Override
     public void setLockDir( File lockDir )
     {
-        if (!lockDir.isDirectory())
-            throw new IllegalArgumentException("lockDir has to be a directory");
-
         this.lockDir = lockDir;
     }
 
@@ -105,6 +102,9 @@ public synchronized boolean obtain()
                     throw new RuntimeException("Directory " + lockDir + " does not exist and cannot created to place lock file there: " + lockFile);
             }
 
+            if (!lockDir.isDirectory())
+                throw new IllegalArgumentException("lockDir has to be a directory: " + lockDir);
+
             try
             {
                 tmpRaFile = new RandomAccessFile(lockFile, "rw");
diff --git a/core/src/main/java/com/graphhopper/storage/SimpleFSLockFactory.java b/core/src/main/java/com/graphhopper/storage/SimpleFSLockFactory.java
index c52a8ca2af..67d2a47d0c 100644
--- a/core/src/main/java/com/graphhopper/storage/SimpleFSLockFactory.java
+++ b/core/src/main/java/com/graphhopper/storage/SimpleFSLockFactory.java
@@ -91,7 +91,7 @@ public boolean obtain()
 
             // this test can only be performed after the dir has created!
             if (!lockDir.isDirectory())
-                throw new IllegalArgumentException("lockDir has to be a directory");
+                throw new IllegalArgumentException("lockDir has to be a directory: " + lockDir);
 
             try
             {
diff --git a/core/src/test/java/com/graphhopper/routing/RoutingAlgorithmIT.java b/core/src/test/java/com/graphhopper/routing/RoutingAlgorithmIT.java
index ec6a4b472f..7dc2034626 100644
--- a/core/src/test/java/com/graphhopper/routing/RoutingAlgorithmIT.java
+++ b/core/src/test/java/com/graphhopper/routing/RoutingAlgorithmIT.java
@@ -254,7 +254,7 @@ public void testMonacoRacingBike()
         assertEquals(testCollector.toString(), 0, testCollector.errors.size());
 
         runAlgo(testCollector, "files/monaco.osm.gz", "target/monaco-gh",
-                list, "CAR,BIKE,RACINGBIKE", false, "RACINGBIKE", "fastest", false);
+                list, "CAR,RACINGBIKE", false, "RACINGBIKE", "fastest", false);
         assertEquals(testCollector.toString(), 0, testCollector.errors.size());
     }
 
@@ -271,7 +271,7 @@ public void testKremsBikeRelation()
         assertEquals(testCollector.toString(), 0, testCollector.errors.size());
 
         runAlgo(testCollector, "files/krems.osm.gz", "target/krems-gh",
-                list, "CAR,BIKE,MTB", false, "BIKE", "fastest", false);
+                list, "CAR,BIKE", false, "BIKE", "fastest", false);
         assertEquals(testCollector.toString(), 0, testCollector.errors.size());
     }
 
@@ -288,7 +288,7 @@ public void testKremsMountainBikeRelation()
         assertEquals(testCollector.toString(), 0, testCollector.errors.size());
 
         runAlgo(testCollector, "files/krems.osm.gz", "target/krems-gh",
-                list, "CAR,BIKE,MTB", false, "MTB", "fastest", false);
+                list, "CAR,MTB", false, "MTB", "fastest", false);
         assertEquals(testCollector.toString(), 0, testCollector.errors.size());
     }
 
diff --git a/pom.xml b/pom.xml
index 804224f04f..6d715f771f 100644
--- a/pom.xml
+++ b/pom.xml
@@ -116,6 +116,7 @@
                     <execution>
                         <goals>
                             <goal>integration-test</goal>
+                            <goal>verify</goal>
                         </goals>
                     </execution>
                 </executions>
