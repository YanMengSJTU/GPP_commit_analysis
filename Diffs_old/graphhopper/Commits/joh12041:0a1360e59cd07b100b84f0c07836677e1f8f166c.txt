diff --git a/core/src/main/java/com/graphhopper/GHAltRouting.java b/core/src/main/java/com/graphhopper/GHAltRouting.java
new file mode 100644
index 0000000000..f306a2cc8b
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/GHAltRouting.java
@@ -0,0 +1,28 @@
+package com.graphhopper;
+
+import com.graphhopper.routing.util.FlagEncoder;
+import com.graphhopper.routing.util.ScenicWeighting;
+import com.graphhopper.routing.util.Weighting;
+import com.graphhopper.routing.util.WeightingMap;
+
+import java.util.HashMap;
+
+/**
+ * Created by isaac on 4/13/16.
+ */
+public class GHAltRouting extends GraphHopper {
+
+    HashMap<Integer, Integer> scenicEdges;
+    public void determineScenicEdges() {
+        scenicEdges = null;
+    }
+
+    @Override
+    public Weighting createWeighting( WeightingMap wMap, FlagEncoder encoder)
+    {
+        String weighting = wMap.getWeighting();
+        if ("SCENIC".equalsIgnoreCase(weighting)) {
+            return new ScenicWeighting(encoder, scenicEdges)
+        }
+    }
+}
diff --git a/core/src/main/java/com/graphhopper/routing/util/ScenicWeighting.java b/core/src/main/java/com/graphhopper/routing/util/ScenicWeighting.java
new file mode 100644
index 0000000000..d19305b7da
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/routing/util/ScenicWeighting.java
@@ -0,0 +1,52 @@
+package com.graphhopper.routing.util;
+
+import com.graphhopper.util.EdgeIteratorState;
+
+import java.util.HashMap;
+
+/**
+ * Created by isaac on 4/13/16.
+ */
+
+public class ScenicWeighting implements Weighting {
+
+    private final FlagEncoder encoder;
+    private HashMap<Integer, Integer> scenicEdges;
+
+    public ScenicWeighting( FlagEncoder encoder, HashMap<Integer, Integer> scenicEdges) {
+        this.encoder = encoder;
+        this.scenicEdges = scenicEdges;
+    }
+
+    @Override
+    public double calcWeight( EdgeIteratorState edgeState, boolean reverse, int prevOrNextEdgeId ) {
+        int edge = edgeState.getEdge();
+        if (scenicEdges.containsKey(edge)) {
+            return scenicEdges.get(edge);
+        } else {
+            return edgeState.getDistance() / encoder.getSpeed(edgeState.getFlags());
+        }
+    }
+
+    @Override
+    public boolean matches( String weightingAsStr, FlagEncoder encoder )
+    {
+        return getName().equals(weightingAsStr) && encoder == encoder;
+    }
+
+    @Override
+    public FlagEncoder getFlagEncoder() {
+        return encoder;
+    }
+
+    @Override
+    public double getMinWeight( double distance ) {
+        return -1;
+    }
+
+    @Override
+    public String getName() {
+        return "SCENIC";
+    }
+
+}
