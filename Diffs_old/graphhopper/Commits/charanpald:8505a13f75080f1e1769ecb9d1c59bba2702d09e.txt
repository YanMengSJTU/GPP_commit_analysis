diff --git a/core/src/main/java/com/graphhopper/storage/BaseGraph.java b/core/src/main/java/com/graphhopper/storage/BaseGraph.java
index e19bb7718d..b0b237a9f3 100644
--- a/core/src/main/java/com/graphhopper/storage/BaseGraph.java
+++ b/core/src/main/java/com/graphhopper/storage/BaseGraph.java
@@ -894,9 +894,9 @@ private long nextGeoRef(int arrayLength) {
     }
 
     protected static class EdgeIterable extends CommonEdgeIterator implements EdgeExplorer, EdgeIterator {
+
         final EdgeFilter filter;
         int nextEdgeId;
-        long osmWayId;
 
         public EdgeIterable(BaseGraph baseGraph, EdgeAccess edgeAccess, EdgeFilter filter) {
             super(-1, edgeAccess, baseGraph);
@@ -910,15 +910,6 @@ final void setEdgeId(int edgeId) {
             this.nextEdgeId = this.edgeId = edgeId;
         }
 
-        public void setOsmWayId(long osmWayId) {
-            this.osmWayId = osmWayId;
-        }
-
-        public long getOsmWayId() {
-            return this.osmWayId;
-        }
-
-
         final boolean init(int tmpEdgeId, int expectedAdjNode) {
             setEdgeId(tmpEdgeId);
             if (tmpEdgeId != EdgeIterator.NO_EDGE) {
@@ -1006,7 +997,7 @@ public EdgeIteratorState detach(boolean reverseArg) {
      * Include all edges of this storage in the iterator.
      */
     protected static class AllEdgeIterator extends CommonEdgeIterator implements AllEdgesIterator {
-        long osmWayId;
+
         public AllEdgeIterator(BaseGraph baseGraph) {
             this(baseGraph, baseGraph.edgeAccess);
         }
@@ -1020,14 +1011,6 @@ public int getMaxId() {
             return baseGraph.edgeCount;
         }
 
-        public void setOsmWayId(long osmWayId) {
-            this.osmWayId = osmWayId;
-        }
-
-        public long getOsmWayId() {
-            return this.osmWayId;
-        }
-
         @Override
         public boolean next() {
             while (true) {
@@ -1083,6 +1066,8 @@ public final EdgeIteratorState detach(boolean reverseArg) {
         protected int baseNode;
         protected int adjNode;
         protected EdgeAccess edgeAccess;
+        protected long osmWayId;
+
         // we need reverse if detach is called
         boolean reverse = false;
         boolean freshFlags;
@@ -1207,5 +1192,13 @@ public final boolean getBool(int key, boolean _default) {
         public final String toString() {
             return getEdge() + " " + getBaseNode() + "-" + getAdjNode();
         }
+
+        public void setOsmWayId(long osmWayId) {
+            this.osmWayId = osmWayId;
+        }
+
+        public long getOsmWayId() {
+            return this.osmWayId;
+        }
     }
 }
