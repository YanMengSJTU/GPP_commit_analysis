diff --git a/acceptancetesting/JMeter/RandomTileRequestTestPlan/WSPIP_Proxy_Perf_TestPlan_Final.jmx b/acceptancetesting/JMeter/RandomTileRequestTestPlan/WSPIP_Proxy_Perf_TestPlan_Final.jmx
index 63b9b1d818..47f670377e 100644
--- a/acceptancetesting/JMeter/RandomTileRequestTestPlan/WSPIP_Proxy_Perf_TestPlan_Final.jmx
+++ b/acceptancetesting/JMeter/RandomTileRequestTestPlan/WSPIP_Proxy_Perf_TestPlan_Final.jmx
@@ -1232,6 +1232,1526 @@ vars.put(&quot;TileColumn&quot;,r);</stringProp>
                 <stringProp name="script">var r=Number(vars.get(&quot;TileRow&quot;));
 r=r+1;
 
+vars.put(&quot;TileRow&quot;,r);</stringProp>
+              </BSFSampler>
+              <hashTree/>
+            </hashTree>
+            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Set Tile Row to 0" enabled="true">
+              <stringProp name="scriptLanguage">javascript</stringProp>
+              <stringProp name="parameters"></stringProp>
+              <stringProp name="filename"></stringProp>
+              <stringProp name="script">var r=Number(vars.get(&quot;TileRowMin&quot;));
+vars.put(&quot;TileRow&quot;,r);</stringProp>
+            </BSFSampler>
+            <hashTree/>
+          </hashTree>
+          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If ZoomLayer=6" enabled="true">
+            <stringProp name="IfController.condition">${ZoomLayer}==0</stringProp>
+            <boolProp name="IfController.evaluateAll">false</boolProp>
+          </IfController>
+          <hashTree>
+            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Initialise Tile Column &amp; Row  Min ,Max for zoom level 6" enabled="true">
+              <stringProp name="scriptLanguage">javascript</stringProp>
+              <stringProp name="parameters"></stringProp>
+              <stringProp name="filename"></stringProp>
+              <stringProp name="script">//initialise TileColumn counter start value to be Tile Column minimum zoom level
+
+var r1=Number(vars.get(&quot;TileColumn&quot;));
+r1=111;
+vars.put(&quot;TileColumn&quot;,r1);
+vars.put(&quot;TileColumnMin&quot;,r1);
+
+//initialise TileRow counter start value to be Tile Row minimum zoom level
+
+var r2=Number(vars.get(&quot;TileRow&quot;));
+r2=321;
+vars.put(&quot;TileRow&quot;,r2);
+
+// set tile column minimum value for the zoom level
+vars.put(&quot;TileColumnMin&quot;,r1);
+// set tile row minimum value for the zoom level
+vars.put(&quot;TileRowMin&quot;,r2);
+
+// set tile column max value for the zoom level
+var tileColumnMax=Number(141);
+vars.put(&quot;TileColumnMax&quot;,tileColumnMax);
+
+
+// set tile row max value for the zoom level
+var tileRowMax=Number(355);
+vars.put(&quot;TileRowMax&quot;,tileRowMax);
+
+
+
+</stringProp>
+            </BSFSampler>
+            <hashTree/>
+            <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
+              <stringProp name="WhileController.condition">${__javaScript(${TileRow}&lt;=${TileRowMax})}</stringProp>
+            </WhileController>
+            <hashTree>
+              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
+                <stringProp name="WhileController.condition">${__javaScript(${TileColumn}&lt;=${TileColumnMax})}</stringProp>
+              </WhileController>
+              <hashTree>
+                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Tile Request  for layer ${ZoomLayer} ${TileRow} ${TileColumn}" enabled="true">
+                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
+                    <collectionProp name="Arguments.arguments">
+                      <elementProp name="service" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">WMTS</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">service</stringProp>
+                      </elementProp>
+                      <elementProp name="request" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">GetTile</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">request</stringProp>
+                      </elementProp>
+                      <elementProp name="version" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">1.0.0</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">version</stringProp>
+                      </elementProp>
+                      <elementProp name="layer" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">Zoom+Map+Auto</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">layer</stringProp>
+                      </elementProp>
+                      <elementProp name="style" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">default</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">style</stringProp>
+                      </elementProp>
+                      <elementProp name="format" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">image/png</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">format</stringProp>
+                      </elementProp>
+                      <elementProp name="TileCol" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">${TileColumn}</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">TileCol</stringProp>
+                      </elementProp>
+                      <elementProp name="TileRow" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">${TileRow}</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">TileRow</stringProp>
+                      </elementProp>
+                      <elementProp name="TileMatrixSet" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">EPSG:27700</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">TileMatrixSet</stringProp>
+                      </elementProp>
+                      <elementProp name="TileMatrix" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">EPSG:27700:${ZoomLayer}</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">TileMatrix</stringProp>
+                      </elementProp>
+                    </collectionProp>
+                  </elementProp>
+                  <stringProp name="HTTPSampler.domain">gwccluster2-env.elasticbeanstalk.com</stringProp>
+                  <stringProp name="HTTPSampler.port"></stringProp>
+                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
+                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
+                  <stringProp name="HTTPSampler.protocol">http</stringProp>
+                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
+                  <stringProp name="HTTPSampler.path">/service/wmts?</stringProp>
+                  <stringProp name="HTTPSampler.method">GET</stringProp>
+                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
+                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
+                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
+                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
+                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
+                  <boolProp name="HTTPSampler.monitor">false</boolProp>
+                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
+                </HTTPSamplerProxy>
+                <hashTree/>
+                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Increment Tile Column" enabled="true">
+                  <stringProp name="scriptLanguage">javascript</stringProp>
+                  <stringProp name="parameters"></stringProp>
+                  <stringProp name="filename"></stringProp>
+                  <stringProp name="script">var c=Number(vars.get(&quot;TileColumn&quot;));
+c=c+1;
+
+vars.put(&quot;TileColumn&quot;,c);</stringProp>
+                </BSFSampler>
+                <hashTree/>
+                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
+                  <collectionProp name="Asserion.test_strings">
+                    <stringProp name="49586">200</stringProp>
+                  </collectionProp>
+                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
+                  <boolProp name="Assertion.assume_success">false</boolProp>
+                  <intProp name="Assertion.test_type">16</intProp>
+                </ResponseAssertion>
+                <hashTree/>
+              </hashTree>
+              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Set Tile Column to 0" enabled="true">
+                <stringProp name="scriptLanguage">javascript</stringProp>
+                <stringProp name="parameters"></stringProp>
+                <stringProp name="filename"></stringProp>
+                <stringProp name="script">var r=Number(vars.get(&quot;TileColumnMin&quot;));
+
+vars.put(&quot;TileColumn&quot;,r);</stringProp>
+              </BSFSampler>
+              <hashTree/>
+              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Increment Tile Row" enabled="true">
+                <stringProp name="scriptLanguage">javascript</stringProp>
+                <stringProp name="parameters"></stringProp>
+                <stringProp name="filename"></stringProp>
+                <stringProp name="script">var r=Number(vars.get(&quot;TileRow&quot;));
+r=r+1;
+
+vars.put(&quot;TileRow&quot;,r);</stringProp>
+              </BSFSampler>
+              <hashTree/>
+            </hashTree>
+            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Set Tile Row to 0" enabled="true">
+              <stringProp name="scriptLanguage">javascript</stringProp>
+              <stringProp name="parameters"></stringProp>
+              <stringProp name="filename"></stringProp>
+              <stringProp name="script">var r=Number(vars.get(&quot;TileRowMin&quot;));
+vars.put(&quot;TileRow&quot;,r);</stringProp>
+            </BSFSampler>
+            <hashTree/>
+          </hashTree>
+          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If ZoomLayer=7" enabled="true">
+            <stringProp name="IfController.condition">${ZoomLayer}==0</stringProp>
+            <boolProp name="IfController.evaluateAll">false</boolProp>
+          </IfController>
+          <hashTree>
+            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Initialise Tile Column &amp; Row  Min ,Max for zoom level 7" enabled="true">
+              <stringProp name="scriptLanguage">javascript</stringProp>
+              <stringProp name="parameters"></stringProp>
+              <stringProp name="filename"></stringProp>
+              <stringProp name="script">//initialise TileColumn counter start value to be Tile Column minimum zoom level
+
+var r1=Number(vars.get(&quot;TileColumn&quot;));
+r1=170;
+vars.put(&quot;TileColumn&quot;,r1);
+vars.put(&quot;TileColumnMin&quot;,r1);
+
+//initialise TileRow counter start value to be Tile Row minimum zoom level
+
+var r2=Number(vars.get(&quot;TileRow&quot;));
+r2=598;
+vars.put(&quot;TileRow&quot;,r2);
+
+// set tile column minimum value for the zoom level
+vars.put(&quot;TileColumnMin&quot;,r1);
+// set tile row minimum value for the zoom level
+vars.put(&quot;TileRowMin&quot;,r2);
+
+// set tile column max value for the zoom level
+var tileColumnMax=Number(255);
+vars.put(&quot;TileColumnMax&quot;,tileColumnMax);
+
+
+// set tile row max value for the zoom level
+var tileRowMax=Number(724);
+vars.put(&quot;TileRowMax&quot;,tileRowMax);
+
+
+
+</stringProp>
+            </BSFSampler>
+            <hashTree/>
+            <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
+              <stringProp name="WhileController.condition">${__javaScript(${TileRow}&lt;=${TileRowMax})}</stringProp>
+            </WhileController>
+            <hashTree>
+              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
+                <stringProp name="WhileController.condition">${__javaScript(${TileColumn}&lt;=${TileColumnMax})}</stringProp>
+              </WhileController>
+              <hashTree>
+                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Tile Request  for layer ${ZoomLayer} ${TileRow} ${TileColumn}" enabled="true">
+                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
+                    <collectionProp name="Arguments.arguments">
+                      <elementProp name="service" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">WMTS</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">service</stringProp>
+                      </elementProp>
+                      <elementProp name="request" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">GetTile</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">request</stringProp>
+                      </elementProp>
+                      <elementProp name="version" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">1.0.0</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">version</stringProp>
+                      </elementProp>
+                      <elementProp name="layer" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">Zoom+Map+Auto</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">layer</stringProp>
+                      </elementProp>
+                      <elementProp name="style" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">default</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">style</stringProp>
+                      </elementProp>
+                      <elementProp name="format" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">image/png</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">format</stringProp>
+                      </elementProp>
+                      <elementProp name="TileCol" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">${TileColumn}</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">TileCol</stringProp>
+                      </elementProp>
+                      <elementProp name="TileRow" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">${TileRow}</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">TileRow</stringProp>
+                      </elementProp>
+                      <elementProp name="TileMatrixSet" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">EPSG:27700</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">TileMatrixSet</stringProp>
+                      </elementProp>
+                      <elementProp name="TileMatrix" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">EPSG:27700:${ZoomLayer}</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">TileMatrix</stringProp>
+                      </elementProp>
+                    </collectionProp>
+                  </elementProp>
+                  <stringProp name="HTTPSampler.domain">gwccluster2-env.elasticbeanstalk.com</stringProp>
+                  <stringProp name="HTTPSampler.port"></stringProp>
+                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
+                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
+                  <stringProp name="HTTPSampler.protocol">http</stringProp>
+                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
+                  <stringProp name="HTTPSampler.path">/service/wmts?</stringProp>
+                  <stringProp name="HTTPSampler.method">GET</stringProp>
+                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
+                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
+                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
+                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
+                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
+                  <boolProp name="HTTPSampler.monitor">false</boolProp>
+                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
+                </HTTPSamplerProxy>
+                <hashTree/>
+                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Increment Tile Column" enabled="true">
+                  <stringProp name="scriptLanguage">javascript</stringProp>
+                  <stringProp name="parameters"></stringProp>
+                  <stringProp name="filename"></stringProp>
+                  <stringProp name="script">var c=Number(vars.get(&quot;TileColumn&quot;));
+c=c+1;
+
+vars.put(&quot;TileColumn&quot;,c);</stringProp>
+                </BSFSampler>
+                <hashTree/>
+                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
+                  <collectionProp name="Asserion.test_strings">
+                    <stringProp name="49586">200</stringProp>
+                  </collectionProp>
+                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
+                  <boolProp name="Assertion.assume_success">false</boolProp>
+                  <intProp name="Assertion.test_type">16</intProp>
+                </ResponseAssertion>
+                <hashTree/>
+              </hashTree>
+              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Set Tile Column to 0" enabled="true">
+                <stringProp name="scriptLanguage">javascript</stringProp>
+                <stringProp name="parameters"></stringProp>
+                <stringProp name="filename"></stringProp>
+                <stringProp name="script">var r=Number(vars.get(&quot;TileColumnMin&quot;));
+
+vars.put(&quot;TileColumn&quot;,r);</stringProp>
+              </BSFSampler>
+              <hashTree/>
+              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Increment Tile Row" enabled="true">
+                <stringProp name="scriptLanguage">javascript</stringProp>
+                <stringProp name="parameters"></stringProp>
+                <stringProp name="filename"></stringProp>
+                <stringProp name="script">var r=Number(vars.get(&quot;TileRow&quot;));
+r=r+1;
+
+vars.put(&quot;TileRow&quot;,r);</stringProp>
+              </BSFSampler>
+              <hashTree/>
+            </hashTree>
+            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Set Tile Row to 0" enabled="true">
+              <stringProp name="scriptLanguage">javascript</stringProp>
+              <stringProp name="parameters"></stringProp>
+              <stringProp name="filename"></stringProp>
+              <stringProp name="script">var r=Number(vars.get(&quot;TileRowMin&quot;));
+vars.put(&quot;TileRow&quot;,r);</stringProp>
+            </BSFSampler>
+            <hashTree/>
+          </hashTree>
+          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If ZoomLayer=8" enabled="true">
+            <stringProp name="IfController.condition">${ZoomLayer}==0</stringProp>
+            <boolProp name="IfController.evaluateAll">false</boolProp>
+          </IfController>
+          <hashTree>
+            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Initialise Tile Column &amp; Row  Min ,Max for zoom level 8" enabled="true">
+              <stringProp name="scriptLanguage">javascript</stringProp>
+              <stringProp name="parameters"></stringProp>
+              <stringProp name="filename"></stringProp>
+              <stringProp name="script">//initialise TileColumn counter start value to be Tile Column minimum zoom level
+
+var r1=Number(vars.get(&quot;TileColumn&quot;));
+r1=381;
+vars.put(&quot;TileColumn&quot;,r1);
+vars.put(&quot;TileColumnMin&quot;,r1);
+
+//initialise TileRow counter start value to be Tile Row minimum zoom level
+
+var r2=Number(vars.get(&quot;TileRow&quot;));
+r2=1090;
+vars.put(&quot;TileRow&quot;,r2);
+
+// set tile column minimum value for the zoom level
+vars.put(&quot;TileColumnMin&quot;,r1);
+// set tile row minimum value for the zoom level
+vars.put(&quot;TileRowMin&quot;,r2);
+
+// set tile column max value for the zoom level
+var tileColumnMax=Number(600);
+vars.put(&quot;TileColumnMax&quot;,tileColumnMax);
+
+
+// set tile row max value for the zoom level
+var tileRowMax=Number(1421);
+vars.put(&quot;TileRowMax&quot;,tileRowMax);
+
+
+
+</stringProp>
+            </BSFSampler>
+            <hashTree/>
+            <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
+              <stringProp name="WhileController.condition">${__javaScript(${TileRow}&lt;=${TileRowMax})}</stringProp>
+            </WhileController>
+            <hashTree>
+              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
+                <stringProp name="WhileController.condition">${__javaScript(${TileColumn}&lt;=${TileColumnMax})}</stringProp>
+              </WhileController>
+              <hashTree>
+                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Tile Request  for layer ${ZoomLayer} ${TileRow} ${TileColumn}" enabled="true">
+                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
+                    <collectionProp name="Arguments.arguments">
+                      <elementProp name="service" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">WMTS</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">service</stringProp>
+                      </elementProp>
+                      <elementProp name="request" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">GetTile</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">request</stringProp>
+                      </elementProp>
+                      <elementProp name="version" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">1.0.0</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">version</stringProp>
+                      </elementProp>
+                      <elementProp name="layer" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">Zoom+Map+Auto</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">layer</stringProp>
+                      </elementProp>
+                      <elementProp name="style" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">default</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">style</stringProp>
+                      </elementProp>
+                      <elementProp name="format" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">image/png</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">format</stringProp>
+                      </elementProp>
+                      <elementProp name="TileCol" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">${TileColumn}</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">TileCol</stringProp>
+                      </elementProp>
+                      <elementProp name="TileRow" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">${TileRow}</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">TileRow</stringProp>
+                      </elementProp>
+                      <elementProp name="TileMatrixSet" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">EPSG:27700</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">TileMatrixSet</stringProp>
+                      </elementProp>
+                      <elementProp name="TileMatrix" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">EPSG:27700:${ZoomLayer}</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">TileMatrix</stringProp>
+                      </elementProp>
+                    </collectionProp>
+                  </elementProp>
+                  <stringProp name="HTTPSampler.domain">gwccluster2-env.elasticbeanstalk.com</stringProp>
+                  <stringProp name="HTTPSampler.port"></stringProp>
+                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
+                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
+                  <stringProp name="HTTPSampler.protocol">http</stringProp>
+                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
+                  <stringProp name="HTTPSampler.path">/service/wmts?</stringProp>
+                  <stringProp name="HTTPSampler.method">GET</stringProp>
+                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
+                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
+                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
+                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
+                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
+                  <boolProp name="HTTPSampler.monitor">false</boolProp>
+                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
+                </HTTPSamplerProxy>
+                <hashTree/>
+                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Increment Tile Column" enabled="true">
+                  <stringProp name="scriptLanguage">javascript</stringProp>
+                  <stringProp name="parameters"></stringProp>
+                  <stringProp name="filename"></stringProp>
+                  <stringProp name="script">var c=Number(vars.get(&quot;TileColumn&quot;));
+c=c+1;
+
+vars.put(&quot;TileColumn&quot;,c);</stringProp>
+                </BSFSampler>
+                <hashTree/>
+                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
+                  <collectionProp name="Asserion.test_strings">
+                    <stringProp name="49586">200</stringProp>
+                  </collectionProp>
+                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
+                  <boolProp name="Assertion.assume_success">false</boolProp>
+                  <intProp name="Assertion.test_type">16</intProp>
+                </ResponseAssertion>
+                <hashTree/>
+              </hashTree>
+              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Set Tile Column to 0" enabled="true">
+                <stringProp name="scriptLanguage">javascript</stringProp>
+                <stringProp name="parameters"></stringProp>
+                <stringProp name="filename"></stringProp>
+                <stringProp name="script">var r=Number(vars.get(&quot;TileColumnMin&quot;));
+
+vars.put(&quot;TileColumn&quot;,r);</stringProp>
+              </BSFSampler>
+              <hashTree/>
+              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Increment Tile Row" enabled="true">
+                <stringProp name="scriptLanguage">javascript</stringProp>
+                <stringProp name="parameters"></stringProp>
+                <stringProp name="filename"></stringProp>
+                <stringProp name="script">var r=Number(vars.get(&quot;TileRow&quot;));
+r=r+1;
+
+vars.put(&quot;TileRow&quot;,r);</stringProp>
+              </BSFSampler>
+              <hashTree/>
+            </hashTree>
+            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Set Tile Row to 0" enabled="true">
+              <stringProp name="scriptLanguage">javascript</stringProp>
+              <stringProp name="parameters"></stringProp>
+              <stringProp name="filename"></stringProp>
+              <stringProp name="script">var r=Number(vars.get(&quot;TileRowMin&quot;));
+vars.put(&quot;TileRow&quot;,r);</stringProp>
+            </BSFSampler>
+            <hashTree/>
+          </hashTree>
+          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If ZoomLayer=9" enabled="true">
+            <stringProp name="IfController.condition">${ZoomLayer}==0</stringProp>
+            <boolProp name="IfController.evaluateAll">false</boolProp>
+          </IfController>
+          <hashTree>
+            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Initialise Tile Column &amp; Row  Min ,Max for zoom level 9" enabled="true">
+              <stringProp name="scriptLanguage">javascript</stringProp>
+              <stringProp name="parameters"></stringProp>
+              <stringProp name="filename"></stringProp>
+              <stringProp name="script">//initialise TileColumn counter start value to be Tile Column minimum zoom level
+
+var r1=Number(vars.get(&quot;TileColumn&quot;));
+r1=970;
+vars.put(&quot;TileColumn&quot;,r1);
+vars.put(&quot;TileColumnMin&quot;,r1);
+
+//initialise TileRow counter start value to be Tile Row minimum zoom level
+
+var r2=Number(vars.get(&quot;TileRow&quot;));
+r2=1790;
+vars.put(&quot;TileRow&quot;,r2);
+
+// set tile column minimum value for the zoom level
+vars.put(&quot;TileColumnMin&quot;,r1);
+// set tile row minimum value for the zoom level
+vars.put(&quot;TileRowMin&quot;,r2);
+
+// set tile column max value for the zoom level
+var tileColumnMax=Number(1103);
+vars.put(&quot;TileColumnMax&quot;,tileColumnMax);
+
+
+// set tile row max value for the zoom level
+var tileRowMax=Number(2850);
+vars.put(&quot;TileRowMax&quot;,tileRowMax);
+
+
+
+</stringProp>
+            </BSFSampler>
+            <hashTree/>
+            <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
+              <stringProp name="WhileController.condition">${__javaScript(${TileRow}&lt;=${TileRowMax})}</stringProp>
+            </WhileController>
+            <hashTree>
+              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
+                <stringProp name="WhileController.condition">${__javaScript(${TileColumn}&lt;=${TileColumnMax})}</stringProp>
+              </WhileController>
+              <hashTree>
+                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Tile Request  for layer ${ZoomLayer} ${TileRow} ${TileColumn}" enabled="true">
+                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
+                    <collectionProp name="Arguments.arguments">
+                      <elementProp name="service" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">WMTS</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">service</stringProp>
+                      </elementProp>
+                      <elementProp name="request" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">GetTile</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">request</stringProp>
+                      </elementProp>
+                      <elementProp name="version" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">1.0.0</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">version</stringProp>
+                      </elementProp>
+                      <elementProp name="layer" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">Zoom+Map+Auto</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">layer</stringProp>
+                      </elementProp>
+                      <elementProp name="style" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">default</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">style</stringProp>
+                      </elementProp>
+                      <elementProp name="format" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">image/png</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">format</stringProp>
+                      </elementProp>
+                      <elementProp name="TileCol" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">${TileColumn}</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">TileCol</stringProp>
+                      </elementProp>
+                      <elementProp name="TileRow" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">${TileRow}</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">TileRow</stringProp>
+                      </elementProp>
+                      <elementProp name="TileMatrixSet" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">EPSG:27700</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">TileMatrixSet</stringProp>
+                      </elementProp>
+                      <elementProp name="TileMatrix" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">EPSG:27700:${ZoomLayer}</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">TileMatrix</stringProp>
+                      </elementProp>
+                    </collectionProp>
+                  </elementProp>
+                  <stringProp name="HTTPSampler.domain">gwccluster2-env.elasticbeanstalk.com</stringProp>
+                  <stringProp name="HTTPSampler.port"></stringProp>
+                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
+                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
+                  <stringProp name="HTTPSampler.protocol">http</stringProp>
+                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
+                  <stringProp name="HTTPSampler.path">/service/wmts?</stringProp>
+                  <stringProp name="HTTPSampler.method">GET</stringProp>
+                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
+                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
+                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
+                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
+                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
+                  <boolProp name="HTTPSampler.monitor">false</boolProp>
+                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
+                </HTTPSamplerProxy>
+                <hashTree/>
+                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Increment Tile Column" enabled="true">
+                  <stringProp name="scriptLanguage">javascript</stringProp>
+                  <stringProp name="parameters"></stringProp>
+                  <stringProp name="filename"></stringProp>
+                  <stringProp name="script">var c=Number(vars.get(&quot;TileColumn&quot;));
+c=c+1;
+
+vars.put(&quot;TileColumn&quot;,c);</stringProp>
+                </BSFSampler>
+                <hashTree/>
+                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
+                  <collectionProp name="Asserion.test_strings">
+                    <stringProp name="49586">200</stringProp>
+                  </collectionProp>
+                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
+                  <boolProp name="Assertion.assume_success">false</boolProp>
+                  <intProp name="Assertion.test_type">16</intProp>
+                </ResponseAssertion>
+                <hashTree/>
+              </hashTree>
+              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Set Tile Column to 0" enabled="true">
+                <stringProp name="scriptLanguage">javascript</stringProp>
+                <stringProp name="parameters"></stringProp>
+                <stringProp name="filename"></stringProp>
+                <stringProp name="script">var r=Number(vars.get(&quot;TileColumnMin&quot;));
+
+vars.put(&quot;TileColumn&quot;,r);</stringProp>
+              </BSFSampler>
+              <hashTree/>
+              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Increment Tile Row" enabled="true">
+                <stringProp name="scriptLanguage">javascript</stringProp>
+                <stringProp name="parameters"></stringProp>
+                <stringProp name="filename"></stringProp>
+                <stringProp name="script">var r=Number(vars.get(&quot;TileRow&quot;));
+r=r+1;
+
+vars.put(&quot;TileRow&quot;,r);</stringProp>
+              </BSFSampler>
+              <hashTree/>
+            </hashTree>
+            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Set Tile Row to 0" enabled="true">
+              <stringProp name="scriptLanguage">javascript</stringProp>
+              <stringProp name="parameters"></stringProp>
+              <stringProp name="filename"></stringProp>
+              <stringProp name="script">var r=Number(vars.get(&quot;TileRowMin&quot;));
+vars.put(&quot;TileRow&quot;,r);</stringProp>
+            </BSFSampler>
+            <hashTree/>
+          </hashTree>
+          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If ZoomLayer=10" enabled="true">
+            <stringProp name="IfController.condition">${ZoomLayer}==0</stringProp>
+            <boolProp name="IfController.evaluateAll">false</boolProp>
+          </IfController>
+          <hashTree>
+            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Initialise Tile Column &amp; Row  Min ,Max for zoom level 10" enabled="true">
+              <stringProp name="scriptLanguage">javascript</stringProp>
+              <stringProp name="parameters"></stringProp>
+              <stringProp name="filename"></stringProp>
+              <stringProp name="script">//initialise TileColumn counter start value to be Tile Column minimum zoom level
+
+var r1=Number(vars.get(&quot;TileColumn&quot;));
+r1=1485;
+vars.put(&quot;TileColumn&quot;,r1);
+vars.put(&quot;TileColumnMin&quot;,r1);
+
+//initialise TileRow counter start value to be Tile Row minimum zoom level
+
+var r2=Number(vars.get(&quot;TileRow&quot;));
+r2=4372;
+vars.put(&quot;TileRow&quot;,r2);
+
+// set tile column minimum value for the zoom level
+vars.put(&quot;TileColumnMin&quot;,r1);
+// set tile row minimum value for the zoom level
+vars.put(&quot;TileRowMin&quot;,r2);
+
+// set tile column max value for the zoom level
+var tileColumnMax=Number(2623);
+vars.put(&quot;TileColumnMax&quot;,tileColumnMax);
+
+
+// set tile row max value for the zoom level
+var tileRowMax=Number(5654);
+vars.put(&quot;TileRowMax&quot;,tileRowMax);
+
+
+
+</stringProp>
+            </BSFSampler>
+            <hashTree/>
+            <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
+              <stringProp name="WhileController.condition">${__javaScript(${TileRow}&lt;=${TileRowMax})}</stringProp>
+            </WhileController>
+            <hashTree>
+              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
+                <stringProp name="WhileController.condition">${__javaScript(${TileColumn}&lt;=${TileColumnMax})}</stringProp>
+              </WhileController>
+              <hashTree>
+                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Tile Request  for layer ${ZoomLayer} ${TileRow} ${TileColumn}" enabled="true">
+                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
+                    <collectionProp name="Arguments.arguments">
+                      <elementProp name="service" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">WMTS</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">service</stringProp>
+                      </elementProp>
+                      <elementProp name="request" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">GetTile</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">request</stringProp>
+                      </elementProp>
+                      <elementProp name="version" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">1.0.0</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">version</stringProp>
+                      </elementProp>
+                      <elementProp name="layer" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">Zoom+Map+Auto</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">layer</stringProp>
+                      </elementProp>
+                      <elementProp name="style" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">default</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">style</stringProp>
+                      </elementProp>
+                      <elementProp name="format" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">image/png</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">format</stringProp>
+                      </elementProp>
+                      <elementProp name="TileCol" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">${TileColumn}</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">TileCol</stringProp>
+                      </elementProp>
+                      <elementProp name="TileRow" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">${TileRow}</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">TileRow</stringProp>
+                      </elementProp>
+                      <elementProp name="TileMatrixSet" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">EPSG:27700</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">TileMatrixSet</stringProp>
+                      </elementProp>
+                      <elementProp name="TileMatrix" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">EPSG:27700:${ZoomLayer}</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">TileMatrix</stringProp>
+                      </elementProp>
+                    </collectionProp>
+                  </elementProp>
+                  <stringProp name="HTTPSampler.domain">gwccluster2-env.elasticbeanstalk.com</stringProp>
+                  <stringProp name="HTTPSampler.port"></stringProp>
+                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
+                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
+                  <stringProp name="HTTPSampler.protocol">http</stringProp>
+                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
+                  <stringProp name="HTTPSampler.path">/service/wmts?</stringProp>
+                  <stringProp name="HTTPSampler.method">GET</stringProp>
+                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
+                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
+                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
+                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
+                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
+                  <boolProp name="HTTPSampler.monitor">false</boolProp>
+                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
+                </HTTPSamplerProxy>
+                <hashTree/>
+                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Increment Tile Column" enabled="true">
+                  <stringProp name="scriptLanguage">javascript</stringProp>
+                  <stringProp name="parameters"></stringProp>
+                  <stringProp name="filename"></stringProp>
+                  <stringProp name="script">var c=Number(vars.get(&quot;TileColumn&quot;));
+c=c+1;
+
+vars.put(&quot;TileColumn&quot;,c);</stringProp>
+                </BSFSampler>
+                <hashTree/>
+                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
+                  <collectionProp name="Asserion.test_strings">
+                    <stringProp name="49586">200</stringProp>
+                  </collectionProp>
+                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
+                  <boolProp name="Assertion.assume_success">false</boolProp>
+                  <intProp name="Assertion.test_type">16</intProp>
+                </ResponseAssertion>
+                <hashTree/>
+              </hashTree>
+              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Set Tile Column to 0" enabled="true">
+                <stringProp name="scriptLanguage">javascript</stringProp>
+                <stringProp name="parameters"></stringProp>
+                <stringProp name="filename"></stringProp>
+                <stringProp name="script">var r=Number(vars.get(&quot;TileColumnMin&quot;));
+
+vars.put(&quot;TileColumn&quot;,r);</stringProp>
+              </BSFSampler>
+              <hashTree/>
+              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Increment Tile Row" enabled="true">
+                <stringProp name="scriptLanguage">javascript</stringProp>
+                <stringProp name="parameters"></stringProp>
+                <stringProp name="filename"></stringProp>
+                <stringProp name="script">var r=Number(vars.get(&quot;TileRow&quot;));
+r=r+1;
+
+vars.put(&quot;TileRow&quot;,r);</stringProp>
+              </BSFSampler>
+              <hashTree/>
+            </hashTree>
+            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Set Tile Row to 0" enabled="true">
+              <stringProp name="scriptLanguage">javascript</stringProp>
+              <stringProp name="parameters"></stringProp>
+              <stringProp name="filename"></stringProp>
+              <stringProp name="script">var r=Number(vars.get(&quot;TileRowMin&quot;));
+vars.put(&quot;TileRow&quot;,r);</stringProp>
+            </BSFSampler>
+            <hashTree/>
+          </hashTree>
+          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If ZoomLayer=11" enabled="true">
+            <stringProp name="IfController.condition">${ZoomLayer}==0</stringProp>
+            <boolProp name="IfController.evaluateAll">false</boolProp>
+          </IfController>
+          <hashTree>
+            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Initialise Tile Column &amp; Row  Min ,Max for zoom level 11" enabled="true">
+              <stringProp name="scriptLanguage">javascript</stringProp>
+              <stringProp name="parameters"></stringProp>
+              <stringProp name="filename"></stringProp>
+              <stringProp name="script">//initialise TileColumn counter start value to be Tile Column minimum zoom level
+
+var r1=Number(vars.get(&quot;TileColumn&quot;));
+r1=3130;
+vars.put(&quot;TileColumn&quot;,r1);
+vars.put(&quot;TileColumnMin&quot;,r1);
+
+//initialise TileRow counter start value to be Tile Row minimum zoom level
+
+var r2=Number(vars.get(&quot;TileRow&quot;));
+r2=8867;
+vars.put(&quot;TileRow&quot;,r2);
+
+// set tile column minimum value for the zoom level
+vars.put(&quot;TileColumnMin&quot;,r1);
+// set tile row minimum value for the zoom level
+vars.put(&quot;TileRowMin&quot;,r2);
+
+// set tile column max value for the zoom level
+var tileColumnMax=Number(4774);
+vars.put(&quot;TileColumnMax&quot;,tileColumnMax);
+
+
+// set tile row max value for the zoom level
+var tileRowMax=Number(11365);
+vars.put(&quot;TileRowMax&quot;,tileRowMax);
+
+
+
+</stringProp>
+            </BSFSampler>
+            <hashTree/>
+            <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
+              <stringProp name="WhileController.condition">${__javaScript(${TileRow}&lt;=${TileRowMax})}</stringProp>
+            </WhileController>
+            <hashTree>
+              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
+                <stringProp name="WhileController.condition">${__javaScript(${TileColumn}&lt;=${TileColumnMax})}</stringProp>
+              </WhileController>
+              <hashTree>
+                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Tile Request  for layer ${ZoomLayer} ${TileRow} ${TileColumn}" enabled="true">
+                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
+                    <collectionProp name="Arguments.arguments">
+                      <elementProp name="service" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">WMTS</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">service</stringProp>
+                      </elementProp>
+                      <elementProp name="request" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">GetTile</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">request</stringProp>
+                      </elementProp>
+                      <elementProp name="version" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">1.0.0</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">version</stringProp>
+                      </elementProp>
+                      <elementProp name="layer" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">Zoom+Map+Auto</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">layer</stringProp>
+                      </elementProp>
+                      <elementProp name="style" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">default</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">style</stringProp>
+                      </elementProp>
+                      <elementProp name="format" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">image/png</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">format</stringProp>
+                      </elementProp>
+                      <elementProp name="TileCol" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">${TileColumn}</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">TileCol</stringProp>
+                      </elementProp>
+                      <elementProp name="TileRow" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">${TileRow}</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">TileRow</stringProp>
+                      </elementProp>
+                      <elementProp name="TileMatrixSet" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">EPSG:27700</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">TileMatrixSet</stringProp>
+                      </elementProp>
+                      <elementProp name="TileMatrix" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">EPSG:27700:${ZoomLayer}</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">TileMatrix</stringProp>
+                      </elementProp>
+                    </collectionProp>
+                  </elementProp>
+                  <stringProp name="HTTPSampler.domain">gwccluster2-env.elasticbeanstalk.com</stringProp>
+                  <stringProp name="HTTPSampler.port"></stringProp>
+                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
+                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
+                  <stringProp name="HTTPSampler.protocol">http</stringProp>
+                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
+                  <stringProp name="HTTPSampler.path">/service/wmts?</stringProp>
+                  <stringProp name="HTTPSampler.method">GET</stringProp>
+                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
+                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
+                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
+                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
+                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
+                  <boolProp name="HTTPSampler.monitor">false</boolProp>
+                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
+                </HTTPSamplerProxy>
+                <hashTree/>
+                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Increment Tile Column" enabled="true">
+                  <stringProp name="scriptLanguage">javascript</stringProp>
+                  <stringProp name="parameters"></stringProp>
+                  <stringProp name="filename"></stringProp>
+                  <stringProp name="script">var c=Number(vars.get(&quot;TileColumn&quot;));
+c=c+1;
+
+vars.put(&quot;TileColumn&quot;,c);</stringProp>
+                </BSFSampler>
+                <hashTree/>
+                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
+                  <collectionProp name="Asserion.test_strings">
+                    <stringProp name="49586">200</stringProp>
+                  </collectionProp>
+                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
+                  <boolProp name="Assertion.assume_success">false</boolProp>
+                  <intProp name="Assertion.test_type">16</intProp>
+                </ResponseAssertion>
+                <hashTree/>
+              </hashTree>
+              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Set Tile Column to 0" enabled="true">
+                <stringProp name="scriptLanguage">javascript</stringProp>
+                <stringProp name="parameters"></stringProp>
+                <stringProp name="filename"></stringProp>
+                <stringProp name="script">var r=Number(vars.get(&quot;TileColumnMin&quot;));
+
+vars.put(&quot;TileColumn&quot;,r);</stringProp>
+              </BSFSampler>
+              <hashTree/>
+              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Increment Tile Row" enabled="true">
+                <stringProp name="scriptLanguage">javascript</stringProp>
+                <stringProp name="parameters"></stringProp>
+                <stringProp name="filename"></stringProp>
+                <stringProp name="script">var r=Number(vars.get(&quot;TileRow&quot;));
+r=r+1;
+
+vars.put(&quot;TileRow&quot;,r);</stringProp>
+              </BSFSampler>
+              <hashTree/>
+            </hashTree>
+            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Set Tile Row to 0" enabled="true">
+              <stringProp name="scriptLanguage">javascript</stringProp>
+              <stringProp name="parameters"></stringProp>
+              <stringProp name="filename"></stringProp>
+              <stringProp name="script">var r=Number(vars.get(&quot;TileRowMin&quot;));
+vars.put(&quot;TileRow&quot;,r);</stringProp>
+            </BSFSampler>
+            <hashTree/>
+          </hashTree>
+          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If ZoomLayer=12" enabled="true">
+            <stringProp name="IfController.condition">${ZoomLayer}==0</stringProp>
+            <boolProp name="IfController.evaluateAll">false</boolProp>
+          </IfController>
+          <hashTree>
+            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Initialise Tile Column &amp; Row  Min ,Max for zoom level 12" enabled="true">
+              <stringProp name="scriptLanguage">javascript</stringProp>
+              <stringProp name="parameters"></stringProp>
+              <stringProp name="filename"></stringProp>
+              <stringProp name="script">//initialise TileColumn counter start value to be Tile Column minimum zoom level
+
+var r1=Number(vars.get(&quot;TileColumn&quot;));
+r1=5444;
+vars.put(&quot;TileColumn&quot;,r1);
+vars.put(&quot;TileColumnMin&quot;,r1);
+
+//initialise TileRow counter start value to be Tile Row minimum zoom level
+
+var r2=Number(vars.get(&quot;TileRow&quot;));
+r2=17734;
+vars.put(&quot;TileRow&quot;,r2);
+
+// set tile column minimum value for the zoom level
+vars.put(&quot;TileColumnMin&quot;,r1);
+// set tile row minimum value for the zoom level
+vars.put(&quot;TileRowMin&quot;,r2);
+
+// set tile column max value for the zoom level
+var tileColumnMax=Number(6050);
+vars.put(&quot;TileColumnMax&quot;,tileColumnMax);
+
+
+// set tile row max value for the zoom level
+var tileRowMax=Number(18225);
+vars.put(&quot;TileRowMax&quot;,tileRowMax);
+
+
+
+</stringProp>
+            </BSFSampler>
+            <hashTree/>
+            <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
+              <stringProp name="WhileController.condition">${__javaScript(${TileRow}&lt;=${TileRowMax})}</stringProp>
+            </WhileController>
+            <hashTree>
+              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
+                <stringProp name="WhileController.condition">${__javaScript(${TileColumn}&lt;=${TileColumnMax})}</stringProp>
+              </WhileController>
+              <hashTree>
+                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Tile Request  for layer ${ZoomLayer} ${TileRow} ${TileColumn}" enabled="true">
+                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
+                    <collectionProp name="Arguments.arguments">
+                      <elementProp name="service" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">WMTS</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">service</stringProp>
+                      </elementProp>
+                      <elementProp name="request" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">GetTile</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">request</stringProp>
+                      </elementProp>
+                      <elementProp name="version" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">1.0.0</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">version</stringProp>
+                      </elementProp>
+                      <elementProp name="layer" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">Zoom+Map+Auto</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">layer</stringProp>
+                      </elementProp>
+                      <elementProp name="style" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">default</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">style</stringProp>
+                      </elementProp>
+                      <elementProp name="format" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">image/png</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">format</stringProp>
+                      </elementProp>
+                      <elementProp name="TileCol" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">${TileColumn}</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">TileCol</stringProp>
+                      </elementProp>
+                      <elementProp name="TileRow" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">${TileRow}</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">TileRow</stringProp>
+                      </elementProp>
+                      <elementProp name="TileMatrixSet" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">EPSG:27700</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">TileMatrixSet</stringProp>
+                      </elementProp>
+                      <elementProp name="TileMatrix" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">EPSG:27700:${ZoomLayer}</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">TileMatrix</stringProp>
+                      </elementProp>
+                    </collectionProp>
+                  </elementProp>
+                  <stringProp name="HTTPSampler.domain">gwccluster2-env.elasticbeanstalk.com</stringProp>
+                  <stringProp name="HTTPSampler.port"></stringProp>
+                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
+                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
+                  <stringProp name="HTTPSampler.protocol">http</stringProp>
+                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
+                  <stringProp name="HTTPSampler.path">/service/wmts?</stringProp>
+                  <stringProp name="HTTPSampler.method">GET</stringProp>
+                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
+                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
+                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
+                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
+                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
+                  <boolProp name="HTTPSampler.monitor">false</boolProp>
+                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
+                </HTTPSamplerProxy>
+                <hashTree/>
+                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Increment Tile Column" enabled="true">
+                  <stringProp name="scriptLanguage">javascript</stringProp>
+                  <stringProp name="parameters"></stringProp>
+                  <stringProp name="filename"></stringProp>
+                  <stringProp name="script">var c=Number(vars.get(&quot;TileColumn&quot;));
+c=c+1;
+
+vars.put(&quot;TileColumn&quot;,c);</stringProp>
+                </BSFSampler>
+                <hashTree/>
+                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
+                  <collectionProp name="Asserion.test_strings">
+                    <stringProp name="49586">200</stringProp>
+                  </collectionProp>
+                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
+                  <boolProp name="Assertion.assume_success">false</boolProp>
+                  <intProp name="Assertion.test_type">16</intProp>
+                </ResponseAssertion>
+                <hashTree/>
+              </hashTree>
+              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Set Tile Column to 0" enabled="true">
+                <stringProp name="scriptLanguage">javascript</stringProp>
+                <stringProp name="parameters"></stringProp>
+                <stringProp name="filename"></stringProp>
+                <stringProp name="script">var r=Number(vars.get(&quot;TileColumnMin&quot;));
+
+vars.put(&quot;TileColumn&quot;,r);</stringProp>
+              </BSFSampler>
+              <hashTree/>
+              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Increment Tile Row" enabled="true">
+                <stringProp name="scriptLanguage">javascript</stringProp>
+                <stringProp name="parameters"></stringProp>
+                <stringProp name="filename"></stringProp>
+                <stringProp name="script">var r=Number(vars.get(&quot;TileRow&quot;));
+r=r+1;
+
+vars.put(&quot;TileRow&quot;,r);</stringProp>
+              </BSFSampler>
+              <hashTree/>
+            </hashTree>
+            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Set Tile Row to 0" enabled="true">
+              <stringProp name="scriptLanguage">javascript</stringProp>
+              <stringProp name="parameters"></stringProp>
+              <stringProp name="filename"></stringProp>
+              <stringProp name="script">var r=Number(vars.get(&quot;TileRowMin&quot;));
+vars.put(&quot;TileRow&quot;,r);</stringProp>
+            </BSFSampler>
+            <hashTree/>
+          </hashTree>
+          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If ZoomLayer=13" enabled="true">
+            <stringProp name="IfController.condition">${ZoomLayer}==0</stringProp>
+            <boolProp name="IfController.evaluateAll">false</boolProp>
+          </IfController>
+          <hashTree>
+            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Initialise Tile Column &amp; Row  Min ,Max for zoom level 13" enabled="true">
+              <stringProp name="scriptLanguage">javascript</stringProp>
+              <stringProp name="parameters"></stringProp>
+              <stringProp name="filename"></stringProp>
+              <stringProp name="script">//initialise TileColumn counter start value to be Tile Column minimum zoom level
+
+var r1=Number(vars.get(&quot;TileColumn&quot;));
+r1=19073;
+vars.put(&quot;TileColumn&quot;,r1);
+vars.put(&quot;TileColumnMin&quot;,r1);
+
+//initialise TileRow counter start value to be Tile Row minimum zoom level
+
+var r2=Number(vars.get(&quot;TileRow&quot;));
+r2=44760;
+vars.put(&quot;TileRow&quot;,r2);
+
+// set tile column minimum value for the zoom level
+vars.put(&quot;TileColumnMin&quot;,r1);
+// set tile row minimum value for the zoom level
+vars.put(&quot;TileRowMin&quot;,r2);
+
+// set tile column max value for the zoom level
+var tileColumnMax=Number(18480);
+vars.put(&quot;TileColumnMax&quot;,tileColumnMax);
+
+
+// set tile row max value for the zoom level
+var tileRowMax=Number(44265);
+vars.put(&quot;TileRowMax&quot;,tileRowMax);
+
+
+
+</stringProp>
+            </BSFSampler>
+            <hashTree/>
+            <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
+              <stringProp name="WhileController.condition">${__javaScript(${TileRow}&lt;=${TileRowMax})}</stringProp>
+            </WhileController>
+            <hashTree>
+              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
+                <stringProp name="WhileController.condition">${__javaScript(${TileColumn}&lt;=${TileColumnMax})}</stringProp>
+              </WhileController>
+              <hashTree>
+                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Tile Request  for layer ${ZoomLayer} ${TileRow} ${TileColumn}" enabled="true">
+                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
+                    <collectionProp name="Arguments.arguments">
+                      <elementProp name="service" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">WMTS</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">service</stringProp>
+                      </elementProp>
+                      <elementProp name="request" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">GetTile</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">request</stringProp>
+                      </elementProp>
+                      <elementProp name="version" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">1.0.0</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">version</stringProp>
+                      </elementProp>
+                      <elementProp name="layer" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">Zoom+Map+Auto</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">layer</stringProp>
+                      </elementProp>
+                      <elementProp name="style" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">default</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">style</stringProp>
+                      </elementProp>
+                      <elementProp name="format" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">image/png</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">format</stringProp>
+                      </elementProp>
+                      <elementProp name="TileCol" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">${TileColumn}</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">TileCol</stringProp>
+                      </elementProp>
+                      <elementProp name="TileRow" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">${TileRow}</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">TileRow</stringProp>
+                      </elementProp>
+                      <elementProp name="TileMatrixSet" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">EPSG:27700</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">TileMatrixSet</stringProp>
+                      </elementProp>
+                      <elementProp name="TileMatrix" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">EPSG:27700:${ZoomLayer}</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">TileMatrix</stringProp>
+                      </elementProp>
+                    </collectionProp>
+                  </elementProp>
+                  <stringProp name="HTTPSampler.domain">gwccluster2-env.elasticbeanstalk.com</stringProp>
+                  <stringProp name="HTTPSampler.port"></stringProp>
+                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
+                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
+                  <stringProp name="HTTPSampler.protocol">http</stringProp>
+                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
+                  <stringProp name="HTTPSampler.path">/service/wmts?</stringProp>
+                  <stringProp name="HTTPSampler.method">GET</stringProp>
+                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
+                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
+                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
+                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
+                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
+                  <boolProp name="HTTPSampler.monitor">false</boolProp>
+                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
+                </HTTPSamplerProxy>
+                <hashTree/>
+                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Increment Tile Column" enabled="true">
+                  <stringProp name="scriptLanguage">javascript</stringProp>
+                  <stringProp name="parameters"></stringProp>
+                  <stringProp name="filename"></stringProp>
+                  <stringProp name="script">var c=Number(vars.get(&quot;TileColumn&quot;));
+c=c+1;
+
+vars.put(&quot;TileColumn&quot;,c);</stringProp>
+                </BSFSampler>
+                <hashTree/>
+                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
+                  <collectionProp name="Asserion.test_strings">
+                    <stringProp name="49586">200</stringProp>
+                  </collectionProp>
+                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
+                  <boolProp name="Assertion.assume_success">false</boolProp>
+                  <intProp name="Assertion.test_type">16</intProp>
+                </ResponseAssertion>
+                <hashTree/>
+              </hashTree>
+              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Set Tile Column to 0" enabled="true">
+                <stringProp name="scriptLanguage">javascript</stringProp>
+                <stringProp name="parameters"></stringProp>
+                <stringProp name="filename"></stringProp>
+                <stringProp name="script">var r=Number(vars.get(&quot;TileColumnMin&quot;));
+
+vars.put(&quot;TileColumn&quot;,r);</stringProp>
+              </BSFSampler>
+              <hashTree/>
+              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Increment Tile Row" enabled="true">
+                <stringProp name="scriptLanguage">javascript</stringProp>
+                <stringProp name="parameters"></stringProp>
+                <stringProp name="filename"></stringProp>
+                <stringProp name="script">var r=Number(vars.get(&quot;TileRow&quot;));
+r=r+1;
+
 vars.put(&quot;TileRow&quot;,r);</stringProp>
               </BSFSampler>
               <hashTree/>
@@ -1246,6 +2766,72 @@ vars.put(&quot;TileRow&quot;,r);</stringProp>
             <hashTree/>
           </hashTree>
         </hashTree>
+        <ResultCollector guiclass="TableVisualizer" testclass="ResultCollector" testname="View Results in Table" enabled="true">
+          <boolProp name="ResultCollector.error_logging">false</boolProp>
+          <objProp>
+            <name>saveConfig</name>
+            <value class="SampleSaveConfiguration">
+              <time>true</time>
+              <latency>true</latency>
+              <timestamp>true</timestamp>
+              <success>true</success>
+              <label>true</label>
+              <code>true</code>
+              <message>true</message>
+              <threadName>true</threadName>
+              <dataType>true</dataType>
+              <encoding>false</encoding>
+              <assertions>true</assertions>
+              <subresults>true</subresults>
+              <responseData>false</responseData>
+              <samplerData>false</samplerData>
+              <xml>false</xml>
+              <fieldNames>false</fieldNames>
+              <responseHeaders>false</responseHeaders>
+              <requestHeaders>false</requestHeaders>
+              <responseDataOnError>false</responseDataOnError>
+              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
+              <assertionsResultsToSave>0</assertionsResultsToSave>
+              <bytes>true</bytes>
+              <threadCounts>true</threadCounts>
+            </value>
+          </objProp>
+          <stringProp name="filename"></stringProp>
+        </ResultCollector>
+        <hashTree/>
+        <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
+          <boolProp name="ResultCollector.error_logging">false</boolProp>
+          <objProp>
+            <name>saveConfig</name>
+            <value class="SampleSaveConfiguration">
+              <time>true</time>
+              <latency>true</latency>
+              <timestamp>true</timestamp>
+              <success>true</success>
+              <label>true</label>
+              <code>true</code>
+              <message>true</message>
+              <threadName>true</threadName>
+              <dataType>true</dataType>
+              <encoding>false</encoding>
+              <assertions>true</assertions>
+              <subresults>true</subresults>
+              <responseData>false</responseData>
+              <samplerData>false</samplerData>
+              <xml>false</xml>
+              <fieldNames>false</fieldNames>
+              <responseHeaders>false</responseHeaders>
+              <requestHeaders>false</requestHeaders>
+              <responseDataOnError>false</responseDataOnError>
+              <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
+              <assertionsResultsToSave>0</assertionsResultsToSave>
+              <bytes>true</bytes>
+              <threadCounts>true</threadCounts>
+            </value>
+          </objProp>
+          <stringProp name="filename"></stringProp>
+        </ResultCollector>
+        <hashTree/>
         <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
           <boolProp name="ResultCollector.error_logging">false</boolProp>
           <objProp>
