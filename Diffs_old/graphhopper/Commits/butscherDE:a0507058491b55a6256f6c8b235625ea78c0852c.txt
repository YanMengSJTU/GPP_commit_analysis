diff --git a/core/src/main/java/com/graphhopper/routing/Path.java b/core/src/main/java/com/graphhopper/routing/Path.java
index ef44349c6c..33bfc79163 100644
--- a/core/src/main/java/com/graphhopper/routing/Path.java
+++ b/core/src/main/java/com/graphhopper/routing/Path.java
@@ -90,6 +90,7 @@ private void buildThisPathFromAnotherPath(Path p) {
         weight = p.weight;
         edgeIds = new GHIntArrayList(p.edgeIds);
         sptEntry = p.sptEntry;
+        endNode = p.endNode;
     }
 
     /**
@@ -445,6 +446,7 @@ private void mergePaths(Path newPath, List<EdgeIteratorState> otherPathsEdges) {
         addOtherPathsEdgesToThisPath(otherPathsEdges);
         this.weight += newPath.getWeight();
         this.sptEntry = null; // TODO: Test if this works and if not, how can be merge spt entries?
+        this.endNode = newPath.endNode;
     }
 
     private void failOnNonAdablePath(EdgeIteratorState lastEdgeOfThisPath, List<EdgeIteratorState> otherPathsEdges) {
@@ -459,7 +461,7 @@ private void addOtherPathsEdgesToThisPath(List<EdgeIteratorState> otherPathsEdge
         }
     }
 
-    private boolean lastAndFirstNodeEqual(EdgeIteratorState lastEdgeOfThisPath, List<EdgeIteratorState> firstEdgeOfNewPath) {
-        return lastEdgeOfThisPath.getAdjNode() == firstEdgeOfNewPath.get(0).getBaseNode();
+    private boolean lastAndFirstNodeEqual(EdgeIteratorState lastEdgeOfThisPath, List<EdgeIteratorState> otherPathEdges) {
+        return lastEdgeOfThisPath.getAdjNode() == otherPathEdges.get(0).getBaseNode();
     }
 }
diff --git a/core/src/main/java/com/graphhopper/routing/template/PolygonThroughRoutingTemplate.java b/core/src/main/java/com/graphhopper/routing/template/PolygonThroughRoutingTemplate.java
index 54e0df9822..f6f48d71ca 100644
--- a/core/src/main/java/com/graphhopper/routing/template/PolygonThroughRoutingTemplate.java
+++ b/core/src/main/java/com/graphhopper/routing/template/PolygonThroughRoutingTemplate.java
@@ -54,7 +54,9 @@ private void buildRouteCandidatesForCurrentPoint(List<Integer> currentPointsLOTN
 
         for (final int LOTNodeL : currentPointsLOTNodes) {
             for (final int LOTNodeLPrime : currentPointsLOTNodes) {
-                this.routeCandidates.candidates.add(buildCandidatePath(currentPointID, nextPointID, LOTNodeL, LOTNodeLPrime));
+                if (LOTNodeL != LOTNodeLPrime) {
+                    this.routeCandidates.candidates.add(buildCandidatePath(currentPointID, nextPointID, LOTNodeL, LOTNodeLPrime));
+                }
             }
         }
     }
