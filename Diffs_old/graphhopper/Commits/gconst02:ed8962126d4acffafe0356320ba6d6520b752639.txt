diff --git a/core/src/main/java/com/graphhopper/util/GPXEntry.java b/core/src/main/java/com/graphhopper/util/GPXEntry.java
index 1a921245d9..374a9e1f40 100644
--- a/core/src/main/java/com/graphhopper/util/GPXEntry.java
+++ b/core/src/main/java/com/graphhopper/util/GPXEntry.java
@@ -25,6 +25,10 @@
  */
 public class GPXEntry extends GHPoint3D {
     private long time;
+    private double magvar;
+    private double speed;
+    private double accuracy;
+    private double bearing;
 
     public GPXEntry(GHPoint p, long millis) {
         this(p.lat, p.lon, millis);
@@ -40,6 +44,16 @@ public GPXEntry(double lat, double lon, double ele, long millis) {
         this.time = millis;
     }
 
+    public GPXEntry(double lat, double lon, double ele, long millis, double magvar, double speed,
+        double accuracy, double bearing) {
+        super(lat, lon, ele);
+        this.time = millis;
+        this.magvar = magvar;
+        this.speed = speed;
+        this.accuracy = accuracy;
+        this.bearing = bearing;
+    }
+
     boolean is3D() {
         return !Double.isNaN(ele);
     }
@@ -55,22 +69,91 @@ public void setTime(long time) {
         this.time = time;
     }
 
-    @Override
-    public int hashCode() {
-        return 59 * super.hashCode() + (int) (time ^ (time >>> 32));
+    public double getMagvar() {
+      return magvar;
+    }
+
+    public void setMagvar(double magvar) {
+      this.magvar = magvar;
+    }
+
+    public double getSpeed() {
+      return speed;
+    }
+
+    public void setSpeed(double speed) {
+      this.speed = speed;
+    }
+
+    public double getAccuracy() {
+      return accuracy;
     }
 
-    @Override
-    public boolean equals(Object obj) {
-        if (obj == null)
-            return false;
+  public void setAccuracy(double accuracy) {
+    this.accuracy = accuracy;
+  }
+
+  public double getBearing() {
+    return bearing;
+  }
+
+  public void setBearing(double bearing) {
+    this.bearing = bearing;
+  }
 
-        final GPXEntry other = (GPXEntry) obj;
-        return time == other.time && super.equals(obj);
+  @Override
+  public boolean equals(Object o) {
+    if (this == o) {
+      return true;
     }
+    if (o == null || getClass() != o.getClass()) {
+      return false;
+    }
+    if (!super.equals(o)) {
+      return false;
+    }
+
+    GPXEntry gpxEntry = (GPXEntry) o;
 
-    @Override
-    public String toString() {
-        return super.toString() + ", " + time;
+    if (time != gpxEntry.time) {
+      return false;
     }
+    if (Double.compare(gpxEntry.magvar, magvar) != 0) {
+      return false;
+    }
+    if (Double.compare(gpxEntry.speed, speed) != 0) {
+      return false;
+    }
+    if (Double.compare(gpxEntry.accuracy, accuracy) != 0) {
+      return false;
+    }
+    return Double.compare(gpxEntry.bearing, bearing) == 0;
+  }
+
+  @Override
+  public int hashCode() {
+    int result = super.hashCode();
+    long temp;
+    result = 31 * result + (int) (time ^ (time >>> 32));
+    temp = Double.doubleToLongBits(magvar);
+    result = 31 * result + (int) (temp ^ (temp >>> 32));
+    temp = Double.doubleToLongBits(speed);
+    result = 31 * result + (int) (temp ^ (temp >>> 32));
+    temp = Double.doubleToLongBits(accuracy);
+    result = 31 * result + (int) (temp ^ (temp >>> 32));
+    temp = Double.doubleToLongBits(bearing);
+    result = 31 * result + (int) (temp ^ (temp >>> 32));
+    return result;
+  }
+
+  @Override
+  public String toString() {
+    return super.toString() + ", " +
+        "time=" + time +
+        ", magvar=" + magvar +
+        ", speed=" + speed +
+        ", accuracy=" + accuracy +
+        ", bearing=" + bearing +
+        '}';
+  }
 }
