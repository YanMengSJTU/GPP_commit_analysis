diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnElement.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnElement.java
index 068c6def98..3016b7c295 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnElement.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnElement.java
@@ -216,7 +216,8 @@ private String getOsmMappedTypeName(String roadType) {
             setTag("service", "alley");
             break;
         case "Private Road":
-            typeName = "private";
+            typeName = "unclassified";
+            setTag("access", "no");
             break;
         case "Path":
             typeName = "path";
@@ -227,6 +228,9 @@ private String getOsmMappedTypeName(String roadType) {
         case "No Physical Manifestation":
         	typeName = "nohighway";
         	break;
+        case "Track":
+        	typeName = "track";
+        	break;	
         default:
             break;
         }
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/BridleWay.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/BridleWay.java
index 5a0f377a9b..16ddaf8638 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/BridleWay.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/BridleWay.java
@@ -16,7 +16,6 @@
     public void applyAttributes(RoutingElement way)
     {
         way.setTag("designation", "public_bridleway");
-
         way.setTag("foot", "yes");
         way.setTag("horse", "yes");
         way.setTag("bicycle", "yes");
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/BywayOpenToAllTraffic.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/BywayOpenToAllTraffic.java
index dde71dd382..27c349195c 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/BywayOpenToAllTraffic.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/BywayOpenToAllTraffic.java
@@ -15,7 +15,6 @@
     @Override
     public void applyAttributes(RoutingElement way) {
         way.setTag("designation", "byway_open_to_all_traffic");
-        way.setTag("highway", "track");
         way.setTag("foot", "yes");
         way.setTag("horse", "yes");
         way.setTag("bicycle", "yes");
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/Footpath.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/Footpath.java
index eca5cefc04..56e5bd7be0 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/Footpath.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/Footpath.java
@@ -17,6 +17,8 @@ public void applyAttributes(RoutingElement way)
     {
         way.setTag("designation", "public_footpath");
         way.setTag("foot", "yes");
+        way.setTag("bicycle", "no");
+        way.setTag("horse", "no");
     }
 
 }
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/OtherRouteWithPublicAccess.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/OtherRouteWithPublicAccess.java
index 0db5dd20e7..5e283397b5 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/OtherRouteWithPublicAccess.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/OtherRouteWithPublicAccess.java
@@ -7,7 +7,7 @@
  * Description: A route that is the responsibility of local highway authorities and maintained at public expense.
  * All ORPAs have rights for pedestrians. Beyond that, any particular ORPA may, or may not, have rights for cyclists and equestrians,
  * and may or may not have rights for motor vehicles. Other Routes with Public Access (ORPA) are sometimes known as unclassified
- * unsurfaced roads (or unclassified country roads).
+ * unsurfaced roads (or unclassified country roads).  Given we cannot tell if horse or bicycle is allowed we will have to say no. 
  *
  * Confirmed Allowable users: Pedestrians *
  *
@@ -20,5 +20,7 @@
     public void applyAttributes(RoutingElement way)
     {
         way.setTag("foot", "yes");
+        way.setTag("bicycle", "no");
+        way.setTag("horse", "no");
     }
 }
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/PermissiveBridleWay.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/PermissiveBridleWay.java
index 431428df90..29507d281a 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/PermissiveBridleWay.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/PermissiveBridleWay.java
@@ -16,7 +16,6 @@
     @Override
     public void applyAttributes(RoutingElement way)
     {
-        way.setTag("highway", "bridleway");
         way.setTag("horse", "permissive");
         way.setTag("bicycle", "permissive");
         way.setTag("foot", "permissive");
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/PermissivePath.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/PermissivePath.java
index 6590793b9a..fba51981eb 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/PermissivePath.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/PermissivePath.java
@@ -15,6 +15,8 @@
     @Override
     public void applyAttributes(RoutingElement way) {
         way.setTag("foot", "permissive");
+        way.setTag("horse", "no");
+        way.setTag("bicycle", "no");
     }
 
 }
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/RestrictedByway.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/RestrictedByway.java
index 2b74e6e047..828c8efa9d 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/RestrictedByway.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/RestrictedByway.java
@@ -16,7 +16,6 @@
     public void applyAttributes(RoutingElement way)
     {
         way.setTag("designation", "restricted_byway");
-        way.setTag("highway", "track");
         way.setTag("motor_vehicle", "no");
         way.setTag("foot", "yes");
         way.setTag("horse", "yes");
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/Urban.java b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/Urban.java
index b93c11e6e1..50fc0c239f 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/Urban.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/Urban.java
@@ -8,8 +8,8 @@
 	@Override
     public void applyAttributes( RoutingElement way )
     {
-		if(!way.hasTag("maxspeed")) {
-			way.setTag("maxspeed", "30 mph");
+		if(way.hasTag("maxspeed:type","GB:nsl_single")) {
+			way.setTag("maxspeed:type", "GB:urban");
 		}
     }
 }
diff --git a/core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
index ef022992ae..b1de9c6a60 100644
--- a/core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
@@ -49,10 +49,13 @@
 
 	/**
 	 * 1mph = 1.60934kph
+	 * Note that in order to correctly use the observed speeds, speed buckets must be 7 and the factor must be 1.
 	 */
-	public static final int SEVENTY_MPH_IN_KPH = (int) parseSpeed("70mph");
-	public static final int SIXTY_MPH_IN_KPH = (int) parseSpeed("60mph");;
-	public static final int THIRTY_MPH_IN_KPH = (int) parseSpeed("30mph");;
+	public static final int LEGAL_MAX_MOTORWAY_SPEED_MPH_IN_KPH = (int) parseSpeed("70mph");
+	public static final int OBSERVED_AVG_MOTORWAY_SPEED_MPH_IN_KPH = (int) parseSpeed("68mph");
+	public static final int OBSERVED_AVG_DUAL_CARRIAGEWAY_SPEED_MPH_IN_KPH = (int) parseSpeed("67mph");
+	public static final int OBSERVED_AVG_SINGLE_CARRIAGEWAY_SPEED_MPH_IN_KPH = (int) parseSpeed("47mph");
+	public static final int OBSERVED_AVG_URBAN_ROAD_SPEED_MPH_IN_KPH = (int) parseSpeed("30mph");;
 
 	/**
 	 * Should be only instantied via EncodingManager
@@ -172,51 +175,52 @@ public CarFlagEncoder( int speedBits, double speedFactor, int maxTurnCosts )
 		vehicleQualifierTypeInclusions.add("Motor Vehicles");
 		vehicleQualifierTypeInclusions.add("All Vehicles");
 
-		environmentMaxSpeedMap.put("Urban:Single Carriageway", "" + THIRTY_MPH_IN_KPH);
+		environmentMaxSpeedMap.put("Urban:Single Carriageway", "" + OBSERVED_AVG_URBAN_ROAD_SPEED_MPH_IN_KPH);
 	}
 
 	private void addNationalUKSpeedMapping()
 	{
-		defaultSpeedMap.put("GB:motorway", SEVENTY_MPH_IN_KPH);
-		defaultSpeedMap.put("GB:nsl_dual", SEVENTY_MPH_IN_KPH);
-		defaultSpeedMap.put("GB:nsl_single", SIXTY_MPH_IN_KPH);
+		defaultSpeedMap.put("GB:motorway", OBSERVED_AVG_MOTORWAY_SPEED_MPH_IN_KPH);
+		defaultSpeedMap.put("GB:nsl_dual", OBSERVED_AVG_DUAL_CARRIAGEWAY_SPEED_MPH_IN_KPH);
+		defaultSpeedMap.put("GB:nsl_single", OBSERVED_AVG_SINGLE_CARRIAGEWAY_SPEED_MPH_IN_KPH);
+		defaultSpeedMap.put("GB:urban", OBSERVED_AVG_URBAN_ROAD_SPEED_MPH_IN_KPH);
 	}
 
 	private void addRoadTypeUKSpeedMapping()
 	{
-		defaultSpeedMap.put("Motorway", SEVENTY_MPH_IN_KPH);
-		defaultSpeedMap.put("A Road", SIXTY_MPH_IN_KPH);
-		defaultSpeedMap.put("B Road", THIRTY_MPH_IN_KPH);
-		defaultSpeedMap.put("Minor Road", THIRTY_MPH_IN_KPH);
-		defaultSpeedMap.put("Local Street", THIRTY_MPH_IN_KPH);
+		defaultSpeedMap.put("Motorway", OBSERVED_AVG_MOTORWAY_SPEED_MPH_IN_KPH);
+		defaultSpeedMap.put("A Road", OBSERVED_AVG_DUAL_CARRIAGEWAY_SPEED_MPH_IN_KPH);
+		defaultSpeedMap.put("B Road", OBSERVED_AVG_SINGLE_CARRIAGEWAY_SPEED_MPH_IN_KPH);
+		defaultSpeedMap.put("Minor Road", OBSERVED_AVG_URBAN_ROAD_SPEED_MPH_IN_KPH);
+		defaultSpeedMap.put("Local Street", OBSERVED_AVG_URBAN_ROAD_SPEED_MPH_IN_KPH);
 		// defaultSpeedMap.put("Alley", 35);
-		defaultSpeedMap.put("A Road-Single Carriageway", SIXTY_MPH_IN_KPH);
-		defaultSpeedMap.put("B Road", THIRTY_MPH_IN_KPH);
-		defaultSpeedMap.put("Minor Road", THIRTY_MPH_IN_KPH);
-		defaultSpeedMap.put("Local Street", THIRTY_MPH_IN_KPH);
+		defaultSpeedMap.put("A Road-Single Carriageway", OBSERVED_AVG_SINGLE_CARRIAGEWAY_SPEED_MPH_IN_KPH);
+		defaultSpeedMap.put("B Road", OBSERVED_AVG_SINGLE_CARRIAGEWAY_SPEED_MPH_IN_KPH);
+		defaultSpeedMap.put("Minor Road", OBSERVED_AVG_URBAN_ROAD_SPEED_MPH_IN_KPH);
+		defaultSpeedMap.put("Local Street", OBSERVED_AVG_URBAN_ROAD_SPEED_MPH_IN_KPH);
 		// defaultSpeedMap.put("Alley", 35);
-		defaultSpeedMap.put("Motorway", SEVENTY_MPH_IN_KPH);
-		defaultSpeedMap.put("A Road", SIXTY_MPH_IN_KPH);
-		defaultSpeedMap.put("B Road", THIRTY_MPH_IN_KPH);
-		defaultSpeedMap.put("Minor Road", THIRTY_MPH_IN_KPH);
-		defaultSpeedMap.put("Local Street", THIRTY_MPH_IN_KPH);
+		defaultSpeedMap.put("Motorway", OBSERVED_AVG_MOTORWAY_SPEED_MPH_IN_KPH);
+		defaultSpeedMap.put("A Road", OBSERVED_AVG_DUAL_CARRIAGEWAY_SPEED_MPH_IN_KPH);
+		defaultSpeedMap.put("B Road", OBSERVED_AVG_SINGLE_CARRIAGEWAY_SPEED_MPH_IN_KPH);
+		defaultSpeedMap.put("Minor Road", OBSERVED_AVG_URBAN_ROAD_SPEED_MPH_IN_KPH);
+		defaultSpeedMap.put("Local Street", OBSERVED_AVG_URBAN_ROAD_SPEED_MPH_IN_KPH);
 		// defaultSpeedMap.put("Alley", 35);
-		defaultSpeedMap.put("A Road-Dual Carriageway", SIXTY_MPH_IN_KPH);
-		defaultSpeedMap.put("B Road", THIRTY_MPH_IN_KPH);
-		defaultSpeedMap.put("Minor Road", THIRTY_MPH_IN_KPH);
-		defaultSpeedMap.put("Local Street", THIRTY_MPH_IN_KPH);
+		defaultSpeedMap.put("A Road-Dual Carriageway", OBSERVED_AVG_DUAL_CARRIAGEWAY_SPEED_MPH_IN_KPH);
+		defaultSpeedMap.put("B Road", OBSERVED_AVG_SINGLE_CARRIAGEWAY_SPEED_MPH_IN_KPH);
+		defaultSpeedMap.put("Minor Road", OBSERVED_AVG_URBAN_ROAD_SPEED_MPH_IN_KPH);
+		defaultSpeedMap.put("Local Street", OBSERVED_AVG_URBAN_ROAD_SPEED_MPH_IN_KPH);
 		// defaultSpeedMap.put("Alley", 35);
-		defaultSpeedMap.put("Motorway-Slip Road", SEVENTY_MPH_IN_KPH);
-		defaultSpeedMap.put("A Road-Slip Road", SIXTY_MPH_IN_KPH);
-		defaultSpeedMap.put("B Road", THIRTY_MPH_IN_KPH);
-		defaultSpeedMap.put("Minor Road", THIRTY_MPH_IN_KPH);
-		defaultSpeedMap.put("Local Street", THIRTY_MPH_IN_KPH);
+		defaultSpeedMap.put("Motorway-Slip Road", OBSERVED_AVG_MOTORWAY_SPEED_MPH_IN_KPH);
+		defaultSpeedMap.put("A Road-Slip Road", OBSERVED_AVG_DUAL_CARRIAGEWAY_SPEED_MPH_IN_KPH);
+		defaultSpeedMap.put("B Road", OBSERVED_AVG_URBAN_ROAD_SPEED_MPH_IN_KPH);
+		defaultSpeedMap.put("Minor Road", OBSERVED_AVG_URBAN_ROAD_SPEED_MPH_IN_KPH);
+		defaultSpeedMap.put("Local Street", OBSERVED_AVG_URBAN_ROAD_SPEED_MPH_IN_KPH);
 		// defaultSpeedMap.put("Alley", 35);
-		defaultSpeedMap.put("Motorway-Roundabout", SEVENTY_MPH_IN_KPH);
-		defaultSpeedMap.put("A Road-Roundabout", SIXTY_MPH_IN_KPH);
-		defaultSpeedMap.put("B Road-Roundabout", THIRTY_MPH_IN_KPH);
-		defaultSpeedMap.put("Minor Road-Roundabout", THIRTY_MPH_IN_KPH);
-		defaultSpeedMap.put("Local Street-Roundabout", THIRTY_MPH_IN_KPH);
+		defaultSpeedMap.put("Motorway-Roundabout", OBSERVED_AVG_MOTORWAY_SPEED_MPH_IN_KPH);
+		defaultSpeedMap.put("A Road-Roundabout", OBSERVED_AVG_DUAL_CARRIAGEWAY_SPEED_MPH_IN_KPH);
+		defaultSpeedMap.put("B Road-Roundabout", OBSERVED_AVG_SINGLE_CARRIAGEWAY_SPEED_MPH_IN_KPH);
+		defaultSpeedMap.put("Minor Road-Roundabout", OBSERVED_AVG_URBAN_ROAD_SPEED_MPH_IN_KPH);
+		defaultSpeedMap.put("Local Street-Roundabout", OBSERVED_AVG_URBAN_ROAD_SPEED_MPH_IN_KPH);
 	}
 
 	/**
@@ -327,16 +331,7 @@ public long handleWayTags( Way way, long allowed, long relationFlags )
 			// get assumed speed from highway type
 			double speed = getSpeed(way);
 
-			// set the max speed tag for the environment
-			String environment = way.getTag("environment");
-			if (!Helper.isEmpty(environment))
-			{
-				String maxSpeed = environmentMaxSpeedMap.get(environment);
-				if (!Helper.isEmpty(maxSpeed))
-				{
-					way.setTag("maxspeed", maxSpeed);
-				}
-			}
+			
 			speed = applyMaxSpeed(way, speed, true);
 			// limit speed to max 30 km/h if bad surface
 			if (speed > 30 && way.hasTag("surface", badSurfaceSpeedMap))
diff --git a/core/src/main/java/com/graphhopper/routing/util/OsCarFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/OsCarFlagEncoder.java
index 3cb551e0c7..7ebfeec410 100644
--- a/core/src/main/java/com/graphhopper/routing/util/OsCarFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/OsCarFlagEncoder.java
@@ -13,14 +13,14 @@ public OsCarFlagEncoder() {
 
 	public OsCarFlagEncoder(String propertiesStr) {
 		super(propertiesStr);
-		maxPossibleSpeed = SEVENTY_MPH_IN_KPH;
+		maxPossibleSpeed = LEGAL_MAX_MOTORWAY_SPEED_MPH_IN_KPH;
 		restrictedValues.clear();
 //		setOsAvoidanceDecorator();
 	}
 
 	public OsCarFlagEncoder(int speedBits, double speedFactor, int maxTurnCosts) {
 		super(speedBits, speedFactor, maxTurnCosts);
-		maxPossibleSpeed = SEVENTY_MPH_IN_KPH;
+		maxPossibleSpeed = LEGAL_MAX_MOTORWAY_SPEED_MPH_IN_KPH;
 		restrictedValues.clear();
 //		setOsAvoidanceDecorator();
 	}
diff --git a/core/src/main/java/com/graphhopper/routing/util/SpeedParserUtil.java b/core/src/main/java/com/graphhopper/routing/util/SpeedParserUtil.java
new file mode 100644
index 0000000000..5d517f1b63
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/routing/util/SpeedParserUtil.java
@@ -0,0 +1,44 @@
+package com.graphhopper.routing.util;
+
+import com.graphhopper.util.DistanceCalcEarth;
+import com.graphhopper.util.Helper;
+
+public class SpeedParserUtil
+{
+	public static double parseSpeed(String str) {
+		if (Helper.isEmpty(str))
+			return -1;
+
+		try {
+			int val;
+			// see https://en.wikipedia.org/wiki/Knot_%28unit%29#Definitions
+			int mpInteger = str.indexOf("mp");
+			if (mpInteger > 0) {
+				str = str.substring(0, mpInteger).trim();
+				val = Integer.parseInt(str);
+				return val * DistanceCalcEarth.KM_MILE;
+			}
+
+			int knotInteger = str.indexOf("knots");
+			if (knotInteger > 0) {
+				str = str.substring(0, knotInteger).trim();
+				val = Integer.parseInt(str);
+				return val * 1.852;
+			}
+
+			int kmInteger = str.indexOf("km");
+			if (kmInteger > 0) {
+				str = str.substring(0, kmInteger).trim();
+			} else {
+				kmInteger = str.indexOf("kph");
+				if (kmInteger > 0) {
+					str = str.substring(0, kmInteger).trim();
+				}
+			}
+
+			return Integer.parseInt(str);
+		} catch (Exception ex) {
+			return -1;
+		}
+	}
+}
diff --git a/core/src/main/java/com/graphhopper/util/shapes/GHPoint.java b/core/src/main/java/com/graphhopper/util/shapes/GHPoint.java
index 828720f5b3..bd98795078 100644
--- a/core/src/main/java/com/graphhopper/util/shapes/GHPoint.java
+++ b/core/src/main/java/com/graphhopper/util/shapes/GHPoint.java
@@ -17,6 +17,15 @@
  */
 package com.graphhopper.util.shapes;
 
+import org.geotools.referencing.CRS;
+import org.opengis.geometry.MismatchedDimensionException;
+import org.opengis.referencing.FactoryException;
+import org.opengis.referencing.crs.CoordinateReferenceSystem;
+import org.opengis.referencing.operation.TransformException;
+
+import uk.co.ordnancesurvey.api.srs.LatLong;
+import uk.co.ordnancesurvey.api.srs.OpenCoordConverter;
+
 import com.graphhopper.util.NumHelper;
 
 /**
@@ -24,6 +33,8 @@
  */
 public class GHPoint
 {
+	private static final String BNG = "bng";
+	private static final String WGS_84 = "WGS84";
 	public double lat = Double.NaN;
 	public double lon = Double.NaN;
 
@@ -108,4 +119,31 @@ public static GHPoint parse( String str )
 		}
 		return null;
 	}
+
+	/**
+	 * 
+	 * @param string
+	 * @param srs  default is WGS_84 to match the non 
+	 * @return
+	 */
+	public static GHPoint parse( String str, String srs )
+    {
+	    if(srs.equalsIgnoreCase(WGS_84)) {
+	    	return parse(str);
+	    }
+	    try
+        {
+	    	String[] fromStrs = str.split(",");
+	    	double sourceXCoordinate = Double.parseDouble(fromStrs[0]);
+			double sourceYCoordinate = Double.parseDouble(fromStrs[1]);
+	        CoordinateReferenceSystem outputCRS = OpenCoordConverter.wgs84CoordRefSystem;
+	        CoordinateReferenceSystem inputCRS = srs.equals(BNG)||srs.equals(OpenCoordConverter.BNG_CRS_CODE)?OpenCoordConverter.bngCoordRefSystem:CRS.decode(srs);
+	        LatLong transformFromSourceCRSToTargetCRS = OpenCoordConverter.transformFromSourceCRSToTargetCRS(inputCRS, outputCRS, sourceXCoordinate, sourceYCoordinate, true);
+	        return new GHPoint(transformFromSourceCRSToTargetCRS.getLatAngle(), transformFromSourceCRSToTargetCRS.getLongAngle());
+        } catch (FactoryException | MismatchedDimensionException | TransformException e)
+        {
+        	// Fall through to return a null below
+        }
+	    return null;
+    }
 }
diff --git a/core/src/main/java/uk/co/ordnancesurvey/api/srs/OpenCoordConverter.java b/core/src/main/java/uk/co/ordnancesurvey/api/srs/OpenCoordConverter.java
index 9c10a11ac5..204bdb386d 100644
--- a/core/src/main/java/uk/co/ordnancesurvey/api/srs/OpenCoordConverter.java
+++ b/core/src/main/java/uk/co/ordnancesurvey/api/srs/OpenCoordConverter.java
@@ -16,12 +16,12 @@
  */
 public class OpenCoordConverter {
 	/* Coordinate reference systems */
-	private static CoordinateReferenceSystem bngCoordRefSystem;
-	private static CoordinateReferenceSystem wgs84CoordRefSystem;
+	public static CoordinateReferenceSystem bngCoordRefSystem;
+	public static CoordinateReferenceSystem wgs84CoordRefSystem;
 	
 	/* EPSG codes for coordinate reference systems */
-	private static final String BNG_CRS_CODE = "EPSG:27700";
-	private static final String WGS84_CRS_CODE = "EPSG:4326";
+	public static final String BNG_CRS_CODE = "EPSG:27700";
+	public static final String WGS84_CRS_CODE = "EPSG:4326";
 
 	static {
 		try {
@@ -82,7 +82,7 @@ public static LatLong toBNG(double wsg84Latitude, double wsg84Longitude)
 	 * @throws MismatchedDimensionException
 	 * @throws TransformException
 	 */
-	private static LatLong transformFromSourceCRSToTargetCRS(CoordinateReferenceSystem sourceCRS, CoordinateReferenceSystem targetCRS, 
+	public static LatLong transformFromSourceCRSToTargetCRS(CoordinateReferenceSystem sourceCRS, CoordinateReferenceSystem targetCRS, 
 			double sourceXCoordinate, double sourceyCoordinate, boolean lenient) throws FactoryException, MismatchedDimensionException, TransformException {
 		
 		if(null == sourceCRS || null == targetCRS) {
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/OSCarFlagEncoderTest.java b/core/src/test/java/com/graphhopper/reader/osgb/OSCarFlagEncoderTest.java
index c4adc5871a..91d7379251 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/OSCarFlagEncoderTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/OSCarFlagEncoderTest.java
@@ -13,6 +13,7 @@
 import com.graphhopper.routing.util.DefaultEdgeFilter;
 import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.routing.util.OsCarFlagEncoder;
+import com.graphhopper.routing.util.SpeedParserUtil;
 import com.graphhopper.storage.GraphHopperStorage;
 
 public class OSCarFlagEncoderTest extends AbstractOsItnReaderTest
@@ -25,10 +26,10 @@ public void initEncoding()
 	{
 		if (turnCosts)
 		{
-			osCarEncoder = new OsCarFlagEncoder("speedBits=5|speedfactor=5|turncosts=3");
+			osCarEncoder = new OsCarFlagEncoder("speedBits=7|speedfactor=1|turncosts=3");
 		} else
 		{
-			osCarEncoder = new OsCarFlagEncoder("speedBits=5|speedfactor=5|turncosts=0");
+			osCarEncoder = new OsCarFlagEncoder("speedBits=7|speedfactor=1|turncosts=0");
 		}
 
 		carOutEdges = new DefaultEdgeFilter(osCarEncoder, false, true);
@@ -73,21 +74,19 @@ public void testReadSimplePrivateRestrictedCrossRoads() throws IOException
 	
 	@Test
 	/**
-	 * Tests that the max speed for an OS car is 70mph.
+	 * Tests that the max speed for an OS car is pegged back to 70mph irrespective of whatever speed is given as the max speed for a way.
 	 * 
-	 * Note that the 70mph is factored to be divisible by five such that it fits the current factor 5 speed encoding.
 	 * @throws IOException
 	 */
 	public void testMaxSpeedForCaris70mph() throws IOException {
 		
-		final int factoredMPHinKPH = (CarFlagEncoder.SEVENTY_MPH_IN_KPH/5)*5;
+		final int maxSpeedInKPH = CarFlagEncoder.LEGAL_MAX_MOTORWAY_SPEED_MPH_IN_KPH;
 		
         OSMWay way = new OSMWay(1);
         way.setTag("highway", "motorway");
-        way.setTag("maxspeed", "120");
+        way.setTag("maxspeed", "135");
         long allowed = osCarEncoder.acceptWay(way);
         long encoded = osCarEncoder.handleWayTags(way, allowed, 0);
-        assertEquals(factoredMPHinKPH, osCarEncoder.getSpeed(encoded), 1e-1);
-
+        assertEquals(maxSpeedInKPH, osCarEncoder.getSpeed(encoded), 1e-1);
 	}
 }
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/OsDpnWayTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/OsDpnWayTest.java
index 3b77ac1968..081105ba9a 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/OsDpnWayTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/OsDpnWayTest.java
@@ -832,7 +832,8 @@ public void testAlley() throws XMLStreamException, FactoryException, TransformEx
     @Test
     public void testPrivate() throws XMLStreamException, FactoryException, TransformException {
         OsDpnWay way = getOsDpnWay(privateRoad);
-        assertTrue(way.hasTag("highway", "private"));
+        assertTrue(way.hasTag("highway", "unclassified"));
+        assertTrue(way.hasTag("access", "no"));
     }
 
     @Test
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/BywayOpenToAllTrafficTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/BywayOpenToAllTrafficTest.java
index 8af9a13828..1d9b0409f1 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/BywayOpenToAllTrafficTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/BywayOpenToAllTrafficTest.java
@@ -33,7 +33,6 @@ public void init() {
     public void testVisitWayAttribute() throws Exception {
         visitor.visitWayAttribute("bywayopentoalltraffic", way);
         verify(way).setTag("designation", "byway_open_to_all_traffic");
-        verify(way).setTag("highway", "track");
         verify(way).setTag("foot", "yes");
         verify(way).setTag("horse", "yes");
         verify(way).setTag("bicycle", "yes");
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/FootpathTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/FootpathTest.java
index 249a368090..8981be20a9 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/FootpathTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/FootpathTest.java
@@ -33,6 +33,8 @@ public void testVisitWayAttribute() {
         visitor.visitWayAttribute("footpath", way);
         verify(way).setTag("designation", "public_footpath");
         verify(way).setTag("foot", "yes");
+        verify(way).setTag("bicycle", "no");
+        verify(way).setTag("horse", "no");
         verifyNoMoreInteractions(way);
     }
 
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/OtherRouteWithPublicAccessTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/OtherRouteWithPublicAccessTest.java
index 1d1ed8a051..ad3862fd04 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/OtherRouteWithPublicAccessTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/OtherRouteWithPublicAccessTest.java
@@ -32,6 +32,8 @@ public void init() {
     public void testVisitWayAttribute() {
         visitor.visitWayAttribute("otherroutewithpublicaccess", way);
         verify(way).setTag("foot", "yes");
+        verify(way).setTag("bicycle", "no");
+        verify(way).setTag("horse", "no");
         verifyNoMoreInteractions(way);
     }
 
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/PermissiveBridleWayTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/PermissiveBridleWayTest.java
index 19291c5f80..972dcaedd6 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/PermissiveBridleWayTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/PermissiveBridleWayTest.java
@@ -31,7 +31,6 @@ public void init() {
     @Test
     public void testVisitWayAttribute() {
         visitor.visitWayAttribute("permissivebridleway", way);
-        verify(way).setTag("highway", "bridleway");
         verify(way).setTag("horse", "permissive");
         verify(way).setTag("bicycle", "permissive");
         verify(way).setTag("foot", "permissive");
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/PermissivePathTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/PermissivePathTest.java
index 1d509e58cc..4b2dfb0923 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/PermissivePathTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/PermissivePathTest.java
@@ -33,6 +33,8 @@ public void init() {
     public void testVisitWayAttribute() throws Exception {
         visitor.visitWayAttribute("permissivepath", way);
         verify(way).setTag("foot", "permissive");
+        verify(way).setTag("bicycle", "no");
+        verify(way).setTag("horse", "no");
         verifyNoMoreInteractions(way);
     }
 }
\ No newline at end of file
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/RestrictedBywayTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/RestrictedBywayTest.java
index 8f0dc8b998..baf63ad3a9 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/RestrictedBywayTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/RestrictedBywayTest.java
@@ -32,7 +32,6 @@ public void init() {
     public void testVisitWayAttribute() throws Exception {
         visitor.visitWayAttribute("restrictedbyway", way);
         verify(way).setTag("designation", "restricted_byway");
-        verify(way).setTag("highway", "track");
         verify(way).setTag("motor_vehicle", "no");
         verify(way).setTag("foot", "yes");
         verify(way).setTag("horse", "yes");
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/itn/OsItnReaderTest.java b/core/src/test/java/com/graphhopper/reader/osgb/itn/OsItnReaderTest.java
index 6c326a2c38..d2d5af1a39 100755
--- a/core/src/test/java/com/graphhopper/reader/osgb/itn/OsItnReaderTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/itn/OsItnReaderTest.java
@@ -33,6 +33,7 @@
 
 import com.graphhopper.reader.osgb.AbstractOsItnReaderTest;
 import com.graphhopper.reader.osgb.AbstractOsReader;
+import com.graphhopper.routing.util.CarFlagEncoder;
 import com.graphhopper.routing.util.DefaultEdgeFilter;
 import com.graphhopper.routing.util.EdgeFilter;
 import com.graphhopper.routing.util.EncodingManager;
@@ -264,17 +265,17 @@ private void checkMultiNodeNetwork(final GraphHopperStorage graph) {
         final EdgeIterator iter = explorer.setBaseNode(0);
         assertTrue(iter.next());
         assertEquals("OTHER ROAD (A337)", iter.getName());
-        assertEquals(95, carEncoder.getSpeed(iter.getFlags()), 1e-1);
+        assertEquals(CarFlagEncoder.OBSERVED_AVG_SINGLE_CARRIAGEWAY_SPEED_MPH_IN_KPH, carEncoder.getSpeed(iter.getFlags()), 1e-1);
         iter.next();
         assertEquals("OTHER ROAD (A337)", iter.getName());
-        assertEquals(95, carEncoder.getSpeed(iter.getFlags()), 1e-1);
+        assertEquals(CarFlagEncoder.OBSERVED_AVG_SINGLE_CARRIAGEWAY_SPEED_MPH_IN_KPH, carEncoder.getSpeed(iter.getFlags()), 1e-1);
         iter.next();
         assertEquals("BONHAY ROAD (A337)", iter.getName());
-        assertEquals(95, carEncoder.getSpeed(iter.getFlags()), 1e-1);
+        assertEquals(CarFlagEncoder.OBSERVED_AVG_SINGLE_CARRIAGEWAY_SPEED_MPH_IN_KPH, carEncoder.getSpeed(iter.getFlags()), 1e-1);
         iter.next();
         assertEquals("BONHAY ROAD (A337)", iter.getName());
         final long flags = iter.getFlags();
-        assertEquals(95.0, carEncoder.getSpeed(flags), 1e-1);
+        assertEquals(CarFlagEncoder.OBSERVED_AVG_SINGLE_CARRIAGEWAY_SPEED_MPH_IN_KPH, carEncoder.getSpeed(flags), 1e-1);
         assertFalse(iter.next());
     }
 
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/UrbanTest.java b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/UrbanTest.java
index 0815b26036..4ca494f6e3 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/UrbanTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/UrbanTest.java
@@ -15,7 +15,6 @@
 
 public class UrbanTest
 {
-	private static final String _30_MPH = "30 mph";
 	static OsToOsmAttributeMappingVisitor visitor;
 	@Mock
 	Way way;
@@ -35,9 +34,10 @@ public void init()
 	@Test
 	public void testVisitWayAttribute()
 	{
+		when(way.hasTag("maxspeed:type", "GB:nsl_single")).thenReturn(true);
 		visitor.visitWayAttribute("Urban".toLowerCase().replace(" ", "").replace("–", ""), way);
-		verify(way).hasTag("maxspeed");
-		verify(way).setTag("maxspeed", _30_MPH);
+		verify(way).hasTag("maxspeed:type", "GB:nsl_single");
+		verify(way).setTag("maxspeed:type", "GB:urban");
 		verifyNoMoreInteractions(way);
 	}
 	
@@ -45,10 +45,10 @@ public void testVisitWayAttribute()
 	public void testVisitWayAttributeWhenNationalSpeedLimitSet()
 	{
 		when(way.hasTag("maxspeed")).thenReturn(false);
-		when(way.hasTag("maxspeed:type")).thenReturn(true);
+		when(way.hasTag("maxspeed:type", "GB:nsl_single")).thenReturn(true);
 		visitor.visitWayAttribute("Urban".toLowerCase().replace(" ", "").replace("–", ""), way);
-		verify(way).hasTag("maxspeed");
-		verify(way).setTag("maxspeed", _30_MPH);
+		verify(way).hasTag("maxspeed:type", "GB:nsl_single");
+		verify(way).setTag("maxspeed:type", "GB:urban");
 		verifyNoMoreInteractions(way);
 	}
 }
\ No newline at end of file
diff --git a/core/src/test/java/com/graphhopper/routing/util/CarFlagEncoderTest.java b/core/src/test/java/com/graphhopper/routing/util/CarFlagEncoderTest.java
index ff6e96d6f1..3b1bee85ce 100644
--- a/core/src/test/java/com/graphhopper/routing/util/CarFlagEncoderTest.java
+++ b/core/src/test/java/com/graphhopper/routing/util/CarFlagEncoderTest.java
@@ -246,7 +246,7 @@ public void testMaxSpeedType()
         way.setTag("maxspeed:type", "GB:nsl_single");
         allowed = encoder.acceptWay(way);
         encoded = encoder.handleWayTags(way, allowed, 0);
-        assertEquals(factorSpeed(CarFlagEncoder.SIXTY_MPH_IN_KPH), encoder.getSpeed(encoded), 1e-1);
+        assertEquals(factorSpeed(CarFlagEncoder.OBSERVED_AVG_SINGLE_CARRIAGEWAY_SPEED_MPH_IN_KPH), encoder.getSpeed(encoded), 1e-1);
 
         way.clearTags();
         way.setTag("highway", "motorway");
@@ -261,7 +261,7 @@ public void testMaxSpeedType()
         way.setTag("maxspeed:type", "GB:nsl_single");
         allowed = encoder.acceptWay(way);
         encoded = encoder.handleWayTags(way, allowed, 0);
-        assertEquals(factorSpeed(CarFlagEncoder.THIRTY_MPH_IN_KPH), encoder.getSpeed(encoded), 1e-1);
+        assertEquals(factorSpeed(CarFlagEncoder.OBSERVED_AVG_URBAN_ROAD_SPEED_MPH_IN_KPH), encoder.getSpeed(encoded), 1e-1);
 
         try
         {
@@ -274,7 +274,7 @@ public void testMaxSpeedType()
 
 	private int truncateSpeedToMax()
     {
-	    int factorSpeed = factorSpeed(CarFlagEncoder.SEVENTY_MPH_IN_KPH);
+	    int factorSpeed = factorSpeed(CarFlagEncoder.LEGAL_MAX_MOTORWAY_SPEED_MPH_IN_KPH);
 		return factorSpeed>encoder.maxPossibleSpeed?encoder.maxPossibleSpeed:factorSpeed;
     }
 
diff --git a/core/src/test/java/com/graphhopper/routing/util/EmergencyVehicleFlagEncoderTest.java b/core/src/test/java/com/graphhopper/routing/util/EmergencyVehicleFlagEncoderTest.java
index 0d7fd3e039..9d01f9b84c 100644
--- a/core/src/test/java/com/graphhopper/routing/util/EmergencyVehicleFlagEncoderTest.java
+++ b/core/src/test/java/com/graphhopper/routing/util/EmergencyVehicleFlagEncoderTest.java
@@ -21,19 +21,25 @@
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Map;
+import java.util.Map.Entry;
+
 import org.junit.Test;
 
 import com.graphhopper.reader.OSMNode;
 import com.graphhopper.reader.OSMWay;
 
 /**
- *
- * @author Peter Karich
+ * @author Stuart Adam
+ * @author Mat Brett
  */
 public class EmergencyVehicleFlagEncoderTest
 {
-    private final EncodingManager em = new EncodingManager("EMV,BIKE",8);
+    private final EncodingManager em = new EncodingManager("EMV|speedBits=7|speedFactor=1|turnCosts=0,BIKE",8);
     private final EmergencyVehicleFlagEncoder encoder = (EmergencyVehicleFlagEncoder) em.getEncoder("EMV");
+    private final int speedFactor = 1;
     
     @Test
     public void testAccess()
@@ -187,26 +193,26 @@ public void testMaxSpeed()
         way.setTag("maxspeed", "500");
         long allowed = encoder.acceptWay(way);
         long encoded = encoder.handleWayTags(way, allowed, 0);
-        assertEquals(110, encoder.getSpeed(encoded), 1e-1);
+        assertEquals(112, encoder.getSpeed(encoded), 1e-1);
 
         way = new OSMWay(1);
         way.setTag("highway", "primary");
         way.setTag("maxspeed:backward", "10");
         way.setTag("maxspeed:forward", "20");
         encoded = encoder.handleWayTags(way, encoder.acceptWay(way), 0);
-        assertEquals(10, encoder.getSpeed(encoded), 1e-1);
+        assertEquals(9, encoder.getSpeed(encoded), 1e-1);
 
         way = new OSMWay(1);
         way.setTag("highway", "primary");
         way.setTag("maxspeed:forward", "20");
         encoded = encoder.handleWayTags(way, encoder.acceptWay(way), 0);
-        assertEquals(20, encoder.getSpeed(encoded), 1e-1);
+        assertEquals(18, encoder.getSpeed(encoded), 1e-1);
 
         way = new OSMWay(1);
         way.setTag("highway", "primary");
         way.setTag("maxspeed:backward", "20");
         encoded = encoder.handleWayTags(way, encoder.acceptWay(way), 0);
-        assertEquals(20, encoder.getSpeed(encoded), 1e-1);
+        assertEquals(18, encoder.getSpeed(encoded), 1e-1);
     }
 
     @Test
@@ -218,7 +224,7 @@ public void testSpeed()
         way.setTag("maxspeed", "110");
         long allowed = encoder.acceptWay(way);
         long encoded = encoder.handleWayTags(way, allowed, 0);
-        assertEquals(100, encoder.getSpeed(encoded), 1e-1);
+        assertEquals(99, encoder.getSpeed(encoded), 1e-1);
 
         way.clearTags();
         way.setTag("highway", "residential");
@@ -249,57 +255,76 @@ public void testSpeed()
         }
     }
     
-    @Test
-    public void testMaxSpeedType()
-    {
-        // limit bigger than default road speed
-        OSMWay way = new OSMWay(1);
-        way.setTag("highway", "primary");
-        way.setTag("maxspeed:type", "GB:nsl_dual");
-        long allowed = encoder.acceptWay(way);
-        long encoded = encoder.handleWayTags(way, allowed, 0);
-        assertEquals(truncateSpeedToMax(), encoder.getSpeed(encoded), 1e-1);
-
-        way.clearTags();
-        way.setTag("highway", "secondary");
-        way.setTag("maxspeed:type", "GB:nsl_single");
-        allowed = encoder.acceptWay(way);
-        encoded = encoder.handleWayTags(way, allowed, 0);
-        assertEquals(factorSpeed(CarFlagEncoder.SIXTY_MPH_IN_KPH), encoder.getSpeed(encoded), 1e-1);
-
-        way.clearTags();
-        way.setTag("highway", "motorway");
-        way.setTag("maxspeed:type", "GB:motorway");
-        allowed = encoder.acceptWay(way);
-        encoded = encoder.handleWayTags(way, allowed, 0);
-        assertEquals(truncateSpeedToMax(), encoder.getSpeed(encoded), 1e-1);
-
-        way.clearTags();
-        way.setTag("highway", "secondary");
-        way.setTag("maxspeed", "30 mph");
-        way.setTag("maxspeed:type", "GB:nsl_single");
-        allowed = encoder.acceptWay(way);
-        encoded = encoder.handleWayTags(way, allowed, 0);
-        assertEquals(factorSpeed(CarFlagEncoder.THIRTY_MPH_IN_KPH), encoder.getSpeed(encoded), 1e-1);
-
-        try
-        {
-            encoder.setSpeed(0, -1);
-            assertTrue(false);
-        } catch (IllegalArgumentException ex)
-        {
-        }
+    /**
+     * Convenience method which builds an OSMWay, enriches it with tags, then returns it.
+     * @return
+     */
+    private OSMWay wayMaker(Map<String, String> tags) {
+    	 OSMWay way = new OSMWay(1);
+    	 
+    	 Iterator<Entry<String, String>> it = tags.entrySet().iterator();
+    	    while (it.hasNext()) {
+    	        Map.Entry<String, String> pair = (Map.Entry<String, String>)it.next();
+    	        way.setTag((String) pair.getKey(),pair.getValue());
+    	        it.remove(); 
+    	    }
+    	    
+    	    return way;
     }
-
-	private int truncateSpeedToMax()
-    {
-	    int factorSpeed = factorSpeed(CarFlagEncoder.SEVENTY_MPH_IN_KPH);
-		return factorSpeed>encoder.maxPossibleSpeed?encoder.maxPossibleSpeed:factorSpeed;
+    
+    /**
+     * Extracted test body for testing that the maximum speeds for roads is considered to be its observed limit if that limit is less than the 
+     * maximum speed given for the grade of road.
+     * @param tags
+     */
+    private void testMaxRoadSpeed(int maxSpeedInKPH, Map<String, String> tags) {
+    	OSMWay way = wayMaker(tags);
+    	 long allowed = encoder.acceptWay(way);
+         long encoded = encoder.handleWayTags(way, allowed, 0);
+         assertEquals(factorSpeed(maxSpeedInKPH, speedFactor), encoder.getSpeed(encoded), 1e-1);
     }
-
-	private int factorSpeed(int speed )
+    
+	private int truncateMaxRoadSpeedToLegalMaximum()
     {
-	    return Math.round(speed/5)*5;
+	    int maxLegalSpeed = CarFlagEncoder.OBSERVED_AVG_MOTORWAY_SPEED_MPH_IN_KPH;
+	    int maxPossibleSpeed = encoder.maxPossibleSpeed;
+		return maxPossibleSpeed > maxLegalSpeed ? maxLegalSpeed: maxPossibleSpeed;
+    }
+	
+	private int factorSpeed(int speed, int factor) {
+		return ((speed/factor)*factor);
+	}
+    
+    @Test
+    public void testMaxRoadSpeedMotorway() {
+    	Map<String, String> tags = new HashMap<String, String>();
+    	 tags.put("highway", "motorway");
+         tags.put("maxspeed:type", "GB:motorway");
+         testMaxRoadSpeed(truncateMaxRoadSpeedToLegalMaximum(), tags);
+    }
+    
+    @Test
+    public void testMaxRoadSpeedDualCarriageway() {
+    	Map<String, String> tags = new HashMap<String, String>();
+    	 tags.put("highway", "primary");
+         tags.put("maxspeed:type", "GB:nsl_dual");
+         testMaxRoadSpeed(CarFlagEncoder.OBSERVED_AVG_DUAL_CARRIAGEWAY_SPEED_MPH_IN_KPH, tags);
+    }
+    
+    @Test
+    public void testMaxRoadSpeedSingleCarriageway() {
+    	Map<String, String> tags = new HashMap<String, String>();
+    	 tags.put("highway", "secondary");
+         tags.put("maxspeed:type", "GB:nsl_single");
+         testMaxRoadSpeed(CarFlagEncoder.OBSERVED_AVG_SINGLE_CARRIAGEWAY_SPEED_MPH_IN_KPH, tags);
+    }
+    
+    @Test
+    public void testMaxRoadSpeedUrbanRoad() {
+    	Map<String, String> tags = new HashMap<String, String>();
+    	 tags.put("highway", "secondary");
+         tags.put("maxspeed:type", "GB:urban");
+         testMaxRoadSpeed(CarFlagEncoder.OBSERVED_AVG_URBAN_ROAD_SPEED_MPH_IN_KPH, tags);
     }
 
     @Test
@@ -336,50 +361,6 @@ public void testRoundabout()
         assertTrue(encoder.isBool(flags, FlagEncoder.K_ROUNDABOUT));
     }
 
-    @Test
-    public void testRailway()
-    {
-        OSMWay way = new OSMWay(1);
-        way.setTag("highway", "secondary");
-        way.setTag("railway", "rail");
-        // disallow rail
-        assertTrue(encoder.acceptWay(way) == 0);
-
-        way.clearTags();
-        way.setTag("highway", "path");
-        way.setTag("railway", "abandoned");
-        assertTrue(encoder.acceptWay(way) == 0);
-
-        // on disallowed highway, railway is allowed, sometimes incorrectly mapped
-        way.setTag("highway", "track");
-        assertTrue(encoder.acceptWay(way) > 0);
-
-        // this is fully okay as sometimes old rails are on the road
-        way.setTag("highway", "primary");
-        way.setTag("railway", "historic");
-        assertTrue(encoder.acceptWay(way) > 0);
-
-        way.setTag("motorcar", "no");
-        assertTrue(encoder.acceptWay(way) == 0);
-
-        way = new OSMWay(1);
-        way.setTag("highway", "secondary");
-        way.setTag("railway", "tram");
-        // but allow tram to be on the same way
-        assertTrue(encoder.acceptWay(way) > 0);
-
-        way = new OSMWay(1);
-        way.setTag("route", "shuttle_train");
-        way.setTag("motorcar", "yes");
-        way.setTag("bicycle", "no");
-        way.setTag("duration", "35");
-        way.setTag("estimated_distance", 50000);
-        // accept
-        assertTrue(encoder.acceptWay(way) > 0);
-        // calculate speed from estimated_distance and duration
-        assertEquals(60, encoder.getSpeed(encoder.handleFerryTags(way, 20, 30, 40)), 1e-1);
-    }
-
     @Test
     public void testSwapDir()
     {
diff --git a/core/src/test/java/com/graphhopper/util/shapes/GHPointTest.java b/core/src/test/java/com/graphhopper/util/shapes/GHPointTest.java
index 6adac39794..903cc17775 100644
--- a/core/src/test/java/com/graphhopper/util/shapes/GHPointTest.java
+++ b/core/src/test/java/com/graphhopper/util/shapes/GHPointTest.java
@@ -19,6 +19,7 @@
 package com.graphhopper.util.shapes;
 
 import org.junit.Test;
+
 import static org.junit.Assert.*;
 
 /**
@@ -27,7 +28,17 @@
  */
 public class GHPointTest
 {
-    @Test
+    private static final String EPSG_27700 = "EPSG:27700";
+    private static final String WGS_84 = "WGS84";
+    private static final String WGS_84_AS_EPSG = "EPSG:4326";
+    private static final String BNG = "BNG";
+    
+    /* latitude of BNG easting = 0 in WGS84*/
+	private static final double LAT_ANGLE = 49.76680727257757;
+	/* longitude of BNG northing = 0 in WGS84*/
+	private static final double LON_ANGLE = -7.557159804822196;
+
+	@Test
     public void testIsValid()
     {
         GHPoint instance = new GHPoint();
@@ -37,4 +48,39 @@ public void testIsValid()
         instance.lon = 1;
         assertTrue(instance.isValid());
     }
+    
+    @Test
+    public void testParse() {
+    	GHPoint parsedPoint = GHPoint.parse("1,2");
+    	assertEquals(1, parsedPoint.getLat(), 0);
+    	assertEquals(2, parsedPoint.getLon(), 0);
+    }
+    
+    @Test
+    public void testParseWithSrsDefault() {
+    	GHPoint parsedPoint = GHPoint.parse("1,2", WGS_84.toLowerCase());
+    	assertEquals(1, parsedPoint.getLat(), 0);
+    	assertEquals(2, parsedPoint.getLon(), 0);
+    }
+    
+    @Test
+    public void testParseWithSrsEpsg4326() {
+    	GHPoint parsedPoint = GHPoint.parse("1,2", WGS_84_AS_EPSG.toLowerCase());
+    	assertEquals(1, parsedPoint.getLat(), 0);
+    	assertEquals(2, parsedPoint.getLon(), 0);
+    }
+    
+    @Test
+    public void testParseWithSrsEpsg27700() {
+    	GHPoint parsedPoint = GHPoint.parse("0,0", EPSG_27700.toLowerCase());
+    	assertEquals(LAT_ANGLE, parsedPoint.getLat(), 0);
+    	assertEquals(LON_ANGLE, parsedPoint.getLon(), 0);
+    }
+    
+    @Test
+    public void testParseWithSrsBNG() {
+    	GHPoint parsedPoint = GHPoint.parse("0,0", BNG.toLowerCase());
+    	assertEquals(LAT_ANGLE, parsedPoint.getLat(), 0);
+    	assertEquals(LON_ANGLE, parsedPoint.getLon(), 0);
+    }
 }
diff --git a/web/src/main/java/com/graphhopper/http/ApiResource.java b/web/src/main/java/com/graphhopper/http/ApiResource.java
index 1ceafc8bdb..2a1142ddee 100644
--- a/web/src/main/java/com/graphhopper/http/ApiResource.java
+++ b/web/src/main/java/com/graphhopper/http/ApiResource.java
@@ -11,9 +11,9 @@
 {
 	ROUTE("route", new String[] { "point", "vehicle" }, new String[] { "point", "vehicle",
 			"locale", "instructions", "weighting", "algorithm", "points_encoded", "debug",
-			"pretty", "calc_points", "type", "avoidances", "private" }), NEAREST("nearest",
-					new String[] { "point" }, new String[] { "point" }), INFO("info", new String[] {},
-							new String[] {});
+			"pretty", "calc_points", "type", "avoidances", "private", "srs" }), NEAREST("nearest",
+					new String[] { "point"}, new String[] { "point", "srs" }), INFO("info", new String[] {},
+							new String[] {"srs"});
 
 	public String[] getMandatoryValues()
 	{
@@ -55,7 +55,19 @@ private ApiResource( String resourceName, String[] mandatoryValues, String[] val
 	public void checkAllRequestParameters( HttpServletRequest request )
 			throws MissingParameterException, NoSuchParameterException, InvalidParameterException
 	{
-		// Check if the mandatory parameter exists in the request
+		checkMandatoryParameters(request);
+		checkValidParameters(request);
+	}
+
+	/**
+	 *  Check if the mandatory parameter exists in the request
+	 * @param request
+	 * @throws MissingParameterException
+	 */
+	private void checkMandatoryParameters(HttpServletRequest request)
+			throws MissingParameterException {
+		if	(0==this.getMandatoryValues().length) 
+			return;
 		String value = this.getMandatoryValues()[0];
 		boolean mandatoryValueExists = checkMandatoryValue(request, value);
 		if (mandatoryValueExists && this.getMandatoryValues().length > 1)
@@ -67,9 +79,6 @@ public void checkAllRequestParameters( HttpServletRequest request )
 		{
 			throw new MissingParameterException(value);
 		}
-
-		// Now check for all the valid parameters for the resource
-		checkValidParameters(request);
 	}
 
 	/**
diff --git a/web/src/main/java/com/graphhopper/http/DefaultModule.java b/web/src/main/java/com/graphhopper/http/DefaultModule.java
index cc922ece3c..97485a97d3 100644
--- a/web/src/main/java/com/graphhopper/http/DefaultModule.java
+++ b/web/src/main/java/com/graphhopper/http/DefaultModule.java
@@ -78,9 +78,13 @@ protected void configure()
             boolean internalErrorsAllowed = args.getBool("web.detailedErrors", false);
             if (!internalErrorsAllowed)
                 logger.info("detailed errors disabled");
+            
+            String defaultSrs = args.get("web.defaultSrs", "EPSG:4326");
+            logger.info("Default SRS=" + defaultSrs);
 
             bind(Boolean.class).annotatedWith(Names.named("jsonpAllowed")).toInstance(jsonpAllowed);
             bind(Boolean.class).annotatedWith(Names.named("internalErrorsAllowed")).toInstance(internalErrorsAllowed);
+            bind(String.class).annotatedWith(Names.named("defaultSrs")).toInstance(defaultSrs);
         } catch (Exception ex)
         {
             throw new IllegalStateException("Couldn't load graph", ex);
diff --git a/web/src/main/java/com/graphhopper/http/GHBaseServlet.java b/web/src/main/java/com/graphhopper/http/GHBaseServlet.java
index 117d67ebaa..7affd88b61 100644
--- a/web/src/main/java/com/graphhopper/http/GHBaseServlet.java
+++ b/web/src/main/java/com/graphhopper/http/GHBaseServlet.java
@@ -63,6 +63,10 @@
 	@Inject
 	@Named("internalErrorsAllowed")
 	protected boolean internalErrorsAllowed;
+	
+	@Inject
+	@Named("defaultSrs")
+	protected String defaultSRS = "EPSG:4326";
 
 	protected void writeJson( HttpServletRequest req, HttpServletResponse res, JSONObject json )
 			throws JSONException, IOException
@@ -181,10 +185,19 @@ protected double getDoubleParam( HttpServletRequest req, String string, double _
 			throws InvalidParameterException
 			{
 		String[] pointsAsStr = getParams(req, key);
+		String[] srs = getParams(req, "srs");
 		final List<GHPoint> infoPoints = new ArrayList<GHPoint>(pointsAsStr.length);
 		for (String str : pointsAsStr)
 		{
-			GHPoint point = GHPoint.parse(str);
+			GHPoint point;
+			String useSrs;
+			if(srs.length>0) 
+				useSrs = srs[0];
+			else 
+				useSrs = defaultSRS;
+			
+			point = GHPoint.parse(str,useSrs);
+			
 			if (point != null)
 			{
 				infoPoints.add(point);
@@ -194,7 +207,9 @@ protected double getDoubleParam( HttpServletRequest req, String string, double _
 				throw new InvalidParameterException(
 						"Point "
 								+ str
-								+ " is not a valid point. Point must be a comma separated coordinate in WGS84 projection.");
+								+ " is not a valid point. Point must be a comma separated coordinate in "
+								+ useSrs
+								+ " projection.");
 			}
 		}
 
diff --git a/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java b/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
index b6c0a56855..49acd5a1d5 100644
--- a/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
+++ b/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
@@ -101,6 +101,7 @@ public GHResponse getGHResponse( HttpServletRequest httpReq, HttpServletResponse
 		String prettyString = getParam(httpReq, "pretty", "true");
 		String avoidancesString = getParam(httpReq, "avoidances", null);
 		String noThroughAccessString = getParam(httpReq, "private", "true");
+		String srs = getParam(httpReq, "srs", "bng");
 
 		GHResponse ghRsp = null;
 		List<GHPoint> infoPoints = null;
diff --git a/web/src/main/java/com/graphhopper/http/UpdateServlet.java b/web/src/main/java/com/graphhopper/http/UpdateServlet.java
index e299c368cf..607928cd7a 100644
--- a/web/src/main/java/com/graphhopper/http/UpdateServlet.java
+++ b/web/src/main/java/com/graphhopper/http/UpdateServlet.java
@@ -167,9 +167,14 @@ protected String errorsToXML( List<Throwable> list )
 		for (String str : pointsAsStr)
 		{
 			String[] fromStrs = str.split(",");
+			String[] srs = getParams(req, "srs");
 			if (fromStrs.length == 2)
 			{
-				GHPoint place = GHPoint.parse(str);
+				GHPoint place;
+				if(srs.length>0)
+					place = GHPoint.parse(str, srs[0]);
+				else 
+					place = GHPoint.parse(str, defaultSRS);
 				if (place != null)
 					infoPoints.add(place);
 			}
diff --git a/web/src/main/webapp/index.html b/web/src/main/webapp/index.html
index 5481be6886..286aea997a 100644
--- a/web/src/main/webapp/index.html
+++ b/web/src/main/webapp/index.html
@@ -50,6 +50,12 @@
                     </div>
                      <div class="collapse">
                     <form name="routeoptions">
+                    	<table>
+                            <tr>
+                                <th>Projection</th>
+                            </tr>
+                    	</table>
+                    	<input class="srs" name="srs" type="text" value="WGS84">
                         <table>
                             <tr>
                                 <th>Route Option</th>
diff --git a/web/src/main/webapp/js/ghrequest.js b/web/src/main/webapp/js/ghrequest.js
index 61f18979e3..a4ea6a6454 100644
--- a/web/src/main/webapp/js/ghrequest.js
+++ b/web/src/main/webapp/js/ghrequest.js
@@ -460,9 +460,12 @@ GHRequest.prototype.createPath = function (url) {
     } else {
     	this.access = "true";
     }
+    this.srs = document.routeoptions.srs.value;
     
     if (this.weighting && this.weighting !== "fastest")
         url += "&weighting=" + this.weighting;
+    if (this.srs && this.srs != "BNG")
+    	url += "&srs=" + this.srs;
     if (this.locale && this.locale !== "en")
         url += "&locale=" + this.locale;
     // dijkstra, dijkstrabi, astar, astarbi
diff --git a/web/src/test/java/com/graphhopper/http/ApiResourceTest.java b/web/src/test/java/com/graphhopper/http/ApiResourceTest.java
index 3f58bd6568..eae97fbc8c 100644
--- a/web/src/test/java/com/graphhopper/http/ApiResourceTest.java
+++ b/web/src/test/java/com/graphhopper/http/ApiResourceTest.java
@@ -3,6 +3,9 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.fail;
 import static org.mockito.Mockito.when;
+import static com.graphhopper.http.ApiResource.ROUTE;
+import static com.graphhopper.http.ApiResource.NEAREST;
+import static com.graphhopper.http.ApiResource.INFO;
 
 import java.util.Collections;
 import java.util.HashMap;
@@ -25,16 +28,15 @@
 	@Mock
 	HttpServletRequest request;
 
-	ApiResource apiResource = ApiResource.ROUTE;
 
 	@Test
-	public void testPointIsMandatoryParam() throws NoSuchParameterException,
+	public void testPointIsMandatoryParamForRoute() throws NoSuchParameterException,
 	        InvalidParameterException
 	{
 		when(request.getParameterMap()).thenReturn(Collections.<String, String[]> emptyMap());
 		try
 		{
-			apiResource.checkAllRequestParameters(request);
+			ROUTE.checkAllRequestParameters(request);
 			fail("No exception thrown");
 		} catch (MissingParameterException mpe)
 		{
@@ -43,7 +45,7 @@ public void testPointIsMandatoryParam() throws NoSuchParameterException,
 	}
 
 	@Test
-	public void testVehicleIsMandatoryParam() throws NoSuchParameterException,
+	public void testVehicleIsMandatoryParamForRoute() throws NoSuchParameterException,
 	        InvalidParameterException
 	{
 		Map<String, String[]> paramWithPoint = new HashMap<>();
@@ -51,7 +53,7 @@ public void testVehicleIsMandatoryParam() throws NoSuchParameterException,
 		when(request.getParameterMap()).thenReturn(paramWithPoint);
 		try
 		{
-			apiResource.checkAllRequestParameters(request);
+			ROUTE.checkAllRequestParameters(request);
 			fail("No exception thrown");
 		} catch (MissingParameterException mpe)
 		{
@@ -60,7 +62,7 @@ public void testVehicleIsMandatoryParam() throws NoSuchParameterException,
 	}
 
 	@Test
-	public void testAllMandatoryAndAllValidParameters()
+	public void testAllMandatoryAndAllValidParametersForRoute()
 	{
 		Map<String, String[]> allParameters = new HashMap<>();
 		// mandatory
@@ -78,10 +80,11 @@ public void testAllMandatoryAndAllValidParameters()
 		allParameters.put("type", new String[] { "x" });
 		allParameters.put("avoidances", new String[] { "x" });
 		allParameters.put("private", new String[] { "x" });
+		allParameters.put("srs", new String[] {"x"});
 		when(request.getParameterMap()).thenReturn(allParameters);
 		try
 		{
-			apiResource.checkAllRequestParameters(request);
+			ROUTE.checkAllRequestParameters(request);
 		} catch (MissingParameterException | NoSuchParameterException | InvalidParameterException e)
 		{
 			fail(e.getMessage());
@@ -90,7 +93,7 @@ public void testAllMandatoryAndAllValidParameters()
 	}
 
 	@Test
-	public void testAllMandatoryAllValidParametersAndIncorrectOnes()
+	public void testAllMandatoryAllValidParametersAndIncorrectOnesForRoute()
 	{
 		Map<String, String[]> allParameters = new HashMap<>();
 		// mandatory
@@ -108,21 +111,96 @@ public void testAllMandatoryAllValidParametersAndIncorrectOnes()
 		allParameters.put("type", new String[] { "x" });
 		allParameters.put("avoidances", new String[] { "x" });
 		allParameters.put("private", new String[] { "x" });
+		allParameters.put("srs", new String[] { "x" });
 		// incorrect
 		allParameters.put("bogus", new String[] { "x" });
 		when(request.getParameterMap()).thenReturn(allParameters);
 		try
 		{
-			apiResource.checkAllRequestParameters(request);
+			ROUTE.checkAllRequestParameters(request);
 		} catch (MissingParameterException | InvalidParameterException exception)
 		{
 			fail(exception.getMessage());
 		} catch (NoSuchParameterException e)
 		{
 			assertEquals(
-			        "Parameter bogus is not a valid parameter for resource route. Valid parameters for requested resource are point, vehicle, locale, instructions, weighting, algorithm, points_encoded, debug, pretty, calc_points, type, avoidances, private.",
+			        "Parameter bogus is not a valid parameter for resource route. Valid parameters for requested resource are point, vehicle, locale, instructions, weighting, algorithm, points_encoded, debug, pretty, calc_points, type, avoidances, private, srs.",
 			        e.getMessage());
 		}
 	}
+	
+	@Test
+	public void testPointMandatoryForNearest() throws NoSuchParameterException, InvalidParameterException
+	{
+		Map<String, String[]> allParameters = new HashMap<>();
+		allParameters.put("srs", new String[] { "0" });
+		when(request.getParameterMap()).thenReturn(allParameters);
+		try
+		{
+			NEAREST.checkAllRequestParameters(request);
+			fail("No exception thrown when manadatory parameter point not present");
+		} catch (MissingParameterException mpe)
+		{
+			assertEquals("No point parameter provided.", mpe.getMessage());
+		}
+	}
+	
+	@Test
+	public void testAllMandatoryAndAllValidParametersForNearest()
+	{
+		Map<String, String[]> allParameters = new HashMap<>();
+		// mandatory
+		allParameters.put("point", new String[] { "0" });
+		// valid
+		allParameters.put("srs", new String[] { "x" });
+		when(request.getParameterMap()).thenReturn(allParameters);
+		try
+		{
+			NEAREST.checkAllRequestParameters(request);
+		} catch (MissingParameterException | NoSuchParameterException | InvalidParameterException e)
+		{
+			fail(e.getMessage());
+		}
+	}
+	
+	@Test
+	public void testAllMandatoryAllValidParametersAndIncorrectOnesForNearest()
+	{
+		Map<String, String[]> allParameters = new HashMap<>();
+		// mandatory
+		allParameters.put("point", new String[] { "0" });
+		// valid
+		allParameters.put("srs", new String[] { "x" });
+		// incorrect
+		allParameters.put("bogus", new String[] { "x" });
+		when(request.getParameterMap()).thenReturn(allParameters);
+		try
+		{
+			NEAREST.checkAllRequestParameters(request);
+		} catch (MissingParameterException | InvalidParameterException exception)
+		{
+			fail(exception.getMessage());
+		} catch (NoSuchParameterException e)
+		{
+			assertEquals(
+			        "Parameter bogus is not a valid parameter for resource nearest. Valid parameters for requested resource are point, srs.",
+			        e.getMessage());
+		}
+	}
+	
+	
+	@Test
+	public void testNoMandatoryParametersForInfo() throws NoSuchParameterException, InvalidParameterException
+	{
+		Map<String, String[]> allParameters = new HashMap<>();
+		when(request.getParameterMap()).thenReturn(allParameters);
+		try
+		{
+			INFO.checkAllRequestParameters(request);
+		} catch (MissingParameterException mpe)
+		{
+			fail("No mandatory parameters");
+		}
+	}
 
 }
diff --git a/web/src/test/java/com/graphhopper/http/GraphHopperServletTest.java b/web/src/test/java/com/graphhopper/http/GraphHopperServletTest.java
index 14b45f2c1d..8f88489d3a 100644
--- a/web/src/test/java/com/graphhopper/http/GraphHopperServletTest.java
+++ b/web/src/test/java/com/graphhopper/http/GraphHopperServletTest.java
@@ -2,6 +2,7 @@
 
 import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.fail;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.anyString;
 import static org.mockito.Mockito.mock;
@@ -13,7 +14,6 @@
 import java.io.PrintWriter;
 import java.util.ArrayList;
 import java.util.Arrays;
-import java.util.Collections;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
@@ -47,6 +47,7 @@
 import com.graphhopper.util.InstructionList;
 import com.graphhopper.util.PointList;
 import com.graphhopper.util.shapes.BBox;
+import com.graphhopper.util.shapes.GHPoint;
 
 public class GraphHopperServletTest
 {
@@ -93,6 +94,7 @@
 	private PointList pointList;
 
 	private final String[] POINTS = { "50.728198,-3.534516", "50.726807,-3.530156" };
+	private final String[] BNG_POINTS = { "0,0", "1,-1" };
 	private final String UNPARSABLE_POINT = "50A.45";
 
 	private final String[] LOCALES = { "bg", "ca", "cz", "de_DE", "el", "en_US", "es", "fa", "fil",
@@ -143,6 +145,7 @@ protected void configure()
 				bind(Boolean.class).annotatedWith(Names.named("internalErrorsAllowed")).toInstance(
 				        false);
 				bind(Boolean.class).annotatedWith(Names.named("jsonpAllowed")).toInstance(false);
+				bind(String.class).annotatedWith(Names.named("defaultSrs")).toInstance("WGS84");
 			}
 		});
 
@@ -713,6 +716,84 @@ public void testGetGHResponseWithIncorrectAvoidances() throws MissingParameterEx
 		assertEquals(buildErrorMessageString(WRONG_AVOIDANCE, "avoidances", AVOIDANCES), ghResponse
 		        .getErrors().get(0).getMessage());
 	}
+	
+	@Test 
+	public void testGetPointsDefaultSrs() throws InvalidParameterException {
+		allParameters.put("point", POINTS);
+		allParameters.put("vehicle", new String[] { VEHICLES[0] });
+		allParameters.put("locale", new String[] { LOCALES[0] });
+
+		allParameters.put("avoidances", new String[] { WRONG_AVOIDANCE });
+		when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+		List<GHPoint> points = graphHopperServlet.getPoints(httpServletRequest, "point");
+		int idx = 0;
+		for (GHPoint ghPoint : points) {
+			assertEquals("Since using internal srs all points should match" , POINTS[idx++],ghPoint.toString());
+		}
+	}
+	
+	@Test 
+	public void testGetPointsModifiedDefaultSrs() throws InvalidParameterException {
+		allParameters.put("point", POINTS);
+		allParameters.put("vehicle", new String[] { VEHICLES[0] });
+		allParameters.put("locale", new String[] { LOCALES[0] });
+
+		allParameters.put("avoidances", new String[] { WRONG_AVOIDANCE });
+		when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+		graphHopperServlet.defaultSRS = "EPSG:27700";
+		List<GHPoint> points = graphHopperServlet.getPoints(httpServletRequest, "point");
+		int idx = 0;
+		String[] convertedPoints = new String[POINTS.length];
+		for (int i = 0; i < POINTS.length; i++) {
+			convertedPoints[i] = GHPoint.parse(POINTS[i], "EPSG:27700").toString();
+		}
+		
+		for (GHPoint ghPoint : points) {
+			assertEquals("Since using modified srs all points should match converted form" , convertedPoints[idx++],ghPoint.toString());
+		}
+	}
+	
+	@Test 
+	public void testGetPointsWithRequestSrs() throws InvalidParameterException {
+		allParameters.put("point", POINTS);
+		allParameters.put("vehicle", new String[] { VEHICLES[0] });
+		allParameters.put("locale", new String[] { LOCALES[0] });
+		allParameters.put("srs", new String[] {"EPSG:27700"});
+
+		allParameters.put("avoidances", new String[] { WRONG_AVOIDANCE });
+		when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+		List<GHPoint> points = graphHopperServlet.getPoints(httpServletRequest, "point");
+		int idx = 0;
+		String[] convertedPoints = new String[POINTS.length];
+		for (int i = 0; i < POINTS.length; i++) {
+			convertedPoints[i] = GHPoint.parse(POINTS[i], "EPSG:27700").toString();
+		}
+		
+		for (GHPoint ghPoint : points) {
+			assertEquals("Since using modified srs all points should match converted form" , convertedPoints[idx++],ghPoint.toString());
+		}
+	}
+	
+	@Test 
+	public void testGetPointsWithInvalidRequestSrs() {
+		allParameters.put("point", POINTS);
+		allParameters.put("vehicle", new String[] { VEHICLES[0] });
+		allParameters.put("locale", new String[] { LOCALES[0] });
+		String invalidSRS = "EPSG:UNKNOWN";
+		allParameters.put("srs", new String[] {invalidSRS});
+
+		allParameters.put("avoidances", new String[] { WRONG_AVOIDANCE });
+		when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+		try {
+			List<GHPoint> points = graphHopperServlet.getPoints(httpServletRequest, "point");
+			fail("Should have thrown error as srs is invalid");
+		} catch (InvalidParameterException ipe) {
+			assertEquals("Point " + POINTS[0]
+								+ " is not a valid point. Point must be a comma separated coordinate in "
+								+ invalidSRS
+								+ " projection.", ipe.getStatusMessage());
+		}
+	}
 
 	private void expectResponseBBox()
 	{
diff --git a/web/src/test/java/com/graphhopper/http/NearestServletTest.java b/web/src/test/java/com/graphhopper/http/NearestServletTest.java
index 5e279df020..fd2b082b8d 100644
--- a/web/src/test/java/com/graphhopper/http/NearestServletTest.java
+++ b/web/src/test/java/com/graphhopper/http/NearestServletTest.java
@@ -73,6 +73,7 @@ protected void configure()
                 bind(Boolean.class).annotatedWith(Names.named("internalErrorsAllowed")).toInstance(
                         false);
                 bind(Boolean.class).annotatedWith(Names.named("jsonpAllowed")).toInstance(false);
+                bind(String.class).annotatedWith(Names.named("defaultSrs")).toInstance("WGS84");
             }
         });
 
