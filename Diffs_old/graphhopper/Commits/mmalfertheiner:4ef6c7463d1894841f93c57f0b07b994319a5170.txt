diff --git a/core/src/main/java/com/graphhopper/GraphHopper.java b/core/src/main/java/com/graphhopper/GraphHopper.java
index 1564cf6dcc..8c0b605b6d 100644
--- a/core/src/main/java/com/graphhopper/GraphHopper.java
+++ b/core/src/main/java/com/graphhopper/GraphHopper.java
@@ -1113,7 +1113,8 @@ public GHResponse route( GHRequest request )
             Path path = algo.calcPath(fromQResult.getClosestNode(), toQResult.getClosestNode());
 
             //Update time to profile of user
-            path.updateTime(request.getHints());
+            if(vehicle.equals("genbike"))
+                path.updateTime(request.getHints());
 
             if (path.getTime() < 0)
                 throw new RuntimeException("Time was negative. Please report as bug and include:" + request);
diff --git a/core/src/main/java/com/graphhopper/routing/util/BikeGenericFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/BikeGenericFlagEncoder.java
index 035cddb6e2..dddca860db 100644
--- a/core/src/main/java/com/graphhopper/routing/util/BikeGenericFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/BikeGenericFlagEncoder.java
@@ -171,12 +171,12 @@ protected BikeGenericFlagEncoder(int speedBits, double speedFactor, int maxTurnC
         setSurfaceSpeedFactor("ice", 0.5f);
         setSurfaceSpeedFactor("mud", 0.6f);
 
-        setWayTypeSpeed(WayType.PRIMARY_ROAD.getValue(), 18);
-        setWayTypeSpeed(WayType.SECONDARY_ROAD.getValue(), 18);
+        setWayTypeSpeed(WayType.MOTORWAY.getValue(), 18);
+        setWayTypeSpeed(WayType.ROAD.getValue(), 18);
         setWayTypeSpeed(WayType.TERTIARY_ROAD.getValue(), 18);
         setWayTypeSpeed(WayType.UNCLASSIFIED_PAVED.getValue(), 18);
         setWayTypeSpeed(WayType.UNCLASSIFIED_UNPAVED.getValue(), 12);
-        setWayTypeSpeed(WayType.SMALL_WAY_PAVED.getValue(), 18);
+        setWayTypeSpeed(WayType.SMALL_WAY_PAVED.getValue(), 16);
         setWayTypeSpeed(WayType.SMALL_WAY_UNPAVED.getValue(), 10);
         setWayTypeSpeed(WayType.TRACK_EASY.getValue(), 14);
         setWayTypeSpeed(WayType.TRACK_MIDDLE.getValue(), 12);
@@ -214,8 +214,6 @@ protected BikeGenericFlagEncoder(int speedBits, double speedFactor, int maxTurnC
         addPushingSection("pedestrian");
         addPushingSection("steps");
 
-        avoidHighwayTags.add("motorway");
-        avoidHighwayTags.add("motorway_link");
 
         /*setCyclingNetworkPreference("icn", 1);
         setCyclingNetworkPreference("ncn", 2);
@@ -420,7 +418,7 @@ public long handleWayTags( OSMWay way, long allowed, long relationFlags )
             encoded = handleFerryTags(way,
                     getWayTypeSpeed(WayType.SMALL_WAY_UNPAVED.getValue()),
                     getWayTypeSpeed(WayType.SMALL_WAY_PAVED.getValue()),
-                    getWayTypeSpeed(WayType.PRIMARY_ROAD.getValue()));
+                    getWayTypeSpeed(WayType.ROAD.getValue()));
             encoded |= directionBitMask;
         }
         /*int priorityFromRelation = 0;
@@ -623,10 +621,10 @@ long handleBikeRelated( OSMWay way, long encoded, long partOfCycleRelation )
 
         if (isPushingSection && !(partOfCycleRelation > BicycleNetworkCode.FERRY.getValue()) || "steps".equals(highway) || "ice".equals(surfaceTag))
             wayType = WayType.PUSHING_SECTION;
-        else if ("primary".equals(highway) || "primary_link".equals(highway))
-            wayType = WayType.PRIMARY_ROAD;
-        else if ("secondary".equals(highway) || "secondary_link".equals(highway))
-            wayType = WayType.SECONDARY_ROAD;
+        else if ("motorway".equals(highway) || "motorway_link".equals(highway) || "trunk".equals(highway) || "trunk_link".equals(highway))
+            wayType = WayType.MOTORWAY;
+        else if ("primary".equals(highway) || "primary_link".equals(highway) || "secondary".equals(highway) || "secondary_link".equals(highway))
+            wayType = WayType.ROAD;
         else if ("tertiary".equals(highway) || "tertiary_link".equals(highway))
             wayType = WayType.TERTIARY_ROAD;
         else if ("unclassified".equals(highway)) {
@@ -806,8 +804,8 @@ protected long handleSpeed( OSMWay way, double speed, long encoded )
 
     protected enum WayType
     {
-        PRIMARY_ROAD(0),
-        SECONDARY_ROAD(1),
+        MOTORWAY(0),
+        ROAD(1),
         TERTIARY_ROAD(2),
         UNCLASSIFIED_PAVED(3),
         UNCLASSIFIED_UNPAVED(4),
diff --git a/core/src/main/java/com/graphhopper/routing/util/DynamicWeighting.java b/core/src/main/java/com/graphhopper/routing/util/DynamicWeighting.java
index 8e599ec7e0..06262cedf1 100644
--- a/core/src/main/java/com/graphhopper/routing/util/DynamicWeighting.java
+++ b/core/src/main/java/com/graphhopper/routing/util/DynamicWeighting.java
@@ -97,7 +97,9 @@ private double getUserPreference(EdgeIteratorState edgeState) {
         double incDistPercentage = flagEncoder.getDouble(edgeState.getFlags(), DynamicWeighting.INC_DIST_PERCENTAGE_KEY) / 100;
         double incDist2DSum = edgeState.getDistance() * incDistPercentage;
 
-        if(wayType == 13 || wayType == 14)
+        if(wayType == 0)
+            priority = PriorityCode.AVOID_AT_ALL_COSTS.getValue();
+        else if(wayType == 13 || wayType == 14)
             priority = PriorityCode.BEST.getValue();
         else if(wayType >= 10 && wayType <= 12) {
 
