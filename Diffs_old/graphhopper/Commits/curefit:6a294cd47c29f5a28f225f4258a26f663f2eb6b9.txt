diff --git a/graphhopper.sh b/graphhopper.sh
index afd71558b1..5fecf5e88c 100755
--- a/graphhopper.sh
+++ b/graphhopper.sh
@@ -1,4 +1,4 @@
-#!/bin/sh
+#!/bin/bash
 (set -o igncr) 2>/dev/null && set -o igncr; # this comment is required for handling Windows cr/lf 
 # See StackOverflow answer http://stackoverflow.com/a/14607651
 
@@ -16,7 +16,25 @@ fi
 echo "## using java $vers from $JAVA_HOME"
 
 function printBashUsage {
-    echo "Usage"
+  echo "Usage:"
+  echo "-a | --action <action>    must be one the following actions:"
+  echo "     --action import      creates the graph cache only, used for later faster starts"
+  echo "     --action web         starts a local server for user access at localhost:8989 and API access at localhost:8989/route"
+  echo "     --action build       creates the graphhopper web JAR"
+  echo "     --action clean       removes all JARs, necessary if you need to use the latest source (e.g. after switching the branch etc)"
+  echo "     --action measurement does performance analysis of the current source version via random routes (Measurement class)"
+  echo "     --action torture     can be used to test real world routes via feeding graphhopper logs into a GraphHopper system (Torture class)"
+  echo "-c | --config <config>    specify the application configuration"
+  echo "-d | --run-background     run the application in background (detach)"
+  echo "-fd| --force-download     force the download of the OSM data file if needed"
+  echo "-h | --help               display this message"
+  echo "--host <host>             specify to which host the service should be bound"
+  echo "-i | --input <file>       path to the input map file or name of the file to download"
+  echo "--jar <file>              specify the jar file (useful if you want to reuse this script for custom builds)"
+  echo "-o | --graph-cache <dir>  directory for graph cache output"
+  echo "-p | --profiles <string>  comma separated list of vehicle profiles"
+  echo "--port <port>             start web server at specific port"
+  echo "-v | --version            print version"
 }
 
 VERSION=$(grep "<name>" -A 1 pom.xml | grep version | cut -d'>' -f2 | cut -d'<' -f1)
@@ -134,33 +152,43 @@ function ensureMaven {
   fi
 }
 
+function execMvn {
+  "$MAVEN_HOME/bin/mvn" "$@" > /tmp/graphhopper-compile.log
+  returncode=$?
+  if [[ $returncode != 0 ]] ; then
+    echo "## compilation of parent failed"
+    cat /tmp/graphhopper-compile.log
+    exit $returncode
+  fi
+}
 
 function packageJar {
   if [ ! -f "$JAR" ]; then
     echo "## building graphhopper jar: $JAR"
     echo "## using maven at $MAVEN_HOME"
-    echo "## executing maven build"
     mvn --projects web -am -DskipTests=true package
   else
     echo "## existing jar found $JAR"
   fi
-  echo "## Done maven build"
 }
 
 ensureMaven
 
 ## now handle actions which do not take an OSM file
-if [ "$ACTION" = "clean" ]; then
+if [ "$ACTION" = "clean" ] || [ "$ACTION" = "rebuild" ]; then
  rm -rf ./android/app/target
  rm -rf ./*/target
  rm -rf ./target
- exit
+fi
 
-elif [ "$ACTION" = "build" ]; then
+if [ "$ACTION" = "build" ] || [ "$ACTION" = "rebuild" ]; then
  packageJar
- exit  
 fi
- 
+
+if [ "$ACTION" = "build" ] || [ "$ACTION" = "clean" ] || [ "$ACTION" = "rebuild" ]; then
+ exit
+fi
+
 if [ "$FILE" = "" ]; then
   echo -e "no file specified?"
   printBashUsage
@@ -240,7 +268,7 @@ elif [ "$ACTION" = "import" ]; then
          $GH_IMPORT_OPTS -jar "$JAR" import $CONFIG
 
 elif [ "$ACTION" = "torture" ]; then
-  execMvn --projects tools -am -DskipTests clean package
+  mvn --projects tools -am -DskipTests clean package
   JAR=tools/target/graphhopper-tools-$VERSION-jar-with-dependencies.jar
   "$JAVA" $JAVA_OPTS -cp "$JAR" com.graphhopper.tools.QueryTorture $@
 
@@ -249,7 +277,7 @@ elif [ "$ACTION" = "measurement" ]; then
        prepare.min_network_size=10000 prepare.min_oneway_network_size=10000"
 
  function startMeasurement {
-    execMvn --projects tools -am -DskipTests clean package
+    mvn --projects tools -am -DskipTests clean package
     COUNT=5000
     commit_info=$(git log -n 1 --pretty=oneline)
     JAR=tools/target/graphhopper-tools-$VERSION-jar-with-dependencies.jar
