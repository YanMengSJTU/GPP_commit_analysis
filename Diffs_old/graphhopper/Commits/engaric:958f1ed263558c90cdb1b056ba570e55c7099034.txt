diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperJSONParser.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperJSONParser.java
index 6b2107c282..d6edcb66f4 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperJSONParser.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperJSONParser.java
@@ -106,6 +106,17 @@ public JsonElement getJSONCoordinates(JsonArray paths, int coordinateIndex) {
 
 	public void parse(String routeType,String avoidance, String vehicle, String[] string) {
 
+		
+		String route="";
+		if (routeType.split(",").length>1)
+		{
+		 vehicle=routeType.split(",")[0];
+		 route=routeType.split(",")[1];
+		}
+		else
+		{
+			vehicle=routeType;
+		}
 		// Set up the URL
 		String jsonResponse = "";
 		String coordinateString = "";
diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
index b5fe5c042b..c02f6284b9 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
@@ -41,7 +41,7 @@ public void getRoute(String pointA, String pointB, String routeType)
 		switch (testON.toUpperCase()) {
 		case "WEB":
 
-			graphUiUtil.getRouteFromUI(routeType, "",pointA, pointB);
+			graphUiUtil.getRouteFromUI(routeType, "", pointA, pointB);
 			break;
 		case "SERVICE":
 			graphUiUtil.getRouteFromService(routeType, pointA, pointB);
@@ -50,9 +50,9 @@ public void getRoute(String pointA, String pointB, String routeType)
 
 			if (pointA.split(",").length == 2) {
 				graphUiUtil.getRouteFromService(routeType, pointA, pointB);
-				graphUiUtil.getRouteFromUI(routeType,"", pointA, pointB);
+				graphUiUtil.getRouteFromUI(routeType, "", pointA, pointB);
 			} else {
-				graphUiUtil.getRouteFromUI(routeType, "",pointA, pointB);
+				graphUiUtil.getRouteFromUI(routeType, "", pointA, pointB);
 			}
 
 			break;
@@ -65,7 +65,7 @@ public void getRoute(String pointA, String pointB, String routeType)
 	public void getRouteWithAvoidance(String pointA, String pointB,
 			String routeType, String avoidance) throws InterruptedException {
 		String graphHopperWebUrl;
-		avoidance= avoidance.toLowerCase().trim();
+		avoidance = avoidance.toLowerCase().trim();
 		if (IntegrationTestProperties.getTestPropertyBool("viaApigee")) {
 			graphHopperWebUrl = IntegrationTestProperties
 					.getTestProperty("graphHopperWebUrlViaApigee");
@@ -81,19 +81,22 @@ public void getRouteWithAvoidance(String pointA, String pointB,
 		switch (testON.toUpperCase()) {
 		case "WEB":
 
-			graphUiUtil.getRouteFromUI(routeType,avoidance, pointA, pointB);
+			graphUiUtil.getRouteFromUI(routeType, avoidance, pointA, pointB);
 			break;
 		case "SERVICE":
-			graphUiUtil.getRouteFromServiceWithAvoidance(routeType, avoidance, pointA,
-					pointB);
+			graphUiUtil.getRouteFromServiceWithAvoidance(routeType, avoidance,
+					pointA, pointB);
 			break;
 		default:
 
 			if (pointA.split(",").length == 2) {
-				graphUiUtil.getRouteFromServiceWithAvoidance(routeType, avoidance,pointA, pointB);
-				graphUiUtil.getRouteFromUI(routeType,avoidance, pointA, pointB);
+				graphUiUtil.getRouteFromServiceWithAvoidance(routeType,
+						avoidance, pointA, pointB);
+				graphUiUtil
+						.getRouteFromUI(routeType, avoidance, pointA, pointB);
 			} else {
-				graphUiUtil.getRouteFromUI(routeType,avoidance, pointA, pointB);
+				graphUiUtil
+						.getRouteFromUI(routeType, avoidance, pointA, pointB);
 			}
 
 			break;
@@ -122,7 +125,7 @@ public void getRoute(String pointA, String pointB, String routeType,
 		switch (testON.toUpperCase()) {
 		case "WEB":
 
-			graphUiUtil.getRouteFromUI(routeType,"",pointA, pointB, pointC);
+			graphUiUtil.getRouteFromUI(routeType, "", pointA, pointB, pointC);
 			break;
 		case "SERVICE":
 			graphUiUtil.getRouteFromService(routeType, pointA, pointB, pointC);
@@ -132,9 +135,11 @@ public void getRoute(String pointA, String pointB, String routeType,
 			if (pointA.split(",").length == 2) {
 				graphUiUtil.getRouteFromService(routeType, pointA, pointB,
 						pointC);
-				graphUiUtil.getRouteFromUI(routeType,"", pointA, pointB, pointC);
+				graphUiUtil.getRouteFromUI(routeType, "", pointA, pointB,
+						pointC);
 			} else {
-				graphUiUtil.getRouteFromUI(routeType,"", pointA, pointB, pointC);
+				graphUiUtil.getRouteFromUI(routeType, "", pointA, pointB,
+						pointC);
 			}
 
 			break;
@@ -142,11 +147,11 @@ public void getRoute(String pointA, String pointB, String routeType,
 		}
 
 	}
-	
-	
+
 	@Given("^I request a route between \"([^\"]*)\" and \"([^\"]*)\" as a \"([^\"]*)\" from RoutingAPI and avoid \"([^\"]*)\" via \"([^\"]*)\"$")
-	public void getRouteWithAvoidances(String pointA, String pointB, String routeType,String avoidance,
-			String pointC) throws InterruptedException {
+	public void getRouteWithAvoidances(String pointA, String pointB,
+			String routeType, String avoidance, String pointC)
+			throws InterruptedException {
 		String graphHopperWebUrl;
 
 		if (IntegrationTestProperties.getTestPropertyBool("viaApigee")) {
@@ -164,18 +169,21 @@ public void getRouteWithAvoidances(String pointA, String pointB, String routeTyp
 		switch (testON.toUpperCase()) {
 		case "WEB":
 
-			graphUiUtil.getRouteFromUI(routeType,"",pointA, pointB, pointC);
+			graphUiUtil.getRouteFromUI(routeType, "", pointA, pointB, pointC);
 			break;
 		case "SERVICE":
-			graphUiUtil.getRouteFromServiceWithAvoidance(routeType, avoidance,pointA, pointB, pointC);
+			graphUiUtil.getRouteFromServiceWithAvoidance(routeType, avoidance,
+					pointA, pointB, pointC);
 			break;
 		default:
 
 			if (pointA.split(",").length == 2) {
-				graphUiUtil.getRouteFromServiceWithAvoidance(routeType, avoidance,pointA, pointB, pointC);
+				graphUiUtil.getRouteFromServiceWithAvoidance(routeType,
+						avoidance, pointA, pointB, pointC);
 				graphUiUtil.getRouteFromUI(routeType, pointA, pointB, pointC);
 			} else {
-				graphUiUtil.getRouteFromUI(routeType,"", pointA, pointB, pointC);
+				graphUiUtil.getRouteFromUI(routeType, "", pointA, pointB,
+						pointC);
 			}
 
 			break;
@@ -184,8 +192,7 @@ public void getRouteWithAvoidances(String pointA, String pointB, String routeTyp
 
 	}
 
-	@Given("^I request a route between \"([^\"]*)\" and \"([^\"]*)\" as a \"([^\"]*)\" from RoutingAPI via \"([^\"]*)\" and \"([^\"]*)\"$")
-	public void getRoute(String pointA, String pointB, String routeType,
+	public void getRoute(String pointA, String pointB, String routeOptions,
 			String pointC, String pointD) throws InterruptedException {
 
 		graphUiUtil = new GraphHopperUIUtil(
@@ -196,23 +203,23 @@ public void getRoute(String pointA, String pointB, String routeType,
 		switch (testON.toUpperCase()) {
 		case "WEB":
 
-			graphUiUtil.getRouteFromUI(routeType, "",pointA, pointB, pointC,
-					pointD);
+			graphUiUtil.getRouteFromUI(routeOptions, "", pointA, pointB,
+					pointC, pointD);
 			break;
 		case "SERVICE":
-			graphUiUtil.getRouteFromService(routeType, pointA, pointB, pointC,
-					pointD);
+			graphUiUtil.getRouteFromService(routeOptions, pointA, pointB,
+					pointC, pointD);
 			break;
 		default:
 
 			if (pointA.split(",").length == 2) {
-				graphUiUtil.getRouteFromService(routeType, pointA, pointB,
+				graphUiUtil.getRouteFromService(routeOptions, pointA, pointB,
+						pointC, pointD);
+				graphUiUtil.getRouteFromUI(routeOptions, "", pointA, pointB,
 						pointC, pointD);
-				graphUiUtil.getRouteFromUI(routeType,"", pointA, pointB, pointC,
-						pointD);
 			} else {
-				graphUiUtil.getRouteFromUI(routeType, "",pointA, pointB, pointC,
-						pointD);
+				graphUiUtil.getRouteFromUI(routeOptions, "", pointA, pointB,
+						pointC, pointD);
 			}
 
 			break;
@@ -220,11 +227,11 @@ public void getRoute(String pointA, String pointB, String routeType,
 		}
 
 	}
-	
-	
+
 	@Given("^I request a route between \"([^\"]*)\" and \"([^\"]*)\" as a \"([^\"]*)\" from RoutingAPI and avoid \"([^\"]*)\" via \"([^\"]*)\" and \"([^\"]*)\"$")
-	public void getRouteWithAvoidances(String pointA, String pointB, String routeType,String avoidance,
-			String pointC, String pointD) throws InterruptedException {
+	public void getRouteWithAvoidances(String pointA, String pointB,
+			String routeType, String avoidance, String pointC, String pointD)
+			throws InterruptedException {
 
 		graphUiUtil = new GraphHopperUIUtil(
 				IntegrationTestProperties.getTestProperty("graphHopperWebUrl"));
@@ -234,23 +241,23 @@ public void getRouteWithAvoidances(String pointA, String pointB, String routeTyp
 		switch (testON.toUpperCase()) {
 		case "WEB":
 
-			graphUiUtil.getRouteFromUI(routeType, "",pointA, pointB, pointC,
+			graphUiUtil.getRouteFromUI(routeType, "", pointA, pointB, pointC,
 					pointD);
 			break;
 		case "SERVICE":
-			graphUiUtil.getRouteFromServiceWithAvoidance(routeType,avoidance, pointA, pointB, pointC,
-					pointD);
+			graphUiUtil.getRouteFromServiceWithAvoidance(routeType, avoidance,
+					pointA, pointB, pointC, pointD);
 			break;
 		default:
 
 			if (pointA.split(",").length == 2) {
-				graphUiUtil.getRouteFromServiceWithAvoidance(routeType,avoidance, pointA, pointB, pointC,
-						pointD);
-				graphUiUtil.getRouteFromUI(routeType,"", pointA, pointB, pointC,
-						pointD);
+				graphUiUtil.getRouteFromServiceWithAvoidance(routeType,
+						avoidance, pointA, pointB, pointC, pointD);
+				graphUiUtil.getRouteFromUI(routeType, "", pointA, pointB,
+						pointC, pointD);
 			} else {
-				graphUiUtil.getRouteFromUI(routeType, "",pointA, pointB, pointC,
-						pointD);
+				graphUiUtil.getRouteFromUI(routeType, "", pointA, pointB,
+						pointC, pointD);
 			}
 
 			break;
@@ -266,17 +273,16 @@ public void I_should_be_able_to_verify_the_waypoint_on_the_route_map(
 			String time, String distance) {
 
 		graphUiUtil.isWayPointonRouteMap(wayPointIndex, wayPoint_Coordinates,
-				wayPointDescription, azimuth, direction, time, distance,"");
+				wayPointDescription, azimuth, direction, time, distance, "");
 
 	}
-	
-	
-	
 
 	@Then("^I should be able to verify the waypoints on the route map:")
 	public void I_should_be_able_to_verify_the_waypoints_on_the_route_map(
 			List<Map<String, String>> wayPointList) {
-		Assert.assertTrue("Waypoint not found on the route where it was expected",graphUiUtil.isWayPointonRouteMap(wayPointList));
+		Assert.assertTrue(
+				"Waypoint not found on the route where it was expected",
+				graphUiUtil.isWayPointonRouteMap(wayPointList));
 
 	}
 
@@ -284,7 +290,9 @@ public void I_should_be_able_to_verify_the_waypoints_on_the_route_map(
 	public void I_should_be_able_to_verify_the_not_waypoints_on_the_route_map(
 			List<Map<String, String>> wayPointList) {
 
-		Assert.assertFalse("Waypoint found on the route where it was not expected",graphUiUtil.isWayPointonRouteMap(wayPointList));
+		Assert.assertFalse(
+				"Waypoint found on the route where it was not expected",
+				graphUiUtil.isWayPointonRouteMap(wayPointList));
 		// graphUiUtil.isWayPointNotonRouteMap(wayPointList);
 
 	}
diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
index 51ed38bf17..4d17465c4f 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
@@ -104,8 +104,19 @@ public void logout() {
 	 */
 	public void getRouteFromUI(String routeType, String avoidance,
 			String... points) throws InterruptedException {
+		String vehicle="";
+		String route="";
+		if (routeType.split(",").length>1)
+		{
+		 vehicle=routeType.split(",")[0];
+		 route=routeType.split(",")[1];
+		}
+		else
+		{
+			vehicle=routeType;
+		}
 
-		switch (routeType) {
+		switch (vehicle) {
 		case "car":
 			clickElement(ROUTE_TYPE_CAR);
 
@@ -122,6 +133,13 @@ public void getRouteFromUI(String routeType, String avoidance,
 
 		}
 
+		clickElement(settingsButton);
+		
+		if (route.equalsIgnoreCase("shortest"))
+		{
+			clickElement(shortest_RButton);
+		}
+		
 		for (int i = 0; i < points.length - 2; i++)
 
 		{
@@ -257,6 +275,7 @@ public void getRouteFromService(String routeType, String... points) {
 
 		else {
 
+
 			GPHJsonService.parse("json", "", routeType, points);
 		}
 
diff --git a/acceptancetesting/src/test/cucumber/routing.feature b/acceptancetesting/src/test/cucumber/routing.feature
index 341a660e1c..d6b49692ca 100644
--- a/acceptancetesting/src/test/cucumber/routing.feature
+++ b/acceptancetesting/src/test/cucumber/routing.feature
@@ -421,18 +421,18 @@ Feature: Verify a route from A to B
       | pointA              | pointB              | pointC             | pointD              | routetype |
       | 51.746075,-1.263972 | 52.289962,-1.604752 | 52.202814,0.051429 | 51.491412,-0.610276 | car       |
 
-  @Routing
+  @Routing @Current
   Scenario Outline: Verify  Route using 2 intermediate waypoints (Perth to Edinburgh via Stirling and Glasgow )
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI via "<pointC>" and "<pointD>"
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI via "<pointC>" and "<pointD>"
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco          | waypointdesc                                           | azimuth | direction | time   | distance |
       | 5             | 56.170837,-3.970499 | At roundabout, take exit 3 onto M9                     | 91.0    | E         | 142970 | 3961.4   |
       | 11            | 55.917381,-4.067178 | At roundabout, take exit 2 onto CUMBERNAULD ROAD (A80) | 156.0   | SE        | 175684 | 4636.2   |
       | 20            | 55.938772,-3.402452 | At roundabout, take exit 4 onto A8 (GLASGOW ROAD)      | 302.0   | NW        | 266985 | 7046.2   |
-      | 30            | 55.949621,-3.214174 | Turn right onto MELVILLE STREET (MELVILLE CRESCENT     | 51.0    | NE        | 2218   | 30.8     |
+      | 30            | 55.949621,-3.214174 | Turn right onto MELVILLE STREET (MELVILLE CRESCENT)     | 51.0    | NE        | 2218   | 30.8     |
 
     Examples: 
-      | pointA             | pointB              | pointC              | pointD              | routetype |
-      | 56.38721,-3.466273 | 56.136656,-3.970408 | 55.871665,-4.195067 | 55.950467,-3.208924 | car       |
+      | pointA             | pointB              | pointC              | pointD              | routeOptions |
+      | 56.38721,-3.466273 | 56.136656,-3.970408 | 55.871665,-4.195067 | 55.950467,-3.208924 | car,shortest       |
 
 
