diff --git a/core/src/main/java/com/graphhopper/GraphHopper.java b/core/src/main/java/com/graphhopper/GraphHopper.java
index 19dc5fed1d..850ddb8399 100644
--- a/core/src/main/java/com/graphhopper/GraphHopper.java
+++ b/core/src/main/java/com/graphhopper/GraphHopper.java
@@ -978,10 +978,12 @@ public Weighting createTurnWeighting( Weighting weighting, Graph graph, FlagEnco
 	
 	/**
 	 * Potentially wraps the specified weighting into a EscapePrivateWeighting instance.
+	 * @param includeNoThrough 
 	 */
-	public Weighting createEscapePrivateWeighting( Weighting weighting, Graph graph, FlagEncoder encoder )
+	public Weighting createEscapePrivateWeighting( Weighting weighting, GHRequest request , Graph graph, FlagEncoder encoder )
 	{
-		if (encoder.supports(EscapePrivateWeighting.class))
+		boolean includeNoThrough = checkForNoThroughAccess(request);
+		if (includeNoThrough && encoder.supports(EscapePrivateWeighting.class))
 			return new EscapePrivateWeighting(graph, encoder, weighting);
 		return weighting;
 	}
@@ -1097,7 +1099,7 @@ public GHResponse route( GHRequest request )
 			return Collections.emptyList();
 		}
 		weighting = createTurnWeighting(weighting, queryGraph, encoder);
-		weighting = createEscapePrivateWeighting(weighting, queryGraph, encoder);
+		weighting = createEscapePrivateWeighting(weighting, request, queryGraph, encoder);
 
 		double weightLimit = request.getHints().getDouble("defaultWeightLimit", defaultWeightLimit);
 		String algoStr = request.getAlgorithm().isEmpty() ? AlgorithmOptions.DIJKSTRA_BI : request
@@ -1139,6 +1141,11 @@ public GHResponse route( GHRequest request )
 		return paths;
 	}
 
+	private boolean checkForNoThroughAccess( GHRequest request )
+    {
+	    return request.getHints().getBool("private",true) || request.getVehicle().equals("emv");
+    }
+
 	protected LocationIndex createLocationIndex( Directory dir )
 	{
 		LocationIndexTree tmpIndex = new LocationIndexTree(graph.getBaseGraph(), dir);
diff --git a/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java b/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
index 2c005aa64f..5ab2336158 100644
--- a/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
+++ b/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
@@ -46,6 +46,7 @@
 import com.graphhopper.routing.util.AbstractFlagEncoder;
 import com.graphhopper.routing.util.EncoderDecorator;
 import com.graphhopper.routing.util.FlagEncoder;
+import com.graphhopper.routing.util.Weighting;
 import com.graphhopper.routing.util.WeightingMap;
 import com.graphhopper.util.Helper;
 import com.graphhopper.util.InstructionList;
@@ -100,6 +101,7 @@ public GHResponse getGHResponse( HttpServletRequest httpReq, HttpServletResponse
 		String debugString = getParam(httpReq, "debug", "true");
 		String prettyString = getParam(httpReq, "pretty", "true");
 		String avoidancesString = getParam(httpReq, "avoidances", null);
+		String noThroughAccessString = getParam(httpReq, "private", "true");
 
 		GHResponse ghRsp = null;
 		List<GHPoint> infoPoints;
@@ -137,6 +139,12 @@ public GHResponse getGHResponse( HttpServletRequest httpReq, HttpServletResponse
 				        AlgorithmOptions.DIJKSTRA, AlgorithmOptions.DIJKSTRA_BI,
 				        AlgorithmOptions.DIJKSTRA_ONE_TO_MANY);
 				ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg));
+			} else if (null != weighting
+			        && !new CaseInsensitiveStringListValidator().isValid(weighting,
+			                "fastest","shortest" ))
+			{
+				String errMesg = buildErrorMessageString(weighting, "weighting","fastest","shortest");
+				ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg));
 			} else if (!new BooleanValidator().isValid(instructionsString))
 			{
 				String errMesg = buildBooleanErrorMessageString(instructionsString, "instructions");
@@ -165,6 +173,11 @@ public GHResponse getGHResponse( HttpServletRequest httpReq, HttpServletResponse
 				        "Vehicle %s is not a valid vehicle. Valid vehicles are %s", vehicleStr,
 				        supported);
 				ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg));
+			} else if (!new BooleanValidator().isValid(noThroughAccessString)) 
+			{
+				String errMesg = buildBooleanErrorMessageString(noThroughAccessString, "private");
+				ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg));
+			
 			} else if (enableElevation && !hopper.hasElevation())
 			{
 				ghRsp = new GHResponse().addError(new InvalidParameterException(
@@ -234,8 +247,10 @@ public GHResponse getGHResponse( HttpServletRequest httpReq, HttpServletResponse
 			String logStr = httpReq.getQueryString() + " " + infoStr + " " + infoPoints + ", took:"
 			        + took + ", " + algoStr + ", " + weighting + ", " + vehicleStr;
 
-			if (ghRsp.hasErrors())
+			if (ghRsp.hasErrors()) {
 				logger.error(logStr + ", errors:" + ghRsp.getErrors());
+				logger.info("GraphHopperServlet.getGHResponse(ERROR)");
+			}
 			else
 				logger.info(logStr + ", distance: " + ghRsp.getDistance() + ", time:"
 				        + Math.round(ghRsp.getTime() / 60000f) + "min, points:"
@@ -253,6 +268,7 @@ public GHResponse getGHResponse( HttpServletRequest httpReq, HttpServletResponse
 			} else
 			{
 				String type = getParam(httpReq, "type", "json");
+				System.err.println("TYPE:" + type) ;
 				if (!"json".equalsIgnoreCase(type)
 				        || (!"jsonp".equalsIgnoreCase(type) && jsonpAllowed))
 				{
@@ -261,6 +277,8 @@ public GHResponse getGHResponse( HttpServletRequest httpReq, HttpServletResponse
 					errorMessage += jsonpAllowed ? "JSON, GPX or JSONP." : "GPX or JSON.";
 					ghRsp.addError(new InvalidParameterException(errorMessage));
 				}
+				logger.info("GraphHopperServlet.getGHResponse("+ enableInstructions
+						+ ")");
 				Map<String, Object> map = createJson(ghRsp, calcPoints, pointsEncoded,
 				        enableElevation, enableInstructions);
 				Object infoMap = map.get("info");
diff --git a/web/src/test/java/com/graphhopper/http/GraphHopperServletTest.java b/web/src/test/java/com/graphhopper/http/GraphHopperServletTest.java
index 6d06064440..14b45f2c1d 100644
--- a/web/src/test/java/com/graphhopper/http/GraphHopperServletTest.java
+++ b/web/src/test/java/com/graphhopper/http/GraphHopperServletTest.java
@@ -2,7 +2,6 @@
 
 import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;
 import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.anyString;
 import static org.mockito.Mockito.mock;
@@ -12,7 +11,9 @@
 
 import java.io.IOException;
 import java.io.PrintWriter;
+import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.Collections;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
@@ -25,6 +26,8 @@
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
+import org.mockito.ArgumentCaptor;
+import org.mockito.Matchers;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
 
@@ -41,597 +44,699 @@
 import com.graphhopper.routing.util.EncoderDecorator;
 import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.storage.GraphStorage;
+import com.graphhopper.util.InstructionList;
+import com.graphhopper.util.PointList;
+import com.graphhopper.util.shapes.BBox;
 
 public class GraphHopperServletTest
 {
 
-    private Injector injector;
+	private static final String[] BOOLEAN_PARAM_VALS = { "true", "false" };
 
-    @Mock
-    HttpServletRequest httpServletRequest;
+	private Injector injector;
 
-    @Mock
-    HttpServletResponse httpServletResponse;
+	@Mock
+	HttpServletRequest httpServletRequest;
 
-    Map<String, String[]> allParameters;
+	@Mock
+	HttpServletResponse httpServletResponse;
 
-    GraphHopperServlet graphHopperServlet;
+	Map<String, String[]> allParameters;
 
-    GHResponse value = new GHResponse();
+	GraphHopperServlet graphHopperServlet;
 
-    @Mock
-    private GraphHopper graphHopper;
+	@Mock
+	GHResponse response;
 
-    @Mock
-    private EncodingManager encodingManager;
+	@Mock
+	private GraphHopper graphHopper;
 
-    @Mock
-    private AbstractFlagEncoder flagEncoder;
-
-    @Mock
-    private GraphStorage graphStorage;
-
-    @Mock
-    private List<EncoderDecorator> encoderDecorators;
-
-    @Mock
-    private Iterator<EncoderDecorator> iterator;
-
-    @Mock
-    private AbstractAvoidanceDecorator abstractAvoidanceDecorator;
-
-    private final String[] POINTS = { "50.728198,-3.534516", "50.726807,-3.530156" };
-    private final String UNPARSABLE_POINT = "50A.45";
-
-    private final String[] LOCALES = { "bg", "ca", "cz", "de_DE", "el", "en_US", "es", "fa", "fil",
-            "fi", "fr", "gl", "he", "hu_HU", "it", "ja", "ne", "nl", "pl_PL", "pt_BR", "pt_PT",
-            "ro", "ru", "si", "sk", "sv_SE", "tr", "uk", "vi_VI", "zh_CN", "en_GB" };
-    private final String WRONG_LOCALE = "kl_KL";
-
-    private final String[] ALGORITHMS = { AlgorithmOptions.ASTAR, AlgorithmOptions.ASTAR_BI,
-            AlgorithmOptions.DIJKSTRA, AlgorithmOptions.DIJKSTRA_BI,
-            AlgorithmOptions.DIJKSTRA_ONE_TO_MANY };
-    private final String WRONG_ALGORITHM = "dekker";
-
-    private final String[] VEHICLES = { "car", "bike", "foot" };
-    private final String WRONG_VEHICLE = "flying_carpet";
-
-    private final String[] INSTRUCTIONS = { "false" }, POINTS_ENCODED = { "true", "false" },
-            DEBUG = { "true", "false" }, PRETTY = { "true", "false" }, CALC_POINTS = { "true",
-                    "false" };
-    private final String WRONG_INSTRUCTION = "uncertain";
-    private final String WRONG_POINTS_ENCODED = "uncertain";
-    private final String WRONG_DEBUG = "uncertain";
-    private final String WRONG_PRETTY = "uncertain";
-    private final String WRONG_CALC_POINTS = "uncertain";
-
-    private final String[] WEIGHTINGS = { "fastest", "shortest" };
-    private final String WRONG_WEIGHTING = "slowest";
-
-    private final String[] AVOIDANCES = { "aroad", "boulders", "cliff", "inlandwater", "marsh",
-            "quarryorpit", "scree", "rock", "mud", "sand", "shingle", "spoil", "tidalwater" };
-    private final String WRONG_AVOIDANCE = "zxcv";
-
-    private final String[] TYPES = { "json" };
-    private final String WRONG_TYPE = "pdf";
-
-    @Before
-    public void setUp() throws Exception
-    {
-        MockitoAnnotations.initMocks(this);
-        injector = Guice.createInjector(new AbstractModule()
-        {
-            @Override
-            protected void configure()
-            {
-                bind(GraphHopper.class).toInstance(graphHopper);
-                bind(Boolean.class).annotatedWith(Names.named("internalErrorsAllowed")).toInstance(
-                        false);
-                bind(Boolean.class).annotatedWith(Names.named("jsonpAllowed")).toInstance(false);
-            }
-        });
-
-        graphHopperServlet = injector.getInstance(GraphHopperServlet.class);
-        when(httpServletResponse.getWriter()).thenReturn(mock(PrintWriter.class));
-        allParameters = new HashMap<>();
-        when(graphHopper.getEncodingManager()).thenReturn(encodingManager);
-        when(graphHopper.hasElevation()).thenReturn(false);
-
-        when(encodingManager.supports(anyString())).thenReturn(true);
-        when(encodingManager.getEncoder(anyString())).thenReturn(flagEncoder);
-        when(flagEncoder.toString()).thenReturn("unknown");
-
-        when(graphHopper.route(any(GHRequest.class))).thenReturn(value);
-
-    }
-
-    @After
-    public void tearDown() throws Exception
-    {
-        injector = null;
-    }
-
-    private String buildErrorMessageString( String paramValue, String paramName,
-            List<String> validValues )
-    {
-        StringBuilder errMesg = new StringBuilder(paramValue)
-                .append(" is not a valid value for parameter ").append(paramName)
-                .append(". Valid values are ");
-        for (int i = 0; i < validValues.size(); i++)
-        {
-            String validStr = validValues.get(i);
-            if (i == validValues.size() - 1)
-            {
-                errMesg.append(" or ");
-            }
-            errMesg.append(validStr);
-            if (i < validValues.size() - 2)
-            {
-                errMesg.append(", ");
-            }
-        }
-        return errMesg.toString();
-    }
-
-    private String buildErrorMessageString( String paramValue, String paramName,
-            String... validValues )
+	@Mock
+	private EncodingManager encodingManager;
+
+	@Mock
+	private AbstractFlagEncoder flagEncoder;
+
+	@Mock
+	private GraphStorage graphStorage;
+
+	@Mock
+	private List<EncoderDecorator> encoderDecorators;
+
+	@Mock
+	private Iterator<EncoderDecorator> iterator;
+
+	@Mock
+	private AbstractAvoidanceDecorator abstractAvoidanceDecorator;
+
+	@Mock
+	private PointList pointList;
+
+	private final String[] POINTS = { "50.728198,-3.534516", "50.726807,-3.530156" };
+	private final String UNPARSABLE_POINT = "50A.45";
+
+	private final String[] LOCALES = { "bg", "ca", "cz", "de_DE", "el", "en_US", "es", "fa", "fil",
+	        "fi", "fr", "gl", "he", "hu_HU", "it", "ja", "ne", "nl", "pl_PL", "pt_BR", "pt_PT",
+	        "ro", "ru", "si", "sk", "sv_SE", "tr", "uk", "vi_VI", "zh_CN", "en_GB" };
+	private final String WRONG_LOCALE = "kl_KL";
+
+	private final String[] ALGORITHMS = { AlgorithmOptions.ASTAR, AlgorithmOptions.ASTAR_BI,
+	        AlgorithmOptions.DIJKSTRA, AlgorithmOptions.DIJKSTRA_BI,
+	        AlgorithmOptions.DIJKSTRA_ONE_TO_MANY };
+	private final String WRONG_ALGORITHM = "dekker";
+
+	private final String[] VEHICLES = { "car", "bike", "foot" };
+	private final String WRONG_VEHICLE = "flying_carpet";
+
+	private final String[] INSTRUCTIONS = BOOLEAN_PARAM_VALS;
+	private final String[] POINTS_ENCODED = BOOLEAN_PARAM_VALS;
+	private final String[] DEBUG = BOOLEAN_PARAM_VALS;
+	private final String[] PRETTY = BOOLEAN_PARAM_VALS;
+	private final String[] CALC_POINTS = BOOLEAN_PARAM_VALS;
+
+	private final String WRONG_INSTRUCTION = "uncertain";
+	private final String WRONG_POINTS_ENCODED = "uncertain";
+	private final String WRONG_DEBUG = "uncertain";
+	private final String WRONG_PRETTY = "uncertain";
+	private final String WRONG_CALC_POINTS = "uncertain";
+
+	private final String[] WEIGHTINGS = { "fastest", "shortest" };
+	private final String WRONG_WEIGHTING = "slowest";
+
+	private final String[] AVOIDANCES = { "aroad", "boulders", "cliff", "inlandwater", "marsh",
+	        "quarryorpit", "scree", "rock", "mud", "sand", "shingle", "spoil", "tidalwater" };
+	private final String WRONG_AVOIDANCE = "zxcv";
+
+	private final String[] TYPES = { "json" };
+	private final String WRONG_TYPE = "pdf";
+
+	@Before
+	public void setUp() throws Exception
+	{
+		MockitoAnnotations.initMocks(this);
+		injector = Guice.createInjector(new AbstractModule()
+		{
+			@Override
+			protected void configure()
+			{
+				bind(GraphHopper.class).toInstance(graphHopper);
+				bind(Boolean.class).annotatedWith(Names.named("internalErrorsAllowed")).toInstance(
+				        false);
+				bind(Boolean.class).annotatedWith(Names.named("jsonpAllowed")).toInstance(false);
+			}
+		});
+
+		graphHopperServlet = injector.getInstance(GraphHopperServlet.class);
+		when(httpServletResponse.getWriter()).thenReturn(mock(PrintWriter.class));
+		allParameters = new HashMap<>();
+		when(graphHopper.getEncodingManager()).thenReturn(encodingManager);
+		when(graphHopper.hasElevation()).thenReturn(false);
+
+		when(encodingManager.supports(anyString())).thenReturn(true);
+		when(encodingManager.getEncoder(anyString())).thenReturn(flagEncoder);
+		when(flagEncoder.toString()).thenReturn("unknown");
+
+		when(graphHopper.route(any(GHRequest.class))).thenReturn(response);
+		when(graphHopper.getGraph()).thenReturn(graphStorage);
+		BBox bbox = new BBox(0, 0, 10, 10);
+		when(graphStorage.getBounds()).thenReturn(bbox);
+		when(response.getPoints()).thenReturn(pointList);
+		when(pointList.getSize()).thenReturn(4);
+	}
+
+	@After
+	public void tearDown() throws Exception
+	{
+		injector = null;
+	}
+
+	private String buildErrorMessageString( String paramValue, String paramName,
+	        List<String> validValues )
+	{
+		StringBuilder errMesg = new StringBuilder(paramValue)
+		        .append(" is not a valid value for parameter ").append(paramName)
+		        .append(". Valid values are ");
+		for (int i = 0; i < validValues.size(); i++)
+		{
+			String validStr = validValues.get(i);
+			if (i == validValues.size() - 1)
+			{
+				errMesg.append(" or ");
+			}
+			errMesg.append(validStr);
+			if (i < validValues.size() - 2)
+			{
+				errMesg.append(", ");
+			}
+		}
+		return errMesg.toString();
+	}
+
+	private String buildErrorMessageString( String paramValue, String paramName,
+	        String... validValues )
+	{
+		return buildErrorMessageString(paramValue, paramName, Arrays.asList(validValues));
+	}
+
+	@Test
+	public void statusCodeForCorrectParameters() throws ServletException, IOException
+	{
+		allParameters.put("point", POINTS);
+		allParameters.put("vehicle", new String[] { VEHICLES[0] });
+		allParameters.put("locale", new String[] { LOCALES[0] });
+		allParameters.put("instructions", new String[] { "false" });
+		when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+		expectResponseBBox();
+		graphHopperServlet.doGet(httpServletRequest, httpServletResponse);
+		verify(httpServletResponse, never()).setStatus(SC_BAD_REQUEST);
+	}
+
+	@Test
+	public void testGetGHResponseWithValidPoints() throws IOException, MissingParameterException,
+	        NoSuchParameterException, InvalidParameterException
+	{
+		allParameters.put("point", POINTS);
+		allParameters.put("vehicle", new String[] { VEHICLES[0] });
+		allParameters.put("locale", new String[] { LOCALES[0] });
+		allParameters.put("instructions", new String[] { "false" });
+		when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+		expectResponseBBox();
+
+		graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse);
+		verifyNoError();
+	}
+
+	@Test
+	public void testGetGHResponseWithUnparsablePoint() throws IOException,
+	        MissingParameterException, NoSuchParameterException, InvalidParameterException
+	{
+		allParameters.put("point", new String[] { UNPARSABLE_POINT });
+		allParameters.put("vehicle", new String[] { VEHICLES[0] });
+		allParameters.put("locale", new String[] { LOCALES[0] });
+		when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+
+		GHResponse ghResponse = graphHopperServlet.getGHResponse(httpServletRequest,
+		        httpServletResponse);
+		assertEquals(
+		        "Point "
+		                + UNPARSABLE_POINT
+		                + " is not a valid point. Point must be a comma separated coordinate in WGS84 projection.",
+		        ghResponse.getErrors().get(0).getMessage());
+	}
+
+	@Test
+	public void testGetGHResponseWithCorrectLocales() throws IOException,
+	        MissingParameterException, NoSuchParameterException, InvalidParameterException
+	{
+		allParameters.put("point", POINTS);
+		allParameters.put("vehicle", new String[] { VEHICLES[0] });
+		allParameters.put("instructions", new String[] { "false" });
+		for (String locale : LOCALES)
+		{
+			allParameters.put("locale", new String[] { locale });
+			when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+			expectResponseBBox();
+
+			graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse);
+			verifyNoError();
+		}
+	}
+
+	@Test
+	public void testGetGHResponseWithWrongLocale() throws IOException, MissingParameterException,
+	        NoSuchParameterException, InvalidParameterException
+	{
+		allParameters.put("point", POINTS);
+		allParameters.put("vehicle", new String[] { VEHICLES[0] });
+		allParameters.put("locale", new String[] { WRONG_LOCALE });
+		allParameters.put("instructions", new String[] { "false" });
+		when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+
+		GHResponse ghResponse = graphHopperServlet.getGHResponse(httpServletRequest,
+		        httpServletResponse);
+		assertEquals(buildErrorMessageString(WRONG_LOCALE, "locale", LOCALES), ghResponse
+		        .getErrors().get(0).getMessage());
+	}
+
+	@Test
+	public void testGetGHResponseWithCorrectAlgorithms() throws IOException,
+	        MissingParameterException, NoSuchParameterException, InvalidParameterException
+	{
+		allParameters.put("point", POINTS);
+		allParameters.put("vehicle", new String[] { VEHICLES[0] });
+		allParameters.put("locale", new String[] { LOCALES[0] });
+		allParameters.put("instructions", new String[] { "false" });
+
+		for (String algorithm : ALGORITHMS)
+		{
+			allParameters.put("algorithm", new String[] { algorithm });
+			when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+			expectResponseBBox();
+			graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse);
+			verifyNoError();
+		}
+	}
+
+	@Test
+	public void testGetGHResponseWithWrongAlgorithm() throws IOException,
+	        MissingParameterException, NoSuchParameterException, InvalidParameterException
+	{
+		allParameters.put("point", POINTS);
+		allParameters.put("vehicle", new String[] { VEHICLES[0] });
+		allParameters.put("locale", new String[] { LOCALES[0] });
+
+		allParameters.put("algorithm", new String[] { WRONG_ALGORITHM });
+		when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+
+		GHResponse ghResponse = graphHopperServlet.getGHResponse(httpServletRequest,
+		        httpServletResponse);
+		assertEquals(buildErrorMessageString(WRONG_ALGORITHM, "algorithm", ALGORITHMS), ghResponse
+		        .getErrors().get(0).getMessage());
+	}
+
+	@Test
+	public void testGetGHResponseWithCorrectTypes() throws IOException, MissingParameterException,
+	        NoSuchParameterException, InvalidParameterException, ServletException
+	{
+		allParameters.put("point", POINTS);
+		allParameters.put("vehicle", new String[] { VEHICLES[0] });
+		allParameters.put("locale", new String[] { LOCALES[0] });
+		allParameters.put("instructions", new String[] { "false" });
+
+		for (String type : TYPES)
+		{
+			allParameters.put("type", new String[] { type });
+			when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+			expectResponseBBox();
+			graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse);
+			verifyNoError();
+
+		}
+	}
+
+	@Test
+	public void testGetGHResponseWithWrongType() throws IOException, MissingParameterException,
+	        NoSuchParameterException, InvalidParameterException, ServletException
+	{
+		allParameters.put("point", POINTS);
+		allParameters.put("vehicle", new String[] { VEHICLES[0] });
+		allParameters.put("locale", new String[] { LOCALES[0] });
+
+		allParameters.put("type", new String[] { WRONG_TYPE });
+		when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+		expectError();
+		graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse);
+		verifyError(WRONG_TYPE
+		        + " is not a valid value for parameter type. Valid values are GPX or JSON.");
+	}
+
+	private void verifyError( String expectedError)
     {
-        return buildErrorMessageString(paramValue, paramName, Arrays.asList(validValues));
+		ArgumentCaptor<Throwable> error = ArgumentCaptor.forClass(Throwable.class);
+	    verify(response).addError(error.capture());
+	    assertEquals(expectedError, error.getAllValues().get(0).getMessage());
     }
 
-    @Test
-    public void statusCodeForCorrectParameters() throws ServletException, IOException
+	@Test
+	public void testGetGHResponseWithCorrectVehicles() throws IOException,
+	        MissingParameterException, NoSuchParameterException, InvalidParameterException
+	{
+		allParameters.put("point", POINTS);
+		allParameters.put("vehicle", new String[] { VEHICLES[0] });
+		allParameters.put("locale", new String[] { LOCALES[0] });
+		allParameters.put("instructions", new String[] { "false" });
+		when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+		expectResponseBBox();
+
+		graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse);
+		verifyNoError();
+	}
+
+	@Test
+	public void testGetGHResponseWithWrongVehicle() throws IOException, MissingParameterException,
+	        NoSuchParameterException, InvalidParameterException
+	{
+		allParameters.put("point", POINTS);
+		allParameters.put("vehicle", new String[] { WRONG_VEHICLE });
+		allParameters.put("locale", new String[] { LOCALES[0] });
+		allParameters.put("instructions", new String[] { "false" });
+		when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+
+		when(graphHopper.getGraph()).thenReturn(graphStorage);
+		when(graphStorage.getEncodingManager()).thenReturn(encodingManager);
+		when(encodingManager.supports(anyString())).thenReturn(false);
+		when(encodingManager.toString()).thenReturn("*supported vehicles*");
+
+		GHResponse ghResponse = graphHopperServlet.getGHResponse(httpServletRequest,
+		        httpServletResponse);
+
+		assertEquals(
+		        "Vehicle flying_carpet is not a valid vehicle. Valid vehicles are *supported vehicles*",
+		        ghResponse.getErrors().get(0).getMessage());
+	}
+
+	@Test
+	public void testGetGHResponseWithCorrectInstructions() throws MissingParameterException,
+	        NoSuchParameterException, InvalidParameterException, IOException
+	{
+		allParameters.put("point", POINTS);
+		allParameters.put("vehicle", new String[] { VEHICLES[0] });
+		allParameters.put("locale", new String[] { LOCALES[0] });
+
+		for (String instruction : INSTRUCTIONS)
+		{
+			System.err.println("INSTRUCTIONS:" + instruction);
+			allParameters.put("instructions", new String[] { instruction });
+			when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+			expectResponseBBox();
+			expectResponseInstructions();
+			graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse);
+			verifyNoError();
+		}
+	}
+
+	@Test
+	public void testGetGHResponseWithIncorrectInstruction() throws MissingParameterException,
+	        NoSuchParameterException, InvalidParameterException, IOException
+	{
+		allParameters.put("point", POINTS);
+		allParameters.put("vehicle", new String[] { VEHICLES[0] });
+		allParameters.put("locale", new String[] { LOCALES[0] });
+
+		allParameters.put("instructions", new String[] { WRONG_INSTRUCTION });
+		when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+
+		GHResponse ghResponse = graphHopperServlet.getGHResponse(httpServletRequest,
+		        httpServletResponse);
+		assertEquals(
+		        WRONG_INSTRUCTION
+		                + " is not a valid value for parameter instructions. Valid values are true or false",
+		        ghResponse.getErrors().get(0).getMessage());
+	}
+
+	@Test
+	public void testGetGHResponseWithCorrectPointsEncoded() throws MissingParameterException,
+	        NoSuchParameterException, InvalidParameterException, IOException
+	{
+		allParameters.put("point", POINTS);
+		allParameters.put("vehicle", new String[] { VEHICLES[0] });
+		allParameters.put("locale", new String[] { LOCALES[0] });
+		allParameters.put("instructions", new String[] { "false" });
+
+		for (String point_encoded : POINTS_ENCODED)
+		{
+			allParameters.put("points_encoded", new String[] { point_encoded });
+			when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+			expectResponseBBox();
+
+			graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse);
+			verifyNoError();
+		}
+	}
+
+	@Test
+	public void testGetGHResponseWithIncorrectPointsEncoded() throws MissingParameterException,
+	        NoSuchParameterException, InvalidParameterException, IOException
+	{
+		allParameters.put("point", POINTS);
+		allParameters.put("vehicle", new String[] { VEHICLES[0] });
+		allParameters.put("locale", new String[] { LOCALES[0] });
+
+		allParameters.put("points_encoded", new String[] { WRONG_POINTS_ENCODED });
+		when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+
+		GHResponse ghResponse = graphHopperServlet.getGHResponse(httpServletRequest,
+		        httpServletResponse);
+		assertEquals(
+		        buildErrorMessageString(WRONG_POINTS_ENCODED, "points_encoded", POINTS_ENCODED),
+		        ghResponse.getErrors().get(0).getMessage());
+	}
+
+	@Test
+	public void testGetGHResponseWithCorrectDebug() throws MissingParameterException,
+	        NoSuchParameterException, InvalidParameterException, IOException
+	{
+		allParameters.put("point", POINTS);
+		allParameters.put("vehicle", new String[] { VEHICLES[0] });
+		allParameters.put("locale", new String[] { LOCALES[0] });
+		allParameters.put("instructions", new String[] { "false" });
+
+		for (String debug : DEBUG)
+		{
+			allParameters.put("debug", new String[] { debug });
+			when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+			expectResponseBBox();
+
+			graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse);
+			verifyNoError();
+		}
+	}
+
+	@Test
+	public void testGetGHResponseWithIncorrectDebug() throws MissingParameterException,
+	        NoSuchParameterException, InvalidParameterException, IOException
+	{
+		allParameters.put("point", POINTS);
+		allParameters.put("vehicle", new String[] { VEHICLES[0] });
+		allParameters.put("locale", new String[] { LOCALES[0] });
+
+		allParameters.put("debug", new String[] { WRONG_DEBUG });
+		when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+
+		GHResponse ghResponse = graphHopperServlet.getGHResponse(httpServletRequest,
+		        httpServletResponse);
+		assertEquals(buildErrorMessageString(WRONG_DEBUG, "debug", DEBUG), ghResponse.getErrors()
+		        .get(0).getMessage());
+	}
+
+	@Test
+	public void testGetGHResponseWithCorrectPretty() throws MissingParameterException,
+	        NoSuchParameterException, InvalidParameterException, IOException
+	{
+		allParameters.put("point", POINTS);
+		allParameters.put("vehicle", new String[] { VEHICLES[0] });
+		allParameters.put("locale", new String[] { LOCALES[0] });
+		allParameters.put("instructions", new String[] { "false" });
+
+		for (String pretty : PRETTY)
+		{
+			allParameters.put("pretty", new String[] { pretty });
+			when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+			expectResponseBBox();
+			graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse);
+			verifyNoError();
+		}
+	}
+
+	@Test
+	public void testGetGHResponseWithIncorrectPretty() throws MissingParameterException,
+	        NoSuchParameterException, InvalidParameterException, IOException
+	{
+		allParameters.put("point", POINTS);
+		allParameters.put("vehicle", new String[] { VEHICLES[0] });
+		allParameters.put("locale", new String[] { LOCALES[0] });
+
+		allParameters.put("pretty", new String[] { WRONG_PRETTY });
+		when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+
+		GHResponse ghResponse = graphHopperServlet.getGHResponse(httpServletRequest,
+		        httpServletResponse);
+		assertEquals(buildErrorMessageString(WRONG_PRETTY, "pretty", PRETTY), ghResponse
+		        .getErrors().get(0).getMessage());
+	}
+
+	@Test
+	public void testGetGHResponseWithCorrectPrivate() throws MissingParameterException,
+	        NoSuchParameterException, InvalidParameterException, IOException
+	{
+		allParameters.put("point", POINTS);
+		allParameters.put("vehicle", new String[] { VEHICLES[0] });
+		allParameters.put("locale", new String[] { LOCALES[0] });
+		allParameters.put("instructions", new String[] { "false" });
+
+		for (String booleanParam : BOOLEAN_PARAM_VALS)
+		{
+			allParameters.put("private", new String[] { booleanParam });
+			when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+			expectResponseBBox();
+
+			graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse);
+			verifyNoError();
+		}
+	}
+
+	@Test
+	public void testGetGHResponseWithInvalidPrivate() throws MissingParameterException,
+	        NoSuchParameterException, InvalidParameterException, IOException
+	{
+		allParameters.put("point", POINTS);
+		allParameters.put("vehicle", new String[] { VEHICLES[0] });
+		allParameters.put("locale", new String[] { LOCALES[0] });
+		allParameters.put("instructions", new String[] { "false" });
+
+		allParameters.put("private", new String[] { "tru" });
+		when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+
+		GHResponse ghResponse = graphHopperServlet.getGHResponse(httpServletRequest,
+		        httpServletResponse);
+		assertEquals(buildErrorMessageString("tru", "private", BOOLEAN_PARAM_VALS), ghResponse
+		        .getErrors().get(0).getMessage());
+	}
+
+	@Test
+	public void testGetGHResponseWithCorrectCalcPoints() throws MissingParameterException,
+	        NoSuchParameterException, InvalidParameterException, IOException
+	{
+		allParameters.put("point", POINTS);
+		allParameters.put("vehicle", new String[] { VEHICLES[0] });
+		allParameters.put("locale", new String[] { LOCALES[0] });
+		allParameters.put("instructions", new String[] { "false" });
+
+		for (String calcPoint : CALC_POINTS)
+		{
+			allParameters.put("calc_points", new String[] { calcPoint });
+			when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+			expectResponseBBox();
+
+			graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse);
+			verifyNoError();
+		}
+	}
+
+	@Test
+	public void testGetGHResponseWithIncorrectCalcPoints() throws MissingParameterException,
+	        NoSuchParameterException, InvalidParameterException, IOException
+	{
+		allParameters.put("point", POINTS);
+		allParameters.put("vehicle", new String[] { VEHICLES[0] });
+		allParameters.put("locale", new String[] { LOCALES[0] });
+		allParameters.put("instructions", new String[] { "false" });
+
+		allParameters.put("calc_points", new String[] { WRONG_CALC_POINTS });
+		when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+
+		GHResponse ghResponse = graphHopperServlet.getGHResponse(httpServletRequest,
+		        httpServletResponse);
+		assertEquals(buildErrorMessageString(WRONG_CALC_POINTS, "calc_points", CALC_POINTS),
+		        ghResponse.getErrors().get(0).getMessage());
+	}
+
+	@Test
+	public void testGetGHResponseWithCorrectWeighting() throws MissingParameterException,
+	        NoSuchParameterException, InvalidParameterException, IOException
+	{
+		allParameters.put("point", POINTS);
+		allParameters.put("vehicle", new String[] { VEHICLES[0] });
+		allParameters.put("locale", new String[] { LOCALES[0] });
+		allParameters.put("instructions", new String[] { "false" });
+
+		for (String weighting : WEIGHTINGS)
+		{
+			allParameters.put("weighting", new String[] { weighting });
+			when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+			expectResponseBBox();
+
+			graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse);
+			verifyNoError();
+		}
+	}
+
+	@Test
+	public void testGetGHResponseWithIncorrectWeighting() throws MissingParameterException,
+	        NoSuchParameterException, InvalidParameterException, IOException
+	{
+		allParameters.put("point", POINTS);
+		allParameters.put("vehicle", new String[] { VEHICLES[0] });
+		allParameters.put("locale", new String[] { LOCALES[0] });
+		allParameters.put("instructions", new String[] { "false" });
+
+		allParameters.put("weighting", new String[] { WRONG_WEIGHTING });
+
+		when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+
+		GHResponse ghResponse = graphHopperServlet.getGHResponse(httpServletRequest,
+		        httpServletResponse);
+
+		assertEquals(1, ghResponse.getErrors().size());
+		// TODO Generate appropriate error message in GraphhopperServletClass
+		// assertEquals(buildErrorMessageString(WRONG_WEIGHTING, "calc_points", WEIGHTINGS),
+		// ghResponse.getErrors().get(0).getMessage());
+
+	}
+
+	@Test
+	public void testGetGHResponseWithCorrectAvoidances() throws MissingParameterException,
+	        NoSuchParameterException, InvalidParameterException, IOException
+	{
+		allParameters.put("point", POINTS);
+		allParameters.put("vehicle", new String[] { VEHICLES[0] });
+		allParameters.put("locale", new String[] { LOCALES[0] });
+		allParameters.put("instructions", new String[] { "false" });
+
+		for (String avoidances : AVOIDANCES)
+		{
+			allParameters.put("avoidances", new String[] { avoidances });
+			when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+
+			when(flagEncoder.getEncoderDecorators()).thenReturn(encoderDecorators);
+			when(encoderDecorators.iterator()).thenReturn(iterator);
+			when(iterator.hasNext()).thenReturn(true, false);
+			when(iterator.next()).thenReturn(abstractAvoidanceDecorator);
+			when(abstractAvoidanceDecorator.getEdgeAttributesOfInterestNames()).thenReturn(
+			        AVOIDANCES);
+			expectResponseBBox();
+
+			graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse);
+			verifyNoError();
+		}
+	}
+
+	@Test
+	public void testGetGHResponseWithIncorrectAvoidances() throws MissingParameterException,
+	        NoSuchParameterException, InvalidParameterException, IOException
+	{
+		allParameters.put("point", POINTS);
+		allParameters.put("vehicle", new String[] { VEHICLES[0] });
+		allParameters.put("locale", new String[] { LOCALES[0] });
+
+		allParameters.put("avoidances", new String[] { WRONG_AVOIDANCE });
+		when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+
+		when(flagEncoder.getEncoderDecorators()).thenReturn(encoderDecorators);
+		when(encoderDecorators.iterator()).thenReturn(iterator);
+		when(iterator.hasNext()).thenReturn(true, false);
+		when(iterator.next()).thenReturn(abstractAvoidanceDecorator);
+		when(abstractAvoidanceDecorator.getEdgeAttributesOfInterestNames()).thenReturn(AVOIDANCES);
+
+		GHResponse ghResponse = graphHopperServlet.getGHResponse(httpServletRequest,
+		        httpServletResponse);
+		assertEquals(buildErrorMessageString(WRONG_AVOIDANCE, "avoidances", AVOIDANCES), ghResponse
+		        .getErrors().get(0).getMessage());
+	}
+
+	private void expectResponseBBox()
+	{
+		BBox bbox = new BBox(0, 0, 10, 10);
+		when(response.calcRouteBBox((BBox) Matchers.any())).thenReturn(bbox);
+	}
+
+	private void expectResponseInstructions()
+	{
+		InstructionList instructions = new InstructionList(null);
+		when(response.getInstructions()).thenReturn(instructions);
+	}
+	
+	private void expectError()
     {
-        allParameters.put("point", POINTS);
-        allParameters.put("vehicle", new String[] { VEHICLES[0] });
-        allParameters.put("locale", new String[] { LOCALES[0] });
-        allParameters.put("instructions", new String[] { "false" });
-        when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
-
-        graphHopperServlet.doGet(httpServletRequest, httpServletResponse);
-        verify(httpServletResponse, never()).setStatus(SC_BAD_REQUEST);
+	    when(response.hasErrors()).thenReturn(true);
+	    List<Throwable> errors = new ArrayList<Throwable>();
+	    errors.add(new Throwable("test error"));
+		when(response.getErrors()).thenReturn(errors );
     }
 
-    @Test
-    public void testGetGHResponseWithValidPoints() throws IOException, MissingParameterException,
-            NoSuchParameterException, InvalidParameterException
-    {
-        allParameters.put("point", POINTS);
-        allParameters.put("vehicle", new String[] { VEHICLES[0] });
-        allParameters.put("locale", new String[] { LOCALES[0] });
-        allParameters.put("instructions", new String[] { "false" });
-        when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
-
-        assertFalse(graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse)
-                .hasErrors());
-    }
-
-    @Test
-    public void testGetGHResponseWithUnparsablePoint() throws IOException,
-            MissingParameterException, NoSuchParameterException, InvalidParameterException
-    {
-        allParameters.put("point", new String[] { UNPARSABLE_POINT });
-        allParameters.put("vehicle", new String[] { VEHICLES[0] });
-        allParameters.put("locale", new String[] { LOCALES[0] });
-        when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
-
-        assertEquals(
-                "Point "
-                        + UNPARSABLE_POINT
-                        + " is not a valid point. Point must be a comma separated coordinate in WGS84 projection.",
-                graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse)
-                        .getErrors().get(0).getMessage());
-    }
-
-    @Test
-    public void testGetGHResponseWithCorrectLocales() throws IOException,
-            MissingParameterException, NoSuchParameterException, InvalidParameterException
-    {
-        allParameters.put("point", POINTS);
-        allParameters.put("vehicle", new String[] { VEHICLES[0] });
-        allParameters.put("instructions", new String[] { "false" });
-        for (String locale : LOCALES)
-        {
-            allParameters.put("locale", new String[] { locale });
-            when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
-
-            assertFalse(graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse)
-                    .hasErrors());
-        }
-    }
-
-    @Test
-    public void testGetGHResponseWithWrongLocale() throws IOException, MissingParameterException,
-            NoSuchParameterException, InvalidParameterException
-    {
-        allParameters.put("point", POINTS);
-        allParameters.put("vehicle", new String[] { VEHICLES[0] });
-        allParameters.put("locale", new String[] { WRONG_LOCALE });
-        allParameters.put("instructions", new String[] { "false" });
-        when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
-
-        assertEquals(buildErrorMessageString(WRONG_LOCALE, "locale", LOCALES), graphHopperServlet
-                .getGHResponse(httpServletRequest, httpServletResponse).getErrors().get(0)
-                .getMessage());
-    }
-
-    @Test
-    public void testGetGHResponseWithCorrectAlgorithms() throws IOException,
-            MissingParameterException, NoSuchParameterException, InvalidParameterException
-    {
-        allParameters.put("point", POINTS);
-        allParameters.put("vehicle", new String[] { VEHICLES[0] });
-        allParameters.put("locale", new String[] { LOCALES[0] });
-        allParameters.put("instructions", new String[] { "false" });
-
-        for (String algorithm : ALGORITHMS)
-        {
-            allParameters.put("algorithm", new String[] { algorithm });
-            when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
-
-            assertFalse(graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse)
-                    .hasErrors());
-        }
-    }
-
-    @Test
-    public void testGetGHResponseWithWrongAlgorithm() throws IOException,
-            MissingParameterException, NoSuchParameterException, InvalidParameterException
-    {
-        allParameters.put("point", POINTS);
-        allParameters.put("vehicle", new String[] { VEHICLES[0] });
-        allParameters.put("locale", new String[] { LOCALES[0] });
-
-        allParameters.put("algorithm", new String[] { WRONG_ALGORITHM });
-        when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
-
-        assertEquals(buildErrorMessageString(WRONG_ALGORITHM, "algorithm", ALGORITHMS),
-                graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse)
-                        .getErrors().get(0).getMessage());
-    }
-
-    @Test
-    public void testGetGHResponseWithCorrectTypes() throws IOException, MissingParameterException,
-            NoSuchParameterException, InvalidParameterException, ServletException
-    {
-        allParameters.put("point", POINTS);
-        allParameters.put("vehicle", new String[] { VEHICLES[0] });
-        allParameters.put("locale", new String[] { LOCALES[0] });
-        allParameters.put("instructions", new String[] { "false" });
-
-        for (String type : TYPES)
-        {
-            allParameters.put("type", new String[] { type });
-            when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
-
-            assertFalse(graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse)
-                    .hasErrors());
-
-        }
-    }
-
-    @Test
-    public void testGetGHResponseWithWrongType() throws IOException, MissingParameterException,
-            NoSuchParameterException, InvalidParameterException, ServletException
-    {
-        allParameters.put("point", POINTS);
-        allParameters.put("vehicle", new String[] { VEHICLES[0] });
-        allParameters.put("locale", new String[] { LOCALES[0] });
-
-        allParameters.put("type", new String[] { WRONG_TYPE });
-        when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
-
-        assertEquals(WRONG_TYPE
-                + " is not a valid value for parameter type. Valid values are GPX or JSON.",
-                graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse)
-                        .getErrors().get(0).getMessage());
-    }
-
-    @Test
-    public void testGetGHResponseWithCorrectVehicles() throws IOException,
-            MissingParameterException, NoSuchParameterException, InvalidParameterException
-    {
-        allParameters.put("point", POINTS);
-        allParameters.put("vehicle", new String[] { VEHICLES[0] });
-        allParameters.put("locale", new String[] { LOCALES[0] });
-        allParameters.put("instructions", new String[] { "false" });
-        when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
-
-        assertFalse(graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse)
-                .hasErrors());
-    }
-
-    @Test
-    public void testGetGHResponseWithWrongVehicle() throws IOException, MissingParameterException,
-            NoSuchParameterException, InvalidParameterException
-    {
-        allParameters.put("point", POINTS);
-        allParameters.put("vehicle", new String[] { WRONG_VEHICLE });
-        allParameters.put("locale", new String[] { LOCALES[0] });
-        allParameters.put("instructions", new String[] { "false" });
-        when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
-
-        when(graphHopper.getGraph()).thenReturn(graphStorage);
-        when(graphStorage.getEncodingManager()).thenReturn(encodingManager);
-        when(encodingManager.supports(anyString())).thenReturn(false);
-        when(encodingManager.toString()).thenReturn("*supported vehicles*");
-
-        GHResponse ghResponse = graphHopperServlet.getGHResponse(httpServletRequest,
-                httpServletResponse);
-
-        assertEquals(
-                "Vehicle flying_carpet is not a valid vehicle. Valid vehicles are *supported vehicles*",
-                ghResponse.getErrors().get(0).getMessage());
-    }
-
-    @Test
-    public void testGetGHResponseWithCorrectInstructions() throws MissingParameterException,
-            NoSuchParameterException, InvalidParameterException, IOException
-    {
-        allParameters.put("point", POINTS);
-        allParameters.put("vehicle", new String[] { VEHICLES[0] });
-        allParameters.put("locale", new String[] { LOCALES[0] });
-
-        for (String instruction : INSTRUCTIONS)
-        {
-            allParameters.put("instructions", new String[] { instruction });
-            when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
-
-            GHResponse ghResponse = graphHopperServlet.getGHResponse(httpServletRequest,
-                    httpServletResponse);
-
-            assertFalse(ghResponse.hasErrors());
-        }
-    }
-
-    @Test
-    public void testGetGHResponseWithIncorrectInstruction() throws MissingParameterException,
-            NoSuchParameterException, InvalidParameterException, IOException
-    {
-        allParameters.put("point", POINTS);
-        allParameters.put("vehicle", new String[] { VEHICLES[0] });
-        allParameters.put("locale", new String[] { LOCALES[0] });
-
-        allParameters.put("instructions", new String[] { WRONG_INSTRUCTION });
-        when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
-
-        assertEquals(
-                WRONG_INSTRUCTION
-                        + " is not a valid value for parameter instructions. Valid values are true or false",
-                graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse)
-                        .getErrors().get(0).getMessage());
-    }
-
-    @Test
-    public void testGetGHResponseWithCorrectPointsEncoded() throws MissingParameterException,
-            NoSuchParameterException, InvalidParameterException, IOException
-    {
-        allParameters.put("point", POINTS);
-        allParameters.put("vehicle", new String[] { VEHICLES[0] });
-        allParameters.put("locale", new String[] { LOCALES[0] });
-        allParameters.put("instructions", new String[] { "false" });
-
-        for (String point_encoded : POINTS_ENCODED)
-        {
-            allParameters.put("points_encoded", new String[] { point_encoded });
-            when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
-
-            assertFalse(graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse)
-                    .hasErrors());
-        }
-    }
-
-    @Test
-    public void testGetGHResponseWithIncorrectPointsEncoded() throws MissingParameterException,
-            NoSuchParameterException, InvalidParameterException, IOException
-    {
-        allParameters.put("point", POINTS);
-        allParameters.put("vehicle", new String[] { VEHICLES[0] });
-        allParameters.put("locale", new String[] { LOCALES[0] });
-
-        allParameters.put("points_encoded", new String[] { WRONG_POINTS_ENCODED });
-        when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
-
-        assertEquals(
-                buildErrorMessageString(WRONG_POINTS_ENCODED, "points_encoded", POINTS_ENCODED),
-                graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse)
-                        .getErrors().get(0).getMessage());
-    }
-
-    @Test
-    public void testGetGHResponseWithCorrectDebug() throws MissingParameterException,
-            NoSuchParameterException, InvalidParameterException, IOException
-    {
-        allParameters.put("point", POINTS);
-        allParameters.put("vehicle", new String[] { VEHICLES[0] });
-        allParameters.put("locale", new String[] { LOCALES[0] });
-        allParameters.put("instructions", new String[] { "false" });
-
-        for (String debug : DEBUG)
-        {
-            allParameters.put("debug", new String[] { debug });
-            when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
-
-            assertFalse(graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse)
-                    .hasErrors());
-        }
-    }
-
-    @Test
-    public void testGetGHResponseWithIncorrectDebug() throws MissingParameterException,
-            NoSuchParameterException, InvalidParameterException, IOException
-    {
-        allParameters.put("point", POINTS);
-        allParameters.put("vehicle", new String[] { VEHICLES[0] });
-        allParameters.put("locale", new String[] { LOCALES[0] });
-
-        allParameters.put("debug", new String[] { WRONG_DEBUG });
-        when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
-
-        assertEquals(buildErrorMessageString(WRONG_DEBUG, "debug", DEBUG), graphHopperServlet
-                .getGHResponse(httpServletRequest, httpServletResponse).getErrors().get(0)
-                .getMessage());
-    }
-
-    @Test
-    public void testGetGHResponseWithCorrectPretty() throws MissingParameterException,
-            NoSuchParameterException, InvalidParameterException, IOException
-    {
-        allParameters.put("point", POINTS);
-        allParameters.put("vehicle", new String[] { VEHICLES[0] });
-        allParameters.put("locale", new String[] { LOCALES[0] });
-        allParameters.put("instructions", new String[] { "false" });
-
-        for (String pretty : PRETTY)
-        {
-            allParameters.put("pretty", new String[] { pretty });
-            when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
-
-            assertFalse(graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse)
-                    .hasErrors());
-        }
-    }
-
-    @Test
-    public void testGetGHResponseWithIncorrectPretty() throws MissingParameterException,
-            NoSuchParameterException, InvalidParameterException, IOException
-    {
-        allParameters.put("point", POINTS);
-        allParameters.put("vehicle", new String[] { VEHICLES[0] });
-        allParameters.put("locale", new String[] { LOCALES[0] });
-
-        allParameters.put("pretty", new String[] { WRONG_PRETTY });
-        when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
-
-        assertEquals(buildErrorMessageString(WRONG_PRETTY, "pretty", PRETTY), graphHopperServlet
-                .getGHResponse(httpServletRequest, httpServletResponse).getErrors().get(0)
-                .getMessage());
-    }
-
-    @Test
-    public void testGetGHResponseWithCorrectCalcPoints() throws MissingParameterException,
-            NoSuchParameterException, InvalidParameterException, IOException
-    {
-        allParameters.put("point", POINTS);
-        allParameters.put("vehicle", new String[] { VEHICLES[0] });
-        allParameters.put("locale", new String[] { LOCALES[0] });
-        allParameters.put("instructions", new String[] { "false" });
-
-        for (String calcPoint : CALC_POINTS)
-        {
-            allParameters.put("calc_points", new String[] { calcPoint });
-            when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
-
-            assertFalse(graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse)
-                    .hasErrors());
-        }
-    }
-
-    @Test
-    public void testGetGHResponseWithIncorrectCalcPoints() throws MissingParameterException,
-            NoSuchParameterException, InvalidParameterException, IOException
-    {
-        allParameters.put("point", POINTS);
-        allParameters.put("vehicle", new String[] { VEHICLES[0] });
-        allParameters.put("locale", new String[] { LOCALES[0] });
-        allParameters.put("instructions", new String[] { "false" });
-
-        allParameters.put("calc_points", new String[] { WRONG_CALC_POINTS });
-        when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
-
-        assertEquals(buildErrorMessageString(WRONG_CALC_POINTS, "calc_points", CALC_POINTS),
-                graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse)
-                        .getErrors().get(0).getMessage());
-    }
-
-    @Test
-    public void testGetGHResponseWithCorrectWeighting() throws MissingParameterException,
-            NoSuchParameterException, InvalidParameterException, IOException
-    {
-        allParameters.put("point", POINTS);
-        allParameters.put("vehicle", new String[] { VEHICLES[0] });
-        allParameters.put("locale", new String[] { LOCALES[0] });
-        allParameters.put("instructions", new String[] { "false" });
-
-        for (String weighting : WEIGHTINGS)
-        {
-            allParameters.put("weighting", new String[] { weighting });
-            when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
-
-            assertFalse(graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse)
-                    .hasErrors());
-        }
-    }
-
-    @Test
-    public void testGetGHResponseWithIncorrectWeighting() throws MissingParameterException,
-            NoSuchParameterException, InvalidParameterException, IOException
-    {
-        allParameters.put("point", POINTS);
-        allParameters.put("vehicle", new String[] { VEHICLES[0] });
-        allParameters.put("locale", new String[] { LOCALES[0] });
-        allParameters.put("instructions", new String[] { "false" });
-
-        allParameters.put("weighting", new String[] { WRONG_WEIGHTING });
-
-        when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
-
-        GHResponse ghResponse = graphHopperServlet.getGHResponse(httpServletRequest,
-                httpServletResponse);
-
-        assertEquals(1, ghResponse.getErrors().size());
-        // TODO Generate appropriate error message in GraphhopperServletClass
-        // assertEquals(buildErrorMessageString(WRONG_WEIGHTING, "calc_points", WEIGHTINGS),
-        // ghResponse.getErrors().get(0).getMessage());
-
-    }
-
-    @Test
-    public void testGetGHResponseWithCorrectAvoidances() throws MissingParameterException,
-            NoSuchParameterException, InvalidParameterException, IOException
-    {
-        allParameters.put("point", POINTS);
-        allParameters.put("vehicle", new String[] { VEHICLES[0] });
-        allParameters.put("locale", new String[] { LOCALES[0] });
-        allParameters.put("instructions", new String[] { "false" });
-
-        for (String avoidances : AVOIDANCES)
-        {
-            allParameters.put("avoidances", new String[] { avoidances });
-            when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
-
-            when(flagEncoder.getEncoderDecorators()).thenReturn(encoderDecorators);
-            when(encoderDecorators.iterator()).thenReturn(iterator);
-            when(iterator.hasNext()).thenReturn(true, false);
-            when(iterator.next()).thenReturn(abstractAvoidanceDecorator);
-            when(abstractAvoidanceDecorator.getEdgeAttributesOfInterestNames()).thenReturn(
-                    AVOIDANCES);
-
-            assertFalse(graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse)
-                    .hasErrors());
-        }
-    }
-
-    @Test
-    public void testGetGHResponseWithIncorrectAvoidances() throws MissingParameterException,
-            NoSuchParameterException, InvalidParameterException, IOException
-    {
-        allParameters.put("point", POINTS);
-        allParameters.put("vehicle", new String[] { VEHICLES[0] });
-        allParameters.put("locale", new String[] { LOCALES[0] });
-
-        allParameters.put("avoidances", new String[] { WRONG_AVOIDANCE });
-        when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
-
-        when(flagEncoder.getEncoderDecorators()).thenReturn(encoderDecorators);
-        when(encoderDecorators.iterator()).thenReturn(iterator);
-        when(iterator.hasNext()).thenReturn(true, false);
-        when(iterator.next()).thenReturn(abstractAvoidanceDecorator);
-        when(abstractAvoidanceDecorator.getEdgeAttributesOfInterestNames()).thenReturn(AVOIDANCES);
-
-        assertEquals(buildErrorMessageString(WRONG_AVOIDANCE, "avoidances", AVOIDANCES),
-                graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse)
-                        .getErrors().get(0).getMessage());
-    }
+	private void verifyNoError()
+	{
+		verify(response, never()).addError((Throwable) Matchers.any());
+	}
 
 }
