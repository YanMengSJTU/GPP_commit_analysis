diff --git a/Tasks_Amal.txt b/Tasks_Amal.txt
index 178755f7b6..52ef608680 100644
--- a/Tasks_Amal.txt
+++ b/Tasks_Amal.txt
@@ -11,15 +11,48 @@ Graphhopper web
 
 TODO:
 ----
-1. Graphhopper: Building noise encoder that accesses noise readings from redis for possible returned paths, and returns the path with min total noise
+1. Graphhopper: Building noise encoder that accesses noise readings from redis and returns the path with min total noise.
+   -> Actually NoiseWeighting, not encoder. Encoder is per Vechile, e.g. CarFlagEncoder, BikeFlagEnclder...etc, and is only used when
+      calculating the 'fastest' route (weighting is set to 'fastest') because the minimization of time will depond on the speed of every
+      vechile. For shortest and LeastNoisy, only distance matters!
+   -> Check Chweighting which is called by other algorithms to see of NoiseWeightig needs to be incorporated by anyway
 
-2. If more than one vechile is specified in "osmreader.acceptway" in config.properties, the aplication raises an exception when it runs; i.e "Multiple encoders are active, can't return one". currently, only one vechile type is accepted; car,foot,bike,mtb,racingbike.
+2. Required changes in Python code: There is no way in Redis to change the database name, so that it can carry the city name and the type
+  of readings to be able to connect to the appropriate database during routing to capture relevant sensor readings. Here we assume that 
+  every city+sensor reading type is stored in a separate database. Another solution is to store everything in the same database, 
+  but the keys of the hashes should carry the type of the reading; i.e. city_type_edge (from the config file).
+
+3. write a program in java that populates all Dublin Edges with random noise values (from 0-80) for testing purposes
+
+
+4. instructions should also include noise readings on different segments when least-noise weighting is selected
+
+
+5. When routing based on the noise readings, shall we take distance into consideration, the algorithm might return a very long route
+   just because it's the least noisy. A solution could be to have two weighting: 'least_noisy' that takes distance into account, and
+   abolute-least-noisy' that just cares about noise.
+
+6. Investigate with heatmap on the visualization of noise readings on the map! would be cool
+
+7. If Bike or Foot is specificed in 'acceptWay' in config file, the user to be provided the option to specify 'Elevation' Yes or NO
+   -> elevation is equals false by default
+
+
+8. Generate an Andriod app out of the Netbeans project
+
+
+9. in LeastNoisyWeighting, check what calls getMinWeight() method, and what it's needed for 
+
+
+10. If more than one vechile is specified in "osmreader.acceptway" in config.properties, the aplication raises an exception when it runs; i.e "Multiple encoders are active, can't return one". currently, only one vechile type is accepted; car,foot,bike,mtb,racingbike.
    -> This exception is actually coming from EncodingManger when encodingManager.getSingle() is called inside route() inside graphhopper
    -> Also check getVehicleCount() inside encodingManager()
    -> Maybe this could be solved by defining another method similar to getSingle() that returns multiple FlagEncoder corresponding to
       the values specified in osmreader.acceptWay
 
-3. If Bike or Foot is specificed in 'acceptWay' in config file, the user to be provided the option to specify 'Elevation' Yes or NO
-   -> elevation is equals false by default
 
-4. check wehen running from netbeans, what is the root dir? cant find file, and cant read sensor data!
\ No newline at end of file
+11. check wehen running from netbeans, what is the root dir? cant find file, and cant read sensor data!
+
+
+
+
