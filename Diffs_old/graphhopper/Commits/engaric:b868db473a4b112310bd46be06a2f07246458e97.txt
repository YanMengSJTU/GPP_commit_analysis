diff --git a/core/src/main/java/com/graphhopper/util/shapes/GHPoint.java b/core/src/main/java/com/graphhopper/util/shapes/GHPoint.java
index f9cbb74979..e3b972d5ea 100644
--- a/core/src/main/java/com/graphhopper/util/shapes/GHPoint.java
+++ b/core/src/main/java/com/graphhopper/util/shapes/GHPoint.java
@@ -20,6 +20,7 @@
 import org.geotools.referencing.CRS;
 import org.opengis.geometry.MismatchedDimensionException;
 import org.opengis.referencing.FactoryException;
+import org.opengis.referencing.NoSuchAuthorityCodeException;
 import org.opengis.referencing.crs.CoordinateReferenceSystem;
 import org.opengis.referencing.operation.TransformException;
 
@@ -140,10 +141,16 @@ public static GHPoint parse( String str, String srs )
 	        CoordinateReferenceSystem inputCRS = srs.equalsIgnoreCase(BNG)||srs.equalsIgnoreCase(OpenCoordConverter.BNG_CRS_CODE)?OpenCoordConverter.bngCoordRefSystem:CRS.decode(srs);
 	        LatLong transformFromSourceCRSToTargetCRS = OpenCoordConverter.transformFromSourceCRSToTargetCRS(inputCRS, outputCRS, sourceXCoordinate, sourceYCoordinate, true);
 	        return new GHPoint(transformFromSourceCRSToTargetCRS.getLatAngle(), transformFromSourceCRSToTargetCRS.getLongAngle());
-        } catch (FactoryException | MismatchedDimensionException | TransformException e)
+        } catch (TransformException | IllegalArgumentException e)
         {
-        	// Fall through to return a null below
-        }
-	    return null;
+        	throw new IllegalArgumentException("Point "
+					+ str
+					+ " is not a valid point. Point must be a comma separated coordinate in "
+					+ srs
+					+ " projection.");
+        } catch (FactoryException e)
+        {
+	       throw new IllegalArgumentException("Srs " + srs + " is not a valid srs for input.");
+        } 
     }
 }
diff --git a/core/src/main/java/com/graphhopper/util/shapes/GHResponseCoordinateTransformer.java b/core/src/main/java/com/graphhopper/util/shapes/GHResponseCoordinateTransformer.java
new file mode 100644
index 0000000000..668671837f
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/util/shapes/GHResponseCoordinateTransformer.java
@@ -0,0 +1,69 @@
+package com.graphhopper.util.shapes;
+
+import java.security.InvalidParameterException;
+
+import org.geotools.referencing.CRS;
+import org.opengis.geometry.MismatchedDimensionException;
+import org.opengis.referencing.FactoryException;
+import org.opengis.referencing.crs.CoordinateReferenceSystem;
+import org.opengis.referencing.operation.TransformException;
+
+import uk.co.ordnancesurvey.api.srs.LatLong;
+import uk.co.ordnancesurvey.api.srs.OpenCoordConverter;
+
+import com.graphhopper.GHResponse;
+import com.graphhopper.util.PointList;
+
+public class GHResponseCoordinateTransformer
+{
+
+	private static final String BNG = "BNG";
+	private CoordinateReferenceSystem targetCRS = OpenCoordConverter.wgs84CoordRefSystem;
+
+	public GHResponseCoordinateTransformer( String crsCode ) throws InvalidParameterException
+	{
+		if(!crsCode.equalsIgnoreCase("WGS84"))
+	        try
+            {
+	            targetCRS = crsCode.equalsIgnoreCase(BNG) ? OpenCoordConverter.bngCoordRefSystem : CRS
+	                .decode(crsCode);
+            } catch (FactoryException e)
+            {
+	           throw new IllegalArgumentException("Srs " + crsCode + " is not a valid srs for output.");
+            }
+	}
+
+	public void transformCoordinates( GHResponse response )
+	{
+		if(targetCRS.equals(OpenCoordConverter.wgs84CoordRefSystem))
+			return;
+		
+		PointList points = response.getPoints();
+		PointList transformedPoints = new PointList(points.getSize(), points.is3D());
+		try
+		{
+			GHPoint transformedPoint;
+			for (GHPoint3D ghPoint3D : points)
+			{
+				LatLong transformedCoordinate = OpenCoordConverter
+				        .transformFromSourceCRSToTargetCRS(OpenCoordConverter.wgs84CoordRefSystem,
+				                targetCRS, ghPoint3D.getLat(), ghPoint3D.getLon(), true);
+				if (points.is3D())
+					transformedPoint = new GHPoint3D(transformedCoordinate.getLatAngle(),
+					        transformedCoordinate.getLongAngle(), ghPoint3D.getElevation());
+				else
+					transformedPoint = new GHPoint(transformedCoordinate.getLatAngle(),
+					        transformedCoordinate.getLongAngle());
+
+				transformedPoints.add(transformedPoint);
+			}
+
+			response.setPoints(transformedPoints);
+		} catch (FactoryException | MismatchedDimensionException | TransformException e)
+		{
+			e.printStackTrace();
+		}
+
+	}
+
+}
diff --git a/core/src/test/java/com/graphhopper/util/shapes/GHPointTest.java b/core/src/test/java/com/graphhopper/util/shapes/GHPointTest.java
index 903cc17775..fd78afd036 100644
--- a/core/src/test/java/com/graphhopper/util/shapes/GHPointTest.java
+++ b/core/src/test/java/com/graphhopper/util/shapes/GHPointTest.java
@@ -56,6 +56,28 @@ public void testParse() {
     	assertEquals(2, parsedPoint.getLon(), 0);
     }
     
+    @Test
+    public void testParseWithInvalidSrs() {
+    	try {
+    		GHPoint.parse("1,2", "RANDOMCODE");
+    		fail("Error should have been thrown");
+    	}
+    	catch(IllegalArgumentException iae) {
+    		assertEquals("Srs RANDOMCODE is not a valid srs for input.", iae.getMessage());
+    	}
+    }
+    
+    @Test
+    public void testParseWithInvalidPoint() {
+    	try {
+    		GHPoint.parse("100000000000000000,2", "BNG");
+    		fail("Error should have been thrown");
+    	}
+    	catch(IllegalArgumentException iae) {
+    		assertEquals("Point 100000000000000000,2 is not a valid point. Point must be a comma separated coordinate in BNG projection.", iae.getMessage());
+    	}
+    }
+    
     @Test
     public void testParseWithSrsDefault() {
     	GHPoint parsedPoint = GHPoint.parse("1,2", WGS_84.toLowerCase());
diff --git a/core/src/test/java/com/graphhopper/util/shapes/GHResponseCoordinateTransformerTest.java b/core/src/test/java/com/graphhopper/util/shapes/GHResponseCoordinateTransformerTest.java
new file mode 100644
index 0000000000..52e89504f0
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/util/shapes/GHResponseCoordinateTransformerTest.java
@@ -0,0 +1,114 @@
+package com.graphhopper.util.shapes;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.fail;
+
+import java.util.Iterator;
+
+import org.junit.Test;
+import org.opengis.referencing.FactoryException;
+import org.opengis.referencing.operation.TransformException;
+
+import uk.co.ordnancesurvey.api.srs.LatLong;
+import uk.co.ordnancesurvey.api.srs.OpenCoordConverter;
+
+import com.graphhopper.GHResponse;
+import com.graphhopper.util.PointList;
+
+public class GHResponseCoordinateTransformerTest
+{
+
+	private static final String EPSG_27700 = "EPSG:27700";
+	private static final String BNG = "bng";
+	private static final String WGS84 = "wgs84";
+	private static final String EPSG_4326 = "EPSG:4326";
+	
+	@Test
+	public void testInvalidTransform() 
+	{
+		try {
+			new GHResponseCoordinateTransformer("RANDOMCODE");
+			fail("Error should be thrown");
+		}
+		catch (IllegalArgumentException iae) {
+			assertEquals("Srs RANDOMCODE is not a valid srs for output.", iae.getMessage());
+		}
+	}
+
+	@Test
+	public void testTransformPointListEPSG27700() throws FactoryException, TransformException 
+	{
+		GHResponse response = buildResponseObject();
+		GHResponse comparatorResponse = buildResponseObject();
+		GHResponseCoordinateTransformer transformer = new GHResponseCoordinateTransformer(EPSG_27700);
+		transformer.transformCoordinates(response);
+		
+		checkPointList(response, comparatorResponse);
+	}
+	
+	@Test
+	public void testTransformPointListBNG() throws FactoryException, TransformException
+	{
+		GHResponse response = buildResponseObject();
+		GHResponse comparatorResponse = buildResponseObject();
+		GHResponseCoordinateTransformer transformer = new GHResponseCoordinateTransformer(BNG);
+		transformer.transformCoordinates(response);
+		
+		checkPointList(response, comparatorResponse);
+	}
+	
+	@Test
+	public void testTransformPointListWGS84() throws FactoryException, TransformException
+	{
+		GHResponse response = buildResponseObject();
+		GHResponse comparatorResponse = buildResponseObject();
+		GHResponseCoordinateTransformer transformer = new GHResponseCoordinateTransformer(WGS84);
+		transformer.transformCoordinates(response);
+		
+		assertEquals(comparatorResponse.getPoints(), response.getPoints());
+	}
+	
+	@Test
+	public void testTransformPointListEPSG4326() throws FactoryException, TransformException
+	{
+		GHResponse response = buildResponseObject();
+		GHResponse comparatorResponse = buildResponseObject();
+		GHResponseCoordinateTransformer transformer = new GHResponseCoordinateTransformer(EPSG_4326);
+		transformer.transformCoordinates(response);
+		
+		assertEquals(comparatorResponse.getPoints(), response.getPoints());
+	}
+	
+	private void checkPointList( GHResponse response, GHResponse comparatorResponse )
+            throws FactoryException, TransformException
+    {
+	    PointList transformedPoints = response.getPoints();
+		PointList originPoints = comparatorResponse.getPoints();
+		
+		Iterator<GHPoint3D> transformedIter = transformedPoints.iterator();
+		Iterator<GHPoint3D> originIter = originPoints.iterator();
+		
+		while(transformedIter.hasNext()  && originIter.hasNext()) {
+			GHPoint3D transformedCompare = transformedIter.next();
+			GHPoint3D originCompare = originIter.next();
+			LatLong bng = OpenCoordConverter.toBNG(originCompare.getLat(), originCompare.getLon());
+			assertEquals(bng.getLatAngle(), transformedCompare.getLat(), 0);
+			assertEquals(bng.getLongAngle(), transformedCompare.getLon(), 0);
+		}
+		if(transformedIter.hasNext() || originIter.hasNext())
+			fail("PointLists hava different length");
+    }
+
+	private GHResponse buildResponseObject()
+    {
+	    GHResponse response = new GHResponse();
+		PointList points = new PointList();
+		GHPoint pointOne = new GHPoint(0, 0);
+		GHPoint pointTwo = new GHPoint(53.371275,-1.80187);
+		points.add(pointOne);
+		points.add(pointTwo);
+		response.setPoints(points);
+		return response;
+    }
+
+}
diff --git a/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java b/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
index 61b8362ebe..13ec79198b 100644
--- a/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
+++ b/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
@@ -63,6 +63,7 @@
 import com.graphhopper.util.shapes.BBox;
 import com.graphhopper.util.shapes.GHPoint;
 import com.graphhopper.util.shapes.GHPoint3D;
+import com.graphhopper.util.shapes.GHResponseCoordinateTransformer;
 
 /**
  * Servlet to use GraphHopper in a remote client application like mobile or browser. Note: If type
@@ -115,6 +116,7 @@ public GHResponse getGHResponse( HttpServletRequest httpReq, HttpServletResponse
 
 		GHResponse ghRsp = null;
 		List<GHPoint> infoPoints = null;
+		GHResponseCoordinateTransformer transformer =null;
 
 		try
 		{
@@ -124,6 +126,10 @@ public GHResponse getGHResponse( HttpServletRequest httpReq, HttpServletResponse
 
 			// we can reduce the path length based on the maximum differences to the original
 			// coordinates
+			
+			if(outputSrs.length()>0) {
+				transformer = new GHResponseCoordinateTransformer(srs);
+			}
 
 			if (!new CaseInsensitiveStringListValidator()
 			.isValid(localeStr, TranslationMap.LOCALES))
@@ -242,11 +248,14 @@ public GHResponse getGHResponse( HttpServletRequest httpReq, HttpServletResponse
 			}
 		} catch (Exception e)
 		{
+			if (e instanceof IllegalArgumentException) {
+				e = new InvalidParameterException(e.getMessage());
+			} 
 			ghRsp = new GHResponse().addError(e);
 		} finally
 		{
 			if(!ghRsp.hasErrors()  && !writeGPX) {
-				transformResponseCoords(ghRsp, outputSrs);
+				transformer.transformCoordinates(ghRsp);
 			}
 			float took = sw.stop().getSeconds();
 			String infoStr = httpReq.getRemoteAddr() + " " + httpReq.getLocale() + " "
@@ -303,30 +312,6 @@ public GHResponse getGHResponse( HttpServletRequest httpReq, HttpServletResponse
 		return ghRsp;
 	}
 
-	private void transformResponseCoords(GHResponse ghRsp, String srs) {
-		PointList points = ghRsp.getPoints();
-		PointList transformedPoints = new PointList(points.getSize(), points.is3D());
-		CoordinateReferenceSystem targetCRS;
-		try {
-			targetCRS = CRS.decode(srs);
-			GHPoint transformedPoint;
-			for (GHPoint3D ghPoint3D : points) {
-				LatLong transformedCoordinate = OpenCoordConverter.transformFromSourceCRSToTargetCRS(OpenCoordConverter.wgs84CoordRefSystem, targetCRS, ghPoint3D.getLat(), ghPoint3D.getLon(), true);
-				if(points.is3D()) 
-					transformedPoint = new GHPoint3D(transformedCoordinate.getLatAngle(), transformedCoordinate.getLongAngle(), ghPoint3D.getElevation());
-				else 
-					transformedPoint = new GHPoint(transformedCoordinate.getLatAngle(), transformedCoordinate.getLongAngle());
-				
-				transformedPoints.add(transformedPoint);
-			}
-			
-			ghRsp.setPoints(transformedPoints);
-		} catch (FactoryException | MismatchedDimensionException | TransformException e) {
-			e.printStackTrace();
-		}
-		
-	}
-
 	private String buildBooleanErrorMessageString( String paramValue, String paramName )
 	{
 		return buildErrorMessageString(paramValue, paramName,
