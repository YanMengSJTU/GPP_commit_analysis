diff --git a/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java b/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
index 41e3e1a688..3c30178ff5 100644
--- a/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
+++ b/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
@@ -82,7 +82,9 @@ void writePath( HttpServletRequest httpReq, HttpServletResponse res ) throws Exc
         boolean writeGPX = "gpx".equalsIgnoreCase(getParam(httpReq, "type", "json"));
         boolean enableInstructions = writeGPX || getBooleanParam(httpReq, "instructions", true);
         boolean calcPoints = getBooleanParam(httpReq, "calc_points", true);
-        boolean elevation = getBooleanParam(httpReq, "elevation", false);
+        boolean enableElevation = getBooleanParam(httpReq, "elevation", false);
+        boolean pointsEncoded = getBooleanParam(httpReq, "points_encoded", true);
+
         String vehicleStr = getParam(httpReq, "vehicle", "car");
         String weighting = getParam(httpReq, "weighting", "fastest");
         String algoStr = getParam(httpReq, "algorithm", "");
@@ -93,7 +95,7 @@ void writePath( HttpServletRequest httpReq, HttpServletResponse res ) throws Exc
         if (!hopper.getEncodingManager().supports(vehicleStr))
         {
             ghRsp = new GHResponse().addError(new IllegalArgumentException("Vehicle not supported: " + vehicleStr));
-        } else if (elevation && !hopper.hasElevation())
+        } else if (enableElevation && !hopper.hasElevation())
         {
             ghRsp = new GHResponse().addError(new IllegalArgumentException("Elevation not supported!"));
         } else
@@ -127,9 +129,18 @@ void writePath( HttpServletRequest httpReq, HttpServletResponse res ) throws Exc
                     + "min, points:" + ghRsp.getPoints().getSize() + ", debug - " + ghRsp.getDebugInfo());
 
         if (writeGPX)
+        {
             writeResponse(res, createGPXString(httpReq, res, ghRsp));
-        else
-            writeJson(httpReq, res, new JSONObject(createJson(httpReq, ghRsp, took)));
+        } else
+        {
+            Map<String, Object> map = createJson(ghRsp,
+                    calcPoints, pointsEncoded, enableElevation, enableInstructions);
+            Object infoMap = map.get("info");
+            if (infoMap != null)
+                ((Map) infoMap).put("took", Math.round(took * 1000));
+
+            writeJson(httpReq, res, new JSONObject(map));
+        }
     }
 
     protected String createGPXString( HttpServletRequest req, HttpServletResponse res, GHResponse rsp )
@@ -177,12 +188,12 @@ String errorsToXML( List<Throwable> list ) throws Exception
         return writer.toString();
     }
 
-    protected Map<String, Object> createJson( HttpServletRequest req, GHResponse rsp, float took )
+    protected Map<String, Object> createJson( GHResponse rsp,
+            boolean calcPoints,
+            boolean pointsEncoded,
+            boolean includeElevation,
+            boolean enableInstructions )
     {
-        boolean enableInstructions = getBooleanParam(req, "instructions", true);
-        boolean pointsEncoded = getBooleanParam(req, "points_encoded", true);
-        boolean calcPoints = getBooleanParam(req, "calc_points", true);
-        boolean includeElevation = getBooleanParam(req, "elevation", false);
         Map<String, Object> json = new HashMap<String, Object>();
         Map<String, Object> jsonInfo = new HashMap<String, Object>();
         json.put("info", jsonInfo);
@@ -201,7 +212,6 @@ String errorsToXML( List<Throwable> list ) throws Exception
             jsonInfo.put("errors", list);
         } else
         {
-            jsonInfo.put("took", Math.round(took * 1000));
             Map<String, Object> jsonPath = new HashMap<String, Object>();
             jsonPath.put("distance", Helper.round(rsp.getDistance(), 3));
             jsonPath.put("weight", Helper.round6(rsp.getDistance()));
@@ -243,7 +253,7 @@ protected Object createPoints( PointList points, boolean pointsEncoded, boolean
         return jsonPoints;
     }
 
-    protected List<GHPoint> getPoints( HttpServletRequest req, String key ) throws IOException
+    protected List<GHPoint> getPoints( HttpServletRequest req, String key )
     {
         String[] pointsAsStr = getParams(req, key);
         final List<GHPoint> infoPoints = new ArrayList<GHPoint>(pointsAsStr.length);
