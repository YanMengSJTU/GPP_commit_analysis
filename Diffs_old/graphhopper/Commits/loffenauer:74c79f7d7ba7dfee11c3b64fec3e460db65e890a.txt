diff --git a/core/src/main/java/com/graphhopper/routing/util/WheelChairFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/WheelChairFlagEncoder.java
new file mode 100755
index 0000000000..a381a9b894
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/routing/util/WheelChairFlagEncoder.java
@@ -0,0 +1,149 @@
+/*
+ *  Licensed to GraphHopper and Peter Karich under one or more contributor
+ *  license agreements. See the NOTICE file distributed with this work for 
+ *  additional information regarding copyright ownership.
+ *
+ *  GraphHopper licenses this file to you under the Apache License, 
+ *  Version 2.0 (the "License"); you may not use this file except in 
+ *  compliance with the License. You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package com.graphhopper.routing.util;
+
+import com.graphhopper.reader.OSMWay;
+import java.util.*;
+
+/**
+ * Specifies the settings for cycletouring/trekking
+ * <p/>
+ * @author ratrun
+ * @author Peter Karich
+ * @author Raphael Volz
+ */
+public class WheelChairFlagEncoder extends BikeCommonFlagEncoder
+{
+    public WheelChairFlagEncoder()
+    {
+        this(4, 2, 0);
+    }
+
+    public WheelChairFlagEncoder( String propertiesStr )
+    {
+        this((int) parseLong(propertiesStr, "speedBits", 4),
+                parseDouble(propertiesStr, "speedFactor", 2),
+                parseBoolean(propertiesStr, "turnCosts", false) ? 3 : 0);
+    }   
+
+    public WheelChairFlagEncoder( int speedBits, double speedFactor, int maxTurnCosts )
+    {
+        super(speedBits, speedFactor, maxTurnCosts);
+        
+        restrictions.addAll(Arrays.asList("bicycle", "access"));
+        restrictedValues.add("private");
+        restrictedValues.add("no");
+        restrictedValues.add("restricted");
+        restrictedValues.add("steps");
+
+        addPushingSection("path");
+        addPushingSection("footway");
+        addPushingSection("pedestrian");
+        
+        avoidHighwayTags.add("trunk");
+        avoidHighwayTags.add("trunk_link");
+        avoidHighwayTags.add("primary");
+        avoidHighwayTags.add("primary_link");
+        avoidHighwayTags.add("secondary");
+        avoidHighwayTags.add("secondary_link");
+
+        // preferHighwayTags.add("road");
+        preferHighwayTags.add("service");
+        preferHighwayTags.add("tertiary");
+        preferHighwayTags.add("tertiary_link");
+        preferHighwayTags.add("residential");
+        preferHighwayTags.add("unclassified");
+        
+        // Setup Speeds for WheelChairs
+        setTrackTypeSpeed("grade1", 3); // paved
+        setTrackTypeSpeed("grade2", 3); // now unpaved ...
+        setTrackTypeSpeed("grade3", 2);
+        setTrackTypeSpeed("grade4", 6);
+        setTrackTypeSpeed("grade5", 4); // like sand/grass     
+
+        setSurfaceSpeed("paved", 3);
+        setSurfaceSpeed("asphalt", 3);
+        setSurfaceSpeed("cobblestone", 2);
+        setSurfaceSpeed("cobblestone:flattened", 2);
+        setSurfaceSpeed("sett", 2);
+        setSurfaceSpeed("concrete", 3);
+        setSurfaceSpeed("concrete:lanes", 3);
+        setSurfaceSpeed("concrete:plates", 3);
+        setSurfaceSpeed("paving_stones", 3);
+        setSurfaceSpeed("paving_stones:30", 3);
+        setSurfaceSpeed("unpaved", 2);
+        setSurfaceSpeed("compacted", 3);
+        setSurfaceSpeed("dirt", 2);
+        setSurfaceSpeed("earth", 3);
+        setSurfaceSpeed("fine_gravel", 3);
+        setSurfaceSpeed("grass", 2);
+        setSurfaceSpeed("grass_paver", 2);
+        setSurfaceSpeed("gravel", 3);
+        setSurfaceSpeed("ground", 3);
+        setSurfaceSpeed("ice", PUSHING_SECTION_SPEED / 2);
+        setSurfaceSpeed("metal", 2);
+        setSurfaceSpeed("mud", 2);
+        setSurfaceSpeed("pebblestone", 3);
+        setSurfaceSpeed("salt", 2);
+        setSurfaceSpeed("sand", 1);
+        setSurfaceSpeed("wood", 2);
+
+        setHighwaySpeed("living_street", 6);
+
+        setHighwaySpeed("cycleway", 3);
+        setHighwaySpeed("path", 3);
+        setHighwaySpeed("footway", 6);
+        setHighwaySpeed("pedestrian", 6);
+        setHighwaySpeed("track", 3);
+        setHighwaySpeed("service", 3);
+        setHighwaySpeed("residential", 3);
+        // no other highway applies:
+        setHighwaySpeed("unclassified", 3);
+        // unknown road:
+        setHighwaySpeed("road", 3);
+
+        setHighwaySpeed("trunk", 3);
+        setHighwaySpeed("trunk_link", 3);
+        setHighwaySpeed("primary", 3);
+        setHighwaySpeed("primary_link", 3);
+        setHighwaySpeed("secondary", 3);
+        setHighwaySpeed("secondary_link", 3);
+        setHighwaySpeed("tertiary", 3);
+        setHighwaySpeed("tertiary_link", 3);
+
+        // special case see tests and #191
+        setHighwaySpeed("motorway", 3);
+        setHighwaySpeed("motorway_link", 3);
+        
+    }
+
+    @Override
+    boolean isPushingSection( OSMWay way )
+    {
+        String highway = way.getTag("highway");
+        String trackType = way.getTag("tracktype");
+        return way.hasTag("highway", pushingSections)
+                || "track".equals(highway) && trackType != null && !"grade1".equals(trackType);
+    }
+
+    @Override
+    public String toString()
+    {
+        return "wheelchair";
+    }
+}
