diff --git a/web/src/main/java/com/graphhopper/http/GHBaseServlet.java b/web/src/main/java/com/graphhopper/http/GHBaseServlet.java
index 78da9f1895..117d67ebaa 100644
--- a/web/src/main/java/com/graphhopper/http/GHBaseServlet.java
+++ b/web/src/main/java/com/graphhopper/http/GHBaseServlet.java
@@ -65,12 +65,12 @@
 	protected boolean internalErrorsAllowed;
 
 	protected void writeJson( HttpServletRequest req, HttpServletResponse res, JSONObject json )
-	        throws JSONException, IOException
+			throws JSONException, IOException
 	{
 		String type = getParam(req, "type", "json");
 		res.setCharacterEncoding("UTF-8");
 		boolean debug = getBooleanParam(req, "debug", false)
-		        || getBooleanParam(req, "pretty", false);
+				|| getBooleanParam(req, "pretty", false);
 		if ("jsonp".equals(type))
 		{
 			res.setContentType("application/javascript");
@@ -178,8 +178,8 @@ protected double getDoubleParam( HttpServletRequest req, String string, double _
 	}
 
 	protected List<GHPoint> getPoints( HttpServletRequest req, String key )
-	        throws InvalidParameterException
-	{
+			throws InvalidParameterException
+			{
 		String[] pointsAsStr = getParams(req, key);
 		final List<GHPoint> infoPoints = new ArrayList<GHPoint>(pointsAsStr.length);
 		for (String str : pointsAsStr)
@@ -190,18 +190,19 @@ protected double getDoubleParam( HttpServletRequest req, String string, double _
 				infoPoints.add(point);
 			} else
 			{
+				System.out.println("Throw an exception");
 				throw new InvalidParameterException(
-				        "Point "
-				                + str
-				                + " is not a valid point. Point must be a comma separated coordinate in WGS84 projection.");
+						"Point "
+								+ str
+								+ " is not a valid point. Point must be a comma separated coordinate in WGS84 projection.");
 			}
 		}
 
 		return infoPoints;
-	}
+			}
 
 	protected void processResponseErrors( GHResponse rsp, Map<String, Object> json,
-			boolean internalErrorsAllowed )
+	        boolean internalErrorsAllowed )
 	{
 		if (rsp.hasErrors())
 		{
@@ -232,7 +233,7 @@ protected void processResponseErrors( GHResponse rsp, Map<String, Object> json,
 	}
 
 	protected String createGPXString( HttpServletRequest req, HttpServletResponse res,
-			GHResponse rsp )
+	        GHResponse rsp )
 	{
 		boolean includeElevation = getBooleanParam(req, "elevation", false);
 		res.setCharacterEncoding("UTF-8");
diff --git a/web/src/main/java/com/graphhopper/http/GHServletModule.java b/web/src/main/java/com/graphhopper/http/GHServletModule.java
index 4e910d80da..e25a7ed65c 100644
--- a/web/src/main/java/com/graphhopper/http/GHServletModule.java
+++ b/web/src/main/java/com/graphhopper/http/GHServletModule.java
@@ -33,12 +33,15 @@
 	protected Map<String, String> params = new HashMap<String, String>();
 	protected final CmdArgs args;
 
+	public static String INVALID_REGEX1 = "^((?![.]html|css|js|png|gif).)*$";
+	public static String INVALID_REGEX2 = "([^\\/])";
+
 	public GHServletModule( CmdArgs args )
 	{
 		this.args = args;
 		params.put("mimeTypes", "text/html," + "text/plain," + "text/xml,"
-		        + "application/xhtml+xml," + "text/css," + "application/json,"
-		        + "application/javascript," + "image/svg+xml");
+				+ "application/xhtml+xml," + "text/css," + "application/json,"
+				+ "application/javascript," + "image/svg+xml");
 	}
 
 	@Override
@@ -52,7 +55,7 @@ protected void configureServlets()
 
 		filter("*").through(IPFilter.class);
 		bind(IPFilter.class).toInstance(
-		        new IPFilter(args.get("jetty.whiteips", ""), args.get("jetty.blackips", "")));
+				new IPFilter(args.get("jetty.whiteips", ""), args.get("jetty.blackips", "")));
 
 		serve("/i18n", "/i18n/").with(I18NServlet.class);
 		bind(I18NServlet.class).in(Singleton.class);
@@ -72,7 +75,7 @@ protected void configureServlets()
 		bind(NearestServlet.class).in(Singleton.class);
 
 		// Serve files that don't contain cetain file extensions
-		serveRegex("^((?![.]html|css|js|png|gif).)*$").with(InvalidRequestServlet.class);
+		serveRegex(INVALID_REGEX1).with(InvalidRequestServlet.class);
 		bind(InvalidRequestServlet.class).in(Singleton.class);
 	}
 }
diff --git a/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java b/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
index 5ab2336158..8c811839a3 100644
--- a/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
+++ b/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
@@ -46,7 +46,6 @@
 import com.graphhopper.routing.util.AbstractFlagEncoder;
 import com.graphhopper.routing.util.EncoderDecorator;
 import com.graphhopper.routing.util.FlagEncoder;
-import com.graphhopper.routing.util.Weighting;
 import com.graphhopper.routing.util.WeightingMap;
 import com.graphhopper.util.Helper;
 import com.graphhopper.util.InstructionList;
@@ -104,18 +103,12 @@ public GHResponse getGHResponse( HttpServletRequest httpReq, HttpServletResponse
 		String noThroughAccessString = getParam(httpReq, "private", "true");
 
 		GHResponse ghRsp = null;
-		List<GHPoint> infoPoints;
+		List<GHPoint> infoPoints = null;
 
 		try
 		{
 			infoPoints = getPoints(httpReq, "point");
-		} catch (InvalidParameterException e)
-		{
-			return new GHResponse().addError(e);
-		}
 
-		try
-		{
 			ApiResource.ROUTE.checkAllRequestParameters(httpReq);
 
 			// we can reduce the path length based on the maximum differences to the original
@@ -140,10 +133,11 @@ public GHResponse getGHResponse( HttpServletRequest httpReq, HttpServletResponse
 				        AlgorithmOptions.DIJKSTRA_ONE_TO_MANY);
 				ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg));
 			} else if (null != weighting
-			        && !new CaseInsensitiveStringListValidator().isValid(weighting,
-			                "fastest","shortest" ))
+			        && !new CaseInsensitiveStringListValidator().isValid(weighting, "fastest",
+							"shortest"))
 			{
-				String errMesg = buildErrorMessageString(weighting, "weighting","fastest","shortest");
+				String errMesg = buildErrorMessageString(weighting, "weighting", "fastest",
+						"shortest");
 				ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg));
 			} else if (!new BooleanValidator().isValid(instructionsString))
 			{
@@ -173,11 +167,11 @@ public GHResponse getGHResponse( HttpServletRequest httpReq, HttpServletResponse
 				        "Vehicle %s is not a valid vehicle. Valid vehicles are %s", vehicleStr,
 				        supported);
 				ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg));
-			} else if (!new BooleanValidator().isValid(noThroughAccessString)) 
+			} else if (!new BooleanValidator().isValid(noThroughAccessString))
 			{
 				String errMesg = buildBooleanErrorMessageString(noThroughAccessString, "private");
 				ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg));
-			
+
 			} else if (enableElevation && !hopper.hasElevation())
 			{
 				ghRsp = new GHResponse().addError(new InvalidParameterException(
@@ -235,23 +229,22 @@ public GHResponse getGHResponse( HttpServletRequest httpReq, HttpServletResponse
 					ghRsp = hopper.route(request);
 				}
 			}
-		} catch (NoSuchParameterException | MissingParameterException | InvalidParameterException e)
+		} catch (Exception e)
 		{
 			ghRsp = new GHResponse().addError(e);
 		} finally
 		{
-
 			float took = sw.stop().getSeconds();
 			String infoStr = httpReq.getRemoteAddr() + " " + httpReq.getLocale() + " "
 			        + httpReq.getHeader("User-Agent");
 			String logStr = httpReq.getQueryString() + " " + infoStr + " " + infoPoints + ", took:"
 			        + took + ", " + algoStr + ", " + weighting + ", " + vehicleStr;
 
-			if (ghRsp.hasErrors()) {
+			if (ghRsp.hasErrors())
+			{
 				logger.error(logStr + ", errors:" + ghRsp.getErrors());
 				logger.info("GraphHopperServlet.getGHResponse(ERROR)");
-			}
-			else
+			} else
 				logger.info(logStr + ", distance: " + ghRsp.getDistance() + ", time:"
 				        + Math.round(ghRsp.getTime() / 60000f) + "min, points:"
 				        + ghRsp.getPoints().getSize() + ", debug - " + ghRsp.getDebugInfo());
@@ -268,7 +261,6 @@ public GHResponse getGHResponse( HttpServletRequest httpReq, HttpServletResponse
 			} else
 			{
 				String type = getParam(httpReq, "type", "json");
-				System.err.println("TYPE:" + type) ;
 				if (!"json".equalsIgnoreCase(type)
 				        || (!"jsonp".equalsIgnoreCase(type) && jsonpAllowed))
 				{
@@ -277,8 +269,7 @@ public GHResponse getGHResponse( HttpServletRequest httpReq, HttpServletResponse
 					errorMessage += jsonpAllowed ? "JSON, GPX or JSONP." : "GPX or JSON.";
 					ghRsp.addError(new InvalidParameterException(errorMessage));
 				}
-				logger.info("GraphHopperServlet.getGHResponse("+ enableInstructions
-						+ ")");
+				logger.info("GraphHopperServlet.getGHResponse(" + enableInstructions + ")");
 				Map<String, Object> map = createJson(ghRsp, calcPoints, pointsEncoded,
 				        enableElevation, enableInstructions);
 				Object infoMap = map.get("info");
