diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
index feeb8aaadd..d5f0197681 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
@@ -81,7 +81,7 @@ public void overrideTestONProperty() {
 
 	@Given("^My routing ([^\"]*) for nearestPoint API as \"([^\"]*)\"$")
 	public void I_have_route_point_for_Nearest_Point_API(String paramName,
-			String pointA) {
+			String pointA) throws IOException {
 		graphUiUtil.getNearestPoint(paramName, pointA);
 
 	}
@@ -206,7 +206,7 @@ public void I_should_be_able_to_verify_the_http_response_message_as(
 	}
 
 	@When("^I request for a route$")
-	public void I_request_for_route() {
+	public void I_request_for_route() throws IOException {
 
 		String testON = IntegrationTestProperties.getTestProperty("testON");
 
diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
index a91aca5691..1e89b74f40 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
@@ -713,28 +713,23 @@ protected void addRoutePointsToParameters(String paramName, DataTable dt) {
 
 	}
 
-	public void getRouteFromServiceWithParameters(StringBuffer sb) {
+	public void getRouteFromServiceWithParameters(StringBuffer sb) throws IOException {
 
 		sendAndGetResponse(sb);
 
 	}
 
-	void sendAndGetResponse(StringBuffer sb) {
+	void sendAndGetResponse(StringBuffer sb) throws IOException {
 		String serviceResponse = "";
-		try {
-			CloseableHttpResponse httpResponse = dispatchServiceRequest(sb
+		CloseableHttpResponse httpResponse = dispatchServiceRequest(sb
 					.toString());
-			serviceResponse = IOUtils.toString(httpResponse.getEntity()
+		serviceResponse = IOUtils.toString(httpResponse.getEntity()
 					.getContent(), "UTF-8");
 
-			final StatusLine statusLine = httpResponse.getStatusLine();
-
-			actualResponseCode = statusLine.getStatusCode();
-			actualResponseMsg = statusLine.getReasonPhrase();
+		final StatusLine statusLine = httpResponse.getStatusLine();
 
-		} catch (IOException e) {
-			LOG.info("Exception raised whilst attempting to call graphhopper server ", e);
-		}
+		actualResponseCode = statusLine.getStatusCode();
+		actualResponseMsg = statusLine.getReasonPhrase();
 
 		if (serviceResponse != null && serviceResponse.length() > 0) {
 
@@ -817,7 +812,7 @@ CloseableHttpResponse doSendAndGetResponse(String serviceUrl)
 		return httpClient.execute(httpRequest);
 	}
 
-	protected void getRouteFromServiceWithParameters() {
+	protected void getRouteFromServiceWithParameters() throws IOException {
 
 		if (IntegrationTestProperties.getTestPropertyBool("viaApigee")) {
 			sb.append(IntegrationTestProperties
@@ -1097,7 +1092,7 @@ public void verifyStatusCode(int statusCode) {
 		return requestParameters;
 	}
 
-	public void getNearestPoint(String paramName, String pointA) {
+	public void getNearestPoint(String paramName, String pointA) throws IOException {
 
 		StringBuffer sb = new StringBuffer();
 		if (IntegrationTestProperties.getTestPropertyBool("viaApigee")) {
