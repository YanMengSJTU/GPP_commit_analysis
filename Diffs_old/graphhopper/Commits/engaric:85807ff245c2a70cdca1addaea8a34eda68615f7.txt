diff --git a/acceptancetesting/pom.xml b/acceptancetesting/pom.xml
index 8d4ef61a40..2629c9042a 100644
--- a/acceptancetesting/pom.xml
+++ b/acceptancetesting/pom.xml
@@ -112,6 +112,16 @@
 			<artifactId>commons-httpclient</artifactId>
 			<version>3.1</version>
 		</dependency>
+		<dependency>
+			<groupId>com.googlecode.json-simple</groupId>
+			<artifactId>json-simple</artifactId>
+			<version>1.1</version>
+		</dependency>
+		<dependency>
+			<groupId>com.google.code.gson</groupId>
+			<artifactId>gson</artifactId>
+			<version>2.3.1</version>
+		</dependency>
 	</dependencies>
 
 	<dependencyManagement>
diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperGPXParserRouteTest.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperGPXParserRouteTest.java
index aaa60739c9..4687470858 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperGPXParserRouteTest.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperGPXParserRouteTest.java
@@ -86,7 +86,7 @@ private void addCustomHeaders(HttpGet httpget) {
 		}
 	}
 
-	private CloseableHttpResponse doSendAndGetResponse(String serviceUrl)
+	CloseableHttpResponse doSendAndGetResponse(String serviceUrl)
 			throws IOException, ClientProtocolException {
 		CloseableHttpClient httpClient = HttpClientUtils.createClient();
 		HttpGet httpget = new HttpGet(serviceUrl);
@@ -243,7 +243,7 @@ public boolean routeContainsTurn(String turnDescription, Route aRoute) {
 		return routeContainsTurn;
 	}
 
-	private CloseableHttpResponse sendAndGetResponse(String requestUrl)
+	CloseableHttpResponse sendAndGetResponse(String requestUrl)
 			throws IOException {
 		String serviceUrl = requestUrl;
 		if (IntegrationTestProperties.getTestPropertyBool("viaApigee")) {
diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperJSONParser.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperJSONParser.java
new file mode 100644
index 0000000000..f0657de0b4
--- /dev/null
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperJSONParser.java
@@ -0,0 +1,168 @@
+package uk.co.ordnancesurvey.gpx.graphhopper;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Date;
+import java.util.HashSet;
+
+import org.alternativevision.gpx.beans.Waypoint;
+import org.apache.commons.io.IOUtils;
+import org.apache.http.client.methods.CloseableHttpResponse;
+import org.junit.Test;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import uk.co.ordnancesurvey.gpx.beans.RouteWayPoint;
+import uk.co.ordnancesurvey.gpx.extensions.ExtensionConstants;
+
+import com.google.gson.JsonArray;
+import com.google.gson.JsonElement;
+import com.google.gson.JsonObject;
+import com.google.gson.JsonParser;
+import com.google.gson.JsonPrimitive;
+
+public class GraphHopperJSONParser {
+
+	JSONWayPoints json = new JSONWayPoints();
+	private static final Logger LOG = LoggerFactory
+			.getLogger(GraphHopperJSONParser.class);
+	String jsonString;
+
+	public GraphHopperJSONParser(String responseString) {
+		jsonString = responseString;
+	}
+
+
+	public GraphHopperJSONParser() {
+		// TODO Auto-generated constructor stub
+	}
+
+	public JSONWayPoints parseJSONFromString(String jsonString) {
+
+		JsonParser parser = new JsonParser();
+		JsonElement je = parser.parse(jsonString);
+		JsonObject jo = je.getAsJsonObject();
+		JsonArray paths = jo.getAsJsonArray("paths");
+
+		JsonArray instructions = paths.get(0).getAsJsonObject()
+				.getAsJsonArray("instructions");
+
+		for (int i = 0; i < instructions.size(); i++) {
+			Waypoint w = new Waypoint();
+
+			JsonObject instruction = instructions.get(i).getAsJsonObject();
+
+			JsonPrimitive description = instruction.getAsJsonPrimitive("text");
+			JsonPrimitive time = instruction.getAsJsonPrimitive("time");
+			JsonPrimitive distance = instruction.getAsJsonPrimitive("distance");
+			JsonPrimitive azimuth = instruction.getAsJsonPrimitive("azimuth");
+			w.setDescription(description.toString());
+			w.addExtensionData(ExtensionConstants.DISTANCE, distance.toString());
+			w.addExtensionData(ExtensionConstants.TIME, time.toString());
+			// w.addExtensionData("azimuth",azimuth.toString());
+			System.out.println("azimuth :" + azimuth);
+			System.out.println("descritption: " + description);
+			System.out.println("time :" + time);
+			System.out.println("distance :" + distance);
+			json.addWayPoint(w);
+		}
+
+		return json;
+
+	}
+
+	public void parse(String routeType, String vehicle, String[] string) {
+
+		// Set up the URL
+		String jsonResponse = "";
+		String coordinateString = "";
+		String graphHopperUrl;
+
+		for (int i = 0; i < string.length; i++) {
+
+			coordinateString = coordinateString + "&point=" + string[i];
+
+		}
+
+		if (IntegrationTestProperties.getTestPropertyBool("viaApigee")) {
+			graphHopperUrl = IntegrationTestProperties
+					.getTestProperty("graphHopperWebUrlViaApigee");
+		} else {
+			graphHopperUrl = IntegrationTestProperties
+					.getTestProperty("graphHopperWebUrlViaApigee");
+		}
+
+		String apikey= IntegrationTestProperties.getTestProperty("apiKey");
+		StringBuilder sb = new StringBuilder();
+		sb.append(graphHopperUrl);
+		sb.append("route?");
+		if (routeType != null) {
+			sb.append("type=");
+			sb.append(routeType);
+		}
+		sb.append("&vehicle=");
+		sb.append(vehicle);
+		sb.append(coordinateString);
+		sb.append("&apikey=");
+		sb.append(apikey);
+		GraphHopperGPXParserRouteTest GPHService = new GraphHopperGPXParserRouteTest();
+		try {
+			CloseableHttpResponse httpResponse = GPHService
+					.sendAndGetResponse(sb.toString());
+			jsonResponse = IOUtils.toString(httpResponse.getEntity()
+					.getContent(), "UTF-8");
+
+		} catch (IOException e) {
+			LOG.info("Exception raised whilst attempting to call graphhopper server "
+					+ e.getMessage());
+		}
+
+		if (jsonResponse != null && jsonResponse.length() > 0) {
+			parseJSONFromString(jsonResponse);
+		}
+
+	}
+
+
+	/**
+	 * verifies if the waypoint is present in the JSON string.
+	 * @param Waypoint
+	 * @return true if Waypoint is found in the JSON string and
+	 * otherwise false is returned
+	 */
+	public boolean isWayPointinPath(Waypoint w) {
+		boolean iswaypointinPath = false;
+		
+
+		for (Waypoint wp : json.getInstructions()) {
+			
+			RouteWayPoint k= new RouteWayPoint(wp);
+			iswaypointinPath=k.equals(new RouteWayPoint(w));
+		if (iswaypointinPath)
+		{
+			break;
+		}
+		}
+
+		return iswaypointinPath;
+
+	}
+
+	/**
+	 *Creates a Waypoint with  below attributes
+	 * @param wayPointDescription
+	 * @param time
+	 * @param distance
+	 * @return Waypoint
+	 */
+	public Waypoint buildWayPointForJson(String wayPointDescription,
+			String time, String distance) {
+		Waypoint w = new Waypoint();
+		w.setDescription(wayPointDescription);
+		w.addExtensionData(ExtensionConstants.DISTANCE, distance);
+		w.addExtensionData(ExtensionConstants.TIME, time);
+		return w;
+
+	}
+
+}
\ No newline at end of file
diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/JSONWayPoints.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/JSONWayPoints.java
new file mode 100644
index 0000000000..0c20196dfb
--- /dev/null
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/JSONWayPoints.java
@@ -0,0 +1,41 @@
+package uk.co.ordnancesurvey.gpx.graphhopper;
+
+import java.util.ArrayList;
+import java.util.HashSet;
+
+import org.alternativevision.gpx.beans.Waypoint;
+
+public class JSONWayPoints {
+	
+	
+	String JSONString;
+	ArrayList<Waypoint> instructions= new ArrayList<Waypoint>();
+
+	
+	/**
+	 * Adds a WayPoint to the Instructions ArrayList(WayPoint List)
+	 * @param waypoint
+	 * 
+	 */
+	public void addWayPoint(Waypoint w) {
+		
+		instructions.add(w);
+	}
+
+
+/**
+ * @return List of WayPoints in a JSON Route String
+ */
+public   ArrayList<Waypoint> getInstructions()
+{
+	return instructions;
+}
+	
+	
+	
+	
+	
+	
+	
+
+}
diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
index 28dd777fb8..58ae050658 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
@@ -38,11 +38,12 @@
 
 import uk.co.ordnancesurvey.gpx.extensions.ExtensionConstants;
 import uk.co.ordnancesurvey.gpx.graphhopper.GraphHopperGPXParserRouteTest;
-import uk.co.ordnancesurvey.webtests.IntegrationTestProperties;
+import uk.co.ordnancesurvey.gpx.graphhopper.GraphHopperJSONParser;
 import uk.co.ordnancesurvey.webtests.base.ComponentID;
 import uk.co.ordnancesurvey.webtests.base.ImageComparison;
 import uk.co.ordnancesurvey.webtests.multiplatform.MultiplatformTest;
 import uk.co.ordnancesurvey.webtests.platforms.BrowserPlatformOptions;
+import uk.co.ordnancesurvey.gpx.graphhopper.IntegrationTestProperties;
 
 public class GraphHopperUIUtil extends MultiplatformTest {
 
@@ -50,6 +51,8 @@
 	private String routeStepNumber;
 	String testOn = IntegrationTestProperties.getTestProperty("testON");
 	GraphHopperGPXParserRouteTest GPHService = new GraphHopperGPXParserRouteTest();
+	GraphHopperJSONParser GPHJsonService = new GraphHopperJSONParser();
+	GraphHopperJSONParser JSONService = new GraphHopperJSONParser();
 
 	JavascriptExecutor js = (JavascriptExecutor) driver;
 	WebElement we;
@@ -170,7 +173,16 @@ public void verifyInstructionThroughUI(String routeStepNumber,
 
 	public void getRouteFromService(String routeType, String... points) {
 
-		GPHService.parseRoute("gpx", routeType, points);
+		System.err.println(IntegrationTestProperties.getTestProperty("apiKey"));
+		if (IntegrationTestProperties.getTestProperty("routeType")
+				.equals("gpx")) {
+			GPHService.parseRoute("gpx", routeType, points);
+		}
+
+		else {
+
+			GPHJsonService.parse("json", routeType, points);
+		}
 
 	}
 
@@ -207,18 +219,34 @@ public void isWayPointonRouteMap(String wayPointIndex,
 
 			break;
 		case "SERVICE":
-			wp = buildWayPoint(wayPoint_Coordinates, wayPointDescription,
-					azimuth, direction, time, distance);
-			Assert.assertTrue(GPHService.isWayPointOnGPXRoutes(wp));
+			if (IntegrationTestProperties.getTestProperty("routeType").equals(
+					"gpx")) {
+				wp = buildWayPoint(wayPoint_Coordinates, wayPointDescription,
+						azimuth, direction, time, distance);
+				Assert.assertTrue(GPHService.isWayPointOnGPXRoutes(wp));
+			} else {
+				wp = GPHJsonService.buildWayPointForJson(wayPointDescription,
+						time, distance);
+
+				Assert.assertTrue(GPHJsonService.isWayPointinPath(wp));
+			}
 
 			break;
 
 		default:
 			verifyInstructionThroughUI(wayPointIndex, wayPointDescription);
 
-			wp = buildWayPoint(wayPoint_Coordinates, wayPointDescription,
-					azimuth, direction, time, distance);
-			Assert.assertTrue(GPHService.isWayPointOnGPXRoutes(wp));
+			if (IntegrationTestProperties.getTestProperty("routeType").equals(
+					"gpx")) {
+				wp = buildWayPoint(wayPoint_Coordinates, wayPointDescription,
+						azimuth, direction, time, distance);
+				Assert.assertTrue(GPHService.isWayPointOnGPXRoutes(wp));
+			} else {
+				wp = GPHJsonService.buildWayPointForJson(wayPointDescription,
+						time, distance);
+
+				Assert.assertTrue(GPHJsonService.isWayPointinPath(wp));
+			}
 			break;
 		}
 
@@ -293,6 +321,7 @@ public void isWayPointonRouteMap(List<Map<String, String>> waypointList) {
 				verifyInstructionThroughUI(wayPointIndex, waypointdesc);
 
 			}
+
 		}
 
 	}
@@ -464,4 +493,7 @@ public BufferedImage resize(BufferedImage img, int newW, int newH) {
 
 	}
 
+	public void verifyWayPointsThroughService() {
+
+	}
 }
diff --git a/acceptancetesting/src/test/resources/test-ci-dpn.properties b/acceptancetesting/src/test/resources/test-ci-dpn.properties
index 6c1e4a8671..5863b9a63b 100644
--- a/acceptancetesting/src/test/resources/test-ci-dpn.properties
+++ b/acceptancetesting/src/test/resources/test-ci-dpn.properties
@@ -9,4 +9,5 @@ testON=Service
 traceEnabled=false
 plugInAuthLocation=src/test/resources/autoauth-2.1-fx+fn.xpi
 excludedPlatforms=MAC:chrome,MAC:firefox,WINDOWS:chrome,WINDOWS:internet explorer,LINUX:firefox
-browserWindowDimension=1920,800
\ No newline at end of file
+browserWindowDimension=1920,800
+routeType=gpx
\ No newline at end of file
diff --git a/acceptancetesting/src/test/resources/test-ci-exeter.properties b/acceptancetesting/src/test/resources/test-ci-exeter.properties
index 476ca41c5b..e6b5e19fdd 100644
--- a/acceptancetesting/src/test/resources/test-ci-exeter.properties
+++ b/acceptancetesting/src/test/resources/test-ci-exeter.properties
@@ -8,4 +8,5 @@ testON=Service
 traceEnabled=false
 plugInAuthLocation=src/test/resources/autoauth-2.1-fx+fn.xpi
 excludedPlatforms=MAC:chrome,MAC:firefox,WINDOWS:chrome,WINDOWS:internet explorer,LINUX:firefox
-browserWindowDimension=1920,800
\ No newline at end of file
+browserWindowDimension=1920,800
+routeType=gpx
\ No newline at end of file
diff --git a/acceptancetesting/src/test/resources/test-ci-fullitn.properties b/acceptancetesting/src/test/resources/test-ci-fullitn.properties
index b2758da20f..1366b01be3 100644
--- a/acceptancetesting/src/test/resources/test-ci-fullitn.properties
+++ b/acceptancetesting/src/test/resources/test-ci-fullitn.properties
@@ -11,3 +11,4 @@ traceEnabled=false
 plugInAuthLocation=src/test/resources/autoauth-2.1-fx+fn.xpi
 excludedPlatforms=MAC:chrome,MAC:firefox,WINDOWS:chrome,WINDOWS:internet explorer,LINUX:firefox
 browserWindowDimension=1920,800
+routeType=gpx
diff --git a/acceptancetesting/src/test/resources/test-ci.properties b/acceptancetesting/src/test/resources/test-ci.properties
index 21aadf9a40..ba4f6631bd 100644
--- a/acceptancetesting/src/test/resources/test-ci.properties
+++ b/acceptancetesting/src/test/resources/test-ci.properties
@@ -8,4 +8,5 @@ testON=Service
 traceEnabled=false
 plugInAuthLocation=src/test/resources/autoauth-2.1-fx+fn.xpi
 excludedPlatforms=MAC:chrome,MAC:firefox,WINDOWS:chrome,WINDOWS:internet explorer,LINUX:firefox
-browserWindowDimension=1920,800
\ No newline at end of file
+browserWindowDimension=1920,800
+routeType=gpx
\ No newline at end of file
