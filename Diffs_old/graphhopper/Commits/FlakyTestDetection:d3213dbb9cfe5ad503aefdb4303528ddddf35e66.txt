diff --git a/docs/core/routing.md b/docs/core/routing.md
index 711c759474..252f936a51 100644
--- a/docs/core/routing.md
+++ b/docs/core/routing.md
@@ -53,14 +53,13 @@ List<Map<String, Object>> iList = il.createJson();
 List<GPXEntry> list = il.createGPXList();
 ```
 
-## Speed mode vs. Flexibility mode
+## Speed mode vs. Hybrid mode vs. Flexibile mode
 
-The default is to use the speed-up mode. If you need multiple profiles you specify a list of profiles (e.g. car,bike). 
+The default option of GraphHopper is the speed mode. If you don't want to use the speed-up mode you can disable it before the import (see config.properties `prepare.ch.weightings=no`) or on a per request base by adding `ch.disable=true` to the request. If you want to use the hybrid mode you have to enable it before the import (see config.properties `prepare.lm.weightings=fastest`).
 
-You can also completely disable the speed-up mode before import (see config.properties `prepare.ch.weightings=no`)
-or for a per request setting (`ch.disable=true`). 
+If you need multiple vehicle profiles you can specify a list of vehicle profiles (see config.properties e.g. `graph.flag_encoders=car,bike` or use `new EncodingManager("car,bike")`). 
 
-Then pick one vehicle and optionally an algorithm like 'bidirectional astar':
+To calculate a route you have to pick one vehicle and optionally an algorithm like `bidirectional_astar`:
 
 ```java
 GraphHopper hopper = new GraphHopperOSM().forServer();
@@ -78,8 +77,8 @@ GHResponse res = hopper.route(req);
 
 ## Heading
 
-In the flexibility mode it is also possible to add a desired heading (north based azimuth between 0 and 360 degree)
-to any point:
+The flexibile and hybrid mode allows to add a desired heading (north based azimuth between 0 and 360 degree)
+to any point. Adding a heading makes it more likely that a route starts towards the provided direction:
 ```java
 GHRequest req = new GHRequest().addPoint(new GHPoint (latFrom, lonFrom), favoredHeading).addPoint(new GHPoint (latTo, lonTo));
 ```
@@ -94,7 +93,7 @@ I.e. if you want to force "coming from south" to a destination you need to speci
 
 ## Alternative Routes
 
-In the flexibility mode you can get alternative routes via:
+The flexibile and hybrid mode allows you to calculate alternative routes via:
 ```java
 req.setAlgorithm(Parameters.Algorithms.ALT_ROUTE)
 ```
@@ -108,10 +107,9 @@ req.getHints().put(Parameters.AltRoute.MAX_PATHS, "3");
 
 See the Parameters class for further hints.
 
-## Java client
+## Java client (client-hc)
  
-In case you need a web access in a Java or an Android application the GraphHopperWeb class comes handy,
- see the 'web' sub module or [the Java client for the GraphHopper Directions API](https://github.com/graphhopper/directions-api-java-client).
+If you want to calculate routes using the [GraphHopper Directions API](https://www.graphhopper.com/products/) or a self hosted instance of GraphHopper, you can use the [Java and Android client-hc](https://github.com/graphhopper/graphhopper/tree/master/client-hc) (there are also clients for [Java Script](https://github.com/graphhopper/directions-api-js-client) and [many other languages](https://github.com/graphhopper/directions-api-clients)). 
 
 ```java
 GraphHopperAPI gh = new GraphHopperWeb();
