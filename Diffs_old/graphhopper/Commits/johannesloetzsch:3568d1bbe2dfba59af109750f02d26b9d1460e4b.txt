diff --git a/README.md b/README.md
index 26ff343c11..e650d4a5f8 100644
--- a/README.md
+++ b/README.md
@@ -1,3 +1,12 @@
+## clj-dev
+
+This branch is an example how to use GraphHopper from Clojure.
+
+```sh
+lein repl
+```
+
+
 # GraphHopper Routing Engine
 
 [![Build Status](https://secure.travis-ci.org/graphhopper/graphhopper.png?branch=master)](http://travis-ci.org/graphhopper/graphhopper)
diff --git a/clj-dev/src/graphhopper_cljc/core.clj b/clj-dev/src/graphhopper_cljc/core.clj
new file mode 100644
index 0000000000..5cdadffef5
--- /dev/null
+++ b/clj-dev/src/graphhopper_cljc/core.clj
@@ -0,0 +1,56 @@
+(ns graphhopper-cljc.core
+  (:import [java.util Locale]
+           [com.graphhopper GraphHopper GHRequest GHResponse PathWrapper]
+           [com.graphhopper.util Translation InstructionList]
+           [com.graphhopper.reader.osm GraphHopperOSM]
+           [com.graphhopper.routing.util EncodingManager]))
+
+
+(def osmFile "core/files/berlin-siegessaeule.osm.gz")
+     ;; minlat="52.5130300" minlon="13.3476600" maxlat="52.5157400" maxlon="13.3527600"
+(def graphFolder "target/graph")
+(def encoding "car")
+
+(def hopper (some-> (GraphHopperOSM.)
+                    .forServer
+                    (.setDataReaderFile osmFile)
+                    (.setGraphHopperLocation graphFolder)
+                    (.setEncodingManager (EncodingManager/create encoding))
+                    .importOrLoad))
+(instance? GraphHopper hopper)
+
+
+(def locale Locale/GERMAN)
+(def tr (-> hopper .getTranslationMap (.getWithFallBack locale)))
+(instance? Translation tr)
+
+
+(def vehicle "car")
+(def weighting "fastest")
+
+(def req (let [[latFrom lonFrom] [52.5156643 13.3515446]
+               [latTo lonTo] [52.5152721 13.3511300]]
+              (some-> (GHRequest. latFrom lonFrom latTo lonTo)
+                      (.setVehicle vehicle)
+                      (.setWeighting weighting)
+                      (.setLocale locale))))
+(instance? GHRequest req)
+
+
+(def rsp (.route hopper req))
+(instance? GHResponse rsp)
+
+(if (.hasErrors rsp)
+    (.getErrors rsp))
+
+(def path (.getBest rsp))
+(or (instance? PathWrapper path) (nil? path))
+
+{:meters (.getDistance path)
+ :seconds (/ (.getTime path) 1000.0)}
+
+(def il (.getInstructions path))
+(instance? InstructionList il)
+(map (fn [instruction] {:description (.getTurnDescription instruction tr)
+                        :extra (.getExtraInfoJSON instruction)})
+     il)
diff --git a/project.clj b/project.clj
new file mode 100644
index 0000000000..4e2351b71d
--- /dev/null
+++ b/project.clj
@@ -0,0 +1,20 @@
+(defproject graphhopper-cljc "0.1.0-SNAPSHOT"
+  :description "develop graphhopper with clj"
+  :dependencies [[org.clojure/clojure "1.10.0"]
+                 ;; dependencies extracted from graphhoppers poml.xml files
+                 [com.carrotsearch/hppc "0.8.1"]
+                 [org.apache.xmlgraphics/xmlgraphics-commons "2.3"]
+                 [commons-io/commons-io "1.3.1"]
+                 [junit/junit "4.12"]
+                 [org.locationtech.jts/jts-core "1.15.1"]
+                 [org.slf4j/slf4j-api "1.7.26"]
+                 [com.fasterxml.jackson.core/jackson-core "2.9.9"]
+                 [com.graphhopper.external/jackson-datatype-jts "0.12-2.5-1"]
+                 [io.dropwizard/dropwizard-testing "1.3.12"
+                   :exclusions [org.glassfish.jersey.core/jersey-server
+                                org.glassfish.hk2/hk2-utils]]
+                 [org.openstreetmap.osmosis/osmosis-osm-binary "0.47"]]
+  :java-source-paths ["api/src" "web-api/src" "core/src" "reader-osm/src"]
+  :source-paths ["clj-dev/src"]
+  :resource-paths ["core/src/main/resources"]
+  :repl-options {:init-ns graphhopper-cljc.core})
