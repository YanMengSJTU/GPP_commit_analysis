diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
index 88e8c21ac2..64938e8773 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
@@ -97,6 +97,8 @@
 	private int actualResponseCode;
 	private String actualResponseMsg;
 	StringBuffer sb = new StringBuffer();
+	public String serviceAppendString="";
+	public String servicePrefixString="";
 
 	private static final Logger LOG = LoggerFactory
 			.getLogger(GraphHopperUIUtil.class);
@@ -793,6 +795,8 @@ CloseableHttpResponse doSendAndGetResponse(String serviceUrl)
 		CloseableHttpClient httpClient = HttpClientUtils.createClient();
 
 		HttpUriRequest httpRequest = null;
+		
+		try{
 
 		switch (httpMethod) {
 		case "PUT":
@@ -826,7 +830,11 @@ CloseableHttpResponse doSendAndGetResponse(String serviceUrl)
 			httpRequest = new HttpGet(serviceUrl);
 			break;
 		}
-
+		}
+		catch( Exception e)
+		{
+			LOG.info(e.getMessage());
+		}
 		// HttpGet httpget = new HttpGet(serviceUrl);
 		addCustomHeaders(httpRequest);
 
@@ -843,7 +851,7 @@ protected void getRouteFromServiceWithParameters() {
 			sb.append(IntegrationTestProperties
 					.getTestProperty("graphHopperWebUrl"));
 		}
-		sb.append("route?");
+		sb.append(servicePrefixString+"route"+serviceAppendString+"?");
 
 		if (!requestParameters.containsKey("type")) {
 			ArrayList<String> responseType = new ArrayList<String>();
@@ -1015,6 +1023,7 @@ public void getRouteFromUI() {
 				else {
 					waypoint = new ComponentID(i + "_searchBox");
 					typeIntoField(waypoint, point);
+					waitFor(dropDown);
 					clickElement(dropDown);
 				}
 			}
