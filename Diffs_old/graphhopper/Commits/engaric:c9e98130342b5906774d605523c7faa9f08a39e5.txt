diff --git a/tools/src/main/java/com/graphhopper/tools/routeExtractor/AbstractProblemRouteExtractor.java b/tools/src/main/java/com/graphhopper/tools/routeExtractor/AbstractProblemRouteExtractor.java
index f56c9a9b69..0d43020d25 100644
--- a/tools/src/main/java/com/graphhopper/tools/routeExtractor/AbstractProblemRouteExtractor.java
+++ b/tools/src/main/java/com/graphhopper/tools/routeExtractor/AbstractProblemRouteExtractor.java
@@ -32,7 +32,8 @@
 import com.graphhopper.reader.Relation;
 import com.graphhopper.reader.RelationMember;
 import com.graphhopper.reader.RoutingElement;
-import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.OSITNRelation;
+import com.graphhopper.reader.osgb.OSITNWay;
 import com.graphhopper.reader.osgb.OsItnInputFile;
 import com.graphhopper.util.Helper;
 //import com.graphhopper.tools.OsITNProblemRouteExtractor.ProcessFileVisitor;
@@ -99,7 +100,7 @@ void processVisitor(final File file) throws XMLStreamException, IOException, Tra
         @Override
         void processVisitor(final RoutingElement item) {
             if (item.isType(OSMElement.WAY)) {
-                final Way way = (Way) item;
+                final OSITNWay way = (OSITNWay) item;
                 if (item.hasTag("nothighway")) {
                     notHighwaySet.add(item.getTag("nothighway"));
                 }
@@ -120,7 +121,7 @@ void processVisitor(final RoutingElement item) {
         @Override
         void processVisitor(final RoutingElement item) {
             if (item.isType(OSMElement.WAY)) {
-                final Way way = (Way) item;
+                final OSITNWay way = (OSITNWay) item;
                 final TLongList nodes = way.getNodes();
                 final long start = nodes.get(0);
                 final long end = nodes.get(nodes.size() - 1);
@@ -132,7 +133,7 @@ public boolean execute(final long testNode) {
                             final long otherEnd = testNode == start ? end : start;
                             otherEndOfWayNodeList.add(otherEnd);
 
-                            fullWayList.add(item.getId());
+                            fullWayList.add(way.getId());
 
                             return false;
                         }
@@ -148,7 +149,7 @@ public boolean execute(final long testNode) {
         @Override
         void processVisitor(final RoutingElement item) {
             if (item.isType(OSMElement.RELATION)) {
-                final Relation rel = (Relation) item;
+                final OSITNRelation rel = (OSITNRelation) item;
                 final ArrayList<? extends RelationMember> links = rel.getMembers();
                 final long start = links.get(0).ref();
                 final long end = links.get(links.size() - 1).ref();
diff --git a/tools/src/main/java/com/graphhopper/tools/routeExtractor/NodeListRouteExtractor.java b/tools/src/main/java/com/graphhopper/tools/routeExtractor/NodeListRouteExtractor.java
index d1406ac71d..12da3577a3 100644
--- a/tools/src/main/java/com/graphhopper/tools/routeExtractor/NodeListRouteExtractor.java
+++ b/tools/src/main/java/com/graphhopper/tools/routeExtractor/NodeListRouteExtractor.java
@@ -20,10 +20,10 @@
 import org.xml.sax.SAXException;
 
 import com.graphhopper.reader.OSMElement;
-import com.graphhopper.reader.Relation;
 import com.graphhopper.reader.RelationMember;
 import com.graphhopper.reader.RoutingElement;
-import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.OSITNRelation;
+import com.graphhopper.reader.osgb.OSITNWay;
 
 public class NodeListRouteExtractor extends AbstractProblemRouteExtractor {
 
@@ -87,11 +87,11 @@ void processVisitor(final RoutingElement someitem) {
                 @Override
                 public boolean execute(final long testNode) {
                     if (item.isType(OSMElement.WAY)) {
-                        final Way way = (Way) item;
+                        final OSITNWay way = (OSITNWay) item;
                         if (way.getNodes().contains(testNode)) {
-                            System.out.println("\tWay found joining one of our nodes. Id: " + item.getId());
+                            System.out.println("\tWay found joining one of our nodes. Id: " + way.getId());
                             // Add the way to our list of ways
-                            fullWayList.add(item.getId());
+                            fullWayList.add(way.getId());
 
                             return false;
                         }
@@ -111,7 +111,7 @@ void processVisitor(final RoutingElement someitem) {
                 @Override
                 public boolean execute(final long testWayId) {
                     if (item.isType(OSMElement.RELATION)) {
-                        final Relation relation = (Relation) item;
+                        final OSITNRelation relation = (OSITNRelation) item;
 
                         ArrayList<? extends RelationMember> members = relation.getMembers();
                         for (RelationMember relationMember : members) {
diff --git a/tools/src/main/java/com/graphhopper/tools/routeExtractor/TwoRoadsRouteExtractor.java b/tools/src/main/java/com/graphhopper/tools/routeExtractor/TwoRoadsRouteExtractor.java
index 1ed5436ff1..efe76157fc 100644
--- a/tools/src/main/java/com/graphhopper/tools/routeExtractor/TwoRoadsRouteExtractor.java
+++ b/tools/src/main/java/com/graphhopper/tools/routeExtractor/TwoRoadsRouteExtractor.java
@@ -17,9 +17,9 @@
 import org.xml.sax.SAXException;
 
 import com.graphhopper.reader.OSMElement;
-import com.graphhopper.reader.Relation;
 import com.graphhopper.reader.RoutingElement;
-import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.OSITNRelation;
+import com.graphhopper.reader.osgb.OSITNWay;
 
 public class TwoRoadsRouteExtractor extends AbstractProblemRouteExtractor {
     protected String workingRoadName;
@@ -74,14 +74,14 @@ private void findNodesOfRoad(final File itnFile) {
         @Override
         void processVisitor(final RoutingElement item) {
             if (item.isType(OSMElement.WAY)) {
-                final Way way = (Way) item;
+                final OSITNWay way = (OSITNWay) item;
                 if (way.hasTag("name", workingRoadName)) {
                     System.out.println("Way found on " + workingRoadName + " id is " + way.getId());
                     fullWayList.add(way.getId());
                 }
             }
             if (item.isType(OSMElement.RELATION)) {
-                final Relation relation = (Relation) item;
+                final OSITNRelation relation = (OSITNRelation) item;
                 // if (!relation.isMetaRelation()
                 // && relation.hasTag(OSITNElement.TAG_KEY_TYPE, "route"))
                 // prepareWaysWithRelationInfo(relation);
