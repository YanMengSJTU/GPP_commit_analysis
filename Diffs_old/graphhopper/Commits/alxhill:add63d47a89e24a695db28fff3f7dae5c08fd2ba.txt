diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/Marmoset.java b/marmoset/src/main/java/com/graphhopper/marmoset/Marmoset.java
index 3fc3096106..75199d8b36 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/Marmoset.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/Marmoset.java
@@ -6,9 +6,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import java.io.File;
-import java.io.IOException;
-import java.io.PrintWriter;
+import java.io.*;
 import java.net.InetSocketAddress;
 import java.nio.ByteBuffer;
 import java.util.stream.IntStream;
@@ -70,6 +68,14 @@ private static void runOfflineSimulation(String outfile, int initialVehicles) th
             logger.info(metrics.getDescription());
             p.println(metrics.toString());
             p.flush();
+
+            if (iteration % 1000 == 0)
+            {
+                PrintWriter iterPrint = new PrintWriter("simulations/" + (outfile + iteration), "UTF-8");
+                iterPrint.println(mh.getVehicleString());
+                iterPrint.close();
+            }
+
             iteration++;
         }
         p.close();
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetHopper.java b/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetHopper.java
index 19c60559fd..5f90dba3bd 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetHopper.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetHopper.java
@@ -5,10 +5,7 @@
 import com.graphhopper.marmoset.util.CellGraph;
 import com.graphhopper.marmoset.util.ExpectedWeighting;
 import com.graphhopper.marmoset.util.Location;
-import com.graphhopper.marmoset.vehicle.MultiSDVController;
-import com.graphhopper.marmoset.vehicle.RandomVehicle;
-import com.graphhopper.marmoset.vehicle.SelfDrivingVehicle;
-import com.graphhopper.marmoset.vehicle.Vehicle;
+import com.graphhopper.marmoset.vehicle.*;
 import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.routing.util.Weighting;
 import com.graphhopper.routing.util.WeightingMap;
@@ -34,12 +31,12 @@
     protected CellGraph cellGraph;
     protected List<Vehicle> vehicles;
 
-    protected MultiSDVController sdvController;
+    protected static MultiSDVController sdvController;
 
     protected boolean isPaused;
 
     protected Random rand = new Random(999);
-    protected double randPercent;
+    protected double sdvPercent;
 
     private static Logger logger = LoggerFactory.getLogger(MarmosetHopper.class);
 
@@ -71,17 +68,17 @@ public void init()
         cellGraph = new CellGraph(hopper.getGraphHopperStorage().getBaseGraph(), cellSize);
         cellGraph.init();
 
-        randPercent = args.getDouble("marmoset.randpercent", 0.2);
-        assert randPercent >= 0 && randPercent <= 1;
+        sdvPercent = args.getDouble("marmoset.sdvpercent", 1);
+        assert sdvPercent >= 0 && sdvPercent <= 1;
     }
 
     public void addVehicle()
     {
         Vehicle v;
-        if (rand.nextDouble() < randPercent)
-            v = new RandomVehicle(this, Location.randLondon(), Location.randCentralLondon());
-        else
+        if (rand.nextDouble() < sdvPercent)
             v = new SelfDrivingVehicle(this, Location.randLondon(), Location.randCentralLondon());
+        else
+            v = new DijkstraVehicle(this, Location.randLondon(), Location.randCentralLondon());
         v.init();
         if (v.isFinished())
             addVehicle();
@@ -179,10 +176,10 @@ public int getVehicleCount()
     }
 
     public static class Metrics {
-        public int slowed;
-        public double averageCells;
-        public long notAtMax;
-        public int vehicleCount;
+        public final int slowed;
+        public final double averageCells;
+        public final long notAtMax;
+        public final int vehicleCount;
 
         public Metrics(int slowed, double averageCells, long notAtMax, int vehicleCount)
         {
@@ -211,12 +208,12 @@ public String getDescription()
         }
     }
 
-    public class MarmosetGraphHopper extends GraphHopper {
+    public static class MarmosetGraphHopper extends GraphHopper {
 
-        public ExpectedWeighting expectedWeighting;
+        public static ExpectedWeighting expectedWeighting;
 
         @Override
-        public Weighting createWeighting(WeightingMap wMap, FlagEncoder encoder)
+        public synchronized Weighting createWeighting(WeightingMap wMap, FlagEncoder encoder)
         {
             if ("expected".equalsIgnoreCase(wMap.getWeighting()))
             {
@@ -226,7 +223,6 @@ public Weighting createWeighting(WeightingMap wMap, FlagEncoder encoder)
                     expectedWeighting = new ExpectedWeighting(encoder, wMap, maxId);
                     sdvController = new MultiSDVController(expectedWeighting);
                 }
-
                 return expectedWeighting;
             }
             return super.createWeighting(wMap, encoder);
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/util/ExpectedWeighting.java b/marmoset/src/main/java/com/graphhopper/marmoset/util/ExpectedWeighting.java
index ff693366b2..6c6bf43351 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/util/ExpectedWeighting.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/util/ExpectedWeighting.java
@@ -25,7 +25,6 @@ public ExpectedWeighting(FlagEncoder encoder, PMap pMap, int maxId)
         super(encoder, pMap);
         expectedRoutes = new double[maxId];
         logger.info("Created new expected weighting");
-        Thread.dumpStack();
     }
 
     @Override
@@ -40,12 +39,12 @@ public double calcWeight(EdgeIteratorState edge, boolean reverse, int prevOrNext
             {
                 double density = 1000 * expectedVehicles / edge.getDistance();
 
-                if (Math.random() < 0.0001)
-                {
-                    logger.info(String.format(
-                            "ev: %.2f, dns: %.2f, dst: %.2f, spd: %.2f, exp: %.2f",
-                            expectedVehicles, density, edge.getDistance(), speed, speed * densityFunction(density)));
-                }
+//                if (Math.random() < 0.0001)
+//                {
+//                    logger.info(String.format(
+//                            "ev: %.2f, dns: %.2f, dst: %.2f, spd: %.2f, exp: %.2f",
+//                            expectedVehicles, density, edge.getDistance(), speed, speed * densityFunction(density)));
+//                }
 
                 speed *= densityFunction(density);
             }
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/BaseVehicle.java b/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/BaseVehicle.java
index 0295221a81..54e75139c1 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/BaseVehicle.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/BaseVehicle.java
@@ -10,6 +10,8 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import java.io.FileNotFoundException;
+import java.io.PrintWriter;
 import java.nio.ByteBuffer;
 import java.util.Random;
 
@@ -89,8 +91,21 @@ protected void finish(String error)
         finished = true;
     }
 
+    // called only if there's no error, so we use this to capture metrics
     protected void finish()
     {
+        String filename = String.format("simulations/vehicle-%d-%d.csv", id, System.currentTimeMillis() / 1000L);
+        try
+        {
+            PrintWriter p = new PrintWriter(filename);
+            printMetrics(p);
+            p.close();
+        }
+        catch (FileNotFoundException e)
+        {
+            e.printStackTrace();
+        }
+
         finish(null);
     }
 
@@ -249,4 +264,9 @@ public void addToBuffer(ByteBuffer b)
         b.putInt(id).putInt(v).putDouble(loc.getLat()).putDouble(loc.getLon());
         logger.debug(String.format("[%d]%d|%d|%f|%f", id, b.getInt(pos), b.getInt(pos + 4), b.getDouble(pos + 8), b.getDouble(pos + 16)));
     }
+
+    public void printMetrics(PrintWriter p)
+    {
+
+    }
 }
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/DijkstraVehicle.java b/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/DijkstraVehicle.java
index bc346bcd84..bb167624c3 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/DijkstraVehicle.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/DijkstraVehicle.java
@@ -9,6 +9,7 @@
 import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.util.EdgeIteratorState;
 
+import java.io.PrintWriter;
 import java.util.List;
 import java.util.stream.Collectors;
 
@@ -17,6 +18,9 @@
  */
 public class DijkstraVehicle extends BaseVehicle {
 
+    protected long expectedTravelTime = 0;
+    protected long realTravelTime = 0;
+
     public DijkstraVehicle(MarmosetHopper hopper, Location start, Location dest)
     {
         super(hopper, start, dest);
@@ -30,6 +34,7 @@ public VehicleIterator getVehicleIterator()
         GHRequest ghRequest = new GHRequest(loc.getLat(), loc.getLon(), dest.getLat(), dest.getLon());
         GHResponse ghResponse = new GHResponse();
         List<Path> paths = gh.calcPaths(ghRequest, ghResponse);
+        expectedTravelTime = ghResponse.getBest().getTime();
         if (ghResponse.hasErrors())
         {
             finish("Routing failed (id "+id+"):" + ghResponse.getErrors().stream().map(Throwable::toString).collect(Collectors.joining("\n")));
@@ -55,4 +60,17 @@ public VehicleIterator getVehicleIterator()
         return new DijkstraVehicleIterator(edgeList, carEncoder);
     }
 
+    @Override
+    public void accelerationStep()
+    {
+        super.accelerationStep();
+        realTravelTime++;
+    }
+
+    @Override
+    public void printMetrics(PrintWriter p)
+    {
+        p.println("expectedtime: " + expectedTravelTime);
+        p.println("realtime: " + realTravelTime);
+    }
 }
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/MultiSDVController.java b/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/MultiSDVController.java
index 7bc65a6159..a55ae440d7 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/MultiSDVController.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/MultiSDVController.java
@@ -8,6 +8,8 @@
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Random;
+import java.util.concurrent.ExecutorService;
+import java.util.concurrent.Executors;
 import java.util.stream.Collectors;
 
 /**
@@ -36,13 +38,14 @@ public MultiSDVController(ExpectedWeighting expectedWeighting)
 
     public void timestepHandler(int iteration)
     {
-        vehicles.forEach(v -> {
-            if (rerouteRand.nextDouble() <= REROUTE_PROBABILITY)
-            {
-                logger.info("Rerouting vehicle " + v.id);
-                v.recalculateRoute();
-            }
-        });
+        ExecutorService es = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());
+        vehicles.stream().filter(v -> rerouteRand.nextDouble() <= REROUTE_PROBABILITY).map(v -> {
+            logger.info("Rerouting vehicle " + v.id);
+            return (Runnable) v::recalculateRoute;
+        }).forEach(es::execute);
+
+        es.shutdown();
+        logger.info("Rerouting process complete");
 
         vehicles = vehicles.stream().filter(v -> !v.isFinished()).collect(Collectors.toList());
 
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/SelfDrivingVehicle.java b/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/SelfDrivingVehicle.java
index c69bd3596d..e7c0e9bde4 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/SelfDrivingVehicle.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/SelfDrivingVehicle.java
@@ -9,13 +9,16 @@
 import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.util.EdgeIteratorState;
 
+import java.io.PrintWriter;
 import java.util.List;
 import java.util.stream.Collectors;
 
 /**
  * Created by alexander on 20/04/2016.
  */
-public class SelfDrivingVehicle extends BaseVehicle {
+public class SelfDrivingVehicle extends DijkstraVehicle {
+
+    protected int rerouteCount = 0;
 
     public SelfDrivingVehicle(MarmosetHopper hopper, Location start, Location dest)
     {
@@ -43,6 +46,7 @@ public VehicleIterator getVehicleIterator()
 
     public void recalculateRoute()
     {
+        rerouteCount++;
         cg.set(route, cellId, false);
 
         List<EdgeIteratorState> edges = calculateRoute();
@@ -68,9 +72,12 @@ public void recalculateRoute()
         GHResponse ghResponse = new GHResponse();
         List<Path> paths = gh.calcPaths(ghRequest, ghResponse);
 
+        if (expectedTravelTime == 0)
+            expectedTravelTime = ghResponse.getBest().getTime();
+
         if (ghResponse.hasErrors())
         {
-            finish("Routing failed (id "+id+"):" + ghResponse.getErrors().stream().map(Throwable::toString).collect(Collectors.joining("\n")));
+            finish("Routing failed (id " + id + "):" + ghResponse.getErrors().stream().map(Throwable::toString).collect(Collectors.joining("\n")));
             return null;
         }
 
@@ -91,4 +98,12 @@ public void recalculateRoute()
 
         return edges;
     }
+
+    @Override
+    public void printMetrics(PrintWriter p)
+    {
+        super.printMetrics(p);
+        p.println("reroutes: " + rerouteCount);
+    }
+
 }
