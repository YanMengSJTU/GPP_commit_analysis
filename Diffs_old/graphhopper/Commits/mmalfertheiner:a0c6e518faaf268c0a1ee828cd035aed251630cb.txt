diff --git a/core/src/main/java/com/graphhopper/GraphHopper.java b/core/src/main/java/com/graphhopper/GraphHopper.java
index c353b3a1b5..ed4ad7d4a8 100644
--- a/core/src/main/java/com/graphhopper/GraphHopper.java
+++ b/core/src/main/java/com/graphhopper/GraphHopper.java
@@ -937,7 +937,7 @@ public Weighting createWeighting( WeightingMap weightingMap, FlagEncoder encoder
         return createWeighting(weightingMap, encoder, null);
     }
 
-    public Weighting createWeighting( WeightingMap weightingMap, FlagEncoder encoder, SpeedProvider speedProvider )
+    public Weighting createWeighting( WeightingMap weightingMap, FlagEncoder encoder, ProfileManager profileManager )
     {
         String weighting = weightingMap.getWeighting().toLowerCase();
 
@@ -952,9 +952,7 @@ public Weighting createWeighting( WeightingMap weightingMap, FlagEncoder encoder
                 return new FastestWeighting(encoder, weightingMap);
         } else if ("dynamic".equalsIgnoreCase(weighting))
         {
-            if(speedProvider == null)
-                speedProvider = new EncoderSpeedProvider(encoder);
-            return new DynamicWeighting(encoder, weightingMap, speedProvider);
+            return new DynamicWeighting(encoder, weightingMap, profileManager);
         }
 
         throw new UnsupportedOperationException("weighting " + weighting + " not supported");
@@ -989,12 +987,15 @@ public Weighting createTurnWeighting( Weighting weighting, Graph graph, FlagEnco
     public GHResponse route( GHRequest request )
     {
         GHResponse response = new GHResponse();
+        ProfileManager profileManager = null;
         SpeedProvider speedProvider = null;
 
-        if(request.getVehicle().equals("genbike"))
-            speedProvider = initSpeedProvider(request.getHints().get("profile", ""), encodingManager.getEncoder(request.getVehicle()));
+        if(request.getVehicle().equals("genbike")) {
+            profileManager = initProfile(request.getHints().get("profile", ""), encodingManager.getEncoder(request.getVehicle()));
+            speedProvider = new ProfileSpeedProvider(encodingManager.getEncoder(request.getVehicle()), profileManager);
+        }
 
-        List<Path> paths = getPaths(request, response, speedProvider);
+        List<Path> paths = getPaths(request, response, profileManager);
         if (response.hasErrors())
             return response;
 
@@ -1017,7 +1018,7 @@ public GHResponse route( GHRequest request )
         return getPaths(request, rsp, null);
     }
 
-    protected List<Path> getPaths( GHRequest request, GHResponse rsp, SpeedProvider speedProvider )
+    protected List<Path> getPaths( GHRequest request, GHResponse rsp, ProfileManager profileManager)
     {
         if (ghStorage == null || !fullyLoaded)
             throw new IllegalStateException("Call load or importOrLoad before routing");
@@ -1086,7 +1087,7 @@ public GHResponse route( GHRequest request )
             weighting = getWeightingForCH(request.getHints(), encoder);
             routingGraph = ghStorage.getGraph(CHGraph.class, weighting);
         } else
-            weighting = createWeighting(request.getHints(), encoder, speedProvider);
+            weighting = createWeighting(request.getHints(), encoder, profileManager);
 
         RoutingAlgorithmFactory tmpAlgoFactory = getAlgorithmFactory(weighting);
         QueryGraph queryGraph = new QueryGraph(routingGraph);
@@ -1129,7 +1130,7 @@ public GHResponse route( GHRequest request )
 
             sw = new StopWatch().start();
             Path path = algo.calcPath(fromQResult.getClosestNode(), toQResult.getClosestNode());
-            path.setSpeedProvider(speedProvider);
+            path.initSpeedProvider(profileManager);
             path.updateTime();
 
             if (path.getTime() < 0)
@@ -1304,7 +1305,7 @@ private String formatDateTime( Date date )
         return new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ").format(date);
     }
 
-    private SpeedProvider initSpeedProvider(String profile, FlagEncoder encoder) {
+    private ProfileManager initProfile(String profile, FlagEncoder encoder) {
 
         ProfileManager profileManager = new ProfileManager(new ProfileRepository());
 
@@ -1312,7 +1313,7 @@ private SpeedProvider initSpeedProvider(String profile, FlagEncoder encoder) {
             profileManager.init(profile, (BikeGenericFlagEncoder) encoder);
         }
 
-        return new ProfileSpeedProvider(encoder, profileManager);
+        return profileManager;
     }
 
     protected void ensureNotLoaded()
diff --git a/core/src/main/java/com/graphhopper/routing/Path.java b/core/src/main/java/com/graphhopper/routing/Path.java
index 556f42d7a3..037159e49b 100644
--- a/core/src/main/java/com/graphhopper/routing/Path.java
+++ b/core/src/main/java/com/graphhopper/routing/Path.java
@@ -176,8 +176,11 @@ public Path setWeight( double w )
         return this;
     }
 
-    public Path setSpeedProvider( SpeedProvider speedProvider){
-        this.speedProvider = speedProvider;
+    public Path initSpeedProvider( final ProfileManager profileManager){
+        if(profileManager == null)
+            return this;
+
+        this.speedProvider = new ProfileSpeedProvider(encoder, profileManager);
         return this;
     }
 
diff --git a/core/src/main/java/com/graphhopper/routing/util/DynamicWeighting.java b/core/src/main/java/com/graphhopper/routing/util/DynamicWeighting.java
index 11af379013..500950f9ae 100644
--- a/core/src/main/java/com/graphhopper/routing/util/DynamicWeighting.java
+++ b/core/src/main/java/com/graphhopper/routing/util/DynamicWeighting.java
@@ -20,6 +20,7 @@
 
 import com.graphhopper.util.EdgeIteratorState;
 import com.graphhopper.util.PMap;
+import com.graphhopper.util.profiles.ProfileManager;
 
 /**
  * Special weighting for (motor)bike
@@ -34,6 +35,7 @@
     private final double heading_penalty;
     protected final FlagEncoder flagEncoder;
     protected SpeedProvider speedProvider;
+    protected ProfileManager profileManager;
 
     /**
      * For now used only in BikeGenericFlagEncoder
@@ -44,7 +46,7 @@
     public static final int WAY_TYPE_KEY = 105;
 
 
-    public DynamicWeighting(FlagEncoder encoder, PMap pMap, SpeedProvider speedProvider)
+    public DynamicWeighting(FlagEncoder encoder, PMap pMap, ProfileManager profileManager)
     {
         if (!encoder.isRegistered())
             throw new IllegalStateException("Make sure you add the FlagEncoder " + encoder + " to an EncodingManager before using it elsewhere");
@@ -52,15 +54,17 @@ public DynamicWeighting(FlagEncoder encoder, PMap pMap, SpeedProvider speedProvi
         this.flagEncoder = encoder;
         heading_penalty = pMap.getDouble("heading_penalty", DEFAULT_HEADING_PENALTY);
 
-        if(speedProvider == null)
-            this.speedProvider = new EncoderSpeedProvider(encoder);
+        this.profileManager = profileManager;
 
-        this.speedProvider = speedProvider;
+        if(profileManager == null)
+            this.speedProvider = new EncoderSpeedProvider(encoder);
+        else
+            this.speedProvider = new ProfileSpeedProvider(encoder, profileManager);
     }
 
     public DynamicWeighting(FlagEncoder encoder)
     {
-        this(encoder, new PMap(0), new EncoderSpeedProvider(encoder));
+        this(encoder, new PMap(0), null);
     }
 
     @Override
diff --git a/core/src/main/java/com/graphhopper/util/profiles/ProfileManager.java b/core/src/main/java/com/graphhopper/util/profiles/ProfileManager.java
index 5055281d83..4088ba5de9 100644
--- a/core/src/main/java/com/graphhopper/util/profiles/ProfileManager.java
+++ b/core/src/main/java/com/graphhopper/util/profiles/ProfileManager.java
@@ -78,6 +78,10 @@ public boolean hasFilteredSpeeds(){
         return bestFit > 0;
     }
 
+    public double getWayTypePreference(int wayType){
+        return distances[wayType] / totalDistance;
+    }
+
     public double getSpeedPerSlope(int wayType, int slopeIndex, BikeGenericFlagEncoder flagEncoder) {
 
         if(!hasProfile())
