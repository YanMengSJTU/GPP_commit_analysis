diff --git a/core/files/changelog.txt b/core/files/changelog.txt
index e5f083fce5..7ffdcfced2 100644
--- a/core/files/changelog.txt
+++ b/core/files/changelog.txt
@@ -1,7 +1,7 @@
-0.4.0
+0.4.0    
     translation key turn changed and merged with left etc into turn_left, turn_right etc
     create location index before preparation in the GraphHopper class
-    encodingManager.getSingle() is removed as one can specify an encoder explicitly. GraphHopper picks the first encoder automatically for default vehicle, can be overwritten via setDefaultVehicle
+    encodingManager.getSingle() is removed and flagEncoder list is no longer sorted, the first vehicle is used for CH preparation    
     removed LocationIndexTreeSC, use new LocationIndexTree(levelGraph.getBaseGraph(), directory) instead
     getLevel and setLevel do no longer automatically increase node count, use getNodeAccess.ensureNode for that
     normal algorithms are now possible on prepared graph use getBaseGraph, see #116
@@ -21,11 +21,9 @@
     renamed less often used URL parameter 'min_path_precision' to way_point_max_distance which makes it identical to the setWayPointMaxDistance method used for simplification at OSMImport
     removed douglas.minprecision from Java API ghRequest.hints => use wayPointMaxDistance instead
     encoder.supportTurnCost is replaced by encoder.supports(TurnWeighting.class)
-    CmdArgs is now a Map<String, String> instead Map<String, Object>. The value will be parsed up on every getXY call
+    CmdArgs is now a Map<String, String> instead Map<String, Object>. The value will be parsed up on every getXY call, makes storing string vs. object less error-prone
     removed GHRequest.getHint, instead use the provided methods in GHRequest.getHints().getXY and GHRequest.getHints().put
-    graph incompatibility as properties cannot be loaded => version increase necessary
-        renamed osmreader.bytesForFlags to graph.bytesForFlags
-        renamed config property osmreader.acceptWay to graph.flagEncoders
+    important graph incompatibility as properties cannot be loaded. renamed osmreader.bytesForFlags to graph.bytesForFlags, renamed config property osmreader.acceptWay to graph.flagEncoders
     default weighting is now fastest, fixing #261
     moved method GraphHopper.main into tools module and class com.graphhopper.tools.Import, see #250
     refactored GraphHopper.createWeighting to accept more than one configuration option, see #237
@@ -33,13 +31,12 @@
     moving the boolean parameter of GraphHopper.setInMemory into a separate method setStoreOnFlush
     renaming of GraphHopper.setCHShortcuts to setCHWeighting, as well as the property prepare.chShortcuts to prepare.chWeighting
     jsonp is disabled by default. You need to enable it in the config.properties, see the config-example.properties
-    EncodingManager cannot be null in GraphHopperStorage since 0.4. If you need to parse EncodingManager configuration from existing graph use EncodingManager.create
+    EncodingManager cannot be null in GraphHopperStorage. If you need to parse EncodingManager configuration from existing graph use EncodingManager.create
     no reflection done in EncodingManager which improves portability and makes configuration of encoders possible before adding to manager
     removed dijkstraNativebi as no performance advantage but maintenance disadvantage and similar to oneToManyDijkstra
     to provide context for turn costs we needed to add prevEdgeId into Weighting.calcWeight, see new documentation
     with the introduction of lock protection mechanism (see #112) GraphHopper needs always write access, see also #217
-    new GraphHopper.clean method to remove the graph directory via Java API
-    FlagEncoder: replaced isFoward and isBackward with more generic isBool(flags, FlagEncoder.FORWARD|BACKWARD)
+    new GraphHopper.clean method to remove the graph directory via Java API    
 
 0.3.0
     introduced prefer bits, now bike uses more bits and 3 bike encoder do not fit into 32 bit anymore, will be fixed later
diff --git a/core/src/main/java/com/graphhopper/GraphHopper.java b/core/src/main/java/com/graphhopper/GraphHopper.java
index 284b027043..6155cf3945 100644
--- a/core/src/main/java/com/graphhopper/GraphHopper.java
+++ b/core/src/main/java/com/graphhopper/GraphHopper.java
@@ -105,7 +105,6 @@ protected GraphHopper loadGraph( GraphStorage g )
         this.graph = g;
         fullyLoaded = true;
         initLocationIndex();
-        initDefaultVehicleIfNecessary();
         return this;
     }
 
@@ -123,7 +122,7 @@ public GraphHopper setEncodingManager( EncodingManager em )
         return this;
     }
 
-    private FlagEncoder getFirstVehicle()
+    FlagEncoder getDefaultVehicle()
     {
         if (encodingManager == null)
         {
@@ -283,32 +282,6 @@ private GraphHopper setUnsafeMemory()
         return this;
     }
 
-    /**
-     * This method sets the default vehicle to use if no vehicle is specified in the GHRequest
-     * object. Per default the lexicographically first vehicle is used.
-     */
-    public GraphHopper setDefaultVehicle( String defaultVehicleStr )
-    {
-        if (this.defaultVehicleStr != null)
-            throw new RuntimeException("Cannot change default vehicle " + this.defaultVehicleStr + " to " + defaultVehicleStr);
-
-        this.defaultVehicleStr = defaultVehicleStr;
-        return this;
-    }
-
-    /**
-     * The default vehicle is the single vehicle used for CH preparation as well as the default
-     * vehicle if no specified in GHRequest. Per default the lexicographically first vehicle is
-     * used.
-     */
-    String getDefaultVehicle()
-    {
-        if (defaultVehicleStr == null)
-            throw new RuntimeException("Set default vehicle before");
-
-        return defaultVehicleStr;
-    }
-
     /**
      * Enables the use of contraction hierarchies to reduce query times. Enabled by default.
      * <p/>
@@ -598,11 +571,7 @@ public GraphHopper init( CmdArgs args )
         osmReaderWayPointMaxDistance = args.getDouble("osmreader.wayPointMaxDistance", osmReaderWayPointMaxDistance);
         String flagEncoders = args.get("graph.flagEncoders", "");
         if (!flagEncoders.isEmpty())
-        {
             setEncodingManager(new EncodingManager(flagEncoders, bytesForFlags));
-            // default vehicle which is used if no algorithm is specified
-            setDefaultVehicle(args.get("algorithm.defaultVehicle", getFirstVehicle().toString()));
-        }
 
         workerThreads = args.getInt("osmreader.workerThreads", workerThreads);
         enableInstructions = args.getBool("osmreader.instructions", enableInstructions);
@@ -760,8 +729,6 @@ public boolean load( String graphHopperFolder )
         if (encodingManager == null)
             setEncodingManager(EncodingManager.create(ghLocation));
 
-        initDefaultVehicleIfNecessary();
-
         if (!allowWrites && dataAccessType.isMMap())
             dataAccessType = DAType.MMAP_RO;
 
@@ -836,13 +803,7 @@ private boolean isPrepared()
 
     protected RoutingAlgorithmFactory createPrepare()
     {
-        if (!encodingManager.supports(getDefaultVehicle()))
-        {
-            throw new IllegalStateException("Should not happen: default vehicle " + getDefaultVehicle() + " not supported"
-                    + " from EncodingManager " + encodingManager.toDetailsString() + ". Cannot do CH preparation");
-        }
-
-        FlagEncoder defaultVehicle = encodingManager.getEncoder(getDefaultVehicle());
+        FlagEncoder defaultVehicle = getDefaultVehicle();
         Weighting weighting = createWeighting(new WeightingMap(chWeightingStr), defaultVehicle);
         PrepareContractionHierarchies tmpPrepareCH = new PrepareContractionHierarchies((LevelGraph) graph,
                 defaultVehicle, weighting, traversalMode);
@@ -929,7 +890,7 @@ public GHResponse route( GHRequest request )
 
         String vehicle = request.getVehicle();
         if (vehicle.isEmpty())
-            vehicle = getDefaultVehicle();
+            vehicle = getDefaultVehicle().toString();
 
         if (!encodingManager.supports(vehicle))
         {
@@ -980,7 +941,7 @@ public GHResponse route( GHRequest request )
 
         QueryGraph queryGraph;
         RoutingAlgorithmFactory tmpAlgoFactory = getAlgorithmFactory();
-        if (chEnabled && !vehicle.equalsIgnoreCase(getDefaultVehicle()))
+        if (chEnabled && !vehicle.equalsIgnoreCase(getDefaultVehicle().toString()))
         {
             // fall back to normal traversing
             tmpAlgoFactory = new RoutingAlgorithmFactorySimple();
@@ -1174,14 +1135,4 @@ long getVisitedSum()
     {
         return visitedSum.get();
     }
-
-    private void initDefaultVehicleIfNecessary()
-    {
-        if (defaultVehicleStr == null)
-            setDefaultVehicle(getFirstVehicle().toString());
-
-        if (!encodingManager.supports(getDefaultVehicle()))
-            throw new IllegalArgumentException("Default vehicle " + defaultVehicleStr + " is not supported. "
-                    + "Include vehicle in EncodingManager or via the property graph.flagEncoders OR set it explicitely via setDefaultVehicle");
-    }
 }
diff --git a/core/src/main/java/com/graphhopper/routing/util/EncodingManager.java b/core/src/main/java/com/graphhopper/routing/util/EncodingManager.java
index fd51deba9c..af8f3862ed 100644
--- a/core/src/main/java/com/graphhopper/routing/util/EncodingManager.java
+++ b/core/src/main/java/com/graphhopper/routing/util/EncodingManager.java
@@ -100,15 +100,6 @@ public EncodingManager( List<? extends FlagEncoder> flagEncoders, int bytesForEd
             throw new IllegalStateException("For 'edge flags' currently only 4 or 8 bytes supported");
 
         this.bitsForEdgeFlags = bytesForEdgeFlags * 8;
-
-        Collections.sort(flagEncoders, new Comparator<FlagEncoder>()
-        {
-            @Override
-            public int compare( FlagEncoder o1, FlagEncoder o2 )
-            {
-                return o1.toString().compareTo(o2.toString());
-            }
-        });
         for (FlagEncoder flagEncoder : flagEncoders)
         {
             registerEncoder((AbstractFlagEncoder) flagEncoder);
diff --git a/core/src/test/java/com/graphhopper/GraphHopperIT.java b/core/src/test/java/com/graphhopper/GraphHopperIT.java
index 0a19a9756a..b88ba45408 100644
--- a/core/src/test/java/com/graphhopper/GraphHopperIT.java
+++ b/core/src/test/java/com/graphhopper/GraphHopperIT.java
@@ -289,7 +289,7 @@ public void testRoundaboutInstructionsWithCH()
     {
         String tmpOsmFile = "files/monaco.osm.gz";
         String tmpVehicle = "car";
-        String tmpImportVehicles = "foot,car";
+        String tmpImportVehicles = "car,bike";
         String tmpWeightCalcStr = "fastest";
 
         GraphHopper tmpHopper = new GraphHopper().
@@ -299,8 +299,7 @@ public void testRoundaboutInstructionsWithCH()
                 setEncodingManager(new EncodingManager(tmpImportVehicles)).
                 importOrLoad();
 
-        // lexicographically first vehicle
-        assertEquals(tmpVehicle, tmpHopper.getDefaultVehicle());
+        assertEquals(tmpVehicle, tmpHopper.getDefaultVehicle().toString());
         assertFalse(RoutingAlgorithmFactorySimple.class.isAssignableFrom(tmpHopper.getAlgorithmFactory().getClass()));
 
         GHResponse rsp = tmpHopper.route(new GHRequest(43.745084, 7.430513, 43.745247, 7.430347)
@@ -318,7 +317,7 @@ public void testRoundaboutInstructionsWithCH()
     }
 
     @Test
-    public void testMultipleVehiclesAndCH()
+    public void testMultipleVehiclesAndDoCHForBike()
     {
         String tmpOsmFile = "files/monaco.osm.gz";
         String tmpImportVehicles = "bike,car";
@@ -326,10 +325,10 @@ public void testMultipleVehiclesAndCH()
         GraphHopper tmpHopper = new GraphHopper().
                 setStoreOnFlush(true).
                 setOSMFile(tmpOsmFile).
-                // TODO in #350, setDefaultVehicle("car").
                 setGraphHopperLocation(tmpGraphFile).
                 setEncodingManager(new EncodingManager(tmpImportVehicles)).
                 importOrLoad();
+        assertEquals("bike", tmpHopper.getDefaultVehicle().toString());
 
         GHResponse rsp = tmpHopper.route(new GHRequest(43.73005, 7.415707, 43.741522, 7.42826)
                 .setVehicle("car"));
diff --git a/core/src/test/java/com/graphhopper/GraphHopperTest.java b/core/src/test/java/com/graphhopper/GraphHopperTest.java
index a2925d3f93..fe5e04f20c 100644
--- a/core/src/test/java/com/graphhopper/GraphHopperTest.java
+++ b/core/src/test/java/com/graphhopper/GraphHopperTest.java
@@ -74,7 +74,7 @@ public void testLoadOSM()
         assertEquals(3, rsp.getPoints().getSize());
 
         closableInstance.close();
-        
+
         // no encoding manager necessary
         closableInstance = new GraphHopper().setStoreOnFlush(true);
         assertTrue(closableInstance.load(ghLoc));
@@ -322,31 +322,36 @@ public void testFailsForWrongConfig() throws IOException
         assertEquals(5, instance.getGraph().getNodes());
         instance.close();
 
-        instance = new GraphHopper().init(
-                new CmdArgs().
-                put("osmreader.osm", testOsm3).
-                put("osmreader.dataaccess", "RAM").
-                put("graph.flagEncoders", "FOOT").
-                put("prepare.chWeighting", "no")).
-                setOSMFile(testOsm3);
+        // different config (flagEncoder list)
         try
         {
-            instance.load(ghLoc);
+            GraphHopper tmpGH = new GraphHopper().init(
+                    new CmdArgs().
+                    put("osmreader.osm", testOsm3).
+                    put("osmreader.dataaccess", "RAM").
+                    put("graph.flagEncoders", "FOOT").
+                    put("prepare.chWeighting", "no")).
+                    setOSMFile(testOsm3);
+            tmpGH.load(ghLoc);
             assertTrue(false);
         } catch (Exception ex)
         {
         }
 
-        // different order should be ok
-        instance = new GraphHopper().init(
-                new CmdArgs().
-                put("osmreader.osm", testOsm3).
-                put("osmreader.dataaccess", "RAM").
-                put("prepare.chWeighting", "no").
-                put("graph.flagEncoders", "CAR,FOOT")).
-                setOSMFile(testOsm3);
-        assertTrue(instance.load(ghLoc));
-        assertEquals(5, instance.getGraph().getNodes());
+        // different order is no longer okay, see #350
+        try
+        {
+            GraphHopper tmpGH = new GraphHopper().init(new CmdArgs().
+                    put("osmreader.osm", testOsm3).
+                    put("osmreader.dataaccess", "RAM").
+                    put("prepare.chWeighting", "no").
+                    put("graph.flagEncoders", "CAR,FOOT")).
+                    setOSMFile(testOsm3);
+            tmpGH.load(ghLoc);
+            assertTrue(false);
+        } catch (Exception ex)
+        {
+        }
     }
 
     @Test
