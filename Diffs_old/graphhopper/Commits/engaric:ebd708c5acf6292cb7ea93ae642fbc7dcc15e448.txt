diff --git a/web/src/main/java/com/graphhopper/http/APIException.java b/web/src/main/java/com/graphhopper/http/APIException.java
new file mode 100644
index 0000000000..70f9634612
--- /dev/null
+++ b/web/src/main/java/com/graphhopper/http/APIException.java
@@ -0,0 +1,26 @@
+package com.graphhopper.http;
+
+import org.eclipse.jetty.http.HttpStatus;
+import org.eclipse.jetty.http.HttpStatus.Code;
+
+public class APIException extends Exception {
+	/**
+	 * 
+	 */
+	private static final long serialVersionUID = 1L;
+	private HttpStatus.Code statusCode;
+
+	public APIException(Code statusCode, String message) {
+		super(message);
+		this.statusCode = statusCode;
+	}
+	
+	public HttpStatus.Code getStatusCode() {
+		return statusCode;
+	}
+	
+	public String getStatusMessage() {
+		return getMessage();
+	}
+
+}
diff --git a/web/src/main/java/com/graphhopper/http/ApiResource.java b/web/src/main/java/com/graphhopper/http/ApiResource.java
new file mode 100644
index 0000000000..6c9bfb6e92
--- /dev/null
+++ b/web/src/main/java/com/graphhopper/http/ApiResource.java
@@ -0,0 +1,145 @@
+package com.graphhopper.http;
+
+import java.util.Arrays;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+import javax.servlet.http.HttpServletRequest;
+ 
+ 
+public enum ApiResource {
+ 
+    FIND("find", new String[]{"query"}, new String[] { "query", "format", "dataset", "maxresults", "offset", "minmatch", "lr", "matchprecision", "fq" });
+   
+    public String[] getMandatoryValues() {
+        return mandatoryValues;
+    }
+ 
+ 
+    public String[] getValidValues() {
+        return validValues;
+    }
+ 
+ 
+    public String getResourceName() {
+        return resourceName;
+    }
+ 
+ 
+    private String resourceName;
+    private String[] mandatoryValues;
+    private String[] validValues;
+ 
+ 
+    private ApiResource(String resourceName, String[] mandatoryValues, String[] validValues) {
+        this.resourceName = resourceName;
+        this.mandatoryValues = mandatoryValues;
+        this.validValues = validValues;
+    }
+   
+    /**
+     * Scans through all the request parameters. Checks if the mandatory field
+     * exists for a resource. Checks if all the request parameters are valid for
+     * the resource. Throws appropriate exceptions if not
+     *
+     * @param HttpServletRequest
+     * @param APIResource
+     *
+     * @throws MissingParameterException
+     * @throws NoSuchParameterException
+     */
+    public void checkAllRequestParameters(HttpServletRequest request)
+            throws MissingParameterException, NoSuchParameterException, InvalidParameterException {
+        // Check if the mandatory parameter exists in the request
+        String value =  this.getMandatoryValues()[0];
+        boolean mandatoryValueExists = checkMandatoryValue(request, value);
+        if( mandatoryValueExists && this.getMandatoryValues().length > 1 )
+        {
+            value =  this.getMandatoryValues()[1];
+            mandatoryValueExists = checkMandatoryValue(request, value);
+        }
+        if(!mandatoryValueExists)
+        {
+            throw new MissingParameterException(value);
+        }
+       
+        // Now check for all the valid parameters for the resource
+        checkValidParameters(request);
+    }
+   
+    /**
+     * Checks if the given mandatory value exists in the request parameters
+     *
+     * @param parameters Enumeration<String>
+     * @param mandatoryValue
+     * @return
+     */
+    private boolean checkMandatoryValue(HttpServletRequest request, String mandatoryValue)
+    {
+        Set<String> keys = request.getParameterMap().keySet();
+        for(String key: keys)
+       {
+            if(mandatoryValue.equalsIgnoreCase(key))
+            {
+                return true;
+            }
+        }       
+        return false;
+    }
+   
+    /**
+     * Checks if all the valid parameters exist in the request for the resource
+     *
+     * @param request
+     * @throws NoSuchParameterException
+     * @throws InvalidParameterException
+     */
+    private void checkValidParameters(HttpServletRequest request) throws NoSuchParameterException, InvalidParameterException
+    {
+        // Now check for all the valid parameters for the resource
+        List<String> list = Arrays.asList(this.getValidValues());
+        Map<String, String[]> parameterMap = request.getParameterMap();
+        for (Map.Entry<String, String[]> entry : parameterMap.entrySet()) {
+            String parameterName = entry.getKey().toLowerCase();
+            if (!list.contains(parameterName)) {
+                throw new NoSuchParameterException(getInvalidPara​meterMessage(
+                        parameterName, this.getResourceName(), this.getValidValues()));
+            }
+        }
+    }
+ 
+ 
+    /**
+     * Builds the message when the parameter provided is invalid
+     *
+     * @param invalid
+     * @param parameter
+     * @param validValues
+     * @return message String
+     */
+    private String getInvalidPara​meterMessage(String invalid, String parameter,
+            String[] validValues) {
+        StringBuilder sb = new StringBuilder();
+ 
+ 
+        sb.append("Parameter ").append(invalid)
+        .append(" is not a valid parameter for resource ")
+        .append(parameter)
+        .append(". Valid parameters for requested resource are ");
+ 
+ 
+        List<String> validList = Arrays.asList(validValues);
+        for (String valid : validList) {
+            sb.append(valid).append(", ");
+        }
+        String message = sb.substring(0, sb.length() - 2) + ".";
+ 
+ 
+        return message;
+    }
+ 
+ 
+ 
+ 
+}
\ No newline at end of file
diff --git a/web/src/main/java/com/graphhopper/http/InvalidParameterException.java b/web/src/main/java/com/graphhopper/http/InvalidParameterException.java
new file mode 100644
index 0000000000..526d4ce38e
--- /dev/null
+++ b/web/src/main/java/com/graphhopper/http/InvalidParameterException.java
@@ -0,0 +1,17 @@
+package com.graphhopper.http;
+
+import org.eclipse.jetty.http.HttpStatus.Code;
+
+public class InvalidParameterException extends APIException {
+
+	public InvalidParameterException(String message )
+    {
+	    super(Code.BAD_REQUEST, message);
+    }
+
+	/**
+	 * 
+	 */
+    private static final long serialVersionUID = 1L;
+
+}
diff --git a/web/src/main/java/com/graphhopper/http/MissingParameterException.java b/web/src/main/java/com/graphhopper/http/MissingParameterException.java
new file mode 100644
index 0000000000..5300e9ba2f
--- /dev/null
+++ b/web/src/main/java/com/graphhopper/http/MissingParameterException.java
@@ -0,0 +1,18 @@
+package com.graphhopper.http;
+
+import org.eclipse.jetty.http.HttpStatus;
+
+public class MissingParameterException extends APIException {
+
+	/**
+	 * 
+	 */
+	private static final long serialVersionUID = 1L;
+	
+	private static String message = "No %s parameter provided.";
+
+	public MissingParameterException(String parameter) {
+		super(HttpStatus.Code.BAD_REQUEST, String.format(message , parameter));
+	}
+
+}
diff --git a/web/src/main/java/com/graphhopper/http/NoSuchParameterException.java b/web/src/main/java/com/graphhopper/http/NoSuchParameterException.java
new file mode 100644
index 0000000000..aaf6cf4d18
--- /dev/null
+++ b/web/src/main/java/com/graphhopper/http/NoSuchParameterException.java
@@ -0,0 +1,16 @@
+package com.graphhopper.http;
+
+import org.eclipse.jetty.http.HttpStatus.Code;
+
+public class NoSuchParameterException extends APIException {
+
+	public NoSuchParameterException(String message) {
+		super(Code.BAD_REQUEST, message);
+	}
+
+	/**
+	 * 
+	 */
+	private static final long serialVersionUID = 1L;
+
+}
