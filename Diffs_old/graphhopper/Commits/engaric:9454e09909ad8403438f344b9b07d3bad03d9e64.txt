diff --git a/web/src/main/java/com/graphhopper/http/GHBaseServlet.java b/web/src/main/java/com/graphhopper/http/GHBaseServlet.java
index 20b73f871a..78da9f1895 100644
--- a/web/src/main/java/com/graphhopper/http/GHBaseServlet.java
+++ b/web/src/main/java/com/graphhopper/http/GHBaseServlet.java
@@ -21,6 +21,7 @@
 import static javax.servlet.http.HttpServletResponse.SC_OK;
 
 import java.io.IOException;
+import java.io.StringWriter;
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.List;
@@ -31,12 +32,20 @@
 import javax.servlet.http.HttpServlet;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
+import javax.xml.parsers.DocumentBuilder;
+import javax.xml.parsers.DocumentBuilderFactory;
+import javax.xml.transform.Transformer;
+import javax.xml.transform.TransformerFactory;
+import javax.xml.transform.dom.DOMSource;
+import javax.xml.transform.stream.StreamResult;
 
 import org.eclipse.jetty.http.HttpStatus;
 import org.json.JSONException;
 import org.json.JSONObject;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
+import org.w3c.dom.Document;
+import org.w3c.dom.Element;
 
 import com.graphhopper.GHResponse;
 import com.graphhopper.util.shapes.GHPoint;
@@ -51,13 +60,17 @@
 	@Named("jsonpAllowed")
 	protected boolean jsonpAllowed;
 
+	@Inject
+	@Named("internalErrorsAllowed")
+	protected boolean internalErrorsAllowed;
+
 	protected void writeJson( HttpServletRequest req, HttpServletResponse res, JSONObject json )
-			throws JSONException, IOException
+	        throws JSONException, IOException
 	{
 		String type = getParam(req, "type", "json");
 		res.setCharacterEncoding("UTF-8");
 		boolean debug = getBooleanParam(req, "debug", false)
-				|| getBooleanParam(req, "pretty", false);
+		        || getBooleanParam(req, "pretty", false);
 		if ("jsonp".equals(type))
 		{
 			res.setContentType("application/javascript");
@@ -165,8 +178,8 @@ protected double getDoubleParam( HttpServletRequest req, String string, double _
 	}
 
 	protected List<GHPoint> getPoints( HttpServletRequest req, String key )
-			throws InvalidParameterException
-			{
+	        throws InvalidParameterException
+	{
 		String[] pointsAsStr = getParams(req, key);
 		final List<GHPoint> infoPoints = new ArrayList<GHPoint>(pointsAsStr.length);
 		for (String str : pointsAsStr)
@@ -178,17 +191,17 @@ protected double getDoubleParam( HttpServletRequest req, String string, double _
 			} else
 			{
 				throw new InvalidParameterException(
-						"Point "
-								+ str
-								+ " is not a valid point. Point must be a comma separated coordinate in WGS84 projection.");
+				        "Point "
+				                + str
+				                + " is not a valid point. Point must be a comma separated coordinate in WGS84 projection.");
 			}
 		}
 
 		return infoPoints;
-			}
+	}
 
 	protected void processResponseErrors( GHResponse rsp, Map<String, Object> json,
-	        boolean internalErrorsAllowed )
+			boolean internalErrorsAllowed )
 	{
 		if (rsp.hasErrors())
 		{
@@ -218,6 +231,67 @@ protected void processResponseErrors( GHResponse rsp, Map<String, Object> json,
 		}
 	}
 
+	protected String createGPXString( HttpServletRequest req, HttpServletResponse res,
+			GHResponse rsp )
+	{
+		boolean includeElevation = getBooleanParam(req, "elevation", false);
+		res.setCharacterEncoding("UTF-8");
+		res.setContentType("application/xml");
+		String trackName = getParam(req, "track", "GraphHopper Track");
+		res.setHeader("Content-Disposition", "inline; filename=" + "GraphHopper.gpx");
+		long time = getLongParam(req, "millis", System.currentTimeMillis());
+		if (rsp.hasErrors())
+			return errorsToXML(rsp.getErrors());
+		else
+			return rsp.getInstructions().createGPX(trackName, time, includeElevation);
+	}
+
+	protected String errorsToXML( List<Throwable> list )
+	{
+		try
+		{
+			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
+			DocumentBuilder builder = factory.newDocumentBuilder();
+			Document doc = builder.newDocument();
+			Element gpxElement = doc.createElement("gpx");
+			gpxElement.setAttribute("creator", "GraphHopper");
+			gpxElement.setAttribute("version", "1.1");
+			doc.appendChild(gpxElement);
+
+			Element mdElement = doc.createElement("metadata");
+			gpxElement.appendChild(mdElement);
+
+			Element extensionsElement = doc.createElement("extensions");
+			mdElement.appendChild(extensionsElement);
+
+			Element messageElement = doc.createElement("message");
+			extensionsElement.appendChild(messageElement);
+			messageElement.setTextContent(list.get(0).getMessage());
+
+			Element hintsElement = doc.createElement("hints");
+			extensionsElement.appendChild(hintsElement);
+
+			for (Throwable t : list)
+			{
+				Element error = doc.createElement("error");
+				hintsElement.appendChild(error);
+				error.setAttribute("message", t.getMessage());
+				if (internalErrorsAllowed)
+				{
+					error.setAttribute("details", t.getClass().getName());
+				}
+			}
+			TransformerFactory transformerFactory = TransformerFactory.newInstance();
+			Transformer transformer = transformerFactory.newTransformer();
+			StringWriter writer = new StringWriter();
+			transformer.transform(new DOMSource(doc), new StreamResult(writer));
+			return writer.toString();
+		} catch (Exception ex)
+		{
+			throw new RuntimeException(ex);
+		}
+	}
+
 	public void writeResponse( HttpServletResponse res, String str )
 	{
 		try
diff --git a/web/src/main/java/com/graphhopper/http/GHServletModule.java b/web/src/main/java/com/graphhopper/http/GHServletModule.java
index 6057e8a0ee..4e910d80da 100644
--- a/web/src/main/java/com/graphhopper/http/GHServletModule.java
+++ b/web/src/main/java/com/graphhopper/http/GHServletModule.java
@@ -37,8 +37,8 @@ public GHServletModule( CmdArgs args )
 	{
 		this.args = args;
 		params.put("mimeTypes", "text/html," + "text/plain," + "text/xml,"
-				+ "application/xhtml+xml," + "text/css," + "application/json,"
-				+ "application/javascript," + "image/svg+xml");
+		        + "application/xhtml+xml," + "text/css," + "application/json,"
+		        + "application/javascript," + "image/svg+xml");
 	}
 
 	@Override
@@ -52,15 +52,15 @@ protected void configureServlets()
 
 		filter("*").through(IPFilter.class);
 		bind(IPFilter.class).toInstance(
-				new IPFilter(args.get("jetty.whiteips", ""), args.get("jetty.blackips", "")));
+		        new IPFilter(args.get("jetty.whiteips", ""), args.get("jetty.blackips", "")));
 
-		serve("/i18n","/i18n/").with(I18NServlet.class);
+		serve("/i18n", "/i18n/").with(I18NServlet.class);
 		bind(I18NServlet.class).in(Singleton.class);
 
-		serve("/info","/info/").with(InfoServlet.class);
+		serve("/info", "/info/").with(InfoServlet.class);
 		bind(InfoServlet.class).in(Singleton.class);
-
-		serve("/route","/route/").with(GraphHopperServlet.class);
+		//
+		serve("/route", "/route/").with(GraphHopperServlet.class);
 		bind(GraphHopperServlet.class).in(Singleton.class);
 
 		if (args.getBool("update.enable", true))
@@ -68,10 +68,11 @@ protected void configureServlets()
 			serve("/update*").with(UpdateServlet.class);
 			bind(UpdateServlet.class).in(Singleton.class);
 		}
-		serve("/nearest","/nearest/").with(NearestServlet.class);
+		serve("/nearest", "/nearest/").with(NearestServlet.class);
 		bind(NearestServlet.class).in(Singleton.class);
 
-//		serve("/*").with(InvalidRequestServlet.class);
-//		bind(InvalidRequestServlet.class).in(Singleton.class);
+		// Serve files that don't contain cetain file extensions
+		serveRegex("^((?![.]html|css|js|png|gif).)*$").with(InvalidRequestServlet.class);
+		bind(InvalidRequestServlet.class).in(Singleton.class);
 	}
 }
diff --git a/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java b/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
index 7e9067b6ff..2c005aa64f 100644
--- a/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
+++ b/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
@@ -20,7 +20,6 @@
 import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;
 
 import java.io.IOException;
-import java.io.StringWriter;
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.Collections;
@@ -30,21 +29,12 @@
 import java.util.Map.Entry;
 
 import javax.inject.Inject;
-import javax.inject.Named;
 import javax.servlet.ServletException;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
-import javax.xml.parsers.DocumentBuilder;
-import javax.xml.parsers.DocumentBuilderFactory;
-import javax.xml.transform.Transformer;
-import javax.xml.transform.TransformerFactory;
-import javax.xml.transform.dom.DOMSource;
-import javax.xml.transform.stream.StreamResult;
 
 import org.json.JSONException;
 import org.json.JSONObject;
-import org.w3c.dom.Document;
-import org.w3c.dom.Element;
 
 import com.graphhopper.GHRequest;
 import com.graphhopper.GHResponse;
@@ -75,384 +65,319 @@
  */
 public class GraphHopperServlet extends GHBaseServlet
 {
-    private static final long serialVersionUID = 1L;
-
-    @Inject
-    private GraphHopper hopper;
-
-    @Inject
-    @Named("internalErrorsAllowed")
-    private boolean internalErrorsAllowed;
-
-    @Override
-    public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes )
-            throws ServletException, IOException
-    {
-        getGHResponse(httpReq, httpRes);
-    }
-
-    public GHResponse getGHResponse( HttpServletRequest httpReq, HttpServletResponse httpRes )
-            throws JSONException, IOException
-    {
-        boolean writeGPX = "gpx".equalsIgnoreCase(getParam(httpReq, "type", "json"));
-        double minPathPrecision = getDoubleParam(httpReq, "way_point_max_distance", 1d);
-        boolean enableInstructions = writeGPX || getBooleanParam(httpReq, "instructions", true);
-        boolean calcPoints = getBooleanParam(httpReq, "calc_points", true);
-        boolean enableElevation = getBooleanParam(httpReq, "elevation", false);
-        boolean pointsEncoded = getBooleanParam(httpReq, "points_encoded", true);
-
-        String vehicleStr = getParam(httpReq, "vehicle", null);
-        String weighting = getParam(httpReq, "weighting", "fastest");
-        String algoStr = getParam(httpReq, "algorithm", null);
-        String localeStr = getParam(httpReq, "locale", "en").replace('-', '_');
-
-        StopWatch sw = new StopWatch().start();
-
-        String instructionsString = getParam(httpReq, "instructions", "true");
-        String pointsEncodedString = getParam(httpReq, "points_encoded", "true");
-        String calcPointsString = getParam(httpReq, "calc_points", "true");
-        String debugString = getParam(httpReq, "debug", "true");
-        String prettyString = getParam(httpReq, "pretty", "true");
-        String avoidancesString = getParam(httpReq, "avoidances", null);
-
-        GHResponse ghRsp = null;
-        List<GHPoint> infoPoints;
-
-        try
-        {
-            infoPoints = getPoints(httpReq, "point");
-        } catch (InvalidParameterException e)
-        {
-            return new GHResponse().addError(e);
-        }
-
-        try
-        {
-            ApiResource.ROUTE.checkAllRequestParameters(httpReq);
-
-            // we can reduce the path length based on the maximum differences to the original
-            // coordinates
-
-            if (!new CaseInsensitiveStringListValidator()
-                    .isValid(localeStr, TranslationMap.LOCALES))
-            {
-                String errMesg = buildErrorMessageString(localeStr, "locale",
-                        TranslationMap.LOCALES);
-                ghRsp = new GHResponse()
-                        .addError(new InvalidParameterException(errMesg.toString()));
-            } else if (null != algoStr
-                    && !new CaseInsensitiveStringListValidator().isValid(algoStr,
-                            AlgorithmOptions.ASTAR, AlgorithmOptions.ASTAR_BI,
-                            AlgorithmOptions.DIJKSTRA, AlgorithmOptions.DIJKSTRA_BI,
-                            AlgorithmOptions.DIJKSTRA_ONE_TO_MANY))
-            {
-                String errMesg = buildErrorMessageString(algoStr, "algorithm",
-                        AlgorithmOptions.ASTAR, AlgorithmOptions.ASTAR_BI,
-                        AlgorithmOptions.DIJKSTRA, AlgorithmOptions.DIJKSTRA_BI,
-                        AlgorithmOptions.DIJKSTRA_ONE_TO_MANY);
-                ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg));
-            } else if (!new BooleanValidator().isValid(instructionsString))
-            {
-                String errMesg = buildBooleanErrorMessageString(instructionsString, "instructions");
-                ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg));
-            } else if (!new BooleanValidator().isValid(pointsEncodedString))
-            {
-                String errMesg = buildBooleanErrorMessageString(pointsEncodedString,
-                        "points_encoded");
-                ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg));
-            } else if (!new BooleanValidator().isValid(calcPointsString))
-            {
-                String errMesg = buildBooleanErrorMessageString(calcPointsString, "calc_points");
-                ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg));
-            } else if (!new BooleanValidator().isValid(debugString))
-            {
-                String errMesg = buildBooleanErrorMessageString(debugString, "debug");
-                ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg));
-            } else if (!new BooleanValidator().isValid(prettyString))
-            {
-                String errMesg = buildBooleanErrorMessageString(prettyString, "pretty");
-                ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg));
-            } else if (!hopper.getEncodingManager().supports(vehicleStr))
-            {
-                String supported = hopper.getGraph().getEncodingManager().toString();
-                String errMesg = String.format(
-                        "Vehicle %s is not a valid vehicle. Valid vehicles are %s", vehicleStr,
-                        supported);
-                ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg));
-            } else if (enableElevation && !hopper.hasElevation())
-            {
-                ghRsp = new GHResponse().addError(new InvalidParameterException(
-                        "Elevation not supported!"));
-            } else
-            {
-                FlagEncoder algoVehicle = hopper.getEncodingManager().getEncoder(vehicleStr);
-
-                // Lots of lovely braces. I will tidy this up next week... promise!
-                if (avoidancesString != null)
-                {
-                    List<String> allowedAvoidances = new ArrayList<>();
-                    // Check Avoidances
-                    if (algoVehicle instanceof AbstractFlagEncoder)
-                    {
-                        AbstractFlagEncoder abstractFlagEncoder = (AbstractFlagEncoder) algoVehicle;
-                        List<EncoderDecorator> encoderDecorators = abstractFlagEncoder
-                                .getEncoderDecorators();
-                        if (encoderDecorators != null)
-                        {
-                            for (EncoderDecorator encoderDecorator : encoderDecorators)
-                            {
-                                if (encoderDecorator instanceof AbstractAvoidanceDecorator)
-                                {
-                                    AbstractAvoidanceDecorator abstractAvoidanceDecorator = (AbstractAvoidanceDecorator) encoderDecorator;
-                                    allowedAvoidances.addAll(Arrays
-                                            .asList(abstractAvoidanceDecorator
-                                                    .getEdgeAttributesOfInterestNames()));
-                                }
-                            }
-                        }
-                    }
-                    String avoidanceArray[] = avoidancesString.split(",");
-                    for (String avoidance : avoidanceArray)
-                    {
-                        if (!allowedAvoidances.contains(avoidance.trim()))
-                        {
-                            String errMesg = buildErrorMessageString(avoidance, "avoidances",
-                                    allowedAvoidances);
-                            ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg
-                                    .toString()));
-                        }
-                    }
-                }
-
-                if (ghRsp == null)
-                {
-                    GHRequest request = new GHRequest(infoPoints);
-
-                    initHints(request, httpReq.getParameterMap());
-                    request.setVehicle(algoVehicle.toString()).setWeighting(weighting)
-                            .setAlgorithm(algoStr).setLocale(localeStr).getHints()
-                            .put("calcPoints", calcPoints).put("instructions", enableInstructions)
-                            .put("wayPointMaxDistance", minPathPrecision);
-                    ghRsp = hopper.route(request);
-                }
-            }
-        } catch (NoSuchParameterException | MissingParameterException | InvalidParameterException e)
-        {
-            ghRsp = new GHResponse().addError(e);
-        } finally
-        {
-
-            float took = sw.stop().getSeconds();
-            String infoStr = httpReq.getRemoteAddr() + " " + httpReq.getLocale() + " "
-                    + httpReq.getHeader("User-Agent");
-            String logStr = httpReq.getQueryString() + " " + infoStr + " " + infoPoints + ", took:"
-                    + took + ", " + algoStr + ", " + weighting + ", " + vehicleStr;
-
-            if (ghRsp.hasErrors())
-                logger.error(logStr + ", errors:" + ghRsp.getErrors());
-            else
-                logger.info(logStr + ", distance: " + ghRsp.getDistance() + ", time:"
-                        + Math.round(ghRsp.getTime() / 60000f) + "min, points:"
-                        + ghRsp.getPoints().getSize() + ", debug - " + ghRsp.getDebugInfo());
-
-            if (writeGPX)
-            {
-                String xml = createGPXString(httpReq, httpRes, ghRsp);
-                if (ghRsp.hasErrors())
-                {
-                    httpRes.setStatus(SC_BAD_REQUEST);
-                    httpRes.getWriter().append(xml);
-                } else
-                    writeResponse(httpRes, xml);
-            } else
-            {
-                String type = getParam(httpReq, "type", "json");
-                if (!"json".equalsIgnoreCase(type)
-                        || (!"jsonp".equalsIgnoreCase(type) && jsonpAllowed))
-                {
-                    String errorMessage = type
-                            + " is not a valid value for parameter type. Valid values are ";
-                    errorMessage += jsonpAllowed ? "JSON, GPX or JSONP." : "GPX or JSON.";
-                    ghRsp.addError(new InvalidParameterException(errorMessage));
-                }
-                Map<String, Object> map = createJson(ghRsp, calcPoints, pointsEncoded,
-                        enableElevation, enableInstructions);
-                Object infoMap = map.get("info");
-                if (infoMap != null)
-                    ((Map) infoMap).put("took", Math.round(took * 1000));
-
-                if (ghRsp.hasErrors())
-                {
-                    writeJsonError(httpRes, SC_BAD_REQUEST, new JSONObject(map));
-                } else
-                    writeJson(httpReq, httpRes, new JSONObject(map));
-
-            }
-
-        }
-
-        return ghRsp;
-    }
-
-    private String buildBooleanErrorMessageString( String paramValue, String paramName )
-    {
-        return buildErrorMessageString(paramValue, paramName,
-                Arrays.asList(new String[] { Boolean.TRUE.toString(), Boolean.FALSE.toString() }));
-    }
-
-    private String buildErrorMessageString( String paramValue, String paramName,
-            String... validValues )
-    {
-        return buildErrorMessageString(paramValue, paramName, Arrays.asList(validValues));
-    }
-
-    private String buildErrorMessageString( String paramValue, String paramName,
-            List<String> validValues )
-    {
-        StringBuilder errMesg = new StringBuilder(paramValue)
-                .append(" is not a valid value for parameter ").append(paramName)
-                .append(". Valid values are ");
-        for (int i = 0; i < validValues.size(); i++)
-        {
-            String validStr = validValues.get(i);
-            if (i == validValues.size() - 1)
-            {
-                errMesg.append(" or ");
-            }
-            errMesg.append(validStr);
-            if (i < validValues.size() - 2)
-            {
-                errMesg.append(", ");
-            }
-        }
-        return errMesg.toString();
-    }
-
-    protected String createGPXString( HttpServletRequest req, HttpServletResponse res,
-            GHResponse rsp )
-    {
-        boolean includeElevation = getBooleanParam(req, "elevation", false);
-        res.setCharacterEncoding("UTF-8");
-        res.setContentType("application/xml");
-        String trackName = getParam(req, "track", "GraphHopper Track");
-        res.setHeader("Content-Disposition", "attachment;filename=" + "GraphHopper.gpx");
-        long time = getLongParam(req, "millis", System.currentTimeMillis());
-        if (rsp.hasErrors())
-            return errorsToXML(rsp.getErrors());
-        else
-            return rsp.getInstructions().createGPX(trackName, time, includeElevation);
-    }
-
-    private String errorsToXML( List<Throwable> list )
-    {
-        try
-        {
-            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
-            DocumentBuilder builder = factory.newDocumentBuilder();
-            Document doc = builder.newDocument();
-            Element gpxElement = doc.createElement("gpx");
-            gpxElement.setAttribute("creator", "GraphHopper");
-            gpxElement.setAttribute("version", "1.1");
-            doc.appendChild(gpxElement);
-
-            Element mdElement = doc.createElement("metadata");
-            gpxElement.appendChild(mdElement);
-
-            Element extensionsElement = doc.createElement("extensions");
-            mdElement.appendChild(extensionsElement);
-
-            Element messageElement = doc.createElement("message");
-            extensionsElement.appendChild(messageElement);
-            messageElement.setTextContent(list.get(0).getMessage());
-
-            Element hintsElement = doc.createElement("hints");
-            extensionsElement.appendChild(hintsElement);
-
-            for (Throwable t : list)
-            {
-                Element error = doc.createElement("error");
-                hintsElement.appendChild(error);
-                error.setAttribute("message", t.getMessage());
-                if (internalErrorsAllowed)
-                {
-                    error.setAttribute("details", t.getClass().getName());
-                }
-            }
-            TransformerFactory transformerFactory = TransformerFactory.newInstance();
-            Transformer transformer = transformerFactory.newTransformer();
-            StringWriter writer = new StringWriter();
-            transformer.transform(new DOMSource(doc), new StreamResult(writer));
-            return writer.toString();
-        } catch (Exception ex)
-        {
-            throw new RuntimeException(ex);
-        }
-    }
-
-    protected Map<String, Object> createJson( GHResponse rsp, boolean calcPoints,
-            boolean pointsEncoded, boolean includeElevation, boolean enableInstructions )
-    {
-        Map<String, Object> json = new HashMap<String, Object>();
-
-        if (rsp.hasErrors())
-        {
-            processResponseErrors(rsp, json, internalErrorsAllowed);
-
-        } else
-        {
-            Map<String, Object> jsonInfo = new HashMap<String, Object>();
-            json.put("info", jsonInfo);
-            // jsonInfo.put("copyrights", Arrays.asList("GraphHopper",
-            // "OpenStreetMap contributors"));
-            Map<String, Object> jsonPath = new HashMap<String, Object>();
-            jsonPath.put("distance", Helper.round(rsp.getDistance(), 3));
-            jsonPath.put("weight", Helper.round6(rsp.getDistance()));
-            jsonPath.put("time", rsp.getTime());
-
-            if (calcPoints)
-            {
-                jsonPath.put("points_encoded", pointsEncoded);
-
-                PointList points = rsp.getPoints();
-                if (points.getSize() >= 2)
-                {
-                    BBox maxBounds = hopper.getGraph().getBounds();
-                    BBox maxBounds2D = new BBox(maxBounds.minLon, maxBounds.maxLon,
-                            maxBounds.minLat, maxBounds.maxLat);
-                    jsonPath.put("bbox", rsp.calcRouteBBox(maxBounds2D).toGeoJson());
-                }
-
-                jsonPath.put("points", createPoints(points, pointsEncoded, includeElevation));
-
-                if (enableInstructions)
-                {
-                    InstructionList instructions = rsp.getInstructions();
-                    jsonPath.put("instructions", instructions.createJson());
-                }
-            }
-            json.put("paths", Collections.singletonList(jsonPath));
-        }
-        return json;
-    }
-
-    protected Object createPoints( PointList points, boolean pointsEncoded, boolean includeElevation )
-    {
-        if (pointsEncoded)
-            return WebHelper.encodePolyline(points, includeElevation);
-
-        Map<String, Object> jsonPoints = new HashMap<String, Object>();
-        jsonPoints.put("type", "LineString");
-        jsonPoints.put("coordinates", points.toGeoJson(includeElevation));
-        return jsonPoints;
-    }
-
-    protected void initHints( GHRequest request, Map<String, String[]> parameterMap )
-    {
-        WeightingMap m = request.getHints();
-        for (Entry<String, String[]> e : parameterMap.entrySet())
-        {
-            if (e.getValue().length == 1)
-                m.put(e.getKey(), e.getValue()[0]);
-        }
-    }
+	private static final long serialVersionUID = 1L;
+
+	@Inject
+	private GraphHopper hopper;
+
+	@Override
+	public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes )
+	        throws ServletException, IOException
+	{
+		getGHResponse(httpReq, httpRes);
+	}
+
+	public GHResponse getGHResponse( HttpServletRequest httpReq, HttpServletResponse httpRes )
+	        throws JSONException, IOException
+	{
+		boolean writeGPX = "gpx".equalsIgnoreCase(getParam(httpReq, "type", "json"));
+		double minPathPrecision = getDoubleParam(httpReq, "way_point_max_distance", 1d);
+		boolean enableInstructions = writeGPX || getBooleanParam(httpReq, "instructions", true);
+		boolean calcPoints = getBooleanParam(httpReq, "calc_points", true);
+		boolean enableElevation = getBooleanParam(httpReq, "elevation", false);
+		boolean pointsEncoded = getBooleanParam(httpReq, "points_encoded", true);
+
+		String vehicleStr = getParam(httpReq, "vehicle", null);
+		String weighting = getParam(httpReq, "weighting", "fastest");
+		String algoStr = getParam(httpReq, "algorithm", null);
+		String localeStr = getParam(httpReq, "locale", "en").replace('-', '_');
+
+		StopWatch sw = new StopWatch().start();
+
+		String instructionsString = getParam(httpReq, "instructions", "true");
+		String pointsEncodedString = getParam(httpReq, "points_encoded", "true");
+		String calcPointsString = getParam(httpReq, "calc_points", "true");
+		String debugString = getParam(httpReq, "debug", "true");
+		String prettyString = getParam(httpReq, "pretty", "true");
+		String avoidancesString = getParam(httpReq, "avoidances", null);
+
+		GHResponse ghRsp = null;
+		List<GHPoint> infoPoints;
+
+		try
+		{
+			infoPoints = getPoints(httpReq, "point");
+		} catch (InvalidParameterException e)
+		{
+			return new GHResponse().addError(e);
+		}
+
+		try
+		{
+			ApiResource.ROUTE.checkAllRequestParameters(httpReq);
+
+			// we can reduce the path length based on the maximum differences to the original
+			// coordinates
+
+			if (!new CaseInsensitiveStringListValidator()
+			        .isValid(localeStr, TranslationMap.LOCALES))
+			{
+				String errMesg = buildErrorMessageString(localeStr, "locale",
+				        TranslationMap.LOCALES);
+				ghRsp = new GHResponse()
+				        .addError(new InvalidParameterException(errMesg.toString()));
+			} else if (null != algoStr
+			        && !new CaseInsensitiveStringListValidator().isValid(algoStr,
+			                AlgorithmOptions.ASTAR, AlgorithmOptions.ASTAR_BI,
+			                AlgorithmOptions.DIJKSTRA, AlgorithmOptions.DIJKSTRA_BI,
+			                AlgorithmOptions.DIJKSTRA_ONE_TO_MANY))
+			{
+				String errMesg = buildErrorMessageString(algoStr, "algorithm",
+				        AlgorithmOptions.ASTAR, AlgorithmOptions.ASTAR_BI,
+				        AlgorithmOptions.DIJKSTRA, AlgorithmOptions.DIJKSTRA_BI,
+				        AlgorithmOptions.DIJKSTRA_ONE_TO_MANY);
+				ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg));
+			} else if (!new BooleanValidator().isValid(instructionsString))
+			{
+				String errMesg = buildBooleanErrorMessageString(instructionsString, "instructions");
+				ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg));
+			} else if (!new BooleanValidator().isValid(pointsEncodedString))
+			{
+				String errMesg = buildBooleanErrorMessageString(pointsEncodedString,
+				        "points_encoded");
+				ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg));
+			} else if (!new BooleanValidator().isValid(calcPointsString))
+			{
+				String errMesg = buildBooleanErrorMessageString(calcPointsString, "calc_points");
+				ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg));
+			} else if (!new BooleanValidator().isValid(debugString))
+			{
+				String errMesg = buildBooleanErrorMessageString(debugString, "debug");
+				ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg));
+			} else if (!new BooleanValidator().isValid(prettyString))
+			{
+				String errMesg = buildBooleanErrorMessageString(prettyString, "pretty");
+				ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg));
+			} else if (!hopper.getEncodingManager().supports(vehicleStr))
+			{
+				String supported = hopper.getGraph().getEncodingManager().toString();
+				String errMesg = String.format(
+				        "Vehicle %s is not a valid vehicle. Valid vehicles are %s", vehicleStr,
+				        supported);
+				ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg));
+			} else if (enableElevation && !hopper.hasElevation())
+			{
+				ghRsp = new GHResponse().addError(new InvalidParameterException(
+				        "Elevation not supported!"));
+			} else
+			{
+				FlagEncoder algoVehicle = hopper.getEncodingManager().getEncoder(vehicleStr);
+
+				// Lots of lovely braces. I will tidy this up next week... promise!
+				if (avoidancesString != null)
+				{
+					List<String> allowedAvoidances = new ArrayList<>();
+					// Check Avoidances
+					if (algoVehicle instanceof AbstractFlagEncoder)
+					{
+						AbstractFlagEncoder abstractFlagEncoder = (AbstractFlagEncoder) algoVehicle;
+						List<EncoderDecorator> encoderDecorators = abstractFlagEncoder
+						        .getEncoderDecorators();
+						if (encoderDecorators != null)
+						{
+							for (EncoderDecorator encoderDecorator : encoderDecorators)
+							{
+								if (encoderDecorator instanceof AbstractAvoidanceDecorator)
+								{
+									AbstractAvoidanceDecorator abstractAvoidanceDecorator = (AbstractAvoidanceDecorator) encoderDecorator;
+									allowedAvoidances.addAll(Arrays
+									        .asList(abstractAvoidanceDecorator
+									                .getEdgeAttributesOfInterestNames()));
+								}
+							}
+						}
+					}
+					String avoidanceArray[] = avoidancesString.split(",");
+					for (String avoidance : avoidanceArray)
+					{
+						if (!allowedAvoidances.contains(avoidance.trim()))
+						{
+							String errMesg = buildErrorMessageString(avoidance, "avoidances",
+							        allowedAvoidances);
+							ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg
+							        .toString()));
+						}
+					}
+				}
+
+				if (ghRsp == null)
+				{
+					GHRequest request = new GHRequest(infoPoints);
+
+					initHints(request, httpReq.getParameterMap());
+					request.setVehicle(algoVehicle.toString()).setWeighting(weighting)
+					        .setAlgorithm(algoStr).setLocale(localeStr).getHints()
+					        .put("calcPoints", calcPoints).put("instructions", enableInstructions)
+					        .put("wayPointMaxDistance", minPathPrecision);
+					ghRsp = hopper.route(request);
+				}
+			}
+		} catch (NoSuchParameterException | MissingParameterException | InvalidParameterException e)
+		{
+			ghRsp = new GHResponse().addError(e);
+		} finally
+		{
+
+			float took = sw.stop().getSeconds();
+			String infoStr = httpReq.getRemoteAddr() + " " + httpReq.getLocale() + " "
+			        + httpReq.getHeader("User-Agent");
+			String logStr = httpReq.getQueryString() + " " + infoStr + " " + infoPoints + ", took:"
+			        + took + ", " + algoStr + ", " + weighting + ", " + vehicleStr;
+
+			if (ghRsp.hasErrors())
+				logger.error(logStr + ", errors:" + ghRsp.getErrors());
+			else
+				logger.info(logStr + ", distance: " + ghRsp.getDistance() + ", time:"
+				        + Math.round(ghRsp.getTime() / 60000f) + "min, points:"
+				        + ghRsp.getPoints().getSize() + ", debug - " + ghRsp.getDebugInfo());
+
+			if (writeGPX)
+			{
+				String xml = createGPXString(httpReq, httpRes, ghRsp);
+				if (ghRsp.hasErrors())
+				{
+					httpRes.setStatus(SC_BAD_REQUEST);
+					httpRes.getWriter().append(xml);
+				} else
+					writeResponse(httpRes, xml);
+			} else
+			{
+				String type = getParam(httpReq, "type", "json");
+				if (!"json".equalsIgnoreCase(type)
+				        || (!"jsonp".equalsIgnoreCase(type) && jsonpAllowed))
+				{
+					String errorMessage = type
+					        + " is not a valid value for parameter type. Valid values are ";
+					errorMessage += jsonpAllowed ? "JSON, GPX or JSONP." : "GPX or JSON.";
+					ghRsp.addError(new InvalidParameterException(errorMessage));
+				}
+				Map<String, Object> map = createJson(ghRsp, calcPoints, pointsEncoded,
+				        enableElevation, enableInstructions);
+				Object infoMap = map.get("info");
+				if (infoMap != null)
+					((Map) infoMap).put("took", Math.round(took * 1000));
+
+				if (ghRsp.hasErrors())
+				{
+					writeJsonError(httpRes, SC_BAD_REQUEST, new JSONObject(map));
+				} else
+					writeJson(httpReq, httpRes, new JSONObject(map));
+
+			}
+
+		}
+
+		return ghRsp;
+	}
+
+	private String buildBooleanErrorMessageString( String paramValue, String paramName )
+	{
+		return buildErrorMessageString(paramValue, paramName,
+		        Arrays.asList(new String[] { Boolean.TRUE.toString(), Boolean.FALSE.toString() }));
+	}
+
+	private String buildErrorMessageString( String paramValue, String paramName,
+	        String... validValues )
+	{
+		return buildErrorMessageString(paramValue, paramName, Arrays.asList(validValues));
+	}
+
+	private String buildErrorMessageString( String paramValue, String paramName,
+	        List<String> validValues )
+	{
+		StringBuilder errMesg = new StringBuilder(paramValue)
+		        .append(" is not a valid value for parameter ").append(paramName)
+		        .append(". Valid values are ");
+		for (int i = 0; i < validValues.size(); i++)
+		{
+			String validStr = validValues.get(i);
+			if (i == validValues.size() - 1)
+			{
+				errMesg.append(" or ");
+			}
+			errMesg.append(validStr);
+			if (i < validValues.size() - 2)
+			{
+				errMesg.append(", ");
+			}
+		}
+		return errMesg.toString();
+	}
+
+	protected Map<String, Object> createJson( GHResponse rsp, boolean calcPoints,
+	        boolean pointsEncoded, boolean includeElevation, boolean enableInstructions )
+	{
+		Map<String, Object> json = new HashMap<String, Object>();
+
+		if (rsp.hasErrors())
+		{
+			processResponseErrors(rsp, json, internalErrorsAllowed);
+
+		} else
+		{
+			Map<String, Object> jsonInfo = new HashMap<String, Object>();
+			json.put("info", jsonInfo);
+			// jsonInfo.put("copyrights", Arrays.asList("GraphHopper",
+			// "OpenStreetMap contributors"));
+			Map<String, Object> jsonPath = new HashMap<String, Object>();
+			jsonPath.put("distance", Helper.round(rsp.getDistance(), 3));
+			jsonPath.put("weight", Helper.round6(rsp.getDistance()));
+			jsonPath.put("time", rsp.getTime());
+
+			if (calcPoints)
+			{
+				jsonPath.put("points_encoded", pointsEncoded);
+
+				PointList points = rsp.getPoints();
+				if (points.getSize() >= 2)
+				{
+					BBox maxBounds = hopper.getGraph().getBounds();
+					BBox maxBounds2D = new BBox(maxBounds.minLon, maxBounds.maxLon,
+					        maxBounds.minLat, maxBounds.maxLat);
+					jsonPath.put("bbox", rsp.calcRouteBBox(maxBounds2D).toGeoJson());
+				}
+
+				jsonPath.put("points", createPoints(points, pointsEncoded, includeElevation));
+
+				if (enableInstructions)
+				{
+					InstructionList instructions = rsp.getInstructions();
+					jsonPath.put("instructions", instructions.createJson());
+				}
+			}
+			json.put("paths", Collections.singletonList(jsonPath));
+		}
+		return json;
+	}
+
+	protected Object createPoints( PointList points, boolean pointsEncoded, boolean includeElevation )
+	{
+		if (pointsEncoded)
+			return WebHelper.encodePolyline(points, includeElevation);
+
+		Map<String, Object> jsonPoints = new HashMap<String, Object>();
+		jsonPoints.put("type", "LineString");
+		jsonPoints.put("coordinates", points.toGeoJson(includeElevation));
+		return jsonPoints;
+	}
+
+	protected void initHints( GHRequest request, Map<String, String[]> parameterMap )
+	{
+		WeightingMap m = request.getHints();
+		for (Entry<String, String[]> e : parameterMap.entrySet())
+		{
+			if (e.getValue().length == 1)
+				m.put(e.getKey(), e.getValue()[0]);
+		}
+	}
 }
diff --git a/web/src/main/java/com/graphhopper/http/InvalidRequestServlet.java b/web/src/main/java/com/graphhopper/http/InvalidRequestServlet.java
index 384de89945..59047fecfc 100644
--- a/web/src/main/java/com/graphhopper/http/InvalidRequestServlet.java
+++ b/web/src/main/java/com/graphhopper/http/InvalidRequestServlet.java
@@ -15,6 +15,8 @@
  */
 package com.graphhopper.http;
 
+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;
+
 import java.io.IOException;
 import java.util.HashMap;
 import java.util.Map;
@@ -23,8 +25,11 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
+import org.eclipse.jetty.http.HttpStatus.Code;
 import org.json.JSONObject;
 
+import com.graphhopper.GHResponse;
+
 public class InvalidRequestServlet extends GHBaseServlet
 {
 	@Override
@@ -36,12 +41,25 @@ protected void service( HttpServletRequest req, HttpServletResponse res )
 		{
 			resource = resource.substring(1, resource.length());
 		}
-		JSONObject json = new JSONObject();
-		Map<String, Object> map = new HashMap<>();
-		map.put("statuscode", "" + HttpServletResponse.SC_NOT_FOUND);
-		map.put("message", "Resource " + resource
-				+ " does not exist. Valid resources are route, nearest.");
-		json.put("error", map);
-		writeJsonError(res, HttpServletResponse.SC_NOT_FOUND, json);
+
+		String message = "Resource " + resource
+				+ " does not exist. Valid resources are route, nearest.";
+		boolean isGpx = "gpx".equals(req.getParameter("type"));
+		if (isGpx)
+		{
+			GHResponse ghResponse = new GHResponse().addError(new APIException(Code.NOT_FOUND,
+			        message));
+			String xml = createGPXString(req, res, ghResponse);
+			res.setStatus(SC_NOT_FOUND);
+			res.getWriter().append(xml);
+		} else
+		{
+			JSONObject json = new JSONObject();
+			Map<String, Object> map = new HashMap<>();
+			map.put("statuscode", "" + HttpServletResponse.SC_NOT_FOUND);
+			map.put("message", message);
+			json.put("error", map);
+			writeJsonError(res, HttpServletResponse.SC_NOT_FOUND, json);
+		}
 	}
 }
\ No newline at end of file
diff --git a/web/src/main/java/com/graphhopper/http/NearestServlet.java b/web/src/main/java/com/graphhopper/http/NearestServlet.java
index 0d55b97015..1b526c3d82 100644
--- a/web/src/main/java/com/graphhopper/http/NearestServlet.java
+++ b/web/src/main/java/com/graphhopper/http/NearestServlet.java
@@ -25,7 +25,6 @@
 import java.util.Map;
 
 import javax.inject.Inject;
-import javax.inject.Named;
 import javax.servlet.ServletException;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
@@ -51,9 +50,6 @@
 	@Inject
 	private GraphHopper hopper;
 
-	@Named("internalErrorsAllowed")
-	private boolean internalErrorsAllowed;
-
 	private final DistanceCalc calc = Helper.DIST_EARTH;
 
 	@Override
@@ -104,7 +100,7 @@ public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes )
 			ghRsp = new GHResponse().addError(e);
 		}
 
-		if (ghRsp == null || ghRsp.hasErrors())
+		if (ghRsp != null && ghRsp.hasErrors())
 		{
 			processResponseErrors(ghRsp, map, internalErrorsAllowed);
 			writeJsonError(httpRes, SC_BAD_REQUEST, new JSONObject(map));
diff --git a/web/src/main/java/com/graphhopper/http/UpdateServlet.java b/web/src/main/java/com/graphhopper/http/UpdateServlet.java
index 15df20d8e1..e299c368cf 100644
--- a/web/src/main/java/com/graphhopper/http/UpdateServlet.java
+++ b/web/src/main/java/com/graphhopper/http/UpdateServlet.java
@@ -1,14 +1,14 @@
 /*
  *  Licensed to GraphHopper and Peter Karich under one or more contributor
- *  license agreements. See the NOTICE file distributed with this work for 
+ *  license agreements. See the NOTICE file distributed with this work for
  *  additional information regarding copyright ownership.
- * 
- *  GraphHopper licenses this file to you under the Apache License, 
- *  Version 2.0 (the "License"); you may not use this file except in 
+ *
+ *  GraphHopper licenses this file to you under the Apache License,
+ *  Version 2.0 (the "License"); you may not use this file except in
  *  compliance with the License. You may obtain a copy of the License at
- * 
+ *
  *       http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  *  Unless required by applicable law or agreed to in writing, software
  *  distributed under the License is distributed on an "AS IS" BASIS,
  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -52,115 +52,129 @@
  * json it returns the points in GeoJson format (longitude,latitude) unlike the format "lat,lon"
  * used otherwise.
  * <p/>
+ *
  * @author Peter Karich
  */
 public class UpdateServlet extends GHBaseServlet
 {
-    /**
-	 * 
+	/**
+	 *
 	 */
 	private static final long serialVersionUID = 1L;
 	@Inject
-    private GraphHopper hopper;
-
-    @Override
-    public void doGet( HttpServletRequest req, HttpServletResponse res ) throws ServletException, IOException
-    {
-        try
-        {
-            updatePath(req, res);
-        } catch (IllegalArgumentException ex)
-        {
-            writeError(res, SC_BAD_REQUEST, ex.getMessage());
-        } catch (Exception ex)
-        {
-            logger.error("Error while executing request: " + req.getQueryString(), ex);
-            writeError(res, SC_INTERNAL_SERVER_ERROR, "Problem occured:" + ex.getMessage());
-        }
-    }
-
-    void updatePath( HttpServletRequest req, HttpServletResponse res ) throws Exception
-    {
-        List<GHPoint> infoPoints = getPoints(req);
-
-        String vehicleStr = getParam(req, "vehicle", "CAR").toUpperCase();
-        String speed = getParam(req, "speed", "");
-        
-        StopWatch sw = new StopWatch().start();
-        GHResponse ghRsp;
-        if (!hopper.getEncodingManager().supports(vehicleStr))
-        {
-            ghRsp = new GHResponse().addError(new IllegalArgumentException("Vehicle not supported: " + vehicleStr));
-        } else if (0==speed.length()){
-        	ghRsp = new GHResponse().addError(new IllegalArgumentException("Speed value not specified: "));
-        } else
-        {
-        	for (GHPoint ghPoint : infoPoints) {
+	private GraphHopper hopper;
+
+	@Override
+	public void doGet( HttpServletRequest req, HttpServletResponse res ) throws ServletException,
+	IOException
+	{
+		try
+		{
+			updatePath(req, res);
+		} catch (IllegalArgumentException ex)
+		{
+			writeError(res, SC_BAD_REQUEST, ex.getMessage());
+		} catch (Exception ex)
+		{
+			logger.error("Error while executing request: " + req.getQueryString(), ex);
+			writeError(res, SC_INTERNAL_SERVER_ERROR, "Problem occured:" + ex.getMessage());
+		}
+	}
+
+	void updatePath( HttpServletRequest req, HttpServletResponse res ) throws Exception
+	{
+		List<GHPoint> infoPoints = getPoints(req);
+
+		String vehicleStr = getParam(req, "vehicle", "CAR").toUpperCase();
+		String speed = getParam(req, "speed", "");
+
+		StopWatch sw = new StopWatch().start();
+		GHResponse ghRsp;
+		if (!hopper.getEncodingManager().supports(vehicleStr))
+		{
+			ghRsp = new GHResponse().addError(new IllegalArgumentException(
+					"Vehicle not supported: " + vehicleStr));
+		} else if (0 == speed.length())
+		{
+			ghRsp = new GHResponse().addError(new IllegalArgumentException(
+					"Speed value not specified: "));
+		} else
+		{
+			for (GHPoint ghPoint : infoPoints)
+			{
 				LatLongMetaData update = new LatLongMetaData(speed, ghPoint.lat, ghPoint.lon);
 				GraphEdgeUpdate.updateEdge(hopper, update);
 			}
-        	ghRsp = new GHResponse().setFound(true);
-        }
-
-        float took = sw.stop().getSeconds();
-        String infoStr = req.getRemoteAddr() + " " + req.getLocale() + " " + req.getHeader("User-Agent");
-        PointList points = ghRsp.getPoints();
-        String logStr = req.getQueryString() + " " + infoStr + " " + infoPoints
-                + ", time:" + Math.round(ghRsp.getMillis() / 60000f)
-                + "min, points:" + points.getSize() + ", took:" + took
-                + ", debug - " + ghRsp.getDebugInfo();
-
-        if (ghRsp.hasErrors())
-            logger.error(logStr + ", errors:" + ghRsp.getErrors());
-        else
-            logger.info(logStr);
-    }
-
-    String errorsToXML( List<Throwable> list ) throws Exception
-    {
-        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
-        DocumentBuilder builder = factory.newDocumentBuilder();
-        Document doc = builder.newDocument();
-        Element gpxElement = doc.createElement("gpx");
-        gpxElement.setAttribute("creator", "GraphHopper");
-        gpxElement.setAttribute("version", "1.1");
-        doc.appendChild(gpxElement);
-
-        Element mdElement = doc.createElement("metadata");
-        gpxElement.appendChild(mdElement);
-
-        Element errorsElement = doc.createElement("extensions");
-        mdElement.appendChild(errorsElement);
-
-        for (Throwable t : list)
-        {
-            Element error = doc.createElement("error");
-            errorsElement.appendChild(error);
-            error.setAttribute("message", t.getMessage());
-            error.setAttribute("details", t.getClass().getName());
-        }
-        TransformerFactory transformerFactory = TransformerFactory.newInstance();
-        Transformer transformer = transformerFactory.newTransformer();
-        StringWriter writer = new StringWriter();
-        transformer.transform(new DOMSource(doc), new StreamResult(writer));
-        return writer.toString();
-    }
-
-    private List<GHPoint> getPoints( HttpServletRequest req ) throws IOException
-    {
-        String[] pointsAsStr = getParams(req, "point");
-        final List<GHPoint> infoPoints = new ArrayList<GHPoint>(pointsAsStr.length);
-        for (String str : pointsAsStr)
-        {
-            String[] fromStrs = str.split(",");
-            if (fromStrs.length == 2)
-            {
-                GHPoint place = GHPoint.parse(str);
-                if (place != null)
-                    infoPoints.add(place);
-            }
-        }
-
-        return infoPoints;
-    }
+			ghRsp = new GHResponse().setFound(true);
+		}
+
+		float took = sw.stop().getSeconds();
+		String infoStr = req.getRemoteAddr() + " " + req.getLocale() + " "
+				+ req.getHeader("User-Agent");
+		PointList points = ghRsp.getPoints();
+		String logStr = req.getQueryString() + " " + infoStr + " " + infoPoints + ", time:"
+				+ Math.round(ghRsp.getMillis() / 60000f) + "min, points:" + points.getSize()
+				+ ", took:" + took + ", debug - " + ghRsp.getDebugInfo();
+
+		if (ghRsp.hasErrors())
+			logger.error(logStr + ", errors:" + ghRsp.getErrors());
+		else
+			logger.info(logStr);
+	}
+
+	@Override
+	protected String errorsToXML( List<Throwable> list )
+	{
+		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
+		DocumentBuilder builder;
+		try
+		{
+			builder = factory.newDocumentBuilder();
+			Document doc = builder.newDocument();
+			Element gpxElement = doc.createElement("gpx");
+			gpxElement.setAttribute("creator", "GraphHopper");
+			gpxElement.setAttribute("version", "1.1");
+			doc.appendChild(gpxElement);
+
+			Element mdElement = doc.createElement("metadata");
+			gpxElement.appendChild(mdElement);
+
+			Element errorsElement = doc.createElement("extensions");
+			mdElement.appendChild(errorsElement);
+
+			for (Throwable t : list)
+			{
+				Element error = doc.createElement("error");
+				errorsElement.appendChild(error);
+				error.setAttribute("message", t.getMessage());
+				error.setAttribute("details", t.getClass().getName());
+			}
+			TransformerFactory transformerFactory = TransformerFactory.newInstance();
+			Transformer transformer = transformerFactory.newTransformer();
+			StringWriter writer = new StringWriter();
+			transformer.transform(new DOMSource(doc), new StreamResult(writer));
+			return writer.toString();
+		} catch (Exception e)
+		{
+			throw new RuntimeException(e);
+		}
+	}
+
+	private List<GHPoint> getPoints( HttpServletRequest req ) throws IOException
+	{
+		String[] pointsAsStr = getParams(req, "point");
+		final List<GHPoint> infoPoints = new ArrayList<GHPoint>(pointsAsStr.length);
+		for (String str : pointsAsStr)
+		{
+			String[] fromStrs = str.split(",");
+			if (fromStrs.length == 2)
+			{
+				GHPoint place = GHPoint.parse(str);
+				if (place != null)
+					infoPoints.add(place);
+			}
+		}
+
+		return infoPoints;
+	}
 }
