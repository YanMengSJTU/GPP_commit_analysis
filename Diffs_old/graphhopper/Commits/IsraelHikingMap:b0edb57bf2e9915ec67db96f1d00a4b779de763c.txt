diff --git a/core/src/main/java/com/graphhopper/routing/template/RoundTripRoutingTemplate.java b/core/src/main/java/com/graphhopper/routing/template/RoundTripRoutingTemplate.java
index d7014461e5..3c0958af8d 100644
--- a/core/src/main/java/com/graphhopper/routing/template/RoundTripRoutingTemplate.java
+++ b/core/src/main/java/com/graphhopper/routing/template/RoundTripRoutingTemplate.java
@@ -35,7 +35,7 @@
 import com.graphhopper.util.Parameters.Algorithms.RoundTrip;
 import com.graphhopper.util.PathMerger;
 import com.graphhopper.util.Translation;
-import com.graphhopper.util.exceptions.CannotFindPointException;
+import com.graphhopper.util.exceptions.PointNotFoundException;
 import com.graphhopper.util.shapes.GHPoint;
 
 import java.util.ArrayList;
@@ -80,7 +80,7 @@ public RoundTripRoutingTemplate(GHRequest request, GHResponse ghRsp, LocationInd
         EdgeFilter edgeFilter = new DefaultEdgeFilter(encoder);
         QueryResult startQR = locationIndex.findClosest(start.lat, start.lon, edgeFilter);
         if (!startQR.isValid())
-            throw new CannotFindPointException("Cannot find point 0: " + start, 0);
+            throw new PointNotFoundException("Cannot find point 0: " + start, 0);
 
         queryResults.add(startQR);
 
diff --git a/core/src/main/java/com/graphhopper/routing/template/ViaRoutingTemplate.java b/core/src/main/java/com/graphhopper/routing/template/ViaRoutingTemplate.java
index 1f75dc7bf4..cab5eae5b1 100644
--- a/core/src/main/java/com/graphhopper/routing/template/ViaRoutingTemplate.java
+++ b/core/src/main/java/com/graphhopper/routing/template/ViaRoutingTemplate.java
@@ -31,7 +31,7 @@
 import com.graphhopper.util.PathMerger;
 import com.graphhopper.util.StopWatch;
 import com.graphhopper.util.Translation;
-import com.graphhopper.util.exceptions.CannotFindPointException;
+import com.graphhopper.util.exceptions.PointNotFoundException;
 import com.graphhopper.util.shapes.GHPoint;
 
 import java.util.ArrayList;
@@ -67,7 +67,7 @@ public ViaRoutingTemplate(GHRequest ghRequest, GHResponse ghRsp, LocationIndex l
             GHPoint point = points.get(placeIndex);
             QueryResult res = locationIndex.findClosest(point.lat, point.lon, edgeFilter);
             if (!res.isValid())
-                ghResponse.addError(new CannotFindPointException("Cannot find point " + placeIndex + ": " + point, placeIndex));
+                ghResponse.addError(new PointNotFoundException("Cannot find point " + placeIndex + ": " + point, placeIndex));
 
             queryResults.add(res);
         }
diff --git a/core/src/main/java/com/graphhopper/util/PathMerger.java b/core/src/main/java/com/graphhopper/util/PathMerger.java
index 7f0da2a686..70a06cb2f0 100644
--- a/core/src/main/java/com/graphhopper/util/PathMerger.java
+++ b/core/src/main/java/com/graphhopper/util/PathMerger.java
@@ -19,8 +19,10 @@
 
 import com.graphhopper.PathWrapper;
 import com.graphhopper.routing.Path;
+import com.graphhopper.util.exceptions.ConnectionNotFoundException;
 
 import java.util.ArrayList;
+import java.util.Collections;
 import java.util.List;
 
 /**
@@ -126,7 +128,7 @@ public void doWork(PathWrapper altRsp, List<Path> paths, Translation tr) {
             altRsp.setInstructions(fullInstructions);
 
         if (!allFound)
-            altRsp.addError(new RuntimeException("Connection between locations not found"));
+            altRsp.addError(new ConnectionNotFoundException("Connection between locations not found", Collections.<String, Object>emptyMap()));
 
         altRsp.setDescription(description).
                 setPoints(fullPoints).
diff --git a/core/src/main/java/com/graphhopper/util/exceptions/ConnectionNotFoundException.java b/core/src/main/java/com/graphhopper/util/exceptions/ConnectionNotFoundException.java
new file mode 100644
index 0000000000..a512cb6db6
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/util/exceptions/ConnectionNotFoundException.java
@@ -0,0 +1,31 @@
+/*
+ *  Licensed to GraphHopper GmbH under one or more contributor
+ *  license agreements. See the NOTICE file distributed with this work for
+ *  additional information regarding copyright ownership.
+ *
+ *  GraphHopper GmbH licenses this file to you under the Apache License,
+ *  Version 2.0 (the "License"); you may not use this file except in
+ *  compliance with the License. You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package com.graphhopper.util.exceptions;
+
+import java.util.Map;
+
+/**
+ * If a route cannot be found due to disconnected graphs.
+ *
+ * @author Peter Karich
+ */
+public class ConnectionNotFoundException extends DetailedIllegalArgumentException {
+    public ConnectionNotFoundException(String var1, Map<String, Object> details) {
+        super(var1, details);
+    }
+}
diff --git a/core/src/main/java/com/graphhopper/util/exceptions/DetailedIllegalArgumentException.java b/core/src/main/java/com/graphhopper/util/exceptions/DetailedIllegalArgumentException.java
new file mode 100644
index 0000000000..5e01d77e27
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/util/exceptions/DetailedIllegalArgumentException.java
@@ -0,0 +1,36 @@
+/*
+ * Copyright 2016 peterk.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.graphhopper.util.exceptions;
+
+import java.util.Map;
+
+/**
+ * @author Peter Karich
+ */
+public class DetailedIllegalArgumentException extends IllegalArgumentException implements GHException {
+
+    private final Map<String, Object> details;
+
+    public DetailedIllegalArgumentException(String var1, Map<String, Object> details) {
+        super(var1);
+        this.details = details;
+    }
+
+    @Override
+    public Map<String, Object> getDetails() {
+        return details;
+    }
+}
diff --git a/core/src/main/java/com/graphhopper/util/exceptions/DetailedRuntimeException.java b/core/src/main/java/com/graphhopper/util/exceptions/DetailedRuntimeException.java
new file mode 100644
index 0000000000..5d133b5c3a
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/util/exceptions/DetailedRuntimeException.java
@@ -0,0 +1,36 @@
+/*
+ * Copyright 2016 peterk.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.graphhopper.util.exceptions;
+
+import java.util.Map;
+
+/**
+ * @author Peter Karich
+ */
+public class DetailedRuntimeException extends RuntimeException implements GHException {
+
+    private final Map<String, Object> details;
+
+    public DetailedRuntimeException(String var1, Map<String, Object> details) {
+        super(var1);
+        this.details = details;
+    }
+
+    @Override
+    public Map<String, Object> getDetails() {
+        return details;
+    }
+}
diff --git a/core/src/main/java/com/graphhopper/util/exceptions/GHException.java b/core/src/main/java/com/graphhopper/util/exceptions/GHException.java
index b510c8fd2b..e8e1f2bbbc 100644
--- a/core/src/main/java/com/graphhopper/util/exceptions/GHException.java
+++ b/core/src/main/java/com/graphhopper/util/exceptions/GHException.java
@@ -25,5 +25,5 @@
  * @author Robin Boldt
  */
 public interface GHException {
-    public abstract Map<String, String> getDetails();
+    public abstract Map<String, Object> getDetails();
 }
diff --git a/core/src/main/java/com/graphhopper/util/exceptions/CannotFindPointException.java b/core/src/main/java/com/graphhopper/util/exceptions/PointNotFoundException.java
similarity index 81%
rename from core/src/main/java/com/graphhopper/util/exceptions/CannotFindPointException.java
rename to core/src/main/java/com/graphhopper/util/exceptions/PointNotFoundException.java
index 96307ed8e4..d5abfcb557 100644
--- a/core/src/main/java/com/graphhopper/util/exceptions/CannotFindPointException.java
+++ b/core/src/main/java/com/graphhopper/util/exceptions/PointNotFoundException.java
@@ -26,11 +26,11 @@
  *
  * @author Robin Boldt
  */
-public class CannotFindPointException extends IllegalArgumentException implements GHException {
+public class PointNotFoundException extends IllegalArgumentException implements GHException {
 
     protected final int pointIndex;
 
-    public CannotFindPointException(String var1, int pointIndex) {
+    public PointNotFoundException(String var1, int pointIndex) {
         super(var1);
         this.pointIndex = pointIndex;
     }
@@ -40,7 +40,7 @@ public int getPointIndex() {
     }
 
     @Override
-    public Map<String, String> getDetails() {
-        return Collections.singletonMap("point_index", String.valueOf(pointIndex));
+    public Map<String, Object> getDetails() {
+        return Collections.<String, Object>singletonMap("point_index", pointIndex);
     }
 }
diff --git a/core/src/main/java/com/graphhopper/util/exceptions/PointOutOfBoundsException.java b/core/src/main/java/com/graphhopper/util/exceptions/PointOutOfBoundsException.java
index c7f1b37bae..774ebfeb33 100644
--- a/core/src/main/java/com/graphhopper/util/exceptions/PointOutOfBoundsException.java
+++ b/core/src/main/java/com/graphhopper/util/exceptions/PointOutOfBoundsException.java
@@ -5,7 +5,7 @@
  *
  * @author Robin Boldt
  */
-public class PointOutOfBoundsException extends CannotFindPointException {
+public class PointOutOfBoundsException extends PointNotFoundException {
     public PointOutOfBoundsException(String var1, int pointIndex) {
         super(var1, pointIndex);
     }
diff --git a/web/src/main/java/com/graphhopper/http/GraphHopperWeb.java b/web/src/main/java/com/graphhopper/http/GraphHopperWeb.java
index 9ee781cbe4..58bbda5140 100644
--- a/web/src/main/java/com/graphhopper/http/GraphHopperWeb.java
+++ b/web/src/main/java/com/graphhopper/http/GraphHopperWeb.java
@@ -22,17 +22,23 @@
 import com.graphhopper.GraphHopperAPI;
 import com.graphhopper.PathWrapper;
 import com.graphhopper.util.*;
-import com.graphhopper.util.exceptions.CannotFindPointException;
+import com.graphhopper.util.exceptions.ConnectionNotFoundException;
+import com.graphhopper.util.exceptions.DetailedIllegalArgumentException;
+import com.graphhopper.util.exceptions.DetailedRuntimeException;
+import com.graphhopper.util.exceptions.PointNotFoundException;
 import com.graphhopper.util.exceptions.PointOutOfBoundsException;
 import com.graphhopper.util.shapes.GHPoint;
 import org.json.JSONArray;
 import org.json.JSONObject;
 
 import java.util.ArrayList;
+import java.util.HashMap;
 import java.util.HashSet;
 import java.util.List;
+import java.util.Map;
 import java.util.Map.Entry;
 import java.util.Set;
+import org.json.JSONException;
 
 /**
  * Main wrapper of the GraphHopper Directions API for a simple and efficient usage.
@@ -156,8 +162,36 @@ public static PathWrapper createPathWrapper(JSONObject path,
         return pathWrapper;
     }
 
+    // Credits to: http://stackoverflow.com/a/24012023/194609
+    private static Map<String, Object> toMap(JSONObject object) throws JSONException {
+        Map<String, Object> map = new HashMap<>(object.keySet().size());
+        for (String key : object.keySet()) {
+            Object value = object.get(key);
+            if (value instanceof JSONArray) {
+                value = toList((JSONArray) value);
+            } else if (value instanceof JSONObject) {
+                value = toMap((JSONObject) value);
+            }
+            map.put(key, value);
+        }
+        return map;
+    }
+
+    private static List<Object> toList(JSONArray array) throws JSONException {
+        List<Object> list = new ArrayList<>();
+        for (Object value : array) {
+            if (value instanceof JSONArray) {
+                value = toList((JSONArray) value);
+            } else if (value instanceof JSONObject) {
+                value = toMap((JSONObject) value);
+            }
+            list.add(value);
+        }
+        return list;
+    }
+
     public static List<Throwable> readErrors(JSONObject json) {
-        List<Throwable> errors = new ArrayList<Throwable>();
+        List<Throwable> errors = new ArrayList<>();
         JSONArray errorJson;
 
         if (json.has("message")) {
@@ -184,19 +218,21 @@ public static PathWrapper createPathWrapper(JSONObject path,
             else if (exClass.equals(IllegalStateException.class.getName()))
                 errors.add(new IllegalStateException(exMessage));
             else if (exClass.equals(RuntimeException.class.getName()))
-                errors.add(new RuntimeException(exMessage));
+                errors.add(new DetailedRuntimeException(exMessage, toMap(error)));
             else if (exClass.equals(IllegalArgumentException.class.getName()))
-                errors.add(new IllegalArgumentException(exMessage));
-            else if (exClass.equals(CannotFindPointException.class.getName())) {
+                errors.add(new DetailedIllegalArgumentException(exMessage, toMap(error)));
+            else if (exClass.equals(ConnectionNotFoundException.class.getName())) {
+                errors.add(new ConnectionNotFoundException(exMessage, toMap(error)));
+            } else if (exClass.equals(PointNotFoundException.class.getName())) {
                 int pointIndex = error.getInt("point_index");
-                errors.add(new CannotFindPointException(exMessage, pointIndex));
+                errors.add(new PointNotFoundException(exMessage, pointIndex));
             } else if (exClass.equals(PointOutOfBoundsException.class.getName())) {
                 int pointIndex = error.getInt("point_index");
                 errors.add(new PointOutOfBoundsException(exMessage, pointIndex));
             } else if (exClass.isEmpty())
-                errors.add(new RuntimeException(exMessage));
+                errors.add(new DetailedRuntimeException(exMessage, toMap(error)));
             else
-                errors.add(new RuntimeException(exClass + " " + exMessage));
+                errors.add(new DetailedRuntimeException(exClass + " " + exMessage, toMap(error)));
         }
 
         if (json.has("message") && errors.isEmpty())
diff --git a/web/src/main/java/com/graphhopper/http/SimpleRouteSerializer.java b/web/src/main/java/com/graphhopper/http/SimpleRouteSerializer.java
index 37dd5b1e87..f91a115110 100644
--- a/web/src/main/java/com/graphhopper/http/SimpleRouteSerializer.java
+++ b/web/src/main/java/com/graphhopper/http/SimpleRouteSerializer.java
@@ -52,9 +52,9 @@ private String getMessage(Throwable t) {
 
         if (rsp.hasErrors()) {
             json.put("message", getMessage(rsp.getErrors().get(0)));
-            List<Map<String, String>> errorHintList = new ArrayList<Map<String, String>>();
+            List<Map<String, Object>> errorHintList = new ArrayList<>();
             for (Throwable t : rsp.getErrors()) {
-                Map<String, String> map = new HashMap<String, String>();
+                Map<String, Object> map = new HashMap<>();
                 map.put("message", getMessage(t));
                 map.put("details", t.getClass().getName());
                 if (t instanceof GHException) {
