diff --git a/graphhopper-teavm/pom.xml b/graphhopper-teavm/pom.xml
index 7b608cbcfd..59a8bf3a4f 100644
--- a/graphhopper-teavm/pom.xml
+++ b/graphhopper-teavm/pom.xml
@@ -14,6 +14,17 @@
       <groupId>com.graphhopper</groupId>
       <artifactId>graphhopper</artifactId>
       <version>0.3-SNAPSHOT</version>
+      <exclusions>
+        <exclusion>
+          <groupId>org.slf4j</groupId>
+          <artifactId>slf4j-log4j12</artifactId>
+        </exclusion>
+      </exclusions>
+    </dependency>
+    <dependency>
+      <groupId>org.teavm</groupId>
+      <artifactId>teavm-core</artifactId>
+      <version>0.2-SNAPSHOT</version>
     </dependency>
   </dependencies>
 
diff --git a/graphhopper-teavm/src/main/java/com/graphhopper/teavm/slf4j/LoggerFactoryTransformer.java b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/slf4j/LoggerFactoryTransformer.java
new file mode 100644
index 0000000000..31a1b3cc7f
--- /dev/null
+++ b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/slf4j/LoggerFactoryTransformer.java
@@ -0,0 +1,66 @@
+package com.graphhopper.teavm.slf4j;
+
+import org.slf4j.ILoggerFactory;
+import org.slf4j.LoggerFactory;
+import org.teavm.model.*;
+import org.teavm.model.instructions.*;
+
+/**
+ *
+ * @author Alexey Andreev
+ */
+public class LoggerFactoryTransformer implements ClassHolderTransformer {
+    @Override
+    public void transformClass(ClassHolder cls, ClassReaderSource innerSource) {
+        if (!cls.getName().equals(LoggerFactory.class.getName())) {
+            return;
+        }
+        addCacheField(cls);
+        modifyClinit(cls);
+        replaceGetFactory(cls);
+    }
+
+    private void addCacheField(ClassHolder cls) {
+        FieldHolder cacheField = new FieldHolder("loggerFactoryCache");
+        cacheField.setLevel(AccessLevel.PRIVATE);
+        cacheField.getModifiers().add(ElementModifier.STATIC);
+        cacheField.setType(ValueType.object(TeaVMLoggerFactory.class.getName()));
+        cls.addField(cacheField);
+    }
+
+    private void modifyClinit(ClassHolder cls) {
+        MethodHolder clinit = cls.getMethod(new MethodDescriptor("<clinit>", ValueType.VOID));
+        BasicBlock clinitBlock = clinit.getProgram().basicBlockAt(0);
+        Variable factoryVar = clinit.getProgram().createVariable();
+        ConstructInstruction construct = new ConstructInstruction();
+        construct.setType(TeaVMLoggerFactory.class.getName());
+        construct.setReceiver(factoryVar);
+        clinitBlock.getInstructions().add(0, construct);
+        InvokeInstruction init = new InvokeInstruction();
+        init.setInstance(factoryVar);
+        init.setMethod(new MethodReference(TeaVMLoggerFactory.class.getName(), "<init>", ValueType.VOID));
+        init.setType(InvocationType.SPECIAL);
+        clinitBlock.getInstructions().add(1, init);
+        PutFieldInstruction put = new PutFieldInstruction();
+        put.setValue(factoryVar);
+        put.setField(new FieldReference(LoggerFactory.class.getName(), "loggerFactoryCache"));
+        clinitBlock.getInstructions().add(2, put);
+    }
+
+    private void replaceGetFactory(ClassHolder cls) {
+        MethodHolder method = cls.getMethod(new MethodDescriptor("getILoggerFactory",
+                ValueType.object(ILoggerFactory.class.getName())));
+        Program program = new Program();
+        BasicBlock block = program.createBasicBlock();
+        Variable cacheVar = program.createVariable();
+        GetFieldInstruction get = new GetFieldInstruction();
+        get.setField(new FieldReference(LoggerFactory.class.getName(), "loggerFactoryCache"));
+        get.setFieldType(ValueType.object(ILoggerFactory.class.getName()));
+        get.setReceiver(cacheVar);
+        block.getInstructions().add(get);
+        ExitInstruction exit = new ExitInstruction();
+        exit.setValueToReturn(cacheVar);
+        block.getInstructions().add(exit);
+        method.setProgram(program);
+    }
+}
diff --git a/graphhopper-teavm/src/main/java/com/graphhopper/teavm/slf4j/Slf4jPlugin.java b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/slf4j/Slf4jPlugin.java
new file mode 100644
index 0000000000..57fcb54e35
--- /dev/null
+++ b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/slf4j/Slf4jPlugin.java
@@ -0,0 +1,15 @@
+package com.graphhopper.teavm.slf4j;
+
+import org.teavm.vm.spi.TeaVMHost;
+import org.teavm.vm.spi.TeaVMPlugin;
+
+/**
+ *
+ * @author Alexey Andreev
+ */
+public class Slf4jPlugin implements TeaVMPlugin {
+    @Override
+    public void install(TeaVMHost host) {
+        host.add(new LoggerFactoryTransformer());
+    }
+}
diff --git a/graphhopper-teavm/src/main/java/com/graphhopper/teavm/slf4j/TeaVMLogger.java b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/slf4j/TeaVMLogger.java
new file mode 100644
index 0000000000..011d759052
--- /dev/null
+++ b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/slf4j/TeaVMLogger.java
@@ -0,0 +1,319 @@
+package com.graphhopper.teavm.slf4j;
+
+import org.slf4j.Logger;
+import org.slf4j.Marker;
+
+/**
+ *
+ * @author Alexey Andreev
+ */
+public class TeaVMLogger implements Logger {
+    private String name;
+
+    public TeaVMLogger(String name) {
+        this.name = name;
+    }
+
+    @Override
+    public String getName() {
+        return name;
+    }
+
+    @Override
+    public boolean isTraceEnabled() {
+        return false;
+    }
+
+    @Override
+    public void trace(String msg) {
+    }
+
+    @Override
+    public void trace(String format, Object arg) {
+    }
+
+    @Override
+    public void trace(String format, Object arg1, Object arg2) {
+    }
+
+    @Override
+    public void trace(String format, Object... arguments) {
+    }
+
+    @Override
+    public void trace(String msg, Throwable t) {
+    }
+
+    @Override
+    public boolean isTraceEnabled(Marker marker) {
+        return false;
+    }
+
+    @Override
+    public void trace(Marker marker, String msg) {
+    }
+
+    @Override
+    public void trace(Marker marker, String format, Object arg) {
+    }
+
+    @Override
+    public void trace(Marker marker, String format, Object arg1, Object arg2) {
+    }
+
+    @Override
+    public void trace(Marker marker, String format, Object... argArray) {
+    }
+
+    @Override
+    public void trace(Marker marker, String msg, Throwable t) {
+    }
+
+    @Override
+    public boolean isDebugEnabled() {
+        return false;
+    }
+
+    @Override
+    public void debug(String msg) {
+    }
+
+    @Override
+    public void debug(String format, Object arg) {
+    }
+
+    @Override
+    public void debug(String format, Object arg1, Object arg2) {
+    }
+
+    @Override
+    public void debug(String format, Object... arguments) {
+    }
+
+    @Override
+    public void debug(String msg, Throwable t) {
+    }
+
+    @Override
+    public boolean isDebugEnabled(Marker marker) {
+        return false;
+    }
+
+    @Override
+    public void debug(Marker marker, String msg) {
+    }
+
+    @Override
+    public void debug(Marker marker, String format, Object arg) {
+    }
+
+    @Override
+    public void debug(Marker marker, String format, Object arg1, Object arg2) {
+    }
+
+    @Override
+    public void debug(Marker marker, String format, Object... arguments) {
+    }
+
+    @Override
+    public void debug(Marker marker, String msg, Throwable t) {
+    }
+
+    @Override
+    public boolean isInfoEnabled() {
+        return true;
+    }
+
+    private void log(String level, String format, Object... arguments) {
+        StringBuffer sb = new StringBuffer();
+        sb.append('[').append(level).append(']');
+        int index = 0;
+        int argIndex = 0;
+        while (index < format.length()) {
+            int next = format.indexOf("{}", index);
+            if (next == -1) {
+                break;
+            }
+            sb.append(format.subSequence(index, next));
+            sb.append(argIndex < arguments.length ? String.valueOf(arguments[0]) : "{}");
+            next = index + 2;
+        }
+        sb.append(format.substring(index));
+        System.err.println(sb);
+    }
+
+    @Override
+    public void info(String msg) {
+        info(msg, new Object[0]);
+    }
+
+    @Override
+    public void info(String format, Object arg) {
+        info(format, new Object[] { arg });
+    }
+
+    @Override
+    public void info(String format, Object arg1, Object arg2) {
+        info(format, new Object[] { arg1, arg2 });
+    }
+
+    @Override
+    public void info(String format, Object... arguments) {
+        log("INFO", format, arguments);
+    }
+
+    @Override
+    public void info(String msg, Throwable t) {
+        info(msg);
+    }
+
+    @Override
+    public boolean isInfoEnabled(Marker marker) {
+        return true;
+    }
+
+    @Override
+    public void info(Marker marker, String msg) {
+        info(msg);
+    }
+
+    @Override
+    public void info(Marker marker, String format, Object arg) {
+        info(format, arg);
+    }
+
+    @Override
+    public void info(Marker marker, String format, Object arg1, Object arg2) {
+        info(format, arg1, arg2);
+    }
+
+    @Override
+    public void info(Marker marker, String format, Object... arguments) {
+        info(format, arguments);
+    }
+
+    @Override
+    public void info(Marker marker, String msg, Throwable t) {
+        info(msg, t);
+    }
+
+    @Override
+    public boolean isWarnEnabled() {
+        return true;
+    }
+
+    @Override
+    public void warn(String msg) {
+        warn(msg, new Object[0]);
+    }
+
+    @Override
+    public void warn(String format, Object arg) {
+        warn(format, new Object[] { arg });
+    }
+
+    @Override
+    public void warn(String format, Object... arguments) {
+        log("WARN", format, arguments);
+    }
+
+    @Override
+    public void warn(String format, Object arg1, Object arg2) {
+        warn(format, new Object[] { arg1, arg2 });
+    }
+
+    @Override
+    public void warn(String msg, Throwable t) {
+        warn(msg);
+    }
+
+    @Override
+    public boolean isWarnEnabled(Marker marker) {
+        return true;
+    }
+
+    @Override
+    public void warn(Marker marker, String msg) {
+        warn(msg);
+    }
+
+    @Override
+    public void warn(Marker marker, String format, Object arg) {
+        warn(format, arg);
+    }
+
+    @Override
+    public void warn(Marker marker, String format, Object arg1, Object arg2) {
+        warn(format, arg1, arg2);
+    }
+
+    @Override
+    public void warn(Marker marker, String format, Object... arguments) {
+        warn(format, arguments);
+    }
+
+    @Override
+    public void warn(Marker marker, String msg, Throwable t) {
+        warn(msg, t);
+    }
+
+    @Override
+    public boolean isErrorEnabled() {
+        return true;
+    }
+
+    @Override
+    public void error(String msg) {
+        error(msg, new Object[0]);
+    }
+
+    @Override
+    public void error(String format, Object arg) {
+        error(format, new Object[] { arg });
+    }
+
+    @Override
+    public void error(String format, Object arg1, Object arg2) {
+        error(format, new Object[] { arg1, arg2 });
+    }
+
+    @Override
+    public void error(String format, Object... arguments) {
+        log("ERRO", format, arguments);
+    }
+
+    @Override
+    public void error(String msg, Throwable t) {
+        error(msg);
+    }
+
+    @Override
+    public boolean isErrorEnabled(Marker marker) {
+        return true;
+    }
+
+    @Override
+    public void error(Marker marker, String msg) {
+        error(msg);
+    }
+
+    @Override
+    public void error(Marker marker, String format, Object arg) {
+        error(format, arg);
+    }
+
+    @Override
+    public void error(Marker marker, String format, Object arg1, Object arg2) {
+        error(format, arg1, arg2);
+    }
+
+    @Override
+    public void error(Marker marker, String format, Object... arguments) {
+        error(format, arguments);
+    }
+
+    @Override
+    public void error(Marker marker, String msg, Throwable t) {
+        error(msg, t);
+    }
+}
diff --git a/graphhopper-teavm/src/main/java/com/graphhopper/teavm/slf4j/TeaVMLoggerFactory.java b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/slf4j/TeaVMLoggerFactory.java
new file mode 100644
index 0000000000..60660f6eb3
--- /dev/null
+++ b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/slf4j/TeaVMLoggerFactory.java
@@ -0,0 +1,24 @@
+package com.graphhopper.teavm.slf4j;
+
+import java.util.HashMap;
+import java.util.Map;
+import org.slf4j.ILoggerFactory;
+import org.slf4j.Logger;
+
+/**
+ *
+ * @author Alexey Andreev
+ */
+public class TeaVMLoggerFactory implements ILoggerFactory {
+    private Map<String, TeaVMLogger> loggers = new HashMap<String, TeaVMLogger>();
+
+    @Override
+    public Logger getLogger(String name) {
+        TeaVMLogger logger = loggers.get(name);
+        if (logger == null) {
+            logger = new TeaVMLogger(name);
+            loggers.put(name, logger);
+        }
+        return logger;
+    }
+}
diff --git a/graphhopper-teavm/src/main/resources/META-INF/services/org.teavm.vm.spi.TeaVMPlugin b/graphhopper-teavm/src/main/resources/META-INF/services/org.teavm.vm.spi.TeaVMPlugin
new file mode 100644
index 0000000000..6046029238
--- /dev/null
+++ b/graphhopper-teavm/src/main/resources/META-INF/services/org.teavm.vm.spi.TeaVMPlugin
@@ -0,0 +1 @@
+com.graphhopper.teavm.slf4j.Slf4jPlugin
\ No newline at end of file
