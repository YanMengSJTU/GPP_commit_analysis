diff --git a/core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
index feea8495b3..2335412ae5 100644
--- a/core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
@@ -69,7 +69,7 @@ public CarFlagEncoder(String propertiesStr) {
     }
 
     public CarFlagEncoder(int speedBits, double speedFactor, int maxTurnCosts) {
-        super(speedBits, speedFactor, maxTurnCosts);
+        super(speedBits + 6, 0.1, maxTurnCosts);
         restrictions.addAll(Arrays.asList("motorcar", "motor_vehicle", "vehicle", "access"));
         restrictedValues.add("private");
         restrictedValues.add("agricultural");
@@ -117,7 +117,7 @@ public CarFlagEncoder(int speedBits, double speedFactor, int maxTurnCosts) {
 
         destinationSpeed = 5;
 
-        maxPossibleSpeed = 140;
+        maxPossibleSpeed = 180;
 
         // autobahn
         defaultSpeedMap.put("motorway", 100);
@@ -266,6 +266,7 @@ public long handleWayTags(ReaderWay way, long allowed, long relationFlags) {
 
             flags = setSpeed(flags, speed);
 
+            LOGGER.info("Speed that has been set: " + getSpeed(flags));
             boolean isRoundabout = way.hasTag("junction", "roundabout") || way.hasTag("junction", "circular");
             if (isRoundabout)
                 flags = setBool(flags, K_ROUNDABOUT, true);
@@ -291,7 +292,6 @@ public long handleWayTags(ReaderWay way, long allowed, long relationFlags) {
                 flags = setSpeed(flags, destinationSpeed);
             }
         }
-
         return flags;
     }
 
diff --git a/core/src/main/java/com/graphhopper/routing/weighting/AbstractWeighting.java b/core/src/main/java/com/graphhopper/routing/weighting/AbstractWeighting.java
index 78d10f18da..256818e69e 100644
--- a/core/src/main/java/com/graphhopper/routing/weighting/AbstractWeighting.java
+++ b/core/src/main/java/com/graphhopper/routing/weighting/AbstractWeighting.java
@@ -50,7 +50,7 @@ public long calcMillis(EdgeIteratorState edgeState, boolean reverse, int prevOrN
         double speed = reverse ? flagEncoder.getReverseSpeed(flags) : flagEncoder.getSpeed(flags);
         if (Double.isInfinite(speed) || Double.isNaN(speed) || speed < 0)
             throw new IllegalStateException("Invalid speed stored in edge! " + speed);
-        LOGGER.info("WEIGHTING: speed = " + speed + " for edge " + edgeState.getName() + "/" + edgeState.toString() + "/");
+        // LOGGER.info("WEIGHTING: speed = " + speed + " for edge " + edgeState.getName() + "/" + edgeState.toString() + "/");
         if (speed == 0)
             throw new IllegalStateException("Speed cannot be 0 for unblocked edge, use access properties to mark edge blocked! Should only occur for shortest path calculation. See #242.");
 
