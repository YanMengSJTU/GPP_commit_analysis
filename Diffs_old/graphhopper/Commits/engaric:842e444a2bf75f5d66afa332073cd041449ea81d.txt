diff --git a/core/pom.xml b/core/pom.xml
index 574cd0d1cd..d578eb29bb 100644
--- a/core/pom.xml
+++ b/core/pom.xml
@@ -83,6 +83,13 @@
             <artifactId>osmosis-osm-binary</artifactId>
             <version>0.43.1</version>
         </dependency>
+
+        <dependency>
+            <groupId>org.json</groupId>
+            <artifactId>json</artifactId>
+            <version>20140107</version>
+        </dependency>
+        
     </dependencies>
         
     <build>
diff --git a/core/src/main/java/com/graphhopper/util/Instruction.java b/core/src/main/java/com/graphhopper/util/Instruction.java
index c67046a81e..747cd829c8 100644
--- a/core/src/main/java/com/graphhopper/util/Instruction.java
+++ b/core/src/main/java/com/graphhopper/util/Instruction.java
@@ -81,7 +81,7 @@ public void setName(String name)
         this.name = name;
     }
 
-    public Map<String,Object> getExtraInfo()
+    public Map<String,Object> getExtraInfoJSON()
     {
         return Collections.<String, Object>emptyMap();
     }
diff --git a/core/src/main/java/com/graphhopper/util/InstructionList.java b/core/src/main/java/com/graphhopper/util/InstructionList.java
index 76accba987..5d36783569 100644
--- a/core/src/main/java/com/graphhopper/util/InstructionList.java
+++ b/core/src/main/java/com/graphhopper/util/InstructionList.java
@@ -85,7 +85,7 @@ public int size()
             instrJson.put("time", instruction.getTime());
             instrJson.put("distance", Helper.round(instruction.getDistance(), 3));
             instrJson.put("sign", instruction.getSign());
-            instrJson.putAll(instruction.getExtraInfo());
+            instrJson.putAll(instruction.getExtraInfoJSON());
 
             int tmpIndex = pointsIndex + instruction.getPoints().size();
             // the last instruction should not point to the next instruction
diff --git a/core/src/main/java/com/graphhopper/util/RoundaboutInstruction.java b/core/src/main/java/com/graphhopper/util/RoundaboutInstruction.java
index ef1cb1e93d..65559c62f7 100644
--- a/core/src/main/java/com/graphhopper/util/RoundaboutInstruction.java
+++ b/core/src/main/java/com/graphhopper/util/RoundaboutInstruction.java
@@ -1,5 +1,7 @@
 package com.graphhopper.util;
 
+import org.json.JSONObject;
+
 import java.util.HashMap;
 import java.util.Map;
 
@@ -106,14 +108,14 @@ public RoundaboutInstruction setRadian(double radian)
 
 
     @Override
-    public Map<String, Object> getExtraInfo()
+    public Map<String, Object> getExtraInfoJSON()
     {
         Map<String, Object> tmpMap = new HashMap<String, Object>();
         tmpMap.put("exitNr", getExitNr());
         double radian = getRadian();
         if (Double.isNaN(radian))
         {
-            tmpMap.put("turnAngle", radian);    
+            tmpMap.put("turnAngle", JSONObject.NULL);
         } else {
             tmpMap.put("turnAngle", Helper.round(radian, 2));
         }
diff --git a/core/src/test/java/com/graphhopper/util/InstructionListTest.java b/core/src/test/java/com/graphhopper/util/InstructionListTest.java
index 7bec24432f..f8332d25ca 100644
--- a/core/src/test/java/com/graphhopper/util/InstructionListTest.java
+++ b/core/src/test/java/com/graphhopper/util/InstructionListTest.java
@@ -35,6 +35,8 @@
 import javax.xml.validation.Schema;
 import javax.xml.validation.SchemaFactory;
 import javax.xml.validation.Validator;
+
+import org.json.JSONObject;
 import org.junit.Test;
 import static org.junit.Assert.*;
 import org.xml.sax.SAXException;
@@ -355,9 +357,12 @@ public void testRoundaboutJsonIntegrity()
         il.add(instr);
 
         Map<String, Object> json = il.createJson().get(0);        
+        // assert that all information is present in map for JSON
         assertEquals("Enter roundabout and use exit 2 in direction streetname", json.get("text").toString());
         assertEquals(-1, (Double) json.get("turnAngle"), 0.01);
         assertEquals("2", json.get("exitNr").toString());
+        // assert that a valid JSON object can be written
+        assertNotNull(new JSONObject(json).toString());
     }
 
     // Roundabout with unknown dir of rotation
@@ -379,7 +384,9 @@ public void testRoundaboutJsonNaN()
 
         Map<String, Object> json = il.createJson().get(0);
         assertEquals("Enter roundabout and use exit 2 in direction streetname", json.get("text").toString());
-        assertEquals("NaN", json.get("turnAngle").toString());
+        assertEquals("null", json.get("turnAngle").toString());
+        // assert that a valid JSON object can be written
+        assertNotNull(new JSONObject(json).toString());
     }
     
     @Test
diff --git a/docs/web/api-doc.md b/docs/web/api-doc.md
index bf7898df6a..cbc402dbf1 100644
--- a/docs/web/api-doc.md
+++ b/docs/web/api-doc.md
@@ -120,7 +120,7 @@ paths[0].instructions[0].sign                 | A number which specifies the sig
 paths[0].instructions[0].annotationText       | [optional] A text describing the instruction in more detail, e.g. like surface of the way, warnings or involved costs
 paths[0].instructions[0].annotationImportance | [optional] 0 stands for INFO, 1 for warning, 2 for costs, 3 for costs and warning
 paths[0].instructions[0].exitNr               | [optional] Only available for USE_ROUNDABOUT instructions. The count of exits at which the route leaves the roundabout.
-paths[0].instructions[0].turnAngle            | [optional] Only available for USE_ROUNDABOUT instructions. The radian of the route within the roundabout: 0<r<2*PI for clockwise and -2PI<r<0 for counterclockwise transit. Is NaN if direction of rotation is undefined.
+paths[0].instructions[0].turnAngle            | [optional] Only available for USE_ROUNDABOUT instructions. The radian of the route within the roundabout: 0<r<2*PI for clockwise and -2PI<r<0 for counterclockwise transit. Is null the direction of rotation is undefined.
 
 
 ## Area information
