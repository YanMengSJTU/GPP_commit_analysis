diff --git a/core/src/main/java/com/graphhopper/routing/util/AbstractAvoidanceDecorator.java b/core/src/main/java/com/graphhopper/routing/util/AbstractAvoidanceDecorator.java
index a1f166c0e1..29ca7faeec 100644
--- a/core/src/main/java/com/graphhopper/routing/util/AbstractAvoidanceDecorator.java
+++ b/core/src/main/java/com/graphhopper/routing/util/AbstractAvoidanceDecorator.java
@@ -7,16 +7,22 @@
 public abstract class AbstractAvoidanceDecorator implements EncoderDecorator {
 
 	protected EncodedValue wayTypeEncoder;
+	protected int originalShift;
 	public static final int KEY = 303;
 
 	protected abstract void defineEncoder(int shift);
 	protected abstract EdgeAttribute[] getEdgeAttributesOfInterest();
 
 	public int defineWayBits(int shift) {
+		originalShift = shift;
 		defineEncoder(shift);
 		shift += wayTypeEncoder.getBits();
 		return shift;
 	}
+	
+	public int getOriginalShift() {
+		return originalShift;
+	}
 
 	public InstructionAnnotation getAnnotation( long flags, Translation tr )
     {
diff --git a/core/src/main/java/com/graphhopper/routing/util/EncoderDecorator.java b/core/src/main/java/com/graphhopper/routing/util/EncoderDecorator.java
index 84975c7e58..983f3db2f8 100644
--- a/core/src/main/java/com/graphhopper/routing/util/EncoderDecorator.java
+++ b/core/src/main/java/com/graphhopper/routing/util/EncoderDecorator.java
@@ -12,4 +12,5 @@
 	double getDouble(long flags);
 	long getLong(long flags);
 	boolean supports(int key);
+	int getOriginalShift();
 }
diff --git a/core/src/main/java/com/graphhopper/routing/util/EncodingManager.java b/core/src/main/java/com/graphhopper/routing/util/EncodingManager.java
index 97cbc3953e..6f002c31f3 100644
--- a/core/src/main/java/com/graphhopper/routing/util/EncodingManager.java
+++ b/core/src/main/java/com/graphhopper/routing/util/EncodingManager.java
@@ -470,7 +470,8 @@ public void applyWayTags( Way way, EdgeIteratorState edge )
 	}
 
 	/**
-	 * Each encoder decorator should be used only once and in a defined order
+	 * Each encoder decorator should be used only once for storage and in a defined order.
+	 * However each encoder needs its decorator list to be configured the same way.
 	 */
 	private void configureDecoratorSet()
 	{
@@ -493,6 +494,20 @@ private void configureDecoratorSet()
 		{
 			shift = decorator.defineWayBits(shift);
 		}
+		for (AbstractFlagEncoder encoder : edgeEncoders)
+		{
+			List<EncoderDecorator> decoratorList = encoder.getEncoderDecorators();
+			if (null != decoratorList)
+			{
+				for (EncoderDecorator encoderDecorator : decoratorList)
+				{
+					EncoderDecorator configuredDecorator = decoratorMap.get(encoderDecorator.getClass());
+					if(configuredDecorator != encoderDecorator) {
+						encoderDecorator.defineWayBits(configuredDecorator.getOriginalShift());
+					}
+				}
+			}
+		}
 	}
 
 	public List<EncoderDecorator> getDecorators()
