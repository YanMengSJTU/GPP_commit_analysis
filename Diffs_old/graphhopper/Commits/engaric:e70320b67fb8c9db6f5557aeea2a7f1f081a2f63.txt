diff --git a/core/src/main/java/com/graphhopper/GHResponse.java b/core/src/main/java/com/graphhopper/GHResponse.java
index c37edcd413..0d6f70f1b9 100644
--- a/core/src/main/java/com/graphhopper/GHResponse.java
+++ b/core/src/main/java/com/graphhopper/GHResponse.java
@@ -130,6 +130,7 @@ public GHResponse setMillis( long timeInMillis )
      */
     public long getMillis()
     {
+        check("getMillis");
         return time;
     }
 
diff --git a/core/src/main/java/com/graphhopper/GraphHopper.java b/core/src/main/java/com/graphhopper/GraphHopper.java
index 62d1474287..284b027043 100644
--- a/core/src/main/java/com/graphhopper/GraphHopper.java
+++ b/core/src/main/java/com/graphhopper/GraphHopper.java
@@ -287,12 +287,13 @@ private GraphHopper setUnsafeMemory()
      * This method sets the default vehicle to use if no vehicle is specified in the GHRequest
      * object. Per default the lexicographically first vehicle is used.
      */
-    public void setDefaultVehicle( String defaultVehicleStr )
+    public GraphHopper setDefaultVehicle( String defaultVehicleStr )
     {
         if (this.defaultVehicleStr != null)
             throw new RuntimeException("Cannot change default vehicle " + this.defaultVehicleStr + " to " + defaultVehicleStr);
 
         this.defaultVehicleStr = defaultVehicleStr;
+        return this;
     }
 
     /**
diff --git a/core/src/main/java/com/graphhopper/routing/ch/PrepareContractionHierarchies.java b/core/src/main/java/com/graphhopper/routing/ch/PrepareContractionHierarchies.java
index 2cde65c13e..4f34c750ae 100644
--- a/core/src/main/java/com/graphhopper/routing/ch/PrepareContractionHierarchies.java
+++ b/core/src/main/java/com/graphhopper/routing/ch/PrepareContractionHierarchies.java
@@ -95,8 +95,7 @@ public PrepareContractionHierarchies( LevelGraph g, FlagEncoder encoder, Weighti
 
         // shortcuts store weight in flags where we assume bit 1 and 2 are used for access restriction
         if ((scFwdDir & PrepareEncoder.getScFwdDir()) == 0)
-            throw new IllegalArgumentException("Currently only one vehicle is supported if you enable CH. "
-                    + "It seems that you have imported more than one.");
+            throw new IllegalArgumentException("Enabling the speed-up mode is currently only supported for the first vehicle.");
 
         prepareWeighting = new PreparationWeighting(weighting);
         originalEdges = new GHDirectory("", DAType.RAM_INT).find("original_edges");
@@ -705,7 +704,7 @@ public final boolean accept( EdgeIteratorState edgeState )
                 return allFilter.accept(edgeState);
             }
         };
-        
+
         maxLevel = prepareGraph.getNodes() + 1;
         ignoreNodeFilter = new IgnoreNodeFilter(prepareGraph, maxLevel);
         vehicleAllExplorer = prepareGraph.createEdgeExplorer(allFilter);
diff --git a/core/src/test/java/com/graphhopper/GraphHopperIT.java b/core/src/test/java/com/graphhopper/GraphHopperIT.java
index 64d55066f6..20e6470949 100644
--- a/core/src/test/java/com/graphhopper/GraphHopperIT.java
+++ b/core/src/test/java/com/graphhopper/GraphHopperIT.java
@@ -321,11 +321,12 @@ public void testRoundaboutInstructionsWithCH()
     public void testMultipleVehiclesAndCH()
     {
         String tmpOsmFile = "files/monaco.osm.gz";
-        String tmpImportVehicles = "foot,car";
+        String tmpImportVehicles = "bike,car";
 
         GraphHopper tmpHopper = new GraphHopper().
                 setStoreOnFlush(true).
                 setOSMFile(tmpOsmFile).
+                setDefaultVehicle("car").
                 setGraphHopperLocation(tmpGraphFile).
                 setEncodingManager(new EncodingManager(tmpImportVehicles)).
                 importOrLoad();
@@ -335,10 +336,14 @@ public void testMultipleVehiclesAndCH()
         assertEquals(207, rsp.getMillis() / 1000f, 1);
         assertEquals(2838, rsp.getDistance(), 1);
 
+        rsp = tmpHopper.route(new GHRequest(43.73005, 7.415707, 43.741522, 7.42826)
+                .setVehicle("bike"));
+        assertEquals(494, rsp.getMillis() / 1000f, 1);
+        assertEquals(2192, rsp.getDistance(), 1);
+
         rsp = tmpHopper.route(new GHRequest(43.73005, 7.415707, 43.741522, 7.42826)
                 .setVehicle("foot"));
-        assertEquals(1574, rsp.getMillis() / 1000f, 1);
-        assertEquals(2187, rsp.getDistance(), 1);
+        assertTrue("only bike and car were imported. foot request should fail", rsp.hasErrors());
     }
 
     @Test
diff --git a/graphhopper.sh b/graphhopper.sh
index c6bd2b132a..04aa03f6f2 100755
--- a/graphhopper.sh
+++ b/graphhopper.sh
@@ -250,8 +250,7 @@ if [ "$ACTION" = "ui" ] || [ "$ACTION" = "web" ]; then
   fi
 
 elif [ "$ACTION" = "import" ]; then
- "$JAVA" $JAVA_OPTS -cp "$JAR" $GH_CLASS printVersion=true \
-      config=$CONFIG \
+ "$JAVA" $JAVA_OPTS -cp "$JAR" $GH_CLASS config=$CONFIG \
       $GH_IMPORT_OPTS graph.location="$GRAPH" osmreader.osm="$OSM_FILE"
 
 
@@ -262,7 +261,7 @@ elif [ "$ACTION" = "torture" ]; then
 elif [ "$ACTION" = "xminiui" ]; then
  "$MAVEN_HOME/bin/mvn" --projects tools -DskipTests clean install assembly:single
  JAR=tools/target/graphhopper-tools-$VERSION-jar-with-dependencies.jar   
- "$JAVA" $JAVA_OPTS -cp "$JAR" com.graphhopper.ui.MiniGraphUI osmreader.osm="$OSM_FILE" printVersion=true config=$CONFIG \
+ "$JAVA" $JAVA_OPTS -cp "$JAR" com.graphhopper.ui.MiniGraphUI osmreader.osm="$OSM_FILE" config=$CONFIG \
               graph.location="$GRAPH"
 
 
