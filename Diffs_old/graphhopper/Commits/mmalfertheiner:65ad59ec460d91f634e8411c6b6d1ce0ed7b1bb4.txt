diff --git a/core/src/main/java/com/graphhopper/GraphHopper.java b/core/src/main/java/com/graphhopper/GraphHopper.java
index ed4ad7d4a8..5889207ae5 100644
--- a/core/src/main/java/com/graphhopper/GraphHopper.java
+++ b/core/src/main/java/com/graphhopper/GraphHopper.java
@@ -988,11 +988,9 @@ public GHResponse route( GHRequest request )
     {
         GHResponse response = new GHResponse();
         ProfileManager profileManager = null;
-        SpeedProvider speedProvider = null;
 
         if(request.getVehicle().equals("genbike")) {
             profileManager = initProfile(request.getHints().get("profile", ""), encodingManager.getEncoder(request.getVehicle()));
-            speedProvider = new ProfileSpeedProvider(encodingManager.getEncoder(request.getVehicle()), profileManager);
         }
 
         List<Path> paths = getPaths(request, response, profileManager);
diff --git a/core/src/main/java/com/graphhopper/routing/util/DynamicWeighting.java b/core/src/main/java/com/graphhopper/routing/util/DynamicWeighting.java
index 483e5e78cb..958ffa95e2 100644
--- a/core/src/main/java/com/graphhopper/routing/util/DynamicWeighting.java
+++ b/core/src/main/java/com/graphhopper/routing/util/DynamicWeighting.java
@@ -60,12 +60,12 @@ public DynamicWeighting(FlagEncoder encoder, PMap pMap, ProfileManager profileMa
 
         this.profileManager = profileManager;
 
-        if(profileManager == null) {
-            this.speedProvider = new EncoderSpeedProvider(encoder);
-            this.preferenceProvider = new GenericPreferenceProvider();
-        } else {
+        if(profileManager != null && profileManager.hasProfile()) {
             this.speedProvider = new ProfileSpeedProvider(encoder, profileManager);
             this.preferenceProvider = new ProfilePreferenceProvider(profileManager);
+        } else {
+            this.speedProvider = new EncoderSpeedProvider(encoder);
+            this.preferenceProvider = new GenericPreferenceProvider();
         }
     }
 
@@ -89,7 +89,7 @@ public double calcWeight( EdgeIteratorState edgeState, boolean reverse, int prev
         if (penalizeEdge)
             time += heading_penalty;
 
-        return time / (0.5 + Math.pow(getEdgePreference(edgeState, reverse), 2));
+        return time / Math.pow((0.5 + getEdgePreference(edgeState, reverse)), 2);
     }
 
     protected double getEdgePreference(EdgeIteratorState edgeState, boolean reverse) {
@@ -120,6 +120,8 @@ protected double getEdgePreference(EdgeIteratorState edgeState, boolean reverse)
         priority += preferenceProvider.calcSurfacePreference(pavedSurface);
         priority += preferenceProvider.calcSlopePreference(wayType, incSlope, incDist2DSum, decSlope, decDist2DSum);
 
+        System.out.println("WAYTYPE: " + wayType + ", INC SLOPE: " + incSlope + ", DEC SLOPE: " + decSlope +", PRIORITY: " + Helper.keepIn(priority, PriorityCode.WORST.getValue(), PriorityCode.BEST.getValue()));
+
         return Helper.keepIn(priority, PriorityCode.WORST.getValue(), PriorityCode.BEST.getValue()) / PriorityCode.BEST.getValue();
 
     }
diff --git a/core/src/main/java/com/graphhopper/routing/util/ProfilePreferenceProvider.java b/core/src/main/java/com/graphhopper/routing/util/ProfilePreferenceProvider.java
index 61523c28b4..d75244d9ad 100644
--- a/core/src/main/java/com/graphhopper/routing/util/ProfilePreferenceProvider.java
+++ b/core/src/main/java/com/graphhopper/routing/util/ProfilePreferenceProvider.java
@@ -37,9 +37,9 @@ else if(profileManager.getWayTypePreference(wayType) >= 0.05)
     public int calcSurfacePreference(boolean pavedSurface) {
         int preference = 0;
 
-        if(profileManager.prefersPavedSurface() && pavedSurface)
+        if(profileManager.prefersPavedSurface() && !pavedSurface)
             preference = -2;
-        else if(!profileManager.prefersPavedSurface() && !pavedSurface)
+        else if(!profileManager.prefersPavedSurface() && pavedSurface)
             preference = -2;
 
         System.out.println("PREFERENCE: " + preference + ", profileManager: " + profileManager.prefersPavedSurface());
