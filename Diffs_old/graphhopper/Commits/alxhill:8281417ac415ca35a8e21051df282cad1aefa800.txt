diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetHopper.java b/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetHopper.java
index 5dea121539..9d1a5e0ccb 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetHopper.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetHopper.java
@@ -1,7 +1,7 @@
 package com.graphhopper.marmoset;
 
 import com.graphhopper.GraphHopper;
-import com.graphhopper.marmoset.util.CellsGraph;
+import com.graphhopper.marmoset.util.CellGraph;
 import com.graphhopper.marmoset.util.Location;
 import com.graphhopper.util.CmdArgs;
 import org.slf4j.Logger;
@@ -19,7 +19,7 @@
 public class MarmosetHopper {
 
     private GraphHopper hopper;
-    private CellsGraph cellsGraph;
+    private CellGraph cellGraph;
     private List<Vehicle> vehicles;
 
     private static Logger logger = LoggerFactory.getLogger(MarmosetHopper.class);
@@ -50,9 +50,9 @@ public void init()
         hopper.init(args);
         hopper.importOrLoad();
 
-        double cellSize = args.getDouble("marmoset.cellsize", 10.0);
-        cellsGraph = new CellsGraph(hopper.getGraphHopperStorage().getBaseGraph(), cellSize);
-        cellsGraph.init();
+        float cellSize = (float) args.getDouble("marmoset.cellsize", 10.0);
+        cellGraph = new CellGraph(hopper.getGraphHopperStorage().getBaseGraph(), cellSize);
+        cellGraph.init();
     }
 
     public synchronized void addVehicle()
@@ -103,9 +103,9 @@ public GraphHopper getGraphHopper()
         return hopper;
     }
 
-    public CellsGraph getCellsGraph()
+    public CellGraph getCellGraph()
     {
-        return cellsGraph;
+        return cellGraph;
     }
 
     public void pause()
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/Vehicle.java b/marmoset/src/main/java/com/graphhopper/marmoset/Vehicle.java
index 85a773f024..c7fd0ccab2 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/Vehicle.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/Vehicle.java
@@ -4,9 +4,10 @@
 import com.graphhopper.GHResponse;
 import com.graphhopper.GraphHopper;
 import com.graphhopper.marmoset.util.CellIterator;
-import com.graphhopper.marmoset.util.CellsGraph;
+import com.graphhopper.marmoset.util.CellGraph;
 import com.graphhopper.marmoset.util.Location;
 import com.graphhopper.routing.Path;
+import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.util.*;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -34,12 +35,12 @@
     private VehicleEdgeIterator route;
     private int cellId;
 
-    private byte v; // velocity
+    private int v; // velocity
     private float slowProb;
     private Random slowRand;
-    private byte maxVelocity = 5;
+    private int maxVelocity = 5;
 
-    private CellsGraph cg;
+    private CellGraph cg;
 
     public Vehicle(MarmosetHopper hopper, Location start, Location dest)
     {
@@ -74,7 +75,7 @@ public void init()
         cellId = 0; // TODO: figure out which cell the vehicle should start at
         v = 0;
 
-        cg = hopper.getCellsGraph();
+        cg = hopper.getCellGraph();
 
         GraphHopper gh = hopper.getGraphHopper();
 
@@ -102,7 +103,8 @@ public void init()
             return;
         }
 
-        route = new VehicleEdgeIterator(edgeList);
+        FlagEncoder carEncoder = gh.getEncodingManager().getEncoder("car");
+        route = new VehicleEdgeIterator(edgeList, carEncoder);
         route.next();
 
         cg.set(route, cellId, true);
@@ -112,12 +114,23 @@ public void init()
 
     public void accelerationStep()
     {
-        if (v >= maxVelocity)
-            return;
         CellIterator c = new CellIterator(new VehicleEdgeIterator(route), cg, cellId);
+
+        int newMaxVel = maxVelocity;
+
         int freeCells = 0;
         while (!c.next() && freeCells < v + 1)
+        {
+            newMaxVel = Math.min(newMaxVel, c.getCellSpeed());
             freeCells++;
+        }
+        // because who actually drives at the speed limit?
+        maxVelocity = Math.max(2, newMaxVel);
+
+        if (v >= maxVelocity) {
+            v = maxVelocity;
+            return;
+        }
 
         if (freeCells == v + 1)
         {
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/VehicleEdgeIterator.java b/marmoset/src/main/java/com/graphhopper/marmoset/VehicleEdgeIterator.java
index ff8f2ce8fc..b32f8aa8f8 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/VehicleEdgeIterator.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/VehicleEdgeIterator.java
@@ -15,9 +15,11 @@
     private List<EdgeIteratorState> edges;
     private EdgeIteratorState edge;
     private int index;
+    private FlagEncoder encoder;
 
-    public VehicleEdgeIterator(List<EdgeIteratorState> edges)
+    public VehicleEdgeIterator(List<EdgeIteratorState> edges, FlagEncoder encoder)
     {
+        this.encoder = encoder;
         // starts at 0 to skip first edge, as the first edge is virtual (i.e not in graph)
         index = 0;
         this.edges = edges;
@@ -25,11 +27,17 @@ public VehicleEdgeIterator(List<EdgeIteratorState> edges)
 
     public VehicleEdgeIterator(VehicleEdgeIterator e)
     {
+        encoder = e.encoder;
         edges = e.edges;
         edge = e.edge;
         index = e.index;
     }
 
+    public double getRoadSpeed()
+    {
+        return encoder.getSpeed(edge.getFlags());
+    }
+
     public boolean hasNext()
     {
         return index < edges.size() - 1;
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/util/CellsGraph.java b/marmoset/src/main/java/com/graphhopper/marmoset/util/CellGraph.java
similarity index 86%
rename from marmoset/src/main/java/com/graphhopper/marmoset/util/CellsGraph.java
rename to marmoset/src/main/java/com/graphhopper/marmoset/util/CellGraph.java
index 11ade56a25..1203594ebf 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/util/CellsGraph.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/util/CellGraph.java
@@ -1,23 +1,28 @@
 package com.graphhopper.marmoset.util;
 
 import com.graphhopper.routing.util.AllEdgesIterator;
-import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.storage.Graph;
-import com.graphhopper.util.EdgeIterator;
 import com.graphhopper.util.EdgeIteratorState;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * Created by alexander on 01/03/2016.
  */
-public class CellsGraph {
-    private final double cellSize;
+public class CellGraph {
+
+    public final float cellSize;
     private Graph graph;
     private boolean[][] cells;
     private boolean[][] reverseCells;
 
-    public CellsGraph(Graph graph, double cellSize) {
+    private static final Logger logger = LoggerFactory.getLogger(CellGraph.class);
+
+    public CellGraph(Graph graph, float cellSize) {
         this.cellSize = cellSize;
         this.graph = graph;
+        logger.info("slowest speed: " + 1 * cellSize * 3.6 * 0.62 + "mph");
+        logger.info("fastest speed: " + 5 * cellSize * 3.6 * 0.62 + "mph");
     }
 
     public void init()
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/util/CellIterator.java b/marmoset/src/main/java/com/graphhopper/marmoset/util/CellIterator.java
index 51cc3c984d..a091f44ba8 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/util/CellIterator.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/util/CellIterator.java
@@ -1,6 +1,8 @@
 package com.graphhopper.marmoset.util;
 
 import com.graphhopper.marmoset.VehicleEdgeIterator;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  * Created by alexander on 09/03/2016.
@@ -8,13 +10,14 @@
 public class CellIterator {
 
     private VehicleEdgeIterator route;
-    private CellsGraph cg;
+    private CellGraph cg;
     private int cellIndex;
+    private static final Logger logger = LoggerFactory.getLogger(CellIterator.class);
 
-    public CellIterator(VehicleEdgeIterator route, CellsGraph cellsGraph, int cellId)
+    public CellIterator(VehicleEdgeIterator route, CellGraph cellGraph, int cellId)
     {
         this.route = route;
-        this.cg = cellsGraph;
+        this.cg = cellGraph;
         this.cellIndex = cellId;
     }
 
@@ -41,4 +44,13 @@ public int getCellIndex()
     {
         return cellIndex;
     }
+
+    public int getCellSpeed()
+    {
+        double roadSpeed = route.getRoadSpeed();
+        double v = (roadSpeed / (cg.cellSize * 3.6));
+        int max = Math.max(1, (int) Math.ceil(v));
+//        logger.info("CS:" + max + "(" + Math.round(v * 100) / 100.0 + ")=" + Math.round(10 * max * cg.cellSize * 3.6 * 0.62) / 10.0 + "mph, actual=" + roadSpeed * 0.62 + " on " + route.getName());
+        return max;
+    }
 }
