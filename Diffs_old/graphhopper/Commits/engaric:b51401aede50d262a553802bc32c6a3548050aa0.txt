diff --git a/core/src/main/java/com/graphhopper/routing/AStar.java b/core/src/main/java/com/graphhopper/routing/AStar.java
index 56ba796d60..4a77796207 100644
--- a/core/src/main/java/com/graphhopper/routing/AStar.java
+++ b/core/src/main/java/com/graphhopper/routing/AStar.java
@@ -96,7 +96,7 @@ private Path runAlgo()
         {
             int currVertex = currEdge.adjNode;
             visitedCount++;
-            if (isWeightLimitReached())
+            if (isWeightLimitExceeded())
                 return createEmptyPath();
 
             if (finished())
@@ -176,9 +176,10 @@ public int getVisitedNodes()
         return visitedCount;
     }
 
-    protected boolean isWeightLimitReached()
+    @Override
+    protected boolean isWeightLimitExceeded()
     {
-        return currEdge.weight >= weightLimit;
+        return currEdge.weight > weightLimit;
     }
 
     public static class AStarEdge extends EdgeEntry
diff --git a/core/src/main/java/com/graphhopper/routing/AStarBidirection.java b/core/src/main/java/com/graphhopper/routing/AStarBidirection.java
index f8a92e1bf3..46ea986a06 100644
--- a/core/src/main/java/com/graphhopper/routing/AStarBidirection.java
+++ b/core/src/main/java/com/graphhopper/routing/AStarBidirection.java
@@ -162,10 +162,10 @@ protected Path createAndInitPath()
     @Override
     protected Path extractPath()
     {
-        if (isWeightLimitReached())
-            return bestPath;
+        if (finished())
+            return bestPath.extract();
 
-        return bestPath.extract();
+        return bestPath;
     }
 
     @Override
@@ -185,9 +185,9 @@ protected boolean finished()
     }
 
     @Override
-    protected boolean isWeightLimitReached()
+    protected boolean isWeightLimitExceeded()
     {
-        return currFrom.weight + currTo.weight >= weightLimit;
+        return currFrom.weight + currTo.weight > weightLimit;
     }
 
     @Override
diff --git a/core/src/main/java/com/graphhopper/routing/AbstractBidirAlgo.java b/core/src/main/java/com/graphhopper/routing/AbstractBidirAlgo.java
index 2a047c7434..7e92c25b06 100644
--- a/core/src/main/java/com/graphhopper/routing/AbstractBidirAlgo.java
+++ b/core/src/main/java/com/graphhopper/routing/AbstractBidirAlgo.java
@@ -40,8 +40,6 @@
 
     protected abstract Path createAndInitPath();
 
-    protected abstract boolean isWeightLimitReached();
-
     abstract void checkState( int fromBase, int fromAdj, int toBase, int toAdj );
 
     abstract boolean fillEdgesFrom();
@@ -66,7 +64,7 @@ public Path calcPath( int from, int to )
 
     protected void runAlgo()
     {
-        while (!finished() && !isWeightLimitReached())
+        while (!finished() && !isWeightLimitExceeded())
         {
             if (!finishedFrom)
                 finishedFrom = !fillEdgesFrom();
diff --git a/core/src/main/java/com/graphhopper/routing/AbstractRoutingAlgorithm.java b/core/src/main/java/com/graphhopper/routing/AbstractRoutingAlgorithm.java
index 62349b3d81..174aa1795a 100644
--- a/core/src/main/java/com/graphhopper/routing/AbstractRoutingAlgorithm.java
+++ b/core/src/main/java/com/graphhopper/routing/AbstractRoutingAlgorithm.java
@@ -63,7 +63,7 @@ public void setWeightLimit( double weight )
     {
         this.weightLimit = weight;
     }
-       
+
     public RoutingAlgorithm setEdgeFilter( EdgeFilter additionalEdgeFilter )
     {
         this.additionalEdgeFilter = additionalEdgeFilter;
@@ -111,6 +111,8 @@ protected EdgeEntry createEdgeEntry( int node, double dist )
      */
     protected abstract Path extractPath();
 
+    protected abstract boolean isWeightLimitExceeded();
+
     protected Path createEmptyPath()
     {
         return new Path(graph, flagEncoder);
diff --git a/core/src/main/java/com/graphhopper/routing/Dijkstra.java b/core/src/main/java/com/graphhopper/routing/Dijkstra.java
index 16d7cd0df6..f207b85e86 100644
--- a/core/src/main/java/com/graphhopper/routing/Dijkstra.java
+++ b/core/src/main/java/com/graphhopper/routing/Dijkstra.java
@@ -76,7 +76,7 @@ protected void runAlgo()
         while (true)
         {
             visitedNodes++;
-            if (isWeightLimitReached() || finished())
+            if (isWeightLimitExceeded() || finished())
                 break;
 
             int startNode = currEdge.adjNode;
@@ -129,7 +129,7 @@ protected boolean finished()
     @Override
     protected Path extractPath()
     {
-        if (currEdge == null || isWeightLimitReached() || !finished())
+        if (currEdge == null || isWeightLimitExceeded() || !finished())
             return createEmptyPath();
 
         return new Path(graph, flagEncoder).setWeight(currEdge.weight).setEdgeEntry(currEdge).extract();
@@ -141,9 +141,10 @@ public int getVisitedNodes()
         return visitedNodes;
     }
 
-    protected boolean isWeightLimitReached()
+    @Override
+    protected boolean isWeightLimitExceeded()
     {
-        return currEdge.weight >= weightLimit;
+        return currEdge.weight > weightLimit;
     }
 
     @Override
diff --git a/core/src/main/java/com/graphhopper/routing/DijkstraBidirectionRef.java b/core/src/main/java/com/graphhopper/routing/DijkstraBidirectionRef.java
index 71bbe643d8..439a6aea69 100644
--- a/core/src/main/java/com/graphhopper/routing/DijkstraBidirectionRef.java
+++ b/core/src/main/java/com/graphhopper/routing/DijkstraBidirectionRef.java
@@ -128,10 +128,10 @@ protected Path createAndInitPath()
     @Override
     protected Path extractPath()
     {
-        if (isWeightLimitReached())
-            return bestPath;
+        if (finished())
+            return bestPath.extract();
 
-        return bestPath.extract();
+        return bestPath;
     }
 
     @Override
@@ -180,9 +180,9 @@ public boolean finished()
     }
 
     @Override
-    protected boolean isWeightLimitReached()
+    protected boolean isWeightLimitExceeded()
     {
-        return currFrom.weight + currTo.weight >= weightLimit;
+        return currFrom.weight + currTo.weight > weightLimit;
     }
 
     void fillEdges( EdgeEntry currEdge, PriorityQueue<EdgeEntry> prioQueue,
diff --git a/core/src/main/java/com/graphhopper/routing/DijkstraOneToMany.java b/core/src/main/java/com/graphhopper/routing/DijkstraOneToMany.java
index 0efde326a6..6cc1649de1 100644
--- a/core/src/main/java/com/graphhopper/routing/DijkstraOneToMany.java
+++ b/core/src/main/java/com/graphhopper/routing/DijkstraOneToMany.java
@@ -87,7 +87,7 @@ public Path extractPath()
         if (endNode >= 0)
             p.setWeight(weights[endNode]);
         p.setFromNode(fromNode);
-        if (endNode < 0 || isWeightLimitReached())
+        if (endNode < 0 || isWeightLimitExceeded())
             return p;
 
         return p.setEndNode(endNode).extract();
@@ -185,7 +185,7 @@ public int findEndNode( int from, int to )
                 }
             }
 
-            if (heap.isEmpty() || visitedNodes >= limitVisitedNodes || isWeightLimitReached())
+            if (heap.isEmpty() || visitedNodes >= limitVisitedNodes || isWeightLimitExceeded())
                 return NOT_FOUND;
 
             // calling just peek and not poll is important if the next query is cached
@@ -203,9 +203,10 @@ public boolean finished()
         return currNode == to;
     }
 
-    protected boolean isWeightLimitReached()
+    @Override
+    protected boolean isWeightLimitExceeded()
     {
-        return weights[currNode] >= weightLimit;
+        return weights[currNode] > weightLimit;
     }
 
     public void close()
diff --git a/core/src/main/java/com/graphhopper/routing/ch/PrepareContractionHierarchies.java b/core/src/main/java/com/graphhopper/routing/ch/PrepareContractionHierarchies.java
index 9d2bd2f7e4..114fd3da8d 100644
--- a/core/src/main/java/com/graphhopper/routing/ch/PrepareContractionHierarchies.java
+++ b/core/src/main/java/com/graphhopper/routing/ch/PrepareContractionHierarchies.java
@@ -785,15 +785,17 @@ protected boolean finished()
                     if (finishedFrom && finishedTo)
                         return true;
 
-                    if (currFrom.weight + currTo.weight > weightLimit)
-                        return true;
-
                     // changed finish condition for CH
                     return currFrom.weight >= bestPath.getWeight() && currTo.weight >= bestPath.getWeight();
                 }
 
                 @Override
+                protected boolean isWeightLimitExceeded()
+                {
+                    return currFrom.weight > weightLimit && currTo.weight > weightLimit;
+                }
 
+                @Override
                 protected Path createAndInitPath()
                 {
                     bestPath = new Path4CH(graph, graph.getBaseGraph(), flagEncoder);
@@ -832,13 +834,16 @@ public boolean finished()
                     if (finishedFrom && finishedTo)
                         return true;
 
-                    if (currFrom.weight + currTo.weight > weightLimit)
-                        return true;
-
                     // changed also the final finish condition for CH                
                     return currFrom.weight >= bestPath.getWeight() && currTo.weight >= bestPath.getWeight();
                 }
 
+                @Override
+                protected boolean isWeightLimitExceeded()
+                {
+                    return currFrom.weight > weightLimit && currTo.weight > weightLimit;
+                }
+
                 @Override
                 protected Path createAndInitPath()
                 {
diff --git a/core/src/test/java/com/graphhopper/routing/AbstractRoutingAlgorithmTester.java b/core/src/test/java/com/graphhopper/routing/AbstractRoutingAlgorithmTester.java
index 5b09bd3268..278c02a12b 100644
--- a/core/src/test/java/com/graphhopper/routing/AbstractRoutingAlgorithmTester.java
+++ b/core/src/test/java/com/graphhopper/routing/AbstractRoutingAlgorithmTester.java
@@ -84,7 +84,7 @@ public void testCalcShortestPath()
     }
 
     @Test
-    public void testCalcShortestPathWithLimit()
+    public void testWeightLimit()
     {
         Graph graph = createTestGraph();
         RoutingAlgorithm algo = createAlgo(graph);
@@ -95,6 +95,24 @@ public void testCalcShortestPathWithLimit()
         assertEquals(p.toString(), Helper.createTList(), p.calcNodes());
     }
 
+    @Test
+    public void testWeightLimit_issue380()
+    {
+        Graph graph = createGraph(false);
+        initGraphWeightLimit(graph);
+        RoutingAlgorithm algo = createAlgo(graph);
+        algo.setWeightLimit(3);
+        Path p = algo.calcPath(0, 4);
+        assertTrue(p.isFound());
+        assertEquals(3.0, p.getWeight(), 1e-6);
+
+        algo = createAlgo(graph);
+        algo.setWeightLimit(3);
+        p = algo.calcPath(0, 3);
+        assertTrue(p.isFound());
+        assertEquals(3.0, p.getWeight(), 1e-6);
+    }
+
     // see calc-fastest-graph.svg
     @Test
     public void testCalcFastestPath()
@@ -799,6 +817,30 @@ Graph initEleGraph( Graph g )
         return g;
     }
 
+    public static Graph initGraphWeightLimit( Graph g )
+    {
+        //      0----1
+        //     /     |
+        //    7--    |
+        //   /   |   |
+        //   6---5   |
+        //   |   |   |
+        //   4---3---2
+
+        g.edge(0, 1, 1, true);
+        g.edge(1, 2, 1, true);
+
+        g.edge(3, 2, 1, true);
+        g.edge(3, 5, 1, true);
+        g.edge(5, 7, 1, true);
+        g.edge(3, 4, 1, true);
+        g.edge(4, 6, 1, true);
+        g.edge(6, 7, 1, true);
+        g.edge(6, 5, 1, true);
+        g.edge(0, 7, 1, true);
+        return g;
+    }
+
     public Graph getMatrixGraph()
     {
         return getMatrixAlikeGraph();
diff --git a/core/src/test/java/com/graphhopper/routing/ch/PrepareContractionHierarchiesTest.java b/core/src/test/java/com/graphhopper/routing/ch/PrepareContractionHierarchiesTest.java
index 7cacf0bfca..fbba76c1a0 100644
--- a/core/src/test/java/com/graphhopper/routing/ch/PrepareContractionHierarchiesTest.java
+++ b/core/src/test/java/com/graphhopper/routing/ch/PrepareContractionHierarchiesTest.java
@@ -136,7 +136,7 @@ public void testMoreComplexGraph()
         int old = g.getAllEdges().getCount();
         PrepareContractionHierarchies prepare = new PrepareContractionHierarchies(dir, g, carEncoder, weighting, tMode);
         prepare.doWork();
-        assertEquals(old + 10, g.getAllEdges().getCount());
+        assertEquals(old + 7, g.getAllEdges().getCount());
     }
 
     @Test
@@ -286,7 +286,7 @@ public void testRoundaboutUnpacking()
         int old = g.getAllEdges().getCount();
         PrepareContractionHierarchies prepare = new PrepareContractionHierarchies(dir, g, carEncoder, weighting, tMode);
         prepare.doWork();
-        assertEquals(old + 22, g.getAllEdges().getCount());
+        assertEquals(old + 23, g.getAllEdges().getCount());
         RoutingAlgorithm algo = prepare.createAlgo(g, new AlgorithmOptions(AlgorithmOptions.DIJKSTRA_BI, carEncoder, weighting, tMode));
         Path p = algo.calcPath(4, 7);
         assertEquals(Helper.createTList(4, 5, 6, 7), p.calcNodes());
