diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnElement.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnElement.java
index d86c6dcae9..35e847b86e 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnElement.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnElement.java
@@ -112,23 +112,32 @@ else if (event == XMLStreamConstants.START_ELEMENT)
                     break;
                 }
                 case "name":
-                case "alternativeName": {
+                case "alternativeName":
+                {
                     event = handleName(parser);
                     break;
                 }
-                case "physicalLevel": {
+                case "physicalLevel":
+                {
                     event = handlePhysicalLevel(parser);
                     break;
                 }
-                case "rightOfUse": {
+                case "rightOfUse":
+                {
                     event = handleRightOfUse(parser);
                     break;
                 }
-                case "potentialHazardCrossed": {
+                case "potentialHazardCrossed":
+                {
                     event = handlePotentialHazard(parser);
                     break;
                 }
 
+                case "withinAccessLand" :
+                {
+                    event = handleAccessLand(parser);
+                    break;
+                }
                 default: {
                     event = parser.next();
                 }
@@ -138,6 +147,11 @@ else if (event == XMLStreamConstants.START_ELEMENT)
             event = parser.next();
     }
 
+    protected int handleAccessLand(XMLStreamReader parser) throws XMLStreamException
+    {
+        return parser.next();
+    }
+
     protected int handleSurfaceType(XMLStreamReader parser) throws XMLStreamException
     {
         return parser.next();
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnNode.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnNode.java
index c08b01dc26..b1fb0fe000 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnNode.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnNode.java
@@ -53,7 +53,7 @@ public static OsDpnNode create(String id, XMLStreamReader parser)
         // QName attributeName = parser.getAttributeName(i);
         // System.err.println("QName:" + attributeName);
         // }
-        System.out.println("OsDpnNode.create()");
+        logger.trace("OsDpnNode.create()");
         OsDpnNode node = new OsDpnNode(id);
 
         parser.nextTag();
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnReader.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnReader.java
index 469ebae8a3..3e2c6103e0 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnReader.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnReader.java
@@ -190,16 +190,16 @@ void preProcess(File osmFile) {
             long tmpRelationCounter = 1;
             RoutingElement item;
             while ((item = in.getNext()) != null) {
-                System.out.println("OsItnReader.preProcess( " + item.getType()
+                logger.trace("OsDpnReader.preProcess( " + item.getType()
                         + " )");
                 if (item.isType(OSMElement.WAY)) {
                     final OsDpnWay way = (OsDpnWay) item;
                     boolean valid = filterWay(way);
-                    logger.info("Valid Way:" + valid);
+                    logger.trace("Valid Way:" + valid);
                     if (valid) {
                         List<String> wayNodes = way.getNodes();
                         int s = wayNodes.size();
-                        logger.info("With Nodes:" + s);
+                        logger.trace("With Nodes:" + s);
                         for (int index = 0; index < s; index++) {
                             prepareHighwayNode(wayNodes.get(index));
                         }
@@ -300,7 +300,6 @@ private void writeOsm2Graph(File osmFile) {
                     case OSMElement.NODE:
                         OsDpnNode dpnNode = (OsDpnNode) item;
                         String id = dpnNode.getId();
-                        System.out.println(id);
                         logger.info("NODEITEMID:" + id);
                         if (nodeFilter.get(id) != -1) {
                             processNode(dpnNode);
@@ -560,6 +559,11 @@ boolean addNode(OsDpnNode node) {
     }
 
     private double getElevation(Node node) {
+        if(null==eleProvider)
+        {
+            String eleString = node.getTag("ele");
+            return Double.valueOf(eleString);
+        }
         return eleProvider.getEle(node.getLat(), node.getLon());
     }
 
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnWay.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnWay.java
index 966a4f7a1f..b0cd7e934c 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnWay.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnWay.java
@@ -64,10 +64,10 @@
     public static OsDpnWay create(String idStr, XMLStreamReader parser)
             throws XMLStreamException, MismatchedDimensionException,
             FactoryException, TransformException {
-        System.out.println("OsDpnWay.create()");
+        logger.trace("OsDpnWay.create()");
         OsDpnWay way = new OsDpnWay(idStr);
         parser.nextTag();
-        way.setTag("highway", "footway");
+        way.setTag("highway", "track");
         way.readTags(parser);
         logger.info(way.toString());
         return way;
@@ -81,6 +81,16 @@ public OsDpnWay(String id) {
         return nodes;
     }
 
+    @Override
+    protected int handleAccessLand(XMLStreamReader parser) throws XMLStreamException {
+        String access = parser.getElementText();
+        if("true".equals(access))
+        {
+            setTag("foot", "yes");
+        }
+        return parser.getEventType();
+    }
+
     @Override
     protected int handleSurfaceType(XMLStreamReader parser) throws XMLStreamException {
         String surface;
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/OsDpnWayTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/OsDpnWayTest.java
index f3c8f8a367..f843886a1b 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/OsDpnWayTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/OsDpnWayTest.java
@@ -316,7 +316,7 @@
             "      </dpn:geometry>\n" +
             "    </dpn:RouteLink>";
 
-    public static final String unmade = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">" +
+    public static final String unmadeNoPhysicalButWithinAccessLand = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">" +
             "  <gml:featureMember>\n" +
             "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">" +
             "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n" +
@@ -329,7 +329,6 @@
             "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#Unmade\">Unmade</dpn:surfaceType>\n" +
             "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#BelowSurfaceLevelTunnel\">Below Surface Level Tunnel</dpn:physicalLevel>\n" +
             "      <dpn:name>Named Road</dpn:name>\n" +
-            "      <dpn:rightOfUse>Restricted Byway</dpn:rightOfUse>\n" +
             "      <dpn:adoptedByNationalCycleRoute>false</dpn:adoptedByNationalCycleRoute>\n" +
             "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n" +
             "      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>\n" +
@@ -351,14 +350,23 @@
             "    </dpn:RouteLink>";
 
     @Test
-    public void testSurface() throws XMLStreamException, FactoryException, TransformException {
+    public void testSurface() throws XMLStreamException, FactoryException, TransformException
+    {
         OsDpnWay way = getOsDpnWay(surfaceWay);
         assertFalse("Way should not have a tunnel", way.hasTag("tunnel", "yes"));
         assertFalse("Way should not have a bridge", way.hasTag("bridge", "yes"));
     }
 
     @Test
-    public void testBelowSurfaceTunnel() throws XMLStreamException, FactoryException, TransformException {
+    public void testWithinAccessLand() throws XMLStreamException, FactoryException, TransformException
+    {
+        OsDpnWay way = getOsDpnWay(unmadeNoPhysicalButWithinAccessLand);
+        assertTrue("Should allow walking as within access land even though no other right of way declared", way.hasTag("foot", "yes"));
+    }
+
+    @Test
+    public void testBelowSurfaceTunnel() throws XMLStreamException, FactoryException, TransformException
+    {
         OsDpnWay way = getOsDpnWay(tunnelWay);
         assertTrue("Way should have a tunnel", way.hasTag("tunnel", "yes"));
         assertFalse("Way should not have a bridge", way.hasTag("bridge", "yes"));
@@ -413,7 +421,7 @@ public void testMadeUnknown() throws XMLStreamException, FactoryException, Trans
 
     @Test
     public void testUnmade() throws XMLStreamException, FactoryException, TransformException {
-        OsDpnWay way = getOsDpnWay(unmade);
+        OsDpnWay way = getOsDpnWay(unmadeNoPhysicalButWithinAccessLand);
         assertTrue("Way surface paved", way.hasTag("surface", "ground"));
     }
 
