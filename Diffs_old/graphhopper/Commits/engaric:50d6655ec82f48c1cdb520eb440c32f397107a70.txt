diff --git a/core/src/main/java/com/graphhopper/GraphHopper.java b/core/src/main/java/com/graphhopper/GraphHopper.java
index ddfd789c08..bef6944d49 100644
--- a/core/src/main/java/com/graphhopper/GraphHopper.java
+++ b/core/src/main/java/com/graphhopper/GraphHopper.java
@@ -39,16 +39,17 @@
 import com.graphhopper.reader.osgb.hn.OsHnReader;
 import com.graphhopper.reader.osgb.itn.OsItnReader;
 import com.graphhopper.routing.AlgorithmOptions;
-import com.graphhopper.routing.EscapePrivateWeighting;
 import com.graphhopper.routing.Path;
 import com.graphhopper.routing.QueryGraph;
 import com.graphhopper.routing.RoutingAlgorithm;
 import com.graphhopper.routing.RoutingAlgorithmFactory;
 import com.graphhopper.routing.RoutingAlgorithmFactorySimple;
 import com.graphhopper.routing.ch.PrepareContractionHierarchies;
+import com.graphhopper.routing.util.BanPrivateWeighting;
 import com.graphhopper.routing.util.DefaultEdgeFilter;
 import com.graphhopper.routing.util.EdgeFilter;
 import com.graphhopper.routing.util.EncodingManager;
+import com.graphhopper.routing.util.EscapePrivateWeighting;
 import com.graphhopper.routing.util.FastestWeighting;
 import com.graphhopper.routing.util.FastestWithAvoidancesWeighting;
 import com.graphhopper.routing.util.FlagEncoder;
@@ -982,14 +983,19 @@ public Weighting createTurnWeighting( Weighting weighting, Graph graph, FlagEnco
 	}
 	
 	/**
-	 * Potentially wraps the specified weighting into a EscapePrivateWeighting instance.
+	 * Potentially wraps the specified weighting into a Weighting which specifies how it handles roads marked as private access.
+	 * This will be a EscapePrivateWeighting or a BanPrivateWeighting
 	 * @param includeNoThrough 
 	 */
-	public Weighting createEscapePrivateWeighting( Weighting weighting, GHRequest request , Graph graph, FlagEncoder encoder )
+	public Weighting createPrivateWeighting( Weighting weighting, GHRequest request , Graph graph, FlagEncoder encoder )
 	{
 		boolean includeNoThrough = checkForNoThroughAccess(request);
-		if (includeNoThrough && encoder.supports(EscapePrivateWeighting.class))
-			return new EscapePrivateWeighting(graph, encoder, weighting);
+		if(encoder.supports(EscapePrivateWeighting.class)) {
+			if (includeNoThrough)
+				return new EscapePrivateWeighting(graph, encoder, weighting);
+			else 
+				return new BanPrivateWeighting(encoder, weighting);
+		}
 		return weighting;
 	}
 
@@ -1104,7 +1110,7 @@ public GHResponse route( GHRequest request )
 			return Collections.emptyList();
 		}
 		weighting = createTurnWeighting(weighting, queryGraph, encoder);
-		weighting = createEscapePrivateWeighting(weighting, request, queryGraph, encoder);
+		weighting = createPrivateWeighting(weighting, request, queryGraph, encoder);
 
 		double weightLimit = request.getHints().getDouble("defaultWeightLimit", defaultWeightLimit);
 		String algoStr = request.getAlgorithm().isEmpty() ? AlgorithmOptions.DIJKSTRA_BI : request
diff --git a/core/src/main/java/com/graphhopper/routing/AStar.java b/core/src/main/java/com/graphhopper/routing/AStar.java
index c29870bb26..5f36844529 100644
--- a/core/src/main/java/com/graphhopper/routing/AStar.java
+++ b/core/src/main/java/com/graphhopper/routing/AStar.java
@@ -24,6 +24,7 @@
 
 import java.util.PriorityQueue;
 
+import com.graphhopper.routing.util.EscapePrivateWeighting;
 import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.routing.util.TraversalMode;
 import com.graphhopper.routing.util.Weighting;
diff --git a/core/src/main/java/com/graphhopper/routing/AbstractBidirAlgo.java b/core/src/main/java/com/graphhopper/routing/AbstractBidirAlgo.java
index b6c2051342..acc33d9280 100644
--- a/core/src/main/java/com/graphhopper/routing/AbstractBidirAlgo.java
+++ b/core/src/main/java/com/graphhopper/routing/AbstractBidirAlgo.java
@@ -17,6 +17,7 @@
  */
 package com.graphhopper.routing;
 
+import com.graphhopper.routing.util.EscapePrivateWeighting;
 import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.routing.util.TraversalMode;
 import com.graphhopper.routing.util.Weighting;
diff --git a/core/src/main/java/com/graphhopper/routing/Dijkstra.java b/core/src/main/java/com/graphhopper/routing/Dijkstra.java
index 6b016d5d09..904165b42d 100644
--- a/core/src/main/java/com/graphhopper/routing/Dijkstra.java
+++ b/core/src/main/java/com/graphhopper/routing/Dijkstra.java
@@ -22,6 +22,7 @@
 
 import java.util.PriorityQueue;
 
+import com.graphhopper.routing.util.EscapePrivateWeighting;
 import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.routing.util.TraversalMode;
 import com.graphhopper.routing.util.Weighting;
diff --git a/core/src/main/java/com/graphhopper/routing/EscapePrivateWeighting.java b/core/src/main/java/com/graphhopper/routing/util/EscapePrivateWeighting.java
similarity index 93%
rename from core/src/main/java/com/graphhopper/routing/EscapePrivateWeighting.java
rename to core/src/main/java/com/graphhopper/routing/util/EscapePrivateWeighting.java
index 0751ed6efe..98d67923cb 100644
--- a/core/src/main/java/com/graphhopper/routing/EscapePrivateWeighting.java
+++ b/core/src/main/java/com/graphhopper/routing/util/EscapePrivateWeighting.java
@@ -1,7 +1,5 @@
-package com.graphhopper.routing;
+package com.graphhopper.routing.util;
 
-import com.graphhopper.routing.util.FlagEncoder;
-import com.graphhopper.routing.util.Weighting;
 import com.graphhopper.storage.Graph;
 import com.graphhopper.util.EdgeIterator;
 import com.graphhopper.util.EdgeIteratorState;
diff --git a/core/src/main/java/com/graphhopper/routing/util/OsCarFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/OsCarFlagEncoder.java
index 9349376514..3cb551e0c7 100644
--- a/core/src/main/java/com/graphhopper/routing/util/OsCarFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/OsCarFlagEncoder.java
@@ -1,7 +1,6 @@
 package com.graphhopper.routing.util;
 
 import com.graphhopper.reader.Way;
-import com.graphhopper.routing.EscapePrivateWeighting;
 
 public class OsCarFlagEncoder extends CarFlagEncoder {
 	
diff --git a/core/src/test/java/com/graphhopper/GraphHopperTest.java b/core/src/test/java/com/graphhopper/GraphHopperTest.java
index b988b22ead..428b5087a7 100644
--- a/core/src/test/java/com/graphhopper/GraphHopperTest.java
+++ b/core/src/test/java/com/graphhopper/GraphHopperTest.java
@@ -37,8 +37,10 @@
 
 import com.graphhopper.reader.DataReader;
 import com.graphhopper.routing.AlgorithmOptions;
+import com.graphhopper.routing.util.BanPrivateWeighting;
 import com.graphhopper.routing.util.EdgeFilter;
 import com.graphhopper.routing.util.EncodingManager;
+import com.graphhopper.routing.util.EscapePrivateWeighting;
 import com.graphhopper.routing.util.FastestWeighting;
 import com.graphhopper.routing.util.FastestWithAvoidancesWeighting;
 import com.graphhopper.routing.util.FlagEncoder;
@@ -613,4 +615,22 @@ public void testCreateWeightingWithPriority() {
 		createdWeighting = instance.createWeighting(weightingMap , encoder );
 		assertEquals(ShortestWithAvoidancesWeighting.class, createdWeighting.getClass());
     }
+    
+    @Test
+    public void testCreatePrivateWeightingWithPriority() {
+    	instance = new GraphHopper();
+        GraphStorage graph = Mockito.mock(GraphStorage.class);
+        Weighting weighting = Mockito.mock(Weighting.class);
+        FlagEncoder encoder = Mockito.mock(FlagEncoder.class);
+		instance.setGraph(graph );
+		GHRequest request = new GHRequest();
+		Weighting privateWeighting = instance.createPrivateWeighting(weighting, request , graph, encoder);
+		assertEquals(EscapePrivateWeighting.class, privateWeighting.getClass());
+		
+		privateWeighting = instance.createPrivateWeighting(weighting, request , graph, encoder);
+		assertEquals(BanPrivateWeighting.class, privateWeighting.getClass());
+		
+		privateWeighting = instance.createPrivateWeighting(weighting, request , graph, encoder);
+		assertEquals(weighting.getClass(), privateWeighting.getClass());
+    }
 }
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/AbstractOsItnReaderTest.java b/core/src/test/java/com/graphhopper/reader/osgb/AbstractOsItnReaderTest.java
index 920a09938e..807971e08b 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/AbstractOsItnReaderTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/AbstractOsItnReaderTest.java
@@ -15,7 +15,6 @@
 import com.graphhopper.GHResponse;
 import com.graphhopper.GraphHopper;
 import com.graphhopper.reader.osgb.itn.OsItnReader;
-import com.graphhopper.routing.EscapePrivateWeighting;
 import com.graphhopper.routing.util.AbstractFlagEncoder;
 import com.graphhopper.routing.util.BikeFlagEncoder;
 import com.graphhopper.routing.util.BusFlagEncoder;
@@ -23,6 +22,7 @@
 import com.graphhopper.routing.util.DefaultEdgeFilter;
 import com.graphhopper.routing.util.EdgeFilter;
 import com.graphhopper.routing.util.EncodingManager;
+import com.graphhopper.routing.util.EscapePrivateWeighting;
 import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.routing.util.FootFlagEncoder;
 import com.graphhopper.storage.Graph;
diff --git a/core/src/test/java/com/graphhopper/routing/AbstractRoutingAlgorithmTester.java b/core/src/test/java/com/graphhopper/routing/AbstractRoutingAlgorithmTester.java
index 34c0f1bf3d..fbfccc7d24 100644
--- a/core/src/test/java/com/graphhopper/routing/AbstractRoutingAlgorithmTester.java
+++ b/core/src/test/java/com/graphhopper/routing/AbstractRoutingAlgorithmTester.java
@@ -33,6 +33,7 @@
 import com.graphhopper.routing.util.EdgeFilter;
 import com.graphhopper.routing.util.EmergencyVehicleFlagEncoder;
 import com.graphhopper.routing.util.EncodingManager;
+import com.graphhopper.routing.util.EscapePrivateWeighting;
 import com.graphhopper.routing.util.FastestWeighting;
 import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.routing.util.ShortestWeighting;
