diff --git a/core/src/main/java/com/graphhopper/GraphHopper.java b/core/src/main/java/com/graphhopper/GraphHopper.java
index 38558cacea..8c30127ef5 100644
--- a/core/src/main/java/com/graphhopper/GraphHopper.java
+++ b/core/src/main/java/com/graphhopper/GraphHopper.java
@@ -840,6 +840,9 @@ public GHResponse route( GHRequest request )
         GHPoint startPoint = points.get(0);
         StopWatch sw = new StopWatch().start();
         QueryResult fromRes = locationIndex.findClosest(startPoint.lat, startPoint.lon, edgeFilter);
+        //
+        System.out.println("fromRes = "+ fromRes.toString());
+        
         String debug = "idLookup[0]:" + sw.stop().getSeconds() + "s";
         sw.stop();
         if (!fromRes.isValid())
@@ -851,9 +854,15 @@ public GHResponse route( GHRequest request )
         List<Path> paths = new ArrayList<Path>(points.size() - 1);
         for (int placeIndex = 1; placeIndex < points.size(); placeIndex++)
         {
+            //
+            System.out.println("points.size() = "+ points.size());
+            
             GHPoint point = points.get(placeIndex);
             sw = new StopWatch().start();
             QueryResult toRes = locationIndex.findClosest(point.lat, point.lon, edgeFilter);
+            //
+            System.out.println("toRes = "+ toRes.toString());
+            
             debug += ", [" + placeIndex + "] idLookup:" + sw.stop().getSeconds() + "s";
             if (!toRes.isValid())
             {
@@ -882,9 +891,16 @@ else if (algoStr.equals("astarbi"))
                 }
             } else
             {
+                //Amal: IMP.
                 Weighting weighting = createWeighting(request.getWeighting(), encoder);
+                //
+                System.out.println("weighting = "+ weighting);
+                
                 prepare = NoOpAlgorithmPreparation.createAlgoPrepare(graph, algoStr, encoder, weighting);
                 algo = prepare.createAlgo();
+                
+                //
+                System.out.println("prepare.createAlgo.toString "+ algo.toString());
             }
 
             debug += ", algoInit:" + sw.stop().getSeconds() + "s";
@@ -894,6 +910,9 @@ else if (algoStr.equals("astarbi"))
             if (path.getMillis() < 0)
                 throw new RuntimeException("Time was negative. Please report as bug and include:" + request);
 
+            //
+            System.out.println("path = "+ path);
+            
             paths.add(path);
             debug += ", " + algo.getName() + "-routing:" + sw.stop().getSeconds() + "s, " + path.getDebugInfo();
             fromRes = toRes;
@@ -906,6 +925,7 @@ else if (algoStr.equals("astarbi"))
             throw new RuntimeException("There should be exactly one more places than paths. places:" + points.size() + ", paths:" + paths.size());
 
         rsp.setDebugInfo(debug);
+        System.out.println("paths = "+ paths);
         return paths;
     }
 
diff --git a/core/src/main/java/com/graphhopper/routing/util/LeastNoisyWeighting.java b/core/src/main/java/com/graphhopper/routing/util/LeastNoisyWeighting.java
new file mode 100644
index 0000000000..5a136462e7
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/routing/util/LeastNoisyWeighting.java
@@ -0,0 +1,55 @@
+/*
+ * Copyright 2014 Amal Elgammal
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ *      http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.graphhopper.routing.util;
+
+import com.graphhopper.util.EdgeIteratorState;
+
+/**
+ * Calculates the least noisy route- independent of a vehicle as the calculation is based on 
+ * the noise data linked to edges stores in Redis
+ * @author Amal Elgammal
+ */
+public class LeastNoisyWeighting implements Weighting
+{
+    public LeastNoisyWeighting()
+    {
+        
+    }
+    
+     @Override
+    public double getMinWeight( double noiseValue )
+    {
+        //TODO: Check if this needs to be updated
+        return noiseValue;
+    }
+    
+     @Override
+    public double calcWeight( EdgeIteratorState edge, boolean reverse )
+    {
+        //TODO : First test when you pass least_noise from the web app
+        //if this invokes here--Code to capture noise value of edge from Redis and returns it!
+        return edge.getDistance();
+    }
+    
+    @Override
+    public String toString()
+    {
+        //TODO: check if we need to define it with the encoder manger or elsewhere
+        return "LEAST_NOISY";
+    }
+    
+}
