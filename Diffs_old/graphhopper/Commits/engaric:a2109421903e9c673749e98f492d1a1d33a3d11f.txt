diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/Boulders.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/Boulders.java
new file mode 100644
index 0000000000..3101db5d3b
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/Boulders.java
@@ -0,0 +1,16 @@
+package com.graphhopper.reader.osgb.dpn;
+
+import com.graphhopper.reader.Way;
+
+/**
+ * Created by sadam on 13/02/15.
+ */
+public class Boulders extends AbstractOsDpnOsmAttibuteMappingVisitor {
+
+    @Override
+    protected void applyAttributes(Way way)
+    {
+        way.setTag("natural", "rocks");
+    }
+
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/Cliff.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/Cliff.java
new file mode 100644
index 0000000000..6f47ac1983
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/Cliff.java
@@ -0,0 +1,16 @@
+package com.graphhopper.reader.osgb.dpn;
+
+import com.graphhopper.reader.Way;
+
+/**
+ * Created by sadam on 13/02/15.
+ */
+public class Cliff extends AbstractOsDpnOsmAttibuteMappingVisitor {
+
+    @Override
+    protected void applyAttributes(Way way)
+    {
+        way.setTag("natural", "cliff");
+    }
+
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/Marsh.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/Marsh.java
new file mode 100644
index 0000000000..f7788ce1e0
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/Marsh.java
@@ -0,0 +1,16 @@
+package com.graphhopper.reader.osgb.dpn;
+
+import com.graphhopper.reader.Way;
+
+/**
+ * Created by sadam on 13/02/15.
+ */
+public class Marsh extends AbstractOsDpnOsmAttibuteMappingVisitor {
+
+    @Override
+    protected void applyAttributes(Way way)
+    {
+        way.setTag("wetland", "marsh");
+    }
+
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/Mud.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/Mud.java
new file mode 100644
index 0000000000..8f5588d2b3
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/Mud.java
@@ -0,0 +1,16 @@
+package com.graphhopper.reader.osgb.dpn;
+
+import com.graphhopper.reader.Way;
+
+/**
+ * Created by sadam on 13/02/15.
+ */
+public class Mud extends AbstractOsDpnOsmAttibuteMappingVisitor {
+
+    @Override
+    protected void applyAttributes(Way way)
+    {
+        way.setTag("natural", "mud");
+    }
+
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/Rock.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/Rock.java
new file mode 100644
index 0000000000..9ece1e942a
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/Rock.java
@@ -0,0 +1,16 @@
+package com.graphhopper.reader.osgb.dpn;
+
+import com.graphhopper.reader.Way;
+
+/**
+ * Created by sadam on 13/02/15.
+ */
+public class Rock extends AbstractOsDpnOsmAttibuteMappingVisitor {
+
+    @Override
+    protected void applyAttributes(Way way)
+    {
+        way.setTag("natural", "rocks");
+    }
+
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/Sand.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/Sand.java
new file mode 100644
index 0000000000..0de861c817
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/Sand.java
@@ -0,0 +1,16 @@
+package com.graphhopper.reader.osgb.dpn;
+
+import com.graphhopper.reader.Way;
+
+/**
+ * Created by sadam on 13/02/15.
+ */
+public class Sand extends AbstractOsDpnOsmAttibuteMappingVisitor {
+
+    @Override
+    protected void applyAttributes(Way way)
+    {
+        way.setTag("natural", "sand");
+    }
+
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/Scree.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/Scree.java
new file mode 100644
index 0000000000..bfb312be81
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/Scree.java
@@ -0,0 +1,16 @@
+package com.graphhopper.reader.osgb.dpn;
+
+import com.graphhopper.reader.Way;
+
+/**
+ * Created by sadam on 13/02/15.
+ */
+public class Scree extends AbstractOsDpnOsmAttibuteMappingVisitor {
+
+    @Override
+    protected void applyAttributes(Way way)
+    {
+        way.setTag("natural", "scree");
+    }
+
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/Shingle.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/Shingle.java
new file mode 100644
index 0000000000..4aefacbf13
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/Shingle.java
@@ -0,0 +1,16 @@
+package com.graphhopper.reader.osgb.dpn;
+
+import com.graphhopper.reader.Way;
+
+/**
+ * Created by sadam on 13/02/15.
+ */
+public class Shingle extends AbstractOsDpnOsmAttibuteMappingVisitor {
+
+    @Override
+    protected void applyAttributes(Way way)
+    {
+        way.setTag("natural", "shingle");
+    }
+
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/Spoil.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/Spoil.java
new file mode 100644
index 0000000000..0310568891
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/Spoil.java
@@ -0,0 +1,16 @@
+package com.graphhopper.reader.osgb.dpn;
+
+import com.graphhopper.reader.Way;
+
+/**
+ * Created by sadam on 13/02/15.
+ */
+public class Spoil extends AbstractOsDpnOsmAttibuteMappingVisitor {
+
+    @Override
+    protected void applyAttributes(Way way)
+    {
+        way.setTag("man_made", "spoil_heap");
+    }
+
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/TidalWater.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/TidalWater.java
new file mode 100644
index 0000000000..fe0c7ca803
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/TidalWater.java
@@ -0,0 +1,16 @@
+package com.graphhopper.reader.osgb.dpn;
+
+import com.graphhopper.reader.Way;
+
+/**
+ * Created by sadam on 13/02/15.
+ */
+public class TidalWater extends AbstractOsDpnOsmAttibuteMappingVisitor {
+
+    @Override
+    protected void applyAttributes(Way way)
+    {
+        way.setTag("tidal", "yes");
+    }
+
+}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/BouldersTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/BouldersTest.java
new file mode 100644
index 0000000000..8ac7d8a169
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/BouldersTest.java
@@ -0,0 +1,34 @@
+package com.graphhopper.reader.osgb.dpn;
+
+import static org.mockito.Mockito.verify;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+
+public class BouldersTest {
+	 static OsDpnOsmAttributeMappingVisitor visitor;
+	    @Mock
+	    Way way;
+
+	    @BeforeClass
+	    public static void createVisitor() {
+	        visitor = new Boulders();
+	    }
+
+	    @Before
+	    public void init() {
+	        MockitoAnnotations.initMocks(this);
+	    }
+
+	    @Test
+	    public void testVisitWayAttribute() throws Exception {
+	        visitor.visitWayAttribute("boulders", way);
+	        verify(way).setTag("natural", "rocks");
+	    }
+
+}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/BridleWayTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/BridleWayTest.java
index 1c942fcaa2..a4452d6f4e 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/BridleWayTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/BridleWayTest.java
@@ -1,13 +1,14 @@
 package com.graphhopper.reader.osgb.dpn;
 
-import com.graphhopper.reader.Way;
+import static org.mockito.Mockito.verify;
+
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.Test;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
 
-import static org.mockito.Mockito.verify;
+import com.graphhopper.reader.Way;
 
 public class BridleWayTest {
     static OsDpnOsmAttributeMappingVisitor visitor;
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/BywayOpenToAllTrafficTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/BywayOpenToAllTrafficTest.java
index c7c89f142b..f513f50d97 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/BywayOpenToAllTrafficTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/BywayOpenToAllTrafficTest.java
@@ -1,14 +1,14 @@
 package com.graphhopper.reader.osgb.dpn;
 
-import com.graphhopper.reader.Way;
+import static org.mockito.Mockito.verify;
+
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.Test;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
 
-import static org.junit.Assert.*;
-import static org.mockito.Mockito.verify;
+import com.graphhopper.reader.Way;
 
 public class BywayOpenToAllTrafficTest {
 
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/CliffTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/CliffTest.java
new file mode 100644
index 0000000000..87474acdb4
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/CliffTest.java
@@ -0,0 +1,34 @@
+package com.graphhopper.reader.osgb.dpn;
+
+import static org.mockito.Mockito.verify;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+
+public class CliffTest {
+	 static OsDpnOsmAttributeMappingVisitor visitor;
+	    @Mock
+	    Way way;
+
+	    @BeforeClass
+	    public static void createVisitor() {
+	        visitor = new Cliff();
+	    }
+
+	    @Before
+	    public void init() {
+	        MockitoAnnotations.initMocks(this);
+	    }
+
+	    @Test
+	    public void testVisitWayAttribute() throws Exception {
+	        visitor.visitWayAttribute("cliff", way);
+	        verify(way).setTag("natural", "cliff");
+	    }
+
+}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/FootpathTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/FootpathTest.java
index b796910495..60b319784e 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/FootpathTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/FootpathTest.java
@@ -1,13 +1,14 @@
 package com.graphhopper.reader.osgb.dpn;
 
-import com.graphhopper.reader.Way;
+import static org.mockito.Mockito.verify;
+
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.Test;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
 
-import static org.mockito.Mockito.verify;
+import com.graphhopper.reader.Way;
 
 public class FootpathTest {
     static OsDpnOsmAttributeMappingVisitor visitor;
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/MarshTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/MarshTest.java
new file mode 100644
index 0000000000..235cc06660
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/MarshTest.java
@@ -0,0 +1,34 @@
+package com.graphhopper.reader.osgb.dpn;
+
+import static org.mockito.Mockito.verify;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+
+public class MarshTest {
+	 static OsDpnOsmAttributeMappingVisitor visitor;
+	    @Mock
+	    Way way;
+
+	    @BeforeClass
+	    public static void createVisitor() {
+	        visitor = new Marsh();
+	    }
+
+	    @Before
+	    public void init() {
+	        MockitoAnnotations.initMocks(this);
+	    }
+
+	    @Test
+	    public void testVisitWayAttribute() throws Exception {
+	        visitor.visitWayAttribute("marsh", way);
+	        verify(way).setTag("wetland", "marsh");
+	    }
+
+}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/MudTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/MudTest.java
new file mode 100644
index 0000000000..1e2d26979b
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/MudTest.java
@@ -0,0 +1,34 @@
+package com.graphhopper.reader.osgb.dpn;
+
+import static org.mockito.Mockito.verify;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+
+public class MudTest {
+	 static OsDpnOsmAttributeMappingVisitor visitor;
+	    @Mock
+	    Way way;
+
+	    @BeforeClass
+	    public static void createVisitor() {
+	        visitor = new Mud();
+	    }
+
+	    @Before
+	    public void init() {
+	        MockitoAnnotations.initMocks(this);
+	    }
+
+	    @Test
+	    public void testVisitWayAttribute() throws Exception {
+	        visitor.visitWayAttribute("mud", way);
+	        verify(way).setTag("natural", "mud");
+	    }
+
+}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/OsDpnWayTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/OsDpnWayTest.java
index cdaf984fb8..056b7e9c30 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/OsDpnWayTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/OsDpnWayTest.java
@@ -1,16 +1,17 @@
 package com.graphhopper.reader.osgb.dpn;
 
-import org.junit.Test;
-import org.opengis.referencing.FactoryException;
-import org.opengis.referencing.operation.TransformException;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
+import java.io.StringReader;
 
 import javax.xml.stream.XMLInputFactory;
 import javax.xml.stream.XMLStreamException;
 import javax.xml.stream.XMLStreamReader;
-import java.io.StringReader;
 
-import static org.junit.Assert.assertTrue;
-import static org.junit.Assert.assertFalse;
+import org.junit.Test;
+import org.opengis.referencing.FactoryException;
+import org.opengis.referencing.operation.TransformException;
 
 public class OsDpnWayTest {
 
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/PermissiveBridleWayTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/PermissiveBridleWayTest.java
index c35f83c9fc..611534fb34 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/PermissiveBridleWayTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/PermissiveBridleWayTest.java
@@ -1,13 +1,14 @@
 package com.graphhopper.reader.osgb.dpn;
 
-import com.graphhopper.reader.Way;
+import static org.mockito.Mockito.verify;
+
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.Test;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
 
-import static org.mockito.Mockito.verify;
+import com.graphhopper.reader.Way;
 
 public class PermissiveBridleWayTest {
     static OsDpnOsmAttributeMappingVisitor visitor;
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/PermissivePathTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/PermissivePathTest.java
index 3bc0280505..dcc09b373c 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/PermissivePathTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/PermissivePathTest.java
@@ -1,14 +1,14 @@
 package com.graphhopper.reader.osgb.dpn;
 
-import com.graphhopper.reader.Way;
+import static org.mockito.Mockito.verify;
+
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.Test;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
 
-import static org.junit.Assert.*;
-import static org.mockito.Mockito.verify;
+import com.graphhopper.reader.Way;
 
 public class PermissivePathTest {
 
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/RestrictedBywayTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/RestrictedBywayTest.java
index 289a6f517b..39ba29421e 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/RestrictedBywayTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/RestrictedBywayTest.java
@@ -1,14 +1,14 @@
 package com.graphhopper.reader.osgb.dpn;
 
-import com.graphhopper.reader.Way;
+import static org.mockito.Mockito.verify;
+
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.Test;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
 
-import static org.junit.Assert.*;
-import static org.mockito.Mockito.verify;
+import com.graphhopper.reader.Way;
 
 public class RestrictedBywayTest {
     static OsDpnOsmAttributeMappingVisitor visitor;
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/RockTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/RockTest.java
new file mode 100644
index 0000000000..230a282ac3
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/RockTest.java
@@ -0,0 +1,34 @@
+package com.graphhopper.reader.osgb.dpn;
+
+import static org.mockito.Mockito.verify;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+
+public class RockTest {
+	 static OsDpnOsmAttributeMappingVisitor visitor;
+	    @Mock
+	    Way way;
+
+	    @BeforeClass
+	    public static void createVisitor() {
+	        visitor = new Rock();
+	    }
+
+	    @Before
+	    public void init() {
+	        MockitoAnnotations.initMocks(this);
+	    }
+
+	    @Test
+	    public void testVisitWayAttribute() throws Exception {
+	        visitor.visitWayAttribute("rock", way);
+	        verify(way).setTag("natural", "rocks");
+	    }
+
+}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/SandTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/SandTest.java
new file mode 100644
index 0000000000..611c85e9b9
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/SandTest.java
@@ -0,0 +1,34 @@
+package com.graphhopper.reader.osgb.dpn;
+
+import static org.mockito.Mockito.verify;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+
+public class SandTest {
+	 static OsDpnOsmAttributeMappingVisitor visitor;
+	    @Mock
+	    Way way;
+
+	    @BeforeClass
+	    public static void createVisitor() {
+	        visitor = new Sand();
+	    }
+
+	    @Before
+	    public void init() {
+	        MockitoAnnotations.initMocks(this);
+	    }
+
+	    @Test
+	    public void testVisitWayAttribute() throws Exception {
+	        visitor.visitWayAttribute("sand", way);
+	        verify(way).setTag("natural", "sand");
+	    }
+
+}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/ScreeTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/ScreeTest.java
new file mode 100644
index 0000000000..671ccaa1fb
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/ScreeTest.java
@@ -0,0 +1,34 @@
+package com.graphhopper.reader.osgb.dpn;
+
+import static org.mockito.Mockito.verify;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+
+public class ScreeTest {
+	 static OsDpnOsmAttributeMappingVisitor visitor;
+	    @Mock
+	    Way way;
+
+	    @BeforeClass
+	    public static void createVisitor() {
+	        visitor = new Scree();
+	    }
+
+	    @Before
+	    public void init() {
+	        MockitoAnnotations.initMocks(this);
+	    }
+
+	    @Test
+	    public void testVisitWayAttribute() throws Exception {
+	        visitor.visitWayAttribute("scree", way);
+	        verify(way).setTag("natural", "scree");
+	    }
+
+}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/ShingleTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/ShingleTest.java
new file mode 100644
index 0000000000..0f7fcbd719
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/ShingleTest.java
@@ -0,0 +1,34 @@
+package com.graphhopper.reader.osgb.dpn;
+
+import static org.mockito.Mockito.verify;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+
+public class ShingleTest {
+	 static OsDpnOsmAttributeMappingVisitor visitor;
+	    @Mock
+	    Way way;
+
+	    @BeforeClass
+	    public static void createVisitor() {
+	        visitor = new Shingle();
+	    }
+
+	    @Before
+	    public void init() {
+	        MockitoAnnotations.initMocks(this);
+	    }
+
+	    @Test
+	    public void testVisitWayAttribute() throws Exception {
+	        visitor.visitWayAttribute("shingle", way);
+	        verify(way).setTag("natural", "shingle");
+	    }
+
+}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/SpoilTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/SpoilTest.java
new file mode 100644
index 0000000000..d9f6e438aa
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/SpoilTest.java
@@ -0,0 +1,34 @@
+package com.graphhopper.reader.osgb.dpn;
+
+import static org.mockito.Mockito.verify;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+
+public class SpoilTest {
+	 static OsDpnOsmAttributeMappingVisitor visitor;
+	    @Mock
+	    Way way;
+
+	    @BeforeClass
+	    public static void createVisitor() {
+	        visitor = new Spoil();
+	    }
+
+	    @Before
+	    public void init() {
+	        MockitoAnnotations.initMocks(this);
+	    }
+
+	    @Test
+	    public void testVisitWayAttribute() throws Exception {
+	        visitor.visitWayAttribute("spoil", way);
+	        verify(way).setTag("man_made", "spoil_heap");
+	    }
+
+}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/TidalWaterTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/TidalWaterTest.java
new file mode 100644
index 0000000000..ff0c007463
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/TidalWaterTest.java
@@ -0,0 +1,34 @@
+package com.graphhopper.reader.osgb.dpn;
+
+import static org.mockito.Mockito.verify;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+
+public class TidalWaterTest {
+	 static OsDpnOsmAttributeMappingVisitor visitor;
+	    @Mock
+	    Way way;
+
+	    @BeforeClass
+	    public static void createVisitor() {
+	        visitor = new TidalWater();
+	    }
+
+	    @Before
+	    public void init() {
+	        MockitoAnnotations.initMocks(this);
+	    }
+
+	    @Test
+	    public void testVisitWayAttribute() throws Exception {
+	        visitor.visitWayAttribute("tidalwater", way);
+	        verify(way).setTag("tidal", "yes");
+	    }
+
+}
