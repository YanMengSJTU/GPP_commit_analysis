diff --git a/web/src/main/java/com/graphhopper/http/GHServer.java b/web/src/main/java/com/graphhopper/http/GHServer.java
index 2e42afe0d5..8ca6338660 100644
--- a/web/src/main/java/com/graphhopper/http/GHServer.java
+++ b/web/src/main/java/com/graphhopper/http/GHServer.java
@@ -118,7 +118,14 @@ protected GraphHopper create() {
                     return new MapaalGraphHopper();
                   }
                 });
-                install(new GHServletModule());
+                install(new GHServletModule() 
+                {
+                  // EXPLICIT CODE CHANGE!
+                  @Override
+                  protected Class routeServlet() {
+                    return MapaalGraphHopperServlet.class;
+                  }
+                });
 
                 bind(GuiceFilter.class);
             }
diff --git a/web/src/main/java/com/graphhopper/http/GHServletModule.java b/web/src/main/java/com/graphhopper/http/GHServletModule.java
index 15cbe52aca..42f4578f25 100644
--- a/web/src/main/java/com/graphhopper/http/GHServletModule.java
+++ b/web/src/main/java/com/graphhopper/http/GHServletModule.java
@@ -56,7 +56,11 @@ protected void configureServlets()
         serve("/info*").with(InfoServlet.class);
         bind(InfoServlet.class).in(Singleton.class);
 
-        serve("/route*").with(GraphHopperServlet.class);
-        bind(GraphHopperServlet.class).in(Singleton.class);
+        serve("/route*").with(routeServlet());
+        bind(routeServlet()).in(Singleton.class);
+    }
+
+    protected Class<GraphHopperServlet> routeServlet() {
+      return GraphHopperServlet.class;
     }
 }
diff --git a/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java b/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
index 66f23af58d..407c3bade1 100644
--- a/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
+++ b/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
@@ -22,8 +22,6 @@
 import com.graphhopper.GHResponse;
 import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.util.*;
-import com.graphhopper.util.Helper;
-import com.graphhopper.util.Translation;
 import com.graphhopper.util.shapes.GHPoint;
 import java.io.IOException;
 import java.util.*;
@@ -45,7 +43,7 @@
 public class GraphHopperServlet extends GHBaseServlet
 {
     @Inject
-    private GraphHopper hopper;
+    protected GraphHopper hopper;
 
     @Override
     public void doGet( HttpServletRequest req, HttpServletResponse res ) throws ServletException, IOException
@@ -76,7 +74,7 @@ void writePath( HttpServletRequest req, HttpServletResponse res ) throws Excepti
         String vehicleStr = getParam(req, "vehicle", "CAR").toUpperCase();
         String weighting = getParam(req, "weighting", "fastest");
         String algoStr = getParam(req, "algorithm", "");
-        String localeStr = getParam(req, "locale", "en");
+        String localeStr = getParam(req, "locale", defaultLocale());
 
         StopWatch sw = new StopWatch().start();
         GHResponse rsp;
@@ -119,6 +117,10 @@ void writePath( HttpServletRequest req, HttpServletResponse res ) throws Excepti
             writeJson(req, res, rsp, took);
     }
 
+    protected String defaultLocale() {
+      return "en";
+    }
+
     private void writeGPX( HttpServletRequest req, HttpServletResponse res, GHResponse rsp )
     {
         boolean includeElevation = getBooleanParam(req, "elevation", false);
@@ -131,7 +133,7 @@ private void writeGPX( HttpServletRequest req, HttpServletResponse res, GHRespon
         writeResponse(res, rsp.getInstructions().createGPX(trackName, time, timeZone, includeElevation));
     }
 
-    private void writeJson( HttpServletRequest req, HttpServletResponse res,
+    protected void writeJson( HttpServletRequest req, HttpServletResponse res,
             GHResponse rsp, float took ) throws JSONException, IOException
     {
         boolean enableInstructions = getBooleanParam(req, "instructions", true);
diff --git a/web/src/main/java/com/graphhopper/http/MapaalGraphHopperServlet.java b/web/src/main/java/com/graphhopper/http/MapaalGraphHopperServlet.java
new file mode 100644
index 0000000000..a00867cf6d
--- /dev/null
+++ b/web/src/main/java/com/graphhopper/http/MapaalGraphHopperServlet.java
@@ -0,0 +1,94 @@
+package com.graphhopper.http;
+
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+
+import org.json.JSONException;
+import org.json.JSONObject;
+
+import com.graphhopper.GHResponse;
+import com.graphhopper.util.Helper;
+import com.graphhopper.util.InstructionList;
+import com.graphhopper.util.PointList;
+import com.graphhopper.util.shapes.BBox;
+
+/**
+ * NOTE: cannot move this class to mapaal package :(
+ */
+public class MapaalGraphHopperServlet extends GraphHopperServlet {
+
+  private static final long serialVersionUID = 5682815885200619893L;
+
+  @Override
+  protected String defaultLocale() {
+    return "it";
+  }
+  
+  @Override
+  protected void writeJson(HttpServletRequest req, HttpServletResponse res, GHResponse rsp,
+      float took) throws JSONException, IOException {
+    JSONObject jsonInfo = new JSONObject();
+    jsonInfo.put("took", Math.round(took * 1000));
+    JSONObject json = new JSONObject();
+    json.put("info", jsonInfo);
+    if (rsp.hasErrors()) {
+      errors(rsp, jsonInfo);
+    } else if (!rsp.isFound()) {
+      notfound(jsonInfo);
+    } else {
+      JSONObject jsonPath = def(req, rsp);
+      json.put("paths", Collections.singletonList(jsonPath));
+    }
+    writeJson(req, res, json);
+  }
+
+  private void errors(GHResponse rsp, JSONObject jsonInfo) throws JSONException {
+    List<Map<String, String>> list = new ArrayList<Map<String, String>>();
+    for (Throwable t : rsp.getErrors()) {
+      Map<String, String> map = new HashMap<String, String>();
+      map.put("message", t.getMessage());
+      map.put("details", t.getClass().getName());
+      list.add(map);
+    }
+    jsonInfo.put("errors", list);
+  }
+
+  private void notfound(JSONObject jsonInfo) throws JSONException {
+    Map<String, String> map = new HashMap<String, String>();
+    map.put("message", "Not found");
+    map.put("details", "");
+    jsonInfo.put("errors", Collections.singletonList(map));
+  }
+
+  private JSONObject def(HttpServletRequest req, GHResponse rsp) throws JSONException {
+    boolean enableInstructions = getBooleanParam(req, "instructions", true);
+    boolean pointsEncoded = getBooleanParam(req, "points_encoded", false);
+    boolean calcPoints = getBooleanParam(req, "calc_points", true);
+    boolean includeElevation = getBooleanParam(req, "elevation", true);
+    JSONObject jsonPath = new JSONObject();
+    jsonPath.put("distance", Helper.round(rsp.getDistance(), 3));
+    jsonPath.put("time", rsp.getMillis());
+    if (calcPoints) {
+      PointList points = rsp.getPoints();
+      if (points.getSize() >= 2) {
+        BBox bounds = hopper.getGraph().getBounds();
+        jsonPath.put("bbox", rsp.calcRouteBBox(bounds).toGeoJson());
+      }
+      Object createPoints = createPoints(points, pointsEncoded, includeElevation);
+      jsonPath.put("points", createPoints);
+      if (enableInstructions) {
+        InstructionList instructions = rsp.getInstructions();
+        jsonPath.put("instructions", instructions.createJson());
+      }
+    }
+    return jsonPath;
+  }
+
+}
diff --git a/web/src/main/webapp/js/tests.js b/web/src/main/webapp/js/tests.js
index 384397d46d..0049dcb7bb 100644
--- a/web/src/main/webapp/js/tests.js
+++ b/web/src/main/webapp/js/tests.js
@@ -61,9 +61,7 @@ $(function () {
 			'point=43.165858,13.724729',
 			'point=43.167963,13.726033',
 			'type=json',
-			'vehicle=mapaal',
-			'locale=it',
-			'points_encoded=false'
+			'vehicle=mapaal'
     ].join('&'),
 		req = createRequest(url)
 			.done(function (json) {
@@ -75,7 +73,6 @@ $(function () {
 			  ok(paths && paths.length && paths.length === 1, 'paths valid');
 			  path = paths[0];
 			  ok(path, 'path found');
-			  console.log(path);
 
 			  ok(!path.points_encoded, 'points are not encoded');
 			  var points = path.points.coordinates;
