diff --git a/core/src/main/java/com/graphhopper/util/AngleCalc.java b/core/src/main/java/com/graphhopper/util/AngleCalc.java
index 4b1a3f1f65..5e98e3ca80 100644
--- a/core/src/main/java/com/graphhopper/util/AngleCalc.java
+++ b/core/src/main/java/com/graphhopper/util/AngleCalc.java
@@ -87,13 +87,13 @@ public double alignOrientation( double baseOrientation, double orientation )
     }
 
     /**
-     * Calculate Azimuth for a line given by two coordinates. Direction in 'degree' where 0 is
-     * north, 90 is east, 180 is south and 270 is west.
+     * Calculate the azimuth in degree for a line given by two coordinates. Direction in 'degree'
+     * where 0 is north, 90 is east, 180 is south and 270 is west.
      */
     double calcAzimuth( double lat1, double lon1, double lat2, double lon2 )
     {
         double orientation = -calcOrientation(lat1, lon1, lat2, lon2);
-        orientation = Helper.round4(orientation + Math.PI / 2);        
+        orientation = Helper.round4(orientation + Math.PI / 2);
         if (orientation < 0)
             orientation += 2 * Math.PI;
 
diff --git a/core/src/main/java/com/graphhopper/util/Instruction.java b/core/src/main/java/com/graphhopper/util/Instruction.java
index b4f43a4aaa..b5792db8c4 100644
--- a/core/src/main/java/com/graphhopper/util/Instruction.java
+++ b/core/src/main/java/com/graphhopper/util/Instruction.java
@@ -144,7 +144,7 @@ long fillGPXList( List<GPXEntry> list, long time,
         for (int i = 0; i < len; i++)
         {
             list.add(new GPXEntry(lat, lon, ele, prevTime));
-            
+
             boolean last = i + 1 == len;
             double nextLat = last ? nextInstr.getFirstLat() : points.getLatitude(i + 1);
             double nextLon = last ? nextInstr.getFirstLon() : points.getLongitude(i + 1);
@@ -175,12 +175,10 @@ public String toString()
     }
 
     /**
-     * Return Direction/Compass point based on the first tracksegment of the instruction. If
+     * Return the direction like 'NE' based on the first tracksegment of the instruction. If
      * Instruction does not contain enough coordinate points, an empty string will be returned.
-     * <p>
-     * @return
      */
-    String getDirection( Instruction nextI )
+    String calcDirection( Instruction nextI )
     {
         double azimuth = calcAzimuth(nextI);
         if (Double.isNaN(azimuth))
@@ -190,19 +188,10 @@ String getDirection( Instruction nextI )
     }
 
     /**
-     * Return Azimuth based on the first tracksegment of the instruction. If Instruction does not
-     * contain enough coordinate points, an empty string will be returned.
+     * Return the azimuth in degree based on the first tracksegment of the instruction. If
+     * Instruction does not contain enough coordinate points, an empty string will be returned.
      */
-    String getAzimuth( Instruction nextI )
-    {
-        double az = calcAzimuth(nextI);
-        if (Double.isNaN(az))
-            return "";
-
-        return "" + Math.round(az);
-    }
-
-    private double calcAzimuth( Instruction nextI )
+    public double calcAzimuth( Instruction nextI )
     {
         double nextLat;
         double nextLon;
@@ -211,7 +200,7 @@ private double calcAzimuth( Instruction nextI )
         {
             nextLat = points.getLatitude(1);
             nextLon = points.getLongitude(1);
-        } else if (points.getSize() == 1 && null != nextI)
+        } else if (nextI != null && points.getSize() == 1)
         {
             nextLat = nextI.points.getLatitude(0);
             nextLon = nextI.points.getLongitude(0);
diff --git a/core/src/main/java/com/graphhopper/util/InstructionList.java b/core/src/main/java/com/graphhopper/util/InstructionList.java
index 0bbae6b6d8..51eedba419 100644
--- a/core/src/main/java/com/graphhopper/util/InstructionList.java
+++ b/core/src/main/java/com/graphhopper/util/InstructionList.java
@@ -234,15 +234,15 @@ public String createGPX( String trackName, long startTimeMillis, String timeZone
         if (!isEmpty())
         {
             track.append("\n<rte>");
-            Instruction nextI = null;
-            for (Instruction instr : instructions)
+            Instruction nextInstr = null;
+            for (Instruction currInstr : instructions)
             {
-                if (null != nextI)
-                    createRteptBlock(track, nextI, instr);
+                if (null != nextInstr)
+                    createRteptBlock(track, nextInstr, currInstr);
 
-                nextI = instr;
+                nextInstr = currInstr;
             }
-            createRteptBlock(track, nextI, null);
+            createRteptBlock(track, nextInstr, null);
             track.append("</rte>");
         }
 
@@ -286,14 +286,15 @@ private void createRteptBlock( StringBuilder output, Instruction instruction, In
         output.append("<gh:distance>").append(Helper.round(instruction.getDistance(), 1)).append("</gh:distance>");
         output.append("<gh:time>").append(instruction.getTime()).append("</gh:time>");
 
-        String direction = instruction.getDirection(nextI);
+        String direction = instruction.calcDirection(nextI);
         if (!direction.isEmpty())
             output.append("<gh:direction>").append(direction).append("</gh:direction>");
 
-        String azimuth = instruction.getAzimuth(nextI);
-        if (!azimuth.isEmpty())
-            output.append("<gh:azimuth>").append(azimuth).append("</gh:azimuth>");
+        double azimuth = instruction.calcAzimuth(nextI);
+        if (!Double.isNaN(azimuth))
+            output.append("<gh:azimuth>").append(Helper.round2(azimuth)).append("</gh:azimuth>");
 
+        output.append("<gh:sign>").append(instruction.getSign()).append("</gh:sign>");
         output.append("</extensions>");
         output.append("</rtept>");
     }
diff --git a/core/src/test/java/com/graphhopper/util/AngleCalcTest.java b/core/src/test/java/com/graphhopper/util/AngleCalcTest.java
index 80d19d350a..e47b52da9d 100644
--- a/core/src/test/java/com/graphhopper/util/AngleCalcTest.java
+++ b/core/src/test/java/com/graphhopper/util/AngleCalcTest.java
@@ -52,6 +52,9 @@ public void testCombined()
     {
         double orientation = ac.calcOrientation(52.414918, 13.244221, 52.415333, 13.243595);
         assertEquals(146.5, Math.toDegrees(ac.alignOrientation(0, orientation)), 1);
+
+        orientation = ac.calcOrientation(52.414918, 13.244221, 52.414573, 13.243627);
+        assertEquals(-149.7, Math.toDegrees(ac.alignOrientation(0, orientation)), 1);
     }
 
     @Test
@@ -69,7 +72,7 @@ public void testAzimuthCompassPoint()
     {
         assertEquals("S", ac.azimuth2compassPoint(199));
     }
-    
+
     @Test
     public void testAtan2()
     {
diff --git a/core/src/test/java/com/graphhopper/util/InstructionListTest.java b/core/src/test/java/com/graphhopper/util/InstructionListTest.java
index dc7852d8ea..d86e375a8f 100644
--- a/core/src/test/java/com/graphhopper/util/InstructionListTest.java
+++ b/core/src/test/java/com/graphhopper/util/InstructionListTest.java
@@ -28,7 +28,6 @@
 import com.graphhopper.routing.util.*;
 import com.graphhopper.storage.*;
 import java.io.*;
-import java.net.URL;
 import java.util.*;
 import javax.xml.XMLConstants;
 import javax.xml.transform.Source;
@@ -38,8 +37,6 @@
 import javax.xml.validation.Validator;
 import org.junit.Test;
 import static org.junit.Assert.*;
-import org.w3c.dom.ls.LSInput;
-import org.w3c.dom.ls.LSResourceResolver;
 import org.xml.sax.SAXException;
 
 /**
@@ -339,9 +336,11 @@ public void testInstructionsWithTimeAndPlace()
         assertTrue(gpxStr, gpxStr.contains("<rtept lat=\"15.1\" lon=\"10.0\">"));
         assertTrue(gpxStr, gpxStr.contains("<gh:distance>8000.0</gh:distance>"));
         assertTrue(gpxStr, gpxStr.contains("<desc>turn left onto 2-3</desc>"));
+        assertTrue(gpxStr, gpxStr.contains("<gh:sign>-2</gh:sign>"));
 
         assertTrue(gpxStr, gpxStr.contains("<gh:direction>N</gh:direction>"));
-        assertTrue(gpxStr, gpxStr.contains("<gh:azimuth>0</gh:azimuth>"));
+        assertTrue(gpxStr, gpxStr.contains("<gh:azimuth>0.0</gh:azimuth>"));
+
         assertFalse(gpxStr, gpxStr.contains("NaN"));
     }
 
diff --git a/core/src/test/java/com/graphhopper/util/InstructionTest.java b/core/src/test/java/com/graphhopper/util/InstructionTest.java
index 0e7e4c52ef..f65170813b 100644
--- a/core/src/test/java/com/graphhopper/util/InstructionTest.java
+++ b/core/src/test/java/com/graphhopper/util/InstructionTest.java
@@ -27,45 +27,48 @@
 public class InstructionTest
 {
     @Test
-    public void testGetAzimuthAndGetDirection()
+    public void testCalcAzimuthAndGetDirection()
     {
         InstructionAnnotation ea = InstructionAnnotation.EMPTY;
         PointList pl = new PointList();
         pl.add(49.942, 11.584);
-        pl.add(49.942, 11.582);
-        Instruction i1 = new Instruction(Instruction.CONTINUE_ON_STREET, "temp", ea, pl).setDistance(240).setTime(15000);
+        
+        PointList nextPl = new PointList();
+        nextPl.add(49.942, 11.582);
+        Instruction currI = new Instruction(Instruction.CONTINUE_ON_STREET, "temp", ea, pl);
+        Instruction nextI = new Instruction(Instruction.CONTINUE_ON_STREET, "next", ea, nextPl);
 
-        assertEquals("270", i1.getAzimuth(null));
-        assertEquals("W", i1.getDirection(null));
+        assertEquals(270, currI.calcAzimuth(nextI), .1);
+        assertEquals("W", currI.calcDirection(nextI));
 
         PointList p2 = new PointList();
         p2.add(49.942, 11.580);
         p2.add(49.944, 11.582);
-        Instruction i2 = new Instruction(Instruction.CONTINUE_ON_STREET, "temp", ea, p2).setDistance(240).setTime(15000);
+        Instruction i2 = new Instruction(Instruction.CONTINUE_ON_STREET, "temp", ea, p2);
 
-        assertEquals("45", i2.getAzimuth(null));
-        assertEquals("NE", i2.getDirection(null));
+        assertEquals(45, i2.calcAzimuth(null), .1);
+        assertEquals("NE", i2.calcDirection(null));
 
         PointList p3 = new PointList();
         p3.add(49.942, 11.580);
         p3.add(49.944, 11.580);
-        Instruction i3 = new Instruction(Instruction.CONTINUE_ON_STREET, "temp", ea, p3).setDistance(240).setTime(15000);
+        Instruction i3 = new Instruction(Instruction.CONTINUE_ON_STREET, "temp", ea, p3);
 
-        assertEquals("0", i3.getAzimuth(null));
-        assertEquals("N", i3.getDirection(null));
+        assertEquals(0, i3.calcAzimuth(null), .1);
+        assertEquals("N", i3.calcDirection(null));
 
         PointList p4 = new PointList();
         p4.add(49.940, 11.580);
         p4.add(49.920, 11.586);
-        Instruction i4 = new Instruction(Instruction.CONTINUE_ON_STREET, "temp", ea, p4).setDistance(240).setTime(15000);
+        Instruction i4 = new Instruction(Instruction.CONTINUE_ON_STREET, "temp", ea, p4);
 
-        assertEquals("S", i4.getDirection(null));
+        assertEquals("S", i4.calcDirection(null));
 
         PointList p5 = new PointList();
         p5.add(49.940, 11.580);
-        Instruction i5 = new Instruction(Instruction.CONTINUE_ON_STREET, "temp", ea, p5).setDistance(240).setTime(15000);
+        Instruction i5 = new Instruction(Instruction.CONTINUE_ON_STREET, "temp", ea, p5);
 
-        assertEquals("", i5.getAzimuth(null));
-        assertEquals("", i5.getDirection(null));
+        assertTrue(Double.isNaN(i5.calcAzimuth(null)));
+        assertEquals("", i5.calcDirection(null));
     }
 }
