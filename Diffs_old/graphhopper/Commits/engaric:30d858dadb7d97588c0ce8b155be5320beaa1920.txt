diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/NearestPointServiceUtil.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/NearestPointServiceUtil.java
deleted file mode 100644
index 3eff543004..0000000000
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/NearestPointServiceUtil.java
+++ /dev/null
@@ -1,52 +0,0 @@
-package uk.co.ordnancesurvey.gpx.graphhopper;
-
-import java.io.IOException;
-
-import org.apache.commons.io.IOUtils;
-import org.apache.http.client.methods.CloseableHttpResponse;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import uk.co.ordnancesurvey.routing.GraphHopperUIUtil;
-
-import com.google.gson.JsonElement;
-import com.google.gson.JsonParser;
-import com.google.gson.JsonPrimitive;
-
-public class NearestPointServiceUtil {
-
-	private static final Logger LOG = LoggerFactory
-			.getLogger(NearestPointServiceUtil.class);
-
-	String jsonString;
-	GraphHopperUIUtil GPHopperUIUtil = new GraphHopperUIUtil();
-
-	public String getNearestPoint(String pointA) {
-
-		String nearestpoint = "";
-		StringBuffer sb = new StringBuffer();
-		if (IntegrationTestProperties.getTestPropertyBool("viaApigee")) {
-			sb.append(IntegrationTestProperties
-					.getTestProperty("graphHopperWebUrlViaApigee"));
-		} else {
-			sb.append(IntegrationTestProperties
-					.getTestProperty("graphHopperWebUrl"));
-		}
-
-		sb.append("nearest?point=");
-		sb.append(pointA);
-
-		GPHopperUIUtil.getRouteFromServiceWithParameters(sb);
-
-		nearestpoint = GPHopperUIUtil.getNearestPoint();
-
-		return nearestpoint;
-
-	}
-
-	public String getNearestPointDistance() {
-String distance= GPHopperUIUtil.getNearestPointDistance();
-		return distance.toString();
-	}
-
-}
diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
index 6bb909bd68..451418d013 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
@@ -8,7 +8,6 @@
 import org.junit.Assert;
 
 import uk.co.ordnancesurvey.gpx.graphhopper.IntegrationTestProperties;
-import uk.co.ordnancesurvey.gpx.graphhopper.NearestPointServiceUtil;
 import cucumber.api.DataTable;
 import cucumber.api.Scenario;
 import cucumber.api.java.After;
@@ -26,15 +25,12 @@
 	String instruction;
 	String nearestPoint = "";
 	String Distance = "";
-	String pointA;
 
 	DataTable routePointsTable;
 
-	NearestPointServiceUtil nearestPointUtil= new NearestPointServiceUtil();
-
-	@Before({"~@WebOnly","~@SampleScenario"})
+	@Before({ "~@WebOnly", "~@SampleScenario" })
 	public void init() {
-		
+
 		graphUiUtil = (IntegrationTestProperties
 				.getTestPropertyBool("viaApigee") == true) ? new GraphHopperUIUtil(
 				IntegrationTestProperties
@@ -60,8 +56,6 @@ public void rollBackTestONProperty() {
 
 	}
 
-	
-	
 	@Before("@ErrorMessages")
 	public void overrideTestONProperty() {
 
@@ -69,18 +63,19 @@ public void overrideTestONProperty() {
 		IntegrationTestProperties.setTestProperty("testON", "Service");
 	}
 
+	@Given("^My routing ([^\"]*) for nearestPoint API as \"([^\"]*)\"$")
+	public void I_have_route_point_for_Nearest_Point_API(String paramName,
+			String pointA) {
+		graphUiUtil.getNearestPoint(paramName, pointA);
 
-
-	@Given("^My routing point for nearestPoint API as \"([^\"]*)\"$")
-	public void I_have_route_point_for_Nearest_Point_API(String pointA) {
-		this.pointA = pointA;
 	}
 
 	@When("^I request a nearest point from from Nearest Point API$")
 	public void I_request_a_nearest_point_from_from_Nearest_Point_API() {
-		if (IntegrationTestProperties.getTestProperty("testON").equalsIgnoreCase("json")){
-		nearestPoint=nearestPointUtil.getNearestPoint(pointA);
-		Distance = nearestPointUtil.getNearestPointDistance();
+		if (IntegrationTestProperties.getTestProperty("testON")
+				.equalsIgnoreCase("Service")) {
+			nearestPoint = graphUiUtil.getNearestPoint();
+			Distance = graphUiUtil.getNearestPointDistance();
 		}
 
 	}
@@ -88,14 +83,15 @@ public void I_request_a_nearest_point_from_from_Nearest_Point_API() {
 	@Then("^I should be able to verify the nearest point to be \"([^\"]*)\" at a distance of \"([^\"]*)\"$")
 	public void I_should_be_able_to_verify_the_nearest_point_to_be(
 			String pointB, String distance) {
-		if (IntegrationTestProperties.getTestProperty("testON").equalsIgnoreCase("json")){
-		
-		Assert.assertTrue("******Expected nearest Point " + pointB
-				+ " is not matching with " + nearestPoint + "********",
-				pointB.equals(nearestPoint));
-		Assert.assertTrue("******Expected nearest Point distance " + distance
-				+ " is not matcching with " + Distance,
-				Distance.equals(distance));
+		if (IntegrationTestProperties.getTestProperty("testON")
+				.equalsIgnoreCase("json")) {
+
+			Assert.assertTrue("******Expected nearest Point " + pointB
+					+ " is not matching with " + nearestPoint + "********",
+					pointB.equals(nearestPoint));
+			Assert.assertTrue("******Expected nearest Point distance "
+					+ distance + " is not matcching with " + Distance,
+					Distance.equals(distance));
 		}
 
 	}
@@ -171,9 +167,10 @@ public void I_should_be_able_to_verify_the_response_message_as(
 		graphUiUtil.verifyErrorMessage(responseMessage);
 
 	}
-	
+
 	@Then("^I should be able to verify the http statuscode as \"([^\"]*)\"$")
-	public void I_should_be_able_to_verify_the_http_responseCode_as(int statusCode) {
+	public void I_should_be_able_to_verify_the_http_responseCode_as(
+			int statusCode) {
 
 		graphUiUtil.verifyHttpStatusCode(statusCode);
 
@@ -187,8 +184,6 @@ public void I_should_be_able_to_verify_the_http_response_message_as(
 
 	}
 
-	
-
 	@When("^I request for a route$")
 	public void I_request_for_route() {
 
@@ -224,14 +219,11 @@ public void I_request_for_route() {
 		}
 
 	}
-	
+
 	@And("^I request for HTTP \"([^\"]*)\" method$")
-	public void I_request_for_http_mehtod(String httpMethod)
-	{
+	public void I_request_for_http_mehtod(String httpMethod) {
 		graphUiUtil.setHTTPMethod(httpMethod);
 	}
-	
-	
 
 	@After("@SampleScenario")
 	public void I_should_be_able_to_capture_a_screenshot(Scenario sc)
diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
index c3d26794a3..fa315046d2 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
@@ -32,6 +32,7 @@
 import org.apache.http.client.methods.HttpDelete;
 import org.apache.http.client.methods.HttpEntityEnclosingRequestBase;
 import org.apache.http.client.methods.HttpGet;
+import org.apache.http.client.methods.HttpOptions;
 import org.apache.http.client.methods.HttpPost;
 import org.apache.http.client.methods.HttpPut;
 import org.apache.http.client.methods.HttpUriRequest;
@@ -795,6 +796,11 @@ CloseableHttpResponse doSendAndGetResponse(String serviceUrl)
 		
 		break;
 
+	case "OPTIONS":
+		
+		httpRequest = new HttpOptions(serviceUrl);
+		
+		break;
 	default:
 		httpRequest = new HttpGet(serviceUrl);
 		break;
@@ -1017,6 +1023,35 @@ public void verifyStatusCode(int statusCode) {
 	{
 		return requestParameters;
 	}
+	
+	
+	public void getNearestPoint(String paramName,String pointA) {
+
+		String nearestpoint = "";
+		StringBuffer sb = new StringBuffer();
+		if (IntegrationTestProperties.getTestPropertyBool("viaApigee")) {
+			sb.append(IntegrationTestProperties
+					.getTestProperty("graphHopperWebUrlViaApigee"));
+		} else {
+			sb.append(IntegrationTestProperties
+					.getTestProperty("graphHopperWebUrl"));
+		}
+
+		sb.append("nearest?");
+		sb.append(paramName+"=");
+		sb.append(pointA);
+
+		getRouteFromServiceWithParameters(sb);
+
+	//	nearestpoint = getNearestPoint();
+		
+
+		//return nearestpoint;
+
+	}
+
+
+	
 	public String getNearestPoint() {
 
 		return GPHJSONUtil.getNearestPoint();
@@ -1045,5 +1080,11 @@ public void verifyHttpErrorMessage(String responseMessage) {
 		
 	}
 
+	public void setPointForNearest(String paramName, String pointA) {
+		
+	
+		
+	}
+
 	
 }
diff --git a/acceptancetesting/src/test/cucumber/DPNRouting.feature b/acceptancetesting/src/test/cucumber/DPNRouting.feature
index bd521a8a6b..d25afd07e7 100644
--- a/acceptancetesting/src/test/cucumber/DPNRouting.feature
+++ b/acceptancetesting/src/test/cucumber/DPNRouting.feature
@@ -557,7 +557,7 @@ Feature: Verify a route from A to B
       | vehicleType  | avoidances | routeType |
       | mountainbike |            |           |
 
-  @Routing 
+  @Routing @Demo
   Scenario Outline: Verify DPN Route with avoidance -(A Road)
     Given I have route point as
       | pointA              | pointB              |
diff --git a/acceptancetesting/src/test/cucumber/Routing-Errors.feature b/acceptancetesting/src/test/cucumber/Routing-Errors.feature
index b060e1092a..2489246400 100644
--- a/acceptancetesting/src/test/cucumber/Routing-Errors.feature
+++ b/acceptancetesting/src/test/cucumber/Routing-Errors.feature
@@ -1,4 +1,4 @@
-Feature: Verify Error Messages from a routing service for invalid routing requests
+Feature: Verify Error Messages from a routing service
    As a user
    I want to get a valid Error message and status code for a invalid route request
 
@@ -27,7 +27,7 @@ Feature: Verify Error Messages from a routing service for invalid routing reques
       | 2             | 50.729205,-3.523206 | Turn right onto WELL STREET | 210.0   | SW        | 4050 | 112.5    |           |
 
   # Parameter :  vehicle
-   @ErrorMessages @Demo
+   @ErrorMessages 
   Scenario Outline: Incorrect Parameter Value for "Vehicle"
     Given I have route point as
       | pointA              | pointB              |
@@ -557,13 +557,12 @@ Feature: Verify Error Messages from a routing service for invalid routing reques
   # Nearest Point : Invalid Parameter Value "point"
    @ErrorMessages @Current
   Scenario Outline: Verify  nearest point of point using NearestPoint API
-    Given My routing points for nearestPoint API as "<pointA>"
-    And I have type as "<responseFormat>"
-    When I request a nearest point from from Nearest Point API
+    Given I have type as "<responseFormat>"
+    And My routing points for nearestPoint API as "<pointA>"
     Then I should be able to verify the response message as "<errorMessage>"
     Then I should be able to verify the statuscode as "<statusCode>"
 
-    #  Then I should be able to verify the http response message as "<errorMessage>"
+    #  Then I should be able to verify the http response message as "<httpErrorMessage>"
     #Then I should be able to verify the http statuscode as "<statusCode>"
     Examples: 
       | pointA              | errorMessage | responseFormat | statusCode |
diff --git a/acceptancetesting/src/test/cucumber/routing.feature b/acceptancetesting/src/test/cucumber/routing.feature
index 91ff515b2f..d4fc243f31 100644
--- a/acceptancetesting/src/test/cucumber/routing.feature
+++ b/acceptancetesting/src/test/cucumber/routing.feature
@@ -651,7 +651,8 @@ Feature: Verify a route from A to B
 
   @Routing
   Scenario Outline: Verify  nearest point of point using NearestPoint API
-    Given My routing point for nearestPoint API as "<pointA>"
+    Given I have type as "<responseFormat>"
+    And My routing point for nearestPoint API as "<pointA>"
     When I request a nearest point from from Nearest Point API
     Then I should be able to verify the nearest point to be "<pointB>" at a distance of "<distance>"
 
@@ -909,7 +910,7 @@ Feature: Verify a route from A to B
       | vehicleType | avoidances | routeType |
       | car         |            | fastest   |
 
-  @Routing @Current
+  @Routing
   Scenario Outline: Verify  Route using 2 intermediate waypoints (Oxford to LONDON )
     Given I have route point as
       | pointA              | pointB              | pointC             | pointD              |
