diff --git a/core/src/main/java/com/graphhopper/GraphHopper.java b/core/src/main/java/com/graphhopper/GraphHopper.java
index 850ddb8399..ddfd789c08 100644
--- a/core/src/main/java/com/graphhopper/GraphHopper.java
+++ b/core/src/main/java/com/graphhopper/GraphHopper.java
@@ -924,39 +924,44 @@ public Weighting createWeighting( WeightingMap weightingMap, FlagEncoder encoder
 		String weighting = weightingMap.getWeighting();
 		Weighting result;
 
+		String avoidanceString = weightingMap.get("avoidances","");
+		System.err.println("AVOID:" + avoidanceString);
+		boolean avoidancesEnabled = avoidanceString.length()>0;
 		if ("shortest".equalsIgnoreCase(weighting))
 		{
-			result = new ShortestWeighting();
-		} else if ("fastest".equalsIgnoreCase(weighting) || weighting.isEmpty())
-		{
-			if (encoder.supports(PriorityWeighting.class))
-				result = new PriorityWeighting(encoder);
-			else
-				result = new FastestWeighting(encoder);
-		} else if ("fastavoid".equalsIgnoreCase(weighting))
-		{
-			String avoidanceString = weightingMap.get("avoidances", "cliff");
-			String[] avoidances = avoidanceString.split(",");
-			if (encoder.supports(PriorityWeighting.class))
-			{
-				AvoidanceAttributeExtension avoidanceExtension = (AvoidanceAttributeExtension) graph
-						.getExtension();
-				result = new PriorityWithAvoidancesWeighting(encoder, avoidanceExtension,
-						avoidances);
-			} else
-			{
+			if(avoidancesEnabled) {
 				AvoidanceAttributeExtension avoidanceExtension = (AvoidanceAttributeExtension) graph
 						.getExtension();
-				result = new FastestWithAvoidancesWeighting(encoder, avoidanceExtension, avoidances);
+				String[] avoidances = avoidanceString.split(",");
+				result = new ShortestWithAvoidancesWeighting(encoder, avoidanceExtension, avoidances);
+			} else {
+				result = new ShortestWeighting();
 			}
-		} else if ("shortavoid".equalsIgnoreCase(weighting))
+		} else if ("fastest".equalsIgnoreCase(weighting) || weighting.isEmpty())
 		{
-			AvoidanceAttributeExtension avoidanceExtension = (AvoidanceAttributeExtension) graph
-					.getExtension();
-			String avoidanceString = weightingMap.get("avoidances", "cliff");
-			String[] avoidances = avoidanceString.split(",");
-			result = new ShortestWithAvoidancesWeighting(encoder, avoidanceExtension, avoidances);
-		} else
+			if (encoder.supports(PriorityWeighting.class)) {
+				if(avoidancesEnabled) {
+					AvoidanceAttributeExtension avoidanceExtension = (AvoidanceAttributeExtension) graph
+							.getExtension();
+					String[] avoidances = avoidanceString.split(",");
+					result = new PriorityWithAvoidancesWeighting(encoder, avoidanceExtension, avoidances);
+				}
+				else {
+					result = new PriorityWeighting(encoder);
+				}
+			}
+			else {
+				if(avoidancesEnabled) {
+					AvoidanceAttributeExtension avoidanceExtension = (AvoidanceAttributeExtension) graph
+							.getExtension();
+					String[] avoidances = avoidanceString.split(",");
+					result = new FastestWithAvoidancesWeighting(encoder, avoidanceExtension,
+							avoidances);
+				} else {
+					result = new FastestWeighting(encoder);
+				}
+			}
+		}  else
 		{
 			throw new UnsupportedOperationException(
 					"Weighting "
diff --git a/core/src/test/java/com/graphhopper/GraphHopperTest.java b/core/src/test/java/com/graphhopper/GraphHopperTest.java
index 8f078d918d..b988b22ead 100644
--- a/core/src/test/java/com/graphhopper/GraphHopperTest.java
+++ b/core/src/test/java/com/graphhopper/GraphHopperTest.java
@@ -22,6 +22,7 @@
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
+import static org.mockito.Mockito.when;
 
 import java.io.File;
 import java.io.IOException;
@@ -32,11 +33,24 @@
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
+import org.mockito.Mockito;
 
 import com.graphhopper.reader.DataReader;
 import com.graphhopper.routing.AlgorithmOptions;
 import com.graphhopper.routing.util.EdgeFilter;
 import com.graphhopper.routing.util.EncodingManager;
+import com.graphhopper.routing.util.FastestWeighting;
+import com.graphhopper.routing.util.FastestWithAvoidancesWeighting;
+import com.graphhopper.routing.util.FlagEncoder;
+import com.graphhopper.routing.util.PriorityWeighting;
+import com.graphhopper.routing.util.PriorityWithAvoidancesWeighting;
+import com.graphhopper.routing.util.ShortestWeighting;
+import com.graphhopper.routing.util.ShortestWithAvoidancesWeighting;
+import com.graphhopper.routing.util.Weighting;
+import com.graphhopper.routing.util.WeightingMap;
+import com.graphhopper.storage.AvoidanceAttributeExtension;
+import com.graphhopper.storage.GraphExtension;
+import com.graphhopper.storage.GraphStorage;
 import com.graphhopper.storage.index.QueryResult;
 import com.graphhopper.util.CmdArgs;
 import com.graphhopper.util.Helper;
@@ -543,4 +557,60 @@ public void testVia()
         assertEquals(5, rsp.getInstructions().size());
         assertEquals(Instruction.REACHED_VIA, rsp.getInstructions().get(1).getSign());
     }
+    
+    @Test
+    public void testCreateWeightingWithoutPriority() {
+    	instance = new GraphHopper();
+        GraphStorage graph = Mockito.mock(GraphStorage.class);
+		instance.setGraph(graph );
+        GraphExtension avoidanceExtension = Mockito.mock(AvoidanceAttributeExtension.class);
+		when(graph.getExtension()).thenReturn(avoidanceExtension );
+        FlagEncoder encoder = Mockito.mock(FlagEncoder.class);
+		WeightingMap weightingMap = new WeightingMap("fastest");
+		Weighting createdWeighting = instance.createWeighting(weightingMap , encoder );
+		assertEquals(FastestWeighting.class, createdWeighting.getClass());
+		
+		weightingMap = new WeightingMap("shortest");
+		createdWeighting = instance.createWeighting(weightingMap , encoder );
+		assertEquals(ShortestWeighting.class, createdWeighting.getClass());
+		
+		weightingMap = new WeightingMap("fastest").put("avoidances", "cliff");
+		System.err.println("WEIGHTING" + weightingMap.get("avoidances", ""));
+		createdWeighting = instance.createWeighting(weightingMap , encoder );
+		assertEquals(FastestWithAvoidancesWeighting.class, createdWeighting.getClass());
+    
+		
+		weightingMap = new WeightingMap("shortest").put("avoidances", "cliff");
+		createdWeighting = instance.createWeighting(weightingMap , encoder );
+		assertEquals(ShortestWithAvoidancesWeighting.class, createdWeighting.getClass());
+    }
+    
+    @Test
+    public void testCreateWeightingWithPriority() {
+    	instance = new GraphHopper();
+        GraphStorage graph = Mockito.mock(GraphStorage.class);
+		instance.setGraph(graph );
+        GraphExtension avoidanceExtension = Mockito.mock(AvoidanceAttributeExtension.class);
+		when(graph.getExtension()).thenReturn(avoidanceExtension );
+        FlagEncoder encoder = Mockito.mock(FlagEncoder.class);
+        
+        when(encoder.supports(PriorityWeighting.class)).thenReturn(true);
+		WeightingMap weightingMap = new WeightingMap("fastest");
+		Weighting createdWeighting = instance.createWeighting(weightingMap , encoder );
+		assertEquals(PriorityWeighting.class, createdWeighting.getClass());
+		
+		weightingMap = new WeightingMap("shortest");
+		createdWeighting = instance.createWeighting(weightingMap , encoder );
+		assertEquals(ShortestWeighting.class, createdWeighting.getClass());
+		
+		weightingMap = new WeightingMap("fastest").put("avoidances", "cliff");
+		System.err.println("WEIGHTING" + weightingMap.get("avoidances", ""));
+		createdWeighting = instance.createWeighting(weightingMap , encoder );
+		assertEquals(PriorityWithAvoidancesWeighting.class, createdWeighting.getClass());
+    
+		
+		weightingMap = new WeightingMap("shortest").put("avoidances", "cliff");
+		createdWeighting = instance.createWeighting(weightingMap , encoder );
+		assertEquals(ShortestWithAvoidancesWeighting.class, createdWeighting.getClass());
+    }
 }
diff --git a/web/src/main/webapp/js/ghrequest.js b/web/src/main/webapp/js/ghrequest.js
index 5e8c5d4535..9bf52c8cb7 100644
--- a/web/src/main/webapp/js/ghrequest.js
+++ b/web/src/main/webapp/js/ghrequest.js
@@ -453,12 +453,6 @@ GHRequest.prototype.createPath = function (url) {
     	this.weighting = "fastest";
     }
     if(checkedValue.length>0) {
-    	if(this.weighting==="fastest") {
-    		this.weighting = "fastavoid";
-    	}
-    	else {
-    		this.weighting="shortavoid";
-    	}
     	url += "&avoidances=" + checkedValue;
     }
     
