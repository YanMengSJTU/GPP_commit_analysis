diff --git a/web/src/main/java/com/graphhopper/http/GHBaseServlet.java b/web/src/main/java/com/graphhopper/http/GHBaseServlet.java
index 40bcf716c4..20b73f871a 100644
--- a/web/src/main/java/com/graphhopper/http/GHBaseServlet.java
+++ b/web/src/main/java/com/graphhopper/http/GHBaseServlet.java
@@ -21,6 +21,10 @@
 import static javax.servlet.http.HttpServletResponse.SC_OK;
 
 import java.io.IOException;
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
 
 import javax.inject.Inject;
 import javax.inject.Named;
@@ -28,117 +32,201 @@
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
+import org.eclipse.jetty.http.HttpStatus;
 import org.json.JSONException;
 import org.json.JSONObject;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.graphhopper.GHResponse;
+import com.graphhopper.util.shapes.GHPoint;
+
 /**
  * @author Peter Karich
  */
-public class GHBaseServlet extends HttpServlet {
-    protected static Logger logger = LoggerFactory.getLogger(GHBaseServlet.class);
-    @Inject
-    @Named("jsonpAllowed")
-    protected boolean jsonpAllowed;
-
-    protected void writeJson(HttpServletRequest req, HttpServletResponse res, JSONObject json) throws JSONException,
-            IOException {
-        String type = getParam(req, "type", "json");
-        res.setCharacterEncoding("UTF-8");
-        boolean debug = getBooleanParam(req, "debug", false) || getBooleanParam(req, "pretty", false);
-        if ("jsonp".equals(type)) {
-            res.setContentType("application/javascript");
-            if (!jsonpAllowed) {
-                writeError(res, SC_BAD_REQUEST, "Server is not configured to allow jsonp!");
-                return;
-            }
-
-            String callbackName = getParam(req, "callback", null);
-            if (callbackName == null) {
-                writeError(res, SC_BAD_REQUEST, "No callback provided, necessary if type=jsonp");
-                return;
-            }
-
-            if (debug)
-                writeResponse(res, callbackName + "(" + json.toString(2) + ")");
-            else
-                writeResponse(res, callbackName + "(" + json.toString() + ")");
-
-        } else {
-            res.setContentType("application/json");
-            if (debug)
-                writeResponse(res, json.toString(2));
-            else
-                writeResponse(res, json.toString());
-        }
-    }
-
-    protected void writeError(HttpServletResponse res, int code, String message) {
-        JSONObject json = new JSONObject();
-        json.put("message", message);
-        writeJsonError(res, code, json);
-    }
-
-    protected void writeJsonError(HttpServletResponse res, int code, JSONObject json) {
-        try {
-            // no type parameter check here as jsonp does not work if an error
-            // also no debug parameter yet
-            res.setContentType("application/json");
-            res.setCharacterEncoding("UTF-8");
-            res.setStatus(code);
-            res.getWriter().append(json.toString(2));
-        } catch (IOException ex) {
-            logger.error("Cannot write error " + ex.getMessage());
-        }
-    }
-
-    protected String getParam(HttpServletRequest req, String string, String _default) {
-        String[] l = req.getParameterMap().get(string);
-        if (l != null && l.length > 0)
-            return l[0];
-
-        return _default;
-    }
-
-    protected String[] getParams(HttpServletRequest req, String string) {
-        String[] l = req.getParameterMap().get(string);
-        if (l != null && l.length > 0) {
-            return l;
-        }
-        return new String[0];
-    }
-
-    protected long getLongParam(HttpServletRequest req, String string, long _default) {
-        try {
-            return Long.parseLong(getParam(req, string, "" + _default));
-        } catch (Exception ex) {
-            return _default;
-        }
-    }
-
-    protected boolean getBooleanParam(HttpServletRequest req, String string, boolean _default) {
-        try {
-            return Boolean.parseBoolean(getParam(req, string, "" + _default));
-        } catch (Exception ex) {
-            return _default;
-        }
-    }
-
-    protected double getDoubleParam(HttpServletRequest req, String string, double _default) {
-        try {
-            return Double.parseDouble(getParam(req, string, "" + _default));
-        } catch (Exception ex) {
-            return _default;
-        }
-    }
-
-    public void writeResponse(HttpServletResponse res, String str) {
-        try {
-            res.setStatus(SC_OK);
-            res.getWriter().append(str);
-        } catch (IOException ex) {
-            logger.error("Cannot write message:" + str, ex);
-        }
-    }
+public class GHBaseServlet extends HttpServlet
+{
+	protected static Logger logger = LoggerFactory.getLogger(GHBaseServlet.class);
+	@Inject
+	@Named("jsonpAllowed")
+	protected boolean jsonpAllowed;
+
+	protected void writeJson( HttpServletRequest req, HttpServletResponse res, JSONObject json )
+			throws JSONException, IOException
+	{
+		String type = getParam(req, "type", "json");
+		res.setCharacterEncoding("UTF-8");
+		boolean debug = getBooleanParam(req, "debug", false)
+				|| getBooleanParam(req, "pretty", false);
+		if ("jsonp".equals(type))
+		{
+			res.setContentType("application/javascript");
+			if (!jsonpAllowed)
+			{
+				writeError(res, SC_BAD_REQUEST, "Server is not configured to allow jsonp!");
+				return;
+			}
+
+			String callbackName = getParam(req, "callback", null);
+			if (callbackName == null)
+			{
+				writeError(res, SC_BAD_REQUEST, "No callback provided, necessary if type=jsonp");
+				return;
+			}
+
+			if (debug)
+				writeResponse(res, callbackName + "(" + json.toString(2) + ")");
+			else
+				writeResponse(res, callbackName + "(" + json.toString() + ")");
+
+		} else
+		{
+			res.setContentType("application/json");
+			if (debug)
+				writeResponse(res, json.toString(2));
+			else
+				writeResponse(res, json.toString());
+		}
+	}
+
+	protected void writeError( HttpServletResponse res, int code, String message )
+	{
+		JSONObject json = new JSONObject();
+		json.put("message", message);
+		writeJsonError(res, code, json);
+	}
+
+	protected void writeJsonError( HttpServletResponse res, int code, JSONObject json )
+	{
+		try
+		{
+			// no type parameter check here as jsonp does not work if an error
+			// also no debug parameter yet
+			res.setContentType("application/json");
+			res.setCharacterEncoding("UTF-8");
+			res.setStatus(code);
+			res.getWriter().append(json.toString(2));
+		} catch (IOException ex)
+		{
+			logger.error("Cannot write error " + ex.getMessage());
+		}
+	}
+
+	protected String getParam( HttpServletRequest req, String string, String _default )
+	{
+		String[] l = req.getParameterMap().get(string);
+		if (l != null && l.length > 0)
+			return l[0];
+
+		return _default;
+	}
+
+	protected String[] getParams( HttpServletRequest req, String string )
+	{
+		String[] l = req.getParameterMap().get(string);
+		if (l != null && l.length > 0)
+		{
+			return l;
+		}
+		return new String[0];
+	}
+
+	protected long getLongParam( HttpServletRequest req, String string, long _default )
+	{
+		try
+		{
+			return Long.parseLong(getParam(req, string, "" + _default));
+		} catch (Exception ex)
+		{
+			return _default;
+		}
+	}
+
+	protected boolean getBooleanParam( HttpServletRequest req, String string, boolean _default )
+	{
+		try
+		{
+			return Boolean.parseBoolean(getParam(req, string, "" + _default));
+		} catch (Exception ex)
+		{
+			return _default;
+		}
+	}
+
+	protected double getDoubleParam( HttpServletRequest req, String string, double _default )
+	{
+		try
+		{
+			return Double.parseDouble(getParam(req, string, "" + _default));
+		} catch (Exception ex)
+		{
+			return _default;
+		}
+	}
+
+	protected List<GHPoint> getPoints( HttpServletRequest req, String key )
+			throws InvalidParameterException
+			{
+		String[] pointsAsStr = getParams(req, key);
+		final List<GHPoint> infoPoints = new ArrayList<GHPoint>(pointsAsStr.length);
+		for (String str : pointsAsStr)
+		{
+			GHPoint point = GHPoint.parse(str);
+			if (point != null)
+			{
+				infoPoints.add(point);
+			} else
+			{
+				throw new InvalidParameterException(
+						"Point "
+								+ str
+								+ " is not a valid point. Point must be a comma separated coordinate in WGS84 projection.");
+			}
+		}
+
+		return infoPoints;
+			}
+
+	protected void processResponseErrors( GHResponse rsp, Map<String, Object> json,
+	        boolean internalErrorsAllowed )
+	{
+		if (rsp.hasErrors())
+		{
+			Map<String, String> map = new HashMap<String, String>();
+			json.put("error", map);
+			Throwable throwable = rsp.getErrors().get(0);
+			map.put("message", throwable.getMessage());
+			String statusCode = "" + HttpStatus.BAD_REQUEST_400;
+			if (throwable instanceof APIException)
+			{
+				statusCode = "" + ((APIException) throwable).getStatusCode().getCode();
+				logger.error("Unhandled exception, defaulting it to 400");
+			}
+			map.put("statuscode", statusCode);
+			List<Map<String, String>> list = new ArrayList<Map<String, String>>();
+			for (Throwable t : rsp.getErrors())
+			{
+				Map<String, String> hintMap = new HashMap<String, String>();
+				hintMap.put("message", t.getMessage());
+				if (internalErrorsAllowed)
+				{
+					hintMap.put("details", t.getClass().getName());
+				}
+				list.add(hintMap);
+			}
+			json.put("hints", list);
+		}
+	}
+
+	public void writeResponse( HttpServletResponse res, String str )
+	{
+		try
+		{
+			res.setStatus(SC_OK);
+			res.getWriter().append(str);
+		} catch (IOException ex)
+		{
+			logger.error("Cannot write message:" + str, ex);
+		}
+	}
 }
diff --git a/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java b/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
index bca5d235ea..553ff0db92 100644
--- a/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
+++ b/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
@@ -41,7 +41,6 @@
 import javax.xml.transform.dom.DOMSource;
 import javax.xml.transform.stream.StreamResult;
 
-import org.eclipse.jetty.http.HttpStatus;
 import org.json.JSONObject;
 import org.w3c.dom.Document;
 import org.w3c.dom.Element;
@@ -123,12 +122,12 @@ public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes )
 				String errMesg = buildErrorMessageString(localeStr, "locale",
 						TranslationMap.LOCALES);
 				ghRsp = new GHResponse()
-				        .addError(new InvalidParameterException(errMesg.toString()));
+				.addError(new InvalidParameterException(errMesg.toString()));
 			} else if (null != algoStr
-			        && !new CaseInsensitiveStringListValidator().isValid(algoStr,
-			                AlgorithmOptions.ASTAR, AlgorithmOptions.ASTAR_BI,
-			                AlgorithmOptions.DIJKSTRA, AlgorithmOptions.DIJKSTRA_BI,
-			                AlgorithmOptions.DIJKSTRA_ONE_TO_MANY))
+					&& !new CaseInsensitiveStringListValidator().isValid(algoStr,
+							AlgorithmOptions.ASTAR, AlgorithmOptions.ASTAR_BI,
+							AlgorithmOptions.DIJKSTRA, AlgorithmOptions.DIJKSTRA_BI,
+							AlgorithmOptions.DIJKSTRA_ONE_TO_MANY))
 			{
 				String errMesg = buildErrorMessageString(algoStr, "algorithm",
 						AlgorithmOptions.ASTAR, AlgorithmOptions.ASTAR_BI,
@@ -201,9 +200,9 @@ public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes )
 						if (!allowedAvoidances.contains(avoidance.trim()))
 						{
 							String errMesg = buildErrorMessageString(avoidance, "avoidances",
-							        allowedAvoidances);
+									allowedAvoidances);
 							ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg
-							        .toString()));
+									.toString()));
 						}
 					}
 				}
@@ -319,7 +318,7 @@ protected String createGPXString( HttpServletRequest req, HttpServletResponse re
 			return rsp.getInstructions().createGPX(trackName, time, includeElevation);
 	}
 
-	String errorsToXML( List<Throwable> list )
+	private String errorsToXML( List<Throwable> list )
 	{
 		try
 		{
@@ -372,29 +371,7 @@ String errorsToXML( List<Throwable> list )
 
 		if (rsp.hasErrors())
 		{
-			Map<String, String> map = new HashMap<String, String>();
-			json.put("error", map);
-			Throwable throwable = rsp.getErrors().get(0);
-			map.put("message", throwable.getMessage());
-			String statusCode = "" + HttpStatus.BAD_REQUEST_400;
-			if (throwable instanceof APIException)
-			{
-				statusCode = "" + ((APIException) throwable).getStatusCode().getCode();
-				logger.error("Unhandled exception, defaulting it to 400");
-			}
-			map.put("statuscode", statusCode);
-			List<Map<String, String>> list = new ArrayList<Map<String, String>>();
-			for (Throwable t : rsp.getErrors())
-			{
-				Map<String, String> hintMap = new HashMap<String, String>();
-				hintMap.put("message", t.getMessage());
-				if (internalErrorsAllowed)
-				{
-					hintMap.put("details", t.getClass().getName());
-				}
-				list.add(hintMap);
-			}
-			json.put("hints", list);
+			processResponseErrors(rsp, json, internalErrorsAllowed);
 		} else
 		{
 			Map<String, Object> jsonInfo = new HashMap<String, Object>();
@@ -443,29 +420,6 @@ protected Object createPoints( PointList points, boolean pointsEncoded, boolean
 		return jsonPoints;
 	}
 
-	protected List<GHPoint> getPoints( HttpServletRequest req, String key )
-	        throws InvalidParameterException
-	{
-		String[] pointsAsStr = getParams(req, key);
-		final List<GHPoint> infoPoints = new ArrayList<GHPoint>(pointsAsStr.length);
-		for (String str : pointsAsStr)
-		{
-			GHPoint point = GHPoint.parse(str);
-			if (point != null)
-			{
-				infoPoints.add(point);
-			} else
-			{
-				throw new InvalidParameterException(
-				        "Point "
-				                + str
-				                + " is not a valid point. Point must be a comma separated coordinate in WGS84 projection.");
-			}
-		}
-
-		return infoPoints;
-	}
-
 	protected void initHints( GHRequest request, Map<String, String[]> parameterMap )
 	{
 		WeightingMap m = request.getHints();
diff --git a/web/src/main/java/com/graphhopper/http/NearestServlet.java b/web/src/main/java/com/graphhopper/http/NearestServlet.java
index 5696fce229..0d55b97015 100644
--- a/web/src/main/java/com/graphhopper/http/NearestServlet.java
+++ b/web/src/main/java/com/graphhopper/http/NearestServlet.java
@@ -1,14 +1,14 @@
 /*
  *  Licensed to GraphHopper and Peter Karich under one or more contributor
- *  license agreements. See the NOTICE file distributed with this work for 
+ *  license agreements. See the NOTICE file distributed with this work for
  *  additional information regarding copyright ownership.
- * 
- *  GraphHopper licenses this file to you under the Apache License, 
- *  Version 2.0 (the "License"); you may not use this file except in 
+ *
+ *  GraphHopper licenses this file to you under the Apache License,
+ *  Version 2.0 (the "License"); you may not use this file except in
  *  compliance with the License. You may obtain a copy of the License at
- * 
+ *
  *       http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  *  Unless required by applicable law or agreed to in writing, software
  *  distributed under the License is distributed on an "AS IS" BASIS,
  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -17,6 +17,23 @@
  */
 package com.graphhopper.http;
 
+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;
+
+import java.io.IOException;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import javax.inject.Inject;
+import javax.inject.Named;
+import javax.servlet.ServletException;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+
+import org.json.JSONArray;
+import org.json.JSONObject;
+
+import com.graphhopper.GHResponse;
 import com.graphhopper.GraphHopper;
 import com.graphhopper.routing.util.EdgeFilter;
 import com.graphhopper.storage.index.LocationIndex;
@@ -25,62 +42,75 @@
 import com.graphhopper.util.Helper;
 import com.graphhopper.util.shapes.GHPoint;
 import com.graphhopper.util.shapes.GHPoint3D;
-import org.json.JSONArray;
-import org.json.JSONObject;
-
-import javax.inject.Inject;
-import javax.servlet.ServletException;
-import javax.servlet.http.HttpServletRequest;
-import javax.servlet.http.HttpServletResponse;
-import java.io.IOException;
 
 /**
  * @author svantulden
  */
 public class NearestServlet extends GHBaseServlet
 {
-    @Inject
-    private GraphHopper hopper;
-    private final DistanceCalc calc = Helper.DIST_EARTH;
-
-    @Override
-    public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes ) throws ServletException, IOException
-    {
-        String pointStr = getParam(httpReq, "point", null);
-        boolean enabledElevation = getBooleanParam(httpReq, "elevation", false);
-
-        JSONObject result = new JSONObject();
-        if (pointStr != null && !pointStr.equalsIgnoreCase(""))
-        {
-            GHPoint place = GHPoint.parse(pointStr);
-            LocationIndex index = hopper.getLocationIndex();
-            QueryResult qr = index.findClosest(place.lat, place.lon, EdgeFilter.ALL_EDGES);
-
-            if (!qr.isValid())
-            {
-                result.put("error", "Nearest point cannot be found!");
-            } else
-            {
-                GHPoint3D snappedPoint = qr.getSnappedPoint();
-                result.put("type", "Point");
-
-                JSONArray coord = new JSONArray();
-                coord.put(snappedPoint.lon);
-                coord.put(snappedPoint.lat);
-
-                if (hopper.hasElevation() && enabledElevation)
-                    coord.put(snappedPoint.ele);
-
-                result.put("coordinates", coord);
-
-                // Distance from input to snapped point in meters
-                result.put("distance", calc.calcDist(place.lat, place.lon, snappedPoint.lat, snappedPoint.lon));
-            }
-        } else
-        {
-            result.put("error", "No lat/lon specified!");
-        }
-
-        writeJson(httpReq, httpRes, result);
-    }
+	@Inject
+	private GraphHopper hopper;
+
+	@Named("internalErrorsAllowed")
+	private boolean internalErrorsAllowed;
+
+	private final DistanceCalc calc = Helper.DIST_EARTH;
+
+	@Override
+	public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes )
+	        throws ServletException, IOException
+	{
+		GHResponse ghRsp = null;
+		Map<String, Object> map = new HashMap<>();
+		try
+		{
+			ApiResource.NEAREST.checkAllRequestParameters(httpReq);
+
+			List<GHPoint> infoPoints = getPoints(httpReq, "point");
+			if (infoPoints.size() > 1)
+			{
+				throw new InvalidParameterException(
+				        "Only one point should be specified and it must be a comma separated coordinate in WGS84 projection.");
+			}
+
+			boolean enabledElevation = getBooleanParam(httpReq, "elevation", false);
+
+			GHPoint place = infoPoints.get(0);
+			LocationIndex index = hopper.getLocationIndex();
+			QueryResult qr = index.findClosest(place.lat, place.lon, EdgeFilter.ALL_EDGES);
+			if (!qr.isValid())
+			{
+				map.put("error", "Nearest point cannot be found!");
+			} else
+			{
+				GHPoint3D snappedPoint = qr.getSnappedPoint();
+				map.put("type", "Point");
+
+				JSONArray coord = new JSONArray();
+				coord.put(snappedPoint.lon);
+				coord.put(snappedPoint.lat);
+
+				if (hopper.hasElevation() && enabledElevation)
+					coord.put(snappedPoint.ele);
+
+				map.put("coordinates", coord);
+
+				// Distance from input to snapped point in meters
+				map.put("distance",
+				        calc.calcDist(place.lat, place.lon, snappedPoint.lat, snappedPoint.lon));
+			}
+		} catch (NoSuchParameterException | MissingParameterException | InvalidParameterException e)
+		{
+			ghRsp = new GHResponse().addError(e);
+		}
+
+		if (ghRsp == null || ghRsp.hasErrors())
+		{
+			processResponseErrors(ghRsp, map, internalErrorsAllowed);
+			writeJsonError(httpRes, SC_BAD_REQUEST, new JSONObject(map));
+		} else
+		{
+			writeJson(httpReq, httpRes, new JSONObject(map));
+		}
+	}
 }
