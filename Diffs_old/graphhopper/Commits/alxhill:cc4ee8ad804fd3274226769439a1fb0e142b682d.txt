diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetHopper.java b/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetHopper.java
index 62a9784b3c..809ca81397 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetHopper.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetHopper.java
@@ -93,18 +93,20 @@ public boolean timestep()
 
     public synchronized boolean timestep(boolean webMode)
     {
+        long startTimestep = System.nanoTime();
         if (isPaused || vehicles.size() == 0)
             return false;
 
-        vehicles.stream().forEach(Vehicle::accelerationStep);
-        vehicles.stream().forEach(Vehicle::slowStep);
-        vehicles.stream().forEach(Vehicle::randomStep);
-        vehicles.stream().forEach(Vehicle::moveStep);
+        vehicles.parallelStream().forEach(Vehicle::accelerationStep);
+        vehicles.parallelStream().forEach(Vehicle::slowStep);
+        vehicles.parallelStream().forEach(Vehicle::randomStep);
+        vehicles.parallelStream().forEach(Vehicle::moveStep);
         if (webMode)
             vehicles.stream().forEach(Vehicle::updateLocation);
 
-        vehicles = vehicles.stream().filter(v -> !v.isFinished()).collect(Collectors.toList());
+        vehicles = vehicles.parallelStream().filter(v -> !v.isFinished()).collect(Collectors.toList());
 
+        logger.info("Timestep took " + (System.nanoTime() - startTimestep) / 1e6 + "ms");
         return true;
     }
 
@@ -113,9 +115,9 @@ public synchronized Metrics getMetrics()
         if (vehicles.size() == 0)
             return null;
 
-        int slowed = vehicles.stream().mapToInt(v -> v.didSlow() ? 1 : 0).reduce(0, (acc, i) -> acc + i);
-        double averageCells = vehicles.stream().mapToDouble(Vehicle::getVelocity).average().getAsDouble();
-        long notAtMax = vehicles.stream().filter(v -> v.getVelocity() < v.getMaxVelocity()).count();
+        int slowed = vehicles.parallelStream().mapToInt(v -> v.didSlow() ? 1 : 0).reduce(0, (acc, i) -> acc + i);
+        double averageCells = vehicles.parallelStream().mapToDouble(Vehicle::getVelocity).average().getAsDouble();
+        long notAtMax = vehicles.parallelStream().filter(v -> v.getVelocity() < v.getMaxVelocity()).count();
 
         return new Metrics(slowed, averageCells, notAtMax, vehicles.size());
     }
diff --git a/marmoset/src/main/webapp/main.js b/marmoset/src/main/webapp/main.js
index 19eaf79f62..dc4c1b84c8 100644
--- a/marmoset/src/main/webapp/main.js
+++ b/marmoset/src/main/webapp/main.js
@@ -2,6 +2,20 @@
  * Created by alexander on 22/02/2016.
  */
 
+function angleFromCoordinate(lat1, long1, lat2, long2) {
+
+    var dLon = (long2 - long1);
+
+    var y = Math.sin(dLon) * Math.cos(lat2);
+    var x = Math.cos(lat1) * Math.sin(lat2) - Math.sin(lat1)
+        * Math.cos(lat2) * Math.cos(dLon);
+
+    var brng = Math.atan2(y, x);
+
+    brng += 1.5 * Math.PI;
+    return brng;
+}
+
 function initMap() {
 
     window.canvas = document.getElementById("canvas");
@@ -172,8 +186,9 @@ Car.prototype = {
         if (this.marker == null) {
             this.marker = L.circleMarker([lat,lon], {
                 stroke: false,
-                radius: 4,
-                opacity: 0.8
+                radius: 5,
+                fillOpacity: 0.8,
+                color: "#ff6600"
                 //icon: carIcon,
                 //angle: 180*Math.random()
             });
