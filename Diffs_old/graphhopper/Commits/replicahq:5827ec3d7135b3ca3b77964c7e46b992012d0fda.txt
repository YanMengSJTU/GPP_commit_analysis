diff --git a/web/src/main/java/com/graphhopper/http/GraphHopperManaged.java b/web/src/main/java/com/graphhopper/http/GraphHopperManaged.java
index 0495050ebe..c1607ee14f 100644
--- a/web/src/main/java/com/graphhopper/http/GraphHopperManaged.java
+++ b/web/src/main/java/com/graphhopper/http/GraphHopperManaged.java
@@ -23,18 +23,11 @@
 import com.graphhopper.routing.util.DefaultFlagEncoderFactory;
 import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.routing.util.FlagEncoderFactory;
-import com.graphhopper.routing.weighting.Weighting;
 import com.graphhopper.spatialrules.SpatialRuleLookupHelper;
-import com.graphhopper.swl.R5EdgeIdPathDetailsBuilder;
+import com.graphhopper.swl.PathDetailsBuilderFactoryWithR5EdgeId;
 import com.graphhopper.util.CmdArgs;
 import com.graphhopper.util.PMap;
 import com.graphhopper.util.Parameters;
-import com.graphhopper.util.details.AverageSpeedDetails;
-import com.graphhopper.util.details.EdgeIdDetails;
-import com.graphhopper.util.details.PathDetailsBuilder;
-import com.graphhopper.util.details.PathDetailsBuilderFactory;
-import com.graphhopper.util.details.StreetNameDetails;
-import com.graphhopper.util.details.TimeDetails;
 import com.graphhopper.swl.OriginalDirectionFlagEncoder;
 import io.dropwizard.lifecycle.Managed;
 import org.slf4j.Logger;
@@ -42,10 +35,6 @@
 
 import javax.inject.Inject;
 import javax.inject.Singleton;
-import java.util.ArrayList;
-import java.util.List;
-
-import static com.graphhopper.util.Parameters.DETAILS.*;
 
 @Singleton
 public class GraphHopperManaged implements Managed {
@@ -70,35 +59,7 @@ public FlagEncoder createFlagEncoder(String name, PMap configuration) {
         });
         SpatialRuleLookupHelper.buildAndInjectSpatialRuleIntoGH(graphHopper, configuration);
         graphHopper.init(configuration);
-        graphHopper.setPathDetailsBuilderFactory(new PathDetailsBuilderFactory() {
-            @Override
-            public List<PathDetailsBuilder> createPathDetailsBuilders(List<String> requestedPathDetails, FlagEncoder encoder, Weighting weighting) {
-                // request-scoped
-                OriginalDirectionFlagEncoder originalDirectionFlagEncoder = (OriginalDirectionFlagEncoder) graphHopper.getGraphHopperStorage().getEncodingManager().getEncoder("car");
-                List<PathDetailsBuilder> builders = new ArrayList<>();
-                if (requestedPathDetails.contains(AVERAGE_SPEED))
-                    builders.add(new AverageSpeedDetails(encoder));
-
-                if (requestedPathDetails.contains(STREET_NAME))
-                    builders.add(new StreetNameDetails());
-
-                if (requestedPathDetails.contains(EDGE_ID))
-                    builders.add(new EdgeIdDetails());
-
-                if (requestedPathDetails.contains(TIME))
-                    builders.add(new TimeDetails(weighting));
-
-                if (requestedPathDetails.contains("r5_edge_id")) {
-                    builders.add(new R5EdgeIdPathDetailsBuilder(originalDirectionFlagEncoder));
-                }
-
-                if (requestedPathDetails.size() != builders.size()) {
-                    throw new IllegalArgumentException("You requested the details " + requestedPathDetails + " but we could only find " + builders);
-                }
-
-                return builders;
-            }
-        });
+        graphHopper.setPathDetailsBuilderFactory(new PathDetailsBuilderFactoryWithR5EdgeId(graphHopper));
     }
 
     @Override
diff --git a/web/src/main/java/com/graphhopper/swl/PathDetailsBuilderFactoryWithR5EdgeId.java b/web/src/main/java/com/graphhopper/swl/PathDetailsBuilderFactoryWithR5EdgeId.java
new file mode 100644
index 0000000000..56f81e049f
--- /dev/null
+++ b/web/src/main/java/com/graphhopper/swl/PathDetailsBuilderFactoryWithR5EdgeId.java
@@ -0,0 +1,66 @@
+/*
+ *  Licensed to GraphHopper GmbH under one or more contributor
+ *  license agreements. See the NOTICE file distributed with this work for
+ *  additional information regarding copyright ownership.
+ *
+ *  GraphHopper GmbH licenses this file to you under the Apache License,
+ *  Version 2.0 (the "License"); you may not use this file except in
+ *  compliance with the License. You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+
+package com.graphhopper.swl;
+
+import com.graphhopper.GraphHopper;
+import com.graphhopper.routing.util.FlagEncoder;
+import com.graphhopper.routing.weighting.Weighting;
+import com.graphhopper.util.details.*;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import static com.graphhopper.util.Parameters.DETAILS.*;
+
+public class PathDetailsBuilderFactoryWithR5EdgeId extends PathDetailsBuilderFactory {
+
+    private final GraphHopper graphHopper;
+
+    public PathDetailsBuilderFactoryWithR5EdgeId(GraphHopper graphHopper) {
+        this.graphHopper = graphHopper;
+    }
+
+    @Override
+    public List<PathDetailsBuilder> createPathDetailsBuilders(List<String> requestedPathDetails, FlagEncoder encoder, Weighting weighting) {
+        // request-scoped
+        List<PathDetailsBuilder> builders = new ArrayList<>();
+        if (requestedPathDetails.contains(AVERAGE_SPEED))
+            builders.add(new AverageSpeedDetails(encoder));
+
+        if (requestedPathDetails.contains(STREET_NAME))
+            builders.add(new StreetNameDetails());
+
+        if (requestedPathDetails.contains(EDGE_ID))
+            builders.add(new EdgeIdDetails());
+
+        if (requestedPathDetails.contains(TIME))
+            builders.add(new TimeDetails(weighting));
+
+        if (requestedPathDetails.contains("r5_edge_id")) {
+            OriginalDirectionFlagEncoder originalDirectionFlagEncoder = (OriginalDirectionFlagEncoder) graphHopper.getGraphHopperStorage().getEncodingManager().getEncoder("car");
+            builders.add(new R5EdgeIdPathDetailsBuilder(originalDirectionFlagEncoder));
+        }
+
+        if (requestedPathDetails.size() != builders.size()) {
+            throw new IllegalArgumentException("You requested the details " + requestedPathDetails + " but we could only find " + builders);
+        }
+
+        return builders;
+    }
+}
diff --git a/web/src/main/java/com/graphhopper/swl/TDWeighting.java b/web/src/main/java/com/graphhopper/swl/TDWeighting.java
index a226e1c304..7008e7750f 100644
--- a/web/src/main/java/com/graphhopper/swl/TDWeighting.java
+++ b/web/src/main/java/com/graphhopper/swl/TDWeighting.java
@@ -67,22 +67,22 @@ public double calcWeight(EdgeIteratorState edge, boolean reverse, int prevOrNext
 
     @Override
     public long calcMillis(EdgeIteratorState edge, boolean reverse, int prevOrNextEdgeId) {
-        long flags = edge.getFlags();
-        if (reverse && !encoder.isBackward(flags) || !reverse && !encoder.isForward(flags))
-            throw new IllegalStateException("Calculating time should not require to read speed from edge in wrong direction. "
-                    + "Reverse:" + reverse + ", fwd:" + encoder.isForward(flags) + ", bwd:" + encoder.isBackward(flags));
-
-        double speed = reverse ? encoder.getReverseSpeed(flags) : encoder.getSpeed(flags);
-        if (Double.isInfinite(speed) || Double.isNaN(speed) || speed < 0)
-            throw new IllegalStateException("Invalid speed stored in edge! " + speed);
-        if (speed == 0)
-            throw new IllegalStateException("Speed cannot be 0 for unblocked edge, use access properties to mark edge blocked! " +
-                    "Should only occur for shortest path calculation. See #242.");
-        long time = (long) (edge.getDistance() * 3600 / speed);
-        boolean unfavoredEdge = edge.getBool(EdgeIteratorState.K_UNFAVORED_EDGE, false);
-        if (unfavoredEdge)
-            time += headingPenaltyMillis;
-        return time;
+//        long flags = edge.getFlags();
+//        if (reverse && !encoder.isBackward(flags) || !reverse && !encoder.isForward(flags))
+//            throw new IllegalStateException("Calculating time should not require to read speed from edge in wrong direction. "
+//                    + "Reverse:" + reverse + ", fwd:" + encoder.isForward(flags) + ", bwd:" + encoder.isBackward(flags));
+//
+//        double speed = reverse ? encoder.getReverseSpeed(flags) : encoder.getSpeed(flags);
+//        if (Double.isInfinite(speed) || Double.isNaN(speed) || speed < 0)
+//            throw new IllegalStateException("Invalid speed stored in edge! " + speed);
+//        if (speed == 0)
+//            throw new IllegalStateException("Speed cannot be 0 for unblocked edge, use access properties to mark edge blocked! " +
+//                    "Should only occur for shortest path calculation. See #242.");
+//        long time = (long) (edge.getDistance() * 3600 / speed);
+//        boolean unfavoredEdge = edge.getBool(EdgeIteratorState.K_UNFAVORED_EDGE, false);
+//        if (unfavoredEdge)
+//            time += headingPenaltyMillis;
+        return (long) travelTimeCalculator.getTravelTimeMilliseconds(edge.getEdge(), 0, "car", null);
     }
 
     @Override
diff --git a/web/src/test/java/com/graphhopper/swl/TDNetworkIT.java b/web/src/test/java/com/graphhopper/swl/TDNetworkIT.java
index d0331dc7e9..99c7517eab 100644
--- a/web/src/test/java/com/graphhopper/swl/TDNetworkIT.java
+++ b/web/src/test/java/com/graphhopper/swl/TDNetworkIT.java
@@ -22,6 +22,10 @@
 import com.graphhopper.GraphHopper;
 import com.graphhopper.reader.osm.GraphHopperOSM;
 import com.graphhopper.routing.util.EncodingManager;
+import com.graphhopper.routing.util.FlagEncoder;
+import com.graphhopper.routing.util.HintsMap;
+import com.graphhopper.routing.weighting.Weighting;
+import com.graphhopper.storage.Graph;
 import com.graphhopper.util.details.PathDetail;
 import org.junit.Before;
 import org.junit.Test;
@@ -37,28 +41,42 @@
 
     @Before
     public void setUp() {
-        String graphFile = "target/swl";
-//        Helper.removeDir(new File(graphFile));
-        final EncodingManager encodingManager = new EncodingManager("car");
-        graphHopper = new GraphHopperOSM().
-                setStoreOnFlush(true).
-                setEncodingManager(encodingManager).setCHEnabled(false).
-                setWayPointMaxDistance(0).
-                setDataReaderFile("../core/files/monaco.osm.gz").
-                setGraphHopperLocation(graphFile).
-                importOrLoad();
+        String graphFile = "files/swl-andorra-r5-export";
+        OriginalDirectionFlagEncoder originalDirectionFlagEncoder = new OriginalDirectionFlagEncoder();
+        EncodingManager encodingManager = new EncodingManager(originalDirectionFlagEncoder);
+        graphHopper = new GraphHopperOSM() {
+            @Override
+            public Weighting createWeighting(HintsMap hintsMap, FlagEncoder encoder, Graph graph) {
+                if (hintsMap.getWeighting().equals("td")) {
+                    return new TDWeighting(encoder, new TravelTimeCalculator() {
+                        @Override
+                        public float getTravelTimeMilliseconds(int edge, int durationSeconds, String streetMode, GHRequest req) {
+                            System.out.println("wurst");
+                            return edge;
+                        }
+                    }, hintsMap);
+                } else {
+                    return super.createWeighting(hintsMap, encoder, graph);
+                }
+            }
+        }.setStoreOnFlush(true).
+            setEncodingManager(encodingManager).
+            setWayPointMaxDistance(0).
+            setGraphHopperLocation(graphFile).
+            setPathDetailsBuilderFactory(new PathDetailsBuilderFactoryWithR5EdgeId(graphHopper)).
+            importOrLoad();
     }
 
     @Test
     public void testMonacoFastest() {
-        GHRequest request = new GHRequest(43.730729, 7.42135, 43.727697, 7.419199);
+        GHRequest request = new GHRequest(42.56819, 1.603231, 42.571034, 1.520662);
         request.setPathDetails(Arrays.asList("time", "edge_id"));
         GHResponse route = graphHopper.route(request);
 
-        final int EXPECTED_LINKS_IN_PATH = 29;
-        final long EXPECTED_TOTAL_TRAVEL_TIME = 291827;
+        final int EXPECTED_LINKS_IN_PATH = 52;
+        final long EXPECTED_TOTAL_TRAVEL_TIME = 1277122;
 
-        assertEquals(2584.0, route.getBest().getDistance(), 0.1);
+        assertEquals(21474.0, route.getBest().getDistance(), 0.1);
         assertEquals(EXPECTED_TOTAL_TRAVEL_TIME, route.getBest().getTime());
 
         List<PathDetail> time = route.getBest().getPathDetails().get("time");
