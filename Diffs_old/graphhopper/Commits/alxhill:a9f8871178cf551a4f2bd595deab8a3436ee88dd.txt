diff --git a/marmoset.sh b/marmoset.sh
index f5a41f4d59..3b7d71bcdb 100755
--- a/marmoset.sh
+++ b/marmoset.sh
@@ -28,6 +28,7 @@ elif [ "$ACTION" = "rebuild" ]; then
 elif [ "$ACTION" = "run" ]; then
     shift
     ${JAVA} -ea -cp marmoset/target/marmoset-0.7-SNAPSHOT-with-dep.jar com.graphhopper.marmoset.Marmoset $@
+    exit $?
 elif [ "$ACTION" = "test" ]; then
     ${MAVEN} test
 elif [ "$ACTION" = "lines" ]; then
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/Marmoset.java b/marmoset/src/main/java/com/graphhopper/marmoset/Marmoset.java
index ed71851363..682b32ba7a 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/Marmoset.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/Marmoset.java
@@ -5,7 +5,9 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import java.io.*;
+import java.io.File;
+import java.io.IOException;
+import java.io.PrintWriter;
 import java.net.InetSocketAddress;
 import java.nio.ByteBuffer;
 import java.util.stream.IntStream;
@@ -37,7 +39,9 @@ public static void main(String[] args) throws IOException, InterruptedException
         }
         else if (args[0].equals("--file"))
         {
-            startFileSimulation(args[1], Integer.parseInt(args[2]));
+            runOfflineSimulation(args[1], Integer.parseInt(args[2]));
+            logger.info("Simulation complete.");
+            return;
         }
 
         System.out.println("Press enter to terminate");
@@ -49,20 +53,21 @@ else if (args[0].equals("--file"))
         System.exit(0);
     }
 
-    private static void startFileSimulation(String outfile, int initialVehicles) throws IOException
+    private static void runOfflineSimulation(String outfile, int initialVehicles) throws IOException
     {
         PrintWriter p = new PrintWriter("simulations/" + outfile, "UTF-8");
+        p.println(MarmosetHopper.Metrics.getHeader());
         start(initialVehicles);
-        while (mh.getVehicleCount() > 0)
+        while (mh.getVehicleCount() > 0 && mh.timestep())
         {
-            if (mh.timestep()) {
-                logger.info("===ITERATION [" + iteration + "]===");
-                if (iteration % 10 == 0)
-                    logger.info(mh.getVehicleCount() + " vehicles remaining");
-                String metrics = mh.getMetrics();
-                p.println(metrics);
-                iteration++;
-            }
+            logger.info("===ITERATION [" + iteration + "] VEHICLES [" + mh.getVehicleCount() + "]===");
+            MarmosetHopper.Metrics metrics = mh.getMetrics();
+            if (metrics == null)
+                continue;
+            logger.info(metrics.getDescription());
+            p.println(metrics.toString());
+            p.flush();
+            iteration++;
         }
         p.close();
     }
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetHopper.java b/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetHopper.java
index bd598ae034..03983b9bba 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetHopper.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetHopper.java
@@ -102,19 +102,16 @@ public synchronized boolean timestep()
         return true;
     }
 
-    public synchronized String getMetrics()
+    public synchronized Metrics getMetrics()
     {
         if (vehicles.size() == 0)
             return null;
 
         int slowed = vehicles.stream().mapToInt(v -> v.didSlow() ? 1 : 0).reduce(0, (acc, i) -> acc + i);
-        double averageVelocity = vehicles.stream().mapToDouble(Vehicle::getVelocity).average().getAsDouble();
-        long deltaV = vehicles.stream().filter(v -> v.getMaxVelocity() <= v.getVelocity()).count();
-
-        return String.format("%d/%d (%.2f%%) of vehicles slowed, moving at %.2fc/s with %d not at max",
-                slowed, vehicles.size(), (float) slowed * 100.0 / vehicles.size(),
-                averageVelocity, deltaV);
+        double averageCells = vehicles.stream().mapToDouble(Vehicle::getVelocity).average().getAsDouble();
+        long notAtMax = vehicles.stream().filter(v -> v.getMaxVelocity() <= v.getVelocity()).count();
 
+        return new Metrics(slowed, averageCells, notAtMax, vehicles.size());
     }
 
     public synchronized String getVehicleString()
@@ -160,4 +157,37 @@ public int getVehicleCount()
     {
         return vehicles.size();
     }
+
+    public static class Metrics {
+        public int slowed;
+        public double averageCells;
+        public long notAtMax;
+        public int vehicleCount;
+
+        public Metrics(int slowed, double averageCells, long notAtMax, int vehicleCount)
+        {
+            this.slowed = slowed;
+            this.averageCells = averageCells;
+            this.notAtMax = notAtMax;
+            this.vehicleCount = vehicleCount;
+        }
+
+        public static String getHeader()
+        {
+            return "VehicleCount,VehiclesSlowed,AverageCellSpeed,NotAtMax";
+        }
+
+        @Override
+        public String toString()
+        {
+            return String.format("%d,%d,%f,%d", vehicleCount, slowed, averageCells, notAtMax);
+        }
+
+        public String getDescription()
+        {
+            return String.format("%d/%d (%.2f%%) of vehicles slowed, moving at %.2fc/s with %d not at max",
+                    slowed, vehicleCount, (float) slowed * 100.0 / vehicleCount,
+                    averageCells, notAtMax);
+        }
+    }
 }
