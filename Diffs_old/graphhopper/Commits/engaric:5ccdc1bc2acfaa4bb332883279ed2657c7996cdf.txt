diff --git a/android/scripts/googlecode_upload.py b/android/scripts/googlecode_upload.py
deleted file mode 100644
index 16912361ee..0000000000
--- a/android/scripts/googlecode_upload.py
+++ /dev/null
@@ -1,256 +0,0 @@
-#!/usr/bin/env python
-#
-# Copyright 2006, 2007 Google Inc. All Rights Reserved.
-# Author: danderson@google.com (David Anderson)
-#
-# Script for uploading files to a Google Code project.
-#
-# This is intended to be both a useful script for people who want to
-# streamline project uploads and a reference implementation for
-# uploading files to Google Code projects.
-#
-# To upload a file to Google Code, you need to provide a path to the
-# file on your local machine, a small summary of what the file is, a
-# project name, and a valid account that is a member or owner of that
-# project.  You can optionally provide a list of labels that apply to
-# the file.  The file will be uploaded under the same name that it has
-# in your local filesystem (that is, the "basename" or last path
-# component).  Run the script with '--help' to get the exact syntax
-# and available options.
-#
-# Note that the upload script requests that you enter your
-# googlecode.com password.  This is NOT your Gmail account password!
-# This is the password you use on googlecode.com for committing to
-# Subversion and uploading files.  You can find your password by going
-# to http://code.google.com/hosting/settings when logged in with your
-# Gmail account. If you have already committed to your project's
-# Subversion repository, the script will automatically retrieve your
-# credentials from there (unless disabled, see the output of '--help'
-# for details).
-#
-# If you are looking at this script as a reference for implementing
-# your own Google Code file uploader, then you should take a look at
-# the upload() function, which is the meat of the uploader.  You
-# basically need to build a multipart/form-data POST request with the
-# right fields and send it to https://PROJECT.googlecode.com/files .
-# Authenticate the request using HTTP Basic authentication, as is
-# shown below.
-#
-# Licensed under the terms of the Apache Software License 2.0:
-#  http://www.apache.org/licenses/LICENSE-2.0
-#
-# Questions, comments, feature requests and patches are most welcome.
-# Please direct all of these to the Google Code users group:
-#  http://groups.google.com/group/google-code-hosting
-
-"""Google Code file uploader script.
-"""
-
-__author__ = 'danderson@google.com (David Anderson)'
-
-import httplib
-import os.path
-import optparse
-import getpass
-import base64
-import sys
-
-
-def upload(file, project_name, user_name, password, summary, labels=None):
-  """Upload a file to a Google Code project's file server.
-
-  Args:
-    file: The local path to the file.
-    project_name: The name of your project on Google Code.
-    user_name: Your Google account name.
-    password: The googlecode.com password for your account.
-              Note that this is NOT your global Google Account password!
-    summary: A small description for the file.
-    labels: an optional list of label strings with which to tag the file.
-
-  Returns: a tuple:
-    http_status: 201 if the upload succeeded, something else if an
-                 error occured.
-    http_reason: The human-readable string associated with http_status
-    file_url: If the upload succeeded, the URL of the file on Google
-              Code, None otherwise.
-  """
-  # The login is the user part of user@gmail.com. If the login provided
-  # is in the full user@domain form, strip it down.
-  if user_name.endswith('@gmail.com'):
-    user_name = user_name[:user_name.index('@gmail.com')]
-
-  form_fields = [('summary', summary)]
-  if labels is not None:
-    form_fields.extend([('label', l.strip()) for l in labels])
-
-  content_type, body = encode_upload_request(form_fields, file)
-
-  upload_host = '%s.googlecode.com' % project_name
-  upload_uri = '/files'
-  auth_token = base64.b64encode('%s:%s'% (user_name, password))
-  headers = {
-    'Authorization': 'Basic %s' % auth_token,
-    'User-Agent': 'Googlecode.com uploader v0.9.4',
-    'Content-Type': content_type,
-    }
-
-  server = httplib.HTTPSConnection(upload_host)
-  server.request('POST', upload_uri, body, headers)
-  resp = server.getresponse()
-  server.close()
-
-  if resp.status == 201:
-    location = resp.getheader('Location', None)
-  else:
-    location = None
-  return resp.status, resp.reason, location
-
-
-def encode_upload_request(fields, file_path):
-  """Encode the given fields and file into a multipart form body.
-
-  fields is a sequence of (name, value) pairs. file is the path of
-  the file to upload. The file will be uploaded to Google Code with
-  the same file name.
-
-  Returns: (content_type, body) ready for httplib.HTTP instance
-  """
-  BOUNDARY = '----------Googlecode_boundary_reindeer_flotilla'
-  CRLF = '\r\n'
-
-  body = []
-
-  # Add the metadata about the upload first
-  for key, value in fields:
-    body.extend(
-      ['--' + BOUNDARY,
-       'Content-Disposition: form-data; name="%s"' % key,
-       '',
-       value,
-       ])
-
-  # Now add the file itself
-  file_name = os.path.basename(file_path)
-  f = open(file_path, 'rb')
-  file_content = f.read()
-  f.close()
-
-  body.extend(
-    ['--' + BOUNDARY,
-     'Content-Disposition: form-data; name="filename"; filename="%s"'
-     % file_name,
-     # The upload server determines the mime-type, no need to set it.
-     'Content-Type: application/octet-stream',
-     '',
-     file_content,
-     ])
-
-  # Finalize the form body
-  body.extend(['--' + BOUNDARY + '--', ''])
-
-  return 'multipart/form-data; boundary=%s' % BOUNDARY, CRLF.join(body)
-
-
-def upload_find_auth(file_path, project_name, summary, labels=None,
-                     user_name=None, password=None, tries=3):
-  """Find credentials and upload a file to a Google Code project's file server.
-
-  file_path, project_name, summary, and labels are passed as-is to upload.
-
-  Args:
-    file_path: The local path to the file.
-    project_name: The name of your project on Google Code.
-    summary: A small description for the file.
-    labels: an optional list of label strings with which to tag the file.
-    config_dir: Path to Subversion configuration directory, 'none', or None.
-    user_name: Your Google account name.
-    tries: How many attempts to make.
-  """
-  if user_name is None or password is None:
-    from netrc import netrc
-    authenticators = netrc().authenticators("code.google.com")
-    if authenticators:
-      if user_name is None:
-        user_name = authenticators[0]
-      if password is None:
-        password = authenticators[2]
-
-  while tries > 0:
-    if user_name is None:
-      # Read username if not specified or loaded from svn config, or on
-      # subsequent tries.
-      sys.stdout.write('Please enter your googlecode.com username: ')
-      sys.stdout.flush()
-      user_name = sys.stdin.readline().rstrip()
-    if password is None:
-      # Read password if not loaded from svn config, or on subsequent tries.
-      print 'Please enter your googlecode.com password.'
-      print '** Note that this is NOT your Gmail account password! **'
-      print 'It is the password you use to access Subversion repositories,'
-      print 'and can be found here: http://code.google.com/hosting/settings'
-      password = getpass.getpass()
-
-    status, reason, url = upload(file_path, project_name, user_name, password,
-                                 summary, labels)
-    # Returns 403 Forbidden instead of 401 Unauthorized for bad
-    # credentials as of 2007-07-17.
-    if status in [httplib.FORBIDDEN, httplib.UNAUTHORIZED]:
-      # Rest for another try.
-      user_name = password = None
-      tries = tries - 1
-    else:
-      # We're done.
-      break
-
-  return status, reason, url
-
-
-def main():
-  parser = optparse.OptionParser(usage='googlecode-upload.py -s SUMMARY '
-                                 '-p PROJECT [options] FILE')
-  parser.add_option('-s', '--summary', dest='summary',
-                    help='Short description of the file')
-  parser.add_option('-p', '--project', dest='project',
-                    help='Google Code project name')
-  parser.add_option('-u', '--user', dest='user',
-                    help='Your Google Code username')
-  parser.add_option('-w', '--password', dest='password',
-                    help='Your Google Code password')
-  parser.add_option('-l', '--labels', dest='labels',
-                    help='An optional list of comma-separated labels to attach '
-                    'to the file')
-
-  options, args = parser.parse_args()
-
-  if not options.summary:
-    parser.error('File summary is missing.')
-  elif not options.project:
-    parser.error('Project name is missing.')
-  elif len(args) < 1:
-    parser.error('File to upload not provided.')
-  elif len(args) > 1:
-    parser.error('Only one file may be specified.')
-
-  file_path = args[0]
-
-  if options.labels:
-    labels = options.labels.split(',')
-  else:
-    labels = None
-
-  status, reason, url = upload_find_auth(file_path, options.project,
-                                         options.summary, labels,
-                                         options.user, options.password)
-  if url:
-    print 'The file was uploaded successfully.'
-    print 'URL: %s' % url
-    return 0
-  else:
-    print 'An error occurred. Your file was not uploaded.'
-    print 'Google Code upload server said: %s (%s)' % (reason, status)
-    return 1
-
-
-if __name__ == '__main__':
-  sys.exit(main())
diff --git a/android/scripts/maven-install-mapsforge.sh b/android/scripts/maven-install-mapsforge.sh
deleted file mode 100755
index f1fac1393c..0000000000
--- a/android/scripts/maven-install-mapsforge.sh
+++ /dev/null
@@ -1,20 +0,0 @@
-# do the following
-# git clone https://code.google.com/p/mapsforge/
-# cd mapsforge; and fix http://code.google.com/p/mapsforge/issues/detail?id=461
-# mvn clean install
-# cp mapsforge-map/target/mapsforge-map-0.3.1-SNAPSHOT-jar-with-dependencies.jar graphhopper/android/libs/mapsforge-0.3.1-SNAPSHOT.jar
-
-# if we would do it via normal maven dependency management we run into strange things which I was not able to fix
-# http://stackoverflow.com/a/8315600/194609
-
-# MAVEN_HOME/bin/mvn
-MVN=mvn
-VERSION=0.4.0
-libs="map map-android map-reader core"
-
-for lib in $libs; do
-  FILE=$(ls ./libs/mapsforge-$lib-$VERSION.jar)
-  echo "installing file: $FILE"
-  ARGS="-DgroupId=com.graphhopper -DartifactId=mapsforge-$lib -Dversion=$VERSION -Dpackaging=jar -Dfile=$FILE"
-  $MVN install:install-file $ARGS
-done
diff --git a/core/files/live_measurement.sh b/core/files/live_measurement.sh
deleted file mode 100755
index 1fbafd5ae6..0000000000
--- a/core/files/live_measurement.sh
+++ /dev/null
@@ -1,59 +0,0 @@
-#!/bin/bash
-
-# before execution do
-# 1. cp files/measurement.sh files/live_measurement.sh
-#    to ensure that you have your customized measurement.sh file available and git has no problems to switch versions
-# 2. adapt memory usage in JAVA_OPTS
-# 3. adapt the OSM location GH_MAIN
-# 4. adapt last_commits
-
-GH_HOME=$(dirname $0)/..
-cd $GH_HOME
-
-JAVA=$JAVA_HOME/bin/java
-if [ "x$JAVA_HOME" = "x" ]; then
- JAVA=java
-fi
-
-VERSION=`grep  "<name>" -A 1 pom.xml | grep version | cut -d'>' -f2 | cut -d'<' -f1`
-JAR=target/graphhopper-$VERSION-jar-with-dependencies.jar
-
-# make sure this stays the same for all measurements
-JAVA_OPTS="-Xmx1000m -Xms1000m" 
-
-GH_MAIN=/media/SAMSUNG/maps/unterfranken
-
-# should we call?
-# mvn clean install assembly:single
-
-# import graph
-OSM_XML=$GH_MAIN.osm
-GL=$GH_MAIN-gh
-ARGS="osmreader.graph-location=$GL osmreader.osm=$OSM_XML osmreader.chWeighting=fastest osmreader.type=CAR"
-echo -e "\ncreate graph via $ARGS, $JAR"
-$JAVA $JAVA_OPTS -cp $JAR com.graphhopper.reader.OSMReader $ARGS osmreader.doPrepare=false
-
-function startMeasurement {
-  COUNT=5000
-  ARGS="$ARGS osmreader.doPrepare=true measurement.count=$COUNT measurement.location=$M_FILE_NAME"
-  echo -e "\nperform measurement via $ARGS, $JAR"
-  $JAVA $JAVA_OPTS -cp $JAR com.graphhopper.util.Measurement $ARGS
-}
-
-# use current version
-mvn -DskipTests clean install assembly:single  
-startMeasurement
-exit
-
-# use git
-last_commits=1
-commits=$(git rev-list HEAD -n $last_commits)
-for commit in $commits; do
-  git checkout $commit -q
-  M_FILE_NAME=`git log -n 1 --pretty=oneline | grep -o "\ .*" |  tr " ,;" "_"`
-  M_FILE_NAME="measurement$M_FILE_NAME.properties"
-  echo -e "\nusing commit $commit and $M_FILE_NAME"
-  
-  mvn -DskipTests clean install assembly:single
-  startMeasurement
-done
diff --git a/core/files/release.sh b/core/files/release.sh
deleted file mode 100755
index 4ecc63bdd1..0000000000
--- a/core/files/release.sh
+++ /dev/null
@@ -1,79 +0,0 @@
-#!/bin/bash
-
-# assumptions:
-# 1. you have run unit and integration tests successfully
-# 2. no changes on master
-
-# TODO when we understand the commands we can use the release plugin
-# mvn release:clean 
-# # Prepare: build, test, release version update, commit, tag, next snapshot version update, commit
-# mvn release:prepare -DgenerateBackupPoms=false
-# # Perform: export a release from SCM, run the deploy goal
-# mvn release:perform
-# https://docs.sonatype.org/display/Repository/Sonatype+OSS+Maven+Repository+Usage+Guide
-
-GH_CORE_HOME=$(dirname $0)/..
-cd $GH_CORE_HOME
-VERSION=0.1
-NEW_VERSION=0.2-SNAPSHOT
-TARGET=./target
-GIT_E=true
-
-mvn versions:set -DnewVersion=$VERSION -DgenerateBackupPoms=false
-# as android is not referenced in parent we need to do it manually
-cd android
-mvn versions:set -DnewVersion=$VERSION -DgenerateBackupPoms=false
-cd ..
-
-if [ "x$GIT_E" = "xtrue" ]; then
-  git checkout -b $VERSION
-  git add .
-  git commit -m "releasing $VERSION"
-fi
-
-
-##############################
-# create jar and android files
-mvn -DskipTests=true clean install assembly:single
-
-if [ $? -ne 0 ]; then
-  echo "cannot install jars?"
-  exit
-fi  
-
-# now create binary distribution where no maven is necessary to run import
-cp ../graphhopper.sh $TARGET/graphhopper.sh
-JAR=`cd $TARGET && ls -1 *-with-dependencies.jar`
-# use @ instead of the common / to avoid problems with paths in $JAR
-sed -i "s@JAR=.*@JAR=$JAR@g" $TARGET/graphhopper.sh
-# if you use -x option use backslash avoids shell substitution e.g. -x \*~
-zip -j $TARGET/graphhopper-$VERSION-bin.zip $TARGET/graphhopper.sh $TARGET/$JAR ../config-example.properties ../*.txt ../*.md
-
-
-########################
-# deployment to sonatype
-$MVN install deploy
-
-if [ $? -ne 0 ]; then
-  echo "cannot deploy to sonatype?"
-  exit
-fi    
-
-cd android
-export ANDROID_HOME=/install/android/sdk
-$MVN clean install deploy
-cd ..
-
-
-##########################
-# deployment to our server
-
-# TODO
-
-mvn versions:set -DnewVersion=$NEW_VERSION -DgenerateBackupPoms=false
-
-if [ "x$GIT_E" = "xtrue" ]; then
-  git checkout master
-  git add .
-  git commit -m "new development version $NEW_VERSION"
-fi
