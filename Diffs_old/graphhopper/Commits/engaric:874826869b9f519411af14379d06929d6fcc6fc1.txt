diff --git a/core/src/main/java/com/graphhopper/reader/osgb/itn/OSITNWay.java b/core/src/main/java/com/graphhopper/reader/osgb/itn/OSITNWay.java
index 9bc0c990f2..2ab8eec0f2 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/itn/OSITNWay.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/itn/OSITNWay.java
@@ -61,6 +61,7 @@
     public static OSITNWay create(long id, XMLStreamReader parser) throws XMLStreamException, MismatchedDimensionException, FactoryException, TransformException {
         OSITNWay way = new OSITNWay(id);
         parser.nextTag();
+        way.setTag("highway","road");
         way.readTags(parser);
         logger.info(way.toString());
         return way;
diff --git a/core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
index f7debdc241..2f4f4ab9d9 100644
--- a/core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
@@ -30,406 +30,393 @@
 /**
  * Defines bit layout for cars. (speed, access, ferries, ...)
  * <p>
+ * 
  * @author Peter Karich
  * @author Nop
  */
 public class CarFlagEncoder extends AbstractFlagEncoder
 {
-    protected final Map<String, Integer> trackTypeSpeedMap = new HashMap<>();
-    protected final Set<String> badSurfaceSpeedMap = new HashSet<>();
-    /**
-     * A map which associates string to speed. Get some impression:
-     * http://www.itoworld.com/map/124#fullscreen
-     * http://wiki.openstreetmap.org/wiki/OSM_tags_for_routing/Maxspeed
-     */
-    protected final Map<String, Integer> defaultSpeedMap = new HashMap<>();
-
-    protected final Map<String, String> environmentMaxSpeedMap = new HashMap<>();
-
-    /**
-     * 1mph = 1.60934kph
-     */
-    public static final int SEVENTY_MPH_IN_KPH = (int)parseSpeed("70mph");
-    public static final int SIXTY_MPH_IN_KPH = (int)parseSpeed("60mph");;
-    public static final int THIRTY_MPH_IN_KPH = (int)parseSpeed("30mph");;
-
-    /**
-     * Should be only instantied via EncodingManager
-     */
-    public CarFlagEncoder()
-    {
-        this(5, 5, 0);
-    }
-
-    public CarFlagEncoder( String propertiesStr )
-    {
-        this((int) parseLong(propertiesStr, "speedBits", 5),
-                parseDouble(propertiesStr, "speedFactor", 5),
-                parseBoolean(propertiesStr, "turnCosts", false) ? 3 : 0);
-        this.setBlockFords(parseBoolean(propertiesStr, "blockFords", true));
-    }
-
-    public CarFlagEncoder( int speedBits, double speedFactor, int maxTurnCosts )
-    {
-        super(speedBits, speedFactor, maxTurnCosts);
-        restrictions.addAll(Arrays.asList("motorcar", "motor_vehicle", "vehicle", "access"));
-
-        restrictedValues.add("private");
-        restrictedValues.add("agricultural");
-        restrictedValues.add("forestry");
-        restrictedValues.add("no");
-        restrictedValues.add("restricted");
-        restrictedValues.add("delivery");
-        restrictedValues.add("military");
-
-        intendedValues.add("yes");
-        intendedValues.add("permissive");
-
-        potentialBarriers.add("gate");
-        potentialBarriers.add("lift_gate");
-        potentialBarriers.add("kissing_gate");
-        potentialBarriers.add("swing_gate");
-
-        absoluteBarriers.add("bollard");
-        absoluteBarriers.add("stile");
-        absoluteBarriers.add("turnstile");
-        absoluteBarriers.add("cycle_barrier");
-        absoluteBarriers.add("motorcycle_barrier");
-        absoluteBarriers.add("block");
-
-        trackTypeSpeedMap.put("grade1", 20); // paved
-        trackTypeSpeedMap.put("grade2", 15); // now unpaved - gravel mixed with ...
-        trackTypeSpeedMap.put("grade3", 10); // ... hard and soft materials
-        trackTypeSpeedMap.put("grade4", 5); // ... some hard or compressed materials
-        trackTypeSpeedMap.put("grade5", 5); // ... no hard materials. soil/sand/grass
-
-        badSurfaceSpeedMap.add("cobblestone");
-        badSurfaceSpeedMap.add("grass_paver");
-        badSurfaceSpeedMap.add("gravel");
-        badSurfaceSpeedMap.add("sand");
-        badSurfaceSpeedMap.add("paving_stones");
-        badSurfaceSpeedMap.add("dirt");
-        badSurfaceSpeedMap.add("ground");
-        badSurfaceSpeedMap.add("grass");
-
-        maxPossibleSpeed = 100;
-        
-        // autobahn
-        defaultSpeedMap.put("motorway", 100);
-        defaultSpeedMap.put("motorway_link", 70);
-        defaultSpeedMap.put("motorroad", 90);
-        // bundesstraße
-        defaultSpeedMap.put("trunk", 70);
-        defaultSpeedMap.put("trunk_link", 65);
-        // linking bigger town
-        defaultSpeedMap.put("primary", 65);
-        defaultSpeedMap.put("primary_link", 60);
-        // linking towns + villages
-        defaultSpeedMap.put("secondary", 60);
-        defaultSpeedMap.put("secondary_link", 50);
-        // streets without middle line separation
-        defaultSpeedMap.put("tertiary", 50);
-        defaultSpeedMap.put("tertiary_link", 40);
-        defaultSpeedMap.put("unclassified", 30);
-        defaultSpeedMap.put("residential", 30);
-        // spielstraße
-        defaultSpeedMap.put("living_street", 5);
-        defaultSpeedMap.put("service", 20);
-        // unknown road
-        defaultSpeedMap.put("road", 20);
-        // forestry stuff
-        defaultSpeedMap.put("track", 15);
-
-        addNationalUKSpeedMapping();
-        addRoadTypeUKSpeedMapping();
-
-        // You can not drive down a pedestrianised street
-        defaultSpeedMap.put("Pedestrianised Street", 0);
-        // Private Road - Publicly Accessible are NOT traversible
-        // defaultSpeedMap.put("Private Road - Restricted Access", 0);
-        // Private Road - Publicly Accessible are NOT traversible
-        // defaultSpeedMap.put("Private Road - Publicly Accessible", 10);
-
-        //        defaultSpeedMap.put("Alley", 0);
-
-        // osgb:type
-        vehicleQualifierTypeExclusions.add("Buses");
-        vehicleQualifierTypeExclusions.add("Coaches");
-        vehicleQualifierTypeExclusions.add("Mopeds");
-        vehicleQualifierTypeExclusions.add("Motor Cycles");
-        vehicleQualifierTypeExclusions.add("HGV's");
-        vehicleQualifierTypeExclusions.add("LGV's");
-        vehicleQualifierTypeExclusions.add("Towed Caravans");
-        vehicleQualifierTypeExclusions.add("Cycles");
-        vehicleQualifierTypeExclusions.add("Tracked Vehicles");
-        // osgb:use
-        vehicleQualifierTypeExclusions.add("Taxi");
-        vehicleQualifierTypeExclusions.add("Taxis"); // Added from analysing the actual data
-        vehicleQualifierTypeExclusions.add("School Bus");
-        vehicleQualifierTypeExclusions.add("Patron");
-        vehicleQualifierTypeExclusions.add("Access");
-        vehicleQualifierTypeExclusions.add("Resident");
-        vehicleQualifierTypeExclusions.add("Emergency Vehicle");
-        vehicleQualifierTypeExclusions.add("Public Transport");
-        vehicleQualifierTypeExclusions.add("Authorised Vehicle");
-        vehicleQualifierTypeExclusions.add("Local Bus");
-        vehicleQualifierTypeExclusions.add("Local Buses"); // Added from analysing the actual data
-        vehicleQualifierTypeExclusions.add("Escorted Traffic");
-        vehicleQualifierTypeExclusions.add("Loading And Unloading"); // Added from analysing the actual data
-
-
-
-        vehicleQualifierTypeInclusions.add("Motor Vehicles");
-        vehicleQualifierTypeInclusions.add("All Vehicles");
-
-
-        //        environmentMaxSpeedMap.put("Rural", 60);
-        environmentMaxSpeedMap.put("Urban:Single Carriageway", ""+THIRTY_MPH_IN_KPH);
-
-
-    }
+	protected final Map<String, Integer> trackTypeSpeedMap = new HashMap<>();
+	protected final Set<String> badSurfaceSpeedMap = new HashSet<>();
+	/**
+	 * A map which associates string to speed. Get some impression:
+	 * http://www.itoworld.com/map/124#fullscreen
+	 * http://wiki.openstreetmap.org/wiki/OSM_tags_for_routing/Maxspeed
+	 */
+	protected final Map<String, Integer> defaultSpeedMap = new HashMap<>();
+
+	protected final Map<String, String> environmentMaxSpeedMap = new HashMap<>();
+
+	/**
+	 * 1mph = 1.60934kph
+	 */
+	public static final int SEVENTY_MPH_IN_KPH = (int) parseSpeed("70mph");
+	public static final int SIXTY_MPH_IN_KPH = (int) parseSpeed("60mph");;
+	public static final int THIRTY_MPH_IN_KPH = (int) parseSpeed("30mph");;
+
+	/**
+	 * Should be only instantied via EncodingManager
+	 */
+	public CarFlagEncoder()
+	{
+		this(5, 5, 0);
+	}
+
+	public CarFlagEncoder( String propertiesStr )
+	{
+		this((int) parseLong(propertiesStr, "speedBits", 5), parseDouble(propertiesStr,
+		        "speedFactor", 5), parseBoolean(propertiesStr, "turnCosts", false) ? 3 : 0);
+		this.setBlockFords(parseBoolean(propertiesStr, "blockFords", true));
+	}
+
+	public CarFlagEncoder( int speedBits, double speedFactor, int maxTurnCosts )
+	{
+		super(speedBits, speedFactor, maxTurnCosts);
+		restrictions.addAll(Arrays.asList("motorcar", "motor_vehicle", "vehicle", "access"));
+
+		restrictedValues.add("private");
+		restrictedValues.add("agricultural");
+		restrictedValues.add("forestry");
+		restrictedValues.add("no");
+		restrictedValues.add("restricted");
+		restrictedValues.add("delivery");
+		restrictedValues.add("military");
+
+		intendedValues.add("yes");
+		intendedValues.add("permissive");
+
+		potentialBarriers.add("gate");
+		potentialBarriers.add("lift_gate");
+		potentialBarriers.add("kissing_gate");
+		potentialBarriers.add("swing_gate");
+
+		absoluteBarriers.add("bollard");
+		absoluteBarriers.add("stile");
+		absoluteBarriers.add("turnstile");
+		absoluteBarriers.add("cycle_barrier");
+		absoluteBarriers.add("motorcycle_barrier");
+		absoluteBarriers.add("block");
+
+		trackTypeSpeedMap.put("grade1", 20); // paved
+		trackTypeSpeedMap.put("grade2", 15); // now unpaved - gravel mixed with ...
+		trackTypeSpeedMap.put("grade3", 10); // ... hard and soft materials
+		trackTypeSpeedMap.put("grade4", 5); // ... some hard or compressed materials
+		trackTypeSpeedMap.put("grade5", 5); // ... no hard materials. soil/sand/grass
+
+		badSurfaceSpeedMap.add("cobblestone");
+		badSurfaceSpeedMap.add("grass_paver");
+		badSurfaceSpeedMap.add("gravel");
+		badSurfaceSpeedMap.add("sand");
+		badSurfaceSpeedMap.add("paving_stones");
+		badSurfaceSpeedMap.add("dirt");
+		badSurfaceSpeedMap.add("ground");
+		badSurfaceSpeedMap.add("grass");
+
+		maxPossibleSpeed = 100;
+
+		// autobahn
+		defaultSpeedMap.put("motorway", 100);
+		defaultSpeedMap.put("motorway_link", 70);
+		defaultSpeedMap.put("motorroad", 90);
+		// bundesstraße
+		defaultSpeedMap.put("trunk", 70);
+		defaultSpeedMap.put("trunk_link", 65);
+		// linking bigger town
+		defaultSpeedMap.put("primary", 65);
+		defaultSpeedMap.put("primary_link", 60);
+		// linking towns + villages
+		defaultSpeedMap.put("secondary", 60);
+		defaultSpeedMap.put("secondary_link", 50);
+		// streets without middle line separation
+		defaultSpeedMap.put("tertiary", 50);
+		defaultSpeedMap.put("tertiary_link", 40);
+		defaultSpeedMap.put("unclassified", 30);
+		defaultSpeedMap.put("residential", 30);
+		// spielstraße
+		defaultSpeedMap.put("living_street", 5);
+		defaultSpeedMap.put("service", 20);
+		// unknown road
+		defaultSpeedMap.put("road", 20);
+		// forestry stuff
+		defaultSpeedMap.put("track", 15);
+
+		addNationalUKSpeedMapping();
+		addRoadTypeUKSpeedMapping();
+
+		// osgb:type
+		vehicleQualifierTypeExclusions.add("Buses");
+		vehicleQualifierTypeExclusions.add("Coaches");
+		vehicleQualifierTypeExclusions.add("Mopeds");
+		vehicleQualifierTypeExclusions.add("Motor Cycles");
+		vehicleQualifierTypeExclusions.add("HGV's");
+		vehicleQualifierTypeExclusions.add("LGV's");
+		vehicleQualifierTypeExclusions.add("Towed Caravans");
+		vehicleQualifierTypeExclusions.add("Cycles");
+		vehicleQualifierTypeExclusions.add("Tracked Vehicles");
+		// osgb:use
+		vehicleQualifierTypeExclusions.add("Taxi");
+		vehicleQualifierTypeExclusions.add("Taxis"); // Added from analysing the actual data
+		vehicleQualifierTypeExclusions.add("School Bus");
+		vehicleQualifierTypeExclusions.add("Patron");
+		vehicleQualifierTypeExclusions.add("Access");
+		vehicleQualifierTypeExclusions.add("Resident");
+		vehicleQualifierTypeExclusions.add("Emergency Vehicle");
+		vehicleQualifierTypeExclusions.add("Public Transport");
+		vehicleQualifierTypeExclusions.add("Authorised Vehicle");
+		vehicleQualifierTypeExclusions.add("Local Bus");
+		vehicleQualifierTypeExclusions.add("Local Buses"); // Added from analysing the actual data
+		vehicleQualifierTypeExclusions.add("Escorted Traffic");
+		vehicleQualifierTypeExclusions.add("Loading And Unloading"); // Added from analysing the
+																	 // actual data
+
+		vehicleQualifierTypeInclusions.add("Motor Vehicles");
+		vehicleQualifierTypeInclusions.add("All Vehicles");
+
+		environmentMaxSpeedMap.put("Urban:Single Carriageway", "" + THIRTY_MPH_IN_KPH);
+	}
 
 	private void addNationalUKSpeedMapping()
-    {
-	    defaultSpeedMap.put("GB:motorway", SEVENTY_MPH_IN_KPH);
-	    defaultSpeedMap.put("GB:nsl_dual", SEVENTY_MPH_IN_KPH);
-	    defaultSpeedMap.put("GB:nsl_single", SIXTY_MPH_IN_KPH);
-    }
+	{
+		defaultSpeedMap.put("GB:motorway", SEVENTY_MPH_IN_KPH);
+		defaultSpeedMap.put("GB:nsl_dual", SEVENTY_MPH_IN_KPH);
+		defaultSpeedMap.put("GB:nsl_single", SIXTY_MPH_IN_KPH);
+	}
 
 	private void addRoadTypeUKSpeedMapping()
-    {
-	    defaultSpeedMap.put("Motorway", SEVENTY_MPH_IN_KPH);
-        defaultSpeedMap.put("A Road", SIXTY_MPH_IN_KPH);
-        defaultSpeedMap.put("B Road", THIRTY_MPH_IN_KPH);
-        defaultSpeedMap.put("Minor Road", THIRTY_MPH_IN_KPH);
-        defaultSpeedMap.put("Local Street", THIRTY_MPH_IN_KPH);
-        //        defaultSpeedMap.put("Alley", 35);
-        defaultSpeedMap.put("A Road-Single Carriageway", SIXTY_MPH_IN_KPH);
-        defaultSpeedMap.put("B Road", THIRTY_MPH_IN_KPH);
-        defaultSpeedMap.put("Minor Road", THIRTY_MPH_IN_KPH);
-        defaultSpeedMap.put("Local Street", THIRTY_MPH_IN_KPH);
-        //        defaultSpeedMap.put("Alley", 35);
-        defaultSpeedMap.put("Motorway", SEVENTY_MPH_IN_KPH);
-        defaultSpeedMap.put("A Road", SIXTY_MPH_IN_KPH);
-        defaultSpeedMap.put("B Road", THIRTY_MPH_IN_KPH);
-        defaultSpeedMap.put("Minor Road", THIRTY_MPH_IN_KPH);
-        defaultSpeedMap.put("Local Street", THIRTY_MPH_IN_KPH);
-        //        defaultSpeedMap.put("Alley", 35);
-        defaultSpeedMap.put("A Road-Dual Carriageway", SIXTY_MPH_IN_KPH);
-        defaultSpeedMap.put("B Road", THIRTY_MPH_IN_KPH);
-        defaultSpeedMap.put("Minor Road", THIRTY_MPH_IN_KPH);
-        defaultSpeedMap.put("Local Street", THIRTY_MPH_IN_KPH);
-        //        defaultSpeedMap.put("Alley", 35);
-        defaultSpeedMap.put("Motorway-Slip Road", SEVENTY_MPH_IN_KPH);
-        defaultSpeedMap.put("A Road-Slip Road", SIXTY_MPH_IN_KPH);
-        defaultSpeedMap.put("B Road", THIRTY_MPH_IN_KPH);
-        defaultSpeedMap.put("Minor Road", THIRTY_MPH_IN_KPH);
-        defaultSpeedMap.put("Local Street", THIRTY_MPH_IN_KPH);
-        //        defaultSpeedMap.put("Alley", 35);
-        defaultSpeedMap.put("Motorway-Roundabout", SEVENTY_MPH_IN_KPH);
-        defaultSpeedMap.put("A Road-Roundabout", SIXTY_MPH_IN_KPH);
-        defaultSpeedMap.put("B Road-Roundabout", THIRTY_MPH_IN_KPH);
-        defaultSpeedMap.put("Minor Road-Roundabout", THIRTY_MPH_IN_KPH);
-        defaultSpeedMap.put("Local Street-Roundabout", THIRTY_MPH_IN_KPH);
-    }
-
-    /**
-     * Define the place of the speedBits in the edge flags for car.
-     */
-    @Override
-    public int defineWayBits( int index, int shift )
-    {
-        // first two bits are reserved for route handling in superclass
-        shift = super.defineWayBits(index, shift);
-        speedEncoder = new EncodedDoubleValue("Speed", shift, speedBits, speedFactor, defaultSpeedMap.get("secondary"), 
-                                              maxPossibleSpeed);
-        return shift + speedEncoder.getBits();
-    }
-
-    protected double getSpeed( Way way )
-    {
-    	String typeMax = way.getTag("maxspeed:type");
-    	Integer speed = defaultSpeedMap.get(typeMax);
-    	if(null==speed) {
-    		String highwayValue = way.getTag("highway");
-    		speed = defaultSpeedMap.get(highwayValue);
-    		if (speed == null)
-    			throw new IllegalStateException(toString() + ", no speed found for: " + highwayValue + ", tags: " + way);
-
-    		if (highwayValue.equals("track"))
-    		{
-    			String tt = way.getTag("tracktype");
-    			if (!Helper.isEmpty(tt))
-    			{
-    				Integer tInt = trackTypeSpeedMap.get(tt);
-    				if (tInt != null)
-    					speed = tInt;
-    			}
-    		}
-    	}
-
-        return speed;
-    }
-
-    @Override
-    public long acceptWay( Way way )
-    {
-        String highwayValue = way.getTag("highway");
-        if (highwayValue == null)
-        {
-            if (way.hasTag("route", ferries))
-            {
-                String motorcarTag = way.getTag("motorcar");
-                if (motorcarTag == null)
-                    motorcarTag = way.getTag("motor_vehicle");
-
-                if (motorcarTag == null && !way.hasTag("foot") && !way.hasTag("bicycle") || "yes".equals(motorcarTag))
-                    return acceptBit | ferryBit;
-            }
-            return 0;
-        }
-
-        if ("track".equals(highwayValue))
-        {
-            String tt = way.getTag("tracktype");
-            if (tt != null && !tt.equals("grade1") && !tt.equals("grade2") && !tt.equals("grade3"))
-                return 0;
-        }
-
-        // absolute barriers always block
-        if (way.hasTag("barrier", absoluteBarriers))
-            return 0;
-
-        // movable barriers block always for cars
-        if (way.hasTag("barrier", potentialBarriers))
-            return 0;
-
-
-        if (!defaultSpeedMap.containsKey(highwayValue))
-            return 0;
-
-        if (way.hasTag("impassable", "yes") || way.hasTag("status", "impassable"))
-            return 0;
-
-        // do not drive street cars into fords
-        boolean carsAllowed = way.hasTag(restrictions, intendedValues);
-        boolean hasFordFlag = way.hasTag("ford");
-        if (isBlockFords() && ("ford".equals(highwayValue) || hasFordFlag) && !carsAllowed)
-            return 0;
-
-        // check access restrictions
-        if (way.hasTag(restrictions, restrictedValues) && !carsAllowed)
-            return 0;
-
-        // do not drive cars over railways (sometimes incorrectly mapped!)
-        if (way.hasTag("railway") && !way.hasTag("railway", acceptedRailways))
-            return 0;
-
-        return acceptBit;
-    }
-
-    @Override
-    public long handleWayTags( Way way, long allowed, long relationFlags )
-    {
-        if (!isAccept(allowed))
-            return 0;
-
-        long encoded;
-        if (!isFerry(allowed))
-        {
-            // get assumed speed from highway type
-            double speed = getSpeed(way);
-
-            // set the max speed tag for the environment
-            String environment = way.getTag("environment");
-            if (!Helper.isEmpty(environment))
-            {
-                String maxSpeed = environmentMaxSpeedMap.get(environment);
-                if (!Helper.isEmpty(maxSpeed)) {
-                    //                    System.out.println(">>>>>>>>>>>>>>> Set max speed to " + maxSpeed);
-                    way.setTag("maxspeed", maxSpeed);
-                }
-            }
-
-            speed = applyMaxSpeed(way, speed, true);
-
-            // limit speed to max 30 km/h if bad surface
-            if (speed > 30 && way.hasTag("surface", badSurfaceSpeedMap))
-                speed = 30;
-
-            encoded = setSpeed(0, speed);
-
-            boolean isRoundabout = way.hasTag("junction", "roundabout");
-            if (isRoundabout)
-                encoded = setBool(encoded, K_ROUNDABOUT, true);
-
-            boolean isOneway = way.hasTag("oneway", oneways)
-                    || way.hasTag("vehicle:backward")
-                    || way.hasTag("vehicle:forward")
-                    || way.hasTag("motor_vehicle:backward")
-                    || way.hasTag("motor_vehicle:forward");
-
-            if (isOneway || isRoundabout)
-            {
-                boolean isBackward = way.hasTag("oneway", "-1")
-                        || way.hasTag("vehicle:forward", "no")
-                        || way.hasTag("motor_vehicle:forward", "no");
-                if (isBackward)
-                    encoded |= backwardBit;
-                else
-                    encoded |= forwardBit;
-            } else
-                encoded |= directionBitMask;
-
-        } else
-        {
-            encoded = handleFerryTags(way, defaultSpeedMap.get("living_street"), defaultSpeedMap.get("service"), defaultSpeedMap.get("residential"));
-            encoded |= directionBitMask;
-        }
-        return encoded;
-    }
-
-    public String getWayInfo(Way way )
-    {
-        String str = "";
-        String highwayValue = way.getTag("highway");
-        // for now only motorway links
-        if ("motorway_link".equals(highwayValue))
-        {
-            String destination = way.getTag("destination");
-            if (!Helper.isEmpty(destination))
-            {
-                int counter = 0;
-                for (String d : destination.split(";"))
-                {
-                    if (d.trim().isEmpty())
-                        continue;
-
-                    if (counter > 0)
-                        str += ", ";
-
-                    str += d.trim();
-                    counter++;
-                }
-            }
-        }
-        if (str.isEmpty())
-            return str;
-        // I18N
-        if (str.contains(","))
-            return "destinations: " + str;
-        else
-            return "destination: " + str;
-    }
-
-    @Override
-    public String toString()
-    {
-        return "car";
-    }
-
-    @Override
-    public long handleRelationTags(Relation relation, long oldRelationFlags) {
-        return oldRelationFlags;
-    }
+	{
+		defaultSpeedMap.put("Motorway", SEVENTY_MPH_IN_KPH);
+		defaultSpeedMap.put("A Road", SIXTY_MPH_IN_KPH);
+		defaultSpeedMap.put("B Road", THIRTY_MPH_IN_KPH);
+		defaultSpeedMap.put("Minor Road", THIRTY_MPH_IN_KPH);
+		defaultSpeedMap.put("Local Street", THIRTY_MPH_IN_KPH);
+		// defaultSpeedMap.put("Alley", 35);
+		defaultSpeedMap.put("A Road-Single Carriageway", SIXTY_MPH_IN_KPH);
+		defaultSpeedMap.put("B Road", THIRTY_MPH_IN_KPH);
+		defaultSpeedMap.put("Minor Road", THIRTY_MPH_IN_KPH);
+		defaultSpeedMap.put("Local Street", THIRTY_MPH_IN_KPH);
+		// defaultSpeedMap.put("Alley", 35);
+		defaultSpeedMap.put("Motorway", SEVENTY_MPH_IN_KPH);
+		defaultSpeedMap.put("A Road", SIXTY_MPH_IN_KPH);
+		defaultSpeedMap.put("B Road", THIRTY_MPH_IN_KPH);
+		defaultSpeedMap.put("Minor Road", THIRTY_MPH_IN_KPH);
+		defaultSpeedMap.put("Local Street", THIRTY_MPH_IN_KPH);
+		// defaultSpeedMap.put("Alley", 35);
+		defaultSpeedMap.put("A Road-Dual Carriageway", SIXTY_MPH_IN_KPH);
+		defaultSpeedMap.put("B Road", THIRTY_MPH_IN_KPH);
+		defaultSpeedMap.put("Minor Road", THIRTY_MPH_IN_KPH);
+		defaultSpeedMap.put("Local Street", THIRTY_MPH_IN_KPH);
+		// defaultSpeedMap.put("Alley", 35);
+		defaultSpeedMap.put("Motorway-Slip Road", SEVENTY_MPH_IN_KPH);
+		defaultSpeedMap.put("A Road-Slip Road", SIXTY_MPH_IN_KPH);
+		defaultSpeedMap.put("B Road", THIRTY_MPH_IN_KPH);
+		defaultSpeedMap.put("Minor Road", THIRTY_MPH_IN_KPH);
+		defaultSpeedMap.put("Local Street", THIRTY_MPH_IN_KPH);
+		// defaultSpeedMap.put("Alley", 35);
+		defaultSpeedMap.put("Motorway-Roundabout", SEVENTY_MPH_IN_KPH);
+		defaultSpeedMap.put("A Road-Roundabout", SIXTY_MPH_IN_KPH);
+		defaultSpeedMap.put("B Road-Roundabout", THIRTY_MPH_IN_KPH);
+		defaultSpeedMap.put("Minor Road-Roundabout", THIRTY_MPH_IN_KPH);
+		defaultSpeedMap.put("Local Street-Roundabout", THIRTY_MPH_IN_KPH);
+	}
+
+	/**
+	 * Define the place of the speedBits in the edge flags for car.
+	 */
+	@Override
+	public int defineWayBits( int index, int shift )
+	{
+		// first two bits are reserved for route handling in superclass
+		shift = super.defineWayBits(index, shift);
+		speedEncoder = new EncodedDoubleValue("Speed", shift, speedBits, speedFactor,
+		        defaultSpeedMap.get("secondary"), maxPossibleSpeed);
+		return shift + speedEncoder.getBits();
+	}
+
+	protected double getSpeed( Way way )
+	{
+		String typeMax = way.getTag("maxspeed:type");
+		Integer speed = defaultSpeedMap.get(typeMax);
+		if (null == speed)
+		{
+			String highwayValue = way.getTag("highway");
+			speed = defaultSpeedMap.get(highwayValue);
+			if (speed == null)
+				throw new IllegalStateException(toString() + ", no speed found for: "
+				        + highwayValue + ", tags: " + way);
+
+			if (highwayValue.equals("track"))
+			{
+				String tt = way.getTag("tracktype");
+				if (!Helper.isEmpty(tt))
+				{
+					Integer tInt = trackTypeSpeedMap.get(tt);
+					if (tInt != null)
+						speed = tInt;
+				}
+			}
+		}
+		return speed;
+	}
+
+	@Override
+	public long acceptWay( Way way )
+	{
+		String highwayValue = way.getTag("highway");
+		if (highwayValue == null)
+		{
+			if (way.hasTag("route", ferries))
+			{
+				String motorcarTag = way.getTag("motorcar");
+				if (motorcarTag == null)
+					motorcarTag = way.getTag("motor_vehicle");
+
+				if (motorcarTag == null && !way.hasTag("foot") && !way.hasTag("bicycle")
+				        || "yes".equals(motorcarTag))
+					return acceptBit | ferryBit;
+			}
+			return 0;
+		}
+
+		if ("track".equals(highwayValue))
+		{
+			String tt = way.getTag("tracktype");
+			if (tt != null && !tt.equals("grade1") && !tt.equals("grade2") && !tt.equals("grade3"))
+				return 0;
+		}
+
+		// absolute barriers always block
+		if (way.hasTag("barrier", absoluteBarriers))
+			return 0;
+
+		// movable barriers block always for cars
+		if (way.hasTag("barrier", potentialBarriers))
+			return 0;
+
+		if (!defaultSpeedMap.containsKey(highwayValue))
+			return 0;
+
+		if (way.hasTag("impassable", "yes") || way.hasTag("status", "impassable"))
+			return 0;
+
+		// do not drive street cars into fords
+		boolean carsAllowed = way.hasTag(restrictions, intendedValues);
+		boolean hasFordFlag = way.hasTag("ford");
+		if (isBlockFords() && ("ford".equals(highwayValue) || hasFordFlag) && !carsAllowed)
+			return 0;
+
+		// check access restrictions
+		if (way.hasTag(restrictions, restrictedValues) && !carsAllowed)
+			return 0;
+
+		// do not drive cars over railways (sometimes incorrectly mapped!)
+		if (way.hasTag("railway") && !way.hasTag("railway", acceptedRailways))
+			return 0;
+
+		return acceptBit;
+	}
+
+	@Override
+	public long handleWayTags( Way way, long allowed, long relationFlags )
+	{
+		if (!isAccept(allowed))
+			return 0;
+		long encoded;
+		if (!isFerry(allowed))
+		{
+
+			// get assumed speed from highway type
+			double speed = getSpeed(way);
+
+			// set the max speed tag for the environment
+			String environment = way.getTag("environment");
+			if (!Helper.isEmpty(environment))
+			{
+				String maxSpeed = environmentMaxSpeedMap.get(environment);
+				if (!Helper.isEmpty(maxSpeed))
+				{
+					// System.out.println(">>>>>>>>>>>>>>> Set max speed to " + maxSpeed);
+					way.setTag("maxspeed", maxSpeed);
+				}
+			}
+			speed = applyMaxSpeed(way, speed, true);
+			// limit speed to max 30 km/h if bad surface
+			if (speed > 30 && way.hasTag("surface", badSurfaceSpeedMap))
+				speed = 30;
+
+			encoded = setSpeed(0, speed);
+
+			boolean isRoundabout = way.hasTag("junction", "roundabout");
+			if (isRoundabout)
+				encoded = setBool(encoded, K_ROUNDABOUT, true);
+
+			boolean isOneway = way.hasTag("oneway", oneways) || way.hasTag("vehicle:backward")
+			        || way.hasTag("vehicle:forward") || way.hasTag("motor_vehicle:backward")
+			        || way.hasTag("motor_vehicle:forward");
+
+			if (isOneway || isRoundabout)
+			{
+				boolean isBackward = way.hasTag("oneway", "-1")
+				        || way.hasTag("vehicle:forward", "no")
+				        || way.hasTag("motor_vehicle:forward", "no");
+				if (isBackward)
+					encoded |= backwardBit;
+				else
+					encoded |= forwardBit;
+			} else
+				encoded |= directionBitMask;
+
+		} else
+		{
+			encoded = handleFerryTags(way, defaultSpeedMap.get("living_street"),
+			        defaultSpeedMap.get("service"), defaultSpeedMap.get("residential"));
+			encoded |= directionBitMask;
+		}
+
+		return encoded;
+	}
+
+	public String getWayInfo( Way way )
+	{
+		String str = "";
+		String highwayValue = way.getTag("highway");
+		// for now only motorway links
+		if ("motorway_link".equals(highwayValue))
+		{
+			String destination = way.getTag("destination");
+			if (!Helper.isEmpty(destination))
+			{
+				int counter = 0;
+				for (String d : destination.split(";"))
+				{
+					if (d.trim().isEmpty())
+						continue;
+
+					if (counter > 0)
+						str += ", ";
+
+					str += d.trim();
+					counter++;
+				}
+			}
+		}
+		if (str.isEmpty())
+			return str;
+		// I18N
+		if (str.contains(","))
+			return "destinations: " + str;
+		else
+			return "destination: " + str;
+	}
+
+	@Override
+	public String toString()
+	{
+		return "car";
+	}
+
+	@Override
+	public long handleRelationTags( Relation relation, long oldRelationFlags )
+	{
+		return oldRelationFlags;
+	}
 }
diff --git a/core/src/main/java/com/graphhopper/routing/util/EmergencyVehicleFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/EmergencyVehicleFlagEncoder.java
index cea014217a..73216ab678 100644
--- a/core/src/main/java/com/graphhopper/routing/util/EmergencyVehicleFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/EmergencyVehicleFlagEncoder.java
@@ -40,8 +40,13 @@ public long handleWayTags( Way way, long allowed, long relationFlags )
 	{
 	    long superHandled =  super.handleWayTags(way, allowed, relationFlags);
 	    System.err.println("SUPER"+ superHandled);
-	    return superHandled |= startStopEncoder.setValue(superHandled, way.hasTag("access", "no")?1:0);
+	    return superHandled |= startStopEncoder.setValue(superHandled, noThroughWayAccess(way));
 	}
+
+	private int noThroughWayAccess( Way way )
+    {
+	    return way.hasTag("access", "no")||way.hasTag("service", "alley")?1:0;
+    }
 	
 	/**
      * Define the place of the speedBits in the edge flags for car.
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/AlleyTest.java b/core/src/test/java/com/graphhopper/reader/osgb/AlleyTest.java
index 07c7a98536..2e3d041554 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/AlleyTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/AlleyTest.java
@@ -13,6 +13,7 @@
 
 public class AlleyTest extends AbstractOsItnReaderTest {
 
+	//TODO update for new behavious related to no through roads.
     /**
      * Alleys are not supported routes. This test is a simple (node A) - alley - (node B) - A Road - (node C) network.
      * This means the alley should not be traversible and only nodes B and C should be present.
@@ -28,9 +29,10 @@ public void testAlley() throws IOException {
         readGraphFile(graph, file);
         final EdgeExplorer explorer = graph.createEdgeExplorer(carOutEdges);
         printNodes(explorer, 5);
-        assertEquals(2, graph.getNodes());
-        assertEquals(1, count(explorer.setBaseNode(0)));
+        assertEquals(3, graph.getNodes());
+        assertEquals(2, count(explorer.setBaseNode(0)));
         assertEquals(1, count(explorer.setBaseNode(1)));
+        assertEquals(1, count(explorer.setBaseNode(2)));
     }
 
 }
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/EmergencyVehicleFlagEncoderTest.java b/core/src/test/java/com/graphhopper/reader/osgb/EmergencyVehicleFlagEncoderTest.java
new file mode 100644
index 0000000000..335ab298b5
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/EmergencyVehicleFlagEncoderTest.java
@@ -0,0 +1,48 @@
+package com.graphhopper.reader.osgb;
+
+import static org.junit.Assert.assertEquals;
+
+import java.io.File;
+import java.io.IOException;
+
+import org.junit.Before;
+import org.junit.Test;
+
+import com.graphhopper.routing.util.DefaultEdgeFilter;
+import com.graphhopper.routing.util.EmergencyVehicleFlagEncoder;
+import com.graphhopper.routing.util.EncodingManager;
+import com.graphhopper.storage.GraphHopperStorage;
+
+public class EmergencyVehicleFlagEncoderTest extends AbstractOsItnReaderTest{
+
+    private EmergencyVehicleFlagEncoder emvEncoder;
+    
+    @Before
+    public void initEncoding() {
+        if (turnCosts) {
+            emvEncoder = new EmergencyVehicleFlagEncoder("speedBits=5|speedfactor=5|turncosts=3");
+        } else {
+        	emvEncoder = new EmergencyVehicleFlagEncoder("speedBits=5|speedfactor=5|turncosts=0");
+        }
+
+        carOutEdges = new DefaultEdgeFilter(emvEncoder, false, true);
+        carInEdges = new DefaultEdgeFilter(emvEncoder, true, false);
+        encodingManager = createEncodingManager();
+    }
+
+	protected EncodingManager createEncodingManager() {
+        return new EncodingManager(emvEncoder);
+    }
+    
+    @Test
+    public void testReadSimplePrivateCrossRoads() throws IOException {
+        final boolean turnRestrictionsImport = false;
+        final boolean is3D = false;
+        final GraphHopperStorage graph = configureStorage(turnRestrictionsImport, is3D);
+
+        final File file = new File("./src/test/resources/com/graphhopper/reader/os-itn-simple-private-crossroad.xml");
+        readGraphFile(graph, file);
+        assertEquals(5, graph.getNodes());
+        checkSimpleNodeNetwork(graph);
+    }
+}
