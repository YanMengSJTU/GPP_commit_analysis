diff --git a/acceptancetesting/src/test/cucumber/Routing-Errors.feature b/acceptancetesting/src/test/cucumber/Routing-Errors.feature
index 4cc7276a14..39e6dab057 100644
--- a/acceptancetesting/src/test/cucumber/Routing-Errors.feature
+++ b/acceptancetesting/src/test/cucumber/Routing-Errors.feature
@@ -475,8 +475,9 @@ Feature: Verify a route from A to B
       | vehicleType | avoidances | routeType | calc_points | responseFormat | errorMessage                                                                                                              | statusCode |
       | car         |            | fastest   | true        | json           | Parameter calc_pointSSS is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
 
+# http method
   @Routing @ErrorMessages
-  Scenario Outline: Invalid http method "PUT"
+  Scenario Outline: http methods "PUT/POST/DEL/GET"
     Given I have route point as
       | pointA              | pointB              |
       | 50.729961,-3.524853 | 50.723364,-3.523895 |
@@ -484,11 +485,15 @@ Feature: Verify a route from A to B
     And I have avoidances as "<avoidances>"
     And I have weighting as "<routeType>"
     And I have type as "<responseFormat>"
-    And I request for HTTP "PUT" method
+    And I request for HTTP "<httpMethod>" method
     When I request for a route
     Then I should be able to verify the response message as "<errorMessage>"
     Then I should be able to verify the statuscode as "<statusCode>"
 
     Examples: 
-      | vehicleType | avoidances | routeType | responseFormat | errorMessage                                                                                                     | statusCode |
-      | car         |            | fastest   | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 405        |
+      | vehicleType | avoidances | routeType | httpMethod|responseFormat | errorMessage                                                                                                     | statusCode |
+      | car         |            | fastest   | PUT|json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 405        |
+      | car         |            | fastest   | DEL|json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 405        |
+      | car         |            | fastest   | POST|json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 405        |
+      | car         |            | fastest   | GET|json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 405        |
+      
diff --git a/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java b/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
index 8291edfe4e..68d6b09e15 100644
--- a/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
+++ b/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
@@ -40,6 +40,7 @@
 import javax.xml.transform.dom.DOMSource;
 import javax.xml.transform.stream.StreamResult;
 
+import org.eclipse.jetty.http.HttpStatus;
 import org.json.JSONObject;
 import org.w3c.dom.Document;
 import org.w3c.dom.Element;
@@ -76,7 +77,7 @@
 
 	@Override
 	public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes )
-	        throws ServletException, IOException
+			throws ServletException, IOException
 	{
 		List<GHPoint> infoPoints = getPoints(httpReq, "point");
 
@@ -116,7 +117,7 @@ public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes )
 		if (!validLocale)
 		{
 			StringBuilder errMesg = new StringBuilder(localeStr)
-			        .append(" is not a valid value for parameter locale. Valid values are ");
+			.append(" is not a valid value for parameter locale. Valid values are ");
 			for (int i = 0; i < TranslationMap.LOCALES.size(); i++)
 			{
 				String validLocaleStr = TranslationMap.LOCALES.get(i);
@@ -132,62 +133,62 @@ public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes )
 			}
 			ghRsp = new GHResponse().addError(new IllegalArgumentException(errMesg.toString()));
 		} else if (!AlgorithmOptions.ASTAR.equalsIgnoreCase(algoStr)
-		        && !AlgorithmOptions.ASTAR_BI.equalsIgnoreCase(algoStr)
-		        && !AlgorithmOptions.DIJKSTRA.equalsIgnoreCase(algoStr)
-		        && !AlgorithmOptions.DIJKSTRA_BI.equalsIgnoreCase(algoStr)
-		        && !AlgorithmOptions.DIJKSTRA_ONE_TO_MANY.equalsIgnoreCase(algoStr))
+				&& !AlgorithmOptions.ASTAR_BI.equalsIgnoreCase(algoStr)
+				&& !AlgorithmOptions.DIJKSTRA.equalsIgnoreCase(algoStr)
+				&& !AlgorithmOptions.DIJKSTRA_BI.equalsIgnoreCase(algoStr)
+				&& !AlgorithmOptions.DIJKSTRA_ONE_TO_MANY.equalsIgnoreCase(algoStr))
 		{
 			String errMesg = String
-			        .format("%s is not a valid value for parameter algorithm. Valid values are %s, %s, %s, %s or %s",
-			                algoStr, AlgorithmOptions.ASTAR, AlgorithmOptions.ASTAR_BI,
-			                AlgorithmOptions.DIJKSTRA, AlgorithmOptions.DIJKSTRA_BI,
-			                AlgorithmOptions.DIJKSTRA_ONE_TO_MANY);
+					.format("%s is not a valid value for parameter algorithm. Valid values are %s, %s, %s, %s or %s",
+							algoStr, AlgorithmOptions.ASTAR, AlgorithmOptions.ASTAR_BI,
+							AlgorithmOptions.DIJKSTRA, AlgorithmOptions.DIJKSTRA_BI,
+							AlgorithmOptions.DIJKSTRA_ONE_TO_MANY);
 			ghRsp = new GHResponse().addError(new IllegalArgumentException(errMesg));
 		} else if (!"true".equalsIgnoreCase(instructionsString)
-		        && !"false".equalsIgnoreCase(instructionsString))
+				&& !"false".equalsIgnoreCase(instructionsString))
 		{
 			String errMesg = String
-			        .format("%s is not a valid value for parameter instructions. Valid values are true or false",
-			                instructionsString);
+					.format("%s is not a valid value for parameter instructions. Valid values are true or false",
+							instructionsString);
 			ghRsp = new GHResponse().addError(new IllegalArgumentException(errMesg));
 		} else if (!"true".equalsIgnoreCase(pointsEncodedString)
-		        && !"false".equalsIgnoreCase(pointsEncodedString))
+				&& !"false".equalsIgnoreCase(pointsEncodedString))
 		{
 			String errMesg = String
-			        .format("%s is not a valid value for parameter pointsEncodedString. Valid values are true or false",
-			                pointsEncodedString);
+					.format("%s is not a valid value for parameter pointsEncodedString. Valid values are true or false",
+							pointsEncodedString);
 			ghRsp = new GHResponse().addError(new IllegalArgumentException(errMesg));
 		} else if (!"true".equalsIgnoreCase(calcPointsString)
-				&& !"false".equalsIgnoreCase(calcPointsString))
+		        && !"false".equalsIgnoreCase(calcPointsString))
 		{
 			String errMesg = String
-					.format("%s is not a valid value for parameter calc_points. Valid values are true or false",
-							calcPointsString);
+			        .format("%s is not a valid value for parameter calc_points. Valid values are true or false",
+			                calcPointsString);
 			ghRsp = new GHResponse().addError(new IllegalArgumentException(errMesg));
 		} else if (!"true".equalsIgnoreCase(debugString) && !"false".equalsIgnoreCase(debugString))
 		{
 			String errMesg = String.format(
-			        "%s is not a valid value for parameter debug. Valid values are true or false",
-			        debugString);
+					"%s is not a valid value for parameter debug. Valid values are true or false",
+					debugString);
 			ghRsp = new GHResponse().addError(new IllegalArgumentException(errMesg));
 		} else if (!"true".equalsIgnoreCase(prettyString)
-		        && !"false".equalsIgnoreCase(prettyString))
+				&& !"false".equalsIgnoreCase(prettyString))
 		{
 			String errMesg = String.format(
-			        "%s is not a valid value for parameter pretty. Valid values are true or false",
-			        prettyString);
+					"%s is not a valid value for parameter pretty. Valid values are true or false",
+					prettyString);
 			ghRsp = new GHResponse().addError(new IllegalArgumentException(errMesg));
 		} else if (!hopper.getEncodingManager().supports(vehicleStr))
 		{
 			String supported = hopper.getGraph().getEncodingManager().toString();
 			String errMesg = String.format(
-			        "Vehicle %s is not a valid vehicle. Valid vehicles are %s", vehicleStr,
-			        supported);
+					"Vehicle %s is not a valid vehicle. Valid vehicles are %s", vehicleStr,
+					supported);
 			ghRsp = new GHResponse().addError(new IllegalArgumentException(errMesg));
 		} else if (enableElevation && !hopper.hasElevation())
 		{
 			ghRsp = new GHResponse().addError(new IllegalArgumentException(
-			        "Elevation not supported!"));
+					"Elevation not supported!"));
 		} else
 		{
 			FlagEncoder algoVehicle = hopper.getEncodingManager().getEncoder(vehicleStr);
@@ -195,25 +196,25 @@ public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes )
 
 			initHints(request, httpReq.getParameterMap());
 			request.setVehicle(algoVehicle.toString()).setWeighting(weighting)
-			        .setAlgorithm(algoStr).setLocale(localeStr).getHints()
-			        .put("calcPoints", calcPoints).put("instructions", enableInstructions)
-			        .put("wayPointMaxDistance", minPathPrecision);
+			.setAlgorithm(algoStr).setLocale(localeStr).getHints()
+			.put("calcPoints", calcPoints).put("instructions", enableInstructions)
+			.put("wayPointMaxDistance", minPathPrecision);
 
 			ghRsp = hopper.route(request);
 		}
 
 		float took = sw.stop().getSeconds();
 		String infoStr = httpReq.getRemoteAddr() + " " + httpReq.getLocale() + " "
-		        + httpReq.getHeader("User-Agent");
+				+ httpReq.getHeader("User-Agent");
 		String logStr = httpReq.getQueryString() + " " + infoStr + " " + infoPoints + ", took:"
-		        + took + ", " + algoStr + ", " + weighting + ", " + vehicleStr;
+				+ took + ", " + algoStr + ", " + weighting + ", " + vehicleStr;
 
 		if (ghRsp.hasErrors())
 			logger.error(logStr + ", errors:" + ghRsp.getErrors());
 		else
 			logger.info(logStr + ", distance: " + ghRsp.getDistance() + ", time:"
-			        + Math.round(ghRsp.getTime() / 60000f) + "min, points:"
-			        + ghRsp.getPoints().getSize() + ", debug - " + ghRsp.getDebugInfo());
+					+ Math.round(ghRsp.getTime() / 60000f) + "min, points:"
+					+ ghRsp.getPoints().getSize() + ", debug - " + ghRsp.getDebugInfo());
 
 		if (writeGPX)
 		{
@@ -230,12 +231,12 @@ public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes )
 			if (!"json".equalsIgnoreCase(type) || (!"jsonp".equalsIgnoreCase(type) && jsonpAllowed))
 			{
 				String errorMessage = type
-				        + " is not a valid value for parameter type. Valid values are ";
+						+ " is not a valid value for parameter type. Valid values are ";
 				errorMessage += jsonpAllowed ? "JSON, GPX or JSONP." : "GPX or JSON.";
 				ghRsp.addError(new IllegalArgumentException(errorMessage));
 			}
 			Map<String, Object> map = createJson(ghRsp, calcPoints, pointsEncoded, enableElevation,
-			        enableInstructions);
+					enableInstructions);
 			Object infoMap = map.get("info");
 			if (infoMap != null)
 				((Map) infoMap).put("took", Math.round(took * 1000));
@@ -249,7 +250,7 @@ public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes )
 	}
 
 	protected String createGPXString( HttpServletRequest req, HttpServletResponse res,
-	        GHResponse rsp )
+			GHResponse rsp )
 	{
 		boolean includeElevation = getBooleanParam(req, "elevation", false);
 		res.setCharacterEncoding("UTF-8");
@@ -310,8 +311,8 @@ String errorsToXML( List<Throwable> list )
 	}
 
 	protected Map<String, Object> createJson( GHResponse rsp, boolean calcPoints,
-	        boolean pointsEncoded, boolean includeElevation, boolean enableInstructions )
-	{
+			boolean pointsEncoded, boolean includeElevation, boolean enableInstructions )
+			{
 		Map<String, Object> json = new HashMap<String, Object>();
 
 		if (rsp.hasErrors())
@@ -320,7 +321,7 @@ String errorsToXML( List<Throwable> list )
 			json.put("error", map);
 			Throwable throwable = rsp.getErrors().get(0);
 			map.put("message", throwable.getMessage());
-			map.put("statuscode", "404");
+			map.put("statuscode", "" + HttpStatus.BAD_REQUEST_400);
 			List<Map<String, String>> list = new ArrayList<Map<String, String>>();
 			for (Throwable t : rsp.getErrors())
 			{
@@ -352,7 +353,7 @@ String errorsToXML( List<Throwable> list )
 				{
 					BBox maxBounds = hopper.getGraph().getBounds();
 					BBox maxBounds2D = new BBox(maxBounds.minLon, maxBounds.maxLon,
-					        maxBounds.minLat, maxBounds.maxLat);
+							maxBounds.minLat, maxBounds.maxLat);
 					jsonPath.put("bbox", rsp.calcRouteBBox(maxBounds2D).toGeoJson());
 				}
 
@@ -367,7 +368,7 @@ String errorsToXML( List<Throwable> list )
 			json.put("paths", Collections.singletonList(jsonPath));
 		}
 		return json;
-	}
+			}
 
 	protected Object createPoints( PointList points, boolean pointsEncoded, boolean includeElevation )
 	{
