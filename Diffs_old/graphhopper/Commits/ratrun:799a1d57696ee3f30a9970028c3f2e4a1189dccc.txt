diff --git a/core/src/main/java/com/graphhopper/routing/lm/LMAlgoFactoryDecorator.java b/core/src/main/java/com/graphhopper/routing/lm/LMAlgoFactoryDecorator.java
index 112a1f5f55..5da80a010b 100644
--- a/core/src/main/java/com/graphhopper/routing/lm/LMAlgoFactoryDecorator.java
+++ b/core/src/main/java/com/graphhopper/routing/lm/LMAlgoFactoryDecorator.java
@@ -24,7 +24,6 @@
 import com.graphhopper.routing.RoutingAlgorithmFactory;
 import com.graphhopper.routing.RoutingAlgorithmFactoryDecorator;
 import com.graphhopper.routing.util.HintsMap;
-import com.graphhopper.routing.util.TraversalMode;
 import com.graphhopper.routing.weighting.AbstractWeighting;
 import com.graphhopper.routing.weighting.Weighting;
 import com.graphhopper.storage.Graph;
@@ -44,9 +43,6 @@
 import java.util.concurrent.ExecutorCompletionService;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.atomic.AtomicBoolean;
-import java.util.concurrent.atomic.AtomicInteger;
-
-import static com.graphhopper.util.Parameters.Landmark.DISABLE;
 
 /**
  * This class implements the A*, landmark and triangulation (ALT) decorator.
@@ -223,8 +219,10 @@ public int size() {
 
     @Override
     public RoutingAlgorithmFactory getDecoratedAlgorithmFactory(RoutingAlgorithmFactory defaultAlgoFactory, HintsMap map) {
-        boolean disableLM = map.getBool(DISABLE, false);
-        if (!isEnabled() || disablingAllowed && disableLM)
+        // for now do not allow mixing CH&LM #1082
+        boolean disableCH = map.getBool(Parameters.CH.DISABLE, false);
+        boolean disableLM = map.getBool(Parameters.Landmark.DISABLE, false);
+        if (!isEnabled() || disablingAllowed && disableLM || !disableCH)
             return defaultAlgoFactory;
 
         if (preparations.isEmpty())
@@ -235,7 +233,7 @@ public RoutingAlgorithmFactory getDecoratedAlgorithmFactory(RoutingAlgorithmFact
                 return new LMRAFactory(p, defaultAlgoFactory);
         }
 
-        // if the initial encoder&weighting has certain properies we could cross query it but for now avoid this
+        // if the initial encoder&weighting has certain properties we could cross query it but for now avoid this
         return defaultAlgoFactory;
     }
 
diff --git a/reader-osm/src/test/java/com/graphhopper/GraphHopperIT.java b/reader-osm/src/test/java/com/graphhopper/GraphHopperIT.java
index 3c8db99b3d..23271611d8 100644
--- a/reader-osm/src/test/java/com/graphhopper/GraphHopperIT.java
+++ b/reader-osm/src/test/java/com/graphhopper/GraphHopperIT.java
@@ -858,18 +858,7 @@ public void testFlexMode_631() {
         assertEquals(3587, bestPath.getDistance(), 1);
         assertEquals(90, bestPath.getPoints().getSize());
 
-        // speed² mode is currently less optimal than CH so just check different nodes and correctness
-        req.getHints().put(Landmark.DISABLE, false);
-        req.getHints().put(CH.DISABLE, false);
-        rsp = tmpHopper.route(req);
-
-        long speed2Sum = rsp.getHints().getLong("visited_nodes.sum", 0);
-        assertTrue("Visited nodes for speed² mode should be different but " + speed2Sum + " == " + chSum, speed2Sum != chSum);
-        assertTrue("Visited nodes for speed² mode should be different but " + speed2Sum + " == " + flexSum, speed2Sum != flexSum);
-
-        bestPath = rsp.getBest();
-        assertEquals(3587, bestPath.getDistance(), 1);
-        assertEquals(90, bestPath.getPoints().getSize());
+        // combining hybrid & speed mode is currently not possible and should be avoided: #1082
     }
 
     @Test
diff --git a/web/src/main/java/com/graphhopper/http/GHServer.java b/web/src/main/java/com/graphhopper/http/GHServer.java
index 82216a93aa..3c0828a712 100644
--- a/web/src/main/java/com/graphhopper/http/GHServer.java
+++ b/web/src/main/java/com/graphhopper/http/GHServer.java
@@ -48,6 +48,7 @@
     private final CmdArgs args;
     private final Logger logger = LoggerFactory.getLogger(getClass());
     private Server server;
+    private Injector injector;
 
     public GHServer(CmdArgs args) {
         this.args = args;
@@ -63,6 +64,10 @@ public void start() throws Exception {
     }
 
     public void start(Injector injector) throws Exception {
+        if (this.injector != null)
+            throw new IllegalArgumentException("Server already started");
+
+        this.injector = injector;
         ResourceHandler resHandler = new ResourceHandler();
         resHandler.setDirectoriesListed(false);
         resHandler.setWelcomeFiles(new String[]{
@@ -165,4 +170,8 @@ public void stop() {
             logger.error("Cannot stop jetty", ex);
         }
     }
+
+    Injector getInjector() {
+        return injector;
+    }
 }
diff --git a/web/src/test/java/com/graphhopper/http/BaseServletTester.java b/web/src/test/java/com/graphhopper/http/BaseServletTester.java
index 128070afa7..c83e420a1d 100644
--- a/web/src/test/java/com/graphhopper/http/BaseServletTester.java
+++ b/web/src/test/java/com/graphhopper/http/BaseServletTester.java
@@ -46,7 +46,7 @@
     private final OkHttpClient client = new OkHttpClient.Builder().connectTimeout(30, TimeUnit.SECONDS).readTimeout(30, TimeUnit.SECONDS).build();
     protected static int port;
     private static GHServer server;
-    protected Injector injector;
+    private Injector injector;
     private ObjectMapper objectMapper = new ObjectMapper();
 
     public static void shutdownJetty(boolean force) {
@@ -70,11 +70,15 @@ public void setUpGuice(Module... modules) {
      */
     public void setUpJetty(CmdArgs args) {
         if (injector != null)
-            throw new UnsupportedOperationException("do not call guice before");
+            throw new UnsupportedOperationException("Do not call guice before");
 
         bootJetty(args, 3);
     }
 
+    protected <T> T getInstance(Class<T> clazz) {
+        return server.getInjector().getInstance(clazz);
+    }
+
     private void bootJetty(CmdArgs args, int retryCount) {
         if (server != null)
             return;
@@ -92,7 +96,6 @@ private void bootJetty(CmdArgs args, int retryCount) {
             try {
                 LOGGER.info("Trying to start jetty at port " + port);
                 server.start(injector);
-//                server.join();
                 started = true;
                 break;
             } catch (Exception ex) {
diff --git a/web/src/test/java/com/graphhopper/http/GraphHopperLandmarksIT.java b/web/src/test/java/com/graphhopper/http/GraphHopperLandmarksIT.java
index ddd236db42..36ee7842d7 100644
--- a/web/src/test/java/com/graphhopper/http/GraphHopperLandmarksIT.java
+++ b/web/src/test/java/com/graphhopper/http/GraphHopperLandmarksIT.java
@@ -18,6 +18,7 @@
 package com.graphhopper.http;
 
 import com.fasterxml.jackson.databind.JsonNode;
+import com.graphhopper.GraphHopper;
 import com.graphhopper.util.CmdArgs;
 import com.graphhopper.util.Helper;
 import org.junit.AfterClass;
@@ -26,7 +27,8 @@
 
 import java.io.File;
 
-import static org.junit.Assert.*;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
 
 /**
  * Tests the creation of Landmarks and parsing the map.geo.json file
@@ -46,12 +48,12 @@ public static void cleanUp() {
     public void setUp() {
         CmdArgs args = new CmdArgs().
                 put("config", "../config-example.properties").
-                put("prepare.ch.weightings", "no").
+                put("prepare.ch.weightings", "fastest").
                 put("prepare.lm.weightings", "fastest").
                 put("datareader.file", "../core/files/belarus-east.osm.gz").
                 put("prepare.min_network_size", 0).
                 put("prepare.min_one_way_network_size", 0).
-                put("routing.lm.disabling_allowed", true).
+                put("routing.ch.disabling_allowed", true).
                 put("graph.location", DIR);
 
         // force landmark creation even for tiny networks:
@@ -70,19 +72,19 @@ public void testSimpleQuery() throws Exception {
 
     @Test
     public void testLandmarkDisconnect() throws Exception {
-
-
+        // if one algorithm is disabled then the following chain is executed: CH -> LM -> flexible
         // disconnected for landmarks
-        JsonNode json = query("point=55.99022,29.129734&point=56.007787,29.208355", 400);
+        JsonNode json = query("point=55.99022,29.129734&point=56.007787,29.208355&ch.disable=true", 400);
         JsonNode errorJson = json.get("message");
         assertTrue(errorJson.toString(), errorJson.toString().contains("Different subnetworks"));
 
-        // without lm it should work
-        json = query("point=55.99022,29.129734&point=56.007787,29.208355&lm.disable=true", 200);
+        // without landmarks it should work
+        GraphHopper hopper = getInstance(GraphHopper.class);
+        hopper.getLMFactoryDecorator().setDisablingAllowed(true);
+        json = query("point=55.99022,29.129734&point=56.007787,29.208355&ch.disable=true&lm.disable=true", 200);
         JsonNode path = json.get("paths").get(0);
         double distance = path.get("distance").asDouble();
         assertEquals("distance wasn't correct:" + distance, 5790, distance, 100);
-
-        shutdownJetty(true);
+        hopper.getLMFactoryDecorator().setDisablingAllowed(false);
     }
 }
\ No newline at end of file
