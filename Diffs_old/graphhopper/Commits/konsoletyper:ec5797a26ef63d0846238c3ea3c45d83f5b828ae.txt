diff --git a/graphhopper-teavm/pom.xml b/graphhopper-teavm/pom.xml
index a63f037671..f0f2c517d9 100644
--- a/graphhopper-teavm/pom.xml
+++ b/graphhopper-teavm/pom.xml
@@ -83,9 +83,9 @@
             </goals>
             <phase>process-classes</phase>
             <configuration>
-              <minifying>true</minifying>
+              <minifying>false</minifying>
               <targetDirectory>${project.build.directory}</targetDirectory>
-              <runtimeCopy>MERGE</runtimeCopy>
+              <runtime>MERGED</runtime>
               <targetFileName>graphhopper-client-0.3.min.js</targetFileName>
               <classAliases>
                 <item>
@@ -103,11 +103,25 @@
                   <className>com.graphhopper.teavm.ClientSideGraphHopper</className>
                   <methodName>route</methodName>
                   <descriptor>(II)Lcom.graphhopper.routing.Path;</descriptor>
+                  <types>
+                    <item>com.graphhopper.teavm.ClientSideGraphHopper</item>
+                  </types>
                 </item>
                 <item>
                   <className>com.graphhopper.teavm.ClientSideGraphHopper</className>
                   <methodName>findNode</methodName>
                   <descriptor>(DD)I</descriptor>
+                  <types>
+                    <item>com.graphhopper.teavm.ClientSideGraphHopper</item>
+                  </types>
+                </item>
+                <item>
+                  <className>com.graphhopper.teavm.ClientSideGraphHopper</className>
+                  <methodName>load</methodName>
+                  <descriptor>(Lorg.teavm.jso.JSArray;)V</descriptor>
+                  <types>
+                    <item>com.graphhopper.teavm.ClientSideGraphHopper</item>
+                  </types>
                 </item>
               </methodAliases>
             </configuration>
diff --git a/graphhopper-teavm/src/main/java/com/graphhopper/teavm/ClientSideGraphHopper.java b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/ClientSideGraphHopper.java
index 422bee305b..3cc62b7c4e 100644
--- a/graphhopper-teavm/src/main/java/com/graphhopper/teavm/ClientSideGraphHopper.java
+++ b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/ClientSideGraphHopper.java
@@ -32,12 +32,12 @@
     @PreserveOriginalName
     public void load(JSArray<DataEntry> data) {
         if (logger.isInfoEnabled()) {
-            logger.info("Loading GraphGopper directory");
+            logger.info("Loading GraphHopper directory");
         }
         long start = System.currentTimeMillis();
         loadStorage(data);
         if (logger.isInfoEnabled()) {
-            logger.info("GraphHopper directory loaded in {}ms", System.currentTimeMillis() - start);
+            logger.info("GraphHopper directory loaded in {} ms", System.currentTimeMillis() - start);
         }
 
         if (logger.isInfoEnabled()) {
@@ -57,10 +57,11 @@ public void load(JSArray<DataEntry> data) {
         prepare.setGraph(graph);
 
         if (logger.isInfoEnabled()) {
-            logger.info("GraphHopper initialized in {}ms", System.currentTimeMillis() - start);
+            logger.info("GraphHopper initialized in {} ms", System.currentTimeMillis() - start);
         }
     }
 
+    @PreserveOriginalName
     public BBox getBounds() {
         return graph.getBounds();
     }
diff --git a/graphhopper-teavm/src/main/java/com/graphhopper/teavm/GraphHopperUI.java b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/GraphHopperUI.java
index 95d522dbb4..b29ae05e70 100644
--- a/graphhopper-teavm/src/main/java/com/graphhopper/teavm/GraphHopperUI.java
+++ b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/GraphHopperUI.java
@@ -39,7 +39,10 @@ public GraphHopperUI(Element element) {
         this.element = element;
         LeafletMapOptions options = Leaflet.createMapOptions();
         map = Leaflet.map(element, options);
-        Leaflet.tileLayer("http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png").addTo(map);
+        TileLayerOptions tileOptions = Leaflet.createTileLayerOptions();
+        tileOptions.setAttribution("&copy; <a href=\"http://www.openstreetmap.org/copyright\">OpenStreetMap</a> " +
+                "contributors");
+        Leaflet.tileLayer("http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png", tileOptions).addTo(map);
         map.on("click", new LeafletMapEventListener() {
             @Override public void occur(LeafletMapEvent event) {
                 click(event.getLatlng());
@@ -65,7 +68,9 @@ private void click(LatLng latlng) {
         if (secondMarker != null) {
             map.removeLayer(firstMarker);
             map.removeLayer(secondMarker);
-            map.removeLayer(pathDisplay);
+            if (pathDisplay != null) {
+                map.removeLayer(pathDisplay);
+            }
             firstMarker = Leaflet.marker(latlng).addTo(map);
             secondMarker = null;
             pathDisplay = null;
@@ -77,6 +82,11 @@ private void click(LatLng latlng) {
             LatLng second = secondMarker.getLatLng();
             int firstNode = graphHopper.findNode(first.getLat(), first.getLng());
             int secondNode = graphHopper.findNode(second.getLat(), second.getLng());
+            if (firstNode < 0 || secondNode < 0) {
+                pathDisplay = null;
+                window.alert("One of the provided points is outside of the known region");
+                return;
+            }
             Path path = graphHopper.route(firstNode, secondNode);
             InstructionList instructions = path.calcInstructions();
             JSArray<LatLng> array = window.newArray();
diff --git a/graphhopper-teavm/src/main/java/com/graphhopper/teavm/GraphhopperJsonGenerator.java b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/GraphhopperJsonGenerator.java
index 4028349eac..a908af6d90 100644
--- a/graphhopper-teavm/src/main/java/com/graphhopper/teavm/GraphhopperJsonGenerator.java
+++ b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/GraphhopperJsonGenerator.java
@@ -5,16 +5,10 @@
 import java.io.PrintStream;
 import java.util.Arrays;
 import com.graphhopper.GraphHopper;
-import com.graphhopper.routing.DijkstraBidirection;
-import com.graphhopper.routing.Path;
 import com.graphhopper.routing.util.CarFlagEncoder;
 import com.graphhopper.routing.util.EncodingManager;
-import com.graphhopper.routing.util.FastestWeighting;
-import com.graphhopper.routing.util.Weighting;
 import com.graphhopper.storage.DataAccess;
 import com.graphhopper.storage.GHDirectory;
-import com.graphhopper.storage.index.LocationIndex;
-import com.graphhopper.util.PointList;
 
 /**
  *
@@ -29,21 +23,6 @@ public static void main(String[] args) throws IOException {
         gh.setEncodingManager(new EncodingManager(new CarFlagEncoder()));
         gh.set3D(true);
         gh.importOrLoad();
-        LocationIndex locTree = gh.getLocationIndex();
-        int fromNode = locTree.findID(55.762523, 37.408784);
-        int toNode = locTree.findID(55.784806, 37.708047);
-        System.out.println("Source node: " + fromNode);
-        System.out.println("Target node: " + toNode);
-
-        Weighting weighting = new FastestWeighting(gh.getEncodingManager().getSingle());
-        DijkstraBidirection algo = new DijkstraBidirection(gh.getGraph(), gh.getEncodingManager().getSingle(),
-                weighting);
-        Path path = algo.calcPath(fromNode, toNode);
-        PointList points = path.calcPoints();
-        for (int i = 0; i < points.size(); ++i) {
-            System.out.println(points.getLat(i) + "; " + points.getLon(i));
-        }
-        System.out.println("Distance: " + path.getDistance());
 
         GHDirectory dir = (GHDirectory)gh.getGraph().getDirectory();
         byte[] buffer = new byte[1024];
diff --git a/graphhopper-teavm/src/main/java/com/graphhopper/teavm/Main.java b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/Main.java
index 7ca2e07d6e..6497798983 100644
--- a/graphhopper-teavm/src/main/java/com/graphhopper/teavm/Main.java
+++ b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/Main.java
@@ -19,9 +19,13 @@ public static void main(String[] args) {
         mapElement.setAttribute("style", "width: 800px; height: 480px");
         body.appendChild(mapElement);
 
-        GraphHopperUI ui = new GraphHopperUI(mapElement);
         @SuppressWarnings("unchecked")
         JSArray<DataEntry> data = (JSArray<DataEntry>)JS.get(JS.getGlobal(), JS.wrap("graphhopperData"));
+        if (JS.isUndefined(data)) {
+            window.alert("Can't initialize GraphHopper. gh-directory.js was not found.");
+            return;
+        }
+        GraphHopperUI ui = new GraphHopperUI(mapElement);
         ui.load(data);
     }
 }
diff --git a/graphhopper-teavm/src/main/java/com/graphhopper/teavm/leaflet/Leaflet.java b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/leaflet/Leaflet.java
index c72c3de6a5..ec89097164 100644
--- a/graphhopper-teavm/src/main/java/com/graphhopper/teavm/leaflet/Leaflet.java
+++ b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/leaflet/Leaflet.java
@@ -59,10 +59,18 @@ public static TileLayer tileLayer(String urlTemplate) {
         return api().tileLayer(urlTemplate);
     }
 
+    public static TileLayer tileLayer(String urlTemplate, TileLayerOptions options) {
+        return api().tileLayer(urlTemplate, options);
+    }
+
     public static LeafletMapOptions createMapOptions() {
         return root.newMapOptions();
     }
 
+    public static TileLayerOptions createTileLayerOptions() {
+        return root.newTileLayerOptions();
+    }
+
     public static <T extends JSObject> JSArray<T> createArray() {
         return root.newArray();
     }
diff --git a/graphhopper-teavm/src/main/java/com/graphhopper/teavm/leaflet/LeafletAPI.java b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/leaflet/LeafletAPI.java
index f8190b119d..f3fe741721 100644
--- a/graphhopper-teavm/src/main/java/com/graphhopper/teavm/leaflet/LeafletAPI.java
+++ b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/leaflet/LeafletAPI.java
@@ -28,4 +28,6 @@
     Marker marker(LatLng latLng);
 
     TileLayer tileLayer(String urlTemplate);
+
+    TileLayer tileLayer(String urlTemplate, TileLayerOptions options);
 }
diff --git a/graphhopper-teavm/src/main/java/com/graphhopper/teavm/leaflet/LeafletRoot.java b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/leaflet/LeafletRoot.java
index e6a89141a9..52a57f5a2b 100644
--- a/graphhopper-teavm/src/main/java/com/graphhopper/teavm/leaflet/LeafletRoot.java
+++ b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/leaflet/LeafletRoot.java
@@ -10,4 +10,7 @@
 interface LeafletRoot extends JSGlobal {
     @JSConstructor("Object")
     LeafletMapOptions newMapOptions();
+
+    @JSConstructor("Object")
+    TileLayerOptions newTileLayerOptions();
 }
diff --git a/graphhopper-teavm/src/main/java/com/graphhopper/teavm/leaflet/TileLayerOptions.java b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/leaflet/TileLayerOptions.java
new file mode 100644
index 0000000000..e45c15b661
--- /dev/null
+++ b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/leaflet/TileLayerOptions.java
@@ -0,0 +1,34 @@
+package com.graphhopper.teavm.leaflet;
+
+import org.teavm.jso.JSObject;
+import org.teavm.jso.JSProperty;
+
+/**
+ *
+ * @author Alexey Andreev
+ */
+public interface TileLayerOptions extends JSObject {
+    @JSProperty
+    int getMinZoom();
+
+    @JSProperty
+    void setMinZoom(int minZoom);
+
+    @JSProperty
+    int getMaxZoom();
+
+    @JSProperty
+    void setMaxZoom(int maxZoom);
+
+    @JSProperty
+    int getTileSize();
+
+    @JSProperty
+    void setTileSize(int tileSize);
+
+    @JSProperty
+    String getAttribution();
+
+    @JSProperty
+    void setAttribution(String attribution);
+}
