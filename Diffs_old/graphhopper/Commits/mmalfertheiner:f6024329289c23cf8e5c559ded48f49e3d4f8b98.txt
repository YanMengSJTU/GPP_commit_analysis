diff --git a/.gitignore b/.gitignore
index 83ce38371f..9716b5c34c 100644
--- a/.gitignore
+++ b/.gitignore
@@ -25,6 +25,8 @@ srtmprovider/
 core/docs/
 .*#
 cgiarprovider/
+srtm/
+srtm1degV3/
 /nbactions.xml
 tools/nb-configuration.xml
 android/build/
diff --git a/core/src/main/java/com/graphhopper/GraphHopper.java b/core/src/main/java/com/graphhopper/GraphHopper.java
index 9cbd014a1c..f676c34ca3 100644
--- a/core/src/main/java/com/graphhopper/GraphHopper.java
+++ b/core/src/main/java/com/graphhopper/GraphHopper.java
@@ -19,10 +19,7 @@
 
 import com.graphhopper.reader.DataReader;
 import com.graphhopper.reader.OSMReader;
-import com.graphhopper.reader.dem.CGIARProvider;
-import com.graphhopper.reader.dem.ElevationProvider;
-import com.graphhopper.reader.dem.LowPrecisionSRTMProvider;
-import com.graphhopper.reader.dem.SRTMProvider;
+import com.graphhopper.reader.dem.*;
 import com.graphhopper.routing.*;
 import com.graphhopper.routing.ch.PrepareContractionHierarchies;
 import com.graphhopper.routing.util.*;
@@ -551,6 +548,9 @@ public GraphHopper init( CmdArgs args )
             CGIARProvider cgiarProvider = new CGIARProvider();
             cgiarProvider.setAutoRemoveTemporaryFiles(args.getBool("graph.elevation.cgiar.clear", true));
             tmpProvider = cgiarProvider;
+        } else if (eleProviderStr.equalsIgnoreCase("srtm1degV3")){
+            System.out.println("Using high precision srtm v3");
+            tmpProvider = new HighPrecisionSRTMProvider();
         }
 
         tmpProvider.setCalcMean(eleCalcMean);
diff --git a/core/src/main/java/com/graphhopper/reader/OSMReader.java b/core/src/main/java/com/graphhopper/reader/OSMReader.java
index aa4a155eac..c17521a5a7 100644
--- a/core/src/main/java/com/graphhopper/reader/OSMReader.java
+++ b/core/src/main/java/com/graphhopper/reader/OSMReader.java
@@ -381,7 +381,12 @@ void processWay( OSMWay way )
             SimpleKalmanFilter skf = new SimpleKalmanFilter(tmpElevations, tmpElevations[0], 1, 6, 0.2);
             skf.run();
 
-            double[] result = skf.getEstimatedValues();
+            double[] estimatedElevations = skf.getEstimatedValues();
+
+            for (int i = 0; i < estimatedElevations.length; i++) {
+                int osmNodeId = getNodeMap().get(osmNodeIds.get(i));
+                updateTmpElevation(osmNodeId, Math.round(estimatedElevations[i] * 10) / 10);
+            }
         }
 
 
@@ -453,6 +458,7 @@ void processWay( OSMWay way )
         for (EdgeIteratorState edge : createdEdges)
         {
             encodingManager.applyWayTags(way, edge);
+            edge.fetchWayGeometry(3);
         }
     }
 
@@ -576,6 +582,26 @@ public int getInternalNodeIdOfOsmNode( long nodeOsmId )
             return Double.NaN;
     }
 
+    //TODO update elevation
+
+    boolean updateTmpElevation( int id, double ele ){
+        if (id == EMPTY)
+            return false;
+        if(id < TOWER_NODE){
+            id = -id -3;
+            nodeAccess.setElevation(id, ele);
+            return true;
+        } else if (id > -TOWER_NODE)
+        {
+            // pillar node
+            id = id - 3;
+            pillarInfo.setElevation(id, ele);
+            return true;
+        } else
+            // e.g. if id is not handled from preparse (e.g. was ignored via isInBounds)
+            return false;
+    }
+
     private void processNode( OSMNode node )
     {
         if (isInBounds(node))
diff --git a/core/src/main/java/com/graphhopper/reader/PillarInfo.java b/core/src/main/java/com/graphhopper/reader/PillarInfo.java
index 591f979e86..8f51779ab4 100644
--- a/core/src/main/java/com/graphhopper/reader/PillarInfo.java
+++ b/core/src/main/java/com/graphhopper/reader/PillarInfo.java
@@ -112,6 +112,20 @@ public double getLon( int id )
         return getLongitude(id);
     }
 
+    @Override
+    public void setElevation(int nodeId, double ele) {
+        if (!is3D())
+            return;
+
+        long tmp = (long) nodeId * rowSizeInBytes;
+        da.setInt(tmp + ELE, Helper.eleToInt(ele));
+    }
+
+    @Override
+    public void setEle(int nodeId, double ele) {
+        setElevation(nodeId, ele);
+    }
+
     @Override
     public double getElevation( int id )
     {
diff --git a/core/src/main/java/com/graphhopper/routing/QueryGraph.java b/core/src/main/java/com/graphhopper/routing/QueryGraph.java
index 8c15d50bdc..e36e453185 100644
--- a/core/src/main/java/com/graphhopper/routing/QueryGraph.java
+++ b/core/src/main/java/com/graphhopper/routing/QueryGraph.java
@@ -547,6 +547,16 @@ public double getLon( int nodeId )
             return getLongitude(nodeId);
         }
 
+        @Override
+        public void setElevation(int nodeId, double ele) {
+
+        }
+
+        @Override
+        public void setEle(int nodeId, double ele) {
+
+        }
+
         @Override
         public double getEle( int nodeId )
         {
diff --git a/core/src/main/java/com/graphhopper/storage/GHNodeAccess.java b/core/src/main/java/com/graphhopper/storage/GHNodeAccess.java
index 42c771549b..c753ec67b2 100644
--- a/core/src/main/java/com/graphhopper/storage/GHNodeAccess.java
+++ b/core/src/main/java/com/graphhopper/storage/GHNodeAccess.java
@@ -84,6 +84,24 @@ public final double getLongitude( int nodeId )
         return Helper.intToDegree(that.nodes.getInt((long) nodeId * that.nodeEntryBytes + that.N_LON));
     }
 
+    @Override
+    public void setElevation(int nodeId, double ele) {
+        if (!is3D())
+            throw new IllegalStateException("Cannot access elevation - 3D is not enabled");
+
+        long tmp = (long) nodeId * that.nodeEntryBytes;
+        double lat = getLatitude(nodeId);
+        double lon = getLongitude(nodeId);
+        that.nodes.setInt(tmp + that.N_ELE, Helper.eleToInt(ele));
+        that.bounds.update(lat, lon, ele);
+
+    }
+
+    @Override
+    public void setEle(int nodeId, double ele) {
+        setElevation(nodeId, ele);
+    }
+
     @Override
     public final double getElevation( int nodeId )
     {
diff --git a/core/src/main/java/com/graphhopper/util/PointAccess.java b/core/src/main/java/com/graphhopper/util/PointAccess.java
index 5d3068a599..baae3b6f08 100644
--- a/core/src/main/java/com/graphhopper/util/PointAccess.java
+++ b/core/src/main/java/com/graphhopper/util/PointAccess.java
@@ -69,6 +69,14 @@
 
     double getLon( int nodeId );
 
+
+    /**
+     * Set elevation of a specified node index
+     */
+    void setElevation( int nodeId, double ele );
+
+    void setEle( int nodeId, double ele );
+
     /**
      * Returns the elevation of the specified nodeId.
      */
diff --git a/core/src/main/java/com/graphhopper/util/PointList.java b/core/src/main/java/com/graphhopper/util/PointList.java
index a6f3f5ec33..a9e05def67 100644
--- a/core/src/main/java/com/graphhopper/util/PointList.java
+++ b/core/src/main/java/com/graphhopper/util/PointList.java
@@ -201,6 +201,19 @@ public double getLon( int index )
         return getLongitude(index);
     }
 
+    @Override
+    public void setElevation(int nodeId, double ele) {
+        if(!is3D())
+            throw new IllegalStateException("This is a 2D list we cannot store elevation: " + ele);
+
+        elevations[nodeId] = ele;
+    }
+
+    @Override
+    public void setEle(int nodeId, double ele) {
+        setElevation(nodeId, ele);
+    }
+
     @Override
     public double getLongitude( int index )
     {
