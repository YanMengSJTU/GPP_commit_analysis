diff --git a/core/src/main/java/com/graphhopper/GraphHopper.java b/core/src/main/java/com/graphhopper/GraphHopper.java
index e19c101d2f..33c72267cf 100644
--- a/core/src/main/java/com/graphhopper/GraphHopper.java
+++ b/core/src/main/java/com/graphhopper/GraphHopper.java
@@ -1219,17 +1219,19 @@ protected void flush() {
      * remove the files created in graphhopperLocation you have to call clean().
      */
     public void close() {
-        if (ghStorage != null)
-        {
+        if (ghStorage != null) {
             ghStorage.close();
             ghStorage = null;
         }
 
-        if (locationIndex != null)
-        {
+        if (locationIndex != null) {
             locationIndex.close();
             locationIndex = null;
         }
+
+        chFactoryDecorator.getPreparations().clear();
+        lmFactoryDecorator.getPreparations().clear();
+
         try {
             lockFactory.forceRemove(fileLockName, true);
         } catch (Exception ex) {
diff --git a/reader-osm/src/test/java/com/graphhopper/GraphHopperIT.java b/reader-osm/src/test/java/com/graphhopper/GraphHopperIT.java
index 23271611d8..e45071313f 100644
--- a/reader-osm/src/test/java/com/graphhopper/GraphHopperIT.java
+++ b/reader-osm/src/test/java/com/graphhopper/GraphHopperIT.java
@@ -909,4 +909,29 @@ public void testCHAndTurnCostsWithFlexmode() {
         rsp = tmpHopper.route(req);
         assertEquals(1044, rsp.getBest().getDistance(), 1);
     }
+
+    @Test
+    public void testCloseAndThenLoadOnSameInstance()
+    {
+        GraphHopper tmpHopper = new GraphHopperOSM().
+                setOSMFile(DIR + "/moscow.osm.gz").
+                setStoreOnFlush(true).
+                setGraphHopperLocation(tmpGraphFile).
+                setEncodingManager(new EncodingManager("car|turn_costs=true"));
+        tmpHopper.getCHFactoryDecorator().setDisablingAllowed(true);
+        tmpHopper.importOrLoad();
+
+        // without turn costs (default for CH)
+        GHRequest req = new GHRequest(55.813357, 37.5958585, 55.811042, 37.594689);
+        GHResponse rsp = tmpHopper.route(req);
+        assertFalse(rsp.getErrors().toString(), rsp.hasErrors());
+        assertEquals(400, rsp.getBest().getDistance(), 1);
+
+        tmpHopper.close();
+        tmpHopper.load(tmpHopper.getGraphHopperLocation());
+
+        rsp = tmpHopper.route(req);
+        assertFalse(rsp.getErrors().toString(), rsp.hasErrors());
+        assertEquals(400, rsp.getBest().getDistance(), 1);
+    }
 }
diff --git a/reader-osm/src/test/java/com/graphhopper/reader/osm/GraphHopperOSMTest.java b/reader-osm/src/test/java/com/graphhopper/reader/osm/GraphHopperOSMTest.java
index bb588202cf..045ab05eb5 100644
--- a/reader-osm/src/test/java/com/graphhopper/reader/osm/GraphHopperOSMTest.java
+++ b/reader-osm/src/test/java/com/graphhopper/reader/osm/GraphHopperOSMTest.java
@@ -106,14 +106,14 @@ public void testLoadOSM() {
             rsp = closableInstance.route(new GHRequest(51.2492152, 9.4317166, 51.2, 9.4));
             assertTrue(false);
         } catch (Exception ex) {
-            assertEquals("You need to create a new GraphHopper instance as it is already closed", ex.getMessage());
+            assertEquals("Do a successful call to load or importOrLoad before routing", ex.getMessage());
         }
 
         try {
             closableInstance.getLocationIndex().findClosest(51.2492152, 9.4317166, EdgeFilter.ALL_EDGES);
             assertTrue(false);
         } catch (Exception ex) {
-            assertEquals("You need to create a new LocationIndex instance as it is already closed", ex.getMessage());
+            assertEquals("Location index not initialized", ex.getMessage());
         }
     }
 
diff --git a/web/src/main/java/com/graphhopper/http/RebuildGraphServlet.java b/web/src/main/java/com/graphhopper/http/RebuildGraphServlet.java
index 674ad4e5cc..5d578912d1 100644
--- a/web/src/main/java/com/graphhopper/http/RebuildGraphServlet.java
+++ b/web/src/main/java/com/graphhopper/http/RebuildGraphServlet.java
@@ -52,7 +52,6 @@ public void doPost(HttpServletRequest httpReq, HttpServletResponse httpRes) thro
         if (part == null) {
             throw new IllegalArgumentException("You have to pass an OSM file in 'file' form-data input");
         }
-        // this will not work for public transit.
         InputStream osmInputStream = part.getInputStream();
         Files.copy(osmInputStream, Paths.get(part.getSubmittedFileName()), REPLACE_EXISTING);
         String temporaryLocation = "rebuild-" + DateTime.now().toString("YYYY-MM-dd_HH-mm-ss");
diff --git a/web/src/test/java/com/graphhopper/http/RebuildServletIT.java b/web/src/test/java/com/graphhopper/http/RebuildServletIT.java
index 1d342ac930..1377c7ae8e 100644
--- a/web/src/test/java/com/graphhopper/http/RebuildServletIT.java
+++ b/web/src/test/java/com/graphhopper/http/RebuildServletIT.java
@@ -67,7 +67,6 @@ public void testLazyLoad_WithRebuildTwice() throws Exception {
 
         File file = new File("../core/files/andorra.osm.pbf");
         post("/rebuild", 200, file);
-        // delete locally created file.
         Files.delete(Paths.get("andorra.osm.pbf"));
         JsonNode node1 = infoQuery("");
 
