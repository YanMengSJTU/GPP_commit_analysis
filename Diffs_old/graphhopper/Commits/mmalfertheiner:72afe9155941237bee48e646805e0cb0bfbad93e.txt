diff --git a/core/src/main/java/com/graphhopper/routing/Path.java b/core/src/main/java/com/graphhopper/routing/Path.java
index 20b55d11fa..efbeabd2aa 100644
--- a/core/src/main/java/com/graphhopper/routing/Path.java
+++ b/core/src/main/java/com/graphhopper/routing/Path.java
@@ -379,7 +379,7 @@ public void updateTime(PMap params){
         ProfileManager profileManager = new ProfileManager(new ProfileRepository());
 
         if(!profileName.equals(""))
-            profileManager.init(profileName, encoder);
+            profileManager.init(profileName, (BikeGenericFlagEncoder) encoder);
 
         final SpeedProvider speedProvider = new ProfileSpeedProvider(encoder, profileManager);
 
diff --git a/core/src/main/java/com/graphhopper/routing/util/BikeGenericFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/BikeGenericFlagEncoder.java
index c44a647caf..e1d326f809 100644
--- a/core/src/main/java/com/graphhopper/routing/util/BikeGenericFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/BikeGenericFlagEncoder.java
@@ -169,11 +169,11 @@ protected BikeGenericFlagEncoder(int speedBits, double speedFactor, int maxTurnC
         setWayTypeSpeed(WayType.MOTORWAY.getValue(), 18);
         setWayTypeSpeed(WayType.ROAD.getValue(), 18);
         setWayTypeSpeed(WayType.TERTIARY_ROAD.getValue(), 18);
-        setWayTypeSpeed(WayType.UNCLASSIFIED_PAVED.getValue(), 18);
+        setWayTypeSpeed(WayType.UNCLASSIFIED_PAVED.getValue(), 16);
         setWayTypeSpeed(WayType.UNCLASSIFIED_UNPAVED.getValue(), 12);
         setWayTypeSpeed(WayType.SMALL_WAY_PAVED.getValue(), 16);
         setWayTypeSpeed(WayType.SMALL_WAY_UNPAVED.getValue(), 10);
-        setWayTypeSpeed(WayType.TRACK_EASY.getValue(), 14);
+        setWayTypeSpeed(WayType.TRACK_EASY.getValue(), 12);
         setWayTypeSpeed(WayType.TRACK_MIDDLE.getValue(), 10);
         setWayTypeSpeed(WayType.TRACK_HARD.getValue(), 8);
         setWayTypeSpeed(WayType.PATH_EASY.getValue(), 8);
diff --git a/core/src/main/java/com/graphhopper/routing/util/DynamicWeighting.java b/core/src/main/java/com/graphhopper/routing/util/DynamicWeighting.java
index f50b7cb207..98f241d14e 100644
--- a/core/src/main/java/com/graphhopper/routing/util/DynamicWeighting.java
+++ b/core/src/main/java/com/graphhopper/routing/util/DynamicWeighting.java
@@ -55,7 +55,7 @@ public DynamicWeighting(FlagEncoder encoder, PMap pMap)
         this.flagEncoder = encoder;
         heading_penalty = pMap.getDouble("heading_penalty", DEFAULT_HEADING_PENALTY);
         String user = pMap.get("profile", "");
-        profileManager = new ProfileManager(new ProfileRepository()).init(user, flagEncoder);
+        profileManager = new ProfileManager(new ProfileRepository()).init(user, (BikeGenericFlagEncoder)flagEncoder);
 
     }
 
@@ -97,7 +97,16 @@ private double getUserPreference(EdgeIteratorState edgeState) {
             priority = PriorityCode.AVOID_AT_ALL_COSTS.getValue();
         else if(wayType == 13 || wayType == 14)
             priority = PriorityCode.BEST.getValue();
-        else if(wayType == 10) {
+        else if(wayType == 7 && wayType == 8){
+
+            priority = PriorityCode.AVOID_IF_POSSIBLE.getValue();
+
+            if(incDist2DSum > 10 && incElevation > 0.02) {
+                priority = PriorityCode.AVOID_AT_ALL_COSTS.getValue();
+            }
+
+        }
+        else if(wayType == 9 && wayType == 10) {
 
             priority = PriorityCode.REACH_DEST.getValue();
 
@@ -114,6 +123,10 @@ else if(wayType == 10) {
             priority = PriorityCode.WORST.getValue();
         }
 
+        //If it is very steep don't use it
+        if(incDist2DSum > 10 && incElevation > 0.2)
+            priority = PriorityCode.WORST.getValue();
+
         return (double) priority / PriorityCode.BEST.getValue();
 
     }
diff --git a/core/src/main/java/com/graphhopper/routing/util/ProfileSpeedProvider.java b/core/src/main/java/com/graphhopper/routing/util/ProfileSpeedProvider.java
index d0d4ed1184..dbae5b4ef4 100644
--- a/core/src/main/java/com/graphhopper/routing/util/ProfileSpeedProvider.java
+++ b/core/src/main/java/com/graphhopper/routing/util/ProfileSpeedProvider.java
@@ -40,6 +40,8 @@ private double getUserSpeed(EdgeIteratorState edgeState, boolean reverse){
             double incSpeed = profileManager.getSpeedPerSlope(wayType, incIndex, (BikeGenericFlagEncoder) encoder);
             double decSpeed = profileManager.getSpeedPerSlope(wayType, decIndex, (BikeGenericFlagEncoder) encoder);
 
+            System.out.println("INC INDEX: " + incIndex + ", SPEED: " + incSpeed + ", WAY: " + wayType);
+
             double incDist2DSum = edgeState.getDistance() * incDistPercentage;
             double decDist2DSum = edgeState.getDistance() - incDist2DSum;
 
@@ -79,13 +81,13 @@ private double adjustSpeed(double speed, EdgeIteratorState edgeState, boolean re
         if (!reverse)
         {
             // use weighted mean so that longer incline infuences speed more than shorter
-            double fwdFaster = 1 + 30 * keepIn(decElevation, 0, 0.1);
+            double fwdFaster = 1 + 30 * keepIn(decElevation, 0, 0.2);
             fwdFaster = Math.sqrt(fwdFaster);
             double fwdSlower = 1 - 5 * keepIn(incElevation, 0, 0.2);
             fwdSlower = fwdSlower * fwdSlower;
             adjustedSpeed = keepIn(speed * (fwdSlower * incDist2DSum + fwdFaster * decDist2DSum) / edgeState.getDistance(), BikeGenericFlagEncoder.PUSHING_SECTION_SPEED / 2, 50);
         } else {
-            double fwdFaster = 1 + 30 * keepIn(incElevation, 0, 0.1);
+            double fwdFaster = 1 + 30 * keepIn(incElevation, 0, 0.2);
             fwdFaster = Math.sqrt(fwdFaster);
             double fwdSlower = 1 - 5 * keepIn(decElevation, 0, 0.2);
             fwdSlower = fwdSlower * fwdSlower;
diff --git a/core/src/main/java/com/graphhopper/util/profiles/ProfileManager.java b/core/src/main/java/com/graphhopper/util/profiles/ProfileManager.java
index aaee057b9d..41c32d296b 100644
--- a/core/src/main/java/com/graphhopper/util/profiles/ProfileManager.java
+++ b/core/src/main/java/com/graphhopper/util/profiles/ProfileManager.java
@@ -2,13 +2,14 @@
 
 
 import com.graphhopper.routing.util.BikeGenericFlagEncoder;
-import com.graphhopper.routing.util.FlagEncoder;
 import org.apache.commons.math3.fitting.WeightedObservedPoint;
 
 import java.util.ArrayList;
 import java.util.HashMap;
 import java.util.Map;
 
+import static com.graphhopper.util.Helper.keepIn;
+
 public class ProfileManager {
 
     private ProfileRepository profileRepository;
@@ -24,7 +25,7 @@ public ProfileManager(ProfileRepository profileRepository){
         this.profileRepository = profileRepository;
     }
 
-    public ProfileManager init(String name, FlagEncoder flagEncoder){
+    public ProfileManager init(String name, BikeGenericFlagEncoder flagEncoder){
         this.ridersProfile = profileRepository.getProfile(name);
 
         if(hasProfile()){
@@ -85,25 +86,31 @@ public double getSpeedPerSlope(int wayType, int slopeIndex, BikeGenericFlagEncod
         if(hasSpeedProfile(wayType))
             return userSpeeds.get(wayType)[slopeIndex];
 
-        if(bestFit > 0)
-            return userSpeeds.get(bestFit)[slopeIndex] * (flagEncoder.getWayTypeSpeed(wayType) / flagEncoder.getWayTypeSpeed(bestFit));
+        if(bestFit > 0){
+            double adjustment = (double) flagEncoder.getWayTypeSpeed(wayType) / flagEncoder.getWayTypeSpeed(bestFit);
+            return userSpeeds.get(bestFit)[slopeIndex] * adjustment;
+        }
 
         return Double.NaN;
 
     }
 
-    private double[] filterSpeeds(RidersEntry[] ridersEntries, int wayType, FlagEncoder flagEncoder) {
+    private double[] filterSpeeds(RidersEntry[] ridersEntries, int wayType, BikeGenericFlagEncoder flagEncoder) {
 
         ArrayList<WeightedObservedPoint> points = new ArrayList<WeightedObservedPoint>();
 
         double maxSpeed = ridersProfile.maxSpeed(wayType, flagEncoder.getMaxSpeed());
 
+        addControlPoints(points, wayType, flagEncoder.getWayTypeSpeed(wayType), maxSpeed);
+
         for ( int i = 0; i < ridersEntries.length; i++){
             if(ridersEntries[i] != null) {
                 points.add(new WeightedObservedPoint(ridersEntries[i].getDistance(), i - RidersProfile.SLOPES / 2, ridersEntries[i].getSpeed() / maxSpeed));
             }
         }
 
+        //addControlPoints(points, wayType, flagEncoder.getWayTypeSpeed(wayType), maxSpeed);
+
         final double[] coef = new SigmoidalFitter(new double[]{1, 0.5, -1}).fit(points);
         SigmoidFunction sigF = new SigmoidFunction();
 
@@ -118,5 +125,25 @@ public double getSpeedPerSlope(int wayType, int slopeIndex, BikeGenericFlagEncod
         return result;
     }
 
+    private void addControlPoints(ArrayList<WeightedObservedPoint> points, int wayType, double baseSpeed, double maxSpeed) {
+
+        double weight = totalDistance / 1000;
+
+        //Add control points from +10 to -10 (this is the critical zone)
+
+        for (int i = -12; i < 0; i++) {
+            double fwdFaster = Math.sqrt(1 + 30 * (i * (-1) / 100));
+            double speed = keepIn(fwdFaster * baseSpeed, baseSpeed, maxSpeed);
+            points.add(new WeightedObservedPoint(weight, i, speed / maxSpeed));
+        }
+
+        for (int i = 0; i <= 12; i++) {
+            double fwdSlower = Math.sqrt(1 - 5 * (i/100));
+            double speed = keepIn(fwdSlower * baseSpeed, 2, baseSpeed);
+            points.add(new WeightedObservedPoint(weight, i, speed / maxSpeed));
+        }
+
+    }
+
 
 }
diff --git a/core/src/main/java/com/graphhopper/util/profiles/SigmoidalFitter.java b/core/src/main/java/com/graphhopper/util/profiles/SigmoidalFitter.java
index 00f7ea0fef..99b3e54247 100644
--- a/core/src/main/java/com/graphhopper/util/profiles/SigmoidalFitter.java
+++ b/core/src/main/java/com/graphhopper/util/profiles/SigmoidalFitter.java
@@ -55,18 +55,47 @@ public static void main(String[] args) {
         SigmoidalFitter fitter = new SigmoidalFitter(new double[] {1, 0.5, -1});
         ArrayList<WeightedObservedPoint> points = new ArrayList<WeightedObservedPoint>();
 
+        double maxSpeed = 37.36653;
+        double weight = 10;
+
+        points.add(new WeightedObservedPoint(weight, 0, 18 / maxSpeed));
+        points.add(new WeightedObservedPoint(weight, 1, 16.245 / maxSpeed));
+        points.add(new WeightedObservedPoint(weight, 2, 14.58 / maxSpeed));
+        points.add(new WeightedObservedPoint(weight, 3, 13.005 / maxSpeed));
+        points.add(new WeightedObservedPoint(weight, 4, 11.52 / maxSpeed));
+        points.add(new WeightedObservedPoint(weight, 5, 10.125 / maxSpeed));
+        points.add(new WeightedObservedPoint(weight, 6, 8.82 / maxSpeed));
+        points.add(new WeightedObservedPoint(weight, 7, 7.605 / maxSpeed));
+        points.add(new WeightedObservedPoint(weight, 8, 6.48 / maxSpeed));
+        points.add(new WeightedObservedPoint(weight, 9, 5.445 / maxSpeed));
+        points.add(new WeightedObservedPoint(weight, 10, 4.5 / maxSpeed));
+        points.add(new WeightedObservedPoint(weight, 11, 3.645 / maxSpeed));
+        points.add(new WeightedObservedPoint(weight, 12, 2.88 / maxSpeed));
+        points.add(new WeightedObservedPoint(weight, 30, 2 / maxSpeed));
+        points.add(new WeightedObservedPoint(weight, -1, 20.1364009575 / maxSpeed));
+        points.add(new WeightedObservedPoint(weight, -2, 21.8959271841 / maxSpeed));
+        points.add(new WeightedObservedPoint(weight, -3, 23.4106460433 / maxSpeed));
+        points.add(new WeightedObservedPoint(weight, -4, 24.7512396073 / maxSpeed));
+        points.add(new WeightedObservedPoint(weight, -5, 25.9604922655 / maxSpeed));
+        points.add(new WeightedObservedPoint(weight, -6, 27.0665027317 / maxSpeed));
+        points.add(new WeightedObservedPoint(weight, -7, 28.0888335127 / maxSpeed));
+        points.add(new WeightedObservedPoint(weight, -8, 29.0417156284 / maxSpeed));
+        points.add(new WeightedObservedPoint(weight, -9, 29.9358629791 / maxSpeed));
+        points.add(new WeightedObservedPoint(weight, -10, 30.7795670402 / maxSpeed));
+        points.add(new WeightedObservedPoint(weight, -11, 31.5793915727 / maxSpeed));
+
         // Add points here; for instance,
-        WeightedObservedPoint point1 = new WeightedObservedPoint(222.0084, -11, 33.30126 / 37.36653);
-        WeightedObservedPoint point2 = new WeightedObservedPoint(409.9835, -10, 35.188465 / 37.36653);
-        WeightedObservedPoint point3 = new WeightedObservedPoint(1675.1172, -9, 35.625652 / 37.36653);
-        WeightedObservedPoint point4 = new WeightedObservedPoint(1075.3177, -8, 37.36653 / 37.36653);
-        WeightedObservedPoint point5 = new WeightedObservedPoint(60.274113, -7, 6.7808375 / 37.36653);
-        WeightedObservedPoint point6 = new WeightedObservedPoint(651.5845, -6, 28.758934 / 37.36653);
-        WeightedObservedPoint point7 = new WeightedObservedPoint(205.16458, -5, 30.774687 / 37.36653);
-        WeightedObservedPoint point8 = new WeightedObservedPoint(171.65067, -4, 30.89712 / 37.36653);
-        WeightedObservedPoint point9 = new WeightedObservedPoint(389.28305, -3, 24.898178 / 37.36653);
-        WeightedObservedPoint point10 = new WeightedObservedPoint(204.34619, -2, 13.880118 / 37.36653);
-        WeightedObservedPoint point11 = new WeightedObservedPoint(209.81961, -1, 11.989692 / 37.36653);
+        /*WeightedObservedPoint point1 = new WeightedObservedPoint(222.0084, -11, 33.30126 / maxSpeed);
+        WeightedObservedPoint point2 = new WeightedObservedPoint(409.9835, -10, 35.188465 / maxSpeed);
+        WeightedObservedPoint point3 = new WeightedObservedPoint(1675.1172, -9, 35.625652 / maxSpeed);
+        WeightedObservedPoint point4 = new WeightedObservedPoint(1075.3177, -8, 37.36653 / maxSpeed);
+        WeightedObservedPoint point5 = new WeightedObservedPoint(60.274113, -7, 6.7808375 / maxSpeed);
+        WeightedObservedPoint point6 = new WeightedObservedPoint(651.5845, -6, 28.758934 / maxSpeed);
+        WeightedObservedPoint point7 = new WeightedObservedPoint(205.16458, -5, 30.774687 / maxSpeed);
+        WeightedObservedPoint point8 = new WeightedObservedPoint(171.65067, -4, 30.89712 / maxSpeed);
+        WeightedObservedPoint point9 = new WeightedObservedPoint(389.28305, -3, 24.898178 / maxSpeed);
+        WeightedObservedPoint point10 = new WeightedObservedPoint(204.34619, -2, 13.880118 / maxSpeed);
+        WeightedObservedPoint point11 = new WeightedObservedPoint(209.81961, -1, 11.989692 / maxSpeed);*/
         WeightedObservedPoint point12 = new WeightedObservedPoint(203.6042, 0, 15.595216 / 37.36653);
         WeightedObservedPoint point13 = new WeightedObservedPoint(619.88995, 1, 14.0128 / 37.36653);
         WeightedObservedPoint point14 = new WeightedObservedPoint(455.45798, 2, 10.182568 / 37.36653);
@@ -81,9 +110,9 @@ public static void main(String[] args) {
         WeightedObservedPoint point23 = new WeightedObservedPoint(617.08203, 11, 7.3262196 / 37.36653);
         WeightedObservedPoint point24 = new WeightedObservedPoint(219.78712, 12, 5.733577 / 37.36653);
         WeightedObservedPoint point25 = new WeightedObservedPoint(202.69017, 13, 6.0807056 / 37.36653);
-        WeightedObservedPoint point26 = new WeightedObservedPoint(216.81699, 30, 6.7873144 / 37.36653);
+        WeightedObservedPoint point26 = new WeightedObservedPoint(216.81699, 29, 6.7873144 / 37.36653);
 
-        points.add(point1);
+        /*points.add(point1);
         points.add(point2);
         points.add(point3);
         points.add(point4);
@@ -93,7 +122,7 @@ public static void main(String[] args) {
         points.add(point8);
         points.add(point9);
         points.add(point10);
-        points.add(point11);
+        points.add(point11);*/
         points.add(point12);
         points.add(point13);
         points.add(point14);
@@ -112,5 +141,12 @@ public static void main(String[] args) {
 
         final double coeffs[] = fitter.fit(points);
         System.out.println(Arrays.toString(coeffs));
+        SigmoidFunction sigF = new SigmoidFunction();
+
+        System.out.print("\n");
+
+        for(int i = -30; i <= 30; i++){
+            System.out.print(i + ", " + (sigF.value(i, coeffs) * maxSpeed) + "\n");
+        }
     }
 }
