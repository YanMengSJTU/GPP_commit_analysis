diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/beans/RouteWayPoint.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/beans/RouteWayPoint.java
index 8f17eaa31a..ec091b5e80 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/beans/RouteWayPoint.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/beans/RouteWayPoint.java
@@ -6,12 +6,9 @@
 import java.util.Objects;
 
 import org.alternativevision.gpx.beans.Waypoint;
-import org.eclipse.jetty.util.log.Log;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import uk.co.ordnancesurvey.gpx.graphhopper.GraphHopperGPXParser;
-
 public class RouteWayPoint {
 
 	private static final Logger LOG = LoggerFactory
diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperGPXUtil.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperGPXUtil.java
index 7f36e077cb..e234cce5ec 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperGPXUtil.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperGPXUtil.java
@@ -54,6 +54,10 @@ public boolean isWayPointOnTrack(Waypoint aWayPoint, Track aTrack) {
 
 		}
 
+		if(!isWayPointOnTrack)
+		{
+			LOG.info("Track Point not found on the GPX track");
+		}
 		return isWayPointOnTrack;
 	}
 
@@ -83,12 +87,15 @@ public boolean isWayPointOnGPXRoutes(Waypoint wp) {
 
 		for (Route route : getRoutes()) {
 			isWayPointOnRoute = isWayPointOnRoute(wp, route);
-
+			
 			if (isWayPointOnRoute(wp, route)) {
 				break;
 			}
 
 		}
+		if(!isWayPointOnRoute){
+			LOG.info("Way Point not found on the GPX route");
+		}
 		return isWayPointOnRoute;
 	}
 
@@ -107,7 +114,7 @@ public long getTotalRouteTime() {
 
 	public void verifyMessage(String responseMessage) {
 		String actualErrorMessage = parser.getErrorMessage();
-		Assert.assertTrue("actual error message: " + actualErrorMessage
+		Assert.assertTrue("Service :actual error message: " + actualErrorMessage
 				+ "does not match with: " + responseMessage,
 				responseMessage.equalsIgnoreCase(actualErrorMessage));
 
@@ -116,7 +123,7 @@ public void verifyMessage(String responseMessage) {
 	public void verifyStatusCode(int statusCode) {
 
 		int actualstatusCode = parser.getstatusCode();
-		Assert.assertTrue("actual error message: " + actualstatusCode
+		Assert.assertTrue("Service : actual error message: " + actualstatusCode
 				+ "does not match with: " + statusCode,
 				(statusCode == actualstatusCode));
 
diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperJSONUtil.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperJSONUtil.java
index 468acdfd11..1472aa1039 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperJSONUtil.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperJSONUtil.java
@@ -30,6 +30,11 @@ public boolean isWayPointinpath(Waypoint w) {
 			}
 
 		}
+		
+		if(!iswaypointinPath)
+		{
+			LOG.info("Way point not found in the JSON Route");
+		}
 
 		return iswaypointinPath;
 
@@ -42,13 +47,18 @@ public boolean isWayPointinPath(Waypoint we, HashSet<Waypoint> wa) {
 
 			if (new RouteWayPoint(we).equals(new RouteWayPoint(waypoint))) {
 				iswaypointinPath = true;
-				LOG.info("WayPoint " + we + " Found In a Path");
+				LOG.info("WayPoint " + we + " Found In a JSON Route");
 			}
 			if (iswaypointinPath) {
 				break;
 			}
 		}
 
+		
+		if(!iswaypointinPath)
+		{
+			LOG.info("Way point not found in the JSON Route");
+		}
 		return iswaypointinPath;
 	}
 
@@ -84,7 +94,7 @@ public long getTotalRouteTime() {
 
 	public void verifyMessage(String responseMessage) {
 		String actualErrorMessage = parser.getErrorMessage();
-		Assert.assertTrue("actual error message:" + actualErrorMessage
+		Assert.assertTrue(" Service : actual error message:" + actualErrorMessage
 				+ " does not match with: " + responseMessage,
 				responseMessage.equalsIgnoreCase(actualErrorMessage));
 
@@ -92,7 +102,7 @@ public void verifyMessage(String responseMessage) {
 
 	public void verifyStatusCode(int statusCode) {
 		int actualStatusCode = parser.getStatusCode();
-		Assert.assertTrue("actual error message: " + actualStatusCode
+		Assert.assertTrue("Service : actual error message: " + actualStatusCode
 				+ " does not match with: " + statusCode,
 				(actualStatusCode == statusCode));
 
diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperXMLUnitParserRouteTest.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperXMLUnitParserRouteTest.java
deleted file mode 100644
index d697a34e39..0000000000
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperXMLUnitParserRouteTest.java
+++ /dev/null
@@ -1,47 +0,0 @@
-package uk.co.ordnancesurvey.gpx.graphhopper;
-
-import java.io.FileInputStream;
-import java.io.IOException;
-
-import javax.xml.parsers.DocumentBuilder;
-import javax.xml.parsers.DocumentBuilderFactory;
-import javax.xml.parsers.ParserConfigurationException;
-
-import org.custommonkey.xmlunit.XMLTestCase;
-import org.custommonkey.xmlunit.XMLUnit;
-import org.xml.sax.SAXException;
-
-public class GraphHopperXMLUnitParserRouteTest extends XMLTestCase {
-
-	private DocumentBuilder builder;
-	
-
-	public GraphHopperXMLUnitParserRouteTest(String gpxFileName) {
-		try {
-			init(gpxFileName);
-		} catch (ParserConfigurationException e) {
-			// TODO Auto-generated catch block
-			e.printStackTrace();
-		} catch (SAXException e) {
-			// TODO Auto-generated catch block
-			e.printStackTrace();
-		} catch (IOException e) {
-			// TODO Auto-generated catch block
-			e.printStackTrace();
-		}
-	}
-
-	private void init(String gpxFileName)throws ParserConfigurationException, SAXException, IOException {
-		XMLUnit.setControlParser("org.apache.xerces.jaxp.DocumentBuilderFactoryImpl");
-		// this next line is strictly not required - if no test parser is
-		// explicitly specified then the same factory class will be used for
-		// both test and control
-		XMLUnit.setTestParser("org.apache.xerces.jaxp.DocumentBuilderFactoryImpl");
-
-		XMLUnit.setSAXParserFactory("org.apache.xerces.jaxp.SAXParserFactoryImpl");
-		XMLUnit.setTransformerFactory("org.apache.xalan.processor.TransformerFactoryImpl");
-		builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
-		String path = getClass().getResource("sampleGraphHopper.gpx").getPath();
-		builder.parse(new FileInputStream(gpxFileName));
-	}
-}
diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/JSONParser.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/JSONParser.java
index ab20422475..0a89121b24 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/JSONParser.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/JSONParser.java
@@ -21,7 +21,6 @@
 	private JsonObject jObject;
 	private JsonArray paths;
 	private JsonArray instructions;
-	private JsonObject info;
 
 	private static final Logger LOG = LoggerFactory.getLogger(JSONParser.class);
 
@@ -54,7 +53,7 @@ public void parse(String jsonString) {
 			jElement = parser.parse(jsonString);
 			jObject = jElement.getAsJsonObject();
 			paths = jObject.getAsJsonArray("paths");
-			info = jObject.getAsJsonObject("info");
+			//info = jObject.getAsJsonObject("info");
 
 			instructions = paths.get(0).getAsJsonObject()
 					.getAsJsonArray("instructions");
diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/NearestPointServiceUtil.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/NearestPointServiceUtil.java
deleted file mode 100644
index 3eff543004..0000000000
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/NearestPointServiceUtil.java
+++ /dev/null
@@ -1,52 +0,0 @@
-package uk.co.ordnancesurvey.gpx.graphhopper;
-
-import java.io.IOException;
-
-import org.apache.commons.io.IOUtils;
-import org.apache.http.client.methods.CloseableHttpResponse;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import uk.co.ordnancesurvey.routing.GraphHopperUIUtil;
-
-import com.google.gson.JsonElement;
-import com.google.gson.JsonParser;
-import com.google.gson.JsonPrimitive;
-
-public class NearestPointServiceUtil {
-
-	private static final Logger LOG = LoggerFactory
-			.getLogger(NearestPointServiceUtil.class);
-
-	String jsonString;
-	GraphHopperUIUtil GPHopperUIUtil = new GraphHopperUIUtil();
-
-	public String getNearestPoint(String pointA) {
-
-		String nearestpoint = "";
-		StringBuffer sb = new StringBuffer();
-		if (IntegrationTestProperties.getTestPropertyBool("viaApigee")) {
-			sb.append(IntegrationTestProperties
-					.getTestProperty("graphHopperWebUrlViaApigee"));
-		} else {
-			sb.append(IntegrationTestProperties
-					.getTestProperty("graphHopperWebUrl"));
-		}
-
-		sb.append("nearest?point=");
-		sb.append(pointA);
-
-		GPHopperUIUtil.getRouteFromServiceWithParameters(sb);
-
-		nearestpoint = GPHopperUIUtil.getNearestPoint();
-
-		return nearestpoint;
-
-	}
-
-	public String getNearestPointDistance() {
-String distance= GPHopperUIUtil.getNearestPointDistance();
-		return distance.toString();
-	}
-
-}
diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperComponentIdentification.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperComponentIdentification.java
index aa04c222ba..3d89b8c9b2 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperComponentIdentification.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperComponentIdentification.java
@@ -39,6 +39,7 @@
 	public static final ComponentIdentifier avoidance_Shingle=new ComponentByXPATH("//*[@name='avoidances[]'][@value='shingle']");
 	public static final ComponentIdentifier fastest_RButton=new ComponentByXPATH("//input[@value='fastest']");
 	public static final ComponentIdentifier shortest_RButton=new ComponentByXPATH("//input[@value='shortest']");
+	public static final ComponentIdentifier error_Message= new ComponentByXPATH("//*[@class='error']");
 	
 	
 }
diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
index 6bb909bd68..77bc85cda9 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
@@ -8,7 +8,6 @@
 import org.junit.Assert;
 
 import uk.co.ordnancesurvey.gpx.graphhopper.IntegrationTestProperties;
-import uk.co.ordnancesurvey.gpx.graphhopper.NearestPointServiceUtil;
 import cucumber.api.DataTable;
 import cucumber.api.Scenario;
 import cucumber.api.java.After;
@@ -26,15 +25,12 @@
 	String instruction;
 	String nearestPoint = "";
 	String Distance = "";
-	String pointA;
 
 	DataTable routePointsTable;
 
-	NearestPointServiceUtil nearestPointUtil= new NearestPointServiceUtil();
-
-	@Before({"~@WebOnly","~@SampleScenario"})
+	@Before({ "~@WebOnly", "~@SampleScenario" })
 	public void init() {
-		
+
 		graphUiUtil = (IntegrationTestProperties
 				.getTestPropertyBool("viaApigee") == true) ? new GraphHopperUIUtil(
 				IntegrationTestProperties
@@ -54,33 +50,48 @@ public void overrideTestONPropertyToWeb() {
 
 	}
 
-	@After("@WebOnly,@SampleScenario,@ErrorMessages")
+	@Before("@ErrorMessages")
+	public void overrideTestONPropertyToBoth() {
+
+		testON = IntegrationTestProperties.getTestProperty("testON");
+		IntegrationTestProperties.setTestProperty("testON", "");
+		init();
+
+	}
+
+	@After("@ErrorMessages")
+	public void rollBackTestONPropertyToBoth() {
+
+		IntegrationTestProperties.setTestProperty("testON", testON);
+
+	}
+
+	@After("@WebOnly,@SampleScenario,@ServiceOnly")
 	public void rollBackTestONProperty() {
 		IntegrationTestProperties.setTestProperty("testON", testON);
 
 	}
 
-	
-	
-	@Before("@ErrorMessages")
+	@Before("@ServiceOnly")
 	public void overrideTestONProperty() {
 
 		testON = IntegrationTestProperties.getTestProperty("testON");
 		IntegrationTestProperties.setTestProperty("testON", "Service");
 	}
 
+	@Given("^My routing ([^\"]*) for nearestPoint API as \"([^\"]*)\"$")
+	public void I_have_route_point_for_Nearest_Point_API(String paramName,
+			String pointA) {
+		graphUiUtil.getNearestPoint(paramName, pointA);
 
-
-	@Given("^My routing point for nearestPoint API as \"([^\"]*)\"$")
-	public void I_have_route_point_for_Nearest_Point_API(String pointA) {
-		this.pointA = pointA;
 	}
 
 	@When("^I request a nearest point from from Nearest Point API$")
 	public void I_request_a_nearest_point_from_from_Nearest_Point_API() {
-		if (IntegrationTestProperties.getTestProperty("testON").equalsIgnoreCase("json")){
-		nearestPoint=nearestPointUtil.getNearestPoint(pointA);
-		Distance = nearestPointUtil.getNearestPointDistance();
+		if (IntegrationTestProperties.getTestProperty("testON")
+				.equalsIgnoreCase("Service")) {
+			nearestPoint = graphUiUtil.getNearestPoint();
+			Distance = graphUiUtil.getNearestPointDistance();
 		}
 
 	}
@@ -88,14 +99,15 @@ public void I_request_a_nearest_point_from_from_Nearest_Point_API() {
 	@Then("^I should be able to verify the nearest point to be \"([^\"]*)\" at a distance of \"([^\"]*)\"$")
 	public void I_should_be_able_to_verify_the_nearest_point_to_be(
 			String pointB, String distance) {
-		if (IntegrationTestProperties.getTestProperty("testON").equalsIgnoreCase("json")){
-		
-		Assert.assertTrue("******Expected nearest Point " + pointB
-				+ " is not matching with " + nearestPoint + "********",
-				pointB.equals(nearestPoint));
-		Assert.assertTrue("******Expected nearest Point distance " + distance
-				+ " is not matcching with " + Distance,
-				Distance.equals(distance));
+		if (IntegrationTestProperties.getTestProperty("testON")
+				.equalsIgnoreCase("json")) {
+
+			Assert.assertTrue("******Expected nearest Point " + pointB
+					+ " is not matching with " + nearestPoint + "********",
+					pointB.equals(nearestPoint));
+			Assert.assertTrue("******Expected nearest Point distance "
+					+ distance + " is not matcching with " + Distance,
+					Distance.equals(distance));
 		}
 
 	}
@@ -171,9 +183,10 @@ public void I_should_be_able_to_verify_the_response_message_as(
 		graphUiUtil.verifyErrorMessage(responseMessage);
 
 	}
-	
+
 	@Then("^I should be able to verify the http statuscode as \"([^\"]*)\"$")
-	public void I_should_be_able_to_verify_the_http_responseCode_as(int statusCode) {
+	public void I_should_be_able_to_verify_the_http_responseCode_as(
+			int statusCode) {
 
 		graphUiUtil.verifyHttpStatusCode(statusCode);
 
@@ -187,8 +200,6 @@ public void I_should_be_able_to_verify_the_http_response_message_as(
 
 	}
 
-	
-
 	@When("^I request for a route$")
 	public void I_request_for_route() {
 
@@ -224,14 +235,11 @@ public void I_request_for_route() {
 		}
 
 	}
-	
+
 	@And("^I request for HTTP \"([^\"]*)\" method$")
-	public void I_request_for_http_mehtod(String httpMethod)
-	{
+	public void I_request_for_http_mehtod(String httpMethod) {
 		graphUiUtil.setHTTPMethod(httpMethod);
 	}
-	
-	
 
 	@After("@SampleScenario")
 	public void I_should_be_able_to_capture_a_screenshot(Scenario sc)
diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
index c3d26794a3..81f1f2d86d 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
@@ -2,7 +2,31 @@
 
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
-import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.*;
+import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.ADD_WAYPOINT;
+import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.INSTRUCTIONS;
+import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.ROUTE_SEARCH;
+import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.ROUTE_TYPE_BIKE;
+import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.ROUTE_TYPE_CAR;
+import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.ROUTE_TYPE_MOUNTAINBIKE;
+import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.ROUTE_TYPE_WALK;
+import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.TOTAL_ROUTE_TIME;
+import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.avoidance_ARoad;
+import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.avoidance_Boulders;
+import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.avoidance_Cliff;
+import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.avoidance_InlandWater;
+import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.avoidance_Marsh;
+import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.avoidance_Mud;
+import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.avoidance_QuarryOrPit;
+import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.avoidance_Rock;
+import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.avoidance_Sand;
+import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.avoidance_Scree;
+import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.avoidance_Shingle;
+import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.dropDown;
+import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.error_Message;
+import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.fastest_RButton;
+import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.settingsButton;
+import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.shortest_RButton;
+import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.waypoint;
 
 import java.awt.Graphics2D;
 import java.awt.RenderingHints;
@@ -25,13 +49,12 @@
 import org.alternativevision.gpx.beans.Route;
 import org.alternativevision.gpx.beans.Waypoint;
 import org.apache.commons.io.IOUtils;
-import org.apache.http.HttpRequest;
 import org.apache.http.StatusLine;
 import org.apache.http.client.ClientProtocolException;
 import org.apache.http.client.methods.CloseableHttpResponse;
 import org.apache.http.client.methods.HttpDelete;
-import org.apache.http.client.methods.HttpEntityEnclosingRequestBase;
 import org.apache.http.client.methods.HttpGet;
+import org.apache.http.client.methods.HttpOptions;
 import org.apache.http.client.methods.HttpPost;
 import org.apache.http.client.methods.HttpPut;
 import org.apache.http.client.methods.HttpUriRequest;
@@ -70,9 +93,10 @@
 	JavascriptExecutor js = (JavascriptExecutor) driver;
 	WebElement we;
 	private BufferedImage actualMap;
-	private String httpMethod="";
+	private String httpMethod = "";
 	private int actualResponseCode;
 	private String actualResponseMsg;
+	StringBuffer sb = new StringBuffer();
 
 	private static final Logger LOG = LoggerFactory
 			.getLogger(GraphHopperUIUtil.class);
@@ -323,7 +347,7 @@ public boolean isWayPointonRouteMap(String wayPointIndex,
 			break;
 		case "SERVICE":
 
-			if (requestParameters.get("type").get(0).equals("gpx")) {
+			if (requestParameters.get("type").get(0).equalsIgnoreCase("gpx")) {
 				wp = buildWayPoint(wayPoint_Coordinates, wayPointDescription,
 						azimuth, direction, time, distance);
 				isWayPointonRouteMap = GPHServiceUtil.isWayPointOnGPXRoutes(wp);
@@ -520,8 +544,7 @@ public void verifyTotalRouteTime(String totalRouteTime)
 
 		case "SERVICE":
 
-			if (IntegrationTestProperties.getTestProperty("routeType")
-					.equalsIgnoreCase("GPX")) {
+			if (requestParameters.get("type").get(0).equalsIgnoreCase("GPX")) {
 				aTime.setTime(GPHServiceUtil.getTotalRouteTime());
 			} else {
 				// aTime.setTime(GPHJsonService.getTotalRouteTime());
@@ -536,8 +559,7 @@ public void verifyTotalRouteTime(String totalRouteTime)
 
 		default:
 
-			if (IntegrationTestProperties.getTestProperty("routeType")
-					.equalsIgnoreCase("GPX")) {
+			if (requestParameters.get("type").get(0).equalsIgnoreCase("GPX")) {
 				aTime.setTime(GPHServiceUtil.getTotalRouteTime());
 			} else {
 
@@ -572,8 +594,7 @@ public void isTrackPointonRouteMap(List<Map<String, String>> trackPointsList)
 					"trackPointco");
 
 			Waypoint trackPoint = buildWayPoint(waypointco);
-			if (IntegrationTestProperties.getTestProperty("routeType").equals(
-					"gpx")) {
+			if (requestParameters.get("type").get(0).equalsIgnoreCase("gpx")) {
 				assertTrue(GPHServiceUtil.isWayPointOnTrack(trackPoint,
 						GPHServiceUtil.getTracks().iterator().next()));
 			}
@@ -597,7 +618,7 @@ public void isTrackPointNotonRouteMap(
 					"trackPointco");
 
 			Waypoint trackPoint = buildWayPoint(waypointco);
-			if (requestParameters.get("type").get(0).equals("gpx")) {
+			if (requestParameters.get("type").get(0).equalsIgnoreCase("gpx")) {
 				assertTrue(!GPHServiceUtil.isWayPointOnTrack(trackPoint,
 						GPHServiceUtil.getTracks().iterator().next()));
 			}
@@ -681,12 +702,12 @@ public void verifyWayPointsThroughService() {
 
 	protected void addParameter(String key, String value) {
 		ArrayList<String> tempList = null;
-		if (value.equals("mountainbike"))
-		{	value="mtb";}
-		
+		if (value.equals("mountainbike")) {
+			value = "mtb";
+		}
+
+		value = value.toLowerCase().replaceAll(" ", "");
 
-			value= value.toLowerCase().replaceAll(" ", "");
-		
 		if (requestParameters.containsKey(key)) {
 			tempList = requestParameters.get(key);
 			if (tempList == null)
@@ -725,8 +746,9 @@ void sendAndGetResponse(StringBuffer sb) {
 					.toString());
 			serviceResponse = IOUtils.toString(httpResponse.getEntity()
 					.getContent(), "UTF-8");
-			
+
 			final StatusLine statusLine = httpResponse.getStatusLine();
+
 			actualResponseCode = statusLine.getStatusCode();
 			actualResponseMsg = statusLine.getReasonPhrase();
 
@@ -737,8 +759,7 @@ void sendAndGetResponse(StringBuffer sb) {
 
 		if (serviceResponse != null && serviceResponse.length() > 0) {
 
-			if (requestParameters.get("type").get(0)
-					.equalsIgnoreCase("gpx")) {
+			if (requestParameters.get("type").get(0).equalsIgnoreCase("gpx")) {
 				GPHServiceUtil.parseGPXFromString(serviceResponse);
 			} else {
 				GPHJSONUtil.parse(serviceResponse);
@@ -769,38 +790,43 @@ private void addCustomHeaders(HttpUriRequest httpRequest) {
 	CloseableHttpResponse doSendAndGetResponse(String serviceUrl)
 			throws IOException, ClientProtocolException {
 		CloseableHttpClient httpClient = HttpClientUtils.createClient();
-		
-		HttpUriRequest httpRequest=null;
-		
-	switch (httpMethod) {
-	case "PUT":
-		httpRequest = new HttpPut(serviceUrl);
-		
-		break;
-	case "GET":
-		
-		httpRequest = new HttpGet(serviceUrl);
-		
-		break;
-		
-	case "DEL":
-		
-		httpRequest = new HttpDelete(serviceUrl);
-		
-		break;
-		
-	case "POST":
-		
-		httpRequest = new HttpPost(serviceUrl);
-		
-		break;
 
-	default:
-		httpRequest = new HttpGet(serviceUrl);
-		break;
-	}
-		
-		//HttpGet httpget = new HttpGet(serviceUrl);
+		HttpUriRequest httpRequest = null;
+
+		switch (httpMethod) {
+		case "PUT":
+			httpRequest = new HttpPut(serviceUrl);
+
+			break;
+		case "GET":
+
+			httpRequest = new HttpGet(serviceUrl);
+
+			break;
+
+		case "DEL":
+
+			httpRequest = new HttpDelete(serviceUrl);
+
+			break;
+
+		case "POST":
+
+			httpRequest = new HttpPost(serviceUrl);
+
+			break;
+
+		case "OPTIONS":
+
+			httpRequest = new HttpOptions(serviceUrl);
+
+			break;
+		default:
+			httpRequest = new HttpGet(serviceUrl);
+			break;
+		}
+
+		// HttpGet httpget = new HttpGet(serviceUrl);
 		addCustomHeaders(httpRequest);
 
 		return httpClient.execute(httpRequest);
@@ -808,8 +834,6 @@ CloseableHttpResponse doSendAndGetResponse(String serviceUrl)
 
 	protected void getRouteFromServiceWithParameters() {
 
-		StringBuffer sb = new StringBuffer();
-
 		if (IntegrationTestProperties.getTestPropertyBool("viaApigee")) {
 			sb.append(IntegrationTestProperties
 					.getTestProperty("graphHopperWebUrlViaApigee"));
@@ -851,160 +875,194 @@ protected void getRouteFromServiceWithParameters() {
 	}
 
 	public void getRouteFromUI() {
+		try {
+			String weighting = requestParameters.get("weighting").get(0);
 
-		String weighting = requestParameters.get("weighting").get(0);
-
-		String avoidances = requestParameters.get("avoidances").get(0);
-		String vehicle = requestParameters.get("vehicle").get(0);
-		if (vehicle.equalsIgnoreCase("mountainbike"))
-		{
-			vehicle="mtb";
-		}
-
-		ArrayList<String> points = requestParameters.get("point");
-
-		if (!requestParameters.containsKey("type")) {
-			ArrayList<String> responseType = new ArrayList<String>();
-			responseType.add(IntegrationTestProperties
-					.getTestProperty("routeType"));
-			requestParameters.put("type", responseType);
+			String avoidances = requestParameters.get("avoidances").get(0);
+			String vehicle = requestParameters.get("vehicle").get(0);
+			if (vehicle.equalsIgnoreCase("mountainbike")) {
+				vehicle = "mtb";
+			}
 
-		} else if (requestParameters.get("type").get(0).isEmpty()) {
+			ArrayList<String> points = requestParameters.get("point");
 
-			requestParameters.remove("type");
-			ArrayList<String> responseType = new ArrayList<String>();
-			responseType.add(IntegrationTestProperties
-					.getTestProperty("routeType"));
-			requestParameters.put("type", responseType);
-		}
+			if (!requestParameters.containsKey("type")) {
+				ArrayList<String> responseType = new ArrayList<String>();
+				responseType.add(IntegrationTestProperties
+						.getTestProperty("routeType"));
+				requestParameters.put("type", responseType);
 
-		switch (vehicle) {
-		case "car":
-			clickElement(ROUTE_TYPE_CAR);
+			} else if (requestParameters.get("type").get(0).isEmpty()) {
 
-			break;
-		case "bike":
-			clickElement(ROUTE_TYPE_BIKE);
-			break;
-		case "mtb":
-			clickElement(ROUTE_TYPE_MOUNTAINBIKE);
-			break;
-		case "foot":
-			clickElement(ROUTE_TYPE_WALK);
-			break;
-		default:
-			clickElement(ROUTE_TYPE_CAR);
-			break;
+				requestParameters.remove("type");
+				ArrayList<String> responseType = new ArrayList<String>();
+				responseType.add(IntegrationTestProperties
+						.getTestProperty("routeType"));
+				requestParameters.put("type", responseType);
+			}
 
-		}
-		clickElement(settingsButton);
+			switch (vehicle) {
+			case "car":
+				clickElement(ROUTE_TYPE_CAR);
+
+				break;
+			case "bike":
+				clickElement(ROUTE_TYPE_BIKE);
+				break;
+			case "mtb":
+				clickElement(ROUTE_TYPE_MOUNTAINBIKE);
+				break;
+			case "foot":
+				clickElement(ROUTE_TYPE_WALK);
+				break;
+			default:
+				clickElement(ROUTE_TYPE_CAR);
+				break;
 
-		if (!avoidances.equals("")) {
-			for (int i = 0; i < avoidances.split(",").length; i++) {
-				String avoidance = avoidances.split(",")[i];
-				switch (avoidance.toLowerCase().trim()) {
+			}
+			clickElement(settingsButton);
+
+			if (!avoidances.equals("")) {
+				for (int i = 0; i < avoidances.split(",").length; i++) {
+					String avoidance = avoidances.split(",")[i];
+					switch (avoidance.toLowerCase().trim()) {
+
+					case "aroad":
+						clickElement(avoidance_ARoad);
+						break;
+
+					case "boulders":
+						clickElement(avoidance_Boulders);
+						break;
+					case "cliff":
+						clickElement(avoidance_Cliff);
+						break;
+					case "inlandwater":
+						clickElement(avoidance_InlandWater);
+						break;
+					case "marsh":
+						clickElement(avoidance_Marsh);
+						break;
+					case "quarryorpit":
+						clickElement(avoidance_QuarryOrPit);
+						break;
+					case "scree":
+						clickElement(avoidance_Scree);
+						break;
+					case "rock":
+						clickElement(avoidance_Rock);
+						break;
+					case "mud":
+						clickElement(avoidance_Mud);
+						break;
+
+					case "sand":
+						clickElement(avoidance_Sand);
+						break;
+
+					case "shingle":
+						clickElement(avoidance_Shingle);
+						break;
+
+					default:
+						break;
+					}
+				}
 
-				case "aroad":
-					clickElement(avoidance_ARoad);
-					break;
+				if (weighting.equalsIgnoreCase("shortavoid")) {
+					clickElement(shortest_RButton);
+				}
 
-				case "boulders":
-					clickElement(avoidance_Boulders);
-					break;
-				case "cliff":
-					clickElement(avoidance_Cliff);
-					break;
-				case "inlandwater":
-					clickElement(avoidance_InlandWater);
-					break;
-				case "marsh":
-					clickElement(avoidance_Marsh);
-					break;
-				case "quarryorpit":
-					clickElement(avoidance_QuarryOrPit);
-					break;
-				case "scree":
-					clickElement(avoidance_Scree);
-					break;
-				case "rock":
-					clickElement(avoidance_Rock);
-					break;
-				case "mud":
-					clickElement(avoidance_Mud);
-					break;
+				else {
+					clickElement(fastest_RButton);
+				}
 
-				case "sand":
-					clickElement(avoidance_Sand);
-					break;
+			}
 
-				case "shingle":
-					clickElement(avoidance_Shingle);
-					break;
+			else {
+				if (weighting.equalsIgnoreCase("shortest")) {
+					clickElement(shortest_RButton);
+				}
 
-				default:
-					break;
+				else {
+					clickElement(fastest_RButton);
 				}
 			}
 
-			if (weighting.equalsIgnoreCase("shortavoid")) {
-				clickElement(shortest_RButton);
-			}
+			for (int i = 0; i < points.size() - 2; i++)
 
-			else {
-				clickElement(fastest_RButton);
+			{
+				clickElement(ADD_WAYPOINT);
 			}
 
-		}
+			for (int i = 0; i < points.size(); i++) {
+				String point = points.get(i);
 
-		else {
-			if (weighting.equalsIgnoreCase("shortest")) {
-				clickElement(shortest_RButton);
-			}
+				int length = point.split(",").length;
 
-			else {
-				clickElement(fastest_RButton);
+				if (length == 2) {
+
+					waypoint = new ComponentID(i + "_searchBox");
+					typeIntoField(waypoint, point);
+
+				}
+
+				else {
+					waypoint = new ComponentID(i + "_searchBox");
+					typeIntoField(waypoint, point);
+					clickElement(dropDown);
+				}
 			}
-		}
 
-		for (int i = 0; i < points.size() - 2; i++)
+			clickElement(ROUTE_SEARCH);
 
-		{
-			clickElement(ADD_WAYPOINT);
+			waitFor(INSTRUCTIONS);
+		} catch (Exception e) {
+			LOG.info(e.getMessage());
 		}
 
-		for (int i = 0; i < points.size(); i++) {
-			String point = points.get(i);
+	}
 
-			int length = point.split(",").length;
+	public void verifyErrorMessage(String responseMessage) {
 
-			if (length == 2) {
+		switch (testOn) {
+		case "Web":
 
-				waypoint = new ComponentID(i + "_searchBox");
-				typeIntoField(waypoint, point);
+			navigateTo(sb.toString().replaceAll("/route?", "/"));
+			waitFor(error_Message);
+			verifyUIErrorMessage(responseMessage);
 
+			break;
+		case "Service":
+			if (requestParameters.get("type").get(0).equalsIgnoreCase("gpx")) {
+				GPHServiceUtil.verifyMessage(responseMessage);
+			} else {
+				GPHJSONUtil.verifyMessage(responseMessage);
 			}
 
-			else {
-				waypoint = new ComponentID(i + "_searchBox");
-				typeIntoField(waypoint, point);
-				clickElement(dropDown);
+			break;
+
+		default:
+			navigateTo(sb.toString().replaceAll("/route?", "/"));
+			waitFor(error_Message);
+			verifyUIErrorMessage(responseMessage);
+
+			if (requestParameters.get("type").get(0).equalsIgnoreCase("gpx")) {
+				GPHServiceUtil.verifyMessage(responseMessage);
+			} else {
+				GPHJSONUtil.verifyMessage(responseMessage);
 			}
+			break;
 		}
+	}
 
-		clickElement(ROUTE_SEARCH);
+	private void verifyUIErrorMessage(String responseMessage) {
 
-		waitFor(INSTRUCTIONS);
+		Assert.assertTrue("Web Interface: Actual Error Message" + getTextValue(error_Message) + " is not matching with :"+ responseMessage,getTextValue(error_Message).equalsIgnoreCase(responseMessage));
+		
 
 	}
 
-	public void verifyErrorMessage(String responseMessage) {
-		if (requestParameters.get("type").get(0).equalsIgnoreCase("gpx")) {
-			GPHServiceUtil.verifyMessage(responseMessage);
-		} else {
-			GPHJSONUtil.verifyMessage(responseMessage);
-		}
-	}
-
 	public void verifyStatusCode(int statusCode) {
 		if (requestParameters.get("type").get(0).equalsIgnoreCase("gpx")) {
 			GPHServiceUtil.verifyStatusCode(statusCode);
@@ -1013,10 +1071,29 @@ public void verifyStatusCode(int statusCode) {
 		}
 	}
 
-	public Map<String, ArrayList<String>> getrequestParameters()
-	{
+	public Map<String, ArrayList<String>> getrequestParameters() {
 		return requestParameters;
 	}
+
+	public void getNearestPoint(String paramName, String pointA) {
+
+		StringBuffer sb = new StringBuffer();
+		if (IntegrationTestProperties.getTestPropertyBool("viaApigee")) {
+			sb.append(IntegrationTestProperties
+					.getTestProperty("graphHopperWebUrlViaApigee"));
+		} else {
+			sb.append(IntegrationTestProperties
+					.getTestProperty("graphHopperWebUrl"));
+		}
+
+		sb.append("nearest?");
+		sb.append(paramName + "=");
+		sb.append(pointA);
+
+		getRouteFromServiceWithParameters(sb);
+
+	}
+
 	public String getNearestPoint() {
 
 		return GPHJSONUtil.getNearestPoint();
@@ -1029,21 +1106,22 @@ public String getNearestPointDistance() {
 	}
 
 	public void setHTTPMethod(String httpMethod) {
-		
-		this.httpMethod=httpMethod;
-		
 
-		
+		this.httpMethod = httpMethod;
+
 	}
 
 	public void verifyHttpStatusCode(int statusCode) {
-		Assert.assertTrue("Actual http Status Code"+ actualResponseCode+ "i s not matching with "+statusCode,statusCode==actualResponseCode);		
+		Assert.assertTrue("Actual http Status Code" + actualResponseCode
+				+ "i s not matching with " + statusCode,
+				statusCode == actualResponseCode);
 	}
 
 	public void verifyHttpErrorMessage(String responseMessage) {
-		Assert.assertTrue("Actual http Error Message "+ actualResponseMsg+ " is not matching with "+responseMessage,responseMessage.equalsIgnoreCase(actualResponseMsg));
-		
+		Assert.assertTrue("Actual http Error Message " + actualResponseMsg
+				+ " is not matching with " + responseMessage,
+				responseMessage.equalsIgnoreCase(actualResponseMsg));
+
 	}
 
-	
 }
diff --git a/acceptancetesting/src/test/cucumber/DPNRouting.feature b/acceptancetesting/src/test/cucumber/DPNRouting.feature
index bd521a8a6b..d25afd07e7 100644
--- a/acceptancetesting/src/test/cucumber/DPNRouting.feature
+++ b/acceptancetesting/src/test/cucumber/DPNRouting.feature
@@ -557,7 +557,7 @@ Feature: Verify a route from A to B
       | vehicleType  | avoidances | routeType |
       | mountainbike |            |           |
 
-  @Routing 
+  @Routing @Demo
   Scenario Outline: Verify DPN Route with avoidance -(A Road)
     Given I have route point as
       | pointA              | pointB              |
diff --git a/acceptancetesting/src/test/cucumber/Routing-Errors.feature b/acceptancetesting/src/test/cucumber/Routing-Errors.feature
index 39e6dab057..c6bae41b8b 100644
--- a/acceptancetesting/src/test/cucumber/Routing-Errors.feature
+++ b/acceptancetesting/src/test/cucumber/Routing-Errors.feature
@@ -1,10 +1,10 @@
-Feature: Verify a route from A to B
+ssFeature: Verify Error Messages from a routing service
    As a user
    I want to get a valid Error message and status code for a invalid route request
 
   #Error Messages
   #Successful request
-  @Routing @ErrorMessages
+  @ErrorMessages
   Scenario: Successful request with all parameters
     Given I have route point as
       | pointA              | pointB              |
@@ -12,7 +12,7 @@ Feature: Verify a route from A to B
     And I have vehicle as "car"
     And I have avoidances as ""
     And I have weighting as "fastest"
-    And I have locale as "en-GB"
+    And I have locale as "en_US"
     And I have debug as "true"
     And I have points_encoded as "true"
     And I have points_calc as "true"
@@ -26,34 +26,12 @@ Feature: Verify a route from A to B
       | wayPointIndex | waypointco          | waypointdesc                | azimuth | direction | time | distance | avoidance |
       | 2             | 50.729205,-3.523206 | Turn right onto WELL STREET | 210.0   | SW        | 4050 | 112.5    |           |
 
-  # Parameter :  vehicle
-  @Routing @ErrorMessages @Current
-  Scenario Outline: Incorrect Parameter Value for "Vehicle"
-    Given I have route point as
-      | pointA              | pointB              |
-      | 50.729961,-3.524853 | 50.723364,-3.523895 |
-    And I have vehicle as "<vehicleType>"
-    And I have avoidances as "<avoidances>"
-    And I have weighting as "<routeType>"
-    When I request for a route
-    Then I should be able to verify the http response message as "<httpErrorMessage>"
-    Then I should be able to verify the http statuscode as "<statusCode>"
-    Then I should be able to verify the response message as "<errorMessage>"
-    Then I should be able to verify the statuscode as "<statusCode>"
-
-    Examples: 
-      | vehicleType | avoidances | routeType | errorMessage                                                  | statusCode | httpErrorMessage |
-      | 123         |            | fastest   | Vehicle 123 is not a valid vehicle. Valid vehicles are car.   | 400        | Bad Request      |
-      | foot        |            | fastest   | Vehicle foot is not a valid vehicle. Valid vehicles are car.  | 400        | Bad Request      |
-      | cycle       |            | fastest   | Vehicle cycle is not a valid vehicle. Valid vehicles are car. | 400        | Bad Request      |
-      | Bike        |            | fastest   | Vehicle Bike is not a valid vehicle. Valid vehicles are car.  | 400        | Bad Request      |
-
-  # Parameter :  vehicle
-  @Routing @ErrorMessages
-  Scenario Outline: Incorrect Parameter Name "vehicles"
+  # Parameter :  point
+  @ErrorMessages
+  Scenario Outline: Incorrect Parameter Value "point"
     Given I have route point as
-      | pointA              | pointB              |
-      | 50.729961,-3.524853 | 50.723364,-3.523895 |
+      | pointA           | pointB              |
+      | 50.729961,string | 50.723364,-3.523895 |
     And I have vehicles as "<vehicleType>"
     And I have avoidances as "<avoidances>"
     And I have weighting as "<routeType>"
@@ -63,15 +41,15 @@ Feature: Verify a route from A to B
     Then I should be able to verify the statuscode as "<statusCode>"
 
     Examples: 
-      | vehicleType | avoidances | routeType | responseFormat | errorMessage | statusCode |
-      | car         |            | fastest   | json           |              | 400        |
+      | vehicleType | avoidances | routeType | responseFormat | errorMessage                                     | statusCode |
+      | car         |            | fastest   | json           | At least 2 points has to be specified, but was:1 | 400        |
 
-  # Parameter :  vehicle
-  @Routing @ErrorMessages
-  Scenario Outline: Missing Parameter "vehicle"
-    Given I have route points as
-      | pointA              | pointB              |
-      | 50.729961,-3.524853 | 50.723364,-3.523895 |
+  @ErrorMessages
+  Scenario Outline: Incorrect Parameter Value "point"
+    Given I have route point as
+      | pointA              |
+      | 50.723364,-3.523895 |
+    And I have vehicles as "<vehicleType>"
     And I have avoidances as "<avoidances>"
     And I have weighting as "<routeType>"
     And I have type as "<responseFormat>"
@@ -80,15 +58,14 @@ Feature: Verify a route from A to B
     Then I should be able to verify the statuscode as "<statusCode>"
 
     Examples: 
-      | vehicleType | avoidances | routeType | responseFormat | errorMessage                | statusCode |
-      | car         |            | fastest   | json           | No point parameter provided | 400        |
+      | vehicleType | avoidances | routeType | responseFormat | errorMessage                                     | statusCode |
+      | car         |            | fastest   | json           | At least 2 points has to be specified, but was:1 | 400        |
 
-  # Parameter :  point
-  @Routing @ErrorMessages
+  @ErrorMessages
   Scenario Outline: Incorrect Parameter Value "point"
     Given I have route point as
-      | pointA           | pointB              |
-      | 50.729961,string | 50.723364,-3.523895 |
+      | pointA       | pointB              |
+      | 292530,92635 | -3.523895,50.723364 |
     And I have vehicles as "<vehicleType>"
     And I have avoidances as "<avoidances>"
     And I have weighting as "<routeType>"
@@ -98,11 +75,11 @@ Feature: Verify a route from A to B
     Then I should be able to verify the statuscode as "<statusCode>"
 
     Examples: 
-      | vehicleType | avoidances | routeType | responseFormat | errorMessage                                                                                                     | statusCode |
-      | car         |            | fastest   | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
+      | vehicleType | avoidances | routeType | responseFormat | errorMessage                          | statusCode |
+      | car         |            | fastest   | json           | Cannot find point 0: 292530.0,92635.0 | 400        |
 
   # Parameter :  point
-  @Routing @ErrorMessages
+  @ErrorMessages
   Scenario Outline: Incorrect Parameter Name "points"
     Given I have route points as
       | pointA              | pointB              |
@@ -116,11 +93,11 @@ Feature: Verify a route from A to B
     Then I should be able to verify the statuscode as "<statusCode>"
 
     Examples: 
-      | vehicleType | avoidances | routeType | responseFormat | errorMessage                                                                                                       | statusCode |
-      | car         |            | fastest   | json           | Parameter points is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
+      | vehicleType | avoidances | routeType | responseFormat | errorMessage                | statusCode |
+      | car         |            | fastest   | json           | No point parameter provided | 400        |
 
   # Parameter :  point
-  @Routing @ErrorMessages
+  @ErrorMessages
   Scenario Outline: Missing Parameter "point"
     Given I have vehicle as "<vehicleType>"
     And I have avoidances as "<avoidances>"
@@ -135,7 +112,7 @@ Feature: Verify a route from A to B
       | car         |            | fastest   | json           | No point parameter provided | 400        |
 
   # Parameter :  avoidances
-  @Routing @ErrorMessages
+  @ErrorMessages
   Scenario Outline: Invalid Parameter Value for "avoidances"
     Given I have route point as
       | pointA              | pointB              |
@@ -153,7 +130,7 @@ Feature: Verify a route from A to B
       | car         | trees      | fastest   | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
 
   # Parameter :  avoidances
-  @Routing @ErrorMessages
+  @ErrorMessages
   Scenario Outline: Invalid Parameter Name for "avoidances"
     Given I have route point as
       | pointA              | pointB              |
@@ -171,7 +148,7 @@ Feature: Verify a route from A to B
       | car         | cliff      | fastest   | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
 
   # Parameter :  weighting
-  @Routing @ErrorMessages
+  @ErrorMessages
   Scenario Outline: Invalid Parameter Value for "weighting"
     Given I have route point as
       | pointA              | pointB              |
@@ -185,11 +162,11 @@ Feature: Verify a route from A to B
     Then I should be able to verify the statuscode as "<statusCode>"
 
     Examples: 
-      | vehicleType | avoidances | routeType | responseFormat | errorMessage                                                                                                     | statusCode |
-      | car         |            | faster    | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
+      | vehicleType | avoidances | routeType | responseFormat | errorMessage                                                                                 | statusCode |
+      | car         |            | quick     | json           | Weighting faster not supported. Valid weightings are shorted, fastest, fastavoid, shortavoid | 400        |
 
   # Parameter :  weighting
-  @Routing @ErrorMessages
+  @ErrorMessages
   Scenario Outline: Invalid Parameter Name for "weighting"
     Given I have route point as
       | pointA              | pointB              |
@@ -207,7 +184,7 @@ Feature: Verify a route from A to B
       | car         |            | fastest   | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
 
   # Parameter :  locale
-  @Routing @ErrorMessages
+  @ErrorMessages
   Scenario Outline: Invalid Parameter Value for "locale"
     Given I have route point as
       | pointA              | pointB              |
@@ -222,11 +199,11 @@ Feature: Verify a route from A to B
     Then I should be able to verify the statuscode as "<statusCode>"
 
     Examples: 
-      | vehicleType | avoidances | routeType | locale | responseFormat | errorMessage                                                                                                     | statusCode |
-      | car         |            | faster    | en     | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
+      | vehicleType | avoidances | routeType | locale | responseFormat | errorMessage                                                                                                                                                                                                        | statusCode |
+      | car         |            | fastest   | en     | json           | en is not a valid value for parameter locale. Valid values are bg, ca, cz, de_DE, el, en_US, es, fa, fil, fi, fr, gl, he, hu_HU, it, ja, ne, nl, pl_PL, pt_BR, pt_PT, ro, ru, si, sk, sv_SE, tr, uk, vi_VI or zh_CN | 400        |
 
   # Parameter :  locale
-  @Routing @ErrorMessages
+  @ErrorMessages
   Scenario Outline: Invalid Parameter Name for "locale"
     Given I have route point as
       | pointA              | pointB              |
@@ -245,7 +222,7 @@ Feature: Verify a route from A to B
       | car         |            | fastest   | en-GB  | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
 
   # Parameter :  instructions
-  @Routing @ErrorMessages
+  @ErrorMessages
   Scenario Outline: Invalid Parameter Value for "instructions"
     Given I have route point as
       | pointA              | pointB              |
@@ -260,11 +237,11 @@ Feature: Verify a route from A to B
     Then I should be able to verify the statuscode as "<statusCode>"
 
     Examples: 
-      | vehicleType | avoidances | routeType | instructions | responseFormat | errorMessage                                                                                                     | statusCode |
-      | car         |            | faster    | msg("box")   | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
+      | vehicleType | avoidances | routeType | instructions | responseFormat | errorMessage                                                                               | statusCode |
+      | car         |            | fastest   | msg("box")   | json           | msg("box") is not a valid value for parameter instructions. Valid values are true or false | 400        |
 
   # Parameter :  instructions
-  @Routing @ErrorMessages
+  @ErrorMessages
   Scenario Outline: Invalid Parameter Name for "instructions"
     Given I have route point as
       | pointA              | pointB              |
@@ -283,7 +260,7 @@ Feature: Verify a route from A to B
       | car         |            | fastest   | true         | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
 
   # Parameter :  algorithm
-  @Routing @ErrorMessages
+  @ErrorMessages
   Scenario Outline: Invalid Parameter Value for "algorithm"
     Given I have route point as
       | pointA              | pointB              |
@@ -298,14 +275,36 @@ Feature: Verify a route from A to B
     Then I should be able to verify the statuscode as "<statusCode>"
 
     Examples: 
-      | vehicleType | avoidances | routeType | algorithm | responseFormat | errorMessage                                                                                                     | statusCode |
-      | car         |            | faster    | xyz       | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
-      | car         |            | faster    | dijkstra  | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
-      | car         |            | faster    | astar     | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
-      | car         |            | faster    | astarbi   | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
+      | vehicleType | avoidances | routeType | algorithm | responseFormat | errorMessage                                                                                                                 | statusCode |
+      | car         |            | fastest   | xyz       | json           | xyz is not a valid value for parameter algorithm. Valid values are astar, astarbi, dijkstra, dijkstrabi or dijkstraOneToMany | 400        |
+      | car         |            | fastest   | select*   | json           | select* blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point.               | 400        |
 
+  #
   # Parameter :  algorithm
-  @Routing @ErrorMessages
+  @ErrorMessages
+  Scenario Outline: Valid Parameter Values for "algorithm"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 50.729961,-3.524853 | 50.723364,-3.523895 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have algorithm as "<algorithm>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the http response message as "OK"
+    Then I should be able to verify the http statuscode as "200"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | algorithm  | responseFormat |
+      | car         |            | fastest   | dijkstra   | json           |
+      | car         |            | fastest   | astar      | json           |
+      | car         |            | fastest   | astarbi    | json           |
+      | car         |            | fastest   | dijkstrabi | json           |
+
+  #
+  # Parameter :  algorithm
+  @ErrorMessages
   Scenario Outline: Invalid Parameter Name for "algorithm"
     Given I have route point as
       | pointA              | pointB              |
@@ -324,7 +323,7 @@ Feature: Verify a route from A to B
       | car         |            | fastest   | dijkstra  | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
 
   # Parameter :  points_encoded
-  @Routing @ErrorMessages
+  @ErrorMessages
   Scenario Outline: Invalid Parameter Value for "points_encoded"
     Given I have route point as
       | pointA              | pointB              |
@@ -339,11 +338,11 @@ Feature: Verify a route from A to B
     Then I should be able to verify the statuscode as "<statusCode>"
 
     Examples: 
-      | vehicleType | avoidances | routeType | points_encoded | responseFormat | errorMessage                                                                                                     | statusCode |
-      | car         |            | faster    | xyz            | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
+      | vehicleType | avoidances | routeType | points_encoded | responseFormat | errorMessage                                                                               | statusCode |
+      | car         |            | fastest   | xyz            | json           | xyz is not a valid value for parameter pointsEncodedString. Valid values are true or false | 400        |
 
   # Parameter :  points_encoded
-  @Routing @ErrorMessages
+  @ErrorMessages
   Scenario Outline: Invalid Parameter Name for "points_encoded"
     Given I have route point as
       | pointA              | pointB              |
@@ -362,7 +361,7 @@ Feature: Verify a route from A to B
       | car         |            | fastest   | true           | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
 
   # Parameter :  debug
-  @Routing @ErrorMessages
+  @ErrorMessages
   Scenario Outline: Invalid Parameter Value for "debug"
     Given I have route point as
       | pointA              | pointB              |
@@ -377,11 +376,11 @@ Feature: Verify a route from A to B
     Then I should be able to verify the statuscode as "<statusCode>"
 
     Examples: 
-      | vehicleType | avoidances | routeType | debug | responseFormat | errorMessage                                                                                                     | statusCode |
-      | car         |            | faster    | xyz   | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
+      | vehicleType | avoidances | routeType | debug | responseFormat | errorMessage                                                                 | statusCode |
+      | car         |            | fastest   | xyz   | json           | xyz is not a valid value for parameter debug. Valid values are true or false | 400        |
 
   # Parameter :  debug
-  @Routing @ErrorMessages
+  @ErrorMessages
   Scenario Outline: Invalid Parameter Name for "debug"
     Given I have route point as
       | pointA              | pointB              |
@@ -400,7 +399,7 @@ Feature: Verify a route from A to B
       | car         |            | fastest   | true  | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
 
   # Parameter :  calc_points
-  @Routing @ErrorMessages
+  @ErrorMessages
   Scenario Outline: Invalid Parameter Value for "calc_points"
     Given I have route point as
       | pointA              | pointB              |
@@ -415,18 +414,18 @@ Feature: Verify a route from A to B
     Then I should be able to verify the statuscode as "<statusCode>"
 
     Examples: 
-      | vehicleType | avoidances | routeType | calc_points | responseFormat | errorMessage                                                                                                     | statusCode |
-      | car         |            | faster    | xyz         | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
+      | vehicleType | avoidances | routeType | calc_points | responseFormat | errorMessage                                                                       | statusCode |
+      | car         |            | fastest   | xyz         | json           | xyz is not a valid value for parameter calc_points. Valid values are true or false | 400        |
 
   # Parameter :  calc_points
-  @Routing @ErrorMessages
+  @ErrorMessages
   Scenario Outline: Invalid Parameter Name for "calc_points"
     Given I have route point as
       | pointA              | pointB              |
       | 50.729961,-3.524853 | 50.723364,-3.523895 |
     And I have vehicle as "<vehicleType>"
     And I have avoidance as "<avoidances>"
-    And I have calc_points as "<calc_points>"
+    And I have calc_point as "<calc_points>"
     And I have weightings as "<routeType>"
     And I have type as "<responseFormat>"
     When I request for a route
@@ -438,7 +437,7 @@ Feature: Verify a route from A to B
       | car         |            | fastest   | true        | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
 
   # Parameter :  Type
-  @Routing @ErrorMessages
+  @ErrorMessages
   Scenario Outline: Invalid Parameter Value for "type"
     Given I have route point as
       | pointA              | pointB              |
@@ -453,11 +452,11 @@ Feature: Verify a route from A to B
     Then I should be able to verify the statuscode as "<statusCode>"
 
     Examples: 
-      | vehicleType | avoidances | routeType | calc_points | responseFormat | errorMessage                                                                                                     | statusCode |
-      | car         |            | faster    | xyz         | txt            | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
+      | vehicleType | avoidances | routeType | calc_points | responseFormat | errorMessage                                                               | statusCode |
+      | car         |            | fastest   | true        | txt            | txt is not a valid value for parameter type. Valid values are GPX or JSON. | 400        |
 
   # Parameter :  Type
-  @Routing @ErrorMessages
+  @ErrorMessages
   Scenario Outline: Invalid Parameter Name for "calc_points"
     Given I have route point as
       | pointA              | pointB              |
@@ -475,8 +474,8 @@ Feature: Verify a route from A to B
       | vehicleType | avoidances | routeType | calc_points | responseFormat | errorMessage                                                                                                              | statusCode |
       | car         |            | fastest   | true        | json           | Parameter calc_pointSSS is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
 
-# http method
-  @Routing @ErrorMessages
+  # http method
+  @ErrorMessages
   Scenario Outline: http methods "PUT/POST/DEL/GET"
     Given I have route point as
       | pointA              | pointB              |
@@ -487,13 +486,226 @@ Feature: Verify a route from A to B
     And I have type as "<responseFormat>"
     And I request for HTTP "<httpMethod>" method
     When I request for a route
+    Then I should be able to verify the http response message as "<httpErrorMessage>"
+    Then I should be able to verify the http statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | httpMethod | responseFormat | httpErrorMessage   | statusCode |
+      | car         |            | fastest   | PUT        | json           | Method Not Allowed | 405        |
+      | car         |            | fastest   | DEL        | json           | Method Not Allowed | 405        |
+      | car         |            | fastest   | POST       | json           | Method Not Allowed | 405        |
+      | car         |            | fastest   | GET        | json           | OK                 | 200        |
+      | car         |            | fastest   | OPTIONS    | json           | OK                 | 200        |
+
+  # Nearest Point : Invalid Parameter Value "point"
+  @ErrorMessages
+  Scenario Outline: Verify  nearest point of point using NearestPoint API
+    Given I have type as "<responseFormat>"
+    And My routing points for nearestPoint API as "<pointA>"
     Then I should be able to verify the response message as "<errorMessage>"
     Then I should be able to verify the statuscode as "<statusCode>"
 
+    #  Then I should be able to verify the http response message as "<httpErrorMessage>"
+    #Then I should be able to verify the http statuscode as "<statusCode>"
+    Examples: 
+      | pointA              | errorMessage | responseFormat | statusCode |
+      | 51.878966,-0.903849 | e            | json           | 400        |
+
+  #Successful request
+  @ErrorMessages
+  Scenario Outline: verify valid parameter values for "locale"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 50.729961,-3.524853 | 50.723364,-3.523895 |
+    And I have vehicle as "car"
+    And I have avoidances as ""
+    And I have weighting as "fastest"
+    And I have locale as "<locale>"
+    And I have debug as "true"
+    And I have points_encoded as "true"
+    And I have points_calc as "true"
+    And I have instructions as "true"
+    And I have algorithm as "astar"
+    And I have type as "json"
+    When I request for a route
+    Then I should be able to verify the http response message as "OK"
+    Then I should be able to verify the http statuscode as "200"
+
+    Examples: 
+      | locale |
+      | en     |
+      | bg     |
+      | ca     |
+      | cz     |
+      | de_DE  |
+      | en_US  |
+      | es     |
+      | fa     |
+      | fil    |
+      | fi     |
+      | fr     |
+      | gl     |
+      | he     |
+      | hu_HU  |
+      | it     |
+      | ja     |
+      | ne     |
+      | nl     |
+      | pl_PL  |
+      | pt_BR  |
+      | pt_PT  |
+      | ro     |
+      | ru     |
+      | si     |
+      | sk     |
+      | sv_SE  |
+      | tr     |
+      | uk     |
+      | vi_VI  |
+      | zh_CN  |
+
+  @ErrorMessages
+  Scenario Outline: verify valid parameter values for "algorithm "
+    Given I have route point as
+      | pointA              | pointB              |
+      | 50.729961,-3.524853 | 50.723364,-3.523895 |
+    And I have vehicle as "car"
+    And I have avoidances as ""
+    And I have weighting as "fastest"
+    And I have locale as "en_US"
+    And I have debug as "true"
+    And I have points_encoded as "true"
+    And I have points_calc as "true"
+    And I have instructions as "true"
+    And I have algorithm as "<algorithm>"
+    And I have type as "json"
+    When I request for a route
+    Then I should be able to verify the http response message as "OK"
+    Then I should be able to verify the http statuscode as "200"
+
+    Examples: 
+      | algorithm  |
+      | dijkstra   |
+      | astar      |
+      | astarbi    |
+      | dijkstrabi |
+
+  @ErrorMessages
+  Scenario Outline: verify valid parameter values for "debug "
+    Given I have route point as
+      | pointA              | pointB              |
+      | 50.729961,-3.524853 | 50.723364,-3.523895 |
+    And I have vehicle as "car"
+    And I have avoidances as ""
+    And I have weighting as "fastest"
+    And I have locale as "en_US"
+    And I have debug as "<debug>"
+    And I have points_encoded as "true"
+    And I have points_calc as "true"
+    And I have instructions as "true"
+    And I have algorithm as "astar"
+    And I have type as "json"
+    When I request for a route
+    Then I should be able to verify the http response message as "OK"
+    Then I should be able to verify the http statuscode as "200"
+
+    Examples: 
+      | debug |
+      | true  |
+      | false |
+
+  @ErrorMessages
+  Scenario Outline: verify valid parameter values for "points_calc "
+    Given I have route point as
+      | pointA              | pointB              |
+      | 50.729961,-3.524853 | 50.723364,-3.523895 |
+    And I have vehicle as "car"
+    And I have avoidances as ""
+    And I have weighting as "fastest"
+    And I have locale as "en_US"
+    And I have debug as "true"
+    And I have points_encoded as "true"
+    And I have points_calc as "<points_calc>"
+    And I have instructions as "true"
+    And I have algorithm as "astar"
+    And I have type as "json"
+    When I request for a route
+    Then I should be able to verify the http response message as "OK"
+    Then I should be able to verify the http statuscode as "200"
+
+    Examples: 
+      | points_calc |
+      | true        |
+      | false       |
+
+  @ErrorMessages
+  Scenario Outline: verify valid parameter values for "points_encoded "
+    Given I have route point as
+      | pointA              | pointB              |
+      | 50.729961,-3.524853 | 50.723364,-3.523895 |
+    And I have vehicle as "car"
+    And I have avoidances as ""
+    And I have weighting as "fastest"
+    And I have locale as "en_US"
+    And I have debug as "true"
+    And I have points_encoded as "<points_encoded>"
+    And I have points_calc as "true"
+    And I have instructions as "true"
+    And I have algorithm as "astar"
+    And I have type as "json"
+    When I request for a route
+    Then I should be able to verify the http response message as "OK"
+    Then I should be able to verify the http statuscode as "200"
+
+    Examples: 
+      | points_encoded |
+      | true           |
+      | false          |
+
+  @ErrorMessages
+  Scenario Outline: verify valid parameter values for "instructions "
+    Given I have route point as
+      | pointA              | pointB              |
+      | 50.729961,-3.524853 | 50.723364,-3.523895 |
+    And I have vehicle as "car"
+    And I have avoidances as ""
+    And I have weighting as "fastest"
+    And I have locale as "en_US"
+    And I have debug as "true"
+    And I have points_encoded as "true"
+    And I have points_calc as "true"
+    And I have instructions as "<instructions>"
+    And I have algorithm as "astar"
+    And I have type as "json"
+    When I request for a route
+    Then I should be able to verify the http response message as "OK"
+    Then I should be able to verify the http statuscode as "200"
+
+    Examples: 
+      | instructions |
+      | true         |
+      | false        |
+
+  @ErrorMessages
+  Scenario Outline: verify valid parameter values for "type "
+    Given I have route point as
+      | pointA              | pointB              |
+      | 50.729961,-3.524853 | 50.723364,-3.523895 |
+    And I have vehicle as "car"
+    And I have avoidances as ""
+    And I have weighting as "fastest"
+    And I have locale as "en_US"
+    And I have debug as "true"
+    And I have points_encoded as "true"
+    And I have points_calc as "true"
+    And I have instructions as "true"
+    And I have algorithm as "astar"
+    And I have type as "<type>"
+    When I request for a route
+    Then I should be able to verify the http response message as "OK"
+    Then I should be able to verify the http statuscode as "200"
+
     Examples: 
-      | vehicleType | avoidances | routeType | httpMethod|responseFormat | errorMessage                                                                                                     | statusCode |
-      | car         |            | fastest   | PUT|json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 405        |
-      | car         |            | fastest   | DEL|json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 405        |
-      | car         |            | fastest   | POST|json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 405        |
-      | car         |            | fastest   | GET|json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 405        |
-      
+      | type |
+      | gpx  |
+      | json |
diff --git a/acceptancetesting/src/test/cucumber/Routing-Exeter-Smoke.feature b/acceptancetesting/src/test/cucumber/Routing-Exeter-Smoke.feature
new file mode 100644
index 0000000000..e39b090dab
--- /dev/null
+++ b/acceptancetesting/src/test/cucumber/Routing-Exeter-Smoke.feature
@@ -0,0 +1,608 @@
+ Feature: Smoke Tests: Verify a route from A to B
+    As a user
+    I want to get a route from location A to location B using the routing service
+    And route should be the fastest route and contain the waypoints,restrictions,time and other instructions
+ 
+ 
+ #Error Messages
+  #Successful request
+   @ErrorMessages @Smoke
+  Scenario: Successful request with all parameters
+    Given I have route point as
+      | pointA              | pointB              |
+      | 50.729961,-3.524853 | 50.723364,-3.523895 |
+    And I have vehicle as "car"
+    And I have avoidances as ""
+    And I have weighting as "fastest"
+    And I have locale as "en_US"
+    And I have debug as "true"
+    And I have points_encoded as "true"
+    And I have points_calc as "true"
+    And I have instructions as "true"
+    And I have algorithm as "astar"
+    And I have type as "json"
+    When I request for a route
+    Then I should be able to verify the http response message as "OK"
+    Then I should be able to verify the http statuscode as "200"
+    Then I should be able to verify the waypoints on the route map:
+      | wayPointIndex | waypointco          | waypointdesc                | azimuth | direction | time | distance | avoidance |
+      | 2             | 50.729205,-3.523206 | Turn right onto WELL STREET | 210.0   | SW        | 4050 | 112.5    |           |
+
+  # Parameter :  vehicle
+   @ErrorMessages @Smoke 
+  Scenario Outline: Incorrect Parameter Value for "Vehicle"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 50.729961,-3.524853 | 50.723364,-3.523895 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have weighting as "<routeType>"
+    When I request for a route
+    Then I should be able to verify the http response message as "<httpErrorMessage>"
+    Then I should be able to verify the http statuscode as "<statusCode>"
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | errorMessage                                                  | statusCode | httpErrorMessage |
+      | 123         |            | fastest   | Vehicle 123 is not a valid vehicle. Valid vehicles are car.   | 400        | Bad Request      |
+      | foot        |            | fastest   | Vehicle foot is not a valid vehicle. Valid vehicles are car.  | 400        | Bad Request      |
+      | cycle       |            | fastest   | Vehicle cycle is not a valid vehicle. Valid vehicles are car. | 400        | Bad Request      |
+      | Bike        |            | fastest   | Vehicle Bike is not a valid vehicle. Valid vehicles are car.  | 400        | Bad Request      |
+
+  # Parameter :  vehicle
+   @ErrorMessages @Smoke @Current
+  Scenario Outline: Incorrect Parameter Name "vehicles"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 50.729961,-3.524853 | 50.723364,-3.523895 |
+    And I have vehicles as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | responseFormat | errorMessage | statusCode |
+      | car         |            | fastest   | json           |              | 400        |
+
+  # Parameter :  vehicle
+   @ErrorMessages @Smoke
+  Scenario Outline: Missing Parameter "vehicle"
+    Given I have route points as
+      | pointA              | pointB              |
+      | 50.729961,-3.524853 | 50.723364,-3.523895 |
+    And I have avoidances as "<avoidances>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | responseFormat | errorMessage                | statusCode |
+      | car         |            | fastest   | json           | No point parameter provided | 400        |
+
+  # Parameter :  point
+   @ErrorMessages @Smoke
+  Scenario Outline: Incorrect Parameter Value "point"
+    Given I have route point as
+      | pointA           | pointB              |
+      | 50.729961,string | 50.723364,-3.523895 |
+    And I have vehicles as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | responseFormat | errorMessage                                     | statusCode |
+      | car         |            | fastest   | json           | At least 2 points has to be specified, but was:1 | 400        |
+
+   @ErrorMessages @Smoke
+  Scenario Outline: Incorrect Parameter Value "point"
+    Given I have route point as
+      | pointA              |
+      | 50.723364,-3.523895 |
+    And I have vehicles as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | responseFormat | errorMessage                                     | statusCode |
+      | car         |            | fastest   | json           | At least 2 points has to be specified, but was:1 | 400        |
+
+   @ErrorMessages @Smoke
+  Scenario Outline: Incorrect Parameter Value "point"
+    Given I have route point as
+      | pointA       | pointB              |
+      | 292530,92635 | -3.523895,50.723364 |
+    And I have vehicles as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | responseFormat | errorMessage                          | statusCode |
+      | car         |            | fastest   | json           | Cannot find point 0: 292530.0,92635.0 | 400        |
+
+  # Parameter :  point
+   @ErrorMessages @Smoke
+  Scenario Outline: Incorrect Parameter Name "points"
+    Given I have route points as
+      | pointA              | pointB              |
+      | 50.729961,-3.524853 | 50.723364,-3.523895 |
+    And I have vehicles as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | responseFormat | errorMessage                | statusCode |
+      | car         |            | fastest   | json           | No point parameter provided | 400        |
+
+  # Parameter :  point
+   @ErrorMessages @Smoke
+  Scenario Outline: Missing Parameter "point"
+    Given I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | responseFormat | errorMessage                | statusCode |
+      | car         |            | fastest   | json           | No point parameter provided | 400        |
+
+  # Parameter :  avoidances
+   @ErrorMessages @Smoke
+  Scenario Outline: Invalid Parameter Value for "avoidances"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 50.729961,-3.524853 | 50.723364,-3.523895 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | responseFormat | errorMessage                                                                                                     | statusCode |
+      | car         | trees      | fastest   | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
+
+  # Parameter :  avoidances
+   @ErrorMessages @Smoke
+  Scenario Outline: Invalid Parameter Name for "avoidances"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 50.729961,-3.524853 | 50.723364,-3.523895 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidance as "<avoidances>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | responseFormat | errorMessage                                                                                                     | statusCode |
+      | car         | cliff      | fastest   | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
+
+  # Parameter :  weighting
+   @ErrorMessages @Smoke
+  Scenario Outline: Invalid Parameter Value for "weighting"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 50.729961,-3.524853 | 50.723364,-3.523895 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | responseFormat | errorMessage                                                                                 | statusCode |
+      | car         |            | quick     | json           | Weighting faster not supported. Valid weightings are shorted, fastest, fastavoid, shortavoid | 400        |
+
+  # Parameter :  weighting
+   @ErrorMessages @Smoke
+  Scenario Outline: Invalid Parameter Name for "weighting"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 50.729961,-3.524853 | 50.723364,-3.523895 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidance as "<avoidances>"
+    And I have weightings as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | responseFormat | errorMessage                                                                                                     | statusCode |
+      | car         |            | fastest   | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
+
+  # Parameter :  locale
+   @ErrorMessages @Smoke
+  Scenario Outline: Invalid Parameter Value for "locale"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 50.729961,-3.524853 | 50.723364,-3.523895 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have locale as "<locale>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | locale | responseFormat | errorMessage                                                                                                                                                                                                        | statusCode |
+      | car         |            | fastest   | en     | json           | en is not a valid value for parameter locale. Valid values are bg, ca, cz, de_DE, el, en_US, es, fa, fil, fi, fr, gl, he, hu_HU, it, ja, ne, nl, pl_PL, pt_BR, pt_PT, ro, ru, si, sk, sv_SE, tr, uk, vi_VI or zh_CN | 400        |
+
+  # Parameter :  locale
+   @ErrorMessages @Smoke
+  Scenario Outline: Invalid Parameter Name for "locale"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 50.729961,-3.524853 | 50.723364,-3.523895 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidance as "<avoidances>"
+    And I have locals as "<locale>"
+    And I have weightings as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | locale | responseFormat | errorMessage                                                                                                     | statusCode |
+      | car         |            | fastest   | en-GB  | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
+
+  # Parameter :  instructions
+   @ErrorMessages @Smoke
+  Scenario Outline: Invalid Parameter Value for "instructions"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 50.729961,-3.524853 | 50.723364,-3.523895 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have instructions as "<instructions>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | instructions | responseFormat | errorMessage                                                                               | statusCode |
+      | car         |            | fastest   | msg("box")   | json           | msg("box") is not a valid value for parameter instructions. Valid values are true or false | 400        |
+
+  # Parameter :  instructions
+   @ErrorMessages @Smoke
+  Scenario Outline: Invalid Parameter Name for "instructions"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 50.729961,-3.524853 | 50.723364,-3.523895 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidance as "<avoidances>"
+    And I have instruction as "<instructions>"
+    And I have weightings as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | instructions | responseFormat | errorMessage                                                                                                     | statusCode |
+      | car         |            | fastest   | true         | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
+
+  # Parameter :  algorithm
+   @ErrorMessages @Smoke
+  Scenario Outline: Invalid Parameter Value for "algorithm"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 50.729961,-3.524853 | 50.723364,-3.523895 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have algorithm as "<algorithm>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | algorithm | responseFormat | errorMessage                                                                                                                 | statusCode |
+      | car         |            | fastest   | xyz       | json           | xyz is not a valid value for parameter algorithm. Valid values are astar, astarbi, dijkstra, dijkstrabi or dijkstraOneToMany | 400        |
+      | car         |            | fastest   | select*   | json           | select* blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point.               | 400        |
+
+  #
+  # Parameter :  algorithm
+   @ErrorMessages @Smoke
+  Scenario Outline: Valid Parameter Values for "algorithm"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 50.729961,-3.524853 | 50.723364,-3.523895 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have algorithm as "<algorithm>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the http response message as "OK"
+    Then I should be able to verify the http statuscode as "200"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | algorithm  | responseFormat |
+      | car         |            | fastest   | dijkstra   | json           |
+      | car         |            | fastest   | astar      | json           |
+      | car         |            | fastest   | astarbi    | json           |
+      | car         |            | fastest   | dijkstrabi | json           |
+
+  #
+  # Parameter :  algorithm
+   @ErrorMessages @Smoke
+  Scenario Outline: Invalid Parameter Name for "algorithm"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 50.729961,-3.524853 | 50.723364,-3.523895 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidance as "<avoidances>"
+    And I have algorithms as "<algorithm>"
+    And I have weightings as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | algorithm | responseFormat | errorMessage                                                                                                     | statusCode |
+      | car         |            | fastest   | dijkstra  | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
+
+  # Parameter :  points_encoded
+   @ErrorMessages @Smoke
+  Scenario Outline: Invalid Parameter Value for "points_encoded"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 50.729961,-3.524853 | 50.723364,-3.523895 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have points_encoded as "<points_encoded>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | points_encoded | responseFormat | errorMessage                                                                               | statusCode |
+      | car         |            | fastest   | xyz            | json           | xyz is not a valid value for parameter pointsEncodedString. Valid values are true or false | 400        |
+
+  # Parameter :  points_encoded
+   @ErrorMessages @Smoke
+  Scenario Outline: Invalid Parameter Name for "points_encoded"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 50.729961,-3.524853 | 50.723364,-3.523895 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidance as "<avoidances>"
+    And I have points_encodedSSS as "<algorithm>"
+    And I have weightings as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | points_encoded | responseFormat | errorMessage                                                                                                     | statusCode |
+      | car         |            | fastest   | true           | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
+
+  # Parameter :  debug
+   @ErrorMessages @Smoke
+  Scenario Outline: Invalid Parameter Value for "debug"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 50.729961,-3.524853 | 50.723364,-3.523895 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have debug as "<debug>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | debug | responseFormat | errorMessage                                                                 | statusCode |
+      | car         |            | fastest   | xyz   | json           | xyz is not a valid value for parameter debug. Valid values are true or false | 400        |
+
+  # Parameter :  debug
+   @ErrorMessages @Smoke
+  Scenario Outline: Invalid Parameter Name for "debug"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 50.729961,-3.524853 | 50.723364,-3.523895 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidance as "<avoidances>"
+    And I have debug as "<debug>"
+    And I have weightings as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | debug | responseFormat | errorMessage                                                                                                     | statusCode |
+      | car         |            | fastest   | true  | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
+
+  # Parameter :  calc_points
+   @ErrorMessages @Smoke
+  Scenario Outline: Invalid Parameter Value for "calc_points"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 50.729961,-3.524853 | 50.723364,-3.523895 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have calc_points as "<debug>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | calc_points | responseFormat | errorMessage                                                                       | statusCode |
+      | car         |            | fastest   | xyz         | json           | xyz is not a valid value for parameter calc_points. Valid values are true or false | 400        |
+
+  # Parameter :  calc_points
+   @ErrorMessages @Smoke
+  Scenario Outline: Invalid Parameter Name for "calc_points"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 50.729961,-3.524853 | 50.723364,-3.523895 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidance as "<avoidances>"
+    And I have calc_point as "<calc_points>"
+    And I have weightings as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | calc_points | responseFormat | errorMessage                                                                                                     | statusCode |
+      | car         |            | fastest   | true        | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
+
+  # Parameter :  Type
+   @ErrorMessages @Smoke
+  Scenario Outline: Invalid Parameter Value for "type"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 50.729961,-3.524853 | 50.723364,-3.523895 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have calc_points as "<debug>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | calc_points | responseFormat | errorMessage                                                               | statusCode |
+      | car         |            | fastest   | true        | txt            | txt is not a valid value for parameter type. Valid values are GPX or JSON. | 400        |
+
+  # Parameter :  Type
+   @ErrorMessages @Smoke
+  Scenario Outline: Invalid Parameter Name for "calc_points"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 50.729961,-3.524853 | 50.723364,-3.523895 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidance as "<avoidances>"
+    And I have calc_pointSSS as "<calc_points>"
+    And I have weightings as "<routeType>"
+    And I have responseType as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | calc_points | responseFormat | errorMessage                                                                                                              | statusCode |
+      | car         |            | fastest   | true        | json           | Parameter calc_pointSSS is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
+
+  # http method
+   @ErrorMessages @Smoke
+  Scenario Outline: http methods "PUT/POST/DEL/GET"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 50.729961,-3.524853 | 50.723364,-3.523895 |
+    Given I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    And I request for HTTP "<httpMethod>" method
+    When I request for a route
+    Then I should be able to verify the http response message as "<httpErrorMessage>"
+    Then I should be able to verify the http statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | httpMethod | responseFormat | httpErrorMessage   | statusCode |
+      | car         |            | fastest   | PUT        | json           | Method Not Allowed | 405        |
+      | car         |            | fastest   | DEL        | json           | Method Not Allowed | 405        |
+      | car         |            | fastest   | POST       | json           | Method Not Allowed | 405        |
+      | car         |            | fastest   | GET        | json           | OK                 | 200        |
+      | car         |            | fastest   | OPTIONS    | json           | OK                 | 200        |
+
+  # Nearest Point : Invalid Parameter Value "point"
+   @ErrorMessages @Smoke
+  Scenario Outline: Verify  nearest point of point using NearestPoint API
+    Given I have type as "<responseFormat>"
+    And My routing points for nearestPoint API as "<pointA>"
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    #  Then I should be able to verify the http response message as "<httpErrorMessage>"
+    #Then I should be able to verify the http statuscode as "<statusCode>"
+    Examples: 
+      | pointA              | errorMessage | responseFormat | statusCode |
+      | 51.878966,-0.903849 | e            | json           | 400        |
+      
+      
+      
+      
+        @Smoke
+  Scenario Outline: Verify  a shortest route  on a Route (Blackall Road - Exeter)
+    Given I have route point as
+      | pointA              | pointB              |
+      | 50.728119,-3.530372 | 50.723788,-3.517289 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have weighting as "<routeType>"
+    When I request for a route
+    Then I should be able to verify the waypoints on the route map:
+      | wayPointIndex | waypointco          | waypointdesc                                | azimuth | direction | time  | distance | avoidance |
+      | 2             | 50.727984,-3.530548 | Turn sharp left onto NEW NORTH ROAD (B3183) | 117.0   | SE        | 29739 | 378.4    |           |
+
+    Examples: 
+      | vehicleType | avoidances | routeType |
+      | car         |            | shortest  |
+
+  @Smoke
+  Scenario Outline: Verify  a fastest route  on a Route (Blackall Road - Exeter)
+    Given I have route point as
+      | pointA              | pointB              |
+      | 50.728119,-3.530372 | 50.723788,-3.517289 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have weighting as "<routeType>"
+    When I request for a route
+    Then I should be able to verify the waypoints on the route map:
+      | wayPointIndex | waypointco         | waypointdesc                      | azimuth | direction | time | distance | avoidance |
+      | 2             | 50.729609,-3.52599 | Turn right onto PENNSYLVANIA ROAD | 193.0   | S         | 4106 | 51.3     |           |
+
+    Examples: 
+      | vehicleType | avoidances | routeType |
+      | car         |            | fastest   |
diff --git a/acceptancetesting/src/test/cucumber/Routing-Exeter.feature b/acceptancetesting/src/test/cucumber/Routing-Exeter.feature
index 359e625b40..0b3dc1c6fd 100644
--- a/acceptancetesting/src/test/cucumber/Routing-Exeter.feature
+++ b/acceptancetesting/src/test/cucumber/Routing-Exeter.feature
@@ -297,7 +297,7 @@ Feature: Verify a route from A to B
       | car         |            | fastest   |
 
   # Access Limited To
-  @Routing @Current
+  @Routing 
   Scenario Outline: Verify  Access Limited To  Restrictions on a Route (North Street-Exeter)
     Given I have route point as
       | pointA              | pointB              |
diff --git a/acceptancetesting/src/test/cucumber/Routing-PeakDistrict-Smoke.feature b/acceptancetesting/src/test/cucumber/Routing-PeakDistrict-Smoke.feature
new file mode 100644
index 0000000000..edb1c09fca
--- /dev/null
+++ b/acceptancetesting/src/test/cucumber/Routing-PeakDistrict-Smoke.feature
@@ -0,0 +1,604 @@
+Feature: Smoke Tests- Peak District: Verify a route from A to B
+   As a user
+   I want to get a route from location A to location B using the routing service
+   And route should be the fastest route and contain the waypoints,restrictions,time and other instructions
+
+  #Error Messages
+  #Successful request
+  @ErrorMessages @Smoke
+  Scenario: Successful request with all parameters
+    Given I have route point as
+      | pointA              | pointB              |
+      | 53.298525,-1.679533 | 53.203145,-1.799292 |
+    And I have vehicle as "foot"
+    And I have avoidances as ""
+    And I have weighting as "fastest"
+    And I have locale as "en_US"
+    And I have debug as "true"
+    And I have points_encoded as "true"
+    And I have points_calc as "true"
+    And I have instructions as "true"
+    And I have algorithm as "astar"
+    And I have type as "json"
+    When I request for a route
+    Then I should be able to verify the http response message as "OK"
+    Then I should be able to verify the http statuscode as "200"
+    Then I should be able to verify the waypoints on the route map:
+      | wayPointIndex | waypointco          | waypointdesc                | azimuth | direction | time | distance | avoidance |
+      | 2             | 50.729205,-3.523206 | Turn right onto WELL STREET | 210.0   | SW        | 4050 | 112.5    |           |
+
+  # Parameter :  vehicle
+  @ErrorMessages @Smoke
+  Scenario Outline: Incorrect Parameter Value for "Vehicle"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 53.298525,-1.679533 | 53.203145,-1.799292 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have weighting as "<routeType>"
+    When I request for a route
+    Then I should be able to verify the http response message as "<httpErrorMessage>"
+    Then I should be able to verify the http statuscode as "<statusCode>"
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | errorMessage                                                     | statusCode | httpErrorMessage |
+      | 123         |            | fastest   | Vehicle 123 is not a valid vehicle. Valid vehicles are foot,mtb. | 400        | Bad Request      |
+      | car         |            | fastest   | Vehicle 123 is not a valid vehicle. Valid vehicles are foot,mtb. | 400        | Bad Request      |
+      | cycle       |            | fastest   | Vehicle 123 is not a valid vehicle. Valid vehicles are foot,mtb. | 400        | Bad Request      |
+      | Bike        |            | fastest   | Vehicle 123 is not a valid vehicle. Valid vehicles are foot,mtb. | 400        | Bad Request      |
+
+  # Parameter :  vehicle
+  @ErrorMessages @Smoke @Current
+  Scenario Outline: Incorrect Parameter Name "vehicles"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 53.298525,-1.679533 | 53.203145,-1.799292 |
+    And I have vehicles as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | responseFormat | errorMessage | statusCode |
+      | foot        |            | fastest   | json           |              | 400        |
+
+  # Parameter :  vehicle
+  @ErrorMessages @Smoke
+  Scenario Outline: Missing Parameter "vehicle"
+    Given I have route points as
+      | pointA              | pointB              |
+      | 53.298525,-1.679533 | 53.203145,-1.799292 |
+    And I have avoidances as "<avoidances>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | responseFormat | errorMessage                | statusCode |
+      | foot        |            | fastest   | json           | No point parameter provided | 400        |
+
+  # Parameter :  point
+  @ErrorMessages @Smoke
+  Scenario Outline: Incorrect Parameter Value "point"
+    Given I have route point as
+      | pointA           | pointB              |
+      | 50.729961,string | 50.723364,-3.523895 |
+    And I have vehicles as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | responseFormat | errorMessage                                     | statusCode |
+      | foot        |            | fastest   | json           | At least 2 points has to be specified, but was:1 | 400        |
+
+  @ErrorMessages @Smoke
+  Scenario Outline: Incorrect Parameter Value "point"
+    Given I have route point as
+      | pointA              |
+      | 50.723364,-3.523895 |
+    And I have vehicles as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | responseFormat | errorMessage                                     | statusCode |
+      | foot        |            | fastest   | json           | At least 2 points has to be specified, but was:1 | 400        |
+
+  @ErrorMessages @Smoke
+  Scenario Outline: Incorrect Parameter Value "point"
+    Given I have route point as
+      | pointA       | pointB              |
+      | 292530,92635 | -3.523895,50.723364 |
+    And I have vehicles as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | responseFormat | errorMessage                          | statusCode |
+      | foot        |            | fastest   | json           | Cannot find point 0: 292530.0,92635.0 | 400        |
+
+  # Parameter :  point
+  @ErrorMessages @Smoke
+  Scenario Outline: Incorrect Parameter Name "points"
+    Given I have route points as
+      | pointA              | pointB              |
+      | 53.298525,-1.679533 | 53.203145,-1.799292 |
+    And I have vehicles as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | responseFormat | errorMessage                | statusCode |
+      | foot        |            | fastest   | json           | No point parameter provided | 400        |
+
+  # Parameter :  point
+  @ErrorMessages @Smoke
+  Scenario Outline: Missing Parameter "point"
+    Given I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | responseFormat | errorMessage                | statusCode |
+      | foot        |            | fastest   | json           | No point parameter provided | 400        |
+
+  # Parameter :  avoidances
+  @ErrorMessages @Smoke
+  Scenario Outline: Invalid Parameter Value for "avoidances"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 53.298525,-1.679533 | 53.203145,-1.799292 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | responseFormat | errorMessage                                                                                                     | statusCode |
+      | foot        | trees      | fastest   | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
+
+  # Parameter :  avoidances
+  @ErrorMessages @Smoke
+  Scenario Outline: Invalid Parameter Name for "avoidances"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 53.298525,-1.679533 | 53.203145,-1.799292 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidance as "<avoidances>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | responseFormat | errorMessage                                                                                                     | statusCode |
+      | foot        | cliff      | fastest   | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
+
+  # Parameter :  weighting
+  @ErrorMessages @Smoke
+  Scenario Outline: Invalid Parameter Value for "weighting"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 53.298525,-1.679533 | 53.203145,-1.799292 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | responseFormat | errorMessage                                                                                 | statusCode |
+      | foot        |            | quick     | json           | Weighting faster not supported. Valid weightings are shorted, fastest, fastavoid, shortavoid | 400        |
+
+  # Parameter :  weighting
+  @ErrorMessages @Smoke
+  Scenario Outline: Invalid Parameter Name for "weighting"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 53.298525,-1.679533 | 53.203145,-1.799292 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidance as "<avoidances>"
+    And I have weightings as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | responseFormat | errorMessage                                                                                                     | statusCode |
+      | foot        |            | fastest   | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
+
+  # Parameter :  locale
+  @ErrorMessages @Smoke
+  Scenario Outline: Invalid Parameter Value for "locale"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 53.298525,-1.679533 | 53.203145,-1.799292 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have locale as "<locale>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | locale | responseFormat | errorMessage                                                                                                                                                                                                        | statusCode |
+      | foot        |            | fastest   | en     | json           | en is not a valid value for parameter locale. Valid values are bg, ca, cz, de_DE, el, en_US, es, fa, fil, fi, fr, gl, he, hu_HU, it, ja, ne, nl, pl_PL, pt_BR, pt_PT, ro, ru, si, sk, sv_SE, tr, uk, vi_VI or zh_CN | 400        |
+
+  # Parameter :  locale
+  @ErrorMessages @Smoke
+  Scenario Outline: Invalid Parameter Name for "locale"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 53.298525,-1.679533 | 53.203145,-1.799292 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidance as "<avoidances>"
+    And I have locals as "<locale>"
+    And I have weightings as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | locale | responseFormat | errorMessage                                                                                                     | statusCode |
+      | foot        |            | fastest   | en-GB  | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
+
+  # Parameter :  instructions
+  @ErrorMessages @Smoke
+  Scenario Outline: Invalid Parameter Value for "instructions"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 53.298525,-1.679533 | 53.203145,-1.799292 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have instructions as "<instructions>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | instructions | responseFormat | errorMessage                                                                               | statusCode |
+      | foot        |            | fastest   | msg("box")   | json           | msg("box") is not a valid value for parameter instructions. Valid values are true or false | 400        |
+
+  # Parameter :  instructions
+  @ErrorMessages @Smoke
+  Scenario Outline: Invalid Parameter Name for "instructions"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 53.298525,-1.679533 | 53.203145,-1.799292 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidance as "<avoidances>"
+    And I have instruction as "<instructions>"
+    And I have weightings as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | instructions | responseFormat | errorMessage                                                                                                     | statusCode |
+      | foot        |            | fastest   | true         | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
+
+  # Parameter :  algorithm
+  @ErrorMessages @Smoke
+  Scenario Outline: Invalid Parameter Value for "algorithm"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 53.298525,-1.679533 | 53.203145,-1.799292 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have algorithm as "<algorithm>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | algorithm | responseFormat | errorMessage                                                                                                                 | statusCode |
+      | foot        |            | fastest   | xyz       | json           | xyz is not a valid value for parameter algorithm. Valid values are astar, astarbi, dijkstra, dijkstrabi or dijkstraOneToMany | 400        |
+      | foot        |            | fastest   | select*   | json           | select* blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point.               | 400        |
+
+  #
+  # Parameter :  algorithm
+  @ErrorMessages @Smoke
+  Scenario Outline: Valid Parameter Values for "algorithm"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 53.298525,-1.679533 | 53.203145,-1.799292 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have algorithm as "<algorithm>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the http response message as "OK"
+    Then I should be able to verify the http statuscode as "200"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | algorithm  | responseFormat |
+      | foot        |            | fastest   | dijkstra   | json           |
+      | foot        |            | fastest   | astar      | json           |
+      | foot        |            | fastest   | astarbi    | json           |
+      | foot        |            | fastest   | dijkstrabi | json           |
+
+  #
+  # Parameter :  algorithm
+  @ErrorMessages @Smoke
+  Scenario Outline: Invalid Parameter Name for "algorithm"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 53.298525,-1.679533 | 53.203145,-1.799292 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidance as "<avoidances>"
+    And I have algorithms as "<algorithm>"
+    And I have weightings as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | algorithm | responseFormat | errorMessage                                                                                                     | statusCode |
+      | foot        |            | fastest   | dijkstra  | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
+
+  # Parameter :  points_encoded
+  @ErrorMessages @Smoke
+  Scenario Outline: Invalid Parameter Value for "points_encoded"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 53.298525,-1.679533 | 53.203145,-1.799292 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have points_encoded as "<points_encoded>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | points_encoded | responseFormat | errorMessage                                                                               | statusCode |
+      | foot        |            | fastest   | xyz            | json           | xyz is not a valid value for parameter pointsEncodedString. Valid values are true or false | 400        |
+
+  # Parameter :  points_encoded
+  @ErrorMessages @Smoke
+  Scenario Outline: Invalid Parameter Name for "points_encoded"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 53.298525,-1.679533 | 53.203145,-1.799292 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidance as "<avoidances>"
+    And I have points_encodedSSS as "<algorithm>"
+    And I have weightings as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | points_encoded | responseFormat | errorMessage                                                                                                     | statusCode |
+      | foot        |            | fastest   | true           | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
+
+  # Parameter :  debug
+  @ErrorMessages @Smoke
+  Scenario Outline: Invalid Parameter Value for "debug"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 53.298525,-1.679533 | 53.203145,-1.799292 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have debug as "<debug>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | debug | responseFormat | errorMessage                                                                 | statusCode |
+      | foot        |            | fastest   | xyz   | json           | xyz is not a valid value for parameter debug. Valid values are true or false | 400        |
+
+  # Parameter :  debug
+  @ErrorMessages @Smoke
+  Scenario Outline: Invalid Parameter Name for "debug"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 53.298525,-1.679533 | 53.203145,-1.799292 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidance as "<avoidances>"
+    And I have debug as "<debug>"
+    And I have weightings as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | debug | responseFormat | errorMessage                                                                                                     | statusCode |
+      | foot        |            | fastest   | true  | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
+
+  # Parameter :  calc_points
+  @ErrorMessages @Smoke
+  Scenario Outline: Invalid Parameter Value for "calc_points"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 53.298525,-1.679533 | 53.203145,-1.799292 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have calc_points as "<debug>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | calc_points | responseFormat | errorMessage                                                                       | statusCode |
+      | foot        |            | fastest   | xyz         | json           | xyz is not a valid value for parameter calc_points. Valid values are true or false | 400        |
+
+  # Parameter :  calc_points
+  @ErrorMessages @Smoke
+  Scenario Outline: Invalid Parameter Name for "calc_points"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 53.298525,-1.679533 | 53.203145,-1.799292 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidance as "<avoidances>"
+    And I have calc_point as "<calc_points>"
+    And I have weightings as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | calc_points | responseFormat | errorMessage                                                                                                     | statusCode |
+      | foot        |            | fastest   | true        | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
+
+  # Parameter :  Type
+  @ErrorMessages @Smoke
+  Scenario Outline: Invalid Parameter Value for "type"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 53.298525,-1.679533 | 53.203145,-1.799292 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have calc_points as "<debug>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | calc_points | responseFormat | errorMessage                                                               | statusCode |
+      | foot        |            | fastest   | true        | txt            | txt is not a valid value for parameter type. Valid values are GPX or JSON. | 400        |
+
+  # Parameter :  Type
+  @ErrorMessages @Smoke
+  Scenario Outline: Invalid Parameter Name for "calc_points"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 53.298525,-1.679533 | 53.203145,-1.799292 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidance as "<avoidances>"
+    And I have calc_pointSSS as "<calc_points>"
+    And I have weightings as "<routeType>"
+    And I have responseType as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | calc_points | responseFormat | errorMessage                                                                                                              | statusCode |
+      | foot        |            | fastest   | true        | json           | Parameter calc_pointSSS is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
+
+  # http method
+  @ErrorMessages @Smoke
+  Scenario Outline: http methods "PUT/POST/DEL/GET"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 53.298525,-1.679533 | 53.203145,-1.799292 |
+    Given I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    And I request for HTTP "<httpMethod>" method
+    When I request for a route
+    Then I should be able to verify the http response message as "<httpErrorMessage>"
+    Then I should be able to verify the http statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | httpMethod | responseFormat | httpErrorMessage   | statusCode |
+      | foot        |            | fastest   | PUT        | json           | Method Not Allowed | 405        |
+      | foot        |            | fastest   | DEL        | json           | Method Not Allowed | 405        |
+      | foot        |            | fastest   | POST       | json           | Method Not Allowed | 405        |
+      | foot        |            | fastest   | GET        | json           | OK                 | 200        |
+      | foot        |            | fastest   | OPTIONS    | json           | OK                 | 200        |
+
+  # Nearest Point : Invalid Parameter Value "point"
+  @ErrorMessages @Smoke
+  Scenario Outline: Verify  nearest point of point using NearestPoint API
+    Given I have type as "<responseFormat>"
+    And My routing points for nearestPoint API as "<pointA>"
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    #  Then I should be able to verify the http response message as "<httpErrorMessage>"
+    #Then I should be able to verify the http statuscode as "<statusCode>"
+    Examples: 
+      | pointA              | errorMessage | responseFormat | statusCode |
+      | 51.878966,-0.903849 | e            | json           | 400        |
+
+  @Smoke
+  Scenario Outline: Verify DPN Route with avoidance -(A Road)
+    Given I have route point as
+      | pointA              | pointB              |
+      | 53.298525,-1.679533 | 53.203145,-1.799292 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have weighting as "<routeType>"
+    When I request for a route
+    Then I should be able to verify the waypoints not on the route map:
+      | wayPointIndex | waypointco         | waypointdesc           | azimuth | direction | time  | distance | avoidance |
+      | 6             | 53.28017,-1.711765 | Turn right onto A Road | 236.0   | SW        | 43838 | 219.2    | ARoad     |
+
+    Examples: 
+      | vehicleType  | avoidances | routeType |
+      | mountainbike | A Road     | fastavoid |
+
+  @Smoke
+  Scenario Outline: Verify DPN Route with boulders avoidance -(boulders)
+    Given I have route point as
+      | pointA              | pointB              |
+      | 53.311217,-1.629849 | 53.156465,-1.908797 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have weighting as "<routeType>"
+    When I request for a route
+    Then I should be able to verify the waypoints not on the route map:
+      | wayPointIndex | waypointco          | waypointdesc        | azimuth | direction | time  | distance | avoidance |
+      | 3             | 53.309004,-1.627564 | Turn left onto Path | 98.0    | E         | 99563 | 138.3    | Boulders  |
+
+    Examples: 
+      | vehicleType | avoidances | routeType |
+      | foot        | Boulders   | fastavoid |
diff --git a/acceptancetesting/src/test/cucumber/routing.feature b/acceptancetesting/src/test/cucumber/routing.feature
index 91ff515b2f..44d2ddd353 100644
--- a/acceptancetesting/src/test/cucumber/routing.feature
+++ b/acceptancetesting/src/test/cucumber/routing.feature
@@ -112,7 +112,7 @@ Feature: Verify a route from A to B
       | vehicleType | avoidances | routeType | totalRouteTime |
       | car         |            | fastest   | 0h30min        |
 
-  @Routing
+  @ServiceOnly
   Scenario Outline: Verify  waypoints on a Route from Southampton to Glasgow
     Given I have route point as
       | pointA              | pointB             |
@@ -132,7 +132,7 @@ Feature: Verify a route from A to B
       | vehicleType | avoidances | routeType |
       | car         |            | fastest   |
 
-  @Routing
+  @ServiceOnly
   Scenario Outline: Verify  oneway Restrictions on a Route (Burmingham Route with one way restriction-WSPIP-74)
     Given I have route point as
       | pointA              | pointB              |
@@ -149,7 +149,7 @@ Feature: Verify a route from A to B
       | vehicleType | avoidances | routeType |
       | car         |            | fastest   |
 
-  @KnownIssues @Routing
+  @KnownIssues @ServiceOnly
   Scenario Outline: Verify  No Turn Restrictions  on a Route (Birmingham WSPIP-77)
     Given I have route point as
       | pointA              | pointB              |
@@ -166,7 +166,7 @@ Feature: Verify a route from A to B
       | vehicleType | avoidances | routeType |
       | car         |            | fastest   |
 
-  @KnownIssues
+  @KnownIssues @ServiceOnly
   Scenario Outline: Verify  No Turn Restrictions  on a Route (Birmingham Bristol Road WSPIP-83)
     Given I have route point as
       | pointA              | pointB              |
@@ -183,7 +183,7 @@ Feature: Verify a route from A to B
       | vehicleType | avoidances | routeType |
       | car         |            | fastest   |
 
-  @Routing
+  @ServiceOnly
   Scenario Outline: Verify  under pass still finds route  from top road (Southampton- Charle WattsWay)
     Given I have route point as
       | pointA              | pointB              |
@@ -200,7 +200,7 @@ Feature: Verify a route from A to B
       | vehicleType | avoidances | routeType |
       | car         |            | fastest   |
 
-  @Routing
+  @ServiceOnly
   Scenario Outline: Verify  under pass still finds route from bottom road  (Southampton- Charle WattsWay)
     Given I have route point as
       | pointA             | pointB             |
@@ -268,7 +268,7 @@ Feature: Verify a route from A to B
       | vehicleType | avoidances | routeType |
       | car         |            | fastest   |
 
-  @KnownIssues
+  @KnownIssues @ServiceOnly
   Scenario Outline: Verify  No Turns with Exceptions(Vehicle Type:Bus)   (High Street-Hounslow)
     Given I have route point as
       | pointA              | pointB              |
@@ -303,7 +303,7 @@ Feature: Verify a route from A to B
       | vehicleType | avoidances | routeType |
       | car         |            | fastest   |
 
-  @Routing
+  @ServiceOnly
   Scenario Outline: Verify  Private Road Restricted Access (Warwick Road-Carlisle)
     Given I have route point as
       | pointA              | pointB            |
@@ -651,7 +651,8 @@ Feature: Verify a route from A to B
 
   @Routing
   Scenario Outline: Verify  nearest point of point using NearestPoint API
-    Given My routing point for nearestPoint API as "<pointA>"
+    Given I have type as "<responseFormat>"
+    And My routing point for nearestPoint API as "<pointA>"
     When I request a nearest point from from Nearest Point API
     Then I should be able to verify the nearest point to be "<pointB>" at a distance of "<distance>"
 
@@ -909,7 +910,7 @@ Feature: Verify a route from A to B
       | vehicleType | avoidances | routeType |
       | car         |            | fastest   |
 
-  @Routing @Current
+  @Routing
   Scenario Outline: Verify  Route using 2 intermediate waypoints (Oxford to LONDON )
     Given I have route point as
       | pointA              | pointB              | pointC             | pointD              |
diff --git a/acceptancetesting/src/test/java/GPHRouteTest.java b/acceptancetesting/src/test/java/GPHRouteTest.java
index 4cfa0ccf1b..7060350396 100644
--- a/acceptancetesting/src/test/java/GPHRouteTest.java
+++ b/acceptancetesting/src/test/java/GPHRouteTest.java
@@ -14,7 +14,6 @@
 import uk.co.ordnancesurvey.gpx.extensions.ExtensionConstants;
 import uk.co.ordnancesurvey.gpx.graphhopper.GraphHopperGPXParser;
 import uk.co.ordnancesurvey.gpx.graphhopper.GraphHopperGPXUtil;
-import uk.co.ordnancesurvey.routing.GraphHopperUIUtil;
 
 public class GPHRouteTest {
 	String path = getClass().getResource("sampleGraphHopper.gpx").getPath();
diff --git a/acceptancetesting/src/test/resources/test-ci-exeter-dte.properties b/acceptancetesting/src/test/resources/test-ci-exeter-dte.properties
new file mode 100644
index 0000000000..18b727c524
--- /dev/null
+++ b/acceptancetesting/src/test/resources/test-ci-exeter-dte.properties
@@ -0,0 +1,14 @@
+# Revised Exeter data set
+graphHopperWebUrlViaApigee=
+graphHopperWebUrl=http://dte-vehicle-routing.elasticbeanstalk.com/
+
+webDriverHubUrl=http://ND28350.ordsvy.gov.uk:5555/wd/hub
+
+#testON=Web,Service  // Default both
+testON=Service
+traceEnabled=false
+plugInAuthLocation=src/test/resources/autoauth-2.1-fx+fn.xpi
+excludedPlatforms=MAC:chrome,MAC:firefox,WINDOWS:chrome,WINDOWS:internet explorer,LINUX:firefox
+browserWindowDimension=1920,800
+sslCertProfile=true
+routeType=gpx
\ No newline at end of file
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/AbstractOsDpnOsmAttibuteMappingVisitor.java b/core/src/main/java/com/graphhopper/reader/osgb/AbstractOsToOsmAttibuteMappingVisitor.java
similarity index 81%
rename from core/src/main/java/com/graphhopper/reader/osgb/dpn/AbstractOsDpnOsmAttibuteMappingVisitor.java
rename to core/src/main/java/com/graphhopper/reader/osgb/AbstractOsToOsmAttibuteMappingVisitor.java
index 399f557299..9898f6c865 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/AbstractOsDpnOsmAttibuteMappingVisitor.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/AbstractOsToOsmAttibuteMappingVisitor.java
@@ -1,4 +1,4 @@
-package com.graphhopper.reader.osgb.dpn;
+package com.graphhopper.reader.osgb;
 
 import com.graphhopper.reader.Way;
 import com.graphhopper.routing.util.OsFlagUtils;
@@ -6,7 +6,7 @@
 /**
  * Created by sadam on 13/02/15.
  */
-public abstract class AbstractOsDpnOsmAttibuteMappingVisitor implements OsDpnOsmAttributeMappingVisitor {
+public abstract class AbstractOsToOsmAttibuteMappingVisitor implements OsToOsmAttributeMappingVisitor {
     protected String visitorName = this.getClass().getSimpleName().toLowerCase();
 
     @Override
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnOsmAttributeMappingVisitor.java b/core/src/main/java/com/graphhopper/reader/osgb/OsToOsmAttributeMappingVisitor.java
similarity index 74%
rename from core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnOsmAttributeMappingVisitor.java
rename to core/src/main/java/com/graphhopper/reader/osgb/OsToOsmAttributeMappingVisitor.java
index 66eed80667..e1a6e7baff 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnOsmAttributeMappingVisitor.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/OsToOsmAttributeMappingVisitor.java
@@ -1,11 +1,11 @@
-package com.graphhopper.reader.osgb.dpn;
+package com.graphhopper.reader.osgb;
 
 import com.graphhopper.reader.Way;
 
 /**
  * Created by sadam on 13/02/15.
  */
-public interface OsDpnOsmAttributeMappingVisitor {
+public interface OsToOsmAttributeMappingVisitor {
     /**
      *
      * @param attributeValue
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnWay.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnWay.java
index cebdf35916..ee854f4bbc 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnWay.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnWay.java
@@ -35,34 +35,35 @@
 import org.slf4j.LoggerFactory;
 
 import com.graphhopper.reader.Way;
-import com.graphhopper.reader.osgb.dpn.additionalRights.AdoptedByNationalCycleRoute;
-import com.graphhopper.reader.osgb.dpn.additionalRights.AdoptedByOtherCycleRoute;
-import com.graphhopper.reader.osgb.dpn.additionalRights.AdoptedByRecreationalRoute;
-import com.graphhopper.reader.osgb.dpn.additionalRights.WithinAccessLand;
-import com.graphhopper.reader.osgb.dpn.potentialHazards.Boulders;
-import com.graphhopper.reader.osgb.dpn.potentialHazards.Cliff;
-import com.graphhopper.reader.osgb.dpn.potentialHazards.Foreshore;
-import com.graphhopper.reader.osgb.dpn.potentialHazards.InlandWater;
-import com.graphhopper.reader.osgb.dpn.potentialHazards.InvalidPotentialHazardException;
-import com.graphhopper.reader.osgb.dpn.potentialHazards.Marsh;
-import com.graphhopper.reader.osgb.dpn.potentialHazards.Mud;
-import com.graphhopper.reader.osgb.dpn.potentialHazards.QuarryOrPit;
-import com.graphhopper.reader.osgb.dpn.potentialHazards.Rock;
-import com.graphhopper.reader.osgb.dpn.potentialHazards.Sand;
-import com.graphhopper.reader.osgb.dpn.potentialHazards.Scree;
-import com.graphhopper.reader.osgb.dpn.potentialHazards.Shingle;
-import com.graphhopper.reader.osgb.dpn.potentialHazards.Spoil;
-import com.graphhopper.reader.osgb.dpn.potentialHazards.TidalWater;
-import com.graphhopper.reader.osgb.dpn.rightOfWay.BridleWay;
-import com.graphhopper.reader.osgb.dpn.rightOfWay.BywayOpenToAllTraffic;
-import com.graphhopper.reader.osgb.dpn.rightOfWay.CorePath;
-import com.graphhopper.reader.osgb.dpn.rightOfWay.Footpath;
-import com.graphhopper.reader.osgb.dpn.rightOfWay.None;
-import com.graphhopper.reader.osgb.dpn.rightOfWay.NormalPermissibleUses;
-import com.graphhopper.reader.osgb.dpn.rightOfWay.OtherRouteWithPublicAccess;
-import com.graphhopper.reader.osgb.dpn.rightOfWay.PermissiveBridleWay;
-import com.graphhopper.reader.osgb.dpn.rightOfWay.PermissivePath;
-import com.graphhopper.reader.osgb.dpn.rightOfWay.RestrictedByway;
+import com.graphhopper.reader.osgb.OsToOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.dpn.additionalrights.AdoptedByNationalCycleRoute;
+import com.graphhopper.reader.osgb.dpn.additionalrights.AdoptedByOtherCycleRoute;
+import com.graphhopper.reader.osgb.dpn.additionalrights.AdoptedByRecreationalRoute;
+import com.graphhopper.reader.osgb.dpn.additionalrights.WithinAccessLand;
+import com.graphhopper.reader.osgb.dpn.potentialhazards.Boulders;
+import com.graphhopper.reader.osgb.dpn.potentialhazards.Cliff;
+import com.graphhopper.reader.osgb.dpn.potentialhazards.Foreshore;
+import com.graphhopper.reader.osgb.dpn.potentialhazards.InlandWater;
+import com.graphhopper.reader.osgb.dpn.potentialhazards.InvalidPotentialHazardException;
+import com.graphhopper.reader.osgb.dpn.potentialhazards.Marsh;
+import com.graphhopper.reader.osgb.dpn.potentialhazards.Mud;
+import com.graphhopper.reader.osgb.dpn.potentialhazards.QuarryOrPit;
+import com.graphhopper.reader.osgb.dpn.potentialhazards.Rock;
+import com.graphhopper.reader.osgb.dpn.potentialhazards.Sand;
+import com.graphhopper.reader.osgb.dpn.potentialhazards.Scree;
+import com.graphhopper.reader.osgb.dpn.potentialhazards.Shingle;
+import com.graphhopper.reader.osgb.dpn.potentialhazards.Spoil;
+import com.graphhopper.reader.osgb.dpn.potentialhazards.TidalWater;
+import com.graphhopper.reader.osgb.dpn.rightofway.BridleWay;
+import com.graphhopper.reader.osgb.dpn.rightofway.BywayOpenToAllTraffic;
+import com.graphhopper.reader.osgb.dpn.rightofway.CorePath;
+import com.graphhopper.reader.osgb.dpn.rightofway.Footpath;
+import com.graphhopper.reader.osgb.dpn.rightofway.None;
+import com.graphhopper.reader.osgb.dpn.rightofway.NormalPermissibleUses;
+import com.graphhopper.reader.osgb.dpn.rightofway.OtherRouteWithPublicAccess;
+import com.graphhopper.reader.osgb.dpn.rightofway.PermissiveBridleWay;
+import com.graphhopper.reader.osgb.dpn.rightofway.PermissivePath;
+import com.graphhopper.reader.osgb.dpn.rightofway.RestrictedByway;
 
 /**
  * Represents an OSM Way
@@ -77,13 +78,13 @@
     protected String endCoord;
     private String[] wayCoords;
     private static final Logger logger = LoggerFactory.getLogger(OsDpnWay.class);
-    private static OsDpnOsmAttributeMappingVisitor[] RIGHT_OF_WAY_VISITORS = { new BridleWay(),
+    private static OsToOsmAttributeMappingVisitor[] RIGHT_OF_WAY_VISITORS = { new BridleWay(),
         new BywayOpenToAllTraffic(), new CorePath(), new Footpath(), new None(), new NormalPermissibleUses(),
         new OtherRouteWithPublicAccess(), new PermissiveBridleWay(), new PermissivePath(), new RestrictedByway() };
-    private static OsDpnOsmAttributeMappingVisitor[] POTENTIAL_HAZARD_VISITORS = { new Boulders(), new Cliff(),
+    private static OsToOsmAttributeMappingVisitor[] POTENTIAL_HAZARD_VISITORS = { new Boulders(), new Cliff(),
         new Marsh(), new Mud(), new Sand(), new Scree(), new Shingle(), new Spoil(), new Rock(), new TidalWater(),
         new QuarryOrPit(), new InlandWater(), new Foreshore() };
-    private static OsDpnOsmAttributeMappingVisitor[] ADDITIONAL_RIGHTS_VISITORS = { new AdoptedByNationalCycleRoute(),
+    private static OsToOsmAttributeMappingVisitor[] ADDITIONAL_RIGHTS_VISITORS = { new AdoptedByNationalCycleRoute(),
         new AdoptedByOtherCycleRoute(), new AdoptedByRecreationalRoute(), new WithinAccessLand() };
 
     public static boolean THROW_EXCEPTION_ON_INVALID_HAZARD = false;
@@ -118,7 +119,7 @@ public OsDpnWay(String id) {
     protected int handleAdditionalRights(XMLStreamReader parser) throws XMLStreamException {
         String access = parser.getElementText();
         if ("true".equals(access)) {
-            for (OsDpnOsmAttributeMappingVisitor visitor : ADDITIONAL_RIGHTS_VISITORS) {
+            for (OsToOsmAttributeMappingVisitor visitor : ADDITIONAL_RIGHTS_VISITORS) {
                 visitor.visitWayAttribute(parser.getLocalName().toLowerCase(), this);
             }
         }
@@ -154,7 +155,7 @@ protected int handlePhysicalLevel(XMLStreamReader parser) throws XMLStreamExcept
     @Override
     protected int handleRightOfUse(XMLStreamReader parser) throws XMLStreamException {
         String attributeValue = parser.getElementText().replaceAll(" ", "").toLowerCase();
-        for (OsDpnOsmAttributeMappingVisitor visitor : RIGHT_OF_WAY_VISITORS) {
+        for (OsToOsmAttributeMappingVisitor visitor : RIGHT_OF_WAY_VISITORS) {
             visitor.visitWayAttribute(attributeValue, this);
         }
         return parser.getEventType();
@@ -184,7 +185,7 @@ private void visitPotentialHazards(String attributeValue) throws XMLStreamExcept
         // <dpn:potentialHazardCrossed>Boulders, Inland
         // Wat</dpn:potentialHazardCrossed>
         boolean handled = false;
-        for (OsDpnOsmAttributeMappingVisitor visitor : POTENTIAL_HAZARD_VISITORS) {
+        for (OsToOsmAttributeMappingVisitor visitor : POTENTIAL_HAZARD_VISITORS) {
             handled |= visitor.visitWayAttribute(attributeValue, this);
         }
         if (!handled) {
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByNationalCycleRoute.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/additionalrights/AdoptedByNationalCycleRoute.java
similarity index 64%
rename from core/src/main/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByNationalCycleRoute.java
rename to core/src/main/java/com/graphhopper/reader/osgb/dpn/additionalrights/AdoptedByNationalCycleRoute.java
index 85f5527f2f..7dd5db433c 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByNationalCycleRoute.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/additionalrights/AdoptedByNationalCycleRoute.java
@@ -1,7 +1,7 @@
-package com.graphhopper.reader.osgb.dpn.additionalRights;
+package com.graphhopper.reader.osgb.dpn.additionalrights;
 
 import com.graphhopper.reader.Way;
-import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
+import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
 
 /**
  * Description: A link part of the National Cycle Network
@@ -11,7 +11,7 @@
  * @author phopkins
  *
  */
-public class AdoptedByNationalCycleRoute extends AbstractOsDpnOsmAttibuteMappingVisitor {
+public class AdoptedByNationalCycleRoute extends AbstractOsToOsmAttibuteMappingVisitor {
 
     @Override
     protected void applyAttributes(Way way) {
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByOtherCycleRoute.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/additionalrights/AdoptedByOtherCycleRoute.java
similarity index 70%
rename from core/src/main/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByOtherCycleRoute.java
rename to core/src/main/java/com/graphhopper/reader/osgb/dpn/additionalrights/AdoptedByOtherCycleRoute.java
index ab453aaba4..a937f1a2b6 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByOtherCycleRoute.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/additionalrights/AdoptedByOtherCycleRoute.java
@@ -1,7 +1,7 @@
-package com.graphhopper.reader.osgb.dpn.additionalRights;
+package com.graphhopper.reader.osgb.dpn.additionalrights;
 
 import com.graphhopper.reader.Way;
-import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
+import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
 
 /**
  *
@@ -13,7 +13,7 @@
  * @author phopkins
  *
  */
-public class AdoptedByOtherCycleRoute extends AbstractOsDpnOsmAttibuteMappingVisitor {
+public class AdoptedByOtherCycleRoute extends AbstractOsToOsmAttibuteMappingVisitor {
 
     @Override
     protected void applyAttributes(Way way) {
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByRecreationalRoute.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/additionalrights/AdoptedByRecreationalRoute.java
similarity index 61%
rename from core/src/main/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByRecreationalRoute.java
rename to core/src/main/java/com/graphhopper/reader/osgb/dpn/additionalrights/AdoptedByRecreationalRoute.java
index 37001354f0..42a288719f 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByRecreationalRoute.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/additionalrights/AdoptedByRecreationalRoute.java
@@ -1,7 +1,7 @@
-package com.graphhopper.reader.osgb.dpn.additionalRights;
+package com.graphhopper.reader.osgb.dpn.additionalrights;
 
 import com.graphhopper.reader.Way;
-import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
+import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
 
 /**
  *
@@ -12,7 +12,7 @@
  * @author phopkins
  *
  */
-public class AdoptedByRecreationalRoute extends AbstractOsDpnOsmAttibuteMappingVisitor {
+public class AdoptedByRecreationalRoute extends AbstractOsToOsmAttibuteMappingVisitor {
 
     @Override
     protected void applyAttributes(Way way) {
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/additionalRights/WithinAccessLand.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/additionalrights/WithinAccessLand.java
similarity index 65%
rename from core/src/main/java/com/graphhopper/reader/osgb/dpn/additionalRights/WithinAccessLand.java
rename to core/src/main/java/com/graphhopper/reader/osgb/dpn/additionalrights/WithinAccessLand.java
index dee8b7a5df..d3558cddca 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/additionalRights/WithinAccessLand.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/additionalrights/WithinAccessLand.java
@@ -1,7 +1,7 @@
-package com.graphhopper.reader.osgb.dpn.additionalRights;
+package com.graphhopper.reader.osgb.dpn.additionalrights;
 
 import com.graphhopper.reader.Way;
-import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
+import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
 
 /**
  *
@@ -14,7 +14,7 @@
  * @author phopkins
  *
  */
-public class WithinAccessLand extends AbstractOsDpnOsmAttibuteMappingVisitor {
+public class WithinAccessLand extends AbstractOsToOsmAttibuteMappingVisitor {
 
     @Override
     protected void applyAttributes(Way way) {
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Boulders.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Boulders.java
deleted file mode 100644
index dbdfea1ab9..0000000000
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Boulders.java
+++ /dev/null
@@ -1,16 +0,0 @@
-package com.graphhopper.reader.osgb.dpn.potentialHazards;
-
-import com.graphhopper.reader.Way;
-import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
-
-/**
- * Created by sadam on 13/02/15.
- */
-public class Boulders extends AbstractOsDpnOsmAttibuteMappingVisitor {
-
-    @Override
-    protected void applyAttributes(Way way) {
-        setOrAppendTag(way, "natural", "boulders");
-    }
-
-}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Cliff.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Cliff.java
deleted file mode 100644
index e7f91d26a5..0000000000
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Cliff.java
+++ /dev/null
@@ -1,16 +0,0 @@
-package com.graphhopper.reader.osgb.dpn.potentialHazards;
-
-import com.graphhopper.reader.Way;
-import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
-
-/**
- * Created by sadam on 13/02/15.
- */
-public class Cliff extends AbstractOsDpnOsmAttibuteMappingVisitor {
-
-    @Override
-    protected void applyAttributes(Way way) {
-        setOrAppendTag(way, "natural", "cliff");
-    }
-
-}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Foreshore.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Foreshore.java
deleted file mode 100644
index 8bf388e8a7..0000000000
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Foreshore.java
+++ /dev/null
@@ -1,16 +0,0 @@
-package com.graphhopper.reader.osgb.dpn.potentialHazards;
-
-import com.graphhopper.reader.Way;
-import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
-
-/**
- * Created by sadam on 13/02/15.
- */
-public class Foreshore extends AbstractOsDpnOsmAttibuteMappingVisitor {
-
-    @Override
-    protected void applyAttributes(Way way) {
-        setOrAppendTag(way, "water", "tidal");
-    }
-
-}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Marsh.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Marsh.java
deleted file mode 100644
index 1bf6f1b3a4..0000000000
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Marsh.java
+++ /dev/null
@@ -1,16 +0,0 @@
-package com.graphhopper.reader.osgb.dpn.potentialHazards;
-
-import com.graphhopper.reader.Way;
-import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
-
-/**
- * Created by sadam on 13/02/15.
- */
-public class Marsh extends AbstractOsDpnOsmAttibuteMappingVisitor {
-
-    @Override
-    protected void applyAttributes(Way way) {
-        setOrAppendTag(way, "wetland", "marsh");
-    }
-
-}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Mud.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Mud.java
deleted file mode 100644
index fad73016c7..0000000000
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Mud.java
+++ /dev/null
@@ -1,16 +0,0 @@
-package com.graphhopper.reader.osgb.dpn.potentialHazards;
-
-import com.graphhopper.reader.Way;
-import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
-
-/**
- * Created by sadam on 13/02/15.
- */
-public class Mud extends AbstractOsDpnOsmAttibuteMappingVisitor {
-
-    @Override
-    protected void applyAttributes(Way way) {
-        setOrAppendTag(way, "natural", "mud");
-    }
-
-}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/QuarryOrPit.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/QuarryOrPit.java
deleted file mode 100644
index 55d7c8fe62..0000000000
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/QuarryOrPit.java
+++ /dev/null
@@ -1,16 +0,0 @@
-package com.graphhopper.reader.osgb.dpn.potentialHazards;
-
-import com.graphhopper.reader.Way;
-import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
-
-/**
- * Created by sadam on 13/02/15.
- */
-public class QuarryOrPit extends AbstractOsDpnOsmAttibuteMappingVisitor {
-
-    @Override
-    protected void applyAttributes(Way way) {
-        setOrAppendTag(way, "natural", "excavation");
-    }
-
-}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Rock.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Rock.java
deleted file mode 100644
index ad83eaf547..0000000000
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Rock.java
+++ /dev/null
@@ -1,16 +0,0 @@
-package com.graphhopper.reader.osgb.dpn.potentialHazards;
-
-import com.graphhopper.reader.Way;
-import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
-
-/**
- * Created by sadam on 13/02/15.
- */
-public class Rock extends AbstractOsDpnOsmAttibuteMappingVisitor {
-
-    @Override
-    protected void applyAttributes(Way way) {
-        setOrAppendTag(way, "natural", "rocks");
-    }
-
-}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Sand.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Sand.java
deleted file mode 100644
index 1a78705c13..0000000000
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Sand.java
+++ /dev/null
@@ -1,16 +0,0 @@
-package com.graphhopper.reader.osgb.dpn.potentialHazards;
-
-import com.graphhopper.reader.Way;
-import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
-
-/**
- * Created by sadam on 13/02/15.
- */
-public class Sand extends AbstractOsDpnOsmAttibuteMappingVisitor {
-
-    @Override
-    protected void applyAttributes(Way way) {
-        setOrAppendTag(way, "natural", "sand");
-    }
-
-}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Scree.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Scree.java
deleted file mode 100644
index 80e50d909c..0000000000
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Scree.java
+++ /dev/null
@@ -1,16 +0,0 @@
-package com.graphhopper.reader.osgb.dpn.potentialHazards;
-
-import com.graphhopper.reader.Way;
-import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
-
-/**
- * Created by sadam on 13/02/15.
- */
-public class Scree extends AbstractOsDpnOsmAttibuteMappingVisitor {
-
-    @Override
-    protected void applyAttributes(Way way) {
-        setOrAppendTag(way, "natural", "scree");
-    }
-
-}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Shingle.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Shingle.java
deleted file mode 100644
index 6ab889b21e..0000000000
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Shingle.java
+++ /dev/null
@@ -1,16 +0,0 @@
-package com.graphhopper.reader.osgb.dpn.potentialHazards;
-
-import com.graphhopper.reader.Way;
-import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
-
-/**
- * Created by sadam on 13/02/15.
- */
-public class Shingle extends AbstractOsDpnOsmAttibuteMappingVisitor {
-
-    @Override
-    protected void applyAttributes(Way way) {
-        setOrAppendTag(way, "natural", "shingle");
-    }
-
-}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Spoil.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Spoil.java
deleted file mode 100644
index 214ab87c73..0000000000
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Spoil.java
+++ /dev/null
@@ -1,16 +0,0 @@
-package com.graphhopper.reader.osgb.dpn.potentialHazards;
-
-import com.graphhopper.reader.Way;
-import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
-
-/**
- * Created by sadam on 13/02/15.
- */
-public class Spoil extends AbstractOsDpnOsmAttibuteMappingVisitor {
-
-    @Override
-    protected void applyAttributes(Way way) {
-        setOrAppendTag(way, "man_made", "spoil_heap");
-    }
-
-}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/Boulders.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/Boulders.java
new file mode 100644
index 0000000000..1eaf91c5e7
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/Boulders.java
@@ -0,0 +1,16 @@
+package com.graphhopper.reader.osgb.dpn.potentialhazards;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
+
+/**
+ * Created by sadam on 13/02/15.
+ */
+public class Boulders extends AbstractOsToOsmAttibuteMappingVisitor {
+
+    @Override
+    protected void applyAttributes(Way way) {
+        setOrAppendTag(way, "natural", "boulders");
+    }
+
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/Cliff.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/Cliff.java
new file mode 100644
index 0000000000..d47e08fa52
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/Cliff.java
@@ -0,0 +1,16 @@
+package com.graphhopper.reader.osgb.dpn.potentialhazards;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
+
+/**
+ * Created by sadam on 13/02/15.
+ */
+public class Cliff extends AbstractOsToOsmAttibuteMappingVisitor {
+
+    @Override
+    protected void applyAttributes(Way way) {
+        setOrAppendTag(way, "natural", "cliff");
+    }
+
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/Foreshore.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/Foreshore.java
new file mode 100644
index 0000000000..3919e45a0c
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/Foreshore.java
@@ -0,0 +1,16 @@
+package com.graphhopper.reader.osgb.dpn.potentialhazards;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
+
+/**
+ * Created by sadam on 13/02/15.
+ */
+public class Foreshore extends AbstractOsToOsmAttibuteMappingVisitor {
+
+    @Override
+    protected void applyAttributes(Way way) {
+        setOrAppendTag(way, "water", "tidal");
+    }
+
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/InlandWater.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/InlandWater.java
similarity index 53%
rename from core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/InlandWater.java
rename to core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/InlandWater.java
index a1ad54e788..80d7415f09 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/InlandWater.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/InlandWater.java
@@ -1,12 +1,12 @@
-package com.graphhopper.reader.osgb.dpn.potentialHazards;
+package com.graphhopper.reader.osgb.dpn.potentialhazards;
 
 import com.graphhopper.reader.Way;
-import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
+import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
 
 /**
  * Created by sadam on 13/02/15.
  */
-public class InlandWater extends AbstractOsDpnOsmAttibuteMappingVisitor {
+public class InlandWater extends AbstractOsToOsmAttibuteMappingVisitor {
 
     @Override
     protected void applyAttributes(Way way) {
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/InvalidPotentialHazardException.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/InvalidPotentialHazardException.java
similarity index 78%
rename from core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/InvalidPotentialHazardException.java
rename to core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/InvalidPotentialHazardException.java
index 2d7e2971c0..87978f301f 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/InvalidPotentialHazardException.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/InvalidPotentialHazardException.java
@@ -1,4 +1,4 @@
-package com.graphhopper.reader.osgb.dpn.potentialHazards;
+package com.graphhopper.reader.osgb.dpn.potentialhazards;
 
 import javax.xml.stream.XMLStreamException;
 
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/Marsh.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/Marsh.java
new file mode 100644
index 0000000000..15e0cd6dc6
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/Marsh.java
@@ -0,0 +1,16 @@
+package com.graphhopper.reader.osgb.dpn.potentialhazards;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
+
+/**
+ * Created by sadam on 13/02/15.
+ */
+public class Marsh extends AbstractOsToOsmAttibuteMappingVisitor {
+
+    @Override
+    protected void applyAttributes(Way way) {
+        setOrAppendTag(way, "wetland", "marsh");
+    }
+
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/Mud.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/Mud.java
new file mode 100644
index 0000000000..b4551b836c
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/Mud.java
@@ -0,0 +1,16 @@
+package com.graphhopper.reader.osgb.dpn.potentialhazards;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
+
+/**
+ * Created by sadam on 13/02/15.
+ */
+public class Mud extends AbstractOsToOsmAttibuteMappingVisitor {
+
+    @Override
+    protected void applyAttributes(Way way) {
+        setOrAppendTag(way, "natural", "mud");
+    }
+
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/QuarryOrPit.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/QuarryOrPit.java
new file mode 100644
index 0000000000..3e6777ad3e
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/QuarryOrPit.java
@@ -0,0 +1,16 @@
+package com.graphhopper.reader.osgb.dpn.potentialhazards;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
+
+/**
+ * Created by sadam on 13/02/15.
+ */
+public class QuarryOrPit extends AbstractOsToOsmAttibuteMappingVisitor {
+
+    @Override
+    protected void applyAttributes(Way way) {
+        setOrAppendTag(way, "natural", "excavation");
+    }
+
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/Rock.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/Rock.java
new file mode 100644
index 0000000000..067236682e
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/Rock.java
@@ -0,0 +1,16 @@
+package com.graphhopper.reader.osgb.dpn.potentialhazards;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
+
+/**
+ * Created by sadam on 13/02/15.
+ */
+public class Rock extends AbstractOsToOsmAttibuteMappingVisitor {
+
+    @Override
+    protected void applyAttributes(Way way) {
+        setOrAppendTag(way, "natural", "rocks");
+    }
+
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/Sand.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/Sand.java
new file mode 100644
index 0000000000..beb7493673
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/Sand.java
@@ -0,0 +1,16 @@
+package com.graphhopper.reader.osgb.dpn.potentialhazards;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
+
+/**
+ * Created by sadam on 13/02/15.
+ */
+public class Sand extends AbstractOsToOsmAttibuteMappingVisitor {
+
+    @Override
+    protected void applyAttributes(Way way) {
+        setOrAppendTag(way, "natural", "sand");
+    }
+
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/Scree.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/Scree.java
new file mode 100644
index 0000000000..3eaff6c16d
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/Scree.java
@@ -0,0 +1,16 @@
+package com.graphhopper.reader.osgb.dpn.potentialhazards;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
+
+/**
+ * Created by sadam on 13/02/15.
+ */
+public class Scree extends AbstractOsToOsmAttibuteMappingVisitor {
+
+    @Override
+    protected void applyAttributes(Way way) {
+        setOrAppendTag(way, "natural", "scree");
+    }
+
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/Shingle.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/Shingle.java
new file mode 100644
index 0000000000..158ea8c483
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/Shingle.java
@@ -0,0 +1,16 @@
+package com.graphhopper.reader.osgb.dpn.potentialhazards;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
+
+/**
+ * Created by sadam on 13/02/15.
+ */
+public class Shingle extends AbstractOsToOsmAttibuteMappingVisitor {
+
+    @Override
+    protected void applyAttributes(Way way) {
+        setOrAppendTag(way, "natural", "shingle");
+    }
+
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/Spoil.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/Spoil.java
new file mode 100644
index 0000000000..91d3a0ddf9
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/Spoil.java
@@ -0,0 +1,16 @@
+package com.graphhopper.reader.osgb.dpn.potentialhazards;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
+
+/**
+ * Created by sadam on 13/02/15.
+ */
+public class Spoil extends AbstractOsToOsmAttibuteMappingVisitor {
+
+    @Override
+    protected void applyAttributes(Way way) {
+        setOrAppendTag(way, "man_made", "spoil_heap");
+    }
+
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/TidalWater.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/TidalWater.java
similarity index 53%
rename from core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/TidalWater.java
rename to core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/TidalWater.java
index 98652a3f60..370466594a 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/TidalWater.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/TidalWater.java
@@ -1,12 +1,12 @@
-package com.graphhopper.reader.osgb.dpn.potentialHazards;
+package com.graphhopper.reader.osgb.dpn.potentialhazards;
 
 import com.graphhopper.reader.Way;
-import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
+import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
 
 /**
  * Created by sadam on 13/02/15.
  */
-public class TidalWater extends AbstractOsDpnOsmAttibuteMappingVisitor {
+public class TidalWater extends AbstractOsToOsmAttibuteMappingVisitor {
 
     @Override
     protected void applyAttributes(Way way) {
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/BridleWay.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/BridleWay.java
similarity index 72%
rename from core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/BridleWay.java
rename to core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/BridleWay.java
index 610d7f44de..ff46bad859 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/BridleWay.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/BridleWay.java
@@ -1,7 +1,7 @@
-package com.graphhopper.reader.osgb.dpn.rightOfWay;
+package com.graphhopper.reader.osgb.dpn.rightofway;
 
 import com.graphhopper.reader.Way;
-import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
+import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
 
 /**
  * Description: A route where there is a right to travel on foot, on horseback, to lead a horse and to ride a bicycle
@@ -10,7 +10,7 @@
  *
  * Created by sadam on 13/02/15.
  */
-public class BridleWay extends AbstractOsDpnOsmAttibuteMappingVisitor {
+public class BridleWay extends AbstractOsToOsmAttibuteMappingVisitor {
 
     @Override
     protected void applyAttributes(Way way)
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/BywayOpenToAllTraffic.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/BywayOpenToAllTraffic.java
similarity index 71%
rename from core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/BywayOpenToAllTraffic.java
rename to core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/BywayOpenToAllTraffic.java
index 10ac1c305f..9c97dfe1a3 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/BywayOpenToAllTraffic.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/BywayOpenToAllTraffic.java
@@ -1,7 +1,7 @@
-package com.graphhopper.reader.osgb.dpn.rightOfWay;
+package com.graphhopper.reader.osgb.dpn.rightofway;
 
 import com.graphhopper.reader.Way;
-import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
+import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
 
 /**
  * Description: A highway open to all traffic
@@ -10,7 +10,7 @@
  *
  * Created by sadam on 13/02/15.
  */
-public class BywayOpenToAllTraffic extends AbstractOsDpnOsmAttibuteMappingVisitor {
+public class BywayOpenToAllTraffic extends AbstractOsToOsmAttibuteMappingVisitor {
 
     @Override
     protected void applyAttributes(Way way) {
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/CorePath.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/CorePath.java
similarity index 59%
rename from core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/CorePath.java
rename to core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/CorePath.java
index 10d2703cff..86e4e790f3 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/CorePath.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/CorePath.java
@@ -1,7 +1,7 @@
-package com.graphhopper.reader.osgb.dpn.rightOfWay;
+package com.graphhopper.reader.osgb.dpn.rightofway;
 
 import com.graphhopper.reader.Way;
-import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
+import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
 
 /**
  * Description: A route in Scotland identified as part of the Core Path network.
@@ -12,7 +12,7 @@
  * @author phopkins
  *
  */
-public class CorePath extends AbstractOsDpnOsmAttibuteMappingVisitor {
+public class CorePath extends AbstractOsToOsmAttibuteMappingVisitor {
 
     @Override
     protected void applyAttributes(Way way) {
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/Footpath.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/Footpath.java
similarity index 66%
rename from core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/Footpath.java
rename to core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/Footpath.java
index 8a83f70d5a..672906b7b4 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/Footpath.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/Footpath.java
@@ -1,7 +1,7 @@
-package com.graphhopper.reader.osgb.dpn.rightOfWay;
+package com.graphhopper.reader.osgb.dpn.rightofway;
 
 import com.graphhopper.reader.Way;
-import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
+import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
 
 /**
  * Description: A route where there is a right to travel on foot.
@@ -10,7 +10,7 @@
  *
  * Created by sadam on 13/02/15.
  */
-public class Footpath extends AbstractOsDpnOsmAttibuteMappingVisitor {
+public class Footpath extends AbstractOsToOsmAttibuteMappingVisitor {
 
     @Override
     protected void applyAttributes(Way way)
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/None.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/None.java
similarity index 83%
rename from core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/None.java
rename to core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/None.java
index 8608148896..f302cf928b 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/None.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/None.java
@@ -1,7 +1,7 @@
-package com.graphhopper.reader.osgb.dpn.rightOfWay;
+package com.graphhopper.reader.osgb.dpn.rightofway;
 
 import com.graphhopper.reader.Way;
-import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
+import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
 
 /**
  * Description: A route where no permissive or conventional right of way has been identified. Use may be allowed if the route has been identified as a cycle route,
@@ -11,7 +11,7 @@
  *
  * Created by sadam on 16/02/15.
  */
-public class None extends AbstractOsDpnOsmAttibuteMappingVisitor {
+public class None extends AbstractOsToOsmAttibuteMappingVisitor {
 
     /**
      * This code is written with the assumption that any further DPN elements that will override the bicycle=no will be processed after the rightOfWay element.
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/NormalPermissibleUses.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/NormalPermissibleUses.java
similarity index 69%
rename from core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/NormalPermissibleUses.java
rename to core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/NormalPermissibleUses.java
index 339c3c8f87..30e812966d 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/NormalPermissibleUses.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/NormalPermissibleUses.java
@@ -1,7 +1,7 @@
-package com.graphhopper.reader.osgb.dpn.rightOfWay;
+package com.graphhopper.reader.osgb.dpn.rightofway;
 
 import com.graphhopper.reader.Way;
-import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
+import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
 
 /**
  * Description: No known restrictions on pedestrians, cyclists or horses being ridden. Restrictions may apply to vehicles.
@@ -11,7 +11,7 @@
  * @author phopkins
  *
  */
-public class NormalPermissibleUses  extends AbstractOsDpnOsmAttibuteMappingVisitor {
+public class NormalPermissibleUses  extends AbstractOsToOsmAttibuteMappingVisitor {
 
     @Override
     protected void applyAttributes(Way way) {
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/OtherRouteWithPublicAccess.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/OtherRouteWithPublicAccess.java
similarity index 77%
rename from core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/OtherRouteWithPublicAccess.java
rename to core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/OtherRouteWithPublicAccess.java
index acdfbcd5a3..0556de148e 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/OtherRouteWithPublicAccess.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/OtherRouteWithPublicAccess.java
@@ -1,7 +1,7 @@
-package com.graphhopper.reader.osgb.dpn.rightOfWay;
+package com.graphhopper.reader.osgb.dpn.rightofway;
 
 import com.graphhopper.reader.Way;
-import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
+import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
 
 /**
  * Description: A route that is the responsibility of local highway authorities and maintained at public expense.
@@ -15,7 +15,7 @@
  *
  * Created by sadam on 16/02/15.
  */
-public class OtherRouteWithPublicAccess extends AbstractOsDpnOsmAttibuteMappingVisitor {
+public class OtherRouteWithPublicAccess extends AbstractOsToOsmAttibuteMappingVisitor {
     @Override
     protected void applyAttributes(Way way)
     {
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/PermissiveBridleWay.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/PermissiveBridleWay.java
similarity index 72%
rename from core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/PermissiveBridleWay.java
rename to core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/PermissiveBridleWay.java
index 1f01b07fc0..388b7e4982 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/PermissiveBridleWay.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/PermissiveBridleWay.java
@@ -1,7 +1,7 @@
-package com.graphhopper.reader.osgb.dpn.rightOfWay;
+package com.graphhopper.reader.osgb.dpn.rightofway;
 
 import com.graphhopper.reader.Way;
-import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
+import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
 
 /**
  * Description: A route where the landowner has permitted travel on foot, on horseback or leading a horse and to ride a bicycle.
@@ -11,7 +11,7 @@
  *
  * Created by sadam on 13/02/15.
  */
-public class PermissiveBridleWay extends AbstractOsDpnOsmAttibuteMappingVisitor {
+public class PermissiveBridleWay extends AbstractOsToOsmAttibuteMappingVisitor {
 
     @Override
     protected void applyAttributes(Way way)
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/PermissivePath.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/PermissivePath.java
similarity index 63%
rename from core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/PermissivePath.java
rename to core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/PermissivePath.java
index 8413da9160..04566a3668 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/PermissivePath.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/PermissivePath.java
@@ -1,7 +1,7 @@
-package com.graphhopper.reader.osgb.dpn.rightOfWay;
+package com.graphhopper.reader.osgb.dpn.rightofway;
 
 import com.graphhopper.reader.Way;
-import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
+import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
 
 /**
  * Description: A route where the landowner has permitted travel on foot. This right may be withdrawn by the landowner.
@@ -10,7 +10,7 @@
  *
  * Created by sadam on 13/02/15.
  */
-public class PermissivePath extends AbstractOsDpnOsmAttibuteMappingVisitor {
+public class PermissivePath extends AbstractOsToOsmAttibuteMappingVisitor {
 
     @Override
     protected void applyAttributes(Way way) {
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/RestrictedByway.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/RestrictedByway.java
similarity index 74%
rename from core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/RestrictedByway.java
rename to core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/RestrictedByway.java
index c6791c626e..e39c65c3cf 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/RestrictedByway.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/RestrictedByway.java
@@ -1,7 +1,7 @@
-package com.graphhopper.reader.osgb.dpn.rightOfWay;
+package com.graphhopper.reader.osgb.dpn.rightofway;
 
 import com.graphhopper.reader.Way;
-import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
+import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
 
 /**
  * Description: A route open to all traffic except mechanically propelled vehicles. Formerly known as Road Used as Public Path (RUPP).
@@ -10,7 +10,7 @@
  *
  * Created by sadam on 13/02/15.
  */
-public class RestrictedByway extends AbstractOsDpnOsmAttibuteMappingVisitor {
+public class RestrictedByway extends AbstractOsToOsmAttibuteMappingVisitor {
 
     @Override
     protected void applyAttributes(Way way)
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/itn/OSITNElement.java b/core/src/main/java/com/graphhopper/reader/osgb/itn/OSITNElement.java
index f995eb41aa..114697bf06 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/itn/OSITNElement.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/itn/OSITNElement.java
@@ -209,18 +209,18 @@ private int handleDescriptiveGroup(XMLStreamReader parser) throws XMLStreamExcep
     private String resolveHighway(String elementText) {
         logger.info("OSITNElement.resolveHighway( " + elementText + ")");
         switch (elementText) {
+        case "Private Road – Publicly Accessible":	
+        	setTag("access", "private");
+        	return elementText;
+        case "Private Road - Restricted Access":
+        	setTag("access", "no");
         case "A Road":
         case "Motorway":
         case "B Road":
         case "Minor Road":
-            // Pedestrianised Street is supported for walking so traversing will be controlled by speed in the flag encoders
-        //case "Pedestrianised Street":
-            // Private Road - Publicly Accessible are NOT traversible
-            //        case "Private Road - Publicly Accessible":
-            // Alleys are not traversible
-            // case "Alley":
-            // Private Road - Restricted Access are not traversible
-            // case "Private Road - Restricted Access":
+        	return elementText;
+        case "Pedestrianised Street":
+            return "pedestrian";
         case "Local Street":
             return elementText;
         default:
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/ARoad.java b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/ARoad.java
new file mode 100644
index 0000000000..7408a179c3
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/ARoad.java
@@ -0,0 +1,14 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
+
+public class ARoad extends AbstractOsToOsmAttibuteMappingVisitor
+{
+
+	@Override
+	protected void applyAttributes( Way way )
+	{
+		way.setTag("highway","primary");
+	}
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/Alley.java b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/Alley.java
new file mode 100644
index 0000000000..2daa2d67e5
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/Alley.java
@@ -0,0 +1,15 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
+
+public class Alley extends AbstractOsToOsmAttibuteMappingVisitor
+{
+
+	@Override
+	protected void applyAttributes( Way way )
+	{
+		way.setTag("highway", "service");
+		way.setTag("service", "alley");
+	}
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/BRoad.java b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/BRoad.java
new file mode 100644
index 0000000000..348e11f845
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/BRoad.java
@@ -0,0 +1,14 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
+
+public class BRoad extends AbstractOsToOsmAttibuteMappingVisitor
+{
+
+	@Override
+	protected void applyAttributes( Way way )
+	{
+		way.setTag("highway","secondary");
+	}
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/DualCarriageway.java b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/DualCarriageway.java
new file mode 100644
index 0000000000..9e19abf7a3
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/DualCarriageway.java
@@ -0,0 +1,14 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
+
+public class DualCarriageway extends AbstractOsToOsmAttibuteMappingVisitor
+{
+
+	@Override
+    protected void applyAttributes( Way way )
+    {
+	   	way.setTag("maxspeed:type", "GB:nsl_dual");
+    }
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/LocalStreet.java b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/LocalStreet.java
new file mode 100644
index 0000000000..f19a7321a9
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/LocalStreet.java
@@ -0,0 +1,14 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
+
+public class LocalStreet extends AbstractOsToOsmAttibuteMappingVisitor
+{
+
+	@Override
+	protected void applyAttributes( Way way )
+	{
+		way.setTag("highway","unclassified");
+	}
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/MinorRoad.java b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/MinorRoad.java
new file mode 100644
index 0000000000..9f9d603661
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/MinorRoad.java
@@ -0,0 +1,14 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
+
+public class MinorRoad extends AbstractOsToOsmAttibuteMappingVisitor
+{
+
+	@Override
+	protected void applyAttributes( Way way )
+	{
+		way.setTag("highway","tertiary");
+	}
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/Motorway.java b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/Motorway.java
new file mode 100644
index 0000000000..8177e1182b
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/Motorway.java
@@ -0,0 +1,15 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
+
+public class Motorway extends AbstractOsToOsmAttibuteMappingVisitor
+{
+
+	@Override
+	protected void applyAttributes( Way way )
+	{
+		way.setTag("highway","motorway");
+		way.setTag("maxspeed:type","GB:motorway");
+	}
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/PedestrianisedStreet.java b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/PedestrianisedStreet.java
new file mode 100644
index 0000000000..c4e02dfccb
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/PedestrianisedStreet.java
@@ -0,0 +1,14 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
+
+public class PedestrianisedStreet extends AbstractOsToOsmAttibuteMappingVisitor
+{
+
+	@Override
+	protected void applyAttributes( Way way )
+	{
+		way.setTag("highway","pedestrian");
+	}
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/PrivateRoadPubliclyAccessible.java b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/PrivateRoadPubliclyAccessible.java
new file mode 100644
index 0000000000..9121ec53ac
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/PrivateRoadPubliclyAccessible.java
@@ -0,0 +1,13 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
+
+public class PrivateRoadPubliclyAccessible extends AbstractOsToOsmAttibuteMappingVisitor {
+			
+	@Override
+    protected void applyAttributes( Way way )
+    {
+	   way.setTag("access", "private");
+    }
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/PrivateRoadRestrictedAccess.java b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/PrivateRoadRestrictedAccess.java
new file mode 100644
index 0000000000..20d853d0b0
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/PrivateRoadRestrictedAccess.java
@@ -0,0 +1,14 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
+
+public class PrivateRoadRestrictedAccess extends AbstractOsToOsmAttibuteMappingVisitor
+{
+
+	@Override
+    protected void applyAttributes( Way way )
+    {
+	   	way.setTag("access", "no");
+    }
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/SingleCarriageway.java b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/SingleCarriageway.java
new file mode 100644
index 0000000000..b6b35b6b2a
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/SingleCarriageway.java
@@ -0,0 +1,14 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
+
+public class SingleCarriageway extends AbstractOsToOsmAttibuteMappingVisitor
+{
+
+	@Override
+    protected void applyAttributes( Way way )
+    {
+	   	way.setTag("maxspeed:type", "GB:nsl_single");
+    }
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/Urban.java b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/Urban.java
new file mode 100644
index 0000000000..92ac97893b
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/Urban.java
@@ -0,0 +1,16 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
+import com.graphhopper.routing.util.CarFlagEncoder;
+
+public class Urban extends AbstractOsToOsmAttibuteMappingVisitor
+{
+	@Override
+    protected void applyAttributes( Way way )
+    {
+		if(!way.hasTag("maxspeed")) {
+			way.setTag("maxspeed", "30 mph");
+		}
+    }
+}
diff --git a/core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
index 3d73ad867b..f7debdc241 100644
--- a/core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
@@ -49,9 +49,9 @@
     /**
      * 1mph = 1.60934kph
      */
-    public static final int SEVENTY_MPH_IN_KPH = 112;
-    public static final int SIXTY_MPH_IN_KPH = 96;
-    public static final int THIRTY_MPH_IN_KPH = 48;
+    public static final int SEVENTY_MPH_IN_KPH = (int)parseSpeed("70mph");
+    public static final int SIXTY_MPH_IN_KPH = (int)parseSpeed("60mph");;
+    public static final int THIRTY_MPH_IN_KPH = (int)parseSpeed("30mph");;
 
     /**
      * Should be only instantied via EncodingManager
@@ -140,39 +140,8 @@ public CarFlagEncoder( int speedBits, double speedFactor, int maxTurnCosts )
         // forestry stuff
         defaultSpeedMap.put("track", 15);
 
-        defaultSpeedMap.put("Motorway", SEVENTY_MPH_IN_KPH);
-        defaultSpeedMap.put("A Road", SIXTY_MPH_IN_KPH);
-        defaultSpeedMap.put("B Road", THIRTY_MPH_IN_KPH);
-        defaultSpeedMap.put("Minor Road", THIRTY_MPH_IN_KPH);
-        defaultSpeedMap.put("Local Street", THIRTY_MPH_IN_KPH);
-        //        defaultSpeedMap.put("Alley", 35);
-        defaultSpeedMap.put("A Road-Single Carriageway", SIXTY_MPH_IN_KPH);
-        defaultSpeedMap.put("B Road", THIRTY_MPH_IN_KPH);
-        defaultSpeedMap.put("Minor Road", THIRTY_MPH_IN_KPH);
-        defaultSpeedMap.put("Local Street", THIRTY_MPH_IN_KPH);
-        //        defaultSpeedMap.put("Alley", 35);
-        defaultSpeedMap.put("Motorway", SEVENTY_MPH_IN_KPH);
-        defaultSpeedMap.put("A Road", SIXTY_MPH_IN_KPH);
-        defaultSpeedMap.put("B Road", THIRTY_MPH_IN_KPH);
-        defaultSpeedMap.put("Minor Road", THIRTY_MPH_IN_KPH);
-        defaultSpeedMap.put("Local Street", THIRTY_MPH_IN_KPH);
-        //        defaultSpeedMap.put("Alley", 35);
-        defaultSpeedMap.put("A Road-Dual Carriageway", SIXTY_MPH_IN_KPH);
-        defaultSpeedMap.put("B Road", THIRTY_MPH_IN_KPH);
-        defaultSpeedMap.put("Minor Road", THIRTY_MPH_IN_KPH);
-        defaultSpeedMap.put("Local Street", THIRTY_MPH_IN_KPH);
-        //        defaultSpeedMap.put("Alley", 35);
-        defaultSpeedMap.put("Motorway-Slip Road", SEVENTY_MPH_IN_KPH);
-        defaultSpeedMap.put("A Road-Slip Road", SIXTY_MPH_IN_KPH);
-        defaultSpeedMap.put("B Road", THIRTY_MPH_IN_KPH);
-        defaultSpeedMap.put("Minor Road", THIRTY_MPH_IN_KPH);
-        defaultSpeedMap.put("Local Street", THIRTY_MPH_IN_KPH);
-        //        defaultSpeedMap.put("Alley", 35);
-        defaultSpeedMap.put("Motorway-Roundabout", SEVENTY_MPH_IN_KPH);
-        defaultSpeedMap.put("A Road-Roundabout", SIXTY_MPH_IN_KPH);
-        defaultSpeedMap.put("B Road-Roundabout", THIRTY_MPH_IN_KPH);
-        defaultSpeedMap.put("Minor Road-Roundabout", THIRTY_MPH_IN_KPH);
-        defaultSpeedMap.put("Local Street-Roundabout", THIRTY_MPH_IN_KPH);
+        addNationalUKSpeedMapping();
+        addRoadTypeUKSpeedMapping();
 
         // You can not drive down a pedestrianised street
         defaultSpeedMap.put("Pedestrianised Street", 0);
@@ -218,6 +187,50 @@ public CarFlagEncoder( int speedBits, double speedFactor, int maxTurnCosts )
         environmentMaxSpeedMap.put("Urban:Single Carriageway", ""+THIRTY_MPH_IN_KPH);
 
 
+    }
+
+	private void addNationalUKSpeedMapping()
+    {
+	    defaultSpeedMap.put("GB:motorway", SEVENTY_MPH_IN_KPH);
+	    defaultSpeedMap.put("GB:nsl_dual", SEVENTY_MPH_IN_KPH);
+	    defaultSpeedMap.put("GB:nsl_single", SIXTY_MPH_IN_KPH);
+    }
+
+	private void addRoadTypeUKSpeedMapping()
+    {
+	    defaultSpeedMap.put("Motorway", SEVENTY_MPH_IN_KPH);
+        defaultSpeedMap.put("A Road", SIXTY_MPH_IN_KPH);
+        defaultSpeedMap.put("B Road", THIRTY_MPH_IN_KPH);
+        defaultSpeedMap.put("Minor Road", THIRTY_MPH_IN_KPH);
+        defaultSpeedMap.put("Local Street", THIRTY_MPH_IN_KPH);
+        //        defaultSpeedMap.put("Alley", 35);
+        defaultSpeedMap.put("A Road-Single Carriageway", SIXTY_MPH_IN_KPH);
+        defaultSpeedMap.put("B Road", THIRTY_MPH_IN_KPH);
+        defaultSpeedMap.put("Minor Road", THIRTY_MPH_IN_KPH);
+        defaultSpeedMap.put("Local Street", THIRTY_MPH_IN_KPH);
+        //        defaultSpeedMap.put("Alley", 35);
+        defaultSpeedMap.put("Motorway", SEVENTY_MPH_IN_KPH);
+        defaultSpeedMap.put("A Road", SIXTY_MPH_IN_KPH);
+        defaultSpeedMap.put("B Road", THIRTY_MPH_IN_KPH);
+        defaultSpeedMap.put("Minor Road", THIRTY_MPH_IN_KPH);
+        defaultSpeedMap.put("Local Street", THIRTY_MPH_IN_KPH);
+        //        defaultSpeedMap.put("Alley", 35);
+        defaultSpeedMap.put("A Road-Dual Carriageway", SIXTY_MPH_IN_KPH);
+        defaultSpeedMap.put("B Road", THIRTY_MPH_IN_KPH);
+        defaultSpeedMap.put("Minor Road", THIRTY_MPH_IN_KPH);
+        defaultSpeedMap.put("Local Street", THIRTY_MPH_IN_KPH);
+        //        defaultSpeedMap.put("Alley", 35);
+        defaultSpeedMap.put("Motorway-Slip Road", SEVENTY_MPH_IN_KPH);
+        defaultSpeedMap.put("A Road-Slip Road", SIXTY_MPH_IN_KPH);
+        defaultSpeedMap.put("B Road", THIRTY_MPH_IN_KPH);
+        defaultSpeedMap.put("Minor Road", THIRTY_MPH_IN_KPH);
+        defaultSpeedMap.put("Local Street", THIRTY_MPH_IN_KPH);
+        //        defaultSpeedMap.put("Alley", 35);
+        defaultSpeedMap.put("Motorway-Roundabout", SEVENTY_MPH_IN_KPH);
+        defaultSpeedMap.put("A Road-Roundabout", SIXTY_MPH_IN_KPH);
+        defaultSpeedMap.put("B Road-Roundabout", THIRTY_MPH_IN_KPH);
+        defaultSpeedMap.put("Minor Road-Roundabout", THIRTY_MPH_IN_KPH);
+        defaultSpeedMap.put("Local Street-Roundabout", THIRTY_MPH_IN_KPH);
     }
 
     /**
@@ -235,21 +248,25 @@ public int defineWayBits( int index, int shift )
 
     protected double getSpeed( Way way )
     {
-        String highwayValue = way.getTag("highway");
-        Integer speed = defaultSpeedMap.get(highwayValue);
-        if (speed == null)
-            throw new IllegalStateException(toString() + ", no speed found for: " + highwayValue + ", tags: " + way);
-
-        if (highwayValue.equals("track"))
-        {
-            String tt = way.getTag("tracktype");
-            if (!Helper.isEmpty(tt))
-            {
-                Integer tInt = trackTypeSpeedMap.get(tt);
-                if (tInt != null)
-                    speed = tInt;
-            }
-        }
+    	String typeMax = way.getTag("maxspeed:type");
+    	Integer speed = defaultSpeedMap.get(typeMax);
+    	if(null==speed) {
+    		String highwayValue = way.getTag("highway");
+    		speed = defaultSpeedMap.get(highwayValue);
+    		if (speed == null)
+    			throw new IllegalStateException(toString() + ", no speed found for: " + highwayValue + ", tags: " + way);
+
+    		if (highwayValue.equals("track"))
+    		{
+    			String tt = way.getTag("tracktype");
+    			if (!Helper.isEmpty(tt))
+    			{
+    				Integer tInt = trackTypeSpeedMap.get(tt);
+    				if (tInt != null)
+    					speed = tInt;
+    			}
+    		}
+    	}
 
         return speed;
     }
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/OSITNWayTest.java b/core/src/test/java/com/graphhopper/reader/osgb/OSITNWayTest.java
index 27552137f6..6acf2ed2f2 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/OSITNWayTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/OSITNWayTest.java
@@ -45,5 +45,61 @@ public void testReadTagsForRoundabout() throws XMLStreamException, MismatchedDim
 		assertTrue(way.hasTag("junction", "roundabout"));
         assertTrue("ITN Data is uk specific so roundabouts should be clockwise", way.hasTag("direction", "clockwise"));
 	}
+	
+	@Test
+	public void testReadTagsForPrivatePublicallyAccessibleRoads() throws XMLStreamException, MismatchedDimensionException, FactoryException, TransformException {
+		String wayWithRoundabout = "<?xml version='1.0' encoding='UTF-8'?>\n" + 
+				"<osgb:FeatureCollection xmlns:osgb='http://www.ordnancesurvey.co.uk/xml/namespaces/osgb'\n" + 
+				"	xmlns:gml='http://www.opengis.net/gml' xmlns:xlink='http://www.w3.org/1999/xlink' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'\n" + 
+				"	xsi:schemaLocation='http://www.ordnancesurvey.co.uk/xml/namespaces/osgb http://www.ordnancesurvey.co.uk/xml/schema/v7/OSDNFFeatures.xsd'\n" + 
+				"	fid='GDS-58096-1'>" +
+				"		<osgb:RoadLink fid='osgb4000000009314037'>\n" + 
+				"<osgb:descriptiveTerm>Private Road – Publicly Accessible</osgb:descriptiveTerm>\n" + 
+				"<osgb:natureOfRoad>Single Carriageway</osgb:natureOfRoad>\n" + 
+				"<osgb:length>12.04</osgb:length>\n" + 
+				"<osgb:polyline>\n" + 
+				"<gml:LineString srsName='osgb:BNG'>\n" + 
+				"<gml:coordinates>356370.000,430137.000 356367.000,430139.000 356366.000,430141.000 356365.386,430142.099 356365.000,430144.000 356365.000,430146.000 356365.000,430147.000 </gml:coordinates>\n" + 
+				"</gml:LineString>\n" + 
+				"</osgb:polyline>\n" + 
+				"<osgb:directedNode orientation='-' xlink:href='#osgb4000000009126286'/>\n" + 
+				"<osgb:directedNode orientation='+' xlink:href='#osgb4000000009126257'/>\n" + 
+				"<osgb:referenceToTopographicArea xlink:href='#osgb1000000214086160'/>\n" + 
+				"</osgb:RoadLink>"; 
+		
+		XMLInputFactory factory = XMLInputFactory.newInstance();
+		StringReader stringReader = new StringReader(wayWithRoundabout);
+		XMLStreamReader parser = factory.createXMLStreamReader(stringReader);
+		OSITNWay way = OSITNWay.create(0, parser);
+		assertEquals("private", way.getTag("access"));
+	}
+	
+	@Test
+	public void testReadTagsPrivateRestrictedRoads() throws XMLStreamException, MismatchedDimensionException, FactoryException, TransformException {
+		String wayWithRoundabout = "<?xml version='1.0' encoding='UTF-8'?>\n" + 
+				"<osgb:FeatureCollection xmlns:osgb='http://www.ordnancesurvey.co.uk/xml/namespaces/osgb'\n" + 
+				"	xmlns:gml='http://www.opengis.net/gml' xmlns:xlink='http://www.w3.org/1999/xlink' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'\n" + 
+				"	xsi:schemaLocation='http://www.ordnancesurvey.co.uk/xml/namespaces/osgb http://www.ordnancesurvey.co.uk/xml/schema/v7/OSDNFFeatures.xsd'\n" + 
+				"	fid='GDS-58096-1'>" +
+				"		<osgb:RoadLink fid='osgb4000000009314037'>\n" + 
+				"<osgb:descriptiveTerm>Private Road - Restricted Access</osgb:descriptiveTerm>\n" + 
+				"<osgb:natureOfRoad>Single Carriageway</osgb:natureOfRoad>\n" + 
+				"<osgb:length>12.04</osgb:length>\n" + 
+				"<osgb:polyline>\n" + 
+				"<gml:LineString srsName='osgb:BNG'>\n" + 
+				"<gml:coordinates>356370.000,430137.000 356367.000,430139.000 356366.000,430141.000 356365.386,430142.099 356365.000,430144.000 356365.000,430146.000 356365.000,430147.000 </gml:coordinates>\n" + 
+				"</gml:LineString>\n" + 
+				"</osgb:polyline>\n" + 
+				"<osgb:directedNode orientation='-' xlink:href='#osgb4000000009126286'/>\n" + 
+				"<osgb:directedNode orientation='+' xlink:href='#osgb4000000009126257'/>\n" + 
+				"<osgb:referenceToTopographicArea xlink:href='#osgb1000000214086160'/>\n" + 
+				"</osgb:RoadLink>"; 
+		
+		XMLInputFactory factory = XMLInputFactory.newInstance();
+		StringReader stringReader = new StringReader(wayWithRoundabout);
+		XMLStreamReader parser = factory.createXMLStreamReader(stringReader);
+		OSITNWay way = OSITNWay.create(0, parser);
+		assertEquals("no", way.getTag("access"));
+	}
 
 }
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/OsDpnWayTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/OsDpnWayTest.java
index 3c15568953..3b77ac1968 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/OsDpnWayTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/OsDpnWayTest.java
@@ -13,7 +13,7 @@
 import org.opengis.referencing.FactoryException;
 import org.opengis.referencing.operation.TransformException;
 
-import com.graphhopper.reader.osgb.dpn.potentialHazards.InvalidPotentialHazardException;
+import com.graphhopper.reader.osgb.dpn.potentialhazards.InvalidPotentialHazardException;
 
 public class OsDpnWayTest {
 
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByNationalCycleRouteTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByNationalCycleRouteTest.java
index bfc3991d64..b7d994d717 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByNationalCycleRouteTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByNationalCycleRouteTest.java
@@ -10,10 +10,11 @@
 import org.mockito.MockitoAnnotations;
 
 import com.graphhopper.reader.Way;
-import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.OsToOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.dpn.additionalrights.AdoptedByNationalCycleRoute;
 
 public class AdoptedByNationalCycleRouteTest {
-    static OsDpnOsmAttributeMappingVisitor visitor;
+    static OsToOsmAttributeMappingVisitor visitor;
     @Mock
     Way way;
 
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByOtherCycleRouteTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByOtherCycleRouteTest.java
index 74b5047ae0..85c5b0f7a2 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByOtherCycleRouteTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByOtherCycleRouteTest.java
@@ -10,10 +10,11 @@
 import org.mockito.MockitoAnnotations;
 
 import com.graphhopper.reader.Way;
-import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.OsToOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.dpn.additionalrights.AdoptedByOtherCycleRoute;
 
 public class AdoptedByOtherCycleRouteTest {
-    static OsDpnOsmAttributeMappingVisitor visitor;
+    static OsToOsmAttributeMappingVisitor visitor;
     @Mock
     Way way;
 
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByRecreationalRouteTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByRecreationalRouteTest.java
index a4e664ceb9..e036d68281 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByRecreationalRouteTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByRecreationalRouteTest.java
@@ -10,10 +10,11 @@
 import org.mockito.MockitoAnnotations;
 
 import com.graphhopper.reader.Way;
-import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.OsToOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.dpn.additionalrights.AdoptedByRecreationalRoute;
 
 public class AdoptedByRecreationalRouteTest {
-    static OsDpnOsmAttributeMappingVisitor visitor;
+    static OsToOsmAttributeMappingVisitor visitor;
     @Mock
     Way way;
 
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/additionalRights/WithinAccessLandTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/additionalRights/WithinAccessLandTest.java
index 6b7cbdb11d..2a902b4638 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/additionalRights/WithinAccessLandTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/additionalRights/WithinAccessLandTest.java
@@ -10,10 +10,11 @@
 import org.mockito.MockitoAnnotations;
 
 import com.graphhopper.reader.Way;
-import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.OsToOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.dpn.additionalrights.WithinAccessLand;
 
 public class WithinAccessLandTest {
-    static OsDpnOsmAttributeMappingVisitor visitor;
+    static OsToOsmAttributeMappingVisitor visitor;
     @Mock
     Way way;
 
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/BouldersTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/BouldersTest.java
index e3eb8cf0bc..9dcb73d689 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/BouldersTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/BouldersTest.java
@@ -10,10 +10,11 @@
 import org.mockito.MockitoAnnotations;
 
 import com.graphhopper.reader.Way;
-import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.OsToOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.dpn.potentialhazards.Boulders;
 
 public class BouldersTest {
-    static OsDpnOsmAttributeMappingVisitor visitor;
+    static OsToOsmAttributeMappingVisitor visitor;
     @Mock
     Way way;
 
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/CliffTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/CliffTest.java
index ef8bfb6266..52e9da73c2 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/CliffTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/CliffTest.java
@@ -10,10 +10,11 @@
 import org.mockito.MockitoAnnotations;
 
 import com.graphhopper.reader.Way;
-import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.OsToOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.dpn.potentialhazards.Cliff;
 
 public class CliffTest {
-    static OsDpnOsmAttributeMappingVisitor visitor;
+    static OsToOsmAttributeMappingVisitor visitor;
     @Mock
     Way way;
 
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/ForeshoreTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/ForeshoreTest.java
index 95d88b8f35..4e396c3abd 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/ForeshoreTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/ForeshoreTest.java
@@ -10,10 +10,11 @@
 import org.mockito.MockitoAnnotations;
 
 import com.graphhopper.reader.Way;
-import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.OsToOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.dpn.potentialhazards.Foreshore;
 
 public class ForeshoreTest {
-    static OsDpnOsmAttributeMappingVisitor visitor;
+    static OsToOsmAttributeMappingVisitor visitor;
     @Mock
     Way way;
 
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/InlandWaterTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/InlandWaterTest.java
index 6e74406400..c5c1594980 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/InlandWaterTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/InlandWaterTest.java
@@ -10,10 +10,11 @@
 import org.mockito.MockitoAnnotations;
 
 import com.graphhopper.reader.Way;
-import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.OsToOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.dpn.potentialhazards.InlandWater;
 
 public class InlandWaterTest {
-    static OsDpnOsmAttributeMappingVisitor visitor;
+    static OsToOsmAttributeMappingVisitor visitor;
     @Mock
     Way way;
 
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/MarshTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/MarshTest.java
index a341152db6..86a8a81126 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/MarshTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/MarshTest.java
@@ -10,10 +10,11 @@
 import org.mockito.MockitoAnnotations;
 
 import com.graphhopper.reader.Way;
-import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.OsToOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.dpn.potentialhazards.Marsh;
 
 public class MarshTest {
-    static OsDpnOsmAttributeMappingVisitor visitor;
+    static OsToOsmAttributeMappingVisitor visitor;
     @Mock
     Way way;
 
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/MudTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/MudTest.java
index 4193c88d22..1410ae035b 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/MudTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/MudTest.java
@@ -10,10 +10,11 @@
 import org.mockito.MockitoAnnotations;
 
 import com.graphhopper.reader.Way;
-import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.OsToOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.dpn.potentialhazards.Mud;
 
 public class MudTest {
-    static OsDpnOsmAttributeMappingVisitor visitor;
+    static OsToOsmAttributeMappingVisitor visitor;
     @Mock
     Way way;
 
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/QuarryOrPitTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/QuarryOrPitTest.java
index 48a2070371..b5907e332e 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/QuarryOrPitTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/QuarryOrPitTest.java
@@ -10,10 +10,11 @@
 import org.mockito.MockitoAnnotations;
 
 import com.graphhopper.reader.Way;
-import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.OsToOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.dpn.potentialhazards.QuarryOrPit;
 
 public class QuarryOrPitTest {
-    static OsDpnOsmAttributeMappingVisitor visitor;
+    static OsToOsmAttributeMappingVisitor visitor;
     @Mock
     Way way;
 
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/RockTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/RockTest.java
index 04184a048b..0b541210ee 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/RockTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/RockTest.java
@@ -10,10 +10,11 @@
 import org.mockito.MockitoAnnotations;
 
 import com.graphhopper.reader.Way;
-import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.OsToOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.dpn.potentialhazards.Rock;
 
 public class RockTest {
-    static OsDpnOsmAttributeMappingVisitor visitor;
+    static OsToOsmAttributeMappingVisitor visitor;
     @Mock
     Way way;
 
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/SandTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/SandTest.java
index d28d57e14b..28c2565e18 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/SandTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/SandTest.java
@@ -10,10 +10,11 @@
 import org.mockito.MockitoAnnotations;
 
 import com.graphhopper.reader.Way;
-import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.OsToOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.dpn.potentialhazards.Sand;
 
 public class SandTest {
-    static OsDpnOsmAttributeMappingVisitor visitor;
+    static OsToOsmAttributeMappingVisitor visitor;
     @Mock
     Way way;
 
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/ScreeTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/ScreeTest.java
index a95f4c1fc7..096a02af5c 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/ScreeTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/ScreeTest.java
@@ -10,10 +10,11 @@
 import org.mockito.MockitoAnnotations;
 
 import com.graphhopper.reader.Way;
-import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.OsToOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.dpn.potentialhazards.Scree;
 
 public class ScreeTest {
-    static OsDpnOsmAttributeMappingVisitor visitor;
+    static OsToOsmAttributeMappingVisitor visitor;
     @Mock
     Way way;
 
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/ShingleTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/ShingleTest.java
index a1d7e1951b..59330ebcf8 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/ShingleTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/ShingleTest.java
@@ -10,10 +10,11 @@
 import org.mockito.MockitoAnnotations;
 
 import com.graphhopper.reader.Way;
-import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.OsToOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.dpn.potentialhazards.Shingle;
 
 public class ShingleTest {
-    static OsDpnOsmAttributeMappingVisitor visitor;
+    static OsToOsmAttributeMappingVisitor visitor;
     @Mock
     Way way;
 
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/SpoilTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/SpoilTest.java
index 02d8454fb0..8bd9c3e652 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/SpoilTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/SpoilTest.java
@@ -10,10 +10,11 @@
 import org.mockito.MockitoAnnotations;
 
 import com.graphhopper.reader.Way;
-import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.OsToOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.dpn.potentialhazards.Spoil;
 
 public class SpoilTest {
-    static OsDpnOsmAttributeMappingVisitor visitor;
+    static OsToOsmAttributeMappingVisitor visitor;
     @Mock
     Way way;
 
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/TidalWaterTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/TidalWaterTest.java
index 99e6d72809..0d589afd8b 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/TidalWaterTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/TidalWaterTest.java
@@ -10,10 +10,11 @@
 import org.mockito.MockitoAnnotations;
 
 import com.graphhopper.reader.Way;
-import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.OsToOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.dpn.potentialhazards.TidalWater;
 
 public class TidalWaterTest {
-    static OsDpnOsmAttributeMappingVisitor visitor;
+    static OsToOsmAttributeMappingVisitor visitor;
     @Mock
     Way way;
 
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/BridleWayTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/BridleWayTest.java
index 4c33dcc736..71d2089282 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/BridleWayTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/BridleWayTest.java
@@ -10,10 +10,11 @@
 import org.mockito.MockitoAnnotations;
 
 import com.graphhopper.reader.Way;
-import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.OsToOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.dpn.rightofway.BridleWay;
 
 public class BridleWayTest {
-    static OsDpnOsmAttributeMappingVisitor visitor;
+    static OsToOsmAttributeMappingVisitor visitor;
     @Mock
     Way way;
 
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/BywayOpenToAllTrafficTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/BywayOpenToAllTrafficTest.java
index 3d3f0a35f3..8af9a13828 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/BywayOpenToAllTrafficTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/BywayOpenToAllTrafficTest.java
@@ -10,11 +10,12 @@
 import org.mockito.MockitoAnnotations;
 
 import com.graphhopper.reader.Way;
-import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.OsToOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.dpn.rightofway.BywayOpenToAllTraffic;
 
 public class BywayOpenToAllTrafficTest {
 
-    static OsDpnOsmAttributeMappingVisitor visitor;
+    static OsToOsmAttributeMappingVisitor visitor;
     @Mock
     Way way;
 
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/CorePathTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/CorePathTest.java
index 958cca220b..66e039be99 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/CorePathTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/CorePathTest.java
@@ -9,10 +9,11 @@
 import org.mockito.MockitoAnnotations;
 
 import com.graphhopper.reader.Way;
-import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.OsToOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.dpn.rightofway.BridleWay;
 
 public class CorePathTest {
-    static OsDpnOsmAttributeMappingVisitor visitor;
+    static OsToOsmAttributeMappingVisitor visitor;
     @Mock
     Way way;
 
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/FootpathTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/FootpathTest.java
index 89f63a5721..56cf2206b2 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/FootpathTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/FootpathTest.java
@@ -10,10 +10,11 @@
 import org.mockito.MockitoAnnotations;
 
 import com.graphhopper.reader.Way;
-import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.OsToOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.dpn.rightofway.Footpath;
 
 public class FootpathTest {
-    static OsDpnOsmAttributeMappingVisitor visitor;
+    static OsToOsmAttributeMappingVisitor visitor;
     @Mock
     Way way;
 
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/NoneTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/NoneTest.java
index 8c790c1835..bc4ead87e5 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/NoneTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/NoneTest.java
@@ -10,10 +10,11 @@
 import org.mockito.MockitoAnnotations;
 
 import com.graphhopper.reader.Way;
-import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.OsToOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.dpn.rightofway.None;
 
 public class NoneTest {
-    static OsDpnOsmAttributeMappingVisitor visitor;
+    static OsToOsmAttributeMappingVisitor visitor;
     @Mock
     Way way;
 
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/NormalPermissiveUsesTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/NormalPermissiveUsesTest.java
index 6c43a58663..93d3581a33 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/NormalPermissiveUsesTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/NormalPermissiveUsesTest.java
@@ -10,10 +10,11 @@
 import org.mockito.MockitoAnnotations;
 
 import com.graphhopper.reader.Way;
-import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.OsToOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.dpn.rightofway.NormalPermissibleUses;
 
 public class NormalPermissiveUsesTest {
-    static OsDpnOsmAttributeMappingVisitor visitor;
+    static OsToOsmAttributeMappingVisitor visitor;
     @Mock
     Way way;
 
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/OtherRouteWithPublicAccessTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/OtherRouteWithPublicAccessTest.java
index d077b2bbaa..1d1ed8a051 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/OtherRouteWithPublicAccessTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/OtherRouteWithPublicAccessTest.java
@@ -10,10 +10,11 @@
 import org.mockito.MockitoAnnotations;
 
 import com.graphhopper.reader.Way;
-import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.OsToOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.dpn.rightofway.OtherRouteWithPublicAccess;
 
 public class OtherRouteWithPublicAccessTest {
-    static OsDpnOsmAttributeMappingVisitor visitor;
+    static OsToOsmAttributeMappingVisitor visitor;
     @Mock
     Way way;
 
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/PermissiveBridleWayTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/PermissiveBridleWayTest.java
index 1158e464a7..19291c5f80 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/PermissiveBridleWayTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/PermissiveBridleWayTest.java
@@ -10,10 +10,11 @@
 import org.mockito.MockitoAnnotations;
 
 import com.graphhopper.reader.Way;
-import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.OsToOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.dpn.rightofway.PermissiveBridleWay;
 
 public class PermissiveBridleWayTest {
-    static OsDpnOsmAttributeMappingVisitor visitor;
+    static OsToOsmAttributeMappingVisitor visitor;
     @Mock
     Way way;
 
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/PermissivePathTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/PermissivePathTest.java
index 9c16b6f1d3..1d509e58cc 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/PermissivePathTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/PermissivePathTest.java
@@ -10,11 +10,12 @@
 import org.mockito.MockitoAnnotations;
 
 import com.graphhopper.reader.Way;
-import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.OsToOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.dpn.rightofway.PermissivePath;
 
 public class PermissivePathTest {
 
-    static OsDpnOsmAttributeMappingVisitor visitor;
+    static OsToOsmAttributeMappingVisitor visitor;
     @Mock
     Way way;
 
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/RestrictedBywayTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/RestrictedBywayTest.java
index 3b2714606f..8f0dc8b998 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/RestrictedBywayTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/RestrictedBywayTest.java
@@ -10,10 +10,11 @@
 import org.mockito.MockitoAnnotations;
 
 import com.graphhopper.reader.Way;
-import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.OsToOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.dpn.rightofway.RestrictedByway;
 
 public class RestrictedBywayTest {
-    static OsDpnOsmAttributeMappingVisitor visitor;
+    static OsToOsmAttributeMappingVisitor visitor;
     @Mock
     Way way;
 
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/ARoadTest.java b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/ARoadTest.java
new file mode 100644
index 0000000000..0201123012
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/ARoadTest.java
@@ -0,0 +1,37 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.OsToOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.roadclassification.ARoad;
+
+public class ARoadTest {
+    static OsToOsmAttributeMappingVisitor visitor;
+    @Mock
+    Way way;
+
+    @BeforeClass
+    public static void createVisitor() {
+        visitor = new ARoad();
+    }
+
+    @Before
+    public void init() {
+        MockitoAnnotations.initMocks(this);
+    }
+
+    @Test
+    public void testVisitWayAttribute() {
+        visitor.visitWayAttribute("A Road".toLowerCase().replace(" ", "").replace("–", ""), way);
+        verify(way).setTag("highway", "primary");
+        verifyNoMoreInteractions(way);
+    }
+}
\ No newline at end of file
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/AlleyTest.java b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/AlleyTest.java
new file mode 100644
index 0000000000..42e46ba024
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/AlleyTest.java
@@ -0,0 +1,42 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.OsToOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.roadclassification.Alley;
+
+public class AlleyTest
+{
+	static OsToOsmAttributeMappingVisitor visitor;
+	@Mock
+	Way way;
+
+	@BeforeClass
+	public static void createVisitor()
+	{
+		visitor = new Alley();
+	}
+
+	@Before
+	public void init()
+	{
+		MockitoAnnotations.initMocks(this);
+	}
+
+	@Test
+	public void testVisitWayAttribute()
+	{
+		visitor.visitWayAttribute("Alley".toLowerCase().replace(" ", "").replace("–", ""), way);
+		verify(way).setTag("highway", "service");
+		verify(way).setTag("service", "alley");
+		verifyNoMoreInteractions(way);
+	}
+}
\ No newline at end of file
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/BRoadTest.java b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/BRoadTest.java
new file mode 100644
index 0000000000..8fba26ec5a
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/BRoadTest.java
@@ -0,0 +1,37 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.OsToOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.roadclassification.BRoad;
+
+public class BRoadTest {
+    static OsToOsmAttributeMappingVisitor visitor;
+    @Mock
+    Way way;
+
+    @BeforeClass
+    public static void createVisitor() {
+        visitor = new BRoad();
+    }
+
+    @Before
+    public void init() {
+        MockitoAnnotations.initMocks(this);
+    }
+
+    @Test
+    public void testVisitWayAttribute() {
+        visitor.visitWayAttribute("B Road".toLowerCase().replace(" ", "").replace("–", ""), way);
+        verify(way).setTag("highway", "secondary");
+        verifyNoMoreInteractions(way);
+    }
+}
\ No newline at end of file
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/DualCarriagewayTest.java b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/DualCarriagewayTest.java
new file mode 100644
index 0000000000..a8c93c78a8
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/DualCarriagewayTest.java
@@ -0,0 +1,40 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.OsToOsmAttributeMappingVisitor;
+
+public class DualCarriagewayTest
+{
+	static OsToOsmAttributeMappingVisitor visitor;
+	@Mock
+	Way way;
+
+	@BeforeClass
+	public static void createVisitor()
+	{
+		visitor = new DualCarriageway();
+	}
+
+	@Before
+	public void init()
+	{
+		MockitoAnnotations.initMocks(this);
+	}
+
+	@Test
+	public void testVisitWayAttribute()
+	{
+		visitor.visitWayAttribute("Dual Carriageway".toLowerCase().replace(" ", "").replace("–", ""), way);
+		verify(way).setTag("maxspeed:type", "GB:nsl_dual");
+		verifyNoMoreInteractions(way);
+	}
+}
\ No newline at end of file
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/LocalStreetTest.java b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/LocalStreetTest.java
new file mode 100644
index 0000000000..15bd79413d
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/LocalStreetTest.java
@@ -0,0 +1,37 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.OsToOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.roadclassification.LocalStreet;
+
+public class LocalStreetTest {
+    static OsToOsmAttributeMappingVisitor visitor;
+    @Mock
+    Way way;
+
+    @BeforeClass
+    public static void createVisitor() {
+        visitor = new LocalStreet();
+    }
+
+    @Before
+    public void init() {
+        MockitoAnnotations.initMocks(this);
+    }
+
+    @Test
+    public void testVisitWayAttribute() {
+        visitor.visitWayAttribute("Local Street".toLowerCase().replace(" ", "").replace("–", ""), way);
+        verify(way).setTag("highway", "unclassified");
+        verifyNoMoreInteractions(way);
+    }
+}
\ No newline at end of file
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/MinorRoadTest.java b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/MinorRoadTest.java
new file mode 100644
index 0000000000..5285e24551
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/MinorRoadTest.java
@@ -0,0 +1,37 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.OsToOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.roadclassification.MinorRoad;
+
+public class MinorRoadTest {
+    static OsToOsmAttributeMappingVisitor visitor;
+    @Mock
+    Way way;
+
+    @BeforeClass
+    public static void createVisitor() {
+        visitor = new MinorRoad();
+    }
+
+    @Before
+    public void init() {
+        MockitoAnnotations.initMocks(this);
+    }
+
+    @Test
+    public void testVisitWayAttribute() {
+        visitor.visitWayAttribute("Minor Road".toLowerCase().replace(" ", "").replace("–", ""), way);
+        verify(way).setTag("highway", "tertiary");
+        verifyNoMoreInteractions(way);
+    }
+}
\ No newline at end of file
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/MotorwayTest.java b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/MotorwayTest.java
new file mode 100644
index 0000000000..836af3cea3
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/MotorwayTest.java
@@ -0,0 +1,38 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.OsToOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.roadclassification.Motorway;
+
+public class MotorwayTest {
+    static OsToOsmAttributeMappingVisitor visitor;
+    @Mock
+    Way way;
+
+    @BeforeClass
+    public static void createVisitor() {
+        visitor = new Motorway();
+    }
+
+    @Before
+    public void init() {
+        MockitoAnnotations.initMocks(this);
+    }
+
+    @Test
+    public void testVisitWayAttribute() {
+        visitor.visitWayAttribute("Motorway".toLowerCase().replace(" ", "").replace("–", ""), way);
+        verify(way).setTag("highway", "motorway");
+        verify(way).setTag("maxspeed:type", "GB:motorway");
+        verifyNoMoreInteractions(way);
+    }
+}
\ No newline at end of file
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/PedestrianisedStreetTest.java b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/PedestrianisedStreetTest.java
new file mode 100644
index 0000000000..9e090bc520
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/PedestrianisedStreetTest.java
@@ -0,0 +1,37 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.OsToOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.roadclassification.PedestrianisedStreet;
+
+public class PedestrianisedStreetTest {
+    static OsToOsmAttributeMappingVisitor visitor;
+    @Mock
+    Way way;
+
+    @BeforeClass
+    public static void createVisitor() {
+        visitor = new PedestrianisedStreet();
+    }
+
+    @Before
+    public void init() {
+        MockitoAnnotations.initMocks(this);
+    }
+
+    @Test
+    public void testVisitWayAttribute() {
+        visitor.visitWayAttribute("Pedestrianised Street".toLowerCase().replace(" ", "").replace("–", ""), way);
+        verify(way).setTag("highway", "pedestrian");
+        verifyNoMoreInteractions(way);
+    }
+}
\ No newline at end of file
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/PrivateRoadPubliclyAccessibleTest.java b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/PrivateRoadPubliclyAccessibleTest.java
new file mode 100644
index 0000000000..83b2394b8a
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/PrivateRoadPubliclyAccessibleTest.java
@@ -0,0 +1,38 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.OsToOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.roadclassification.PrivateRoadPubliclyAccessible;
+
+public class PrivateRoadPubliclyAccessibleTest {
+    static OsToOsmAttributeMappingVisitor visitor;
+    @Mock
+    Way way;
+
+    @BeforeClass
+    public static void createVisitor() {
+        visitor = new PrivateRoadPubliclyAccessible();
+    }
+
+    @Before
+    public void init() {
+        MockitoAnnotations.initMocks(this);
+    }
+
+    @Test
+    public void testVisitWayAttribute() {
+        visitor.visitWayAttribute("Private Road – Publicly Accessible".toLowerCase().replace(" ", "").replace("–", ""), way);
+        verify(way).setTag("access", "private");
+        verifyNoMoreInteractions(way);
+    }
+
+}
\ No newline at end of file
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/PrivateRoadRestrictedAccessTest.java b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/PrivateRoadRestrictedAccessTest.java
new file mode 100644
index 0000000000..47ea9e91fc
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/PrivateRoadRestrictedAccessTest.java
@@ -0,0 +1,37 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.OsToOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.roadclassification.PrivateRoadRestrictedAccess;
+
+public class PrivateRoadRestrictedAccessTest {
+    static OsToOsmAttributeMappingVisitor visitor;
+    @Mock
+    Way way;
+
+    @BeforeClass
+    public static void createVisitor() {
+        visitor = new PrivateRoadRestrictedAccess();
+    }
+
+    @Before
+    public void init() {
+        MockitoAnnotations.initMocks(this);
+    }
+
+    @Test
+    public void testVisitWayAttribute() {
+        visitor.visitWayAttribute("Private Road – Restricted Access".toLowerCase().replace(" ", "").replace("–", ""), way);
+        verify(way).setTag("access", "no");
+        verifyNoMoreInteractions(way);
+    }
+}
\ No newline at end of file
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/SingleCarriagewayTest.java b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/SingleCarriagewayTest.java
new file mode 100644
index 0000000000..0796b928aa
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/SingleCarriagewayTest.java
@@ -0,0 +1,40 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.OsToOsmAttributeMappingVisitor;
+
+public class SingleCarriagewayTest
+{
+	static OsToOsmAttributeMappingVisitor visitor;
+	@Mock
+	Way way;
+
+	@BeforeClass
+	public static void createVisitor()
+	{
+		visitor = new SingleCarriageway();
+	}
+
+	@Before
+	public void init()
+	{
+		MockitoAnnotations.initMocks(this);
+	}
+
+	@Test
+	public void testVisitWayAttribute()
+	{
+		visitor.visitWayAttribute("Single Carriageway".toLowerCase().replace(" ", "").replace("–", ""), way);
+		verify(way).setTag("maxspeed:type", "GB:nsl_single");
+		verifyNoMoreInteractions(way);
+	}
+}
\ No newline at end of file
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/UrbanTest.java b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/UrbanTest.java
new file mode 100644
index 0000000000..0815b26036
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/UrbanTest.java
@@ -0,0 +1,54 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+import static org.mockito.Mockito.when;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.OsToOsmAttributeMappingVisitor;
+
+public class UrbanTest
+{
+	private static final String _30_MPH = "30 mph";
+	static OsToOsmAttributeMappingVisitor visitor;
+	@Mock
+	Way way;
+
+	@BeforeClass
+	public static void createVisitor()
+	{
+		visitor = new Urban();
+	}
+
+	@Before
+	public void init()
+	{
+		MockitoAnnotations.initMocks(this);
+	}
+
+	@Test
+	public void testVisitWayAttribute()
+	{
+		visitor.visitWayAttribute("Urban".toLowerCase().replace(" ", "").replace("–", ""), way);
+		verify(way).hasTag("maxspeed");
+		verify(way).setTag("maxspeed", _30_MPH);
+		verifyNoMoreInteractions(way);
+	}
+	
+	@Test
+	public void testVisitWayAttributeWhenNationalSpeedLimitSet()
+	{
+		when(way.hasTag("maxspeed")).thenReturn(false);
+		when(way.hasTag("maxspeed:type")).thenReturn(true);
+		visitor.visitWayAttribute("Urban".toLowerCase().replace(" ", "").replace("–", ""), way);
+		verify(way).hasTag("maxspeed");
+		verify(way).setTag("maxspeed", _30_MPH);
+		verifyNoMoreInteractions(way);
+	}
+}
\ No newline at end of file
diff --git a/core/src/test/java/com/graphhopper/routing/util/CarFlagEncoderTest.java b/core/src/test/java/com/graphhopper/routing/util/CarFlagEncoderTest.java
index 2dadef1d67..ff6e96d6f1 100644
--- a/core/src/test/java/com/graphhopper/routing/util/CarFlagEncoderTest.java
+++ b/core/src/test/java/com/graphhopper/routing/util/CarFlagEncoderTest.java
@@ -17,10 +17,14 @@
  */
 package com.graphhopper.routing.util;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
+import org.junit.Test;
+
 import com.graphhopper.reader.OSMNode;
 import com.graphhopper.reader.OSMWay;
-import org.junit.Test;
-import static org.junit.Assert.*;
 
 /**
  *
@@ -30,7 +34,7 @@
 {
     private final EncodingManager em = new EncodingManager("CAR,BIKE,FOOT");
     private final CarFlagEncoder encoder = (CarFlagEncoder) em.getEncoder("CAR");
-
+    
     @Test
     public void testAccess()
     {
@@ -225,6 +229,59 @@ public void testSpeed()
         {
         }
     }
+    
+    @Test
+    public void testMaxSpeedType()
+    {
+        // limit bigger than default road speed
+        OSMWay way = new OSMWay(1);
+        way.setTag("highway", "primary");
+        way.setTag("maxspeed:type", "GB:nsl_dual");
+        long allowed = encoder.acceptWay(way);
+        long encoded = encoder.handleWayTags(way, allowed, 0);
+        assertEquals(truncateSpeedToMax(), encoder.getSpeed(encoded), 1e-1);
+
+        way.clearTags();
+        way.setTag("highway", "secondary");
+        way.setTag("maxspeed:type", "GB:nsl_single");
+        allowed = encoder.acceptWay(way);
+        encoded = encoder.handleWayTags(way, allowed, 0);
+        assertEquals(factorSpeed(CarFlagEncoder.SIXTY_MPH_IN_KPH), encoder.getSpeed(encoded), 1e-1);
+
+        way.clearTags();
+        way.setTag("highway", "motorway");
+        way.setTag("maxspeed:type", "GB:motorway");
+        allowed = encoder.acceptWay(way);
+        encoded = encoder.handleWayTags(way, allowed, 0);
+        assertEquals(truncateSpeedToMax(), encoder.getSpeed(encoded), 1e-1);
+
+        way.clearTags();
+        way.setTag("highway", "secondary");
+        way.setTag("maxspeed", "30 mph");
+        way.setTag("maxspeed:type", "GB:nsl_single");
+        allowed = encoder.acceptWay(way);
+        encoded = encoder.handleWayTags(way, allowed, 0);
+        assertEquals(factorSpeed(CarFlagEncoder.THIRTY_MPH_IN_KPH), encoder.getSpeed(encoded), 1e-1);
+
+        try
+        {
+            encoder.setSpeed(0, -1);
+            assertTrue(false);
+        } catch (IllegalArgumentException ex)
+        {
+        }
+    }
+
+	private int truncateSpeedToMax()
+    {
+	    int factorSpeed = factorSpeed(CarFlagEncoder.SEVENTY_MPH_IN_KPH);
+		return factorSpeed>encoder.maxPossibleSpeed?encoder.maxPossibleSpeed:factorSpeed;
+    }
+
+	private int factorSpeed(int speed )
+    {
+	    return Math.round(speed/5)*5;
+    }
 
     @Test
     public void testSetSpeed()
