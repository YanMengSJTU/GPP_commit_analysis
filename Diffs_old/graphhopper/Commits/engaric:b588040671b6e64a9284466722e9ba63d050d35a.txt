diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/beans/RouteWayPoint.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/beans/RouteWayPoint.java
index 8f17eaa31a..ec091b5e80 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/beans/RouteWayPoint.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/beans/RouteWayPoint.java
@@ -6,12 +6,9 @@
 import java.util.Objects;
 
 import org.alternativevision.gpx.beans.Waypoint;
-import org.eclipse.jetty.util.log.Log;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import uk.co.ordnancesurvey.gpx.graphhopper.GraphHopperGPXParser;
-
 public class RouteWayPoint {
 
 	private static final Logger LOG = LoggerFactory
diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperGPXUtil.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperGPXUtil.java
index 670c37e25b..e234cce5ec 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperGPXUtil.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperGPXUtil.java
@@ -54,6 +54,10 @@ public boolean isWayPointOnTrack(Waypoint aWayPoint, Track aTrack) {
 
 		}
 
+		if(!isWayPointOnTrack)
+		{
+			LOG.info("Track Point not found on the GPX track");
+		}
 		return isWayPointOnTrack;
 	}
 
@@ -83,12 +87,15 @@ public boolean isWayPointOnGPXRoutes(Waypoint wp) {
 
 		for (Route route : getRoutes()) {
 			isWayPointOnRoute = isWayPointOnRoute(wp, route);
-
+			
 			if (isWayPointOnRoute(wp, route)) {
 				break;
 			}
 
 		}
+		if(!isWayPointOnRoute){
+			LOG.info("Way Point not found on the GPX route");
+		}
 		return isWayPointOnRoute;
 	}
 
diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperJSONUtil.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperJSONUtil.java
index 17c0b9133c..1472aa1039 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperJSONUtil.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperJSONUtil.java
@@ -30,6 +30,11 @@ public boolean isWayPointinpath(Waypoint w) {
 			}
 
 		}
+		
+		if(!iswaypointinPath)
+		{
+			LOG.info("Way point not found in the JSON Route");
+		}
 
 		return iswaypointinPath;
 
@@ -42,13 +47,18 @@ public boolean isWayPointinPath(Waypoint we, HashSet<Waypoint> wa) {
 
 			if (new RouteWayPoint(we).equals(new RouteWayPoint(waypoint))) {
 				iswaypointinPath = true;
-				LOG.info("WayPoint " + we + " Found In a Path");
+				LOG.info("WayPoint " + we + " Found In a JSON Route");
 			}
 			if (iswaypointinPath) {
 				break;
 			}
 		}
 
+		
+		if(!iswaypointinPath)
+		{
+			LOG.info("Way point not found in the JSON Route");
+		}
 		return iswaypointinPath;
 	}
 
diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperXMLUnitParserRouteTest.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperXMLUnitParserRouteTest.java
deleted file mode 100644
index d697a34e39..0000000000
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperXMLUnitParserRouteTest.java
+++ /dev/null
@@ -1,47 +0,0 @@
-package uk.co.ordnancesurvey.gpx.graphhopper;
-
-import java.io.FileInputStream;
-import java.io.IOException;
-
-import javax.xml.parsers.DocumentBuilder;
-import javax.xml.parsers.DocumentBuilderFactory;
-import javax.xml.parsers.ParserConfigurationException;
-
-import org.custommonkey.xmlunit.XMLTestCase;
-import org.custommonkey.xmlunit.XMLUnit;
-import org.xml.sax.SAXException;
-
-public class GraphHopperXMLUnitParserRouteTest extends XMLTestCase {
-
-	private DocumentBuilder builder;
-	
-
-	public GraphHopperXMLUnitParserRouteTest(String gpxFileName) {
-		try {
-			init(gpxFileName);
-		} catch (ParserConfigurationException e) {
-			// TODO Auto-generated catch block
-			e.printStackTrace();
-		} catch (SAXException e) {
-			// TODO Auto-generated catch block
-			e.printStackTrace();
-		} catch (IOException e) {
-			// TODO Auto-generated catch block
-			e.printStackTrace();
-		}
-	}
-
-	private void init(String gpxFileName)throws ParserConfigurationException, SAXException, IOException {
-		XMLUnit.setControlParser("org.apache.xerces.jaxp.DocumentBuilderFactoryImpl");
-		// this next line is strictly not required - if no test parser is
-		// explicitly specified then the same factory class will be used for
-		// both test and control
-		XMLUnit.setTestParser("org.apache.xerces.jaxp.DocumentBuilderFactoryImpl");
-
-		XMLUnit.setSAXParserFactory("org.apache.xerces.jaxp.SAXParserFactoryImpl");
-		XMLUnit.setTransformerFactory("org.apache.xalan.processor.TransformerFactoryImpl");
-		builder = DocumentBuilderFactory.newInstance().newDocumentBuilder();
-		String path = getClass().getResource("sampleGraphHopper.gpx").getPath();
-		builder.parse(new FileInputStream(gpxFileName));
-	}
-}
diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/JSONParser.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/JSONParser.java
index ab20422475..0a89121b24 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/JSONParser.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/JSONParser.java
@@ -21,7 +21,6 @@
 	private JsonObject jObject;
 	private JsonArray paths;
 	private JsonArray instructions;
-	private JsonObject info;
 
 	private static final Logger LOG = LoggerFactory.getLogger(JSONParser.class);
 
@@ -54,7 +53,7 @@ public void parse(String jsonString) {
 			jElement = parser.parse(jsonString);
 			jObject = jElement.getAsJsonObject();
 			paths = jObject.getAsJsonArray("paths");
-			info = jObject.getAsJsonObject("info");
+			//info = jObject.getAsJsonObject("info");
 
 			instructions = paths.get(0).getAsJsonObject()
 					.getAsJsonArray("instructions");
diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
index 41009a4bb7..77bc85cda9 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
@@ -50,6 +50,22 @@ public void overrideTestONPropertyToWeb() {
 
 	}
 
+	@Before("@ErrorMessages")
+	public void overrideTestONPropertyToBoth() {
+
+		testON = IntegrationTestProperties.getTestProperty("testON");
+		IntegrationTestProperties.setTestProperty("testON", "");
+		init();
+
+	}
+
+	@After("@ErrorMessages")
+	public void rollBackTestONPropertyToBoth() {
+
+		IntegrationTestProperties.setTestProperty("testON", testON);
+
+	}
+
 	@After("@WebOnly,@SampleScenario,@ServiceOnly")
 	public void rollBackTestONProperty() {
 		IntegrationTestProperties.setTestProperty("testON", testON);
diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
index 71a9c90015..81f1f2d86d 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
@@ -2,7 +2,31 @@
 
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
-import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.*;
+import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.ADD_WAYPOINT;
+import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.INSTRUCTIONS;
+import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.ROUTE_SEARCH;
+import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.ROUTE_TYPE_BIKE;
+import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.ROUTE_TYPE_CAR;
+import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.ROUTE_TYPE_MOUNTAINBIKE;
+import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.ROUTE_TYPE_WALK;
+import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.TOTAL_ROUTE_TIME;
+import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.avoidance_ARoad;
+import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.avoidance_Boulders;
+import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.avoidance_Cliff;
+import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.avoidance_InlandWater;
+import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.avoidance_Marsh;
+import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.avoidance_Mud;
+import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.avoidance_QuarryOrPit;
+import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.avoidance_Rock;
+import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.avoidance_Sand;
+import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.avoidance_Scree;
+import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.avoidance_Shingle;
+import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.dropDown;
+import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.error_Message;
+import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.fastest_RButton;
+import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.settingsButton;
+import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.shortest_RButton;
+import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.waypoint;
 
 import java.awt.Graphics2D;
 import java.awt.RenderingHints;
@@ -25,12 +49,10 @@
 import org.alternativevision.gpx.beans.Route;
 import org.alternativevision.gpx.beans.Waypoint;
 import org.apache.commons.io.IOUtils;
-import org.apache.http.HttpRequest;
 import org.apache.http.StatusLine;
 import org.apache.http.client.ClientProtocolException;
 import org.apache.http.client.methods.CloseableHttpResponse;
 import org.apache.http.client.methods.HttpDelete;
-import org.apache.http.client.methods.HttpEntityEnclosingRequestBase;
 import org.apache.http.client.methods.HttpGet;
 import org.apache.http.client.methods.HttpOptions;
 import org.apache.http.client.methods.HttpPost;
diff --git a/acceptancetesting/src/test/cucumber/Routing-PeakDistrict-Smoke.feature b/acceptancetesting/src/test/cucumber/Routing-PeakDistrict-Smoke.feature
index d6f4bf37ff..edb1c09fca 100644
--- a/acceptancetesting/src/test/cucumber/Routing-PeakDistrict-Smoke.feature
+++ b/acceptancetesting/src/test/cucumber/Routing-PeakDistrict-Smoke.feature
@@ -43,11 +43,11 @@ Feature: Smoke Tests- Peak District: Verify a route from A to B
     Then I should be able to verify the statuscode as "<statusCode>"
 
     Examples: 
-      | vehicleType | avoidances | routeType | errorMessage                                                   | statusCode | httpErrorMessage |
-      | 123         |            | fastest   | Vehicle 123 is not a valid vehicle. Valid vehicles are foot.   | 400        | Bad Request      |
-      | car        |            | fastest   | Vehicle car is not a valid vehicle. Valid vehicles are foot.   | 400        | Bad Request      |
-      | cycle       |            | fastest   | Vehicle cycle is not a valid vehicle. Valid vehicles are foot. | 400        | Bad Request      |
-      | Bike        |            | fastest   | Vehicle Bike is not a valid vehicle. Valid vehicles are foot.  | 400        | Bad Request      |
+      | vehicleType | avoidances | routeType | errorMessage                                                     | statusCode | httpErrorMessage |
+      | 123         |            | fastest   | Vehicle 123 is not a valid vehicle. Valid vehicles are foot,mtb. | 400        | Bad Request      |
+      | car         |            | fastest   | Vehicle 123 is not a valid vehicle. Valid vehicles are foot,mtb. | 400        | Bad Request      |
+      | cycle       |            | fastest   | Vehicle 123 is not a valid vehicle. Valid vehicles are foot,mtb. | 400        | Bad Request      |
+      | Bike        |            | fastest   | Vehicle 123 is not a valid vehicle. Valid vehicles are foot,mtb. | 400        | Bad Request      |
 
   # Parameter :  vehicle
   @ErrorMessages @Smoke @Current
@@ -569,8 +569,7 @@ Feature: Smoke Tests- Peak District: Verify a route from A to B
       | pointA              | errorMessage | responseFormat | statusCode |
       | 51.878966,-0.903849 | e            | json           | 400        |
 
-      
-       @Smoke
+  @Smoke
   Scenario Outline: Verify DPN Route with avoidance -(A Road)
     Given I have route point as
       | pointA              | pointB              |
@@ -585,5 +584,21 @@ Feature: Smoke Tests- Peak District: Verify a route from A to B
 
     Examples: 
       | vehicleType  | avoidances | routeType |
-      | mountainbike | A Road      |      fastavoid     |
-      
\ No newline at end of file
+      | mountainbike | A Road     | fastavoid |
+
+  @Smoke
+  Scenario Outline: Verify DPN Route with boulders avoidance -(boulders)
+    Given I have route point as
+      | pointA              | pointB              |
+      | 53.311217,-1.629849 | 53.156465,-1.908797 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have weighting as "<routeType>"
+    When I request for a route
+    Then I should be able to verify the waypoints not on the route map:
+      | wayPointIndex | waypointco          | waypointdesc        | azimuth | direction | time  | distance | avoidance |
+      | 3             | 53.309004,-1.627564 | Turn left onto Path | 98.0    | E         | 99563 | 138.3    | Boulders  |
+
+    Examples: 
+      | vehicleType | avoidances | routeType |
+      | foot        | Boulders   | fastavoid |
diff --git a/acceptancetesting/src/test/java/GPHRouteTest.java b/acceptancetesting/src/test/java/GPHRouteTest.java
index 4cfa0ccf1b..7060350396 100644
--- a/acceptancetesting/src/test/java/GPHRouteTest.java
+++ b/acceptancetesting/src/test/java/GPHRouteTest.java
@@ -14,7 +14,6 @@
 import uk.co.ordnancesurvey.gpx.extensions.ExtensionConstants;
 import uk.co.ordnancesurvey.gpx.graphhopper.GraphHopperGPXParser;
 import uk.co.ordnancesurvey.gpx.graphhopper.GraphHopperGPXUtil;
-import uk.co.ordnancesurvey.routing.GraphHopperUIUtil;
 
 public class GPHRouteTest {
 	String path = getClass().getResource("sampleGraphHopper.gpx").getPath();
