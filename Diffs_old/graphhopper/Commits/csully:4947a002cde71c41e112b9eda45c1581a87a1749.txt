diff --git a/core/src/main/java/com/graphhopper/BlockWeighting.java b/core/src/main/java/com/graphhopper/BlockWeighting.java
index 7a0fd95d21..22c1f932d5 100644
--- a/core/src/main/java/com/graphhopper/BlockWeighting.java
+++ b/core/src/main/java/com/graphhopper/BlockWeighting.java
@@ -27,7 +27,7 @@
  * https://github.com/graphhopper/graphhopper/blob/master/docs/core/low-level-api.md
  */
 
-
+package com.graphhopper;
 import com.graphhopper.GraphHopper;
 import com.graphhopper.reader.DataReader;
 import com.graphhopper.reader.OSMReader;
@@ -55,7 +55,7 @@
 import org.slf4j.LoggerFactory;
 
 
-class BlockingWeighting implements Weighting 
+public class BlockWeighting implements Weighting 
 {
     private final FlagEncoder encoder;
     private Set<Integer> trafficEdges = new Set<Integer>();
@@ -85,6 +85,7 @@ public double calcWeight( EdgeIteratorState edgeState, boolean reverse, int prev
 	    double speed = speeds.get(edgeState.getEdge());
 	    return edgeState.getDistance() / speed;
 	}
+	return edgeState.getDistance() / this.encoder.getSpeed(edgeState.getFlags());
     }
 
     @Override
diff --git a/core/src/main/java/com/graphhopper/MyGraphHopper.java b/core/src/main/java/com/graphhopper/MyGraphHopper.java
index 780ce03a56..d821e5e307 100644
--- a/core/src/main/java/com/graphhopper/MyGraphHopper.java
+++ b/core/src/main/java/com/graphhopper/MyGraphHopper.java
@@ -26,7 +26,7 @@
  * Sources:
  * https://github.com/graphhopper/graphhopper/blob/master/docs/core/low-level-api.md
  */
-
+package com.graphhopper;
 
 import com.graphhopper.GraphHopper;
 import com.graphhopper.reader.DataReader;
@@ -62,5 +62,3 @@ public Weighting createWeighting( WeightingMap wMap, FlagEncoder encoder)
 	return new BlockingWeighting(encoder);
     }
 }
-}
-
diff --git a/core/src/main/java/com/graphhopper/TrafficClient.java b/core/src/main/java/com/graphhopper/TrafficClient.java
index 9b0ac77380..a0b8a5c16f 100644
--- a/core/src/main/java/com/graphhopper/TrafficClient.java
+++ b/core/src/main/java/com/graphhopper/TrafficClient.java
@@ -26,7 +26,7 @@
  * Sources:
  * https://github.com/graphhopper/graphhopper/blob/master/docs/core/low-level-api.md
  */
-
+package com.graphhopper;
 
 import com.graphhopper.GraphHopper;
 import com.graphhopper.reader.DataReader;
@@ -54,10 +54,13 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.graphhopper.MyGraphHopper;
+import com.graphhopper.BlockWeighting;
+
 
 public class TrafficClient{
 
-    public static void answerQuery(GraphHopper g, String outName){
+    public static void answerQuery(MyGraphHopper g, String outName){
 	Scanner input = new Scanner(System.in);
 	System.out.print("Enter the longtitude and latitude of your " + 
 			 "source separated by commas (long,lat): ");
@@ -82,7 +85,8 @@ public static void answerQuery(GraphHopper g, String outName){
 	GraphStorage graph = g.getGraph();
 	FlagEncoder encoder = new CarFlagEncoder();
 
-	QueryResult fromQR = i.findClosest(srclat,srclong, EdgeFilter.All_EDGES);
+	QueryResult fromQR = i.findClosest(srclat,srclong, 
+					   EdgeFilter.All_EDGES);
 	QueryResult toQR = i.findID(destlat,destlong, EdgeFilter.All_EDGES);
 
 	Path path = new Dijkstra(graph,encoder).calcPath(fromQR,toQR);
@@ -125,11 +129,16 @@ public static void addWeights(MyGraphHopper g, String filename){
 		lats[i] = Double.parseDouble(coords[0].trim());
 		longs[i] = Double.parseDouble(coords[1].trim());
 	    }
+
 	    LocationIndex i = g.getLocationIndex();
 	    GraphStorage graph = g.getGraph();
 	    
-	    QueryResult fromQR = i.findClosest(lats[0],longs[0], EdgeFilter.All_EDGES);
-	    QueryResult toQR = i.findID(lats[lats.length - 2],longs[longs.length - 2], EdgeFilter.All_EDGES);
+	    QueryResult fromQR = i.findClosest(lats[0],longs[0], 
+					       EdgeFilter.All_EDGES);
+
+	    QueryResult toQR = i.findID(lats[lats.length - 2],
+					longs[longs.length - 2], 
+					EdgeFilter.All_EDGES);
 	    
 	    EdgeIteratorState src = fromQR.getClosestEdge();
 	    EdgeIteratorState dest = toQR.getClosestEdge();
@@ -162,6 +171,7 @@ public static void main(String[] args){
 	while(true){
 	    String time = getTime();
 	    GraphHopper g = db.get(time);
-	    answerQuery(db)
+	    answerQuery(db);
 	}
+    }
 }
