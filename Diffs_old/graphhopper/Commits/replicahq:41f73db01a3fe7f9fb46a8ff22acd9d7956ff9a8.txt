diff --git a/core/src/main/java/com/graphhopper/routing/Dijkstra.java b/core/src/main/java/com/graphhopper/routing/Dijkstra.java
index b3919cee0f..b5e5010736 100644
--- a/core/src/main/java/com/graphhopper/routing/Dijkstra.java
+++ b/core/src/main/java/com/graphhopper/routing/Dijkstra.java
@@ -82,7 +82,12 @@ protected void runAlgo() {
                     continue;
 
                 int traversalId = traversalMode.createTraversalId(iter, false);
-                double tmpWeight = weighting.calcWeight(iter, false, currEdge.edge) + currEdge.weight;
+                double tmpWeight;
+                if (weighting instanceof TDWeightingI) {
+                    tmpWeight = ((TDWeightingI) weighting).calcTDWeight(iter, false, currEdge.edge, currEdge.time) + currEdge.weight;
+                } else {
+                    tmpWeight = weighting.calcWeight(iter, false, currEdge.edge) + currEdge.weight;
+                }
                 if (Double.isInfinite(tmpWeight))
                     continue;
 
diff --git a/core/src/main/java/com/graphhopper/routing/weighting/TDWeightingI.java b/core/src/main/java/com/graphhopper/routing/weighting/TDWeightingI.java
index da0198c7ad..b81977a0c8 100644
--- a/core/src/main/java/com/graphhopper/routing/weighting/TDWeightingI.java
+++ b/core/src/main/java/com/graphhopper/routing/weighting/TDWeightingI.java
@@ -21,6 +21,8 @@
 
 public interface TDWeightingI extends Weighting {
 
+    double calcTDWeight(EdgeIteratorState edge, boolean reverse, int prevOrNextEdgeId, long time);
+
     long calcTDMillis(EdgeIteratorState edge, boolean reverse, int prevOrNextEdgeId, long duration);
 
 }
diff --git a/web/src/main/java/com/graphhopper/swl/TDWeighting.java b/web/src/main/java/com/graphhopper/swl/TDCarWeighting.java
similarity index 87%
rename from web/src/main/java/com/graphhopper/swl/TDWeighting.java
rename to web/src/main/java/com/graphhopper/swl/TDCarWeighting.java
index 42430c1a62..fb4377703f 100644
--- a/web/src/main/java/com/graphhopper/swl/TDWeighting.java
+++ b/web/src/main/java/com/graphhopper/swl/TDCarWeighting.java
@@ -25,7 +25,7 @@
 import com.graphhopper.util.PMap;
 import com.graphhopper.util.Parameters;
 
-public class TDWeighting implements TDWeightingI {
+public class TDCarWeighting implements TDWeightingI {
 
     protected static final double SPEED_CONV = 3.6D;
 
@@ -35,7 +35,7 @@
     private final long headingPenaltyMillis;
     private final double headingPenalty;
 
-    public TDWeighting(FlagEncoder encoder, SpeedCalculator speedCalculator, PMap map) {
+    public TDCarWeighting(FlagEncoder encoder, SpeedCalculator speedCalculator, PMap map) {
         this.encoder = encoder;
         this.maxSpeed = encoder.getMaxSpeed() / SPEED_CONV;
         this.speedCalculator = speedCalculator;
@@ -51,7 +51,17 @@ public double getMinWeight(double distance) {
 
     @Override
     public double calcWeight(EdgeIteratorState edge, boolean reverse, int prevOrNextEdgeId) {
-        double speed = reverse ? encoder.getReverseSpeed(edge.getFlags()) : encoder.getSpeed(edge.getFlags());
+        throw new RuntimeException();
+    }
+
+    @Override
+    public long calcMillis(EdgeIteratorState edge, boolean reverse, int prevOrNextEdgeId) {
+        throw new RuntimeException();
+    }
+
+    @Override
+    public double calcTDWeight(EdgeIteratorState edge, boolean reverse, int prevOrNextEdgeId, long linkEnterTime) {
+        double speed = speedCalculator.getSpeed(edge, reverse, (int) linkEnterTime, "car", null);
         if (speed == 0)
             return Double.POSITIVE_INFINITY;
 
@@ -66,13 +76,8 @@ public double calcWeight(EdgeIteratorState edge, boolean reverse, int prevOrNext
     }
 
     @Override
-    public long calcMillis(EdgeIteratorState edge, boolean reverse, int prevOrNextEdgeId) {
-        throw new RuntimeException();
-    }
-
-    @Override
-    public long calcTDMillis(EdgeIteratorState edge, boolean reverse, int prevOrNextEdgeId, long duration) {
-        double speed = speedCalculator.getSpeed(edge, reverse, (int) duration, "car", null);
+    public long calcTDMillis(EdgeIteratorState edge, boolean reverse, int prevOrNextEdgeId, long linkEnterTime) {
+        double speed = speedCalculator.getSpeed(edge, reverse, (int) linkEnterTime, "car", null);
         if (Double.isInfinite(speed) || Double.isNaN(speed) || speed < 0)
             throw new IllegalStateException("Invalid speed stored in edge! " + speed);
         if (speed == 0)
diff --git a/web/src/test/java/com/graphhopper/swl/TDNetworkIT.java b/web/src/test/java/com/graphhopper/swl/TDNetworkIT.java
index a2f86c732e..d91ba8b8d0 100644
--- a/web/src/test/java/com/graphhopper/swl/TDNetworkIT.java
+++ b/web/src/test/java/com/graphhopper/swl/TDNetworkIT.java
@@ -48,7 +48,7 @@ public void setUp() {
             @Override
             public Weighting createWeighting(HintsMap hintsMap, FlagEncoder encoder, Graph graph) {
                 if (hintsMap.getWeighting().equals("td")) {
-                    return new TDWeighting(encoder, speedCalculator, hintsMap);
+                    return new TDCarWeighting(encoder, speedCalculator, hintsMap);
                 } else {
                     return super.createWeighting(hintsMap, encoder, graph);
                 }
