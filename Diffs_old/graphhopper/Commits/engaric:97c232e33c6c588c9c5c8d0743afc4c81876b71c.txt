diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperComponentIdentification.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperComponentIdentification.java
index b0de8ecefe..63c37c6f65 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperComponentIdentification.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperComponentIdentification.java
@@ -11,8 +11,8 @@
 public class GraphHopperComponentIdentification implements
 		ComponentIdentification {
 
-	public static final ComponentIdentifier FROM_ROUTE = new ComponentID("0_Input");
-	public static final  ComponentIdentifier TO_ROUTE = new ComponentID("1_Input");
+	public static final ComponentIdentifier FROM_ROUTE = new ComponentID("0_searchBox");
+	public static final  ComponentIdentifier TO_ROUTE = new ComponentID("1_searchBox");
 	public static final  ComponentIdentifier ROUTE_TYPE_CAR = new ComponentID("car");
 	public static final  ComponentIdentifier ROUTE_TYPE_BIKE = new ComponentID("bike");
 	public static final  ComponentIdentifier ROUTE_TYPE_WALK = new ComponentID("foot");
@@ -23,5 +23,7 @@
 	public static final ComponentIdentifier  MAP=new ComponentByXPATH("//*[@id='map']");
 	public static final ComponentIdentifier  ZOOM_OUT=new ComponentByXPATH("//*[@title='Zoom out']");
 	public static final ComponentIdentifier  ZOOM_IN=new ComponentByXPATH("//*[@title='Zoom in']");
-
+	public static final ComponentIdentifier dropDown =new ComponentByXPATH("//span/div/span/div[*]/p/strong");
+	
+	
 }
diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
index f33f6ce702..98acca2b92 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
@@ -2,7 +2,6 @@
 
 import java.io.IOException;
 import java.text.ParseException;
-import java.util.Calendar;
 import java.util.List;
 import java.util.Map;
 
@@ -18,7 +17,8 @@
 	String instruction;
 
 	@Given("^I request a route between \"([^\"]*)\" and \"([^\"]*)\" as a \"([^\"]*)\" from RoutingAPI$")
-	public void getRoute(String pointA, String pointB, String routeType) {
+	public void getRoute(String pointA, String pointB, String routeType)
+			throws InterruptedException {
 
 		String testON = IntegrationTestProperties.getTestProperty("testON");
 
@@ -31,8 +31,16 @@ public void getRoute(String pointA, String pointB, String routeType) {
 			graphUiUtil.getRouteFromService(pointA, pointB, routeType);
 			break;
 		default:
-			graphUiUtil.getRouteFromService(pointA, pointB, routeType);
-			graphUiUtil.getRouteFromUI(pointA, pointB, routeType);
+			
+			if (pointA.split(",").length==2){
+				graphUiUtil.getRouteFromService(pointA, pointB, routeType);
+				graphUiUtil.getRouteFromUI(pointA, pointB, routeType);
+			}
+			else
+				{
+				graphUiUtil.getRouteFromUI(pointA, pointB, routeType);
+				}
+			
 			break;
 
 		}
@@ -53,12 +61,14 @@ public void I_should_be_able_to_verify_the_waypoint_on_the_route_map(
 	@Then("^I should be able to verify the waypoints on the route map:")
 	public void I_should_be_able_to_verify_the_waypoints_on_the_route_map(
 			List<Map<String, String>> wayPointList) {
+
 		graphUiUtil.isWayPointonRouteMap(wayPointList);
+
 	}
 
 	@Then("^I should be able to verify the waypoints not on the route map:")
 	public void I_should_be_able_to_verify_the_not_waypoints_on_the_route_map(
-			List<Map> wayPointList) {
+			List<Map<String, String>> wayPointList) {
 
 		graphUiUtil.isWayPointNotonRouteMap(wayPointList);
 
@@ -73,7 +83,7 @@ public void The_total_route_time_should_be_not_more_than(
 
 	@Then("^I should be able to verify the trackPoints on the route map:")
 	public void I_should_be_able_to_verify_the_trackpoints_on_the_route_map(
-			List<Map> trackPointsList) throws ParseException {
+			List<Map<String, String>> trackPointsList) throws ParseException {
 
 		graphUiUtil.isTrackPointonRouteMap(trackPointsList);
 
@@ -81,7 +91,7 @@ public void I_should_be_able_to_verify_the_trackpoints_on_the_route_map(
 
 	@Then("^I should be able to verify the trackPoints not on the route map:")
 	public void I_should_be_able_to_verify_the_trackpoints_not_on_the_route_map(
-			List<Map> trackPointsList) throws ParseException {
+			List<Map<String, String>> trackPointsList) throws ParseException {
 
 		graphUiUtil.isTrackPointNotonRouteMap(trackPointsList);
 
diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
index 3966876d00..8ab20107d0 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
@@ -10,7 +10,7 @@
 import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.ROUTE_TYPE_WALK;
 import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.TOTAL_ROUTE_TIME;
 import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.TO_ROUTE;
-import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.WAYPOINT_ONMAP;
+import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.dropDown;
 
 import java.awt.Graphics2D;
 import java.awt.RenderingHints;
@@ -87,15 +87,19 @@ public void logout() {
 	}
 
 	/**
-	 	 * <p>
 	 * <p>
 	 * <p>
+	 * <p>
+	 * 
 	 * @param pointA
 	 * @param pointB
-	 * @param routeType 
-	 * <p> Route type can be Car, walk or Cycle.
+	 * @param routeType
+	 *            <p>
+	 *            Route type can be Car, walk or Cycle.
+	 * @throws InterruptedException
 	 */
-	public void getRouteFromUI(String pointA, String pointB, String routeType) {
+	public void getRouteFromUI(String pointA, String pointB, String routeType)
+			throws InterruptedException {
 
 		switch (routeType)
 
@@ -115,10 +119,24 @@ public void getRouteFromUI(String pointA, String pointB, String routeType) {
 
 		}
 
-		typeIntoField(FROM_ROUTE, pointA);
-		typeIntoField(TO_ROUTE, pointB);
+		int length = pointA.split(",").length;
+
+		if (length == 2) {
+
+			typeIntoField(FROM_ROUTE, pointA);
+			typeIntoField(TO_ROUTE, pointB);
+
+		}
+
+		else {
+			typeIntoField(FROM_ROUTE, pointA);
+			clickElement(dropDown);
+			typeIntoField(TO_ROUTE, pointB);
+			clickElement(dropDown);
+
+		}
+
 		clickElement(ROUTE_SEARCH);
-		waitFor(INSTRUCTIONS,25);
 
 	}
 
@@ -130,6 +148,10 @@ public void login() {
 	public void verifyInstructionThroughUI(String routeStepNumber,
 			String stepInstruction) {
 		this.routeStepNumber = routeStepNumber;
+		List<WebElement> WAY_POINTS = driver.findElements(By
+				.xpath("//*[@id='instructions']/tbody/tr[*]/td[2]"));
+		WAY_POINTS.get(Integer.parseInt(routeStepNumber) - 1).click();
+
 		checkTableRow(INSTRUCTIONS, Integer.parseInt(this.routeStepNumber),
 				stepInstruction);
 
@@ -164,17 +186,21 @@ private Waypoint buildWayPoint(String waypointco) throws ParseException {
 	public void isWayPointonRouteMap(String wayPointIndex,
 			String wayPoint_Coordinates, String wayPointDescription,
 			String azimuth, String direction, String time, String distance) {
-		final List<WebElement> WAY_POINTS;
+
 		Waypoint wp;
 
 		switch (testOn.toUpperCase()) {
 		case "WEB":
-			WAY_POINTS = driver.findElements(By
-					.xpath("//*[@id='instructions']/tbody/tr[*]/td[2]"));
-			WAY_POINTS.get(Integer.parseInt(wayPointIndex) - 1).click();
-			Assert.assertTrue(getValue(WAYPOINT_ONMAP) + " comparison failed",
-					wayPointDescription
-							.equalsIgnoreCase(getValue(WAYPOINT_ONMAP)));
+
+			verifyInstructionThroughUI(wayPointIndex, wayPointDescription);
+			/*
+			 * WAY_POINTS = driver.findElements(By
+			 * .xpath("//*[@id='instructions']/tbody/tr[*]/td[2]"));
+			 * WAY_POINTS.get(Integer.parseInt(wayPointIndex) - 1).click();
+			 * Assert.assertTrue(getValue(WAYPOINT_ONMAP) +
+			 * " comparison failed", wayPointDescription
+			 * .equalsIgnoreCase(getValue(WAYPOINT_ONMAP)));
+			 */
 			break;
 		case "SERVICE":
 			wp = buildWayPoint(wayPoint_Coordinates, wayPointDescription,
@@ -184,12 +210,15 @@ public void isWayPointonRouteMap(String wayPointIndex,
 			break;
 
 		default:
-			WAY_POINTS = driver.findElements(By
-					.xpath("//*[@id='instructions']/tbody/tr[*]/td[2]"));
-			WAY_POINTS.get(Integer.parseInt(wayPointIndex) - 1).click();
-			Assert.assertTrue(getValue(WAYPOINT_ONMAP) + " comparison failed",
-					wayPointDescription
-							.equalsIgnoreCase(getValue(WAYPOINT_ONMAP)));
+			verifyInstructionThroughUI(wayPointIndex, wayPointDescription);
+			/*
+			 * WAY_POINTS = driver.findElements(By
+			 * .xpath("//*[@id='instructions']/tbody/tr[*]/td[2]"));
+			 * WAY_POINTS.get(Integer.parseInt(wayPointIndex) - 1).click();
+			 * Assert.assertTrue(getValue(WAYPOINT_ONMAP) +
+			 * " comparison failed", wayPointDescription
+			 * .equalsIgnoreCase(getValue(WAYPOINT_ONMAP)));
+			 */
 			wp = buildWayPoint(wayPoint_Coordinates, wayPointDescription,
 					azimuth, direction, time, distance);
 			Assert.assertTrue(GPHService.isWayPointOnGPXRoutes(wp));
@@ -215,44 +244,63 @@ private Waypoint buildWayPoint(String wayPoint_Coordinates,
 		LOG.info(wp.toString());
 		return wp;
 	}
+	
+	public void isWayPointNotonRouteMap(List<Map<String, String>> wayPointList) {
 
-	public void isWayPointonRouteMap(List<Map<String, String>> waypointList) {
+		for (int i = 0; i < wayPointList.size(); i++) {
 
-		for (int i = 0; i < waypointList.size(); i++) {
-			String wayPointIndex = (String) waypointList.get(i).get(
-					"wayPointIndex");
-			String waypointco = (String) waypointList.get(i).get("waypointco");
-			String waypointdesc = (String) waypointList.get(i).get(
+			String waypointco = (String) wayPointList.get(i).get("waypointco");
+			String waypointdesc = (String) wayPointList.get(i).get(
 					"waypointdesc");
-			String azimuth = (String) waypointList.get(i).get("azimuth");
-			String direction = (String) waypointList.get(i).get("direction");
-			String time = (String) waypointList.get(i).get("time");
-			String distance = (String) waypointList.get(i).get("distance");
-			isWayPointonRouteMap(wayPointIndex, waypointco, waypointdesc,
-					azimuth, direction, time, distance);
+			String azimuth = (String) wayPointList.get(i).get("azimuth");
+			String direction = (String) wayPointList.get(i).get("direction");
+			String time = (String) wayPointList.get(i).get("time");
+			String distance = (String) wayPointList.get(i).get("distance");
+			Waypoint wp = buildWayPoint(waypointco, waypointdesc, azimuth,
+					direction, time, distance);
+			assert (!GPHService.isWayPointOnGPXRoutes(wp));
+
 		}
 
 	}
 
-	public void isWayPointNotonRouteMap(List<Map> waypointList) {
+	public void isWayPointonRouteMap(List<Map<String,String>> waypointList) {
 
 		for (int i = 0; i < waypointList.size(); i++) {
 
-			String waypointco = (String) waypointList.get(i).get("waypointco");
-			String waypointdesc = (String) waypointList.get(i).get(
-					"waypointdesc");
-			String azimuth = (String) waypointList.get(i).get("azimuth");
-			String direction = (String) waypointList.get(i).get("direction");
-			String time = (String) waypointList.get(i).get("time");
-			String distance = (String) waypointList.get(i).get("distance");
-			Waypoint wp = buildWayPoint(waypointco, waypointdesc, azimuth,
-					direction, time, distance);
-			assert (!GPHService.isWayPointOnGPXRoutes(wp));
+			if (waypointList.get(i).size() > 2) {
+				String wayPointIndex = (String) waypointList.get(i).get(
+						"wayPointIndex");
+				String waypointco = (String) waypointList.get(i).get(
+						"waypointco");
+				String waypointdesc = (String) waypointList.get(i).get(
+						"waypointdesc");
+				String azimuth = (String) waypointList.get(i).get("azimuth");
+				String direction = (String) waypointList.get(i)
+						.get("direction");
+				String time = (String) waypointList.get(i).get("time");
+				String distance = (String) waypointList.get(i).get("distance");
+				isWayPointonRouteMap(wayPointIndex, waypointco, waypointdesc,
+						azimuth, direction, time, distance);
+			}
+
+			else
+
+			{
+
+				String wayPointIndex = (String) waypointList.get(i).get(
+						"wayPointIndex");
+				String waypointdesc = (String) waypointList.get(i).get(
+						"waypointdesc");
+				verifyInstructionThroughUI(wayPointIndex, waypointdesc);
 
+			}
 		}
 
 	}
 
+
+
 	public void verifyTotalRouteTime(String totalRouteTime)
 			throws ParseException {
 
@@ -322,7 +370,7 @@ public void verifyTotalRouteTime(String totalRouteTime)
 
 	}
 
-	public void isTrackPointonRouteMap(List<Map> trackPointsList)
+	public void isTrackPointonRouteMap(List<Map<String, String>> trackPointsList)
 			throws ParseException {
 
 		for (int i = 0; i < trackPointsList.size(); i++) {
@@ -339,7 +387,7 @@ public void isTrackPointonRouteMap(List<Map> trackPointsList)
 
 	}
 
-	public void isTrackPointNotonRouteMap(List<Map> trackPointsList)
+	public void isTrackPointNotonRouteMap(List<Map<String, String>> trackPointsList)
 			throws ParseException {
 
 		for (int i = 0; i < trackPointsList.size(); i++) {
@@ -368,7 +416,7 @@ public BufferedImage takescreen(String testID) throws IOException {
 		return actualMap;
 
 	}
-	
+
 	public byte[] takescreenAsBiteArray() throws IOException {
 
 		byte[] screenshot = takeScreenShotAsBiteArray();
@@ -377,8 +425,6 @@ public BufferedImage takescreen(String testID) throws IOException {
 
 	}
 
-	
-	
 	public void compareMapImage(String expectedMap, String testID)
 			throws IOException {
 		takescreen(testID);
@@ -419,7 +465,7 @@ public BufferedImage resize(BufferedImage img, int newW, int newH) {
 		g.drawImage(img, 0, 0, newW, newH, 0, 0, w, h, null);
 		g.dispose();
 		return dimg;
-		
+
 	}
 
 }
diff --git a/acceptancetesting/src/test/cucumber/routing.feature b/acceptancetesting/src/test/cucumber/routing.feature
index e8ee21442e..2291408e1b 100644
--- a/acceptancetesting/src/test/cucumber/routing.feature
+++ b/acceptancetesting/src/test/cucumber/routing.feature
@@ -8,58 +8,61 @@ Feature: Verify a route from A to B
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco          | waypointdesc                 | azimuth | direction | time  | distance |
-      | 1             | 51.472114,-0.361993 | Continue onto ELLINGTON ROAD | 275     | W         | 13535 | 131.626  |
+      | 1             | 51.472387,-0.361788 | Continue onto ELLINGTON ROAD | 280     | W         | 10789 | 104.896  |
+
 
     Examples: 
       | pointA                                 | pointB                                 | routetype |
       | 51.471546541834144,-0.3618621826171875 | 51.45914115860512,-0.96679687499999995 | car       |
-      
 
-  @Routing
+  @Routing 
   Scenario Outline: Verify  waypoints on a Route from Hounslow to Reading
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco          | waypointdesc                      | azimuth | direction | time    | distance  |
-      | 1             | 51.472114,-0.361993 | Continue onto ELLINGTON ROAD      | 274     | W         | 13535   | 131.626   |
-      | 9             | 51.491777,-0.41102  | Turn slight left onto M4          | 303     | NW        | 1298139 | 36068.009 |
+      | 1             | 51.472387,-0.361788 | Continue onto ELLINGTON ROAD | 280     | W         | 10789 | 104.896  |
+      | 9             | 51.491777,-0.41102  | Turn slight left onto M4          | 303     | NW        | 1298429 | 36068.472 |
       | 13            | 51.451397,-0.960099 | Turn right onto WATLINGTON STREET | 321     | NW        | 15401   | 149.744   |
 
-    Examples: 
+   Examples: 
       | pointA                                 | pointB                                 | routetype |
       | 51.471546541834144,-0.3618621826171875 | 51.45914115860512,-0.96679687499999995 | car       |
 
-  @Routing
+
+  @Routing 
   Scenario Outline: Verify  waypoints on a Route from Southampton to Glasgow
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco          | waypointdesc                      | azimuth | direction | time     | distance   |
-      | 1             | 50.896802,-1.400532 | Continue onto PLATFORM ROAD (A33) | 260     | W         | 5575     | 85.236     |
-      | 16            | 50.953446,-1.403571 | Turn slight right onto M3         | 41      | NE        | 3005775  | 83509.456  |
-      | 17            | 51.399043,-0.547504 | Continue onto M25                 | 74      | E         | 741515   | 20603.909  |
-      | 18            | 51.561606,-0.539424 | Continue onto M40                 | 277     | W         | 4952514  | 137597.267 |
-      | 20            | 52.480513,-1.719489 | Continue onto M6                  | 301     | NW        | 12025803 | 334124.234 |
-      | 24            | 55.846513,-4.092642 | Turn slight left onto M8          | 360     | N         | 395847   | 10999.805  |
+      | 1             | 50.896796,-1.400544 | Continue onto PLATFORM ROAD (A33) | 261     | W         | 5514     | 84.266     |
+      | 16            | 50.953446,-1.403571 | Turn slight right onto M3         | 41      | NE        | 3006306  | 83510.255  |
+      | 17            | 51.399043,-0.547504 | Continue onto M25                 | 74      | E         | 741727   | 20604.228  |
+      | 18            | 51.561606,-0.539424 | Continue onto M40                 | 277     | W         | 4953466  | 137598.554 |
+      | 20            | 52.480513,-1.719489 | Continue onto M6                  | 301     | NW        | 12028330 | 334127.547 |
+      | 24            | 55.846513,-4.092642 | Turn slight left onto M8          | 360     | N         | 395981   | 11000.027  |
 
     Examples: 
       | pointA              | pointB             | routetype |
       | 50.896617,-1.400465 | 55.861284,-4.24996 | car       |
+  
+
 
-  @Routing
+  @Routing 
   Scenario Outline: Verify  waypoints on a Route from London to Birmingham
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco          | waypointdesc                                            | azimuth | direction | time    | distance   |
-      | 1             | 51.507234,-0.127584 | Continue onto CHARING CROSS (A4)                        | 260     | W         | 7256    | 110.961    |
-      | 7             | 51.517207,-0.142804 | Turn slight left onto A4201                             | 295     | NW        | 2809    | 42.967     |
-      | 21            | 51.571905,-0.230521 | Turn slight left onto M1                                | 33      | NE        | 4376863 | 121601.216 |
-      | 22            | 52.399959,-1.175042 | Continue onto M6                                        | 334     | NW        | 1867411 | 51882.199  |
-      | 23            | 52.508912,-1.871271 | Continue onto ASTON EXPRESSWAY (ELEVATED ROAD) (A38(M)) | 251     | W         | 25435   | 706.759    |
+      | 1             | 51.507234,-0.127584 | Continue onto CHARING CROSS (A4)                        | 260     | W         | 7262    | 110.965    |
+      | 7             | 51.517207,-0.142804 | Turn slight left onto A4201                             | 295     | NW        | 2812    | 42.971     |
+      | 21            | 51.571905,-0.230521 | Turn slight left onto M1                                | 33      | NE        | 4377586 | 121602.814 |
+      | 22            | 52.399959,-1.175042 | Continue onto M6                                        | 334     | NW        | 1867733 | 51882.763  |
+      | 23            | 52.508912,-1.871271 | Continue onto ASTON EXPRESSWAY (ELEVATED ROAD) (A38(M)) | 251     | W         | 25441   | 706.768    |
 
     Examples: 
       | pointA              | pointB              | routetype |
       | 51.507229,-0.127581 | 52.481875,-1.898743 | car       |
 
-  @Routing
+  @Routing 
   Scenario Outline: Verify  waypoints on a Route from London to Birmingham and the total route time estimate
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then The total route time should be not more than "<totalRouteTime>"
@@ -68,7 +71,7 @@ Feature: Verify a route from A to B
       | pointA              | pointB              | routetype | totalRouteTime |
       | 51.507229,-0.127581 | 52.481875,-1.898743 | car       | 03h00min       |
 
-  @Routing
+  @Routing 
   Scenario Outline: Verify  waypoints on a Route from Hounslow to Burnham and the total route time estimate
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then The total route time should be not more than "<totalRouteTime>"
@@ -77,20 +80,20 @@ Feature: Verify a route from A to B
       | pointA             | pointB              | routetype | totalRouteTime |
       | 51.475161,-0.39591 | 51.536292,-0.656802 | car       | 0h30min        |
 
-  @Routing
+  @Routing @Current
   Scenario Outline: Verify  waypoints on a Route from Southampton to Glasgow
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the trackPoints on the route map:
       | trackPointco        |
       | 53.014721,-2.327641 |
       | 54.402164,-2.604933 |
-      | 55.411474,-3.5759   |
+      | 55.411387,-3.575691  |
 
     Examples: 
       | pointA              | pointB             | routetype |
       | 50.896617,-1.400465 | 55.861284,-4.24996 | car       |
 
-  @Routing
+  @Routing @Current
   Scenario Outline: Verify  oneway Restrictions on a Route (Burmingham Route with one way restriction-WSPIP-74)
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the trackPoints not on the route map:
@@ -101,7 +104,7 @@ Feature: Verify a route from A to B
       | pointA              | pointB              | routetype |
       | 52.446823,-1.929077 | 52.446604,-1.930043 | car       |
 
-  @Routing
+  @Routing 
   Scenario Outline: Verify  oneway Restrictions on a Route (Exeter)
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the trackPoints not on the route map:
@@ -112,7 +115,7 @@ Feature: Verify a route from A to B
       | pointA              | pointB             | routetype |
       | 50.720492,-3.535221 | 50.718641,-3.53476 | car       |
 
-  @Routing
+  @Routing 
   Scenario Outline: Verify  Turn Restrictions  on a Route (Exeter)
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the trackPoints not on the route map:
@@ -123,7 +126,7 @@ Feature: Verify a route from A to B
       | pointA             | pointB             | routetype |
       | 50.72148,-3.532485 | 50.721888,-3.53182 | car       |
 
-  @Routing
+  @Routing 
   Scenario Outline: Verify  No Turn Restrictions  on a Route (Birmingham WSPIP-77)
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the trackPoints not on the route map:
@@ -134,7 +137,7 @@ Feature: Verify a route from A to B
       | pointA              | pointB              | routetype |
       | 52.446564,-1.930268 | 52.446744,-1.929469 | car       |
 
-  @Routing @KnownIssues
+  @Routing @KnownIssues 
   Scenario Outline: Verify  No Turn Restrictions  on a Route (Birmingham Bristol Road WSPIP-83)
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the trackPoints not on the route map:
@@ -150,24 +153,24 @@ Feature: Verify a route from A to B
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints not on the route map:
       | wayPointIndex | waypointco          | waypointdesc                    | azimuth | direction | time  | distance |
-      | 9             | 50.722198,-3.526704 | Turn left onto SOUTHERNHAY EAST | 32      | NE        | 11069 | 107.648  |
+      | 7             | 50.722198,-3.526704 | Turn left onto SOUTHERNHAY EAST | 32      | NE        | 11069 | 107.648  |
 
     Examples: 
       | pointA              | pointB              | routetype |
       | 50.720454,-3.530089 | 50.722657,-3.526321 | car       |
 
-  @Routing
+  @Routing 
   Scenario Outline: Verify  One-Way(No Entry)Restriction   (SIVELL PLACE-Exeter)
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco          | waypointdesc               | azimuth | direction | time | distance |
-      | 2             | 50.720531,-3.504654 | Turn left onto SIVELL MEWS | 24      | NE        | 4602 | 44.753   |
+      | 2             | 50.720531,-3.504654 | Turn left onto SIVELL MEWS | 24      | NE        | 4603 | 44.754   |
 
     Examples: 
       | pointA              | pointB              | routetype |
       | 50.720561,-3.504848 | 50.720608,-3.505677 | car       |
 
-  @Routing
+  @Routing 
   Scenario Outline: Verify  under pass still finds route  from top road (Southampton- Charle WattsWay)
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the trackPoints on the route map:
@@ -178,7 +181,7 @@ Feature: Verify a route from A to B
       | pointA              | pointB              | routetype |
       | 50.917598,-1.317992 | 50.919748,-1.310342 | car       |
 
-  @Routing
+  @Routing 
   Scenario Outline: Verify  under pass still finds route from bottom road  (Southampton- Charle WattsWay)
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the trackPoints on the route map:
@@ -189,34 +192,34 @@ Feature: Verify a route from A to B
       | pointA             | pointB             | routetype |
       | 50.91525,-1.318761 | 50.92045,-1.316021 | car       |
 
-  @Routing
+  @Routing 
   Scenario Outline: Verify  No Turn   (WSPIP-76:Eastley- TWYFORD ROAD )
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco          | waypointdesc                       | azimuth | direction | time | distance |
-      | 3             | 50.971186,-1.350769 | turn left onto TWYFORD ROAD (A335) | 353     | N         | 5624 | 85.959   |
+      | 3             | 50.971186,-1.350769 | Turn left onto TWYFORD ROAD (A335) | 353     | N         | 5625 | 85.961  |
 
     Examples: 
       | pointA              | pointB              | routetype |
       | 50.972281,-1.350942 | 50.972212,-1.351183 | car       |
 
-  @Routing
+  @Routing 
   Scenario Outline: Verify  No Turn   (WSPIP-76:Eastley- Station Hill Road)
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco          | waypointdesc                              | azimuth | direction | time | distance |
-      | 2             | 50.969817,-1.350504 | Turn slight left onto STATION HILL (A335) | 180     | S         | 2931 | 44.808   |
+      | 2             | 50.969817,-1.350504 | Turn slight left onto STATION HILL (A335) | 180     | S         | 2932 | 44.811   |
 
     Examples: 
       | pointA              | pointB             | routetype |
       | 50.970024,-1.350267 | 50.97008,-1.350521 | car       |
 
-  @Routing
+  @Routing 
   Scenario Outline: Verify  No Turn   (Treaty Center-Hounslow- Fairfields Road)
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco          | waypointdesc                               | azimuth | direction | time | distance |
-      | 2             | 51.468925,-0.359049 | Turn slight left onto HANWORTH ROAD (A315) | 251     | W         | 3534 | 54.019   |
+      | 2             | 51.468925,-0.359049 | Turn slight left onto A315 (HANWORTH ROAD) | 250     | W         | 14656 | 223.972   |
 
     Examples: 
       | pointA             | pointB              | routetype |
@@ -233,7 +236,7 @@ Feature: Verify a route from A to B
       | pointA              | pointB              | routetype |
       | 51.470198,-0.356036 | 51.470352,-0.357388 | car       |
 
-  @Routing
+  @Routing @Current
   Scenario Outline: Verify  Mandatory Turn   (Alexandra Road-Hounslow- Fairfields Road)
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
@@ -242,7 +245,7 @@ Feature: Verify a route from A to B
 
     Examples: 
       | pointA             | pointB              | routetype |
-      | 51.47118,-0.363609 | 51.470651,-0.363495 | car       |
+      | 51.47118,-0.363609 | 51.470254,-0.363412 | car       |
 
   @Routing @KnownIssues
   Scenario Outline: Verify  No Turn Restriction (Denmark Road-Exeter)
@@ -276,18 +279,26 @@ Feature: Verify a route from A to B
     Examples: 
       | pointA              | pointB             | routetype |
       | 50.724316,-3.521008 | 50.72413,-3.518874 | car       |
-      
-      
-      
-    @Routing 
+
+  @Routing @Current
   Scenario Outline: Verify  Private Road Restricted Access (Warwick Road-Carlisle)
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the trackPoints not on the route map:
-      | trackPointco      |
+      | trackPointco        |
       | 54.894721,-2.921665 |
 
     Examples: 
-      | pointA              | pointB             | routetype |
+      | pointA              | pointB            | routetype |
       | 54.894427,-2.921111 | 54.8922,-2.928296 | car       |
-      
-      
+
+  @Routing 
+  Scenario Outline: Verify  Route using Full UK Address (Southampton to London)
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Then I should be able to verify the waypoints on the route map:
+      | wayPointIndex | waypointdesc                          |
+      | 3             | Turn left onto BROWNHILL WAY          |
+      | 18            | Continue onto A219 (HAMMERSMITH ROAD) |
+
+    Examples: 
+      | pointA                                           | pointB                                 | routetype |
+      | 4, ADANAC DRIVE, NURSLING, SOUTHAMPTON, SO16 0AS | 1, PICCADILLY ARCADE, LONDON, SW1Y 6NH | car       |
