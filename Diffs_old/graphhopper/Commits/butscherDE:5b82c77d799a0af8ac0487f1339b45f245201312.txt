diff --git a/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/OneToManyRouting.java b/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/OneToManyRouting.java
index 7cced25caf..005ae7d652 100644
--- a/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/OneToManyRouting.java
+++ b/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/OneToManyRouting.java
@@ -50,7 +50,7 @@ private RoutingAlgorithm buildRoutingAlgorithmForFromToPair(int toNode) {
     }
 
     public List<Path> getAllFoundPaths() {
-        return this.getAllFoundPaths();
+        return this.allFoundPaths;
     }
 
     private class NodesToConsiderEdgeFilter implements EdgeFilter {
diff --git a/core/src/test/java/com/graphhopper/routing/template/polygonRoutingUtil/ManyToManyRoutingTest.java b/core/src/test/java/com/graphhopper/routing/template/polygonRoutingUtil/ManyToManyRoutingTest.java
new file mode 100644
index 0000000000..5538328875
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/routing/template/polygonRoutingUtil/ManyToManyRoutingTest.java
@@ -0,0 +1,4 @@
+package com.graphhopper.routing.template.polygonRoutingUtil;
+
+public class ManyToManyRoutingTest {
+}
diff --git a/core/src/test/java/com/graphhopper/routing/template/polygonRoutingUtil/OneToManyRoutingTest.java b/core/src/test/java/com/graphhopper/routing/template/polygonRoutingUtil/OneToManyRoutingTest.java
index 9886af55fc..08dbb6d46c 100644
--- a/core/src/test/java/com/graphhopper/routing/template/polygonRoutingUtil/OneToManyRoutingTest.java
+++ b/core/src/test/java/com/graphhopper/routing/template/polygonRoutingUtil/OneToManyRoutingTest.java
@@ -3,6 +3,10 @@
 import com.graphhopper.routing.*;
 import com.graphhopper.routing.template.util.PolygonRoutingTestGraph;
 import com.graphhopper.storage.index.QueryResult;
+import com.graphhopper.util.DistanceCalc2D;
+import com.graphhopper.util.EdgeExplorer;
+import com.graphhopper.util.EdgeIterator;
+import com.graphhopper.util.EdgeIteratorState;
 import com.graphhopper.util.shapes.GHPoint;
 import org.junit.Before;
 import org.junit.Test;
@@ -62,13 +66,28 @@ private void prepareQueryGraph(final int fromNode, final List<Integer> toNodes)
             final double latitude = this.graphMocker.nodeAccess.getLatitude(node);
             final double longitude = this.graphMocker.nodeAccess.getLongitude(node);
 
-            QueryResult queryResult = new QueryResult(latitude, longitude);
-            queryResult.setClosestNode(node);
+            QueryResult queryResult = createQueryReult(node, latitude, longitude);
             queryResults.add(queryResult);
         }
         return queryResults;
     }
 
+    private QueryResult createQueryReult(int node, double latitude, double longitude) {
+        QueryResult queryResult = new QueryResult(latitude, longitude);
+        queryResult.setClosestNode(node);
+        queryResult.setWayIndex(0);
+        queryResult.setClosestEdge(findClosestEdge(node));
+        queryResult.calcSnappedPoint(new DistanceCalc2D());
+        return queryResult;
+    }
+
+    private EdgeIteratorState findClosestEdge(final int baseNode) {
+        EdgeExplorer edgeExplorer = this.graphMocker.graph.createEdgeExplorer();
+        EdgeIterator edgeIterator = edgeExplorer.setBaseNode(baseNode);
+        edgeIterator.next();
+        return edgeIterator;
+    }
+
     @Test
     public void validateFirstPath() {
         final List<Integer> nodesInPathOrder = this.retrieveFoundPathsNode(0);
@@ -83,6 +102,7 @@ public void validateFirstPath() {
     public void validateSecondPath() {
         final List<Integer> nodesInPathOrder = this.retrieveFoundPathsNode(1);
 
+
     }
 
     @Test
