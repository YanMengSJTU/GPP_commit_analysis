diff --git a/core/src/main/java/com/graphhopper/routing/InstructionsFromEdges.java b/core/src/main/java/com/graphhopper/routing/InstructionsFromEdges.java
index bab9f4d521..70d7c6e8c1 100644
--- a/core/src/main/java/com/graphhopper/routing/InstructionsFromEdges.java
+++ b/core/src/main/java/com/graphhopper/routing/InstructionsFromEdges.java
@@ -19,6 +19,7 @@
 
 import com.graphhopper.routing.util.DefaultEdgeFilter;
 import com.graphhopper.routing.util.FlagEncoder;
+import com.graphhopper.routing.weighting.TDWeightingI;
 import com.graphhopper.routing.weighting.Weighting;
 import com.graphhopper.storage.Graph;
 import com.graphhopper.storage.NodeAccess;
@@ -419,8 +420,13 @@ private void updatePointsAndInstruction(EdgeIteratorState edge, PointList pl) {
         }
         double newDist = edge.getDistance();
         prevInstruction.setDistance(newDist + prevInstruction.getDistance());
-        prevInstruction.setTime(weighting.calcMillis(edge, false, EdgeIterator.NO_EDGE)
-                + prevInstruction.getTime());
+        if (weighting instanceof TDWeightingI) {
+            prevInstruction.setTime(((TDWeightingI) weighting).calcTDMillis(edge, false, EdgeIterator.NO_EDGE, prevInstruction.getTime())
+                    + prevInstruction.getTime());
+        } else {
+            prevInstruction.setTime(weighting.calcMillis(edge, false, EdgeIterator.NO_EDGE)
+                    + prevInstruction.getTime());
+        }
     }
 
 }
\ No newline at end of file
diff --git a/core/src/main/java/com/graphhopper/routing/Path.java b/core/src/main/java/com/graphhopper/routing/Path.java
index f14fbc87cf..99745cf119 100644
--- a/core/src/main/java/com/graphhopper/routing/Path.java
+++ b/core/src/main/java/com/graphhopper/routing/Path.java
@@ -21,6 +21,7 @@
 import com.carrotsearch.hppc.IntIndexedContainer;
 import com.graphhopper.coll.GHIntArrayList;
 import com.graphhopper.routing.util.FlagEncoder;
+import com.graphhopper.routing.weighting.TDWeightingI;
 import com.graphhopper.routing.weighting.Weighting;
 import com.graphhopper.storage.Graph;
 import com.graphhopper.storage.NodeAccess;
@@ -239,7 +240,11 @@ public String getDebugInfo() {
     protected void processEdge(int edgeId, int adjNode, int prevEdgeId) {
         EdgeIteratorState iter = graph.getEdgeIteratorState(edgeId, adjNode);
         distance += iter.getDistance();
-        time += weighting.calcMillis(iter, false, prevEdgeId);
+        if (weighting instanceof TDWeightingI) {
+            time += ((TDWeightingI) weighting).calcTDMillis(iter, false, prevEdgeId, time);
+        } else {
+            time += weighting.calcMillis(iter, false, prevEdgeId);
+        }
         addEdge(edgeId);
     }
 
diff --git a/core/src/main/java/com/graphhopper/routing/weighting/TDWeightingI.java b/core/src/main/java/com/graphhopper/routing/weighting/TDWeightingI.java
new file mode 100644
index 0000000000..da0198c7ad
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/routing/weighting/TDWeightingI.java
@@ -0,0 +1,26 @@
+/*
+ *  Licensed to GraphHopper GmbH under one or more contributor
+ *  license agreements. See the NOTICE file distributed with this work for
+ *  additional information regarding copyright ownership.
+ *
+ *  GraphHopper GmbH licenses this file to you under the Apache License,
+ *  Version 2.0 (the "License"); you may not use this file except in
+ *  compliance with the License. You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package com.graphhopper.routing.weighting;
+
+import com.graphhopper.util.EdgeIteratorState;
+
+public interface TDWeightingI extends Weighting {
+
+    long calcTDMillis(EdgeIteratorState edge, boolean reverse, int prevOrNextEdgeId, long duration);
+
+}
diff --git a/core/src/main/java/com/graphhopper/util/details/TimeDetails.java b/core/src/main/java/com/graphhopper/util/details/TimeDetails.java
index d65d314d39..3502a4dcb5 100644
--- a/core/src/main/java/com/graphhopper/util/details/TimeDetails.java
+++ b/core/src/main/java/com/graphhopper/util/details/TimeDetails.java
@@ -17,6 +17,7 @@
  */
 package com.graphhopper.util.details;
 
+import com.graphhopper.routing.weighting.TDWeightingI;
 import com.graphhopper.routing.weighting.Weighting;
 import com.graphhopper.util.EdgeIteratorState;
 
@@ -32,6 +33,7 @@
     private final Weighting weighting;
 
     private int edgeId = -1;
+    private long accumulatedTime = 0;
     private long time = 0;
 
     public TimeDetails(Weighting weighting) {
@@ -43,7 +45,12 @@ public TimeDetails(Weighting weighting) {
     public boolean isEdgeDifferentToLastEdge(EdgeIteratorState edge) {
         if (edge.getEdge() != edgeId) {
             edgeId = edge.getEdge();
-            time = weighting.calcMillis(edge, false, -1);
+            if (weighting instanceof TDWeightingI) {
+                time = ((TDWeightingI) weighting).calcTDMillis(edge, false, -1, accumulatedTime);
+            } else {
+                time = weighting.calcMillis(edge, false, -1);
+            }
+            accumulatedTime += time;
             return true;
         }
         return false;
diff --git a/web/src/main/java/com/graphhopper/swl/TDWeighting.java b/web/src/main/java/com/graphhopper/swl/TDWeighting.java
index 7008e7750f..ae04e31695 100644
--- a/web/src/main/java/com/graphhopper/swl/TDWeighting.java
+++ b/web/src/main/java/com/graphhopper/swl/TDWeighting.java
@@ -20,12 +20,13 @@
 
 import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.routing.util.HintsMap;
+import com.graphhopper.routing.weighting.TDWeightingI;
 import com.graphhopper.routing.weighting.Weighting;
 import com.graphhopper.util.EdgeIteratorState;
 import com.graphhopper.util.PMap;
 import com.graphhopper.util.Parameters;
 
-public class TDWeighting implements Weighting {
+public class TDWeighting implements TDWeightingI {
 
     protected static final double SPEED_CONV = 3.6D;
 
@@ -67,6 +68,11 @@ public double calcWeight(EdgeIteratorState edge, boolean reverse, int prevOrNext
 
     @Override
     public long calcMillis(EdgeIteratorState edge, boolean reverse, int prevOrNextEdgeId) {
+        throw new RuntimeException();
+    }
+
+    @Override
+    public long calcTDMillis(EdgeIteratorState edge, boolean reverse, int prevOrNextEdgeId, long duration) {
 //        long flags = edge.getFlags();
 //        if (reverse && !encoder.isBackward(flags) || !reverse && !encoder.isForward(flags))
 //            throw new IllegalStateException("Calculating time should not require to read speed from edge in wrong direction. "
@@ -82,7 +88,7 @@ public long calcMillis(EdgeIteratorState edge, boolean reverse, int prevOrNextEd
 //        boolean unfavoredEdge = edge.getBool(EdgeIteratorState.K_UNFAVORED_EDGE, false);
 //        if (unfavoredEdge)
 //            time += headingPenaltyMillis;
-        return (long) travelTimeCalculator.getTravelTimeMilliseconds(edge.getEdge(), 0, "car", null);
+        return (long) travelTimeCalculator.getTravelTimeMilliseconds(R5EdgeIds.getR5EdgeId((OriginalDirectionFlagEncoder) encoder, edge), (int) duration, "car", null);
     }
 
     @Override
diff --git a/web/src/test/java/com/graphhopper/swl/TDNetworkIT.java b/web/src/test/java/com/graphhopper/swl/TDNetworkIT.java
index 99c7517eab..954049b80e 100644
--- a/web/src/test/java/com/graphhopper/swl/TDNetworkIT.java
+++ b/web/src/test/java/com/graphhopper/swl/TDNetworkIT.java
@@ -24,6 +24,7 @@
 import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.routing.util.HintsMap;
+import com.graphhopper.routing.weighting.FastestWeighting;
 import com.graphhopper.routing.weighting.Weighting;
 import com.graphhopper.storage.Graph;
 import com.graphhopper.util.details.PathDetail;
@@ -49,10 +50,15 @@ public void setUp() {
             public Weighting createWeighting(HintsMap hintsMap, FlagEncoder encoder, Graph graph) {
                 if (hintsMap.getWeighting().equals("td")) {
                     return new TDWeighting(encoder, new TravelTimeCalculator() {
+                        FastestWeighting defaultWeighting = new FastestWeighting(encoder);
+
                         @Override
                         public float getTravelTimeMilliseconds(int edge, int durationSeconds, String streetMode, GHRequest req) {
-                            System.out.println("wurst");
-                            return edge;
+                            try {
+                                return defaultWeighting.calcMillis(graphHopper.getGraphHopperStorage().getEdgeIteratorState(edge / 2, Integer.MIN_VALUE), edge % 2 == 0, -1);
+                            } catch (IllegalStateException e) {
+                                return defaultWeighting.calcMillis(graphHopper.getGraphHopperStorage().getEdgeIteratorState(edge / 2, Integer.MIN_VALUE), edge % 2 == 1, -1);
+                            }
                         }
                     }, hintsMap);
                 } else {
@@ -60,17 +66,18 @@ public float getTravelTimeMilliseconds(int edge, int durationSeconds, String str
                 }
             }
         }.setStoreOnFlush(true).
-            setEncodingManager(encodingManager).
-            setWayPointMaxDistance(0).
-            setGraphHopperLocation(graphFile).
-            setPathDetailsBuilderFactory(new PathDetailsBuilderFactoryWithR5EdgeId(graphHopper)).
-            importOrLoad();
+                setEncodingManager(encodingManager).
+                setWayPointMaxDistance(0).
+                setGraphHopperLocation(graphFile);
+        graphHopper.setPathDetailsBuilderFactory(new PathDetailsBuilderFactoryWithR5EdgeId(graphHopper));
+        graphHopper.importOrLoad();
+        graphHopper.getCHFactoryDecorator().setDisablingAllowed(true);
     }
 
     @Test
     public void testMonacoFastest() {
         GHRequest request = new GHRequest(42.56819, 1.603231, 42.571034, 1.520662);
-        request.setPathDetails(Arrays.asList("time", "edge_id"));
+        request.setPathDetails(Arrays.asList("time", "r5_edge_id"));
         GHResponse route = graphHopper.route(request);
 
         final int EXPECTED_LINKS_IN_PATH = 52;
@@ -80,7 +87,7 @@ public void testMonacoFastest() {
         assertEquals(EXPECTED_TOTAL_TRAVEL_TIME, route.getBest().getTime());
 
         List<PathDetail> time = route.getBest().getPathDetails().get("time");
-        List<PathDetail> edgeIds = route.getBest().getPathDetails().get("edge_id");
+        List<PathDetail> edgeIds = route.getBest().getPathDetails().get("r5_edge_id");
 
         assertEquals(EXPECTED_LINKS_IN_PATH, time.size());
         assertEquals(EXPECTED_LINKS_IN_PATH, edgeIds.size());
@@ -100,6 +107,26 @@ public void testMonacoFastest() {
 
     }
 
+    @Test
+    public void testMonacoTD() {
+        GHRequest request = new GHRequest(42.56819, 1.603231, 42.571034, 1.520662);
+        request.setPathDetails(Arrays.asList("time", "r5_edge_id"));
+        request.getHints().put("ch.disable", true);
+        request.setWeighting("td");
+        GHResponse route = graphHopper.route(request);
+        List<PathDetail> time = route.getBest().getPathDetails().get("time");
+        List<PathDetail> edgeIds = route.getBest().getPathDetails().get("r5_edge_id");
+        final int EXPECTED_LINKS_IN_PATH = 52;
+        final long EXPECTED_TOTAL_TRAVEL_TIME = 1277122;
+
+        assertEquals(EXPECTED_LINKS_IN_PATH, time.size());
+        assertEquals(EXPECTED_LINKS_IN_PATH, edgeIds.size());
+
+        for (int i=0; i<EXPECTED_LINKS_IN_PATH; i++) {
+            System.out.printf("%d\t%d\t\n", edgeIds.get(i).getValue(), time.get(i).getValue());
+        }
+    }
+
     private long sumTimes(List<PathDetail> time) {
         long sum = 0;
         for (PathDetail pathDetail : time) {
