diff --git a/agent/test.py b/agent/test.py
new file mode 100644
index 0000000000..dcf3bdc90c
--- /dev/null
+++ b/agent/test.py
@@ -0,0 +1,3 @@
+if __name__ == '__main__':
+    import pandas
+    print("in with pandas")
\ No newline at end of file
diff --git a/config.yml b/config.yml
index 6543bb44e3..407fe44a57 100644
--- a/config.yml
+++ b/config.yml
@@ -8,7 +8,7 @@ graphhopper:
 
   # Possible options: car,foot,bike,bike2,mtb,racingbike,motorcycle (comma separated)
   # bike2 takes elevation data into account (like up-hill is slower than down-hill) and requires enabling graph.elevation.provider below
-  graph.flag_encoders: mapcrider2|turn_cost=true,racingbike
+  graph.flag_encoders: mapcrider2
 
 
   # Enable turn restrictions for car or motorcycle.
@@ -19,7 +19,7 @@ graphhopper:
 
 
   # To populate your graph with elevation data use SRTM, default is noop (no elevation)
-  graph.elevation.provider: multi
+  graph.elevation.provider: cgiar # multi
 
 
   # default location for cache is /tmp/srtm
diff --git a/core/src/main/java/com/graphhopper/routing/util/MapcRider2WeightFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/MapcRider2WeightFlagEncoder.java
index 62d82124a5..4ddff11d8a 100644
--- a/core/src/main/java/com/graphhopper/routing/util/MapcRider2WeightFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/MapcRider2WeightFlagEncoder.java
@@ -96,20 +96,20 @@ public MapcRider2WeightFlagEncoder(int speedBits, double speedFactor, int maxTur
         preferHighwayTags.add("track");
 
 
-        safeHighwayTags.add("residential");
+//        safeHighwayTags.add("residential");
         safeHighwayTags.add("track");
         safeHighwayTags.add("cycle_track");
         safeHighwayTags.add("cycleway");
 
 
-        setTrackTypeSpeed("grade1", 18); // paved
-        setTrackTypeSpeed("grade2", 15); // now unpaved ...
+        setTrackTypeSpeed("grade1", 20); // paved
+        setTrackTypeSpeed("grade2", 18); // now unpaved ...
         setTrackTypeSpeed("grade3", PUSHING_SECTION_SPEED);
         setTrackTypeSpeed("grade4", PUSHING_SECTION_SPEED);
         setTrackTypeSpeed("grade5", PUSHING_SECTION_SPEED);
 
-        setSurfaceSpeed("paved", 18);
-        setSurfaceSpeed("asphalt", 16);
+        setSurfaceSpeed("paved", 20);
+        setSurfaceSpeed("asphalt", 20);
         setSurfaceSpeed("cobblestone", 10);
         setSurfaceSpeed("cobblestone:flattened", 10);
         setSurfaceSpeed("sett", 10);
@@ -136,14 +136,14 @@ public MapcRider2WeightFlagEncoder(int speedBits, double speedFactor, int maxTur
         setSurfaceSpeed("wood", PUSHING_SECTION_SPEED );
 
         setHighwaySpeed("cycleway", 18);
-        setHighwaySpeed("path", 14);
+        setHighwaySpeed("path", 16);
         setHighwaySpeed("footway", 10);
         setHighwaySpeed("pedestrian", 10);
         setHighwaySpeed("road", 14);
         setHighwaySpeed("track", PUSHING_SECTION_SPEED ); // assume unpaved
         setHighwaySpeed("service", 12);
         setHighwaySpeed("unclassified", 14);
-        setHighwaySpeed("residential", 12);
+        setHighwaySpeed("residential", PUSHING_SECTION_SPEED);
 
         setHighwaySpeed("trunk", 15);
         setHighwaySpeed("trunk_link", 15);
@@ -168,7 +168,7 @@ public MapcRider2WeightFlagEncoder(int speedBits, double speedFactor, int maxTur
         absoluteBarriers.add("kissing_gate");
 
         setAvoidSpeedLimit(81);
-        setSpecificClassBicycle("mapcrider");
+        setSpecificClassBicycle("mapcrider2");
 
         init();
     }
diff --git a/core/src/main/java/com/graphhopper/util/details/AverageSpeedDetails.java b/core/src/main/java/com/graphhopper/util/details/AverageSpeedDetails.java
index d0d4257d1f..ee0b678b29 100644
--- a/core/src/main/java/com/graphhopper/util/details/AverageSpeedDetails.java
+++ b/core/src/main/java/com/graphhopper/util/details/AverageSpeedDetails.java
@@ -39,6 +39,7 @@ public AverageSpeedDetails(FlagEncoder encoder) {
 
     @Override
     public boolean isEdgeDifferentToLastEdge(EdgeIteratorState edge) {
+
         if (Math.abs(encoder.getSpeed(edge.getFlags()) - curAvgSpeed) > 0.0001) {
             this.curAvgSpeed = this.encoder.getSpeed(edge.getFlags());
             return true;
diff --git a/core/src/main/java/com/graphhopper/util/details/FacilitiesOveralDetails.java b/core/src/main/java/com/graphhopper/util/details/FacilitiesOveralDetails.java
index a81be7462d..c4bd98f2d5 100644
--- a/core/src/main/java/com/graphhopper/util/details/FacilitiesOveralDetails.java
+++ b/core/src/main/java/com/graphhopper/util/details/FacilitiesOveralDetails.java
@@ -39,8 +39,12 @@ public FacilitiesOveralDetails(FlagEncoder encoder) {
 
     @Override
     public boolean isEdgeDifferentToLastEdge(EdgeIteratorState edge) {
+//        if (Math.abs(encoder.getSpeed(edge.getFlags()) - curAvgSpeed) > 0.0001) {
+//            this.curAvgSpeed = this.encoder.getSpeed(edge.getFlags());
+//            return true;
+//        }
 //        String facils = encoder();
-        this.facilitiesOverals = this.encoder.getSurfaceAsString(edge.getFlags()) + " | " + this.encoder.getHighwayAsString(edge);
+        this.facilitiesOverals = this.encoder.getSurfaceAsString(edge.getFlags()) + " | " + this.encoder.getHighwayAsString(edge) + " | "+ this.encoder.getReverseSpeed(edge.getFlags());
         return true;
     }
 
diff --git a/viz/src/components/InfoboxView.vue b/viz/src/components/InfoboxView.vue
new file mode 100644
index 0000000000..fc1e78e3e9
--- /dev/null
+++ b/viz/src/components/InfoboxView.vue
@@ -0,0 +1,57 @@
+<template>
+    <pre id='coordinates' class='coordinates'>
+
+        <i>line widths are proportional to
+        each segments' weight</i>
+
+        <i>number of alternatives:</i> <strong>{{num_alternatives}}</strong>
+        <i>time for the best route:</i> <strong>{{total_time}} minutes</strong>
+        <i>total weight for the best route:</i> <strong>{{total_weight}}    </strong>
+
+    </pre>
+</template>
+
+<script>
+    export default {
+        name: "InfoboxView",
+        props:["feautre"],
+        computed:{
+            num_alternatives: function(){
+                return this.$parent.dataitems.length;
+            },
+            total_weight:function(){
+                return Math.round(this.$parent.dataitems[0]['weight']);
+            },
+            total_time: function () {
+                // this.$parent.dataitems.forEach(function (ec) {
+                //     // console.log
+                //     let best_time = ec.time
+                //     return best_time;
+                // })
+
+                return Math.round(this.$parent.dataitems[0]['time'] / 60000);
+            }
+        },
+        mounted(){
+            // coordinates.style.display = 'block';
+            // coordinates.innerHTML ='<br />Latitude: ';
+        }
+    }
+</script>
+
+<style>
+    .coordinates {
+        background: rgba(0,0,0,0.5);
+        color: #fff;
+        position: absolute;
+        bottom: 40px;
+        left: 20px;
+        padding:5px 5px 5px 5px;
+        margin: 5px 5px 5px 5px;
+        /*max-width: 300px;*/
+        font-size: 12px;
+        line-height: 18px;
+        border-radius: 3px;
+        display: block;
+    }
+</style>
\ No newline at end of file
diff --git a/viz/src/components/MapView.vue b/viz/src/components/MapView.vue
index 9ccffeef76..09057de8de 100644
--- a/viz/src/components/MapView.vue
+++ b/viz/src/components/MapView.vue
@@ -201,7 +201,9 @@
                                         d[joz]["paths"][i]["details"]["weight_value"].forEach(function(event){
                                                 let event_from_id = event[0];
                                                 let event_to_id = event[1];
-                                                let aver_spd = "segment ave speed: "
+                                                let aver_spd = "sp="
+                                                let foevent = "f="
+
                                                 // find the average_speed interval and get the value of that
                                                 // for each interval pair from the average_speeds details check the events from and to id
                                                 d[joz]["paths"][i]["details"]["average_speed"].forEach(function (a_s_event) {
@@ -216,6 +218,20 @@
                                                         }
                                                 })
 
+
+                                                d[joz]["paths"][i]["details"]["facilities_overal"].forEach(function (f_s_event) {
+                                                        let from_id = f_s_event[0]
+                                                        let to_id = f_s_event[1]
+
+                                                        if (event_from_id >= from_id && event_from_id <= to_id){
+                                                                if (event_to_id >=from_id && event_to_id <= to_id){
+                                                                        foevent = foevent + f_s_event[2]
+                                                                        // console.log("event_from_id ", event_from_id,"event_to_id", event_to_id,"from_id",from_id,"to_id",to_id)
+
+                                                                }
+                                                        }
+                                                })
+
                                                 let fromlon = d[joz]["paths"][i]["points"]["coordinates"][event[0]][0]
                                                 let fromlat = d[joz]["paths"][i]["points"]["coordinates"][event[0]][1]
                                                 let tolon = d[joz]["paths"][i]["points"]["coordinates"][event[1]][0]
@@ -229,7 +245,7 @@
                                                                         'color': color(i),
                                                                         'width': lineScale(weight_val),
                                                                         'opacity': 0.7,
-                                                                        'title': "weight: " + Math.round(weight_val)
+                                                                        'title': "w=" + Math.round(weight_val)+aver_spd+foevent
 
                                                                 },
                                                                 'geometry':{
