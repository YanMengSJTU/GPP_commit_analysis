diff --git a/web/src/main/java/com/graphhopper/http/ApiResource.java b/web/src/main/java/com/graphhopper/http/ApiResource.java
index 2a1142ddee..830d044183 100644
--- a/web/src/main/java/com/graphhopper/http/ApiResource.java
+++ b/web/src/main/java/com/graphhopper/http/ApiResource.java
@@ -11,8 +11,8 @@
 {
 	ROUTE("route", new String[] { "point", "vehicle" }, new String[] { "point", "vehicle",
 			"locale", "instructions", "weighting", "algorithm", "points_encoded", "debug",
-			"pretty", "calc_points", "type", "avoidances", "private", "srs" }), NEAREST("nearest",
-					new String[] { "point"}, new String[] { "point", "srs" }), INFO("info", new String[] {},
+			"pretty", "calc_points", "type", "avoidances", "private", "srs", "output_srs" }), NEAREST("nearest",
+					new String[] { "point"}, new String[] { "point", "srs", "output_srs" }), INFO("info", new String[] {},
 							new String[] {"srs"});
 
 	public String[] getMandatoryValues()
diff --git a/web/src/main/webapp/js/ghrequest.js b/web/src/main/webapp/js/ghrequest.js
index a4ea6a6454..feccb3c22c 100644
--- a/web/src/main/webapp/js/ghrequest.js
+++ b/web/src/main/webapp/js/ghrequest.js
@@ -462,6 +462,10 @@ GHRequest.prototype.createPath = function (url) {
     }
     this.srs = document.routeoptions.srs.value;
     
+    if(this.srs.toLowerCase() !== "wgs84") {
+    	url += "&output_srs=WGS84";
+    } 
+    
     if (this.weighting && this.weighting !== "fastest")
         url += "&weighting=" + this.weighting;
     if (this.srs && this.srs != "BNG")
diff --git a/web/src/test/java/com/graphhopper/http/ApiResourceTest.java b/web/src/test/java/com/graphhopper/http/ApiResourceTest.java
index eae97fbc8c..aa7d5f588b 100644
--- a/web/src/test/java/com/graphhopper/http/ApiResourceTest.java
+++ b/web/src/test/java/com/graphhopper/http/ApiResourceTest.java
@@ -81,6 +81,7 @@ public void testAllMandatoryAndAllValidParametersForRoute()
 		allParameters.put("avoidances", new String[] { "x" });
 		allParameters.put("private", new String[] { "x" });
 		allParameters.put("srs", new String[] {"x"});
+		allParameters.put("output_srs", new String[] {"x"});
 		when(request.getParameterMap()).thenReturn(allParameters);
 		try
 		{
@@ -112,6 +113,7 @@ public void testAllMandatoryAllValidParametersAndIncorrectOnesForRoute()
 		allParameters.put("avoidances", new String[] { "x" });
 		allParameters.put("private", new String[] { "x" });
 		allParameters.put("srs", new String[] { "x" });
+		allParameters.put("output_srs", new String[] {"x"});
 		// incorrect
 		allParameters.put("bogus", new String[] { "x" });
 		when(request.getParameterMap()).thenReturn(allParameters);
@@ -153,6 +155,7 @@ public void testAllMandatoryAndAllValidParametersForNearest()
 		allParameters.put("point", new String[] { "0" });
 		// valid
 		allParameters.put("srs", new String[] { "x" });
+		allParameters.put("output_srs", new String[] {"x"});
 		when(request.getParameterMap()).thenReturn(allParameters);
 		try
 		{
@@ -171,6 +174,7 @@ public void testAllMandatoryAllValidParametersAndIncorrectOnesForNearest()
 		allParameters.put("point", new String[] { "0" });
 		// valid
 		allParameters.put("srs", new String[] { "x" });
+		allParameters.put("output_srs", new String[] {"x"});
 		// incorrect
 		allParameters.put("bogus", new String[] { "x" });
 		when(request.getParameterMap()).thenReturn(allParameters);
