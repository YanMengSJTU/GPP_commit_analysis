diff --git a/core/src/main/java/com/graphhopper/GraphHopper.java b/core/src/main/java/com/graphhopper/GraphHopper.java
index 9f3edbc1b5..6b078d1257 100644
--- a/core/src/main/java/com/graphhopper/GraphHopper.java
+++ b/core/src/main/java/com/graphhopper/GraphHopper.java
@@ -575,7 +575,7 @@ public GraphHopper init( CmdArgs args )
 
         sortGraph = args.getBool("graph.doSort", sortGraph);
         removeZipped = args.getBool("graph.removeZipped", removeZipped);
-        int bytesForFlags = args.getInt("graph.bytesForFlags", 4);
+        int bytesForFlags = args.getInt("graph.bytesForFlags", 8);
         if (args.get("graph.locktype", "native").equals("simple"))
             lockFactory = new SimpleFSLockFactory();
         else
diff --git a/core/src/main/java/com/graphhopper/routing/util/EncodingManager.java b/core/src/main/java/com/graphhopper/routing/util/EncodingManager.java
index 32deb6d820..6a071b8361 100644
--- a/core/src/main/java/com/graphhopper/routing/util/EncodingManager.java
+++ b/core/src/main/java/com/graphhopper/routing/util/EncodingManager.java
@@ -78,7 +78,7 @@
      */
     public EncodingManager( String flagEncodersStr )
     {
-        this(flagEncodersStr, 4);
+        this(flagEncodersStr, 8);
     }
 
     public EncodingManager( String flagEncodersStr, int bytesForFlags )
@@ -149,10 +149,10 @@ public int getBytesForFlags()
 
             AbstractFlagEncoder fe;
             if (entry.equals(CAR))
-                fe = new CarFlagEncoder(entryVal);
+                fe = new OsCarFlagEncoder(entryVal);
 
             else if (entry.equals(BIKE))
-                fe = new BikeFlagEncoder(entryVal);
+                fe = new OsBikeFlagEncoder(entryVal);
 
             else if (entry.equals(BIKE2))
                 fe = new Bike2WeightFlagEncoder(entryVal);
@@ -164,7 +164,7 @@ else if (entry.equals(MOUNTAINBIKE))
                 fe = new MountainBikeFlagEncoder(entryVal);
 
             else if (entry.equals(FOOT))
-                fe = new FootFlagEncoder(entryVal);
+                fe = new OsFootFlagEncoder(entryVal);
 
             else if (entry.equals(MOTORCYCLE))
                 fe = new MotorcycleFlagEncoder(entryVal);
diff --git a/core/src/main/java/com/graphhopper/routing/util/FootFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/FootFlagEncoder.java
index 495660842f..b25f3c93d7 100644
--- a/core/src/main/java/com/graphhopper/routing/util/FootFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/FootFlagEncoder.java
@@ -296,8 +296,9 @@ public long handleWayTags( Way way, long allowed, long relationFlags )
             encoded = handleFerryTags(way, SLOW_SPEED, MEAN_SPEED, FERRY_SPEED);
             encoded |= directionBitMask;
         }
-
-        return encoded;
+        long anno = super.handleWayTags(way, allowed, relationFlags);
+        
+        return encoded |= anno;
     }
 
     @Override
diff --git a/core/src/main/java/com/graphhopper/routing/util/OsAvoidanceDecorator.java b/core/src/main/java/com/graphhopper/routing/util/OsAvoidanceDecorator.java
index f0f9c9a4f7..f4e8e691e8 100644
--- a/core/src/main/java/com/graphhopper/routing/util/OsAvoidanceDecorator.java
+++ b/core/src/main/java/com/graphhopper/routing/util/OsAvoidanceDecorator.java
@@ -8,164 +8,152 @@
  * Created by sadam on 4/15/15.
  */
 public class OsAvoidanceDecorator implements EncoderDecorator {
-    private EncodedValue wayTypeEncoder;
-
-
-    protected enum AvoidanceType
-    {
-        MOTORWAYS(1) {
-            @Override
-            public boolean isValidForWay(Way way) {
-               return way.hasTag("highway", "Motorway", "motorway");
-            }
-        },
-        TOLL(2) {
-            @Override
-            public boolean isValidForWay(Way way) {
-                return way.hasTag("toll", "yes");
-            }
-        },
-        Boulders(4) {
-            @Override
-            public boolean isValidForWay(Way way) {
-                return hasTag(way, "natural", "boulder");
-            }
-        },
-        Cliff(8) {
-            @Override
-            public boolean isValidForWay(Way way) {
-                return hasTag(way, "natural","cliff");
-            }
-        },
-        Marsh(16) {
-            @Override
-            public boolean isValidForWay(Way way) {
-                return way.hasTag("wetland", "marsh");
-            }
-        },
-        Mud(32) {
-            @Override
-            public boolean isValidForWay(Way way) {
-                return hasTag(way, "natural", "mud");
-            }
-        },
-        Sand(64) {
-            @Override
-            public boolean isValidForWay(Way way) {
-                return hasTag(way, "natural", "sand");
-            }
-        },
-        Scree(128) {
-            @Override
-            public boolean isValidForWay(Way way) {
-                return hasTag(way, "natural", "scree");
-            }
-        },
-        Shingle(256) {
-            @Override
-            public boolean isValidForWay(Way way) {
-                return hasTag(way, "natural", "shingle");
-            }
-        },
-        Spoil(512) {
-            @Override
-            public boolean isValidForWay(Way way) {
-                return hasTag(way, "natural", "spoil");
-            }
-        },
-        Rock(1024) {
-            @Override
-            public boolean isValidForWay(Way way) {
-                return hasTag(way, "natural", "rock");
-            }
-        },
-        TidalWater(2048) {
-            @Override
-            public boolean isValidForWay(Way way) {
-                return hasTag(way, "natural", "water")  && way.hasTag("tidal", "yes");
-            }
-        },
-        InlandWater(4096) {
-            @Override
-            public boolean isValidForWay(Way way) {
-                return hasTag(way, "natural", "water")  && way.hasTag("tidal", "no");
-            }
-        },
-        QuarryOrPit(8192) {
-            @Override
-            public boolean isValidForWay(Way way) {
-                return hasTag(way, "natural", "excavation");
-            }
-        };
-
-        private static boolean hasTag(Way way, String key, String value) {
-            String wayTag = way.getTag(key);
-            if(null!=wayTag) {
-                String[] values = wayTag.split(",");
-                for (String tvalue : values) {
-                    if (tvalue.equals(value)) {
-                        return true;
-                    }
-                }
-            }
-            return false;
-        }
-
-
-        private final long value;
-
-        private AvoidanceType( long value )
-        {
-            this.value = value;
-        }
-
-        public long getValue()
-        {
-            return value;
-        }
-
-        public boolean isValidForWay(Way way) {
-            return false;
-        }
-
-
-
-    }
-
-    public int defineWayBits(int shift) {
-        wayTypeEncoder = new EncodedValue("WayType", shift, 14, 1, 0, 16383, true);
-        shift += wayTypeEncoder.getBits();
-        return shift;
-    }
-
-    public long handleWayTags(Way way, long encoded) {
-        long avoidanceValue=0;
-
-        for (AvoidanceType aType: AvoidanceType.values()) {
-            if(aType.isValidForWay(way)) {
-                avoidanceValue += aType.getValue();
-            }
-        }
-        return wayTypeEncoder.setValue(encoded, avoidanceValue);
-    }
-
-    public InstructionAnnotation getAnnotation( long flags, Translation tr )
-    {
-        long wayType = wayTypeEncoder.getValue(flags);
-        String wayName = getWayName(wayType, tr);
-        return new InstructionAnnotation(0, wayName);
-    }
-
-    private String getWayName(long wayType, Translation tr) {
-        String wayName="";
-        for (AvoidanceType aType: AvoidanceType.values()) {
-            if ((wayType & aType.getValue()) == aType.getValue()) {
-                wayName += " ";
-                wayName += aType.name();
-            }
-        }
-
-        return wayName;
-    }
+	private EncodedValue wayTypeEncoder;
+
+	protected enum AvoidanceType {
+		Boulders(1) {
+			@Override
+			public boolean isValidForWay(Way way) {
+				return hasTag(way, "natural", "boulder");
+			}
+		},
+		Cliff(2) {
+			@Override
+			public boolean isValidForWay(Way way) {
+				return hasTag(way, "natural", "cliff");
+			}
+		},
+		InlandWater(4) {
+			@Override
+			public boolean isValidForWay(Way way) {
+				return hasTag(way, "natural", "water")
+						&& way.hasTag("tidal", "no");
+			}
+		},
+		Marsh(8) {
+			@Override
+			public boolean isValidForWay(Way way) {
+				return way.hasTag("wetland", "marsh");
+			}
+		},
+		QuarryOrPit(16) {
+			 @Override
+			 public boolean isValidForWay(Way way) {
+				 return hasTag(way, "natural", "excavation");
+			 }
+		},
+		Scree(32) {
+			@Override
+			public boolean isValidForWay(Way way) {
+				return hasTag(way, "natural", "scree");
+			}
+		},
+		Rock(64) {
+			@Override
+			public boolean isValidForWay(Way way) {
+				return hasTag(way, "natural", "rock");
+			}
+		}
+		,
+		Mud(128) {
+			@Override
+			public boolean isValidForWay(Way way) {
+				return hasTag(way, "natural", "mud");
+			}
+		},
+		Sand(256) {
+			@Override
+			public boolean isValidForWay(Way way) {
+				return hasTag(way, "natural", "sand");
+			}
+		},
+		
+		Shingle(512) {
+			@Override
+			public boolean isValidForWay(Way way) {
+				return hasTag(way, "natural", "shingle");
+			}
+		}
+//		,
+//		Spoil(1024) {
+//			@Override
+//			public boolean isValidForWay(Way way) {
+//				return hasTag(way, "natural", "spoil");
+//			}
+//		},
+//		
+//		TidalWater(2048) {
+//			@Override
+//			public boolean isValidForWay(Way way) {
+//				return hasTag(way, "natural", "water")
+//						&& way.hasTag("tidal", "yes");
+//			}
+//		}
+	;
+
+		private static boolean hasTag(Way way, String key, String value) {
+			String wayTag = way.getTag(key);
+			if (null != wayTag) {
+				String[] values = wayTag.split(",");
+				for (String tvalue : values) {
+					if (tvalue.equals(value)) {
+						return true;
+					}
+				}
+			}
+			return false;
+		}
+
+		private final long value;
+
+		private AvoidanceType(long value) {
+			this.value = value;
+		}
+
+		public long getValue() {
+			return value;
+		}
+
+		public boolean isValidForWay(Way way) {
+			return false;
+		}
+
+	}
+
+	public int defineWayBits(int shift) {
+		wayTypeEncoder = new EncodedValue("WayType", shift, 11, 1, 0, 1024,
+				true);
+		shift += wayTypeEncoder.getBits();
+		return shift;
+	}
+
+	public long handleWayTags(Way way, long encoded) {
+		long avoidanceValue = 0;
+
+		for (AvoidanceType aType : AvoidanceType.values()) {
+			if (aType.isValidForWay(way)) {
+				avoidanceValue += aType.getValue();
+			}
+		}
+		return wayTypeEncoder.setValue(encoded, avoidanceValue);
+	}
+
+	public InstructionAnnotation getAnnotation(long flags, Translation tr) {
+		long wayType = wayTypeEncoder.getValue(flags);
+		String wayName = getWayName(wayType, tr);
+		return new InstructionAnnotation(1, wayName);
+	}
+
+	private String getWayName(long wayType, Translation tr) {
+		String wayName = "";
+		for (AvoidanceType aType : AvoidanceType.values()) {
+			if ((wayType & aType.getValue()) == aType.getValue()) {
+				wayName += " ";
+				wayName += aType.name();
+			}
+		}
+
+		return wayName;
+	}
 
 }
diff --git a/core/src/main/java/com/graphhopper/routing/util/OsCarFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/OsCarFlagEncoder.java
index 327c3de2ce..c192d8b539 100644
--- a/core/src/main/java/com/graphhopper/routing/util/OsCarFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/OsCarFlagEncoder.java
@@ -23,7 +23,7 @@ private void setOsAvoidanceDecorator() {
 		if (null == encoderDecorators) {
 			encoderDecorators = new ArrayList<EncoderDecorator>(2);
 		}
-		encoderDecorators.add(new OsAvoidanceDecorator());
+		encoderDecorators.add(new OsVehicleAvoidanceDecorator());
 	}
 
 }
diff --git a/core/src/main/java/com/graphhopper/routing/util/OsVehicleAvoidanceDecorator.java b/core/src/main/java/com/graphhopper/routing/util/OsVehicleAvoidanceDecorator.java
new file mode 100644
index 0000000000..6bfa8bd75a
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/routing/util/OsVehicleAvoidanceDecorator.java
@@ -0,0 +1,86 @@
+package com.graphhopper.routing.util;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.util.InstructionAnnotation;
+import com.graphhopper.util.Translation;
+
+/**
+ * Created by sadam on 4/15/15.
+ */
+public class OsVehicleAvoidanceDecorator implements EncoderDecorator {
+    private EncodedValue wayTypeEncoder;
+
+
+    protected enum AvoidanceType
+    {
+        MOTORWAYS(1) {
+            @Override
+            public boolean isValidForWay(Way way) {
+               return way.hasTag("highway", "Motorway", "motorway");
+            }
+        },
+        TOLL(2) {
+            @Override
+            public boolean isValidForWay(Way way) {
+                return way.hasTag("toll", "yes");
+            }
+        };
+
+
+        private final long value;
+
+        private AvoidanceType( long value )
+        {
+            this.value = value;
+        }
+
+        public long getValue()
+        {
+            return value;
+        }
+
+        public boolean isValidForWay(Way way) {
+            return false;
+        }
+
+
+
+    }
+
+    public int defineWayBits(int shift) {
+        wayTypeEncoder = new EncodedValue("WayType", shift, 3, 1, 0, 4, true);
+        shift += wayTypeEncoder.getBits();
+        return shift;
+    }
+
+    public long handleWayTags(Way way, long encoded) {
+        long avoidanceValue=0;
+
+        for (AvoidanceType aType: AvoidanceType.values()) {
+            if(aType.isValidForWay(way)) {
+                avoidanceValue += aType.getValue();
+            }
+        }
+        return wayTypeEncoder.setValue(encoded, avoidanceValue);
+    }
+
+    public InstructionAnnotation getAnnotation( long flags, Translation tr )
+    {
+        long wayType = wayTypeEncoder.getValue(flags);
+        String wayName = getWayName(wayType, tr);
+        return new InstructionAnnotation(0, wayName);
+    }
+
+    private String getWayName(long wayType, Translation tr) {
+        String wayName="";
+        for (AvoidanceType aType: AvoidanceType.values()) {
+            if ((wayType & aType.getValue()) == aType.getValue()) {
+                wayName += " ";
+                wayName += aType.name();
+            }
+        }
+
+        return wayName;
+    }
+
+}
diff --git a/core/src/test/java/com/graphhopper/routing/util/OsAvoidanceDecoratorTest.java b/core/src/test/java/com/graphhopper/routing/util/OsAvoidanceDecoratorTest.java
index ed574bab36..3a705ceb12 100644
--- a/core/src/test/java/com/graphhopper/routing/util/OsAvoidanceDecoratorTest.java
+++ b/core/src/test/java/com/graphhopper/routing/util/OsAvoidanceDecoratorTest.java
@@ -17,27 +17,6 @@ public void defineWayBits() {
         osAvoidances.defineWayBits(0);
     }
 
-    @Test
-    public void testMotorwayAttributeStorage() {
-        Way way = new OSITNWay(1L);
-        way.setTag("highway", "motorway");
-        long wayFlag = osAvoidances.handleWayTags(way,0);
-        assertEquals(OsAvoidanceDecorator.AvoidanceType.MOTORWAYS.getValue(), wayFlag);
-        way.setTag("highway", "Motorway");
-        wayFlag = osAvoidances.handleWayTags(way,0);
-        assertEquals(OsAvoidanceDecorator.AvoidanceType.MOTORWAYS.getValue(), wayFlag);
-
-    }
-
-    @Test
-    public void testTollAttributeStorage() {
-        Way way = new OSITNWay(1L);
-        way.setTag("toll", "yes");
-        long wayFlag = osAvoidances.handleWayTags(way,0);
-        assertEquals(OsAvoidanceDecorator.AvoidanceType.TOLL.getValue(), wayFlag);
-
-    }
-
     @Test
     public void testBoulderAttributeStorage() {
         Way way = new OSITNWay(1L);
@@ -65,23 +44,23 @@ public void testMarshAttributeStorage() {
 
     }
 
-    @Test
-    public void testMudAttributeStorage() {
-        Way way = new OSITNWay(1L);
-        way.setTag("natural", "mud");
-        long wayFlag = osAvoidances.handleWayTags(way,0);
-        assertEquals(OsAvoidanceDecorator.AvoidanceType.Mud.getValue(), wayFlag);
-
-    }
+//    @Test
+//    public void testMudAttributeStorage() {
+//        Way way = new OSITNWay(1L);
+//        way.setTag("natural", "mud");
+//        long wayFlag = osAvoidances.handleWayTags(way,0);
+//        assertEquals(OsAvoidanceDecorator.AvoidanceType.Mud.getValue(), wayFlag);
+//
+//    }
 
-    @Test
-    public void testSandAttributeStorage() {
-        Way way = new OSITNWay(1L);
-        way.setTag("natural", "sand");
-        long wayFlag = osAvoidances.handleWayTags(way,0);
-        assertEquals(OsAvoidanceDecorator.AvoidanceType.Sand.getValue(), wayFlag);
-
-    }
+//    @Test
+//    public void testSandAttributeStorage() {
+//        Way way = new OSITNWay(1L);
+//        way.setTag("natural", "sand");
+//        long wayFlag = osAvoidances.handleWayTags(way,0);
+//        assertEquals(OsAvoidanceDecorator.AvoidanceType.Sand.getValue(), wayFlag);
+//
+//    }
 
     @Test
     public void testScreeAttributeStorage() {
@@ -92,35 +71,35 @@ public void testScreeAttributeStorage() {
 
     }
 
-    @Test
-    public void testShingleAttributeStorage() {
-        Way way = new OSITNWay(1L);
-        way.setTag("natural", "shingle");
-        long wayFlag = osAvoidances.handleWayTags(way,0);
-        assertEquals(OsAvoidanceDecorator.AvoidanceType.Shingle.getValue(), wayFlag);
-
-    }
-
-    @Test
-    public void testSpoilAttributeStorage() {
-        Way way = new OSITNWay(1L);
-        way.setTag("natural", "spoil");
-        long wayFlag = osAvoidances.handleWayTags(way,0);
-        assertEquals(OsAvoidanceDecorator.AvoidanceType.Spoil.getValue(), wayFlag);
-
-    }
-
-    @Test
-    public void testTidalWaterAttributeStorage() {
-        Way way = new OSITNWay(1L);
-        way.setTag("natural", "water");
-        way.setTag("tidal", "yes");
-        long wayFlag = osAvoidances.handleWayTags(way,0);
-        assertEquals(OsAvoidanceDecorator.AvoidanceType.TidalWater.getValue(), wayFlag);
-
-    }
-
-    @Test
+//    @Test
+//    public void testShingleAttributeStorage() {
+//        Way way = new OSITNWay(1L);
+//        way.setTag("natural", "shingle");
+//        long wayFlag = osAvoidances.handleWayTags(way,0);
+//        assertEquals(OsAvoidanceDecorator.AvoidanceType.Shingle.getValue(), wayFlag);
+//
+//    }
+
+//    @Test
+//    public void testSpoilAttributeStorage() {
+//        Way way = new OSITNWay(1L);
+//        way.setTag("natural", "spoil");
+//        long wayFlag = osAvoidances.handleWayTags(way,0);
+//        assertEquals(OsAvoidanceDecorator.AvoidanceType.Spoil.getValue(), wayFlag);
+//
+//    }
+
+//    @Test
+//    public void testTidalWaterAttributeStorage() {
+//        Way way = new OSITNWay(1L);
+//        way.setTag("natural", "water");
+//        way.setTag("tidal", "yes");
+//        long wayFlag = osAvoidances.handleWayTags(way,0);
+//        assertEquals(OsAvoidanceDecorator.AvoidanceType.TidalWater.getValue(), wayFlag);
+//
+//    }
+
+   @Test
     public void testInlandWaterAttributeStorage() {
         Way way = new OSITNWay(1L);
         way.setTag("natural", "water");
@@ -142,36 +121,36 @@ public void testQuarryOrPitAttributeStorage() {
     @Test
     public void testMultiAttributeStorage() {
         Way way = new OSITNWay(1L);
-        way.setTag("highway", "motorway");
+        way.setTag("wetland", "marsh");
         way.setTag("natural", "excavation");
         long wayFlag = osAvoidances.handleWayTags(way,0);
         //BITMASK test?
-        assertEquals(OsAvoidanceDecorator.AvoidanceType.QuarryOrPit.getValue(), wayFlag - OsAvoidanceDecorator.AvoidanceType.MOTORWAYS.getValue());
-        assertEquals(OsAvoidanceDecorator.AvoidanceType.MOTORWAYS.getValue(), wayFlag  - OsAvoidanceDecorator.AvoidanceType.QuarryOrPit.getValue() );
+        assertEquals(OsAvoidanceDecorator.AvoidanceType.QuarryOrPit.getValue(), wayFlag - OsAvoidanceDecorator.AvoidanceType.Marsh.getValue());
+        assertEquals(OsAvoidanceDecorator.AvoidanceType.Marsh.getValue(), wayFlag  - OsAvoidanceDecorator.AvoidanceType.QuarryOrPit.getValue() );
 
     }
 
     @Test
     public void testMultiEqualAttributeStorage() {
         Way way = new OSITNWay(1L);
-        way.setTag("natural", "sand,excavation");
+        way.setTag("natural", "scree,excavation");
         long wayFlag = osAvoidances.handleWayTags(way,0);
         //BITMASK test?
-        assertEquals(OsAvoidanceDecorator.AvoidanceType.QuarryOrPit.getValue(), wayFlag - OsAvoidanceDecorator.AvoidanceType.Sand.getValue());
-        assertEquals(OsAvoidanceDecorator.AvoidanceType.Sand.getValue(), wayFlag  - OsAvoidanceDecorator.AvoidanceType.QuarryOrPit.getValue() );
+        assertEquals(OsAvoidanceDecorator.AvoidanceType.QuarryOrPit.getValue(), wayFlag - OsAvoidanceDecorator.AvoidanceType.Scree.getValue());
+        assertEquals(OsAvoidanceDecorator.AvoidanceType.Scree.getValue(), wayFlag  - OsAvoidanceDecorator.AvoidanceType.QuarryOrPit.getValue() );
 
     }
 
     @Test
     public void testMultiEqualAttributeRetrieval() {
         Way way = new OSITNWay(1L);
-        way.setTag("natural", "sand,excavation");
+        way.setTag("natural", "scree,excavation");
         long wayFlag = osAvoidances.handleWayTags(way,0);
         //BITMASK test?
-        assertEquals(OsAvoidanceDecorator.AvoidanceType.QuarryOrPit.getValue(), wayFlag - OsAvoidanceDecorator.AvoidanceType.Sand.getValue());
-        assertEquals(OsAvoidanceDecorator.AvoidanceType.Sand.getValue(), wayFlag  - OsAvoidanceDecorator.AvoidanceType.QuarryOrPit.getValue() );
+        assertEquals(OsAvoidanceDecorator.AvoidanceType.QuarryOrPit.getValue(), wayFlag - OsAvoidanceDecorator.AvoidanceType.Scree.getValue());
+        assertEquals(OsAvoidanceDecorator.AvoidanceType.Scree.getValue(), wayFlag  - OsAvoidanceDecorator.AvoidanceType.QuarryOrPit.getValue() );
         InstructionAnnotation annotation = osAvoidances.getAnnotation(wayFlag, null);
-        assertEquals(" Sand QuarryOrPit", annotation.getMessage());
+        assertEquals(" QuarryOrPit Scree", annotation.getMessage());
     }
 
 }
\ No newline at end of file
diff --git a/core/src/test/java/com/graphhopper/routing/util/OsVehicleAvoidanceDecoratorTest.java b/core/src/test/java/com/graphhopper/routing/util/OsVehicleAvoidanceDecoratorTest.java
new file mode 100644
index 0000000000..ab48284645
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/routing/util/OsVehicleAvoidanceDecoratorTest.java
@@ -0,0 +1,53 @@
+package com.graphhopper.routing.util;
+
+import static org.junit.Assert.assertEquals;
+
+import org.junit.Before;
+import org.junit.Test;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.itn.OSITNWay;
+
+public class OsVehicleAvoidanceDecoratorTest {
+	OsVehicleAvoidanceDecorator osAvoidances = new OsVehicleAvoidanceDecorator();
+
+    @Before
+    public void defineWayBits() {
+        osAvoidances.defineWayBits(0);
+    }
+
+    @Test
+    public void testMotorwayAttributeStorage() {
+        Way way = new OSITNWay(1L);
+        way.setTag("highway", "motorway");
+        long wayFlag = osAvoidances.handleWayTags(way,0);
+        assertEquals(OsVehicleAvoidanceDecorator.AvoidanceType.MOTORWAYS.getValue(), wayFlag);
+        way.setTag("highway", "Motorway");
+        wayFlag = osAvoidances.handleWayTags(way,0);
+        assertEquals(OsVehicleAvoidanceDecorator.AvoidanceType.MOTORWAYS.getValue(), wayFlag);
+
+    }
+
+    @Test
+    public void testTollAttributeStorage() {
+        Way way = new OSITNWay(1L);
+        way.setTag("toll", "yes");
+        long wayFlag = osAvoidances.handleWayTags(way,0);
+        assertEquals(OsVehicleAvoidanceDecorator.AvoidanceType.TOLL.getValue(), wayFlag);
+
+    }
+
+
+    @Test
+    public void testMultiAttributeStorage() {
+        Way way = new OSITNWay(1L);
+        way.setTag("highway", "motorway");
+        way.setTag("toll", "yes");
+        long wayFlag = osAvoidances.handleWayTags(way,0);
+        //BITMASK test?
+        assertEquals(OsVehicleAvoidanceDecorator.AvoidanceType.TOLL.getValue(), wayFlag - OsVehicleAvoidanceDecorator.AvoidanceType.MOTORWAYS.getValue());
+        assertEquals(OsVehicleAvoidanceDecorator.AvoidanceType.MOTORWAYS.getValue(), wayFlag  - OsVehicleAvoidanceDecorator.AvoidanceType.TOLL.getValue() );
+
+    }
+
+}
\ No newline at end of file
