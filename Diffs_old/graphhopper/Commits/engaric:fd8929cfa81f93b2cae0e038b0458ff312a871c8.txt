diff --git a/core/src/main/java/com/graphhopper/util/shapes/GHPoint.java b/core/src/main/java/com/graphhopper/util/shapes/GHPoint.java
index 828720f5b3..feb28ffafa 100644
--- a/core/src/main/java/com/graphhopper/util/shapes/GHPoint.java
+++ b/core/src/main/java/com/graphhopper/util/shapes/GHPoint.java
@@ -17,6 +17,15 @@
  */
 package com.graphhopper.util.shapes;
 
+import org.geotools.referencing.CRS;
+import org.opengis.geometry.MismatchedDimensionException;
+import org.opengis.referencing.FactoryException;
+import org.opengis.referencing.crs.CoordinateReferenceSystem;
+import org.opengis.referencing.operation.TransformException;
+
+import uk.co.ordnancesurvey.api.srs.LatLong;
+import uk.co.ordnancesurvey.api.srs.OpenCoordConverter;
+
 import com.graphhopper.util.NumHelper;
 
 /**
@@ -24,6 +33,8 @@
  */
 public class GHPoint
 {
+	private static final String BNG = "bng";
+	private static final String WGS_84 = "EPSG:4326";
 	public double lat = Double.NaN;
 	public double lon = Double.NaN;
 
@@ -108,4 +119,31 @@ public static GHPoint parse( String str )
 		}
 		return null;
 	}
+
+	/**
+	 * 
+	 * @param string
+	 * @param srs  default is WGS_84 to match the non 
+	 * @return
+	 */
+	public static GHPoint parse( String str, String srs )
+    {
+	    if(srs.equalsIgnoreCase(WGS_84)) {
+	    	return parse(str);
+	    }
+	    try
+        {
+	    	String[] fromStrs = str.split(",");
+	    	double sourceXCoordinate = Double.parseDouble(fromStrs[0]);
+			double sourceYCoordinate = Double.parseDouble(fromStrs[1]);
+	        CoordinateReferenceSystem outputCRS = OpenCoordConverter.wgs84CoordRefSystem;
+	        CoordinateReferenceSystem inputCRS = srs.equals(BNG)||srs.equals(OpenCoordConverter.BNG_CRS_CODE)?OpenCoordConverter.bngCoordRefSystem:CRS.decode(srs);
+	        LatLong transformFromSourceCRSToTargetCRS = OpenCoordConverter.transformFromSourceCRSToTargetCRS(inputCRS, outputCRS, sourceXCoordinate, sourceYCoordinate, true);
+	        return new GHPoint(transformFromSourceCRSToTargetCRS.getLatAngle(), transformFromSourceCRSToTargetCRS.getLongAngle());
+        } catch (FactoryException | MismatchedDimensionException | TransformException e)
+        {
+        	// Fall through to return a null below
+        }
+	    return null;
+    }
 }
diff --git a/core/src/main/java/uk/co/ordnancesurvey/api/srs/OpenCoordConverter.java b/core/src/main/java/uk/co/ordnancesurvey/api/srs/OpenCoordConverter.java
index 9c10a11ac5..204bdb386d 100644
--- a/core/src/main/java/uk/co/ordnancesurvey/api/srs/OpenCoordConverter.java
+++ b/core/src/main/java/uk/co/ordnancesurvey/api/srs/OpenCoordConverter.java
@@ -16,12 +16,12 @@
  */
 public class OpenCoordConverter {
 	/* Coordinate reference systems */
-	private static CoordinateReferenceSystem bngCoordRefSystem;
-	private static CoordinateReferenceSystem wgs84CoordRefSystem;
+	public static CoordinateReferenceSystem bngCoordRefSystem;
+	public static CoordinateReferenceSystem wgs84CoordRefSystem;
 	
 	/* EPSG codes for coordinate reference systems */
-	private static final String BNG_CRS_CODE = "EPSG:27700";
-	private static final String WGS84_CRS_CODE = "EPSG:4326";
+	public static final String BNG_CRS_CODE = "EPSG:27700";
+	public static final String WGS84_CRS_CODE = "EPSG:4326";
 
 	static {
 		try {
@@ -82,7 +82,7 @@ public static LatLong toBNG(double wsg84Latitude, double wsg84Longitude)
 	 * @throws MismatchedDimensionException
 	 * @throws TransformException
 	 */
-	private static LatLong transformFromSourceCRSToTargetCRS(CoordinateReferenceSystem sourceCRS, CoordinateReferenceSystem targetCRS, 
+	public static LatLong transformFromSourceCRSToTargetCRS(CoordinateReferenceSystem sourceCRS, CoordinateReferenceSystem targetCRS, 
 			double sourceXCoordinate, double sourceyCoordinate, boolean lenient) throws FactoryException, MismatchedDimensionException, TransformException {
 		
 		if(null == sourceCRS || null == targetCRS) {
diff --git a/core/src/test/java/com/graphhopper/util/shapes/GHPointTest.java b/core/src/test/java/com/graphhopper/util/shapes/GHPointTest.java
index 6adac39794..04ec69024a 100644
--- a/core/src/test/java/com/graphhopper/util/shapes/GHPointTest.java
+++ b/core/src/test/java/com/graphhopper/util/shapes/GHPointTest.java
@@ -19,6 +19,7 @@
 package com.graphhopper.util.shapes;
 
 import org.junit.Test;
+
 import static org.junit.Assert.*;
 
 /**
@@ -27,7 +28,16 @@
  */
 public class GHPointTest
 {
-    @Test
+    private static final String EPSG_27700 = "EPSG:27700";
+    private static final String WGS_84 = "EPSG:4326";
+    private static final String BNG = "BNG";
+    
+    /* latitude of BNG easting = 0 in WGS84*/
+	private static final double LAT_ANGLE = 49.76680727257757;
+	/* longitude of BNG northing = 0 in WGS84*/
+	private static final double LON_ANGLE = -7.557159804822196;
+
+	@Test
     public void testIsValid()
     {
         GHPoint instance = new GHPoint();
@@ -37,4 +47,32 @@ public void testIsValid()
         instance.lon = 1;
         assertTrue(instance.isValid());
     }
+    
+    @Test
+    public void testParse() {
+    	GHPoint parsedPoint = GHPoint.parse("1,2");
+    	assertEquals(1, parsedPoint.getLat(), 0);
+    	assertEquals(2, parsedPoint.getLon(), 0);
+    }
+    
+    @Test
+    public void testParseWithSrsDefault() {
+    	GHPoint parsedPoint = GHPoint.parse("1,2", WGS_84.toLowerCase());
+    	assertEquals(1, parsedPoint.getLat(), 0);
+    	assertEquals(2, parsedPoint.getLon(), 0);
+    }
+    
+    @Test
+    public void testParseWithSrsEPSG27700() {
+    	GHPoint parsedPoint = GHPoint.parse("0,0", EPSG_27700.toLowerCase());
+    	assertEquals(LAT_ANGLE, parsedPoint.getLat(), 0);
+    	assertEquals(LON_ANGLE, parsedPoint.getLon(), 0);
+    }
+    
+    @Test
+    public void testParseWithSrsBNG() {
+    	GHPoint parsedPoint = GHPoint.parse("0,0", BNG.toLowerCase());
+    	assertEquals(LAT_ANGLE, parsedPoint.getLat(), 0);
+    	assertEquals(LON_ANGLE, parsedPoint.getLon(), 0);
+    }
 }
