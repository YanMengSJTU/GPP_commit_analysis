diff --git a/core/src/main/java/com/graphhopper/routing/template/PolygonThroughRoutingTemplate.java b/core/src/main/java/com/graphhopper/routing/template/PolygonThroughRoutingTemplate.java
index 3f7845fa12..d6eb560c2e 100644
--- a/core/src/main/java/com/graphhopper/routing/template/PolygonThroughRoutingTemplate.java
+++ b/core/src/main/java/com/graphhopper/routing/template/PolygonThroughRoutingTemplate.java
@@ -4,22 +4,27 @@
 import com.graphhopper.GHResponse;
 import com.graphhopper.routing.template.polygonRoutingUtil.*;
 import com.graphhopper.routing.util.EncodingManager;
+import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.storage.NodeAccess;
 import com.graphhopper.storage.index.LocationIndex;
 import com.graphhopper.storage.index.QueryResult;
 import com.graphhopper.util.EdgeExplorer;
 import com.graphhopper.util.EdgeIterator;
 import com.graphhopper.util.shapes.BBox;
+import com.graphhopper.util.shapes.GHPoint;
 import com.graphhopper.util.shapes.Polygon;
 
 import java.util.*;
 
 public class PolygonThroughRoutingTemplate extends PolygonRoutingTemplate {
     private ManyToManyRouting pathSkeletonRouter;
+    private final FlagEncoder flagEncoder;
 
     public PolygonThroughRoutingTemplate(GHRequest ghRequest, GHResponse ghRsp, LocationIndex locationIndex,
                                          EncodingManager encodingManager) {
         super(ghRequest, ghRsp, locationIndex, encodingManager);
+
+        this.flagEncoder = encodingManager.getEncoder(ghRequest.getVehicle());
     }
 
     protected void findCandidateRoutes() {
@@ -27,14 +32,34 @@ protected void findCandidateRoutes() {
         final List<Integer> polygonEntryExitPoints = findPolygonEntryExitPoints(nodesInPolygon);
         final List<Integer> viaPointNodeIds = this.extractNodeIdsFromQueryResults();
         final LOTNodeExtractor LOTNodes = LOTNodeExtractor.createExtractedData(this.graph, this.algoFactory, this.algorithmOptions, viaPointNodeIds, polygonEntryExitPoints);
-        this.pathSkeletonRouter = new ManyToManyRouting(nodesInPolygon, polygonEntryExitPoints, this.graph, this.algoFactory, this.algorithmOptions);
+        final List<QueryResult> queryResults = createQueryResults(polygonEntryExitPoints, flagEncoder);
+        this.pathSkeletonRouter = new ManyToManyRouting(nodesInPolygon, polygonEntryExitPoints, this.graph, queryResults, this.algoFactory, this.algorithmOptions);
         this.pathSkeletonRouter.findPathBetweenAllNodePairs();
 
 
-        for (final int viaPointNodeId : viaPointNodeIds) {
+        for (int i = 0; i < viaPointNodeIds.size() - 1; i++) {
+            final int viaPointNodeId = viaPointNodeIds.get(i);
             buildRouteCandidatesForCurrentPoint(LOTNodes.getLotNodesFor(viaPointNodeId));
         }
+    }
+
+    private List<QueryResult> createQueryResults(final List<Integer> nodes, final FlagEncoder flagEncoder) {
+        final List<GHPoint> points = nodeIdsToGhPoints(nodes);
+
+        return this.lookup(points, flagEncoder);
+    }
+
+    private List<GHPoint> nodeIdsToGhPoints(List<Integer> nodes) {
+        final List<GHPoint> points = new ArrayList<>(nodes.size());
+        final NodeAccess nodeAccess = this.graph.getNodeAccess();
 
+        for (final int node : nodes) {
+            final double latitude = nodeAccess.getLatitude(node);
+            final double longitude = nodeAccess.getLongitude(node);
+
+            points.add(new GHPoint(latitude, longitude));
+        }
+        return points;
     }
 
     private List<Integer> extractNodeIdsFromQueryResults() {
diff --git a/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/ManyToManyRouting.java b/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/ManyToManyRouting.java
index 4541b2ae7a..9f24d02719 100644
--- a/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/ManyToManyRouting.java
+++ b/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/ManyToManyRouting.java
@@ -4,8 +4,10 @@
 import com.graphhopper.routing.QueryGraph;
 import com.graphhopper.routing.RoutingAlgorithmFactory;
 import com.graphhopper.routing.template.util.QueryGraphCreator;
+import com.graphhopper.routing.util.EdgeFilter;
 import com.graphhopper.storage.Graph;
-import com.graphhopper.storage.GraphHopperStorage;
+import com.graphhopper.storage.index.LocationIndex;
+import com.graphhopper.storage.index.QueryResult;
 
 import java.util.List;
 
@@ -17,19 +19,20 @@
     private final RoutingAlgorithmFactory routingAlgorithmFactory;
     private final AlgorithmOptions algorithmOptions;
 
-    public ManyToManyRouting(final List<Integer> nodesToConsiderForRouting, final List<Integer> nodesToBuildRoutesWith,
-                             Graph graph, RoutingAlgorithmFactory routingAlgorithmFactory, AlgorithmOptions algorithmOptions) {
+    public ManyToManyRouting(final List<Integer> nodesToConsiderForRouting, final List<Integer> nodesToBuildRoutesWith, final Graph graph, final List<QueryResult> queryResults,
+                             final RoutingAlgorithmFactory routingAlgorithmFactory, final AlgorithmOptions algorithmOptions) {
         this.nodesToConsiderForRouting = nodesToConsiderForRouting;
         this.nodesToBuildRoutesWith = nodesToBuildRoutesWith;
         this.graph = graph;
-        this.queryGraph = prepareQueryGraph();
+        this.queryGraph = prepareQueryGraph(queryResults);
         this.routingAlgorithmFactory = routingAlgorithmFactory;
         this.algorithmOptions = algorithmOptions;
     }
 
-    private QueryGraph prepareQueryGraph() {
-        final QueryGraphCreator queryGraphCreator = new QueryGraphCreator(this.graph, this.nodesToBuildRoutesWith);
-        return queryGraphCreator.createQueryGraph();
+    private QueryGraph prepareQueryGraph(final List<QueryResult> queryResults) {
+        final QueryGraph queryGraph = new QueryGraph(this.graph);
+        queryGraph.lookup(queryResults);
+        return queryGraph;
     }
 
     void calculatePaths() {
diff --git a/core/src/main/java/com/graphhopper/routing/template/util/QueryGraphCreator.java b/core/src/main/java/com/graphhopper/routing/template/util/QueryGraphCreator.java
index bcdce58cf2..4a41ba5539 100644
--- a/core/src/main/java/com/graphhopper/routing/template/util/QueryGraphCreator.java
+++ b/core/src/main/java/com/graphhopper/routing/template/util/QueryGraphCreator.java
@@ -29,24 +29,25 @@ public QueryGraph createQueryGraph() {
         return queryGraph;
     }
 
-    private List<QueryResult> getQueryResults() {
+    public List<QueryResult> getQueryResults() {
         final List<QueryResult> queryResults = new ArrayList<>(this.nodesToLookup.size());
 
         for (final int node : this.nodesToLookup) {
             final double latitude = this.graph.getNodeAccess().getLatitude(node);
             final double longitude = this.graph.getNodeAccess().getLongitude(node);
 
-            QueryResult queryResult = createQueryReult(node, latitude, longitude);
+            QueryResult queryResult = createQueryResult(node, latitude, longitude);
             queryResults.add(queryResult);
         }
         return queryResults;
     }
 
-    private QueryResult createQueryReult(int node, double latitude, double longitude) {
+    private QueryResult createQueryResult(int node, double latitude, double longitude) {
         QueryResult queryResult = new QueryResult(latitude, longitude);
         queryResult.setClosestNode(node);
         queryResult.setWayIndex(0);
         queryResult.setClosestEdge(findClosestEdge(node));
+
         queryResult.calcSnappedPoint(new DistanceCalc2D());
         return queryResult;
     }
diff --git a/core/src/test/java/com/graphhopper/routing/template/polygonRoutingUtil/ManyToManyRoutingTest.java b/core/src/test/java/com/graphhopper/routing/template/polygonRoutingUtil/ManyToManyRoutingTest.java
index 9d0cc8df90..40d4fc3daa 100644
--- a/core/src/test/java/com/graphhopper/routing/template/polygonRoutingUtil/ManyToManyRoutingTest.java
+++ b/core/src/test/java/com/graphhopper/routing/template/polygonRoutingUtil/ManyToManyRoutingTest.java
@@ -4,6 +4,9 @@
 import com.graphhopper.routing.RoutingAlgorithmFactory;
 import com.graphhopper.routing.RoutingAlgorithmFactorySimple;
 import com.graphhopper.routing.template.util.PolygonRoutingTestGraph;
+import com.graphhopper.routing.template.util.QueryGraphCreator;
+import com.graphhopper.storage.Graph;
+import com.graphhopper.storage.index.QueryResult;
 import org.junit.Before;
 import org.junit.Test;
 
@@ -21,11 +24,19 @@ public void setUp() {
         final List<Integer> nodesToConsiderForRouting = OneToManyRoutingTest.prepareInteriorGraph();
         final RoutingAlgorithmFactory routingAlgorithmFactory = new RoutingAlgorithmFactorySimple();
         final AlgorithmOptions algorithmOptions = this.graphMocker.algorithmOptions;
+        final List<QueryResult> queryResults = this.createQueryResults(this.graphMocker.graph, sourceDestinations);
 
-        this.manyToManyRouting = new ManyToManyRouting(nodesToConsiderForRouting, sourceDestinations, this.graphMocker.graph, routingAlgorithmFactory, algorithmOptions);
+        this.manyToManyRouting = new ManyToManyRouting(nodesToConsiderForRouting, sourceDestinations, this.graphMocker.graph, queryResults, routingAlgorithmFactory,
+                                                       algorithmOptions);
         this.manyToManyRouting.findPathBetweenAllNodePairs();
     }
 
+    private List<QueryResult> createQueryResults(final Graph graph, final List<Integer> nodesToLookup) {
+        final QueryGraphCreator queryGraphCreator = new QueryGraphCreator(graph, nodesToLookup);
+
+        return queryGraphCreator.getQueryResults();
+    }
+
     private List<Integer> prepareSourceDestination() {
         return new ArrayList<>(Arrays.asList(new Integer[] {28, 29, 30, 32, 40}));
     }
diff --git a/core/src/test/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidateListTest.java b/core/src/test/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidateListTest.java
index a9ea46d23d..75b8734fe2 100644
--- a/core/src/test/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidateListTest.java
+++ b/core/src/test/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidateListTest.java
@@ -20,7 +20,7 @@
 public class RouteCandidateListTest {
     private final PolygonRoutingTestGraph graphMocker = new PolygonRoutingTestGraph();
     private final RouteCandidateList<RouteCandidateMocker> candidateList = new RouteCandidateList<>();
-    private final GHRequest ghRequest = new GHRequest(0, 0, 10, 10).setPolygon(new Polygon(new double [] {5, 10, 10, 5}, new double [] {5, 5, 10, 10}));
+    private final GHRequest ghRequest = new GHRequest(0, 0, 10, 10).setPolygon(new Polygon(new double [] {5, 10, 10, 5}, new double [] {5, 5, 10, 10})).setVehicle("car");
     private final PolygonThroughRoutingTemplate routingTemplate = new PolygonThroughRoutingTemplate(ghRequest, null, graphMocker.locationIndex,
                                                                                                     graphMocker.encodingManager);
 
diff --git a/core/src/test/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidateTest.java b/core/src/test/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidateTest.java
index d431ffa17a..7c230053c0 100644
--- a/core/src/test/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidateTest.java
+++ b/core/src/test/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidateTest.java
@@ -15,7 +15,7 @@
 import static org.junit.Assert.assertFalse;
 
 public class RouteCandidateTest {
-    private final GHRequest ghRequest = new GHRequest(0, 0, 10, 10).setPolygon(new Polygon(new double [] {5, 10, 10, 5}, new double [] {5, 5, 10, 10}));
+    private final GHRequest ghRequest = new GHRequest(0, 0, 10, 10).setPolygon(new Polygon(new double [] {5, 10, 10, 5}, new double [] {5, 5, 10, 10})).setVehicle("car");
     private final PolygonRoutingTestGraph graphMocker = new PolygonRoutingTestGraph();
     private final PolygonThroughRoutingTemplate routingTemplate = new PolygonThroughRoutingTemplate(ghRequest, null, graphMocker.locationIndex,
                                                                                                     graphMocker.encodingManager);
