diff --git a/web-bundle/src/main/java/com/graphhopper/resources/RouteResource.java b/web-bundle/src/main/java/com/graphhopper/resources/RouteResource.java
index ee339408c4..b61d2a422d 100644
--- a/web-bundle/src/main/java/com/graphhopper/resources/RouteResource.java
+++ b/web-bundle/src/main/java/com/graphhopper/resources/RouteResource.java
@@ -130,13 +130,18 @@ public Response doGet(
         }
     }
 
-    private Response buildOkResponse(@DefaultValue("true") @QueryParam(INSTRUCTIONS) boolean instructions, @DefaultValue("true") @QueryParam(CALC_POINTS) boolean calcPoints, @DefaultValue("false") @QueryParam("elevation") boolean enableElevation, @DefaultValue("true") @QueryParam("points_encoded") boolean pointsEncoded, GHResponse ghResponse, float took) {
+    private Response buildOkResponse(@DefaultValue("true") @QueryParam(INSTRUCTIONS) boolean instructions, @DefaultValue("true") @QueryParam(CALC_POINTS) boolean calcPoints,
+                                     @DefaultValue("false") @QueryParam("elevation") boolean enableElevation,
+                                     @DefaultValue("true") @QueryParam("points_encoded") boolean pointsEncoded, GHResponse ghResponse, float took) {
         return Response.ok(WebHelper.jsonObject(ghResponse, instructions, calcPoints, enableElevation, pointsEncoded, took)).
                 header("X-GH-Took", "" + Math.round(took * 1000)).
                 build();
     }
 
-    private Response buildGpxResponse(@DefaultValue("false") @QueryParam("elevation") boolean enableElevation, @DefaultValue("true") @QueryParam("gpx.route") boolean withRoute, @DefaultValue("true") @QueryParam("gpx.track") boolean withTrack, @DefaultValue("false") @QueryParam("gpx.waypoints") boolean withWayPoints, @DefaultValue("GraphHopper Track") @QueryParam("gpx.trackname") String trackName, @QueryParam("gpx.millis") String timeString, GHResponse ghResponse, float took) {
+    private Response buildGpxResponse(@DefaultValue("false") @QueryParam("elevation") boolean enableElevation, @DefaultValue("true") @QueryParam("gpx.route") boolean withRoute,
+                                      @DefaultValue("true") @QueryParam("gpx.track") boolean withTrack, @DefaultValue("false") @QueryParam("gpx.waypoints") boolean withWayPoints,
+                                      @DefaultValue("GraphHopper Track") @QueryParam("gpx.trackname") String trackName, @QueryParam("gpx.millis") String timeString,
+                                      GHResponse ghResponse, float took) {
         return gpxSuccessResponseBuilder(ghResponse, timeString, trackName, enableElevation, withRoute, withTrack, withWayPoints, Constants.VERSION).
                 header("X-GH-Took", "" + Math.round(took * 1000)).
                 build();
@@ -144,11 +149,11 @@ private Response buildGpxResponse(@DefaultValue("false") @QueryParam("elevation"
 
     private void addResponserelatedLogEntry(GHResponse ghResponse, String logStr) {
         logger.info(logStr + ", alternatives: " + ghResponse.getAll().size()
-                + ", distance0: " + ghResponse.getBest().getDistance()
-                + ", weight0: " + ghResponse.getBest().getRouteWeight()
-                + ", time0: " + Math.round(ghResponse.getBest().getTime() / 60000f) + "min"
-                + ", points0: " + ghResponse.getBest().getPoints().getSize()
-                + ", debugInfo: " + ghResponse.getDebugInfo());
+                    + ", distance0: " + ghResponse.getBest().getDistance()
+                    + ", weight0: " + ghResponse.getBest().getRouteWeight()
+                    + ", time0: " + Math.round(ghResponse.getBest().getTime() / 60000f) + "min"
+                    + ", points0: " + ghResponse.getBest().getPoints().getSize()
+                    + ", debugInfo: " + ghResponse.getDebugInfo());
     }
 
     private Response handleErroneousResponse(GHResponse ghResponse, String logStr) {
@@ -156,16 +161,23 @@ private Response handleErroneousResponse(GHResponse ghResponse, String logStr) {
         throw new MultiException(ghResponse.getErrors());
     }
 
-    private String buildLogString(@Context HttpServletRequest httpReq, @QueryParam("point") List<GHPoint> requestPoints, @DefaultValue("car") @QueryParam("vehicle") String vehicleStr, @DefaultValue("fastest") @QueryParam("weighting") String weighting, @DefaultValue("") @QueryParam("algorithm") String algoStr, float took, String infoStr) {
+    private String buildLogString(@Context HttpServletRequest httpReq, @QueryParam("point") List<GHPoint> requestPoints,
+                                  @DefaultValue("car") @QueryParam("vehicle") String vehicleStr, @DefaultValue("fastest") @QueryParam("weighting") String weighting,
+                                  @DefaultValue("") @QueryParam("algorithm") String algoStr, float took, String infoStr) {
         return httpReq.getQueryString() + " " + infoStr + " " + requestPoints + ", took:"
-                + took + ", " + algoStr + ", " + weighting + ", " + vehicleStr;
+               + took + ", " + algoStr + ", " + weighting + ", " + vehicleStr;
     }
 
     private String buildInfoString(@Context HttpServletRequest httpReq) {
         return httpReq.getRemoteAddr() + " " + httpReq.getLocale() + " " + httpReq.getHeader("User-Agent");
     }
 
-    private void setRequestParams(@DefaultValue("1") @QueryParam(WAY_POINT_MAX_DISTANCE) double minPathPrecision, @QueryParam("polygon") List<GHPoint> polygon, @DefaultValue("true") @QueryParam(INSTRUCTIONS) boolean instructions, @DefaultValue("true") @QueryParam(CALC_POINTS) boolean calcPoints, @DefaultValue("car") @QueryParam("vehicle") String vehicleStr, @DefaultValue("fastest") @QueryParam("weighting") String weighting, @DefaultValue("") @QueryParam("algorithm") String algoStr, @DefaultValue("en") @QueryParam("locale") String localeStr, @QueryParam(POINT_HINT) List<String> pointHints, @QueryParam(SNAP_PREVENTION) List<String> snapPreventions, @QueryParam(PATH_DETAILS) List<String> pathDetails, GHRequest request) {
+    private void setRequestParams(@DefaultValue("1") @QueryParam(WAY_POINT_MAX_DISTANCE) double minPathPrecision, @QueryParam("polygon") List<GHPoint> polygon,
+                                  @DefaultValue("true") @QueryParam(INSTRUCTIONS) boolean instructions, @DefaultValue("true") @QueryParam(CALC_POINTS) boolean calcPoints,
+                                  @DefaultValue("car") @QueryParam("vehicle") String vehicleStr, @DefaultValue("fastest") @QueryParam("weighting") String weighting,
+                                  @DefaultValue("") @QueryParam("algorithm") String algoStr, @DefaultValue("en") @QueryParam("locale") String localeStr,
+                                  @QueryParam(POINT_HINT) List<String> pointHints, @QueryParam(SNAP_PREVENTION) List<String> snapPreventions,
+                                  @QueryParam(PATH_DETAILS) List<String> pathDetails, GHRequest request) {
         request.setVehicle(vehicleStr).
                 setWeighting(weighting).
                 setAlgorithm(algoStr).
@@ -208,7 +220,8 @@ private GHRequest buildRequestIfFavoredHeadingsSizeIsOne(@QueryParam("point") Li
         return request;
     }
 
-    private void getRequestErrorHandling(@QueryParam("point") List<GHPoint> requestPoints, @DefaultValue("false") @QueryParam("elevation") boolean enableElevation, @QueryParam(POINT_HINT) List<String> pointHints, @QueryParam("heading") List<Double> favoredHeadings) {
+    private void getRequestErrorHandling(@QueryParam("point") List<GHPoint> requestPoints, @DefaultValue("false") @QueryParam("elevation") boolean enableElevation,
+                                         @QueryParam(POINT_HINT) List<String> pointHints, @QueryParam("heading") List<Double> favoredHeadings) {
         exceptionOnNoPointsRequested(requestPoints);
         exceptionOnElevationEnabledButNotPresent(enableElevation);
         exceptionOnWrongNumberOfHeadings(requestPoints, favoredHeadings);
@@ -216,24 +229,28 @@ private void getRequestErrorHandling(@QueryParam("point") List<GHPoint> requestP
     }
 
     private void exceptionOnWrongNumberOfPointHints(@QueryParam("point") List<GHPoint> requestPoints, @QueryParam(POINT_HINT) List<String> pointHints) {
-        if (pointHints.size() > 0 && pointHints.size() != requestPoints.size())
+        if (pointHints.size() > 0 && pointHints.size() != requestPoints.size()) {
             throw new IllegalArgumentException("If you pass " + POINT_HINT + ", you need to pass a hint for every point, empty hints will be ignored");
+        }
     }
 
     private void exceptionOnWrongNumberOfHeadings(@QueryParam("point") List<GHPoint> requestPoints, @QueryParam("heading") List<Double> favoredHeadings) {
-        if (favoredHeadings.size() > 1 && favoredHeadings.size() != requestPoints.size())
+        if (favoredHeadings.size() > 1 && favoredHeadings.size() != requestPoints.size()) {
             throw new IllegalArgumentException("The number of 'heading' parameters must be <= 1 "
-                    + "or equal to the number of points (" + requestPoints.size() + ")");
+                                               + "or equal to the number of points (" + requestPoints.size() + ")");
+        }
     }
 
     private void exceptionOnElevationEnabledButNotPresent(@QueryParam("elevation") @DefaultValue("false") boolean enableElevation) {
-        if (enableElevation && !hasElevation)
+        if (enableElevation && !hasElevation) {
             throw new IllegalArgumentException("Elevation not supported!");
+        }
     }
 
     private void exceptionOnNoPointsRequested(@QueryParam("point") List<GHPoint> requestPoints) {
-        if (requestPoints.isEmpty())
+        if (requestPoints.isEmpty()) {
             throw new IllegalArgumentException("You have to pass at least one point");
+        }
     }
 
     private static Response.ResponseBuilder gpxSuccessResponseBuilder(GHResponse ghRsp, String timeString, String
@@ -244,7 +261,8 @@ private void exceptionOnNoPointsRequested(@QueryParam("point") List<GHPoint> req
 
         long time = timeString != null ? Long.parseLong(timeString) : System.currentTimeMillis();
         InstructionList instructions = ghRsp.getBest().getInstructions();
-        return Response.ok(GpxFromInstructions.createGPX(instructions, trackName, time, enableElevation, withRoute, withTrack, withWayPoints, version, instructions.getTr()), "application/gpx+xml").
+        return Response.ok(GpxFromInstructions.createGPX(instructions, trackName, time, enableElevation, withRoute, withTrack, withWayPoints, version, instructions.getTr()),
+                           "application/gpx+xml").
                 header("Content-Disposition", "attachment;filename=" + "GraphHopper.gpx");
     }
 
