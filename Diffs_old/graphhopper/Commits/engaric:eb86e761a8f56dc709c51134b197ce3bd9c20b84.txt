diff --git a/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java b/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
index 3ff322d89b..7e9067b6ff 100644
--- a/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
+++ b/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
@@ -41,6 +41,7 @@
 import javax.xml.transform.dom.DOMSource;
 import javax.xml.transform.stream.StreamResult;
 
+import org.json.JSONException;
 import org.json.JSONObject;
 import org.w3c.dom.Document;
 import org.w3c.dom.Element;
@@ -74,359 +75,384 @@
  */
 public class GraphHopperServlet extends GHBaseServlet
 {
-	@Inject
-	private GraphHopper hopper;
-
-	@Named("internalErrorsAllowed")
-	private boolean internalErrorsAllowed;
-
-	@Override
-	public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes )
-			throws ServletException, IOException
-	{
-
-		boolean writeGPX = "gpx".equalsIgnoreCase(getParam(httpReq, "type", "json"));
-		double minPathPrecision = getDoubleParam(httpReq, "way_point_max_distance", 1d);
-		boolean enableInstructions = writeGPX || getBooleanParam(httpReq, "instructions", true);
-		boolean calcPoints = getBooleanParam(httpReq, "calc_points", true);
-		boolean enableElevation = getBooleanParam(httpReq, "elevation", false);
-		boolean pointsEncoded = getBooleanParam(httpReq, "points_encoded", true);
-
-		String vehicleStr = getParam(httpReq, "vehicle", null);
-		String weighting = getParam(httpReq, "weighting", "fastest");
-		String algoStr = getParam(httpReq, "algorithm", null);
-		String localeStr = getParam(httpReq, "locale", "en_GB").replace('-', '_');
-
-		StopWatch sw = new StopWatch().start();
-		GHResponse ghRsp = null;
-
-		String instructionsString = getParam(httpReq, "instructions", "true");
-		String pointsEncodedString = getParam(httpReq, "points_encoded", "true");
-		String calcPointsString = getParam(httpReq, "calc_points", "true");
-		String debugString = getParam(httpReq, "debug", "true");
-		String prettyString = getParam(httpReq, "pretty", "true");
-		String avoidancesString = getParam(httpReq, "avoidances", null);
-		List<GHPoint> infoPoints = null;
-		try
-		{
-			ApiResource.ROUTE.checkAllRequestParameters(httpReq);
-
-			infoPoints = getPoints(httpReq, "point");
-
-			// we can reduce the path length based on the maximum differences to the original
-			// coordinates
-
-			if (!new CaseInsensitiveStringListValidator()
-			.isValid(localeStr, TranslationMap.LOCALES))
-			{
-				String errMesg = buildErrorMessageString(localeStr, "locale",
-						TranslationMap.LOCALES);
-				ghRsp = new GHResponse()
-				.addError(new InvalidParameterException(errMesg.toString()));
-			} else if (null != algoStr
-					&& !new CaseInsensitiveStringListValidator().isValid(algoStr,
-							AlgorithmOptions.ASTAR, AlgorithmOptions.ASTAR_BI,
-							AlgorithmOptions.DIJKSTRA, AlgorithmOptions.DIJKSTRA_BI,
-							AlgorithmOptions.DIJKSTRA_ONE_TO_MANY))
-			{
-				String errMesg = buildErrorMessageString(algoStr, "algorithm",
-						AlgorithmOptions.ASTAR, AlgorithmOptions.ASTAR_BI,
-						AlgorithmOptions.DIJKSTRA, AlgorithmOptions.DIJKSTRA_BI,
-						AlgorithmOptions.DIJKSTRA_ONE_TO_MANY);
-				ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg));
-			} else if (!new BooleanValidator().isValid(instructionsString))
-			{
-				String errMesg = buildBooleanErrorMessageString(instructionsString, "instructions");
-				ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg));
-			} else if (!new BooleanValidator().isValid(pointsEncodedString))
-			{
-				String errMesg = buildBooleanErrorMessageString(pointsEncodedString,
-						"points_encoded");
-				ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg));
-			} else if (!new BooleanValidator().isValid(calcPointsString))
-			{
-				String errMesg = buildBooleanErrorMessageString(calcPointsString, "calc_points");
-				ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg));
-			} else if (!new BooleanValidator().isValid(debugString))
-			{
-				String errMesg = buildBooleanErrorMessageString(debugString, "debug");
-				ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg));
-			} else if (!new BooleanValidator().isValid(prettyString))
-			{
-				String errMesg = buildBooleanErrorMessageString(prettyString, "pretty");
-				ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg));
-			} else if (!hopper.getEncodingManager().supports(vehicleStr))
-			{
-				String supported = hopper.getGraph().getEncodingManager().toString();
-				String errMesg = String.format(
-						"Vehicle %s is not a valid vehicle. Valid vehicles are %s", vehicleStr,
-						supported);
-				ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg));
-			} else if (enableElevation && !hopper.hasElevation())
-			{
-				ghRsp = new GHResponse().addError(new InvalidParameterException(
-						"Elevation not supported!"));
-			} else
-			{
-				FlagEncoder algoVehicle = hopper.getEncodingManager().getEncoder(vehicleStr);
-
-				// Lots of lovely braces. I will tidy this up next week... promise!
-				if (avoidancesString != null)
-				{
-					List<String> allowedAvoidances = new ArrayList<>();
-					// Check Avoidances
-					if (algoVehicle instanceof AbstractFlagEncoder)
-					{
-						AbstractFlagEncoder abstractFlagEncoder = (AbstractFlagEncoder) algoVehicle;
-						List<EncoderDecorator> encoderDecorators = abstractFlagEncoder
-								.getEncoderDecorators();
-						if (encoderDecorators != null)
-						{
-							for (EncoderDecorator encoderDecorator : encoderDecorators)
-							{
-								if (encoderDecorator instanceof AbstractAvoidanceDecorator)
-								{
-									AbstractAvoidanceDecorator abstractAvoidanceDecorator = (AbstractAvoidanceDecorator) encoderDecorator;
-									allowedAvoidances.addAll(Arrays
-											.asList(abstractAvoidanceDecorator
-													.getEdgeAttributesOfInterestNames()));
-								}
-							}
-						}
-					}
-					String avoidanceArray[] = avoidancesString.split(",");
-					for (String avoidance : avoidanceArray)
-					{
-						if (!allowedAvoidances.contains(avoidance.trim()))
-						{
-							String errMesg = buildErrorMessageString(avoidance, "avoidances",
-									allowedAvoidances);
-							ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg
-									.toString()));
-						}
-					}
-				}
-
-				if (ghRsp == null)
-				{
-					GHRequest request = new GHRequest(infoPoints);
-
-					initHints(request, httpReq.getParameterMap());
-					request.setVehicle(algoVehicle.toString()).setWeighting(weighting)
-					.setAlgorithm(algoStr).setLocale(localeStr).getHints()
-					.put("calcPoints", calcPoints).put("instructions", enableInstructions)
-					.put("wayPointMaxDistance", minPathPrecision);
-					ghRsp = hopper.route(request);
-				}
-			}
-		} catch (NoSuchParameterException | MissingParameterException | InvalidParameterException e)
-		{
-			ghRsp = new GHResponse().addError(e);
-		}
-		float took = sw.stop().getSeconds();
-		String infoStr = httpReq.getRemoteAddr() + " " + httpReq.getLocale() + " "
-				+ httpReq.getHeader("User-Agent");
-		String logStr = httpReq.getQueryString() + " " + infoStr + " " + infoPoints + ", took:"
-				+ took + ", " + algoStr + ", " + weighting + ", " + vehicleStr;
-
-		if (ghRsp.hasErrors())
-			logger.error(logStr + ", errors:" + ghRsp.getErrors());
-		else
-			logger.info(logStr + ", distance: " + ghRsp.getDistance() + ", time:"
-					+ Math.round(ghRsp.getTime() / 60000f) + "min, points:"
-					+ ghRsp.getPoints().getSize() + ", debug - " + ghRsp.getDebugInfo());
-
-		if (writeGPX)
-		{
-			String xml = createGPXString(httpReq, httpRes, ghRsp);
-			if (ghRsp.hasErrors())
-			{
-				httpRes.setStatus(SC_BAD_REQUEST);
-				httpRes.getWriter().append(xml);
-			} else
-				writeResponse(httpRes, xml);
-		} else
-		{
-			String type = getParam(httpReq, "type", "json");
-			if (!"json".equalsIgnoreCase(type) || (!"jsonp".equalsIgnoreCase(type) && jsonpAllowed))
-			{
-				String errorMessage = type
-						+ " is not a valid value for parameter type. Valid values are ";
-				errorMessage += jsonpAllowed ? "JSON, GPX or JSONP." : "GPX or JSON.";
-				ghRsp.addError(new InvalidParameterException(errorMessage));
-			}
-			Map<String, Object> map = createJson(ghRsp, calcPoints, pointsEncoded, enableElevation,
-					enableInstructions);
-			Object infoMap = map.get("info");
-			if (infoMap != null)
-				((Map) infoMap).put("took", Math.round(took * 1000));
-
-			if (ghRsp.hasErrors())
-			{
-				writeJsonError(httpRes, SC_BAD_REQUEST, new JSONObject(map));
-			} else
-				writeJson(httpReq, httpRes, new JSONObject(map));
-		}
-	}
-
-	private String buildBooleanErrorMessageString( String paramValue, String paramName )
-	{
-		return buildErrorMessageString(paramValue, paramName,
-				Arrays.asList(new String[] { Boolean.TRUE.toString(), Boolean.FALSE.toString() }));
-	}
-
-	private String buildErrorMessageString( String paramValue, String paramName,
-			String... validValues )
-	{
-		return buildErrorMessageString(paramValue, paramName, Arrays.asList(validValues));
-	}
-
-	private String buildErrorMessageString( String paramValue, String paramName,
-			List<String> validValues )
-	{
-		StringBuilder errMesg = new StringBuilder(paramValue)
-		.append(" is not a valid value for parameter ").append(paramName)
-		.append(". Valid values are ");
-		for (int i = 0; i < validValues.size(); i++)
-		{
-			String validStr = validValues.get(i);
-			if (i == validValues.size() - 1)
-			{
-				errMesg.append(" or ");
-			}
-			errMesg.append(validStr);
-			if (i < validValues.size() - 2)
-			{
-				errMesg.append(", ");
-			}
-		}
-		return errMesg.toString();
-	}
-
-	protected String createGPXString( HttpServletRequest req, HttpServletResponse res,
-			GHResponse rsp )
-	{
-		boolean includeElevation = getBooleanParam(req, "elevation", false);
-		res.setCharacterEncoding("UTF-8");
-		res.setContentType("application/xml");
-		String trackName = getParam(req, "track", "GraphHopper Track");
-		res.setHeader("Content-Disposition", "inline; filename=\"" + "GraphHopper.xml\"");
-		long time = getLongParam(req, "millis", System.currentTimeMillis());
-		if (rsp.hasErrors())
-			return errorsToXML(rsp.getErrors());
-		else
-			return rsp.getInstructions().createGPX(trackName, time, includeElevation);
-	}
-
-	private String errorsToXML( List<Throwable> list )
-	{
-		try
-		{
-			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
-			DocumentBuilder builder = factory.newDocumentBuilder();
-			Document doc = builder.newDocument();
-			Element gpxElement = doc.createElement("gpx");
-			gpxElement.setAttribute("creator", "GraphHopper");
-			gpxElement.setAttribute("version", "1.1");
-			doc.appendChild(gpxElement);
-
-			Element mdElement = doc.createElement("metadata");
-			gpxElement.appendChild(mdElement);
-
-			Element extensionsElement = doc.createElement("extensions");
-			mdElement.appendChild(extensionsElement);
-
-			Element messageElement = doc.createElement("message");
-			extensionsElement.appendChild(messageElement);
-			messageElement.setTextContent(list.get(0).getMessage());
-
-			Element hintsElement = doc.createElement("hints");
-			extensionsElement.appendChild(hintsElement);
-
-			for (Throwable t : list)
-			{
-				Element error = doc.createElement("error");
-				hintsElement.appendChild(error);
-				error.setAttribute("message", t.getMessage());
-				if (internalErrorsAllowed)
-				{
-					error.setAttribute("details", t.getClass().getName());
-				}
-			}
-			TransformerFactory transformerFactory = TransformerFactory.newInstance();
-			Transformer transformer = transformerFactory.newTransformer();
-			StringWriter writer = new StringWriter();
-			transformer.transform(new DOMSource(doc), new StreamResult(writer));
-			return writer.toString();
-		} catch (Exception ex)
-		{
-			throw new RuntimeException(ex);
-		}
-	}
-
-	protected Map<String, Object> createJson( GHResponse rsp, boolean calcPoints,
-			boolean pointsEncoded, boolean includeElevation, boolean enableInstructions )
-			{
-		Map<String, Object> json = new HashMap<String, Object>();
-
-		if (rsp.hasErrors())
-		{
-			processResponseErrors(rsp, json, internalErrorsAllowed);
-		} else
-		{
-			Map<String, Object> jsonInfo = new HashMap<String, Object>();
-			json.put("info", jsonInfo);
-			// jsonInfo.put("copyrights", Arrays.asList("GraphHopper",
-			// "OpenStreetMap contributors"));
-			Map<String, Object> jsonPath = new HashMap<String, Object>();
-			jsonPath.put("distance", Helper.round(rsp.getDistance(), 3));
-			jsonPath.put("weight", Helper.round6(rsp.getDistance()));
-			jsonPath.put("time", rsp.getTime());
-
-			if (calcPoints)
-			{
-				jsonPath.put("points_encoded", pointsEncoded);
-
-				PointList points = rsp.getPoints();
-				if (points.getSize() >= 2)
-				{
-					BBox maxBounds = hopper.getGraph().getBounds();
-					BBox maxBounds2D = new BBox(maxBounds.minLon, maxBounds.maxLon,
-							maxBounds.minLat, maxBounds.maxLat);
-					jsonPath.put("bbox", rsp.calcRouteBBox(maxBounds2D).toGeoJson());
-				}
-
-				jsonPath.put("points", createPoints(points, pointsEncoded, includeElevation));
-
-				if (enableInstructions)
-				{
-					InstructionList instructions = rsp.getInstructions();
-					jsonPath.put("instructions", instructions.createJson());
-				}
-			}
-			json.put("paths", Collections.singletonList(jsonPath));
-		}
-		return json;
-			}
-
-	protected Object createPoints( PointList points, boolean pointsEncoded, boolean includeElevation )
-	{
-		if (pointsEncoded)
-			return WebHelper.encodePolyline(points, includeElevation);
-
-		Map<String, Object> jsonPoints = new HashMap<String, Object>();
-		jsonPoints.put("type", "LineString");
-		jsonPoints.put("coordinates", points.toGeoJson(includeElevation));
-		return jsonPoints;
-	}
-
-	protected void initHints( GHRequest request, Map<String, String[]> parameterMap )
-	{
-		WeightingMap m = request.getHints();
-		for (Entry<String, String[]> e : parameterMap.entrySet())
-		{
-			if (e.getValue().length == 1)
-				m.put(e.getKey(), e.getValue()[0]);
-		}
-	}
+    private static final long serialVersionUID = 1L;
+
+    @Inject
+    private GraphHopper hopper;
+
+    @Inject
+    @Named("internalErrorsAllowed")
+    private boolean internalErrorsAllowed;
+
+    @Override
+    public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes )
+            throws ServletException, IOException
+    {
+        getGHResponse(httpReq, httpRes);
+    }
+
+    public GHResponse getGHResponse( HttpServletRequest httpReq, HttpServletResponse httpRes )
+            throws JSONException, IOException
+    {
+        boolean writeGPX = "gpx".equalsIgnoreCase(getParam(httpReq, "type", "json"));
+        double minPathPrecision = getDoubleParam(httpReq, "way_point_max_distance", 1d);
+        boolean enableInstructions = writeGPX || getBooleanParam(httpReq, "instructions", true);
+        boolean calcPoints = getBooleanParam(httpReq, "calc_points", true);
+        boolean enableElevation = getBooleanParam(httpReq, "elevation", false);
+        boolean pointsEncoded = getBooleanParam(httpReq, "points_encoded", true);
+
+        String vehicleStr = getParam(httpReq, "vehicle", null);
+        String weighting = getParam(httpReq, "weighting", "fastest");
+        String algoStr = getParam(httpReq, "algorithm", null);
+        String localeStr = getParam(httpReq, "locale", "en").replace('-', '_');
+
+        StopWatch sw = new StopWatch().start();
+
+        String instructionsString = getParam(httpReq, "instructions", "true");
+        String pointsEncodedString = getParam(httpReq, "points_encoded", "true");
+        String calcPointsString = getParam(httpReq, "calc_points", "true");
+        String debugString = getParam(httpReq, "debug", "true");
+        String prettyString = getParam(httpReq, "pretty", "true");
+        String avoidancesString = getParam(httpReq, "avoidances", null);
+
+        GHResponse ghRsp = null;
+        List<GHPoint> infoPoints;
+
+        try
+        {
+            infoPoints = getPoints(httpReq, "point");
+        } catch (InvalidParameterException e)
+        {
+            return new GHResponse().addError(e);
+        }
+
+        try
+        {
+            ApiResource.ROUTE.checkAllRequestParameters(httpReq);
+
+            // we can reduce the path length based on the maximum differences to the original
+            // coordinates
+
+            if (!new CaseInsensitiveStringListValidator()
+                    .isValid(localeStr, TranslationMap.LOCALES))
+            {
+                String errMesg = buildErrorMessageString(localeStr, "locale",
+                        TranslationMap.LOCALES);
+                ghRsp = new GHResponse()
+                        .addError(new InvalidParameterException(errMesg.toString()));
+            } else if (null != algoStr
+                    && !new CaseInsensitiveStringListValidator().isValid(algoStr,
+                            AlgorithmOptions.ASTAR, AlgorithmOptions.ASTAR_BI,
+                            AlgorithmOptions.DIJKSTRA, AlgorithmOptions.DIJKSTRA_BI,
+                            AlgorithmOptions.DIJKSTRA_ONE_TO_MANY))
+            {
+                String errMesg = buildErrorMessageString(algoStr, "algorithm",
+                        AlgorithmOptions.ASTAR, AlgorithmOptions.ASTAR_BI,
+                        AlgorithmOptions.DIJKSTRA, AlgorithmOptions.DIJKSTRA_BI,
+                        AlgorithmOptions.DIJKSTRA_ONE_TO_MANY);
+                ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg));
+            } else if (!new BooleanValidator().isValid(instructionsString))
+            {
+                String errMesg = buildBooleanErrorMessageString(instructionsString, "instructions");
+                ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg));
+            } else if (!new BooleanValidator().isValid(pointsEncodedString))
+            {
+                String errMesg = buildBooleanErrorMessageString(pointsEncodedString,
+                        "points_encoded");
+                ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg));
+            } else if (!new BooleanValidator().isValid(calcPointsString))
+            {
+                String errMesg = buildBooleanErrorMessageString(calcPointsString, "calc_points");
+                ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg));
+            } else if (!new BooleanValidator().isValid(debugString))
+            {
+                String errMesg = buildBooleanErrorMessageString(debugString, "debug");
+                ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg));
+            } else if (!new BooleanValidator().isValid(prettyString))
+            {
+                String errMesg = buildBooleanErrorMessageString(prettyString, "pretty");
+                ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg));
+            } else if (!hopper.getEncodingManager().supports(vehicleStr))
+            {
+                String supported = hopper.getGraph().getEncodingManager().toString();
+                String errMesg = String.format(
+                        "Vehicle %s is not a valid vehicle. Valid vehicles are %s", vehicleStr,
+                        supported);
+                ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg));
+            } else if (enableElevation && !hopper.hasElevation())
+            {
+                ghRsp = new GHResponse().addError(new InvalidParameterException(
+                        "Elevation not supported!"));
+            } else
+            {
+                FlagEncoder algoVehicle = hopper.getEncodingManager().getEncoder(vehicleStr);
+
+                // Lots of lovely braces. I will tidy this up next week... promise!
+                if (avoidancesString != null)
+                {
+                    List<String> allowedAvoidances = new ArrayList<>();
+                    // Check Avoidances
+                    if (algoVehicle instanceof AbstractFlagEncoder)
+                    {
+                        AbstractFlagEncoder abstractFlagEncoder = (AbstractFlagEncoder) algoVehicle;
+                        List<EncoderDecorator> encoderDecorators = abstractFlagEncoder
+                                .getEncoderDecorators();
+                        if (encoderDecorators != null)
+                        {
+                            for (EncoderDecorator encoderDecorator : encoderDecorators)
+                            {
+                                if (encoderDecorator instanceof AbstractAvoidanceDecorator)
+                                {
+                                    AbstractAvoidanceDecorator abstractAvoidanceDecorator = (AbstractAvoidanceDecorator) encoderDecorator;
+                                    allowedAvoidances.addAll(Arrays
+                                            .asList(abstractAvoidanceDecorator
+                                                    .getEdgeAttributesOfInterestNames()));
+                                }
+                            }
+                        }
+                    }
+                    String avoidanceArray[] = avoidancesString.split(",");
+                    for (String avoidance : avoidanceArray)
+                    {
+                        if (!allowedAvoidances.contains(avoidance.trim()))
+                        {
+                            String errMesg = buildErrorMessageString(avoidance, "avoidances",
+                                    allowedAvoidances);
+                            ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg
+                                    .toString()));
+                        }
+                    }
+                }
+
+                if (ghRsp == null)
+                {
+                    GHRequest request = new GHRequest(infoPoints);
+
+                    initHints(request, httpReq.getParameterMap());
+                    request.setVehicle(algoVehicle.toString()).setWeighting(weighting)
+                            .setAlgorithm(algoStr).setLocale(localeStr).getHints()
+                            .put("calcPoints", calcPoints).put("instructions", enableInstructions)
+                            .put("wayPointMaxDistance", minPathPrecision);
+                    ghRsp = hopper.route(request);
+                }
+            }
+        } catch (NoSuchParameterException | MissingParameterException | InvalidParameterException e)
+        {
+            ghRsp = new GHResponse().addError(e);
+        } finally
+        {
+
+            float took = sw.stop().getSeconds();
+            String infoStr = httpReq.getRemoteAddr() + " " + httpReq.getLocale() + " "
+                    + httpReq.getHeader("User-Agent");
+            String logStr = httpReq.getQueryString() + " " + infoStr + " " + infoPoints + ", took:"
+                    + took + ", " + algoStr + ", " + weighting + ", " + vehicleStr;
+
+            if (ghRsp.hasErrors())
+                logger.error(logStr + ", errors:" + ghRsp.getErrors());
+            else
+                logger.info(logStr + ", distance: " + ghRsp.getDistance() + ", time:"
+                        + Math.round(ghRsp.getTime() / 60000f) + "min, points:"
+                        + ghRsp.getPoints().getSize() + ", debug - " + ghRsp.getDebugInfo());
+
+            if (writeGPX)
+            {
+                String xml = createGPXString(httpReq, httpRes, ghRsp);
+                if (ghRsp.hasErrors())
+                {
+                    httpRes.setStatus(SC_BAD_REQUEST);
+                    httpRes.getWriter().append(xml);
+                } else
+                    writeResponse(httpRes, xml);
+            } else
+            {
+                String type = getParam(httpReq, "type", "json");
+                if (!"json".equalsIgnoreCase(type)
+                        || (!"jsonp".equalsIgnoreCase(type) && jsonpAllowed))
+                {
+                    String errorMessage = type
+                            + " is not a valid value for parameter type. Valid values are ";
+                    errorMessage += jsonpAllowed ? "JSON, GPX or JSONP." : "GPX or JSON.";
+                    ghRsp.addError(new InvalidParameterException(errorMessage));
+                }
+                Map<String, Object> map = createJson(ghRsp, calcPoints, pointsEncoded,
+                        enableElevation, enableInstructions);
+                Object infoMap = map.get("info");
+                if (infoMap != null)
+                    ((Map) infoMap).put("took", Math.round(took * 1000));
+
+                if (ghRsp.hasErrors())
+                {
+                    writeJsonError(httpRes, SC_BAD_REQUEST, new JSONObject(map));
+                } else
+                    writeJson(httpReq, httpRes, new JSONObject(map));
+
+            }
+
+        }
+
+        return ghRsp;
+    }
+
+    private String buildBooleanErrorMessageString( String paramValue, String paramName )
+    {
+        return buildErrorMessageString(paramValue, paramName,
+                Arrays.asList(new String[] { Boolean.TRUE.toString(), Boolean.FALSE.toString() }));
+    }
+
+    private String buildErrorMessageString( String paramValue, String paramName,
+            String... validValues )
+    {
+        return buildErrorMessageString(paramValue, paramName, Arrays.asList(validValues));
+    }
+
+    private String buildErrorMessageString( String paramValue, String paramName,
+            List<String> validValues )
+    {
+        StringBuilder errMesg = new StringBuilder(paramValue)
+                .append(" is not a valid value for parameter ").append(paramName)
+                .append(". Valid values are ");
+        for (int i = 0; i < validValues.size(); i++)
+        {
+            String validStr = validValues.get(i);
+            if (i == validValues.size() - 1)
+            {
+                errMesg.append(" or ");
+            }
+            errMesg.append(validStr);
+            if (i < validValues.size() - 2)
+            {
+                errMesg.append(", ");
+            }
+        }
+        return errMesg.toString();
+    }
+
+    protected String createGPXString( HttpServletRequest req, HttpServletResponse res,
+            GHResponse rsp )
+    {
+        boolean includeElevation = getBooleanParam(req, "elevation", false);
+        res.setCharacterEncoding("UTF-8");
+        res.setContentType("application/xml");
+        String trackName = getParam(req, "track", "GraphHopper Track");
+        res.setHeader("Content-Disposition", "attachment;filename=" + "GraphHopper.gpx");
+        long time = getLongParam(req, "millis", System.currentTimeMillis());
+        if (rsp.hasErrors())
+            return errorsToXML(rsp.getErrors());
+        else
+            return rsp.getInstructions().createGPX(trackName, time, includeElevation);
+    }
+
+    private String errorsToXML( List<Throwable> list )
+    {
+        try
+        {
+            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
+            DocumentBuilder builder = factory.newDocumentBuilder();
+            Document doc = builder.newDocument();
+            Element gpxElement = doc.createElement("gpx");
+            gpxElement.setAttribute("creator", "GraphHopper");
+            gpxElement.setAttribute("version", "1.1");
+            doc.appendChild(gpxElement);
+
+            Element mdElement = doc.createElement("metadata");
+            gpxElement.appendChild(mdElement);
+
+            Element extensionsElement = doc.createElement("extensions");
+            mdElement.appendChild(extensionsElement);
+
+            Element messageElement = doc.createElement("message");
+            extensionsElement.appendChild(messageElement);
+            messageElement.setTextContent(list.get(0).getMessage());
+
+            Element hintsElement = doc.createElement("hints");
+            extensionsElement.appendChild(hintsElement);
+
+            for (Throwable t : list)
+            {
+                Element error = doc.createElement("error");
+                hintsElement.appendChild(error);
+                error.setAttribute("message", t.getMessage());
+                if (internalErrorsAllowed)
+                {
+                    error.setAttribute("details", t.getClass().getName());
+                }
+            }
+            TransformerFactory transformerFactory = TransformerFactory.newInstance();
+            Transformer transformer = transformerFactory.newTransformer();
+            StringWriter writer = new StringWriter();
+            transformer.transform(new DOMSource(doc), new StreamResult(writer));
+            return writer.toString();
+        } catch (Exception ex)
+        {
+            throw new RuntimeException(ex);
+        }
+    }
+
+    protected Map<String, Object> createJson( GHResponse rsp, boolean calcPoints,
+            boolean pointsEncoded, boolean includeElevation, boolean enableInstructions )
+    {
+        Map<String, Object> json = new HashMap<String, Object>();
+
+        if (rsp.hasErrors())
+        {
+            processResponseErrors(rsp, json, internalErrorsAllowed);
+
+        } else
+        {
+            Map<String, Object> jsonInfo = new HashMap<String, Object>();
+            json.put("info", jsonInfo);
+            // jsonInfo.put("copyrights", Arrays.asList("GraphHopper",
+            // "OpenStreetMap contributors"));
+            Map<String, Object> jsonPath = new HashMap<String, Object>();
+            jsonPath.put("distance", Helper.round(rsp.getDistance(), 3));
+            jsonPath.put("weight", Helper.round6(rsp.getDistance()));
+            jsonPath.put("time", rsp.getTime());
+
+            if (calcPoints)
+            {
+                jsonPath.put("points_encoded", pointsEncoded);
+
+                PointList points = rsp.getPoints();
+                if (points.getSize() >= 2)
+                {
+                    BBox maxBounds = hopper.getGraph().getBounds();
+                    BBox maxBounds2D = new BBox(maxBounds.minLon, maxBounds.maxLon,
+                            maxBounds.minLat, maxBounds.maxLat);
+                    jsonPath.put("bbox", rsp.calcRouteBBox(maxBounds2D).toGeoJson());
+                }
+
+                jsonPath.put("points", createPoints(points, pointsEncoded, includeElevation));
+
+                if (enableInstructions)
+                {
+                    InstructionList instructions = rsp.getInstructions();
+                    jsonPath.put("instructions", instructions.createJson());
+                }
+            }
+            json.put("paths", Collections.singletonList(jsonPath));
+        }
+        return json;
+    }
+
+    protected Object createPoints( PointList points, boolean pointsEncoded, boolean includeElevation )
+    {
+        if (pointsEncoded)
+            return WebHelper.encodePolyline(points, includeElevation);
+
+        Map<String, Object> jsonPoints = new HashMap<String, Object>();
+        jsonPoints.put("type", "LineString");
+        jsonPoints.put("coordinates", points.toGeoJson(includeElevation));
+        return jsonPoints;
+    }
+
+    protected void initHints( GHRequest request, Map<String, String[]> parameterMap )
+    {
+        WeightingMap m = request.getHints();
+        for (Entry<String, String[]> e : parameterMap.entrySet())
+        {
+            if (e.getValue().length == 1)
+                m.put(e.getKey(), e.getValue()[0]);
+        }
+    }
 }
diff --git a/web/src/test/java/com/graphhopper/http/GraphHopperServletTest.java b/web/src/test/java/com/graphhopper/http/GraphHopperServletTest.java
index 078a564293..f6718a4fbb 100644
--- a/web/src/test/java/com/graphhopper/http/GraphHopperServletTest.java
+++ b/web/src/test/java/com/graphhopper/http/GraphHopperServletTest.java
@@ -1,38 +1,637 @@
 package com.graphhopper.http;
 
 import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.anyString;
 import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.never;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
 import java.io.IOException;
 import java.io.PrintWriter;
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.List;
+import java.util.Map;
 
 import javax.servlet.ServletException;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
+import org.junit.After;
+import org.junit.Before;
 import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.google.inject.AbstractModule;
+import com.google.inject.Guice;
+import com.google.inject.Injector;
+import com.google.inject.name.Names;
+import com.graphhopper.GHRequest;
+import com.graphhopper.GHResponse;
+import com.graphhopper.GraphHopper;
+import com.graphhopper.routing.AlgorithmOptions;
+import com.graphhopper.routing.util.AbstractAvoidanceDecorator;
+import com.graphhopper.routing.util.AbstractFlagEncoder;
+import com.graphhopper.routing.util.EncoderDecorator;
+import com.graphhopper.routing.util.EncodingManager;
+import com.graphhopper.storage.GraphStorage;
 
 public class GraphHopperServletTest
 {
 
-	ApiResource apiResource = ApiResource.ROUTE;
+    private Injector injector;
+
+    @Mock
+    HttpServletRequest httpServletRequest;
+
+    @Mock
+    HttpServletResponse httpServletResponse;
+
+    Map<String, String[]> allParameters;
+
+    GraphHopperServlet graphHopperServlet;
+
+    GHResponse value = new GHResponse();
+
+    @Mock
+    private GraphHopper graphHopper;
+
+    @Mock
+    private static EncodingManager encodingManager;
+
+    @Mock
+    private AbstractFlagEncoder flagEncoder;
+
+    @Mock
+    private GraphStorage graphStorage;
+
+    @Mock
+    private List<EncoderDecorator> encoderDecorators;
+
+    @Mock
+    private Iterator<EncoderDecorator> iterator;
+
+    @Mock
+    private AbstractAvoidanceDecorator abstractAvoidanceDecorator;
+
+    private final String[] POINTS = { "50.728198,-3.534516", "50.726807,-3.530156" };
+    private final String UNPARSABLE_POINT = "50A.45";
+
+    private final String[] LOCALES = { "bg", "ca", "cz", "de_DE", "el", "en_US", "es", "fa", "fil",
+            "fi", "fr", "gl", "he", "hu_HU", "it", "ja", "ne", "nl", "pl_PL", "pt_BR", "pt_PT",
+            "ro", "ru", "si", "sk", "sv_SE", "tr", "uk", "vi_VI", "zh_CN", "en_GB" };
+    private final String WRONG_LOCALE = "kl_KL";
+
+    private final String[] ALGORITHMS = { AlgorithmOptions.ASTAR, AlgorithmOptions.ASTAR_BI,
+            AlgorithmOptions.DIJKSTRA, AlgorithmOptions.DIJKSTRA_BI,
+            AlgorithmOptions.DIJKSTRA_ONE_TO_MANY };
+    private final String WRONG_ALGORITHM = "dekker";
+
+    private final String[] VEHICLES = { "car", "bike", "foot" };
+    private final String WRONG_VEHICLE = "flying_carpet";
+
+    private final String[] INSTRUCTIONS = { "false" }, POINTS_ENCODED = { "true", "false" },
+            DEBUG = { "true", "false" }, PRETTY = { "true", "false" }, CALC_POINTS = { "true",
+                    "false" };
+    private final String WRONG_INSTRUCTION = "uncertain";
+    private final String WRONG_POINTS_ENCODED = "uncertain";
+    private final String WRONG_DEBUG = "uncertain";
+    private final String WRONG_PRETTY = "uncertain";
+    private final String WRONG_CALC_POINTS = "uncertain";
+
+    private final String[] WEIGHTINGS = { "fastest", "shortest" };
+    private final String WRONG_WEIGHTING = "slowest";
+
+    private final String[] AVOIDANCES = { "aroad", "boulders", "cliff", "inlandwater", "marsh",
+            "quarryorpit", "scree", "rock", "mud", "sand", "shingle", "spoil", "tidalwater" };
+    private final String WRONG_AVOIDANCE = "zxcv";
+
+    private final String[] TYPES = { "json" };
+    private final String WRONG_TYPE = "pdf";
+
+    @Before
+    public void setUp() throws Exception
+    {
+        MockitoAnnotations.initMocks(this);
+        injector = Guice.createInjector(new AbstractModule()
+        {
+            @Override
+            protected void configure()
+            {
+                bind(GraphHopper.class).toInstance(graphHopper);
+                bind(Boolean.class).annotatedWith(Names.named("internalErrorsAllowed")).toInstance(
+                        false);
+                bind(Boolean.class).annotatedWith(Names.named("jsonpAllowed")).toInstance(false);
+            }
+        });
+
+        graphHopperServlet = injector.getInstance(GraphHopperServlet.class);
+        when(httpServletResponse.getWriter()).thenReturn(mock(PrintWriter.class));
+        allParameters = new HashMap<>();
+        when(graphHopper.getEncodingManager()).thenReturn(encodingManager);
+        when(graphHopper.hasElevation()).thenReturn(false);
+
+        when(encodingManager.supports(anyString())).thenReturn(true);
+        when(encodingManager.getEncoder(anyString())).thenReturn(flagEncoder);
+        when(flagEncoder.toString()).thenReturn("unknown");
+
+        when(graphHopper.route(any(GHRequest.class))).thenReturn(value);
+
+    }
+
+    @After
+    public void tearDown() throws Exception
+    {
+        injector = null;
+    }
+
+    private String buildErrorMessageString( String paramValue, String paramName,
+            List<String> validValues )
+    {
+        StringBuilder errMesg = new StringBuilder(paramValue)
+                .append(" is not a valid value for parameter ").append(paramName)
+                .append(". Valid values are ");
+        for (int i = 0; i < validValues.size(); i++)
+        {
+            String validStr = validValues.get(i);
+            if (i == validValues.size() - 1)
+            {
+                errMesg.append(" or ");
+            }
+            errMesg.append(validStr);
+            if (i < validValues.size() - 2)
+            {
+                errMesg.append(", ");
+            }
+        }
+        return errMesg.toString();
+    }
+
+    private String buildErrorMessageString( String paramValue, String paramName,
+            String... validValues )
+    {
+        return buildErrorMessageString(paramValue, paramName, Arrays.asList(validValues));
+    }
+
+    @Test
+    public void statusCodeForCorrectParameters() throws ServletException, IOException
+    {
+        allParameters.put("point", POINTS);
+        allParameters.put("vehicle", new String[] { VEHICLES[0] });
+        allParameters.put("locale", new String[] { LOCALES[0] });
+        allParameters.put("instructions", new String[] { "false" });
+        when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+
+        graphHopperServlet.doGet(httpServletRequest, httpServletResponse);
+        verify(httpServletResponse, never()).setStatus(SC_BAD_REQUEST);
+    }
+
+    @Test
+    public void testGetGHResponseWithValidPoints() throws IOException, MissingParameterException,
+            NoSuchParameterException, InvalidParameterException
+    {
+        allParameters.put("point", POINTS);
+        allParameters.put("vehicle", new String[] { VEHICLES[0] });
+        allParameters.put("locale", new String[] { LOCALES[0] });
+        allParameters.put("instructions", new String[] { "false" });
+        when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+
+        assertFalse(graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse)
+                .hasErrors());
+    }
+
+    @Test
+    public void testGetGHResponseWithUnparsablePoint() throws IOException,
+            MissingParameterException, NoSuchParameterException, InvalidParameterException
+    {
+        allParameters.put("point", new String[] { UNPARSABLE_POINT });
+        allParameters.put("vehicle", new String[] { VEHICLES[0] });
+        allParameters.put("locale", new String[] { LOCALES[0] });
+        when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+
+        assertEquals(
+                "Point "
+                        + UNPARSABLE_POINT
+                        + " is not a valid point. Point must be a comma separated coordinate in WGS84 projection.",
+                graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse)
+                        .getErrors().get(0).getMessage());
+    }
+
+    @Test
+    public void testGetGHResponseWithCorrectLocales() throws IOException,
+            MissingParameterException, NoSuchParameterException, InvalidParameterException
+    {
+        allParameters.put("point", POINTS);
+        allParameters.put("vehicle", new String[] { VEHICLES[0] });
+        allParameters.put("instructions", new String[] { "false" });
+        for (String locale : LOCALES)
+        {
+            allParameters.put("locale", new String[] { locale });
+            when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+
+            assertFalse(graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse)
+                    .hasErrors());
+        }
+    }
+
+    @Test
+    public void testGetGHResponseWithWrongLocale() throws IOException, MissingParameterException,
+            NoSuchParameterException, InvalidParameterException
+    {
+        allParameters.put("point", POINTS);
+        allParameters.put("vehicle", new String[] { VEHICLES[0] });
+        allParameters.put("locale", new String[] { WRONG_LOCALE });
+        allParameters.put("instructions", new String[] { "false" });
+        when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+
+        assertEquals(buildErrorMessageString(WRONG_LOCALE, "locale", LOCALES), graphHopperServlet
+                .getGHResponse(httpServletRequest, httpServletResponse).getErrors().get(0)
+                .getMessage());
+    }
+
+    @Test
+    public void testGetGHResponseWithCorrectAlgorithms() throws IOException,
+            MissingParameterException, NoSuchParameterException, InvalidParameterException
+    {
+        allParameters.put("point", POINTS);
+        allParameters.put("vehicle", new String[] { VEHICLES[0] });
+        allParameters.put("locale", new String[] { LOCALES[0] });
+        allParameters.put("instructions", new String[] { "false" });
+
+        for (String algorithm : ALGORITHMS)
+        {
+            allParameters.put("algorithm", new String[] { algorithm });
+            when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+
+            assertFalse(graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse)
+                    .hasErrors());
+        }
+    }
+
+    @Test
+    public void testGetGHResponseWithWrongAlgorithm() throws IOException,
+            MissingParameterException, NoSuchParameterException, InvalidParameterException
+    {
+        allParameters.put("point", POINTS);
+        allParameters.put("vehicle", new String[] { VEHICLES[0] });
+        allParameters.put("locale", new String[] { LOCALES[0] });
+
+        allParameters.put("algorithm", new String[] { WRONG_ALGORITHM });
+        when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+
+        assertEquals(buildErrorMessageString(WRONG_ALGORITHM, "algorithm", ALGORITHMS),
+                graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse)
+                        .getErrors().get(0).getMessage());
+    }
+
+    @Test
+    public void testGetGHResponseWithCorrectTypes() throws IOException, MissingParameterException,
+            NoSuchParameterException, InvalidParameterException, ServletException
+    {
+        allParameters.put("point", POINTS);
+        allParameters.put("vehicle", new String[] { VEHICLES[0] });
+        allParameters.put("locale", new String[] { LOCALES[0] });
+        allParameters.put("instructions", new String[] { "false" });
+
+        for (String type : TYPES)
+        {
+            allParameters.put("type", new String[] { type });
+            when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+
+            assertFalse(graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse)
+                    .hasErrors());
+
+        }
+    }
+
+    @Test
+    public void testGetGHResponseWithWrongType() throws IOException, MissingParameterException,
+            NoSuchParameterException, InvalidParameterException, ServletException
+    {
+        allParameters.put("point", POINTS);
+        allParameters.put("vehicle", new String[] { VEHICLES[0] });
+        allParameters.put("locale", new String[] { LOCALES[0] });
+
+        allParameters.put("type", new String[] { WRONG_TYPE });
+        when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+
+        assertEquals(WRONG_TYPE
+                + " is not a valid value for parameter type. Valid values are GPX or JSON.",
+                graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse)
+                        .getErrors().get(0).getMessage());
+    }
+
+    @Test
+    public void testGetGHResponseWithCorrectVehicles() throws IOException,
+            MissingParameterException, NoSuchParameterException, InvalidParameterException
+    {
+        allParameters.put("point", POINTS);
+        allParameters.put("vehicle", new String[] { VEHICLES[0] });
+        allParameters.put("locale", new String[] { LOCALES[0] });
+        allParameters.put("instructions", new String[] { "false" });
+        when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+
+        assertFalse(graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse)
+                .hasErrors());
+    }
+
+    @Test
+    public void testGetGHResponseWithWrongVehicle() throws IOException, MissingParameterException,
+            NoSuchParameterException, InvalidParameterException
+    {
+        allParameters.put("point", POINTS);
+        allParameters.put("vehicle", new String[] { WRONG_VEHICLE });
+        allParameters.put("locale", new String[] { LOCALES[0] });
+        allParameters.put("instructions", new String[] { "false" });
+        when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+
+        when(graphHopper.getGraph()).thenReturn(graphStorage);
+        when(graphStorage.getEncodingManager()).thenReturn(encodingManager);
+        when(encodingManager.supports(anyString())).thenReturn(false);
+        when(encodingManager.toString()).thenReturn("*supported vehicles*");
+
+        GHResponse ghResponse = graphHopperServlet.getGHResponse(httpServletRequest,
+                httpServletResponse);
+
+        assertEquals(
+                "Vehicle flying_carpet is not a valid vehicle. Valid vehicles are *supported vehicles*",
+                ghResponse.getErrors().get(0).getMessage());
+    }
+
+    @Test
+    public void testGetGHResponseWithCorrectInstructions() throws MissingParameterException,
+            NoSuchParameterException, InvalidParameterException, IOException
+    {
+        allParameters.put("point", POINTS);
+        allParameters.put("vehicle", new String[] { VEHICLES[0] });
+        allParameters.put("locale", new String[] { LOCALES[0] });
+
+        for (String instruction : INSTRUCTIONS)
+        {
+            allParameters.put("instructions", new String[] { instruction });
+            when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+
+            GHResponse ghResponse = graphHopperServlet.getGHResponse(httpServletRequest,
+                    httpServletResponse);
+
+            assertFalse(ghResponse.hasErrors());
+        }
+    }
+
+    @Test
+    public void testGetGHResponseWithIncorrectInstruction() throws MissingParameterException,
+            NoSuchParameterException, InvalidParameterException, IOException
+    {
+        allParameters.put("point", POINTS);
+        allParameters.put("vehicle", new String[] { VEHICLES[0] });
+        allParameters.put("locale", new String[] { LOCALES[0] });
+
+        allParameters.put("instructions", new String[] { WRONG_INSTRUCTION });
+        when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+
+        assertEquals(
+                WRONG_INSTRUCTION
+                        + " is not a valid value for parameter instructions. Valid values are true or false",
+                graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse)
+                        .getErrors().get(0).getMessage());
+    }
+
+    @Test
+    public void testGetGHResponseWithCorrectPointsEncoded() throws MissingParameterException,
+            NoSuchParameterException, InvalidParameterException, IOException
+    {
+        allParameters.put("point", POINTS);
+        allParameters.put("vehicle", new String[] { VEHICLES[0] });
+        allParameters.put("locale", new String[] { LOCALES[0] });
+        allParameters.put("instructions", new String[] { "false" });
+
+        for (String point_encoded : POINTS_ENCODED)
+        {
+            allParameters.put("points_encoded", new String[] { point_encoded });
+            when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+
+            assertFalse(graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse)
+                    .hasErrors());
+        }
+    }
+
+    @Test
+    public void testGetGHResponseWithIncorrectPointsEncoded() throws MissingParameterException,
+            NoSuchParameterException, InvalidParameterException, IOException
+    {
+        allParameters.put("point", POINTS);
+        allParameters.put("vehicle", new String[] { VEHICLES[0] });
+        allParameters.put("locale", new String[] { LOCALES[0] });
+
+        allParameters.put("points_encoded", new String[] { WRONG_POINTS_ENCODED });
+        when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+
+        assertEquals(
+                buildErrorMessageString(WRONG_POINTS_ENCODED, "points_encoded", POINTS_ENCODED),
+                graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse)
+                        .getErrors().get(0).getMessage());
+    }
+
+    @Test
+    public void testGetGHResponseWithCorrectDebug() throws MissingParameterException,
+            NoSuchParameterException, InvalidParameterException, IOException
+    {
+        allParameters.put("point", POINTS);
+        allParameters.put("vehicle", new String[] { VEHICLES[0] });
+        allParameters.put("locale", new String[] { LOCALES[0] });
+        allParameters.put("instructions", new String[] { "false" });
+
+        for (String debug : DEBUG)
+        {
+            allParameters.put("debug", new String[] { debug });
+            when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+
+            assertFalse(graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse)
+                    .hasErrors());
+        }
+    }
+
+    @Test
+    public void testGetGHResponseWithIncorrectDebug() throws MissingParameterException,
+            NoSuchParameterException, InvalidParameterException, IOException
+    {
+        allParameters.put("point", POINTS);
+        allParameters.put("vehicle", new String[] { VEHICLES[0] });
+        allParameters.put("locale", new String[] { LOCALES[0] });
+
+        allParameters.put("debug", new String[] { WRONG_DEBUG });
+        when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+
+        assertEquals(buildErrorMessageString(WRONG_DEBUG, "debug", DEBUG), graphHopperServlet
+                .getGHResponse(httpServletRequest, httpServletResponse).getErrors().get(0)
+                .getMessage());
+    }
+
+    @Test
+    public void testGetGHResponseWithCorrectPretty() throws MissingParameterException,
+            NoSuchParameterException, InvalidParameterException, IOException
+    {
+        allParameters.put("point", POINTS);
+        allParameters.put("vehicle", new String[] { VEHICLES[0] });
+        allParameters.put("locale", new String[] { LOCALES[0] });
+        allParameters.put("instructions", new String[] { "false" });
+
+        for (String pretty : PRETTY)
+        {
+            allParameters.put("pretty", new String[] { pretty });
+            when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+
+            assertFalse(graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse)
+                    .hasErrors());
+        }
+    }
+
+    @Test
+    public void testGetGHResponseWithIncorrectPretty() throws MissingParameterException,
+            NoSuchParameterException, InvalidParameterException, IOException
+    {
+        allParameters.put("point", POINTS);
+        allParameters.put("vehicle", new String[] { VEHICLES[0] });
+        allParameters.put("locale", new String[] { LOCALES[0] });
+
+        allParameters.put("pretty", new String[] { WRONG_PRETTY });
+        when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+
+        assertEquals(buildErrorMessageString(WRONG_PRETTY, "pretty", PRETTY), graphHopperServlet
+                .getGHResponse(httpServletRequest, httpServletResponse).getErrors().get(0)
+                .getMessage());
+    }
+
+    @Test
+    public void testGetGHResponseWithCorrectCalcPoints() throws MissingParameterException,
+            NoSuchParameterException, InvalidParameterException, IOException
+    {
+        allParameters.put("point", POINTS);
+        allParameters.put("vehicle", new String[] { VEHICLES[0] });
+        allParameters.put("locale", new String[] { LOCALES[0] });
+        allParameters.put("instructions", new String[] { "false" });
+
+        for (String calcPoint : CALC_POINTS)
+        {
+            allParameters.put("calc_points", new String[] { calcPoint });
+            when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+
+            assertFalse(graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse)
+                    .hasErrors());
+        }
+    }
+
+    @Test
+    public void testGetGHResponseWithIncorrectCalcPoints() throws MissingParameterException,
+            NoSuchParameterException, InvalidParameterException, IOException
+    {
+        allParameters.put("point", POINTS);
+        allParameters.put("vehicle", new String[] { VEHICLES[0] });
+        allParameters.put("locale", new String[] { LOCALES[0] });
+        allParameters.put("instructions", new String[] { "false" });
+
+        allParameters.put("calc_points", new String[] { WRONG_CALC_POINTS });
+        when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+
+        assertEquals(buildErrorMessageString(WRONG_CALC_POINTS, "calc_points", CALC_POINTS),
+                graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse)
+                        .getErrors().get(0).getMessage());
+    }
+
+    @Test
+    public void testGetGHResponseWithCorrectWeighting() throws MissingParameterException,
+            NoSuchParameterException, InvalidParameterException, IOException
+    {
+        allParameters.put("point", POINTS);
+        allParameters.put("vehicle", new String[] { VEHICLES[0] });
+        allParameters.put("locale", new String[] { LOCALES[0] });
+        allParameters.put("instructions", new String[] { "false" });
+
+        for (String weighting : WEIGHTINGS)
+        {
+            allParameters.put("weighting", new String[] { weighting });
+            when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+
+            assertFalse(graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse)
+                    .hasErrors());
+        }
+    }
+
+    @Test
+    public void testGetGHResponseWithIncorrectWeighting() throws MissingParameterException,
+            NoSuchParameterException, InvalidParameterException, IOException
+    {
+        allParameters.put("point", POINTS);
+        allParameters.put("vehicle", new String[] { VEHICLES[0] });
+        allParameters.put("locale", new String[] { LOCALES[0] });
+        allParameters.put("instructions", new String[] { "false" });
+
+        allParameters.put("weighting", new String[] { WRONG_WEIGHTING });
+
+        when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+
+        GHResponse ghResponse = graphHopperServlet.getGHResponse(httpServletRequest,
+                httpServletResponse);
+
+        assertEquals(1, ghResponse.getErrors().size());
+        // TODO Generate appropriate error message in GraphhopperServletClass
+        // assertEquals(buildErrorMessageString(WRONG_WEIGHTING, "calc_points", WEIGHTINGS),
+        // ghResponse.getErrors().get(0).getMessage());
+
+    }
+
+    @Test
+    public void testGetGHResponseWithCorrectAvoidances() throws MissingParameterException,
+            NoSuchParameterException, InvalidParameterException, IOException
+    {
+        allParameters.put("point", POINTS);
+        allParameters.put("vehicle", new String[] { VEHICLES[0] });
+        allParameters.put("locale", new String[] { LOCALES[0] });
+        allParameters.put("instructions", new String[] { "false" });
+
+        for (String avoidances : AVOIDANCES)
+        {
+            allParameters.put("avoidances", new String[] { avoidances });
+            when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+
+            when(flagEncoder.getEncoderDecorators()).thenReturn(encoderDecorators);
+            when(encoderDecorators.iterator()).thenReturn(iterator);
+            when(iterator.hasNext()).thenReturn(true, false);
+            when(iterator.next()).thenReturn(abstractAvoidanceDecorator);
+            when(abstractAvoidanceDecorator.getEdgeAttributesOfInterestNames()).thenReturn(
+                    AVOIDANCES);
+
+            assertFalse(graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse)
+                    .hasErrors());
+        }
+    }
 
-	@Test
-	public void testErrorStatusCode() throws ServletException, IOException
-	{
-		HttpServletRequest httpServletRequest = mock(HttpServletRequest.class);
+    @Test
+    public void testGetGHResponseWithIncorrectAvoidances() throws MissingParameterException,
+            NoSuchParameterException, InvalidParameterException, IOException
+    {
+        allParameters.put("point", POINTS);
+        allParameters.put("vehicle", new String[] { VEHICLES[0] });
+        allParameters.put("locale", new String[] { LOCALES[0] });
 
-		when(httpServletRequest.getParameter("vehicle")).thenReturn("car");
-		when(httpServletRequest.getParameter("point")).thenReturn(null);
+        allParameters.put("avoidances", new String[] { WRONG_AVOIDANCE });
+        when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
 
-		GraphHopperServlet servlet = new GraphHopperServlet();
-		HttpServletResponse httpServletResponse = mock(HttpServletResponse.class);
-		when(httpServletResponse.getWriter()).thenReturn(mock(PrintWriter.class));
-		servlet.doGet(httpServletRequest, httpServletResponse);
-		verify(httpServletResponse).setStatus(SC_BAD_REQUEST);
+        when(flagEncoder.getEncoderDecorators()).thenReturn(encoderDecorators);
+        when(encoderDecorators.iterator()).thenReturn(iterator);
+        when(iterator.hasNext()).thenReturn(true, false);
+        when(iterator.next()).thenReturn(abstractAvoidanceDecorator);
+        when(abstractAvoidanceDecorator.getEdgeAttributesOfInterestNames()).thenReturn(AVOIDANCES);
 
-	}
+        assertEquals(buildErrorMessageString(WRONG_AVOIDANCE, "avoidances", AVOIDANCES),
+                graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse)
+                        .getErrors().get(0).getMessage());
+    }
 
 }
