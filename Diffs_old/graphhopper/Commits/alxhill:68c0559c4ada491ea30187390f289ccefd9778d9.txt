diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/Vehicle.java b/marmoset/src/main/java/com/graphhopper/marmoset/Vehicle.java
index 66389dde48..4e95b61c9a 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/Vehicle.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/Vehicle.java
@@ -7,15 +7,12 @@
 import com.graphhopper.marmoset.util.CellsGraph;
 import com.graphhopper.marmoset.util.Location;
 import com.graphhopper.routing.Path;
-import com.graphhopper.routing.util.FlagEncoder;
-import com.graphhopper.storage.GraphHopperStorage;
 import com.graphhopper.util.*;
-import gnu.trove.list.TIntList;
-import javafx.scene.control.Cell;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import java.util.List;
+import java.util.Random;
 import java.util.stream.Collectors;
 
 /**
@@ -38,18 +35,21 @@
 
     private byte v; // velocity
     private float slowProb;
+    private Random slowRand;
     private byte maxVelocity = 5;
 
     private CellsGraph cg;
 
     public Vehicle(MarmosetHopper hopper, Location start, Location dest)
     {
-        slowProb = 0.0f;
         this.hopper = hopper;
         this.dest = dest;
         this.loc = start;
         this.id = maxId++;
+
         finished = false;
+        slowProb = 0.4f;
+        slowRand = new Random(id);
     }
 
     public boolean isFinished()
@@ -139,7 +139,7 @@ public void slowStep()
 
     public void randomStep()
     {
-        if (v > 0 && Math.random() < slowProb)
+        if (v > 0 && slowRand.nextDouble() < slowProb)
         {
             logger.debug("Randomly slowing");
             v--;
@@ -159,6 +159,12 @@ public void moveStep()
         }
         cellId = c.getCellIndex();
         cg.set(route, cellId, true);
+
+        if (!route.hasNext() && cellId == cg.getCellCount(route) - 1)
+        {
+            finished = true;
+            logger.info("Vehicle " + id + " reached destination");
+        }
     }
 
     public void updateLocation()
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/VehicleEdgeIterator.java b/marmoset/src/main/java/com/graphhopper/marmoset/VehicleEdgeIterator.java
index 2a624bc8ef..ff8f2ce8fc 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/VehicleEdgeIterator.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/VehicleEdgeIterator.java
@@ -30,6 +30,11 @@ public VehicleEdgeIterator(VehicleEdgeIterator e)
         index = e.index;
     }
 
+    public boolean hasNext()
+    {
+        return index < edges.size() - 1;
+    }
+
     @Override
     public boolean next()
     {
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/util/CellIterator.java b/marmoset/src/main/java/com/graphhopper/marmoset/util/CellIterator.java
index ef473c68d6..51cc3c984d 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/util/CellIterator.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/util/CellIterator.java
@@ -23,9 +23,16 @@ public boolean next()
         cellIndex++;
         if (cellIndex >= cg.getCellCount(route))
         {
-            cellIndex = 0;
-            // TODO: deal with ending of routes
-            route.next();
+            if (route.hasNext())
+            {
+                cellIndex = 0;
+                route.next();
+            }
+            else
+            {
+                // allows repeated calls after reaching destination
+                cellIndex = cg.getCellCount(route) - 1;
+            }
         }
         return cg.get(route, cellIndex);
     }
