diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetSocketServer.java b/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetSocketServer.java
index bd39340f95..39d06de26c 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetSocketServer.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetSocketServer.java
@@ -33,24 +33,23 @@ public void distributeData(String s)
     @Override
     public void onOpen(WebSocket webSocket, ClientHandshake clientHandshake)
     {
-        System.out.println("OPEN!" + webSocket.toString());
+        logger.debug("Opened WebSocket:" + webSocket.getLocalSocketAddress() + "->" + webSocket.getRemoteSocketAddress());
         sockets.add(webSocket);
     }
 
     @Override
     public void onClose(WebSocket webSocket, int i, String s, boolean b)
     {
-        System.out.println("CLOSE!" + webSocket.toString());
+        logger.debug("Closed WebSocket:" + webSocket.getLocalSocketAddress() + "->" + webSocket.getRemoteSocketAddress());
         sockets.remove(webSocket);
     }
 
     @Override
     public void onMessage(WebSocket webSocket, String s)
     {
-        logger.info("Received message: " + s);
+        logger.debug("Received message: " + s);
         if (s.matches("start\\|\\d+"))
         {
-            logger.info("run message");
             String num = s.split("\\|")[1];
             logger.info("Starting simulation with " + num + " vehicles");
             Marmoset.run(Integer.valueOf(num, 10));
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/Vehicle.java b/marmoset/src/main/java/com/graphhopper/marmoset/Vehicle.java
index d49de5f1fe..43bbcfda69 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/Vehicle.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/Vehicle.java
@@ -69,7 +69,7 @@ public void init()
         List<Path> paths = gh.calcPaths(ghRequest, ghResponse);
         if (ghResponse.hasErrors())
         {
-            System.out.println("ERRORS:" + ghResponse.getErrors().stream().map(Throwable::toString).collect(Collectors.joining("\n")));
+            logger.error("Routing failed:" + ghResponse.getErrors().stream().map(Throwable::toString).collect(Collectors.joining("\n")));
             finished = true;
             return;
         }
@@ -82,9 +82,9 @@ public void init()
         int maxId = edgeList.stream().mapToInt(EdgeIteratorState::getEdge).max().getAsInt();
         int minId = edgeList.stream().mapToInt(EdgeIteratorState::getEdge).min().getAsInt();
         edgeId = e.getEdge();
-        logger.info("edge id: " + edgeId);
-        logger.info("max edge id: " + maxId);
-        logger.info("min edge id: " + minId);
+        logger.debug("edge id: " + edgeId);
+        logger.debug("max edge id: " + maxId);
+        logger.debug("min edge id: " + minId);
 
         cg.set(edgeId, cellId, true);
 
@@ -99,7 +99,7 @@ public void accelerationStep()
         freeCells = cg.freeCellsAhead(edgeId, cellId);
         if (freeCells > v+1 && v < maxVelocity)
         {
-            logger.info("Accelerating");
+            logger.debug("Accelerating");
             v++;
         }
     }
@@ -108,7 +108,7 @@ public void slowStep()
     {
         if (freeCells < v)
         {
-            logger.info("Slowing");
+            logger.debug("Slowing");
             v = (byte) (freeCells);
         }
     }
@@ -116,17 +116,17 @@ public void slowStep()
     public void randomStep()
     {
         int c = cg.getCellCount(edgeId);
-        logger.info(id + "freecells:"+freeCells + "V:"+v + "count:"+ c);
+        logger.debug(id + "freecells:"+freeCells + "V:"+v + "count:"+ c);
         if (v > 0 && Math.random() < slowProb)
         {
-            logger.info("Randomly slowing");
+            logger.debug("Randomly slowing");
             v--;
         }
     }
 
     public void moveStep()
     {
-        logger.info("Moving from " + cellId + " to " + (cellId + v));
+        logger.debug("Moving from " + cellId + " to " + (cellId + v));
         cg.set(edgeId, cellId, false);
         cellId += v;
         cg.set(edgeId, cellId, true);
@@ -140,23 +140,23 @@ public void updateLocation()
         PointList path = edge.fetchWayGeometry(3);
         if (path.isEmpty())
         {
-            logger.info("Path is empty, not moving...");
+            logger.debug("Path is empty, not moving...");
             return;
         }
-        logger.info("velocity:" + v);
-        logger.info("progress:" + progress);
+        logger.debug("velocity:" + v);
+        logger.debug("progress:" + progress);
 
         DistanceCalc dc = new DistanceCalc2D();
         double dist = path.calcDistance(dc);
-        logger.info("dist: " + dist);
+        logger.debug("dist: " + dist);
         double distTravelled = progress * dist;
         double currDist = 0;
-        logger.info(String.format("start(%d): %f + %f", id, currDist, distTravelled));
+        logger.debug(String.format("start(%d): %f + %f", id, currDist, distTravelled));
         int i = 0;
         while (i < path.getSize()-1 && currDist <= distTravelled)
         {
             double nextDist = dc.calcDist(path.getLat(i), path.getLon(i), path.getLat(i + 1), path.getLon(i + 1));
-            logger.info(String.format("-%d|%d: %f + %f", id,i,currDist,nextDist));
+            logger.debug(String.format("-%d|%d: %f + %f", id,i,currDist,nextDist));
             if (currDist + nextDist > distTravelled)
             {
                 double partProgress = (distTravelled - currDist)/nextDist;
@@ -183,6 +183,7 @@ private void nextEdge()
         edgeIndex++;
         if (edgeIndex >= edgeList.size() - 1)
         {
+            logger.info("Vehicle " + id + " has reached destination");
             finished = true;
             return;
         }
diff --git a/marmoset/src/main/resources/log4j.xml b/marmoset/src/main/resources/log4j.xml
index 01cc086902..99209d02c8 100644
--- a/marmoset/src/main/resources/log4j.xml
+++ b/marmoset/src/main/resources/log4j.xml
@@ -3,7 +3,7 @@
 <log4j:configuration>
     <appender name="stdout" class="org.apache.log4j.ConsoleAppender">
         <layout class="org.apache.log4j.PatternLayout">
-            <param name="ConversionPattern" value="%d [%t] %-5p %c - %m%n"/>
+            <param name="ConversionPattern" value="[%t] %-5p %c - %m%n"/>
         </layout>
     </appender>
     <appender name="ASYNC" class="org.apache.log4j.AsyncAppender">
