diff --git a/marmoset/src/main/webapp/AnimatedMarker.js b/marmoset/src/main/webapp/AnimatedMarker.js
deleted file mode 100644
index 1921eea286..0000000000
--- a/marmoset/src/main/webapp/AnimatedMarker.js
+++ /dev/null
@@ -1,148 +0,0 @@
-function angleFromCoordinate(lat1, long1, lat2, long2) {
-
-  var dLon = (long2 - long1);
-
-  var y = Math.sin(dLon) * Math.cos(lat2);
-  var x = Math.cos(lat1) * Math.sin(lat2) - Math.sin(lat1)
-      * Math.cos(lat2) * Math.cos(dLon);
-
-  var brng = Math.atan2(y, x);
-
-  brng += 1.5 * Math.PI;
-  return brng;
-}
-
-L.AnimatedMarker = L.Marker.extend({
-  options: {
-    // meters
-    distance: 200,
-    // ms
-    interval: 1000,
-    // animate on add?
-    autoStart: true,
-    // callback onend
-    onEnd: function(){},
-    clickable: false,
-  },
-
-  _setPos: function(pos) {
-    L.Marker.prototype._setPos.call(this, pos);
-    if (this.angle)
-      this._icon.style[L.DomUtil.TRANSFORM] += ' rotate(' + this.angle + 'deg)';
-  },
-
-  initialize: function (latlngs, options) {
-    this.setLine(latlngs);
-    L.Marker.prototype.initialize.call(this, latlngs[0], options);
-  },
-
-  // Breaks the line up into tiny chunks (see options) ONLY if CSS3 animations
-  // are not supported.
-  _chunk: function(latlngs) {
-    var i,
-        len = latlngs.length,
-        chunkedLatLngs = [];
-
-    for (i=1;i<len;i++) {
-      var cur = latlngs[i-1],
-          next = latlngs[i],
-          dist = cur.distanceTo(next),
-          factor = this.options.distance / dist,
-          dLat = factor * (next.lat - cur.lat),
-          dLng = factor * (next.lng - cur.lng);
-
-      if (dist > this.options.distance) {
-        while (dist > this.options.distance) {
-          cur = new L.LatLng(cur.lat + dLat, cur.lng + dLng);
-          dist = cur.distanceTo(next);
-          chunkedLatLngs.push(cur);
-        }
-      } else {
-        chunkedLatLngs.push(cur);
-      }
-    }
-    chunkedLatLngs.push(latlngs[len-1]);
-
-    return chunkedLatLngs;
-  },
-
-  onAdd: function (map) {
-    L.Marker.prototype.onAdd.call(this, map);
-
-    // Start animating when added to the map
-    if (this.options.autoStart) {
-      this.start();
-    }
-  },
-
-  animate: function() {
-    var self = this,
-        len = this._latlngs.length,
-        speed = this.options.interval;
-
-    // Normalize the transition speed from vertex to vertex
-    if (this._i < len && this.i > 0) {
-      speed = this._latlngs[this._i-1].distanceTo(this._latlngs[this._i]) / this.options.distance * this.options.interval;
-    }
-
-    // Only if CSS3 transitions are supported
-    if (L.DomUtil.TRANSITION) {
-      if (this._icon) { this._icon.style[L.DomUtil.TRANSITION] = ('all ' + speed + 'ms linear'); }
-      if (this._shadow) { this._shadow.style[L.DomUtil.TRANSITION] = 'all ' + speed + 'ms linear'; }
-    }
-
-    // Set the rotation of the marker
-    if (this._icon) {
-      var i = this._i;
-
-        var i0 = i == 0;
-        var s = this._latlngs[i-!i0];
-        var d = this._latlngs[i+i0];
-        //console.log(this._latlngs, this._i, i, s, d, i-!i0, i+i0);
-        this.angle = angleFromCoordinate(s[0], s[1], d[0], d[1]);
-    }
-
-    // Move to the next vertex
-    this.setLatLng(this._latlngs[this._i]);
-    this._i++;
-
-    // Queue up the animation to the next next vertex
-    this._tid = setTimeout(function(){
-      if (self._i === len) {
-        self.options.onEnd.apply(self, Array.prototype.slice.call(arguments));
-      } else {
-        self.animate();
-      }
-    }, speed);
-  },
-
-  // Start the animation
-  start: function() {
-    this.animate();
-  },
-
-  // Stop the animation in place
-  stop: function() {
-    if (this._tid) {
-      clearTimeout(this._tid);
-    }
-  },
-
-  setLine: function(latlngs){
-    if (L.DomUtil.TRANSITION) {
-      // No need to to check up the line if we can animate using CSS3
-      this._latlngs = latlngs;
-    } else {
-      // Chunk up the lines into options.distance bits
-      this._latlngs = this._chunk(latlngs);
-      this.options.distance = 10;
-      this.options.interval = 30;
-    }
-    this._i = 0;
-  }
-
-});
-
-L.animatedMarker = function (latlngs, options) {
-  return new L.AnimatedMarker(latlngs, options);
-};
diff --git a/marmoset/src/main/webapp/main.js b/marmoset/src/main/webapp/main.js
index 223de4b969..19eaf79f62 100644
--- a/marmoset/src/main/webapp/main.js
+++ b/marmoset/src/main/webapp/main.js
@@ -21,24 +21,18 @@ function initMap() {
         accessToken: 'pk.eyJ1IjoiYWx4aGlsbCIsImEiOiJjaWtyMnM5cTAwMDFzd2RrcWxjdW14dGlhIn0._vGArimDzlTVhET5T_GZzA',
     }).addTo(window.map);
 
-    resizeCanvas(window.map.getSize());
-    window.map.on('moveend', function() {
-        console.log('panning');
-        resizeCanvas(window.map.getSize());
-        //ctx.clearRect(0, 0, canvas.width, canvas.height);
-        window.map.fireEvent('viewreset', {hard: true});
-        //window.map.setView(window.map.getCenter(), window.map.getZoom(), true);
-
-    });
-
-    window.addEventListener('resize', function(){
-        console.log("resize");
-    })
+    //resizeCanvas(window.map.getSize());
+    //window.map.on('moveend', function() {
+    //    //resizeCanvas(window.map.getSize());
+    //});
+    //
+    //window.addEventListener('resize', function(){
+    //    //console.log("resize");
+    //})
 
 }
 
-function resizeCanvas(size)
-{
+function resizeCanvas(size) {
     if (size.x != window.canvas.width)
         window.canvas.width = size.x;
     if (size.y != window.canvas.height)
