diff --git a/core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java
index 000d51db2f..982a1ee718 100644
--- a/core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java
@@ -677,7 +677,7 @@ public double getDouble(long flags, int key) {
      */
     protected double applyMaxSpeed(ReaderWay way, double speed) {
         double maxSpeed = getMaxSpeed(way);
-        // We obay speed limits
+        // We obey speed limits
         if (maxSpeed >= 0) {
             // We assume that the average speed is 90% of the allowed maximum
             return maxSpeed * 0.9;
diff --git a/core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
index aef0f55c0d..fade169508 100644
--- a/core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
@@ -174,11 +174,13 @@ protected double getSpeed(ReaderWay way) {
 
 		GHPoint point = way.getTag("estimated_center", null);
         double speed = way.getTag("estimated_speed", (double) -1);//getSpeedForLocation(point);
-        if (speed == -1) {
-            Integer defaultSpeed = defaultSpeedMap.get(highwayValue);
-            if (defaultSpeed == null)
-                throw new IllegalStateException(toString() + ", no speed found for: " + highwayValue + ", tags: " + way);
-            speed = 1.0 * defaultSpeed;
+        if (speed <= 0) {
+            speed = 0;
+// AG - set speed to 0 when it's not found or 0 in speed data
+//            Integer defaultSpeed = defaultSpeedMap.get(highwayValue);
+//            if (defaultSpeed == null)
+//                throw new IllegalStateException(toString() + ", no speed found for: " + highwayValue + ", tags: " + way);
+//            speed = 1.0 * defaultSpeed;
         }
 
         if (highwayValue.equals("track")) {
diff --git a/reader-osm/src/main/java/com/graphhopper/reader/osm/OSMReader.java b/reader-osm/src/main/java/com/graphhopper/reader/osm/OSMReader.java
index 9b64c31a7d..55251c92b7 100644
--- a/reader-osm/src/main/java/com/graphhopper/reader/osm/OSMReader.java
+++ b/reader-osm/src/main/java/com/graphhopper/reader/osm/OSMReader.java
@@ -264,7 +264,6 @@ private void writeOsm2Graph(File osmFile) {
         long relationStart = -1;
         long counter = 1;
         OSMInputFile in = null;
-        Connection conn = getConnection();
 
         speedCnt = 0;
         speedCntTotal = 0;
@@ -288,7 +287,7 @@ private void writeOsm2Graph(File osmFile) {
                             LOGGER.info(nf(counter) + ", now parsing ways");
                             wayStart = counter;
                         }
-                        processWay((ReaderWay) item, conn);
+                        processWay((ReaderWay) item, null);
                         break;
                     case ReaderElement.RELATION:
                         if (relationStart < 0) {
@@ -942,126 +941,9 @@ public String toString() {
         return getClass().getSimpleName();
     }
 
+    // AG TODO: Implement DB query
     private double lookupSpeed(Connection conn, double lat, double lng) {
-//        String query = "SELECT " +
-//                "   speed," +
-//                "   ( 6371 * acos( cos( radians(?) ) * cos( radians( lat ) ) * " +
-//                "   cos( radians( lng ) - radians(?) ) + " +
-//                "   sin( radians(?) ) * " +
-//                "   sin( radians( lat ) ) ) ) " +
-//                "   AS distance " +
-//                "   FROM gh_markers " +
-//                "   HAVING distance < 2 " +
-//                "   ORDER BY distance " +
-//                "   LIMIT 1";
-//        LOGGER.info("SQL: " + query);
-
-        int ONE_DEGREE_CONSTANT;
-        int EARTH_RADIUS_CONSTANT;
-        double lon1, lon2, lat1, lat2;
-        ONE_DEGREE_CONSTANT   = 69;
-        EARTH_RADIUS_CONSTANT = 3959;
-
-        double maxDistance = 1.0;
-        lon1 = lng - maxDistance/Math.abs(Math.cos(Math.toRadians(lat))*ONE_DEGREE_CONSTANT);
-        lon2 = lng + maxDistance/Math.abs(Math.cos(Math.toRadians(lat))*ONE_DEGREE_CONSTANT);
-        lat1 = lat - (maxDistance/ONE_DEGREE_CONSTANT);
-        lat2 = lat + (maxDistance/ONE_DEGREE_CONSTANT);
-
-        String queryFmt = "SELECT m1.speed, ROUND((%d * acos(cos(radians(%.6f)) * cos(radians(m1.lat)) * " +
-                "cos(radians(m2.lng) - radians(%.6f)) +  sin(radians(%.6f)) * sin(radians(m1.lat)))) " +
-                "   , 3) AS distance " +
-                "   FROM gh_markers as m1, gh_markers as m2 " +
-                "   WHERE m1.id = m2.id AND m2.lng between %.6f and %.6f AND m1.lat between %.6f and %.6f" +
-                "   ORDER BY distance ASC" +
-                "   LIMIT 10";
-        String queryFmt2 = "SELECT speed, ROUND((%d * acos(cos(radians(%.6f)) * cos(radians(lat)) * " +
-                "cos(radians(lng) - radians(%.6f)) +  sin(radians(%.6f)) * sin(radians(lat)))) " +
-                "   , 3) AS distance " +
-                "   FROM gh_markers " +
-                "   WHERE lng between %.6f and %.6f AND lat between %.6f and %.6f" +
-                "   ORDER BY distance ASC" +
-                "   LIMIT 10";
-        String query = String.format(queryFmt, EARTH_RADIUS_CONSTANT, lat, lng, lat, lon1, lon2, lat1, lat2);
-        LOGGER.info("QUERY 1: " + query);
-
-        String query2 = String.format(queryFmt2, EARTH_RADIUS_CONSTANT, lat, lng, lat, lon1, lon2, lat1, lat2);
-        LOGGER.info("QUERY 2: " + query2);
-
-        speedCntTotal++;
-        LOGGER.info("NODES: " + speedCntTotal);
-
         return -1;
-//
-//        try {
-//            Statement st = conn.createStatement();
-//
-//            ResultSet rs = st.executeQuery(query);
-//
-//            double speed = -1;
-//            double distance  = 0;
-//
-//            speedCntTotal++;
-//
-//            if (rs.next()) {
-//                speed = rs.getDouble("speed");
-//                distance = rs.getDouble("distance");
-//                speedCnt++;
-//                LOGGER.info(String.format("[%d out of %d] [%.6f, %.6f] SPEED: %.2f. DISTANCE: %.3f",
-//                        speedCnt, speedCntTotal, lat, lng, speed, distance));
-//            }
-//            return speed;
-//        } catch (Exception e) {
-//            return -1;
-//        }
-    }
-
-    private Connection getConnection() {
-        Connection conn = null;
-        try {
-            String url1 = "jdbc:mysql://greenride-api-v2.cuqltrp6td3j.eu-west-1.rds.amazonaws.com/ridematch3?verifyServerCertificate=false&useSSL=true";
-            String user = "greenride_api";
-            String password = "VTaztq5jHemf";
-
-            conn = DriverManager.getConnection(url1, user, password);
-            if (conn != null) {
-                System.out.println("Connected to the database");
-            } else {
-                System.out.println("NOT Connected to the database");
-            }
-        } catch (Exception e) {
-            e.printStackTrace();
-        }
-
-        return  conn;
     }
 
-//    private void loadSpeedData() {
-//        CSVParser parser = null;
-//        List<CSVRecord> list;
-//        try {
-//            parser = new CSVParser(new FileReader("speeds/p0709.csv" ), CSVFormat.DEFAULT);
-//            list = parser.getRecords();
-//            list.sort(new Comparator<CSVRecord>() {
-//                @Override
-//                public int compare(CSVRecord o1, CSVRecord o2) {
-//                    float lat1 = Float.parseFloat(o1.get(1));
-//                    float lat2 = Float.parseFloat(o2.get(1));
-//                    if (lat1 > lat2)
-//                        return 1;
-//                    else if (lat1 < lat2)
-//                        return -1;
-//                    else
-//                        return 0;
-//                }
-//            });
-//            for( CSVRecord row : list ) {
-//                float lng = Float.parseFloat(row.get(0));
-//                float lat = Float.parseFloat(row.get(1));
-//                float speed = Float.parseFloat(row.get(2));
-//            }
-//        } catch (IOException e) {
-//            e.printStackTrace();
-//        }
-//    }
 }
diff --git a/reader-shp/src/main/java/com/graphhopper/reader/shp/GraphHopperSHP.java b/reader-shp/src/main/java/com/graphhopper/reader/shp/GraphHopperSHP.java
index 0c1939d4a0..2be17b50b8 100644
--- a/reader-shp/src/main/java/com/graphhopper/reader/shp/GraphHopperSHP.java
+++ b/reader-shp/src/main/java/com/graphhopper/reader/shp/GraphHopperSHP.java
@@ -35,19 +35,21 @@
 
     private final int shapeFileType;
     private final String speedData;
+    private final String period;
 
     public GraphHopperSHP(int shapeType, CmdArgs args) {
         shapeFileType = shapeType;
         speedData = args.get("speeds.file", null);
+        period = args.get("speeds.period", null);
     }
 
     @Override
     protected DataReader createReader(GraphHopperStorage ghStorage) {
         ShapeFileReader reader;
         if (shapeFileType == 0)
-            reader = new OSMShapeFileReader(ghStorage, speedData);
+            reader = new OSMShapeFileReader(ghStorage, speedData, period);
         else
-            reader = new ITNShapeFileReader(ghStorage, speedData);
+            reader = new ITNShapeFileReader(ghStorage, speedData, period);
         for (EdgeAddedListener l : edgeAddedListeners) {
             reader.addListener(l);
         }
diff --git a/reader-shp/src/main/java/com/graphhopper/reader/shp/ITNShapeFileReader.java b/reader-shp/src/main/java/com/graphhopper/reader/shp/ITNShapeFileReader.java
index 96f3eb24f5..d8106dbda0 100644
--- a/reader-shp/src/main/java/com/graphhopper/reader/shp/ITNShapeFileReader.java
+++ b/reader-shp/src/main/java/com/graphhopper/reader/shp/ITNShapeFileReader.java
@@ -58,8 +58,8 @@
     private int nextNodeId = FIRST_NODE_ID;
     private int totalSpeedsCnt = 0;
 
-    public ITNShapeFileReader(GraphHopperStorage ghStorage, String speedData) {
-        super(ghStorage, speedData);
+    public ITNShapeFileReader(GraphHopperStorage ghStorage, String speedData, String period) {
+        super(ghStorage, speedData, period);
 
 //        LOGGER.info("Number of nodes in speed map : " + speedMap.size());
     }
@@ -171,7 +171,6 @@ void processRoads() {
                             int state = coordState.get(point);
                             if (state >= FIRST_NODE_ID) {
                                 int fromTowerNodeId = coordState.get(startTowerPnt);
-                                int toTowerNodeId = state;
 
                                 // get distance and estimated centres
                                 double distance = getWayLength(startTowerPnt, pillars, point);
@@ -184,7 +183,7 @@ void processRoads() {
                                     pillarNodes.add(lat(pillar), lng(pillar));
                                 }
 
-                                addEdge(fromTowerNodeId, toTowerNodeId, road, distance, estmCentre,
+                                addEdge(fromTowerNodeId, state, road, distance, estmCentre,
                                         pillarNodes);
                                 startTowerPnt = point;
                                 pillars.clear();
@@ -283,7 +282,7 @@ private void addEdge(int fromTower, int toTower, SimpleFeature road, double dist
         if (speed != null) {
             way.setTag("estimated_speed", speed);
             totalSpeedsCnt++;
-            LOGGER.info(String.format("[%d] Found speed info: [%d] => %f KPH    ", totalSpeedsCnt, id, speed));
+            ////AG LOGGER.info(String.format("[%d] Found speed info: [%d] => %f KPH    ", totalSpeedsCnt, id, speed));
         }
 
         // read maxspeed filtering for 0 which for Geofabrik shapefiles appears
@@ -308,41 +307,50 @@ private void addEdge(int fromTower, int toTower, SimpleFeature road, double dist
             // We map back to the standard convention so that tag can be dealt
             // with correctly by the flag encoder.
             String val = oneway.toString().trim().toLowerCase();
-            if (val.equals("b")) {
-                // both ways
-                val = "no";
-            } else if (val.equals("t")) {
-                // one way against the direction of digitisation
-                val = "-1";
-            } else if (val.equals("f")) {
-                // one way Forward in the direction of digitisation
-                val = "yes";
-            } else {
-                throw new RuntimeException("Unrecognised value of oneway field \"" + val
-                        + "\" found in road with OSM id " + id);
-            }
-
-            way.setTag("oneway", val);
-        } else {
-            oneway = road.getAttribute(2);
-            if (oneway != null) {
-                String val = oneway.toString().trim().toLowerCase();
-                if (val.equals("0")) {
+            switch (val) {
+                case "b":
                     // both ways
                     val = "no";
-                } else if (val.equals("-1")) {
+                    break;
+                case "t":
                     // one way against the direction of digitisation
                     val = "-1";
-                } else if (val.equals("1")) {
+                    break;
+                case "f":
                     // one way Forward in the direction of digitisation
                     val = "yes";
-                } else {
+                    break;
+                default:
                     throw new RuntimeException("Unrecognised value of oneway field \"" + val
                             + "\" found in road with OSM id " + id);
+            }
+
+            way.setTag("oneway", val);
+        } else {
+            oneway = road.getAttribute(2);
+            if (oneway != null) {
+                String val = oneway.toString().trim().toLowerCase();
+                String val2;
+                switch (val) {
+                    case "0":
+                        // both ways
+                        val2 = "no";
+                        break;
+                    case "-1":
+                        // one way against the direction of digitisation
+                        val2 = "-1";
+                        break;
+                    case "1":
+                        // one way Forward in the direction of digitisation
+                        val2 = "yes";
+                        break;
+                    default:
+                        throw new RuntimeException("Unrecognised value of oneway field \"" + val
+                                + "\" found in road with OSM id " + id);
                 }
 
-                LOGGER.debug("Oneway : ", val);
-                way.setTag("oneway", val);
+                LOGGER.info(String.format("Oneway [%s] => %s", val, val2));
+                way.setTag("oneway", val2);
             }
         }
 
@@ -392,16 +400,26 @@ private String translateHighwayType(Integer type) {
          */
         Map<Integer, String> roadTypes = new HashMap<Integer, String>()
         {{
+//            put(3000, "motorway");
+//            put(3001, "motorway");
+//            put(3002, "motorroad");
+//            put(3004, "secondary_link");
+//            put(3006, "tertiary");
+//            put(3007, "residential");
+//            put(3008, "tertiary");
+//            put(3009, "unclassified");
+//            put(3010, "unclassified");
+//            put(3011, "unclassified");
             put(3000, "motorway");
             put(3001, "motorway");
             put(3002, "motorroad");
-            put(3004, "secondary_link");
-            put(3006, "tertiary");
-            put(3007, "residential");
-            put(3008, "tertiary");
-            put(3009, "unclassified");
-            put(3010, "unclassified");
-            put(3011, "unclassified");
+            put(3004, "residential");
+            put(3006, "residential");
+            put(3007, "tertiary");
+            put(3008, "residential");
+            put(3009, "residential");
+            put(3010, "residential");
+            put(3011, "residential");
         }};
 
         String highwayType = roadTypes.get(type);
@@ -409,7 +427,7 @@ private String translateHighwayType(Integer type) {
             highwayType = "residential";
         }
 
-        LOGGER.debug("Highway Type: ", highwayType);
+        //AG LOGGER.info(String.format("[%d] Highway Type: %s", type, highwayType));
         return highwayType;
     }
 }
diff --git a/reader-shp/src/main/java/com/graphhopper/reader/shp/OSMShapeFileReader.java b/reader-shp/src/main/java/com/graphhopper/reader/shp/OSMShapeFileReader.java
index 0e7a47cf45..ba69153cfd 100644
--- a/reader-shp/src/main/java/com/graphhopper/reader/shp/OSMShapeFileReader.java
+++ b/reader-shp/src/main/java/com/graphhopper/reader/shp/OSMShapeFileReader.java
@@ -60,8 +60,8 @@
     private static final Logger LOGGER = LoggerFactory.getLogger(OSMShapeFileReader.class);
     private int nextNodeId = FIRST_NODE_ID;
 
-    public OSMShapeFileReader(GraphHopperStorage ghStorage, String speedData) {
-        super(ghStorage, speedData);
+    public OSMShapeFileReader(GraphHopperStorage ghStorage, String speedData, String period) {
+        super(ghStorage, speedData, period);
     }
 
     private List<Coordinate[]> getCoords(Object o) {
diff --git a/reader-shp/src/main/java/com/graphhopper/reader/shp/ShapeFileReader.java b/reader-shp/src/main/java/com/graphhopper/reader/shp/ShapeFileReader.java
index fa3e83c679..e63a5ea52b 100644
--- a/reader-shp/src/main/java/com/graphhopper/reader/shp/ShapeFileReader.java
+++ b/reader-shp/src/main/java/com/graphhopper/reader/shp/ShapeFileReader.java
@@ -57,13 +57,13 @@
 
     protected EncodingManager encodingManager;
 
-    private static final Logger LOGGER = LoggerFactory.getLogger(ITNShapeFileReader.class);
+    private static final Logger LOGGER = LoggerFactory.getLogger(ShapeFileReader.class);
 
     private final GraphStorage graphStorage;
     private final NodeAccess nodeAccess;
     protected final Graph graph;
 
-    public ShapeFileReader(GraphHopperStorage ghStorage, String speedData) {
+    public ShapeFileReader(GraphHopperStorage ghStorage, String speedData, String period) {
         this.graphStorage = ghStorage;
         this.graph = ghStorage;
         this.nodeAccess = graph.getNodeAccess();
@@ -71,7 +71,8 @@ public ShapeFileReader(GraphHopperStorage ghStorage, String speedData) {
         this.speedData = speedData;
 
         if (this.speedData != null) {
-            loadSpeedData("PeakAm0709MonFri_2");
+            loadSpeedData(period);
+//            loadSpeedData("OffPeak1016MonFri");
         }
     }
 
@@ -157,13 +158,14 @@ private void loadSpeedData(String columnName) {
 //                else
 //                    return 0;
 //            });
+            double factor = 1;//1.60934;
             // Get speeds and convert to KPH (x 1.60934)
             for( CSVRecord row : list ) {
                 String id = row.get("RoadLinkId");
-                double speed = Double.parseDouble(row.get(columnName)) * 1.60934;
-                if (speedMap.get(id) != null) {
-                    LOGGER.info("Key found: " + id);
-                }
+                double speed = Double.parseDouble(row.get(columnName)) * factor;
+//                if (speedMap.get(id) != null) {
+//                    LOGGER.info("Key found: " + id);
+//                }
                 speedMap.put(id.substring(4), speed);
             }
             LOGGER.info("Number of nodes in speed map : " + speedMap.size());
