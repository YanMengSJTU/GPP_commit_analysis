diff --git a/core/src/main/java/com/graphhopper/GraphHopper.java b/core/src/main/java/com/graphhopper/GraphHopper.java
index ec67ee68bc..037dc0354f 100644
--- a/core/src/main/java/com/graphhopper/GraphHopper.java
+++ b/core/src/main/java/com/graphhopper/GraphHopper.java
@@ -1033,7 +1033,7 @@ public GHResponse route( GHRequest request )
         return response;
     }
 
-    protected List<Path> calcPaths( GHRequest request, GHResponse ghRsp )
+    public List<Path> calcPaths( GHRequest request, GHResponse ghRsp )
     {
         if (ghStorage == null || !fullyLoaded)
             throw new IllegalStateException("Call load or importOrLoad before routing");
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetHopper.java b/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetHopper.java
index 36c7719f99..19ae0f69e7 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetHopper.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetHopper.java
@@ -42,7 +42,7 @@ public void init()
         hopper.init(args);
         hopper.importOrLoad();
 
-        cellsGraph = new CellsGraph(hopper.getGraphHopperStorage(), 10);
+        cellsGraph = new CellsGraph(hopper.getGraphHopperStorage().getBaseGraph(), 10);
         cellsGraph.init();
 
         int count = args.getInt("marmoset.vehicles", 1000);
@@ -53,7 +53,7 @@ public void init()
         ArrayList<Double> lats = latRan.doubles(51.2, 51.7).limit(count * 2).boxed().collect(Collectors.toCollection(ArrayList::new));
 
         vehicles = IntStream.range(0, count).map(c -> c * 2)
-                .mapToObj(c -> new Vehicle(this, new Location(lats.get(c), lons.get(c)), new Location(c+1, c+1)))
+                .mapToObj(c -> new Vehicle(this, new Location(lats.get(c), lons.get(c)), new Location(lats.get(c+1), lons.get(c+1))))
                 .collect(Collectors.toCollection(ArrayList::new));
     }
 
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetSocketServer.java b/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetSocketServer.java
index 91dcd2e029..7088b4792c 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetSocketServer.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetSocketServer.java
@@ -17,14 +17,12 @@
     public MarmosetSocketServer(InetSocketAddress address)
     {
         super(address);
-        sockets = new HashSet<WebSocket>();
+        sockets = new HashSet<>();
     }
 
     public void distributeData(String s)
     {
-        for (WebSocket socket : sockets) {
-            socket.send(s);
-        }
+        sockets.stream().forEach(socket -> socket.send(s));
     }
 
     @Override
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/Vehicle.java b/marmoset/src/main/java/com/graphhopper/marmoset/Vehicle.java
index 695bc57e38..4eec50919a 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/Vehicle.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/Vehicle.java
@@ -1,8 +1,11 @@
 package com.graphhopper.marmoset;
 
+import com.graphhopper.GHRequest;
+import com.graphhopper.GHResponse;
 import com.graphhopper.GraphHopper;
 import com.graphhopper.marmoset.util.CellsGraph;
 import com.graphhopper.marmoset.util.Location;
+import com.graphhopper.routing.Path;
 import com.graphhopper.routing.util.EdgeFilter;
 import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.storage.GraphHopperStorage;
@@ -11,7 +14,10 @@
 import com.graphhopper.util.*;
 import com.graphhopper.util.shapes.GHPoint3D;
 
+import java.util.List;
+import java.util.OptionalInt;
 import java.util.Random;
+import java.util.stream.Collectors;
 
 /**
  * Created by alexander on 16/02/2016.
@@ -33,6 +39,9 @@
     private float slowProb;
     private byte maxVelocity = 5;
 
+    private List<EdgeIteratorState> edgeList;
+    private int edgeIndex;
+
     private CellsGraph cg;
 
     public Vehicle(MarmosetHopper hopper, Location start, Location dest)
@@ -58,14 +67,25 @@ public void init()
         cg = hopper.getCellsGraph();
 
         GraphHopper gh = hopper.getGraphHopper();
-        LocationIndex locationIndex = gh.getLocationIndex();
-        QueryResult closest = locationIndex.findClosest(loc.getLat(), loc.getLon(), EdgeFilter.ALL_EDGES);
-        EdgeIteratorState e = closest.getClosestEdge();
-        System.out.println(e);
-        edgeId = closest.getClosestEdge().getEdge();
-        adjId = closest.getClosestEdge().getAdjNode();
-        GHPoint3D p = closest.getSnappedPoint();
-        loc.set(p.lat, p.lon);
+
+        GHRequest ghRequest = new GHRequest(loc.getLat(), loc.getLon(), dest.getLat(), dest.getLon());
+        System.out.println(loc + "->" + dest);
+        GHResponse ghResponse = new GHResponse();
+        List<Path> paths = gh.calcPaths(ghRequest, ghResponse);
+        if (ghResponse.hasErrors())
+            System.out.println("ERRORS:" + ghResponse.getErrors().stream().map(Throwable::toString).collect(Collectors.joining("\n")));
+
+        edgeList = paths.get(0).calcEdges();
+        // start from 1 to avoid the 'fake' edge added by the query graph
+        edgeIndex = 1;
+
+        EdgeIteratorState e = edgeList.get(edgeIndex);
+        int maxId = edgeList.stream().mapToInt(EdgeIteratorState::getEdge).max().getAsInt();
+        int minId = edgeList.stream().mapToInt(EdgeIteratorState::getEdge).min().getAsInt();
+        edgeId = e.getEdge();
+        System.out.println("edge id: " + edgeId);
+        System.out.println("max edge id: " + maxId);
+        System.out.println("min edge id: " + minId);
 
         cg.set(edgeId, cellId, v);
     }
@@ -110,10 +130,8 @@ public void moveStep()
 
     public void updateLocation()
     {
-        double progress = cellId / (float) cg.getCellCount(edgeId);
-        GraphHopper gh = hopper.getGraphHopper();
-        GraphHopperStorage graph = gh.getGraphHopperStorage();
-        EdgeIteratorState edge = graph.getEdgeIteratorState(edgeId, adjId);
+        double progress = cellId / (float) (cg.getCellCount(edgeId)+1);
+        EdgeIteratorState edge = edgeList.get(edgeIndex);
 
         PointList path = edge.fetchWayGeometry(3);
         if (path.isEmpty())
@@ -141,7 +159,10 @@ public void updateLocation()
                 double newLat = path.getLat(i) + partProgress * (path.getLat(i + 1) - path.getLat(i));
                 double newLon = path.getLon(i) + partProgress * (path.getLon(i + 1) - path.getLon(i));
                 loc.set(newLat, newLon);
-                return;
+                if (currDist + nextDist > dist)
+                {
+                    edgeIndex++;
+                }
             }
             currDist += nextDist;
         }
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/util/CellsGraph.java b/marmoset/src/main/java/com/graphhopper/marmoset/util/CellsGraph.java
index 2c97b17dd1..5682fcdb2d 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/util/CellsGraph.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/util/CellsGraph.java
@@ -23,7 +23,8 @@ public void init()
         cells = new byte[iterator.getMaxId()][];
         while (iterator.next())
         {
-            cells[iterator.getEdge()] = new byte[(int) (iterator.getDistance() / cellSize)];
+            int cellCount = Math.max(1, (int) (iterator.getDistance() / cellSize));
+            cells[iterator.getEdge()] = new byte[cellCount];
             totalDist += iterator.getDistance();
         }
     }
@@ -62,7 +63,7 @@ public void set(int edgeId, int cellId, byte v)
                     String.format("EdgeId '%d' out of bounds (max %d)", edgeId, cells.length));
         if (cellId >= cells[edgeId].length)
             throw new ArrayIndexOutOfBoundsException(
-                    String.format("CellId '%d' out of bounds (max %d)", cellId, cells[edgeId].length));
+                    String.format("CellId '%d' out of bounds (max %d) for edge %d", cellId, cells[edgeId].length, edgeId));
 
         cells[edgeId][cellId] = v;
     }
