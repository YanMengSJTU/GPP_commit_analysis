diff --git a/core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
index 68914da325..f7debdc241 100644
--- a/core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
@@ -112,7 +112,7 @@ public CarFlagEncoder( int speedBits, double speedFactor, int maxTurnCosts )
         badSurfaceSpeedMap.add("ground");
         badSurfaceSpeedMap.add("grass");
 
-        maxPossibleSpeed = SEVENTY_MPH_IN_KPH;
+        maxPossibleSpeed = 100;
         
         // autobahn
         defaultSpeedMap.put("motorway", 100);
diff --git a/core/src/test/java/com/graphhopper/routing/util/CarFlagEncoderTest.java b/core/src/test/java/com/graphhopper/routing/util/CarFlagEncoderTest.java
index f350ad6851..ff6e96d6f1 100644
--- a/core/src/test/java/com/graphhopper/routing/util/CarFlagEncoderTest.java
+++ b/core/src/test/java/com/graphhopper/routing/util/CarFlagEncoderTest.java
@@ -168,7 +168,7 @@ public void testMaxSpeed()
         way.setTag("maxspeed", "500");
         long allowed = encoder.acceptWay(way);
         long encoded = encoder.handleWayTags(way, allowed, 0);
-        assertEquals(110, encoder.getSpeed(encoded), 1e-1);
+        assertEquals(100, encoder.getSpeed(encoded), 1e-1);
 
         way = new OSMWay(1);
         way.setTag("highway", "primary");
@@ -239,21 +239,21 @@ public void testMaxSpeedType()
         way.setTag("maxspeed:type", "GB:nsl_dual");
         long allowed = encoder.acceptWay(way);
         long encoded = encoder.handleWayTags(way, allowed, 0);
-        assertEquals(Math.round(CarFlagEncoder.SEVENTY_MPH_IN_KPH/5)*5, encoder.getSpeed(encoded), 1e-1);
+        assertEquals(truncateSpeedToMax(), encoder.getSpeed(encoded), 1e-1);
 
         way.clearTags();
         way.setTag("highway", "secondary");
         way.setTag("maxspeed:type", "GB:nsl_single");
         allowed = encoder.acceptWay(way);
         encoded = encoder.handleWayTags(way, allowed, 0);
-        assertEquals(Math.round(CarFlagEncoder.SIXTY_MPH_IN_KPH/5)*5, encoder.getSpeed(encoded), 1e-1);
+        assertEquals(factorSpeed(CarFlagEncoder.SIXTY_MPH_IN_KPH), encoder.getSpeed(encoded), 1e-1);
 
         way.clearTags();
         way.setTag("highway", "motorway");
         way.setTag("maxspeed:type", "GB:motorway");
         allowed = encoder.acceptWay(way);
         encoded = encoder.handleWayTags(way, allowed, 0);
-        assertEquals(Math.round(CarFlagEncoder.SEVENTY_MPH_IN_KPH/5)*5, encoder.getSpeed(encoded), 1e-1);
+        assertEquals(truncateSpeedToMax(), encoder.getSpeed(encoded), 1e-1);
 
         way.clearTags();
         way.setTag("highway", "secondary");
@@ -261,7 +261,7 @@ public void testMaxSpeedType()
         way.setTag("maxspeed:type", "GB:nsl_single");
         allowed = encoder.acceptWay(way);
         encoded = encoder.handleWayTags(way, allowed, 0);
-        assertEquals(Math.round(CarFlagEncoder.THIRTY_MPH_IN_KPH/5)*5, encoder.getSpeed(encoded), 1e-1);
+        assertEquals(factorSpeed(CarFlagEncoder.THIRTY_MPH_IN_KPH), encoder.getSpeed(encoded), 1e-1);
 
         try
         {
@@ -272,6 +272,17 @@ public void testMaxSpeedType()
         }
     }
 
+	private int truncateSpeedToMax()
+    {
+	    int factorSpeed = factorSpeed(CarFlagEncoder.SEVENTY_MPH_IN_KPH);
+		return factorSpeed>encoder.maxPossibleSpeed?encoder.maxPossibleSpeed:factorSpeed;
+    }
+
+	private int factorSpeed(int speed )
+    {
+	    return Math.round(speed/5)*5;
+    }
+
     @Test
     public void testSetSpeed()
     {
@@ -483,7 +494,7 @@ public void testMaxValue()
         way.setTag("highway", "motorway_link");
         way.setTag("maxspeed", "70 mph");
         flags = instance.handleWayTags(way, 1, 0);
-        assertEquals(101.5, instance.getSpeed(flags), 1e-1);
+        assertEquals(100, instance.getSpeed(flags), 1e-1);
     }
 
     @Test
