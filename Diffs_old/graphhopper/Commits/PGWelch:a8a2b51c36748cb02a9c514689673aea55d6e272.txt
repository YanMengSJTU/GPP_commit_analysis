diff --git a/reader-shp/src/main/java/com/graphhopper/reader/shp/GraphhopperShp.java b/reader-shp/src/main/java/com/graphhopper/reader/shp/GraphhopperShp.java
index a4c1492547..d5beccdf1c 100644
--- a/reader-shp/src/main/java/com/graphhopper/reader/shp/GraphhopperShp.java
+++ b/reader-shp/src/main/java/com/graphhopper/reader/shp/GraphhopperShp.java
@@ -10,17 +10,16 @@
 public class GraphhopperShp extends GraphHopper {
 	private final HashSet<EdgeAddedListener> edgeAddedListeners = new HashSet<>();
 
-    @Override
-    protected DataReader createReader(GraphHopperStorage ghStorage) {
-    	OSMShapeFileReader reader= new OSMShapeFileReader(ghStorage);
-    	for(EdgeAddedListener l:edgeAddedListeners){
-    		reader.addListener(l);
-    	}
-        return initDataReader(reader);
-    }
-    
+	@Override
+	protected DataReader createReader(GraphHopperStorage ghStorage) {
+		OSMShapeFileReader reader = new OSMShapeFileReader(ghStorage);
+		for (EdgeAddedListener l : edgeAddedListeners) {
+			reader.addListener(l);
+		}
+		return initDataReader(reader);
+	}
 
-	public void addListener(EdgeAddedListener l){
+	public void addListener(EdgeAddedListener l) {
 		edgeAddedListeners.add(l);
 	}
 
diff --git a/reader-shp/src/main/java/com/graphhopper/reader/shp/OSMShapeFileReader.java b/reader-shp/src/main/java/com/graphhopper/reader/shp/OSMShapeFileReader.java
index b693b83791..7a21c3149c 100644
--- a/reader-shp/src/main/java/com/graphhopper/reader/shp/OSMShapeFileReader.java
+++ b/reader-shp/src/main/java/com/graphhopper/reader/shp/OSMShapeFileReader.java
@@ -108,7 +108,7 @@ void processJunctions() throws IOException {
 								int nodeId = nextNodeId++;
 								coordState.put(c, nodeId);
 								saveTowerPosition(nodeId, c);
-							} else if(state == COORD_STATE_UNKNOWN){
+							} else if (state == COORD_STATE_UNKNOWN) {
 								// mark it as a pillar (which may get upgraded to an edge later)
 								coordState.put(c, COORD_STATE_PILLAR);
 							}
diff --git a/reader-shp/src/main/java/com/graphhopper/reader/shp/ShapeFileReader.java b/reader-shp/src/main/java/com/graphhopper/reader/shp/ShapeFileReader.java
index 5cbed55fad..5d012ef9d9 100644
--- a/reader-shp/src/main/java/com/graphhopper/reader/shp/ShapeFileReader.java
+++ b/reader-shp/src/main/java/com/graphhopper/reader/shp/ShapeFileReader.java
@@ -1,12 +1,10 @@
 package com.graphhopper.reader.shp;
 
-import com.graphhopper.reader.DataReader;
-import com.graphhopper.routing.util.EncodingManager;
-import com.graphhopper.routing.util.FlagEncoder;
-import com.graphhopper.storage.*;
-import com.graphhopper.util.EdgeIteratorState;
-import com.graphhopper.util.PointList;
-import com.vividsolutions.jts.geom.Coordinate;
+import java.io.File;
+import java.io.IOException;
+import java.util.HashMap;
+import java.util.Map;
+
 import org.geotools.data.DataStore;
 import org.geotools.data.DataStoreFinder;
 import org.geotools.data.FeatureSource;
@@ -15,13 +13,14 @@
 import org.opengis.feature.simple.SimpleFeature;
 import org.opengis.feature.simple.SimpleFeatureType;
 import org.opengis.filter.Filter;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
 
-import java.io.File;
-import java.io.IOException;
-import java.util.HashMap;
-import java.util.Map;
+import com.graphhopper.reader.DataReader;
+import com.graphhopper.routing.util.EncodingManager;
+import com.graphhopper.storage.Graph;
+import com.graphhopper.storage.GraphHopperStorage;
+import com.graphhopper.storage.GraphStorage;
+import com.graphhopper.storage.NodeAccess;
+import com.vividsolutions.jts.geom.Coordinate;
 
 /**
  * ShapeFileReader takes care of reading a shape file and writing it to a road network graph
@@ -35,8 +34,6 @@
 	protected final Graph graph;
 	protected EncodingManager encodingManager;
 
-	private static final Logger LOGGER = LoggerFactory.getLogger(ShapeFileReader.class);
-
 	public ShapeFileReader(GraphHopperStorage ghStorage) {
 		this.graphStorage = ghStorage;
 		this.graph = ghStorage;
@@ -55,7 +52,6 @@ public void readGraph() throws IOException {
 
 	abstract void processRoads() throws IOException;
 
-
 	protected FeatureIterator<SimpleFeature> getFeatureIerator(DataStore dataStore) throws IOException {
 		String typeName = dataStore.getTypeNames()[0];
 		FeatureSource<SimpleFeatureType, SimpleFeature> source = dataStore.getFeatureSource(typeName);
diff --git a/reader-shp/src/main/java/com/graphhopper/reader/shp/Utils.java b/reader-shp/src/main/java/com/graphhopper/reader/shp/Utils.java
index 7aafb7ffe1..2a36a51499 100644
--- a/reader-shp/src/main/java/com/graphhopper/reader/shp/Utils.java
+++ b/reader-shp/src/main/java/com/graphhopper/reader/shp/Utils.java
@@ -5,13 +5,13 @@
 import com.vividsolutions.jts.geom.GeometryFactory;
 
 public class Utils {
-	public static String toWKT(PointList list){
+	public static String toWKT(PointList list) {
 		int n = list.size();
 		GeometryFactory factory = new GeometryFactory();
-		Coordinate [] coords = new Coordinate[n];
-		for(int i =0 ; i< coords.length ; i++){
+		Coordinate[] coords = new Coordinate[n];
+		for (int i = 0; i < coords.length; i++) {
 			coords[i] = new Coordinate(list.getLon(i), list.getLat(i));
 		}
-		return factory.createLineString(coords).toText();	
+		return factory.createLineString(coords).toText();
 	}
 }
diff --git a/reader-shp/src/test/java/com/graphhopper/reader/shp/ShapeFileReaderTest.java b/reader-shp/src/test/java/com/graphhopper/reader/shp/ShapeFileReaderTest.java
index c32d7122b4..4c6c6c57d9 100644
--- a/reader-shp/src/test/java/com/graphhopper/reader/shp/ShapeFileReaderTest.java
+++ b/reader-shp/src/test/java/com/graphhopper/reader/shp/ShapeFileReaderTest.java
@@ -231,8 +231,9 @@ GHPoint randPoint(){
 			double pbfSecs = getSecondsTravel(pbfPath);
 
 			double frac = shpSecs / pbfSecs;
-			stats.accept(frac);
-			System.out.println( "" + (i+1) + " from " + pair.from + " to " + pair.to + " pbfSecs=" + pbfSecs + " shpSecs=" + shpSecs + " frac=" + frac);
+			double percentageDeviation = Math.abs(1.0 - frac) * 100;
+			stats.accept(percentageDeviation);
+			System.out.println( "" + (i+1) + " from " + pair.from + " to " + pair.to + " pbfSecs=" + pbfSecs + " shpSecs=" + shpSecs + " % deviation=" + percentageDeviation);
 		}
 		
 		assertTrue("Number of fails should be small for the chosen box",nbFails < nTests /3);
@@ -240,10 +241,8 @@ GHPoint randPoint(){
 		// Test mean fraction. There will be some deviation as not all tags are considered etc,
 		// but we expect it to be small for a large number of tests
 		double mean = stats.getAverage();
-		System.out.println("Mean fraction between times " +mean);
-		double tol = 0.02;
-		assertTrue(mean > 1 - tol);
-		assertTrue(mean < 1 + tol);
+		System.out.println("Mean % deviation between times " +mean);
+		assertTrue(mean < 1.0);
 	}
 	
 	
