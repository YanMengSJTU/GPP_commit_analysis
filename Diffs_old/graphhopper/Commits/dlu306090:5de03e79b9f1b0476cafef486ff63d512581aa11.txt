diff --git a/android/app/build.gradle b/android/app/build.gradle
index fd5678e3c2..6bfc1880e8 100644
--- a/android/app/build.gradle
+++ b/android/app/build.gradle
@@ -6,7 +6,7 @@ android {
 
     defaultConfig {
         applicationId "com.graphhopper.android"
-        minSdkVersion 10
+        minSdkVersion 21
         targetSdkVersion 22
     }
 
diff --git a/android/app/src/main/AndroidManifest.xml b/android/app/src/main/AndroidManifest.xml
index 2c982f8ef6..6b3c208fc0 100644
--- a/android/app/src/main/AndroidManifest.xml
+++ b/android/app/src/main/AndroidManifest.xml
@@ -17,7 +17,7 @@
 
     <application
         android:allowBackup="true"
-        android:icon="@drawable/logo"
+        android:icon="@drawable/navax_icon3"
         android:label="@string/app_name"
         android:theme="@style/AppTheme" >
         <activity
diff --git a/android/app/src/main/java/com/graphhopper/android/MainActivity.java b/android/app/src/main/java/com/graphhopper/android/MainActivity.java
index 2b3c20c968..5d41c4b5d1 100644
--- a/android/app/src/main/java/com/graphhopper/android/MainActivity.java
+++ b/android/app/src/main/java/com/graphhopper/android/MainActivity.java
@@ -1,7 +1,6 @@
 package com.graphhopper.android;
 
 import android.app.Activity;
-import android.app.ProgressDialog;
 import android.content.Intent;
 import android.graphics.Path;
 import android.graphics.drawable.Drawable;
@@ -16,11 +15,9 @@
 import android.view.View;
 import android.view.View.OnClickListener;
 import android.view.Window;
-import android.widget.ArrayAdapter;
 import android.widget.Button;
-import android.widget.EditText;
+import android.widget.CheckBox;
 import android.widget.Spinner;
-import android.widget.TextView;
 import android.widget.Toast;
 import android.content.Context;
 import android.location.Location;
@@ -32,11 +29,9 @@
 import com.graphhopper.GraphHopper;
 import com.graphhopper.PathWrapper;
 import com.graphhopper.util.Constants;
-import com.graphhopper.util.Helper;
 import com.graphhopper.util.Parameters.Algorithms;
 import com.graphhopper.util.Parameters.Routing;
 import com.graphhopper.util.PointList;
-import com.graphhopper.util.ProgressListener;
 import com.graphhopper.util.StopWatch;
 
 import org.oscim.android.MapView;
@@ -60,12 +55,8 @@
 import org.oscim.tiling.source.mapfile.MapFileTileSource;
 
 import java.io.File;
-import java.io.FilenameFilter;
 import java.util.ArrayList;
-import java.util.Collections;
 import java.util.List;
-import java.util.Map;
-import java.util.TreeMap;
 
 public class MainActivity extends Activity implements LocationListener {
     private static final int NEW_MENU_ID = Menu.FIRST + 1;
@@ -75,16 +66,14 @@
     private GeoPoint end;
     private LocationManager locationManager;
     private MarkerItem locationMarker;
-    private Spinner localSpinner;
-    private Button localButton;
-    private Spinner remoteSpinner;
-    private Button remoteButton;
-    private volatile boolean prepareInProgress = false;
+    private volatile boolean prepareInProgress = true;
     private volatile boolean shortestPathRunning = false;
-    private String currentArea = "berlin";
+    private boolean isCheckedSteps;
+    private boolean isCheckedUpaths;
+    private boolean isCheckedInclines;
+    private String inclineValue;
+    private String currentArea = "new-jersey";
     private String fileListURL = "http://download2.graphhopper.com/public/maps/" + Constants.getMajorVersion() + "/";
-    private String prefixURL = fileListURL;
-    private String downloadURL;
     private File mapsFolder;
     private ItemizedLayer<MarkerItem> itemizedLayer;
     private PathLayer pathLayer;
@@ -100,10 +89,8 @@ public void onLocationChanged(Location location) {
 
     public void onStatusChanged(String s, int i, Bundle bundle) {}
 
-
     public void onProviderEnabled(String s) {}
 
-
     public void onProviderDisabled(String s) {}
 
     protected boolean onLongPress(GeoPoint p) {
@@ -134,8 +121,8 @@ protected boolean onLongPress(GeoPoint p) {
             // Map position
             Location lastLocation = getLastBestLocation();
             GeoPoint locationPoint = new GeoPoint(lastLocation.getLatitude(), lastLocation.getLongitude());
-            locationMarker = createMarkerItem(locationPoint, R.drawable.marker_icon_current_location);
-            itemizedLayer.addItem(locationMarker);
+//            locationMarker = createMarkerItem(locationPoint, R.drawable.marker_icon_current_location); --- put back after MS
+//            itemizedLayer.addItem(locationMarker); --- put back after MS
 
             itemizedLayer.addItem(createMarkerItem(start, R.drawable.marker_icon_green));
             mapView.map().updateMap(true);
@@ -147,19 +134,17 @@ protected boolean onLongPress(GeoPoint p) {
     protected void onCreate(Bundle savedInstanceState) {
         requestWindowFeature(Window.FEATURE_NO_TITLE);
         super.onCreate(savedInstanceState);
-        setContentView(R.layout.main);
+        setContentView(R.layout.main2);
 
         Tile.SIZE = Tile.calculateTileSize(getResources().getDisplayMetrics().scaledDensity);
         mapView = new MapView(this);
         locationManager = (LocationManager) getSystemService(Context.LOCATION_SERVICE);
         locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 0, 0, this);
 
-        final EditText input = new EditText(this);
-        input.setText(currentArea);
         boolean greaterOrEqKitkat = Build.VERSION.SDK_INT >= 19;
         if (greaterOrEqKitkat) {
             if (!Environment.getExternalStorageState().equals(Environment.MEDIA_MOUNTED)) {
-                logUser("GraphHopper is not usable without an external storage!");
+                logUser("NAVAX is not usable without an external storage!");
                 return;
             }
             mapsFolder = new File(Environment.getExternalStoragePublicDirectory(Environment.DIRECTORY_DOWNLOADS),
@@ -167,20 +152,19 @@ protected void onCreate(Bundle savedInstanceState) {
         } else
             mapsFolder = new File(Environment.getExternalStorageDirectory(), "/graphhopper/maps/");
 
-        if (!mapsFolder.exists())
-            mapsFolder.mkdirs();
-
-        TextView welcome = (TextView) findViewById(R.id.welcome);
-        welcome.setText("Welcome to GraphHopper " + Constants.VERSION + "!");
-        welcome.setPadding(6, 3, 3, 3);
-        localSpinner = (Spinner) findViewById(R.id.locale_area_spinner);
-        localButton = (Button) findViewById(R.id.locale_button);
-        remoteSpinner = (Spinner) findViewById(R.id.remote_area_spinner);
-        remoteButton = (Button) findViewById(R.id.remote_button);
-        // TODO get user confirmation to download
-        // if (AndroidHelper.isFastDownload(this))
-        chooseAreaFromRemote();
-        chooseAreaFromLocal();
+        Button button = (Button) findViewById(R.id.start_button);
+        button.setOnClickListener(new OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                isCheckedSteps = ((CheckBox)findViewById(R.id.steps)).isChecked();
+                isCheckedUpaths = ((CheckBox)findViewById(R.id.unpaved_paths)).isChecked();
+                isCheckedInclines = ((CheckBox)findViewById(R.id.inclines)).isChecked();
+                inclineValue = ((Spinner) findViewById(R.id.inclines_spinner))
+                        .getSelectedItem().toString();
+                        File areaFolder = new File(mapsFolder, currentArea + "-gh");
+                loadMap(areaFolder);
+            }
+        });
     }
 
     @Override
@@ -218,170 +202,63 @@ boolean isReady() {
             logUser("Preparation still in progress");
             return false;
         }
-        logUser("Prepare finished but hopper not ready. This happens when there was an error while loading the files");
+        logUser("Prepare finished but app not ready. This happens when there was an error while loading the files.");
         return false;
     }
 
-    private void initFiles(String area) {
-        prepareInProgress = true;
-        currentArea = area;
-        downloadingFiles();
-    }
-
-    private void chooseAreaFromLocal() {
-        List<String> nameList = new ArrayList<>();
-        String[] files = mapsFolder.list(new FilenameFilter() {
-            @Override
-            public boolean accept(File dir, String filename) {
-                return filename != null
-                        && (filename.endsWith(".ghz") || filename
-                        .endsWith("-gh"));
-            }
-        });
-        Collections.addAll(nameList, files);
-
-        if (nameList.isEmpty())
-            return;
-
-        chooseArea(localButton, localSpinner, nameList,
-                new MySpinnerListener() {
-                    @Override
-                    public void onSelect(String selectedArea, String selectedFile) {
-                        initFiles(selectedArea);
-                    }
-                });
-    }
-
-    private void chooseAreaFromRemote() {
-        new GHAsyncTask<Void, Void, List<String>>() {
-            protected List<String> saveDoInBackground(Void... params)
-                    throws Exception {
-                String[] lines = new AndroidDownloader().downloadAsString(fileListURL, false).split("\n");
-                List<String> res = new ArrayList<>();
-                for (String str : lines) {
-                    int index = str.indexOf("href=\"");
-                    if (index >= 0) {
-                        index += 6;
-                        int lastIndex = str.indexOf(".ghz", index);
-                        if (lastIndex >= 0)
-                            res.add(prefixURL + str.substring(index, lastIndex)
-                                    + ".ghz");
-                    }
-                }
-
-                return res;
-            }
-
-            @Override
-            protected void onPostExecute(List<String> nameList) {
-                if (hasError()) {
-                    getError().printStackTrace();
-                    logUser("Are you connected to the internet? Problem while fetching remote area list: "
-                            + getErrorMessage());
-                    return;
-                } else if (nameList == null || nameList.isEmpty()) {
-                    logUser("No maps created for your version!? " + fileListURL);
-                    return;
-                }
-
-                MySpinnerListener spinnerListener = new MySpinnerListener() {
-                    @Override
-                    public void onSelect(String selectedArea, String selectedFile) {
-                        if (selectedFile == null
-                                || new File(mapsFolder, selectedArea + ".ghz").exists()
-                                || new File(mapsFolder, selectedArea + "-gh").exists()) {
-                            downloadURL = null;
-                        } else {
-                            downloadURL = selectedFile;
-                        }
-                        initFiles(selectedArea);
-                    }
-                };
-                chooseArea(remoteButton, remoteSpinner, nameList,
-                        spinnerListener);
-            }
-        }.execute();
-    }
-
-    private void chooseArea(Button button, final Spinner spinner,
-                            List<String> nameList, final MySpinnerListener myListener) {
-        final Map<String, String> nameToFullName = new TreeMap<>();
-        for (String fullName : nameList) {
-            String tmp = Helper.pruneFileEnd(fullName);
-            if (tmp.endsWith("-gh"))
-                tmp = tmp.substring(0, tmp.length() - 3);
-
-            tmp = AndroidHelper.getFileName(tmp);
-            nameToFullName.put(tmp, fullName);
-        }
-        nameList.clear();
-        nameList.addAll(nameToFullName.keySet());
-        ArrayAdapter<String> spinnerArrayAdapter = new ArrayAdapter<>(
-                this, android.R.layout.simple_spinner_dropdown_item, nameList);
-        spinner.setAdapter(spinnerArrayAdapter);
-        button.setOnClickListener(new OnClickListener() {
-            @Override
-            public void onClick(View v) {
-                Object o = spinner.getSelectedItem();
-                if (o != null && o.toString().length() > 0 && !nameToFullName.isEmpty()) {
-                    String area = o.toString();
-                    myListener.onSelect(area, nameToFullName.get(area));
-                } else {
-                    myListener.onSelect(null, null);
-                }
-            }
-        });
-    }
-
-    void downloadingFiles() {
-        final File areaFolder = new File(mapsFolder, currentArea + "-gh");
-        if (downloadURL == null || areaFolder.exists()) {
-            loadMap(areaFolder);
-            return;
-        }
-
-        final ProgressDialog dialog = new ProgressDialog(this);
-        dialog.setMessage("Downloading and uncompressing " + downloadURL);
-        dialog.setIndeterminate(false);
-        dialog.setMax(100);
-        dialog.setProgressStyle(ProgressDialog.STYLE_HORIZONTAL);
-        dialog.show();
-
-        new GHAsyncTask<Void, Integer, Object>() {
-            protected Object saveDoInBackground(Void... _ignore)
-                    throws Exception {
-                String localFolder = Helper.pruneFileEnd(AndroidHelper.getFileName(downloadURL));
-                localFolder = new File(mapsFolder, localFolder + "-gh").getAbsolutePath();
-                log("downloading & unzipping " + downloadURL + " to " + localFolder);
-                AndroidDownloader downloader = new AndroidDownloader();
-                downloader.setTimeout(30000);
-                downloader.downloadAndUnzip(downloadURL, localFolder,
-                        new ProgressListener() {
-                            @Override
-                            public void update(long val) {
-                                publishProgress((int) val);
-                            }
-                        });
-                return null;
-            }
-
-            protected void onProgressUpdate(Integer... values) {
-                super.onProgressUpdate(values);
-                dialog.setProgress(values[0]);
-            }
-
-            protected void onPostExecute(Object _ignore) {
-                dialog.dismiss();
-                if (hasError()) {
-                    String str = "An error happened while retrieving maps:" + getErrorMessage();
-                    log(str, getError());
-                    logUser(str);
-                } else {
-                    loadMap(areaFolder);
-                }
-            }
-        }.execute();
-    }
+//    private void chooseAreaFromLocal() {
+//        List<String> nameList = new ArrayList<>();
+//        String[] files = mapsFolder.list(new FilenameFilter() {
+//            @Override
+//            public boolean accept(File dir, String filename) {
+//                return filename != null
+//                        && (filename.endsWith(".ghz") || filename
+//                        .endsWith("-gh"));
+//            }
+//        });
+//        Collections.addAll(nameList, files);
+//
+//        if (nameList.isEmpty())
+//            return;
+//
+//        chooseArea(localButton, localSpinner, nameList,
+//                new MySpinnerListener() {
+//                    @Override
+//                    public void onSelect(String selectedArea, String selectedFile) {
+//                        initFiles(selectedArea);
+//                    }
+//                });
+//    }
+
+//    private void chooseArea(Button button, final Spinner spinner,
+//                            List<String> nameList, final MySpinnerListener myListener) {
+//        final Map<String, String> nameToFullName = new TreeMap<>();
+//        for (String fullName : nameList) {
+//            String tmp = Helper.pruneFileEnd(fullName);
+//            if (tmp.endsWith("-gh"))
+//                tmp = tmp.substring(0, tmp.length() - 3);
+//
+//            tmp = AndroidHelper.getFileName(tmp);
+//            nameToFullName.put(tmp, fullName);
+//        }
+//        nameList.clear();
+//        nameList.addAll(nameToFullName.keySet());
+//        ArrayAdapter<String> spinnerArrayAdapter = new ArrayAdapter<>(
+//                this, android.R.layout.simple_spinner_dropdown_item, nameList);
+//        spinner.setAdapter(spinnerArrayAdapter);
+//        button.setOnClickListener(new OnClickListener() {
+//            @Override
+//            public void onClick(View v) {
+//                Object o = spinner.getSelectedItem();
+//                if (o != null && o.toString().length() > 0 && !nameToFullName.isEmpty()) {
+//                    String area = o.toString();
+//                    myListener.onSelect(area, nameToFullName.get(area));
+//                } else {
+//                    myListener.onSelect(null, null);
+//                }
+//            }
+//        });
+//    }
 
     /**
      * @return the last know best location
@@ -424,20 +301,23 @@ void loadMap(File areaFolder) {
         mapView.map().layers().add(new LabelLayer(mapView.map(), l));
 
         // Map position
-        Location lastLocation = getLastBestLocation();
-        GeoPoint mapCenter;
-        if (lastLocation != null) {
-            mapCenter = new GeoPoint(lastLocation.getLatitude(), lastLocation.getLongitude());
-            mapView.map().setMapPosition(lastLocation.getLatitude(), lastLocation.getLongitude(), 1 << 17);
-        }
-        else {
-            mapCenter = tileSource.getMapInfo().boundingBox.getCenterPoint();
-            mapView.map().setMapPosition(mapCenter.getLatitude(), mapCenter.getLongitude(), 1 << 17);
-        }
+//        Location lastLocation = getLastBestLocation();
+//        GeoPoint mapCenter;
+//        if (lastLocation != null) {
+//            mapCenter = new GeoPoint(lastLocation.getLatitude(), lastLocation.getLongitude());
+//            mapView.map().setMapPosition(lastLocation.getLatitude(), lastLocation.getLongitude(), 1 << 17);
+//        }
+//        else {
+//            mapCenter = tileSource.getMapInfo().boundingBox.getCenterPoint();
+//            mapView.map().setMapPosition(mapCenter.getLatitude(), mapCenter.getLongitude(), 1 << 17);
+//        }
+
+        // Map fixed position
+        mapView.map().setMapPosition(40.34648, -74.658457, 1 << 17);
 
         // Markers layer
         itemizedLayer = new ItemizedLayer<>(mapView.map(), (MarkerSymbol) null);
-        itemizedLayer.addItem(createMarkerItem(mapCenter, R.drawable.marker_icon_current_location));
+//        itemizedLayer.addItem(createMarkerItem(mapCenter, R.drawable.marker_icon_current_location)); --- put back after MS
         mapView.map().layers().add(itemizedLayer);
 
 
@@ -511,6 +391,14 @@ protected PathWrapper doInBackground(Void... v) {
                         setAlgorithm(Algorithms.DIJKSTRA_BI);
                 req.getHints().
                         put(Routing.INSTRUCTIONS, "false");
+                if (isCheckedSteps) {
+                    req.getHints().put("highways.steps", "0");
+                }
+                if (isCheckedUpaths) {
+
+                }
+                if (isCheckedInclines) {}
+
                 GHResponse resp = hopper.route(req);
                 time = sw.stop().getSeconds();
                 return resp.getBest();
diff --git a/android/app/src/main/res/drawable/navax_icon2.png b/android/app/src/main/res/drawable/navax_icon2.png
new file mode 100644
index 0000000000..0f296fe54c
Binary files /dev/null and b/android/app/src/main/res/drawable/navax_icon2.png differ
diff --git a/android/app/src/main/res/drawable/navax_icon3.png b/android/app/src/main/res/drawable/navax_icon3.png
new file mode 100644
index 0000000000..a7786d1fb4
Binary files /dev/null and b/android/app/src/main/res/drawable/navax_icon3.png differ
diff --git a/android/app/src/main/res/layout/main2.xml b/android/app/src/main/res/layout/main2.xml
new file mode 100644
index 0000000000..692251808f
--- /dev/null
+++ b/android/app/src/main/res/layout/main2.xml
@@ -0,0 +1,149 @@
+<?xml version="1.0" encoding="utf-8"?>
+<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
+    android:layout_width="match_parent"
+    android:layout_height="match_parent"
+    android:weightSum="1"
+    android:orientation="vertical">
+
+    <LinearLayout
+        android:orientation="horizontal"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_margin="@dimen/padding_large">
+
+        <TextView
+            android:text="Map Configurations"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:id="@+id/textView8"
+            android:textAppearance="@android:style/TextAppearance.Material.Headline" />
+
+    </LinearLayout>
+
+    <LinearLayout
+        android:orientation="horizontal"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:layout_margin="@dimen/padding_large">
+
+        <TextView
+            android:layout_width="138dp"
+            android:layout_height="wrap_content"
+            android:id="@+id/textView4"
+            android:text="Avoid:"
+            android:textAppearance="@android:style/TextAppearance" />
+    </LinearLayout>
+
+
+    <LinearLayout
+        android:orientation="horizontal"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:paddingLeft="15dip">
+
+        <CheckBox
+            android:text="Steps"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:id="@+id/steps" />
+
+    </LinearLayout>
+
+    <LinearLayout
+        android:orientation="horizontal"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:paddingLeft="15dip">
+
+        <CheckBox
+            android:text="Unpaved paths"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:id="@+id/unpaved_paths" />
+    </LinearLayout>
+
+    <LinearLayout
+        android:orientation="horizontal"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:paddingLeft="15dip">
+
+        <CheckBox
+            android:text="Inclines steeper than:"
+            android:layout_width="wrap_content"
+            android:layout_height="wrap_content"
+            android:id="@+id/inclines" />
+    </LinearLayout>
+
+    <LinearLayout
+        android:orientation="horizontal"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:paddingLeft="60dip"
+        android:weightSum="1">
+
+
+        <Spinner
+            android:id="@+id/inclines_spinner"
+            android:layout_width="wrap_content"
+            android:layout_height="40dp"
+            android:spinnerMode="dropdown"
+            android:entries="@array/incline_arrays"
+            android:prompt="@string/incline_prompt"
+            android:layout_weight="0.13" />
+    </LinearLayout>
+
+    <LinearLayout
+        android:orientation="horizontal"
+        android:layout_width="match_parent"
+        android:layout_height="wrap_content"
+        android:paddingLeft="15dip"
+        android:paddingTop="40dip">
+
+        <Button
+            android:text="Start!"
+            android:layout_width="100dip"
+            android:layout_height="50dip"
+            android:id="@+id/start_button" />
+    </LinearLayout>
+
+
+
+    <!--<LinearLayout-->
+        <!--android:orientation="horizontal"-->
+        <!--android:layout_width="match_parent"-->
+        <!--android:layout_height="wrap_content"-->
+        <!--android:layout_margin="@dimen/padding_large">-->
+
+        <!--<TextView-->
+            <!--android:layout_width="138dp"-->
+            <!--android:layout_height="wrap_content"-->
+            <!--android:id="@+id/textView4"-->
+            <!--android:text="Route type:"-->
+            <!--android:textAppearance="@android:style/TextAppearance" />-->
+    <!--</LinearLayout>-->
+
+    <!--<LinearLayout-->
+        <!--android:orientation="horizontal"-->
+        <!--android:layout_width="match_parent"-->
+        <!--android:layout_height="35dp"-->
+        <!--android:paddingLeft="15dip">-->
+
+        <!--<RadioButton-->
+            <!--android:text="Fastest"-->
+            <!--android:layout_width="wrap_content"-->
+            <!--android:layout_height="wrap_content"-->
+            <!--android:id="@+id/radioButton2"-->
+            <!--android:layout_weight="0.12" />-->
+
+        <!--<RadioButton-->
+            <!--android:text="Shortest"-->
+            <!--android:layout_width="wrap_content"-->
+            <!--android:layout_height="wrap_content"-->
+            <!--android:id="@+id/radioButton3"-->
+            <!--android:layout_weight="1" />-->
+    <!--</LinearLayout>-->
+
+
+
+</LinearLayout>
\ No newline at end of file
diff --git a/android/app/src/main/res/values/strings.xml b/android/app/src/main/res/values/strings.xml
index 37659acc40..9d21bf2024 100644
--- a/android/app/src/main/res/values/strings.xml
+++ b/android/app/src/main/res/values/strings.xml
@@ -1,6 +1,17 @@
 <resources>
 
-    <string name="app_name">GraphHopper</string>
-    <string name="title_activity_main">GraphHopper</string>
- 
+    <string name="app_name">NAVAX</string>
+    <string name="title_activity_main">NAVAX</string>
+
+    <string name="incline_prompt">Choose an incline</string>
+    <string-array name="incline_arrays">
+        <item>5 degrees</item>
+        <item>10 degrees</item>
+        <item>15 degrees</item>
+        <item>20 degrees</item>
+        <item>25 degrees</item>
+        <item>30 degrees</item>
+        <item>35 degrees</item>
+        <item>40 degrees</item>
+    </string-array>
 </resources>
\ No newline at end of file
diff --git a/core/src/main/java/com/graphhopper/MyGraphHopper.java b/core/src/main/java/com/graphhopper/MyGraphHopper.java
new file mode 100644
index 0000000000..68445c5656
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/MyGraphHopper.java
@@ -0,0 +1,38 @@
+// package com.graphhopper;
+
+// import java.util.Set;
+// import com.graphhopper.routing.util.*;
+// import com.graphhopper.routing.weighting.*;
+// import com.graphhopper.util.*;
+
+// public class MyGraphHopper extends GraphHopper {
+
+//     Set<Integer> forbiddenEdges;
+//     public void determineForbiddenEdges() {
+//         AllEdgesIterator edges = this.getGraphHopperStorage().getAllEdges();
+//         while (edges.next()) {
+//             EdgeIteratorState state;
+//             edges.copyPropertiesTo(state);
+//             String highway = DataFlagEncoder.getHighwayAsString(state);
+//             if (highway == "steps") {
+//                 forbiddenEdges.add(edges.getEdge())
+//                 edges.setDistance(Integer.MAX_VALUE);
+//             }
+//         }
+//     }
+
+//     @Override
+//     public Weighting createWeighting(PMap wMap, FlagEncoder encoder)
+//     {
+//         String weighting = wMap.getWeighting();
+//         if ("BLOCKING".equalsIgnoreCase(weighting))
+//         {
+//             AvoidEdgesWeighting w = new AvoidEdgesWeighting(encoder);
+//             w.addEdges(forbiddenEdges);
+//             return w;
+//         } else
+//         {
+//             return super.createWeighting(weighting, encoder);
+//         }
+//     }
+// }
\ No newline at end of file
