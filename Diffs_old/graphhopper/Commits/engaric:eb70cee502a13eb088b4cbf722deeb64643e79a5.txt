diff --git a/core/src/test/java/com/graphhopper/routing/GraphHopperIT.java b/core/src/test/java/com/graphhopper/GraphHopperIT.java
similarity index 82%
rename from core/src/test/java/com/graphhopper/routing/GraphHopperIT.java
rename to core/src/test/java/com/graphhopper/GraphHopperIT.java
index 22b886c9a8..0d74a52e0b 100644
--- a/core/src/test/java/com/graphhopper/routing/GraphHopperIT.java
+++ b/core/src/test/java/com/graphhopper/GraphHopperIT.java
@@ -15,12 +15,11 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package com.graphhopper.routing;
+package com.graphhopper;
 
-import com.graphhopper.GHRequest;
-import com.graphhopper.GHResponse;
-import com.graphhopper.GraphHopper;
 import com.graphhopper.reader.dem.SRTMProvider;
+import com.graphhopper.routing.AlgorithmOptions;
+import com.graphhopper.routing.RoutingAlgorithmFactorySimple;
 import com.graphhopper.routing.util.*;
 import com.graphhopper.util.*;
 import com.graphhopper.util.shapes.GHPoint;
@@ -84,6 +83,8 @@ public void testMonacoWithInstructions() throws Exception
         GHResponse rsp = hopper.route(new GHRequest(43.727687, 7.418737, 43.74958, 7.436566).
                 setAlgorithm(AlgorithmOptions.ASTAR).setVehicle(vehicle).setWeighting(weightCalcStr));
 
+        // identify the number of counts to compare with CH foot route
+        assertEquals(698, hopper.getVisitedSum());
         assertEquals(3437.6, rsp.getDistance(), .1);
         assertEquals(89, rsp.getPoints().getSize());
 
@@ -93,7 +94,7 @@ public void testMonacoWithInstructions() throws Exception
         List<Map<String, Object>> resultJson = il.createJson();
         // TODO roundabout fine tuning -> enter + leave roundabout (+ two rounabouts -> is it necessary if we do not leave the street?)
         assertEquals("Continue onto Avenue des Guelfes", resultJson.get(0).get("text"));
-        assertEquals("Turn slight left onto Avenue des Papalins", resultJson.get(1).get("text"));
+        assertEquals("Continue onto Avenue des Papalins", resultJson.get(1).get("text"));
         assertEquals("Turn sharp right onto Quai Jean-Charles Rey", resultJson.get(2).get("text"));
         assertEquals("Turn left", resultJson.get(3).get("text"));
         assertEquals("Turn right onto Avenue Albert II", resultJson.get(4).get("text"));
@@ -135,7 +136,7 @@ public void testMonacoVia()
         assertEquals(26, il.size());
         List<Map<String, Object>> resultJson = il.createJson();
         assertEquals("Continue onto Avenue des Guelfes", resultJson.get(0).get("text"));
-        assertEquals("Turn slight left onto Avenue des Papalins", resultJson.get(1).get("text"));
+        assertEquals("Continue onto Avenue des Papalins", resultJson.get(1).get("text"));
         assertEquals("Turn sharp right onto Quai Jean-Charles Rey", resultJson.get(2).get("text"));
         assertEquals("Turn left", resultJson.get(3).get("text"));
         assertEquals("Turn right onto Avenue Albert II", resultJson.get(4).get("text"));
@@ -146,7 +147,7 @@ public void testMonacoVia()
         assertEquals("Turn left", resultJson.get(21).get("text"));
         assertEquals("Turn right onto Quai Jean-Charles Rey", resultJson.get(22).get("text"));
         assertEquals("Turn sharp left onto Avenue des Papalins", resultJson.get(23).get("text"));
-        assertEquals("Turn slight right onto Avenue des Guelfes", resultJson.get(24).get("text"));
+        assertEquals("Continue onto Avenue des Guelfes", resultJson.get(24).get("text"));
         assertEquals("Finish!", resultJson.get(25).get("text"));
 
         assertEquals(11, (Double) resultJson.get(0).get("distance"), 1);
@@ -224,8 +225,8 @@ public void testSRTMWithInstructions() throws Exception
                 str.substring(0, 662));
 
         assertEquals("(43.727778875703635,7.418772930326453,11.0), (43.72768239068275,7.419007064826944,11.0), "
-                + "(43.727680946587874,7.4191987684222065,11.0)",
-                str.substring(str.length() - 133));
+                + "(43.727680946587874,7.419198768422206,11.0)",
+                str.substring(str.length() - 132));
 
         List<GPXEntry> list = rsp.getInstructions().createGPXList();
         assertEquals(60, list.size());
@@ -265,22 +266,22 @@ public void testKremsCyclewayInstructionsWithWayTypeInfo()
         List<Map<String, Object>> resultJson = il.createJson();
 
         assertEquals("Continue onto Obere Landstraße", resultJson.get(0).get("text"));
-        assertEquals("get off the bike", resultJson.get(0).get("annotationText"));
-        assertEquals("Turn sharp left onto Kirchengasse", resultJson.get(1).get("text"));
-        assertEquals("get off the bike", resultJson.get(1).get("annotationText"));
+        assertEquals("get off the bike", resultJson.get(0).get("annotation_text"));
+        assertEquals("Turn left onto Kirchengasse", resultJson.get(1).get("text"));
+        assertEquals("get off the bike", resultJson.get(1).get("annotation_text"));
 
-        assertEquals("Turn sharp right onto Pfarrplatz", resultJson.get(2).get("text"));
+        assertEquals("Turn right onto Pfarrplatz", resultJson.get(2).get("text"));
         assertEquals("Turn right onto Margarethenstraße", resultJson.get(3).get("text"));
-        assertEquals("Turn left onto Hoher Markt", resultJson.get(4).get("text"));
-        assertEquals("Turn slight right onto Wegscheid", resultJson.get(5).get("text"));
+        assertEquals("Turn slight left onto Hoher Markt", resultJson.get(4).get("text"));
+        assertEquals("Turn right onto Wegscheid", resultJson.get(5).get("text"));
         assertEquals("Turn slight left onto Untere Landstraße", resultJson.get(6).get("text"));
         assertEquals("Turn right onto Ringstraße, L73", resultJson.get(7).get("text"));
         assertEquals("Continue onto Eyblparkstraße", resultJson.get(8).get("text"));
-        assertEquals("Continue onto Austraße", resultJson.get(9).get("text"));
+        assertEquals("Turn slight left onto Austraße", resultJson.get(9).get("text"));
         assertEquals("Turn slight left onto Rechte Kremszeile", resultJson.get(10).get("text"));
         //..
         assertEquals("Turn right onto Treppelweg", resultJson.get(15).get("text"));
-        assertEquals("cycleway", resultJson.get(15).get("annotationText"));
+        assertEquals("cycleway", resultJson.get(15).get("annotation_text"));
     }
 
     @Test
@@ -288,7 +289,7 @@ public void testRoundaboutInstructionsWithCH()
     {
         String tmpOsmFile = "files/monaco.osm.gz";
         String tmpVehicle = "car";
-        String tmpImportVehicles = "foot,car";
+        String tmpImportVehicles = "car,bike";
         String tmpWeightCalcStr = "fastest";
 
         GraphHopper tmpHopper = new GraphHopper().
@@ -298,8 +299,7 @@ public void testRoundaboutInstructionsWithCH()
                 setEncodingManager(new EncodingManager(tmpImportVehicles)).
                 importOrLoad();
 
-        // lexicographically first vehicle
-        assertEquals(tmpVehicle, tmpHopper.getDefaultVehicle());
+        assertEquals(tmpVehicle, tmpHopper.getDefaultVehicle().toString());
         assertFalse(RoutingAlgorithmFactorySimple.class.isAssignableFrom(tmpHopper.getAlgorithmFactory().getClass()));
 
         GHResponse rsp = tmpHopper.route(new GHRequest(43.745084, 7.430513, 43.745247, 7.430347)
@@ -312,15 +312,18 @@ public void testRoundaboutInstructionsWithCH()
 
         rsp = tmpHopper.route(new GHRequest(43.745948, 7.42914, 43.746173, 7.428834)
                 .setVehicle(tmpVehicle).setWeighting(tmpWeightCalcStr));
-
         assertEquals(1, ((RoundaboutInstruction) rsp.getInstructions().get(1)).getExitNumber());
+
+        rsp = tmpHopper.route(new GHRequest(43.735817, 7.417096, 43.735666, 7.416587)
+                .setVehicle(tmpVehicle).setWeighting(tmpWeightCalcStr));
+        assertEquals(2, ((RoundaboutInstruction) rsp.getInstructions().get(1)).getExitNumber());
     }
 
     @Test
-    public void testMultipleVehiclesAndCH()
+    public void testMultipleVehiclesAndDoCHForBike()
     {
         String tmpOsmFile = "files/monaco.osm.gz";
-        String tmpImportVehicles = "foot,car";
+        String tmpImportVehicles = "bike,car";
 
         GraphHopper tmpHopper = new GraphHopper().
                 setStoreOnFlush(true).
@@ -328,15 +331,54 @@ public void testMultipleVehiclesAndCH()
                 setGraphHopperLocation(tmpGraphFile).
                 setEncodingManager(new EncodingManager(tmpImportVehicles)).
                 importOrLoad();
+        assertEquals("bike", tmpHopper.getDefaultVehicle().toString());
 
         GHResponse rsp = tmpHopper.route(new GHRequest(43.73005, 7.415707, 43.741522, 7.42826)
                 .setVehicle("car"));
         assertEquals(207, rsp.getMillis() / 1000f, 1);
-        assertEquals(2838, rsp.getDistance(), 1);        
+        assertEquals(2838, rsp.getDistance(), 1);
+
+        rsp = tmpHopper.route(new GHRequest(43.73005, 7.415707, 43.741522, 7.42826)
+                .setVehicle("bike"));
+        assertEquals(494, rsp.getMillis() / 1000f, 1);
+        assertEquals(2192, rsp.getDistance(), 1);
 
         rsp = tmpHopper.route(new GHRequest(43.73005, 7.415707, 43.741522, 7.42826)
                 .setVehicle("foot"));
-        assertEquals(1574, rsp.getMillis() / 1000f, 1);
-        assertEquals(2187, rsp.getDistance(), 1);        
+        assertTrue("only bike and car were imported. foot request should fail", rsp.hasErrors());
+    }
+
+    @Test
+    public void testIfCHIsUsed() throws Exception
+    {
+        // route directly after import
+        executeCHFootRoute();
+
+        // now only load is called
+        executeCHFootRoute();
+    }
+
+    private void executeCHFootRoute()
+    {
+        String tmpOsmFile = "files/monaco.osm.gz";
+        String tmpImportVehicles = "foot";
+
+        GraphHopper tmpHopper = new GraphHopper().
+                setStoreOnFlush(true).
+                setOSMFile(tmpOsmFile).
+                setCHWeighting(weightCalcStr).
+                setGraphHopperLocation(tmpGraphFile).
+                setEncodingManager(new EncodingManager(tmpImportVehicles)).
+                importOrLoad();
+
+        // same query as in testMonacoWithInstructions
+        GHResponse rsp = tmpHopper.route(new GHRequest(43.727687, 7.418737, 43.74958, 7.436566).
+                setVehicle(vehicle));
+
+        // identify the number of counts to compare with none-CH foot route which had nearly 700 counts
+        assertTrue("Too many nodes visited " + tmpHopper.getVisitedSum(), tmpHopper.getVisitedSum() < 120);
+        assertEquals(3437.6, rsp.getDistance(), .1);
+        assertEquals(89, rsp.getPoints().getSize());
+        tmpHopper.close();
     }
 }
