diff --git a/config.yml b/config.yml
index 407fe44a57..83647a0b37 100644
--- a/config.yml
+++ b/config.yml
@@ -8,7 +8,7 @@ graphhopper:
 
   # Possible options: car,foot,bike,bike2,mtb,racingbike,motorcycle (comma separated)
   # bike2 takes elevation data into account (like up-hill is slower than down-hill) and requires enabling graph.elevation.provider below
-  graph.flag_encoders: mapcrider2
+  graph.flag_encoders: mapcrider2, racingbike
 
 
   # Enable turn restrictions for car or motorcycle.
@@ -37,30 +37,30 @@ graphhopper:
   # By default the speed mode with the 'fastest' weighting is used. Internally a graph preparation via
   # contraction hierarchies (CH) is done to speed routing up. This requires more RAM/disc space for holding the
   # graph but less for every request. You can also setup multiple weightings, by providing a comma separated list.
-#  prepare.ch.weightings: priority
+  prepare.ch.weightings: fastest
 
-#  prepare.ch.landmarks: 16
+  prepare.ch.landmarks: 64g
   # Disable the speed mode. Should be used only with routing.max_visited_nodes or when the hybrid mode is enabled instead
-  prepare.ch.weightings: no
+#  prepare.ch.weightings: fastest
 
 
   # To make CH preparation faster for multiple flagEncoders you can increase the default threads if you have enough RAM.
   # Change this setting only if you know what you are doing and if the default worked for you.
-#  prepare.ch.threads: 2
+  prepare.ch.threads: 2
 
 
   # The hybrid mode can be enabled with
-  prepare.lm.weightings: fastest
+#  prepare.lm.weightings: fastest
 
   # To tune the performance vs. memory usage for the hybrid mode use
-  prepare.lm.landmarks: 16
+#  prepare.lm.landmarks: 64
 
   # Make landmark preparation parallel if you have enough RAM. Change this only if you know what you are doing and if the default worked for you.
-  prepare.lm.threads: 2
+#  prepare.lm.threads: 2
 
   # avoid being stuck in a (oneway) subnetwork, see https://discuss.graphhopper.com/t/93
-  prepare.min_network_size: 0
-  prepare.min_one_way_network_size: 0
+  prepare.min_network_size: 200
+  prepare.min_one_way_network_size: 200
 
 
 
diff --git a/core/src/main/java/com/graphhopper/routing/util/MapcRider2WeightFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/MapcRider2WeightFlagEncoder.java
index 4ddff11d8a..136afca59f 100644
--- a/core/src/main/java/com/graphhopper/routing/util/MapcRider2WeightFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/MapcRider2WeightFlagEncoder.java
@@ -321,9 +321,9 @@ public int getSurface(long flags) {
     @Override
     public String getSurfaceAsString(long flags) {
         int val = getSurface(flags);
-        System.out.println("Get surface in mapc2  flags"+flags);
-        System.out.println("Get surface in mapc2  val   "+val);
-        System.out.println("surfaceMap: "+surfaceMap.keySet());
+        // System.out.println("Get surface in mapc2  flags"+flags);
+        // System.out.println("Get surface in mapc2  val   "+val);
+        // System.out.println("surfaceMap: "+surfaceMap.keySet());
         for (Map.Entry<String, Integer> e : surfaceMap.entrySet()) {
             if (e.getValue() == val)
                 return e.getKey();
@@ -457,14 +457,7 @@ public void applyWayTags(ReaderWay way, EdgeIteratorState edge) {
 
 //        surfaceEncoder.getValue(flags)
 
-        System.out.println("==============================in mapc2 flag encode===============================");
-        System.out.println("flags: "+ flags);
-        System.out.println("surfaceValue:"+ surfaceValue);//flags
-        System.out.println("surfaceEncoder.getBits(): "+ surfaceEncoder.getBits());
-        System.out.println("sValue: "+ surfaceValue);
-        System.out.println("surfaceEncoder.getName(): "+ surfaceEncoder.getName()); //
-        System.out.println("surfaceEncoder.getValue(flags): " + surfaceEncoder.getValue(flags));
-        System.out.println("=============================================================");
+        
         edge.setFlags(flags);
     }
 
@@ -486,7 +479,7 @@ void collect(ReaderWay way, double wayTypeSpeed, TreeMap<Double, Integer> weight
         if  ("track".equals(cycleway)){
 //            String foot = way.getTag("foot");
             Boolean hasFoot = way.hasTag("foot");
-            System.out.println("hasFoot   "+hasFoot);
+            // System.out.println("hasFoot   "+hasFoot);
 //            String footway = way.getTag("footway");x
             if(hasFoot){
                 weightToPrioMap.put(34d, PREFER.getValue());
diff --git a/core/src/main/java/com/graphhopper/routing/util/MapcRiderFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/MapcRiderFlagEncoder.java
index ebb2b7ac30..27cd99ef33 100644
--- a/core/src/main/java/com/graphhopper/routing/util/MapcRiderFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/MapcRiderFlagEncoder.java
@@ -192,7 +192,7 @@ void collect(ReaderWay way, double wayTypeSpeed, TreeMap<Double, Integer> weight
         if  ("track".equals(cycleway)){
 //            String foot = way.getTag("foot");
             Boolean hasFoot = way.hasTag("foot");
-            System.out.println("hasFoot   "+hasFoot);
+            //System.out.println("hasFoot   "+hasFoot);
 //            String footway = way.getTag("footway");x
             if(hasFoot){
                 weightToPrioMap.put(34d, PREFER.getValue());
diff --git a/core/src/main/java/com/graphhopper/util/details/WeightDetails.java b/core/src/main/java/com/graphhopper/util/details/WeightDetails.java
index 8db6f47223..00b1d1905a 100644
--- a/core/src/main/java/com/graphhopper/util/details/WeightDetails.java
+++ b/core/src/main/java/com/graphhopper/util/details/WeightDetails.java
@@ -59,16 +59,16 @@ public boolean isEdgeDifferentToLastEdge(EdgeIteratorState edge) {
 //            edge.getFlags(g)
             long time = weighting.calcMillis(edge, false, -1);
 //            encoder.getLong(fs,)
-            System.out.println("fs   flags value"+ fs );
-            System.out.println("fs   "+ " encoder.getSpeed(fs)  + encoder.getSurfaceAsString(fs): "+ encoder.getSpeed(fs) + encoder.getSurfaceAsString(fs) +"getHighwayAsString:   "  +  encoder.getHighwayAsString(edge));
+            // System.out.println("fs   flags value"+ fs );
+            // System.out.println("fs   "+ " encoder.getSpeed(fs)  + encoder.getSurfaceAsString(fs): "+ encoder.getSpeed(fs) + encoder.getSurfaceAsString(fs) +"getHighwayAsString:   "  +  encoder.getHighwayAsString(edge));
 //            encoder.ge
 //            System.out.println("fs   "+ " flag value for the edge with street name " + stname + " is " + fs + "the surface is" + encoder.getSurfaceAsString(fs)+encoder.getSurface(fs));
-            System.out.println("fs   "+ " distance value for the edge is "+ ds );
+            // System.out.println("fs   "+ " distance value for the edge is "+ ds );
 //            System.out.println("get longs" + encoder.getLong(fs,-1));
 
 //            FlagEncoder f = weighting.getFlagEncoder();
             weight = weighting.calcWeight(edge,false,-1);
-            System.out.println("fs   "+ " weight is calculated for the edge is "+ weight+ " and time is " + time );
+            // System.out.println("fs   "+ " weight is calculated for the edge is "+ weight+ " and time is " + time );
 
 
 //            time = weighting.calcMillis(edge, false, -1);
