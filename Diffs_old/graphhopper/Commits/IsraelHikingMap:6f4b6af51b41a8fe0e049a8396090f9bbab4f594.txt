diff --git a/core/src/main/java/com/graphhopper/GraphHopper.java b/core/src/main/java/com/graphhopper/GraphHopper.java
index 0c0e125c17..e19c101d2f 100644
--- a/core/src/main/java/com/graphhopper/GraphHopper.java
+++ b/core/src/main/java/com/graphhopper/GraphHopper.java
@@ -50,6 +50,8 @@
 
 import java.io.File;
 import java.io.IOException;
+import java.nio.file.Files;
+import java.nio.file.Paths;
 import java.text.DateFormat;
 import java.util.*;
 import java.util.concurrent.locks.Lock;
@@ -456,65 +458,7 @@ public void setGraphHopperStorage(GraphHopperStorage ghStorage) {
      */
     public LocationIndex getLocationIndex() {
         if (locationIndex == null) {
-            // This is currently a work around to allow lazy loading.
-            // The change should probably be in NerestServlet and GraphHopperAPI interface
-            return new LocationIndex() {
-                @Override
-                public LocationIndex setResolution(int resolution) {
-                    return null;
-                }
-
-                @Override
-                public LocationIndex prepareIndex() {
-                    return null;
-                }
-
-                @Override
-                public QueryResult findClosest(double lat, double lon, EdgeFilter edgeFilter) {
-                    return null;
-                }
-
-                @Override
-                public LocationIndex setApproximation(boolean approxDist) {
-                    return null;
-                }
-
-                @Override
-                public void setSegmentSize(int bytes) {
-
-                }
-
-                @Override
-                public boolean loadExisting() {
-                    return false;
-                }
-
-                @Override
-                public LocationIndex create(long byteCount) {
-                    return null;
-                }
-
-                @Override
-                public void flush() {
-
-                }
-
-                @Override
-                public void close() {
-
-                }
-
-                @Override
-                public boolean isClosed() {
-                    return false;
-                }
-
-                @Override
-                public long getCapacity() {
-                    return 0;
-                }
-            };
-            //throw new IllegalStateException("Location index not initialized");
+            throw new IllegalStateException("Location index not initialized");
         }
         return locationIndex;
     }
@@ -1138,6 +1082,7 @@ else if (ALT_ROUTE.equalsIgnoreCase(algoStr))
      * to avoid concurrent changes which could result in incorrect routing (like when done while a Dijkstra search) or
      * also while just reading one edge row (inconsistent edge properties).
      */
+    @Override
     public ChangeGraphResponse changeGraph(Collection<JsonFeature> collection) {
         // TODO allow calling this method if called before CH preparation
         if (getCHFactoryDecorator().isEnabled())
@@ -1318,4 +1263,18 @@ protected void ensureWriteAccess() {
     public void setNonChMaxWaypointDistance(int nonChMaxWaypointDistance) {
         this.nonChMaxWaypointDistance = nonChMaxWaypointDistance;
     }
+
+    @Override
+    public void rebuild(String newLocation, String newDataReaderFile) {
+        close();
+        clean();
+        try {
+            Files.move(Paths.get(newLocation), Paths.get(getGraphHopperLocation()));
+        } catch (Exception ex) {
+            logger.error(ex.toString());
+        }
+        setDataReaderFile(newDataReaderFile);
+        load(getGraphHopperLocation());
+        printInfo();
+    }
 }
diff --git a/core/src/main/java/com/graphhopper/GraphHopperAPI.java b/core/src/main/java/com/graphhopper/GraphHopperAPI.java
index 8576fb65c2..ba2fd5fc66 100644
--- a/core/src/main/java/com/graphhopper/GraphHopperAPI.java
+++ b/core/src/main/java/com/graphhopper/GraphHopperAPI.java
@@ -17,8 +17,15 @@
  */
 package com.graphhopper;
 
+import com.graphhopper.json.geo.JsonFeature;
+import com.graphhopper.storage.GraphHopperStorage;
+import com.graphhopper.storage.change.ChangeGraphResponse;
+import com.graphhopper.storage.index.LocationIndex;
+
+import java.util.Collection;
+
 /**
- * Wrapper of the graphhopper online or offline API. Provides read only access.
+ * Wrapper of the graphhopper online or offline API
  * <p>
  *
  * @author Peter Karich
@@ -40,4 +47,32 @@
      * @return the response with the route and possible errors
      */
     GHResponse route(GHRequest request);
+
+    /**
+     * This method applies the changes to the graph specified as feature collection
+     * <p>
+     *
+     * @return the response with how many changes were made
+     */
+    ChangeGraphResponse changeGraph(Collection<JsonFeature> features);
+
+    /**
+     * This method allows to rebuild the graph using a location where the new graph storage is
+     */
+    void rebuild(String newLocation, String newDataReaderFile);
+
+    /**
+     * @return the location index for the graph to allow
+     */
+    LocationIndex getLocationIndex();
+
+    /**
+     * @return the graph storage
+     */
+    GraphHopperStorage getGraphHopperStorage();
+
+    /**
+     * Closes the graph - use this on shutdown
+     */
+    void close();
 }
diff --git a/reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/GraphHopperGtfs.java b/reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/GraphHopperGtfs.java
index 91d1f3a971..f796d70661 100644
--- a/reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/GraphHopperGtfs.java
+++ b/reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/GraphHopperGtfs.java
@@ -24,12 +24,14 @@
 import com.google.transit.realtime.GtfsRealtime;
 import com.graphhopper.*;
 import com.graphhopper.gtfs.fare.Fares;
+import com.graphhopper.json.geo.JsonFeature;
 import com.graphhopper.reader.osm.OSMReader;
 import com.graphhopper.routing.InstructionsFromEdges;
 import com.graphhopper.routing.QueryGraph;
 import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.routing.weighting.Weighting;
 import com.graphhopper.storage.*;
+import com.graphhopper.storage.change.ChangeGraphResponse;
 import com.graphhopper.storage.index.LocationIndex;
 import com.graphhopper.storage.index.LocationIndexTree;
 import com.graphhopper.storage.index.QueryResult;
@@ -87,8 +89,8 @@ public static Factory createFactory(PtFlagEncoder flagEncoder, TranslationMap tr
 
     private final TranslationMap translationMap;
     private final PtFlagEncoder flagEncoder;
-    private final GraphHopperStorage graphHopperStorage;
-    private final LocationIndex locationIndex;
+    private GraphHopperStorage graphHopperStorage;
+    private LocationIndex locationIndex;
     private final GtfsStorage gtfsStorage;
     private final RealtimeFeed realtimeFeed;
     private final GeometryFactory geometryFactory = new GeometryFactory();
@@ -271,6 +273,12 @@ public GHResponse route(GHRequest request) {
         return new RequestHandler(request).route();
     }
 
+    @Override
+    public ChangeGraphResponse changeGraph(Collection<JsonFeature> features)
+    {
+        throw new IllegalStateException("Graph change API not supported with public transit.");
+    }
+
     private static PtTravelTimeWeighting createPtTravelTimeWeighting(PtFlagEncoder encoder, boolean arriveBy, double walkSpeedKmH) {
         PtTravelTimeWeighting weighting = new PtTravelTimeWeighting(encoder, walkSpeedKmH);
         if (arriveBy) {
@@ -501,6 +509,33 @@ private Geometry lineStringFromEdges(List<Label.Transition> transitions) {
         return coordinates;
     }
 
+    @Override
+    public void close()  {
+        if (graphHopperStorage != null) {
+            graphHopperStorage.close();
+            graphHopperStorage = null;
+        }
+        if (locationIndex != null) {
+            locationIndex.close();
+            locationIndex = null;
+        }
+    }
+
+    @Override
+    public GraphHopperStorage getGraphHopperStorage() {
+        return graphHopperStorage;
+    }
+
+    @Override
+    public LocationIndex getLocationIndex() {
+        return locationIndex;
+    }
+
+    @Override
+    public void rebuild(String newFolder, String newDataReader) {
+        throw new IllegalStateException("Rebuild is not supported in public transit.");
+    }
+
     private class StopsFromBoardHopDwellEdges {
 
         private final String tripId;
@@ -544,7 +579,6 @@ private Stop findStop(Label.Transition t) {
         void finish() {
             stops.add(new Trip.Stop(stop.stop_id, stop.stop_name, geometryFactory.createPoint(new Coordinate(stop.stop_lon, stop.stop_lat)), Date.from(Instant.ofEpochMilli(arrivalTimeFromHopEdge)), null));
         }
-
     }
 
 }
diff --git a/web/src/main/java/com/graphhopper/http/ChangeGraphServlet.java b/web/src/main/java/com/graphhopper/http/ChangeGraphServlet.java
index 97f102e5ac..fdeb2ebf54 100644
--- a/web/src/main/java/com/graphhopper/http/ChangeGraphServlet.java
+++ b/web/src/main/java/com/graphhopper/http/ChangeGraphServlet.java
@@ -53,12 +53,8 @@ protected void doPost(HttpServletRequest httpReq, HttpServletResponse httpRes) t
         StopWatch sw = new StopWatch().start();
         try {
             JsonFeatureCollection collection = ghJson.fromJson(new InputStreamReader(httpReq.getInputStream(), Helper.UTF_CS), JsonFeatureCollection.class);
-            // TODO put changeGraph on GraphHopperAPI interface and remove cast (or some other solution)
-            if (!(graphHopper instanceof GraphHopper)) {
-                throw new IllegalStateException("Graph change API not supported with public transit.");
-            }
             // TODO make asynchronous!
-            ChangeGraphResponse rsp = ((GraphHopper) graphHopper).changeGraph(collection.getFeatures());
+            ChangeGraphResponse rsp = graphHopper.changeGraph(collection.getFeatures());
             ObjectNode resObject = objectMapper.createObjectNode();
             resObject.put("updates", rsp.getUpdateCount());
             // prepare the consumer to get some changes not immediately when returning after POST
diff --git a/web/src/main/java/com/graphhopper/http/GraphHopperModule.java b/web/src/main/java/com/graphhopper/http/GraphHopperModule.java
index b380fc6528..5dd29e49a5 100644
--- a/web/src/main/java/com/graphhopper/http/GraphHopperModule.java
+++ b/web/src/main/java/com/graphhopper/http/GraphHopperModule.java
@@ -38,7 +38,6 @@
 import com.graphhopper.routing.util.spatialrules.SpatialRule;
 import com.graphhopper.routing.util.spatialrules.SpatialRuleLookup;
 import com.graphhopper.storage.GraphHopperStorage;
-import com.graphhopper.storage.index.LocationIndex;
 import com.graphhopper.util.CmdArgs;
 import com.graphhopper.util.PMap;
 import com.graphhopper.util.Parameters;
@@ -149,24 +148,12 @@ RouteSerializer getRouteSerializer(GraphHopper graphHopper) {
         return new SimpleRouteSerializer(graphHopper.getGraphHopperStorage().getBounds());
     }
 
-    @Provides
-    @Singleton
-    GraphHopperStorage getGraphHopperStorage(GraphHopper graphHopper) {
-        return graphHopper.getGraphHopperStorage();
-    }
-
     @Provides
     @Singleton
     EncodingManager getEncodingManager(GraphHopper graphHopper) {
         return graphHopper.getEncodingManager();
     }
 
-    @Provides
-    @Singleton
-    LocationIndex getLocationIndex(GraphHopper graphHopper) {
-        return graphHopper.getLocationIndex();
-    }
-
     @Provides
     @Singleton
     @Named("hasElevation")
@@ -184,7 +171,7 @@ public void start() {
                 } else {
                     graphHopper.load(graphHopper.getGraphHopperLocation());
                 }
-                logger.info("loaded graph at:" + graphHopper.getGraphHopperLocation()
+                logger.info("Loaded graph at:" + graphHopper.getGraphHopperLocation()
                         + ", data_reader_file:" + graphHopper.getDataReaderFile()
                         + ", flag_encoders:" + graphHopper.getEncodingManager()
                         + ", " + graphHopper.getGraphHopperStorage().toDetailsString());
diff --git a/web/src/main/java/com/graphhopper/http/GraphHopperWeb.java b/web/src/main/java/com/graphhopper/http/GraphHopperWeb.java
index 3cd2491987..ff41eb9369 100644
--- a/web/src/main/java/com/graphhopper/http/GraphHopperWeb.java
+++ b/web/src/main/java/com/graphhopper/http/GraphHopperWeb.java
@@ -22,7 +22,6 @@
 import com.fasterxml.jackson.databind.ObjectMapper;
 import com.graphhopper.GHRequest;
 import com.graphhopper.GHResponse;
-import com.graphhopper.GraphHopperAPI;
 import com.graphhopper.PathWrapper;
 import com.graphhopper.util.*;
 import com.graphhopper.util.exceptions.*;
@@ -37,7 +36,7 @@
  *
  * @author Peter Karich
  */
-public class GraphHopperWeb implements GraphHopperAPI {
+public class GraphHopperWeb {
     private ObjectMapper objectMapper;
     private final Set<String> ignoreSet;
     private Downloader downloader = new Downloader("GraphHopper Java Client");
@@ -224,8 +223,7 @@ public GraphHopperWeb setDownloader(Downloader downloader) {
         this.downloader = downloader;
         return this;
     }
-
-    @Override
+    
     public boolean load(String serviceUrl) {
         this.routeServiceUrl = serviceUrl;
         return true;
@@ -254,7 +252,6 @@ public GraphHopperWeb setElevation(boolean withElevation) {
         return this;
     }
 
-    @Override
     public GHResponse route(GHRequest request) {
         try {
             String places = "";
diff --git a/web/src/main/java/com/graphhopper/http/InfoServlet.java b/web/src/main/java/com/graphhopper/http/InfoServlet.java
index b2e24cae01..1f89c595f2 100644
--- a/web/src/main/java/com/graphhopper/http/InfoServlet.java
+++ b/web/src/main/java/com/graphhopper/http/InfoServlet.java
@@ -19,6 +19,8 @@
 
 import com.fasterxml.jackson.databind.node.JsonNodeFactory;
 import com.fasterxml.jackson.databind.node.ObjectNode;
+import com.graphhopper.GraphHopper;
+import com.graphhopper.GraphHopperAPI;
 import com.graphhopper.storage.GraphHopperStorage;
 import com.graphhopper.storage.StorableProperties;
 import com.graphhopper.util.Constants;
@@ -40,13 +42,14 @@
  */
 public class InfoServlet extends GHBaseServlet {
     @Inject
-    private GraphHopperStorage storage;
+    private GraphHopperAPI graphHopper;
     @Inject
     @Named("hasElevation")
     private boolean hasElevation;
 
     @Override
     public void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {
+        GraphHopperStorage storage = graphHopper.getGraphHopperStorage();
         BBox bb = storage.getBounds();
         List<Double> list = new ArrayList<>(4);
         list.add(bb.minLon);
diff --git a/web/src/main/java/com/graphhopper/http/NearestServlet.java b/web/src/main/java/com/graphhopper/http/NearestServlet.java
index e933c220ff..be34be6718 100644
--- a/web/src/main/java/com/graphhopper/http/NearestServlet.java
+++ b/web/src/main/java/com/graphhopper/http/NearestServlet.java
@@ -19,6 +19,8 @@
 
 import com.fasterxml.jackson.databind.node.ArrayNode;
 import com.fasterxml.jackson.databind.node.ObjectNode;
+import com.graphhopper.GraphHopper;
+import com.graphhopper.GraphHopperAPI;
 import com.graphhopper.routing.util.EdgeFilter;
 import com.graphhopper.storage.index.LocationIndex;
 import com.graphhopper.storage.index.QueryResult;
@@ -40,13 +42,14 @@
 public class NearestServlet extends GHBaseServlet {
     private final DistanceCalc calc = Helper.DIST_EARTH;
     @Inject
-    private LocationIndex index;
+    private GraphHopperAPI graphHopper;
     @Inject
     @Named("hasElevation")
     private boolean hasElevation;
 
     @Override
     public void doGet(HttpServletRequest httpReq, HttpServletResponse httpRes) throws ServletException, IOException {
+        LocationIndex index = graphHopper.getLocationIndex();
         String pointStr = getParam(httpReq, "point", null);
         boolean enabledElevation = getBooleanParam(httpReq, "elevation", false);
 
diff --git a/web/src/main/java/com/graphhopper/http/PtModule.java b/web/src/main/java/com/graphhopper/http/PtModule.java
index 3eac109084..b78c191757 100644
--- a/web/src/main/java/com/graphhopper/http/PtModule.java
+++ b/web/src/main/java/com/graphhopper/http/PtModule.java
@@ -37,29 +37,17 @@ protected void configure() {
 
     @Provides
     @Singleton
-    GraphHopperAPI createGraphHopper(PtFlagEncoder flagEncoder, TranslationMap translationMap, GraphHopperStorage graphHopperStorage, LocationIndex locationIndex, GtfsStorage gtfsStorage) {
-        return new GraphHopperGtfs(flagEncoder, translationMap, graphHopperStorage, locationIndex, gtfsStorage, RealtimeFeed.empty());
-    }
-
-    @Provides
-    @Singleton
-    GHDirectory createGHDirectory(CmdArgs args) {
-        return GraphHopperGtfs.createGHDirectory(args.get("graph.location", "target/tmp"));
-    }
-
-    @Provides
-    @Singleton
-    GraphHopperStorage createGraphHopperStorage(CmdArgs args, GHDirectory directory, EncodingManager encodingManager, PtFlagEncoder ptFlagEncoder, GtfsStorage gtfsStorage) {
-        return GraphHopperGtfs.createOrLoad(directory, encodingManager, ptFlagEncoder, gtfsStorage,
-                args.getBool("gtfs.createwalknetwork", false),
-                args.has("gtfs.file") ? Arrays.asList(args.get("gtfs.file", "").split(",")) : Collections.emptyList(),
-                args.has("datareader.file") ? Arrays.asList(args.get("datareader.file", "").split(",")) : Collections.emptyList());
-    }
-
-    @Provides
-    @Singleton
-    LocationIndex createLocationIndex(GraphHopperStorage graphHopperStorage, GHDirectory directory) {
-        return GraphHopperGtfs.createOrLoadIndex(directory, graphHopperStorage);
+    GraphHopperAPI createGraphHopper(TranslationMap translationMap) {
+        GHDirectory directory = GraphHopperGtfs.createGHDirectory(args.get("graph.location", "target/tmp"));
+        GtfsStorage gtfsStorage = GraphHopperGtfs.createGtfsStorage();
+        PtFlagEncoder ptFlagEncoder = new PtFlagEncoder();
+        EncodingManager encodingManager = new EncodingManager(Arrays.asList(ptFlagEncoder), 8);
+        GraphHopperStorage graphHopperStorage = GraphHopperGtfs.createOrLoad(directory, encodingManager, ptFlagEncoder, gtfsStorage,
+                            args.getBool("gtfs.createwalknetwork", false),
+                            args.has("gtfs.file") ? Arrays.asList(args.get("gtfs.file", "").split(",")) : Collections.emptyList(),
+                            args.has("datareader.file") ? Arrays.asList(args.get("datareader.file", "").split(",")) : Collections.emptyList());
+        LocationIndex locationIndex = GraphHopperGtfs.createOrLoadIndex(directory, graphHopperStorage);
+        return new GraphHopperGtfs(ptFlagEncoder, translationMap, graphHopperStorage, locationIndex, gtfsStorage, RealtimeFeed.empty());
     }
 
     @Provides
@@ -69,24 +57,6 @@ boolean hasElevation() {
         return false;
     }
 
-    @Provides
-    @Singleton
-    GtfsStorage createGtfsStorage() {
-        return GraphHopperGtfs.createGtfsStorage();
-    }
-
-    @Provides
-    @Singleton
-    EncodingManager createEncodingManager(PtFlagEncoder ptFlagEncoder) {
-        return new EncodingManager(Arrays.asList(ptFlagEncoder), 8);
-    }
-
-    @Provides
-    @Singleton
-    PtFlagEncoder createPtFlagEncoder() {
-        return new PtFlagEncoder();
-    }
-
     @Provides
     @Singleton
     TranslationMap createTranslationMap() {
@@ -95,12 +65,12 @@ TranslationMap createTranslationMap() {
 
     @Provides
     @Singleton
-    RouteSerializer getRouteSerializer(GraphHopperStorage storage) {
-        return new SimpleRouteSerializer(storage.getBounds());
+    RouteSerializer getRouteSerializer(GraphHopperAPI graphHopper) {
+        return new SimpleRouteSerializer(graphHopper.getGraphHopperStorage().getBounds());
     }
 
     @Provides
-    GraphHopperService getGraphHopperService(GraphHopperStorage storage, LocationIndex locationIndex) {
+    GraphHopperService getGraphHopperService(GraphHopperAPI graphHopper) {
         return new GraphHopperService() {
             @Override
             public void start() {
@@ -109,8 +79,7 @@ public void start() {
 
             @Override
             public void close() throws Exception {
-                storage.close();
-                locationIndex.close();
+                graphHopper.close();
             }
         };
     }
diff --git a/web/src/main/java/com/graphhopper/http/RebuildGraphServlet.java b/web/src/main/java/com/graphhopper/http/RebuildGraphServlet.java
index 9a199a1747..674ad4e5cc 100644
--- a/web/src/main/java/com/graphhopper/http/RebuildGraphServlet.java
+++ b/web/src/main/java/com/graphhopper/http/RebuildGraphServlet.java
@@ -5,7 +5,9 @@
 import com.graphhopper.reader.osm.GraphHopperOSM;
 import com.graphhopper.util.CmdArgs;
 import com.graphhopper.util.Helper;
-import sun.plugin.dom.exception.InvalidStateException;
+import org.joda.time.DateTime;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import javax.inject.Inject;
 import javax.servlet.MultipartConfigElement;
@@ -28,6 +30,7 @@
 @MultipartConfig
 public class RebuildGraphServlet extends GHBaseServlet {
     private static final String __MULTIPART_CONFIG_ELEMENT = "org.eclipse.jetty.multipartConfig";
+    private final Logger logger = LoggerFactory.getLogger(getClass());
 
     @Inject
     private GraphHopperAPI graphHopper;
@@ -45,29 +48,23 @@ public void service(HttpServletRequest req, HttpServletResponse res) throws Serv
 
     @Override
     public void doPost(HttpServletRequest httpReq, HttpServletResponse httpRes) throws ServletException, IOException {
-        if (!(graphHopper instanceof GraphHopper)) {
-            throw new InvalidStateException("Rebuild is not supported in public transportation mode.");
-        }
         Part part = httpReq.getPart("file");
         if (part == null) {
             throw new IllegalArgumentException("You have to pass an OSM file in 'file' form-data input");
         }
-        GraphHopper originalGraph = (GraphHopper)graphHopper;
+        // this will not work for public transit.
         InputStream osmInputStream = part.getInputStream();
         Files.copy(osmInputStream, Paths.get(part.getSubmittedFileName()), REPLACE_EXISTING);
-        String newLocation = "rebuild-" + originalGraph.getGraphHopperLocation();
-        Helper.removeDir(new File(newLocation));
+        String temporaryLocation = "rebuild-" + DateTime.now().toString("YYYY-MM-dd_HH-mm-ss");
+        Helper.removeDir(new File(temporaryLocation));
         CmdArgs newArgs = new CmdArgs(args.toMap()); // clone
         newArgs.put("datareader.file", part.getSubmittedFileName());
-        newArgs.put("graph.location", newLocation);
+        newArgs.put("graph.location", temporaryLocation);
+        logger.info("Rebuilding graph at: " + temporaryLocation);
         GraphHopper newGraph = new GraphHopperOSM().init(newArgs);
         newGraph.importOrLoad();
-
-        String currentFolder = originalGraph.getGraphHopperLocation();
-        originalGraph.close();
-        originalGraph.clean();
         newGraph.close();
-        Files.move(Paths.get(newLocation), Paths.get(currentFolder));
-        originalGraph.load(currentFolder);
+        graphHopper.rebuild(temporaryLocation, newGraph.getDataReaderFile());
+        logger.info("Rebuilt complete");
     }
 }
diff --git a/web/src/test/java/com/graphhopper/http/BaseServletTester.java b/web/src/test/java/com/graphhopper/http/BaseServletTester.java
index 40b76b2847..adbaf4e3c1 100644
--- a/web/src/test/java/com/graphhopper/http/BaseServletTester.java
+++ b/web/src/test/java/com/graphhopper/http/BaseServletTester.java
@@ -125,9 +125,21 @@ protected String getTestAPIUrl(String path) {
         return "http://" + host + ":" + port + path;
     }
 
-    protected String queryString(String query, int code) throws Exception {
+    protected String routeQueryString(String query, int code) throws Exception {
+        return queryString(getTestRouteAPIUrl(), query, code);
+    }
+
+    protected JsonNode routeQuery(String query, int code) throws Exception {
+        return query(getTestRouteAPIUrl(), query, code);
+    }
+
+    protected JsonNode nearestQuery(String query) throws Exception {
+        return query(getTestNearestAPIUrl(), query, 200);
+    }
+
+    protected String queryString(String address, String queryParameters, int code) throws Exception {
         String resQuery = "";
-        for (String q : query.split("\\&")) {
+        for (String q : queryParameters.split("\\&")) {
             int index = q.indexOf("=");
             if (index > 0)
                 resQuery += q.substring(0, index + 1) + WebHelper.encodeURL(q.substring(index + 1));
@@ -136,7 +148,7 @@ protected String queryString(String query, int code) throws Exception {
 
             resQuery += "&";
         }
-        String url = getTestRouteAPIUrl() + "?" + resQuery;
+        String url = address + "?" + resQuery;
         Downloader downloader = new Downloader("web integration tester").setTimeout(2000);
         HttpURLConnection conn = downloader.createConnection(url);
         conn.connect();
@@ -144,24 +156,8 @@ protected String queryString(String query, int code) throws Exception {
         return Helper.isToString(downloader.fetch(conn, true));
     }
 
-    protected JsonNode query(String query, int code) throws Exception {
-        return objectMapper.readTree(queryString(query, code));
-    }
-
-    protected JsonNode nearestQuery(String query) throws Exception {
-        String resQuery = "";
-        for (String q : query.split("\\&")) {
-            int index = q.indexOf("=");
-            if (index > 0)
-                resQuery += q.substring(0, index + 1) + WebHelper.encodeURL(q.substring(index + 1));
-            else
-                resQuery += WebHelper.encodeURL(q);
-
-            resQuery += "&";
-        }
-        String url = getTestNearestAPIUrl() + "?" + resQuery;
-        Downloader downloader = new Downloader("web integration tester");
-        return objectMapper.readTree(downloader.downloadAsString(url, true));
+    protected JsonNode query(String address, String queryParameters, int code) throws Exception {
+        return objectMapper.readTree(queryString(address, queryParameters, code));
     }
 
     protected String post(String path, int expectedStatusCode, String xmlOrJson) throws IOException {
diff --git a/web/src/test/java/com/graphhopper/http/ChangeGraphServletIT.java b/web/src/test/java/com/graphhopper/http/ChangeGraphServletIT.java
index a5fa2036e8..2ff1225154 100644
--- a/web/src/test/java/com/graphhopper/http/ChangeGraphServletIT.java
+++ b/web/src/test/java/com/graphhopper/http/ChangeGraphServletIT.java
@@ -56,7 +56,7 @@ public void setUp() {
     @Test
     public void testBlockAccessViaPoint() throws Exception {
         final ObjectMapper objectMapper = new ObjectMapper();
-        JsonNode json = query("point=42.531453,1.518946&point=42.511178,1.54006", 200);
+        JsonNode json = routeQuery("point=42.531453,1.518946&point=42.511178,1.54006", 200);
         JsonNode infoJson = json.get("info");
         assertFalse(infoJson.has("errors"));
         JsonNode path = json.get("paths").get(0);
@@ -83,7 +83,7 @@ public void testBlockAccessViaPoint() throws Exception {
         assertEquals(1, jsonObj.get("updates").asInt());
 
         // route around blocked road => longer
-        json = query("point=42.531453,1.518946&point=42.511178,1.54006", 200);
+        json = routeQuery("point=42.531453,1.518946&point=42.511178,1.54006", 200);
         infoJson = json.get("info");
         assertFalse(infoJson.has("errors"));
         path = json.get("paths").get(0);
diff --git a/web/src/test/java/com/graphhopper/http/GraphHopperDataflagEncoderSpatialRulesIT.java b/web/src/test/java/com/graphhopper/http/GraphHopperDataflagEncoderSpatialRulesIT.java
index 831cd6e121..48e120d5d9 100644
--- a/web/src/test/java/com/graphhopper/http/GraphHopperDataflagEncoderSpatialRulesIT.java
+++ b/web/src/test/java/com/graphhopper/http/GraphHopperDataflagEncoderSpatialRulesIT.java
@@ -57,7 +57,7 @@ public void setUp() {
 
     @Test
     public void testDetourToComplyWithSpatialRule() throws Exception {
-        JsonNode json = query("point=49.995933,11.54809&point=50.004871,11.517191&vehicle=generic", 200);
+        JsonNode json = routeQuery("point=49.995933,11.54809&point=50.004871,11.517191&vehicle=generic", 200);
         JsonNode infoJson = json.get("info");
         assertFalse(infoJson.has("errors"));
         JsonNode path = json.get("paths").get(0);
diff --git a/web/src/test/java/com/graphhopper/http/GraphHopperLandmarksIT.java b/web/src/test/java/com/graphhopper/http/GraphHopperLandmarksIT.java
index 36ee7842d7..24072811bf 100644
--- a/web/src/test/java/com/graphhopper/http/GraphHopperLandmarksIT.java
+++ b/web/src/test/java/com/graphhopper/http/GraphHopperLandmarksIT.java
@@ -64,7 +64,7 @@ public void setUp() {
 
     @Test
     public void testSimpleQuery() throws Exception {
-        JsonNode json = query("point=55.99022,29.129734&point=56.001069,29.150848", 200);
+        JsonNode json = routeQuery("point=55.99022,29.129734&point=56.001069,29.150848", 200);
         JsonNode path = json.get("paths").get(0);
         double distance = path.get("distance").asDouble();
         assertEquals("distance wasn't correct:" + distance, 1870, distance, 100);
@@ -74,14 +74,14 @@ public void testSimpleQuery() throws Exception {
     public void testLandmarkDisconnect() throws Exception {
         // if one algorithm is disabled then the following chain is executed: CH -> LM -> flexible
         // disconnected for landmarks
-        JsonNode json = query("point=55.99022,29.129734&point=56.007787,29.208355&ch.disable=true", 400);
+        JsonNode json = routeQuery("point=55.99022,29.129734&point=56.007787,29.208355&ch.disable=true", 400);
         JsonNode errorJson = json.get("message");
         assertTrue(errorJson.toString(), errorJson.toString().contains("Different subnetworks"));
 
         // without landmarks it should work
         GraphHopper hopper = getInstance(GraphHopper.class);
         hopper.getLMFactoryDecorator().setDisablingAllowed(true);
-        json = query("point=55.99022,29.129734&point=56.007787,29.208355&ch.disable=true&lm.disable=true", 200);
+        json = routeQuery("point=55.99022,29.129734&point=56.007787,29.208355&ch.disable=true&lm.disable=true", 200);
         JsonNode path = json.get("paths").get(0);
         double distance = path.get("distance").asDouble();
         assertEquals("distance wasn't correct:" + distance, 5790, distance, 100);
diff --git a/web/src/test/java/com/graphhopper/http/GraphHopperServletIT.java b/web/src/test/java/com/graphhopper/http/GraphHopperServletIT.java
index 84d877be06..eaac9cc25b 100644
--- a/web/src/test/java/com/graphhopper/http/GraphHopperServletIT.java
+++ b/web/src/test/java/com/graphhopper/http/GraphHopperServletIT.java
@@ -59,7 +59,7 @@ public void setUp() {
 
     @Test
     public void testBasicQuery() throws Exception {
-        JsonNode json = query("point=42.554851,1.536198&point=42.510071,1.548128", 200);
+        JsonNode json = routeQuery("point=42.554851,1.536198&point=42.510071,1.548128", 200);
         JsonNode infoJson = json.get("info");
         assertFalse(infoJson.has("errors"));
         JsonNode path = json.get("paths").get(0);
@@ -71,7 +71,7 @@ public void testBasicQuery() throws Exception {
     @Test
     public void testQueryWithDirections() throws Exception {
         // Note, in general specifying directions does not work with CH, but this is an example where it works
-        JsonNode json = query("point=42.496696,1.499323&point=42.497257,1.501501&heading=240&heading=240&ch.force_heading=true", 200);
+        JsonNode json = routeQuery("point=42.496696,1.499323&point=42.497257,1.501501&heading=240&heading=240&ch.force_heading=true", 200);
         JsonNode infoJson = json.get("info");
         assertFalse(infoJson.has("errors"));
         JsonNode path = json.get("paths").get(0);
@@ -83,7 +83,7 @@ public void testQueryWithDirections() throws Exception {
     @Test
     public void testQueryWithStraightVia() throws Exception {
         // Note, in general specifying straightvia does not work with CH, but this is an example where it works
-        JsonNode json = query(
+        JsonNode json = routeQuery(
                 "point=42.534133,1.581473&point=42.534781,1.582149&point=42.535042,1.582514&pass_through=true", 200);
         JsonNode infoJson = json.get("info");
         assertFalse(infoJson.has("errors"));
@@ -95,14 +95,14 @@ public void testQueryWithStraightVia() throws Exception {
 
     @Test
     public void testJsonRounding() throws Exception {
-        JsonNode json = query("point=42.554851234,1.536198&point=42.510071,1.548128&points_encoded=false", 200);
+        JsonNode json = routeQuery("point=42.554851234,1.536198&point=42.510071,1.548128&points_encoded=false", 200);
         JsonNode cson = json.get("paths").get(0).get("points");
         assertTrue("unexpected precision!", cson.toString().contains("[1.536374,42.554839]"));
     }
 
     @Test
     public void testFailIfElevationRequestedButNotIncluded() throws Exception {
-        JsonNode json = query("point=42.554851234,1.536198&point=42.510071,1.548128&points_encoded=false&elevation=true", 400);
+        JsonNode json = routeQuery("point=42.554851234,1.536198&point=42.510071,1.548128&points_encoded=false&elevation=true", 400);
         assertTrue(json.has("message"));
         assertEquals("Elevation not supported!", json.get("message").asText());
         assertEquals("Elevation not supported!", json.get("hints").get(0).get("message").asText());
@@ -110,7 +110,7 @@ public void testFailIfElevationRequestedButNotIncluded() throws Exception {
 
     @Test
     public void testGraphHopperWeb() throws Exception {
-        GraphHopperAPI hopper = new GraphHopperWeb();
+        GraphHopperWeb hopper = new GraphHopperWeb();
         assertTrue(hopper.load(getTestRouteAPIUrl()));
         GHResponse rsp = hopper.route(new GHRequest(42.554851, 1.536198, 42.510071, 1.548128));
         assertFalse(rsp.getErrors().toString(), rsp.hasErrors());
@@ -139,7 +139,7 @@ public void testGraphHopperWeb() throws Exception {
 
     @Test
     public void testInitInstructionsWithTurnDescription() {
-        GraphHopperAPI hopper = new GraphHopperWeb();
+        GraphHopperWeb hopper = new GraphHopperWeb();
         assertTrue(hopper.load(getTestRouteAPIUrl()));
         GHRequest request = new GHRequest(42.554851, 1.536198, 42.510071, 1.548128);
         GHResponse rsp = hopper.route(request);
@@ -152,7 +152,7 @@ public void testInitInstructionsWithTurnDescription() {
 
     @Test
     public void testGraphHopperWebRealExceptions() {
-        GraphHopperAPI hopper = new GraphHopperWeb();
+        GraphHopperWeb hopper = new GraphHopperWeb();
         assertTrue(hopper.load(getTestRouteAPIUrl()));
 
         // IllegalArgumentException (Wrong Request)
@@ -183,7 +183,7 @@ public void testGraphHopperWebRealExceptions() {
 
     @Test
     public void testGPX() throws Exception {
-        String str = queryString("point=42.554851,1.536198&point=42.510071,1.548128&type=gpx", 200);
+        String str = routeQueryString("point=42.554851,1.536198&point=42.510071,1.548128&type=gpx", 200);
         // For backward compatibility we currently export route and track.
         assertTrue(str.contains("<gh:distance>1841.8</gh:distance>"));
         assertFalse(str.contains("<wpt lat=\"42.51003\" lon=\"1.548188\"> <name>Finish!</name></wpt>"));
@@ -192,7 +192,7 @@ public void testGPX() throws Exception {
 
     @Test
     public void testGPXWithExcludedRouteSelection() throws Exception {
-        String str = queryString("point=42.554851,1.536198&point=42.510071,1.548128&type=gpx&gpx.route=false&gpx.waypoints=false", 200);
+        String str = routeQueryString("point=42.554851,1.536198&point=42.510071,1.548128&type=gpx&gpx.route=false&gpx.waypoints=false", 200);
         assertFalse(str.contains("<gh:distance>115.1</gh:distance>"));
         assertFalse(str.contains("<wpt lat=\"42.51003\" lon=\"1.548188\"> <name>Finish!</name></wpt>"));
         assertTrue(str.contains("<trkpt lat=\"42.554839\" lon=\"1.536374\"><time>"));
@@ -200,7 +200,7 @@ public void testGPXWithExcludedRouteSelection() throws Exception {
 
     @Test
     public void testGPXWithTrackAndWaypointsSelection() throws Exception {
-        String str = queryString("point=42.554851,1.536198&point=42.510071,1.548128&type=gpx&gpx.track=true&gpx.route=false&gpx.waypoints=true", 200);
+        String str = routeQueryString("point=42.554851,1.536198&point=42.510071,1.548128&type=gpx&gpx.track=true&gpx.route=false&gpx.waypoints=true", 200);
         assertFalse(str.contains("<gh:distance>115.1</gh:distance>"));
         assertTrue(str.contains("<wpt lat=\"42.51003\" lon=\"1.548188\"> <name>arrive at destination</name></wpt>"));
         assertTrue(str.contains("<trkpt lat=\"42.554839\" lon=\"1.536374\"><time>"));
@@ -208,7 +208,7 @@ public void testGPXWithTrackAndWaypointsSelection() throws Exception {
 
     @Test
     public void testGPXWithError() throws Exception {
-        String str = queryString("point=42.554851,1.536198&type=gpx", 400);
+        String str = routeQueryString("point=42.554851,1.536198&type=gpx", 400);
         assertFalse(str, str.contains("<html>"));
         assertFalse(str, str.contains("{"));
         assertTrue("Expected error but was: " + str, str.contains("<message>At least 2 points have to be specified, but was:1</message>"));
@@ -217,9 +217,9 @@ public void testGPXWithError() throws Exception {
 
     @Test
     public void testUndefinedPointHeading() throws Exception {
-        JsonNode json = query("point=undefined&heading=0", 400);
+        JsonNode json = routeQuery("point=undefined&heading=0", 400);
         assertEquals("You have to pass at least one point", json.get("message").asText());
-        json = query("point=42.554851,1.536198&point=undefined&heading=0&heading=0", 400);
+        json = routeQuery("point=42.554851,1.536198&point=undefined&heading=0&heading=0", 400);
         assertEquals("The number of 'heading' parameters must be <= 1 or equal to the number of points (1)", json.get("message").asText());
     }
 }
diff --git a/web/src/test/java/com/graphhopper/http/GraphHopperServletWithEleIT.java b/web/src/test/java/com/graphhopper/http/GraphHopperServletWithEleIT.java
index c97b1735d0..18d7bd7521 100644
--- a/web/src/test/java/com/graphhopper/http/GraphHopperServletWithEleIT.java
+++ b/web/src/test/java/com/graphhopper/http/GraphHopperServletWithEleIT.java
@@ -56,7 +56,7 @@ public void setUp() {
 
     @Test
     public void testElevation() throws Exception {
-        JsonNode json = query("point=43.730864,7.420771&point=43.727687,7.418737&points_encoded=false&elevation=true", 200);
+        JsonNode json = routeQuery("point=43.730864,7.420771&point=43.727687,7.418737&points_encoded=false&elevation=true", 200);
         JsonNode infoJson = json.get("info");
         assertFalse(infoJson.has("errors"));
         JsonNode path = json.get("paths").get(0);
@@ -75,7 +75,7 @@ public void testElevation() throws Exception {
     @Test
     public void testNoElevation() throws Exception {
         // default is elevation=false
-        JsonNode json = query("point=43.730864,7.420771&point=43.727687,7.418737&points_encoded=false", 200);
+        JsonNode json = routeQuery("point=43.730864,7.420771&point=43.727687,7.418737&points_encoded=false", 200);
         JsonNode infoJson = json.get("info");
         assertFalse(infoJson.has("errors"));
         JsonNode path = json.get("paths").get(0);
@@ -86,7 +86,7 @@ public void testNoElevation() throws Exception {
         assertTrue("Elevation should not be included!", cson.toString().contains("[7.421392,43.7307]"));
 
         // disable elevation
-        json = query("point=43.730864,7.420771&point=43.727687,7.418737&points_encoded=false&elevation=false", 200);
+        json = routeQuery("point=43.730864,7.420771&point=43.727687,7.418737&points_encoded=false&elevation=false", 200);
         infoJson = json.get("info");
         assertFalse(infoJson.has("errors"));
         path = json.get("paths").get(0);
diff --git a/web/src/test/java/com/graphhopper/http/RebuildServletIT.java b/web/src/test/java/com/graphhopper/http/RebuildServletIT.java
index 640a1e61a1..1d342ac930 100644
--- a/web/src/test/java/com/graphhopper/http/RebuildServletIT.java
+++ b/web/src/test/java/com/graphhopper/http/RebuildServletIT.java
@@ -18,14 +18,9 @@
 package com.graphhopper.http;
 
 import com.fasterxml.jackson.databind.JsonNode;
-import com.fasterxml.jackson.databind.ObjectMapper;
-import com.graphhopper.storage.Directory;
 import com.graphhopper.util.CmdArgs;
 import com.graphhopper.util.Helper;
 import com.graphhopper.util.Parameters;
-import okhttp3.MediaType;
-import okhttp3.Request;
-import okhttp3.RequestBody;
 import org.junit.AfterClass;
 import org.junit.Before;
 import org.junit.Test;
@@ -42,6 +37,14 @@
 public class RebuildServletIT extends BaseServletTester {
     private static final String DIR = "default-gh";
 
+    private String getTestInfoAPIUrl() {
+        return getTestAPIUrl("/info");
+    }
+
+    private JsonNode infoQuery(String query) throws Exception {
+        return query(getTestInfoAPIUrl(), query, 200);
+    }
+
     @AfterClass
     public static void cleanUp() {
         Helper.removeDir(new File(DIR));
@@ -64,9 +67,15 @@ public void testLazyLoad_WithRebuildTwice() throws Exception {
 
         File file = new File("../core/files/andorra.osm.pbf");
         post("/rebuild", 200, file);
-        assertTrue(new File(DIR).listFiles().length > 0);
+        // delete locally created file.
+        Files.delete(Paths.get("andorra.osm.pbf"));
+        JsonNode node1 = infoQuery("");
 
+        file = new File("../core/files/belarus-east.osm.gz");
         post("/rebuild", 200, file);
-        assertTrue(new File(DIR).listFiles().length > 0);
+        Files.delete(Paths.get("belarus-east.osm.gz"));
+        JsonNode node2 = infoQuery("");
+
+        assertNotEquals(node1.get("bbox"), node2.get("bbox"));
     }
 }
