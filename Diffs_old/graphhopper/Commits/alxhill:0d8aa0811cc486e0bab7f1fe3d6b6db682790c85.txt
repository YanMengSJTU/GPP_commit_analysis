diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/Marmoset.java b/marmoset/src/main/java/com/graphhopper/marmoset/Marmoset.java
index 2f6eaedf14..1b03429bcf 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/Marmoset.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/Marmoset.java
@@ -74,7 +74,7 @@ private static void startWebSocketServer()
 
         mss = new MarmosetSocketServer(new InetSocketAddress(port));
         mss.start();
-        logger.info("Listening for websocket requests.");
+        System.out.println("Listening for websocket requests.");
     }
 
     private static void startFileServer()
@@ -84,11 +84,11 @@ private static void startFileServer()
         try
         {
             fileServer.start(5000, false);
-            logger.info("File server started");
+            System.out.println("File server started");
         }
         catch (IOException e)
         {
-            logger.info("Failed to start server: " + e);
+            logger.error("Failed to start server: " + e);
         }
     }
 
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetHopper.java b/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetHopper.java
index a67b8c4d7d..9c9d6182a1 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetHopper.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetHopper.java
@@ -3,6 +3,7 @@
 import com.graphhopper.GraphHopper;
 import com.graphhopper.marmoset.util.CellGraph;
 import com.graphhopper.marmoset.util.Location;
+import com.graphhopper.marmoset.vehicle.DijkstraVehicle;
 import com.graphhopper.marmoset.vehicle.Vehicle;
 import com.graphhopper.util.CmdArgs;
 import org.slf4j.Logger;
@@ -19,13 +20,13 @@
  */
 public class MarmosetHopper {
 
-    private GraphHopper hopper;
-    private CellGraph cellGraph;
-    private List<Vehicle> vehicles;
+    protected GraphHopper hopper;
+    protected CellGraph cellGraph;
+    protected List<Vehicle> vehicles;
 
-    private static Logger logger = LoggerFactory.getLogger(MarmosetHopper.class);
+    protected boolean isPaused;
 
-    private boolean isPaused;
+    private static Logger logger = LoggerFactory.getLogger(MarmosetHopper.class);
 
     public MarmosetHopper() {
         hopper = new GraphHopper();
@@ -58,7 +59,7 @@ public void init()
 
     public synchronized void addVehicle()
     {
-        Vehicle v = new Vehicle(this, Location.randLondon(), Location.randCentralLondon());
+        Vehicle v = new DijkstraVehicle(this, Location.randLondon(), Location.randCentralLondon());
         v.init();
         if (v.isFinished())
             addVehicle();
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetSocketServer.java b/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetSocketServer.java
index 75fc16f487..58c79bb779 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetSocketServer.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetSocketServer.java
@@ -89,6 +89,7 @@ else if (s.equals("next"))
     @Override
     public void onError(WebSocket webSocket, Exception e)
     {
+        e.printStackTrace();
         if (webSocket != null)
             sockets.remove(webSocket);
     }
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/util/CellIterator.java b/marmoset/src/main/java/com/graphhopper/marmoset/util/CellIterator.java
index 4c1db05426..d2936ac102 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/util/CellIterator.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/util/CellIterator.java
@@ -1,6 +1,7 @@
 package com.graphhopper.marmoset.util;
 
 import com.graphhopper.marmoset.vehicle.DijkstraVehicleIterator;
+import com.graphhopper.marmoset.vehicle.VehicleIterator;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -9,12 +10,12 @@
  */
 public class CellIterator {
 
-    private DijkstraVehicleIterator route;
+    private VehicleIterator route;
     private CellGraph cg;
     private int cellIndex;
     private static final Logger logger = LoggerFactory.getLogger(CellIterator.class);
 
-    public CellIterator(DijkstraVehicleIterator route, CellGraph cellGraph, int cellId)
+    public CellIterator(VehicleIterator route, CellGraph cellGraph, int cellId)
     {
         this.route = route;
         this.cg = cellGraph;
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/BaseVehicle.java b/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/BaseVehicle.java
new file mode 100644
index 0000000000..e0208e02a6
--- /dev/null
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/BaseVehicle.java
@@ -0,0 +1,219 @@
+package com.graphhopper.marmoset.vehicle;
+
+import com.graphhopper.marmoset.MarmosetHopper;
+import com.graphhopper.marmoset.util.CellIterator;
+import com.graphhopper.marmoset.util.CellGraph;
+import com.graphhopper.marmoset.util.Location;
+import com.graphhopper.util.*;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.nio.ByteBuffer;
+import java.util.Random;
+
+/**
+ * Created by alexander on 16/02/2016.
+ */
+public abstract class BaseVehicle implements Vehicle {
+
+    protected static final Logger logger = LoggerFactory.getLogger(BaseVehicle.class);
+
+    protected static int maxId = 0;
+    protected final int id;
+
+    protected MarmosetHopper hopper;
+    protected Location loc;
+    protected Location dest;
+    protected boolean finished;
+
+    protected VehicleIterator route;
+
+    protected int cellId;
+    protected int v; // velocity
+    protected float slowProb;
+    protected Random slowRand;
+    protected int maxVelocity = 5;
+
+    protected CellGraph cg;
+
+    public BaseVehicle(MarmosetHopper hopper, Location start, Location dest)
+    {
+        this.hopper = hopper;
+        this.dest = dest;
+        this.loc = start;
+        this.id = maxId++;
+
+        finished = false;
+        slowProb = 0.4f;
+        slowRand = new Random(id);
+    }
+
+    @Override
+    public boolean isFinished()
+    {
+        return finished;
+    }
+
+    protected void finish(String error)
+    {
+        if (error != null)
+            logger.error(error);
+
+        if (route != null)
+            cg.set(route, cellId, false);
+
+        finished = true;
+    }
+
+    @Override
+    public void init()
+    {
+        cellId = 0; // TODO: figure out which cell the vehicle should start at
+        v = 0;
+
+        cg = hopper.getCellGraph();
+
+        route = getVehicleIterator();
+
+        if (isFinished())
+            return;
+
+        route.next();
+
+        cg.set(route, cellId, true);
+
+        finished = false;
+    }
+
+    @Override
+    public void accelerationStep()
+    {
+        CellIterator c = new CellIterator(route.duplicate(), cg, cellId);
+
+        int newMaxVel = maxVelocity;
+
+        int freeCells = 0;
+        while (!c.next() && freeCells < v + 1)
+        {
+            newMaxVel = Math.min(newMaxVel, c.getCellSpeed());
+            freeCells++;
+        }
+        // because who actually drives at the speed limit?
+        maxVelocity = Math.max(2, newMaxVel);
+
+        if (v >= maxVelocity) {
+            v = maxVelocity;
+            return;
+        }
+
+        if (freeCells == v + 1)
+        {
+            logger.debug("Accelerating");
+            v++;
+        }
+
+    }
+
+    @Override
+    public void slowStep()
+    {
+        int j = 0;
+        CellIterator c = new CellIterator(route.duplicate(), cg, cellId);
+
+        while (!c.next() && j <= v)
+            j++;
+
+        if (j <= v)
+        {
+            logger.debug("Slowing");
+            v = (byte) j;
+        }
+    }
+
+    @Override
+    public void randomStep()
+    {
+        if (v > 0 && slowRand.nextDouble() < slowProb)
+        {
+            logger.debug("Randomly slowing");
+            v--;
+        }
+    }
+
+    @Override
+    public void moveStep()
+    {
+        logger.debug("Moving from " + cellId + " to " + (cellId + v) + " (unless it's going over the edge)");
+        cg.set(route, cellId, false);
+        CellIterator c = new CellIterator(route, cg, cellId);
+        int steps = v;
+        while (steps > 0)
+        {
+            c.next();
+            steps--;
+        }
+        cellId = c.getCellIndex();
+        cg.set(route, cellId, true);
+
+        if (!route.hasNext() && cellId == cg.getCellCount(route) - 1)
+        {
+            finished = true;
+            logger.info("BaseVehicle " + id + " reached destination");
+        }
+    }
+
+    @Override
+    public void updateLocation()
+    {
+        double progress = (cellId + 1) / (float) (cg.getCellCount(route));
+
+        PointList path = route.fetchWayGeometry(3);
+        if (path.isEmpty())
+        {
+            logger.debug("Path is empty, not moving...");
+            return;
+        }
+        logger.debug("velocity:" + v);
+        logger.debug("progress:" + progress);
+
+        DistanceCalc dc = new DistanceCalc2D();
+        double dist = path.calcDistance(dc);
+        logger.debug("dist: " + dist);
+        double distTravelled = progress * dist;
+        double currDist = 0;
+        logger.debug(String.format("start(%d): %f + %f", id, currDist, distTravelled));
+        int i = 0;
+        while (i < path.getSize() - 1 && currDist <= distTravelled)
+        {
+            double nextDist = dc.calcDist(path.getLat(i), path.getLon(i), path.getLat(i + 1), path.getLon(i + 1));
+            logger.debug(String.format("-%d|%d: %f + %f", id, i, currDist, nextDist));
+            if (currDist + nextDist > distTravelled)
+            {
+                double partProgress = (distTravelled - currDist) / nextDist;
+                double newLat = path.getLat(i) + partProgress * (path.getLat(i + 1) - path.getLat(i));
+                double newLon = path.getLon(i) + partProgress * (path.getLon(i + 1) - path.getLon(i));
+                loc.set(newLat, newLon);
+                return;
+            }
+            currDist += nextDist;
+            i++;
+        }
+
+        // if we get here we've reached the end of the edge
+        loc.set(path.getLat(path.getSize() - 1), path.getLon(path.getSize() - 1));
+    }
+
+    @Override
+    public String toString()
+    {
+        return String.format("%d|%s|%d", id, loc.toString(), v);
+    }
+
+    @Override
+    public void addToBuffer(ByteBuffer b)
+    {
+        int pos = b.position();
+        b.putInt(id).putInt(v).putDouble(loc.getLat()).putDouble(loc.getLon());
+        logger.debug(String.format("[%d]%d|%d|%f|%f", id, b.getInt(pos), b.getInt(pos + 4), b.getDouble(pos + 8), b.getDouble(pos + 16)));
+    }
+}
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/BaseVehicleIterator.java b/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/BaseVehicleIterator.java
new file mode 100644
index 0000000000..887efdeb86
--- /dev/null
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/BaseVehicleIterator.java
@@ -0,0 +1,139 @@
+package com.graphhopper.marmoset.vehicle;
+
+import com.graphhopper.routing.util.FlagEncoder;
+import com.graphhopper.util.EdgeIteratorState;
+import com.graphhopper.util.PointList;
+
+/**
+ * Created by alexander on 23/03/2016.
+ */
+public abstract class BaseVehicleIterator implements VehicleIterator {
+
+    protected EdgeIteratorState edge;
+    protected FlagEncoder encoder;
+
+    public BaseVehicleIterator(FlagEncoder encoder)
+    {
+        this.encoder = encoder;
+    }
+
+    protected BaseVehicleIterator()
+    {
+    }
+
+    @Override
+    public double getRoadSpeed()
+    {
+        return encoder.getSpeed(edge.getFlags());
+    }
+
+    @Override
+    public int getEdge()
+    {
+        return edge.getEdge();
+    }
+
+    @Override
+    public int getBaseNode()
+    {
+        return edge.getBaseNode();
+    }
+
+    @Override
+    public int getAdjNode()
+    {
+        return edge.getAdjNode();
+    }
+
+    @Override
+    public PointList fetchWayGeometry(int mode)
+    {
+        return edge.fetchWayGeometry(mode);
+    }
+
+    @Override
+    public EdgeIteratorState setWayGeometry(PointList list)
+    {
+        return edge.setWayGeometry(list);
+    }
+
+    @Override
+    public double getDistance()
+    {
+        return edge.getDistance();
+    }
+
+    @Override
+    public EdgeIteratorState setDistance(double dist)
+    {
+        return edge.setDistance(dist);
+    }
+
+    @Override
+    public long getFlags()
+    {
+        return edge.getFlags();
+    }
+
+    @Override
+    public EdgeIteratorState setFlags(long flags)
+    {
+        return edge.setFlags(flags);
+    }
+
+    @Override
+    public int getAdditionalField()
+    {
+        return edge.getAdditionalField();
+    }
+
+    @Override
+    public boolean isForward(FlagEncoder encoder)
+    {
+        return edge.isForward(encoder);
+    }
+
+    @Override
+    public boolean isBackward(FlagEncoder encoder)
+    {
+        return edge.isBackward(encoder);
+    }
+
+    @Override
+    public boolean getBoolean(int key, boolean reverse, boolean _default)
+    {
+        return edge.getBoolean(key, reverse, _default);
+    }
+
+    @Override
+    public EdgeIteratorState setAdditionalField(int value)
+    {
+        return edge.setAdditionalField(value);
+    }
+
+    @Override
+    public String getName()
+    {
+        return edge.getName();
+    }
+
+    @Override
+    public EdgeIteratorState setName(String name)
+    {
+        return edge.setName(name);
+    }
+
+    @Override
+    public EdgeIteratorState detach(boolean reverse)
+    {
+        return edge.detach(reverse);
+    }
+
+    @Override
+    public EdgeIteratorState copyPropertiesTo(EdgeIteratorState e)
+    {
+        return edge.copyPropertiesTo(e);
+    }
+
+
+}
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/DijkstraVehicle.java b/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/DijkstraVehicle.java
new file mode 100644
index 0000000000..7fef6ec0a9
--- /dev/null
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/DijkstraVehicle.java
@@ -0,0 +1,57 @@
+package com.graphhopper.marmoset.vehicle;
+
+import com.graphhopper.GHRequest;
+import com.graphhopper.GHResponse;
+import com.graphhopper.GraphHopper;
+import com.graphhopper.marmoset.MarmosetHopper;
+import com.graphhopper.marmoset.util.Location;
+import com.graphhopper.routing.Path;
+import com.graphhopper.routing.util.FlagEncoder;
+import com.graphhopper.util.EdgeIteratorState;
+
+import java.util.List;
+import java.util.stream.Collectors;
+
+/**
+ * Created by alexander on 23/03/2016.
+ */
+public class DijkstraVehicle extends BaseVehicle {
+
+    public DijkstraVehicle(MarmosetHopper hopper, Location start, Location dest)
+    {
+        super(hopper, start, dest);
+    }
+
+    @Override
+    public VehicleIterator getVehicleIterator()
+    {
+        GraphHopper gh = hopper.getGraphHopper();
+
+        GHRequest ghRequest = new GHRequest(loc.getLat(), loc.getLon(), dest.getLat(), dest.getLon());
+        GHResponse ghResponse = new GHResponse();
+        List<Path> paths = gh.calcPaths(ghRequest, ghResponse);
+        if (ghResponse.hasErrors())
+        {
+            finish("Routing failed:" + ghResponse.getErrors().stream().map(Throwable::toString).collect(Collectors.joining("\n")));
+            return null;
+        }
+
+        if (paths.size() == 0)
+        {
+            finish("No path found");
+            return null;
+        }
+
+        Path p = paths.get(0);
+        List<EdgeIteratorState> edgeList = p.calcEdges();
+
+        if (edgeList.size() <= 1)
+        {
+            finish("Edge list too short");
+            return null;
+        }
+
+        FlagEncoder carEncoder = gh.getEncodingManager().getEncoder("car");
+        return new DijkstraVehicleIterator(edgeList, carEncoder);
+    }
+}
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/DijkstraVehicleIterator.java b/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/DijkstraVehicleIterator.java
index 311068bfaa..a658472636 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/DijkstraVehicleIterator.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/DijkstraVehicleIterator.java
@@ -1,44 +1,28 @@
 package com.graphhopper.marmoset.vehicle;
 
 import com.graphhopper.routing.util.FlagEncoder;
-import com.graphhopper.util.EdgeIterator;
 import com.graphhopper.util.EdgeIteratorState;
-import com.graphhopper.util.PointList;
 
 import java.util.List;
 
 /**
  * Created by alexander on 09/03/2016.
  */
-public class DijkstraVehicleIterator implements VehicleIterator {
+public class DijkstraVehicleIterator extends BaseVehicleIterator {
 
-    private List<EdgeIteratorState> edges;
-    private EdgeIteratorState edge;
-    private int index;
-    private FlagEncoder encoder;
+    protected List<EdgeIteratorState> edges;
+    protected int index;
+
+    protected DijkstraVehicleIterator() {}
 
     public DijkstraVehicleIterator(List<EdgeIteratorState> edges, FlagEncoder encoder)
     {
-        this.encoder = encoder;
+        super(encoder);
         // starts at 0 to skip first edge, as the first edge is virtual (i.e not in graph)
         index = 0;
         this.edges = edges;
     }
 
-    public DijkstraVehicleIterator(DijkstraVehicleIterator e)
-    {
-        encoder = e.encoder;
-        edges = e.edges;
-        edge = e.edge;
-        index = e.index;
-    }
-
-    @Override
-    public double getRoadSpeed()
-    {
-        return encoder.getSpeed(edge.getFlags());
-    }
-
     @Override
     public boolean hasNext()
     {
@@ -56,110 +40,13 @@ public boolean next()
     }
 
     @Override
-    public int getEdge()
-    {
-        return edge.getEdge();
-    }
-
-    @Override
-    public int getBaseNode()
-    {
-        return edge.getBaseNode();
-    }
-
-    @Override
-    public int getAdjNode()
-    {
-        return edge.getAdjNode();
-    }
-
-    @Override
-    public PointList fetchWayGeometry(int mode)
-    {
-        return edge.fetchWayGeometry(mode);
-    }
-
-    @Override
-    public EdgeIteratorState setWayGeometry(PointList list)
-    {
-        return edge.setWayGeometry(list);
-    }
-
-    @Override
-    public double getDistance()
-    {
-        return edge.getDistance();
-    }
-
-    @Override
-    public EdgeIteratorState setDistance(double dist)
-    {
-        return edge.setDistance(dist);
-    }
-
-    @Override
-    public long getFlags()
-    {
-        return edge.getFlags();
-    }
-
-    @Override
-    public EdgeIteratorState setFlags(long flags)
-    {
-        return edge.setFlags(flags);
-    }
-
-    @Override
-    public int getAdditionalField()
-    {
-        return edge.getAdditionalField();
-    }
-
-    @Override
-    public boolean isForward(FlagEncoder encoder)
-    {
-        return edge.isForward(encoder);
-    }
-
-    @Override
-    public boolean isBackward(FlagEncoder encoder)
-    {
-        return edge.isBackward(encoder);
-    }
-
-    @Override
-    public boolean getBoolean(int key, boolean reverse, boolean _default)
-    {
-        return edge.getBoolean(key, reverse, _default);
-    }
-
-    @Override
-    public EdgeIteratorState setAdditionalField(int value)
-    {
-        return edge.setAdditionalField(value);
-    }
-
-    @Override
-    public String getName()
-    {
-        return edge.getName();
-    }
-
-    @Override
-    public EdgeIteratorState setName(String name)
-    {
-        return edge.setName(name);
-    }
-
-    @Override
-    public EdgeIteratorState detach(boolean reverse)
-    {
-        return edge.detach(reverse);
-    }
-
-    @Override
-    public EdgeIteratorState copyPropertiesTo(EdgeIteratorState e)
+    public DijkstraVehicleIterator duplicate()
     {
-        return edge.copyPropertiesTo(e);
+        DijkstraVehicleIterator dvi = new DijkstraVehicleIterator();
+        dvi.encoder = encoder;
+        dvi.edge = edge;
+        dvi.edges = edges;
+        dvi.index = index;
+        return dvi;
     }
 }
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/RandomVehicleIterator.java b/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/RandomVehicleIterator.java
new file mode 100644
index 0000000000..6075801c7a
--- /dev/null
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/RandomVehicleIterator.java
@@ -0,0 +1,55 @@
+package com.graphhopper.marmoset.vehicle;
+
+import com.graphhopper.routing.util.DefaultEdgeFilter;
+import com.graphhopper.routing.util.FlagEncoder;
+import com.graphhopper.storage.Graph;
+import com.graphhopper.util.EdgeExplorer;
+import com.graphhopper.util.EdgeIterator;
+import com.graphhopper.util.EdgeIteratorState;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * Created by alexander on 23/03/2016.
+ */
+public class RandomVehicleIterator extends BaseVehicleIterator {
+
+    private Graph graph;
+    private EdgeExplorer edgeExplorer;
+
+    private static Logger logger = LoggerFactory.getLogger(RandomVehicleIterator.class);
+
+    public RandomVehicleIterator(EdgeIteratorState firstEdge, FlagEncoder encoder, Graph graph)
+    {
+        super(encoder);
+        this.graph = graph;
+        edgeExplorer = graph.createEdgeExplorer(new DefaultEdgeFilter(encoder, false, true));
+        edge = firstEdge;
+    }
+
+    @Override
+    public boolean hasNext()
+    {
+        return true;
+    }
+
+    @Override
+    public boolean next()
+    {
+        EdgeIterator it = edgeExplorer.setBaseNode(edge.getBaseNode());
+        int i = 0;
+        while (it.next())
+        {
+            logger.info("random vehicle edge number " + i);
+        }
+
+        return false;
+    }
+
+    @Override
+    public RandomVehicleIterator duplicate()
+    {
+        return new RandomVehicleIterator(edge, encoder, graph);
+    }
+
+}
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/Vehicle.java b/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/Vehicle.java
index 723b151688..2f4cdc55d6 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/Vehicle.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/Vehicle.java
@@ -1,241 +1,22 @@
 package com.graphhopper.marmoset.vehicle;
 
-import com.graphhopper.GHRequest;
-import com.graphhopper.GHResponse;
-import com.graphhopper.GraphHopper;
-import com.graphhopper.marmoset.MarmosetHopper;
-import com.graphhopper.marmoset.util.CellIterator;
-import com.graphhopper.marmoset.util.CellGraph;
-import com.graphhopper.marmoset.util.Location;
-import com.graphhopper.routing.Path;
-import com.graphhopper.routing.util.FlagEncoder;
-import com.graphhopper.util.*;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 import java.nio.ByteBuffer;
-import java.util.List;
-import java.util.Random;
-import java.util.stream.Collectors;
 
 /**
- * Created by alexander on 16/02/2016.
+ * Created by alexander on 23/03/2016.
  */
-public class Vehicle {
-
-    protected static final Logger logger = LoggerFactory.getLogger(Vehicle.class);
-
-    protected static int maxId = 0;
-    protected final int id;
-
-    protected MarmosetHopper hopper;
-    protected Location loc;
-    protected Location dest;
-    protected boolean finished;
-
-    protected DijkstraVehicleIterator route;
-
-    protected int cellId;
-    protected int v; // velocity
-    protected float slowProb;
-    protected Random slowRand;
-    protected int maxVelocity = 5;
-
-    protected CellGraph cg;
-
-    public Vehicle(MarmosetHopper hopper, Location start, Location dest)
-    {
-        this.hopper = hopper;
-        this.dest = dest;
-        this.loc = start;
-        this.id = maxId++;
-
-        finished = false;
-        slowProb = 0.4f;
-        slowRand = new Random(id);
-    }
-
-    public boolean isFinished()
-    {
-        return finished;
-    }
-
-    private void finish(String error)
-    {
-        if (error != null)
-            logger.error(error);
-
-        if (route != null)
-            cg.set(route, cellId, false);
-
-        finished = true;
-    }
-
-    public void init()
-    {
-        cellId = 0; // TODO: figure out which cell the vehicle should start at
-        v = 0;
-
-        cg = hopper.getCellGraph();
-
-        GraphHopper gh = hopper.getGraphHopper();
-
-        GHRequest ghRequest = new GHRequest(loc.getLat(), loc.getLon(), dest.getLat(), dest.getLon());
-        GHResponse ghResponse = new GHResponse();
-        List<Path> paths = gh.calcPaths(ghRequest, ghResponse);
-        if (ghResponse.hasErrors())
-        {
-            finish("Routing failed:" + ghResponse.getErrors().stream().map(Throwable::toString).collect(Collectors.joining("\n")));
-            return;
-        }
-
-        if (paths.size() == 0)
-        {
-            finish("No path found");
-            return;
-        }
-
-        Path p = paths.get(0);
-        List<EdgeIteratorState> edgeList = p.calcEdges();
-
-        if (edgeList.size() <= 1)
-        {
-            finish("Edge list too short");
-            return;
-        }
-
-        FlagEncoder carEncoder = gh.getEncodingManager().getEncoder("car");
-        route = new DijkstraVehicleIterator(edgeList, carEncoder);
-        route.next();
-
-        cg.set(route, cellId, true);
-
-        finished = false;
-    }
-
-    public void accelerationStep()
-    {
-        CellIterator c = new CellIterator(new DijkstraVehicleIterator(route), cg, cellId);
-
-        int newMaxVel = maxVelocity;
-
-        int freeCells = 0;
-        while (!c.next() && freeCells < v + 1)
-        {
-            newMaxVel = Math.min(newMaxVel, c.getCellSpeed());
-            freeCells++;
-        }
-        // because who actually drives at the speed limit?
-        maxVelocity = Math.max(2, newMaxVel);
-
-        if (v >= maxVelocity) {
-            v = maxVelocity;
-            return;
-        }
-
-        if (freeCells == v + 1)
-        {
-            logger.debug("Accelerating");
-            v++;
-        }
-
-    }
-
-    public void slowStep()
-    {
-        int j = 0;
-        CellIterator c = new CellIterator(new DijkstraVehicleIterator(route), cg, cellId);
-
-        while (!c.next() && j <= v)
-            j++;
-
-        if (j <= v)
-        {
-            logger.debug("Slowing");
-            v = (byte) j;
-        }
-    }
-
-    public void randomStep()
-    {
-        if (v > 0 && slowRand.nextDouble() < slowProb)
-        {
-            logger.debug("Randomly slowing");
-            v--;
-        }
-    }
-
-    public void moveStep()
-    {
-        logger.debug("Moving from " + cellId + " to " + (cellId + v) + " (unless it's going over the edge)");
-        cg.set(route, cellId, false);
-        CellIterator c = new CellIterator(route, cg, cellId);
-        int steps = v;
-        while (steps > 0)
-        {
-            c.next();
-            steps--;
-        }
-        cellId = c.getCellIndex();
-        cg.set(route, cellId, true);
-
-        if (!route.hasNext() && cellId == cg.getCellCount(route) - 1)
-        {
-            finished = true;
-            logger.info("Vehicle " + id + " reached destination");
-        }
-    }
-
-    public void updateLocation()
-    {
-        double progress = (cellId + 1) / (float) (cg.getCellCount(route));
-
-        PointList path = route.fetchWayGeometry(3);
-        if (path.isEmpty())
-        {
-            logger.debug("Path is empty, not moving...");
-            return;
-        }
-        logger.debug("velocity:" + v);
-        logger.debug("progress:" + progress);
+public interface Vehicle {
 
-        DistanceCalc dc = new DistanceCalc2D();
-        double dist = path.calcDistance(dc);
-        logger.debug("dist: " + dist);
-        double distTravelled = progress * dist;
-        double currDist = 0;
-        logger.debug(String.format("start(%d): %f + %f", id, currDist, distTravelled));
-        int i = 0;
-        while (i < path.getSize() - 1 && currDist <= distTravelled)
-        {
-            double nextDist = dc.calcDist(path.getLat(i), path.getLon(i), path.getLat(i + 1), path.getLon(i + 1));
-            logger.debug(String.format("-%d|%d: %f + %f", id, i, currDist, nextDist));
-            if (currDist + nextDist > distTravelled)
-            {
-                double partProgress = (distTravelled - currDist) / nextDist;
-                double newLat = path.getLat(i) + partProgress * (path.getLat(i + 1) - path.getLat(i));
-                double newLon = path.getLon(i) + partProgress * (path.getLon(i + 1) - path.getLon(i));
-                loc.set(newLat, newLon);
-                return;
-            }
-            currDist += nextDist;
-            i++;
-        }
+    VehicleIterator getVehicleIterator();
 
-        // if we get here we've reached the end of the edge
-        loc.set(path.getLat(path.getSize() - 1), path.getLon(path.getSize() - 1));
-    }
+    void init();
+    void accelerationStep();
+    void slowStep();
+    void randomStep();
+    void moveStep();
+    void updateLocation();
 
-    @Override
-    public String toString()
-    {
-        return String.format("%d|%s|%d", id, loc.toString(), v);
-    }
+    void addToBuffer(ByteBuffer byteBuffer);
 
-    public void addToBuffer(ByteBuffer b)
-    {
-        int pos = b.position();
-        b.putInt(id).putInt(v).putDouble(loc.getLat()).putDouble(loc.getLon());
-        logger.debug(String.format("[%d]%d|%d|%f|%f", id, b.getInt(pos), b.getInt(pos + 4), b.getDouble(pos + 8), b.getDouble(pos + 16)));
-    }
+    boolean isFinished();
 }
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/VehicleIterator.java b/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/VehicleIterator.java
index 8f7d3d036d..7f3840df8b 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/VehicleIterator.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/VehicleIterator.java
@@ -5,7 +5,9 @@
 /**
  * Created by alexander on 22/03/2016.
  */
-public interface VehicleIterator extends EdgeIterator{
+public interface VehicleIterator<T extends VehicleIterator> extends EdgeIterator {
     double getRoadSpeed();
     boolean hasNext();
+
+    T duplicate();
 }
