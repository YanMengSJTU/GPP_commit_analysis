diff --git a/core/src/main/java/com/graphhopper/GraphHopper.java b/core/src/main/java/com/graphhopper/GraphHopper.java
index 652481f07c..1564cf6dcc 100644
--- a/core/src/main/java/com/graphhopper/GraphHopper.java
+++ b/core/src/main/java/com/graphhopper/GraphHopper.java
@@ -92,6 +92,7 @@
     // for OSM import
     private String osmFile;
     private double osmReaderWayPointMaxDistance = 1;
+    private String smoothingFilter = "";
     private int workerThreads = -1;
     private boolean calcPoints = true;
     // utils
@@ -633,6 +634,7 @@ public GraphHopper init( CmdArgs args )
 
         // osm import
         osmReaderWayPointMaxDistance = args.getDouble("osmreader.wayPointMaxDistance", osmReaderWayPointMaxDistance);
+        smoothingFilter = args.get("osmreader.smoothingFilter", smoothingFilter);
 
         workerThreads = args.getInt("osmreader.workerThreads", workerThreads);
         enableInstructions = args.getBool("osmreader.instructions", enableInstructions);
@@ -742,7 +744,8 @@ protected OSMReader initOSMReader( OSMReader reader )
                 setElevationProvider(eleProvider).
                 setWorkerThreads(workerThreads).
                 setEncodingManager(encodingManager).
-                setWayPointMaxDistance(osmReaderWayPointMaxDistance);
+                setWayPointMaxDistance(osmReaderWayPointMaxDistance).
+                setElevationFilter(smoothingFilter);
     }
 
     /**
diff --git a/core/src/main/java/com/graphhopper/reader/OSMReader.java b/core/src/main/java/com/graphhopper/reader/OSMReader.java
index fc4650df87..ccd957fad4 100644
--- a/core/src/main/java/com/graphhopper/reader/OSMReader.java
+++ b/core/src/main/java/com/graphhopper/reader/OSMReader.java
@@ -118,6 +118,7 @@
     // negative but increasing to avoid clash with custom created OSM files
     private long newUniqueOsmId = -Long.MAX_VALUE;
     private ElevationProvider eleProvider = ElevationProvider.NOOP;
+    private String smoothingFilter = "";
     private final boolean exitOnlyPillarNodeException = true;
     private File osmFile;
     private final Map<FlagEncoder, EdgeExplorer> outExplorerMap = new HashMap<FlagEncoder, EdgeExplorer>();
@@ -370,19 +371,18 @@ void processWay( OSMWay way )
                 way.setTag("estimated_center", new GHPoint((firstLat + lastLat) / 2, (firstLon + lastLon) / 2));
             }
 
-            //Kalman filter improves quality of elevation data - check for Kalman
-            boolean kalman = true;
-            if(kalman) {
+            //Smoothing filter for elevation on ways
+            if(smoothingFilter.equalsIgnoreCase("kalman") || smoothingFilter.equalsIgnoreCase("mean")) {
 
                 double[] tmpElevations = new double[osmNodeIds.size()];
                 double[] tmpDistances = new double[osmNodeIds.size()-1];
 
                 int osmNodeId = getNodeMap().get(osmNodeIds.get(0));
-                tmpElevations[0] = getTmpElevation(osmNodeId);
+                tmpElevations[0] = getElevation(osmNodeId);
 
                 for (int i = 1; i < tmpElevations.length; i++) {
                     osmNodeId = getNodeMap().get(osmNodeIds.get(i));
-                    tmpElevations[i] = getTmpElevation(osmNodeId);
+                    tmpElevations[i] = getElevation(osmNodeId);
 
                     int firstNode = getNodeMap().get(osmNodeIds.get(i-1));
                     int lastNode = getNodeMap().get(osmNodeIds.get(i));
@@ -396,7 +396,13 @@ void processWay( OSMWay way )
                     }
                 }
 
-                SmoothingFilter filter = new SimpleKalmanFilter(SimpleKalmanFilter.COMBINED, 6, tmpDistances, 40);
+                SmoothingFilter filter;
+
+                if(smoothingFilter.equalsIgnoreCase("mean"))
+                    filter = new MeanFilter(tmpDistances, 100);
+                else
+                    filter = new SimpleKalmanFilter(SimpleKalmanFilter.COMBINED, 6, tmpDistances, 40);
+
                 double[] estimatedElevations = filter.smooth(tmpElevations);
 
                 for (int i = 0; i < estimatedElevations.length; i++) {
@@ -618,7 +624,7 @@ boolean updateTmpElevation( int id, double ele ){
         if (id == EMPTY)
             return false;
         if(id < TOWER_NODE){
-            ele = (getElevation(id) + ele) / 2;
+            ele = (getTmpElevation(id) + ele) / 2;
             id = -id -3;
             nodeAccess.setElevation(id, ele);
             return true;
@@ -1101,6 +1107,12 @@ public OSMReader setElevationProvider( ElevationProvider eleProvider )
         return this;
     }
 
+    public OSMReader setElevationFilter( String filter )
+    {
+        this.smoothingFilter = filter;
+        return this;
+    }
+
     public OSMReader setOSMFile( File osmFile )
     {
         this.osmFile = osmFile;
