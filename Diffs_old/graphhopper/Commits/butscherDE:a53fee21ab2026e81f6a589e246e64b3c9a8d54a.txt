diff --git a/core/src/main/java/com/graphhopper/routing/PathMerge.java b/core/src/main/java/com/graphhopper/routing/PathMerge.java
index 9fc8f62b27..e0741d96a8 100644
--- a/core/src/main/java/com/graphhopper/routing/PathMerge.java
+++ b/core/src/main/java/com/graphhopper/routing/PathMerge.java
@@ -19,10 +19,6 @@ public Path extract() {
     }
 
     public void addPath(final Path newPath) {
-        if (!newPath.isNonEmpty()) {
-            throw new IllegalArgumentException("Cannot add empty paths");
-        }
-
         if (this.edgeIds.size() > 0) {
             addIfThisPathIsntEmpty(newPath);
         } else {
diff --git a/core/src/main/java/com/graphhopper/routing/template/PolygonRoutingTemplate.java b/core/src/main/java/com/graphhopper/routing/template/PolygonRoutingTemplate.java
index 351db9c9c9..64a88cb88e 100644
--- a/core/src/main/java/com/graphhopper/routing/template/PolygonRoutingTemplate.java
+++ b/core/src/main/java/com/graphhopper/routing/template/PolygonRoutingTemplate.java
@@ -55,20 +55,12 @@ public PolygonRoutingTemplate(GHRequest ghRequest, GHResponse ghRsp, LocationInd
 
     private void setCalcPathsParams(QueryGraph queryGraph, RoutingAlgorithmFactory algoFactory, AlgorithmOptions algoOpts) {
         this.queryGraph = queryGraph;
-        this.lookupPoints();
         this.algoFactory = algoFactory;
         this.algorithmOptions = algoOpts;
         this.routingAlgorithm = algoFactory.createAlgo(queryGraph, algoOpts);
         this.routeCandidates = new RouteCandidateList<>();
     }
 
-    private void lookupPoints() {
-        List<GHPoint> points = this.ghRequest.getPoints();
-        FlagEncoder flagEncoder = this.encodingManager.getEncoder(ghRequest.getVehicle());
-        List<QueryResult> lookupResults = super.lookup(points, flagEncoder);
-        queryGraph.lookup(lookupResults);
-    }
-
     private List<Path> routeWithPolygon() {
         prepareRouteCandidateList();
         extractBestPathCandidate();
diff --git a/core/src/test/java/com/graphhopper/routing/template/PolygonThroughRoutingTemplateTest.java b/core/src/test/java/com/graphhopper/routing/template/PolygonThroughRoutingTemplateTest.java
index 71ede8c1fc..fb38b456b2 100644
--- a/core/src/test/java/com/graphhopper/routing/template/PolygonThroughRoutingTemplateTest.java
+++ b/core/src/test/java/com/graphhopper/routing/template/PolygonThroughRoutingTemplateTest.java
@@ -6,6 +6,7 @@
 import com.graphhopper.routing.template.util.PolygonRoutingTestGraph;
 import com.graphhopper.routing.util.*;
 import com.graphhopper.routing.weighting.Weighting;
+import com.graphhopper.storage.index.QueryResult;
 import com.graphhopper.util.shapes.GHPoint;
 import org.junit.Test;
 
@@ -24,13 +25,26 @@ public void quickStartingTest() {
         GHRequest request = buildRequest(new GHPoint(25, 0), new GHPoint(25, 46));
         GHResponse response = new GHResponse();
         final int maxVisitedNodes = this.testGraph.algorithmHints.getInt(MAX_VISITED_NODES, Integer.MAX_VALUE);
-
-        RoutingTemplate routingTemplate = new PolygonThroughRoutingTemplate(request, response, this.testGraph.locationIndex, this.testGraph.nodeAccess, this.testGraph.graph,
+        final RoutingTemplate routingTemplate = new PolygonThroughRoutingTemplate(request, response, this.testGraph.locationIndex, this.testGraph.nodeAccess, this.testGraph.graph,
                                                                             this.testGraph.encodingManager);
-        RoutingAlgorithmFactory algorithmFactory = new RoutingAlgorithmFactorySimple();
-        AlgorithmOptions algorithmOptions = buildAlgorithmOptions(testGraph.algorithmHints, this.testGraph.traversalMode, this.testGraph.algorithmName, this.testGraph.weighting, maxVisitedNodes);
+        final RoutingAlgorithmFactory algorithmFactory = new RoutingAlgorithmFactorySimple();
+        final AlgorithmOptions algorithmOptions = buildAlgorithmOptions(testGraph.algorithmHints, this.testGraph.traversalMode, this.testGraph.algorithmName,
+                                                                       this.testGraph.weighting, maxVisitedNodes);
+        final QueryGraph queryGraph = createQueryGraph(request, routingTemplate);
+
+        List<Path> paths = routingTemplate.calcPaths(queryGraph, algorithmFactory, algorithmOptions);
+
+        printPath(paths);
+    }
+
+    private QueryGraph createQueryGraph(GHRequest request, RoutingTemplate routingTemplate) {
+        final QueryGraph queryGraph = new QueryGraph(this.testGraph.graph);
+        List<QueryResult> results = routingTemplate.lookup(request.getPoints(), this.testGraph.flagEncoder);
+        queryGraph.lookup(results);
+        return queryGraph;
+    }
 
-        List<Path> paths = routingTemplate.calcPaths(new QueryGraph(this.testGraph.graph), algorithmFactory, algorithmOptions);
+    private void printPath(List<Path> paths) {
         System.out.println(paths.get(0).getNodesInPathOrder());
         System.out.println(paths.toString());
     }
diff --git a/core/src/test/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidateListTest.java b/core/src/test/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidateListTest.java
index eac2a89e69..0e915dabad 100644
--- a/core/src/test/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidateListTest.java
+++ b/core/src/test/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidateListTest.java
@@ -3,6 +3,7 @@
 import com.graphhopper.GHRequest;
 import com.graphhopper.routing.AlgorithmOptions;
 import com.graphhopper.routing.Path;
+import com.graphhopper.routing.PathMerge;
 import com.graphhopper.routing.QueryGraph;
 import com.graphhopper.routing.template.PolygonRoutingTemplate;
 import com.graphhopper.routing.template.PolygonThroughRoutingTemplate;
@@ -25,12 +26,39 @@
     private void addTestingCandidates() {
         this.candidateList.getCandidates().clear();
         this.candidateList.getCandidates().add(new RouteCandidateMocker(routingTemplate, 3, 6, 1, "a"));
+        this.candidateList.getCandidates().get(0).startToDetourEntry = new PathMerge(graphMocker.graph, graphMocker.weighting);
+        this.candidateList.getCandidates().get(0).detourEntryToDetourExit = new PathMerge(graphMocker.graph, graphMocker.weighting);
+        this.candidateList.getCandidates().get(0).detourExitToEnd = new PathMerge(graphMocker.graph, graphMocker.weighting);
+
         this.candidateList.getCandidates().add(new RouteCandidateMocker(routingTemplate, 2, 3, 1, "b"));
+        this.candidateList.getCandidates().get(1).startToDetourEntry = new PathMerge(graphMocker.graph, graphMocker.weighting);
+        this.candidateList.getCandidates().get(1).detourEntryToDetourExit = new PathMerge(graphMocker.graph, graphMocker.weighting);
+        this.candidateList.getCandidates().get(1).detourExitToEnd = new PathMerge(graphMocker.graph, graphMocker.weighting);
+
         this.candidateList.getCandidates().add(new RouteCandidateMocker(routingTemplate, 6, 6, 5, "c"));
+        this.candidateList.getCandidates().get(2).startToDetourEntry = new PathMerge(graphMocker.graph, graphMocker.weighting);
+        this.candidateList.getCandidates().get(2).detourEntryToDetourExit = new PathMerge(graphMocker.graph, graphMocker.weighting);
+        this.candidateList.getCandidates().get(2).detourExitToEnd = new PathMerge(graphMocker.graph, graphMocker.weighting);
+
         this.candidateList.getCandidates().add(new RouteCandidateMocker(routingTemplate, 4, 5, 3, "d"));
+        this.candidateList.getCandidates().get(3).startToDetourEntry = new PathMerge(graphMocker.graph, graphMocker.weighting);
+        this.candidateList.getCandidates().get(3).detourEntryToDetourExit = new PathMerge(graphMocker.graph, graphMocker.weighting);
+        this.candidateList.getCandidates().get(3).detourExitToEnd = new PathMerge(graphMocker.graph, graphMocker.weighting);
+
         this.candidateList.getCandidates().add(new RouteCandidateMocker(routingTemplate, 8, 4, 6, "e"));
+        this.candidateList.getCandidates().get(4).startToDetourEntry = new PathMerge(graphMocker.graph, graphMocker.weighting);
+        this.candidateList.getCandidates().get(4).detourEntryToDetourExit = new PathMerge(graphMocker.graph, graphMocker.weighting);
+        this.candidateList.getCandidates().get(4).detourExitToEnd = new PathMerge(graphMocker.graph, graphMocker.weighting);
+
         this.candidateList.getCandidates().add(new RouteCandidateMocker(routingTemplate, 6, 1, 3, "f"));
+        this.candidateList.getCandidates().get(5).startToDetourEntry = new PathMerge(graphMocker.graph, graphMocker.weighting);
+        this.candidateList.getCandidates().get(5).detourEntryToDetourExit = new PathMerge(graphMocker.graph, graphMocker.weighting);
+        this.candidateList.getCandidates().get(5).detourExitToEnd = new PathMerge(graphMocker.graph, graphMocker.weighting);
+
         this.candidateList.getCandidates().add(new RouteCandidateMocker(routingTemplate, 7, 1, 6, "g"));
+        this.candidateList.getCandidates().get(6).startToDetourEntry = new PathMerge(graphMocker.graph, graphMocker.weighting);
+        this.candidateList.getCandidates().get(6).detourEntryToDetourExit = new PathMerge(graphMocker.graph, graphMocker.weighting);
+        this.candidateList.getCandidates().get(6).detourExitToEnd = new PathMerge(graphMocker.graph, graphMocker.weighting);
     }
 
     @Test
diff --git a/core/src/test/java/com/graphhopper/routing/template/util/PolygonRoutingTestGraph.java b/core/src/test/java/com/graphhopper/routing/template/util/PolygonRoutingTestGraph.java
index 1861add661..1f14960f4b 100644
--- a/core/src/test/java/com/graphhopper/routing/template/util/PolygonRoutingTestGraph.java
+++ b/core/src/test/java/com/graphhopper/routing/template/util/PolygonRoutingTestGraph.java
@@ -20,7 +20,7 @@
     private Node[] nodes;
     private final DistanceCalc2D distanceCalculator;
     public EncodingManager encodingManager;
-    private FlagEncoder flagEncoder;
+    public FlagEncoder flagEncoder;
     public GraphHopperStorage graph;
     public Polygon polygon;
     public LocationIndex locationIndex;
