diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/JSONParser.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/JSONParser.java
index 2ecb0f735c..ab20422475 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/JSONParser.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/JSONParser.java
@@ -162,18 +162,27 @@ public long getTotalRouteTime() {
 	}
 
 	public String getErrorMessage() {
-		JsonArray errors = info.getAsJsonArray("errors");
-		JsonPrimitive errorMessage = errors.get(0).getAsJsonObject()
+		
+		JsonObject error= jObject.getAsJsonObject("error");
+	//	JsonArray errors = info.getAsJsonArray("errors");
+		//JsonPrimitive errorMessage = errors.get(0).getAsJsonObject()
+		//		.getAsJsonPrimitive("message");
+		JsonPrimitive errorMessage = error.getAsJsonObject()
 				.getAsJsonPrimitive("message");
 		return errorMessage.getAsString();
 
 	}
 
 	public int getStatusCode() {
-		JsonArray errors = info.getAsJsonArray("errors");
-		JsonPrimitive errorMessage = errors.get(0).getAsJsonObject()
-				.getAsJsonPrimitive("statuscode");
-		return errorMessage.getAsInt();
+	//	JsonArray errors = info.getAsJsonArray("errors");
+		
+		JsonObject error= jObject.getAsJsonObject("error");
+	//	JsonArray errors = info.getAsJsonArray("errors");
+
+		JsonPrimitive statusCode = error.getAsJsonPrimitive("statuscode");
+		//JsonPrimitive errorMessage = errors.get(0).getAsJsonObject()
+		//		.getAsJsonPrimitive("statuscode");
+		return statusCode.getAsInt();
 
 	}
 
diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
index 7bc129c934..6bb909bd68 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
@@ -13,6 +13,7 @@
 import cucumber.api.Scenario;
 import cucumber.api.java.After;
 import cucumber.api.java.Before;
+import cucumber.api.java.en.And;
 import cucumber.api.java.en.Given;
 import cucumber.api.java.en.Then;
 import cucumber.api.java.en.When;
@@ -170,6 +171,23 @@ public void I_should_be_able_to_verify_the_response_message_as(
 		graphUiUtil.verifyErrorMessage(responseMessage);
 
 	}
+	
+	@Then("^I should be able to verify the http statuscode as \"([^\"]*)\"$")
+	public void I_should_be_able_to_verify_the_http_responseCode_as(int statusCode) {
+
+		graphUiUtil.verifyHttpStatusCode(statusCode);
+
+	}
+
+	@Then("^I should be able to verify the http response message as \"([^\"]*)\"$")
+	public void I_should_be_able_to_verify_the_http_response_message_as(
+			String responseMessage) {
+
+		graphUiUtil.verifyHttpErrorMessage(responseMessage);
+
+	}
+
+	
 
 	@When("^I request for a route$")
 	public void I_request_for_route() {
@@ -206,6 +224,14 @@ public void I_request_for_route() {
 		}
 
 	}
+	
+	@And("^I request for HTTP \"([^\"]*)\" method$")
+	public void I_request_for_http_mehtod(String httpMethod)
+	{
+		graphUiUtil.setHTTPMethod(httpMethod);
+	}
+	
+	
 
 	@After("@SampleScenario")
 	public void I_should_be_able_to_capture_a_screenshot(Scenario sc)
diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
index 6784e24280..6b2a26ded5 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
@@ -25,9 +25,16 @@
 import org.alternativevision.gpx.beans.Route;
 import org.alternativevision.gpx.beans.Waypoint;
 import org.apache.commons.io.IOUtils;
+import org.apache.http.HttpRequest;
+import org.apache.http.StatusLine;
 import org.apache.http.client.ClientProtocolException;
 import org.apache.http.client.methods.CloseableHttpResponse;
+import org.apache.http.client.methods.HttpDelete;
+import org.apache.http.client.methods.HttpEntityEnclosingRequestBase;
 import org.apache.http.client.methods.HttpGet;
+import org.apache.http.client.methods.HttpPost;
+import org.apache.http.client.methods.HttpPut;
+import org.apache.http.client.methods.HttpUriRequest;
 import org.apache.http.impl.client.CloseableHttpClient;
 import org.junit.Assert;
 import org.openqa.selenium.By;
@@ -63,6 +70,9 @@
 	JavascriptExecutor js = (JavascriptExecutor) driver;
 	WebElement we;
 	private BufferedImage actualMap;
+	private String httpMethod="";
+	private int actualResponseCode;
+	private String actualResponseMsg;
 
 	private static final Logger LOG = LoggerFactory
 			.getLogger(GraphHopperUIUtil.class);
@@ -708,6 +718,10 @@ void sendAndGetResponse(StringBuffer sb) {
 					.toString());
 			serviceResponse = IOUtils.toString(httpResponse.getEntity()
 					.getContent(), "UTF-8");
+			
+			final StatusLine statusLine = httpResponse.getStatusLine();
+			actualResponseCode = statusLine.getStatusCode();
+			actualResponseMsg = statusLine.getReasonPhrase();
 
 		} catch (IOException e) {
 			LOG.info("Exception raised whilst attempting to call graphhopper server "
@@ -739,19 +753,50 @@ public CloseableHttpResponse dispatchServiceRequest(String requestUrl)
 		return doSendAndGetResponse(serviceUrl);
 	}
 
-	private void addCustomHeaders(HttpGet httpget) {
+	private void addCustomHeaders(HttpUriRequest httpRequest) {
 		for (Entry<String, String> header : customHeaders.entrySet()) {
-			httpget.addHeader(header.getKey(), header.getValue());
+			httpRequest.addHeader(header.getKey(), header.getValue());
 		}
 	}
 
 	CloseableHttpResponse doSendAndGetResponse(String serviceUrl)
 			throws IOException, ClientProtocolException {
 		CloseableHttpClient httpClient = HttpClientUtils.createClient();
-		HttpGet httpget = new HttpGet(serviceUrl);
-		addCustomHeaders(httpget);
+		
+		HttpUriRequest httpRequest=null;
+		
+	switch (httpMethod) {
+	case "PUT":
+		httpRequest = new HttpPut(serviceUrl);
+		
+		break;
+	case "GET":
+		
+		httpRequest = new HttpGet(serviceUrl);
+		
+		break;
+		
+	case "DEL":
+		
+		httpRequest = new HttpDelete(serviceUrl);
+		
+		break;
+		
+	case "POST":
+		
+		httpRequest = new HttpPost(serviceUrl);
+		
+		break;
+
+	default:
+		httpRequest = new HttpGet(serviceUrl);
+		break;
+	}
+		
+		//HttpGet httpget = new HttpGet(serviceUrl);
+		addCustomHeaders(httpRequest);
 
-		return httpClient.execute(httpget);
+		return httpClient.execute(httpRequest);
 	}
 
 	protected void getRouteFromServiceWithParameters() {
@@ -969,4 +1014,22 @@ public String getNearestPointDistance() {
 		return GPHJSONUtil.getNearestPointDistance();
 	}
 
+	public void setHTTPMethod(String httpMethod) {
+		
+		this.httpMethod=httpMethod;
+		
+
+		
+	}
+
+	public void verifyHttpStatusCode(int statusCode) {
+		Assert.assertTrue("Actual http Status Code"+ actualResponseCode+ "i s not matching with "+statusCode,statusCode==actualResponseCode);		
+	}
+
+	public void verifyHttpErrorMessage(String responseMessage) {
+		Assert.assertTrue("Actual http Error Message "+ actualResponseMsg+ " is not matching with "+responseMessage,responseMessage.equalsIgnoreCase(actualResponseMsg));
+		
+	}
+
+	
 }
diff --git a/acceptancetesting/src/test/cucumber/Routing-Exeter.feature b/acceptancetesting/src/test/cucumber/Routing-Exeter.feature
index 56fc728bd7..5b2f4f72dc 100644
--- a/acceptancetesting/src/test/cucumber/Routing-Exeter.feature
+++ b/acceptancetesting/src/test/cucumber/Routing-Exeter.feature
@@ -834,7 +834,7 @@ Feature: Verify a route from A to B
       | car         |            | fastest   |
 
   #Error Messages
-  @Routing @ErrorMessages
+  @Routing @ErrorMessages  @Current
   Scenario Outline: Incorrect Parameter Value for "Vehicle"
     Given I have route point as
       | pointA              | pointB              |
@@ -843,15 +843,17 @@ Feature: Verify a route from A to B
     And I have avoidances as "<avoidances>"
     And I have weighting as "<routeType>"
     When I request for a route
+    Then I should be able to verify the http response message as "<httpErrorMessage>"
+    Then I should be able to verify the http statuscode as "<statusCode>"
     Then I should be able to verify the response message as "<errorMessage>"
     Then I should be able to verify the statuscode as "<statusCode>"
 
     Examples: 
-      | vehicleType | avoidances | routeType | errorMessage                                                 | statusCode |
-      | 123         |            | fastest   | Vehicle 123 is not a valid vehicle. Valid vehicles are car. 	| 400        |
-      | foot        |            | fastest   | Vehicle foot is not a valid vehicle. Valid vehicles are car. | 400        |
-      | cycle       |            | fastest   | Vehicle cycle is not a valid vehicle. Valid vehicles are car.| 400        |
-      | Bike        |            | fastest   | Vehicle Bike is not a valid vehicle. Valid vehicles are car. | 400        |
+      | vehicleType | avoidances | routeType | errorMessage                                                 | statusCode |httpErrorMessage|
+      | 123         |            | fastest   | Vehicle 123 is not a valid vehicle. Valid vehicles are car. 	| 400        |e|
+      | foot        |            | fastest   | Vehicle foot is not a valid vehicle. Valid vehicles are car. | 400        |e|
+      | cycle       |            | fastest   | Vehicle cycle is not a valid vehicle. Valid vehicles are car.| 400        |e|
+      | Bike        |            | fastest   | Vehicle Bike is not a valid vehicle. Valid vehicles are car. | 400        |e|
 
   @Routing @ErrorMessages
   Scenario Outline: Incorrect Parameter Name "vehicles"
@@ -934,3 +936,23 @@ Feature: Verify a route from A to B
     Examples: 
       | vehicleType | avoidances | routeType | responseFormat | errorMessage                                                                                                     | statusCode |
       | car         | trees      | fastest   | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
+
+      
+        @Routing @ErrorMessages @Current
+  Scenario Outline: Invalid Parameter Value for "avoidances"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 50.729961,-3.524853 | 50.723364,-3.523895 |
+    Given I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    And I request for HTTP "PUT" method
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | responseFormat | errorMessage                                                                                                     | statusCode |
+      | car         | trees      | fastest   | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
+      
\ No newline at end of file
diff --git a/acceptancetesting/src/test/cucumber/routing.feature b/acceptancetesting/src/test/cucumber/routing.feature
index 11730be283..91ff515b2f 100644
--- a/acceptancetesting/src/test/cucumber/routing.feature
+++ b/acceptancetesting/src/test/cucumber/routing.feature
@@ -909,7 +909,7 @@ Feature: Verify a route from A to B
       | vehicleType | avoidances | routeType |
       | car         |            | fastest   |
 
-  @Routing 
+  @Routing @Current
   Scenario Outline: Verify  Route using 2 intermediate waypoints (Oxford to LONDON )
     Given I have route point as
       | pointA              | pointB              | pointC             | pointD              |
@@ -919,15 +919,11 @@ Feature: Verify a route from A to B
     And I have weighting as "<routeType>"
     When I request for a route
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco          | waypointdesc                          | azimuth | direction | time   | distance | avoidance |
- 
-     | 5             | 51.748432,-1.261457 | Turn left onto THAMES STREET (A420)  | 275.0  | W         | 5517   | 145.6     |           |
-      | 21            | 51.922501,-1.324913 | Turn slight left onto OXFORD ROAD (A4260)   | 342.0   | N        | 243586 | 6342.0  |           |
-      
-   | 32            |52.056919,-1.341208 | Turn right onto BEARGARDEN ROAD    | 324.0   | NW         | 24343   | 304.3     |           |
-  
- 
-     | 67            | 52.288814,-1.607721 | Turn left onto BIRMINGHAM ROAD (A425) | 130.0   | SE        | 26878  | 396.7    |           |
+      | wayPointIndex | waypointco          | waypointdesc                              | azimuth | direction | time   | distance | avoidance |
+      | 5             | 51.748432,-1.261457 | Turn left onto THAMES STREET (A420)       | 275.0   | W         | 5517   | 145.6    |           |
+      | 21            | 51.922501,-1.324913 | Turn slight left onto OXFORD ROAD (A4260) | 342.0   | N         | 243586 | 6342.0   |           |
+      | 32            | 52.056919,-1.341208 | Turn right onto BEARGARDEN ROAD           | 324.0   | NW        | 24343  | 304.3    |           |
+      | 67            | 52.288814,-1.607721 | Turn left onto BIRMINGHAM ROAD (A425)     | 130.0   | SE        | 26878  | 396.7    |           |
 
     Examples: 
       | vehicleType | avoidances | routeType |
