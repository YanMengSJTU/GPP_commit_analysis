diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/QuarryOrPit.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/QuarryOrPit.java
new file mode 100644
index 0000000000..814c288f77
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/QuarryOrPit.java
@@ -0,0 +1,16 @@
+package com.graphhopper.reader.osgb.dpn;
+
+import com.graphhopper.reader.Way;
+
+/**
+ * Created by sadam on 13/02/15.
+ */
+public class QuarryOrPit extends AbstractOsDpnOsmAttibuteMappingVisitor {
+
+    @Override
+    protected void applyAttributes(Way way)
+    {
+        way.setTag("natural", "excavation");
+    }
+
+}
diff --git a/core/src/main/java/com/graphhopper/routing/util/OsAvoidanceDecorator.java b/core/src/main/java/com/graphhopper/routing/util/OsAvoidanceDecorator.java
new file mode 100644
index 0000000000..791d62bdea
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/routing/util/OsAvoidanceDecorator.java
@@ -0,0 +1,171 @@
+package com.graphhopper.routing.util;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.util.InstructionAnnotation;
+import com.graphhopper.util.Translation;
+
+/**
+ * Created by sadam on 4/15/15.
+ */
+public class OsAvoidanceDecorator {
+    private EncodedValue wayTypeEncoder;
+
+
+    protected enum AvoidanceType
+    {
+        MOTORWAYS(1) {
+            @Override
+            public boolean isValidForWay(Way way) {
+               return way.hasTag("highway", "Motorway", "motorway");
+            }
+        },
+        TOLL(2) {
+            @Override
+            public boolean isValidForWay(Way way) {
+                return way.hasTag("toll", "yes");
+            }
+        },
+        Boulders(4) {
+            @Override
+            public boolean isValidForWay(Way way) {
+                return hasTag(way, "natural", "boulder");
+            }
+        },
+        Cliff(8) {
+            @Override
+            public boolean isValidForWay(Way way) {
+                return hasTag(way, "natural","cliff");
+            }
+        },
+        Marsh(16) {
+            @Override
+            public boolean isValidForWay(Way way) {
+                return way.hasTag("wetland", "marsh");
+            }
+        },
+        Mud(32) {
+            @Override
+            public boolean isValidForWay(Way way) {
+                return hasTag(way, "natural", "mud");
+            }
+        },
+        Sand(64) {
+            @Override
+            public boolean isValidForWay(Way way) {
+                return hasTag(way, "natural", "sand");
+            }
+        },
+        Scree(128) {
+            @Override
+            public boolean isValidForWay(Way way) {
+                return hasTag(way, "natural", "scree");
+            }
+        },
+        Shingle(256) {
+            @Override
+            public boolean isValidForWay(Way way) {
+                return hasTag(way, "natural", "shingle");
+            }
+        },
+        Spoil(512) {
+            @Override
+            public boolean isValidForWay(Way way) {
+                return hasTag(way, "natural", "spoil");
+            }
+        },
+        Rock(1024) {
+            @Override
+            public boolean isValidForWay(Way way) {
+                return hasTag(way, "natural", "rock");
+            }
+        },
+        TidalWater(2048) {
+            @Override
+            public boolean isValidForWay(Way way) {
+                return hasTag(way, "natural", "water")  && way.hasTag("tidal", "yes");
+            }
+        },
+        InlandWater(4096) {
+            @Override
+            public boolean isValidForWay(Way way) {
+                return hasTag(way, "natural", "water")  && way.hasTag("tidal", "no");
+            }
+        },
+        QuarryOrPit(8192) {
+            @Override
+            public boolean isValidForWay(Way way) {
+                return hasTag(way, "natural", "excavation");
+            }
+        };
+
+        private static boolean hasTag(Way way, String key, String value) {
+            String wayTag = way.getTag(key);
+            if(null!=wayTag) {
+                String[] values = wayTag.split(",");
+                for (String tvalue : values) {
+                    if (tvalue.equals(value)) {
+                        return true;
+                    }
+                }
+            }
+            return false;
+        }
+
+
+        private final long value;
+
+        private AvoidanceType( long value )
+        {
+            this.value = value;
+        }
+
+        public long getValue()
+        {
+            return value;
+        }
+
+        public boolean isValidForWay(Way way) {
+            return false;
+        }
+
+
+
+    }
+
+    public int defineWayBits(int shift) {
+        wayTypeEncoder = new EncodedValue("WayType", shift, 14, 1, 0, 16383, true);
+        shift += wayTypeEncoder.getBits();
+        return shift;
+    }
+
+    public long handleWayTags(Way way, long encoded) {
+        long avoidanceValue=0;
+
+        for (AvoidanceType aType: AvoidanceType.values()) {
+            if(aType.isValidForWay(way)) {
+                avoidanceValue += aType.getValue();
+            }
+        }
+        return wayTypeEncoder.setValue(encoded, avoidanceValue);
+    }
+
+    public InstructionAnnotation getAnnotation( long flags, Translation tr )
+    {
+        long wayType = wayTypeEncoder.getValue(flags);
+        String wayName = getWayName(wayType, tr);
+        return new InstructionAnnotation(0, wayName);
+    }
+
+    private String getWayName(long wayType, Translation tr) {
+        String wayName="";
+        for (AvoidanceType aType: AvoidanceType.values()) {
+            if ((wayType & aType.getValue()) == aType.getValue()) {
+                wayName += " ";
+                wayName += aType.name();
+            }
+        }
+
+        return wayName;
+    }
+
+}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/QuarryOrPitTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/QuarryOrPitTest.java
new file mode 100644
index 0000000000..f05499e808
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/QuarryOrPitTest.java
@@ -0,0 +1,36 @@
+package com.graphhopper.reader.osgb.dpn;
+
+import static org.mockito.Mockito.verify;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Ignore;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+
+public class QuarryOrPitTest {
+	 static OsDpnOsmAttributeMappingVisitor visitor;
+	    @Mock
+	    Way way;
+
+	    @BeforeClass
+	    public static void createVisitor() {
+	        visitor = new QuarryOrPit();
+	    }
+
+	    @Before
+	    public void init() {
+	        MockitoAnnotations.initMocks(this);
+	    }
+
+	    @Test
+        @Ignore
+	    public void testVisitWayAttribute() throws Exception {
+	        visitor.visitWayAttribute("quarryorpit", way);
+	        verify(way).setTag("natural", "excavation");
+	    }
+
+}
diff --git a/core/src/test/java/com/graphhopper/routing/util/OsAvoidanceDecoratorTest.java b/core/src/test/java/com/graphhopper/routing/util/OsAvoidanceDecoratorTest.java
new file mode 100644
index 0000000000..ed574bab36
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/routing/util/OsAvoidanceDecoratorTest.java
@@ -0,0 +1,177 @@
+package com.graphhopper.routing.util;
+
+import com.graphhopper.reader.Way;
+
+import com.graphhopper.reader.osgb.itn.OSITNWay;
+import com.graphhopper.util.InstructionAnnotation;
+import org.junit.Before;
+import org.junit.Test;
+
+import static org.junit.Assert.*;
+
+public class OsAvoidanceDecoratorTest {
+    OsAvoidanceDecorator osAvoidances = new OsAvoidanceDecorator();
+
+    @Before
+    public void defineWayBits() {
+        osAvoidances.defineWayBits(0);
+    }
+
+    @Test
+    public void testMotorwayAttributeStorage() {
+        Way way = new OSITNWay(1L);
+        way.setTag("highway", "motorway");
+        long wayFlag = osAvoidances.handleWayTags(way,0);
+        assertEquals(OsAvoidanceDecorator.AvoidanceType.MOTORWAYS.getValue(), wayFlag);
+        way.setTag("highway", "Motorway");
+        wayFlag = osAvoidances.handleWayTags(way,0);
+        assertEquals(OsAvoidanceDecorator.AvoidanceType.MOTORWAYS.getValue(), wayFlag);
+
+    }
+
+    @Test
+    public void testTollAttributeStorage() {
+        Way way = new OSITNWay(1L);
+        way.setTag("toll", "yes");
+        long wayFlag = osAvoidances.handleWayTags(way,0);
+        assertEquals(OsAvoidanceDecorator.AvoidanceType.TOLL.getValue(), wayFlag);
+
+    }
+
+    @Test
+    public void testBoulderAttributeStorage() {
+        Way way = new OSITNWay(1L);
+        way.setTag("natural", "boulder");
+        long wayFlag = osAvoidances.handleWayTags(way,0);
+        assertEquals(OsAvoidanceDecorator.AvoidanceType.Boulders.getValue(), wayFlag);
+
+    }
+
+    @Test
+    public void testCliffAttributeStorage() {
+        Way way = new OSITNWay(1L);
+        way.setTag("natural", "cliff");
+        long wayFlag = osAvoidances.handleWayTags(way,0);
+        assertEquals(OsAvoidanceDecorator.AvoidanceType.Cliff.getValue(), wayFlag);
+
+    }
+
+    @Test
+    public void testMarshAttributeStorage() {
+        Way way = new OSITNWay(1L);
+        way.setTag("wetland", "marsh");
+        long wayFlag = osAvoidances.handleWayTags(way,0);
+        assertEquals(OsAvoidanceDecorator.AvoidanceType.Marsh.getValue(), wayFlag);
+
+    }
+
+    @Test
+    public void testMudAttributeStorage() {
+        Way way = new OSITNWay(1L);
+        way.setTag("natural", "mud");
+        long wayFlag = osAvoidances.handleWayTags(way,0);
+        assertEquals(OsAvoidanceDecorator.AvoidanceType.Mud.getValue(), wayFlag);
+
+    }
+
+    @Test
+    public void testSandAttributeStorage() {
+        Way way = new OSITNWay(1L);
+        way.setTag("natural", "sand");
+        long wayFlag = osAvoidances.handleWayTags(way,0);
+        assertEquals(OsAvoidanceDecorator.AvoidanceType.Sand.getValue(), wayFlag);
+
+    }
+
+    @Test
+    public void testScreeAttributeStorage() {
+        Way way = new OSITNWay(1L);
+        way.setTag("natural", "scree");
+        long wayFlag = osAvoidances.handleWayTags(way,0);
+        assertEquals(OsAvoidanceDecorator.AvoidanceType.Scree.getValue(), wayFlag);
+
+    }
+
+    @Test
+    public void testShingleAttributeStorage() {
+        Way way = new OSITNWay(1L);
+        way.setTag("natural", "shingle");
+        long wayFlag = osAvoidances.handleWayTags(way,0);
+        assertEquals(OsAvoidanceDecorator.AvoidanceType.Shingle.getValue(), wayFlag);
+
+    }
+
+    @Test
+    public void testSpoilAttributeStorage() {
+        Way way = new OSITNWay(1L);
+        way.setTag("natural", "spoil");
+        long wayFlag = osAvoidances.handleWayTags(way,0);
+        assertEquals(OsAvoidanceDecorator.AvoidanceType.Spoil.getValue(), wayFlag);
+
+    }
+
+    @Test
+    public void testTidalWaterAttributeStorage() {
+        Way way = new OSITNWay(1L);
+        way.setTag("natural", "water");
+        way.setTag("tidal", "yes");
+        long wayFlag = osAvoidances.handleWayTags(way,0);
+        assertEquals(OsAvoidanceDecorator.AvoidanceType.TidalWater.getValue(), wayFlag);
+
+    }
+
+    @Test
+    public void testInlandWaterAttributeStorage() {
+        Way way = new OSITNWay(1L);
+        way.setTag("natural", "water");
+        way.setTag("tidal","no");
+        long wayFlag = osAvoidances.handleWayTags(way,0);
+        assertEquals(OsAvoidanceDecorator.AvoidanceType.InlandWater.getValue(), wayFlag);
+
+    }
+
+    @Test
+    public void testQuarryOrPitAttributeStorage() {
+        Way way = new OSITNWay(1L);
+        way.setTag("natural", "excavation");
+        long wayFlag = osAvoidances.handleWayTags(way,0);
+        assertEquals(OsAvoidanceDecorator.AvoidanceType.QuarryOrPit.getValue(), wayFlag);
+
+    }
+
+    @Test
+    public void testMultiAttributeStorage() {
+        Way way = new OSITNWay(1L);
+        way.setTag("highway", "motorway");
+        way.setTag("natural", "excavation");
+        long wayFlag = osAvoidances.handleWayTags(way,0);
+        //BITMASK test?
+        assertEquals(OsAvoidanceDecorator.AvoidanceType.QuarryOrPit.getValue(), wayFlag - OsAvoidanceDecorator.AvoidanceType.MOTORWAYS.getValue());
+        assertEquals(OsAvoidanceDecorator.AvoidanceType.MOTORWAYS.getValue(), wayFlag  - OsAvoidanceDecorator.AvoidanceType.QuarryOrPit.getValue() );
+
+    }
+
+    @Test
+    public void testMultiEqualAttributeStorage() {
+        Way way = new OSITNWay(1L);
+        way.setTag("natural", "sand,excavation");
+        long wayFlag = osAvoidances.handleWayTags(way,0);
+        //BITMASK test?
+        assertEquals(OsAvoidanceDecorator.AvoidanceType.QuarryOrPit.getValue(), wayFlag - OsAvoidanceDecorator.AvoidanceType.Sand.getValue());
+        assertEquals(OsAvoidanceDecorator.AvoidanceType.Sand.getValue(), wayFlag  - OsAvoidanceDecorator.AvoidanceType.QuarryOrPit.getValue() );
+
+    }
+
+    @Test
+    public void testMultiEqualAttributeRetrieval() {
+        Way way = new OSITNWay(1L);
+        way.setTag("natural", "sand,excavation");
+        long wayFlag = osAvoidances.handleWayTags(way,0);
+        //BITMASK test?
+        assertEquals(OsAvoidanceDecorator.AvoidanceType.QuarryOrPit.getValue(), wayFlag - OsAvoidanceDecorator.AvoidanceType.Sand.getValue());
+        assertEquals(OsAvoidanceDecorator.AvoidanceType.Sand.getValue(), wayFlag  - OsAvoidanceDecorator.AvoidanceType.QuarryOrPit.getValue() );
+        InstructionAnnotation annotation = osAvoidances.getAnnotation(wayFlag, null);
+        assertEquals(" Sand QuarryOrPit", annotation.getMessage());
+    }
+
+}
\ No newline at end of file
