diff --git a/api/src/main/java/com/graphhopper/Trip.java b/api/src/main/java/com/graphhopper/Trip.java
index fdd6ef4d75..10a1c5b8d6 100644
--- a/api/src/main/java/com/graphhopper/Trip.java
+++ b/api/src/main/java/com/graphhopper/Trip.java
@@ -94,18 +94,20 @@ public Date getArrivalTime() {
         public final String feed_id;
         public final boolean isInSameVehicleAsPrevious;
         public final String trip_headsign;
+        public final String route_desc;
         public final long travelTime;
         public final List<Stop> stops;
         public final String trip_id;
         public final String route_id;
 
-        public PtLeg(String feedId, boolean isInSameVehicleAsPrevious, String tripId, String routeId, String headsign, List<Stop> stops, double distance, long travelTime, Geometry geometry) {
+        public PtLeg(String feedId, boolean isInSameVehicleAsPrevious, String tripId, String routeId, String headsign, String routeDesc, List<Stop> stops, double distance, long travelTime, Geometry geometry) {
             super("pt", stops.get(0).stop_name, geometry, distance);
             this.feed_id = feedId;
             this.isInSameVehicleAsPrevious = isInSameVehicleAsPrevious;
             this.trip_id = tripId;
             this.route_id = routeId;
             this.trip_headsign = headsign;
+            this.route_desc = routeDesc;
             this.travelTime = travelTime;
             this.stops = stops;
         }
diff --git a/core/src/main/java/com/graphhopper/routing/VirtualEdgeIterator.java b/core/src/main/java/com/graphhopper/routing/VirtualEdgeIterator.java
index 0393696503..49b1025bb0 100644
--- a/core/src/main/java/com/graphhopper/routing/VirtualEdgeIterator.java
+++ b/core/src/main/java/com/graphhopper/routing/VirtualEdgeIterator.java
@@ -68,7 +68,17 @@ public EdgeIteratorState detach(boolean reverse) {
         return edges.get(current);
     }
 
-    @Override
+	@Override
+	public EdgeIterator setRouteDesc(String desc) {
+		return this;
+	}
+
+	@Override
+	public String getRouteDesc() {
+		return null;
+	}
+
+	@Override
     public int getEdge() {
         return edges.get(current).getEdge();
     }
diff --git a/core/src/main/java/com/graphhopper/routing/VirtualEdgeIteratorState.java b/core/src/main/java/com/graphhopper/routing/VirtualEdgeIteratorState.java
index 318c277502..658f2e6a5c 100644
--- a/core/src/main/java/com/graphhopper/routing/VirtualEdgeIteratorState.java
+++ b/core/src/main/java/com/graphhopper/routing/VirtualEdgeIteratorState.java
@@ -42,6 +42,7 @@
     private double distance;
     private IntsRef edgeFlags;
     private String name;
+    private String routeDesc;
     // true if edge should be avoided as start/stop
     private boolean unfavored;
     private EdgeIteratorState reverseEdge;
@@ -235,6 +236,17 @@ public EdgeIteratorState setName(String name) {
         return this;
     }
 
+	@Override
+	public String getRouteDesc() {
+		return routeDesc;
+	}
+
+	@Override
+	public EdgeIteratorState setRouteDesc(String desc) {
+		this.routeDesc = desc;
+		return this;
+	}
+
     /**
      * This method sets edge to unfavored status for routing from the start or to the stop location.
      */
diff --git a/core/src/main/java/com/graphhopper/storage/BaseGraph.java b/core/src/main/java/com/graphhopper/storage/BaseGraph.java
index aba680ba23..c311991d56 100644
--- a/core/src/main/java/com/graphhopper/storage/BaseGraph.java
+++ b/core/src/main/java/com/graphhopper/storage/BaseGraph.java
@@ -92,6 +92,7 @@
     private int edgeEntryIndex, nodeEntryIndex;
     private long maxGeoRef;
     private boolean frozen = false;
+    private static String routeDesc;
 
     public BaseGraph(Directory dir, final EncodingManager encodingManager, boolean withElevation,
                      InternalGraphEventListener listener, GraphExtension extendedStorage) {
@@ -1352,6 +1353,17 @@ public EdgeIteratorState setName(String name) {
             return this;
         }
 
+		@Override
+		public String getRouteDesc() {
+			return routeDesc;
+		}
+
+		@Override
+		public EdgeIteratorState setRouteDesc(String desc) {
+			routeDesc = desc;
+			return this;
+		}
+
         @Override
         public final String toString() {
             return getEdge() + " " + getBaseNode() + "-" + getAdjNode();
diff --git a/core/src/main/java/com/graphhopper/util/EdgeIteratorState.java b/core/src/main/java/com/graphhopper/util/EdgeIteratorState.java
index 6bc1c33942..a5e4085b6e 100644
--- a/core/src/main/java/com/graphhopper/util/EdgeIteratorState.java
+++ b/core/src/main/java/com/graphhopper/util/EdgeIteratorState.java
@@ -177,7 +177,11 @@ public void setBool(boolean reverse, IntsRef ref, boolean value) {
 
     String getName();
 
-    EdgeIteratorState setName(String name);
+	String getRouteDesc();
+
+	EdgeIteratorState setName(String name);
+
+	EdgeIteratorState setRouteDesc(String desc);
 
     /**
      * Clones this EdgeIteratorState.
diff --git a/reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/GtfsReader.java b/reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/GtfsReader.java
index 04ce0bf650..b56d1f3386 100644
--- a/reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/GtfsReader.java
+++ b/reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/GtfsReader.java
@@ -318,6 +318,7 @@ void addTrip(ZoneId zoneId, int time, List<TripWithStopTimeAndArrivalNode> arriv
 
             EdgeIteratorState boardEdge = graph.edge(departureTimelineNode, departureNode);
             boardEdge.setName(getRouteName(feed, trip.trip));
+            boardEdge.setRouteDesc(getRouteDesc(feed, trip.trip));
             setEdgeTypeAndClearDistance(boardEdge, GtfsStorage.EdgeType.BOARD);
             boardEdge.set(accessEnc, true).setReverse(accessEnc, false);
             while (boardEdges.size() < stopTime.stop_sequence) {
@@ -665,6 +666,15 @@ private String getRouteName(GTFSFeed feed, Trip trip) {
         return routePart + " " + trip.trip_headsign;
     }
 
+	private String getRouteDesc(GTFSFeed feed, Trip trip) {
+		Route route = feed.routes.get(trip.route_id);
+		String routePart = route != null
+				? (route.route_long_name + ":::" + route.route_short_name + ":::" + route.route_desc + ":::"
+						+ route.route_type)
+				: "extra";
+		return routePart + ":::" + trip.trip_headsign;
+	}
+
     private void setEdgeTypeAndClearDistance(EdgeIteratorState edge, GtfsStorage.EdgeType edgeType) {
         edge.setDistance(0.0);
         edge.set(encoder.getTypeEnc(), edgeType);
diff --git a/reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/TripFromLabel.java b/reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/TripFromLabel.java
index c34a7cd7a8..72871bee38 100644
--- a/reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/TripFromLabel.java
+++ b/reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/TripFromLabel.java
@@ -355,15 +355,19 @@ private void validateTripUpdate(GtfsReader.TripWithStopTimes tripUpdate) {
                     stopsFromBoardHopDwellEdges.finish();
                     List<Trip.Stop> stops = stopsFromBoardHopDwellEdges.stops;
 
-                    result.add(new Trip.PtLeg(
+                    List<EdgeIteratorState> l = edges(partition).map(edgeLabel -> edgeLabel.edgeIteratorState).collect(Collectors.toList());
+                    Trip.PtLeg leg = new Trip.PtLeg(
                             feedIdWithTimezone.feedId, partition.get(0).edge.nTransfers == 0,
                             tripDescriptor.getTripId(),
                             tripDescriptor.getRouteId(),
-                            edges(partition).map(edgeLabel -> edgeLabel.edgeIteratorState).collect(Collectors.toList()).get(0).getName(),
+                            l.get(0).getName(),
+                            l.get(0).getRouteDesc(),
                             stops,
                             partition.stream().mapToDouble(t -> t.edge.distance).sum(),
                             path.get(i - 1).label.currentTime - boardTime,
-                            lineString));
+                            lineString
+                            );
+                    result.add(leg);
                     partition = null;
                 }
             }
