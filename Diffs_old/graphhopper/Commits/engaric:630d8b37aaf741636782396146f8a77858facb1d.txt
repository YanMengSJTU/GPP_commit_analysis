diff --git a/core/src/main/java/com/graphhopper/util/PointList.java b/core/src/main/java/com/graphhopper/util/PointList.java
index cb29f7fb96..d3ecbf0087 100644
--- a/core/src/main/java/com/graphhopper/util/PointList.java
+++ b/core/src/main/java/com/graphhopper/util/PointList.java
@@ -22,6 +22,7 @@
 import com.graphhopper.util.shapes.GHPoint3D;
 import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.Iterator;
 import java.util.List;
 
 /**
@@ -29,7 +30,7 @@
  * <p/>
  * @author Peter Karich
  */
-public class PointList implements PointAccess
+public class PointList implements Iterable<GHPoint3D>, PointAccess
 {
     private final static DistanceCalc3D distCalc3D = Helper.DIST_3D;
     private static String ERR_MSG = "Tried to access PointList with too big index!";
@@ -573,4 +574,33 @@ int getCapacity()
     {
         return latitudes.length;
     }
+
+    @Override
+    public Iterator<GHPoint3D> iterator()
+    {
+        return new Iterator<GHPoint3D>()
+        {
+            int counter = 0;
+
+            @Override
+            public boolean hasNext()
+            {
+                return counter < PointList.this.getSize();
+            }
+
+            @Override
+            public GHPoint3D next()
+            {
+                GHPoint3D point = PointList.this.toGHPoint(counter);
+                counter++;
+                return point;
+            }
+
+            @Override
+            public void remove()
+            {
+                throw new UnsupportedOperationException("Not supported.");
+            }
+        };
+    }
 }
diff --git a/core/src/test/java/com/graphhopper/util/PointListTest.java b/core/src/test/java/com/graphhopper/util/PointListTest.java
index f5314e557f..f517e9c3fd 100644
--- a/core/src/test/java/com/graphhopper/util/PointListTest.java
+++ b/core/src/test/java/com/graphhopper/util/PointListTest.java
@@ -18,6 +18,7 @@
  */
 package com.graphhopper.util;
 
+import com.graphhopper.util.shapes.GHPoint;
 import org.junit.Test;
 import static org.junit.Assert.*;
 
@@ -87,4 +88,19 @@ public void testAddPL()
             assertEquals(toAdd.getLatitude(i), instance.getLatitude(7 + i), 1e-1);
         }
     }
+
+    @Test
+    public void testIterable()
+    {
+        PointList toAdd = new PointList();
+        toAdd.add(1, 1);
+        toAdd.add(2, 2);
+        toAdd.add(3, 3);
+        int counter = 0;
+        for (GHPoint point : toAdd)
+        {
+            counter++;
+            assertEquals(counter, point.getLat(), 0.1);
+        }
+    }
 }
