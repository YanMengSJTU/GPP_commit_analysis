diff --git a/core/src/main/java/com/graphhopper/routing/Path.java b/core/src/main/java/com/graphhopper/routing/Path.java
index cfc6676015..20b55d11fa 100644
--- a/core/src/main/java/com/graphhopper/routing/Path.java
+++ b/core/src/main/java/com/graphhopper/routing/Path.java
@@ -23,6 +23,7 @@
 import com.graphhopper.storage.NodeAccess;
 import com.graphhopper.util.*;
 import com.graphhopper.util.profiles.ProfileManager;
+import com.graphhopper.util.profiles.ProfileRepository;
 import com.graphhopper.util.profiles.RidersProfile;
 import gnu.trove.list.TIntList;
 import gnu.trove.list.array.TIntArrayList;
@@ -30,8 +31,6 @@
 import java.util.ArrayList;
 import java.util.List;
 
-import static com.graphhopper.util.Helper.keepIn;
-
 /**
  * Stores the nodes for the found path of an algorithm. It additionally needs the edgeIds to make
  * edge determination faster and less complex as there could be several edges (u,v) especially for
@@ -377,12 +376,12 @@ public void updateTime(PMap params){
 
         time = 0;
         String profileName = params.get("profile", "");
-        RidersProfile ridersProfile = null;
+        ProfileManager profileManager = new ProfileManager(new ProfileRepository());
 
         if(!profileName.equals(""))
-            ridersProfile = new ProfileManager().getProfile(profileName);
+            profileManager.init(profileName, encoder);
 
-        final SpeedProvider speedProvider = new ProfileSpeedProvider(encoder, ridersProfile);
+        final SpeedProvider speedProvider = new ProfileSpeedProvider(encoder, profileManager);
 
         forEveryEdge(new EdgeVisitor() {
 
diff --git a/core/src/main/java/com/graphhopper/routing/util/BikeGenericFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/BikeGenericFlagEncoder.java
index 24f16632a6..c44a647caf 100644
--- a/core/src/main/java/com/graphhopper/routing/util/BikeGenericFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/BikeGenericFlagEncoder.java
@@ -713,7 +713,7 @@ protected void setWayTypeSpeed(int wayType, int speed)
         wayTypeSpeeds.put(wayType, speed);
     }
 
-    protected int getWayTypeSpeed( int wayType )
+    public int getWayTypeSpeed( int wayType )
     {
         return wayTypeSpeeds.get(wayType);
     }
diff --git a/core/src/main/java/com/graphhopper/routing/util/DynamicWeighting.java b/core/src/main/java/com/graphhopper/routing/util/DynamicWeighting.java
index c51082f68d..f50b7cb207 100644
--- a/core/src/main/java/com/graphhopper/routing/util/DynamicWeighting.java
+++ b/core/src/main/java/com/graphhopper/routing/util/DynamicWeighting.java
@@ -19,15 +19,11 @@
 package com.graphhopper.routing.util;
 
 import com.graphhopper.util.EdgeIteratorState;
-import com.graphhopper.util.Helper;
 import com.graphhopper.util.PMap;
 import com.graphhopper.util.profiles.ProfileManager;
+import com.graphhopper.util.profiles.ProfileRepository;
 import com.graphhopper.util.profiles.RidersProfile;
 
-import java.util.Map;
-
-import static com.graphhopper.util.Helper.keepIn;
-
 /**
  * Special weighting for (motor)bike
  * <p>
@@ -40,7 +36,7 @@
     final static double DEFAULT_HEADING_PENALTY = 300; //[s]
     private final double heading_penalty;
     protected final FlagEncoder flagEncoder;
-    protected RidersProfile profile;
+    protected ProfileManager profileManager;
 
     /**
      * For now used only in BikeGenericFlagEncoder
@@ -59,7 +55,7 @@ public DynamicWeighting(FlagEncoder encoder, PMap pMap)
         this.flagEncoder = encoder;
         heading_penalty = pMap.getDouble("heading_penalty", DEFAULT_HEADING_PENALTY);
         String user = pMap.get("profile", "");
-        profile = new ProfileManager().getProfile(user);
+        profileManager = new ProfileManager(new ProfileRepository()).init(user, flagEncoder);
 
     }
 
@@ -71,7 +67,7 @@ public DynamicWeighting(FlagEncoder encoder)
     @Override
     public double calcWeight( EdgeIteratorState edgeState, boolean reverse, int prevOrNextEdgeId )
     {
-        SpeedProvider speedProvider = new ProfileSpeedProvider(flagEncoder, profile);
+        SpeedProvider speedProvider = new ProfileSpeedProvider(flagEncoder, profileManager);
 
         double speed = speedProvider.calcSpeed(edgeState, reverse);
 
diff --git a/core/src/main/java/com/graphhopper/routing/util/ProfileSpeedProvider.java b/core/src/main/java/com/graphhopper/routing/util/ProfileSpeedProvider.java
index cd27fab348..d0d4ed1184 100644
--- a/core/src/main/java/com/graphhopper/routing/util/ProfileSpeedProvider.java
+++ b/core/src/main/java/com/graphhopper/routing/util/ProfileSpeedProvider.java
@@ -2,26 +2,20 @@
 
 import com.graphhopper.util.EdgeIteratorState;
 import com.graphhopper.util.Helper;
+import com.graphhopper.util.profiles.ProfileManager;
 import com.graphhopper.util.profiles.RidersProfile;
 
-import java.util.Map;
-
 import static com.graphhopper.util.Helper.keepIn;
 
 public class ProfileSpeedProvider implements SpeedProvider {
 
-    protected final static double SPEED_CONV = 3.6;
     protected final FlagEncoder encoder;
-    private final double maxSpeed;
-    private Map<Integer, double[]> userSpeeds;
+    private ProfileManager profileManager;
 
 
-    public ProfileSpeedProvider(FlagEncoder flagEncoder, RidersProfile ridersProfile){
+    public ProfileSpeedProvider(FlagEncoder flagEncoder, ProfileManager profileManager){
         this.encoder = flagEncoder;
-        maxSpeed = encoder.getMaxSpeed() / SPEED_CONV;
-
-        if(ridersProfile != null)
-            this.userSpeeds = ridersProfile.getFilterSpeeds();
+        this.profileManager = profileManager;
     }
 
     @Override
@@ -34,32 +28,29 @@ private double getUserSpeed(EdgeIteratorState edgeState, boolean reverse){
         double speed = 0;
         int wayType = (int) encoder.getDouble(edgeState.getFlags(), DynamicWeighting.WAY_TYPE_KEY);
 
-        if(userSpeeds != null){
-            double[] speeds = userSpeeds.get(wayType);
-            if(speeds != null){
+        if(profileManager.hasFilteredSpeeds()){
 
-                int incElevation = (int)encoder.getDouble(edgeState.getFlags(), DynamicWeighting.INC_SLOPE_KEY);
-                int decElevation = (int)encoder.getDouble(edgeState.getFlags(), DynamicWeighting.DEC_SLOPE_KEY);
-                double incDistPercentage = encoder.getDouble(edgeState.getFlags(), DynamicWeighting.INC_DIST_PERCENTAGE_KEY) / 100;
+            int incElevation = (int) encoder.getDouble(edgeState.getFlags(), DynamicWeighting.INC_SLOPE_KEY);
+            int decElevation = (int) encoder.getDouble(edgeState.getFlags(), DynamicWeighting.DEC_SLOPE_KEY);
+            double incDistPercentage = encoder.getDouble(edgeState.getFlags(), DynamicWeighting.INC_DIST_PERCENTAGE_KEY) / 100;
 
-                int incIndex = incElevation > RidersProfile.SLOPES / 2 ? RidersProfile.SLOPES : RidersProfile.SLOPES / 2 + incElevation;
-                int decIndex = decElevation > RidersProfile.SLOPES / 2 ? 0 : RidersProfile.SLOPES / 2 - decElevation;
+            int incIndex = incElevation > RidersProfile.SLOPES / 2 ? RidersProfile.SLOPES : RidersProfile.SLOPES / 2 + incElevation;
+            int decIndex = decElevation > RidersProfile.SLOPES / 2 ? 0 : RidersProfile.SLOPES / 2 - decElevation;
 
-                double incSpeed = speeds[incIndex];
-                double decSpeed = speeds[decIndex];
+            double incSpeed = profileManager.getSpeedPerSlope(wayType, incIndex, (BikeGenericFlagEncoder) encoder);
+            double decSpeed = profileManager.getSpeedPerSlope(wayType, decIndex, (BikeGenericFlagEncoder) encoder);
 
-                double incDist2DSum = edgeState.getDistance() * incDistPercentage;
-                double decDist2DSum = edgeState.getDistance() - incDist2DSum;
-
-                if (!reverse)
-                {
-                    speed = keepIn((incSpeed * incDist2DSum + decSpeed * decDist2DSum) / edgeState.getDistance(), BikeGenericFlagEncoder.PUSHING_SECTION_SPEED / 2, 50);
-                } else {
-                    speed = keepIn((decSpeed * incDist2DSum + incSpeed * decDist2DSum) / edgeState.getDistance(), BikeGenericFlagEncoder.PUSHING_SECTION_SPEED / 2, 50);
-                }
+            double incDist2DSum = edgeState.getDistance() * incDistPercentage;
+            double decDist2DSum = edgeState.getDistance() - incDist2DSum;
 
+            if (reverse)
+            {
+                speed = keepIn((decSpeed * incDist2DSum + incSpeed * decDist2DSum) / edgeState.getDistance(), BikeGenericFlagEncoder.PUSHING_SECTION_SPEED / 2, 50);
+            } else {
+                speed = keepIn((incSpeed * incDist2DSum + decSpeed * decDist2DSum) / edgeState.getDistance(), BikeGenericFlagEncoder.PUSHING_SECTION_SPEED / 2, 50);
             }
 
+
         }
 
         if(speed == 0){
diff --git a/core/src/main/java/com/graphhopper/util/profiles/ProfileManager.java b/core/src/main/java/com/graphhopper/util/profiles/ProfileManager.java
index 86d8c274cd..aaee057b9d 100644
--- a/core/src/main/java/com/graphhopper/util/profiles/ProfileManager.java
+++ b/core/src/main/java/com/graphhopper/util/profiles/ProfileManager.java
@@ -1,124 +1,122 @@
 package com.graphhopper.util.profiles;
 
-import java.io.FileInputStream;
-import java.io.FileNotFoundException;
-import java.io.FileOutputStream;
-import java.io.IOException;
-import java.io.ObjectInputStream;
-import java.io.ObjectOutputStream;
-import java.lang.ClassNotFoundException;
-import java.lang.Object;
-import java.lang.String;
 
+import com.graphhopper.routing.util.BikeGenericFlagEncoder;
+import com.graphhopper.routing.util.FlagEncoder;
+import org.apache.commons.math3.fitting.WeightedObservedPoint;
 
-public class ProfileManager {
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.Map;
 
+public class ProfileManager {
 
+    private ProfileRepository profileRepository;
     private RidersProfile ridersProfile;
-    private final String base = "profiles/";
 
-    public ProfileManager(){}
+    private double totalDistance;
+    private int bestFit = -1;
+    private short[] counts = new short[RidersProfile.WAY_TYPES];
+    private double[] distances = new double[RidersProfile.WAY_TYPES];
+    private Map<Integer, double[]> userSpeeds;
 
-    public void createProfile(String name) {
-        ridersProfile = new RidersProfile();
-
-        saveProfile(name);
+    public ProfileManager(ProfileRepository profileRepository){
+        this.profileRepository = profileRepository;
     }
 
-    public void readProfile(String name){
+    public ProfileManager init(String name, FlagEncoder flagEncoder){
+        this.ridersProfile = profileRepository.getProfile(name);
+
+        if(hasProfile()){
 
-        FileInputStream fileInputStream = null;
-        ObjectInputStream inputStream = null;
-        Object obj = null;
+            this.userSpeeds = new HashMap<Integer, double[]>();
+            double availableData = 0;
 
-        try {
+            for(int i = 0; i < RidersProfile.WAY_TYPES; i++){
 
-            fileInputStream = new FileInputStream(base + name);
-            inputStream = new ObjectInputStream (fileInputStream);
-            obj = inputStream.readObject();
+                RidersEntry[] tmpEntries = this.ridersProfile.getEntries(i);
 
+                for (int j = 0; j < RidersProfile.SLOPES+1; j++) {
 
-        } catch (FileNotFoundException e) {
-            e.printStackTrace();
-        } catch (ClassNotFoundException e) {
-            e.printStackTrace();
-        } catch (IOException e) {
-            e.printStackTrace();
-        } finally {
+                    if(tmpEntries[j] != null) {
+                        counts[i]++;
+                        distances[i] += tmpEntries[j].getDistance();
+                        totalDistance += tmpEntries[j].getDistance();
+                    }
 
-            if(inputStream != null){
-                try {
-                    inputStream.close();
-                } catch (IOException e) {
-                    e.printStackTrace();
                 }
-            }
 
-            if(fileInputStream != null){
-                try {
-                    fileInputStream.close();
-                } catch (IOException e) {
-                    e.printStackTrace();
+
+                if(hasSpeedProfile(i)) {
+
+                    if(counts[i] * distances[i] > availableData){
+                        bestFit = i;
+                        availableData = counts[i] * distances[i];
+                    }
+
+                    this.userSpeeds.put(i, filterSpeeds(tmpEntries, i, flagEncoder));
                 }
+
             }
 
         }
 
+        return this;
 
-        if (obj instanceof RidersProfile)
-        {
-            ridersProfile = (RidersProfile) obj;
-        }
     }
 
+    public boolean hasProfile(){
+        return this.ridersProfile != null;
+    }
 
-    public void saveProfile(String name){
-        if (ridersProfile == null)
-            return;
-
-        FileOutputStream fileOutputStream = null;
-        ObjectOutputStream outputStream = null;
-
-        try {
-            fileOutputStream = new FileOutputStream(base + name);
-            outputStream = new ObjectOutputStream(fileOutputStream);
-            outputStream.writeObject(ridersProfile);
-        } catch (FileNotFoundException e) {
-            e.printStackTrace();
-        } catch (IOException e) {
-            e.printStackTrace();
-        } finally {
-            if(outputStream != null) {
-                try {
-                    outputStream.close();
-                } catch (IOException e) {
-                    e.printStackTrace();
-                }
-            }
+    public boolean hasSpeedProfile(int wayType){
+        return distances[wayType] > 10000 && counts[wayType] > 5;
+    }
 
-            if(fileOutputStream != null) {
-                try {
-                    fileOutputStream.close();
-                } catch (IOException e) {
-                    e.printStackTrace();
-                }
+    public boolean hasFilteredSpeeds(){
+        return bestFit > 0;
+    }
+
+    public double getSpeedPerSlope(int wayType, int slopeIndex, BikeGenericFlagEncoder flagEncoder) {
+
+        if(!hasProfile())
+            return Double.NaN;
+
+        if(hasSpeedProfile(wayType))
+            return userSpeeds.get(wayType)[slopeIndex];
+
+        if(bestFit > 0)
+            return userSpeeds.get(bestFit)[slopeIndex] * (flagEncoder.getWayTypeSpeed(wayType) / flagEncoder.getWayTypeSpeed(bestFit));
+
+        return Double.NaN;
+
+    }
+
+    private double[] filterSpeeds(RidersEntry[] ridersEntries, int wayType, FlagEncoder flagEncoder) {
+
+        ArrayList<WeightedObservedPoint> points = new ArrayList<WeightedObservedPoint>();
+
+        double maxSpeed = ridersProfile.maxSpeed(wayType, flagEncoder.getMaxSpeed());
+
+        for ( int i = 0; i < ridersEntries.length; i++){
+            if(ridersEntries[i] != null) {
+                points.add(new WeightedObservedPoint(ridersEntries[i].getDistance(), i - RidersProfile.SLOPES / 2, ridersEntries[i].getSpeed() / maxSpeed));
             }
         }
-    }
 
+        final double[] coef = new SigmoidalFitter(new double[]{1, 0.5, -1}).fit(points);
+        SigmoidFunction sigF = new SigmoidFunction();
 
-    public RidersProfile getProfile(String name){
+        double[] result = new double[RidersProfile.SLOPES + 1];
 
-        if(name == null || name.equals(""))
-            return null;
+        int offset = RidersProfile.SLOPES / 2;
 
-        if (ridersProfile == null) {
-            readProfile(name);
+        for( int i = - offset; i < offset + 1; i++){
+            result[i + offset] = sigF.value(i, coef) * maxSpeed;
         }
 
-        return ridersProfile;
+        return result;
     }
 
 
-
 }
diff --git a/core/src/main/java/com/graphhopper/util/profiles/ProfileRepository.java b/core/src/main/java/com/graphhopper/util/profiles/ProfileRepository.java
new file mode 100644
index 0000000000..003e595639
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/util/profiles/ProfileRepository.java
@@ -0,0 +1,124 @@
+package com.graphhopper.util.profiles;
+
+import java.io.FileInputStream;
+import java.io.FileNotFoundException;
+import java.io.FileOutputStream;
+import java.io.IOException;
+import java.io.ObjectInputStream;
+import java.io.ObjectOutputStream;
+import java.lang.ClassNotFoundException;
+import java.lang.Object;
+import java.lang.String;
+
+
+public class ProfileRepository {
+
+
+    private RidersProfile ridersProfile;
+    private final String base = "profiles/";
+
+    public ProfileRepository(){}
+
+    public void createProfile(String name) {
+        ridersProfile = new RidersProfile();
+
+        saveProfile(name);
+    }
+
+    public void readProfile(String name){
+
+        FileInputStream fileInputStream = null;
+        ObjectInputStream inputStream = null;
+        Object obj = null;
+
+        try {
+
+            fileInputStream = new FileInputStream(base + name);
+            inputStream = new ObjectInputStream (fileInputStream);
+            obj = inputStream.readObject();
+
+
+        } catch (FileNotFoundException e) {
+            e.printStackTrace();
+        } catch (ClassNotFoundException e) {
+            e.printStackTrace();
+        } catch (IOException e) {
+            e.printStackTrace();
+        } finally {
+
+            if(inputStream != null){
+                try {
+                    inputStream.close();
+                } catch (IOException e) {
+                    e.printStackTrace();
+                }
+            }
+
+            if(fileInputStream != null){
+                try {
+                    fileInputStream.close();
+                } catch (IOException e) {
+                    e.printStackTrace();
+                }
+            }
+
+        }
+
+
+        if (obj instanceof RidersProfile)
+        {
+            ridersProfile = (RidersProfile) obj;
+        }
+    }
+
+
+    public void saveProfile(String name){
+        if (ridersProfile == null)
+            return;
+
+        FileOutputStream fileOutputStream = null;
+        ObjectOutputStream outputStream = null;
+
+        try {
+            fileOutputStream = new FileOutputStream(base + name);
+            outputStream = new ObjectOutputStream(fileOutputStream);
+            outputStream.writeObject(ridersProfile);
+        } catch (FileNotFoundException e) {
+            e.printStackTrace();
+        } catch (IOException e) {
+            e.printStackTrace();
+        } finally {
+            if(outputStream != null) {
+                try {
+                    outputStream.close();
+                } catch (IOException e) {
+                    e.printStackTrace();
+                }
+            }
+
+            if(fileOutputStream != null) {
+                try {
+                    fileOutputStream.close();
+                } catch (IOException e) {
+                    e.printStackTrace();
+                }
+            }
+        }
+    }
+
+
+    public RidersProfile getProfile(String name){
+
+        if(name == null || name.equals(""))
+            return null;
+
+        if (ridersProfile == null) {
+            readProfile(name);
+        }
+
+        return ridersProfile;
+    }
+
+
+
+}
diff --git a/core/src/main/java/com/graphhopper/util/profiles/RidersProfile.java b/core/src/main/java/com/graphhopper/util/profiles/RidersProfile.java
index a7296fbdee..9a5c1aa101 100644
--- a/core/src/main/java/com/graphhopper/util/profiles/RidersProfile.java
+++ b/core/src/main/java/com/graphhopper/util/profiles/RidersProfile.java
@@ -1,12 +1,8 @@
 package com.graphhopper.util.profiles;
 
-import org.apache.commons.math3.fitting.WeightedObservedPoint;
 
 import java.io.Serializable;
-import java.util.ArrayList;
-import java.util.HashMap;
 import java.util.List;
-import java.util.Map;
 
 public class RidersProfile implements Serializable{
 
@@ -14,8 +10,6 @@
     public transient final static int SLOPES = 60;
 
     private RidersEntry[][] speedMatrix = new RidersEntry[WAY_TYPES][SLOPES+1]; // 16 Way types, Steigung von -30 % bis + 30 %
-    private double totalDistance;
-
 
     public RidersProfile(){};
 
@@ -27,50 +21,9 @@ public RidersEntry getEntry(int wayType, int slope){
         return speedMatrix[wayType];
     }
 
-    public Map<Integer, double[]> getFilterSpeeds(){
-
-        Map<Integer, double[]> speedMap = new HashMap<Integer, double[]>();
-
-        for( int i = 0; i < WAY_TYPES; i++ ){
-
-            if(getDistance(i) > 10000) {
-                speedMap.put(i, filterSpeeds(getEntries(i), i));
-            }
-
-        }
-
-        return speedMap;
-    }
-
-    private double[] filterSpeeds(RidersEntry[] ridersEntries, int wayType) {
-
-        ArrayList<WeightedObservedPoint> points = new ArrayList<WeightedObservedPoint>();
-
-        double maxSpeed = maxSpeed(wayType);
-
-        for ( int i = 0; i < ridersEntries.length; i++){
-            if(ridersEntries[i] != null) {
-                points.add(new WeightedObservedPoint(ridersEntries[i].getDistance(), i - SLOPES / 2, ridersEntries[i].getSpeed() / maxSpeed));
-            }
-        }
-
-        final double[] coef = new SigmoidalFitter(new double[]{1, 0.5, -1}).fit(points);
-        SigmoidFunction sigF = new SigmoidFunction();
-
-        double[] result = new double[SLOPES + 1];
-
-        int offset = SLOPES / 2;
-
-        for( int i = - offset; i < offset + 1; i++){
-            result[i + offset] = sigF.value(i, coef) * maxSpeed;
-        }
-
-        return result;
-    }
-
-    public double maxSpeed(int wayType){
+    public double maxSpeed(int wayType, double wayTypeSpeed){
 
-        double max = 0.0;
+        double max = wayTypeSpeed * 2;
 
         for (RidersEntry r : speedMatrix[wayType]){
             if(r != null && r.getSpeed() > max)
@@ -101,36 +54,6 @@ public double getDistance(int wayType, int slope){
         return getEntry(wayType, slope).getDistance();
     }
 
-    public double getDistance(int wayType){
-        double totalDist = 0;
-
-        for(int i = 0; i < speedMatrix[wayType].length; i++) {
-            if(speedMatrix[wayType][i] != null)
-                totalDist += speedMatrix[wayType][i].getDistance();
-        }
-
-        return totalDist;
-    }
-
-    public double getTotalDistance(){
-        return totalDistance;
-    }
-
-    public double[] getWayTypePriority(){
-
-        double[] distancesPerWayType = new double[WAY_TYPES];
-
-        for (int i = 0; i < speedMatrix.length; i++) {
-            for (int j = 0; j < speedMatrix[i].length; j++) {
-                distancesPerWayType[i] += getDistance(i, j - (SLOPES / 2));
-            }
-
-            distancesPerWayType[i] = distancesPerWayType[i] / totalDistance * 100;
-        }
-
-        return distancesPerWayType;
-
-    }
 
     public void update(TrackPart trackPart) {
 
@@ -157,7 +80,6 @@ public void update(TrackPart trackPart) {
         }
 
         ridersEntry.updateEntry(trackPart.getSpeed(), trackPart.getDistance());
-        totalDistance += trackPart.getDistance();
 
     }
 
diff --git a/core/src/main/java/com/graphhopper/util/profiles/operations/AddToProfileOperation.java b/core/src/main/java/com/graphhopper/util/profiles/operations/AddToProfileOperation.java
index 2473976de5..741e3c9033 100644
--- a/core/src/main/java/com/graphhopper/util/profiles/operations/AddToProfileOperation.java
+++ b/core/src/main/java/com/graphhopper/util/profiles/operations/AddToProfileOperation.java
@@ -2,10 +2,9 @@
 
 
 import com.graphhopper.GraphHopper;
-import com.graphhopper.matching.LocationIndexMatch;
 import com.graphhopper.util.CmdArgs;
 import com.graphhopper.util.profiles.GPXDataExtractor;
-import com.graphhopper.util.profiles.ProfileManager;
+import com.graphhopper.util.profiles.ProfileRepository;
 import com.graphhopper.util.profiles.RidersProfile;
 import com.graphhopper.matching.GPXFile;
 
@@ -30,9 +29,9 @@ public AddToProfileOperation(String[] args) {
     @Override
     public void run() {
 
-        ProfileManager profileManager = new ProfileManager();
+        ProfileRepository profileRepository = new ProfileRepository();
 
-        RidersProfile ridersProfile = profileManager.getProfile(name);
+        RidersProfile ridersProfile = profileRepository.getProfile(name);
 
         if(ridersProfile == null) {
             System.err.println("Could not load profile " + name + ". Please check your profile name.");
@@ -47,7 +46,7 @@ public void run() {
         gpxDataExtractor.setFile(gpxFile);
         ridersProfile.update(gpxDataExtractor.extract());
 
-        profileManager.saveProfile(name);
+        profileRepository.saveProfile(name);
 
     }
 }
diff --git a/core/src/main/java/com/graphhopper/util/profiles/operations/CreateProfileOperation.java b/core/src/main/java/com/graphhopper/util/profiles/operations/CreateProfileOperation.java
index e95e1fefff..489d17fbd5 100644
--- a/core/src/main/java/com/graphhopper/util/profiles/operations/CreateProfileOperation.java
+++ b/core/src/main/java/com/graphhopper/util/profiles/operations/CreateProfileOperation.java
@@ -1,6 +1,6 @@
 package com.graphhopper.util.profiles.operations;
 
-import com.graphhopper.util.profiles.ProfileManager;
+import com.graphhopper.util.profiles.ProfileRepository;
 
 public class CreateProfileOperation implements Operation {
 
@@ -12,7 +12,7 @@ public CreateProfileOperation(String[] args){
 
     @Override
     public void run() {
-        ProfileManager aProfileManager = new ProfileManager();
-        aProfileManager.createProfile(name);
+        ProfileRepository profileRepository = new ProfileRepository();
+        profileRepository.createProfile(name);
     }
 }
diff --git a/core/src/main/java/com/graphhopper/util/profiles/operations/PrintProfileOperation.java b/core/src/main/java/com/graphhopper/util/profiles/operations/PrintProfileOperation.java
index 4e60346f80..606ae104fa 100644
--- a/core/src/main/java/com/graphhopper/util/profiles/operations/PrintProfileOperation.java
+++ b/core/src/main/java/com/graphhopper/util/profiles/operations/PrintProfileOperation.java
@@ -1,6 +1,6 @@
 package com.graphhopper.util.profiles.operations;
 
-import com.graphhopper.util.profiles.ProfileManager;
+import com.graphhopper.util.profiles.ProfileRepository;
 import com.graphhopper.util.profiles.RidersProfile;
 
 public class PrintProfileOperation implements Operation {
@@ -14,13 +14,13 @@ public PrintProfileOperation(String[] args) {
     @Override
     public void run() {
 
-        ProfileManager profileManager = new ProfileManager();
-        RidersProfile ridersProfile = profileManager.getProfile(name);
+        ProfileRepository profileRepository = new ProfileRepository();
+        RidersProfile ridersProfile = profileRepository.getProfile(name);
 
         System.out.println("Profile of: " + name);
 
         if(ridersProfile != null){
-            System.out.println(ridersProfile.getFilterSpeeds());
+            System.out.println(ridersProfile);
         }
 
     }
