diff --git a/core/src/main/java/com/graphhopper/routing/weighting/TDWeightingI.java b/core/src/main/java/com/graphhopper/routing/weighting/TDWeightingI.java
deleted file mode 100644
index 7e315601f5..0000000000
--- a/core/src/main/java/com/graphhopper/routing/weighting/TDWeightingI.java
+++ /dev/null
@@ -1,31 +0,0 @@
-/*
- *  Licensed to GraphHopper GmbH under one or more contributor
- *  license agreements. See the NOTICE file distributed with this work for
- *  additional information regarding copyright ownership.
- *
- *  GraphHopper GmbH licenses this file to you under the Apache License,
- *  Version 2.0 (the "License"); you may not use this file except in
- *  compliance with the License. You may obtain a copy of the License at
- *
- *       http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-package com.graphhopper.routing.weighting;
-
-import com.graphhopper.util.EdgeIteratorState;
-
-public interface TDWeightingI extends Weighting {
-
-    double calcTDWeight(EdgeIteratorState edge, boolean reverse, int prevOrNextEdgeId, long time);
-
-    long calcTDMillis(EdgeIteratorState edge, boolean reverse, int prevOrNextEdgeId, long duration);
-
-    void setInitialTime(long time);
-
-    long getInitialTime();
-}
diff --git a/core/src/main/java/com/graphhopper/util/details/TimeDetails.java b/core/src/main/java/com/graphhopper/util/details/TimeDetails.java
index 5eb7684699..d65d314d39 100644
--- a/core/src/main/java/com/graphhopper/util/details/TimeDetails.java
+++ b/core/src/main/java/com/graphhopper/util/details/TimeDetails.java
@@ -17,7 +17,6 @@
  */
 package com.graphhopper.util.details;
 
-import com.graphhopper.routing.weighting.TDWeightingI;
 import com.graphhopper.routing.weighting.Weighting;
 import com.graphhopper.util.EdgeIteratorState;
 
@@ -33,27 +32,18 @@
     private final Weighting weighting;
 
     private int edgeId = -1;
-    private long accumulatedTime = 0;
     private long time = 0;
 
     public TimeDetails(Weighting weighting) {
         super(TIME);
         this.weighting = weighting;
-        if (weighting instanceof TDWeightingI) {
-            this.accumulatedTime = ((TDWeightingI) weighting).getInitialTime();
-        }
     }
 
     @Override
     public boolean isEdgeDifferentToLastEdge(EdgeIteratorState edge) {
         if (edge.getEdge() != edgeId) {
             edgeId = edge.getEdge();
-            if (weighting instanceof TDWeightingI) {
-                time = ((TDWeightingI) weighting).calcTDMillis(edge, false, -1, accumulatedTime);
-            } else {
-                time = weighting.calcMillis(edge, false, -1);
-            }
-            accumulatedTime += time;
+            time = weighting.calcMillis(edge, false, -1);
             return true;
         }
         return false;
diff --git a/web-bundle/src/main/java/com/graphhopper/http/GraphHopperManaged.java b/web-bundle/src/main/java/com/graphhopper/http/GraphHopperManaged.java
index 25b5120edc..dceca32578 100644
--- a/web-bundle/src/main/java/com/graphhopper/http/GraphHopperManaged.java
+++ b/web-bundle/src/main/java/com/graphhopper/http/GraphHopperManaged.java
@@ -23,13 +23,16 @@
 import com.graphhopper.json.geo.JsonFeatureCollection;
 import com.graphhopper.reader.osm.GraphHopperOSM;
 import com.graphhopper.routing.lm.LandmarkStorage;
+import com.graphhopper.routing.util.DefaultFlagEncoderFactory;
 import com.graphhopper.routing.util.FlagEncoder;
+import com.graphhopper.routing.util.FlagEncoderFactory;
 import com.graphhopper.routing.util.HintsMap;
 import com.graphhopper.routing.util.spatialrules.SpatialRuleLookupHelper;
 import com.graphhopper.routing.weighting.Weighting;
 import com.graphhopper.storage.Graph;
 import com.graphhopper.swl.*;
 import com.graphhopper.util.CmdArgs;
+import com.graphhopper.util.PMap;
 import com.graphhopper.util.Parameters;
 import com.graphhopper.util.shapes.BBox;
 import io.dropwizard.lifecycle.Managed;
@@ -49,6 +52,7 @@
     private final GraphHopper graphHopper;
 
     public GraphHopperManaged(CmdArgs configuration, ObjectMapper objectMapper) {
+        CustomCarFlagEncoder customCarFlagEncoder = new CustomCarFlagEncoder();
         String linkSpeedFile = configuration.get("r5.link_speed_file", null);
         final SpeedCalculator speedCalculator;
         if (linkSpeedFile != null) {
@@ -84,8 +88,18 @@ public Weighting createWeighting(HintsMap hintsMap, FlagEncoder encoder, Graph g
                 throw new RuntimeException(e);
             }
         }
+        graphHopper.setFlagEncoderFactory(new FlagEncoderFactory() {
+            private FlagEncoderFactory delegate = new DefaultFlagEncoderFactory();
+            @Override
+            public FlagEncoder createFlagEncoder(String name, PMap configuration) {
+                if (name.equals("car")) {
+                    return customCarFlagEncoder;
+                }
+                return delegate.createFlagEncoder(name, configuration);
+            }
+        });
         graphHopper.init(configuration);
-        graphHopper.setPathDetailsBuilderFactory(new PathDetailsBuilderFactoryWithEdgeKey());
+        graphHopper.setPathDetailsBuilderFactory(new PathDetailsBuilderFactoryWithEdgeKey(customCarFlagEncoder));
     }
 
     @Override
diff --git a/web-bundle/src/main/java/com/graphhopper/swl/CustomCarFlagEncoder.java b/web-bundle/src/main/java/com/graphhopper/swl/CustomCarFlagEncoder.java
new file mode 100644
index 0000000000..dbeb860223
--- /dev/null
+++ b/web-bundle/src/main/java/com/graphhopper/swl/CustomCarFlagEncoder.java
@@ -0,0 +1,66 @@
+/*
+ *  Licensed to GraphHopper GmbH under one or more contributor
+ *  license agreements. See the NOTICE file distributed with this work for
+ *  additional information regarding copyright ownership.
+ *
+ *  GraphHopper GmbH licenses this file to you under the Apache License,
+ *  Version 2.0 (the "License"); you may not use this file except in
+ *  compliance with the License. You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+
+package com.graphhopper.swl;
+
+import com.graphhopper.routing.profiles.EncodedValue;
+import com.graphhopper.routing.profiles.SimpleIntEncodedValue;
+import com.graphhopper.routing.util.CarFlagEncoder;
+import com.graphhopper.util.EdgeIteratorState;
+
+import javax.xml.bind.DatatypeConverter;
+import java.util.List;
+
+public class CustomCarFlagEncoder extends CarFlagEncoder {
+
+    private SimpleIntEncodedValue[] stableIdByte = new SimpleIntEncodedValue[16];
+
+    public CustomCarFlagEncoder() {
+        super();
+        super.restrictedValues.remove("private");
+    }
+
+    @Override
+    public void createEncodedValues(List<EncodedValue> registerNewEncodedValue, String prefix, int index) {
+        super.createEncodedValues(registerNewEncodedValue, prefix, index);
+        for (int i=0; i<16; i++) {
+            stableIdByte[i] = new SimpleIntEncodedValue("stable-id-byte-"+i, 8);
+            registerNewEncodedValue.add(stableIdByte[i]);
+        }
+    }
+
+    final String getStableId(EdgeIteratorState edge) {
+        byte[] stableId = new byte[16];
+        for (int i=0; i<16; i++) {
+            stableId[i] = (byte) edge.get(stableIdByte[i]);
+        }
+        return DatatypeConverter.printHexBinary(stableId);
+    }
+
+    final void setStableId(EdgeIteratorState edge, String stableId) {
+        byte[] stableIdBytes = DatatypeConverter.parseHexBinary(stableId);
+
+        if (stableIdBytes.length != 16)
+            throw new IllegalArgumentException("stable ID must be 16 bytes: " + DatatypeConverter.printHexBinary(stableIdBytes));
+
+        for (int i=0; i<16; i++) {
+            edge.set(stableIdByte[i], Byte.toUnsignedInt(stableIdBytes[i]));
+        }
+    }
+
+}
diff --git a/web-bundle/src/main/java/com/graphhopper/swl/PathDetailsBuilderFactoryWithEdgeKey.java b/web-bundle/src/main/java/com/graphhopper/swl/PathDetailsBuilderFactoryWithEdgeKey.java
index 82d8e46a29..1e8766cab2 100644
--- a/web-bundle/src/main/java/com/graphhopper/swl/PathDetailsBuilderFactoryWithEdgeKey.java
+++ b/web-bundle/src/main/java/com/graphhopper/swl/PathDetailsBuilderFactoryWithEdgeKey.java
@@ -29,6 +29,12 @@
 
 public class PathDetailsBuilderFactoryWithEdgeKey extends PathDetailsBuilderFactory {
 
+    private final CustomCarFlagEncoder customCarFlagEncoder;
+
+    public PathDetailsBuilderFactoryWithEdgeKey(CustomCarFlagEncoder customCarFlagEncoder) {
+        this.customCarFlagEncoder = customCarFlagEncoder;
+    }
+
     @Override
     public List<PathDetailsBuilder> createPathDetailsBuilders(List<String> requestedPathDetails, FlagEncoder encoder, Weighting weighting) {
         // request-scoped
@@ -49,6 +55,10 @@
             builders.add(new EdgeKeyDetails());
         }
 
+        if (requestedPathDetails.contains("r5_edge_id")) {
+            builders.add(new R5EdgeIdPathDetailsBuilder(customCarFlagEncoder));
+        }
+
         if (requestedPathDetails.size() != builders.size()) {
             throw new IllegalArgumentException("You requested the details " + requestedPathDetails + " but we could only find " + builders);
         }
diff --git a/web/src/main/java/com/graphhopper/swl/R5EdgeIdPathDetailsBuilder.java b/web-bundle/src/main/java/com/graphhopper/swl/R5EdgeIdPathDetailsBuilder.java
similarity index 66%
rename from web/src/main/java/com/graphhopper/swl/R5EdgeIdPathDetailsBuilder.java
rename to web-bundle/src/main/java/com/graphhopper/swl/R5EdgeIdPathDetailsBuilder.java
index a82810aa4e..ad8d51255c 100644
--- a/web/src/main/java/com/graphhopper/swl/R5EdgeIdPathDetailsBuilder.java
+++ b/web-bundle/src/main/java/com/graphhopper/swl/R5EdgeIdPathDetailsBuilder.java
@@ -18,14 +18,19 @@
 
 package com.graphhopper.swl;
 
+import com.graphhopper.routing.VirtualEdgeIteratorState;
+import com.graphhopper.routing.profiles.SimpleIntEncodedValue;
 import com.graphhopper.util.EdgeIteratorState;
+import com.graphhopper.util.GHUtility;
 import com.graphhopper.util.details.AbstractPathDetailsBuilder;
 
+import javax.xml.bind.DatatypeConverter;
+
 public class R5EdgeIdPathDetailsBuilder extends AbstractPathDetailsBuilder {
-    private final OriginalDirectionFlagEncoder originalDirectionFlagEncoder;
+    private final CustomCarFlagEncoder originalDirectionFlagEncoder;
     private String edgeId;
 
-    public R5EdgeIdPathDetailsBuilder(OriginalDirectionFlagEncoder originalDirectionFlagEncoder) {
+    public R5EdgeIdPathDetailsBuilder(CustomCarFlagEncoder originalDirectionFlagEncoder) {
         super("r5_edge_id");
         this.originalDirectionFlagEncoder = originalDirectionFlagEncoder;
         edgeId = "";
@@ -33,7 +38,7 @@ public R5EdgeIdPathDetailsBuilder(OriginalDirectionFlagEncoder originalDirection
 
     @Override
     public boolean isEdgeDifferentToLastEdge(EdgeIteratorState edge) {
-        String newEdgeId = R5EdgeIds.getR5EdgeId(originalDirectionFlagEncoder, edge);
+        String newEdgeId = getR5EdgeId(edge);
         if (newEdgeId.equals(edgeId)) {
             return false;
         }
@@ -41,6 +46,14 @@ public boolean isEdgeDifferentToLastEdge(EdgeIteratorState edge) {
         return true;
     }
 
+    private String getR5EdgeId(EdgeIteratorState edge) {
+        if (edge instanceof VirtualEdgeIteratorState) {
+            return String.valueOf(GHUtility.getEdgeFromEdgeKey(((VirtualEdgeIteratorState) edge).getOriginalEdgeKey()));
+        } else {
+            return originalDirectionFlagEncoder.getStableId(edge);
+        }
+    }
+
     @Override
     public Object getCurrentValue() {
         return this.edgeId;
diff --git a/web/src/main/java/com/graphhopper/http/GraphHopperManaged.java b/web/src/main/java/com/graphhopper/http/GraphHopperManaged.java
deleted file mode 100644
index 428969f58e..0000000000
--- a/web/src/main/java/com/graphhopper/http/GraphHopperManaged.java
+++ /dev/null
@@ -1,103 +0,0 @@
-/*
- *  Licensed to GraphHopper GmbH under one or more contributor
- *  license agreements. See the NOTICE file distributed with this work for
- *  additional information regarding copyright ownership.
- *
- *  GraphHopper GmbH licenses this file to you under the Apache License,
- *  Version 2.0 (the "License"); you may not use this file except in
- *  compliance with the License. You may obtain a copy of the License at
- *
- *       http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-
-package com.graphhopper.http;
-
-import com.graphhopper.GraphHopper;
-import com.graphhopper.reader.osm.GraphHopperOSM;
-import com.graphhopper.routing.util.DefaultFlagEncoderFactory;
-import com.graphhopper.routing.util.FlagEncoder;
-import com.graphhopper.routing.util.FlagEncoderFactory;
-import com.graphhopper.routing.util.HintsMap;
-import com.graphhopper.routing.weighting.Weighting;
-import com.graphhopper.spatialrules.SpatialRuleLookupHelper;
-import com.graphhopper.storage.Graph;
-import com.graphhopper.swl.*;
-import com.graphhopper.util.CmdArgs;
-import com.graphhopper.util.PMap;
-import com.graphhopper.util.Parameters;
-import io.dropwizard.lifecycle.Managed;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import javax.inject.Inject;
-import javax.inject.Singleton;
-
-@Singleton
-public class GraphHopperManaged implements Managed {
-
-    private final Logger logger = LoggerFactory.getLogger(getClass());
-    private final GraphHopper graphHopper;
-
-    @Inject
-    public GraphHopperManaged(CmdArgs configuration) {
-        OriginalDirectionFlagEncoder originalDirectionFlagEncoder = new OriginalDirectionFlagEncoder();
-        String linkSpeedFile = configuration.get("r5.link_speed_file", null);
-        final SpeedCalculator speedCalculator;
-        if (linkSpeedFile != null) {
-            speedCalculator = new FileSpeedCalculator(originalDirectionFlagEncoder, linkSpeedFile);
-        } else {
-            speedCalculator = new DefaultSpeedCalculator(originalDirectionFlagEncoder);
-        }
-        graphHopper = new GraphHopperOSM(
-                SpatialRuleLookupHelper.createLandmarkSplittingFeatureCollection(configuration.get(Parameters.Landmark.PREPARE + "split_area_location", ""))
-        ) {
-            @Override
-            public Weighting createWeighting(HintsMap hintsMap, FlagEncoder encoder, Graph graph) {
-                if (hintsMap.getWeighting().equals("td")) {
-                    return new TDCarWeighting(encoder, speedCalculator, hintsMap);
-                } else {
-                    return super.createWeighting(hintsMap, encoder, graph);
-                }
-            }
-        }.forServer();
-        graphHopper.setFlagEncoderFactory(new FlagEncoderFactory() {
-            private FlagEncoderFactory delegate = new DefaultFlagEncoderFactory();
-            @Override
-            public FlagEncoder createFlagEncoder(String name, PMap configuration) {
-                if (name.equals("car")) {
-                    return originalDirectionFlagEncoder;
-                }
-                return delegate.createFlagEncoder(name, configuration);
-            }
-        });
-        SpatialRuleLookupHelper.buildAndInjectSpatialRuleIntoGH(graphHopper, configuration);
-        graphHopper.init(configuration);
-        graphHopper.setPathDetailsBuilderFactory(new PathDetailsBuilderFactoryWithR5EdgeId(graphHopper));
-    }
-
-    @Override
-    public void start() {
-        graphHopper.importOrLoad();
-        logger.info("loaded graph at:" + graphHopper.getGraphHopperLocation()
-                + ", data_reader_file:" + graphHopper.getDataReaderFile()
-                + ", flag_encoders:" + graphHopper.getEncodingManager()
-                + ", " + graphHopper.getGraphHopperStorage().toDetailsString());
-    }
-
-    public GraphHopper getGraphHopper() {
-        return graphHopper;
-    }
-
-    @Override
-    public void stop() throws Exception {
-        graphHopper.close();
-    }
-
-
-}
diff --git a/web/src/main/java/com/graphhopper/swl/DefaultSpeedCalculator.java b/web/src/main/java/com/graphhopper/swl/DefaultSpeedCalculator.java
deleted file mode 100644
index 3c7ce48091..0000000000
--- a/web/src/main/java/com/graphhopper/swl/DefaultSpeedCalculator.java
+++ /dev/null
@@ -1,42 +0,0 @@
-/*
- *  Licensed to GraphHopper GmbH under one or more contributor
- *  license agreements. See the NOTICE file distributed with this work for
- *  additional information regarding copyright ownership.
- *
- *  GraphHopper GmbH licenses this file to you under the Apache License,
- *  Version 2.0 (the "License"); you may not use this file except in
- *  compliance with the License. You may obtain a copy of the License at
- *
- *       http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-
-package com.graphhopper.swl;
-
-import com.graphhopper.GHRequest;
-import com.graphhopper.routing.util.FlagEncoder;
-import com.graphhopper.util.EdgeIteratorState;
-
-public class DefaultSpeedCalculator implements SpeedCalculator {
-    private final FlagEncoder encoder;
-
-    public DefaultSpeedCalculator(FlagEncoder encoder) {
-        this.encoder = encoder;
-    }
-
-    @Override
-    public double getSpeed(EdgeIteratorState edgeState, boolean reverse, int durationSeconds, String streetMode, GHRequest req) {
-        long flags = edgeState.getFlags();
-        if (reverse && !encoder.isBackward(flags)
-                || !reverse && !encoder.isForward(flags))
-            throw new IllegalStateException("Calculating time should not require to read speed from edge in wrong direction. "
-                    + "Reverse:" + reverse + ", fwd:" + encoder.isForward(flags) + ", bwd:" + encoder.isBackward(flags));
-
-        return reverse ? encoder.getReverseSpeed(flags) : encoder.getSpeed(flags);
-    }
-}
diff --git a/web/src/main/java/com/graphhopper/swl/FileSpeedCalculator.java b/web/src/main/java/com/graphhopper/swl/FileSpeedCalculator.java
deleted file mode 100644
index 61c7f226bf..0000000000
--- a/web/src/main/java/com/graphhopper/swl/FileSpeedCalculator.java
+++ /dev/null
@@ -1,108 +0,0 @@
-/*
- *  Licensed to GraphHopper GmbH under one or more contributor
- *  license agreements. See the NOTICE file distributed with this work for
- *  additional information regarding copyright ownership.
- *
- *  GraphHopper GmbH licenses this file to you under the Apache License,
- *  Version 2.0 (the "License"); you may not use this file except in
- *  compliance with the License. You may obtain a copy of the License at
- *
- *       http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-
-package com.graphhopper.swl;
-
-import com.csvreader.CsvReader;
-import com.graphhopper.GHRequest;
-import com.graphhopper.util.EdgeIteratorState;
-import org.slf4j.LoggerFactory;
-
-import java.io.File;
-import java.io.FileInputStream;
-import java.io.IOException;
-import java.io.InputStream;
-import java.nio.charset.Charset;
-import java.util.HashMap;
-import java.util.Map;
-import java.util.stream.IntStream;
-import java.util.stream.Stream;
-
-public class FileSpeedCalculator implements SpeedCalculator {
-    private static final org.slf4j.Logger LOG = LoggerFactory.getLogger(FileSpeedCalculator.class);
-
-    private final OriginalDirectionFlagEncoder encoder;
-    private final SpeedCalculator delegateTravelTimeCalculator;
-
-    private Map<String, short[]> linkTravelTimes;
-
-    /**
-     *  The class behaves differently, depending on the value of the parameter.
-     *
-     *  If the parameter is a local path, then the file at that path is read into `linkTravelTimes`.
-     *
-     *  If the parameter is a GCS path, than the contents of the file (let's call it a "meta" file) is treated as a
-     *  path to a congestion file on GCS. The contents of the "meta" file is monitored, and whenever it is updated,
-     *  `linkTravelTimes` is updated with the contents of the new congestion file.
-     *
-     * @param path Either:
-     *             - path to the local file with congestion data.
-     *             - path on GCS to a text file, containing the path on GCS to a file with congestion data.
-     */
-    public FileSpeedCalculator(OriginalDirectionFlagEncoder encoder, String path) {
-        this.encoder = encoder;
-        linkTravelTimes = readTravelTimes(new File(path));
-        delegateTravelTimeCalculator = new DefaultSpeedCalculator(encoder);
-    }
-
-    @Override
-    public double getSpeed(EdgeIteratorState edgeState, boolean reverse, int currentTimeSeconds, String streetMode, GHRequest req) {
-        if (linkTravelTimes != null && streetMode.equals("car")) {
-            short[] speeds = linkTravelTimes.get(R5EdgeIds.getR5EdgeId(encoder, edgeState));
-            if (speeds != null) {
-                int timebinIndex = (currentTimeSeconds / (60 * 15)) % (24 * 4);
-                double speedms = speeds[timebinIndex] / 3.6;
-                return speedms;
-            }
-        }
-        return delegateTravelTimeCalculator.getSpeed(edgeState, reverse, currentTimeSeconds, streetMode, req);
-    }
-
-    private static Map<String, short[]> readTravelTimes(File file) {
-        Map<String, short[]> res = new HashMap<>();
-        LOG.warn("Processing {}", file.toString());
-        try (InputStream is = new FileInputStream(file)) {
-            CsvReader reader = new CsvReader(is, ',', Charset.forName("UTF-8"));
-            reader.readHeaders();
-            while (reader.readRecord()) {
-                String edgeId = reader.get("stableEdgeId");
-                int[] speeds = IntStream.range(0, 24).mapToObj(Integer::toString).flatMap(hour -> {
-                    try {
-                        return Stream.of(Short.parseShort(reader.get(hour + "h_1")),
-                                Short.parseShort(reader.get(hour + "h_2")), Short.parseShort(reader.get(hour + "h_3")),
-                                Short.parseShort(reader.get(hour + "h_4")));
-                    } catch (IOException e) {
-                        throw new RuntimeException(e);
-                    }
-                }).mapToInt(v -> v).toArray();
-                // TODO(sindelar): temporary hack to decrease the memory footprint for congestion
-                short shortSpeeds[] = new short[speeds.length];
-                for (int i = 0; i < speeds.length; i++) {
-                    shortSpeeds[i] = (short) speeds[i];
-                }
-                res.put(edgeId, shortSpeeds);
-            }
-        } catch (IOException ex) {
-            throw new RuntimeException("Exception while loading travel times.");
-        }
-        LOG.warn("Done.");
-
-        return res;
-    }
-
-}
diff --git a/web/src/main/java/com/graphhopper/swl/OriginalDirectionFlagEncoder.java b/web/src/main/java/com/graphhopper/swl/OriginalDirectionFlagEncoder.java
deleted file mode 100644
index 3761b55435..0000000000
--- a/web/src/main/java/com/graphhopper/swl/OriginalDirectionFlagEncoder.java
+++ /dev/null
@@ -1,51 +0,0 @@
-/*
- *  Licensed to GraphHopper GmbH under one or more contributor
- *  license agreements. See the NOTICE file distributed with this work for
- *  additional information regarding copyright ownership.
- *
- *  GraphHopper GmbH licenses this file to you under the Apache License,
- *  Version 2.0 (the "License"); you may not use this file except in
- *  compliance with the License. You may obtain a copy of the License at
- *
- *       http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-
-package com.graphhopper.swl;
-
-import com.graphhopper.routing.util.CarFlagEncoder;
-
-public class OriginalDirectionFlagEncoder extends CarFlagEncoder {
-
-
-    private long originalDirectionBitmask;
-
-    public OriginalDirectionFlagEncoder() {
-        super();
-    }
-
-    @Override
-    public int defineWayBits(int index, int shift) {
-        shift = super.defineWayBits(index, shift);
-        this.originalDirectionBitmask = 1L << shift;
-        return shift + 1;
-    }
-
-    public long reverseFlags(long flags) {
-        return super.reverseFlags(flags) ^ this.originalDirectionBitmask;
-    }
-
-    public boolean isOriginalDirection(long flags) {
-        return (flags & this.originalDirectionBitmask) != 0L;
-    }
-
-    public long setOriginalDirection(long flags, boolean originalDirection) {
-        return originalDirection ? flags | originalDirectionBitmask : flags & ~originalDirectionBitmask;
-    }
-
-}
diff --git a/web/src/main/java/com/graphhopper/swl/PathDetailsBuilderFactoryWithR5EdgeId.java b/web/src/main/java/com/graphhopper/swl/PathDetailsBuilderFactoryWithR5EdgeId.java
deleted file mode 100644
index 56f81e049f..0000000000
--- a/web/src/main/java/com/graphhopper/swl/PathDetailsBuilderFactoryWithR5EdgeId.java
+++ /dev/null
@@ -1,66 +0,0 @@
-/*
- *  Licensed to GraphHopper GmbH under one or more contributor
- *  license agreements. See the NOTICE file distributed with this work for
- *  additional information regarding copyright ownership.
- *
- *  GraphHopper GmbH licenses this file to you under the Apache License,
- *  Version 2.0 (the "License"); you may not use this file except in
- *  compliance with the License. You may obtain a copy of the License at
- *
- *       http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-
-package com.graphhopper.swl;
-
-import com.graphhopper.GraphHopper;
-import com.graphhopper.routing.util.FlagEncoder;
-import com.graphhopper.routing.weighting.Weighting;
-import com.graphhopper.util.details.*;
-
-import java.util.ArrayList;
-import java.util.List;
-
-import static com.graphhopper.util.Parameters.DETAILS.*;
-
-public class PathDetailsBuilderFactoryWithR5EdgeId extends PathDetailsBuilderFactory {
-
-    private final GraphHopper graphHopper;
-
-    public PathDetailsBuilderFactoryWithR5EdgeId(GraphHopper graphHopper) {
-        this.graphHopper = graphHopper;
-    }
-
-    @Override
-    public List<PathDetailsBuilder> createPathDetailsBuilders(List<String> requestedPathDetails, FlagEncoder encoder, Weighting weighting) {
-        // request-scoped
-        List<PathDetailsBuilder> builders = new ArrayList<>();
-        if (requestedPathDetails.contains(AVERAGE_SPEED))
-            builders.add(new AverageSpeedDetails(encoder));
-
-        if (requestedPathDetails.contains(STREET_NAME))
-            builders.add(new StreetNameDetails());
-
-        if (requestedPathDetails.contains(EDGE_ID))
-            builders.add(new EdgeIdDetails());
-
-        if (requestedPathDetails.contains(TIME))
-            builders.add(new TimeDetails(weighting));
-
-        if (requestedPathDetails.contains("r5_edge_id")) {
-            OriginalDirectionFlagEncoder originalDirectionFlagEncoder = (OriginalDirectionFlagEncoder) graphHopper.getGraphHopperStorage().getEncodingManager().getEncoder("car");
-            builders.add(new R5EdgeIdPathDetailsBuilder(originalDirectionFlagEncoder));
-        }
-
-        if (requestedPathDetails.size() != builders.size()) {
-            throw new IllegalArgumentException("You requested the details " + requestedPathDetails + " but we could only find " + builders);
-        }
-
-        return builders;
-    }
-}
diff --git a/web/src/main/java/com/graphhopper/swl/R5EdgeIds.java b/web/src/main/java/com/graphhopper/swl/R5EdgeIds.java
deleted file mode 100644
index c7e445da75..0000000000
--- a/web/src/main/java/com/graphhopper/swl/R5EdgeIds.java
+++ /dev/null
@@ -1,41 +0,0 @@
-/*
- *  Licensed to GraphHopper GmbH under one or more contributor
- *  license agreements. See the NOTICE file distributed with this work for
- *  additional information regarding copyright ownership.
- *
- *  GraphHopper GmbH licenses this file to you under the Apache License,
- *  Version 2.0 (the "License"); you may not use this file except in
- *  compliance with the License. You may obtain a copy of the License at
- *
- *       http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-
-package com.graphhopper.swl;
-
-import com.graphhopper.routing.VirtualEdgeIteratorState;
-import com.graphhopper.util.EdgeIteratorState;
-import com.graphhopper.util.GHUtility;
-
-import javax.xml.bind.DatatypeConverter;
-
-public class R5EdgeIds {
-
-    static String getR5EdgeId(OriginalDirectionFlagEncoder originalDirectionFlagEncoder, EdgeIteratorState edge) {
-        final String ghEdgeKey;
-        if (edge instanceof VirtualEdgeIteratorState) {
-            ghEdgeKey = String.valueOf(GHUtility.getEdgeFromEdgeKey(((VirtualEdgeIteratorState) edge).getOriginalTraversalKey()));
-        } else {
-            // Convert byte array to hex
-//            ghEdgeKey = DatatypeConverter.printHexBinary(edge.getStableId());
-            return null;
-        }
-        return ghEdgeKey;
-    }
-
-}
diff --git a/web/src/main/java/com/graphhopper/swl/SpeedCalculator.java b/web/src/main/java/com/graphhopper/swl/SpeedCalculator.java
deleted file mode 100644
index 0aa41002e5..0000000000
--- a/web/src/main/java/com/graphhopper/swl/SpeedCalculator.java
+++ /dev/null
@@ -1,29 +0,0 @@
-/*
- *  Licensed to GraphHopper GmbH under one or more contributor
- *  license agreements. See the NOTICE file distributed with this work for
- *  additional information regarding copyright ownership.
- *
- *  GraphHopper GmbH licenses this file to you under the Apache License,
- *  Version 2.0 (the "License"); you may not use this file except in
- *  compliance with the License. You may obtain a copy of the License at
- *
- *       http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-
-package com.graphhopper.swl;
-
-import com.graphhopper.GHRequest;
-import com.graphhopper.util.EdgeIteratorState;
-
-import java.util.concurrent.locks.Lock;
-
-public interface SpeedCalculator {
-    double getSpeed(EdgeIteratorState edgeState, boolean reverse, int durationSeconds, String streetMode, GHRequest req);
-
-}
diff --git a/web/src/main/java/com/graphhopper/swl/TDCarWeighting.java b/web/src/main/java/com/graphhopper/swl/TDCarWeighting.java
deleted file mode 100644
index c5035c1592..0000000000
--- a/web/src/main/java/com/graphhopper/swl/TDCarWeighting.java
+++ /dev/null
@@ -1,124 +0,0 @@
-/*
- *  Licensed to GraphHopper GmbH under one or more contributor
- *  license agreements. See the NOTICE file distributed with this work for
- *  additional information regarding copyright ownership.
- *
- *  GraphHopper GmbH licenses this file to you under the Apache License,
- *  Version 2.0 (the "License"); you may not use this file except in
- *  compliance with the License. You may obtain a copy of the License at
- *
- *       http://www.apache.org/licenses/LICENSE-2.0
- *
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
-
-package com.graphhopper.swl;
-
-import com.graphhopper.routing.util.FlagEncoder;
-import com.graphhopper.routing.util.HintsMap;
-import com.graphhopper.routing.weighting.TDWeightingI;
-import com.graphhopper.util.EdgeIteratorState;
-import com.graphhopper.util.PMap;
-import com.graphhopper.util.Parameters;
-
-public class TDCarWeighting implements TDWeightingI {
-
-    protected static final double SPEED_CONV = 3.6D;
-
-    private final double maxSpeed;
-    private final FlagEncoder encoder;
-    private final SpeedCalculator speedCalculator;
-    private final long headingPenaltyMillis;
-    private final double headingPenalty;
-    private long initialTime;
-
-    public TDCarWeighting(FlagEncoder encoder, SpeedCalculator speedCalculator, PMap map) {
-        this.encoder = encoder;
-        this.maxSpeed = encoder.getMaxSpeed() / SPEED_CONV;
-        this.speedCalculator = speedCalculator;
-
-        headingPenalty = map.getDouble(Parameters.Routing.HEADING_PENALTY, Parameters.Routing.DEFAULT_HEADING_PENALTY);
-        headingPenaltyMillis = Math.round(headingPenalty * 1000);
-    }
-
-    @Override
-    public double getMinWeight(double distance) {
-        return distance / this.maxSpeed;
-    }
-
-    @Override
-    public double calcWeight(EdgeIteratorState edge, boolean reverse, int prevOrNextEdgeId) {
-        throw new RuntimeException();
-    }
-
-    @Override
-    public long calcMillis(EdgeIteratorState edge, boolean reverse, int prevOrNextEdgeId) {
-        throw new RuntimeException();
-    }
-
-    @Override
-    public double calcTDWeight(EdgeIteratorState edge, boolean reverse, int prevOrNextEdgeId, long linkEnterTime) {
-        double speed = speedCalculator.getSpeed(edge, reverse, (int) (linkEnterTime / 1000), "car", null);
-        if (speed == 0)
-            return Double.POSITIVE_INFINITY;
-
-        double time = edge.getDistance() / speed * SPEED_CONV;
-
-        // add direction penalties at start/stop/via points
-        boolean unfavoredEdge = edge.getBool(EdgeIteratorState.K_UNFAVORED_EDGE, false);
-        if (unfavoredEdge)
-            time += headingPenalty;
-
-        return time;
-    }
-
-    @Override
-    public long calcTDMillis(EdgeIteratorState edge, boolean reverse, int prevOrNextEdgeId, long linkEnterTime) {
-        double speed = speedCalculator.getSpeed(edge, reverse, (int) (linkEnterTime / 1000), "car", null);
-        if (Double.isInfinite(speed) || Double.isNaN(speed) || speed < 0)
-            throw new IllegalStateException("Invalid speed stored in edge! " + speed);
-        if (speed == 0)
-            throw new IllegalStateException("Speed cannot be 0 for unblocked edge, use access properties to mark edge blocked! " +
-                    "Should only occur for shortest path calculation. See #242.");
-        long time = (long) (edge.getDistance() * 3600 / speed);
-        boolean unfavoredEdge = edge.getBool(EdgeIteratorState.K_UNFAVORED_EDGE, false);
-        if (unfavoredEdge)
-            time += headingPenaltyMillis;
-        return time;
-    }
-
-    @Override
-    public FlagEncoder getFlagEncoder() {
-        return encoder;
-    }
-
-    @Override
-    public String getName() {
-        return "td";
-    }
-
-    @Override
-    public boolean matches(HintsMap reqMap) {
-        return getName().equals(reqMap.getWeighting())
-                && encoder.toString().equals(reqMap.getVehicle());
-    }
-
-    @Override
-    public void setInitialTime(long time) {
-        this.initialTime = time;
-    }
-
-    @Override
-    public long getInitialTime() {
-        return this.initialTime;
-    }
-
-    @Override
-    public String toString() {
-        return getName();
-    }
-}
