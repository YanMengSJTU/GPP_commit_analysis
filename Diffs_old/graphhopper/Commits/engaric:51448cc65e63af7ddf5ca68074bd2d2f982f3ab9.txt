diff --git a/core/.project b/core/.project
index e99afc10be..8d404d00ae 100644
--- a/core/.project
+++ b/core/.project
@@ -28,6 +28,7 @@
 		</buildCommand>
 	</buildSpec>
 	<natures>
+		<nature>org.sonar.ide.eclipse.core.sonarNature</nature>
 		<nature>org.eclipse.jem.workbench.JavaEMFNature</nature>
 		<nature>org.eclipse.wst.common.modulecore.ModuleCoreNature</nature>
 		<nature>org.eclipse.m2e.core.maven2Nature</nature>
diff --git a/core/src/main/java/com/graphhopper/GraphHopper.java b/core/src/main/java/com/graphhopper/GraphHopper.java
index 7378f53961..805f7ecd44 100644
--- a/core/src/main/java/com/graphhopper/GraphHopper.java
+++ b/core/src/main/java/com/graphhopper/GraphHopper.java
@@ -19,8 +19,8 @@
 
 import com.graphhopper.reader.DataReader;
 import com.graphhopper.reader.OSMReader;
-import com.graphhopper.reader.osgb.OsItnReader;
 import com.graphhopper.reader.osgb.dpn.OsDpnReader;
+import com.graphhopper.reader.osgb.itn.OsItnReader;
 import com.graphhopper.reader.dem.CGIARProvider;
 import com.graphhopper.reader.dem.ElevationProvider;
 import com.graphhopper.reader.dem.SRTMProvider;
@@ -33,6 +33,7 @@
 import com.graphhopper.storage.index.QueryResult;
 import com.graphhopper.util.*;
 import com.graphhopper.util.shapes.GHPoint;
+
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/OsItnInputFile.java b/core/src/main/java/com/graphhopper/reader/osgb/AbstractOsInputFile.java
old mode 100755
new mode 100644
similarity index 59%
rename from core/src/main/java/com/graphhopper/reader/osgb/OsItnInputFile.java
rename to core/src/main/java/com/graphhopper/reader/osgb/AbstractOsInputFile.java
index d3f0b08446..cc0d135ffd
--- a/core/src/main/java/com/graphhopper/reader/osgb/OsItnInputFile.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/AbstractOsInputFile.java
@@ -1,20 +1,3 @@
-/*
- *  Licensed to GraphHopper and Peter Karich under one or more contributor
- *  license agreements. See the NOTICE file distributed with this work for 
- *  additional information regarding copyright ownership.
- * 
- *  GraphHopper licenses this file to you under the Apache License, 
- *  Version 2.0 (the "License"); you may not use this file except in 
- *  compliance with the License. You may obtain a copy of the License at
- * 
- *       http://www.apache.org/licenses/LICENSE-2.0
- * 
- *  Unless required by applicable law or agreed to in writing, software
- *  distributed under the License is distributed on an "AS IS" BASIS,
- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- *  See the License for the specific language governing permissions and
- *  limitations under the License.
- */
 package com.graphhopper.reader.osgb;
 
 import java.io.BufferedInputStream;
@@ -25,7 +8,6 @@
 import java.io.IOException;
 import java.io.InputStream;
 import java.lang.reflect.Constructor;
-import java.math.BigDecimal;
 import java.util.concurrent.BlockingQueue;
 import java.util.concurrent.LinkedBlockingQueue;
 import java.util.zip.GZIPInputStream;
@@ -39,39 +21,31 @@
 import org.opengis.geometry.MismatchedDimensionException;
 import org.opengis.referencing.FactoryException;
 import org.opengis.referencing.operation.TransformException;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
 
 import com.graphhopper.reader.RoutingElement;
 import com.graphhopper.reader.pbf.Sink;
 
-/**
- * A readable OS ITN file.
- * <p/>
- * 
- * @author Stuart Adam
- */
-public class OsItnInputFile implements Sink, Closeable {
+abstract public class AbstractOsInputFile<T extends RoutingElement>  implements Sink, Closeable {
     private boolean eof;
     private final InputStream bis;
     // for xml parsing
-    private XMLStreamReader parser;
+    protected XMLStreamReader parser;
     // for pbf parsing
     private boolean binary = false;
     private final BlockingQueue<RoutingElement> itemQueue;
-    private boolean hasIncomingData;
-    private int workerThreads = -1;
-    private static final Logger logger = LoggerFactory
-            .getLogger(OsItnInputFile.class);
+    //    private boolean hasIncomingData;
+    //    private int workerThreads = -1;
+    //    private static final Logger logger = LoggerFactory
+    //            .getLogger(OsItnInputFile.class);
     private final String name;
 
-    public OsItnInputFile(File file) throws IOException {
+    public AbstractOsInputFile(File file) throws IOException {
         name = file.getAbsolutePath();
         bis = decode(file);
         itemQueue = new LinkedBlockingQueue<RoutingElement>(50000);
     }
 
-    public OsItnInputFile open() throws XMLStreamException {
+    public AbstractOsInputFile<T> open() throws XMLStreamException {
         openXMLStream(bis);
         return this;
     }
@@ -83,8 +57,8 @@ public InputStream getInputStream() {
     /**
      * Currently on for pbf format. Default is number of cores.
      */
-    public OsItnInputFile setWorkerThreads(int num) {
-        workerThreads = num;
+    public AbstractOsInputFile<T> setWorkerThreads(int num) {
+        //        workerThreads = num;
         return this;
     }
 
@@ -166,11 +140,11 @@ private void openXMLStream(InputStream in) throws XMLStreamException {
     }
 
     public RoutingElement getNext() throws XMLStreamException,
-            MismatchedDimensionException, FactoryException, TransformException {
+    MismatchedDimensionException, FactoryException, TransformException {
         if (eof)
             throw new IllegalStateException("EOF reached");
 
-        RoutingElement item;
+        T item;
         item = getNextXML();
 
         if (item != null)
@@ -180,60 +154,8 @@ public RoutingElement getNext() throws XMLStreamException,
         return null;
     }
 
-    private OSITNElement getNextXML() throws XMLStreamException,
-            MismatchedDimensionException, FactoryException, TransformException {
-
-        int event = parser.next();
-        while (event != XMLStreamConstants.END_DOCUMENT) {
-            if (event == XMLStreamConstants.START_ELEMENT) {
-                String idStr = parser.getAttributeValue(null, "fid");
-                if (null == idStr) {
-                    idStr = parser.getAttributeValue(
-                            "http://www.opengis.net/gml/3.2", "id");
-                }
-                if (idStr != null) {
-                    String name = parser.getLocalName();
-                    idStr = idStr.substring(4);
-                    logger.info(idStr + ":" + name + ":");
-
-                    long id;
-                    try {
-                        id = Long.parseLong(idStr);
-                    } catch (NumberFormatException nfe) {
-                        BigDecimal bd = new BigDecimal(idStr);
-                        id = bd.longValue();
-                    }
-                    logger.info(id + ":" + name + ":");
-                    switch (name) {
-                        case "RoadNode": {
-                            return OSITNNode.create(id, parser);
-                        }
-                        case "RoadLink": {
-                            return OSITNWay.create(id, parser);
-                        }
-
-                        case "RoadLinkInformation": 
-                        case "RoadRouteInformation": {
-                            return OSITNRelation.create(id, parser);
-                        }
-
-                        case "Road": {
-                            return OsItnMetaData.create(id, parser);
-                        }
-                        case "RoadNodeInformation": {
-                        }
-                        default: {
-
-                        }
-
-                    }
-                }
-            }
-            event = parser.next();
-        }
-        parser.close();
-        return null;
-    }
+    abstract protected T getNextXML() throws XMLStreamException,
+    MismatchedDimensionException, FactoryException, TransformException;
 
     public boolean isEOF() {
         return eof;
@@ -267,6 +189,6 @@ public void process(RoutingElement item) {
 
     @Override
     public void complete() {
-        hasIncomingData = false;
+        //        hasIncomingData = false;
     }
-}
+}
\ No newline at end of file
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnInputFile.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnInputFile.java
index c4ad7fdccf..ec43838292 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnInputFile.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnInputFile.java
@@ -1,14 +1,14 @@
 /*
  *  Licensed to GraphHopper and Peter Karich under one or more contributor
- *  license agreements. See the NOTICE file distributed with this work for 
+ *  license agreements. See the NOTICE file distributed with this work for
  *  additional information regarding copyright ownership.
- * 
- *  GraphHopper licenses this file to you under the Apache License, 
- *  Version 2.0 (the "License"); you may not use this file except in 
+ *
+ *  GraphHopper licenses this file to you under the Apache License,
+ *  Version 2.0 (the "License"); you may not use this file except in
  *  compliance with the License. You may obtain a copy of the License at
- * 
+ *
  *       http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  *  Unless required by applicable law or agreed to in writing, software
  *  distributed under the License is distributed on an "AS IS" BASIS,
  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -17,23 +17,11 @@
  */
 package com.graphhopper.reader.osgb.dpn;
 
-import java.io.BufferedInputStream;
-import java.io.Closeable;
 import java.io.File;
-import java.io.FileInputStream;
-import java.io.FileNotFoundException;
 import java.io.IOException;
-import java.io.InputStream;
-import java.lang.reflect.Constructor;
-import java.util.concurrent.BlockingQueue;
-import java.util.concurrent.LinkedBlockingQueue;
-import java.util.zip.GZIPInputStream;
-import java.util.zip.ZipInputStream;
 
-import javax.xml.stream.XMLInputFactory;
 import javax.xml.stream.XMLStreamConstants;
 import javax.xml.stream.XMLStreamException;
-import javax.xml.stream.XMLStreamReader;
 
 import org.opengis.geometry.MismatchedDimensionException;
 import org.opengis.referencing.FactoryException;
@@ -42,136 +30,25 @@
 import org.slf4j.LoggerFactory;
 
 import com.graphhopper.reader.RoutingElement;
-import com.graphhopper.reader.pbf.Sink;
+import com.graphhopper.reader.osgb.AbstractOsInputFile;
 
 /**
  * A readable OS ITN file.
  * <p/>
- * 
+ *
  * @author Nop
  */
-public class OsDpnInputFile implements Sink, Closeable {
-    private boolean eof;
-    private final InputStream bis;
-    // for xml parsing
-    private XMLStreamReader parser;
-    // for pbf parsing
-    private boolean binary = false;
-    private final BlockingQueue<RoutingElement> itemQueue;
-    private boolean hasIncomingData;
-    private int workerThreads = -1;
+public class OsDpnInputFile extends AbstractOsInputFile<RoutingElement> {
     private static final Logger logger = LoggerFactory
             .getLogger(OsDpnInputFile.class);
 
     public OsDpnInputFile(File file) throws IOException {
-        bis = decode(file);
-        itemQueue = new LinkedBlockingQueue<RoutingElement>(50000);
+        super(file);
     }
 
-    public OsDpnInputFile open() throws XMLStreamException {
-        if (binary) {
-            // openPBFReader(bis);
-        } else {
-            openXMLStream(bis);
-        }
-        return this;
-    }
-
-    /**
-     * Currently on for pbf format. Default is number of cores.
-     */
-    public OsDpnInputFile setWorkerThreads(int num) {
-        workerThreads = num;
-        return this;
-    }
-
-    @SuppressWarnings("unchecked")
-    private InputStream decode(File file) throws IOException {
-        final String name = file.getName();
-
-        InputStream ips = null;
-        try {
-            ips = new BufferedInputStream(new FileInputStream(file), 50000);
-        } catch (FileNotFoundException e) {
-            throw new RuntimeException(e);
-        }
-        ips.mark(10);
-
-        // check file header
-        byte header[] = new byte[6];
-        ips.read(header);
-
-        /*
-         * can parse bz2 directly with additional lib if (header[0] == 'B' &&
-         * header[1] == 'Z') { return new CBZip2InputStream(ips); }
-         */
-        if (header[0] == 31 && header[1] == -117) {
-            ips.reset();
-            return new GZIPInputStream(ips, 50000);
-        } else if (header[0] == 0 && header[1] == 0 && header[2] == 0
-                && header[4] == 10 && header[5] == 9
-                && (header[3] == 13 || header[3] == 14)) {
-            ips.reset();
-            binary = true;
-            return ips;
-        } else if (header[0] == 'P' && header[1] == 'K') {
-            ips.reset();
-            ZipInputStream zip = new ZipInputStream(ips);
-            zip.getNextEntry();
-
-            return zip;
-        } else if (name.endsWith(".gml") || name.endsWith(".xml")) {
-            ips.reset();
-            return ips;
-        } else if (name.endsWith(".bz2") || name.endsWith(".bzip2")) {
-            String clName = "org.apache.commons.compress.compressors.bzip2.BZip2CompressorInputStream";
-            try {
-                Class clazz = Class.forName(clName);
-                ips.reset();
-                Constructor<InputStream> ctor = clazz.getConstructor(
-                        InputStream.class, boolean.class);
-                return ctor.newInstance(ips, true);
-            } catch (Exception e) {
-                throw new IllegalArgumentException("Cannot instantiate "
-                        + clName, e);
-            }
-        } else {
-            throw new IllegalArgumentException(
-                    "Input file is not of valid type " + file.getPath());
-        }
-    }
-
-    private void openXMLStream(InputStream in) throws XMLStreamException {
-        XMLInputFactory factory = XMLInputFactory.newInstance();
-        parser = factory.createXMLStreamReader(bis, "UTF-8");
-
-        int event = parser.next();
-        if (event != XMLStreamConstants.START_ELEMENT
-                || !parser.getLocalName().equalsIgnoreCase("FeatureCollection")) {
-            throw new IllegalArgumentException(
-                    "File is not a valid OS ITN stream");
-        }
-
-        eof = false;
-    }
-
-    public RoutingElement getNext() throws XMLStreamException,
-            MismatchedDimensionException, FactoryException, TransformException {
-        if (eof)
-            throw new IllegalStateException("EOF reached");
-
-        RoutingElement item;
-        item = getNextXML();
-
-        if (item != null)
-            return item;
-
-        eof = true;
-        return null;
-    }
-
-    private RoutingElement getNextXML() throws XMLStreamException,
-            MismatchedDimensionException, FactoryException, TransformException {
+    @Override
+    protected RoutingElement getNextXML() throws XMLStreamException,
+    MismatchedDimensionException, FactoryException, TransformException {
 
         int event = parser.next();
         while (event != XMLStreamConstants.END_DOCUMENT) {
@@ -183,18 +60,18 @@ private RoutingElement getNextXML() throws XMLStreamException,
 
                     logger.info(":" + name + ":");
                     switch (name) {
-                        case "RouteNode": {
-                            return OsDpnNode.create(idStr, parser);
-                        }
-                        case "RouteLink": {
-                            return OsDpnWay.create(idStr, parser);
-                        }
-                        case "Route": {
-                            // TODO grouped features
-                        }
-                        default: {
+                    case "RouteNode": {
+                        return OsDpnNode.create(idStr, parser);
+                    }
+                    case "RouteLink": {
+                        return OsDpnWay.create(idStr, parser);
+                    }
+                    case "Route": {
+                        // TODO grouped features
+                    }
+                    default: {
 
-                        }
+                    }
 
                     }
                 }
@@ -204,45 +81,4 @@ private RoutingElement getNextXML() throws XMLStreamException,
         parser.close();
         return null;
     }
-
-    public boolean isEOF() {
-        return eof;
-    }
-
-    @Override
-    public void close() throws IOException {
-        try {
-            if (!binary)
-                parser.close();
-        } catch (XMLStreamException ex) {
-            throw new IOException(ex);
-        } finally {
-            eof = true;
-            bis.close();
-            // if exception happend on OSMInputFile-thread we need to shutdown
-            // the pbf handling
-            if (pbfReaderThread != null && pbfReaderThread.isAlive())
-                pbfReaderThread.interrupt();
-        }
-    }
-
-    Thread pbfReaderThread;
-
-    @Override
-    public void process(RoutingElement item) {
-        try {
-            // blocks if full
-            itemQueue.put(item);
-        } catch (InterruptedException ex) {
-            throw new RuntimeException(ex);
-        }
-
-        // throw exception if full
-        // itemQueue.add(item);
-    }
-
-    @Override
-    public void complete() {
-        hasIncomingData = false;
-    }
 }
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnReader.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnReader.java
index 3e2c6103e0..bff92b6e59 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnReader.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnReader.java
@@ -31,7 +31,7 @@
 import com.graphhopper.reader.RoutingElement;
 import com.graphhopper.reader.TurnRelation;
 import com.graphhopper.reader.dem.ElevationProvider;
-import com.graphhopper.reader.osgb.OSITNTurnRelation;
+import com.graphhopper.reader.osgb.itn.OSITNTurnRelation;
 import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.storage.GraphStorage;
 import com.graphhopper.storage.NodeAccess;
@@ -47,15 +47,15 @@
 
 /*
  *  Licensed to GraphHopper and Peter Karich under one or more contributor
- *  license agreements. See the NOTICE file distributed with this work for 
+ *  license agreements. See the NOTICE file distributed with this work for
  *  additional information regarding copyright ownership.
- * 
- *  GraphHopper licenses this file to you under the Apache License, 
- *  Version 2.0 (the "License"); you may not use this file except in 
+ *
+ *  GraphHopper licenses this file to you under the Apache License,
+ *  Version 2.0 (the "License"); you may not use this file except in
  *  compliance with the License. You may obtain a copy of the License at
- * 
+ *
  *       http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  *  Unless required by applicable law or agreed to in writing, software
  *  distributed under the License is distributed on an "AS IS" BASIS,
  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -85,7 +85,7 @@
  * from the OSM tags. When creating an edge the pillar node information from the
  * intermediate datastructure will be stored in the way geometry of that edge.
  * <p/>
- * 
+ *
  * @author Peter Karich
  */
 
@@ -183,8 +183,8 @@ public void readGraph() throws IOException {
     void preProcess(File osmFile) {
         OsDpnInputFile in = null;
         try {
-            in = new OsDpnInputFile(osmFile).setWorkerThreads(workerThreads)
-                    .open();
+            in = new OsDpnInputFile(osmFile);
+            in.setWorkerThreads(workerThreads).open();
 
             long tmpWayCounter = 1;
             long tmpRelationCounter = 1;
@@ -261,7 +261,7 @@ void preProcess(File osmFile) {
      * Filter ways but do not analyze properties wayNodes will be filled with
      * participating node ids.
      * <p/>
-     * 
+     *
      * @return true the current xml entry is a way entry and has nodes
      */
     boolean filterWay(OsDpnWay way) {
@@ -290,38 +290,38 @@ private void writeOsm2Graph(File osmFile) {
         long counter = 1;
         OsDpnInputFile in = null;
         try {
-            in = new OsDpnInputFile(osmFile).setWorkerThreads(workerThreads)
-                    .open();
+            in = new OsDpnInputFile(osmFile);
+            in.setWorkerThreads(workerThreads).open();
             TObjectIntMap<String> nodeFilter = getNodeMap();
 
             RoutingElement item;
             while ((item = in.getNext()) != null) {
                 switch (item.getType()) {
-                    case OSMElement.NODE:
-                        OsDpnNode dpnNode = (OsDpnNode) item;
-                        String id = dpnNode.getId();
-                        logger.info("NODEITEMID:" + id);
-                        if (nodeFilter.get(id) != -1) {
-                            processNode(dpnNode);
-                        }
-                        break;
-
-                    case OSMElement.WAY:
-                        OsDpnWay dpnWay = (OsDpnWay) item;
-                        logger.info("WAY:" + dpnWay.getId() + ":" + wayStart);
-                        if (wayStart < 0) {
-                            logger.info(nf(counter) + ", now parsing ways");
-                            wayStart = counter;
-                        }
-                        processWay(dpnWay);
-                        break;
-                    case OSMElement.RELATION:
-                        if (relationStart < 0) {
-                            logger.info(nf(counter) + ", now parsing relations");
-                            relationStart = counter;
-                        }
-                        processRelation((Relation) item);
-                        break;
+                case OSMElement.NODE:
+                    OsDpnNode dpnNode = (OsDpnNode) item;
+                    String id = dpnNode.getId();
+                    logger.info("NODEITEMID:" + id);
+                    if (nodeFilter.get(id) != -1) {
+                        processNode(dpnNode);
+                    }
+                    break;
+
+                case OSMElement.WAY:
+                    OsDpnWay dpnWay = (OsDpnWay) item;
+                    logger.info("WAY:" + dpnWay.getId() + ":" + wayStart);
+                    if (wayStart < 0) {
+                        logger.info(nf(counter) + ", now parsing ways");
+                        wayStart = counter;
+                    }
+                    processWay(dpnWay);
+                    break;
+                case OSMElement.RELATION:
+                    if (relationStart < 0) {
+                        logger.info(nf(counter) + ", now parsing relations");
+                        relationStart = counter;
+                    }
+                    processRelation((Relation) item);
+                    break;
                 }
                 if (++counter % 5000000 == 0) {
                     logger.info(nf(counter) + ", locs:" + nf(locations) + " ("
@@ -571,15 +571,15 @@ private double getElevation(Node node) {
      * void prepareWaysWithRelationInfo(OSMRelation osmRelation) { // is there
      * at least one tag interesting for the registed encoders? if
      * (encodingManager.handleRelationTags(osmRelation, 0) == 0) return;
-     * 
+     *
      * int size = osmRelation.getMembers().size(); for (int index = 0; index <
      * size; index++) { OSMRelation.Member member =
      * osmRelation.getMembers().get(index); if (member.type() !=
      * OSMRelation.Member.WAY) continue;
-     * 
+     *
      * long osmId = member.ref(); long oldRelationFlags =
      * getRelFlagsMap().get(osmId);
-     * 
+     *
      * // Check if our new relation data is better comparated to the the // last
      * one long newRelationFlags = encodingManager.handleRelationTags(
      * osmRelation, oldRelationFlags); if (oldRelationFlags != newRelationFlags)
@@ -667,7 +667,7 @@ int addTowerNode(String osmId, double lat, double lon, double ele) {
                 if (tmpNode <= -TOWER_NODE && tmpNode >= TOWER_NODE)
                     throw new AssertionError(
                             "Mapped index not in correct bounds " + tmpNode
-                                    + ", " + osmId);
+                            + ", " + osmId);
 
                 if (tmpNode > -TOWER_NODE) {
                     boolean convertToTowerNode = i == 0 || i == lastIndex;
@@ -708,7 +708,7 @@ EdgeIteratorState addEdge(int fromIndex, int toIndex, PointList pointList,
         if (fromIndex < 0 || toIndex < 0)
             throw new AssertionError(
                     "to or from index is invalid for this edge " + fromIndex
-                            + "->" + toIndex + ", points:" + pointList);
+                    + "->" + toIndex + ", points:" + pointList);
         if (pointList.getDimension() != nodeAccess.getDimension())
             throw new AssertionError(
                     "Dimension does not match for pointList vs. nodeAccess "
@@ -853,7 +853,7 @@ private String createNewNodeId() {
     /**
      * Creates an OSM turn relation out of an unspecified OSM relation
      * <p>
-     * 
+     *
      * @return the OSM turn relation, <code>null</code>, if unsupported turn
      *         relation
      */
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/ItnNodePair.java b/core/src/main/java/com/graphhopper/reader/osgb/itn/ItnNodePair.java
similarity index 77%
rename from core/src/main/java/com/graphhopper/reader/osgb/ItnNodePair.java
rename to core/src/main/java/com/graphhopper/reader/osgb/itn/ItnNodePair.java
index 84efcd32a0..e0e95a2218 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/ItnNodePair.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/itn/ItnNodePair.java
@@ -1,4 +1,4 @@
-package com.graphhopper.reader.osgb;
+package com.graphhopper.reader.osgb.itn;
 
 public class ItnNodePair {
 	long first;
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/OSITNElement.java b/core/src/main/java/com/graphhopper/reader/osgb/itn/OSITNElement.java
similarity index 99%
rename from core/src/main/java/com/graphhopper/reader/osgb/OSITNElement.java
rename to core/src/main/java/com/graphhopper/reader/osgb/itn/OSITNElement.java
index a53defe57f..d4e480fc63 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/OSITNElement.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/itn/OSITNElement.java
@@ -15,7 +15,7 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package com.graphhopper.reader.osgb;
+package com.graphhopper.reader.osgb.itn;
 
 import java.util.HashMap;
 import java.util.List;
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/OSITNNode.java b/core/src/main/java/com/graphhopper/reader/osgb/itn/OSITNNode.java
similarity index 99%
rename from core/src/main/java/com/graphhopper/reader/osgb/OSITNNode.java
rename to core/src/main/java/com/graphhopper/reader/osgb/itn/OSITNNode.java
index 0576aacb5d..369497abdd 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/OSITNNode.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/itn/OSITNNode.java
@@ -15,7 +15,7 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package com.graphhopper.reader.osgb;
+package com.graphhopper.reader.osgb.itn;
 
 import java.util.Map;
 
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/OSITNRelation.java b/core/src/main/java/com/graphhopper/reader/osgb/itn/OSITNRelation.java
similarity index 99%
rename from core/src/main/java/com/graphhopper/reader/osgb/OSITNRelation.java
rename to core/src/main/java/com/graphhopper/reader/osgb/itn/OSITNRelation.java
index fc1203470b..ffa96bbce2 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/OSITNRelation.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/itn/OSITNRelation.java
@@ -15,7 +15,7 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package com.graphhopper.reader.osgb;
+package com.graphhopper.reader.osgb.itn;
 
 import java.util.ArrayList;
 import java.util.List;
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/OSITNTurnRelation.java b/core/src/main/java/com/graphhopper/reader/osgb/itn/OSITNTurnRelation.java
similarity index 99%
rename from core/src/main/java/com/graphhopper/reader/osgb/OSITNTurnRelation.java
rename to core/src/main/java/com/graphhopper/reader/osgb/itn/OSITNTurnRelation.java
index 4b763fe346..b7b0ac7be3 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/OSITNTurnRelation.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/itn/OSITNTurnRelation.java
@@ -1,4 +1,4 @@
-package com.graphhopper.reader.osgb;
+package com.graphhopper.reader.osgb.itn;
 
 import java.util.ArrayList;
 import java.util.Collection;
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/OSITNWay.java b/core/src/main/java/com/graphhopper/reader/osgb/itn/OSITNWay.java
similarity index 99%
rename from core/src/main/java/com/graphhopper/reader/osgb/OSITNWay.java
rename to core/src/main/java/com/graphhopper/reader/osgb/itn/OSITNWay.java
index 3fe390947f..9bc0c990f2 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/OSITNWay.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/itn/OSITNWay.java
@@ -15,7 +15,7 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package com.graphhopper.reader.osgb;
+package com.graphhopper.reader.osgb.itn;
 
 import gnu.trove.list.TLongList;
 import gnu.trove.list.array.TLongArrayList;
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnInputFile.java b/core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnInputFile.java
new file mode 100755
index 0000000000..562f60ce04
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnInputFile.java
@@ -0,0 +1,113 @@
+/*
+ *  Licensed to GraphHopper and Peter Karich under one or more contributor
+ *  license agreements. See the NOTICE file distributed with this work for
+ *  additional information regarding copyright ownership.
+ *
+ *  GraphHopper licenses this file to you under the Apache License,
+ *  Version 2.0 (the "License"); you may not use this file except in
+ *  compliance with the License. You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package com.graphhopper.reader.osgb.itn;
+
+import java.io.File;
+import java.io.IOException;
+import java.math.BigDecimal;
+
+import javax.xml.stream.XMLStreamConstants;
+import javax.xml.stream.XMLStreamException;
+
+import org.opengis.geometry.MismatchedDimensionException;
+import org.opengis.referencing.FactoryException;
+import org.opengis.referencing.operation.TransformException;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import com.graphhopper.reader.osgb.AbstractOsInputFile;
+
+/**
+ * A readable OS ITN file.
+ * <p/>
+ *
+ * @author Stuart Adam
+ */
+public class OsItnInputFile extends AbstractOsInputFile<OSITNElement> {//implements Sink, Closeable {
+    //    private boolean eof;
+    //    private final InputStream bis;
+    //    // for xml parsing
+    //    private XMLStreamReader parser;
+    //    // for pbf parsing
+    //    private boolean binary = false;
+    //    private final BlockingQueue<RoutingElement> itemQueue;
+    //    private boolean hasIncomingData;
+    //    private int workerThreads = -1;
+    private static final Logger logger = LoggerFactory.getLogger(OsItnInputFile.class);
+    //    private final String name;
+
+    public OsItnInputFile(File file) throws IOException {
+        super(file);
+    }
+
+    @Override
+    protected OSITNElement getNextXML() throws XMLStreamException,
+    MismatchedDimensionException, FactoryException, TransformException {
+
+        int event = parser.next();
+        while (event != XMLStreamConstants.END_DOCUMENT) {
+            if (event == XMLStreamConstants.START_ELEMENT) {
+                String idStr = parser.getAttributeValue(null, "fid");
+                if (null == idStr) {
+                    idStr = parser.getAttributeValue(
+                            "http://www.opengis.net/gml/3.2", "id");
+                }
+                if (idStr != null) {
+                    String name = parser.getLocalName();
+                    idStr = idStr.substring(4);
+                    logger.info(idStr + ":" + name + ":");
+
+                    long id;
+                    try {
+                        id = Long.parseLong(idStr);
+                    } catch (NumberFormatException nfe) {
+                        BigDecimal bd = new BigDecimal(idStr);
+                        id = bd.longValue();
+                    }
+                    logger.info(id + ":" + name + ":");
+                    switch (name) {
+                    case "RoadNode": {
+                        return OSITNNode.create(id, parser);
+                    }
+                    case "RoadLink": {
+                        return OSITNWay.create(id, parser);
+                    }
+
+                    case "RoadLinkInformation":
+                    case "RoadRouteInformation": {
+                        return OSITNRelation.create(id, parser);
+                    }
+
+                    case "Road": {
+                        return OsItnMetaData.create(id, parser);
+                    }
+                    case "RoadNodeInformation": {
+                    }
+                    default: {
+
+                    }
+
+                    }
+                }
+            }
+            event = parser.next();
+        }
+        parser.close();
+        return null;
+    }
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/OsItnMetaData.java b/core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnMetaData.java
similarity index 99%
rename from core/src/main/java/com/graphhopper/reader/osgb/OsItnMetaData.java
rename to core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnMetaData.java
index ebfa144a17..869865a400 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/OsItnMetaData.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnMetaData.java
@@ -15,7 +15,7 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package com.graphhopper.reader.osgb;
+package com.graphhopper.reader.osgb.itn;
 
 import java.util.ArrayList;
 import java.util.List;
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/OsItnReader.java b/core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnReader.java
similarity index 99%
rename from core/src/main/java/com/graphhopper/reader/osgb/OsItnReader.java
rename to core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnReader.java
index e9a1851b8c..a5bf340805 100755
--- a/core/src/main/java/com/graphhopper/reader/osgb/OsItnReader.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnReader.java
@@ -1,4 +1,4 @@
-package com.graphhopper.reader.osgb;
+package com.graphhopper.reader.osgb.itn;
 
 import static com.graphhopper.util.Helper.nf;
 import gnu.trove.list.TLongList;
@@ -313,8 +313,8 @@ private void preProcessSingleFile(File osmFile) throws XMLStreamException,
         OsItnInputFile in = null;
         try {
             logger.error(PREPROCESS_FORMAT, osmFile.getName());
-            in = new OsItnInputFile(osmFile).setWorkerThreads(workerThreads)
-                    .open();
+            in = new OsItnInputFile(osmFile);
+            in.setWorkerThreads(workerThreads).open();
             preProcessSingleFile(in);
         } finally {
             Helper.close(in);
@@ -704,8 +704,8 @@ private void writeOsm2GraphFromSingleFile(File osmFile,
         OsItnInputFile in = null;
         try {
             logger.error(PROCESS_FORMAT, osmFile.getName());
-            in = new OsItnInputFile(osmFile).setWorkerThreads(workerThreads)
-                    .open();
+            in = new OsItnInputFile(osmFile);
+            in.setWorkerThreads(workerThreads).open();
             processVisitor.process(processData, in);
             logger.info(STORAGE_NODES_FORMAT, graphStorage.getNodes());
         } finally {
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/AbstractOsItnReaderTest.java b/core/src/test/java/com/graphhopper/reader/osgb/AbstractOsItnReaderTest.java
index 19c6665669..909cf7eaf7 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/AbstractOsItnReaderTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/AbstractOsItnReaderTest.java
@@ -10,6 +10,7 @@
 
 import org.junit.Before;
 
+import com.graphhopper.reader.osgb.itn.OsItnReader;
 import com.graphhopper.routing.util.AbstractFlagEncoder;
 import com.graphhopper.routing.util.BikeFlagEncoder;
 import com.graphhopper.routing.util.BusFlagEncoder;
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/NoEntryTest.java b/core/src/test/java/com/graphhopper/reader/osgb/NoEntryTest.java
index 55614175cd..bcd770c466 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/NoEntryTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/NoEntryTest.java
@@ -12,6 +12,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.graphhopper.reader.osgb.itn.OsItnReader;
 import com.graphhopper.routing.util.DefaultEdgeFilter;
 import com.graphhopper.routing.util.EdgeFilter;
 import com.graphhopper.storage.GraphHopperStorage;
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/OSITNWayTest.java b/core/src/test/java/com/graphhopper/reader/osgb/OSITNWayTest.java
index 0be4ba1695..27552137f6 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/OSITNWayTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/OSITNWayTest.java
@@ -13,6 +13,8 @@
 import org.opengis.referencing.FactoryException;
 import org.opengis.referencing.operation.TransformException;
 
+import com.graphhopper.reader.osgb.itn.OSITNWay;
+
 public class OSITNWayTest {
 
 	@Test
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/OsItnReaderTest.java b/core/src/test/java/com/graphhopper/reader/osgb/OsItnReaderTest.java
index 8e4ba53e59..206d709779 100755
--- a/core/src/test/java/com/graphhopper/reader/osgb/OsItnReaderTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/OsItnReaderTest.java
@@ -30,6 +30,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.graphhopper.reader.osgb.itn.OsItnReader;
 import com.graphhopper.routing.util.DefaultEdgeFilter;
 import com.graphhopper.routing.util.EdgeFilter;
 import com.graphhopper.routing.util.EncodingManager;
diff --git a/tools/.project b/tools/.project
index 32dc5e6a21..1e4734414c 100644
--- a/tools/.project
+++ b/tools/.project
@@ -18,6 +18,7 @@
 		</buildCommand>
 	</buildSpec>
 	<natures>
+		<nature>org.sonar.ide.eclipse.core.sonarNature</nature>
 		<nature>org.eclipse.m2e.core.maven2Nature</nature>
 		<nature>org.eclipse.jdt.core.javanature</nature>
 	</natures>
diff --git a/tools/src/main/java/com/graphhopper/tools/routeExtractor/AbstractProblemRouteExtractor.java b/tools/src/main/java/com/graphhopper/tools/routeExtractor/AbstractProblemRouteExtractor.java
index 9cf0bac533..f0a6a6c6ab 100644
--- a/tools/src/main/java/com/graphhopper/tools/routeExtractor/AbstractProblemRouteExtractor.java
+++ b/tools/src/main/java/com/graphhopper/tools/routeExtractor/AbstractProblemRouteExtractor.java
@@ -32,9 +32,9 @@
 import com.graphhopper.reader.Relation;
 import com.graphhopper.reader.RelationMember;
 import com.graphhopper.reader.RoutingElement;
-import com.graphhopper.reader.osgb.OSITNElement;
-import com.graphhopper.reader.osgb.OSITNWay;
-import com.graphhopper.reader.osgb.OsItnInputFile;
+import com.graphhopper.reader.osgb.itn.OSITNElement;
+import com.graphhopper.reader.osgb.itn.OSITNWay;
+import com.graphhopper.reader.osgb.itn.OsItnInputFile;
 import com.graphhopper.util.Helper;
 //import com.graphhopper.tools.OsITNProblemRouteExtractor.ProcessFileVisitor;
 //import com.graphhopper.tools.OsITNProblemRouteExtractor.ProcessVisitor;
diff --git a/tools/src/main/java/com/graphhopper/tools/routeExtractor/NodeListRouteExtractor.java b/tools/src/main/java/com/graphhopper/tools/routeExtractor/NodeListRouteExtractor.java
index 427166c3ac..c3450abba7 100644
--- a/tools/src/main/java/com/graphhopper/tools/routeExtractor/NodeListRouteExtractor.java
+++ b/tools/src/main/java/com/graphhopper/tools/routeExtractor/NodeListRouteExtractor.java
@@ -23,8 +23,8 @@
 import com.graphhopper.reader.Relation;
 import com.graphhopper.reader.RelationMember;
 import com.graphhopper.reader.RoutingElement;
-import com.graphhopper.reader.osgb.OSITNElement;
-import com.graphhopper.reader.osgb.OSITNWay;
+import com.graphhopper.reader.osgb.itn.OSITNElement;
+import com.graphhopper.reader.osgb.itn.OSITNWay;
 
 public class NodeListRouteExtractor extends AbstractProblemRouteExtractor {
 
diff --git a/tools/src/main/java/com/graphhopper/tools/routeExtractor/TwoRoadsRouteExtractor.java b/tools/src/main/java/com/graphhopper/tools/routeExtractor/TwoRoadsRouteExtractor.java
index efe76157fc..f88ba45b7f 100644
--- a/tools/src/main/java/com/graphhopper/tools/routeExtractor/TwoRoadsRouteExtractor.java
+++ b/tools/src/main/java/com/graphhopper/tools/routeExtractor/TwoRoadsRouteExtractor.java
@@ -18,8 +18,8 @@
 
 import com.graphhopper.reader.OSMElement;
 import com.graphhopper.reader.RoutingElement;
-import com.graphhopper.reader.osgb.OSITNRelation;
-import com.graphhopper.reader.osgb.OSITNWay;
+import com.graphhopper.reader.osgb.itn.OSITNRelation;
+import com.graphhopper.reader.osgb.itn.OSITNWay;
 
 public class TwoRoadsRouteExtractor extends AbstractProblemRouteExtractor {
     protected String workingRoadName;
diff --git a/web/.project b/web/.project
index e34687bc08..a204a281ab 100644
--- a/web/.project
+++ b/web/.project
@@ -33,6 +33,7 @@
 		</buildCommand>
 	</buildSpec>
 	<natures>
+		<nature>org.sonar.ide.eclipse.core.sonarNature</nature>
 		<nature>org.eclipse.jem.workbench.JavaEMFNature</nature>
 		<nature>org.eclipse.wst.common.modulecore.ModuleCoreNature</nature>
 		<nature>org.eclipse.m2e.core.maven2Nature</nature>
diff --git a/web/.settings/org.eclipse.wst.common.component b/web/.settings/org.eclipse.wst.common.component
index c13475d235..80e7fbff19 100644
--- a/web/.settings/org.eclipse.wst.common.component
+++ b/web/.settings/org.eclipse.wst.common.component
@@ -4,7 +4,7 @@
         <wb-resource deploy-path="/" source-path="/src/main/webapp" tag="defaultRootSource"/>
         <wb-resource deploy-path="/WEB-INF/classes" source-path="/src/main/java"/>
         <wb-resource deploy-path="/WEB-INF/classes" source-path="/src/main/resources"/>
-        <dependent-module archiveName="graphhopper-0.4-SNAPSHOT.jar" deploy-path="/WEB-INF/lib" handle="module:/resource/graphhopper/graphhopper">
+        <dependent-module archiveName="graphhopper-0.5-SNAPSHOT.jar" deploy-path="/WEB-INF/lib" handle="module:/resource/graphhopper/graphhopper">
             <dependency-type>uses</dependency-type>
         </dependent-module>
         <property name="context-root" value="graphhopper-web"/>
