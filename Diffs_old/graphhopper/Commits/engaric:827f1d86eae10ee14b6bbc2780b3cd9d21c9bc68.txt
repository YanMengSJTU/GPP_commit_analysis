diff --git a/core/src/main/java/com/graphhopper/routing/PathBidirRef.java b/core/src/main/java/com/graphhopper/routing/PathBidirRef.java
index 05e4f42182..3ae0152479 100644
--- a/core/src/main/java/com/graphhopper/routing/PathBidirRef.java
+++ b/core/src/main/java/com/graphhopper/routing/PathBidirRef.java
@@ -21,7 +21,6 @@
 import com.graphhopper.storage.EdgeEntry;
 import com.graphhopper.storage.Graph;
 import com.graphhopper.util.EdgeIterator;
-import com.graphhopper.util.GHUtility;
 
 /**
  * This class creates a DijkstraPath from two Edge's resulting from a BidirectionalDijkstra
diff --git a/core/src/main/java/com/graphhopper/storage/index/LocationIndexTree.java b/core/src/main/java/com/graphhopper/storage/index/LocationIndexTree.java
index 4099062ff4..50a28d5ce1 100644
--- a/core/src/main/java/com/graphhopper/storage/index/LocationIndexTree.java
+++ b/core/src/main/java/com/graphhopper/storage/index/LocationIndexTree.java
@@ -788,7 +788,7 @@ public QueryResult findClosest( final double queryLat, final double queryLon, fi
         storedNetworkEntryIds.forEach(new TIntProcedure()
         {
             @Override
-            public boolean execute( final int networkEntryNodeId )
+            public boolean execute( int networkEntryNodeId )
             {
                 new XFirstSearchCheck(queryLat, queryLon, checkBitset, edgeFilter)
                 {
diff --git a/core/src/main/java/com/graphhopper/util/BreadthFirstSearch.java b/core/src/main/java/com/graphhopper/util/BreadthFirstSearch.java
index dab4a9bd47..05d3a3d009 100644
--- a/core/src/main/java/com/graphhopper/util/BreadthFirstSearch.java
+++ b/core/src/main/java/com/graphhopper/util/BreadthFirstSearch.java
@@ -18,7 +18,6 @@
 package com.graphhopper.util;
 
 import com.graphhopper.coll.GHBitSet;
-import com.graphhopper.coll.GHBitSetImpl;
 
 /**
  * Implementattion of breadth first search (BFS)
@@ -27,9 +26,8 @@
  */
 public class BreadthFirstSearch extends XFirstSearch
 {
-
     @Override
-    public void start( EdgeExplorer explorer, int startNode)
+    public void start( EdgeExplorer explorer, int startNode )
     {
         SimpleIntDeque fifo = new SimpleIntDeque();
         GHBitSet visited = createBitSet();
@@ -39,20 +37,19 @@ public void start( EdgeExplorer explorer, int startNode)
         while (!fifo.isEmpty())
         {
             current = fifo.pop();
-            if (goFurther(current))
+            if (!goFurther(current))
+                continue;
+
+            EdgeIterator iter = explorer.setBaseNode(current);
+            while (iter.next())
             {
-                EdgeIterator iter = explorer.setBaseNode(current);
-                while (iter.next())
+                int connectedId = iter.getAdjNode();
+                if (checkAdjacent(iter) && !visited.contains(connectedId))
                 {
-                    int connectedId = iter.getAdjNode();
-                    if (checkAdjacent(iter) && !visited.contains(connectedId))
-                    {
-                        visited.add(connectedId);
-                        fifo.push(connectedId);
-                    }
+                    visited.add(connectedId);
+                    fifo.push(connectedId);
                 }
             }
         }
     }
-
 }
diff --git a/core/src/main/java/com/graphhopper/util/DepthFirstSearch.java b/core/src/main/java/com/graphhopper/util/DepthFirstSearch.java
index 7e7056cecb..987657798a 100644
--- a/core/src/main/java/com/graphhopper/util/DepthFirstSearch.java
+++ b/core/src/main/java/com/graphhopper/util/DepthFirstSearch.java
@@ -23,28 +23,28 @@
 /**
  * Implementation of depth first search (DFS) by LIFO queue
  * <p/>
- * @author Peter Karich & Jan Sölter
+ * @author Peter Karich
+ * @author Jan Sölter
  */
 public class DepthFirstSearch extends XFirstSearch
 {
-
     /**
      * beginning with startNode add all following nodes to LIFO queue. If node has been already
      * explored before, skip reexploration.
      */
     @Override
-    public void start( EdgeExplorer explorer, int startNode)
+    public void start( EdgeExplorer explorer, int startNode )
     {
         TIntArrayStack stack = new TIntArrayStack();
 
         GHBitSet explored = createBitSet();
         stack.push(startNode);
         int current;
-        while (stack.size()>0)
+        while (stack.size() > 0)
         {
             current = stack.pop();
             if (!explored.contains(current) && goFurther(current))
-            {   
+            {
                 EdgeIterator iter = explorer.setBaseNode(current);
                 while (iter.next())
                 {
diff --git a/core/src/main/java/com/graphhopper/util/XFirstSearch.java b/core/src/main/java/com/graphhopper/util/XFirstSearch.java
index e049426257..31b56569a7 100644
--- a/core/src/main/java/com/graphhopper/util/XFirstSearch.java
+++ b/core/src/main/java/com/graphhopper/util/XFirstSearch.java
@@ -27,12 +27,12 @@
  */
 public abstract class XFirstSearch
 {
-        protected GHBitSet createBitSet()
+    protected GHBitSet createBitSet()
     {
         return new GHBitSetImpl();
     }
 
-    public abstract void start( EdgeExplorer explorer, int startNode);
+    public abstract void start( EdgeExplorer explorer, int startNode );
 
     protected boolean goFurther( int nodeId )
     {
