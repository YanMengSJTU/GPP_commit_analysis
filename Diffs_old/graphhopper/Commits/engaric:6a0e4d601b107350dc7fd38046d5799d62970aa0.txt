diff --git a/core/src/test/java/com/graphhopper/util/GraphEdgeSpeedUpdateTest.java b/core/src/test/java/com/graphhopper/util/GraphEdgeSpeedUpdateTest.java
index a230496ef6..6400391c9b 100644
--- a/core/src/test/java/com/graphhopper/util/GraphEdgeSpeedUpdateTest.java
+++ b/core/src/test/java/com/graphhopper/util/GraphEdgeSpeedUpdateTest.java
@@ -3,37 +3,40 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertNotEquals;
 
-import org.junit.AfterClass;
-import org.junit.BeforeClass;
+import java.util.Locale;
+
+import org.junit.After;
 import org.junit.Test;
 
+import com.graphhopper.GHRequest;
+import com.graphhopper.GHResponse;
 import com.graphhopper.GraphHopper;
 import com.graphhopper.reader.datexupdates.LatLongMetaData;
 import com.graphhopper.routing.util.EdgeFilter;
 import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.storage.index.QueryResult;
-import com.graphhopper.util.GraphEdgeUpdate;
+import com.graphhopper.util.shapes.GHPoint;
 
 public class GraphEdgeSpeedUpdateTest {
 	private static final String TEST_OSM_XML = "src/test/resources/com/graphhopper/reader/test-osm.xml";
+	private static final String TEST_OSM_ROUTE_XML = "src/test/resources/com/graphhopper/reader/test-osm-updates.xml";
 	private static String defaultGraphLoc = "./target/graphstorage/default";
-	private static GraphHopper closableInstance;
+	private GraphHopper closableInstance;
 
 	protected EncodingManager encodingManager = new EncodingManager("CAR,FOOT");
 	protected int defaultSize = 100;
 	
-	@BeforeClass
-	public static void createGraph() {
+	public void createGraph(String graphFile) {
 		closableInstance = new GraphHopper().setStoreOnFlush(true).
 	                setEncodingManager(new EncodingManager("CAR")).
 	                setGraphHopperLocation(defaultGraphLoc).
-	                setOSMFile(TEST_OSM_XML);
+	                setOSMFile(graphFile);
 	        closableInstance.importOrLoad();
 	}
 	
-	@AfterClass
-	public static void closeGraph() {
+	@After
+	public void closeGraph() {
 		closableInstance.close();
 		closableInstance.clean();
 	}
@@ -43,6 +46,7 @@ public static void closeGraph() {
 	public void testEdgeSpeedUpdate() {
 		String lat = "51.2492150";
 		String lon = "9.4317160";
+		createGraph(TEST_OSM_XML);
 		FlagEncoder encoder = closableInstance.getEncodingManager().getEncoder("CAR");
 		
 		QueryResult findClosest = closableInstance.getLocationIndex().findClosest(Double.parseDouble(lat), Double.parseDouble(lon), EdgeFilter.ALL_EDGES);
@@ -54,4 +58,51 @@ public void testEdgeSpeedUpdate() {
 		flags = findClosest.getClosestEdge().getFlags();
 		assertEquals(20, encoder.getSpeed(flags), 0);
 	}
+	
+	@Test
+	public void testEdgeSpeedUpdateEffectsRouting() {
+		String lat = "11.2999";
+		String lon = "50.999";
+		double nodeSlat = 11.0;
+		double nodeSlon = 49;
+		double nodeFlat = 11.2;
+		double nodeFlon = 53;
+		
+		createGraph(TEST_OSM_ROUTE_XML);
+		FlagEncoder encoder = closableInstance.getEncodingManager().getEncoder("CAR");
+		
+		GHPoint startPlace = new GHPoint(nodeSlat, nodeSlon);
+		GHPoint endPlace = new GHPoint(nodeFlat, nodeFlon);
+		GHRequest request = new GHRequest(startPlace, endPlace );
+		request.setWeighting("fastest");
+		request.setVehicle(EncodingManager.CAR);
+		GHResponse routeOne = closableInstance.route(request);
+		PointList pointsOriginalRoute = routeOne.getPoints();
+		
+		GHPoint dRoutePoint = new GHPoint(11.299999869614837,51.0);
+		GHPoint bRoutePoint = new GHPoint(12,51.0);
+		assertEquals("Center Point of Route Should have been Node D", dRoutePoint, pointsOriginalRoute.toGHPoint(2));
+		QueryResult findClosest = closableInstance.getLocationIndex().findClosest(Double.parseDouble(lat), Double.parseDouble(lon), EdgeFilter.ALL_EDGES);
+		EdgeIteratorState closestEdge = findClosest.getClosestEdge();
+		assertEquals("A D C", closestEdge.getName());
+		long flags = closestEdge.getFlags();
+		assertEquals(100, encoder.getSpeed(flags), 0);
+		LatLongMetaData latLonMetadata = new LatLongMetaData("20", lat, lon);
+		GraphEdgeUpdate.updateEdge(closableInstance, latLonMetadata);
+		
+		GHResponse routeTwo = closableInstance.route(request);
+		PointList pointsUpdateRoute = routeTwo.getPoints();
+		assertNotEquals("Center Point of Route Should no longer have been Node D", dRoutePoint, pointsUpdateRoute.toGHPoint(2));
+		assertEquals("Center Point of Route Should now be Node B", bRoutePoint, pointsUpdateRoute.toGHPoint(2));
+		checkRoutePointSame(0, pointsOriginalRoute, pointsUpdateRoute);
+		checkRoutePointSame(1, pointsOriginalRoute, pointsUpdateRoute);
+		checkRoutePointSame(3, pointsOriginalRoute, pointsUpdateRoute);
+		checkRoutePointSame(4, pointsOriginalRoute, pointsUpdateRoute);
+	}
+
+	private void checkRoutePointSame(int i, PointList pointsOriginalRoute,
+			PointList pointsUpdateRoute) {
+		assertEquals(i + " Point of Route Should now be same on both routes", pointsOriginalRoute.toGHPoint(i), pointsUpdateRoute.toGHPoint(i));
+		
+	}
 }
diff --git a/core/src/test/resources/com/graphhopper/reader/test-osm-updates.xml b/core/src/test/resources/com/graphhopper/reader/test-osm-updates.xml
new file mode 100644
index 0000000000..e32c427cda
--- /dev/null
+++ b/core/src/test/resources/com/graphhopper/reader/test-osm-updates.xml
@@ -0,0 +1,83 @@
+<?xml version='1.0' encoding='UTF-8'?>
+<osm version="0.6" generator="pbf2osm">
+    
+    <!--  __B__ 
+         /  |  \
+    S___A___D__C___F
+         \  |  /
+          \_E_/    
+    -->
+    
+    <node id="5" lat="11.0" lon="49" uid="24852">
+        <tag k="name" v="S" />
+    </node>      
+    <node id="10" lat="11.1" lon="50" uid="24853">
+        <tag k="name" v="A" />
+    </node>
+    <node id="20" lat="12" lon="51" uid="24854">
+        <tag k="name" v="B" />
+    </node>
+    <node id="30" lat="11.2" lon="52" uid="24855">
+        <tag k="name" v="C" />
+    </node>
+    <node id="40" lat="11.3" lon="51" uid="24854">
+        <tag k="name" v="D" />
+    </node>
+    <node id="50" lat="10" lon="51">
+        <tag k="name" v="E" />
+    </node>  
+    <node id="55" lat="11.2" lon="53" uid="24856">
+        <tag k="name" v="S" />
+    </node>
+    
+    <way id="5" uid="85760">
+        <nd ref="5"/>
+        <nd ref="10"/>
+        <tag k="name" v="S A" />
+        <tag k="highway" v="secondary" />
+    </way>                   
+    
+    <way id="10" uid="85761">
+        <nd ref="10"/>
+        <nd ref="20"/>
+        <nd ref="30"/>
+        <tag k="name" v="A B C" />
+        <tag k="oneway" v="true" />
+        <tag k="highway" v="secondary" />
+    </way>    
+    
+    <way id="12" uid="85762">
+        <nd ref="10"/>
+        <nd ref="40"/>
+        <nd ref="30"/>
+        <tag k="name" v="A D C" />
+        <tag k="oneway" v="true" />
+        <tag k="highway" v="motorway" />      
+    </way>
+    
+    <way id="11" uid="85761">
+        <nd ref="10"/>
+        <nd ref="50"/>
+        <nd ref="30"/>
+        <tag k="name" v="A E C" />
+        <tag k="highway" v="footway"/>        
+    </way>    
+    
+    <way id="13">
+        <nd ref="20"/>
+        <nd ref="40"/>
+        <nd ref="50"/>
+        <tag k="name" v="B D E" />
+        <tag k="highway" v="motorway" />
+        <tag k="maxspeed" v="40" />
+    </way>
+    
+    <way id="15">
+        <nd ref="30"/>
+        <nd ref="55"/>
+        <tag k="name" v="C F" />
+        <tag k="highway" v="motorway" />
+    </way>
+    
+    <!-- TODO relations -->
+</osm>
