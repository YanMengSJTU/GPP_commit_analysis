diff --git a/config-example.properties b/config-example.properties
index 6b4b82796b..66e1f76498 100644
--- a/config-example.properties
+++ b/config-example.properties
@@ -8,11 +8,9 @@ graph.flag_encoders=car
 
 
 # Enable turn restrictions for car or motorcycle. 
-# Currently you need to additionally set prepare.ch.weightings=no before using this (see below and #270)
 # graph.flag_encoders=car|turn_costs=true
 
 
-
 ##### Elevation #####
 
 
diff --git a/core/src/main/java/com/graphhopper/routing/util/HikeFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/HikeFlagEncoder.java
index ecca10982d..879e5a688a 100644
--- a/core/src/main/java/com/graphhopper/routing/util/HikeFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/HikeFlagEncoder.java
@@ -82,15 +82,19 @@ public long acceptWay(ReaderWay way) {
             return 0;
         }
 
+        // no need to evaluate ferries or fords - already included here
+        if (way.hasTag("foot", intendedValues))
+            return acceptBit;
+
+        // check access restrictions
+        if (way.hasTag(restrictions, restrictedValues) && !getConditionalTagInspector().isRestrictedWayConditionallyPermitted(way))
+            return 0;
+
         // hiking allows all sac_scale values
         // String sacScale = way.getTag("sac_scale");
         if (way.hasTag("sidewalk", sidewalkValues))
             return acceptBit;
 
-        // no need to evaluate ferries or fords - already included here
-        if (way.hasTag("foot", intendedValues))
-            return acceptBit;
-
         if (!allowedHighwayTags.contains(highwayValue))
             return 0;
 
@@ -101,10 +105,6 @@ public long acceptWay(ReaderWay way) {
         if (isBlockFords() && (way.hasTag("highway", "ford") || way.hasTag("ford")))
             return 0;
 
-        // check access restrictions
-        if (way.hasTag(restrictions, restrictedValues) && !getConditionalTagInspector().isRestrictedWayConditionallyPermitted(way))
-            return 0;
-
         if (getConditionalTagInspector().isPermittedWayConditionallyRestricted(way))
             return 0;
         else
diff --git a/core/src/test/java/com/graphhopper/routing/util/HikeFlagEncoderTest.java b/core/src/test/java/com/graphhopper/routing/util/HikeFlagEncoderTest.java
index d79363ce4f..5c5ad3a96a 100644
--- a/core/src/test/java/com/graphhopper/routing/util/HikeFlagEncoderTest.java
+++ b/core/src/test/java/com/graphhopper/routing/util/HikeFlagEncoderTest.java
@@ -20,7 +20,10 @@
 import com.graphhopper.reader.ReaderWay;
 import org.junit.Test;
 
+import java.io.Reader;
+
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
 
 /**
  * @author Peter Karich
@@ -29,6 +32,16 @@
     private final EncodingManager encodingManager = new EncodingManager("car,hike");
     private final HikeFlagEncoder hikeEncoder = (HikeFlagEncoder) encodingManager.getEncoder("hike");
 
+    @Test
+    public void testAccess() {
+        ReaderWay way = new ReaderWay(0);
+        way.setTag("highway", "tertiary");
+        way.setTag("access", "no");
+        way.setTag("sidewalk", "both");
+        way.setTag("foot", "no");
+        assertFalse(hikeEncoder.acceptWay(way) > 0);
+    }
+
     @Test
     public void testPriority() {
         ReaderWay way = new ReaderWay(1);
