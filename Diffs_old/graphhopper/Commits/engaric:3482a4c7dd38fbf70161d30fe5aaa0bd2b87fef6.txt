diff --git a/web/src/main/java/com/graphhopper/http/ApiResource.java b/web/src/main/java/com/graphhopper/http/ApiResource.java
index 830d044183..e087a5b937 100644
--- a/web/src/main/java/com/graphhopper/http/ApiResource.java
+++ b/web/src/main/java/com/graphhopper/http/ApiResource.java
@@ -12,7 +12,7 @@
 	ROUTE("route", new String[] { "point", "vehicle" }, new String[] { "point", "vehicle",
 			"locale", "instructions", "weighting", "algorithm", "points_encoded", "debug",
 			"pretty", "calc_points", "type", "avoidances", "private", "srs", "output_srs" }), NEAREST("nearest",
-					new String[] { "point"}, new String[] { "point", "srs", "output_srs" }), INFO("info", new String[] {},
+					new String[] { "point"}, new String[] { "point", "srs", "output_srs", "vehicle" }), INFO("info", new String[] {},
 							new String[] {"srs"});
 
 	public String[] getMandatoryValues()
diff --git a/web/src/main/java/com/graphhopper/http/NearestServlet.java b/web/src/main/java/com/graphhopper/http/NearestServlet.java
index 05400f67f7..1ffb892286 100644
--- a/web/src/main/java/com/graphhopper/http/NearestServlet.java
+++ b/web/src/main/java/com/graphhopper/http/NearestServlet.java
@@ -17,26 +17,11 @@
  */
 package com.graphhopper.http;
 
-import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;
-
-import java.io.IOException;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
-import javax.inject.Inject;
-import javax.servlet.ServletException;
-import javax.servlet.http.HttpServletRequest;
-import javax.servlet.http.HttpServletResponse;
-
-import org.json.JSONArray;
-import org.json.JSONObject;
-import org.opengis.referencing.FactoryException;
-import org.opengis.referencing.operation.TransformException;
-
 import com.graphhopper.GHResponse;
 import com.graphhopper.GraphHopper;
+import com.graphhopper.routing.util.DefaultEdgeFilter;
 import com.graphhopper.routing.util.EdgeFilter;
+import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.storage.index.LocationIndex;
 import com.graphhopper.storage.index.QueryResult;
 import com.graphhopper.util.DistanceCalc;
@@ -44,6 +29,21 @@
 import com.graphhopper.util.shapes.GHPoint;
 import com.graphhopper.util.shapes.GHPoint3D;
 import com.graphhopper.util.shapes.GHResponseCoordinateTransformer;
+import org.json.JSONArray;
+import org.json.JSONObject;
+import org.opengis.referencing.FactoryException;
+import org.opengis.referencing.operation.TransformException;
+
+import javax.inject.Inject;
+import javax.servlet.ServletException;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+import java.io.IOException;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;
 
 /**
  * @author svantulden
@@ -62,27 +62,35 @@ public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes )
 		GHResponse ghRsp = null;
 		Map<String, Object> map = new HashMap<>();
 		GHResponseCoordinateTransformer transformer = null;
-		try
-		{
-			ApiResource.NEAREST.checkAllRequestParameters(httpReq);
-			String srs = getParam(httpReq, "srs", defaultSRS);
-			String outputSrs = getParam(httpReq, "output_srs", srs);
+		try {
+            ApiResource.NEAREST.checkAllRequestParameters(httpReq);
+            String srs = getParam(httpReq, "srs", defaultSRS);
+            String outputSrs = getParam(httpReq, "output_srs", srs);
+            String vehicleStr = getParam(httpReq, "vehicle", null);
 
-			List<GHPoint> infoPoints = getPoints(httpReq, "point");
-			if (infoPoints.size() > 1)
-			{
-				throw new InvalidParameterException(
-				        "Only one point should be specified and it must be a comma separated coordinate in "
-				        + srs
-				        + " projection.");
-			}
-			
-			boolean enabledElevation = getBooleanParam(httpReq, "elevation", false);
-			transformer = new GHResponseCoordinateTransformer(outputSrs);
+            List<GHPoint> infoPoints = getPoints(httpReq, "point");
+            if (infoPoints.size() > 1) {
+                throw new InvalidParameterException(
+                        "Only one point should be specified and it must be a comma separated coordinate in "
+                                + srs
+                                + " projection.");
+            }
+
+            boolean enabledElevation = getBooleanParam(httpReq, "elevation", false);
+            transformer = new GHResponseCoordinateTransformer(outputSrs);
+
+            GHPoint place = infoPoints.get(0);
+            LocationIndex index = hopper.getLocationIndex();
+            EdgeFilter filter;
+            if (null != vehicleStr) {
+                FlagEncoder algoVehicle = hopper.getEncodingManager()
+                    .getEncoder(vehicleStr);
+                filter = new DefaultEdgeFilter(algoVehicle, true, true);
+            } else {
+                filter = EdgeFilter.ALL_EDGES;
+            }
 
-			GHPoint place = infoPoints.get(0);
-			LocationIndex index = hopper.getLocationIndex();
-			QueryResult qr = index.findClosest(place.lat, place.lon, EdgeFilter.ALL_EDGES);
+			QueryResult qr = index.findClosest(place.lat, place.lon, filter);
 			if (!qr.isValid())
 			{
 				map.put("error", "Nearest point cannot be found!");
diff --git a/web/src/test/java/com/graphhopper/http/ApiResourceTest.java b/web/src/test/java/com/graphhopper/http/ApiResourceTest.java
index 9fa9e4baf1..e174311e08 100644
--- a/web/src/test/java/com/graphhopper/http/ApiResourceTest.java
+++ b/web/src/test/java/com/graphhopper/http/ApiResourceTest.java
@@ -1,22 +1,19 @@
 package com.graphhopper.http;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.fail;
-import static org.mockito.Mockito.when;
-import static com.graphhopper.http.ApiResource.ROUTE;
-import static com.graphhopper.http.ApiResource.NEAREST;
-import static com.graphhopper.http.ApiResource.INFO;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.mockito.runners.MockitoJUnitRunner;
 
+import javax.servlet.http.HttpServletRequest;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.Map;
 
-import javax.servlet.http.HttpServletRequest;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.mockito.runners.MockitoJUnitRunner;
+import static com.graphhopper.http.ApiResource.*;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.fail;
+import static org.mockito.Mockito.when;
 
 //The values of parameters are immaterial, there are only two classes of equivalence: [nullPointer] and [nonNullString].
 //One distinguishes between 'thenReturn(null)' and 'thenReturn(*nonNullString*)' only.
@@ -156,6 +153,7 @@ public void testAllMandatoryAndAllValidParametersForNearest()
 		// valid
 		allParameters.put("srs", new String[] { "x" });
 		allParameters.put("output_srs", new String[] {"x"});
+        allParameters.put("vehicle", new String[] {"x"});
 		when(request.getParameterMap()).thenReturn(allParameters);
 		try
 		{
@@ -175,6 +173,7 @@ public void testAllMandatoryAllValidParametersAndIncorrectOnesForNearest()
 		// valid
 		allParameters.put("srs", new String[] { "x" });
 		allParameters.put("output_srs", new String[] {"x"});
+        allParameters.put("vehicle", new String[] {"x"});
 		// incorrect
 		allParameters.put("bogus", new String[] { "x" });
 		when(request.getParameterMap()).thenReturn(allParameters);
@@ -187,7 +186,7 @@ public void testAllMandatoryAllValidParametersAndIncorrectOnesForNearest()
 		} catch (NoSuchParameterException e)
 		{
 			assertEquals(
-			        "Parameter bogus is not a valid parameter for resource nearest. Valid parameters for requested resource are point, srs, output_srs.",
+			        "Parameter bogus is not a valid parameter for resource nearest. Valid parameters for requested resource are point, srs, output_srs, vehicle.",
 			        e.getMessage());
 		}
 	}
diff --git a/web/src/test/java/com/graphhopper/http/NearestServletTest.java b/web/src/test/java/com/graphhopper/http/NearestServletTest.java
index 014f2f4b06..bf69a730b6 100644
--- a/web/src/test/java/com/graphhopper/http/NearestServletTest.java
+++ b/web/src/test/java/com/graphhopper/http/NearestServletTest.java
@@ -1,35 +1,37 @@
 package com.graphhopper.http;
 
-import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyDouble;
-import static org.mockito.Mockito.when;
-
-import java.io.File;
-import java.io.IOException;
-import java.io.PrintWriter;
-import java.util.HashMap;
-import java.util.Map;
-
-import javax.servlet.ServletException;
-import javax.servlet.http.HttpServletRequest;
-import javax.servlet.http.HttpServletResponse;
-
-import org.apache.commons.io.FileUtils;
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Test;
-import org.mockito.Mock;
-import org.mockito.MockitoAnnotations;
-
 import com.google.inject.AbstractModule;
 import com.google.inject.Guice;
 import com.google.inject.Injector;
 import com.google.inject.name.Names;
 import com.graphhopper.GraphHopper;
 import com.graphhopper.routing.util.EdgeFilter;
+import com.graphhopper.routing.util.EncodingManager;
+import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.storage.index.LocationIndex;
 import com.graphhopper.storage.index.QueryResult;
+import org.apache.commons.io.FileUtils;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+import org.mockito.ArgumentCaptor;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import javax.servlet.ServletException;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+import java.io.File;
+import java.io.IOException;
+import java.io.PrintWriter;
+import java.util.HashMap;
+import java.util.Map;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+import static org.mockito.Matchers.*;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
 
 public class NearestServletTest
 {
@@ -48,6 +50,12 @@
     @Mock
     private GraphHopper graphHopper;
 
+    @Mock
+    private EncodingManager encodingManager;
+
+    @Mock
+    private FlagEncoder flagEncoder;
+
     @Mock
     QueryResult queryResult;
 
@@ -58,6 +66,7 @@
     private PrintWriter writer;
 
     private final String[] SINGLE_POINT = { "50.728198,-3.534516" };
+    private final String[] SINGLE_VEHICLE = { "car" };
     private final String[] INVALID_TOO_MANY_POINTS = { "50.728198,-3.534516", "50.726807,-3.530156" };
 
     @Before
@@ -82,6 +91,9 @@ protected void configure()
         writer = new PrintWriter("httpServletResponseContents");
         when(httpServletResponse.getWriter()).thenReturn(writer);
         when(graphHopper.hasElevation()).thenReturn(false);
+        when(graphHopper.getEncodingManager()).thenReturn(encodingManager);
+        when(encodingManager.getEncoder("car")).thenReturn(flagEncoder);
+        when(flagEncoder.toString()).thenReturn("car");
     }
 
     @After
@@ -123,6 +135,33 @@ public void testDoGetHttpServletRequestHttpServletResponseWithOnePoint()
         when(queryResult.isValid()).thenReturn(false);
 
         nearestServlet.doGet(httpServletRequest, httpServletResponse);
+        ArgumentCaptor<EdgeFilter> argument = ArgumentCaptor.forClass(EdgeFilter.class);
+        verify(locationIndex).findClosest(anyDouble(), anyDouble(), argument.capture());
+        assertTrue("com.graphhopper.routing.util.EdgeFilter", argument.getValue().toString().startsWith("com.graphhopper.routing.util.EdgeFilter"));
+
+
+        writer.flush();
+        assertTrue(FileUtils.readFileToString(new File("httpServletResponseContents"), "UTF-8")
+                .contains("Nearest point cannot be found!"));
+    }
+
+    @Test
+    public void testDoGetHttpServletRequestHttpServletResponseWithOnePointAndVehicle()
+            throws ServletException, IOException
+    {
+
+        requestParameters.put("point", SINGLE_POINT);
+        requestParameters.put("vehicle", SINGLE_VEHICLE);
+        when(httpServletRequest.getParameterMap()).thenReturn(requestParameters);
+        when(graphHopper.getLocationIndex()).thenReturn(locationIndex);
+        when(locationIndex.findClosest(anyDouble(), anyDouble(), any(EdgeFilter.class)))
+                .thenReturn(queryResult);
+        when(queryResult.isValid()).thenReturn(false);
+
+        nearestServlet.doGet(httpServletRequest, httpServletResponse);
+        ArgumentCaptor<EdgeFilter> argument = ArgumentCaptor.forClass(EdgeFilter.class);
+        verify(locationIndex).findClosest(anyDouble(), anyDouble(), argument.capture());
+        assertEquals("car, in:true, out:true", argument.getValue().toString());
 
         writer.flush();
         assertTrue(FileUtils.readFileToString(new File("httpServletResponseContents"), "UTF-8")
