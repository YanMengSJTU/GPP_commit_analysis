diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
index d7e062fc2d..c465ebb7a0 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
@@ -193,6 +193,14 @@ public void I_should_be_able_to_verify_the_http_responseCode_as(
 		graphUiUtil.verifyHttpStatusCode(statusCode);
 
 	}
+	
+	
+	
+	@And("^I receive a valid routing response$")
+	public void I_receive_a_valid_routing_response()
+	{
+		graphUiUtil.isValidRouteResponse();
+	}
 
 	@Then("^I should be able to verify the http response message as \"([^\"]*)\"$")
 	public void I_should_be_able_to_verify_the_http_response_message_as(
diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
index 1654b4dfd5..88e8c21ac2 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
@@ -62,7 +62,6 @@
 import org.junit.Assert;
 import org.openqa.selenium.By;
 import org.openqa.selenium.JavascriptExecutor;
-import org.openqa.selenium.Keys;
 import org.openqa.selenium.WebElement;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -1122,10 +1121,26 @@ public void verifyHttpStatusCode(int statusCode) {
 	}
 
 	public void verifyHttpErrorMessage(String responseMessage) {
+		navigateTo(sb.toString());
+
 		Assert.assertTrue("Actual http Error Message " + actualResponseMsg
 				+ " is not matching with " + responseMessage,
 				responseMessage.equalsIgnoreCase(actualResponseMsg));
 
 	}
 
+	public void isValidRouteResponse() {
+		
+		if (requestParameters.get("type").get(0).equalsIgnoreCase("json")){
+		
+		Assert.assertTrue("is not a valid route response in json format",GPHJSONUtil.isRoute()==true);
+		}
+		else
+			
+		{
+			Assert.assertTrue("is not a valid route response in gpx format",GPHServiceUtil.isRoute()==true);
+		}
+		
+	}
+
 }
diff --git a/pom.xml b/pom.xml
index 191dcbc5f7..1d0998129a 100644
--- a/pom.xml
+++ b/pom.xml
@@ -13,12 +13,12 @@
     <description>
         Super pom of GraphHopper core, a fast Java road routing engine.
     </description>
-    <parent>
-        <groupId>org.sonatype.oss</groupId>
-        <artifactId>oss-parent</artifactId>
-        <version>9</version>
-        <relativePath></relativePath>
-    </parent>
+<!--     <parent> -->
+<!--         <groupId>org.sonatype.oss</groupId> -->
+<!--         <artifactId>oss-parent</artifactId> -->
+<!--         <version>9</version> -->
+<!--         <relativePath></relativePath> -->
+<!--     </parent> -->
 
     <properties>
         <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
@@ -47,9 +47,9 @@
     </properties>
     
     <scm>
-        <connection>scm:git:git@github.com:graphhopper/graphhopper.git</connection>
-        <developerConnection>scm:git:git@github.com:graphhopper/graphhopper.git</developerConnection>
-        <url>git@github.com:graphhopper/graphhopper.git</url>
+        <connection>scm:git:git@github.com:engaric/graphhopper.git</connection>
+        <developerConnection>scm:git:git@github.com:engaric/graphhopper.git</developerConnection>
+        <url>git@github.com:engaric/graphhopper.git</url>
     </scm>
     <distributionManagement>
         <snapshotRepository>
diff --git a/web/src/main/java/com/graphhopper/http/ApiResource.java b/web/src/main/java/com/graphhopper/http/ApiResource.java
index 65e744a26a..b349fcd10f 100644
--- a/web/src/main/java/com/graphhopper/http/ApiResource.java
+++ b/web/src/main/java/com/graphhopper/http/ApiResource.java
@@ -84,7 +84,7 @@ private boolean checkMandatoryValue( HttpServletRequest request, String mandator
 		Set<String> keys = request.getParameterMap().keySet();
 		for (String key : keys)
 		{
-			if (mandatoryValue.equalsIgnoreCase(key))
+			if (mandatoryValue.equals(key))
 			{
 				return true;
 			}
