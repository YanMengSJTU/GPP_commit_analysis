diff --git a/acceptancetesting/src/test/cucumber/Routing-Exeter.feature b/acceptancetesting/src/test/cucumber/Routing-Exeter.feature
index de0251c374..a9cdadf9a7 100644
--- a/acceptancetesting/src/test/cucumber/Routing-Exeter.feature
+++ b/acceptancetesting/src/test/cucumber/Routing-Exeter.feature
@@ -613,7 +613,7 @@ Feature: Verify a route from A to B
 
   @Routing
   Scenario Outline: Verify  Route using 3 intermediate waypoints via (Streathem drive ,Prince of wales Rd and Clifton Rd)
-    Given I request a route between "<pointA>" and "<pointB>" as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>" via
+    Given I request a route between pointA and pointB as a "<routeOptions>" from RoutingAPI and avoid "<avoidances>" via
       | pointA              | pointB             | pointC              | pointD              | pointE              |
       | 50.718552,-3.518781 | 50.72703,-3.517964 | 50.733328,-3.524962 | 50.732093,-3.535139 | 50.732981,-3.541765 |
     Then I should be able to verify the waypoints on the route map:
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/itn/OSITNElement.java b/core/src/main/java/com/graphhopper/reader/osgb/itn/OSITNElement.java
index 1bfd480f8a..f995eb41aa 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/itn/OSITNElement.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/itn/OSITNElement.java
@@ -214,7 +214,7 @@ private String resolveHighway(String elementText) {
         case "B Road":
         case "Minor Road":
             // Pedestrianised Street is supported for walking so traversing will be controlled by speed in the flag encoders
-        case "Pedestrianised Street":
+        //case "Pedestrianised Street":
             // Private Road - Publicly Accessible are NOT traversible
             //        case "Private Road - Publicly Accessible":
             // Alleys are not traversible
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/itn/OsItnReaderTest.java b/core/src/test/java/com/graphhopper/reader/osgb/itn/OsItnReaderTest.java
index 257925b35b..6c326a2c38 100755
--- a/core/src/test/java/com/graphhopper/reader/osgb/itn/OsItnReaderTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/itn/OsItnReaderTest.java
@@ -278,6 +278,21 @@ private void checkMultiNodeNetwork(final GraphHopperStorage graph) {
         assertFalse(iter.next());
     }
 
+    @Test
+    public void testPedestianisedStreetExclusion() throws IOException {
+
+        final File file = new File("./src/test/resources/com/graphhopper/reader/os-itn-exclude-pedestrianised-street.xml");
+        final boolean turnRestrictionsImport = false;
+        final boolean is3D = false;
+        final GraphHopperStorage graph = configureStorage(turnRestrictionsImport, is3D);
+        readGraphFile(graph, file);
+        carOutExplorer = graph.createEdgeExplorer(carOutEdges);
+        logger.info("Number of edges after Pedestrianised Street exclusion: " + count(carOutExplorer.setBaseNode(0)));
+        GHUtility.printInfo(graph, 0, 10, EdgeFilter.ALL_EDGES);
+        assertEquals(2, count(carOutExplorer.setBaseNode(0)));
+
+    }
+
 
     @Test
     @Ignore
