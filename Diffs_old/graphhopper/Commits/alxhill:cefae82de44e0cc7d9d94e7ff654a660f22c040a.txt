diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/Marmoset.java b/marmoset/src/main/java/com/graphhopper/marmoset/Marmoset.java
index 0c2e5356a6..12b7169f45 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/Marmoset.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/Marmoset.java
@@ -40,8 +40,7 @@ public static void main(String[] args) throws IOException, InterruptedException
             System.in.read();
         } catch (Throwable ignored) {}
 
-        mss.stop();
-        fileServer.stop();
+        System.exit(0);
     }
 
     public static void start(int initialVehicles)
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/BaseVehicle.java b/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/BaseVehicle.java
index 784215a260..31a7e3b490 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/BaseVehicle.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/BaseVehicle.java
@@ -67,6 +67,11 @@ protected void finish(String error)
         finished = true;
     }
 
+    protected void finish()
+    {
+        finish(null);
+    }
+
     @Override
     public void init()
     {
@@ -159,7 +164,7 @@ public void moveStep()
 
         if (!route.hasNext() && cellId == cg.getCellCount(route) - 1)
         {
-            finished = true;
+            finish();
             logger.info("BaseVehicle " + id + " reached destination");
         }
     }
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/DijkstraVehicleIterator.java b/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/DijkstraVehicleIterator.java
index a658472636..c298c2df40 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/DijkstraVehicleIterator.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/DijkstraVehicleIterator.java
@@ -2,6 +2,8 @@
 
 import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.util.EdgeIteratorState;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import java.util.List;
 
@@ -13,6 +15,8 @@
     protected List<EdgeIteratorState> edges;
     protected int index;
 
+    private static Logger logger = LoggerFactory.getLogger(DijkstraVehicleIterator.class);
+
     protected DijkstraVehicleIterator() {}
 
     public DijkstraVehicleIterator(List<EdgeIteratorState> edges, FlagEncoder encoder)
@@ -20,6 +24,8 @@ public DijkstraVehicleIterator(List<EdgeIteratorState> edges, FlagEncoder encode
         super(encoder);
         // starts at 0 to skip first edge, as the first edge is virtual (i.e not in graph)
         index = 0;
+        // removes last virtual edge
+        edges.remove(edges.size() - 1);
         this.edges = edges;
     }
 
@@ -33,7 +39,7 @@ public boolean hasNext()
     public boolean next()
     {
         index++;
-        if (index >= edges.size() - 1) // to skip last virtual edge
+        if (index >= edges.size())
             return false;
         edge = edges.get(index);
         return true;
