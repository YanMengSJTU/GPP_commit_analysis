diff --git a/acceptancetesting/src/main/java/org/alternativevision/gpx/GPXParser.java b/acceptancetesting/src/main/java/org/alternativevision/gpx/GPXParser.java
index 4a8febc670..581dec21b5 100644
--- a/acceptancetesting/src/main/java/org/alternativevision/gpx/GPXParser.java
+++ b/acceptancetesting/src/main/java/org/alternativevision/gpx/GPXParser.java
@@ -27,7 +27,6 @@
 import java.text.SimpleDateFormat;
 import java.util.ArrayList;
 import java.util.Date;
-import java.util.HashSet;
 import java.util.Iterator;
 
 import javax.xml.parsers.DocumentBuilder;
@@ -38,6 +37,10 @@
 import javax.xml.transform.TransformerFactory;
 import javax.xml.transform.dom.DOMSource;
 import javax.xml.transform.stream.StreamResult;
+import javax.xml.xpath.XPath;
+import javax.xml.xpath.XPathConstants;
+import javax.xml.xpath.XPathExpression;
+import javax.xml.xpath.XPathFactory;
 
 import org.alternativevision.gpx.beans.GPX;
 import org.alternativevision.gpx.beans.Route;
@@ -114,11 +117,26 @@ public GPX parseGPX(InputStream in) throws ParserConfigurationException, SAXExce
 				Node attr = attrs.item(idx);
 				if(GPXConstants.VERSION_ATTR.equals(attr.getNodeName())) {
 					gpx.setVersion(attr.getNodeValue());
-				} else if(GPXConstants.CREATOR_ATTR.equals(attr.getNodeName())) {
+				} else if(GPXConstants.CREATOR_ATTR.equals(attr.getNodeName())) 
 					gpx.setCreator(attr.getNodeValue());
+		
+
 				}
+			XPath xpath = XPathFactory.newInstance().newXPath();
+			XPathExpression expr;
+			try {
+				expr = xpath.compile("gpx/metadata/extensions/error/@message");
+	
+				String ErrorMessage = (String)expr.evaluate(doc, XPathConstants.STRING);
+				gpx.addExtensionData("error", ErrorMessage);
+			} catch (Exception e) {
+				// TODO Auto-generated catch block
+				e.printStackTrace();
 			}
-			NodeList nodes = firstChild.getChildNodes();
+		
+		
+			
+			 NodeList nodes = firstChild.getChildNodes();
 			logger.debug("Found " +nodes.getLength()+ " child nodes. Start parsing ...");
 			for(int idx = 0; idx < nodes.getLength(); idx++) {
 				Node currentNode = nodes.item(idx);
@@ -152,6 +170,9 @@ public GPX parseGPX(InputStream in) throws ParserConfigurationException, SAXExce
 						logger.info("Add route to gpx data. [routeName="+ rte.getName() + "]");
 						gpx.addRoute(rte);
 					}
+					
+
+					
 				}
 			}
 			//TODO: parse route node
diff --git a/acceptancetesting/src/main/java/org/alternativevision/gpx/beans/GPX.java b/acceptancetesting/src/main/java/org/alternativevision/gpx/beans/GPX.java
index 46ef8639f0..f9017ab1f8 100644
--- a/acceptancetesting/src/main/java/org/alternativevision/gpx/beans/GPX.java
+++ b/acceptancetesting/src/main/java/org/alternativevision/gpx/beans/GPX.java
@@ -44,6 +44,7 @@
 	private HashSet<Waypoint> waypoints;
 	private HashSet<Track> tracks;
 	private HashSet<Route> routes;
+	private String errorMessage;
 	
 	/**
 	 * Returns the version of a gpx object
@@ -158,4 +159,10 @@ public void addRoute(Route route) {
 		}
 		routes.add(route);
 	}
+
+	public String getErrorMessage() {
+		
+		return errorMessage;
+		
+	}
 }
diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/beans/RouteWayPoint.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/beans/RouteWayPoint.java
index 4232350d59..495bbbe301 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/beans/RouteWayPoint.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/beans/RouteWayPoint.java
@@ -61,7 +61,7 @@ public boolean equals(RouteWayPoint routeWayPoint) {
 							
 							if (!isEqual)
 							{
-								LOG.info("Way point Description "+thisValueAsString+" is not matching with "+thatValueAsString);
+								//LOG.info("Way point Description "+thisValueAsString+" is not matching with "+thatValueAsString);
 							}
 						}
 
diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/extensions/ExtensionConstants.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/extensions/ExtensionConstants.java
index 4a24c13e4a..d9026c1b2a 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/extensions/ExtensionConstants.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/extensions/ExtensionConstants.java
@@ -6,4 +6,5 @@
 	public final static String TIME ="time";
 	public final static String DIRECTION ="direction";
 	public final static String AZIMUTH ="azimuth";
+//	public final static String ERROR="error";
 }
diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperGPXParserRouteTest.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperGPXParserRouteTest.java
index eb50d01d36..f215bbf98f 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperGPXParserRouteTest.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperGPXParserRouteTest.java
@@ -19,6 +19,7 @@
 import org.apache.http.client.methods.CloseableHttpResponse;
 import org.apache.http.client.methods.HttpGet;
 import org.apache.http.impl.client.CloseableHttpClient;
+import org.junit.Assert;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -95,24 +96,22 @@ CloseableHttpResponse doSendAndGetResponse(String serviceUrl)
 		return httpClient.execute(httpget);
 	}
 
-	public String parseRoute(String routeType, String avoidances,String routeOptions, String[] points) {
+	public String parseRoute(String routeType, String avoidances,
+			String routeOptions, String[] points) {
 		LOG.debug("Here we are");
 		// Set up the URL
 		String xmlResponse = "";
 		String coordinateString = "";
 		String graphHopperUrl;
-		
-		String vehicle="";
-		String routeOption="";
-		
-		if (routeOptions.split(",").length>1)
-		{
-		 vehicle=routeOptions.split(",")[0];
-		 routeOption=routeOptions.split(",")[1];
-		}
-		else
-		{
-			vehicle=routeOptions;
+
+		String vehicle = "";
+		String routeOption = "";
+
+		if (routeOptions.split(",").length > 1) {
+			vehicle = routeOptions.split(",")[0];
+			routeOption = routeOptions.split(",")[1];
+		} else {
+			vehicle = routeOptions;
 		}
 
 		for (int i = 0; i < points.length; i++) {
@@ -121,22 +120,18 @@ public String parseRoute(String routeType, String avoidances,String routeOptions
 
 		}
 
-		
-		if (IntegrationTestProperties.getTestPropertyBool("viaApigee"))
-		{
-			graphHopperUrl = IntegrationTestProperties.getTestProperty("graphHopperWebUrlViaApigee");
-		}
-		else
-		{
-			graphHopperUrl = IntegrationTestProperties.getTestProperty("graphHopperWebUrl");
+		if (IntegrationTestProperties.getTestPropertyBool("viaApigee")) {
+			graphHopperUrl = IntegrationTestProperties
+					.getTestProperty("graphHopperWebUrlViaApigee");
+		} else {
+			graphHopperUrl = IntegrationTestProperties
+					.getTestProperty("graphHopperWebUrl");
 		}
-		
-				
+
 		String apikey = IntegrationTestProperties.getTestProperty("apiKey");
 
-		if (vehicle.equalsIgnoreCase("mountainbike"))
-		{
-			vehicle="mtb";
+		if (vehicle.equalsIgnoreCase("mountainbike")) {
+			vehicle = "mtb";
 		}
 		StringBuilder sb = new StringBuilder();
 		sb.append(graphHopperUrl);
@@ -154,7 +149,30 @@ public String parseRoute(String routeType, String avoidances,String routeOptions
 		sb.append(apikey);
 		if (!avoidances.equals("")) {
 			sb.append("&avoidances=" + avoidances);
-					}
+		}
+		try {
+			CloseableHttpResponse httpResponse = sendAndGetResponse(sb
+					.toString());
+			xmlResponse = IOUtils.toString(httpResponse.getEntity()
+					.getContent(), "UTF-8");
+
+		} catch (IOException e) {
+			LOG.info("Exception raised whilst attempting to call graphhopper server "
+					+ e.getMessage());
+		}
+
+		if (xmlResponse != null && xmlResponse.length() > 0) {
+			parseGPXFromString(xmlResponse);
+		}
+
+		return xmlResponse;
+	}
+
+	public String parseRoute(StringBuffer sb) {
+		LOG.debug("Here we are");
+		// Set up the URL
+		String xmlResponse = "";
+
 		try {
 			CloseableHttpResponse httpResponse = sendAndGetResponse(sb
 					.toString());
@@ -207,10 +225,12 @@ private void init() {
 		RoutePointTimeParser rPTEP = new RoutePointTimeParser();
 		RoutePointAzimuthParser rPAEP = new RoutePointAzimuthParser();
 		RoutePointDirectionParser rPDIEP = new RoutePointDirectionParser();
+		// RouteExceptionParser rPException= new RouteExceptionParser();
 		gpxParser.addExtensionParser(rPDEP);
 		gpxParser.addExtensionParser(rPTEP);
 		gpxParser.addExtensionParser(rPAEP);
 		gpxParser.addExtensionParser(rPDIEP);
+		// gpxParser.addExtensionParser(rPException);
 	}
 
 	public boolean isWayPointOnRoute(Waypoint aWayPoint, Route aRoute) {
@@ -294,4 +314,18 @@ public boolean isWayPointOnGPXRoutes(Waypoint wp) {
 		return isWayPointOnRoute;
 	}
 
+	public String getErrorMessage() {
+
+		return (String) gpx.getExtensionData("error");
+
+	}
+
+	public void verifyMessage(String responseMessage) {
+		String actualErrorMessage = getErrorMessage();
+		Assert.assertTrue("actual error message: " + actualErrorMessage
+				+ "does not match with: " + responseMessage,
+				responseMessage.equalsIgnoreCase(actualErrorMessage));
+
+	}
+
 }
diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperJSONParser.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperJSONParser.java
index 1a007a48da..8366993765 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperJSONParser.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperJSONParser.java
@@ -1,22 +1,20 @@
 package uk.co.ordnancesurvey.gpx.graphhopper;
 
-import gherkin.JSONParser;
-import gherkin.formatter.JSONPrettyFormatter;
-
 import java.io.IOException;
 import java.util.HashSet;
-import java.util.List;
+
+
+
 
 import org.alternativevision.gpx.beans.Waypoint;
 import org.apache.commons.io.IOUtils;
 import org.apache.http.client.methods.CloseableHttpResponse;
-import org.json.JSONObject;
+import org.junit.Assert;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import uk.co.ordnancesurvey.gpx.beans.RouteWayPoint;
 import uk.co.ordnancesurvey.gpx.extensions.ExtensionConstants;
-import uk.co.ordnancesurvey.webtests.platforms.BrowserPlatformOptions;
 
 import com.google.gson.JsonArray;
 import com.google.gson.JsonElement;
@@ -42,6 +40,8 @@ public GraphHopperJSONParser() {
 	public JSONWayPoints parseJSONFromString(String jsonString) {
 		this.jsonString = jsonString;
 		JsonParser parser = new JsonParser();
+		
+		try{
 		JsonElement je = parser.parse(jsonString);
 		JsonObject jo = je.getAsJsonObject();
 		JsonArray paths = jo.getAsJsonArray("paths");
@@ -94,7 +94,12 @@ public JSONWayPoints parseJSONFromString(String jsonString) {
 
 			json.addWayPoint(w);
 		}
-
+		}
+		
+		catch(Exception e)
+		{
+			LOG.info(e.getMessage());
+		}
 		return json;
 
 	}
@@ -125,6 +130,22 @@ public JSONWayPoints parseCoordinatesFromJson(String jsonString) {
 		return json;
 
 	}
+	
+	
+	
+	public String parseErrorMessagesFromJson(String jsonString) {
+		this.jsonString = jsonString;
+		JsonParser parser = new JsonParser();
+		JsonElement je = parser.parse(jsonString);
+		JsonObject jo = je.getAsJsonObject();
+		JsonObject info = jo.getAsJsonObject("info");
+
+		JsonArray errors = info.getAsJsonArray("errors");
+		JsonPrimitive errorMessage = errors.get(0).getAsJsonObject()
+				.getAsJsonPrimitive("message");
+		return errorMessage.getAsString();
+
+	}
 
 	public HashSet<Waypoint> getJsonCoordinatesAsHashSet() {
 
@@ -332,6 +353,34 @@ public String getNearestPoint(String pointA) {
 		return nearestpoint;
 
 	}
+	
+	
+	
+	
+	
+	public void parse(StringBuffer sb) {
+
+
+		String jsonResponse = "";
+
+		GraphHopperGPXParserRouteTest GPHService = new GraphHopperGPXParserRouteTest();
+		try {
+			CloseableHttpResponse httpResponse = GPHService
+					.sendAndGetResponse(sb.toString());
+			jsonResponse = IOUtils.toString(httpResponse.getEntity()
+					.getContent(), "UTF-8");
+
+		} catch (IOException e) {
+			LOG.info("Exception raised whilst attempting to call graphhopper server "
+					+ e.getMessage());
+		}
+
+		if (jsonResponse != null && jsonResponse.length() > 0) {
+			parseJSONFromString(jsonResponse);
+		}
+
+	}
+	
 
 	public String getNearestPointDistance() {
 		JsonParser jp = new JsonParser();
@@ -351,4 +400,11 @@ public long getTotalRouteTime() {
 		return Long.parseLong(totalTime.toString());
 	}
 
+	public void verifyMessage(String responseMessage) {
+		String actualErrorMessage=parseErrorMessagesFromJson(jsonString);
+		Assert.assertTrue("actual error message: "+actualErrorMessage+"does not match with: "+responseMessage,responseMessage.equalsIgnoreCase(actualErrorMessage));
+		
+		
+	}
+
 }
diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
index e72879d318..5f0b1bb7d6 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
@@ -2,19 +2,11 @@
 
 import java.io.IOException;
 import java.text.ParseException;
-import java.util.ArrayList;
-import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
-import java.util.Map.Entry;
 
-import org.apache.commons.io.IOUtils;
-import org.apache.http.client.methods.CloseableHttpResponse;
-import org.apache.http.client.methods.HttpGet;
-import org.apache.http.impl.client.CloseableHttpClient;
 import org.junit.Assert;
 
-import uk.co.ordnancesurvey.gpx.graphhopper.HttpClientUtils;
 import uk.co.ordnancesurvey.gpx.graphhopper.IntegrationTestProperties;
 import cucumber.api.DataTable;
 import cucumber.api.Scenario;
@@ -30,11 +22,11 @@
 	String nearestPoint = "";
 	String Distance = "";
 
-	private String routeResponse;
+	
 	private String routeResponsecode;
 	private String routeResponseMessage;
 	// private Map<String,String> requestParameters= new HashMap<>();
-	private Map<String, ArrayList<String>> requestParameters = new HashMap<String, ArrayList<String>>();
+
 
 	@Given("^I request a nearest point from  \"([^\"]*)\" from Nearest Point API$")
 	public void I_request_a_nearest_point_from_from_Nearest_Point_API(
@@ -93,8 +85,7 @@ public void I_should_be_able_to_verify_the_not_waypoints_on_the_route_map(
 		Assert.assertFalse(
 				"Waypoint found on the route where it was not expected",
 				graphUiUtil.isWayPointNotonRouteMap(wayPointList));
-		// graphUiUtil.isWayPointNotonRouteMap(wayPointList);
-
+	
 	}
 
 	@Then("^The total route time should be not more than \"([^\"]*)\"$")
@@ -130,7 +121,7 @@ public void closeBrowser(Scenario sc) {
 				sc.embed(screeenshot, "image/png");
 
 			} catch (IOException e) {
-				// TODO Auto-generated catch block
+				
 				e.printStackTrace();
 			}
 		}
@@ -180,36 +171,21 @@ public void getRouteWithAvoidancesintermediatepoints(String routeOptions,
 	@Given("^I have ([^\"]*) as \"([^\"]*)\"$")
 	public void setParameters_for_RoutingRequest(String paramName,
 			String paramValue) {
-
-		addParameter(paramName, paramValue);
+		
+		graphUiUtil.addParameter(paramName, paramValue);
 	}
 
-	private void addParameter(String key, String value) {
-		ArrayList<String> tempList = null;
-		if (requestParameters.containsKey(key)) {
-			tempList = requestParameters.get(key);
-			if (tempList == null)
-				tempList = new ArrayList<String>();
-			tempList.add(value);
-		} else {
-			tempList = new ArrayList<String>();
-			tempList.add(value);
-		}
-		requestParameters.put(key, tempList);
-	}
+
 
 	@Given("^I have route ([^\"]*) as$")
 	public void setRoutingpoints(String paramName,DataTable dt) {
-		List<List<String>> data = dt.raw();
+		graphUiUtil=new GraphHopperUIUtil(IntegrationTestProperties.getTestProperty("graphHopperWebUrl"));
+		graphUiUtil.addRoutePointsToParameters(paramName, dt);
 
-		String[] points = new String[data.get(1).size()];
-		points = data.get(1).toArray(points);
+	}
 
-		for (int i = 0; i < points.length; i++) {
-			addParameter(paramName, points[i]);
-		}
 
-	}
+	
 
 	@Then("^I should be able to verify the responseCode as \"([^\"]*)\"$")
 	public void I_should_be_able_to_verify_the_responseCode_as(
@@ -223,64 +199,43 @@ public void I_should_be_able_to_verify_the_responseCode_as(
 	@Then("^I should be able to verify the response message as \"([^\"]*)\"$")
 	public void I_should_be_able_to_verify_the_response_message_as(
 			String responseMessage) {
-		Assert.assertTrue(routeResponseMessage
-				+ "response code did not match with " + responseMessage,
-				routeResponseMessage.equals(responseMessage));
+		
+		graphUiUtil.verifyErrorMessage(responseMessage);
+	
 	}
 
+	
+	
 	@When("^I request for a route$")
 	public void I_request_for_route() {
+		
 
-		graphUiUtil = new GraphHopperUIUtil(
-				IntegrationTestProperties.getTestProperty("graphHopperWebUrl"));
-
-		StringBuffer sb = new StringBuffer();
-
-		if (IntegrationTestProperties.getTestPropertyBool("viaApigee")) {
-			sb.append(IntegrationTestProperties
-					.getTestProperty("graphHopperWebUrlViaApigee"));
-
-		} else {
-			sb.append(IntegrationTestProperties
-					.getTestProperty("graphHopperWebUrl"));
-		}
-		sb.append("route?");
-		for (Entry<String, ArrayList<String>> entry : requestParameters
-				.entrySet()) {
-			String key = entry.getKey();
-			ArrayList<String> value = entry.getValue();
-			for (String string : value) {
-				sb.append("&" + key + "=" + string);
-			}
-
-		}
-
-		if (IntegrationTestProperties.getTestProperty("testON")
-				.equalsIgnoreCase("Service")) {
-
-			try {
+		String testON = IntegrationTestProperties.getTestProperty("testON");
 
-				CloseableHttpClient httpClient = HttpClientUtils.createClient();
-				HttpGet httpget = new HttpGet(sb.toString());
+		switch (testON.toUpperCase()) {
+		case "WEB":
 
-				CloseableHttpResponse clientResponse = httpClient
-						.execute(httpget);
+			graphUiUtil.getRouteFromUI();
+			break;
+		case "SERVICE":
+			
+			graphUiUtil.getRouteFromServiceWithParameters();
 
-				routeResponse = IOUtils.toString(clientResponse.getEntity()
-						.getContent(), "UTF-8");
+			break;
+		default:
 
-				routeResponsecode = String.valueOf(clientResponse
-						.getStatusLine().getStatusCode());
-				routeResponseMessage = clientResponse.getStatusLine()
-						.getReasonPhrase();
 
-			} catch (IOException e) {
+			graphUiUtil.getRouteFromServiceWithParameters();
+				graphUiUtil.getRouteFromUI();
+			
 
-				System.out.println(e.getMessage());
-			}
+			break;
 
 		}
+		
 
+		
 	}
-
+	
+	
 }
\ No newline at end of file
diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
index 4472b2ae93..d282dc798a 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
@@ -2,7 +2,29 @@
 
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
-import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.*;
+import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.ADD_WAYPOINT;
+import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.INSTRUCTIONS;
+import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.ROUTE_SEARCH;
+import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.ROUTE_TYPE_BIKE;
+import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.ROUTE_TYPE_CAR;
+import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.ROUTE_TYPE_WALK;
+import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.TOTAL_ROUTE_TIME;
+import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.avoidance_ARoad;
+import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.avoidance_Boulders;
+import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.avoidance_Cliff;
+import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.avoidance_InlandWater;
+import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.avoidance_Marsh;
+import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.avoidance_Mud;
+import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.avoidance_QuarryOrPit;
+import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.avoidance_Rock;
+import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.avoidance_Sand;
+import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.avoidance_Scree;
+import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.avoidance_Shingle;
+import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.dropDown;
+import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.fastest_RButton;
+import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.settingsButton;
+import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.shortest_RButton;
+import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.waypoint;
 
 import java.awt.Graphics2D;
 import java.awt.RenderingHints;
@@ -11,17 +33,19 @@
 import java.io.IOException;
 import java.text.ParseException;
 import java.text.SimpleDateFormat;
+import java.util.ArrayList;
 import java.util.Date;
+import java.util.HashMap;
 import java.util.HashSet;
 import java.util.List;
 import java.util.Map;
+import java.util.Map.Entry;
 import java.util.TimeZone;
 
 import javax.imageio.ImageIO;
 
 import org.alternativevision.gpx.beans.Route;
 import org.alternativevision.gpx.beans.Waypoint;
-import org.apache.http.client.methods.CloseableHttpResponse;
 import org.junit.Assert;
 import org.openqa.selenium.By;
 import org.openqa.selenium.JavascriptExecutor;
@@ -32,13 +56,12 @@
 import uk.co.ordnancesurvey.gpx.extensions.ExtensionConstants;
 import uk.co.ordnancesurvey.gpx.graphhopper.GraphHopperGPXParserRouteTest;
 import uk.co.ordnancesurvey.gpx.graphhopper.GraphHopperJSONParser;
-import uk.co.ordnancesurvey.webtests.base.ComponentByXPATH;
+import uk.co.ordnancesurvey.gpx.graphhopper.IntegrationTestProperties;
 import uk.co.ordnancesurvey.webtests.base.ComponentID;
-import uk.co.ordnancesurvey.webtests.base.ComponentIdentifier;
 import uk.co.ordnancesurvey.webtests.base.ImageComparison;
 import uk.co.ordnancesurvey.webtests.multiplatform.MultiplatformTest;
 import uk.co.ordnancesurvey.webtests.platforms.BrowserPlatformOptions;
-import uk.co.ordnancesurvey.gpx.graphhopper.IntegrationTestProperties;
+import cucumber.api.DataTable;
 
 public class GraphHopperUIUtil extends MultiplatformTest {
 
@@ -47,6 +70,7 @@
 	String testOn = IntegrationTestProperties.getTestProperty("testON");
 	GraphHopperGPXParserRouteTest GPHService = new GraphHopperGPXParserRouteTest();
 	GraphHopperJSONParser GPHJsonService = new GraphHopperJSONParser();
+	private Map<String, ArrayList<String>> requestParameters = new HashMap<String, ArrayList<String>>();
 
 	JavascriptExecutor js = (JavascriptExecutor) driver;
 	WebElement we;
@@ -68,11 +92,6 @@ public GraphHopperUIUtil(String url) {
 	}
 
 	private void init() throws InterruptedException {
-		// baseUrl = IntegrationTestProperties
-		// .getTestProperty("graphHopperWebUrl");
-		// if (null == baseUrl) {
-		// baseUrl = "http://os-graphhopper.elasticbeanstalk.com/";
-		// }
 
 		if (!testOn.equalsIgnoreCase("SERVICE")) {
 			initialiseWebDriver();
@@ -177,16 +196,8 @@ public void getRouteFromUI(String routeOptions, String avoidances,
 					break;
 				}
 			}
-			/*
-			 * switch (routeOption) { case "shortavoid":
-			 * clickElement(shortest_RButton); break; case "fastavoid":
-			 * clickElement(fastest_RButton); break; case "fastest":
-			 * 
-			 * clickElement(fastest_RButton); break; case "shortest":
-			 * clickElement(shortest_RButton); break;
-			 * 
-			 * default: break; }
-			 */if (routeOption.equalsIgnoreCase("shortavoid")) {
+
+			if (routeOption.equalsIgnoreCase("shortavoid")) {
 				clickElement(shortest_RButton);
 			}
 
@@ -332,7 +343,7 @@ public boolean isWayPointonRouteMap(String wayPointIndex,
 					wayPointDescription, avoidance);
 			break;
 		case "SERVICE":
-			if (IntegrationTestProperties.getTestProperty("routeType").equals(
+			if (requestParameters.get("type").get(0).equals(
 					"gpx")) {
 				wp = buildWayPoint(wayPoint_Coordinates, wayPointDescription,
 						azimuth, direction, time, distance);
@@ -352,7 +363,7 @@ public boolean isWayPointonRouteMap(String wayPointIndex,
 			isWayPointonRouteMapUI = verifyInstructionThroughUI(wayPointIndex,
 					wayPointDescription, avoidance);
 
-			if (IntegrationTestProperties.getTestProperty("routeType").equals(
+			if (requestParameters.get("type").get(0).equals(
 					"gpx")) {
 				wp = buildWayPoint(wayPoint_Coordinates, wayPointDescription,
 						azimuth, direction, time, distance);
@@ -367,7 +378,8 @@ public boolean isWayPointonRouteMap(String wayPointIndex,
 				isWayPointonRouteMapService = GPHJsonService
 						.isWayPointinPath(wp);
 			}
-			isWayPointonRouteMap=(isWayPointonRouteMapUI) && (isWayPointonRouteMapService);
+			isWayPointonRouteMap = (isWayPointonRouteMapUI)
+					&& (isWayPointonRouteMapService);
 
 			break;
 		}
@@ -397,9 +409,9 @@ private Waypoint buildWayPoint(String wayPoint_Coordinates,
 
 	public boolean isWayPointNotonRouteMap(
 			List<Map<String, String>> waypointList) {
-		
+
 		boolean isWayPointNotonsRouteMap = true;
-		boolean isWayPointNotonRouteMap=true;
+		boolean isWayPointNotonRouteMap = true;
 		for (int i = 0; i < waypointList.size(); i++) {
 
 			if (waypointList.get(i).size() > 2) {
@@ -420,9 +432,9 @@ public boolean isWayPointNotonRouteMap(
 				isWayPointNotonRouteMap = isWayPointonRouteMap(wayPointIndex,
 						waypointco, waypointdesc, azimuth, direction, time,
 						distance, avoidance);
-				
-				isWayPointNotonsRouteMap=(isWayPointNotonsRouteMap&&isWayPointNotonRouteMap);
-					
+
+				isWayPointNotonsRouteMap = (isWayPointNotonsRouteMap && isWayPointNotonRouteMap);
+
 			}
 
 			else
@@ -435,16 +447,14 @@ public boolean isWayPointNotonRouteMap(
 						"waypointdesc");
 				isWayPointNotonRouteMap = verifyInstructionThroughUI(
 						wayPointIndex, waypointdesc, "");
-				
-				isWayPointNotonsRouteMap=(isWayPointNotonsRouteMap||isWayPointNotonRouteMap);
-				
+
+				isWayPointNotonsRouteMap = (isWayPointNotonsRouteMap || isWayPointNotonRouteMap);
 
 			}
 
 		}
 		return isWayPointNotonsRouteMap;
 
-
 	}
 
 	public boolean isWayPointonRouteMap(List<Map<String, String>> waypointList) {
@@ -470,10 +480,10 @@ public boolean isWayPointonRouteMap(List<Map<String, String>> waypointList) {
 				isWayPointonRouteMap = isWayPointonRouteMap(wayPointIndex,
 						waypointco, waypointdesc, azimuth, direction, time,
 						distance, avoidance);
-				
-				isWayPointsonRouteMap=isWayPointsonRouteMap&&isWayPointonRouteMap;
 
-					
+				isWayPointsonRouteMap = isWayPointsonRouteMap
+						&& isWayPointonRouteMap;
+
 			}
 
 			else
@@ -486,9 +496,9 @@ public boolean isWayPointonRouteMap(List<Map<String, String>> waypointList) {
 						"waypointdesc");
 				isWayPointonRouteMap = verifyInstructionThroughUI(
 						wayPointIndex, waypointdesc, "");
-				
-				isWayPointsonRouteMap=isWayPointsonRouteMap&&isWayPointonRouteMap;
-				
+
+				isWayPointsonRouteMap = isWayPointsonRouteMap
+						&& isWayPointonRouteMap;
 
 			}
 
@@ -496,10 +506,6 @@ public boolean isWayPointonRouteMap(List<Map<String, String>> waypointList) {
 		return isWayPointsonRouteMap;
 
 	}
-	
-	
-
-	
 
 	public void verifyTotalRouteTime(String totalRouteTime)
 			throws ParseException {
@@ -707,4 +713,235 @@ public String nearestPointDistance() {
 
 	}
 
+	protected void addParameter(String key, String value) {
+		ArrayList<String> tempList = null;
+		if (requestParameters.containsKey(key)) {
+			tempList = requestParameters.get(key);
+			if (tempList == null)
+				tempList = new ArrayList<String>();
+			tempList.add(value);
+		} else {
+			tempList = new ArrayList<String>();
+			tempList.add(value);
+		}
+		requestParameters.put(key, tempList);
+	}
+
+	protected void addRoutePointsToParameters(String paramName, DataTable dt) {
+		List<List<String>> data = dt.raw();
+
+		String[] points = new String[data.get(1).size()];
+		points = data.get(1).toArray(points);
+
+		for (int i = 0; i < points.length; i++) {
+			addParameter(paramName, points[i]);
+		}
+
+	}
+
+	public void getRouteFromServiceWithParameters(StringBuffer sb) {
+
+		if (requestParameters.get("type").get(0).equalsIgnoreCase("gpx"))
+				 {
+			GPHService.parseRoute(sb);
+		}
+
+		else {
+
+			GPHJsonService.parse(sb);
+		}
+
+	}
+
+	protected void getRouteFromServiceWithParameters() {
+
+		StringBuffer sb = new StringBuffer();
+
+		if (IntegrationTestProperties.getTestPropertyBool("viaApigee")) {
+			sb.append(IntegrationTestProperties
+					.getTestProperty("graphHopperWebUrlViaApigee"));
+
+		} else {
+			sb.append(IntegrationTestProperties
+					.getTestProperty("graphHopperWebUrl"));
+		}
+		sb.append("route?");
+		if (requestParameters.get("type").get(0) == "") {
+			requestParameters.remove("type");
+			ArrayList<String> responseType = new ArrayList<String>();
+			responseType.add(IntegrationTestProperties
+					.getTestProperty("routeType"));
+			requestParameters.put("type", responseType);
+		}
+		ArrayList<String> pointscoding = new ArrayList<String>();
+		pointscoding.add("false");
+		requestParameters.put("points_encoded", pointscoding);
+		for (Entry<String, ArrayList<String>> entry : requestParameters
+				.entrySet()) {
+			String key = entry.getKey();
+			ArrayList<String> value = entry.getValue();
+			for (String string : value) {
+				sb.append("&" + key + "=" + string);
+			}
+
+		}
+
+		getRouteFromServiceWithParameters(sb);
+	}
+
+	/*
+	 * try {
+	 * 
+	 * CloseableHttpClient httpClient = HttpClientUtils.createClient(); HttpGet
+	 * httpget = new HttpGet(sb.toString());
+	 * 
+	 * CloseableHttpResponse clientResponse = httpClient .execute(httpget);
+	 * 
+	 * getRouteFromServiceWithParameters(sb);
+	 * 
+	 * String routeResponse = IOUtils.toString(clientResponse.getEntity()
+	 * .getContent(), "UTF-8");
+	 * 
+	 * String routeResponsecode = String.valueOf(clientResponse
+	 * .getStatusLine().getStatusCode()); String routeResponseMessage =
+	 * clientResponse.getStatusLine() .getReasonPhrase();
+	 * 
+	 * 
+	 * } catch (IOException e) {
+	 * 
+	 * System.out.println(e.getMessage()); }
+	 */
+
+	public void getRouteFromUI() {
+
+		String weighting = requestParameters.get("weighting").get(0);
+
+		String avoidances = requestParameters.get("avoidances").get(0);
+		String vehicle = requestParameters.get("vehicle").get(0);
+
+		ArrayList<String> points = requestParameters.get("point");
+		switch (vehicle) {
+		case "car":
+			clickElement(ROUTE_TYPE_CAR);
+
+			break;
+		case "bike":
+			clickElement(ROUTE_TYPE_BIKE);
+			break;
+		case "foot":
+			clickElement(ROUTE_TYPE_WALK);
+			break;
+		default:
+			clickElement(ROUTE_TYPE_CAR);
+			break;
+
+		}
+		clickElement(settingsButton);
+
+		if (!avoidances.equals("")) {
+			for (int i = 0; i < avoidances.split(",").length; i++) {
+				String avoidance = avoidances.split(",")[i];
+				switch (avoidance.toLowerCase().trim()) {
+
+				case "aroad":
+					clickElement(avoidance_ARoad);
+					break;
+
+				case "boulders":
+					clickElement(avoidance_Boulders);
+					break;
+				case "cliff":
+					clickElement(avoidance_Cliff);
+					break;
+				case "inlandwater":
+					clickElement(avoidance_InlandWater);
+					break;
+				case "marsh":
+					clickElement(avoidance_Marsh);
+					break;
+				case "quarryorpit":
+					clickElement(avoidance_QuarryOrPit);
+					break;
+				case "scree":
+					clickElement(avoidance_Scree);
+					break;
+				case "rock":
+					clickElement(avoidance_Rock);
+					break;
+				case "mud":
+					clickElement(avoidance_Mud);
+					break;
+
+				case "sand":
+					clickElement(avoidance_Sand);
+					break;
+
+				case "shingle":
+					clickElement(avoidance_Shingle);
+					break;
+
+				default:
+					break;
+				}
+			}
+
+			if (weighting.equalsIgnoreCase("shortavoid")) {
+				clickElement(shortest_RButton);
+			}
+
+			else {
+				clickElement(fastest_RButton);
+			}
+
+		}
+
+		else {
+			if (weighting.equalsIgnoreCase("shortest")) {
+				clickElement(shortest_RButton);
+			}
+
+			else {
+				clickElement(fastest_RButton);
+			}
+		}
+
+		for (int i = 0; i < points.size() - 2; i++)
+
+		{
+			clickElement(ADD_WAYPOINT);
+		}
+
+		for (int i = 0; i < points.size(); i++) {
+			String point = points.get(i);
+
+			int length = point.split(",").length;
+
+			if (length == 2) {
+
+				waypoint = new ComponentID(i + "_searchBox");
+				typeIntoField(waypoint, point);
+
+			}
+
+			else {
+				waypoint = new ComponentID(i + "_searchBox");
+				typeIntoField(waypoint, point);
+				clickElement(dropDown);
+			}
+		}
+
+		clickElement(ROUTE_SEARCH);
+
+		waitFor(INSTRUCTIONS);
+
+	}
+
+	public void verifyErrorMessage(String responseMessage) {
+		if (requestParameters.get("type").get(0).equalsIgnoreCase("gpx")) {
+			GPHService.verifyMessage(responseMessage);
+		} else {
+			GPHJsonService.verifyMessage(responseMessage);
+		}
+	}
+
 }
diff --git a/acceptancetesting/src/test/cucumber/Routing-Exeter.feature b/acceptancetesting/src/test/cucumber/Routing-Exeter.feature
index 9b478c8923..61364b7bd2 100644
--- a/acceptancetesting/src/test/cucumber/Routing-Exeter.feature
+++ b/acceptancetesting/src/test/cucumber/Routing-Exeter.feature
@@ -645,22 +645,67 @@ Feature: Verify a route from A to B
       | routeOptions | avoidances |
       | car          |            |
 
-  @yogi
+  Scenario Outline: Verify  Route using (10 intermediate waypoints)
+    Given I have route point as
+      | pointA              | pointB              | pointC              | pointD              | pointE              | pointF              | pointG              | pointH              | pointI            | pointJ              |
+      | 50.729961,-3.524853 | 50.723364,-3.523895 | 50.719078,-3.541011 | 50.720275,-3.526888 | 50.719826,-3.529631 | 50.729774,-3.519937 | 50.734471,-3.516965 | 50.732477,-3.517843 | 50.727248,-3.5205 | 50.719852,-3.544358 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the waypoints on the route map:
+      | wayPointIndex | waypointco          | waypointdesc                                        | azimuth | direction | time  | distance | avoidance |
+      | 1             | 50.729734,-3.52464  | Continue onto ST SIDWELL'S AVENUE                   | 119.0   | SE        | 9351  | 116.9    |           |
+      | 8             | 50.723365,-3.523902 | Continue onto B3212 (WESTERN WAY)                   | 195.0   | S         | 21140 | 272.8    |           |
+      | 16            | 50.719224,-3.540839 | Continue onto OKEHAMPTON STREET                     | 126.0   | SE        | 17995 | 228.1    |           |
+      | 23            | 50.7203,-3.526902   | Continue onto B3212 (MAGDALEN STREET)               | 250.0   | W         | 58    | 0.7      |           |
+      | 30            | 50.719848,-3.529643 | Continue onto WESTERN WAY (A3015)                   | 68.0    | E         | 1997  | 34.4     |           |
+      | 37            | 50.729774,-3.519937 | Continue onto OLD TIVERTON ROAD                     | 35.0    | NE        | 38268 | 478.4    |           |
+      | 42            | 50.729023,-3.520593 | At roundabout, take exit 2 onto B3212 (WESTERN WAY) | 113.0   | SE        | 15894 | 209.9    |           |
+      | 50            | 50.718282,-3.535898 | Continue onto A377                                  | 207.0   | SW        | 12712 | 216.9    |           |
+
+    Examples: 
+      | vehicleType | avoidances | routeType | responseFormat |
+      | car         |            | fastest   | gpx            |
+
+  @Routing
+  Scenario Outline: Verify  Route using (10 intermediate waypoints)
+    Given I have route point as
+      | pointA              | pointB              | pointC              | pointD              | pointE              | pointF              | pointG              | pointH              | pointI            | pointJ              |
+      | 50.729961,-3.524853 | 50.723364,-3.523895 | 50.719078,-3.541011 | 50.720275,-3.526888 | 50.719826,-3.529631 | 50.729774,-3.519937 | 50.734471,-3.516965 | 50.732477,-3.517843 | 50.727248,-3.5205 | 50.719852,-3.544358 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the waypoints not on the route map:
+      | wayPointIndex | waypointco          | waypointdesc                                        | azimuth | direction | time  | distance | avoidance |
+      | 1             | 50.729734,-3.52464  | Continue onto ST SIDWELL'S AVENUE                   | 119.0   | SE        | 9351  | 116.9    |           |
+      | 8             | 50.723365,-3.523902 | Continue onto B3212 (WESTERN WAY)                   | 195.0   | S         | 21140 | 272.8    |           |
+      | 16            | 50.719224,-3.540839 | Continue onto OKEHAMPTON STREET                     | 126.0   | SE        | 17995 | 228.1    |           |
+      | 23            | 50.7203,-3.526902   | Continue onto B3212 (MAGDALEN STREET)               | 250.0   | W         | 58    | 0.7      |           |
+      | 30            | 50.719848,-3.529643 | Continue onto WESTERN WAY (A3015)                   | 68.0    | E         | 1997  | 34.4     |           |
+      | 37            | 50.729774,-3.519937 | Continue onto OLD TIVERTON ROAD                     | 35.0    | NE        | 38268 | 478.4    |           |
+      | 42            | 50.729023,-3.520593 | At roundabout, take exit 2 onto B3212 (WESTERN WAY) | 113.0   | SE        | 15894 | 209.9    |           |
+      | 50            | 50.718282,-3.535898 | Continue onto A377                                  | 207.0   | SW        | 12712 | 216.9    |           |
+
+    Examples: 
+      | vehicleType | avoidances | routeType | responseFormat |
+      | car         |            | fastest   | gpx           |
+
+   @yogi
   Scenario Outline: 
-    Given I have route points as
-    | pointA              | pointB              | 
-    | 50.729961,-3.524853 | 50.723364,-3.523895 | 
+    Given I have route point as
+      | pointA              | pointB              |
+      | 50.729961,-3.524853 | 50.723364,-3.523895 |
     And I have vehicle as "<vehicleType>"
     And I have avoidances as "<avoidances>"
     And I have weighting as "<routeType>"
     And I have type as "<responseFormat>"
     When I request for a route
-    Then I should be able to verify the responseCode as "<responseCode>"
     Then I should be able to verify the response message as "<errorMessage>"
-    
-    
 
     Examples: 
-      | vehicleType | avoidances | routeType |responseFormat|responseCode|errorMessage|
-      | cars         |            | fastest   |json|200|OK|
-
+      | vehicleType | avoidances | routeType | responseFormat | responseCode | errorMessage |
+      | cars         |            | fastest   | gpx            | 200          | OK           |
diff --git a/acceptancetesting/src/test/cucumber/routing.feature b/acceptancetesting/src/test/cucumber/routing.feature
index de0bfd0f56..3477900226 100644
--- a/acceptancetesting/src/test/cucumber/routing.feature
+++ b/acceptancetesting/src/test/cucumber/routing.feature
@@ -5,7 +5,7 @@ Feature: Verify a route from A to B
 
   @Routing
   Scenario Outline: Verify  waypoints on a Route
-   Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
+    Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
       | pointA                                 | pointB                                 |
       | 51.471546541834144,-0.3618621826171875 | 51.45914115860512,-0.96679687499999995 |
     Then I should be able to verify the waypoints on the route map:
@@ -18,7 +18,7 @@ Feature: Verify a route from A to B
 
   @Routing
   Scenario Outline: Verify  waypoints on a Route from Hounslow to Reading
-   Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
+    Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
       | pointA                                 | pointB                                 |
       | 51.471546541834144,-0.3618621826171875 | 51.45914115860512,-0.96679687499999995 |
     Then I should be able to verify the waypoints on the route map:
@@ -33,7 +33,7 @@ Feature: Verify a route from A to B
 
   @Routing
   Scenario Outline: Verify  waypoints on a Route from Southampton to Glasgow
-   Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
+    Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
       | pointA              | pointB             |
       | 50.896617,-1.400465 | 55.861284,-4.24996 |
     Then I should be able to verify the waypoints on the route map:
@@ -51,7 +51,7 @@ Feature: Verify a route from A to B
 
   @Routing
   Scenario Outline: Verify  waypoints on a Route from London to Birmingham
-   Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
+    Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
       | pointA              | pointB              |
       | 51.507229,-0.127581 | 52.481875,-1.898743 |
     Then I should be able to verify the waypoints on the route map:
@@ -68,7 +68,7 @@ Feature: Verify a route from A to B
 
   @Routing
   Scenario Outline: Verify  waypoints on a Route from London to Birmingham and the total route time estimate
-   Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
+    Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
       | pointA              | pointB              |
       | 51.507229,-0.127581 | 52.481875,-1.898743 |
     Then The total route time should be not more than "<totalRouteTime>"
@@ -79,7 +79,7 @@ Feature: Verify a route from A to B
 
   @Routing
   Scenario Outline: Verify  waypoints on a Route from Hounslow to Burnham and the total route time estimate
-   Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
+    Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
       | pointA             | pointB              |
       | 51.475161,-0.39591 | 51.536292,-0.656802 |
     Then The total route time should be not more than "<totalRouteTime>"
@@ -90,7 +90,7 @@ Feature: Verify a route from A to B
 
   @Routing
   Scenario Outline: Verify  waypoints on a Route from Southampton to Glasgow
-   Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
+    Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
       | pointA              | pointB             |
       | 50.896617,-1.400465 | 55.861284,-4.24996 |
     Then I should be able to verify the trackPoints on the route map:
@@ -106,7 +106,7 @@ Feature: Verify a route from A to B
 
   @Routing
   Scenario Outline: Verify  oneway Restrictions on a Route (Burmingham Route with one way restriction-WSPIP-74)
-   Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
+    Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
       | pointA              | pointB              |
       | 52.446823,-1.929077 | 52.446604,-1.930043 |
     Then I should be able to verify the trackPoints not on the route map:
@@ -119,7 +119,7 @@ Feature: Verify a route from A to B
 
   @KnownIssues @Routing
   Scenario Outline: Verify  No Turn Restrictions  on a Route (Birmingham WSPIP-77)
-   Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
+    Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
       | pointA              | pointB              |
       | 52.446564,-1.930268 | 52.446744,-1.929469 |
     Then I should be able to verify the trackPoints not on the route map:
@@ -132,7 +132,7 @@ Feature: Verify a route from A to B
 
   @KnownIssues
   Scenario Outline: Verify  No Turn Restrictions  on a Route (Birmingham Bristol Road WSPIP-83)
-   Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
+    Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
       | pointA              | pointB              |
       | 52.446823,-1.929077 | 52.446672,-1.929691 |
     Then I should be able to verify the trackPoints not on the route map:
@@ -145,7 +145,7 @@ Feature: Verify a route from A to B
 
   @Routing
   Scenario Outline: Verify  under pass still finds route  from top road (Southampton- Charle WattsWay)
-   Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
+    Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
       | pointA              | pointB              |
       | 50.917598,-1.317992 | 50.919748,-1.310342 |
     Then I should be able to verify the trackPoints on the route map:
@@ -158,7 +158,7 @@ Feature: Verify a route from A to B
 
   @Routing
   Scenario Outline: Verify  under pass still finds route from bottom road  (Southampton- Charle WattsWay)
-   Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
+    Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
       | pointA             | pointB             |
       | 50.91525,-1.318761 | 50.92045,-1.316021 |
     Then I should be able to verify the trackPoints on the route map:
@@ -171,7 +171,7 @@ Feature: Verify a route from A to B
 
   @Routing
   Scenario Outline: Verify  No Turn   (WSPIP-76:Eastley- TWYFORD ROAD )
-   Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
+    Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
       | pointA              | pointB              |
       | 50.972281,-1.350942 | 50.972212,-1.351183 |
     Then I should be able to verify the waypoints on the route map:
@@ -184,7 +184,7 @@ Feature: Verify a route from A to B
 
   @Routing
   Scenario Outline: Verify  No Turn   (WSPIP-76:Eastley- Station Hill Road)
-   Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
+    Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
       | pointA              | pointB             |
       | 50.970024,-1.350267 | 50.97008,-1.350521 |
     Then I should be able to verify the waypoints on the route map:
@@ -197,7 +197,7 @@ Feature: Verify a route from A to B
 
   @Routing
   Scenario Outline: Verify  No Turn   (Treaty Center-Hounslow- Fairfields Road)
-   Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
+    Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
       | pointA             | pointB              |
       | 51.46882,-0.358687 | 51.469454,-0.357831 |
     Then I should be able to verify the waypoints on the route map:
@@ -210,7 +210,7 @@ Feature: Verify a route from A to B
 
   @KnownIssues
   Scenario Outline: Verify  No Turns with Exceptions(Vehicle Type:Bus)   (High Street-Hounslow)
-   Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
+    Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
       | pointA              | pointB              |
       | 51.470198,-0.356036 | 51.470352,-0.357388 |
     Then I should be able to verify the trackPoints not on the route map:
@@ -223,7 +223,7 @@ Feature: Verify a route from A to B
 
   @Routing
   Scenario Outline: Verify  Mandatory Turn   (Alexandra Road-Hounslow- Fairfields Road)
-   Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
+    Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
       | pointA             | pointB              |
       | 51.47118,-0.363609 | 51.470254,-0.363412 |
     Then I should be able to verify the waypoints on the route map:
@@ -236,7 +236,7 @@ Feature: Verify a route from A to B
 
   @Routing
   Scenario Outline: Verify  Private Road Restricted Access (Warwick Road-Carlisle)
-   Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
+    Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
       | pointA              | pointB            |
       | 54.894427,-2.921111 | 54.8922,-2.928296 |
     Then I should be able to verify the trackPoints not on the route map:
@@ -249,7 +249,7 @@ Feature: Verify a route from A to B
 
   @Routing
   Scenario Outline: Verify  Ford Gate at CRAMPOOR ROAD(ROMSEY-Southampton)
-   Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
+    Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
       | pointA              | pointB              |
       | 50.995817,-1.454224 | 50.998501,-1.454504 |
     Then I should be able to verify the waypoints on the route map:
@@ -262,7 +262,7 @@ Feature: Verify a route from A to B
 
   @Routing
   Scenario Outline: Verify  Ford Gate at CRAMPOOR ROAD(ROMSEY-Southampton)
-   Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
+    Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
       | pointA             | pointB              |
       | 50.78222,-1.059975 | 50.779123,-1.080019 |
     Then I should be able to verify the waypoints on the route map:
@@ -275,7 +275,7 @@ Feature: Verify a route from A to B
 
   @Routing @WebOnly
   Scenario Outline: Verify  Route using Full UK Address (Southampton to London)
-   Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
+    Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
       | pointA                                                            | pointB                                 |
       | ORDNANCE SURVEY, 4, ADANAC DRIVE, NURSLING, SOUTHAMPTON, SO16 0AS | 1, PICCADILLY ARCADE, LONDON, SW1Y 6NH |
     Then I should be able to verify the waypoints on the route map:
@@ -289,7 +289,7 @@ Feature: Verify a route from A to B
 
   @Routing @WebOnly
   Scenario Outline: Verify  Route using Full UK Address (Hounslow to Slough)
-   Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
+    Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
       | pointA                              | pointB                                      |
       | 131, TIVOLI ROAD, HOUNSLOW, TW4 6AS | 40, CHILTERN ROAD, BURNHAM, SLOUGH, SL1 7NH |
     Then I should be able to verify the waypoints on the route map:
@@ -303,7 +303,7 @@ Feature: Verify a route from A to B
 
   @Routing @WebOnly
   Scenario Outline: Verify  Route using Full UK Address (Southampton to London)
-   Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
+    Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
       | pointA                                                     | pointB                                              |
       | SOUTHAMPTON MEGABOWL, AUCKLAND ROAD, SOUTHAMPTON, SO15 0SD | CANARY WHARF LTD, 1, CANADA SQUARE, LONDON, E14 5AB |
     Then I should be able to verify the waypoints on the route map:
@@ -317,7 +317,7 @@ Feature: Verify a route from A to B
 
   @Routing @WebOnly
   Scenario Outline: Verify  Route using Full UK Address (Birmingham to reading)
-   Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
+    Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
       | pointA                                                      | pointB                                                                                |
       | BIRMINGHAM VOLKSWAGEN, LAWLEY MIDDLEWAY, BIRMINGHAM, B4 7XH | READING ENTERPRISE CENTRE, UNIVERSITY OF READING, WHITEKNIGHTS ROAD, READING, RG6 6BU |
     Then I should be able to verify the waypoints on the route map:
@@ -331,7 +331,7 @@ Feature: Verify a route from A to B
 
   @Routing @WebOnly
   Scenario Outline: Verify  Route using Full UK Address (Southhampton to London)
-   Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
+    Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
       | pointA                                               | pointB                           |
       | 6, CHANNEL WAY, OCEAN VILLAGE, SOUTHAMPTON, SO14 3TG | 311, CITY ROAD, LONDON, EC1V 1LA |
     Then I should be able to verify the waypoints on the route map:
@@ -345,7 +345,7 @@ Feature: Verify a route from A to B
 
   @Routing @WebOnly
   Scenario Outline: Verify  Route using Full UK Address (Coventry)
-   Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
+    Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
       | pointA                                                         | pointB                              |
       | 3 BROMLEIGH VILLAS, COVENTRY ROAD, BAGINTON, COVENTRY, CV8 3AS | 2, PAXMEAD CLOSE, COVENTRY, CV6 2NJ |
     Then I should be able to verify the waypoints on the route map:
@@ -360,7 +360,7 @@ Feature: Verify a route from A to B
 
   @Routing @WebOnly
   Scenario Outline: Verify  Route using Full UK Address (Kington to London )
-   Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
+    Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
       | pointA                           | pointB                                |
       | 5, OXFORD LANE, KINGTON, HR5 3ED | 64, TOWER MILL ROAD, LONDON, SE15 6BZ |
     Then I should be able to verify the waypoints on the route map:
@@ -374,7 +374,7 @@ Feature: Verify a route from A to B
 
   @Routing
   Scenario Outline: Verify a Roundabout(Charles Watts Way)
-   Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
+    Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
       | pointA             | pointB              |
       | 50.915416,-1.31902 | 50.915551,-1.294049 |
     Then I should be able to verify the waypoints on the route map:
@@ -387,7 +387,7 @@ Feature: Verify a route from A to B
 
   @Routing
   Scenario Outline: Verify a Roundabout(A30)
-   Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
+    Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
       | pointA              | pointB             |
       | 50.729071,-3.732732 | 50.72813,-3.730887 |
     Then I should be able to verify the waypoints on the route map:
@@ -400,7 +400,7 @@ Feature: Verify a route from A to B
 
   @Routing
   Scenario Outline: Verify a Roundabout(The City Of Edinburgh By-pass)
-   Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
+    Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
       | pointA              | pointB              |
       | 55.913061,-3.060099 | 55.924345,-3.053462 |
     Then I should be able to verify the waypoints on the route map:
@@ -412,7 +412,7 @@ Feature: Verify a route from A to B
       | car          |            |
 
   Scenario Outline: Verify  Route using one intermediate waypoint (Hounslow to Reading via Staines )
-   Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
+    Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
       | pointA                                 | pointB              | pointC                                 |
       | 51.471546541834144,-0.3618621826171875 | 51.433882,-0.537904 | 51.45914115860512,-0.96679687499999995 |
     Then I should be able to verify the waypoints on the route map:
@@ -427,7 +427,7 @@ Feature: Verify a route from A to B
 
   @Routing
   Scenario Outline: Verify  Route using one intermediate waypoint (Wentworth to Ascot via Windsor Park )
-   Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
+    Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
       | pointA              | pointB              | pointC             |
       | 51.409426,-0.591727 | 51.407904,-0.617237 | 51.41855,-0.672385 |
     Then I should be able to verify the waypoints on the route map:
@@ -442,7 +442,7 @@ Feature: Verify a route from A to B
 
   @Routing
   Scenario Outline: Verify  Route using one intermediate waypoint ( Chelsea to Winchester via Windlesham)
-   Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
+    Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
       | pointA             | pointB             | pointC              |
       | 51.48676,-0.170426 | 51.36166,-0.645979 | 51.070889,-1.315293 |
     Then I should be able to verify the waypoints on the route map:
@@ -457,7 +457,7 @@ Feature: Verify a route from A to B
 
   @Routing
   Scenario Outline: Verify  Route using 2 intermediate waypoints (Hounslow to Reading via Staines and Bracknell )
-   Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
+    Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
       | pointA                                 | pointB              | pointC                                 | pointD              |
       | 51.471546541834144,-0.3618621826171875 | 51.414152,-0.747504 | 51.45914115860512,-0.96679687499999995 | 51.433882,-0.537904 |
     Then I should be able to verify the waypoints on the route map:
@@ -474,7 +474,7 @@ Feature: Verify a route from A to B
 
   @Routing
   Scenario Outline: Verify  Route using 2 intermediate waypoints (Oxford to Eaton via Warwick and Cambridge )
-   Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
+    Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
       | pointA              | pointB              | pointC             | pointD              |
       | 51.746075,-1.263972 | 52.289962,-1.604752 | 52.202814,0.051429 | 51.491412,-0.610276 |
     Then I should be able to verify the waypoints on the route map:
@@ -490,7 +490,7 @@ Feature: Verify a route from A to B
 
   @Routing
   Scenario Outline: Verify  Route using 2 intermediate waypoints (Perth to Edinburgh via Stirling and Glasgow )
-   Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
+    Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
       | pointA             | pointB              | pointC              | pointD              |
       | 56.38721,-3.466273 | 56.136656,-3.970408 | 55.871665,-4.195067 | 55.950467,-3.208924 |
     Then I should be able to verify the waypoints on the route map:
@@ -526,7 +526,7 @@ Feature: Verify a route from A to B
   # Fastest and Shortest Route Scenarios
   @Routing
   Scenario Outline: Verify  waypoints on a Route from Hounslow to Reading
-   Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
+    Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
       | pointA                                 | pointB                                 |
       | 51.471546541834144,-0.3618621826171875 | 51.45914115860512,-0.96679687499999995 |
     Then I should be able to verify the waypoints on the route map:
@@ -542,7 +542,7 @@ Feature: Verify a route from A to B
 
   @Routing
   Scenario Outline: Verify  waypoints on a Route from Hounslow to Reading
-   Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
+    Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
       | pointA                                 | pointB                                 |
       | 51.471546541834144,-0.3618621826171875 | 51.45914115860512,-0.96679687499999995 |
     Then I should be able to verify the waypoints on the route map:
@@ -557,7 +557,7 @@ Feature: Verify a route from A to B
 
   @Routing
   Scenario Outline: Verify  waypoints on a Route from London to Liverpool
-   Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
+    Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
       | pointA              | pointB              |
       | 53.432923,-2.971511 | 51.505165,-0.147902 |
     Then I should be able to verify the waypoints on the route map:
@@ -571,7 +571,7 @@ Feature: Verify a route from A to B
 
   @Routing
   Scenario Outline: Verify  waypoints on a Route from London to Liverpool
-   Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
+    Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
       | pointA              | pointB              |
       | 53.432923,-2.971511 | 51.505165,-0.147902 |
     Then I should be able to verify the waypoints on the route map:
@@ -586,7 +586,7 @@ Feature: Verify a route from A to B
 
   @Routing
   Scenario Outline: Verify  waypoints on a Route in Isle of Wight
-   Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
+    Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
       | pointA             | pointB              |
       | 50.690318,-1.38526 | 50.664175,-1.358463 |
     Then I should be able to verify the waypoints on the route map:
@@ -600,7 +600,7 @@ Feature: Verify a route from A to B
 
   @Routing
   Scenario Outline: Verify  waypoints on a Route in Isle of Wight
-   Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
+    Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
       | pointA             | pointB              |
       | 50.690318,-1.38526 | 50.664175,-1.358463 |
     Then I should be able to verify the waypoints on the route map:
@@ -614,7 +614,7 @@ Feature: Verify a route from A to B
 
   @Routing
   Scenario Outline: Verify  waypoints on a Route  from Stronchullin to Admore
-   Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
+    Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
       | pointA              | pointB              |
       | 56.025277,-4.917874 | 55.992355,-4.636534 |
     Then I should be able to verify the waypoints on the route map:
@@ -628,7 +628,7 @@ Feature: Verify a route from A to B
 
   @Routing
   Scenario Outline: Verify  waypoints on a Route from Stronchullin to Admore
-   Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
+    Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
       | pointA              | pointB              |
       | 56.025277,-4.917874 | 55.992355,-4.636534 |
     Then I should be able to verify the waypoints on the route map:
@@ -642,7 +642,7 @@ Feature: Verify a route from A to B
 
   @Routing
   Scenario Outline: Verify  waypoints on a Route from Swansea to Bath
-   Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
+    Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
       | pointA              | pointB              |
       | 51.630586,-3.943108 | 51.386345,-2.344899 |
     Then I should be able to verify the waypoints on the route map:
@@ -656,7 +656,7 @@ Feature: Verify a route from A to B
 
   @Routing
   Scenario Outline: Verify  waypoints on a Route from Swansea to Bath
-   Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
+    Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
       | pointA              | pointB              |
       | 51.630586,-3.943108 | 51.386345,-2.344899 |
     Then I should be able to verify the waypoints on the route map:
@@ -670,7 +670,7 @@ Feature: Verify a route from A to B
 
   @Routing
   Scenario Outline: Verify  waypoints on a Route from Turbo to Plymouth
-   Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
+    Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
       | pointA              | pointB              |
       | 50.270096,-5.052681 | 50.399429,-4.132644 |
     Then I should be able to verify the waypoints on the route map:
@@ -684,7 +684,7 @@ Feature: Verify a route from A to B
 
   @Routing
   Scenario Outline: Verify  waypoints on a Route from Turbo to Plymouth
-   Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
+    Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
       | pointA              | pointB              |
       | 50.270096,-5.052681 | 50.399429,-4.132644 |
     Then I should be able to verify the waypoints on the route map:
@@ -698,7 +698,7 @@ Feature: Verify a route from A to B
 
   @Routing
   Scenario Outline: Verify  Route using 2 intermediate waypoints (Perth to Edinburgh via Stirling and Glasgow )
-   Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
+    Given I request a route between points with "<routeOptions>" from RoutingAPI and avoid "<avoidances>"
       | pointA              | pointB              | pointC             | pointD              |
       | 51.746075,-1.263972 | 52.289962,-1.604752 | 52.202814,0.051429 | 51.491412,-0.610276 |
     Then I should be able to verify the waypoints on the route map:
diff --git a/acceptancetesting/src/test/resources/test-ci-exeter.properties b/acceptancetesting/src/test/resources/test-ci-exeter.properties
index 5f56259118..99dfbace53 100644
--- a/acceptancetesting/src/test/resources/test-ci-exeter.properties
+++ b/acceptancetesting/src/test/resources/test-ci-exeter.properties
@@ -2,7 +2,8 @@
 graphHopperWebUrlViaApigee=
 graphHopperWebUrl=http://ite-vehicle-routing.elasticbeanstalk.com/
 
-webDriverHubUrl=http://ND28350.ordsvy.gov.uk:5555/wd/hub
+#webDriverHubUrl=http://ND28350.ordsvy.gov.uk:5555/wd/hub
+webDriverHubUrl=http://ND27983.ordsvy.gov.uk:5555/wd/hub
 #testON=Web,Service  // Default both
 testON=Service
 traceEnabled=false
