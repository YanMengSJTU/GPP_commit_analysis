diff --git a/core/src/main/java/com/graphhopper/BlockWeighting.java b/core/src/main/java/com/graphhopper/BlockWeighting.java
new file mode 100644
index 0000000000..7a0fd95d21
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/BlockWeighting.java
@@ -0,0 +1,95 @@
+/*
+ *  Licensed to GraphHopper and Peter Karich under one or more contributor
+ *  license agreements. See the NOTICE file distributed with this work for 
+ *  additional information regarding copyright ownership.
+ * 
+ *  GraphHopper licenses this file to you under the Apache License, 
+ *  Version 2.0 (the "License"); you may not use this file except in 
+ *  compliance with the License. You may obtain a copy of the License at
+ * 
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+
+/*
+ * A client for using the GraphHopper package in many instances for time 
+ * paramterized queries.
+ * 
+ * Chris Sullivan csully@bu.edu
+ * Shiran Sukumar shiran@bu.edu
+ *
+ * Sources:
+ * https://github.com/graphhopper/graphhopper/blob/master/docs/core/low-level-api.md
+ */
+
+
+import com.graphhopper.GraphHopper;
+import com.graphhopper.reader.DataReader;
+import com.graphhopper.reader.OSMReader;
+import com.graphhopper.reader.dem.CGIARProvider;
+import com.graphhopper.reader.dem.ElevationProvider;
+import com.graphhopper.reader.dem.SRTMProvider;
+import com.graphhopper.routing.Path;
+import com.graphhopper.routing.RoutingAlgorithm;
+import com.graphhopper.routing.ch.PrepareContractionHierarchies;
+import com.graphhopper.routing.util.*;
+import com.graphhopper.storage.*;
+import com.graphhopper.storage.index.*;
+import com.graphhopper.util.*;
+import com.graphhopper.util.shapes.GHPoint;
+import com.graphhopper.util.FlagEncoder;
+
+
+import java.io.File;
+import java.io.IOException;
+import java.text.SimpleDateFormat;
+import java.util.*;
+import java.util.concurrent.atomic.AtomicLong;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+
+class BlockingWeighting implements Weighting 
+{
+    private final FlagEncoder encoder;
+    private Set<Integer> trafficEdges = new Set<Integer>();
+    private Map<Integer, Double> speeds = new Map<Integer, Double>();
+
+    public BlockingWeighting( FlagEncoder encoder)
+    {
+        this.encoder = encoder;
+
+    }
+
+    public void setSpeed(int edge, Double speed){
+	this.speeds.put(edge,speeds);
+	this.trafficEdges.put(edge);
+    }
+
+    @Override
+    public double getMinWeight( double distance )
+    {
+        return distance / maxSpeed;
+    }
+
+    @Override
+    public double calcWeight( EdgeIteratorState edgeState, boolean reverse, int prevOrNextEdgeId )
+    {
+	if(trafficEdges.contains(edgeState.getEdge())){
+	    double speed = speeds.get(edgeState.getEdge());
+	    return edgeState.getDistance() / speed;
+	}
+    }
+
+    @Override
+    public String toString()
+    {
+        return "BLOCKING";
+    }
+}
diff --git a/core/src/main/java/com/graphhopper/MyGraphHopper.java b/core/src/main/java/com/graphhopper/MyGraphHopper.java
new file mode 100644
index 0000000000..780ce03a56
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/MyGraphHopper.java
@@ -0,0 +1,66 @@
+/*
+ *  Licensed to GraphHopper and Peter Karich under one or more contributor
+ *  license agreements. See the NOTICE file distributed with this work for 
+ *  additional information regarding copyright ownership.
+ * 
+ *  GraphHopper licenses this file to you under the Apache License, 
+ *  Version 2.0 (the "License"); you may not use this file except in 
+ *  compliance with the License. You may obtain a copy of the License at
+ * 
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+
+/*
+ * A client for using the GraphHopper package in many instances for time 
+ * paramterized queries.
+ * 
+ * Chris Sullivan csully@bu.edu
+ * Shiran Sukumar shiran@bu.edu
+ *
+ * Sources:
+ * https://github.com/graphhopper/graphhopper/blob/master/docs/core/low-level-api.md
+ */
+
+
+import com.graphhopper.GraphHopper;
+import com.graphhopper.reader.DataReader;
+import com.graphhopper.reader.OSMReader;
+import com.graphhopper.reader.dem.CGIARProvider;
+import com.graphhopper.reader.dem.ElevationProvider;
+import com.graphhopper.reader.dem.SRTMProvider;
+import com.graphhopper.routing.Path;
+import com.graphhopper.routing.RoutingAlgorithm;
+import com.graphhopper.routing.ch.PrepareContractionHierarchies;
+import com.graphhopper.routing.util.*;
+import com.graphhopper.storage.*;
+import com.graphhopper.storage.index.*;
+import com.graphhopper.util.*;
+import com.graphhopper.util.shapes.GHPoint;
+import com.graphhopper.util.FlagEncoder;
+
+
+import java.io.File;
+import java.io.IOException;
+import java.text.SimpleDateFormat;
+import java.util.*;
+import java.util.concurrent.atomic.AtomicLong;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+public class MyGraphHopper extends GraphHopper{
+
+    @Override
+    public Weighting createWeighting( WeightingMap wMap, FlagEncoder encoder)
+    {
+	return new BlockingWeighting(encoder);
+    }
+}
+}
+
diff --git a/core/src/main/java/com/graphhopper/TrafficClient.java b/core/src/main/java/com/graphhopper/TrafficClient.java
index c10717e2e8..9b0ac77380 100644
--- a/core/src/main/java/com/graphhopper/TrafficClient.java
+++ b/core/src/main/java/com/graphhopper/TrafficClient.java
@@ -15,6 +15,19 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
+
+/*
+ * A client for using the GraphHopper package in many instances for time 
+ * paramterized queries.
+ * 
+ * Chris Sullivan csully@bu.edu
+ * Shiran Sukumar shiran@bu.edu
+ *
+ * Sources:
+ * https://github.com/graphhopper/graphhopper/blob/master/docs/core/low-level-api.md
+ */
+
+
 import com.graphhopper.GraphHopper;
 import com.graphhopper.reader.DataReader;
 import com.graphhopper.reader.OSMReader;
@@ -29,6 +42,8 @@
 import com.graphhopper.storage.index.*;
 import com.graphhopper.util.*;
 import com.graphhopper.util.shapes.GHPoint;
+import com.graphhopper.util.FlagEncoder;
+
 
 import java.io.File;
 import java.io.IOException;
@@ -42,39 +57,111 @@
 
 public class TrafficClient{
 
-    public static void answerQuery(GraphHopper g, String[] args){
+    public static void answerQuery(GraphHopper g, String outName){
 	Scanner input = new Scanner(System.in);
 	System.out.print("Enter the longtitude and latitude of your " + 
 			 "source separated by commas (long,lat): ");
 	String src = input.nextLine();
-
 	System.out.print("Enter the longtitude and latitude of your" + 
 			 "destination separated by commas (long,lat): ");
-	
 	String dest = input.nextline();
+	input.close();
+
+	String[] tups = src.split(",");
+	String[] desttups = dest.split(",");
 	
+	Double srclong = Double.parseDouble(tups[0].trim());
+	Double srclat =  Double.parseDouble(tups[1].trim());
+
+	Double destlong = Double.parseDouble(tups[0].trim());
+	Double destlat =  Double.parseDouble(tups[1].trim());
+
+
+
+	LocationIndex i = g.getLocationIndex();
+	GraphStorage graph = g.getGraph();
+	FlagEncoder encoder = new CarFlagEncoder();
+
+	QueryResult fromQR = i.findClosest(srclat,srclong, EdgeFilter.All_EDGES);
+	QueryResult toQR = i.findID(destlat,destlong, EdgeFilter.All_EDGES);
+
+	Path path = new Dijkstra(graph,encoder).calcPath(fromQR,toQR);
 	
+	FileOutputStream f = new FileOutputStream(new File(outName));
+	String out = path.toDetailString();
+	f.write(out.getBytes());
+	f.close();
 	    
     }
+
+    public static String getTime(){
+	Scanner input = new Scanner(System.in);
+	System.out.print("What time will you be traveling? " + 
+			 "Enter a valid hour on 24 hr clock: ");
+	
+	return input.nextLine().trim();
+    }
     
+    public static String getHash(String filename){
+	String ret = filename.substring(11,13);
+	return ret;
+    }
     
+    public static void addWeights(MyGraphHopper g, String filename){
+	File f = new File(filename);
+	String headers = f.readLine();
+	BlockWeighting weights = g.createWeighting(new CarFlagEncoder());
+	while(f.hasNextLine()){
+
+	    String line = f.readLine();
+	    String[] args = line.split("\t");
+	    Double speed = Double.parseDouble(args[1].replace("\"",""));
+	    String[] links = args[6].replace("\"","").split();
+	    Double[] longs = new Double[links.length()];
+	    Double[] lats = new Double[links.length()];
+
+	    for (int i = 0; i < links.length(); i++){
+		String[] coords = links[i].split(",");
+		lats[i] = Double.parseDouble(coords[0].trim());
+		longs[i] = Double.parseDouble(coords[1].trim());
+	    }
+	    LocationIndex i = g.getLocationIndex();
+	    GraphStorage graph = g.getGraph();
+	    
+	    QueryResult fromQR = i.findClosest(lats[0],longs[0], EdgeFilter.All_EDGES);
+	    QueryResult toQR = i.findID(lats[lats.length - 2],longs[longs.length - 2], EdgeFilter.All_EDGES);
+	    
+	    EdgeIteratorState src = fromQR.getClosestEdge();
+	    EdgeIteratorState dest = toQR.getClosestEdge();
+	    
+	    weights.setSpeed(src.getEdge(),speed);
+	    weights.setSpeed(dest.getEdge(),speed);
+					     
+	}
+    }
+
+
     public static void main(String[] args){
 	
 	Map<String, GraphHopper> db = new HashMap<String, GraphHopper>();
 	
 	File dir = new File("./traffic/data/");
 	String[] trafficFiles = dir.list();
+
 	for(String time : trafficFiles){
-	    String graphHopperName = time.replace(".txt");
-	    GraphHopper g = new GraphHopper();
+	    String graphHopperName = getHash(time);
+	    GraphHopper g = new MyGraphHopper();
 	    CmdArgs a = new CmdArgs();
 	    g.init(a.read(args));
+	    addWeights(g,time);
 	    //code to add weights from file parsing goes here
 	    
-	    db.put(g);
+	    db.put(graphHopperName,g);
 	}
 	
 	while(true){
+	    String time = getTime();
+	    GraphHopper g = db.get(time);
 	    answerQuery(db)
 	}
 }
