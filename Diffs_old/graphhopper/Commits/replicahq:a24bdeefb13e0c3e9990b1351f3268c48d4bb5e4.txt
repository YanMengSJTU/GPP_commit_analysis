diff --git a/core/src/main/java/com/graphhopper/routing/QueryGraph.java b/core/src/main/java/com/graphhopper/routing/QueryGraph.java
index 73068c8cf5..a05b15078a 100644
--- a/core/src/main/java/com/graphhopper/routing/QueryGraph.java
+++ b/core/src/main/java/com/graphhopper/routing/QueryGraph.java
@@ -412,9 +412,9 @@ private void createEdges(int origTraversalKey, int origRevTraversalKey,
 
         // edges between base and snapped point
         VirtualEdgeIteratorState baseEdge = new VirtualEdgeIteratorState(origTraversalKey,
-                virtEdgeId, prevNodeId, nodeId, baseDistance, closestEdge.getStableId(), closestEdge.getFlags(), closestEdge.getName(), basePoints);
+                virtEdgeId, prevNodeId, nodeId, baseDistance, closestEdge.getFlags(), closestEdge.getName(), basePoints);
         VirtualEdgeIteratorState baseReverseEdge = new VirtualEdgeIteratorState(origRevTraversalKey,
-                virtEdgeId, nodeId, prevNodeId, baseDistance, closestEdge.getStableId(), reverseFlags, closestEdge.getName(), baseReversePoints);
+                virtEdgeId, nodeId, prevNodeId, baseDistance, reverseFlags, closestEdge.getName(), baseReversePoints);
         baseEdge.setReverseEdge(baseReverseEdge);
         baseReverseEdge.setReverseEdge(baseEdge);
         virtualEdges.add(baseEdge);
diff --git a/core/src/main/java/com/graphhopper/routing/VirtualEdgeIterator.java b/core/src/main/java/com/graphhopper/routing/VirtualEdgeIterator.java
index 9eee349c42..e5701b33a2 100644
--- a/core/src/main/java/com/graphhopper/routing/VirtualEdgeIterator.java
+++ b/core/src/main/java/com/graphhopper/routing/VirtualEdgeIterator.java
@@ -99,16 +99,6 @@ public EdgeIteratorState setDistance(double dist) {
         return edges.get(current).setDistance(dist);
     }
 
-    @Override
-    public byte[] getStableId() {
-        return edges.get(current).getStableId();
-    }
-
-    @Override
-    public EdgeIteratorState setStableId(byte[] stableId) {
-        return edges.get(current).setStableId(stableId);
-    }
-
     @Override
     public long getFlags() {
         return edges.get(current).getFlags();
diff --git a/core/src/main/java/com/graphhopper/routing/VirtualEdgeIteratorState.java b/core/src/main/java/com/graphhopper/routing/VirtualEdgeIteratorState.java
index 3592b8c4e5..a73aefbad3 100644
--- a/core/src/main/java/com/graphhopper/routing/VirtualEdgeIteratorState.java
+++ b/core/src/main/java/com/graphhopper/routing/VirtualEdgeIteratorState.java
@@ -36,20 +36,18 @@
     private final int adjNode;
     private final int originalTraversalKey;
     private double distance;
-    private byte[] stableId;
     private long flags;
     private String name;
     // indication if edges are dispreferred as start/stop edge 
     private boolean unfavored;
     private EdgeIteratorState reverseEdge;
 
-    public VirtualEdgeIteratorState(int originalTraversalKey, int edgeId, int baseNode, int adjNode, double distance, byte[] stableId, long flags, String name, PointList pointList) {
+    public VirtualEdgeIteratorState(int originalTraversalKey, int edgeId, int baseNode, int adjNode, double distance, long flags, String name, PointList pointList) {
         this.originalTraversalKey = originalTraversalKey;
         this.edgeId = edgeId;
         this.baseNode = baseNode;
         this.adjNode = adjNode;
         this.distance = distance;
-        this.stableId = stableId;
         this.flags = flags;
         this.name = name;
         this.pointList = pointList;
@@ -116,17 +114,6 @@ public EdgeIteratorState setDistance(double dist) {
         return this;
     }
 
-    @Override
-    public byte[] getStableId() {
-        return stableId;
-    }
-
-    @Override
-    public EdgeIteratorState setStableId(byte[] stableId) {
-        this.stableId = stableId;
-        return this;
-    }
-
     @Override
     public long getFlags() {
         return flags;
diff --git a/core/src/main/java/com/graphhopper/storage/BaseGraph.java b/core/src/main/java/com/graphhopper/storage/BaseGraph.java
index 906b2765c9..606491f726 100644
--- a/core/src/main/java/com/graphhopper/storage/BaseGraph.java
+++ b/core/src/main/java/com/graphhopper/storage/BaseGraph.java
@@ -228,7 +228,6 @@ void initStorage() {
                 nextEdgeEntryIndex(4),
                 nextEdgeEntryIndex(4),
                 nextEdgeEntryIndex(4),
-                nextEdgeEntryIndex(16),
                 nextEdgeEntryIndex(encodingManager.getBytesForFlags()),
                 flagsSizeIsLong);
 
@@ -441,7 +440,6 @@ void loadExisting(String dim) {
     EdgeIteratorState copyProperties(CommonEdgeIterator from, EdgeIteratorState to) {
         to.setDistance(from.getDistance()).
                 setName(from.getName()).
-                setStableId(from.getStableId()).
                 setFlags(from.getDirectFlags()).
                 setWayGeometry(from.fetchWayGeometry(0));
 
@@ -1096,23 +1094,12 @@ public final double getDistance() {
             return edgeAccess.getDist(edgePointer);
         }
 
-        @Override
-        public final byte[] getStableId() {
-            return edgeAccess.getStableId(edgePointer);
-        }
-
         @Override
         public final EdgeIteratorState setDistance(double dist) {
             edgeAccess.setDist(edgePointer, dist);
             return this;
         }
 
-        @Override
-        public final EdgeIteratorState setStableId(byte[] stableId) {
-            edgeAccess.setStableId(edgePointer, stableId);
-            return this;
-        }
-
         final long getDirectFlags() {
             if (!freshFlags) {
                 cachedFlags = edgeAccess.getFlags_(edgePointer, reverse);
diff --git a/core/src/main/java/com/graphhopper/storage/CHGraphImpl.java b/core/src/main/java/com/graphhopper/storage/CHGraphImpl.java
index af1756766c..cfb8eb2fdc 100644
--- a/core/src/main/java/com/graphhopper/storage/CHGraphImpl.java
+++ b/core/src/main/java/com/graphhopper/storage/CHGraphImpl.java
@@ -351,7 +351,7 @@ public Graph copyTo(Graph g) {
 
     void initStorage() {
         EdgeAccess ea = baseGraph.edgeAccess;
-        chEdgeAccess.init(ea.E_NODEA, ea.E_NODEB, ea.E_LINKA, ea.E_LINKB, ea.E_DIST, ea.E_STABLE_ID, ea.E_FLAGS, false);
+        chEdgeAccess.init(ea.E_NODEA, ea.E_NODEB, ea.E_LINKA, ea.E_LINKB, ea.E_DIST, ea.E_FLAGS, false);
         // shortcuts
         S_SKIP_EDGE1 = ea.E_FLAGS + 4;
         S_SKIP_EDGE2 = S_SKIP_EDGE1 + 4;
diff --git a/core/src/main/java/com/graphhopper/storage/EdgeAccess.java b/core/src/main/java/com/graphhopper/storage/EdgeAccess.java
index 8a993f32a9..264488d649 100644
--- a/core/src/main/java/com/graphhopper/storage/EdgeAccess.java
+++ b/core/src/main/java/com/graphhopper/storage/EdgeAccess.java
@@ -22,23 +22,17 @@
 import com.graphhopper.util.EdgeIterator;
 import com.graphhopper.util.EdgeIteratorState;
 
-import java.nio.ByteBuffer;
-import java.nio.ByteOrder;
-import javax.xml.bind.DatatypeConverter;
-
 /**
  * @author Peter Karich
  */
 abstract class EdgeAccess {
     static final int NO_NODE = -1;
-    // Size in bytes
-    static final int STABLE_ID_SIZE = 16;
     // distance of around +-1000 000 meter are ok
     private static final double INT_DIST_FACTOR = 1000d;
     static double MAX_DIST = (Integer.MAX_VALUE - 1) / INT_DIST_FACTOR;
     final DataAccess edges;
     private final BitUtil bitUtil;
-    int E_NODEA, E_NODEB, E_LINKA, E_LINKB, E_DIST, E_STABLE_ID, E_FLAGS;
+    int E_NODEA, E_NODEB, E_LINKA, E_LINKB, E_DIST, E_FLAGS;
     private boolean flagsSizeIsLong;
 
     EdgeAccess(DataAccess edges, BitUtil bitUtil) {
@@ -46,14 +40,13 @@
         this.bitUtil = bitUtil;
     }
 
-    final void init(int E_NODEA, int E_NODEB, int E_LINKA, int E_LINKB, int E_DIST, int E_STABLE_ID, int E_FLAGS, boolean flagsSizeIsLong) {
+    final void init(int E_NODEA, int E_NODEB, int E_LINKA, int E_LINKB, int E_DIST, int E_FLAGS, boolean flagsSizeIsLong) {
         this.E_NODEA = E_NODEA;
         this.E_NODEB = E_NODEB;
         this.E_LINKA = E_LINKA;
         this.E_LINKB = E_LINKB;
         this.E_DIST = E_DIST;
         this.E_FLAGS = E_FLAGS;
-        this.E_STABLE_ID = E_STABLE_ID;
         this.flagsSizeIsLong = flagsSizeIsLong;
     }
 
@@ -79,30 +72,6 @@ final void setDist(long edgePointer, double distance) {
         edges.setInt(edgePointer + E_DIST, distToInt(distance));
     }
 
-    final void setStableId(long edgePointer, byte[] stableId) {
-        if (stableId.length > STABLE_ID_SIZE || stableId.length < STABLE_ID_SIZE)
-            throw new IllegalArgumentException("stable ID must be 16 bytes: " + DatatypeConverter.printHexBinary(stableId));
-
-        edges.setInt(edgePointer + E_STABLE_ID, bitUtil.toInt(stableId, 0));
-        edges.setInt(edgePointer + E_STABLE_ID + 4, bitUtil.toInt(stableId, 4));
-        edges.setInt(edgePointer + E_STABLE_ID + 8, bitUtil.toInt(stableId, 8));
-        edges.setInt(edgePointer + E_STABLE_ID + 12, bitUtil.toInt(stableId, 12));
-    }
-
-    /**
-     * Returns edge's stable id (MD5 hash as byte array)
-     */
-    final byte[] getStableId(long pointer) {
-        int idPt1 = edges.getInt(pointer + E_STABLE_ID);
-        int idPt2 = edges.getInt(pointer + E_STABLE_ID + 4);
-        int idPt3 = edges.getInt(pointer + E_STABLE_ID + 8);
-        int idPt4 = edges.getInt(pointer + E_STABLE_ID + 12);
-        int[] edgeInts = new int[] {idPt1, idPt2, idPt3, idPt4};
-        byte[] stableId = bitUtil.fromInts(edgeInts);
-
-        return stableId;
-    }
-
     /**
      * Translates double distance to integer in order to save it in a DataAccess object
      */
diff --git a/core/src/main/java/com/graphhopper/util/BitUtil.java b/core/src/main/java/com/graphhopper/util/BitUtil.java
index 7a13f724cd..481f6fb50d 100644
--- a/core/src/main/java/com/graphhopper/util/BitUtil.java
+++ b/core/src/main/java/com/graphhopper/util/BitUtil.java
@@ -112,12 +112,6 @@ public final void fromInt(byte[] bytes, int value) {
         fromInt(bytes, value, 0);
     }
 
-    public final byte[] fromInts(int[] values) {
-        byte[] bytes = new byte[4 * values.length];
-        fromInts(bytes, values);
-        return bytes;
-    }
-
     public final byte[] fromShort(short value) {
         byte[] bytes = new byte[4];
         fromShort(bytes, value, 0);
@@ -132,8 +126,6 @@ public final void fromShort(byte[] bytes, short value) {
 
     public abstract void fromInt(byte[] bytes, int value, int offset);
 
-    public abstract void fromInts(byte[] bytes, int[] values);
-
     public final long toLong(byte[] b) {
         return toLong(b, 0);
     }
diff --git a/core/src/main/java/com/graphhopper/util/BitUtilBig.java b/core/src/main/java/com/graphhopper/util/BitUtilBig.java
index 052fb9fd4f..7d77f3b74c 100644
--- a/core/src/main/java/com/graphhopper/util/BitUtilBig.java
+++ b/core/src/main/java/com/graphhopper/util/BitUtilBig.java
@@ -52,16 +52,6 @@ public final void fromInt(byte[] bytes, int value, int offset) {
         bytes[++offset] = (byte) (value);
     }
 
-    @Override
-    public final void fromInts(byte[] bytes, int[] values) {
-        int offset = 0;
-        
-        for(int i=values.length - 1; i >= 0; i--){
-            fromInt(bytes, values[i], offset);
-            offset += 4;
-        }
-    }
-
     @Override
     public final long toLong(int int0, int int1) {
         return ((long) int0 << 32) | (int1 & 0xFFFFFFFFL);
diff --git a/core/src/main/java/com/graphhopper/util/BitUtilLittle.java b/core/src/main/java/com/graphhopper/util/BitUtilLittle.java
index 9fe815be77..5454972792 100644
--- a/core/src/main/java/com/graphhopper/util/BitUtilLittle.java
+++ b/core/src/main/java/com/graphhopper/util/BitUtilLittle.java
@@ -52,16 +52,6 @@ public final void fromInt(byte[] bytes, int value, int offset) {
         bytes[offset] = (byte) (value);
     }
 
-    @Override
-    public final void fromInts(byte[] bytes, int[] values) {
-        int offset = 0;
-        
-        for(int i=0; i < values.length; i++){
-            fromInt(bytes, values[i], offset);
-            offset += 4;
-        }
-    }
-
     @Override
     public final long toLong(int int0, int int1) {
         return ((long) int1 << 32) | (int0 & 0xFFFFFFFFL);
diff --git a/core/src/main/java/com/graphhopper/util/EdgeIteratorState.java b/core/src/main/java/com/graphhopper/util/EdgeIteratorState.java
index f585a3efd8..e6aad36139 100644
--- a/core/src/main/java/com/graphhopper/util/EdgeIteratorState.java
+++ b/core/src/main/java/com/graphhopper/util/EdgeIteratorState.java
@@ -36,10 +36,6 @@
      */
     int getEdge();
 
-    byte[] getStableId();
-
-    EdgeIteratorState setStableId(byte[] stableId);
-
     /**
      * Returns the node used to instantiate the EdgeIterator. Example: "EdgeIterator iter =
      * graph.getEdges(baseNode)". Often only used for convenience reasons. Do not confuse this with
diff --git a/core/src/main/java/com/graphhopper/util/GHUtility.java b/core/src/main/java/com/graphhopper/util/GHUtility.java
index 32f9aed0ea..a8c26cdaa9 100644
--- a/core/src/main/java/com/graphhopper/util/GHUtility.java
+++ b/core/src/main/java/com/graphhopper/util/GHUtility.java
@@ -385,16 +385,6 @@ public int getEdge() {
             throw new UnsupportedOperationException("Not supported. Edge is empty.");
         }
 
-        @Override
-        public byte[] getStableId() {
-            throw new UnsupportedOperationException("Not supported. Edge is empty.");
-        }
-
-        @Override
-        public EdgeIteratorState setStableId(byte[] stableId) {
-            throw new UnsupportedOperationException("Not supported. Edge is empty.");
-        }
-
         @Override
         public int getBaseNode() {
             throw new UnsupportedOperationException("Not supported. Edge is empty.");
diff --git a/core/src/test/java/com/graphhopper/routing/weighting/FastestWeightingTest.java b/core/src/test/java/com/graphhopper/routing/weighting/FastestWeightingTest.java
index bdb000bbe3..d66bbb1f3f 100644
--- a/core/src/test/java/com/graphhopper/routing/weighting/FastestWeightingTest.java
+++ b/core/src/test/java/com/graphhopper/routing/weighting/FastestWeightingTest.java
@@ -52,7 +52,7 @@ public void testMinWeightHasSameUnitAs_getWeight() {
     public void testWeightWrongHeading() {
         Weighting instance = new FastestWeighting(encoder, new PMap().
                 put(Parameters.Routing.HEADING_PENALTY, "100"));
-        VirtualEdgeIteratorState virtEdge = new VirtualEdgeIteratorState(0, 1, 1, 2, 10, new byte[] {1, 6, 3},
+        VirtualEdgeIteratorState virtEdge = new VirtualEdgeIteratorState(0, 1, 1, 2, 10,
                 encoder.setProperties(10, true, true), "test", Helper.createPointList(51, 0, 51, 1));
         double time = instance.calcWeight(virtEdge, false, 0);
 
diff --git a/core/src/test/java/com/graphhopper/storage/AbstractGraphStorageTester.java b/core/src/test/java/com/graphhopper/storage/AbstractGraphStorageTester.java
index d3bb2282cc..8999fc144d 100644
--- a/core/src/test/java/com/graphhopper/storage/AbstractGraphStorageTester.java
+++ b/core/src/test/java/com/graphhopper/storage/AbstractGraphStorageTester.java
@@ -30,7 +30,6 @@
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
-import javax.xml.bind.DatatypeConverter;
 
 import static com.graphhopper.util.GHUtility.count;
 import static org.junit.Assert.*;
@@ -282,15 +281,12 @@ public void testClone() {
     @Test
     public void testCopyProperties() {
         graph = createGHStorage();
-        String hexId = "3A713CD2B79EF7000EB13E5CAB455f78";
-        byte[] stableId = DatatypeConverter.parseHexBinary(hexId);
-        EdgeIteratorState edge = graph.edge(1, 3, 10, false).setStableId(stableId).setName("testing").setWayGeometry(Helper.createPointList(1, 2));
+        EdgeIteratorState edge = graph.edge(1, 3, 10, false).setName("testing").setWayGeometry(Helper.createPointList(1, 2));
 
         EdgeIteratorState newEdge = graph.edge(1, 3, 10, false);
         edge.copyPropertiesTo(newEdge);
         assertEquals(edge.getName(), newEdge.getName());
         assertEquals(edge.getDistance(), newEdge.getDistance(), 1e-7);
-        assertArrayEquals(edge.getStableId(), newEdge.getStableId());
         assertEquals(edge.getFlags(), newEdge.getFlags());
         assertEquals(edge.fetchWayGeometry(0), newEdge.fetchWayGeometry(0));
     }
@@ -966,35 +962,6 @@ public void testNameIndex() {
         assertEquals("named street2", graph.getEdgeIteratorState(iter2.getEdge(), iter2.getAdjNode()).getName());
     }
 
-    @Test
-    public void testStableId() {
-        Directory dir = new RAMDirectory();
-        String hexId = "3A713CD2B79EF7000EB13E5CAB455f78";
-        List<FlagEncoder> list = new ArrayList<FlagEncoder>();
-        list.add(new TmpCarFlagEncoder(29, 0.001, 0) {
-            @Override
-            public String toString() {
-                return "car2";
-            }
-        });
-        list.add(new TmpCarFlagEncoder(29, 0.001, 0));
-        EncodingManager manager = new EncodingManager(list, 8);
-        graph = new GraphHopperStorage(dir, manager, false, new GraphExtension.NoOpExtension()).create(defaultSize);
-        byte[] expStableId = DatatypeConverter.parseHexBinary(hexId);
-        EdgeIteratorState edge = graph.edge(0, 1);
-        edge.setStableId(expStableId);
-        assertEquals(16, edge.getStableId().length);
-        graph.close();
-
-        graph = new GraphHopperStorage(dir, manager, false, new GraphExtension.NoOpExtension()).create(defaultSize);
-
-        edge = graph.edge(0, 1);
-        edge.setStableId(expStableId);
-        EdgeIteratorState edgeIter = GHUtility.getEdge(graph, 1, 0);
-        byte[] stableId = edgeIter.getStableId();
-        assertArrayEquals(expStableId, stableId);
-    }
-
     @Test
     public void test8BytesFlags() {
         Directory dir = new RAMDirectory();
diff --git a/reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/GraphExplorer.java b/reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/GraphExplorer.java
index 05aa413bd9..a9cef56421 100644
--- a/reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/GraphExplorer.java
+++ b/reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/GraphExplorer.java
@@ -67,7 +67,7 @@
                 throw new RuntimeException();
             }
             extraEdgesBySource.put(extraEdge.getBaseNode(), extraEdge);
-            extraEdgesByDestination.put(extraEdge.getAdjNode(), new VirtualEdgeIteratorState(extraEdge.getOriginalTraversalKey(), extraEdge.getEdge(), extraEdge.getAdjNode(), extraEdge.getBaseNode(), extraEdge.getDistance(), extraEdge.getStableId(), extraEdge.getFlags(), extraEdge.getName(), extraEdge.fetchWayGeometry(3)));
+            extraEdgesByDestination.put(extraEdge.getAdjNode(), new VirtualEdgeIteratorState(extraEdge.getOriginalTraversalKey(), extraEdge.getEdge(), extraEdge.getAdjNode(), extraEdge.getBaseNode(), extraEdge.getDistance(), extraEdge.getFlags(), extraEdge.getName(), extraEdge.fetchWayGeometry(3)));
         }
         this.walkOnly = walkOnly;
     }
diff --git a/reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/GraphHopperGtfs.java b/reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/GraphHopperGtfs.java
index 91bfc3b9e3..12c41dfa4a 100644
--- a/reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/GraphHopperGtfs.java
+++ b/reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/GraphHopperGtfs.java
@@ -173,9 +173,9 @@ private void substitutePointWithVirtualNode(int index, boolean reverse, GHPoint
                         tripFromLabel.parseSolutionIntoPath(reverse, flagEncoder, translation, graphExplorer, weighting, stationNode.parent, new PointList()) :
                         new PathWrapper();
                 final VirtualEdgeIteratorState newEdge = new VirtualEdgeIteratorState(stationNode.edge,
-                        nextEdgeId++, reverse ? stationNode.adjNode : nextNodeId, reverse ? nextNodeId : stationNode.adjNode, pathWrapper.getDistance(), new byte[0], 0, "", pathWrapper.getPoints());
+                        nextEdgeId++, reverse ? stationNode.adjNode : nextNodeId, reverse ? nextNodeId : stationNode.adjNode, pathWrapper.getDistance(), 0, "", pathWrapper.getPoints());
                 final VirtualEdgeIteratorState reverseNewEdge = new VirtualEdgeIteratorState(stationNode.edge,
-                        nextEdgeId++, reverse ? nextNodeId : stationNode.adjNode, reverse ? stationNode.adjNode : nextNodeId, pathWrapper.getDistance(), new byte[0], 0, "", pathWrapper.getPoints());
+                        nextEdgeId++, reverse ? nextNodeId : stationNode.adjNode, reverse ? stationNode.adjNode : nextNodeId, pathWrapper.getDistance(), 0, "", pathWrapper.getPoints());
                 newEdge.setFlags(((PtFlagEncoder) weighting.getFlagEncoder()).setEdgeType(newEdge.getFlags(), reverse ? GtfsStorage.EdgeType.EXIT_PT : GtfsStorage.EdgeType.ENTER_PT));
                 final long time = pathWrapper.getTime() / 1000;
                 newEdge.setFlags(((PtFlagEncoder) weighting.getFlagEncoder()).setTime(newEdge.getFlags(), time));
diff --git a/reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/GraphSupport.java b/reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/GraphSupport.java
index 5d8d80a510..2bd8f8ce60 100644
--- a/reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/GraphSupport.java
+++ b/reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/GraphSupport.java
@@ -139,17 +139,6 @@ public EdgeIteratorState setDistance(double dist) {
                         return this;
                     }
 
-                    @Override
-                    public byte[] getStableId() {
-                        return edge.getStableId();
-                    }
-
-                    @Override
-                    public EdgeIteratorState setStableId(byte[] stableId) {
-                        edge.setStableId(stableId);
-                        return this;
-                    }
-
                     @Override
                     public long getFlags() {
                         return edge.getFlags();
diff --git a/reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/RealtimeFeed.java b/reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/RealtimeFeed.java
index 2dd9b9c04a..c84b1f310c 100644
--- a/reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/RealtimeFeed.java
+++ b/reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/RealtimeFeed.java
@@ -211,9 +211,9 @@ public EdgeIteratorState edge(int a, int b) {
             public EdgeIteratorState edge(int a, int b, double distance, boolean bothDirections) {
                 int edge = firstEdge++;
                 final VirtualEdgeIteratorState newEdge = new VirtualEdgeIteratorState(-1,
-                        edge, a, b, distance, new byte[0], 0, "", new PointList());
+                        edge, a, b, distance,0, "", new PointList());
                 final VirtualEdgeIteratorState reverseNewEdge = new VirtualEdgeIteratorState(-1,
-                        edge, b, a, distance, new byte[0], 0, "", new PointList());
+                        edge, b, a, distance,0, "", new PointList());
 
                 newEdge.setReverseEdge(reverseNewEdge);
                 reverseNewEdge.setReverseEdge(newEdge);
diff --git a/reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/WrapperGraph.java b/reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/WrapperGraph.java
index 232ca8d17d..3473ed84ae 100644
--- a/reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/WrapperGraph.java
+++ b/reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/WrapperGraph.java
@@ -132,16 +132,6 @@ public EdgeIteratorState setDistance(double dist) {
                 throw new UnsupportedOperationException();
             }
 
-            @Override
-            public byte[] getStableId() {
-                throw new UnsupportedOperationException();
-            }
-
-            @Override
-            public EdgeIteratorState setStableId(byte[] stableId) {
-                throw new UnsupportedOperationException();
-            }
-
             @Override
             public long getFlags() {
                 throw new UnsupportedOperationException();
diff --git a/web/src/main/java/com/graphhopper/swl/R5EdgeIds.java b/web/src/main/java/com/graphhopper/swl/R5EdgeIds.java
index b3a8a65ae7..c7e445da75 100644
--- a/web/src/main/java/com/graphhopper/swl/R5EdgeIds.java
+++ b/web/src/main/java/com/graphhopper/swl/R5EdgeIds.java
@@ -32,7 +32,8 @@ static String getR5EdgeId(OriginalDirectionFlagEncoder originalDirectionFlagEnco
             ghEdgeKey = String.valueOf(GHUtility.getEdgeFromEdgeKey(((VirtualEdgeIteratorState) edge).getOriginalTraversalKey()));
         } else {
             // Convert byte array to hex
-            ghEdgeKey = DatatypeConverter.printHexBinary(edge.getStableId());
+//            ghEdgeKey = DatatypeConverter.printHexBinary(edge.getStableId());
+            return null;
         }
         return ghEdgeKey;
     }
