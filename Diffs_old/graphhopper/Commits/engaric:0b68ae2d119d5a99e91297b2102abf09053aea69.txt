diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperGPXUtil.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperGPXUtil.java
index 7f36e077cb..670c37e25b 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperGPXUtil.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperGPXUtil.java
@@ -107,7 +107,7 @@ public long getTotalRouteTime() {
 
 	public void verifyMessage(String responseMessage) {
 		String actualErrorMessage = parser.getErrorMessage();
-		Assert.assertTrue("actual error message: " + actualErrorMessage
+		Assert.assertTrue("Service :actual error message: " + actualErrorMessage
 				+ "does not match with: " + responseMessage,
 				responseMessage.equalsIgnoreCase(actualErrorMessage));
 
@@ -116,7 +116,7 @@ public void verifyMessage(String responseMessage) {
 	public void verifyStatusCode(int statusCode) {
 
 		int actualstatusCode = parser.getstatusCode();
-		Assert.assertTrue("actual error message: " + actualstatusCode
+		Assert.assertTrue("Service : actual error message: " + actualstatusCode
 				+ "does not match with: " + statusCode,
 				(statusCode == actualstatusCode));
 
diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperJSONUtil.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperJSONUtil.java
index 468acdfd11..17c0b9133c 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperJSONUtil.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperJSONUtil.java
@@ -84,7 +84,7 @@ public long getTotalRouteTime() {
 
 	public void verifyMessage(String responseMessage) {
 		String actualErrorMessage = parser.getErrorMessage();
-		Assert.assertTrue("actual error message:" + actualErrorMessage
+		Assert.assertTrue(" Service : actual error message:" + actualErrorMessage
 				+ " does not match with: " + responseMessage,
 				responseMessage.equalsIgnoreCase(actualErrorMessage));
 
@@ -92,7 +92,7 @@ public void verifyMessage(String responseMessage) {
 
 	public void verifyStatusCode(int statusCode) {
 		int actualStatusCode = parser.getStatusCode();
-		Assert.assertTrue("actual error message: " + actualStatusCode
+		Assert.assertTrue("Service : actual error message: " + actualStatusCode
 				+ " does not match with: " + statusCode,
 				(actualStatusCode == statusCode));
 
diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperComponentIdentification.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperComponentIdentification.java
index aa04c222ba..3d89b8c9b2 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperComponentIdentification.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperComponentIdentification.java
@@ -39,6 +39,7 @@
 	public static final ComponentIdentifier avoidance_Shingle=new ComponentByXPATH("//*[@name='avoidances[]'][@value='shingle']");
 	public static final ComponentIdentifier fastest_RButton=new ComponentByXPATH("//input[@value='fastest']");
 	public static final ComponentIdentifier shortest_RButton=new ComponentByXPATH("//input[@value='shortest']");
+	public static final ComponentIdentifier error_Message= new ComponentByXPATH("//*[@class='error']");
 	
 	
 }
diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
index 9718f8f373..41009a4bb7 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
@@ -50,13 +50,13 @@ public void overrideTestONPropertyToWeb() {
 
 	}
 
-	@After("@WebOnly,@SampleScenario,@ErrorMessages,@ServiceOnly")
+	@After("@WebOnly,@SampleScenario,@ServiceOnly")
 	public void rollBackTestONProperty() {
 		IntegrationTestProperties.setTestProperty("testON", testON);
 
 	}
 
-	@Before("@ErrorMessages,@ServiceOnly")
+	@Before("@ServiceOnly")
 	public void overrideTestONProperty() {
 
 		testON = IntegrationTestProperties.getTestProperty("testON");
diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
index c97dc9cf9e..71a9c90015 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
@@ -74,6 +74,7 @@
 	private String httpMethod = "";
 	private int actualResponseCode;
 	private String actualResponseMsg;
+	StringBuffer sb = new StringBuffer();
 
 	private static final Logger LOG = LoggerFactory
 			.getLogger(GraphHopperUIUtil.class);
@@ -521,8 +522,7 @@ public void verifyTotalRouteTime(String totalRouteTime)
 
 		case "SERVICE":
 
-			if (IntegrationTestProperties.getTestProperty("routeType")
-					.equalsIgnoreCase("GPX")) {
+			if (requestParameters.get("type").get(0).equalsIgnoreCase("GPX")) {
 				aTime.setTime(GPHServiceUtil.getTotalRouteTime());
 			} else {
 				// aTime.setTime(GPHJsonService.getTotalRouteTime());
@@ -537,8 +537,7 @@ public void verifyTotalRouteTime(String totalRouteTime)
 
 		default:
 
-			if (IntegrationTestProperties.getTestProperty("routeType")
-					.equalsIgnoreCase("GPX")) {
+			if (requestParameters.get("type").get(0).equalsIgnoreCase("GPX")) {
 				aTime.setTime(GPHServiceUtil.getTotalRouteTime());
 			} else {
 
@@ -725,12 +724,9 @@ void sendAndGetResponse(StringBuffer sb) {
 					.toString());
 			serviceResponse = IOUtils.toString(httpResponse.getEntity()
 					.getContent(), "UTF-8");
-			
-				
-			
 
 			final StatusLine statusLine = httpResponse.getStatusLine();
-			
+
 			actualResponseCode = statusLine.getStatusCode();
 			actualResponseMsg = statusLine.getReasonPhrase();
 
@@ -816,8 +812,6 @@ CloseableHttpResponse doSendAndGetResponse(String serviceUrl)
 
 	protected void getRouteFromServiceWithParameters() {
 
-		StringBuffer sb = new StringBuffer();
-
 		if (IntegrationTestProperties.getTestPropertyBool("viaApigee")) {
 			sb.append(IntegrationTestProperties
 					.getTestProperty("graphHopperWebUrlViaApigee"));
@@ -859,157 +853,192 @@ protected void getRouteFromServiceWithParameters() {
 	}
 
 	public void getRouteFromUI() {
+		try {
+			String weighting = requestParameters.get("weighting").get(0);
 
-		String weighting = requestParameters.get("weighting").get(0);
-
-		String avoidances = requestParameters.get("avoidances").get(0);
-		String vehicle = requestParameters.get("vehicle").get(0);
-		if (vehicle.equalsIgnoreCase("mountainbike")) {
-			vehicle = "mtb";
-		}
-
-		ArrayList<String> points = requestParameters.get("point");
-
-		if (!requestParameters.containsKey("type")) {
-			ArrayList<String> responseType = new ArrayList<String>();
-			responseType.add(IntegrationTestProperties
-					.getTestProperty("routeType"));
-			requestParameters.put("type", responseType);
+			String avoidances = requestParameters.get("avoidances").get(0);
+			String vehicle = requestParameters.get("vehicle").get(0);
+			if (vehicle.equalsIgnoreCase("mountainbike")) {
+				vehicle = "mtb";
+			}
 
-		} else if (requestParameters.get("type").get(0).isEmpty()) {
+			ArrayList<String> points = requestParameters.get("point");
 
-			requestParameters.remove("type");
-			ArrayList<String> responseType = new ArrayList<String>();
-			responseType.add(IntegrationTestProperties
-					.getTestProperty("routeType"));
-			requestParameters.put("type", responseType);
-		}
+			if (!requestParameters.containsKey("type")) {
+				ArrayList<String> responseType = new ArrayList<String>();
+				responseType.add(IntegrationTestProperties
+						.getTestProperty("routeType"));
+				requestParameters.put("type", responseType);
 
-		switch (vehicle) {
-		case "car":
-			clickElement(ROUTE_TYPE_CAR);
+			} else if (requestParameters.get("type").get(0).isEmpty()) {
 
-			break;
-		case "bike":
-			clickElement(ROUTE_TYPE_BIKE);
-			break;
-		case "mtb":
-			clickElement(ROUTE_TYPE_MOUNTAINBIKE);
-			break;
-		case "foot":
-			clickElement(ROUTE_TYPE_WALK);
-			break;
-		default:
-			clickElement(ROUTE_TYPE_CAR);
-			break;
+				requestParameters.remove("type");
+				ArrayList<String> responseType = new ArrayList<String>();
+				responseType.add(IntegrationTestProperties
+						.getTestProperty("routeType"));
+				requestParameters.put("type", responseType);
+			}
 
-		}
-		clickElement(settingsButton);
+			switch (vehicle) {
+			case "car":
+				clickElement(ROUTE_TYPE_CAR);
+
+				break;
+			case "bike":
+				clickElement(ROUTE_TYPE_BIKE);
+				break;
+			case "mtb":
+				clickElement(ROUTE_TYPE_MOUNTAINBIKE);
+				break;
+			case "foot":
+				clickElement(ROUTE_TYPE_WALK);
+				break;
+			default:
+				clickElement(ROUTE_TYPE_CAR);
+				break;
 
-		if (!avoidances.equals("")) {
-			for (int i = 0; i < avoidances.split(",").length; i++) {
-				String avoidance = avoidances.split(",")[i];
-				switch (avoidance.toLowerCase().trim()) {
+			}
+			clickElement(settingsButton);
+
+			if (!avoidances.equals("")) {
+				for (int i = 0; i < avoidances.split(",").length; i++) {
+					String avoidance = avoidances.split(",")[i];
+					switch (avoidance.toLowerCase().trim()) {
+
+					case "aroad":
+						clickElement(avoidance_ARoad);
+						break;
+
+					case "boulders":
+						clickElement(avoidance_Boulders);
+						break;
+					case "cliff":
+						clickElement(avoidance_Cliff);
+						break;
+					case "inlandwater":
+						clickElement(avoidance_InlandWater);
+						break;
+					case "marsh":
+						clickElement(avoidance_Marsh);
+						break;
+					case "quarryorpit":
+						clickElement(avoidance_QuarryOrPit);
+						break;
+					case "scree":
+						clickElement(avoidance_Scree);
+						break;
+					case "rock":
+						clickElement(avoidance_Rock);
+						break;
+					case "mud":
+						clickElement(avoidance_Mud);
+						break;
+
+					case "sand":
+						clickElement(avoidance_Sand);
+						break;
+
+					case "shingle":
+						clickElement(avoidance_Shingle);
+						break;
+
+					default:
+						break;
+					}
+				}
 
-				case "aroad":
-					clickElement(avoidance_ARoad);
-					break;
+				if (weighting.equalsIgnoreCase("shortavoid")) {
+					clickElement(shortest_RButton);
+				}
 
-				case "boulders":
-					clickElement(avoidance_Boulders);
-					break;
-				case "cliff":
-					clickElement(avoidance_Cliff);
-					break;
-				case "inlandwater":
-					clickElement(avoidance_InlandWater);
-					break;
-				case "marsh":
-					clickElement(avoidance_Marsh);
-					break;
-				case "quarryorpit":
-					clickElement(avoidance_QuarryOrPit);
-					break;
-				case "scree":
-					clickElement(avoidance_Scree);
-					break;
-				case "rock":
-					clickElement(avoidance_Rock);
-					break;
-				case "mud":
-					clickElement(avoidance_Mud);
-					break;
+				else {
+					clickElement(fastest_RButton);
+				}
 
-				case "sand":
-					clickElement(avoidance_Sand);
-					break;
+			}
 
-				case "shingle":
-					clickElement(avoidance_Shingle);
-					break;
+			else {
+				if (weighting.equalsIgnoreCase("shortest")) {
+					clickElement(shortest_RButton);
+				}
 
-				default:
-					break;
+				else {
+					clickElement(fastest_RButton);
 				}
 			}
 
-			if (weighting.equalsIgnoreCase("shortavoid")) {
-				clickElement(shortest_RButton);
-			}
+			for (int i = 0; i < points.size() - 2; i++)
 
-			else {
-				clickElement(fastest_RButton);
+			{
+				clickElement(ADD_WAYPOINT);
 			}
 
-		}
+			for (int i = 0; i < points.size(); i++) {
+				String point = points.get(i);
 
-		else {
-			if (weighting.equalsIgnoreCase("shortest")) {
-				clickElement(shortest_RButton);
-			}
+				int length = point.split(",").length;
 
-			else {
-				clickElement(fastest_RButton);
+				if (length == 2) {
+
+					waypoint = new ComponentID(i + "_searchBox");
+					typeIntoField(waypoint, point);
+
+				}
+
+				else {
+					waypoint = new ComponentID(i + "_searchBox");
+					typeIntoField(waypoint, point);
+					clickElement(dropDown);
+				}
 			}
-		}
 
-		for (int i = 0; i < points.size() - 2; i++)
+			clickElement(ROUTE_SEARCH);
 
-		{
-			clickElement(ADD_WAYPOINT);
+			waitFor(INSTRUCTIONS);
+		} catch (Exception e) {
+			LOG.info(e.getMessage());
 		}
 
-		for (int i = 0; i < points.size(); i++) {
-			String point = points.get(i);
+	}
 
-			int length = point.split(",").length;
+	public void verifyErrorMessage(String responseMessage) {
 
-			if (length == 2) {
+		switch (testOn) {
+		case "Web":
 
-				waypoint = new ComponentID(i + "_searchBox");
-				typeIntoField(waypoint, point);
+			navigateTo(sb.toString().replaceAll("/route?", "/"));
+			waitFor(error_Message);
+			verifyUIErrorMessage(responseMessage);
 
+			break;
+		case "Service":
+			if (requestParameters.get("type").get(0).equalsIgnoreCase("gpx")) {
+				GPHServiceUtil.verifyMessage(responseMessage);
+			} else {
+				GPHJSONUtil.verifyMessage(responseMessage);
 			}
 
-			else {
-				waypoint = new ComponentID(i + "_searchBox");
-				typeIntoField(waypoint, point);
-				clickElement(dropDown);
+			break;
+
+		default:
+			navigateTo(sb.toString().replaceAll("/route?", "/"));
+			waitFor(error_Message);
+			verifyUIErrorMessage(responseMessage);
+
+			if (requestParameters.get("type").get(0).equalsIgnoreCase("gpx")) {
+				GPHServiceUtil.verifyMessage(responseMessage);
+			} else {
+				GPHJSONUtil.verifyMessage(responseMessage);
 			}
+			break;
 		}
+	}
 
-		clickElement(ROUTE_SEARCH);
-
-		waitFor(INSTRUCTIONS);
+	private void verifyUIErrorMessage(String responseMessage) {
 
-	}
+		Assert.assertTrue("Web Interface: Actual Error Message" + getTextValue(error_Message) + " is not matching with :"+ responseMessage,getTextValue(error_Message).equalsIgnoreCase(responseMessage));
+		
 
-	public void verifyErrorMessage(String responseMessage) {
-		if (requestParameters.get("type").get(0).equalsIgnoreCase("gpx")) {
-			GPHServiceUtil.verifyMessage(responseMessage);
-		} else {
-			GPHJSONUtil.verifyMessage(responseMessage);
-		}
 	}
 
 	public void verifyStatusCode(int statusCode) {
diff --git a/acceptancetesting/src/test/cucumber/Routing-Exeter-Smoke.feature b/acceptancetesting/src/test/cucumber/Routing-Exeter-Smoke.feature
new file mode 100644
index 0000000000..e39b090dab
--- /dev/null
+++ b/acceptancetesting/src/test/cucumber/Routing-Exeter-Smoke.feature
@@ -0,0 +1,608 @@
+ Feature: Smoke Tests: Verify a route from A to B
+    As a user
+    I want to get a route from location A to location B using the routing service
+    And route should be the fastest route and contain the waypoints,restrictions,time and other instructions
+ 
+ 
+ #Error Messages
+  #Successful request
+   @ErrorMessages @Smoke
+  Scenario: Successful request with all parameters
+    Given I have route point as
+      | pointA              | pointB              |
+      | 50.729961,-3.524853 | 50.723364,-3.523895 |
+    And I have vehicle as "car"
+    And I have avoidances as ""
+    And I have weighting as "fastest"
+    And I have locale as "en_US"
+    And I have debug as "true"
+    And I have points_encoded as "true"
+    And I have points_calc as "true"
+    And I have instructions as "true"
+    And I have algorithm as "astar"
+    And I have type as "json"
+    When I request for a route
+    Then I should be able to verify the http response message as "OK"
+    Then I should be able to verify the http statuscode as "200"
+    Then I should be able to verify the waypoints on the route map:
+      | wayPointIndex | waypointco          | waypointdesc                | azimuth | direction | time | distance | avoidance |
+      | 2             | 50.729205,-3.523206 | Turn right onto WELL STREET | 210.0   | SW        | 4050 | 112.5    |           |
+
+  # Parameter :  vehicle
+   @ErrorMessages @Smoke 
+  Scenario Outline: Incorrect Parameter Value for "Vehicle"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 50.729961,-3.524853 | 50.723364,-3.523895 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have weighting as "<routeType>"
+    When I request for a route
+    Then I should be able to verify the http response message as "<httpErrorMessage>"
+    Then I should be able to verify the http statuscode as "<statusCode>"
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | errorMessage                                                  | statusCode | httpErrorMessage |
+      | 123         |            | fastest   | Vehicle 123 is not a valid vehicle. Valid vehicles are car.   | 400        | Bad Request      |
+      | foot        |            | fastest   | Vehicle foot is not a valid vehicle. Valid vehicles are car.  | 400        | Bad Request      |
+      | cycle       |            | fastest   | Vehicle cycle is not a valid vehicle. Valid vehicles are car. | 400        | Bad Request      |
+      | Bike        |            | fastest   | Vehicle Bike is not a valid vehicle. Valid vehicles are car.  | 400        | Bad Request      |
+
+  # Parameter :  vehicle
+   @ErrorMessages @Smoke @Current
+  Scenario Outline: Incorrect Parameter Name "vehicles"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 50.729961,-3.524853 | 50.723364,-3.523895 |
+    And I have vehicles as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | responseFormat | errorMessage | statusCode |
+      | car         |            | fastest   | json           |              | 400        |
+
+  # Parameter :  vehicle
+   @ErrorMessages @Smoke
+  Scenario Outline: Missing Parameter "vehicle"
+    Given I have route points as
+      | pointA              | pointB              |
+      | 50.729961,-3.524853 | 50.723364,-3.523895 |
+    And I have avoidances as "<avoidances>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | responseFormat | errorMessage                | statusCode |
+      | car         |            | fastest   | json           | No point parameter provided | 400        |
+
+  # Parameter :  point
+   @ErrorMessages @Smoke
+  Scenario Outline: Incorrect Parameter Value "point"
+    Given I have route point as
+      | pointA           | pointB              |
+      | 50.729961,string | 50.723364,-3.523895 |
+    And I have vehicles as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | responseFormat | errorMessage                                     | statusCode |
+      | car         |            | fastest   | json           | At least 2 points has to be specified, but was:1 | 400        |
+
+   @ErrorMessages @Smoke
+  Scenario Outline: Incorrect Parameter Value "point"
+    Given I have route point as
+      | pointA              |
+      | 50.723364,-3.523895 |
+    And I have vehicles as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | responseFormat | errorMessage                                     | statusCode |
+      | car         |            | fastest   | json           | At least 2 points has to be specified, but was:1 | 400        |
+
+   @ErrorMessages @Smoke
+  Scenario Outline: Incorrect Parameter Value "point"
+    Given I have route point as
+      | pointA       | pointB              |
+      | 292530,92635 | -3.523895,50.723364 |
+    And I have vehicles as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | responseFormat | errorMessage                          | statusCode |
+      | car         |            | fastest   | json           | Cannot find point 0: 292530.0,92635.0 | 400        |
+
+  # Parameter :  point
+   @ErrorMessages @Smoke
+  Scenario Outline: Incorrect Parameter Name "points"
+    Given I have route points as
+      | pointA              | pointB              |
+      | 50.729961,-3.524853 | 50.723364,-3.523895 |
+    And I have vehicles as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | responseFormat | errorMessage                | statusCode |
+      | car         |            | fastest   | json           | No point parameter provided | 400        |
+
+  # Parameter :  point
+   @ErrorMessages @Smoke
+  Scenario Outline: Missing Parameter "point"
+    Given I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | responseFormat | errorMessage                | statusCode |
+      | car         |            | fastest   | json           | No point parameter provided | 400        |
+
+  # Parameter :  avoidances
+   @ErrorMessages @Smoke
+  Scenario Outline: Invalid Parameter Value for "avoidances"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 50.729961,-3.524853 | 50.723364,-3.523895 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | responseFormat | errorMessage                                                                                                     | statusCode |
+      | car         | trees      | fastest   | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
+
+  # Parameter :  avoidances
+   @ErrorMessages @Smoke
+  Scenario Outline: Invalid Parameter Name for "avoidances"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 50.729961,-3.524853 | 50.723364,-3.523895 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidance as "<avoidances>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | responseFormat | errorMessage                                                                                                     | statusCode |
+      | car         | cliff      | fastest   | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
+
+  # Parameter :  weighting
+   @ErrorMessages @Smoke
+  Scenario Outline: Invalid Parameter Value for "weighting"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 50.729961,-3.524853 | 50.723364,-3.523895 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | responseFormat | errorMessage                                                                                 | statusCode |
+      | car         |            | quick     | json           | Weighting faster not supported. Valid weightings are shorted, fastest, fastavoid, shortavoid | 400        |
+
+  # Parameter :  weighting
+   @ErrorMessages @Smoke
+  Scenario Outline: Invalid Parameter Name for "weighting"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 50.729961,-3.524853 | 50.723364,-3.523895 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidance as "<avoidances>"
+    And I have weightings as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | responseFormat | errorMessage                                                                                                     | statusCode |
+      | car         |            | fastest   | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
+
+  # Parameter :  locale
+   @ErrorMessages @Smoke
+  Scenario Outline: Invalid Parameter Value for "locale"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 50.729961,-3.524853 | 50.723364,-3.523895 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have locale as "<locale>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | locale | responseFormat | errorMessage                                                                                                                                                                                                        | statusCode |
+      | car         |            | fastest   | en     | json           | en is not a valid value for parameter locale. Valid values are bg, ca, cz, de_DE, el, en_US, es, fa, fil, fi, fr, gl, he, hu_HU, it, ja, ne, nl, pl_PL, pt_BR, pt_PT, ro, ru, si, sk, sv_SE, tr, uk, vi_VI or zh_CN | 400        |
+
+  # Parameter :  locale
+   @ErrorMessages @Smoke
+  Scenario Outline: Invalid Parameter Name for "locale"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 50.729961,-3.524853 | 50.723364,-3.523895 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidance as "<avoidances>"
+    And I have locals as "<locale>"
+    And I have weightings as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | locale | responseFormat | errorMessage                                                                                                     | statusCode |
+      | car         |            | fastest   | en-GB  | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
+
+  # Parameter :  instructions
+   @ErrorMessages @Smoke
+  Scenario Outline: Invalid Parameter Value for "instructions"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 50.729961,-3.524853 | 50.723364,-3.523895 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have instructions as "<instructions>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | instructions | responseFormat | errorMessage                                                                               | statusCode |
+      | car         |            | fastest   | msg("box")   | json           | msg("box") is not a valid value for parameter instructions. Valid values are true or false | 400        |
+
+  # Parameter :  instructions
+   @ErrorMessages @Smoke
+  Scenario Outline: Invalid Parameter Name for "instructions"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 50.729961,-3.524853 | 50.723364,-3.523895 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidance as "<avoidances>"
+    And I have instruction as "<instructions>"
+    And I have weightings as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | instructions | responseFormat | errorMessage                                                                                                     | statusCode |
+      | car         |            | fastest   | true         | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
+
+  # Parameter :  algorithm
+   @ErrorMessages @Smoke
+  Scenario Outline: Invalid Parameter Value for "algorithm"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 50.729961,-3.524853 | 50.723364,-3.523895 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have algorithm as "<algorithm>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | algorithm | responseFormat | errorMessage                                                                                                                 | statusCode |
+      | car         |            | fastest   | xyz       | json           | xyz is not a valid value for parameter algorithm. Valid values are astar, astarbi, dijkstra, dijkstrabi or dijkstraOneToMany | 400        |
+      | car         |            | fastest   | select*   | json           | select* blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point.               | 400        |
+
+  #
+  # Parameter :  algorithm
+   @ErrorMessages @Smoke
+  Scenario Outline: Valid Parameter Values for "algorithm"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 50.729961,-3.524853 | 50.723364,-3.523895 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have algorithm as "<algorithm>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the http response message as "OK"
+    Then I should be able to verify the http statuscode as "200"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | algorithm  | responseFormat |
+      | car         |            | fastest   | dijkstra   | json           |
+      | car         |            | fastest   | astar      | json           |
+      | car         |            | fastest   | astarbi    | json           |
+      | car         |            | fastest   | dijkstrabi | json           |
+
+  #
+  # Parameter :  algorithm
+   @ErrorMessages @Smoke
+  Scenario Outline: Invalid Parameter Name for "algorithm"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 50.729961,-3.524853 | 50.723364,-3.523895 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidance as "<avoidances>"
+    And I have algorithms as "<algorithm>"
+    And I have weightings as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | algorithm | responseFormat | errorMessage                                                                                                     | statusCode |
+      | car         |            | fastest   | dijkstra  | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
+
+  # Parameter :  points_encoded
+   @ErrorMessages @Smoke
+  Scenario Outline: Invalid Parameter Value for "points_encoded"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 50.729961,-3.524853 | 50.723364,-3.523895 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have points_encoded as "<points_encoded>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | points_encoded | responseFormat | errorMessage                                                                               | statusCode |
+      | car         |            | fastest   | xyz            | json           | xyz is not a valid value for parameter pointsEncodedString. Valid values are true or false | 400        |
+
+  # Parameter :  points_encoded
+   @ErrorMessages @Smoke
+  Scenario Outline: Invalid Parameter Name for "points_encoded"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 50.729961,-3.524853 | 50.723364,-3.523895 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidance as "<avoidances>"
+    And I have points_encodedSSS as "<algorithm>"
+    And I have weightings as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | points_encoded | responseFormat | errorMessage                                                                                                     | statusCode |
+      | car         |            | fastest   | true           | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
+
+  # Parameter :  debug
+   @ErrorMessages @Smoke
+  Scenario Outline: Invalid Parameter Value for "debug"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 50.729961,-3.524853 | 50.723364,-3.523895 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have debug as "<debug>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | debug | responseFormat | errorMessage                                                                 | statusCode |
+      | car         |            | fastest   | xyz   | json           | xyz is not a valid value for parameter debug. Valid values are true or false | 400        |
+
+  # Parameter :  debug
+   @ErrorMessages @Smoke
+  Scenario Outline: Invalid Parameter Name for "debug"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 50.729961,-3.524853 | 50.723364,-3.523895 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidance as "<avoidances>"
+    And I have debug as "<debug>"
+    And I have weightings as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | debug | responseFormat | errorMessage                                                                                                     | statusCode |
+      | car         |            | fastest   | true  | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
+
+  # Parameter :  calc_points
+   @ErrorMessages @Smoke
+  Scenario Outline: Invalid Parameter Value for "calc_points"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 50.729961,-3.524853 | 50.723364,-3.523895 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have calc_points as "<debug>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | calc_points | responseFormat | errorMessage                                                                       | statusCode |
+      | car         |            | fastest   | xyz         | json           | xyz is not a valid value for parameter calc_points. Valid values are true or false | 400        |
+
+  # Parameter :  calc_points
+   @ErrorMessages @Smoke
+  Scenario Outline: Invalid Parameter Name for "calc_points"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 50.729961,-3.524853 | 50.723364,-3.523895 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidance as "<avoidances>"
+    And I have calc_point as "<calc_points>"
+    And I have weightings as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | calc_points | responseFormat | errorMessage                                                                                                     | statusCode |
+      | car         |            | fastest   | true        | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
+
+  # Parameter :  Type
+   @ErrorMessages @Smoke
+  Scenario Outline: Invalid Parameter Value for "type"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 50.729961,-3.524853 | 50.723364,-3.523895 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have calc_points as "<debug>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | calc_points | responseFormat | errorMessage                                                               | statusCode |
+      | car         |            | fastest   | true        | txt            | txt is not a valid value for parameter type. Valid values are GPX or JSON. | 400        |
+
+  # Parameter :  Type
+   @ErrorMessages @Smoke
+  Scenario Outline: Invalid Parameter Name for "calc_points"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 50.729961,-3.524853 | 50.723364,-3.523895 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidance as "<avoidances>"
+    And I have calc_pointSSS as "<calc_points>"
+    And I have weightings as "<routeType>"
+    And I have responseType as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | calc_points | responseFormat | errorMessage                                                                                                              | statusCode |
+      | car         |            | fastest   | true        | json           | Parameter calc_pointSSS is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
+
+  # http method
+   @ErrorMessages @Smoke
+  Scenario Outline: http methods "PUT/POST/DEL/GET"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 50.729961,-3.524853 | 50.723364,-3.523895 |
+    Given I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    And I request for HTTP "<httpMethod>" method
+    When I request for a route
+    Then I should be able to verify the http response message as "<httpErrorMessage>"
+    Then I should be able to verify the http statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | httpMethod | responseFormat | httpErrorMessage   | statusCode |
+      | car         |            | fastest   | PUT        | json           | Method Not Allowed | 405        |
+      | car         |            | fastest   | DEL        | json           | Method Not Allowed | 405        |
+      | car         |            | fastest   | POST       | json           | Method Not Allowed | 405        |
+      | car         |            | fastest   | GET        | json           | OK                 | 200        |
+      | car         |            | fastest   | OPTIONS    | json           | OK                 | 200        |
+
+  # Nearest Point : Invalid Parameter Value "point"
+   @ErrorMessages @Smoke
+  Scenario Outline: Verify  nearest point of point using NearestPoint API
+    Given I have type as "<responseFormat>"
+    And My routing points for nearestPoint API as "<pointA>"
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    #  Then I should be able to verify the http response message as "<httpErrorMessage>"
+    #Then I should be able to verify the http statuscode as "<statusCode>"
+    Examples: 
+      | pointA              | errorMessage | responseFormat | statusCode |
+      | 51.878966,-0.903849 | e            | json           | 400        |
+      
+      
+      
+      
+        @Smoke
+  Scenario Outline: Verify  a shortest route  on a Route (Blackall Road - Exeter)
+    Given I have route point as
+      | pointA              | pointB              |
+      | 50.728119,-3.530372 | 50.723788,-3.517289 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have weighting as "<routeType>"
+    When I request for a route
+    Then I should be able to verify the waypoints on the route map:
+      | wayPointIndex | waypointco          | waypointdesc                                | azimuth | direction | time  | distance | avoidance |
+      | 2             | 50.727984,-3.530548 | Turn sharp left onto NEW NORTH ROAD (B3183) | 117.0   | SE        | 29739 | 378.4    |           |
+
+    Examples: 
+      | vehicleType | avoidances | routeType |
+      | car         |            | shortest  |
+
+  @Smoke
+  Scenario Outline: Verify  a fastest route  on a Route (Blackall Road - Exeter)
+    Given I have route point as
+      | pointA              | pointB              |
+      | 50.728119,-3.530372 | 50.723788,-3.517289 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have weighting as "<routeType>"
+    When I request for a route
+    Then I should be able to verify the waypoints on the route map:
+      | wayPointIndex | waypointco         | waypointdesc                      | azimuth | direction | time | distance | avoidance |
+      | 2             | 50.729609,-3.52599 | Turn right onto PENNSYLVANIA ROAD | 193.0   | S         | 4106 | 51.3     |           |
+
+    Examples: 
+      | vehicleType | avoidances | routeType |
+      | car         |            | fastest   |
diff --git a/acceptancetesting/src/test/cucumber/Routing-PeakDistrict-Smoke.feature b/acceptancetesting/src/test/cucumber/Routing-PeakDistrict-Smoke.feature
new file mode 100644
index 0000000000..d6f4bf37ff
--- /dev/null
+++ b/acceptancetesting/src/test/cucumber/Routing-PeakDistrict-Smoke.feature
@@ -0,0 +1,589 @@
+Feature: Smoke Tests- Peak District: Verify a route from A to B
+   As a user
+   I want to get a route from location A to location B using the routing service
+   And route should be the fastest route and contain the waypoints,restrictions,time and other instructions
+
+  #Error Messages
+  #Successful request
+  @ErrorMessages @Smoke
+  Scenario: Successful request with all parameters
+    Given I have route point as
+      | pointA              | pointB              |
+      | 53.298525,-1.679533 | 53.203145,-1.799292 |
+    And I have vehicle as "foot"
+    And I have avoidances as ""
+    And I have weighting as "fastest"
+    And I have locale as "en_US"
+    And I have debug as "true"
+    And I have points_encoded as "true"
+    And I have points_calc as "true"
+    And I have instructions as "true"
+    And I have algorithm as "astar"
+    And I have type as "json"
+    When I request for a route
+    Then I should be able to verify the http response message as "OK"
+    Then I should be able to verify the http statuscode as "200"
+    Then I should be able to verify the waypoints on the route map:
+      | wayPointIndex | waypointco          | waypointdesc                | azimuth | direction | time | distance | avoidance |
+      | 2             | 50.729205,-3.523206 | Turn right onto WELL STREET | 210.0   | SW        | 4050 | 112.5    |           |
+
+  # Parameter :  vehicle
+  @ErrorMessages @Smoke
+  Scenario Outline: Incorrect Parameter Value for "Vehicle"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 53.298525,-1.679533 | 53.203145,-1.799292 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have weighting as "<routeType>"
+    When I request for a route
+    Then I should be able to verify the http response message as "<httpErrorMessage>"
+    Then I should be able to verify the http statuscode as "<statusCode>"
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | errorMessage                                                   | statusCode | httpErrorMessage |
+      | 123         |            | fastest   | Vehicle 123 is not a valid vehicle. Valid vehicles are foot.   | 400        | Bad Request      |
+      | car        |            | fastest   | Vehicle car is not a valid vehicle. Valid vehicles are foot.   | 400        | Bad Request      |
+      | cycle       |            | fastest   | Vehicle cycle is not a valid vehicle. Valid vehicles are foot. | 400        | Bad Request      |
+      | Bike        |            | fastest   | Vehicle Bike is not a valid vehicle. Valid vehicles are foot.  | 400        | Bad Request      |
+
+  # Parameter :  vehicle
+  @ErrorMessages @Smoke @Current
+  Scenario Outline: Incorrect Parameter Name "vehicles"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 53.298525,-1.679533 | 53.203145,-1.799292 |
+    And I have vehicles as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | responseFormat | errorMessage | statusCode |
+      | foot        |            | fastest   | json           |              | 400        |
+
+  # Parameter :  vehicle
+  @ErrorMessages @Smoke
+  Scenario Outline: Missing Parameter "vehicle"
+    Given I have route points as
+      | pointA              | pointB              |
+      | 53.298525,-1.679533 | 53.203145,-1.799292 |
+    And I have avoidances as "<avoidances>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | responseFormat | errorMessage                | statusCode |
+      | foot        |            | fastest   | json           | No point parameter provided | 400        |
+
+  # Parameter :  point
+  @ErrorMessages @Smoke
+  Scenario Outline: Incorrect Parameter Value "point"
+    Given I have route point as
+      | pointA           | pointB              |
+      | 50.729961,string | 50.723364,-3.523895 |
+    And I have vehicles as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | responseFormat | errorMessage                                     | statusCode |
+      | foot        |            | fastest   | json           | At least 2 points has to be specified, but was:1 | 400        |
+
+  @ErrorMessages @Smoke
+  Scenario Outline: Incorrect Parameter Value "point"
+    Given I have route point as
+      | pointA              |
+      | 50.723364,-3.523895 |
+    And I have vehicles as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | responseFormat | errorMessage                                     | statusCode |
+      | foot        |            | fastest   | json           | At least 2 points has to be specified, but was:1 | 400        |
+
+  @ErrorMessages @Smoke
+  Scenario Outline: Incorrect Parameter Value "point"
+    Given I have route point as
+      | pointA       | pointB              |
+      | 292530,92635 | -3.523895,50.723364 |
+    And I have vehicles as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | responseFormat | errorMessage                          | statusCode |
+      | foot        |            | fastest   | json           | Cannot find point 0: 292530.0,92635.0 | 400        |
+
+  # Parameter :  point
+  @ErrorMessages @Smoke
+  Scenario Outline: Incorrect Parameter Name "points"
+    Given I have route points as
+      | pointA              | pointB              |
+      | 53.298525,-1.679533 | 53.203145,-1.799292 |
+    And I have vehicles as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | responseFormat | errorMessage                | statusCode |
+      | foot        |            | fastest   | json           | No point parameter provided | 400        |
+
+  # Parameter :  point
+  @ErrorMessages @Smoke
+  Scenario Outline: Missing Parameter "point"
+    Given I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | responseFormat | errorMessage                | statusCode |
+      | foot        |            | fastest   | json           | No point parameter provided | 400        |
+
+  # Parameter :  avoidances
+  @ErrorMessages @Smoke
+  Scenario Outline: Invalid Parameter Value for "avoidances"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 53.298525,-1.679533 | 53.203145,-1.799292 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | responseFormat | errorMessage                                                                                                     | statusCode |
+      | foot        | trees      | fastest   | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
+
+  # Parameter :  avoidances
+  @ErrorMessages @Smoke
+  Scenario Outline: Invalid Parameter Name for "avoidances"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 53.298525,-1.679533 | 53.203145,-1.799292 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidance as "<avoidances>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | responseFormat | errorMessage                                                                                                     | statusCode |
+      | foot        | cliff      | fastest   | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
+
+  # Parameter :  weighting
+  @ErrorMessages @Smoke
+  Scenario Outline: Invalid Parameter Value for "weighting"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 53.298525,-1.679533 | 53.203145,-1.799292 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | responseFormat | errorMessage                                                                                 | statusCode |
+      | foot        |            | quick     | json           | Weighting faster not supported. Valid weightings are shorted, fastest, fastavoid, shortavoid | 400        |
+
+  # Parameter :  weighting
+  @ErrorMessages @Smoke
+  Scenario Outline: Invalid Parameter Name for "weighting"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 53.298525,-1.679533 | 53.203145,-1.799292 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidance as "<avoidances>"
+    And I have weightings as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | responseFormat | errorMessage                                                                                                     | statusCode |
+      | foot        |            | fastest   | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
+
+  # Parameter :  locale
+  @ErrorMessages @Smoke
+  Scenario Outline: Invalid Parameter Value for "locale"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 53.298525,-1.679533 | 53.203145,-1.799292 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have locale as "<locale>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | locale | responseFormat | errorMessage                                                                                                                                                                                                        | statusCode |
+      | foot        |            | fastest   | en     | json           | en is not a valid value for parameter locale. Valid values are bg, ca, cz, de_DE, el, en_US, es, fa, fil, fi, fr, gl, he, hu_HU, it, ja, ne, nl, pl_PL, pt_BR, pt_PT, ro, ru, si, sk, sv_SE, tr, uk, vi_VI or zh_CN | 400        |
+
+  # Parameter :  locale
+  @ErrorMessages @Smoke
+  Scenario Outline: Invalid Parameter Name for "locale"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 53.298525,-1.679533 | 53.203145,-1.799292 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidance as "<avoidances>"
+    And I have locals as "<locale>"
+    And I have weightings as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | locale | responseFormat | errorMessage                                                                                                     | statusCode |
+      | foot        |            | fastest   | en-GB  | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
+
+  # Parameter :  instructions
+  @ErrorMessages @Smoke
+  Scenario Outline: Invalid Parameter Value for "instructions"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 53.298525,-1.679533 | 53.203145,-1.799292 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have instructions as "<instructions>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | instructions | responseFormat | errorMessage                                                                               | statusCode |
+      | foot        |            | fastest   | msg("box")   | json           | msg("box") is not a valid value for parameter instructions. Valid values are true or false | 400        |
+
+  # Parameter :  instructions
+  @ErrorMessages @Smoke
+  Scenario Outline: Invalid Parameter Name for "instructions"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 53.298525,-1.679533 | 53.203145,-1.799292 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidance as "<avoidances>"
+    And I have instruction as "<instructions>"
+    And I have weightings as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | instructions | responseFormat | errorMessage                                                                                                     | statusCode |
+      | foot        |            | fastest   | true         | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
+
+  # Parameter :  algorithm
+  @ErrorMessages @Smoke
+  Scenario Outline: Invalid Parameter Value for "algorithm"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 53.298525,-1.679533 | 53.203145,-1.799292 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have algorithm as "<algorithm>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | algorithm | responseFormat | errorMessage                                                                                                                 | statusCode |
+      | foot        |            | fastest   | xyz       | json           | xyz is not a valid value for parameter algorithm. Valid values are astar, astarbi, dijkstra, dijkstrabi or dijkstraOneToMany | 400        |
+      | foot        |            | fastest   | select*   | json           | select* blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point.               | 400        |
+
+  #
+  # Parameter :  algorithm
+  @ErrorMessages @Smoke
+  Scenario Outline: Valid Parameter Values for "algorithm"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 53.298525,-1.679533 | 53.203145,-1.799292 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have algorithm as "<algorithm>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the http response message as "OK"
+    Then I should be able to verify the http statuscode as "200"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | algorithm  | responseFormat |
+      | foot        |            | fastest   | dijkstra   | json           |
+      | foot        |            | fastest   | astar      | json           |
+      | foot        |            | fastest   | astarbi    | json           |
+      | foot        |            | fastest   | dijkstrabi | json           |
+
+  #
+  # Parameter :  algorithm
+  @ErrorMessages @Smoke
+  Scenario Outline: Invalid Parameter Name for "algorithm"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 53.298525,-1.679533 | 53.203145,-1.799292 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidance as "<avoidances>"
+    And I have algorithms as "<algorithm>"
+    And I have weightings as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | algorithm | responseFormat | errorMessage                                                                                                     | statusCode |
+      | foot        |            | fastest   | dijkstra  | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
+
+  # Parameter :  points_encoded
+  @ErrorMessages @Smoke
+  Scenario Outline: Invalid Parameter Value for "points_encoded"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 53.298525,-1.679533 | 53.203145,-1.799292 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have points_encoded as "<points_encoded>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | points_encoded | responseFormat | errorMessage                                                                               | statusCode |
+      | foot        |            | fastest   | xyz            | json           | xyz is not a valid value for parameter pointsEncodedString. Valid values are true or false | 400        |
+
+  # Parameter :  points_encoded
+  @ErrorMessages @Smoke
+  Scenario Outline: Invalid Parameter Name for "points_encoded"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 53.298525,-1.679533 | 53.203145,-1.799292 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidance as "<avoidances>"
+    And I have points_encodedSSS as "<algorithm>"
+    And I have weightings as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | points_encoded | responseFormat | errorMessage                                                                                                     | statusCode |
+      | foot        |            | fastest   | true           | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
+
+  # Parameter :  debug
+  @ErrorMessages @Smoke
+  Scenario Outline: Invalid Parameter Value for "debug"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 53.298525,-1.679533 | 53.203145,-1.799292 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have debug as "<debug>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | debug | responseFormat | errorMessage                                                                 | statusCode |
+      | foot        |            | fastest   | xyz   | json           | xyz is not a valid value for parameter debug. Valid values are true or false | 400        |
+
+  # Parameter :  debug
+  @ErrorMessages @Smoke
+  Scenario Outline: Invalid Parameter Name for "debug"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 53.298525,-1.679533 | 53.203145,-1.799292 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidance as "<avoidances>"
+    And I have debug as "<debug>"
+    And I have weightings as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | debug | responseFormat | errorMessage                                                                                                     | statusCode |
+      | foot        |            | fastest   | true  | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
+
+  # Parameter :  calc_points
+  @ErrorMessages @Smoke
+  Scenario Outline: Invalid Parameter Value for "calc_points"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 53.298525,-1.679533 | 53.203145,-1.799292 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have calc_points as "<debug>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | calc_points | responseFormat | errorMessage                                                                       | statusCode |
+      | foot        |            | fastest   | xyz         | json           | xyz is not a valid value for parameter calc_points. Valid values are true or false | 400        |
+
+  # Parameter :  calc_points
+  @ErrorMessages @Smoke
+  Scenario Outline: Invalid Parameter Name for "calc_points"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 53.298525,-1.679533 | 53.203145,-1.799292 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidance as "<avoidances>"
+    And I have calc_point as "<calc_points>"
+    And I have weightings as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | calc_points | responseFormat | errorMessage                                                                                                     | statusCode |
+      | foot        |            | fastest   | true        | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
+
+  # Parameter :  Type
+  @ErrorMessages @Smoke
+  Scenario Outline: Invalid Parameter Value for "type"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 53.298525,-1.679533 | 53.203145,-1.799292 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have calc_points as "<debug>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | calc_points | responseFormat | errorMessage                                                               | statusCode |
+      | foot        |            | fastest   | true        | txt            | txt is not a valid value for parameter type. Valid values are GPX or JSON. | 400        |
+
+  # Parameter :  Type
+  @ErrorMessages @Smoke
+  Scenario Outline: Invalid Parameter Name for "calc_points"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 53.298525,-1.679533 | 53.203145,-1.799292 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidance as "<avoidances>"
+    And I have calc_pointSSS as "<calc_points>"
+    And I have weightings as "<routeType>"
+    And I have responseType as "<responseFormat>"
+    When I request for a route
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | calc_points | responseFormat | errorMessage                                                                                                              | statusCode |
+      | foot        |            | fastest   | true        | json           | Parameter calc_pointSSS is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
+
+  # http method
+  @ErrorMessages @Smoke
+  Scenario Outline: http methods "PUT/POST/DEL/GET"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 53.298525,-1.679533 | 53.203145,-1.799292 |
+    Given I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have weighting as "<routeType>"
+    And I have type as "<responseFormat>"
+    And I request for HTTP "<httpMethod>" method
+    When I request for a route
+    Then I should be able to verify the http response message as "<httpErrorMessage>"
+    Then I should be able to verify the http statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | httpMethod | responseFormat | httpErrorMessage   | statusCode |
+      | foot        |            | fastest   | PUT        | json           | Method Not Allowed | 405        |
+      | foot        |            | fastest   | DEL        | json           | Method Not Allowed | 405        |
+      | foot        |            | fastest   | POST       | json           | Method Not Allowed | 405        |
+      | foot        |            | fastest   | GET        | json           | OK                 | 200        |
+      | foot        |            | fastest   | OPTIONS    | json           | OK                 | 200        |
+
+  # Nearest Point : Invalid Parameter Value "point"
+  @ErrorMessages @Smoke
+  Scenario Outline: Verify  nearest point of point using NearestPoint API
+    Given I have type as "<responseFormat>"
+    And My routing points for nearestPoint API as "<pointA>"
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    #  Then I should be able to verify the http response message as "<httpErrorMessage>"
+    #Then I should be able to verify the http statuscode as "<statusCode>"
+    Examples: 
+      | pointA              | errorMessage | responseFormat | statusCode |
+      | 51.878966,-0.903849 | e            | json           | 400        |
+
+      
+       @Smoke
+  Scenario Outline: Verify DPN Route with avoidance -(A Road)
+    Given I have route point as
+      | pointA              | pointB              |
+      | 53.298525,-1.679533 | 53.203145,-1.799292 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have weighting as "<routeType>"
+    When I request for a route
+    Then I should be able to verify the waypoints not on the route map:
+      | wayPointIndex | waypointco         | waypointdesc           | azimuth | direction | time  | distance | avoidance |
+      | 6             | 53.28017,-1.711765 | Turn right onto A Road | 236.0   | SW        | 43838 | 219.2    | ARoad     |
+
+    Examples: 
+      | vehicleType  | avoidances | routeType |
+      | mountainbike | A Road      |      fastavoid     |
+      
\ No newline at end of file
diff --git a/acceptancetesting/src/test/cucumber/Routing-SmokeTests.feature b/acceptancetesting/src/test/cucumber/Routing-SmokeTests.feature
deleted file mode 100644
index e6f640ef44..0000000000
--- a/acceptancetesting/src/test/cucumber/Routing-SmokeTests.feature
+++ /dev/null
@@ -1,266 +0,0 @@
-Feature: Smoke Tests :Verify a route from A to B
-  
-   As a user
-   I want to get a route from location A to location B using the routing service
-   And route should be the fastest route and contain the waypoints,restrictions,time and other instructions
-
-  @Smoke
-  Scenario: Successful request with all parameters
-    Given I have route point as
-      | pointA              | pointB              |
-      | 50.729961,-3.524853 | 50.723364,-3.523895 |
-    And I have vehicle as "car"
-    And I have avoidances as ""
-    And I have weighting as "fastest"
-    And I have locale as "en_US"
-    And I have debug as "true"
-    And I have points_encoded as "true"
-    And I have points_calc as "true"
-    And I have instructions as "true"
-    And I have algorithm as "astar"
-    And I have type as "json"
-    When I request for a route
-    Then I should be able to verify the http response message as "OK"
-    Then I should be able to verify the http statuscode as "200"
-    Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco          | waypointdesc                | azimuth | direction | time | distance | avoidance |
-      | 2             | 50.729205,-3.523206 | Turn right onto WELL STREET | 210.0   | SW        | 4050 | 112.5    |           |
-
-  @Smoke
-  Scenario Outline: Incorrect Parameter Value for "Vehicle"
-    Given I have route point as
-      | pointA              | pointB              |
-      | 50.729961,-3.524853 | 50.723364,-3.523895 |
-    And I have vehicle as "<vehicleType>"
-    And I have avoidances as "<avoidances>"
-    And I have weighting as "<routeType>"
-    When I request for a route
-    Then I should be able to verify the http response message as "<httpErrorMessage>"
-    Then I should be able to verify the http statuscode as "<statusCode>"
-    Then I should be able to verify the response message as "<errorMessage>"
-    Then I should be able to verify the statuscode as "<statusCode>"
-
-    Examples: 
-      | vehicleType | avoidances | routeType | errorMessage                                                  | statusCode | httpErrorMessage |
-      | 123         |            | fastest   | Vehicle 123 is not a valid vehicle. Valid vehicles are car.   | 400        | Bad Request      |
-      | foot        |            | fastest   | Vehicle foot is not a valid vehicle. Valid vehicles are car.  | 400        | Bad Request      |
-      | cycle       |            | fastest   | Vehicle cycle is not a valid vehicle. Valid vehicles are car. | 400        | Bad Request      |
-      | Bike        |            | fastest   | Vehicle Bike is not a valid vehicle. Valid vehicles are car.  | 400        | Bad Request      |
-
-  @Smoke
-  Scenario Outline: Verify  waypoints on a Route from Southampton to Glasgow
-    Given I have route point as
-      | pointA              | pointB             |
-      | 50.896617,-1.400465 | 55.861284,-4.24996 |
-    And I have vehicle as "<vehicleType>"
-    And I have avoidances as "<avoidances>"
-    And I have weighting as "<routeType>"
-    When I request for a route
-    Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco          | waypointdesc                                             | azimuth | direction | time    | distance | avoidance |
-      | 1             | 50.896796,-1.400544 | Continue onto PLATFORM ROAD (A33)                        | 254.0   | W         | 3192    | 84.3     |           |
-      | 16            | 50.951921,-1.404239 | At roundabout, take exit 1 onto A33                      | 318.0   | NW        | 7083    | 187.0    |           |
-      | 17            | 50.953446,-1.403571 | Turn slight right onto M3                                | 28.0    | NE        | 566900  | 15747.6  |           |
-      | 18            | 51.07086,-1.292917  | At roundabout, take exit 2 onto A34 (WINCHESTER BY-PASS) | 284.0   | W         | 55129   | 1454.8   |           |
-      | 20            | 51.868385,-1.199845 | At roundabout, take exit 1 onto M40                      | 357.0   | N         | 2636747 | 73242.2  |           |
-      | 24            | 52.381175,-1.790061 | At roundabout, take exit 1 onto A34 (STRATFORD ROAD)     | 301.0   | NW        | 46514   | 1227.5   |           |
-
-    Examples: 
-      | vehicleType | avoidances | routeType |
-      | car         |            | fastest   |
-
-  @Smoke
-  Scenario Outline: Verify  waypoints on a Route from London to Birmingham and the total route time estimate
-    Given I have route point as
-      | pointA              | pointB              |
-      | 51.507229,-0.127581 | 52.481875,-1.898743 |
-    And I have vehicle as "<vehicleType>"
-    And I have avoidances as "<avoidances>"
-    And I have weighting as "<routeType>"
-    When I request for a route
-    Then The total route time should be not more than "<totalRouteTime>"
-
-    Examples: 
-      | vehicleType | avoidances | routeType | totalRouteTime |
-      | car         |            | fastest   | 03h00min       |
-
-  @Smoke @ServiceOnly
-  Scenario Outline: Verify  waypoints on a Route from Southampton to Glasgow
-    Given I have route point as
-      | pointA              | pointB             |
-      | 50.896617,-1.400465 | 55.861284,-4.24996 |
-    And I have vehicle as "<vehicleType>"
-    And I have avoidances as "<avoidances>"
-    And I have weighting as "<routeType>"
-    When I request for a route
-    Then I should be able to verify the trackPoints on the route map:
-      | trackPointco        |
-      | 52.52355,-1.902136  |
-      | 53.779418,-2.647821 |
-      | 54.304996,-2.646641 |
-      | 55.802602,-4.053713 |
-
-    Examples: 
-      | vehicleType | avoidances | routeType |
-      | car         |            | fastest   |
-
-  @Smoke
-  Scenario Outline: Verify  No Turn   (WSPIP-76:Eastley- TWYFORD ROAD )
-    Given I have route point as
-      | pointA              | pointB              |
-      | 50.972281,-1.350942 | 50.972212,-1.351183 |
-    And I have vehicle as "<vehicleType>"
-    And I have avoidances as "<avoidances>"
-    And I have weighting as "<routeType>"
-    When I request for a route
-    Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco          | waypointdesc                | azimuth | direction | time | distance | avoidance |
-      | 3             | 50.971952,-1.350891 | Turn left onto THE CRESCENT | 294.0   | NW        | 2981 | 37.3     |           |
-
-    Examples: 
-      | vehicleType | avoidances | routeType |
-      | car         |            | fastest   |
-
-  @Smoke
-  Scenario Outline: Verify  No Turn   (WSPIP-76:Eastley- Station Hill Road)
-    Given I have route point as
-      | pointA              | pointB             |
-      | 50.970024,-1.350267 | 50.97008,-1.350521 |
-    And I have vehicle as "<vehicleType>"
-    And I have avoidances as "<avoidances>"
-    And I have weighting as "<routeType>"
-    When I request for a route
-    Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco          | waypointdesc                      | azimuth | direction | time | distance | avoidance |
-      | 2             | 50.969817,-1.350504 | Continue onto STATION HILL (A335) | 180.0   | S         | 4583 | 57.3     |           |
-
-    Examples: 
-      | vehicleType | avoidances | routeType |
-      | car         |            | fastest   |
-
-  @Smoke
-  Scenario Outline: Verify  Mandatory Turn   (Alexandra Road-Hounslow- Fairfields Road)
-    Given I have route point as
-      | pointA             | pointB              |
-      | 51.47118,-0.363609 | 51.470254,-0.363412 |
-    And I have vehicle as "<vehicleType>"
-    And I have avoidances as "<avoidances>"
-    And I have weighting as "<routeType>"
-    When I request for a route
-    Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco          | waypointdesc                   | azimuth | direction | time | distance | avoidance |
-      | 2             | 51.470846,-0.363527 | Turn right onto LANSDOWNE ROAD | 259.0   | W         | 9934 | 124.2    |           |
-
-    Examples: 
-      | vehicleType | avoidances | routeType |
-      | car         |            | fastest   |
-
-  @WebOnly
-  Scenario Outline: Verify  Route using Full UK Address (Southampton to London)
-    Given I have route point as
-      | pointA                                                            | pointB                                 |
-      | ORDNANCE SURVEY, 4, ADANAC DRIVE, NURSLING, SOUTHAMPTON, SO16 0AS | 1, PICCADILLY ARCADE, LONDON, SW1Y 6NH |
-    And I have vehicle as "<vehicleType>"
-    And I have avoidances as "<avoidances>"
-    And I have weighting as "<routeType>"
-    When I request for a route
-    Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointdesc                                  |
-      | 3             | At roundabout, take exit 2 onto BROWNHILL WAY |
-      | 18            | Continue onto PICCADILLY (A4)                 |
-
-    Examples: 
-      | vehicleType | avoidances | routeType |
-      | car         |            | fastest   |
-
-  @WebOnly
-  Scenario Outline: Verify  Route using Full UK Address (Hounslow to Slough)
-    Given I have route point as
-      | pointA                              | pointB                                      |
-      | 131, TIVOLI ROAD, HOUNSLOW, TW4 6AS | 40, CHILTERN ROAD, BURNHAM, SLOUGH, SL1 7NH |
-    And I have vehicle as "<vehicleType>"
-    And I have avoidances as "<avoidances>"
-    And I have weighting as "<routeType>"
-    When I request for a route
-    Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointdesc                                   |
-      | 9             | At roundabout, take exit 1 onto BATH ROAD (A4) |
-      | 10            | Turn right onto HUNTERCOMBE LANE NORTH         |
-
-    Examples: 
-      | vehicleType | avoidances | routeType |
-      | car         |            | fastest   |
-
-  @Smoke
-  Scenario Outline: Verify a Roundabout(Charles Watts Way)
-    Given I have route point as
-      | pointA             | pointB              |
-      | 50.915416,-1.31902 | 50.915551,-1.294049 |
-    And I have vehicle as "<vehicleType>"
-    And I have avoidances as "<avoidances>"
-    And I have weighting as "<routeType>"
-    When I request for a route
-    Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco          | waypointdesc                                             | azimuth | direction | time  | distance | avoidance |
-      | 3             | 50.920147,-1.310351 | At roundabout, take exit 2 onto CHARLES WATTS WAY (A334) | 0.0     | N         | 17647 | 465.7    |           |
-
-    Examples: 
-      | vehicleType | avoidances | routeType |
-      | car         |            | fastest   |
-
-  @Smoke
-  Scenario Outline: Verify  nearest point of point using NearestPoint API
-    Given I have type as "<responseFormat>"
-    And My routing point for nearestPoint API as "<pointA>"
-    When I request a nearest point from from Nearest Point API
-    Then I should be able to verify the nearest point to be "<pointB>" at a distance of "<distance>"
-
-    Examples: 
-      | pointA                                 | pointB                                 | distance           |
-      | 51.878966,-0.903849                    | 51.875144098888576,-0.9107481891829116 | 636.3215777261629  |
-      | 53.101756,-1.954888                    | 53.10043020792586,-1.961414745138117   | 460.0011625834564  |
-      | 53.065293927002806,-1.9071498141906338 | 53.065293927002806,-1.9071498141906338 | 0                  |
-      | 52.784893,-1.84522                     | 52.79515894789604,-1.8521510478589918  | 1233.001210212637  |
-      | 52.79515894789604,-1.8521510478589918  | 52.79515894789604,-1.8521510478589918  | 0                  |
-      | 54.094977,-2.006081                    | 54.09420551570219,-2.0283477834242833  | 1454.551799711362  |
-      | 54.115309,-2.111881                    | 54.133065323525635,-2.131028334744908  | 2335.612435123903  |
-      | 54.095897,-2.144795                    | 54.08689388826998,-2.1488754559056935  | 1035.8644445463867 |
-      | 50.658849,-1.386463                    | 50.65520130477257,-1.4000444889283343  | 1039.7773305822475 |
-      | 56.025277,-4.917874                    | 56.02196904113215,-4.906092518708935   | 819.3253424080308  |
-      | 50.664175,-1.358463                    | 50.66192580003871,-1.3486298102579224  | 736.8284619868352  |
-
-  @Smoke
-  Scenario Outline: Verify  Route using 2 intermediate waypoints (Route-120 :Perth to Edinburgh via Stirling and Glasgow )
-    Given I have route point as
-      | pointA             | pointB              | pointC              | pointD              |
-      | 56.38721,-3.466273 | 56.136656,-3.970408 | 55.871665,-4.195067 | 55.950467,-3.208924 |
-    And I have vehicle as "<vehicleType>"
-    And I have avoidances as "<avoidances>"
-    And I have weighting as "<routeType>"
-    When I request for a route
-    Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco          | waypointdesc                | azimuth | direction | time   | distance | avoidance |
-      | 5             | 56.204647,-3.952177 | Turn slight left onto B8033 | 225.0   | SW        | 42144  | 585.4    |           |
-      | 22            | 55.871622,-4.198356 | Turn slight right onto M8   | 43.0    | NE        | 278576 | 7738.5   |           |
-
-    Examples: 
-      | vehicleType | avoidances | routeType |
-      | car         |            | shortest  |
-
-  @Smoke
-  Scenario Outline: Verify  Route using 2 intermediate waypoints (Route-120 :Perth to Edinburgh via Stirling and Glasgow )
-    Given I have route point as
-      | pointA             | pointB              | pointC              | pointD              |
-      | 56.38721,-3.466273 | 56.136656,-3.970408 | 55.871665,-4.195067 | 55.950467,-3.208924 |
-    And I have vehicle as "<vehicleType>"
-    And I have avoidances as "<avoidances>"
-    And I have weighting as "<routeType>"
-    When I request for a route
-    Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco          | waypointdesc                       | azimuth | direction | time   | distance | avoidance |
-      | 5             | 56.170837,-3.970499 | At roundabout, take exit 3 onto M9 | 91.0    | E         | 142970 | 3961.4   |           |
-      | 15            | 55.871772,-4.195164 | Continue onto M8                   | 243.0   | SW        | 10568  | 293.6    |           |
-
-    Examples: 
-      | vehicleType | avoidances | routeType |
-      | car         |            | fastest   |
