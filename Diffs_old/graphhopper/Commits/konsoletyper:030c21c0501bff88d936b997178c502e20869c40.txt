diff --git a/core/src/main/java/com/graphhopper/storage/GraphHopperStorage.java b/core/src/main/java/com/graphhopper/storage/GraphHopperStorage.java
index 7b829d0d0b..bcca68db53 100644
--- a/core/src/main/java/com/graphhopper/storage/GraphHopperStorage.java
+++ b/core/src/main/java/com/graphhopper/storage/GraphHopperStorage.java
@@ -1452,9 +1452,10 @@ protected void initStorage()
     protected int loadNodesHeader()
     {
         int hash = nodes.getHeader(0);
-        if (hash != getClass().getName().hashCode())
+        // TODO: maybe should use JVM-independent hashing?
+        /*if (hash != getClass().getName().hashCode())
             throw new IllegalStateException("Cannot load the graph when using instance of "
-                    + getClass().getName() + " and location: " + dir);
+                    + getClass().getName() + " and location: " + dir);*/
 
         nodeEntryBytes = nodes.getHeader(1 * 4);
         nodeCount = nodes.getHeader(2 * 4);
diff --git a/graphhopper-teavm/src/main/java/com/graphhopper/teavm/Base64.java b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/Base64.java
index d0bd0c0cb1..acbc26febd 100644
--- a/graphhopper-teavm/src/main/java/com/graphhopper/teavm/Base64.java
+++ b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/Base64.java
@@ -27,9 +27,9 @@ public static String encode(byte[] bytes) {
         int j = 0;
         int sz = (bytes.length / 3) * 3;
         for (int i = 0; i < sz; i += 3, j += 4) {
-            buffer = (bytes[i + 0] << 16) |
-                     (bytes[i + 1] <<  8) |
-                     (bytes[i + 2] <<  0);
+            buffer = ((bytes[i + 0] & 0xFF) << 16) |
+                     ((bytes[i + 1] & 0xFF) <<  8) |
+                     ((bytes[i + 2] & 0xFF) <<  0);
             printBuffer(chars, buffer, j);
         }
         switch (bytes.length % 3) {
diff --git a/graphhopper-teavm/src/main/java/com/graphhopper/teavm/GraphhopperJsonGenerator.java b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/GraphhopperJsonGenerator.java
index ec689da3c1..80bb111422 100644
--- a/graphhopper-teavm/src/main/java/com/graphhopper/teavm/GraphhopperJsonGenerator.java
+++ b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/GraphhopperJsonGenerator.java
@@ -8,6 +8,7 @@
 import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.storage.DataAccess;
 import com.graphhopper.storage.GHDirectory;
+import com.graphhopper.storage.index.LocationIndexTree;
 
 /**
  *
@@ -22,6 +23,9 @@ public static void main(String[] args) throws IOException {
         gh.setEncodingManager(new EncodingManager(new Bike2WeightFlagEncoder()));
         gh.set3D(true);
         gh.importOrLoad();
+        LocationIndexTree locTree = new LocationIndexTree(gh.getGraph(), gh.getGraph().getDirectory());
+        locTree.prepareIndex();
+        locTree.flush();
         GHDirectory dir = (GHDirectory)gh.getGraph().getDirectory();
         byte[] buffer = new byte[1024];
         PrintStream out = new PrintStream(new File(args[1]));
@@ -32,7 +36,7 @@ public static void main(String[] args) throws IOException {
             byte[] headerBytes = new byte[80];
             for (int i = 0; i < 20; ++i) {
                 int val = dataAccess.getHeader(i * 4);
-                headerBytes[i * 4 + 0] = (byte)val;
+                headerBytes[i * 4 + 0] = (byte)(val & 0xFF);
                 headerBytes[i * 4 + 1] = (byte)(val >>> 8);
                 headerBytes[i * 4 + 2] = (byte)(val >>> 16);
                 headerBytes[i * 4 + 3] = (byte)(val >>> 24);
@@ -45,7 +49,7 @@ public static void main(String[] args) throws IOException {
                 int sz = (int)(Math.min(i + buffer.length, dataAccess.getCapacity()) - i);
                 for (int j = 0; j < sz; j += 4) {
                     int val = dataAccess.getInt(i + j);
-                    buffer[j + 0] = (byte)(val >>> 0);
+                    buffer[j + 0] = (byte)(val & 0xFF);
                     buffer[j + 1] = (byte)(val >>> 8);
                     buffer[j + 2] = (byte)(val >>> 16);
                     buffer[j + 3] = (byte)(val >>> 24);
diff --git a/graphhopper-teavm/src/main/java/com/graphhopper/teavm/InMemoryDirectory.java b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/InMemoryDirectory.java
index ae5c17965e..2f381199bb 100644
--- a/graphhopper-teavm/src/main/java/com/graphhopper/teavm/InMemoryDirectory.java
+++ b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/InMemoryDirectory.java
@@ -21,7 +21,7 @@ public String getLocation() {
 
     @Override
     public ByteOrder getByteOrder() {
-        return ByteOrder.BIG_ENDIAN;
+        return ByteOrder.LITTLE_ENDIAN;
     }
 
     @Override
diff --git a/graphhopper-teavm/src/main/java/com/graphhopper/teavm/Main.java b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/Main.java
index 646b4fdb9a..00a9620207 100644
--- a/graphhopper-teavm/src/main/java/com/graphhopper/teavm/Main.java
+++ b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/Main.java
@@ -20,7 +20,7 @@ public static void main(String[] args) {
         InMemoryDirectory directory = new InMemoryDirectory();
         readAll(directory);
         EncodingManager encodingManager = new EncodingManager(new BikeFlagEncoder());
-        GraphHopperStorage graph = new GraphHopperStorage(directory, encodingManager, false);
+        GraphHopperStorage graph = new GraphHopperStorage(directory, encodingManager, true);
         graph.loadExisting();
         FlagEncoder encoder = encodingManager.getSingle();
 
@@ -28,7 +28,7 @@ public static void main(String[] args) {
         DijkstraBidirection algo = new DijkstraBidirection(graph, encoder, weighting);
 
         LocationIndexTree locationIndex = new LocationIndexTree(graph, directory);
-        locationIndex.prepareIndex();
+        locationIndex.loadExisting();
         int fromNode = locationIndex.findID(55.762523, 37.408784);
         int toNode = locationIndex.findID(55.784806, 37.708047);
 
@@ -57,7 +57,8 @@ private static void readAll(InMemoryDirectory directory) {
             }
             byte[] header = Base64.decode(entry.getHeader());
             for (int j = 0; j < 80; j += 4) {
-                int val = (header[j]) | (header[j + 1] << 8) | (header[j + 2] << 16) | (header[j + 3] << 24);
+                int val = (header[j] & 0xFF) | ((header[j + 1] & 0xFF) << 8) | ((header[j + 2] & 0xFF) << 16) |
+                        ((header[j + 3] & 0xFF) << 24);
                 file.setHeader(j, val);
             }
         }
