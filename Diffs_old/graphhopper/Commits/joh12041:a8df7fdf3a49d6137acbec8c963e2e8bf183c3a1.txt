diff --git a/core/src/main/java/com/graphhopper/GHAltRouting.java b/core/src/main/java/com/graphhopper/GHAltRouting.java
deleted file mode 100644
index 93a9989bd2..0000000000
--- a/core/src/main/java/com/graphhopper/GHAltRouting.java
+++ /dev/null
@@ -1,31 +0,0 @@
-package com.graphhopper;
-
-import com.graphhopper.routing.util.FlagEncoder;
-import com.graphhopper.routing.util.ScenicWeighting;
-import com.graphhopper.routing.weighting.Weighting;
-import com.graphhopper.routing.util.HintsMap;
-
-import java.util.HashMap;
-
-/**
- * Created by isaac on 4/13/16.
- */
-public class GHAltRouting extends GraphHopper {
-
-    HashMap<Integer, Integer> scenicEdges;
-    public void determineScenicEdges() {
-        scenicEdges = null;
-    }
-
-    @Override
-    public Weighting createWeighting( HintsMap wMap, FlagEncoder encoder)
-    {
-        String weighting = wMap.getWeighting();
-        if ("SCENIC".equalsIgnoreCase(weighting)) {
-            return new ScenicWeighting(encoder, scenicEdges);
-        }
-        else {
-            return super.createWeighting(wMap, encoder);
-        }
-    }
-}
diff --git a/reader-osm/src/main/java/com/graphhopper/reader/osm/runKSP.java b/reader-osm/src/main/java/com/graphhopper/reader/osm/runKSP.java
index f70f5beb42..74b2e25987 100644
--- a/reader-osm/src/main/java/com/graphhopper/reader/osm/runKSP.java
+++ b/reader-osm/src/main/java/com/graphhopper/reader/osm/runKSP.java
@@ -223,9 +223,8 @@ public void getGridValues() throws Exception {
     }
 
     public void getGridCTs() throws Exception {
-        gridBeauty = new HashMap<>();
-
-        for (String fn : gridValuesFNs) {
+        gridCT = new HashMap<>();
+        for (String fn : gridCTsFNs) {
             Scanner sc_in = new Scanner(new File(fn));
             sc_in.nextLine();
             String line;
@@ -236,7 +235,7 @@ public void getGridCTs() throws Exception {
                 line = sc_in.nextLine();
                 vals = line.split(",");
                 try {
-                    rc = vals[0] + "," + vals[1];
+                    rc = vals[1] + "," + vals[0];
                     ct = Integer.valueOf(vals[2]);
                     gridCT.put(rc, ct);
                 } catch (NullPointerException ex) {
@@ -291,8 +290,12 @@ public void writeOutput(FileWriter fw, int i, String optimized, String od_id, Pa
         for (Instruction instruction : il) {
             maneuvers.add(instruction.getSimpleTurnDescription());
         }
+        String routetype = "main";
+        if (optimized.equalsIgnoreCase("alternative")) {
+            routetype = "alternative";
+        }
 
-        fw.write(od_id + ",main," + "\"[" + pointList + "]\"," + timeInSec + "," + distance + "," + numDirections +
+        fw.write(od_id + "," + routetype + "," + "\"[" + pointList + "]\"," + timeInSec + "," + distance + "," + numDirections +
                 ",\"" + maneuvers.toString() + "\"" + "," + score + "," + simplicity + "," + numCTs + System.getProperty("line.separator"));
         System.out.println(i + " (" + optimized + "): Distance: " + distance + "m;\tTime: " + timeInSec + "sec;\t# Directions: " + numDirections + ";\tSimplicity: " + simplicity + ";\tScore: " + score + ";\tNumCts: " + numCTs);
 
@@ -331,6 +334,8 @@ public void process_routes() throws Exception {
         outputFiles.add(new FileWriter(outputPointsFN.replaceFirst(".csv","_ugly.csv"), true));
         outputFiles.add(new FileWriter(outputPointsFN.replaceFirst(".csv","_simple.csv"), true));
         outputFiles.add(new FileWriter(outputPointsFN.replaceFirst(".csv","_fast.csv"), true));
+        outputFiles.add(new FileWriter(outputPointsFN.replaceFirst(".csv","_shortest.csv"), true));
+        outputFiles.add(new FileWriter(outputPointsFN.replaceFirst(".csv","_alt.csv"), true));
 
         for (FileWriter fw : outputFiles) {
             fw.write(outputheader);
@@ -381,7 +386,6 @@ public void process_routes() throws Exception {
                     setLocale(Locale.US).
                     setAlgorithm("ksp");
             GHResponse rsp = hopper.route(req);
-            System.out.println("Num Responses: " + rsp.getAll().size());
 
             // first check for errors
             if (rsp.hasErrors()) {
@@ -399,12 +403,12 @@ public void process_routes() throws Exception {
 
             // Get All Routes (up to 10K right now)
             List<PathWrapper> paths = rsp.getAll();
+            System.out.println("Num Responses: " + paths.size());
 
             // Score each route on beauty to determine most beautiful
             int j = 0;
             float bestscore = -1000;
             int routeidx = -1;
-            int numCTs;
             for (PathWrapper path : paths) {
                 float score = getBeauty(path);
                 if (score > bestscore) {
@@ -454,6 +458,62 @@ public void process_routes() throws Exception {
             PathWrapper bestPath = paths.get(0);
             beauty = getBeauty(bestPath);
             writeOutput(outputFiles.get(3), i, "Fast", od_id, bestPath, beauty, getNumCTs(bestPath));
+
+            // Shortest Route
+            req = new GHRequest(points[0], points[1], points[2], points[3]).  // latFrom, lonFrom, latTo, lonTo
+                    setWeighting("shortest").
+                    setVehicle("car").
+                    setLocale(Locale.US).
+                    setAlgorithm("dijkstrabi");
+            rsp = hopper.route(req);
+
+            // first check for errors
+            if (rsp.hasErrors()) {
+                // handle them!
+                System.out.println(rsp.getErrors().toString());
+                System.out.println(i + ": Skipping shortest path.");
+                continue;
+            }
+
+            // Get shortest path
+            bestPath = rsp.getBest();
+            beauty = getBeauty(bestPath);
+            writeOutput(outputFiles.get(4), i, "Shrt", od_id, bestPath, beauty, getNumCTs(bestPath));
+
+            // Alternative Route
+            req = new GHRequest(points[0], points[1], points[2], points[3]).  // latFrom, lonFrom, latTo, lonTo
+                    setWeighting("fastest").
+                    setVehicle("car").
+                    setLocale(Locale.US).
+                    setAlgorithm("alternative_route");
+            rsp = hopper.route(req);
+
+            // first check for errors
+            if (rsp.hasErrors()) {
+                // handle them!
+                System.out.println(rsp.getErrors().toString());
+                System.out.println(i + ": Skipping alternative path.");
+                String outputRow = od_id + ",alternative," + "\"[(" + points[0] + "," + points[1] + "),(" + points[2] + "," + points[3]
+                        + ")]\"," + "-1,-1,-1,[],-1,-1,-1" + System.getProperty("line.separator");
+                FileWriter fw = outputFiles.get(5);
+                fw.write(outputRow);
+                continue;
+            }
+
+            // Get Alt Routes (should be 2, of which first is the fastest path)
+            paths = rsp.getAll();
+            if (paths.size() < 2) {
+                System.out.println(i + ": Did not return an alternative path.");
+                String outputRow = od_id + ",alternative," + "\"[(" + points[0] + "," + points[1] + "),(" + points[2] + "," + points[3]
+                        + ")]\"," + "-1,-1,-1,[],-1,-1,-1" + System.getProperty("line.separator");
+                outputFiles.get(5).write(outputRow);
+                continue;
+            }
+            PathWrapper altpath = paths.get(1);
+            beauty = getBeauty(altpath);
+            writeOutput(outputFiles.get(5), i, "Altn", od_id, altpath, beauty, getNumCTs(altpath));
+
+
         }
 
         // Finished analysis: close filewriters and indicate how many paths skipped
@@ -466,6 +526,10 @@ public void process_routes() throws Exception {
     public static void main(String[] args) throws Exception {
 
         // PBFs from: https://mapzen.com/data/metro-extracts/
+
+        // SF Grid
+        //runKSP ksp = new runKSP("SF", "grid");
+
         // SF Random
         //runKSP ksp = new runKSP("SF", "rand");
 
@@ -474,26 +538,23 @@ public static void main(String[] args) throws Exception {
 
         // NYC Random
         //runKSP ksp = new runKSP("NYC", "rand");
+
         // BOS Check
         //runKSP ksp = new runKSP("BOS", "check");
 
-        // SF Grid
-        //runKSP ksp = new runKSP("SF", "grid");
         //ksp.setDataSources();
         //ksp.getGridValues();
         //ksp.prepareGraphHopper();
-        //ksp.process_routes();  // get Graphhopper routes
         //ksp.prepMapMatcher();  // score external API routes
         //ksp.PointsToPath("../data/output/sf_grid_mapquest_gpx.csv", "../data/output/sf_grid_mapquest_ghenhanced_sigma100_transitionDefault.csv");
         //ksp.PointsToPath("../data/output/sf_grid_google_gpx.csv", "../data/output/sf_grid_google_ghenhanced_sigma100_transitionDefault.csv");
+        //ksp.PointsToPath("../data/output/nyc_grid_mapquest_gpx.csv", "../data/output/nyc_grid_mapquest_ghenhanced_sigma100_transitionDefault.csv");
+        //ksp.PointsToPath("../data/output/nyc_grid_google_gpx.csv", "../data/output/nyc_grid_google_ghenhanced_sigma100_transitionDefault.csv");
 
-        // NYC Grid
         ksp.setDataSources();
         ksp.getGridValues();
         ksp.prepareGraphHopper();
+        ksp.getGridCTs();
         ksp.process_routes();  // get Graphhopper routes
-        //ksp.prepMapMatcher();  // score external API routes
-        //ksp.PointsToPath("../data/output/nyc_grid_mapquest_gpx.csv", "../data/output/nyc_grid_mapquest_ghenhanced_sigma100_transitionDefault.csv");
-        //ksp.PointsToPath("../data/output/nyc_grid_google_gpx.csv", "../data/output/nyc_grid_google_ghenhanced_sigma100_transitionDefault.csv");
     }
 }
