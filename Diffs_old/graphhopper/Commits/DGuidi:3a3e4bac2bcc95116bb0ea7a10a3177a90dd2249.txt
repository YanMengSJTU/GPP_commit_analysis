diff --git a/core/src/main/java/com/graphhopper/routing/util/FastestWeighting.java b/core/src/main/java/com/graphhopper/routing/util/FastestWeighting.java
index a5c3909d50..11d8816c26 100644
--- a/core/src/main/java/com/graphhopper/routing/util/FastestWeighting.java
+++ b/core/src/main/java/com/graphhopper/routing/util/FastestWeighting.java
@@ -17,6 +17,8 @@
  */
 package com.graphhopper.routing.util;
 
+import java.sql.SQLException;
+
 import com.graphhopper.util.EdgeIteratorState;
 
 /**
diff --git a/core/src/main/java/com/graphhopper/routing/util/ShortestWeighting.java b/core/src/main/java/com/graphhopper/routing/util/ShortestWeighting.java
index afb9514524..2a72dc0fe6 100644
--- a/core/src/main/java/com/graphhopper/routing/util/ShortestWeighting.java
+++ b/core/src/main/java/com/graphhopper/routing/util/ShortestWeighting.java
@@ -17,6 +17,8 @@
  */
 package com.graphhopper.routing.util;
 
+import java.sql.SQLException;
+
 import com.graphhopper.util.EdgeIteratorState;
 
 /**
diff --git a/core/src/main/java/com/graphhopper/routing/util/Weighting.java b/core/src/main/java/com/graphhopper/routing/util/Weighting.java
index 939b9f0b97..8fadee8d29 100644
--- a/core/src/main/java/com/graphhopper/routing/util/Weighting.java
+++ b/core/src/main/java/com/graphhopper/routing/util/Weighting.java
@@ -17,6 +17,8 @@
  */
 package com.graphhopper.routing.util;
 
+import java.sql.SQLException;
+
 import com.graphhopper.util.EdgeIteratorState;
 
 /**
@@ -39,6 +41,7 @@
      * case of a bidirectional search.
      * @return the calculated weight with the specified velocity has to be in the range of 0 and
      * +Infinity. Make sure your method does not return NaN which can e.g. occur for 0/0.
+     * @throws SQLException 
      */
     double calcWeight( EdgeIteratorState edge, boolean reverse );
 }
diff --git a/web/src/main/java/com/graphhopper/http/MapaalGraphHopperServlet.java b/web/src/main/java/com/graphhopper/http/MapaalGraphHopperServlet.java
index 9479acc28f..959fed21ff 100644
--- a/web/src/main/java/com/graphhopper/http/MapaalGraphHopperServlet.java
+++ b/web/src/main/java/com/graphhopper/http/MapaalGraphHopperServlet.java
@@ -1,15 +1,21 @@
 package com.graphhopper.http;
 
+import it.esalab.mapaal.http.repository.ForbiddenEdgesRepository;
+
+import java.io.BufferedReader;
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
+import java.util.Scanner;
 
+import javax.servlet.ServletException;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
 
+import org.json.JSONArray;
 import org.json.JSONException;
 import org.json.JSONObject;
 
@@ -24,8 +30,30 @@
  */
 public class MapaalGraphHopperServlet extends GraphHopperServlet {
 
-  private static final long serialVersionUID = 5682815885200619893L;
+	private static final long serialVersionUID = 5682815885200619893L;
+
+	private ForbiddenEdgesRepository nodesHandler = new ForbiddenEdgesRepository();
 
+	@Override
+	protected void doPost(HttpServletRequest req, HttpServletResponse resp)
+			throws ServletException, IOException {
+		if ("POST".equalsIgnoreCase(req.getMethod())) {
+			Scanner s = new Scanner(req.getInputStream(), "UTF-8")
+					.useDelimiter("\\A");
+			String body = s.hasNext() ? s.next() : "";
+			if(body.equals("")){
+				  throw new RuntimeException("Empty report data from post request");
+			}
+			else{
+				JSONArray reportArray = new JSONArray(body);
+				nodesHandler.reciveReport(reportArray);
+			}
+		}
+		// successivamente eseguo un normale routing TODO: accertarsi che
+		// l'inserimento sia andato a buon fine
+		doGet(req, resp);
+	}
+  
   @Override
   protected String routingType(HttpServletRequest req) {
     String param = getParam(req, "routingType", null);
diff --git a/web/src/main/webapp/index.html b/web/src/main/webapp/index.html
index 4aba05dcea..1dbe558c3a 100644
--- a/web/src/main/webapp/index.html
+++ b/web/src/main/webapp/index.html
@@ -60,7 +60,8 @@
                     </div>
                     <div class="clear"> </div>                
                     <input id="searchButton" type="submit" value="Search">                
-                </form>      
+                </form>
+                      
                 <div id="exportLink" title="Static Link" class="left"><a href="/maps"><img src='img/link.png'></a></div>
                 <div id="gpxExportButton" title="GPX Download"><a href=""><img alt="gpx" src='img/gpx.png'></a></div>
                 <div id="hosting">Powered by <a href='http://graphhopper.com/#enterprise'>GraphHopper API</a></div>            
diff --git a/web/src/main/webapp/js/tests.js b/web/src/main/webapp/js/tests.js
index b00f33494f..a9224ad482 100644
--- a/web/src/main/webapp/js/tests.js
+++ b/web/src/main/webapp/js/tests.js
@@ -1,6 +1,38 @@
 $(function () {
-  var host = 'http://localhost:8989/',
-	createRequest = function (url) {
+  var host, createDefaultRequest,createReroutingRequest, decodePath, formatCoord, formatInstruction, url, jsondata;
+
+  host = 'http://localhost:8989/';
+  
+  url = [
+         host + 'route?',
+         'point=43.612947,13.505276',
+         'point=43.611887,13.50474',
+         'vehicle=mapaal',
+         'debug=true'
+       ].join('&');
+  
+  jsonData=[{
+	    "nodes": [127848207,1873976113],
+	    "poi": {
+	      "type": "Feature",
+	      "geometry": {
+	        "type": "Point",
+	        "coordinates": [43.6125232,13.5048275]
+	      },
+	      "properties": {
+	        "typename": "POI"
+	      }
+	    },
+	    "details": {
+	      "sensor": {
+	        "type": "test automatico",
+	        "info": "segnalazione da test automatico",
+	        "details": "segnalazione da test automatico, more data"
+	      }
+	    }
+	  }];
+
+	createDefaultRequest = function (url) {
 	  return $.ajax({
 	    type: 'GET',
 	    dataType: 'json',
@@ -13,7 +45,27 @@ $(function () {
 		.always(function () {
 		  start();
 		});
-	},
+	};
+
+
+  createReroutingRequest = function (url) {
+    return $.ajax({
+      type: 'POST',
+      dataType: 'json',
+      timeout: 30000,
+      url: url,
+      processData: false,
+      contentType: "application/json;",
+      data: JSON.stringify(jsonData)
+    })
+    .fail(function (x, text) {
+      ok(false, 'ajax request failed: ' + text);
+    })
+    .always(function () {
+      start();
+    });
+  };
+
 	decodePath = function (path) {
 	  var encoded = path.points,
 			len = encoded.length,
@@ -45,10 +97,12 @@ $(function () {
 	    arr.push([lng * 1e-5, lat * 1e-5]);
 	  }
 	  return arr;
-	},
+	};
+
 	formatCoord = function (coord) {
 	  return coord[0].toFixed(6) + ' ' + coord[1].toFixed(6);
-	},
+	};
+
 	formatInstruction = function (instr) {
 	  var nodes = instr.nodes || [0, 0];
 	  return [instr.text, ': [', nodes[0] || 'null', '-', nodes[1] || 'null', ']'].join('');
@@ -56,19 +110,13 @@ $(function () {
 
   asyncTest("default routing", function () {
     expect(6);
-    var url = [
-			host + 'route?',
-			'point=43.165858,13.724729',
-			'point=43.167963,13.726033',
-			'routingType=mapaal',
-			'debug=true'
-    ].join('&'),
-		req = createRequest(url)
+    var req = createDefaultRequest(url)
 			.done(function (json) {
-			  var info = json.info,
-					paths = json.paths,
-					path;
-			  console.log(json);
+			  var info, paths, path;
+
+        info = json.info;
+				paths = json.paths;
+				console.log(json);
 			  ok(info, 'request completed in: ' + info.took);
 			  ok(paths && paths.length && paths.length === 1, 'paths valid');
 			  path = paths[0];
@@ -79,7 +127,31 @@ $(function () {
 			  ok(points, 'data: ' + _(points).map(formatCoord).join(','));
 
 			  var instructions = path.instructions;
-			  ok(instructions && instructions.length === 6, 'instructions: ' + _(instructions).map(formatInstruction).join(','));
+			  ok(instructions && instructions.length === 4, 'instructions: ' + _(instructions).map(formatInstruction).join(','));
 			});
   });
+
+  asyncTest("re-routing request", function () {
+    expect(6);
+    var req = createReroutingRequest(url)
+      .done(function (json) {
+        var info, paths, path;
+
+        info = json.info;
+        paths = json.paths;
+        console.log(json);
+        ok(info, 'request completed in: ' + info.took);
+        ok(paths && paths.length && paths.length === 1, 'paths valid');
+        path = paths[0];
+        ok(path, 'path found');
+
+        ok(!path.points_encoded, 'points are not encoded');
+        var points = path.points.coordinates;
+        ok(points, 'data: ' + _(points).map(formatCoord).join(','));
+
+        var instructions = path.instructions;
+        ok(instructions && instructions.length === 6, 'instructions: ' + _(instructions).map(formatInstruction).join(','));
+      });
+  });
+
 });
diff --git a/web/src/main/webapp/tests.html b/web/src/main/webapp/tests.html
index e1885ae07d..e53d734c57 100644
--- a/web/src/main/webapp/tests.html
+++ b/web/src/main/webapp/tests.html
@@ -3,6 +3,9 @@
 <head>
 	<meta charset="utf-8">
 	<title>GraphHopper Tests</title>
+	<style>
+		  body {font-family: "Helvetica Neue Light", "HelveticaNeue-Light", "Helvetica Neue", Calibri, Helvetica, Arial, sans-serif;}
+	</style>
 	<link rel="stylesheet" href="css/qunit-1.14.0.css">
 </head>
 <body>
@@ -12,5 +15,15 @@
 	<script src="js/jquery-2.1.0.min.js"></script>        	
 	<script src="js/qunit-1.14.0.js"></script>
 	<script src="js/tests.js"></script>	
+		
+	<div>	
+	<h1>Nota</h1>
+	<p>
+	Il test esegue prima un default routing su due nodi noti , successivamente inserisce una segnalazione di tipo temporaneo con la conseguente richiesta di re-routing 
+	verificando quindi che il numero di nodi percorsi è aumentato.<br/> 
+	Se viene eseguito più di una volta in un ora (tempo di scadenza di un nodo temporaneo) il test di default routing 
+	fallisce perchè ottiene il percorso con le deviaizoni , è necessario quindi ripulire manualmente il database o attendere la scadenza del nodo temporaneo inserito precedentemente.
+	</p> 
+	</div>
 </body>
 </html>
\ No newline at end of file
