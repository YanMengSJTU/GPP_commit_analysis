diff --git a/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java b/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
index 8c811839a3..b6c0a56855 100644
--- a/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
+++ b/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
@@ -72,13 +72,13 @@
 
 	@Override
 	public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes )
-	        throws ServletException, IOException
+			throws ServletException, IOException
 	{
 		getGHResponse(httpReq, httpRes);
 	}
 
 	public GHResponse getGHResponse( HttpServletRequest httpReq, HttpServletResponse httpRes )
-	        throws JSONException, IOException
+			throws JSONException, IOException
 	{
 		boolean writeGPX = "gpx".equalsIgnoreCase(getParam(httpReq, "type", "json"));
 		double minPathPrecision = getDoubleParam(httpReq, "way_point_max_distance", 1d);
@@ -90,7 +90,7 @@ public GHResponse getGHResponse( HttpServletRequest httpReq, HttpServletResponse
 		String vehicleStr = getParam(httpReq, "vehicle", null);
 		String weighting = getParam(httpReq, "weighting", "fastest");
 		String algoStr = getParam(httpReq, "algorithm", null);
-		String localeStr = getParam(httpReq, "locale", "en").replace('-', '_');
+		String localeStr = getParam(httpReq, "locale", "en_GB").replace('-', '_');
 
 		StopWatch sw = new StopWatch().start();
 
@@ -115,29 +115,29 @@ public GHResponse getGHResponse( HttpServletRequest httpReq, HttpServletResponse
 			// coordinates
 
 			if (!new CaseInsensitiveStringListValidator()
-			        .isValid(localeStr, TranslationMap.LOCALES))
+			.isValid(localeStr, TranslationMap.LOCALES))
 			{
 				String errMesg = buildErrorMessageString(localeStr, "locale",
-				        TranslationMap.LOCALES);
+						TranslationMap.LOCALES);
 				ghRsp = new GHResponse()
-				        .addError(new InvalidParameterException(errMesg.toString()));
+				.addError(new InvalidParameterException(errMesg.toString()));
 			} else if (null != algoStr
-			        && !new CaseInsensitiveStringListValidator().isValid(algoStr,
-			                AlgorithmOptions.ASTAR, AlgorithmOptions.ASTAR_BI,
-			                AlgorithmOptions.DIJKSTRA, AlgorithmOptions.DIJKSTRA_BI,
-			                AlgorithmOptions.DIJKSTRA_ONE_TO_MANY))
+					&& !new CaseInsensitiveStringListValidator().isValid(algoStr,
+							AlgorithmOptions.ASTAR, AlgorithmOptions.ASTAR_BI,
+							AlgorithmOptions.DIJKSTRA, AlgorithmOptions.DIJKSTRA_BI,
+							AlgorithmOptions.DIJKSTRA_ONE_TO_MANY))
 			{
 				String errMesg = buildErrorMessageString(algoStr, "algorithm",
-				        AlgorithmOptions.ASTAR, AlgorithmOptions.ASTAR_BI,
-				        AlgorithmOptions.DIJKSTRA, AlgorithmOptions.DIJKSTRA_BI,
-				        AlgorithmOptions.DIJKSTRA_ONE_TO_MANY);
+						AlgorithmOptions.ASTAR, AlgorithmOptions.ASTAR_BI,
+						AlgorithmOptions.DIJKSTRA, AlgorithmOptions.DIJKSTRA_BI,
+						AlgorithmOptions.DIJKSTRA_ONE_TO_MANY);
 				ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg));
 			} else if (null != weighting
-			        && !new CaseInsensitiveStringListValidator().isValid(weighting, "fastest",
-							"shortest"))
+					&& !new CaseInsensitiveStringListValidator().isValid(weighting, "fastest",
+			                "shortest"))
 			{
 				String errMesg = buildErrorMessageString(weighting, "weighting", "fastest",
-						"shortest");
+				        "shortest");
 				ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg));
 			} else if (!new BooleanValidator().isValid(instructionsString))
 			{
@@ -146,7 +146,7 @@ public GHResponse getGHResponse( HttpServletRequest httpReq, HttpServletResponse
 			} else if (!new BooleanValidator().isValid(pointsEncodedString))
 			{
 				String errMesg = buildBooleanErrorMessageString(pointsEncodedString,
-				        "points_encoded");
+						"points_encoded");
 				ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg));
 			} else if (!new BooleanValidator().isValid(calcPointsString))
 			{
@@ -164,8 +164,8 @@ public GHResponse getGHResponse( HttpServletRequest httpReq, HttpServletResponse
 			{
 				String supported = hopper.getGraph().getEncodingManager().toString();
 				String errMesg = String.format(
-				        "Vehicle %s is not a valid vehicle. Valid vehicles are %s", vehicleStr,
-				        supported);
+						"Vehicle %s is not a valid vehicle. Valid vehicles are %s", vehicleStr,
+						supported);
 				ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg));
 			} else if (!new BooleanValidator().isValid(noThroughAccessString))
 			{
@@ -175,7 +175,7 @@ public GHResponse getGHResponse( HttpServletRequest httpReq, HttpServletResponse
 			} else if (enableElevation && !hopper.hasElevation())
 			{
 				ghRsp = new GHResponse().addError(new InvalidParameterException(
-				        "Elevation not supported!"));
+						"Elevation not supported!"));
 			} else
 			{
 				FlagEncoder algoVehicle = hopper.getEncodingManager().getEncoder(vehicleStr);
@@ -189,7 +189,7 @@ public GHResponse getGHResponse( HttpServletRequest httpReq, HttpServletResponse
 					{
 						AbstractFlagEncoder abstractFlagEncoder = (AbstractFlagEncoder) algoVehicle;
 						List<EncoderDecorator> encoderDecorators = abstractFlagEncoder
-						        .getEncoderDecorators();
+								.getEncoderDecorators();
 						if (encoderDecorators != null)
 						{
 							for (EncoderDecorator encoderDecorator : encoderDecorators)
@@ -198,8 +198,8 @@ public GHResponse getGHResponse( HttpServletRequest httpReq, HttpServletResponse
 								{
 									AbstractAvoidanceDecorator abstractAvoidanceDecorator = (AbstractAvoidanceDecorator) encoderDecorator;
 									allowedAvoidances.addAll(Arrays
-									        .asList(abstractAvoidanceDecorator
-									                .getEdgeAttributesOfInterestNames()));
+											.asList(abstractAvoidanceDecorator
+													.getEdgeAttributesOfInterestNames()));
 								}
 							}
 						}
@@ -210,9 +210,9 @@ public GHResponse getGHResponse( HttpServletRequest httpReq, HttpServletResponse
 						if (!allowedAvoidances.contains(avoidance.trim()))
 						{
 							String errMesg = buildErrorMessageString(avoidance, "avoidances",
-							        allowedAvoidances);
+									allowedAvoidances);
 							ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg
-							        .toString()));
+									.toString()));
 						}
 					}
 				}
@@ -223,9 +223,9 @@ public GHResponse getGHResponse( HttpServletRequest httpReq, HttpServletResponse
 
 					initHints(request, httpReq.getParameterMap());
 					request.setVehicle(algoVehicle.toString()).setWeighting(weighting)
-					        .setAlgorithm(algoStr).setLocale(localeStr).getHints()
-					        .put("calcPoints", calcPoints).put("instructions", enableInstructions)
-					        .put("wayPointMaxDistance", minPathPrecision);
+					.setAlgorithm(algoStr).setLocale(localeStr).getHints()
+					.put("calcPoints", calcPoints).put("instructions", enableInstructions)
+					.put("wayPointMaxDistance", minPathPrecision);
 					ghRsp = hopper.route(request);
 				}
 			}
@@ -236,9 +236,9 @@ public GHResponse getGHResponse( HttpServletRequest httpReq, HttpServletResponse
 		{
 			float took = sw.stop().getSeconds();
 			String infoStr = httpReq.getRemoteAddr() + " " + httpReq.getLocale() + " "
-			        + httpReq.getHeader("User-Agent");
+					+ httpReq.getHeader("User-Agent");
 			String logStr = httpReq.getQueryString() + " " + infoStr + " " + infoPoints + ", took:"
-			        + took + ", " + algoStr + ", " + weighting + ", " + vehicleStr;
+					+ took + ", " + algoStr + ", " + weighting + ", " + vehicleStr;
 
 			if (ghRsp.hasErrors())
 			{
@@ -246,8 +246,8 @@ public GHResponse getGHResponse( HttpServletRequest httpReq, HttpServletResponse
 				logger.info("GraphHopperServlet.getGHResponse(ERROR)");
 			} else
 				logger.info(logStr + ", distance: " + ghRsp.getDistance() + ", time:"
-				        + Math.round(ghRsp.getTime() / 60000f) + "min, points:"
-				        + ghRsp.getPoints().getSize() + ", debug - " + ghRsp.getDebugInfo());
+						+ Math.round(ghRsp.getTime() / 60000f) + "min, points:"
+						+ ghRsp.getPoints().getSize() + ", debug - " + ghRsp.getDebugInfo());
 
 			if (writeGPX)
 			{
@@ -262,16 +262,16 @@ public GHResponse getGHResponse( HttpServletRequest httpReq, HttpServletResponse
 			{
 				String type = getParam(httpReq, "type", "json");
 				if (!"json".equalsIgnoreCase(type)
-				        || (!"jsonp".equalsIgnoreCase(type) && jsonpAllowed))
+						|| (!"jsonp".equalsIgnoreCase(type) && jsonpAllowed))
 				{
 					String errorMessage = type
-					        + " is not a valid value for parameter type. Valid values are ";
+							+ " is not a valid value for parameter type. Valid values are ";
 					errorMessage += jsonpAllowed ? "JSON, GPX or JSONP." : "GPX or JSON.";
 					ghRsp.addError(new InvalidParameterException(errorMessage));
 				}
 				logger.info("GraphHopperServlet.getGHResponse(" + enableInstructions + ")");
 				Map<String, Object> map = createJson(ghRsp, calcPoints, pointsEncoded,
-				        enableElevation, enableInstructions);
+						enableElevation, enableInstructions);
 				Object infoMap = map.get("info");
 				if (infoMap != null)
 					((Map) infoMap).put("took", Math.round(took * 1000));
@@ -292,21 +292,21 @@ public GHResponse getGHResponse( HttpServletRequest httpReq, HttpServletResponse
 	private String buildBooleanErrorMessageString( String paramValue, String paramName )
 	{
 		return buildErrorMessageString(paramValue, paramName,
-		        Arrays.asList(new String[] { Boolean.TRUE.toString(), Boolean.FALSE.toString() }));
+				Arrays.asList(new String[] { Boolean.TRUE.toString(), Boolean.FALSE.toString() }));
 	}
 
 	private String buildErrorMessageString( String paramValue, String paramName,
-	        String... validValues )
+			String... validValues )
 	{
 		return buildErrorMessageString(paramValue, paramName, Arrays.asList(validValues));
 	}
 
 	private String buildErrorMessageString( String paramValue, String paramName,
-	        List<String> validValues )
+			List<String> validValues )
 	{
 		StringBuilder errMesg = new StringBuilder(paramValue)
-		        .append(" is not a valid value for parameter ").append(paramName)
-		        .append(". Valid values are ");
+		.append(" is not a valid value for parameter ").append(paramName)
+		.append(". Valid values are ");
 		for (int i = 0; i < validValues.size(); i++)
 		{
 			String validStr = validValues.get(i);
@@ -324,8 +324,8 @@ private String buildErrorMessageString( String paramValue, String paramName,
 	}
 
 	protected Map<String, Object> createJson( GHResponse rsp, boolean calcPoints,
-	        boolean pointsEncoded, boolean includeElevation, boolean enableInstructions )
-	{
+			boolean pointsEncoded, boolean includeElevation, boolean enableInstructions )
+			{
 		Map<String, Object> json = new HashMap<String, Object>();
 
 		if (rsp.hasErrors())
@@ -352,7 +352,7 @@ private String buildErrorMessageString( String paramValue, String paramName,
 				{
 					BBox maxBounds = hopper.getGraph().getBounds();
 					BBox maxBounds2D = new BBox(maxBounds.minLon, maxBounds.maxLon,
-					        maxBounds.minLat, maxBounds.maxLat);
+							maxBounds.minLat, maxBounds.maxLat);
 					jsonPath.put("bbox", rsp.calcRouteBBox(maxBounds2D).toGeoJson());
 				}
 
@@ -367,7 +367,7 @@ private String buildErrorMessageString( String paramValue, String paramName,
 			json.put("paths", Collections.singletonList(jsonPath));
 		}
 		return json;
-	}
+			}
 
 	protected Object createPoints( PointList points, boolean pointsEncoded, boolean includeElevation )
 	{
