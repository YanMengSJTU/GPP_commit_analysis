diff --git a/reader-osm/src/main/java/com/graphhopper/reader/osm/runKSP.java b/reader-osm/src/main/java/com/graphhopper/reader/osm/runKSP.java
index ae279a1903..672e65d908 100644
--- a/reader-osm/src/main/java/com/graphhopper/reader/osm/runKSP.java
+++ b/reader-osm/src/main/java/com/graphhopper/reader/osm/runKSP.java
@@ -29,7 +29,7 @@
     private String osmFile = "./reader-osm/files/";
     private String graphFolder = "./reader-osm/target/tmp/";
     private String inputPointsFN = "../data/intermediate/";
-    private String outputPointsFN = "../data/output/";
+    private String outputPointsFN = "../data/testing/";
     private String gvfnStem = "../data/intermediate/";
     private String gctfnStem = "../geometries/";
     private ArrayList<String> gridValuesFNs = new ArrayList<>();
@@ -172,7 +172,7 @@ public void setDataSources() throws Exception {
             gridValuesFNs.add(gvfnStem + "36061_logfractionempath_ft.csv");
             gridValuesFNs.add(gvfnStem + "36081_logfractionempath_ft.csv");
             gridValuesFNs.add(gvfnStem + "36085_logfractionempath_ft.csv");
-            gridCTsFNs.add(gctfnStem + "nyc_ct.csv");
+            gridCTsFNs.add(gctfnStem + "nyc_ct_grid.csv");
         } else if (city.equals("BOS")) {
             osmFile = osmFile + "boston_massachusetts.osm.pbf";
             graphFolder = graphFolder + "ghosm_bos_noch";
@@ -332,6 +332,7 @@ public void process_routes() throws Exception {
         outputFiles.add(new FileWriter(outputPointsFN.replaceFirst(".csv","_fast.csv"), true));
         outputFiles.add(new FileWriter(outputPointsFN.replaceFirst(".csv","_shortest.csv"), true));
         outputFiles.add(new FileWriter(outputPointsFN.replaceFirst(".csv","_alt.csv"), true));
+        outputFiles.add(new FileWriter(outputPointsFN.replaceFirst(".csv","_besi.csv"), true));
 
         for (FileWriter fw : outputFiles) {
             fw.write(outputheader);
@@ -414,6 +415,7 @@ public void process_routes() throws Exception {
                 j++;
             }
             writeOutput(outputFiles.get(0), i, "Best", od_id, paths.get(routeidx), bestscore, getNumCTs(paths.get(routeidx)));
+            float maxBeauty = bestscore;
 
             // Find least-beautiful route within similar distance constraints
             double beautyDistance = paths.get(routeidx).getDistance();
@@ -449,12 +451,28 @@ public void process_routes() throws Exception {
                 j++;
             }
             writeOutput(outputFiles.get(2), i, "Simp", od_id, paths.get(routeidx), beauty, getNumCTs(paths.get(routeidx)));
+            float minSimplicity = bestscore;
 
             // Fastest Route
             PathWrapper bestPath = paths.get(0);
             beauty = getBeauty(bestPath);
             writeOutput(outputFiles.get(3), i, "Fast", od_id, bestPath, beauty, getNumCTs(bestPath));
 
+            // Beautifully simple route
+            j = 0;
+            bestscore = 0;
+            routeidx = 0;
+            float combined;
+            for (PathWrapper path : paths) {
+                combined = (minSimplicity / path.getSimplicity()) + (getBeauty(path) / maxBeauty);
+                if (combined > bestscore) {
+                    bestscore = combined;
+                    routeidx = j;
+                }
+                j++;
+            }
+            writeOutput(outputFiles.get(6), i, "BeSi", od_id, paths.get(routeidx), getBeauty(paths.get(routeidx)), getNumCTs(paths.get(routeidx)));
+
             // Shortest Route
             req = new GHRequest(points[0], points[1], points[2], points[3]).  // latFrom, lonFrom, latTo, lonTo
                     setWeighting("shortest").
@@ -524,13 +542,13 @@ public static void main(String[] args) throws Exception {
         // PBFs from: https://mapzen.com/data/metro-extracts/
 
         // SF Grid
-        //runKSP ksp = new runKSP("SF", "grid");
+        runKSP ksp = new runKSP("SF", "grid");
 
         // SF Random
         //runKSP ksp = new runKSP("SF", "rand");
 
         // NYC Grid
-        runKSP ksp = new runKSP("NYC", "grid");
+        //runKSP ksp = new runKSP("NYC", "grid");
 
         // NYC Random
         //runKSP ksp = new runKSP("NYC", "rand");
