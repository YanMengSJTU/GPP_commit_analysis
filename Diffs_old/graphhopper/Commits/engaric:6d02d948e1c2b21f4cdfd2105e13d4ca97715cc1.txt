diff --git a/core/src/main/java/com/graphhopper/util/shapes/GHPoint.java b/core/src/main/java/com/graphhopper/util/shapes/GHPoint.java
index 35f11d20aa..7760ae36f9 100644
--- a/core/src/main/java/com/graphhopper/util/shapes/GHPoint.java
+++ b/core/src/main/java/com/graphhopper/util/shapes/GHPoint.java
@@ -17,10 +17,11 @@
  */
 package com.graphhopper.util.shapes;
 
+import java.util.HashMap;
+import java.util.Map;
+
 import org.geotools.referencing.CRS;
-import org.opengis.geometry.MismatchedDimensionException;
 import org.opengis.referencing.FactoryException;
-import org.opengis.referencing.NoSuchAuthorityCodeException;
 import org.opengis.referencing.crs.CoordinateReferenceSystem;
 import org.opengis.referencing.operation.TransformException;
 
@@ -34,129 +35,141 @@
  */
 public class GHPoint
 {
-	private static final String BNG = "bng";
-	private static final String WGS_84 = "WGS84";
-	public double lat = Double.NaN;
-	public double lon = Double.NaN;
-
-	public GHPoint()
-	{
-	}
-
-	public GHPoint( double lat, double lon )
-	{
-		this.lat = lat;
-		this.lon = lon;
-	}
-
-	public double getLon()
-	{
-		return lon;
-	}
-
-	public double getLat()
-	{
-		return lat;
-	}
-
-	public boolean isValid()
-	{
-		return !Double.isNaN(lat) && !Double.isNaN(lon);
-	}
-
-	@Override
-	public int hashCode()
-	{
-		int hash = 7;
-		hash = 83
-				* hash
-				+ (int) (Double.doubleToLongBits(this.lat) ^ (Double.doubleToLongBits(this.lat) >>> 32));
-		hash = 83
-				* hash
-				+ (int) (Double.doubleToLongBits(this.lon) ^ (Double.doubleToLongBits(this.lon) >>> 32));
-		return hash;
-	}
-
-	@Override
-	public boolean equals( Object obj )
-	{
-		if (obj == null)
-			return false;
-
-		@SuppressWarnings("unchecked")
-		final GHPoint other = (GHPoint) obj;
-		return NumHelper.equalsEps(lat, other.lat) && NumHelper.equalsEps(lon, other.lon);
-	}
-
-	@Override
-	public String toString()
-	{
-		return lat + "," + lon;
-	}
-
-	/**
-	 * Attention: geoJson is LON,LAT
-	 */
-	public Double[] toGeoJson()
-	{
-		return new Double[] { lon, lat };
-	}
-
-	public static GHPoint parse( String str )
-	{
-		// if the point is in the format of lat,lon we don't need to call geocoding service
-		String[] fromStrs = str.split(",");
-		if (fromStrs.length == 2)
-		{
-			try
-			{
-				double fromLat = Double.parseDouble(fromStrs[0]);
-				double fromLon = Double.parseDouble(fromStrs[1]);
-				return new GHPoint(fromLat, fromLon);
-			} catch (NumberFormatException | NullPointerException ex)
-			{
-				// Fall through to return a null below
-			}
-		}
-		return null;
-	}
-
-	/**
-	 * 
-	 * @param string
-	 * @param srs  default is WGS_84 to match the non 
-	 * @return
-	 */
-	public static GHPoint parse( String str, String srs )
+    private static final String BNG = "BNG";
+    private static final String WGS_84 = "WGS84";
+    private static Map<String, String> srsInputMap;
+    public double lat = Double.NaN;
+    public double lon = Double.NaN;
+
+    static
     {
-	    if(srs.equalsIgnoreCase(WGS_84)) {
-	    	return parse(str);
-	    }
-	    try
-        {
-	    	return doParse(str, srs);
-        } catch (TransformException | IllegalArgumentException e)
-        {
-        	throw new IllegalArgumentException("Point "
-					+ str
-					+ " is not a valid point. Point must be a comma separated coordinate in "
-					+ srs
-					+ " projection.");
-        } catch (FactoryException e)
+        srsInputMap = new HashMap<String, String>();
+        srsInputMap.put(WGS_84, "EPSG:4326");
+        srsInputMap.put(BNG, "EPSG:27700");
+    }
+
+    public GHPoint() {
+    }
+
+    public GHPoint(double lat, double lon) {
+        this.lat = lat;
+        this.lon = lon;
+    }
+
+    public double getLon()
+    {
+        return lon;
+    }
+
+    public double getLat()
+    {
+        return lat;
+    }
+
+    public boolean isValid()
+    {
+        return !Double.isNaN(lat) && !Double.isNaN(lon);
+    }
+
+    @Override
+    public int hashCode()
+    {
+        int hash = 7;
+        hash = 83
+                * hash
+                + (int) (Double.doubleToLongBits(this.lat) ^ (Double
+                        .doubleToLongBits(this.lat) >>> 32));
+        hash = 83
+                * hash
+                + (int) (Double.doubleToLongBits(this.lon) ^ (Double
+                        .doubleToLongBits(this.lon) >>> 32));
+        return hash;
+    }
+
+    @Override
+    public boolean equals(Object obj)
+    {
+        if (obj == null)
+            return false;
+
+        @SuppressWarnings("unchecked")
+        final GHPoint other = (GHPoint) obj;
+        return NumHelper.equalsEps(lat, other.lat)
+                && NumHelper.equalsEps(lon, other.lon);
+    }
+
+    @Override
+    public String toString()
+    {
+        return lat + "," + lon;
+    }
+
+    /**
+     * Attention: geoJson is LON,LAT
+     */
+    public Double[] toGeoJson()
+    {
+        return new Double[] { lon, lat };
+    }
+
+    public static GHPoint parse(String str)
+    {
+        // if the point is in the format of lat,lon we don't need to call
+        // geocoding service
+        String[] fromStrs = str.split(",");
+        if (fromStrs.length == 2)
         {
-	       throw new IllegalArgumentException("Srs " + srs + " is not a valid srs for input.");
-        } 
+            try
+            {
+                double fromLat = Double.parseDouble(fromStrs[0]);
+                double fromLon = Double.parseDouble(fromStrs[1]);
+                return new GHPoint(fromLat, fromLon);
+            } catch (NumberFormatException | NullPointerException ex)
+            {
+                // Fall through to return a null below
+            }
+        }
+        return null;
     }
 
-	private static GHPoint doParse( String str, String srs ) throws NoSuchAuthorityCodeException,
-            FactoryException, TransformException
+    /**
+     * 
+     * @param string
+     * @param srs
+     *            default is WGS_84 to match the non
+     * @return
+     */
+    public static GHPoint parse(String str, String srs)
     {
-	    String[] fromStrs = str.split(",");
-	    double sourceXCoordinate = Double.parseDouble(fromStrs[0]);
-	    double sourceYCoordinate = Double.parseDouble(fromStrs[1]);
-	    CoordinateReferenceSystem outputCRS = OpenCoordConverter.wgs84CoordRefSystem;
-	    CoordinateReferenceSystem inputCRS = srs.equalsIgnoreCase(BNG)||srs.equalsIgnoreCase(OpenCoordConverter.BNG_CRS_CODE)?OpenCoordConverter.bngCoordRefSystem:CRS.decode(srs);
-	    LatLong transformFromSourceCRSToTargetCRS = OpenCoordConverter.transformFromSourceCRSToTargetCRS(inputCRS, outputCRS, sourceXCoordinate, sourceYCoordinate, true);
-	    return new GHPoint(transformFromSourceCRSToTargetCRS.getLatAngle(), transformFromSourceCRSToTargetCRS.getLongAngle());
+        String[] fromStrs = str.split(",");
+        if (fromStrs.length == 2)
+        {
+            try
+            {
+                double sourceXCoordinate = Double.parseDouble(fromStrs[0]);
+                double sourceYCoordinate = Double.parseDouble(fromStrs[1]);
+                CoordinateReferenceSystem outputCRS = OpenCoordConverter.wgs84CoordRefSystem;
+                String casedSrs = srs.toUpperCase();
+                String mappedInputSRS = srsInputMap.containsKey(casedSrs) ? srsInputMap
+                        .get(casedSrs) : srs;
+                CoordinateReferenceSystem inputCRS = mappedInputSRS
+                        .equalsIgnoreCase(OpenCoordConverter.BNG_CRS_CODE) ? OpenCoordConverter.bngCoordRefSystem
+                        : CRS.decode(mappedInputSRS);
+                LatLong transformFromSourceCRSToTargetCRS = OpenCoordConverter
+                        .transformFromSourceCRSToTargetCRS(inputCRS, outputCRS,
+                                sourceXCoordinate, sourceYCoordinate, true);
+                return new GHPoint(
+                        transformFromSourceCRSToTargetCRS.getLatAngle(),
+                        transformFromSourceCRSToTargetCRS.getLongAngle());
+            } catch (TransformException | IllegalArgumentException e)
+            {
+                // Fall through to return a null below
+            } catch (FactoryException e)
+            {
+                throw new IllegalArgumentException("Srs " + srs
+                        + " is not a valid srs for input.");
+            }
+        }
+        return null;
     }
 }
diff --git a/core/src/test/java/com/graphhopper/util/shapes/GHPointTest.java b/core/src/test/java/com/graphhopper/util/shapes/GHPointTest.java
index fd78afd036..dc65c80f56 100644
--- a/core/src/test/java/com/graphhopper/util/shapes/GHPointTest.java
+++ b/core/src/test/java/com/graphhopper/util/shapes/GHPointTest.java
@@ -69,13 +69,14 @@ public void testParseWithInvalidSrs() {
     
     @Test
     public void testParseWithInvalidPoint() {
-    	try {
-    		GHPoint.parse("100000000000000000,2", "BNG");
-    		fail("Error should have been thrown");
-    	}
-    	catch(IllegalArgumentException iae) {
-    		assertEquals("Point 100000000000000000,2 is not a valid point. Point must be a comma separated coordinate in BNG projection.", iae.getMessage());
-    	}
+        GHPoint parse = GHPoint.parse("100000000000000000");
+        assertNull(parse);
+    }
+    
+    @Test
+    public void testParseWithInvalidPointAndSpecifiedSrs() {
+    	GHPoint parse = GHPoint.parse("100000000000000000,2", "BNG");
+    	assertNull(parse);
     }
     
     @Test
diff --git a/web/src/main/java/com/graphhopper/http/UpdateServlet.java b/web/src/main/java/com/graphhopper/http/UpdateServlet.java
index 607928cd7a..b79f6ea25b 100644
--- a/web/src/main/java/com/graphhopper/http/UpdateServlet.java
+++ b/web/src/main/java/com/graphhopper/http/UpdateServlet.java
@@ -160,24 +160,30 @@ protected String errorsToXML( List<Throwable> list )
 		}
 	}
 
-	private List<GHPoint> getPoints( HttpServletRequest req ) throws IOException
+	private List<GHPoint> getPoints( HttpServletRequest req ) throws IOException, InvalidParameterException
 	{
 		String[] pointsAsStr = getParams(req, "point");
 		final List<GHPoint> infoPoints = new ArrayList<GHPoint>(pointsAsStr.length);
+		String[] srs = getParams(req, "srs");
+		String useSrs;
+		if(srs.length>0)
+		    useSrs = srs[0];
+		else 
+		    useSrs = defaultSRS;
 		for (String str : pointsAsStr)
-		{
-			String[] fromStrs = str.split(",");
-			String[] srs = getParams(req, "srs");
-			if (fromStrs.length == 2)
-			{
-				GHPoint place;
-				if(srs.length>0)
-					place = GHPoint.parse(str, srs[0]);
-				else 
-					place = GHPoint.parse(str, defaultSRS);
-				if (place != null)
-					infoPoints.add(place);
-			}
+		    {
+			GHPoint place;
+			place = GHPoint.parse(str, useSrs);
+			if (place != null)
+			    infoPoints.add(place);
+			else
+		        {
+		                throw new InvalidParameterException(
+		                        "Point "
+		                                + str
+		                                + " is not a valid point. Point must be a comma separated coordinate in "
+		                                + useSrs + " projection.");
+		        }
 		}
 
 		return infoPoints;
diff --git a/web/src/test/java/com/graphhopper/http/GraphHopperServletTest.java b/web/src/test/java/com/graphhopper/http/GraphHopperServletTest.java
index 4e9d769089..21d50ee754 100644
--- a/web/src/test/java/com/graphhopper/http/GraphHopperServletTest.java
+++ b/web/src/test/java/com/graphhopper/http/GraphHopperServletTest.java
@@ -246,6 +246,42 @@ public void testGetGHResponseWithUnparsablePoint() throws IOException,
 		                + " is not a valid point. Point must be a comma separated coordinate in WGS84 projection.",
 		        ghResponse.getErrors().get(0).getMessage());
 	}
+	
+	@Test
+        public void testGetGHResponseWithPartialPoint() throws IOException,
+                MissingParameterException, NoSuchParameterException, InvalidParameterException
+        {
+                allParameters.put("point", new String[] { "12" });
+                allParameters.put("vehicle", new String[] { VEHICLES[0] });
+                allParameters.put("locale", new String[] { LOCALES[0] });
+                when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+
+                GHResponse ghResponse = graphHopperServlet.getGHResponse(httpServletRequest,
+                        httpServletResponse);
+                assertEquals(
+                        "Point 12 is not a valid point. Point must be a comma separated coordinate in WGS84 projection.",
+                        ghResponse.getErrors().get(0).getMessage());
+        }
+        
+	
+	@Test
+	public void testGetGHResponseWithUnparsablePointInAlternateProjection() throws IOException,
+	        MissingParameterException, NoSuchParameterException, InvalidParameterException
+	{
+		allParameters.put("point", new String[] { UNPARSABLE_POINT });
+		allParameters.put("vehicle", new String[] { VEHICLES[0] });
+		allParameters.put("locale", new String[] { LOCALES[0] });
+		allParameters.put("srs", new String[] { "EPSG:27700" });
+		when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+
+		GHResponse ghResponse = graphHopperServlet.getGHResponse(httpServletRequest,
+		        httpServletResponse);
+		assertEquals(
+		        "Point "
+		                + UNPARSABLE_POINT
+		                + " is not a valid point. Point must be a comma separated coordinate in EPSG:27700 projection.",
+		        ghResponse.getErrors().get(0).getMessage());
+	}
 
 	@Test
 	public void testGetGHResponseWithCorrectLocales() throws IOException,
