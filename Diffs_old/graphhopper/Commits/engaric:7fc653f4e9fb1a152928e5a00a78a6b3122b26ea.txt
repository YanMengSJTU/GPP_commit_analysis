diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/beans/RouteWayPoint.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/beans/RouteWayPoint.java
index ccf7aedacf..a0885904d3 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/beans/RouteWayPoint.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/beans/RouteWayPoint.java
@@ -6,9 +6,17 @@
 import java.util.Objects;
 
 import org.alternativevision.gpx.beans.Waypoint;
+import org.eclipse.jetty.util.log.Log;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import uk.co.ordnancesurvey.gpx.graphhopper.GraphHopperGPXParserRouteTest;
 
 public class RouteWayPoint {
 
+	private static final Logger LOG = LoggerFactory
+			.getLogger(RouteWayPoint.class);
+
 	public Waypoint waypoint;
 
 	public RouteWayPoint(Waypoint wp) {
@@ -81,15 +89,25 @@ public boolean equals(RouteWayPoint routeWayPoint) {
 			}
 		}
 		if (isEqual) {
-			System.out.println(routeWayPoint.waypoint.getExtensionData());
 			if (null != routeWayPoint.waypoint.getExtensionData()) {
 				for (String anExtensionDataKey : waypoint.getExtensionData()
 						.keySet()) {
+
 					isEqual = Objects.equals(waypoint
 							.getExtensionData(anExtensionDataKey),
 							routeWayPoint.waypoint
 									.getExtensionData(anExtensionDataKey));
+
 					if (!isEqual) {
+
+						LOG.info("********Way point attribute "
+								+ anExtensionDataKey
+								+ " "
+								+ waypoint.getExtensionData(anExtensionDataKey)
+								+ " is not matching with expected value "
+								+ routeWayPoint.waypoint
+										.getExtensionData(anExtensionDataKey));
+
 						break;
 					}
 				}
diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/extensions/RoutePointAzimuthParser.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/extensions/RoutePointAzimuthParser.java
index cd2eda64a7..ff17ebcf5a 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/extensions/RoutePointAzimuthParser.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/extensions/RoutePointAzimuthParser.java
@@ -31,8 +31,8 @@ public Object parseWaypointExtension(Node node) {
 		String value = "";
 		for (int idx = 0; idx < node.getChildNodes().getLength(); idx++) {
 			Node currentNode = node.getChildNodes().item(idx);
-			LOG.info("Node Type is " + currentNode.getNodeType() + " And node name is" + currentNode.getNodeName() + " And node value is " + currentNode.getTextContent());
-			if ("azimuth".equals(currentNode.getNodeName())) {
+			LOG.debug("Node Type is " + currentNode.getNodeType() + " And node name is" + currentNode.getNodeName() + " And node value is " + currentNode.getTextContent());
+			if ("gh:azimuth".equals(currentNode.getNodeName())) {
 				value = currentNode.getTextContent();
 				break;
 			}
diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/extensions/RoutePointDirectionParser.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/extensions/RoutePointDirectionParser.java
index caad07ae18..e0f2b6fb9b 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/extensions/RoutePointDirectionParser.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/extensions/RoutePointDirectionParser.java
@@ -31,8 +31,8 @@ public Object parseWaypointExtension(Node node) {
 		String value = "";
 		for (int idx = 0; idx < node.getChildNodes().getLength(); idx++) {
 			Node currentNode = node.getChildNodes().item(idx);
-			LOG.info("Node Type is " + currentNode.getNodeType() + " And node name is" + currentNode.getNodeName() + " And node value is " + currentNode.getTextContent());
-			if ("direction".equals(currentNode.getNodeName())) {
+			LOG.debug("Node Type is " + currentNode.getNodeType() + " And node name is" + currentNode.getNodeName() + " And node value is " + currentNode.getTextContent());
+			if ("gh:direction".equals(currentNode.getNodeName())) {
 				value = currentNode.getTextContent();
 				break;
 			}
diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/extensions/RoutePointDistanceParser.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/extensions/RoutePointDistanceParser.java
index 0bb578671f..75fcc61362 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/extensions/RoutePointDistanceParser.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/extensions/RoutePointDistanceParser.java
@@ -15,7 +15,7 @@
 	private static final Logger LOG = LoggerFactory
 			.getLogger(RoutePointDistanceParser.class);
 
-	public static final String MYID = ExtensionConstants.DIRECTION;
+	public static final String MYID = ExtensionConstants.DISTANCE;
 
 	public RoutePointDistanceParser() {
 		// TODO Auto-generated constructor stub
@@ -31,8 +31,8 @@ public Object parseWaypointExtension(Node node) {
 		String value = "";
 		for (int idx = 0; idx < node.getChildNodes().getLength(); idx++) {
 			Node currentNode = node.getChildNodes().item(idx);
-			LOG.info("Node Type is " + currentNode.getNodeType() + " And node name is" + currentNode.getNodeName() + " And node value is " + currentNode.getTextContent());
-			if ("distance".equals(currentNode.getNodeName())) {
+			LOG.debug("Node Type is " + currentNode.getNodeType() + " And node name is" + currentNode.getNodeName() + " And node value is " + currentNode.getTextContent());
+			if ("gh:distance".equals(currentNode.getNodeName())) {
 				value = currentNode.getTextContent();
 				break;
 			}
diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/extensions/RoutePointTimeParser.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/extensions/RoutePointTimeParser.java
index c2b30cf9e8..9066839653 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/extensions/RoutePointTimeParser.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/extensions/RoutePointTimeParser.java
@@ -31,7 +31,8 @@ public Object parseWaypointExtension(Node node) {
         Object value = "";
         for(int idx = 0; idx < node.getChildNodes().getLength(); idx++) {
             Node currentNode = node.getChildNodes().item(idx);
-            if("time".equals(currentNode.getNodeName())) {
+            LOG.debug("Node Type is " + currentNode.getNodeType() + " And node name is" + currentNode.getNodeName() + " And node value is " + currentNode.getTextContent());
+            if("gh:time".equals(currentNode.getNodeName())) {
             	value = currentNode.getTextContent();
             	break;
             }
diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperGPXParserRouteTest.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperGPXParserRouteTest.java
index b88783c7e3..45ac05a6c7 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperGPXParserRouteTest.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperGPXParserRouteTest.java
@@ -13,7 +13,6 @@
 import org.alternativevision.gpx.beans.GPX;
 import org.alternativevision.gpx.beans.Route;
 import org.alternativevision.gpx.beans.Track;
-import org.alternativevision.gpx.beans.TrackPoint;
 import org.alternativevision.gpx.beans.Waypoint;
 import org.apache.commons.io.IOUtils;
 import org.apache.http.client.ClientProtocolException;
@@ -59,27 +58,12 @@ public GraphHopperGPXParserRouteTest() {
 		init();
 	}
 
-
 	private void parseGPXFromString(String gpxString) {
 		if (gpxString != null && gpxString.length() > 0) {
 			try {
 				gpx = gpxParser.parseGPX(new ByteArrayInputStream(gpxString
 						.getBytes()));
-				/*
-				 * for (Route aRoute : gpx.getRoutes()) { for (Waypoint
-				 * aWayPoint : aRoute.getRoutePoints()) {
-				 * LOG.info("A RoutePoint with data " //+ aWayPoint +
-				 * " Direction=" +
-				 * aWayPoint.getExtensionData("routePointDirectionExtension") +
-				 * " Time=" +
-				 * aWayPoint.getExtensionData("routePointTimeExtension") +
-				 * " Distance=" +
-				 * aWayPoint.getExtensionData("routePointDistanceExtension") +
-				 * " Azimuth=" +
-				 * aWayPoint.getExtensionData("routePointAzimuthExtension"));
-				 * 
-				 * } }
-				 */} catch (Exception e) {
+			} catch (Exception e) {
 				LOG.info("Invalid File supplied for parsing " + e.getMessage());
 			}
 		}
@@ -89,21 +73,8 @@ private void parseGPXFromFile(String gpxFileName) {
 		if (gpxFileName != null && gpxFileName.length() > 0) {
 			try {
 				gpx = gpxParser.parseGPX(new FileInputStream(gpxFileName));
-				/*
-				 * for (Route aRoute : gpx.getRoutes()) { for (Waypoint
-				 * aWayPoint : aRoute.getRoutePoints()) {
-				 * LOG.info("A RoutePoint with data " //+ aWayPoint +
-				 * " Direction=" +
-				 * aWayPoint.getExtensionData("routePointDirectionExtension") +
-				 * " Time=" +
-				 * aWayPoint.getExtensionData("routePointTimeExtension") +
-				 * " Distance=" +
-				 * aWayPoint.getExtensionData("routePointDistanceExtension") +
-				 * " Azimuth=" +
-				 * aWayPoint.getExtensionData("routePointAzimuthExtension"));
-				 * 
-				 * } }
-				 */} catch (Exception e) {
+
+			} catch (Exception e) {
 				LOG.info("Invalid File supplied for parsing " + e.getMessage());
 			}
 		}
@@ -124,39 +95,34 @@ private CloseableHttpResponse doSendAndGetResponse(String serviceUrl)
 		return httpClient.execute(httpget);
 	}
 
-	public String parseRoute(String bbox, String routeType, String vehicle) {
+	public String parseRoute(String routeType, String vehicle, String[] points) {
 		LOG.debug("Here we are");
 		// Set up the URL
 		String xmlResponse = "";
-		String[] coords = bbox.split(",");
-		String minX = coords[0];
-		String minY = coords[1];
-		String maxX = coords[2];
-		String maxY = coords[3];
+		String coordinateString = "";
 		String graphHopperUrl;
-		
-		graphHopperUrl=vehicle.equalsIgnoreCase("car")?(IntegrationTestProperties
-				.getTestProperty("graphHopperWebUrl")):(IntegrationTestProperties
-						.getTestProperty("DPNgraphHopperWebUrl"));
-		 
+
+		for (int i = 0; i < points.length; i++) {
+
+			coordinateString = coordinateString + "&point=" + points[i];
+
+		}
+
+		graphHopperUrl = vehicle.equalsIgnoreCase("car") ? (IntegrationTestProperties
+				.getTestProperty("graphHopperWebUrl"))
+				: (IntegrationTestProperties
+						.getTestProperty("graphHopperWebUrl"));
+
 		StringBuilder sb = new StringBuilder();
 		sb.append(graphHopperUrl);
 		sb.append("route?");
 		if (routeType != null) {
 			sb.append("type=");
 			sb.append(routeType);
-		} 
-
+		}
 		sb.append("&vehicle=");
 		sb.append(vehicle);
-		sb.append("&point=");
-		sb.append(minX);
-		sb.append(",");
-		sb.append(minY);
-		sb.append("&point=");
-		sb.append(maxX);
-		sb.append(",");
-		sb.append(maxY);
+		sb.append(coordinateString);
 
 		try {
 			CloseableHttpResponse httpResponse = sendAndGetResponse(sb
@@ -179,7 +145,7 @@ public String parseRoute(String bbox, String routeType, String vehicle) {
 	public HashSet<Route> getRoutes() {
 		return gpx.getRoutes();
 	}
-	
+
 	public HashSet<Track> getTracks() {
 		return gpx.getTracks();
 	}
@@ -217,7 +183,7 @@ private void init() {
 	}
 
 	public boolean isWayPointOnRoute(Waypoint aWayPoint, Route aRoute) {
-
+		System.out.println(aWayPoint.getExtensionData().toString());
 		boolean isWayPointOnRoute = false;
 		System.out.println(aRoute.getRoutePoints());
 		for (Waypoint aWaypointInaRoute : aRoute.getRoutePoints()) {
@@ -231,7 +197,7 @@ public boolean isWayPointOnRoute(Waypoint aWayPoint, Route aRoute) {
 
 		return isWayPointOnRoute;
 	}
-	
+
 	public boolean isWayPointOnTrack(Waypoint aWayPoint, Track aTrack) {
 
 		boolean isWayPointOnTrack = false;
@@ -239,19 +205,17 @@ public boolean isWayPointOnTrack(Waypoint aWayPoint, Track aTrack) {
 		for (Waypoint aWaypointInaTrack : aTrack.getTrackPoints()) {
 			if (new RouteWayPoint(aWaypointInaTrack).equals(new RouteWayPoint(
 					aWayPoint))) {
-				
+
 				isWayPointOnTrack = true;
 				LOG.info("WayPoint " + aWayPoint + " Found In a Track" + aTrack);
 				break;
 			}
-			
-			
+
 		}
 
 		return isWayPointOnTrack;
 	}
 
-
 	public boolean routeContainsTurn(String turnDescription, Route aRoute) {
 		System.out.println(aRoute);
 		boolean routeContainsTurn = false;
@@ -299,8 +263,4 @@ public boolean isWayPointOnGPXRoutes(Waypoint wp) {
 		return isWayPointOnRoute;
 	}
 
-
-		
-
-
 }
diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperComponentIdentification.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperComponentIdentification.java
index 63c37c6f65..e96ca53a45 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperComponentIdentification.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperComponentIdentification.java
@@ -11,8 +11,8 @@
 public class GraphHopperComponentIdentification implements
 		ComponentIdentification {
 
-	public static final ComponentIdentifier FROM_ROUTE = new ComponentID("0_searchBox");
-	public static final  ComponentIdentifier TO_ROUTE = new ComponentID("1_searchBox");
+	public static ComponentIdentifier waypoint = new ComponentID("0_searchBox");
+	public static final ComponentIdentifier ADD_WAYPOINT= new ComponentByXPATH("//*[@class='pointAdd']");
 	public static final  ComponentIdentifier ROUTE_TYPE_CAR = new ComponentID("car");
 	public static final  ComponentIdentifier ROUTE_TYPE_BIKE = new ComponentID("bike");
 	public static final  ComponentIdentifier ROUTE_TYPE_WALK = new ComponentID("foot");
diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
index bec4d008bd..44dd42298e 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
@@ -1,5 +1,9 @@
 package uk.co.ordnancesurvey.routing;
 
+
+
+import gherkin.formatter.model.Feature;
+
 import java.io.IOException;
 import java.text.ParseException;
 import java.util.List;
@@ -8,6 +12,7 @@
 import uk.co.ordnancesurvey.webtests.IntegrationTestProperties;
 import cucumber.api.Scenario;
 import cucumber.api.java.After;
+import cucumber.api.java.Before;
 import cucumber.api.java.en.Given;
 import cucumber.api.java.en.Then;
 
@@ -15,38 +20,101 @@
 	GraphHopperUIUtil graphUiUtil;
 
 	String instruction;
+	
 
 	@Given("^I request a route between \"([^\"]*)\" and \"([^\"]*)\" as a \"([^\"]*)\" from RoutingAPI$")
 	public void getRoute(String pointA, String pointB, String routeType)
 			throws InterruptedException {
 
-		if (routeType.equalsIgnoreCase("car"))
+			graphUiUtil = new GraphHopperUIUtil(
+					IntegrationTestProperties
+							.getTestProperty("graphHopperWebUrl"));
+
+		String testON = IntegrationTestProperties.getTestProperty("testON");
+
+		switch (testON.toUpperCase()) {
+		case "WEB":
+
+			graphUiUtil.getRouteFromUI(routeType,pointA, pointB);
+			break;
+		case "SERVICE":
+			graphUiUtil.getRouteFromService(routeType,pointA, pointB);
+			break;
+		default:
+
+			if (pointA.split(",").length == 2) {
+				graphUiUtil.getRouteFromService(routeType,pointA, pointB);
+				graphUiUtil.getRouteFromUI(routeType,pointA, pointB);
+			} else {
+				graphUiUtil.getRouteFromUI(routeType,pointA, pointB);
+			}
+
+			break;
+
+		}
+
+	}
+	
+	
+	@Given("^I request a route between \"([^\"]*)\" and \"([^\"]*)\" as a \"([^\"]*)\" from RoutingAPI via \"([^\"]*)\"$")
+	public void getRoute(String pointA, String pointB, String routeType,String pointC)
+			throws InterruptedException {
 
 			graphUiUtil = new GraphHopperUIUtil(
 					IntegrationTestProperties
 							.getTestProperty("graphHopperWebUrl"));
-		else
+
+		String testON = IntegrationTestProperties.getTestProperty("testON");
+
+		switch (testON.toUpperCase()) {
+		case "WEB":
+
+			graphUiUtil.getRouteFromUI(routeType,pointA, pointB, pointC);
+			break;
+		case "SERVICE":
+			graphUiUtil.getRouteFromService(routeType,pointA, pointB, pointC);
+			break;
+		default:
+
+			if (pointA.split(",").length == 2) {
+				graphUiUtil.getRouteFromService(routeType,pointA, pointB, pointC);
+				graphUiUtil.getRouteFromUI(routeType,pointA, pointB, pointC);
+			} else {
+				graphUiUtil.getRouteFromUI(routeType,pointA, pointB, pointC);
+			}
+
+			break;
+
+		}
+
+	}
+	
+	
+	@Given("^I request a route between \"([^\"]*)\" and \"([^\"]*)\" as a \"([^\"]*)\" from RoutingAPI via \"([^\"]*)\" and \"([^\"]*)\"$")
+	public void getRoute(String pointA, String pointB, String routeType,String pointC,String pointD)
+			throws InterruptedException {
+
 			graphUiUtil = new GraphHopperUIUtil(
 					IntegrationTestProperties
-							.getTestProperty("DPNgraphHopperWebUrl"));
+							.getTestProperty("graphHopperWebUrl"));
 
 		String testON = IntegrationTestProperties.getTestProperty("testON");
 
 		switch (testON.toUpperCase()) {
 		case "WEB":
 
-			graphUiUtil.getRouteFromUI(pointA, pointB, routeType);
+			graphUiUtil.getRouteFromUI(routeType,pointA, pointB, pointC,pointD);
 			break;
 		case "SERVICE":
-			graphUiUtil.getRouteFromService(pointA, pointB, routeType);
+			graphUiUtil.getRouteFromService(routeType,pointA, pointB, pointC,pointD);
 			break;
 		default:
 
 			if (pointA.split(",").length == 2) {
-				graphUiUtil.getRouteFromService(pointA, pointB, routeType);
-				graphUiUtil.getRouteFromUI(pointA, pointB, routeType);
+				graphUiUtil.getRouteFromService(routeType,pointA, pointB, pointC,pointD);
+				graphUiUtil.getRouteFromUI(routeType,pointA, pointB, pointC,pointD);
 			} else {
-				graphUiUtil.getRouteFromUI(pointA, pointB, routeType);
+				graphUiUtil.getRouteFromUI(routeType,pointA, pointB, pointC,pointD);
 			}
 
 			break;
@@ -107,6 +175,7 @@ public void I_should_be_able_to_verify_the_trackpoints_not_on_the_route_map(
 
 	@After({ "@Routing" })
 	public void closeBrowser(Scenario sc) {
+	
 
 		if (sc.isFailed()) {
 
diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
index b2172bed83..28dd777fb8 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
@@ -2,15 +2,15 @@
 
 import static org.junit.Assert.assertTrue;
 import static org.junit.Assert.fail;
-import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.FROM_ROUTE;
+import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.ADD_WAYPOINT;
 import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.INSTRUCTIONS;
 import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.ROUTE_SEARCH;
 import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.ROUTE_TYPE_BIKE;
 import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.ROUTE_TYPE_CAR;
 import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.ROUTE_TYPE_WALK;
 import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.TOTAL_ROUTE_TIME;
-import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.TO_ROUTE;
 import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.dropDown;
+import static uk.co.ordnancesurvey.routing.GraphHopperComponentIdentification.waypoint;
 
 import java.awt.Graphics2D;
 import java.awt.RenderingHints;
@@ -39,6 +39,7 @@
 import uk.co.ordnancesurvey.gpx.extensions.ExtensionConstants;
 import uk.co.ordnancesurvey.gpx.graphhopper.GraphHopperGPXParserRouteTest;
 import uk.co.ordnancesurvey.webtests.IntegrationTestProperties;
+import uk.co.ordnancesurvey.webtests.base.ComponentID;
 import uk.co.ordnancesurvey.webtests.base.ImageComparison;
 import uk.co.ordnancesurvey.webtests.multiplatform.MultiplatformTest;
 import uk.co.ordnancesurvey.webtests.platforms.BrowserPlatformOptions;
@@ -58,10 +59,10 @@
 			.getLogger(GraphHopperUIUtil.class);
 
 	public GraphHopperUIUtil(String url) {
-				
+
 		super(BrowserPlatformOptions.getEnabledOptionsArrayList().get(0)[0]);
 		try {
-			baseUrl=url;
+			baseUrl = url;
 			init();
 		} catch (InterruptedException e) {
 			// TODO Auto-generated catch block
@@ -70,11 +71,11 @@ public GraphHopperUIUtil(String url) {
 	}
 
 	private void init() throws InterruptedException {
-	//	baseUrl = IntegrationTestProperties
-		//		.getTestProperty("graphHopperWebUrl");
-		//if (null == baseUrl) {
-		//	baseUrl = "http://os-graphhopper.elasticbeanstalk.com/";
-		//}
+		// baseUrl = IntegrationTestProperties
+		// .getTestProperty("graphHopperWebUrl");
+		// if (null == baseUrl) {
+		// baseUrl = "http://os-graphhopper.elasticbeanstalk.com/";
+		// }
 
 		if (!testOn.equalsIgnoreCase("SERVICE")) {
 			initialiseWebDriver();
@@ -100,14 +101,13 @@ public void logout() {
 	 *            Route type can be Car, walk or Cycle.
 	 * @throws InterruptedException
 	 */
-	public void getRouteFromUI(String pointA, String pointB, String routeType)
+	public void getRouteFromUI(String routeType, String... points)
 			throws InterruptedException {
 
-		switch (routeType)
-
-		{
+		switch (routeType) {
 		case "car":
 			clickElement(ROUTE_TYPE_CAR);
+
 			break;
 		case "bike":
 			clickElement(ROUTE_TYPE_BIKE);
@@ -121,21 +121,29 @@ public void getRouteFromUI(String pointA, String pointB, String routeType)
 
 		}
 
-		int length = pointA.split(",").length;
+		for (int i = 0; i < points.length - 2; i++)
 
-		if (length == 2) {
+		{
+			clickElement(ADD_WAYPOINT);
+		}
 
-			typeIntoField(FROM_ROUTE, pointA);
-			typeIntoField(TO_ROUTE, pointB);
+		for (int i = 0; i < points.length; i++) {
+			String point = points[i];
 
-		}
+			int length = point.split(",").length;
+
+			if (length == 2) {
+
+				waypoint = new ComponentID(i + "_searchBox");
+				typeIntoField(waypoint, point);
 
-		else {
-			typeIntoField(FROM_ROUTE, pointA);
-			clickElement(dropDown);
-			typeIntoField(TO_ROUTE, pointB);
-			clickElement(dropDown);
+			}
 
+			else {
+				waypoint = new ComponentID(i + "_searchBox");
+				typeIntoField(waypoint, point);
+				clickElement(dropDown);
+			}
 		}
 
 		clickElement(ROUTE_SEARCH);
@@ -160,9 +168,9 @@ public void verifyInstructionThroughUI(String routeStepNumber,
 
 	}
 
-	public void getRouteFromService(String pointA, String pointB,
-			String routeType) {
-		GPHService.parseRoute(pointA + "," + pointB, "gpx", routeType);
+	public void getRouteFromService(String routeType, String... points) {
+
+		GPHService.parseRoute("gpx", routeType, points);
 
 	}
 
@@ -196,14 +204,7 @@ public void isWayPointonRouteMap(String wayPointIndex,
 		case "WEB":
 
 			verifyInstructionThroughUI(wayPointIndex, wayPointDescription);
-			/*
-			 * WAY_POINTS = driver.findElements(By
-			 * .xpath("//*[@id='instructions']/tbody/tr[*]/td[2]"));
-			 * WAY_POINTS.get(Integer.parseInt(wayPointIndex) - 1).click();
-			 * Assert.assertTrue(getValue(WAYPOINT_ONMAP) +
-			 * " comparison failed", wayPointDescription
-			 * .equalsIgnoreCase(getValue(WAYPOINT_ONMAP)));
-			 */
+
 			break;
 		case "SERVICE":
 			wp = buildWayPoint(wayPoint_Coordinates, wayPointDescription,
@@ -214,14 +215,7 @@ public void isWayPointonRouteMap(String wayPointIndex,
 
 		default:
 			verifyInstructionThroughUI(wayPointIndex, wayPointDescription);
-			/*
-			 * WAY_POINTS = driver.findElements(By
-			 * .xpath("//*[@id='instructions']/tbody/tr[*]/td[2]"));
-			 * WAY_POINTS.get(Integer.parseInt(wayPointIndex) - 1).click();
-			 * Assert.assertTrue(getValue(WAYPOINT_ONMAP) +
-			 * " comparison failed", wayPointDescription
-			 * .equalsIgnoreCase(getValue(WAYPOINT_ONMAP)));
-			 */
+
 			wp = buildWayPoint(wayPoint_Coordinates, wayPointDescription,
 					azimuth, direction, time, distance);
 			Assert.assertTrue(GPHService.isWayPointOnGPXRoutes(wp));
@@ -245,9 +239,10 @@ private Waypoint buildWayPoint(String wayPoint_Coordinates,
 		wp.addExtensionData(ExtensionConstants.TIME, time);
 		wp.addExtensionData(ExtensionConstants.DISTANCE, distance);
 		LOG.info(wp.toString());
+		LOG.info(wp.getExtensionData().toString());
 		return wp;
 	}
-	
+
 	public void isWayPointNotonRouteMap(List<Map<String, String>> wayPointList) {
 
 		for (int i = 0; i < wayPointList.size(); i++) {
@@ -261,13 +256,13 @@ public void isWayPointNotonRouteMap(List<Map<String, String>> wayPointList) {
 			String distance = (String) wayPointList.get(i).get("distance");
 			Waypoint wp = buildWayPoint(waypointco, waypointdesc, azimuth,
 					direction, time, distance);
-			assertTrue (!GPHService.isWayPointOnGPXRoutes(wp));
+			assertTrue(!GPHService.isWayPointOnGPXRoutes(wp));
 
 		}
 
 	}
 
-	public void isWayPointonRouteMap(List<Map<String,String>> waypointList) {
+	public void isWayPointonRouteMap(List<Map<String, String>> waypointList) {
 
 		for (int i = 0; i < waypointList.size(); i++) {
 
@@ -302,8 +297,6 @@ public void isWayPointonRouteMap(List<Map<String,String>> waypointList) {
 
 	}
 
-
-
 	public void verifyTotalRouteTime(String totalRouteTime)
 			throws ParseException {
 
@@ -390,8 +383,8 @@ public void isTrackPointonRouteMap(List<Map<String, String>> trackPointsList)
 
 	}
 
-	public void isTrackPointNotonRouteMap(List<Map<String, String>> trackPointsList)
-			throws ParseException {
+	public void isTrackPointNotonRouteMap(
+			List<Map<String, String>> trackPointsList) throws ParseException {
 
 		for (int i = 0; i < trackPointsList.size(); i++) {
 
diff --git a/acceptancetesting/src/test/cucumber/DPNRouting.feature b/acceptancetesting/src/test/cucumber/DPNRouting.feature
index 0e0ab62ce5..50155c35d0 100644
--- a/acceptancetesting/src/test/cucumber/DPNRouting.feature
+++ b/acceptancetesting/src/test/cucumber/DPNRouting.feature
@@ -8,107 +8,107 @@ Feature: Verify a route from A to B
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco        | waypointdesc            | azimuth | direction | time  | distance |
-      | 4             | 53.1356,-1.820891 | Continue onto Mill Lane | 78      | E         | 23165 | 32.175   |
+      | 4             | 53.1356,-1.820891 | Continue onto Mill Lane | 69.0    | E         | 23165 | 32.2     |
 
     Examples: 
       | pointA              | pointB             | routetype |
       | 53.176062,-1.871472 | 53.154773,-1.77272 | foot      |
 
   @Routing
-  Scenario Outline: Verify  Road Names on a Walking Route  (Mill lane-BUXTON)
+  Scenario Outline: Verify  Road Names on a Walking Route  (Chatswoth Park)
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco          | waypointdesc                          | azimuth | direction | time   | distance |
-      | 5             | 53.197269,-1.608797 | Continue onto Chatsworth Road         | 181     | S         | 670049 | 930.629  |
-      | 6             | 53.189535,-1.613492 | Turn slight left onto Dale Road North | 141     | SE        | 312088 | 433.456  |
+      | wayPointIndex | waypointco          | waypointdesc                  | azimuth | direction | time   | distance |
+      | 2             | 53.221055,-1.623152 | Turn right onto B Road        | 143.0   | SE        | 953593 | 1324.4   |
+      | 5             | 53.197269,-1.608797 | Continue onto Chatsworth Road | 180.0   | S         | 670049 | 930.6    |
 
     Examples: 
       | pointA              | pointB              | routetype |
       | 53.211013,-1.619393 | 53.185757,-1.611969 | foot      |
 
   @Routing
-  Scenario Outline: Verify  Gate  Restrictions on a Route
+  Scenario Outline: Verify  Road Names on a Walking Route (Musden Low)
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco          | waypointdesc          | azimuth | direction | time  | distance |
-      | 3             | 53.042479,-1.820522 | Turn right onto Route | 249     | W         | 25753 | 35.769   |
+      | 3             | 53.042479,-1.820522 | Turn right onto Route | 237.0   | SW        | 25753 | 35.8     |
 
     Examples: 
       | pointA              | pointB              | routetype |
       | 53.049589,-1.823866 | 53.076372,-1.853379 | foot      |
 
   @Routing
-  Scenario Outline: Verify  Gate  Restrictions on a Route
+  Scenario Outline: Verify  Road Names on a Walking Route (A54)
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco          | waypointdesc                | azimuth | direction | time   | distance |
-      | 4             | 53.176842,-2.069334 | Turn slight left onto Track | 268     | W         | 171340 | 237.973  |
+      | wayPointIndex | waypointco          | waypointdesc         | azimuth | direction | time   | distance |
+      | 4             | 53.176842,-2.069334 | Turn left onto Track | 265.0   | W         | 171340 | 238.0    |
 
     Examples: 
       | pointA              | pointB              | routetype |
       | 53.173064,-2.060321 | 53.214387,-2.017271 | foot      |
 
   @Routing
-  Scenario Outline: Verify  Gate  Restrictions on a Route
+  Scenario Outline: Verify  Road Names on a Walking Route (Townhead )
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco         | waypointdesc         | azimuth | direction | time  | distance |
-      | 5             | 53.11862,-1.909506 | Turn left onto Route | 139     | SE        | 40897 | 56.802   |
+      | wayPointIndex | waypointco         | waypointdesc                | azimuth | direction | time  | distance |
+      | 5             | 53.11862,-1.909506 | Turn slight left onto Route | 152.0   | SE        | 40897 | 56.8     |
 
     Examples: 
       | pointA              | pointB             | routetype |
       | 53.122676,-1.909914 | 53.088159,-1.87142 | foot      |
 
   @Routing
-  Scenario Outline: Verify  Gate  Restrictions on a Route
+  Scenario Outline: Verify  Road Names on a Walking Route (Martin's Low)
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco          | waypointdesc          | azimuth | direction | time  | distance |
-      | 3             | 53.066198,-1.905401 | Turn right onto Track | 98      | E         | 38673 | 53.713   |
+      | 3             | 53.066198,-1.905401 | Turn right onto Track | 103.0   | E         | 38673 | 53.7     |
 
     Examples: 
       | pointA             | pointB              | routetype |
       | 53.06535,-1.906169 | 53.100994,-1.956274 | foot      |
 
   @Routing
-  Scenario Outline: 
+  Scenario Outline: Verify  Road Names on a Walking Route (Castleton Road)
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco          | waypointdesc                  | azimuth | direction | time   | distance |
-      | 2             | 53.347406,-1.760973 | Turn left onto Castleton Road | 86      | E         | 855317 | 1187.949 |
+      | 2             | 53.347406,-1.760973 | Turn left onto Castleton Road | 81.0    | E         | 855317 | 1187.9   |
 
     Examples: 
       | pointA              | pointB              | routetype |
       | 53.348832,-1.761122 | 53.197338,-1.594157 | foot      |
 
   @Routing
-  Scenario Outline: 
+  Scenario Outline: Verify  Road Names on a Walking Route (Hernstone Lane )
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco          | waypointdesc                 | azimuth | direction | time   | distance |
-      | 3             | 53.305821,-1.814508 | Continue onto Hernstone Lane | 288     | W         | 298331 | 414.351  |
+      | 3             | 53.305821,-1.814508 | Continue onto Hernstone Lane | 299.0   | NW        | 298331 | 414.4    |
 
     Examples: 
       | pointA              | pointB              | routetype |
       | 53.300714,-1.786126 | 53.287803,-1.816746 | foot      |
 
   @Routing
-  Scenario Outline: 
+  Scenario Outline: Verify  Road Names on a Walking Route (Monyash Road)
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco         | waypointdesc               | azimuth | direction | time   | distance |
-      | 5             | 53.20882,-1.688212 | Continue onto Monyash Road | 67      | NE        | 445921 | 619.335  |
+      | 5             | 53.20882,-1.688212 | Continue onto Monyash Road | 54.0    | NE        | 445921 | 619.3    |
 
     Examples: 
       | pointA              | pointB              | routetype |
       | 53.194909,-1.710481 | 53.156696,-1.634947 | foot      |
 
   @Routing
-  Scenario Outline: 
+  Scenario Outline: Verify  Road Names on a Walking Route (Whitfield lane)
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco          | waypointdesc                      | azimuth | direction | time   | distance |
-      | 4             | 53.143286,-1.647841 | Turn slight right onto Elton Road | 280     | W         | 193296 | 268.469  |
+      | wayPointIndex | waypointco          | waypointdesc               | azimuth | direction | time   | distance |
+      | 4             | 53.143286,-1.647841 | Turn right onto Elton Road | 287.0   | W         | 193296 | 268.5    |
 
     Examples: 
       | pointA              | pointB              | routetype |
@@ -118,9 +118,88 @@ Feature: Verify a route from A to B
   Scenario Outline: Verify  Road Names on a Walking Route  (Cardlemere Lane)
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco          | waypointdesc                   | azimuth | direction | time   | distance |
-      | 4             | 53.129383,-1.754591 | Turn left onto Cardlemere Lane | 115     | SE        | 581179 | 807.194  |
+      | wayPointIndex | waypointco          | waypointdesc                          | azimuth | direction | time   | distance |
+      | 4             | 53.129383,-1.754591 | Turn slight left onto Cardlemere Lane | 127.0   | SE        | 581179 | 807.2    |
 
     Examples: 
       | pointA              | pointB             | routetype |
       | 53.114295,-1.762789 | 53.086961,-1.69626 | foot      |
+
+  @Routing
+  Scenario Outline: Verify  Road Names on a Walking Route using one intermediate point ( Old Coalpit Lane)
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI via "<pointC>"
+    Then I should be able to verify the waypoints on the route map:
+      | wayPointIndex | waypointco          | waypointdesc                    | azimuth | direction | time   | distance |
+      | 2             | 53.23952,-1.803512  | Turn left onto Sough Lane       | 225.0   | SW        | 350707 | 487.1    |
+      | 29            | 53.140548,-1.810174 | Turn slight left onto Mill Lane | 205.0   | SW        | 48332  | 67.1     |
+      | 34            | 53.129146,-1.866738 | Turn left onto Cheadle Road     | 190.0   | S         | 169171 | 235.0    |
+
+    Examples: 
+      | pointA              | pointB            | pointC              | routetype |
+      | 53.238625,-1.794511 | 53.1651,-1.776435 | 53.125221,-1.871205 | foot      |
+
+  @Routing
+  Scenario Outline: Verify  Road Names on a Walking Route using one intermediate point ( Newhouses Farm)
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI via "<pointC>"
+    Then I should be able to verify the waypoints on the route map:
+      | wayPointIndex | waypointco          | waypointdesc                          | azimuth | direction | time    | distance |
+      | 7             | 53.305394,-1.819253 | Turn slight left onto Hernstone Lane  | 43.0    | NE        | 298331  | 414.4    |
+      | 12            | 53.25475,-1.727239  | Turn slight left onto Castlegate Lane | 179.0   | S         | 1149598 | 1596.7   |
+
+    Examples: 
+      | pointA              | pointB             | pointC              | routetype |
+      | 53.303058,-1.836061 | 53.28261,-1.761964 | 53.233207,-1.633878 | foot      |
+
+  @Routing
+  Scenario Outline: Verify  Road Names on a Walking Route using one intermediate point ( Bakewell)
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI via "<pointC>"
+    Then I should be able to verify the waypoints on the route map:
+      | wayPointIndex | waypointco          | waypointdesc                            | azimuth | direction | time    | distance |
+      | 6             | 53.145466,-1.778242 | Turn slight right onto Tissington Trail | 355.0   | N         | 1731124 | 2404.3   |
+      | 15            | 53.195536,-1.762602 | Continue onto Church Street             | 74.0    | E         | 906984  | 1259.7   |
+      | 19            | 53.20882,-1.688212  | Continue onto Monyash Road              | 54.0    | NE        | 359536  | 499.4    |
+
+    Examples: 
+      | pointA              | pointB              | pointC              | routetype |
+      | 53.138247,-1.752507 | 53.195653,-1.762655 | 53.211574,-1.682278 | foot      |
+
+  @Routing
+  Scenario Outline: Verify  Road Names on a Walking Route  using 2 intermediate waypoints (Mill Lane)
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI via "<pointC>" and "<pointD>"
+    Then I should be able to verify the waypoints on the route map:
+      | wayPointIndex | waypointco          | waypointdesc                    | azimuth | direction | time   | distance |
+      | 5             | 53.140548,-1.810174 | Turn slight left onto Mill Lane | 205.0   | SW        | 48332  | 67.1     |
+      | 12            | 53.131356,-1.852045 | Turn slight right onto Path     | 305.0   | NW        | 700132 | 972.4    |
+      | 16            | 53.181282,-1.869038 | Turn left onto Market Place     | 315.0   | NW        | 791    | 1.1      |
+
+    Examples: 
+      | pointA              | pointB              | pointC             | pointD              | routetype |
+      | 53.139805,-1.803217 | 53.133646,-1.826223 | 53.14993,-1.868096 | 53.181298,-1.869034 | foot      |
+
+  @Routing
+  Scenario Outline: Verify  Road Names on a Walking Route  using 2 intermediate waypoints (Tag Lane)
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI via "<pointC>" and "<pointD>"
+    Then I should be able to verify the waypoints on the route map:
+      | wayPointIndex | waypointco          | waypointdesc                            | azimuth | direction | time   | distance |
+      | 7             | 53.227765,-1.848174 | Turn slight right onto Old Coalpit Lane | 73.0    | E         | 902277 | 1253.2   |
+      | 18            | 53.244806,-1.809527 | Turn slight left onto Blackwell Dale    | 25.0    | NE        | 988875 | 1373.4   |
+      | 26            | 53.281439,-1.765527 | Continue onto Whitecross Road           | 53.0    | NE        | 218224 | 303.1    |
+      | 32            | 53.224822,-1.70717  | Turn left onto Hall End Lane            | 68.0    | E         | 78256  | 108.7    |
+
+    Examples: 
+      | pointA              | pointB              | pointC              | pointD              | routetype |
+      | 53.190346,-1.802704 | 53.239419,-1.818421 | 53.280601,-1.764495 | 53.233207,-1.633878 | foot      |
+
+  @Routing
+  Scenario Outline: Verify  Road Names on a Walking Route  using 2 intermediate waypoints (Dowlow Farm)
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI via "<pointC>" and "<pointD>"
+    Then I should be able to verify the waypoints on the route map:
+      | wayPointIndex | waypointco          | waypointdesc                       | azimuth | direction | time   | distance |
+      | 2             | 53.206014,-1.83483  | Turn right onto Midshires Way      | 191.0   | S         | 265173 | 368.3    |
+      | 19            | 53.202937,-1.870926 | Continue onto Glutton Dale         | 220.0   | SW        | 267936 | 372.1    |
+      | 28            | 53.181324,-1.869107 | Turn slight left onto Market Place | 135.0   | SE        | 4729   | 6.6      |
+      | 32            | 53.129146,-1.866738 | Continue onto Cheadle Road         | 190.0   | S         | 169171 | 235.0    |
+
+    Examples: 
+      | pointA              | pointB              | pointC              | pointD             | routetype |
+      | 53.206965,-1.839021 | 53.203607,-1.857557 | 53.149631,-1.867364 | 53.11417,-1.895082 | foot      |
diff --git a/acceptancetesting/src/test/cucumber/Routing-Exeter.feature b/acceptancetesting/src/test/cucumber/Routing-Exeter.feature
index 1eb76a7f18..c301c8cdcf 100644
--- a/acceptancetesting/src/test/cucumber/Routing-Exeter.feature
+++ b/acceptancetesting/src/test/cucumber/Routing-Exeter.feature
@@ -10,7 +10,7 @@ Feature: Verify a route from A to B
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco          | waypointdesc                      | azimuth | direction | time  | distance |
-      | 2             | 50.719156,-3.537811 | Continue onto A3015 (FROG STREET) | 54      | NE        | 14517 | 221.824  |
+      | 2             | 50.719156,-3.537811 | Continue onto A3015 (FROG STREET) | 41.0    | NE        | 14517 | 221.8    |
 
     Examples: 
       | pointA              | pointB              | routetype |
@@ -21,8 +21,8 @@ Feature: Verify a route from A to B
   Scenario Outline: Verify  one Way  Restrictions on a Route (Cleveladn Street-Exeter)
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco         | waypointdesc                     | azimuth | direction | time | distance |
-      | 2             | 50.717806,-3.54264 | Turn sharp left onto BULLER ROAD | 124     | SE        | 5744 | 55.845   |
+      | wayPointIndex | waypointco         | waypointdesc               | azimuth | direction | time | distance |
+      | 2             | 50.717806,-3.54264 | Turn left onto BULLER ROAD | 137.0   | SE        | 5744 | 55.8     |
 
     Examples: 
       | pointA              | pointB              | routetype |
@@ -33,7 +33,7 @@ Feature: Verify a route from A to B
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco          | waypointdesc                    | azimuth | direction | time  | distance |
-      | 4             | 50.718462,-3.541302 | Turn left onto CLEVELAND STREET | 244     | SW        | 12258 | 119.183  |
+      | 4             | 50.718462,-3.541302 | Turn left onto CLEVELAND STREET | 232.0   | SW        | 12258 | 119.2    |
 
     Examples: 
       | pointA              | pointB              | routetype |
@@ -41,10 +41,10 @@ Feature: Verify a route from A to B
 
   @Routing
   Scenario Outline: Verify  one Way  Restrictions (Except Buses) on a Route (SIDWELL STREET-Exeter)
-    Given I request a route between "<pointA>" and "webDriverHubUrl=http://ND26185.ordsvy.gov.uk:5555/wd/hub<pointB>" as a "<routetype>" from RoutingAPI
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco         | waypointdesc                    | azimuth | direction | time | distance |
-      | 4             | 50.726689,-3.52712 | Turn left onto LONGBROOK STREET | 196     | S         | 8057 | 78.339   |
+      | 4             | 50.726689,-3.52712 | Turn left onto LONGBROOK STREET | 190.0   | S         | 8057 | 78.3     |
 
     Examples: 
       | pointA              | pointB               | routetype |
@@ -61,7 +61,7 @@ Feature: Verify a route from A to B
       | pointA              | pointB             | routetype |
       | 50.720492,-3.535221 | 50.718641,-3.53476 | car       |
 
-  @KnownIssue
+  @KnownIssues
   Scenario Outline: Verify  one Way  Restrictions  on a Route (Exeter WSPIP-98)
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints not on the route map:
@@ -78,7 +78,7 @@ Feature: Verify a route from A to B
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco         | waypointdesc                                 | azimuth | direction | time  | distance |
-      | 2             | 50.725549,-3.52693 | Turn slight left onto NEW NORTH ROAD (B3183) | 279     | W         | 75355 | 732.658  |
+      | 2             | 50.725549,-3.52693 | Turn slight left onto NEW NORTH ROAD (B3183) | 285.0   | W         | 74986 | 729.1    |
 
     Examples: 
       | pointA              | pointB             | routetype |
@@ -88,8 +88,8 @@ Feature: Verify a route from A to B
   Scenario Outline: Verify  No Entry  Restrictions on a Route (CHEEK STREET-Exeter)
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco          | waypointdesc                           | azimuth | direction | time | distance |
-      | 2             | 50.727244,-3.522476 | Turn sharp left onto SUMMERLAND STREET | 302     | NW        | 6716 | 65.31    |
+      | wayPointIndex | waypointco          | waypointdesc                     | azimuth | direction | time | distance |
+      | 2             | 50.727244,-3.522476 | Turn left onto SUMMERLAND STREET | 313.0   | NW        | 6716 | 65.3     |
 
     Examples: 
       | pointA              | pointB             | routetype |
@@ -99,20 +99,20 @@ Feature: Verify a route from A to B
   Scenario Outline: Verify  No Entry(Except for Buses and Taxis)  Restrictions on a Route (Sidwell Street-Exeter)
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco         | waypointdesc                    | azimuth | direction | time  | distance |
-      | 4             | 50.726418,-3.52381 | Turn left onto BAMPFYLDE STREET | 58      | NE        | 13514 | 131.399  |
+      | wayPointIndex | waypointco         | waypointdesc                           | azimuth | direction | time  | distance |
+      | 4             | 50.726418,-3.52381 | Turn slight left onto BAMPFYLDE STREET | 45.0    | NE        | 13514 | 131.4    |
 
     Examples: 
       | pointA              | pointB             | routetype |
       | 50.726529,-3.524928 | 50.727002,-3.52419 | car       |
 
-  # No Turns Restrictions
+  # No Turns Restrictions and Roundabout
   @Routing
   Scenario Outline: Verify  No Turn  Restrictions on a Route (Western Way-Exeter)
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco          | waypointdesc                | azimuth | direction | time | distance |
-      | 2             | 50.728509,-3.520647 | Turn slight left onto B3212 | 282     | W         | 2241 | 21.797   |
+      | wayPointIndex | waypointco          | waypointdesc                                   | azimuth | direction | time  | distance |
+      | 2             | 50.728509,-3.520647 | At roundabout, take exit 1 onto SIDWELL STREET | 282.0   | W         | 21850 | 212.5    |
 
     Examples: 
       | pointA              | pointB              | routetype |
@@ -123,7 +123,7 @@ Feature: Verify a route from A to B
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco          | waypointdesc                  | azimuth | direction | time  | distance |
-      | 3             | 50.725002,-3.520632 | Turn left onto RUSSELL STREET | 293     | NW        | 25597 | 248.881  |
+      | 3             | 50.725002,-3.520632 | Turn left onto RUSSELL STREET | 303.0   | NW        | 25597 | 248.9    |
 
     Examples: 
       | pointA              | pointB              | routetype |
@@ -140,12 +140,12 @@ Feature: Verify a route from A to B
       | pointA             | pointB             | routetype |
       | 50.72148,-3.532485 | 50.721888,-3.53182 | car       |
 
-  @KnownIssue
+  @KnownIssues
   Scenario Outline: Verify No  Turn Restrictions(Except Bus)  on a Route (BELGROVE ROAD -Exeter ROUTE-67)
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints not on the route map:
-      | wayPointIndex | waypointco         | waypointdesc                       | azimuth | direction | time | distance |
-      | 2             | 50.725997,-3.52296 | Turn sharp left onto CHEEKE STREET | 135     | SE        | 5639 | 56.915   |
+      | wayPointIndex | waypointco         | waypointdesc                 | azimuth | direction | time | distance |
+      | 2             | 50.725997,-3.52296 | Turn left onto CHEEKE STREET | 135     | SE        | 5639 | 56.915   |
 
     Examples: 
       | pointA              | pointB             | routetype |
@@ -157,7 +157,7 @@ Feature: Verify a route from A to B
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco          | waypointdesc                | azimuth | direction | time | distance |
-      | 2             | 50.726462,-3.523882 | Continue onto CHEEKE STREET | 121     | SE        | 725  | 7.054    |
+      | 2             | 50.726462,-3.523882 | Continue onto CHEEKE STREET | 133.0   | SE        | 725  | 7.1      |
 
     Examples: 
       | pointA              | pointB              | routetype |
@@ -168,7 +168,7 @@ Feature: Verify a route from A to B
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco          | waypointdesc                  | azimuth | direction | time  | distance |
-      | 2             | 50.725002,-3.520632 | Turn left onto RUSSELL STREET | 293     | NW        | 25597 | 248.881  |
+      | 2             | 50.725002,-3.520632 | Turn left onto RUSSELL STREET | 303.0   | NW        | 25597 | 248.9    |
 
     Examples: 
       | pointA              | pointB              | routetype |
@@ -189,8 +189,8 @@ Feature: Verify a route from A to B
   Scenario Outline: Verify  Mandatory Turn Restriction (Denmark Road-Exeter)
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints not on the route map:
-      | wayPointIndex | waypointco          | waypointdesc                           | azimuth | direction | time  | distance |
-      | 2             | 50.724703,-3.520835 | Turn right onto HEAVITREE ROAD (B3183) | 105     | E         | 15636 | 152.027  |
+      | wayPointIndex | waypointco          | waypointdesc                           | azimuth | direction | time | distance |
+      | 2             | 50.724703,-3.520835 | Turn right onto HEAVITREE ROAD (B3183) | 293.0   | NW        | 1118 | 10.9     |
 
     Examples: 
       | pointA              | pointB             | routetype |
@@ -202,7 +202,7 @@ Feature: Verify a route from A to B
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco       | waypointdesc               | azimuth | direction | time  | distance |
-      | 2             | 50.72258,-3.5326 | Continue onto SOUTH STREET | 123     | SE        | 38986 | 379.059  |
+      | 2             | 50.72258,-3.5326 | Continue onto SOUTH STREET | 135.0   | SE        | 38986 | 379.1    |
 
     Examples: 
       | pointA              | pointB              | routetype |
@@ -212,8 +212,8 @@ Feature: Verify a route from A to B
   Scenario Outline: Verify  Access Limited To  Restrictions on a Route (Paris Street-Exeter)
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco         | waypointdesc                    | azimuth | direction | time  | distance |
-      | 5             | 50.726418,-3.52381 | Turn left onto BAMPFYLDE STREET | 58      | NE        | 13514 | 131.399  |
+      | wayPointIndex | waypointco         | waypointdesc                           | azimuth | direction | time  | distance |
+      | 5             | 50.726418,-3.52381 | Turn slight left onto BAMPFYLDE STREET | 45.0    | NE        | 13514 | 131.4    |
 
     Examples: 
       | pointA              | pointB              | routetype |
@@ -224,8 +224,8 @@ Feature: Verify a route from A to B
   Scenario Outline: Verify  Access Prohibited To  Restrictions on a Route (Iron Bridge Street-Exeter)
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco         | waypointdesc                         | azimuth | direction | time  | distance |
-      | 2             | 50.724661,-3.53639 | Turn sharp left onto ST DAVID'S HILL | 299     | NW        | 45198 | 439.449  |
+      | wayPointIndex | waypointco         | waypointdesc                   | azimuth | direction | time  | distance |
+      | 2             | 50.724661,-3.53639 | Turn left onto ST DAVID'S HILL | 310.0   | NW        | 45198 | 439.4    |
 
     Examples: 
       | pointA             | pointB              | routetype |
@@ -235,8 +235,8 @@ Feature: Verify a route from A to B
   Scenario Outline: Verify  Access Prohibited To  Restrictions on a Route (Upper Paul Street-Exeter)
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco          | waypointdesc                      | azimuth | direction | time  | distance |
-      | 2             | 50.724819,-3.532223 | Turn sharp left onto QUEEN STREET | 312     | NW        | 37994 | 369.415  |
+      | wayPointIndex | waypointco          | waypointdesc                | azimuth | direction | time  | distance |
+      | 2             | 50.724819,-3.532223 | Turn left onto QUEEN STREET | 324.0   | NW        | 37994 | 369.4    |
 
     Examples: 
       | pointA              | pointB              | routetype |
@@ -246,9 +246,9 @@ Feature: Verify a route from A to B
   @Routing
   Scenario Outline: Verify  Ford  Restrictions on a Route (BONHAY Road-Exeter)
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
-    Then I should be able to verify the waypoints not on the route map:
-      | wayPointIndex | waypointco          | waypointdesc                              | azimuth | direction | time  | distance |
-      | 3             | 50.730325,-3.541923 | Turn slight right onto A377 (BONHAY ROAD) | 217     | SW        | 87530 | 1337.351 |
+    Then I should be able to verify the waypoints on the route map:
+      | wayPointIndex | waypointco          | waypointdesc                    | azimuth | direction | time  | distance |
+      | 4             | 50.727823,-3.540036 | Turn slight left onto HELE ROAD | 85.0    | E         | 15789 | 153.5    |
 
     Examples: 
       | pointA             | pointB              | routetype |
@@ -259,7 +259,7 @@ Feature: Verify a route from A to B
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco          | waypointdesc               | azimuth | direction | time  | distance |
-      | 2             | 50.730716,-3.530028 | Turn left onto HORSEGUARDS | 194     | S         | 28148 | 273.666  |
+      | 2             | 50.730716,-3.530028 | Turn left onto HORSEGUARDS | 189.0   | S         | 28148 | 273.7    |
 
     Examples: 
       | pointA             | pointB              | routetype |
@@ -270,8 +270,8 @@ Feature: Verify a route from A to B
   Scenario Outline: Verify  Gate  Restrictions on a Route (Cathedral Close Road-Exeter)
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco          | waypointdesc                           | azimuth | direction | time  | distance |
-      | 3             | 50.722198,-3.526704 | Turn sharp right onto SOUTHERNHAY EAST | 214     | SW        | 26318 | 255.907  |
+      | wayPointIndex | waypointco          | waypointdesc                     | azimuth | direction | time  | distance |
+      | 3             | 50.722198,-3.526704 | Turn right onto SOUTHERNHAY EAST | 202.0   | SW        | 26318 | 255.9    |
 
     Examples: 
       | pointA              | pointB             | routetype |
@@ -282,7 +282,7 @@ Feature: Verify a route from A to B
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco          | waypointdesc        | azimuth | direction | time  | distance |
-      | 2             | 50.722081,-3.539012 | Turn left onto A377 | 160     | S         | 25882 | 395.48   |
+      | 2             | 50.722081,-3.539012 | Turn left onto A377 | 166.0   | S         | 25882 | 395.5    |
 
     Examples: 
       | pointA            | pointB              | routetype |
@@ -294,18 +294,19 @@ Feature: Verify a route from A to B
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco         | waypointdesc                    | azimuth | direction | time  | distance |
-      | 2             | 50.732011,-3.53798 | Turn right onto STREATHAM DRIVE | 3       | N         | 17156 | 166.807  |
+      | 2             | 50.732011,-3.53798 | Turn right onto STREATHAM DRIVE | 2.0     | N         | 17156 | 166.8    |
 
     Examples: 
       | pointA              | pointB              | routetype |
       | 50.732296,-3.535372 | 50.733538,-3.537462 | car       |
 
+  #Roundabout
   @Routing
   Scenario Outline: Verify a  Private Road (Publicly Accessible) on a Route (QUEEN STREET)
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco          | waypointdesc                                 | azimuth | direction | time  | distance |
-      | 2             | 50.727397,-3.535531 | Turn slight left onto NEW NORTH ROAD (B3183) | 287     | W         | 18644 | 181.293  |
+      | wayPointIndex | waypointco          | waypointdesc                                           | azimuth | direction | time  | distance |
+      | 2             | 50.727397,-3.535531 | At roundabout, take exit 3 onto NEW NORTH ROAD (B3183) | 295.0   | NW        | 18644 | 181.3    |
 
     Examples: 
       | pointA              | pointB              | routetype |
@@ -316,7 +317,7 @@ Feature: Verify a route from A to B
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco         | waypointdesc                      | azimuth | direction | time | distance |
-      | 1             | 50.72593,-3.521909 | Continue onto B3212 (WESTERN WAY) | 51      | NE        | 3985 | 38.745   |
+      | 1             | 50.72593,-3.521909 | Continue onto B3212 (WESTERN WAY) | 38.0    | NE        | 3985 | 38.7     |
 
     Examples: 
       | pointA              | pointB             | routetype |
@@ -332,3 +333,27 @@ Feature: Verify a route from A to B
     Examples: 
       | pointA              | pointB             | routetype |
       | 50.724316,-3.521008 | 50.72413,-3.518874 | car       |
+
+  #Roundabouts
+  @Routing
+  Scenario Outline: Verify a roundabout(WESTERN WAY)
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Then I should be able to verify the waypoints on the route map:
+      | wayPointIndex | waypointco          | waypointdesc                                   | azimuth | direction | time  | distance |
+      | 2             | 50.728793,-3.520273 | At roundabout, take exit 2 onto SIDWELL STREET | 178.0   | S         | 26654 | 259.2    |
+
+    Examples: 
+      | pointA              | pointB              | routetype |
+      | 50.729277,-3.519078 | 50.728889,-3.522884 | car       |
+
+  @Routing
+  Scenario Outline: Verify a roundabout(WESTERN WAY)
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Then I should be able to verify the waypoints on the route map:
+      | wayPointIndex | waypointco          | waypointdesc                                        | azimuth | direction | time  | distance |
+      | 2             | 50.725096,-3.522378 | At roundabout, take exit 4 onto B3212 (WESTERN WAY) | 239.0   | SW        | 26306 | 255.8    |
+
+    Examples: 
+      | pointA              | pointB              | routetype |
+      | 50.724137,-3.518937 | 50.728366,-3.524132 | car       |
+      
diff --git a/acceptancetesting/src/test/cucumber/routing.feature b/acceptancetesting/src/test/cucumber/routing.feature
index d62bf9bcef..c16d99afd7 100644
--- a/acceptancetesting/src/test/cucumber/routing.feature
+++ b/acceptancetesting/src/test/cucumber/routing.feature
@@ -8,7 +8,7 @@ Feature: Verify a route from A to B
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco          | waypointdesc                 | azimuth | direction | time  | distance |
-      | 1             | 51.472387,-0.361788 | Continue onto ELLINGTON ROAD | 280     | W         | 10789 | 104.896  |
+      | 1             | 51.472387,-0.361788 | Continue onto ELLINGTON ROAD | 286.0   | W         | 10789 | 104.9    |
 
     Examples: 
       | pointA                                 | pointB                                 | routetype |
@@ -18,10 +18,10 @@ Feature: Verify a route from A to B
   Scenario Outline: Verify  waypoints on a Route from Hounslow to Reading
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco          | waypointdesc                      | azimuth | direction | time    | distance  |
-      | 1             | 51.472387,-0.361788 | Continue onto ELLINGTON ROAD      | 280     | W         | 10789   | 104.896   |
-      | 9             | 51.491777,-0.41102  | Turn slight left onto M4          | 303     | NW        | 1298429 | 36068.472 |
-      | 13            | 51.451397,-0.960099 | Turn right onto WATLINGTON STREET | 321     | NW        | 15401   | 149.744   |
+      | wayPointIndex | waypointco          | waypointdesc                         | azimuth | direction | time   | distance |
+      | 1             | 51.472387,-0.361788 | Continue onto ELLINGTON ROAD         | 286.0   | W         | 10789  | 104.9    |
+      | 9             | 51.477555,-0.403923 | At roundabout, take exit 3 onto A312 | 238.0   | SW        | 115905 | 1770.8   |
+      | 14            | 51.451397,-0.960099 | Turn right onto WATLINGTON STREET    | 333.0   | NW        | 15401  | 149.7    |
 
     Examples: 
       | pointA                                 | pointB                                 | routetype |
@@ -30,14 +30,14 @@ Feature: Verify a route from A to B
   @Routing
   Scenario Outline: Verify  waypoints on a Route from Southampton to Glasgow
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
-    Then I should be able to verify the waypoints on the route map:Sunia
-      | wayPointIndex | waypointco          | waypointdesc                      | azimuth | direction | time     | distance   |
-      | 1             | 50.896796,-1.400544 | Continue onto PLATFORM ROAD (A33) | 261     | W         | 5514     | 84.266     |
-      | 16            | 50.953446,-1.403571 | Turn slight right onto M3         | 41      | NE        | 3006306  | 83510.255  |
-      | 17            | 51.399043,-0.547504 | Continue onto M25                 | 74      | E         | 741727   | 20604.228  |
-      | 18            | 51.561606,-0.539424 | Continue onto M40                 | 277     | W         | 4953466  | 137598.554 |
-      | 20            | 52.480513,-1.719489 | Continue onto M6                  | 301     | NW        | 12028330 | 334127.547 |
-      | 24            | 55.846513,-4.092642 | Turn slight left onto M8          | 360     | N         | 395981   | 11000.027  |
+    Then I should be able to verify the waypoints on the route map:
+      | wayPointIndex | waypointco          | waypointdesc                        | azimuth | direction | time    | distance |
+      | 1             | 50.896796,-1.400544 | Continue onto PLATFORM ROAD (A33)   | 254.0   | W         | 5514    | 84.3     |
+      | 16            | 50.951921,-1.404239 | At roundabout, take exit 1 onto A33 | 318.0   | NW        | 12235   | 187.0    |
+      | 17            | 50.953446,-1.403571 | Turn slight right onto M3           | 28.0    | NE        | 3006309 | 83510.0  |
+      | 18            | 51.399043,-0.547504 | Continue onto M25                   | 64.0    | NE        | 741727  | 20604.1  |
+      | 20            | 52.351964,-1.809695 | Turn slight right onto M42          | 10.0    | N         | 614298  | 17064.2  |
+      | 24            | 55.835519,-4.099157 | Continue onto M73                   | 27.0    | NE        | 46569   | 1293.6   |
 
     Examples: 
       | pointA              | pointB             | routetype |
@@ -47,12 +47,12 @@ Feature: Verify a route from A to B
   Scenario Outline: Verify  waypoints on a Route from London to Birmingham
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco          | waypointdesc                                            | azimuth | direction | time    | distance   |
-      | 1             | 51.507234,-0.127584 | Continue onto CHARING CROSS (A4)                        | 260     | W         | 7262    | 110.965    |
-      | 7             | 51.517207,-0.142804 | Turn slight left onto A4201                             | 295     | NW        | 2812    | 42.971     |
-      | 21            | 51.571905,-0.230521 | Turn slight left onto M1                                | 33      | NE        | 4377586 | 121602.814 |
-      | 22            | 52.399959,-1.175042 | Continue onto M6                                        | 334     | NW        | 1867733 | 51882.763  |
-      | 23            | 52.508912,-1.871271 | Continue onto ASTON EXPRESSWAY (ELEVATED ROAD) (A38(M)) | 251     | W         | 25441   | 706.768    |
+      | wayPointIndex | waypointco          | waypointdesc                                            | azimuth | direction | time    | distance |
+      | 1             | 51.507234,-0.127584 | At roundabout, take exit 2 onto CHARING CROSS (A4)      | 253.0   | W         | 7262    | 111.0    |
+      | 7             | 51.517207,-0.142804 | Turn slight left onto A4201                             | 307.0   | NW        | 2812    | 43.0     |
+      | 21            | 51.853097,-0.424279 | At roundabout, take exit 1 onto M1                      | 311.0   | NW        | 3011846 | 83663.7  |
+      | 22            | 52.399959,-1.175042 | Continue onto M6                                        | 343.0   | N         | 1867732 | 51882.5  |
+      | 23            | 52.508912,-1.871271 | Continue onto ASTON EXPRESSWAY (ELEVATED ROAD) (A38(M)) | 240.0   | SW        | 25441   | 706.8    |
 
     Examples: 
       | pointA              | pointB              | routetype |
@@ -148,8 +148,8 @@ Feature: Verify a route from A to B
   Scenario Outline: Verify  No Turn   (WSPIP-76:Eastley- TWYFORD ROAD )
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco          | waypointdesc                       | azimuth | direction | time | distance |
-      | 3             | 50.971186,-1.350769 | Turn left onto TWYFORD ROAD (A335) | 353     | N         | 5625 | 85.961   |
+      | wayPointIndex | waypointco          | waypointdesc                | azimuth | direction | time | distance |
+      | 3             | 50.971952,-1.350891 | Turn left onto THE CRESCENT | 294.0   | NW        | 3832 | 37.3     |
 
     Examples: 
       | pointA              | pointB              | routetype |
@@ -159,8 +159,8 @@ Feature: Verify a route from A to B
   Scenario Outline: Verify  No Turn   (WSPIP-76:Eastley- Station Hill Road)
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco          | waypointdesc                              | azimuth | direction | time | distance |
-      | 2             | 50.969817,-1.350504 | Turn slight left onto STATION HILL (A335) | 180     | S         | 2932 | 44.811   |
+      | wayPointIndex | waypointco          | waypointdesc                      | azimuth | direction | time | distance |
+      | 2             | 50.969817,-1.350504 | Continue onto STATION HILL (A335) | 179.0   | S         | 2932 | 44.8     |
 
     Examples: 
       | pointA              | pointB             | routetype |
@@ -170,8 +170,8 @@ Feature: Verify a route from A to B
   Scenario Outline: Verify  No Turn   (Treaty Center-Hounslow- Fairfields Road)
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco          | waypointdesc                               | azimuth | direction | time  | distance |
-      | 2             | 51.468925,-0.359049 | Turn slight left onto A315 (HANWORTH ROAD) | 250     | W         | 14656 | 223.972  |
+      | wayPointIndex | waypointco          | waypointdesc                        | azimuth | direction | time  | distance |
+      | 2             | 51.468925,-0.359049 | Turn left onto HANWORTH ROAD (A315) | 239.0   | SW        | 14656 | 224.0    |
 
     Examples: 
       | pointA             | pointB              | routetype |
@@ -193,7 +193,7 @@ Feature: Verify a route from A to B
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco          | waypointdesc                   | azimuth | direction | time  | distance |
-      | 2             | 51.470846,-0.363527 | Turn right onto LANSDOWNE ROAD | 264     | W         | 12772 | 124.177  |
+      | 2             | 51.470846,-0.363527 | Turn right onto LANSDOWNE ROAD | 259.0   | W         | 12772 | 124.2    |
 
     Examples: 
       | pointA             | pointB              | routetype |
@@ -215,7 +215,7 @@ Feature: Verify a route from A to B
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco          | waypointdesc                         | azimuth | direction | time  | distance |
-      | 2             | 50.993815,-1.461397 | Turn slight right onto HIGHWOOD LANE | 344     | N         | 53534 | 520.487  |
+      | 2             | 50.993815,-1.461397 | Turn slight right onto HIGHWOOD LANE | 349.0   | N         | 53534 | 520.5    |
 
     Examples: 
       | pointA              | pointB              | routetype |
@@ -226,7 +226,7 @@ Feature: Verify a route from A to B
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco          | waypointdesc                               | azimuth | direction | time  | distance |
-      | 3             | 50.782654,-1.060556 | Turn sharp left onto A288 (EASTERN PARADE) | 256     | W         | 46621 | 712.337  |
+      | 3             | 50.782654,-1.060556 | Turn sharp left onto A288 (EASTERN PARADE) | 248.0   | W         | 46622 | 712.3    |
 
     Examples: 
       | pointA             | pointB              | routetype |
@@ -236,9 +236,9 @@ Feature: Verify a route from A to B
   Scenario Outline: Verify  Route using Full UK Address (Southampton to London)
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointdesc                          |
-      | 3             | Turn left onto BROWNHILL WAY          |
-      | 18            | Continue onto A219 (HAMMERSMITH ROAD) |
+      | wayPointIndex | waypointdesc                                  |
+      | 3             | At roundabout, take exit 2 onto BROWNHILL WAY |
+      | 18            | Turn slight left onto KENSINGTON ROAD (A315)  |
 
     Examples: 
       | pointA                                           | pointB                                 | routetype |
@@ -248,9 +248,9 @@ Feature: Verify a route from A to B
   Scenario Outline: Verify  Route using Full UK Address (Hounslow to Slough)
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointdesc                           |
-      | 9             | Turn right onto HUNTERCOMBE LANE NORTH |
-      | 10            | Turn left onto WENDOVER ROAD           |
+      | wayPointIndex | waypointdesc                                   |
+      | 9             | At roundabout, take exit 1 onto BATH ROAD (A4) |
+      | 10            | Turn right onto HUNTERCOMBE LANE NORTH         |
 
     Examples: 
       | pointA                              | pointB                                      | routetype |
@@ -260,9 +260,9 @@ Feature: Verify a route from A to B
   Scenario Outline: Verify  Route using Full UK Address (Southampton to London)
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointdesc                      |
-      | 2             | Turn left onto MONTAGUE STREET    |
-      | 19            | Turn right onto WHITEKNIGHTS ROAD |
+      | wayPointIndex | waypointdesc                   |
+      | 2             | Turn left onto MONTAGUE STREET |
+      | 19            | Continue onto M42              |
 
     Examples: 
       | pointA                                                      | pointB                                                                                | routetype |
@@ -272,9 +272,9 @@ Feature: Verify a route from A to B
   Scenario Outline: Verify  Route using Full UK Address (Birmingham to reading)
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointdesc                      |
-      | 2             | Turn left onto MONTAGUE STREET    |
-      | 19            | Turn right onto WHITEKNIGHTS ROAD |
+      | wayPointIndex | waypointdesc                   |
+      | 2             | Turn left onto MONTAGUE STREET |
+      | 19            | Continue onto M42              |
 
     Examples: 
       | pointA                                                      | pointB                                                                                | routetype |
@@ -286,7 +286,7 @@ Feature: Verify a route from A to B
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointdesc                                |
       | 3             | Turn right onto ROYAL CRESCENT ROAD (B3039) |
-      | 13            | Turn right onto ST ANDREWS ROAD (A33)       |
+      | 13            | Turn slight left onto CHARLOTTE PLACE (A33) |
 
     Examples: 
       | pointA                                               | pointB                           | routetype |
@@ -296,10 +296,10 @@ Feature: Verify a route from A to B
   Scenario Outline: Verify  Route using Full UK Address (Coventry)
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointdesc                             |
-      | 3             | Turn sharp right onto HOWES LANE (B4115) |
-      | 6             | Turn right onto WARWICK ROAD (A429)      |
-      | 17            | Turn right onto SADLER ROAD              |
+      | wayPointIndex | waypointdesc                        |
+      | 3             | Turn right onto HOWES LANE (B4115)  |
+      | 6             | Turn right onto WARWICK ROAD (A429) |
+      | 17            | Continue onto HALFORD LANE          |
 
     Examples: 
       | pointA                                                         | pointB                              | routetype |
@@ -309,10 +309,124 @@ Feature: Verify a route from A to B
   Scenario Outline: Verify  Route using Full UK Address (Kington to London )
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointdesc             |
-      | 14            | Turn right onto A456     |
-      | 30            | Turn slight left onto M5 |
+      | wayPointIndex | waypointdesc                        |
+      | 6             | At roundabout, take exit 1 onto A44 |
+      | 16            | Turn right onto A456                |
 
     Examples: 
       | pointA                           | pointB                                | routetype |
       | 5, OXFORD LANE, KINGTON, HR5 3ED | 64, TOWER MILL ROAD, LONDON, SE15 6BZ | car       |
+
+  Scenario Outline: Verify a Roundabout(Charles Watts Way)
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Then I should be able to verify the waypoints on the route map:
+      | wayPointIndex | waypointco          | waypointdesc                                             | azimuth | direction | time  | distance |
+      | 3             | 50.920147,-1.310351 | At roundabout, take exit 2 onto CHARLES WATTS WAY (A334) | 0.0     | N         | 30483 | 465.7    |
+
+    Examples: 
+      | pointA             | pointB              | routetype |
+      | 50.915416,-1.31902 | 50.915551,-1.294049 | car       |
+
+  @Routing
+  Scenario Outline: Verify a Roundabout(A30)
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Then I should be able to verify the waypoints on the route map:
+      | wayPointIndex | waypointco          | waypointdesc              | azimuth | direction | time  | distance |
+      | 3             | 50.726474,-3.727558 | Turn slight left onto A30 | 4.0     | N         | 20199 | 308.6    |
+
+    Examples: 
+      | pointA              | pointB             | routetype |
+      | 50.729071,-3.732732 | 50.72813,-3.730887 | car       |
+
+  @Routing
+  Scenario Outline: Verify a Roundabout(The City Of Edinburgh By-pass)
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Then I should be able to verify the waypoints on the route map:
+      | wayPointIndex | waypointco          | waypointdesc                         | azimuth | direction | time  | distance |
+      | 3             | 55.913915,-3.065976 | At roundabout, take exit 1 onto A720 | 199.0   | S         | 85044 | 1299.3   |
+
+    Examples: 
+      | pointA              | pointB              | routetype |
+      | 55.913061,-3.060099 | 55.924345,-3.053462 | car       |
+
+  @Routing
+  Scenario Outline: Verify  Route using one intermediate waypoint (Hounslow to Reading via Staines )
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI via "<pointC>"
+    Then I should be able to verify the waypoints on the route map:
+      | wayPointIndex | waypointco          | waypointdesc                         | azimuth | direction | time   | distance |
+      | 1             | 51.472387,-0.361788 | Continue onto ELLINGTON ROAD         | 286.0   | W         | 10789  | 104.9    |
+      | 9             | 51.477555,-0.403923 | At roundabout, take exit 3 onto A312 | 238.0   | SW        | 115905 | 1770.8   |
+      | 15            | 51.355407,-0.679946 | At roundabout, take exit 3 onto A322 | 184.0   | S         | 388536 | 5936.2   |
+
+    Examples: 
+      | pointA                                 | pointB              | pointC                                 | routetype |
+      | 51.471546541834144,-0.3618621826171875 | 51.433882,-0.537904 | 51.45914115860512,-0.96679687499999995 | car       |
+
+  @Routing
+  Scenario Outline: Verify  Route using one intermediate waypoint (Wentworth to Ascot via Windsor Park )
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI via "<pointC>"
+    Then I should be able to verify the waypoints on the route map:
+      | wayPointIndex | waypointco          | waypointdesc                          | azimuth | direction | time   | distance |
+      | 2             | 51.40643,-0.596399  | Turn right onto BLACKNEST ROAD (A329) | 289.0   | W         | 73038  | 1115.9   |
+      | 5             | 51.407984,-0.617235 | Continue onto LONDON ROAD (A329)      | 274.0   | W         | 166263 | 2540.3   |
+      | 7             | 51.410306,-0.668737 | Turn right onto WINKFIELD ROAD (A330) | 7.0     | N         | 62537  | 955.5    |
+
+    Examples: 
+      | pointA              | pointB              | pointC             | routetype |
+      | 51.409426,-0.591727 | 51.407904,-0.617237 | 51.41855,-0.672385 | car       |
+
+  @Routing
+  Scenario Outline: Verify  Route using one intermediate waypoint ( Chelsea to Winchester via Windlesham)
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI via "<pointC>"
+    Then I should be able to verify the waypoints on the route map:
+      | wayPointIndex | waypointco          | waypointdesc                       | azimuth | direction | time    | distance |
+      | 4             | 51.486844,-0.252027 | At roundabout, take exit 3 onto A4 | 189.0   | S         | 119731  | 1829.3   |
+      | 9             | 51.36165,-0.645969  | Continue onto M3                   | 238.0   | SW        | 2142697 | 59520.3  |
+      | 13            | 51.069901,-1.296261 | Turn slight left onto EASTON LANE  | 232.0   | SW        | 63727   | 619.6    |
+
+    Examples: 
+      | pointA             | pointB             | pointC              | routetype |
+      | 51.48676,-0.170426 | 51.36166,-0.645979 | 51.070889,-1.315293 | car       |
+
+  @Routing
+  Scenario Outline: Verify  Route using 2 intermediate waypoints (Hounslow to Reading via Staines and Bracknell )
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI via "<pointC>" and "<pointD>"
+    Then I should be able to verify the waypoints on the route map:
+      | wayPointIndex | waypointco          | waypointdesc                            | azimuth | direction | time   | distance |
+      | 1             | 51.472387,-0.361788 | Continue onto ELLINGTON ROAD            | 286.0   | W         | 10789  | 104.9    |
+      | 9             | 51.466735,-0.365923 | Turn slight left onto GROVE ROAD (A315) | 74.0    | E         | 3684   | 56.3     |
+      | 16            | 51.355407,-0.679946 | At roundabout, take exit 3 onto A322    | 184.0   | S         | 388536 | 5936.2   |
+      | 28            | 51.409769,-0.787117 | At roundabout, take exit 2 onto A329    | 144.0   | SE        | 43272  | 661.1    |
+      | 54            | 51.494214,-0.505796 | Continue onto M25                       | 74.0    | E         | 302474 | 8402.4   |
+
+    Examples: 
+      | pointA                                 | pointB              | pointC                                 | pointD              | routetype |
+      | 51.471546541834144,-0.3618621826171875 | 51.414152,-0.747504 | 51.45914115860512,-0.96679687499999995 | 51.433882,-0.537904 | car       |
+
+  @Routing
+  Scenario Outline: Verify  Route using 2 intermediate waypoints (Oxford to Eaton via Warwick and Cambridge )
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI via "<pointC>" and "<pointD>"
+    Then I should be able to verify the waypoints on the route map:
+      | wayPointIndex | waypointco          | waypointdesc                                     | azimuth | direction | time   | distance |
+      | 5             | 51.748432,-1.261457 | Turn left onto THAMES STREET (A420)              | 275.0   | W         | 9530   | 145.6    |
+      | 21            | 52.290635,-1.606686 | Continue onto HAYWOOD ROAD                       | 209.0   | SW        | 22502  | 218.8    |
+      | 32            | 52.298017,-1.535731 | Continue onto LILLINGTON AVENUE (A445)           | 59.0    | NE        | 27364  | 418.1    |
+      | 68            | 51.491599,-0.541244 | At roundabout, take exit 4 onto LONDON ROAD (A4) | 184.0   | S         | 188894 | 2886.2   |
+
+    Examples: 
+      | pointA              | pointB              | pointC             | pointD              | routetype |
+      | 51.746075,-1.263972 | 52.289962,-1.604752 | 52.202814,0.051429 | 51.491412,-0.610276 | car       |
+
+  @Routing
+  Scenario Outline: Verify  Route using 2 intermediate waypoints (Perth to Edinburgh via Stirling and Glasgow )
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI via "<pointC>" and "<pointD>"
+    Then I should be able to verify the waypoints on the route map:
+      | wayPointIndex | waypointco          | waypointdesc                         | azimuth | direction | time   | distance |
+      | 5             | 56.170837,-3.970499 | At roundabout, take exit 3 onto M9   | 91.0    | E         | 148299 | 3961.4   |
+      | 11            | 55.874151,-4.184032 | Continue onto GARTLOCH ROAD (B765)   | 98.0    | E         | 1145   | 11.1     |
+      | 20            | 55.924663,-3.31288  | At roundabout, take exit 3 onto A720 | 358.0   | N         | 58713  | 897.1    |
+      | 30            | 55.948658,-3.212478 | Turn left onto WALKER STREET         | 321.0   | NW        | 16074  | 156.3    |
+
+    Examples: 
+      | pointA             | pointB              | pointC              | pointD              | routetype |
+      | 56.38721,-3.466273 | 56.136656,-3.970408 | 55.871665,-4.195067 | 55.950467,-3.208924 | car       |
diff --git a/acceptancetesting/src/test/java/GPHRouteTest.java b/acceptancetesting/src/test/java/GPHRouteTest.java
index f305acb0b1..9d7d563a97 100644
--- a/acceptancetesting/src/test/java/GPHRouteTest.java
+++ b/acceptancetesting/src/test/java/GPHRouteTest.java
@@ -49,7 +49,7 @@ public void testWayPointIsOnRoute() {
 				
 		String path = getClass().getResource("sampleGraphHopper.gpx").getPath();
 		GraphHopperGPXParserRouteTest ghrt = GraphHopperGPXParserRouteTest.getParserForgpxFileName(path);
-		Waypoint wayPoint = getTestWayPoint("50.927146","-1.416787","339","N","2515","13.974");
+		Waypoint wayPoint = getTestWayPoint("50.927146","-1.416787","339","N","2515","13.974","turn  right onto Wellington Road");
 		
 
 		HashSet<Route> hs = ghrt.getRoutes();
@@ -74,11 +74,12 @@ public void testGetRouteAsGPX() {
 		assertTrue(ghrt.routeContainsTurn("turn sharp right onto Bellemoor Road",next));
 	}
 
-	private Waypoint getTestWayPoint(String lat, String lon,String azimuth,String direction,String time,String distance) {
+	private Waypoint getTestWayPoint(String lat, String lon,String azimuth,String direction,String time,String distance,String description) {
 		
 		Waypoint wp = new Waypoint();
 		wp.setLatitude(new Double(lat));
 		wp.setLongitude(new Double(lon));
+		wp.setDescription(description);
 		wp.addExtensionData(ExtensionConstants.AZIMUTH, azimuth);
 		wp.addExtensionData(ExtensionConstants.DIRECTION, direction);
 		wp.addExtensionData(ExtensionConstants.TIME, time);
diff --git a/acceptancetesting/src/test/java/uk/co/ordnancesurvey/routing/CucumberRunner.java b/acceptancetesting/src/test/java/uk/co/ordnancesurvey/routing/CucumberRunner.java
index f6ec75b911..1c9a3f5eb4 100644
--- a/acceptancetesting/src/test/java/uk/co/ordnancesurvey/routing/CucumberRunner.java
+++ b/acceptancetesting/src/test/java/uk/co/ordnancesurvey/routing/CucumberRunner.java
@@ -8,7 +8,7 @@
 
 @RunWith(Cucumber.class)
 @Category(IntegrationTestProperties.class)
-@Cucumber.Options(format = { "html:target/cucumber-reports/html", "json:target/cucumber-reports/cucumber.json" }, glue="uk.co.ordnancesurvey.routing",features = {"src/test/cucumber/routing.feature"}, tags = { "~@RegressionLiveDataTests","@Routing"})
+@Cucumber.Options(format = { "html:target/cucumber-reports/html", "json:target/cucumber-reports/cucumber.json" }, glue="uk.co.ordnancesurvey.routing", tags = { "~@RegressionLiveDataTests","@Routing"})
 public class CucumberRunner {
 	    
    
diff --git a/acceptancetesting/src/test/resources/sampleGraphHopper.gpx b/acceptancetesting/src/test/resources/sampleGraphHopper.gpx
index bd713c5cb6..2b9eac9a1a 100644
--- a/acceptancetesting/src/test/resources/sampleGraphHopper.gpx
+++ b/acceptancetesting/src/test/resources/sampleGraphHopper.gpx
@@ -193,91 +193,92 @@
   </trk>
   <rte>
     <rtept lat="50.927146" lon="-1.416787">
+    <desc>turn  right onto Wellington Road</desc>
       <extensions>
-        <distance>13.974</distance>
-        <time>2515</time>
-        <direction>N</direction>
-        <azimuth>339</azimuth>
+        <gh:distance>13.974</gh:distance>
+        <gh:time>2515</gh:time>
+        <gh:direction>N</gh:direction>
+        <gh:azimuth>339</gh:azimuth>
       </extensions>
     </rtept>
     <rtept lat="50.927268" lon="-1.416835">
       <desc>turn sharp right onto Bellemoor Road</desc>
       <extensions>
-        <distance>69.241</distance>
-        <time>5539</time>
-        <direction>E</direction>
-        <azimuth>98</azimuth>
+        <gh:distance>69.241</gh:distance>
+        <gh:time>5539</gh:time>
+        <gh:direction>E</gh:direction>
+        <gh:azimuth>98</gh:azimuth>
       </extensions>
     </rtept>
     <rtept lat="50.927279" lon="-1.415871">
       <desc>turn sharp left onto Hill Lane, C502</desc>
       <extensions>
-        <distance>753.449</distance>
-        <time>60273</time>
-        <direction>NW</direction>
-        <azimuth>333</azimuth>
+        <gh:distance>753.449</gh:distance>
+        <gh:time>60273</gh:time>
+        <gh:direction>NW</gh:direction>
+        <gh:azimuth>333</gh:azimuth>
       </extensions>
     </rtept>
     <rtept lat="50.933837" lon="-1.418461">
       <desc>turn slight right onto Burgess Road, A35</desc>
       <extensions>
-        <distance>877.714</distance>
-        <time>70214</time>
-        <direction>E</direction>
-        <azimuth>77</azimuth>
+        <gh:distance>877.714</gh:distance>
+        <gh:time>70214</gh:time>
+        <gh:direction>E</gh:direction>
+        <gh:azimuth>77</gh:azimuth>
       </extensions>
     </rtept>
     <rtept lat="50.935873" lon="-1.406445">
       <desc>turn right onto The Avenue, A33</desc>
       <extensions>
-        <distance>144.585</distance>
-        <time>8673</time>
-        <direction>S</direction>
-        <azimuth>174</azimuth>
+        <gh:distance>144.585</gh:distance>
+        <gh:time>8673</gh:time>
+        <gh:direction>S</gh:direction>
+        <gh:azimuth>174</gh:azimuth>
       </extensions>
     </rtept>
     <rtept lat="50.934575" lon="-1.40632">
       <desc>turn left onto Highfield Avenue, A3035</desc>
       <extensions>
-        <distance>382.347</distance>
-        <time>30248</time>
-        <direction>SE</direction>
-        <azimuth>128</azimuth>
+        <gh:distance>382.347</gh:distance>
+        <gh:time>30248</gh:time>
+        <gh:direction>SE</gh:direction>
+        <gh:azimuth>128</gh:azimuth>
       </extensions>
     </rtept>
     <rtept lat="50.932265" lon="-1.402333">
       <desc>continue onto Highfield Lane, A3035</desc>
       <extensions>
-        <distance>1015.846</distance>
-        <time>81259</time>
-        <direction>SE</direction>
-        <azimuth>130</azimuth>
+        <gh:distance>1015.846</gh:distance>
+        <gh:time>81259</gh:time>
+        <gh:direction>SE</gh:direction>
+        <gh:azimuth>130</gh:azimuth>
       </extensions>
     </rtept>
     <rtept lat="50.92695" lon="-1.390858">
       <desc>turn sharp right onto Portswood Road, C502</desc>
       <extensions>
-        <distance>49.997</distance>
-        <time>3999</time>
-        <direction>W</direction>
-        <azimuth>248</azimuth>
+        <gh:distance>49.997</gh:distance>
+        <gh:time>3999</gh:time>
+        <gh:direction>W</gh:direction>
+        <gh:azimuth>248</gh:azimuth>
       </extensions>
     </rtept>
     <rtept lat="50.926686" lon="-1.391433">
       <desc>turn left onto St Denys Road</desc>
       <extensions>
-        <distance>54.368</distance>
-        <time>6524</time>
-        <direction>SE</direction>
-        <azimuth>141</azimuth>
+        <gh:distance>54.368</gh:distance>
+        <gh:time>6524</gh:time>
+        <gh:direction>SE</gh:direction>
+        <gh:azimuth>141</gh:azimuth>
       </extensions>
     </rtept>
     <rtept lat="50.926298" lon="-1.390965">
       <extensions>
-        <distance>0.0</distance>
-        <time>0</time>
-        <direction/>
-        <azimuth/>
+        <gh:distance>0.0</gh:distance>
+        <gh:time>0</gh:time>
+        <gh:direction/>
+        <gh:azimuth/>
       </extensions>
     </rtept>
   </rte>
diff --git a/acceptancetesting/src/test/resources/test-ci-dpn.properties b/acceptancetesting/src/test/resources/test-ci-dpn.properties
new file mode 100644
index 0000000000..ee7daf7cb8
--- /dev/null
+++ b/acceptancetesting/src/test/resources/test-ci-dpn.properties
@@ -0,0 +1,11 @@
+#DPN Data
+graphHopperWebUrl=http://dpn-env.elasticbeanstalk.com/
+webDriverHubUrl=http://ND28350.ordsvy.gov.uk:5555/wd/hub
+#webDriverHubUrl=http://ND27983.ordsvy.gov.uk:5555/wd/hub
+
+#testON=Web,Service  // Default both
+testON=
+traceEnabled=false
+plugInAuthLocation=src/test/resources/autoauth-2.1-fx+fn.xpi
+excludedPlatforms=MAC:chrome,MAC:firefox,WINDOWS:chrome,WINDOWS:internet explorer,LINUX:firefox
+browserWindowDimension=1920,800
diff --git a/acceptancetesting/src/test/resources/test-ci-fullitn.properties b/acceptancetesting/src/test/resources/test-ci-fullitn.properties
new file mode 100644
index 0000000000..a2b57f4ccc
--- /dev/null
+++ b/acceptancetesting/src/test/resources/test-ci-fullitn.properties
@@ -0,0 +1,12 @@
+# Full UK ITN data set
+graphHopperWebUrl=http://os-graphhopper.elasticbeanstalk.com/
+
+webDriverHubUrl=http://ND28350.ordsvy.gov.uk:5555/wd/hub
+#webDriverHubUrl=http://ND27983.ordsvy.gov.uk:5555/wd/hub
+
+#testON=Web,Service  // Default both
+testON=
+traceEnabled=false
+plugInAuthLocation=src/test/resources/autoauth-2.1-fx+fn.xpi
+excludedPlatforms=MAC:chrome,MAC:firefox,WINDOWS:chrome,WINDOWS:internet explorer,LINUX:firefox
+browserWindowDimension=1920,800
diff --git a/acceptancetesting/src/test/resources/test-ci.properties b/acceptancetesting/src/test/resources/test-ci.properties
index 4cd1fe8705..994f07f439 100644
--- a/acceptancetesting/src/test/resources/test-ci.properties
+++ b/acceptancetesting/src/test/resources/test-ci.properties
@@ -1,12 +1,9 @@
 # Revised Exeter data set
-iteGraphHopperWebUrl=http://os-gh-ite.elasticbeanstalk.com/
-# Full UK ITN data set
-itnGraphHopperWebUrl=http://os-graphhopper.elasticbeanstalk.com/
-# DPN data set
-DPNgraphHopperWebUrl=http://dpn-env.elasticbeanstalk.com/
+graphHopperWebUrl=http://os-gh-ite.elasticbeanstalk.com/
+
 webDriverHubUrl=http://ND28350.ordsvy.gov.uk:5555/wd/hub
 #testON=Web,Service  // Default both
 testON=
 traceEnabled=false
 plugInAuthLocation=src/test/resources/autoauth-2.1-fx+fn.xpi
-excludedPlatforms=MAC:chrome,MAC:firefox,WINDOWS:chrome,WINDOWS:firefox,LINUX:firefox
+excludedPlatforms=MAC:chrome,MAC:firefox,WINDOWS:chrome,WINDOWS:internet explorer,LINUX:firefox
diff --git a/acceptancetesting/src/test/resources/test.properties b/acceptancetesting/src/test/resources/test.properties
index e888ca29e7..6662877a15 100644
--- a/acceptancetesting/src/test/resources/test.properties
+++ b/acceptancetesting/src/test/resources/test.properties
@@ -1,10 +1,14 @@
-# Revised Exeter data set
-iteGraphHopperWebUrl=http://os-gh-ite.elasticbeanstalk.com/
+# Exeter Sample ITN
+#graphHopperWebUrl=http://os-gh-ite.elasticbeanstalk.com/
 # Full UK ITN data set
-itnGraphHopperWebUrl=http://os-graphhopper.elasticbeanstalk.com/
+graphHopperWebUrl=http://os-graphhopper.elasticbeanstalk.com/
 # DPN data set
-DPNgraphHopperWebUrl=http://dpn-env.elasticbeanstalk.com/
+#graphHopperWebUrl=http://dpn-env.elasticbeanstalk.com/
+
+
+
 #webDriverHubUrl=http://ND28350.ordsvy.gov.uk:5555/wd/hub
+webDriverHubUrl=http://ND27983.ordsvy.gov.uk:5555/wd/hub
 
 #testON=Web,Service  // Default both
 testON=
