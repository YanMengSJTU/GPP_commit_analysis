diff --git a/config-example.properties b/config-example.properties
index 6b4b82796b..cb021149bf 100644
--- a/config-example.properties
+++ b/config-example.properties
@@ -1,3 +1,11 @@
+##### Lazy loading #####
+
+
+# Lazy loading can be used to load the server without creating a graph. This on its own doesn't help but allows
+# The consumer to upload a file using a post request to "/rebuild" with a form-data parameter called "file" and update the graph 
+# with minimal down time.
+# graph.lazy_load=true
+
 
 ##### Vehicles #####
 
diff --git a/core/src/main/java/com/graphhopper/GraphHopper.java b/core/src/main/java/com/graphhopper/GraphHopper.java
index d3d8bdff13..0c0e125c17 100644
--- a/core/src/main/java/com/graphhopper/GraphHopper.java
+++ b/core/src/main/java/com/graphhopper/GraphHopper.java
@@ -455,9 +455,67 @@ public void setGraphHopperStorage(GraphHopperStorage ghStorage) {
      * @throws IllegalStateException if index is not initialized
      */
     public LocationIndex getLocationIndex() {
-        if (locationIndex == null)
-            throw new IllegalStateException("Location index not initialized");
+        if (locationIndex == null) {
+            // This is currently a work around to allow lazy loading.
+            // The change should probably be in NerestServlet and GraphHopperAPI interface
+            return new LocationIndex() {
+                @Override
+                public LocationIndex setResolution(int resolution) {
+                    return null;
+                }
+
+                @Override
+                public LocationIndex prepareIndex() {
+                    return null;
+                }
+
+                @Override
+                public QueryResult findClosest(double lat, double lon, EdgeFilter edgeFilter) {
+                    return null;
+                }
+
+                @Override
+                public LocationIndex setApproximation(boolean approxDist) {
+                    return null;
+                }
+
+                @Override
+                public void setSegmentSize(int bytes) {
+
+                }
+
+                @Override
+                public boolean loadExisting() {
+                    return false;
+                }
+
+                @Override
+                public LocationIndex create(long byteCount) {
+                    return null;
+                }
+
+                @Override
+                public void flush() {
 
+                }
+
+                @Override
+                public void close() {
+
+                }
+
+                @Override
+                public boolean isClosed() {
+                    return false;
+                }
+
+                @Override
+                public long getCapacity() {
+                    return 0;
+                }
+            };
+            //throw new IllegalStateException("Location index not initialized");
+        }
         return locationIndex;
     }
 
@@ -515,10 +573,14 @@ public GraphHopper init(CmdArgs args) {
             dataReaderFile = tmpOsmFile;
 
         String graphHopperFolder = args.get("graph.location", "");
+        boolean lazyLoad = args.getBool("graph.lazy_load", false);
         if (Helper.isEmpty(graphHopperFolder) && Helper.isEmpty(ghLocation)) {
-            if (Helper.isEmpty(dataReaderFile))
+            if (Helper.isEmpty(dataReaderFile) && !lazyLoad) {
                 throw new IllegalArgumentException("You need to specify an OSM file.");
-
+            }
+            if (Helper.isEmpty(dataReaderFile) && lazyLoad) {
+                dataReaderFile = "default";
+            }
             graphHopperFolder = Helper.pruneFileEnd(dataReaderFile) + "-gh";
         }
 
@@ -1213,16 +1275,22 @@ protected void flush() {
      */
     public void close() {
         if (ghStorage != null)
+        {
             ghStorage.close();
+            ghStorage = null;
+        }
 
         if (locationIndex != null)
+        {
             locationIndex.close();
-
+            locationIndex = null;
+        }
         try {
             lockFactory.forceRemove(fileLockName, true);
         } catch (Exception ex) {
             // silently fail e.g. on Windows where we cannot remove an unreleased native lock
         }
+        fullyLoaded = false;
     }
 
     /**
diff --git a/web/src/main/java/com/graphhopper/http/GraphHopperModule.java b/web/src/main/java/com/graphhopper/http/GraphHopperModule.java
index ffe1adb71f..b380fc6528 100644
--- a/web/src/main/java/com/graphhopper/http/GraphHopperModule.java
+++ b/web/src/main/java/com/graphhopper/http/GraphHopperModule.java
@@ -179,12 +179,15 @@ GraphHopperService getGraphHopperService(GraphHopper graphHopper) {
         return new GraphHopperService() {
             @Override
             public void start() {
-                graphHopper.importOrLoad();
+                if (!args.getBool("graph.lazy_load", false)) {
+                    graphHopper.importOrLoad();
+                } else {
+                    graphHopper.load(graphHopper.getGraphHopperLocation());
+                }
                 logger.info("loaded graph at:" + graphHopper.getGraphHopperLocation()
                         + ", data_reader_file:" + graphHopper.getDataReaderFile()
                         + ", flag_encoders:" + graphHopper.getEncodingManager()
                         + ", " + graphHopper.getGraphHopperStorage().toDetailsString());
-
             }
 
             @Override
@@ -193,5 +196,4 @@ public void close() throws Exception {
             }
         };
     }
-
 }
diff --git a/web/src/main/java/com/graphhopper/http/GraphHopperServletModule.java b/web/src/main/java/com/graphhopper/http/GraphHopperServletModule.java
index ea65f31c5f..1a715f1b1d 100644
--- a/web/src/main/java/com/graphhopper/http/GraphHopperServletModule.java
+++ b/web/src/main/java/com/graphhopper/http/GraphHopperServletModule.java
@@ -32,7 +32,6 @@
 import com.graphhopper.util.CmdArgs;
 
 import javax.inject.Singleton;
-import java.text.SimpleDateFormat;
 import java.util.HashMap;
 import java.util.List;
 import java.util.Map;
@@ -82,6 +81,9 @@ protected void configureServlets() {
         serve("/nearest*").with(NearestServlet.class);
         bind(NearestServlet.class).in(Singleton.class);
 
+        serve("/rebuild*").with(RebuildGraphServlet.class);
+        bind(RebuildGraphServlet.class).in(Singleton.class);
+
         if (args.getBool("web.change_graph.enabled", false)) {
             serve("/change*").with(ChangeGraphServlet.class);
             bind(ChangeGraphServlet.class).in(Singleton.class);
diff --git a/web/src/main/java/com/graphhopper/http/RebuildGraphServlet.java b/web/src/main/java/com/graphhopper/http/RebuildGraphServlet.java
new file mode 100644
index 0000000000..9a199a1747
--- /dev/null
+++ b/web/src/main/java/com/graphhopper/http/RebuildGraphServlet.java
@@ -0,0 +1,73 @@
+package com.graphhopper.http;
+
+import com.graphhopper.GraphHopper;
+import com.graphhopper.GraphHopperAPI;
+import com.graphhopper.reader.osm.GraphHopperOSM;
+import com.graphhopper.util.CmdArgs;
+import com.graphhopper.util.Helper;
+import sun.plugin.dom.exception.InvalidStateException;
+
+import javax.inject.Inject;
+import javax.servlet.MultipartConfigElement;
+import javax.servlet.ServletException;
+import javax.servlet.annotation.MultipartConfig;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+import javax.servlet.http.Part;
+import java.io.File;
+import java.io.IOException;
+import java.io.InputStream;
+import java.nio.file.Files;
+import java.nio.file.Paths;
+
+import static java.nio.file.StandardCopyOption.REPLACE_EXISTING;
+
+/**
+ * @author Harel Mazor
+ */
+@MultipartConfig
+public class RebuildGraphServlet extends GHBaseServlet {
+    private static final String __MULTIPART_CONFIG_ELEMENT = "org.eclipse.jetty.multipartConfig";
+
+    @Inject
+    private GraphHopperAPI graphHopper;
+
+    @Inject
+    private CmdArgs args;
+
+    @Override
+    public void service(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {
+        if ("POST".equals(req.getMethod())) {
+            req.setAttribute(__MULTIPART_CONFIG_ELEMENT, new MultipartConfigElement(""));
+        }
+        super.service(req, res);
+    }
+
+    @Override
+    public void doPost(HttpServletRequest httpReq, HttpServletResponse httpRes) throws ServletException, IOException {
+        if (!(graphHopper instanceof GraphHopper)) {
+            throw new InvalidStateException("Rebuild is not supported in public transportation mode.");
+        }
+        Part part = httpReq.getPart("file");
+        if (part == null) {
+            throw new IllegalArgumentException("You have to pass an OSM file in 'file' form-data input");
+        }
+        GraphHopper originalGraph = (GraphHopper)graphHopper;
+        InputStream osmInputStream = part.getInputStream();
+        Files.copy(osmInputStream, Paths.get(part.getSubmittedFileName()), REPLACE_EXISTING);
+        String newLocation = "rebuild-" + originalGraph.getGraphHopperLocation();
+        Helper.removeDir(new File(newLocation));
+        CmdArgs newArgs = new CmdArgs(args.toMap()); // clone
+        newArgs.put("datareader.file", part.getSubmittedFileName());
+        newArgs.put("graph.location", newLocation);
+        GraphHopper newGraph = new GraphHopperOSM().init(newArgs);
+        newGraph.importOrLoad();
+
+        String currentFolder = originalGraph.getGraphHopperLocation();
+        originalGraph.close();
+        originalGraph.clean();
+        newGraph.close();
+        Files.move(Paths.get(newLocation), Paths.get(currentFolder));
+        originalGraph.load(currentFolder);
+    }
+}
diff --git a/web/src/test/java/com/graphhopper/http/BaseServletTester.java b/web/src/test/java/com/graphhopper/http/BaseServletTester.java
index c83e420a1d..40b76b2847 100644
--- a/web/src/test/java/com/graphhopper/http/BaseServletTester.java
+++ b/web/src/test/java/com/graphhopper/http/BaseServletTester.java
@@ -30,6 +30,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import java.io.File;
 import java.io.IOException;
 import java.net.HttpURLConnection;
 import java.util.concurrent.TimeUnit;
@@ -42,6 +43,8 @@
 public class BaseServletTester {
     private static final MediaType MT_JSON = MediaType.parse("application/json; charset=utf-8");
     private static final MediaType MT_XML = MediaType.parse("application/gpx+xml; charset=utf-8");
+    private static final MediaType OCTET_STREAM = MediaType.parse("application/octet-stream");
+
     protected static final Logger LOGGER = LoggerFactory.getLogger(BaseServletTester.class);
     private final OkHttpClient client = new OkHttpClient.Builder().connectTimeout(30, TimeUnit.SECONDS).readTimeout(30, TimeUnit.SECONDS).build();
     protected static int port;
@@ -176,4 +179,16 @@ protected String post(String path, int expectedStatusCode, String xmlOrJson) thr
                 HttpStatus.getMessage(expectedStatusCode), HttpStatus.getMessage(rsp.code()));
         return rsp.body().string();
     }
+
+    protected String post(String path, int expectedStatusCode, File file) throws IOException {
+        String url = getTestAPIUrl(path);
+        MultipartBody.Builder builder = new MultipartBody.Builder()
+                .setType(MultipartBody.FORM);
+        builder.addFormDataPart("file",file.getName(),RequestBody.create(OCTET_STREAM,file));
+        Response rsp = client.newCall(new Request.Builder().url(url).
+                post(builder.build()).build()).execute();
+        assertEquals(url + ", http status was:" + rsp.code(),
+                HttpStatus.getMessage(expectedStatusCode), HttpStatus.getMessage(rsp.code()));
+        return rsp.body().string();
+    }
 }
diff --git a/web/src/test/java/com/graphhopper/http/RebuildServletIT.java b/web/src/test/java/com/graphhopper/http/RebuildServletIT.java
new file mode 100644
index 0000000000..640a1e61a1
--- /dev/null
+++ b/web/src/test/java/com/graphhopper/http/RebuildServletIT.java
@@ -0,0 +1,72 @@
+/*
+ *  Licensed to GraphHopper GmbH under one or more contributor
+ *  license agreements. See the NOTICE file distributed with this work for 
+ *  additional information regarding copyright ownership.
+ * 
+ *  GraphHopper GmbH licenses this file to you under the Apache License, 
+ *  Version 2.0 (the "License"); you may not use this file except in 
+ *  compliance with the License. You may obtain a copy of the License at
+ * 
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package com.graphhopper.http;
+
+import com.fasterxml.jackson.databind.JsonNode;
+import com.fasterxml.jackson.databind.ObjectMapper;
+import com.graphhopper.storage.Directory;
+import com.graphhopper.util.CmdArgs;
+import com.graphhopper.util.Helper;
+import com.graphhopper.util.Parameters;
+import okhttp3.MediaType;
+import okhttp3.Request;
+import okhttp3.RequestBody;
+import org.junit.AfterClass;
+import org.junit.Before;
+import org.junit.Test;
+
+import java.io.File;
+import java.nio.file.Files;
+import java.nio.file.Paths;
+
+import static org.junit.Assert.*;
+
+/**
+ * @author Harel Mazor
+ */
+public class RebuildServletIT extends BaseServletTester {
+    private static final String DIR = "default-gh";
+
+    @AfterClass
+    public static void cleanUp() {
+        Helper.removeDir(new File(DIR));
+        shutdownJetty(true);
+    }
+
+    @Before
+    public void setUp() {
+        Helper.removeDir(new File(DIR));
+        CmdArgs args = new CmdArgs().
+                put(Parameters.CH.PREPARE + "weightings", "no").
+                put("graph.flag_encoders", "car").
+                put("graph.lazy_load", "true");
+        setUpJetty(args);
+    }
+
+    @Test
+    public void testLazyLoad_WithRebuildTwice() throws Exception {
+        assertFalse(new File(DIR).exists());
+
+        File file = new File("../core/files/andorra.osm.pbf");
+        post("/rebuild", 200, file);
+        assertTrue(new File(DIR).listFiles().length > 0);
+
+        post("/rebuild", 200, file);
+        assertTrue(new File(DIR).listFiles().length > 0);
+    }
+}
