diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetHopper.java b/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetHopper.java
index 50b02fa079..9e92bd2927 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetHopper.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetHopper.java
@@ -14,8 +14,8 @@
  */
 public class MarmosetHopper {
 
-    GraphHopper hopper;
-    List<Vehicle> vehicles;
+    private GraphHopper hopper;
+    private List<Vehicle> vehicles;
 
     public MarmosetHopper() {
         hopper = new GraphHopper();
@@ -38,7 +38,7 @@ public void init()
         args.put("osmreader.osm", "british-isles-latest.osm.pbf");
         hopper.init(args);
         hopper.importOrLoad();
-        int count = 100;
+        int count = 1000;
         Random latRan = new Random(123);
         Random lonRan = new Random(456);
 
@@ -56,6 +56,6 @@ public void timestep() {
     }
 
     public String getVehicleData() {
-        return vehicles.stream().map(Vehicle::toString).collect(Collectors.joining(","));
+        return vehicles.parallelStream().map(Vehicle::toString).collect(Collectors.joining(","));
     }
 }
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/Vehicle.java b/marmoset/src/main/java/com/graphhopper/marmoset/Vehicle.java
index 3008e7da6f..7a3ef2129b 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/Vehicle.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/Vehicle.java
@@ -1,18 +1,22 @@
 package com.graphhopper.marmoset;
 
 import com.graphhopper.GHRequest;
+import com.graphhopper.GHResponse;
 import com.graphhopper.GraphHopper;
 import com.graphhopper.PathWrapper;
 import com.graphhopper.marmoset.util.Location;
+import com.graphhopper.util.Instruction;
 import com.graphhopper.util.InstructionList;
 import com.graphhopper.util.PointList;
+import com.graphhopper.util.shapes.GHPoint3D;
 
 /**
  * Created by alexander on 16/02/2016.
  */
 public class Vehicle {
-    private static int maxId = 0;
+    private final long DT = 1000;
 
+    private static int maxId = 0;
     private final int id;
 
     private GraphHopper hopper;
@@ -20,8 +24,11 @@
     private Location dest;
     private boolean finished;
 
+    private long time;
+
     public Vehicle(GraphHopper hopper, Location start, Location dest)
     {
+        time = 0;
         this.hopper = hopper;
         this.dest = dest;
         this.loc = start;
@@ -34,28 +41,55 @@ public boolean isFinished()
         return finished;
     }
 
-//    private PathWrapper route;
+    private InstructionList il;
+    private int currInstr;
+    private long instrStart;
+    private PointList path;
+    private int currStep;
     public void calculateStep()
     {
         if (finished)
             return;
-
-        GHRequest r = new GHRequest(loc.getLat(), loc.getLon(), dest.getLat(), dest.getLon());
-        PathWrapper route = hopper.route(r).getBest();
-
-        PointList path = route.getPoints();
-        InstructionList il = route.getInstructions();
-
-        if (route.getPoints().size() <= 3)
+        if (il == null)
         {
-            System.out.println("Vehicle " + id + " reached destination");
+            GHRequest request = new GHRequest(loc.getLat(), loc.getLon(), dest.getLat(), dest.getLon());
+            GHResponse response = hopper.route(request);
+            if (response.hasErrors()) {
+                System.out.println("Response has errors, dumping:");
+                response.getErrors().stream().forEach(Throwable::printStackTrace);
+                System.out.println();
+                finished = true;
+                return;
+            }
+            il = response.getBest().getInstructions();
+            path = response.getBest().getPoints();
+            currStep = 0;
+            currInstr = 0;
+            instrStart = 0;
+        }
+//        if (instrStart + il.get(currInstr).getTime() < time) {
+//            instrStart += il.get(currInstr).getTime();
+//            currInstr++;
+//            if (currInstr >= il.getSize())
+//            {
+//                System.out.println("Finished moving vehicle " + id);
+//                finished = true;
+//                return;
+//            }
+//        }
+//        Instruction inst = il.get(currInstr);
+
+//        final int speed = 60;
+//        PointList path = inst.getPoints();
+//        path.toGeoJson(false);
+        if (currStep >= path.size()) {
             finished = true;
             return;
         }
 
-//        System.out.println(path.toString());
-//        System.out.println(il.toString());
-        loc.set(path.getLat(2), path.getLon(2));
+        loc.set(path.getLat(currStep), path.getLon(currStep));
+        currStep++;
+        time += DT;
     }
 
     @Override
diff --git a/marmoset/src/main/webapp/main.js b/marmoset/src/main/webapp/main.js
index abe012ccd5..aa8d9ea499 100644
--- a/marmoset/src/main/webapp/main.js
+++ b/marmoset/src/main/webapp/main.js
@@ -4,7 +4,7 @@
 function initMap() {
     window.carIcon = L.icon({
         iconUrl: 'car-icon.png',
-        iconSize: [40,30]
+        iconSize: [20,15]
     });
 
     window.map = L.map('map').setView([51.505, -0.09], 13);
