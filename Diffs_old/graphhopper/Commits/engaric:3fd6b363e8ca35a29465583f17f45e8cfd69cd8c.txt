diff --git a/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/RoadClassification.java b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/RoadClassification.java
index b714f0062c..caf6560dae 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/RoadClassification.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/RoadClassification.java
@@ -46,7 +46,7 @@ public void applyWayAttribute(RoutingElement way )
      */    
     public static RoadClassification lookup(String dataName) {
     	try {
-    		RoadClassification valueOf = RoadClassification.valueOf(dataName.replace(" ", "").replace("–", "").toUpperCase());
+    		RoadClassification valueOf = RoadClassification.valueOf(dataName.replace(" ", "").replace("-", "").toUpperCase());
     		return valueOf;
     	}
     	catch (IllegalArgumentException | NullPointerException e) {
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/OSITNWayTest.java b/core/src/test/java/com/graphhopper/reader/osgb/OSITNWayTest.java
index 8bff06549d..bc1434ac91 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/OSITNWayTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/OSITNWayTest.java
@@ -48,27 +48,28 @@ public void testReadTagsForRoundabout() throws XMLStreamException, MismatchedDim
 	
 	@Test
 	public void testReadTagsForPrivatePublicallyAccessibleRoads() throws XMLStreamException, MismatchedDimensionException, FactoryException, TransformException {
-		String wayWithRoundabout = "<?xml version='1.0' encoding='UTF-8'?>\n" + 
+		String privatePublic = "<?xml version='1.0' encoding='UTF-8'?>\n" + 
 				"<osgb:FeatureCollection xmlns:osgb='http://www.ordnancesurvey.co.uk/xml/namespaces/osgb'\n" + 
 				"	xmlns:gml='http://www.opengis.net/gml' xmlns:xlink='http://www.w3.org/1999/xlink' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'\n" + 
 				"	xsi:schemaLocation='http://www.ordnancesurvey.co.uk/xml/namespaces/osgb http://www.ordnancesurvey.co.uk/xml/schema/v7/OSDNFFeatures.xsd'\n" + 
 				"	fid='GDS-58096-1'>" +
-				"		<osgb:RoadLink fid='osgb4000000009314037'>\n" + 
-				"<osgb:descriptiveTerm>Private Road – Publicly Accessible</osgb:descriptiveTerm>\n" + 
+				"<osgb:RoadLink fid='osgb4000000025030155'>\n" + 
+				"<osgb:descriptiveGroup>Road Topology</osgb:descriptiveGroup>\n" + 
+				"<osgb:descriptiveTerm>Private Road - Publicly Accessible</osgb:descriptiveTerm>\n" + 
 				"<osgb:natureOfRoad>Single Carriageway</osgb:natureOfRoad>\n" + 
-				"<osgb:length>12.04</osgb:length>\n" + 
+				"<osgb:length>103.74</osgb:length>\n" + 
 				"<osgb:polyline>\n" + 
 				"<gml:LineString srsName='osgb:BNG'>\n" + 
-				"<gml:coordinates>356370.000,430137.000 356367.000,430139.000 356366.000,430141.000 356365.386,430142.099 356365.000,430144.000 356365.000,430146.000 356365.000,430147.000 </gml:coordinates>\n" + 
+				"<gml:coordinates>166785.778,26371.534 166767.559,26395.371 166746.384,26421.542 166732.941,26438.078 166725.804,26447.595 166722.647,26453.691 </gml:coordinates>\n" + 
 				"</gml:LineString>\n" + 
 				"</osgb:polyline>\n" + 
-				"<osgb:directedNode orientation='-' xlink:href='#osgb4000000009126286'/>\n" + 
-				"<osgb:directedNode orientation='+' xlink:href='#osgb4000000009126257'/>\n" + 
-				"<osgb:referenceToTopographicArea xlink:href='#osgb1000000214086160'/>\n" + 
-				"</osgb:RoadLink>"; 
+				"<osgb:directedNode orientation='-' xlink:href='#osgb4000000025030107'/>\n" + 
+				"<osgb:directedNode orientation='+' xlink:href='#osgb4000000025030094'/>\n" + 
+				"<osgb:referenceToTopographicArea xlink:href='#osgb1000002033801767'/>\n" + 
+				"</osgb:RoadLink>\n";
 		
 		XMLInputFactory factory = XMLInputFactory.newInstance();
-		StringReader stringReader = new StringReader(wayWithRoundabout);
+		StringReader stringReader = new StringReader(privatePublic);
 		XMLStreamReader parser = factory.createXMLStreamReader(stringReader);
 		OSITNWay way = OSITNWay.create(0, parser);
 		assertEquals("private", way.getTag("access"));
@@ -76,13 +77,13 @@ public void testReadTagsForPrivatePublicallyAccessibleRoads() throws XMLStreamEx
 	
 	@Test
 	public void testReadTagsPrivateRestrictedRoads() throws XMLStreamException, MismatchedDimensionException, FactoryException, TransformException {
-		String wayWithRoundabout = "<?xml version='1.0' encoding='UTF-8'?>\n" + 
+		String privateRestricted = "<?xml version='1.0' encoding='UTF-8'?>\n" + 
 				"<osgb:FeatureCollection xmlns:osgb='http://www.ordnancesurvey.co.uk/xml/namespaces/osgb'\n" + 
 				"	xmlns:gml='http://www.opengis.net/gml' xmlns:xlink='http://www.w3.org/1999/xlink' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'\n" + 
 				"	xsi:schemaLocation='http://www.ordnancesurvey.co.uk/xml/namespaces/osgb http://www.ordnancesurvey.co.uk/xml/schema/v7/OSDNFFeatures.xsd'\n" + 
 				"	fid='GDS-58096-1'>" +
 				"		<osgb:RoadLink fid='osgb4000000009314037'>\n" + 
-				"<osgb:descriptiveTerm>Private Road – Restricted Access</osgb:descriptiveTerm>\n" + 
+				"<osgb:descriptiveTerm>Private Road - Restricted Access</osgb:descriptiveTerm>\n" + 
 				"<osgb:natureOfRoad>Single Carriageway</osgb:natureOfRoad>\n" + 
 				"<osgb:length>12.04</osgb:length>\n" + 
 				"<osgb:polyline>\n" + 
@@ -96,7 +97,7 @@ public void testReadTagsPrivateRestrictedRoads() throws XMLStreamException, Mism
 				"</osgb:RoadLink>"; 
 		
 		XMLInputFactory factory = XMLInputFactory.newInstance();
-		StringReader stringReader = new StringReader(wayWithRoundabout);
+		StringReader stringReader = new StringReader(privateRestricted);
 		XMLStreamReader parser = factory.createXMLStreamReader(stringReader);
 		OSITNWay way = OSITNWay.create(0, parser);
 		assertEquals("no", way.getTag("access"));
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/PrivateRoadPubliclyAccessibleTest.java b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/PrivateRoadPubliclyAccessibleTest.java
index 83b2394b8a..386ad70ffe 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/PrivateRoadPubliclyAccessibleTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/PrivateRoadPubliclyAccessibleTest.java
@@ -30,7 +30,7 @@ public void init() {
 
     @Test
     public void testVisitWayAttribute() {
-        visitor.visitWayAttribute("Private Road – Publicly Accessible".toLowerCase().replace(" ", "").replace("–", ""), way);
+        visitor.visitWayAttribute("Private Road - Publicly Accessible".toLowerCase().replace(" ", "").replace("-", ""), way);
         verify(way).setTag("access", "private");
         verifyNoMoreInteractions(way);
     }
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/PrivateRoadRestrictedAccessTest.java b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/PrivateRoadRestrictedAccessTest.java
index 47ea9e91fc..22d34c047f 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/PrivateRoadRestrictedAccessTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/PrivateRoadRestrictedAccessTest.java
@@ -30,7 +30,7 @@ public void init() {
 
     @Test
     public void testVisitWayAttribute() {
-        visitor.visitWayAttribute("Private Road – Restricted Access".toLowerCase().replace(" ", "").replace("–", ""), way);
+        visitor.visitWayAttribute("Private Road - Restricted Access".toLowerCase().replace(" ", "").replace("-", ""), way);
         verify(way).setTag("access", "no");
         verifyNoMoreInteractions(way);
     }
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/RoadClassificationTest.java b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/RoadClassificationTest.java
index b3ce2e6d8b..4eb439464c 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/RoadClassificationTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/RoadClassificationTest.java
@@ -19,8 +19,8 @@ public void testLookup()
 		assertEquals(RoadClassification.MINORROAD, RoadClassification.lookup("Minor Road"));
 		assertEquals(RoadClassification.MOTORWAY, RoadClassification.lookup("Motorway"));
 		assertEquals(RoadClassification.PEDESTRIANISEDSTREET, RoadClassification.lookup("Pedestrianised Street"));
-		assertEquals(RoadClassification.PRIVATEROADPUBLICLYACCESSIBLE, RoadClassification.lookup("Private Road – Publicly Accessible"));
-		assertEquals(RoadClassification.PRIVATEROADRESTRICTEDACCESS, RoadClassification.lookup("Private Road – Restricted Access"));
+		assertEquals(RoadClassification.PRIVATEROADPUBLICLYACCESSIBLE, RoadClassification.lookup("Private Road - Publicly Accessible"));
+		assertEquals(RoadClassification.PRIVATEROADRESTRICTEDACCESS, RoadClassification.lookup("Private Road - Restricted Access"));
 		assertEquals(RoadClassification.SINGLECARRIAGEWAY, RoadClassification.lookup("Single Carriageway"));
 		assertEquals(RoadClassification.URBAN, RoadClassification.lookup("Urban"));
 		assertEquals(RoadClassification.ROUNDABOUT, RoadClassification.lookup("Roundabout"));
