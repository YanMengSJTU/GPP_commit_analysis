diff --git a/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/ARoad.java b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/ARoad.java
new file mode 100644
index 0000000000..7408a179c3
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/ARoad.java
@@ -0,0 +1,14 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
+
+public class ARoad extends AbstractOsToOsmAttibuteMappingVisitor
+{
+
+	@Override
+	protected void applyAttributes( Way way )
+	{
+		way.setTag("highway","primary");
+	}
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/Alley.java b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/Alley.java
new file mode 100644
index 0000000000..2daa2d67e5
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/Alley.java
@@ -0,0 +1,15 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
+
+public class Alley extends AbstractOsToOsmAttibuteMappingVisitor
+{
+
+	@Override
+	protected void applyAttributes( Way way )
+	{
+		way.setTag("highway", "service");
+		way.setTag("service", "alley");
+	}
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/BRoad.java b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/BRoad.java
new file mode 100644
index 0000000000..348e11f845
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/BRoad.java
@@ -0,0 +1,14 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
+
+public class BRoad extends AbstractOsToOsmAttibuteMappingVisitor
+{
+
+	@Override
+	protected void applyAttributes( Way way )
+	{
+		way.setTag("highway","secondary");
+	}
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/DualCarriageway.java b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/DualCarriageway.java
new file mode 100644
index 0000000000..9e19abf7a3
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/DualCarriageway.java
@@ -0,0 +1,14 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
+
+public class DualCarriageway extends AbstractOsToOsmAttibuteMappingVisitor
+{
+
+	@Override
+    protected void applyAttributes( Way way )
+    {
+	   	way.setTag("maxspeed:type", "GB:nsl_dual");
+    }
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/LocalStreet.java b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/LocalStreet.java
new file mode 100644
index 0000000000..f19a7321a9
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/LocalStreet.java
@@ -0,0 +1,14 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
+
+public class LocalStreet extends AbstractOsToOsmAttibuteMappingVisitor
+{
+
+	@Override
+	protected void applyAttributes( Way way )
+	{
+		way.setTag("highway","unclassified");
+	}
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/MinorRoad.java b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/MinorRoad.java
new file mode 100644
index 0000000000..9f9d603661
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/MinorRoad.java
@@ -0,0 +1,14 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
+
+public class MinorRoad extends AbstractOsToOsmAttibuteMappingVisitor
+{
+
+	@Override
+	protected void applyAttributes( Way way )
+	{
+		way.setTag("highway","tertiary");
+	}
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/Motorway.java b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/Motorway.java
new file mode 100644
index 0000000000..8177e1182b
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/Motorway.java
@@ -0,0 +1,15 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
+
+public class Motorway extends AbstractOsToOsmAttibuteMappingVisitor
+{
+
+	@Override
+	protected void applyAttributes( Way way )
+	{
+		way.setTag("highway","motorway");
+		way.setTag("maxspeed:type","GB:motorway");
+	}
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/PedestrianisedStreet.java b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/PedestrianisedStreet.java
new file mode 100644
index 0000000000..c4e02dfccb
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/PedestrianisedStreet.java
@@ -0,0 +1,14 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
+
+public class PedestrianisedStreet extends AbstractOsToOsmAttibuteMappingVisitor
+{
+
+	@Override
+	protected void applyAttributes( Way way )
+	{
+		way.setTag("highway","pedestrian");
+	}
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/PrivateRoadPubliclyAccessible.java b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/PrivateRoadPubliclyAccessible.java
new file mode 100644
index 0000000000..9121ec53ac
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/PrivateRoadPubliclyAccessible.java
@@ -0,0 +1,13 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
+
+public class PrivateRoadPubliclyAccessible extends AbstractOsToOsmAttibuteMappingVisitor {
+			
+	@Override
+    protected void applyAttributes( Way way )
+    {
+	   way.setTag("access", "private");
+    }
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/PrivateRoadRestrictedAccess.java b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/PrivateRoadRestrictedAccess.java
new file mode 100644
index 0000000000..20d853d0b0
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/PrivateRoadRestrictedAccess.java
@@ -0,0 +1,14 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
+
+public class PrivateRoadRestrictedAccess extends AbstractOsToOsmAttibuteMappingVisitor
+{
+
+	@Override
+    protected void applyAttributes( Way way )
+    {
+	   	way.setTag("access", "no");
+    }
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/SingleCarriageway.java b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/SingleCarriageway.java
new file mode 100644
index 0000000000..b6b35b6b2a
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/SingleCarriageway.java
@@ -0,0 +1,14 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
+
+public class SingleCarriageway extends AbstractOsToOsmAttibuteMappingVisitor
+{
+
+	@Override
+    protected void applyAttributes( Way way )
+    {
+	   	way.setTag("maxspeed:type", "GB:nsl_single");
+    }
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/Urban.java b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/Urban.java
new file mode 100644
index 0000000000..990c88c2a4
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/Urban.java
@@ -0,0 +1,17 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
+import com.graphhopper.routing.util.CarFlagEncoder;
+
+public class Urban extends AbstractOsToOsmAttibuteMappingVisitor
+{
+	private static final String _30_MPH = Integer.toString(CarFlagEncoder.THIRTY_MPH_IN_KPH);
+	@Override
+    protected void applyAttributes( Way way )
+    {
+		if(!way.hasTag("maxspeed")) {
+			way.setTag("maxspeed", _30_MPH);
+		}
+    }
+}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/ARoadTest.java b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/ARoadTest.java
new file mode 100644
index 0000000000..0201123012
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/ARoadTest.java
@@ -0,0 +1,37 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.OsToOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.roadclassification.ARoad;
+
+public class ARoadTest {
+    static OsToOsmAttributeMappingVisitor visitor;
+    @Mock
+    Way way;
+
+    @BeforeClass
+    public static void createVisitor() {
+        visitor = new ARoad();
+    }
+
+    @Before
+    public void init() {
+        MockitoAnnotations.initMocks(this);
+    }
+
+    @Test
+    public void testVisitWayAttribute() {
+        visitor.visitWayAttribute("A Road".toLowerCase().replace(" ", "").replace("–", ""), way);
+        verify(way).setTag("highway", "primary");
+        verifyNoMoreInteractions(way);
+    }
+}
\ No newline at end of file
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/AlleyTest.java b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/AlleyTest.java
new file mode 100644
index 0000000000..42e46ba024
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/AlleyTest.java
@@ -0,0 +1,42 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.OsToOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.roadclassification.Alley;
+
+public class AlleyTest
+{
+	static OsToOsmAttributeMappingVisitor visitor;
+	@Mock
+	Way way;
+
+	@BeforeClass
+	public static void createVisitor()
+	{
+		visitor = new Alley();
+	}
+
+	@Before
+	public void init()
+	{
+		MockitoAnnotations.initMocks(this);
+	}
+
+	@Test
+	public void testVisitWayAttribute()
+	{
+		visitor.visitWayAttribute("Alley".toLowerCase().replace(" ", "").replace("–", ""), way);
+		verify(way).setTag("highway", "service");
+		verify(way).setTag("service", "alley");
+		verifyNoMoreInteractions(way);
+	}
+}
\ No newline at end of file
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/BRoadTest.java b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/BRoadTest.java
new file mode 100644
index 0000000000..8fba26ec5a
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/BRoadTest.java
@@ -0,0 +1,37 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.OsToOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.roadclassification.BRoad;
+
+public class BRoadTest {
+    static OsToOsmAttributeMappingVisitor visitor;
+    @Mock
+    Way way;
+
+    @BeforeClass
+    public static void createVisitor() {
+        visitor = new BRoad();
+    }
+
+    @Before
+    public void init() {
+        MockitoAnnotations.initMocks(this);
+    }
+
+    @Test
+    public void testVisitWayAttribute() {
+        visitor.visitWayAttribute("B Road".toLowerCase().replace(" ", "").replace("–", ""), way);
+        verify(way).setTag("highway", "secondary");
+        verifyNoMoreInteractions(way);
+    }
+}
\ No newline at end of file
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/DualCarriagewayTest.java b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/DualCarriagewayTest.java
new file mode 100644
index 0000000000..a8c93c78a8
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/DualCarriagewayTest.java
@@ -0,0 +1,40 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.OsToOsmAttributeMappingVisitor;
+
+public class DualCarriagewayTest
+{
+	static OsToOsmAttributeMappingVisitor visitor;
+	@Mock
+	Way way;
+
+	@BeforeClass
+	public static void createVisitor()
+	{
+		visitor = new DualCarriageway();
+	}
+
+	@Before
+	public void init()
+	{
+		MockitoAnnotations.initMocks(this);
+	}
+
+	@Test
+	public void testVisitWayAttribute()
+	{
+		visitor.visitWayAttribute("Dual Carriageway".toLowerCase().replace(" ", "").replace("–", ""), way);
+		verify(way).setTag("maxspeed:type", "GB:nsl_dual");
+		verifyNoMoreInteractions(way);
+	}
+}
\ No newline at end of file
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/LocalStreetTest.java b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/LocalStreetTest.java
new file mode 100644
index 0000000000..15bd79413d
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/LocalStreetTest.java
@@ -0,0 +1,37 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.OsToOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.roadclassification.LocalStreet;
+
+public class LocalStreetTest {
+    static OsToOsmAttributeMappingVisitor visitor;
+    @Mock
+    Way way;
+
+    @BeforeClass
+    public static void createVisitor() {
+        visitor = new LocalStreet();
+    }
+
+    @Before
+    public void init() {
+        MockitoAnnotations.initMocks(this);
+    }
+
+    @Test
+    public void testVisitWayAttribute() {
+        visitor.visitWayAttribute("Local Street".toLowerCase().replace(" ", "").replace("–", ""), way);
+        verify(way).setTag("highway", "unclassified");
+        verifyNoMoreInteractions(way);
+    }
+}
\ No newline at end of file
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/MinorRoadTest.java b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/MinorRoadTest.java
new file mode 100644
index 0000000000..5285e24551
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/MinorRoadTest.java
@@ -0,0 +1,37 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.OsToOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.roadclassification.MinorRoad;
+
+public class MinorRoadTest {
+    static OsToOsmAttributeMappingVisitor visitor;
+    @Mock
+    Way way;
+
+    @BeforeClass
+    public static void createVisitor() {
+        visitor = new MinorRoad();
+    }
+
+    @Before
+    public void init() {
+        MockitoAnnotations.initMocks(this);
+    }
+
+    @Test
+    public void testVisitWayAttribute() {
+        visitor.visitWayAttribute("Minor Road".toLowerCase().replace(" ", "").replace("–", ""), way);
+        verify(way).setTag("highway", "tertiary");
+        verifyNoMoreInteractions(way);
+    }
+}
\ No newline at end of file
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/MotorwayTest.java b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/MotorwayTest.java
new file mode 100644
index 0000000000..836af3cea3
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/MotorwayTest.java
@@ -0,0 +1,38 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.OsToOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.roadclassification.Motorway;
+
+public class MotorwayTest {
+    static OsToOsmAttributeMappingVisitor visitor;
+    @Mock
+    Way way;
+
+    @BeforeClass
+    public static void createVisitor() {
+        visitor = new Motorway();
+    }
+
+    @Before
+    public void init() {
+        MockitoAnnotations.initMocks(this);
+    }
+
+    @Test
+    public void testVisitWayAttribute() {
+        visitor.visitWayAttribute("Motorway".toLowerCase().replace(" ", "").replace("–", ""), way);
+        verify(way).setTag("highway", "motorway");
+        verify(way).setTag("maxspeed:type", "GB:motorway");
+        verifyNoMoreInteractions(way);
+    }
+}
\ No newline at end of file
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/PedestrianisedStreetTest.java b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/PedestrianisedStreetTest.java
new file mode 100644
index 0000000000..9e090bc520
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/PedestrianisedStreetTest.java
@@ -0,0 +1,37 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.OsToOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.roadclassification.PedestrianisedStreet;
+
+public class PedestrianisedStreetTest {
+    static OsToOsmAttributeMappingVisitor visitor;
+    @Mock
+    Way way;
+
+    @BeforeClass
+    public static void createVisitor() {
+        visitor = new PedestrianisedStreet();
+    }
+
+    @Before
+    public void init() {
+        MockitoAnnotations.initMocks(this);
+    }
+
+    @Test
+    public void testVisitWayAttribute() {
+        visitor.visitWayAttribute("Pedestrianised Street".toLowerCase().replace(" ", "").replace("–", ""), way);
+        verify(way).setTag("highway", "pedestrian");
+        verifyNoMoreInteractions(way);
+    }
+}
\ No newline at end of file
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/PrivateRoadPubliclyAccessibleTest.java b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/PrivateRoadPubliclyAccessibleTest.java
new file mode 100644
index 0000000000..83b2394b8a
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/PrivateRoadPubliclyAccessibleTest.java
@@ -0,0 +1,38 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.OsToOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.roadclassification.PrivateRoadPubliclyAccessible;
+
+public class PrivateRoadPubliclyAccessibleTest {
+    static OsToOsmAttributeMappingVisitor visitor;
+    @Mock
+    Way way;
+
+    @BeforeClass
+    public static void createVisitor() {
+        visitor = new PrivateRoadPubliclyAccessible();
+    }
+
+    @Before
+    public void init() {
+        MockitoAnnotations.initMocks(this);
+    }
+
+    @Test
+    public void testVisitWayAttribute() {
+        visitor.visitWayAttribute("Private Road – Publicly Accessible".toLowerCase().replace(" ", "").replace("–", ""), way);
+        verify(way).setTag("access", "private");
+        verifyNoMoreInteractions(way);
+    }
+
+}
\ No newline at end of file
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/PrivateRoadRestrictedAccessTest.java b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/PrivateRoadRestrictedAccessTest.java
new file mode 100644
index 0000000000..47ea9e91fc
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/PrivateRoadRestrictedAccessTest.java
@@ -0,0 +1,37 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.OsToOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.roadclassification.PrivateRoadRestrictedAccess;
+
+public class PrivateRoadRestrictedAccessTest {
+    static OsToOsmAttributeMappingVisitor visitor;
+    @Mock
+    Way way;
+
+    @BeforeClass
+    public static void createVisitor() {
+        visitor = new PrivateRoadRestrictedAccess();
+    }
+
+    @Before
+    public void init() {
+        MockitoAnnotations.initMocks(this);
+    }
+
+    @Test
+    public void testVisitWayAttribute() {
+        visitor.visitWayAttribute("Private Road – Restricted Access".toLowerCase().replace(" ", "").replace("–", ""), way);
+        verify(way).setTag("access", "no");
+        verifyNoMoreInteractions(way);
+    }
+}
\ No newline at end of file
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/SingleCarriagewayTest.java b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/SingleCarriagewayTest.java
new file mode 100644
index 0000000000..0796b928aa
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/SingleCarriagewayTest.java
@@ -0,0 +1,40 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.OsToOsmAttributeMappingVisitor;
+
+public class SingleCarriagewayTest
+{
+	static OsToOsmAttributeMappingVisitor visitor;
+	@Mock
+	Way way;
+
+	@BeforeClass
+	public static void createVisitor()
+	{
+		visitor = new SingleCarriageway();
+	}
+
+	@Before
+	public void init()
+	{
+		MockitoAnnotations.initMocks(this);
+	}
+
+	@Test
+	public void testVisitWayAttribute()
+	{
+		visitor.visitWayAttribute("Single Carriageway".toLowerCase().replace(" ", "").replace("–", ""), way);
+		verify(way).setTag("maxspeed:type", "GB:nsl_single");
+		verifyNoMoreInteractions(way);
+	}
+}
\ No newline at end of file
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/UrbanTest.java b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/UrbanTest.java
new file mode 100644
index 0000000000..72ae324e3a
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/UrbanTest.java
@@ -0,0 +1,55 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import static org.mockito.Mockito.when;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.OsToOsmAttributeMappingVisitor;
+import com.graphhopper.routing.util.CarFlagEncoder;
+
+public class UrbanTest
+{
+	private static final String _30_MPH = Integer.toString(CarFlagEncoder.THIRTY_MPH_IN_KPH);
+	static OsToOsmAttributeMappingVisitor visitor;
+	@Mock
+	Way way;
+
+	@BeforeClass
+	public static void createVisitor()
+	{
+		visitor = new Urban();
+	}
+
+	@Before
+	public void init()
+	{
+		MockitoAnnotations.initMocks(this);
+	}
+
+	@Test
+	public void testVisitWayAttribute()
+	{
+		visitor.visitWayAttribute("Urban".toLowerCase().replace(" ", "").replace("–", ""), way);
+		verify(way).hasTag("maxspeed");
+		verify(way).setTag("maxspeed", _30_MPH);
+		verifyNoMoreInteractions(way);
+	}
+	
+	@Test
+	public void testVisitWayAttributeWhenNationalSpeedLimitSet()
+	{
+		when(way.hasTag("maxspeed")).thenReturn(false);
+		when(way.hasTag("maxspeed:type")).thenReturn(true);
+		visitor.visitWayAttribute("Urban".toLowerCase().replace(" ", "").replace("–", ""), way);
+		verify(way).hasTag("maxspeed");
+		verify(way).setTag("maxspeed", _30_MPH);
+		verifyNoMoreInteractions(way);
+	}
+}
\ No newline at end of file
