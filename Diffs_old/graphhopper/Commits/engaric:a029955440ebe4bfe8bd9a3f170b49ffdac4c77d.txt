diff --git a/core/src/main/java/com/graphhopper/util/shapes/GHPoint.java b/core/src/main/java/com/graphhopper/util/shapes/GHPoint.java
index feb28ffafa..bd98795078 100644
--- a/core/src/main/java/com/graphhopper/util/shapes/GHPoint.java
+++ b/core/src/main/java/com/graphhopper/util/shapes/GHPoint.java
@@ -34,7 +34,7 @@
 public class GHPoint
 {
 	private static final String BNG = "bng";
-	private static final String WGS_84 = "EPSG:4326";
+	private static final String WGS_84 = "WGS84";
 	public double lat = Double.NaN;
 	public double lon = Double.NaN;
 
diff --git a/core/src/test/java/com/graphhopper/util/shapes/GHPointTest.java b/core/src/test/java/com/graphhopper/util/shapes/GHPointTest.java
index 04ec69024a..903cc17775 100644
--- a/core/src/test/java/com/graphhopper/util/shapes/GHPointTest.java
+++ b/core/src/test/java/com/graphhopper/util/shapes/GHPointTest.java
@@ -29,7 +29,8 @@
 public class GHPointTest
 {
     private static final String EPSG_27700 = "EPSG:27700";
-    private static final String WGS_84 = "EPSG:4326";
+    private static final String WGS_84 = "WGS84";
+    private static final String WGS_84_AS_EPSG = "EPSG:4326";
     private static final String BNG = "BNG";
     
     /* latitude of BNG easting = 0 in WGS84*/
@@ -63,7 +64,14 @@ public void testParseWithSrsDefault() {
     }
     
     @Test
-    public void testParseWithSrsEPSG27700() {
+    public void testParseWithSrsEpsg4326() {
+    	GHPoint parsedPoint = GHPoint.parse("1,2", WGS_84_AS_EPSG.toLowerCase());
+    	assertEquals(1, parsedPoint.getLat(), 0);
+    	assertEquals(2, parsedPoint.getLon(), 0);
+    }
+    
+    @Test
+    public void testParseWithSrsEpsg27700() {
     	GHPoint parsedPoint = GHPoint.parse("0,0", EPSG_27700.toLowerCase());
     	assertEquals(LAT_ANGLE, parsedPoint.getLat(), 0);
     	assertEquals(LON_ANGLE, parsedPoint.getLon(), 0);
diff --git a/web/src/main/java/com/graphhopper/http/ApiResource.java b/web/src/main/java/com/graphhopper/http/ApiResource.java
index 1ceafc8bdb..0d2215962e 100644
--- a/web/src/main/java/com/graphhopper/http/ApiResource.java
+++ b/web/src/main/java/com/graphhopper/http/ApiResource.java
@@ -11,9 +11,9 @@
 {
 	ROUTE("route", new String[] { "point", "vehicle" }, new String[] { "point", "vehicle",
 			"locale", "instructions", "weighting", "algorithm", "points_encoded", "debug",
-			"pretty", "calc_points", "type", "avoidances", "private" }), NEAREST("nearest",
-					new String[] { "point" }, new String[] { "point" }), INFO("info", new String[] {},
-							new String[] {});
+			"pretty", "calc_points", "type", "avoidances", "private", "srs" }), NEAREST("nearest",
+					new String[] { "point"}, new String[] { "point", "srs" }), INFO("info", new String[] {},
+							new String[] {"srs"});
 
 	public String[] getMandatoryValues()
 	{
@@ -55,7 +55,17 @@ private ApiResource( String resourceName, String[] mandatoryValues, String[] val
 	public void checkAllRequestParameters( HttpServletRequest request )
 			throws MissingParameterException, NoSuchParameterException, InvalidParameterException
 	{
-		// Check if the mandatory parameter exists in the request
+		checkMandatoryParameters(request);
+		checkValidParameters(request);
+	}
+
+	/**
+	 *  Check if the mandatory parameter exists in the request
+	 * @param request
+	 * @throws MissingParameterException
+	 */
+	private void checkMandatoryParameters(HttpServletRequest request)
+			throws MissingParameterException {
 		String value = this.getMandatoryValues()[0];
 		boolean mandatoryValueExists = checkMandatoryValue(request, value);
 		if (mandatoryValueExists && this.getMandatoryValues().length > 1)
@@ -67,9 +77,6 @@ public void checkAllRequestParameters( HttpServletRequest request )
 		{
 			throw new MissingParameterException(value);
 		}
-
-		// Now check for all the valid parameters for the resource
-		checkValidParameters(request);
 	}
 
 	/**
diff --git a/web/src/main/java/com/graphhopper/http/DefaultModule.java b/web/src/main/java/com/graphhopper/http/DefaultModule.java
index cc922ece3c..97485a97d3 100644
--- a/web/src/main/java/com/graphhopper/http/DefaultModule.java
+++ b/web/src/main/java/com/graphhopper/http/DefaultModule.java
@@ -78,9 +78,13 @@ protected void configure()
             boolean internalErrorsAllowed = args.getBool("web.detailedErrors", false);
             if (!internalErrorsAllowed)
                 logger.info("detailed errors disabled");
+            
+            String defaultSrs = args.get("web.defaultSrs", "EPSG:4326");
+            logger.info("Default SRS=" + defaultSrs);
 
             bind(Boolean.class).annotatedWith(Names.named("jsonpAllowed")).toInstance(jsonpAllowed);
             bind(Boolean.class).annotatedWith(Names.named("internalErrorsAllowed")).toInstance(internalErrorsAllowed);
+            bind(String.class).annotatedWith(Names.named("defaultSrs")).toInstance(defaultSrs);
         } catch (Exception ex)
         {
             throw new IllegalStateException("Couldn't load graph", ex);
diff --git a/web/src/main/java/com/graphhopper/http/GHBaseServlet.java b/web/src/main/java/com/graphhopper/http/GHBaseServlet.java
index 117d67ebaa..7affd88b61 100644
--- a/web/src/main/java/com/graphhopper/http/GHBaseServlet.java
+++ b/web/src/main/java/com/graphhopper/http/GHBaseServlet.java
@@ -63,6 +63,10 @@
 	@Inject
 	@Named("internalErrorsAllowed")
 	protected boolean internalErrorsAllowed;
+	
+	@Inject
+	@Named("defaultSrs")
+	protected String defaultSRS = "EPSG:4326";
 
 	protected void writeJson( HttpServletRequest req, HttpServletResponse res, JSONObject json )
 			throws JSONException, IOException
@@ -181,10 +185,19 @@ protected double getDoubleParam( HttpServletRequest req, String string, double _
 			throws InvalidParameterException
 			{
 		String[] pointsAsStr = getParams(req, key);
+		String[] srs = getParams(req, "srs");
 		final List<GHPoint> infoPoints = new ArrayList<GHPoint>(pointsAsStr.length);
 		for (String str : pointsAsStr)
 		{
-			GHPoint point = GHPoint.parse(str);
+			GHPoint point;
+			String useSrs;
+			if(srs.length>0) 
+				useSrs = srs[0];
+			else 
+				useSrs = defaultSRS;
+			
+			point = GHPoint.parse(str,useSrs);
+			
 			if (point != null)
 			{
 				infoPoints.add(point);
@@ -194,7 +207,9 @@ protected double getDoubleParam( HttpServletRequest req, String string, double _
 				throw new InvalidParameterException(
 						"Point "
 								+ str
-								+ " is not a valid point. Point must be a comma separated coordinate in WGS84 projection.");
+								+ " is not a valid point. Point must be a comma separated coordinate in "
+								+ useSrs
+								+ " projection.");
 			}
 		}
 
diff --git a/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java b/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
index b6c0a56855..49acd5a1d5 100644
--- a/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
+++ b/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
@@ -101,6 +101,7 @@ public GHResponse getGHResponse( HttpServletRequest httpReq, HttpServletResponse
 		String prettyString = getParam(httpReq, "pretty", "true");
 		String avoidancesString = getParam(httpReq, "avoidances", null);
 		String noThroughAccessString = getParam(httpReq, "private", "true");
+		String srs = getParam(httpReq, "srs", "bng");
 
 		GHResponse ghRsp = null;
 		List<GHPoint> infoPoints = null;
diff --git a/web/src/main/java/com/graphhopper/http/UpdateServlet.java b/web/src/main/java/com/graphhopper/http/UpdateServlet.java
index e299c368cf..607928cd7a 100644
--- a/web/src/main/java/com/graphhopper/http/UpdateServlet.java
+++ b/web/src/main/java/com/graphhopper/http/UpdateServlet.java
@@ -167,9 +167,14 @@ protected String errorsToXML( List<Throwable> list )
 		for (String str : pointsAsStr)
 		{
 			String[] fromStrs = str.split(",");
+			String[] srs = getParams(req, "srs");
 			if (fromStrs.length == 2)
 			{
-				GHPoint place = GHPoint.parse(str);
+				GHPoint place;
+				if(srs.length>0)
+					place = GHPoint.parse(str, srs[0]);
+				else 
+					place = GHPoint.parse(str, defaultSRS);
 				if (place != null)
 					infoPoints.add(place);
 			}
diff --git a/web/src/test/java/com/graphhopper/http/ApiResourceTest.java b/web/src/test/java/com/graphhopper/http/ApiResourceTest.java
index 3f58bd6568..eae97fbc8c 100644
--- a/web/src/test/java/com/graphhopper/http/ApiResourceTest.java
+++ b/web/src/test/java/com/graphhopper/http/ApiResourceTest.java
@@ -3,6 +3,9 @@
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.fail;
 import static org.mockito.Mockito.when;
+import static com.graphhopper.http.ApiResource.ROUTE;
+import static com.graphhopper.http.ApiResource.NEAREST;
+import static com.graphhopper.http.ApiResource.INFO;
 
 import java.util.Collections;
 import java.util.HashMap;
@@ -25,16 +28,15 @@
 	@Mock
 	HttpServletRequest request;
 
-	ApiResource apiResource = ApiResource.ROUTE;
 
 	@Test
-	public void testPointIsMandatoryParam() throws NoSuchParameterException,
+	public void testPointIsMandatoryParamForRoute() throws NoSuchParameterException,
 	        InvalidParameterException
 	{
 		when(request.getParameterMap()).thenReturn(Collections.<String, String[]> emptyMap());
 		try
 		{
-			apiResource.checkAllRequestParameters(request);
+			ROUTE.checkAllRequestParameters(request);
 			fail("No exception thrown");
 		} catch (MissingParameterException mpe)
 		{
@@ -43,7 +45,7 @@ public void testPointIsMandatoryParam() throws NoSuchParameterException,
 	}
 
 	@Test
-	public void testVehicleIsMandatoryParam() throws NoSuchParameterException,
+	public void testVehicleIsMandatoryParamForRoute() throws NoSuchParameterException,
 	        InvalidParameterException
 	{
 		Map<String, String[]> paramWithPoint = new HashMap<>();
@@ -51,7 +53,7 @@ public void testVehicleIsMandatoryParam() throws NoSuchParameterException,
 		when(request.getParameterMap()).thenReturn(paramWithPoint);
 		try
 		{
-			apiResource.checkAllRequestParameters(request);
+			ROUTE.checkAllRequestParameters(request);
 			fail("No exception thrown");
 		} catch (MissingParameterException mpe)
 		{
@@ -60,7 +62,7 @@ public void testVehicleIsMandatoryParam() throws NoSuchParameterException,
 	}
 
 	@Test
-	public void testAllMandatoryAndAllValidParameters()
+	public void testAllMandatoryAndAllValidParametersForRoute()
 	{
 		Map<String, String[]> allParameters = new HashMap<>();
 		// mandatory
@@ -78,10 +80,11 @@ public void testAllMandatoryAndAllValidParameters()
 		allParameters.put("type", new String[] { "x" });
 		allParameters.put("avoidances", new String[] { "x" });
 		allParameters.put("private", new String[] { "x" });
+		allParameters.put("srs", new String[] {"x"});
 		when(request.getParameterMap()).thenReturn(allParameters);
 		try
 		{
-			apiResource.checkAllRequestParameters(request);
+			ROUTE.checkAllRequestParameters(request);
 		} catch (MissingParameterException | NoSuchParameterException | InvalidParameterException e)
 		{
 			fail(e.getMessage());
@@ -90,7 +93,7 @@ public void testAllMandatoryAndAllValidParameters()
 	}
 
 	@Test
-	public void testAllMandatoryAllValidParametersAndIncorrectOnes()
+	public void testAllMandatoryAllValidParametersAndIncorrectOnesForRoute()
 	{
 		Map<String, String[]> allParameters = new HashMap<>();
 		// mandatory
@@ -108,21 +111,96 @@ public void testAllMandatoryAllValidParametersAndIncorrectOnes()
 		allParameters.put("type", new String[] { "x" });
 		allParameters.put("avoidances", new String[] { "x" });
 		allParameters.put("private", new String[] { "x" });
+		allParameters.put("srs", new String[] { "x" });
 		// incorrect
 		allParameters.put("bogus", new String[] { "x" });
 		when(request.getParameterMap()).thenReturn(allParameters);
 		try
 		{
-			apiResource.checkAllRequestParameters(request);
+			ROUTE.checkAllRequestParameters(request);
 		} catch (MissingParameterException | InvalidParameterException exception)
 		{
 			fail(exception.getMessage());
 		} catch (NoSuchParameterException e)
 		{
 			assertEquals(
-			        "Parameter bogus is not a valid parameter for resource route. Valid parameters for requested resource are point, vehicle, locale, instructions, weighting, algorithm, points_encoded, debug, pretty, calc_points, type, avoidances, private.",
+			        "Parameter bogus is not a valid parameter for resource route. Valid parameters for requested resource are point, vehicle, locale, instructions, weighting, algorithm, points_encoded, debug, pretty, calc_points, type, avoidances, private, srs.",
 			        e.getMessage());
 		}
 	}
+	
+	@Test
+	public void testPointMandatoryForNearest() throws NoSuchParameterException, InvalidParameterException
+	{
+		Map<String, String[]> allParameters = new HashMap<>();
+		allParameters.put("srs", new String[] { "0" });
+		when(request.getParameterMap()).thenReturn(allParameters);
+		try
+		{
+			NEAREST.checkAllRequestParameters(request);
+			fail("No exception thrown when manadatory parameter point not present");
+		} catch (MissingParameterException mpe)
+		{
+			assertEquals("No point parameter provided.", mpe.getMessage());
+		}
+	}
+	
+	@Test
+	public void testAllMandatoryAndAllValidParametersForNearest()
+	{
+		Map<String, String[]> allParameters = new HashMap<>();
+		// mandatory
+		allParameters.put("point", new String[] { "0" });
+		// valid
+		allParameters.put("srs", new String[] { "x" });
+		when(request.getParameterMap()).thenReturn(allParameters);
+		try
+		{
+			NEAREST.checkAllRequestParameters(request);
+		} catch (MissingParameterException | NoSuchParameterException | InvalidParameterException e)
+		{
+			fail(e.getMessage());
+		}
+	}
+	
+	@Test
+	public void testAllMandatoryAllValidParametersAndIncorrectOnesForNearest()
+	{
+		Map<String, String[]> allParameters = new HashMap<>();
+		// mandatory
+		allParameters.put("point", new String[] { "0" });
+		// valid
+		allParameters.put("srs", new String[] { "x" });
+		// incorrect
+		allParameters.put("bogus", new String[] { "x" });
+		when(request.getParameterMap()).thenReturn(allParameters);
+		try
+		{
+			NEAREST.checkAllRequestParameters(request);
+		} catch (MissingParameterException | InvalidParameterException exception)
+		{
+			fail(exception.getMessage());
+		} catch (NoSuchParameterException e)
+		{
+			assertEquals(
+			        "Parameter bogus is not a valid parameter for resource nearest. Valid parameters for requested resource are point, srs.",
+			        e.getMessage());
+		}
+	}
+	
+	
+	@Test
+	public void testNoMandatoryParametersForInfo() throws NoSuchParameterException, InvalidParameterException
+	{
+		Map<String, String[]> allParameters = new HashMap<>();
+		when(request.getParameterMap()).thenReturn(allParameters);
+		try
+		{
+			INFO.checkAllRequestParameters(request);
+		} catch (MissingParameterException mpe)
+		{
+			fail("No mandatory parameters");
+		}
+	}
 
 }
diff --git a/web/src/test/java/com/graphhopper/http/GraphHopperServletTest.java b/web/src/test/java/com/graphhopper/http/GraphHopperServletTest.java
index 14b45f2c1d..8f88489d3a 100644
--- a/web/src/test/java/com/graphhopper/http/GraphHopperServletTest.java
+++ b/web/src/test/java/com/graphhopper/http/GraphHopperServletTest.java
@@ -2,6 +2,7 @@
 
 import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.fail;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.anyString;
 import static org.mockito.Mockito.mock;
@@ -13,7 +14,6 @@
 import java.io.PrintWriter;
 import java.util.ArrayList;
 import java.util.Arrays;
-import java.util.Collections;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
@@ -47,6 +47,7 @@
 import com.graphhopper.util.InstructionList;
 import com.graphhopper.util.PointList;
 import com.graphhopper.util.shapes.BBox;
+import com.graphhopper.util.shapes.GHPoint;
 
 public class GraphHopperServletTest
 {
@@ -93,6 +94,7 @@
 	private PointList pointList;
 
 	private final String[] POINTS = { "50.728198,-3.534516", "50.726807,-3.530156" };
+	private final String[] BNG_POINTS = { "0,0", "1,-1" };
 	private final String UNPARSABLE_POINT = "50A.45";
 
 	private final String[] LOCALES = { "bg", "ca", "cz", "de_DE", "el", "en_US", "es", "fa", "fil",
@@ -143,6 +145,7 @@ protected void configure()
 				bind(Boolean.class).annotatedWith(Names.named("internalErrorsAllowed")).toInstance(
 				        false);
 				bind(Boolean.class).annotatedWith(Names.named("jsonpAllowed")).toInstance(false);
+				bind(String.class).annotatedWith(Names.named("defaultSrs")).toInstance("WGS84");
 			}
 		});
 
@@ -713,6 +716,84 @@ public void testGetGHResponseWithIncorrectAvoidances() throws MissingParameterEx
 		assertEquals(buildErrorMessageString(WRONG_AVOIDANCE, "avoidances", AVOIDANCES), ghResponse
 		        .getErrors().get(0).getMessage());
 	}
+	
+	@Test 
+	public void testGetPointsDefaultSrs() throws InvalidParameterException {
+		allParameters.put("point", POINTS);
+		allParameters.put("vehicle", new String[] { VEHICLES[0] });
+		allParameters.put("locale", new String[] { LOCALES[0] });
+
+		allParameters.put("avoidances", new String[] { WRONG_AVOIDANCE });
+		when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+		List<GHPoint> points = graphHopperServlet.getPoints(httpServletRequest, "point");
+		int idx = 0;
+		for (GHPoint ghPoint : points) {
+			assertEquals("Since using internal srs all points should match" , POINTS[idx++],ghPoint.toString());
+		}
+	}
+	
+	@Test 
+	public void testGetPointsModifiedDefaultSrs() throws InvalidParameterException {
+		allParameters.put("point", POINTS);
+		allParameters.put("vehicle", new String[] { VEHICLES[0] });
+		allParameters.put("locale", new String[] { LOCALES[0] });
+
+		allParameters.put("avoidances", new String[] { WRONG_AVOIDANCE });
+		when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+		graphHopperServlet.defaultSRS = "EPSG:27700";
+		List<GHPoint> points = graphHopperServlet.getPoints(httpServletRequest, "point");
+		int idx = 0;
+		String[] convertedPoints = new String[POINTS.length];
+		for (int i = 0; i < POINTS.length; i++) {
+			convertedPoints[i] = GHPoint.parse(POINTS[i], "EPSG:27700").toString();
+		}
+		
+		for (GHPoint ghPoint : points) {
+			assertEquals("Since using modified srs all points should match converted form" , convertedPoints[idx++],ghPoint.toString());
+		}
+	}
+	
+	@Test 
+	public void testGetPointsWithRequestSrs() throws InvalidParameterException {
+		allParameters.put("point", POINTS);
+		allParameters.put("vehicle", new String[] { VEHICLES[0] });
+		allParameters.put("locale", new String[] { LOCALES[0] });
+		allParameters.put("srs", new String[] {"EPSG:27700"});
+
+		allParameters.put("avoidances", new String[] { WRONG_AVOIDANCE });
+		when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+		List<GHPoint> points = graphHopperServlet.getPoints(httpServletRequest, "point");
+		int idx = 0;
+		String[] convertedPoints = new String[POINTS.length];
+		for (int i = 0; i < POINTS.length; i++) {
+			convertedPoints[i] = GHPoint.parse(POINTS[i], "EPSG:27700").toString();
+		}
+		
+		for (GHPoint ghPoint : points) {
+			assertEquals("Since using modified srs all points should match converted form" , convertedPoints[idx++],ghPoint.toString());
+		}
+	}
+	
+	@Test 
+	public void testGetPointsWithInvalidRequestSrs() {
+		allParameters.put("point", POINTS);
+		allParameters.put("vehicle", new String[] { VEHICLES[0] });
+		allParameters.put("locale", new String[] { LOCALES[0] });
+		String invalidSRS = "EPSG:UNKNOWN";
+		allParameters.put("srs", new String[] {invalidSRS});
+
+		allParameters.put("avoidances", new String[] { WRONG_AVOIDANCE });
+		when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+		try {
+			List<GHPoint> points = graphHopperServlet.getPoints(httpServletRequest, "point");
+			fail("Should have thrown error as srs is invalid");
+		} catch (InvalidParameterException ipe) {
+			assertEquals("Point " + POINTS[0]
+								+ " is not a valid point. Point must be a comma separated coordinate in "
+								+ invalidSRS
+								+ " projection.", ipe.getStatusMessage());
+		}
+	}
 
 	private void expectResponseBBox()
 	{
