diff --git a/.gitignore b/.gitignore
index 83ce38371f..24a64efbea 100644
--- a/.gitignore
+++ b/.gitignore
@@ -33,3 +33,4 @@ android/.gradle
 .settings/
 .classpath
 .project
+local.properties
diff --git a/android/app/build.gradle b/android/app/build.gradle
index 088d4f2d5c..8c1da116eb 100644
--- a/android/app/build.gradle
+++ b/android/app/build.gradle
@@ -1,8 +1,8 @@
 apply plugin: 'com.android.application'
 
 android {
-    compileSdkVersion 19
-    buildToolsVersion "21.1.2"
+    compileSdkVersion 22
+    buildToolsVersion "23.0.1"
 
     defaultConfig {
         applicationId "com.graphhopper.android"
diff --git a/android/build.gradle b/android/build.gradle
index fd24035602..2d3bd42a46 100644
--- a/android/build.gradle
+++ b/android/build.gradle
@@ -4,9 +4,10 @@ buildscript {
         mavenLocal()
         mavenCentral()
         /*jcenter()*/
+        maven { url "https://oss.sonatype.org/content/groups/public/" }
     }
     dependencies {
-        classpath 'com.android.tools.build:gradle:1.0.0'
+        classpath 'com.android.tools.build:gradle:1.3.1'
     }
 }
 
@@ -15,5 +16,6 @@ allprojects {
         mavenLocal()
         mavenCentral()
         /*jcenter()*/
+        maven { url "https://oss.sonatype.org/content/groups/public/" }
     }
 }
diff --git a/android/gradle/wrapper/gradle-wrapper.properties b/android/gradle/wrapper/gradle-wrapper.properties
index 0c71e760dc..e7faee01a4 100644
--- a/android/gradle/wrapper/gradle-wrapper.properties
+++ b/android/gradle/wrapper/gradle-wrapper.properties
@@ -3,4 +3,4 @@ distributionBase=GRADLE_USER_HOME
 distributionPath=wrapper/dists
 zipStoreBase=GRADLE_USER_HOME
 zipStorePath=wrapper/dists
-distributionUrl=https\://services.gradle.org/distributions/gradle-2.2.1-all.zip
+distributionUrl=https\://services.gradle.org/distributions/gradle-2.4-all.zip
diff --git a/android/local.properties b/android/local.properties
deleted file mode 100644
index efc8662bc7..0000000000
--- a/android/local.properties
+++ /dev/null
@@ -1,7 +0,0 @@
-## This file must *NOT* be checked into Version Control Systems,
-# as it contains information specific to your local configuration.
-#
-# Location of the SDK. This is only used by Gradle.
-#
-#Mon Jan 19 09:31:41 CET 2015
-sdk.dir=/home/peterk/Programme/adt-bundle-linux-x86/sdk
diff --git a/core/src/main/java/com/graphhopper/routing/AbstractBidirAlgo.java b/core/src/main/java/com/graphhopper/routing/AbstractBidirAlgo.java
index 69d6d68bd1..1091d35e4f 100644
--- a/core/src/main/java/com/graphhopper/routing/AbstractBidirAlgo.java
+++ b/core/src/main/java/com/graphhopper/routing/AbstractBidirAlgo.java
@@ -68,19 +68,11 @@ protected void runAlgo()
     {
         while (!finished() && !isWeightLimitExceeded())
         {
-            if (!finishedFrom && !finishedTo)
-            {
-                if (getCurrentFromWeight() < getCurrentToWeight())
-                    finishedFrom = !fillEdgesFrom();
-                else
-                    finishedTo = !fillEdgesTo();
-            } else if (!finishedFrom)
-            {
+            if (!finishedFrom)
                 finishedFrom = !fillEdgesFrom();
-            } else
-            {
+
+            if (!finishedTo)
                 finishedTo = !fillEdgesTo();
-            }
         }
     }
 
diff --git a/core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java
index 4bd0f452a9..83134999b2 100644
--- a/core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java
@@ -495,18 +495,30 @@ protected long handleFerryTags( OSMWay way, double unknownSpeed, double shortTri
                     double val = estimatedLength.doubleValue() / 1000;
                     // If duration AND distance is available we can calculate the speed more precisely
                     // and set both speed to the same value. Factor 1.4 slower because of waiting time!
-                    shortTripsSpeed = Math.round(val / durationInHours / 1.4);
+                    double calculatedTripSpeed = val / durationInHours / 1.4;
                     // Plausibility check especially for the case of wongly used PxM format with the intension to 
                     // specify the duration in minutes, but actually using months
-                    if (shortTripsSpeed > 0.1d)
+                    if (calculatedTripSpeed > 0.01d)
                     {
-                        if (shortTripsSpeed > getMaxSpeed())
-                            shortTripsSpeed = getMaxSpeed();
-                        longTripsSpeed = shortTripsSpeed;
+                        // If we have a very short ferry with an average lower compared to what we can encode 
+                        // then we need to avoid setting it as otherwise the edge would not be found at all any more.
+                        if (Math.round(calculatedTripSpeed) > speedEncoder.factor / 2)
+                        {
+                            shortTripsSpeed = Math.round(calculatedTripSpeed);
+                            if (shortTripsSpeed > getMaxSpeed())
+                                shortTripsSpeed = getMaxSpeed();
+                            longTripsSpeed = shortTripsSpeed;
+                        }
+                        else
+                        {
+                            // Now we set to the lowest possible still accessible speed. 
+                            shortTripsSpeed = speedEncoder.factor / 2;
+                        }
                     } else
                     {
                         logger.warn("Unrealistic long duration ignored in way with OSMID=" + way.getId() + " : Duration tag value="
                                 + way.getTag("duration") + " (=" + Math.round(duration / 60d) + " minutes)");
+                        durationInHours = 0;
                     }
                 }
             } catch (Exception ex)
diff --git a/core/src/main/java/com/graphhopper/storage/BaseGraph.java b/core/src/main/java/com/graphhopper/storage/BaseGraph.java
index 04ad9f3ffd..07a0e5a4eb 100644
--- a/core/src/main/java/com/graphhopper/storage/BaseGraph.java
+++ b/core/src/main/java/com/graphhopper/storage/BaseGraph.java
@@ -29,7 +29,6 @@
 import com.graphhopper.util.*;
 import static com.graphhopper.util.Helper.nf;
 import com.graphhopper.util.shapes.BBox;
-import java.io.UnsupportedEncodingException;
 
 /**
  * The base graph handles nodes and edges file format. It can be used with different Directory
@@ -44,10 +43,6 @@
  */
 class BaseGraph implements Graph
 {
-    // Emergency stop. to detect if something went wrong with our storage system and to prevent us from an infinit loop.
-    // Road networks typically do not have nodes with plenty of edges!
-    private static final int MAX_EDGES = 1000;
-
     // edge memory layout not found in EdgeAccess:
     int E_GEO, E_NAME, E_ADDITIONAL;
     /**
diff --git a/core/src/test/java/com/graphhopper/routing/util/CarFlagEncoderTest.java b/core/src/test/java/com/graphhopper/routing/util/CarFlagEncoderTest.java
index b56f181438..1aab3fd30d 100644
--- a/core/src/test/java/com/graphhopper/routing/util/CarFlagEncoderTest.java
+++ b/core/src/test/java/com/graphhopper/routing/util/CarFlagEncoderTest.java
@@ -359,6 +359,32 @@ public void testRailway()
         assertTrue(encoder.acceptWay(way) > 0);
         // calculate speed from estimated_distance and duration
         assertEquals(60, encoder.getSpeed(encoder.handleFerryTags(way, 20, 30, 40)), 1e-1);
+
+        //Test for very short and slow 0.5km/h still realisitic ferry
+        way = new OSMWay(1);
+        way.setTag("route", "ferry");
+        way.setTag("motorcar", "yes");
+        // Provide the duration of 12 minutes in seconds:
+        way.setTag("duration:seconds", Long.toString(12*60));
+        way.setTag("estimated_distance", 100);
+        // accept
+        assertTrue(encoder.acceptWay(way) > 0);
+        // We can't store 0.5km/h, but we expect the lowest possible speed (5km/h)
+        assertEquals(5, encoder.getSpeed(encoder.handleFerryTags(way, 20, 30, 40)), 1e-1);
+
+        //Test for an unrealisitic long duration
+        way = new OSMWay(1);
+        way.setTag("route", "ferry");
+        way.setTag("motorcar", "yes");
+        // Provide the duration of 2 months in seconds:
+        way.setTag("duration:seconds", Long.toString(87900*60));
+        way.setTag("estimated_distance", 100);
+        // accept
+        assertTrue(encoder.acceptWay(way) > 0);
+        // We have ignored the unrealisitc long duration and take the unknown speed
+        assertEquals(20, encoder.getSpeed(encoder.handleFerryTags(way, 20, 30, 40)), 1e-1);
+        
+        
     }
 
     @Test
diff --git a/docs/android/index.md b/docs/android/index.md
index 474c29b75a..9eadbeaacd 100644
--- a/docs/android/index.md
+++ b/docs/android/index.md
@@ -21,8 +21,7 @@ Please read [here](./android-studio-setup.md) for a detailed instruction.
 
 ## None-Android Studio
 
-Download the [Android SDK](http://developer.android.com/sdk/installing/index.html?pkg=tools) and 
-go to the Android SDK Manager and install at least 2.3 (API 9).
+Download the [Android SDK](http://developer.android.com/sdk/installing/index.html?pkg=tools) and go to the Android SDK Manager and install the latest SDK.
 
 ### Maven or NetBeans
  1. Download [Maven Android SDK Deployer](https://github.com/simpligility/maven-android-sdk-deployer) and execute `mvn install -P 5.1` - it uses [Android Maven Plugin](http://simpligility.github.io/android-maven-plugin/) under the hood where you need to set up ANDROID_HOME
@@ -50,11 +49,11 @@ Now that you have a running android app you need to copy somehow the routing and
   
 ## Locus Add-On
 
-The developer of Locus has create a routing plugin for [locus](http://www.locusmap.eu/) the source code for the add-on is available [here](https://bitbucket.org/asamm/locus-add-on-graphhopper) and could be useful for other Map-apps too. The discussion is happing [here](http://forum.locusmap.eu/index.php?topic=4036.0).
+The developer of Locus has create a routing plugin for [locus](http://www.locusmap.eu/) the source code for the add-on is available [here](https://bitbucket.org/asamm/locus-map-add-on-graphhopper) and could be useful for other Map-apps too. The discussion is [here](http://forum.locusmap.eu/index.php?topic=4036.0).
 
 ## Cruiser App
 
-The free offline map app [Cruiser](https://play.google.com/store/apps/details?id=gr.talent.cruiser) is using GraphHopper routing and allows also other things.
+The free offline map app [Cruiser](http://wiki.openstreetmap.org/wiki/Cruiser) is using GraphHopper routing and allows also other things.
 
 ## Limitations
 
diff --git a/docs/core/create-new-flagencoder.md b/docs/core/create-new-flagencoder.md
index be932c422a..2e5a491965 100644
--- a/docs/core/create-new-flagencoder.md
+++ b/docs/core/create-new-flagencoder.md
@@ -11,6 +11,10 @@ the speedFactor means by which factor the speed should be devided before storing
 As a third step you need to tune the speeds for the different road types and surfaces. Maybe
 now it is time to write a first test for your new FlagEncoder.
 
+Use it e.g. just via `graphHopper.setEncodingManager(new EncodingManager(myEncoder));`
+
+## Different forward and backward weights?
+
 If you need to support two different speed values for one street (one edge) you need to create
 a separate EncodedDoubleValue instance (reverseSpeedEncoder) managing the reverse speed, 
 see Bike2WeightFlagEncoder for an example. You'll have to overwrite the following methods:
@@ -22,9 +26,13 @@ see Bike2WeightFlagEncoder for an example. You'll have to overwrite the followin
  * reverseFlags
  * setLowSpeed
 
+## Elevation
+
 To incorporate or precalculate values based on the elevation data you can hook into applyWayTags
 and call edge.fetchWayGeometry(3) or again, see Bike2WeightFlagEncoder.
 
+## Add to the core
+
 If you want to include your FlagEncoder in GraphHopper you have to add the creation in
 EncodingManager.parseEncoderString to let the EncodingManager pick the correct class when faced
-with the string. The convention is that encoder.toString is identical to the string.
\ No newline at end of file
+with the string. The convention is that encoder.toString is identical to the string.
diff --git a/docs/index.md b/docs/index.md
index 7b0f01c7dd..2fe0bfeb7b 100644
--- a/docs/index.md
+++ b/docs/index.md
@@ -1,39 +1,39 @@
 # Users
 
  * [Quickstart](./web/quickstart.md): HowTo for users.
- * [Read Overview](https://graphhopper.com/#overview): Summary of the product Graphhopper. 
- * [Add GraphHopper Maps to your Browser](./web/open-search.md): Instructions how to setup Graphhopper as the standart search enginge in your browser.
- * [GraphHopper on Twitter](https://twitter.com/graphhopper): Find the official Graphhopper account on Twitter.
+ * [Read Overview](https://graphhopper.com/#overview): Summary of the product GraphHopper. 
+ * [Add GraphHopper Maps to your Browser](./web/open-search.md): Instructions how to setup GraphHopper as the standard search enginge in your browser.
+ * [Embed GraphHopper on your website](https://github.com/karussell/graphhopper-embed-form): A small code snippet on how to integrate GraphHopper Maps in your web site like a contact form
 
 # Translators
 
-* [Translations](./core/translations.md): Tutorial how to help with the Graphhopper translations or how to setup a new language.
+* [Translations](./core/translations.md): Tutorial how to help with the GraphHopper translations or how to setup a new language.
 
 
 # Developers
 
- * [Quickstart](./core/quickstart-from-source.md): Introduction for developers. Explains git checkout, IDE setup and commands for setting up a graphhopper server.
- * [Android](./android/index.md): Instructions how to setup the demo project for Graphhopper on Android as base for further development (i.e. with Android Studio).
- * [Windows](./core/windows-setup.md): Documentation about how to get an Graphhopper instance running on windows (cygwin).
- * [Set up and run GraphHopper in Eclipse](./core/eclipse-setup.md): Detailed instructions how to setup Graphhopper in eclipse with maven.
- * [iOS](https://github.com/graphhopper/graphhopper-ios/): Link to the Graphhopper-iOS github repository.
+ * [Quickstart](./core/quickstart-from-source.md): Introduction for developers. Explains git checkout, IDE setup and commands for setting up a GraphHopper server.
+ * [Android](./android/index.md): Instructions how to setup the demo project for GraphHopper on Android as base for further development (i.e. with Android Studio).
+ * [Windows](./core/windows-setup.md): Documentation about how to get an GraphHopper instance running on windows (cygwin).
+ * [Set up and run GraphHopper in Eclipse](./core/eclipse-setup.md): Detailed instructions how to setup GraphHopper in eclipse with maven.
+ * [iOS](https://github.com/graphhopper/graphhopper-ios/): Link to the GraphHopper-iOS github repository.
 
 ## Core
 
  * [Simple routing](./core/routing.md): Tutorial how to integrate GraphHopper in your Java application (or pick any JVM language)
  * [Create custom weighting](./core/weighting.md): Documentation about how to create a custom weighting class to influence the track calculation.
  * [Elevation](./core/elevation.md): Documentation how to enable the usage of elevation for the output of the track.
- * [Technical overview](./core/technical.md): Technical details about how graphhoppers calculations are working.
- * [Slides from 2014](https://graphhopper.com/public/slides/): Small presentations about how graphhopper ist working.
+ * [Technical overview](./core/technical.md): Technical details about how GraphHopper its calculations are working.
+ * [Slides from 2014](https://graphhopper.com/public/slides/): Small presentations about how GraphHopper ist working.
  * [Contraction Hierarchies](./core/ch.md): Details about speeding up the track calculations by [Contraction Hierarchies](http://en.wikipedia.org/wiki/Contraction_hierarchies).
 
 ## Web
 
- * [Routing API](./web/api-doc.md): Documentation of the Web API to communicate with any graphhopper server via http.
+ * [Routing API](./web/api-doc.md): Documentation of the Web API to communicate with any GraphHopper server via http.
  
 ## Advanced Topics
 
- * [Low level API](./core/low-level-api.md): Instructions how to use Graphhopper as a Java library.
+ * [Low level API](./core/low-level-api.md): Instructions how to use GraphHopper as a Java library.
  * [Create new FlagEncoder](./core/create-new-flagencoder.md): Documentation to create new routing profiles to influence which ways to favor and how the track-time is calculated.
  * [LocationIndex](./core/location-index.md): Documentation about how to get the location index for getting i.e. the nearest edge.
  * [World-Wide-Road-Network](./core/world-wide.md): Details about using the whole world wide street data.
diff --git a/web/src/main/webapp/css/style.css b/web/src/main/webapp/css/style.css
index 0d796d4261..fc27376fdb 100644
--- a/web/src/main/webapp/css/style.css
+++ b/web/src/main/webapp/css/style.css
@@ -1,4 +1,4 @@
-body {                
+body {
     color: #000;
     font-family: "Helvetica Neue", Helvetica, Arial, sans-serif;    
     line-height: 1.4;
@@ -7,13 +7,13 @@ body {
     margin: 0;
     min-width: 600px;
 }
-#map {    
+#map {
     /* set size via JS */
     cursor: default;
 }
 
 #input {
-    float: left;                
+    float: left;
     margin-left: 10px; 
     /*padding-right: 15px; */
 }
@@ -28,6 +28,7 @@ body {
 #info a {
     padding-right: 5px;
 }
+
 #input, #instructions {
     width: 280px;
 }
@@ -39,7 +40,7 @@ body {
 .pointResolveFound a {
     background-color: white;
     padding-left: 4px;
-    padding-right: 3px;    
+    padding-right: 3px;
 }
 .pointResolveFound {
     overflow: hidden;
@@ -47,9 +48,9 @@ body {
     font-size: 10px;
     color: blue;
     float: right;
-    cursor: pointer;    
+    cursor: pointer;
     margin-top: -20px;
-    margin-right: 2px;    
+    margin-right: 2px;
 }
 
 .pointResolveError {
@@ -77,7 +78,7 @@ body {
 }
 #moreattribution {
     padding-top: 20px;
-    color: #666666                    
+    color: #666666
 }
 #locationpoints {
     padding-bottom: 10px;
@@ -99,8 +100,15 @@ body {
     float: right;
 }
 #routeDetails {
-    padding: 20px;
+    padding: 15px;
     font-size: 12px;
+    padding-bottom: 4px;
+}
+#versionDetails {
+    font-size: 10px;
+    padding-top: 4px;
+    padding-left: 15px;
+    padding-right: 15px;
 }
 .hidden {
     display: none;
@@ -235,6 +243,10 @@ td img.pic {
     background-image: linear-gradient(to bottom, #9f9f9f, #e7e7e7);    
 }
 
+#more-vehicle-btn {
+    cursor: pointer;
+}
+
 .autocomplete {
     border: 1px solid #999; 
     background: #FFF; 
@@ -280,12 +292,12 @@ td img.pic {
 
 #expandDetails {
     color: gray;
-    font-size:14px; 
+    font-size:11px;
     float: right;
-    font-weight: bold;    
-
     width: 20px;
-    height: 20px;    
+    height: 20px;
+    margin: 0px;
+    padding: 0px;
     background-image: linear-gradient(to bottom, white, #e7e7e7);
 }
 #moreButton {
diff --git a/web/src/main/webapp/img/racingbike.png b/web/src/main/webapp/img/racingbike.png
index 34a6c1f7c0..e666d2c673 100644
Binary files a/web/src/main/webapp/img/racingbike.png and b/web/src/main/webapp/img/racingbike.png differ
diff --git a/web/src/main/webapp/img/racingbike.svg b/web/src/main/webapp/img/racingbike.svg
index 0bfdef843f..354b426510 100644
--- a/web/src/main/webapp/img/racingbike.svg
+++ b/web/src/main/webapp/img/racingbike.svg
@@ -13,8 +13,11 @@
    height="24"
    id="svg4460"
    version="1.1"
-   inkscape:version="0.48.3.1 r9886"
-   sodipodi:docname="bicycle-24.svg">
+   inkscape:version="0.48.4 r9939"
+   sodipodi:docname="racingbike.svg"
+   inkscape:export-filename="/home/peterk/Documents/quell/graphhopper/web/src/main/webapp/img/racingbike.png"
+   inkscape:export-xdpi="110"
+   inkscape:export-ydpi="110">
   <defs
      id="defs4462" />
   <sodipodi:namedview
@@ -24,19 +27,19 @@
      borderopacity="1.0"
      inkscape:pageopacity="0.0"
      inkscape:pageshadow="2"
-     inkscape:zoom="7.9999996"
-     inkscape:cx="-12.109166"
-     inkscape:cy="18.352123"
+     inkscape:zoom="11.313708"
+     inkscape:cx="-17.593196"
+     inkscape:cy="17.160001"
      inkscape:document-units="px"
      inkscape:current-layer="layer1"
      showgrid="false"
      showguides="true"
      inkscape:guide-bbox="true"
-     inkscape:window-width="1220"
-     inkscape:window-height="833"
-     inkscape:window-x="56"
-     inkscape:window-y="20"
-     inkscape:window-maximized="0"
+     inkscape:window-width="1600"
+     inkscape:window-height="1146"
+     inkscape:window-x="0"
+     inkscape:window-y="0"
+     inkscape:window-maximized="1"
      inkscape:snap-global="false">
     <inkscape:grid
        type="xygrid"
@@ -103,7 +106,7 @@
        sodipodi:cy="15.558912"
        sodipodi:rx="4.6403885"
        sodipodi:ry="4.6403885"
-       d="m -6.2755728,15.558912 a 4.6403885,4.6403885 0 1 1 -9.2807772,0 4.6403885,4.6403885 0 1 1 9.2807772,0 z"
+       d="m -6.2755728,15.558912 c 0,2.562816 -2.0775727,4.640389 -4.6403882,4.640389 -2.562816,0 -4.640389,-2.077573 -4.640389,-4.640389 0,-2.562816 2.077573,-4.640388 4.640389,-4.640388 2.5628155,0 4.6403882,2.077572 4.6403882,4.640388 z"
        transform="matrix(0.72957423,0,0,0.72957423,26.265996,1032.3096)" />
     <path
        sodipodi:type="arc"
@@ -113,7 +116,7 @@
        sodipodi:cy="15.558912"
        sodipodi:rx="4.6403885"
        sodipodi:ry="4.6403885"
-       d="m -6.2755728,15.558912 a 4.6403885,4.6403885 0 1 1 -9.2807772,0 4.6403885,4.6403885 0 1 1 9.2807772,0 z"
+       d="m -6.2755728,15.558912 c 0,2.562816 -2.0775727,4.640389 -4.6403882,4.640389 -2.562816,0 -4.640389,-2.077573 -4.640389,-4.640389 0,-2.562816 2.077573,-4.640388 4.640389,-4.640388 2.5628155,0 4.6403882,2.077572 4.6403882,4.640388 z"
        transform="matrix(0.72957423,0,0,0.72957423,14.674252,1032.3098)" />
     <path
        sodipodi:type="arc"
@@ -123,7 +126,7 @@
        sodipodi:cy="15.558912"
        sodipodi:rx="4.6403885"
        sodipodi:ry="4.6403885"
-       d="m -6.2755728,15.558912 a 4.6403885,4.6403885 0 1 1 -9.2807772,0 4.6403885,4.6403885 0 1 1 9.2807772,0 z"
+       d="m -6.2755728,15.558912 c 0,2.562816 -2.0775727,4.640389 -4.6403882,4.640389 -2.562816,0 -4.640389,-2.077573 -4.640389,-4.640389 0,-2.562816 2.077573,-4.640388 4.640389,-4.640388 2.5628155,0 4.6403882,2.077572 4.6403882,4.640388 z"
        transform="matrix(0.26624926,0,0,0.26624926,20.312579,1031.694)" />
     <path
        style="fill:none;stroke:#474747;stroke-width:1.37899995;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
@@ -143,5 +146,23 @@
        id="path3847"
        inkscape:connector-curvature="0"
        sodipodi:nodetypes="cc" />
+    <path
+       style="fill:#4d4d4d;stroke:#474747;stroke-width:0.80000001;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
+       d="m 11.823224,1034.688 -6.8125004,-0.375"
+       id="path2997"
+       inkscape:connector-curvature="0"
+       sodipodi:nodetypes="cc" />
+    <path
+       style="fill:#474747;fill-opacity:1;stroke:#474747;stroke-width:0.80000001;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
+       d="m 6.9116126,1037.9569 -3.6187195,-0.2134"
+       id="path2997-1"
+       inkscape:connector-curvature="0"
+       sodipodi:nodetypes="cc" />
+    <path
+       style="fill:none;stroke:#474747;stroke-width:0.80000001;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:4;stroke-opacity:1;stroke-dasharray:none"
+       d="m 8.8901659,1036.181 -5.6035544,-0.3384"
+       id="path2997-4"
+       inkscape:connector-curvature="0"
+       sodipodi:nodetypes="cc" />
   </g>
 </svg>
diff --git a/web/src/main/webapp/index.html b/web/src/main/webapp/index.html
index 43cadae68e..9bf974aa75 100644
--- a/web/src/main/webapp/index.html
+++ b/web/src/main/webapp/index.html
@@ -28,8 +28,8 @@
         <script type="text/javascript" src="js/jquery.autocomplete.min.js"></script>
         -->
         <script type="text/javascript" src="js/jquery.autocomplete.js"></script>
-        <script type="text/javascript" src="js/ghrequest.js?v=0.4.4"></script>
-        <script type="text/javascript" src="js/main.js?v=0.4.4"></script>
+        <script type="text/javascript" src="js/ghrequest.js?v=0.5.0"></script>
+        <script type="text/javascript" src="js/main.js?v=0.5.0"></script>
         <link rel="stylesheet" type="text/css" href="css/style.css" />
     </head>
     <body>
diff --git a/web/src/main/webapp/js/ghrequest.js b/web/src/main/webapp/js/ghrequest.js
index 0236bc1b19..7bfea1787c 100644
--- a/web/src/main/webapp/js/ghrequest.js
+++ b/web/src/main/webapp/js/ghrequest.js
@@ -315,7 +315,7 @@ GHRequest.prototype.init = function (params) {
 
     // overwrite elevation e.g. important if not supported from feature set
     this.api_params.elevation = false;
-    var featureSet = this.features[params.vehicle];
+    var featureSet = this.features[this.api_params.vehicle];
     if (featureSet && featureSet.elevation) {
         if ('elevation' in params)
             this.api_params.elevation = params.elevation;
diff --git a/web/src/main/webapp/js/main.js b/web/src/main/webapp/js/main.js
index a8847c098f..cf4641a3ad 100644
--- a/web/src/main/webapp/js/main.js
+++ b/web/src/main/webapp/js/main.js
@@ -31,6 +31,7 @@ var routeSegmentPopup = null;
 var elevationControl = null;
 var activeLayer = 'local';
 var i18nIsInitialized;
+var metaVersionInfo = "";
 
 var iconFrom = L.icon({
     iconUrl: './img/marker-icon-green.png',
@@ -105,13 +106,17 @@ $(document).ready(function (e) {
                 bounds.maxLon = tmp[2];
                 bounds.maxLat = tmp[3];
                 var vehiclesDiv = $("#vehicles");
-                function createButton(vehicle) {
+
+                function createButton(vehicle, hide) {
                     var button = $("<button class='vehicle-btn' title='" + tr(vehicle) + "'/>");
+                    if (hide)
+                        button.hide();
+
                     button.attr('id', vehicle);
                     button.html("<img src='img/" + vehicle + ".png' alt='" + tr(vehicle) + "'></img>");
                     button.click(function () {
                         ghRequest.initVehicle(vehicle);
-                        resolveAll()
+                        resolveAll();
                         routeLatLng(ghRequest);
                     });
                     return button;
@@ -120,15 +125,42 @@ $(document).ready(function (e) {
                 if (json.features) {
                     ghRequest.features = json.features;
 
-                    var vehicles = Object.keys(json.features);
+                    // car, foot and bike should come first. mc comes last
+                    var prefer = {"car": 1, "foot": 2, "bike": 3, "motorcycle": 10000};
+                    var showAllVehicles = urlParams.vehicle && (!prefer[urlParams.vehicle] || prefer[urlParams.vehicle] > 3);
+                    var vehicles = getSortedVehicleKeys(json.features, prefer);
                     if (vehicles.length > 0)
                         ghRequest.initVehicle(vehicles[0]);
 
-                    for (var key in json.features) {
-                        vehiclesDiv.append(createButton(key.toLowerCase()));
+                    var hiddenVehicles = [];
+                    for (var i in vehicles) {
+                        var btn = createButton(vehicles[i].toLowerCase(), !showAllVehicles && i > 2);
+                        vehiclesDiv.append(btn);
+
+                        if (i > 2)
+                            hiddenVehicles.push(btn);
+                    }
+
+                    if (!showAllVehicles && vehicles.length > 3) {
+                        var moreBtn = $("<a id='more-vehicle-btn'> ...</a>").click(function () {
+                            moreBtn.hide();
+                            for (var i in hiddenVehicles) {
+                                hiddenVehicles[i].show();
+                            }
+                        });
+                        vehiclesDiv.append(moreBtn);
                     }
                 }
 
+                if (json.import_date)
+                    metaVersionInfo = "<br/>Import date: " + json.import_date;
+                if (json.prepare_date)
+                    metaVersionInfo += "<br/>Prepare date: " + json.prepare_date;
+                if (json.version)
+                    metaVersionInfo += "<br/>GH Version: " + json.version;
+                if (json.build_date)
+                    metaVersionInfo += "<br/>Jar Date: " + json.build_date;
+
                 initMap(urlParams.layer);
 
                 // execute query
@@ -179,20 +211,45 @@ $(document).ready(function (e) {
     checkInput();
 });
 
+function getSortedVehicleKeys(vehicleHashMap, prefer) {
+    var keys = Object.keys(vehicleHashMap);
+
+    keys.sort(function (a, b) {
+        var intValA = prefer[a];
+        var intValB = prefer[b];
+
+        if (!intValA && !intValB)
+            return a.localeCompare(b);
+
+        if (!intValA)
+            intValA = 4;
+        if (!intValB)
+            intValB = 4;
+
+        return intValA - intValB;
+    });
+    return keys;
+}
+
 function initFromParams(params, doQuery) {
     ghRequest.init(params);
-    var fromAndTo = params.from && params.to,
-            routeNow = params.point && params.point.length >= 2 || fromAndTo;
+    var count = 0;
+    var singlePointIndex;
+    for (var key = 0; key < params.point.length; key++) {
+        if (params.point[key] !== "") {
+            count++;
+            singlePointIndex = key;
+        }
+    }
 
+    var routeNow = params.point && count >= 2;
     if (routeNow) {
-        if (fromAndTo)
-            resolveCoords([params.from, params.to], doQuery);
-        else
-            resolveCoords(params.point, doQuery);
-    } else if (params.point && params.point.length === 1) {
-        ghRequest.from = new GHInput(params.point[0]);
-        resolve("from", ghRequest.from);
-        focus(ghRequest.from, 15, true);
+        resolveCoords(params.point, doQuery);
+    } else if (params.point && count === 1) {
+        ghRequest.route.set(params.point[singlePointIndex], singlePointIndex, true);
+        resolveIndex(singlePointIndex).done(function () {
+            focus(ghRequest.route.getIndex(singlePointIndex), 15, singlePointIndex);
+        });
     }
 }
 
@@ -1118,6 +1175,9 @@ function routeLatLng(request, doQuery) {
             var bingLink = $("<a>Bing</a> ");
             bingLink.attr("href", "https://www.bing.com/maps/default.aspx?rtp=adr." + request.from + "~adr." + request.to + addToBing);
             hiddenDiv.append(bingLink);
+            if (metaVersionInfo)
+                hiddenDiv.append(metaVersionInfo);
+
             $("#info").append(hiddenDiv);
         }
     });
@@ -1264,8 +1324,6 @@ function parseUrl(query) {
         var key = vars[i].substring(0, indexPos);
         var value = vars[i].substring(indexPos + 1);
         value = decodeURIComponent(value.replace(/\+/g, ' '));
-        if (value === "")
-            continue;
 
         // force array for heading and point
         if (typeof res[key] === "undefined"
diff --git a/web/src/test/java/com/graphhopper/http/BaseServletTester.java b/web/src/test/java/com/graphhopper/http/BaseServletTester.java
index 924d19d696..70ed72f3f3 100644
--- a/web/src/test/java/com/graphhopper/http/BaseServletTester.java
+++ b/web/src/test/java/com/graphhopper/http/BaseServletTester.java
@@ -126,7 +126,7 @@ protected String queryString( String query, int code ) throws Exception
             resQuery += "&";
         }
         String url = getTestRouteAPIUrl() + "?" + resQuery;
-        Downloader downloader = new Downloader("web integration tester").setTimeout(1000);
+        Downloader downloader = new Downloader("web integration tester").setTimeout(2000);
         HttpURLConnection conn = downloader.createConnection(url);
         conn.connect();
         assertEquals(code, conn.getResponseCode());
diff --git a/web/src/test/webapp/SpecRunner.html b/web/src/test/webapp/SpecRunner.html
index 1deeae61ee..42eb224b0c 100644
--- a/web/src/test/webapp/SpecRunner.html
+++ b/web/src/test/webapp/SpecRunner.html
@@ -8,9 +8,9 @@
         <script type="text/javascript" src="lib/jasmine-1.3.1/jasmine.js"></script>
         <script type="text/javascript" src="lib/jasmine-1.3.1/jasmine-html.js"></script>
 
-        <!-- include source files here... -->
+        <!-- include source files here... -->        
         <script type="text/javascript" src="../../main/webapp/js/leaflet.js"></script>
-        <script type="text/javascript" src="../../main/webapp/js/jquery-1.10.2.min.js"></script>        
+        <script type="text/javascript" src="../../main/webapp/js/jquery-2.1.0.min.js"></script>
         <script type="text/javascript" src="../../main/webapp/js/ghrequest.js"></script>
         <script type="text/javascript" src="../../main/webapp/js/main.js"></script> 
 
@@ -21,7 +21,7 @@
     <body>
 
         <script type="text/javascript">
-            (function() {
+            (function () {
                 var jasmineEnv = jasmine.getEnv();
                 jasmineEnv.updateInterval = 1000;
 
@@ -29,13 +29,13 @@
 
                 jasmineEnv.addReporter(htmlReporter);
 
-                jasmineEnv.specFilter = function(spec) {
+                jasmineEnv.specFilter = function (spec) {
                     return htmlReporter.specFilter(spec);
                 };
 
                 var currentWindowOnload = window.onload;
 
-                window.onload = function() {
+                window.onload = function () {
                     if (currentWindowOnload) {
                         currentWindowOnload();
                     }
@@ -48,5 +48,9 @@
 
             })();
         </script>
+        <!-- accept JS error 'map undefined' as otherwise we need to include lots of unnecessary JS here
+        <div id="map">
+        </div>
+        -->
     </body>
 </html>
diff --git a/web/src/test/webapp/spec/UtilsSpec.js b/web/src/test/webapp/spec/UtilsSpec.js
index e9bd301808..35a1e13542 100644
--- a/web/src/test/webapp/spec/UtilsSpec.js
+++ b/web/src/test/webapp/spec/UtilsSpec.js
@@ -80,51 +80,10 @@ describe("utils", function () {
         // force array for point
         // URLs with one point only should work: https://graphhopper.com/maps/?point=50.413331%2C11.699066
         params = parseUrl("blup?point=49.946505%2C11.571232&point=&");
-        expect(params.point).toEqual(["49.946505,11.571232"]);
+        expect(params.point).toEqual(["49.946505,11.571232", ""]);
 
         params = parseUrl("blup?point=&point=49.946505%2C11.571232");
-        expect(params.point).toEqual(["49.946505,11.571232"]);
-    });
-
-    it("features should work", function () {
-        var ghRequest = new GHRequest("http://test.de?vehicle=car");
-        var params = {};
-        params.elevation = true;
-        ghRequest.features = {"car": {}};
-        ghRequest.init(params);
-        expect(ghRequest.elevation).toEqual(false);
-
-        ghRequest.features = {"car": {elevation: true}};
-        ghRequest.init(params);
-        expect(ghRequest.elevation).toEqual(true);
-
-        var params = {};
-        ghRequest.features = {"car": {elevation: true}};
-        ghRequest.init(params);
-        expect(ghRequest.elevation).toEqual(true);
-
-        var params = {};
-        params.elevation = false;
-        ghRequest.features = {"car": {elevation: true}};
-        ghRequest.init(params);
-        expect(ghRequest.elevation).toEqual(false);
-
-        var params = {};
-        params.elevation = true;
-        ghRequest.features = {"car": {elevation: false}};
-        ghRequest.init(params);
-        expect(ghRequest.elevation).toEqual(false);
-
-        ghRequest = new GHRequest("http://test.de");
-        var params = {point: [[4, 3], [2, 3]], test: "x", test_array: [1, 2]};
-        ghRequest.init(params);
-        
-        // skip point, layer etc
-        expect(ghRequest.api_params.point).toEqual(undefined);
-
-        // include all other parameters
-        expect(ghRequest.api_params.test).toEqual("x");
-        expect(ghRequest.api_params.test_array).toEqual([1, 2]);
+        expect(params.point).toEqual(["", "49.946505,11.571232"]);
     });
 
     it("ghrequest should init correctly from params", function () {
@@ -166,4 +125,53 @@ describe("utils", function () {
         expect(new GHInput("12.44,68.44").lng).toEqual(68.44);
         expect(new GHInput("london").lon).toEqual(undefined);
     });
+
+    it("should sort vehicles and prefer car, foot, bike", function () {
+        // car, foot and bike should come first. mc comes last
+        var prefer = {"car": 1, "foot": 2, "bike": 3, "motorcycle": 10000};
+        var keys = getSortedVehicleKeys({"motorcycle": "blup", "car": "blup", "mtb": "blup", "foot": "blup"}, prefer);
+        expect(keys).toEqual(["car", "foot", "mtb", "motorcycle"]);
+    });
+
+    it("features should work", function () {
+        var ghRequest = new GHRequest("http://test.de?vehicle=car");
+        var params = {};
+        params.elevation = true;
+        ghRequest.features = {"car": {}};
+        ghRequest.init(params);
+        expect(ghRequest.api_params.elevation).toEqual(false);
+
+        // overwrite
+        ghRequest.features = {"car": {elevation: true}};
+        ghRequest.init(params);
+        expect(ghRequest.api_params.elevation).toEqual(true);
+
+        var params = {};
+        ghRequest.features = {"car": {elevation: true}};
+        ghRequest.init(params);
+        expect(ghRequest.api_params.elevation).toEqual(true);
+
+        var params = {};
+        params.elevation = false;
+        ghRequest.features = {"car": {elevation: true}};
+        ghRequest.init(params);
+        expect(ghRequest.api_params.elevation).toEqual(false);
+
+        var params = {};
+        params.elevation = true;
+        ghRequest.features = {"car": {elevation: false}};
+        ghRequest.init(params);
+        expect(ghRequest.api_params.elevation).toEqual(false);
+
+        ghRequest = new GHRequest("http://test.de");
+        var params = {point: [[4, 3], [2, 3]], test: "x", test_array: [1, 2]};
+        ghRequest.init(params);
+
+        // skip point, layer etc
+        expect(ghRequest.api_params.point).toEqual(undefined);
+
+        // include all other parameters
+        expect(ghRequest.api_params.test).toEqual("x");
+        expect(ghRequest.api_params.test_array).toEqual([1, 2]);
+    });
 });
\ No newline at end of file
