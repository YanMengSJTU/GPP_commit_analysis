diff --git a/core/src/main/java/com/samsix/graphhopper/NoHighwayFlagEncoder.java b/core/src/main/java/com/samsix/graphhopper/NoHighwayFlagEncoder.java
new file mode 100644
index 0000000000..90f0971e08
--- /dev/null
+++ b/core/src/main/java/com/samsix/graphhopper/NoHighwayFlagEncoder.java
@@ -0,0 +1,43 @@
+package com.samsix.graphhopper;
+
+import com.graphhopper.reader.OSMWay;
+import com.graphhopper.routing.util.CarFlagEncoder;
+import com.graphhopper.routing.util.FootFlagEncoder;
+
+public class NoHighwayFlagEncoder
+    extends
+        CarFlagEncoder
+{
+    public NoHighwayFlagEncoder()
+    {
+        super();
+        
+        restrictedValues.remove("private");
+    }
+    
+    
+    @Override
+    public long acceptWay( OSMWay way )
+    {
+        //
+        // Not allowing highway travel for feeder patrols
+        // so that the patrol drivers are not sent on the
+        // highway to inspect the network.
+        //
+        String highwayValue = way.getTag("highway");
+
+        if ("motorway".equals( highwayValue )
+            || "motorway_link".equals( highwayValue ) )
+        {
+            return 0;
+        }
+        
+        return super.acceptWay( way );
+    }
+
+    @Override
+    public String toString()
+    {
+        return "nohighway";
+    }
+}
diff --git a/core/src/main/java/com/samsix/graphhopper/S6CarFlagEncoder.java b/core/src/main/java/com/samsix/graphhopper/S6CarFlagEncoder.java
index 0e01958314..1ba17cee3f 100644
--- a/core/src/main/java/com/samsix/graphhopper/S6CarFlagEncoder.java
+++ b/core/src/main/java/com/samsix/graphhopper/S6CarFlagEncoder.java
@@ -12,30 +12,10 @@ public S6CarFlagEncoder()
     {
         super();
         
-        restrictedValues.remove("private");
-    }
-    
-    
-    @Override
-    public long acceptWay( OSMWay way )
-    {
-        String highwayValue = way.getTag("highway");
-
         //
-        // Not allowing highway travel. This was done for
-        // the FeederPatrol, but I think is OK for all of our
-        // needs. Anyway, putting this here for now and we may have
-        // to change this later. Maybe we have to keep two different
-        // datasets? One that allows highways and one that doesn't?
-        // I wish we could set this stuff
-        // at request time.
+        // Allow our service vehicles to take private roads
+        // to get to the equipment they need to get to.
         //
-        if ("motorway".equals( highwayValue )
-            || "motorway_link".equals( highwayValue ) )
-        {
-            return 0;
-        }
-        
-        return super.acceptWay( way );
+        restrictedValues.remove("private");
     }
 }
diff --git a/core/src/main/java/com/samsix/graphhopper/S6FootFlagEncoder.java b/core/src/main/java/com/samsix/graphhopper/S6FootFlagEncoder.java
index 1085b554f6..c9c97b1f47 100644
--- a/core/src/main/java/com/samsix/graphhopper/S6FootFlagEncoder.java
+++ b/core/src/main/java/com/samsix/graphhopper/S6FootFlagEncoder.java
@@ -6,10 +6,26 @@
     extends
         FootFlagEncoder
 {
+    /**
+     * We could make this a specific GasFinderFlagEncoder
+     * due to the private property crossing. BUT I want
+     * to have a general "FOOT" flag encoder as well since
+     * our RouteFinder has a TripMode=WALKING that I need
+     * a FootFlagEncoder for. So, we might as well just use
+     * this one. If we *ever* need to have a walking route
+     * (for whatever reason) that shouldn't cross private
+     * territory then we can change it then. We would have
+     * to refactor our RouteFinder to either have some extra
+     * parameters or add different TripModes.
+     */
     public S6FootFlagEncoder()
     {
         super();
         
+        //
+        // For running gas mains we don't want to avoid
+        // crossing private property.
+        //
         restrictedValues.remove("private");
     }
 }
diff --git a/core/src/main/java/com/samsix/graphhopper/S6GHUtils.java b/core/src/main/java/com/samsix/graphhopper/S6GHUtils.java
new file mode 100644
index 0000000000..23e3ba928b
--- /dev/null
+++ b/core/src/main/java/com/samsix/graphhopper/S6GHUtils.java
@@ -0,0 +1,29 @@
+package com.samsix.graphhopper;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import com.graphhopper.routing.util.BikeFlagEncoder;
+import com.graphhopper.routing.util.EncodingManager;
+import com.graphhopper.routing.util.FlagEncoder;
+
+public class S6GHUtils
+{
+    private S6GHUtils()
+    {
+        // prevent instantiation
+    }
+    
+    
+    public static EncodingManager getS6EncodingManager()
+    {
+        List<FlagEncoder> encoders = new ArrayList<FlagEncoder>();
+        encoders.add(new S6FootFlagEncoder());
+        encoders.add(new NoHighwayFlagEncoder());
+        encoders.add(new S6CarFlagEncoder());
+        encoders.add(new TruckFlagEncoder());
+        encoders.add(new BikeFlagEncoder());
+        
+        return new EncodingManager(encoders, 8);
+    }
+}
diff --git a/core/src/main/java/com/samsix/graphhopper/S6GraphHopper.java b/core/src/main/java/com/samsix/graphhopper/S6GraphHopper.java
index 74062c21be..cd4bdfee0e 100644
--- a/core/src/main/java/com/samsix/graphhopper/S6GraphHopper.java
+++ b/core/src/main/java/com/samsix/graphhopper/S6GraphHopper.java
@@ -15,6 +15,14 @@
     @Override
     public Weighting createWeighting( WeightingMap wMap, FlagEncoder encoder )
     {
+        Weighting defaultWeighting = super.createWeighting(wMap, encoder);
+        
+        //
+        // This was created to avoid doing U-Turns if possible.
+        // We specify the edge we just drove on as an edge to avoid if possible.
+        // We give it a very large, but not infinite number. If it is the only
+        // possibility then it will take it thus indicating a valid u-turn.
+        //
         String avoid = wMap.get("avoidEdge", null);
         
         Set<Integer> avoidEdges = null;
@@ -24,18 +32,20 @@ public Weighting createWeighting( WeightingMap wMap, FlagEncoder encoder )
             for (int ii=0; ii < edges.length; ii++) {
                 avoidEdges.add(Integer.parseInt(edges[ii].trim()));
             }
+            return new AvoidEdgeWeighting(defaultWeighting, avoidEdges);
         }
-        return new NoUTurnWeighting(super.createWeighting(wMap, encoder), avoidEdges);
+        
+        return defaultWeighting;
     }
     
     
-    public static class NoUTurnWeighting
+    public static class AvoidEdgeWeighting
         implements Weighting
     {
         public Weighting weighting;
         private Set<Integer> avoidEdges;
        
-        public NoUTurnWeighting(final Weighting weighting,
+        public AvoidEdgeWeighting(final Weighting weighting,
                                 final Set<Integer> avoidEdges)
         {
             this.weighting = weighting;
diff --git a/core/src/main/java/com/samsix/graphhopper/TruckFlagEncoder.java b/core/src/main/java/com/samsix/graphhopper/TruckFlagEncoder.java
new file mode 100644
index 0000000000..73459c6025
--- /dev/null
+++ b/core/src/main/java/com/samsix/graphhopper/TruckFlagEncoder.java
@@ -0,0 +1,46 @@
+package com.samsix.graphhopper;
+
+import com.graphhopper.reader.OSMWay;
+import com.graphhopper.routing.util.CarFlagEncoder;
+
+public class TruckFlagEncoder
+    extends
+        CarFlagEncoder
+{
+    public TruckFlagEncoder()
+    {
+        super();
+        
+        //
+        // Allow our service vehicles to take private roads
+        // to get to the equipment they need to get to.
+        //
+        restrictedValues.remove("private");
+    }
+    
+    
+    @Override
+    public long acceptWay( OSMWay way )
+    {
+        String hgv = way.getTag("hgv");
+    
+        //
+        // hgv=no seems to be the way to say that trucks can't go here.
+        // hgv = Heavy Goods Vehicle
+        // Other values for hgv I have seen are...
+        //     "local", "designated", "destination"
+        //
+        if ("no".equalsIgnoreCase(hgv))
+        {
+            return 0;
+        }
+        
+        return super.acceptWay( way );
+    }
+
+    @Override
+    public String toString()
+    {
+        return "truck";
+    }
+}
diff --git a/core/src/main/java/com/samsix/graphhopper/tools/S6Import.java b/core/src/main/java/com/samsix/graphhopper/tools/S6Import.java
new file mode 100644
index 0000000000..fb894a8c35
--- /dev/null
+++ b/core/src/main/java/com/samsix/graphhopper/tools/S6Import.java
@@ -0,0 +1,31 @@
+package com.samsix.graphhopper.tools;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import com.graphhopper.GraphHopper;
+import com.graphhopper.routing.util.BikeFlagEncoder;
+import com.graphhopper.routing.util.CarFlagEncoder;
+import com.graphhopper.routing.util.EncodingManager;
+import com.graphhopper.routing.util.FlagEncoder;
+import com.graphhopper.util.CmdArgs;
+import com.samsix.graphhopper.NoHighwayFlagEncoder;
+import com.samsix.graphhopper.S6CarFlagEncoder;
+import com.samsix.graphhopper.S6FootFlagEncoder;
+import com.samsix.graphhopper.S6GHUtils;
+import com.samsix.graphhopper.S6GraphHopper;
+import com.samsix.graphhopper.TruckFlagEncoder;
+
+public class S6Import
+{
+    public static void main( String[] strs ) throws Exception
+    {
+        CmdArgs args = CmdArgs.read(strs);
+        GraphHopper hopper = new S6GraphHopper().init(args);
+
+        hopper.setEncodingManager(S6GHUtils.getS6EncodingManager());
+        
+        hopper.importOrLoad();
+        hopper.close();
+    }
+}
diff --git a/graphhopper.sh b/graphhopper.sh
index df8e86d625..3aba902a0d 100755
--- a/graphhopper.sh
+++ b/graphhopper.sh
@@ -1,6 +1,6 @@
 #!/bin/bash
 
-GH_CLASS=com.graphhopper.tools.Import
+GH_CLASS=com.samsix.graphhopper.tools.S6Import
 GH_HOME=$(dirname "$0")
 JAVA=$JAVA_HOME/bin/java
 if [ "x$JAVA_HOME" = "x" ]; then
@@ -189,7 +189,7 @@ else
 fi
 
 if [ "x$JAVA_OPTS" = "x" ]; then
-  JAVA_OPTS="-Xmx3000m -Xms2000m -server"
+  JAVA_OPTS="-Xmx8000m -Xms2000m -server"
 fi
 
 
diff --git a/s6config.properties b/s6config.properties
index 7cc0b18509..c69bed146c 100644
--- a/s6config.properties
+++ b/s6config.properties
@@ -19,10 +19,11 @@ prepare.chWeighting=no
 # increase from 1 to 5, to reduce way geometry e.g. for android
 osmreader.wayPointMaxDistance=1
 
-# possible options: CAR,FOOT,BIKE (comma separated)
-#osmreader.acceptWay=CAR
-#osmreader.acceptWay=CAR,FOOT
-osmreader.acceptWay=FOOT:com.samsix.graphhopper.S6FootFlagEncoder,CAR:com.samsix.graphhopper.S6CarFlagEncoder
+# Because we have so many FlagEncoders we need to use 8 instead of the default 4
+# But we are actually setting this in our special S6Import class
+#graph.bytesForFlags=8
+
+#graph.flagEncoders=FOOT:com.samsix.graphhopper.S6FootFlagEncoder,CAR:com.samsix.graphhopper.S6CarFlagEncoder
 
 # if you want to reduce storage size and you don't need instructions for a path uncomment this
 # osmreader.instructions=false
diff --git a/us-download.sh b/us-download.sh
new file mode 100755
index 0000000000..f2a45cb7a0
--- /dev/null
+++ b/us-download.sh
@@ -0,0 +1,7 @@
+wget http://download.geofabrik.de/north-america/us-northeast-latest.osm.pbf
+wget http://download.geofabrik.de/north-america/us-midwest-latest.osm.pbf
+wget http://download.geofabrik.de/north-america/us-south-latest.osm.pbf
+wget http://download.geofabrik.de/north-america/us-west-latest.osm.pbf
+wget http://download.geofabrik.de/north-america-latest.osm.pbf
+
+
diff --git a/import.sh b/us-import.sh
similarity index 65%
rename from import.sh
rename to us-import.sh
index 5c87f2e0f6..69cebe1f7f 100755
--- a/import.sh
+++ b/us-import.sh
@@ -1,5 +1,10 @@
 #!/bin/bash
 
+rm -rf $1/us-midwest-latest.osm.tgz $1/us-midwest-latest.osm-gh
+rm -rf $1/us-west-latest.osm.tgz $1/us-west-latest.osm-gh
+rm -rf $1/us-northeast-latest.osm.tgz $1/us-northeast-latest.osm-gh
+rm -rf $1/us-south-latest.osm.tgz $1/us-south-latest.osm-gh
+
 ./graphhopper.sh import $1/us-midwest-latest.osm.pbf
 ./graphhopper.sh import $1/us-west-latest.osm.pbf
 ./graphhopper.sh import $1/us-northeast-latest.osm.pbf
