diff --git a/core/src/main/java/com/graphhopper/reader/RoutingElement.java b/core/src/main/java/com/graphhopper/reader/RoutingElement.java
index 7977716d31..a0d3c2b208 100644
--- a/core/src/main/java/com/graphhopper/reader/RoutingElement.java
+++ b/core/src/main/java/com/graphhopper/reader/RoutingElement.java
@@ -7,7 +7,7 @@
 
     void setTag(String name, Object value);
 
-    String getTag(String string);
+    String getTag(String name);
 
     <T> T getTag(String key, T defaultValue);
 
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/AbstractOsReader.java b/core/src/main/java/com/graphhopper/reader/osgb/AbstractOsReader.java
index 03eadc73a4..28e55a3153 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/AbstractOsReader.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/AbstractOsReader.java
@@ -30,6 +30,7 @@
 
 
     private static final Logger logger = LoggerFactory.getLogger(AbstractOsReader.class.getName());
+    protected static final String WE_HAVE_EVALUATED_WAY_NODES_FORMAT = "We have evaluated {} way nodes.";
 
     public AbstractOsReader(GraphStorage storage) {
         this.graphStorage = storage;
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnElement.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnElement.java
index dfdff8b25c..24b7b7fab8 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnElement.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnElement.java
@@ -1,14 +1,14 @@
 /*
  *  Licensed to GraphHopper and Peter Karich under one or more contributor
- *  license agreements. See the NOTICE file distributed with this work for 
+ *  license agreements. See the NOTICE file distributed with this work for
  *  additional information regarding copyright ownership.
- * 
- *  GraphHopper licenses this file to you under the Apache License, 
- *  Version 2.0 (the "License"); you may not use this file except in 
+ *
+ *  GraphHopper licenses this file to you under the Apache License,
+ *  Version 2.0 (the "License"); you may not use this file except in
  *  compliance with the License. You may obtain a copy of the License at
- * 
+ *
  *       http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  *  Unless required by applicable law or agreed to in writing, software
  *  distributed under the License is distributed on an "AS IS" BASIS,
  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -38,7 +38,7 @@
 /**
  * Base class for all OSM objects
  * <p/>
- * 
+ *
  * @author Nop
  * @author Peter
  */
@@ -178,7 +178,7 @@ protected int handleRightOfUse(XMLStreamReader parser) throws XMLStreamException
     {
         return parser.next();
     }
-    
+
     protected int handlePotentialHazard(XMLStreamReader parser) throws XMLStreamException
     {
         return parser.next();
@@ -215,7 +215,7 @@ private String getTypeBasedName(String roadType)
 	    return "Route";
 	return roadType;
     }
-    
+
     private String getOsmMappedTypeName(String roadType)
     {
     	String typeName = roadType;
@@ -348,7 +348,8 @@ public boolean hasTags()
     @Override
     public String getTag(String name)
     {
-	return (String) properties.get(name);
+        Object object = properties.get(name);
+        return (null != object) ? (String) object.toString() : null;
     }
 
     @Override
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnReader.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnReader.java
index 2fe0c95e8e..e499f82f4c 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnReader.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnReader.java
@@ -18,6 +18,9 @@
 
 import javax.xml.stream.XMLStreamException;
 
+import org.opengis.geometry.MismatchedDimensionException;
+import org.opengis.referencing.FactoryException;
+import org.opengis.referencing.operation.TransformException;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -303,6 +306,7 @@ protected void writeOsm2Graph(File osmFile) {
                         logger.info(nf(counter) + ", now parsing ways");
                         wayStart = counter;
                     }
+                    prepareWaysNodes(dpnWay, getNodeMap());
                     processWay(dpnWay);
                     break;
                 case OSMElement.RELATION:
@@ -334,6 +338,16 @@ protected void writeOsm2Graph(File osmFile) {
                     + counter + " lines and " + locations + " locations");
     }
 
+    private List<OsDpnNode> prepareWaysNodes(RoutingElement item, TObjectIntMap<String> nodeFilter) throws MismatchedDimensionException, FactoryException, TransformException {
+        List<OsDpnNode> evaluateWayNodes = ((OsDpnWay) item).evaluateWayNodes(null);
+        for (OsDpnNode osdpnNode : evaluateWayNodes) {
+            nodeFilter.put(osdpnNode.getId(), PILLAR_NODE);
+            processNode(osdpnNode);
+        }
+        logger.info(WE_HAVE_EVALUATED_WAY_NODES_FORMAT, evaluateWayNodes.size());
+        return evaluateWayNodes;
+    }
+
     /**
      * Process properties, encode flags and create edges for the way.
      */
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnWay.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnWay.java
index 786222f5b9..67e124ef33 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnWay.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnWay.java
@@ -18,9 +18,11 @@
 package com.graphhopper.reader.osgb.dpn;
 
 import com.graphhopper.reader.Way;
+
 import gnu.trove.map.TDoubleLongMap;
 import gnu.trove.map.TDoubleObjectMap;
 import gnu.trove.map.TLongObjectMap;
+
 import org.opengis.geometry.MismatchedDimensionException;
 import org.opengis.referencing.FactoryException;
 import org.opengis.referencing.operation.TransformException;
@@ -29,6 +31,7 @@
 
 import javax.xml.stream.XMLStreamException;
 import javax.xml.stream.XMLStreamReader;
+
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
@@ -40,7 +43,6 @@
  * @author Nop
  */
 public class OsDpnWay extends OsDpnElement implements Way {
-    private static final long WAY_NODE_PREFIX_MOD = 100000000000000000L;
     protected final List<String> nodes = new ArrayList<String>(5);
     private String endNode;
     protected String startCoord;
@@ -69,7 +71,7 @@ public static OsDpnWay create(String idStr, XMLStreamReader parser)
         logger.info(way.toString());
         return way;
     }
-
+    
     public OsDpnWay(String id)
     {
         super(id, WAY);
@@ -244,10 +246,10 @@ protected void addDirectedLink(String nodeId, String orientation) {
         for (int i = 0; i < wayCoords.length; i++) {
             String wayCoord = wayCoords[i];
 
-            long idPrefix = (i + 1) * WAY_NODE_PREFIX_MOD;
+            long idPrefix = (i + 1);
             String id = idPrefix + getId();
             OsDpnNode wayNode = new OsDpnNode(id);
-            wayNode.parseCoords(wayCoord);
+            wayNode.parseCoordinateString(wayCoord, ",");
 
             logger.info("Node " + getId() + " coords: " + wayCoord + " tags: ");
             for (String tagKey : wayNode.getTags().keySet()) {
@@ -287,5 +289,10 @@ protected void parseCoordinateString(String elementText,
         throw new UnsupportedOperationException();
 
     }
+    
+    @Override
+    public String toString() {
+    	return super.toString() + " id:" + getId() + " start:" + nodes.get(0) + " end:" + nodes.get(nodes.size()-1) + " NAME:" + getTag("name");
+    }
 
 }
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnReader.java b/core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnReader.java
index 6370babff7..cc44f6e921 100755
--- a/core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnReader.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnReader.java
@@ -137,7 +137,6 @@
     private static final String OS_ITN_READER_PRE_PROCESS_FORMAT = "OsItnReader.preProcess( {} )";
     private static final String WAY_ADDS_EDGES_FORMAT = "Way {} adds edges: {}";
     private static final String WAY_ADDS_BARRIER_EDGES_FORMAT = "Way {} adds barrier edges: {}";
-    private static final String WE_HAVE_EVALUATED_WAY_NODES_FORMAT = "We have evaluated {} way nodes.";
     private static final String WAY_FORMAT = "WAY: {} : {}";
     private static final String NODEITEMID_FORMAT = "NODEITEMID: {}";
     private static final String PROCESS_FORMAT = "PROCESS: {}";
@@ -1878,20 +1877,20 @@ private TLongLongHashMap getOsmWayIdToRouteWeightMap() {
      * Specify the type of the path calculation (car, bike, ...).
      */
     @Override
-    public OsItnReader setEncodingManager(EncodingManager acceptWay) {
+    public AbstractOsReader<Long> setEncodingManager(EncodingManager acceptWay) {
         this.encodingManager = acceptWay;
         return this;
     }
 
     @Override
-    public OsItnReader setWayPointMaxDistance(double maxDist) {
+    public AbstractOsReader<Long> setWayPointMaxDistance(double maxDist) {
         doSimplify = maxDist > 0;
         simplifyAlgo.setMaxDistance(maxDist);
         return this;
     }
 
     @Override
-    public OsItnReader setWorkerThreads(int numOfWorkers) {
+    public AbstractOsReader<Long> setWorkerThreads(int numOfWorkers) {
         this.workerThreads = numOfWorkers;
         return this;
     }
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/OsDpnReaderTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/OsDpnReaderTest.java
index 8dc699350d..66ffd4c193 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/OsDpnReaderTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/OsDpnReaderTest.java
@@ -8,6 +8,7 @@
 import java.io.File;
 import java.io.IOException;
 
+import org.junit.Before;
 import org.junit.Test;
 
 import com.graphhopper.routing.util.DefaultEdgeFilter;
@@ -19,12 +20,18 @@
 public class OsDpnReaderTest extends AbstractOsDpnReaderTest
 {
 
+    private GraphHopperStorage graph;
+
+    @Before
+    public void setUp() throws IOException {
+        graph = readGraph();
+        GHUtility.printInfo(graph, 0, 30, EdgeFilter.ALL_EDGES);
+        configureExplorer(graph);
+    }
+
     @Test
     public void testReadDpnSampleLayout() throws IOException
     {
-	final GraphHopperStorage graph = readGraph();
-	GHUtility.printInfo(graph, 0, 30, EdgeFilter.ALL_EDGES);
-	configureExplorer(graph);
 
 	assertEquals(5, graph.getNodes());
 
@@ -67,11 +74,10 @@ public void testReadDpnSampleLayout() throws IOException
 	assertFalse(iter.next());
     }
 
+
     @Test
     public void testReadDpnSampleName() throws IOException
     {
-	final GraphHopperStorage graph = readGraph();
-	configureExplorer(graph);
 
 	EdgeIterator iter = footOutExplorer.setBaseNode(0);
 	assertTrue(iter.next());
@@ -84,8 +90,6 @@ public void testReadDpnSampleName() throws IOException
     @Test
     public void testReadDpnSampleNameWithAlternate() throws IOException
     {
-	final GraphHopperStorage graph = readGraph();
-	configureExplorer(graph);
 
 	EdgeIterator iter = footOutExplorer.setBaseNode(0);
 	assertTrue(iter.next());
@@ -98,8 +102,6 @@ public void testReadDpnSampleNameWithAlternate() throws IOException
     @Test
     public void testReadDpnSampleNameDefaultToTrackType() throws IOException
     {
-	final GraphHopperStorage graph = readGraph();
-	configureExplorer(graph);
 
 	EdgeIterator iter = footOutExplorer.setBaseNode(0);
 	assertTrue(iter.next());
@@ -110,9 +112,6 @@ public void testReadDpnSampleNameDefaultToTrackType() throws IOException
     public void testReadDpnSampleNameDefaultToTrackFriendlyNameWhenNoPhysicalManifestation()
 		    throws IOException
     {
-	final GraphHopperStorage graph = readGraph();
-	configureExplorer(graph);
-
 	EdgeIterator iter = footOutExplorer.setBaseNode(0);
 	assertTrue(iter.next());
 	assertTrue(iter.next());
@@ -120,6 +119,25 @@ public void testReadDpnSampleNameDefaultToTrackFriendlyNameWhenNoPhysicalManifes
 			iter.getName());
     }
 
+    @Test
+    public void testFetchWayGeometry()
+    {
+        EdgeIterator iter = footOutExplorer.setBaseNode(0);
+        iter.next();
+//        assertEquals("", 1, iter.fetchWayGeometry(0).getSize());
+        assertFalse(0 == iter.fetchWayGeometry(0).getSize());
+        iter.next();
+//        assertEquals("", 1, iter.fetchWayGeometry(0).getSize());
+        assertFalse(0 == iter.fetchWayGeometry(0).getSize());
+        iter.next();
+//        assertEquals("", 5, iter.fetchWayGeometry(0).getSize());
+        assertFalse(0 == iter.fetchWayGeometry(0).getSize());
+        iter.next();
+//        assertEquals("", 8, iter.fetchWayGeometry(0).getSize());
+        assertFalse(0 == iter.fetchWayGeometry(0).getSize());
+
+    }
+
     private void configureExplorer(final GraphHopperStorage graph)
     {
     	footOutExplorer = graph.createEdgeExplorer(new DefaultEdgeFilter(footEncoder, true, true));
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/itn/OsItnReaderTest.java b/core/src/test/java/com/graphhopper/reader/osgb/itn/OsItnReaderTest.java
index 6f7f281370..543db6d737 100755
--- a/core/src/test/java/com/graphhopper/reader/osgb/itn/OsItnReaderTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/itn/OsItnReaderTest.java
@@ -35,6 +35,7 @@
 
 import com.graphhopper.GraphHopper;
 import com.graphhopper.reader.osgb.AbstractOsItnReaderTest;
+import com.graphhopper.reader.osgb.AbstractOsReader;
 import com.graphhopper.routing.util.DefaultEdgeFilter;
 import com.graphhopper.routing.util.EdgeFilter;
 import com.graphhopper.routing.util.EncodingManager;
@@ -290,7 +291,7 @@ public void testReadSample() throws IOException {
         final boolean is3D = false;
         final GraphHopperStorage graph = configureStorage(turnRestrictionsImport, is3D);
 
-        final OsItnReader osItnReader = new OsItnReader(graph);
+        final AbstractOsReader<Long> osItnReader = new OsItnReader(graph);
         final File file = new File("./src/test/resources/com/graphhopper/reader/os-itn-sample.xml");
         osItnReader.setOSMFile(file);
         osItnReader.setEncodingManager(new EncodingManager("CAR,FOOT"));
