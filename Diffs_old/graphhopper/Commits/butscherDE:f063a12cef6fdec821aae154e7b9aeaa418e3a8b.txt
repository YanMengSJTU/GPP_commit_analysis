diff --git a/core/src/main/java/com/graphhopper/routing/template/PolygonRoutingTemplate.java b/core/src/main/java/com/graphhopper/routing/template/PolygonRoutingTemplate.java
index dd8bf55147..1e16821198 100644
--- a/core/src/main/java/com/graphhopper/routing/template/PolygonRoutingTemplate.java
+++ b/core/src/main/java/com/graphhopper/routing/template/PolygonRoutingTemplate.java
@@ -91,10 +91,10 @@ private void prepareRouteCandidateList() {
 
     private void pruneLowerQuantileInROIcandidateRoutes() {
         // Assumes that routeCandidates was already sorted descending to roi distance after pruning dominated route candidates
-        int startIndex = (int) (this.routeCandidates.candidates.size() * 0.75) + 1;
+        int startIndex = (int) (this.routeCandidates.getCandidates().size() * 0.75) + 1;
 
-        for (int i = startIndex; i < this.routeCandidates.candidates.size(); i++) {
-            this.routeCandidates.candidates.remove(i);
+        for (int i = startIndex; i < this.routeCandidates.getCandidates().size(); i++) {
+            this.routeCandidates.getCandidates().remove(i);
         }
     }
 
diff --git a/core/src/main/java/com/graphhopper/routing/template/PolygonRoutingUtil/RouteCandidateList.java b/core/src/main/java/com/graphhopper/routing/template/PolygonRoutingUtil/RouteCandidateList.java
index e09ebd7e7b..267b70ddcb 100644
--- a/core/src/main/java/com/graphhopper/routing/template/PolygonRoutingUtil/RouteCandidateList.java
+++ b/core/src/main/java/com/graphhopper/routing/template/PolygonRoutingUtil/RouteCandidateList.java
@@ -10,18 +10,18 @@
 import java.util.List;
 
 public class RouteCandidateList <T extends RouteCandidatePolygon> {
-    public List<T> candidates;
+    private List<T> candidates;
 
     public RouteCandidateList() {
-        this.candidates = new ArrayList<T>();
+        this.setCandidates(new ArrayList<T>());
     }
 
     public void sortByGainAscending() {
-        Collections.sort(this.candidates);
+        Collections.sort(this.getCandidates());
     }
 
     private void sortRouteCandidatesToDistanceInROIDescending() {
-        Collections.sort(this.candidates, new Comparator<RouteCandidatePolygon>() {
+        Collections.sort(this.getCandidates(), new Comparator<RouteCandidatePolygon>() {
             @Override
             public int compare(RouteCandidatePolygon rc1, RouteCandidatePolygon rc2) {
                 double distanceDifference = rc1.getDistanceInROI() - rc2.getDistanceInROI();
@@ -42,10 +42,10 @@ public int compare(RouteCandidatePolygon rc1, RouteCandidatePolygon rc2) {
     public List<Path> getFirstAsPathList(final int nOfFirstElements, final QueryGraph queryGraph, final AlgorithmOptions algorithmOptions) {
         final List<Path> paths = new ArrayList<>(nOfFirstElements);
 
-        final int endOfCandidates = candidates.size() - 1;
+        final int endOfCandidates = getCandidates().size() - 1;
         final int endOfIteration = endOfCandidates - nOfFirstElements;
         for (int i = endOfCandidates; i > endOfIteration; i--) {
-            paths.add(this.candidates.get(i).getMergedPath(queryGraph, algorithmOptions));
+            paths.add(this.getCandidates().get(i).getMergedPath(queryGraph, algorithmOptions));
         }
 
         return paths;
@@ -57,7 +57,7 @@ public void pruneDominatedCandidateRoutes() {
 
         int currentPruningCandidateIndex = 1;
         while (indexInCandidateBounds(currentPruningCandidateIndex)) {
-            RouteCandidatePolygon currentPruningCandidate = this.candidates.get(currentPruningCandidateIndex);
+            RouteCandidatePolygon currentPruningCandidate = this.getCandidates().get(currentPruningCandidateIndex);
 
             boolean foundDominatingPath = isThisCandidateDominatedByAny(currentPruningCandidateIndex, currentPruningCandidate);
 
@@ -69,7 +69,7 @@ private boolean isThisCandidateDominatedByAny(int currentPruningCandidateIndex,
         boolean foundDominatingPath = false;
         for (int i = currentPruningCandidateIndex - 1; i >= 0 && !foundDominatingPath; i--) {
             // routeCandidates must be sorted by now. Therefore dominators can only bbe found on lower indices than the current pruning candidate.
-            RouteCandidatePolygon possiblyBetterRouteCandidate = this.candidates.get(i);
+            RouteCandidatePolygon possiblyBetterRouteCandidate = this.getCandidates().get(i);
 
             if (isPruningCandidateDominated(currentPruningCandidate, possiblyBetterRouteCandidate)) {
                 foundDominatingPath = true;
@@ -80,7 +80,7 @@ private boolean isThisCandidateDominatedByAny(int currentPruningCandidateIndex,
 
     private int pruneOrUpdateIndex(int currentPruningCandidateIndex, boolean foundDominatingPath) {
         if (foundDominatingPath) {
-            this.candidates.remove(currentPruningCandidateIndex);
+            this.getCandidates().remove(currentPruningCandidateIndex);
         } else {
             currentPruningCandidateIndex++;
         }
@@ -93,6 +93,14 @@ private boolean isPruningCandidateDominated(RouteCandidatePolygon currentPruning
     }
 
     private boolean indexInCandidateBounds(int currentPruningCandidateIndex) {
-        return currentPruningCandidateIndex < this.candidates.size();
+        return currentPruningCandidateIndex < this.getCandidates().size();
+    }
+
+    public List<T> getCandidates() {
+        return candidates;
+    }
+
+    public void setCandidates(List<T> candidates) {
+        this.candidates = candidates;
     }
 }
diff --git a/core/src/main/java/com/graphhopper/routing/template/PolygonThroughRoutingTemplate.java b/core/src/main/java/com/graphhopper/routing/template/PolygonThroughRoutingTemplate.java
index 001643a7e9..d2c249cff2 100644
--- a/core/src/main/java/com/graphhopper/routing/template/PolygonThroughRoutingTemplate.java
+++ b/core/src/main/java/com/graphhopper/routing/template/PolygonThroughRoutingTemplate.java
@@ -54,7 +54,7 @@ private void buildRouteCandidatesForCurrentPoint(List<Integer> currentPointsLOTN
         for (final int LOTNodeL : currentPointsLOTNodes) {
             for (final int LOTNodeLPrime : currentPointsLOTNodes) {
                 if (LOTNodeL != LOTNodeLPrime) {
-                    this.routeCandidates.candidates.add(buildCandidatePath(currentPointID, nextPointID, LOTNodeL, LOTNodeLPrime));
+                    this.routeCandidates.getCandidates().add(buildCandidatePath(currentPointID, nextPointID, LOTNodeL, LOTNodeLPrime));
                 }
             }
         }
diff --git a/core/src/test/java/com/graphhopper/routing/template/PolygonRoutingUtil/RouteCandidateListTest.java b/core/src/test/java/com/graphhopper/routing/template/PolygonRoutingUtil/RouteCandidateListTest.java
index 7ab7b40dc2..76def82074 100644
--- a/core/src/test/java/com/graphhopper/routing/template/PolygonRoutingUtil/RouteCandidateListTest.java
+++ b/core/src/test/java/com/graphhopper/routing/template/PolygonRoutingUtil/RouteCandidateListTest.java
@@ -23,14 +23,14 @@
     final PolygonRoutingTestGraph graphMocker = new PolygonRoutingTestGraph();
 
     private void addTestingCandidates() {
-        this.candidateList.candidates.clear();
-        this.candidateList.candidates.add(new RouteCandidateMocker(routingTemplate, 3,6,1, "a"));
-        this.candidateList.candidates.add(new RouteCandidateMocker(routingTemplate, 2,3,1, "b"));
-        this.candidateList.candidates.add(new RouteCandidateMocker(routingTemplate, 6,6,5, "c"));
-        this.candidateList.candidates.add(new RouteCandidateMocker(routingTemplate, 4,5,3, "d"));
-        this.candidateList.candidates.add(new RouteCandidateMocker(routingTemplate, 8,4,6, "e"));
-        this.candidateList.candidates.add(new RouteCandidateMocker(routingTemplate, 6,1,3, "f"));
-        this.candidateList.candidates.add(new RouteCandidateMocker(routingTemplate, 7,1,6, "g"));
+        this.candidateList.getCandidates().clear();
+        this.candidateList.getCandidates().add(new RouteCandidateMocker(routingTemplate, 3, 6, 1, "a"));
+        this.candidateList.getCandidates().add(new RouteCandidateMocker(routingTemplate, 2, 3, 1, "b"));
+        this.candidateList.getCandidates().add(new RouteCandidateMocker(routingTemplate, 6, 6, 5, "c"));
+        this.candidateList.getCandidates().add(new RouteCandidateMocker(routingTemplate, 4, 5, 3, "d"));
+        this.candidateList.getCandidates().add(new RouteCandidateMocker(routingTemplate, 8, 4, 6, "e"));
+        this.candidateList.getCandidates().add(new RouteCandidateMocker(routingTemplate, 6, 1, 3, "f"));
+        this.candidateList.getCandidates().add(new RouteCandidateMocker(routingTemplate, 7, 1, 6, "g"));
     }
 
     @Test
@@ -38,9 +38,9 @@ public void assertCorrectListContentAfterPruning() {
         addTestingCandidates();
         this.candidateList.pruneDominatedCandidateRoutes();
 
-        assertEquals("a", this.candidateList.candidates.get(0).name);
-        assertEquals("c", this.candidateList.candidates.get(1).name);
-        assertEquals("b", this.candidateList.candidates.get(2).name);
+        assertEquals("a", this.candidateList.getCandidates().get(0).name);
+        assertEquals("c", this.candidateList.getCandidates().get(1).name);
+        assertEquals("b", this.candidateList.getCandidates().get(2).name);
     }
 
     @Test
