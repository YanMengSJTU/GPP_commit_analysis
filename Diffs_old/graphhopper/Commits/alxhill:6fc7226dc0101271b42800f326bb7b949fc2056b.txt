diff --git a/marmoset/pom.xml b/marmoset/pom.xml
index 3f46dfb61d..3237c68c05 100644
--- a/marmoset/pom.xml
+++ b/marmoset/pom.xml
@@ -99,6 +99,16 @@
                 </plugin>
             </plugins>
         </pluginManagement>
+        <plugins>
+            <plugin>
+                <groupId>org.apache.maven.plugins</groupId>
+                <artifactId>maven-compiler-plugin</artifactId>
+                <configuration>
+                    <source>1.8</source>
+                    <target>1.8</target>
+                </configuration>
+            </plugin>
+        </plugins>
 
     </build>
 </project>
\ No newline at end of file
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetHopper.java b/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetHopper.java
index cd782e0ada..95735d4a1a 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetHopper.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetHopper.java
@@ -7,6 +7,7 @@
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.List;
+import java.util.stream.Collectors;
 
 /**
  * Created by alexander on 15/02/2016.
@@ -14,11 +15,11 @@
 public class MarmosetHopper {
 
     GraphHopper hopper;
-    List<VehicleController> vehicles;
+    List<Vehicle> vehicles;
 
     public MarmosetHopper() {
         hopper = new GraphHopper();
-        vehicles = new ArrayList<VehicleController>();
+        vehicles = new ArrayList<>();
     }
 
     public void init()
@@ -37,24 +38,15 @@ public void init()
         args.put("osmreader.osm", "british-isles-latest.osm.pbf");
         hopper.init(args);
         hopper.importOrLoad();
-        vehicles.add(new VehicleController(hopper, new Vehicle(0, 51.505, -0.09), new Location(51.48, -0.10)));
-        vehicles.add(new VehicleController(hopper, new Vehicle(0, 51.611621,0.10643), new Location(51.433892,-0.291824)));
+        vehicles.add(new Vehicle(hopper, new Location(51.505, -0.09), new Location(51.48, -0.10)));
+        vehicles.add(new Vehicle(hopper, new Location(51.611621,0.10643), new Location(51.433892,-0.291824)));
     }
 
     public void timestep() {
-        for (VehicleController v : vehicles) {
-            v.calculateStep();
-        }
+        vehicles.parallelStream().forEach(Vehicle::calculateStep);
     }
 
     public String getVehicleData() {
-        StringBuilder sb = new StringBuilder();
-        for (VehicleController v : vehicles)
-        {
-            sb.append(v.getVehicle().toString());
-            sb.append(",");
-        }
-        sb.deleteCharAt(sb.length() - 1); // remove last comma
-        return sb.toString();
+        return vehicles.stream().map(Vehicle::toString).collect(Collectors.joining(","));
     }
 }
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/Vehicle.java b/marmoset/src/main/java/com/graphhopper/marmoset/Vehicle.java
index 69da654bcf..6ef8ef06d1 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/Vehicle.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/Vehicle.java
@@ -1,54 +1,60 @@
 package com.graphhopper.marmoset;
 
+import com.graphhopper.GHRequest;
+import com.graphhopper.GraphHopper;
+import com.graphhopper.PathWrapper;
 import com.graphhopper.marmoset.util.Location;
+import com.graphhopper.util.InstructionList;
+import com.graphhopper.util.PointList;
 
 /**
  * Created by alexander on 16/02/2016.
  */
 public class Vehicle {
-
     private static int maxId = 0;
 
-    private long currentRoadId; // OSM ID of the current road
+    private final int id;
+
+    private GraphHopper hopper;
     private Location loc;
-    public final int id;
+    private Location dest;
+    private boolean finished;
 
-    public Vehicle(long startRoadId, double lat, double lon)
+    public Vehicle(GraphHopper hopper, Location start, Location dest)
     {
-        this.loc = new Location(lat, lon);
+        this.hopper = hopper;
+        this.dest = dest;
+        this.loc = start;
         this.id = maxId++;
-        this.currentRoadId = startRoadId;
+        finished = false;
     }
 
-    public long getCurrentRoadId()
+    public void calculateStep()
     {
-        return currentRoadId;
-    }
+        if (finished)
+            return;
 
-    public Location getLocation()
-    {
-        return loc;
-    }
+        GHRequest r = new GHRequest(loc.getLat(), loc.getLon(), dest.getLat(), dest.getLon());
+        PathWrapper route = hopper.route(r).getBest();
 
-    public int getId()
-    {
-        return id;
-    }
+        PointList path = route.getPoints();
+        InstructionList il = route.getInstructions();
 
-    @Override
-    public String toString()
-    {
-        return String.valueOf(id) + "|" + loc.toString();
-    }
+        if (route.getPoints().size() < 2)
+        {
+            System.out.println("Vehicle " + id + " reached destination");
+            finished = true;
+            return;
+        }
 
-    public void moveTo(long newRoad, double newLat, double newLon)
-    {
-        currentRoadId = newRoad;
-        loc.set(newLat, newLon);
+        System.out.println(path.toString());
+        System.out.println(il.toString());
+        loc.set(path.getLat(2), path.getLon(2));
     }
 
-    public void moveBy(double latDiff, double lonDiff)
+    @Override
+    public String toString()
     {
-        loc.add(latDiff, lonDiff);
+        return String.format("%d|%s", id, loc.toString());
     }
 }
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/VehicleController.java b/marmoset/src/main/java/com/graphhopper/marmoset/VehicleController.java
deleted file mode 100644
index d61e9c299a..0000000000
--- a/marmoset/src/main/java/com/graphhopper/marmoset/VehicleController.java
+++ /dev/null
@@ -1,55 +0,0 @@
-package com.graphhopper.marmoset;
-
-import com.graphhopper.GHRequest;
-import com.graphhopper.GraphHopper;
-import com.graphhopper.PathWrapper;
-import com.graphhopper.marmoset.util.Location;
-import com.graphhopper.util.InstructionList;
-import com.graphhopper.util.PointList;
-
-/**
- * Created by alexander on 16/02/2016.
- */
-public class VehicleController {
-    private Vehicle vehicle;
-    private GraphHopper hopper;
-    private Location dest;
-    private boolean finished;
-
-    public VehicleController(GraphHopper hopper, Vehicle vehicle, Location dest)
-    {
-        this.hopper = hopper;
-        this.vehicle = vehicle;
-        this.dest = dest;
-        finished = false;
-    }
-
-    public Vehicle getVehicle()
-    {
-        return vehicle;
-    }
-
-    public void calculateStep()
-    {
-        if (finished)
-            return;
-
-        GHRequest r = new GHRequest(vehicle.getLocation().getLat(), vehicle.getLocation().getLon(),
-                dest.getLat(), dest.getLon());
-        PathWrapper route = hopper.route(r).getBest();
-
-        PointList path = route.getPoints();
-        InstructionList il = route.getInstructions();
-
-        if (route.getPoints().size() < 2)
-        {
-            System.out.println("Vehicle " + vehicle.getId() + " reached destination");
-            finished = true;
-            return;
-        }
-
-        System.out.println(path.toString());
-        System.out.println(il.toString());
-        vehicle.moveTo(0, path.getLat(2), path.getLon(2));
-    }
-}
