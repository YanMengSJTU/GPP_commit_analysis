diff --git a/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java b/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
index 8c1afa45b8..16060af410 100644
--- a/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
+++ b/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
@@ -47,6 +47,7 @@
 import com.graphhopper.GHRequest;
 import com.graphhopper.GHResponse;
 import com.graphhopper.GraphHopper;
+import com.graphhopper.routing.AlgorithmOptions;
 import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.routing.util.WeightingMap;
 import com.graphhopper.util.Helper;
@@ -57,242 +58,294 @@
 import com.graphhopper.util.shapes.GHPoint;
 
 /**
- * Servlet to use GraphHopper in a remote client application like mobile or
- * browser. Note: If type is json it returns the points in GeoJson format
- * (longitude,latitude) unlike the format "lat,lon" used otherwise. See the full
- * API response format in docs/web/api-doc.md
+ * Servlet to use GraphHopper in a remote client application like mobile or browser. Note: If type
+ * is json it returns the points in GeoJson format (longitude,latitude) unlike the format "lat,lon"
+ * used otherwise. See the full API response format in docs/web/api-doc.md
  * <p/>
  *
  * @author Peter Karich
  */
-public class GraphHopperServlet extends GHBaseServlet {
-    @Inject
-    private GraphHopper hopper;
-
-    @Named("internalErrorsAllowed")
-    private boolean internalErrorsAllowed;
-
-    @Override
-    public void doGet(HttpServletRequest httpReq, HttpServletResponse httpRes) throws ServletException, IOException {
-        List<GHPoint> infoPoints = getPoints(httpReq, "point");
-
-        // we can reduce the path length based on the maximum differences to the
-        // original coordinates
-        double minPathPrecision = getDoubleParam(httpReq, "way_point_max_distance", 1d);
-        boolean writeGPX = "gpx".equalsIgnoreCase(getParam(httpReq, "type", "json"));
-        boolean enableInstructions = writeGPX || getBooleanParam(httpReq, "instructions", true);
-        boolean calcPoints = getBooleanParam(httpReq, "calc_points", true);
-        boolean enableElevation = getBooleanParam(httpReq, "elevation", false);
-        boolean pointsEncoded = getBooleanParam(httpReq, "points_encoded", true);
-
-        String vehicleStr = getParam(httpReq, "vehicle", "car");
-        String weighting = getParam(httpReq, "weighting", "fastest");
-        String algoStr = getParam(httpReq, "algorithm", "");
-        String localeStr = getParam(httpReq, "locale", "en");
-
-        StopWatch sw = new StopWatch().start();
-        GHResponse ghRsp;
-
-        String instructionsString = getParam(httpReq, "instructions", "true");
-        if (!"true".equalsIgnoreCase(instructionsString) && !"false".equalsIgnoreCase(instructionsString)) {
-            String errMesg = String.format(
-                    "%s is not a valid value for parameter instructions. Valid vehicles are true or false",
-                    instructionsString);
-            ghRsp = new GHResponse().addError(new IllegalArgumentException(errMesg));
-        } else if (!hopper.getEncodingManager().supports(vehicleStr)) {
-            String supported = hopper.getGraph().getEncodingManager().toString();
-            String errMesg = String.format("Vehicle %s is not a valid vehicle. Valid vehicles are %s", vehicleStr,
-                    supported);
-            ghRsp = new GHResponse().addError(new IllegalArgumentException(errMesg));
-        } else if (enableElevation && !hopper.hasElevation()) {
-            ghRsp = new GHResponse().addError(new IllegalArgumentException("Elevation not supported!"));
-        } else {
-            FlagEncoder algoVehicle = hopper.getEncodingManager().getEncoder(vehicleStr);
-            GHRequest request = new GHRequest(infoPoints);
-
-            initHints(request, httpReq.getParameterMap());
-            request.setVehicle(algoVehicle.toString()).setWeighting(weighting).setAlgorithm(algoStr)
-                    .setLocale(localeStr).getHints().put("calcPoints", calcPoints)
-                    .put("instructions", enableInstructions).put("wayPointMaxDistance", minPathPrecision);
-
-            ghRsp = hopper.route(request);
-        }
-
-        float took = sw.stop().getSeconds();
-        String infoStr = httpReq.getRemoteAddr() + " " + httpReq.getLocale() + " " + httpReq.getHeader("User-Agent");
-        String logStr = httpReq.getQueryString() + " " + infoStr + " " + infoPoints + ", took:" + took + ", " + algoStr
-                + ", " + weighting + ", " + vehicleStr;
-
-        if (ghRsp.hasErrors())
-            logger.error(logStr + ", errors:" + ghRsp.getErrors());
-        else
-            logger.info(logStr + ", distance: " + ghRsp.getDistance() + ", time:"
-                    + Math.round(ghRsp.getTime() / 60000f) + "min, points:" + ghRsp.getPoints().getSize()
-                    + ", debug - " + ghRsp.getDebugInfo());
-
-        if (writeGPX) {
-            String xml = createGPXString(httpReq, httpRes, ghRsp);
-            if (ghRsp.hasErrors()) {
-                httpRes.setStatus(SC_BAD_REQUEST);
-                httpRes.getWriter().append(xml);
-            } else
-                writeResponse(httpRes, xml);
-        } else {
-            String type = getParam(httpReq, "type", "json");
-            if (!"json".equalsIgnoreCase(type) || (!"jsonp".equalsIgnoreCase(type) && jsonpAllowed)) {
-                String errorMessage = type + " is not a valid value for parameter type. Valid values are ";
-                errorMessage += jsonpAllowed ? "JSON, GPX or JSONP." : "GPX or JSON.";
-                ghRsp.addError(new IllegalArgumentException(errorMessage));
-            }
-            Map<String, Object> map = createJson(ghRsp, calcPoints, pointsEncoded, enableElevation, enableInstructions);
-            Object infoMap = map.get("info");
-            if (infoMap != null)
-                ((Map) infoMap).put("took", Math.round(took * 1000));
-
-            if (ghRsp.hasErrors()) {
-                writeJsonError(httpRes, SC_BAD_REQUEST, new JSONObject(map));
-            } else
-                writeJson(httpReq, httpRes, new JSONObject(map));
-        }
-    }
-
-    protected String createGPXString(HttpServletRequest req, HttpServletResponse res, GHResponse rsp) {
-        boolean includeElevation = getBooleanParam(req, "elevation", false);
-        res.setCharacterEncoding("UTF-8");
-        res.setContentType("application/xml");
-        String trackName = getParam(req, "track", "GraphHopper Track");
-        res.setHeader("Content-Disposition", "attachment;filename=" + "GraphHopper.gpx");
-        long time = getLongParam(req, "millis", System.currentTimeMillis());
-        if (rsp.hasErrors())
-            return errorsToXML(rsp.getErrors());
-        else
-            return rsp.getInstructions().createGPX(trackName, time, includeElevation);
-    }
-
-    String errorsToXML(List<Throwable> list) {
-        try {
-            DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
-            DocumentBuilder builder = factory.newDocumentBuilder();
-            Document doc = builder.newDocument();
-            Element gpxElement = doc.createElement("gpx");
-            gpxElement.setAttribute("creator", "GraphHopper");
-            gpxElement.setAttribute("version", "1.1");
-            doc.appendChild(gpxElement);
-
-            Element mdElement = doc.createElement("metadata");
-            gpxElement.appendChild(mdElement);
-
-            Element extensionsElement = doc.createElement("extensions");
-            mdElement.appendChild(extensionsElement);
-
-            Element messageElement = doc.createElement("message");
-            extensionsElement.appendChild(messageElement);
-            messageElement.setTextContent(list.get(0).getMessage());
-
-            Element hintsElement = doc.createElement("hints");
-            extensionsElement.appendChild(hintsElement);
-
-            for (Throwable t : list) {
-                Element error = doc.createElement("error");
-                hintsElement.appendChild(error);
-                error.setAttribute("message", t.getMessage());
-                if (internalErrorsAllowed) {
-                    error.setAttribute("details", t.getClass().getName());
-                }
-            }
-            TransformerFactory transformerFactory = TransformerFactory.newInstance();
-            Transformer transformer = transformerFactory.newTransformer();
-            StringWriter writer = new StringWriter();
-            transformer.transform(new DOMSource(doc), new StreamResult(writer));
-            return writer.toString();
-        } catch (Exception ex) {
-            throw new RuntimeException(ex);
-        }
-    }
-
-    protected Map<String, Object> createJson(GHResponse rsp, boolean calcPoints, boolean pointsEncoded,
-            boolean includeElevation, boolean enableInstructions) {
-        Map<String, Object> json = new HashMap<String, Object>();
-
-        if (rsp.hasErrors()) {
-            Map<String, String> map = new HashMap<String, String>();
-            json.put("error", map);
-            Throwable throwable = rsp.getErrors().get(0);
-            map.put("message", throwable.getMessage());
-            map.put("statuscode", "404");
-            List<Map<String, String>> list = new ArrayList<Map<String, String>>();
-            for (Throwable t : rsp.getErrors()) {
-                Map<String, String> hintMap = new HashMap<String, String>();
-                hintMap.put("message", t.getMessage());
-                // if(internalErrorsAllowed) {
-                hintMap.put("details", t.getClass().getName());
-                // }
-                list.add(hintMap);
-            }
-            json.put("hints", list);
-        } else {
-            Map<String, Object> jsonInfo = new HashMap<String, Object>();
-            json.put("info", jsonInfo);
-            // jsonInfo.put("copyrights", Arrays.asList("GraphHopper",
-            // "OpenStreetMap contributors"));
-            Map<String, Object> jsonPath = new HashMap<String, Object>();
-            jsonPath.put("distance", Helper.round(rsp.getDistance(), 3));
-            jsonPath.put("weight", Helper.round6(rsp.getDistance()));
-            jsonPath.put("time", rsp.getTime());
-
-            if (calcPoints) {
-                jsonPath.put("points_encoded", pointsEncoded);
-
-                PointList points = rsp.getPoints();
-                if (points.getSize() >= 2) {
-                    BBox maxBounds = hopper.getGraph().getBounds();
-                    BBox maxBounds2D = new BBox(maxBounds.minLon, maxBounds.maxLon, maxBounds.minLat, maxBounds.maxLat);
-                    jsonPath.put("bbox", rsp.calcRouteBBox(maxBounds2D).toGeoJson());
-                }
-
-                jsonPath.put("points", createPoints(points, pointsEncoded, includeElevation));
-
-                if (enableInstructions) {
-                    InstructionList instructions = rsp.getInstructions();
-                    jsonPath.put("instructions", instructions.createJson());
-                }
-            }
-            json.put("paths", Collections.singletonList(jsonPath));
-        }
-        return json;
-    }
-
-    protected Object createPoints(PointList points, boolean pointsEncoded, boolean includeElevation) {
-        if (pointsEncoded)
-            return WebHelper.encodePolyline(points, includeElevation);
-
-        Map<String, Object> jsonPoints = new HashMap<String, Object>();
-        jsonPoints.put("type", "LineString");
-        jsonPoints.put("coordinates", points.toGeoJson(includeElevation));
-        return jsonPoints;
-    }
-
-    protected List<GHPoint> getPoints(HttpServletRequest req, String key) {
-        String[] pointsAsStr = getParams(req, key);
-        final List<GHPoint> infoPoints = new ArrayList<GHPoint>(pointsAsStr.length);
-        for (String str : pointsAsStr) {
-            String[] fromStrs = str.split(",");
-            if (fromStrs.length == 2) {
-                GHPoint point = GHPoint.parse(str);
-                if (point != null) {
-                    infoPoints.add(point);
-                }
-            }
-        }
-
-        return infoPoints;
-    }
-
-    protected void initHints(GHRequest request, Map<String, String[]> parameterMap) {
-        WeightingMap m = request.getHints();
-        for (Entry<String, String[]> e : parameterMap.entrySet()) {
-            if (e.getValue().length == 1)
-                m.put(e.getKey(), e.getValue()[0]);
-        }
-    }
+public class GraphHopperServlet extends GHBaseServlet
+{
+	@Inject
+	private GraphHopper hopper;
+
+	@Named("internalErrorsAllowed")
+	private boolean internalErrorsAllowed;
+
+	@Override
+	public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes )
+	        throws ServletException, IOException
+	{
+		List<GHPoint> infoPoints = getPoints(httpReq, "point");
+
+		// we can reduce the path length based on the maximum differences to the
+		// original coordinates
+		double minPathPrecision = getDoubleParam(httpReq, "way_point_max_distance", 1d);
+		boolean writeGPX = "gpx".equalsIgnoreCase(getParam(httpReq, "type", "json"));
+		boolean enableInstructions = writeGPX || getBooleanParam(httpReq, "instructions", true);
+		boolean calcPoints = getBooleanParam(httpReq, "calc_points", true);
+		boolean enableElevation = getBooleanParam(httpReq, "elevation", false);
+		boolean pointsEncoded = getBooleanParam(httpReq, "points_encoded", true);
+
+		String vehicleStr = getParam(httpReq, "vehicle", "car");
+		String weighting = getParam(httpReq, "weighting", "fastest");
+		String algoStr = getParam(httpReq, "algorithm", AlgorithmOptions.DIJKSTRA_BI);
+		String localeStr = getParam(httpReq, "locale", "en");
+
+		StopWatch sw = new StopWatch().start();
+		GHResponse ghRsp;
+
+		String instructionsString = getParam(httpReq, "instructions", "true");
+		if (!AlgorithmOptions.ASTAR.equalsIgnoreCase(algoStr)
+		        && !AlgorithmOptions.ASTAR_BI.equalsIgnoreCase(algoStr)
+		        && !AlgorithmOptions.DIJKSTRA.equalsIgnoreCase(algoStr)
+		        && !AlgorithmOptions.DIJKSTRA_BI.equalsIgnoreCase(algoStr)
+		        && !AlgorithmOptions.DIJKSTRA_ONE_TO_MANY.equalsIgnoreCase(algoStr))
+		{
+			String errMesg = String
+			        .format("%s is not a valid value for parameter algorithm. Valid values are %s, %s, %s, %s or %s",
+			                algoStr, AlgorithmOptions.ASTAR, AlgorithmOptions.ASTAR_BI,
+			                AlgorithmOptions.DIJKSTRA, AlgorithmOptions.DIJKSTRA_BI,
+			                AlgorithmOptions.DIJKSTRA_ONE_TO_MANY);
+			ghRsp = new GHResponse().addError(new IllegalArgumentException(errMesg));
+		} else if (!"true".equalsIgnoreCase(instructionsString)
+		        && !"false".equalsIgnoreCase(instructionsString))
+		{
+			String errMesg = String
+			        .format("%s is not a valid value for parameter instructions. Valid vehicles are true or false",
+			                instructionsString);
+			ghRsp = new GHResponse().addError(new IllegalArgumentException(errMesg));
+		} else if (!hopper.getEncodingManager().supports(vehicleStr))
+		{
+			String supported = hopper.getGraph().getEncodingManager().toString();
+			String errMesg = String.format(
+			        "Vehicle %s is not a valid vehicle. Valid vehicles are %s", vehicleStr,
+			        supported);
+			ghRsp = new GHResponse().addError(new IllegalArgumentException(errMesg));
+		} else if (enableElevation && !hopper.hasElevation())
+		{
+			ghRsp = new GHResponse().addError(new IllegalArgumentException(
+			        "Elevation not supported!"));
+		} else
+		{
+			FlagEncoder algoVehicle = hopper.getEncodingManager().getEncoder(vehicleStr);
+			GHRequest request = new GHRequest(infoPoints);
+
+			initHints(request, httpReq.getParameterMap());
+			request.setVehicle(algoVehicle.toString()).setWeighting(weighting)
+			        .setAlgorithm(algoStr).setLocale(localeStr).getHints()
+			        .put("calcPoints", calcPoints).put("instructions", enableInstructions)
+			        .put("wayPointMaxDistance", minPathPrecision);
+
+			ghRsp = hopper.route(request);
+		}
+
+		float took = sw.stop().getSeconds();
+		String infoStr = httpReq.getRemoteAddr() + " " + httpReq.getLocale() + " "
+		        + httpReq.getHeader("User-Agent");
+		String logStr = httpReq.getQueryString() + " " + infoStr + " " + infoPoints + ", took:"
+		        + took + ", " + algoStr + ", " + weighting + ", " + vehicleStr;
+
+		if (ghRsp.hasErrors())
+			logger.error(logStr + ", errors:" + ghRsp.getErrors());
+		else
+			logger.info(logStr + ", distance: " + ghRsp.getDistance() + ", time:"
+			        + Math.round(ghRsp.getTime() / 60000f) + "min, points:"
+			        + ghRsp.getPoints().getSize() + ", debug - " + ghRsp.getDebugInfo());
+
+		if (writeGPX)
+		{
+			String xml = createGPXString(httpReq, httpRes, ghRsp);
+			if (ghRsp.hasErrors())
+			{
+				httpRes.setStatus(SC_BAD_REQUEST);
+				httpRes.getWriter().append(xml);
+			} else
+				writeResponse(httpRes, xml);
+		} else
+		{
+			String type = getParam(httpReq, "type", "json");
+			if (!"json".equalsIgnoreCase(type) || (!"jsonp".equalsIgnoreCase(type) && jsonpAllowed))
+			{
+				String errorMessage = type
+				        + " is not a valid value for parameter type. Valid values are ";
+				errorMessage += jsonpAllowed ? "JSON, GPX or JSONP." : "GPX or JSON.";
+				ghRsp.addError(new IllegalArgumentException(errorMessage));
+			}
+			Map<String, Object> map = createJson(ghRsp, calcPoints, pointsEncoded, enableElevation,
+			        enableInstructions);
+			Object infoMap = map.get("info");
+			if (infoMap != null)
+				((Map) infoMap).put("took", Math.round(took * 1000));
+
+			if (ghRsp.hasErrors())
+			{
+				writeJsonError(httpRes, SC_BAD_REQUEST, new JSONObject(map));
+			} else
+				writeJson(httpReq, httpRes, new JSONObject(map));
+		}
+	}
+
+	protected String createGPXString( HttpServletRequest req, HttpServletResponse res,
+	        GHResponse rsp )
+	{
+		boolean includeElevation = getBooleanParam(req, "elevation", false);
+		res.setCharacterEncoding("UTF-8");
+		res.setContentType("application/xml");
+		String trackName = getParam(req, "track", "GraphHopper Track");
+		res.setHeader("Content-Disposition", "attachment;filename=" + "GraphHopper.gpx");
+		long time = getLongParam(req, "millis", System.currentTimeMillis());
+		if (rsp.hasErrors())
+			return errorsToXML(rsp.getErrors());
+		else
+			return rsp.getInstructions().createGPX(trackName, time, includeElevation);
+	}
+
+	String errorsToXML( List<Throwable> list )
+	{
+		try
+		{
+			DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
+			DocumentBuilder builder = factory.newDocumentBuilder();
+			Document doc = builder.newDocument();
+			Element gpxElement = doc.createElement("gpx");
+			gpxElement.setAttribute("creator", "GraphHopper");
+			gpxElement.setAttribute("version", "1.1");
+			doc.appendChild(gpxElement);
+
+			Element mdElement = doc.createElement("metadata");
+			gpxElement.appendChild(mdElement);
+
+			Element extensionsElement = doc.createElement("extensions");
+			mdElement.appendChild(extensionsElement);
+
+			Element messageElement = doc.createElement("message");
+			extensionsElement.appendChild(messageElement);
+			messageElement.setTextContent(list.get(0).getMessage());
+
+			Element hintsElement = doc.createElement("hints");
+			extensionsElement.appendChild(hintsElement);
+
+			for (Throwable t : list)
+			{
+				Element error = doc.createElement("error");
+				hintsElement.appendChild(error);
+				error.setAttribute("message", t.getMessage());
+				if (internalErrorsAllowed)
+				{
+					error.setAttribute("details", t.getClass().getName());
+				}
+			}
+			TransformerFactory transformerFactory = TransformerFactory.newInstance();
+			Transformer transformer = transformerFactory.newTransformer();
+			StringWriter writer = new StringWriter();
+			transformer.transform(new DOMSource(doc), new StreamResult(writer));
+			return writer.toString();
+		} catch (Exception ex)
+		{
+			throw new RuntimeException(ex);
+		}
+	}
+
+	protected Map<String, Object> createJson( GHResponse rsp, boolean calcPoints,
+	        boolean pointsEncoded, boolean includeElevation, boolean enableInstructions )
+	{
+		Map<String, Object> json = new HashMap<String, Object>();
+
+		if (rsp.hasErrors())
+		{
+			Map<String, String> map = new HashMap<String, String>();
+			json.put("error", map);
+			Throwable throwable = rsp.getErrors().get(0);
+			map.put("message", throwable.getMessage());
+			map.put("statuscode", "404");
+			List<Map<String, String>> list = new ArrayList<Map<String, String>>();
+			for (Throwable t : rsp.getErrors())
+			{
+				Map<String, String> hintMap = new HashMap<String, String>();
+				hintMap.put("message", t.getMessage());
+				// if(internalErrorsAllowed) {
+				hintMap.put("details", t.getClass().getName());
+				// }
+				list.add(hintMap);
+			}
+			json.put("hints", list);
+		} else
+		{
+			Map<String, Object> jsonInfo = new HashMap<String, Object>();
+			json.put("info", jsonInfo);
+			// jsonInfo.put("copyrights", Arrays.asList("GraphHopper",
+			// "OpenStreetMap contributors"));
+			Map<String, Object> jsonPath = new HashMap<String, Object>();
+			jsonPath.put("distance", Helper.round(rsp.getDistance(), 3));
+			jsonPath.put("weight", Helper.round6(rsp.getDistance()));
+			jsonPath.put("time", rsp.getTime());
+
+			if (calcPoints)
+			{
+				jsonPath.put("points_encoded", pointsEncoded);
+
+				PointList points = rsp.getPoints();
+				if (points.getSize() >= 2)
+				{
+					BBox maxBounds = hopper.getGraph().getBounds();
+					BBox maxBounds2D = new BBox(maxBounds.minLon, maxBounds.maxLon,
+					        maxBounds.minLat, maxBounds.maxLat);
+					jsonPath.put("bbox", rsp.calcRouteBBox(maxBounds2D).toGeoJson());
+				}
+
+				jsonPath.put("points", createPoints(points, pointsEncoded, includeElevation));
+
+				if (enableInstructions)
+				{
+					InstructionList instructions = rsp.getInstructions();
+					jsonPath.put("instructions", instructions.createJson());
+				}
+			}
+			json.put("paths", Collections.singletonList(jsonPath));
+		}
+		return json;
+	}
+
+	protected Object createPoints( PointList points, boolean pointsEncoded, boolean includeElevation )
+	{
+		if (pointsEncoded)
+			return WebHelper.encodePolyline(points, includeElevation);
+
+		Map<String, Object> jsonPoints = new HashMap<String, Object>();
+		jsonPoints.put("type", "LineString");
+		jsonPoints.put("coordinates", points.toGeoJson(includeElevation));
+		return jsonPoints;
+	}
+
+	protected List<GHPoint> getPoints( HttpServletRequest req, String key )
+	{
+		String[] pointsAsStr = getParams(req, key);
+		final List<GHPoint> infoPoints = new ArrayList<GHPoint>(pointsAsStr.length);
+		for (String str : pointsAsStr)
+		{
+			String[] fromStrs = str.split(",");
+			if (fromStrs.length == 2)
+			{
+				GHPoint point = GHPoint.parse(str);
+				if (point != null)
+				{
+					infoPoints.add(point);
+				}
+			}
+		}
+
+		return infoPoints;
+	}
+
+	protected void initHints( GHRequest request, Map<String, String[]> parameterMap )
+	{
+		WeightingMap m = request.getHints();
+		for (Entry<String, String[]> e : parameterMap.entrySet())
+		{
+			if (e.getValue().length == 1)
+				m.put(e.getKey(), e.getValue()[0]);
+		}
+	}
 }
