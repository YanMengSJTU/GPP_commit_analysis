diff --git a/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java b/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
index 62e171c7e4..5ab2336158 100644
--- a/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
+++ b/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
@@ -46,6 +46,7 @@
 import com.graphhopper.routing.util.AbstractFlagEncoder;
 import com.graphhopper.routing.util.EncoderDecorator;
 import com.graphhopper.routing.util.FlagEncoder;
+import com.graphhopper.routing.util.Weighting;
 import com.graphhopper.routing.util.WeightingMap;
 import com.graphhopper.util.Helper;
 import com.graphhopper.util.InstructionList;
@@ -138,6 +139,12 @@ public GHResponse getGHResponse( HttpServletRequest httpReq, HttpServletResponse
 				        AlgorithmOptions.DIJKSTRA, AlgorithmOptions.DIJKSTRA_BI,
 				        AlgorithmOptions.DIJKSTRA_ONE_TO_MANY);
 				ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg));
+			} else if (null != weighting
+			        && !new CaseInsensitiveStringListValidator().isValid(weighting,
+			                "fastest","shortest" ))
+			{
+				String errMesg = buildErrorMessageString(weighting, "weighting","fastest","shortest");
+				ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg));
 			} else if (!new BooleanValidator().isValid(instructionsString))
 			{
 				String errMesg = buildBooleanErrorMessageString(instructionsString, "instructions");
@@ -261,6 +268,7 @@ public GHResponse getGHResponse( HttpServletRequest httpReq, HttpServletResponse
 			} else
 			{
 				String type = getParam(httpReq, "type", "json");
+				System.err.println("TYPE:" + type) ;
 				if (!"json".equalsIgnoreCase(type)
 				        || (!"jsonp".equalsIgnoreCase(type) && jsonpAllowed))
 				{
diff --git a/web/src/test/java/com/graphhopper/http/GraphHopperServletTest.java b/web/src/test/java/com/graphhopper/http/GraphHopperServletTest.java
index fb1e16a73e..14b45f2c1d 100644
--- a/web/src/test/java/com/graphhopper/http/GraphHopperServletTest.java
+++ b/web/src/test/java/com/graphhopper/http/GraphHopperServletTest.java
@@ -2,7 +2,6 @@
 
 import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;
 import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.anyString;
 import static org.mockito.Mockito.mock;
@@ -12,7 +11,9 @@
 
 import java.io.IOException;
 import java.io.PrintWriter;
+import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.Collections;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
@@ -25,9 +26,9 @@
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
+import org.mockito.ArgumentCaptor;
 import org.mockito.Matchers;
 import org.mockito.Mock;
-import org.mockito.Mockito;
 import org.mockito.MockitoAnnotations;
 
 import com.google.inject.AbstractModule;
@@ -343,14 +344,19 @@ public void testGetGHResponseWithWrongType() throws IOException, MissingParamete
 
 		allParameters.put("type", new String[] { WRONG_TYPE });
 		when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
-
-		GHResponse ghResponse = graphHopperServlet.getGHResponse(httpServletRequest,
-		        httpServletResponse);
-		assertEquals(WRONG_TYPE
-		        + " is not a valid value for parameter type. Valid values are GPX or JSON.",
-		        ghResponse.getErrors().get(0).getMessage());
+		expectError();
+		graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse);
+		verifyError(WRONG_TYPE
+		        + " is not a valid value for parameter type. Valid values are GPX or JSON.");
 	}
 
+	private void verifyError( String expectedError)
+    {
+		ArgumentCaptor<Throwable> error = ArgumentCaptor.forClass(Throwable.class);
+	    verify(response).addError(error.capture());
+	    assertEquals(expectedError, error.getAllValues().get(0).getMessage());
+    }
+
 	@Test
 	public void testGetGHResponseWithCorrectVehicles() throws IOException,
 	        MissingParameterException, NoSuchParameterException, InvalidParameterException
@@ -719,6 +725,14 @@ private void expectResponseInstructions()
 		InstructionList instructions = new InstructionList(null);
 		when(response.getInstructions()).thenReturn(instructions);
 	}
+	
+	private void expectError()
+    {
+	    when(response.hasErrors()).thenReturn(true);
+	    List<Throwable> errors = new ArrayList<Throwable>();
+	    errors.add(new Throwable("test error"));
+		when(response.getErrors()).thenReturn(errors );
+    }
 
 	private void verifyNoError()
 	{
