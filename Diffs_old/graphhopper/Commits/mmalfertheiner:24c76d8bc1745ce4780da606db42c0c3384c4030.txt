diff --git a/core/pom.xml b/core/pom.xml
index b4ec077a2a..949b694ccf 100644
--- a/core/pom.xml
+++ b/core/pom.xml
@@ -100,13 +100,13 @@
                 <plugin>
                     <groupId>org.apache.maven.plugins</groupId>
                     <artifactId>maven-assembly-plugin</artifactId>
-                    <configuration>                     
+                    <configuration>
                         <!-- for usage on android -->
                         <descriptors>
                             <descriptor>src/main/assembly/android.xml</descriptor>
                         </descriptors>
                     </configuration>
-                </plugin>                
+                </plugin>
                 
                 <!-- create jar with test classes to be reused in other projects -->                
                 <plugin>
diff --git a/core/src/main/java/com/graphhopper/reader/OSMReader.java b/core/src/main/java/com/graphhopper/reader/OSMReader.java
index 09a90fa8b6..aa4a155eac 100644
--- a/core/src/main/java/com/graphhopper/reader/OSMReader.java
+++ b/core/src/main/java/com/graphhopper/reader/OSMReader.java
@@ -368,6 +368,23 @@ void processWay( OSMWay way )
             }
         }
 
+        //Kalman filter improves quality of elevation data
+        if(osmNodeIds.size() > 3) {
+
+            double[] tmpElevations = new double[osmNodeIds.size()];
+
+            for (int i = 0; i < tmpElevations.length; i++) {
+                int osmNodeId = getNodeMap().get(osmNodeIds.get(i));
+                tmpElevations[i] = getElevation(osmNodeId);
+            }
+
+            SimpleKalmanFilter skf = new SimpleKalmanFilter(tmpElevations, tmpElevations[0], 1, 6, 0.2);
+            skf.run();
+
+            double[] result = skf.getEstimatedValues();
+        }
+
+
         long wayFlags = encodingManager.handleWayTags(way, includeWay, relationFlags);
         if (wayFlags == 0)
             return;
@@ -580,6 +597,8 @@ private void processNode( OSMNode node )
         }
     }
 
+    //TODO update node elevation with Kalman
+
     boolean addNode( OSMNode node )
     {
         int nodeType = getNodeMap().get(node.getId());
@@ -606,6 +625,13 @@ protected double getElevation( OSMNode node )
         return eleProvider.getEle(node.getLat(), node.getLon());
     }
 
+    protected double getElevation( int osmNodeId ){
+        double lat = getTmpLatitude(osmNodeId);
+        double lon = getTmpLongitude(osmNodeId);
+
+        return eleProvider.getEle(lat, lon);
+    }
+
     void prepareWaysWithRelationInfo( OSMRelation osmRelation )
     {
         // is there at least one tag interesting for the registed encoders?
diff --git a/core/src/main/java/com/graphhopper/reader/SimpleKalmanFilter.java b/core/src/main/java/com/graphhopper/reader/SimpleKalmanFilter.java
new file mode 100644
index 0000000000..1bfebdfd23
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/SimpleKalmanFilter.java
@@ -0,0 +1,83 @@
+package com.graphhopper.reader;
+
+import java.util.Arrays;
+
+/**
+ * Explanation of the Kalman filter
+ *
+ * http://bilgin.esme.org/BitsBytes/KalmanFilterforDummies.aspx
+ */
+
+
+public class SimpleKalmanFilter {
+
+    private double[] z; //Array with original values
+    private double[] x; //Array with estimated values
+    private double[] p; //Array with error covariance
+
+    private double r;   //Environment noise
+    private double q;
+
+    public SimpleKalmanFilter(double[] measurement, double x0, double p0, double eNoise, double q) {
+
+        z = measurement;
+        x = new double[measurement.length + 1]; //because we have a prior
+        p = new double[measurement.length + 1];
+
+        x[0] = x0;
+        p[0] = p0;
+
+        r = eNoise;
+        this.q = q;
+
+    }
+
+    public void run(){
+
+        for(int i = 0; i < z.length; i++){
+
+            // Time update
+            double xPrior = 1 * x[i];
+            double pPrior = p[i] + q;
+
+            // Measurement update
+            double kalmanGain = pPrior / (pPrior + r);
+
+            double estimate = xPrior + kalmanGain * (z[i] - xPrior);
+            x[i+1] = estimate;
+
+            double error = (1 - kalmanGain) * pPrior;
+            p[i+1] = error;
+        }
+
+    }
+
+    public double[] getEstimatedValues(){
+
+        if(x != null){
+
+            return Arrays.copyOfRange(x, 1, x.length);
+
+        }
+
+        return null;
+    }
+
+
+
+    public static void main(String[] args) {
+
+        //double data[] = {0.390, 0.5, 0.48, 0.29, 0.25, 0.320, 0.34, 0.48, 0.41, 0.45};
+        double data[] = {1009.0, 1009.0, 1009.0, 1009.0, 1009.0, 1009.0, 1012.0, 1017.0, 1017.0, 1024.0, 1024.0, 1023.0, 1022.0, 1026.0, 1028.0, 1029.0, 1031.0, 1031.0, 1033.0, 1038.0, 1041.0, 1041.0, 1041.0, 1041.0, 1043.0, 1048.0, 1056.0, 1061.0, 1061.0, 1067.0, 1071.0, 1071.0, 1070.0, 1070.0, 1069.0, 1072.0, 1075.0, 1080.0, 1076.0, 1076.0, 1076.0, 1076.0, 1076.0, 1081.0, 1085.0, 1085.0, 1085.0, 1088.0, 1088.0, 1088.0, 1088.0, 1091.0, 1091.0, 1091.0, 1090.0, 1090.0, 1090.0, 1090.0, 1090.0, 1090.0, 1090.0, 1091.0, 1092.0, 1092.0, 1092.0, 1095.0, 1098.0, 1098.0, 1098.0, 1098.0, 1098.0, 1098.0, 1098.0, 1100.0, 1102.0, 1103.0, 1104.0, 1108.0, 1109.0, 1109.0, 1111.0, 1114.0, 1116.0, 1119.0, 1119.0, 1119.0, 1127.0, 1132.0, 1132.0, 1132.0, 1132.0, 1139.0, 1150.0, 1150.0, 1150.0, 1154.0, 1154.0, 1154.0, 1158.0, 1158.0, 1158.0, 1158.0, 1158.0, 1158.0, 1158.0, 1160.0, 1159.0, 1160.0, 1162.0, 1162.0, 1162.0, 1162.0, 1162.0, 1159.0, 1159.0, 1159.0, 1159.0, 1159.0, 1166.0, 1166.0, 1166.0, 1166.0, 1175.0, 1175.0, 1175.0, 1175.0, 1175.0, 1175.0, 1172.0, 1172.0, 1182.0, 1181.0, 1188.0, 1193.0, 1192.0, 1192.0, 1192.0, 1198.0, 1195.0, 1195.0, 1200.0, 1197.0, 1202.0, 1199.0, 1206.0, 1203.0, 1204.0, 1204.0, 1204.0, 1204.0, 1209.0, 1209.0, 1209.0, 1209.0, 1209.0, 1206.0, 1206.0, 1206.0, 1211.0, 1213.0, 1210.0, 1206.0, 1208.0, 1206.0, 1210.0, 1210.0, 1214.0, 1220.0, 1226.0, 1230.0, 1230.0, 1228.0, 1228.0, 1229.0, 1229.0, 1234.0, 1234.0, 1232.0, 1238.0, 1237.0, 1243.0, 1248.0, 1245.0, 1250.0, 1254.0, 1254.0, 1258.0, 1266.0, 1264.0, 1270.0, 1266.0, 1273.0, 1280.0, 1292.0, 1292.0, 1292.0, 1292.0, 1292.0, 1292.0, 1292.0, 1297.0, 1303.0, 1303.0, 1299.0, 1308.0, 1306.0, 1306.0, 1309.0, 1311.0, 1317.0, 1317.0, 1319.0, 1330.0, 1330.0, 1330.0, 1330.0, 1330.0, 1330.0, 1325.0, 1319.0, 1330.0, 1330.0, 1330.0, 1330.0, 1330.0, 1330.0, 1322.0, 1322.0, 1322.0, 1335.0, 1333.0, 1343.0, 1341.0, 1340.0, 1340.0, 1343.0, 1348.0, 1346.0, 1355.0, 1355.0, 1356.0, 1363.0, 1362.0, 1362.0, 1365.0, 1365.0, 1368.0, 1368.0, 1372.0, 1372.0, 1376.0, 1376.0, 1390.0, 1383.0, 1383.0, 1383.0, 1383.0, 1383.0, 1380.0, 1380.0, 1380.0, 1380.0, 1379.0, 1379.0, 1379.0, 1379.0, 1379.0, 1379.0, 1379.0, 1379.0, 1379.0, 1384.0, 1382.0, 1382.0, 1382.0, 1382.0, 1374.0, 1394.0, 1399.0, 1387.0, 1388.0, 1378.0, 1393.0, 1391.0, 1391.0, 1388.0, 1388.0, 1393.0, 1398.0, 1408.0, 1408.0, 1408.0, 1408.0, 1408.0, 1408.0, 1408.0, 1422.0, 1400.0, 1412.0, 1412.0, 1426.0, 1400.0, 1415.0, 1428.0, 1429.0, 1429.0, 1439.0, 1439.0, 1439.0, 1425.0, 1425.0, 1425.0, 1434.0, 1434.0, 1432.0, 1432.0, 1432.0, 1428.0, 1428.0, 1438.0, 1428.0, 1424.0, 1436.0, 1445.0, 1443.0, 1451.0, 1455.0, 1451.0, 1451.0, 1443.0, 1443.0, 1452.0, 1468.0, 1475.0, 1464.0, 1472.0, 1465.0, 1465.0, 1465.0, 1465.0, 1475.0, 1469.0, 1476.0, 1478.0, 1478.0, 1479.0, 1489.0, 1489.0, 1488.0, 1489.0, 1489.0, 1498.0, 1498.0, 1498.0, 1503.0, 1502.0, 1501.0, 1490.0, 1498.0, 1502.0, 1510.0, 1527.0, 1510.0, 1524.0, 1513.0, 1513.0, 1519.0, 1501.0, 1506.0, 1506.0, 1506.0, 1501.0, 1504.0, 1511.0, 1530.0, 1537.0, 1537.0, 1537.0, 1540.0, 1540.0, 1540.0, 1540.0, 1540.0, 1540.0, 1539.0, 1539.0, 1539.0, 1539.0, 1539.0, 1539.0, 1539.0, 1539.0, 1525.0, 1524.0, 1524.0, 1535.0, 1558.0, 1564.0, 1552.0, 1552.0, 1558.0, 1565.0, 1560.0, 1560.0, 1560.0, 1560.0, 1560.0, 1567.0, 1567.0, 1567.0, 1572.0, 1557.0, 1559.0, 1559.0, 1559.0, 1563.0, 1563.0, 1563.0, 1580.0, 1578.0, 1578.0, 1578.0, 1578.0, 1578.0, 1587.0, 1586.0, 1580.0, 1587.0, 1581.0, 1585.0, 1579.0, 1592.0, 1589.0, 1589.0, 1589.0, 1589.0, 1575.0, 1597.0, 1597.0, 1597.0, 1597.0, 1597.0, 1597.0, 1595.0, 1595.0, 1595.0, 1607.0, 1607.0, 1607.0, 1599.0, 1593.0, 1601.0, 1597.0, 1601.0, 1610.0, 1612.0, 1615.0, 1617.0, 1609.0, 1609.0, 1609.0, 1620.0, 1626.0, 1631.0, 1631.0, 1635.0, 1635.0, 1635.0, 1635.0, 1635.0, 1635.0, 1635.0, 1635.0, 1635.0, 1635.0, 1635.0, 1640.0, 1640.0, 1640.0, 1630.0, 1635.0, 1637.0, 1638.0, 1640.0, 1630.0, 1636.0, 1644.0, 1652.0, 1655.0, 1648.0, 1656.0, 1656.0, 1670.0, 1675.0, 1672.0, 1672.0, 1679.0, 1681.0, 1681.0, 1681.0, 1683.0, 1685.0, 1694.0, 1681.0, 1681.0, 1681.0, 1687.0, 1673.0, 1684.0, 1697.0, 1697.0, 1702.0, 1701.0, 1703.0, 1702.0, 1705.0, 1706.0, 1715.0, 1718.0, 1713.0, 1716.0, 1723.0, 1723.0, 1724.0, 1724.0, 1727.0, 1729.0, 1729.0, 1739.0, 1739.0, 1734.0, 1734.0, 1736.0, 1741.0, 1741.0, 1743.0, 1745.0, 1745.0, 1745.0, 1745.0, 1745.0, 1745.0, 1745.0, 1745.0, 1745.0, 1745.0, 1745.0, 1753.0, 1751.0, 1756.0, 1763.0, 1764.0, 1765.0, 1765.0, 1767.0, 1768.0, 1769.0, 1775.0, 1775.0, 1777.0, 1783.0, 1785.0, 1790.0, 1790.0, 1795.0, 1789.0, 1791.0, 1792.0, 1795.0, 1799.0, 1800.0, 1805.0, 1804.0, 1804.0, 1806.0, 1812.0, 1815.0, 1812.0, 1818.0, 1821.0, 1825.0, 1830.0, 1834.0, 1836.0, 1838.0, 1838.0, 1842.0, 1842.0};
+        SimpleKalmanFilter skf = new SimpleKalmanFilter(data, 1009, 1, 0.1 , 0.05);
+        skf.run();
+
+        double[] result = skf.getEstimatedValues();
+
+        for(int i = 0; i < data.length; i++){
+            System.out.println("ORIGINAL: " + data[i] + ", ESTIMATE: " + result[i]);
+        }
+
+    }
+
+}
diff --git a/core/src/main/java/com/graphhopper/routing/util/BikeGenericFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/BikeGenericFlagEncoder.java
new file mode 100644
index 0000000000..8403c90bba
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/routing/util/BikeGenericFlagEncoder.java
@@ -0,0 +1,780 @@
+/*
+ *  Licensed to GraphHopper and Peter Karich under one or more contributor
+ *  license agreements. See the NOTICE file distributed with this work for 
+ *  additional information regarding copyright ownership.
+ *
+ *  GraphHopper licenses this file to you under the Apache License, 
+ *  Version 2.0 (the "License"); you may not use this file except in 
+ *  compliance with the License. You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package com.graphhopper.routing.util;
+
+import com.graphhopper.reader.OSMRelation;
+import com.graphhopper.reader.OSMWay;
+import com.graphhopper.util.Helper;
+import com.graphhopper.util.InstructionAnnotation;
+import com.graphhopper.util.Translation;
+import org.openstreetmap.osmosis.osmbinary.Osmformat;
+
+import java.util.*;
+
+import static com.graphhopper.routing.util.PriorityCode.*;
+
+/**
+ * This generic flag encoder stores for each way its street classification. In order to reason in even more detail.
+ * <p>
+ * @author Peter Karich
+ * @author Nop
+ * @author ratrun
+ */
+public class BikeGenericFlagEncoder extends AbstractFlagEncoder
+{
+    /**
+     * Reports wether this edge is unpaved.
+     */
+    //public static final int K_UNPAVED = 100;
+    protected static final int PUSHING_SECTION_SPEED = 4;
+    // Pushing section heighways are parts where you need to get off your bike and push it (German: Schiebestrecke)
+    protected final HashSet<String> pushingSections = new HashSet<String>();
+    protected final HashSet<String> oppositeLanes = new HashSet<String>();
+    protected final Set<String> preferHighwayTags = new HashSet<String>();
+    protected final Set<String> avoidHighwayTags = new HashSet<String>();
+
+    protected final Set<String> pavedSurfaceTags = new HashSet<String>();
+    protected final Set<String> semipavedSurfaceTags = new HashSet<String>();
+    protected final Set<String> unpavedSurfaceTags = new HashSet<String>();
+
+    private final Map<String, Integer> trackTypeSpeeds = new HashMap<String, Integer>();
+    private final Map<String, Integer> surfaceSpeeds = new HashMap<String, Integer>();
+    private final Set<String> roadValues = new HashSet<String>();
+    private final Map<String, Integer> highwaySpeeds = new HashMap<String, Integer>();
+    // convert network tag of bicycle routes into a way route code
+    private final Map<String, Integer> bikeNetworkToCode = new HashMap<String, Integer>();
+    protected EncodedValue relationCodeEncoder;
+    protected EncodedValue wayTypeEncoder;
+    EncodedValue priorityWayEncoder;
+
+    // Car speed limit which switches the preference from UNCHANGED to AVOID_IF_POSSIBLE
+    private int avoidSpeedLimit;
+
+    // This is the specific bicycle class
+    private String specificBicycleClass;
+
+    protected BikeGenericFlagEncoder(int speedBits, double speedFactor, int maxTurnCosts)
+    {
+        super(speedBits, speedFactor, maxTurnCosts);
+        // strict set, usually vehicle and agricultural/forestry are ignored by cyclists
+        restrictions.addAll(Arrays.asList("bicycle", "access"));
+        restrictedValues.add("private");
+        restrictedValues.add("no");
+        restrictedValues.add("restricted");
+        restrictedValues.add("military");
+
+        intendedValues.add("yes");
+        intendedValues.add("designated");
+        intendedValues.add("official");
+        intendedValues.add("permissive");
+
+        oppositeLanes.add("opposite");
+        oppositeLanes.add("opposite_lane");
+        oppositeLanes.add("opposite_track");
+
+        setBlockByDefault(false);
+        potentialBarriers.add("gate");
+        // potentialBarriers.add("lift_gate");
+        potentialBarriers.add("swing_gate");
+
+        absoluteBarriers.add("stile");
+        absoluteBarriers.add("turnstile");
+
+        // make intermodal connections possible but mark as pushing section
+        acceptedRailways.add("platform");
+
+        //Paved surface tags -> can be used also by racing bikes
+        pavedSurfaceTags.add("paved");
+        pavedSurfaceTags.add("asphalt");
+        pavedSurfaceTags.add("metal");
+        pavedSurfaceTags.add("wood");
+        pavedSurfaceTags.add("concrete");
+        pavedSurfaceTags.add("concrete:lanes");
+        pavedSurfaceTags.add("concrete:plates");
+
+        //Semi paved -> still good underground but should be avoided for racing bikes
+        semipavedSurfaceTags.add("sett");
+        semipavedSurfaceTags.add("cobblestone");
+        semipavedSurfaceTags.add("cobblestone:flattened");
+        semipavedSurfaceTags.add("paving_stones");
+        semipavedSurfaceTags.add("paving_stones:30");
+        semipavedSurfaceTags.add("compacted");
+        semipavedSurfaceTags.add("grass_paver");
+
+        //Unpaved -> only for mtb
+        unpavedSurfaceTags.add("unpaved");
+        unpavedSurfaceTags.add("gravel");
+        unpavedSurfaceTags.add("ground");
+        unpavedSurfaceTags.add("dirt");
+        unpavedSurfaceTags.add("grass");
+        unpavedSurfaceTags.add("earth");
+        unpavedSurfaceTags.add("fine_gravel");
+        unpavedSurfaceTags.add("ice");
+        unpavedSurfaceTags.add("mud");
+        unpavedSurfaceTags.add("salt");
+        unpavedSurfaceTags.add("sand");
+
+        roadValues.add("living_street");
+        roadValues.add("road");
+        roadValues.add("service");
+        roadValues.add("unclassified");
+        roadValues.add("residential");
+        roadValues.add("trunk");
+        roadValues.add("trunk_link");
+        roadValues.add("primary");
+        roadValues.add("primary_link");
+        roadValues.add("secondary");
+        roadValues.add("secondary_link");
+        roadValues.add("tertiary");
+        roadValues.add("tertiary_link");
+
+        maxPossibleSpeed = 30;
+
+        setTrackTypeSpeed("grade1", 18); // paved
+        setTrackTypeSpeed("grade2", 12); // now unpaved ...
+        setTrackTypeSpeed("grade3", 8);
+        setTrackTypeSpeed("grade4", 6);
+        setTrackTypeSpeed("grade5", 4); // like sand/grass     
+
+        setSurfaceSpeed("paved", 18);
+        setSurfaceSpeed("asphalt", 18);
+        setSurfaceSpeed("cobblestone", 8);
+        setSurfaceSpeed("cobblestone:flattened", 10);
+        setSurfaceSpeed("sett", 10);
+        setSurfaceSpeed("concrete", 18);
+        setSurfaceSpeed("concrete:lanes", 16);
+        setSurfaceSpeed("concrete:plates", 16);
+        setSurfaceSpeed("paving_stones", 12);
+        setSurfaceSpeed("paving_stones:30", 12);
+        setSurfaceSpeed("unpaved", 14);
+        setSurfaceSpeed("compacted", 16);
+        setSurfaceSpeed("dirt", 10);
+        setSurfaceSpeed("earth", 12);
+        setSurfaceSpeed("fine_gravel", 18);
+        setSurfaceSpeed("grass", 8);
+        setSurfaceSpeed("grass_paver", 8);
+        setSurfaceSpeed("gravel", 12);
+        setSurfaceSpeed("ground", 12);
+        setSurfaceSpeed("ice", PUSHING_SECTION_SPEED / 2);
+        setSurfaceSpeed("metal", 10);
+        setSurfaceSpeed("mud", 10);
+        setSurfaceSpeed("pebblestone", 16);
+        setSurfaceSpeed("salt", 6);
+        setSurfaceSpeed("sand", 6);
+        setSurfaceSpeed("wood", 6);
+
+        setHighwaySpeed("living_street", 6);
+        setHighwaySpeed("steps", PUSHING_SECTION_SPEED / 2);
+
+        setHighwaySpeed("cycleway", 18);
+        setHighwaySpeed("path", 12);
+        setHighwaySpeed("footway", 6);
+        setHighwaySpeed("pedestrian", 6);
+        setHighwaySpeed("track", 12);
+        setHighwaySpeed("service", 14);
+        setHighwaySpeed("residential", 18);
+        // no other highway applies:
+        setHighwaySpeed("unclassified", 16);
+        // unknown road:
+        setHighwaySpeed("road", 12);
+
+        setHighwaySpeed("trunk", 18);
+        setHighwaySpeed("trunk_link", 18);
+        setHighwaySpeed("primary", 18);
+        setHighwaySpeed("primary_link", 18);
+        setHighwaySpeed("secondary", 18);
+        setHighwaySpeed("secondary_link", 18);
+        setHighwaySpeed("tertiary", 18);
+        setHighwaySpeed("tertiary_link", 18);
+
+        // special case see tests and #191
+        setHighwaySpeed("motorway", 18);
+        setHighwaySpeed("motorway_link", 18);
+        avoidHighwayTags.add("motorway");
+        avoidHighwayTags.add("motorway_link");
+
+        setCyclingNetworkPreference("icn", PriorityCode.BEST.getValue());
+        setCyclingNetworkPreference("ncn", PriorityCode.BEST.getValue());
+        setCyclingNetworkPreference("rcn", PriorityCode.VERY_NICE.getValue());
+        setCyclingNetworkPreference("lcn", PriorityCode.PREFER.getValue());
+        setCyclingNetworkPreference("mtb", PriorityCode.UNCHANGED.getValue());
+
+        setCyclingNetworkPreference("deprecated", PriorityCode.AVOID_AT_ALL_COSTS.getValue());
+
+        setAvoidSpeedLimit(71);
+    }
+
+    @Override
+    public int getVersion()
+    {
+        return 1;
+    }
+
+    @Override
+    public int defineWayBits( int index, int shift )
+    {
+        // first two bits are reserved for route handling in superclass
+        shift = super.defineWayBits(index, shift);
+        speedEncoder = new EncodedDoubleValue("Speed", shift, speedBits, speedFactor, highwaySpeeds.get("cycleway"),
+                maxPossibleSpeed);
+        shift += speedEncoder.getBits();
+
+        // 4 bits to store street classification
+        wayTypeEncoder = new EncodedValue("WayType", shift, 4, 1, 0, 15, true);
+        shift += wayTypeEncoder.getBits();
+
+        priorityWayEncoder = new EncodedValue("PreferWay", shift, 3, 1, 0, 7);
+        shift += priorityWayEncoder.getBits();
+
+        return shift;
+    }
+
+    @Override
+    public int defineRelationBits( int index, int shift )
+    {
+        relationCodeEncoder = new EncodedValue("RelationCode", shift, 3, 1, 0, 7);
+        return shift + relationCodeEncoder.getBits();
+    }
+
+    @Override
+    public long acceptWay( OSMWay way )
+    {
+        String highwayValue = way.getTag("highway");
+        if (highwayValue == null)
+        {
+            if (way.hasTag("route", ferries))
+            {
+                // if bike is NOT explictly tagged allow bike but only if foot is not specified
+                String bikeTag = way.getTag("bicycle");
+                if (bikeTag == null && !way.hasTag("foot") || "yes".equals(bikeTag))
+                    return acceptBit | ferryBit;
+            }
+
+            // special case not for all acceptedRailways, only platform
+            if (way.hasTag("railway", "platform"))
+                return acceptBit;
+
+            return 0;
+        }
+
+        if (!highwaySpeeds.containsKey(highwayValue))
+            return 0;
+
+        // use the way if it is tagged for bikes
+        if (way.hasTag("bicycle", intendedValues))
+            return acceptBit;
+
+        // accept only if explicitely tagged for bike usage
+        if ("motorway".equals(highwayValue) || "motorway_link".equals(highwayValue))
+            return 0;
+
+        if (way.hasTag("motorroad", "yes"))
+            return 0;
+
+        // do not use fords with normal bikes, flagged fords are in included above
+        if (isBlockFords() && (way.hasTag("highway", "ford") || way.hasTag("ford")))
+            return 0;
+
+        // check access restrictions
+        if (way.hasTag(restrictions, restrictedValues))
+            return 0;
+
+        // do not accept railways (sometimes incorrectly mapped!)
+        if (way.hasTag("railway") && !way.hasTag("railway", acceptedRailways))
+            return 0;
+
+        String sacScale = way.getTag("sac_scale");
+        if (sacScale != null)
+        {
+            if ((way.hasTag("highway", "cycleway"))
+                    && (way.hasTag("sac_scale", "hiking")))
+                return acceptBit;
+            if (!allowedSacScale(sacScale))
+                return 0;
+        }
+        return acceptBit;
+    }
+
+    boolean allowedSacScale( String sacScale )
+    {
+        // other scales are nearly impossible by an ordinary bike, see http://wiki.openstreetmap.org/wiki/Key:sac_scale
+        // Mountainhiking may be possible for downhill racers
+        return "hiking".equals(sacScale);
+    }
+
+    @Override
+    public long handleRelationTags( OSMRelation relation, long oldRelationFlags )
+    {
+        int code = 0;
+        if (relation.hasTag("route", "bicycle"))
+        {
+            Integer val = bikeNetworkToCode.get(relation.getTag("network"));
+            if (val != null)
+                code = val;
+        } else if (relation.hasTag("route", "ferry"))
+        {
+            code = PriorityCode.AVOID_IF_POSSIBLE.getValue();
+        }
+
+        int oldCode = (int) relationCodeEncoder.getValue(oldRelationFlags);
+        if (oldCode < code)
+            return relationCodeEncoder.setValue(0, code);
+        return oldRelationFlags;
+    }
+
+    @Override
+    public long handleWayTags( OSMWay way, long allowed, long relationFlags )
+    {
+        if (!isAccept(allowed))
+            return 0;
+
+        long encoded = 0;
+        if (!isFerry(allowed))
+        {
+            double speed = getSpeed(way);
+
+            // bike maxspeed handling is different from car as we don't increase speed
+            speed = applyMaxSpeed(way, speed, false);
+            encoded = handleSpeed(way, speed, encoded);
+            encoded = handleBikeRelated(way, encoded, relationFlags > UNCHANGED.getValue());
+
+            boolean isRoundabout = way.hasTag("junction", "roundabout");
+            if (isRoundabout)
+            {
+                encoded = setBool(encoded, K_ROUNDABOUT, true);
+            }
+
+        } else
+        {
+            encoded = handleFerryTags(way,
+                    highwaySpeeds.get("living_street"),
+                    highwaySpeeds.get("track"),
+                    highwaySpeeds.get("primary"));
+            encoded |= directionBitMask;
+        }
+        int priorityFromRelation = 0;
+        if (relationFlags != 0)
+            priorityFromRelation = (int) relationCodeEncoder.getValue(relationFlags);
+
+        encoded = priorityWayEncoder.setValue(encoded, handlePriority(way, priorityFromRelation));
+        return encoded;
+    }
+
+    int getSpeed( OSMWay way )
+    {
+        int speed = PUSHING_SECTION_SPEED;
+        String highwayTag = way.getTag("highway");
+        Integer highwaySpeed = highwaySpeeds.get(highwayTag);
+
+        String s = way.getTag("surface");
+        if (!Helper.isEmpty(s))
+        {
+            Integer surfaceSpeed = surfaceSpeeds.get(s);
+            if (surfaceSpeed != null)
+            {
+                speed = surfaceSpeed;
+                // Boost handling for good surfaces
+                if (highwaySpeed != null && surfaceSpeed > highwaySpeed)
+                {
+                    // Avoid boosting if pushing section
+                    if (pushingSections.contains(highwayTag))
+                        speed = highwaySpeed;
+                    else
+                        speed = surfaceSpeed;
+                }
+            }
+        } else
+        {
+            String tt = way.getTag("tracktype");
+            if (!Helper.isEmpty(tt))
+            {
+                Integer tInt = trackTypeSpeeds.get(tt);
+                if (tInt != null)
+                    speed = tInt;
+            } else
+            {
+                if (highwaySpeed != null)
+                {
+                    if (!way.hasTag("service"))
+                        speed = highwaySpeed;
+                    else
+                        speed = highwaySpeeds.get("living_street");
+                }
+            }
+        }
+
+        // Until now we assumed that the way is no pushing section
+        // Now we check, but only in case that our speed is bigger compared to the PUSHING_SECTION_SPEED
+        if ((speed > PUSHING_SECTION_SPEED)
+                && (!way.hasTag("bicycle", intendedValues) && way.hasTag("highway", pushingSections)))
+        {
+            if (way.hasTag("highway", "steps"))
+                speed = PUSHING_SECTION_SPEED / 2;
+            else
+                speed = PUSHING_SECTION_SPEED;
+        }
+
+        return speed;
+    }
+
+    @Override
+    public InstructionAnnotation getAnnotation( long flags, Translation tr )
+    {
+        int wayType = (int) wayTypeEncoder.getValue(flags);
+        String wayName = getWayName(wayType, tr);
+        return new InstructionAnnotation(0, wayName);
+    }
+
+    String getWayName(int wayType, Translation tr )
+    {
+        String wayTypeName = "";
+        switch (wayType)
+        {
+            case 0:
+                wayTypeName = tr.tr("primary");
+                break;
+            case 1:
+                wayTypeName = tr.tr("off_bike");
+                break;
+            case 2:
+                wayTypeName = tr.tr("cycleway");
+                break;
+            case 3:
+                wayTypeName = tr.tr("way");
+                break;
+        }
+
+        return wayTypeName;
+    }
+
+    /**
+     * In this method we prefer cycleways or roads with designated bike access and avoid big roads
+     * or roads with trams or pedestrian.
+     * <p>
+     * @return new priority based on priorityFromRelation and on the tags in OSMWay.
+     */
+    protected int handlePriority( OSMWay way, int priorityFromRelation )
+    {
+        TreeMap<Double, Integer> weightToPrioMap = new TreeMap<Double, Integer>();
+        if (priorityFromRelation == 0)
+            weightToPrioMap.put(0d, UNCHANGED.getValue());
+        else
+            weightToPrioMap.put(110d, priorityFromRelation);
+
+        collect(way, weightToPrioMap);
+
+        // pick priority with biggest order value
+        return weightToPrioMap.lastEntry().getValue();
+    }
+
+    // Conversion of class value to priority. See http://wiki.openstreetmap.org/wiki/Class:bicycle
+    private PriorityCode convertCallValueToPriority( String tagvalue )
+    {
+        int classvalue;
+        try
+        {
+            classvalue = Integer.parseInt(tagvalue);
+        } catch (NumberFormatException e)
+        {
+            return PriorityCode.UNCHANGED;
+        }
+
+        switch (classvalue)
+        {
+            case 3:
+                return PriorityCode.BEST;
+            case 2:
+                return PriorityCode.VERY_NICE;
+            case 1:
+                return PriorityCode.PREFER;
+            case 0:
+                return PriorityCode.UNCHANGED;
+            case -1:
+                return PriorityCode.AVOID_IF_POSSIBLE;
+            case -2:
+                return PriorityCode.REACH_DEST;
+            case -3:
+                return PriorityCode.AVOID_AT_ALL_COSTS;
+            default:
+                return PriorityCode.UNCHANGED;
+        }
+    }
+
+    /**
+     * @param weightToPrioMap associate a weight with every priority. This sorted map allows
+     * subclasses to 'insert' more important priorities as well as overwrite determined priorities.
+     */
+    void collect( OSMWay way, TreeMap<Double, Integer> weightToPrioMap )
+    {
+        String service = way.getTag("service");
+        String highway = way.getTag("highway");
+        if (way.hasTag("bicycle", "designated"))
+            weightToPrioMap.put(100d, PREFER.getValue());
+        if ("cycleway".equals(highway))
+            weightToPrioMap.put(100d, VERY_NICE.getValue());
+
+        double maxSpeed = getMaxSpeed(way);
+        if (preferHighwayTags.contains(highway) || maxSpeed > 0 && maxSpeed <= 30)
+        {
+            if (maxSpeed < avoidSpeedLimit)
+            {
+                weightToPrioMap.put(40d, PREFER.getValue());
+                if (way.hasTag("tunnel", intendedValues))
+                    weightToPrioMap.put(40d, UNCHANGED.getValue());
+            }
+        } else
+        {
+            if (avoidHighwayTags.contains(highway)
+                    || maxSpeed >= avoidSpeedLimit && !"track".equals(highway))
+            {
+                weightToPrioMap.put(50d, REACH_DEST.getValue());
+                if (way.hasTag("tunnel", intendedValues))
+                    weightToPrioMap.put(50d, AVOID_AT_ALL_COSTS.getValue());
+            }
+        }
+
+        if (pushingSections.contains(highway)
+                || way.hasTag("bicycle", "use_sidepath")
+                || "parking_aisle".equals(service))
+        {
+            if (way.hasTag("bicycle", "yes"))
+                weightToPrioMap.put(100d, UNCHANGED.getValue());
+            else
+                weightToPrioMap.put(50d, AVOID_IF_POSSIBLE.getValue());
+        }
+
+        if (way.hasTag("railway", "tram"))
+            weightToPrioMap.put(50d, AVOID_AT_ALL_COSTS.getValue());
+
+        String classBicycleSpecific = way.getTag(specificBicycleClass);
+        if (classBicycleSpecific != null)
+        {
+            // We assume that humans are better in classifying preferences compared to our algorithm above -> weight = 100
+            weightToPrioMap.put(100d, convertCallValueToPriority(classBicycleSpecific).getValue());
+        } else
+        {
+            String classBicycle = way.getTag("class:bicycle");
+            if (classBicycle != null)
+                weightToPrioMap.put(100d, convertCallValueToPriority(classBicycle).getValue());
+        }
+    }
+
+    /**
+     * Handle surface and wayType encoding
+     */
+    long handleBikeRelated( OSMWay way, long encoded, boolean partOfCycleRelation )
+    {
+        String surfaceTag = way.getTag("surface");
+        String highway = way.getTag("highway");
+        String trackType = way.getTag("tracktype");
+        String sacScale = way.getTag("sac_scale");
+        String smoothness = way.getTag("smoothness");
+        String mtbScale = way.getTag("mtb:scale");
+
+        // Populate bits at wayTypeMask with wayType            
+        WayType wayType = WayType.SMALL_WAY_PAVED;
+        boolean isPushingSection = isPushingSection(way);
+        if (isPushingSection && !partOfCycleRelation || "steps".equals(highway))
+            wayType = WayType.PUSHING_SECTION;
+
+        if ("primary".equals(highway))
+            wayType = WayType.PRIMARY_ROAD;
+        else if ("secondary".equals(highway))
+            wayType = WayType.SECONDARY_ROAD;
+        else if ("tertiary".equals(highway))
+            wayType = WayType.TERTIARY_ROAD;
+        else if ("unclassified".equals(highway)) {
+            if (pavedSurfaceTags.contains(surfaceTag))
+                wayType = WayType.UNCLASSIFIED_PAVED;
+            else
+                wayType = WayType.UNCLASSIFIED_UNPAVED;
+        }
+        else if ("residential".equals(highway) || "living_street".equals(highway) || "service".equals(highway)){
+
+            if(unpavedSurfaceTags.contains(surfaceTag))
+                wayType = WayType.SMALL_WAY_UNPAVED;
+            else if (semipavedSurfaceTags.contains(surfaceTag))
+                wayType = WayType.SMALL_WAY_SEMI_PAVED;
+            else
+                wayType = WayType.SMALL_WAY_PAVED;
+        }
+        else if ("track".equals(highway)) {
+            if(("grade4".equals(trackType) || "grade5".equals(trackType)) && (surfaceTag == null || !pavedSurfaceTags.contains(surfaceTag)))
+                wayType = WayType.TRACK_HARD;
+            else if (("grade2".equals(trackType) || "grade3".equals(trackType)) && (surfaceTag == null || !pavedSurfaceTags.contains(surfaceTag)))
+                wayType = WayType.TRACK_MIDDLE;
+            else
+                wayType = WayType.TRACK_EASY;
+        }
+        else if ("path".equals(highway)) {
+            if("horrible".equals(smoothness) || "very_horrible".equals(smoothness) || "mountainhiking".equals(sacScale) || "4".equals(mtbScale) || "5".equals(mtbScale))
+                wayType = WayType.PATH_HARD;
+            else if("bad".equals(smoothness) || "very_bad".equals(smoothness) || "hiking".equals(sacScale) || "1".equals(mtbScale) || "3".equals(mtbScale) && !pavedSurfaceTags.contains(surfaceTag))
+                wayType = WayType.PATH_MIDDLE;
+            else
+                wayType = WayType.PATH_EASY;
+        }
+
+        if (way.hasTag("bicycle", intendedValues))
+        {
+            if (isPushingSection && !way.hasTag("bicycle", "designated"))
+                wayType = WayType.SMALL_WAY_PAVED;
+            else
+                wayType = WayType.CYCLEWAY;
+        } else if ("cycleway".equals(highway))
+            wayType = WayType.CYCLEWAY;
+
+        return wayTypeEncoder.setValue(encoded, wayType.getValue());
+    }
+
+    @Override
+    public double getDouble( long flags, int key )
+    {
+        switch (key)
+        {
+            case PriorityWeighting.KEY:
+                return (double) priorityWayEncoder.getValue(flags) / BEST.getValue();
+            default:
+                return super.getDouble(flags, key);
+        }
+    }
+
+    boolean isPushingSection( OSMWay way )
+    {
+        return way.hasTag("highway", pushingSections) || way.hasTag("railway", "platform");
+    }
+
+    protected long handleSpeed( OSMWay way, double speed, long encoded )
+    {
+        encoded = setSpeed(encoded, speed);
+
+        // handle oneways        
+        boolean isOneway = way.hasTag("oneway", oneways)
+                || way.hasTag("oneway:bicycle", oneways)
+                || way.hasTag("vehicle:backward")
+                || way.hasTag("vehicle:forward")
+                || way.hasTag("bicycle:forward");
+
+        if ((isOneway || way.hasTag("junction", "roundabout"))
+                && !way.hasTag("oneway:bicycle", "no")
+                && !way.hasTag("bicycle:backward")
+                && !way.hasTag("cycleway", oppositeLanes))
+        {
+            boolean isBackward = way.hasTag("oneway", "-1")
+                    || way.hasTag("oneway:bicycle", "-1")
+                    || way.hasTag("vehicle:forward", "no")
+                    || way.hasTag("bicycle:forward", "no");
+            if (isBackward)
+                encoded |= backwardBit;
+            else
+                encoded |= forwardBit;
+
+        } else
+        {
+            encoded |= directionBitMask;
+        }
+        return encoded;
+    }
+
+    private enum WayType
+    {
+        PRIMARY_ROAD(0),
+        SECONDARY_ROAD(1),
+        TERTIARY_ROAD(2),
+        UNCLASSIFIED_PAVED(3),
+        UNCLASSIFIED_UNPAVED(4),
+        SMALL_WAY_PAVED(5),
+        SMALL_WAY_SEMI_PAVED(6),
+        SMALL_WAY_UNPAVED(7),
+        TRACK_EASY(8),
+        TRACK_MIDDLE(9),
+        TRACK_HARD(10),
+        PATH_EASY(11),
+        PATH_MIDDLE(12),
+        PATH_HARD(13),
+        CYCLEWAY(14),
+        PUSHING_SECTION(15);
+
+        private final int value;
+
+        private WayType( int value )
+        {
+            this.value = value;
+        }
+
+        public int getValue()
+        {
+            return value;
+        }
+    };
+
+    protected void setHighwaySpeed( String highway, int speed )
+    {
+        highwaySpeeds.put(highway, speed);
+    }
+
+    protected int getHighwaySpeed( String key )
+    {
+        return highwaySpeeds.get(key);
+    }
+
+    void setTrackTypeSpeed( String tracktype, int speed )
+    {
+        trackTypeSpeeds.put(tracktype, speed);
+    }
+
+    void setSurfaceSpeed( String surface, int speed )
+    {
+        surfaceSpeeds.put(surface, speed);
+    }
+
+    void setCyclingNetworkPreference( String network, int code )
+    {
+        bikeNetworkToCode.put(network, code);
+    }
+
+    void addPushingSection( String highway )
+    {
+        pushingSections.add(highway);
+    }
+
+    @Override
+    public boolean supports( Class<?> feature )
+    {
+        if (super.supports(feature))
+            return true;
+
+        return PriorityWeighting.class.isAssignableFrom(feature);
+    }
+
+    public void setAvoidSpeedLimit( int limit )
+    {
+        avoidSpeedLimit = limit;
+    }
+
+    public void setSpecificBicycleClass( String subkey )
+    {
+        specificBicycleClass = "class:bicycle:" + subkey.toString();
+    }
+
+    public double getWayType( long flags) {
+        return this.wayTypeEncoder.getValue(flags);
+    }
+
+    public double getPriorityValue ( long flags) { return this.priorityWayEncoder.getValue(flags); }
+}
diff --git a/core/src/main/java/com/graphhopper/routing/util/EncodingManager.java b/core/src/main/java/com/graphhopper/routing/util/EncodingManager.java
index 6545a1b72e..e43bcccc02 100644
--- a/core/src/main/java/com/graphhopper/routing/util/EncodingManager.java
+++ b/core/src/main/java/com/graphhopper/routing/util/EncodingManager.java
@@ -46,6 +46,7 @@
     public static final String BIKE2 = "bike2";
     public static final String RACINGBIKE = "racingbike";
     public static final String MOUNTAINBIKE = "mtb";
+    public static final String GENERIC_BIKE = "genBike";
     public static final String FOOT = "foot";
     public static final String MOTORCYCLE = "motorcycle";
 
@@ -153,6 +154,9 @@ else if (entry.equals(RACINGBIKE))
             else if (entry.equals(MOUNTAINBIKE))
                 fe = new MountainBikeFlagEncoder(configuration);
 
+            else if (entry.equals(GENERIC_BIKE))
+                fe = new GenericBikeFlagEncoder(configuration);
+
             else if (entry.equals(FOOT))
                 fe = new FootFlagEncoder(configuration);
 
diff --git a/core/src/main/java/com/graphhopper/routing/util/GenericBikeFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/GenericBikeFlagEncoder.java
new file mode 100644
index 0000000000..9ca283e2d1
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/routing/util/GenericBikeFlagEncoder.java
@@ -0,0 +1,191 @@
+/*
+ *  Licensed to GraphHopper and Peter Karich under one or more contributor
+ *  license agreements. See the NOTICE file distributed with this work for 
+ *  additional information regarding copyright ownership.
+ *
+ *  GraphHopper licenses this file to you under the Apache License, 
+ *  Version 2.0 (the "License"); you may not use this file except in 
+ *  compliance with the License. You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package com.graphhopper.routing.util;
+
+import com.graphhopper.reader.OSMRelation;
+import com.graphhopper.reader.OSMWay;
+import com.graphhopper.util.PMap;
+
+import java.util.TreeMap;
+
+import static com.graphhopper.routing.util.PriorityCode.*;
+
+/**
+ * Specifies the settings for mountain biking
+ * <p>
+ * @author ratrun
+ * @author Peter Karich
+ */
+public class GenericBikeFlagEncoder extends BikeGenericFlagEncoder
+{
+    public GenericBikeFlagEncoder()
+    {
+        this(4, 2, 0);
+    }
+
+    public GenericBikeFlagEncoder(PMap properties)
+    {
+        this(
+                (int) properties.getLong("speedBits", 4),
+                properties.getDouble("speedFactor", 2),
+                properties.getBool("turnCosts", false) ? 1 : 0
+        );
+        this.properties = properties;
+        this.setBlockFords(properties.getBool("blockFords", true));
+    }
+
+    public GenericBikeFlagEncoder(String propertiesStr)
+    {
+        this(new PMap(propertiesStr));
+    }
+
+    public GenericBikeFlagEncoder(int speedBits, double speedFactor, int maxTurnCosts)
+    {
+        super(speedBits, speedFactor, maxTurnCosts);
+        setTrackTypeSpeed("grade1", 18); // paved
+        setTrackTypeSpeed("grade2", 16); // now unpaved ...
+        setTrackTypeSpeed("grade3", 12);
+        setTrackTypeSpeed("grade4", 8);
+        setTrackTypeSpeed("grade5", 6); // like sand/grass     
+
+        setSurfaceSpeed("paved", 18);
+        setSurfaceSpeed("asphalt", 18);
+        setSurfaceSpeed("cobblestone", 10);
+        setSurfaceSpeed("cobblestone:flattened", 10);
+        setSurfaceSpeed("sett", 10);
+        setSurfaceSpeed("concrete", 14);
+        setSurfaceSpeed("concrete:lanes", 16);
+        setSurfaceSpeed("concrete:plates", 16);
+        setSurfaceSpeed("paving_stones", 16);
+        setSurfaceSpeed("paving_stones:30", 16);
+        setSurfaceSpeed("unpaved", 14);
+        setSurfaceSpeed("compacted", 14);
+        setSurfaceSpeed("dirt", 14);
+        setSurfaceSpeed("earth", 14);
+        setSurfaceSpeed("fine_gravel", 18);
+        setSurfaceSpeed("grass", 14);
+        setSurfaceSpeed("grass_paver", 14);
+        setSurfaceSpeed("gravel", 16);
+        setSurfaceSpeed("ground", 16);
+        setSurfaceSpeed("ice", PUSHING_SECTION_SPEED / 2);
+        setSurfaceSpeed("metal", 10);
+        setSurfaceSpeed("mud", 12);
+        setSurfaceSpeed("pebblestone", 12);
+        setSurfaceSpeed("salt", 12);
+        setSurfaceSpeed("sand", 10);
+        setSurfaceSpeed("wood", 10);
+
+        setHighwaySpeed("living_street", 6);
+        setHighwaySpeed("steps", PUSHING_SECTION_SPEED);
+
+        setHighwaySpeed("cycleway", 18);
+        setHighwaySpeed("path", 18);
+        setHighwaySpeed("footway", 6);
+        setHighwaySpeed("pedestrian", 6);
+        setHighwaySpeed("road", 12);
+        setHighwaySpeed("track", 18);
+        setHighwaySpeed("service", 14);
+        setHighwaySpeed("unclassified", 16);
+        setHighwaySpeed("residential", 16);
+
+        setHighwaySpeed("trunk", 18);
+        setHighwaySpeed("trunk_link", 18);
+        setHighwaySpeed("primary", 18);
+        setHighwaySpeed("primary_link", 18);
+        setHighwaySpeed("secondary", 18);
+        setHighwaySpeed("secondary_link", 18);
+        setHighwaySpeed("tertiary", 18);
+        setHighwaySpeed("tertiary_link", 18);
+
+        addPushingSection("footway");
+        addPushingSection("pedestrian");
+        addPushingSection("steps");
+
+        setCyclingNetworkPreference("icn", PREFER.getValue());
+        setCyclingNetworkPreference("ncn", PREFER.getValue());
+        setCyclingNetworkPreference("rcn", PREFER.getValue());
+        setCyclingNetworkPreference("lcn", PREFER.getValue());
+        setCyclingNetworkPreference("mtb", BEST.getValue());
+
+        addPushingSection("footway");
+        addPushingSection("pedestrian");
+        addPushingSection("steps");
+
+        avoidHighwayTags.add("primary");
+        avoidHighwayTags.add("primary_link");
+        avoidHighwayTags.add("secondary");
+        avoidHighwayTags.add("secondary_link");
+
+        preferHighwayTags.add("road");
+        preferHighwayTags.add("track");
+        preferHighwayTags.add("path");
+        preferHighwayTags.add("service");
+        preferHighwayTags.add("tertiary");
+        preferHighwayTags.add("tertiary_link");
+        preferHighwayTags.add("residential");
+        preferHighwayTags.add("unclassified");
+
+        potentialBarriers.add("kissing_gate");
+        setSpecificBicycleClass("mtb");
+    }
+
+    @Override
+    public int getVersion()
+    {
+        return 1;
+    }
+
+    @Override
+    void collect( OSMWay way, TreeMap<Double, Integer> weightToPrioMap )
+    {
+        super.collect(way, weightToPrioMap);
+
+        String highway = way.getTag("highway");
+        if ("track".equals(highway))
+        {
+            String trackType = way.getTag("tracktype");
+            if ("grade1".equals(trackType))
+                weightToPrioMap.put(50d, UNCHANGED.getValue());
+            else if (trackType == null)
+                weightToPrioMap.put(90d, PREFER.getValue());
+            else if (trackType.startsWith("grade"))
+                weightToPrioMap.put(100d, VERY_NICE.getValue());
+        }
+    }
+
+    @Override
+    public long handleRelationTags( OSMRelation relation, long oldRelationFlags )
+    {
+        oldRelationFlags = super.handleRelationTags(relation, oldRelationFlags);
+        int code = 0;
+        if (relation.hasTag("route", "mtb"))
+            code = PREFER.getValue();
+
+        int oldCode = (int) relationCodeEncoder.getValue(oldRelationFlags);
+        if (oldCode < code)
+            return relationCodeEncoder.setValue(0, code);
+        return oldRelationFlags;
+    }
+
+
+    @Override
+    public String toString()
+    {
+        return "mtb";
+    }
+}
