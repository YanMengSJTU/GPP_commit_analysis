diff --git a/core/src/main/java/com/graphhopper/GraphHopper.java b/core/src/main/java/com/graphhopper/GraphHopper.java
index 029b265fdb..18fc51c54b 100644
--- a/core/src/main/java/com/graphhopper/GraphHopper.java
+++ b/core/src/main/java/com/graphhopper/GraphHopper.java
@@ -533,8 +533,9 @@ public TranslationMap getTranslationMap() {
 	 * "graphhopper.config")
 	 */
 	public GraphHopper init(CmdArgs args) {
-		this.args = CmdArgs.readFromConfigAndMerge(args, "config",
+		args = CmdArgs.readFromConfigAndMerge(args, "config",
 				"graphhopper.config");
+		this.args=args;
 		String tmpOsmFile = args.get("osmreader.osm", "");
 		if (!Helper.isEmpty(tmpOsmFile))
 			osmFile = tmpOsmFile;
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/Boulders.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/Boulders.java
index 3101db5d3b..102fe82a65 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/Boulders.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/Boulders.java
@@ -10,7 +10,7 @@
     @Override
     protected void applyAttributes(Way way)
     {
-        way.setTag("natural", "rocks");
+        way.setTag("natural", "boulders");
     }
 
 }
diff --git a/core/src/main/java/com/graphhopper/routing/util/OsAvoidanceDecorator.java b/core/src/main/java/com/graphhopper/routing/util/OsAvoidanceDecorator.java
index c45200a3e0..4bc60f4006 100644
--- a/core/src/main/java/com/graphhopper/routing/util/OsAvoidanceDecorator.java
+++ b/core/src/main/java/com/graphhopper/routing/util/OsAvoidanceDecorator.java
@@ -17,7 +17,7 @@ public boolean isValidForWay(Way way) {
 		Boulders(2) {
 			@Override
 			public boolean isValidForWay(Way way) {
-				return hasTag(way, "natural", "boulder");
+				return hasTag(way, "natural", "boulders");
 			}
 		},
 		Cliff(4) {
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/AbstractOsDpnReaderTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/AbstractOsDpnReaderTest.java
index 84fbb28a71..61567a752c 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/AbstractOsDpnReaderTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/AbstractOsDpnReaderTest.java
@@ -7,9 +7,13 @@
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.List;
+import java.util.Locale;
 
 import org.junit.Before;
 
+import com.graphhopper.GHRequest;
+import com.graphhopper.GHResponse;
+import com.graphhopper.GraphHopper;
 import com.graphhopper.routing.util.AbstractFlagEncoder;
 import com.graphhopper.routing.util.BikeFlagEncoder;
 import com.graphhopper.routing.util.DefaultEdgeFilter;
@@ -24,6 +28,12 @@
 import com.graphhopper.storage.TurnCostExtension;
 import com.graphhopper.util.EdgeExplorer;
 import com.graphhopper.util.EdgeIterator;
+import com.graphhopper.util.Helper;
+import com.graphhopper.util.Instruction;
+import com.graphhopper.util.InstructionList;
+import com.graphhopper.util.Translation;
+import com.graphhopper.util.TranslationMap;
+import com.graphhopper.util.shapes.GHPoint;
 
 public abstract class AbstractOsDpnReaderTest {
 
@@ -143,4 +153,33 @@ protected void printNodes(EdgeExplorer outExplorer, int numNodes) {
             }
         }
     }
+    
+    protected InstructionList route(GraphHopper graphHopper, double lat1, double lon1, double lat2, double lon2, String avoid) {
+        GHPoint start = new GHPoint(lat1, lon1);
+        GHPoint end = new GHPoint(lat2, lon2);
+        System.out.println("Route from " + start + " to " + end);
+        GHRequest ghRequest = new GHRequest(start, end);
+        ghRequest.setVehicle("foot");
+        if(null!=avoid  && !Helper.isEmpty(avoid)) {
+        	ghRequest.setWeighting("fastavoid");
+        	ghRequest.getHints().put("avoidances", avoid);
+        }
+        GHResponse ghResponse = graphHopper.route(ghRequest);
+        //        System.err.println("ghResponse.getPoints() " + ghResponse.getPoints());
+        InstructionList instructionList = ghResponse.getInstructions();
+        //        outputInstructionList(instructionList);
+        return instructionList;
+    }
+    
+    protected void outputInstructionList(InstructionList instructionList) {
+        //        System.err.println("ghResponse.getInstructions() " + ghResponse.getInstructions());
+        //        System.err.println("ghResponse.getDebugInfo() " + ghResponse.getDebugInfo());
+        System.out.println("Turn Descriptions:");
+        Translation tr = new TranslationMap().doImport().getWithFallBack(Locale.US);
+        for (Instruction instruction : instructionList) {
+            System.out.println("\t" + instruction.getName() + "\t" + instruction.getDistance() + "\t" + instruction.getSign() + "\t" + instruction.getTime() + "\t" + instruction.getTurnDescription(tr));
+        }
+        System.out.println("End Turn Descriptions");
+
+    }
 }
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/DpnAttributeAvoidanceTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/DpnAttributeAvoidanceTest.java
index 7895d05a92..a2e5e73aad 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/DpnAttributeAvoidanceTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/DpnAttributeAvoidanceTest.java
@@ -1,22 +1,38 @@
 package com.graphhopper.reader.osgb.dpn;
 
+import static org.junit.Assert.assertEquals;
+
 import java.io.File;
 import java.io.IOException;
+import java.util.HashMap;
+import java.util.Map;
 
 import org.junit.Test;
 
-import com.graphhopper.routing.util.EdgeFilter;
-import com.graphhopper.storage.GraphHopperStorage;
-import com.graphhopper.util.GHUtility;
+import com.graphhopper.GraphHopper;
+import com.graphhopper.util.CmdArgs;
+import com.graphhopper.util.InstructionList;
 
 public class DpnAttributeAvoidanceTest extends AbstractOsDpnReaderTest {
 	
+
 	@Test
-	public void testAvoidSand() throws IOException {
-		GraphHopperStorage graph = configureStorage(false, false);
+	public void testAvoidBoulder() throws IOException {
 		File file = new File("./src/test/resources/com/graphhopper/reader/osgb/dpn/os-dpn-avoid.xml");
-		readGraphFile(graph, file);
-		GHUtility.printInfo(graph, 0, 30, EdgeFilter.ALL_EDGES);
+		GraphHopper hopper = new GraphHopper();
+		Map<String, String> map = new HashMap<String, String>();
+		map.put("graph.flagencoders", "foot");
+		map.put("osmreader.osm", file.getAbsolutePath());
+		map.put("reader.implementation", "OSDPN");
+		map.put("prepare.chweighting", "none");
+		map.put("graph.location", "./target/output/dpn-avoid-gh");
+		CmdArgs args = new CmdArgs(map);
+		hopper.init(args);
+		hopper.importOrLoad();
+		InstructionList instructionList = route(hopper, 50.70, -3.49, 50.69, -3.91, null);
+        assertEquals("Should be Link 17 as that is the shorteste route", "Link 17", instructionList.get(1).getName());
+        instructionList = route(hopper, 50.70, -3.49, 50.69, -3.91, "boulders");
+        assertEquals("Should be Link 19 as that avoids the boulder field", "Link 19", instructionList.get(1).getName());
 	}
 
 }
diff --git a/core/src/test/java/com/graphhopper/routing/util/OsAvoidanceDecoratorTest.java b/core/src/test/java/com/graphhopper/routing/util/OsAvoidanceDecoratorTest.java
index d5ef6474fa..412b33a491 100644
--- a/core/src/test/java/com/graphhopper/routing/util/OsAvoidanceDecoratorTest.java
+++ b/core/src/test/java/com/graphhopper/routing/util/OsAvoidanceDecoratorTest.java
@@ -20,7 +20,7 @@ public void defineWayBits() {
     @Test
     public void testBoulderAttributeStorage() {
         Way way = new OSITNWay(1L);
-        way.setTag("natural", "boulder");
+        way.setTag("natural", "boulders");
         long wayFlag = osAvoidances.handleWayTags(way,0);
         assertEquals(OsAvoidanceDecorator.AvoidanceType.Boulders.getValue(), wayFlag);
 
diff --git a/core/src/test/resources/com/graphhopper/reader/osgb/dpn/os-dpn-avoid.xml b/core/src/test/resources/com/graphhopper/reader/osgb/dpn/os-dpn-avoid.xml
index 59190b4261..33875f3f60 100644
--- a/core/src/test/resources/com/graphhopper/reader/osgb/dpn/os-dpn-avoid.xml
+++ b/core/src/test/resources/com/graphhopper/reader/osgb/dpn/os-dpn-avoid.xml
@@ -88,6 +88,7 @@
 			<dpn:startNode xlink:href="#4000000025277879" />
 			<dpn:endNode xlink:href="#4000000025277880" />
 			<dpn:descriptiveTerm codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#NoPhysicalManifestation">No Physical Manifestation</dpn:descriptiveTerm>
+			 <dpn:name>Link 16</dpn:name>
 			<dpn:rightOfUse codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/RightOfWayValue#Footpath">Footpath</dpn:rightOfUse>
 			<dpn:geometry>
 				<gml:LineString srsName="dpn:BNG">
@@ -103,6 +104,7 @@
 			<dpn:startNode xlink:href="#4000000025277880" />
 			<dpn:endNode xlink:href="#4000000025277884" />
 			<dpn:descriptiveTerm codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#NoPhysicalManifestation">No Physical Manifestation</dpn:descriptiveTerm>
+			<dpn:name>Link 17</dpn:name>
 			<dpn:rightOfUse codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/RightOfWayValue#Footpath">Footpath</dpn:rightOfUse>
 			<dpn:geometry>
 				<gml:LineString srsName="dpn:BNG">
@@ -118,6 +120,7 @@
 			<dpn:startNode xlink:href="#4000000025277884" />
 			<dpn:endNode xlink:href="#4000000025277882" />
 			<dpn:descriptiveTerm codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#NoPhysicalManifestation">No Physical Manifestation</dpn:descriptiveTerm>
+			<dpn:name>Link 18</dpn:name>
 			<dpn:potentialHazardCrossed>Boulders</dpn:potentialHazardCrossed>
 			<dpn:rightOfUse codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/RightOfWayValue#Footpath">Footpath</dpn:rightOfUse>
 			<dpn:geometry>
@@ -134,6 +137,7 @@
 			<dpn:startNode xlink:href="#4000000025277880" />
 			<dpn:endNode xlink:href="#4000000025277883" />
 			<dpn:descriptiveTerm	codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#NoPhysicalManifestation">No Physical Manifestation</dpn:descriptiveTerm>
+			<dpn:name>Link 19</dpn:name>
 			<dpn:rightOfUse codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/RightOfWayValue#Footpath">Footpath</dpn:rightOfUse>
 			<dpn:geometry>
 				<gml:LineString srsName="dpn:BNG">
@@ -149,6 +153,7 @@
 			<dpn:startNode xlink:href="#4000000025277883" />
 			<dpn:endNode xlink:href="#4000000025277882" />
 			<dpn:descriptiveTerm	codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#NoPhysicalManifestation">No Physical Manifestation</dpn:descriptiveTerm>
+			<dpn:name>Link 20</dpn:name>
 			<dpn:rightOfUse codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/RightOfWayValue#Footpath">Footpath</dpn:rightOfUse>
 			<dpn:geometry>
 				<gml:LineString srsName="dpn:BNG">
@@ -164,6 +169,7 @@
 			<dpn:startNode xlink:href="#4000000025277882" />
 			<dpn:endNode xlink:href="#4000000025277885" />
 			<dpn:descriptiveTerm	codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#NoPhysicalManifestation">No Physical Manifestation</dpn:descriptiveTerm>
+			<dpn:name>Link 21</dpn:name>
 			<dpn:rightOfUse codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/RightOfWayValue#Footpath">Footpath</dpn:rightOfUse>
 			<dpn:geometry>
 				<gml:LineString srsName="dpn:BNG">
