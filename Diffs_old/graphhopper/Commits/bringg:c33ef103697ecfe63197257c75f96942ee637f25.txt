diff --git a/core/src/main/java/com/graphhopper/routing/util/DefaultFlagEncoderFactory.java b/core/src/main/java/com/graphhopper/routing/util/DefaultFlagEncoderFactory.java
index 2da33085b2..947476bd54 100644
--- a/core/src/main/java/com/graphhopper/routing/util/DefaultFlagEncoderFactory.java
+++ b/core/src/main/java/com/graphhopper/routing/util/DefaultFlagEncoderFactory.java
@@ -27,6 +27,9 @@
 public class DefaultFlagEncoderFactory implements FlagEncoderFactory {
     @Override
     public FlagEncoder createFlagEncoder(String name, PMap configuration) {
+        if (name.equals(AVOID_TOLL_ROADS))
+            return new SupportTollRoadsFlagEncoder(configuration);
+
         if (name.equals(GENERIC))
             return new DataFlagEncoder(configuration);
 
diff --git a/core/src/main/java/com/graphhopper/routing/util/FlagEncoderFactory.java b/core/src/main/java/com/graphhopper/routing/util/FlagEncoderFactory.java
index 82e8b45d71..227c869be4 100644
--- a/core/src/main/java/com/graphhopper/routing/util/FlagEncoderFactory.java
+++ b/core/src/main/java/com/graphhopper/routing/util/FlagEncoderFactory.java
@@ -33,6 +33,7 @@
     final String HIKE = "hike";
     final String MOTORCYCLE = "motorcycle";
     final String GENERIC = "generic";
+    final String AVOID_TOLL_ROADS = "avoid_toll_roads";
     final FlagEncoderFactory DEFAULT = new DefaultFlagEncoderFactory();
 
     FlagEncoder createFlagEncoder(String name, PMap configuration);
diff --git a/core/src/main/java/com/graphhopper/routing/util/SupportTollRoadsFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/SupportTollRoadsFlagEncoder.java
new file mode 100644
index 0000000000..20569686cf
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/routing/util/SupportTollRoadsFlagEncoder.java
@@ -0,0 +1,32 @@
+package com.graphhopper.routing.util;
+
+import com.graphhopper.reader.ReaderWay;
+import com.graphhopper.util.PMap;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import static com.graphhopper.routing.util.FlagEncoderFactory.AVOID_TOLL_ROADS;
+
+public class SupportTollRoadsFlagEncoder extends CarFlagEncoder {
+    private final Logger logger = LoggerFactory.getLogger(getClass());
+
+    public SupportTollRoadsFlagEncoder(PMap properties) {
+        super(properties);
+    }
+
+    @Override
+    public long acceptWay(ReaderWay way) {
+        logger.info("SupportTollRoadsFlagEncoder handleWayTags" );
+
+        if (way.hasTag("toll", String.valueOf(Boolean.TRUE)) || way.hasTag("toll", "yes") || way.hasTag("barrier", "toll_booth")) {
+            return 0;
+        }
+
+        return super.acceptWay(way);
+    }
+
+    @Override
+    public String toString() {
+        return AVOID_TOLL_ROADS;
+    }
+}
\ No newline at end of file
diff --git a/core/src/test/java/com/graphhopper/routing/util/SupportTollRoadsFlagEncoderTest.java b/core/src/test/java/com/graphhopper/routing/util/SupportTollRoadsFlagEncoderTest.java
new file mode 100644
index 0000000000..c21e8ba4ee
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/routing/util/SupportTollRoadsFlagEncoderTest.java
@@ -0,0 +1,45 @@
+package com.graphhopper.routing.util;
+
+import com.graphhopper.reader.ReaderWay;
+import com.graphhopper.util.PMap;
+import org.junit.Before;
+import org.junit.Test;
+
+import static org.junit.Assert.*;
+
+public class SupportTollRoadsFlagEncoderTest {
+    private final PMap pMap = new PMap();
+    private final SupportTollRoadsFlagEncoder supportTollRoadsFlagEncoder = new SupportTollRoadsFlagEncoder(pMap);
+    private final ReaderWay readerWay = new ReaderWay(1);
+    private final ReaderWay readerWayWithoutTollBit = new ReaderWay(2);
+
+    @Before
+    public void defineWayBits() {
+        supportTollRoadsFlagEncoder.defineWayBits(0, 0);
+        readerWay.setTag("toll", String.valueOf(Boolean.TRUE));
+        readerWay.setTag("highway", "motorroad");
+        readerWayWithoutTollBit.setTag("toll", String.valueOf(Boolean.FALSE));
+        readerWayWithoutTollBit.setTag("highway", "motorroad");
+    }
+
+    @Test
+    public void notAccept() {
+        readerWay.setTag("toll", String.valueOf(Boolean.TRUE));
+        assertEquals(supportTollRoadsFlagEncoder.acceptWay(readerWay), 0);
+
+        readerWay.setTag("toll", "yes");
+        assertEquals(supportTollRoadsFlagEncoder.acceptWay(readerWay), 0);
+        readerWay.removeTag("toll");
+
+
+        readerWay.setTag("barrier", "toll_booth");
+        assertEquals(supportTollRoadsFlagEncoder.acceptWay(readerWay), 0);
+        readerWay.removeTag("barrier");
+    }
+
+    @Test
+    public void accept() {
+        assertNotEquals(supportTollRoadsFlagEncoder.acceptWay(readerWayWithoutTollBit), 0);
+    }
+
+}
\ No newline at end of file
