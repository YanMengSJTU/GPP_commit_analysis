diff --git a/core/src/main/java/com/michaz/OriginalDirectionFlagEncoder.java b/core/src/main/java/com/michaz/OriginalDirectionFlagEncoder.java
index 41f1ac2933..35c389c0d0 100644
--- a/core/src/main/java/com/michaz/OriginalDirectionFlagEncoder.java
+++ b/core/src/main/java/com/michaz/OriginalDirectionFlagEncoder.java
@@ -18,17 +18,15 @@
 
 package com.michaz;
 
-import com.graphhopper.reader.ReaderRelation;
-import com.graphhopper.reader.ReaderWay;
-import com.graphhopper.routing.util.AbstractFlagEncoder;
+import com.graphhopper.routing.util.CarFlagEncoder;
 
-public class OriginalDirectionFlagEncoder extends AbstractFlagEncoder {
+public class OriginalDirectionFlagEncoder extends CarFlagEncoder {
 
 
     private long originalDirectionBitmask;
 
     public OriginalDirectionFlagEncoder() {
-        super(0, 0, 0);
+        super();
     }
 
     @Override
@@ -38,26 +36,6 @@ public int defineWayBits(int index, int shift) {
         return shift + 1;
     }
 
-    @Override
-    public long handleRelationTags(ReaderRelation readerRelation, long l) {
-        return l;
-    }
-
-    @Override
-    public long acceptWay(ReaderWay readerWay) {
-        return 0;
-    }
-
-    @Override
-    public long handleWayTags(ReaderWay readerWay, long l, long l1) {
-        return 0;
-    }
-
-    @Override
-    public int getVersion() {
-        return 0;
-    }
-
     public long reverseFlags(long flags) {
         return super.reverseFlags(flags) ^ this.originalDirectionBitmask;
     }
@@ -70,8 +48,4 @@ public long setOriginalDirection(long flags, boolean originalDirection) {
         return originalDirection ? flags | originalDirectionBitmask : flags & ~originalDirectionBitmask;
     }
 
-    public String toString() {
-        return "original-direction";
-    }
-
 }
diff --git a/web/src/main/java/com/graphhopper/http/GraphHopperManaged.java b/web/src/main/java/com/graphhopper/http/GraphHopperManaged.java
index 8272c8e396..1353f3d572 100644
--- a/web/src/main/java/com/graphhopper/http/GraphHopperManaged.java
+++ b/web/src/main/java/com/graphhopper/http/GraphHopperManaged.java
@@ -23,6 +23,7 @@
 import com.graphhopper.routing.util.DefaultFlagEncoderFactory;
 import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.routing.util.FlagEncoderFactory;
+import com.graphhopper.routing.util.HintsMap;
 import com.graphhopper.routing.weighting.Weighting;
 import com.graphhopper.spatialrules.SpatialRuleLookupHelper;
 import com.graphhopper.util.CmdArgs;
@@ -63,7 +64,7 @@ public GraphHopperManaged(CmdArgs configuration) {
             private FlagEncoderFactory delegate = new DefaultFlagEncoderFactory();
             @Override
             public FlagEncoder createFlagEncoder(String name, PMap configuration) {
-                if (name.equals("original-direction")) {
+                if (name.equals("car")) {
                     return new OriginalDirectionFlagEncoder();
                 }
                 return delegate.createFlagEncoder(name, configuration);
@@ -75,7 +76,7 @@ public FlagEncoder createFlagEncoder(String name, PMap configuration) {
             @Override
             public List<PathDetailsBuilder> createPathDetailsBuilders(List<String> requestedPathDetails, FlagEncoder encoder, Weighting weighting) {
                 // request-scoped
-                OriginalDirectionFlagEncoder originalDirectionFlagEncoder = (OriginalDirectionFlagEncoder) graphHopper.getGraphHopperStorage().getEncodingManager().getEncoder("original-direction");
+                OriginalDirectionFlagEncoder originalDirectionFlagEncoder = (OriginalDirectionFlagEncoder) graphHopper.getGraphHopperStorage().getEncodingManager().getEncoder("car");
                 List<PathDetailsBuilder> builders = new ArrayList<>();
                 if (requestedPathDetails.contains(AVERAGE_SPEED))
                     builders.add(new AverageSpeedDetails(encoder));
