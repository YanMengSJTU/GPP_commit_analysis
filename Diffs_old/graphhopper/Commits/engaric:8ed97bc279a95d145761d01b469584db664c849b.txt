diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnElement.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnElement.java
index 7c0ec997b8..53a0e14ed4 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnElement.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnElement.java
@@ -205,6 +205,12 @@ private String getOsmMappedTypeName(String roadType) {
         case "B Road":
             typeName = "secondary";
             break;
+        case "Minor Road":
+            typeName = "unclassified";
+            break;    
+        case "Local Road":
+            typeName = "unclassified";
+            break;    
         case "Alley":
             typeName = "service";
             setTag("service", "alley");
@@ -215,6 +221,9 @@ private String getOsmMappedTypeName(String roadType) {
         case "Path":
             typeName = "path";
             break;
+        case "Ferry Crossing":
+            typeName = "ferry";
+            break;
         default:
             break;
         }
diff --git a/core/src/main/java/com/graphhopper/routing/util/EncodingManager.java b/core/src/main/java/com/graphhopper/routing/util/EncodingManager.java
index 94a4ce3a64..a2a0c06fb2 100644
--- a/core/src/main/java/com/graphhopper/routing/util/EncodingManager.java
+++ b/core/src/main/java/com/graphhopper/routing/util/EncodingManager.java
@@ -53,6 +53,7 @@
 	public static final String BIKE2 = "bike2";
 	public static final String RACINGBIKE = "racingbike";
 	public static final String MOUNTAINBIKE = "mtb";
+	public static final String OSMOUNTAINBIKE = "osmtb";
 	public static final String FOOT = "foot";
 	public static final String FOOT2 = "foot2";
 	public static final String MOTORCYCLE = "motorcycle";
@@ -165,6 +166,9 @@ else if (entry.equals(RACINGBIKE))
 
 			else if (entry.equals(MOUNTAINBIKE))
 				fe = new MountainBikeFlagEncoder(entryVal);
+			
+			else if (entry.equals(OSMOUNTAINBIKE))
+				fe = new OsBikeFlagEncoder(entryVal);
 
 			else if (entry.equals(FOOT))
 				fe = new FootFlagEncoder(entryVal);
diff --git a/core/src/main/java/com/graphhopper/routing/util/FastestWithAvoidancesWeighting.java b/core/src/main/java/com/graphhopper/routing/util/FastestWithAvoidancesWeighting.java
index 0ed49d2d6f..99ae9fbe76 100644
--- a/core/src/main/java/com/graphhopper/routing/util/FastestWithAvoidancesWeighting.java
+++ b/core/src/main/java/com/graphhopper/routing/util/FastestWithAvoidancesWeighting.java
@@ -25,6 +25,7 @@ public double calcWeight( EdgeIteratorState edge, boolean reverse, int prevOrNex
 		try {
 			long extensionPointer = edge.getAdditionalField();
 			long wayType = extension.getAvoidanceFlags(extensionPointer);
+			wayType = encoder.getLong(wayType, AbstractAvoidanceDecorator.KEY);
 			if(bitMask!=0 && ((wayType & bitMask) > 0)) {
 				return Double.POSITIVE_INFINITY;
 			}
diff --git a/core/src/main/java/com/graphhopper/routing/util/PriorityWithAvoidancesWeighting.java b/core/src/main/java/com/graphhopper/routing/util/PriorityWithAvoidancesWeighting.java
index e7cefcf704..c0f289bbf0 100644
--- a/core/src/main/java/com/graphhopper/routing/util/PriorityWithAvoidancesWeighting.java
+++ b/core/src/main/java/com/graphhopper/routing/util/PriorityWithAvoidancesWeighting.java
@@ -24,6 +24,7 @@ public double calcWeight( EdgeIteratorState edge, boolean reverse, int prevOrNex
 		try {
 			long extensionPointer = edge.getAdditionalField();
 			long wayType = extension.getAvoidanceFlags(extensionPointer);
+			wayType = encoder.getLong(wayType, AbstractAvoidanceDecorator.KEY);
 			if(bitMask!=0 && ((wayType & bitMask) > 0)) {
 				return Double.POSITIVE_INFINITY;
 			}
diff --git a/core/src/main/java/com/graphhopper/routing/util/ShortestWithAvoidancesWeighting.java b/core/src/main/java/com/graphhopper/routing/util/ShortestWithAvoidancesWeighting.java
index dd317cea79..f4e0c64306 100644
--- a/core/src/main/java/com/graphhopper/routing/util/ShortestWithAvoidancesWeighting.java
+++ b/core/src/main/java/com/graphhopper/routing/util/ShortestWithAvoidancesWeighting.java
@@ -26,6 +26,7 @@ public double calcWeight( EdgeIteratorState edge, boolean reverse, int prevOrNex
 		try {
 			long extensionPointer = edge.getAdditionalField();
 			long wayType = extension.getAvoidanceFlags(extensionPointer);
+			wayType = encoder.getLong(wayType, AbstractAvoidanceDecorator.KEY);
 			if(bitMask!=0 && ((wayType & bitMask) > 0)) {
 				return Double.POSITIVE_INFINITY;
 			}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/OsDpnWayTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/OsDpnWayTest.java
index 544b1d0fb9..3c15568953 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/OsDpnWayTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/OsDpnWayTest.java
@@ -644,6 +644,67 @@
             + "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n"
             + "        </gml:LineString>\n" + "      </dpn:geometry>\n" + "    </dpn:RouteLink>";
 
+    public static final String localRoad = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">"
+            + "  <gml:featureMember>\n"
+            + "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">"
+            + "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n"
+            + "      <dpn:versionID>1</dpn:versionID>\n"
+            + "      <dpn:versionDate>2014-12-12</dpn:versionDate>\n"
+            + "      <dpn:startNode xlink:href=\"#df162dd8-c284-469b-81d6-d63105a39c7f\"/>\n"
+            + "      <dpn:endNode xlink:href=\"#56dc4c0b-0586-4849-b3e2-1e00ee149429\"/>\n"
+            + "      <dpn:descriptiveGroup codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork\">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>\n"
+            + "      <dpn:descriptiveTerm codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue\">Local Road</dpn:descriptiveTerm>\n"
+            + "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#Unmade\">Unmade</dpn:surfaceType>\n"
+            + "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#BelowSurfaceLevelTunnel\">Below Surface Level Tunnel</dpn:physicalLevel>\n"
+            + "      <dpn:adoptedByNationalCycleRoute>false</dpn:adoptedByNationalCycleRoute>\n"
+            + "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n"
+            + "      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>\n"
+            + "      <dpn:withinAccessLand>true</dpn:withinAccessLand>\n"
+            + "      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>\n"
+            + "      <dpn:verticalGain>\n"
+            + "        <dpn:VerticalGainType>\n"
+            + "          <dpn:inDirection uom=\"m\">9</dpn:inDirection>\n"
+            + "          <dpn:againstDirection uom=\"m\">2</dpn:againstDirection>\n"
+            + "        </dpn:VerticalGainType>\n"
+            + "      </dpn:verticalGain>\n"
+            + "      <dpn:planimetricLength uom=\"m\">85</dpn:planimetricLength>\n"
+            + "      <dpn:surfaceLength uom=\"m\">86</dpn:surfaceLength>\n"
+            + "      <dpn:geometry>\n"
+            + "        <gml:LineString srsName=\"urn:ogc:def:crs:EPSG::7405\" gml:id=\"LOCAL_ID_29519\">\n"
+            + "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n"
+            + "        </gml:LineString>\n" + "      </dpn:geometry>\n" + "    </dpn:RouteLink>";
+
+    public static final String minorRoad = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">"
+            + "  <gml:featureMember>\n"
+            + "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">"
+            + "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n"
+            + "      <dpn:versionID>1</dpn:versionID>\n"
+            + "      <dpn:versionDate>2014-12-12</dpn:versionDate>\n"
+            + "      <dpn:startNode xlink:href=\"#df162dd8-c284-469b-81d6-d63105a39c7f\"/>\n"
+            + "      <dpn:endNode xlink:href=\"#56dc4c0b-0586-4849-b3e2-1e00ee149429\"/>\n"
+            + "      <dpn:descriptiveGroup codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork\">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>\n"
+            + "      <dpn:descriptiveTerm codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue\">Minor Road</dpn:descriptiveTerm>\n"
+            + "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#Unmade\">Unmade</dpn:surfaceType>\n"
+            + "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#BelowSurfaceLevelTunnel\">Below Surface Level Tunnel</dpn:physicalLevel>\n"
+            + "      <dpn:adoptedByNationalCycleRoute>false</dpn:adoptedByNationalCycleRoute>\n"
+            + "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n"
+            + "      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>\n"
+            + "      <dpn:withinAccessLand>true</dpn:withinAccessLand>\n"
+            + "      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>\n"
+            + "      <dpn:verticalGain>\n"
+            + "        <dpn:VerticalGainType>\n"
+            + "          <dpn:inDirection uom=\"m\">9</dpn:inDirection>\n"
+            + "          <dpn:againstDirection uom=\"m\">2</dpn:againstDirection>\n"
+            + "        </dpn:VerticalGainType>\n"
+            + "      </dpn:verticalGain>\n"
+            + "      <dpn:planimetricLength uom=\"m\">85</dpn:planimetricLength>\n"
+            + "      <dpn:surfaceLength uom=\"m\">86</dpn:surfaceLength>\n"
+            + "      <dpn:geometry>\n"
+            + "        <gml:LineString srsName=\"urn:ogc:def:crs:EPSG::7405\" gml:id=\"LOCAL_ID_29519\">\n"
+            + "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n"
+            + "        </gml:LineString>\n" + "      </dpn:geometry>\n" + "    </dpn:RouteLink>";
+
+    
     @Test
     public void testSurface() throws XMLStreamException, FactoryException, TransformException {
         OsDpnWay way = getOsDpnWay(surfaceWay);
@@ -779,6 +840,20 @@ public void testPath() throws XMLStreamException, FactoryException, TransformExc
         OsDpnWay way = getOsDpnWay(path);
         assertTrue(way.hasTag("highway", "path"));
     }
+    
+    @Test
+    public void testLocalRoad() throws XMLStreamException, FactoryException, TransformException {
+        OsDpnWay way = getOsDpnWay(localRoad);
+        assertTrue(way.hasTag("highway", "unclassified"));
+        assertTrue(way.hasTag("name", "Local Road"));
+    }
+    
+    @Test
+    public void testMinorRoad() throws XMLStreamException, FactoryException, TransformException {
+        OsDpnWay way = getOsDpnWay(minorRoad);
+        assertTrue(way.hasTag("highway", "unclassified"));
+        assertTrue(way.hasTag("name", "Minor Road"));
+    }
 
     private OsDpnWay getOsDpnWay(String way) throws XMLStreamException, FactoryException, TransformException {
         XMLInputFactory factory = XMLInputFactory.newInstance();
diff --git a/core/src/test/java/com/graphhopper/routing/util/FastestWithAvoidancesWeightingTest.java b/core/src/test/java/com/graphhopper/routing/util/FastestWithAvoidancesWeightingTest.java
index b92196497a..19f9d087f4 100644
--- a/core/src/test/java/com/graphhopper/routing/util/FastestWithAvoidancesWeightingTest.java
+++ b/core/src/test/java/com/graphhopper/routing/util/FastestWithAvoidancesWeightingTest.java
@@ -96,8 +96,11 @@ private void configureSpeeds() {
 		when(encoder.getSpeed(anyLong())).thenReturn(50D);
 	}
 	
+	/**
+	* Confirms flags are retrieved from extension and then decoded to expected value.
+	*/
 	private OngoingStubbing<Long> expectStoredAvoidance() {
-		return when(avoidanceExtension.getAvoidanceFlags(anyLong()));
+		when(avoidanceExtension.getAvoidanceFlags(anyLong())).thenReturn(88L);
+		return when(encoder.getLong(eq(88L), eq(AbstractAvoidanceDecorator.KEY)));
 	}
-
 }
diff --git a/core/src/test/java/com/graphhopper/routing/util/PriorityWithAvoidancesWeightingTest.java b/core/src/test/java/com/graphhopper/routing/util/PriorityWithAvoidancesWeightingTest.java
index f39dc09163..fb5036071d 100644
--- a/core/src/test/java/com/graphhopper/routing/util/PriorityWithAvoidancesWeightingTest.java
+++ b/core/src/test/java/com/graphhopper/routing/util/PriorityWithAvoidancesWeightingTest.java
@@ -98,9 +98,11 @@ private void configureSpeedsAndPriority() {
 		when(encoder.getDouble(anyLong(), eq(101))).thenReturn(10D);
 	}
 	
+	/**
+	* Confirms flags are retrieved from extension and then decoded to expected value.
+	*/
 	private OngoingStubbing<Long> expectStoredAvoidance() {
-		return when(avoidanceExtension.getAvoidanceFlags(anyLong()));
+		when(avoidanceExtension.getAvoidanceFlags(anyLong())).thenReturn(88L);
+		return when(encoder.getLong(eq(88L), eq(AbstractAvoidanceDecorator.KEY)));
 	}
-	
-
 }
diff --git a/core/src/test/java/com/graphhopper/routing/util/ShortestWithAvoidancesWeightingTest.java b/core/src/test/java/com/graphhopper/routing/util/ShortestWithAvoidancesWeightingTest.java
index ac48627677..3a13c50531 100644
--- a/core/src/test/java/com/graphhopper/routing/util/ShortestWithAvoidancesWeightingTest.java
+++ b/core/src/test/java/com/graphhopper/routing/util/ShortestWithAvoidancesWeightingTest.java
@@ -97,8 +97,11 @@ private void configureSpeeds() {
 		when(encoder.getSpeed(anyLong())).thenReturn(50D);
 	}
 	
+	/**
+	* Confirms flags are retrieved from extension and then decoded to expected value.
+	*/
 	private OngoingStubbing<Long> expectStoredAvoidance() {
-		return when(avoidanceExtension.getAvoidanceFlags(anyLong()));
+		when(avoidanceExtension.getAvoidanceFlags(anyLong())).thenReturn(88L);
+		return when(encoder.getLong(eq(88L), eq(AbstractAvoidanceDecorator.KEY)));
 	}
-
 }
diff --git a/web/src/main/webapp/index.html b/web/src/main/webapp/index.html
index 92f345d8d9..90997d3547 100644
--- a/web/src/main/webapp/index.html
+++ b/web/src/main/webapp/index.html
@@ -45,7 +45,7 @@
 
                     </span>
                     <div id="advanced">
-                    <button title="Settings" id="settings-btn">
+                    <button title="Settings" id="settings-btn" class="btn">Settings</button>
                     </button>
                     </div>
                      <div class="collapse">
