diff --git a/reader-osm/src/main/java/com/graphhopper/reader/osm/RoutingExample.java b/reader-osm/src/main/java/com/graphhopper/reader/osm/RoutingExample.java
index 6e5118c60a..24855e0c42 100644
--- a/reader-osm/src/main/java/com/graphhopper/reader/osm/RoutingExample.java
+++ b/reader-osm/src/main/java/com/graphhopper/reader/osm/RoutingExample.java
@@ -18,18 +18,12 @@
 public class RoutingExample {
 
     // PBF from: https://mapzen.com/data/metro-extracts/
-    private static final String osmFile = "./reader-osm/files/san-francisco-bay_california.osm.pbf";
-    private static final String graphFolder = "./reader-osm/target/tmp/ghosm";
+    private static final String osmFile = "./reader-osm/files/new-york_new-york.osm.pbf";
+    private static final String graphFolder = "./reader-osm/target/tmp/ghosm_nyc";
 
     private static final TranslationMap trMap = new TranslationMap().doImport();
     private static final Translation usTR = trMap.getWithFallBack(Locale.US);
 
-    private static final float exlatFrom = 37.76018f;
-    private static final float exlonFrom = -122.42712f;
-    private static final float exlatTo = 37.77220f;
-    private static final float exlonTo = -122.49171f;
-
-
     public static void main(String[] args) throws Exception {
         // create one GraphHopper instance
         System.out.println(usTR);
@@ -40,10 +34,11 @@ public static void main(String[] args) throws Exception {
         hopper.setGraphHopperLocation(graphFolder);
         hopper.setEncodingManager(new EncodingManager("car"));
 
-        String inputPointsFN = "../data/output/sf_grid_od_pairs.csv";
-        String outputPointsFN = "../data/output/sf_grid_ghshort_routes.csv";
+        String inputPointsFN = "../data/output/nyc_grid_od_pairs.csv";
+        String outputPointsFN = "../data/output/nyc_grid_graphhopper_routes.csv";
         ArrayList<float[]> inputPoints = new ArrayList<float[]>();
         ArrayList<String> id_to_points = new ArrayList<String>();
+        ArrayList<String> maneuvers = new ArrayList<>();
         Scanner sc_in = new Scanner(new File(inputPointsFN));
         FileWriter sc_out = new FileWriter(outputPointsFN, true);
         sc_out.write("ID,polyline_points,total_time_in_sec,total_distance_in_meters,number_of_steps,maneuvers" +
@@ -95,7 +90,7 @@ public static void main(String[] args) throws Exception {
                 System.out.println(rsp.getErrors().toString());
                 System.out.println(i + ": Skipping.");
                 sc_out.write(od_id + "," + "\"[(" + points[0] + "," + points[1] + "),(" + points[2] + "," + points[3]
-                        + ")]\"," + "-1,-1,[],-1,[]" + System.getProperty("line.separator"));
+                        + ")]\"," + "-1,-1,-1,[]" + System.getProperty("line.separator"));
                 routes_skipped++;
                 continue;
             }
@@ -109,13 +104,15 @@ public static void main(String[] args) throws Exception {
             long timeInSec = path.getTime() / 1000;
             InstructionList il = path.getInstructions();
             int numDirections = il.getSize();
-            sc_out.write(od_id + "," + "\"[" + pointList + "]\"," + timeInSec + "," + distance + ",[]," + numDirections +
-                    ",[]" + System.getProperty("line.separator"));
-            System.out.println(i + ": Distance: " + distance + "m;\tTime: " + timeInSec + "sec;\t# Directions: " + numDirections);
             // iterate over every turn instruction
-            //for(Instruction instruction : il) {
-            //    System.out.println(instruction.getTurnDescription(usTR) + " for " + instruction.getDistance() + " meters.");
-            //}
+            maneuvers.clear();
+            for (Instruction instruction : il) {
+                maneuvers.add(instruction.getSimpleTurnDescription());
+                // System.out.println(instruction.getTurnDescription(usTR) + " for " + instruction.getDistance() + " meters.");
+            }
+            sc_out.write(od_id + "," + "\"[" + pointList + "]\"," + timeInSec + "," + distance + "," + numDirections +
+                    "," + maneuvers.toString() + System.getProperty("line.separator"));
+            System.out.println(i + ": Distance: " + distance + "m;\tTime: " + timeInSec + "sec;\t# Directions: " + numDirections);
 
             // or get the json
             iList = il.createJson();
