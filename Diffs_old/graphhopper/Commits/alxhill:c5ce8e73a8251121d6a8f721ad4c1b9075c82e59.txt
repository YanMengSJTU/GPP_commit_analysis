diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetHopper.java b/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetHopper.java
index 54a18b8556..a67b8c4d7d 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetHopper.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetHopper.java
@@ -3,6 +3,7 @@
 import com.graphhopper.GraphHopper;
 import com.graphhopper.marmoset.util.CellGraph;
 import com.graphhopper.marmoset.util.Location;
+import com.graphhopper.marmoset.vehicle.Vehicle;
 import com.graphhopper.util.CmdArgs;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/util/CellIterator.java b/marmoset/src/main/java/com/graphhopper/marmoset/util/CellIterator.java
index a091f44ba8..4c1db05426 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/util/CellIterator.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/util/CellIterator.java
@@ -1,6 +1,6 @@
 package com.graphhopper.marmoset.util;
 
-import com.graphhopper.marmoset.VehicleEdgeIterator;
+import com.graphhopper.marmoset.vehicle.DijkstraVehicleIterator;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -9,12 +9,12 @@
  */
 public class CellIterator {
 
-    private VehicleEdgeIterator route;
+    private DijkstraVehicleIterator route;
     private CellGraph cg;
     private int cellIndex;
     private static final Logger logger = LoggerFactory.getLogger(CellIterator.class);
 
-    public CellIterator(VehicleEdgeIterator route, CellGraph cellGraph, int cellId)
+    public CellIterator(DijkstraVehicleIterator route, CellGraph cellGraph, int cellId)
     {
         this.route = route;
         this.cg = cellGraph;
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/VehicleEdgeIterator.java b/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/DijkstraVehicleIterator.java
similarity index 91%
rename from marmoset/src/main/java/com/graphhopper/marmoset/VehicleEdgeIterator.java
rename to marmoset/src/main/java/com/graphhopper/marmoset/vehicle/DijkstraVehicleIterator.java
index b32f8aa8f8..311068bfaa 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/VehicleEdgeIterator.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/DijkstraVehicleIterator.java
@@ -1,4 +1,4 @@
-package com.graphhopper.marmoset;
+package com.graphhopper.marmoset.vehicle;
 
 import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.util.EdgeIterator;
@@ -10,14 +10,14 @@
 /**
  * Created by alexander on 09/03/2016.
  */
-public class VehicleEdgeIterator implements EdgeIterator {
+public class DijkstraVehicleIterator implements VehicleIterator {
 
     private List<EdgeIteratorState> edges;
     private EdgeIteratorState edge;
     private int index;
     private FlagEncoder encoder;
 
-    public VehicleEdgeIterator(List<EdgeIteratorState> edges, FlagEncoder encoder)
+    public DijkstraVehicleIterator(List<EdgeIteratorState> edges, FlagEncoder encoder)
     {
         this.encoder = encoder;
         // starts at 0 to skip first edge, as the first edge is virtual (i.e not in graph)
@@ -25,7 +25,7 @@ public VehicleEdgeIterator(List<EdgeIteratorState> edges, FlagEncoder encoder)
         this.edges = edges;
     }
 
-    public VehicleEdgeIterator(VehicleEdgeIterator e)
+    public DijkstraVehicleIterator(DijkstraVehicleIterator e)
     {
         encoder = e.encoder;
         edges = e.edges;
@@ -33,11 +33,13 @@ public VehicleEdgeIterator(VehicleEdgeIterator e)
         index = e.index;
     }
 
+    @Override
     public double getRoadSpeed()
     {
         return encoder.getSpeed(edge.getFlags());
     }
 
+    @Override
     public boolean hasNext()
     {
         return index < edges.size() - 1;
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/Vehicle.java b/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/Vehicle.java
similarity index 87%
rename from marmoset/src/main/java/com/graphhopper/marmoset/Vehicle.java
rename to marmoset/src/main/java/com/graphhopper/marmoset/vehicle/Vehicle.java
index c7fd0ccab2..723b151688 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/Vehicle.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/Vehicle.java
@@ -1,8 +1,9 @@
-package com.graphhopper.marmoset;
+package com.graphhopper.marmoset.vehicle;
 
 import com.graphhopper.GHRequest;
 import com.graphhopper.GHResponse;
 import com.graphhopper.GraphHopper;
+import com.graphhopper.marmoset.MarmosetHopper;
 import com.graphhopper.marmoset.util.CellIterator;
 import com.graphhopper.marmoset.util.CellGraph;
 import com.graphhopper.marmoset.util.Location;
@@ -22,25 +23,25 @@
  */
 public class Vehicle {
 
-    private static final Logger logger = LoggerFactory.getLogger(Vehicle.class);
+    protected static final Logger logger = LoggerFactory.getLogger(Vehicle.class);
 
-    private static int maxId = 0;
-    private final int id;
+    protected static int maxId = 0;
+    protected final int id;
 
-    private MarmosetHopper hopper;
-    private Location loc;
-    private Location dest;
-    private boolean finished;
+    protected MarmosetHopper hopper;
+    protected Location loc;
+    protected Location dest;
+    protected boolean finished;
 
-    private VehicleEdgeIterator route;
-    private int cellId;
+    protected DijkstraVehicleIterator route;
 
-    private int v; // velocity
-    private float slowProb;
-    private Random slowRand;
-    private int maxVelocity = 5;
+    protected int cellId;
+    protected int v; // velocity
+    protected float slowProb;
+    protected Random slowRand;
+    protected int maxVelocity = 5;
 
-    private CellGraph cg;
+    protected CellGraph cg;
 
     public Vehicle(MarmosetHopper hopper, Location start, Location dest)
     {
@@ -104,7 +105,7 @@ public void init()
         }
 
         FlagEncoder carEncoder = gh.getEncodingManager().getEncoder("car");
-        route = new VehicleEdgeIterator(edgeList, carEncoder);
+        route = new DijkstraVehicleIterator(edgeList, carEncoder);
         route.next();
 
         cg.set(route, cellId, true);
@@ -114,7 +115,7 @@ public void init()
 
     public void accelerationStep()
     {
-        CellIterator c = new CellIterator(new VehicleEdgeIterator(route), cg, cellId);
+        CellIterator c = new CellIterator(new DijkstraVehicleIterator(route), cg, cellId);
 
         int newMaxVel = maxVelocity;
 
@@ -143,7 +144,7 @@ public void accelerationStep()
     public void slowStep()
     {
         int j = 0;
-        CellIterator c = new CellIterator(new VehicleEdgeIterator(route), cg, cellId);
+        CellIterator c = new CellIterator(new DijkstraVehicleIterator(route), cg, cellId);
 
         while (!c.next() && j <= v)
             j++;
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/VehicleIterator.java b/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/VehicleIterator.java
new file mode 100644
index 0000000000..8f7d3d036d
--- /dev/null
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/VehicleIterator.java
@@ -0,0 +1,11 @@
+package com.graphhopper.marmoset.vehicle;
+
+import com.graphhopper.util.EdgeIterator;
+
+/**
+ * Created by alexander on 22/03/2016.
+ */
+public interface VehicleIterator extends EdgeIterator{
+    double getRoadSpeed();
+    boolean hasNext();
+}
diff --git a/marmoset/src/main/webapp/main.js b/marmoset/src/main/webapp/main.js
index 12844338b8..6a8b2c048e 100644
--- a/marmoset/src/main/webapp/main.js
+++ b/marmoset/src/main/webapp/main.js
@@ -100,6 +100,7 @@ var carSet = {
             totalVel += vel;
             if (this._cars[index]) {
                 this._cars[index].moveTo(lat, lon, vel);
+                this._cars[index].moved = true;
             } else {
                 this._carCount++;
                 this._cars[index] = new Car(index, vel, lat, lon);
