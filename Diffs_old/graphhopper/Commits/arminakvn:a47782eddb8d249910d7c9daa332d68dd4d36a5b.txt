diff --git a/config.yml b/config.yml
index b6a6899d40..79306fec7e 100644
--- a/config.yml
+++ b/config.yml
@@ -8,7 +8,7 @@ graphhopper:
 
   # Possible options: car,foot,bike,bike2,mtb,racingbike,motorcycle (comma separated)
   # bike2 takes elevation data into account (like up-hill is slower than down-hill) and requires enabling graph.elevation.provider below
-  graph.flag_encoders: mapcrider,racingbike
+  graph.flag_encoders: mapcrider2
 
 
   # Enable turn restrictions for car or motorcycle.
@@ -19,15 +19,15 @@ graphhopper:
 
 
   # To populate your graph with elevation data use SRTM, default is noop (no elevation)
-  graph.elevation.provider: srtm
+  graph.elevation.provider: multi
 
 
   # default location for cache is /tmp/srtm
-  # graph.elevation.cache_dir: ./srtmprovider/
+  graph.elevation.cache_dir: ./multielevationprovider/
 
 
   # If you have a slow disk or plenty of RAM change the default MMAP to:
-  # graph.elevation.dataaccess: RAM_STORE
+  graph.elevation.dataaccess: RAM_STORE
 
 
 
@@ -37,27 +37,26 @@ graphhopper:
   # By default the speed mode with the 'fastest' weighting is used. Internally a graph preparation via
   # contraction hierarchies (CH) is done to speed routing up. This requires more RAM/disc space for holding the
   # graph but less for every request. You can also setup multiple weightings, by providing a comma separated list.
-  prepare.ch.weightings: fastest
+#  prepare.ch.weightings: priority
 
-  prepare.ch.landmarks: 16
+#  prepare.ch.landmarks: 16
   # Disable the speed mode. Should be used only with routing.max_visited_nodes or when the hybrid mode is enabled instead
-#  prepare.ch.weightings: no
+  prepare.ch.weightings: no
 
 
   # To make CH preparation faster for multiple flagEncoders you can increase the default threads if you have enough RAM.
   # Change this setting only if you know what you are doing and if the default worked for you.
-  prepare.ch.threads: 2
+#  prepare.ch.threads: 2
 
 
   # The hybrid mode can be enabled with
-#  prepare.lm.weightings: fastest,shortest
+  prepare.lm.weightings: fastest
 
   # To tune the performance vs. memory usage for the hybrid mode use
-  prepare.lm.landmarks: 8
+  prepare.lm.landmarks: 16
 
   # Make landmark preparation parallel if you have enough RAM. Change this only if you know what you are doing and if the default worked for you.
-#  prepare.lm.threads: 2
-
+  prepare.lm.threads: 1
 
   # avoid being stuck in a (oneway) subnetwork, see https://discuss.graphhopper.com/t/93
   prepare.min_network_size: 200
@@ -83,7 +82,7 @@ graphhopper:
   routing.lm.disabling_allowed: true
 
   # Control how many active landmarks are picked per default, this can improve query performance
-#  routing.lm.active_landmarks: 16
+  routing.lm.active_landmarks: 8
 
 
   # You can limit the max distance between two consecutive waypoints of flexible routing requests to be less or equal
@@ -103,7 +102,8 @@ graphhopper:
 
 
   # Sort the graph after import to make requests roughly ~10% faster. Note that this requires significantly more RAM on import.
-  # graph.do_sort: true
+#  graph.do_sort: true
+  graph.bytes_for_flags: 8
 
 
 
