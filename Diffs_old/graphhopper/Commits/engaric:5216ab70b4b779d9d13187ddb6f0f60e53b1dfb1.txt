diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnElement.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnElement.java
index 24b7b7fab8..7c0ec997b8 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnElement.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnElement.java
@@ -42,8 +42,7 @@
  * @author Nop
  * @author Peter
  */
-public abstract class OsDpnElement implements RoutingElement
-{
+public abstract class OsDpnElement implements RoutingElement {
     public static final int NODE = 0;
     public static final int WAY = 1;
     public static final int RELATION = 2;
@@ -54,28 +53,25 @@
 
     private boolean nameSet = false;
 
-    protected OsDpnElement(String id, int type)
-    {
-	this.id = id;
-	this.type = type;
+    protected OsDpnElement(String id, int type) {
+        this.id = id;
+        this.type = type;
     }
 
-    public String getId()
-    {
-	return id;
+    public String getId() {
+        return id;
     }
 
-    protected void readTags(XMLStreamReader parser) throws XMLStreamException,
-		    MismatchedDimensionException, FactoryException, TransformException
-    {
-	int event = parser.getEventType();
-	while (event != XMLStreamConstants.END_DOCUMENT
-			&& (event != XMLStreamConstants.END_ELEMENT || !exitElement(parser)))
-	    if (event == XMLStreamConstants.CHARACTERS)
-            event = parser.next();
-	    else if (event == XMLStreamConstants.START_ELEMENT)
-            // logger.info("LOCALNAME: {}", parser.getLocalName());
-            switch (parser.getLocalName()) {
+    protected void readTags(XMLStreamReader parser) throws XMLStreamException, MismatchedDimensionException,
+    FactoryException, TransformException {
+        int event = parser.getEventType();
+        while (event != XMLStreamConstants.END_DOCUMENT
+                && (event != XMLStreamConstants.END_ELEMENT || !exitElement(parser)))
+            if (event == XMLStreamConstants.CHARACTERS)
+                event = parser.next();
+            else if (event == XMLStreamConstants.START_ELEMENT)
+                // logger.info("LOCALNAME: {}", parser.getLocalName());
+                switch (parser.getLocalName()) {
                 case "pos":
                 case "coordinates": {
                     event = handleCoordinates(parser);
@@ -112,183 +108,160 @@ else if (event == XMLStreamConstants.START_ELEMENT)
                     break;
                 }
                 case "name":
-                case "alternativeName":
-                {
+                case "alternativeName": {
                     event = handleName(parser);
                     break;
                 }
-                case "physicalLevel":
-                {
+                case "physicalLevel": {
                     event = handlePhysicalLevel(parser);
                     break;
                 }
-                case "rightOfUse":
-                {
+                case "rightOfUse": {
                     event = handleRightOfUse(parser);
                     break;
                 }
-                case "potentialHazardCrossed":
-                {
+                case "potentialHazardCrossed": {
                     event = handlePotentialHazard(parser);
                     break;
                 }
 
-                case "withinAccessLand" :
-                {
-                    event = handleAccessLand(parser);
-                    break;
-                }
-
-                case "adoptedByNationalCycleRoute" :
-                case "adoptedByOtherCycleRoute" :
-                {
-                    event = handleCycleRoute(parser);
+                case "adoptedByNationalCycleRoute":
+                case "adoptedByOtherCycleRoute":
+                case "adoptedByRecreationalRoute":
+                case "withinAccessLand": {
+                    event = handleAdditionalRights(parser);
                     break;
                 }
                 default: {
                     event = parser.next();
                 }
-            }
-	    else
-            // logger.trace("EVENT:" + event);
-            event = parser.next();
+                }
+            else
+                // logger.trace("EVENT:" + event);
+                event = parser.next();
     }
 
-    protected int handleCycleRoute(XMLStreamReader parser) throws XMLStreamException
-    {
+    protected int handleAdditionalRights(XMLStreamReader parser) throws XMLStreamException {
         return parser.next();
     }
 
-    protected int handleAccessLand(XMLStreamReader parser) throws XMLStreamException
-    {
+    //
+    // protected int handleAccessLand(XMLStreamReader parser) throws
+    // XMLStreamException
+    // {
+    // return parser.next();
+    // }
+
+    protected int handleSurfaceType(XMLStreamReader parser) throws XMLStreamException {
         return parser.next();
     }
 
-    protected int handleSurfaceType(XMLStreamReader parser) throws XMLStreamException
-    {
+    protected int handlePhysicalLevel(XMLStreamReader parser) throws XMLStreamException {
         return parser.next();
     }
 
-    protected int handlePhysicalLevel(XMLStreamReader parser) throws XMLStreamException
-    {
+    protected int handleRightOfUse(XMLStreamReader parser) throws XMLStreamException {
         return parser.next();
     }
 
-    protected int handleRightOfUse(XMLStreamReader parser) throws XMLStreamException
-    {
+    protected int handlePotentialHazard(XMLStreamReader parser) throws XMLStreamException {
         return parser.next();
     }
 
-    protected int handlePotentialHazard(XMLStreamReader parser) throws XMLStreamException
-    {
+    private int handleName(XMLStreamReader parser) throws XMLStreamException {
+        StringBuilder nameString = new StringBuilder();
+        if (nameSet) {
+            nameString.append(getTag("name"));
+            nameString.append(" (");
+        }
+        nameString.append(parser.getElementText());
+        if (nameSet)
+            nameString.append(")");
+        nameSet = true;
+        setTag("name", nameString.toString());
+        return parser.getEventType();
+    }
+
+    private int handleDescriptiveTerm(XMLStreamReader parser) throws XMLStreamException {
+        String roadType = parser.getElementText();
+        setTag("type", "route");
+        setTag("highway", getOsmMappedTypeName(roadType));
+        setTag("name", getTypeBasedName(roadType));
+        return parser.getEventType();
+    }
+
+    private String getTypeBasedName(String roadType) {
+        if (roadType.equals("No Physical Manifestation"))
+            return "Route";
+        return roadType;
+    }
+
+    private String getOsmMappedTypeName(String roadType) {
+        String typeName = roadType;
+        switch (roadType) {
+        case "A Road":
+            typeName = "primary";
+            break;
+        case "B Road":
+            typeName = "secondary";
+            break;
+        case "Alley":
+            typeName = "service";
+            setTag("service", "alley");
+            break;
+        case "Private Road":
+            typeName = "private";
+            break;
+        case "Path":
+            typeName = "path";
+            break;
+        default:
+            break;
+        }
+        return typeName;
+    }
+
+    private int handleDirectedLink(XMLStreamReader parser) throws XMLStreamException {
+        String orientation = parser.getAttributeValue(null, "orientation");
+        String nodeId = parser.getAttributeValue("http://www.w3.org/1999/xlink", "href");
+        addDirectedLink(nodeId, orientation);
         return parser.next();
     }
 
-    private int handleName(XMLStreamReader parser) throws XMLStreamException
-    {
-	StringBuilder nameString = new StringBuilder();
-	if (nameSet)
-	{
-	    nameString.append(getTag("name"));
-	    nameString.append(" (");
-	}
-	nameString.append(parser.getElementText());
-	if (nameSet)
-	    nameString.append(")");
-	nameSet = true;
-	setTag("name", nameString.toString());
-	return parser.getEventType();
-    }
-
-    private int handleDescriptiveTerm(XMLStreamReader parser) throws XMLStreamException
-    {
-	String roadType = parser.getElementText();
-	setTag("type", "route");
-	setTag("highway", getOsmMappedTypeName(roadType));
-	setTag("name", getTypeBasedName(roadType));
-	return parser.getEventType();
-    }
-
-    private String getTypeBasedName(String roadType)
-    {
-	if (roadType.equals("No Physical Manifestation"))
-	    return "Route";
-	return roadType;
-    }
-
-    private String getOsmMappedTypeName(String roadType)
-    {
-    	String typeName = roadType;
-    	switch (roadType) {
-		case "A Road":
-			typeName = "primary";
-			break;
-		case "B Road":
-			typeName = "secondary";
-			break;
-		case "Alley":
-			typeName="service";
-			setTag("service", "alley");
-			break;
-		case "Private Road":
-			typeName="private";
-			break;
-		case "Path":
-			typeName="path";
-			break;
-		default:
-			break;
-		}
-    	return typeName;
-    }
-
-    private int handleDirectedLink(XMLStreamReader parser) throws XMLStreamException
-    {
-	String orientation = parser.getAttributeValue(null, "orientation");
-	String nodeId = parser.getAttributeValue("http://www.w3.org/1999/xlink", "href");
-	addDirectedLink(nodeId, orientation);
-	return parser.next();
-    }
-
-    private int handleNode(XMLStreamReader parser) throws XMLStreamException
-    {
-	String nodeId = parser.getAttributeValue("http://www.w3.org/1999/xlink", "href");
-	addNode(nodeId);
-	return parser.next();
-    }
-
-    private int handleTag(String key, XMLStreamReader parser) throws XMLStreamException
-    {
-	properties.put(key, parser.getElementText());
-	return parser.getEventType();
-    }
-
-    private int handleNetworkMember(XMLStreamReader parser) throws XMLStreamException
-    {
-	String elementText = parser.getAttributeValue("http://www.w3.org/1999/xlink", "href");
-	parseNetworkMember(elementText);
-	return parser.next();
-    }
-
-    private int handleCoordinates(XMLStreamReader parser) throws XMLStreamException,
-		    MismatchedDimensionException, FactoryException, TransformException
-    {
-	String elementText = parser.getElementText();
-	parseCoords(elementText);
-	return parser.getEventType();
-    }
-
-    private int handleMultiDimensionCoords(XMLStreamReader parser) throws XMLStreamException
-    {
-	String dimensionality = parser.getAttributeValue(null, "srsDimension");
-	logger.info("Dimensions:" + dimensionality);
-	String elementText = parser.getElementText();
-	parseCoords(Integer.valueOf(dimensionality), elementText);
-	return parser.getEventType();
-    }
-
-    protected abstract void parseCoords(String coordinates) throws MismatchedDimensionException,
-		    FactoryException, TransformException;
+    private int handleNode(XMLStreamReader parser) throws XMLStreamException {
+        String nodeId = parser.getAttributeValue("http://www.w3.org/1999/xlink", "href");
+        addNode(nodeId);
+        return parser.next();
+    }
+
+    private int handleTag(String key, XMLStreamReader parser) throws XMLStreamException {
+        properties.put(key, parser.getElementText());
+        return parser.getEventType();
+    }
+
+    private int handleNetworkMember(XMLStreamReader parser) throws XMLStreamException {
+        String elementText = parser.getAttributeValue("http://www.w3.org/1999/xlink", "href");
+        parseNetworkMember(elementText);
+        return parser.next();
+    }
+
+    private int handleCoordinates(XMLStreamReader parser) throws XMLStreamException, MismatchedDimensionException,
+    FactoryException, TransformException {
+        String elementText = parser.getElementText();
+        parseCoords(elementText);
+        return parser.getEventType();
+    }
+
+    private int handleMultiDimensionCoords(XMLStreamReader parser) throws XMLStreamException {
+        String dimensionality = parser.getAttributeValue(null, "srsDimension");
+        logger.info("Dimensions:" + dimensionality);
+        String elementText = parser.getElementText();
+        parseCoords(Integer.valueOf(dimensionality), elementText);
+        return parser.getEventType();
+    }
+
+    protected abstract void parseCoords(String coordinates) throws MismatchedDimensionException, FactoryException,
+    TransformException;
 
     protected abstract void parseCoords(int dimensions, String lineDefinition);
 
@@ -298,147 +271,129 @@ protected abstract void parseCoords(String coordinates) throws MismatchedDimensi
 
     protected abstract void parseNetworkMember(String elementText);
 
-    private boolean exitElement(XMLStreamReader parser)
-    {
-	switch (parser.getLocalName())
-	{
-	case "RouteNode":
-	case "RouteLink":
-	case "Route":
-	    return true;
-	}
-	return false;
+    private boolean exitElement(XMLStreamReader parser) {
+        switch (parser.getLocalName()) {
+        case "RouteNode":
+        case "RouteLink":
+        case "Route":
+            return true;
+        }
+        return false;
     }
 
-    protected String tagsToString()
-    {
-	if (properties.isEmpty())
-	    return "<empty>";
+    protected String tagsToString() {
+        if (properties.isEmpty())
+            return "<empty>";
 
-	StringBuilder tagTxt = new StringBuilder();
-	for (Map.Entry<String, Object> entry : properties.entrySet())
-	{
-	    tagTxt.append(entry.getKey());
-	    tagTxt.append("=");
-	    tagTxt.append(entry.getValue());
-	    tagTxt.append("\n");
-	}
-	return tagTxt.toString();
+        StringBuilder tagTxt = new StringBuilder();
+        for (Map.Entry<String, Object> entry : properties.entrySet()) {
+            tagTxt.append(entry.getKey());
+            tagTxt.append("=");
+            tagTxt.append(entry.getValue());
+            tagTxt.append("\n");
+        }
+        return tagTxt.toString();
     }
 
-    protected Map<String, Object> getTags()
-    {
-	return properties;
+    protected Map<String, Object> getTags() {
+        return properties;
     }
 
-    public void setTags(Map<String, String> newTags)
-    {
-	properties.clear();
-	if (newTags != null)
-	    for (Entry<String, String> e : newTags.entrySet())
-		setTag(e.getKey(), e.getValue());
+    public void setTags(Map<String, String> newTags) {
+        properties.clear();
+        if (newTags != null)
+            for (Entry<String, String> e : newTags.entrySet())
+                setTag(e.getKey(), e.getValue());
     }
 
     @Override
-    public boolean hasTags()
-    {
-	return !properties.isEmpty();
+    public boolean hasTags() {
+        return !properties.isEmpty();
     }
 
     @Override
-    public String getTag(String name)
-    {
+    public String getTag(String name) {
         Object object = properties.get(name);
         return (null != object) ? (String) object.toString() : null;
     }
 
     @Override
     @SuppressWarnings("unchecked")
-    public <T> T getTag(String key, T defaultValue)
-    {
-	T val = (T) properties.get(key);
-	if (val == null)
-	    return defaultValue;
-	return val;
+    public <T> T getTag(String key, T defaultValue) {
+        T val = (T) properties.get(key);
+        if (val == null)
+            return defaultValue;
+        return val;
     }
 
     @Override
-    public void setTag(String name, Object value)
-    {
-	properties.put(name, value);
+    public void setTag(String name, Object value) {
+        properties.put(name, value);
     }
 
     /**
      * Chaeck that the object has a given tag with a given value.
      */
     @Override
-    public boolean hasTag(String key, Object value)
-    {
-	return value.equals(properties.get(key));
+    public boolean hasTag(String key, Object value) {
+        return value.equals(properties.get(key));
     }
 
     /**
-     * Check that a given tag has one of the specified values. If no values are given, just checks
-     * for presence of the tag
+     * Check that a given tag has one of the specified values. If no values are
+     * given, just checks for presence of the tag
      */
     @Override
-    public boolean hasTag(String key, String... values)
-    {
-	Object osmValue = properties.get(key);
-	if (osmValue == null)
-	    return false;
+    public boolean hasTag(String key, String... values) {
+        Object osmValue = properties.get(key);
+        if (osmValue == null)
+            return false;
 
-	// tag present, no values given: success
-	if (values.length == 0)
-	    return true;
+        // tag present, no values given: success
+        if (values.length == 0)
+            return true;
 
-	for (String val : values)
-	    if (val.equals(osmValue))
-		return true;
-	return false;
+        for (String val : values)
+            if (val.equals(osmValue))
+                return true;
+        return false;
     }
 
     /**
      * Check that a given tag has one of the specified values.
      */
     @Override
-    public final boolean hasTag(String key, Set<String> values)
-    {
-	return values.contains(properties.get(key));
+    public final boolean hasTag(String key, Set<String> values) {
+        return values.contains(properties.get(key));
     }
 
     /**
-     * Check a number of tags in the given order for the any of the given values. Used to parse
-     * hierarchical access restrictions
+     * Check a number of tags in the given order for the any of the given
+     * values. Used to parse hierarchical access restrictions
      */
     @Override
-    public boolean hasTag(List<String> keyList, Set<String> values)
-    {
-	for (String key : keyList)
-	    if (values.contains(properties.get(key)))
-		return true;
-	return false;
+    public boolean hasTag(List<String> keyList, Set<String> values) {
+        for (String key : keyList)
+            if (values.contains(properties.get(key)))
+                return true;
+        return false;
     }
 
-    public void removeTag(String name)
-    {
-	properties.remove(name);
+    public void removeTag(String name) {
+        properties.remove(name);
     }
 
-    public void clearTags()
-    {
-	properties.clear();
+    public void clearTags() {
+        properties.clear();
     }
 
     @Override
-    public int getType()
-    {
-	return type;
+    public int getType() {
+        return type;
     }
 
     @Override
-    public boolean isType(int type)
-    {
-	return this.type == type;
+    public boolean isType(int type) {
+        return this.type == type;
     }
 }
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnWay.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnWay.java
index 198183dc5d..11488d1eb2 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnWay.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnWay.java
@@ -35,6 +35,10 @@
 import org.slf4j.LoggerFactory;
 
 import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.additionalRights.AdoptedByNationalCycleRoute;
+import com.graphhopper.reader.osgb.dpn.additionalRights.AdoptedByOtherCycleRoute;
+import com.graphhopper.reader.osgb.dpn.additionalRights.AdoptedByRecreationalRoute;
+import com.graphhopper.reader.osgb.dpn.additionalRights.WithinAccessLand;
 import com.graphhopper.reader.osgb.dpn.potentialHazards.Boulders;
 import com.graphhopper.reader.osgb.dpn.potentialHazards.Cliff;
 import com.graphhopper.reader.osgb.dpn.potentialHazards.Foreshore;
@@ -50,8 +54,10 @@
 import com.graphhopper.reader.osgb.dpn.potentialHazards.TidalWater;
 import com.graphhopper.reader.osgb.dpn.rightOfWay.BridleWay;
 import com.graphhopper.reader.osgb.dpn.rightOfWay.BywayOpenToAllTraffic;
+import com.graphhopper.reader.osgb.dpn.rightOfWay.CorePath;
 import com.graphhopper.reader.osgb.dpn.rightOfWay.Footpath;
 import com.graphhopper.reader.osgb.dpn.rightOfWay.None;
+import com.graphhopper.reader.osgb.dpn.rightOfWay.NormalPermissibleUses;
 import com.graphhopper.reader.osgb.dpn.rightOfWay.OtherRouteWithPublicAccess;
 import com.graphhopper.reader.osgb.dpn.rightOfWay.PermissiveBridleWay;
 import com.graphhopper.reader.osgb.dpn.rightOfWay.PermissivePath;
@@ -69,17 +75,15 @@
     protected String startCoord;
     protected String endCoord;
     private String[] wayCoords;
-    private static final Logger logger = LoggerFactory
-            .getLogger(OsDpnWay.class);
-    private static OsDpnOsmAttributeMappingVisitor[] rightOfWayVisitors = {
-        new BridleWay(), new PermissiveBridleWay(),
-        new BywayOpenToAllTraffic(), new None(),
-        new OtherRouteWithPublicAccess(), new Footpath(),
-        new PermissivePath(), new RestrictedByway() };
-    private static OsDpnOsmAttributeMappingVisitor[] potentialHazardVisitors = {
-        new Boulders(), new Cliff(), new Marsh(), new Mud(), new Sand(),
-        new Scree(), new Shingle(), new Spoil(), new Rock(),
-        new TidalWater(), new QuarryOrPit(), new InlandWater(), new Foreshore() };
+    private static final Logger logger = LoggerFactory.getLogger(OsDpnWay.class);
+    private static OsDpnOsmAttributeMappingVisitor[] RIGHT_OF_WAY_VISITORS = { new BridleWay(),
+        new BywayOpenToAllTraffic(), new CorePath(), new Footpath(), new None(), new NormalPermissibleUses(),
+        new OtherRouteWithPublicAccess(), new PermissiveBridleWay(), new PermissivePath(), new RestrictedByway() };
+    private static OsDpnOsmAttributeMappingVisitor[] POTENTIAL_HAZARD_VISITORS = { new Boulders(), new Cliff(),
+        new Marsh(), new Mud(), new Sand(), new Scree(), new Shingle(), new Spoil(), new Rock(), new TidalWater(),
+        new QuarryOrPit(), new InlandWater(), new Foreshore() };
+    private static OsDpnOsmAttributeMappingVisitor[] ADDITIONAL_RIGHTS_VISITORS = { new AdoptedByNationalCycleRoute(),
+            new AdoptedByOtherCycleRoute(), new AdoptedByRecreationalRoute(), new WithinAccessLand() };
 
     /**
      * Constructor for XML Parser
@@ -88,9 +92,8 @@
      * @throws FactoryException
      * @throws MismatchedDimensionException
      */
-    public static OsDpnWay create(String idStr, XMLStreamReader parser)
-            throws XMLStreamException, MismatchedDimensionException,
-            FactoryException, TransformException {
+    public static OsDpnWay create(String idStr, XMLStreamReader parser) throws XMLStreamException,
+    MismatchedDimensionException, FactoryException, TransformException {
         logger.trace("OsDpnWay.create()");
         OsDpnWay way = new OsDpnWay(idStr);
         parser.nextTag();
@@ -109,28 +112,18 @@ public OsDpnWay(String id) {
     }
 
     @Override
-    protected int handleCycleRoute(XMLStreamReader parser)
-            throws XMLStreamException {
+    protected int handleAdditionalRights(XMLStreamReader parser) throws XMLStreamException {
         String access = parser.getElementText();
         if ("true".equals(access)) {
-            setTag("bicycle", "yes");
-        }
-        return parser.getEventType();
-    }
-
-    @Override
-    protected int handleAccessLand(XMLStreamReader parser)
-            throws XMLStreamException {
-        String access = parser.getElementText();
-        if ("true".equals(access)) {
-            setTag("foot", "yes");
+            for (OsDpnOsmAttributeMappingVisitor visitor : ADDITIONAL_RIGHTS_VISITORS) {
+                visitor.visitWayAttribute(parser.getLocalName().toLowerCase(), this);
+            }
         }
         return parser.getEventType();
     }
 
     @Override
-    protected int handleSurfaceType(XMLStreamReader parser)
-            throws XMLStreamException {
+    protected int handleSurfaceType(XMLStreamReader parser) throws XMLStreamException {
         String surface;
         String surfaceType = parser.getElementText();
         if ("Made Sealed".equals(surfaceType)) {
@@ -145,8 +138,7 @@ protected int handleSurfaceType(XMLStreamReader parser)
     }
 
     @Override
-    protected int handlePhysicalLevel(XMLStreamReader parser)
-            throws XMLStreamException {
+    protected int handlePhysicalLevel(XMLStreamReader parser) throws XMLStreamException {
         String text = parser.getElementText();
         if ("Below Surface Level Tunnel".equals(text)) {
             setTag("tunnel", "yes");
@@ -157,23 +149,19 @@ protected int handlePhysicalLevel(XMLStreamReader parser)
     }
 
     @Override
-    protected int handleRightOfUse(XMLStreamReader parser)
-            throws XMLStreamException {
-        String attributeValue = parser.getElementText().replaceAll(" ", "")
-                .toLowerCase();
-        for (OsDpnOsmAttributeMappingVisitor rightOfWayVisitor : rightOfWayVisitors) {
-            rightOfWayVisitor.visitWayAttribute(attributeValue, this);
+    protected int handleRightOfUse(XMLStreamReader parser) throws XMLStreamException {
+        String attributeValue = parser.getElementText().replaceAll(" ", "").toLowerCase();
+        for (OsDpnOsmAttributeMappingVisitor visitor : RIGHT_OF_WAY_VISITORS) {
+            visitor.visitWayAttribute(attributeValue, this);
         }
         return parser.getEventType();
     }
 
     @Override
-    protected int handlePotentialHazard(XMLStreamReader parser)
-            throws XMLStreamException {
-        String attributeValue = parser.getElementText().replaceAll(" ", "")
-                .toLowerCase();
-        for (OsDpnOsmAttributeMappingVisitor potentialHazzardVisitor : potentialHazardVisitors) {
-            potentialHazzardVisitor.visitWayAttribute(attributeValue, this);
+    protected int handlePotentialHazard(XMLStreamReader parser) throws XMLStreamException {
+        String attributeValue = parser.getElementText().replaceAll(" ", "").toLowerCase();
+        for (OsDpnOsmAttributeMappingVisitor visitor : POTENTIAL_HAZARD_VISITORS) {
+            visitor.visitWayAttribute(attributeValue, this);
         }
         return parser.getEventType();
     }
@@ -181,10 +169,8 @@ protected int handlePotentialHazard(XMLStreamReader parser)
     @Override
     protected void parseCoords(String lineDefinition) {
         String[] lineSegments = lineDefinition.split(" ");
-        wayCoords = Arrays
-                .copyOfRange(lineSegments, 1, lineSegments.length - 1);
-        logger.info("parseCoords1" + toString() + " "
-                + ((wayCoords.length == 0) ? "0" : wayCoords[0]));
+        wayCoords = Arrays.copyOfRange(lineSegments, 1, lineSegments.length - 1);
+        logger.info("parseCoords1" + toString() + " " + ((wayCoords.length == 0) ? "0" : wayCoords[0]));
     }
 
     /**
@@ -220,11 +206,8 @@ protected void parseCoords(int dimensions, String lineDefinition) {
             }
             wayCoords[wayCoords.length - 1] = curString.toString();
             addWayNodes();
-            logger.info("parsecoord2" + toString() + " "
-                    + ((wayCoords.length == 0) ? "0" : wayCoords[0]));
-        }
-        else
-        {
+            logger.info("parsecoord2" + toString() + " " + ((wayCoords.length == 0) ? "0" : wayCoords[0]));
+        } else {
             wayCoords = null;
         }
         nodes.add(endNode);
@@ -272,8 +255,7 @@ protected void addDirectedLink(String nodeId, String orientation) {
      * @throws MismatchedDimensionException
      */
     public List<OsDpnNode> evaluateWayNodes(TLongObjectMap<TDoubleObjectMap<TDoubleLongMap>> edgeIdToXToYToNodeFlagsMap)
-            throws MismatchedDimensionException, FactoryException, TransformException
-            {
+            throws MismatchedDimensionException, FactoryException, TransformException {
         List<OsDpnNode> wayNodes = new ArrayList<OsDpnNode>();
 
         if (null != wayCoords) {
@@ -285,8 +267,7 @@ protected void addDirectedLink(String nodeId, String orientation) {
                 OsDpnNode wayNode = new OsDpnNode(id);
                 wayNode.parseCoords(wayCoord);
 
-                logger.info("Node " + getId() + " coords: " + wayCoord
-                        + " tags: ");
+                logger.info("Node " + getId() + " coords: " + wayCoord + " tags: ");
                 for (String tagKey : wayNode.getTags().keySet()) {
                     logger.info("\t " + tagKey + " : " + wayNode.getTag(tagKey));
                 }
@@ -294,15 +275,14 @@ protected void addDirectedLink(String nodeId, String orientation) {
             }
         }
         return wayNodes;
-            }
+    }
 
     /**
      * Memory management method. Once a way is processed the stored string
      * coordinates are no longer required so set them to null so they can be
      * garbage collected
      */
-    public void clearStoredCoords()
-    {
+    public void clearStoredCoords() {
         wayCoords = null;
         startCoord = null;
         endCoord = null;
@@ -320,17 +300,15 @@ public String getEndCoord() {
         return endCoord;
     }
 
-    protected void parseCoordinateString(String elementText,
-            String elementSeparator) {
+    protected void parseCoordinateString(String elementText, String elementSeparator) {
         throw new UnsupportedOperationException();
 
     }
 
     @Override
     public String toString() {
-        return super.toString() + " id:" + getId() + " start:" + nodes.get(0)
-                + " end:" + nodes.get(nodes.size() - 1) + " NAME:"
-                + getTag("name");
+        return super.toString() + " id:" + getId() + " start:" + nodes.get(0) + " end:" + nodes.get(nodes.size() - 1)
+                + " NAME:" + getTag("name");
     }
 
 }
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByNationalCycleRoute.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByNationalCycleRoute.java
new file mode 100644
index 0000000000..4fd72f9899
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByNationalCycleRoute.java
@@ -0,0 +1,22 @@
+package com.graphhopper.reader.osgb.dpn.additionalRights;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
+
+/**
+ * Description: A link part of the National Cycle Network
+ *
+ * Confirmed Allowable users: Pedestrians, Cyclists
+ *
+ * @author phopkins
+ *
+ */
+public class AdoptedByNationalCycleRoute extends AbstractOsDpnOsmAttibuteMappingVisitor {
+
+    @Override
+    protected void applyAttributes(Way way) {
+        way.setTag("bicycle", "yes");
+        way.setTag("foot", "yes");
+    }
+
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByOtherCycleRoute.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByOtherCycleRoute.java
new file mode 100644
index 0000000000..032f8d1edd
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByOtherCycleRoute.java
@@ -0,0 +1,24 @@
+package com.graphhopper.reader.osgb.dpn.additionalRights;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
+
+/**
+ *
+ * Description: A link part of a Cycle Network that is not part of the National
+ * Cycle Network
+ *
+ * Confirmed Allowable users: Pedestrians, Cyclists
+ *
+ * @author phopkins
+ *
+ */
+public class AdoptedByOtherCycleRoute extends AbstractOsDpnOsmAttibuteMappingVisitor {
+
+    @Override
+    protected void applyAttributes(Way way) {
+        way.setTag("bicycle", "yes");
+        way.setTag("foot", "yes");
+    }
+
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByRecreationalRoute.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByRecreationalRoute.java
new file mode 100644
index 0000000000..1a6e970161
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByRecreationalRoute.java
@@ -0,0 +1,22 @@
+package com.graphhopper.reader.osgb.dpn.additionalRights;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
+
+/**
+ *
+ * Description: A link part of a Recreational Route
+ *
+ * Confirmed Allowable users: Pedestrians
+ *
+ * @author phopkins
+ *
+ */
+public class AdoptedByRecreationalRoute extends AbstractOsDpnOsmAttibuteMappingVisitor {
+
+    @Override
+    protected void applyAttributes(Way way) {
+        way.setTag("foot", "yes");
+    }
+
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/additionalRights/WithinAccessLand.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/additionalRights/WithinAccessLand.java
new file mode 100644
index 0000000000..dee8b7a5df
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/additionalRights/WithinAccessLand.java
@@ -0,0 +1,24 @@
+package com.graphhopper.reader.osgb.dpn.additionalRights;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
+
+/**
+ *
+ * Description: A link within Access Land
+ *
+ * Confirmed Allowable users: Pedestrians Note for Private Roads where the only
+ * right to use is because the road is in Access Land there may not be a right
+ * to use the road itself.
+ *
+ * @author phopkins
+ *
+ */
+public class WithinAccessLand extends AbstractOsDpnOsmAttibuteMappingVisitor {
+
+    @Override
+    protected void applyAttributes(Way way) {
+        way.setTag("foot", "yes");
+    }
+
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/BridleWay.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/BridleWay.java
index 8eb22df44d..610d7f44de 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/BridleWay.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/BridleWay.java
@@ -4,6 +4,10 @@
 import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
 
 /**
+ * Description: A route where there is a right to travel on foot, on horseback, to lead a horse and to ride a bicycle
+ *
+ * Confirmed Allowable users: Pedestrians, Horses, Cyclists
+ *
  * Created by sadam on 13/02/15.
  */
 public class BridleWay extends AbstractOsDpnOsmAttibuteMappingVisitor {
@@ -13,7 +17,10 @@ protected void applyAttributes(Way way)
     {
         way.setTag("designation", "public_bridleway");
         way.setTag("highway", "bridleway");
+
         way.setTag("foot", "yes");
+        way.setTag("horse", "yes");
+        way.setTag("bicycle", "yes");
     }
 
 }
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/BywayOpenToAllTraffic.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/BywayOpenToAllTraffic.java
index 2cb70abcbb..10ac1c305f 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/BywayOpenToAllTraffic.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/BywayOpenToAllTraffic.java
@@ -4,6 +4,10 @@
 import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
 
 /**
+ * Description: A highway open to all traffic
+ *
+ * Confirmed Allowable users: Pedestrians, Horses, Cyclists, Motorised Vehicles
+ *
  * Created by sadam on 13/02/15.
  */
 public class BywayOpenToAllTraffic extends AbstractOsDpnOsmAttibuteMappingVisitor {
@@ -15,6 +19,7 @@ protected void applyAttributes(Way way) {
         way.setTag("foot", "yes");
         way.setTag("horse", "yes");
         way.setTag("bicycle", "yes");
+        way.setTag("motor_vehicle", "yes");
     }
 
 }
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/CorePath.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/CorePath.java
new file mode 100644
index 0000000000..10d2703cff
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/CorePath.java
@@ -0,0 +1,21 @@
+package com.graphhopper.reader.osgb.dpn.rightOfWay;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
+
+/**
+ * Description: A route in Scotland identified as part of the Core Path network.
+ *
+ * Confirmed Allowable users: Not populated in release 1.
+ *
+ * Not yet used
+ * @author phopkins
+ *
+ */
+public class CorePath extends AbstractOsDpnOsmAttibuteMappingVisitor {
+
+    @Override
+    protected void applyAttributes(Way way) {
+    }
+
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/Footpath.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/Footpath.java
index 77e29663ff..8a83f70d5a 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/Footpath.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/Footpath.java
@@ -4,6 +4,10 @@
 import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
 
 /**
+ * Description: A route where there is a right to travel on foot.
+ *
+ * Confirmed Allowable users: Pedestrians
+ *
  * Created by sadam on 13/02/15.
  */
 public class Footpath extends AbstractOsDpnOsmAttibuteMappingVisitor {
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/None.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/None.java
index bcd1727515..8608148896 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/None.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/None.java
@@ -4,10 +4,19 @@
 import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
 
 /**
+ * Description: A route where no permissive or conventional right of way has been identified. Use may be allowed if the route has been identified as a cycle route,
+ * see NationalCycleRoute, OtherCycleRoute, part of a RecreationalRoute or as lying within an area of Access Land.
+ *
+ * Confirmed Allowable users: See NationalCycleRoute, OtherCycleRoute, part of a RecreationalRoute or as lying within an area of Access Land.
+ *
  * Created by sadam on 16/02/15.
  */
 public class None extends AbstractOsDpnOsmAttibuteMappingVisitor {
 
+    /**
+     * This code is written with the assumption that any further DPN elements that will override the bicycle=no will be processed after the rightOfWay element.
+     * This assumption is based on the current DPN xml structure. If this were to change in the future we would need to rethink how we process this rightOfWay.
+     */
     @Override
     protected void applyAttributes(Way way) {
         way.setTag("foot", "no");
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/NormalPermissibleUses.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/NormalPermissibleUses.java
new file mode 100644
index 0000000000..339c3c8f87
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/NormalPermissibleUses.java
@@ -0,0 +1,23 @@
+package com.graphhopper.reader.osgb.dpn.rightOfWay;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
+
+/**
+ * Description: No known restrictions on pedestrians, cyclists or horses being ridden. Restrictions may apply to vehicles.
+ *
+ * Confirmed Allowable users: Pedestrians, Horses, Cyclists – used for public roads without a restriction
+ *
+ * @author phopkins
+ *
+ */
+public class NormalPermissibleUses  extends AbstractOsDpnOsmAttibuteMappingVisitor {
+
+    @Override
+    protected void applyAttributes(Way way) {
+        way.setTag("foot", "yes");
+        way.setTag("horse", "yes");
+        way.setTag("bicycle", "yes");
+    }
+
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/OtherRouteWithPublicAccess.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/OtherRouteWithPublicAccess.java
index 5e41a46e62..acdfbcd5a3 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/OtherRouteWithPublicAccess.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/OtherRouteWithPublicAccess.java
@@ -4,6 +4,15 @@
 import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
 
 /**
+ * Description: A route that is the responsibility of local highway authorities and maintained at public expense.
+ * All ORPAs have rights for pedestrians. Beyond that, any particular ORPA may, or may not, have rights for cyclists and equestrians,
+ * and may or may not have rights for motor vehicles. Other Routes with Public Access (ORPA) are sometimes known as unclassified
+ * unsurfaced roads (or unclassified country roads).
+ *
+ * Confirmed Allowable users: Pedestrians *
+ *
+ * * Other rights may exist; these will need to be determined from the local Highway Authority
+ *
  * Created by sadam on 16/02/15.
  */
 public class OtherRouteWithPublicAccess extends AbstractOsDpnOsmAttibuteMappingVisitor {
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/PermissiveBridleWay.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/PermissiveBridleWay.java
index 99f356f133..1f01b07fc0 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/PermissiveBridleWay.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/PermissiveBridleWay.java
@@ -4,6 +4,11 @@
 import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
 
 /**
+ * Description: A route where the landowner has permitted travel on foot, on horseback or leading a horse and to ride a bicycle.
+ * This right may be withdrawn by the landowner.
+ *
+ * Confirmed Allowable users: Pedestrians, Horses, Cyclists
+ *
  * Created by sadam on 13/02/15.
  */
 public class PermissiveBridleWay extends AbstractOsDpnOsmAttibuteMappingVisitor {
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/PermissivePath.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/PermissivePath.java
index 5d558dda13..8413da9160 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/PermissivePath.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/PermissivePath.java
@@ -4,6 +4,10 @@
 import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
 
 /**
+ * Description: A route where the landowner has permitted travel on foot. This right may be withdrawn by the landowner.
+ *
+ * Confirmed Allowable users: Pedestrians
+ *
  * Created by sadam on 13/02/15.
  */
 public class PermissivePath extends AbstractOsDpnOsmAttibuteMappingVisitor {
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/RestrictedByway.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/RestrictedByway.java
index 63ed760979..c6791c626e 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/RestrictedByway.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/RestrictedByway.java
@@ -4,6 +4,10 @@
 import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
 
 /**
+ * Description: A route open to all traffic except mechanically propelled vehicles. Formerly known as Road Used as Public Path (RUPP).
+ *
+ * Confirmed Allowable users: Pedestrians, Horses, Cyclists
+ *
  * Created by sadam on 13/02/15.
  */
 public class RestrictedByway extends AbstractOsDpnOsmAttibuteMappingVisitor {
@@ -14,6 +18,8 @@ protected void applyAttributes(Way way)
         way.setTag("designation", "restricted_byway");
         way.setTag("highway", "track");
         way.setTag("motor_vehicle", "no");
-    }
+        way.setTag("foot", "yes");
+        way.setTag("horse", "yes");
+        way.setTag("bicycle", "yes");    }
 
 }
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/ForeshoreTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/ForeshoreTest.java
deleted file mode 100644
index 63088d4ec5..0000000000
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/ForeshoreTest.java
+++ /dev/null
@@ -1,35 +0,0 @@
-package com.graphhopper.reader.osgb.dpn;
-
-import static org.mockito.Mockito.verify;
-
-import org.junit.Before;
-import org.junit.BeforeClass;
-import org.junit.Test;
-import org.mockito.Mock;
-import org.mockito.MockitoAnnotations;
-
-import com.graphhopper.reader.Way;
-import com.graphhopper.reader.osgb.dpn.potentialHazards.Foreshore;
-
-public class ForeshoreTest {
-	 static OsDpnOsmAttributeMappingVisitor visitor;
-	    @Mock
-	    Way way;
-
-	    @BeforeClass
-	    public static void createVisitor() {
-	        visitor = new Foreshore();
-	    }
-
-	    @Before
-	    public void init() {
-	        MockitoAnnotations.initMocks(this);
-	    }
-
-	    @Test
-	    public void testVisitWayAttribute() throws Exception {
-	        visitor.visitWayAttribute("foreshore", way);
-	        verify(way).setTag("water", "tidal");
-	    }
-
-}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/InlandWaterTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/InlandWaterTest.java
deleted file mode 100644
index c2b1284eca..0000000000
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/InlandWaterTest.java
+++ /dev/null
@@ -1,35 +0,0 @@
-package com.graphhopper.reader.osgb.dpn;
-
-import static org.mockito.Mockito.verify;
-
-import org.junit.Before;
-import org.junit.BeforeClass;
-import org.junit.Test;
-import org.mockito.Mock;
-import org.mockito.MockitoAnnotations;
-
-import com.graphhopper.reader.Way;
-import com.graphhopper.reader.osgb.dpn.potentialHazards.InlandWater;
-
-public class InlandWaterTest {
-	 static OsDpnOsmAttributeMappingVisitor visitor;
-	    @Mock
-	    Way way;
-
-	    @BeforeClass
-	    public static void createVisitor() {
-	        visitor = new InlandWater();
-	    }
-
-	    @Before
-	    public void init() {
-	        MockitoAnnotations.initMocks(this);
-	    }
-
-	    @Test
-	    public void testVisitWayAttribute() throws Exception {
-	        visitor.visitWayAttribute("inlandwater", way);
-	        verify(way).setTag("natural", "water");
-	    }
-
-}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/MarshTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/MarshTest.java
deleted file mode 100644
index b8e0400a10..0000000000
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/MarshTest.java
+++ /dev/null
@@ -1,35 +0,0 @@
-package com.graphhopper.reader.osgb.dpn;
-
-import static org.mockito.Mockito.verify;
-
-import org.junit.Before;
-import org.junit.BeforeClass;
-import org.junit.Test;
-import org.mockito.Mock;
-import org.mockito.MockitoAnnotations;
-
-import com.graphhopper.reader.Way;
-import com.graphhopper.reader.osgb.dpn.potentialHazards.Marsh;
-
-public class MarshTest {
-	 static OsDpnOsmAttributeMappingVisitor visitor;
-	    @Mock
-	    Way way;
-
-	    @BeforeClass
-	    public static void createVisitor() {
-	        visitor = new Marsh();
-	    }
-
-	    @Before
-	    public void init() {
-	        MockitoAnnotations.initMocks(this);
-	    }
-
-	    @Test
-	    public void testVisitWayAttribute() throws Exception {
-	        visitor.visitWayAttribute("marsh", way);
-	        verify(way).setTag("wetland", "marsh");
-	    }
-
-}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/MudTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/MudTest.java
deleted file mode 100644
index 48aa002498..0000000000
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/MudTest.java
+++ /dev/null
@@ -1,35 +0,0 @@
-package com.graphhopper.reader.osgb.dpn;
-
-import static org.mockito.Mockito.verify;
-
-import org.junit.Before;
-import org.junit.BeforeClass;
-import org.junit.Test;
-import org.mockito.Mock;
-import org.mockito.MockitoAnnotations;
-
-import com.graphhopper.reader.Way;
-import com.graphhopper.reader.osgb.dpn.potentialHazards.Mud;
-
-public class MudTest {
-	 static OsDpnOsmAttributeMappingVisitor visitor;
-	    @Mock
-	    Way way;
-
-	    @BeforeClass
-	    public static void createVisitor() {
-	        visitor = new Mud();
-	    }
-
-	    @Before
-	    public void init() {
-	        MockitoAnnotations.initMocks(this);
-	    }
-
-	    @Test
-	    public void testVisitWayAttribute() throws Exception {
-	        visitor.visitWayAttribute("mud", way);
-	        verify(way).setTag("natural", "mud");
-	    }
-
-}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/QuarryOrPitTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/QuarryOrPitTest.java
deleted file mode 100644
index 525445c31e..0000000000
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/QuarryOrPitTest.java
+++ /dev/null
@@ -1,36 +0,0 @@
-package com.graphhopper.reader.osgb.dpn;
-
-import static org.mockito.Mockito.verify;
-
-import org.junit.Before;
-import org.junit.BeforeClass;
-import org.junit.Ignore;
-import org.junit.Test;
-import org.mockito.Mock;
-import org.mockito.MockitoAnnotations;
-
-import com.graphhopper.reader.Way;
-import com.graphhopper.reader.osgb.dpn.potentialHazards.QuarryOrPit;
-
-public class QuarryOrPitTest {
-	 static OsDpnOsmAttributeMappingVisitor visitor;
-	    @Mock
-	    Way way;
-
-	    @BeforeClass
-	    public static void createVisitor() {
-	        visitor = new QuarryOrPit();
-	    }
-
-	    @Before
-	    public void init() {
-	        MockitoAnnotations.initMocks(this);
-	    }
-
-	    @Test
-	    public void testVisitWayAttribute() throws Exception {
-	        visitor.visitWayAttribute("quarryorpit", way);
-	        verify(way).setTag("natural", "excavation");
-	    }
-
-}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/RockTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/RockTest.java
deleted file mode 100644
index cd0becd435..0000000000
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/RockTest.java
+++ /dev/null
@@ -1,35 +0,0 @@
-package com.graphhopper.reader.osgb.dpn;
-
-import static org.mockito.Mockito.verify;
-
-import org.junit.Before;
-import org.junit.BeforeClass;
-import org.junit.Test;
-import org.mockito.Mock;
-import org.mockito.MockitoAnnotations;
-
-import com.graphhopper.reader.Way;
-import com.graphhopper.reader.osgb.dpn.potentialHazards.Rock;
-
-public class RockTest {
-	 static OsDpnOsmAttributeMappingVisitor visitor;
-	    @Mock
-	    Way way;
-
-	    @BeforeClass
-	    public static void createVisitor() {
-	        visitor = new Rock();
-	    }
-
-	    @Before
-	    public void init() {
-	        MockitoAnnotations.initMocks(this);
-	    }
-
-	    @Test
-	    public void testVisitWayAttribute() throws Exception {
-	        visitor.visitWayAttribute("rock", way);
-	        verify(way).setTag("natural", "rocks");
-	    }
-
-}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/SandTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/SandTest.java
deleted file mode 100644
index a0bbff4642..0000000000
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/SandTest.java
+++ /dev/null
@@ -1,35 +0,0 @@
-package com.graphhopper.reader.osgb.dpn;
-
-import static org.mockito.Mockito.verify;
-
-import org.junit.Before;
-import org.junit.BeforeClass;
-import org.junit.Test;
-import org.mockito.Mock;
-import org.mockito.MockitoAnnotations;
-
-import com.graphhopper.reader.Way;
-import com.graphhopper.reader.osgb.dpn.potentialHazards.Sand;
-
-public class SandTest {
-	 static OsDpnOsmAttributeMappingVisitor visitor;
-	    @Mock
-	    Way way;
-
-	    @BeforeClass
-	    public static void createVisitor() {
-	        visitor = new Sand();
-	    }
-
-	    @Before
-	    public void init() {
-	        MockitoAnnotations.initMocks(this);
-	    }
-
-	    @Test
-	    public void testVisitWayAttribute() throws Exception {
-	        visitor.visitWayAttribute("sand", way);
-	        verify(way).setTag("natural", "sand");
-	    }
-
-}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/ScreeTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/ScreeTest.java
deleted file mode 100644
index 4515c9b26f..0000000000
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/ScreeTest.java
+++ /dev/null
@@ -1,35 +0,0 @@
-package com.graphhopper.reader.osgb.dpn;
-
-import static org.mockito.Mockito.verify;
-
-import org.junit.Before;
-import org.junit.BeforeClass;
-import org.junit.Test;
-import org.mockito.Mock;
-import org.mockito.MockitoAnnotations;
-
-import com.graphhopper.reader.Way;
-import com.graphhopper.reader.osgb.dpn.potentialHazards.Scree;
-
-public class ScreeTest {
-	 static OsDpnOsmAttributeMappingVisitor visitor;
-	    @Mock
-	    Way way;
-
-	    @BeforeClass
-	    public static void createVisitor() {
-	        visitor = new Scree();
-	    }
-
-	    @Before
-	    public void init() {
-	        MockitoAnnotations.initMocks(this);
-	    }
-
-	    @Test
-	    public void testVisitWayAttribute() throws Exception {
-	        visitor.visitWayAttribute("scree", way);
-	        verify(way).setTag("natural", "scree");
-	    }
-
-}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/ShingleTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/ShingleTest.java
deleted file mode 100644
index 5ee5192ad0..0000000000
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/ShingleTest.java
+++ /dev/null
@@ -1,35 +0,0 @@
-package com.graphhopper.reader.osgb.dpn;
-
-import static org.mockito.Mockito.verify;
-
-import org.junit.Before;
-import org.junit.BeforeClass;
-import org.junit.Test;
-import org.mockito.Mock;
-import org.mockito.MockitoAnnotations;
-
-import com.graphhopper.reader.Way;
-import com.graphhopper.reader.osgb.dpn.potentialHazards.Shingle;
-
-public class ShingleTest {
-	 static OsDpnOsmAttributeMappingVisitor visitor;
-	    @Mock
-	    Way way;
-
-	    @BeforeClass
-	    public static void createVisitor() {
-	        visitor = new Shingle();
-	    }
-
-	    @Before
-	    public void init() {
-	        MockitoAnnotations.initMocks(this);
-	    }
-
-	    @Test
-	    public void testVisitWayAttribute() throws Exception {
-	        visitor.visitWayAttribute("shingle", way);
-	        verify(way).setTag("natural", "shingle");
-	    }
-
-}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/SpoilTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/SpoilTest.java
deleted file mode 100644
index c18a9dc208..0000000000
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/SpoilTest.java
+++ /dev/null
@@ -1,35 +0,0 @@
-package com.graphhopper.reader.osgb.dpn;
-
-import static org.mockito.Mockito.verify;
-
-import org.junit.Before;
-import org.junit.BeforeClass;
-import org.junit.Test;
-import org.mockito.Mock;
-import org.mockito.MockitoAnnotations;
-
-import com.graphhopper.reader.Way;
-import com.graphhopper.reader.osgb.dpn.potentialHazards.Spoil;
-
-public class SpoilTest {
-	 static OsDpnOsmAttributeMappingVisitor visitor;
-	    @Mock
-	    Way way;
-
-	    @BeforeClass
-	    public static void createVisitor() {
-	        visitor = new Spoil();
-	    }
-
-	    @Before
-	    public void init() {
-	        MockitoAnnotations.initMocks(this);
-	    }
-
-	    @Test
-	    public void testVisitWayAttribute() throws Exception {
-	        visitor.visitWayAttribute("spoil", way);
-	        verify(way).setTag("man_made", "spoil_heap");
-	    }
-
-}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/TidalWaterTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/TidalWaterTest.java
deleted file mode 100644
index f8842340d7..0000000000
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/TidalWaterTest.java
+++ /dev/null
@@ -1,36 +0,0 @@
-package com.graphhopper.reader.osgb.dpn;
-
-import static org.mockito.Mockito.verify;
-
-import org.junit.Before;
-import org.junit.BeforeClass;
-import org.junit.Test;
-import org.mockito.Mock;
-import org.mockito.MockitoAnnotations;
-
-import com.graphhopper.reader.Way;
-import com.graphhopper.reader.osgb.dpn.potentialHazards.TidalWater;
-
-public class TidalWaterTest {
-	 static OsDpnOsmAttributeMappingVisitor visitor;
-	    @Mock
-	    Way way;
-
-	    @BeforeClass
-	    public static void createVisitor() {
-	        visitor = new TidalWater();
-	    }
-
-	    @Before
-	    public void init() {
-	        MockitoAnnotations.initMocks(this);
-	    }
-
-	    @Test
-	    public void testVisitWayAttribute() throws Exception {
-	        visitor.visitWayAttribute("tidalwater", way);
-	        verify(way).setTag("natural", "water");
-	        verify(way).setTag("tidal", "yes");
-	    }
-
-}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByNationalCycleRouteTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByNationalCycleRouteTest.java
new file mode 100644
index 0000000000..07ba3b68be
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByNationalCycleRouteTest.java
@@ -0,0 +1,38 @@
+package com.graphhopper.reader.osgb.dpn.additionalRights;
+
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
+
+public class AdoptedByNationalCycleRouteTest {
+    static OsDpnOsmAttributeMappingVisitor visitor;
+    @Mock
+    Way way;
+
+    @BeforeClass
+    public static void createVisitor() {
+        visitor = new AdoptedByNationalCycleRoute();
+    }
+
+    @Before
+    public void init() {
+        MockitoAnnotations.initMocks(this);
+    }
+
+    @Test
+    public void testVisitWayAttribute() {
+        visitor.visitWayAttribute("adoptedbynationalcycleroute", way);
+        verify(way).setTag("foot", "yes");
+        verify(way).setTag("bicycle", "yes");
+        verifyNoMoreInteractions(way);
+    }
+
+}
\ No newline at end of file
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByOtherCycleRouteTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByOtherCycleRouteTest.java
new file mode 100644
index 0000000000..d3b7ab58e0
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByOtherCycleRouteTest.java
@@ -0,0 +1,38 @@
+package com.graphhopper.reader.osgb.dpn.additionalRights;
+
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
+
+public class AdoptedByOtherCycleRouteTest {
+    static OsDpnOsmAttributeMappingVisitor visitor;
+    @Mock
+    Way way;
+
+    @BeforeClass
+    public static void createVisitor() {
+        visitor = new AdoptedByOtherCycleRoute();
+    }
+
+    @Before
+    public void init() {
+        MockitoAnnotations.initMocks(this);
+    }
+
+    @Test
+    public void testVisitWayAttribute() {
+        visitor.visitWayAttribute("adoptedbyothercycleroute", way);
+        verify(way).setTag("foot", "yes");
+        verify(way).setTag("bicycle", "yes");
+        verifyNoMoreInteractions(way);
+    }
+
+}
\ No newline at end of file
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByRecreationalRouteTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByRecreationalRouteTest.java
new file mode 100644
index 0000000000..028b915c5e
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByRecreationalRouteTest.java
@@ -0,0 +1,37 @@
+package com.graphhopper.reader.osgb.dpn.additionalRights;
+
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
+
+public class AdoptedByRecreationalRouteTest {
+    static OsDpnOsmAttributeMappingVisitor visitor;
+    @Mock
+    Way way;
+
+    @BeforeClass
+    public static void createVisitor() {
+        visitor = new AdoptedByRecreationalRoute();
+    }
+
+    @Before
+    public void init() {
+        MockitoAnnotations.initMocks(this);
+    }
+
+    @Test
+    public void testVisitWayAttribute() {
+        visitor.visitWayAttribute("adoptedbyrecreationalroute", way);
+        verify(way).setTag("foot", "yes");
+        verifyNoMoreInteractions(way);
+    }
+
+}
\ No newline at end of file
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/additionalRights/WithinAccessLandTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/additionalRights/WithinAccessLandTest.java
new file mode 100644
index 0000000000..8374c2e21d
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/additionalRights/WithinAccessLandTest.java
@@ -0,0 +1,38 @@
+package com.graphhopper.reader.osgb.dpn.additionalRights;
+
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
+
+public class WithinAccessLandTest {
+    static OsDpnOsmAttributeMappingVisitor visitor;
+    @Mock
+    Way way;
+
+    @BeforeClass
+    public static void createVisitor() {
+        visitor = new WithinAccessLand();
+    }
+
+    @Before
+    public void init() {
+        MockitoAnnotations.initMocks(this);
+    }
+
+    @Test
+    public void testVisitWayAttribute() {
+        visitor.visitWayAttribute("withinaccessland", way);
+        verify(way).setTag("foot", "yes");
+        verify(way).setTag("bicycle", "yes");
+        verifyNoMoreInteractions(way);
+    }
+
+}
\ No newline at end of file
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/BouldersTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/BouldersTest.java
similarity index 62%
rename from core/src/test/java/com/graphhopper/reader/osgb/dpn/BouldersTest.java
rename to core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/BouldersTest.java
index a8fc8b4950..36c1df62e2 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/BouldersTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/BouldersTest.java
@@ -1,6 +1,7 @@
-package com.graphhopper.reader.osgb.dpn;
+package com.graphhopper.reader.osgb.dpn.potentialHazards;
 
 import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
 
 import org.junit.Before;
 import org.junit.BeforeClass;
@@ -9,7 +10,7 @@
 import org.mockito.MockitoAnnotations;
 
 import com.graphhopper.reader.Way;
-import com.graphhopper.reader.osgb.dpn.potentialHazards.Boulders;
+import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
 
 public class BouldersTest {
     static OsDpnOsmAttributeMappingVisitor visitor;
@@ -29,7 +30,9 @@ public void init() {
     @Test
     public void testVisitWayAttribute() throws Exception {
         visitor.visitWayAttribute("boulders", way);
-        verify(way).setTag("natural", "boulders");  // Not an osm tag but what makes sense for dpn
+        verify(way).setTag("natural", "boulders"); // Not an osm tag but what
+                                                   // makes sense for dpn
+        verifyNoMoreInteractions(way);
     }
 
 }
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/CliffTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/CliffTest.java
similarity index 74%
rename from core/src/test/java/com/graphhopper/reader/osgb/dpn/CliffTest.java
rename to core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/CliffTest.java
index 65141b39c7..a055e527b9 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/CliffTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/CliffTest.java
@@ -1,6 +1,7 @@
-package com.graphhopper.reader.osgb.dpn;
+package com.graphhopper.reader.osgb.dpn.potentialHazards;
 
 import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
 
 import org.junit.Before;
 import org.junit.BeforeClass;
@@ -9,7 +10,7 @@
 import org.mockito.MockitoAnnotations;
 
 import com.graphhopper.reader.Way;
-import com.graphhopper.reader.osgb.dpn.potentialHazards.Cliff;
+import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
 
 public class CliffTest {
     static OsDpnOsmAttributeMappingVisitor visitor;
@@ -30,5 +31,6 @@ public void init() {
     public void testVisitWayAttribute() throws Exception {
         visitor.visitWayAttribute("cliff", way);
         verify(way).setTag("natural", "cliff");
+        verifyNoMoreInteractions(way);
     }
 }
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/ForeshoreTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/ForeshoreTest.java
new file mode 100644
index 0000000000..379b52c8f6
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/ForeshoreTest.java
@@ -0,0 +1,37 @@
+package com.graphhopper.reader.osgb.dpn.potentialHazards;
+
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
+
+public class ForeshoreTest {
+    static OsDpnOsmAttributeMappingVisitor visitor;
+    @Mock
+    Way way;
+
+    @BeforeClass
+    public static void createVisitor() {
+        visitor = new Foreshore();
+    }
+
+    @Before
+    public void init() {
+        MockitoAnnotations.initMocks(this);
+    }
+
+    @Test
+    public void testVisitWayAttribute() throws Exception {
+        visitor.visitWayAttribute("foreshore", way);
+        verify(way).setTag("water", "tidal");
+        verifyNoMoreInteractions(way);
+    }
+
+}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/InlandWaterTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/InlandWaterTest.java
new file mode 100644
index 0000000000..21f45a398b
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/InlandWaterTest.java
@@ -0,0 +1,37 @@
+package com.graphhopper.reader.osgb.dpn.potentialHazards;
+
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
+
+public class InlandWaterTest {
+    static OsDpnOsmAttributeMappingVisitor visitor;
+    @Mock
+    Way way;
+
+    @BeforeClass
+    public static void createVisitor() {
+        visitor = new InlandWater();
+    }
+
+    @Before
+    public void init() {
+        MockitoAnnotations.initMocks(this);
+    }
+
+    @Test
+    public void testVisitWayAttribute() throws Exception {
+        visitor.visitWayAttribute("inlandwater", way);
+        verify(way).setTag("natural", "water");
+        verifyNoMoreInteractions(way);
+    }
+
+}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/MarshTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/MarshTest.java
new file mode 100644
index 0000000000..8e7a7a6af4
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/MarshTest.java
@@ -0,0 +1,37 @@
+package com.graphhopper.reader.osgb.dpn.potentialHazards;
+
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
+
+public class MarshTest {
+    static OsDpnOsmAttributeMappingVisitor visitor;
+    @Mock
+    Way way;
+
+    @BeforeClass
+    public static void createVisitor() {
+        visitor = new Marsh();
+    }
+
+    @Before
+    public void init() {
+        MockitoAnnotations.initMocks(this);
+    }
+
+    @Test
+    public void testVisitWayAttribute() throws Exception {
+        visitor.visitWayAttribute("marsh", way);
+        verify(way).setTag("wetland", "marsh");
+        verifyNoMoreInteractions(way);
+    }
+
+}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/MudTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/MudTest.java
new file mode 100644
index 0000000000..55359d0ad1
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/MudTest.java
@@ -0,0 +1,37 @@
+package com.graphhopper.reader.osgb.dpn.potentialHazards;
+
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
+
+public class MudTest {
+    static OsDpnOsmAttributeMappingVisitor visitor;
+    @Mock
+    Way way;
+
+    @BeforeClass
+    public static void createVisitor() {
+        visitor = new Mud();
+    }
+
+    @Before
+    public void init() {
+        MockitoAnnotations.initMocks(this);
+    }
+
+    @Test
+    public void testVisitWayAttribute() throws Exception {
+        visitor.visitWayAttribute("mud", way);
+        verify(way).setTag("natural", "mud");
+        verifyNoMoreInteractions(way);
+    }
+
+}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/QuarryOrPitTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/QuarryOrPitTest.java
new file mode 100644
index 0000000000..a1fa768984
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/QuarryOrPitTest.java
@@ -0,0 +1,37 @@
+package com.graphhopper.reader.osgb.dpn.potentialHazards;
+
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
+
+public class QuarryOrPitTest {
+    static OsDpnOsmAttributeMappingVisitor visitor;
+    @Mock
+    Way way;
+
+    @BeforeClass
+    public static void createVisitor() {
+        visitor = new QuarryOrPit();
+    }
+
+    @Before
+    public void init() {
+        MockitoAnnotations.initMocks(this);
+    }
+
+    @Test
+    public void testVisitWayAttribute() throws Exception {
+        visitor.visitWayAttribute("quarryorpit", way);
+        verify(way).setTag("natural", "excavation");
+        verifyNoMoreInteractions(way);
+    }
+
+}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/RockTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/RockTest.java
new file mode 100644
index 0000000000..061545c9f1
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/RockTest.java
@@ -0,0 +1,37 @@
+package com.graphhopper.reader.osgb.dpn.potentialHazards;
+
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
+
+public class RockTest {
+    static OsDpnOsmAttributeMappingVisitor visitor;
+    @Mock
+    Way way;
+
+    @BeforeClass
+    public static void createVisitor() {
+        visitor = new Rock();
+    }
+
+    @Before
+    public void init() {
+        MockitoAnnotations.initMocks(this);
+    }
+
+    @Test
+    public void testVisitWayAttribute() throws Exception {
+        visitor.visitWayAttribute("rock", way);
+        verify(way).setTag("natural", "rocks");
+        verifyNoMoreInteractions(way);
+    }
+
+}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/SandTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/SandTest.java
new file mode 100644
index 0000000000..963d963d87
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/SandTest.java
@@ -0,0 +1,37 @@
+package com.graphhopper.reader.osgb.dpn.potentialHazards;
+
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
+
+public class SandTest {
+    static OsDpnOsmAttributeMappingVisitor visitor;
+    @Mock
+    Way way;
+
+    @BeforeClass
+    public static void createVisitor() {
+        visitor = new Sand();
+    }
+
+    @Before
+    public void init() {
+        MockitoAnnotations.initMocks(this);
+    }
+
+    @Test
+    public void testVisitWayAttribute() throws Exception {
+        visitor.visitWayAttribute("sand", way);
+        verify(way).setTag("natural", "sand");
+        verifyNoMoreInteractions(way);
+    }
+
+}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/ScreeTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/ScreeTest.java
new file mode 100644
index 0000000000..f308a165cf
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/ScreeTest.java
@@ -0,0 +1,37 @@
+package com.graphhopper.reader.osgb.dpn.potentialHazards;
+
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
+
+public class ScreeTest {
+    static OsDpnOsmAttributeMappingVisitor visitor;
+    @Mock
+    Way way;
+
+    @BeforeClass
+    public static void createVisitor() {
+        visitor = new Scree();
+    }
+
+    @Before
+    public void init() {
+        MockitoAnnotations.initMocks(this);
+    }
+
+    @Test
+    public void testVisitWayAttribute() throws Exception {
+        visitor.visitWayAttribute("scree", way);
+        verify(way).setTag("natural", "scree");
+        verifyNoMoreInteractions(way);
+    }
+
+}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/ShingleTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/ShingleTest.java
new file mode 100644
index 0000000000..3329ebd824
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/ShingleTest.java
@@ -0,0 +1,37 @@
+package com.graphhopper.reader.osgb.dpn.potentialHazards;
+
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
+
+public class ShingleTest {
+    static OsDpnOsmAttributeMappingVisitor visitor;
+    @Mock
+    Way way;
+
+    @BeforeClass
+    public static void createVisitor() {
+        visitor = new Shingle();
+    }
+
+    @Before
+    public void init() {
+        MockitoAnnotations.initMocks(this);
+    }
+
+    @Test
+    public void testVisitWayAttribute() throws Exception {
+        visitor.visitWayAttribute("shingle", way);
+        verify(way).setTag("natural", "shingle");
+        verifyNoMoreInteractions(way);
+    }
+
+}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/SpoilTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/SpoilTest.java
new file mode 100644
index 0000000000..bfefad3185
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/SpoilTest.java
@@ -0,0 +1,37 @@
+package com.graphhopper.reader.osgb.dpn.potentialHazards;
+
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
+
+public class SpoilTest {
+    static OsDpnOsmAttributeMappingVisitor visitor;
+    @Mock
+    Way way;
+
+    @BeforeClass
+    public static void createVisitor() {
+        visitor = new Spoil();
+    }
+
+    @Before
+    public void init() {
+        MockitoAnnotations.initMocks(this);
+    }
+
+    @Test
+    public void testVisitWayAttribute() throws Exception {
+        visitor.visitWayAttribute("spoil", way);
+        verify(way).setTag("man_made", "spoil_heap");
+        verifyNoMoreInteractions(way);
+    }
+
+}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/TidalWaterTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/TidalWaterTest.java
new file mode 100644
index 0000000000..820c84a9a3
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/TidalWaterTest.java
@@ -0,0 +1,38 @@
+package com.graphhopper.reader.osgb.dpn.potentialHazards;
+
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
+
+public class TidalWaterTest {
+    static OsDpnOsmAttributeMappingVisitor visitor;
+    @Mock
+    Way way;
+
+    @BeforeClass
+    public static void createVisitor() {
+        visitor = new TidalWater();
+    }
+
+    @Before
+    public void init() {
+        MockitoAnnotations.initMocks(this);
+    }
+
+    @Test
+    public void testVisitWayAttribute() throws Exception {
+        visitor.visitWayAttribute("tidalwater", way);
+        verify(way).setTag("natural", "water");
+        verify(way).setTag("tidal", "yes");
+        verifyNoMoreInteractions(way);
+    }
+
+}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/BridleWayTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/BridleWayTest.java
similarity index 71%
rename from core/src/test/java/com/graphhopper/reader/osgb/dpn/BridleWayTest.java
rename to core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/BridleWayTest.java
index a33a8cbf15..4c33dcc736 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/BridleWayTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/BridleWayTest.java
@@ -1,6 +1,7 @@
-package com.graphhopper.reader.osgb.dpn;
+package com.graphhopper.reader.osgb.dpn.rightOfWay;
 
 import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
 
 import org.junit.Before;
 import org.junit.BeforeClass;
@@ -9,7 +10,7 @@
 import org.mockito.MockitoAnnotations;
 
 import com.graphhopper.reader.Way;
-import com.graphhopper.reader.osgb.dpn.rightOfWay.BridleWay;
+import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
 
 public class BridleWayTest {
     static OsDpnOsmAttributeMappingVisitor visitor;
@@ -32,6 +33,9 @@ public void testVisitWayAttribute() {
         verify(way).setTag("designation", "public_bridleway");
         verify(way).setTag("highway", "bridleway");
         verify(way).setTag("foot", "yes");
+        verify(way).setTag("horse", "yes");
+        verify(way).setTag("bicycle", "yes");
+        verifyNoMoreInteractions(way);
     }
 
 }
\ No newline at end of file
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/BywayOpenToAllTrafficTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/BywayOpenToAllTrafficTest.java
similarity index 77%
rename from core/src/test/java/com/graphhopper/reader/osgb/dpn/BywayOpenToAllTrafficTest.java
rename to core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/BywayOpenToAllTrafficTest.java
index 4c6ad06eed..3d3f0a35f3 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/BywayOpenToAllTrafficTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/BywayOpenToAllTrafficTest.java
@@ -1,6 +1,7 @@
-package com.graphhopper.reader.osgb.dpn;
+package com.graphhopper.reader.osgb.dpn.rightOfWay;
 
 import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
 
 import org.junit.Before;
 import org.junit.BeforeClass;
@@ -9,7 +10,7 @@
 import org.mockito.MockitoAnnotations;
 
 import com.graphhopper.reader.Way;
-import com.graphhopper.reader.osgb.dpn.rightOfWay.BywayOpenToAllTraffic;
+import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
 
 public class BywayOpenToAllTrafficTest {
 
@@ -35,5 +36,7 @@ public void testVisitWayAttribute() throws Exception {
         verify(way).setTag("foot", "yes");
         verify(way).setTag("horse", "yes");
         verify(way).setTag("bicycle", "yes");
+        verify(way).setTag("motor_vehicle", "yes");
+        verifyNoMoreInteractions(way);
     }
 }
\ No newline at end of file
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/CorePathTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/CorePathTest.java
new file mode 100644
index 0000000000..958cca220b
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/CorePathTest.java
@@ -0,0 +1,35 @@
+package com.graphhopper.reader.osgb.dpn.rightOfWay;
+
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
+
+public class CorePathTest {
+    static OsDpnOsmAttributeMappingVisitor visitor;
+    @Mock
+    Way way;
+
+    @BeforeClass
+    public static void createVisitor() {
+        visitor = new BridleWay();
+    }
+
+    @Before
+    public void init() {
+        MockitoAnnotations.initMocks(this);
+    }
+
+    @Test
+    public void testVisitWayAttribute() {
+        visitor.visitWayAttribute("corepath", way);
+        verifyNoMoreInteractions(way);
+    }
+
+}
\ No newline at end of file
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/FootpathTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/FootpathTest.java
similarity index 66%
rename from core/src/test/java/com/graphhopper/reader/osgb/dpn/FootpathTest.java
rename to core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/FootpathTest.java
index ce2bd4e9fc..89f63a5721 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/FootpathTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/FootpathTest.java
@@ -1,6 +1,7 @@
-package com.graphhopper.reader.osgb.dpn;
+package com.graphhopper.reader.osgb.dpn.rightOfWay;
 
 import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
 
 import org.junit.Before;
 import org.junit.BeforeClass;
@@ -9,7 +10,7 @@
 import org.mockito.MockitoAnnotations;
 
 import com.graphhopper.reader.Way;
-import com.graphhopper.reader.osgb.dpn.rightOfWay.Footpath;
+import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
 
 public class FootpathTest {
     static OsDpnOsmAttributeMappingVisitor visitor;
@@ -17,24 +18,22 @@
     Way way;
 
     @BeforeClass
-    public static void createVisitor()
-    {
+    public static void createVisitor() {
         visitor = new Footpath();
     }
 
     @Before
-    public void init()
-    {
+    public void init() {
         MockitoAnnotations.initMocks(this);
     }
 
     @Test
-    public void testVisitWayAttribute()
-    {
+    public void testVisitWayAttribute() {
         visitor.visitWayAttribute("footpath", way);
         verify(way).setTag("designation", "public_footpath");
         verify(way).setTag("highway", "footway");
         verify(way).setTag("foot", "yes");
+        verifyNoMoreInteractions(way);
     }
 
 }
\ No newline at end of file
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/NoneTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/NoneTest.java
similarity index 76%
rename from core/src/test/java/com/graphhopper/reader/osgb/dpn/NoneTest.java
rename to core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/NoneTest.java
index 40eebe03f6..8c790c1835 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/NoneTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/NoneTest.java
@@ -1,7 +1,7 @@
-package com.graphhopper.reader.osgb.dpn;
+package com.graphhopper.reader.osgb.dpn.rightOfWay;
 
-import com.graphhopper.reader.Way;
-import com.graphhopper.reader.osgb.dpn.rightOfWay.None;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
 
 import org.junit.Before;
 import org.junit.BeforeClass;
@@ -9,8 +9,8 @@
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
 
-import static org.junit.Assert.*;
-import static org.mockito.Mockito.verify;
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
 
 public class NoneTest {
     static OsDpnOsmAttributeMappingVisitor visitor;
@@ -33,6 +33,7 @@ public void testVisitWayAttribute() {
         verify(way).setTag("foot", "no");
         verify(way).setTag("bicycle", "no");
         verify(way).setTag("horse", "no");
+        verifyNoMoreInteractions(way);
     }
 
 }
\ No newline at end of file
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/NormalPermissiveUsesTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/NormalPermissiveUsesTest.java
new file mode 100644
index 0000000000..6c43a58663
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/NormalPermissiveUsesTest.java
@@ -0,0 +1,39 @@
+package com.graphhopper.reader.osgb.dpn.rightOfWay;
+
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
+
+public class NormalPermissiveUsesTest {
+    static OsDpnOsmAttributeMappingVisitor visitor;
+    @Mock
+    Way way;
+
+    @BeforeClass
+    public static void createVisitor() {
+        visitor = new NormalPermissibleUses();
+    }
+
+    @Before
+    public void init() {
+        MockitoAnnotations.initMocks(this);
+    }
+
+    @Test
+    public void testVisitWayAttribute() {
+        visitor.visitWayAttribute("normalpermissibleuses", way);
+        verify(way).setTag("foot", "yes");
+        verify(way).setTag("horse", "yes");
+        verify(way).setTag("bicycle", "yes");
+        verifyNoMoreInteractions(way);
+    }
+
+}
\ No newline at end of file
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/OtherRouteWithPublicAccessTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/OtherRouteWithPublicAccessTest.java
similarity index 76%
rename from core/src/test/java/com/graphhopper/reader/osgb/dpn/OtherRouteWithPublicAccessTest.java
rename to core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/OtherRouteWithPublicAccessTest.java
index b7398a54b3..d077b2bbaa 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/OtherRouteWithPublicAccessTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/OtherRouteWithPublicAccessTest.java
@@ -1,7 +1,7 @@
-package com.graphhopper.reader.osgb.dpn;
+package com.graphhopper.reader.osgb.dpn.rightOfWay;
 
-import com.graphhopper.reader.Way;
-import com.graphhopper.reader.osgb.dpn.rightOfWay.OtherRouteWithPublicAccess;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
 
 import org.junit.Before;
 import org.junit.BeforeClass;
@@ -9,7 +9,8 @@
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
 
-import static org.mockito.Mockito.verify;
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
 
 public class OtherRouteWithPublicAccessTest {
     static OsDpnOsmAttributeMappingVisitor visitor;
@@ -30,6 +31,7 @@ public void init() {
     public void testVisitWayAttribute() {
         visitor.visitWayAttribute("otherroutewithpublicaccess", way);
         verify(way).setTag("foot", "yes");
+        verifyNoMoreInteractions(way);
     }
 
 }
\ No newline at end of file
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/PermissiveBridleWayTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/PermissiveBridleWayTest.java
similarity index 69%
rename from core/src/test/java/com/graphhopper/reader/osgb/dpn/PermissiveBridleWayTest.java
rename to core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/PermissiveBridleWayTest.java
index de5a1e66be..1158e464a7 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/PermissiveBridleWayTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/PermissiveBridleWayTest.java
@@ -1,6 +1,7 @@
-package com.graphhopper.reader.osgb.dpn;
+package com.graphhopper.reader.osgb.dpn.rightOfWay;
 
 import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
 
 import org.junit.Before;
 import org.junit.BeforeClass;
@@ -9,7 +10,7 @@
 import org.mockito.MockitoAnnotations;
 
 import com.graphhopper.reader.Way;
-import com.graphhopper.reader.osgb.dpn.rightOfWay.PermissiveBridleWay;
+import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
 
 public class PermissiveBridleWayTest {
     static OsDpnOsmAttributeMappingVisitor visitor;
@@ -17,25 +18,23 @@
     Way way;
 
     @BeforeClass
-    public static void createVisitor()
-    {
+    public static void createVisitor() {
         visitor = new PermissiveBridleWay();
     }
 
     @Before
-    public void init()
-    {
+    public void init() {
         MockitoAnnotations.initMocks(this);
     }
 
     @Test
-    public void testVisitWayAttribute()
-    {
+    public void testVisitWayAttribute() {
         visitor.visitWayAttribute("permissivebridleway", way);
         verify(way).setTag("highway", "bridleway");
         verify(way).setTag("horse", "permissive");
         verify(way).setTag("bicycle", "permissive");
         verify(way).setTag("foot", "permissive");
+        verifyNoMoreInteractions(way);
     }
 
 }
\ No newline at end of file
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/PermissivePathTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/PermissivePathTest.java
similarity index 76%
rename from core/src/test/java/com/graphhopper/reader/osgb/dpn/PermissivePathTest.java
rename to core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/PermissivePathTest.java
index db82f33bf8..9c16b6f1d3 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/PermissivePathTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/PermissivePathTest.java
@@ -1,6 +1,7 @@
-package com.graphhopper.reader.osgb.dpn;
+package com.graphhopper.reader.osgb.dpn.rightOfWay;
 
 import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
 
 import org.junit.Before;
 import org.junit.BeforeClass;
@@ -9,7 +10,7 @@
 import org.mockito.MockitoAnnotations;
 
 import com.graphhopper.reader.Way;
-import com.graphhopper.reader.osgb.dpn.rightOfWay.PermissivePath;
+import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
 
 public class PermissivePathTest {
 
@@ -31,5 +32,6 @@ public void init() {
     public void testVisitWayAttribute() throws Exception {
         visitor.visitWayAttribute("permissivepath", way);
         verify(way).setTag("foot", "permissive");
+        verifyNoMoreInteractions(way);
     }
 }
\ No newline at end of file
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/RestrictedBywayTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/RestrictedBywayTest.java
similarity index 59%
rename from core/src/test/java/com/graphhopper/reader/osgb/dpn/RestrictedBywayTest.java
rename to core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/RestrictedBywayTest.java
index 0a11812a17..3b2714606f 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/RestrictedBywayTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/RestrictedBywayTest.java
@@ -1,6 +1,7 @@
-package com.graphhopper.reader.osgb.dpn;
+package com.graphhopper.reader.osgb.dpn.rightOfWay;
 
 import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
 
 import org.junit.Before;
 import org.junit.BeforeClass;
@@ -9,7 +10,7 @@
 import org.mockito.MockitoAnnotations;
 
 import com.graphhopper.reader.Way;
-import com.graphhopper.reader.osgb.dpn.rightOfWay.RestrictedByway;
+import com.graphhopper.reader.osgb.dpn.OsDpnOsmAttributeMappingVisitor;
 
 public class RestrictedBywayTest {
     static OsDpnOsmAttributeMappingVisitor visitor;
@@ -17,23 +18,24 @@
     Way way;
 
     @BeforeClass
-    public static void createVisitor()
-    {
+    public static void createVisitor() {
         visitor = new RestrictedByway();
     }
 
     @Before
-    public void init()
-    {
+    public void init() {
         MockitoAnnotations.initMocks(this);
     }
 
     @Test
-    public void testVisitWayAttribute() throws Exception
-    {
+    public void testVisitWayAttribute() throws Exception {
         visitor.visitWayAttribute("restrictedbyway", way);
         verify(way).setTag("designation", "restricted_byway");
         verify(way).setTag("highway", "track");
         verify(way).setTag("motor_vehicle", "no");
+        verify(way).setTag("foot", "yes");
+        verify(way).setTag("horse", "yes");
+        verify(way).setTag("bicycle", "yes");
+        verifyNoMoreInteractions(way);
     }
 }
\ No newline at end of file
