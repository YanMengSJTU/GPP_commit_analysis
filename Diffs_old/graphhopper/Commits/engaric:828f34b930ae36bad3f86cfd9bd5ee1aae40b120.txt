diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/AbstractOsDpnReaderTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/AbstractOsDpnReaderTest.java
index c16104a876..60bc185a94 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/AbstractOsDpnReaderTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/AbstractOsDpnReaderTest.java
@@ -43,7 +43,7 @@
     protected boolean turnCosts = false;
     protected BikeFlagEncoder bikeEncoder;
     protected FootFlagEncoder footEncoder;
-	protected EdgeExplorer footOutExplorer;
+	protected EdgeExplorer footExplorer;
 
     // RoadNode 880
     protected static double node0Lat = 50.6992070044d;
@@ -114,12 +114,12 @@ protected GraphHopperStorage configureStorage(
         GraphExtension extendedStorage = turnRestrictionsImport ? new TurnCostExtension() : new GraphExtension.NoExtendedStorage();
         GraphHopperStorage graph = new GraphHopperStorage(new RAMDirectory(
                 directory, false), encodingManager, is3D, extendedStorage);
-        footOutExplorer = graph.createEdgeExplorer(new DefaultEdgeFilter(footEncoder, false, true));
+        footExplorer = graph.createEdgeExplorer(new DefaultEdgeFilter(footEncoder, false, true));
         return graph;
     }
 
     protected int getEdge(int from, int to) {
-        EdgeIterator iter = footOutExplorer.setBaseNode(from);
+        EdgeIterator iter = footExplorer.setBaseNode(from);
         while (iter.next()) {
             if (iter.getAdjNode() == to) {
                 return iter.getEdge();
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/OsDpnReaderTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/OsDpnReaderTest.java
index e354f0a92b..83bb1765be 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/OsDpnReaderTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/OsDpnReaderTest.java
@@ -18,135 +18,136 @@
 
 public class OsDpnReaderTest extends AbstractOsDpnReaderTest
 {
-	private GraphHopperStorage graph;
+    private GraphHopperStorage graph;
 
     @Test
     public void testReadDpnSampleLayout() throws IOException
     {
-	configure(0);
-
-	assertEquals(5, graph.getNodes());
-
-	assertEquals(4, count(footOutExplorer.setBaseNode(0))); // Central Tower
-	assertEquals(1, count(footOutExplorer.setBaseNode(1))); // Cross Road Vertex
-	assertEquals(1, count(footOutExplorer.setBaseNode(2))); // Cross Road Vertex
-	assertEquals(1, count(footOutExplorer.setBaseNode(3))); // Cross Road Vertex
-	assertEquals(1, count(footOutExplorer.setBaseNode(4))); // Cross Road Vertex
-
-	// Assert that this is true
-	EdgeIterator iter = footOutExplorer.setBaseNode(0);
-	assertTrue(iter.next());
-	assertEquals(4, iter.getAdjNode());
-	assertTrue(iter.next());
-	assertEquals(3, iter.getAdjNode());
-	assertTrue(iter.next());
-	assertEquals(2, iter.getAdjNode());
-	assertTrue(iter.next());
-	assertEquals(1, iter.getAdjNode());
-	assertFalse(iter.next());
-
-	iter = footOutExplorer.setBaseNode(1);
-	assertTrue(iter.next());
-	assertEquals(0, iter.getAdjNode());
-	assertFalse(iter.next());
-
-	iter = footOutExplorer.setBaseNode(2);
-	assertTrue(iter.next());
-	assertEquals(0, iter.getAdjNode());
-	assertFalse(iter.next());
-
-	iter = footOutExplorer.setBaseNode(3);
-	assertTrue(iter.next());
-	assertEquals(0, iter.getAdjNode());
-	assertFalse(iter.next());
-
-	iter = footOutExplorer.setBaseNode(4);
-	assertTrue(iter.next());
-	assertEquals(0, iter.getAdjNode());
-	assertFalse(iter.next());
+        configure(0);
+
+        assertEquals(5, graph.getNodes());
+
+        assertEquals(4, count(footExplorer.setBaseNode(0))); // Central Tower
+        assertEquals(1, count(footExplorer.setBaseNode(1))); // Cross Road Vertex
+        assertEquals(1, count(footExplorer.setBaseNode(2))); // Cross Road Vertex
+        assertEquals(1, count(footExplorer.setBaseNode(3))); // Cross Road Vertex
+        assertEquals(1, count(footExplorer.setBaseNode(4))); // Cross Road Vertex
+
+        // Assert that this is true
+        EdgeIterator iter = footExplorer.setBaseNode(0);
+        assertTrue(iter.next());
+        assertEquals(4, iter.getAdjNode());
+        assertTrue(iter.next());
+        assertEquals(3, iter.getAdjNode());
+        assertTrue(iter.next());
+        assertEquals(2, iter.getAdjNode());
+        assertTrue(iter.next());
+        assertEquals(1, iter.getAdjNode());
+        assertFalse(iter.next());
+
+        iter = footExplorer.setBaseNode(1);
+        assertTrue(iter.next());
+        assertEquals(0, iter.getAdjNode());
+        assertFalse(iter.next());
+
+        iter = footExplorer.setBaseNode(2);
+        assertTrue(iter.next());
+        assertEquals(0, iter.getAdjNode());
+        assertFalse(iter.next());
+
+        iter = footExplorer.setBaseNode(3);
+        assertTrue(iter.next());
+        assertEquals(0, iter.getAdjNode());
+        assertFalse(iter.next());
+
+        iter = footExplorer.setBaseNode(4);
+        assertTrue(iter.next());
+        assertEquals(0, iter.getAdjNode());
+        assertFalse(iter.next());
     }
 
     @Test
     public void testReadDpnSampleName() throws IOException
     {
-	configure(0);
-	EdgeIterator iter = footOutExplorer.setBaseNode(0);
-	assertTrue(iter.next());
-	assertTrue(iter.next());
-	assertTrue(iter.next());
-	assertTrue(iter.next());
-	assertEquals("Name field available so should be set", "Named Road", iter.getName());
+
+        configure(0);
+        EdgeIterator iter = footExplorer.setBaseNode(0);
+        assertTrue(iter.next());
+        assertTrue(iter.next());
+        assertTrue(iter.next());
+        assertTrue(iter.next());
+        assertEquals("Name field available so should be set", "Named Road", iter.getName());
     }
 
     @Test
     public void testReadDpnSampleNameWithAlternate() throws IOException
     {
-	configure(0);
-	EdgeIterator iter = footOutExplorer.setBaseNode(0);
-	assertTrue(iter.next());
-	assertTrue(iter.next());
-	assertTrue(iter.next());
-	assertEquals("Name fields both available so should be set",
-			"Named Road Two (With Alternate)", iter.getName());
+        configure(0);
+        EdgeIterator iter = footExplorer.setBaseNode(0);
+        assertTrue(iter.next());
+        assertTrue(iter.next());
+        assertTrue(iter.next());
+        assertEquals("Name fields both available so should be set",
+                "Named Road Two (With Alternate)", iter.getName());
     }
 
     @Test
     public void testReadDpnSampleNameDefaultToTrackType() throws IOException
     {
-	configure(0);
-	EdgeIterator iter = footOutExplorer.setBaseNode(0);
-	assertTrue(iter.next());
-	assertEquals("No Name field available so should report track type", "Alley", iter.getName());
+        configure(0);
+        EdgeIterator iter = footExplorer.setBaseNode(0);
+        assertTrue(iter.next());
+        assertEquals("No Name field available so should report track type", "Alley", iter.getName());
     }
 
     @Test
     public void testReadDpnSampleNameDefaultToTrackFriendlyNameWhenNoPhysicalManifestation()
-		    throws IOException
+            throws IOException
     {
-	configure(0);
-	EdgeIterator iter = footOutExplorer.setBaseNode(0);
-	assertTrue(iter.next());
-	assertTrue(iter.next());
-	assertEquals("No Name field available so should be report track type", "Route",
-			iter.getName());
+        configure(0);
+        EdgeIterator iter = footExplorer.setBaseNode(0);
+        assertTrue(iter.next());
+        assertTrue(iter.next());
+        assertEquals("No Name field available so should be report track type", "Route",
+                iter.getName());
     }
-    
+
     @Test
     public void testReadDpnWayGeometry() throws IOException
     {
-	configure(0);
-	EdgeIterator iter = footOutExplorer.setBaseNode(0);
-	assertTrue(iter.next());
-	assertEquals(1, iter.fetchWayGeometry(0).size());
-	assertTrue(iter.next());
-	assertEquals(1, iter.fetchWayGeometry(0).size());
-	assertTrue(iter.next());
-	assertEquals(5, iter.fetchWayGeometry(0).size());
-	assertTrue(iter.next());
-	assertEquals(8, iter.fetchWayGeometry(0).size());
-	assertFalse(iter.next());
-		
+        configure(0);
+        EdgeIterator iter = footExplorer.setBaseNode(0);
+        assertTrue(iter.next());
+        assertEquals(1, iter.fetchWayGeometry(0).size());
+        assertTrue(iter.next());
+        assertEquals(1, iter.fetchWayGeometry(0).size());
+        assertTrue(iter.next());
+        assertEquals(5, iter.fetchWayGeometry(0).size());
+        assertTrue(iter.next());
+        assertEquals(8, iter.fetchWayGeometry(0).size());
+        assertFalse(iter.next());
+
     }
-    
+
     @Test
     public void testReadDpnWayGeometryWithSimplifiedWayGeometry() throws IOException
     {
-	configure(1);
-	EdgeIterator iter = footOutExplorer.setBaseNode(0);
-	assertTrue(iter.next());
-	assertEquals(1, iter.fetchWayGeometry(0).size());
-	assertTrue(iter.next());
-	assertEquals(1, iter.fetchWayGeometry(0).size());
-	assertTrue(iter.next());
-	assertEquals(4, iter.fetchWayGeometry(0).size());
-	assertTrue(iter.next());
-	assertEquals(5, iter.fetchWayGeometry(0).size());
-	assertFalse(iter.next());
-		
+        configure(1);
+        EdgeIterator iter = footExplorer.setBaseNode(0);
+        assertTrue(iter.next());
+        assertEquals(1, iter.fetchWayGeometry(0).size());
+        assertTrue(iter.next());
+        assertEquals(1, iter.fetchWayGeometry(0).size());
+        assertTrue(iter.next());
+        assertEquals(4, iter.fetchWayGeometry(0).size());
+        assertTrue(iter.next());
+        assertEquals(5, iter.fetchWayGeometry(0).size());
+        assertFalse(iter.next());
+
     }
-    
+
     /**
-     * 
+     *
      * @param maxWayPointDistance 0 disables DouglasPeuker simplification 1 = graphhopper default 1 metre
      * @throws IOException
      */
@@ -158,19 +159,19 @@ private void configure(int maxWayPointDistance) throws IOException {
 
     private void configureExplorer(final GraphHopperStorage graph)
     {
-    	footOutExplorer = graph.createEdgeExplorer(new DefaultEdgeFilter(footEncoder, true, true));
+        footExplorer = graph.createEdgeExplorer(new DefaultEdgeFilter(footEncoder, true, true));
     }
 
     private GraphHopperStorage readGraph(int maxWayPointDistance) throws IOException
     {
-	final boolean turnRestrictionsImport = false;
-	final boolean is3D = false;
-	final GraphHopperStorage graph = configureStorage(turnRestrictionsImport, is3D);
-
-	final File file = new File(
-			"./src/test/resources/com/graphhopper/reader/osgb/dpn/os-dpn-sample.xml");
-	readGraphFile(graph, file, maxWayPointDistance);
-	return graph;
+        final boolean turnRestrictionsImport = false;
+        final boolean is3D = false;
+        final GraphHopperStorage graph = configureStorage(turnRestrictionsImport, is3D);
+
+        final File file = new File(
+                "./src/test/resources/com/graphhopper/reader/osgb/dpn/os-dpn-sample.xml");
+        readGraphFile(graph, file, maxWayPointDistance);
+        return graph;
     }
 
 }
