diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
index b42d61146f..e5a4f8cf7b 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
@@ -241,7 +241,7 @@ public void I_should_be_able_to_verify_the_not_waypoints_on_the_route_map(
 
 		Assert.assertFalse(
 				"Waypoint found on the route where it was not expected",
-				graphUiUtil.isWayPointonRouteMap(wayPointList));
+				graphUiUtil.isWayPointNotonRouteMap(wayPointList));
 		// graphUiUtil.isWayPointNotonRouteMap(wayPointList);
 
 	}
diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
index 632d0b716f..4472b2ae93 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
@@ -396,12 +396,59 @@ private Waypoint buildWayPoint(String wayPoint_Coordinates,
 	}
 
 	public boolean isWayPointNotonRouteMap(
-			List<Map<String, String>> wayPointList) {
-		boolean isWayPointonRouteMap = isWayPointonRouteMap(wayPointList);
-		return isWayPointonRouteMap;
+			List<Map<String, String>> waypointList) {
+		
+		boolean isWayPointNotonsRouteMap = true;
+		boolean isWayPointNotonRouteMap=true;
+		for (int i = 0; i < waypointList.size(); i++) {
+
+			if (waypointList.get(i).size() > 2) {
+				String wayPointIndex = (String) waypointList.get(i).get(
+						"wayPointIndex");
+				String waypointco = (String) waypointList.get(i).get(
+						"waypointco");
+				String waypointdesc = (String) waypointList.get(i).get(
+						"waypointdesc");
+				String azimuth = (String) waypointList.get(i).get("azimuth");
+				String direction = (String) waypointList.get(i)
+						.get("direction");
+				String time = (String) waypointList.get(i).get("time");
+				String distance = (String) waypointList.get(i).get("distance");
+				String avoidance = (String) waypointList.get(i)
+						.get("avoidance");
+
+				isWayPointNotonRouteMap = isWayPointonRouteMap(wayPointIndex,
+						waypointco, waypointdesc, azimuth, direction, time,
+						distance, avoidance);
+				
+				isWayPointNotonsRouteMap=(isWayPointNotonsRouteMap&&isWayPointNotonRouteMap);
+					
+			}
+
+			else
+
+			{
+
+				String wayPointIndex = (String) waypointList.get(i).get(
+						"wayPointIndex");
+				String waypointdesc = (String) waypointList.get(i).get(
+						"waypointdesc");
+				isWayPointNotonRouteMap = verifyInstructionThroughUI(
+						wayPointIndex, waypointdesc, "");
+				
+				isWayPointNotonsRouteMap=(isWayPointNotonsRouteMap||isWayPointNotonRouteMap);
+				
+
+			}
+
+		}
+		return isWayPointNotonsRouteMap;
+
+
 	}
 
 	public boolean isWayPointonRouteMap(List<Map<String, String>> waypointList) {
+		boolean isWayPointsonRouteMap = true;
 		boolean isWayPointonRouteMap = false;
 		for (int i = 0; i < waypointList.size(); i++) {
 
@@ -423,6 +470,10 @@ public boolean isWayPointonRouteMap(List<Map<String, String>> waypointList) {
 				isWayPointonRouteMap = isWayPointonRouteMap(wayPointIndex,
 						waypointco, waypointdesc, azimuth, direction, time,
 						distance, avoidance);
+				
+				isWayPointsonRouteMap=isWayPointsonRouteMap&&isWayPointonRouteMap;
+
+					
 			}
 
 			else
@@ -435,13 +486,20 @@ public boolean isWayPointonRouteMap(List<Map<String, String>> waypointList) {
 						"waypointdesc");
 				isWayPointonRouteMap = verifyInstructionThroughUI(
 						wayPointIndex, waypointdesc, "");
+				
+				isWayPointsonRouteMap=isWayPointsonRouteMap&&isWayPointonRouteMap;
+				
 
 			}
 
 		}
-		return isWayPointonRouteMap;
+		return isWayPointsonRouteMap;
 
 	}
+	
+	
+
+	
 
 	public void verifyTotalRouteTime(String totalRouteTime)
 			throws ParseException {
