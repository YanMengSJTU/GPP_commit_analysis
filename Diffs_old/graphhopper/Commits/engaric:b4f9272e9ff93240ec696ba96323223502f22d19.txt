diff --git a/core/src/main/java/com/graphhopper/storage/index/LocationIndex.java b/core/src/main/java/com/graphhopper/storage/index/LocationIndex.java
index d0d82b92f3..b75690f26f 100644
--- a/core/src/main/java/com/graphhopper/storage/index/LocationIndex.java
+++ b/core/src/main/java/com/graphhopper/storage/index/LocationIndex.java
@@ -47,14 +47,18 @@
     int findID( double lat, double lon );
 
     /**
+     * This method returns the closest QueryResult for the specified location (lat, lon) and only if
+     * the filter accepts the edge as valid candidate (e.g. filtering away car-only results for bike
+     * search)
+     * <p>
      * @param edgeFilter if a graph supports multiple vehicles we have to make sure that the entry
      * node into the graph is accessible from a selected vehicle. E.g. if you have a FOOT-query do:      <pre>
-     *   new DefaultEdgeFilter(new FootFlagEncoder());
+     *   new DefaultEdgeFilter(footFlagEncoder);
      * </pre>
      * <p>
      * @return An object containing the closest node and edge for the specfied location. The node id
-     * has at least one edge which is accepted from the specified edgeFilter. If nothing is found it
-     * returns null.
+     * has at least one edge which is accepted from the specified edgeFilter. If nothing is found
+     * the method QueryResult.isValid will return false.
      */
     QueryResult findClosest( double lat, double lon, EdgeFilter edgeFilter );
 
