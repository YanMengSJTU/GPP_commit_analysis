diff --git a/core/src/main/java/com/graphhopper/reader/dem/HighPrecisionSRTMProvider.java b/core/src/main/java/com/graphhopper/reader/dem/HighPrecisionSRTMProvider.java
index 1114823a6a..40d130f8b9 100644
--- a/core/src/main/java/com/graphhopper/reader/dem/HighPrecisionSRTMProvider.java
+++ b/core/src/main/java/com/graphhopper/reader/dem/HighPrecisionSRTMProvider.java
@@ -69,6 +69,7 @@ public static void main(String[] args) throws IOException
     private final double invPrecision = 1 / precision;
     // mirror: base = "http://mirror.ufs.ac.za/datasets/SRTM3/"
 
+    private LowPrecisionSRTMProvider lowResProvider = new LowPrecisionSRTMProvider();
 
     public HighPrecisionSRTMProvider()
     {
@@ -77,11 +78,16 @@ public HighPrecisionSRTMProvider()
     }
 
     String getFileString(double lat, double lon)
+    {
+        return getElevationAsString(lat, lon)  + ".SRTMGL1";
+    }
+
+    private String getElevationAsString(double lat, double lon)
     {
         int minLat = Math.abs(down(lat));
         int minLon = Math.abs(down(lon));
 
-        return String.format("%s%02d%s%03d.SRTMGL1",
+        return String.format("%s%02d%s%03d",
                 (lat >= 0) ? "N" : "S",
                 minLat,
                 (lon >= 0) ? "E" : "W",
@@ -96,7 +102,8 @@ public double getEle(double lat, double lon)
             return super.getEle(lat, lon);
         } catch (RuntimeException ex)
         {
-            // TODO do fallback to low-res version
+            logger.warn("Falling back to low-resolution SRTM data for " + getElevationAsString(lat, lon));
+            return lowResProvider.getEle(lat, lon);
         }
     }
 
diff --git a/core/src/main/java/com/graphhopper/reader/dem/SRTMProvider.java b/core/src/main/java/com/graphhopper/reader/dem/SRTMProvider.java
index e69c65c016..e9d4b25aa0 100644
--- a/core/src/main/java/com/graphhopper/reader/dem/SRTMProvider.java
+++ b/core/src/main/java/com/graphhopper/reader/dem/SRTMProvider.java
@@ -42,7 +42,7 @@
 {
 
     private static final BitUtil BIT_UTIL = BitUtil.BIG;
-    private final Logger logger = LoggerFactory.getLogger(getClass());
+    protected final Logger logger = LoggerFactory.getLogger(getClass());
     protected int WIDTH;
     private Directory dir;
     private DAType daType = DAType.MMAP;
