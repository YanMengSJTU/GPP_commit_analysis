diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/Marmoset.java b/marmoset/src/main/java/com/graphhopper/marmoset/Marmoset.java
index 0b9c0b5a1b..073504e7c9 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/Marmoset.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/Marmoset.java
@@ -2,6 +2,7 @@
 
 import fi.iki.elonen.SimpleWebServer;
 import fi.iki.elonen.util.ServerRunner;
+import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
 import java.io.File;
@@ -17,6 +18,8 @@
     private static MarmosetSocketServer mss;
     private static boolean isRunning = false;
 
+    private static Logger logger = LoggerFactory.getLogger(Marmoset.class);
+
     public static void main(String[] args) throws IOException, InterruptedException
     {
         mh = new MarmosetHopper();
@@ -26,38 +29,41 @@ public static void main(String[] args) throws IOException, InterruptedException
         startWebSocketServer();
     }
 
-    public static void run()
+    public static void run(int initialVehicles)
     {
         if (!isRunning)
         {
             isRunning = true;
-            new Thread() {
-                @Override
-                public void run()
+            Runnable task = () -> {
+                int i = 0;
+                mh.startSimulation(initialVehicles);
+                while (true)
                 {
-                    int i = 0;
-                    mh.startSimulation();
-                    while (true)
+                    logger.info("===ITERATION [" + i + "]===");
+                    i++;
+                    mh.timestep();
+                    String data = mh.getVehicleData();
+                    mss.distributeData(data);
+                    try
+                    {
+                        Thread.sleep(1000);
+                    }
+                    catch (InterruptedException e)
                     {
-                        System.out.println("Running iteration " + i);
-                        i++;
-                        mh.timestep();
-                        String data = mh.getVehicleData();
-                        mss.distributeData(data);
-                        try
-                        {
-                            Thread.sleep(1000);
-                        }
-                        catch (InterruptedException e)
-                        {
-                            e.printStackTrace();
-                        }
+                        e.printStackTrace();
                     }
                 }
-            }.start();
+            };
+
+            new Thread(task).start();
         }
     }
 
+    public static void addVehicle()
+    {
+        mh.addVehicle();
+    }
+
     private static void startWebSocketServer()
     {
         int port = 8888;
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetHopper.java b/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetHopper.java
index feb8b027d2..f07210875a 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetHopper.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetHopper.java
@@ -4,7 +4,6 @@
 import com.graphhopper.marmoset.util.CellsGraph;
 import com.graphhopper.marmoset.util.Location;
 import com.graphhopper.util.CmdArgs;
-import org.slf4j.LoggerFactory;
 
 import java.io.IOException;
 import java.util.*;
@@ -39,31 +38,48 @@ public void init()
         }
 
         args.put("osmreader.osm", "british-isles-latest.osm.pbf");
+
         hopper.init(args);
         hopper.importOrLoad();
 
-        cellsGraph = new CellsGraph(hopper.getGraphHopperStorage().getBaseGraph(), 10);
+        double cellSize = args.getDouble("marmoset.cellsize", 10.0);
+        cellsGraph = new CellsGraph(hopper.getGraphHopperStorage().getBaseGraph(), cellSize);
         cellsGraph.init();
+    }
 
-        int count = args.getInt("marmoset.vehicles", 1000);
-        Random latRan = new Random(123);
-        Random lonRan = new Random(456);
+    private Random latRan = new Random(123);
+    private Random lonRan = new Random(456);
+    private double randBound(Random r, double low, double high)
+    {
+        double range = high - low;
+        return r.nextDouble() * range + low;
+    }
 
-        ArrayList<Double> lons = lonRan.doubles(-0.5, 0.25).limit(count * 2).boxed().collect(Collectors.toCollection(ArrayList::new));
-        ArrayList<Double> lats = latRan.doubles(51.2, 51.7).limit(count * 2).boxed().collect(Collectors.toCollection(ArrayList::new));
+    private Location randLondon()
+    {
+        double lat = randBound(latRan, 51.2, 51.7);
+        double lon = randBound(lonRan, -0.5, 0.25);
+        return new Location(lat, lon);
+    }
 
-        vehicles = IntStream.range(0, count).map(c -> c * 2)
-                .mapToObj(c -> new Vehicle(this, new Location(lats.get(c), lons.get(c)), new Location(lats.get(c+1), lons.get(c+1))))
-                .collect(Collectors.toCollection(ArrayList::new));
+    public synchronized void addVehicle()
+    {
+        Vehicle v = new Vehicle(this, randLondon(), randLondon());
+        v.init();
+        if (v.isFinished())
+            addVehicle();
+        else
+            vehicles.add(v);
     }
 
-    public void startSimulation()
+    public synchronized void startSimulation(int initialVehicles)
     {
-        vehicles.stream().forEach(Vehicle::init);
+        IntStream.range(0, initialVehicles).forEach(v -> addVehicle());
         vehicles = vehicles.stream().filter(v -> !v.isFinished()).collect(Collectors.toList());
     }
 
-    public void timestep() {
+    public synchronized void timestep()
+    {
         vehicles.stream().forEach(Vehicle::accelerationStep);
         vehicles.stream().forEach(Vehicle::slowStep);
         vehicles.stream().forEach(Vehicle::randomStep);
@@ -73,7 +89,8 @@ public void timestep() {
         vehicles = vehicles.stream().filter(v -> !v.isFinished()).collect(Collectors.toList());
     }
 
-    public String getVehicleData() {
+    public synchronized String getVehicleData()
+    {
         return vehicles.parallelStream().map(Vehicle::toString).collect(Collectors.joining(","));
     }
 
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetSocketServer.java b/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetSocketServer.java
index 7088b4792c..bd39340f95 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetSocketServer.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetSocketServer.java
@@ -3,21 +3,26 @@
 import org.java_websocket.WebSocket;
 import org.java_websocket.handshake.ClientHandshake;
 import org.java_websocket.server.WebSocketServer;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import java.net.InetSocketAddress;
+import java.util.Collections;
 import java.util.HashSet;
+import java.util.Set;
 
 /**
  * Created by alexander on 18/02/2016.
  */
 public class MarmosetSocketServer extends WebSocketServer {
 
-    private HashSet<WebSocket> sockets;
+    private Set<WebSocket> sockets;
+    private Logger logger = LoggerFactory.getLogger(MarmosetSocketServer.class);
 
     public MarmosetSocketServer(InetSocketAddress address)
     {
         super(address);
-        sockets = new HashSet<>();
+        sockets = Collections.synchronizedSet(new HashSet<>());
     }
 
     public void distributeData(String s)
@@ -42,9 +47,17 @@ public void onClose(WebSocket webSocket, int i, String s, boolean b)
     @Override
     public void onMessage(WebSocket webSocket, String s)
     {
-        if (s.equals("run"))
+        logger.info("Received message: " + s);
+        if (s.matches("start\\|\\d+"))
         {
-            Marmoset.run();
+            logger.info("run message");
+            String num = s.split("\\|")[1];
+            logger.info("Starting simulation with " + num + " vehicles");
+            Marmoset.run(Integer.valueOf(num, 10));
+        }
+        else if (s.equals("addVehicle"))
+        {
+            Marmoset.addVehicle();
         }
     }
 
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/Vehicle.java b/marmoset/src/main/java/com/graphhopper/marmoset/Vehicle.java
index 7e374e6afd..91f0b84c34 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/Vehicle.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/Vehicle.java
@@ -69,7 +69,7 @@ public void init()
         List<Path> paths = gh.calcPaths(ghRequest, ghResponse);
         if (ghResponse.hasErrors())
         {
-            logger.error("ERRORS:" + ghResponse.getErrors().stream().map(Throwable::toString).collect(Collectors.joining("\n")));
+            System.out.println("ERRORS:" + ghResponse.getErrors().stream().map(Throwable::toString).collect(Collectors.joining("\n")));
             finished = true;
             return;
         }
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/util/CellsGraph.java b/marmoset/src/main/java/com/graphhopper/marmoset/util/CellsGraph.java
index 5bdbf1621d..1c01773f38 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/util/CellsGraph.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/util/CellsGraph.java
@@ -7,11 +7,11 @@
  * Created by alexander on 01/03/2016.
  */
 public class CellsGraph {
-    private final int cellSize;
+    private final double cellSize;
     private Graph graph;
     private boolean[][] cells;
 
-    public CellsGraph(Graph graph, int cellSize) {
+    public CellsGraph(Graph graph, double cellSize) {
         this.cellSize = cellSize;
         this.graph = graph;
     }
diff --git a/marmoset/src/main/webapp/index.html b/marmoset/src/main/webapp/index.html
index 0e31e787a7..1024c6741d 100644
--- a/marmoset/src/main/webapp/index.html
+++ b/marmoset/src/main/webapp/index.html
@@ -10,6 +10,13 @@
         </style>
     </head>
     <body onload="initAll()">
+        <div id="controls">
+            <input type="number" name="initVehicles" id="initVehicles" placeholder="Initial vehicles">
+            <input type="button" name="startSimulation" id="startSimulation" value="Start Simulation">
+            <br><br>
+            <input type="button" name="addVehicles" id="addVehicle" value="Add Vehicle">
+        </div>
+        <br>
         <div id="map"></div>
 
         <script src="main.js"></script>
diff --git a/marmoset/src/main/webapp/main.js b/marmoset/src/main/webapp/main.js
index aa8d9ea499..0b3edadf0c 100644
--- a/marmoset/src/main/webapp/main.js
+++ b/marmoset/src/main/webapp/main.js
@@ -16,10 +16,20 @@ function initMap() {
     }).addTo(map);
 }
 
+function initButtons(carSet) {
+    document.getElementById("startSimulation").addEventListener("click", function() {
+        var count = document.getElementById("initVehicles").value;
+        console.log("Starting simulation with", count, "vehicles");
+        carSet.init(count);
+    });
+    document.getElementById("addVehicle").addEventListener("click", function () {
+        carSet.ws.send("addVehicle");
+    });
+}
 
 function initAll() {
     initMap();
-    carSet.init();
+    initButtons(carSet);
 }
 
 
@@ -27,14 +37,14 @@ var carSet = {
     _cars: [],
 
     // start listening to the websocket and setup the callbacks
-    init: function() {
+    init: function(count) {
         this.ws = new WebSocket("ws://localhost:8888");
         this.ws.onmessage = function (e) {
             this.processData(e.data);
         }.bind(this);
-        this.ws.onopen = function(e) {
-            e.target.send("run");
-        };
+        this.ws.onopen = function (e) {
+            this.ws.send("start|" + count);
+        }.bind(this);
     },
 
     // deals with the set of data that comes from the websocket
