diff --git a/core/src/main/java/com/graphhopper/util/RoundaboutInstruction.java b/core/src/main/java/com/graphhopper/util/RoundaboutInstruction.java
index 65559c62f7..d5b9d2b882 100644
--- a/core/src/main/java/com/graphhopper/util/RoundaboutInstruction.java
+++ b/core/src/main/java/com/graphhopper/util/RoundaboutInstruction.java
@@ -110,14 +110,14 @@ public RoundaboutInstruction setRadian(double radian)
     @Override
     public Map<String, Object> getExtraInfoJSON()
     {
-        Map<String, Object> tmpMap = new HashMap<String, Object>();
-        tmpMap.put("exitNr", getExitNr());
+        Map<String, Object> tmpMap = new HashMap<String, Object>(2);
+        tmpMap.put("exit_nr", getExitNr());
         double radian = getRadian();
         if (Double.isNaN(radian))
         {
-            tmpMap.put("turnAngle", JSONObject.NULL);
+            tmpMap.put("turn_angle", JSONObject.NULL);
         } else {
-            tmpMap.put("turnAngle", Helper.round(radian, 2));
+            tmpMap.put("turn_angle", Helper.round(radian, 2));
         }
         return tmpMap;
         
diff --git a/core/src/test/java/com/graphhopper/util/InstructionListTest.java b/core/src/test/java/com/graphhopper/util/InstructionListTest.java
index f8332d25ca..aa939a54c6 100644
--- a/core/src/test/java/com/graphhopper/util/InstructionListTest.java
+++ b/core/src/test/java/com/graphhopper/util/InstructionListTest.java
@@ -359,8 +359,8 @@ public void testRoundaboutJsonIntegrity()
         Map<String, Object> json = il.createJson().get(0);        
         // assert that all information is present in map for JSON
         assertEquals("Enter roundabout and use exit 2 in direction streetname", json.get("text").toString());
-        assertEquals(-1, (Double) json.get("turnAngle"), 0.01);
-        assertEquals("2", json.get("exitNr").toString());
+        assertEquals(-1, (Double) json.get("turn_angle"), 0.01);
+        assertEquals("2", json.get("exit_nr").toString());
         // assert that a valid JSON object can be written
         assertNotNull(new JSONObject(json).toString());
     }
@@ -384,7 +384,7 @@ public void testRoundaboutJsonNaN()
 
         Map<String, Object> json = il.createJson().get(0);
         assertEquals("Enter roundabout and use exit 2 in direction streetname", json.get("text").toString());
-        assertEquals("null", json.get("turnAngle").toString());
+        assertEquals("null", json.get("turn_angle").toString());
         // assert that a valid JSON object can be written
         assertNotNull(new JSONObject(json).toString());
     }
diff --git a/docs/web/api-doc.md b/docs/web/api-doc.md
index cbc402dbf1..62c9e06352 100644
--- a/docs/web/api-doc.md
+++ b/docs/web/api-doc.md
@@ -119,8 +119,8 @@ paths[0].instructions[0].interval             | An array containing the first an
 paths[0].instructions[0].sign                 | A number which specifies the sign to show e.g. for right turn etc <br>TURN_SHARP_LEFT = -3<br>TURN_LEFT = -2<br>TURN_SLIGHT_LEFT = -1<br>CONTINUE_ON_STREET = 0<br>TURN_SLIGHT_RIGHT = 1<br>TURN_RIGHT = 2<br>TURN_SHARP_RIGHT = 3<br>FINISH = 4<br>VIA_REACHED = 5<br>USE_ROUNDABOUT = 6
 paths[0].instructions[0].annotationText       | [optional] A text describing the instruction in more detail, e.g. like surface of the way, warnings or involved costs
 paths[0].instructions[0].annotationImportance | [optional] 0 stands for INFO, 1 for warning, 2 for costs, 3 for costs and warning
-paths[0].instructions[0].exitNr               | [optional] Only available for USE_ROUNDABOUT instructions. The count of exits at which the route leaves the roundabout.
-paths[0].instructions[0].turnAngle            | [optional] Only available for USE_ROUNDABOUT instructions. The radian of the route within the roundabout: 0<r<2*PI for clockwise and -2PI<r<0 for counterclockwise transit. Is null the direction of rotation is undefined.
+paths[0].instructions[0].exit_nr              | [optional] Only available for USE_ROUNDABOUT instructions. The count of exits at which the route leaves the roundabout.
+paths[0].instructions[0].turn_angle           | [optional] Only available for USE_ROUNDABOUT instructions. The radian of the route within the roundabout: 0<r<2*PI for clockwise and -2PI<r<0 for counterclockwise transit. Is null the direction of rotation is undefined.
 
 
 ## Area information
