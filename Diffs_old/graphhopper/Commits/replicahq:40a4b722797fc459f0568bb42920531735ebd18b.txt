diff --git a/core/src/main/java/com/graphhopper/routing/AbstractRoutingAlgorithm.java b/core/src/main/java/com/graphhopper/routing/AbstractRoutingAlgorithm.java
index 490b8812c9..9dd433077b 100644
--- a/core/src/main/java/com/graphhopper/routing/AbstractRoutingAlgorithm.java
+++ b/core/src/main/java/com/graphhopper/routing/AbstractRoutingAlgorithm.java
@@ -116,6 +116,14 @@ protected SPTEntry createSPTEntry(int node, double weight) {
         return Collections.singletonList(calcPath(from, to));
     }
 
+    public List<Path> calcTDPaths(int from, int to, long at) {
+        return Collections.singletonList(calcTDPath(from, to, at));
+    }
+
+    public Path calcTDPath(int from, int to, long at) {
+        throw new RuntimeException();
+    }
+
     protected Path createEmptyPath() {
         return new Path(graph, weighting);
     }
diff --git a/core/src/main/java/com/graphhopper/routing/AlternativeRoute.java b/core/src/main/java/com/graphhopper/routing/AlternativeRoute.java
index 404eb7e1ee..8722f349e0 100644
--- a/core/src/main/java/com/graphhopper/routing/AlternativeRoute.java
+++ b/core/src/main/java/com/graphhopper/routing/AlternativeRoute.java
@@ -188,6 +188,11 @@ public Path calcPath(int from, int to) {
         return calcPaths(from, to).get(0);
     }
 
+    @Override
+    public Path calcTDPath(int from, int to, long at) {
+        throw new RuntimeException();
+    }
+
     @Override
     public List<Path> calcPaths(int from, int to) {
         List<AlternativeInfo> alts = calcAlternatives(from, to);
diff --git a/core/src/main/java/com/graphhopper/routing/Dijkstra.java b/core/src/main/java/com/graphhopper/routing/Dijkstra.java
index b5e5010736..ff50733bdc 100644
--- a/core/src/main/java/com/graphhopper/routing/Dijkstra.java
+++ b/core/src/main/java/com/graphhopper/routing/Dijkstra.java
@@ -57,6 +57,7 @@ protected void initCollections(int size) {
 
     @Override
     public Path calcPath(int from, int to) {
+        if (weighting instanceof TDWeightingI) throw new RuntimeException();
         checkAlreadyRun();
         this.to = to;
         currEdge = createSPTEntry(from, 0);
@@ -68,6 +69,19 @@ public Path calcPath(int from, int to) {
         return extractPath();
     }
 
+    public Path calcTDPath(int from, int to, long at) {
+        if (!(weighting instanceof TDWeightingI)) throw new RuntimeException();
+        checkAlreadyRun();
+        this.to = to;
+        currEdge = createSPTEntry(from, 0);
+        currEdge.time = at;
+        if (!traversalMode.isEdgeBased()) {
+            fromMap.put(from, currEdge);
+        }
+        runAlgo();
+        return extractPath();
+    }
+
     protected void runAlgo() {
         EdgeExplorer explorer = outEdgeExplorer;
         while (true) {
diff --git a/core/src/main/java/com/graphhopper/routing/Path.java b/core/src/main/java/com/graphhopper/routing/Path.java
index 450230da1c..5d62e9e821 100644
--- a/core/src/main/java/com/graphhopper/routing/Path.java
+++ b/core/src/main/java/com/graphhopper/routing/Path.java
@@ -207,7 +207,7 @@ public Path extract() {
             currEdge = currEdge.parent;
         }
         if (weighting instanceof TDWeightingI) {
-            time = sptEntry.time;
+            time = sptEntry.time - currEdge.time;
         }
         setFromNode(currEdge.adjNode);
         reverseOrder();
diff --git a/core/src/main/java/com/graphhopper/routing/RoutingAlgorithm.java b/core/src/main/java/com/graphhopper/routing/RoutingAlgorithm.java
index 26f863a4ea..7e8027aa5a 100644
--- a/core/src/main/java/com/graphhopper/routing/RoutingAlgorithm.java
+++ b/core/src/main/java/com/graphhopper/routing/RoutingAlgorithm.java
@@ -36,6 +36,8 @@
      */
     Path calcPath(int from, int to);
 
+    Path calcTDPath(int from, int to, long at);
+
     /**
      * Calculates multiple possibilities for a path.
      *
diff --git a/core/src/main/java/com/graphhopper/routing/template/ViaRoutingTemplate.java b/core/src/main/java/com/graphhopper/routing/template/ViaRoutingTemplate.java
index 749ca67c32..39ad9f31e2 100644
--- a/core/src/main/java/com/graphhopper/routing/template/ViaRoutingTemplate.java
+++ b/core/src/main/java/com/graphhopper/routing/template/ViaRoutingTemplate.java
@@ -22,13 +22,11 @@
 import com.graphhopper.PathWrapper;
 import com.graphhopper.routing.*;
 import com.graphhopper.routing.util.*;
+import com.graphhopper.routing.weighting.TDWeightingI;
 import com.graphhopper.storage.index.LocationIndex;
 import com.graphhopper.storage.index.QueryResult;
-import com.graphhopper.util.EdgeIteratorState;
+import com.graphhopper.util.*;
 import com.graphhopper.util.Parameters.Routing;
-import com.graphhopper.util.PathMerger;
-import com.graphhopper.util.StopWatch;
-import com.graphhopper.util.Translation;
 import com.graphhopper.util.exceptions.PointNotFoundException;
 import com.graphhopper.util.shapes.GHPoint;
 
@@ -112,7 +110,18 @@ public ViaRoutingTemplate(GHRequest ghRequest, GHResponse ghRsp, LocationIndex l
             String debug = ", algoInit:" + sw.stop().getSeconds() + "s";
 
             sw = new StopWatch().start();
-            List<Path> tmpPathList = algo.calcPaths(fromQResult.getClosestNode(), toQResult.getClosestNode());
+            List<Path> tmpPathList;
+            if (algoOpts.getWeighting() instanceof TDWeightingI) {
+                int departure_time = ghRequest.getHints().getInt("departure_time", -1);
+                if (departure_time == -1) {
+                    throw new RuntimeException("Must specify departure_time in request.");
+                }
+                ((TDWeightingI) algoOpts.getWeighting()).setInitialTime(departure_time * 1000);
+                tmpPathList = ((AbstractRoutingAlgorithm) algo).calcTDPaths(fromQResult.getClosestNode(), toQResult.getClosestNode(), departure_time * 1000);
+            } else {
+                tmpPathList = algo.calcPaths(fromQResult.getClosestNode(), toQResult.getClosestNode());
+            }
+
             debug += ", " + algo.getName() + "-routing:" + sw.stop().getSeconds() + "s";
             if (tmpPathList.isEmpty())
                 throw new IllegalStateException("At least one path has to be returned for " + fromQResult + " -> " + toQResult);
diff --git a/core/src/main/java/com/graphhopper/routing/weighting/TDWeightingI.java b/core/src/main/java/com/graphhopper/routing/weighting/TDWeightingI.java
index b81977a0c8..7e315601f5 100644
--- a/core/src/main/java/com/graphhopper/routing/weighting/TDWeightingI.java
+++ b/core/src/main/java/com/graphhopper/routing/weighting/TDWeightingI.java
@@ -25,4 +25,7 @@
 
     long calcTDMillis(EdgeIteratorState edge, boolean reverse, int prevOrNextEdgeId, long duration);
 
+    void setInitialTime(long time);
+
+    long getInitialTime();
 }
diff --git a/core/src/main/java/com/graphhopper/util/details/TimeDetails.java b/core/src/main/java/com/graphhopper/util/details/TimeDetails.java
index 3502a4dcb5..5eb7684699 100644
--- a/core/src/main/java/com/graphhopper/util/details/TimeDetails.java
+++ b/core/src/main/java/com/graphhopper/util/details/TimeDetails.java
@@ -39,6 +39,9 @@
     public TimeDetails(Weighting weighting) {
         super(TIME);
         this.weighting = weighting;
+        if (weighting instanceof TDWeightingI) {
+            this.accumulatedTime = ((TDWeightingI) weighting).getInitialTime();
+        }
     }
 
     @Override
diff --git a/web/src/main/java/com/graphhopper/swl/FileTravelTimeCalculator.java b/web/src/main/java/com/graphhopper/swl/FileTravelTimeCalculator.java
index 6dbb705349..b0e8e46be6 100644
--- a/web/src/main/java/com/graphhopper/swl/FileTravelTimeCalculator.java
+++ b/web/src/main/java/com/graphhopper/swl/FileTravelTimeCalculator.java
@@ -62,18 +62,16 @@ public FileTravelTimeCalculator(OriginalDirectionFlagEncoder encoder, String pat
     }
 
     @Override
-    public double getSpeed(EdgeIteratorState edgeState, boolean reverse, int durationSeconds, String streetMode, GHRequest req) {
-        int fromTime = 0;
+    public double getSpeed(EdgeIteratorState edgeState, boolean reverse, int currentTimeSeconds, String streetMode, GHRequest req) {
         if (linkTravelTimes != null && streetMode.equals("car")) {
             short[] speeds = linkTravelTimes.get(R5EdgeIds.getR5EdgeId(encoder, edgeState));
             if (speeds != null) {
-                int currentTimeSeconds = fromTime + durationSeconds;
                 int timebinIndex = (currentTimeSeconds / (60 * 15)) % (24 * 4);
                 double speedms = speeds[timebinIndex] / 3.6;
                 return speedms;
             }
         }
-        return delegateTravelTimeCalculator.getSpeed(edgeState, reverse, durationSeconds, streetMode, req);
+        return delegateTravelTimeCalculator.getSpeed(edgeState, reverse, currentTimeSeconds, streetMode, req);
     }
 
     private static Map<Integer, short[]> readTravelTimes(File file) {
diff --git a/web/src/main/java/com/graphhopper/swl/TDCarWeighting.java b/web/src/main/java/com/graphhopper/swl/TDCarWeighting.java
index fb4377703f..c5035c1592 100644
--- a/web/src/main/java/com/graphhopper/swl/TDCarWeighting.java
+++ b/web/src/main/java/com/graphhopper/swl/TDCarWeighting.java
@@ -34,6 +34,7 @@
     private final SpeedCalculator speedCalculator;
     private final long headingPenaltyMillis;
     private final double headingPenalty;
+    private long initialTime;
 
     public TDCarWeighting(FlagEncoder encoder, SpeedCalculator speedCalculator, PMap map) {
         this.encoder = encoder;
@@ -61,7 +62,7 @@ public long calcMillis(EdgeIteratorState edge, boolean reverse, int prevOrNextEd
 
     @Override
     public double calcTDWeight(EdgeIteratorState edge, boolean reverse, int prevOrNextEdgeId, long linkEnterTime) {
-        double speed = speedCalculator.getSpeed(edge, reverse, (int) linkEnterTime, "car", null);
+        double speed = speedCalculator.getSpeed(edge, reverse, (int) (linkEnterTime / 1000), "car", null);
         if (speed == 0)
             return Double.POSITIVE_INFINITY;
 
@@ -77,7 +78,7 @@ public double calcTDWeight(EdgeIteratorState edge, boolean reverse, int prevOrNe
 
     @Override
     public long calcTDMillis(EdgeIteratorState edge, boolean reverse, int prevOrNextEdgeId, long linkEnterTime) {
-        double speed = speedCalculator.getSpeed(edge, reverse, (int) linkEnterTime, "car", null);
+        double speed = speedCalculator.getSpeed(edge, reverse, (int) (linkEnterTime / 1000), "car", null);
         if (Double.isInfinite(speed) || Double.isNaN(speed) || speed < 0)
             throw new IllegalStateException("Invalid speed stored in edge! " + speed);
         if (speed == 0)
@@ -106,6 +107,16 @@ public boolean matches(HintsMap reqMap) {
                 && encoder.toString().equals(reqMap.getVehicle());
     }
 
+    @Override
+    public void setInitialTime(long time) {
+        this.initialTime = time;
+    }
+
+    @Override
+    public long getInitialTime() {
+        return this.initialTime;
+    }
+
     @Override
     public String toString() {
         return getName();
diff --git a/web/src/test/java/com/graphhopper/swl/TDNetworkIT.java b/web/src/test/java/com/graphhopper/swl/TDNetworkIT.java
index d91ba8b8d0..62d6fd1e1a 100644
--- a/web/src/test/java/com/graphhopper/swl/TDNetworkIT.java
+++ b/web/src/test/java/com/graphhopper/swl/TDNetworkIT.java
@@ -97,17 +97,18 @@ public void testMonacoTD() {
         request.setPathDetails(Arrays.asList("time", "r5_edge_id"));
         request.getHints().put("ch.disable", true);
         request.setWeighting("td");
+        request.getHints().put("departure_time", 58*60);
         GHResponse route = graphHopper.route(request);
         List<PathDetail> time = route.getBest().getPathDetails().get("time");
         List<PathDetail> edgeIds = route.getBest().getPathDetails().get("r5_edge_id");
         final int EXPECTED_LINKS_IN_PATH = 52;
-        final long EXPECTED_TOTAL_TRAVEL_TIME = 1292971;
+        final long EXPECTED_TOTAL_TRAVEL_TIME = 1292460;
 
         assertEquals(EXPECTED_LINKS_IN_PATH, time.size());
         assertEquals(EXPECTED_LINKS_IN_PATH, edgeIds.size());
 
-        assertEquals(EXPECTED_TOTAL_TRAVEL_TIME, sumTimes(time));
         assertEquals(EXPECTED_TOTAL_TRAVEL_TIME, route.getBest().getTime());
+        assertEquals(EXPECTED_TOTAL_TRAVEL_TIME, sumTimes(time));
     }
 
     private long sumTimes(List<PathDetail> time) {
