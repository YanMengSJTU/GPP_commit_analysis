diff --git a/core/src/main/java/com/graphhopper/GraphHopper.java b/core/src/main/java/com/graphhopper/GraphHopper.java
index 23471c8d11..2f2aae1863 100644
--- a/core/src/main/java/com/graphhopper/GraphHopper.java
+++ b/core/src/main/java/com/graphhopper/GraphHopper.java
@@ -17,6 +17,17 @@
  */
 package com.graphhopper;
 
+import java.io.File;
+import java.io.IOException;
+import java.text.SimpleDateFormat;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Date;
+import java.util.List;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import com.graphhopper.reader.DataReader;
 import com.graphhopper.reader.OSMReader;
 import com.graphhopper.reader.dem.ElevationProvider;
@@ -26,21 +37,14 @@
 import com.graphhopper.routing.ch.PrepareContractionHierarchies;
 import com.graphhopper.routing.util.*;
 import com.graphhopper.storage.*;
-import com.graphhopper.storage.index.*;
+import com.graphhopper.storage.index.Location2IDQuadtree;
+import com.graphhopper.storage.index.LocationIndex;
+import com.graphhopper.storage.index.LocationIndexTree;
+import com.graphhopper.storage.index.LocationIndexTreeSC;
+import com.graphhopper.storage.index.QueryResult;
 import com.graphhopper.util.*;
 import com.graphhopper.util.shapes.GHPoint;
 
-import java.io.File;
-import java.io.IOException;
-import java.text.SimpleDateFormat;
-import java.util.ArrayList;
-import java.util.Collections;
-import java.util.Date;
-import java.util.List;
-
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 /**
  * Easy to use access point to configure import and (offline) routing.
  * <p/>
@@ -76,7 +80,7 @@ public static void main( String[] strs ) throws Exception
     // for index
     private LocationIndex locationIndex;
     private int preciseIndexResolution = 500;
-    private boolean searchRegion = true;
+    private final boolean searchRegion = true;
     // for prepare
     private int minNetworkSize = 200;
     // for CH prepare
@@ -102,6 +106,7 @@ public static void main( String[] strs ) throws Exception
 
     public GraphHopper()
     {
+        System.out.println( "*******************************" );
     }
 
     /**
diff --git a/core/src/main/java/com/graphhopper/routing/util/EncodingManager.java b/core/src/main/java/com/graphhopper/routing/util/EncodingManager.java
index 4fa7500307..ed2c91e6c4 100644
--- a/core/src/main/java/com/graphhopper/routing/util/EncodingManager.java
+++ b/core/src/main/java/com/graphhopper/routing/util/EncodingManager.java
@@ -20,11 +20,7 @@
 import gnu.trove.map.TLongObjectMap;
 import gnu.trove.map.hash.TLongObjectHashMap;
 
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
+import java.util.*;
 
 import com.graphhopper.reader.OSMNode;
 import com.graphhopper.reader.OSMReader;
@@ -34,7 +30,6 @@
 import com.graphhopper.reader.OSMWay;
 import com.graphhopper.util.EdgeIteratorState;
 import com.graphhopper.util.Helper;
-import java.util.*;
 
 /**
  * Manager class to register encoder, assign their flag values and check objects with all encoders
@@ -121,6 +116,7 @@ public EncodingManager( List<? extends FlagEncoder> flagEncoders )
 
     public EncodingManager( List<? extends FlagEncoder> flagEncoders, int bytesForFlags, int maxTurnCost )
     {
+        System.out.println( "*******************************" );
         if (bytesForFlags != 4 && bytesForFlags != 8)
             throw new IllegalStateException("For 'flags' currently only 4 or 8 bytes supported");
 
@@ -172,9 +168,10 @@ public int getBytesForFlags()
 
             try
             {
+                System.out.println( className );
                 @SuppressWarnings("unchecked")
                 Class<FlagEncoder> cls = (Class<FlagEncoder>) Class.forName(className);
-                resultEncoders.add((FlagEncoder) cls.getDeclaredConstructor().newInstance());
+                resultEncoders.add(cls.getDeclaredConstructor().newInstance());
             } catch (Exception e)
             {
                 throw new IllegalArgumentException("Cannot instantiate class " + className, e);
diff --git a/core/src/main/java/com/graphhopper/routing/util/FootFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/FootFlagEncoder.java
index f14cff77a5..06c2b1ebe1 100644
--- a/core/src/main/java/com/graphhopper/routing/util/FootFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/FootFlagEncoder.java
@@ -46,6 +46,8 @@
     protected FootFlagEncoder()
     {
         this(4, 1);
+        System.out.println( restrictedValues );
+        System.out.println( restrictedValues.size() );
     }
 
     protected FootFlagEncoder( int speedBits, double speedFactor )
diff --git a/core/src/main/java/com/samsix/graphhopper/S6CarFlagEncoder.java b/core/src/main/java/com/samsix/graphhopper/S6CarFlagEncoder.java
new file mode 100644
index 0000000000..30221b7c58
--- /dev/null
+++ b/core/src/main/java/com/samsix/graphhopper/S6CarFlagEncoder.java
@@ -0,0 +1,15 @@
+package com.samsix.graphhopper;
+
+import com.graphhopper.routing.util.FootFlagEncoder;
+
+public class S6CarFlagEncoder
+    extends
+        FootFlagEncoder
+{
+    public S6CarFlagEncoder()
+    {
+        super();
+        
+        restrictedValues.remove("private");
+    }
+}
diff --git a/core/src/main/java/com/samsix/graphhopper/S6FootFlagEncoder.java b/core/src/main/java/com/samsix/graphhopper/S6FootFlagEncoder.java
new file mode 100644
index 0000000000..1085b554f6
--- /dev/null
+++ b/core/src/main/java/com/samsix/graphhopper/S6FootFlagEncoder.java
@@ -0,0 +1,15 @@
+package com.samsix.graphhopper;
+
+import com.graphhopper.routing.util.FootFlagEncoder;
+
+public class S6FootFlagEncoder
+    extends
+        FootFlagEncoder
+{
+    public S6FootFlagEncoder()
+    {
+        super();
+        
+        restrictedValues.remove("private");
+    }
+}
diff --git a/graphhopper.sh b/graphhopper.sh
index d7a93727cf..07795918ff 100755
--- a/graphhopper.sh
+++ b/graphhopper.sh
@@ -231,6 +231,8 @@ if [ "x$ACTION" = "xui" ] || [ "x$ACTION" = "xweb" ]; then
   fi
 
 elif [ "x$ACTION" = "ximport" ]; then
+echo "hello"
+echo "$JAVA" $JAVA_OPTS -cp "$JAR" $GH_CLASS printVersion=true config=$CONFIG $GH_IMPORT_OPTS graph.location="$GRAPH" osmreader.osm="$OSM_FILE" 
  "$JAVA" $JAVA_OPTS -cp "$JAR" $GH_CLASS printVersion=true \
       config=$CONFIG \
       $GH_IMPORT_OPTS graph.location="$GRAPH" osmreader.osm="$OSM_FILE"
