diff --git a/core/src/main/java/com/graphhopper/routing/util/BikeGenericFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/BikeGenericFlagEncoder.java
index e1d326f809..27ecdd39b0 100644
--- a/core/src/main/java/com/graphhopper/routing/util/BikeGenericFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/BikeGenericFlagEncoder.java
@@ -299,7 +299,7 @@ public long acceptWay( OSMWay way )
             return acceptBit;
 
         // accept only if explicitely tagged for bike usage
-        if ("motorway".equals(highwayValue) || "motorway_link".equals(highwayValue))
+        if ("motorway".equals(highwayValue) || "motorway_link".equals(highwayValue) || "trunk".equals(highwayValue) || "trunk_link".equals(highwayValue))
             return 0;
 
         if (way.hasTag("motorroad", "yes"))
@@ -320,9 +320,6 @@ public long acceptWay( OSMWay way )
         String sacScale = way.getTag("sac_scale");
         if (sacScale != null)
         {
-            if ((way.hasTag("highway", "cycleway"))
-                    && (way.hasTag("sac_scale", "hiking")))
-                return acceptBit;
             if (!allowedSacScale(sacScale))
                 return 0;
         }
@@ -334,7 +331,7 @@ boolean allowedSacScale( String sacScale )
         // other scales are nearly impossible by an ordinary bike, see http://wiki.openstreetmap.org/wiki/Key:sac_scale
         // Mountainhiking may be possible for downhill racers
         return "hiking".equals(sacScale) || "mountain_hiking".equals(sacScale)
-                || "demanding_mountain_hiking".equals(sacScale) || "alpine_hiking".equals(sacScale);
+                || "demanding_mountain_hiking".equals(sacScale);
     }
 
     @Override
@@ -523,7 +520,7 @@ else if (("grade2".equals(trackType) || "grade3".equals(trackType)) && (surfaceT
                 wayType = WayType.TRACK_EASY;
         }
         else if ("path".equals(highway)) {
-            if("horrible".equals(smoothness) || "very_horrible".equals(smoothness) || "mountain_hiking".equals(sacScale) || "4".equals(mtbScale) || "5".equals(mtbScale))
+            if("horrible".equals(smoothness) || "very_horrible".equals(smoothness) || "demanding_mountain_hiking".equals(sacScale) || "mountain_hiking".equals(sacScale) || "4".equals(mtbScale) || "5".equals(mtbScale))
                 wayType = WayType.PATH_HARD;
             else if("bad".equals(smoothness) || "very_bad".equals(smoothness) || "hiking".equals(sacScale) || "1".equals(mtbScale) || "3".equals(mtbScale) && !pavedSurfaceTags.contains(surfaceTag) && !way.hasTag("bicycle", intendedValues))
                 wayType = WayType.PATH_MIDDLE;
diff --git a/core/src/main/java/com/graphhopper/routing/util/DynamicWeighting.java b/core/src/main/java/com/graphhopper/routing/util/DynamicWeighting.java
index 500950f9ae..483e5e78cb 100644
--- a/core/src/main/java/com/graphhopper/routing/util/DynamicWeighting.java
+++ b/core/src/main/java/com/graphhopper/routing/util/DynamicWeighting.java
@@ -19,9 +19,12 @@
 package com.graphhopper.routing.util;
 
 import com.graphhopper.util.EdgeIteratorState;
+import com.graphhopper.util.Helper;
 import com.graphhopper.util.PMap;
 import com.graphhopper.util.profiles.ProfileManager;
 
+import java.util.Set;
+
 /**
  * Special weighting for (motor)bike
  * <p>
@@ -35,6 +38,7 @@
     private final double heading_penalty;
     protected final FlagEncoder flagEncoder;
     protected SpeedProvider speedProvider;
+    protected PreferenceProvider preferenceProvider;
     protected ProfileManager profileManager;
 
     /**
@@ -56,10 +60,13 @@ public DynamicWeighting(FlagEncoder encoder, PMap pMap, ProfileManager profileMa
 
         this.profileManager = profileManager;
 
-        if(profileManager == null)
+        if(profileManager == null) {
             this.speedProvider = new EncoderSpeedProvider(encoder);
-        else
+            this.preferenceProvider = new GenericPreferenceProvider();
+        } else {
             this.speedProvider = new ProfileSpeedProvider(encoder, profileManager);
+            this.preferenceProvider = new ProfilePreferenceProvider(profileManager);
+        }
     }
 
     public DynamicWeighting(FlagEncoder encoder)
@@ -82,61 +89,38 @@ public double calcWeight( EdgeIteratorState edgeState, boolean reverse, int prev
         if (penalizeEdge)
             time += heading_penalty;
 
-        return time / (0.5 + Math.pow(getUserPreference(edgeState, reverse), 2));
+        return time / (0.5 + Math.pow(getEdgePreference(edgeState, reverse), 2));
     }
 
-    private double getUserPreference(EdgeIteratorState edgeState, boolean reverse) {
+    protected double getEdgePreference(EdgeIteratorState edgeState, boolean reverse) {
 
         int wayType = (int) flagEncoder.getDouble(edgeState.getFlags(), DynamicWeighting.WAY_TYPE_KEY);
         int priority = PriorityCode.UNCHANGED.getValue();
-
         double incDistPercentage = flagEncoder.getDouble(edgeState.getFlags(), DynamicWeighting.INC_DIST_PERCENTAGE_KEY) / 100;
-        double incElevation;
+        boolean pavedSurface = ((wayType >= 1 && wayType <= 4) || wayType == 7 || wayType == 13);
+
+        double incSlope;
         double incDist2DSum;
+        double decSlope;
+        double decDist2DSum;
 
         if(reverse){
-            incElevation = flagEncoder.getDouble(edgeState.getFlags(), DynamicWeighting.DEC_SLOPE_KEY) / 100;
+            incSlope = flagEncoder.getDouble(edgeState.getFlags(), DynamicWeighting.DEC_SLOPE_KEY) / 100;
+            decSlope = flagEncoder.getDouble(edgeState.getFlags(), DynamicWeighting.INC_SLOPE_KEY) / 100;
             incDist2DSum = (1 - incDistPercentage) * edgeState.getDistance();
+            decDist2DSum = edgeState.getDistance() - incDist2DSum;
         } else {
-            incElevation = flagEncoder.getDouble(edgeState.getFlags(), DynamicWeighting.INC_SLOPE_KEY) / 100;
+            incSlope = flagEncoder.getDouble(edgeState.getFlags(), DynamicWeighting.INC_SLOPE_KEY) / 100;
+            decSlope = flagEncoder.getDouble(edgeState.getFlags(), DynamicWeighting.DEC_SLOPE_KEY) / 100;
             incDist2DSum = edgeState.getDistance() * incDistPercentage;
+            decDist2DSum = edgeState.getDistance() - incDist2DSum;
         }
 
-        if(wayType == 0)
-            priority = PriorityCode.AVOID_AT_ALL_COSTS.getValue();
-        else if(wayType == 13 || wayType == 14)
-            priority = PriorityCode.BEST.getValue();
-        else if(wayType == 7 && wayType == 8){
-
-            priority = PriorityCode.AVOID_IF_POSSIBLE.getValue();
-
-            if(incDist2DSum > 10 && incElevation > 0.02) {
-                priority = PriorityCode.AVOID_AT_ALL_COSTS.getValue();
-            }
-
-        }
-        else if(wayType == 9 && wayType == 10) {
-
-            priority = PriorityCode.REACH_DEST.getValue();
-
-            if(incDist2DSum > 10 && incElevation > 0.02) {
-                priority = PriorityCode.WORST.getValue();
-            }
-
-        } else if (wayType == 11 || wayType == 12) {
-            //Should be considered only for Downhill racers
-            priority = PriorityCode.WORST.getValue();
-        } else if (wayType >= 2 && wayType <= 4){
-            priority = PriorityCode.PREFER.getValue();
-        } else if (wayType == 15){
-            priority = PriorityCode.WORST.getValue();
-        }
-
-        //If it is very steep don't use it
-        if(incDist2DSum > 10 && incElevation > 0.2)
-            priority = PriorityCode.WORST.getValue();
+        priority += preferenceProvider.calcWayTypePreference(wayType);
+        priority += preferenceProvider.calcSurfacePreference(pavedSurface);
+        priority += preferenceProvider.calcSlopePreference(wayType, incSlope, incDist2DSum, decSlope, decDist2DSum);
 
-        return (double) priority / PriorityCode.BEST.getValue();
+        return Helper.keepIn(priority, PriorityCode.WORST.getValue(), PriorityCode.BEST.getValue()) / PriorityCode.BEST.getValue();
 
     }
 
diff --git a/core/src/main/java/com/graphhopper/routing/util/EncoderSpeedProvider.java b/core/src/main/java/com/graphhopper/routing/util/EncoderSpeedProvider.java
index 2d1e53da7d..6834bdd998 100644
--- a/core/src/main/java/com/graphhopper/routing/util/EncoderSpeedProvider.java
+++ b/core/src/main/java/com/graphhopper/routing/util/EncoderSpeedProvider.java
@@ -1,7 +1,6 @@
 package com.graphhopper.routing.util;
 
 import com.graphhopper.util.EdgeIteratorState;
-import com.graphhopper.util.Helper;
 
 import static com.graphhopper.util.Helper.keepIn;
 
@@ -29,9 +28,6 @@ protected double adjustSpeed(double speed, EdgeIteratorState edgeState, boolean
         double decElevation = encoder.getDouble(edgeState.getFlags(), DynamicWeighting.DEC_SLOPE_KEY) / 100;
         double incDistPercentage = encoder.getDouble(edgeState.getFlags(), DynamicWeighting.INC_DIST_PERCENTAGE_KEY) / 100;
 
-        double incDist2DSum = edgeState.getDistance() * incDistPercentage;
-        double decDist2DSum = edgeState.getDistance() - incDist2DSum;
-
         double adjustedSpeed = speed;
 
         if (!reverse)
@@ -41,16 +37,20 @@ protected double adjustSpeed(double speed, EdgeIteratorState edgeState, boolean
             fwdFaster = Math.sqrt(fwdFaster);
             double fwdSlower = 1 - 5 * keepIn(incElevation, 0, 0.2);
             fwdSlower = fwdSlower * fwdSlower;
+            double incDist2DSum = edgeState.getDistance() * incDistPercentage;
+            double decDist2DSum = edgeState.getDistance() - incDist2DSum;
             adjustedSpeed = keepIn(speed * (fwdSlower * incDist2DSum + fwdFaster * decDist2DSum) / edgeState.getDistance(), BikeGenericFlagEncoder.PUSHING_SECTION_SPEED / 2, 50);
         } else {
             double fwdFaster = 1 + 30 * keepIn(incElevation, 0, 0.2);
             fwdFaster = Math.sqrt(fwdFaster);
             double fwdSlower = 1 - 5 * keepIn(decElevation, 0, 0.2);
             fwdSlower = fwdSlower * fwdSlower;
+            double incDist2DSum = edgeState.getDistance() * (1 - incDistPercentage);
+            double decDist2DSum = edgeState.getDistance() - incDist2DSum;
             adjustedSpeed = keepIn(speed * (fwdSlower * decDist2DSum + fwdFaster * incDist2DSum) / edgeState.getDistance(), BikeGenericFlagEncoder.PUSHING_SECTION_SPEED / 2, 50);
         }
 
-        System.out.println("NEW SPEED: " + Helper.round2(adjustedSpeed) + ", SPEED: " + speed + ", INC ELE: " + incElevation + ", DEC ELE: " + decElevation + ", PERCENTAGE: " + incDistPercentage);
+        //System.out.println("NEW SPEED: " + Helper.round2(adjustedSpeed) + ", SPEED: " + speed + ", INC ELE: " + incElevation + ", DEC ELE: " + decElevation + ", PERCENTAGE: " + incDistPercentage + " CORRECT:");
 
         return adjustedSpeed;
     }
diff --git a/core/src/main/java/com/graphhopper/routing/util/GenericPreferenceProvider.java b/core/src/main/java/com/graphhopper/routing/util/GenericPreferenceProvider.java
new file mode 100644
index 0000000000..9422e72b1f
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/routing/util/GenericPreferenceProvider.java
@@ -0,0 +1,96 @@
+package com.graphhopper.routing.util;
+
+
+public class GenericPreferenceProvider implements PreferenceProvider {
+
+    @Override
+    public int calcWayTypePreference(int wayType) {
+        int preference = 0;
+
+        switch (wayType) {
+
+            case 0:
+                preference = -4;
+                break;
+            case 1:
+                preference = 0;
+                break;
+            case 2:
+                preference = 1;
+                break;
+            case 3:
+                preference = 1;
+                break;
+            case 4:
+                preference = 1;
+                break;
+            case 5:
+                preference = 1;
+                break;
+            case 6:
+                preference = 1;
+                break;
+            case 7:
+                preference = 0;
+                break;
+            case 8:
+                preference = -1;
+                break;
+            case 9:
+                preference = -1;
+                break;
+            case 10:
+                preference = -1;
+                break;
+            case 11:
+                preference = -2;
+                break;
+            case 12:
+                preference = -2;
+                break;
+            case 13:
+                preference = 3;
+                break;
+            case 14:
+                preference = 3;
+                break;
+            case 15:
+                preference = -4;
+                break;
+        }
+
+        return preference;
+    }
+
+    @Override
+    public int calcSurfacePreference(boolean pavedSurface) {
+        int preference = -2;
+
+        //Paved surface way types
+        if(pavedSurface)
+            preference = 0;
+
+        return preference;
+    }
+
+    @Override
+    public int calcSlopePreference(int wayType, double incSlope, double incDist, double decSlope, double decDist) {
+        int preference = 0;
+
+        if(wayType >= 8 && wayType <=12){
+            if(incDist > 10 && incSlope > 0.03) {
+                preference = -2;
+            }
+
+            if(decDist > 10 && decSlope > 0.2) {
+                preference = -2;
+            }
+        }
+
+        if(incDist > 10 && incSlope > 0.2) {
+            preference = -2;
+        }
+
+        return preference;
+    }
+}
diff --git a/core/src/main/java/com/graphhopper/routing/util/PreferenceProvider.java b/core/src/main/java/com/graphhopper/routing/util/PreferenceProvider.java
new file mode 100644
index 0000000000..ae9bedce59
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/routing/util/PreferenceProvider.java
@@ -0,0 +1,12 @@
+package com.graphhopper.routing.util;
+
+
+public interface PreferenceProvider {
+
+    int calcWayTypePreference(int wayType);
+
+    int calcSurfacePreference(boolean pavedSurface);
+
+    int calcSlopePreference(int wayType, double incSlope, double incDist, double decSlope, double decDist);
+
+}
\ No newline at end of file
diff --git a/core/src/main/java/com/graphhopper/routing/util/ProfilePreferenceProvider.java b/core/src/main/java/com/graphhopper/routing/util/ProfilePreferenceProvider.java
new file mode 100644
index 0000000000..61523c28b4
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/routing/util/ProfilePreferenceProvider.java
@@ -0,0 +1,50 @@
+package com.graphhopper.routing.util;
+
+
+import com.graphhopper.util.profiles.ProfileManager;
+
+public class ProfilePreferenceProvider extends GenericPreferenceProvider {
+
+    ProfileManager profileManager;
+
+    public ProfilePreferenceProvider(ProfileManager profileManager){
+        this.profileManager = profileManager;
+    }
+
+    @Override
+    public int calcWayTypePreference(int wayType) {
+        int preference = 0;
+
+        //Special treatment for nogos and bike tracks
+        if(wayType == 0 || wayType == 15)
+            return -4;
+        else if(wayType == 13 || wayType == 14)
+            return 3;
+
+        if(profileManager.getWayTypePreference(wayType) >= 0.5)
+            preference = 2;
+        else if(profileManager.getWayTypePreference(wayType) >= 0.2)
+            preference = 1;
+        else if(profileManager.getWayTypePreference(wayType) >= 0.05)
+            preference = 0;
+        else
+            preference = -1;
+
+        return preference;
+    }
+
+    @Override
+    public int calcSurfacePreference(boolean pavedSurface) {
+        int preference = 0;
+
+        if(profileManager.prefersPavedSurface() && pavedSurface)
+            preference = -2;
+        else if(!profileManager.prefersPavedSurface() && !pavedSurface)
+            preference = -2;
+
+        System.out.println("PREFERENCE: " + preference + ", profileManager: " + profileManager.prefersPavedSurface());
+
+        return preference;
+    }
+
+}
diff --git a/core/src/main/java/com/graphhopper/routing/util/ProfileSpeedProvider.java b/core/src/main/java/com/graphhopper/routing/util/ProfileSpeedProvider.java
index e79ebb8c70..a00971a5ef 100644
--- a/core/src/main/java/com/graphhopper/routing/util/ProfileSpeedProvider.java
+++ b/core/src/main/java/com/graphhopper/routing/util/ProfileSpeedProvider.java
@@ -27,25 +27,29 @@ private double getUserSpeed(EdgeIteratorState edgeState, boolean reverse){
 
         if(profileManager.hasFilteredSpeeds()){
 
-            int incElevation = (int) encoder.getDouble(edgeState.getFlags(), DynamicWeighting.INC_SLOPE_KEY);
-            int decElevation = (int) encoder.getDouble(edgeState.getFlags(), DynamicWeighting.DEC_SLOPE_KEY);
-            double incDistPercentage = encoder.getDouble(edgeState.getFlags(), DynamicWeighting.INC_DIST_PERCENTAGE_KEY) / 100;
+            int incElevation;
+            int decElevation;
+            double incDistPercentage;
+
+            if(reverse){
+                incElevation = (int) encoder.getDouble(edgeState.getFlags(), DynamicWeighting.DEC_SLOPE_KEY);
+                decElevation = (int) encoder.getDouble(edgeState.getFlags(), DynamicWeighting.INC_SLOPE_KEY);
+                incDistPercentage =  1 - (encoder.getDouble(edgeState.getFlags(), DynamicWeighting.INC_DIST_PERCENTAGE_KEY) / 100);
+            } else {
+                incElevation = (int) encoder.getDouble(edgeState.getFlags(), DynamicWeighting.INC_SLOPE_KEY);
+                decElevation = (int) encoder.getDouble(edgeState.getFlags(), DynamicWeighting.DEC_SLOPE_KEY);
+                incDistPercentage = encoder.getDouble(edgeState.getFlags(), DynamicWeighting.INC_DIST_PERCENTAGE_KEY) / 100;
+            }
 
             int incIndex = incElevation > RidersProfile.SLOPES / 2 ? RidersProfile.SLOPES : RidersProfile.SLOPES / 2 + incElevation;
             int decIndex = decElevation > RidersProfile.SLOPES / 2 ? 0 : RidersProfile.SLOPES / 2 - decElevation;
 
-            double incSpeed = profileManager.getSpeedPerSlope(wayType, incIndex, (BikeGenericFlagEncoder) encoder);
-            double decSpeed = profileManager.getSpeedPerSlope(wayType, decIndex, (BikeGenericFlagEncoder) encoder);
-
+            double incSpeed = profileManager.getSpeedPerSlope(wayType, incIndex, encoder.getSpeed(edgeState.getFlags()), (BikeGenericFlagEncoder) encoder);
+            double decSpeed = profileManager.getSpeedPerSlope(wayType, decIndex, encoder.getSpeed(edgeState.getFlags()), (BikeGenericFlagEncoder) encoder);
             double incDist2DSum = edgeState.getDistance() * incDistPercentage;
             double decDist2DSum = edgeState.getDistance() - incDist2DSum;
 
-            if (reverse)
-            {
-                speed = keepIn((decSpeed * incDist2DSum + incSpeed * decDist2DSum) / edgeState.getDistance(), BikeGenericFlagEncoder.PUSHING_SECTION_SPEED / 2, 50);
-            } else {
-                speed = keepIn((incSpeed * incDist2DSum + decSpeed * decDist2DSum) / edgeState.getDistance(), BikeGenericFlagEncoder.PUSHING_SECTION_SPEED / 2, 50);
-            }
+            speed = keepIn((incSpeed * incDist2DSum + decSpeed * decDist2DSum) / edgeState.getDistance(), BikeGenericFlagEncoder.PUSHING_SECTION_SPEED / 2, 50);
 
         }
 
diff --git a/core/src/main/java/com/graphhopper/util/profiles/ProfileManager.java b/core/src/main/java/com/graphhopper/util/profiles/ProfileManager.java
index 4088ba5de9..521455fc54 100644
--- a/core/src/main/java/com/graphhopper/util/profiles/ProfileManager.java
+++ b/core/src/main/java/com/graphhopper/util/profiles/ProfileManager.java
@@ -2,6 +2,7 @@
 
 
 import com.graphhopper.routing.util.BikeGenericFlagEncoder;
+import com.graphhopper.util.EdgeIteratorState;
 import org.apache.commons.math3.fitting.WeightedObservedPoint;
 
 import java.util.ArrayList;
@@ -20,6 +21,7 @@
     private short[] counts = new short[RidersProfile.WAY_TYPES];
     private double[] distances = new double[RidersProfile.WAY_TYPES];
     private Map<Integer, double[]> userSpeeds;
+    private boolean pavedSurfacePerferred;
 
     public ProfileManager(ProfileRepository profileRepository){
         this.profileRepository = profileRepository;
@@ -60,6 +62,8 @@ public ProfileManager init(String name, BikeGenericFlagEncoder flagEncoder){
 
             }
 
+            initSurfacePreference();
+
         }
 
         return this;
@@ -82,7 +86,23 @@ public double getWayTypePreference(int wayType){
         return distances[wayType] / totalDistance;
     }
 
-    public double getSpeedPerSlope(int wayType, int slopeIndex, BikeGenericFlagEncoder flagEncoder) {
+    public boolean prefersPavedSurface(){
+        return pavedSurfacePerferred;
+    }
+
+    private void initSurfacePreference(){
+
+        double distance = 0;
+        int[] pavedSurfaceTypes = new int[]{0,1,2,3,4,7,13};
+
+        for(int i = 0; i < pavedSurfaceTypes.length; i++){
+            distance += distances[pavedSurfaceTypes[i]];
+        }
+
+        pavedSurfacePerferred = (distance / totalDistance) >= 0.5 ? true : false;
+    }
+
+    public double getSpeedPerSlope(int wayType, int slopeIndex, double baseSpeed, BikeGenericFlagEncoder flagEncoder) {
 
         if(!hasProfile())
             return Double.NaN;
@@ -93,7 +113,7 @@ public double getSpeedPerSlope(int wayType, int slopeIndex, BikeGenericFlagEncod
         }
 
         if(bestFit > 0){
-            double adjustment = (double) flagEncoder.getWayTypeSpeed(wayType) / flagEncoder.getWayTypeSpeed(bestFit);
+            double adjustment = baseSpeed / flagEncoder.getWayTypeSpeed(bestFit);
             return userSpeeds.get(bestFit)[slopeIndex] * adjustment;
         }
 
