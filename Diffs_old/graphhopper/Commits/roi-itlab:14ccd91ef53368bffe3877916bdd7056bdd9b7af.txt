diff --git a/core/src/main/java/com/graphhopper/GraphHopper.java b/core/src/main/java/com/graphhopper/GraphHopper.java
index 8fd81633b2..179ca7925f 100644
--- a/core/src/main/java/com/graphhopper/GraphHopper.java
+++ b/core/src/main/java/com/graphhopper/GraphHopper.java
@@ -1010,6 +1010,11 @@ else if (!(tmpAlgoFactory instanceof PrepareContractionHierarchies))
 
                 altPaths = routingTemplate.calcPaths(queryGraph, tmpAlgoFactory, algoOpts);
 
+                for (Path path : altPaths) {
+                    path.setAddDetailsToAnnotation(hints.getBool(Routing.ADD_DETAILS_TO_ANNOTATION, false));
+                    path.setSingleNodeInstructions(hints.getBool(Routing.SINGLE_NODE_INSTRUCTIONS, false));
+                }
+
                 boolean tmpEnableInstructions = hints.getBool(Routing.INSTRUCTIONS, enableInstructions);
                 boolean tmpCalcPoints = hints.getBool(Routing.CALC_POINTS, calcPoints);
                 double wayPointMaxDistance = hints.getDouble(Routing.WAY_POINT_MAX_DISTANCE, 1d);
diff --git a/core/src/main/java/com/graphhopper/routing/Path.java b/core/src/main/java/com/graphhopper/routing/Path.java
index e095f15a11..88d989f538 100644
--- a/core/src/main/java/com/graphhopper/routing/Path.java
+++ b/core/src/main/java/com/graphhopper/routing/Path.java
@@ -64,6 +64,9 @@
     private double weight;
     private NodeAccess nodeAccess;
 
+    protected boolean singleNodeInstructions = false;
+    protected boolean addDetailsToAnnotation = false;
+
     public Path(Graph graph, Weighting weighting) {
         this.weight = Double.MAX_VALUE;
         this.graph = graph;
@@ -182,6 +185,22 @@ public Path setWeight(double w) {
         return this;
     }
 
+    public boolean isSingleNodeInstructions() {
+        return singleNodeInstructions;
+    }
+
+    public void setSingleNodeInstructions(boolean singleNodeInstructions) {
+        this.singleNodeInstructions = singleNodeInstructions;
+    }
+
+    public boolean isAddDetailsToAnnotation() {
+        return addDetailsToAnnotation;
+    }
+
+    public void setAddDetailsToAnnotation(boolean addDetailsToAnnotation) {
+        this.addDetailsToAnnotation = addDetailsToAnnotation;
+    }
+
     /**
      * Extracts the Path from the shortest-path-tree determined by sptEntry.
      */
@@ -397,6 +416,9 @@ public void next(EdgeIteratorState edge, int index) {
                 name = edge.getName();
                 annotation = encoder.getAnnotation(flags, tr);
 
+                if (addDetailsToAnnotation && annotation.isEmpty())
+                    annotation = new InstructionAnnotation(1, "speed: " + encoder.getSpeed(flags) + ", back = " + encoder.isBackward(flags));
+
                 if ((prevName == null) && (!isRoundabout)) // very first instruction (if not in Roundabout)
                 {
                     int sign = Instruction.CONTINUE_ON_STREET;
@@ -477,7 +499,7 @@ public void next(EdgeIteratorState edge, int index) {
                     prevName = name;
                     prevAnnotation = annotation;
 
-                } else if ((!name.equals(prevName)) || (!annotation.equals(prevAnnotation))) {
+                } else if (singleNodeInstructions || (!name.equals(prevName)) || (!annotation.equals(prevAnnotation))) {
                     prevOrientation = AC.calcOrientation(doublePrevLat, doublePrevLong, prevLat, prevLon);
                     double orientation = AC.calcOrientation(prevLat, prevLon, latitude, longitude);
                     orientation = AC.alignOrientation(prevOrientation, orientation);
diff --git a/core/src/main/java/com/graphhopper/util/Parameters.java b/core/src/main/java/com/graphhopper/util/Parameters.java
index 1535fab8ba..0eaf22dc45 100644
--- a/core/src/main/java/com/graphhopper/util/Parameters.java
+++ b/core/src/main/java/com/graphhopper/util/Parameters.java
@@ -118,6 +118,8 @@
          * a rectangular lat1,lon1,lat2,lon2
          */
         public static final String BLOCK_AREA = "block_area";
+        public static final String ADD_DETAILS_TO_ANNOTATION = "add_details_to_annotation";
+        public static final String SINGLE_NODE_INSTRUCTIONS = "single_node_instructions";
     }
 
     /**
