diff --git a/core/src/main/java/com/graphhopper/routing/Path.java b/core/src/main/java/com/graphhopper/routing/Path.java
index 1df1acf2ec..2c3babcbf4 100644
--- a/core/src/main/java/com/graphhopper/routing/Path.java
+++ b/core/src/main/java/com/graphhopper/routing/Path.java
@@ -137,7 +137,7 @@ private int getFromNode() {
     /**
      * We need to remember fromNode explicitly as its not saved in one edgeId of edgeIds.
      */
-    protected Path setFromNode(int from) {
+    public Path setFromNode(int from) {
         fromNode = from;
         return this;
     }
@@ -409,17 +409,21 @@ public String toString() {
     }
 
     public List<Integer> getNodesInPathOrder() {
-        final List<Integer> edgeids = new ArrayList<>(edgeIds.size());
+        if (fromNode == -1) {
+            throw new IllegalStateException("From node may not be -1. Set from node first");
+        }
+
+        final List<Integer> nodeIds = new ArrayList<>(edgeIds.size());
         int adjacentNode = fromNode;
-        edgeids.add(adjacentNode);
+        nodeIds.add(adjacentNode);
         for (final IntCursor edgeidCursor : edgeIds) {
             final int edgeid = edgeidCursor.value;
 
             adjacentNode = this.graph.getOtherNode(edgeid, adjacentNode);
-            edgeids.add(adjacentNode);
+            nodeIds.add(adjacentNode);
         }
 
-        return edgeids;
+        return nodeIds;
     }
 
     public String toDetailsString() {
diff --git a/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidatePolygon.java b/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidatePolygon.java
index cee985e9e5..b96d36af40 100644
--- a/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidatePolygon.java
+++ b/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidatePolygon.java
@@ -39,6 +39,7 @@ public Path getMergedPath(final QueryGraph queryGraph, final AlgorithmOptions al
         completePathCandidate.addPath(detourEntryToDetourExit);
         completePathCandidate.addPath(detourExitToEnd);
 
+        completePathCandidate.setFromNode(startNodeID);
         completePathCandidate.extract();
 
         return completePathCandidate;
@@ -103,6 +104,7 @@ public String toString() {
         sb.append("endNodeID: " + endNodeID + ", ");
         sb.append("polygonEntryNodeID: " + polygonEntryNodeID + ", ");
         sb.append("polygonExitNodeID: " + polygonExitNodeID + ", ");
+        sb.append("Distance: " + this.getDistance() + ", ");
         sb.append("DistanceInROI: " + getDistanceInROI() + ", ");
         sb.append("detour distance: " + getDetourDistance() + ", ");
         sb.append("gain: " + this.getGain());
diff --git a/core/src/test/java/com/graphhopper/routing/template/util/PolygonRoutingTestGraph.java b/core/src/test/java/com/graphhopper/routing/template/util/PolygonRoutingTestGraph.java
index 53eff5ae4e..b60142bd9b 100644
--- a/core/src/test/java/com/graphhopper/routing/template/util/PolygonRoutingTestGraph.java
+++ b/core/src/test/java/com/graphhopper/routing/template/util/PolygonRoutingTestGraph.java
@@ -233,7 +233,7 @@ private void buildEdges() {
         this.graph.edge(41, 53, 1, true);
         this.graph.edge(42, 53, 1, true);
         this.graph.edge(43, 44, 1, true);
-        this.graph.edge(43, 46, 53, true);
+        this.graph.edge(43, 46, 1, true);
         this.graph.edge(43, 53, 1, true);
         this.graph.edge(44, 45, 1, true);
         this.graph.edge(44, 46, 1, true);
