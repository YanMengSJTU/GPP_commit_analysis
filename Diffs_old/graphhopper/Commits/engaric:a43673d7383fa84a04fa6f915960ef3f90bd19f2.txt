diff --git a/core/src/main/java/com/graphhopper/reader/osgb/AbstractOsInputFile.java b/core/src/main/java/com/graphhopper/reader/osgb/AbstractOsInputFile.java
index 1cc4189705..05d00b4e2f 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/AbstractOsInputFile.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/AbstractOsInputFile.java
@@ -208,8 +208,8 @@ public boolean isEOF() {
     @Override
     public void close() throws IOException {
         try {
-            if (!binary)
-                parser.close();
+            if (!binary && null != parser)
+            		parser.close();
         } catch (XMLStreamException ex) {
             throw new IOException(ex);
         } finally {
diff --git a/tools/src/main/java/com/graphhopper/tools/OsITNProblemRouteExtractor.java b/tools/src/main/java/com/graphhopper/tools/OsITNProblemRouteExtractor.java
index 44361257bc..a7d03b563b 100644
--- a/tools/src/main/java/com/graphhopper/tools/OsITNProblemRouteExtractor.java
+++ b/tools/src/main/java/com/graphhopper/tools/OsITNProblemRouteExtractor.java
@@ -1,6 +1,7 @@
 package com.graphhopper.tools;
 
 import java.util.Date;
+import java.util.logging.Logger;
 
 import com.graphhopper.GraphHopper;
 import com.graphhopper.routing.util.DefaultEdgeFilter;
@@ -23,21 +24,35 @@
  * 
  */
 public class OsITNProblemRouteExtractor {
+	
+	private final static Logger LOGGER = Logger.getLogger(OsITNProblemRouteExtractor.class.getName()); 
+	
+	/**
+	 * Street names are stored in ITN in uppercase.
+	 **/
+	private static String toUpperCase(String s) {
+		if(null !=s) {
+			s = s.toUpperCase();
+		}
+		return s;
+	}
+	
     public static void main(String[] strs) throws Exception {
         CmdArgs args = CmdArgs.read(strs);
         String fileOrDirName = args.get("osmreader.osm", null);
-        String namedRoad = args.get("roadName", null);
-        String namedLinkRoad = args.get("linkRoadName", null);
+        String namedRoad = toUpperCase(args.get("roadName", null));
+        String namedLinkRoad = toUpperCase(args.get("linkRoadName", null));
+        
         String nodeList = args.get("nodeList", null);
         AbstractProblemRouteExtractor extractor = null;
         String outputFileName = null;
         if (nodeList==null) {
-            System.out.println("Find junction around " + namedRoad + " and " + namedLinkRoad);
+            LOGGER.info("Find junction around " + namedRoad + " and " + namedLinkRoad);
             outputFileName = args.get("itnoutput", "os-itn-" + namedRoad.replaceAll(" ", "-").toLowerCase() + (null != namedLinkRoad ? "-" + namedLinkRoad.replaceAll(" ", "-").toLowerCase() : "") + ".xml");
             extractor = new TwoRoadsRouteExtractor(fileOrDirName, namedRoad, namedLinkRoad);
         }
         else {
-            System.out.println("Find graph around nodes: " + nodeList);
+            LOGGER.info("Find graph around nodes: " + nodeList);
             outputFileName = args.get("itnoutput", "os-itn-" + new Date().getTime() + ".xml");
             extractor = new NodeListRouteExtractor(fileOrDirName, nodeList);
         }
diff --git a/tools/src/main/java/com/graphhopper/tools/routeExtractor/AbstractProblemRouteExtractor.java b/tools/src/main/java/com/graphhopper/tools/routeExtractor/AbstractProblemRouteExtractor.java
index a798a661da..de859e1b89 100644
--- a/tools/src/main/java/com/graphhopper/tools/routeExtractor/AbstractProblemRouteExtractor.java
+++ b/tools/src/main/java/com/graphhopper/tools/routeExtractor/AbstractProblemRouteExtractor.java
@@ -16,6 +16,7 @@
 import java.util.ArrayList;
 import java.util.HashSet;
 import java.util.Set;
+import java.util.logging.Logger;
 
 import javax.xml.parsers.ParserConfigurationException;
 import javax.xml.stream.XMLStreamException;
@@ -36,12 +37,9 @@
 import com.graphhopper.reader.osgb.itn.OSITNWay;
 import com.graphhopper.reader.osgb.itn.OsItnInputFile;
 import com.graphhopper.util.Helper;
-//import com.graphhopper.tools.OsITNProblemRouteExtractor.ProcessFileVisitor;
-//import com.graphhopper.tools.OsITNProblemRouteExtractor.ProcessVisitor;
-//import com.graphhopper.tools.OsITNProblemRouteExtractor.WayNodeProcess;
 
 abstract public class AbstractProblemRouteExtractor {
-    private OsItnInputFile file;
+	private final static Logger LOGGER = Logger.getLogger(AbstractProblemRouteExtractor.class.getName()); 
     protected String workingStore;
     protected TLongSet testNodeSet = new TLongHashSet(30);
     protected TLongCollection fullWayList = new TLongArrayList(100);
@@ -49,7 +47,14 @@
     protected final TLongCollection otherEndOfWayNodeList = new TLongArrayList(200);
     protected final TLongCollection roadFidList = new TLongHashSet(200);
     protected Set<String> notHighwaySet = new HashSet<String>();
-
+    protected TLongCollection origFullNodeList;
+    protected TLongCollection origFullWayList;
+    protected TLongProcedure nodeOutput;
+    protected TLongProcedure wayOutput;
+    protected TLongArrayList relationList;
+    protected TLongProcedure relOutput;
+    protected PrintWriter outputWriter;
+    
     protected abstract class WayNodeProcess implements TLongProcedure {
         protected final long end;
         protected final RoutingElement item;
@@ -60,7 +65,6 @@ public WayNodeProcess(final long end, final RoutingElement item, final long star
             this.item = item;
             this.start = start;
         }
-
     }
 
     public abstract class ProcessVisitor<T> {
@@ -74,8 +78,11 @@ void setInnerProcess(final ProcessVisitor<T> process) {
             innerProcess = process;
         }
     }
-
-
+    
+    public AbstractProblemRouteExtractor(String fileOrDirName) {
+        workingStore = fileOrDirName;
+    }
+    abstract public void process(final String outputFileName) throws TransformerException, ParserConfigurationException, SAXException, XPathExpressionException, XMLStreamException, IOException, MismatchedDimensionException, FactoryException, TransformException;
 
     protected  ProcessFileVisitor<RoutingElement> fileProcessProcessor = new ProcessFileVisitor<RoutingElement>() {
 
@@ -84,6 +91,8 @@ void processVisitor(final File file) throws XMLStreamException, IOException, Tra
             OsItnInputFile in = null;
             try {
                 in = new OsItnInputFile(file);
+                in.setAbstractFactory(new OsItnUnfilteredRoutingElementFactory());
+                
                 in.setWorkerThreads(1).open();
                 RoutingElement item;
                 while ((item = in.getNext()) != null) {
@@ -95,7 +104,6 @@ void processVisitor(final File file) throws XMLStreamException, IOException, Tra
         }
     };
 
-
     protected final ProcessVisitor<RoutingElement> extractNodeIds = new ProcessVisitor<RoutingElement>() {
 
         @Override
@@ -109,8 +117,6 @@ void processVisitor(final RoutingElement item) {
                     final TLongList nodes = way.getNodes();
                     final long startNode = nodes.get(0);
                     final long endNode = nodes.get(nodes.size() - 1);
-                    // System.out.println("Add start: " + startNode + " end: " +
-                    // endNode);
                     fullNodeList.add(startNode);
                     fullNodeList.add(endNode);
                 }
@@ -175,26 +181,12 @@ public boolean execute(final long testNode) {
         @Override
         void processVisitor(final File element) throws XMLStreamException, IOException, ParserConfigurationException, SAXException, TransformerException, XPathExpressionException {
             final OsItnInputFile itn = new OsItnInputFile(element);
-            final InputStream bis = itn.getInputStream();
-            final TLongArrayList fidList = new TLongArrayList(relationList);
-            System.out.println("Output " + fullWayList.size() + " ways ");
-            fidList.addAll(fullWayList);
-            System.out.println("Output " + origFullNodeList.size() + " nodes ");
-            fidList.addAll(origFullNodeList);
-            // ADD IN OUR ADDITIONAL NODE LIST HERE
-            System.out.println("Output " + otherEndOfWayNodeList.size() + " otherEndOfWayNodeList nodes ");
-            fidList.addAll(otherEndOfWayNodeList);
-            System.out.println("Output " + roadFidList.size() + " roads ");
-            roadFidList.forEach(new TLongProcedure(){
-
-                @Override
-                public boolean execute(long value) {
-                    System.out.println("Fid is " + value);
-                    return true;
-                }});
-            fidList.addAll(roadFidList);
-
-            outputListedFids(fidList, bis);
+            try {
+                 outputListedFids(populateFidList(), itn.getInputStream());
+            }
+            finally {
+            	itn.close();
+            }
         };
 
         private void outputListedFids(final TLongArrayList fidList, final InputStream bis) throws XMLStreamException, NumberFormatException, IOException {
@@ -224,6 +216,37 @@ private void outputListedFids(final TLongArrayList fidList, final InputStream bi
                 lastLine = line;
             }
         }
+        
+        private TLongArrayList populateFidList() {
+        	final TLongArrayList fidList = new TLongArrayList();
+            
+        	if(null != relationList) {
+        		fidList.addAll(relationList);
+            }
+           
+            if(null != fullWayList && !fullWayList.isEmpty()) {
+            	LOGGER.info("Output " + fullWayList.size() + " ways ");
+            	fidList.addAll(fullWayList);
+            }
+            
+            if(null != origFullNodeList && !origFullNodeList.isEmpty()) {
+            	LOGGER.info("Output " + origFullNodeList.size() + " nodes ");
+            	fidList.addAll(origFullNodeList);
+            }
+            
+            if(null != otherEndOfWayNodeList && !otherEndOfWayNodeList.isEmpty()) {
+            	LOGGER.info("Output " + otherEndOfWayNodeList.size() + " otherEndOfWayNodeList nodes ");
+            	fidList.addAll(otherEndOfWayNodeList);
+            }
+            
+            if(null != roadFidList && !roadFidList.isEmpty()) {
+	          LOGGER.info("Output " + roadFidList.size() + " roads ");
+	          fidList.addAll(roadFidList);
+            }
+
+            LOGGER.info("fidList size: " + fidList.size());
+            return fidList;
+        }
 
         private boolean isEndBlock(final String curLine) {
             boolean endBlock = false;
@@ -239,24 +262,11 @@ private boolean isEndBlock(final String curLine) {
         }
     };
 
-    protected TLongCollection origFullNodeList;
-    protected TLongCollection origFullWayList;
-    protected TLongProcedure nodeOutput;
-    protected TLongProcedure wayOutput;
-    protected TLongArrayList relationList;
-    protected TLongProcedure relOutput;
-    protected PrintWriter outputWriter;
-
-    public AbstractProblemRouteExtractor(String fileOrDirName) {
-        workingStore = fileOrDirName;
-    }
-    abstract public void process(final String outputFileName) throws TransformerException, ParserConfigurationException, SAXException, XPathExpressionException, XMLStreamException, IOException, MismatchedDimensionException, FactoryException, TransformException;
-
     protected void prepareOutputMethods() {
         nodeOutput = new TLongProcedure() {
             @Override
             public boolean execute(final long arg0) {
-                System.err.println("node:" + arg0);
+                LOGGER.info("node:" + arg0);
                 return true;
             }
         };
@@ -264,7 +274,7 @@ public boolean execute(final long arg0) {
         wayOutput = new TLongProcedure() {
             @Override
             public boolean execute(final long arg0) {
-                System.err.println("way:" + arg0);
+                LOGGER.info("way:" + arg0);
                 return true;
             }
         };
@@ -272,23 +282,21 @@ public boolean execute(final long arg0) {
         relOutput = new TLongProcedure() {
             @Override
             public boolean execute(final long arg0) {
-                System.err.println("rel:" + arg0);
+                LOGGER.info("rel:" + arg0);
                 return true;
             }
         };
     }
 
-
-
     protected void findRelationsAtJunctionOfBothRoads(final File itnFile) {
-        System.out.println("findRelationsAtJunctionOfBothRoads");
+        LOGGER.info("findRelationsAtJunctionOfBothRoads");
         relationList = new TLongArrayList(30);
         fileProcessProcessor.setInnerProcess(extractRelationsAtJunctionOfBothRoads);
         process(itnFile, fileProcessProcessor);
     }
 
     protected void findWaysLinkedAtJunctionOfBothRoads(final File itnFile) {
-        System.out.println("findWaysLinkedAtJunctionOfBothRoads");
+        LOGGER.info("findWaysLinkedAtJunctionOfBothRoads");
         fullWayList = new TLongArrayList(30);
         fullNodeList = origFullNodeList;
         fileProcessProcessor.setInnerProcess(extractWayIdLinkedToNodes);
@@ -296,7 +304,7 @@ protected void findWaysLinkedAtJunctionOfBothRoads(final File itnFile) {
     }
 
     protected void findNodesOnBothWays(final File itnFile) {
-        System.err.println("STAGE FOUR - findNodesOnBothWays");
+        LOGGER.info("STAGE FOUR - findNodesOnBothWays");
         fileProcessProcessor.setInnerProcess(extractNodeIds);
         process(itnFile, fileProcessProcessor);
         origFullNodeList.retainAll(fullNodeList);
@@ -330,14 +338,7 @@ private void processSingleFile(final File osmFile, final ProcessVisitor<File> pr
     protected void prepareNameRelation(final Relation relation, final TLongCollection wayList) {
         final ArrayList<? extends RelationMember> members = relation.getMembers();
         for (final RelationMember relationMember : members) {
-            // System.out.println("\t Add way member: " + relationMember.ref());
             wayList.add(relationMember.ref());
         }
     }
-
-    private void prepareWaysWithRelationInfo(final Relation relation) {
-        // TODO Auto-generated method stub
-
-    }
-
 }
diff --git a/tools/src/main/java/com/graphhopper/tools/routeExtractor/NodeListRouteExtractor.java b/tools/src/main/java/com/graphhopper/tools/routeExtractor/NodeListRouteExtractor.java
index c3450abba7..27a92dd071 100644
--- a/tools/src/main/java/com/graphhopper/tools/routeExtractor/NodeListRouteExtractor.java
+++ b/tools/src/main/java/com/graphhopper/tools/routeExtractor/NodeListRouteExtractor.java
@@ -8,6 +8,7 @@
 import java.io.IOException;
 import java.io.PrintWriter;
 import java.util.ArrayList;
+import java.util.logging.Logger;
 
 import javax.xml.parsers.ParserConfigurationException;
 import javax.xml.stream.XMLStreamException;
@@ -27,41 +28,11 @@
 import com.graphhopper.reader.osgb.itn.OSITNWay;
 
 public class NodeListRouteExtractor extends AbstractProblemRouteExtractor {
+	
+	private final static Logger LOGGER = Logger.getLogger(NodeListRouteExtractor.class.getName());
 
     private String nodeListString;
 
-    // private TLongSet nodeList = null;
-
-    // private final ProcessVisitor<RoutingElement> extractWayIdLinkedToNodeList
-    // = new ProcessVisitor<RoutingElement>() {
-    // @Override
-    // void processVisitor(final RoutingElement item) {
-    // if (item.isType(OSMElement.WAY)) {
-    // final Way way = (Way) item;
-    // final TLongList nodes = way.getNodes();
-    // final long start = nodes.get(0);
-    // final long end = nodes.get(nodes.size() - 1);
-    // final TLongProcedure addWayIfNodeExists = new WayNodeProcess(end, item,
-    // start) {
-    // @Override
-    // public boolean execute(final long testNode) {
-    // if ((testNode == start) || (testNode == end)) {
-    // // ADD THE OTHER END IN TO OUR new collection
-    // final long otherEnd = testNode == start ? end : start;
-    // otherEndOfWayNodeList.add(otherEnd);
-    //
-    // fullWayList.add(item.getId());
-    //
-    // return false;
-    // }
-    // return true;
-    // }
-    // };
-    // nodeList.forEach(addWayIfNodeExists);
-    // }
-    // }
-    // };
-
     protected abstract class NodeIdListProcedure implements TLongProcedure {
         protected final TLongList nodeIds;
         protected final RoutingElement item;
@@ -90,7 +61,7 @@ public boolean execute(final long testNode) {
                     if (item.isType(OSMElement.WAY)) {
                         final OSITNWay way = (OSITNWay) item;
                         if (way.getNodes().contains(testNode)) {
-                            System.out.println("\tWay found joining one of our nodes. Id: " + way.getId());
+                            LOGGER.info("\tWay found joining one of our nodes. Id: " + way.getId());
                             // Add the way to our list of ways
                             fullWayList.add(way.getId());
 
@@ -126,7 +97,6 @@ public boolean execute(final long testWayId) {
                     return true;
                 }
             };
-            //            System.out.println("Iterate over " + origFullNodeList.size());
             fullWayList.forEach(addWayIfNodeExists);
 
         }
@@ -142,35 +112,15 @@ public void process(String outputFileName) throws TransformerException, ParserCo
         prepareOutputMethods();
 
         final File itnFile = new File(workingStore);
-        // Add the specified nodes to our list
         addRoadNodes();
-        // findWaysOnRoad(itnFile);
-
-        // findWaysLinkedAtSpecifiedNodes(itnFile);
         findWaysLinkedAtJunctionOfBothRoads(itnFile);
         findRelationsAtJunctionOfBothRoads(itnFile);
-        // addRoadLinksWithDirectedNodeFids(itnFile);
-        //
-        // addRoadRouteInformationForRoadLinkFids(itnFile);
-        //
-        // addRoadsWithNetworkMemberRoadLinkFids(itnFile);
-        //
-        // findNodesOfRoad(itnFile);
-
-        // if (null != workingLinkRoad) {
         findLinkedWayIDs(itnFile);
-        // Find the road links
         findRoadLinksForWays(itnFile);
         findNodesOnBothWays(itnFile);
         origFullNodeList.forEach(nodeOutput);
-        //         findWaysLinkedAtJunctionOfBothRoads(itnFile);
         fullWayList.forEach(wayOutput);
-        //         findRelationsAtJunctionOfBothRoads(itnFile);
         relationList.forEach(relOutput);
-        // } else {
-        // fullNodeList.forEach(nodeOutput);
-        // fullWayList.forEach(wayOutput);
-        // }
 
         outputWriter = new PrintWriter(outputFileName);
 
@@ -184,7 +134,7 @@ public void process(String outputFileName) throws TransformerException, ParserCo
     }
 
     private void addRoadNodes() {
-        System.out.println("Add road nodes");
+        LOGGER.info("Add road nodes");
         String[] nodeStrings = nodeListString.split(",");
         origFullNodeList = new TLongArrayList(nodeStrings.length);
         for (int i = 0; i < nodeStrings.length; i++) {
@@ -193,35 +143,22 @@ private void addRoadNodes() {
     }
 
     private void findWaysOnRoad(final File itnFile) {
-        System.err.println("STAGE ONE - findWaysOnRoad");
+        LOGGER.info("STAGE ONE - findWaysOnRoad");
         fileProcessProcessor.setInnerProcess(extractWayIds);
         process(itnFile, fileProcessProcessor);
     }
     private void findRoadLinksForWays(final File itnFile) {
-        System.err.println("STAGE TWOish - findRoadLinksForWays");
+        LOGGER.info("STAGE TWOish - findRoadLinksForWays");
         fileProcessProcessor.setInnerProcess(extractRoadLinksProcessVisitor);
         process(itnFile, fileProcessProcessor);
     }
 
     private void findLinkedWayIDs(final File itnFile) {
-        System.err.println("STAGE THREE - findLinkedWayIDs");
+        LOGGER.info("STAGE THREE - findLinkedWayIDs");
         origFullNodeList = fullNodeList;
         origFullWayList = fullWayList;
         fullNodeList = new TLongArrayList(200);
         fullWayList = new TLongArrayList(100);
-        // workingRoadName = workingLinkRoad;
         findWaysOnRoad(itnFile);
     }
-
-    // protected void findWaysLinkedAtSpecifiedNodes(final File itnFile) {
-    // fullWayList = new TLongArrayList(30);
-    // fullNodeList = origFullNodeList;
-    // fileProcessProcessor.setInnerProcess(extractWayIdLinkedToNodeList);
-    // process(itnFile, fileProcessProcessor);
-    // }
-    // protected void findRelationsAtJunctionOfBothRoads(final File itnFile) {
-    // relationList = new TLongArrayList(30);
-    // fileProcessProcessor.setInnerProcess(extractRelationsAtJunctionOfBothRoads);
-    // process(itnFile, fileProcessProcessor);
-    // }
 }
diff --git a/tools/src/main/java/com/graphhopper/tools/routeExtractor/OsItnUnfilteredRoutingElementFactory.java b/tools/src/main/java/com/graphhopper/tools/routeExtractor/OsItnUnfilteredRoutingElementFactory.java
new file mode 100644
index 0000000000..d2bbb1ff02
--- /dev/null
+++ b/tools/src/main/java/com/graphhopper/tools/routeExtractor/OsItnUnfilteredRoutingElementFactory.java
@@ -0,0 +1,67 @@
+package com.graphhopper.tools.routeExtractor;
+
+import java.math.BigDecimal;
+
+import javax.xml.stream.XMLStreamException;
+import javax.xml.stream.XMLStreamReader;
+
+import org.opengis.geometry.MismatchedDimensionException;
+import org.opengis.referencing.FactoryException;
+import org.opengis.referencing.operation.TransformException;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import com.graphhopper.reader.osgb.AbstractRoutingElementFactory;
+import com.graphhopper.reader.osgb.itn.OSITNElement;
+import com.graphhopper.reader.osgb.itn.OSITNNode;
+import com.graphhopper.reader.osgb.itn.OSITNRelation;
+import com.graphhopper.reader.osgb.itn.OSITNWay;
+import com.graphhopper.reader.osgb.itn.OsItnMetaData;
+
+/**
+ * Used by the Problem Route extractor which does not require to filter the routing element parsing.
+ * 
+ * This unifies the case statements available in @see{OsItnPreProcessRoutingElementFactory} and @see{OsItnProcessStageOneRoutingElementFactory}
+ *
+ * @author mbrett
+ *
+ */
+public class OsItnUnfilteredRoutingElementFactory extends AbstractRoutingElementFactory<OSITNElement>{
+
+
+	    private static final Logger logger = LoggerFactory.getLogger(OsItnUnfilteredRoutingElementFactory.class);
+
+	    @Override
+	    public OSITNElement create(String name, String idStr, XMLStreamReader parser) throws MismatchedDimensionException, XMLStreamException, FactoryException, TransformException {
+	        // Strip of the osgb prefix
+	        idStr = idStr.substring(4);
+	        logger.info(idStr + ":" + name + ":");
+
+	        long id;
+	        try {
+	            id = Long.parseLong(idStr);
+	        } catch (NumberFormatException nfe) {
+	            BigDecimal bd = new BigDecimal(idStr);
+	            id = bd.longValue();
+	        }
+	        logger.info(id + ":" + name + ":");
+	        switch (name) {
+	        case "RoadNode": {
+	            return OSITNNode.create(id, parser);
+	        }
+	        case "RoadLink": {
+	            return OSITNWay.create(id, parser);
+	        }
+	        case "RoadLinkInformation":
+	        case "RoadRouteInformation": {
+	            return OSITNRelation.create(id, parser);
+	        }
+	        case "Road": {
+	            return OsItnMetaData.create(id, parser);
+	        }
+	        }
+	        return null;
+	    }
+	    
+	}
+	
diff --git a/tools/src/main/java/com/graphhopper/tools/routeExtractor/TwoRoadsRouteExtractor.java b/tools/src/main/java/com/graphhopper/tools/routeExtractor/TwoRoadsRouteExtractor.java
index f88ba45b7f..5aab1eb1a1 100644
--- a/tools/src/main/java/com/graphhopper/tools/routeExtractor/TwoRoadsRouteExtractor.java
+++ b/tools/src/main/java/com/graphhopper/tools/routeExtractor/TwoRoadsRouteExtractor.java
@@ -5,6 +5,7 @@
 import java.io.File;
 import java.io.IOException;
 import java.io.PrintWriter;
+import java.util.logging.Logger;
 
 import javax.xml.parsers.ParserConfigurationException;
 import javax.xml.stream.XMLStreamException;
@@ -17,11 +18,13 @@
 import org.xml.sax.SAXException;
 
 import com.graphhopper.reader.OSMElement;
+import com.graphhopper.reader.Relation;
 import com.graphhopper.reader.RoutingElement;
-import com.graphhopper.reader.osgb.itn.OSITNRelation;
+import com.graphhopper.reader.osgb.itn.OSITNElement;
 import com.graphhopper.reader.osgb.itn.OSITNWay;
 
 public class TwoRoadsRouteExtractor extends AbstractProblemRouteExtractor {
+	private final static Logger LOGGER = Logger.getLogger(TwoRoadsRouteExtractor.class.getName());
     protected String workingRoadName;
     protected String workingLinkRoad;
     public TwoRoadsRouteExtractor(String fileOrDirName, String namedRoad, String namedLinkRoad) {
@@ -76,24 +79,27 @@ void processVisitor(final RoutingElement item) {
             if (item.isType(OSMElement.WAY)) {
                 final OSITNWay way = (OSITNWay) item;
                 if (way.hasTag("name", workingRoadName)) {
-                    System.out.println("Way found on " + workingRoadName + " id is " + way.getId());
+                    LOGGER.info("Way found on " + workingRoadName + " id is " + way.getId());
                     fullWayList.add(way.getId());
                 }
             }
             if (item.isType(OSMElement.RELATION)) {
-                final OSITNRelation relation = (OSITNRelation) item;
+                final Relation relation = (Relation) item;
                 // if (!relation.isMetaRelation()
                 // && relation.hasTag(OSITNElement.TAG_KEY_TYPE, "route"))
                 // prepareWaysWithRelationInfo(relation);
-                // System.out.println("\t\tCHECK OUT A RELATION " +
+                // LOGGER.info("\t\tCHECK OUT A RELATION " +
                 // relation.getId());
                 if (relation.isMetaRelation()) {
-                    System.out.println("\t\tADD IT TO my road fids");
+                    LOGGER.info("\t\tADD IT TO my road fids");
                 }
                 if (relation.hasTag("name", workingRoadName)) {
-                    System.out.println("Relation found on " + workingRoadName + " id is " + relation.getId());
-                    prepareNameRelation(relation, fullWayList);
-                    roadFidList.add(relation.getId());
+                	if (relation instanceof OSITNElement) {
+                		OSITNElement element = (OSITNElement)relation;
+	                    LOGGER.info("Relation found on " + workingRoadName + " id is " + element.getId());
+	                    prepareNameRelation(relation, fullWayList);
+	                    roadFidList.add(element.getId());
+                	}
                 }
             }
         }
