diff --git a/core/src/main/java/com/graphhopper/storage/Directory.java b/core/src/main/java/com/graphhopper/storage/Directory.java
index 53cf760bd7..822f967a9f 100644
--- a/core/src/main/java/com/graphhopper/storage/Directory.java
+++ b/core/src/main/java/com/graphhopper/storage/Directory.java
@@ -18,6 +18,7 @@
 package com.graphhopper.storage;
 
 import java.nio.ByteOrder;
+import java.util.Collection;
 
 /**
  * Maintains a collection of DataAccess objects stored at the same location. One GraphStorage per
@@ -64,4 +65,9 @@
      * Removes all contained objects from the directory and releases its resources.
      */
     void clear();
+
+    /**
+     * Returns all created directories.
+     */
+    Collection<DataAccess> getAll();
 }
diff --git a/core/src/main/java/com/graphhopper/storage/GHDirectory.java b/core/src/main/java/com/graphhopper/storage/GHDirectory.java
index 68f12c3f56..8309be2a94 100644
--- a/core/src/main/java/com/graphhopper/storage/GHDirectory.java
+++ b/core/src/main/java/com/graphhopper/storage/GHDirectory.java
@@ -120,7 +120,7 @@ public DataAccess find( String name, DAType type )
                     da = new RAMDataAccess(name, location, false, byteOrder);
             }
         } else if (type.isMMap())
-        {            
+        {
             da = new MMapDataAccess(name, location, byteOrder, type.isAllowWrites());
         } else
         {
@@ -196,7 +196,8 @@ protected void mkdirs()
             new File(location).mkdirs();
     }
 
-    Collection<DataAccess> getAll()
+    @Override
+    public Collection<DataAccess> getAll()
     {
         return map.values();
     }
