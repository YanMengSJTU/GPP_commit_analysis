diff --git a/core/src/main/java/com/graphhopper/GraphHopper.java b/core/src/main/java/com/graphhopper/GraphHopper.java
index 1e6a5410df..8142deaea1 100644
--- a/core/src/main/java/com/graphhopper/GraphHopper.java
+++ b/core/src/main/java/com/graphhopper/GraphHopper.java
@@ -909,6 +909,7 @@ private void interpolateBridgesAndOrTunnels() {
      * @see HintsMap
      */
     public Weighting createWeighting(HintsMap hintsMap, FlagEncoder encoder, Graph graph) {
+
         String weightingStr = toLowerCase(hintsMap.getWeighting());
         Weighting weighting = null;
 
@@ -929,7 +930,7 @@ public Weighting createWeighting(HintsMap hintsMap, FlagEncoder encoder, Graph g
         } else if ("mindful".equalsIgnoreCase(weightingStr)) {
             weighting = new MindfulWeighting(encoder);
         } else if ("vibrant".equalsIgnoreCase(weightingStr)) {
-            weighting = new VibrantWeighting(encoder);
+            weighting = new VibrantWeighting(hintsMap, encoder);
         }
 
         if (weighting == null)
diff --git a/core/src/main/java/com/graphhopper/routing/util/RunningFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/RunningFlagEncoder.java
index d9edd7d09e..c7ef79611e 100644
--- a/core/src/main/java/com/graphhopper/routing/util/RunningFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/RunningFlagEncoder.java
@@ -419,7 +419,7 @@ public long acceptWay(ReaderWay way) {
 
     @Override
     public int defineWayBits(int index, int shift) {
-
+        System.out.println("\n\ndefineWayBits\n\n");
         shift = super.defineWayBits(index, shift);
 
         beautyEncoder = new EncodedDoubleValue("Nature", shift, 16, 0.001, 0, MAX_BEAUTY);
@@ -434,17 +434,11 @@ public int defineWayBits(int index, int shift) {
         qualityHighwayEncoder = new EncodedValue("quality", shift, 4, 1, 0, 15, true);
         shift += qualityHighwayEncoder.getBits();
 
-
-        surfaceHighwayEncoder = new EncodedValue("surface", shift, 3, 1, 0, 7, true);
-        shift += qualityHighwayEncoder.getBits();
-
-
         return shift;
     }
 
     @Override
     public long handleWayTags(ReaderWay way, long allowed, long relationFlags){
-
         long flags = super.handleWayTags(way, allowed, relationFlags);
 
         double nature = this.getCustomWeightByWayId(way.getId(), "nature");
@@ -508,7 +502,8 @@ public long getQualityScore(EdgeIteratorState edge){
     public long getOSMWayId(EdgeIteratorState edge) {
         long flags = edge.getFlags();
         long current = OSMWayIdEncoder.getValue(flags);
-        return idx2OSMWayId.get(current);
+        return current;
+//        return idx2OSMWayId.get(current);
     }
 
     public String getHighwayTypeString(Integer code){
diff --git a/core/src/main/java/com/graphhopper/routing/weighting/VibrantWeighting.java b/core/src/main/java/com/graphhopper/routing/weighting/VibrantWeighting.java
index 09b1528b0d..aa098f6313 100644
--- a/core/src/main/java/com/graphhopper/routing/weighting/VibrantWeighting.java
+++ b/core/src/main/java/com/graphhopper/routing/weighting/VibrantWeighting.java
@@ -1,6 +1,7 @@
 package com.graphhopper.routing.weighting;
 
 import com.graphhopper.routing.util.FlagEncoder;
+import com.graphhopper.routing.util.HintsMap;
 import com.graphhopper.routing.util.RunningFlagEncoder;
 import com.graphhopper.routing.util.TurnCostEncoder;
 import com.graphhopper.storage.TurnCostExtension;
@@ -14,16 +15,33 @@
     private final TurnCostExtension turnCostExt=null;
 
     private String prevName;
+    private HintsMap hintsMap;
 
+    private double beta1 = (double)1/3;
+    private double beta2 = (double)1/3;
+    private double beta3 = (double)1/3;
 
-    public VibrantWeighting(FlagEncoder flagEncoder) {
+
+    public VibrantWeighting(HintsMap hintsMap, FlagEncoder flagEncoder) {
 
         super(flagEncoder);
 
+        this.hintsMap = hintsMap;
         this.turnCostEncoder = flagEncoder;
-//        this.turnCostExt = turnCostExt;
+        this.runningFlagEncoder = (RunningFlagEncoder) flagEncoder;
+
+        initHyperParameters();
+    }
+
+
+    public void initHyperParameters(){
+        this.beta1 = this.hintsMap.getDouble("beta1", (double)1/3);
+        this.beta2 = this.hintsMap.getDouble("beta2", (double)1/3);
+        this.beta3 = this.hintsMap.getDouble("beta3", (double)1/3);
+    }
 
-        runningFlagEncoder = (RunningFlagEncoder) flagEncoder;
+    public void printHyperParameters(){
+        System.out.println("Parameters: beta1="+this.beta1+", beta2="+this.beta2+", beta3="+this.beta3);
     }
 
     @Override
@@ -56,19 +74,6 @@ public double calcWeight(EdgeIteratorState edgeState, boolean reverse, int prevO
             prevName = currentName;
         }
 
-//        System.out.println(currentName+" "+prevName);
-
-
-
-//        System.out.println(edgeState.fetchWayGeometry(1));
-//        System.out.println(edgeState.getClass().getName());
-//        int edgeId = edgeState.getEdge();
-//        System.out.println(edgeId+" "+edgeState.getBaseNode()+" " + prevOrNextEdgeId);
-
-
-//        int edgeId = edgeState.getEdge();
-//        double turnCosts = calcTurnWeight(edgeId, edgeState.getBaseNode(), prevOrNextEdgeId);
-
         double sensorial = runningFlagEncoder.getBeautyScore(edgeState);
         long quality = runningFlagEncoder.getQualityScore(edgeState);
 
diff --git a/core/src/main/java/com/graphhopper/util/details/WayidDetails.java b/core/src/main/java/com/graphhopper/util/details/WayidDetails.java
index 2c62f96fa7..d91943d350 100644
--- a/core/src/main/java/com/graphhopper/util/details/WayidDetails.java
+++ b/core/src/main/java/com/graphhopper/util/details/WayidDetails.java
@@ -19,7 +19,6 @@ public WayidDetails(FlagEncoder encoder) {
 
     @Override
     public boolean isEdgeDifferentToLastEdge(EdgeIteratorState edge) {
-
         long current = encoder.getOSMWayId(edge);
 
         if (wayid == -1 || wayid!=current) {
