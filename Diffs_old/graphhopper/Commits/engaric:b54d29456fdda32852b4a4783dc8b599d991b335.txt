diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/Boulders.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/Boulders.java
new file mode 100644
index 0000000000..3101db5d3b
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/Boulders.java
@@ -0,0 +1,16 @@
+package com.graphhopper.reader.osgb.dpn;
+
+import com.graphhopper.reader.Way;
+
+/**
+ * Created by sadam on 13/02/15.
+ */
+public class Boulders extends AbstractOsDpnOsmAttibuteMappingVisitor {
+
+    @Override
+    protected void applyAttributes(Way way)
+    {
+        way.setTag("natural", "rocks");
+    }
+
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/Cliff.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/Cliff.java
new file mode 100644
index 0000000000..6f47ac1983
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/Cliff.java
@@ -0,0 +1,16 @@
+package com.graphhopper.reader.osgb.dpn;
+
+import com.graphhopper.reader.Way;
+
+/**
+ * Created by sadam on 13/02/15.
+ */
+public class Cliff extends AbstractOsDpnOsmAttibuteMappingVisitor {
+
+    @Override
+    protected void applyAttributes(Way way)
+    {
+        way.setTag("natural", "cliff");
+    }
+
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/InlandWater.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/InlandWater.java
new file mode 100644
index 0000000000..4e99bff6bf
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/InlandWater.java
@@ -0,0 +1,16 @@
+package com.graphhopper.reader.osgb.dpn;
+
+import com.graphhopper.reader.Way;
+
+/**
+ * Created by sadam on 13/02/15.
+ */
+public class InlandWater extends AbstractOsDpnOsmAttibuteMappingVisitor {
+
+    @Override
+    protected void applyAttributes(Way way)
+    {
+        way.setTag("natural", "water");
+    }
+
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/Marsh.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/Marsh.java
new file mode 100644
index 0000000000..f7788ce1e0
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/Marsh.java
@@ -0,0 +1,16 @@
+package com.graphhopper.reader.osgb.dpn;
+
+import com.graphhopper.reader.Way;
+
+/**
+ * Created by sadam on 13/02/15.
+ */
+public class Marsh extends AbstractOsDpnOsmAttibuteMappingVisitor {
+
+    @Override
+    protected void applyAttributes(Way way)
+    {
+        way.setTag("wetland", "marsh");
+    }
+
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/Mud.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/Mud.java
new file mode 100644
index 0000000000..8f5588d2b3
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/Mud.java
@@ -0,0 +1,16 @@
+package com.graphhopper.reader.osgb.dpn;
+
+import com.graphhopper.reader.Way;
+
+/**
+ * Created by sadam on 13/02/15.
+ */
+public class Mud extends AbstractOsDpnOsmAttibuteMappingVisitor {
+
+    @Override
+    protected void applyAttributes(Way way)
+    {
+        way.setTag("natural", "mud");
+    }
+
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnElement.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnElement.java
index a27acd9477..3b4f0551ec 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnElement.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnElement.java
@@ -134,6 +134,12 @@ else if (event == XMLStreamConstants.START_ELEMENT)
             case "rightOfUse":
             {
                 event = handleRightOfUse(parser);
+                break;
+            }
+            case "potentialHazardCrossed":
+            {
+                event = handlePotentialHazard(parser);
+                break;
             }
 
 		default:
@@ -160,6 +166,11 @@ protected int handleRightOfUse(XMLStreamReader parser) throws XMLStreamException
     {
         return parser.next();
     }
+    
+    protected int handlePotentialHazard(XMLStreamReader parser) throws XMLStreamException
+    {
+        return parser.next();
+    }
 
     private int handleName(XMLStreamReader parser) throws XMLStreamException
     {
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnWay.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnWay.java
index 142bada8f7..eadb10463f 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnWay.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnWay.java
@@ -52,6 +52,7 @@
     private static final Logger logger = LoggerFactory
             .getLogger(OsDpnWay.class);
     private static OsDpnOsmAttributeMappingVisitor[] rightOfWayVisitors = {new BridleWay(), new PermissiveBridleWay(), new BywayOpenToAllTraffic(), new Footpath(), new PermissivePath(), new RestrictedByway()};
+    private static OsDpnOsmAttributeMappingVisitor[] potentialHazardVisitors = {new Boulders(), new Cliff(), new Marsh(), new Mud(), new Sand(), new Scree(), new Shingle(), new Spoil(), new Rock(), new TidalWater()};
 
     /**
      * Constructor for XML Parser
@@ -120,6 +121,16 @@ protected int handleRightOfUse(XMLStreamReader parser) throws XMLStreamException
         }
         return super.handlePhysicalLevel(parser);
     }
+    
+    @Override
+    protected int handlePotentialHazard(XMLStreamReader parser) throws XMLStreamException
+    {
+        String attributeValue = parser.getElementText().replaceAll(" ", "").toLowerCase();
+        for(OsDpnOsmAttributeMappingVisitor potentialHazzardVisitor: potentialHazardVisitors) {
+        	potentialHazzardVisitor.visitWayAttribute(attributeValue, this);
+        }
+        return super.handlePotentialHazard(parser);
+    }
 
     @Override
     protected void parseCoords(String lineDefinition) {
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/Rock.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/Rock.java
new file mode 100644
index 0000000000..9ece1e942a
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/Rock.java
@@ -0,0 +1,16 @@
+package com.graphhopper.reader.osgb.dpn;
+
+import com.graphhopper.reader.Way;
+
+/**
+ * Created by sadam on 13/02/15.
+ */
+public class Rock extends AbstractOsDpnOsmAttibuteMappingVisitor {
+
+    @Override
+    protected void applyAttributes(Way way)
+    {
+        way.setTag("natural", "rocks");
+    }
+
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/Sand.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/Sand.java
new file mode 100644
index 0000000000..0de861c817
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/Sand.java
@@ -0,0 +1,16 @@
+package com.graphhopper.reader.osgb.dpn;
+
+import com.graphhopper.reader.Way;
+
+/**
+ * Created by sadam on 13/02/15.
+ */
+public class Sand extends AbstractOsDpnOsmAttibuteMappingVisitor {
+
+    @Override
+    protected void applyAttributes(Way way)
+    {
+        way.setTag("natural", "sand");
+    }
+
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/Scree.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/Scree.java
new file mode 100644
index 0000000000..bfb312be81
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/Scree.java
@@ -0,0 +1,16 @@
+package com.graphhopper.reader.osgb.dpn;
+
+import com.graphhopper.reader.Way;
+
+/**
+ * Created by sadam on 13/02/15.
+ */
+public class Scree extends AbstractOsDpnOsmAttibuteMappingVisitor {
+
+    @Override
+    protected void applyAttributes(Way way)
+    {
+        way.setTag("natural", "scree");
+    }
+
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/Shingle.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/Shingle.java
new file mode 100644
index 0000000000..4aefacbf13
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/Shingle.java
@@ -0,0 +1,16 @@
+package com.graphhopper.reader.osgb.dpn;
+
+import com.graphhopper.reader.Way;
+
+/**
+ * Created by sadam on 13/02/15.
+ */
+public class Shingle extends AbstractOsDpnOsmAttibuteMappingVisitor {
+
+    @Override
+    protected void applyAttributes(Way way)
+    {
+        way.setTag("natural", "shingle");
+    }
+
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/Spoil.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/Spoil.java
new file mode 100644
index 0000000000..0310568891
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/Spoil.java
@@ -0,0 +1,16 @@
+package com.graphhopper.reader.osgb.dpn;
+
+import com.graphhopper.reader.Way;
+
+/**
+ * Created by sadam on 13/02/15.
+ */
+public class Spoil extends AbstractOsDpnOsmAttibuteMappingVisitor {
+
+    @Override
+    protected void applyAttributes(Way way)
+    {
+        way.setTag("man_made", "spoil_heap");
+    }
+
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/TidalWater.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/TidalWater.java
new file mode 100644
index 0000000000..47232fd5d3
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/TidalWater.java
@@ -0,0 +1,17 @@
+package com.graphhopper.reader.osgb.dpn;
+
+import com.graphhopper.reader.Way;
+
+/**
+ * Created by sadam on 13/02/15.
+ */
+public class TidalWater extends AbstractOsDpnOsmAttibuteMappingVisitor {
+
+    @Override
+    protected void applyAttributes(Way way)
+    {
+    	way.setTag("natural", "water");
+        way.setTag("tidal", "yes");
+    }
+
+}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/BouldersTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/BouldersTest.java
new file mode 100644
index 0000000000..8ac7d8a169
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/BouldersTest.java
@@ -0,0 +1,34 @@
+package com.graphhopper.reader.osgb.dpn;
+
+import static org.mockito.Mockito.verify;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+
+public class BouldersTest {
+	 static OsDpnOsmAttributeMappingVisitor visitor;
+	    @Mock
+	    Way way;
+
+	    @BeforeClass
+	    public static void createVisitor() {
+	        visitor = new Boulders();
+	    }
+
+	    @Before
+	    public void init() {
+	        MockitoAnnotations.initMocks(this);
+	    }
+
+	    @Test
+	    public void testVisitWayAttribute() throws Exception {
+	        visitor.visitWayAttribute("boulders", way);
+	        verify(way).setTag("natural", "rocks");
+	    }
+
+}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/BridleWayTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/BridleWayTest.java
index 1c942fcaa2..a4452d6f4e 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/BridleWayTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/BridleWayTest.java
@@ -1,13 +1,14 @@
 package com.graphhopper.reader.osgb.dpn;
 
-import com.graphhopper.reader.Way;
+import static org.mockito.Mockito.verify;
+
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.Test;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
 
-import static org.mockito.Mockito.verify;
+import com.graphhopper.reader.Way;
 
 public class BridleWayTest {
     static OsDpnOsmAttributeMappingVisitor visitor;
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/BywayOpenToAllTrafficTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/BywayOpenToAllTrafficTest.java
index c7c89f142b..f513f50d97 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/BywayOpenToAllTrafficTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/BywayOpenToAllTrafficTest.java
@@ -1,14 +1,14 @@
 package com.graphhopper.reader.osgb.dpn;
 
-import com.graphhopper.reader.Way;
+import static org.mockito.Mockito.verify;
+
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.Test;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
 
-import static org.junit.Assert.*;
-import static org.mockito.Mockito.verify;
+import com.graphhopper.reader.Way;
 
 public class BywayOpenToAllTrafficTest {
 
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/CliffTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/CliffTest.java
new file mode 100644
index 0000000000..87474acdb4
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/CliffTest.java
@@ -0,0 +1,34 @@
+package com.graphhopper.reader.osgb.dpn;
+
+import static org.mockito.Mockito.verify;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+
+public class CliffTest {
+	 static OsDpnOsmAttributeMappingVisitor visitor;
+	    @Mock
+	    Way way;
+
+	    @BeforeClass
+	    public static void createVisitor() {
+	        visitor = new Cliff();
+	    }
+
+	    @Before
+	    public void init() {
+	        MockitoAnnotations.initMocks(this);
+	    }
+
+	    @Test
+	    public void testVisitWayAttribute() throws Exception {
+	        visitor.visitWayAttribute("cliff", way);
+	        verify(way).setTag("natural", "cliff");
+	    }
+
+}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/FootpathTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/FootpathTest.java
index b796910495..60b319784e 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/FootpathTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/FootpathTest.java
@@ -1,13 +1,14 @@
 package com.graphhopper.reader.osgb.dpn;
 
-import com.graphhopper.reader.Way;
+import static org.mockito.Mockito.verify;
+
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.Test;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
 
-import static org.mockito.Mockito.verify;
+import com.graphhopper.reader.Way;
 
 public class FootpathTest {
     static OsDpnOsmAttributeMappingVisitor visitor;
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/InlandWaterTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/InlandWaterTest.java
new file mode 100644
index 0000000000..978b802f23
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/InlandWaterTest.java
@@ -0,0 +1,34 @@
+package com.graphhopper.reader.osgb.dpn;
+
+import static org.mockito.Mockito.verify;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+
+public class InlandWaterTest {
+	 static OsDpnOsmAttributeMappingVisitor visitor;
+	    @Mock
+	    Way way;
+
+	    @BeforeClass
+	    public static void createVisitor() {
+	        visitor = new InlandWater();
+	    }
+
+	    @Before
+	    public void init() {
+	        MockitoAnnotations.initMocks(this);
+	    }
+
+	    @Test
+	    public void testVisitWayAttribute() throws Exception {
+	        visitor.visitWayAttribute("inlandwater", way);
+	        verify(way).setTag("natural", "water");
+	    }
+
+}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/MarshTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/MarshTest.java
new file mode 100644
index 0000000000..235cc06660
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/MarshTest.java
@@ -0,0 +1,34 @@
+package com.graphhopper.reader.osgb.dpn;
+
+import static org.mockito.Mockito.verify;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+
+public class MarshTest {
+	 static OsDpnOsmAttributeMappingVisitor visitor;
+	    @Mock
+	    Way way;
+
+	    @BeforeClass
+	    public static void createVisitor() {
+	        visitor = new Marsh();
+	    }
+
+	    @Before
+	    public void init() {
+	        MockitoAnnotations.initMocks(this);
+	    }
+
+	    @Test
+	    public void testVisitWayAttribute() throws Exception {
+	        visitor.visitWayAttribute("marsh", way);
+	        verify(way).setTag("wetland", "marsh");
+	    }
+
+}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/MudTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/MudTest.java
new file mode 100644
index 0000000000..1e2d26979b
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/MudTest.java
@@ -0,0 +1,34 @@
+package com.graphhopper.reader.osgb.dpn;
+
+import static org.mockito.Mockito.verify;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+
+public class MudTest {
+	 static OsDpnOsmAttributeMappingVisitor visitor;
+	    @Mock
+	    Way way;
+
+	    @BeforeClass
+	    public static void createVisitor() {
+	        visitor = new Mud();
+	    }
+
+	    @Before
+	    public void init() {
+	        MockitoAnnotations.initMocks(this);
+	    }
+
+	    @Test
+	    public void testVisitWayAttribute() throws Exception {
+	        visitor.visitWayAttribute("mud", way);
+	        verify(way).setTag("natural", "mud");
+	    }
+
+}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/OsDpnWayTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/OsDpnWayTest.java
index ed5eeb9ebc..f3c8f8a367 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/OsDpnWayTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/OsDpnWayTest.java
@@ -1,16 +1,17 @@
 package com.graphhopper.reader.osgb.dpn;
 
-import org.junit.Test;
-import org.opengis.referencing.FactoryException;
-import org.opengis.referencing.operation.TransformException;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
+import java.io.StringReader;
 
 import javax.xml.stream.XMLInputFactory;
 import javax.xml.stream.XMLStreamException;
 import javax.xml.stream.XMLStreamReader;
-import java.io.StringReader;
 
-import static org.junit.Assert.assertTrue;
-import static org.junit.Assert.assertFalse;
+import org.junit.Test;
+import org.opengis.referencing.FactoryException;
+import org.opengis.referencing.operation.TransformException;
 
 public class OsDpnWayTest {
 
@@ -177,6 +178,41 @@
             "        </gml:LineString>\n" +
             "      </dpn:geometry>\n" +
             "    </dpn:RouteLink>";
+    public static final String hazardMud = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">" +
+            "  <gml:featureMember>\n" +
+            "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">" +
+            "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n" +
+            "      <dpn:versionID>1</dpn:versionID>\n" +
+            "      <dpn:versionDate>2014-12-12</dpn:versionDate>\n" +
+            "      <dpn:startNode xlink:href=\"#df162dd8-c284-469b-81d6-d63105a39c7f\"/>\n" +
+            "      <dpn:endNode xlink:href=\"#56dc4c0b-0586-4849-b3e2-1e00ee149429\"/>\n" +
+            "      <dpn:descriptiveGroup codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork\">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>\n" +
+            "      <dpn:descriptiveTerm codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#NoPhysicalManifestation\">No Physical Manifestation</dpn:descriptiveTerm>\n" +
+            "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#Unmade\">Unmade</dpn:surfaceType>\n" +
+            "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#BelowSurfaceLevelTunnel\">Below Surface Level Tunnel</dpn:physicalLevel>\n" +
+            "      <dpn:name>Named Road</dpn:name>\n" +
+            "      <dpn:rightOfUse>Restricted Byway</dpn:rightOfUse>\n" +
+            "      <dpn:potentialHazardCrossed>Mud</dpn:potentialHazardCrossed>\n" +
+            "      <dpn:adoptedByNationalCycleRoute>false</dpn:adoptedByNationalCycleRoute>\n" +
+            "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n" +
+            "      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>\n" +
+            "      <dpn:withinAccessLand>true</dpn:withinAccessLand>\n" +
+            "      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>\n" +
+            "      <dpn:verticalGain>\n" +
+            "        <dpn:VerticalGainType>\n" +
+            "          <dpn:inDirection uom=\"m\">9</dpn:inDirection>\n" +
+            "          <dpn:againstDirection uom=\"m\">2</dpn:againstDirection>\n" +
+            "        </dpn:VerticalGainType>\n" +
+            "      </dpn:verticalGain>\n" +
+            "      <dpn:planimetricLength uom=\"m\">85</dpn:planimetricLength>\n" +
+            "      <dpn:surfaceLength uom=\"m\">86</dpn:surfaceLength>\n" +
+            "      <dpn:geometry>\n" +
+            "        <gml:LineString srsName=\"urn:ogc:def:crs:EPSG::7405\" gml:id=\"LOCAL_ID_29519\">\n" +
+            "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n" +
+            "        </gml:LineString>\n" +
+            "      </dpn:geometry>\n" +
+            "    </dpn:RouteLink>";
+    
 
     public static final String madeSealed = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">" +
             "  <gml:featureMember>\n" +
@@ -346,6 +382,12 @@ public void testRightOfWayRestrictedByway() throws XMLStreamException, FactoryEx
         OsDpnWay way = getOsDpnWay(restrictedByWay);
         assertTrue("Way should be designation bridleway", way.hasTag("designation", "restricted_byway"));
     }
+    
+    @Test
+    public void testPotentialHazardMud() throws XMLStreamException, FactoryException, TransformException {
+        OsDpnWay way = getOsDpnWay(hazardMud);
+        assertTrue("Way should be tagged natural=mud", way.hasTag("natural", "mud"));
+    }
 
     @Test
     public void testMadeSealed() throws XMLStreamException, FactoryException, TransformException {
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/PermissiveBridleWayTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/PermissiveBridleWayTest.java
index c35f83c9fc..611534fb34 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/PermissiveBridleWayTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/PermissiveBridleWayTest.java
@@ -1,13 +1,14 @@
 package com.graphhopper.reader.osgb.dpn;
 
-import com.graphhopper.reader.Way;
+import static org.mockito.Mockito.verify;
+
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.Test;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
 
-import static org.mockito.Mockito.verify;
+import com.graphhopper.reader.Way;
 
 public class PermissiveBridleWayTest {
     static OsDpnOsmAttributeMappingVisitor visitor;
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/PermissivePathTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/PermissivePathTest.java
index 3bc0280505..dcc09b373c 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/PermissivePathTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/PermissivePathTest.java
@@ -1,14 +1,14 @@
 package com.graphhopper.reader.osgb.dpn;
 
-import com.graphhopper.reader.Way;
+import static org.mockito.Mockito.verify;
+
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.Test;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
 
-import static org.junit.Assert.*;
-import static org.mockito.Mockito.verify;
+import com.graphhopper.reader.Way;
 
 public class PermissivePathTest {
 
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/RestrictedBywayTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/RestrictedBywayTest.java
index 289a6f517b..39ba29421e 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/RestrictedBywayTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/RestrictedBywayTest.java
@@ -1,14 +1,14 @@
 package com.graphhopper.reader.osgb.dpn;
 
-import com.graphhopper.reader.Way;
+import static org.mockito.Mockito.verify;
+
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.Test;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
 
-import static org.junit.Assert.*;
-import static org.mockito.Mockito.verify;
+import com.graphhopper.reader.Way;
 
 public class RestrictedBywayTest {
     static OsDpnOsmAttributeMappingVisitor visitor;
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/RockTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/RockTest.java
new file mode 100644
index 0000000000..230a282ac3
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/RockTest.java
@@ -0,0 +1,34 @@
+package com.graphhopper.reader.osgb.dpn;
+
+import static org.mockito.Mockito.verify;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+
+public class RockTest {
+	 static OsDpnOsmAttributeMappingVisitor visitor;
+	    @Mock
+	    Way way;
+
+	    @BeforeClass
+	    public static void createVisitor() {
+	        visitor = new Rock();
+	    }
+
+	    @Before
+	    public void init() {
+	        MockitoAnnotations.initMocks(this);
+	    }
+
+	    @Test
+	    public void testVisitWayAttribute() throws Exception {
+	        visitor.visitWayAttribute("rock", way);
+	        verify(way).setTag("natural", "rocks");
+	    }
+
+}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/SandTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/SandTest.java
new file mode 100644
index 0000000000..611c85e9b9
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/SandTest.java
@@ -0,0 +1,34 @@
+package com.graphhopper.reader.osgb.dpn;
+
+import static org.mockito.Mockito.verify;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+
+public class SandTest {
+	 static OsDpnOsmAttributeMappingVisitor visitor;
+	    @Mock
+	    Way way;
+
+	    @BeforeClass
+	    public static void createVisitor() {
+	        visitor = new Sand();
+	    }
+
+	    @Before
+	    public void init() {
+	        MockitoAnnotations.initMocks(this);
+	    }
+
+	    @Test
+	    public void testVisitWayAttribute() throws Exception {
+	        visitor.visitWayAttribute("sand", way);
+	        verify(way).setTag("natural", "sand");
+	    }
+
+}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/ScreeTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/ScreeTest.java
new file mode 100644
index 0000000000..671ccaa1fb
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/ScreeTest.java
@@ -0,0 +1,34 @@
+package com.graphhopper.reader.osgb.dpn;
+
+import static org.mockito.Mockito.verify;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+
+public class ScreeTest {
+	 static OsDpnOsmAttributeMappingVisitor visitor;
+	    @Mock
+	    Way way;
+
+	    @BeforeClass
+	    public static void createVisitor() {
+	        visitor = new Scree();
+	    }
+
+	    @Before
+	    public void init() {
+	        MockitoAnnotations.initMocks(this);
+	    }
+
+	    @Test
+	    public void testVisitWayAttribute() throws Exception {
+	        visitor.visitWayAttribute("scree", way);
+	        verify(way).setTag("natural", "scree");
+	    }
+
+}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/ShingleTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/ShingleTest.java
new file mode 100644
index 0000000000..0f7fcbd719
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/ShingleTest.java
@@ -0,0 +1,34 @@
+package com.graphhopper.reader.osgb.dpn;
+
+import static org.mockito.Mockito.verify;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+
+public class ShingleTest {
+	 static OsDpnOsmAttributeMappingVisitor visitor;
+	    @Mock
+	    Way way;
+
+	    @BeforeClass
+	    public static void createVisitor() {
+	        visitor = new Shingle();
+	    }
+
+	    @Before
+	    public void init() {
+	        MockitoAnnotations.initMocks(this);
+	    }
+
+	    @Test
+	    public void testVisitWayAttribute() throws Exception {
+	        visitor.visitWayAttribute("shingle", way);
+	        verify(way).setTag("natural", "shingle");
+	    }
+
+}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/SpoilTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/SpoilTest.java
new file mode 100644
index 0000000000..d9f6e438aa
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/SpoilTest.java
@@ -0,0 +1,34 @@
+package com.graphhopper.reader.osgb.dpn;
+
+import static org.mockito.Mockito.verify;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+
+public class SpoilTest {
+	 static OsDpnOsmAttributeMappingVisitor visitor;
+	    @Mock
+	    Way way;
+
+	    @BeforeClass
+	    public static void createVisitor() {
+	        visitor = new Spoil();
+	    }
+
+	    @Before
+	    public void init() {
+	        MockitoAnnotations.initMocks(this);
+	    }
+
+	    @Test
+	    public void testVisitWayAttribute() throws Exception {
+	        visitor.visitWayAttribute("spoil", way);
+	        verify(way).setTag("man_made", "spoil_heap");
+	    }
+
+}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/TidalWaterTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/TidalWaterTest.java
new file mode 100644
index 0000000000..9024c2d9b9
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/TidalWaterTest.java
@@ -0,0 +1,35 @@
+package com.graphhopper.reader.osgb.dpn;
+
+import static org.mockito.Mockito.verify;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+
+public class TidalWaterTest {
+	 static OsDpnOsmAttributeMappingVisitor visitor;
+	    @Mock
+	    Way way;
+
+	    @BeforeClass
+	    public static void createVisitor() {
+	        visitor = new TidalWater();
+	    }
+
+	    @Before
+	    public void init() {
+	        MockitoAnnotations.initMocks(this);
+	    }
+
+	    @Test
+	    public void testVisitWayAttribute() throws Exception {
+	        visitor.visitWayAttribute("tidalwater", way);
+	        verify(way).setTag("natural", "water");
+	        verify(way).setTag("tidal", "yes");
+	    }
+
+}
