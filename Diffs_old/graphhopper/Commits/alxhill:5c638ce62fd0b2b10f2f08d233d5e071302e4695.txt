diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetHopper.java b/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetHopper.java
index f13e47f99d..d094eee25a 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetHopper.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetHopper.java
@@ -14,6 +14,7 @@
 import java.nio.ByteBuffer;
 import java.util.ArrayList;
 import java.util.List;
+import java.util.Random;
 import java.util.stream.Collectors;
 import java.util.stream.IntStream;
 
@@ -28,6 +29,9 @@
 
     protected boolean isPaused;
 
+    protected Random rand = new Random(999);
+    protected double randPercent;
+
     private static Logger logger = LoggerFactory.getLogger(MarmosetHopper.class);
 
     public MarmosetHopper() {
@@ -57,15 +61,18 @@ public void init()
         float cellSize = (float) args.getDouble("marmoset.cellsize", 10.0);
         cellGraph = new CellGraph(hopper.getGraphHopperStorage().getBaseGraph(), cellSize);
         cellGraph.init();
+
+        randPercent = args.getDouble("marmoset.randpercent", 0.2);
+        assert randPercent >= 0 && randPercent <= 1;
     }
 
     public synchronized void addVehicle()
     {
         Vehicle v;
-        if (Math.random() < 0.2)
-            v = new DijkstraVehicle(this, Location.randLondon(), Location.randCentralLondon());
-        else
+        if (rand.nextDouble() < randPercent)
             v = new RandomVehicle(this, Location.randLondon(), Location.randCentralLondon());
+        else
+            v = new DijkstraVehicle(this, Location.randLondon(), Location.randCentralLondon());
         v.init();
         if (v.isFinished())
             addVehicle();
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/RandomVehicle.java b/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/RandomVehicle.java
index ab52efd6b0..b32fbc1764 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/RandomVehicle.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/RandomVehicle.java
@@ -28,7 +28,7 @@ public VehicleIterator getVehicleIterator()
 
         FlagEncoder carEncoder = gh.getEncodingManager().getEncoder("car");
 
+
         return new RandomVehicleIterator(qr.getClosestEdge(), carEncoder, gh.getGraphHopperStorage());
     }
-
 }
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/RandomVehicleIterator.java b/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/RandomVehicleIterator.java
index 7faf17caca..a20b67e87e 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/RandomVehicleIterator.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/RandomVehicleIterator.java
@@ -1,6 +1,5 @@
 package com.graphhopper.marmoset.vehicle;
 
-import com.graphhopper.routing.util.DefaultEdgeFilter;
 import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.storage.Graph;
 import com.graphhopper.util.EdgeExplorer;
@@ -23,7 +22,7 @@ public RandomVehicleIterator(EdgeIteratorState firstEdge, FlagEncoder encoder, G
     {
         super(encoder);
         this.graph = graph;
-        edgeExplorer = graph.createEdgeExplorer(new DefaultEdgeFilter(encoder, false, true));
+        this.edgeExplorer = graph.createEdgeExplorer();
         edge = firstEdge;
     }
 
