diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
index 10b068da50..012289e919 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
@@ -23,7 +23,7 @@
 	String nearestPoint = "";
 	String Distance = "";
 
-	
+	DataTable routePointsTable;
 	private String routeResponsecode;
 	private String routeResponseMessage;
 	// private Map<String,String> requestParameters= new HashMap<>();
@@ -186,6 +186,7 @@ public void setParameters_for_RoutingRequest(String paramName,
 	@Given("^I have route ([^\"]*) as$")
 	public void setRoutingpoints(String paramName,DataTable dt) {
 		//graphUiUtil=new GraphHopperUIUtil(IntegrationTestProperties.getTestProperty("graphHopperWebUrl"));
+		routePointsTable=dt;
 		graphUiUtil.addRoutePointsToParameters(paramName, dt);
 
 	}
@@ -225,18 +226,30 @@ public void I_request_for_route() {
 			break;
 		case "SERVICE":
 			
+			
+			
 			graphUiUtil.getRouteFromServiceWithParameters();
 
 			break;
 		default:
 
+			List<List<String>> data = routePointsTable.raw();
 
-			graphUiUtil.getRouteFromServiceWithParameters();
+			String[] points = new String[data.get(1).size()];
+			points = data.get(1).toArray(points);
+
+
+			if (points[0].split(",").length==2) {
+				graphUiUtil.getRouteFromServiceWithParameters();
 				graphUiUtil.getRouteFromUI();
-			
+			} else {
+				
+				graphUiUtil.getRouteFromUI();
+			}
 
 			break;
 
+
 		}
 		
 
