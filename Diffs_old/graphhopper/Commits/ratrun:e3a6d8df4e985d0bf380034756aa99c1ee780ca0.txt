diff --git a/web/src/main/java/com/graphhopper/http/GHServer.java b/web/src/main/java/com/graphhopper/http/GHServer.java
index 5469d61fe6..62a6264fff 100644
--- a/web/src/main/java/com/graphhopper/http/GHServer.java
+++ b/web/src/main/java/com/graphhopper/http/GHServer.java
@@ -74,6 +74,11 @@ public void start(Injector injector) throws Exception {
         servHandler.setErrorHandler(new GHErrorHandler());
         servHandler.setContextPath("/");
 
+        // Putting this here (and not in the guice servlet module) because it should take precedence
+        // over more specific routes. And guice, strangely, is order-dependent (even though, except in the servlet
+        // extension, modules are _not_ supposed to be ordered).
+        servHandler.addServlet(new ServletHolder(injector.getInstance(InvalidRequestServlet.class)), "/*");
+
         servHandler.addFilter(new FilterHolder(new GuiceFilter()), "/*", EnumSet.allOf(DispatcherType.class));
 
         ServerConnector connector0 = new ServerConnector(server);
diff --git a/web/src/main/java/com/graphhopper/http/GraphHopperServletModule.java b/web/src/main/java/com/graphhopper/http/GraphHopperServletModule.java
index 109dc82d17..ef564d22a9 100644
--- a/web/src/main/java/com/graphhopper/http/GraphHopperServletModule.java
+++ b/web/src/main/java/com/graphhopper/http/GraphHopperServletModule.java
@@ -85,7 +85,10 @@ protected void configureServlets() {
         serve("/change*").with(ChangeGraphServlet.class);
         bind(ChangeGraphServlet.class).in(Singleton.class);
 
-        serve("/*").with(InvalidRequestServlet.class);
+        // Can't do this because otherwise we can't add more paths _after_ this module.
+        // Instead, put this route explicitly into Jetty.
+        // (We really need a web service framework.)
+        // serve("/*").with(InvalidRequestServlet.class);
         bind(InvalidRequestServlet.class).in(Singleton.class);
     }
 
