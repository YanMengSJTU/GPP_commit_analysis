diff --git a/core/src/main/java/com/graphhopper/GraphHopper.java b/core/src/main/java/com/graphhopper/GraphHopper.java
index 19dc5fed1d..850ddb8399 100644
--- a/core/src/main/java/com/graphhopper/GraphHopper.java
+++ b/core/src/main/java/com/graphhopper/GraphHopper.java
@@ -978,10 +978,12 @@ public Weighting createTurnWeighting( Weighting weighting, Graph graph, FlagEnco
 	
 	/**
 	 * Potentially wraps the specified weighting into a EscapePrivateWeighting instance.
+	 * @param includeNoThrough 
 	 */
-	public Weighting createEscapePrivateWeighting( Weighting weighting, Graph graph, FlagEncoder encoder )
+	public Weighting createEscapePrivateWeighting( Weighting weighting, GHRequest request , Graph graph, FlagEncoder encoder )
 	{
-		if (encoder.supports(EscapePrivateWeighting.class))
+		boolean includeNoThrough = checkForNoThroughAccess(request);
+		if (includeNoThrough && encoder.supports(EscapePrivateWeighting.class))
 			return new EscapePrivateWeighting(graph, encoder, weighting);
 		return weighting;
 	}
@@ -1097,7 +1099,7 @@ public GHResponse route( GHRequest request )
 			return Collections.emptyList();
 		}
 		weighting = createTurnWeighting(weighting, queryGraph, encoder);
-		weighting = createEscapePrivateWeighting(weighting, queryGraph, encoder);
+		weighting = createEscapePrivateWeighting(weighting, request, queryGraph, encoder);
 
 		double weightLimit = request.getHints().getDouble("defaultWeightLimit", defaultWeightLimit);
 		String algoStr = request.getAlgorithm().isEmpty() ? AlgorithmOptions.DIJKSTRA_BI : request
@@ -1139,6 +1141,11 @@ public GHResponse route( GHRequest request )
 		return paths;
 	}
 
+	private boolean checkForNoThroughAccess( GHRequest request )
+    {
+	    return request.getHints().getBool("private",true) || request.getVehicle().equals("emv");
+    }
+
 	protected LocationIndex createLocationIndex( Directory dir )
 	{
 		LocationIndexTree tmpIndex = new LocationIndexTree(graph.getBaseGraph(), dir);
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/AbstractOsInputFile.java b/core/src/main/java/com/graphhopper/reader/osgb/AbstractOsInputFile.java
index 1cc4189705..05d00b4e2f 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/AbstractOsInputFile.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/AbstractOsInputFile.java
@@ -208,8 +208,8 @@ public boolean isEOF() {
     @Override
     public void close() throws IOException {
         try {
-            if (!binary)
-                parser.close();
+            if (!binary && null != parser)
+            		parser.close();
         } catch (XMLStreamException ex) {
             throw new IOException(ex);
         } finally {
diff --git a/core/src/main/java/com/graphhopper/routing/util/OsCarFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/OsCarFlagEncoder.java
index 4d5c120f66..9349376514 100644
--- a/core/src/main/java/com/graphhopper/routing/util/OsCarFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/OsCarFlagEncoder.java
@@ -8,19 +8,20 @@
 	private EncodedValue startStopEncoder;
 	
 	public OsCarFlagEncoder() {
-		super(5, 5, 0);
-		restrictedValues.clear();
+		this(5, 5, 0);
 //		setOsAvoidanceDecorator();
 	}
 
 	public OsCarFlagEncoder(String propertiesStr) {
 		super(propertiesStr);
+		maxPossibleSpeed = SEVENTY_MPH_IN_KPH;
 		restrictedValues.clear();
 //		setOsAvoidanceDecorator();
 	}
 
 	public OsCarFlagEncoder(int speedBits, double speedFactor, int maxTurnCosts) {
 		super(speedBits, speedFactor, maxTurnCosts);
+		maxPossibleSpeed = SEVENTY_MPH_IN_KPH;
 		restrictedValues.clear();
 //		setOsAvoidanceDecorator();
 	}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/OSCarFlagEncoderTest.java b/core/src/test/java/com/graphhopper/reader/osgb/OSCarFlagEncoderTest.java
index 9d80203fa5..c4adc5871a 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/OSCarFlagEncoderTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/OSCarFlagEncoderTest.java
@@ -8,6 +8,8 @@
 import org.junit.Before;
 import org.junit.Test;
 
+import com.graphhopper.reader.OSMWay;
+import com.graphhopper.routing.util.CarFlagEncoder;
 import com.graphhopper.routing.util.DefaultEdgeFilter;
 import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.routing.util.OsCarFlagEncoder;
@@ -68,4 +70,24 @@ public void testReadSimplePrivateRestrictedCrossRoads() throws IOException
 		checkSimpleNodeNetwork(graph);
 		checkAccessNodeNetwork(graph, osCarEncoder, true);
 	}
+	
+	@Test
+	/**
+	 * Tests that the max speed for an OS car is 70mph.
+	 * 
+	 * Note that the 70mph is factored to be divisible by five such that it fits the current factor 5 speed encoding.
+	 * @throws IOException
+	 */
+	public void testMaxSpeedForCaris70mph() throws IOException {
+		
+		final int factoredMPHinKPH = (CarFlagEncoder.SEVENTY_MPH_IN_KPH/5)*5;
+		
+        OSMWay way = new OSMWay(1);
+        way.setTag("highway", "motorway");
+        way.setTag("maxspeed", "120");
+        long allowed = osCarEncoder.acceptWay(way);
+        long encoded = osCarEncoder.handleWayTags(way, allowed, 0);
+        assertEquals(factoredMPHinKPH, osCarEncoder.getSpeed(encoded), 1e-1);
+
+	}
 }
diff --git a/tools/src/main/java/com/graphhopper/tools/OsITNProblemRouteExtractor.java b/tools/src/main/java/com/graphhopper/tools/OsITNProblemRouteExtractor.java
index 44361257bc..a7d03b563b 100644
--- a/tools/src/main/java/com/graphhopper/tools/OsITNProblemRouteExtractor.java
+++ b/tools/src/main/java/com/graphhopper/tools/OsITNProblemRouteExtractor.java
@@ -1,6 +1,7 @@
 package com.graphhopper.tools;
 
 import java.util.Date;
+import java.util.logging.Logger;
 
 import com.graphhopper.GraphHopper;
 import com.graphhopper.routing.util.DefaultEdgeFilter;
@@ -23,21 +24,35 @@
  * 
  */
 public class OsITNProblemRouteExtractor {
+	
+	private final static Logger LOGGER = Logger.getLogger(OsITNProblemRouteExtractor.class.getName()); 
+	
+	/**
+	 * Street names are stored in ITN in uppercase.
+	 **/
+	private static String toUpperCase(String s) {
+		if(null !=s) {
+			s = s.toUpperCase();
+		}
+		return s;
+	}
+	
     public static void main(String[] strs) throws Exception {
         CmdArgs args = CmdArgs.read(strs);
         String fileOrDirName = args.get("osmreader.osm", null);
-        String namedRoad = args.get("roadName", null);
-        String namedLinkRoad = args.get("linkRoadName", null);
+        String namedRoad = toUpperCase(args.get("roadName", null));
+        String namedLinkRoad = toUpperCase(args.get("linkRoadName", null));
+        
         String nodeList = args.get("nodeList", null);
         AbstractProblemRouteExtractor extractor = null;
         String outputFileName = null;
         if (nodeList==null) {
-            System.out.println("Find junction around " + namedRoad + " and " + namedLinkRoad);
+            LOGGER.info("Find junction around " + namedRoad + " and " + namedLinkRoad);
             outputFileName = args.get("itnoutput", "os-itn-" + namedRoad.replaceAll(" ", "-").toLowerCase() + (null != namedLinkRoad ? "-" + namedLinkRoad.replaceAll(" ", "-").toLowerCase() : "") + ".xml");
             extractor = new TwoRoadsRouteExtractor(fileOrDirName, namedRoad, namedLinkRoad);
         }
         else {
-            System.out.println("Find graph around nodes: " + nodeList);
+            LOGGER.info("Find graph around nodes: " + nodeList);
             outputFileName = args.get("itnoutput", "os-itn-" + new Date().getTime() + ".xml");
             extractor = new NodeListRouteExtractor(fileOrDirName, nodeList);
         }
diff --git a/tools/src/main/java/com/graphhopper/tools/routeExtractor/AbstractProblemRouteExtractor.java b/tools/src/main/java/com/graphhopper/tools/routeExtractor/AbstractProblemRouteExtractor.java
index a798a661da..de859e1b89 100644
--- a/tools/src/main/java/com/graphhopper/tools/routeExtractor/AbstractProblemRouteExtractor.java
+++ b/tools/src/main/java/com/graphhopper/tools/routeExtractor/AbstractProblemRouteExtractor.java
@@ -16,6 +16,7 @@
 import java.util.ArrayList;
 import java.util.HashSet;
 import java.util.Set;
+import java.util.logging.Logger;
 
 import javax.xml.parsers.ParserConfigurationException;
 import javax.xml.stream.XMLStreamException;
@@ -36,12 +37,9 @@
 import com.graphhopper.reader.osgb.itn.OSITNWay;
 import com.graphhopper.reader.osgb.itn.OsItnInputFile;
 import com.graphhopper.util.Helper;
-//import com.graphhopper.tools.OsITNProblemRouteExtractor.ProcessFileVisitor;
-//import com.graphhopper.tools.OsITNProblemRouteExtractor.ProcessVisitor;
-//import com.graphhopper.tools.OsITNProblemRouteExtractor.WayNodeProcess;
 
 abstract public class AbstractProblemRouteExtractor {
-    private OsItnInputFile file;
+	private final static Logger LOGGER = Logger.getLogger(AbstractProblemRouteExtractor.class.getName()); 
     protected String workingStore;
     protected TLongSet testNodeSet = new TLongHashSet(30);
     protected TLongCollection fullWayList = new TLongArrayList(100);
@@ -49,7 +47,14 @@
     protected final TLongCollection otherEndOfWayNodeList = new TLongArrayList(200);
     protected final TLongCollection roadFidList = new TLongHashSet(200);
     protected Set<String> notHighwaySet = new HashSet<String>();
-
+    protected TLongCollection origFullNodeList;
+    protected TLongCollection origFullWayList;
+    protected TLongProcedure nodeOutput;
+    protected TLongProcedure wayOutput;
+    protected TLongArrayList relationList;
+    protected TLongProcedure relOutput;
+    protected PrintWriter outputWriter;
+    
     protected abstract class WayNodeProcess implements TLongProcedure {
         protected final long end;
         protected final RoutingElement item;
@@ -60,7 +65,6 @@ public WayNodeProcess(final long end, final RoutingElement item, final long star
             this.item = item;
             this.start = start;
         }
-
     }
 
     public abstract class ProcessVisitor<T> {
@@ -74,8 +78,11 @@ void setInnerProcess(final ProcessVisitor<T> process) {
             innerProcess = process;
         }
     }
-
-
+    
+    public AbstractProblemRouteExtractor(String fileOrDirName) {
+        workingStore = fileOrDirName;
+    }
+    abstract public void process(final String outputFileName) throws TransformerException, ParserConfigurationException, SAXException, XPathExpressionException, XMLStreamException, IOException, MismatchedDimensionException, FactoryException, TransformException;
 
     protected  ProcessFileVisitor<RoutingElement> fileProcessProcessor = new ProcessFileVisitor<RoutingElement>() {
 
@@ -84,6 +91,8 @@ void processVisitor(final File file) throws XMLStreamException, IOException, Tra
             OsItnInputFile in = null;
             try {
                 in = new OsItnInputFile(file);
+                in.setAbstractFactory(new OsItnUnfilteredRoutingElementFactory());
+                
                 in.setWorkerThreads(1).open();
                 RoutingElement item;
                 while ((item = in.getNext()) != null) {
@@ -95,7 +104,6 @@ void processVisitor(final File file) throws XMLStreamException, IOException, Tra
         }
     };
 
-
     protected final ProcessVisitor<RoutingElement> extractNodeIds = new ProcessVisitor<RoutingElement>() {
 
         @Override
@@ -109,8 +117,6 @@ void processVisitor(final RoutingElement item) {
                     final TLongList nodes = way.getNodes();
                     final long startNode = nodes.get(0);
                     final long endNode = nodes.get(nodes.size() - 1);
-                    // System.out.println("Add start: " + startNode + " end: " +
-                    // endNode);
                     fullNodeList.add(startNode);
                     fullNodeList.add(endNode);
                 }
@@ -175,26 +181,12 @@ public boolean execute(final long testNode) {
         @Override
         void processVisitor(final File element) throws XMLStreamException, IOException, ParserConfigurationException, SAXException, TransformerException, XPathExpressionException {
             final OsItnInputFile itn = new OsItnInputFile(element);
-            final InputStream bis = itn.getInputStream();
-            final TLongArrayList fidList = new TLongArrayList(relationList);
-            System.out.println("Output " + fullWayList.size() + " ways ");
-            fidList.addAll(fullWayList);
-            System.out.println("Output " + origFullNodeList.size() + " nodes ");
-            fidList.addAll(origFullNodeList);
-            // ADD IN OUR ADDITIONAL NODE LIST HERE
-            System.out.println("Output " + otherEndOfWayNodeList.size() + " otherEndOfWayNodeList nodes ");
-            fidList.addAll(otherEndOfWayNodeList);
-            System.out.println("Output " + roadFidList.size() + " roads ");
-            roadFidList.forEach(new TLongProcedure(){
-
-                @Override
-                public boolean execute(long value) {
-                    System.out.println("Fid is " + value);
-                    return true;
-                }});
-            fidList.addAll(roadFidList);
-
-            outputListedFids(fidList, bis);
+            try {
+                 outputListedFids(populateFidList(), itn.getInputStream());
+            }
+            finally {
+            	itn.close();
+            }
         };
 
         private void outputListedFids(final TLongArrayList fidList, final InputStream bis) throws XMLStreamException, NumberFormatException, IOException {
@@ -224,6 +216,37 @@ private void outputListedFids(final TLongArrayList fidList, final InputStream bi
                 lastLine = line;
             }
         }
+        
+        private TLongArrayList populateFidList() {
+        	final TLongArrayList fidList = new TLongArrayList();
+            
+        	if(null != relationList) {
+        		fidList.addAll(relationList);
+            }
+           
+            if(null != fullWayList && !fullWayList.isEmpty()) {
+            	LOGGER.info("Output " + fullWayList.size() + " ways ");
+            	fidList.addAll(fullWayList);
+            }
+            
+            if(null != origFullNodeList && !origFullNodeList.isEmpty()) {
+            	LOGGER.info("Output " + origFullNodeList.size() + " nodes ");
+            	fidList.addAll(origFullNodeList);
+            }
+            
+            if(null != otherEndOfWayNodeList && !otherEndOfWayNodeList.isEmpty()) {
+            	LOGGER.info("Output " + otherEndOfWayNodeList.size() + " otherEndOfWayNodeList nodes ");
+            	fidList.addAll(otherEndOfWayNodeList);
+            }
+            
+            if(null != roadFidList && !roadFidList.isEmpty()) {
+	          LOGGER.info("Output " + roadFidList.size() + " roads ");
+	          fidList.addAll(roadFidList);
+            }
+
+            LOGGER.info("fidList size: " + fidList.size());
+            return fidList;
+        }
 
         private boolean isEndBlock(final String curLine) {
             boolean endBlock = false;
@@ -239,24 +262,11 @@ private boolean isEndBlock(final String curLine) {
         }
     };
 
-    protected TLongCollection origFullNodeList;
-    protected TLongCollection origFullWayList;
-    protected TLongProcedure nodeOutput;
-    protected TLongProcedure wayOutput;
-    protected TLongArrayList relationList;
-    protected TLongProcedure relOutput;
-    protected PrintWriter outputWriter;
-
-    public AbstractProblemRouteExtractor(String fileOrDirName) {
-        workingStore = fileOrDirName;
-    }
-    abstract public void process(final String outputFileName) throws TransformerException, ParserConfigurationException, SAXException, XPathExpressionException, XMLStreamException, IOException, MismatchedDimensionException, FactoryException, TransformException;
-
     protected void prepareOutputMethods() {
         nodeOutput = new TLongProcedure() {
             @Override
             public boolean execute(final long arg0) {
-                System.err.println("node:" + arg0);
+                LOGGER.info("node:" + arg0);
                 return true;
             }
         };
@@ -264,7 +274,7 @@ public boolean execute(final long arg0) {
         wayOutput = new TLongProcedure() {
             @Override
             public boolean execute(final long arg0) {
-                System.err.println("way:" + arg0);
+                LOGGER.info("way:" + arg0);
                 return true;
             }
         };
@@ -272,23 +282,21 @@ public boolean execute(final long arg0) {
         relOutput = new TLongProcedure() {
             @Override
             public boolean execute(final long arg0) {
-                System.err.println("rel:" + arg0);
+                LOGGER.info("rel:" + arg0);
                 return true;
             }
         };
     }
 
-
-
     protected void findRelationsAtJunctionOfBothRoads(final File itnFile) {
-        System.out.println("findRelationsAtJunctionOfBothRoads");
+        LOGGER.info("findRelationsAtJunctionOfBothRoads");
         relationList = new TLongArrayList(30);
         fileProcessProcessor.setInnerProcess(extractRelationsAtJunctionOfBothRoads);
         process(itnFile, fileProcessProcessor);
     }
 
     protected void findWaysLinkedAtJunctionOfBothRoads(final File itnFile) {
-        System.out.println("findWaysLinkedAtJunctionOfBothRoads");
+        LOGGER.info("findWaysLinkedAtJunctionOfBothRoads");
         fullWayList = new TLongArrayList(30);
         fullNodeList = origFullNodeList;
         fileProcessProcessor.setInnerProcess(extractWayIdLinkedToNodes);
@@ -296,7 +304,7 @@ protected void findWaysLinkedAtJunctionOfBothRoads(final File itnFile) {
     }
 
     protected void findNodesOnBothWays(final File itnFile) {
-        System.err.println("STAGE FOUR - findNodesOnBothWays");
+        LOGGER.info("STAGE FOUR - findNodesOnBothWays");
         fileProcessProcessor.setInnerProcess(extractNodeIds);
         process(itnFile, fileProcessProcessor);
         origFullNodeList.retainAll(fullNodeList);
@@ -330,14 +338,7 @@ private void processSingleFile(final File osmFile, final ProcessVisitor<File> pr
     protected void prepareNameRelation(final Relation relation, final TLongCollection wayList) {
         final ArrayList<? extends RelationMember> members = relation.getMembers();
         for (final RelationMember relationMember : members) {
-            // System.out.println("\t Add way member: " + relationMember.ref());
             wayList.add(relationMember.ref());
         }
     }
-
-    private void prepareWaysWithRelationInfo(final Relation relation) {
-        // TODO Auto-generated method stub
-
-    }
-
 }
diff --git a/tools/src/main/java/com/graphhopper/tools/routeExtractor/NodeListRouteExtractor.java b/tools/src/main/java/com/graphhopper/tools/routeExtractor/NodeListRouteExtractor.java
index c3450abba7..27a92dd071 100644
--- a/tools/src/main/java/com/graphhopper/tools/routeExtractor/NodeListRouteExtractor.java
+++ b/tools/src/main/java/com/graphhopper/tools/routeExtractor/NodeListRouteExtractor.java
@@ -8,6 +8,7 @@
 import java.io.IOException;
 import java.io.PrintWriter;
 import java.util.ArrayList;
+import java.util.logging.Logger;
 
 import javax.xml.parsers.ParserConfigurationException;
 import javax.xml.stream.XMLStreamException;
@@ -27,41 +28,11 @@
 import com.graphhopper.reader.osgb.itn.OSITNWay;
 
 public class NodeListRouteExtractor extends AbstractProblemRouteExtractor {
+	
+	private final static Logger LOGGER = Logger.getLogger(NodeListRouteExtractor.class.getName());
 
     private String nodeListString;
 
-    // private TLongSet nodeList = null;
-
-    // private final ProcessVisitor<RoutingElement> extractWayIdLinkedToNodeList
-    // = new ProcessVisitor<RoutingElement>() {
-    // @Override
-    // void processVisitor(final RoutingElement item) {
-    // if (item.isType(OSMElement.WAY)) {
-    // final Way way = (Way) item;
-    // final TLongList nodes = way.getNodes();
-    // final long start = nodes.get(0);
-    // final long end = nodes.get(nodes.size() - 1);
-    // final TLongProcedure addWayIfNodeExists = new WayNodeProcess(end, item,
-    // start) {
-    // @Override
-    // public boolean execute(final long testNode) {
-    // if ((testNode == start) || (testNode == end)) {
-    // // ADD THE OTHER END IN TO OUR new collection
-    // final long otherEnd = testNode == start ? end : start;
-    // otherEndOfWayNodeList.add(otherEnd);
-    //
-    // fullWayList.add(item.getId());
-    //
-    // return false;
-    // }
-    // return true;
-    // }
-    // };
-    // nodeList.forEach(addWayIfNodeExists);
-    // }
-    // }
-    // };
-
     protected abstract class NodeIdListProcedure implements TLongProcedure {
         protected final TLongList nodeIds;
         protected final RoutingElement item;
@@ -90,7 +61,7 @@ public boolean execute(final long testNode) {
                     if (item.isType(OSMElement.WAY)) {
                         final OSITNWay way = (OSITNWay) item;
                         if (way.getNodes().contains(testNode)) {
-                            System.out.println("\tWay found joining one of our nodes. Id: " + way.getId());
+                            LOGGER.info("\tWay found joining one of our nodes. Id: " + way.getId());
                             // Add the way to our list of ways
                             fullWayList.add(way.getId());
 
@@ -126,7 +97,6 @@ public boolean execute(final long testWayId) {
                     return true;
                 }
             };
-            //            System.out.println("Iterate over " + origFullNodeList.size());
             fullWayList.forEach(addWayIfNodeExists);
 
         }
@@ -142,35 +112,15 @@ public void process(String outputFileName) throws TransformerException, ParserCo
         prepareOutputMethods();
 
         final File itnFile = new File(workingStore);
-        // Add the specified nodes to our list
         addRoadNodes();
-        // findWaysOnRoad(itnFile);
-
-        // findWaysLinkedAtSpecifiedNodes(itnFile);
         findWaysLinkedAtJunctionOfBothRoads(itnFile);
         findRelationsAtJunctionOfBothRoads(itnFile);
-        // addRoadLinksWithDirectedNodeFids(itnFile);
-        //
-        // addRoadRouteInformationForRoadLinkFids(itnFile);
-        //
-        // addRoadsWithNetworkMemberRoadLinkFids(itnFile);
-        //
-        // findNodesOfRoad(itnFile);
-
-        // if (null != workingLinkRoad) {
         findLinkedWayIDs(itnFile);
-        // Find the road links
         findRoadLinksForWays(itnFile);
         findNodesOnBothWays(itnFile);
         origFullNodeList.forEach(nodeOutput);
-        //         findWaysLinkedAtJunctionOfBothRoads(itnFile);
         fullWayList.forEach(wayOutput);
-        //         findRelationsAtJunctionOfBothRoads(itnFile);
         relationList.forEach(relOutput);
-        // } else {
-        // fullNodeList.forEach(nodeOutput);
-        // fullWayList.forEach(wayOutput);
-        // }
 
         outputWriter = new PrintWriter(outputFileName);
 
@@ -184,7 +134,7 @@ public void process(String outputFileName) throws TransformerException, ParserCo
     }
 
     private void addRoadNodes() {
-        System.out.println("Add road nodes");
+        LOGGER.info("Add road nodes");
         String[] nodeStrings = nodeListString.split(",");
         origFullNodeList = new TLongArrayList(nodeStrings.length);
         for (int i = 0; i < nodeStrings.length; i++) {
@@ -193,35 +143,22 @@ private void addRoadNodes() {
     }
 
     private void findWaysOnRoad(final File itnFile) {
-        System.err.println("STAGE ONE - findWaysOnRoad");
+        LOGGER.info("STAGE ONE - findWaysOnRoad");
         fileProcessProcessor.setInnerProcess(extractWayIds);
         process(itnFile, fileProcessProcessor);
     }
     private void findRoadLinksForWays(final File itnFile) {
-        System.err.println("STAGE TWOish - findRoadLinksForWays");
+        LOGGER.info("STAGE TWOish - findRoadLinksForWays");
         fileProcessProcessor.setInnerProcess(extractRoadLinksProcessVisitor);
         process(itnFile, fileProcessProcessor);
     }
 
     private void findLinkedWayIDs(final File itnFile) {
-        System.err.println("STAGE THREE - findLinkedWayIDs");
+        LOGGER.info("STAGE THREE - findLinkedWayIDs");
         origFullNodeList = fullNodeList;
         origFullWayList = fullWayList;
         fullNodeList = new TLongArrayList(200);
         fullWayList = new TLongArrayList(100);
-        // workingRoadName = workingLinkRoad;
         findWaysOnRoad(itnFile);
     }
-
-    // protected void findWaysLinkedAtSpecifiedNodes(final File itnFile) {
-    // fullWayList = new TLongArrayList(30);
-    // fullNodeList = origFullNodeList;
-    // fileProcessProcessor.setInnerProcess(extractWayIdLinkedToNodeList);
-    // process(itnFile, fileProcessProcessor);
-    // }
-    // protected void findRelationsAtJunctionOfBothRoads(final File itnFile) {
-    // relationList = new TLongArrayList(30);
-    // fileProcessProcessor.setInnerProcess(extractRelationsAtJunctionOfBothRoads);
-    // process(itnFile, fileProcessProcessor);
-    // }
 }
diff --git a/tools/src/main/java/com/graphhopper/tools/routeExtractor/OsItnUnfilteredRoutingElementFactory.java b/tools/src/main/java/com/graphhopper/tools/routeExtractor/OsItnUnfilteredRoutingElementFactory.java
new file mode 100644
index 0000000000..d2bbb1ff02
--- /dev/null
+++ b/tools/src/main/java/com/graphhopper/tools/routeExtractor/OsItnUnfilteredRoutingElementFactory.java
@@ -0,0 +1,67 @@
+package com.graphhopper.tools.routeExtractor;
+
+import java.math.BigDecimal;
+
+import javax.xml.stream.XMLStreamException;
+import javax.xml.stream.XMLStreamReader;
+
+import org.opengis.geometry.MismatchedDimensionException;
+import org.opengis.referencing.FactoryException;
+import org.opengis.referencing.operation.TransformException;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import com.graphhopper.reader.osgb.AbstractRoutingElementFactory;
+import com.graphhopper.reader.osgb.itn.OSITNElement;
+import com.graphhopper.reader.osgb.itn.OSITNNode;
+import com.graphhopper.reader.osgb.itn.OSITNRelation;
+import com.graphhopper.reader.osgb.itn.OSITNWay;
+import com.graphhopper.reader.osgb.itn.OsItnMetaData;
+
+/**
+ * Used by the Problem Route extractor which does not require to filter the routing element parsing.
+ * 
+ * This unifies the case statements available in @see{OsItnPreProcessRoutingElementFactory} and @see{OsItnProcessStageOneRoutingElementFactory}
+ *
+ * @author mbrett
+ *
+ */
+public class OsItnUnfilteredRoutingElementFactory extends AbstractRoutingElementFactory<OSITNElement>{
+
+
+	    private static final Logger logger = LoggerFactory.getLogger(OsItnUnfilteredRoutingElementFactory.class);
+
+	    @Override
+	    public OSITNElement create(String name, String idStr, XMLStreamReader parser) throws MismatchedDimensionException, XMLStreamException, FactoryException, TransformException {
+	        // Strip of the osgb prefix
+	        idStr = idStr.substring(4);
+	        logger.info(idStr + ":" + name + ":");
+
+	        long id;
+	        try {
+	            id = Long.parseLong(idStr);
+	        } catch (NumberFormatException nfe) {
+	            BigDecimal bd = new BigDecimal(idStr);
+	            id = bd.longValue();
+	        }
+	        logger.info(id + ":" + name + ":");
+	        switch (name) {
+	        case "RoadNode": {
+	            return OSITNNode.create(id, parser);
+	        }
+	        case "RoadLink": {
+	            return OSITNWay.create(id, parser);
+	        }
+	        case "RoadLinkInformation":
+	        case "RoadRouteInformation": {
+	            return OSITNRelation.create(id, parser);
+	        }
+	        case "Road": {
+	            return OsItnMetaData.create(id, parser);
+	        }
+	        }
+	        return null;
+	    }
+	    
+	}
+	
diff --git a/tools/src/main/java/com/graphhopper/tools/routeExtractor/TwoRoadsRouteExtractor.java b/tools/src/main/java/com/graphhopper/tools/routeExtractor/TwoRoadsRouteExtractor.java
index f88ba45b7f..5aab1eb1a1 100644
--- a/tools/src/main/java/com/graphhopper/tools/routeExtractor/TwoRoadsRouteExtractor.java
+++ b/tools/src/main/java/com/graphhopper/tools/routeExtractor/TwoRoadsRouteExtractor.java
@@ -5,6 +5,7 @@
 import java.io.File;
 import java.io.IOException;
 import java.io.PrintWriter;
+import java.util.logging.Logger;
 
 import javax.xml.parsers.ParserConfigurationException;
 import javax.xml.stream.XMLStreamException;
@@ -17,11 +18,13 @@
 import org.xml.sax.SAXException;
 
 import com.graphhopper.reader.OSMElement;
+import com.graphhopper.reader.Relation;
 import com.graphhopper.reader.RoutingElement;
-import com.graphhopper.reader.osgb.itn.OSITNRelation;
+import com.graphhopper.reader.osgb.itn.OSITNElement;
 import com.graphhopper.reader.osgb.itn.OSITNWay;
 
 public class TwoRoadsRouteExtractor extends AbstractProblemRouteExtractor {
+	private final static Logger LOGGER = Logger.getLogger(TwoRoadsRouteExtractor.class.getName());
     protected String workingRoadName;
     protected String workingLinkRoad;
     public TwoRoadsRouteExtractor(String fileOrDirName, String namedRoad, String namedLinkRoad) {
@@ -76,24 +79,27 @@ void processVisitor(final RoutingElement item) {
             if (item.isType(OSMElement.WAY)) {
                 final OSITNWay way = (OSITNWay) item;
                 if (way.hasTag("name", workingRoadName)) {
-                    System.out.println("Way found on " + workingRoadName + " id is " + way.getId());
+                    LOGGER.info("Way found on " + workingRoadName + " id is " + way.getId());
                     fullWayList.add(way.getId());
                 }
             }
             if (item.isType(OSMElement.RELATION)) {
-                final OSITNRelation relation = (OSITNRelation) item;
+                final Relation relation = (Relation) item;
                 // if (!relation.isMetaRelation()
                 // && relation.hasTag(OSITNElement.TAG_KEY_TYPE, "route"))
                 // prepareWaysWithRelationInfo(relation);
-                // System.out.println("\t\tCHECK OUT A RELATION " +
+                // LOGGER.info("\t\tCHECK OUT A RELATION " +
                 // relation.getId());
                 if (relation.isMetaRelation()) {
-                    System.out.println("\t\tADD IT TO my road fids");
+                    LOGGER.info("\t\tADD IT TO my road fids");
                 }
                 if (relation.hasTag("name", workingRoadName)) {
-                    System.out.println("Relation found on " + workingRoadName + " id is " + relation.getId());
-                    prepareNameRelation(relation, fullWayList);
-                    roadFidList.add(relation.getId());
+                	if (relation instanceof OSITNElement) {
+                		OSITNElement element = (OSITNElement)relation;
+	                    LOGGER.info("Relation found on " + workingRoadName + " id is " + element.getId());
+	                    prepareNameRelation(relation, fullWayList);
+	                    roadFidList.add(element.getId());
+                	}
                 }
             }
         }
diff --git a/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java b/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
index 2c005aa64f..5ab2336158 100644
--- a/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
+++ b/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
@@ -46,6 +46,7 @@
 import com.graphhopper.routing.util.AbstractFlagEncoder;
 import com.graphhopper.routing.util.EncoderDecorator;
 import com.graphhopper.routing.util.FlagEncoder;
+import com.graphhopper.routing.util.Weighting;
 import com.graphhopper.routing.util.WeightingMap;
 import com.graphhopper.util.Helper;
 import com.graphhopper.util.InstructionList;
@@ -100,6 +101,7 @@ public GHResponse getGHResponse( HttpServletRequest httpReq, HttpServletResponse
 		String debugString = getParam(httpReq, "debug", "true");
 		String prettyString = getParam(httpReq, "pretty", "true");
 		String avoidancesString = getParam(httpReq, "avoidances", null);
+		String noThroughAccessString = getParam(httpReq, "private", "true");
 
 		GHResponse ghRsp = null;
 		List<GHPoint> infoPoints;
@@ -137,6 +139,12 @@ public GHResponse getGHResponse( HttpServletRequest httpReq, HttpServletResponse
 				        AlgorithmOptions.DIJKSTRA, AlgorithmOptions.DIJKSTRA_BI,
 				        AlgorithmOptions.DIJKSTRA_ONE_TO_MANY);
 				ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg));
+			} else if (null != weighting
+			        && !new CaseInsensitiveStringListValidator().isValid(weighting,
+			                "fastest","shortest" ))
+			{
+				String errMesg = buildErrorMessageString(weighting, "weighting","fastest","shortest");
+				ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg));
 			} else if (!new BooleanValidator().isValid(instructionsString))
 			{
 				String errMesg = buildBooleanErrorMessageString(instructionsString, "instructions");
@@ -165,6 +173,11 @@ public GHResponse getGHResponse( HttpServletRequest httpReq, HttpServletResponse
 				        "Vehicle %s is not a valid vehicle. Valid vehicles are %s", vehicleStr,
 				        supported);
 				ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg));
+			} else if (!new BooleanValidator().isValid(noThroughAccessString)) 
+			{
+				String errMesg = buildBooleanErrorMessageString(noThroughAccessString, "private");
+				ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg));
+			
 			} else if (enableElevation && !hopper.hasElevation())
 			{
 				ghRsp = new GHResponse().addError(new InvalidParameterException(
@@ -234,8 +247,10 @@ public GHResponse getGHResponse( HttpServletRequest httpReq, HttpServletResponse
 			String logStr = httpReq.getQueryString() + " " + infoStr + " " + infoPoints + ", took:"
 			        + took + ", " + algoStr + ", " + weighting + ", " + vehicleStr;
 
-			if (ghRsp.hasErrors())
+			if (ghRsp.hasErrors()) {
 				logger.error(logStr + ", errors:" + ghRsp.getErrors());
+				logger.info("GraphHopperServlet.getGHResponse(ERROR)");
+			}
 			else
 				logger.info(logStr + ", distance: " + ghRsp.getDistance() + ", time:"
 				        + Math.round(ghRsp.getTime() / 60000f) + "min, points:"
@@ -253,6 +268,7 @@ public GHResponse getGHResponse( HttpServletRequest httpReq, HttpServletResponse
 			} else
 			{
 				String type = getParam(httpReq, "type", "json");
+				System.err.println("TYPE:" + type) ;
 				if (!"json".equalsIgnoreCase(type)
 				        || (!"jsonp".equalsIgnoreCase(type) && jsonpAllowed))
 				{
@@ -261,6 +277,8 @@ public GHResponse getGHResponse( HttpServletRequest httpReq, HttpServletResponse
 					errorMessage += jsonpAllowed ? "JSON, GPX or JSONP." : "GPX or JSON.";
 					ghRsp.addError(new InvalidParameterException(errorMessage));
 				}
+				logger.info("GraphHopperServlet.getGHResponse("+ enableInstructions
+						+ ")");
 				Map<String, Object> map = createJson(ghRsp, calcPoints, pointsEncoded,
 				        enableElevation, enableInstructions);
 				Object infoMap = map.get("info");
diff --git a/web/src/test/java/com/graphhopper/http/GraphHopperServletTest.java b/web/src/test/java/com/graphhopper/http/GraphHopperServletTest.java
index 6d06064440..14b45f2c1d 100644
--- a/web/src/test/java/com/graphhopper/http/GraphHopperServletTest.java
+++ b/web/src/test/java/com/graphhopper/http/GraphHopperServletTest.java
@@ -2,7 +2,6 @@
 
 import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;
 import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertFalse;
 import static org.mockito.Matchers.any;
 import static org.mockito.Matchers.anyString;
 import static org.mockito.Mockito.mock;
@@ -12,7 +11,9 @@
 
 import java.io.IOException;
 import java.io.PrintWriter;
+import java.util.ArrayList;
 import java.util.Arrays;
+import java.util.Collections;
 import java.util.HashMap;
 import java.util.Iterator;
 import java.util.List;
@@ -25,6 +26,8 @@
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
+import org.mockito.ArgumentCaptor;
+import org.mockito.Matchers;
 import org.mockito.Mock;
 import org.mockito.MockitoAnnotations;
 
@@ -41,597 +44,699 @@
 import com.graphhopper.routing.util.EncoderDecorator;
 import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.storage.GraphStorage;
+import com.graphhopper.util.InstructionList;
+import com.graphhopper.util.PointList;
+import com.graphhopper.util.shapes.BBox;
 
 public class GraphHopperServletTest
 {
 
-    private Injector injector;
+	private static final String[] BOOLEAN_PARAM_VALS = { "true", "false" };
 
-    @Mock
-    HttpServletRequest httpServletRequest;
+	private Injector injector;
 
-    @Mock
-    HttpServletResponse httpServletResponse;
+	@Mock
+	HttpServletRequest httpServletRequest;
 
-    Map<String, String[]> allParameters;
+	@Mock
+	HttpServletResponse httpServletResponse;
 
-    GraphHopperServlet graphHopperServlet;
+	Map<String, String[]> allParameters;
 
-    GHResponse value = new GHResponse();
+	GraphHopperServlet graphHopperServlet;
 
-    @Mock
-    private GraphHopper graphHopper;
+	@Mock
+	GHResponse response;
 
-    @Mock
-    private EncodingManager encodingManager;
+	@Mock
+	private GraphHopper graphHopper;
 
-    @Mock
-    private AbstractFlagEncoder flagEncoder;
-
-    @Mock
-    private GraphStorage graphStorage;
-
-    @Mock
-    private List<EncoderDecorator> encoderDecorators;
-
-    @Mock
-    private Iterator<EncoderDecorator> iterator;
-
-    @Mock
-    private AbstractAvoidanceDecorator abstractAvoidanceDecorator;
-
-    private final String[] POINTS = { "50.728198,-3.534516", "50.726807,-3.530156" };
-    private final String UNPARSABLE_POINT = "50A.45";
-
-    private final String[] LOCALES = { "bg", "ca", "cz", "de_DE", "el", "en_US", "es", "fa", "fil",
-            "fi", "fr", "gl", "he", "hu_HU", "it", "ja", "ne", "nl", "pl_PL", "pt_BR", "pt_PT",
-            "ro", "ru", "si", "sk", "sv_SE", "tr", "uk", "vi_VI", "zh_CN", "en_GB" };
-    private final String WRONG_LOCALE = "kl_KL";
-
-    private final String[] ALGORITHMS = { AlgorithmOptions.ASTAR, AlgorithmOptions.ASTAR_BI,
-            AlgorithmOptions.DIJKSTRA, AlgorithmOptions.DIJKSTRA_BI,
-            AlgorithmOptions.DIJKSTRA_ONE_TO_MANY };
-    private final String WRONG_ALGORITHM = "dekker";
-
-    private final String[] VEHICLES = { "car", "bike", "foot" };
-    private final String WRONG_VEHICLE = "flying_carpet";
-
-    private final String[] INSTRUCTIONS = { "false" }, POINTS_ENCODED = { "true", "false" },
-            DEBUG = { "true", "false" }, PRETTY = { "true", "false" }, CALC_POINTS = { "true",
-                    "false" };
-    private final String WRONG_INSTRUCTION = "uncertain";
-    private final String WRONG_POINTS_ENCODED = "uncertain";
-    private final String WRONG_DEBUG = "uncertain";
-    private final String WRONG_PRETTY = "uncertain";
-    private final String WRONG_CALC_POINTS = "uncertain";
-
-    private final String[] WEIGHTINGS = { "fastest", "shortest" };
-    private final String WRONG_WEIGHTING = "slowest";
-
-    private final String[] AVOIDANCES = { "aroad", "boulders", "cliff", "inlandwater", "marsh",
-            "quarryorpit", "scree", "rock", "mud", "sand", "shingle", "spoil", "tidalwater" };
-    private final String WRONG_AVOIDANCE = "zxcv";
-
-    private final String[] TYPES = { "json" };
-    private final String WRONG_TYPE = "pdf";
-
-    @Before
-    public void setUp() throws Exception
-    {
-        MockitoAnnotations.initMocks(this);
-        injector = Guice.createInjector(new AbstractModule()
-        {
-            @Override
-            protected void configure()
-            {
-                bind(GraphHopper.class).toInstance(graphHopper);
-                bind(Boolean.class).annotatedWith(Names.named("internalErrorsAllowed")).toInstance(
-                        false);
-                bind(Boolean.class).annotatedWith(Names.named("jsonpAllowed")).toInstance(false);
-            }
-        });
-
-        graphHopperServlet = injector.getInstance(GraphHopperServlet.class);
-        when(httpServletResponse.getWriter()).thenReturn(mock(PrintWriter.class));
-        allParameters = new HashMap<>();
-        when(graphHopper.getEncodingManager()).thenReturn(encodingManager);
-        when(graphHopper.hasElevation()).thenReturn(false);
-
-        when(encodingManager.supports(anyString())).thenReturn(true);
-        when(encodingManager.getEncoder(anyString())).thenReturn(flagEncoder);
-        when(flagEncoder.toString()).thenReturn("unknown");
-
-        when(graphHopper.route(any(GHRequest.class))).thenReturn(value);
-
-    }
-
-    @After
-    public void tearDown() throws Exception
-    {
-        injector = null;
-    }
-
-    private String buildErrorMessageString( String paramValue, String paramName,
-            List<String> validValues )
-    {
-        StringBuilder errMesg = new StringBuilder(paramValue)
-                .append(" is not a valid value for parameter ").append(paramName)
-                .append(". Valid values are ");
-        for (int i = 0; i < validValues.size(); i++)
-        {
-            String validStr = validValues.get(i);
-            if (i == validValues.size() - 1)
-            {
-                errMesg.append(" or ");
-            }
-            errMesg.append(validStr);
-            if (i < validValues.size() - 2)
-            {
-                errMesg.append(", ");
-            }
-        }
-        return errMesg.toString();
-    }
-
-    private String buildErrorMessageString( String paramValue, String paramName,
-            String... validValues )
+	@Mock
+	private EncodingManager encodingManager;
+
+	@Mock
+	private AbstractFlagEncoder flagEncoder;
+
+	@Mock
+	private GraphStorage graphStorage;
+
+	@Mock
+	private List<EncoderDecorator> encoderDecorators;
+
+	@Mock
+	private Iterator<EncoderDecorator> iterator;
+
+	@Mock
+	private AbstractAvoidanceDecorator abstractAvoidanceDecorator;
+
+	@Mock
+	private PointList pointList;
+
+	private final String[] POINTS = { "50.728198,-3.534516", "50.726807,-3.530156" };
+	private final String UNPARSABLE_POINT = "50A.45";
+
+	private final String[] LOCALES = { "bg", "ca", "cz", "de_DE", "el", "en_US", "es", "fa", "fil",
+	        "fi", "fr", "gl", "he", "hu_HU", "it", "ja", "ne", "nl", "pl_PL", "pt_BR", "pt_PT",
+	        "ro", "ru", "si", "sk", "sv_SE", "tr", "uk", "vi_VI", "zh_CN", "en_GB" };
+	private final String WRONG_LOCALE = "kl_KL";
+
+	private final String[] ALGORITHMS = { AlgorithmOptions.ASTAR, AlgorithmOptions.ASTAR_BI,
+	        AlgorithmOptions.DIJKSTRA, AlgorithmOptions.DIJKSTRA_BI,
+	        AlgorithmOptions.DIJKSTRA_ONE_TO_MANY };
+	private final String WRONG_ALGORITHM = "dekker";
+
+	private final String[] VEHICLES = { "car", "bike", "foot" };
+	private final String WRONG_VEHICLE = "flying_carpet";
+
+	private final String[] INSTRUCTIONS = BOOLEAN_PARAM_VALS;
+	private final String[] POINTS_ENCODED = BOOLEAN_PARAM_VALS;
+	private final String[] DEBUG = BOOLEAN_PARAM_VALS;
+	private final String[] PRETTY = BOOLEAN_PARAM_VALS;
+	private final String[] CALC_POINTS = BOOLEAN_PARAM_VALS;
+
+	private final String WRONG_INSTRUCTION = "uncertain";
+	private final String WRONG_POINTS_ENCODED = "uncertain";
+	private final String WRONG_DEBUG = "uncertain";
+	private final String WRONG_PRETTY = "uncertain";
+	private final String WRONG_CALC_POINTS = "uncertain";
+
+	private final String[] WEIGHTINGS = { "fastest", "shortest" };
+	private final String WRONG_WEIGHTING = "slowest";
+
+	private final String[] AVOIDANCES = { "aroad", "boulders", "cliff", "inlandwater", "marsh",
+	        "quarryorpit", "scree", "rock", "mud", "sand", "shingle", "spoil", "tidalwater" };
+	private final String WRONG_AVOIDANCE = "zxcv";
+
+	private final String[] TYPES = { "json" };
+	private final String WRONG_TYPE = "pdf";
+
+	@Before
+	public void setUp() throws Exception
+	{
+		MockitoAnnotations.initMocks(this);
+		injector = Guice.createInjector(new AbstractModule()
+		{
+			@Override
+			protected void configure()
+			{
+				bind(GraphHopper.class).toInstance(graphHopper);
+				bind(Boolean.class).annotatedWith(Names.named("internalErrorsAllowed")).toInstance(
+				        false);
+				bind(Boolean.class).annotatedWith(Names.named("jsonpAllowed")).toInstance(false);
+			}
+		});
+
+		graphHopperServlet = injector.getInstance(GraphHopperServlet.class);
+		when(httpServletResponse.getWriter()).thenReturn(mock(PrintWriter.class));
+		allParameters = new HashMap<>();
+		when(graphHopper.getEncodingManager()).thenReturn(encodingManager);
+		when(graphHopper.hasElevation()).thenReturn(false);
+
+		when(encodingManager.supports(anyString())).thenReturn(true);
+		when(encodingManager.getEncoder(anyString())).thenReturn(flagEncoder);
+		when(flagEncoder.toString()).thenReturn("unknown");
+
+		when(graphHopper.route(any(GHRequest.class))).thenReturn(response);
+		when(graphHopper.getGraph()).thenReturn(graphStorage);
+		BBox bbox = new BBox(0, 0, 10, 10);
+		when(graphStorage.getBounds()).thenReturn(bbox);
+		when(response.getPoints()).thenReturn(pointList);
+		when(pointList.getSize()).thenReturn(4);
+	}
+
+	@After
+	public void tearDown() throws Exception
+	{
+		injector = null;
+	}
+
+	private String buildErrorMessageString( String paramValue, String paramName,
+	        List<String> validValues )
+	{
+		StringBuilder errMesg = new StringBuilder(paramValue)
+		        .append(" is not a valid value for parameter ").append(paramName)
+		        .append(". Valid values are ");
+		for (int i = 0; i < validValues.size(); i++)
+		{
+			String validStr = validValues.get(i);
+			if (i == validValues.size() - 1)
+			{
+				errMesg.append(" or ");
+			}
+			errMesg.append(validStr);
+			if (i < validValues.size() - 2)
+			{
+				errMesg.append(", ");
+			}
+		}
+		return errMesg.toString();
+	}
+
+	private String buildErrorMessageString( String paramValue, String paramName,
+	        String... validValues )
+	{
+		return buildErrorMessageString(paramValue, paramName, Arrays.asList(validValues));
+	}
+
+	@Test
+	public void statusCodeForCorrectParameters() throws ServletException, IOException
+	{
+		allParameters.put("point", POINTS);
+		allParameters.put("vehicle", new String[] { VEHICLES[0] });
+		allParameters.put("locale", new String[] { LOCALES[0] });
+		allParameters.put("instructions", new String[] { "false" });
+		when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+		expectResponseBBox();
+		graphHopperServlet.doGet(httpServletRequest, httpServletResponse);
+		verify(httpServletResponse, never()).setStatus(SC_BAD_REQUEST);
+	}
+
+	@Test
+	public void testGetGHResponseWithValidPoints() throws IOException, MissingParameterException,
+	        NoSuchParameterException, InvalidParameterException
+	{
+		allParameters.put("point", POINTS);
+		allParameters.put("vehicle", new String[] { VEHICLES[0] });
+		allParameters.put("locale", new String[] { LOCALES[0] });
+		allParameters.put("instructions", new String[] { "false" });
+		when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+		expectResponseBBox();
+
+		graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse);
+		verifyNoError();
+	}
+
+	@Test
+	public void testGetGHResponseWithUnparsablePoint() throws IOException,
+	        MissingParameterException, NoSuchParameterException, InvalidParameterException
+	{
+		allParameters.put("point", new String[] { UNPARSABLE_POINT });
+		allParameters.put("vehicle", new String[] { VEHICLES[0] });
+		allParameters.put("locale", new String[] { LOCALES[0] });
+		when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+
+		GHResponse ghResponse = graphHopperServlet.getGHResponse(httpServletRequest,
+		        httpServletResponse);
+		assertEquals(
+		        "Point "
+		                + UNPARSABLE_POINT
+		                + " is not a valid point. Point must be a comma separated coordinate in WGS84 projection.",
+		        ghResponse.getErrors().get(0).getMessage());
+	}
+
+	@Test
+	public void testGetGHResponseWithCorrectLocales() throws IOException,
+	        MissingParameterException, NoSuchParameterException, InvalidParameterException
+	{
+		allParameters.put("point", POINTS);
+		allParameters.put("vehicle", new String[] { VEHICLES[0] });
+		allParameters.put("instructions", new String[] { "false" });
+		for (String locale : LOCALES)
+		{
+			allParameters.put("locale", new String[] { locale });
+			when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+			expectResponseBBox();
+
+			graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse);
+			verifyNoError();
+		}
+	}
+
+	@Test
+	public void testGetGHResponseWithWrongLocale() throws IOException, MissingParameterException,
+	        NoSuchParameterException, InvalidParameterException
+	{
+		allParameters.put("point", POINTS);
+		allParameters.put("vehicle", new String[] { VEHICLES[0] });
+		allParameters.put("locale", new String[] { WRONG_LOCALE });
+		allParameters.put("instructions", new String[] { "false" });
+		when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+
+		GHResponse ghResponse = graphHopperServlet.getGHResponse(httpServletRequest,
+		        httpServletResponse);
+		assertEquals(buildErrorMessageString(WRONG_LOCALE, "locale", LOCALES), ghResponse
+		        .getErrors().get(0).getMessage());
+	}
+
+	@Test
+	public void testGetGHResponseWithCorrectAlgorithms() throws IOException,
+	        MissingParameterException, NoSuchParameterException, InvalidParameterException
+	{
+		allParameters.put("point", POINTS);
+		allParameters.put("vehicle", new String[] { VEHICLES[0] });
+		allParameters.put("locale", new String[] { LOCALES[0] });
+		allParameters.put("instructions", new String[] { "false" });
+
+		for (String algorithm : ALGORITHMS)
+		{
+			allParameters.put("algorithm", new String[] { algorithm });
+			when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+			expectResponseBBox();
+			graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse);
+			verifyNoError();
+		}
+	}
+
+	@Test
+	public void testGetGHResponseWithWrongAlgorithm() throws IOException,
+	        MissingParameterException, NoSuchParameterException, InvalidParameterException
+	{
+		allParameters.put("point", POINTS);
+		allParameters.put("vehicle", new String[] { VEHICLES[0] });
+		allParameters.put("locale", new String[] { LOCALES[0] });
+
+		allParameters.put("algorithm", new String[] { WRONG_ALGORITHM });
+		when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+
+		GHResponse ghResponse = graphHopperServlet.getGHResponse(httpServletRequest,
+		        httpServletResponse);
+		assertEquals(buildErrorMessageString(WRONG_ALGORITHM, "algorithm", ALGORITHMS), ghResponse
+		        .getErrors().get(0).getMessage());
+	}
+
+	@Test
+	public void testGetGHResponseWithCorrectTypes() throws IOException, MissingParameterException,
+	        NoSuchParameterException, InvalidParameterException, ServletException
+	{
+		allParameters.put("point", POINTS);
+		allParameters.put("vehicle", new String[] { VEHICLES[0] });
+		allParameters.put("locale", new String[] { LOCALES[0] });
+		allParameters.put("instructions", new String[] { "false" });
+
+		for (String type : TYPES)
+		{
+			allParameters.put("type", new String[] { type });
+			when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+			expectResponseBBox();
+			graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse);
+			verifyNoError();
+
+		}
+	}
+
+	@Test
+	public void testGetGHResponseWithWrongType() throws IOException, MissingParameterException,
+	        NoSuchParameterException, InvalidParameterException, ServletException
+	{
+		allParameters.put("point", POINTS);
+		allParameters.put("vehicle", new String[] { VEHICLES[0] });
+		allParameters.put("locale", new String[] { LOCALES[0] });
+
+		allParameters.put("type", new String[] { WRONG_TYPE });
+		when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+		expectError();
+		graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse);
+		verifyError(WRONG_TYPE
+		        + " is not a valid value for parameter type. Valid values are GPX or JSON.");
+	}
+
+	private void verifyError( String expectedError)
     {
-        return buildErrorMessageString(paramValue, paramName, Arrays.asList(validValues));
+		ArgumentCaptor<Throwable> error = ArgumentCaptor.forClass(Throwable.class);
+	    verify(response).addError(error.capture());
+	    assertEquals(expectedError, error.getAllValues().get(0).getMessage());
     }
 
-    @Test
-    public void statusCodeForCorrectParameters() throws ServletException, IOException
+	@Test
+	public void testGetGHResponseWithCorrectVehicles() throws IOException,
+	        MissingParameterException, NoSuchParameterException, InvalidParameterException
+	{
+		allParameters.put("point", POINTS);
+		allParameters.put("vehicle", new String[] { VEHICLES[0] });
+		allParameters.put("locale", new String[] { LOCALES[0] });
+		allParameters.put("instructions", new String[] { "false" });
+		when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+		expectResponseBBox();
+
+		graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse);
+		verifyNoError();
+	}
+
+	@Test
+	public void testGetGHResponseWithWrongVehicle() throws IOException, MissingParameterException,
+	        NoSuchParameterException, InvalidParameterException
+	{
+		allParameters.put("point", POINTS);
+		allParameters.put("vehicle", new String[] { WRONG_VEHICLE });
+		allParameters.put("locale", new String[] { LOCALES[0] });
+		allParameters.put("instructions", new String[] { "false" });
+		when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+
+		when(graphHopper.getGraph()).thenReturn(graphStorage);
+		when(graphStorage.getEncodingManager()).thenReturn(encodingManager);
+		when(encodingManager.supports(anyString())).thenReturn(false);
+		when(encodingManager.toString()).thenReturn("*supported vehicles*");
+
+		GHResponse ghResponse = graphHopperServlet.getGHResponse(httpServletRequest,
+		        httpServletResponse);
+
+		assertEquals(
+		        "Vehicle flying_carpet is not a valid vehicle. Valid vehicles are *supported vehicles*",
+		        ghResponse.getErrors().get(0).getMessage());
+	}
+
+	@Test
+	public void testGetGHResponseWithCorrectInstructions() throws MissingParameterException,
+	        NoSuchParameterException, InvalidParameterException, IOException
+	{
+		allParameters.put("point", POINTS);
+		allParameters.put("vehicle", new String[] { VEHICLES[0] });
+		allParameters.put("locale", new String[] { LOCALES[0] });
+
+		for (String instruction : INSTRUCTIONS)
+		{
+			System.err.println("INSTRUCTIONS:" + instruction);
+			allParameters.put("instructions", new String[] { instruction });
+			when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+			expectResponseBBox();
+			expectResponseInstructions();
+			graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse);
+			verifyNoError();
+		}
+	}
+
+	@Test
+	public void testGetGHResponseWithIncorrectInstruction() throws MissingParameterException,
+	        NoSuchParameterException, InvalidParameterException, IOException
+	{
+		allParameters.put("point", POINTS);
+		allParameters.put("vehicle", new String[] { VEHICLES[0] });
+		allParameters.put("locale", new String[] { LOCALES[0] });
+
+		allParameters.put("instructions", new String[] { WRONG_INSTRUCTION });
+		when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+
+		GHResponse ghResponse = graphHopperServlet.getGHResponse(httpServletRequest,
+		        httpServletResponse);
+		assertEquals(
+		        WRONG_INSTRUCTION
+		                + " is not a valid value for parameter instructions. Valid values are true or false",
+		        ghResponse.getErrors().get(0).getMessage());
+	}
+
+	@Test
+	public void testGetGHResponseWithCorrectPointsEncoded() throws MissingParameterException,
+	        NoSuchParameterException, InvalidParameterException, IOException
+	{
+		allParameters.put("point", POINTS);
+		allParameters.put("vehicle", new String[] { VEHICLES[0] });
+		allParameters.put("locale", new String[] { LOCALES[0] });
+		allParameters.put("instructions", new String[] { "false" });
+
+		for (String point_encoded : POINTS_ENCODED)
+		{
+			allParameters.put("points_encoded", new String[] { point_encoded });
+			when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+			expectResponseBBox();
+
+			graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse);
+			verifyNoError();
+		}
+	}
+
+	@Test
+	public void testGetGHResponseWithIncorrectPointsEncoded() throws MissingParameterException,
+	        NoSuchParameterException, InvalidParameterException, IOException
+	{
+		allParameters.put("point", POINTS);
+		allParameters.put("vehicle", new String[] { VEHICLES[0] });
+		allParameters.put("locale", new String[] { LOCALES[0] });
+
+		allParameters.put("points_encoded", new String[] { WRONG_POINTS_ENCODED });
+		when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+
+		GHResponse ghResponse = graphHopperServlet.getGHResponse(httpServletRequest,
+		        httpServletResponse);
+		assertEquals(
+		        buildErrorMessageString(WRONG_POINTS_ENCODED, "points_encoded", POINTS_ENCODED),
+		        ghResponse.getErrors().get(0).getMessage());
+	}
+
+	@Test
+	public void testGetGHResponseWithCorrectDebug() throws MissingParameterException,
+	        NoSuchParameterException, InvalidParameterException, IOException
+	{
+		allParameters.put("point", POINTS);
+		allParameters.put("vehicle", new String[] { VEHICLES[0] });
+		allParameters.put("locale", new String[] { LOCALES[0] });
+		allParameters.put("instructions", new String[] { "false" });
+
+		for (String debug : DEBUG)
+		{
+			allParameters.put("debug", new String[] { debug });
+			when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+			expectResponseBBox();
+
+			graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse);
+			verifyNoError();
+		}
+	}
+
+	@Test
+	public void testGetGHResponseWithIncorrectDebug() throws MissingParameterException,
+	        NoSuchParameterException, InvalidParameterException, IOException
+	{
+		allParameters.put("point", POINTS);
+		allParameters.put("vehicle", new String[] { VEHICLES[0] });
+		allParameters.put("locale", new String[] { LOCALES[0] });
+
+		allParameters.put("debug", new String[] { WRONG_DEBUG });
+		when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+
+		GHResponse ghResponse = graphHopperServlet.getGHResponse(httpServletRequest,
+		        httpServletResponse);
+		assertEquals(buildErrorMessageString(WRONG_DEBUG, "debug", DEBUG), ghResponse.getErrors()
+		        .get(0).getMessage());
+	}
+
+	@Test
+	public void testGetGHResponseWithCorrectPretty() throws MissingParameterException,
+	        NoSuchParameterException, InvalidParameterException, IOException
+	{
+		allParameters.put("point", POINTS);
+		allParameters.put("vehicle", new String[] { VEHICLES[0] });
+		allParameters.put("locale", new String[] { LOCALES[0] });
+		allParameters.put("instructions", new String[] { "false" });
+
+		for (String pretty : PRETTY)
+		{
+			allParameters.put("pretty", new String[] { pretty });
+			when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+			expectResponseBBox();
+			graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse);
+			verifyNoError();
+		}
+	}
+
+	@Test
+	public void testGetGHResponseWithIncorrectPretty() throws MissingParameterException,
+	        NoSuchParameterException, InvalidParameterException, IOException
+	{
+		allParameters.put("point", POINTS);
+		allParameters.put("vehicle", new String[] { VEHICLES[0] });
+		allParameters.put("locale", new String[] { LOCALES[0] });
+
+		allParameters.put("pretty", new String[] { WRONG_PRETTY });
+		when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+
+		GHResponse ghResponse = graphHopperServlet.getGHResponse(httpServletRequest,
+		        httpServletResponse);
+		assertEquals(buildErrorMessageString(WRONG_PRETTY, "pretty", PRETTY), ghResponse
+		        .getErrors().get(0).getMessage());
+	}
+
+	@Test
+	public void testGetGHResponseWithCorrectPrivate() throws MissingParameterException,
+	        NoSuchParameterException, InvalidParameterException, IOException
+	{
+		allParameters.put("point", POINTS);
+		allParameters.put("vehicle", new String[] { VEHICLES[0] });
+		allParameters.put("locale", new String[] { LOCALES[0] });
+		allParameters.put("instructions", new String[] { "false" });
+
+		for (String booleanParam : BOOLEAN_PARAM_VALS)
+		{
+			allParameters.put("private", new String[] { booleanParam });
+			when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+			expectResponseBBox();
+
+			graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse);
+			verifyNoError();
+		}
+	}
+
+	@Test
+	public void testGetGHResponseWithInvalidPrivate() throws MissingParameterException,
+	        NoSuchParameterException, InvalidParameterException, IOException
+	{
+		allParameters.put("point", POINTS);
+		allParameters.put("vehicle", new String[] { VEHICLES[0] });
+		allParameters.put("locale", new String[] { LOCALES[0] });
+		allParameters.put("instructions", new String[] { "false" });
+
+		allParameters.put("private", new String[] { "tru" });
+		when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+
+		GHResponse ghResponse = graphHopperServlet.getGHResponse(httpServletRequest,
+		        httpServletResponse);
+		assertEquals(buildErrorMessageString("tru", "private", BOOLEAN_PARAM_VALS), ghResponse
+		        .getErrors().get(0).getMessage());
+	}
+
+	@Test
+	public void testGetGHResponseWithCorrectCalcPoints() throws MissingParameterException,
+	        NoSuchParameterException, InvalidParameterException, IOException
+	{
+		allParameters.put("point", POINTS);
+		allParameters.put("vehicle", new String[] { VEHICLES[0] });
+		allParameters.put("locale", new String[] { LOCALES[0] });
+		allParameters.put("instructions", new String[] { "false" });
+
+		for (String calcPoint : CALC_POINTS)
+		{
+			allParameters.put("calc_points", new String[] { calcPoint });
+			when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+			expectResponseBBox();
+
+			graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse);
+			verifyNoError();
+		}
+	}
+
+	@Test
+	public void testGetGHResponseWithIncorrectCalcPoints() throws MissingParameterException,
+	        NoSuchParameterException, InvalidParameterException, IOException
+	{
+		allParameters.put("point", POINTS);
+		allParameters.put("vehicle", new String[] { VEHICLES[0] });
+		allParameters.put("locale", new String[] { LOCALES[0] });
+		allParameters.put("instructions", new String[] { "false" });
+
+		allParameters.put("calc_points", new String[] { WRONG_CALC_POINTS });
+		when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+
+		GHResponse ghResponse = graphHopperServlet.getGHResponse(httpServletRequest,
+		        httpServletResponse);
+		assertEquals(buildErrorMessageString(WRONG_CALC_POINTS, "calc_points", CALC_POINTS),
+		        ghResponse.getErrors().get(0).getMessage());
+	}
+
+	@Test
+	public void testGetGHResponseWithCorrectWeighting() throws MissingParameterException,
+	        NoSuchParameterException, InvalidParameterException, IOException
+	{
+		allParameters.put("point", POINTS);
+		allParameters.put("vehicle", new String[] { VEHICLES[0] });
+		allParameters.put("locale", new String[] { LOCALES[0] });
+		allParameters.put("instructions", new String[] { "false" });
+
+		for (String weighting : WEIGHTINGS)
+		{
+			allParameters.put("weighting", new String[] { weighting });
+			when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+			expectResponseBBox();
+
+			graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse);
+			verifyNoError();
+		}
+	}
+
+	@Test
+	public void testGetGHResponseWithIncorrectWeighting() throws MissingParameterException,
+	        NoSuchParameterException, InvalidParameterException, IOException
+	{
+		allParameters.put("point", POINTS);
+		allParameters.put("vehicle", new String[] { VEHICLES[0] });
+		allParameters.put("locale", new String[] { LOCALES[0] });
+		allParameters.put("instructions", new String[] { "false" });
+
+		allParameters.put("weighting", new String[] { WRONG_WEIGHTING });
+
+		when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+
+		GHResponse ghResponse = graphHopperServlet.getGHResponse(httpServletRequest,
+		        httpServletResponse);
+
+		assertEquals(1, ghResponse.getErrors().size());
+		// TODO Generate appropriate error message in GraphhopperServletClass
+		// assertEquals(buildErrorMessageString(WRONG_WEIGHTING, "calc_points", WEIGHTINGS),
+		// ghResponse.getErrors().get(0).getMessage());
+
+	}
+
+	@Test
+	public void testGetGHResponseWithCorrectAvoidances() throws MissingParameterException,
+	        NoSuchParameterException, InvalidParameterException, IOException
+	{
+		allParameters.put("point", POINTS);
+		allParameters.put("vehicle", new String[] { VEHICLES[0] });
+		allParameters.put("locale", new String[] { LOCALES[0] });
+		allParameters.put("instructions", new String[] { "false" });
+
+		for (String avoidances : AVOIDANCES)
+		{
+			allParameters.put("avoidances", new String[] { avoidances });
+			when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+
+			when(flagEncoder.getEncoderDecorators()).thenReturn(encoderDecorators);
+			when(encoderDecorators.iterator()).thenReturn(iterator);
+			when(iterator.hasNext()).thenReturn(true, false);
+			when(iterator.next()).thenReturn(abstractAvoidanceDecorator);
+			when(abstractAvoidanceDecorator.getEdgeAttributesOfInterestNames()).thenReturn(
+			        AVOIDANCES);
+			expectResponseBBox();
+
+			graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse);
+			verifyNoError();
+		}
+	}
+
+	@Test
+	public void testGetGHResponseWithIncorrectAvoidances() throws MissingParameterException,
+	        NoSuchParameterException, InvalidParameterException, IOException
+	{
+		allParameters.put("point", POINTS);
+		allParameters.put("vehicle", new String[] { VEHICLES[0] });
+		allParameters.put("locale", new String[] { LOCALES[0] });
+
+		allParameters.put("avoidances", new String[] { WRONG_AVOIDANCE });
+		when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
+
+		when(flagEncoder.getEncoderDecorators()).thenReturn(encoderDecorators);
+		when(encoderDecorators.iterator()).thenReturn(iterator);
+		when(iterator.hasNext()).thenReturn(true, false);
+		when(iterator.next()).thenReturn(abstractAvoidanceDecorator);
+		when(abstractAvoidanceDecorator.getEdgeAttributesOfInterestNames()).thenReturn(AVOIDANCES);
+
+		GHResponse ghResponse = graphHopperServlet.getGHResponse(httpServletRequest,
+		        httpServletResponse);
+		assertEquals(buildErrorMessageString(WRONG_AVOIDANCE, "avoidances", AVOIDANCES), ghResponse
+		        .getErrors().get(0).getMessage());
+	}
+
+	private void expectResponseBBox()
+	{
+		BBox bbox = new BBox(0, 0, 10, 10);
+		when(response.calcRouteBBox((BBox) Matchers.any())).thenReturn(bbox);
+	}
+
+	private void expectResponseInstructions()
+	{
+		InstructionList instructions = new InstructionList(null);
+		when(response.getInstructions()).thenReturn(instructions);
+	}
+	
+	private void expectError()
     {
-        allParameters.put("point", POINTS);
-        allParameters.put("vehicle", new String[] { VEHICLES[0] });
-        allParameters.put("locale", new String[] { LOCALES[0] });
-        allParameters.put("instructions", new String[] { "false" });
-        when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
-
-        graphHopperServlet.doGet(httpServletRequest, httpServletResponse);
-        verify(httpServletResponse, never()).setStatus(SC_BAD_REQUEST);
+	    when(response.hasErrors()).thenReturn(true);
+	    List<Throwable> errors = new ArrayList<Throwable>();
+	    errors.add(new Throwable("test error"));
+		when(response.getErrors()).thenReturn(errors );
     }
 
-    @Test
-    public void testGetGHResponseWithValidPoints() throws IOException, MissingParameterException,
-            NoSuchParameterException, InvalidParameterException
-    {
-        allParameters.put("point", POINTS);
-        allParameters.put("vehicle", new String[] { VEHICLES[0] });
-        allParameters.put("locale", new String[] { LOCALES[0] });
-        allParameters.put("instructions", new String[] { "false" });
-        when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
-
-        assertFalse(graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse)
-                .hasErrors());
-    }
-
-    @Test
-    public void testGetGHResponseWithUnparsablePoint() throws IOException,
-            MissingParameterException, NoSuchParameterException, InvalidParameterException
-    {
-        allParameters.put("point", new String[] { UNPARSABLE_POINT });
-        allParameters.put("vehicle", new String[] { VEHICLES[0] });
-        allParameters.put("locale", new String[] { LOCALES[0] });
-        when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
-
-        assertEquals(
-                "Point "
-                        + UNPARSABLE_POINT
-                        + " is not a valid point. Point must be a comma separated coordinate in WGS84 projection.",
-                graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse)
-                        .getErrors().get(0).getMessage());
-    }
-
-    @Test
-    public void testGetGHResponseWithCorrectLocales() throws IOException,
-            MissingParameterException, NoSuchParameterException, InvalidParameterException
-    {
-        allParameters.put("point", POINTS);
-        allParameters.put("vehicle", new String[] { VEHICLES[0] });
-        allParameters.put("instructions", new String[] { "false" });
-        for (String locale : LOCALES)
-        {
-            allParameters.put("locale", new String[] { locale });
-            when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
-
-            assertFalse(graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse)
-                    .hasErrors());
-        }
-    }
-
-    @Test
-    public void testGetGHResponseWithWrongLocale() throws IOException, MissingParameterException,
-            NoSuchParameterException, InvalidParameterException
-    {
-        allParameters.put("point", POINTS);
-        allParameters.put("vehicle", new String[] { VEHICLES[0] });
-        allParameters.put("locale", new String[] { WRONG_LOCALE });
-        allParameters.put("instructions", new String[] { "false" });
-        when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
-
-        assertEquals(buildErrorMessageString(WRONG_LOCALE, "locale", LOCALES), graphHopperServlet
-                .getGHResponse(httpServletRequest, httpServletResponse).getErrors().get(0)
-                .getMessage());
-    }
-
-    @Test
-    public void testGetGHResponseWithCorrectAlgorithms() throws IOException,
-            MissingParameterException, NoSuchParameterException, InvalidParameterException
-    {
-        allParameters.put("point", POINTS);
-        allParameters.put("vehicle", new String[] { VEHICLES[0] });
-        allParameters.put("locale", new String[] { LOCALES[0] });
-        allParameters.put("instructions", new String[] { "false" });
-
-        for (String algorithm : ALGORITHMS)
-        {
-            allParameters.put("algorithm", new String[] { algorithm });
-            when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
-
-            assertFalse(graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse)
-                    .hasErrors());
-        }
-    }
-
-    @Test
-    public void testGetGHResponseWithWrongAlgorithm() throws IOException,
-            MissingParameterException, NoSuchParameterException, InvalidParameterException
-    {
-        allParameters.put("point", POINTS);
-        allParameters.put("vehicle", new String[] { VEHICLES[0] });
-        allParameters.put("locale", new String[] { LOCALES[0] });
-
-        allParameters.put("algorithm", new String[] { WRONG_ALGORITHM });
-        when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
-
-        assertEquals(buildErrorMessageString(WRONG_ALGORITHM, "algorithm", ALGORITHMS),
-                graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse)
-                        .getErrors().get(0).getMessage());
-    }
-
-    @Test
-    public void testGetGHResponseWithCorrectTypes() throws IOException, MissingParameterException,
-            NoSuchParameterException, InvalidParameterException, ServletException
-    {
-        allParameters.put("point", POINTS);
-        allParameters.put("vehicle", new String[] { VEHICLES[0] });
-        allParameters.put("locale", new String[] { LOCALES[0] });
-        allParameters.put("instructions", new String[] { "false" });
-
-        for (String type : TYPES)
-        {
-            allParameters.put("type", new String[] { type });
-            when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
-
-            assertFalse(graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse)
-                    .hasErrors());
-
-        }
-    }
-
-    @Test
-    public void testGetGHResponseWithWrongType() throws IOException, MissingParameterException,
-            NoSuchParameterException, InvalidParameterException, ServletException
-    {
-        allParameters.put("point", POINTS);
-        allParameters.put("vehicle", new String[] { VEHICLES[0] });
-        allParameters.put("locale", new String[] { LOCALES[0] });
-
-        allParameters.put("type", new String[] { WRONG_TYPE });
-        when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
-
-        assertEquals(WRONG_TYPE
-                + " is not a valid value for parameter type. Valid values are GPX or JSON.",
-                graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse)
-                        .getErrors().get(0).getMessage());
-    }
-
-    @Test
-    public void testGetGHResponseWithCorrectVehicles() throws IOException,
-            MissingParameterException, NoSuchParameterException, InvalidParameterException
-    {
-        allParameters.put("point", POINTS);
-        allParameters.put("vehicle", new String[] { VEHICLES[0] });
-        allParameters.put("locale", new String[] { LOCALES[0] });
-        allParameters.put("instructions", new String[] { "false" });
-        when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
-
-        assertFalse(graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse)
-                .hasErrors());
-    }
-
-    @Test
-    public void testGetGHResponseWithWrongVehicle() throws IOException, MissingParameterException,
-            NoSuchParameterException, InvalidParameterException
-    {
-        allParameters.put("point", POINTS);
-        allParameters.put("vehicle", new String[] { WRONG_VEHICLE });
-        allParameters.put("locale", new String[] { LOCALES[0] });
-        allParameters.put("instructions", new String[] { "false" });
-        when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
-
-        when(graphHopper.getGraph()).thenReturn(graphStorage);
-        when(graphStorage.getEncodingManager()).thenReturn(encodingManager);
-        when(encodingManager.supports(anyString())).thenReturn(false);
-        when(encodingManager.toString()).thenReturn("*supported vehicles*");
-
-        GHResponse ghResponse = graphHopperServlet.getGHResponse(httpServletRequest,
-                httpServletResponse);
-
-        assertEquals(
-                "Vehicle flying_carpet is not a valid vehicle. Valid vehicles are *supported vehicles*",
-                ghResponse.getErrors().get(0).getMessage());
-    }
-
-    @Test
-    public void testGetGHResponseWithCorrectInstructions() throws MissingParameterException,
-            NoSuchParameterException, InvalidParameterException, IOException
-    {
-        allParameters.put("point", POINTS);
-        allParameters.put("vehicle", new String[] { VEHICLES[0] });
-        allParameters.put("locale", new String[] { LOCALES[0] });
-
-        for (String instruction : INSTRUCTIONS)
-        {
-            allParameters.put("instructions", new String[] { instruction });
-            when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
-
-            GHResponse ghResponse = graphHopperServlet.getGHResponse(httpServletRequest,
-                    httpServletResponse);
-
-            assertFalse(ghResponse.hasErrors());
-        }
-    }
-
-    @Test
-    public void testGetGHResponseWithIncorrectInstruction() throws MissingParameterException,
-            NoSuchParameterException, InvalidParameterException, IOException
-    {
-        allParameters.put("point", POINTS);
-        allParameters.put("vehicle", new String[] { VEHICLES[0] });
-        allParameters.put("locale", new String[] { LOCALES[0] });
-
-        allParameters.put("instructions", new String[] { WRONG_INSTRUCTION });
-        when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
-
-        assertEquals(
-                WRONG_INSTRUCTION
-                        + " is not a valid value for parameter instructions. Valid values are true or false",
-                graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse)
-                        .getErrors().get(0).getMessage());
-    }
-
-    @Test
-    public void testGetGHResponseWithCorrectPointsEncoded() throws MissingParameterException,
-            NoSuchParameterException, InvalidParameterException, IOException
-    {
-        allParameters.put("point", POINTS);
-        allParameters.put("vehicle", new String[] { VEHICLES[0] });
-        allParameters.put("locale", new String[] { LOCALES[0] });
-        allParameters.put("instructions", new String[] { "false" });
-
-        for (String point_encoded : POINTS_ENCODED)
-        {
-            allParameters.put("points_encoded", new String[] { point_encoded });
-            when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
-
-            assertFalse(graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse)
-                    .hasErrors());
-        }
-    }
-
-    @Test
-    public void testGetGHResponseWithIncorrectPointsEncoded() throws MissingParameterException,
-            NoSuchParameterException, InvalidParameterException, IOException
-    {
-        allParameters.put("point", POINTS);
-        allParameters.put("vehicle", new String[] { VEHICLES[0] });
-        allParameters.put("locale", new String[] { LOCALES[0] });
-
-        allParameters.put("points_encoded", new String[] { WRONG_POINTS_ENCODED });
-        when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
-
-        assertEquals(
-                buildErrorMessageString(WRONG_POINTS_ENCODED, "points_encoded", POINTS_ENCODED),
-                graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse)
-                        .getErrors().get(0).getMessage());
-    }
-
-    @Test
-    public void testGetGHResponseWithCorrectDebug() throws MissingParameterException,
-            NoSuchParameterException, InvalidParameterException, IOException
-    {
-        allParameters.put("point", POINTS);
-        allParameters.put("vehicle", new String[] { VEHICLES[0] });
-        allParameters.put("locale", new String[] { LOCALES[0] });
-        allParameters.put("instructions", new String[] { "false" });
-
-        for (String debug : DEBUG)
-        {
-            allParameters.put("debug", new String[] { debug });
-            when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
-
-            assertFalse(graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse)
-                    .hasErrors());
-        }
-    }
-
-    @Test
-    public void testGetGHResponseWithIncorrectDebug() throws MissingParameterException,
-            NoSuchParameterException, InvalidParameterException, IOException
-    {
-        allParameters.put("point", POINTS);
-        allParameters.put("vehicle", new String[] { VEHICLES[0] });
-        allParameters.put("locale", new String[] { LOCALES[0] });
-
-        allParameters.put("debug", new String[] { WRONG_DEBUG });
-        when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
-
-        assertEquals(buildErrorMessageString(WRONG_DEBUG, "debug", DEBUG), graphHopperServlet
-                .getGHResponse(httpServletRequest, httpServletResponse).getErrors().get(0)
-                .getMessage());
-    }
-
-    @Test
-    public void testGetGHResponseWithCorrectPretty() throws MissingParameterException,
-            NoSuchParameterException, InvalidParameterException, IOException
-    {
-        allParameters.put("point", POINTS);
-        allParameters.put("vehicle", new String[] { VEHICLES[0] });
-        allParameters.put("locale", new String[] { LOCALES[0] });
-        allParameters.put("instructions", new String[] { "false" });
-
-        for (String pretty : PRETTY)
-        {
-            allParameters.put("pretty", new String[] { pretty });
-            when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
-
-            assertFalse(graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse)
-                    .hasErrors());
-        }
-    }
-
-    @Test
-    public void testGetGHResponseWithIncorrectPretty() throws MissingParameterException,
-            NoSuchParameterException, InvalidParameterException, IOException
-    {
-        allParameters.put("point", POINTS);
-        allParameters.put("vehicle", new String[] { VEHICLES[0] });
-        allParameters.put("locale", new String[] { LOCALES[0] });
-
-        allParameters.put("pretty", new String[] { WRONG_PRETTY });
-        when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
-
-        assertEquals(buildErrorMessageString(WRONG_PRETTY, "pretty", PRETTY), graphHopperServlet
-                .getGHResponse(httpServletRequest, httpServletResponse).getErrors().get(0)
-                .getMessage());
-    }
-
-    @Test
-    public void testGetGHResponseWithCorrectCalcPoints() throws MissingParameterException,
-            NoSuchParameterException, InvalidParameterException, IOException
-    {
-        allParameters.put("point", POINTS);
-        allParameters.put("vehicle", new String[] { VEHICLES[0] });
-        allParameters.put("locale", new String[] { LOCALES[0] });
-        allParameters.put("instructions", new String[] { "false" });
-
-        for (String calcPoint : CALC_POINTS)
-        {
-            allParameters.put("calc_points", new String[] { calcPoint });
-            when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
-
-            assertFalse(graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse)
-                    .hasErrors());
-        }
-    }
-
-    @Test
-    public void testGetGHResponseWithIncorrectCalcPoints() throws MissingParameterException,
-            NoSuchParameterException, InvalidParameterException, IOException
-    {
-        allParameters.put("point", POINTS);
-        allParameters.put("vehicle", new String[] { VEHICLES[0] });
-        allParameters.put("locale", new String[] { LOCALES[0] });
-        allParameters.put("instructions", new String[] { "false" });
-
-        allParameters.put("calc_points", new String[] { WRONG_CALC_POINTS });
-        when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
-
-        assertEquals(buildErrorMessageString(WRONG_CALC_POINTS, "calc_points", CALC_POINTS),
-                graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse)
-                        .getErrors().get(0).getMessage());
-    }
-
-    @Test
-    public void testGetGHResponseWithCorrectWeighting() throws MissingParameterException,
-            NoSuchParameterException, InvalidParameterException, IOException
-    {
-        allParameters.put("point", POINTS);
-        allParameters.put("vehicle", new String[] { VEHICLES[0] });
-        allParameters.put("locale", new String[] { LOCALES[0] });
-        allParameters.put("instructions", new String[] { "false" });
-
-        for (String weighting : WEIGHTINGS)
-        {
-            allParameters.put("weighting", new String[] { weighting });
-            when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
-
-            assertFalse(graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse)
-                    .hasErrors());
-        }
-    }
-
-    @Test
-    public void testGetGHResponseWithIncorrectWeighting() throws MissingParameterException,
-            NoSuchParameterException, InvalidParameterException, IOException
-    {
-        allParameters.put("point", POINTS);
-        allParameters.put("vehicle", new String[] { VEHICLES[0] });
-        allParameters.put("locale", new String[] { LOCALES[0] });
-        allParameters.put("instructions", new String[] { "false" });
-
-        allParameters.put("weighting", new String[] { WRONG_WEIGHTING });
-
-        when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
-
-        GHResponse ghResponse = graphHopperServlet.getGHResponse(httpServletRequest,
-                httpServletResponse);
-
-        assertEquals(1, ghResponse.getErrors().size());
-        // TODO Generate appropriate error message in GraphhopperServletClass
-        // assertEquals(buildErrorMessageString(WRONG_WEIGHTING, "calc_points", WEIGHTINGS),
-        // ghResponse.getErrors().get(0).getMessage());
-
-    }
-
-    @Test
-    public void testGetGHResponseWithCorrectAvoidances() throws MissingParameterException,
-            NoSuchParameterException, InvalidParameterException, IOException
-    {
-        allParameters.put("point", POINTS);
-        allParameters.put("vehicle", new String[] { VEHICLES[0] });
-        allParameters.put("locale", new String[] { LOCALES[0] });
-        allParameters.put("instructions", new String[] { "false" });
-
-        for (String avoidances : AVOIDANCES)
-        {
-            allParameters.put("avoidances", new String[] { avoidances });
-            when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
-
-            when(flagEncoder.getEncoderDecorators()).thenReturn(encoderDecorators);
-            when(encoderDecorators.iterator()).thenReturn(iterator);
-            when(iterator.hasNext()).thenReturn(true, false);
-            when(iterator.next()).thenReturn(abstractAvoidanceDecorator);
-            when(abstractAvoidanceDecorator.getEdgeAttributesOfInterestNames()).thenReturn(
-                    AVOIDANCES);
-
-            assertFalse(graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse)
-                    .hasErrors());
-        }
-    }
-
-    @Test
-    public void testGetGHResponseWithIncorrectAvoidances() throws MissingParameterException,
-            NoSuchParameterException, InvalidParameterException, IOException
-    {
-        allParameters.put("point", POINTS);
-        allParameters.put("vehicle", new String[] { VEHICLES[0] });
-        allParameters.put("locale", new String[] { LOCALES[0] });
-
-        allParameters.put("avoidances", new String[] { WRONG_AVOIDANCE });
-        when(httpServletRequest.getParameterMap()).thenReturn(allParameters);
-
-        when(flagEncoder.getEncoderDecorators()).thenReturn(encoderDecorators);
-        when(encoderDecorators.iterator()).thenReturn(iterator);
-        when(iterator.hasNext()).thenReturn(true, false);
-        when(iterator.next()).thenReturn(abstractAvoidanceDecorator);
-        when(abstractAvoidanceDecorator.getEdgeAttributesOfInterestNames()).thenReturn(AVOIDANCES);
-
-        assertEquals(buildErrorMessageString(WRONG_AVOIDANCE, "avoidances", AVOIDANCES),
-                graphHopperServlet.getGHResponse(httpServletRequest, httpServletResponse)
-                        .getErrors().get(0).getMessage());
-    }
+	private void verifyNoError()
+	{
+		verify(response, never()).addError((Throwable) Matchers.any());
+	}
 
 }
