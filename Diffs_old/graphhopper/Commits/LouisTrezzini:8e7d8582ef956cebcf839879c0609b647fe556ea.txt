diff --git a/core/pom.xml b/core/pom.xml
index d95f0ca5d0..3ee4357f23 100644
--- a/core/pom.xml
+++ b/core/pom.xml
@@ -95,6 +95,12 @@
             <artifactId>jts-core</artifactId>
             <version>1.14.0</version>
         </dependency>
+
+        <dependency>
+            <groupId>com.opencsv</groupId>
+            <artifactId>opencsv</artifactId>
+            <version>4.3.2</version>
+        </dependency>
     </dependencies>
 
     <build>
diff --git a/core/src/main/java/com/graphhopper/routing/util/GreenWalkFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/GreenWalkFlagEncoder.java
index 5ff1edac78..ca93580559 100644
--- a/core/src/main/java/com/graphhopper/routing/util/GreenWalkFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/GreenWalkFlagEncoder.java
@@ -22,7 +22,10 @@
 import com.graphhopper.routing.weighting.GreenWalkWeighting;
 import com.graphhopper.routing.weighting.PriorityWeighting;
 import com.graphhopper.util.PMap;
+import com.opencsv.CSVReader;
 
+import java.io.FileReader;
+import java.io.IOException;
 import java.util.*;
 
 import static com.graphhopper.routing.util.PriorityCode.*;
@@ -39,6 +42,7 @@
  */
 public class GreenWalkFlagEncoder extends AbstractFlagEncoder {
     public static final int GREENNESS_KEY = 113;
+    public static final int POLLUTION_KEY = 114;
     private static final int SPEED = 5;
     private final Set<String> safeHighwayTags = new HashSet<>();
     private final Set<String> allowedHighwayTags = new HashSet<>();
@@ -50,6 +54,13 @@
     private EncodedValue priorityWayEncoder;
     private EncodedValue relationCodeEncoder;
     private EncodedValue greennessEncoder;
+    private EncodedValue pollutionEncoder;
+
+    private double[][] pollution = new double[100][100];
+    private double pollutionXmin;
+    private double pollutionXmax;
+    private double pollutionYmin;
+    private double pollutionYmax;
 
     /**
      * Should be only instantiated via EncodingManager
@@ -131,6 +142,23 @@ public GreenWalkFlagEncoder(int speedBits, double speedFactor) {
 
         maxPossibleSpeed = SPEED;
 
+        // READ POLLUTION
+        String csvFile = "./pollution.csv";
+
+        CSVReader reader = null;
+        int k = 0;
+        try {
+            reader = new CSVReader(new FileReader(csvFile));
+            String[] line;
+            while ((line = reader.readNext()) != null) {
+                k++;
+                pollution[k / 1000][k % 1000] = Double.parseDouble(line[2]);
+            }
+        } catch (IOException e) {
+            e.printStackTrace();
+        }
+        //
+
         init();
     }
 
@@ -153,6 +181,9 @@ public int defineWayBits(int index, int shift) {
         greennessEncoder = new EncodedValue("Greenness", shift, 4, 1, 0, 9);
         shift += greennessEncoder.getBits();
 
+        pollutionEncoder = new EncodedValue("Pollution", shift, 4, 1, 0, 9);
+        shift += pollutionEncoder.getBits();
+
         return shift;
     }
 
@@ -315,6 +346,11 @@ public long handleWayTags(ReaderWay way, long allowed, long relationFlags) {
 
         flags = greennessEncoder.setValue(flags, greenness);
 
+        // COMPUTE POLLUTION
+        int pollution = 0; // X * 4 + 1
+
+        flags = pollutionEncoder.setValue(flags, pollution);
+
         return flags;
     }
 
@@ -325,6 +361,8 @@ public double getDouble(long flags, int key) {
                 return (double) priorityWayEncoder.getValue(flags) / BEST.getValue();
             case GreenWalkFlagEncoder.GREENNESS_KEY:
                 return (double) greennessEncoder.getValue(flags);
+            case GreenWalkFlagEncoder.POLLUTION_KEY:
+                return (double) pollutionEncoder.getValue(flags);
             default:
                 return super.getDouble(flags, key);
         }
diff --git a/core/src/main/java/com/graphhopper/routing/weighting/GreenWalkWeighting.java b/core/src/main/java/com/graphhopper/routing/weighting/GreenWalkWeighting.java
index 929024b254..14a5e2607a 100644
--- a/core/src/main/java/com/graphhopper/routing/weighting/GreenWalkWeighting.java
+++ b/core/src/main/java/com/graphhopper/routing/weighting/GreenWalkWeighting.java
@@ -40,6 +40,7 @@ public double getMinWeight(double distance) {
     public double calcWeight(EdgeIteratorState edge, boolean reverse, int prevOrNextEdgeId) {
         double priority = flagEncoder.getDouble(edge.getFlags(), KEY);
         double greenness = flagEncoder.getDouble(edge.getFlags(), GreenWalkFlagEncoder.GREENNESS_KEY);
+        double pollution = flagEncoder.getDouble(edge.getFlags(), GreenWalkFlagEncoder.POLLUTION_KEY);
 
         double distance = edge.getDistance();
         double factor = 1 / (0.5 + priority);
@@ -47,6 +48,10 @@ public double calcWeight(EdgeIteratorState edge, boolean reverse, int prevOrNext
             factor *= 1 / greenness;
         }
 
+        if (pollution > 0) {
+            factor *= (pollution - 5.0) / 8.0;
+        }
+
         factor = Math.max(factor, minFactor);
 
         return factor * distance;
