diff --git a/config-example.properties b/config-example.properties
index 66e1f76498..f0aa981bef 100644
--- a/config-example.properties
+++ b/config-example.properties
@@ -118,7 +118,7 @@ graph.dataaccess=RAM_STORE
 
 # Spatial Rules require you to provide Polygons in which the rules are enforced
 # The line below contains the default location for these rules
-# spatial_rules.location=web/src/main/resources/com/graphhopper/spatialrules/countries.geo.json
+# spatial_rules.location=core/files/spatialrules/countries.geo.json
 
 # You can define the maximum BBox for which spatial rules are loaded.
 # You might want to do this if you are only importing a small area and don't need rules for other countries.
diff --git a/web/src/main/resources/com/graphhopper/spatialrules/README.MD b/core/files/spatialrules/README.MD
similarity index 100%
rename from web/src/main/resources/com/graphhopper/spatialrules/README.MD
rename to core/files/spatialrules/README.MD
diff --git a/web/src/main/resources/com/graphhopper/spatialrules/countries.geo.json b/core/files/spatialrules/countries.geo.json
similarity index 100%
rename from web/src/main/resources/com/graphhopper/spatialrules/countries.geo.json
rename to core/files/spatialrules/countries.geo.json
diff --git a/web/src/main/java/com/graphhopper/spatialrules/CountriesSpatialRuleFactory.java b/core/src/main/java/com/graphhopper/routing/util/spatialrules/CountriesSpatialRuleFactory.java
similarity index 79%
rename from web/src/main/java/com/graphhopper/spatialrules/CountriesSpatialRuleFactory.java
rename to core/src/main/java/com/graphhopper/routing/util/spatialrules/CountriesSpatialRuleFactory.java
index 9c34934934..f957f26778 100644
--- a/web/src/main/java/com/graphhopper/spatialrules/CountriesSpatialRuleFactory.java
+++ b/core/src/main/java/com/graphhopper/routing/util/spatialrules/CountriesSpatialRuleFactory.java
@@ -1,10 +1,7 @@
-package com.graphhopper.spatialrules;
+package com.graphhopper.routing.util.spatialrules;
 
-import com.graphhopper.routing.util.spatialrules.Polygon;
-import com.graphhopper.routing.util.spatialrules.SpatialRule;
 import com.graphhopper.routing.util.spatialrules.countries.AustriaSpatialRule;
 import com.graphhopper.routing.util.spatialrules.countries.GermanySpatialRule;
-import com.graphhopper.spatialrules.SpatialRuleLookupBuilder;
 
 import java.util.List;
 
diff --git a/web/src/main/java/com/graphhopper/spatialrules/SpatialRuleLookupBuilder.java b/core/src/main/java/com/graphhopper/routing/util/spatialrules/SpatialRuleLookupBuilder.java
similarity index 94%
rename from web/src/main/java/com/graphhopper/spatialrules/SpatialRuleLookupBuilder.java
rename to core/src/main/java/com/graphhopper/routing/util/spatialrules/SpatialRuleLookupBuilder.java
index 6b840aae44..70564e59d3 100644
--- a/web/src/main/java/com/graphhopper/spatialrules/SpatialRuleLookupBuilder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/spatialrules/SpatialRuleLookupBuilder.java
@@ -1,11 +1,7 @@
-package com.graphhopper.spatialrules;
+package com.graphhopper.routing.util.spatialrules;
 
 import com.graphhopper.json.geo.JsonFeature;
 import com.graphhopper.json.geo.JsonFeatureCollection;
-import com.graphhopper.routing.util.spatialrules.Polygon;
-import com.graphhopper.routing.util.spatialrules.SpatialRule;
-import com.graphhopper.routing.util.spatialrules.SpatialRuleLookup;
-import com.graphhopper.routing.util.spatialrules.SpatialRuleLookupArray;
 import com.graphhopper.util.shapes.BBox;
 import com.vividsolutions.jts.geom.Geometry;
 import org.slf4j.Logger;
diff --git a/reader-json/src/main/java/com/graphhopper/spatialrules/SpatialRuleLookupHelper.java b/reader-json/src/main/java/com/graphhopper/spatialrules/SpatialRuleLookupHelper.java
new file mode 100644
index 0000000000..cb31c43956
--- /dev/null
+++ b/reader-json/src/main/java/com/graphhopper/spatialrules/SpatialRuleLookupHelper.java
@@ -0,0 +1,55 @@
+package com.graphhopper.spatialrules;
+
+import com.graphhopper.GraphHopper;
+import com.graphhopper.json.GHJsonFactory;
+import com.graphhopper.json.geo.JsonFeatureCollection;
+import com.graphhopper.routing.util.DataFlagEncoder;
+import com.graphhopper.routing.util.FlagEncoder;
+import com.graphhopper.routing.util.FlagEncoderFactory;
+import com.graphhopper.routing.util.spatialrules.CountriesSpatialRuleFactory;
+import com.graphhopper.routing.util.spatialrules.SpatialRuleLookup;
+import com.graphhopper.routing.util.spatialrules.SpatialRuleLookupBuilder;
+import com.graphhopper.util.CmdArgs;
+import com.graphhopper.util.PMap;
+import com.graphhopper.util.shapes.BBox;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.io.FileReader;
+import java.io.IOException;
+
+/**
+ * Helper class to build the spatial rule index
+ *
+ * @author Robin Boldt
+ */
+public class SpatialRuleLookupHelper {
+
+    private static final Logger logger = LoggerFactory.getLogger(SpatialRuleLookupHelper.class);
+
+    public static void buildAndInjectSpatialRuleIntoGH(GraphHopper graphHopper, CmdArgs args){
+        String spatialRuleLocation = args.get("spatial_rules.location", "");
+        if (!spatialRuleLocation.isEmpty()) {
+            try {
+                final BBox maxBounds = BBox.parseBBoxString(args.get("spatial_rules.max_bbox", "-180, 180, -90, 90"));
+                final FileReader reader = new FileReader(spatialRuleLocation);
+                final SpatialRuleLookup index = SpatialRuleLookupBuilder.buildIndex(new GHJsonFactory().create().fromJson(reader, JsonFeatureCollection.class), "ISO_A3", new CountriesSpatialRuleFactory(), .1, maxBounds);
+                logger.info("Set spatial rule lookup with " + index.size() + " rules");
+                final FlagEncoderFactory oldFEF = graphHopper.getFlagEncoderFactory();
+                graphHopper.setFlagEncoderFactory(new FlagEncoderFactory() {
+                    @Override
+                    public FlagEncoder createFlagEncoder(String name, PMap configuration) {
+                        if (name.equals(GENERIC)) {
+                            return new DataFlagEncoder(configuration).setSpatialRuleLookup(index);
+                        }
+
+                        return oldFEF.createFlagEncoder(name, configuration);
+                    }
+                });
+            } catch (IOException ex) {
+                throw new RuntimeException(ex);
+            }
+        }
+    }
+
+}
diff --git a/web/src/test/java/com/graphhopper/spatialrules/SpatialRuleLookupBuilderTest.java b/reader-json/src/test/java/com/graphhopper/spatialrules/SpatialRuleLookupBuilderTest.java
similarity index 73%
rename from web/src/test/java/com/graphhopper/spatialrules/SpatialRuleLookupBuilderTest.java
rename to reader-json/src/test/java/com/graphhopper/spatialrules/SpatialRuleLookupBuilderTest.java
index 39198d7361..207cd8061c 100644
--- a/web/src/test/java/com/graphhopper/spatialrules/SpatialRuleLookupBuilderTest.java
+++ b/reader-json/src/test/java/com/graphhopper/spatialrules/SpatialRuleLookupBuilderTest.java
@@ -19,32 +19,31 @@
 
 import com.graphhopper.json.GHJsonFactory;
 import com.graphhopper.json.geo.JsonFeatureCollection;
-import com.graphhopper.routing.util.spatialrules.AccessValue;
-import com.graphhopper.routing.util.spatialrules.SpatialRuleLookup;
-import com.graphhopper.routing.util.spatialrules.TransportationMode;
+import com.graphhopper.routing.util.spatialrules.*;
 import com.graphhopper.util.shapes.BBox;
+import org.junit.Assert;
 import org.junit.Test;
 
-import java.io.InputStreamReader;
-import java.io.Reader;
+import java.io.*;
 
 import static junit.framework.TestCase.assertFalse;
 import static junit.framework.TestCase.assertTrue;
 import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertNull;
 
 /**
  * @author Robin Boldt
  */
 public class SpatialRuleLookupBuilderTest {
 
+    private static final String COUNTRIES_FILE = "../core/files/spatialrules/countries.geo.json";
+
     @Test
-    public void testIndex() {
-        Reader reader = new InputStreamReader(CountriesSpatialRuleFactory.class.getResourceAsStream("countries.geo.json"));
+    public void testIndex() throws FileNotFoundException {
+        final FileReader reader = new FileReader(COUNTRIES_FILE);
         SpatialRuleLookup spatialRuleLookup = SpatialRuleLookupBuilder.buildIndex(new GHJsonFactory().create().fromJson(reader, JsonFeatureCollection.class), "ISO_A3", new CountriesSpatialRuleFactory());
 
         // Berlin
-        assertEquals(AccessValue.EVENTUALLY_ACCESSIBLE, spatialRuleLookup.lookupRule(52.5243700, 13.4105300).getAccessValue("track", TransportationMode.MOTOR_VEHICLE, AccessValue.ACCESSIBLE));
+        Assert.assertEquals(AccessValue.EVENTUALLY_ACCESSIBLE, spatialRuleLookup.lookupRule(52.5243700, 13.4105300).getAccessValue("track", TransportationMode.MOTOR_VEHICLE, AccessValue.ACCESSIBLE));
         assertEquals(AccessValue.ACCESSIBLE, spatialRuleLookup.lookupRule(52.5243700, 13.4105300).getAccessValue("primary", TransportationMode.MOTOR_VEHICLE, AccessValue.ACCESSIBLE));
 
         // Paris -> empty rule
@@ -58,8 +57,8 @@ public void testIndex() {
     }
 
     @Test
-    public void testBounds() {
-        Reader reader = new InputStreamReader(SpatialRuleLookupBuilderTest.class.getResourceAsStream("countries.geo.json"));
+    public void testBounds() throws FileNotFoundException {
+        final FileReader reader = new FileReader(COUNTRIES_FILE);
         SpatialRuleLookup spatialRuleLookup = SpatialRuleLookupBuilder.buildIndex(new GHJsonFactory().create().fromJson(reader, JsonFeatureCollection.class), "ISO_A3", new CountriesSpatialRuleFactory(), .1, new BBox(-180, 180, -90, 90));
         BBox almostWorldWide = new BBox(-179, 179, -89, 89);
 
@@ -68,19 +67,19 @@ public void testBounds() {
     }
 
     @Test
-    public void testIntersection() {
-                /*
-             We are creating a BBox smaller than Germany. We have the German Spatial rule activated by default.
-             So the BBox should not contain a Point lying somewhere close in Germany.
-          */
-        Reader reader = new InputStreamReader(SpatialRuleLookupBuilderTest.class.getResourceAsStream("countries.geo.json"));
+    public void testIntersection() throws FileNotFoundException {
+        /*
+         We are creating a BBox smaller than Germany. We have the German Spatial rule activated by default.
+         So the BBox should not contain a Point lying somewhere close in Germany.
+        */
+        final FileReader reader = new FileReader(COUNTRIES_FILE);
         SpatialRuleLookup spatialRuleLookup = SpatialRuleLookupBuilder.buildIndex(new GHJsonFactory().create().fromJson(reader, JsonFeatureCollection.class), "ISO_A3", new CountriesSpatialRuleFactory(), .1, new BBox(9, 10, 51, 52));
         assertFalse("BBox seems to be incorrectly contracted", spatialRuleLookup.getBounds().contains(49.9, 8.9));
     }
 
     @Test
-    public void testNoIntersection() {
-        Reader reader = new InputStreamReader(SpatialRuleLookupBuilderTest.class.getResourceAsStream("countries.geo.json"));
+    public void testNoIntersection() throws FileNotFoundException {
+        final FileReader reader = new FileReader(COUNTRIES_FILE);
         SpatialRuleLookup spatialRuleLookup = SpatialRuleLookupBuilder.buildIndex(new GHJsonFactory().create().fromJson(reader, JsonFeatureCollection.class), "ISO_A3", new CountriesSpatialRuleFactory(), .1, new BBox(-180, -179, -90, -89));
         assertEquals(SpatialRuleLookup.EMPTY, spatialRuleLookup);
     }
diff --git a/tools/pom.xml b/tools/pom.xml
index 3f94a812ad..fb4f0bf53d 100644
--- a/tools/pom.xml
+++ b/tools/pom.xml
@@ -21,6 +21,11 @@
             <artifactId>graphhopper-reader-osm</artifactId>
             <version>${project.parent.version}</version>
         </dependency>
+        <dependency>
+            <groupId>com.graphhopper</groupId>
+            <artifactId>graphhopper-reader-json</artifactId>
+            <version>${project.parent.version}</version>
+        </dependency>
         <dependency>
             <groupId>org.apache.commons</groupId>
             <artifactId>commons-compress</artifactId>
diff --git a/tools/src/main/java/com/graphhopper/tools/Import.java b/tools/src/main/java/com/graphhopper/tools/Import.java
index 9b668df757..7854e9fd76 100644
--- a/tools/src/main/java/com/graphhopper/tools/Import.java
+++ b/tools/src/main/java/com/graphhopper/tools/Import.java
@@ -19,6 +19,7 @@
 
 import com.graphhopper.GraphHopper;
 import com.graphhopper.reader.osm.GraphHopperOSM;
+import com.graphhopper.spatialrules.SpatialRuleLookupHelper;
 import com.graphhopper.util.CmdArgs;
 
 /**
@@ -27,7 +28,10 @@
 public class Import {
     public static void main(String[] strs) throws Exception {
         CmdArgs args = CmdArgs.read(strs);
-        GraphHopper hopper = new GraphHopperOSM().init(args);
+        args = CmdArgs.readFromConfigAndMerge(args, "config", "graphhopper.config");
+        GraphHopper hopper = new GraphHopperOSM();
+        SpatialRuleLookupHelper.buildAndInjectSpatialRuleIntoGH(hopper, args);
+        hopper.init(args);
         hopper.importOrLoad();
         hopper.close();
     }
diff --git a/web/src/main/java/com/graphhopper/http/GraphHopperModule.java b/web/src/main/java/com/graphhopper/http/GraphHopperModule.java
index ffe1adb71f..23658883b3 100644
--- a/web/src/main/java/com/graphhopper/http/GraphHopperModule.java
+++ b/web/src/main/java/com/graphhopper/http/GraphHopperModule.java
@@ -20,8 +20,7 @@
 import com.google.inject.AbstractModule;
 import com.google.inject.Provides;
 import com.graphhopper.GraphHopper;
-import com.graphhopper.spatialrules.SpatialRuleLookupBuilder;
-import com.graphhopper.spatialrules.CountriesSpatialRuleFactory;
+import com.graphhopper.routing.util.spatialrules.SpatialRuleLookupBuilder;
 import com.graphhopper.GraphHopperAPI;
 import com.graphhopper.json.GHJson;
 import com.graphhopper.json.GHJsonFactory;
@@ -29,21 +28,17 @@
 import com.graphhopper.reader.osm.GraphHopperOSM;
 import com.graphhopper.routing.lm.LandmarkStorage;
 import com.graphhopper.routing.lm.PrepareLandmarks;
-import com.graphhopper.routing.util.DataFlagEncoder;
 import com.graphhopper.routing.util.EncodingManager;
-import com.graphhopper.routing.util.FlagEncoder;
-import com.graphhopper.routing.util.FlagEncoderFactory;
 import com.graphhopper.routing.util.spatialrules.DefaultSpatialRule;
 import com.graphhopper.routing.util.spatialrules.Polygon;
 import com.graphhopper.routing.util.spatialrules.SpatialRule;
 import com.graphhopper.routing.util.spatialrules.SpatialRuleLookup;
+import com.graphhopper.spatialrules.SpatialRuleLookupHelper;
 import com.graphhopper.storage.GraphHopperStorage;
 import com.graphhopper.storage.index.LocationIndex;
 import com.graphhopper.util.CmdArgs;
-import com.graphhopper.util.PMap;
 import com.graphhopper.util.Parameters;
 import com.graphhopper.util.TranslationMap;
-import com.graphhopper.util.shapes.BBox;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -110,28 +105,7 @@ public String getId() {
             }
         }.forServer();
 
-        String spatialRuleLocation = args.get("spatial_rules.location", "");
-        if (!spatialRuleLocation.isEmpty()) {
-            try {
-                final BBox maxBounds = BBox.parseBBoxString(args.get("spatial_rules.max_bbox", "-180, 180, -90, 90"));
-                final FileReader reader = new FileReader(spatialRuleLocation);
-                final SpatialRuleLookup index = SpatialRuleLookupBuilder.buildIndex(new GHJsonFactory().create().fromJson(reader, JsonFeatureCollection.class), "ISO_A3", new CountriesSpatialRuleFactory(), .1, maxBounds);
-                logger.info("Set spatial rule lookup with " + index.size() + " rules");
-                final FlagEncoderFactory oldFEF = graphHopper.getFlagEncoderFactory();
-                graphHopper.setFlagEncoderFactory(new FlagEncoderFactory() {
-                    @Override
-                    public FlagEncoder createFlagEncoder(String name, PMap configuration) {
-                        if (name.equals(GENERIC)) {
-                            return new DataFlagEncoder(configuration).setSpatialRuleLookup(index);
-                        }
-
-                        return oldFEF.createFlagEncoder(name, configuration);
-                    }
-                });
-            } catch (IOException ex) {
-                throw new RuntimeException(ex);
-            }
-        }
+        SpatialRuleLookupHelper.buildAndInjectSpatialRuleIntoGH(graphHopper, args);
 
         graphHopper.init(args);
         return graphHopper;
diff --git a/web/src/test/java/com/graphhopper/http/GraphHopperDataflagEncoderSpatialRulesIT.java b/web/src/test/java/com/graphhopper/http/GraphHopperDataflagEncoderSpatialRulesIT.java
index 831cd6e121..4b1779e77c 100644
--- a/web/src/test/java/com/graphhopper/http/GraphHopperDataflagEncoderSpatialRulesIT.java
+++ b/web/src/test/java/com/graphhopper/http/GraphHopperDataflagEncoderSpatialRulesIT.java
@@ -48,7 +48,7 @@ public void setUp() {
                 put("config", "../config-example.properties").
                 put("graph.flag_encoders", "generic").
                 put("prepare.ch.weightings", "no").
-                put("spatial_rules.location", "../web/src/main/resources/com/graphhopper/spatialrules/countries.geo.json").
+                put("spatial_rules.location", "../core/files/spatialrules/countries.geo.json").
                 put("spatial_rules.max_bbox", "11.4,11.7,49.9,50.1").
                 put("datareader.file", "../core/files/north-bayreuth.osm.gz").
                 put("graph.location", DIR);
