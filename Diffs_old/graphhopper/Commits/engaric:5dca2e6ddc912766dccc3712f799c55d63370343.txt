diff --git a/core/src/main/java/com/graphhopper/reader/TurnRelation.java b/core/src/main/java/com/graphhopper/reader/TurnRelation.java
index ffa4d7d606..a82c31cc6f 100644
--- a/core/src/main/java/com/graphhopper/reader/TurnRelation.java
+++ b/core/src/main/java/com/graphhopper/reader/TurnRelation.java
@@ -1,15 +1,15 @@
 package com.graphhopper.reader;
 
-import java.util.Collection;
-
 import com.graphhopper.routing.util.TurnCostEncoder;
 import com.graphhopper.util.EdgeExplorer;
 
+import java.util.Collection;
+
 public interface TurnRelation {
 
-	public abstract long getOsmIdFrom();
+	long getOsmIdFrom();
 
-	public abstract long getOsmIdTo();
+	long getOsmIdTo();
 
 	/**
 	 * transforms this relation into a collection of node cost entries
@@ -18,7 +18,7 @@
 	 * @param edgeInExplorer an edge filter which only allows incoming edges
 	 * @return a collection of node cost entries which can be added to the graph later
 	 */
-	public abstract Collection<ITurnCostTableEntry> getRestrictionAsEntries(
+	Collection<ITurnCostTableEntry> getRestrictionAsEntries(
 			TurnCostEncoder encoder, EdgeExplorer edgeOutExplorer,
 			EdgeExplorer edgeInExplorer, DataReader osmReader);
 
diff --git a/core/src/main/java/com/graphhopper/reader/dem/ElevationProvider.java b/core/src/main/java/com/graphhopper/reader/dem/ElevationProvider.java
index aed7740ae7..1725703c08 100644
--- a/core/src/main/java/com/graphhopper/reader/dem/ElevationProvider.java
+++ b/core/src/main/java/com/graphhopper/reader/dem/ElevationProvider.java
@@ -19,80 +19,73 @@
 package com.graphhopper.reader.dem;
 
 import com.graphhopper.storage.DAType;
+
 import java.io.File;
 
 /**
  * @author Peter Karich
  */
-public interface ElevationProvider
-{
+public interface ElevationProvider {
     /**
      * @return returns the hight in meter or Double.NaN if invalid
      */
-    double getEle( double lat, double lon );
+    double getEle(double lat, double lon);
 
     /**
      * Specifies the service URL where to download the elevation data. An empty string should set it
      * to the default URL. Default is a provider-dependent URL which should work out of the box.
      */
-    ElevationProvider setBaseURL( String baseURL );
+    ElevationProvider setBaseURL(String baseURL);
 
     /**
      * Specifies the directory where to temporarily store the elevation data after fetched from base
      * URL. Default is a custom provider-dependent subdirectory in '/tmp'
      */
-    ElevationProvider setCacheDir( File cacheDir );
+    ElevationProvider setCacheDir(File cacheDir);
 
     /**
      * Set to true if you have a small area and need high speed access. Default is DAType.MMAP
      */
-    ElevationProvider setDAType( DAType daType );
+    ElevationProvider setDAType(DAType daType);
 
     /**
      * Configuration option to include surrounding elevation points when fetching the elevation. Has
      * only an effect if called before the first getEle call. Turned off by default.
      */
-    void setCalcMean( boolean calcMean );
+    void setCalcMean(boolean calcMean);
 
     /**
      * Release resources.
      */
     void release();
 
-    public final static ElevationProvider NOOP = new ElevationProvider()
-    {
+    final ElevationProvider NOOP = new ElevationProvider() {
         @Override
-        public double getEle( double lat, double lon )
-        {
+        public double getEle(double lat, double lon) {
             return Double.NaN;
         }
 
         @Override
-        public ElevationProvider setCacheDir( File cacheDir )
-        {
+        public ElevationProvider setCacheDir(File cacheDir) {
             return this;
         }
 
         @Override
-        public ElevationProvider setBaseURL( String baseURL )
-        {
+        public ElevationProvider setBaseURL(String baseURL) {
             return this;
         }
 
         @Override
-        public ElevationProvider setDAType( DAType daType )
-        {
+        public ElevationProvider setDAType(DAType daType) {
             return this;
         }
 
         @Override
-        public void release()
-        {
+        public void release() {
         }
 
         @Override
-        public void setCalcMean( boolean eleCalcMean )
-        {
+        public void setCalcMean(boolean eleCalcMean) {
         }
     };
 }
diff --git a/core/src/main/java/com/graphhopper/reader/dem/SRTMProvider.java b/core/src/main/java/com/graphhopper/reader/dem/SRTMProvider.java
index fbac0cd8c5..95c7c42124 100644
--- a/core/src/main/java/com/graphhopper/reader/dem/SRTMProvider.java
+++ b/core/src/main/java/com/graphhopper/reader/dem/SRTMProvider.java
@@ -73,7 +73,7 @@ public static void main( String[] args ) throws IOException
     private final double precision = 1e7;
     private final double invPrecision = 1 / precision;
     // mirror: base = "http://mirror.ufs.ac.za/datasets/SRTM3/"
-    private String baseUrl = "http://dds.cr.usgs.gov/srtm/version2_1/SRTM3/";
+    private String baseUrl = "http://srtm.motoroute.me/SRTM3/";
     private boolean calcMean = false;
 
     public SRTMProvider()
diff --git a/core/src/main/java/com/graphhopper/reader/pbf/PbfBlobDecoder.java b/core/src/main/java/com/graphhopper/reader/pbf/PbfBlobDecoder.java
index 58ab2d598c..4306e3de0f 100644
--- a/core/src/main/java/com/graphhopper/reader/pbf/PbfBlobDecoder.java
+++ b/core/src/main/java/com/graphhopper/reader/pbf/PbfBlobDecoder.java
@@ -6,17 +6,16 @@
 import com.graphhopper.reader.OSMNode;
 import com.graphhopper.reader.OSMRelation;
 import com.graphhopper.reader.OSMWay;
+import gnu.trove.list.TLongList;
 import org.openstreetmap.osmosis.osmbinary.Fileformat;
 import org.openstreetmap.osmosis.osmbinary.Osmformat;
-import gnu.trove.list.TLongList;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import java.io.IOException;
 import java.util.*;
-import java.util.logging.Level;
 import java.util.zip.DataFormatException;
 import java.util.zip.Inflater;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
 
 /**
  * Converts PBF block data into decoded entities ready to be passed into an Osmosis pipeline. This
diff --git a/core/src/main/java/com/graphhopper/reader/pbf/PbfDecoder.java b/core/src/main/java/com/graphhopper/reader/pbf/PbfDecoder.java
index 421979704f..83a25bdf22 100644
--- a/core/src/main/java/com/graphhopper/reader/pbf/PbfDecoder.java
+++ b/core/src/main/java/com/graphhopper/reader/pbf/PbfDecoder.java
@@ -2,7 +2,6 @@
 package com.graphhopper.reader.pbf;
 
 import com.graphhopper.reader.OSMElement;
-import java.util.Date;
 
 import java.util.LinkedList;
 import java.util.List;
diff --git a/core/src/main/java/com/graphhopper/routing/util/BeelineWeightApproximator.java b/core/src/main/java/com/graphhopper/routing/util/BeelineWeightApproximator.java
index 5df84cfe62..3e15813bf6 100644
--- a/core/src/main/java/com/graphhopper/routing/util/BeelineWeightApproximator.java
+++ b/core/src/main/java/com/graphhopper/routing/util/BeelineWeightApproximator.java
@@ -3,7 +3,6 @@
 import com.graphhopper.storage.NodeAccess;
 import com.graphhopper.util.DistanceCalc;
 import com.graphhopper.util.DistanceCalcEarth;
-import com.graphhopper.util.DistancePlaneProjection;
 
 /**
  * Approximates the distance to the goalNode by weighting the beeline distance according to the distance weighting
diff --git a/core/src/main/java/com/graphhopper/routing/util/Bike2WeightFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/Bike2WeightFlagEncoder.java
index 9f545922ba..dd610761e0 100644
--- a/core/src/main/java/com/graphhopper/routing/util/Bike2WeightFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/Bike2WeightFlagEncoder.java
@@ -18,14 +18,13 @@
  */
 package com.graphhopper.routing.util;
 
-import static com.graphhopper.util.Helper.keepIn;
-
-import com.graphhopper.reader.OSMWay;
 import com.graphhopper.reader.Way;
 import com.graphhopper.util.BitUtil;
 import com.graphhopper.util.EdgeIteratorState;
 import com.graphhopper.util.PointList;
 
+import static com.graphhopper.util.Helper.keepIn;
+
 /**
  * Stores two speed values into an edge to support avoiding too much incline
  * <p>
diff --git a/core/src/main/java/com/graphhopper/routing/util/EncoderDecorator.java b/core/src/main/java/com/graphhopper/routing/util/EncoderDecorator.java
index 983f3db2f8..485fd991ed 100644
--- a/core/src/main/java/com/graphhopper/routing/util/EncoderDecorator.java
+++ b/core/src/main/java/com/graphhopper/routing/util/EncoderDecorator.java
@@ -7,7 +7,7 @@
 public interface EncoderDecorator {
 	int defineWayBits(int shift);
 	long handleWayTags(Way way);
-	public InstructionAnnotation getAnnotation(long flags, Translation tr);
+	InstructionAnnotation getAnnotation(long flags, Translation tr);
 	long getBitMask(String[] attributes);
 	double getDouble(long flags);
 	long getLong(long flags);
diff --git a/core/src/main/java/com/graphhopper/routing/util/FlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/FlagEncoder.java
index 4c3d8edfcf..63833cc1f7 100644
--- a/core/src/main/java/com/graphhopper/routing/util/FlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/FlagEncoder.java
@@ -88,7 +88,7 @@
     /**
      * Reports wether this edge is part of a roundabout.
      */
-    static final int K_ROUNDABOUT = 2;
+    int K_ROUNDABOUT = 2;
 
     /**
      * Returns arbitrary boolean value identified by the specified key.
@@ -116,7 +116,7 @@
     /**
      * Returns true if the feature class is supported like TurnWeighting or PriorityWeighting.
      */
-    public boolean supports( Class<?> feature );
+    boolean supports( Class<?> feature );
 
     /**
      * @return additional cost or warning information for an instruction like ferry or road charges.
diff --git a/core/src/main/java/com/graphhopper/routing/util/LevelEdgeFilter.java b/core/src/main/java/com/graphhopper/routing/util/LevelEdgeFilter.java
index 985a4477d5..571b6e95e3 100644
--- a/core/src/main/java/com/graphhopper/routing/util/LevelEdgeFilter.java
+++ b/core/src/main/java/com/graphhopper/routing/util/LevelEdgeFilter.java
@@ -20,7 +20,6 @@
 import com.graphhopper.storage.LevelGraph;
 import com.graphhopper.util.EdgeIteratorState;
 import com.graphhopper.util.EdgeSkipIterState;
-import com.graphhopper.util.EdgeSkipIterator;
 
 /**
  * Only certain nodes are accepted and therefor the others are ignored.
diff --git a/core/src/main/java/com/graphhopper/routing/util/TurnCostEncoder.java b/core/src/main/java/com/graphhopper/routing/util/TurnCostEncoder.java
index ca8ce6cb7c..ed4ca67e9a 100644
--- a/core/src/main/java/com/graphhopper/routing/util/TurnCostEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/TurnCostEncoder.java
@@ -48,7 +48,7 @@
      * whether turn costs nor turn restrictions will be encoded by this encoder, should be used for
      * pedestrians
      */
-    static class NoTurnCostsEncoder implements TurnCostEncoder
+    class NoTurnCostsEncoder implements TurnCostEncoder
     {
 
         @Override
diff --git a/web/src/main/java/com/graphhopper/http/APIException.java b/web/src/main/java/com/graphhopper/http/APIException.java
index 70f9634612..bd801ec2dc 100644
--- a/web/src/main/java/com/graphhopper/http/APIException.java
+++ b/web/src/main/java/com/graphhopper/http/APIException.java
@@ -4,23 +4,23 @@
 import org.eclipse.jetty.http.HttpStatus.Code;
 
 public class APIException extends Exception {
-	/**
-	 * 
-	 */
-	private static final long serialVersionUID = 1L;
-	private HttpStatus.Code statusCode;
+    /**
+     *
+     */
+    private static final long serialVersionUID = 1L;
+    private HttpStatus.Code statusCode;
 
-	public APIException(Code statusCode, String message) {
-		super(message);
-		this.statusCode = statusCode;
-	}
-	
-	public HttpStatus.Code getStatusCode() {
-		return statusCode;
-	}
-	
-	public String getStatusMessage() {
-		return getMessage();
-	}
+    public APIException(Code statusCode, String message) {
+        super(message);
+        this.statusCode = statusCode;
+    }
+
+    public HttpStatus.Code getStatusCode() {
+        return statusCode;
+    }
+
+    public String getStatusMessage() {
+        return getMessage();
+    }
 
 }
diff --git a/web/src/main/java/com/graphhopper/http/ApiResource.java b/web/src/main/java/com/graphhopper/http/ApiResource.java
index 830d044183..e087a5b937 100644
--- a/web/src/main/java/com/graphhopper/http/ApiResource.java
+++ b/web/src/main/java/com/graphhopper/http/ApiResource.java
@@ -12,7 +12,7 @@
 	ROUTE("route", new String[] { "point", "vehicle" }, new String[] { "point", "vehicle",
 			"locale", "instructions", "weighting", "algorithm", "points_encoded", "debug",
 			"pretty", "calc_points", "type", "avoidances", "private", "srs", "output_srs" }), NEAREST("nearest",
-					new String[] { "point"}, new String[] { "point", "srs", "output_srs" }), INFO("info", new String[] {},
+					new String[] { "point"}, new String[] { "point", "srs", "output_srs", "vehicle" }), INFO("info", new String[] {},
 							new String[] {"srs"});
 
 	public String[] getMandatoryValues()
diff --git a/web/src/main/java/com/graphhopper/http/GuiceServletConfig.java b/web/src/main/java/com/graphhopper/http/GuiceServletConfig.java
index 7f9807582c..830e6e03cd 100644
--- a/web/src/main/java/com/graphhopper/http/GuiceServletConfig.java
+++ b/web/src/main/java/com/graphhopper/http/GuiceServletConfig.java
@@ -22,7 +22,6 @@
 import com.google.inject.Module;
 import com.google.inject.servlet.GuiceServletContextListener;
 import com.graphhopper.util.CmdArgs;
-import com.jcabi.manifests.Manifests;
 
 /**
  * Replacement of web.xml used only for container deployment. Preferred method is to use GHServer.
diff --git a/web/src/main/java/com/graphhopper/http/InfoServlet.java b/web/src/main/java/com/graphhopper/http/InfoServlet.java
index 0501486e21..3c617d52d6 100644
--- a/web/src/main/java/com/graphhopper/http/InfoServlet.java
+++ b/web/src/main/java/com/graphhopper/http/InfoServlet.java
@@ -17,23 +17,20 @@
  */
 package com.graphhopper.http;
 
-import java.io.IOException;
-import java.util.ArrayList;
-import java.util.List;
-
-import javax.inject.Inject;
-import javax.servlet.ServletException;
-import javax.servlet.http.HttpServletRequest;
-import javax.servlet.http.HttpServletResponse;
-
-import org.json.JSONObject;
-
 import com.graphhopper.GraphHopper;
 import com.graphhopper.storage.StorableProperties;
 import com.graphhopper.util.Constants;
 import com.graphhopper.util.Helper;
 import com.graphhopper.util.shapes.BBox;
-import com.jcabi.manifests.Manifests;
+import org.json.JSONObject;
+
+import javax.inject.Inject;
+import javax.servlet.ServletException;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
 
 /**
  * @author Peter Karich
@@ -69,7 +66,7 @@ public void doGet( HttpServletRequest req, HttpServletResponse res ) throws Serv
 
         json.put("version", Constants.VERSION);
         String versionType = (Constants.SNAPSHOT) ? "!! NON-PRODUCTION RELEASE !!" : "Production";
-        json.put("version.type", versionType);
+        json.put("version_type", versionType);
         
         
         json.put("build_date", Constants.BUILD_DATE);
@@ -77,9 +74,9 @@ public void doGet( HttpServletRequest req, HttpServletResponse res ) throws Serv
         StorableProperties props = hopper.getGraph().getProperties();
         addIfSet(json, props, "osmreader.import.date", "import_date");
         addIfSet(json, props, "prepare.date");
-        addIfSet(json, props, "itn.data_version");
-        addIfSet(json, props, "hn.data_version");
-        addIfSet(json, props, "dpn.data_version");
+        addIfSet(json, props, "itn.data_version","itn_data_version");
+        addIfSet(json, props, "hn.data_version","hn_data_version");
+        addIfSet(json, props, "dpn.data_version","dpn_data_version");
         addIfSet(json, props, "import_version");
         addIfSet(json, props, "import_version.type");
 
diff --git a/web/src/main/java/com/graphhopper/http/InvalidParameterException.java b/web/src/main/java/com/graphhopper/http/InvalidParameterException.java
index 526d4ce38e..594935d248 100644
--- a/web/src/main/java/com/graphhopper/http/InvalidParameterException.java
+++ b/web/src/main/java/com/graphhopper/http/InvalidParameterException.java
@@ -4,14 +4,13 @@
 
 public class InvalidParameterException extends APIException {
 
-	public InvalidParameterException(String message )
-    {
-	    super(Code.BAD_REQUEST, message);
+    public InvalidParameterException(String message) {
+        super(Code.BAD_REQUEST, message);
     }
 
-	/**
-	 * 
-	 */
+    /**
+     *
+     */
     private static final long serialVersionUID = 1L;
 
 }
diff --git a/web/src/main/java/com/graphhopper/http/InvalidRequestServlet.java b/web/src/main/java/com/graphhopper/http/InvalidRequestServlet.java
index 59047fecfc..e3fc9595e6 100644
--- a/web/src/main/java/com/graphhopper/http/InvalidRequestServlet.java
+++ b/web/src/main/java/com/graphhopper/http/InvalidRequestServlet.java
@@ -15,51 +15,44 @@
  */
 package com.graphhopper.http;
 
-import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;
-
-import java.io.IOException;
-import java.util.HashMap;
-import java.util.Map;
+import com.graphhopper.GHResponse;
+import org.eclipse.jetty.http.HttpStatus.Code;
+import org.json.JSONObject;
 
 import javax.servlet.ServletException;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
+import java.io.IOException;
+import java.util.HashMap;
+import java.util.Map;
 
-import org.eclipse.jetty.http.HttpStatus.Code;
-import org.json.JSONObject;
-
-import com.graphhopper.GHResponse;
+import static javax.servlet.http.HttpServletResponse.SC_NOT_FOUND;
 
-public class InvalidRequestServlet extends GHBaseServlet
-{
-	@Override
-	protected void service( HttpServletRequest req, HttpServletResponse res )
-			throws ServletException, IOException
-	{
-		String resource = req.getRequestURI();
-		if (resource.startsWith("/") && resource.length() > 1)
-		{
-			resource = resource.substring(1, resource.length());
-		}
+public class InvalidRequestServlet extends GHBaseServlet {
+    @Override
+    protected void service(HttpServletRequest req, HttpServletResponse res)
+            throws ServletException, IOException {
+        String resource = req.getRequestURI();
+        if (resource.startsWith("/") && resource.length() > 1) {
+            resource = resource.substring(1, resource.length());
+        }
 
-		String message = "Resource " + resource
-				+ " does not exist. Valid resources are route, nearest.";
-		boolean isGpx = "gpx".equals(req.getParameter("type"));
-		if (isGpx)
-		{
-			GHResponse ghResponse = new GHResponse().addError(new APIException(Code.NOT_FOUND,
-			        message));
-			String xml = createGPXString(req, res, ghResponse);
-			res.setStatus(SC_NOT_FOUND);
-			res.getWriter().append(xml);
-		} else
-		{
-			JSONObject json = new JSONObject();
-			Map<String, Object> map = new HashMap<>();
-			map.put("statuscode", "" + HttpServletResponse.SC_NOT_FOUND);
-			map.put("message", message);
-			json.put("error", map);
-			writeJsonError(res, HttpServletResponse.SC_NOT_FOUND, json);
-		}
-	}
+        String message = "Resource " + resource
+                + " does not exist. Valid resources are route, nearest.";
+        boolean isGpx = "gpx".equals(req.getParameter("type"));
+        if (isGpx) {
+            GHResponse ghResponse = new GHResponse().addError(new APIException(Code.NOT_FOUND,
+                    message));
+            String xml = createGPXString(req, res, ghResponse);
+            res.setStatus(SC_NOT_FOUND);
+            res.getWriter().append(xml);
+        } else {
+            JSONObject json = new JSONObject();
+            Map<String, Object> map = new HashMap<>();
+            map.put("statuscode", "" + HttpServletResponse.SC_NOT_FOUND);
+            map.put("message", message);
+            json.put("error", map);
+            writeJsonError(res, HttpServletResponse.SC_NOT_FOUND, json);
+        }
+    }
 }
\ No newline at end of file
diff --git a/web/src/main/java/com/graphhopper/http/MissingParameterException.java b/web/src/main/java/com/graphhopper/http/MissingParameterException.java
index 5300e9ba2f..8b46a7542a 100644
--- a/web/src/main/java/com/graphhopper/http/MissingParameterException.java
+++ b/web/src/main/java/com/graphhopper/http/MissingParameterException.java
@@ -4,15 +4,15 @@
 
 public class MissingParameterException extends APIException {
 
-	/**
-	 * 
-	 */
-	private static final long serialVersionUID = 1L;
-	
-	private static String message = "No %s parameter provided.";
+    /**
+     *
+     */
+    private static final long serialVersionUID = 1L;
 
-	public MissingParameterException(String parameter) {
-		super(HttpStatus.Code.BAD_REQUEST, String.format(message , parameter));
-	}
+    private static String message = "No %s parameter provided.";
+
+    public MissingParameterException(String parameter) {
+        super(HttpStatus.Code.BAD_REQUEST, String.format(message, parameter));
+    }
 
 }
diff --git a/web/src/main/java/com/graphhopper/http/NearestServlet.java b/web/src/main/java/com/graphhopper/http/NearestServlet.java
index 05400f67f7..1ffb892286 100644
--- a/web/src/main/java/com/graphhopper/http/NearestServlet.java
+++ b/web/src/main/java/com/graphhopper/http/NearestServlet.java
@@ -17,26 +17,11 @@
  */
 package com.graphhopper.http;
 
-import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;
-
-import java.io.IOException;
-import java.util.HashMap;
-import java.util.List;
-import java.util.Map;
-
-import javax.inject.Inject;
-import javax.servlet.ServletException;
-import javax.servlet.http.HttpServletRequest;
-import javax.servlet.http.HttpServletResponse;
-
-import org.json.JSONArray;
-import org.json.JSONObject;
-import org.opengis.referencing.FactoryException;
-import org.opengis.referencing.operation.TransformException;
-
 import com.graphhopper.GHResponse;
 import com.graphhopper.GraphHopper;
+import com.graphhopper.routing.util.DefaultEdgeFilter;
 import com.graphhopper.routing.util.EdgeFilter;
+import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.storage.index.LocationIndex;
 import com.graphhopper.storage.index.QueryResult;
 import com.graphhopper.util.DistanceCalc;
@@ -44,6 +29,21 @@
 import com.graphhopper.util.shapes.GHPoint;
 import com.graphhopper.util.shapes.GHPoint3D;
 import com.graphhopper.util.shapes.GHResponseCoordinateTransformer;
+import org.json.JSONArray;
+import org.json.JSONObject;
+import org.opengis.referencing.FactoryException;
+import org.opengis.referencing.operation.TransformException;
+
+import javax.inject.Inject;
+import javax.servlet.ServletException;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+import java.io.IOException;
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+
+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;
 
 /**
  * @author svantulden
@@ -62,27 +62,35 @@ public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes )
 		GHResponse ghRsp = null;
 		Map<String, Object> map = new HashMap<>();
 		GHResponseCoordinateTransformer transformer = null;
-		try
-		{
-			ApiResource.NEAREST.checkAllRequestParameters(httpReq);
-			String srs = getParam(httpReq, "srs", defaultSRS);
-			String outputSrs = getParam(httpReq, "output_srs", srs);
+		try {
+            ApiResource.NEAREST.checkAllRequestParameters(httpReq);
+            String srs = getParam(httpReq, "srs", defaultSRS);
+            String outputSrs = getParam(httpReq, "output_srs", srs);
+            String vehicleStr = getParam(httpReq, "vehicle", null);
 
-			List<GHPoint> infoPoints = getPoints(httpReq, "point");
-			if (infoPoints.size() > 1)
-			{
-				throw new InvalidParameterException(
-				        "Only one point should be specified and it must be a comma separated coordinate in "
-				        + srs
-				        + " projection.");
-			}
-			
-			boolean enabledElevation = getBooleanParam(httpReq, "elevation", false);
-			transformer = new GHResponseCoordinateTransformer(outputSrs);
+            List<GHPoint> infoPoints = getPoints(httpReq, "point");
+            if (infoPoints.size() > 1) {
+                throw new InvalidParameterException(
+                        "Only one point should be specified and it must be a comma separated coordinate in "
+                                + srs
+                                + " projection.");
+            }
+
+            boolean enabledElevation = getBooleanParam(httpReq, "elevation", false);
+            transformer = new GHResponseCoordinateTransformer(outputSrs);
+
+            GHPoint place = infoPoints.get(0);
+            LocationIndex index = hopper.getLocationIndex();
+            EdgeFilter filter;
+            if (null != vehicleStr) {
+                FlagEncoder algoVehicle = hopper.getEncodingManager()
+                    .getEncoder(vehicleStr);
+                filter = new DefaultEdgeFilter(algoVehicle, true, true);
+            } else {
+                filter = EdgeFilter.ALL_EDGES;
+            }
 
-			GHPoint place = infoPoints.get(0);
-			LocationIndex index = hopper.getLocationIndex();
-			QueryResult qr = index.findClosest(place.lat, place.lon, EdgeFilter.ALL_EDGES);
+			QueryResult qr = index.findClosest(place.lat, place.lon, filter);
 			if (!qr.isValid())
 			{
 				map.put("error", "Nearest point cannot be found!");
diff --git a/web/src/main/java/com/graphhopper/http/NoSuchParameterException.java b/web/src/main/java/com/graphhopper/http/NoSuchParameterException.java
index aaf6cf4d18..fba8b31d15 100644
--- a/web/src/main/java/com/graphhopper/http/NoSuchParameterException.java
+++ b/web/src/main/java/com/graphhopper/http/NoSuchParameterException.java
@@ -4,13 +4,13 @@
 
 public class NoSuchParameterException extends APIException {
 
-	public NoSuchParameterException(String message) {
-		super(Code.BAD_REQUEST, message);
-	}
+    public NoSuchParameterException(String message) {
+        super(Code.BAD_REQUEST, message);
+    }
 
-	/**
-	 * 
-	 */
-	private static final long serialVersionUID = 1L;
+    /**
+     *
+     */
+    private static final long serialVersionUID = 1L;
 
 }
diff --git a/web/src/main/java/com/graphhopper/http/validation/BooleanValidator.java b/web/src/main/java/com/graphhopper/http/validation/BooleanValidator.java
index b02e178f2a..624ef39fe9 100644
--- a/web/src/main/java/com/graphhopper/http/validation/BooleanValidator.java
+++ b/web/src/main/java/com/graphhopper/http/validation/BooleanValidator.java
@@ -1,11 +1,9 @@
 package com.graphhopper.http.validation;
 
-public class BooleanValidator
-{
+public class BooleanValidator {
 
-	public boolean isValid( String param )
-	{
-		return "true".equalsIgnoreCase(param) || "false".equalsIgnoreCase(param);
-	}
+    public boolean isValid(String param) {
+        return "true".equalsIgnoreCase(param) || "false".equalsIgnoreCase(param);
+    }
 
 }
diff --git a/web/src/main/java/com/graphhopper/http/validation/CaseInsensitiveStringListValidator.java b/web/src/main/java/com/graphhopper/http/validation/CaseInsensitiveStringListValidator.java
index a91b52f34c..3c5f551e10 100644
--- a/web/src/main/java/com/graphhopper/http/validation/CaseInsensitiveStringListValidator.java
+++ b/web/src/main/java/com/graphhopper/http/validation/CaseInsensitiveStringListValidator.java
@@ -3,22 +3,17 @@
 import java.util.Arrays;
 import java.util.List;
 
-public class CaseInsensitiveStringListValidator
-{
-	public boolean isValid( String value, String... validValues )
-	{
-		return isValid(value, Arrays.asList(validValues));
-	}
+public class CaseInsensitiveStringListValidator {
+    public boolean isValid(String value, String... validValues) {
+        return isValid(value, Arrays.asList(validValues));
+    }
 
-	public boolean isValid( String value, List<String> validValues )
-	{
-		for (String validValue : validValues)
-		{
-			if (value.equalsIgnoreCase(validValue))
-			{
-				return true;
-			}
-		}
-		return false;
-	}
+    public boolean isValid(String value, List<String> validValues) {
+        for (String validValue : validValues) {
+            if (value.equalsIgnoreCase(validValue)) {
+                return true;
+            }
+        }
+        return false;
+    }
 }
diff --git a/web/src/test/java/com/graphhopper/http/ApiResourceTest.java b/web/src/test/java/com/graphhopper/http/ApiResourceTest.java
index 9fa9e4baf1..e174311e08 100644
--- a/web/src/test/java/com/graphhopper/http/ApiResourceTest.java
+++ b/web/src/test/java/com/graphhopper/http/ApiResourceTest.java
@@ -1,22 +1,19 @@
 package com.graphhopper.http;
 
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.fail;
-import static org.mockito.Mockito.when;
-import static com.graphhopper.http.ApiResource.ROUTE;
-import static com.graphhopper.http.ApiResource.NEAREST;
-import static com.graphhopper.http.ApiResource.INFO;
+import org.junit.Test;
+import org.junit.runner.RunWith;
+import org.mockito.Mock;
+import org.mockito.runners.MockitoJUnitRunner;
 
+import javax.servlet.http.HttpServletRequest;
 import java.util.Collections;
 import java.util.HashMap;
 import java.util.Map;
 
-import javax.servlet.http.HttpServletRequest;
-
-import org.junit.Test;
-import org.junit.runner.RunWith;
-import org.mockito.Mock;
-import org.mockito.runners.MockitoJUnitRunner;
+import static com.graphhopper.http.ApiResource.*;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.fail;
+import static org.mockito.Mockito.when;
 
 //The values of parameters are immaterial, there are only two classes of equivalence: [nullPointer] and [nonNullString].
 //One distinguishes between 'thenReturn(null)' and 'thenReturn(*nonNullString*)' only.
@@ -156,6 +153,7 @@ public void testAllMandatoryAndAllValidParametersForNearest()
 		// valid
 		allParameters.put("srs", new String[] { "x" });
 		allParameters.put("output_srs", new String[] {"x"});
+        allParameters.put("vehicle", new String[] {"x"});
 		when(request.getParameterMap()).thenReturn(allParameters);
 		try
 		{
@@ -175,6 +173,7 @@ public void testAllMandatoryAllValidParametersAndIncorrectOnesForNearest()
 		// valid
 		allParameters.put("srs", new String[] { "x" });
 		allParameters.put("output_srs", new String[] {"x"});
+        allParameters.put("vehicle", new String[] {"x"});
 		// incorrect
 		allParameters.put("bogus", new String[] { "x" });
 		when(request.getParameterMap()).thenReturn(allParameters);
@@ -187,7 +186,7 @@ public void testAllMandatoryAllValidParametersAndIncorrectOnesForNearest()
 		} catch (NoSuchParameterException e)
 		{
 			assertEquals(
-			        "Parameter bogus is not a valid parameter for resource nearest. Valid parameters for requested resource are point, srs, output_srs.",
+			        "Parameter bogus is not a valid parameter for resource nearest. Valid parameters for requested resource are point, srs, output_srs, vehicle.",
 			        e.getMessage());
 		}
 	}
diff --git a/web/src/test/java/com/graphhopper/http/InfoServletTest.java b/web/src/test/java/com/graphhopper/http/InfoServletTest.java
new file mode 100644
index 0000000000..efa5024041
--- /dev/null
+++ b/web/src/test/java/com/graphhopper/http/InfoServletTest.java
@@ -0,0 +1,143 @@
+package com.graphhopper.http;
+
+import com.google.inject.AbstractModule;
+import com.google.inject.Guice;
+import com.google.inject.Injector;
+import com.google.inject.name.Names;
+import com.graphhopper.GraphHopper;
+import com.graphhopper.routing.util.EncodingManager;
+import com.graphhopper.routing.util.FlagEncoder;
+import com.graphhopper.storage.GraphStorage;
+import com.graphhopper.storage.StorableProperties;
+import com.graphhopper.storage.index.LocationIndex;
+import com.graphhopper.storage.index.QueryResult;
+import com.graphhopper.util.shapes.BBox;
+import org.apache.commons.io.FileUtils;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import javax.servlet.ServletException;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+import java.io.File;
+import java.io.IOException;
+import java.io.PrintWriter;
+import java.util.HashMap;
+import java.util.Map;
+
+import static org.junit.Assert.assertEquals;
+import static org.mockito.Mockito.when;
+
+public class InfoServletTest
+{
+
+    private Injector injector;
+
+    @Mock
+    private HttpServletRequest httpServletRequest;
+
+    @Mock
+    private HttpServletResponse httpServletResponse;
+
+    @Mock
+    private LocationIndex locationIndex;
+
+    @Mock
+    private GraphHopper graphHopper;
+
+    @Mock
+    private EncodingManager encodingManager;
+
+    @Mock
+    private FlagEncoder flagEncoder;
+
+    @Mock
+    private GraphStorage graph;
+
+
+    @Mock
+    private StorableProperties storableProperties;
+
+
+    @Mock
+    QueryResult queryResult;
+
+    private Map<String, String[]> requestParameters;
+
+    private InfoServlet infoServlet;
+
+    private PrintWriter writer;
+
+    private final String[] SINGLE_POINT = { "50.728198,-3.534516" };
+    private final String[] SINGLE_VEHICLE = { "car" };
+    private final String[] INVALID_TOO_MANY_POINTS = { "50.728198,-3.534516", "50.726807,-3.530156" };
+
+    @Before
+    public void setUp() throws Exception
+    {
+        MockitoAnnotations.initMocks(this);
+        injector = Guice.createInjector(new AbstractModule()
+        {
+            @Override
+            protected void configure()
+            {
+                bind(GraphHopper.class).toInstance(graphHopper);
+                bind(Boolean.class).annotatedWith(Names.named("internalErrorsAllowed")).toInstance(
+                        false);
+                bind(Boolean.class).annotatedWith(Names.named("jsonpAllowed")).toInstance(false);
+                bind(String.class).annotatedWith(Names.named("defaultSrs")).toInstance("WGS84");
+            }
+        });
+
+        infoServlet = injector.getInstance(InfoServlet.class);
+        requestParameters = new HashMap<>();
+        writer = new PrintWriter("httpServletResponseContents");
+        when(httpServletResponse.getWriter()).thenReturn(writer);
+        when(graphHopper.hasElevation()).thenReturn(false);
+        when(graphHopper.getGraph()).thenReturn(graph);
+        BBox bounds = new BBox(1,2,3,4,5,6);
+        when(graph.getBounds()).thenReturn(bounds);
+
+
+        when(graphHopper.getGraph().getEncodingManager()).thenReturn(encodingManager);
+        when(graph.getProperties()).thenReturn(storableProperties);
+
+        when(storableProperties.get("osmreader.import.date")).thenReturn("importDate");
+        when(storableProperties.get("dpn.data_version")).thenReturn("dpnVersion");
+        when(storableProperties.get("itn.data_version")).thenReturn("itnVersion");
+        when(storableProperties.get("hn.data_version")).thenReturn("hnVersion");
+    }
+
+    @After
+    public void tearDown() throws Exception
+    {
+        injector = null;
+    }
+
+    @Test
+    public void testDoGetHttpServletRequestHttpServletResponse()
+            throws IOException, ServletException
+    {
+
+        infoServlet.doGet(httpServletRequest, httpServletResponse);
+
+        writer.flush();
+        System.err.println(FileUtils
+                .readFileToString(new File("httpServletResponseContents"), "UTF-8")
+                );
+        assertEquals("{\"features\":{\"encodingManager\":{\"elevation\":false}}," +
+                "\"build_date\":\"2016-03-04T11:26:32+0000\"," +
+                "\"supported_vehicles\":[\"encodingManager\"]," +
+                "\"version_type\":\"!! NON-PRODUCTION RELEASE !!\"," +
+                "\"bbox\":[1,3,2,4]," +
+                "\"hn_data_version\":\"hnVersion\"," +
+                "\"dpn_data_version\":\"dpnVersion\"," +
+                "\"version\":\"0.4.5.11\"," +
+                "\"itn_data_version\":\"itnVersion\"," +
+                "\"import_date\":\"importDate\"}", FileUtils
+                .readFileToString(new File("httpServletResponseContents"), "UTF-8"));
+    }
+}
diff --git a/web/src/test/java/com/graphhopper/http/NearestServletTest.java b/web/src/test/java/com/graphhopper/http/NearestServletTest.java
index 014f2f4b06..bf69a730b6 100644
--- a/web/src/test/java/com/graphhopper/http/NearestServletTest.java
+++ b/web/src/test/java/com/graphhopper/http/NearestServletTest.java
@@ -1,35 +1,37 @@
 package com.graphhopper.http;
 
-import static org.junit.Assert.assertTrue;
-import static org.mockito.Matchers.any;
-import static org.mockito.Matchers.anyDouble;
-import static org.mockito.Mockito.when;
-
-import java.io.File;
-import java.io.IOException;
-import java.io.PrintWriter;
-import java.util.HashMap;
-import java.util.Map;
-
-import javax.servlet.ServletException;
-import javax.servlet.http.HttpServletRequest;
-import javax.servlet.http.HttpServletResponse;
-
-import org.apache.commons.io.FileUtils;
-import org.junit.After;
-import org.junit.Before;
-import org.junit.Test;
-import org.mockito.Mock;
-import org.mockito.MockitoAnnotations;
-
 import com.google.inject.AbstractModule;
 import com.google.inject.Guice;
 import com.google.inject.Injector;
 import com.google.inject.name.Names;
 import com.graphhopper.GraphHopper;
 import com.graphhopper.routing.util.EdgeFilter;
+import com.graphhopper.routing.util.EncodingManager;
+import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.storage.index.LocationIndex;
 import com.graphhopper.storage.index.QueryResult;
+import org.apache.commons.io.FileUtils;
+import org.junit.After;
+import org.junit.Before;
+import org.junit.Test;
+import org.mockito.ArgumentCaptor;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import javax.servlet.ServletException;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+import java.io.File;
+import java.io.IOException;
+import java.io.PrintWriter;
+import java.util.HashMap;
+import java.util.Map;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+import static org.mockito.Matchers.*;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
 
 public class NearestServletTest
 {
@@ -48,6 +50,12 @@
     @Mock
     private GraphHopper graphHopper;
 
+    @Mock
+    private EncodingManager encodingManager;
+
+    @Mock
+    private FlagEncoder flagEncoder;
+
     @Mock
     QueryResult queryResult;
 
@@ -58,6 +66,7 @@
     private PrintWriter writer;
 
     private final String[] SINGLE_POINT = { "50.728198,-3.534516" };
+    private final String[] SINGLE_VEHICLE = { "car" };
     private final String[] INVALID_TOO_MANY_POINTS = { "50.728198,-3.534516", "50.726807,-3.530156" };
 
     @Before
@@ -82,6 +91,9 @@ protected void configure()
         writer = new PrintWriter("httpServletResponseContents");
         when(httpServletResponse.getWriter()).thenReturn(writer);
         when(graphHopper.hasElevation()).thenReturn(false);
+        when(graphHopper.getEncodingManager()).thenReturn(encodingManager);
+        when(encodingManager.getEncoder("car")).thenReturn(flagEncoder);
+        when(flagEncoder.toString()).thenReturn("car");
     }
 
     @After
@@ -123,6 +135,33 @@ public void testDoGetHttpServletRequestHttpServletResponseWithOnePoint()
         when(queryResult.isValid()).thenReturn(false);
 
         nearestServlet.doGet(httpServletRequest, httpServletResponse);
+        ArgumentCaptor<EdgeFilter> argument = ArgumentCaptor.forClass(EdgeFilter.class);
+        verify(locationIndex).findClosest(anyDouble(), anyDouble(), argument.capture());
+        assertTrue("com.graphhopper.routing.util.EdgeFilter", argument.getValue().toString().startsWith("com.graphhopper.routing.util.EdgeFilter"));
+
+
+        writer.flush();
+        assertTrue(FileUtils.readFileToString(new File("httpServletResponseContents"), "UTF-8")
+                .contains("Nearest point cannot be found!"));
+    }
+
+    @Test
+    public void testDoGetHttpServletRequestHttpServletResponseWithOnePointAndVehicle()
+            throws ServletException, IOException
+    {
+
+        requestParameters.put("point", SINGLE_POINT);
+        requestParameters.put("vehicle", SINGLE_VEHICLE);
+        when(httpServletRequest.getParameterMap()).thenReturn(requestParameters);
+        when(graphHopper.getLocationIndex()).thenReturn(locationIndex);
+        when(locationIndex.findClosest(anyDouble(), anyDouble(), any(EdgeFilter.class)))
+                .thenReturn(queryResult);
+        when(queryResult.isValid()).thenReturn(false);
+
+        nearestServlet.doGet(httpServletRequest, httpServletResponse);
+        ArgumentCaptor<EdgeFilter> argument = ArgumentCaptor.forClass(EdgeFilter.class);
+        verify(locationIndex).findClosest(anyDouble(), anyDouble(), argument.capture());
+        assertEquals("car, in:true, out:true", argument.getValue().toString());
 
         writer.flush();
         assertTrue(FileUtils.readFileToString(new File("httpServletResponseContents"), "UTF-8")
