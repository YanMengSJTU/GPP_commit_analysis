diff --git a/core/src/main/java/com/graphhopper/routing/Dijkstra.java b/core/src/main/java/com/graphhopper/routing/Dijkstra.java
index b57650f9e6..b3919cee0f 100644
--- a/core/src/main/java/com/graphhopper/routing/Dijkstra.java
+++ b/core/src/main/java/com/graphhopper/routing/Dijkstra.java
@@ -20,6 +20,7 @@
 import com.carrotsearch.hppc.IntObjectMap;
 import com.graphhopper.coll.GHIntObjectHashMap;
 import com.graphhopper.routing.util.TraversalMode;
+import com.graphhopper.routing.weighting.TDWeightingI;
 import com.graphhopper.routing.weighting.Weighting;
 import com.graphhopper.storage.Graph;
 import com.graphhopper.storage.SPTEntry;
@@ -59,6 +60,7 @@ public Path calcPath(int from, int to) {
         checkAlreadyRun();
         this.to = to;
         currEdge = createSPTEntry(from, 0);
+        currEdge.time = 0;
         if (!traversalMode.isEdgeBased()) {
             fromMap.put(from, currEdge);
         }
@@ -88,6 +90,9 @@ protected void runAlgo() {
                 if (nEdge == null) {
                     nEdge = new SPTEntry(iter.getEdge(), iter.getAdjNode(), tmpWeight);
                     nEdge.parent = currEdge;
+                    if (weighting instanceof TDWeightingI) {
+                        nEdge.time = ((TDWeightingI) weighting).calcTDMillis(iter, false, currEdge.edge, currEdge.time) + currEdge.time;
+                    }
                     fromMap.put(traversalId, nEdge);
                     fromHeap.add(nEdge);
                 } else if (nEdge.weight > tmpWeight) {
@@ -95,6 +100,9 @@ protected void runAlgo() {
                     nEdge.edge = iter.getEdge();
                     nEdge.weight = tmpWeight;
                     nEdge.parent = currEdge;
+                    if (weighting instanceof TDWeightingI) {
+                        nEdge.time = ((TDWeightingI) weighting).calcTDMillis(iter, false, currEdge.edge, currEdge.time) + currEdge.time;
+                    }
                     fromHeap.add(nEdge);
                 } else
                     continue;
diff --git a/core/src/main/java/com/graphhopper/routing/Path.java b/core/src/main/java/com/graphhopper/routing/Path.java
index 99745cf119..450230da1c 100644
--- a/core/src/main/java/com/graphhopper/routing/Path.java
+++ b/core/src/main/java/com/graphhopper/routing/Path.java
@@ -206,7 +206,9 @@ public Path extract() {
             processEdge(currEdge.edge, currEdge.adjNode, nextEdge);
             currEdge = currEdge.parent;
         }
-
+        if (weighting instanceof TDWeightingI) {
+            time = sptEntry.time;
+        }
         setFromNode(currEdge.adjNode);
         reverseOrder();
         extractSW.stop();
@@ -240,9 +242,7 @@ public String getDebugInfo() {
     protected void processEdge(int edgeId, int adjNode, int prevEdgeId) {
         EdgeIteratorState iter = graph.getEdgeIteratorState(edgeId, adjNode);
         distance += iter.getDistance();
-        if (weighting instanceof TDWeightingI) {
-            time += ((TDWeightingI) weighting).calcTDMillis(iter, false, prevEdgeId, time);
-        } else {
+        if (!(weighting instanceof TDWeightingI)) {
             time += weighting.calcMillis(iter, false, prevEdgeId);
         }
         addEdge(edgeId);
diff --git a/core/src/main/java/com/graphhopper/storage/SPTEntry.java b/core/src/main/java/com/graphhopper/storage/SPTEntry.java
index daaac4bcf8..db123b76f4 100644
--- a/core/src/main/java/com/graphhopper/storage/SPTEntry.java
+++ b/core/src/main/java/com/graphhopper/storage/SPTEntry.java
@@ -27,6 +27,7 @@
     public int edge;
     public int adjNode;
     public double weight;
+    public long time;
     public SPTEntry parent;
 
     public SPTEntry(int edgeId, int adjNode, double weight) {
diff --git a/web/src/test/java/com/graphhopper/swl/TDNetworkIT.java b/web/src/test/java/com/graphhopper/swl/TDNetworkIT.java
index e46db9be44..a2f86c732e 100644
--- a/web/src/test/java/com/graphhopper/swl/TDNetworkIT.java
+++ b/web/src/test/java/com/graphhopper/swl/TDNetworkIT.java
@@ -87,17 +87,13 @@ public void testMonacoFastest() {
             assertEquals(time.get(i).getLast(), edgeIds.get(i).getLast());
         }
 
-        for (int i=0; i<EXPECTED_LINKS_IN_PATH; i++) {
-            System.out.printf("%d\t%d\t\n", edgeIds.get(i).getValue(), time.get(i).getValue());
-        }
-
         assertEquals(EXPECTED_TOTAL_TRAVEL_TIME, sumTimes(time));
-
     }
 
     @Test
     public void testMonacoTD() {
         GHRequest request = new GHRequest(42.56819, 1.603231, 42.571034, 1.520662);
+        request.setAlgorithm("dijkstra");
         request.setPathDetails(Arrays.asList("time", "r5_edge_id"));
         request.getHints().put("ch.disable", true);
         request.setWeighting("td");
@@ -105,16 +101,13 @@ public void testMonacoTD() {
         List<PathDetail> time = route.getBest().getPathDetails().get("time");
         List<PathDetail> edgeIds = route.getBest().getPathDetails().get("r5_edge_id");
         final int EXPECTED_LINKS_IN_PATH = 52;
-        final long EXPECTED_TOTAL_TRAVEL_TIME = 1277122;
+        final long EXPECTED_TOTAL_TRAVEL_TIME = 1292971;
 
         assertEquals(EXPECTED_LINKS_IN_PATH, time.size());
         assertEquals(EXPECTED_LINKS_IN_PATH, edgeIds.size());
 
-        for (int i=0; i<EXPECTED_LINKS_IN_PATH; i++) {
-            System.out.printf("%d\t%d\t\n", edgeIds.get(i).getValue(), time.get(i).getValue());
-        }
-        assertEquals(EXPECTED_TOTAL_TRAVEL_TIME, route.getBest().getTime());
         assertEquals(EXPECTED_TOTAL_TRAVEL_TIME, sumTimes(time));
+        assertEquals(EXPECTED_TOTAL_TRAVEL_TIME, route.getBest().getTime());
     }
 
     private long sumTimes(List<PathDetail> time) {
