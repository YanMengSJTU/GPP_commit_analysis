diff --git a/core/src/main/java/com/graphhopper/routing/template/ViaRoutingTemplate.java b/core/src/main/java/com/graphhopper/routing/template/ViaRoutingTemplate.java
index 189871ca71..b93d3b5599 100644
--- a/core/src/main/java/com/graphhopper/routing/template/ViaRoutingTemplate.java
+++ b/core/src/main/java/com/graphhopper/routing/template/ViaRoutingTemplate.java
@@ -119,6 +119,7 @@ public ViaRoutingTemplate(GHRequest ghRequest, GHResponse ghRsp, LocationIndex l
                 if (departure_time == -1) {
                     throw new RuntimeException("Must specify departure_time in request.");
                 }
+                ((TDWeighting) algoOpts.getWeighting()).setInitialTime(departure_time * 1000);
                 tmpPathList = ((AbstractRoutingAlgorithm) algo).calcTDPaths(fromQResult.getClosestNode(), toQResult.getClosestNode(), departure_time * 1000);
             } else {
                 tmpPathList = algo.calcPaths(fromQResult.getClosestNode(), toQResult.getClosestNode());
diff --git a/core/src/main/java/com/graphhopper/routing/weighting/TDWeighting.java b/core/src/main/java/com/graphhopper/routing/weighting/TDWeighting.java
index a5ef56baae..657d00acc7 100644
--- a/core/src/main/java/com/graphhopper/routing/weighting/TDWeighting.java
+++ b/core/src/main/java/com/graphhopper/routing/weighting/TDWeighting.java
@@ -25,6 +25,8 @@
 
     long calcTDMillis(EdgeIteratorState edge, boolean reverse, int prevOrNextEdgeId, long linkEnterTime);
 
-    long getInitialTime();
+    int getInitialTime();
+
+    void setInitialTime(int i);
 }
 
diff --git a/web-bundle/src/main/java/com/graphhopper/swl/FastestCarTDWeighting.java b/web-bundle/src/main/java/com/graphhopper/swl/FastestCarTDWeighting.java
index 3c0aa477c2..a56c992f63 100644
--- a/web-bundle/src/main/java/com/graphhopper/swl/FastestCarTDWeighting.java
+++ b/web-bundle/src/main/java/com/graphhopper/swl/FastestCarTDWeighting.java
@@ -34,7 +34,7 @@
     private final SpeedCalculator speedCalculator;
     private final long headingPenaltyMillis;
     private final double headingPenalty;
-    private long initialTime;
+    private int initialTime;
 
     public FastestCarTDWeighting(FlagEncoder encoder, SpeedCalculator speedCalculator, PMap map) {
         this.encoder = encoder;
@@ -92,8 +92,13 @@ public long calcTDMillis(EdgeIteratorState edge, boolean reverse, int prevOrNext
     }
 
     @Override
-    public long getInitialTime() {
-        return 0;
+    public int getInitialTime() {
+        return initialTime;
+    }
+
+    @Override
+    public void setInitialTime(int initialTime) {
+        this.initialTime = initialTime;
     }
 
     @Override
