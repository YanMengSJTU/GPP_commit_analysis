diff --git a/acceptancetesting/JMeter/RandomTileRequestTestPlan/WSPIP_Proxy_Perf_TestPlan_Final.jmx b/acceptancetesting/JMeter/RandomTileRequestTestPlan/WSPIP_Proxy_Perf_TestPlan_Final.jmx
index 5789367034..ac1439b8a8 100644
--- a/acceptancetesting/JMeter/RandomTileRequestTestPlan/WSPIP_Proxy_Perf_TestPlan_Final.jmx
+++ b/acceptancetesting/JMeter/RandomTileRequestTestPlan/WSPIP_Proxy_Perf_TestPlan_Final.jmx
@@ -14,7 +14,7 @@
           </elementProp>
           <elementProp name="TileRow" elementType="Argument">
             <stringProp name="Argument.name">TileRow</stringProp>
-            <stringProp name="Argument.value">0</stringProp>
+            <stringProp name="Argument.value">3</stringProp>
             <stringProp name="Argument.metadata">=</stringProp>
           </elementProp>
           <elementProp name="TileColumn" elementType="Argument">
@@ -42,59 +42,6 @@
         <stringProp name="ThreadGroup.delay"></stringProp>
       </ThreadGroup>
       <hashTree>
-        <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="false">
-          <stringProp name="WhileController.condition">${__javaScript(${TileRow}==1)}</stringProp>
-        </WhileController>
-        <hashTree>
-          <JavaSampler guiclass="JavaTestSamplerGui" testclass="JavaSampler" testname="Java Request${TileRow}" enabled="true">
-            <elementProp name="arguments" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" enabled="true">
-              <collectionProp name="Arguments.arguments">
-                <elementProp name="Sleep_Time" elementType="Argument">
-                  <stringProp name="Argument.name">Sleep_Time</stringProp>
-                  <stringProp name="Argument.value">100</stringProp>
-                  <stringProp name="Argument.metadata">=</stringProp>
-                </elementProp>
-                <elementProp name="Sleep_Mask" elementType="Argument">
-                  <stringProp name="Argument.name">Sleep_Mask</stringProp>
-                  <stringProp name="Argument.value">0xFF</stringProp>
-                  <stringProp name="Argument.metadata">=</stringProp>
-                </elementProp>
-                <elementProp name="Label" elementType="Argument">
-                  <stringProp name="Argument.name">Label</stringProp>
-                  <stringProp name="Argument.value"></stringProp>
-                  <stringProp name="Argument.metadata">=</stringProp>
-                </elementProp>
-                <elementProp name="ResponseCode" elementType="Argument">
-                  <stringProp name="Argument.name">ResponseCode</stringProp>
-                  <stringProp name="Argument.value"></stringProp>
-                  <stringProp name="Argument.metadata">=</stringProp>
-                </elementProp>
-                <elementProp name="ResponseMessage" elementType="Argument">
-                  <stringProp name="Argument.name">ResponseMessage</stringProp>
-                  <stringProp name="Argument.value"></stringProp>
-                  <stringProp name="Argument.metadata">=</stringProp>
-                </elementProp>
-                <elementProp name="Status" elementType="Argument">
-                  <stringProp name="Argument.name">Status</stringProp>
-                  <stringProp name="Argument.value">OK</stringProp>
-                  <stringProp name="Argument.metadata">=</stringProp>
-                </elementProp>
-                <elementProp name="SamplerData" elementType="Argument">
-                  <stringProp name="Argument.name">SamplerData</stringProp>
-                  <stringProp name="Argument.value"></stringProp>
-                  <stringProp name="Argument.metadata">=</stringProp>
-                </elementProp>
-                <elementProp name="ResultData" elementType="Argument">
-                  <stringProp name="Argument.name">ResultData</stringProp>
-                  <stringProp name="Argument.value"></stringProp>
-                  <stringProp name="Argument.metadata">=</stringProp>
-                </elementProp>
-              </collectionProp>
-            </elementProp>
-            <stringProp name="classname">org.apache.jmeter.protocol.java.test.JavaTest</stringProp>
-          </JavaSampler>
-          <hashTree/>
-        </hashTree>
         <LoopController guiclass="LoopControlPanel" testclass="LoopController" testname="Zoom Layers" enabled="true">
           <boolProp name="LoopController.continue_forever">true</boolProp>
           <stringProp name="LoopController.loops">13</stringProp>
@@ -123,12 +70,48 @@
             <boolProp name="IfController.evaluateAll">false</boolProp>
           </IfController>
           <hashTree>
+            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Initialise Tile Column &amp; Row  Min ,Max for zoom level 0" enabled="true">
+              <stringProp name="scriptLanguage">javascript</stringProp>
+              <stringProp name="parameters"></stringProp>
+              <stringProp name="filename"></stringProp>
+              <stringProp name="script">//initialise TileColumn counter start value to be Tile Column minimum zoom level
+
+var r1=Number(vars.get(&quot;TileColumn&quot;));
+r1=0;
+vars.put(&quot;TileColumn&quot;,r1);
+vars.put(&quot;TileColumnMin&quot;,r1);
+
+//initialise TileRow counter start value to be Tile Row minimum zoom level
+
+var r2=Number(vars.get(&quot;TileRow&quot;));
+r2=3;
+vars.put(&quot;TileRow&quot;,r2);
+
+// set tile column minimum value for the zoom level
+vars.put(&quot;TileColumnMin&quot;,r1);
+// set tile row minimum value for the zoom level
+vars.put(&quot;TileRowMin&quot;,r2);
+
+// set tile column max value for the zoom level
+var tileColumnMax=Number(1);
+vars.put(&quot;TileColumnMax&quot;,tileColumnMax);
+
+
+// set tile row max value for the zoom level
+var tileRowMax=Number(5);
+vars.put(&quot;TileRowMax&quot;,tileRowMax);
+
+
+
+</stringProp>
+            </BSFSampler>
+            <hashTree/>
             <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
-              <stringProp name="WhileController.condition">${__javaScript(${TileRow}&lt;=3)}</stringProp>
+              <stringProp name="WhileController.condition">${__javaScript(${TileRow}&lt;=${TileRowMax})}</stringProp>
             </WhileController>
             <hashTree>
               <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
-                <stringProp name="WhileController.condition">${__javaScript(${TileColumn}&lt;=3)}</stringProp>
+                <stringProp name="WhileController.condition">${__javaScript(${TileColumn}&lt;=${TileColumnMax})}</stringProp>
               </WhileController>
               <hashTree>
                 <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Tile Request  for layer ${ZoomLayer} ${TileRow} ${TileColumn}" enabled="true">
@@ -233,39 +216,6 @@ c=c+1;
 vars.put(&quot;TileColumn&quot;,c);</stringProp>
                 </BSFSampler>
                 <hashTree/>
-                <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree" enabled="true">
-                  <boolProp name="ResultCollector.error_logging">false</boolProp>
-                  <objProp>
-                    <name>saveConfig</name>
-                    <value class="SampleSaveConfiguration">
-                      <time>true</time>
-                      <latency>true</latency>
-                      <timestamp>true</timestamp>
-                      <success>true</success>
-                      <label>true</label>
-                      <code>true</code>
-                      <message>true</message>
-                      <threadName>true</threadName>
-                      <dataType>true</dataType>
-                      <encoding>false</encoding>
-                      <assertions>true</assertions>
-                      <subresults>true</subresults>
-                      <responseData>false</responseData>
-                      <samplerData>false</samplerData>
-                      <xml>false</xml>
-                      <fieldNames>false</fieldNames>
-                      <responseHeaders>false</responseHeaders>
-                      <requestHeaders>false</requestHeaders>
-                      <responseDataOnError>false</responseDataOnError>
-                      <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
-                      <assertionsResultsToSave>0</assertionsResultsToSave>
-                      <bytes>true</bytes>
-                      <threadCounts>true</threadCounts>
-                    </value>
-                  </objProp>
-                  <stringProp name="filename"></stringProp>
-                </ResultCollector>
-                <hashTree/>
                 <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
                   <collectionProp name="Asserion.test_strings">
                     <stringProp name="49586">200</stringProp>
@@ -275,47 +225,211 @@ vars.put(&quot;TileColumn&quot;,c);</stringProp>
                   <intProp name="Assertion.test_type">16</intProp>
                 </ResponseAssertion>
                 <hashTree/>
-                <ResultCollector guiclass="RespTimeGraphVisualizer" testclass="ResultCollector" testname="Response Time Graph" enabled="true">
-                  <boolProp name="ResultCollector.error_logging">false</boolProp>
-                  <objProp>
-                    <name>saveConfig</name>
-                    <value class="SampleSaveConfiguration">
-                      <time>true</time>
-                      <latency>true</latency>
-                      <timestamp>true</timestamp>
-                      <success>true</success>
-                      <label>true</label>
-                      <code>true</code>
-                      <message>true</message>
-                      <threadName>true</threadName>
-                      <dataType>true</dataType>
-                      <encoding>false</encoding>
-                      <assertions>true</assertions>
-                      <subresults>true</subresults>
-                      <responseData>false</responseData>
-                      <samplerData>false</samplerData>
-                      <xml>false</xml>
-                      <fieldNames>false</fieldNames>
-                      <responseHeaders>false</responseHeaders>
-                      <requestHeaders>false</requestHeaders>
-                      <responseDataOnError>false</responseDataOnError>
-                      <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
-                      <assertionsResultsToSave>0</assertionsResultsToSave>
-                      <bytes>true</bytes>
-                      <threadCounts>true</threadCounts>
-                    </value>
-                  </objProp>
+              </hashTree>
+              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Set Tile Column to 0" enabled="true">
+                <stringProp name="scriptLanguage">javascript</stringProp>
+                <stringProp name="parameters"></stringProp>
+                <stringProp name="filename"></stringProp>
+                <stringProp name="script">var r=Number(vars.get(&quot;TileColumnMin&quot;));
+
+vars.put(&quot;TileColumn&quot;,r);</stringProp>
+              </BSFSampler>
+              <hashTree/>
+              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Increment Tile Row" enabled="true">
+                <stringProp name="scriptLanguage">javascript</stringProp>
+                <stringProp name="parameters"></stringProp>
+                <stringProp name="filename"></stringProp>
+                <stringProp name="script">var r=Number(vars.get(&quot;TileRow&quot;));
+r=r+1;
+
+vars.put(&quot;TileRow&quot;,r);</stringProp>
+              </BSFSampler>
+              <hashTree/>
+            </hashTree>
+            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Set Tile Row to 0" enabled="true">
+              <stringProp name="scriptLanguage">javascript</stringProp>
+              <stringProp name="parameters"></stringProp>
+              <stringProp name="filename"></stringProp>
+              <stringProp name="script">var r=Number(vars.get(&quot;TileRowMin&quot;));
+vars.put(&quot;TileRow&quot;,r);</stringProp>
+            </BSFSampler>
+            <hashTree/>
+          </hashTree>
+          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If ZoomLayer=1" enabled="true">
+            <stringProp name="IfController.condition">${ZoomLayer}==1</stringProp>
+            <boolProp name="IfController.evaluateAll">false</boolProp>
+          </IfController>
+          <hashTree>
+            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Initialise Tile Column &amp; Row  Min ,Max for zoom level 1" enabled="true">
+              <stringProp name="scriptLanguage">javascript</stringProp>
+              <stringProp name="parameters"></stringProp>
+              <stringProp name="filename"></stringProp>
+              <stringProp name="script">//initialise TileColumn counter start value to be Tile Column minimum zoom level
+
+var r1=Number(vars.get(&quot;TileColumn&quot;));
+r1=1;
+vars.put(&quot;TileColumn&quot;,r1);
+
+
+
+//initialise TileRow counter start value to be Tile Row minimum zoom level
+var r2=Number(vars.get(&quot;TileRow&quot;));
+r2=3;
+vars.put(&quot;TileRow&quot;,r2);
+
+
+
+// set tile column minimum value for the zoom level
+vars.put(&quot;TileColumnMin&quot;,r1);
+
+
+// set tile row minimum value for the zoom level
+vars.put(&quot;TileRowMin&quot;,r2);
+
+
+// set tile column max value for the zoom level
+var tileColumnMax=Number(3);
+vars.put(&quot;TileColumnMax&quot;,tileColumnMax);
+
+
+
+// set tile row max value for the zoom level
+var tileRowMax=Number(11);
+vars.put(&quot;TileRowMax&quot;,tileRowMax);
+
+
+
+
+
+
+</stringProp>
+            </BSFSampler>
+            <hashTree/>
+            <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
+              <stringProp name="WhileController.condition">${__javaScript(${TileRow}&lt;=${TileRowMax})}</stringProp>
+            </WhileController>
+            <hashTree>
+              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
+                <stringProp name="WhileController.condition">${__javaScript(${TileColumn}&lt;=${TileColumnMax})}</stringProp>
+              </WhileController>
+              <hashTree>
+                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Tile Request  for layer ${ZoomLayer} ${TileRow} ${TileColumn}" enabled="true">
+                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
+                    <collectionProp name="Arguments.arguments">
+                      <elementProp name="service" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">WMTS</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">service</stringProp>
+                      </elementProp>
+                      <elementProp name="request" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">GetTile</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">request</stringProp>
+                      </elementProp>
+                      <elementProp name="version" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">1.0.0</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">version</stringProp>
+                      </elementProp>
+                      <elementProp name="layer" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">Zoom+Map+Auto</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">layer</stringProp>
+                      </elementProp>
+                      <elementProp name="style" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">default</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">style</stringProp>
+                      </elementProp>
+                      <elementProp name="format" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">image/png</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">format</stringProp>
+                      </elementProp>
+                      <elementProp name="TileCol" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">${TileColumn}</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">TileCol</stringProp>
+                      </elementProp>
+                      <elementProp name="TileRow" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">${TileRow}</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">TileRow</stringProp>
+                      </elementProp>
+                      <elementProp name="TileMatrixSet" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">EPSG:27700</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">TileMatrixSet</stringProp>
+                      </elementProp>
+                      <elementProp name="TileMatrix" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">EPSG:27700:${ZoomLayer}</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">TileMatrix</stringProp>
+                      </elementProp>
+                    </collectionProp>
+                  </elementProp>
+                  <stringProp name="HTTPSampler.domain">gwccluster2-env.elasticbeanstalk.com</stringProp>
+                  <stringProp name="HTTPSampler.port"></stringProp>
+                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
+                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
+                  <stringProp name="HTTPSampler.protocol">http</stringProp>
+                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
+                  <stringProp name="HTTPSampler.path">/service/wmts?</stringProp>
+                  <stringProp name="HTTPSampler.method">GET</stringProp>
+                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
+                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
+                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
+                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
+                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
+                  <boolProp name="HTTPSampler.monitor">false</boolProp>
+                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
+                </HTTPSamplerProxy>
+                <hashTree/>
+                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Increment Tile Column" enabled="true">
+                  <stringProp name="scriptLanguage">javascript</stringProp>
+                  <stringProp name="parameters"></stringProp>
                   <stringProp name="filename"></stringProp>
-                </ResultCollector>
+                  <stringProp name="script">var c=Number(vars.get(&quot;TileColumn&quot;));
+c=c+1;
+
+vars.put(&quot;TileColumn&quot;,c);</stringProp>
+                </BSFSampler>
+                <hashTree/>
+                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
+                  <collectionProp name="Asserion.test_strings">
+                    <stringProp name="49586">200</stringProp>
+                  </collectionProp>
+                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
+                  <boolProp name="Assertion.assume_success">false</boolProp>
+                  <intProp name="Assertion.test_type">16</intProp>
+                </ResponseAssertion>
                 <hashTree/>
               </hashTree>
               <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Set Tile Column to 0" enabled="true">
                 <stringProp name="scriptLanguage">javascript</stringProp>
                 <stringProp name="parameters"></stringProp>
                 <stringProp name="filename"></stringProp>
-                <stringProp name="script">var r=Number(vars.get(&quot;TileColumn&quot;));
-r=0;
-
+                <stringProp name="script">var r=Number(vars.get(&quot;TileColumnMin&quot;));
 vars.put(&quot;TileColumn&quot;,r);</stringProp>
               </BSFSampler>
               <hashTree/>
@@ -334,9 +448,799 @@ vars.put(&quot;TileRow&quot;,r);</stringProp>
               <stringProp name="scriptLanguage">javascript</stringProp>
               <stringProp name="parameters"></stringProp>
               <stringProp name="filename"></stringProp>
-              <stringProp name="script">var r=Number(vars.get(&quot;TileRow&quot;));
-r=0;
+              <stringProp name="script">var r=Number(vars.get(&quot;TileRowMin&quot;));
+vars.put(&quot;TileRow&quot;,r);</stringProp>
+            </BSFSampler>
+            <hashTree/>
+          </hashTree>
+          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If ZoomLayer=2" enabled="true">
+            <stringProp name="IfController.condition">${ZoomLayer}==2</stringProp>
+            <boolProp name="IfController.evaluateAll">false</boolProp>
+          </IfController>
+          <hashTree>
+            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Initialise Tile Column &amp; Row  Min ,Max for zoom level 2" enabled="true">
+              <stringProp name="scriptLanguage">javascript</stringProp>
+              <stringProp name="parameters"></stringProp>
+              <stringProp name="filename"></stringProp>
+              <stringProp name="script">//initialise TileColumn counter start value to be Tile Column minimum zoom level
+
+var r1=Number(vars.get(&quot;TileColumn&quot;));
+r1=3;
+vars.put(&quot;TileColumn&quot;,r1);
+
+
+
+//initialise TileRow counter start value to be Tile Row minimum zoom level
+var r2=Number(vars.get(&quot;TileRow&quot;));
+r2=12;
+vars.put(&quot;TileRow&quot;,r2);
+
 
+
+// set tile column minimum value for the zoom level
+vars.put(&quot;TileColumnMin&quot;,r1);
+
+
+// set tile row minimum value for the zoom level
+vars.put(&quot;TileRowMin&quot;,r2);
+
+
+// set tile column max value for the zoom level
+var tileColumnMax=Number(7);
+vars.put(&quot;TileColumnMax&quot;,tileColumnMax);
+
+
+
+// set tile row max value for the zoom level
+var tileRowMax=Number(22);
+vars.put(&quot;TileRowMax&quot;,tileRowMax);
+
+
+
+
+
+
+</stringProp>
+            </BSFSampler>
+            <hashTree/>
+            <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
+              <stringProp name="WhileController.condition">${__javaScript(${TileRow}&lt;=${TileRowMax})}</stringProp>
+            </WhileController>
+            <hashTree>
+              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
+                <stringProp name="WhileController.condition">${__javaScript(${TileColumn}&lt;=${TileColumnMax})}</stringProp>
+              </WhileController>
+              <hashTree>
+                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Tile Request  for layer ${ZoomLayer} ${TileRow} ${TileColumn}" enabled="true">
+                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
+                    <collectionProp name="Arguments.arguments">
+                      <elementProp name="service" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">WMTS</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">service</stringProp>
+                      </elementProp>
+                      <elementProp name="request" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">GetTile</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">request</stringProp>
+                      </elementProp>
+                      <elementProp name="version" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">1.0.0</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">version</stringProp>
+                      </elementProp>
+                      <elementProp name="layer" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">Zoom+Map+Auto</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">layer</stringProp>
+                      </elementProp>
+                      <elementProp name="style" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">default</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">style</stringProp>
+                      </elementProp>
+                      <elementProp name="format" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">image/png</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">format</stringProp>
+                      </elementProp>
+                      <elementProp name="TileCol" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">${TileColumn}</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">TileCol</stringProp>
+                      </elementProp>
+                      <elementProp name="TileRow" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">${TileRow}</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">TileRow</stringProp>
+                      </elementProp>
+                      <elementProp name="TileMatrixSet" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">EPSG:27700</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">TileMatrixSet</stringProp>
+                      </elementProp>
+                      <elementProp name="TileMatrix" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">EPSG:27700:${ZoomLayer}</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">TileMatrix</stringProp>
+                      </elementProp>
+                    </collectionProp>
+                  </elementProp>
+                  <stringProp name="HTTPSampler.domain">gwccluster2-env.elasticbeanstalk.com</stringProp>
+                  <stringProp name="HTTPSampler.port"></stringProp>
+                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
+                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
+                  <stringProp name="HTTPSampler.protocol">http</stringProp>
+                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
+                  <stringProp name="HTTPSampler.path">/service/wmts?</stringProp>
+                  <stringProp name="HTTPSampler.method">GET</stringProp>
+                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
+                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
+                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
+                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
+                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
+                  <boolProp name="HTTPSampler.monitor">false</boolProp>
+                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
+                </HTTPSamplerProxy>
+                <hashTree/>
+                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Increment Tile Column" enabled="true">
+                  <stringProp name="scriptLanguage">javascript</stringProp>
+                  <stringProp name="parameters"></stringProp>
+                  <stringProp name="filename"></stringProp>
+                  <stringProp name="script">var c=Number(vars.get(&quot;TileColumn&quot;));
+c=c+1;
+
+vars.put(&quot;TileColumn&quot;,c);</stringProp>
+                </BSFSampler>
+                <hashTree/>
+                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
+                  <collectionProp name="Asserion.test_strings">
+                    <stringProp name="49586">200</stringProp>
+                  </collectionProp>
+                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
+                  <boolProp name="Assertion.assume_success">false</boolProp>
+                  <intProp name="Assertion.test_type">16</intProp>
+                </ResponseAssertion>
+                <hashTree/>
+              </hashTree>
+              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Set Tile Column to 0" enabled="true">
+                <stringProp name="scriptLanguage">javascript</stringProp>
+                <stringProp name="parameters"></stringProp>
+                <stringProp name="filename"></stringProp>
+                <stringProp name="script">var r=Number(vars.get(&quot;TileColumnMin&quot;));
+vars.put(&quot;TileColumn&quot;,r);</stringProp>
+              </BSFSampler>
+              <hashTree/>
+              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Increment Tile Row" enabled="true">
+                <stringProp name="scriptLanguage">javascript</stringProp>
+                <stringProp name="parameters"></stringProp>
+                <stringProp name="filename"></stringProp>
+                <stringProp name="script">var r=Number(vars.get(&quot;TileRow&quot;));
+r=r+1;
+
+vars.put(&quot;TileRow&quot;,r);</stringProp>
+              </BSFSampler>
+              <hashTree/>
+            </hashTree>
+            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Set Tile Row to 0" enabled="true">
+              <stringProp name="scriptLanguage">javascript</stringProp>
+              <stringProp name="parameters"></stringProp>
+              <stringProp name="filename"></stringProp>
+              <stringProp name="script">var r=Number(vars.get(&quot;TileRowMin&quot;));
+vars.put(&quot;TileRow&quot;,r);</stringProp>
+            </BSFSampler>
+            <hashTree/>
+          </hashTree>
+          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If ZoomLayer=3" enabled="true">
+            <stringProp name="IfController.condition">${ZoomLayer}==3</stringProp>
+            <boolProp name="IfController.evaluateAll">false</boolProp>
+          </IfController>
+          <hashTree>
+            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Initialise Tile Column &amp; Row  Min ,Max for zoom level 3" enabled="true">
+              <stringProp name="scriptLanguage">javascript</stringProp>
+              <stringProp name="parameters"></stringProp>
+              <stringProp name="filename"></stringProp>
+              <stringProp name="script">//initialise TileColumn counter start value to be Tile Column minimum zoom level
+
+var r1=Number(vars.get(&quot;TileColumn&quot;));
+r1=9;
+vars.put(&quot;TileColumn&quot;,r1);
+
+
+
+//initialise TileRow counter start value to be Tile Row minimum zoom level
+var r2=Number(vars.get(&quot;TileRow&quot;));
+r2=34;
+vars.put(&quot;TileRow&quot;,r2);
+
+
+
+// set tile column minimum value for the zoom level
+vars.put(&quot;TileColumnMin&quot;,r1);
+
+
+// set tile row minimum value for the zoom level
+vars.put(&quot;TileRowMin&quot;,r2);
+
+
+// set tile column max value for the zoom level
+var tileColumnMax=Number(18);
+vars.put(&quot;TileColumnMax&quot;,tileColumnMax);
+
+
+
+// set tile row max value for the zoom level
+var tileRowMax=Number(44);
+vars.put(&quot;TileRowMax&quot;,tileRowMax);
+
+
+
+
+
+
+</stringProp>
+            </BSFSampler>
+            <hashTree/>
+            <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
+              <stringProp name="WhileController.condition">${__javaScript(${TileRow}&lt;=${TileRowMax})}</stringProp>
+            </WhileController>
+            <hashTree>
+              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
+                <stringProp name="WhileController.condition">${__javaScript(${TileColumn}&lt;=${TileColumnMax})}</stringProp>
+              </WhileController>
+              <hashTree>
+                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Tile Request  for layer ${ZoomLayer} ${TileRow} ${TileColumn}" enabled="true">
+                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
+                    <collectionProp name="Arguments.arguments">
+                      <elementProp name="service" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">WMTS</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">service</stringProp>
+                      </elementProp>
+                      <elementProp name="request" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">GetTile</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">request</stringProp>
+                      </elementProp>
+                      <elementProp name="version" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">1.0.0</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">version</stringProp>
+                      </elementProp>
+                      <elementProp name="layer" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">Zoom+Map+Auto</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">layer</stringProp>
+                      </elementProp>
+                      <elementProp name="style" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">default</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">style</stringProp>
+                      </elementProp>
+                      <elementProp name="format" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">image/png</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">format</stringProp>
+                      </elementProp>
+                      <elementProp name="TileCol" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">${TileColumn}</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">TileCol</stringProp>
+                      </elementProp>
+                      <elementProp name="TileRow" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">${TileRow}</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">TileRow</stringProp>
+                      </elementProp>
+                      <elementProp name="TileMatrixSet" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">EPSG:27700</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">TileMatrixSet</stringProp>
+                      </elementProp>
+                      <elementProp name="TileMatrix" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">EPSG:27700:${ZoomLayer}</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">TileMatrix</stringProp>
+                      </elementProp>
+                    </collectionProp>
+                  </elementProp>
+                  <stringProp name="HTTPSampler.domain">gwccluster2-env.elasticbeanstalk.com</stringProp>
+                  <stringProp name="HTTPSampler.port"></stringProp>
+                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
+                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
+                  <stringProp name="HTTPSampler.protocol">http</stringProp>
+                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
+                  <stringProp name="HTTPSampler.path">/service/wmts?</stringProp>
+                  <stringProp name="HTTPSampler.method">GET</stringProp>
+                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
+                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
+                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
+                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
+                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
+                  <boolProp name="HTTPSampler.monitor">false</boolProp>
+                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
+                </HTTPSamplerProxy>
+                <hashTree/>
+                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Increment Tile Column" enabled="true">
+                  <stringProp name="scriptLanguage">javascript</stringProp>
+                  <stringProp name="parameters"></stringProp>
+                  <stringProp name="filename"></stringProp>
+                  <stringProp name="script">var c=Number(vars.get(&quot;TileColumn&quot;));
+c=c+1;
+
+vars.put(&quot;TileColumn&quot;,c);</stringProp>
+                </BSFSampler>
+                <hashTree/>
+                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
+                  <collectionProp name="Asserion.test_strings">
+                    <stringProp name="49586">200</stringProp>
+                  </collectionProp>
+                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
+                  <boolProp name="Assertion.assume_success">false</boolProp>
+                  <intProp name="Assertion.test_type">16</intProp>
+                </ResponseAssertion>
+                <hashTree/>
+              </hashTree>
+              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Set Tile Column to 0" enabled="true">
+                <stringProp name="scriptLanguage">javascript</stringProp>
+                <stringProp name="parameters"></stringProp>
+                <stringProp name="filename"></stringProp>
+                <stringProp name="script">var r=Number(vars.get(&quot;TileColumnMin&quot;));
+vars.put(&quot;TileColumn&quot;,r);</stringProp>
+              </BSFSampler>
+              <hashTree/>
+              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Increment Tile Row" enabled="true">
+                <stringProp name="scriptLanguage">javascript</stringProp>
+                <stringProp name="parameters"></stringProp>
+                <stringProp name="filename"></stringProp>
+                <stringProp name="script">var r=Number(vars.get(&quot;TileRow&quot;));
+r=r+1;
+
+vars.put(&quot;TileRow&quot;,r);</stringProp>
+              </BSFSampler>
+              <hashTree/>
+            </hashTree>
+            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Set Tile Row to 0" enabled="true">
+              <stringProp name="scriptLanguage">javascript</stringProp>
+              <stringProp name="parameters"></stringProp>
+              <stringProp name="filename"></stringProp>
+              <stringProp name="script">var r=Number(vars.get(&quot;TileRowMin&quot;));
+vars.put(&quot;TileRow&quot;,r);</stringProp>
+            </BSFSampler>
+            <hashTree/>
+          </hashTree>
+          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If ZoomLayer=4" enabled="true">
+            <stringProp name="IfController.condition">${ZoomLayer}==4</stringProp>
+            <boolProp name="IfController.evaluateAll">false</boolProp>
+          </IfController>
+          <hashTree>
+            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Initialise Tile Column &amp; Row  Min ,Max for zoom level 4" enabled="true">
+              <stringProp name="scriptLanguage">javascript</stringProp>
+              <stringProp name="parameters"></stringProp>
+              <stringProp name="filename"></stringProp>
+              <stringProp name="script">//initialise TileColumn counter start value to be Tile Column minimum zoom level
+
+var r1=Number(vars.get(&quot;TileColumn&quot;));
+r1=27;
+vars.put(&quot;TileColumn&quot;,r1);
+
+
+
+//initialise TileRow counter start value to be Tile Row minimum zoom level
+var r2=Number(vars.get(&quot;TileRow&quot;));
+r2=72;
+vars.put(&quot;TileRow&quot;,r2);
+
+
+
+// set tile column minimum value for the zoom level
+vars.put(&quot;TileColumnMin&quot;,r1);
+
+
+// set tile row minimum value for the zoom level
+vars.put(&quot;TileRowMin&quot;,r2);
+
+
+// set tile column max value for the zoom level
+var tileColumnMax=Number(42);
+vars.put(&quot;TileColumnMax&quot;,tileColumnMax);
+
+
+
+// set tile row max value for the zoom level
+var tileRowMax=Number(87);
+vars.put(&quot;TileRowMax&quot;,tileRowMax);
+
+
+
+
+
+
+</stringProp>
+            </BSFSampler>
+            <hashTree/>
+            <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
+              <stringProp name="WhileController.condition">${__javaScript(${TileRow}&lt;=${TileRowMax})}</stringProp>
+            </WhileController>
+            <hashTree>
+              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
+                <stringProp name="WhileController.condition">${__javaScript(${TileColumn}&lt;=${TileColumnMax})}</stringProp>
+              </WhileController>
+              <hashTree>
+                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Tile Request  for layer ${ZoomLayer} ${TileRow} ${TileColumn}" enabled="true">
+                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
+                    <collectionProp name="Arguments.arguments">
+                      <elementProp name="service" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">WMTS</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">service</stringProp>
+                      </elementProp>
+                      <elementProp name="request" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">GetTile</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">request</stringProp>
+                      </elementProp>
+                      <elementProp name="version" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">1.0.0</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">version</stringProp>
+                      </elementProp>
+                      <elementProp name="layer" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">Zoom+Map+Auto</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">layer</stringProp>
+                      </elementProp>
+                      <elementProp name="style" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">default</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">style</stringProp>
+                      </elementProp>
+                      <elementProp name="format" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">image/png</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">format</stringProp>
+                      </elementProp>
+                      <elementProp name="TileCol" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">${TileColumn}</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">TileCol</stringProp>
+                      </elementProp>
+                      <elementProp name="TileRow" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">${TileRow}</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">TileRow</stringProp>
+                      </elementProp>
+                      <elementProp name="TileMatrixSet" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">EPSG:27700</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">TileMatrixSet</stringProp>
+                      </elementProp>
+                      <elementProp name="TileMatrix" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">EPSG:27700:${ZoomLayer}</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">TileMatrix</stringProp>
+                      </elementProp>
+                    </collectionProp>
+                  </elementProp>
+                  <stringProp name="HTTPSampler.domain">gwccluster2-env.elasticbeanstalk.com</stringProp>
+                  <stringProp name="HTTPSampler.port"></stringProp>
+                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
+                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
+                  <stringProp name="HTTPSampler.protocol">http</stringProp>
+                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
+                  <stringProp name="HTTPSampler.path">/service/wmts?</stringProp>
+                  <stringProp name="HTTPSampler.method">GET</stringProp>
+                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
+                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
+                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
+                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
+                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
+                  <boolProp name="HTTPSampler.monitor">false</boolProp>
+                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
+                </HTTPSamplerProxy>
+                <hashTree/>
+                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Increment Tile Column" enabled="true">
+                  <stringProp name="scriptLanguage">javascript</stringProp>
+                  <stringProp name="parameters"></stringProp>
+                  <stringProp name="filename"></stringProp>
+                  <stringProp name="script">var c=Number(vars.get(&quot;TileColumn&quot;));
+c=c+1;
+
+vars.put(&quot;TileColumn&quot;,c);</stringProp>
+                </BSFSampler>
+                <hashTree/>
+                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
+                  <collectionProp name="Asserion.test_strings">
+                    <stringProp name="49586">200</stringProp>
+                  </collectionProp>
+                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
+                  <boolProp name="Assertion.assume_success">false</boolProp>
+                  <intProp name="Assertion.test_type">16</intProp>
+                </ResponseAssertion>
+                <hashTree/>
+              </hashTree>
+              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Set Tile Column to 0" enabled="true">
+                <stringProp name="scriptLanguage">javascript</stringProp>
+                <stringProp name="parameters"></stringProp>
+                <stringProp name="filename"></stringProp>
+                <stringProp name="script">var r=Number(vars.get(&quot;TileColumnMin&quot;));
+vars.put(&quot;TileColumn&quot;,r);</stringProp>
+              </BSFSampler>
+              <hashTree/>
+              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Increment Tile Row" enabled="true">
+                <stringProp name="scriptLanguage">javascript</stringProp>
+                <stringProp name="parameters"></stringProp>
+                <stringProp name="filename"></stringProp>
+                <stringProp name="script">var r=Number(vars.get(&quot;TileRow&quot;));
+r=r+1;
+
+vars.put(&quot;TileRow&quot;,r);</stringProp>
+              </BSFSampler>
+              <hashTree/>
+            </hashTree>
+            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Set Tile Row to 0" enabled="true">
+              <stringProp name="scriptLanguage">javascript</stringProp>
+              <stringProp name="parameters"></stringProp>
+              <stringProp name="filename"></stringProp>
+              <stringProp name="script">var r=Number(vars.get(&quot;TileRowMin&quot;));
+vars.put(&quot;TileRow&quot;,r);</stringProp>
+            </BSFSampler>
+            <hashTree/>
+          </hashTree>
+          <IfController guiclass="IfControllerPanel" testclass="IfController" testname="If ZoomLayer=5" enabled="true">
+            <stringProp name="IfController.condition">${ZoomLayer}==5</stringProp>
+            <boolProp name="IfController.evaluateAll">false</boolProp>
+          </IfController>
+          <hashTree>
+            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Initialise Tile Column &amp; Row  Min ,Max for zoom level 1" enabled="true">
+              <stringProp name="scriptLanguage">javascript</stringProp>
+              <stringProp name="parameters"></stringProp>
+              <stringProp name="filename"></stringProp>
+              <stringProp name="script">//initialise TileColumn counter start value to be Tile Column minimum zoom level
+
+var r1=Number(vars.get(&quot;TileColumn&quot;));
+r1=55;
+vars.put(&quot;TileColumn&quot;,r1);
+
+
+
+//initialise TileRow counter start value to be Tile Row minimum zoom level
+var r2=Number(vars.get(&quot;TileRow&quot;));
+r2=155;
+vars.put(&quot;TileRow&quot;,r2);
+
+
+
+// set tile column minimum value for the zoom level
+vars.put(&quot;TileColumnMin&quot;,r1);
+
+
+// set tile row minimum value for the zoom level
+vars.put(&quot;TileRowMin&quot;,r2);
+
+
+// set tile column max value for the zoom level
+var tileColumnMax=Number(80);
+vars.put(&quot;TileColumnMax&quot;,tileColumnMax);
+
+
+
+// set tile row max value for the zoom level
+var tileRowMax=Number(177);
+vars.put(&quot;TileRowMax&quot;,tileRowMax);
+
+
+
+
+
+
+</stringProp>
+            </BSFSampler>
+            <hashTree/>
+            <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
+              <stringProp name="WhileController.condition">${__javaScript(${TileRow}&lt;=${TileRowMax})}</stringProp>
+            </WhileController>
+            <hashTree>
+              <WhileController guiclass="WhileControllerGui" testclass="WhileController" testname="While Controller" enabled="true">
+                <stringProp name="WhileController.condition">${__javaScript(${TileColumn}&lt;=${TileColumnMax})}</stringProp>
+              </WhileController>
+              <hashTree>
+                <HTTPSamplerProxy guiclass="HttpTestSampleGui" testclass="HTTPSamplerProxy" testname="Tile Request  for layer ${ZoomLayer} ${TileRow} ${TileColumn}" enabled="true">
+                  <elementProp name="HTTPsampler.Arguments" elementType="Arguments" guiclass="HTTPArgumentsPanel" testclass="Arguments" testname="User Defined Variables" enabled="true">
+                    <collectionProp name="Arguments.arguments">
+                      <elementProp name="service" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">WMTS</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">service</stringProp>
+                      </elementProp>
+                      <elementProp name="request" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">GetTile</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">request</stringProp>
+                      </elementProp>
+                      <elementProp name="version" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">1.0.0</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">version</stringProp>
+                      </elementProp>
+                      <elementProp name="layer" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">Zoom+Map+Auto</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">layer</stringProp>
+                      </elementProp>
+                      <elementProp name="style" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">default</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">style</stringProp>
+                      </elementProp>
+                      <elementProp name="format" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">image/png</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">format</stringProp>
+                      </elementProp>
+                      <elementProp name="TileCol" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">${TileColumn}</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">TileCol</stringProp>
+                      </elementProp>
+                      <elementProp name="TileRow" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">${TileRow}</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">TileRow</stringProp>
+                      </elementProp>
+                      <elementProp name="TileMatrixSet" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">EPSG:27700</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">TileMatrixSet</stringProp>
+                      </elementProp>
+                      <elementProp name="TileMatrix" elementType="HTTPArgument">
+                        <boolProp name="HTTPArgument.always_encode">false</boolProp>
+                        <stringProp name="Argument.value">EPSG:27700:${ZoomLayer}</stringProp>
+                        <stringProp name="Argument.metadata">=</stringProp>
+                        <boolProp name="HTTPArgument.use_equals">true</boolProp>
+                        <stringProp name="Argument.name">TileMatrix</stringProp>
+                      </elementProp>
+                    </collectionProp>
+                  </elementProp>
+                  <stringProp name="HTTPSampler.domain">gwccluster2-env.elasticbeanstalk.com</stringProp>
+                  <stringProp name="HTTPSampler.port"></stringProp>
+                  <stringProp name="HTTPSampler.connect_timeout"></stringProp>
+                  <stringProp name="HTTPSampler.response_timeout"></stringProp>
+                  <stringProp name="HTTPSampler.protocol">http</stringProp>
+                  <stringProp name="HTTPSampler.contentEncoding"></stringProp>
+                  <stringProp name="HTTPSampler.path">/service/wmts?</stringProp>
+                  <stringProp name="HTTPSampler.method">GET</stringProp>
+                  <boolProp name="HTTPSampler.follow_redirects">true</boolProp>
+                  <boolProp name="HTTPSampler.auto_redirects">false</boolProp>
+                  <boolProp name="HTTPSampler.use_keepalive">true</boolProp>
+                  <boolProp name="HTTPSampler.DO_MULTIPART_POST">false</boolProp>
+                  <stringProp name="HTTPSampler.implementation">HttpClient4</stringProp>
+                  <boolProp name="HTTPSampler.monitor">false</boolProp>
+                  <stringProp name="HTTPSampler.embedded_url_re"></stringProp>
+                </HTTPSamplerProxy>
+                <hashTree/>
+                <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Increment Tile Column" enabled="true">
+                  <stringProp name="scriptLanguage">javascript</stringProp>
+                  <stringProp name="parameters"></stringProp>
+                  <stringProp name="filename"></stringProp>
+                  <stringProp name="script">var c=Number(vars.get(&quot;TileColumn&quot;));
+c=c+1;
+
+vars.put(&quot;TileColumn&quot;,c);</stringProp>
+                </BSFSampler>
+                <hashTree/>
+                <ResponseAssertion guiclass="AssertionGui" testclass="ResponseAssertion" testname="Response Assertion" enabled="true">
+                  <collectionProp name="Asserion.test_strings">
+                    <stringProp name="49586">200</stringProp>
+                  </collectionProp>
+                  <stringProp name="Assertion.test_field">Assertion.response_code</stringProp>
+                  <boolProp name="Assertion.assume_success">false</boolProp>
+                  <intProp name="Assertion.test_type">16</intProp>
+                </ResponseAssertion>
+                <hashTree/>
+              </hashTree>
+              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Set Tile Column to 0" enabled="true">
+                <stringProp name="scriptLanguage">javascript</stringProp>
+                <stringProp name="parameters"></stringProp>
+                <stringProp name="filename"></stringProp>
+                <stringProp name="script">var r=Number(vars.get(&quot;TileColumnMin&quot;));
+vars.put(&quot;TileColumn&quot;,r);</stringProp>
+              </BSFSampler>
+              <hashTree/>
+              <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Increment Tile Row" enabled="true">
+                <stringProp name="scriptLanguage">javascript</stringProp>
+                <stringProp name="parameters"></stringProp>
+                <stringProp name="filename"></stringProp>
+                <stringProp name="script">var r=Number(vars.get(&quot;TileRow&quot;));
+r=r+1;
+
+vars.put(&quot;TileRow&quot;,r);</stringProp>
+              </BSFSampler>
+              <hashTree/>
+            </hashTree>
+            <BSFSampler guiclass="TestBeanGUI" testclass="BSFSampler" testname="Set Tile Row to 0" enabled="true">
+              <stringProp name="scriptLanguage">javascript</stringProp>
+              <stringProp name="parameters"></stringProp>
+              <stringProp name="filename"></stringProp>
+              <stringProp name="script">var r=Number(vars.get(&quot;TileRowMin&quot;));
 vars.put(&quot;TileRow&quot;,r);</stringProp>
             </BSFSampler>
             <hashTree/>
