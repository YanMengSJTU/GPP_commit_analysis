diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
index 0221509c12..307490a2a6 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
@@ -23,173 +23,7 @@
 	String nearestPoint = "";
 	String Distance = "";
 
-/*	@Given("^I request a route between \"([^\"]*)\" and \"([^\"]*)\" as a \"([^\"]*)\" from RoutingAPI and avoid \"([^\"]*)\"$")
-	public void getRouteWithAvoidance(String pointA, String pointB,
-			String routeOptions, String avoidances) throws InterruptedException {
-		String graphHopperWebUrl;
-		avoidances = avoidances.toLowerCase().trim();
-		if (IntegrationTestProperties.getTestPropertyBool("viaApigee")) {
-			graphHopperWebUrl = IntegrationTestProperties
-					.getTestProperty("graphHopperWebUrlViaApigee");
-		} else {
-			graphHopperWebUrl = IntegrationTestProperties
-					.getTestProperty("graphHopperWebUrl");
-		}
-
-		graphUiUtil = new GraphHopperUIUtil(graphHopperWebUrl);
-
-		String testON = IntegrationTestProperties.getTestProperty("testON");
-
-		switch (testON.toUpperCase()) {
-		case "WEB":
-
-			graphUiUtil
-					.getRouteFromUI(routeOptions, avoidances, pointA, pointB);
-			break;
-		case "SERVICE":
-			graphUiUtil.getRouteFromServiceWithAvoidance(routeOptions,
-					avoidances, pointA, pointB);
-			break;
-		default:
-
-			if (pointA.split(",").length == 2) {
-				graphUiUtil.getRouteFromServiceWithAvoidance(routeOptions,
-						avoidances, pointA, pointB);
-				graphUiUtil.getRouteFromUI(routeOptions, avoidances, pointA,
-						pointB);
-			} else {
-				graphUiUtil.getRouteFromUI(routeOptions, avoidances, pointA,
-						pointB);
-			}
-
-			break;
-
-		}
-
-	}
-
-	@Given("^I request a route between \"([^\"]*)\" and \"([^\"]*)\" as a \"([^\"]*)\" from RoutingAPI and avoid \"([^\"]*)\" via \"([^\"]*)\"$")
-	public void getRouteWithAvoidances(String pointA, String pointB,
-			String routeOptions, String avoidance, String pointC)
-			throws InterruptedException {
-		String graphHopperWebUrl;
-
-		if (IntegrationTestProperties.getTestPropertyBool("viaApigee")) {
-			graphHopperWebUrl = IntegrationTestProperties
-					.getTestProperty("graphHopperWebUrlViaApigee");
-		} else {
-			graphHopperWebUrl = IntegrationTestProperties
-					.getTestProperty("graphHopperWebUrl");
-		}
-
-		graphUiUtil = new GraphHopperUIUtil(graphHopperWebUrl);
-
-		String testON = IntegrationTestProperties.getTestProperty("testON");
-
-		switch (testON.toUpperCase()) {
-		case "WEB":
-
-			graphUiUtil
-					.getRouteFromUI(routeOptions, avoidance, pointA, pointB, pointC);
-			break;
-		case "SERVICE":
-			graphUiUtil.getRouteFromServiceWithAvoidance(routeOptions,
-					avoidance, pointA, pointB, pointC);
-			break;
-		default:
-
-			if (pointA.split(",").length == 2) {
-				graphUiUtil.getRouteFromServiceWithAvoidance(routeOptions,
-						avoidance, pointA, pointB, pointC);
-				graphUiUtil
-						.getRouteFromUI(routeOptions, avoidance,pointA, pointB, pointC);
-			} else {
-				graphUiUtil.getRouteFromUI(routeOptions, avoidance, pointA, pointB,
-						pointC);
-			}
 
-			break;
-
-		}
-
-	}
-/*
-	public void getRoute(String pointA, String pointB, String routeOptions,
-			String pointC, String pointD) throws InterruptedException {
-
-		graphUiUtil = new GraphHopperUIUtil(
-				IntegrationTestProperties.getTestProperty("graphHopperWebUrl"));
-
-		String testON = IntegrationTestProperties.getTestProperty("testON");
-
-		switch (testON.toUpperCase()) {
-		case "WEB":
-
-			graphUiUtil.getRouteFromUI(routeOptions, "", pointA, pointB,
-					pointC, pointD);
-			break;
-		case "SERVICE":
-			graphUiUtil.getRouteFromService(routeOptions, pointA, pointB,
-					pointC, pointD);
-			break;
-		default:
-
-			if (pointA.split(",").length == 2) {
-				graphUiUtil.getRouteFromService(routeOptions, pointA, pointB,
-						pointC, pointD);
-				graphUiUtil.getRouteFromUI(routeOptions, "", pointA, pointB,
-						pointC, pointD);
-			} else {
-				graphUiUtil.getRouteFromUI(routeOptions, "", pointA, pointB,
-						pointC, pointD);
-			}
-
-			break;
-
-		}
-
-	}*
-	
-	/*
-
-	@Given("^I request a route between \"([^\"]*)\" and \"([^\"]*)\" as a \"([^\"]*)\" from RoutingAPI and avoid \"([^\"]*)\" via \"([^\"]*)\" and \"([^\"]*)\"$")
-	public void getRouteWithAvoidances(String pointA, String pointB,
-			String routeOptions, String avoidance, String pointC, String pointD)
-			throws InterruptedException {
-
-		graphUiUtil = new GraphHopperUIUtil(
-				IntegrationTestProperties.getTestProperty("graphHopperWebUrl"));
-
-		String testON = IntegrationTestProperties.getTestProperty("testON");
-
-		switch (testON.toUpperCase()) {
-		case "WEB":
-
-			graphUiUtil.getRouteFromUI(routeOptions, "", pointA, pointB,
-					pointC, pointD);
-			break;
-		case "SERVICE":
-			graphUiUtil.getRouteFromServiceWithAvoidance(routeOptions,
-					avoidance, pointA, pointB, pointC, pointD);
-			break;
-		default:
-
-			if (pointA.split(",").length == 2) {
-				graphUiUtil.getRouteFromServiceWithAvoidance(routeOptions,
-						avoidance, pointA, pointB, pointC, pointD);
-				graphUiUtil.getRouteFromUI(routeOptions, "", pointA, pointB,
-						pointC, pointD);
-			} else {
-				graphUiUtil.getRouteFromUI(routeOptions, "", pointA, pointB,
-						pointC, pointD);
-			}
-
-			break;
-
-		}
-
-	}
-*/
 	@Given("^I request a nearest point from  \"([^\"]*)\" from Nearest Point API$")
 	public void I_request_a_nearest_point_from_from_Nearest_Point_API(
 			String pointA) {
