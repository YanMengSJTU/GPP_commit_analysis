diff --git a/core/src/main/java/com/graphhopper/reader/dem/HighPrecisionSRTMProvider.java b/core/src/main/java/com/graphhopper/reader/dem/HighPrecisionSRTMProvider.java
new file mode 100644
index 0000000000..dd2b2ab609
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/dem/HighPrecisionSRTMProvider.java
@@ -0,0 +1,118 @@
+/*
+ *  Licensed to Peter Karich under one or more contributor license
+ *  agreements. See the NOTICE file distributed with this work for
+ *  additional information regarding copyright ownership.
+ *
+ *  Peter Karich licenses this file to you under the Apache License,
+ *  Version 2.0 (the "License"); you may not use this file except
+ *  in compliance with the License. You may obtain a copy of the
+ *  License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package com.graphhopper.reader.dem;
+
+import com.graphhopper.storage.*;
+import com.graphhopper.util.BitUtil;
+import com.graphhopper.util.Downloader;
+import gnu.trove.map.hash.TIntObjectHashMap;
+
+import java.io.*;
+import java.net.SocketTimeoutException;
+import java.util.zip.ZipInputStream;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * Elevation data from NASA (SRTM). Downloaded from http://dds.cr.usgs.gov/srtm/version2_1/SRTM3/
+ * <p/>
+ * Important information about SRTM: the coordinates of the lower-left corner of tile N40W118 are 40
+ * degrees north latitude and 118 degrees west longitude. To be more exact, these coordinates refer
+ * to the geometric center of the lower left sample, which in the case of SRTM3 data will be about
+ * 90 meters in extent.
+ * <p/>
+ *
+ * @author Peter Karich
+ */
+public class HighPrecisionSRTMProvider extends SRTMProvider
+{
+    public static void main(String[] args) throws IOException
+    {
+        HighPrecisionSRTMProvider provider = new HighPrecisionSRTMProvider();
+        // 1046
+        System.out.println(provider.getEle(47.468668, 14.575127));
+        // 1113
+        System.out.println(provider.getEle(47.467753, 14.573911));
+
+        // 1946
+        System.out.println(provider.getEle(46.468835, 12.578777));
+
+        // 845
+        System.out.println(provider.getEle(48.469123, 9.576393));
+
+        // 1113 vs new: 
+        provider.setCalcMean(true);
+        System.out.println(provider.getEle(47.467753, 14.573911));
+    }
+
+    private static final BitUtil BIT_UTIL = BitUtil.BIG;
+    private final Logger logger = LoggerFactory.getLogger(getClass());
+    private final int WIDTH = 3601;
+    private Directory dir;
+    private DAType daType = DAType.MMAP;
+    private Downloader downloader = new Downloader("GraphHopper SRTMReader").setTimeout(10000);
+    private File cacheDir = new File("/tmp/srtm");
+    // use a map as an array is not quite useful if we want to hold only parts of the world
+    private final TIntObjectHashMap<HeightTile> cacheData = new TIntObjectHashMap<HeightTile>();
+    private final double precision = 1e7;
+    private final double invPrecision = 1 / precision;
+    // mirror: base = "http://mirror.ufs.ac.za/datasets/SRTM3/"
+    private String baseUrl = "http://e4ftl01.cr.usgs.gov/SRTM/SRTMGL1.003/2000.02.11/";
+
+
+    int down(double val)
+    {
+        int intVal = (int) val;
+        if (val >= 0 || intVal - val < invPrecision)
+            return intVal;
+        return intVal - 1;
+    }
+
+    String getFileString(double lat, double lon)
+    {
+        int minLat = Math.abs(down(lat));
+        int minLon = Math.abs(down(lon));
+
+        return String.format("%s%02d%s%03d.SRTMGL1",
+                (lat >= 0) ? "N" : "S",
+                minLat,
+                (lon >= 0) ? "E" : "W",
+                minLon
+        );
+    }
+
+    public double getEle(double lat, double lon)
+    {
+        try
+        {
+            return super.getEle(lat, lon);
+        } catch (RuntimeException ex)
+        {
+            // TODO do fallback to low-res version
+        }
+    }
+
+    @Override
+    public String toString()
+    {
+        return "HighPrecisionSRTM";
+    }
+
+}
diff --git a/core/src/test/java/com/graphhopper/reader/dem/HighPrecisionSRTMProviderTest.java b/core/src/test/java/com/graphhopper/reader/dem/HighPrecisionSRTMProviderTest.java
new file mode 100644
index 0000000000..0f856a3882
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/dem/HighPrecisionSRTMProviderTest.java
@@ -0,0 +1,100 @@
+/*
+ *  Licensed to Peter Karich under one or more contributor license
+ *  agreements. See the NOTICE file distributed with this work for
+ *  additional information regarding copyright ownership.
+ *
+ *  Peter Karich licenses this file to you under the Apache License,
+ *  Version 2.0 (the "License"); you may not use this file except
+ *  in compliance with the License. You may obtain a copy of the
+ *  License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package com.graphhopper.reader.dem;
+
+import com.graphhopper.storage.DAType;
+import java.io.File;
+import java.io.IOException;
+import org.junit.After;
+import org.junit.Test;
+import static org.junit.Assert.*;
+import org.junit.Before;
+
+/**
+ *
+ * @author Peter Karich
+ */
+public class HighPrecisionSRTMProviderTest
+{
+    HighPrecisionSRTMProvider instance;
+
+    @Before
+    public void setUp()
+    {
+        instance = new HighPrecisionSRTMProvider();
+    }
+
+    @After
+    public void tearDown()
+    {
+        instance.release();
+    }
+
+    @Test
+    public void testGetFileString()
+    {
+        assertEquals("N49E011.SRTMGL1", instance.getFileString(49, 11));
+        assertEquals("N52W002.SRTMGL1", instance.getFileString(52.268157, -1.230469));
+        assertEquals("S06E034.SRTMGL1", instance.getFileString(-5.965754, 34.804687));
+        assertEquals("S29E131.SRTMGL1", instance.getFileString(-28.304381, 131.484375));
+        assertEquals("S09W045.SRTMGL1", instance.getFileString(-9, -45));
+        assertEquals("S10W046.SRTMGL1", instance.getFileString(-9.1, -45.1));
+        assertEquals("S10W045.SRTMGL1", instance.getFileString(-9.6, -45));
+        assertEquals("S28W071.SRTMGL1", instance.getFileString(-28, -71));
+        assertEquals("S29W072.SRTMGL1", instance.getFileString(-28.88316, -71.070557));
+    }
+
+    @Test
+    public void testGetHeight() throws IOException
+    {
+        instance.setCacheDir(new File("./files/"));
+        // easy to verify orientation of tile:
+//        instance.getEle(43, 13);
+
+        // siegesturm
+        assertEquals(466, instance.getEle(49.968651, 11.574869), 1e-1);
+        // am main
+        assertEquals(330, instance.getEle(49.958233, 11.558647), 1e-1);
+        // south america
+        assertEquals(1678, instance.getEle(-28.88316, -71.070557), 1e-1);
+        assertEquals(0, instance.getEle(-28.671311, -71.38916), 1e-1);
+
+        // montevideo
+        // assertEquals(45, instance.getEle(-34.906205,-56.189575), 1e-1);
+        // new york
+        // assertEquals(21, instance.getEle(40.730348,-73.985882), 1e-1);
+        // use 0 elevation if area not found
+        assertEquals(0, instance.getEle(55.4711873, 19.2501641), 1e-1);
+
+        assertEquals(161, instance.getEle(55.8943144, -3), 1e-1);
+        // precision = 1e6 => -3
+        // assertEquals(160, instance.getEle(55.8943144, -3.0000004), 1e-1);
+        // precision = 1e7 => -4
+        // assertEquals(161, instance.getEle(55.8943144, -3.0004), 1e-1);
+        // assertEquals(161, instance.getEle(55.8943144, -3.0000001), 1e-1);
+    }
+
+    @Test
+    public void testGetHeightMMap() throws IOException
+    {
+        instance.setCacheDir(new File("./files/"));
+        instance.setDAType(DAType.MMAP);
+        assertEquals(161, instance.getEle(55.8943144, -3), 1e-1);
+    }
+}
