diff --git a/acceptancetesting/src/test/cucumber/Routing-Errors.feature b/acceptancetesting/src/test/cucumber/Routing-Errors.feature
index b399d0c116..4cc7276a14 100644
--- a/acceptancetesting/src/test/cucumber/Routing-Errors.feature
+++ b/acceptancetesting/src/test/cucumber/Routing-Errors.feature
@@ -12,7 +12,7 @@ Feature: Verify a route from A to B
     And I have vehicle as "car"
     And I have avoidances as ""
     And I have weighting as "fastest"
-    And I have locale as "en"
+    And I have locale as "en-GB"
     And I have debug as "true"
     And I have points_encoded as "true"
     And I have points_calc as "true"
@@ -23,7 +23,7 @@ Feature: Verify a route from A to B
     Then I should be able to verify the http response message as "OK"
     Then I should be able to verify the http statuscode as "200"
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco                | waypointdesc                | azimuth | direction | time | distance | avoidance |
+      | wayPointIndex | waypointco          | waypointdesc                | azimuth | direction | time | distance | avoidance |
       | 2             | 50.729205,-3.523206 | Turn right onto WELL STREET | 210.0   | SW        | 4050 | 112.5    |           |
 
   # Parameter :  vehicle
@@ -43,10 +43,10 @@ Feature: Verify a route from A to B
 
     Examples: 
       | vehicleType | avoidances | routeType | errorMessage                                                  | statusCode | httpErrorMessage |
-      | 123         |            | fastest   | Vehicle 123 is not a valid vehicle. Valid vehicles are car.   | 400        | Bad Request                |
-      | foot        |            | fastest   | Vehicle foot is not a valid vehicle. Valid vehicles are car.  | 400        | Bad Request                 |
-      | cycle       |            | fastest   | Vehicle cycle is not a valid vehicle. Valid vehicles are car. | 400        | Bad Request                 |
-      | Bike        |            | fastest   | Vehicle Bike is not a valid vehicle. Valid vehicles are car.  | 400        | Bad Request                 |
+      | 123         |            | fastest   | Vehicle 123 is not a valid vehicle. Valid vehicles are car.   | 400        | Bad Request      |
+      | foot        |            | fastest   | Vehicle foot is not a valid vehicle. Valid vehicles are car.  | 400        | Bad Request      |
+      | cycle       |            | fastest   | Vehicle cycle is not a valid vehicle. Valid vehicles are car. | 400        | Bad Request      |
+      | Bike        |            | fastest   | Vehicle Bike is not a valid vehicle. Valid vehicles are car.  | 400        | Bad Request      |
 
   # Parameter :  vehicle
   @Routing @ErrorMessages
@@ -168,7 +168,7 @@ Feature: Verify a route from A to B
 
     Examples: 
       | vehicleType | avoidances | routeType | responseFormat | errorMessage                                                                                                     | statusCode |
-      | car         | trees      | fastest   | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
+      | car         | cliff      | fastest   | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
 
   # Parameter :  weighting
   @Routing @ErrorMessages
@@ -186,7 +186,7 @@ Feature: Verify a route from A to B
 
     Examples: 
       | vehicleType | avoidances | routeType | responseFormat | errorMessage                                                                                                     | statusCode |
-      | car         | trees      | faster    | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
+      | car         |            | faster    | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
 
   # Parameter :  weighting
   @Routing @ErrorMessages
@@ -204,7 +204,7 @@ Feature: Verify a route from A to B
 
     Examples: 
       | vehicleType | avoidances | routeType | responseFormat | errorMessage                                                                                                     | statusCode |
-      | car         | trees      | fastest   | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
+      | car         |            | fastest   | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
 
   # Parameter :  locale
   @Routing @ErrorMessages
@@ -223,7 +223,7 @@ Feature: Verify a route from A to B
 
     Examples: 
       | vehicleType | avoidances | routeType | locale | responseFormat | errorMessage                                                                                                     | statusCode |
-      | car         | trees      | faster    | en     | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
+      | car         |            | faster    | en     | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
 
   # Parameter :  locale
   @Routing @ErrorMessages
@@ -242,7 +242,7 @@ Feature: Verify a route from A to B
 
     Examples: 
       | vehicleType | avoidances | routeType | locale | responseFormat | errorMessage                                                                                                     | statusCode |
-      | car         | trees      | fastest   | en     | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
+      | car         |            | fastest   | en-GB  | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
 
   # Parameter :  instructions
   @Routing @ErrorMessages
@@ -261,7 +261,7 @@ Feature: Verify a route from A to B
 
     Examples: 
       | vehicleType | avoidances | routeType | instructions | responseFormat | errorMessage                                                                                                     | statusCode |
-      | car         | trees      | faster    | msg("box")   | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
+      | car         |            | faster    | msg("box")   | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
 
   # Parameter :  instructions
   @Routing @ErrorMessages
@@ -280,7 +280,7 @@ Feature: Verify a route from A to B
 
     Examples: 
       | vehicleType | avoidances | routeType | instructions | responseFormat | errorMessage                                                                                                     | statusCode |
-      | car         | trees      | fastest   | true         | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
+      | car         |            | fastest   | true         | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
 
   # Parameter :  algorithm
   @Routing @ErrorMessages
@@ -299,10 +299,10 @@ Feature: Verify a route from A to B
 
     Examples: 
       | vehicleType | avoidances | routeType | algorithm | responseFormat | errorMessage                                                                                                     | statusCode |
-      | car         | trees      | faster    | xyz       | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
-      | car         | trees      | faster    | dijkstra  | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
-      | car         | trees      | faster    | astar     | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
-      | car         | trees      | faster    | astarbi   | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
+      | car         |            | faster    | xyz       | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
+      | car         |            | faster    | dijkstra  | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
+      | car         |            | faster    | astar     | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
+      | car         |            | faster    | astarbi   | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
 
   # Parameter :  algorithm
   @Routing @ErrorMessages
@@ -321,7 +321,7 @@ Feature: Verify a route from A to B
 
     Examples: 
       | vehicleType | avoidances | routeType | algorithm | responseFormat | errorMessage                                                                                                     | statusCode |
-      | car         | trees      | fastest   | dijkstra  | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
+      | car         |            | fastest   | dijkstra  | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
 
   # Parameter :  points_encoded
   @Routing @ErrorMessages
@@ -340,7 +340,7 @@ Feature: Verify a route from A to B
 
     Examples: 
       | vehicleType | avoidances | routeType | points_encoded | responseFormat | errorMessage                                                                                                     | statusCode |
-      | car         | trees      | faster    | xyz            | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
+      | car         |            | faster    | xyz            | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
 
   # Parameter :  points_encoded
   @Routing @ErrorMessages
@@ -359,7 +359,7 @@ Feature: Verify a route from A to B
 
     Examples: 
       | vehicleType | avoidances | routeType | points_encoded | responseFormat | errorMessage                                                                                                     | statusCode |
-      | car         | trees      | fastest   | true           | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
+      | car         |            | fastest   | true           | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
 
   # Parameter :  debug
   @Routing @ErrorMessages
@@ -378,7 +378,7 @@ Feature: Verify a route from A to B
 
     Examples: 
       | vehicleType | avoidances | routeType | debug | responseFormat | errorMessage                                                                                                     | statusCode |
-      | car         | trees      | faster    | xyz   | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
+      | car         |            | faster    | xyz   | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
 
   # Parameter :  debug
   @Routing @ErrorMessages
@@ -397,7 +397,7 @@ Feature: Verify a route from A to B
 
     Examples: 
       | vehicleType | avoidances | routeType | debug | responseFormat | errorMessage                                                                                                     | statusCode |
-      | car         | trees      | fastest   | true  | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
+      | car         |            | fastest   | true  | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
 
   # Parameter :  calc_points
   @Routing @ErrorMessages
@@ -416,7 +416,7 @@ Feature: Verify a route from A to B
 
     Examples: 
       | vehicleType | avoidances | routeType | calc_points | responseFormat | errorMessage                                                                                                     | statusCode |
-      | car         | trees      | faster    | xyz         | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
+      | car         |            | faster    | xyz         | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
 
   # Parameter :  calc_points
   @Routing @ErrorMessages
@@ -435,7 +435,7 @@ Feature: Verify a route from A to B
 
     Examples: 
       | vehicleType | avoidances | routeType | calc_points | responseFormat | errorMessage                                                                                                     | statusCode |
-      | car         | trees      | fastest   | true        | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
+      | car         |            | fastest   | true        | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
 
   # Parameter :  Type
   @Routing @ErrorMessages
@@ -454,7 +454,7 @@ Feature: Verify a route from A to B
 
     Examples: 
       | vehicleType | avoidances | routeType | calc_points | responseFormat | errorMessage                                                                                                     | statusCode |
-      | car         | trees      | faster    | xyz         | txt            | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
+      | car         |            | faster    | xyz         | txt            | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
 
   # Parameter :  Type
   @Routing @ErrorMessages
@@ -473,7 +473,7 @@ Feature: Verify a route from A to B
 
     Examples: 
       | vehicleType | avoidances | routeType | calc_points | responseFormat | errorMessage                                                                                                              | statusCode |
-      | car         | trees      | fastest   | true        | json           | Parameter calc_pointSSS is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
+      | car         |            | fastest   | true        | json           | Parameter calc_pointSSS is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
 
   @Routing @ErrorMessages
   Scenario Outline: Invalid http method "PUT"
@@ -491,4 +491,4 @@ Feature: Verify a route from A to B
 
     Examples: 
       | vehicleType | avoidances | routeType | responseFormat | errorMessage                                                                                                     | statusCode |
-      | car         | trees      | fastest   | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 405        |
+      | car         |            | fastest   | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 405        |
diff --git a/web/src/main/java/com/graphhopper/http/ApiResource.java b/web/src/main/java/com/graphhopper/http/ApiResource.java
index 24d654d8fe..0f34c53547 100644
--- a/web/src/main/java/com/graphhopper/http/ApiResource.java
+++ b/web/src/main/java/com/graphhopper/http/ApiResource.java
@@ -6,142 +6,140 @@
 import java.util.Set;
 
 import javax.servlet.http.HttpServletRequest;
- 
- 
-public enum ApiResource {
-	ROUTE("route", new String[]{"point","vehicle"}, new String[] { "point", "locale", "instructions", "vehicle", "weighting", "algorithm", "points_encoded", "debug", "calc_points","tye","avoidances" }),
-    NEAREST("nearest", new String[]{"point"}, new String[] { "point"}),
-	INFO("info", new String[]{}, new String[] { });
-	   
-	
-    public String[] getMandatoryValues() {
-        return mandatoryValues;
-    }
- 
- 
-    public String[] getValidValues() {
-        return validValues;
-    }
- 
- 
-    public String getResourceName() {
-        return resourceName;
-    }
- 
- 
-    private String resourceName;
-    private String[] mandatoryValues;
-    private String[] validValues;
- 
- 
-    private ApiResource(String resourceName, String[] mandatoryValues, String[] validValues) {
-        this.resourceName = resourceName;
-        this.mandatoryValues = mandatoryValues;
-        this.validValues = validValues;
-    }
-   
-    /**
-     * Scans through all the request parameters. Checks if the mandatory field
-     * exists for a resource. Checks if all the request parameters are valid for
-     * the resource. Throws appropriate exceptions if not
-     *
-     * @param HttpServletRequest
-     * @param APIResource
-     *
-     * @throws MissingParameterException
-     * @throws NoSuchParameterException
-     */
-    public void checkAllRequestParameters(HttpServletRequest request)
-            throws MissingParameterException, NoSuchParameterException, InvalidParameterException {
-        // Check if the mandatory parameter exists in the request
-        String value =  this.getMandatoryValues()[0];
-        boolean mandatoryValueExists = checkMandatoryValue(request, value);
-        if( mandatoryValueExists && this.getMandatoryValues().length > 1 )
-        {
-            value =  this.getMandatoryValues()[1];
-            mandatoryValueExists = checkMandatoryValue(request, value);
-        }
-        if(!mandatoryValueExists)
-        {
-            throw new MissingParameterException(value);
-        }
-       
-        // Now check for all the valid parameters for the resource
-        checkValidParameters(request);
-    }
-   
-    /**
-     * Checks if the given mandatory value exists in the request parameters
-     *
-     * @param parameters Enumeration<String>
-     * @param mandatoryValue
-     * @return
-     */
-    private boolean checkMandatoryValue(HttpServletRequest request, String mandatoryValue)
-    {
-        Set<String> keys = request.getParameterMap().keySet();
-        for(String key: keys)
-       {
-            if(mandatoryValue.equalsIgnoreCase(key))
-            {
-                return true;
-            }
-        }       
-        return false;
-    }
-   
-    /**
-     * Checks if all the valid parameters exist in the request for the resource
-     *
-     * @param request
-     * @throws NoSuchParameterException
-     * @throws InvalidParameterException
-     */
-    private void checkValidParameters(HttpServletRequest request) throws NoSuchParameterException, InvalidParameterException
-    {
-        // Now check for all the valid parameters for the resource
-        List<String> list = Arrays.asList(this.getValidValues());
-        Map<String, String[]> parameterMap = request.getParameterMap();
-        for (Map.Entry<String, String[]> entry : parameterMap.entrySet()) {
-            String parameterName = entry.getKey().toLowerCase();
-            if (!list.contains(parameterName)) {
-                throw new NoSuchParameterException(getInvalidPara​meterMessage(
-                        parameterName, this.getResourceName(), this.getValidValues()));
-            }
-        }
-    }
- 
- 
-    /**
-     * Builds the message when the parameter provided is invalid
-     *
-     * @param invalid
-     * @param parameter
-     * @param validValues
-     * @return message String
-     */
-    private String getInvalidPara​meterMessage(String invalid, String parameter,
-            String[] validValues) {
-        StringBuilder sb = new StringBuilder();
- 
- 
-        sb.append("Parameter ").append(invalid)
-        .append(" is not a valid parameter for resource ")
-        .append(parameter)
-        .append(". Valid parameters for requested resource are ");
- 
- 
-        List<String> validList = Arrays.asList(validValues);
-        for (String valid : validList) {
-            sb.append(valid).append(", ");
-        }
-        String message = sb.substring(0, sb.length() - 2) + ".";
- 
- 
-        return message;
-    }
- 
- 
- 
- 
+
+public enum ApiResource
+{
+	ROUTE("route", new String[] { "point", "vehicle" }, new String[] { "point", "vehicle",
+	        "locale", "instructions", "weighting", "algorithm", "points_encoded", "debug",
+	        "pretty", "calc_points", "type", "avoidances" }), NEAREST("nearest",
+	        new String[] { "point" }, new String[] { "point" }), INFO("info", new String[] {},
+	        new String[] {});
+
+	public String[] getMandatoryValues()
+	{
+		return mandatoryValues;
+	}
+
+	public String[] getValidValues()
+	{
+		return validValues;
+	}
+
+	public String getResourceName()
+	{
+		return resourceName;
+	}
+
+	private String resourceName;
+	private String[] mandatoryValues;
+	private String[] validValues;
+
+	private ApiResource( String resourceName, String[] mandatoryValues, String[] validValues )
+	{
+		this.resourceName = resourceName;
+		this.mandatoryValues = mandatoryValues;
+		this.validValues = validValues;
+	}
+
+	/**
+	 * Scans through all the request parameters. Checks if the mandatory field exists for a
+	 * resource. Checks if all the request parameters are valid for the resource. Throws appropriate
+	 * exceptions if not
+	 *
+	 * @param HttpServletRequest
+	 * @param APIResource
+	 *
+	 * @throws MissingParameterException
+	 * @throws NoSuchParameterException
+	 */
+	public void checkAllRequestParameters( HttpServletRequest request )
+	        throws MissingParameterException, NoSuchParameterException, InvalidParameterException
+	{
+		// Check if the mandatory parameter exists in the request
+		String value = this.getMandatoryValues()[0];
+		boolean mandatoryValueExists = checkMandatoryValue(request, value);
+		if (mandatoryValueExists && this.getMandatoryValues().length > 1)
+		{
+			value = this.getMandatoryValues()[1];
+			mandatoryValueExists = checkMandatoryValue(request, value);
+		}
+		if (!mandatoryValueExists)
+		{
+			throw new MissingParameterException(value);
+		}
+
+		// Now check for all the valid parameters for the resource
+		checkValidParameters(request);
+	}
+
+	/**
+	 * Checks if the given mandatory value exists in the request parameters
+	 *
+	 * @param parameters Enumeration<String>
+	 * @param mandatoryValue
+	 * @return
+	 */
+	private boolean checkMandatoryValue( HttpServletRequest request, String mandatoryValue )
+	{
+		Set<String> keys = request.getParameterMap().keySet();
+		for (String key : keys)
+		{
+			if (mandatoryValue.equalsIgnoreCase(key))
+			{
+				return true;
+			}
+		}
+		return false;
+	}
+
+	/**
+	 * Checks if all the valid parameters exist in the request for the resource
+	 *
+	 * @param request
+	 * @throws NoSuchParameterException
+	 * @throws InvalidParameterException
+	 */
+	private void checkValidParameters( HttpServletRequest request )
+	        throws NoSuchParameterException, InvalidParameterException
+	{
+		// Now check for all the valid parameters for the resource
+		List<String> list = Arrays.asList(this.getValidValues());
+		Map<String, String[]> parameterMap = request.getParameterMap();
+		for (Map.Entry<String, String[]> entry : parameterMap.entrySet())
+		{
+			String parameterName = entry.getKey().toLowerCase();
+			if (!list.contains(parameterName))
+			{
+				throw new NoSuchParameterException(getInvalidPara​meterMessage(parameterName,
+				        this.getResourceName(), this.getValidValues()));
+			}
+		}
+	}
+
+	/**
+	 * Builds the message when the parameter provided is invalid
+	 *
+	 * @param invalid
+	 * @param parameter
+	 * @param validValues
+	 * @return message String
+	 */
+	private String getInvalidPara​meterMessage( String invalid, String parameter,
+	        String[] validValues )
+	{
+		StringBuilder sb = new StringBuilder();
+
+		sb.append("Parameter ").append(invalid).append(" is not a valid parameter for resource ")
+		        .append(parameter).append(". Valid parameters for requested resource are ");
+
+		List<String> validList = Arrays.asList(validValues);
+		for (String valid : validList)
+		{
+			sb.append(valid).append(", ");
+		}
+		String message = sb.substring(0, sb.length() - 2) + ".";
+
+		return message;
+	}
+
 }
\ No newline at end of file
diff --git a/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java b/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
index cec3bf266a..8291edfe4e 100644
--- a/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
+++ b/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
@@ -76,7 +76,7 @@
 
 	@Override
 	public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes )
-			throws ServletException, IOException
+	        throws ServletException, IOException
 	{
 		List<GHPoint> infoPoints = getPoints(httpReq, "point");
 
@@ -98,6 +98,10 @@ public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes )
 		GHResponse ghRsp;
 
 		String instructionsString = getParam(httpReq, "instructions", "true");
+		String pointsEncodedString = getParam(httpReq, "points_encoded", "true");
+		String calcPointsString = getParam(httpReq, "calc_points", "true");
+		String debugString = getParam(httpReq, "debug", "true");
+		String prettyString = getParam(httpReq, "pretty", "true");
 
 		boolean validLocale = false;
 		for (String validLocaleStr : TranslationMap.LOCALES)
@@ -112,7 +116,7 @@ public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes )
 		if (!validLocale)
 		{
 			StringBuilder errMesg = new StringBuilder(localeStr)
-			.append(" is not a valid value for parameter locale. Valid values are ");
+			        .append(" is not a valid value for parameter locale. Valid values are ");
 			for (int i = 0; i < TranslationMap.LOCALES.size(); i++)
 			{
 				String validLocaleStr = TranslationMap.LOCALES.get(i);
@@ -128,35 +132,62 @@ public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes )
 			}
 			ghRsp = new GHResponse().addError(new IllegalArgumentException(errMesg.toString()));
 		} else if (!AlgorithmOptions.ASTAR.equalsIgnoreCase(algoStr)
-				&& !AlgorithmOptions.ASTAR_BI.equalsIgnoreCase(algoStr)
-				&& !AlgorithmOptions.DIJKSTRA.equalsIgnoreCase(algoStr)
-				&& !AlgorithmOptions.DIJKSTRA_BI.equalsIgnoreCase(algoStr)
-				&& !AlgorithmOptions.DIJKSTRA_ONE_TO_MANY.equalsIgnoreCase(algoStr))
+		        && !AlgorithmOptions.ASTAR_BI.equalsIgnoreCase(algoStr)
+		        && !AlgorithmOptions.DIJKSTRA.equalsIgnoreCase(algoStr)
+		        && !AlgorithmOptions.DIJKSTRA_BI.equalsIgnoreCase(algoStr)
+		        && !AlgorithmOptions.DIJKSTRA_ONE_TO_MANY.equalsIgnoreCase(algoStr))
 		{
 			String errMesg = String
-					.format("%s is not a valid value for parameter algorithm. Valid values are %s, %s, %s, %s or %s",
-							algoStr, AlgorithmOptions.ASTAR, AlgorithmOptions.ASTAR_BI,
-							AlgorithmOptions.DIJKSTRA, AlgorithmOptions.DIJKSTRA_BI,
-							AlgorithmOptions.DIJKSTRA_ONE_TO_MANY);
+			        .format("%s is not a valid value for parameter algorithm. Valid values are %s, %s, %s, %s or %s",
+			                algoStr, AlgorithmOptions.ASTAR, AlgorithmOptions.ASTAR_BI,
+			                AlgorithmOptions.DIJKSTRA, AlgorithmOptions.DIJKSTRA_BI,
+			                AlgorithmOptions.DIJKSTRA_ONE_TO_MANY);
 			ghRsp = new GHResponse().addError(new IllegalArgumentException(errMesg));
 		} else if (!"true".equalsIgnoreCase(instructionsString)
-				&& !"false".equalsIgnoreCase(instructionsString))
+		        && !"false".equalsIgnoreCase(instructionsString))
 		{
 			String errMesg = String
-					.format("%s is not a valid value for parameter instructions. Valid vehicles are true or false",
-							instructionsString);
+			        .format("%s is not a valid value for parameter instructions. Valid values are true or false",
+			                instructionsString);
+			ghRsp = new GHResponse().addError(new IllegalArgumentException(errMesg));
+		} else if (!"true".equalsIgnoreCase(pointsEncodedString)
+		        && !"false".equalsIgnoreCase(pointsEncodedString))
+		{
+			String errMesg = String
+			        .format("%s is not a valid value for parameter pointsEncodedString. Valid values are true or false",
+			                pointsEncodedString);
+			ghRsp = new GHResponse().addError(new IllegalArgumentException(errMesg));
+		} else if (!"true".equalsIgnoreCase(calcPointsString)
+				&& !"false".equalsIgnoreCase(calcPointsString))
+		{
+			String errMesg = String
+					.format("%s is not a valid value for parameter calc_points. Valid values are true or false",
+							calcPointsString);
+			ghRsp = new GHResponse().addError(new IllegalArgumentException(errMesg));
+		} else if (!"true".equalsIgnoreCase(debugString) && !"false".equalsIgnoreCase(debugString))
+		{
+			String errMesg = String.format(
+			        "%s is not a valid value for parameter debug. Valid values are true or false",
+			        debugString);
+			ghRsp = new GHResponse().addError(new IllegalArgumentException(errMesg));
+		} else if (!"true".equalsIgnoreCase(prettyString)
+		        && !"false".equalsIgnoreCase(prettyString))
+		{
+			String errMesg = String.format(
+			        "%s is not a valid value for parameter pretty. Valid values are true or false",
+			        prettyString);
 			ghRsp = new GHResponse().addError(new IllegalArgumentException(errMesg));
 		} else if (!hopper.getEncodingManager().supports(vehicleStr))
 		{
 			String supported = hopper.getGraph().getEncodingManager().toString();
 			String errMesg = String.format(
-					"Vehicle %s is not a valid vehicle. Valid vehicles are %s", vehicleStr,
-					supported);
+			        "Vehicle %s is not a valid vehicle. Valid vehicles are %s", vehicleStr,
+			        supported);
 			ghRsp = new GHResponse().addError(new IllegalArgumentException(errMesg));
 		} else if (enableElevation && !hopper.hasElevation())
 		{
 			ghRsp = new GHResponse().addError(new IllegalArgumentException(
-					"Elevation not supported!"));
+			        "Elevation not supported!"));
 		} else
 		{
 			FlagEncoder algoVehicle = hopper.getEncodingManager().getEncoder(vehicleStr);
@@ -164,25 +195,25 @@ public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes )
 
 			initHints(request, httpReq.getParameterMap());
 			request.setVehicle(algoVehicle.toString()).setWeighting(weighting)
-			.setAlgorithm(algoStr).setLocale(localeStr).getHints()
-			.put("calcPoints", calcPoints).put("instructions", enableInstructions)
-			.put("wayPointMaxDistance", minPathPrecision);
+			        .setAlgorithm(algoStr).setLocale(localeStr).getHints()
+			        .put("calcPoints", calcPoints).put("instructions", enableInstructions)
+			        .put("wayPointMaxDistance", minPathPrecision);
 
 			ghRsp = hopper.route(request);
 		}
 
 		float took = sw.stop().getSeconds();
 		String infoStr = httpReq.getRemoteAddr() + " " + httpReq.getLocale() + " "
-				+ httpReq.getHeader("User-Agent");
+		        + httpReq.getHeader("User-Agent");
 		String logStr = httpReq.getQueryString() + " " + infoStr + " " + infoPoints + ", took:"
-				+ took + ", " + algoStr + ", " + weighting + ", " + vehicleStr;
+		        + took + ", " + algoStr + ", " + weighting + ", " + vehicleStr;
 
 		if (ghRsp.hasErrors())
 			logger.error(logStr + ", errors:" + ghRsp.getErrors());
 		else
 			logger.info(logStr + ", distance: " + ghRsp.getDistance() + ", time:"
-					+ Math.round(ghRsp.getTime() / 60000f) + "min, points:"
-					+ ghRsp.getPoints().getSize() + ", debug - " + ghRsp.getDebugInfo());
+			        + Math.round(ghRsp.getTime() / 60000f) + "min, points:"
+			        + ghRsp.getPoints().getSize() + ", debug - " + ghRsp.getDebugInfo());
 
 		if (writeGPX)
 		{
@@ -199,12 +230,12 @@ public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes )
 			if (!"json".equalsIgnoreCase(type) || (!"jsonp".equalsIgnoreCase(type) && jsonpAllowed))
 			{
 				String errorMessage = type
-						+ " is not a valid value for parameter type. Valid values are ";
+				        + " is not a valid value for parameter type. Valid values are ";
 				errorMessage += jsonpAllowed ? "JSON, GPX or JSONP." : "GPX or JSON.";
 				ghRsp.addError(new IllegalArgumentException(errorMessage));
 			}
 			Map<String, Object> map = createJson(ghRsp, calcPoints, pointsEncoded, enableElevation,
-					enableInstructions);
+			        enableInstructions);
 			Object infoMap = map.get("info");
 			if (infoMap != null)
 				((Map) infoMap).put("took", Math.round(took * 1000));
@@ -218,7 +249,7 @@ public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes )
 	}
 
 	protected String createGPXString( HttpServletRequest req, HttpServletResponse res,
-			GHResponse rsp )
+	        GHResponse rsp )
 	{
 		boolean includeElevation = getBooleanParam(req, "elevation", false);
 		res.setCharacterEncoding("UTF-8");
@@ -279,8 +310,8 @@ String errorsToXML( List<Throwable> list )
 	}
 
 	protected Map<String, Object> createJson( GHResponse rsp, boolean calcPoints,
-			boolean pointsEncoded, boolean includeElevation, boolean enableInstructions )
-			{
+	        boolean pointsEncoded, boolean includeElevation, boolean enableInstructions )
+	{
 		Map<String, Object> json = new HashMap<String, Object>();
 
 		if (rsp.hasErrors())
@@ -321,7 +352,7 @@ String errorsToXML( List<Throwable> list )
 				{
 					BBox maxBounds = hopper.getGraph().getBounds();
 					BBox maxBounds2D = new BBox(maxBounds.minLon, maxBounds.maxLon,
-							maxBounds.minLat, maxBounds.maxLat);
+					        maxBounds.minLat, maxBounds.maxLat);
 					jsonPath.put("bbox", rsp.calcRouteBBox(maxBounds2D).toGeoJson());
 				}
 
@@ -336,7 +367,7 @@ String errorsToXML( List<Throwable> list )
 			json.put("paths", Collections.singletonList(jsonPath));
 		}
 		return json;
-			}
+	}
 
 	protected Object createPoints( PointList points, boolean pointsEncoded, boolean includeElevation )
 	{
