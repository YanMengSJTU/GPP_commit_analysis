diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperJSONParser.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperJSONParser.java
index f483294e7f..4736de34bc 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperJSONParser.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperJSONParser.java
@@ -84,8 +84,8 @@ public JSONWayPoints parseJSONFromString(String jsonString) {
 			LOG.info("time :" + time);
 			LOG.info("distance :" + distance);
 			if (null != annotation_text) {
-				w.setAnnotation_text(annotation_text.toString());
-				LOG.info("annotation_text: " + annotation_text.toString());
+				w.addExtensionData("Annotation_text",annotation_text.getAsString().trim());
+				LOG.info("annotation_text: " + annotation_text.getAsString().trim());
 			}
 			LOG.info("Coordinates : " + w.getLatitude() + ","
 					+ w.getLongitude());
@@ -273,7 +273,7 @@ public boolean isWayPointinPath(Waypoint we,HashSet<Waypoint> wa) {
 	 * @return Waypoint
 	 */
 	public Waypoint buildWayPointForJson(String wayPoint_Coordinates,
-			String wayPointDescription, String time, String distance) {
+			String wayPointDescription, String time, String distance,String avoidance) {
 		Waypoint w = new Waypoint();
 		String waypoint[] = wayPoint_Coordinates.split(",");
 		w.setLatitude(new Double(waypoint[0]));
@@ -281,6 +281,7 @@ public Waypoint buildWayPointForJson(String wayPoint_Coordinates,
 		w.setDescription(wayPointDescription);
 		w.addExtensionData(ExtensionConstants.DISTANCE, distance);
 		w.addExtensionData(ExtensionConstants.TIME, time);
+		w.addExtensionData("Annotation_text", avoidance.trim());
 		return w;
 
 	}
diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
index b8c93165a5..1361d85ba1 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
@@ -272,7 +272,7 @@ public void I_should_be_able_to_verify_the_trackpoints_not_on_the_route_map(
 
 	}
 
-	@After({ "@Routing" })
+	@After
 	public void closeBrowser(Scenario sc) {
 
 		if (sc.isFailed()) {
diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
index 38f66b6881..8600598c05 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
@@ -348,7 +348,7 @@ public boolean isWayPointonRouteMap(String wayPointIndex,
 
 			} else {
 				wp = GPHJsonService.buildWayPointForJson(wayPoint_Coordinates,
-						wayPointDescription, time, distance);
+						wayPointDescription, time, distance,avoidance);
 				isWayPointonRouteMap = GPHJsonService.isWayPointinPath(wp);
 
 			}
@@ -367,7 +367,7 @@ public boolean isWayPointonRouteMap(String wayPointIndex,
 
 			} else {
 				wp = GPHJsonService.buildWayPointForJson(wayPoint_Coordinates,
-						wayPointDescription, time, distance);
+						wayPointDescription, time, distance,avoidance);
 				isWayPointonRouteMap = GPHJsonService.isWayPointinPath(wp);
 
 			}
diff --git a/acceptancetesting/src/test/cucumber/DPNRouting.feature b/acceptancetesting/src/test/cucumber/DPNRouting.feature
index 59478925b1..2031d40fe4 100644
--- a/acceptancetesting/src/test/cucumber/DPNRouting.feature
+++ b/acceptancetesting/src/test/cucumber/DPNRouting.feature
@@ -59,12 +59,13 @@ Feature: Verify a route from A to B
       | pointA              | pointB             | routetype | avoidances |
       | 53.122676,-1.909914 | 53.088159,-1.87142 | foot      |            |
 
-  @Routing
+ @Routing 
   Scenario Outline: Verify  Road Names on a Walking Route (Martin's Low)
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco          | waypointdesc          | azimuth | direction | time  | distance | avoidance |
-      | 3             | 53.066198,-1.905401 | Turn right onto Track | 105.0   | E         | 38678 | 53.7     |           |
+      | 3             | 53.071624,-1.914417 | Turn right onto Path | 356.0  | N         | 425697 | 591.2     |           |
+
 
     Examples: 
       | pointA             | pointB              | routetype | avoidances |
@@ -228,23 +229,23 @@ Feature: Verify a route from A to B
       | 53.267104,-1.818304 | 53.131858,-1.661941 | foot      | Scree      |
 
   #cliff
-  @Routing
+  ##############
+  @Routing  @Current
   Scenario Outline: Verify DPN Route without cliff avoidance -(cliff)
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco          | waypointdesc        | azimuth | direction | time   | distance | avoidance |
-      | 4             | 53.312731,-1.627617 | Continue onto Route | 164.0   | S         | 264332 | 367.1    | Cliff     |
-
-    Examples: 
+      | 5             | 53.311409,-1.627165 | Continue onto Route | 178.0  | S         | 2655 | 3.7   | Cliff     |
+   Examples: 
       | pointA             | pointB              | routetype | avoidances |
       | 53.31676,-1.631903 | 53.156465,-1.908797 | foot      |            |
 
-  @Routing
+ @Routing @Current
   Scenario Outline: Verify DPN Route with cliff avoidance -(cliff)
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints not on the route map:
       | wayPointIndex | waypointco          | waypointdesc        | azimuth | direction | time   | distance | avoidance |
-      | 4             | 53.312731,-1.627617 | Continue onto Route | 164.0   | S         | 264332 | 367.1    | Cliff     |
+        | 5             | 53.311409,-1.627165 | Continue onto Route | 178.0  | S         | 2655 | 3.7   | Cliff     |
 
     Examples: 
       | pointA             | pointB              | routetype | avoidances |
@@ -263,7 +264,7 @@ Feature: Verify a route from A to B
       | pointA            | pointB              | routetype | avoidances |
       | 53.5534,-1.983177 | 53.540061,-1.978324 | foot      |            |
 
-  @Routing
+  @Current
   Scenario Outline: Verify DPN Route with cliff avoidance -(cliff)
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints not on the route map:
@@ -288,7 +289,7 @@ Feature: Verify a route from A to B
       | pointA              | pointB              | routetype | avoidances |
       | 53.311217,-1.629849 | 53.156465,-1.908797 | foot      |            |
 
-  @Routing
+  @Current
   Scenario Outline: Verify DPN Route with boulders avoidance -(boulders)
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI and avoid "<avoidances>"
     Then I should be able to verify the waypoints not on the route map:
