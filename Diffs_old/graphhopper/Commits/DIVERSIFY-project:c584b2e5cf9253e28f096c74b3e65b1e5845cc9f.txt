diff --git a/Tasks_Amal.txt b/Tasks_Amal.txt
index 00279baa92..178755f7b6 100644
--- a/Tasks_Amal.txt
+++ b/Tasks_Amal.txt
@@ -21,3 +21,5 @@ TODO:
 
 3. If Bike or Foot is specificed in 'acceptWay' in config file, the user to be provided the option to specify 'Elevation' Yes or NO
    -> elevation is equals false by default
+
+4. check wehen running from netbeans, what is the root dir? cant find file, and cant read sensor data!
\ No newline at end of file
diff --git a/core/src/main/java/com/graphhopper/GraphHopper.java b/core/src/main/java/com/graphhopper/GraphHopper.java
index 8c30127ef5..6b05128118 100644
--- a/core/src/main/java/com/graphhopper/GraphHopper.java
+++ b/core/src/main/java/com/graphhopper/GraphHopper.java
@@ -782,7 +782,15 @@ public Weighting createWeighting( String weighting, FlagEncoder encoder )
             else
                 return new FastestWeighting(encoder);
         }
-        return new ShortestWeighting();
+        else if("least_noisy".equals(weighting))
+        { 
+            System.out.println("LeastNoisyWeighting object is created...Huurrraaayyyy");
+            return new LeastNoisyWeighting();
+            
+        }
+        else{
+            return new ShortestWeighting();
+        }
     }
 
     @Override
diff --git a/core/src/main/java/com/graphhopper/routing/util/LeastNoisyWeighting.java b/core/src/main/java/com/graphhopper/routing/util/LeastNoisyWeighting.java
index 5a136462e7..dd711c3934 100644
--- a/core/src/main/java/com/graphhopper/routing/util/LeastNoisyWeighting.java
+++ b/core/src/main/java/com/graphhopper/routing/util/LeastNoisyWeighting.java
@@ -17,6 +17,21 @@
 package com.graphhopper.routing.util;
 
 import com.graphhopper.util.EdgeIteratorState;
+import java.util.Random;
+
+import java.io.IOException;                                                    
+import java.net.URI;
+import java.net.URISyntaxException;
+import java.util.HashMap;                                                      
+import java.util.Map;                                                          
+import java.util.List;                                                          
+                                                                               
+import redis.clients.jedis.BinaryJedis;                                        
+import redis.clients.jedis.Jedis;                                              
+import redis.clients.jedis.Protocol;                                           
+import redis.clients.jedis.exceptions.JedisConnectionException;                
+import redis.clients.jedis.exceptions.JedisDataException;                      
+import redis.clients.util.SafeEncoder;  
 
 /**
  * Calculates the least noisy route- independent of a vehicle as the calculation is based on 
@@ -25,8 +40,11 @@
  */
 public class LeastNoisyWeighting implements Weighting
 {
+    String currentCity;
+    
     public LeastNoisyWeighting()
     {
+        System.out.println("LeastNoiseWeighting instantiated!");
         
     }
     
@@ -40,16 +58,49 @@ public double getMinWeight( double noiseValue )
      @Override
     public double calcWeight( EdgeIteratorState edge, boolean reverse )
     {
-        //TODO : First test when you pass least_noise from the web app
-        //if this invokes here--Code to capture noise value of edge from Redis and returns it!
-        return edge.getDistance();
+        //Experimenting with returning a random radom between 0-80...Worked!
+        /*Random nw = new Random();
+        double returnedRandom = nw.nextInt(100);
+        System.out.println("Random noise value for edge = " +edge+ " = "+ returnedRandom );
+        return returnedRandom;*/
+        
+        double noiseValue = getNoiseFromRedis(edge);
+        return noiseValue;
+    
     }
     
+      double getNoiseFromRedis(EdgeIteratorState edge)
+    {
+        double noiseValue=0;
+        String city = getCurrentCity();
+        //TODO: connect to redis
+        //based on the value of city, the appropriate database is selected, and query with the edge to return the noise value
+        //check if we can increment the time of the noise reading to instructions in the response??
+        
+        
+        return noiseValue;
+    }
+      
+      //TODO: Start here: should be set in the route method (graphhopper) when selecting and init the appropriate weighting
+      void setCurrentCity(String city)
+      {
+          this.currentCity = city;
+      }
+  
+      String getCurrentCity()
+      {
+          return currentCity;
+          
+      }
+    
+    
     @Override
     public String toString()
     {
-        //TODO: check if we need to define it with the encoder manger or elsewhere
+        //TODO: check if we need to register it with the encodering manger or elsewhere
         return "LEAST_NOISY";
     }
     
+  
+    
 }
diff --git a/pom.xml b/pom.xml
index 6d715f771f..6826d1f1e4 100644
--- a/pom.xml
+++ b/pom.xml
@@ -137,6 +137,33 @@
                 <artifactId>maven-source-plugin</artifactId>
                 <version>2.2.1</version>
             </plugin>
+            
+            <!--Amal: redis maven plugin, check if we need it!-->
+            <plugin>
+                <groupId>ru.trylogic.maven.plugins</groupId>
+                <artifactId>redis-maven-plugin</artifactId>
+                <version>1.2.3</version>
+                <configuration>
+                    <forked>true</forked>
+                </configuration>
+                <executions>
+                    <execution>
+                        <id>start-redis</id>
+                        <phase>pre-integration-test</phase>
+                        <goals>
+                            <goal>run</goal>
+                        </goals>
+                    </execution>
+                    <execution>
+                        <id>stop-redis</id>
+                        <phase>post-integration-test</phase>
+                        <goals>
+                            <goal>shutdown</goal>
+                        </goals>
+                    </execution>
+                </executions>
+            </plugin>
+            
         </plugins>
     </build>    
     
@@ -146,7 +173,14 @@
             <artifactId>junit</artifactId>
             <version>4.11</version>
             <scope>test</scope>
-        </dependency>        
+        </dependency>  
+        
+        <!-- Amal: Added to allow the connection to Redis -->
+        <dependency>
+            <groupId>redis.clients</groupId>
+            <artifactId>jedis</artifactId>
+            <version>2.1.0</version>
+        </dependency>      
     </dependencies>
     
     <!-- mvn deploy -DperformRelease=true -->
diff --git a/web/src/main/java/com/graphhopper/http/InfoServlet.java b/web/src/main/java/com/graphhopper/http/InfoServlet.java
index 163f7d25ab..0fdaf46ba8 100644
--- a/web/src/main/java/com/graphhopper/http/InfoServlet.java
+++ b/web/src/main/java/com/graphhopper/http/InfoServlet.java
@@ -117,9 +117,10 @@ ArrayList getAvailableSensors(String osmFile) throws IOException
         String cityName = getCity(osmFile);
         
         //sensors configuration files are named as cityname.config
-        String fileName = "./sensors-config-files/"+cityName + ".config";
         
-        //String fileName = "./sensors-config-files/dublin.config";
+        //TODO: check wehen running from netbeans, what is the root dir?
+        String fileName = "./sensors-config-files/"+cityName + ".config";
+
         ArrayList sensorsTxt = new ArrayList();
         try
         {
