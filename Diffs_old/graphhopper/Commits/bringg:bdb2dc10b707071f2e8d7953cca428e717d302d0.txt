diff --git a/core/src/main/java/com/graphhopper/WeightingWithPenalties.java b/core/src/main/java/com/graphhopper/WeightingWithPenalties.java
index e1b540df6a..169dab1a57 100644
--- a/core/src/main/java/com/graphhopper/WeightingWithPenalties.java
+++ b/core/src/main/java/com/graphhopper/WeightingWithPenalties.java
@@ -105,15 +105,19 @@ public WayData(double firstWayPointLat, double firstWayPointLng, double lastWayP
         }
     }
 
-    private double updateVisitedEdgesAndGetPenalty(EdgeIteratorState edge, boolean reverse, int prevOrNextEdgeId) {
-
+    protected double updateVisitedEdgesAndGetPenalty(EdgeIteratorState edge, boolean reverse, int prevOrNextEdgeId) {
         PointList pointList = edge.fetchWayGeometry(3);
         WayData wayData = new WayData(
                 pointList.getLat(0),
                 pointList.getLon(0),
                 pointList.getLat(pointList.size() - 1),
                 pointList.getLon(pointList.size() - 1));
-        visitedEdgesCoordinates.put(edge.getEdge(), wayData);
+        try {
+            visitedEdgesCoordinates.put(edge.getEdge(), wayData);
+        } catch (Exception e) {
+            logger.error("failed to put, size {} error {}", visitedEdgesCoordinates.size(), e);
+            return 0;
+        }
         WayData prevWayData;
         if (reverse) { //if reverse is true prevOrNextEdgeId has to be the next edgeId in the direction from start to end.
             prevWayData = wayData;
diff --git a/core/src/main/java/com/graphhopper/routing/util/SupportTollRoadsFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/SupportTollRoadsFlagEncoder.java
index 20569686cf..1ce9b3b281 100644
--- a/core/src/main/java/com/graphhopper/routing/util/SupportTollRoadsFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/SupportTollRoadsFlagEncoder.java
@@ -16,8 +16,6 @@ public SupportTollRoadsFlagEncoder(PMap properties) {
 
     @Override
     public long acceptWay(ReaderWay way) {
-        logger.info("SupportTollRoadsFlagEncoder handleWayTags" );
-
         if (way.hasTag("toll", String.valueOf(Boolean.TRUE)) || way.hasTag("toll", "yes") || way.hasTag("barrier", "toll_booth")) {
             return 0;
         }
diff --git a/core/src/test/java/com/graphhopper/WeightingWithPenaltiesTest.java b/core/src/test/java/com/graphhopper/WeightingWithPenaltiesTest.java
new file mode 100644
index 0000000000..c828996f0d
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/WeightingWithPenaltiesTest.java
@@ -0,0 +1,38 @@
+package com.graphhopper;
+
+import com.graphhopper.routing.util.FlagEncoder;
+import com.graphhopper.routing.util.HintsMap;
+import com.graphhopper.util.EdgeIteratorState;
+import com.graphhopper.util.PointList;
+import org.junit.Ignore;
+import org.junit.Test;
+
+import java.util.Collections;
+import java.util.Random;
+
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+public class WeightingWithPenaltiesTest {
+    final Random random = new Random();
+    @Ignore
+    @Test
+    public void updateVisitedEdgesAndGetPenalty() {
+        final FlagEncoder flagEncoder = mock(FlagEncoder.class);
+        when(flagEncoder.isRegistered()).thenReturn(true);
+        final WeightingWithPenalties weightingWithPenalties = new WeightingWithPenalties(flagEncoder, mock(HintsMap.class), Collections.EMPTY_LIST);
+
+        int prevEdge = 0;
+        for (int i = 0; i < Integer.MAX_VALUE; ++i) {
+            final PointList pointList = new PointList();
+            pointList.add(random.nextDouble(), random.nextDouble());
+            final EdgeIteratorState edgeIteratorState = mock(EdgeIteratorState.class);
+            when(edgeIteratorState.fetchWayGeometry(3)).thenReturn(pointList);
+            final int current = random.nextInt();
+            when(edgeIteratorState.getEdge()).thenReturn(current);
+            weightingWithPenalties.updateVisitedEdgesAndGetPenalty(edgeIteratorState, false,prevEdge);
+            prevEdge = current;
+        }
+
+    }
+}
\ No newline at end of file
