diff --git a/config-example.properties b/config-example.properties
index b906cb8c6f..a8456b82ba 100644
--- a/config-example.properties
+++ b/config-example.properties
@@ -19,6 +19,10 @@ prepare.chShortcuts=fastest
 # prepare.updates.lazy=10
 # prepare.updates.neighbor=20
 
+# uncomment prepare.minNetworkSize to remove small networks to avoid routing failure in isolated networks - default=200
+# prepare.minNetworkSize=200
+# uncomment prepare.minCarNetworkSize to remove one-way nodes that drives to dead-end - default=0 (does nothing)
+prepare.minCarNetworkSize=50
 
 # increase from 1 to 5, to reduce way geometry e.g. for android
 osmreader.wayPointMaxDistance=1
diff --git a/core/src/main/java/com/graphhopper/GraphHopper.java b/core/src/main/java/com/graphhopper/GraphHopper.java
index ac06263d1d..45de0bfb7c 100644
--- a/core/src/main/java/com/graphhopper/GraphHopper.java
+++ b/core/src/main/java/com/graphhopper/GraphHopper.java
@@ -82,6 +82,7 @@ public static void main( String[] strs ) throws Exception
     private boolean searchRegion = true;
     // for prepare
     private int minNetworkSize = 200;
+    private int minCarNetworkSize = 0;
     // for CH prepare
     private AlgorithmPreparation prepare;
     private boolean doPrepare = true;
@@ -521,6 +522,7 @@ public GraphHopper init( CmdArgs args )
 
         // optimizable prepare
         minNetworkSize = args.getInt("prepare.minNetworkSize", minNetworkSize);
+        minCarNetworkSize = args.getInt("prepare.minCarNetworkSize", minCarNetworkSize);
 
         // prepare CH
         doPrepare = args.getBool("prepare.doPrepare", doPrepare);
@@ -981,6 +983,7 @@ protected void cleanUp()
         int prev = graph.getNodes();
         PrepareRoutingSubnetworks preparation = new PrepareRoutingSubnetworks(graph, encodingManager);
         preparation.setMinNetworkSize(minNetworkSize);
+        preparation.setMinCarNetworkSize(minCarNetworkSize);
         logger.info("start finding subnetworks, " + Helper.getMemInfo());
         preparation.doWork();
         int n = graph.getNodes();
diff --git a/core/src/main/java/com/graphhopper/routing/util/PrepareRoutingSubnetworks.java b/core/src/main/java/com/graphhopper/routing/util/PrepareRoutingSubnetworks.java
index 009db0927c..cae58e34de 100644
--- a/core/src/main/java/com/graphhopper/routing/util/PrepareRoutingSubnetworks.java
+++ b/core/src/main/java/com/graphhopper/routing/util/PrepareRoutingSubnetworks.java
@@ -43,6 +43,7 @@
     private final GraphStorage g;
     private final EdgeFilter edgeFilter;
     private int minNetworkSize = 200;
+    private int minCarNetworkSize = 50;
     private int subNetworks = -1;
     private final AtomicInteger maxEdgesPerNode = new AtomicInteger(0);
 
@@ -62,13 +63,23 @@ public PrepareRoutingSubnetworks setMinNetworkSize( int minNetworkSize )
         this.minNetworkSize = minNetworkSize;
         return this;
     }
+    public PrepareRoutingSubnetworks setMinCarNetworkSize( int minCarNetworkSize )
+    {
+        this.minCarNetworkSize = minCarNetworkSize;
+        return this;
+    }
 
     public void doWork()
     {
         int del = removeZeroDegreeNodes();
+        int deadnet = 0;
+        if (this.minCarNetworkSize > 0)
+            deadnet = removeOneWayDeadEndNetworks(this.minCarNetworkSize);
+
         Map<Integer, Integer> map = findSubnetworks();
         keepLargeNetworks(map);
         logger.info("optimize to remove subnetworks (" + map.size() + "), zero-degree-nodes (" + del + "), "
+                + "dead-end-oneway-nodes (" + deadnet + "), "
                 + "maxEdges/node (" + maxEdgesPerNode.get() + ")");
         g.optimize();
         subNetworks = map.size();
@@ -209,4 +220,48 @@ int removeZeroDegreeNodes()
         }
         return removed;
     }
+
+    /**
+     * Remove one-way nodes that drives to dead-end
+     * <p/>
+     * @return removed nodes
+     */
+    int removeOneWayDeadEndNetworks(final int minSize)
+    {
+        int removed = 0;
+        int locs = g.getNodes();
+
+        FlagEncoder encoder = g.getEncodingManager().getEncoder("car");
+
+        EdgeExplorer inExplorer = g.createEdgeExplorer(new DefaultEdgeFilter(encoder, true, false));
+        EdgeExplorer outExplorer = g.createEdgeExplorer(new DefaultEdgeFilter(encoder, false, true));
+        for (int start = 0; start < locs; start++)
+        {
+            if (g.isNodeRemoved(start))
+                continue;
+
+            if ((subNodeCount(inExplorer, start, minSize) < minSize) ||
+                (subNodeCount(outExplorer, start, minSize) < minSize))
+            {
+                removed++;
+                g.markNodeRemoved(start);
+            }
+        }
+        return removed;
+    }
+    private int subNodeCount(final EdgeExplorer explorer, final int start, final int stopNodeCount)
+    {
+        final AtomicInteger integ = new AtomicInteger(0);
+        
+        new XFirstSearch()
+        {
+            @Override
+            protected final boolean goFurther( int nodeId )
+            {
+                return integ.incrementAndGet() < stopNodeCount;
+            }
+        }.start(explorer, start, false);
+        
+        return integ.get();
+    }
 }
