diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
index fa315046d2..c97dc9cf9e 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
@@ -71,7 +71,7 @@
 	JavascriptExecutor js = (JavascriptExecutor) driver;
 	WebElement we;
 	private BufferedImage actualMap;
-	private String httpMethod="";
+	private String httpMethod = "";
 	private int actualResponseCode;
 	private String actualResponseMsg;
 
@@ -324,7 +324,7 @@ public boolean isWayPointonRouteMap(String wayPointIndex,
 			break;
 		case "SERVICE":
 
-			if (requestParameters.get("type").get(0).equals("gpx")) {
+			if (requestParameters.get("type").get(0).equalsIgnoreCase("gpx")) {
 				wp = buildWayPoint(wayPoint_Coordinates, wayPointDescription,
 						azimuth, direction, time, distance);
 				isWayPointonRouteMap = GPHServiceUtil.isWayPointOnGPXRoutes(wp);
@@ -573,8 +573,7 @@ public void isTrackPointonRouteMap(List<Map<String, String>> trackPointsList)
 					"trackPointco");
 
 			Waypoint trackPoint = buildWayPoint(waypointco);
-			if (IntegrationTestProperties.getTestProperty("routeType").equals(
-					"gpx")) {
+			if (requestParameters.get("type").get(0).equalsIgnoreCase("gpx")) {
 				assertTrue(GPHServiceUtil.isWayPointOnTrack(trackPoint,
 						GPHServiceUtil.getTracks().iterator().next()));
 			}
@@ -598,7 +597,7 @@ public void isTrackPointNotonRouteMap(
 					"trackPointco");
 
 			Waypoint trackPoint = buildWayPoint(waypointco);
-			if (requestParameters.get("type").get(0).equals("gpx")) {
+			if (requestParameters.get("type").get(0).equalsIgnoreCase("gpx")) {
 				assertTrue(!GPHServiceUtil.isWayPointOnTrack(trackPoint,
 						GPHServiceUtil.getTracks().iterator().next()));
 			}
@@ -682,12 +681,12 @@ public void verifyWayPointsThroughService() {
 
 	protected void addParameter(String key, String value) {
 		ArrayList<String> tempList = null;
-		if (value.equals("mountainbike"))
-		{	value="mtb";}
-		
+		if (value.equals("mountainbike")) {
+			value = "mtb";
+		}
+
+		value = value.toLowerCase().replaceAll(" ", "");
 
-			value= value.toLowerCase().replaceAll(" ", "");
-		
 		if (requestParameters.containsKey(key)) {
 			tempList = requestParameters.get(key);
 			if (tempList == null)
@@ -727,7 +726,11 @@ void sendAndGetResponse(StringBuffer sb) {
 			serviceResponse = IOUtils.toString(httpResponse.getEntity()
 					.getContent(), "UTF-8");
 			
+				
+			
+
 			final StatusLine statusLine = httpResponse.getStatusLine();
+			
 			actualResponseCode = statusLine.getStatusCode();
 			actualResponseMsg = statusLine.getReasonPhrase();
 
@@ -738,8 +741,7 @@ void sendAndGetResponse(StringBuffer sb) {
 
 		if (serviceResponse != null && serviceResponse.length() > 0) {
 
-			if (requestParameters.get("type").get(0)
-					.equalsIgnoreCase("gpx")) {
+			if (requestParameters.get("type").get(0).equalsIgnoreCase("gpx")) {
 				GPHServiceUtil.parseGPXFromString(serviceResponse);
 			} else {
 				GPHJSONUtil.parse(serviceResponse);
@@ -770,43 +772,43 @@ private void addCustomHeaders(HttpUriRequest httpRequest) {
 	CloseableHttpResponse doSendAndGetResponse(String serviceUrl)
 			throws IOException, ClientProtocolException {
 		CloseableHttpClient httpClient = HttpClientUtils.createClient();
-		
-		HttpUriRequest httpRequest=null;
-		
-	switch (httpMethod) {
-	case "PUT":
-		httpRequest = new HttpPut(serviceUrl);
-		
-		break;
-	case "GET":
-		
-		httpRequest = new HttpGet(serviceUrl);
-		
-		break;
-		
-	case "DEL":
-		
-		httpRequest = new HttpDelete(serviceUrl);
-		
-		break;
-		
-	case "POST":
-		
-		httpRequest = new HttpPost(serviceUrl);
-		
-		break;
-
-	case "OPTIONS":
-		
-		httpRequest = new HttpOptions(serviceUrl);
-		
-		break;
-	default:
-		httpRequest = new HttpGet(serviceUrl);
-		break;
-	}
-		
-		//HttpGet httpget = new HttpGet(serviceUrl);
+
+		HttpUriRequest httpRequest = null;
+
+		switch (httpMethod) {
+		case "PUT":
+			httpRequest = new HttpPut(serviceUrl);
+
+			break;
+		case "GET":
+
+			httpRequest = new HttpGet(serviceUrl);
+
+			break;
+
+		case "DEL":
+
+			httpRequest = new HttpDelete(serviceUrl);
+
+			break;
+
+		case "POST":
+
+			httpRequest = new HttpPost(serviceUrl);
+
+			break;
+
+		case "OPTIONS":
+
+			httpRequest = new HttpOptions(serviceUrl);
+
+			break;
+		default:
+			httpRequest = new HttpGet(serviceUrl);
+			break;
+		}
+
+		// HttpGet httpget = new HttpGet(serviceUrl);
 		addCustomHeaders(httpRequest);
 
 		return httpClient.execute(httpRequest);
@@ -862,9 +864,8 @@ public void getRouteFromUI() {
 
 		String avoidances = requestParameters.get("avoidances").get(0);
 		String vehicle = requestParameters.get("vehicle").get(0);
-		if (vehicle.equalsIgnoreCase("mountainbike"))
-		{
-			vehicle="mtb";
+		if (vehicle.equalsIgnoreCase("mountainbike")) {
+			vehicle = "mtb";
 		}
 
 		ArrayList<String> points = requestParameters.get("point");
@@ -1019,15 +1020,12 @@ public void verifyStatusCode(int statusCode) {
 		}
 	}
 
-	public Map<String, ArrayList<String>> getrequestParameters()
-	{
+	public Map<String, ArrayList<String>> getrequestParameters() {
 		return requestParameters;
 	}
-	
-	
-	public void getNearestPoint(String paramName,String pointA) {
 
-		String nearestpoint = "";
+	public void getNearestPoint(String paramName, String pointA) {
+
 		StringBuffer sb = new StringBuffer();
 		if (IntegrationTestProperties.getTestPropertyBool("viaApigee")) {
 			sb.append(IntegrationTestProperties
@@ -1038,20 +1036,13 @@ public void getNearestPoint(String paramName,String pointA) {
 		}
 
 		sb.append("nearest?");
-		sb.append(paramName+"=");
+		sb.append(paramName + "=");
 		sb.append(pointA);
 
 		getRouteFromServiceWithParameters(sb);
 
-	//	nearestpoint = getNearestPoint();
-		
-
-		//return nearestpoint;
-
 	}
 
-
-	
 	public String getNearestPoint() {
 
 		return GPHJSONUtil.getNearestPoint();
@@ -1064,27 +1055,22 @@ public String getNearestPointDistance() {
 	}
 
 	public void setHTTPMethod(String httpMethod) {
-		
-		this.httpMethod=httpMethod;
-		
 
-		
+		this.httpMethod = httpMethod;
+
 	}
 
 	public void verifyHttpStatusCode(int statusCode) {
-		Assert.assertTrue("Actual http Status Code"+ actualResponseCode+ "i s not matching with "+statusCode,statusCode==actualResponseCode);		
+		Assert.assertTrue("Actual http Status Code" + actualResponseCode
+				+ "i s not matching with " + statusCode,
+				statusCode == actualResponseCode);
 	}
 
 	public void verifyHttpErrorMessage(String responseMessage) {
-		Assert.assertTrue("Actual http Error Message "+ actualResponseMsg+ " is not matching with "+responseMessage,responseMessage.equalsIgnoreCase(actualResponseMsg));
-		
-	}
+		Assert.assertTrue("Actual http Error Message " + actualResponseMsg
+				+ " is not matching with " + responseMessage,
+				responseMessage.equalsIgnoreCase(actualResponseMsg));
 
-	public void setPointForNearest(String paramName, String pointA) {
-		
-	
-		
 	}
 
-	
 }
diff --git a/acceptancetesting/src/test/cucumber/Routing-Errors.feature b/acceptancetesting/src/test/cucumber/Routing-Errors.feature
index 2489246400..12c7564c8e 100644
--- a/acceptancetesting/src/test/cucumber/Routing-Errors.feature
+++ b/acceptancetesting/src/test/cucumber/Routing-Errors.feature
@@ -555,7 +555,7 @@ Feature: Verify Error Messages from a routing service
       | car         |            | fastest   | OPTIONS    | json           | OK                 | 200        |
 
   # Nearest Point : Invalid Parameter Value "point"
-   @ErrorMessages @Current
+   @ErrorMessages
   Scenario Outline: Verify  nearest point of point using NearestPoint API
     Given I have type as "<responseFormat>"
     And My routing points for nearestPoint API as "<pointA>"
diff --git a/acceptancetesting/src/test/cucumber/Routing-Exeter.feature b/acceptancetesting/src/test/cucumber/Routing-Exeter.feature
index 359e625b40..0b3dc1c6fd 100644
--- a/acceptancetesting/src/test/cucumber/Routing-Exeter.feature
+++ b/acceptancetesting/src/test/cucumber/Routing-Exeter.feature
@@ -297,7 +297,7 @@ Feature: Verify a route from A to B
       | car         |            | fastest   |
 
   # Access Limited To
-  @Routing @Current
+  @Routing 
   Scenario Outline: Verify  Access Limited To  Restrictions on a Route (North Street-Exeter)
     Given I have route point as
       | pointA              | pointB              |
