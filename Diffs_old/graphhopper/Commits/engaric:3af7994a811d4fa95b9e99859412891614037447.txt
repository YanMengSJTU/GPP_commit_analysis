diff --git a/core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java
index 3d134126c3..f1492f543f 100644
--- a/core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java
@@ -95,6 +95,7 @@
     private boolean blockFords = true;
     protected final int speedBits;
     protected final double speedFactor;
+	protected List<EncoderDecorator> encoderDecorators=null;
 
     /**
      * @param speedBits specify the number of bits used for speed
@@ -188,6 +189,11 @@ public int defineWayBits( int index, int shift )
         acceptBit = 1L << index;
         ferryBit = 2L << index;
 
+        if(null!=encoderDecorators) {
+        	for (EncoderDecorator decorator : encoderDecorators) {
+        		shift = decorator.defineWayBits(shift);
+        	}
+        }
         return shift;
     }
 
@@ -220,7 +226,14 @@ public int defineRelationBits( int index, int shift )
      * Analyze properties of a way and create the routing flags. This method is called in the second
      * parsing step.
      */
-    public abstract long handleWayTags( Way way, long allowed, long relationFlags );
+    public long handleWayTags( Way way, long allowed, long relationFlags ) {
+    	if(null!=encoderDecorators) {
+    		for (EncoderDecorator decorator : encoderDecorators) {
+				relationFlags = decorator.handleWayTags(way, relationFlags);
+			}
+    	}
+    	return relationFlags;
+    };
 
     /**
      * Parse tags on nodes. Node tags can add to speed (like traffic_signals) where the value is
@@ -264,6 +277,14 @@ public long handleNodeTags( Node node )
     @Override
     public InstructionAnnotation getAnnotation( long flags, Translation tr )
     {
+    	if(null!=encoderDecorators) {
+    		for (EncoderDecorator decorator : encoderDecorators) {
+				InstructionAnnotation anno = decorator.getAnnotation(flags, tr);
+				if(!anno.isEmpty()) {
+					return anno;
+				}
+			}
+    	}
         return InstructionAnnotation.EMPTY;
     }
 
@@ -487,6 +508,11 @@ protected static int parseDuration( String str )
      */
     public void applyWayTags( Way way, EdgeIteratorState edge )
     {
+    	if(null!=encoderDecorators) {
+    		for (EncoderDecorator decorator : encoderDecorators) {
+    			
+			}
+    	}
     }
 
     /**
diff --git a/core/src/main/java/com/graphhopper/routing/util/EncoderDecorator.java b/core/src/main/java/com/graphhopper/routing/util/EncoderDecorator.java
new file mode 100644
index 0000000000..be4fddbcde
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/routing/util/EncoderDecorator.java
@@ -0,0 +1,11 @@
+package com.graphhopper.routing.util;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.util.InstructionAnnotation;
+import com.graphhopper.util.Translation;
+
+public interface EncoderDecorator {
+	int defineWayBits(int shift);
+	long handleWayTags(Way way, long encoded);
+	public InstructionAnnotation getAnnotation(long flags, Translation tr);
+}
diff --git a/core/src/main/java/com/graphhopper/routing/util/EncodingManager.java b/core/src/main/java/com/graphhopper/routing/util/EncodingManager.java
index 32deb6d820..af11ee5b84 100644
--- a/core/src/main/java/com/graphhopper/routing/util/EncodingManager.java
+++ b/core/src/main/java/com/graphhopper/routing/util/EncodingManager.java
@@ -149,10 +149,10 @@ public int getBytesForFlags()
 
             AbstractFlagEncoder fe;
             if (entry.equals(CAR))
-                fe = new CarFlagEncoder(entryVal);
+                fe = new OsCarFlagEncoder(entryVal);
 
             else if (entry.equals(BIKE))
-                fe = new BikeFlagEncoder(entryVal);
+                fe = new OsBikeFlagEncoder(entryVal);
 
             else if (entry.equals(BIKE2))
                 fe = new Bike2WeightFlagEncoder(entryVal);
diff --git a/core/src/main/java/com/graphhopper/routing/util/OsAvoidanceDecorator.java b/core/src/main/java/com/graphhopper/routing/util/OsAvoidanceDecorator.java
index 791d62bdea..f0f9c9a4f7 100644
--- a/core/src/main/java/com/graphhopper/routing/util/OsAvoidanceDecorator.java
+++ b/core/src/main/java/com/graphhopper/routing/util/OsAvoidanceDecorator.java
@@ -7,7 +7,7 @@
 /**
  * Created by sadam on 4/15/15.
  */
-public class OsAvoidanceDecorator {
+public class OsAvoidanceDecorator implements EncoderDecorator {
     private EncodedValue wayTypeEncoder;
 
 
diff --git a/core/src/main/java/com/graphhopper/routing/util/OsBikeFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/OsBikeFlagEncoder.java
new file mode 100644
index 0000000000..11946aefba
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/routing/util/OsBikeFlagEncoder.java
@@ -0,0 +1,31 @@
+package com.graphhopper.routing.util;
+
+import java.util.ArrayList;
+
+public class OsBikeFlagEncoder extends BikeFlagEncoder {
+	
+		public OsBikeFlagEncoder() {
+	        super(4, 2, 0);
+	        setOsAvoidanceDecorator();
+	    }
+
+	    public OsBikeFlagEncoder( String propertiesStr )
+	    {
+	    	super(propertiesStr);
+	    	setOsAvoidanceDecorator();
+	    }
+
+	    public OsBikeFlagEncoder( int speedBits, double speedFactor, int maxTurnCosts )
+	    {
+	    	super(speedBits, speedFactor, maxTurnCosts);
+	    	 setOsAvoidanceDecorator();
+	    	
+	    }
+
+		private void setOsAvoidanceDecorator() {
+			if(null==encoderDecorators) {
+				encoderDecorators = new ArrayList<EncoderDecorator>(2);
+			}
+			encoderDecorators.add(new OsAvoidanceDecorator());
+		}
+}
diff --git a/core/src/main/java/com/graphhopper/routing/util/OsCarFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/OsCarFlagEncoder.java
new file mode 100644
index 0000000000..327c3de2ce
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/routing/util/OsCarFlagEncoder.java
@@ -0,0 +1,29 @@
+package com.graphhopper.routing.util;
+
+import java.util.ArrayList;
+
+public class OsCarFlagEncoder extends CarFlagEncoder {
+	public OsCarFlagEncoder() {
+		super(5, 5, 0);
+		setOsAvoidanceDecorator();
+	}
+
+	public OsCarFlagEncoder(String propertiesStr) {
+		super(propertiesStr);
+		setOsAvoidanceDecorator();
+	}
+
+	public OsCarFlagEncoder(int speedBits, double speedFactor, int maxTurnCosts) {
+		super(speedBits, speedFactor, maxTurnCosts);
+		setOsAvoidanceDecorator();
+
+	}
+
+	private void setOsAvoidanceDecorator() {
+		if (null == encoderDecorators) {
+			encoderDecorators = new ArrayList<EncoderDecorator>(2);
+		}
+		encoderDecorators.add(new OsAvoidanceDecorator());
+	}
+
+}
diff --git a/core/src/main/java/com/graphhopper/routing/util/OsFootFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/OsFootFlagEncoder.java
new file mode 100644
index 0000000000..f4ade0b8a7
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/routing/util/OsFootFlagEncoder.java
@@ -0,0 +1,31 @@
+package com.graphhopper.routing.util;
+
+import java.util.ArrayList;
+
+public class OsFootFlagEncoder extends FootFlagEncoder {
+	public OsFootFlagEncoder() {
+        super(4, 1);
+        setOsAvoidanceDecorator();
+    }
+
+    public OsFootFlagEncoder( String propertiesStr )
+    {
+    	super(propertiesStr);
+    	setOsAvoidanceDecorator();
+    }
+
+    public OsFootFlagEncoder( int speedBits, double speedFactor, int maxTurnCosts )
+    {
+    	super(speedBits, speedFactor);
+    	 setOsAvoidanceDecorator();
+    	
+    }
+
+	private void setOsAvoidanceDecorator() {
+		if(null==encoderDecorators) {
+			encoderDecorators = new ArrayList<EncoderDecorator>(2);
+		}
+		encoderDecorators.add(new OsAvoidanceDecorator());
+	}
+
+}
