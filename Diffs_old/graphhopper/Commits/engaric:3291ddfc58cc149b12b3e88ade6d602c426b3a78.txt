diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
index 3b33e17c3a..22fbf2a56a 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
@@ -1,10 +1,14 @@
 package uk.co.ordnancesurvey.routing;
 
+import java.io.IOException;
+import java.sql.Date;
 import java.text.ParseException;
+import java.util.Calendar;
 import java.util.List;
 import java.util.Map;
 
 import uk.co.ordnancesurvey.webtests.IntegrationTestProperties;
+import cucumber.api.Scenario;
 import cucumber.api.java.After;
 import cucumber.api.java.en.Given;
 import cucumber.api.java.en.Then;
@@ -52,7 +56,7 @@ public void I_should_be_able_to_verify_the_waypoints_on_the_route_map(
 			List<Map<String, String>> wayPointList) {
 		graphUiUtil.isWayPointonRouteMap(wayPointList);
 	}
-	
+
 	@Then("^I should be able to verify the waypoints not on the route map:")
 	public void I_should_be_able_to_verify_the_not_waypoints_on_the_route_map(
 			List<Map> wayPointList) {
@@ -60,7 +64,6 @@ public void I_should_be_able_to_verify_the_not_waypoints_on_the_route_map(
 		graphUiUtil.isWayPointNotonRouteMap(wayPointList);
 
 	}
-	
 
 	@Then("^The total route time should be not more than \"([^\"]*)\"$")
 	public void The_total_route_time_should_be_not_more_than(
@@ -86,7 +89,17 @@ public void I_should_be_able_to_verify_the_trackpoints_not_on_the_route_map(
 	}
 
 	@After({ "@Routing" })
-	public void closeBrowser() {
+	public void closeBrowser(Scenario sc) {
+
+		if (sc.isFailed()) {
+			Calendar cal = Calendar.getInstance();
+			try {
+				graphUiUtil.takescreen("Screenshot" + cal.getTimeInMillis());
+			} catch (IOException e) {
+				// TODO Auto-generated catch block
+				e.printStackTrace();
+			}
+		}
 		graphUiUtil.logout();
 		System.out.println("closed");
 
diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
index a2f7785187..9335cf074d 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
@@ -86,6 +86,15 @@ public void logout() {
 			driver.close();
 	}
 
+	/**
+	 	 * <p>
+	 * <p>
+	 * <p>
+	 * @param pointA
+	 * @param pointB
+	 * @param routeType 
+	 * <p> Route type can be Car, walk or Cycle.
+	 */
 	public void getRouteFromUI(String pointA, String pointB, String routeType) {
 
 		switch (routeType)
@@ -109,7 +118,7 @@ public void getRouteFromUI(String pointA, String pointB, String routeType) {
 		typeIntoField(FROM_ROUTE, pointA);
 		typeIntoField(TO_ROUTE, pointB);
 		clickElement(ROUTE_SEARCH);
-		waitFor(INSTRUCTIONS);
+		waitFor(INSTRUCTIONS,25);
 
 	}
 
diff --git a/acceptancetesting/src/test/cucumber/routing.feature b/acceptancetesting/src/test/cucumber/routing.feature
index 1dd125c180..72ed7b9f8c 100644
--- a/acceptancetesting/src/test/cucumber/routing.feature
+++ b/acceptancetesting/src/test/cucumber/routing.feature
@@ -8,7 +8,7 @@ Feature: Verify a route from A to B
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco          | waypointdesc                 | azimuth | direction | time  | distance |
-      | 1             | 51.472114,-0.361993 | Continue onto ELLINGTON ROAD | 274     | W         | 13535 | 131.626  |
+      | 1             | 51.472114,-0.361993 | Continue onto ELLINGTON ROAD | 275     | W         | 13535 | 131.626  |
 
     Examples: 
       | pointA                                 | pointB                                 | routetype |
@@ -155,6 +155,17 @@ Feature: Verify a route from A to B
       | pointA              | pointB              | routetype |
       | 50.720454,-3.530089 | 50.722657,-3.526321 | car       |
 
+  @Routing
+  Scenario Outline: Verify  One-Way(No Entry)Restriction   (SIVELL PLACE-Exeter)
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Then I should be able to verify the waypoints on the route map:
+      | wayPointIndex | waypointco          | waypointdesc               | azimuth | direction | time | distance |
+      | 2             | 50.720531,-3.504654 | Turn left onto SIVELL MEWS | 24      | NE        | 4602 | 44.753   |
+
+    Examples: 
+      | pointA              | pointB              | routetype |
+      | 50.720561,-3.504848 | 50.720608,-3.505677 | car       |
+
   @Routing
   Scenario Outline: Verify  under pass still finds route  from top road (Southampton- Charle WattsWay)
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
@@ -176,3 +187,58 @@ Feature: Verify a route from A to B
     Examples: 
       | pointA             | pointB             | routetype |
       | 50.91525,-1.318761 | 50.92045,-1.316021 | car       |
+
+  @Routing
+  Scenario Outline: Verify  No Turn   (WSPIP-76:Eastley- TWYFORD ROAD )
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Then I should be able to verify the waypoints on the route map:
+      | wayPointIndex | waypointco          | waypointdesc                       | azimuth | direction | time | distance |
+      | 3             | 50.971186,-1.350769 | turn left onto TWYFORD ROAD (A335) | 353     | N         | 5624 | 85.959   |
+
+    Examples: 
+      | pointA              | pointB              | routetype |
+      | 50.972281,-1.350942 | 50.972212,-1.351183 | car       |
+
+  @Routing
+  Scenario Outline: Verify  No Turn   (WSPIP-76:Eastley- Station Hill Road)
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Then I should be able to verify the waypoints on the route map:
+      | wayPointIndex | waypointco          | waypointdesc                              | azimuth | direction | time | distance |
+      | 2             | 50.969817,-1.350504 | Turn slight left onto STATION HILL (A335) | 180     | S         | 2931 | 44.808   |
+
+    Examples: 
+      | pointA              | pointB             | routetype |
+      | 50.970024,-1.350267 | 50.97008,-1.350521 | car       |
+
+  @Routing
+  Scenario Outline: Verify  No Turn   (Treaty Center-Hounslow- Fairfields Road)
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Then I should be able to verify the waypoints on the route map:
+      | wayPointIndex | waypointco          | waypointdesc                               | azimuth | direction | time | distance |
+      | 2             | 51.468925,-0.359049 | Turn slight left onto HANWORTH ROAD (A315) | 251     | W         | 3534 | 54.019   |
+
+    Examples: 
+      | pointA             | pointB              | routetype |
+      | 51.46882,-0.358687 | 51.469454,-0.357831 | car       |
+
+  @Routing @KnownIssues
+  Scenario Outline: Verify  No Turns with Exceptions(Vehicle Type:Bus)   (High Street-Hounslow)
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Then I should be able to verify the trackPoints not on the route map:
+      | trackPointco        |
+      | 51.470009,-0.357019 |
+
+    Examples: 
+      | pointA              | pointB              | routetype |
+      | 51.470198,-0.356036 | 51.470352,-0.357388 | car       |
+
+  @Routing
+  Scenario Outline: Verify  Mandatory Turn   (Alexandra Road-Hounslow- Fairfields Road)
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Then I should be able to verify the waypoints on the route map:
+      | wayPointIndex | waypointco          | waypointdesc                   | azimuth | direction | time  | distance |
+      | 2             | 51.470846,-0.363527 | Turn right onto LANSDOWNE ROAD | 264     | W         | 12772 | 124.177  |
+
+    Examples: 
+      | pointA             | pointB              | routetype |
+      | 51.47118,-0.363609 | 51.470651,-0.363495 | car       |
diff --git a/acceptancetesting/src/test/java/uk/co/ordnancesurvey/routing/CucumberRunner.java b/acceptancetesting/src/test/java/uk/co/ordnancesurvey/routing/CucumberRunner.java
index d6bb39b2ff..e55d45e6fe 100644
--- a/acceptancetesting/src/test/java/uk/co/ordnancesurvey/routing/CucumberRunner.java
+++ b/acceptancetesting/src/test/java/uk/co/ordnancesurvey/routing/CucumberRunner.java
@@ -11,7 +11,7 @@
 
 @RunWith(Cucumber.class)
 @Category(IntegrationTestProperties.class)
-@Cucumber.Options(format = { "html:target/cucumber-reports/html", "json:target/cucumber-reports/cucumber.json" }, glue="uk.co.ordnancesurvey.routing",features = "src/test/cucumber", tags = { "~@RegressionLiveDataTests","@Mapping"})
+@Cucumber.Options(format = { "html:target/cucumber-reports/html", "json:target/cucumber-reports/cucumber.json" }, glue="uk.co.ordnancesurvey.routing",features = "src/test/cucumber", tags = { "~@RegressionLiveDataTests","@Routing"})
 public class CucumberRunner {
 	
     
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/OSITNElement.java b/core/src/main/java/com/graphhopper/reader/osgb/OSITNElement.java
index 6c3db9b795..bba43c964c 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/OSITNElement.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/OSITNElement.java
@@ -112,7 +112,23 @@ protected void readTags(XMLStreamReader parser) throws XMLStreamException, Misma
                                                 break;
                                         }
                                         case "instruction": {
-                                                event = handleRouteInformation(parser);
+                                            // eg. Mandatory Turn, No Turn, One Way, No Entry 
+                                                event = handleEnvironmentalQualifier_instruction(parser);
+                                                break;
+                                        }
+                                        case "type": {
+                                            // eg. Buses, Coaches, Mopeds, HGV's 
+                                                event = handleVehicleQualifier_type(parser);
+                                                break;
+                                        }
+                                        case "load": {
+                                            // eg. Explosives, Dangerous Goods, Abnormal Loads, Wide Loads 
+                                                event = handleVehicleQualifier_load(parser);
+                                                break;
+                                        }
+                                        case "use": {
+                                            // eg. Taxi, School Bus, Patron, Access, Emergency Vehicle, Public Transport
+                                                event = handleVehicleQualifier_use(parser);
                                                 break;
                                         }
                                         case "descriptiveTerm":
@@ -185,9 +201,9 @@ private String resolveHighway(String elementText) {
                 case "Minor Road":
                 // Should we be handling these for Car routes?
                 case "Pedestrianised Street":
-                case "Private Road - Restricted Access":
+                //case "Private Road - Restricted Access":
                 case "Private Road - Publicly Accessible":
-                case "Alley":
+                //case "Alley":
 
                 case "Local Street":
                         return elementText;
@@ -208,34 +224,96 @@ private String resolveNature(String elementText) {
 
     /**
      * Process <code><osgb:instruction>One Way</osgb:instruction></code>
-     * instructions. It is either "One Way", "No Entry" or a turn restriction
-     * type
+     * instructions within an environmentalQualifier element. 
+     * 
+     * It is either "One Way", "No Entry" or a turn restriction type
      * 
      * @param parser
      * @return
      * @throws XMLStreamException
      */
-    private int handleRouteInformation(XMLStreamReader parser) throws XMLStreamException {
+    private int handleEnvironmentalQualifier_instruction(XMLStreamReader parser) throws XMLStreamException {
         String elementText = parser.getElementText();
         int event;
-        if ("One Way".equals(elementText)) {
+        switch (elementText) {
+        case "One Way" :
             setTag(TAG_KEY_TYPE, TAG_VALUE_TYPE_ONEWAY);
             setTag(TAG_KEY_ONEWAY_ORIENTATION, "-1");
-        } else if ("No Entry".equals(elementText)) {
+            break;
+        case "No Entry" :
             // We are processing a No Entry RoadRouteInformation element. Set the type to noentry
             setTag(TAG_KEY_TYPE, TAG_VALUE_TYPE_NOENTRY);
             // Default the orientation to -1. This could be changed when we process the directedLink element later
            setTag(TAG_KEY_NOENTRY_ORIENTATION, "-1");
             // We might need this?
             setTag(TAG_KEY_RESTRICTION, elementText);
-        } else {
+            break;
+        default :
             setTag(TAG_KEY_TYPE, TAG_VALUE_TYPE_RESTRICTION);
             setTag(TAG_KEY_RESTRICTION, elementText);
+            break;
         }
         event = parser.getEventType();
         return event;
     }
-
+    private int handleVehicleQualifier_type(XMLStreamReader parser) throws XMLStreamException {
+        String exceptForString = parser.getAttributeValue(null, "exceptFor");
+        Boolean exceptFor = null;
+        if (exceptForString!=null) {
+            exceptFor = Boolean.parseBoolean(exceptForString);
+        }
+        String elementText = parser.getElementText();
+        int event;
+        switch (elementText) {
+        case "Buses" :
+        case "Coaches" :
+        case "Mopeds" :
+        case "Motor Cycles" :
+        case "HGV's" :
+        case "LGV's" :
+        case "Towed Caravans" :
+        case "Motor Vehicles" :
+        case "Cycles" :
+        case "Tracked Vehicles" :
+            break;
+        }
+        event = parser.getEventType();
+        return event;
+    }
+    private int handleVehicleQualifier_load(XMLStreamReader parser) throws XMLStreamException {
+        String elementText = parser.getElementText();
+        int event;
+        switch (elementText) {
+        case "Explosives" :
+        case "Dangerous Goods" :
+        case "Abnormal Loads" :
+        case "Wide Loads" :
+            break;
+        }
+        event = parser.getEventType();
+        return event;
+    }
+    private int handleVehicleQualifier_use(XMLStreamReader parser) throws XMLStreamException {
+        String elementText = parser.getElementText();
+        int event;
+        switch (elementText) {
+        case "Taxi" :
+        case "School Bus" :
+        case "Patron" :
+        case "Access" :
+        case "Resident" :
+        case "Emergency Vehicle" :
+        case "Emergency Access" :
+        case "Public Transport" :
+        case "Authorised Vehicle" :
+        case "Local Bus" :
+        case "Escorted Traffic" :
+            break;
+        }
+        event = parser.getEventType();
+        return event;
+    }
+    
     /**
      * process parsing of directedLink data. If this is a "oneway" OR "noentry" we will change the -1 to true if the orientation on the link it "+"
      * @param parser
