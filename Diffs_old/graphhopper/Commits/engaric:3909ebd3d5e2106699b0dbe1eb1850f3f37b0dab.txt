diff --git a/core/src/main/java/com/graphhopper/routing/util/EmergencyVehicleFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/EmergencyVehicleFlagEncoder.java
index bd9f637505..5f7279b9af 100644
--- a/core/src/main/java/com/graphhopper/routing/util/EmergencyVehicleFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/EmergencyVehicleFlagEncoder.java
@@ -1,16 +1,12 @@
 package com.graphhopper.routing.util;
 
 import com.graphhopper.reader.Way;
-import com.graphhopper.routing.EscapePrivateWeighting;
 
-public class EmergencyVehicleFlagEncoder extends CarFlagEncoder
+public class EmergencyVehicleFlagEncoder extends OsCarFlagEncoder
 {
-	private EncodedValue startStopEncoder;
-
 	public EmergencyVehicleFlagEncoder( String entryVal )
 	{
 		super(entryVal);
-		restrictedValues.clear();
 	}
 
 	@Override
@@ -19,59 +15,8 @@ public String toString()
 		return "emv";
 	}
 
-	@Override
-	public long acceptWay( Way way )
-	{
-		if(way.hasTag("motorcar", "no")) 
-			return 0; 
-	    return super.acceptWay(way);
-	}
-	
-	@Override
-	public long getLong( long flags, int key )
-	{
-	    if(key==EscapePrivateWeighting.KEY) 
-	    	return startStopEncoder.getValue(flags);
-		return super.getLong(flags, key);
-	}
-	
-	@Override
-	public long handleWayTags( Way way, long allowed, long relationFlags )
-	{
-	    long superHandled =  super.handleWayTags(way, allowed, relationFlags);
-	    return superHandled |= startStopEncoder.setValue(superHandled, noThroughWayAccess(way));
-	}
-
-	private int noThroughWayAccess( Way way )
+	protected int noThroughWayAccess( Way way )
     {
 	    return way.hasTag("access", "no")||way.hasTag("service", "alley")?1:0;
     }
-	
-	/**
-     * Define the place of the speedBits in the edge flags for car.
-     */
-    @Override
-    public int defineWayBits( int index, int shift )
-    {
-        // first two bits are reserved for route handling in superclass
-        shift = super.defineWayBits(index, shift);
-        speedEncoder = new EncodedDoubleValue("Speed", shift, speedBits, speedFactor, defaultSpeedMap.get("secondary"), 
-                                              maxPossibleSpeed);
-        shift += speedEncoder.getBits();
-        
-        startStopEncoder = new EncodedValue("StartStop", shift, 1, 1, 0, 1, true);
-        shift += startStopEncoder.getBits();
-        
-        return shift;
-    }
-    
-    @Override
-    public boolean supports( Class<?> feature )
-    {
-        if (super.supports(feature))
-            return true;
-
-        return EscapePrivateWeighting.class.isAssignableFrom(feature);
-    }
-	
 }
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/AbstractOsItnReaderTest.java b/core/src/test/java/com/graphhopper/reader/osgb/AbstractOsItnReaderTest.java
index 6aeed8c4e4..920a09938e 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/AbstractOsItnReaderTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/AbstractOsItnReaderTest.java
@@ -15,6 +15,7 @@
 import com.graphhopper.GHResponse;
 import com.graphhopper.GraphHopper;
 import com.graphhopper.reader.osgb.itn.OsItnReader;
+import com.graphhopper.routing.EscapePrivateWeighting;
 import com.graphhopper.routing.util.AbstractFlagEncoder;
 import com.graphhopper.routing.util.BikeFlagEncoder;
 import com.graphhopper.routing.util.BusFlagEncoder;
@@ -22,13 +23,16 @@
 import com.graphhopper.routing.util.DefaultEdgeFilter;
 import com.graphhopper.routing.util.EdgeFilter;
 import com.graphhopper.routing.util.EncodingManager;
+import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.routing.util.FootFlagEncoder;
+import com.graphhopper.storage.Graph;
 import com.graphhopper.storage.GraphExtension;
 import com.graphhopper.storage.GraphHopperStorage;
 import com.graphhopper.storage.RAMDirectory;
 import com.graphhopper.storage.TurnCostExtension;
 import com.graphhopper.util.EdgeExplorer;
 import com.graphhopper.util.EdgeIterator;
+import com.graphhopper.util.EdgeIteratorState;
 import com.graphhopper.util.Instruction;
 import com.graphhopper.util.InstructionList;
 import com.graphhopper.util.Translation;
@@ -217,4 +221,24 @@ protected void outputInstructionList(InstructionList instructionList) {
 
     }
 
+	protected void checkAccessNodeNetwork( Graph graph, final FlagEncoder encoder, final boolean startEndOnly )
+    {
+    	EdgeFilter accessFilter = new EdgeFilter()
+    	{
+    		
+    		@Override
+    		public boolean accept( EdgeIteratorState edgeState )
+    		{
+    			return (startEndOnly?1:0)==encoder.getLong(edgeState.getFlags(), EscapePrivateWeighting.KEY);
+    		}
+    	};
+    	EdgeExplorer explorer = graph.createEdgeExplorer(accessFilter);
+        printNodes(explorer, 9);
+        assertEquals(4, count(explorer.setBaseNode(0)));
+        assertEquals(1, count(explorer.setBaseNode(1)));
+        assertEquals(1, count(explorer.setBaseNode(2)));
+        assertEquals(1, count(explorer.setBaseNode(3)));
+        assertEquals(1, count(explorer.setBaseNode(4)));
+    }
+
 }
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/EmergencyVehicleFlagEncoderTest.java b/core/src/test/java/com/graphhopper/reader/osgb/EmergencyVehicleFlagEncoderTest.java
index 335ab298b5..b84abac7f9 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/EmergencyVehicleFlagEncoderTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/EmergencyVehicleFlagEncoderTest.java
@@ -44,5 +44,21 @@ public void testReadSimplePrivateCrossRoads() throws IOException {
         readGraphFile(graph, file);
         assertEquals(5, graph.getNodes());
         checkSimpleNodeNetwork(graph);
+        checkAccessNodeNetwork(graph, emvEncoder, false);
     }
+    
+    @Test
+	public void testReadSimplePrivateRestrictedCrossRoads() throws IOException
+	{
+		final boolean turnRestrictionsImport = false;
+		final boolean is3D = false;
+		final GraphHopperStorage graph = configureStorage(turnRestrictionsImport, is3D);
+
+		final File file = new File(
+		        "./src/test/resources/com/graphhopper/reader/os-itn-simple-private-restricted-crossroad.xml");
+		readGraphFile(graph, file);
+		assertEquals(5, graph.getNodes());
+		checkSimpleNodeNetwork(graph);
+		checkAccessNodeNetwork(graph, emvEncoder, true);
+	}
 }
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/OSCarFlagEncoderTest.java b/core/src/test/java/com/graphhopper/reader/osgb/OSCarFlagEncoderTest.java
new file mode 100644
index 0000000000..9d80203fa5
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/OSCarFlagEncoderTest.java
@@ -0,0 +1,71 @@
+package com.graphhopper.reader.osgb;
+
+import static org.junit.Assert.assertEquals;
+
+import java.io.File;
+import java.io.IOException;
+
+import org.junit.Before;
+import org.junit.Test;
+
+import com.graphhopper.routing.util.DefaultEdgeFilter;
+import com.graphhopper.routing.util.EncodingManager;
+import com.graphhopper.routing.util.OsCarFlagEncoder;
+import com.graphhopper.storage.GraphHopperStorage;
+
+public class OSCarFlagEncoderTest extends AbstractOsItnReaderTest
+{
+
+	private OsCarFlagEncoder osCarEncoder;
+
+	@Before
+	public void initEncoding()
+	{
+		if (turnCosts)
+		{
+			osCarEncoder = new OsCarFlagEncoder("speedBits=5|speedfactor=5|turncosts=3");
+		} else
+		{
+			osCarEncoder = new OsCarFlagEncoder("speedBits=5|speedfactor=5|turncosts=0");
+		}
+
+		carOutEdges = new DefaultEdgeFilter(osCarEncoder, false, true);
+		carInEdges = new DefaultEdgeFilter(osCarEncoder, true, false);
+		encodingManager = createEncodingManager();
+	}
+
+	protected EncodingManager createEncodingManager()
+	{
+		return new EncodingManager(osCarEncoder);
+	}
+
+	@Test
+	public void testReadSimplePrivateCrossRoads() throws IOException
+	{
+		final boolean turnRestrictionsImport = false;
+		final boolean is3D = false;
+		final GraphHopperStorage graph = configureStorage(turnRestrictionsImport, is3D);
+
+		final File file = new File(
+		        "./src/test/resources/com/graphhopper/reader/os-itn-simple-private-crossroad.xml");
+		readGraphFile(graph, file);
+		assertEquals(5, graph.getNodes());
+		checkSimpleNodeNetwork(graph);
+		checkAccessNodeNetwork(graph, osCarEncoder, true);
+	}
+
+	@Test
+	public void testReadSimplePrivateRestrictedCrossRoads() throws IOException
+	{
+		final boolean turnRestrictionsImport = false;
+		final boolean is3D = false;
+		final GraphHopperStorage graph = configureStorage(turnRestrictionsImport, is3D);
+
+		final File file = new File(
+		        "./src/test/resources/com/graphhopper/reader/os-itn-simple-private-restricted-crossroad.xml");
+		readGraphFile(graph, file);
+		assertEquals(5, graph.getNodes());
+		checkSimpleNodeNetwork(graph);
+		checkAccessNodeNetwork(graph, osCarEncoder, true);
+	}
+}
