diff --git a/core/src/main/java/com/graphhopper/routing/util/PrepareRoutingSubnetworks.java b/core/src/main/java/com/graphhopper/routing/util/PrepareRoutingSubnetworks.java
index 84f98dbb54..dc04c94963 100644
--- a/core/src/main/java/com/graphhopper/routing/util/PrepareRoutingSubnetworks.java
+++ b/core/src/main/java/com/graphhopper/routing/util/PrepareRoutingSubnetworks.java
@@ -74,7 +74,7 @@ public void doWork()
 
         int unvisitedDeadEnds = 0;
         if (this.encodingManager.getVehicleCount() == 1)
-            unvisitedDeadEnds = RemoveDeadEndUnvisitedNetworks(g, this.encodingManager.getSingle(), minNetworkSize, logger);
+            unvisitedDeadEnds = removeDeadEndUnvisitedNetworks(g, this.encodingManager.getSingle(), minNetworkSize, logger);
 
         logger.info("optimize to remove subnetworks (" + map.size() + "), zero-degree-nodes (" + del + "), "
                 + "unvisited-dead-end-nodes(" + unvisitedDeadEnds + "), "
@@ -238,19 +238,19 @@ int removeZeroDegreeNodes()
      * <p/>
      * @return removed nodes;
      */
-    public static int RemoveDeadEndUnvisitedNetworks(final GraphStorage g, final FlagEncoder encoder, final int minNetworkSize, final Logger logger)
+    public static int removeDeadEndUnvisitedNetworks(final GraphStorage g, final FlagEncoder encoder, final int minNetworkSize, final Logger logger)
     {
         int removed = 0;
 
         StopWatch sw = new StopWatch().start();
-        logger.info("RemoveDeadEndUnvisitedNetworks: searching forward");
-        removed += RemoveDeadEndUnvisitedNetworks(g, g.createEdgeExplorer(new DefaultEdgeFilter(encoder, true, false)), minNetworkSize, logger);
-        logger.info("RemoveDeadEndUnvisitedNetworks: forward search completed in " + sw.stop().getSeconds() + "s");
+        logger.info("removeDeadEndUnvisitedNetworks: searching forward");
+        removed += removeDeadEndUnvisitedNetworks(g, g.createEdgeExplorer(new DefaultEdgeFilter(encoder, true, false)), minNetworkSize, logger);
+        logger.info("removeDeadEndUnvisitedNetworks: forward search completed in " + sw.stop().getSeconds() + "s");
         
         sw.start();
-        logger.info("RemoveDeadEndUnvisitedNetworks: searching backward");
-        removed += RemoveDeadEndUnvisitedNetworks(g, g.createEdgeExplorer(new DefaultEdgeFilter(encoder, false, true)), minNetworkSize, logger);
-        logger.info("RemoveDeadEndUnvisitedNetworks: backward search completed in " + sw.stop().getSeconds() + "s");
+        logger.info("removeDeadEndUnvisitedNetworks: searching backward");
+        removed += removeDeadEndUnvisitedNetworks(g, g.createEdgeExplorer(new DefaultEdgeFilter(encoder, false, true)), minNetworkSize, logger);
+        logger.info("removeDeadEndUnvisitedNetworks: backward search completed in " + sw.stop().getSeconds() + "s");
 
         return removed;
     }
@@ -270,7 +270,7 @@ public int compare(K k1, K k2)
         return sortedByValues;
     }
     
-    private static int RemoveDeadEndUnvisitedNetworks(final GraphStorage g, final EdgeExplorer explorer, final int minNetworkSize, final Logger logger)
+    public static int removeDeadEndUnvisitedNetworks(final GraphStorage g, final EdgeExplorer explorer, final int minNetworkSize, final Logger logger)
     {
         final AtomicInteger removed = new AtomicInteger(0);
         
diff --git a/core/src/test/java/com/graphhopper/routing/util/PrepareRoutingSubnetworksTest.java b/core/src/test/java/com/graphhopper/routing/util/PrepareRoutingSubnetworksTest.java
index f172436b74..8e4fbb93af 100644
--- a/core/src/test/java/com/graphhopper/routing/util/PrepareRoutingSubnetworksTest.java
+++ b/core/src/test/java/com/graphhopper/routing/util/PrepareRoutingSubnetworksTest.java
@@ -17,16 +17,17 @@
  */
 package com.graphhopper.routing.util;
 
-import com.graphhopper.reader.OSMWay;
-import com.graphhopper.storage.Graph;
 import com.graphhopper.storage.GraphBuilder;
 import com.graphhopper.storage.GraphStorage;
 import com.graphhopper.util.EdgeExplorer;
 import com.graphhopper.util.GHUtility;
 import java.util.Arrays;
 import java.util.Map;
+import static javax.swing.text.html.HTML.Tag.I;
 import org.junit.*;
 import static org.junit.Assert.*;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 /**
  *
@@ -148,4 +149,51 @@ public void testRemoveSubnetworkIfOnlyOneVehicle()
         g.optimize();
         assertEquals(7, g.getNodes());
     }
+
+    GraphStorage createDeadEndUnvisitedNetworkGraph( EncodingManager em )
+    {
+        GraphStorage g = createGraph(em);
+        // 0 <-> 1 <-> 2 <-> 3 <-> 4 <- 5 <-> 6
+        g.edge(0, 1, 1, true);
+        g.edge(1, 2, 1, true);
+        g.edge(2, 3, 1, true);
+        g.edge(3, 4, 1, true);
+        g.edge(5, 4, 1, false);
+        g.edge(5, 6, 1, true);
+
+        // 7 -> 8 <-> 9 <-> 10
+        g.edge(7, 8, 1, false);
+        g.edge(8, 9, 1, true);
+        g.edge(9, 10, 1, true);
+        return g;
+    }
+
+    @Test
+    public void testRemoveDeadEndUnvisitedNetworksOneWay()
+    {
+        GraphStorage g = createDeadEndUnvisitedNetworkGraph(em);
+        Logger logger = LoggerFactory.getLogger(getClass());
+        FlagEncoder encoder = new EncodingManager("CAR").getSingle();
+
+        EdgeExplorer explorer = g.createEdgeExplorer(new DefaultEdgeFilter(encoder, false, true));
+        int removed = PrepareRoutingSubnetworks.removeDeadEndUnvisitedNetworks(g, explorer, 3, logger);
+        assertEquals(2, removed);
+
+        g.optimize();
+        assertEquals(9, g.getNodes());
+    }
+
+    @Test
+    public void testRemoveDeadEndUnvisitedNetworks()
+    {
+        GraphStorage g = createDeadEndUnvisitedNetworkGraph(em);
+        Logger logger = LoggerFactory.getLogger(getClass());
+        FlagEncoder encoder = new EncodingManager("CAR").getSingle();
+
+        int removed = PrepareRoutingSubnetworks.removeDeadEndUnvisitedNetworks(g, encoder, 3, logger);
+        assertEquals(3, removed);
+
+        g.optimize();
+        assertEquals(8, g.getNodes());
+    }
 }
