diff --git a/web/src/main/java/com/graphhopper/http/GHServletModule.java b/web/src/main/java/com/graphhopper/http/GHServletModule.java
index ec01d532ec..ca8729621a 100644
--- a/web/src/main/java/com/graphhopper/http/GHServletModule.java
+++ b/web/src/main/java/com/graphhopper/http/GHServletModule.java
@@ -17,59 +17,61 @@
  */
 package com.graphhopper.http;
 
-import com.google.inject.servlet.ServletModule;
-import com.graphhopper.util.CmdArgs;
 import java.util.HashMap;
 import java.util.Map;
+
 import javax.inject.Singleton;
 
+import com.google.inject.servlet.ServletModule;
+import com.graphhopper.util.CmdArgs;
+
 /**
  * @author Peter Karich
  */
 public class GHServletModule extends ServletModule
 {
-    protected Map<String, String> params = new HashMap<String, String>();
-    protected final CmdArgs args;
+	protected Map<String, String> params = new HashMap<String, String>();
+	protected final CmdArgs args;
+
+	public GHServletModule( CmdArgs args )
+	{
+		this.args = args;
+		params.put("mimeTypes", "text/html," + "text/plain," + "text/xml,"
+				+ "application/xhtml+xml," + "text/css," + "application/json,"
+				+ "application/javascript," + "image/svg+xml");
+	}
+
+	@Override
+	protected void configureServlets()
+	{
+		filter("*").through(GHGZIPHook.class, params);
+		bind(GHGZIPHook.class).in(Singleton.class);
 
-    public GHServletModule( CmdArgs args )
-    {
-        this.args = args;
-        params.put("mimeTypes", "text/html,"
-                + "text/plain,"
-                + "text/xml,"
-                + "application/xhtml+xml,"
-                + "text/css,"
-                + "application/json,"
-                + "application/javascript,"
-                + "image/svg+xml");
-    }
+		filter("*").through(CORSFilter.class, params);
+		bind(CORSFilter.class).in(Singleton.class);
 
-    @Override
-    protected void configureServlets()
-    {
-        filter("*").through(GHGZIPHook.class, params);
-        bind(GHGZIPHook.class).in(Singleton.class);
+		filter("*").through(IPFilter.class);
+		bind(IPFilter.class).toInstance(
+				new IPFilter(args.get("jetty.whiteips", ""), args.get("jetty.blackips", "")));
 
-        filter("*").through(CORSFilter.class, params);
-        bind(CORSFilter.class).in(Singleton.class);
+		serve("/i18n").with(I18NServlet.class);
+		bind(I18NServlet.class).in(Singleton.class);
 
-        filter("*").through(IPFilter.class);
-        bind(IPFilter.class).toInstance(new IPFilter(args.get("jetty.whiteips", ""), args.get("jetty.blackips", "")));
+		serve("/info").with(InfoServlet.class);
+		bind(InfoServlet.class).in(Singleton.class);
 
-        serve("/i18n*").with(I18NServlet.class);
-        bind(I18NServlet.class).in(Singleton.class);
+		serve("/route").with(GraphHopperServlet.class);
+		bind(GraphHopperServlet.class).in(Singleton.class);
 
-        serve("/info*").with(InfoServlet.class);
-        bind(InfoServlet.class).in(Singleton.class);
+		if (args.getBool("update.enable", true))
+		{
+			serve("/update*").with(UpdateServlet.class);
+			bind(UpdateServlet.class).in(Singleton.class);
+		}
+		serve("/nearest").with(NearestServlet.class);
+		bind(NearestServlet.class).in(Singleton.class);
 
-        serve("/route*").with(GraphHopperServlet.class);
-        bind(GraphHopperServlet.class).in(Singleton.class);
-        
-        if(args.getBool("update.enable", true)) {
-        	serve("/update*").with(UpdateServlet.class);
-        	bind(UpdateServlet.class).in(Singleton.class);
-        }
-        serve("/nearest*").with(NearestServlet.class);
-        bind(NearestServlet.class).in(Singleton.class);
-    }
+		serve("/*").with(InvalidRequestServlet.class);
+		bind(InvalidRequestServlet.class).in(Singleton.class);
+	}
 }
diff --git a/web/src/main/java/com/graphhopper/http/InvalidRequestServlet.java b/web/src/main/java/com/graphhopper/http/InvalidRequestServlet.java
index 8de227530b..384de89945 100644
--- a/web/src/main/java/com/graphhopper/http/InvalidRequestServlet.java
+++ b/web/src/main/java/com/graphhopper/http/InvalidRequestServlet.java
@@ -15,20 +15,33 @@
  */
 package com.graphhopper.http;
 
-import org.json.JSONObject;
+import java.io.IOException;
+import java.util.HashMap;
+import java.util.Map;
 
 import javax.servlet.ServletException;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
-import java.io.IOException;
+
+import org.json.JSONObject;
 
 public class InvalidRequestServlet extends GHBaseServlet
 {
-    @Override
-    protected void service( HttpServletRequest req, HttpServletResponse res ) throws ServletException, IOException
-    {
-        JSONObject json = new JSONObject();
-        json.put("message", "Not found");
-        writeJsonError(res, HttpServletResponse.SC_NOT_FOUND, json);
-    }
-}
+	@Override
+	protected void service( HttpServletRequest req, HttpServletResponse res )
+			throws ServletException, IOException
+	{
+		String resource = req.getRequestURI();
+		if (resource.startsWith("/") && resource.length() > 1)
+		{
+			resource = resource.substring(1, resource.length());
+		}
+		JSONObject json = new JSONObject();
+		Map<String, Object> map = new HashMap<>();
+		map.put("statuscode", "" + HttpServletResponse.SC_NOT_FOUND);
+		map.put("message", "Resource " + resource
+				+ " does not exist. Valid resources are route, nearest.");
+		json.put("error", map);
+		writeJsonError(res, HttpServletResponse.SC_NOT_FOUND, json);
+	}
+}
\ No newline at end of file
