diff --git a/api/src/main/java/com/graphhopper/GHRequest.java b/api/src/main/java/com/graphhopper/GHRequest.java
index c3329d5dd6..d618c8cafd 100644
--- a/api/src/main/java/com/graphhopper/GHRequest.java
+++ b/api/src/main/java/com/graphhopper/GHRequest.java
@@ -20,6 +20,7 @@
 import com.graphhopper.routing.util.HintsMap;
 import com.graphhopper.util.Helper;
 import com.graphhopper.util.shapes.GHPoint;
+import com.graphhopper.util.shapes.Polygon;
 
 import java.util.ArrayList;
 import java.util.Collections;
@@ -39,7 +40,7 @@
     // Headings are north based azimuth (clockwise) in (0, 360) or NaN for equal preference
     private final List<Double> favoredHeadings;
     // List of points that build a polygon the route shall orient at.
-    private List<GHPoint> polygon;
+    private Polygon polygon;
     // Whether the route shall go through the above polygon or besides (e.g. through germany, or by a lake)
     private boolean polygonThrough = true;
     private List<String> pointHints = new ArrayList<>();
@@ -303,11 +304,11 @@ public String toString() {
         return res;
     }
 
-    public List<GHPoint> getPolygon() {
+    public Polygon getPolygon() {
         return polygon;
     }
 
-    public GHRequest setPolygon(List<GHPoint> polygon) {
+    public GHRequest setPolygon(Polygon polygon) {
         this.polygon = polygon;
         return this;
     }
diff --git a/api/src/main/java/com/graphhopper/util/shapes/Polygon.java b/api/src/main/java/com/graphhopper/util/shapes/Polygon.java
index 5266b28bbc..b0f98e2750 100644
--- a/api/src/main/java/com/graphhopper/util/shapes/Polygon.java
+++ b/api/src/main/java/com/graphhopper/util/shapes/Polygon.java
@@ -17,6 +17,7 @@
  */
 package com.graphhopper.util.shapes;
 
+import java.util.ArrayList;
 import java.util.List;
 
 /**
@@ -265,4 +266,20 @@ public static Polygon parsePoints(String pointsStr, double growFactor) {
 
         return new Polygon(lats, lons, growFactor);
     }
+
+    public List<GHPoint> getCoordinatesAsGHPoints() {
+        int numPoints = this.lat.length;
+        List<GHPoint> points = new ArrayList<>(numPoints);
+
+        addAllLatLonToPoints(numPoints, points);
+
+        return points;
+    }
+
+    private void addAllLatLonToPoints(int numPoints, List<GHPoint> points) {
+        for (int i = 0; i < numPoints; i++) {
+            final GHPoint point = new GHPoint(lat[i], lon[i]);
+            points.add(point);
+        }
+    }
 }
diff --git a/core/src/main/java/com/graphhopper/GraphHopper.java b/core/src/main/java/com/graphhopper/GraphHopper.java
index 132b28715e..d72fbcad68 100644
--- a/core/src/main/java/com/graphhopper/GraphHopper.java
+++ b/core/src/main/java/com/graphhopper/GraphHopper.java
@@ -52,6 +52,7 @@
 import com.graphhopper.util.exceptions.PointOutOfBoundsException;
 import com.graphhopper.util.shapes.BBox;
 import com.graphhopper.util.shapes.GHPoint;
+import com.graphhopper.util.shapes.Polygon;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -983,11 +984,13 @@ public GHResponse route(GHRequest request) {
             algoStr = isCHUsageGranted(disableCH) ? DIJKSTRA_BI : ASTAR_BI;
 
         List<GHPoint> points = request.getPoints();
-        List<GHPoint> polygon = request.getPolygon();
+        Polygon polygon = request.getPolygon();
         // TODO Maybe we should think about a isRequestValid method that checks all that stuff that we could do to fail fast
         // For example see #734
         checkIfPointsAreInBounds(points);
-        checkIfPointsAreInBounds(polygon);
+        if (polygon != null) {
+            checkIfPointsAreInBounds(polygon.getCoordinatesAsGHPoints());
+        }
 
         RoutingTemplate routingTemplate = buildRoutingTemplate(request, ghRsp, algoStr);
 
@@ -1139,10 +1142,6 @@ protected ChangeGraphHelper createChangeGraphHelper(Graph graph, LocationIndex l
     }
 
     private void checkIfPointsAreInBounds(List<GHPoint> points) {
-        if (points == null) {
-            return;
-        }
-
         BBox bounds = getGraphHopperStorage().getBounds();
         for (int i = 0; i < points.size(); i++) {
             GHPoint point = points.get(i);
diff --git a/web-bundle/src/main/java/com/graphhopper/resources/RouteResource.java b/web-bundle/src/main/java/com/graphhopper/resources/RouteResource.java
index b61d2a422d..dddb42402a 100644
--- a/web-bundle/src/main/java/com/graphhopper/resources/RouteResource.java
+++ b/web-bundle/src/main/java/com/graphhopper/resources/RouteResource.java
@@ -28,6 +28,7 @@
 import com.graphhopper.util.StopWatch;
 import com.graphhopper.util.gpx.GpxFromInstructions;
 import com.graphhopper.util.shapes.GHPoint;
+import com.graphhopper.util.shapes.Polygon;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -74,7 +75,7 @@ public Response doGet(
             @Context ContainerRequestContext rc,
             @QueryParam(WAY_POINT_MAX_DISTANCE) @DefaultValue("1") double minPathPrecision,
             @QueryParam("point") List<GHPoint> requestPoints,
-            @QueryParam("polygon") List<GHPoint> polygon,
+            @QueryParam("polygon") List<GHPoint> polygonPoints,
             @QueryParam("type") @DefaultValue("json") String type,
             @QueryParam(INSTRUCTIONS) @DefaultValue("true") boolean instructions,
             @QueryParam(CALC_POINTS) @DefaultValue("true") boolean calcPoints,
@@ -101,8 +102,9 @@ public Response doGet(
 
         getRequestErrorHandling(requestPoints, enableElevation, pointHints, favoredHeadings);
 
-        GHRequest request = buildRequest(requestPoints, favoredHeadings);
+        Polygon polygon = Polygon.createPolygonFromGHPoints(polygonPoints);
 
+        GHRequest request = buildRequest(requestPoints, favoredHeadings);
         initHints(request.getHints(), uriInfo.getQueryParameters());
         setRequestParams(minPathPrecision, polygon, instructions, calcPoints, vehicleStr, weighting, algoStr, localeStr, pointHints, snapPreventions, pathDetails, request);
 
@@ -172,7 +174,7 @@ private String buildInfoString(@Context HttpServletRequest httpReq) {
         return httpReq.getRemoteAddr() + " " + httpReq.getLocale() + " " + httpReq.getHeader("User-Agent");
     }
 
-    private void setRequestParams(@DefaultValue("1") @QueryParam(WAY_POINT_MAX_DISTANCE) double minPathPrecision, @QueryParam("polygon") List<GHPoint> polygon,
+    private void setRequestParams(@DefaultValue("1") @QueryParam(WAY_POINT_MAX_DISTANCE) double minPathPrecision, @QueryParam("polygon") Polygon polygon,
                                   @DefaultValue("true") @QueryParam(INSTRUCTIONS) boolean instructions, @DefaultValue("true") @QueryParam(CALC_POINTS) boolean calcPoints,
                                   @DefaultValue("car") @QueryParam("vehicle") String vehicleStr, @DefaultValue("fastest") @QueryParam("weighting") String weighting,
                                   @DefaultValue("") @QueryParam("algorithm") String algoStr, @DefaultValue("en") @QueryParam("locale") String localeStr,
