diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnElement.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnElement.java
index 53a0e14ed4..068c6def98 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnElement.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnElement.java
@@ -224,6 +224,9 @@ private String getOsmMappedTypeName(String roadType) {
         case "Ferry Crossing":
             typeName = "ferry";
             break;
+        case "No Physical Manifestation":
+        	typeName = "nohighway";
+        	break;
         default:
             break;
         }
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/BridleWay.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/BridleWay.java
index fa5cc0ee66..5a0f377a9b 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/BridleWay.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/BridleWay.java
@@ -16,7 +16,6 @@
     public void applyAttributes(RoutingElement way)
     {
         way.setTag("designation", "public_bridleway");
-        way.setTag("highway", "bridleway");
 
         way.setTag("foot", "yes");
         way.setTag("horse", "yes");
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/Footpath.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/Footpath.java
index 8e122e2249..eca5cefc04 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/Footpath.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/Footpath.java
@@ -16,7 +16,6 @@
     public void applyAttributes(RoutingElement way)
     {
         way.setTag("designation", "public_footpath");
-        way.setTag("highway", "footway");
         way.setTag("foot", "yes");
     }
 
diff --git a/core/src/main/java/com/graphhopper/routing/util/BanPrivateWeighting.java b/core/src/main/java/com/graphhopper/routing/util/BanPrivateWeighting.java
new file mode 100644
index 0000000000..0f86af2c4e
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/routing/util/BanPrivateWeighting.java
@@ -0,0 +1,32 @@
+package com.graphhopper.routing.util;
+
+import com.graphhopper.util.EdgeIteratorState;
+
+public class BanPrivateWeighting implements Weighting
+{
+
+	private FlagEncoder encoder;
+	private Weighting innerWeighting;
+
+	public BanPrivateWeighting( FlagEncoder encoder, Weighting weighting )
+	{
+		this.encoder = encoder;
+		this.innerWeighting = weighting;
+	}
+
+	@Override
+	public double getMinWeight( double distance )
+	{
+		return innerWeighting.getMinWeight(distance);
+	}
+
+	@Override
+	public double calcWeight( EdgeIteratorState edgeState, boolean reverse, int prevOrNextEdgeId )
+	{
+		if(encoder.getLong(edgeState.getFlags(), EscapePrivateWeighting.KEY)>0) {
+			return Double.POSITIVE_INFINITY;
+		}
+		return innerWeighting.calcWeight(edgeState, reverse, prevOrNextEdgeId);
+	}
+
+}
diff --git a/core/src/main/java/com/graphhopper/routing/util/BikeCommonFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/BikeCommonFlagEncoder.java
index 7085eb4317..9b40084948 100644
--- a/core/src/main/java/com/graphhopper/routing/util/BikeCommonFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/BikeCommonFlagEncoder.java
@@ -176,6 +176,7 @@ protected BikeCommonFlagEncoder( int speedBits, double speedFactor, int maxTurnC
         setHighwaySpeed("secondary_link", 18);
         setHighwaySpeed("tertiary", 18);
         setHighwaySpeed("tertiary_link", 18);
+        setHighwaySpeed("nohighway",6);
 
         // special case see tests and #191
         setHighwaySpeed("motorway", 18);
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/BridleWayTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/BridleWayTest.java
index 71d2089282..2684322f44 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/BridleWayTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/BridleWayTest.java
@@ -32,7 +32,6 @@ public void init() {
     public void testVisitWayAttribute() {
         visitor.visitWayAttribute("bridleway", way);
         verify(way).setTag("designation", "public_bridleway");
-        verify(way).setTag("highway", "bridleway");
         verify(way).setTag("foot", "yes");
         verify(way).setTag("horse", "yes");
         verify(way).setTag("bicycle", "yes");
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/FootpathTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/FootpathTest.java
index 56cf2206b2..249a368090 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/FootpathTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/rightOfWay/FootpathTest.java
@@ -32,7 +32,6 @@ public void init() {
     public void testVisitWayAttribute() {
         visitor.visitWayAttribute("footpath", way);
         verify(way).setTag("designation", "public_footpath");
-        verify(way).setTag("highway", "footway");
         verify(way).setTag("foot", "yes");
         verifyNoMoreInteractions(way);
     }
diff --git a/core/src/test/java/com/graphhopper/routing/util/BanPrivateWeightingTest.java b/core/src/test/java/com/graphhopper/routing/util/BanPrivateWeightingTest.java
new file mode 100644
index 0000000000..099b6111eb
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/routing/util/BanPrivateWeightingTest.java
@@ -0,0 +1,60 @@
+package com.graphhopper.routing.util;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.anyBoolean;
+import static org.mockito.Matchers.anyInt;
+import static org.mockito.Matchers.anyLong;
+import static org.mockito.Matchers.eq;
+import static org.mockito.Mockito.when;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.util.EdgeIteratorState;
+
+public class BanPrivateWeightingTest {
+	@Mock
+	FlagEncoder encoder;
+	
+	@Mock
+	Weighting innerWeighting;
+	
+	@Mock
+	EdgeIteratorState edge;
+	
+	@Before
+	public void configureMocks() {
+		MockitoAnnotations.initMocks(this);
+		configureInner();
+	}
+
+	@Test
+	public void testAllowNonPrivate() {
+		when(encoder.getLong(anyLong(), eq(EscapePrivateWeighting.KEY))).thenReturn(0L);
+		BanPrivateWeighting weighting = new BanPrivateWeighting(encoder, innerWeighting);
+		int prevOrNextEdgeId=1;
+		boolean reverse = false;
+		assertEquals("Traversable Edges should have innerweightings weight", 10D, (weighting.calcWeight(edge, reverse , prevOrNextEdgeId)),0);
+	}
+	
+	@Test
+	public void testDisallowPrivate() {
+		when(encoder.getLong(anyLong(), eq(EscapePrivateWeighting.KEY))).thenReturn(1L);
+		BanPrivateWeighting weighting = new BanPrivateWeighting(encoder, innerWeighting);
+		int prevOrNextEdgeId=1;
+		boolean reverse = false;
+		assertTrue("Private Edges should have maximum weight", Double.isInfinite(weighting.calcWeight(edge, reverse , prevOrNextEdgeId)));
+	}
+
+	/**
+	 * Sets up :-
+	 *  inner weighting so only effect of BanPrivateWeighting should stop access
+	 */
+	private void configureInner() {
+		when(innerWeighting.calcWeight((EdgeIteratorState)any(),anyBoolean(),anyInt())).thenReturn(10D);
+	}
+}
