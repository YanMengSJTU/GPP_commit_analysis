diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
index 451418d013..9718f8f373 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
@@ -50,13 +50,13 @@ public void overrideTestONPropertyToWeb() {
 
 	}
 
-	@After("@WebOnly,@SampleScenario,@ErrorMessages")
+	@After("@WebOnly,@SampleScenario,@ErrorMessages,@ServiceOnly")
 	public void rollBackTestONProperty() {
 		IntegrationTestProperties.setTestProperty("testON", testON);
 
 	}
 
-	@Before("@ErrorMessages")
+	@Before("@ErrorMessages,@ServiceOnly")
 	public void overrideTestONProperty() {
 
 		testON = IntegrationTestProperties.getTestProperty("testON");
diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
index fa315046d2..c97dc9cf9e 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
@@ -71,7 +71,7 @@
 	JavascriptExecutor js = (JavascriptExecutor) driver;
 	WebElement we;
 	private BufferedImage actualMap;
-	private String httpMethod="";
+	private String httpMethod = "";
 	private int actualResponseCode;
 	private String actualResponseMsg;
 
@@ -324,7 +324,7 @@ public boolean isWayPointonRouteMap(String wayPointIndex,
 			break;
 		case "SERVICE":
 
-			if (requestParameters.get("type").get(0).equals("gpx")) {
+			if (requestParameters.get("type").get(0).equalsIgnoreCase("gpx")) {
 				wp = buildWayPoint(wayPoint_Coordinates, wayPointDescription,
 						azimuth, direction, time, distance);
 				isWayPointonRouteMap = GPHServiceUtil.isWayPointOnGPXRoutes(wp);
@@ -573,8 +573,7 @@ public void isTrackPointonRouteMap(List<Map<String, String>> trackPointsList)
 					"trackPointco");
 
 			Waypoint trackPoint = buildWayPoint(waypointco);
-			if (IntegrationTestProperties.getTestProperty("routeType").equals(
-					"gpx")) {
+			if (requestParameters.get("type").get(0).equalsIgnoreCase("gpx")) {
 				assertTrue(GPHServiceUtil.isWayPointOnTrack(trackPoint,
 						GPHServiceUtil.getTracks().iterator().next()));
 			}
@@ -598,7 +597,7 @@ public void isTrackPointNotonRouteMap(
 					"trackPointco");
 
 			Waypoint trackPoint = buildWayPoint(waypointco);
-			if (requestParameters.get("type").get(0).equals("gpx")) {
+			if (requestParameters.get("type").get(0).equalsIgnoreCase("gpx")) {
 				assertTrue(!GPHServiceUtil.isWayPointOnTrack(trackPoint,
 						GPHServiceUtil.getTracks().iterator().next()));
 			}
@@ -682,12 +681,12 @@ public void verifyWayPointsThroughService() {
 
 	protected void addParameter(String key, String value) {
 		ArrayList<String> tempList = null;
-		if (value.equals("mountainbike"))
-		{	value="mtb";}
-		
+		if (value.equals("mountainbike")) {
+			value = "mtb";
+		}
+
+		value = value.toLowerCase().replaceAll(" ", "");
 
-			value= value.toLowerCase().replaceAll(" ", "");
-		
 		if (requestParameters.containsKey(key)) {
 			tempList = requestParameters.get(key);
 			if (tempList == null)
@@ -727,7 +726,11 @@ void sendAndGetResponse(StringBuffer sb) {
 			serviceResponse = IOUtils.toString(httpResponse.getEntity()
 					.getContent(), "UTF-8");
 			
+				
+			
+
 			final StatusLine statusLine = httpResponse.getStatusLine();
+			
 			actualResponseCode = statusLine.getStatusCode();
 			actualResponseMsg = statusLine.getReasonPhrase();
 
@@ -738,8 +741,7 @@ void sendAndGetResponse(StringBuffer sb) {
 
 		if (serviceResponse != null && serviceResponse.length() > 0) {
 
-			if (requestParameters.get("type").get(0)
-					.equalsIgnoreCase("gpx")) {
+			if (requestParameters.get("type").get(0).equalsIgnoreCase("gpx")) {
 				GPHServiceUtil.parseGPXFromString(serviceResponse);
 			} else {
 				GPHJSONUtil.parse(serviceResponse);
@@ -770,43 +772,43 @@ private void addCustomHeaders(HttpUriRequest httpRequest) {
 	CloseableHttpResponse doSendAndGetResponse(String serviceUrl)
 			throws IOException, ClientProtocolException {
 		CloseableHttpClient httpClient = HttpClientUtils.createClient();
-		
-		HttpUriRequest httpRequest=null;
-		
-	switch (httpMethod) {
-	case "PUT":
-		httpRequest = new HttpPut(serviceUrl);
-		
-		break;
-	case "GET":
-		
-		httpRequest = new HttpGet(serviceUrl);
-		
-		break;
-		
-	case "DEL":
-		
-		httpRequest = new HttpDelete(serviceUrl);
-		
-		break;
-		
-	case "POST":
-		
-		httpRequest = new HttpPost(serviceUrl);
-		
-		break;
-
-	case "OPTIONS":
-		
-		httpRequest = new HttpOptions(serviceUrl);
-		
-		break;
-	default:
-		httpRequest = new HttpGet(serviceUrl);
-		break;
-	}
-		
-		//HttpGet httpget = new HttpGet(serviceUrl);
+
+		HttpUriRequest httpRequest = null;
+
+		switch (httpMethod) {
+		case "PUT":
+			httpRequest = new HttpPut(serviceUrl);
+
+			break;
+		case "GET":
+
+			httpRequest = new HttpGet(serviceUrl);
+
+			break;
+
+		case "DEL":
+
+			httpRequest = new HttpDelete(serviceUrl);
+
+			break;
+
+		case "POST":
+
+			httpRequest = new HttpPost(serviceUrl);
+
+			break;
+
+		case "OPTIONS":
+
+			httpRequest = new HttpOptions(serviceUrl);
+
+			break;
+		default:
+			httpRequest = new HttpGet(serviceUrl);
+			break;
+		}
+
+		// HttpGet httpget = new HttpGet(serviceUrl);
 		addCustomHeaders(httpRequest);
 
 		return httpClient.execute(httpRequest);
@@ -862,9 +864,8 @@ public void getRouteFromUI() {
 
 		String avoidances = requestParameters.get("avoidances").get(0);
 		String vehicle = requestParameters.get("vehicle").get(0);
-		if (vehicle.equalsIgnoreCase("mountainbike"))
-		{
-			vehicle="mtb";
+		if (vehicle.equalsIgnoreCase("mountainbike")) {
+			vehicle = "mtb";
 		}
 
 		ArrayList<String> points = requestParameters.get("point");
@@ -1019,15 +1020,12 @@ public void verifyStatusCode(int statusCode) {
 		}
 	}
 
-	public Map<String, ArrayList<String>> getrequestParameters()
-	{
+	public Map<String, ArrayList<String>> getrequestParameters() {
 		return requestParameters;
 	}
-	
-	
-	public void getNearestPoint(String paramName,String pointA) {
 
-		String nearestpoint = "";
+	public void getNearestPoint(String paramName, String pointA) {
+
 		StringBuffer sb = new StringBuffer();
 		if (IntegrationTestProperties.getTestPropertyBool("viaApigee")) {
 			sb.append(IntegrationTestProperties
@@ -1038,20 +1036,13 @@ public void getNearestPoint(String paramName,String pointA) {
 		}
 
 		sb.append("nearest?");
-		sb.append(paramName+"=");
+		sb.append(paramName + "=");
 		sb.append(pointA);
 
 		getRouteFromServiceWithParameters(sb);
 
-	//	nearestpoint = getNearestPoint();
-		
-
-		//return nearestpoint;
-
 	}
 
-
-	
 	public String getNearestPoint() {
 
 		return GPHJSONUtil.getNearestPoint();
@@ -1064,27 +1055,22 @@ public String getNearestPointDistance() {
 	}
 
 	public void setHTTPMethod(String httpMethod) {
-		
-		this.httpMethod=httpMethod;
-		
 
-		
+		this.httpMethod = httpMethod;
+
 	}
 
 	public void verifyHttpStatusCode(int statusCode) {
-		Assert.assertTrue("Actual http Status Code"+ actualResponseCode+ "i s not matching with "+statusCode,statusCode==actualResponseCode);		
+		Assert.assertTrue("Actual http Status Code" + actualResponseCode
+				+ "i s not matching with " + statusCode,
+				statusCode == actualResponseCode);
 	}
 
 	public void verifyHttpErrorMessage(String responseMessage) {
-		Assert.assertTrue("Actual http Error Message "+ actualResponseMsg+ " is not matching with "+responseMessage,responseMessage.equalsIgnoreCase(actualResponseMsg));
-		
-	}
+		Assert.assertTrue("Actual http Error Message " + actualResponseMsg
+				+ " is not matching with " + responseMessage,
+				responseMessage.equalsIgnoreCase(actualResponseMsg));
 
-	public void setPointForNearest(String paramName, String pointA) {
-		
-	
-		
 	}
 
-	
 }
diff --git a/acceptancetesting/src/test/cucumber/Routing-SmokeTests.feature b/acceptancetesting/src/test/cucumber/Routing-SmokeTests.feature
new file mode 100644
index 0000000000..e6f640ef44
--- /dev/null
+++ b/acceptancetesting/src/test/cucumber/Routing-SmokeTests.feature
@@ -0,0 +1,266 @@
+Feature: Smoke Tests :Verify a route from A to B
+  
+   As a user
+   I want to get a route from location A to location B using the routing service
+   And route should be the fastest route and contain the waypoints,restrictions,time and other instructions
+
+  @Smoke
+  Scenario: Successful request with all parameters
+    Given I have route point as
+      | pointA              | pointB              |
+      | 50.729961,-3.524853 | 50.723364,-3.523895 |
+    And I have vehicle as "car"
+    And I have avoidances as ""
+    And I have weighting as "fastest"
+    And I have locale as "en_US"
+    And I have debug as "true"
+    And I have points_encoded as "true"
+    And I have points_calc as "true"
+    And I have instructions as "true"
+    And I have algorithm as "astar"
+    And I have type as "json"
+    When I request for a route
+    Then I should be able to verify the http response message as "OK"
+    Then I should be able to verify the http statuscode as "200"
+    Then I should be able to verify the waypoints on the route map:
+      | wayPointIndex | waypointco          | waypointdesc                | azimuth | direction | time | distance | avoidance |
+      | 2             | 50.729205,-3.523206 | Turn right onto WELL STREET | 210.0   | SW        | 4050 | 112.5    |           |
+
+  @Smoke
+  Scenario Outline: Incorrect Parameter Value for "Vehicle"
+    Given I have route point as
+      | pointA              | pointB              |
+      | 50.729961,-3.524853 | 50.723364,-3.523895 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have weighting as "<routeType>"
+    When I request for a route
+    Then I should be able to verify the http response message as "<httpErrorMessage>"
+    Then I should be able to verify the http statuscode as "<statusCode>"
+    Then I should be able to verify the response message as "<errorMessage>"
+    Then I should be able to verify the statuscode as "<statusCode>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | errorMessage                                                  | statusCode | httpErrorMessage |
+      | 123         |            | fastest   | Vehicle 123 is not a valid vehicle. Valid vehicles are car.   | 400        | Bad Request      |
+      | foot        |            | fastest   | Vehicle foot is not a valid vehicle. Valid vehicles are car.  | 400        | Bad Request      |
+      | cycle       |            | fastest   | Vehicle cycle is not a valid vehicle. Valid vehicles are car. | 400        | Bad Request      |
+      | Bike        |            | fastest   | Vehicle Bike is not a valid vehicle. Valid vehicles are car.  | 400        | Bad Request      |
+
+  @Smoke
+  Scenario Outline: Verify  waypoints on a Route from Southampton to Glasgow
+    Given I have route point as
+      | pointA              | pointB             |
+      | 50.896617,-1.400465 | 55.861284,-4.24996 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have weighting as "<routeType>"
+    When I request for a route
+    Then I should be able to verify the waypoints on the route map:
+      | wayPointIndex | waypointco          | waypointdesc                                             | azimuth | direction | time    | distance | avoidance |
+      | 1             | 50.896796,-1.400544 | Continue onto PLATFORM ROAD (A33)                        | 254.0   | W         | 3192    | 84.3     |           |
+      | 16            | 50.951921,-1.404239 | At roundabout, take exit 1 onto A33                      | 318.0   | NW        | 7083    | 187.0    |           |
+      | 17            | 50.953446,-1.403571 | Turn slight right onto M3                                | 28.0    | NE        | 566900  | 15747.6  |           |
+      | 18            | 51.07086,-1.292917  | At roundabout, take exit 2 onto A34 (WINCHESTER BY-PASS) | 284.0   | W         | 55129   | 1454.8   |           |
+      | 20            | 51.868385,-1.199845 | At roundabout, take exit 1 onto M40                      | 357.0   | N         | 2636747 | 73242.2  |           |
+      | 24            | 52.381175,-1.790061 | At roundabout, take exit 1 onto A34 (STRATFORD ROAD)     | 301.0   | NW        | 46514   | 1227.5   |           |
+
+    Examples: 
+      | vehicleType | avoidances | routeType |
+      | car         |            | fastest   |
+
+  @Smoke
+  Scenario Outline: Verify  waypoints on a Route from London to Birmingham and the total route time estimate
+    Given I have route point as
+      | pointA              | pointB              |
+      | 51.507229,-0.127581 | 52.481875,-1.898743 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have weighting as "<routeType>"
+    When I request for a route
+    Then The total route time should be not more than "<totalRouteTime>"
+
+    Examples: 
+      | vehicleType | avoidances | routeType | totalRouteTime |
+      | car         |            | fastest   | 03h00min       |
+
+  @Smoke @ServiceOnly
+  Scenario Outline: Verify  waypoints on a Route from Southampton to Glasgow
+    Given I have route point as
+      | pointA              | pointB             |
+      | 50.896617,-1.400465 | 55.861284,-4.24996 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have weighting as "<routeType>"
+    When I request for a route
+    Then I should be able to verify the trackPoints on the route map:
+      | trackPointco        |
+      | 52.52355,-1.902136  |
+      | 53.779418,-2.647821 |
+      | 54.304996,-2.646641 |
+      | 55.802602,-4.053713 |
+
+    Examples: 
+      | vehicleType | avoidances | routeType |
+      | car         |            | fastest   |
+
+  @Smoke
+  Scenario Outline: Verify  No Turn   (WSPIP-76:Eastley- TWYFORD ROAD )
+    Given I have route point as
+      | pointA              | pointB              |
+      | 50.972281,-1.350942 | 50.972212,-1.351183 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have weighting as "<routeType>"
+    When I request for a route
+    Then I should be able to verify the waypoints on the route map:
+      | wayPointIndex | waypointco          | waypointdesc                | azimuth | direction | time | distance | avoidance |
+      | 3             | 50.971952,-1.350891 | Turn left onto THE CRESCENT | 294.0   | NW        | 2981 | 37.3     |           |
+
+    Examples: 
+      | vehicleType | avoidances | routeType |
+      | car         |            | fastest   |
+
+  @Smoke
+  Scenario Outline: Verify  No Turn   (WSPIP-76:Eastley- Station Hill Road)
+    Given I have route point as
+      | pointA              | pointB             |
+      | 50.970024,-1.350267 | 50.97008,-1.350521 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have weighting as "<routeType>"
+    When I request for a route
+    Then I should be able to verify the waypoints on the route map:
+      | wayPointIndex | waypointco          | waypointdesc                      | azimuth | direction | time | distance | avoidance |
+      | 2             | 50.969817,-1.350504 | Continue onto STATION HILL (A335) | 180.0   | S         | 4583 | 57.3     |           |
+
+    Examples: 
+      | vehicleType | avoidances | routeType |
+      | car         |            | fastest   |
+
+  @Smoke
+  Scenario Outline: Verify  Mandatory Turn   (Alexandra Road-Hounslow- Fairfields Road)
+    Given I have route point as
+      | pointA             | pointB              |
+      | 51.47118,-0.363609 | 51.470254,-0.363412 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have weighting as "<routeType>"
+    When I request for a route
+    Then I should be able to verify the waypoints on the route map:
+      | wayPointIndex | waypointco          | waypointdesc                   | azimuth | direction | time | distance | avoidance |
+      | 2             | 51.470846,-0.363527 | Turn right onto LANSDOWNE ROAD | 259.0   | W         | 9934 | 124.2    |           |
+
+    Examples: 
+      | vehicleType | avoidances | routeType |
+      | car         |            | fastest   |
+
+  @WebOnly
+  Scenario Outline: Verify  Route using Full UK Address (Southampton to London)
+    Given I have route point as
+      | pointA                                                            | pointB                                 |
+      | ORDNANCE SURVEY, 4, ADANAC DRIVE, NURSLING, SOUTHAMPTON, SO16 0AS | 1, PICCADILLY ARCADE, LONDON, SW1Y 6NH |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have weighting as "<routeType>"
+    When I request for a route
+    Then I should be able to verify the waypoints on the route map:
+      | wayPointIndex | waypointdesc                                  |
+      | 3             | At roundabout, take exit 2 onto BROWNHILL WAY |
+      | 18            | Continue onto PICCADILLY (A4)                 |
+
+    Examples: 
+      | vehicleType | avoidances | routeType |
+      | car         |            | fastest   |
+
+  @WebOnly
+  Scenario Outline: Verify  Route using Full UK Address (Hounslow to Slough)
+    Given I have route point as
+      | pointA                              | pointB                                      |
+      | 131, TIVOLI ROAD, HOUNSLOW, TW4 6AS | 40, CHILTERN ROAD, BURNHAM, SLOUGH, SL1 7NH |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have weighting as "<routeType>"
+    When I request for a route
+    Then I should be able to verify the waypoints on the route map:
+      | wayPointIndex | waypointdesc                                   |
+      | 9             | At roundabout, take exit 1 onto BATH ROAD (A4) |
+      | 10            | Turn right onto HUNTERCOMBE LANE NORTH         |
+
+    Examples: 
+      | vehicleType | avoidances | routeType |
+      | car         |            | fastest   |
+
+  @Smoke
+  Scenario Outline: Verify a Roundabout(Charles Watts Way)
+    Given I have route point as
+      | pointA             | pointB              |
+      | 50.915416,-1.31902 | 50.915551,-1.294049 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have weighting as "<routeType>"
+    When I request for a route
+    Then I should be able to verify the waypoints on the route map:
+      | wayPointIndex | waypointco          | waypointdesc                                             | azimuth | direction | time  | distance | avoidance |
+      | 3             | 50.920147,-1.310351 | At roundabout, take exit 2 onto CHARLES WATTS WAY (A334) | 0.0     | N         | 17647 | 465.7    |           |
+
+    Examples: 
+      | vehicleType | avoidances | routeType |
+      | car         |            | fastest   |
+
+  @Smoke
+  Scenario Outline: Verify  nearest point of point using NearestPoint API
+    Given I have type as "<responseFormat>"
+    And My routing point for nearestPoint API as "<pointA>"
+    When I request a nearest point from from Nearest Point API
+    Then I should be able to verify the nearest point to be "<pointB>" at a distance of "<distance>"
+
+    Examples: 
+      | pointA                                 | pointB                                 | distance           |
+      | 51.878966,-0.903849                    | 51.875144098888576,-0.9107481891829116 | 636.3215777261629  |
+      | 53.101756,-1.954888                    | 53.10043020792586,-1.961414745138117   | 460.0011625834564  |
+      | 53.065293927002806,-1.9071498141906338 | 53.065293927002806,-1.9071498141906338 | 0                  |
+      | 52.784893,-1.84522                     | 52.79515894789604,-1.8521510478589918  | 1233.001210212637  |
+      | 52.79515894789604,-1.8521510478589918  | 52.79515894789604,-1.8521510478589918  | 0                  |
+      | 54.094977,-2.006081                    | 54.09420551570219,-2.0283477834242833  | 1454.551799711362  |
+      | 54.115309,-2.111881                    | 54.133065323525635,-2.131028334744908  | 2335.612435123903  |
+      | 54.095897,-2.144795                    | 54.08689388826998,-2.1488754559056935  | 1035.8644445463867 |
+      | 50.658849,-1.386463                    | 50.65520130477257,-1.4000444889283343  | 1039.7773305822475 |
+      | 56.025277,-4.917874                    | 56.02196904113215,-4.906092518708935   | 819.3253424080308  |
+      | 50.664175,-1.358463                    | 50.66192580003871,-1.3486298102579224  | 736.8284619868352  |
+
+  @Smoke
+  Scenario Outline: Verify  Route using 2 intermediate waypoints (Route-120 :Perth to Edinburgh via Stirling and Glasgow )
+    Given I have route point as
+      | pointA             | pointB              | pointC              | pointD              |
+      | 56.38721,-3.466273 | 56.136656,-3.970408 | 55.871665,-4.195067 | 55.950467,-3.208924 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have weighting as "<routeType>"
+    When I request for a route
+    Then I should be able to verify the waypoints on the route map:
+      | wayPointIndex | waypointco          | waypointdesc                | azimuth | direction | time   | distance | avoidance |
+      | 5             | 56.204647,-3.952177 | Turn slight left onto B8033 | 225.0   | SW        | 42144  | 585.4    |           |
+      | 22            | 55.871622,-4.198356 | Turn slight right onto M8   | 43.0    | NE        | 278576 | 7738.5   |           |
+
+    Examples: 
+      | vehicleType | avoidances | routeType |
+      | car         |            | shortest  |
+
+  @Smoke
+  Scenario Outline: Verify  Route using 2 intermediate waypoints (Route-120 :Perth to Edinburgh via Stirling and Glasgow )
+    Given I have route point as
+      | pointA             | pointB              | pointC              | pointD              |
+      | 56.38721,-3.466273 | 56.136656,-3.970408 | 55.871665,-4.195067 | 55.950467,-3.208924 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have weighting as "<routeType>"
+    When I request for a route
+    Then I should be able to verify the waypoints on the route map:
+      | wayPointIndex | waypointco          | waypointdesc                       | azimuth | direction | time   | distance | avoidance |
+      | 5             | 56.170837,-3.970499 | At roundabout, take exit 3 onto M9 | 91.0    | E         | 142970 | 3961.4   |           |
+      | 15            | 55.871772,-4.195164 | Continue onto M8                   | 243.0   | SW        | 10568  | 293.6    |           |
+
+    Examples: 
+      | vehicleType | avoidances | routeType |
+      | car         |            | fastest   |
diff --git a/acceptancetesting/src/test/cucumber/routing.feature b/acceptancetesting/src/test/cucumber/routing.feature
index d4fc243f31..44d2ddd353 100644
--- a/acceptancetesting/src/test/cucumber/routing.feature
+++ b/acceptancetesting/src/test/cucumber/routing.feature
@@ -112,7 +112,7 @@ Feature: Verify a route from A to B
       | vehicleType | avoidances | routeType | totalRouteTime |
       | car         |            | fastest   | 0h30min        |
 
-  @Routing
+  @ServiceOnly
   Scenario Outline: Verify  waypoints on a Route from Southampton to Glasgow
     Given I have route point as
       | pointA              | pointB             |
@@ -132,7 +132,7 @@ Feature: Verify a route from A to B
       | vehicleType | avoidances | routeType |
       | car         |            | fastest   |
 
-  @Routing
+  @ServiceOnly
   Scenario Outline: Verify  oneway Restrictions on a Route (Burmingham Route with one way restriction-WSPIP-74)
     Given I have route point as
       | pointA              | pointB              |
@@ -149,7 +149,7 @@ Feature: Verify a route from A to B
       | vehicleType | avoidances | routeType |
       | car         |            | fastest   |
 
-  @KnownIssues @Routing
+  @KnownIssues @ServiceOnly
   Scenario Outline: Verify  No Turn Restrictions  on a Route (Birmingham WSPIP-77)
     Given I have route point as
       | pointA              | pointB              |
@@ -166,7 +166,7 @@ Feature: Verify a route from A to B
       | vehicleType | avoidances | routeType |
       | car         |            | fastest   |
 
-  @KnownIssues
+  @KnownIssues @ServiceOnly
   Scenario Outline: Verify  No Turn Restrictions  on a Route (Birmingham Bristol Road WSPIP-83)
     Given I have route point as
       | pointA              | pointB              |
@@ -183,7 +183,7 @@ Feature: Verify a route from A to B
       | vehicleType | avoidances | routeType |
       | car         |            | fastest   |
 
-  @Routing
+  @ServiceOnly
   Scenario Outline: Verify  under pass still finds route  from top road (Southampton- Charle WattsWay)
     Given I have route point as
       | pointA              | pointB              |
@@ -200,7 +200,7 @@ Feature: Verify a route from A to B
       | vehicleType | avoidances | routeType |
       | car         |            | fastest   |
 
-  @Routing
+  @ServiceOnly
   Scenario Outline: Verify  under pass still finds route from bottom road  (Southampton- Charle WattsWay)
     Given I have route point as
       | pointA             | pointB             |
@@ -268,7 +268,7 @@ Feature: Verify a route from A to B
       | vehicleType | avoidances | routeType |
       | car         |            | fastest   |
 
-  @KnownIssues
+  @KnownIssues @ServiceOnly
   Scenario Outline: Verify  No Turns with Exceptions(Vehicle Type:Bus)   (High Street-Hounslow)
     Given I have route point as
       | pointA              | pointB              |
@@ -303,7 +303,7 @@ Feature: Verify a route from A to B
       | vehicleType | avoidances | routeType |
       | car         |            | fastest   |
 
-  @Routing
+  @ServiceOnly
   Scenario Outline: Verify  Private Road Restricted Access (Warwick Road-Carlisle)
     Given I have route point as
       | pointA              | pointB            |
