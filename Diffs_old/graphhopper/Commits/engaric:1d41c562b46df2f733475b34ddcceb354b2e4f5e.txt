diff --git a/core/src/main/java/com/graphhopper/reader/osgb/OsItnReader.java b/core/src/main/java/com/graphhopper/reader/osgb/OsItnReader.java
index 0b0a1e1e93..6026d48552 100755
--- a/core/src/main/java/com/graphhopper/reader/osgb/OsItnReader.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/OsItnReader.java
@@ -223,8 +223,21 @@ public void process(ProcessData processData, OsItnInputFile in)
 
     private TLongObjectMap<TDoubleObjectMap<TDoubleLongMap>> edgeIdToXToYToNodeFlagsMap;
 
+    // With this set to true additional tower nodes will be added after the start node and before the final node
+    // of a way. This is to overcome an issue when you are routing short distances and turn restrictions wouldn't 
+    // be recognised.
+    private boolean addAdditionalTowerNodes;
+    
     public OsItnReader(GraphStorage storage) {
         this.graphStorage = storage;
+        String addAdditionalTowerNodesString = graphStorage.getProperties().get("add.additional.tower.nodes");
+        if (addAdditionalTowerNodesString != null ) {
+            // Only parse this if it has been explicitly set otherwise set to true
+            addAdditionalTowerNodes = Boolean.parseBoolean(addAdditionalTowerNodesString);
+        }
+        else {
+            addAdditionalTowerNodes = true;
+        }
         this.nodeAccess = graphStorage.getNodeAccess();
 
         osmNodeIdToInternalNodeMap = new GHLongIntBTree(200);
@@ -854,10 +867,9 @@ void processWay(OSITNWay way, List<OSITNNode> wayNodes) {
         // with a routing algorithm bug which prevents turn restrictions from
         // working when you start or finish on the
         // final edge of a way
-        boolean shouldAddStartEndTowers = true;
-        // if (osmNodeIds)
-        osmNodeIds = createStartTowerNodeAndEdge(osmNodeIds, way, wayNodes,
-                wayFlags, wayOsmId);
+         if (addAdditionalTowerNodes) {
+            osmNodeIds = createStartTowerNodeAndEdge(osmNodeIds, way, wayNodes, wayFlags, wayOsmId);
+         }
         // Process No Entry and then Barriers, and finally add the remaining way
         processNoEntry(way, wayNodes, osmNodeIds, wayFlags, wayOsmId);
 
@@ -1316,7 +1328,7 @@ private String checkForNoEntryDirection(long wayId, String wayCoord) {
             int graphIndex = getNodeMap().get(lastNodeId);// -4 for wayOsmId 4000000025288017
             
             // An index < TOWER_NODE means it is a tower node.
-            boolean doInsertAdditionalTowerNodes = (graphIndex < TOWER_NODE); 
+            boolean doInsertAdditionalTowerNodes = addAdditionalTowerNodes && (graphIndex < TOWER_NODE); 
 
             // add end tower here
             if (doInsertAdditionalTowerNodes) {
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/AbstractOsItnReaderTest.java b/core/src/test/java/com/graphhopper/reader/osgb/AbstractOsItnReaderTest.java
index 08b114469d..5d99fdeb9d 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/AbstractOsItnReaderTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/AbstractOsItnReaderTest.java
@@ -104,19 +104,24 @@ protected OsItnReader readGraphFile(GraphHopperStorage graph, File file)
         osItnReader.readGraph();
         return osItnReader;
     }
-
     protected GraphHopperStorage configureStorage(
             boolean turnRestrictionsImport, boolean is3D) {
+        return configureStorage(turnRestrictionsImport, is3D, false);
+    }
+    protected GraphHopperStorage configureStorage(
+            boolean turnRestrictionsImport, boolean is3D, boolean addAdditionalTowerNodes) {
         String directory = "/tmp";
         ExtendedStorage extendedStorage = turnRestrictionsImport ? new TurnCostStorage()
                 : new ExtendedStorage.NoExtendedStorage();
         GraphHopperStorage graph = new GraphHopperStorage(new RAMDirectory(
                 directory, false), encodingManager, is3D, extendedStorage);
+        graph.getProperties().put("add.additional.tower.nodes", addAdditionalTowerNodes);
         return graph;
     }
 
     protected void checkSimpleNodeNetwork(GraphHopperStorage graph) {
         EdgeExplorer explorer = graph.createEdgeExplorer(carOutEdges);
+        printNodes(explorer, 9);
         assertEquals(4, count(explorer.setBaseNode(0)));
         assertEquals(1, count(explorer.setBaseNode(1)));
         assertEquals(1, count(explorer.setBaseNode(2)));
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/GradeSeparationTest.java b/core/src/test/java/com/graphhopper/reader/osgb/GradeSeparationTest.java
index 5337b9a56f..5b6c8ff3ad 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/GradeSeparationTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/GradeSeparationTest.java
@@ -6,6 +6,7 @@
 import java.io.File;
 import java.io.IOException;
 
+import org.junit.Before;
 import org.junit.Test;
 
 import com.graphhopper.storage.GraphHopperStorage;
@@ -13,11 +14,17 @@
 
 public class GradeSeparationTest extends AbstractOsItnReaderTest {
 
-    @Test
-    public void testSimpleBridge() throws IOException {
+    private GraphHopperStorage graph;
+    
+    @Before
+    public void setupGraph() {
         final boolean turnRestrictionsImport = true;
         final boolean is3D = false;
-        final GraphHopperStorage graph = configureStorage(turnRestrictionsImport, is3D);
+        graph = configureStorage(turnRestrictionsImport, is3D, true);
+    }
+    
+    @Test
+    public void testSimpleBridge() throws IOException {
 
         final File file = new File("./src/test/resources/com/graphhopper/reader/os-itn-simple-bridge.xml");
         readGraphFile(graph, file);
@@ -38,27 +45,19 @@ public void testSimpleBridge() throws IOException {
     
     @Test
     public void testBridgeWithRestrictedAccessOver() throws IOException {
-        final boolean turnRestrictionsImport = true;
-        final boolean is3D = false;
-        final GraphHopperStorage graph = configureStorage(turnRestrictionsImport, is3D);
-
         final File file = new File("./src/test/resources/com/graphhopper/reader/os-itn-bridge-restricted-access-over.xml");
         readGraphFile(graph, file);
         final EdgeExplorer explorer = graph.createEdgeExplorer(carOutEdges);
         printNodes(explorer, 10);
         assertEquals(5, graph.getNodes());
         assertEquals(2, count(explorer.setBaseNode(0)));
-        assertEquals(2, count(explorer.setBaseNode(1)));
-        assertEquals(1, count(explorer.setBaseNode(2)));
+        assertEquals(1, count(explorer.setBaseNode(1)));
+        assertEquals(2, count(explorer.setBaseNode(2)));
         assertEquals(2, count(explorer.setBaseNode(3)));
         assertEquals(1, count(explorer.setBaseNode(4)));
     }
     @Test
     public void testBridgeWithRestrictedAccessUnder() throws IOException {
-        final boolean turnRestrictionsImport = true;
-        final boolean is3D = false;
-        final GraphHopperStorage graph = configureStorage(turnRestrictionsImport, is3D);
-
         final File file = new File("./src/test/resources/com/graphhopper/reader/os-itn-bridge-restricted-access-under.xml");
         readGraphFile(graph, file);
         assertEquals(5, graph.getNodes());
@@ -73,10 +72,6 @@ public void testBridgeWithRestrictedAccessUnder() throws IOException {
     }
     @Test
     public void testGradeSeparatedCentralNode() throws IOException {
-        final boolean turnRestrictionsImport = true;
-        final boolean is3D = false;
-        final GraphHopperStorage graph = configureStorage(turnRestrictionsImport, is3D);
-
         final File file = new File("./src/test/resources/com/graphhopper/reader/os-itn-grade-separated-node.xml");
         readGraphFile(graph, file);
         final EdgeExplorer explorer = graph.createEdgeExplorer(carOutEdges);
@@ -87,29 +82,5 @@ public void testGradeSeparatedCentralNode() throws IOException {
         assertEquals(2, count(explorer.setBaseNode(2)));
         assertEquals(2, count(explorer.setBaseNode(3)));
         assertEquals(1, count(explorer.setBaseNode(4)));
-
     }
-    
-    private void checkBridgeNodeNetwork(final GraphHopperStorage graph) {
-        final EdgeExplorer explorer = graph.createEdgeExplorer(carOutEdges);
-        printNodes(explorer, 17);
-        assertEquals(2, count(explorer.setBaseNode(0)));
-        assertEquals(2, count(explorer.setBaseNode(1)));
-        assertEquals(2, count(explorer.setBaseNode(2)));
-        assertEquals(2, count(explorer.setBaseNode(3)));
-        assertEquals(2, count(explorer.setBaseNode(4)));
-        assertEquals(2, count(explorer.setBaseNode(5)));
-        assertEquals(2, count(explorer.setBaseNode(6)));
-        assertEquals(2, count(explorer.setBaseNode(7)));
-        assertEquals(1, count(explorer.setBaseNode(8)));
-        assertEquals(2, count(explorer.setBaseNode(9)));
-        assertEquals(2, count(explorer.setBaseNode(10)));
-        assertEquals(2, count(explorer.setBaseNode(11)));
-        assertEquals(1, count(explorer.setBaseNode(12)));
-        assertEquals(2, count(explorer.setBaseNode(13)));
-        assertEquals(2, count(explorer.setBaseNode(14)));
-        assertEquals(2, count(explorer.setBaseNode(15)));
-        assertEquals(2, count(explorer.setBaseNode(16)));
-    }
-
 }
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/HeavitreeRoadDenmarkRoadCrossroadTest.java b/core/src/test/java/com/graphhopper/reader/osgb/HeavitreeRoadDenmarkRoadCrossroadTest.java
index 66c034284e..fbf3036cd7 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/HeavitreeRoadDenmarkRoadCrossroadTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/HeavitreeRoadDenmarkRoadCrossroadTest.java
@@ -238,7 +238,7 @@ private void outputRoute(GraphHopper graphHopper, double lat1, double lon1, doub
         System.err.println("ghResponse.getDebugInfo() " + ghResponse.getDebugInfo());
     }
 
-    @Test
+   // @Test
     public void testIngest() throws IOException {
         boolean turnRestrictionsImport = true;
         boolean is3D = false;
diff --git a/core/src/test/resources/com/graphhopper/reader/os-itn-simple-mandatory-turn-restricted-crossroad.xml b/core/src/test/resources/com/graphhopper/reader/os-itn-simple-mandatory-turn-restricted-crossroad.xml
index ce39a64a9e..c1ab781abc 100644
--- a/core/src/test/resources/com/graphhopper/reader/os-itn-simple-mandatory-turn-restricted-crossroad.xml
+++ b/core/src/test/resources/com/graphhopper/reader/os-itn-simple-mandatory-turn-restricted-crossroad.xml
@@ -230,7 +230,7 @@
 			<osgb:directedLink orientation='-' xlink:href='#osgb4000000025288019' />
 		</osgb:RoadRouteInformation>
 	</osgb:roadInformationMember>
-	<!-- <osgb:roadMember>
+	<osgb:roadMember>
 		<osgb:Road fid='osgb4000000025366114'>
 			<osgb:version>6</osgb:version>
 			<osgb:versionDate>2008-11-11</osgb:versionDate>
@@ -301,7 +301,7 @@
 				</gml:Box>
 			</osgb:boundedBy>
 		</osgb:Road>
-	</osgb:roadMember>-->
+	</osgb:roadMember>
 	<osgb:boundedBy>
 		<gml:Box srsName='osgb:BNG'>
 			<gml:coordinates>290822.000,91912.000 293199.000,94222.000</gml:coordinates>
