diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnWay.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnWay.java
index 67e124ef33..b07c858a5a 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnWay.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnWay.java
@@ -66,7 +66,7 @@ public static OsDpnWay create(String idStr, XMLStreamReader parser)
         logger.trace("OsDpnWay.create()");
         OsDpnWay way = new OsDpnWay(idStr);
         parser.nextTag();
-        way.setTag("highway", "track");
+//        way.setTag("highway", "track");
         way.readTags(parser);
         logger.info(way.toString());
         return way;
@@ -164,16 +164,19 @@ protected void parseCoords(String lineDefinition) {
                 + ((wayCoords.length == 0) ? "0" : wayCoords[0]));
     }
 
+    /**
+     * Ignores first and last coordinate set as they are also the start and end node coordinates and therefore already captured as towers
+     */
     @Override
     protected void parseCoords(int dimensions, String lineDefinition) {
         String[] lineSegments = lineDefinition.split(" ");
-        wayCoords = new String[lineSegments.length / dimensions];
+        wayCoords = new String[lineSegments.length / dimensions -2];
         StringBuilder curString = null;
-        for (int i = 0; i < lineSegments.length; i++) {
+        for (int i = dimensions; i < lineSegments.length - dimensions; i++) {
             String string = lineSegments[i];
             switch (i % dimensions) {
                 case 0: {
-                    int coordNumber = i / dimensions;
+                    int coordNumber = (i / dimensions) -1;
                     if (coordNumber > 0) {
                         wayCoords[coordNumber - 1] = curString.toString();
                     }
@@ -184,7 +187,7 @@ protected void parseCoords(int dimensions, String lineDefinition) {
 
                 case 1:
                 case 2: {
-                    curString.append(',');
+                    curString.append(' ');
                     curString.append(string);
                 }
             }
@@ -249,7 +252,7 @@ protected void addDirectedLink(String nodeId, String orientation) {
             long idPrefix = (i + 1);
             String id = idPrefix + getId();
             OsDpnNode wayNode = new OsDpnNode(id);
-            wayNode.parseCoordinateString(wayCoord, ",");
+            wayNode.parseCoords(wayCoord);
 
             logger.info("Node " + getId() + " coords: " + wayCoord + " tags: ");
             for (String tagKey : wayNode.getTags().keySet()) {
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/AbstractOsDpnReaderTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/AbstractOsDpnReaderTest.java
index 61567a752c..c16104a876 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/AbstractOsDpnReaderTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/AbstractOsDpnReaderTest.java
@@ -89,14 +89,23 @@ protected EncodingManager createEncodingManager() {
         return new EncodingManager(list, 8);
     }
 
-    protected OsDpnReader readGraphFile(GraphHopperStorage graph, File file)
+    /**
+     * 
+     * @param graph
+     * @param file
+     * @param maxWayPointDistance 0 disables DouglasPeuker simplification 1 = default
+     * @return
+     * @throws IOException
+     */
+    protected OsDpnReader readGraphFile(GraphHopperStorage graph, File file, int maxWayPointDistance)
             throws IOException {
-        OsDpnReader osItnReader = new OsDpnReader(graph);
+        OsDpnReader osDpnReader = new OsDpnReader(graph);
         System.out.println("Read " + file.getAbsolutePath());
-        osItnReader.setOSMFile(file);
-        osItnReader.setEncodingManager(encodingManager);
-        osItnReader.readGraph();
-        return osItnReader;
+        osDpnReader.setOSMFile(file);
+        osDpnReader.setWayPointMaxDistance(maxWayPointDistance);
+        osDpnReader.setEncodingManager(encodingManager);
+        osDpnReader.readGraph();
+        return osDpnReader;
     }
 
     protected GraphHopperStorage configureStorage(
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/OsDpnReaderTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/OsDpnReaderTest.java
index 66ffd4c193..e354f0a92b 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/OsDpnReaderTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/OsDpnReaderTest.java
@@ -8,7 +8,6 @@
 import java.io.File;
 import java.io.IOException;
 
-import org.junit.Before;
 import org.junit.Test;
 
 import com.graphhopper.routing.util.DefaultEdgeFilter;
@@ -19,19 +18,12 @@
 
 public class OsDpnReaderTest extends AbstractOsDpnReaderTest
 {
-
-    private GraphHopperStorage graph;
-
-    @Before
-    public void setUp() throws IOException {
-        graph = readGraph();
-        GHUtility.printInfo(graph, 0, 30, EdgeFilter.ALL_EDGES);
-        configureExplorer(graph);
-    }
+	private GraphHopperStorage graph;
 
     @Test
     public void testReadDpnSampleLayout() throws IOException
     {
+	configure(0);
 
 	assertEquals(5, graph.getNodes());
 
@@ -74,11 +66,10 @@ public void testReadDpnSampleLayout() throws IOException
 	assertFalse(iter.next());
     }
 
-
     @Test
     public void testReadDpnSampleName() throws IOException
     {
-
+	configure(0);
 	EdgeIterator iter = footOutExplorer.setBaseNode(0);
 	assertTrue(iter.next());
 	assertTrue(iter.next());
@@ -90,7 +81,7 @@ public void testReadDpnSampleName() throws IOException
     @Test
     public void testReadDpnSampleNameWithAlternate() throws IOException
     {
-
+	configure(0);
 	EdgeIterator iter = footOutExplorer.setBaseNode(0);
 	assertTrue(iter.next());
 	assertTrue(iter.next());
@@ -102,7 +93,7 @@ public void testReadDpnSampleNameWithAlternate() throws IOException
     @Test
     public void testReadDpnSampleNameDefaultToTrackType() throws IOException
     {
-
+	configure(0);
 	EdgeIterator iter = footOutExplorer.setBaseNode(0);
 	assertTrue(iter.next());
 	assertEquals("No Name field available so should report track type", "Alley", iter.getName());
@@ -112,30 +103,57 @@ public void testReadDpnSampleNameDefaultToTrackType() throws IOException
     public void testReadDpnSampleNameDefaultToTrackFriendlyNameWhenNoPhysicalManifestation()
 		    throws IOException
     {
+	configure(0);
 	EdgeIterator iter = footOutExplorer.setBaseNode(0);
 	assertTrue(iter.next());
 	assertTrue(iter.next());
 	assertEquals("No Name field available so should be report track type", "Route",
 			iter.getName());
     }
-
+    
     @Test
-    public void testFetchWayGeometry()
+    public void testReadDpnWayGeometry() throws IOException
     {
-        EdgeIterator iter = footOutExplorer.setBaseNode(0);
-        iter.next();
-//        assertEquals("", 1, iter.fetchWayGeometry(0).getSize());
-        assertFalse(0 == iter.fetchWayGeometry(0).getSize());
-        iter.next();
-//        assertEquals("", 1, iter.fetchWayGeometry(0).getSize());
-        assertFalse(0 == iter.fetchWayGeometry(0).getSize());
-        iter.next();
-//        assertEquals("", 5, iter.fetchWayGeometry(0).getSize());
-        assertFalse(0 == iter.fetchWayGeometry(0).getSize());
-        iter.next();
-//        assertEquals("", 8, iter.fetchWayGeometry(0).getSize());
-        assertFalse(0 == iter.fetchWayGeometry(0).getSize());
-
+	configure(0);
+	EdgeIterator iter = footOutExplorer.setBaseNode(0);
+	assertTrue(iter.next());
+	assertEquals(1, iter.fetchWayGeometry(0).size());
+	assertTrue(iter.next());
+	assertEquals(1, iter.fetchWayGeometry(0).size());
+	assertTrue(iter.next());
+	assertEquals(5, iter.fetchWayGeometry(0).size());
+	assertTrue(iter.next());
+	assertEquals(8, iter.fetchWayGeometry(0).size());
+	assertFalse(iter.next());
+		
+    }
+    
+    @Test
+    public void testReadDpnWayGeometryWithSimplifiedWayGeometry() throws IOException
+    {
+	configure(1);
+	EdgeIterator iter = footOutExplorer.setBaseNode(0);
+	assertTrue(iter.next());
+	assertEquals(1, iter.fetchWayGeometry(0).size());
+	assertTrue(iter.next());
+	assertEquals(1, iter.fetchWayGeometry(0).size());
+	assertTrue(iter.next());
+	assertEquals(4, iter.fetchWayGeometry(0).size());
+	assertTrue(iter.next());
+	assertEquals(5, iter.fetchWayGeometry(0).size());
+	assertFalse(iter.next());
+		
+    }
+    
+    /**
+     * 
+     * @param maxWayPointDistance 0 disables DouglasPeuker simplification 1 = graphhopper default 1 metre
+     * @throws IOException
+     */
+    private void configure(int maxWayPointDistance) throws IOException {
+        graph = readGraph(maxWayPointDistance);
+        GHUtility.printInfo(graph, 0, 30, EdgeFilter.ALL_EDGES);
+        configureExplorer(graph);
     }
 
     private void configureExplorer(final GraphHopperStorage graph)
@@ -143,7 +161,7 @@ private void configureExplorer(final GraphHopperStorage graph)
     	footOutExplorer = graph.createEdgeExplorer(new DefaultEdgeFilter(footEncoder, true, true));
     }
 
-    private GraphHopperStorage readGraph() throws IOException
+    private GraphHopperStorage readGraph(int maxWayPointDistance) throws IOException
     {
 	final boolean turnRestrictionsImport = false;
 	final boolean is3D = false;
@@ -151,7 +169,7 @@ private GraphHopperStorage readGraph() throws IOException
 
 	final File file = new File(
 			"./src/test/resources/com/graphhopper/reader/osgb/dpn/os-dpn-sample.xml");
-	readGraphFile(graph, file);
+	readGraphFile(graph, file, maxWayPointDistance);
 	return graph;
     }
 
