diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/beans/RouteWayPoint.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/beans/RouteWayPoint.java
index 5abc347d8b..ccf7aedacf 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/beans/RouteWayPoint.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/beans/RouteWayPoint.java
@@ -25,73 +25,76 @@ public boolean equals(RouteWayPoint routeWayPoint) {
 		boolean isEqual = false;
 		Field[] fields = waypoint.getClass().getDeclaredFields();
 		for (Field f : fields) {
-			
-	
-			if(!f.getName().equalsIgnoreCase("time"))
-			{
-				
-			
-			
-			try {
-				String first = f.getName().substring(0, 1);
-				String getter = "get" + f.getName().replaceFirst(first, first.toUpperCase());
-				Method m = waypoint.getClass().getMethod(getter,new Class[] {});
-				
-
-				
-				Object thisValue = m.invoke(waypoint);
-				Object thatValue = m.invoke(routeWayPoint.waypoint);
-				
-				if (f.getName()=="description")
-				{
-					// description string comparison ignoring case and special char "'"
-					
-					
-					String thisValueAsString = ((String) thisValue).replaceAll("[^\\w]", "");
-					String thatValueAsString=((String)thatValue).replaceAll("[^\\w]", "");
-					isEqual = thisValueAsString.equalsIgnoreCase(( thatValueAsString));
-					
-				}
-				if (thisValue instanceof String) {
 
-					
-				} else {
-					isEqual = Objects.equals(thisValue, thatValue);
-				}
-			
-				if (!isEqual) {
-					break;
+			if (!f.getName().equalsIgnoreCase("time")) {
+
+				try {
+					String first = f.getName().substring(0, 1);
+					String getter = "get"
+							+ f.getName().replaceFirst(first,
+									first.toUpperCase());
+					Method m = waypoint.getClass().getMethod(getter,
+							new Class[] {});
+
+					Object thisValue = m.invoke(waypoint);
+					Object thatValue = m.invoke(routeWayPoint.waypoint);
+
+					if (f.getName() == "description") {
+						// description string comparison ignoring case and
+						// special char "'"
+
+						try {
+							String thisValueAsString = ((String) thisValue)
+									.replaceAll("[^\\w]", "");
+							String thatValueAsString = ((String) thatValue)
+									.replaceAll("[^\\w]", "");
+							isEqual = thisValueAsString
+									.equalsIgnoreCase((thatValueAsString));
+						}
+
+						catch (Exception e) {
+							e.printStackTrace();
+						}
+					}
+					if (thisValue instanceof String) {
+
+					} else {
+						isEqual = Objects.equals(thisValue, thatValue);
+					}
+
+					if (!isEqual) {
+						break;
+					}
+				} catch (NoSuchMethodException e) {
+					// TODO Auto-generated catch block
+					e.printStackTrace();
+				} catch (InvocationTargetException e) {
+					// TODO Auto-generated catch block
+					e.printStackTrace();
+				} catch (IllegalAccessException e) {
+					// TODO Auto-generated catch block
+					e.printStackTrace();
+				} catch (IllegalArgumentException e) {
+					// TODO Auto-generated catch block
+					e.printStackTrace();
 				}
-			} catch (NoSuchMethodException e) {
-				// TODO Auto-generated catch block
-				e.printStackTrace();
-			} catch (InvocationTargetException e) {
-				// TODO Auto-generated catch block
-				e.printStackTrace();
-			} catch (IllegalAccessException e) {
-				// TODO Auto-generated catch block
-				e.printStackTrace();
-			} catch (IllegalArgumentException e) {
-				// TODO Auto-generated catch block
-				e.printStackTrace();
 			}
 		}
-		}
 		if (isEqual) {
 			System.out.println(routeWayPoint.waypoint.getExtensionData());
-			if (null!=routeWayPoint.waypoint.getExtensionData())
-			{for (String anExtensionDataKey : waypoint.getExtensionData()
-					.keySet()) {
-				isEqual = Objects.equals(waypoint
-						.getExtensionData(anExtensionDataKey),
-						routeWayPoint.waypoint
-								.getExtensionData(anExtensionDataKey));
-				if (!isEqual) {
-					break;
+			if (null != routeWayPoint.waypoint.getExtensionData()) {
+				for (String anExtensionDataKey : waypoint.getExtensionData()
+						.keySet()) {
+					isEqual = Objects.equals(waypoint
+							.getExtensionData(anExtensionDataKey),
+							routeWayPoint.waypoint
+									.getExtensionData(anExtensionDataKey));
+					if (!isEqual) {
+						break;
+					}
 				}
 			}
 		}
-		}
 
 		return isEqual;
 	}
diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperServiceUtil.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperServiceUtil.java
index 97e8dab003..0f87a78a1f 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperServiceUtil.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperServiceUtil.java
@@ -1,5 +1,6 @@
-	package uk.co.ordnancesurvey.routing;
-	import static org.junit.Assert.assertTrue;
+package uk.co.ordnancesurvey.routing;
+
+import static org.junit.Assert.assertTrue;
 
 import java.util.HashSet;
 
@@ -12,71 +13,26 @@
 import uk.co.ordnancesurvey.gpx.graphhopper.GraphHopperGPXParserRouteTest;
 
 public class GraphHopperServiceUtil {
-	
-			private static final Logger LOG = LoggerFactory
-				.getLogger(GraphHopperServiceUtil.class);
-		
 
-		
-		public void testrouteContainsTurn(String turn) {
-			String path = getClass().getResource("sampleGraphHopper.gpx").getPath();
-			GraphHopperGPXParserRouteTest ghrt = GraphHopperGPXParserRouteTest.getParserForgpxFileName(path);
-			HashSet<Route> hs = ghrt.getRoutes();
-			if( null==turn)
-			{turn = "turn sharp right onto Bellemoor Road";}
-			
-			assertTrue(ghrt.routeContainsTurn(turn, hs.iterator().next()));
-		}
+	private static final Logger LOG = LoggerFactory
+			.getLogger(GraphHopperServiceUtil.class);
 
-		
-		public void testWayPointIsOnRoute() {
-			
-			String path = getClass().getResource("sampleGraphHopper.gpx").getPath();
-			GraphHopperGPXParserRouteTest ghrt = GraphHopperGPXParserRouteTest.getParserForgpxFileName(path);
-			//Waypoint wayPoint = getTestWayPoint();
-			HashSet<Route> hs = ghrt.getRoutes();
-			
-			
-			//assertTrue(ghrt.isWayPointOnRoute(wayPoint,hs.iterator().next()));
-		}
-		
+	public GraphHopperGPXParserRouteTest testGetRouteAsGPX() {
+		LOG.info("Starting To Test");
+		GraphHopperGPXParserRouteTest ghrt = new GraphHopperGPXParserRouteTest();
+		String gpxString = ghrt
+				.parseRoute(
+						"50.93602556772844,-1.4194250106811523,50.92544987854478,-1.389212608337402",
+						"gpx", "car");
 
-		public void testTotalRouteTime() {
-			String path = getClass().getResource("sampleGraphHopper.gpx").getPath();
-			GraphHopperGPXParserRouteTest ghrt = GraphHopperGPXParserRouteTest.getParserForgpxFileName(path);
-			ghrt.getTotalRouteTime();
-			assertTrue(true);
-		}
-		
-		
-		public GraphHopperGPXParserRouteTest testGetRouteAsGPX() {
-			LOG.info("Starting To Test");
-			GraphHopperGPXParserRouteTest ghrt = new GraphHopperGPXParserRouteTest();
-			String gpxString = ghrt.parseRoute("50.93602556772844,-1.4194250106811523,50.92544987854478,-1.389212608337402", "gpx", "car");
-			
-			LOG.info(gpxString);
-			HashSet<Route> hs = ghrt.getRoutes();
-			
-			assertTrue(ghrt.routeContainsTurn("turn sharp right onto ROCKLEIGH ROAD",hs.iterator().next()));
-			return ghrt;
-		}
-
-		private Waypoint getTestWayPoint(String longitude,String latitude) {
-			
-			Waypoint wp = new Waypoint();
-			wp.setLatitude(new Double(50.927146));
-			wp.setLongitude(new Double(-1.416787));
-			wp.addExtensionData(ExtensionConstants.AZIMUTH, "339");
-			wp.addExtensionData(ExtensionConstants.DIRECTION, "N");
-			wp.addExtensionData(ExtensionConstants.TIME, "2515");
-			wp.addExtensionData(ExtensionConstants.DISTANCE, "13.974");
-			
-			return wp;
-		}
-		
-		
+		LOG.info(gpxString);
+		HashSet<Route> hs = ghrt.getRoutes();
 
+		assertTrue(ghrt.routeContainsTurn(
+				"turn sharp right onto ROCKLEIGH ROAD", hs.iterator().next()));
+		return ghrt;
 	}
+	
+	
 
-
-
+}
diff --git a/acceptancetesting/src/test/java/GPHRouteTest.java b/acceptancetesting/src/test/java/GPHRouteTest.java
index 47a76db22f..099b728d3d 100644
--- a/acceptancetesting/src/test/java/GPHRouteTest.java
+++ b/acceptancetesting/src/test/java/GPHRouteTest.java
@@ -41,13 +41,17 @@ public void testrouteContainsTurn() {
 		
 		assertTrue(ghrt.routeContainsTurn(turn, hs.iterator().next()));
 	}
-
+	
+	
 	@Test
 	public void testWayPointIsOnRoute() {
-		
+
+				
 		String path = getClass().getResource("sampleGraphHopper.gpx").getPath();
 		GraphHopperGPXParserRouteTest ghrt = GraphHopperGPXParserRouteTest.getParserForgpxFileName(path);
-		Waypoint wayPoint = getTestWayPoint();
+		Waypoint wayPoint = getTestWayPoint("50.927146","-1.416787","339","N","2515","13.974");
+		
+
 		HashSet<Route> hs = ghrt.getRoutes();
 		
 		assertTrue(ghrt.isWayPointOnRoute(wayPoint,hs.iterator().next()));
@@ -70,16 +74,20 @@ public void testGetRouteAsGPX() {
 		assertTrue(ghrt.routeContainsTurn("turn sharp right onto Bellemoor Road",next));
 	}
 
-	private Waypoint getTestWayPoint() {
+	private Waypoint getTestWayPoint(String lat, String lon,String azimuth,String direction,String time,String distance) {
 		
 		Waypoint wp = new Waypoint();
-		wp.setLatitude(new Double(50.927146));
-		wp.setLongitude(new Double(-1.416787));
-		wp.addExtensionData(ExtensionConstants.AZIMUTH, "339");
-		wp.addExtensionData(ExtensionConstants.DIRECTION, "N");
-		wp.addExtensionData(ExtensionConstants.TIME, "2515");
-		wp.addExtensionData(ExtensionConstants.DISTANCE, "13.974");
-		
+		wp.setLatitude(new Double(lat));
+		wp.setLongitude(new Double(lon));
+		wp.addExtensionData(ExtensionConstants.AZIMUTH, azimuth);
+		wp.addExtensionData(ExtensionConstants.DIRECTION, direction);
+		wp.addExtensionData(ExtensionConstants.TIME, time);
+		wp.addExtensionData(ExtensionConstants.DISTANCE, distance);
 		return wp;
 	}
+	
+	
+
+	
+
 }
diff --git a/acceptancetesting/src/test/resources/test.properties b/acceptancetesting/src/test/resources/test.properties
index e8e64e073b..76a12b7057 100644
--- a/acceptancetesting/src/test/resources/test.properties
+++ b/acceptancetesting/src/test/resources/test.properties
@@ -1,7 +1,7 @@
 graphHopperWebUrl=http://os-gh-ite.elasticbeanstalk.com/
 DPNgraphHopperWebUrl=http://dpn-env.elasticbeanstalk.com/
 #webDriverHubUrl=http://ND28350.ordsvy.gov.uk:5555/wd/hub
-webDriverHubUrl=http://ND26185.ordsvy.gov.uk:5555/wd/hub
+webDriverHubUrl=http://ND27983.ordsvy.gov.uk:5555/wd/hub
 #testON=Web,Service  // Default both
 testON=
 traceEnabled=false
