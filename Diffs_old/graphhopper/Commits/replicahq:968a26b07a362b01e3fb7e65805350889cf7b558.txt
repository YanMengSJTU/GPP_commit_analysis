diff --git a/toronto.yml b/toronto.yml
index d5a0847c83..4020e6c1d5 100644
--- a/toronto.yml
+++ b/toronto.yml
@@ -1,5 +1,7 @@
 graphhopper:
   graph.location: transit_data/toronto-r5-gh
+  routing.ch.disabling_allowed: true
+  r5.link_speed_file: transit_data/toronto-r5-gh/r5_predicted_tt.csv
 
 server:
   applicationConnectors:
diff --git a/web/src/main/java/com/graphhopper/http/GraphHopperManaged.java b/web/src/main/java/com/graphhopper/http/GraphHopperManaged.java
index c1607ee14f..65dd22d8c2 100644
--- a/web/src/main/java/com/graphhopper/http/GraphHopperManaged.java
+++ b/web/src/main/java/com/graphhopper/http/GraphHopperManaged.java
@@ -23,8 +23,13 @@
 import com.graphhopper.routing.util.DefaultFlagEncoderFactory;
 import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.routing.util.FlagEncoderFactory;
+import com.graphhopper.routing.util.HintsMap;
+import com.graphhopper.routing.weighting.Weighting;
 import com.graphhopper.spatialrules.SpatialRuleLookupHelper;
+import com.graphhopper.storage.Graph;
+import com.graphhopper.swl.FileTravelTimeCalculator;
 import com.graphhopper.swl.PathDetailsBuilderFactoryWithR5EdgeId;
+import com.graphhopper.swl.TDCarWeighting;
 import com.graphhopper.util.CmdArgs;
 import com.graphhopper.util.PMap;
 import com.graphhopper.util.Parameters;
@@ -44,15 +49,26 @@
 
     @Inject
     public GraphHopperManaged(CmdArgs configuration) {
+        OriginalDirectionFlagEncoder originalDirectionFlagEncoder = new OriginalDirectionFlagEncoder();
+        FileTravelTimeCalculator speedCalculator = new FileTravelTimeCalculator(originalDirectionFlagEncoder,configuration.get("r5.link_speed_file", "required!!"));
         graphHopper = new GraphHopperOSM(
                 SpatialRuleLookupHelper.createLandmarkSplittingFeatureCollection(configuration.get(Parameters.Landmark.PREPARE + "split_area_location", ""))
-        ).forServer();
+        ) {
+            @Override
+            public Weighting createWeighting(HintsMap hintsMap, FlagEncoder encoder, Graph graph) {
+                if (hintsMap.getWeighting().equals("td")) {
+                    return new TDCarWeighting(encoder, speedCalculator, hintsMap);
+                } else {
+                    return super.createWeighting(hintsMap, encoder, graph);
+                }
+            }
+        }.forServer();
         graphHopper.setFlagEncoderFactory(new FlagEncoderFactory() {
             private FlagEncoderFactory delegate = new DefaultFlagEncoderFactory();
             @Override
             public FlagEncoder createFlagEncoder(String name, PMap configuration) {
                 if (name.equals("car")) {
-                    return new OriginalDirectionFlagEncoder();
+                    return originalDirectionFlagEncoder;
                 }
                 return delegate.createFlagEncoder(name, configuration);
             }
@@ -71,7 +87,7 @@ public void start() {
                 + ", " + graphHopper.getGraphHopperStorage().toDetailsString());
     }
 
-    GraphHopper getGraphHopper() {
+    public GraphHopper getGraphHopper() {
         return graphHopper;
     }
 
diff --git a/web/src/test/java/com/graphhopper/swl/TDNetworkIT.java b/web/src/test/java/com/graphhopper/swl/TDNetworkIT.java
index 62d6fd1e1a..1882f26454 100644
--- a/web/src/test/java/com/graphhopper/swl/TDNetworkIT.java
+++ b/web/src/test/java/com/graphhopper/swl/TDNetworkIT.java
@@ -20,12 +20,14 @@
 import com.graphhopper.GHRequest;
 import com.graphhopper.GHResponse;
 import com.graphhopper.GraphHopper;
+import com.graphhopper.http.GraphHopperManaged;
 import com.graphhopper.reader.osm.GraphHopperOSM;
 import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.routing.util.HintsMap;
 import com.graphhopper.routing.weighting.Weighting;
 import com.graphhopper.storage.Graph;
+import com.graphhopper.util.CmdArgs;
 import com.graphhopper.util.details.PathDetail;
 import org.junit.Before;
 import org.junit.Test;
@@ -41,25 +43,13 @@
     @Before
     public void setUp() {
         String graphFile = "files/swl-andorra-r5-export";
-        OriginalDirectionFlagEncoder originalDirectionFlagEncoder = new OriginalDirectionFlagEncoder();
-        EncodingManager encodingManager = new EncodingManager(originalDirectionFlagEncoder);
-        FileTravelTimeCalculator speedCalculator = new FileTravelTimeCalculator(originalDirectionFlagEncoder,"files/r5_predicted_tt.csv");
-        graphHopper = new GraphHopperOSM() {
-            @Override
-            public Weighting createWeighting(HintsMap hintsMap, FlagEncoder encoder, Graph graph) {
-                if (hintsMap.getWeighting().equals("td")) {
-                    return new TDCarWeighting(encoder, speedCalculator, hintsMap);
-                } else {
-                    return super.createWeighting(hintsMap, encoder, graph);
-                }
-            }
-        }.setStoreOnFlush(true).
-                setEncodingManager(encodingManager).
-                setWayPointMaxDistance(0).
-                setGraphHopperLocation(graphFile);
-        graphHopper.setPathDetailsBuilderFactory(new PathDetailsBuilderFactoryWithR5EdgeId(graphHopper));
-        graphHopper.importOrLoad();
-        graphHopper.getCHFactoryDecorator().setDisablingAllowed(true);
+        CmdArgs configuration = new CmdArgs();
+        configuration.put("r5.link_speed_file", "files/r5_predicted_tt.csv");
+        configuration.put("graph.location", graphFile);
+        configuration.put("routing.ch.disabling_allowed", true);
+        GraphHopperManaged graphHopperService = new GraphHopperManaged(configuration);
+        graphHopperService.start();
+        this.graphHopper = graphHopperService.getGraphHopper();
     }
 
     @Test
