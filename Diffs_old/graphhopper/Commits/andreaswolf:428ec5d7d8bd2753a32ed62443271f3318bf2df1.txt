diff --git a/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java b/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
index 78512d49b1..6c3d8fca4a 100644
--- a/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
+++ b/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
@@ -133,9 +133,9 @@ void writePath( HttpServletRequest httpReq, HttpServletResponse res ) throws Exc
             writeResponse(res, createGPXString(httpReq, res, ghRsp));
         } else
         {
-            JsonWriter writer = new JsonWriter(hopper);
-            Map<String, Object> map = writer.createJson(ghRsp,
-                    calcPoints, pointsEncoded, enableElevation, enableInstructions);
+            JsonWriter writer = new JsonWriter(hopper, calcPoints, pointsEncoded, enableElevation, enableInstructions);
+            Map<String, Object> map = writer.createJson(ghRsp);
+
             Object infoMap = map.get("info");
             if (infoMap != null)
                 ((Map) infoMap).put("took", Math.round(took * 1000));
diff --git a/web/src/main/java/com/graphhopper/http/JsonWriter.java b/web/src/main/java/com/graphhopper/http/JsonWriter.java
index 7915683175..d2d9d000af 100644
--- a/web/src/main/java/com/graphhopper/http/JsonWriter.java
+++ b/web/src/main/java/com/graphhopper/http/JsonWriter.java
@@ -14,16 +14,29 @@
 
     protected GraphHopper hopper;
 
-    public JsonWriter(GraphHopper hopper)
+    protected boolean calcPoints;
+
+    protected boolean encodePoints;
+
+    protected boolean includeElevation;
+
+    protected boolean enableInstructions;
+
+    public JsonWriter(GraphHopper hopper, boolean calcPoints, boolean encodePoints, boolean includeElevation,
+                      boolean enableInstructions)
     {
         this.hopper = hopper;
+        this.calcPoints = calcPoints;
+        this.encodePoints = encodePoints;
+        this.includeElevation = includeElevation;
+        this.enableInstructions = enableInstructions;
+    }
+
+    public JsonWriter(GraphHopper hopper) {
+        this(hopper, true, false, true, true);
     }
 
-    public Map<String, Object> createJson(GHResponse rsp,
-                                          boolean calcPoints,
-                                          boolean pointsEncoded,
-                                          boolean includeElevation,
-                                          boolean enableInstructions)
+    public Map<String, Object> createJson(GHResponse rsp)
     {
         Map<String, Object> json = new HashMap<String, Object>();
         Map<String, Object> jsonInfo = new HashMap<String, Object>();
@@ -50,7 +63,7 @@ public JsonWriter(GraphHopper hopper)
 
             if (calcPoints)
             {
-                jsonPath.put("points_encoded", pointsEncoded);
+                jsonPath.put("points_encoded", encodePoints);
 
                 PointList points = rsp.getPoints();
                 if (points.getSize() >= 2)
@@ -60,7 +73,7 @@ public JsonWriter(GraphHopper hopper)
                     jsonPath.put("bbox", rsp.calcRouteBBox(maxBounds2D).toGeoJson());
                 }
 
-                jsonPath.put("points", createPoints(points, pointsEncoded, includeElevation));
+                jsonPath.put("points", createPoints(points));
 
                 if (enableInstructions)
                 {
@@ -73,9 +86,9 @@ public JsonWriter(GraphHopper hopper)
         return json;
     }
 
-    protected Object createPoints(PointList points, boolean pointsEncoded, boolean includeElevation)
+    protected Object createPoints(PointList points)
     {
-        if (pointsEncoded)
+        if (encodePoints)
             return WebHelper.encodePolyline(points, includeElevation);
 
         Map<String, Object> jsonPoints = new HashMap<String, Object>();
