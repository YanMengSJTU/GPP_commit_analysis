diff --git a/client-hc/src/main/java/com/graphhopper/api/GraphHopperWeb.java b/client-hc/src/main/java/com/graphhopper/api/GraphHopperWeb.java
index b8ca744ade..e0c5ede780 100644
--- a/client-hc/src/main/java/com/graphhopper/api/GraphHopperWeb.java
+++ b/client-hc/src/main/java/com/graphhopper/api/GraphHopperWeb.java
@@ -104,9 +104,9 @@ public OkHttpClient getDownloader() {
     }
 
     PathWrapper createPathWrapper(JsonNode path,
-                                          boolean tmpCalcPoints, boolean tmpInstructions,
-                                          boolean tmpElevation, boolean turnDescription,
-                                          boolean tmpCalcDetails) {
+                                  boolean tmpCalcPoints, boolean tmpInstructions,
+                                  boolean tmpElevation, boolean turnDescription,
+                                  boolean tmpCalcDetails) {
         PathWrapper pathWrapper = new PathWrapper();
         pathWrapper.addErrors(readErrors(path));
         if (pathWrapper.hasErrors())
@@ -118,6 +118,28 @@ PathWrapper createPathWrapper(JsonNode path,
             pathWrapper.setWaypoints(snappedPoints);
         }
 
+        if (path.has("ascend")) {
+            pathWrapper.setAscend(path.get("ascend").asDouble());
+        }
+        if (path.has("descend")) {
+            pathWrapper.setDescend(path.get("descend").asDouble());
+        }
+        if (path.has("weight")) {
+            pathWrapper.setRouteWeight(path.get("weight").asDouble());
+        }
+        if (path.has("description")) {
+            JsonNode descriptionNode = path.get("description");
+            if (descriptionNode.isArray()) {
+                List<String> description = new ArrayList<>(descriptionNode.size());
+                for (JsonNode descNode: descriptionNode) {
+                    description.add(descNode.asText());
+                }
+                pathWrapper.setDescription(description);
+            } else {
+                throw new IllegalStateException("Description has to be an array");
+            }
+        }
+
         if (tmpCalcPoints) {
             String pointStr = path.get("points").asText();
             PointList pointList = WebHelper.decodePolyline(pointStr, 100, tmpElevation);
@@ -176,8 +198,8 @@ PathWrapper createPathWrapper(JsonNode path,
                         instr = new FinishInstruction(text, instPL, 0);
                     } else {
                         instr = new Instruction(sign, text, ia, instPL);
-                        if(sign == Instruction.CONTINUE_ON_STREET){
-                            if(jsonObj.has("heading")){
+                        if (sign == Instruction.CONTINUE_ON_STREET) {
+                            if (jsonObj.has("heading")) {
                                 instr.setExtraInfo("heading", jsonObj.get("heading").asDouble());
                             }
                         }
diff --git a/client-hc/src/test/java/com/graphhopper/api/GraphHopperWebIT.java b/client-hc/src/test/java/com/graphhopper/api/GraphHopperWebIT.java
index dc3eef9fba..27364604cf 100644
--- a/client-hc/src/test/java/com/graphhopper/api/GraphHopperWebIT.java
+++ b/client-hc/src/test/java/com/graphhopper/api/GraphHopperWebIT.java
@@ -52,6 +52,10 @@ public void testSimpleRoute() {
         PathWrapper alt = res.getBest();
         isBetween(200, 250, alt.getPoints().size());
         isBetween(11000, 12000, alt.getDistance());
+        isBetween(310, 320, alt.getAscend());
+        isBetween(235, 245, alt.getDescend());
+        isBetween(1000, 1500, alt.getRouteWeight());
+
 
         // change vehicle
         res = gh.route(new GHRequest(49.6724, 11.3494, 49.6550, 11.4180).
@@ -61,6 +65,32 @@ public void testSimpleRoute() {
         isBetween(9000, 9500, alt.getDistance());
     }
 
+    @Test
+    public void testAlternativeRoute() {
+        // https://graphhopper.com/maps/?point=52.044124%2C10.378346&point=52.043847%2C10.381994&algorithm=alternative_route&ch.disable=true
+        GHRequest req = new GHRequest().
+                addPoint(new GHPoint(52.044124,10.378346)).
+                addPoint(new GHPoint(52.043847,10.381994));
+        req.setAlgorithm("alternative_route");
+        req.getHints().put("instructions", true);
+        req.getHints().put("calc_points", true);
+        req.getHints().put("ch.disable", true);
+        GHResponse res = gh.route(req);
+        assertFalse("errors:" + res.getErrors().toString(), res.hasErrors());
+        List<PathWrapper> paths = res.getAll();
+        assertEquals(2, paths.size());
+
+        PathWrapper path = paths.get(0);
+        isBetween(5, 20, path.getPoints().size());
+        isBetween(400, 500, path.getDistance());
+        assertEquals("Wiesenstra√üe", path.getDescription().get(0));
+
+        path = paths.get(1);
+        isBetween(3, 15, path.getPoints().size());
+        isBetween(350, 450, path.getDistance());
+        assertEquals("Schlopweg", path.getDescription().get(0));
+    }
+
     @Test
     public void testTimeout() {
         GHRequest req = new GHRequest().
