diff --git a/client-hc/src/main/java/com/graphhopper/api/GHMatrixBatchRequester.java b/client-hc/src/main/java/com/graphhopper/api/GHMatrixBatchRequester.java
index a8f1e524e3..9a39b7cc31 100644
--- a/client-hc/src/main/java/com/graphhopper/api/GHMatrixBatchRequester.java
+++ b/client-hc/src/main/java/com/graphhopper/api/GHMatrixBatchRequester.java
@@ -75,14 +75,13 @@ public MatrixResponse route(GHMRequest ghRequest) {
         requestJson.put("vehicle", ghRequest.getVehicle());
         requestJson.put("elevation", hasElevation);
 
-        ObjectNode hintsObject = requestJson.putObject("hints");
         Map<String, String> hintsMap = ghRequest.getHints().toMap();
         for (String hintKey : hintsMap.keySet()) {
             if (ignoreSet.contains(hintKey))
                 continue;
 
             String hint = hintsMap.get(hintKey);
-            hintsObject.put(hintKey, hint);
+            requestJson.put(hintKey, hint);
         }
 
         boolean withTimes = outArraysList.contains("times");
diff --git a/client-hc/src/test/java/com/graphhopper/api/GraphHopperWebIT.java b/client-hc/src/test/java/com/graphhopper/api/GraphHopperWebIT.java
index 0b2814cd5b..2724370451 100644
--- a/client-hc/src/test/java/com/graphhopper/api/GraphHopperWebIT.java
+++ b/client-hc/src/test/java/com/graphhopper/api/GraphHopperWebIT.java
@@ -252,6 +252,29 @@ public void testMatrix() {
         assertEquals(1695, res.getWeight(1, 2), 10);
     }
 
+    @Test
+    public void testMatrix_DoNotWrapHints() {
+        final GraphHopperMatrixWeb ghMatrix = new GraphHopperMatrixWeb(new GHMatrixBatchRequester() {
+            @Override
+            protected String postJson(String url, JsonNode data) throws IOException {
+                assertFalse(data.has("hints"));
+                assertTrue(data.has("something"));
+                return super.postJson(url, data);
+            }
+        });
+        ghMatrix.setKey(System.getProperty("graphhopper.key", KEY));
+
+        GHMRequest req = new GHMRequest();
+        req.addPoint(new GHPoint(49.6724, 11.3494));
+        req.addPoint(new GHPoint(49.6550, 11.4180));
+        req.getHints().put("something", "xy");
+        ghMatrix.route(req);
+
+        // clashing parameter will overwrite!
+        req.getHints().put("vehicle", "xy");
+        assertEquals("xy", req.getVehicle());
+    }
+
     @Test
     public void testUnknownInstructionSign() throws IOException {
         // Actual path for the request: point=48.354413%2C8.676335&point=48.35442%2C8.676345
