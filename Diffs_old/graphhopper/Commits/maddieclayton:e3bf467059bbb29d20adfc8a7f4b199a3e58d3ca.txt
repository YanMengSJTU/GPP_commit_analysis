diff --git a/core/src/main/java/com/graphhopper/routing/DijkstraBidirectionRef.java b/core/src/main/java/com/graphhopper/routing/DijkstraBidirectionRef.java
index 1d745806e3..52f325115c 100644
--- a/core/src/main/java/com/graphhopper/routing/DijkstraBidirectionRef.java
+++ b/core/src/main/java/com/graphhopper/routing/DijkstraBidirectionRef.java
@@ -20,8 +20,13 @@
 import gnu.trove.map.TIntObjectMap;
 import gnu.trove.map.hash.TIntObjectHashMap;
 
+import java.util.HashMap;
 import java.util.PriorityQueue;
 
+import com.graphhopper.routing.safety.ColorMapParser;
+import com.graphhopper.routing.safety.NodeInformation;
+import com.graphhopper.routing.safety.OSMParser;
+import com.graphhopper.routing.safety.Way;
 import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.routing.util.TraversalMode;
 import com.graphhopper.routing.util.Weighting;
@@ -198,8 +203,21 @@ void fillEdges( SPTEntry currEdge, PriorityQueue<SPTEntry> prioQueue,
         {
             if (!accept(iter, currEdge.edge))
                 continue;
-
+            
             int traversalId = traversalMode.createTraversalId(iter, reverse);
+            
+            HashMap<Long, NodeInformation> nodeMap = new HashMap<Long, NodeInformation>();
+            HashMap<Long, Way> wayMap = new HashMap<Long, Way>();
+            HashMap<Long, HashMap<Long, Integer>> scores = new HashMap<Long, HashMap<Long, Integer>>();
+            double maxLong = -74.65986;
+            double minLat = 40.34993;
+            double minLong = -74.66236;
+            double maxLat = 40.35111;
+            OSMParser.parseFile(minLong, minLat, maxLong, maxLat, nodeMap, wayMap);
+            ColorMapParser.parseFile(nodeMap, wayMap, scores);
+            int safetyWeight = ColorMapParser.getSafetyWeight((long) iter.getAdjNode(),
+                    (long) currEdge.adjNode, scores);
+
             double tmpWeight = weighting.calcWeight(iter, reverse, currEdge.edge) + currEdge.weight;
             if (Double.isInfinite(tmpWeight))
                 continue;
