diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetHopper.java b/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetHopper.java
index 809ca81397..414d5f9c7e 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetHopper.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetHopper.java
@@ -2,10 +2,14 @@
 
 import com.graphhopper.GraphHopper;
 import com.graphhopper.marmoset.util.CellGraph;
+import com.graphhopper.marmoset.util.ExpectedWeighting;
 import com.graphhopper.marmoset.util.Location;
-import com.graphhopper.marmoset.vehicle.DijkstraVehicle;
 import com.graphhopper.marmoset.vehicle.RandomVehicle;
+import com.graphhopper.marmoset.vehicle.SelfDrivingVehicle;
 import com.graphhopper.marmoset.vehicle.Vehicle;
+import com.graphhopper.routing.util.FlagEncoder;
+import com.graphhopper.routing.util.Weighting;
+import com.graphhopper.routing.util.WeightingMap;
 import com.graphhopper.util.CmdArgs;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -23,7 +27,7 @@
  */
 public class MarmosetHopper {
 
-    protected GraphHopper hopper;
+    protected MarmosetGraphHopper hopper;
     protected CellGraph cellGraph;
     protected List<Vehicle> vehicles;
 
@@ -35,7 +39,7 @@
     private static Logger logger = LoggerFactory.getLogger(MarmosetHopper.class);
 
     public MarmosetHopper() {
-        hopper = new GraphHopper();
+        hopper = new MarmosetGraphHopper();
         vehicles = new ArrayList<>();
     }
 
@@ -53,7 +57,7 @@ public void init()
             return;
         }
 
-        args.put("osmreader.osm", "british-isles-latest.osm.pbf");
+        args.put("osmreader.osm", "london.osm.pbf");
 
         hopper.init(args);
         hopper.importOrLoad();
@@ -72,7 +76,7 @@ public synchronized void addVehicle()
         if (rand.nextDouble() < randPercent)
             v = new RandomVehicle(this, Location.randLondon(), Location.randCentralLondon());
         else
-            v = new DijkstraVehicle(this, Location.randLondon(), Location.randCentralLondon());
+            v = new SelfDrivingVehicle(this, Location.randLondon(), Location.randCentralLondon());
         v.init();
         if (v.isFinished())
             addVehicle();
@@ -198,4 +202,26 @@ public String getDescription()
                     averageCells, notAtMax);
         }
     }
+
+    public class MarmosetGraphHopper extends GraphHopper {
+
+        public ExpectedWeighting expectedWeighting;
+
+        @Override
+        public Weighting createWeighting(WeightingMap wMap, FlagEncoder encoder)
+        {
+            if ("expected".equalsIgnoreCase(wMap.getWeighting()))
+            {
+                if (expectedWeighting == null)
+                {
+                    int maxId = this.getGraphHopperStorage().getAllEdges().getMaxId();
+                    expectedWeighting = new ExpectedWeighting(encoder, wMap, vehicles, maxId);
+                }
+
+                return expectedWeighting;
+            }
+            return super.createWeighting(wMap, encoder);
+        }
+
+    }
 }
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/util/ExpectedWeighting.java b/marmoset/src/main/java/com/graphhopper/marmoset/util/ExpectedWeighting.java
new file mode 100644
index 0000000000..a4ecca3173
--- /dev/null
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/util/ExpectedWeighting.java
@@ -0,0 +1,53 @@
+package com.graphhopper.marmoset.util;
+
+import com.graphhopper.marmoset.vehicle.SelfDrivingVehicle;
+import com.graphhopper.marmoset.vehicle.Vehicle;
+import com.graphhopper.routing.util.FastestWeighting;
+import com.graphhopper.routing.util.FlagEncoder;
+import com.graphhopper.util.EdgeIteratorState;
+import com.graphhopper.util.PMap;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.util.List;
+
+/**
+ * Created by alexander on 20/04/2016.
+ */
+public class ExpectedWeighting extends FastestWeighting {
+
+    protected final List<Vehicle> vehicles;
+    protected final double DAMPING_FACTOR = 0.6;
+    protected double[] expectedRoutes;
+
+    private static final Logger logger = LoggerFactory.getLogger(ExpectedWeighting.class);
+
+    public ExpectedWeighting(FlagEncoder encoder, PMap pMap, List<Vehicle> vehicles, int maxId)
+    {
+        super(encoder, pMap);
+        this.vehicles = vehicles;
+        expectedRoutes = new double[maxId];
+        logger.info("Created new expected weighting");
+    }
+
+    @Override
+    public double calcWeight(EdgeIteratorState edge, boolean reverse, int prevOrNextEdge)
+    {
+        double weight = super.calcWeight(edge, reverse, prevOrNextEdge);
+
+
+        return weight;
+    }
+
+    public void updateExpectedMap()
+    {
+        for (int i = 0; i < expectedRoutes.length; i++)
+        {
+            expectedRoutes[i] *= DAMPING_FACTOR;
+        }
+
+        vehicles.stream().map(v -> ((SelfDrivingVehicle) v).getCurrentPath())
+                .forEach(edges -> edges.forEach(edge -> expectedRoutes[edge.getEdge()]++));
+
+    }
+}
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/SelfDrivingVehicle.java b/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/SelfDrivingVehicle.java
new file mode 100644
index 0000000000..cd786435f2
--- /dev/null
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/SelfDrivingVehicle.java
@@ -0,0 +1,67 @@
+package com.graphhopper.marmoset.vehicle;
+
+import com.graphhopper.GHRequest;
+import com.graphhopper.GHResponse;
+import com.graphhopper.GraphHopper;
+import com.graphhopper.marmoset.MarmosetHopper;
+import com.graphhopper.marmoset.util.Location;
+import com.graphhopper.routing.Path;
+import com.graphhopper.routing.util.FlagEncoder;
+import com.graphhopper.util.EdgeIteratorState;
+
+import java.util.List;
+import java.util.stream.Collectors;
+
+/**
+ * Created by alexander on 20/04/2016.
+ */
+public class SelfDrivingVehicle extends BaseVehicle {
+
+    public SelfDrivingVehicle(MarmosetHopper hopper, Location start, Location dest)
+    {
+        super(hopper, start, dest);
+    }
+
+    private List<EdgeIteratorState> edgeList;
+
+    @Override
+    public VehicleIterator getVehicleIterator()
+    {
+        GraphHopper gh = hopper.getGraphHopper();
+
+        GHRequest ghRequest = new GHRequest(loc.getLat(), loc.getLon(), dest.getLat(), dest.getLon());
+        ghRequest.setWeighting("expected");
+        ghRequest.setAlgorithm("astarbi");
+        GHResponse ghResponse = new GHResponse();
+        List<Path> paths = gh.calcPaths(ghRequest, ghResponse);
+
+        if (ghResponse.hasErrors())
+        {
+            finish("Routing failed (id "+id+"):" + ghResponse.getErrors().stream().map(Throwable::toString).collect(Collectors.joining("\n")));
+            return null;
+        }
+
+        if (paths.size() == 0)
+        {
+            finish("No path found");
+            return null;
+        }
+
+        Path p = paths.get(0);
+        edgeList = p.calcEdges();
+
+        if (edgeList.size() <= 1)
+        {
+            finish("Edge list too short");
+            return null;
+        }
+
+        FlagEncoder carEncoder = gh.getEncodingManager().getEncoder("car");
+        return new SelfDrivingVehicleIterator(edgeList, carEncoder);
+    }
+
+    public List<EdgeIteratorState> getCurrentPath()
+    {
+        return edgeList;
+    }
+}
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/SelfDrivingVehicleIterator.java b/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/SelfDrivingVehicleIterator.java
new file mode 100644
index 0000000000..f8c4d5cb31
--- /dev/null
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/SelfDrivingVehicleIterator.java
@@ -0,0 +1,22 @@
+package com.graphhopper.marmoset.vehicle;
+
+import com.graphhopper.routing.util.FlagEncoder;
+import com.graphhopper.util.EdgeIteratorState;
+
+import java.util.List;
+
+/**
+ * Created by alexander on 20/04/2016.
+ */
+public class SelfDrivingVehicleIterator extends DijkstraVehicleIterator {
+    public SelfDrivingVehicleIterator(List<EdgeIteratorState> edges, FlagEncoder encoder)
+    {
+        super(edges, encoder);
+    }
+
+    public void resetEdges(List<EdgeIteratorState> edgeList)
+    {
+        this.edges = edgeList;
+    }
+
+}
