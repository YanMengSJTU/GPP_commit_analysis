diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 8f75929734..7dc60d34db 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -1,10 +1,10 @@
-Submit a new issue only if you are sure it is a missing feature or a bug. Otherwise [discuss the topic](http://graphhopper.com/#developers) first. 
-For new translations or fixes to existing translations
+Submit a new issue only if you are sure it is a missing feature or a bug. Otherwise, [discuss the topic](http://graphhopper.com/#developers) first. 
+For new translations or fixes to existing translations,
 please refer to [this documentation](https://github.com/graphhopper/graphhopper/blob/master/docs/core/translations.md).
 
 Issues for newcomers are tagged with 
 ['good first issue'](https://github.com/graphhopper/graphhopper/labels/good%20first%20issue) 
-and documentation issues are taged with 
+and documentation issues are tagged with 
 ['documentation'](https://github.com/graphhopper/graphhopper/labels/documentation).
 
 ## We love pull requests. Here's a quick guide:
diff --git a/CONTRIBUTORS.md b/CONTRIBUTORS.md
index 95af121777..0fb595da9c 100644
--- a/CONTRIBUTORS.md
+++ b/CONTRIBUTORS.md
@@ -4,21 +4,23 @@
  * andreaswolf, flag encoder versioning and more
  * agouge, discussion and API refactoring
  * b3nn0, Android improvements
- * boldtrn, motorcycle improvements
+ * boldtrn, motorcycle and improvements like conditional tag parsing etc
  * cgarreau, increase of routing success rate via subnetwork cleanup
- * ChristianSeitzer motorcycle improvements
+ * ChristianSeitzer, motorcycle improvements
  * daisy1754, fixed usage of graphhopper.sh script
  * dardin88, instructions improved
  * dewos, web API bug fixes
- * devemux86, improvements regarding Android and GPX
+ * devemux86, improvements regarding Android, GPX and more
+ * elibar, fix for alternative route calculation
  * dos65, bug fixes in routing algo
  * drnextgis, ru translation and JS fixes
  * duongnt, fixes in storage
  * lmar, improved instructions information
+ * fbonzon, UI improvements like #615
  * florent-morel, improvements regarding fords, #320
  * fredao, translations 
  * HarelM, improvements regarding elevation
- * HelgeKrueger, modularize javascript, #590
+ * HelgeKrueger, modularization of javascript, #590
  * henningvs, doc improvements
  * jansoe, many improvements regarding A* algorithm, forcing direction, roundabouts etc
  * jansonhanson, general host config
@@ -32,8 +34,9 @@
  * rajanski, script to do routing via PostGIS
  * rodneyodonnell, improved dead end removal and fords
  * rodo, more descriptions
- * seeebiii motorcycle improvements
+ * seeebiii motorcycle improvements 
  * Svantulden, improved documentation and nearest API
+ * thehereward, code cleanups like #620
  * vvikas, ideas for many to many improvements
 
 # Translations
diff --git a/NOTICE.md b/NOTICE.md
index 0a6ba1f912..ce602f8b90 100644
--- a/NOTICE.md
+++ b/NOTICE.md
@@ -1,6 +1,6 @@
 GraphHopper licensed under the Apache license, Version 2.0
 
-Copyright 2012-2015 Peter Karich
+Copyright 2012-2016 Peter Karich
 
 The core product includes the following software
  * slf4j.org - SLF4J distributed under the MIT license. 
diff --git a/README.md b/README.md
index 3372d2e06c..8703f92428 100644
--- a/README.md
+++ b/README.md
@@ -51,4 +51,31 @@ Features
  * Highly customizable
  * Works on the desktop, as a web service and offline on Android or iOS
  * Large test suite
- * [... more](http://graphhopper.com/#overview)
+
+## Overview
+
+GraphHopper supports several algorithms like Dijkstra and A* and its bidirectional variants. 
+Furthermore it allows you to use Contraction Hierarchies (CH) very easily, we call this 
+**speed mode** and in contrast to the speed mode we call everything without CH the
+**flexibility mode**. BTW: This does not mean that the flexibility mode is *slow*.
+
+The speed mode comes with much faster and lightweight (less RAM) responses and it does not use heuristics.
+The downsides are that the speed mode allows only a pre-defined vehicle profile and requires a time 
+consuming and resource intense preparation. And implementing certain features are not possible or 
+very complex compared to the flexibility mode. But since 0.4 you can use both modes at the same time since. 
+See [here](https://github.com/graphhopper/graphhopper/pull/631) for more details.
+
+Here is a list of the more detailed features including a link to the documentation:
+
+ * [a web API](./docs/web/api-doc.md) including JavaScript and Java clients
+ * turn instructions in more than 30 languages, contribute or improve [here](./docs/core/translations.md)
+ * [including elevation](./docs/core/elevation.md) (per default disabled)
+ * [real time changes to edge weights](https://graphhopper.com/blog/2015/04/08/visualize-and-handle-traffic-information-with-graphhopper-in-real-time-for-cologne-germany-koln/) (flexibility only)
+ * Customized routing profiles per request (flexibility only)
+ * A '[heading](./docs/core/routing.md)' for start, end and via points for navigation applications via pass_through or favoredHeading parameters (flexibility only)
+ * [alternative routes](https://discuss.graphhopper.com/t/alternative-routes/424) (flexibility only)
+ * [conditional access restrictions](https://github.com/graphhopper/graphhopper/pull/621)
+ * [turn costs and restrictions](https://github.com/graphhopper/graphhopper/pull/55#issuecomment-31089096) (flexibility only)
+ * multiple profiles and weightings (flexibility and speed mode since 0.5)
+ * several pre-built routing profiles: car, bike, racingbike, mountain bike, foot, motorcycle
+ * [map matching](https://github.com/graphhopper/map-matching) (flexibility only)
\ No newline at end of file
diff --git a/android/app/build.gradle b/android/app/build.gradle
index 02c4ef2252..b98fc068b3 100644
--- a/android/app/build.gradle
+++ b/android/app/build.gradle
@@ -35,7 +35,7 @@ configurations.all {
  **/
 
 dependencies {
-    compile(group: 'com.graphhopper', name: 'graphhopper', version: '0.6-SNAPSHOT') {
+    compile(group: 'com.graphhopper', name: 'graphhopper', version: '0.7-SNAPSHOT') {
        exclude group: 'com.google.protobuf', module: 'protobuf-java'
        exclude group: 'org.openstreetmap.osmosis', module: 'osmosis-osm-binary'
        exclude group: 'org.apache.xmlgraphics', module: 'xmlgraphics-commons'
diff --git a/android/app/pom.xml b/android/app/pom.xml
index 60c6802754..3bb2c70660 100644
--- a/android/app/pom.xml
+++ b/android/app/pom.xml
@@ -4,7 +4,7 @@
     <modelVersion>4.0.0</modelVersion>
     <groupId>com.graphhopper</groupId>
     <artifactId>graphhopper-android</artifactId>
-    <version>0.6-SNAPSHOT</version>
+    <version>0.7-SNAPSHOT</version>
     <name>GraphHopper Android</name>
     <packaging>apk</packaging>    
     <organization>
@@ -16,7 +16,7 @@
         <relativePath>../..</relativePath>
         <groupId>com.graphhopper</groupId>
         <artifactId>graphhopper-parent</artifactId>    	
-        <version>0.6-SNAPSHOT</version>
+        <version>0.7-SNAPSHOT</version>
     </parent>
     <properties>
         <mapsforge.version>0.6.0</mapsforge.version>
diff --git a/android/app/src/main/java/com/graphhopper/android/MainActivity.java b/android/app/src/main/java/com/graphhopper/android/MainActivity.java
index 83389ff859..afdc193f46 100644
--- a/android/app/src/main/java/com/graphhopper/android/MainActivity.java
+++ b/android/app/src/main/java/com/graphhopper/android/MainActivity.java
@@ -23,7 +23,7 @@
 import android.widget.Spinner;
 import android.widget.TextView;
 import android.widget.Toast;
-import com.graphhopper.AltResponse;
+import com.graphhopper.PathWrapper;
 
 import com.graphhopper.GHRequest;
 import com.graphhopper.GHResponse;
@@ -462,7 +462,7 @@ private void finishPrepare()
         prepareInProgress = false;
     }
 
-    private Polyline createPolyline( AltResponse response )
+    private Polyline createPolyline( PathWrapper response )
     {
         Paint paintStroke = AndroidGraphicFactory.INSTANCE.createPaint();
         paintStroke.setStyle(Style.STROKE);
@@ -496,11 +496,11 @@ public void calcPath( final double fromLat, final double fromLon,
     {
 
         log("calculating path ...");
-        new AsyncTask<Void, Void, AltResponse>()
+        new AsyncTask<Void, Void, PathWrapper>()
         {
             float time;
 
-            protected AltResponse doInBackground( Void... v )
+            protected PathWrapper doInBackground( Void... v )
             {
                 StopWatch sw = new StopWatch().start();
                 GHRequest req = new GHRequest(fromLat, fromLon, toLat, toLon).
@@ -509,10 +509,10 @@ protected AltResponse doInBackground( Void... v )
                         put("instructions", "false");
                 GHResponse resp = hopper.route(req);
                 time = sw.stop().getSeconds();
-                return resp.getFirst();
+                return resp.getBest();
             }
 
-            protected void onPostExecute( AltResponse resp )
+            protected void onPostExecute( PathWrapper resp )
             {
                 if (!resp.hasErrors())
                 {
diff --git a/core/files/changelog.txt b/core/files/changelog.txt
index 2ae291bc88..cd032f0754 100644
--- a/core/files/changelog.txt
+++ b/core/files/changelog.txt
@@ -1,6 +1,6 @@
 0.6
     removed methods deprecated in 0.4 and 0.5
-    renamed EdgeEntry to SPTEntry
+    renamed EdgeEntry to SPTEntry and AStar.AStarEdge to AStar.AStarEntry
     parameter force removed from AbstractFlagEncoder.applyMaxSpeed
     GHResponse now wraps multiple AltResponse; renames GraphHopper.getPaths to calcPaths as 'get' sounds too cheap; a new method RoutingAlgorithm.calcPaths is added; see #596
     moving lgpl licensed file into own submodule graphhopper-tools-lgpl
diff --git a/core/pom.xml b/core/pom.xml
index 34c78835ac..75d75949c4 100644
--- a/core/pom.xml
+++ b/core/pom.xml
@@ -6,7 +6,7 @@
     <groupId>com.graphhopper</groupId>
     <artifactId>graphhopper</artifactId>
     <name>GraphHopper</name>
-    <version>0.6-SNAPSHOT</version>
+    <version>0.7-SNAPSHOT</version>
     <packaging>jar</packaging> 
     <description>
         GraphHopper is a fast and memory efficient Java road routing engine 
@@ -15,7 +15,7 @@
     <parent>
         <groupId>com.graphhopper</groupId>
         <artifactId>graphhopper-parent</artifactId>    	
-        <version>0.6-SNAPSHOT</version>
+        <version>0.7-SNAPSHOT</version>
     </parent>
         
     <properties>
diff --git a/core/src/main/java/com/graphhopper/GHResponse.java b/core/src/main/java/com/graphhopper/GHResponse.java
index 8df5bce36a..f4b623c80e 100644
--- a/core/src/main/java/com/graphhopper/GHResponse.java
+++ b/core/src/main/java/com/graphhopper/GHResponse.java
@@ -23,7 +23,7 @@
 import java.util.List;
 
 /**
- * Wrapper to simplify output of GraphHopper.
+ * Wrapper containing path and error output of GraphHopper.
  * <p>
  * @author Peter Karich
  */
@@ -32,36 +32,42 @@
     private String debugInfo = "";
     private final List<Throwable> errors = new ArrayList<Throwable>(4);
     private final PMap hintsMap = new PMap();
-    private final List<AltResponse> alternatives = new ArrayList<AltResponse>(5);
+    private final List<PathWrapper> pathWrappers = new ArrayList<PathWrapper>(5);
 
     public GHResponse()
     {
     }
 
-    public void addAlternative( AltResponse altResponse )
+    public void add( PathWrapper altResponse )
     {
-        alternatives.add(altResponse);
+        pathWrappers.add(altResponse);
     }
 
     /**
-     * Returns the first response.
+     * Returns the best path.
      */
-    public AltResponse getFirst()
+    public PathWrapper getBest()
     {
-        if (alternatives.isEmpty())
-            throw new RuntimeException("Cannot fetch first alternative if list is empty");
+        if (pathWrappers.isEmpty())
+            throw new RuntimeException("Cannot fetch best response if list is empty");
 
-        return alternatives.get(0);
+        return pathWrappers.get(0);
     }
 
-    public List<AltResponse> getAlternatives()
+    /**
+     * This method returns the best path as well as all alternatives.
+     */
+    public List<PathWrapper> getAll()
     {
-        return alternatives;
+        return pathWrappers;
     }
 
+    /**
+     * This method returns true if there are alternative paths available besides the best.
+     */
     public boolean hasAlternatives()
     {
-        return !alternatives.isEmpty();
+        return pathWrappers.size() > 1;
     }
 
     public void addDebugInfo( String debugInfo )
@@ -78,7 +84,7 @@ public void addDebugInfo( String debugInfo )
     public String getDebugInfo()
     {
         String str = debugInfo;
-        for (AltResponse ar : alternatives)
+        for (PathWrapper ar : pathWrappers)
         {
             if (!str.isEmpty())
                 str += "; ";
@@ -89,27 +95,15 @@ public String getDebugInfo()
     }
 
     /**
-     * This method returns true only if the response itself is errornous.
-     * <p/>
-     * @see #hasErrors()
-     */
-    public boolean hasRawErrors()
-    {
-        return !errors.isEmpty();
-    }
-
-    /**
-     * This method returns true if no alternative is available, if one of these has an error or if
-     * the response itself is errornous.
-     * <p/>
-     * @see #hasRawErrors()
+     * This method returns true if one of the paths has an error or if the response itself is
+     * errornous.
      */
     public boolean hasErrors()
     {
-        if (hasRawErrors() || alternatives.isEmpty())
+        if (!errors.isEmpty())
             return true;
 
-        for (AltResponse ar : alternatives)
+        for (PathWrapper ar : pathWrappers)
         {
             if (ar.hasErrors())
                 return true;
@@ -119,19 +113,16 @@ public boolean hasErrors()
     }
 
     /**
-     * This method returns all the explicitely added errors and the errors of all alternatives.
+     * This method returns all the explicitely added errors and the errors of all paths.
      */
     public List<Throwable> getErrors()
     {
         List<Throwable> list = new ArrayList<Throwable>();
         list.addAll(errors);
-        if (alternatives.isEmpty())
-            list.add(new IllegalStateException("No alternative existent"));
-        else
-            for (AltResponse ar : alternatives)
-            {
-                list.addAll(ar.getErrors());
-            }
+        for (PathWrapper ar : pathWrappers)
+        {
+            list.addAll(ar.getErrors());
+        }
         return list;
     }
 
@@ -151,13 +142,13 @@ public GHResponse addError( Throwable error )
     public String toString()
     {
         String str = "";
-        for (AltResponse a : alternatives)
+        for (PathWrapper a : pathWrappers)
         {
             str += "; " + a.toString();
         }
 
-        if (alternatives.isEmpty())
-            str = "no alternatives";
+        if (pathWrappers.isEmpty())
+            str = "no paths";
 
         if (!errors.isEmpty())
             str += ", main errors: " + errors.toString();
diff --git a/core/src/main/java/com/graphhopper/GraphHopper.java b/core/src/main/java/com/graphhopper/GraphHopper.java
index 894aaff95d..ec67ee68bc 100644
--- a/core/src/main/java/com/graphhopper/GraphHopper.java
+++ b/core/src/main/java/com/graphhopper/GraphHopper.java
@@ -1069,7 +1069,7 @@ public GHResponse route( GHRequest request )
         StopWatch sw = new StopWatch().start();
         List<QueryResult> qResults = lookup(points, encoder, ghRsp);
         ghRsp.addDebugInfo("idLookup:" + sw.stop().getSeconds() + "s");
-        if (ghRsp.hasRawErrors())
+        if (ghRsp.hasErrors())
             return Collections.emptyList();
 
         Weighting weighting;
@@ -1116,8 +1116,8 @@ public GHResponse route( GHRequest request )
         Translation tr = trMap.getWithFallBack(locale);
 
         // Every alternative path makes one AltResponse BUT if via points exists then reuse the altResponse object
-        AltResponse altResponse = new AltResponse();
-        ghRsp.addAlternative(altResponse);
+        PathWrapper altResponse = new PathWrapper();
+        ghRsp.add(altResponse);
         boolean isRoundTrip = AlgorithmOptions.ROUND_TRIP_ALT.equalsIgnoreCase(algoOpts.getAlgorithm());
         boolean isAlternativeRoute = AlgorithmOptions.ALT_ROUTE.equalsIgnoreCase(algoOpts.getAlgorithm());
 
@@ -1187,14 +1187,14 @@ public GHResponse route( GHRequest request )
             pathMerger.doWork(altResponse, Collections.singletonList(altPaths.get(0)), tr);
             for (int index = 1; index < altPaths.size(); index++)
             {
-                altResponse = new AltResponse();
-                ghRsp.addAlternative(altResponse);
+                altResponse = new PathWrapper();
+                ghRsp.add(altResponse);
                 pathMerger.doWork(altResponse, Collections.singletonList(altPaths.get(index)), tr);
             }
         } else if (isRoundTrip)
         {
             if (points.size() != altPaths.size())
-                throw new RuntimeException("There should be exactly one more points than paths. points:" + points.size() + ", paths:" + altPaths.size());
+                throw new RuntimeException("There should be the same number of points as paths. points:" + points.size() + ", paths:" + altPaths.size());
 
             pathMerger.doWork(altResponse, altPaths, tr);
         } else
@@ -1294,7 +1294,7 @@ public void run()
                             ghStorage.getProperties().put("prepare.date." + name, Helper.createFormatter().format(new Date()));
                         } catch (Exception ex)
                         {
-                            logger.error("Problem while CH preparation " + name);
+                            logger.error("Problem while CH preparation " + name, ex);
                             ghStorage.getProperties().put(errorKey, ex.getMessage());
                         }
                     }
diff --git a/core/src/main/java/com/graphhopper/AltResponse.java b/core/src/main/java/com/graphhopper/PathWrapper.java
similarity index 90%
rename from core/src/main/java/com/graphhopper/AltResponse.java
rename to core/src/main/java/com/graphhopper/PathWrapper.java
index 74df2874b9..43b4114881 100644
--- a/core/src/main/java/com/graphhopper/AltResponse.java
+++ b/core/src/main/java/com/graphhopper/PathWrapper.java
@@ -25,11 +25,11 @@
 import java.util.List;
 
 /**
- * This class holds one possibility of a route
- * <p/>
+ * This class holds the data like points and instructions of a Path.
+ * <p>
  * @author Peter Karich
  */
-public class AltResponse
+public class PathWrapper
 {
     private List<String> description;
     private double distance;
@@ -53,13 +53,13 @@
         return description;
     }
 
-    public AltResponse setDescription( List<String> names )
+    public PathWrapper setDescription( List<String> names )
     {
         this.description = names;
         return this;
     }
 
-    public AltResponse addDebugInfo( String debugInfo )
+    public PathWrapper addDebugInfo( String debugInfo )
     {
         if (debugInfo == null)
             throw new IllegalStateException("Debug information has to be none null");
@@ -76,7 +76,7 @@ public String getDebugInfo()
         return debugInfo;
     }
 
-    public AltResponse setPoints( PointList points )
+    public PathWrapper setPoints( PointList points )
     {
         list = points;
         return this;
@@ -93,7 +93,7 @@ public PointList getPoints()
         return list;
     }
 
-    public AltResponse setDistance( double distance )
+    public PathWrapper setDistance( double distance )
     {
         this.distance = distance;
         return this;
@@ -111,7 +111,7 @@ public double getDistance()
         return distance;
     }
 
-    public AltResponse setAscend( double ascend )
+    public PathWrapper setAscend( double ascend )
     {
         if (ascend < 0)
             throw new IllegalArgumentException("ascend has to be strictly positive");
@@ -130,7 +130,7 @@ public double getAscend()
         return ascend;
     }
 
-    public AltResponse setDescend( double descend )
+    public PathWrapper setDescend( double descend )
     {
         if (descend < 0)
             throw new IllegalArgumentException("descend has to be strictly positive");
@@ -149,7 +149,7 @@ public double getDescend()
         return descend;
     }
 
-    public AltResponse setTime( long timeInMillis )
+    public PathWrapper setTime( long timeInMillis )
     {
         this.time = timeInMillis;
         return this;
@@ -164,7 +164,7 @@ public long getTime()
         return time;
     }
 
-    public AltResponse setRouteWeight( double weight )
+    public PathWrapper setRouteWeight( double weight )
     {
         this.routeWeight = weight;
         return this;
@@ -257,13 +257,13 @@ public boolean hasErrors()
         return errors;
     }
 
-    public AltResponse addError( Throwable error )
+    public PathWrapper addError( Throwable error )
     {
         errors.add(error);
         return this;
     }
 
-    public AltResponse addErrors( List<Throwable> errors )
+    public PathWrapper addErrors( List<Throwable> errors )
     {
         this.errors.addAll(errors);
         return this;
diff --git a/core/src/main/java/com/graphhopper/reader/osm/conditional/ConditionalParser.java b/core/src/main/java/com/graphhopper/reader/osm/conditional/ConditionalParser.java
index 67f518b51b..a2c6724c30 100644
--- a/core/src/main/java/com/graphhopper/reader/osm/conditional/ConditionalParser.java
+++ b/core/src/main/java/com/graphhopper/reader/osm/conditional/ConditionalParser.java
@@ -31,9 +31,8 @@
  */
 public class ConditionalParser
 {
-
-    private final Set<String> restrictedTags;
     private static final Logger logger = LoggerFactory.getLogger(ConditionalParser.class);
+    private final Set<String> restrictedTags;
     private final boolean enabledLogs;
 
     public ConditionalParser( Set<String> restrictedTags )
@@ -49,7 +48,6 @@ public ConditionalParser( Set<String> restrictedTags, boolean enabledLogs )
 
     public DateRange getDateRange( String conditionalTag ) throws ParseException
     {
-
         if (conditionalTag == null || conditionalTag.isEmpty() || !conditionalTag.contains("@"))
             return null;
 
diff --git a/core/src/main/java/com/graphhopper/reader/osm/ConditionalTagsInspector.java b/core/src/main/java/com/graphhopper/reader/osm/conditional/ConditionalTagsInspector.java
similarity index 79%
rename from core/src/main/java/com/graphhopper/reader/osm/ConditionalTagsInspector.java
rename to core/src/main/java/com/graphhopper/reader/osm/conditional/ConditionalTagsInspector.java
index 4c12a4bbbd..50576a63bd 100644
--- a/core/src/main/java/com/graphhopper/reader/osm/ConditionalTagsInspector.java
+++ b/core/src/main/java/com/graphhopper/reader/osm/conditional/ConditionalTagsInspector.java
@@ -15,11 +15,10 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package com.graphhopper.reader.osm;
+package com.graphhopper.reader.osm.conditional;
 
 import com.graphhopper.reader.OSMWay;
-import com.graphhopper.reader.osm.conditional.ConditionalParser;
-import com.graphhopper.reader.osm.conditional.DateRange;
+import java.util.ArrayList;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -34,7 +33,6 @@
  */
 public class ConditionalTagsInspector
 {
-
     private static final Logger logger = LoggerFactory.getLogger(ConditionalTagsInspector.class);
 
     private final Calendar calendar;
@@ -48,16 +46,20 @@
      */
     public ConditionalTagsInspector( List<String> tagsToCheck, Set<String> restrictiveValues, Set<String> permittedValues )
     {
-        this(Calendar.getInstance(), tagsToCheck, restrictiveValues, permittedValues);
+        this(DateRangeParser.createCalendar(), tagsToCheck, restrictiveValues, permittedValues);
     }
 
     /**
      * Create with given date
      */
-    public ConditionalTagsInspector( Calendar date, List<String> tagsToCheck, Set<String> restrictiveValues, Set<String> permittedValues )
+    public ConditionalTagsInspector( Calendar cal, List<String> tagsToCheck, Set<String> restrictiveValues, Set<String> permittedValues )
     {
-        this.calendar = date;
-        this.tagsToCheck = tagsToCheck;
+        this.calendar = cal;
+        this.tagsToCheck = new ArrayList(tagsToCheck.size());
+        for (String tagToCheck : tagsToCheck)
+        {
+            this.tagsToCheck.add(tagToCheck + ":conditional");
+        }
         this.restrictiveParser = new ConditionalParser(restrictiveValues, enabledLogs);
         this.permitParser = new ConditionalParser(permittedValues, enabledLogs);
     }
@@ -74,9 +76,9 @@ public boolean isPermittedWayConditionallyRestricted( OSMWay way )
 
     protected boolean applies( OSMWay way, boolean checkPermissiveValues )
     {
-        for (String tagToCheck : tagsToCheck)
+        for (int index = 0; index < tagsToCheck.size(); index++)
         {
-            tagToCheck = tagToCheck + ":conditional";
+            String tagToCheck = tagsToCheck.get(index);
             String val = way.getTag(tagToCheck);
             if (val != null && !val.isEmpty())
             {
@@ -93,7 +95,7 @@ protected boolean applies( OSMWay way, boolean checkPermissiveValues )
                 } catch (Exception e)
                 {
                     if (enabledLogs)
-                        logger.warn("Could not parse the conditional value:" + val + " of tag:" + tagToCheck + ". Exception:" + e.getMessage());
+                        logger.warn(way.getId() + " - could not parse the conditional value:" + val + " of tag:" + tagToCheck + ". Exception:" + e.getMessage());
                 }
             }
         }
diff --git a/core/src/main/java/com/graphhopper/reader/osm/conditional/DateRange.java b/core/src/main/java/com/graphhopper/reader/osm/conditional/DateRange.java
index 028462b7fa..7094d2e3a5 100644
--- a/core/src/main/java/com/graphhopper/reader/osm/conditional/DateRange.java
+++ b/core/src/main/java/com/graphhopper/reader/osm/conditional/DateRange.java
@@ -1,6 +1,24 @@
+/*
+ *  Licensed to GraphHopper and Peter Karich under one or more contributor
+ *  license agreements. See the NOTICE file distributed with this work for
+ *  additional information regarding copyright ownership.
+ *
+ *  GraphHopper licenses this file to you under the Apache License,
+ *  Version 2.0 (the "License"); you may not use this file except in
+ *  compliance with the License. You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
 package com.graphhopper.reader.osm.conditional;
 
-import java.text.SimpleDateFormat;
+import com.graphhopper.util.Helper;
+import java.text.DateFormat;
 import java.util.Calendar;
 
 /**
@@ -10,8 +28,8 @@
  */
 public class DateRange
 {
-    private Calendar from;
-    private Calendar to;
+    private final Calendar from;
+    private final Calendar to;
 
     // Do not compare years
     boolean yearless = false;
@@ -42,7 +60,7 @@ public DateRange( ParsedCalendar from, ParsedCalendar to )
             dayOnly = true;
         }
 
-        if (fromCal.after(toCal))
+        if (fromCal.getTimeInMillis() > toCal.getTimeInMillis())
         {
             if (!yearless && !dayOnly)
             {
@@ -64,12 +82,13 @@ public boolean isInRange( Calendar date )
 
         if (dayOnly)
         {
+            int currentDayOfWeek = date.get(Calendar.DAY_OF_WEEK);
             if (reverse)
             {
-                return (from.get(Calendar.DAY_OF_WEEK) <= date.get(Calendar.DAY_OF_WEEK) || date.get(Calendar.DAY_OF_WEEK) <= to.get(Calendar.DAY_OF_WEEK));
+                return (from.get(Calendar.DAY_OF_WEEK) <= currentDayOfWeek || currentDayOfWeek <= to.get(Calendar.DAY_OF_WEEK));
             } else
             {
-                return (from.get(Calendar.DAY_OF_WEEK) <= date.get(Calendar.DAY_OF_WEEK) && date.get(Calendar.DAY_OF_WEEK) <= to.get(Calendar.DAY_OF_WEEK));
+                return (from.get(Calendar.DAY_OF_WEEK) <= currentDayOfWeek && currentDayOfWeek <= to.get(Calendar.DAY_OF_WEEK));
             }
         }
 
@@ -140,7 +159,7 @@ private boolean isInRangeYearlessReverse( Calendar date )
     @Override
     public String toString()
     {
-        SimpleDateFormat f = new SimpleDateFormat();
+        DateFormat f = Helper.createFormatter();
         return "yearless:" + yearless + ", dayOnly:" + dayOnly + ", reverse:" + reverse
                 + ", from:" + f.format(from.getTime()) + ", to:" + f.format(to.getTime());
     }
diff --git a/core/src/main/java/com/graphhopper/reader/osm/conditional/DateRangeParser.java b/core/src/main/java/com/graphhopper/reader/osm/conditional/DateRangeParser.java
index d05e9a0cc2..ee8b5f5f9a 100644
--- a/core/src/main/java/com/graphhopper/reader/osm/conditional/DateRangeParser.java
+++ b/core/src/main/java/com/graphhopper/reader/osm/conditional/DateRangeParser.java
@@ -17,37 +17,44 @@
  */
 package com.graphhopper.reader.osm.conditional;
 
+import com.graphhopper.util.Helper;
+import static com.graphhopper.util.Helper.createFormatter;
+import java.text.DateFormat;
 import java.text.ParseException;
-import java.text.SimpleDateFormat;
-import java.util.Arrays;
-import java.util.Calendar;
-import java.util.List;
+import java.util.*;
 
 /**
- * Parses a DateRange. Currently only DateRanges that last at least one day are supported. The
- * Syntax is allowed inputs is described here: http://wiki.openstreetmap.org/wiki/Key:opening_hours.
+ * Parses a DateRange from OpenStreetMap. Currently only DateRanges that last at least one day are
+ * supported. The Syntax is allowed inputs is described here:
+ * http://wiki.openstreetmap.org/wiki/Key:opening_hours.
  * <p>
  * @author Robin Boldt
  */
 public class DateRangeParser
 {
-    static SimpleDateFormat yearMonthDayFormat = new SimpleDateFormat("yyyy MMM dd");
-    static SimpleDateFormat monthDayFormat = new SimpleDateFormat("MMM dd");
-    static SimpleDateFormat monthDay2Format = new SimpleDateFormat("dd.MM");
-    static SimpleDateFormat yearMonthFormat = new SimpleDateFormat("yyyy MMM");
-    static SimpleDateFormat monthFormat = new SimpleDateFormat("MMM");
-    static SimpleDateFormat dayFormat = new SimpleDateFormat("E");
-    static List<String> dayNames = Arrays.asList(new String[]
+    private static final DateFormat yearMonthDayFormat = createFormatter("yyyy MMM dd");
+    private static final DateFormat monthDayFormat = createFormatter("MMM dd");
+    private static final DateFormat monthDay2Format = createFormatter("dd.MM");
+    private static final DateFormat yearMonthFormat = createFormatter("yyyy MMM");
+    private static final DateFormat monthFormat = createFormatter("MMM");
+    private static final List<String> dayNames = Arrays.asList(new String[]
     {
         "Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"
     });
 
+    static Calendar createCalendar()
+    {
+        // Use locale US as exception here (instead of UK) to match week order "Su-Sa" used in Calendar for day_of_week.
+        // Inconsistent but we should not use US for other date handling stuff like strange default formatting, related to #647.
+        return Calendar.getInstance(Helper.UTC, Locale.US);
+    }
+
     public static ParsedCalendar parseDateString( String dateString ) throws ParseException
     {
         // Replace occurences of public holidays
         dateString = dateString.replaceAll("(,( )*)?(PH|SH)", "");
         dateString = dateString.trim();
-        Calendar calendar = Calendar.getInstance();
+        Calendar calendar = createCalendar();
         ParsedCalendar parsedCalendar;
         try
         {
@@ -109,6 +116,8 @@ public static DateRange parseDateRange( String dateRangeString ) throws ParseExc
         if (dateArr.length == 2)
             to = parseDateString(dateArr[1]);
         else
+            // faster and safe?
+            // to = new ParsedCalendar(from.parseType, (Calendar) from.parsedCalendar.clone());
             to = parseDateString(dateArr[0]);
 
         return new DateRange(from, to);
diff --git a/core/src/main/java/com/graphhopper/reader/osm/conditional/ParsedCalendar.java b/core/src/main/java/com/graphhopper/reader/osm/conditional/ParsedCalendar.java
index ea17398ffb..4d4b9c6c7f 100644
--- a/core/src/main/java/com/graphhopper/reader/osm/conditional/ParsedCalendar.java
+++ b/core/src/main/java/com/graphhopper/reader/osm/conditional/ParsedCalendar.java
@@ -17,7 +17,7 @@
  */
 package com.graphhopper.reader.osm.conditional;
 
-import java.text.SimpleDateFormat;
+import com.graphhopper.util.Helper;
 import java.util.Calendar;
 
 /**
@@ -82,7 +82,7 @@ public Calendar getMin()
     @Override
     public String toString()
     {
-        return parseType + "; " + new SimpleDateFormat().format(parsedCalendar.getTime());
+        return parseType + "; " + Helper.createFormatter().format(parsedCalendar.getTime());
     }
 
     public enum ParseType
diff --git a/core/src/main/java/com/graphhopper/reader/pbf/PbfBlobDecoder.java b/core/src/main/java/com/graphhopper/reader/pbf/PbfBlobDecoder.java
index a0a26bb539..75fecd1142 100644
--- a/core/src/main/java/com/graphhopper/reader/pbf/PbfBlobDecoder.java
+++ b/core/src/main/java/com/graphhopper/reader/pbf/PbfBlobDecoder.java
@@ -13,7 +13,6 @@
 import gnu.trove.list.TLongList;
 
 import java.io.IOException;
-import java.text.SimpleDateFormat;
 import java.util.*;
 import java.util.zip.DataFormatException;
 import java.util.zip.Inflater;
diff --git a/core/src/main/java/com/graphhopper/routing/AStar.java b/core/src/main/java/com/graphhopper/routing/AStar.java
index b6022e300b..bad5b815e6 100644
--- a/core/src/main/java/com/graphhopper/routing/AStar.java
+++ b/core/src/main/java/com/graphhopper/routing/AStar.java
@@ -45,9 +45,9 @@
 {
     private WeightApproximator weightApprox;
     private int visitedCount;
-    private TIntObjectMap<AStarEdge> fromMap;
-    private PriorityQueue<AStarEdge> prioQueueOpenSet;
-    private AStarEdge currEdge;
+    private TIntObjectMap<AStarEntry> fromMap;
+    private PriorityQueue<AStarEntry> prioQueueOpenSet;
+    private AStarEntry currEdge;
     private int to1 = -1;
 
     public AStar( Graph g, FlagEncoder encoder, Weighting weighting, TraversalMode tMode )
@@ -70,8 +70,8 @@ public AStar setApproximation( WeightApproximator approx )
 
     protected void initCollections( int size )
     {
-        fromMap = new TIntObjectHashMap<AStarEdge>();
-        prioQueueOpenSet = new PriorityQueue<AStarEdge>(size);
+        fromMap = new TIntObjectHashMap<AStarEntry>();
+        prioQueueOpenSet = new PriorityQueue<AStarEntry>(size);
     }
 
     @Override
@@ -82,7 +82,7 @@ public Path calcPath( int from, int to )
 
         weightApprox.setGoalNode(to);
         double weightToGoal = weightApprox.approximate(from);
-        currEdge = new AStarEdge(EdgeIterator.NO_EDGE, from, 0 + weightToGoal, 0);
+        currEdge = new AStarEntry(EdgeIterator.NO_EDGE, from, 0 + weightToGoal, 0);
         if (!traversalMode.isEdgeBased())
         {
             fromMap.put(from, currEdge);
@@ -117,14 +117,14 @@ private Path runAlgo()
                 if (Double.isInfinite(alreadyVisitedWeight))
                     continue;
 
-                AStarEdge ase = fromMap.get(traversalId);
+                AStarEntry ase = fromMap.get(traversalId);
                 if (ase == null || ase.weightOfVisitedPath > alreadyVisitedWeight)
                 {
                     currWeightToGoal = weightApprox.approximate(neighborNode);
                     estimationFullWeight = alreadyVisitedWeight + currWeightToGoal;
                     if (ase == null)
                     {
-                        ase = new AStarEdge(iter.getEdge(), neighborNode, estimationFullWeight, alreadyVisitedWeight);
+                        ase = new AStarEntry(iter.getEdge(), neighborNode, estimationFullWeight, alreadyVisitedWeight);
                         fromMap.put(traversalId, ase);
                     } else
                     {
@@ -185,16 +185,20 @@ protected boolean isWeightLimitExceeded()
         return currEdge.weight > weightLimit;
     }
 
-    public static class AStarEdge extends SPTEntry
+    public static class AStarEntry extends SPTEntry
     {
-        // the variable 'weight' is used to let heap select smallest *full* distance.
-        // but to compare distance we need it only from start:
         double weightOfVisitedPath;
 
-        public AStarEdge( int edgeId, int adjNode, double weightForHeap, double weightOfVisitedPath )
+        public AStarEntry( int edgeId, int adjNode, double weightForHeap, double weightOfVisitedPath )
         {
             super(edgeId, adjNode, weightForHeap);
-            this.weightOfVisitedPath = (float) weightOfVisitedPath;
+            this.weightOfVisitedPath = weightOfVisitedPath;
+        }
+
+        @Override
+        public final double getWeightOfVisitedPath()
+        {
+            return weightOfVisitedPath;
         }
     }
 
diff --git a/core/src/main/java/com/graphhopper/routing/AStarBidirection.java b/core/src/main/java/com/graphhopper/routing/AStarBidirection.java
index 28868d8a6c..3ea8b7c250 100644
--- a/core/src/main/java/com/graphhopper/routing/AStarBidirection.java
+++ b/core/src/main/java/com/graphhopper/routing/AStarBidirection.java
@@ -23,7 +23,7 @@
 
 import java.util.PriorityQueue;
 
-import com.graphhopper.routing.AStar.AStarEdge;
+import com.graphhopper.routing.AStar.AStarEntry;
 import com.graphhopper.storage.SPTEntry;
 import com.graphhopper.storage.Graph;
 import com.graphhopper.util.*;
@@ -56,13 +56,13 @@
 public class AStarBidirection extends AbstractBidirAlgo
 {
     private ConsistentWeightApproximator weightApprox;
-    private PriorityQueue<AStarEdge> prioQueueOpenSetFrom;
-    private TIntObjectMap<AStarEdge> bestWeightMapFrom;
-    private PriorityQueue<AStarEdge> prioQueueOpenSetTo;
-    private TIntObjectMap<AStarEdge> bestWeightMapTo;
-    private TIntObjectMap<AStarEdge> bestWeightMapOther;
-    protected AStarEdge currFrom;
-    protected AStarEdge currTo;
+    private PriorityQueue<AStarEntry> prioQueueOpenSetFrom;
+    protected TIntObjectMap<AStarEntry> bestWeightMapFrom;
+    private PriorityQueue<AStarEntry> prioQueueOpenSetTo;
+    protected TIntObjectMap<AStarEntry> bestWeightMapTo;
+    private TIntObjectMap<AStarEntry> bestWeightMapOther;
+    protected AStarEntry currFrom;
+    protected AStarEntry currTo;
     protected PathBidirRef bestPath;
 
     public AStarBidirection( Graph graph, FlagEncoder encoder, Weighting weighting, TraversalMode tMode )
@@ -77,11 +77,11 @@ public AStarBidirection( Graph graph, FlagEncoder encoder, Weighting weighting,
 
     protected void initCollections( int size )
     {
-        prioQueueOpenSetFrom = new PriorityQueue<AStarEdge>(size / 10);
-        bestWeightMapFrom = new TIntObjectHashMap<AStarEdge>(size / 10);
+        prioQueueOpenSetFrom = new PriorityQueue<AStarEntry>(size / 10);
+        bestWeightMapFrom = new TIntObjectHashMap<AStarEntry>(size / 10);
 
-        prioQueueOpenSetTo = new PriorityQueue<AStarEdge>(size / 10);
-        bestWeightMapTo = new TIntObjectHashMap<AStarEdge>(size / 10);
+        prioQueueOpenSetTo = new PriorityQueue<AStarEntry>(size / 10);
+        bestWeightMapTo = new TIntObjectHashMap<AStarEntry>(size / 10);
     }
 
     /**
@@ -102,7 +102,7 @@ protected SPTEntry createEdgeEntry( int node, double weight )
     @Override
     public void initFrom( int from, double weight )
     {
-        currFrom = new AStarEdge(EdgeIterator.NO_EDGE, from, weight, weight);
+        currFrom = new AStarEntry(EdgeIterator.NO_EDGE, from, weight, weight);
         weightApprox.setSourceNode(from);
         prioQueueOpenSetFrom.add(currFrom);
 
@@ -136,7 +136,7 @@ public void initFrom( int from, double weight )
     @Override
     public void initTo( int to, double weight )
     {
-        currTo = new AStarEdge(EdgeIterator.NO_EDGE, to, weight, weight);
+        currTo = new AStarEntry(EdgeIterator.NO_EDGE, to, weight, weight);
         weightApprox.setGoalNode(to);
         prioQueueOpenSetTo.add(currTo);
 
@@ -201,6 +201,7 @@ protected boolean finished()
         if (finishedFrom || finishedTo)
             return true;
 
+        // using 'weight' is important and correct here e.g. approximation can get negative and smaller than 'weightOfVisitedPath'
         return currFrom.weight + currTo.weight >= bestPath.getWeight();
     }
 
@@ -236,8 +237,8 @@ boolean fillEdgesTo()
         return true;
     }
 
-    private void fillEdges( AStarEdge currEdge, PriorityQueue<AStarEdge> prioQueueOpenSet,
-                            TIntObjectMap<AStarEdge> bestWeightMap, EdgeExplorer explorer, boolean reverse )
+    private void fillEdges( AStarEntry currEdge, PriorityQueue<AStarEntry> prioQueueOpenSet,
+                            TIntObjectMap<AStarEntry> bestWeightMap, EdgeExplorer explorer, boolean reverse )
     {
 
         int currNode = currEdge.adjNode;
@@ -252,24 +253,24 @@ private void fillEdges( AStarEdge currEdge, PriorityQueue<AStarEdge> prioQueueOp
             // TODO performance: check if the node is already existent in the opposite direction
             // then we could avoid the approximation as we already know the exact complete path!
             double alreadyVisitedWeight = weighting.calcWeight(iter, reverse, currEdge.edge)
-                    + currEdge.weightOfVisitedPath;
+                    + currEdge.getWeightOfVisitedPath();
             if (Double.isInfinite(alreadyVisitedWeight))
                 continue;
 
-            AStarEdge ase = bestWeightMap.get(traversalId);
-            if (ase == null || ase.weightOfVisitedPath > alreadyVisitedWeight)
+            AStarEntry ase = bestWeightMap.get(traversalId);
+            if (ase == null || ase.getWeightOfVisitedPath() > alreadyVisitedWeight)
             {
                 double currWeightToGoal = weightApprox.approximate(neighborNode, reverse);
                 double estimationFullWeight = alreadyVisitedWeight + currWeightToGoal;
                 if (ase == null)
                 {
-                    ase = new AStarEdge(iter.getEdge(), neighborNode, estimationFullWeight, alreadyVisitedWeight);
+                    ase = new AStarEntry(iter.getEdge(), neighborNode, estimationFullWeight, alreadyVisitedWeight);
                     bestWeightMap.put(traversalId, ase);
                 } else
                 {
                     assert (ase.weight > 0.999999 * estimationFullWeight) : "Inconsistent distance estimate "
-                                + ase.weight + " vs " + estimationFullWeight + " (" + ase.weight / estimationFullWeight + "), and:"
-                                + ase.weightOfVisitedPath + " vs " + alreadyVisitedWeight + " (" + ase.weightOfVisitedPath / alreadyVisitedWeight + ")";
+                            + ase.weight + " vs " + estimationFullWeight + " (" + ase.weight / estimationFullWeight + "), and:"
+                            + ase.getWeightOfVisitedPath() + " vs " + alreadyVisitedWeight + " (" + ase.getWeightOfVisitedPath() / alreadyVisitedWeight + ")";
                     prioQueueOpenSet.remove(ase);
                     ase.edge = iter.getEdge();
                     ase.weight = estimationFullWeight;
@@ -283,9 +284,9 @@ private void fillEdges( AStarEdge currEdge, PriorityQueue<AStarEdge> prioQueueOp
         }
     }
 
-    public void updateBestPath( EdgeIteratorState edgeState, AStarEdge entryCurrent, int currLoc )
+    public void updateBestPath( EdgeIteratorState edgeState, AStarEntry entryCurrent, int currLoc )
     {
-        AStarEdge entryOther = bestWeightMapOther.get(currLoc);
+        AStarEntry entryOther = bestWeightMapOther.get(currLoc);
         if (entryOther == null)
             return;
 
@@ -300,7 +301,7 @@ public void updateBestPath( EdgeIteratorState edgeState, AStarEdge entryCurrent,
             // see DijkstraBidirectionRef
             if (entryOther.adjNode != entryCurrent.adjNode)
             {
-                entryCurrent = (AStar.AStarEdge) entryCurrent.parent;
+                entryCurrent = (AStar.AStarEntry) entryCurrent.parent;
                 newWeight -= weighting.calcWeight(edgeState, reverse, EdgeIterator.NO_EDGE);
             } else
             {
diff --git a/core/src/main/java/com/graphhopper/routing/AlternativeRoute.java b/core/src/main/java/com/graphhopper/routing/AlternativeRoute.java
index d580edf772..b04d05881b 100644
--- a/core/src/main/java/com/graphhopper/routing/AlternativeRoute.java
+++ b/core/src/main/java/com/graphhopper/routing/AlternativeRoute.java
@@ -17,8 +17,8 @@
  */
 package com.graphhopper.routing;
 
+import com.graphhopper.routing.AStar.AStarEntry;
 import static com.graphhopper.routing.AlgorithmOptions.ALT_ROUTE;
-import com.graphhopper.routing.util.EdgeFilter;
 import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.routing.util.TraversalMode;
 import com.graphhopper.routing.util.Weighting;
@@ -27,6 +27,7 @@
 import com.graphhopper.util.EdgeIterator;
 import com.graphhopper.util.EdgeIteratorState;
 import com.graphhopper.util.GHUtility;
+import gnu.trove.map.TIntObjectMap;
 import gnu.trove.map.hash.TIntObjectHashMap;
 
 import java.util.ArrayList;
@@ -71,7 +72,8 @@
     private int visitedNodes;
     private double maxWeightFactor = 1.4;
     // the higher the maxWeightFactor the higher the explorationFactor needs to be
-    private double maxExplorationFactor = 1;
+    // 1 is default for bidir Dijkstra, 0.8 seems to be a very similar value for bidir A* but roughly 1/2 of the nodes explored
+    private double maxExplorationFactor = 0.8;
 
     private double maxShareFactor = 0.6;
     private double minPlateauFactor = 0.2;
@@ -147,14 +149,14 @@ public void setMaxPaths( int maxPaths )
      */
     public List<AlternativeInfo> calcAlternatives( int from, int to )
     {
-        AltDijkstraBidirectionRef altBidirDijktra = new AltDijkstraBidirectionRef(
+        AlternativeBidirSearch altBidirDijktra = new AlternativeBidirSearch(
                 graph, flagEncoder, weighting, traversalMode, maxExplorationFactor * 2);
         altBidirDijktra.searchBest(from, to);
         altBidirDijktra.setWeightLimit(weightLimit);
         visitedNodes = altBidirDijktra.getVisitedNodes();
 
         List<AlternativeInfo> alternatives = altBidirDijktra.
-                calcAlternatives(maxPaths, maxWeightFactor, 10, maxShareFactor, 0.5, minPlateauFactor, -0.2);
+                calcAlternatives(maxPaths, maxWeightFactor, 7, maxShareFactor, 0.8, minPlateauFactor, -0.2);
         return alternatives;
     }
 
@@ -253,17 +255,50 @@ public String toString()
     /**
      * Helper class to find alternatives and alternatives for round trip.
      */
-    public static class AltDijkstraBidirectionRef extends DijkstraBidirectionRef
+    public static class AlternativeBidirSearch
+            extends AStarBidirection
+    //      extends DijkstraBidirectionRef            
     {
         private final double explorationFactor;
 
-        public AltDijkstraBidirectionRef( Graph graph, FlagEncoder encoder, Weighting weighting, TraversalMode tMode,
-                                          double explorationFactor )
+        public AlternativeBidirSearch( Graph graph, FlagEncoder encoder, Weighting weighting, TraversalMode tMode,
+                                       double explorationFactor )
         {
             super(graph, encoder, weighting, tMode);
             this.explorationFactor = explorationFactor;
         }
 
+        public TIntObjectMap<AStarEntry> getBestWeightMapFrom()
+        {
+            return bestWeightMapFrom;
+        }
+
+        public TIntObjectMap<AStarEntry> getBestWeightMapTo()
+        {
+            return bestWeightMapTo;
+        }
+//        public TIntObjectMap<SPTEntry> getBestWeightMapFrom()
+//        {
+//            return bestWeightMapFrom;
+//        }
+//
+//        public TIntObjectMap<SPTEntry> getBestWeightMapTo()
+//        {
+//            return bestWeightMapTo;
+//        }
+
+        @Override
+        protected double getCurrentFromWeight()
+        {
+            return super.getCurrentFromWeight();
+        }
+
+        @Override
+        protected double getCurrentToWeight()
+        {
+            return super.getCurrentToWeight();
+        }
+
         @Override
         public boolean finished()
         {
@@ -281,8 +316,8 @@ public boolean finished()
 
             // increase overlap of both searches:
             return currFrom.weight + currTo.weight > explorationFactor * bestPath.getWeight();
-            // this is more precise but takes roughly 20% longer:
-            // return currFrom.weight > bestPath.getWeight() && currTo.weight > bestPath.getWeight();
+            // This is more precise but takes roughly 20% longer: return currFrom.weight > bestPath.getWeight() && currTo.weight > bestPath.getWeight();
+            // For bidir A* and AStarEdge.getWeightOfVisitedPath see comment in AStarBidirection.finished
         }
 
         public Path searchBest( int to, int from )
@@ -350,7 +385,7 @@ public boolean execute( final int traversalId, final SPTEntry fromEdgeEntry )
                     }
 
                     // (1) skip too long paths
-                    final double weight = fromEdgeEntry.weight + toEdgeEntry.weight;
+                    final double weight = fromEdgeEntry.getWeightOfVisitedPath() + toEdgeEntry.getWeightOfVisitedPath();
                     if (weight > maxWeight)
                         return true;
 
@@ -412,7 +447,7 @@ public boolean execute( final int traversalId, final SPTEntry fromEdgeEntry )
                             break;
 
                         // plateauEdges.add(prevToEdgeEntry.edge);
-                        plateauWeight += (prevToEdgeEntry.weight - prevToEdgeEntry.parent.weight);
+                        plateauWeight += (prevToEdgeEntry.getWeightOfVisitedPath() - prevToEdgeEntry.parent.getWeightOfVisitedPath());
                         prevToEdgeEntry = prevToEdgeEntry.parent;
                     }
 
@@ -425,11 +460,12 @@ public boolean execute( final int traversalId, final SPTEntry fromEdgeEntry )
                     // (3b) calculate share                    
                     SPTEntry fromEE = getFirstShareEE(fromEdgeEntry.parent, true);
                     SPTEntry toEE = getFirstShareEE(toEdgeEntry.parent, false);
-                    double shareWeight = fromEE.weight + toEE.weight;
+                    double shareWeight = fromEE.getWeightOfVisitedPath() + toEE.getWeightOfVisitedPath();
                     boolean smallShare = shareWeight / bestPath.getWeight() < maxShareFactor;
                     if (smallShare)
                     {
                         List<String> altNames = getAltNames(graph, fromEdgeEntry);
+
                         double sortBy = calcSortBy(weightInfluence, weight, shareInfluence, shareWeight, plateauInfluence, plateauWeight);
                         double worstSortBy = getWorstSortBy();
 
@@ -465,7 +501,7 @@ SPTEntry getFirstShareEE( SPTEntry startEE, boolean reverse )
                 {
                     while (startEE.parent != null)
                     {
-                        // TODO we could make use of traversal ID directly if stored in EdgeEntry
+                        // TODO we could make use of traversal ID directly if stored in SPTEntry
                         int tid = traversalMode.createTraversalId(startEE.adjNode, startEE.parent.adjNode, startEE.edge, reverse);
                         if (isAlreadyExisting(tid))
                             return startEE;
@@ -568,7 +604,7 @@ AtomicInteger addToMap( TIntObjectHashMap<TIntSet> map, Path path )
 
     static List<String> getAltNames( Graph graph, SPTEntry ee )
     {
-        if (ee == null)
+        if (ee == null || !EdgeIterator.Edge.isValid(ee.edge))
             return Collections.emptyList();
 
         EdgeIteratorState iter = graph.getEdgeIteratorState(ee.edge, Integer.MIN_VALUE);
diff --git a/core/src/main/java/com/graphhopper/routing/RoundTripAltAlgorithm.java b/core/src/main/java/com/graphhopper/routing/RoundTripAltAlgorithm.java
index 031d54654f..f95d97998d 100644
--- a/core/src/main/java/com/graphhopper/routing/RoundTripAltAlgorithm.java
+++ b/core/src/main/java/com/graphhopper/routing/RoundTripAltAlgorithm.java
@@ -118,7 +118,7 @@ public double calcWeight( EdgeIteratorState edge, boolean reverse, int prevOrNex
                 return factor * weighting.calcWeight(edge, reverse, prevOrNextEdgeId);
             }
         };
-        AlternativeRoute.AltDijkstraBidirectionRef altBidirDijktra = new AlternativeRoute.AltDijkstraBidirectionRef(graph, flagEncoder,
+        AlternativeRoute.AlternativeBidirSearch altBidirDijktra = new AlternativeRoute.AlternativeBidirSearch(graph, flagEncoder,
                 altWeighting, traversalMode, 1);
         altBidirDijktra.setWeightLimit(weightLimit);
         // find an alternative for backward direction starting from 'to'
diff --git a/core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java
index 0f8beed002..c5519c918b 100644
--- a/core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java
@@ -17,7 +17,7 @@
  */
 package com.graphhopper.routing.util;
 
-import com.graphhopper.reader.osm.ConditionalTagsInspector;
+import com.graphhopper.reader.osm.conditional.ConditionalTagsInspector;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
diff --git a/core/src/main/java/com/graphhopper/routing/util/BikeCommonFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/BikeCommonFlagEncoder.java
index 6ae39e15eb..164de3225d 100644
--- a/core/src/main/java/com/graphhopper/routing/util/BikeCommonFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/BikeCommonFlagEncoder.java
@@ -19,7 +19,7 @@
 
 import com.graphhopper.reader.OSMRelation;
 import com.graphhopper.reader.OSMWay;
-import com.graphhopper.reader.osm.ConditionalTagsInspector;
+import com.graphhopper.reader.osm.conditional.ConditionalTagsInspector;
 import com.graphhopper.util.Helper;
 import com.graphhopper.util.InstructionAnnotation;
 import com.graphhopper.util.Translation;
diff --git a/core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
index eb416d8a4a..6f4ad92d7a 100644
--- a/core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
@@ -19,7 +19,7 @@
 
 import com.graphhopper.reader.OSMRelation;
 import com.graphhopper.reader.OSMWay;
-import com.graphhopper.reader.osm.ConditionalTagsInspector;
+import com.graphhopper.reader.osm.conditional.ConditionalTagsInspector;
 import com.graphhopper.util.Helper;
 import com.graphhopper.util.PMap;
 
diff --git a/core/src/main/java/com/graphhopper/routing/util/FootFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/FootFlagEncoder.java
index dc6ed4cb34..277b7ac18a 100644
--- a/core/src/main/java/com/graphhopper/routing/util/FootFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/FootFlagEncoder.java
@@ -19,7 +19,7 @@
 
 import com.graphhopper.reader.OSMRelation;
 import com.graphhopper.reader.OSMWay;
-import com.graphhopper.reader.osm.ConditionalTagsInspector;
+import com.graphhopper.reader.osm.conditional.ConditionalTagsInspector;
 import com.graphhopper.util.PMap;
 
 import java.util.*;
diff --git a/core/src/main/java/com/graphhopper/routing/util/MotorcycleFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/MotorcycleFlagEncoder.java
index 7f824b537d..411d5faf01 100644
--- a/core/src/main/java/com/graphhopper/routing/util/MotorcycleFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/MotorcycleFlagEncoder.java
@@ -18,7 +18,7 @@
 package com.graphhopper.routing.util;
 
 import com.graphhopper.reader.OSMWay;
-import com.graphhopper.reader.osm.ConditionalTagsInspector;
+import com.graphhopper.reader.osm.conditional.ConditionalTagsInspector;
 import com.graphhopper.util.BitUtil;
 import com.graphhopper.util.EdgeIteratorState;
 import com.graphhopper.util.PMap;
diff --git a/core/src/main/java/com/graphhopper/routing/util/TestAlgoCollector.java b/core/src/main/java/com/graphhopper/routing/util/TestAlgoCollector.java
index 3ed3d112c8..100631316a 100644
--- a/core/src/main/java/com/graphhopper/routing/util/TestAlgoCollector.java
+++ b/core/src/main/java/com/graphhopper/routing/util/TestAlgoCollector.java
@@ -17,7 +17,7 @@
  */
 package com.graphhopper.routing.util;
 
-import com.graphhopper.AltResponse;
+import com.graphhopper.PathWrapper;
 import com.graphhopper.routing.*;
 import com.graphhopper.storage.Graph;
 import com.graphhopper.storage.CHGraph;
@@ -59,8 +59,8 @@ public TestAlgoCollector assertDistance( AlgoHelperEntry algoEntry, List<QueryRe
 
         for (int i = 0; i < queryList.size() - 1; i++)
         {
-            Path path = algoEntry.createAlgo(queryGraph).
-                    calcPath(queryList.get(i).getClosestNode(), queryList.get(i + 1).getClosestNode());
+            RoutingAlgorithm algo = algoEntry.createAlgo(queryGraph);
+            Path path = algo.calcPath(queryList.get(i).getClosestNode(), queryList.get(i + 1).getClosestNode());
             // System.out.println(path.calcInstructions().createGPX("temp", 0, "GMT"));
             altPaths.add(path);
         }
@@ -69,7 +69,7 @@ public TestAlgoCollector assertDistance( AlgoHelperEntry algoEntry, List<QueryRe
                 setCalcPoints(true).
                 setSimplifyResponse(false).
                 setEnableInstructions(true);
-        AltResponse rsp = new AltResponse();
+        PathWrapper rsp = new PathWrapper();
         pathMerger.doWork(rsp, altPaths, trMap.getWithFallBack(Locale.US));
 
         if (rsp.hasErrors())
diff --git a/core/src/main/java/com/graphhopper/storage/EdgeAccess.java b/core/src/main/java/com/graphhopper/storage/EdgeAccess.java
index 74325e0167..c175dfc1cc 100644
--- a/core/src/main/java/com/graphhopper/storage/EdgeAccess.java
+++ b/core/src/main/java/com/graphhopper/storage/EdgeAccess.java
@@ -86,7 +86,8 @@ private int distToInt( double distance )
         if (integ < 0)
             throw new IllegalArgumentException("Distance cannot be negative: " + distance);
         if (integ >= Integer.MAX_VALUE)
-            throw new IllegalArgumentException("Distance too large leading to overflowed integer (#435): " + distance + " ");
+            return Integer.MAX_VALUE;
+            // throw new IllegalArgumentException("Distance too large leading to overflowed integer (#435): " + distance + " ");
         return integ;
     }
 
diff --git a/core/src/main/java/com/graphhopper/storage/SPTEntry.java b/core/src/main/java/com/graphhopper/storage/SPTEntry.java
index 9674babf78..016223a1e6 100644
--- a/core/src/main/java/com/graphhopper/storage/SPTEntry.java
+++ b/core/src/main/java/com/graphhopper/storage/SPTEntry.java
@@ -36,6 +36,16 @@ public SPTEntry( int edgeId, int adjNode, double weight )
         this.weight = weight;
     }
 
+    /**
+     * This method returns the weight to the origin e.g. to the start for the forward SPT and to the
+     * destination for the backward SPT. Where the variable 'weight' is used to let heap select
+     * smallest *full* weight (from start to destination).
+     */
+    public double getWeightOfVisitedPath()
+    {
+        return weight;
+    }
+
     @Override
     public SPTEntry clone()
     {
diff --git a/core/src/main/java/com/graphhopper/util/Helper.java b/core/src/main/java/com/graphhopper/util/Helper.java
index 0243fb985c..9fa88f20bc 100644
--- a/core/src/main/java/com/graphhopper/util/Helper.java
+++ b/core/src/main/java/com/graphhopper/util/Helper.java
@@ -51,6 +51,7 @@
     public static final DistancePlaneProjection DIST_PLANE = new DistancePlaneProjection();
     private static final Logger logger = LoggerFactory.getLogger(Helper.class);
     public static Charset UTF_CS = Charset.forName("UTF-8");
+    public static final TimeZone UTC = TimeZone.getTimeZone("UTC");
     public static final long MB = 1L << 20;
 
     public static ArrayList<Integer> tIntListToArrayList( TIntList from )
@@ -497,7 +498,7 @@ public static final double round4( double value )
     public static final double round2( double value )
     {
         return Math.round(value * 100) / 100d;
-    }
+    }    
 
     /**
      * This creates a date formatter for yyyy-MM-dd'T'HH:mm:ss'Z' which is has to be identical to
@@ -505,8 +506,16 @@ public static final double round2( double value )
      */
     public static DateFormat createFormatter()
     {
-        SimpleDateFormat df = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ss'Z'");
-        df.setTimeZone(TimeZone.getTimeZone("UTC"));
+        return createFormatter("yyyy-MM-dd'T'HH:mm:ss'Z'");
+    }
+
+    /**
+     * Creates a SimpleDateFormat with the UK locale.
+     */
+    public static DateFormat createFormatter( String str )
+    {
+        DateFormat df = new SimpleDateFormat(str, Locale.UK);
+        df.setTimeZone(UTC);
         return df;
     }
 
diff --git a/core/src/main/java/com/graphhopper/util/PathMerger.java b/core/src/main/java/com/graphhopper/util/PathMerger.java
index 4c47536d40..7113105171 100644
--- a/core/src/main/java/com/graphhopper/util/PathMerger.java
+++ b/core/src/main/java/com/graphhopper/util/PathMerger.java
@@ -18,7 +18,7 @@
  */
 package com.graphhopper.util;
 
-import com.graphhopper.AltResponse;
+import com.graphhopper.PathWrapper;
 import com.graphhopper.routing.Path;
 import java.util.ArrayList;
 import java.util.List;
@@ -61,7 +61,7 @@ public PathMerger setEnableInstructions( boolean enableInstructions )
         return this;
     }
 
-    public void doWork( AltResponse altRsp, List<Path> paths, Translation tr )
+    public void doWork( PathWrapper altRsp, List<Path> paths, Translation tr )
     {
         int origPoints = 0;
         long fullTimeInMillis = 0;
@@ -150,7 +150,7 @@ public void doWork( AltResponse altRsp, List<Path> paths, Translation tr )
                 setTime(fullTimeInMillis);
     }
 
-    private void calcAscendDescend( final AltResponse rsp, final PointList pointList )
+    private void calcAscendDescend( final PathWrapper rsp, final PointList pointList )
     {
         double ascendMeters = 0;
         double descendMeters = 0;
diff --git a/core/src/main/resources/com/graphhopper/util/el.txt b/core/src/main/resources/com/graphhopper/util/el.txt
index 84d7c235c6..8dfe36f7f9 100644
--- a/core/src/main/resources/com/graphhopper/util/el.txt
+++ b/core/src/main/resources/com/graphhopper/util/el.txt
@@ -28,7 +28,7 @@ web.truck=Φορτηγό
 web.staticlink=στατική διεύθυνση
 web.motorcycle=Μοτοσυκλέτα
 via=μέσω
-finish=Τέρμα!
+finish=Τέρμα
 hourAbbr=h
 dayAbbr=d
 minAbbr=min
@@ -48,17 +48,17 @@ roundaboutExit=Στον κυκλικό κόμβο βγείτε στην έξοδ
 roundaboutExitOnto=Στον κυκλικό κόμβο βγείτε στην έξοδο %1$s στην %2$s
 totalAscend=%1$s συνολική ανάβαση
 totalDescend=%1$s συνολική κατάβαση
-web.start_label=
-web.intermediate_label=
-web.end_label=
-web.set_start=
-web.set_intermediate=
-web.set_end=
-web.center_map=
-web.show_coords=
-web.route=
-web.delete_from_route=
-web.marker=
-web.gh_offline_info=
-web.refresh_button=
-web.server_status=
+web.start_label=Αφετηρία
+web.intermediate_label=Ενδιάμεσο σημείο
+web.end_label=Προορισμός
+web.set_start=Ορισμός αφετηρίας
+web.set_intermediate=Ορισμός ενδιάμεσου σημείου
+web.set_end=Ορισμός προορισμού
+web.center_map=Κεντράρισμα χάρτη εδώ
+web.show_coords=Εμφάνιση συντεταγμένων
+web.route=Διαδρομή
+web.delete_from_route=Αφαίρεση από διαδρομή
+web.marker=Δείκτης
+web.gh_offline_info=GraphHopper API offline?
+web.refresh_button=Ανανέωση σελίδας
+web.server_status=Κατάσταση
diff --git a/core/src/main/resources/com/graphhopper/util/es.txt b/core/src/main/resources/com/graphhopper/util/es.txt
index 0992d11864..018176c3b3 100644
--- a/core/src/main/resources/com/graphhopper/util/es.txt
+++ b/core/src/main/resources/com/graphhopper/util/es.txt
@@ -1,13 +1,13 @@
 # do not edit manually, instead use spreadsheet https://t.co/f086oJXAEI and script ./core/files/update-translations.sh
 
-continue=continúe
-continue_onto=continúe por %1$s
-turn_left=gire a la izquierda
-turn_right=gire a la derecha
-turn_slight_left=gire leve a la izquierda
-turn_slight_right=gire leve a la derecha
-turn_sharp_left=gire fuerte a la izquierda
-turn_sharp_right=gire fuerte a la derecha
+continue=continúa
+continue_onto=continúa por %1$s
+turn_left=gira a la izquierda
+turn_right=gira a la derecha
+turn_slight_left=gira leve a la izquierda
+turn_slight_right=gira leve a la derecha
+turn_sharp_left=gira fuerte a la izquierda
+turn_sharp_right=gira fuerte a la derecha
 turn_onto=%1$s por %2$s
 web.searchButton=Buscar
 web.fromHint=Desde
@@ -37,28 +37,28 @@ mAbbr=m
 miAbbr=mi
 ftAbbr=ft
 road=carretera
-off_bike=bájese de la bicicleta
+off_bike=bájate de la bicicleta
 cycleway=Ciclovía 
 way=camino
 paved=pavimentado
 unpaved=no pavimentado
 stopover=pasando por %1$s
-roundaboutEnter=Entre en la rotonda
-roundaboutExit=En la rotonda, tome la %1$sª salida
-roundaboutExitOnto=En la rotonda, tome la %1$sª salida hacia %2$s
+roundaboutEnter=Entra en la rotonda
+roundaboutExit=En la rotonda, toma la %1$sª salida
+roundaboutExitOnto=En la rotonda, toma la %1$sª salida hacia %2$s
 totalAscend=Ascender %1$s en total
 totalDescend=Descender %1$s en total
-web.start_label=
-web.intermediate_label=
-web.end_label=
-web.set_start=
-web.set_intermediate=
-web.set_end=
-web.center_map=
-web.show_coords=
-web.route=
-web.delete_from_route=
-web.marker=
-web.gh_offline_info=
-web.refresh_button=
-web.server_status=
+web.start_label=Punto de partida
+web.intermediate_label=Punto intermedio
+web.end_label=Punto de finalización
+web.set_start=Fijar como partida
+web.set_intermediate=Fijar como punto intermedio
+web.set_end=Fijar como finalización
+web.center_map=Centrar mapa aquí
+web.show_coords=Mostrar coordenadas
+web.route=Ruta
+web.delete_from_route=Borrar punto de la ruta
+web.marker=Marcador
+web.gh_offline_info=¿GraphHopper API sin conexión?
+web.refresh_button=Actualizar página
+web.server_status=Estado
diff --git a/core/src/main/resources/com/graphhopper/util/pt_BR.txt b/core/src/main/resources/com/graphhopper/util/pt_BR.txt
index fb6214f492..abcdb44931 100644
--- a/core/src/main/resources/com/graphhopper/util/pt_BR.txt
+++ b/core/src/main/resources/com/graphhopper/util/pt_BR.txt
@@ -8,7 +8,7 @@ turn_slight_left=vire à curva suave à esquerda
 turn_slight_right=vire à curva suave à direita
 turn_sharp_left=vire à curva acentuada à esquerda
 turn_sharp_right=vire à curva acentuada à direita
-turn_onto=%1$s em %2$s
+turn_onto=%1$s na %2$s
 web.searchButton=Pesquisar
 web.fromHint=De
 web.viaHint=Via
@@ -16,19 +16,19 @@ web.toHint=Para
 web.moreButton=mais
 web.gpxExportButton=Exportar GPX
 web.routeInfo=%1$s irá levar %2$s
-web.locationsNotFound=Roteamento impossível. Localização(ões) não encontrada(s) na área.
+web.locationsNotFound=Rota impossível. Localização(ões) não encontrada(s) na área.
 web.bike=Bicicleta
 web.racingbike=Bicicleta de corrida
 web.mtb=Mountainbike
 web.car=Carro
 web.foot=A pé
-web.small_truck=
-web.bus=
-web.truck=
+web.small_truck=Caminhão pequeno
+web.bus=Ônibus
+web.truck=Caminhão
 web.staticlink=Link estático
 web.motorcycle=Motocicleta
 via=via
-finish=Destino alcançado
+finish=Destino alcançado!
 hourAbbr=h
 dayAbbr=d
 minAbbr=min
@@ -46,19 +46,19 @@ stopover=parada %1$s
 roundaboutEnter=Entre na rotatória
 roundaboutExit=Na rotatória, saia na %1$s saída
 roundaboutExitOnto=Na rotatória, saia na %1$s saida em direção a %2$s
-totalAscend=
-totalDescend=
-web.start_label=
-web.intermediate_label=
-web.end_label=
-web.set_start=
-web.set_intermediate=
-web.set_end=
-web.center_map=
-web.show_coords=
-web.route=
-web.delete_from_route=
-web.marker=
-web.gh_offline_info=
-web.refresh_button=
-web.server_status=
+totalAscend=subida de %1$s
+totalDescend=descida de %1$s
+web.start_label=Inicio
+web.intermediate_label=Intermediário
+web.end_label=Fim
+web.set_start=Definir como inicio
+web.set_intermediate=Definir como intermediário
+web.set_end=Definir como fim
+web.center_map=Centralizar mapa aqui
+web.show_coords=Mostrar coordenadas
+web.route=Rota
+web.delete_from_route=Remover da rota
+web.marker=Marca
+web.gh_offline_info=API do GraphHopper offline?
+web.refresh_button=Recarregar página
+web.server_status=Status
diff --git a/core/src/test/java/com/graphhopper/GHResponseTest.java b/core/src/test/java/com/graphhopper/GHResponseTest.java
index 5e9b694ba7..16b2b2f765 100644
--- a/core/src/test/java/com/graphhopper/GHResponseTest.java
+++ b/core/src/test/java/com/graphhopper/GHResponseTest.java
@@ -8,15 +8,15 @@
     @Test
     public void testToString() throws Exception
     {
-        assertEquals("no alternatives", new GHResponse().toString());
+        assertEquals("no paths", new GHResponse().toString());
     }
 
     @Test
-    public void testHasError() throws Exception
+    public void testHasNoErrorIfEmpty() throws Exception
     {
-        assertTrue(new GHResponse().hasErrors());
+        assertFalse(new GHResponse().hasErrors());
         GHResponse rsp = new GHResponse();
-        rsp.addAlternative(new AltResponse());
+        rsp.add(new PathWrapper());
         assertFalse(rsp.hasErrors());
     }
 }
diff --git a/core/src/test/java/com/graphhopper/GraphHopperAPITest.java b/core/src/test/java/com/graphhopper/GraphHopperAPITest.java
index b8be75bef1..e0b15c5d3a 100644
--- a/core/src/test/java/com/graphhopper/GraphHopperAPITest.java
+++ b/core/src/test/java/com/graphhopper/GraphHopperAPITest.java
@@ -55,7 +55,7 @@ public void testLoad()
                 loadGraph(graph);
         GHResponse rsp = instance.route(new GHRequest(42, 10.4, 42, 10));
         assertFalse(rsp.hasErrors());
-        AltResponse arsp = rsp.getFirst();
+        PathWrapper arsp = rsp.getBest();
         assertEquals(80, arsp.getDistance(), 1e-6);
         
         PointList points = arsp.getPoints();
@@ -90,7 +90,7 @@ public void testDisconnected179()
 
         try
         {
-            rsp.getFirst().getPoints();
+            rsp.getBest().getPoints();
             assertTrue(false);
         } catch (Exception ex)
         {
diff --git a/core/src/test/java/com/graphhopper/GraphHopperIT.java b/core/src/test/java/com/graphhopper/GraphHopperIT.java
index 2bd61bd7f2..e3c8e298fa 100644
--- a/core/src/test/java/com/graphhopper/GraphHopperIT.java
+++ b/core/src/test/java/com/graphhopper/GraphHopperIT.java
@@ -89,7 +89,7 @@ public void testMonacoWithInstructions() throws Exception
         // identify the number of counts to compare with CH foot route
         assertEquals(698, rsp.getHints().getLong("visited_nodes.sum", 0));
 
-        AltResponse arsp = rsp.getFirst();
+        PathWrapper arsp = rsp.getBest();
         assertEquals(3437.6, arsp.getDistance(), .1);
         assertEquals(89, arsp.getPoints().getSize());
 
@@ -132,12 +132,60 @@ public void testAlternativeRoutes()
                 setAlgorithm(AlgorithmOptions.ALT_ROUTE).setVehicle(vehicle).setWeighting(weightCalcStr);
 
         GHResponse rsp = hopper.route(req);
-        assertEquals(2, rsp.getAlternatives().size());
+        assertFalse(rsp.hasErrors());
+        assertEquals(2, rsp.getAll().size());
+
+        assertEquals(1310, rsp.getAll().get(0).getTime() / 1000);
+        assertEquals(1356, rsp.getAll().get(1).getTime() / 1000);
 
         req.getHints().put("alternative_route.max_paths", "3");
         req.getHints().put("alternative_route.min_plateau_factor", "0.1");
         rsp = hopper.route(req);
-        assertEquals(3, rsp.getAlternatives().size());
+        assertFalse(rsp.hasErrors());
+        assertEquals(3, rsp.getAll().size());
+
+        assertEquals(1310, rsp.getAll().get(0).getTime() / 1000);
+        assertEquals(1356, rsp.getAll().get(1).getTime() / 1000);
+        assertEquals(1416, rsp.getAll().get(2).getTime() / 1000);
+    }
+
+    @Test
+    public void testAlternativeRoutesBikeAndCar()
+    {
+        GraphHopper tmpHopper = new GraphHopper().
+                setOSMFile("files/north-bayreuth.osm.gz").
+                setCHEnable(false).
+                setGraphHopperLocation(tmpGraphFile).
+                setEncodingManager(new EncodingManager("bike, car"));
+        tmpHopper.importOrLoad();
+
+        GHRequest req = new GHRequest(50.028917, 11.496506, 49.985228, 11.600876).
+                setAlgorithm(AlgorithmOptions.ALT_ROUTE).setVehicle("bike").setWeighting("fastest");
+        req.getHints().put("alternative_route.max_paths", "3");
+        GHResponse rsp = tmpHopper.route(req);
+        assertFalse(rsp.getErrors().toString(), rsp.hasErrors());
+
+        assertEquals(3, rsp.getAll().size());
+        // via ramsenthal
+        assertEquals(2864, rsp.getAll().get(0).getTime() / 1000);
+        // via unterwaiz
+        assertEquals(3320, rsp.getAll().get(1).getTime() / 1000);
+        // via eselslohe -> theta; BTW: here decreasing time as priority influences time order
+        assertEquals(3094, rsp.getAll().get(2).getTime() / 1000);
+
+        req = new GHRequest(50.023513, 11.548862, 49.969441, 11.537876).
+                setAlgorithm(AlgorithmOptions.ALT_ROUTE).setVehicle("car").setWeighting("fastest");
+        req.getHints().put("alternative_route.max_paths", "3");
+        rsp = tmpHopper.route(req);
+        assertFalse(rsp.getErrors().toString(), rsp.hasErrors());
+
+        assertEquals(3, rsp.getAll().size());
+        // directly via obergräfenthal
+        assertEquals(870, rsp.getAll().get(0).getTime() / 1000);
+        // via ramsenthal -> lerchenhof
+        assertEquals(913, rsp.getAll().get(1).getTime() / 1000);
+        // via neudrossenfeld
+        assertEquals(958, rsp.getAll().get(2).getTime() / 1000);
     }
 
     @Test
@@ -149,7 +197,7 @@ public void testMonacoVia()
                 addPoint(new GHPoint(43.727687, 7.418737)).
                 setAlgorithm(AlgorithmOptions.ASTAR).setVehicle(vehicle).setWeighting(weightCalcStr));
 
-        AltResponse arsp = rsp.getFirst();
+        PathWrapper arsp = rsp.getBest();
         assertEquals(6875.1, arsp.getDistance(), .1);
         assertEquals(179, arsp.getPoints().getSize());
 
@@ -191,7 +239,7 @@ public void testMonacoVia()
                 addPoint(new GHPoint(43.727687, 7.418737)).
                 setAlgorithm(AlgorithmOptions.ASTAR).setVehicle(vehicle).setWeighting(weightCalcStr));
 
-        arsp = rsp.getFirst();
+        arsp = rsp.getBest();
         assertEquals(0, arsp.getDistance(), .1);
         assertEquals(0, arsp.getRouteWeight(), .1);
         assertEquals(1, arsp.getPoints().getSize());
@@ -205,7 +253,7 @@ public void testMonacoVia()
                 addPoint(new GHPoint(43.727687, 7.418737)).
                 setAlgorithm(AlgorithmOptions.ASTAR).setVehicle(vehicle).setWeighting(weightCalcStr));
 
-        arsp = rsp.getFirst();
+        arsp = rsp.getBest();
         assertEquals(0, arsp.getDistance(), .1);
         assertEquals(0, arsp.getRouteWeight(), .1);
         assertEquals(2, arsp.getPoints().getSize());
@@ -224,7 +272,7 @@ public void testMonacoEnforcedDirection()
         req.getHints().put("heading_penalty", "300");
         GHResponse rsp = hopper.route(req);
 
-        AltResponse arsp = rsp.getFirst();
+        PathWrapper arsp = rsp.getBest();
         assertEquals(874., arsp.getDistance(), 10.);
         assertEquals(33, arsp.getPoints().getSize());
     }
@@ -240,7 +288,7 @@ public void testMonacoStraightVia()
         rq.getHints().put("pass_through", true);
         GHResponse rsp = hopper.route(rq);
 
-        AltResponse arsp = rsp.getFirst();
+        PathWrapper arsp = rsp.getBest();
         assertEquals(297, arsp.getDistance(), 5.);
         assertEquals(27, arsp.getPoints().getSize());
     }
@@ -261,7 +309,7 @@ public void testSRTMWithInstructions() throws Exception
         GHResponse rsp = tmpHopper.route(new GHRequest(43.730729, 7.421288, 43.727697, 7.419199).
                 setAlgorithm(AlgorithmOptions.ASTAR).setVehicle(vehicle).setWeighting(weightCalcStr));
 
-        AltResponse arsp = rsp.getFirst();
+        PathWrapper arsp = rsp.getBest();
         assertEquals(1626.8, arsp.getDistance(), .1);
         assertEquals(60, arsp.getPoints().getSize());
         assertTrue(arsp.getPoints().is3D());
@@ -319,7 +367,7 @@ public void testKremsCyclewayInstructionsWithWayTypeInfo()
         GHResponse rsp = tmpHopper.route(new GHRequest(48.410987, 15.599492, 48.383419, 15.659294).
                 setAlgorithm(AlgorithmOptions.ASTAR).setVehicle(tmpVehicle).setWeighting(tmpWeightCalcStr));
 
-        AltResponse arsp = rsp.getFirst();
+        PathWrapper arsp = rsp.getBest();
         assertEquals(6932.24, arsp.getDistance(), .1);
         assertEquals(110, arsp.getPoints().getSize());
 
@@ -372,22 +420,22 @@ public void testRoundaboutInstructionsWithCH()
         GHResponse rsp = tmpHopper.route(new GHRequest(43.745084, 7.430513, 43.745247, 7.430347)
                 .setVehicle(tmpVehicle).setWeighting(tmpWeightCalcStr));
 
-        AltResponse arsp = rsp.getFirst();
+        PathWrapper arsp = rsp.getBest();
         assertEquals(2, ((RoundaboutInstruction) arsp.getInstructions().get(1)).getExitNumber());
 
         rsp = tmpHopper.route(new GHRequest(43.745968, 7.42907, 43.745832, 7.428614)
                 .setVehicle(tmpVehicle).setWeighting(tmpWeightCalcStr));
-        arsp = rsp.getFirst();
+        arsp = rsp.getBest();
         assertEquals(2, ((RoundaboutInstruction) arsp.getInstructions().get(1)).getExitNumber());
 
         rsp = tmpHopper.route(new GHRequest(43.745948, 7.42914, 43.746173, 7.428834)
                 .setVehicle(tmpVehicle).setWeighting(tmpWeightCalcStr));
-        arsp = rsp.getFirst();
+        arsp = rsp.getBest();
         assertEquals(1, ((RoundaboutInstruction) arsp.getInstructions().get(1)).getExitNumber());
 
         rsp = tmpHopper.route(new GHRequest(43.735817, 7.417096, 43.735666, 7.416587)
                 .setVehicle(tmpVehicle).setWeighting(tmpWeightCalcStr));
-        arsp = rsp.getFirst();
+        arsp = rsp.getBest();
         assertEquals(2, ((RoundaboutInstruction) arsp.getInstructions().get(1)).getExitNumber());
     }
 
@@ -423,14 +471,14 @@ private void checkMultiVehiclesWithCH( GraphHopper tmpHopper )
         String str = tmpHopper.getEncodingManager().toString();
         GHResponse rsp = tmpHopper.route(new GHRequest(43.73005, 7.415707, 43.741522, 7.42826)
                 .setVehicle("car"));
-        AltResponse arsp = rsp.getFirst();
+        PathWrapper arsp = rsp.getBest();
         assertFalse("car routing for " + str + " should not have errors:" + rsp.getErrors(), rsp.hasErrors());
         assertEquals(207, arsp.getTime() / 1000f, 1);
         assertEquals(2838, arsp.getDistance(), 1);
 
         rsp = tmpHopper.route(new GHRequest(43.73005, 7.415707, 43.741522, 7.42826)
                 .setVehicle("bike"));
-        arsp = rsp.getFirst();
+        arsp = rsp.getBest();
         assertFalse("bike routing for " + str + " should not have errors:" + rsp.getErrors(), rsp.hasErrors());
         assertEquals(494, arsp.getTime() / 1000f, 1);
         assertEquals(2192, arsp.getDistance(), 1);
@@ -475,7 +523,7 @@ private void executeCHFootRoute()
         GHResponse rsp = tmpHopper.route(new GHRequest(43.727687, 7.418737, 43.74958, 7.436566).
                 setVehicle(vehicle));
 
-        AltResponse arsp = rsp.getFirst();
+        PathWrapper arsp = rsp.getBest();
         // identify the number of counts to compare with none-CH foot route which had nearly 700 counts
         long sum = rsp.getHints().getLong("visited_nodes.sum", 0);
         assertNotEquals(sum, 0);
diff --git a/core/src/test/java/com/graphhopper/GraphHopperTest.java b/core/src/test/java/com/graphhopper/GraphHopperTest.java
index 6fd06a6d13..2efc4320a5 100644
--- a/core/src/test/java/com/graphhopper/GraphHopperTest.java
+++ b/core/src/test/java/com/graphhopper/GraphHopperTest.java
@@ -78,7 +78,7 @@ public void testLoadOSM()
         closableInstance.importOrLoad();
         GHResponse rsp = closableInstance.route(new GHRequest(51.2492152, 9.4317166, 51.2, 9.4));
         assertFalse(rsp.hasErrors());
-        assertEquals(3, rsp.getFirst().getPoints().getSize());
+        assertEquals(3, rsp.getBest().getPoints().getSize());
 
         closableInstance.close();
 
@@ -87,7 +87,7 @@ public void testLoadOSM()
         assertTrue(closableInstance.load(ghLoc));
         rsp = closableInstance.route(new GHRequest(51.2492152, 9.4317166, 51.2, 9.4));
         assertFalse(rsp.hasErrors());
-        assertEquals(3, rsp.getFirst().getPoints().getSize());
+        assertEquals(3, rsp.getBest().getPoints().getSize());
 
         closableInstance.close();
         try
@@ -120,7 +120,7 @@ public void testLoadOSMNoCH()
         gh.importOrLoad();
         GHResponse rsp = gh.route(new GHRequest(51.2492152, 9.4317166, 51.2, 9.4));
         assertFalse(rsp.hasErrors());
-        assertEquals(3, rsp.getFirst().getPoints().getSize());
+        assertEquals(3, rsp.getBest().getPoints().getSize());
 
         gh.close();
         gh = new GraphHopper().setStoreOnFlush(true).
@@ -129,7 +129,7 @@ public void testLoadOSMNoCH()
         assertTrue(gh.load(ghLoc));
         rsp = gh.route(new GHRequest(51.2492152, 9.4317166, 51.2, 9.4));
         assertFalse(rsp.hasErrors());
-        assertEquals(3, rsp.getFirst().getPoints().getSize());
+        assertEquals(3, rsp.getBest().getPoints().getSize());
 
         gh.close();
     }
@@ -145,7 +145,7 @@ public void testLoadingWithDifferentCHConfig_issue471()
         gh.importOrLoad();
         GHResponse rsp = gh.route(new GHRequest(51.2492152, 9.4317166, 51.2, 9.4));
         assertFalse(rsp.hasErrors());
-        assertEquals(3, rsp.getFirst().getPoints().getSize());
+        assertEquals(3, rsp.getBest().getPoints().getSize());
         gh.close();
 
         gh = new GraphHopper().setStoreOnFlush(true).
@@ -171,7 +171,7 @@ public void testLoadingWithDifferentCHConfig_issue471()
         gh.importOrLoad();
         rsp = gh.route(new GHRequest(51.2492152, 9.4317166, 51.2, 9.4));
         assertFalse(rsp.hasErrors());
-        assertEquals(3, rsp.getFirst().getPoints().getSize());
+        assertEquals(3, rsp.getBest().getPoints().getSize());
         gh.close();
 
         gh = new GraphHopper().setStoreOnFlush(true).
@@ -290,8 +290,8 @@ public void testPrepare()
         GHResponse rsp = instance.route(new GHRequest(51.2492152, 9.4317166, 51.2, 9.4).
                 setAlgorithm(AlgorithmOptions.DIJKSTRA_BI));
         assertFalse(rsp.hasErrors());
-        assertEquals(Helper.createPointList(51.249215, 9.431716, 52.0, 9.0, 51.2, 9.4), rsp.getFirst().getPoints());
-        assertEquals(3, rsp.getFirst().getPoints().getSize());
+        assertEquals(Helper.createPointList(51.249215, 9.431716, 52.0, 9.0, 51.2, 9.4), rsp.getBest().getPoints());
+        assertEquals(3, rsp.getBest().getPoints().getSize());
     }
 
     @Test
@@ -304,8 +304,8 @@ public void testSortedGraph_noCH()
                 setGraphHopperLocation(ghLoc).
                 setOSMFile(testOsm);
         instance.importOrLoad();
-        AltResponse rsp = instance.route(new GHRequest(51.2492152, 9.4317166, 51.2, 9.4).
-                setAlgorithm(AlgorithmOptions.DIJKSTRA_BI)).getFirst();
+        PathWrapper rsp = instance.route(new GHRequest(51.2492152, 9.4317166, 51.2, 9.4).
+                setAlgorithm(AlgorithmOptions.DIJKSTRA_BI)).getBest();
         assertFalse(rsp.hasErrors());
         assertEquals(3, rsp.getPoints().getSize());
         assertEquals(new GHPoint(51.24921503475044, 9.431716451757769), rsp.getPoints().toGHPoint(0));
@@ -340,7 +340,7 @@ public void testFootAndCar()
         // A to D
         GHResponse grsp = instance.route(new GHRequest(11.1, 50, 11.3, 51).setVehicle(EncodingManager.CAR));
         assertFalse(grsp.hasErrors());
-        AltResponse rsp = grsp.getFirst();
+        PathWrapper rsp = grsp.getBest();
         assertEquals(3, rsp.getPoints().getSize());
         // => found A and D
         assertEquals(50, rsp.getPoints().getLongitude(0), 1e-3);
@@ -351,7 +351,7 @@ public void testFootAndCar()
         // A to D not allowed for foot. But the location index will choose a node close to D accessible to FOOT        
         grsp = instance.route(new GHRequest(11.1, 50, 11.3, 51).setVehicle(EncodingManager.FOOT));
         assertFalse(grsp.hasErrors());
-        rsp = grsp.getFirst();
+        rsp = grsp.getBest();
         assertEquals(2, rsp.getPoints().getSize());
         // => found a point on edge A-B        
         assertEquals(11.680, rsp.getPoints().getLatitude(1), 1e-3);
@@ -360,13 +360,13 @@ public void testFootAndCar()
         // A to E only for foot
         grsp = instance.route(new GHRequest(11.1, 50, 10, 51).setVehicle(EncodingManager.FOOT));
         assertFalse(grsp.hasErrors());
-        rsp = grsp.getFirst();
+        rsp = grsp.getBest();
         assertEquals(2, rsp.getPoints().size());
 
         // A D E for car
         grsp = instance.route(new GHRequest(11.1, 50, 10, 51).setVehicle(EncodingManager.CAR));
         assertFalse(grsp.hasErrors());
-        rsp = grsp.getFirst();
+        rsp = grsp.getBest();
         assertEquals(3, rsp.getPoints().getSize());
     }
 
@@ -540,7 +540,7 @@ public void testFootOnly()
         // A to E only for foot
         GHResponse grsp = instance.route(new GHRequest(11.1, 50, 11.2, 52.01).setVehicle(EncodingManager.FOOT));
         assertFalse(grsp.hasErrors());
-        AltResponse rsp = grsp.getFirst();
+        PathWrapper rsp = grsp.getBest();
         assertEquals(Helper.createPointList(11.1, 50, 10, 51, 11.2, 52), rsp.getPoints());
     }
 
@@ -598,15 +598,15 @@ public void testVia()
         GHPoint third = new GHPoint(11.2, 51.9);
         GHResponse rsp12 = instance.route(new GHRequest().addPoint(first).addPoint(second));
         assertFalse("should find 1->2", rsp12.hasErrors());
-        assertEquals(147930.5, rsp12.getFirst().getDistance(), .1);
+        assertEquals(147930.5, rsp12.getBest().getDistance(), .1);
         GHResponse rsp23 = instance.route(new GHRequest().addPoint(second).addPoint(third));
         assertFalse("should find 2->3", rsp23.hasErrors());
-        assertEquals(176608.9, rsp23.getFirst().getDistance(), .1);
+        assertEquals(176608.9, rsp23.getBest().getDistance(), .1);
 
         GHResponse grsp = instance.route(new GHRequest().addPoint(first).addPoint(second).addPoint(third));
         assertFalse("should find 1->2->3", grsp.hasErrors());
-        AltResponse rsp = grsp.getFirst();
-        assertEquals(rsp12.getFirst().getDistance() + rsp23.getFirst().getDistance(), rsp.getDistance(), 1e-6);
+        PathWrapper rsp = grsp.getBest();
+        assertEquals(rsp12.getBest().getDistance() + rsp23.getBest().getDistance(), rsp.getDistance(), 1e-6);
         assertEquals(5, rsp.getPoints().getSize());
         assertEquals(5, rsp.getInstructions().size());
         assertEquals(Instruction.REACHED_VIA, rsp.getInstructions().get(1).getSign());
@@ -706,7 +706,7 @@ public void testGetPathsDirectionEnforcement4()
         GHResponse response = new GHResponse();
         List<Path> paths = instance.calcPaths(req, response);
         assertFalse(response.hasErrors());
-        assertEquals(1, response.getAlternatives().size());        
+        assertEquals(1, response.getAll().size());        
         assertArrayEquals(new int[]
         {
             10, 4, 3, 11
diff --git a/core/src/test/java/com/graphhopper/reader/osm/CalendarBasedTest.java b/core/src/test/java/com/graphhopper/reader/osm/conditional/CalendarBasedTest.java
similarity index 91%
rename from core/src/test/java/com/graphhopper/reader/osm/CalendarBasedTest.java
rename to core/src/test/java/com/graphhopper/reader/osm/conditional/CalendarBasedTest.java
index deb9224833..c522a4985a 100644
--- a/core/src/test/java/com/graphhopper/reader/osm/CalendarBasedTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osm/conditional/CalendarBasedTest.java
@@ -15,25 +15,23 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package com.graphhopper.reader.osm;
+package com.graphhopper.reader.osm.conditional;
 
 import java.util.Calendar;
 
 /**
  * Base Test for calendar based tasks.
- *
+ * <p>
  * @author Robin Boldt
  */
 public abstract class CalendarBasedTest
 {
-
     protected Calendar getCalendar( int year, int month, int day )
     {
-        Calendar calendar = Calendar.getInstance();
+        Calendar calendar = DateRangeParser.createCalendar();
         calendar.set(Calendar.YEAR, year);
         calendar.set(Calendar.MONTH, month);
         calendar.set(Calendar.DAY_OF_MONTH, day);
         return calendar;
     }
-
 }
diff --git a/core/src/test/java/com/graphhopper/reader/osm/conditional/ConditionalParserTest.java b/core/src/test/java/com/graphhopper/reader/osm/conditional/ConditionalParserTest.java
index f401427ebf..f93be31594 100644
--- a/core/src/test/java/com/graphhopper/reader/osm/conditional/ConditionalParserTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osm/conditional/ConditionalParserTest.java
@@ -18,8 +18,6 @@
 package com.graphhopper.reader.osm.conditional;
 
 import com.graphhopper.reader.OSMWay;
-import com.graphhopper.reader.osm.CalendarBasedTest;
-import com.graphhopper.reader.osm.ConditionalTagsInspector;
 import org.junit.Before;
 import org.junit.Test;
 
diff --git a/core/src/test/java/com/graphhopper/reader/osm/ConditionalTagsInspectorTest.java b/core/src/test/java/com/graphhopper/reader/osm/conditional/ConditionalTagsInspectorTest.java
similarity index 97%
rename from core/src/test/java/com/graphhopper/reader/osm/ConditionalTagsInspectorTest.java
rename to core/src/test/java/com/graphhopper/reader/osm/conditional/ConditionalTagsInspectorTest.java
index 208900cedf..e28190337c 100644
--- a/core/src/test/java/com/graphhopper/reader/osm/ConditionalTagsInspectorTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osm/conditional/ConditionalTagsInspectorTest.java
@@ -15,8 +15,9 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package com.graphhopper.reader.osm;
+package com.graphhopper.reader.osm.conditional;
 
+import com.graphhopper.reader.osm.conditional.ConditionalTagsInspector;
 import com.graphhopper.reader.OSMWay;
 import org.junit.Test;
 
diff --git a/core/src/test/java/com/graphhopper/reader/osm/conditional/DateRangeParserTest.java b/core/src/test/java/com/graphhopper/reader/osm/conditional/DateRangeParserTest.java
index 8d7147ab4d..0ef114bb06 100644
--- a/core/src/test/java/com/graphhopper/reader/osm/conditional/DateRangeParserTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osm/conditional/DateRangeParserTest.java
@@ -17,7 +17,6 @@
  */
 package com.graphhopper.reader.osm.conditional;
 
-import com.graphhopper.reader.osm.CalendarBasedTest;
 import org.junit.Test;
 
 import java.text.ParseException;
@@ -40,6 +39,13 @@ public void testParseConditional() throws ParseException
         assertSameDate(1970, Calendar.DECEMBER, 1, "Dec");
     }
 
+    @Test
+    public void testToString() throws ParseException
+    {
+        DateRange instance = DateRangeParser.parseDateRange("Mar-Oct");
+        assertEquals("yearless:true, dayOnly:false, reverse:false, from:1970-03-01T00:00:00Z, to:1970-10-31T23:59:59Z", instance.toString());
+    }
+
     @Test
     public void testParseSimpleDateRange() throws ParseException
     {
@@ -125,7 +131,7 @@ public void testParseReverseDateRangeWithoutYearAndDay_645() throws ParseExcepti
         assertTrue(dateRange.isInRange(getCalendar(2016, Calendar.AUGUST, 10)));
         assertTrue(dateRange.isInRange(getCalendar(2016, Calendar.JANUARY, 1)));
         assertTrue(dateRange.isInRange(getCalendar(2016, Calendar.JANUARY, 20)));
-        assertTrue(dateRange.isInRange(getCalendar(2016, Calendar.JANUARY, 31)));        
+        assertTrue(dateRange.isInRange(getCalendar(2016, Calendar.JANUARY, 31)));
         assertFalse(dateRange.isInRange(getCalendar(2016, Calendar.FEBRUARY, 1)));
     }
 
@@ -183,6 +189,8 @@ public void testParseSingleDateRangeOneDayOnlyIncludingPh() throws ParseExceptio
     public void testParseSingleDateRangeDayOnly() throws ParseException
     {
         DateRange dateRange = DateRangeParser.parseDateRange("Mo-Fr");
+        assertTrue(dateRange.dayOnly);
+        assertFalse(dateRange.reverse);
         assertFalse(dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 20)));
         assertTrue(dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 21)));
         assertTrue(dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 25)));
@@ -193,8 +201,12 @@ public void testParseSingleDateRangeDayOnly() throws ParseException
     @Test
     public void testParseReverseDateRangeDayOnly() throws ParseException
     {
-        // This is reverse since Sa=7 and So=1
+        // This is reverse since Su=7 and Mo=1 
+        // Note: If we use Locale.Germany or Locale.UK for calendar creation 
+        // then cal.set(DAY_OF_WEEK, 7) results in a "time in millis" after Saturday leading to reverse=false
         DateRange dateRange = DateRangeParser.parseDateRange("Sa-Su");
+        assertTrue(dateRange.dayOnly);
+        assertTrue(dateRange.reverse);
         assertFalse(dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 25)));
         assertTrue(dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 26)));
         assertTrue(dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 27)));
diff --git a/core/src/test/java/com/graphhopper/routing/AStarBidirectionTest.java b/core/src/test/java/com/graphhopper/routing/AStarBidirectionTest.java
index 95050deeb3..cf76483c01 100644
--- a/core/src/test/java/com/graphhopper/routing/AStarBidirectionTest.java
+++ b/core/src/test/java/com/graphhopper/routing/AStarBidirectionTest.java
@@ -93,8 +93,8 @@ public void testInitFromAndTo()
         updateDistancesFor(g, 0, 0.00, 0.00);
         updateDistancesFor(g, 1, 0.01, 0.01);
 
-        final AtomicReference<AStar.AStarEdge> fromRef = new AtomicReference<AStar.AStarEdge>();
-        final AtomicReference<AStar.AStarEdge> toRef = new AtomicReference<AStar.AStarEdge>();
+        final AtomicReference<AStar.AStarEntry> fromRef = new AtomicReference<AStar.AStarEntry>();
+        final AtomicReference<AStar.AStarEntry> toRef = new AtomicReference<AStar.AStarEntry>();
         AStarBidirection astar = new AStarBidirection(g, carEncoder, new ShortestWeighting(carEncoder), traversalMode)
         {
             @Override
diff --git a/core/src/test/java/com/graphhopper/routing/AlternativeRouteTest.java b/core/src/test/java/com/graphhopper/routing/AlternativeRouteTest.java
index af22788821..0e652862ea 100644
--- a/core/src/test/java/com/graphhopper/routing/AlternativeRouteTest.java
+++ b/core/src/test/java/com/graphhopper/routing/AlternativeRouteTest.java
@@ -16,7 +16,7 @@
 import java.util.List;
 
 import static com.graphhopper.routing.AbstractRoutingAlgorithmTester.updateDistancesFor;
-import com.graphhopper.routing.AlternativeRoute.AltDijkstraBidirectionRef;
+import com.graphhopper.routing.AlternativeRoute.AlternativeBidirSearch;
 import com.graphhopper.storage.*;
 import java.util.Arrays;
 import java.util.Collection;
@@ -175,7 +175,7 @@ public void testDisconnectedAreas()
         updateDistancesFor(g, 20, 0.00, -0.01);
 
         Weighting weighting = new FastestWeighting(carFE);
-        AltDijkstraBidirectionRef altDijkstra = new AltDijkstraBidirectionRef(g, carFE, weighting, traversalMode, 1);
+        AlternativeBidirSearch altDijkstra = new AlternativeBidirSearch(g, carFE, weighting, traversalMode, 1);
         Path path = altDijkstra.calcPath(1, 20);
         assertFalse(path.isFound());
 
diff --git a/core/src/test/java/com/graphhopper/routing/util/AbstractBikeFlagEncoderTester.java b/core/src/test/java/com/graphhopper/routing/util/AbstractBikeFlagEncoderTester.java
index 83153f2fec..23fe7fcb8b 100644
--- a/core/src/test/java/com/graphhopper/routing/util/AbstractBikeFlagEncoderTester.java
+++ b/core/src/test/java/com/graphhopper/routing/util/AbstractBikeFlagEncoderTester.java
@@ -23,12 +23,13 @@
 import org.junit.Before;
 import org.junit.Test;
 
-import java.text.SimpleDateFormat;
-import java.util.Calendar;
 import java.util.Locale;
 
 import static com.graphhopper.routing.util.PriorityCode.*;
+import com.graphhopper.util.Helper;
 import static com.graphhopper.util.TranslationMapTest.SINGLETON;
+import java.text.DateFormat;
+import java.util.Date;
 import static org.junit.Assert.*;
 
 /**
@@ -173,18 +174,17 @@ public void testAccess()
         way.setTag("railway", "abandoned");
         assertTrue(encoder.acceptWay(way) > 0);
 
-        Calendar calendar = Calendar.getInstance();
-        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy MMM dd");
+        DateFormat simpleDateFormat = Helper.createFormatter("yyyy MMM dd");
 
         way.clearTags();
         way.setTag("highway", "road");
-        way.setTag("bicycle:conditional", "no @ (" + simpleDateFormat.format(calendar.getTime()) + ")");
+        way.setTag("bicycle:conditional", "no @ (" + simpleDateFormat.format(new Date().getTime()) + ")");
         assertFalse(encoder.acceptWay(way) > 0);
 
         way.clearTags();
         way.setTag("highway", "road");
         way.setTag("access", "no");
-        way.setTag("bicycle:conditional", "yes @ (" + simpleDateFormat.format(calendar.getTime()) + ")");
+        way.setTag("bicycle:conditional", "yes @ (" + simpleDateFormat.format(new Date().getTime()) + ")");
         assertTrue(encoder.acceptWay(way) > 0);
     }
 
diff --git a/core/src/test/java/com/graphhopper/routing/util/CarFlagEncoderTest.java b/core/src/test/java/com/graphhopper/routing/util/CarFlagEncoderTest.java
index dbf97c9135..ebea111d0d 100644
--- a/core/src/test/java/com/graphhopper/routing/util/CarFlagEncoderTest.java
+++ b/core/src/test/java/com/graphhopper/routing/util/CarFlagEncoderTest.java
@@ -19,10 +19,11 @@
 
 import com.graphhopper.reader.OSMNode;
 import com.graphhopper.reader.OSMWay;
+import com.graphhopper.util.Helper;
+import java.text.DateFormat;
 import org.junit.Test;
 
-import java.text.SimpleDateFormat;
-import java.util.Calendar;
+import java.util.Date;
 
 import static org.junit.Assert.*;
 
@@ -105,24 +106,23 @@ public void testAccess()
         way.setTag("highway", "service");
         way.setTag("access", "emergency");
         assertFalse(encoder.acceptWay(way) > 0);
-        
+
         way.clearTags();
         way.setTag("highway", "service");
         way.setTag("motor_vehicle", "emergency");
         assertFalse(encoder.acceptWay(way) > 0);
 
-        Calendar calendar = Calendar.getInstance();
-        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy MMM dd");
+        DateFormat simpleDateFormat = Helper.createFormatter("yyyy MMM dd");
 
         way.clearTags();
         way.setTag("highway", "road");
-        way.setTag("access:conditional", "no @ ("+simpleDateFormat.format(calendar.getTime())+")");
+        way.setTag("access:conditional", "no @ (" + simpleDateFormat.format(new Date().getTime()) + ")");
         assertFalse(encoder.acceptWay(way) > 0);
 
         way.clearTags();
         way.setTag("highway", "road");
         way.setTag("access", "no");
-        way.setTag("access:conditional", "yes @ ("+simpleDateFormat.format(calendar.getTime())+")");
+        way.setTag("access:conditional", "yes @ (" + simpleDateFormat.format(new Date().getTime()) + ")");
         assertTrue(encoder.acceptWay(way) > 0);
     }
 
diff --git a/core/src/test/java/com/graphhopper/routing/util/FootFlagEncoderTest.java b/core/src/test/java/com/graphhopper/routing/util/FootFlagEncoderTest.java
index f91655a93b..ecf9fff3a1 100644
--- a/core/src/test/java/com/graphhopper/routing/util/FootFlagEncoderTest.java
+++ b/core/src/test/java/com/graphhopper/routing/util/FootFlagEncoderTest.java
@@ -23,11 +23,12 @@
 import com.graphhopper.storage.GraphBuilder;
 import com.graphhopper.util.EdgeExplorer;
 import com.graphhopper.util.GHUtility;
+import com.graphhopper.util.Helper;
+import java.text.DateFormat;
 
 import org.junit.Test;
 
-import java.text.SimpleDateFormat;
-import java.util.Calendar;
+import java.util.Date;
 
 import static org.junit.Assert.*;
 
@@ -158,18 +159,17 @@ public void testAccess()
         way.setTag("foot", "no");
         assertFalse(footEncoder.acceptWay(way) > 0);
 
-        Calendar calendar = Calendar.getInstance();
-        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy MMM dd");
+        DateFormat simpleDateFormat = Helper.createFormatter("yyyy MMM dd");
 
         way.clearTags();
         way.setTag("highway", "footway");
-        way.setTag("access:conditional", "no @ ("+simpleDateFormat.format(calendar.getTime())+")");
+        way.setTag("access:conditional", "no @ (" + simpleDateFormat.format(new Date().getTime()) + ")");
         assertFalse(footEncoder.acceptWay(way) > 0);
 
         way.clearTags();
         way.setTag("highway", "footway");
         way.setTag("access", "no");
-        way.setTag("access:conditional", "yes @ ("+simpleDateFormat.format(calendar.getTime())+")");
+        way.setTag("access:conditional", "yes @ (" + simpleDateFormat.format(new Date().getTime()) + ")");
         assertTrue(footEncoder.acceptWay(way) > 0);
     }
 
diff --git a/core/src/test/java/com/graphhopper/routing/util/MotorcycleFlagEncoderTest.java b/core/src/test/java/com/graphhopper/routing/util/MotorcycleFlagEncoderTest.java
index e78be6226d..379240da9f 100644
--- a/core/src/test/java/com/graphhopper/routing/util/MotorcycleFlagEncoderTest.java
+++ b/core/src/test/java/com/graphhopper/routing/util/MotorcycleFlagEncoderTest.java
@@ -22,10 +22,10 @@
 import com.graphhopper.util.EdgeIteratorState;
 import com.graphhopper.util.GHUtility;
 import com.graphhopper.util.Helper;
+import java.text.DateFormat;
 import org.junit.Test;
 
-import java.text.SimpleDateFormat;
-import java.util.Calendar;
+import java.util.Date;
 
 import static org.junit.Assert.*;
 
@@ -112,18 +112,17 @@ public void testAccess()
         way.setTag("motor_vehicle", "emergency");
         assertFalse(encoder.acceptWay(way) > 0);
 
-        Calendar calendar = Calendar.getInstance();
-        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy MMM dd");
+        DateFormat simpleDateFormat = Helper.createFormatter("yyyy MMM dd");
 
         way.clearTags();
         way.setTag("highway", "road");
-        way.setTag("access:conditional", "no @ ("+simpleDateFormat.format(calendar.getTime())+")");
+        way.setTag("access:conditional", "no @ (" + simpleDateFormat.format(new Date().getTime()) + ")");
         assertFalse(encoder.acceptWay(way) > 0);
 
         way.clearTags();
         way.setTag("highway", "road");
         way.setTag("access", "no");
-        way.setTag("access:conditional", "yes @ ("+simpleDateFormat.format(calendar.getTime())+")");
+        way.setTag("access:conditional", "yes @ (" + simpleDateFormat.format(new Date().getTime()) + ")");
         assertTrue(encoder.acceptWay(way) > 0);
     }
 
diff --git a/pom.xml b/pom.xml
index e80ee5d44e..edd97f666e 100644
--- a/pom.xml
+++ b/pom.xml
@@ -6,7 +6,7 @@
     <groupId>com.graphhopper</groupId>
     <artifactId>graphhopper-parent</artifactId>
     <name>GraphHopper Parent Project</name>
-    <version>0.6-SNAPSHOT</version>
+    <version>0.7-SNAPSHOT</version>
     <packaging>pom</packaging> 
     <url>https://graphhopper.com</url> 
     <inceptionYear>2012</inceptionYear>
@@ -23,7 +23,7 @@
     <properties>
         <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
         <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
-        <slf4j.version>1.7.12</slf4j.version>
+        <slf4j.version>1.7.13</slf4j.version>
         <log4j.version>1.2.17</log4j.version>
         
         <!-- netbeans formatting rules -->
@@ -104,7 +104,7 @@
             <plugin>                
                 <groupId>org.apache.maven.plugins</groupId>
                 <artifactId>maven-surefire-plugin</artifactId>
-                <version>2.18.1</version>
+                <version>2.19.1</version>
                 <configuration>
                     <argLine>-Xmx100m -Xms100m</argLine>
                 </configuration>
@@ -113,7 +113,7 @@
             <plugin>
                 <groupId>org.apache.maven.plugins</groupId>
                 <artifactId>maven-failsafe-plugin</artifactId>
-                <version>2.18.1</version>
+                <version>2.19</version>
                 <executions>
                     <execution>
                         <goals>
@@ -142,7 +142,7 @@
             <plugin>
                 <groupId>org.apache.maven.plugins</groupId>
                 <artifactId>maven-assembly-plugin</artifactId>
-                <version>2.5.5</version>                    
+                <version>2.6</version>                    
             </plugin>
             <plugin>
                 <groupId>org.apache.maven.plugins</groupId>
diff --git a/tools-lgpl/pom.xml b/tools-lgpl/pom.xml
index f88b161b05..6108a38310 100644
--- a/tools-lgpl/pom.xml
+++ b/tools-lgpl/pom.xml
@@ -5,14 +5,14 @@
 
     <groupId>com.graphhopper</groupId>
     <artifactId>graphhopper-tools-lgpl</artifactId>
-    <version>0.6-SNAPSHOT</version>
+    <version>0.7-SNAPSHOT</version>
     <packaging>jar</packaging>
     <name>GraphHopper Tools LGPL licensed</name>
 
     <parent>
         <groupId>com.graphhopper</groupId>
         <artifactId>graphhopper-parent</artifactId>    	
-        <version>0.6-SNAPSHOT</version>
+        <version>0.7-SNAPSHOT</version>
     </parent>
 
     <dependencies>
diff --git a/tools/pom.xml b/tools/pom.xml
index ce86d6ab94..3cf93ff6f2 100644
--- a/tools/pom.xml
+++ b/tools/pom.xml
@@ -5,14 +5,14 @@
 
     <groupId>com.graphhopper</groupId>
     <artifactId>graphhopper-tools</artifactId>
-    <version>0.6-SNAPSHOT</version>
+    <version>0.7-SNAPSHOT</version>
     <packaging>jar</packaging>
     <name>GraphHopper Tools</name>
 
     <parent>
         <groupId>com.graphhopper</groupId>
         <artifactId>graphhopper-parent</artifactId>    	
-        <version>0.6-SNAPSHOT</version>
+        <version>0.7-SNAPSHOT</version>
     </parent>
 
     <dependencies>
@@ -41,7 +41,7 @@
         <dependency>
             <groupId>org.apache.commons</groupId>
             <artifactId>commons-compress</artifactId>
-            <version>1.9</version>
+            <version>1.10</version>
         </dependency>
     </dependencies>
     <build>
diff --git a/tools/src/main/java/com/graphhopper/tools/Measurement.java b/tools/src/main/java/com/graphhopper/tools/Measurement.java
index bffc338745..b623b43570 100644
--- a/tools/src/main/java/com/graphhopper/tools/Measurement.java
+++ b/tools/src/main/java/com/graphhopper/tools/Measurement.java
@@ -17,7 +17,7 @@
  */
 package com.graphhopper.tools;
 
-import com.graphhopper.AltResponse;
+import com.graphhopper.PathWrapper;
 import com.graphhopper.GHRequest;
 import com.graphhopper.GHResponse;
 import com.graphhopper.GraphHopper;
@@ -367,7 +367,7 @@ public int doCalc( boolean warmup, int run )
                     return 0;
                 }
 
-                AltResponse arsp = rsp.getFirst();
+                PathWrapper arsp = rsp.getBest();
                 if (!warmup)
                 {
                     visitedNodesSum.addAndGet(rsp.getHints().getLong("visited_nodes.sum", 0));
diff --git a/tools/src/main/java/com/graphhopper/ui/GraphicsWrapper.java b/tools/src/main/java/com/graphhopper/ui/GraphicsWrapper.java
index 0c853caa50..af0fbadb7e 100644
--- a/tools/src/main/java/com/graphhopper/ui/GraphicsWrapper.java
+++ b/tools/src/main/java/com/graphhopper/ui/GraphicsWrapper.java
@@ -33,7 +33,7 @@
  */
 public class GraphicsWrapper
 {
-    private final Graph g;
+    private final Logger logger = LoggerFactory.getLogger(getClass());
     private final NodeAccess na;
     private double scaleX;
     private double scaleY;
@@ -43,7 +43,6 @@
 
     public GraphicsWrapper( Graph g )
     {
-        this.g = g;
         this.na = g.getNodeAccess();
         BBox b = g.getBounds();
         scaleX = scaleY = 0.002 * (b.maxLat - b.minLat);
@@ -129,8 +128,6 @@ public void plot( Graphics2D g2, double lat, double lon, int width )
         g2.fillOval((int) x, (int) y, width, width);
     }
 
-    private Logger logger = LoggerFactory.getLogger(getClass());
-
     void scale( int x, int y, boolean zoomIn )
     {
         double tmpFactor = 0.5f;
diff --git a/tools/src/main/java/com/graphhopper/ui/MiniGraphUI.java b/tools/src/main/java/com/graphhopper/ui/MiniGraphUI.java
index e6980109a6..48f0e7d53d 100644
--- a/tools/src/main/java/com/graphhopper/ui/MiniGraphUI.java
+++ b/tools/src/main/java/com/graphhopper/ui/MiniGraphUI.java
@@ -22,7 +22,6 @@
 import com.graphhopper.coll.GHTBitSet;
 import com.graphhopper.routing.*;
 import com.graphhopper.routing.util.*;
-import com.graphhopper.storage.SPTEntry;
 import com.graphhopper.storage.Graph;
 import com.graphhopper.storage.NodeAccess;
 import com.graphhopper.storage.index.LocationIndexTree;
@@ -30,7 +29,6 @@
 import com.graphhopper.util.*;
 import com.graphhopper.util.shapes.BBox;
 import gnu.trove.list.TIntList;
-import gnu.trove.map.TIntObjectMap;
 
 import java.awt.*;
 import java.awt.event.*;
@@ -42,8 +40,10 @@
 
 /**
  * A rough graphical user interface for visualizing the OSM graph. Mainly for debugging algorithms
- * and spatial datastructures. Use the 'web' module for a more userfriendly UI as shown at
- * graphhopper.com/maps
+ * and spatial datastructures.
+ * <p>
+ * Use the project at https://github.com/graphhopper/graphhopper-web for a
+ * better/faster/userfriendly/... alternative!
  * <p>
  * @author Peter Karich
  */
@@ -533,53 +533,4 @@ void repaintRoads()
         mainPanel.repaint();
         logger.info("roads painting took " + sw.stop().getSeconds() + " sec");
     }
-
-    static class MyBiDi extends DijkstraBidirectionRef
-    {
-
-        public MyBiDi( Graph graph, FlagEncoder encoder, Weighting weighting, TraversalMode tMode )
-        {
-            super(graph, encoder, weighting, tMode);
-        }
-
-        @Override
-        public boolean finished()
-        {
-            // we need to finish BOTH searches identical to CH
-            if (finishedFrom && finishedTo)
-                return true;
-
-            if (currFrom.weight + currTo.weight > weightLimit)
-                return true;
-
-            // The following condition is necessary to avoid traversing the full graph if areas are disconnected
-            // but it is only valid for none-CH e.g. for CH it can happen that finishedTo is true but the from-SPT could still reach 'to'
-            if (!bestPath.isFound() && (finishedFrom || finishedTo))
-                return true;
-
-            return currFrom.weight > bestPath.getWeight() && currTo.weight > bestPath.getWeight();
-        }
-
-        public TIntObjectMap<SPTEntry> getBestWeightMapFrom()
-        {
-            return bestWeightMapFrom;
-        }
-
-        public TIntObjectMap<SPTEntry> getBestWeightMapTo()
-        {
-            return bestWeightMapTo;
-        }
-
-        @Override
-        protected double getCurrentFromWeight()
-        {
-            return super.getCurrentFromWeight();
-        }
-
-        @Override
-        protected double getCurrentToWeight()
-        {
-            return super.getCurrentToWeight();
-        }
-    }
 }
diff --git a/web/pom.xml b/web/pom.xml
index a59dfd05ae..48a336914f 100644
--- a/web/pom.xml
+++ b/web/pom.xml
@@ -6,14 +6,14 @@
     <groupId>com.graphhopper</groupId>
     <artifactId>graphhopper-web</artifactId>
     <packaging>jar</packaging>
-    <version>0.6-SNAPSHOT</version>
+    <version>0.7-SNAPSHOT</version>
     <name>GraphHopper Web</name>
     <description>Example on how to use GraphHopper in a web-based application</description>
         
     <parent>
         <groupId>com.graphhopper</groupId>
         <artifactId>graphhopper-parent</artifactId>    	
-        <version>0.6-SNAPSHOT</version>
+        <version>0.7-SNAPSHOT</version>
     </parent>
     <properties>
         <jetty.version>8.1.16.v20140903</jetty.version>
diff --git a/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java b/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
index e7e70dd878..e82cae45fe 100644
--- a/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
+++ b/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
@@ -17,7 +17,7 @@
  */
 package com.graphhopper.http;
 
-import com.graphhopper.AltResponse;
+import com.graphhopper.PathWrapper;
 import com.graphhopper.GHRequest;
 import com.graphhopper.GHResponse;
 import com.graphhopper.GraphHopper;
@@ -145,7 +145,7 @@ public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes ) thr
                 + took + ", " + algoStr + ", " + weighting + ", " + vehicleStr;
         httpRes.setHeader("X-GH-Took", "" + Math.round(took * 1000));
 
-        int alternatives = ghRsp.getAlternatives().size();
+        int alternatives = ghRsp.getAll().size();
         if (writeGPX && alternatives > 1)
             ghRsp.addError(new IllegalAccessException("Alternatives are currently not supported for GPX"));
 
@@ -154,13 +154,13 @@ public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes ) thr
             logger.error(logStr + ", errors:" + ghRsp.getErrors());
         } else
         {
-            AltResponse altRsp0 = ghRsp.getFirst();
+            PathWrapper altRsp0 = ghRsp.getBest();
             logger.info(logStr + ", alternatives: " + alternatives
                     + ", distance0: " + altRsp0.getDistance()
                     + ", time0: " + Math.round(altRsp0.getTime() / 60000f) + "min"
                     + ", points0: " + altRsp0.getPoints().getSize()
                     + ", debugInfo: " + ghRsp.getDebugInfo());
-        }               
+        }
 
         if (writeGPX)
         {
@@ -171,14 +171,19 @@ public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes ) thr
             } else
             {
                 // no error => we can now safely call getFirst
-                String xml = createGPXString(httpReq, httpRes, ghRsp.getFirst());
+                String xml = createGPXString(httpReq, httpRes, ghRsp.getBest());
                 writeResponse(httpRes, xml);
             }
         } else
         {
             Map<String, Object> map = routeSerializer.toJSON(ghRsp, calcPoints, pointsEncoded,
                     enableElevation, enableInstructions);
-            
+
+            // this makes java client 0.5 fail so not in 0.6 but in 0.7
+            Object infoMap = map.get("info");
+            if (infoMap != null)
+                ((Map) infoMap).put("took", Math.round(took * 1000));
+
             if (ghRsp.hasErrors())
                 writeJsonError(httpRes, SC_BAD_REQUEST, new JSONObject(map));
             else
@@ -186,7 +191,7 @@ public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes ) thr
         }
     }
 
-    protected String createGPXString( HttpServletRequest req, HttpServletResponse res, AltResponse rsp )
+    protected String createGPXString( HttpServletRequest req, HttpServletResponse res, PathWrapper rsp )
     {
         boolean includeElevation = getBooleanParam(req, "elevation", false);
         // default to false for the route part in next API version, see #437
diff --git a/web/src/main/java/com/graphhopper/http/GraphHopperWeb.java b/web/src/main/java/com/graphhopper/http/GraphHopperWeb.java
index 4fb67aacf6..8ff889b4d0 100644
--- a/web/src/main/java/com/graphhopper/http/GraphHopperWeb.java
+++ b/web/src/main/java/com/graphhopper/http/GraphHopperWeb.java
@@ -17,15 +17,18 @@
  */
 package com.graphhopper.http;
 
-import com.graphhopper.AltResponse;
+import com.graphhopper.PathWrapper;
 import com.graphhopper.GHRequest;
 import com.graphhopper.GHResponse;
 import com.graphhopper.GraphHopperAPI;
 import com.graphhopper.util.*;
 import com.graphhopper.util.shapes.GHPoint;
 import java.util.ArrayList;
+import java.util.HashSet;
 
 import java.util.List;
+import java.util.Map.Entry;
+import java.util.Set;
 
 import org.json.JSONArray;
 import org.json.JSONObject;
@@ -46,9 +49,28 @@
     private boolean instructions = true;
     private boolean calcPoints = true;
     private boolean elevation = false;
+    private final Set<String> ignoreSet;
 
     public GraphHopperWeb()
     {
+        // some parameters are supported directly via Java API so ignore them when writing the getHints map
+        ignoreSet = new HashSet<String>();
+        ignoreSet.add("calc_points");
+        ignoreSet.add("calcpoints");
+        ignoreSet.add("instructions");
+        ignoreSet.add("elevation");
+        ignoreSet.add("key");
+
+        // some parameters are in the request:
+        ignoreSet.add("algorithm");
+        ignoreSet.add("locale");
+        ignoreSet.add("point");
+        ignoreSet.add("vehicle");
+
+        // some are special and need to be avoided
+        ignoreSet.add("points_encoded");
+        ignoreSet.add("pointsencoded");
+        ignoreSet.add("type");
     }
 
     public void setDownloader( Downloader downloader )
@@ -109,7 +131,6 @@ public GHResponse route( GHRequest request )
                         + "Use calcPoints=false and instructions=false to disable point and instruction calculation");
 
             boolean tmpElevation = request.getHints().getBool("elevation", elevation);
-            String tmpKey = request.getHints().get("key", key);
 
             String url = routeServiceUrl
                     + "?"
@@ -125,12 +146,20 @@ public GHResponse route( GHRequest request )
             if (!request.getVehicle().isEmpty())
                 url += "&vehicle=" + request.getVehicle();
 
-            if (!tmpKey.isEmpty())
-                url += "&key=" + tmpKey;
-            int altMax = request.getHints().getInt("alternative_route.max_num", 0);
-            if (altMax != 0)
+            if (!key.isEmpty())
+                url += "&key=" + key;
+
+            for (Entry<String, String> entry : request.getHints().toMap().entrySet())
             {
-                url += "&alternative_route.max_num=" + altMax;
+                String urlKey = entry.getKey();
+                String urlValue = entry.getValue();
+
+                // use lower case conversion for check only!
+                if (ignoreSet.contains(urlKey.toLowerCase()))
+                    continue;
+
+                if (urlValue != null && !urlValue.isEmpty())
+                    url += "&" + WebHelper.encodeURL(urlKey) + "=" + WebHelper.encodeURL(urlValue);
             }
 
             String str = downloader.downloadAsString(url, true);
@@ -138,15 +167,15 @@ public GHResponse route( GHRequest request )
 
             GHResponse res = new GHResponse();
             res.addErrors(readErrors(json));
-            if (res.hasRawErrors())
+            if (res.hasErrors())
                 return res;
 
             JSONArray paths = json.getJSONArray("paths");
             for (int index = 0; index < paths.length(); index++)
             {
                 JSONObject path = paths.getJSONObject(index);
-                AltResponse altRsp = createAltResponse(path, tmpCalcPoints, tmpInstructions, tmpElevation);
-                res.addAlternative(altRsp);
+                PathWrapper altRsp = createPathWrapper(path, tmpCalcPoints, tmpInstructions, tmpElevation);
+                res.add(altRsp);
             }
             return res;
 
@@ -156,10 +185,10 @@ public GHResponse route( GHRequest request )
         }
     }
 
-    public static AltResponse createAltResponse( JSONObject path,
+    public static PathWrapper createPathWrapper( JSONObject path,
                                                  boolean tmpCalcPoints, boolean tmpInstructions, boolean tmpElevation )
     {
-        AltResponse altRsp = new AltResponse();
+        PathWrapper altRsp = new PathWrapper();
         altRsp.addErrors(readErrors(path));
         if (altRsp.hasErrors())
             return altRsp;
@@ -203,7 +232,22 @@ public static AltResponse createAltResponse( JSONObject path,
                     Instruction instr;
                     if (sign == Instruction.USE_ROUNDABOUT || sign == Instruction.LEAVE_ROUNDABOUT)
                     {
-                        instr = new RoundaboutInstruction(sign, text, ia, instPL);
+                        RoundaboutInstruction ri = new RoundaboutInstruction(sign, text, ia, instPL);
+
+                        if (jsonObj.has("exit_number"))
+                        {
+                            ri.setExitNumber(jsonObj.getInt("exit_number"));
+                        }
+
+                        if (jsonObj.has("turn_angle"))
+                        {
+                            // TODO provide setTurnAngle setter
+                            double angle = jsonObj.getDouble("turn_angle");
+                            ri.setDirOfRotation(angle);
+                            ri.setRadian((angle < 0 ? -Math.PI : Math.PI) - angle);
+                        }
+
+                        instr = ri;
                     } else if (sign == Instruction.REACHED_VIA)
                     {
                         ViaInstruction tmpInstr = new ViaInstruction(text, ia, instPL);
diff --git a/web/src/main/java/com/graphhopper/http/SimpleRouteSerializer.java b/web/src/main/java/com/graphhopper/http/SimpleRouteSerializer.java
index 66098063db..a3d6ca8738 100644
--- a/web/src/main/java/com/graphhopper/http/SimpleRouteSerializer.java
+++ b/web/src/main/java/com/graphhopper/http/SimpleRouteSerializer.java
@@ -17,7 +17,7 @@
  */
 package com.graphhopper.http;
 
-import com.graphhopper.AltResponse;
+import com.graphhopper.PathWrapper;
 import com.graphhopper.GHResponse;
 import com.graphhopper.util.Helper;
 import com.graphhopper.util.InstructionList;
@@ -65,7 +65,7 @@ public SimpleRouteSerializer( BBox maxBounds )
             jsonInfo.put("copyrights", Arrays.asList("GraphHopper", "OpenStreetMap contributors"));
 
             List<Map<String, Object>> jsonPathList = new ArrayList<Map<String, Object>>();
-            for (AltResponse ar : rsp.getAlternatives())
+            for (PathWrapper ar : rsp.getAll())
             {
                 Map<String, Object> jsonPath = new HashMap<String, Object>();
                 jsonPath.put("distance", Helper.round(ar.getDistance(), 3));
diff --git a/web/src/main/webapp/js/main-template.js b/web/src/main/webapp/js/main-template.js
index 1ba52a15e8..b0a9ea2f9d 100644
--- a/web/src/main/webapp/js/main-template.js
+++ b/web/src/main/webapp/js/main-template.js
@@ -325,14 +325,14 @@ function setToEnd(e) {
 }
 
 function setStartCoord(e) {
-    ghRequest.route.set(e.latlng, 0);
+    ghRequest.route.set(e.latlng.wrap(), 0);
     resolveFrom();
     routeIfAllResolved();
 }
 
 function setIntermediateCoord(e) {
     var index = ghRequest.route.size() - 1;
-    ghRequest.route.add(e.latlng, index);
+    ghRequest.route.add(e.latlng.wrap(), index);
     resolveIndex(index);
     routeIfAllResolved();
 }
@@ -346,7 +346,7 @@ function deleteCoord(e) {
 
 function setEndCoord(e) {
     var index = ghRequest.route.size() - 1;
-    ghRequest.route.set(e.latlng, index);
+    ghRequest.route.set(e.latlng.wrap(), index);
     resolveTo();
     routeIfAllResolved();
 }
diff --git a/web/src/test/java/com/graphhopper/http/GraphHopperServletIT.java b/web/src/test/java/com/graphhopper/http/GraphHopperServletIT.java
index 6ca7ac2259..fdbebd9b95 100644
--- a/web/src/test/java/com/graphhopper/http/GraphHopperServletIT.java
+++ b/web/src/test/java/com/graphhopper/http/GraphHopperServletIT.java
@@ -17,7 +17,7 @@
  */
 package com.graphhopper.http;
 
-import com.graphhopper.AltResponse;
+import com.graphhopper.PathWrapper;
 import com.graphhopper.GHRequest;
 import com.graphhopper.GHResponse;
 import com.graphhopper.GraphHopperAPI;
@@ -124,7 +124,7 @@ public void testGraphHopperWeb() throws Exception
         assertFalse(rsp.getErrors().toString(), rsp.hasErrors());
         assertTrue(rsp.getErrors().toString(), rsp.getErrors().isEmpty());
 
-        AltResponse arsp = rsp.getFirst();
+        PathWrapper arsp = rsp.getBest();
         assertTrue("distance wasn't correct:" + arsp.getDistance(), arsp.getDistance() > 9000);
         assertTrue("distance wasn't correct:" + arsp.getDistance(), arsp.getDistance() < 9500);
 
@@ -133,7 +133,7 @@ public void testGraphHopperWeb() throws Exception
                 addPoint(new GHPoint(42.531896, 1.553278)).
                 addPoint(new GHPoint(42.510071, 1.548128)));
         assertTrue(rsp.getErrors().toString(), rsp.getErrors().isEmpty());
-        arsp = rsp.getFirst();
+        arsp = rsp.getBest();
         assertTrue("distance wasn't correct:" + arsp.getDistance(), arsp.getDistance() > 20000);
         assertTrue("distance wasn't correct:" + arsp.getDistance(), arsp.getDistance() < 21000);
 
diff --git a/web/src/test/java/com/graphhopper/http/GraphHopperWebTest.java b/web/src/test/java/com/graphhopper/http/GraphHopperWebTest.java
index efb482b411..d275e216a6 100644
--- a/web/src/test/java/com/graphhopper/http/GraphHopperWebTest.java
+++ b/web/src/test/java/com/graphhopper/http/GraphHopperWebTest.java
@@ -17,10 +17,11 @@
  */
 package com.graphhopper.http;
 
-import com.graphhopper.AltResponse;
+import com.graphhopper.PathWrapper;
 import com.graphhopper.GHRequest;
 import com.graphhopper.GHResponse;
 import com.graphhopper.util.Downloader;
+import com.graphhopper.util.Helper;
 
 import java.io.IOException;
 import java.io.InputStream;
@@ -51,11 +52,39 @@ public InputStream fetch( HttpURLConnection conn, boolean readErrorStreamNoExcep
         GraphHopperWeb instance = new GraphHopperWeb();
         instance.setDownloader(downloader);
         GHResponse rsp = instance.route(new GHRequest(52.47379, 13.362808, 52.4736925, 13.3904394));
-        AltResponse arsp = rsp.getFirst();
+        PathWrapper arsp = rsp.getBest();
         assertEquals(2138.3, arsp.getDistance(), 1e-1);
         assertEquals(17, arsp.getPoints().getSize());
         assertEquals(5, arsp.getInstructions().getSize());
         assertEquals("(0,Geradeaus auf A 100,1268.519329705091,65237)", arsp.getInstructions().get(0).toString());
         assertEquals(11, arsp.getInstructions().get(0).getPoints().size());
     }
+
+    @Test
+    public void testCreateURL() throws Exception
+    {
+        Downloader downloader = new Downloader("GraphHopper Test")
+        {
+            @Override
+            public String downloadAsString( String url, boolean readErrorStreamNoException ) throws IOException
+            {
+                assertFalse(url.contains("xy"));
+                assertFalse(url.contains("algo1"));
+                assertTrue(url.contains("alternative_route.max_paths=4"));
+
+                assertEquals("https://graphhopper.com/api/1/route?point=52.0,13.0&point=52.0,14.0&&type=json&instructions=true&points_encoded=true&calc_points=true&algorithm=&locale=en_US&elevation=false&key=blup&alternative_route.max_paths=4", url);
+                return Helper.isToString(getClass().getResourceAsStream("test_encoded.json"));
+            }
+        };
+        GraphHopperWeb instance = new GraphHopperWeb();
+        instance.setKey("blup");
+        instance.setDownloader(downloader);
+        GHRequest req = new GHRequest(52, 13, 52, 14);
+
+        // should be ignored, use GraphHopperWeb or GHRequest directly instead
+        req.getHints().put("key", "xy");
+        req.getHints().put("algorithm", "algo1");
+        req.getHints().put("alternative_route.max_paths", "4");
+        instance.route(req);
+    }
 }
