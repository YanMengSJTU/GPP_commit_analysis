diff --git a/core/src/main/java/com/graphhopper/GraphHopper.java b/core/src/main/java/com/graphhopper/GraphHopper.java
index 805f7ecd44..8c580b5459 100644
--- a/core/src/main/java/com/graphhopper/GraphHopper.java
+++ b/core/src/main/java/com/graphhopper/GraphHopper.java
@@ -1,14 +1,14 @@
 /*
  *  Licensed to GraphHopper and Peter Karich under one or more contributor
- *  license agreements. See the NOTICE file distributed with this work for 
+ *  license agreements. See the NOTICE file distributed with this work for
  *  additional information regarding copyright ownership.
- * 
- *  GraphHopper licenses this file to you under the Apache License, 
- *  Version 2.0 (the "License"); you may not use this file except in 
+ *
+ *  GraphHopper licenses this file to you under the Apache License,
+ *  Version 2.0 (the "License"); you may not use this file except in
  *  compliance with the License. You may obtain a copy of the License at
- * 
+ *
  *       http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  *  Unless required by applicable law or agreed to in writing, software
  *  distributed under the License is distributed on an "AS IS" BASIS,
  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -17,32 +17,73 @@
  */
 package com.graphhopper;
 
+import java.io.File;
+import java.io.IOException;
+import java.text.SimpleDateFormat;
+import java.util.ArrayList;
+import java.util.Collections;
+import java.util.Date;
+import java.util.List;
+import java.util.Locale;
+import java.util.concurrent.atomic.AtomicLong;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import com.graphhopper.reader.DataReader;
 import com.graphhopper.reader.OSMReader;
-import com.graphhopper.reader.osgb.dpn.OsDpnReader;
-import com.graphhopper.reader.osgb.itn.OsItnReader;
 import com.graphhopper.reader.dem.CGIARProvider;
 import com.graphhopper.reader.dem.ElevationProvider;
 import com.graphhopper.reader.dem.SRTMProvider;
-import com.graphhopper.routing.*;
+import com.graphhopper.reader.osgb.dpn.OsDpnReader;
+import com.graphhopper.reader.osgb.hn.OsHnReader;
+import com.graphhopper.reader.osgb.itn.OsItnReader;
+import com.graphhopper.routing.AlgorithmOptions;
+import com.graphhopper.routing.Path;
+import com.graphhopper.routing.QueryGraph;
+import com.graphhopper.routing.RoutingAlgorithm;
+import com.graphhopper.routing.RoutingAlgorithmFactory;
+import com.graphhopper.routing.RoutingAlgorithmFactorySimple;
 import com.graphhopper.routing.ch.PrepareContractionHierarchies;
-import com.graphhopper.routing.util.*;
-import com.graphhopper.storage.*;
+import com.graphhopper.routing.util.DefaultEdgeFilter;
+import com.graphhopper.routing.util.EdgeFilter;
+import com.graphhopper.routing.util.EncodingManager;
+import com.graphhopper.routing.util.FastestWeighting;
+import com.graphhopper.routing.util.FlagEncoder;
+import com.graphhopper.routing.util.PrepareRoutingSubnetworks;
+import com.graphhopper.routing.util.PriorityWeighting;
+import com.graphhopper.routing.util.ShortestWeighting;
+import com.graphhopper.routing.util.TraversalMode;
+import com.graphhopper.routing.util.TurnWeighting;
+import com.graphhopper.routing.util.Weighting;
+import com.graphhopper.routing.util.WeightingMap;
+import com.graphhopper.storage.DAType;
+import com.graphhopper.storage.Directory;
+import com.graphhopper.storage.GHDirectory;
+import com.graphhopper.storage.Graph;
+import com.graphhopper.storage.GraphHopperStorage;
+import com.graphhopper.storage.GraphStorage;
+import com.graphhopper.storage.LevelGraph;
+import com.graphhopper.storage.LevelGraphStorage;
+import com.graphhopper.storage.Lock;
+import com.graphhopper.storage.LockFactory;
+import com.graphhopper.storage.NativeFSLockFactory;
+import com.graphhopper.storage.SimpleFSLockFactory;
+import com.graphhopper.storage.TurnCostExtension;
 import com.graphhopper.storage.index.LocationIndex;
 import com.graphhopper.storage.index.LocationIndexTree;
 import com.graphhopper.storage.index.QueryResult;
-import com.graphhopper.util.*;
+import com.graphhopper.util.CmdArgs;
+import com.graphhopper.util.Constants;
+import com.graphhopper.util.DouglasPeucker;
+import com.graphhopper.util.GHUtility;
+import com.graphhopper.util.Helper;
+import com.graphhopper.util.PathMerger;
+import com.graphhopper.util.StopWatch;
+import com.graphhopper.util.TranslationMap;
+import com.graphhopper.util.Unzipper;
 import com.graphhopper.util.shapes.GHPoint;
 
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import java.io.File;
-import java.io.IOException;
-import java.text.SimpleDateFormat;
-import java.util.*;
-import java.util.concurrent.atomic.AtomicLong;
-
 /**
  * Easy to use access point to configure import and (offline) routing.
  * <p/>
@@ -80,7 +121,7 @@
     // for prepare
     private int minNetworkSize = 200;
     private int minOneWayNetworkSize = 0;
-    // for CH prepare    
+    // for CH prepare
     private boolean doPrepare = true;
     private boolean chEnabled = true;
     private String chWeightingStr = "fastest";
@@ -94,7 +135,7 @@
     private double osmReaderWayPointMaxDistance = 1;
     private int workerThreads = -1;
     private boolean calcPoints = true;
-    // utils    
+    // utils
     private final TranslationMap trMap = new TranslationMap().doImport();
     private ElevationProvider eleProvider = ElevationProvider.NOOP;
     private final AtomicLong visitedSum = new AtomicLong(0);
@@ -680,6 +721,8 @@ else if ("OSITN".equals(dataReader))
             reader = new OsItnReader(tmpGraph);
         else if ("OSDPN".equals(dataReader))
             reader = new OsDpnReader(tmpGraph);
+        else if ("OSHN".equals(dataReader))
+            reader = new OsHnReader(tmpGraph);
         else {
             String exceptionMessage = String.format(READER_UNAVAILABLE, dataReader);
             throw new IllegalArgumentException(exceptionMessage);
@@ -717,7 +760,7 @@ public boolean load( String graphHopperFolder )
 
         if (graphHopperFolder.endsWith("-gh"))
         {
-            // do nothing  
+            // do nothing
         } else if (graphHopperFolder.endsWith(".osm") || graphHopperFolder.endsWith(".xml"))
         {
             throw new IllegalArgumentException("To import an osm file you need to use importOrLoad");
@@ -762,7 +805,7 @@ else if (encodingManager.needsTurnCostsSupport())
         Lock lock = null;
         try
         {
-            // create locks only if writes are allowed, if they are not allowed a lock cannot be created 
+            // create locks only if writes are allowed, if they are not allowed a lock cannot be created
             // (e.g. on a read only filesystem locks would fail)
             if (graph.getDirectory().getDefaultType().isStoring() && isAllowWrites())
             {
@@ -810,7 +853,7 @@ protected void postProcessing()
             algoFactory = new RoutingAlgorithmFactorySimple();
 
         if (!isPrepared())
-            prepare();        
+            prepare();
     }
 
     private boolean isPrepared()
@@ -825,9 +868,9 @@ protected RoutingAlgorithmFactory createPrepare()
         PrepareContractionHierarchies tmpPrepareCH = new PrepareContractionHierarchies(new GHDirectory("", DAType.RAM_INT),
                 (LevelGraph) graph, defaultVehicle, weighting, traversalMode);
         tmpPrepareCH.setPeriodicUpdates(periodicUpdates).
-                setLazyUpdates(lazyUpdates).
-                setNeighborUpdates(neighborUpdates).
-                setLogMessages(logMessages);
+        setLazyUpdates(lazyUpdates).
+        setNeighborUpdates(neighborUpdates).
+        setLogMessages(logMessages);
 
         return tmpPrepareCH;
     }
@@ -889,11 +932,11 @@ public GHResponse route( GHRequest request )
         DouglasPeucker peucker = new DouglasPeucker().setMaxDistance(wayPointMaxDistance);
 
         new PathMerger().
-                setCalcPoints(tmpCalcPoints).
-                setDouglasPeucker(peucker).
-                setEnableInstructions(tmpEnableInstructions).
-                setSimplifyResponse(simplifyResponse && wayPointMaxDistance > 0).
-                doWork(response, paths, trMap.getWithFallBack(locale));
+        setCalcPoints(tmpCalcPoints).
+        setDouglasPeucker(peucker).
+        setEnableInstructions(tmpEnableInstructions).
+        setSimplifyResponse(simplifyResponse && wayPointMaxDistance > 0).
+        doWork(response, paths, trMap.getWithFallBack(locale));
         return response;
     }
 
@@ -1162,6 +1205,10 @@ public GraphHopper setAsItnReader() {
         dataReader = "OSITN";
         return this;
     }
+    public GraphHopper setAsHnReader() {
+        dataReader = "OSHN";
+        return this;
+    }
 
     public GraphHopper setAsDpnReader() {
         dataReader = "OSDPN";
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/AbstractOsInputFile.java b/core/src/main/java/com/graphhopper/reader/osgb/AbstractOsInputFile.java
index 27fffdd64d..2821407944 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/AbstractOsInputFile.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/AbstractOsInputFile.java
@@ -30,7 +30,7 @@
  *
  * @author phopkins
  *
- * @param <T>
+ * @param <T extends RoutingElement> The type of object to return from the next xml functions
  */
 abstract public class AbstractOsInputFile<T extends RoutingElement>  implements Sink, Closeable {
     private boolean eof;
@@ -40,13 +40,14 @@
     // for pbf parsing
     private boolean binary = false;
     private final BlockingQueue<RoutingElement> itemQueue;
-    //    private boolean hasIncomingData;
-    //    private int workerThreads = -1;
-    //    private static final Logger logger = LoggerFactory
-    //            .getLogger(OsItnInputFile.class);
     private final String name;
+    /**
+     * The factory to use to create RoutingElements. eg Itn, Dpn or Hn
+     */
+    private AbstractRoutingElementFactory<T> abstractFactory;
 
-    public AbstractOsInputFile(File file) throws IOException {
+    public AbstractOsInputFile(File file, AbstractRoutingElementFactory<T> abstractFactory) throws IOException {
+        this.abstractFactory = abstractFactory;
         name = file.getAbsolutePath();
         bis = decode(file);
         itemQueue = new LinkedBlockingQueue<RoutingElement>(50000);
@@ -146,7 +147,7 @@ private void openXMLStream(InputStream in) throws XMLStreamException {
         eof = false;
     }
 
-    public RoutingElement getNext() throws XMLStreamException,
+    public T getNext() throws XMLStreamException,
     MismatchedDimensionException, FactoryException, TransformException {
         if (eof)
             throw new IllegalStateException("EOF reached");
@@ -161,8 +162,28 @@ public RoutingElement getNext() throws XMLStreamException,
         return null;
     }
 
-    abstract protected T getNextXML() throws XMLStreamException,
-    MismatchedDimensionException, FactoryException, TransformException;
+    //    private T getNextXML() throws XMLStreamException,
+    //    MismatchedDimensionException, FactoryException, TransformException;
+
+    private T getNextXML() throws XMLStreamException,
+    MismatchedDimensionException, FactoryException, TransformException {
+        T result = null;
+        int event = parser.next();
+        while (event != XMLStreamConstants.END_DOCUMENT) {
+            if (event == XMLStreamConstants.START_ELEMENT) {
+                String idStr = parser.getAttributeValue(null, "id");
+                if (idStr != null) {
+                    String name = parser.getLocalName();
+                    idStr = idStr.substring(4);
+                    result = abstractFactory.create(name, idStr, parser);
+                }
+            }
+            event = parser.next();
+        }
+        parser.close();
+        return result;
+    }
+
 
     public boolean isEOF() {
         return eof;
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/AbstractOsReader.java b/core/src/main/java/com/graphhopper/reader/osgb/AbstractOsReader.java
new file mode 100644
index 0000000000..03eadc73a4
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/AbstractOsReader.java
@@ -0,0 +1,118 @@
+package com.graphhopper.reader.osgb;
+
+import java.io.File;
+import java.io.IOException;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import com.graphhopper.reader.DataReader;
+import com.graphhopper.reader.dem.ElevationProvider;
+import com.graphhopper.routing.util.EncodingManager;
+import com.graphhopper.storage.GraphStorage;
+import com.graphhopper.storage.NodeAccess;
+import com.graphhopper.util.DouglasPeucker;
+import com.graphhopper.util.StopWatch;
+
+abstract public class AbstractOsReader<E> implements DataReader<E> {
+
+    private static final String TIME_PASS1_PASS2_TOTAL_FORMAT = "time(pass1): {} pass2: {} total: ";
+    protected static final String PREPROCESS_FORMAT = "preprocess: {}";
+
+    protected EncodingManager encodingManager = null;
+    protected int workerThreads = -1;
+    protected final DouglasPeucker simplifyAlgo = new DouglasPeucker();
+    protected boolean doSimplify = true;
+    private File routingFile;
+    protected final GraphStorage graphStorage;
+    protected final NodeAccess nodeAccess;
+    protected ElevationProvider eleProvider = ElevationProvider.NOOP;
+
+
+    private static final Logger logger = LoggerFactory.getLogger(AbstractOsReader.class.getName());
+
+    public AbstractOsReader(GraphStorage storage) {
+        this.graphStorage = storage;
+        this.nodeAccess = graphStorage.getNodeAccess();
+
+    }
+    /**
+     * Specify the type of the path calculation (car, bike, ...).
+     */
+    @Override
+    public AbstractOsReader<E> setEncodingManager(EncodingManager acceptWay) {
+        this.encodingManager = acceptWay;
+        return this;
+    }
+
+    @Override
+    public AbstractOsReader<E> setWayPointMaxDistance(double maxDist) {
+        doSimplify = maxDist > 0;
+        simplifyAlgo.setMaxDistance(maxDist);
+        return this;
+    }
+
+    @Override
+    public AbstractOsReader<E> setWorkerThreads(int numOfWorkers) {
+        this.workerThreads = numOfWorkers;
+        return this;
+    }
+
+    @Override
+    public void readGraph() throws IOException {
+        if (encodingManager == null)
+            throw new IllegalStateException("Encoding manager was not set.");
+
+        if (routingFile == null)
+            throw new IllegalStateException("No OS ITN file specified");
+
+        if (!routingFile.exists())
+            throw new IllegalStateException(
+                    "Your specified OS ITN file does not exist:"
+                            + routingFile.getAbsolutePath());
+
+        StopWatch sw1 = new StopWatch().start();
+        preProcess(routingFile);
+        sw1.stop();
+
+        StopWatch sw2 = new StopWatch().start();
+        writeOsm2Graph(routingFile);
+        sw2.stop();
+
+        logger.info(TIME_PASS1_PASS2_TOTAL_FORMAT, (int) sw1.getSeconds(),
+                (int) sw2.getSeconds(),
+                ((int) (sw1.getSeconds() + sw2.getSeconds())));
+    }
+
+    abstract protected void preProcess(File itnFile);
+    abstract protected void writeOsm2Graph(File osmFile);
+
+    @Override
+    public AbstractOsReader<E> setOSMFile(File osmFile) {
+        this.routingFile = osmFile;
+        return this;
+    }
+
+    @Override
+    public GraphStorage getGraphStorage() {
+        return graphStorage;
+    }
+    @Override
+    public String toString() {
+        return getClass().getSimpleName();
+    }
+    @Override
+    public AbstractOsReader<E> setElevationProvider(ElevationProvider eleProvider) {
+        if (eleProvider == null)
+            throw new IllegalStateException(
+                    "Use the NOOP elevation provider instead of null or don't call setElevationProvider");
+
+        if (!nodeAccess.is3D() && ElevationProvider.NOOP != eleProvider)
+            throw new IllegalStateException(
+                    "Make sure you graph accepts 3D data");
+
+        this.eleProvider = eleProvider;
+        return this;
+    }
+
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/AbstractRoutingElementFactory.java b/core/src/main/java/com/graphhopper/reader/osgb/AbstractRoutingElementFactory.java
new file mode 100644
index 0000000000..7605282cf3
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/AbstractRoutingElementFactory.java
@@ -0,0 +1,15 @@
+package com.graphhopper.reader.osgb;
+
+import javax.xml.stream.XMLStreamException;
+import javax.xml.stream.XMLStreamReader;
+
+import org.opengis.geometry.MismatchedDimensionException;
+import org.opengis.referencing.FactoryException;
+import org.opengis.referencing.operation.TransformException;
+
+import com.graphhopper.reader.RoutingElement;
+
+abstract public class AbstractRoutingElementFactory<T extends RoutingElement>  {
+
+    abstract public T create(String name, String idStr, XMLStreamReader parser) throws MismatchedDimensionException, XMLStreamException, FactoryException, TransformException;
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnInputFile.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnInputFile.java
index ec43838292..a92b8c822d 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnInputFile.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnInputFile.java
@@ -20,15 +20,6 @@
 import java.io.File;
 import java.io.IOException;
 
-import javax.xml.stream.XMLStreamConstants;
-import javax.xml.stream.XMLStreamException;
-
-import org.opengis.geometry.MismatchedDimensionException;
-import org.opengis.referencing.FactoryException;
-import org.opengis.referencing.operation.TransformException;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
 import com.graphhopper.reader.RoutingElement;
 import com.graphhopper.reader.osgb.AbstractOsInputFile;
 
@@ -39,46 +30,8 @@
  * @author Nop
  */
 public class OsDpnInputFile extends AbstractOsInputFile<RoutingElement> {
-    private static final Logger logger = LoggerFactory
-            .getLogger(OsDpnInputFile.class);
 
     public OsDpnInputFile(File file) throws IOException {
-        super(file);
-    }
-
-    @Override
-    protected RoutingElement getNextXML() throws XMLStreamException,
-    MismatchedDimensionException, FactoryException, TransformException {
-
-        int event = parser.next();
-        while (event != XMLStreamConstants.END_DOCUMENT) {
-            if (event == XMLStreamConstants.START_ELEMENT) {
-                String idStr = parser.getAttributeValue(null, "id");
-                if (idStr != null) {
-                    String name = parser.getLocalName();
-                    idStr = idStr.substring(4);
-
-                    logger.info(":" + name + ":");
-                    switch (name) {
-                    case "RouteNode": {
-                        return OsDpnNode.create(idStr, parser);
-                    }
-                    case "RouteLink": {
-                        return OsDpnWay.create(idStr, parser);
-                    }
-                    case "Route": {
-                        // TODO grouped features
-                    }
-                    default: {
-
-                    }
-
-                    }
-                }
-            }
-            event = parser.next();
-        }
-        parser.close();
-        return null;
+        super(file, new OsDpnRoutingElementFactory());
     }
 }
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnReader.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnReader.java
index bff92b6e59..2fe0c95e8e 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnReader.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnReader.java
@@ -21,7 +21,6 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import com.graphhopper.reader.DataReader;
 import com.graphhopper.reader.Node;
 import com.graphhopper.reader.OSMElement;
 import com.graphhopper.reader.OSMTurnRelation;
@@ -30,15 +29,12 @@
 import com.graphhopper.reader.RelationMember;
 import com.graphhopper.reader.RoutingElement;
 import com.graphhopper.reader.TurnRelation;
-import com.graphhopper.reader.dem.ElevationProvider;
+import com.graphhopper.reader.osgb.AbstractOsReader;
 import com.graphhopper.reader.osgb.itn.OSITNTurnRelation;
-import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.storage.GraphStorage;
-import com.graphhopper.storage.NodeAccess;
 import com.graphhopper.util.DistanceCalc;
 import com.graphhopper.util.DistanceCalc3D;
 import com.graphhopper.util.DistanceCalcEarth;
-import com.graphhopper.util.DouglasPeucker;
 import com.graphhopper.util.EdgeIteratorState;
 import com.graphhopper.util.Helper;
 import com.graphhopper.util.PointList;
@@ -89,7 +85,7 @@
  * @author Peter Karich
  */
 
-public class OsDpnReader implements DataReader<String> {
+public class OsDpnReader extends AbstractOsReader<String> {
     private InputStream is;
 
     protected static final int EMPTY = -1;
@@ -101,10 +97,6 @@
             .getLogger(OsDpnReader.class);
     private long locations;
     private long skippedLocations;
-    private final GraphStorage graphStorage;
-    private final NodeAccess nodeAccess;
-    private EncodingManager encodingManager = null;
-    private int workerThreads = -1;
     protected long zeroCounter = 0;
     // Using the correct Map<Long, Integer> is hard. We need a memory efficient
     // and fast solution for big data sets!
@@ -129,19 +121,15 @@
     protected PillarInfo pillarInfo;
     private final DistanceCalc distCalc = new DistanceCalcEarth();
     private final DistanceCalc3D distCalc3D = new DistanceCalc3D();
-    private final DouglasPeucker simplifyAlgo = new DouglasPeucker();
-    private boolean doSimplify = true;
     private int nextTowerId = 0;
     private int nextPillarId = 0;
     // negative but increasing to avoid clash with custom created OSM files
     private long newUniqueOsmId = -Long.MAX_VALUE;
-    private ElevationProvider eleProvider = ElevationProvider.NOOP;
     private final boolean exitOnlyPillarNodeException = true;
     private File routingFile;
 
     public OsDpnReader(GraphStorage storage) {
-        this.graphStorage = storage;
-        this.nodeAccess = graphStorage.getNodeAccess();
+        super(storage);
 
         osmNodeIdToInternalNodeMap = new TObjectIntHashMap<String>(200, .5f, -1);
         osmNodeIdToNodeFlagsMap = new TObjectLongHashMap<String>(200, .5f, 0);
@@ -180,7 +168,8 @@ public void readGraph() throws IOException {
      * Preprocessing of OSM file to select nodes which are used for highways.
      * This allows a more compact graph data structure.
      */
-    void preProcess(File osmFile) {
+    @Override
+    protected void preProcess(File osmFile) {
         OsDpnInputFile in = null;
         try {
             in = new OsDpnInputFile(osmFile);
@@ -280,7 +269,8 @@ boolean filterWay(OsDpnWay way) {
     /**
      * Creates the edges and nodes files from the specified osm file.
      */
-    private void writeOsm2Graph(File osmFile) {
+    @Override
+    protected void writeOsm2Graph(File osmFile) {
         int tmp = Math.max(getNodeMap().size() / 50, 100);
         logger.info("creating graph. Found nodes (pillar+tower):"
                 + nf(getNodeMap().size()) + ", " + Helper.getMemInfo());
@@ -907,42 +897,6 @@ boolean isInBounds(Node node) {
         return osmWayIdToRouteWeightMap;
     }
 
-    /**
-     * Specify the type of the path calculation (car, bike, ...).
-     */
-    @Override
-    public OsDpnReader setEncodingManager(EncodingManager acceptWay) {
-        this.encodingManager = acceptWay;
-        return this;
-    }
-
-    @Override
-    public OsDpnReader setWayPointMaxDistance(double maxDist) {
-        doSimplify = maxDist > 0;
-        simplifyAlgo.setMaxDistance(maxDist);
-        return this;
-    }
-
-    @Override
-    public OsDpnReader setWorkerThreads(int numOfWorkers) {
-        this.workerThreads = numOfWorkers;
-        return this;
-    }
-
-    @Override
-    public OsDpnReader setElevationProvider(ElevationProvider eleProvider) {
-        if (eleProvider == null)
-            throw new IllegalStateException(
-                    "Use the NOOP elevation provider instead of null or don't call setElevationProvider");
-
-        if (!nodeAccess.is3D() && ElevationProvider.NOOP != eleProvider)
-            throw new IllegalStateException(
-                    "Make sure you graph accepts 3D data");
-
-        this.eleProvider = eleProvider;
-        return this;
-    }
-
     @Override
     public OsDpnReader setOSMFile(File osmFile) {
         this.routingFile = osmFile;
@@ -958,14 +912,4 @@ private void printInfo(String str) {
                         + ", relFlagsMap.size:" + getRelFlagsMap().size() + " "
                         + Helper.getMemInfo());
     }
-
-    @Override
-    public String toString() {
-        return getClass().getSimpleName();
-    }
-
-    @Override
-    public GraphStorage getGraphStorage() {
-        return graphStorage;
-    }
 }
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnRoutingElementFactory.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnRoutingElementFactory.java
new file mode 100644
index 0000000000..d6f271fab9
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnRoutingElementFactory.java
@@ -0,0 +1,40 @@
+package com.graphhopper.reader.osgb.dpn;
+
+import javax.xml.stream.XMLStreamException;
+import javax.xml.stream.XMLStreamReader;
+
+import org.opengis.geometry.MismatchedDimensionException;
+import org.opengis.referencing.FactoryException;
+import org.opengis.referencing.operation.TransformException;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import com.graphhopper.reader.RoutingElement;
+import com.graphhopper.reader.osgb.AbstractRoutingElementFactory;
+import com.graphhopper.reader.osgb.itn.OsItnRoutingElementFactory;
+
+public class OsDpnRoutingElementFactory extends AbstractRoutingElementFactory<RoutingElement>{
+
+    private static final Logger logger = LoggerFactory.getLogger(OsItnRoutingElementFactory.class);
+
+    @Override
+    public RoutingElement create(String name, String idStr, XMLStreamReader parser) throws MismatchedDimensionException, XMLStreamException, FactoryException, TransformException {
+        logger.info(":" + name + ":");
+        switch (name) {
+        case "RouteNode": {
+            return OsDpnNode.create(idStr, parser);
+        }
+        case "RouteLink": {
+            return OsDpnWay.create(idStr, parser);
+        }
+        case "Route": {
+            // TODO grouped features
+        }
+        default: {
+
+        }
+
+        }
+        return null;
+    }
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/hn/OsHnInputFile.java b/core/src/main/java/com/graphhopper/reader/osgb/hn/OsHnInputFile.java
new file mode 100644
index 0000000000..5690df270d
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/hn/OsHnInputFile.java
@@ -0,0 +1,15 @@
+package com.graphhopper.reader.osgb.hn;
+
+import java.io.File;
+import java.io.IOException;
+
+import com.graphhopper.reader.RoutingElement;
+import com.graphhopper.reader.osgb.AbstractOsInputFile;
+
+public class OsHnInputFile extends AbstractOsInputFile<RoutingElement> {
+
+    public OsHnInputFile(File file) throws IOException {
+        super(file, new OsHnRoutingElementFactory());
+    }
+
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/hn/OsHnReader.java b/core/src/main/java/com/graphhopper/reader/osgb/hn/OsHnReader.java
new file mode 100644
index 0000000000..2e60fcf072
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/hn/OsHnReader.java
@@ -0,0 +1,98 @@
+package com.graphhopper.reader.osgb.hn;
+
+
+import java.io.File;
+import java.io.IOException;
+
+import javax.xml.stream.XMLStreamException;
+
+import org.opengis.geometry.MismatchedDimensionException;
+import org.opengis.referencing.FactoryException;
+import org.opengis.referencing.operation.TransformException;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import com.graphhopper.reader.RoutingElement;
+import com.graphhopper.reader.osgb.AbstractOsReader;
+import com.graphhopper.storage.GraphStorage;
+import com.graphhopper.util.Helper;
+
+public class OsHnReader extends AbstractOsReader<Long> {
+
+
+    private static final Logger logger = LoggerFactory.getLogger(OsHnReader.class.getName());
+
+    public OsHnReader(GraphStorage storage) {
+        super(storage);
+    }
+
+    @Override
+    public int getInternalNodeIdOfOsmNode(Long viaOsm) {
+        // TODO Auto-generated method stub
+        return 0;
+    }
+
+    @Override
+    public Long getOsmIdOfInternalEdge(int edge) {
+        // TODO Auto-generated method stub
+        return null;
+    }
+
+    @Override
+    protected void preProcess(File itnFile) {
+        try {
+            preProcessDirOrFile(itnFile);
+        } catch (Exception ex) {
+            throw new RuntimeException("Problem while parsing file", ex);
+        }
+    }
+
+    private void preProcessDirOrFile(File osmFile) throws XMLStreamException,
+    IOException, MismatchedDimensionException, FactoryException,
+    TransformException {
+        if (osmFile.isDirectory()) {
+            String absolutePath = osmFile.getAbsolutePath();
+            String[] list = osmFile.list();
+            for (String file : list) {
+                File nextFile = new File(absolutePath + File.separator + file);
+                preProcessDirOrFile(nextFile);
+            }
+        } else {
+            preProcessSingleFile(osmFile);
+        }
+    }
+
+    private void preProcessSingleFile(File osmFile) throws XMLStreamException,
+    IOException, MismatchedDimensionException, FactoryException,
+    TransformException {
+        OsHnInputFile in = null;
+        try {
+            logger.error(PREPROCESS_FORMAT, osmFile.getName());
+            in = new OsHnInputFile(osmFile);
+            in.setWorkerThreads(workerThreads).open();
+            preProcessSingleFile(in);
+        } finally {
+            Helper.close(in);
+        }
+    }
+
+    @Override
+    protected void writeOsm2Graph(File osmFile) {
+        // TODO Auto-generated method stub
+
+    }
+
+    private void preProcessSingleFile(OsHnInputFile in)
+            throws XMLStreamException, MismatchedDimensionException,
+            FactoryException, TransformException {
+        System.out.println("==== preProcessSingleFile");
+        //        long tmpWayCounter = 1;
+        //        long tmpRelationCounter = 1;
+        RoutingElement item;
+        while ((item = in.getNext()) != null) {
+            // Don't do anything different to the InputFile
+        }
+    }
+
+
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/hn/OsHnRoutingElementFactory.java b/core/src/main/java/com/graphhopper/reader/osgb/hn/OsHnRoutingElementFactory.java
new file mode 100644
index 0000000000..c87df340b3
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/hn/OsHnRoutingElementFactory.java
@@ -0,0 +1,49 @@
+package com.graphhopper.reader.osgb.hn;
+
+import java.math.BigDecimal;
+
+import javax.xml.stream.XMLStreamException;
+import javax.xml.stream.XMLStreamReader;
+
+import org.opengis.geometry.MismatchedDimensionException;
+import org.opengis.referencing.FactoryException;
+import org.opengis.referencing.operation.TransformException;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import com.graphhopper.reader.RoutingElement;
+import com.graphhopper.reader.osgb.AbstractRoutingElementFactory;
+
+public class OsHnRoutingElementFactory extends AbstractRoutingElementFactory<RoutingElement>{
+
+    private static final Logger logger = LoggerFactory.getLogger(OsHnRoutingElementFactory.class);
+
+    @Override
+    public RoutingElement create(String name, String idStr, XMLStreamReader parser) throws MismatchedDimensionException, XMLStreamException, FactoryException, TransformException {
+        idStr = idStr.substring(4);
+        logger.info(idStr + ":" + name + ":");
+
+        long id;
+        try {
+            id = Long.parseLong(idStr);
+        } catch (NumberFormatException nfe) {
+            BigDecimal bd = new BigDecimal(idStr);
+            id = bd.longValue();
+        }
+        logger.info(id + ":" + name + ":");
+        switch (name) {
+        case "RoadNode": {
+            System.out.println(">>>>>>>>>>>> RoadNode " + id);
+            //            return OSITNNode.create(id, parser);
+        }
+        case "RoadLink": {
+            System.out.println(">>>>>>>>>>>> RoadLink " + id);
+            //            return OSITNWay.create(id, parser);
+        }
+
+        }
+        return null;
+
+    }
+
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnInputFile.java b/core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnInputFile.java
index 562f60ce04..547f56e995 100755
--- a/core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnInputFile.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnInputFile.java
@@ -19,16 +19,6 @@
 
 import java.io.File;
 import java.io.IOException;
-import java.math.BigDecimal;
-
-import javax.xml.stream.XMLStreamConstants;
-import javax.xml.stream.XMLStreamException;
-
-import org.opengis.geometry.MismatchedDimensionException;
-import org.opengis.referencing.FactoryException;
-import org.opengis.referencing.operation.TransformException;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
 
 import com.graphhopper.reader.osgb.AbstractOsInputFile;
 
@@ -38,76 +28,8 @@
  *
  * @author Stuart Adam
  */
-public class OsItnInputFile extends AbstractOsInputFile<OSITNElement> {//implements Sink, Closeable {
-    //    private boolean eof;
-    //    private final InputStream bis;
-    //    // for xml parsing
-    //    private XMLStreamReader parser;
-    //    // for pbf parsing
-    //    private boolean binary = false;
-    //    private final BlockingQueue<RoutingElement> itemQueue;
-    //    private boolean hasIncomingData;
-    //    private int workerThreads = -1;
-    private static final Logger logger = LoggerFactory.getLogger(OsItnInputFile.class);
-    //    private final String name;
-
+public class OsItnInputFile extends AbstractOsInputFile<OSITNElement> {
     public OsItnInputFile(File file) throws IOException {
-        super(file);
-    }
-
-    @Override
-    protected OSITNElement getNextXML() throws XMLStreamException,
-    MismatchedDimensionException, FactoryException, TransformException {
-
-        int event = parser.next();
-        while (event != XMLStreamConstants.END_DOCUMENT) {
-            if (event == XMLStreamConstants.START_ELEMENT) {
-                String idStr = parser.getAttributeValue(null, "fid");
-                if (null == idStr) {
-                    idStr = parser.getAttributeValue(
-                            "http://www.opengis.net/gml/3.2", "id");
-                }
-                if (idStr != null) {
-                    String name = parser.getLocalName();
-                    idStr = idStr.substring(4);
-                    logger.info(idStr + ":" + name + ":");
-
-                    long id;
-                    try {
-                        id = Long.parseLong(idStr);
-                    } catch (NumberFormatException nfe) {
-                        BigDecimal bd = new BigDecimal(idStr);
-                        id = bd.longValue();
-                    }
-                    logger.info(id + ":" + name + ":");
-                    switch (name) {
-                    case "RoadNode": {
-                        return OSITNNode.create(id, parser);
-                    }
-                    case "RoadLink": {
-                        return OSITNWay.create(id, parser);
-                    }
-
-                    case "RoadLinkInformation":
-                    case "RoadRouteInformation": {
-                        return OSITNRelation.create(id, parser);
-                    }
-
-                    case "Road": {
-                        return OsItnMetaData.create(id, parser);
-                    }
-                    case "RoadNodeInformation": {
-                    }
-                    default: {
-
-                    }
-
-                    }
-                }
-            }
-            event = parser.next();
-        }
-        parser.close();
-        return null;
+        super(file, new OsItnRoutingElementFactory());
     }
 }
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnReader.java b/core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnReader.java
index a5bf340805..dd918bf369 100755
--- a/core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnReader.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnReader.java
@@ -35,7 +35,6 @@
 
 import com.graphhopper.coll.GHLongIntBTree;
 import com.graphhopper.coll.LongIntMap;
-import com.graphhopper.reader.DataReader;
 import com.graphhopper.reader.ITurnCostTableEntry;
 import com.graphhopper.reader.Node;
 import com.graphhopper.reader.OSMElement;
@@ -48,6 +47,7 @@
 import com.graphhopper.reader.RoutingElement;
 import com.graphhopper.reader.Way;
 import com.graphhopper.reader.dem.ElevationProvider;
+import com.graphhopper.reader.osgb.AbstractOsReader;
 import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.storage.GraphExtension;
 import com.graphhopper.storage.GraphStorage;
@@ -56,11 +56,9 @@
 import com.graphhopper.util.DistanceCalc;
 import com.graphhopper.util.DistanceCalc3D;
 import com.graphhopper.util.DistanceCalcEarth;
-import com.graphhopper.util.DouglasPeucker;
 import com.graphhopper.util.EdgeIteratorState;
 import com.graphhopper.util.Helper;
 import com.graphhopper.util.PointList;
-import com.graphhopper.util.StopWatch;
 import com.graphhopper.util.shapes.GHPoint;
 
 /*
@@ -107,7 +105,7 @@
  * @author Peter Karich
  */
 
-public class OsItnReader implements DataReader<Long> {
+public class OsItnReader extends AbstractOsReader<Long> {
 
     private static final String TURN_FROM_TO_VIA_FORMAT = "Turn from:{} to:{} via:{}";
     private static final String PRINT_INFO_FORMAT = "finished {}  processing. nodes:{}, osmIdMap.size:{}, osmIdMap:{}MB, nodeFlagsMap.size:{}, relFlagsMap.size:{} {}";
@@ -131,8 +129,6 @@
     private static final String RELFLAGS_FORMAT = "RELFLAGS: {} : {}";
     private static final String EDGE_ID_COORDS_TO_NODE_FLAGS_MAP_PUT_FORMAT = "edgeIdCoordsToNodeFlagsMap put: {} {} {} : {}";
     private static final String OS_ITN_READER_PRE_PROCESS_FORMAT = "OsItnReader.preProcess( {} )";
-    private static final String PREPROCESS_FORMAT = "preprocess: {}";
-    private static final String TIME_PASS1_PASS2_TOTAL_FORMAT = "time(pass1): {} pass2: {} total: ";
     private static final String WAY_ADDS_EDGES_FORMAT = "Way {} adds edges: {}";
     private static final String WAY_ADDS_BARRIER_EDGES_FORMAT = "Way {} adds barrier edges: {}";
     private static final String WE_HAVE_EVALUATED_WAY_NODES_FORMAT = "We have evaluated {} way nodes.";
@@ -170,10 +166,7 @@ public void process(ProcessData processData, OsItnInputFile in)
     private static final int MAX_GRADE_SEPARATION = 4;
     private long locations;
     private long skippedLocations;
-    private final GraphStorage graphStorage;
     private final NodeAccess nodeAccess;
-    private EncodingManager encodingManager = null;
-    private int workerThreads = -1;
     protected long zeroCounter = 0;
 
     private long successfulStartNoEntries = 0;
@@ -210,7 +203,6 @@ public void process(ProcessData processData, OsItnInputFile in)
     protected PillarInfo pillarInfo;
     private final DistanceCalc distCalc = new DistanceCalcEarth();
     private final DistanceCalc3D distCalc3D = new DistanceCalc3D();
-    private final DouglasPeucker simplifyAlgo = new DouglasPeucker();
     private boolean doSimplify = true;
     private int nextTowerId = 0;
     private int nextPillarId = 0;
@@ -218,7 +210,6 @@ public void process(ProcessData processData, OsItnInputFile in)
     private long newUniqueOsmId = -Long.MAX_VALUE;
     private ElevationProvider eleProvider = ElevationProvider.NOOP;
     private final boolean exitOnlyPillarNodeException = true;
-    private File routingFile;
 
     private TLongObjectMap<ItnNodePair> edgeIdToNodeMap;
     private TLongSet prohibitedWayIds;
@@ -235,7 +226,7 @@ public void process(ProcessData processData, OsItnInputFile in)
     private boolean addAdditionalTowerNodes;
 
     public OsItnReader(GraphStorage storage) {
-        this.graphStorage = storage;
+        super(storage);
         String addAdditionalTowerNodesString = graphStorage.getProperties().get("add.additional.tower.nodes");
         if (addAdditionalTowerNodesString != null && addAdditionalTowerNodesString.length()>0 ) {
             // Only parse this if it has been explicitly set otherwise set to true
@@ -254,37 +245,14 @@ public OsItnReader(GraphStorage storage) {
                 graphStorage.getDirectory());
     }
 
-    @Override
-    public void readGraph() throws IOException {
-        if (encodingManager == null)
-            throw new IllegalStateException("Encoding manager was not set.");
-
-        if (routingFile == null)
-            throw new IllegalStateException("No OS ITN file specified");
-
-        if (!routingFile.exists())
-            throw new IllegalStateException(
-                    "Your specified OS ITN file does not exist:"
-                            + routingFile.getAbsolutePath());
 
-        StopWatch sw1 = new StopWatch().start();
-        preProcess(routingFile);
-        sw1.stop();
-
-        StopWatch sw2 = new StopWatch().start();
-        writeOsm2Graph(routingFile);
-        sw2.stop();
-
-        logger.info(TIME_PASS1_PASS2_TOTAL_FORMAT, (int) sw1.getSeconds(),
-                (int) sw2.getSeconds(),
-                ((int) (sw1.getSeconds() + sw2.getSeconds())));
-    }
 
     /**
      * Preprocessing of ITN file to select nodes which are used for highways.
      * This allows a more compact graph data structure.
      */
-    void preProcess(File itnFile) {
+    @Override
+    protected void preProcess(File itnFile) {
         try {
             preProcessDirOrFile(itnFile);
         } catch (Exception ex) {
@@ -624,7 +592,8 @@ boolean filterWay(OSITNWay way) {
     /**
      * Creates the edges and nodes files from the specified osm file.
      */
-    private void writeOsm2Graph(File osmFile) {
+    @Override
+    protected void writeOsm2Graph(File osmFile) {
         int tmp = (int) Math.max(getNodeMap().getSize() / 50, 100);
         logger.error(CREATING_GRAPH_FOUND_NODES_PILLAR_TOWER_FORMAT,
                 nf(getNodeMap().getSize()), Helper.getMemInfo());
@@ -2000,26 +1969,6 @@ public OsItnReader setWorkerThreads(int numOfWorkers) {
         return this;
     }
 
-    @Override
-    public OsItnReader setElevationProvider(ElevationProvider eleProvider) {
-        if (eleProvider == null)
-            throw new IllegalStateException(
-                    "Use the NOOP elevation provider instead of null or don't call setElevationProvider");
-
-        if (!nodeAccess.is3D() && ElevationProvider.NOOP != eleProvider)
-            throw new IllegalStateException(
-                    "Make sure you graph accepts 3D data");
-
-        this.eleProvider = eleProvider;
-        return this;
-    }
-
-    @Override
-    public OsItnReader setOSMFile(File osmFile) {
-        this.routingFile = osmFile;
-        return this;
-    }
-
     private void printInfo(String str) {
         logger.info(PRINT_INFO_FORMAT, str, graphStorage.getNodes(),
                 getNodeMap().getSize(), getNodeMap().getMemoryUsage(),
@@ -2027,16 +1976,6 @@ private void printInfo(String str) {
                 Helper.getMemInfo());
     }
 
-    @Override
-    public String toString() {
-        return getClass().getSimpleName();
-    }
-
-    @Override
-    public GraphStorage getGraphStorage() {
-        return graphStorage;
-    }
-
     private long findViaNode(long fromOsm, long toOsm) {
         TLongObjectMap<ItnNodePair> nodeEdgeMap = getNodeEdgeMap();
         ItnNodePair itnNodePairFrom = nodeEdgeMap.get(fromOsm);
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnRoutingElementFactory.java b/core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnRoutingElementFactory.java
new file mode 100644
index 0000000000..ad4a6b1cf5
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnRoutingElementFactory.java
@@ -0,0 +1,57 @@
+package com.graphhopper.reader.osgb.itn;
+
+import java.math.BigDecimal;
+
+import javax.xml.stream.XMLStreamException;
+import javax.xml.stream.XMLStreamReader;
+
+import org.opengis.geometry.MismatchedDimensionException;
+import org.opengis.referencing.FactoryException;
+import org.opengis.referencing.operation.TransformException;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import com.graphhopper.reader.osgb.AbstractRoutingElementFactory;
+
+public class OsItnRoutingElementFactory extends AbstractRoutingElementFactory<OSITNElement>{
+
+    private static final Logger logger = LoggerFactory.getLogger(OsItnRoutingElementFactory.class);
+
+    @Override
+    public OSITNElement create(String name, String idStr, XMLStreamReader parser) throws MismatchedDimensionException, XMLStreamException, FactoryException, TransformException {
+        idStr = idStr.substring(4);
+        logger.info(idStr + ":" + name + ":");
+
+        long id;
+        try {
+            id = Long.parseLong(idStr);
+        } catch (NumberFormatException nfe) {
+            BigDecimal bd = new BigDecimal(idStr);
+            id = bd.longValue();
+        }
+        logger.info(id + ":" + name + ":");
+        switch (name) {
+        case "RoadNode": {
+            return OSITNNode.create(id, parser);
+        }
+        case "RoadLink": {
+            return OSITNWay.create(id, parser);
+        }
+
+        case "RoadLinkInformation":
+        case "RoadRouteInformation": {
+            return OSITNRelation.create(id, parser);
+        }
+
+        case "Road": {
+            return OsItnMetaData.create(id, parser);
+        }
+        case "RoadNodeInformation": {
+        }
+        default: {
+
+        }
+        }
+        return null;
+    }
+}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/hn/OsHnReaderTest.java b/core/src/test/java/com/graphhopper/reader/osgb/hn/OsHnReaderTest.java
new file mode 100644
index 0000000000..616bd8120d
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/hn/OsHnReaderTest.java
@@ -0,0 +1,37 @@
+package com.graphhopper.reader.osgb.hn;
+
+import org.junit.Before;
+import org.junit.Test;
+
+import com.graphhopper.GraphHopper;
+import com.graphhopper.routing.util.BikeFlagEncoder;
+import com.graphhopper.routing.util.BusFlagEncoder;
+import com.graphhopper.routing.util.CarFlagEncoder;
+import com.graphhopper.routing.util.EncodingManager;
+import com.graphhopper.routing.util.FlagEncoder;
+import com.graphhopper.routing.util.FootFlagEncoder;
+import com.graphhopper.storage.GraphStorage;
+
+public class OsHnReaderTest {
+
+    protected EncodingManager encodingManager;
+
+    @Before
+    public void createEncodingManager() {
+        FlagEncoder carEncoder = new CarFlagEncoder(5, 5, 3);
+        FlagEncoder busEncoder = new BusFlagEncoder(5, 5, 3);
+        // carEncoder = new RelationCarFlagEncoder(5, 5, 3);
+        FlagEncoder bikeEncoder = new BikeFlagEncoder(4, 2, 3);
+        FlagEncoder footEncoder = new FootFlagEncoder();
+        encodingManager = new EncodingManager(footEncoder, carEncoder, bikeEncoder);
+    }
+    @Test
+    public void testReader() {
+        String graphLoc = "./target/output/hn-gh";
+        String inputFile = "/data/Development/highways_network";
+        GraphHopper graphHopper = new GraphHopper().setInMemory().setOSMFile(inputFile).setGraphHopperLocation(graphLoc).setCHEnable(false).setEncodingManager(encodingManager).setAsHnReader();
+        graphHopper.importOrLoad();
+        GraphStorage graph = graphHopper.getGraph();
+
+    }
+}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/NoEntryTest.java b/core/src/test/java/com/graphhopper/reader/osgb/itn/NoEntryTest.java
similarity index 99%
rename from core/src/test/java/com/graphhopper/reader/osgb/NoEntryTest.java
rename to core/src/test/java/com/graphhopper/reader/osgb/itn/NoEntryTest.java
index bcd770c466..504d7050ce 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/NoEntryTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/itn/NoEntryTest.java
@@ -1,4 +1,4 @@
-package com.graphhopper.reader.osgb;
+package com.graphhopper.reader.osgb.itn;
 
 import static com.graphhopper.util.GHUtility.count;
 import static org.junit.Assert.assertEquals;
@@ -12,6 +12,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.graphhopper.reader.osgb.AbstractOsItnReaderTest;
 import com.graphhopper.reader.osgb.itn.OsItnReader;
 import com.graphhopper.routing.util.DefaultEdgeFilter;
 import com.graphhopper.routing.util.EdgeFilter;
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/OsItnReaderTest.java b/core/src/test/java/com/graphhopper/reader/osgb/itn/OsItnReaderTest.java
similarity index 99%
rename from core/src/test/java/com/graphhopper/reader/osgb/OsItnReaderTest.java
rename to core/src/test/java/com/graphhopper/reader/osgb/itn/OsItnReaderTest.java
index 206d709779..41bb5ef394 100755
--- a/core/src/test/java/com/graphhopper/reader/osgb/OsItnReaderTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/itn/OsItnReaderTest.java
@@ -15,7 +15,7 @@
  *  See the License for the specific language governing permissions and
  *  limitations under the License.
  */
-package com.graphhopper.reader.osgb;
+package com.graphhopper.reader.osgb.itn;
 
 import static com.graphhopper.util.GHUtility.count;
 import static org.junit.Assert.assertEquals;
@@ -30,6 +30,7 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
+import com.graphhopper.reader.osgb.AbstractOsItnReaderTest;
 import com.graphhopper.reader.osgb.itn.OsItnReader;
 import com.graphhopper.routing.util.DefaultEdgeFilter;
 import com.graphhopper.routing.util.EdgeFilter;
diff --git a/tools/src/main/java/com/graphhopper/tools/routeExtractor/AbstractProblemRouteExtractor.java b/tools/src/main/java/com/graphhopper/tools/routeExtractor/AbstractProblemRouteExtractor.java
index f0a6a6c6ab..a798a661da 100644
--- a/tools/src/main/java/com/graphhopper/tools/routeExtractor/AbstractProblemRouteExtractor.java
+++ b/tools/src/main/java/com/graphhopper/tools/routeExtractor/AbstractProblemRouteExtractor.java
@@ -83,7 +83,8 @@ void setInnerProcess(final ProcessVisitor<T> process) {
         void processVisitor(final File file) throws XMLStreamException, IOException, TransformerConfigurationException, ParserConfigurationException, SAXException, TransformerException, XPathExpressionException, MismatchedDimensionException, FactoryException, TransformException {
             OsItnInputFile in = null;
             try {
-                in = new OsItnInputFile(file).setWorkerThreads(1).open();
+                in = new OsItnInputFile(file);
+                in.setWorkerThreads(1).open();
                 RoutingElement item;
                 while ((item = in.getNext()) != null) {
                     innerProcess.processVisitor(item);
