diff --git a/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/LOTNodeExtractor.java b/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/LOTNodeExtractor.java
index 341564db37..24e0bb402b 100644
--- a/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/LOTNodeExtractor.java
+++ b/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/LOTNodeExtractor.java
@@ -22,25 +22,25 @@
     private final List<Integer> viaPoints;
     private final List<Integer> entryExitPoints;
     private final Map<Integer, List<Integer>> viaPointToLOTNodes;
-    private final Map<Pair<Integer, Integer>, Double> viaPointToEntryExitPointDistances;
+    private final Map<Pair<Integer, Integer>, Path> viaPointToEntryExitPointPath;
 
-    private LOTNodeExtractor(final Graph graph, final RoutingAlgorithmFactory routingAlgorithmFactory, final AlgorithmOptions algorithmOptions, final EdgeExplorer edgeExplorer,
+    private LOTNodeExtractor(final Graph graph, final RoutingAlgorithmFactory routingAlgorithmFactory, final AlgorithmOptions algorithmOptions,
                              final List<Integer> viaPoints, final List<Integer> entryExitPoints) {
         this.graph = graph;
         this.routingAlgorithmFactory = routingAlgorithmFactory;
         this.algorithmOptions = algorithmOptions;
-        this.edgeExplorer = edgeExplorer;
+        this.edgeExplorer = graph.createEdgeExplorer();
         this.viaPoints = viaPoints;
         this.entryExitPoints = entryExitPoints;
         this.viaPointToLOTNodes = new HashMap<>();
-        this.viaPointToEntryExitPointDistances = new HashMap<>();
+        this.viaPointToEntryExitPointPath = new HashMap<>();
 
         this.extractData();
     }
 
     public static LOTNodeExtractor createExtractedData(final Graph graph, final RoutingAlgorithmFactory routingAlgorithmFactory, final AlgorithmOptions algorithmOptions,
-                                                       final EdgeExplorer edgeExplorer, final List<Integer> viaPoints, final List<Integer> entryExitPoints) {
-        return new LOTNodeExtractor(graph, routingAlgorithmFactory, algorithmOptions, edgeExplorer, viaPoints, entryExitPoints);
+                                                       final List<Integer> viaPoints, final List<Integer> entryExitPoints) {
+        return new LOTNodeExtractor(graph, routingAlgorithmFactory, algorithmOptions, viaPoints, entryExitPoints);
     }
 
     private void extractData() {
@@ -57,14 +57,14 @@ private void saveDistancesBetweenAllViaPointsAndEntryExitPoints() {
     }
 
     private void saveDistanceBetween(final int viaPoint, final int entryExitPoint) {
-        final double distance = this.calcDistanceBetween(viaPoint, entryExitPoint);
-        this.viaPointToEntryExitPointDistances.put(new Pair<>(viaPoint, entryExitPoint), distance);
+        final Path path = this.calcPathBetween(viaPoint, entryExitPoint);
+        this.viaPointToEntryExitPointPath.put(new Pair<>(viaPoint, entryExitPoint), path);
     }
 
-    private double calcDistanceBetween(final int viaPoint, final int entryExitPoint) {
+    private Path calcPathBetween(final int viaPoint, final int entryExitPoint) {
         final RoutingAlgorithm routingAlgorithm = this.routingAlgorithmFactory.createAlgo(graph, algorithmOptions);
         final Path path = routingAlgorithm.calcPath(viaPoint, entryExitPoint);
-        return path.getDistance();
+        return path;
     }
 
     private void saveLOTNodesForEachViaPoint() {
@@ -83,7 +83,7 @@ private void saveLOTNodesFor(final int viaPoint) {
         final List<Integer> lotNodes = new ArrayList<>(entryExitPoints.size());
 
         for (final int possibleLotNode : this.entryExitPoints) {
-            if (hasPossibleLotNodeShorterDistanceNeighbor(viaPoint, possibleLotNode)) {
+            if (!hasPossibleLotNodeShorterDistanceNeighbor(viaPoint, possibleLotNode)) {
                 lotNodes.add(possibleLotNode);
             }
         }
@@ -94,13 +94,14 @@ private void saveLOTNodesFor(final int viaPoint) {
     private boolean hasPossibleLotNodeShorterDistanceNeighbor(final int viaPoint, final int possibleLotNode) {
         final EdgeIterator neighborIterator = this.edgeExplorer.setBaseNode(possibleLotNode);
         boolean betterNeighborFound = false;
-        final double distanceOfThisPossibleLotNode = this.viaPointToEntryExitPointDistances.get(new Pair<>(viaPoint, possibleLotNode));
+        final double distanceOfThisPossibleLotNode = this.viaPointToEntryExitPointPath.get(new Pair<>(viaPoint, possibleLotNode)).getDistance();
 
         while (neighborIterator.next()) {
             final int neighbor = neighborIterator.getAdjNode();
-            final Double otherDistance = this.viaPointToEntryExitPointDistances.get(new Pair<>(viaPoint, neighbor));
+            final Path othersShortestPath = this.viaPointToEntryExitPointPath.get(new Pair<>(viaPoint, neighbor));
 
-            if (otherDistance != null) {
+            if (othersShortestPath != null) {
+                final double otherDistance = othersShortestPath.getDistance();
                 betterNeighborFound |= distanceOfThisPossibleLotNode > otherDistance;
             }
         }
@@ -112,6 +113,10 @@ private boolean hasPossibleLotNodeShorterDistanceNeighbor(final int viaPoint, fi
         return this.viaPointToLOTNodes.get(viaPoint);
     }
 
+    public Path getLotNodePathFor(final int viaPoint, final int lotNode) {
+        return this.viaPointToEntryExitPointPath.get(new Pair<>(viaPoint, lotNode));
+    }
+
     public int size() {
         return this.viaPointToLOTNodes.size();
     }
diff --git a/core/src/test/java/com/graphhopper/routing/template/polygonRoutingUtil/LOTNodeExtractorTest.java b/core/src/test/java/com/graphhopper/routing/template/polygonRoutingUtil/LOTNodeExtractorTest.java
index 622805110f..248058941c 100644
--- a/core/src/test/java/com/graphhopper/routing/template/polygonRoutingUtil/LOTNodeExtractorTest.java
+++ b/core/src/test/java/com/graphhopper/routing/template/polygonRoutingUtil/LOTNodeExtractorTest.java
@@ -1,5 +1,104 @@
 package com.graphhopper.routing.template.polygonRoutingUtil;
 
+import com.graphhopper.routing.AlgorithmOptions;
+import com.graphhopper.routing.RoutingAlgorithmFactory;
+import com.graphhopper.routing.RoutingAlgorithmFactorySimple;
+import com.graphhopper.routing.template.util.PolygonRoutingTestGraph;
+import com.graphhopper.storage.Graph;
+import com.graphhopper.util.EdgeExplorer;
+import org.junit.Before;
+import org.junit.Test;
+
+import java.lang.reflect.Array;
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+
+import static org.junit.Assert.assertEquals;
+
 public class LOTNodeExtractorTest {
+    private final PolygonRoutingTestGraph graphMocker = new PolygonRoutingTestGraph();
+    private LOTNodeExtractor extractor;
+
+    @Before
+    public void createDefaultTestCase() {
+        final Graph graph = graphMocker.graph;
+        final RoutingAlgorithmFactory routingAlgorithmFactory = new RoutingAlgorithmFactorySimple();
+        final AlgorithmOptions algorithmOptions = this.graphMocker.algorithmOptions;
+        List<Integer> viaPoints = createViaPoints();
+        List<Integer> entryExitPoints = createEntryExitPoints();
+
+        this.extractor =  LOTNodeExtractor.createExtractedData(graph, routingAlgorithmFactory, algorithmOptions, viaPoints, entryExitPoints);
+    }
+
+    private List<Integer> createViaPoints() {
+        final List<Integer> viaPoints = new ArrayList<Integer>();
+        viaPoints.add(0);
+        viaPoints.add(2);
+        return viaPoints;
+    }
+
+    private List<Integer> createEntryExitPoints() {
+        final List<Integer> entryExitPoints = new ArrayList<>();
+        entryExitPoints.add(28);
+        entryExitPoints.add(29);
+        entryExitPoints.add(30);
+        entryExitPoints.add(31);
+
+        entryExitPoints.add(43);
+        entryExitPoints.add(44);
+        entryExitPoints.add(45);
+        return entryExitPoints;
+    }
+
+    @Test
+    public void assertCorrectSize() {
+        assertEquals(2, this.extractor.size());
+    }
+
+    @Test
+    public void correctLotNodesForViaPoint0() {
+        final List<Integer> lotNodesForViaPoint0 = createLotNodesForViaPoint0();
+
+        assertEquals(lotNodesForViaPoint0, this.extractor.getLotNodesFor(0));
+    }
+
+    private List<Integer> createLotNodesForViaPoint0() {
+        final List<Integer> lotNodesForViaPoint0 = new ArrayList<>();
+        lotNodesForViaPoint0.add(28);
+        lotNodesForViaPoint0.add(44);
+        return lotNodesForViaPoint0;
+    }
+
+    @Test
+    public void correctLotNodesForViaPoint2() {
+        final List<Integer> lotNodesForViaPoint2 = createLotNodesForViaPoint2();
+
+        assertEquals(lotNodesForViaPoint2, this.extractor.getLotNodesFor(2));
+    }
+
+    private List<Integer> createLotNodesForViaPoint2() {
+        final List<Integer> lotNodesForViaPoint2 = new ArrayList<>();
+        lotNodesForViaPoint2.add(28);
+        lotNodesForViaPoint2.add(45);
+        return lotNodesForViaPoint2;
+    }
+
+    @Test
+    public void correctPathsViaPoint0() {
+        final List<Integer> path0To28 = new ArrayList<>(Arrays.asList(new Integer[] {0, 1, 28}));
+        final List<Integer> path0To44 = new ArrayList<>(Arrays.asList(new Integer[] {0, 7, 44}));
+
+        assertEquals(path0To28, this.extractor.getLotNodePathFor(0, 28).getNodesInPathOrder());
+        assertEquals(path0To44, this.extractor.getLotNodePathFor(0, 44).getNodesInPathOrder());
+    }
+
+    @Test
+    public void correctPathsViaPoint2() {
+        final List<Integer> path2To28 = new ArrayList<>(Arrays.asList(new Integer[] {2, 28}));
+        final List<Integer> path2To44 = new ArrayList<>(Arrays.asList(new Integer[] {2, 1, 45}));
 
+        assertEquals(path2To28, this.extractor.getLotNodePathFor(2, 28).getNodesInPathOrder());
+        assertEquals(path2To44, this.extractor.getLotNodePathFor(2, 45).getNodesInPathOrder());
+    }
 }
