diff --git a/core/src/main/java/com/graphhopper/GraphHopper.java b/core/src/main/java/com/graphhopper/GraphHopper.java
index b047f17bed..68569c6a72 100644
--- a/core/src/main/java/com/graphhopper/GraphHopper.java
+++ b/core/src/main/java/com/graphhopper/GraphHopper.java
@@ -21,7 +21,7 @@
 import com.graphhopper.reader.OSMReader;
 import com.graphhopper.reader.dem.CGIARProvider;
 import com.graphhopper.reader.dem.ElevationProvider;
-import com.graphhopper.reader.dem.SRTMProvider;
+import com.graphhopper.reader.dem.LowPrecisionSRTMProvider;
 import com.graphhopper.routing.*;
 import com.graphhopper.routing.ch.PrepareContractionHierarchies;
 import com.graphhopper.routing.util.*;
@@ -535,7 +535,7 @@ public GraphHopper init( CmdArgs args )
         ElevationProvider tmpProvider = ElevationProvider.NOOP;
         if (eleProviderStr.equalsIgnoreCase("srtm"))
         {
-            tmpProvider = new SRTMProvider();
+            tmpProvider = new LowPrecisionSRTMProvider();
         } else if (eleProviderStr.equalsIgnoreCase("cgiar"))
         {
             CGIARProvider cgiarProvider = new CGIARProvider();
diff --git a/core/src/main/java/com/graphhopper/reader/dem/LowPrecisionSRTMProvider.java b/core/src/main/java/com/graphhopper/reader/dem/LowPrecisionSRTMProvider.java
new file mode 100644
index 0000000000..c263b1bbc0
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/dem/LowPrecisionSRTMProvider.java
@@ -0,0 +1,116 @@
+package com.graphhopper.reader.dem;
+
+import com.graphhopper.util.Helper;
+import gnu.trove.map.hash.TIntObjectHashMap;
+
+import java.io.IOException;
+import java.io.InputStream;
+import java.io.InputStreamReader;
+
+public class LowPrecisionSRTMProvider extends SRTMProvider
+{
+    private final TIntObjectHashMap<String> areas = new TIntObjectHashMap<String>();
+
+    public static void main( String[] args ) throws IOException
+    {
+        SRTMProvider provider = new LowPrecisionSRTMProvider();
+        // 1046
+        System.out.println(provider.getEle(47.468668, 14.575127));
+        // 1113
+        System.out.println(provider.getEle(47.467753, 14.573911));
+
+        // 1946
+        System.out.println(provider.getEle(46.468835, 12.578777));
+
+        // 845
+        System.out.println(provider.getEle(48.469123, 9.576393));
+
+        // 1113 vs new:
+        provider.setCalcMean(true);
+        System.out.println(provider.getEle(47.467753, 14.573911));
+    }
+
+    public LowPrecisionSRTMProvider()
+    {
+        WIDTH = 1201;
+        baseUrl = "http://dds.cr.usgs.gov/srtm/version2_1/SRTM3/";
+        // move to explicit calls?
+        init();
+    }
+
+    /**
+     * The URLs are a bit ugly and so we need to find out which area name a certain lat,lon
+     * coordinate has.
+     */
+    private SRTMProvider init()
+    {
+        try
+        {
+            String strs[] =
+            {
+                "Africa", "Australia", "Eurasia", "Islands", "North_America", "South_America"
+            };
+            for (String str : strs)
+            {
+                InputStream is = getClass().getResourceAsStream(str + "_names.txt");
+                for (String line : Helper.readFile(new InputStreamReader(is, Helper.UTF_CS)))
+                {
+                    int lat = Integer.parseInt(line.substring(1, 3));
+                    if (line.substring(0, 1).charAt(0) == 'S')
+                        lat = -lat;
+
+                    int lon = Integer.parseInt(line.substring(4, 7));
+                    if (line.substring(3, 4).charAt(0) == 'W')
+                        lon = -lon;
+
+                    int intKey = calcIntKey(lat, lon);
+                    String key = areas.put(intKey, str);
+                    if (key != null)
+                        throw new IllegalStateException("do not overwrite existing! key " + intKey + " " + key + " vs. " + str);
+                }
+            }
+            return this;
+        } catch (Exception ex)
+        {
+            throw new IllegalStateException("Cannot load area names from classpath", ex);
+        }
+    }
+
+    String getFileString( double lat, double lon )
+    {
+        int intKey = calcIntKey(lat, lon);
+        String str = areas.get(intKey);
+        if (str == null)
+            return null;
+
+        int minLat = Math.abs(down(lat));
+        int minLon = Math.abs(down(lon));
+        str += "/";
+        if (lat >= 0)
+            str += "N";
+        else
+            str += "S";
+
+        if (minLat < 10)
+            str += "0";
+        str += minLat;
+
+        if (lon >= 0)
+            str += "E";
+        else
+            str += "W";
+
+        if (minLon < 10)
+            str += "0";
+        if (minLon < 100)
+            str += "0";
+        str += minLon;
+        return str;
+    }
+
+    @Override
+    public String toString()
+    {
+        return "SRTM";
+    }
+}
diff --git a/core/src/main/java/com/graphhopper/reader/dem/SRTMProvider.java b/core/src/main/java/com/graphhopper/reader/dem/SRTMProvider.java
index 80c6908bb1..e69c65c016 100644
--- a/core/src/main/java/com/graphhopper/reader/dem/SRTMProvider.java
+++ b/core/src/main/java/com/graphhopper/reader/dem/SRTMProvider.java
@@ -21,7 +21,6 @@
 import com.graphhopper.storage.*;
 import com.graphhopper.util.BitUtil;
 import com.graphhopper.util.Downloader;
-import com.graphhopper.util.Helper;
 import gnu.trove.map.hash.TIntObjectHashMap;
 import java.io.*;
 import java.net.SocketTimeoutException;
@@ -39,48 +38,23 @@
  * <p>
  * @author Peter Karich
  */
-public class SRTMProvider implements ElevationProvider
+public abstract class SRTMProvider implements ElevationProvider
 {
-    public static void main( String[] args ) throws IOException
-    {
-        SRTMProvider provider = new SRTMProvider();
-        // 1046
-        System.out.println(provider.getEle(47.468668, 14.575127));
-        // 1113
-        System.out.println(provider.getEle(47.467753, 14.573911));
-
-        // 1946
-        System.out.println(provider.getEle(46.468835, 12.578777));
-
-        // 845
-        System.out.println(provider.getEle(48.469123, 9.576393));
-
-        // 1113 vs new: 
-        provider.setCalcMean(true);
-        System.out.println(provider.getEle(47.467753, 14.573911));
-    }
 
     private static final BitUtil BIT_UTIL = BitUtil.BIG;
     private final Logger logger = LoggerFactory.getLogger(getClass());
-    private final int WIDTH = 1201;
+    protected int WIDTH;
     private Directory dir;
     private DAType daType = DAType.MMAP;
     private Downloader downloader = new Downloader("GraphHopper SRTMReader").setTimeout(10000);
     private File cacheDir = new File("/tmp/srtm");
     // use a map as an array is not quite useful if we want to hold only parts of the world
     private final TIntObjectHashMap<HeightTile> cacheData = new TIntObjectHashMap<HeightTile>();
-    private final TIntObjectHashMap<String> areas = new TIntObjectHashMap<String>();
     private final double precision = 1e7;
     private final double invPrecision = 1 / precision;
     // mirror: base = "http://mirror.ufs.ac.za/datasets/SRTM3/"
-    private String baseUrl = "http://dds.cr.usgs.gov/srtm/version2_1/SRTM3/";
     private boolean calcMean = false;
-
-    public SRTMProvider()
-    {
-        // move to explicit calls?
-        init();
-    }
+    protected String baseUrl;
 
     @Override
     public void setCalcMean( boolean calcMean )
@@ -88,46 +62,9 @@ public void setCalcMean( boolean calcMean )
         this.calcMean = calcMean;
     }
 
-    /**
-     * The URLs are a bit ugly and so we need to find out which area name a certain lat,lon
-     * coordinate has.
-     */
-    private SRTMProvider init()
-    {
-        try
-        {
-            String strs[] =
-            {
-                "Africa", "Australia", "Eurasia", "Islands", "North_America", "South_America"
-            };
-            for (String str : strs)
-            {
-                InputStream is = getClass().getResourceAsStream(str + "_names.txt");
-                for (String line : Helper.readFile(new InputStreamReader(is, Helper.UTF_CS)))
-                {
-                    int lat = Integer.parseInt(line.substring(1, 3));
-                    if (line.substring(0, 1).charAt(0) == 'S')
-                        lat = -lat;
-
-                    int lon = Integer.parseInt(line.substring(4, 7));
-                    if (line.substring(3, 4).charAt(0) == 'W')
-                        lon = -lon;
-
-                    int intKey = calcIntKey(lat, lon);
-                    String key = areas.put(intKey, str);
-                    if (key != null)
-                        throw new IllegalStateException("do not overwrite existing! key " + intKey + " " + key + " vs. " + str);
-                }
-            }
-            return this;
-        } catch (Exception ex)
-        {
-            throw new IllegalStateException("Cannot load area names from classpath", ex);
-        }
-    }
 
     // use int key instead of string for lower memory usage
-    private int calcIntKey( double lat, double lon )
+    protected int calcIntKey( double lat, double lon )
     {
         // we could use LinearKeyAlgo but this is simpler as we only need integer precision:
         return (down(lat) + 90) * 1000 + down(lon) + 180;
@@ -179,37 +116,7 @@ int down( double val )
         return intVal - 1;
     }
 
-    String getFileString( double lat, double lon )
-    {
-        int intKey = calcIntKey(lat, lon);
-        String str = areas.get(intKey);
-        if (str == null)
-            return null;
-
-        int minLat = Math.abs(down(lat));
-        int minLon = Math.abs(down(lon));
-        str += "/";
-        if (lat >= 0)
-            str += "N";
-        else
-            str += "S";
-
-        if (minLat < 10)
-            str += "0";
-        str += minLat;
-
-        if (lon >= 0)
-            str += "E";
-        else
-            str += "W";
-
-        if (minLon < 10)
-            str += "0";
-        if (minLon < 100)
-            str += "0";
-        str += minLon;
-        return str;
-    }
+    abstract String getFileString(double lat, double lon);
 
     @Override
     public double getEle( double lat, double lon )
@@ -327,12 +234,6 @@ public void release()
             dir.clear();
     }
 
-    @Override
-    public String toString()
-    {
-        return "SRTM";
-    }
-
     private Directory getDirectory()
     {
         if (dir != null)
diff --git a/core/src/test/java/com/graphhopper/GraphHopperIT.java b/core/src/test/java/com/graphhopper/GraphHopperIT.java
index 55db22a928..f893fa993c 100644
--- a/core/src/test/java/com/graphhopper/GraphHopperIT.java
+++ b/core/src/test/java/com/graphhopper/GraphHopperIT.java
@@ -17,7 +17,7 @@
  */
 package com.graphhopper;
 
-import com.graphhopper.reader.dem.SRTMProvider;
+import com.graphhopper.reader.dem.LowPrecisionSRTMProvider;
 import com.graphhopper.routing.AlgorithmOptions;
 import com.graphhopper.routing.RoutingAlgorithmFactorySimple;
 import com.graphhopper.routing.util.*;
@@ -199,7 +199,7 @@ public void testSRTMWithInstructions() throws Exception
                 setGraphHopperLocation(tmpGraphFile).
                 setEncodingManager(new EncodingManager(importVehicles));
 
-        tmpHopper.setElevationProvider(new SRTMProvider().setCacheDir(new File("./files/")));
+        tmpHopper.setElevationProvider(new LowPrecisionSRTMProvider().setCacheDir(new File("./files/")));
         tmpHopper.importOrLoad();
 
         GHResponse rsp = tmpHopper.route(new GHRequest(43.730729, 7.421288, 43.727697, 7.419199).
diff --git a/core/src/test/java/com/graphhopper/reader/OSMReaderTest.java b/core/src/test/java/com/graphhopper/reader/OSMReaderTest.java
index 7cdfdf5867..2eb4ceae53 100644
--- a/core/src/test/java/com/graphhopper/reader/OSMReaderTest.java
+++ b/core/src/test/java/com/graphhopper/reader/OSMReaderTest.java
@@ -18,6 +18,8 @@
 package com.graphhopper.reader;
 
 import static org.junit.Assert.*;
+
+import com.graphhopper.reader.dem.LowPrecisionSRTMProvider;
 import gnu.trove.list.TLongList;
 
 import java.io.File;
@@ -36,7 +38,6 @@
 
 import com.graphhopper.GraphHopper;
 import com.graphhopper.reader.dem.ElevationProvider;
-import com.graphhopper.reader.dem.SRTMProvider;
 import com.graphhopper.routing.util.*;
 import com.graphhopper.storage.*;
 import com.graphhopper.util.EdgeExplorer;
@@ -684,7 +685,7 @@ public void testReadEleFromDataProvider()
     {
         GraphHopper hopper = new GraphHopperTest("test-osm5.xml");
         // get N10E046.hgt.zip
-        ElevationProvider provider = new SRTMProvider();
+        ElevationProvider provider = new LowPrecisionSRTMProvider();
         provider.setCacheDir(new File("./files"));
         hopper.setElevationProvider(provider);
         hopper.importOrLoad();
diff --git a/core/src/test/java/com/graphhopper/reader/dem/SRTMProviderTest.java b/core/src/test/java/com/graphhopper/reader/dem/LowPrecisionSRTMProviderTest.java
similarity index 96%
rename from core/src/test/java/com/graphhopper/reader/dem/SRTMProviderTest.java
rename to core/src/test/java/com/graphhopper/reader/dem/LowPrecisionSRTMProviderTest.java
index 79631a5a02..31300c2d47 100644
--- a/core/src/test/java/com/graphhopper/reader/dem/SRTMProviderTest.java
+++ b/core/src/test/java/com/graphhopper/reader/dem/LowPrecisionSRTMProviderTest.java
@@ -30,14 +30,14 @@
  *
  * @author Peter Karich
  */
-public class SRTMProviderTest
+public class LowPrecisionSRTMProviderTest
 {
-    SRTMProvider instance;
+    LowPrecisionSRTMProvider instance;
 
     @Before
     public void setUp()
     {
-        instance = new SRTMProvider();
+        instance = new LowPrecisionSRTMProvider();
     }
 
     @After
diff --git a/core/src/test/java/com/graphhopper/routing/RoutingAlgorithmIT.java b/core/src/test/java/com/graphhopper/routing/RoutingAlgorithmIT.java
index 6252757154..15be3bf805 100644
--- a/core/src/test/java/com/graphhopper/routing/RoutingAlgorithmIT.java
+++ b/core/src/test/java/com/graphhopper/routing/RoutingAlgorithmIT.java
@@ -17,6 +17,7 @@
  */
 package com.graphhopper.routing;
 
+import com.graphhopper.reader.dem.LowPrecisionSRTMProvider;
 import com.graphhopper.routing.util.TestAlgoCollector;
 import com.graphhopper.GraphHopper;
 import com.graphhopper.reader.PrinctonReader;
@@ -507,7 +508,7 @@ Graph runAlgo( TestAlgoCollector testCollector, String osmFile,
                     setGraphHopperLocation(graphFile).
                     setEncodingManager(new EncodingManager(importVehicles));
             if (is3D)
-                hopper.setElevationProvider(new SRTMProvider().setCacheDir(new File("./files")));
+                hopper.setElevationProvider(new LowPrecisionSRTMProvider().setCacheDir(new File("./files")));
 
             hopper.importOrLoad();
 
