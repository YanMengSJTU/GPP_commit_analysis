diff --git a/core/src/main/java/com/graphhopper/routing/util/AbstractAvoidanceDecorator.java b/core/src/main/java/com/graphhopper/routing/util/AbstractAvoidanceDecorator.java
index 3810f54266..a1f166c0e1 100644
--- a/core/src/main/java/com/graphhopper/routing/util/AbstractAvoidanceDecorator.java
+++ b/core/src/main/java/com/graphhopper/routing/util/AbstractAvoidanceDecorator.java
@@ -40,7 +40,7 @@ public double getDouble(long flags) {
 		return avoidanceType;
 	}
 
-	public long handleWayTags(Way way, long encoded) {
+	public long handleWayTags(Way way) {
 		long avoidanceValue = 0;
 	
 		for (EdgeAttribute aType : getEdgeAttributesOfInterest()) {
@@ -48,7 +48,7 @@ public long handleWayTags(Way way, long encoded) {
 				avoidanceValue += aType.getValue();
 			}
 		}
-		return wayTypeEncoder.setValue(encoded, avoidanceValue);
+		return wayTypeEncoder.setValue(0L, avoidanceValue);
 	}
 
 	private String getWayName(long wayType, Translation tr) {
diff --git a/core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java
index 6907915b99..d99517c6bf 100644
--- a/core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java
@@ -242,13 +242,17 @@ public abstract long handleRelationTags(Relation relation,
 	 * Analyze properties of a way and create the routing flags. This method is
 	 * called in the second parsing step.
 	 */
-	public long handleWayTags(Way way, long allowed, long relationFlags) {
+	public abstract long handleWayTags( Way way, long allowed, long relationFlags );
+	
+	
+	public long handleWayTagsDecorators(Way way) {
+		long flags = 0;
 		if (null != encoderDecorators) {
 			for (EncoderDecorator decorator : encoderDecorators) {
-				relationFlags = decorator.handleWayTags(way, relationFlags);
+				flags |= decorator.handleWayTags(way);
 			}
 		}
-		return relationFlags;
+		return flags;
 	};
 
 	/**
diff --git a/core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
index a3d6c27d09..2b908b2a07 100644
--- a/core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
@@ -369,8 +369,8 @@ public long handleWayTags( Way way, long allowed, long relationFlags )
             encoded = handleFerryTags(way, defaultSpeedMap.get("living_street"), defaultSpeedMap.get("service"), defaultSpeedMap.get("residential"));
             encoded |= directionBitMask;
         }
-
-        return encoded;
+        long anno = super.handleWayTagsDecorators(way);
+        return encoded |= anno;
     }
 
     public String getWayInfo(Way way )
diff --git a/core/src/main/java/com/graphhopper/routing/util/EncoderDecorator.java b/core/src/main/java/com/graphhopper/routing/util/EncoderDecorator.java
index 4a6e2e1602..84975c7e58 100644
--- a/core/src/main/java/com/graphhopper/routing/util/EncoderDecorator.java
+++ b/core/src/main/java/com/graphhopper/routing/util/EncoderDecorator.java
@@ -6,7 +6,7 @@
 
 public interface EncoderDecorator {
 	int defineWayBits(int shift);
-	long handleWayTags(Way way, long encoded);
+	long handleWayTags(Way way);
 	public InstructionAnnotation getAnnotation(long flags, Translation tr);
 	long getBitMask(String[] attributes);
 	double getDouble(long flags);
diff --git a/core/src/main/java/com/graphhopper/routing/util/FootFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/FootFlagEncoder.java
index 35c19a9e6b..90508b7e50 100644
--- a/core/src/main/java/com/graphhopper/routing/util/FootFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/FootFlagEncoder.java
@@ -299,9 +299,9 @@ public long handleWayTags( Way way, long allowed, long relationFlags )
             encoded = handleFerryTags(way, SLOW_SPEED, MEAN_SPEED, FERRY_SPEED);
             encoded |= directionBitMask;
         }
-        long anno = super.handleWayTags(way, allowed, relationFlags);
+        long anno = super.handleWayTagsDecorators(way);
         
-        return encoded |= anno;
+        return encoded|= anno;
     }
 
     @Override
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/QuarryOrPitTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/QuarryOrPitTest.java
index f05499e808..f64554a70a 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/QuarryOrPitTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/QuarryOrPitTest.java
@@ -27,7 +27,6 @@ public void init() {
 	    }
 
 	    @Test
-        @Ignore
 	    public void testVisitWayAttribute() throws Exception {
 	        visitor.visitWayAttribute("quarryorpit", way);
 	        verify(way).setTag("natural", "excavation");
diff --git a/core/src/test/java/com/graphhopper/routing/util/OsAvoidanceDecoratorTest.java b/core/src/test/java/com/graphhopper/routing/util/OsAvoidanceDecoratorTest.java
index 412b33a491..57aa6d00c5 100644
--- a/core/src/test/java/com/graphhopper/routing/util/OsAvoidanceDecoratorTest.java
+++ b/core/src/test/java/com/graphhopper/routing/util/OsAvoidanceDecoratorTest.java
@@ -21,7 +21,7 @@ public void defineWayBits() {
     public void testBoulderAttributeStorage() {
         Way way = new OSITNWay(1L);
         way.setTag("natural", "boulders");
-        long wayFlag = osAvoidances.handleWayTags(way,0);
+        long wayFlag = osAvoidances.handleWayTags(way);
         assertEquals(OsAvoidanceDecorator.AvoidanceType.Boulders.getValue(), wayFlag);
 
     }
@@ -30,7 +30,7 @@ public void testBoulderAttributeStorage() {
     public void testCliffAttributeStorage() {
         Way way = new OSITNWay(1L);
         way.setTag("natural", "cliff");
-        long wayFlag = osAvoidances.handleWayTags(way,0);
+        long wayFlag = osAvoidances.handleWayTags(way);
         assertEquals(OsAvoidanceDecorator.AvoidanceType.Cliff.getValue(), wayFlag);
 
     }
@@ -39,7 +39,7 @@ public void testCliffAttributeStorage() {
     public void testMarshAttributeStorage() {
         Way way = new OSITNWay(1L);
         way.setTag("wetland", "marsh");
-        long wayFlag = osAvoidances.handleWayTags(way,0);
+        long wayFlag = osAvoidances.handleWayTags(way);
         assertEquals(OsAvoidanceDecorator.AvoidanceType.Marsh.getValue(), wayFlag);
 
     }
@@ -48,7 +48,7 @@ public void testMarshAttributeStorage() {
     public void testMudAttributeStorage() {
         Way way = new OSITNWay(1L);
         way.setTag("natural", "mud");
-        long wayFlag = osAvoidances.handleWayTags(way,0);
+        long wayFlag = osAvoidances.handleWayTags(way);
         assertEquals(OsAvoidanceDecorator.AvoidanceType.Mud.getValue(), wayFlag);
 
     }
@@ -57,7 +57,7 @@ public void testMudAttributeStorage() {
     public void testSandAttributeStorage() {
         Way way = new OSITNWay(1L);
         way.setTag("natural", "sand");
-        long wayFlag = osAvoidances.handleWayTags(way,0);
+        long wayFlag = osAvoidances.handleWayTags(way);
         assertEquals(OsAvoidanceDecorator.AvoidanceType.Sand.getValue(), wayFlag);
 
     }
@@ -66,7 +66,7 @@ public void testSandAttributeStorage() {
     public void testScreeAttributeStorage() {
         Way way = new OSITNWay(1L);
         way.setTag("natural", "scree");
-        long wayFlag = osAvoidances.handleWayTags(way,0);
+        long wayFlag = osAvoidances.handleWayTags(way);
         assertEquals(OsAvoidanceDecorator.AvoidanceType.Scree.getValue(), wayFlag);
 
     }
@@ -75,36 +75,36 @@ public void testScreeAttributeStorage() {
     public void testShingleAttributeStorage() {
         Way way = new OSITNWay(1L);
         way.setTag("natural", "shingle");
-        long wayFlag = osAvoidances.handleWayTags(way,0);
+        long wayFlag = osAvoidances.handleWayTags(way);
         assertEquals(OsAvoidanceDecorator.AvoidanceType.Shingle.getValue(), wayFlag);
 
     }
 
-//    @Test
-//    public void testSpoilAttributeStorage() {
-//        Way way = new OSITNWay(1L);
-//        way.setTag("natural", "spoil");
-//        long wayFlag = osAvoidances.handleWayTags(way,0);
-//        assertEquals(OsAvoidanceDecorator.AvoidanceType.Spoil.getValue(), wayFlag);
-//
-//    }
-
-//    @Test
-//    public void testTidalWaterAttributeStorage() {
-//        Way way = new OSITNWay(1L);
-//        way.setTag("natural", "water");
-//        way.setTag("tidal", "yes");
-//        long wayFlag = osAvoidances.handleWayTags(way,0);
-//        assertEquals(OsAvoidanceDecorator.AvoidanceType.TidalWater.getValue(), wayFlag);
-//
-//    }
+    @Test
+    public void testSpoilAttributeStorage() {
+        Way way = new OSITNWay(1L);
+        way.setTag("natural", "spoil");
+        long wayFlag = osAvoidances.handleWayTags(way);
+        assertEquals(OsAvoidanceDecorator.AvoidanceType.Spoil.getValue(), wayFlag);
+
+    }
+
+    @Test
+    public void testTidalWaterAttributeStorage() {
+        Way way = new OSITNWay(1L);
+        way.setTag("natural", "water");
+        way.setTag("tidal", "yes");
+        long wayFlag = osAvoidances.handleWayTags(way);
+        assertEquals(OsAvoidanceDecorator.AvoidanceType.TidalWater.getValue(), wayFlag);
+
+    }
 
    @Test
     public void testInlandWaterAttributeStorage() {
         Way way = new OSITNWay(1L);
         way.setTag("natural", "water");
         way.setTag("tidal","no");
-        long wayFlag = osAvoidances.handleWayTags(way,0);
+        long wayFlag = osAvoidances.handleWayTags(way);
         assertEquals(OsAvoidanceDecorator.AvoidanceType.InlandWater.getValue(), wayFlag);
 
     }
@@ -113,7 +113,7 @@ public void testInlandWaterAttributeStorage() {
    public void testARoadAttributeStorage() {
        Way way = new OSITNWay(1L);
        way.setTag("highway", "primary");
-       long wayFlag = osAvoidances.handleWayTags(way,0);
+       long wayFlag = osAvoidances.handleWayTags(way);
        assertEquals(OsAvoidanceDecorator.AvoidanceType.ARoad.getValue(), wayFlag);
 
    }
@@ -122,7 +122,7 @@ public void testARoadAttributeStorage() {
     public void testQuarryOrPitAttributeStorage() {
         Way way = new OSITNWay(1L);
         way.setTag("natural", "excavation");
-        long wayFlag = osAvoidances.handleWayTags(way,0);
+        long wayFlag = osAvoidances.handleWayTags(way);
         assertEquals(OsAvoidanceDecorator.AvoidanceType.QuarryOrPit.getValue(), wayFlag);
 
     }
@@ -132,7 +132,7 @@ public void testMultiAttributeStorage() {
         Way way = new OSITNWay(1L);
         way.setTag("wetland", "marsh");
         way.setTag("natural", "excavation");
-        long wayFlag = osAvoidances.handleWayTags(way,0);
+        long wayFlag = osAvoidances.handleWayTags(way);
         //BITMASK test?
         assertEquals(OsAvoidanceDecorator.AvoidanceType.QuarryOrPit.getValue(), wayFlag - OsAvoidanceDecorator.AvoidanceType.Marsh.getValue());
         assertEquals(OsAvoidanceDecorator.AvoidanceType.Marsh.getValue(), wayFlag  - OsAvoidanceDecorator.AvoidanceType.QuarryOrPit.getValue() );
@@ -143,7 +143,7 @@ public void testMultiAttributeStorage() {
     public void testMultiEqualAttributeStorage() {
         Way way = new OSITNWay(1L);
         way.setTag("natural", "scree,excavation");
-        long wayFlag = osAvoidances.handleWayTags(way,0);
+        long wayFlag = osAvoidances.handleWayTags(way);
         //BITMASK test?
         assertEquals(OsAvoidanceDecorator.AvoidanceType.QuarryOrPit.getValue(), wayFlag - OsAvoidanceDecorator.AvoidanceType.Scree.getValue());
         assertEquals(OsAvoidanceDecorator.AvoidanceType.Scree.getValue(), wayFlag  - OsAvoidanceDecorator.AvoidanceType.QuarryOrPit.getValue() );
@@ -154,7 +154,7 @@ public void testMultiEqualAttributeStorage() {
     public void testMultiEqualAttributeRetrieval() {
         Way way = new OSITNWay(1L);
         way.setTag("natural", "scree,excavation");
-        long wayFlag = osAvoidances.handleWayTags(way,0);
+        long wayFlag = osAvoidances.handleWayTags(way);
         //BITMASK test?
         assertEquals(OsAvoidanceDecorator.AvoidanceType.QuarryOrPit.getValue(), wayFlag - OsAvoidanceDecorator.AvoidanceType.Scree.getValue());
         assertEquals(OsAvoidanceDecorator.AvoidanceType.Scree.getValue(), wayFlag  - OsAvoidanceDecorator.AvoidanceType.QuarryOrPit.getValue() );
diff --git a/core/src/test/java/com/graphhopper/routing/util/OsVehicleAvoidanceDecoratorTest.java b/core/src/test/java/com/graphhopper/routing/util/OsVehicleAvoidanceDecoratorTest.java
index ab48284645..0f9c56b540 100644
--- a/core/src/test/java/com/graphhopper/routing/util/OsVehicleAvoidanceDecoratorTest.java
+++ b/core/src/test/java/com/graphhopper/routing/util/OsVehicleAvoidanceDecoratorTest.java
@@ -20,10 +20,10 @@ public void defineWayBits() {
     public void testMotorwayAttributeStorage() {
         Way way = new OSITNWay(1L);
         way.setTag("highway", "motorway");
-        long wayFlag = osAvoidances.handleWayTags(way,0);
+        long wayFlag = osAvoidances.handleWayTags(way);
         assertEquals(OsVehicleAvoidanceDecorator.AvoidanceType.MOTORWAYS.getValue(), wayFlag);
         way.setTag("highway", "Motorway");
-        wayFlag = osAvoidances.handleWayTags(way,0);
+        wayFlag = osAvoidances.handleWayTags(way);
         assertEquals(OsVehicleAvoidanceDecorator.AvoidanceType.MOTORWAYS.getValue(), wayFlag);
 
     }
@@ -32,7 +32,7 @@ public void testMotorwayAttributeStorage() {
     public void testTollAttributeStorage() {
         Way way = new OSITNWay(1L);
         way.setTag("toll", "yes");
-        long wayFlag = osAvoidances.handleWayTags(way,0);
+        long wayFlag = osAvoidances.handleWayTags(way);
         assertEquals(OsVehicleAvoidanceDecorator.AvoidanceType.TOLL.getValue(), wayFlag);
 
     }
@@ -43,7 +43,7 @@ public void testMultiAttributeStorage() {
         Way way = new OSITNWay(1L);
         way.setTag("highway", "motorway");
         way.setTag("toll", "yes");
-        long wayFlag = osAvoidances.handleWayTags(way,0);
+        long wayFlag = osAvoidances.handleWayTags(way);
         //BITMASK test?
         assertEquals(OsVehicleAvoidanceDecorator.AvoidanceType.TOLL.getValue(), wayFlag - OsVehicleAvoidanceDecorator.AvoidanceType.MOTORWAYS.getValue());
         assertEquals(OsVehicleAvoidanceDecorator.AvoidanceType.MOTORWAYS.getValue(), wayFlag  - OsVehicleAvoidanceDecorator.AvoidanceType.TOLL.getValue() );
