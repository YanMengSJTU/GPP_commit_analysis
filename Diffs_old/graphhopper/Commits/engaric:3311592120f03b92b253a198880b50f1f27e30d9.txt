diff --git a/core/src/main/java/com/graphhopper/routing/util/BeelineWeightApproximator.java b/core/src/main/java/com/graphhopper/routing/util/BeelineWeightApproximator.java
index 5df84cfe62..3e15813bf6 100644
--- a/core/src/main/java/com/graphhopper/routing/util/BeelineWeightApproximator.java
+++ b/core/src/main/java/com/graphhopper/routing/util/BeelineWeightApproximator.java
@@ -3,7 +3,6 @@
 import com.graphhopper.storage.NodeAccess;
 import com.graphhopper.util.DistanceCalc;
 import com.graphhopper.util.DistanceCalcEarth;
-import com.graphhopper.util.DistancePlaneProjection;
 
 /**
  * Approximates the distance to the goalNode by weighting the beeline distance according to the distance weighting
diff --git a/core/src/main/java/com/graphhopper/routing/util/Bike2WeightFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/Bike2WeightFlagEncoder.java
index 9f545922ba..dd610761e0 100644
--- a/core/src/main/java/com/graphhopper/routing/util/Bike2WeightFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/Bike2WeightFlagEncoder.java
@@ -18,14 +18,13 @@
  */
 package com.graphhopper.routing.util;
 
-import static com.graphhopper.util.Helper.keepIn;
-
-import com.graphhopper.reader.OSMWay;
 import com.graphhopper.reader.Way;
 import com.graphhopper.util.BitUtil;
 import com.graphhopper.util.EdgeIteratorState;
 import com.graphhopper.util.PointList;
 
+import static com.graphhopper.util.Helper.keepIn;
+
 /**
  * Stores two speed values into an edge to support avoiding too much incline
  * <p>
diff --git a/core/src/main/java/com/graphhopper/routing/util/EncoderDecorator.java b/core/src/main/java/com/graphhopper/routing/util/EncoderDecorator.java
index 983f3db2f8..485fd991ed 100644
--- a/core/src/main/java/com/graphhopper/routing/util/EncoderDecorator.java
+++ b/core/src/main/java/com/graphhopper/routing/util/EncoderDecorator.java
@@ -7,7 +7,7 @@
 public interface EncoderDecorator {
 	int defineWayBits(int shift);
 	long handleWayTags(Way way);
-	public InstructionAnnotation getAnnotation(long flags, Translation tr);
+	InstructionAnnotation getAnnotation(long flags, Translation tr);
 	long getBitMask(String[] attributes);
 	double getDouble(long flags);
 	long getLong(long flags);
diff --git a/core/src/main/java/com/graphhopper/routing/util/FlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/FlagEncoder.java
index 4c3d8edfcf..63833cc1f7 100644
--- a/core/src/main/java/com/graphhopper/routing/util/FlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/FlagEncoder.java
@@ -88,7 +88,7 @@
     /**
      * Reports wether this edge is part of a roundabout.
      */
-    static final int K_ROUNDABOUT = 2;
+    int K_ROUNDABOUT = 2;
 
     /**
      * Returns arbitrary boolean value identified by the specified key.
@@ -116,7 +116,7 @@
     /**
      * Returns true if the feature class is supported like TurnWeighting or PriorityWeighting.
      */
-    public boolean supports( Class<?> feature );
+    boolean supports( Class<?> feature );
 
     /**
      * @return additional cost or warning information for an instruction like ferry or road charges.
