diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
index 41009a4bb7..fab2afd7c7 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
@@ -50,6 +50,22 @@ public void overrideTestONPropertyToWeb() {
 
 	}
 
+	@Before("@ErrorMessages")
+	public void overrideTestONPropertyToBoth() {
+
+		testON = IntegrationTestProperties.getTestProperty("testON");
+		IntegrationTestProperties.setTestProperty("testON", "");
+		init();
+
+	}
+
+	@Before("@ErrorMessages")
+	public void rollBackTestONPropertyToBoth() {
+
+		IntegrationTestProperties.setTestProperty("testON", testON);
+
+	}
+
 	@After("@WebOnly,@SampleScenario,@ServiceOnly")
 	public void rollBackTestONProperty() {
 		IntegrationTestProperties.setTestProperty("testON", testON);
diff --git a/acceptancetesting/src/test/cucumber/Routing-PeakDistrict-Smoke.feature b/acceptancetesting/src/test/cucumber/Routing-PeakDistrict-Smoke.feature
index d6f4bf37ff..edb1c09fca 100644
--- a/acceptancetesting/src/test/cucumber/Routing-PeakDistrict-Smoke.feature
+++ b/acceptancetesting/src/test/cucumber/Routing-PeakDistrict-Smoke.feature
@@ -43,11 +43,11 @@ Feature: Smoke Tests- Peak District: Verify a route from A to B
     Then I should be able to verify the statuscode as "<statusCode>"
 
     Examples: 
-      | vehicleType | avoidances | routeType | errorMessage                                                   | statusCode | httpErrorMessage |
-      | 123         |            | fastest   | Vehicle 123 is not a valid vehicle. Valid vehicles are foot.   | 400        | Bad Request      |
-      | car        |            | fastest   | Vehicle car is not a valid vehicle. Valid vehicles are foot.   | 400        | Bad Request      |
-      | cycle       |            | fastest   | Vehicle cycle is not a valid vehicle. Valid vehicles are foot. | 400        | Bad Request      |
-      | Bike        |            | fastest   | Vehicle Bike is not a valid vehicle. Valid vehicles are foot.  | 400        | Bad Request      |
+      | vehicleType | avoidances | routeType | errorMessage                                                     | statusCode | httpErrorMessage |
+      | 123         |            | fastest   | Vehicle 123 is not a valid vehicle. Valid vehicles are foot,mtb. | 400        | Bad Request      |
+      | car         |            | fastest   | Vehicle 123 is not a valid vehicle. Valid vehicles are foot,mtb. | 400        | Bad Request      |
+      | cycle       |            | fastest   | Vehicle 123 is not a valid vehicle. Valid vehicles are foot,mtb. | 400        | Bad Request      |
+      | Bike        |            | fastest   | Vehicle 123 is not a valid vehicle. Valid vehicles are foot,mtb. | 400        | Bad Request      |
 
   # Parameter :  vehicle
   @ErrorMessages @Smoke @Current
@@ -569,8 +569,7 @@ Feature: Smoke Tests- Peak District: Verify a route from A to B
       | pointA              | errorMessage | responseFormat | statusCode |
       | 51.878966,-0.903849 | e            | json           | 400        |
 
-      
-       @Smoke
+  @Smoke
   Scenario Outline: Verify DPN Route with avoidance -(A Road)
     Given I have route point as
       | pointA              | pointB              |
@@ -585,5 +584,21 @@ Feature: Smoke Tests- Peak District: Verify a route from A to B
 
     Examples: 
       | vehicleType  | avoidances | routeType |
-      | mountainbike | A Road      |      fastavoid     |
-      
\ No newline at end of file
+      | mountainbike | A Road     | fastavoid |
+
+  @Smoke
+  Scenario Outline: Verify DPN Route with boulders avoidance -(boulders)
+    Given I have route point as
+      | pointA              | pointB              |
+      | 53.311217,-1.629849 | 53.156465,-1.908797 |
+    And I have vehicle as "<vehicleType>"
+    And I have avoidances as "<avoidances>"
+    And I have weighting as "<routeType>"
+    When I request for a route
+    Then I should be able to verify the waypoints not on the route map:
+      | wayPointIndex | waypointco          | waypointdesc        | azimuth | direction | time  | distance | avoidance |
+      | 3             | 53.309004,-1.627564 | Turn left onto Path | 98.0    | E         | 99563 | 138.3    | Boulders  |
+
+    Examples: 
+      | vehicleType | avoidances | routeType |
+      | foot        | Boulders   | fastavoid |
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/ARoad.java b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/ARoad.java
new file mode 100644
index 0000000000..7408a179c3
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/ARoad.java
@@ -0,0 +1,14 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
+
+public class ARoad extends AbstractOsToOsmAttibuteMappingVisitor
+{
+
+	@Override
+	protected void applyAttributes( Way way )
+	{
+		way.setTag("highway","primary");
+	}
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/Alley.java b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/Alley.java
new file mode 100644
index 0000000000..2daa2d67e5
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/Alley.java
@@ -0,0 +1,15 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
+
+public class Alley extends AbstractOsToOsmAttibuteMappingVisitor
+{
+
+	@Override
+	protected void applyAttributes( Way way )
+	{
+		way.setTag("highway", "service");
+		way.setTag("service", "alley");
+	}
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/BRoad.java b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/BRoad.java
new file mode 100644
index 0000000000..348e11f845
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/BRoad.java
@@ -0,0 +1,14 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
+
+public class BRoad extends AbstractOsToOsmAttibuteMappingVisitor
+{
+
+	@Override
+	protected void applyAttributes( Way way )
+	{
+		way.setTag("highway","secondary");
+	}
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/DualCarriageway.java b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/DualCarriageway.java
new file mode 100644
index 0000000000..9e19abf7a3
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/DualCarriageway.java
@@ -0,0 +1,14 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
+
+public class DualCarriageway extends AbstractOsToOsmAttibuteMappingVisitor
+{
+
+	@Override
+    protected void applyAttributes( Way way )
+    {
+	   	way.setTag("maxspeed:type", "GB:nsl_dual");
+    }
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/LocalStreet.java b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/LocalStreet.java
new file mode 100644
index 0000000000..f19a7321a9
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/LocalStreet.java
@@ -0,0 +1,14 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
+
+public class LocalStreet extends AbstractOsToOsmAttibuteMappingVisitor
+{
+
+	@Override
+	protected void applyAttributes( Way way )
+	{
+		way.setTag("highway","unclassified");
+	}
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/MinorRoad.java b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/MinorRoad.java
new file mode 100644
index 0000000000..9f9d603661
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/MinorRoad.java
@@ -0,0 +1,14 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
+
+public class MinorRoad extends AbstractOsToOsmAttibuteMappingVisitor
+{
+
+	@Override
+	protected void applyAttributes( Way way )
+	{
+		way.setTag("highway","tertiary");
+	}
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/Motorway.java b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/Motorway.java
new file mode 100644
index 0000000000..8177e1182b
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/Motorway.java
@@ -0,0 +1,15 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
+
+public class Motorway extends AbstractOsToOsmAttibuteMappingVisitor
+{
+
+	@Override
+	protected void applyAttributes( Way way )
+	{
+		way.setTag("highway","motorway");
+		way.setTag("maxspeed:type","GB:motorway");
+	}
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/PedestrianisedStreet.java b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/PedestrianisedStreet.java
new file mode 100644
index 0000000000..c4e02dfccb
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/PedestrianisedStreet.java
@@ -0,0 +1,14 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
+
+public class PedestrianisedStreet extends AbstractOsToOsmAttibuteMappingVisitor
+{
+
+	@Override
+	protected void applyAttributes( Way way )
+	{
+		way.setTag("highway","pedestrian");
+	}
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/PrivateRoadPubliclyAccessible.java b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/PrivateRoadPubliclyAccessible.java
new file mode 100644
index 0000000000..9121ec53ac
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/PrivateRoadPubliclyAccessible.java
@@ -0,0 +1,13 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
+
+public class PrivateRoadPubliclyAccessible extends AbstractOsToOsmAttibuteMappingVisitor {
+			
+	@Override
+    protected void applyAttributes( Way way )
+    {
+	   way.setTag("access", "private");
+    }
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/PrivateRoadRestrictedAccess.java b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/PrivateRoadRestrictedAccess.java
new file mode 100644
index 0000000000..20d853d0b0
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/PrivateRoadRestrictedAccess.java
@@ -0,0 +1,14 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
+
+public class PrivateRoadRestrictedAccess extends AbstractOsToOsmAttibuteMappingVisitor
+{
+
+	@Override
+    protected void applyAttributes( Way way )
+    {
+	   	way.setTag("access", "no");
+    }
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/SingleCarriageway.java b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/SingleCarriageway.java
new file mode 100644
index 0000000000..b6b35b6b2a
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/SingleCarriageway.java
@@ -0,0 +1,14 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
+
+public class SingleCarriageway extends AbstractOsToOsmAttibuteMappingVisitor
+{
+
+	@Override
+    protected void applyAttributes( Way way )
+    {
+	   	way.setTag("maxspeed:type", "GB:nsl_single");
+    }
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/Urban.java b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/Urban.java
new file mode 100644
index 0000000000..92ac97893b
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/Urban.java
@@ -0,0 +1,16 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
+import com.graphhopper.routing.util.CarFlagEncoder;
+
+public class Urban extends AbstractOsToOsmAttibuteMappingVisitor
+{
+	@Override
+    protected void applyAttributes( Way way )
+    {
+		if(!way.hasTag("maxspeed")) {
+			way.setTag("maxspeed", "30 mph");
+		}
+    }
+}
diff --git a/core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
index 3d73ad867b..f7debdc241 100644
--- a/core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
@@ -49,9 +49,9 @@
     /**
      * 1mph = 1.60934kph
      */
-    public static final int SEVENTY_MPH_IN_KPH = 112;
-    public static final int SIXTY_MPH_IN_KPH = 96;
-    public static final int THIRTY_MPH_IN_KPH = 48;
+    public static final int SEVENTY_MPH_IN_KPH = (int)parseSpeed("70mph");
+    public static final int SIXTY_MPH_IN_KPH = (int)parseSpeed("60mph");;
+    public static final int THIRTY_MPH_IN_KPH = (int)parseSpeed("30mph");;
 
     /**
      * Should be only instantied via EncodingManager
@@ -140,39 +140,8 @@ public CarFlagEncoder( int speedBits, double speedFactor, int maxTurnCosts )
         // forestry stuff
         defaultSpeedMap.put("track", 15);
 
-        defaultSpeedMap.put("Motorway", SEVENTY_MPH_IN_KPH);
-        defaultSpeedMap.put("A Road", SIXTY_MPH_IN_KPH);
-        defaultSpeedMap.put("B Road", THIRTY_MPH_IN_KPH);
-        defaultSpeedMap.put("Minor Road", THIRTY_MPH_IN_KPH);
-        defaultSpeedMap.put("Local Street", THIRTY_MPH_IN_KPH);
-        //        defaultSpeedMap.put("Alley", 35);
-        defaultSpeedMap.put("A Road-Single Carriageway", SIXTY_MPH_IN_KPH);
-        defaultSpeedMap.put("B Road", THIRTY_MPH_IN_KPH);
-        defaultSpeedMap.put("Minor Road", THIRTY_MPH_IN_KPH);
-        defaultSpeedMap.put("Local Street", THIRTY_MPH_IN_KPH);
-        //        defaultSpeedMap.put("Alley", 35);
-        defaultSpeedMap.put("Motorway", SEVENTY_MPH_IN_KPH);
-        defaultSpeedMap.put("A Road", SIXTY_MPH_IN_KPH);
-        defaultSpeedMap.put("B Road", THIRTY_MPH_IN_KPH);
-        defaultSpeedMap.put("Minor Road", THIRTY_MPH_IN_KPH);
-        defaultSpeedMap.put("Local Street", THIRTY_MPH_IN_KPH);
-        //        defaultSpeedMap.put("Alley", 35);
-        defaultSpeedMap.put("A Road-Dual Carriageway", SIXTY_MPH_IN_KPH);
-        defaultSpeedMap.put("B Road", THIRTY_MPH_IN_KPH);
-        defaultSpeedMap.put("Minor Road", THIRTY_MPH_IN_KPH);
-        defaultSpeedMap.put("Local Street", THIRTY_MPH_IN_KPH);
-        //        defaultSpeedMap.put("Alley", 35);
-        defaultSpeedMap.put("Motorway-Slip Road", SEVENTY_MPH_IN_KPH);
-        defaultSpeedMap.put("A Road-Slip Road", SIXTY_MPH_IN_KPH);
-        defaultSpeedMap.put("B Road", THIRTY_MPH_IN_KPH);
-        defaultSpeedMap.put("Minor Road", THIRTY_MPH_IN_KPH);
-        defaultSpeedMap.put("Local Street", THIRTY_MPH_IN_KPH);
-        //        defaultSpeedMap.put("Alley", 35);
-        defaultSpeedMap.put("Motorway-Roundabout", SEVENTY_MPH_IN_KPH);
-        defaultSpeedMap.put("A Road-Roundabout", SIXTY_MPH_IN_KPH);
-        defaultSpeedMap.put("B Road-Roundabout", THIRTY_MPH_IN_KPH);
-        defaultSpeedMap.put("Minor Road-Roundabout", THIRTY_MPH_IN_KPH);
-        defaultSpeedMap.put("Local Street-Roundabout", THIRTY_MPH_IN_KPH);
+        addNationalUKSpeedMapping();
+        addRoadTypeUKSpeedMapping();
 
         // You can not drive down a pedestrianised street
         defaultSpeedMap.put("Pedestrianised Street", 0);
@@ -218,6 +187,50 @@ public CarFlagEncoder( int speedBits, double speedFactor, int maxTurnCosts )
         environmentMaxSpeedMap.put("Urban:Single Carriageway", ""+THIRTY_MPH_IN_KPH);
 
 
+    }
+
+	private void addNationalUKSpeedMapping()
+    {
+	    defaultSpeedMap.put("GB:motorway", SEVENTY_MPH_IN_KPH);
+	    defaultSpeedMap.put("GB:nsl_dual", SEVENTY_MPH_IN_KPH);
+	    defaultSpeedMap.put("GB:nsl_single", SIXTY_MPH_IN_KPH);
+    }
+
+	private void addRoadTypeUKSpeedMapping()
+    {
+	    defaultSpeedMap.put("Motorway", SEVENTY_MPH_IN_KPH);
+        defaultSpeedMap.put("A Road", SIXTY_MPH_IN_KPH);
+        defaultSpeedMap.put("B Road", THIRTY_MPH_IN_KPH);
+        defaultSpeedMap.put("Minor Road", THIRTY_MPH_IN_KPH);
+        defaultSpeedMap.put("Local Street", THIRTY_MPH_IN_KPH);
+        //        defaultSpeedMap.put("Alley", 35);
+        defaultSpeedMap.put("A Road-Single Carriageway", SIXTY_MPH_IN_KPH);
+        defaultSpeedMap.put("B Road", THIRTY_MPH_IN_KPH);
+        defaultSpeedMap.put("Minor Road", THIRTY_MPH_IN_KPH);
+        defaultSpeedMap.put("Local Street", THIRTY_MPH_IN_KPH);
+        //        defaultSpeedMap.put("Alley", 35);
+        defaultSpeedMap.put("Motorway", SEVENTY_MPH_IN_KPH);
+        defaultSpeedMap.put("A Road", SIXTY_MPH_IN_KPH);
+        defaultSpeedMap.put("B Road", THIRTY_MPH_IN_KPH);
+        defaultSpeedMap.put("Minor Road", THIRTY_MPH_IN_KPH);
+        defaultSpeedMap.put("Local Street", THIRTY_MPH_IN_KPH);
+        //        defaultSpeedMap.put("Alley", 35);
+        defaultSpeedMap.put("A Road-Dual Carriageway", SIXTY_MPH_IN_KPH);
+        defaultSpeedMap.put("B Road", THIRTY_MPH_IN_KPH);
+        defaultSpeedMap.put("Minor Road", THIRTY_MPH_IN_KPH);
+        defaultSpeedMap.put("Local Street", THIRTY_MPH_IN_KPH);
+        //        defaultSpeedMap.put("Alley", 35);
+        defaultSpeedMap.put("Motorway-Slip Road", SEVENTY_MPH_IN_KPH);
+        defaultSpeedMap.put("A Road-Slip Road", SIXTY_MPH_IN_KPH);
+        defaultSpeedMap.put("B Road", THIRTY_MPH_IN_KPH);
+        defaultSpeedMap.put("Minor Road", THIRTY_MPH_IN_KPH);
+        defaultSpeedMap.put("Local Street", THIRTY_MPH_IN_KPH);
+        //        defaultSpeedMap.put("Alley", 35);
+        defaultSpeedMap.put("Motorway-Roundabout", SEVENTY_MPH_IN_KPH);
+        defaultSpeedMap.put("A Road-Roundabout", SIXTY_MPH_IN_KPH);
+        defaultSpeedMap.put("B Road-Roundabout", THIRTY_MPH_IN_KPH);
+        defaultSpeedMap.put("Minor Road-Roundabout", THIRTY_MPH_IN_KPH);
+        defaultSpeedMap.put("Local Street-Roundabout", THIRTY_MPH_IN_KPH);
     }
 
     /**
@@ -235,21 +248,25 @@ public int defineWayBits( int index, int shift )
 
     protected double getSpeed( Way way )
     {
-        String highwayValue = way.getTag("highway");
-        Integer speed = defaultSpeedMap.get(highwayValue);
-        if (speed == null)
-            throw new IllegalStateException(toString() + ", no speed found for: " + highwayValue + ", tags: " + way);
-
-        if (highwayValue.equals("track"))
-        {
-            String tt = way.getTag("tracktype");
-            if (!Helper.isEmpty(tt))
-            {
-                Integer tInt = trackTypeSpeedMap.get(tt);
-                if (tInt != null)
-                    speed = tInt;
-            }
-        }
+    	String typeMax = way.getTag("maxspeed:type");
+    	Integer speed = defaultSpeedMap.get(typeMax);
+    	if(null==speed) {
+    		String highwayValue = way.getTag("highway");
+    		speed = defaultSpeedMap.get(highwayValue);
+    		if (speed == null)
+    			throw new IllegalStateException(toString() + ", no speed found for: " + highwayValue + ", tags: " + way);
+
+    		if (highwayValue.equals("track"))
+    		{
+    			String tt = way.getTag("tracktype");
+    			if (!Helper.isEmpty(tt))
+    			{
+    				Integer tInt = trackTypeSpeedMap.get(tt);
+    				if (tInt != null)
+    					speed = tInt;
+    			}
+    		}
+    	}
 
         return speed;
     }
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/ARoadTest.java b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/ARoadTest.java
new file mode 100644
index 0000000000..0201123012
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/ARoadTest.java
@@ -0,0 +1,37 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.OsToOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.roadclassification.ARoad;
+
+public class ARoadTest {
+    static OsToOsmAttributeMappingVisitor visitor;
+    @Mock
+    Way way;
+
+    @BeforeClass
+    public static void createVisitor() {
+        visitor = new ARoad();
+    }
+
+    @Before
+    public void init() {
+        MockitoAnnotations.initMocks(this);
+    }
+
+    @Test
+    public void testVisitWayAttribute() {
+        visitor.visitWayAttribute("A Road".toLowerCase().replace(" ", "").replace("–", ""), way);
+        verify(way).setTag("highway", "primary");
+        verifyNoMoreInteractions(way);
+    }
+}
\ No newline at end of file
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/AlleyTest.java b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/AlleyTest.java
new file mode 100644
index 0000000000..42e46ba024
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/AlleyTest.java
@@ -0,0 +1,42 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.OsToOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.roadclassification.Alley;
+
+public class AlleyTest
+{
+	static OsToOsmAttributeMappingVisitor visitor;
+	@Mock
+	Way way;
+
+	@BeforeClass
+	public static void createVisitor()
+	{
+		visitor = new Alley();
+	}
+
+	@Before
+	public void init()
+	{
+		MockitoAnnotations.initMocks(this);
+	}
+
+	@Test
+	public void testVisitWayAttribute()
+	{
+		visitor.visitWayAttribute("Alley".toLowerCase().replace(" ", "").replace("–", ""), way);
+		verify(way).setTag("highway", "service");
+		verify(way).setTag("service", "alley");
+		verifyNoMoreInteractions(way);
+	}
+}
\ No newline at end of file
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/BRoadTest.java b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/BRoadTest.java
new file mode 100644
index 0000000000..8fba26ec5a
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/BRoadTest.java
@@ -0,0 +1,37 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.OsToOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.roadclassification.BRoad;
+
+public class BRoadTest {
+    static OsToOsmAttributeMappingVisitor visitor;
+    @Mock
+    Way way;
+
+    @BeforeClass
+    public static void createVisitor() {
+        visitor = new BRoad();
+    }
+
+    @Before
+    public void init() {
+        MockitoAnnotations.initMocks(this);
+    }
+
+    @Test
+    public void testVisitWayAttribute() {
+        visitor.visitWayAttribute("B Road".toLowerCase().replace(" ", "").replace("–", ""), way);
+        verify(way).setTag("highway", "secondary");
+        verifyNoMoreInteractions(way);
+    }
+}
\ No newline at end of file
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/DualCarriagewayTest.java b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/DualCarriagewayTest.java
new file mode 100644
index 0000000000..a8c93c78a8
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/DualCarriagewayTest.java
@@ -0,0 +1,40 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.OsToOsmAttributeMappingVisitor;
+
+public class DualCarriagewayTest
+{
+	static OsToOsmAttributeMappingVisitor visitor;
+	@Mock
+	Way way;
+
+	@BeforeClass
+	public static void createVisitor()
+	{
+		visitor = new DualCarriageway();
+	}
+
+	@Before
+	public void init()
+	{
+		MockitoAnnotations.initMocks(this);
+	}
+
+	@Test
+	public void testVisitWayAttribute()
+	{
+		visitor.visitWayAttribute("Dual Carriageway".toLowerCase().replace(" ", "").replace("–", ""), way);
+		verify(way).setTag("maxspeed:type", "GB:nsl_dual");
+		verifyNoMoreInteractions(way);
+	}
+}
\ No newline at end of file
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/LocalStreetTest.java b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/LocalStreetTest.java
new file mode 100644
index 0000000000..15bd79413d
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/LocalStreetTest.java
@@ -0,0 +1,37 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.OsToOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.roadclassification.LocalStreet;
+
+public class LocalStreetTest {
+    static OsToOsmAttributeMappingVisitor visitor;
+    @Mock
+    Way way;
+
+    @BeforeClass
+    public static void createVisitor() {
+        visitor = new LocalStreet();
+    }
+
+    @Before
+    public void init() {
+        MockitoAnnotations.initMocks(this);
+    }
+
+    @Test
+    public void testVisitWayAttribute() {
+        visitor.visitWayAttribute("Local Street".toLowerCase().replace(" ", "").replace("–", ""), way);
+        verify(way).setTag("highway", "unclassified");
+        verifyNoMoreInteractions(way);
+    }
+}
\ No newline at end of file
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/MinorRoadTest.java b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/MinorRoadTest.java
new file mode 100644
index 0000000000..5285e24551
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/MinorRoadTest.java
@@ -0,0 +1,37 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.OsToOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.roadclassification.MinorRoad;
+
+public class MinorRoadTest {
+    static OsToOsmAttributeMappingVisitor visitor;
+    @Mock
+    Way way;
+
+    @BeforeClass
+    public static void createVisitor() {
+        visitor = new MinorRoad();
+    }
+
+    @Before
+    public void init() {
+        MockitoAnnotations.initMocks(this);
+    }
+
+    @Test
+    public void testVisitWayAttribute() {
+        visitor.visitWayAttribute("Minor Road".toLowerCase().replace(" ", "").replace("–", ""), way);
+        verify(way).setTag("highway", "tertiary");
+        verifyNoMoreInteractions(way);
+    }
+}
\ No newline at end of file
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/MotorwayTest.java b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/MotorwayTest.java
new file mode 100644
index 0000000000..836af3cea3
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/MotorwayTest.java
@@ -0,0 +1,38 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.OsToOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.roadclassification.Motorway;
+
+public class MotorwayTest {
+    static OsToOsmAttributeMappingVisitor visitor;
+    @Mock
+    Way way;
+
+    @BeforeClass
+    public static void createVisitor() {
+        visitor = new Motorway();
+    }
+
+    @Before
+    public void init() {
+        MockitoAnnotations.initMocks(this);
+    }
+
+    @Test
+    public void testVisitWayAttribute() {
+        visitor.visitWayAttribute("Motorway".toLowerCase().replace(" ", "").replace("–", ""), way);
+        verify(way).setTag("highway", "motorway");
+        verify(way).setTag("maxspeed:type", "GB:motorway");
+        verifyNoMoreInteractions(way);
+    }
+}
\ No newline at end of file
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/PedestrianisedStreetTest.java b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/PedestrianisedStreetTest.java
new file mode 100644
index 0000000000..9e090bc520
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/PedestrianisedStreetTest.java
@@ -0,0 +1,37 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.OsToOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.roadclassification.PedestrianisedStreet;
+
+public class PedestrianisedStreetTest {
+    static OsToOsmAttributeMappingVisitor visitor;
+    @Mock
+    Way way;
+
+    @BeforeClass
+    public static void createVisitor() {
+        visitor = new PedestrianisedStreet();
+    }
+
+    @Before
+    public void init() {
+        MockitoAnnotations.initMocks(this);
+    }
+
+    @Test
+    public void testVisitWayAttribute() {
+        visitor.visitWayAttribute("Pedestrianised Street".toLowerCase().replace(" ", "").replace("–", ""), way);
+        verify(way).setTag("highway", "pedestrian");
+        verifyNoMoreInteractions(way);
+    }
+}
\ No newline at end of file
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/PrivateRoadPubliclyAccessibleTest.java b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/PrivateRoadPubliclyAccessibleTest.java
new file mode 100644
index 0000000000..83b2394b8a
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/PrivateRoadPubliclyAccessibleTest.java
@@ -0,0 +1,38 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.OsToOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.roadclassification.PrivateRoadPubliclyAccessible;
+
+public class PrivateRoadPubliclyAccessibleTest {
+    static OsToOsmAttributeMappingVisitor visitor;
+    @Mock
+    Way way;
+
+    @BeforeClass
+    public static void createVisitor() {
+        visitor = new PrivateRoadPubliclyAccessible();
+    }
+
+    @Before
+    public void init() {
+        MockitoAnnotations.initMocks(this);
+    }
+
+    @Test
+    public void testVisitWayAttribute() {
+        visitor.visitWayAttribute("Private Road – Publicly Accessible".toLowerCase().replace(" ", "").replace("–", ""), way);
+        verify(way).setTag("access", "private");
+        verifyNoMoreInteractions(way);
+    }
+
+}
\ No newline at end of file
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/PrivateRoadRestrictedAccessTest.java b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/PrivateRoadRestrictedAccessTest.java
new file mode 100644
index 0000000000..47ea9e91fc
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/PrivateRoadRestrictedAccessTest.java
@@ -0,0 +1,37 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.OsToOsmAttributeMappingVisitor;
+import com.graphhopper.reader.osgb.roadclassification.PrivateRoadRestrictedAccess;
+
+public class PrivateRoadRestrictedAccessTest {
+    static OsToOsmAttributeMappingVisitor visitor;
+    @Mock
+    Way way;
+
+    @BeforeClass
+    public static void createVisitor() {
+        visitor = new PrivateRoadRestrictedAccess();
+    }
+
+    @Before
+    public void init() {
+        MockitoAnnotations.initMocks(this);
+    }
+
+    @Test
+    public void testVisitWayAttribute() {
+        visitor.visitWayAttribute("Private Road – Restricted Access".toLowerCase().replace(" ", "").replace("–", ""), way);
+        verify(way).setTag("access", "no");
+        verifyNoMoreInteractions(way);
+    }
+}
\ No newline at end of file
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/SingleCarriagewayTest.java b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/SingleCarriagewayTest.java
new file mode 100644
index 0000000000..0796b928aa
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/SingleCarriagewayTest.java
@@ -0,0 +1,40 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.OsToOsmAttributeMappingVisitor;
+
+public class SingleCarriagewayTest
+{
+	static OsToOsmAttributeMappingVisitor visitor;
+	@Mock
+	Way way;
+
+	@BeforeClass
+	public static void createVisitor()
+	{
+		visitor = new SingleCarriageway();
+	}
+
+	@Before
+	public void init()
+	{
+		MockitoAnnotations.initMocks(this);
+	}
+
+	@Test
+	public void testVisitWayAttribute()
+	{
+		visitor.visitWayAttribute("Single Carriageway".toLowerCase().replace(" ", "").replace("–", ""), way);
+		verify(way).setTag("maxspeed:type", "GB:nsl_single");
+		verifyNoMoreInteractions(way);
+	}
+}
\ No newline at end of file
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/UrbanTest.java b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/UrbanTest.java
new file mode 100644
index 0000000000..0815b26036
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/UrbanTest.java
@@ -0,0 +1,54 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+import static org.mockito.Mockito.when;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.OsToOsmAttributeMappingVisitor;
+
+public class UrbanTest
+{
+	private static final String _30_MPH = "30 mph";
+	static OsToOsmAttributeMappingVisitor visitor;
+	@Mock
+	Way way;
+
+	@BeforeClass
+	public static void createVisitor()
+	{
+		visitor = new Urban();
+	}
+
+	@Before
+	public void init()
+	{
+		MockitoAnnotations.initMocks(this);
+	}
+
+	@Test
+	public void testVisitWayAttribute()
+	{
+		visitor.visitWayAttribute("Urban".toLowerCase().replace(" ", "").replace("–", ""), way);
+		verify(way).hasTag("maxspeed");
+		verify(way).setTag("maxspeed", _30_MPH);
+		verifyNoMoreInteractions(way);
+	}
+	
+	@Test
+	public void testVisitWayAttributeWhenNationalSpeedLimitSet()
+	{
+		when(way.hasTag("maxspeed")).thenReturn(false);
+		when(way.hasTag("maxspeed:type")).thenReturn(true);
+		visitor.visitWayAttribute("Urban".toLowerCase().replace(" ", "").replace("–", ""), way);
+		verify(way).hasTag("maxspeed");
+		verify(way).setTag("maxspeed", _30_MPH);
+		verifyNoMoreInteractions(way);
+	}
+}
\ No newline at end of file
diff --git a/core/src/test/java/com/graphhopper/routing/util/CarFlagEncoderTest.java b/core/src/test/java/com/graphhopper/routing/util/CarFlagEncoderTest.java
index 2dadef1d67..ff6e96d6f1 100644
--- a/core/src/test/java/com/graphhopper/routing/util/CarFlagEncoderTest.java
+++ b/core/src/test/java/com/graphhopper/routing/util/CarFlagEncoderTest.java
@@ -17,10 +17,14 @@
  */
 package com.graphhopper.routing.util;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
+import org.junit.Test;
+
 import com.graphhopper.reader.OSMNode;
 import com.graphhopper.reader.OSMWay;
-import org.junit.Test;
-import static org.junit.Assert.*;
 
 /**
  *
@@ -30,7 +34,7 @@
 {
     private final EncodingManager em = new EncodingManager("CAR,BIKE,FOOT");
     private final CarFlagEncoder encoder = (CarFlagEncoder) em.getEncoder("CAR");
-
+    
     @Test
     public void testAccess()
     {
@@ -225,6 +229,59 @@ public void testSpeed()
         {
         }
     }
+    
+    @Test
+    public void testMaxSpeedType()
+    {
+        // limit bigger than default road speed
+        OSMWay way = new OSMWay(1);
+        way.setTag("highway", "primary");
+        way.setTag("maxspeed:type", "GB:nsl_dual");
+        long allowed = encoder.acceptWay(way);
+        long encoded = encoder.handleWayTags(way, allowed, 0);
+        assertEquals(truncateSpeedToMax(), encoder.getSpeed(encoded), 1e-1);
+
+        way.clearTags();
+        way.setTag("highway", "secondary");
+        way.setTag("maxspeed:type", "GB:nsl_single");
+        allowed = encoder.acceptWay(way);
+        encoded = encoder.handleWayTags(way, allowed, 0);
+        assertEquals(factorSpeed(CarFlagEncoder.SIXTY_MPH_IN_KPH), encoder.getSpeed(encoded), 1e-1);
+
+        way.clearTags();
+        way.setTag("highway", "motorway");
+        way.setTag("maxspeed:type", "GB:motorway");
+        allowed = encoder.acceptWay(way);
+        encoded = encoder.handleWayTags(way, allowed, 0);
+        assertEquals(truncateSpeedToMax(), encoder.getSpeed(encoded), 1e-1);
+
+        way.clearTags();
+        way.setTag("highway", "secondary");
+        way.setTag("maxspeed", "30 mph");
+        way.setTag("maxspeed:type", "GB:nsl_single");
+        allowed = encoder.acceptWay(way);
+        encoded = encoder.handleWayTags(way, allowed, 0);
+        assertEquals(factorSpeed(CarFlagEncoder.THIRTY_MPH_IN_KPH), encoder.getSpeed(encoded), 1e-1);
+
+        try
+        {
+            encoder.setSpeed(0, -1);
+            assertTrue(false);
+        } catch (IllegalArgumentException ex)
+        {
+        }
+    }
+
+	private int truncateSpeedToMax()
+    {
+	    int factorSpeed = factorSpeed(CarFlagEncoder.SEVENTY_MPH_IN_KPH);
+		return factorSpeed>encoder.maxPossibleSpeed?encoder.maxPossibleSpeed:factorSpeed;
+    }
+
+	private int factorSpeed(int speed )
+    {
+	    return Math.round(speed/5)*5;
+    }
 
     @Test
     public void testSetSpeed()
