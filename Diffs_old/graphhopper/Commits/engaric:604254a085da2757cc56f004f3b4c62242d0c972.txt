diff --git a/core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java
index d99517c6bf..883554e47f 100644
--- a/core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java
@@ -735,11 +735,13 @@ public long setLong(long flags, int key, long value) {
 
 	@Override
 	public long getLong(long flags, int key) {
-		for (EncoderDecorator decorator : encoderDecorators) {
-			if (decorator.supports(key)) {
-				return decorator.getLong(flags);
-			}
-		}
+        if(null!=encoderDecorators) {
+            for (EncoderDecorator decorator : encoderDecorators) {
+                if (decorator.supports(key)) {
+                    return decorator.getLong(flags);
+                }
+            }
+        }
 		throw new UnsupportedOperationException("Unknown key " + key
 				+ " for long value.");
 	}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/DpnAttributeAvoidanceTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/DpnAttributeAvoidanceTest.java
index 8f60973bdf..21d4d34718 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/DpnAttributeAvoidanceTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/DpnAttributeAvoidanceTest.java
@@ -20,7 +20,7 @@ public void testAvoidBoulder() throws IOException {
         File file = new File("./src/test/resources/com/graphhopper/reader/osgb/dpn/os-dpn-avoid.xml");
         GraphHopper hopper = new GraphHopper();
         Map<String, String> map = new HashMap<>();
-        map.put("graph.flagencoders", "foot");
+        map.put("graph.flagencoders", "foot2");
         map.put("osmreader.osm", file.getAbsolutePath());
         map.put("reader.implementation", "OSDPN");
         map.put("prepare.chweighting", "none");
@@ -29,7 +29,7 @@ public void testAvoidBoulder() throws IOException {
         hopper.init(args);
         hopper.importOrLoad();
         InstructionList instructionList = route(hopper, 50.70, -3.49, 50.69, -3.91, null);
-        assertEquals("Should be Link 17 as that is the shorteste route", "Link 17", instructionList.get(1).getName());
+        assertEquals("Should be Link 17 as that is the shortest route", "Link 17", instructionList.get(1).getName());
         instructionList = route(hopper, 50.70, -3.49, 50.69, -3.91, "boulders");
         assertEquals("Should be Link 19 as that avoids the boulder field", "Link 19", instructionList.get(1).getName());
     }
