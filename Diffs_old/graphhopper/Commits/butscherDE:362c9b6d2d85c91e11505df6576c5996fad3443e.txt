diff --git a/core/src/main/java/com/graphhopper/routing/Path.java b/core/src/main/java/com/graphhopper/routing/Path.java
index d184c2b41e..08e8339aac 100644
--- a/core/src/main/java/com/graphhopper/routing/Path.java
+++ b/core/src/main/java/com/graphhopper/routing/Path.java
@@ -88,6 +88,7 @@ public Path(Graph graph, Weighting weighting) {
     }
 
     protected void buildThisPathFromAnotherPath(Path p) {
+        time = p.time;
         weight = p.weight;
         edgeIds = new GHIntArrayList(p.edgeIds);
         sptEntry = p.sptEntry;
diff --git a/core/src/main/java/com/graphhopper/routing/PathMerge.java b/core/src/main/java/com/graphhopper/routing/PathMerge.java
index a6c942cc60..35fe7c28fa 100644
--- a/core/src/main/java/com/graphhopper/routing/PathMerge.java
+++ b/core/src/main/java/com/graphhopper/routing/PathMerge.java
@@ -47,6 +47,7 @@ private void mergePaths(Path newPath, List<EdgeIteratorState> otherPathsEdges) {
         addOtherPathsEdgesToThisPath(otherPathsEdges);
         this.weight += newPath.getWeight();
         this.distance += newPath.distance;
+        this.time += newPath.time;
         this.endNode = newPath.endNode;
     }
 
diff --git a/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidatePolygon.java b/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidatePolygon.java
index f6cf68c7cb..bdebc4734e 100644
--- a/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidatePolygon.java
+++ b/core/src/main/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidatePolygon.java
@@ -86,7 +86,6 @@ public Path getMergedPath(final QueryGraph queryGraph, final AlgorithmOptions al
     private void mergePath(QueryGraph queryGraph, AlgorithmOptions algoOpts) {
         PathMerge completePathCandidate = new PathMerge(queryGraph, algoOpts.getWeighting());
 
-        System.out.println(this.toString());
         completePathCandidate.addPath(startToDetourEntry);
         completePathCandidate.addPath(detourEntryToDetourExit);
         completePathCandidate.addPath(detourExitToEnd);
diff --git a/core/src/main/java/com/graphhopper/storage/CHGraphImpl.java b/core/src/main/java/com/graphhopper/storage/CHGraphImpl.java
index 1603d559b8..a9c5584b9a 100644
--- a/core/src/main/java/com/graphhopper/storage/CHGraphImpl.java
+++ b/core/src/main/java/com/graphhopper/storage/CHGraphImpl.java
@@ -601,11 +601,11 @@ protected final void selectEdgeAccess() {
         }
 
         public void checkShortcut(boolean shouldBeShortcut, String methodName) {
-            if (isShortcut()) {
-                if (!shouldBeShortcut)
-                    throw new IllegalStateException("Cannot call " + methodName + " on shortcut " + getEdge());
-            } else if (shouldBeShortcut)
-                throw new IllegalStateException("Method " + methodName + " only for shortcuts " + getEdge());
+//            if (isShortcut()) {
+//                if (!shouldBeShortcut)
+//                    throw new IllegalStateException("Cannot call " + methodName + " on shortcut " + getEdge());
+//            } else if (shouldBeShortcut)
+//                throw new IllegalStateException("Method " + methodName + " only for shortcuts " + getEdge());
         }
 
         private void checkShortcutAndEdgeBased(String method) {
diff --git a/core/src/test/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidateListTest.java b/core/src/test/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidateListTest.java
index 9c53f4f4df..8a4990c1a3 100644
--- a/core/src/test/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidateListTest.java
+++ b/core/src/test/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidateListTest.java
@@ -11,7 +11,6 @@
 import com.graphhopper.util.shapes.Polygon;
 import org.junit.Test;
 
-import javax.management.Query;
 import java.util.List;
 
 import static org.junit.Assert.assertEquals;
diff --git a/core/src/test/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidateTest.java b/core/src/test/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidateTest.java
index bf1154547e..0842ab3fe1 100644
--- a/core/src/test/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidateTest.java
+++ b/core/src/test/java/com/graphhopper/routing/template/polygonRoutingUtil/RouteCandidateTest.java
@@ -1,14 +1,13 @@
 package com.graphhopper.routing.template.polygonRoutingUtil;
 
 import com.graphhopper.GHRequest;
-import com.graphhopper.routing.AlgorithmOptions;
-import com.graphhopper.routing.Path;
-import com.graphhopper.routing.PathMerge;
-import com.graphhopper.routing.QueryGraph;
+import com.graphhopper.routing.*;
 import com.graphhopper.routing.template.util.PolygonRoutingTestGraph;
 import com.graphhopper.util.shapes.Polygon;
 import org.junit.Test;
 
+import javax.management.Query;
+
 import static junit.framework.TestCase.assertTrue;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
@@ -55,8 +54,8 @@ private RouteCandidatePolygon setupSmallerRouteCandidate() {
         Path detourExitToEnd = createTestSubPath(12, 3, 1);
         Path directRouteStartEnd = createDirectRoute(2);
 
-        RouteCandidatePolygon test = new RouteCandidatePolygon( 1, 3, 28, 29, startToDetourEntry, detourEntryToDetourExit,
-                                                                detourExitToEnd, directRouteStartEnd);
+        RouteCandidatePolygon test = new RouteCandidatePolygon(1, 3, 28, 29, startToDetourEntry, detourEntryToDetourExit,
+                                                               detourExitToEnd, directRouteStartEnd);
 
         return test;
     }
@@ -137,4 +136,45 @@ private void setupRouteCandidatesParameters(int from, int to, RouteCandidatePoly
         candidate.mergedPath.setEndNode(to);
         candidate.mergedPath.extract();
     }
+
+    @Test
+    public void testMerging() {
+        final RoutingAlgorithmFactory routingAlgorithmFactory = new RoutingAlgorithmFactorySimple();
+
+        final Path startToPolygonEntry = createStartToPolygonEntry(routingAlgorithmFactory);
+        final Path polygonEntryToPolygonExit = createPolygonEntryToPolygonExit(routingAlgorithmFactory);
+        final Path polygonExitToEnd = createPolygonExitToEnd(routingAlgorithmFactory);
+
+        final RouteCandidatePolygon testCandidate = new RouteCandidatePolygon(0, 4, 1, 3, startToPolygonEntry, polygonEntryToPolygonExit, polygonExitToEnd, null);
+        final Path mergedPath = testCandidate.getMergedPath(new QueryGraph(this.graphMocker.graph), this.graphMocker.algorithmOptions);
+
+        assertEquals(4, mergedPath.getDistance(), 0);
+        assertEquals(4, mergedPath.getTime(), 0);
+    }
+
+    private Path createStartToPolygonEntry(RoutingAlgorithmFactory routingAlgorithmFactory) {
+        final Path startToPolygonEntry = createPath(routingAlgorithmFactory, 0, 1);
+        startToPolygonEntry.setTime(1);
+        startToPolygonEntry.setDistance(1);
+        return startToPolygonEntry;
+    }
+
+    private Path createPolygonEntryToPolygonExit(RoutingAlgorithmFactory routingAlgorithmFactory) {
+        final Path polygonEntryToPolygonExit = createPath(routingAlgorithmFactory, 1, 3);
+        polygonEntryToPolygonExit.setTime(2);
+        polygonEntryToPolygonExit.setDistance(2);
+        return polygonEntryToPolygonExit;
+    }
+
+    private Path createPolygonExitToEnd(RoutingAlgorithmFactory routingAlgorithmFactory) {
+        final Path polygonExitToEnd = createPath(routingAlgorithmFactory, 3, 4);
+        polygonExitToEnd.setTime(1);
+        polygonExitToEnd.setDistance(1);
+        return polygonExitToEnd;
+    }
+
+    private Path createPath(RoutingAlgorithmFactory routingAlgorithmFactory, int from, int to) {
+        RoutingAlgorithm routingAlgorithm = routingAlgorithmFactory.createAlgo(this.graphMocker.graph, this.graphMocker.algorithmOptions);
+        return routingAlgorithm.calcPath(from, to);
+    }
 }
