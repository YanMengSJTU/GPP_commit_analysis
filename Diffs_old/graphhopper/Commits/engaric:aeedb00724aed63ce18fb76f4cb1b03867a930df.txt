diff --git a/core/src/main/java/com/graphhopper/routing/Path.java b/core/src/main/java/com/graphhopper/routing/Path.java
index 2ae7a46941..d919509837 100644
--- a/core/src/main/java/com/graphhopper/routing/Path.java
+++ b/core/src/main/java/com/graphhopper/routing/Path.java
@@ -468,7 +468,7 @@ public void next( EdgeIteratorState edge, int index )
                         // This could lead to problems if there are non-complete roundabouts!
                         EdgeIterator edgeIter = outEdgeExplorer.setBaseNode(adjNode);
                         edgeIter.next();
-                        if (edgeIter.next()) {((RoundaboutInstruction) prevInstruction).increaseExitNr();}
+                        if (edgeIter.next()) {((RoundaboutInstruction) prevInstruction).increaseExitNumber();}
 
                     } else if (prevInRoundabout) //previously in roundabout but not anymore
                     {
diff --git a/core/src/main/java/com/graphhopper/util/RoundaboutInstruction.java b/core/src/main/java/com/graphhopper/util/RoundaboutInstruction.java
index c7682cd2b0..3c9e78af4b 100644
--- a/core/src/main/java/com/graphhopper/util/RoundaboutInstruction.java
+++ b/core/src/main/java/com/graphhopper/util/RoundaboutInstruction.java
@@ -13,7 +13,7 @@
 public class RoundaboutInstruction extends Instruction
 {
 
-    private int exitNr = 0;
+    private int exitNumber = 0;
     private int clockwise = 0; // 0 undetermined, 1 clockwise, -1 counterclockwise, 2 inconsistent
     private boolean exited = false;
     private double radian = Double.NaN;
@@ -23,15 +23,15 @@ public RoundaboutInstruction(int sign, String name, InstructionAnnotation ia, Po
         super(sign, name, ia, pl);
     }
   
-    public RoundaboutInstruction increaseExitNr()
+    public RoundaboutInstruction increaseExitNumber()
     {
-        this.exitNr += 1;
+        this.exitNumber += 1;
         return this;
     }
 
-    public RoundaboutInstruction setExitNr(int exitNr)
+    public RoundaboutInstruction setExitNumber(int exitNumber)
     {
-        this.exitNr = exitNr;
+        this.exitNumber = exitNumber;
         return this;
     }
 
@@ -63,13 +63,13 @@ public boolean isExited()
         return exited;
     }
 
-    public int getExitNr()
+    public int getExitNumber()
     {
-        if (exited && exitNr == 0)
+        if (exited && exitNumber == 0)
         {
-            throw new IllegalStateException("RoundaboutInstruction must contain exitNr>0");
+            throw new IllegalStateException("RoundaboutInstruction must contain exitNumber>0");
         }
-        return exitNr;
+        return exitNumber;
     }
 
     /**
@@ -100,7 +100,7 @@ public RoundaboutInstruction setRadian(double radian)
     public Map<String, Object> getExtraInfoJSON()
     {
         Map<String, Object> tmpMap = new HashMap<String, Object>(2);
-        tmpMap.put("exit_nr", getExitNr());
+        tmpMap.put("exit_number", getExitNumber());
         double radian = getRadian();
         if (Double.isNaN(radian))
         {
@@ -124,8 +124,8 @@ public String getTurnDescription(Translation tr)
             {
                 str = tr.tr("roundaboutEnter");
             } else {
-                str = Helper.isEmpty(streetName) ? tr.tr("roundaboutExit", getExitNr()) :
-                        tr.tr("roundaboutExitOnto", getExitNr(), streetName);
+                str = Helper.isEmpty(streetName) ? tr.tr("roundaboutExit", getExitNumber()) :
+                        tr.tr("roundaboutExitOnto", getExitNumber(), streetName);
             }
         } else
         {
diff --git a/core/src/test/java/com/graphhopper/util/InstructionListTest.java b/core/src/test/java/com/graphhopper/util/InstructionListTest.java
index 67d2009af3..37a8897487 100644
--- a/core/src/test/java/com/graphhopper/util/InstructionListTest.java
+++ b/core/src/test/java/com/graphhopper/util/InstructionListTest.java
@@ -352,7 +352,7 @@ public void testRoundaboutJsonIntegrity()
                                                                  new InstructionAnnotation(0, ""), pl)
                                           .setDirOfRotation(-0.1)
                                           .setRadian(-Math.PI+1)
-                                          .setExitNr(2)  
+                                          .setExitNumber(2)
                                           .setExited();
         il.add(instr);
 
@@ -360,7 +360,7 @@ public void testRoundaboutJsonIntegrity()
         // assert that all information is present in map for JSON
         assertEquals("At roundabout, take exit 2 onto streetname", json.get("text").toString());
         assertEquals(-1, (Double) json.get("turn_angle"), 0.01);
-        assertEquals("2", json.get("exit_nr").toString());
+        assertEquals("2", json.get("exit_number").toString());
         // assert that a valid JSON object can be written
         assertNotNull(new JSONObject(json).toString());
     }
@@ -378,7 +378,7 @@ public void testRoundaboutJsonNaN()
         RoundaboutInstruction instr = new RoundaboutInstruction(Instruction.USE_ROUNDABOUT, "streetname",
                 new InstructionAnnotation(0, ""), pl)
                 .setRadian(-Math.PI + 1)
-                .setExitNr(2)
+                .setExitNumber(2)
                 .setExited();
         il.add(instr);
 
diff --git a/docs/web/api-doc.md b/docs/web/api-doc.md
index 62c9e06352..328585b83d 100644
--- a/docs/web/api-doc.md
+++ b/docs/web/api-doc.md
@@ -119,7 +119,7 @@ paths[0].instructions[0].interval             | An array containing the first an
 paths[0].instructions[0].sign                 | A number which specifies the sign to show e.g. for right turn etc <br>TURN_SHARP_LEFT = -3<br>TURN_LEFT = -2<br>TURN_SLIGHT_LEFT = -1<br>CONTINUE_ON_STREET = 0<br>TURN_SLIGHT_RIGHT = 1<br>TURN_RIGHT = 2<br>TURN_SHARP_RIGHT = 3<br>FINISH = 4<br>VIA_REACHED = 5<br>USE_ROUNDABOUT = 6
 paths[0].instructions[0].annotationText       | [optional] A text describing the instruction in more detail, e.g. like surface of the way, warnings or involved costs
 paths[0].instructions[0].annotationImportance | [optional] 0 stands for INFO, 1 for warning, 2 for costs, 3 for costs and warning
-paths[0].instructions[0].exit_nr              | [optional] Only available for USE_ROUNDABOUT instructions. The count of exits at which the route leaves the roundabout.
+paths[0].instructions[0].exit_number          | [optional] Only available for USE_ROUNDABOUT instructions. The count of exits at which the route leaves the roundabout.
 paths[0].instructions[0].turn_angle           | [optional] Only available for USE_ROUNDABOUT instructions. The radian of the route within the roundabout: 0<r<2*PI for clockwise and -2PI<r<0 for counterclockwise transit. Is null the direction of rotation is undefined.
 
 
