diff --git a/core/files/changelog.txt b/core/files/changelog.txt
index 2886e43905..2783a49d6f 100644
--- a/core/files/changelog.txt
+++ b/core/files/changelog.txt
@@ -1,4 +1,5 @@
 0.6
+    renaming of Tarjans algorithm class to TarjansSCCAlgorithm
     more strict naming for Weighting enforced and more strict matching to select Weighting (equals check), #490
     specify the preferred-language for way names during graph import (ISO 639-1 or ISO 639-2)
 
diff --git a/core/src/main/java/com/graphhopper/coll/GHBitSet.java b/core/src/main/java/com/graphhopper/coll/GHBitSet.java
index 2b07459703..15e7e2223f 100644
--- a/core/src/main/java/com/graphhopper/coll/GHBitSet.java
+++ b/core/src/main/java/com/graphhopper/coll/GHBitSet.java
@@ -29,6 +29,8 @@
 
     void add( int index );
 
+    void remove( int index );
+
     int getCardinality();
 
     void clear();
diff --git a/core/src/main/java/com/graphhopper/coll/GHBitSetImpl.java b/core/src/main/java/com/graphhopper/coll/GHBitSetImpl.java
index 20ae8c5433..01315b58fa 100644
--- a/core/src/main/java/com/graphhopper/coll/GHBitSetImpl.java
+++ b/core/src/main/java/com/graphhopper/coll/GHBitSetImpl.java
@@ -62,6 +62,12 @@ public final int nextClear( int index )
         return super.nextClearBit(index);
     }
 
+    @Override
+    public void remove( int index )
+    {
+        super.clear(index);
+    }
+
     @Override
     public final GHBitSet copyTo( GHBitSet bs )
     {
@@ -73,7 +79,7 @@ public final GHBitSet copyTo( GHBitSet bs )
         {
             int len = size();
             for (int index = super.nextSetBit(0); index >= 0;
-                 index = super.nextSetBit(index + 1))
+                    index = super.nextSetBit(index + 1))
             {
                 bs.add(index);
             }
diff --git a/core/src/main/java/com/graphhopper/coll/GHTBitSet.java b/core/src/main/java/com/graphhopper/coll/GHTBitSet.java
index ae25025648..9048a258fb 100644
--- a/core/src/main/java/com/graphhopper/coll/GHTBitSet.java
+++ b/core/src/main/java/com/graphhopper/coll/GHTBitSet.java
@@ -74,6 +74,12 @@ public final void clear()
         tHash.clear();
     }
 
+    @Override
+    public void remove( int index )
+    {
+        tHash.remove(index);
+    }
+
     @Override
     public final GHBitSet copyTo( GHBitSet bs )
     {
diff --git a/core/src/main/java/com/graphhopper/routing/ch/PreparationWeighting.java b/core/src/main/java/com/graphhopper/routing/ch/PreparationWeighting.java
index 12bf1d27fb..451995dce0 100644
--- a/core/src/main/java/com/graphhopper/routing/ch/PreparationWeighting.java
+++ b/core/src/main/java/com/graphhopper/routing/ch/PreparationWeighting.java
@@ -72,4 +72,10 @@ public String getName()
     {
         return "prepare|" + userWeighting.getName();
     }
+
+    @Override
+    public String toString()
+    {
+        return getName();
+    }
 }
diff --git a/core/src/main/java/com/graphhopper/routing/util/BikeCommonFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/BikeCommonFlagEncoder.java
index 794a6acf12..8dd7fb3d7e 100644
--- a/core/src/main/java/com/graphhopper/routing/util/BikeCommonFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/BikeCommonFlagEncoder.java
@@ -584,12 +584,7 @@ long handleBikeRelated( OSMWay way, long encoded, boolean partOfCycleRelation )
         String highway = way.getTag("highway");
         String trackType = way.getTag("tracktype");
 
-        // Populate bits at wayTypeMask with wayType            
-        WayType wayType = WayType.OTHER_SMALL_WAY;
-        boolean isPusingSection = isPushingSection(way);
-        if (isPusingSection && !partOfCycleRelation || "steps".equals(highway))
-            wayType = WayType.PUSHING_SECTION;
-
+        // Populate unpavedBit
         if ("track".equals(highway) && (trackType == null || !"grade1".equals(trackType))
                 || "path".equals(highway) && surfaceTag == null
                 || unpavedSurfaceTags.contains(surfaceTag))
@@ -597,16 +592,25 @@ long handleBikeRelated( OSMWay way, long encoded, boolean partOfCycleRelation )
             encoded = setBool(encoded, K_UNPAVED, true);
         }
 
+        WayType wayType;
+        if (roadValues.contains(highway))
+            wayType = WayType.ROAD;
+        else
+            wayType = WayType.OTHER_SMALL_WAY;
+        
+        boolean isPushingSection = isPushingSection(way);
+        if (isPushingSection && !partOfCycleRelation || "steps".equals(highway))
+            wayType = WayType.PUSHING_SECTION;
+        
         if (way.hasTag("bicycle", intendedValues))
         {
-            if (isPusingSection && !way.hasTag("bicycle", "designated"))
+            if (isPushingSection && !way.hasTag("bicycle", "designated"))
                 wayType = WayType.OTHER_SMALL_WAY;
             else
-                wayType = WayType.CYCLEWAY;
+                if ( (wayType == WayType.OTHER_SMALL_WAY ) || (wayType == WayType.PUSHING_SECTION) )
+                    wayType = WayType.CYCLEWAY;
         } else if ("cycleway".equals(highway))
             wayType = WayType.CYCLEWAY;
-        else if (roadValues.contains(highway))
-            wayType = WayType.ROAD;
 
         return wayTypeEncoder.setValue(encoded, wayType.getValue());
     }
diff --git a/core/src/main/java/com/graphhopper/routing/util/PrepareRoutingSubnetworks.java b/core/src/main/java/com/graphhopper/routing/util/PrepareRoutingSubnetworks.java
index 94840e0d78..61c770c700 100644
--- a/core/src/main/java/com/graphhopper/routing/util/PrepareRoutingSubnetworks.java
+++ b/core/src/main/java/com/graphhopper/routing/util/PrepareRoutingSubnetworks.java
@@ -32,9 +32,9 @@
 import gnu.trove.list.array.TIntArrayList;
 
 /**
- * Removes nodes which are not part of the largest network. Ie. mostly nodes with no edges at all
- * but also small subnetworks which are nearly always bugs in OSM data or indicate otherwise
- * disconnected areas e.g. via barriers - see #86.
+ * Removes nodes which are not part of the large networks. Ie. mostly nodes with no edges at all but
+ * also small subnetworks which are often bugs in OSM data or indicate otherwise disconnected areas
+ * e.g. via barriers or one way problems - see #86.
  * <p>
  * @author Peter Karich
  */
@@ -221,10 +221,29 @@ String toString( FlagEncoder encoder, EdgeIterator iter )
      */
     int removeDeadEndUnvisitedNetworks( final PrepEdgeFilter bothFilter )
     {
-        // partition ghStorage into strongly connected components using Tarjan's algorithm
+        StopWatch sw = new StopWatch(bothFilter.getEncoder() + " findComponents").start();
         final EdgeFilter outFilter = new DefaultEdgeFilter(bothFilter.getEncoder(), false, true);
-        List<TIntArrayList> components = new TarjansStronglyConnectedComponentsAlgorithm(ghStorage, outFilter).
-                findComponents();
+
+        // Very important special case for single entry components: we don't need them! See #520
+        // But they'll be created a lot for multiple vehicles as many nodes e.g. for foot are not accessible at all for car.
+        // We can ignore these single entry components as they are already set 'not accessible'
+        EdgeExplorer explorer = ghStorage.createEdgeExplorer(outFilter);
+        int nodes = ghStorage.getNodes();
+        GHBitSet ignoreSet = new GHBitSetImpl(ghStorage.getNodes());
+        for (int start = 0; start < nodes; start++)
+        {
+            if (!ghStorage.isNodeRemoved(start))
+            {
+                EdgeIterator iter = explorer.setBaseNode(start);
+                if (!iter.next())
+                    ignoreSet.add(start);
+            }
+        }
+
+        // partition graph into strongly connected components using Tarjan's algorithm        
+        TarjansSCCAlgorithm tarjan = new TarjansSCCAlgorithm(ghStorage, ignoreSet, outFilter);
+        List<TIntArrayList> components = tarjan.findComponents();
+        logger.info(sw.stop() + ", size:" + components.size());
 
         return removeEdges(bothFilter, components, minOneWayNetworkSize);
     }
diff --git a/core/src/main/java/com/graphhopper/routing/util/TarjansStronglyConnectedComponentsAlgorithm.java b/core/src/main/java/com/graphhopper/routing/util/TarjansSCCAlgorithm.java
similarity index 80%
rename from core/src/main/java/com/graphhopper/routing/util/TarjansStronglyConnectedComponentsAlgorithm.java
rename to core/src/main/java/com/graphhopper/routing/util/TarjansSCCAlgorithm.java
index 8d6f116f34..7bf86d76a1 100644
--- a/core/src/main/java/com/graphhopper/routing/util/TarjansStronglyConnectedComponentsAlgorithm.java
+++ b/core/src/main/java/com/graphhopper/routing/util/TarjansSCCAlgorithm.java
@@ -1,5 +1,6 @@
 package com.graphhopper.routing.util;
 
+import com.graphhopper.coll.GHBitSet;
 import com.graphhopper.coll.GHBitSetImpl;
 import com.graphhopper.storage.GraphHopperStorage;
 import com.graphhopper.util.EdgeIterator;
@@ -12,25 +13,26 @@
 
 /**
  * Implementation of Tarjan's algorithm using an explicit stack. The traditional recursive approach
- * runs into stack overflow pretty quickly. Used for finding strongly connected components to detect
- * dead-ends.
+ * runs into stack overflow pretty quickly. The algorithm is used within GraphHopper to find
+ * strongly connected components to detect dead-ends leading to routes not found.
  * <p>
  * See http://en.wikipedia.org/wiki/Tarjan's_strongly_connected_components_algorithm. See
  * http://www.timl.id.au/?p=327 and http://homepages.ecs.vuw.ac.nz/~djp/files/P05.pdf
  */
-public class TarjansStronglyConnectedComponentsAlgorithm
+public class TarjansSCCAlgorithm
 {
+    private final ArrayList<TIntArrayList> components = new ArrayList<TIntArrayList>();
     private final GraphHopperStorage graph;
     private final TIntArrayStack nodeStack;
-    private final GHBitSetImpl onStack;
+    private final GHBitSet onStack;
+    private final GHBitSet ignoreSet;
     private final int[] nodeIndex;
     private final int[] nodeLowLink;
-    private final ArrayList<TIntArrayList> components = new ArrayList<TIntArrayList>();
-
     private int index = 1;
     private final EdgeFilter edgeFilter;
 
-    public TarjansStronglyConnectedComponentsAlgorithm( GraphHopperStorage graph, final EdgeFilter edgeFilter )
+    public TarjansSCCAlgorithm( GraphHopperStorage graph, GHBitSet ignoreSet,
+                                final EdgeFilter edgeFilter )
     {
         this.graph = graph;
         this.nodeStack = new TIntArrayStack();
@@ -38,6 +40,7 @@ public TarjansStronglyConnectedComponentsAlgorithm( GraphHopperStorage graph, fi
         this.nodeIndex = new int[graph.getNodes()];
         this.nodeLowLink = new int[graph.getNodes()];
         this.edgeFilter = edgeFilter;
+        this.ignoreSet = ignoreSet;
     }
 
     /**
@@ -48,16 +51,20 @@ public TarjansStronglyConnectedComponentsAlgorithm( GraphHopperStorage graph, fi
         int nodes = graph.getNodes();
         for (int start = 0; start < nodes; start++)
         {
-            if (nodeIndex[start] == 0 && !graph.isNodeRemoved(start))
-            {
+            if (nodeIndex[start] == 0
+                    && !ignoreSet.contains(start)
+                    && !graph.isNodeRemoved(start))
                 strongConnect(start);
-            }
         }
 
         return components;
     }
 
-    // Find all components reachable from firstNode, add them to 'components'
+    /**
+     * Find all components reachable from firstNode, add them to 'components'
+     * <p>
+     * @param firstNode start search of SCC at this node
+     */
     private void strongConnect( int firstNode )
     {
         final Stack<TarjanState> stateStack = new Stack<TarjanState>();
@@ -79,13 +86,12 @@ private void strongConnect( int firstNode )
                 nodeLowLink[start] = index;
                 index++;
                 nodeStack.push(start);
-                onStack.set(start);
+                onStack.add(start);
 
                 iter = graph.createEdgeExplorer(edgeFilter).setBaseNode(start);
 
             } else
-            { // if (state.isResume()) {
-
+            {
                 // We're resuming iteration over the next child of 'start', set lowLink as appropriate.
                 iter = state.iter;
 
@@ -98,6 +104,9 @@ private void strongConnect( int firstNode )
             while (iter.next())
             {
                 int connectedId = iter.getAdjNode();
+                if (ignoreSet.contains(start))
+                    continue;
+
                 if (nodeIndex[connectedId] == 0)
                 {
                     // Push resume and start states onto state stack to continue our DFS through the graph after the jump.
@@ -120,19 +129,21 @@ private void strongConnect( int firstNode )
                 while ((node = nodeStack.pop()) != start)
                 {
                     component.add(node);
-                    onStack.clear(node);
+                    onStack.remove(node);
                 }
                 component.add(start);
                 component.trimToSize();
-                onStack.clear(start);
-
+                onStack.remove(start);
                 components.add(component);
             }
         }
     }
 
-    // Internal stack state of algorithm, used to avoid recursive function calls and hitting stack overflow exceptions.
-    // State is either 'start' for new nodes or 'resume' for partially traversed nodes.
+    /**
+     * Internal stack state of algorithm, used to avoid recursive function calls and hitting stack
+     * overflow exceptions. State is either 'start' for new nodes or 'resume' for partially
+     * traversed nodes.
+     */
     private static class TarjanState
     {
         final int start;
diff --git a/core/src/main/resources/com/graphhopper/util/el.txt b/core/src/main/resources/com/graphhopper/util/el.txt
index 4672ea182d..4e18611e3e 100644
--- a/core/src/main/resources/com/graphhopper/util/el.txt
+++ b/core/src/main/resources/com/graphhopper/util/el.txt
@@ -22,9 +22,9 @@ web.racingbike=Αγωνιστικό ποδήλατο
 web.mtb=Ποδήλατο βουνού
 web.car=Αυτοκίνητο
 web.foot=Πεζός
-web.small_truck=
-web.bus=
-web.truck=
+web.small_truck=Μικρό φορτηγό
+web.bus=Λεωφορείο
+web.truck=Φορτηγό
 web.staticlink=στατική διεύθυνση
 web.motorcycle=Μοτοσυκλέτα
 via=μέσω
diff --git a/core/src/main/resources/com/graphhopper/util/es.txt b/core/src/main/resources/com/graphhopper/util/es.txt
index 03dea6c71d..3770861c20 100644
--- a/core/src/main/resources/com/graphhopper/util/es.txt
+++ b/core/src/main/resources/com/graphhopper/util/es.txt
@@ -20,11 +20,11 @@ web.locationsNotFound=No se ha encontrado la ruta. El destino no se encuentra en
 web.bike=Bicicleta
 web.racingbike=Bicicleta de carrera
 web.mtb=Bicicleta de montaña
-web.car=Coche
+web.car=Automóvil
 web.foot=A pie
-web.small_truck=
-web.bus=
-web.truck=
+web.small_truck=Camioneta
+web.bus=Autobús
+web.truck=Camión
 web.staticlink=enlace estático
 web.motorcycle=Motocicleta
 via=pasando por
@@ -46,5 +46,5 @@ stopover=pasando por %1$s
 roundaboutEnter=Entre en la rotonda
 roundaboutExit=En la rotonda, tome la %1$sª salida
 roundaboutExitOnto=En la rotonda, tome la %1$sª salida hacia %2$s
-totalAscend=
-totalDescend=
+totalAscend=Ascender %1$s en total
+totalDescend=Descender %1$s en total
diff --git a/core/src/main/resources/com/graphhopper/util/vi_VI.txt b/core/src/main/resources/com/graphhopper/util/vi_VI.txt
index 29aff5bec4..b6b4463f39 100644
--- a/core/src/main/resources/com/graphhopper/util/vi_VI.txt
+++ b/core/src/main/resources/com/graphhopper/util/vi_VI.txt
@@ -22,7 +22,7 @@ web.racingbike=Xe đua
 web.mtb=Xe leo núi
 web.car=Ô tô
 web.foot=Đi bộ
-web.small_truck=
+web.small_truck=Xe tai nho
 web.bus=
 web.truck=
 web.staticlink=liên kết tĩnh
@@ -43,8 +43,8 @@ way=đường
 paved=đường lát
 unpaved=đường không lát
 stopover=điểm nghỉ %1$s
-roundaboutEnter=
-roundaboutExit=
-roundaboutExitOnto=
-totalAscend=
+roundaboutEnter=di vao bung binh
+roundaboutExit=Tai bung binh, re loi re %1$s
+roundaboutExitOnto=Tai bung binh, re loi re %1$s vao pho %2$s
+totalAscend=Di tiep %1$s nua
 totalDescend=
diff --git a/core/src/test/java/com/graphhopper/routing/util/AbstractBikeFlagEncoderTester.java b/core/src/test/java/com/graphhopper/routing/util/AbstractBikeFlagEncoderTester.java
index dea0c775c2..ea453dcba6 100644
--- a/core/src/test/java/com/graphhopper/routing/util/AbstractBikeFlagEncoderTester.java
+++ b/core/src/test/java/com/graphhopper/routing/util/AbstractBikeFlagEncoderTester.java
@@ -280,6 +280,24 @@ public void testHandleCommonWayTags()
         assertEquals("", wayType);
         assertPriority(PREFER.getValue(), way);
 
+        way.clearTags();
+        way.setTag("highway", "residential");
+        way.setTag("bicycle", "yes");
+        wayType = getWayTypeFromFlags(way);
+        assertEquals("", wayType);
+
+        way.clearTags();
+        way.setTag("highway", "residential");
+        way.setTag("bicycle", "designated");
+        wayType = getWayTypeFromFlags(way);
+        assertEquals("", wayType);
+
+        way.clearTags();
+        way.setTag("highway", "track");
+        way.setTag("bicycle", "designated");
+        wayType = getWayTypeFromFlags(way);
+        assertEquals("cycleway, unpaved", wayType);
+
         way.clearTags();
         way.setTag("highway", "cycleway");
         wayType = getWayTypeFromFlags(way);
diff --git a/core/src/test/java/com/graphhopper/routing/util/PrepareRoutingSubnetworksTest.java b/core/src/test/java/com/graphhopper/routing/util/PrepareRoutingSubnetworksTest.java
index aad3dcc96a..16422d045b 100644
--- a/core/src/test/java/com/graphhopper/routing/util/PrepareRoutingSubnetworksTest.java
+++ b/core/src/test/java/com/graphhopper/routing/util/PrepareRoutingSubnetworksTest.java
@@ -17,6 +17,7 @@
  */
 package com.graphhopper.routing.util;
 
+import com.graphhopper.coll.GHBitSetImpl;
 import com.graphhopper.routing.util.PrepareRoutingSubnetworks.PrepEdgeFilter;
 import com.graphhopper.storage.GraphBuilder;
 import com.graphhopper.storage.GraphHopperStorage;
@@ -203,7 +204,7 @@ public void testRemoveSubnetworkWhenMultipleVehicles()
         assertEquals(GHUtility.asSet(7, 2, 1), GHUtility.getNeighbors(carExplorer.setBaseNode(3)));
         EdgeExplorer bikeExplorer = g.createEdgeExplorer(new DefaultEdgeFilter(bikeEncoder));
         assertEquals(GHUtility.asSet(7, 2, 1, 4), GHUtility.getNeighbors(bikeExplorer.setBaseNode(3)));
-        
+
         GHUtility.getEdge(g, 3, 4).setFlags(carEncoder.setProperties(10, false, false) | bikeEncoder.setProperties(5, false, false));
         instance = new PrepareRoutingSubnetworks(g, em2.fetchEdgeEncoders());
         instance.setMinNetworkSize(5);
@@ -279,7 +280,8 @@ public void testTarjan()
         // Requires a single vehicle type, otherwise we throw.
         final EdgeFilter filter = new DefaultEdgeFilter(carFlagEncoder, false, true);
 
-        TarjansStronglyConnectedComponentsAlgorithm tarjan = new TarjansStronglyConnectedComponentsAlgorithm(g, filter);
+        TarjansSCCAlgorithm tarjan
+                = new TarjansSCCAlgorithm(g, new GHBitSetImpl(), filter);
 
         List<TIntArrayList> components = tarjan.findComponents();
 
diff --git a/web/src/main/webapp/css/style.css b/web/src/main/webapp/css/style.css
index 2cccf89efc..ca10039879 100644
--- a/web/src/main/webapp/css/style.css
+++ b/web/src/main/webapp/css/style.css
@@ -126,6 +126,12 @@ body {
 #options {
     padding-bottom: 10px;
     padding-left: 20px;
+    padding-right: 20px;
+}
+.vehicle-info-link {
+    padding-top: 3px;
+    float: right;
+    text-decoration: none;
 }
 .bold {
     font-weight: bold;
diff --git a/web/src/main/webapp/js/main.js b/web/src/main/webapp/js/main.js
index f05070fae5..54c9455bd4 100644
--- a/web/src/main/webapp/js/main.js
+++ b/web/src/main/webapp/js/main.js
@@ -224,6 +224,7 @@ $(document).ready(function (e) {
                                 hiddenVehicles[i].show();
                             }
                         });
+                        vehiclesDiv.append($("<a class='vehicle-info-link' href='https://github.com/graphhopper/directions-api/blob/master/supported-vehicle-profiles.md'>?</a>"))
                         vehiclesDiv.append(moreBtn);
                     }
                 }
