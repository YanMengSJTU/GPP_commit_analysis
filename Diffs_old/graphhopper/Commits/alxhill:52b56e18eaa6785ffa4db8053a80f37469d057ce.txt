diff --git a/marmoset.sh b/marmoset.sh
index 3b7d71bcdb..4b1a37aa54 100755
--- a/marmoset.sh
+++ b/marmoset.sh
@@ -33,6 +33,9 @@ elif [ "$ACTION" = "test" ]; then
     ${MAVEN} test
 elif [ "$ACTION" = "lines" ]; then
     find marmoset -name "*.java" -o -name "*.js" | xargs wc -l
+else
+    echo "$ACTION is not a valid action, don't do that k?"
+    exit
 fi
 
 E_CODE=$?
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/Marmoset.java b/marmoset/src/main/java/com/graphhopper/marmoset/Marmoset.java
index 8f01b3b66c..346c939c3c 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/Marmoset.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/Marmoset.java
@@ -1,5 +1,6 @@
 package com.graphhopper.marmoset;
 
+import com.graphhopper.marmoset.event.EventManager;
 import fi.iki.elonen.NanoHTTPD;
 import fi.iki.elonen.SimpleWebServer;
 import org.slf4j.Logger;
@@ -29,6 +30,7 @@
 
     public static void main(String[] args) throws IOException, InterruptedException
     {
+        EventManager.trigger("init:start");
         mh = new MarmosetHopper();
         mh.init();
 
@@ -45,6 +47,7 @@ else if (args[0].equals("--file"))
         }
 
         System.out.println("Press enter to terminate");
+        EventManager.trigger("init:end");
         try
         {
             System.in.read();
@@ -78,16 +81,19 @@ public static void start(int initialVehicles)
         {
             isRunning = true;
             iteration = 0;
+            EventManager.trigger("start", initialVehicles);
             mh.startSimulation(initialVehicles);
         }
         else if (mh.paused())
         {
+            EventManager.trigger("unpause");
             mh.unpause();
         }
     }
 
     public static void pause()
     {
+        EventManager.trigger("pause");
         mh.pause();
     }
 
@@ -122,8 +128,10 @@ private static void startFileServer()
     }
 
     public static void nextTimestep() {
+        EventManager.trigger("timestep:start", iteration);
         if (mh.timestep())
         {
+            EventManager.trigger("timestep:end", iteration);
             logger.info("===ITERATION [" + iteration + "]===");
             mh.getMetrics();
             iteration++;
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetHopper.java b/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetHopper.java
index 414d5f9c7e..04e7d2b578 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetHopper.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetHopper.java
@@ -1,9 +1,11 @@
 package com.graphhopper.marmoset;
 
 import com.graphhopper.GraphHopper;
+import com.graphhopper.marmoset.event.EventManager;
 import com.graphhopper.marmoset.util.CellGraph;
 import com.graphhopper.marmoset.util.ExpectedWeighting;
 import com.graphhopper.marmoset.util.Location;
+import com.graphhopper.marmoset.vehicle.MultiSDVController;
 import com.graphhopper.marmoset.vehicle.RandomVehicle;
 import com.graphhopper.marmoset.vehicle.SelfDrivingVehicle;
 import com.graphhopper.marmoset.vehicle.Vehicle;
@@ -31,6 +33,8 @@
     protected CellGraph cellGraph;
     protected List<Vehicle> vehicles;
 
+    protected MultiSDVController sdvController;
+
     protected boolean isPaused;
 
     protected Random rand = new Random(999);
@@ -80,8 +84,10 @@ public synchronized void addVehicle()
         v.init();
         if (v.isFinished())
             addVehicle();
-        else
+        else {
             vehicles.add(v);
+            EventManager.trigger("vehicle:added", v);
+        }
     }
 
     public synchronized void startSimulation(int initialVehicles)
@@ -215,7 +221,8 @@ public Weighting createWeighting(WeightingMap wMap, FlagEncoder encoder)
                 if (expectedWeighting == null)
                 {
                     int maxId = this.getGraphHopperStorage().getAllEdges().getMaxId();
-                    expectedWeighting = new ExpectedWeighting(encoder, wMap, vehicles, maxId);
+                    expectedWeighting = new ExpectedWeighting(encoder, wMap, maxId);
+                    sdvController = new MultiSDVController(expectedWeighting);
                 }
 
                 return expectedWeighting;
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/event/EventManager.java b/marmoset/src/main/java/com/graphhopper/marmoset/event/EventManager.java
new file mode 100644
index 0000000000..04dac26d00
--- /dev/null
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/event/EventManager.java
@@ -0,0 +1,38 @@
+package com.graphhopper.marmoset.event;
+
+import java.util.ArrayList;
+import java.util.HashMap;
+import java.util.List;
+
+/**
+ * Created by alexander on 22/04/2016.
+ */
+public class EventManager {
+
+    @FunctionalInterface
+    public interface EventHandler {
+        void handle(String name, Object ...args);
+
+    }
+
+    private static HashMap<String, List<EventHandler>> handlers = new HashMap<>();
+
+    public static void listenTo(String name, EventHandler handler)
+    {
+        if (!handlers.containsKey(name))
+        {
+            handlers.put(name, new ArrayList<>());
+        }
+
+        handlers.get(name).add(handler);
+    }
+
+    public static void trigger(String name, Object ...args)
+    {
+        if (!handlers.containsKey(name))
+            return;
+
+        handlers.get(name).forEach(h -> h.handle(name, args));
+
+    }
+}
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/util/ExpectedWeighting.java b/marmoset/src/main/java/com/graphhopper/marmoset/util/ExpectedWeighting.java
index a4ecca3173..abbe2b4d3f 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/util/ExpectedWeighting.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/util/ExpectedWeighting.java
@@ -1,7 +1,6 @@
 package com.graphhopper.marmoset.util;
 
 import com.graphhopper.marmoset.vehicle.SelfDrivingVehicle;
-import com.graphhopper.marmoset.vehicle.Vehicle;
 import com.graphhopper.routing.util.FastestWeighting;
 import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.util.EdgeIteratorState;
@@ -16,16 +15,13 @@
  */
 public class ExpectedWeighting extends FastestWeighting {
 
-    protected final List<Vehicle> vehicles;
-    protected final double DAMPING_FACTOR = 0.6;
     protected double[] expectedRoutes;
 
     private static final Logger logger = LoggerFactory.getLogger(ExpectedWeighting.class);
 
-    public ExpectedWeighting(FlagEncoder encoder, PMap pMap, List<Vehicle> vehicles, int maxId)
+    public ExpectedWeighting(FlagEncoder encoder, PMap pMap, int maxId)
     {
         super(encoder, pMap);
-        this.vehicles = vehicles;
         expectedRoutes = new double[maxId];
         logger.info("Created new expected weighting");
     }
@@ -39,15 +35,14 @@ public double calcWeight(EdgeIteratorState edge, boolean reverse, int prevOrNext
         return weight;
     }
 
-    public void updateExpectedMap()
+    public void updateExpectedMap(double dampingFactor, List<SelfDrivingVehicle> vehicles)
     {
         for (int i = 0; i < expectedRoutes.length; i++)
         {
-            expectedRoutes[i] *= DAMPING_FACTOR;
+            expectedRoutes[i] *= dampingFactor;
         }
 
-        vehicles.stream().map(v -> ((SelfDrivingVehicle) v).getCurrentPath())
+        vehicles.stream().map(SelfDrivingVehicle::getCurrentPath)
                 .forEach(edges -> edges.forEach(edge -> expectedRoutes[edge.getEdge()]++));
-
     }
 }
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/MultiSDVController.java b/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/MultiSDVController.java
new file mode 100644
index 0000000000..9b2e0b33f2
--- /dev/null
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/MultiSDVController.java
@@ -0,0 +1,52 @@
+package com.graphhopper.marmoset.vehicle;
+
+import com.graphhopper.marmoset.event.EventManager;
+import com.graphhopper.marmoset.util.ExpectedWeighting;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Random;
+
+/**
+ * Created by alexander on 22/04/2016.
+ */
+public class MultiSDVController {
+
+    private static final Logger logger = LoggerFactory.getLogger(MultiSDVController.class);
+
+    public static final double DAMPING_FACTOR = 0.6;
+    public static final double REROUTE_PROBABILITY = 0.01;
+    public static final int EXPMAP_UPDATE_FREQUENCY = 100;
+
+    protected List<SelfDrivingVehicle> vehicles;
+    protected final ExpectedWeighting expectedWeighting;
+
+    private Random rerouteRand = new Random(9876);
+
+    public MultiSDVController(ExpectedWeighting expectedWeighting)
+    {
+        this.expectedWeighting = expectedWeighting;
+        vehicles = new ArrayList<>();
+        EventManager.listenTo("vehicles:add", (s, vehicle) -> vehicles.add((SelfDrivingVehicle) vehicle[0]));
+        EventManager.listenTo("timestep:end", (s,args) -> timestepHandler((Integer) args[0]));
+    }
+
+    public void timestepHandler(int iteration)
+    {
+        vehicles.forEach(v -> {
+            if (rerouteRand.nextDouble() < REROUTE_PROBABILITY)
+            {
+                logger.info("rerouting vehicle " + v.id);
+                v.recalculateRoute();
+            }
+        });
+
+        if (iteration % EXPMAP_UPDATE_FREQUENCY == 0)
+        {
+            logger.info("Updating expected map");
+            expectedWeighting.updateExpectedMap(DAMPING_FACTOR, vehicles);
+        }
+    }
+}
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/SelfDrivingVehicle.java b/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/SelfDrivingVehicle.java
index cd786435f2..64cd661955 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/SelfDrivingVehicle.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/SelfDrivingVehicle.java
@@ -26,6 +26,35 @@ public SelfDrivingVehicle(MarmosetHopper hopper, Location start, Location dest)
 
     @Override
     public VehicleIterator getVehicleIterator()
+    {
+        edgeList = calculateRoute();
+
+        if (edgeList == null)
+            return null;
+
+        FlagEncoder carEncoder = hopper.getGraphHopper().getEncodingManager().getEncoder("car");
+        return new SelfDrivingVehicleIterator(edgeList, carEncoder);
+    }
+
+    public List<EdgeIteratorState> getCurrentPath()
+    {
+        return edgeList;
+    }
+
+    public void recalculateRoute()
+    {
+        List<EdgeIteratorState> edges = calculateRoute();
+        if (edges == null)
+            return;
+
+        edgeList = edges;
+
+        SelfDrivingVehicleIterator sdvRoute = (SelfDrivingVehicleIterator) route;
+        sdvRoute.resetEdges(edgeList);
+
+    }
+
+    protected List<EdgeIteratorState> calculateRoute()
     {
         GraphHopper gh = hopper.getGraphHopper();
 
@@ -48,20 +77,14 @@ public VehicleIterator getVehicleIterator()
         }
 
         Path p = paths.get(0);
-        edgeList = p.calcEdges();
+        List<EdgeIteratorState> edges = p.calcEdges();
 
-        if (edgeList.size() <= 1)
+        if (edges.size() <= 1)
         {
             finish("Edge list too short");
             return null;
         }
 
-        FlagEncoder carEncoder = gh.getEncodingManager().getEncoder("car");
-        return new SelfDrivingVehicleIterator(edgeList, carEncoder);
-    }
-
-    public List<EdgeIteratorState> getCurrentPath()
-    {
-        return edgeList;
+        return edges;
     }
 }
