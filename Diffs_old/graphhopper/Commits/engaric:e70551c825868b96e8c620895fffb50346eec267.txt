diff --git a/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java b/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
index ec47475b51..bcb8b792a1 100644
--- a/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
+++ b/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
@@ -294,7 +294,7 @@ public GHResponse getGHResponse( HttpServletRequest httpReq, HttpServletResponse
 				}
 				logger.info("GraphHopperServlet.getGHResponse(" + enableInstructions + ")");
 				Map<String, Object> map = createJson(ghRsp, calcPoints, pointsEncoded,
-						enableElevation, enableInstructions);
+						enableElevation, enableInstructions, outputSrs);
 				Object infoMap = map.get("info");
 				if (infoMap != null)
 					((Map) infoMap).put("took", Math.round(took * 1000));
@@ -347,7 +347,7 @@ private String buildErrorMessageString( String paramValue, String paramName,
 	}
 
 	protected Map<String, Object> createJson( GHResponse rsp, boolean calcPoints,
-			boolean pointsEncoded, boolean includeElevation, boolean enableInstructions )
+			boolean pointsEncoded, boolean includeElevation, boolean enableInstructions, String outputSrs )
 			{
 		Map<String, Object> json = new HashMap<String, Object>();
 
@@ -379,7 +379,7 @@ private String buildErrorMessageString( String paramValue, String paramName,
 					jsonPath.put("bbox", rsp.calcRouteBBox(maxBounds2D).toGeoJson());
 				}
 
-				jsonPath.put("points", createPoints(points, pointsEncoded, includeElevation));
+				jsonPath.put("points", createPoints(points, pointsEncoded, includeElevation, outputSrs));
 
 				if (enableInstructions)
 				{
@@ -392,13 +392,19 @@ private String buildErrorMessageString( String paramValue, String paramName,
 		return json;
 			}
 
-	protected Object createPoints( PointList points, boolean pointsEncoded, boolean includeElevation )
+	protected Object createPoints( PointList points, boolean pointsEncoded, boolean includeElevation, String outputSrs )
 	{
 		if (pointsEncoded)
 			return WebHelper.encodePolyline(points, includeElevation);
 
 		Map<String, Object> jsonPoints = new HashMap<String, Object>();
 		jsonPoints.put("type", "LineString");
+		Map<String, Object> crsObj = new HashMap<String, Object>();
+		crsObj.put("type", "name");
+		Map<String, Object> propObj = new HashMap<String, Object>();
+		propObj.put("name", outputSrs);
+		crsObj.put("properties", propObj );
+		jsonPoints.put("crs", crsObj);
 		jsonPoints.put("coordinates", points.toGeoJson(includeElevation));
 		return jsonPoints;
 	}
diff --git a/web/src/test/java/com/graphhopper/http/GraphHopperServletTest.java b/web/src/test/java/com/graphhopper/http/GraphHopperServletTest.java
index 8f88489d3a..4e9d769089 100644
--- a/web/src/test/java/com/graphhopper/http/GraphHopperServletTest.java
+++ b/web/src/test/java/com/graphhopper/http/GraphHopperServletTest.java
@@ -775,7 +775,7 @@ public void testGetPointsWithRequestSrs() throws InvalidParameterException {
 	}
 	
 	@Test 
-	public void testGetPointsWithInvalidRequestSrs() {
+	public void testGetPointsWithInvalidRequestSrs() throws InvalidParameterException {
 		allParameters.put("point", POINTS);
 		allParameters.put("vehicle", new String[] { VEHICLES[0] });
 		allParameters.put("locale", new String[] { LOCALES[0] });
@@ -787,11 +787,9 @@ public void testGetPointsWithInvalidRequestSrs() {
 		try {
 			List<GHPoint> points = graphHopperServlet.getPoints(httpServletRequest, "point");
 			fail("Should have thrown error as srs is invalid");
-		} catch (InvalidParameterException ipe) {
-			assertEquals("Point " + POINTS[0]
-								+ " is not a valid point. Point must be a comma separated coordinate in "
-								+ invalidSRS
-								+ " projection.", ipe.getStatusMessage());
+		} catch (IllegalArgumentException ipe) {
+			assertEquals("Srs " + invalidSRS
+								+ " is not a valid srs for input.", ipe.getMessage());
 		}
 	}
 
