diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/BridleWay.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/BridleWay.java
index e7067b6516..ec3a5a91bb 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/BridleWay.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/BridleWay.java
@@ -11,6 +11,8 @@
     protected void applyAttributes(Way way)
     {
         way.setTag("designation", "public_bridleway");
+        way.setTag("highway", "bridleway");
+        way.setTag("foot", "yes");
     }
 
 }
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/BywayOpenToAllTraffic.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/BywayOpenToAllTraffic.java
index 7592470a86..a059774668 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/BywayOpenToAllTraffic.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/BywayOpenToAllTraffic.java
@@ -11,6 +11,9 @@
     protected void applyAttributes(Way way) {
         way.setTag("designation", "byway_open_to_all_traffic");
         way.setTag("highway", "track");
+        way.setTag("foot", "yes");
+        way.setTag("horse", "yes");
+        way.setTag("bicycle", "yes");
     }
 
 }
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/Footpath.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/Footpath.java
index ec2d3bf126..d8a8d2e265 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/Footpath.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/Footpath.java
@@ -11,6 +11,8 @@
     protected void applyAttributes(Way way)
     {
         way.setTag("designation", "public_footpath");
+        way.setTag("highway", "footway");
+        way.setTag("foot", "yes");
     }
 
 }
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/None.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/None.java
new file mode 100644
index 0000000000..68a012f725
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/None.java
@@ -0,0 +1,16 @@
+package com.graphhopper.reader.osgb.dpn;
+
+import com.graphhopper.reader.Way;
+
+/**
+ * Created by sadam on 16/02/15.
+ */
+public class None extends AbstractOsDpnOsmAttibuteMappingVisitor {
+
+    @Override
+    protected void applyAttributes(Way way) {
+        way.setTag("foot", "no");
+        way.setTag("bicycle", "no");
+        way.setTag("horse", "no");
+    }
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnElement.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnElement.java
index 3b4f0551ec..d86c6dcae9 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnElement.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnElement.java
@@ -72,84 +72,70 @@ protected void readTags(XMLStreamReader parser) throws XMLStreamException,
 	while (event != XMLStreamConstants.END_DOCUMENT
 			&& (event != XMLStreamConstants.END_ELEMENT || !exitElement(parser)))
 	    if (event == XMLStreamConstants.CHARACTERS)
-		event = parser.next();
+            event = parser.next();
 	    else if (event == XMLStreamConstants.START_ELEMENT)
-		// logger.info("LOCALNAME: {}", parser.getLocalName());
-		switch (parser.getLocalName())
-		{
-		case "pos":
-		case "coordinates":
-		{
-		    event = handleCoordinates(parser);
-		    break;
-		}
-		case "networkMember":
-		{
-		    event = handleNetworkMember(parser);
-		    break;
-		}
-		case "posList":
-		{
-		    event = handleMultiDimensionCoords(parser);
-		    break;
-		}
-		case "startNode":
-		case "endNode":
-		{
-		    event = handleNode(parser);
-		    break;
-		}
-		case "directedLink":
-		{
-		    event = handleDirectedLink(parser);
-		    break;
-		}
-		case "instruction":
-		{
-		    setTag("type", "restriction");
-		    event = handleTag("restriction", parser);
-		    break;
-		}
-            case "surfaceType":
-            {
-                event=handleSurfaceType(parser);
-                break;
+            // logger.info("LOCALNAME: {}", parser.getLocalName());
+            switch (parser.getLocalName()) {
+                case "pos":
+                case "coordinates": {
+                    event = handleCoordinates(parser);
+                    break;
+                }
+                case "networkMember": {
+                    event = handleNetworkMember(parser);
+                    break;
+                }
+                case "posList": {
+                    event = handleMultiDimensionCoords(parser);
+                    break;
+                }
+                case "startNode":
+                case "endNode": {
+                    event = handleNode(parser);
+                    break;
+                }
+                case "directedLink": {
+                    event = handleDirectedLink(parser);
+                    break;
+                }
+                case "instruction": {
+                    setTag("type", "restriction");
+                    event = handleTag("restriction", parser);
+                    break;
+                }
+                case "surfaceType": {
+                    event = handleSurfaceType(parser);
+                    break;
+                }
+                case "descriptiveTerm": {
+                    event = handleDescriptiveTerm(parser);
+                    break;
+                }
+                case "name":
+                case "alternativeName": {
+                    event = handleName(parser);
+                    break;
+                }
+                case "physicalLevel": {
+                    event = handlePhysicalLevel(parser);
+                    break;
+                }
+                case "rightOfUse": {
+                    event = handleRightOfUse(parser);
+                    break;
+                }
+                case "potentialHazardCrossed": {
+                    event = handlePotentialHazard(parser);
+                    break;
+                }
+
+                default: {
+                    event = parser.next();
+                }
             }
-		case "descriptiveTerm":
-		{
-		    event = handleDescriptiveTerm(parser);
-		    break;
-		}
-		case "name":
-		case "alternativeName":
-		{
-		    event = handleName(parser);
-		    break;
-		}
-            case "physicalLevel":
-            {
-                event = handlePhysicalLevel(parser);
-                break;
-            }
-            case "rightOfUse":
-            {
-                event = handleRightOfUse(parser);
-                break;
-            }
-            case "potentialHazardCrossed":
-            {
-                event = handlePotentialHazard(parser);
-                break;
-            }
-
-		default:
-		{
-		    event = parser.next();
-		}
-		}
 	    else
-		// logger.trace("EVENT:" + event);
-		event = parser.next();
+            // logger.trace("EVENT:" + event);
+            event = parser.next();
     }
 
     protected int handleSurfaceType(XMLStreamReader parser) throws XMLStreamException
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnReader.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnReader.java
index 8d12c5d50b..469ebae8a3 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnReader.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnReader.java
@@ -195,9 +195,11 @@ void preProcess(File osmFile) {
                 if (item.isType(OSMElement.WAY)) {
                     final OsDpnWay way = (OsDpnWay) item;
                     boolean valid = filterWay(way);
+                    logger.info("Valid Way:" + valid);
                     if (valid) {
                         List<String> wayNodes = way.getNodes();
                         int s = wayNodes.size();
+                        logger.info("With Nodes:" + s);
                         for (int index = 0; index < s; index++) {
                             prepareHighwayNode(wayNodes.get(index));
                         }
@@ -263,13 +265,14 @@ void preProcess(File osmFile) {
      * @return true the current xml entry is a way entry and has nodes
      */
     boolean filterWay(OsDpnWay way) {
+        logger.info(way.getNodes().size() + ":" + way.hasTags());
         // ignore broken geometry
         if (way.getNodes().size() < 2)
             return false;
 
         // ignore multipolygon geometry
-        if (!way.hasTags())
-            return false;
+        //if (!way.hasTags())
+        //    return false;
 
         return encodingManager.acceptWay(way) > 0;
     }
@@ -297,6 +300,7 @@ private void writeOsm2Graph(File osmFile) {
                     case OSMElement.NODE:
                         OsDpnNode dpnNode = (OsDpnNode) item;
                         String id = dpnNode.getId();
+                        System.out.println(id);
                         logger.info("NODEITEMID:" + id);
                         if (nodeFilter.get(id) != -1) {
                             processNode(dpnNode);
@@ -337,7 +341,7 @@ private void writeOsm2Graph(File osmFile) {
 
         finishedReading();
         if (graphStorage.getNodes() == 0)
-            throw new IllegalStateException("osm must not be empty. read "
+            throw new IllegalStateException("dpn must not be empty. read "
                     + counter + " lines and " + locations + " locations");
     }
 
@@ -579,6 +583,7 @@ private double getElevation(Node node) {
      */
 
     void prepareHighwayNode(String idStr) {
+        logger.info("Prepare HighwayNode:" + idStr);
         int tmpIndex = getNodeMap().get(idStr);
         if (tmpIndex == EMPTY) {
             // osmId is used exactly once
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnWay.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnWay.java
index eadb10463f..966a4f7a1f 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnWay.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnWay.java
@@ -51,7 +51,7 @@
     private String[] wayCoords;
     private static final Logger logger = LoggerFactory
             .getLogger(OsDpnWay.class);
-    private static OsDpnOsmAttributeMappingVisitor[] rightOfWayVisitors = {new BridleWay(), new PermissiveBridleWay(), new BywayOpenToAllTraffic(), new Footpath(), new PermissivePath(), new RestrictedByway()};
+    private static OsDpnOsmAttributeMappingVisitor[] rightOfWayVisitors = {new BridleWay(), new PermissiveBridleWay(), new BywayOpenToAllTraffic(), new None(), new OtherRouteWithPublicAccess(), new Footpath(), new PermissivePath(), new RestrictedByway()};
     private static OsDpnOsmAttributeMappingVisitor[] potentialHazardVisitors = {new Boulders(), new Cliff(), new Marsh(), new Mud(), new Sand(), new Scree(), new Shingle(), new Spoil(), new Rock(), new TidalWater()};
 
     /**
@@ -67,6 +67,7 @@ public static OsDpnWay create(String idStr, XMLStreamReader parser)
         System.out.println("OsDpnWay.create()");
         OsDpnWay way = new OsDpnWay(idStr);
         parser.nextTag();
+        way.setTag("highway", "footway");
         way.readTags(parser);
         logger.info(way.toString());
         return way;
@@ -97,7 +98,7 @@ else if("Unmade".equals(surfaceType))
             surface = "unpaved";
         }
         setTag("surface", surface);
-        return super.handleSurfaceType(parser);
+        return parser.getEventType();
     }
 
     @Override
@@ -109,7 +110,7 @@ protected int handlePhysicalLevel(XMLStreamReader parser) throws XMLStreamExcept
         } else if("Above Surface Level On Structure".equals(text)) {
             setTag("bridge", "yes");
         }
-        return super.handlePhysicalLevel(parser);
+        return parser.getEventType();
     }
 
     @Override
@@ -119,7 +120,7 @@ protected int handleRightOfUse(XMLStreamReader parser) throws XMLStreamException
         for(OsDpnOsmAttributeMappingVisitor rightOfWayVisitor: rightOfWayVisitors) {
             rightOfWayVisitor.visitWayAttribute(attributeValue, this);
         }
-        return super.handlePhysicalLevel(parser);
+        return parser.getEventType();
     }
     
     @Override
@@ -129,7 +130,7 @@ protected int handlePotentialHazard(XMLStreamReader parser) throws XMLStreamExce
         for(OsDpnOsmAttributeMappingVisitor potentialHazzardVisitor: potentialHazardVisitors) {
         	potentialHazzardVisitor.visitWayAttribute(attributeValue, this);
         }
-        return super.handlePotentialHazard(parser);
+        return parser.getEventType();
     }
 
     @Override
@@ -137,7 +138,7 @@ protected void parseCoords(String lineDefinition) {
         String[] lineSegments = lineDefinition.split(" ");
         wayCoords = Arrays
                 .copyOfRange(lineSegments, 1, lineSegments.length - 1);
-        logger.info(toString() + " "
+        logger.info("parseCoords1" + toString() + " "
                 + ((wayCoords.length == 0) ? "0" : wayCoords[0]));
     }
 
@@ -169,7 +170,7 @@ protected void parseCoords(int dimensions, String lineDefinition) {
         wayCoords[wayCoords.length - 1] = curString.toString();
         addWayNodes();
         nodes.add(endNode);
-        logger.info(toString() + " "
+        logger.info("parsecoord2" + toString() + " "
                 + ((wayCoords.length == 0) ? "0" : wayCoords[0]));
     }
 
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OtherRouteWithPublicAccess.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OtherRouteWithPublicAccess.java
new file mode 100644
index 0000000000..5af108ae97
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OtherRouteWithPublicAccess.java
@@ -0,0 +1,13 @@
+package com.graphhopper.reader.osgb.dpn;
+
+import com.graphhopper.reader.Way;
+
+/**
+ * Created by sadam on 16/02/15.
+ */
+public class OtherRouteWithPublicAccess extends AbstractOsDpnOsmAttibuteMappingVisitor {
+    @Override
+    protected void applyAttributes(Way way) {
+        way.setTag("foot", "yes");
+    }
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/PermissiveBridleWay.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/PermissiveBridleWay.java
index 2c40261359..ae589aaca9 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/PermissiveBridleWay.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/PermissiveBridleWay.java
@@ -10,8 +10,10 @@
     @Override
     protected void applyAttributes(Way way)
     {
+        way.setTag("highway", "bridleway");
         way.setTag("horse", "permissive");
         way.setTag("bicycle", "permissive");
+        way.setTag("foot", "permissive");
     }
 
 }
diff --git a/core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java
index 5e44443b2b..a64157baa3 100644
--- a/core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java
@@ -127,8 +127,11 @@ protected AbstractFlagEncoder( int speedBits, double speedFactor, int maxTurnCos
         acceptedRailways.add("obliterated");
 
         intendedValues.add("true");
+        intendedValues.add("yes");
 
         excludedValues.add("false");
+        excludedValues.add("no");
+
 
     }
 
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/AbstractOsDpnReaderTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/AbstractOsDpnReaderTest.java
index 3175bb493e..77b7093596 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/AbstractOsDpnReaderTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/AbstractOsDpnReaderTest.java
@@ -28,8 +28,7 @@
 
     protected EncodingManager encodingManager;// = new
     // EncodingManager("CAR");//"car:com.graphhopper.routing.util.RelationCarFlagEncoder");
-    protected CarFlagEncoder carEncoder;// = (RelationCarFlagEncoder)
-    protected BusFlagEncoder busEncoder;// = (RelationCarFlagEncoder)
+    protected BusFlagEncoder busEncoder;
     // encodingManager
     // .getEncoder("CAR");
     protected EdgeFilter carOutEdges;// = new DefaultEdgeFilter(
@@ -64,18 +63,12 @@
     @Before
     public void initEncoding() {
         if (turnCosts) {
-            carEncoder = new CarFlagEncoder(5, 5, 3);
-            busEncoder = new BusFlagEncoder(5, 5, 3);
             bikeEncoder = new BikeFlagEncoder(4, 2, 3);
         } else {
-            carEncoder = new CarFlagEncoder();
-            busEncoder = new BusFlagEncoder();
             bikeEncoder = new BikeFlagEncoder();
         }
 
         footEncoder = new FootFlagEncoder();
-        carOutEdges = new DefaultEdgeFilter(carEncoder, false, true);
-        carInEdges = new DefaultEdgeFilter(carEncoder, true, false);
         encodingManager = createEncodingManager();
     }
 
@@ -85,7 +78,7 @@ public void initEncoding() {
      * @return
      */
     protected EncodingManager createEncodingManager() {
-        return new EncodingManager(footEncoder, carEncoder, bikeEncoder);
+        return new EncodingManager(footEncoder, bikeEncoder);
     }
 
     protected OsDpnReader readGraphFile(GraphHopperStorage graph, File file)
@@ -121,7 +114,7 @@ protected int getEdge(int from, int to) {
     protected void evaluateRouting(final EdgeIterator iter, final int node,
             final boolean forward, final boolean backward,
             final boolean finished) {
-        evaluateRouting(iter, node, forward, backward, finished, carEncoder);
+        evaluateRouting(iter, node, forward, backward, finished, footEncoder);
     }
 
     protected void evaluateRouting(final EdgeIterator iter, final int node,
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/BridleWayTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/BridleWayTest.java
index a4452d6f4e..e9fd0a3d81 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/BridleWayTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/BridleWayTest.java
@@ -29,6 +29,8 @@ public void init() {
     public void testVisitWayAttribute() {
         visitor.visitWayAttribute("bridleway", way);
         verify(way).setTag("designation", "public_bridleway");
+        verify(way).setTag("highway", "bridleway");
+        verify(way).setTag("foot", "yes");
     }
 
 }
\ No newline at end of file
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/BywayOpenToAllTrafficTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/BywayOpenToAllTrafficTest.java
index f513f50d97..b809caa4c1 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/BywayOpenToAllTrafficTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/BywayOpenToAllTrafficTest.java
@@ -31,5 +31,8 @@ public void testVisitWayAttribute() throws Exception {
         visitor.visitWayAttribute("bywayopentoalltraffic", way);
         verify(way).setTag("designation", "byway_open_to_all_traffic");
         verify(way).setTag("highway", "track");
+        verify(way).setTag("foot", "yes");
+        verify(way).setTag("horse", "yes");
+        verify(way).setTag("bicycle", "yes");
     }
 }
\ No newline at end of file
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/FootpathTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/FootpathTest.java
index 60b319784e..c13efb38a7 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/FootpathTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/FootpathTest.java
@@ -32,6 +32,8 @@ public void testVisitWayAttribute()
     {
         visitor.visitWayAttribute("footpath", way);
         verify(way).setTag("designation", "public_footpath");
+        verify(way).setTag("highway", "footway");
+        verify(way).setTag("foot", "yes");
     }
 
 }
\ No newline at end of file
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/NoneTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/NoneTest.java
new file mode 100644
index 0000000000..98d4612f1d
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/NoneTest.java
@@ -0,0 +1,36 @@
+package com.graphhopper.reader.osgb.dpn;
+
+import com.graphhopper.reader.Way;
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import static org.junit.Assert.*;
+import static org.mockito.Mockito.verify;
+
+public class NoneTest {
+    static OsDpnOsmAttributeMappingVisitor visitor;
+    @Mock
+    Way way;
+
+    @BeforeClass
+    public static void createVisitor() {
+        visitor = new None();
+    }
+
+    @Before
+    public void init() {
+        MockitoAnnotations.initMocks(this);
+    }
+
+    @Test
+    public void testVisitWayAttribute() {
+        visitor.visitWayAttribute("none", way);
+        verify(way).setTag("foot", "no");
+        verify(way).setTag("bicycle", "no");
+        verify(way).setTag("horse", "no");
+    }
+
+}
\ No newline at end of file
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/OsDpnReaderTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/OsDpnReaderTest.java
index c03cb0834e..9b11ca016b 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/OsDpnReaderTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/OsDpnReaderTest.java
@@ -122,7 +122,7 @@ public void testReadDpnSampleNameDefaultToTrackFriendlyNameWhenNoPhysicalManifes
 
     private void configureExplorer(final GraphHopperStorage graph)
     {
-	explorer = graph.createEdgeExplorer(new DefaultEdgeFilter(carEncoder, true, true));
+	explorer = graph.createEdgeExplorer(new DefaultEdgeFilter(footEncoder, true, true));
     }
 
     private GraphHopperStorage readGraph() throws IOException
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/OtherRouteWithPublicAccessTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/OtherRouteWithPublicAccessTest.java
new file mode 100644
index 0000000000..ae03268def
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/OtherRouteWithPublicAccessTest.java
@@ -0,0 +1,33 @@
+package com.graphhopper.reader.osgb.dpn;
+
+import com.graphhopper.reader.Way;
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import static org.mockito.Mockito.verify;
+
+public class OtherRouteWithPublicAccessTest {
+    static OsDpnOsmAttributeMappingVisitor visitor;
+    @Mock
+    Way way;
+
+    @BeforeClass
+    public static void createVisitor() {
+        visitor = new OtherRouteWithPublicAccess();
+    }
+
+    @Before
+    public void init() {
+        MockitoAnnotations.initMocks(this);
+    }
+
+    @Test
+    public void testVisitWayAttribute() {
+        visitor.visitWayAttribute("otherroutewithpublicaccess", way);
+        verify(way).setTag("foot", "yes");
+    }
+
+}
\ No newline at end of file
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/PermissiveBridleWayTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/PermissiveBridleWayTest.java
index 611534fb34..c98e6b7917 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/PermissiveBridleWayTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/PermissiveBridleWayTest.java
@@ -31,8 +31,10 @@ public void init()
     public void testVisitWayAttribute()
     {
         visitor.visitWayAttribute("permissivebridleway", way);
+        verify(way).setTag("highway", "bridleway");
         verify(way).setTag("horse", "permissive");
         verify(way).setTag("bicycle", "permissive");
+        verify(way).setTag("foot", "permissive");
     }
 
 }
\ No newline at end of file
diff --git a/core/src/test/resources/com/graphhopper/reader/osgb/dpn/os-dpn-sample.xml b/core/src/test/resources/com/graphhopper/reader/osgb/dpn/os-dpn-sample.xml
index 892ca018e8..538d0ef477 100644
--- a/core/src/test/resources/com/graphhopper/reader/osgb/dpn/os-dpn-sample.xml
+++ b/core/src/test/resources/com/graphhopper/reader/osgb/dpn/os-dpn-sample.xml
@@ -81,6 +81,7 @@
       <dpn:surfaceType codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#Unmade">Unmade</dpn:surfaceType>
       <dpn:physicalLevel codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#BelowSurfaceLevelTunnel">Below Surface Level Tunnel</dpn:physicalLevel>
       <dpn:name>Named Road</dpn:name>
+        <dpn:rightOfUse codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/RightOfWayValue#Footpath">Footpath</dpn:rightOfUse>
       <dpn:adoptedByNationalCycleRoute>false</dpn:adoptedByNationalCycleRoute>
       <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>
       <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>
