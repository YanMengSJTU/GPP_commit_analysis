diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/MultiSDVController.java b/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/MultiSDVController.java
index 7940ce60a0..b158630bc4 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/MultiSDVController.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/MultiSDVController.java
@@ -5,13 +5,11 @@
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import java.util.ArrayList;
-import java.util.List;
+import java.util.LinkedList;
 import java.util.Random;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
 import java.util.concurrent.TimeUnit;
-import java.util.stream.Collectors;
 
 /**
  * Created by alexander on 22/04/2016.
@@ -24,7 +22,7 @@
     public static final double REROUTE_PROBABILITY = 0.001;
     public static final int EXPMAP_UPDATE_FREQUENCY = 100;
 
-    protected List<SelfDrivingVehicle> vehicles;
+    protected LinkedList<SelfDrivingVehicle> vehicles;
     protected final ExpectedWeighting expectedWeighting;
 
     private Random rerouteRand = new Random(9876);
@@ -32,23 +30,45 @@
     public MultiSDVController(ExpectedWeighting expectedWeighting)
     {
         this.expectedWeighting = expectedWeighting;
-        vehicles = new ArrayList<>();
-        EventManager.listenTo("vehicle:added", (s, vehicle) -> vehicles.add((SelfDrivingVehicle) vehicle[0]));
+        vehicles = new LinkedList<>();
+        EventManager.listenTo("vehicle:added", (s, vehicle) -> {
+            Vehicle v = (Vehicle) vehicle[0];
+            if (v instanceof SelfDrivingVehicle)
+            {
+                vehicles.add((SelfDrivingVehicle) v);
+            }
+        });
         EventManager.listenTo("timestep:end", (s, args) -> timestepHandler((Integer) args[0]));
     }
 
     public void timestepHandler(int iteration)
     {
         ExecutorService es = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());
-        vehicles.stream().filter(v -> rerouteRand.nextDouble() <= REROUTE_PROBABILITY).map(v -> {
+//        vehicles.stream().filter(v -> rerouteRand.nextDouble() <= REROUTE_PROBABILITY).map(v -> {
+//            logger.info("Rerouting vehicle " + v.id);
+//            return (Runnable) v::recalculateRoute;
+//        }).forEach(es::submit);
+
+        int rerouteCount = (int) (REROUTE_PROBABILITY * vehicles.size());
+        for (int i = 0; i < rerouteCount; i++)
+        {
+            SelfDrivingVehicle v = vehicles.pollFirst();
+            while (v.isFinished())
+            {
+                logger.info("Skipping vehicle " + v.id);
+                v = vehicles.pollFirst();
+            }
+
             logger.info("Rerouting vehicle " + v.id);
-            return (Runnable) v::recalculateRoute;
-        }).forEach(es::submit);
+            es.submit((Runnable) v::recalculateRoute);
+            vehicles.addLast(v);
+            logger.info("vehicle count: " + vehicles.size());
+        }
 
         es.shutdown();
         try
         {
-            es.awaitTermination((long) (vehicles.size()*REROUTE_PROBABILITY*200), TimeUnit.MILLISECONDS);
+            es.awaitTermination(rerouteCount*200, TimeUnit.MILLISECONDS);
         }
         catch (InterruptedException e)
         {
@@ -64,6 +84,6 @@ public void timestepHandler(int iteration)
             expectedWeighting.updateExpectedMap(DAMPING_FACTOR, vehicles);
         }
 
-        vehicles = vehicles.stream().filter(v -> !v.isFinished()).collect(Collectors.toList());
+//        vehicles = vehicles.stream().filter(v -> !v.isFinished()).collect(Collectors.toList());
     }
 }
