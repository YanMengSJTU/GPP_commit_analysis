diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/Vehicle.java b/marmoset/src/main/java/com/graphhopper/marmoset/Vehicle.java
index bd2486370f..7e374e6afd 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/Vehicle.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/Vehicle.java
@@ -42,7 +42,7 @@
 
     public Vehicle(MarmosetHopper hopper, Location start, Location dest)
     {
-        slowProb = 0.2f;
+        slowProb = 0.0f;
         this.hopper = hopper;
         this.dest = dest;
         this.loc = start;
@@ -86,7 +86,7 @@ public void init()
         logger.info("max edge id: " + maxId);
         logger.info("min edge id: " + minId);
 
-        cg.set(edgeId, cellId, v);
+        cg.set(edgeId, cellId, true);
 
         finished = false;
     }
@@ -97,8 +97,6 @@ public void accelerationStep()
         assert !isFinished();
 
         freeCells = cg.freeCellsAhead(edgeId, cellId);
-        int c = cg.getCellCount(edgeId);
-        logger.info(id + "freecells:"+freeCells + "V:"+v + "count:"+ c);
         if (freeCells > v+1 && v < maxVelocity)
         {
             logger.info("Accelerating");
@@ -117,6 +115,8 @@ public void slowStep()
 
     public void randomStep()
     {
+        int c = cg.getCellCount(edgeId);
+        logger.info(id + "freecells:"+freeCells + "V:"+v + "count:"+ c);
         if (v > 0 && Math.random() < slowProb)
         {
             logger.info("Randomly slowing");
@@ -127,9 +127,9 @@ public void randomStep()
     public void moveStep()
     {
         logger.info("Moving from " + cellId + " to " + (cellId + v));
-        cg.set(edgeId, cellId, 0);
+        cg.set(edgeId, cellId, false);
         cellId += v;
-        cg.set(edgeId, cellId, v);
+        cg.set(edgeId, cellId, true);
     }
 
     public void updateLocation()
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/util/CellsGraph.java b/marmoset/src/main/java/com/graphhopper/marmoset/util/CellsGraph.java
index 467d88621e..5bdbf1621d 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/util/CellsGraph.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/util/CellsGraph.java
@@ -9,7 +9,7 @@
 public class CellsGraph {
     private final int cellSize;
     private Graph graph;
-    private byte[][] cells;
+    private boolean[][] cells;
 
     public CellsGraph(Graph graph, int cellSize) {
         this.cellSize = cellSize;
@@ -19,11 +19,11 @@ public CellsGraph(Graph graph, int cellSize) {
     public void init()
     {
         AllEdgesIterator iterator = graph.getAllEdges();
-        cells = new byte[iterator.getMaxId()][];
+        cells = new boolean[iterator.getMaxId()][];
         while (iterator.next())
         {
             int cellCount = Math.max(1, (int) (iterator.getDistance() / cellSize));
-            cells[iterator.getEdge()] = new byte[cellCount];
+            cells[iterator.getEdge()] = new boolean[cellCount];
         }
     }
 
@@ -40,7 +40,7 @@ public int freeCellsAhead(int edgeId, int cellId)
         int move = 1;
         while (cellId + move < cells[edgeId].length)
         {
-            if (cells[edgeId][cellId + move] == 0)
+            if (!cells[edgeId][cellId + move])
                 move++;
             else
                 return move-1;
@@ -49,12 +49,7 @@ public int freeCellsAhead(int edgeId, int cellId)
         return move-1;
     }
 
-    public void set(int edgeId, int cellId, int v)
-    {
-        set(edgeId, cellId, (byte) v);
-    }
-
-    public void set(int edgeId, int cellId, byte v)
+    public void set(int edgeId, int cellId, boolean hasVehicle)
     {
         if (edgeId >= cells.length)
             throw new ArrayIndexOutOfBoundsException(
@@ -63,6 +58,6 @@ public void set(int edgeId, int cellId, byte v)
             throw new ArrayIndexOutOfBoundsException(
                     String.format("CellId '%d' out of bounds (max %d) for edge %d", cellId, cells[edgeId].length, edgeId));
 
-        cells[edgeId][cellId] = v;
+        cells[edgeId][cellId] = hasVehicle;
     }
 }
