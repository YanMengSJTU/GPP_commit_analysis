diff --git a/graphhopper-teavm/src/main/java/com/graphhopper/teavm/InMemoryDataAccess.java b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/InMemoryDataAccess.java
index 99de7e191c..32408a3552 100644
--- a/graphhopper-teavm/src/main/java/com/graphhopper/teavm/InMemoryDataAccess.java
+++ b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/InMemoryDataAccess.java
@@ -58,7 +58,7 @@ protected void copyHeader( DataAccess da )
     public DataAccess create( long bytes )
     {
         if (segments.length > 0)
-            throw new IllegalThreadStateException("already created");
+            throw new IllegalStateException("already created");
 
         // initialize transient values
         setSegmentSize(segmentSizeInBytes);
diff --git a/graphhopper-teavm/src/main/java/com/graphhopper/teavm/Main.java b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/Main.java
index 1250db289a..2a31528bc9 100644
--- a/graphhopper-teavm/src/main/java/com/graphhopper/teavm/Main.java
+++ b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/Main.java
@@ -1,8 +1,11 @@
 package com.graphhopper.teavm;
 
 import com.graphhopper.routing.DijkstraBidirection;
+import com.graphhopper.routing.Path;
 import com.graphhopper.routing.util.*;
 import com.graphhopper.storage.GraphHopperStorage;
+import com.graphhopper.storage.index.LocationIndexTree;
+import com.graphhopper.util.PointList;
 
 /**
  *
@@ -18,6 +21,17 @@ public static void main(String[] args) {
 
         Weighting weighting = new FastestWeighting(encoder);
         DijkstraBidirection algo = new DijkstraBidirection(graph, encoder, weighting);
-        algo.calcPath(0, 1);
+
+        LocationIndexTree locationIndex = new LocationIndexTree(graph, directory);
+        locationIndex.prepareIndex();
+        int fromNode = locationIndex.findID(55.762523, 37.408784);
+        int toNode = locationIndex.findID(55.784806, 37.708047);
+
+        Path path = algo.calcPath(fromNode, toNode);
+        PointList points = path.calcPoints();
+        for (int i = 0; i < points.size(); ++i) {
+            System.out.println(points.getLat(i) + "; " + points.getLon(i));
+        }
+        System.out.println("Distance: " + path.getDistance());
     }
 }
