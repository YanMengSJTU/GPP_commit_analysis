diff --git a/android/app/src/main/java/com/graphhopper/android/MainActivity.java b/android/app/src/main/java/com/graphhopper/android/MainActivity.java
index 62e5024c5f..83389ff859 100644
--- a/android/app/src/main/java/com/graphhopper/android/MainActivity.java
+++ b/android/app/src/main/java/com/graphhopper/android/MainActivity.java
@@ -23,6 +23,7 @@
 import android.widget.Spinner;
 import android.widget.TextView;
 import android.widget.Toast;
+import com.graphhopper.AltResponse;
 
 import com.graphhopper.GHRequest;
 import com.graphhopper.GHResponse;
@@ -461,7 +462,7 @@ private void finishPrepare()
         prepareInProgress = false;
     }
 
-    private Polyline createPolyline( GHResponse response )
+    private Polyline createPolyline( AltResponse response )
     {
         Paint paintStroke = AndroidGraphicFactory.INSTANCE.createPaint();
         paintStroke.setStyle(Style.STROKE);
@@ -495,11 +496,11 @@ public void calcPath( final double fromLat, final double fromLon,
     {
 
         log("calculating path ...");
-        new AsyncTask<Void, Void, GHResponse>()
+        new AsyncTask<Void, Void, AltResponse>()
         {
             float time;
 
-            protected GHResponse doInBackground( Void... v )
+            protected AltResponse doInBackground( Void... v )
             {
                 StopWatch sw = new StopWatch().start();
                 GHRequest req = new GHRequest(fromLat, fromLon, toLat, toLon).
@@ -508,10 +509,10 @@ protected GHResponse doInBackground( Void... v )
                         put("instructions", "false");
                 GHResponse resp = hopper.route(req);
                 time = sw.stop().getSeconds();
-                return resp;
+                return resp.getFirst();
             }
 
-            protected void onPostExecute( GHResponse resp )
+            protected void onPostExecute( AltResponse resp )
             {
                 if (!resp.hasErrors())
                 {
diff --git a/core/files/changelog.txt b/core/files/changelog.txt
index d8e91c3b99..2ae291bc88 100644
--- a/core/files/changelog.txt
+++ b/core/files/changelog.txt
@@ -1,4 +1,7 @@
 0.6
+    removed methods deprecated in 0.4 and 0.5
+    renamed EdgeEntry to SPTEntry
+    parameter force removed from AbstractFlagEncoder.applyMaxSpeed
     GHResponse now wraps multiple AltResponse; renames GraphHopper.getPaths to calcPaths as 'get' sounds too cheap; a new method RoutingAlgorithm.calcPaths is added; see #596
     moving lgpl licensed file into own submodule graphhopper-tools-lgpl
     renaming of Tarjans algorithm class to TarjansSCCAlgorithm
diff --git a/core/src/main/java/com/graphhopper/reader/OSMTagParser.java b/core/src/main/java/com/graphhopper/reader/OSMTagParser.java
index 9f56b3de73..221999506f 100644
--- a/core/src/main/java/com/graphhopper/reader/OSMTagParser.java
+++ b/core/src/main/java/com/graphhopper/reader/OSMTagParser.java
@@ -28,6 +28,9 @@
  */
 public class OSMTagParser
 {
+    // use a day somewhere within July 1970 which then makes two identical long months ala 31 days, see #588
+    private final static Date STATIC_DATE = new Date((31 * 6) * 24 * 3600 * 1000);
+
     /**
      * Parser according to http://wiki.openstreetmap.org/wiki/Key:duration The value consists of a
      * string ala 'hh:mm', format for hours and minutes 'mm', 'hh:mm' or 'hh:mm:ss', or
@@ -50,7 +53,7 @@ public static long parseDuration( String str ) throws IllegalArgumentException
             try
             {
                 dur = DatatypeFactory.newInstance().newDuration(str);
-                seconds = dur.getTimeInMillis(new Date()) / 1000;
+                seconds = dur.getTimeInMillis(STATIC_DATE) / 1000;
             } catch (Exception ex)
             {
                 throw new IllegalArgumentException("Cannot parse duration tag value: " + str, ex);
diff --git a/core/src/main/java/com/graphhopper/reader/osm/ConditionalTagsInspector.java b/core/src/main/java/com/graphhopper/reader/osm/ConditionalTagsInspector.java
new file mode 100644
index 0000000000..4c12a4bbbd
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osm/ConditionalTagsInspector.java
@@ -0,0 +1,102 @@
+/*
+ *  Licensed to GraphHopper and Peter Karich under one or more contributor
+ *  license agreements. See the NOTICE file distributed with this work for
+ *  additional information regarding copyright ownership.
+ *
+ *  GraphHopper licenses this file to you under the Apache License,
+ *  Version 2.0 (the "License"); you may not use this file except in
+ *  compliance with the License. You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package com.graphhopper.reader.osm;
+
+import com.graphhopper.reader.OSMWay;
+import com.graphhopper.reader.osm.conditional.ConditionalParser;
+import com.graphhopper.reader.osm.conditional.DateRange;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.util.Calendar;
+import java.util.List;
+import java.util.Set;
+
+/**
+ * Inspects the conditional tags of an OSMWay according to the given conditional tags.
+ * <p>
+ * @author Robin Boldt
+ */
+public class ConditionalTagsInspector
+{
+
+    private static final Logger logger = LoggerFactory.getLogger(ConditionalTagsInspector.class);
+
+    private final Calendar calendar;
+    private final List<String> tagsToCheck;
+    private final ConditionalParser restrictiveParser;
+    private final ConditionalParser permitParser;
+    private final boolean enabledLogs = false;
+
+    /**
+     * Create with todays date
+     */
+    public ConditionalTagsInspector( List<String> tagsToCheck, Set<String> restrictiveValues, Set<String> permittedValues )
+    {
+        this(Calendar.getInstance(), tagsToCheck, restrictiveValues, permittedValues);
+    }
+
+    /**
+     * Create with given date
+     */
+    public ConditionalTagsInspector( Calendar date, List<String> tagsToCheck, Set<String> restrictiveValues, Set<String> permittedValues )
+    {
+        this.calendar = date;
+        this.tagsToCheck = tagsToCheck;
+        this.restrictiveParser = new ConditionalParser(restrictiveValues, enabledLogs);
+        this.permitParser = new ConditionalParser(permittedValues, enabledLogs);
+    }
+
+    public boolean isRestrictedWayConditionallyPermitted( OSMWay way )
+    {
+        return applies(way, true);
+    }
+
+    public boolean isPermittedWayConditionallyRestricted( OSMWay way )
+    {
+        return applies(way, false);
+    }
+
+    protected boolean applies( OSMWay way, boolean checkPermissiveValues )
+    {
+        for (String tagToCheck : tagsToCheck)
+        {
+            tagToCheck = tagToCheck + ":conditional";
+            String val = way.getTag(tagToCheck);
+            if (val != null && !val.isEmpty())
+            {
+                try
+                {
+                    DateRange dateRange;
+                    if (checkPermissiveValues)
+                        dateRange = permitParser.getDateRange(val);
+                    else
+                        dateRange = restrictiveParser.getDateRange(val);
+
+                    if (dateRange != null && dateRange.isInRange(calendar))
+                        return true;
+                } catch (Exception e)
+                {
+                    if (enabledLogs)
+                        logger.warn("Could not parse the conditional value:" + val + " of tag:" + tagToCheck + ". Exception:" + e.getMessage());
+                }
+            }
+        }
+        return false;
+    }
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osm/conditional/ConditionalParser.java b/core/src/main/java/com/graphhopper/reader/osm/conditional/ConditionalParser.java
new file mode 100644
index 0000000000..67f518b51b
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osm/conditional/ConditionalParser.java
@@ -0,0 +1,81 @@
+/*
+ *  Licensed to GraphHopper and Peter Karich under one or more contributor
+ *  license agreements. See the NOTICE file distributed with this work for
+ *  additional information regarding copyright ownership.
+ *
+ *  GraphHopper licenses this file to you under the Apache License,
+ *  Version 2.0 (the "License"); you may not use this file except in
+ *  compliance with the License. You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package com.graphhopper.reader.osm.conditional;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import java.text.ParseException;
+import java.util.Set;
+
+/**
+ * Parses a conditional tag according to
+ * http://wiki.openstreetmap.org/wiki/Conditional_restrictions.
+ * <p>
+ * @author Robin Boldt
+ */
+public class ConditionalParser
+{
+
+    private final Set<String> restrictedTags;
+    private static final Logger logger = LoggerFactory.getLogger(ConditionalParser.class);
+    private final boolean enabledLogs;
+
+    public ConditionalParser( Set<String> restrictedTags )
+    {
+        this(restrictedTags, false);
+    }
+
+    public ConditionalParser( Set<String> restrictedTags, boolean enabledLogs )
+    {
+        this.restrictedTags = restrictedTags;
+        this.enabledLogs = enabledLogs;
+    }
+
+    public DateRange getDateRange( String conditionalTag ) throws ParseException
+    {
+
+        if (conditionalTag == null || conditionalTag.isEmpty() || !conditionalTag.contains("@"))
+            return null;
+
+        if (conditionalTag.contains(";"))
+        {
+            // TODO #374
+            if (enabledLogs)
+                logger.warn("We do not support multiple conditions yet: " + conditionalTag);
+            return null;
+        }
+
+        String[] conditionalArr = conditionalTag.split("@");
+
+        if (conditionalArr.length != 2)
+            throw new IllegalStateException("could not split this condition: " + conditionalTag);
+
+        String restrictiveValue = conditionalArr[0].trim();
+        if (!restrictedTags.contains(restrictiveValue))
+            return null;
+
+        String conditional = conditionalArr[1];
+        conditional = conditional.replace('(', ' ');
+        conditional = conditional.replace(')', ' ');
+        conditional = conditional.trim();
+
+        return DateRangeParser.parseDateRange(conditional);
+    }
+
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osm/conditional/DateRange.java b/core/src/main/java/com/graphhopper/reader/osm/conditional/DateRange.java
new file mode 100644
index 0000000000..028462b7fa
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osm/conditional/DateRange.java
@@ -0,0 +1,147 @@
+package com.graphhopper.reader.osm.conditional;
+
+import java.text.SimpleDateFormat;
+import java.util.Calendar;
+
+/**
+ * This class represents a date range and is able to determine if a given date is in that range.
+ * <p>
+ * @author Robin Boldt
+ */
+public class DateRange
+{
+    private Calendar from;
+    private Calendar to;
+
+    // Do not compare years
+    boolean yearless = false;
+
+    boolean dayOnly = false;
+
+    boolean reverse = false;
+
+    // TODO Gets to complex? Create Factory?
+    public DateRange( ParsedCalendar from, ParsedCalendar to )
+    {
+        Calendar fromCal = from.parsedCalendar;
+        Calendar toCal = to.parsedCalendar;
+
+        // This should never happen
+        if (fromCal.get(Calendar.ERA) != toCal.get(Calendar.ERA))
+        {
+            throw new IllegalArgumentException("Different ERAs are not allowed. From:" + from + " To:" + to);
+        }
+
+        if (from.isYearless() && to.isYearless())
+        {
+            yearless = true;
+        }
+
+        if (from.isDayOnly() && to.isDayOnly())
+        {
+            dayOnly = true;
+        }
+
+        if (fromCal.after(toCal))
+        {
+            if (!yearless && !dayOnly)
+            {
+                throw new IllegalArgumentException("From after to makes no sense, except for isYearless and isDayOnly DateRanges. From:" + from + " To:" + to);
+            } else
+            {
+                reverse = true;
+            }
+        }
+
+        this.from = from.getMin();
+        this.to = to.getMax();
+    }
+
+    public boolean isInRange( Calendar date )
+    {
+        if (!yearless && !dayOnly)
+            return date.after(from) && date.before(to);
+
+        if (dayOnly)
+        {
+            if (reverse)
+            {
+                return (from.get(Calendar.DAY_OF_WEEK) <= date.get(Calendar.DAY_OF_WEEK) || date.get(Calendar.DAY_OF_WEEK) <= to.get(Calendar.DAY_OF_WEEK));
+            } else
+            {
+                return (from.get(Calendar.DAY_OF_WEEK) <= date.get(Calendar.DAY_OF_WEEK) && date.get(Calendar.DAY_OF_WEEK) <= to.get(Calendar.DAY_OF_WEEK));
+            }
+        }
+
+        if (reverse)
+            return isInRangeYearlessReverse(date);
+        else
+            return isInRangeYearless(date);
+    }
+
+    private boolean isInRangeYearless( Calendar date )
+    {
+        if (from.get(Calendar.MONTH) < date.get(Calendar.MONTH) && date.get(Calendar.MONTH) < to.get(Calendar.MONTH))
+            return true;
+        if (from.get(Calendar.MONTH) == date.get(Calendar.MONTH) && to.get(Calendar.MONTH) == date.get(Calendar.MONTH))
+        {
+            if (from.get(Calendar.DAY_OF_MONTH) <= date.get(Calendar.DAY_OF_MONTH) && date.get(Calendar.DAY_OF_MONTH) <= to.get(Calendar.DAY_OF_MONTH))
+                return true;
+            else
+                return false;
+        }
+        if (from.get(Calendar.MONTH) == date.get(Calendar.MONTH))
+        {
+            if (from.get(Calendar.DAY_OF_MONTH) <= date.get(Calendar.DAY_OF_MONTH))
+                return true;
+            else
+                return false;
+        }
+        if (to.get(Calendar.MONTH) == date.get(Calendar.MONTH))
+        {
+            if (date.get(Calendar.DAY_OF_MONTH) <= to.get(Calendar.DAY_OF_MONTH))
+                return true;
+            else
+                return false;
+        }
+        return false;
+    }
+
+    private boolean isInRangeYearlessReverse( Calendar date )
+    {
+        int currMonth = date.get(Calendar.MONTH);
+        if (from.get(Calendar.MONTH) < currMonth || currMonth < to.get(Calendar.MONTH))
+            return true;
+        if (from.get(Calendar.MONTH) == currMonth && to.get(Calendar.MONTH) == currMonth)
+        {
+            if (from.get(Calendar.DAY_OF_MONTH) < date.get(Calendar.DAY_OF_MONTH)
+                    || date.get(Calendar.DAY_OF_MONTH) < to.get(Calendar.DAY_OF_MONTH))
+                return true;
+            else
+                return false;
+        }
+        if (from.get(Calendar.MONTH) == currMonth)
+        {
+            if (from.get(Calendar.DAY_OF_MONTH) <= date.get(Calendar.DAY_OF_MONTH))
+                return true;
+            else
+                return false;
+        }
+        if (to.get(Calendar.MONTH) == currMonth)
+        {
+            if (date.get(Calendar.DAY_OF_MONTH) <= to.get(Calendar.DAY_OF_MONTH))
+                return true;
+            else
+                return false;
+        }
+        return false;
+    }
+
+    @Override
+    public String toString()
+    {
+        SimpleDateFormat f = new SimpleDateFormat();
+        return "yearless:" + yearless + ", dayOnly:" + dayOnly + ", reverse:" + reverse
+                + ", from:" + f.format(from.getTime()) + ", to:" + f.format(to.getTime());
+    }
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osm/conditional/DateRangeParser.java b/core/src/main/java/com/graphhopper/reader/osm/conditional/DateRangeParser.java
new file mode 100644
index 0000000000..d05e9a0cc2
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osm/conditional/DateRangeParser.java
@@ -0,0 +1,117 @@
+/*
+ *  Licensed to GraphHopper and Peter Karich under one or more contributor
+ *  license agreements. See the NOTICE file distributed with this work for
+ *  additional information regarding copyright ownership.
+ *
+ *  GraphHopper licenses this file to you under the Apache License,
+ *  Version 2.0 (the "License"); you may not use this file except in
+ *  compliance with the License. You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package com.graphhopper.reader.osm.conditional;
+
+import java.text.ParseException;
+import java.text.SimpleDateFormat;
+import java.util.Arrays;
+import java.util.Calendar;
+import java.util.List;
+
+/**
+ * Parses a DateRange. Currently only DateRanges that last at least one day are supported. The
+ * Syntax is allowed inputs is described here: http://wiki.openstreetmap.org/wiki/Key:opening_hours.
+ * <p>
+ * @author Robin Boldt
+ */
+public class DateRangeParser
+{
+    static SimpleDateFormat yearMonthDayFormat = new SimpleDateFormat("yyyy MMM dd");
+    static SimpleDateFormat monthDayFormat = new SimpleDateFormat("MMM dd");
+    static SimpleDateFormat monthDay2Format = new SimpleDateFormat("dd.MM");
+    static SimpleDateFormat yearMonthFormat = new SimpleDateFormat("yyyy MMM");
+    static SimpleDateFormat monthFormat = new SimpleDateFormat("MMM");
+    static SimpleDateFormat dayFormat = new SimpleDateFormat("E");
+    static List<String> dayNames = Arrays.asList(new String[]
+    {
+        "Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"
+    });
+
+    public static ParsedCalendar parseDateString( String dateString ) throws ParseException
+    {
+        // Replace occurences of public holidays
+        dateString = dateString.replaceAll("(,( )*)?(PH|SH)", "");
+        dateString = dateString.trim();
+        Calendar calendar = Calendar.getInstance();
+        ParsedCalendar parsedCalendar;
+        try
+        {
+            calendar.setTime(yearMonthDayFormat.parse(dateString));
+            parsedCalendar = new ParsedCalendar(ParsedCalendar.ParseType.YEAR_MONTH_DAY, calendar);
+        } catch (ParseException e1)
+        {
+            try
+            {
+                calendar.setTime(monthDayFormat.parse(dateString));
+                parsedCalendar = new ParsedCalendar(ParsedCalendar.ParseType.MONTH_DAY, calendar);
+            } catch (ParseException e2)
+            {
+                try
+                {
+                    calendar.setTime(monthDay2Format.parse(dateString));
+                    parsedCalendar = new ParsedCalendar(ParsedCalendar.ParseType.MONTH_DAY, calendar);
+                } catch (ParseException e3)
+                {
+                    try
+                    {
+                        calendar.setTime(yearMonthFormat.parse(dateString));
+                        parsedCalendar = new ParsedCalendar(ParsedCalendar.ParseType.YEAR_MONTH, calendar);
+                    } catch (ParseException e4)
+                    {
+                        try
+                        {
+                            calendar.setTime(monthFormat.parse(dateString));
+                            parsedCalendar = new ParsedCalendar(ParsedCalendar.ParseType.MONTH, calendar);
+                        } catch (ParseException e5)
+                        {
+                            int index = dayNames.indexOf(dateString);
+                            if (index < 0)
+                                throw new ParseException("Unparseable date: \"" + dateString + "\"", 0);
+
+                            // Ranges from 1-7
+                            calendar.set(Calendar.DAY_OF_WEEK, index + 1);
+                            parsedCalendar = new ParsedCalendar(ParsedCalendar.ParseType.DAY, calendar);
+                        }
+
+                    }
+                }
+            }
+        }
+        return parsedCalendar;
+    }
+
+    public static DateRange parseDateRange( String dateRangeString ) throws ParseException
+    {
+        if (dateRangeString == null || dateRangeString.isEmpty())
+            throw new IllegalArgumentException("Passing empty Strings is not allowed");
+
+        String[] dateArr = dateRangeString.split("-");
+        if (dateArr.length > 2 || dateArr.length < 1)
+            throw new IllegalArgumentException("Only Strings containing two Date separated by a '-' or a single Date are allowed");
+
+        ParsedCalendar from = parseDateString(dateArr[0]);
+        ParsedCalendar to;
+        if (dateArr.length == 2)
+            to = parseDateString(dateArr[1]);
+        else
+            to = parseDateString(dateArr[0]);
+
+        return new DateRange(from, to);
+    }
+
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osm/conditional/ParsedCalendar.java b/core/src/main/java/com/graphhopper/reader/osm/conditional/ParsedCalendar.java
new file mode 100644
index 0000000000..ea17398ffb
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osm/conditional/ParsedCalendar.java
@@ -0,0 +1,97 @@
+/*
+ *  Licensed to GraphHopper and Peter Karich under one or more contributor
+ *  license agreements. See the NOTICE file distributed with this work for
+ *  additional information regarding copyright ownership.
+ *
+ *  GraphHopper licenses this file to you under the Apache License,
+ *  Version 2.0 (the "License"); you may not use this file except in
+ *  compliance with the License. You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package com.graphhopper.reader.osm.conditional;
+
+import java.text.SimpleDateFormat;
+import java.util.Calendar;
+
+/**
+ * This class represents a parsed Date and the parse type.
+ * <p>
+ * @author Robin Boldt
+ */
+public class ParsedCalendar
+{
+    public final ParseType parseType;
+    public final Calendar parsedCalendar;
+
+    public ParsedCalendar( ParseType parseType, Calendar parsedCalendar )
+    {
+        this.parseType = parseType;
+        this.parsedCalendar = parsedCalendar;
+    }
+
+    public boolean isYearless()
+    {
+        return parseType == ParseType.MONTH || parseType == ParseType.MONTH_DAY;
+    }
+
+    public boolean isDayless()
+    {
+        return parseType == ParseType.MONTH || parseType == ParseType.YEAR_MONTH;
+    }
+
+    public boolean isDayOnly()
+    {
+        return parseType == ParseType.DAY;
+    }
+
+    public Calendar getMax()
+    {
+        if (isDayless())
+        {
+            parsedCalendar.set(Calendar.DAY_OF_MONTH, parsedCalendar.getActualMaximum(Calendar.DAY_OF_MONTH));
+        }
+        parsedCalendar.set(Calendar.HOUR_OF_DAY, parsedCalendar.getActualMaximum(Calendar.HOUR_OF_DAY));
+        parsedCalendar.set(Calendar.MINUTE, parsedCalendar.getActualMaximum(Calendar.MINUTE));
+        parsedCalendar.set(Calendar.SECOND, parsedCalendar.getActualMaximum(Calendar.SECOND));
+        parsedCalendar.set(Calendar.MILLISECOND, parsedCalendar.getActualMaximum(Calendar.MILLISECOND));
+
+        return parsedCalendar;
+    }
+
+    public Calendar getMin()
+    {
+        if (isDayless())
+        {
+            parsedCalendar.set(Calendar.DAY_OF_MONTH, parsedCalendar.getActualMinimum(Calendar.DAY_OF_MONTH));
+        }
+        parsedCalendar.set(Calendar.HOUR_OF_DAY, parsedCalendar.getActualMinimum(Calendar.HOUR_OF_DAY));
+        parsedCalendar.set(Calendar.MINUTE, parsedCalendar.getActualMinimum(Calendar.MINUTE));
+        parsedCalendar.set(Calendar.SECOND, parsedCalendar.getActualMinimum(Calendar.SECOND));
+        parsedCalendar.set(Calendar.MILLISECOND, parsedCalendar.getActualMinimum(Calendar.MILLISECOND));
+
+        return parsedCalendar;
+    }
+
+    @Override
+    public String toString()
+    {
+        return parseType + "; " + new SimpleDateFormat().format(parsedCalendar.getTime());
+    }
+
+    public enum ParseType
+    {
+        YEAR_MONTH_DAY,
+        YEAR_MONTH,
+        MONTH_DAY,
+        MONTH,
+        DAY
+    }
+
+}
diff --git a/core/src/main/java/com/graphhopper/routing/AStar.java b/core/src/main/java/com/graphhopper/routing/AStar.java
index 82b9691b26..b6022e300b 100644
--- a/core/src/main/java/com/graphhopper/routing/AStar.java
+++ b/core/src/main/java/com/graphhopper/routing/AStar.java
@@ -28,7 +28,7 @@
 import com.graphhopper.routing.util.Weighting;
 import com.graphhopper.routing.util.WeightApproximator;
 import com.graphhopper.routing.util.BeelineWeightApproximator;
-import com.graphhopper.storage.EdgeEntry;
+import com.graphhopper.storage.SPTEntry;
 import com.graphhopper.storage.Graph;
 import com.graphhopper.util.EdgeExplorer;
 import com.graphhopper.util.EdgeIterator;
@@ -162,7 +162,7 @@ protected Path extractPath()
     }
 
     @Override
-    protected EdgeEntry createEdgeEntry( int node, double weight )
+    protected SPTEntry createEdgeEntry( int node, double weight )
     {
         throw new IllegalStateException("use AStarEdge constructor directly");
     }
@@ -185,7 +185,7 @@ protected boolean isWeightLimitExceeded()
         return currEdge.weight > weightLimit;
     }
 
-    public static class AStarEdge extends EdgeEntry
+    public static class AStarEdge extends SPTEntry
     {
         // the variable 'weight' is used to let heap select smallest *full* distance.
         // but to compare distance we need it only from start:
diff --git a/core/src/main/java/com/graphhopper/routing/AStarBidirection.java b/core/src/main/java/com/graphhopper/routing/AStarBidirection.java
index e7e37f453e..28868d8a6c 100644
--- a/core/src/main/java/com/graphhopper/routing/AStarBidirection.java
+++ b/core/src/main/java/com/graphhopper/routing/AStarBidirection.java
@@ -24,7 +24,7 @@
 import java.util.PriorityQueue;
 
 import com.graphhopper.routing.AStar.AStarEdge;
-import com.graphhopper.storage.EdgeEntry;
+import com.graphhopper.storage.SPTEntry;
 import com.graphhopper.storage.Graph;
 import com.graphhopper.util.*;
 
@@ -94,7 +94,7 @@ public AStarBidirection setApproximation( WeightApproximator approx )
     }
 
     @Override
-    protected EdgeEntry createEdgeEntry( int node, double weight )
+    protected SPTEntry createEdgeEntry( int node, double weight )
     {
         throw new IllegalStateException("use AStarEdge constructor directly");
     }
diff --git a/core/src/main/java/com/graphhopper/routing/AbstractRoutingAlgorithm.java b/core/src/main/java/com/graphhopper/routing/AbstractRoutingAlgorithm.java
index 1c6408574b..b06af723f0 100644
--- a/core/src/main/java/com/graphhopper/routing/AbstractRoutingAlgorithm.java
+++ b/core/src/main/java/com/graphhopper/routing/AbstractRoutingAlgorithm.java
@@ -18,7 +18,7 @@
 package com.graphhopper.routing;
 
 import com.graphhopper.routing.util.*;
-import com.graphhopper.storage.EdgeEntry;
+import com.graphhopper.storage.SPTEntry;
 import com.graphhopper.storage.Graph;
 import com.graphhopper.storage.NodeAccess;
 import com.graphhopper.util.EdgeExplorer;
@@ -80,7 +80,7 @@ protected boolean accept( EdgeIterator iter, int prevOrNextEdgeId )
         return additionalEdgeFilter == null || additionalEdgeFilter.accept(iter);
     }
 
-    protected void updateBestPath( EdgeIteratorState edgeState, EdgeEntry bestEdgeEntry, int traversalId )
+    protected void updateBestPath( EdgeIteratorState edgeState, SPTEntry bestEdgeEntry, int traversalId )
     {
     }
 
@@ -92,9 +92,9 @@ protected void checkAlreadyRun()
         alreadyRun = true;
     }
 
-    protected EdgeEntry createEdgeEntry( int node, double weight )
+    protected SPTEntry createEdgeEntry( int node, double weight )
     {
-        return new EdgeEntry(EdgeIterator.NO_EDGE, node, weight);
+        return new SPTEntry(EdgeIterator.NO_EDGE, node, weight);
     }
 
     /**
diff --git a/core/src/main/java/com/graphhopper/routing/AlternativeRoute.java b/core/src/main/java/com/graphhopper/routing/AlternativeRoute.java
index 9bc3862d3b..d580edf772 100644
--- a/core/src/main/java/com/graphhopper/routing/AlternativeRoute.java
+++ b/core/src/main/java/com/graphhopper/routing/AlternativeRoute.java
@@ -22,7 +22,7 @@
 import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.routing.util.TraversalMode;
 import com.graphhopper.routing.util.Weighting;
-import com.graphhopper.storage.EdgeEntry;
+import com.graphhopper.storage.SPTEntry;
 import com.graphhopper.storage.Graph;
 import com.graphhopper.util.EdgeIterator;
 import com.graphhopper.util.EdgeIteratorState;
@@ -201,12 +201,12 @@ public int getVisitedNodes()
     {
         private final double sortBy;
         private final Path path;
-        private final EdgeEntry shareStart;
-        private final EdgeEntry shareEnd;
+        private final SPTEntry shareStart;
+        private final SPTEntry shareEnd;
         private final double shareWeight;
         private final List<String> names;
 
-        public AlternativeInfo( double sortBy, Path path, EdgeEntry shareStart, EdgeEntry shareEnd,
+        public AlternativeInfo( double sortBy, Path path, SPTEntry shareStart, SPTEntry shareEnd,
                                 double shareWeight, List<String> altNames )
         {
             this.names = altNames;
@@ -223,12 +223,12 @@ public Path getPath()
             return path;
         }
 
-        public EdgeEntry getShareStart()
+        public SPTEntry getShareStart()
         {
             return shareStart;
         }
 
-        public EdgeEntry getShareEnd()
+        public SPTEntry getShareEnd()
         {
             return shareEnd;
         }
@@ -322,14 +322,14 @@ public Path searchBest( int to, int from )
             final AlternativeInfo bestAlt = new AlternativeInfo(sortBy, bestPath,
                     bestPath.edgeEntry, bestPath.edgeTo, bestShare, getAltNames(graph, bestPath.edgeEntry));
             alternatives.add(bestAlt);
-            final List<EdgeEntry> bestPathEntries = new ArrayList<EdgeEntry>(2);
+            final List<SPTEntry> bestPathEntries = new ArrayList<SPTEntry>(2);
 
-            bestWeightMapFrom.forEachEntry(new TIntObjectProcedure<EdgeEntry>()
+            bestWeightMapFrom.forEachEntry(new TIntObjectProcedure<SPTEntry>()
             {
                 @Override
-                public boolean execute( final int traversalId, final EdgeEntry fromEdgeEntry )
+                public boolean execute( final int traversalId, final SPTEntry fromEdgeEntry )
                 {
-                    EdgeEntry toEdgeEntry = bestWeightMapTo.get(traversalId);
+                    SPTEntry toEdgeEntry = bestWeightMapTo.get(traversalId);
                     if (toEdgeEntry == null)
                         return true;
 
@@ -362,7 +362,7 @@ public boolean execute( final int traversalId, final EdgeEntry fromEdgeEntry )
                         return true;
 
                     // For edge based traversal we need the next entry to find out the plateau start
-                    EdgeEntry tmpFromEntry = traversalMode.isEdgeBased() ? fromEdgeEntry.parent : fromEdgeEntry;
+                    SPTEntry tmpFromEntry = traversalMode.isEdgeBased() ? fromEdgeEntry.parent : fromEdgeEntry;
                     if (tmpFromEntry == null || tmpFromEntry.parent == null)
                     {
                         // we can be here only if edge based and only if entry is not part of the best path 
@@ -372,7 +372,7 @@ public boolean execute( final int traversalId, final EdgeEntry fromEdgeEntry )
                     {
                         int nextToTraversalId = traversalMode.createTraversalId(tmpFromEntry.adjNode,
                                 tmpFromEntry.parent.adjNode, tmpFromEntry.edge, true);
-                        EdgeEntry tmpNextToEdgeEntry = bestWeightMapTo.get(nextToTraversalId);
+                        SPTEntry tmpNextToEdgeEntry = bestWeightMapTo.get(nextToTraversalId);
                         if (tmpNextToEdgeEntry == null)
                             return true;
 
@@ -395,14 +395,14 @@ public boolean execute( final int traversalId, final EdgeEntry fromEdgeEntry )
                     // that the from-EdgeEntry is the start of the plateau or there is no plateau at all
                     //
                     double plateauWeight = 0;
-                    EdgeEntry prevToEdgeEntry = toEdgeEntry;
+                    SPTEntry prevToEdgeEntry = toEdgeEntry;
                     // List<Integer> plateauEdges = new ArrayList<Integer>();
                     while (prevToEdgeEntry.parent != null)
                     {
                         int nextFromTraversalId = traversalMode.createTraversalId(prevToEdgeEntry.adjNode, prevToEdgeEntry.parent.adjNode,
                                 prevToEdgeEntry.edge, false);
 
-                        EdgeEntry nextFromEdgeEntry = bestWeightMapFrom.get(nextFromTraversalId);
+                        SPTEntry nextFromEdgeEntry = bestWeightMapFrom.get(nextFromTraversalId);
                         // end of a plateau
                         if (nextFromEdgeEntry == null)
                             break;
@@ -423,8 +423,8 @@ public boolean execute( final int traversalId, final EdgeEntry fromEdgeEntry )
                         throw new IllegalStateException("not implemented yet. in case of an edge based traversal the parent of fromEdgeEntry could be null");
 
                     // (3b) calculate share                    
-                    EdgeEntry fromEE = getFirstShareEE(fromEdgeEntry.parent, true);
-                    EdgeEntry toEE = getFirstShareEE(toEdgeEntry.parent, false);
+                    SPTEntry fromEE = getFirstShareEE(fromEdgeEntry.parent, true);
+                    SPTEntry toEE = getFirstShareEE(toEdgeEntry.parent, false);
                     double shareWeight = fromEE.weight + toEE.weight;
                     boolean smallShare = shareWeight / bestPath.getWeight() < maxShareFactor;
                     if (smallShare)
@@ -461,7 +461,7 @@ public boolean execute( final int traversalId, final EdgeEntry fromEdgeEntry )
                 /**
                  * Extract path until we stumble over an existing traversal id
                  */
-                EdgeEntry getFirstShareEE( EdgeEntry startEE, boolean reverse )
+                SPTEntry getFirstShareEE( SPTEntry startEE, boolean reverse )
                 {
                     while (startEE.parent != null)
                     {
@@ -503,7 +503,7 @@ public boolean execute( TIntSet set )
                 }
 
                 // returns true if fromEdgeEntry is identical to the specified best path
-                boolean isBestPath( EdgeEntry fromEdgeEntry, Path bestPath )
+                boolean isBestPath( SPTEntry fromEdgeEntry, Path bestPath )
                 {
                     if (traversalMode.isEdgeBased())
                     {
@@ -566,7 +566,7 @@ AtomicInteger addToMap( TIntObjectHashMap<TIntSet> map, Path path )
         }
     }
 
-    static List<String> getAltNames( Graph graph, EdgeEntry ee )
+    static List<String> getAltNames( Graph graph, SPTEntry ee )
     {
         if (ee == null)
             return Collections.emptyList();
diff --git a/core/src/main/java/com/graphhopper/routing/Dijkstra.java b/core/src/main/java/com/graphhopper/routing/Dijkstra.java
index ad902b90b8..f32a7ca165 100644
--- a/core/src/main/java/com/graphhopper/routing/Dijkstra.java
+++ b/core/src/main/java/com/graphhopper/routing/Dijkstra.java
@@ -25,7 +25,7 @@
 import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.routing.util.TraversalMode;
 import com.graphhopper.routing.util.Weighting;
-import com.graphhopper.storage.EdgeEntry;
+import com.graphhopper.storage.SPTEntry;
 import com.graphhopper.storage.Graph;
 import com.graphhopper.util.EdgeExplorer;
 import com.graphhopper.util.EdgeIterator;
@@ -38,9 +38,9 @@
  */
 public class Dijkstra extends AbstractRoutingAlgorithm
 {
-    protected TIntObjectMap<EdgeEntry> fromMap;
-    protected PriorityQueue<EdgeEntry> fromHeap;
-    protected EdgeEntry currEdge;
+    protected TIntObjectMap<SPTEntry> fromMap;
+    protected PriorityQueue<SPTEntry> fromHeap;
+    protected SPTEntry currEdge;
     private int visitedNodes;
     private int to = -1;
 
@@ -52,8 +52,8 @@ public Dijkstra( Graph g, FlagEncoder encoder, Weighting weighting, TraversalMod
 
     protected void initCollections( int size )
     {
-        fromHeap = new PriorityQueue<EdgeEntry>(size);
-        fromMap = new TIntObjectHashMap<EdgeEntry>(size);
+        fromHeap = new PriorityQueue<SPTEntry>(size);
+        fromMap = new TIntObjectHashMap<SPTEntry>(size);
     }
 
     @Override
@@ -91,10 +91,10 @@ protected void runAlgo()
                 if (Double.isInfinite(tmpWeight))
                     continue;
 
-                EdgeEntry nEdge = fromMap.get(traversalId);
+                SPTEntry nEdge = fromMap.get(traversalId);
                 if (nEdge == null)
                 {
-                    nEdge = new EdgeEntry(iter.getEdge(), iter.getAdjNode(), tmpWeight);
+                    nEdge = new SPTEntry(iter.getEdge(), iter.getAdjNode(), tmpWeight);
                     nEdge.parent = currEdge;
                     fromMap.put(traversalId, nEdge);
                     fromHeap.add(nEdge);
diff --git a/core/src/main/java/com/graphhopper/routing/DijkstraBidirectionRef.java b/core/src/main/java/com/graphhopper/routing/DijkstraBidirectionRef.java
index f78f64fe2d..e8f5f6d731 100644
--- a/core/src/main/java/com/graphhopper/routing/DijkstraBidirectionRef.java
+++ b/core/src/main/java/com/graphhopper/routing/DijkstraBidirectionRef.java
@@ -25,7 +25,7 @@
 import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.routing.util.TraversalMode;
 import com.graphhopper.routing.util.Weighting;
-import com.graphhopper.storage.EdgeEntry;
+import com.graphhopper.storage.SPTEntry;
 import com.graphhopper.storage.Graph;
 import com.graphhopper.util.EdgeExplorer;
 import com.graphhopper.util.EdgeIterator;
@@ -41,13 +41,13 @@
  */
 public class DijkstraBidirectionRef extends AbstractBidirAlgo
 {
-    private PriorityQueue<EdgeEntry> openSetFrom;
-    private PriorityQueue<EdgeEntry> openSetTo;
-    protected TIntObjectMap<EdgeEntry> bestWeightMapFrom;
-    protected TIntObjectMap<EdgeEntry> bestWeightMapTo;
-    protected TIntObjectMap<EdgeEntry> bestWeightMapOther;
-    protected EdgeEntry currFrom;
-    protected EdgeEntry currTo;
+    private PriorityQueue<SPTEntry> openSetFrom;
+    private PriorityQueue<SPTEntry> openSetTo;
+    protected TIntObjectMap<SPTEntry> bestWeightMapFrom;
+    protected TIntObjectMap<SPTEntry> bestWeightMapTo;
+    protected TIntObjectMap<SPTEntry> bestWeightMapOther;
+    protected SPTEntry currFrom;
+    protected SPTEntry currTo;
     protected PathBidirRef bestPath;
     private boolean updateBestPath = true;
 
@@ -59,11 +59,11 @@ public DijkstraBidirectionRef( Graph graph, FlagEncoder encoder, Weighting weigh
 
     protected void initCollections( int nodes )
     {
-        openSetFrom = new PriorityQueue<EdgeEntry>(nodes / 10);
-        bestWeightMapFrom = new TIntObjectHashMap<EdgeEntry>(nodes / 10);
+        openSetFrom = new PriorityQueue<SPTEntry>(nodes / 10);
+        bestWeightMapFrom = new TIntObjectHashMap<SPTEntry>(nodes / 10);
 
-        openSetTo = new PriorityQueue<EdgeEntry>(nodes / 10);
-        bestWeightMapTo = new TIntObjectHashMap<EdgeEntry>(nodes / 10);
+        openSetTo = new PriorityQueue<SPTEntry>(nodes / 10);
+        bestWeightMapTo = new TIntObjectHashMap<SPTEntry>(nodes / 10);
     }
 
     @Override
@@ -190,8 +190,8 @@ protected boolean isWeightLimitExceeded()
         return currFrom.weight + currTo.weight > weightLimit;
     }
 
-    void fillEdges( EdgeEntry currEdge, PriorityQueue<EdgeEntry> prioQueue,
-                    TIntObjectMap<EdgeEntry> shortestWeightMap, EdgeExplorer explorer, boolean reverse )
+    void fillEdges( SPTEntry currEdge, PriorityQueue<SPTEntry> prioQueue,
+                    TIntObjectMap<SPTEntry> shortestWeightMap, EdgeExplorer explorer, boolean reverse )
     {        
         EdgeIterator iter = explorer.setBaseNode(currEdge.adjNode);
         while (iter.next())
@@ -204,10 +204,10 @@ void fillEdges( EdgeEntry currEdge, PriorityQueue<EdgeEntry> prioQueue,
             if (Double.isInfinite(tmpWeight))
                 continue;
 
-            EdgeEntry ee = shortestWeightMap.get(traversalId);
+            SPTEntry ee = shortestWeightMap.get(traversalId);
             if (ee == null)
             {
-                ee = new EdgeEntry(iter.getEdge(), iter.getAdjNode(), tmpWeight);
+                ee = new SPTEntry(iter.getEdge(), iter.getAdjNode(), tmpWeight);
                 ee.parent = currEdge;
                 shortestWeightMap.put(traversalId, ee);
                 prioQueue.add(ee);
@@ -227,9 +227,9 @@ void fillEdges( EdgeEntry currEdge, PriorityQueue<EdgeEntry> prioQueue,
     }
 
     @Override
-    protected void updateBestPath( EdgeIteratorState edgeState, EdgeEntry entryCurrent, int traversalId )
+    protected void updateBestPath( EdgeIteratorState edgeState, SPTEntry entryCurrent, int traversalId )
     {
-        EdgeEntry entryOther = bestWeightMapOther.get(traversalId);
+        SPTEntry entryOther = bestWeightMapOther.get(traversalId);
         if (entryOther == null)
             return;
 
@@ -264,17 +264,17 @@ protected void updateBestPath( EdgeIteratorState edgeState, EdgeEntry entryCurre
         }
     }
 
-    TIntObjectMap<EdgeEntry> getBestFromMap()
+    TIntObjectMap<SPTEntry> getBestFromMap()
     {
         return bestWeightMapFrom;
     }
 
-    TIntObjectMap<EdgeEntry> getBestToMap()
+    TIntObjectMap<SPTEntry> getBestToMap()
     {
         return bestWeightMapTo;
     }
 
-    void setBestOtherMap( TIntObjectMap<EdgeEntry> other )
+    void setBestOtherMap( TIntObjectMap<SPTEntry> other )
     {
         bestWeightMapOther = other;
     }
diff --git a/core/src/main/java/com/graphhopper/routing/Path.java b/core/src/main/java/com/graphhopper/routing/Path.java
index 419623e015..7828a5f9d3 100644
--- a/core/src/main/java/com/graphhopper/routing/Path.java
+++ b/core/src/main/java/com/graphhopper/routing/Path.java
@@ -19,7 +19,7 @@
 
 import com.graphhopper.routing.util.DefaultEdgeFilter;
 import com.graphhopper.routing.util.FlagEncoder;
-import com.graphhopper.storage.EdgeEntry;
+import com.graphhopper.storage.SPTEntry;
 import com.graphhopper.storage.Graph;
 import com.graphhopper.storage.NodeAccess;
 import com.graphhopper.util.*;
@@ -50,7 +50,7 @@
     protected boolean reverseOrder = true;
     protected long time;
     private boolean found;
-    protected EdgeEntry edgeEntry;
+    protected SPTEntry edgeEntry;
     final StopWatch extractSW = new StopWatch("extract");
     private int fromNode = -1;
     protected int endNode = -1;
@@ -95,7 +95,7 @@ public Path setDescription( List<String> description )
         return this;
     }
 
-    public Path setEdgeEntry( EdgeEntry edgeEntry )
+    public Path setEdgeEntry( SPTEntry edgeEntry )
     {
         this.edgeEntry = edgeEntry;
         return this;
@@ -160,15 +160,6 @@ public double getDistance()
         return distance;
     }
 
-    /**
-     * @return time in millis
-     * @deprecated use getTime instead
-     */
-    public long getMillis()
-    {
-        return time;
-    }
-
     /**
      * @return time in millis
      */
@@ -200,7 +191,7 @@ public Path extract()
             throw new IllegalStateException("Extract can only be called once");
 
         extractSW.start();
-        EdgeEntry goalEdge = edgeEntry;
+        SPTEntry goalEdge = edgeEntry;
         setEndNode(goalEdge.adjNode);
         while (EdgeIterator.Edge.isValid(goalEdge.edge))
         {
diff --git a/core/src/main/java/com/graphhopper/routing/PathBidirRef.java b/core/src/main/java/com/graphhopper/routing/PathBidirRef.java
index efa934e5f2..1886c6b07d 100644
--- a/core/src/main/java/com/graphhopper/routing/PathBidirRef.java
+++ b/core/src/main/java/com/graphhopper/routing/PathBidirRef.java
@@ -18,7 +18,7 @@
 package com.graphhopper.routing;
 
 import com.graphhopper.routing.util.FlagEncoder;
-import com.graphhopper.storage.EdgeEntry;
+import com.graphhopper.storage.SPTEntry;
 import com.graphhopper.storage.Graph;
 import com.graphhopper.util.EdgeIterator;
 
@@ -29,7 +29,7 @@
  */
 public class PathBidirRef extends Path
 {
-    protected EdgeEntry edgeTo;
+    protected SPTEntry edgeTo;
     private boolean switchWrapper = false;
 
     public PathBidirRef( Graph g, FlagEncoder encoder )
@@ -50,7 +50,7 @@ public PathBidirRef setSwitchToFrom( boolean b )
         return this;
     }
 
-    public PathBidirRef setEdgeEntryTo( EdgeEntry edgeTo )
+    public PathBidirRef setEdgeEntryTo( SPTEntry edgeTo )
     {
         this.edgeTo = edgeTo;
         return this;
@@ -71,12 +71,12 @@ public Path extract()
         extractSW.start();
         if (switchWrapper)
         {
-            EdgeEntry ee = edgeEntry;
+            SPTEntry ee = edgeEntry;
             edgeEntry = edgeTo;
             edgeTo = ee;
         }
 
-        EdgeEntry currEdge = edgeEntry;
+        SPTEntry currEdge = edgeEntry;
         while (EdgeIterator.Edge.isValid(currEdge.edge))
         {
             processEdge(currEdge.edge, currEdge.adjNode);
diff --git a/core/src/main/java/com/graphhopper/routing/RoundTripAltAlgorithm.java b/core/src/main/java/com/graphhopper/routing/RoundTripAltAlgorithm.java
index 43a96db8b6..031d54654f 100644
--- a/core/src/main/java/com/graphhopper/routing/RoundTripAltAlgorithm.java
+++ b/core/src/main/java/com/graphhopper/routing/RoundTripAltAlgorithm.java
@@ -21,7 +21,7 @@
 import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.routing.util.TraversalMode;
 import com.graphhopper.routing.util.Weighting;
-import com.graphhopper.storage.EdgeEntry;
+import com.graphhopper.storage.SPTEntry;
 import com.graphhopper.storage.Graph;
 import com.graphhopper.storage.NodeAccess;
 import com.graphhopper.util.DistanceCalc;
@@ -76,7 +76,7 @@ public void setMaxWeightFactor( double maxWeightFactor )
         AltSingleDijkstra altDijkstra = new AltSingleDijkstra(graph, flagEncoder, weighting, traversalMode);
         altDijkstra.setWeightLimit(weightLimit);
         altDijkstra.beforeRun(from);
-        EdgeEntry currFrom = altDijkstra.searchBest(from, maxFullDistance);
+        SPTEntry currFrom = altDijkstra.searchBest(from, maxFullDistance);
         visitedNodes = altDijkstra.getVisitedNodes();
         if (currFrom == null)
             return Collections.emptyList();
@@ -160,14 +160,14 @@ public double calcWeight( EdgeIteratorState edge, boolean reverse, int prevOrNex
                 throw new RuntimeException("no second best found. " + infos);
 
             // correction: remove end standing path
-            EdgeEntry newTo = secondBest.getShareStart();
+            SPTEntry newTo = secondBest.getShareStart();
             if (newTo.parent != null)
             {
                 // in case edge was found in forwardEdgeSet we calculate the first sharing end
                 int tKey = traversalMode.createTraversalId(newTo.adjNode, newTo.parent.adjNode, newTo.edge, false);
 
                 // do new extract
-                EdgeEntry tmpFromEdgeEntry = altDijkstra.getFromEntry(tKey);
+                SPTEntry tmpFromEdgeEntry = altDijkstra.getFromEntry(tKey);
 
                 // if (tmpFromEdgeEntry.parent != null) tmpFromEdgeEntry = tmpFromEdgeEntry.parent;
                 bestForwardPath = new Path(graph, flagEncoder).setEdgeEntry(tmpFromEdgeEntry).setWeight(tmpFromEdgeEntry.weight).extract();
@@ -237,12 +237,12 @@ void beforeRun( int from )
             initFrom(from, 0);
         }
 
-        public EdgeEntry getFromEntry( int key )
+        public SPTEntry getFromEntry( int key )
         {
             return bestWeightMapFrom.get(key);
         }
 
-        EdgeEntry searchBest( int from, double maxFullDistance )
+        SPTEntry searchBest( int from, double maxFullDistance )
         {
             NodeAccess na = graph.getNodeAccess();
             DistanceCalc distanceCalc = Helper.DIST_PLANE;
@@ -252,7 +252,7 @@ EdgeEntry searchBest( int from, double maxFullDistance )
             double lat1 = na.getLatitude(from), lon1 = na.getLongitude(from);
             double lastNormedDistance = -1;
             boolean tmpFinishedFrom = false;
-            EdgeEntry tmp = null;
+            SPTEntry tmp = null;
 
             while (!tmpFinishedFrom)
             {
diff --git a/core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java
index 8cec00c00d..0f8beed002 100644
--- a/core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java
@@ -17,6 +17,7 @@
  */
 package com.graphhopper.routing.util;
 
+import com.graphhopper.reader.osm.ConditionalTagsInspector;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -83,6 +84,8 @@
     protected final double speedFactor;
     private boolean registered;
 
+    protected ConditionalTagsInspector conditionalTagsInspector;
+
     public AbstractFlagEncoder( PMap properties )
     {
         throw new RuntimeException("This method must be overridden in derived classes");
@@ -744,52 +747,6 @@ public double getDouble( long flags, int key )
         throw new UnsupportedOperationException("Unknown key " + key + " for double value.");
     }
 
-    @Deprecated
-    protected static double parseDouble( String str, String key, double defaultD )
-    {
-        String val = getStr(str, key);
-        if (val.isEmpty())
-            return defaultD;
-        return Double.parseDouble(val);
-    }
-
-    @Deprecated
-    protected static long parseLong( String str, String key, long defaultL )
-    {
-        String val = getStr(str, key);
-        if (val.isEmpty())
-            return defaultL;
-        return Long.parseLong(val);
-    }
-
-    @Deprecated
-    protected static boolean parseBoolean( String str, String key, boolean defaultB )
-    {
-        String val = getStr(str, key);
-        if (val.isEmpty())
-            return defaultB;
-        return Boolean.parseBoolean(val);
-    }
-
-    @Deprecated
-    protected static String getStr( String str, String key )
-    {
-        key = key.toLowerCase();
-        for (String s : str.split("\\|"))
-        {
-            s = s.trim().toLowerCase();
-            int index = s.indexOf("=");
-            if (index < 0)
-                continue;
-
-            String field = s.substring(0, index);
-            String valueStr = s.substring(index + 1);
-            if (key.equals(field))
-                return valueStr;
-        }
-        return "";
-    }
-
     /**
      * @param way: needed to retrieve OSM tags
      * @param speed: speed guessed e.g. from the road type or other tags
@@ -820,4 +777,5 @@ public boolean supports( Class<?> feature )
 
         return false;
     }
+
 }
diff --git a/core/src/main/java/com/graphhopper/routing/util/BikeCommonFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/BikeCommonFlagEncoder.java
index 0374c21a58..6ae39e15eb 100644
--- a/core/src/main/java/com/graphhopper/routing/util/BikeCommonFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/BikeCommonFlagEncoder.java
@@ -17,17 +17,17 @@
  */
 package com.graphhopper.routing.util;
 
-import com.graphhopper.reader.OSMWay;
 import com.graphhopper.reader.OSMRelation;
-
-import static com.graphhopper.routing.util.PriorityCode.*;
-
+import com.graphhopper.reader.OSMWay;
+import com.graphhopper.reader.osm.ConditionalTagsInspector;
 import com.graphhopper.util.Helper;
 import com.graphhopper.util.InstructionAnnotation;
 import com.graphhopper.util.Translation;
 
 import java.util.*;
 
+import static com.graphhopper.routing.util.PriorityCode.*;
+
 /**
  * Defines bit layout of bicycles (not motorcycles) for speed, access and relations (network).
  * <p>
@@ -199,6 +199,8 @@ protected BikeCommonFlagEncoder( int speedBits, double speedFactor, int maxTurnC
         setCyclingNetworkPreference("deprecated", PriorityCode.AVOID_AT_ALL_COSTS.getValue());
 
         setAvoidSpeedLimit(71);
+
+        conditionalTagsInspector = new ConditionalTagsInspector(restrictions, restrictedValues, intendedValues);
     }
 
     @Override
@@ -274,7 +276,7 @@ public long acceptWay( OSMWay way )
             return 0;
 
         // check access restrictions
-        if (way.hasTag(restrictions, restrictedValues))
+        if (way.hasTag(restrictions, restrictedValues) && !conditionalTagsInspector.isRestrictedWayConditionallyPermitted(way))
             return 0;
 
         // do not accept railways (sometimes incorrectly mapped!)
@@ -290,7 +292,11 @@ public long acceptWay( OSMWay way )
             if (!allowedSacScale(sacScale))
                 return 0;
         }
-        return acceptBit;
+
+        if (conditionalTagsInspector.isPermittedWayConditionallyRestricted(way))
+            return 0;
+        else
+            return acceptBit;
     }
 
     boolean allowedSacScale( String sacScale )
diff --git a/core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
index aaeee662bd..eb416d8a4a 100644
--- a/core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
@@ -17,13 +17,9 @@
  */
 package com.graphhopper.routing.util;
 
-import java.util.HashMap;
-import java.util.HashSet;
-import java.util.Map;
-import java.util.Set;
-
 import com.graphhopper.reader.OSMRelation;
 import com.graphhopper.reader.OSMWay;
+import com.graphhopper.reader.osm.ConditionalTagsInspector;
 import com.graphhopper.util.Helper;
 import com.graphhopper.util.PMap;
 
@@ -135,6 +131,8 @@ public CarFlagEncoder( int speedBits, double speedFactor, int maxTurnCosts )
         defaultSpeedMap.put("road", 20);
         // forestry stuff
         defaultSpeedMap.put("track", 15);
+
+        conditionalTagsInspector = new ConditionalTagsInspector(restrictions, restrictedValues, intendedValues);
     }
 
     @Override
@@ -180,6 +178,7 @@ protected double getSpeed( OSMWay way )
     @Override
     public long acceptWay( OSMWay way )
     {
+        // TODO: Ferries have conditionals, like opening hours or are closed during some time in the year
         String highwayValue = way.getTag("highway");
         if (highwayValue == null)
         {
@@ -212,7 +211,7 @@ public long acceptWay( OSMWay way )
         String firstValue = way.getFirstPriorityTag(restrictions);
         if (!firstValue.isEmpty())
         {
-            if (restrictedValues.contains(firstValue))
+            if (restrictedValues.contains(firstValue) && !conditionalTagsInspector.isRestrictedWayConditionallyPermitted(way))
                 return 0;
             if (intendedValues.contains(firstValue))
                 return acceptBit;
@@ -226,7 +225,10 @@ public long acceptWay( OSMWay way )
         if (way.hasTag("railway") && !way.hasTag("railway", acceptedRailways))
             return 0;
 
-        return acceptBit;
+        if (conditionalTagsInspector.isPermittedWayConditionallyRestricted(way))
+            return 0;
+        else
+            return acceptBit;
     }
 
     @Override
diff --git a/core/src/main/java/com/graphhopper/routing/util/FootFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/FootFlagEncoder.java
index 2e9252f9c3..dc6ed4cb34 100644
--- a/core/src/main/java/com/graphhopper/routing/util/FootFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/FootFlagEncoder.java
@@ -17,17 +17,15 @@
  */
 package com.graphhopper.routing.util;
 
-import java.util.HashSet;
-import java.util.Set;
-
 import com.graphhopper.reader.OSMRelation;
 import com.graphhopper.reader.OSMWay;
+import com.graphhopper.reader.osm.ConditionalTagsInspector;
 import com.graphhopper.util.PMap;
 
-import static com.graphhopper.routing.util.PriorityCode.*;
-
 import java.util.*;
 
+import static com.graphhopper.routing.util.PriorityCode.*;
+
 /**
  * Defines bit layout for pedestrians (speed, access, surface, ...).
  * <p>
@@ -131,6 +129,8 @@ public FootFlagEncoder( int speedBits, double speedFactor )
         hikingNetworkToCode.put("lwn", VERY_NICE.getValue());
 
         maxPossibleSpeed = FERRY_SPEED;
+
+        conditionalTagsInspector = new ConditionalTagsInspector(restrictions, restrictedValues, intendedValues);
     }
 
     @Override
@@ -248,14 +248,17 @@ public long acceptWay( OSMWay way )
             return 0;
 
         // check access restrictions
-        if (way.hasTag(restrictions, restrictedValues))
+        if (way.hasTag(restrictions, restrictedValues) && !conditionalTagsInspector.isRestrictedWayConditionallyPermitted(way))
             return 0;
 
         // do not accept railways (sometimes incorrectly mapped!)
         if (way.hasTag("railway") && !way.hasTag("railway", acceptedRailways))
             return 0;
 
-        return acceptBit;
+        if (conditionalTagsInspector.isPermittedWayConditionallyRestricted(way))
+            return 0;
+        else
+            return acceptBit;
     }
 
     @Override
diff --git a/core/src/main/java/com/graphhopper/routing/util/MotorcycleFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/MotorcycleFlagEncoder.java
index bc21d6c9d0..7f824b537d 100644
--- a/core/src/main/java/com/graphhopper/routing/util/MotorcycleFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/MotorcycleFlagEncoder.java
@@ -18,14 +18,15 @@
 package com.graphhopper.routing.util;
 
 import com.graphhopper.reader.OSMWay;
+import com.graphhopper.reader.osm.ConditionalTagsInspector;
 import com.graphhopper.util.BitUtil;
 import com.graphhopper.util.EdgeIteratorState;
 import com.graphhopper.util.PMap;
 
-import static com.graphhopper.routing.util.PriorityCode.*;
-
 import java.util.HashSet;
 
+import static com.graphhopper.routing.util.PriorityCode.BEST;
+
 /**
  * Defines bit layout for motorbikes
  * <p>
@@ -117,6 +118,7 @@ public MotorcycleFlagEncoder( int speedBits, double speedFactor, int maxTurnCost
         // forestry stuff
         defaultSpeedMap.put("track", 15);
 
+        conditionalTagsInspector = new ConditionalTagsInspector(restrictions, restrictedValues, intendedValues);
     }
 
     @Override
@@ -180,7 +182,7 @@ public long acceptWay( OSMWay way )
         String firstValue = way.getFirstPriorityTag(restrictions);
         if (!firstValue.isEmpty())
         {
-            if (restrictedValues.contains(firstValue))
+            if (restrictedValues.contains(firstValue) && !conditionalTagsInspector.isRestrictedWayConditionallyPermitted(way))
                 return 0;
             if (intendedValues.contains(firstValue))
                 return acceptBit;
@@ -194,7 +196,10 @@ public long acceptWay( OSMWay way )
         if (way.hasTag("railway") && !way.hasTag("railway", acceptedRailways))
             return 0;
 
-        return acceptBit;
+        if (conditionalTagsInspector.isPermittedWayConditionallyRestricted(way))
+            return 0;
+        else
+            return acceptBit;
     }
 
     @Override
diff --git a/core/src/main/java/com/graphhopper/storage/EdgeEntry.java b/core/src/main/java/com/graphhopper/storage/SPTEntry.java
similarity index 80%
rename from core/src/main/java/com/graphhopper/storage/EdgeEntry.java
rename to core/src/main/java/com/graphhopper/storage/SPTEntry.java
index e2fc5e6fbd..9674babf78 100644
--- a/core/src/main/java/com/graphhopper/storage/EdgeEntry.java
+++ b/core/src/main/java/com/graphhopper/storage/SPTEntry.java
@@ -22,14 +22,14 @@
  * <p>
  * @author Peter Karich
  */
-public class EdgeEntry implements Cloneable, Comparable<EdgeEntry>
+public class SPTEntry implements Cloneable, Comparable<SPTEntry>
 {
     public int edge;
     public int adjNode;
     public double weight;
-    public EdgeEntry parent;
+    public SPTEntry parent;
 
-    public EdgeEntry( int edgeId, int adjNode, double weight )
+    public SPTEntry( int edgeId, int adjNode, double weight )
     {
         this.edge = edgeId;
         this.adjNode = adjNode;
@@ -37,16 +37,16 @@ public EdgeEntry( int edgeId, int adjNode, double weight )
     }
 
     @Override
-    public EdgeEntry clone()
+    public SPTEntry clone()
     {
-        return new EdgeEntry(edge, adjNode, weight);
+        return new SPTEntry(edge, adjNode, weight);
     }
 
-    public EdgeEntry cloneFull()
+    public SPTEntry cloneFull()
     {
-        EdgeEntry de = clone();
-        EdgeEntry tmpPrev = parent;
-        EdgeEntry cl = de;
+        SPTEntry de = clone();
+        SPTEntry tmpPrev = parent;
+        SPTEntry cl = de;
         while (tmpPrev != null)
         {
             cl.parent = tmpPrev.clone();
@@ -57,7 +57,7 @@ public EdgeEntry cloneFull()
     }
 
     @Override
-    public int compareTo( EdgeEntry o )
+    public int compareTo( SPTEntry o )
     {
         if (weight < o.weight)
             return -1;
diff --git a/core/src/main/java/com/graphhopper/util/GPXEntry.java b/core/src/main/java/com/graphhopper/util/GPXEntry.java
index 7b31ecb262..78a557bd9c 100644
--- a/core/src/main/java/com/graphhopper/util/GPXEntry.java
+++ b/core/src/main/java/com/graphhopper/util/GPXEntry.java
@@ -62,24 +62,6 @@ public void setTime( long time )
         this.time = time;
     }
 
-    /**
-     * The time relative to the start time in milli seconds.
-     * <p>
-     * @deprecated use getTime instead
-     */
-    public long getMillis()
-    {
-        return time;
-    }
-
-    /**
-     * @deprecated use setTime instead
-     */
-    public void setMillis( long time )
-    {
-        this.time = time;
-    }
-
     @Override
     public boolean equals( Object obj )
     {
diff --git a/core/src/main/resources/com/graphhopper/util/ar.txt b/core/src/main/resources/com/graphhopper/util/ar.txt
index c517b9dc74..c4f3621a75 100644
--- a/core/src/main/resources/com/graphhopper/util/ar.txt
+++ b/core/src/main/resources/com/graphhopper/util/ar.txt
@@ -48,3 +48,17 @@ roundaboutExit=في الدوران ، أتخذ مخرج   %1$s
 roundaboutExitOnto=في الدوران ، أتخذ مخرج   %1$s من خلال %2$s
 totalAscend=
 totalDescend=
+web.start_label=
+web.intermediate_label=
+web.end_label=
+web.set_start=
+web.set_intermediate=
+web.set_end=
+web.center_map=
+web.show_coords=
+web.route=
+web.delete_from_route=
+web.marker=
+web.gh_offline_info=
+web.refresh_button=
+web.server_status=
diff --git a/core/src/main/resources/com/graphhopper/util/ast.txt b/core/src/main/resources/com/graphhopper/util/ast.txt
index 8f19778c18..ecffdd421e 100644
--- a/core/src/main/resources/com/graphhopper/util/ast.txt
+++ b/core/src/main/resources/com/graphhopper/util/ast.txt
@@ -48,3 +48,17 @@ roundaboutExit=Na rotonda, toma la salida %1$s
 roundaboutExitOnto=Na rotonda, toma la salida %1$s haza %2$s
 totalAscend=
 totalDescend=
+web.start_label=
+web.intermediate_label=
+web.end_label=
+web.set_start=
+web.set_intermediate=
+web.set_end=
+web.center_map=
+web.show_coords=
+web.route=
+web.delete_from_route=
+web.marker=
+web.gh_offline_info=
+web.refresh_button=
+web.server_status=
diff --git a/core/src/main/resources/com/graphhopper/util/bg.txt b/core/src/main/resources/com/graphhopper/util/bg.txt
index 546f2903a3..696bdafd40 100644
--- a/core/src/main/resources/com/graphhopper/util/bg.txt
+++ b/core/src/main/resources/com/graphhopper/util/bg.txt
@@ -48,3 +48,17 @@ roundaboutExit=На кръговото кръстовище използвайт
 roundaboutExitOnto=На кръговото кръстовище използвайте изход %1$s по %2$s
 totalAscend=
 totalDescend=
+web.start_label=
+web.intermediate_label=
+web.end_label=
+web.set_start=
+web.set_intermediate=
+web.set_end=
+web.center_map=
+web.show_coords=
+web.route=
+web.delete_from_route=
+web.marker=
+web.gh_offline_info=
+web.refresh_button=
+web.server_status=
diff --git a/core/src/main/resources/com/graphhopper/util/ca.txt b/core/src/main/resources/com/graphhopper/util/ca.txt
index 75d02569bc..c1d38aa3bd 100644
--- a/core/src/main/resources/com/graphhopper/util/ca.txt
+++ b/core/src/main/resources/com/graphhopper/util/ca.txt
@@ -48,3 +48,17 @@ roundaboutExit=A la rotonda, agafa la %1$s sortida
 roundaboutExitOnto=A la rotonda, agafa la sortida %1$s cap a %2$s
 totalAscend=
 totalDescend=
+web.start_label=
+web.intermediate_label=
+web.end_label=
+web.set_start=
+web.set_intermediate=
+web.set_end=
+web.center_map=
+web.show_coords=
+web.route=
+web.delete_from_route=
+web.marker=
+web.gh_offline_info=
+web.refresh_button=
+web.server_status=
diff --git a/core/src/main/resources/com/graphhopper/util/cs_CZ.txt b/core/src/main/resources/com/graphhopper/util/cs_CZ.txt
index 68349639dd..754175cec1 100644
--- a/core/src/main/resources/com/graphhopper/util/cs_CZ.txt
+++ b/core/src/main/resources/com/graphhopper/util/cs_CZ.txt
@@ -48,3 +48,17 @@ roundaboutExit=Na kruhovém objezdu použijte %1$s. výjezd
 roundaboutExitOnto=Na kruhovém objezdu použijte %1$s. výjezd, směrem na %2$s
 totalAscend=
 totalDescend=
+web.start_label=
+web.intermediate_label=
+web.end_label=
+web.set_start=
+web.set_intermediate=
+web.set_end=
+web.center_map=
+web.show_coords=
+web.route=
+web.delete_from_route=
+web.marker=
+web.gh_offline_info=
+web.refresh_button=
+web.server_status=
diff --git a/core/src/main/resources/com/graphhopper/util/da_DK.txt b/core/src/main/resources/com/graphhopper/util/da_DK.txt
index 49efad901d..3403920189 100644
--- a/core/src/main/resources/com/graphhopper/util/da_DK.txt
+++ b/core/src/main/resources/com/graphhopper/util/da_DK.txt
@@ -48,3 +48,17 @@ roundaboutExit=I rundkørslen, tag udkørsel %1$s
 roundaboutExitOnto=I rundskørslen, ta udkørsel %1$s ind på %2$s
 totalAscend=
 totalDescend=
+web.start_label=
+web.intermediate_label=
+web.end_label=
+web.set_start=
+web.set_intermediate=
+web.set_end=
+web.center_map=
+web.show_coords=
+web.route=
+web.delete_from_route=
+web.marker=
+web.gh_offline_info=
+web.refresh_button=
+web.server_status=
diff --git a/core/src/main/resources/com/graphhopper/util/de_DE.txt b/core/src/main/resources/com/graphhopper/util/de_DE.txt
index 5b1e04ed13..2c91bd0cc1 100644
--- a/core/src/main/resources/com/graphhopper/util/de_DE.txt
+++ b/core/src/main/resources/com/graphhopper/util/de_DE.txt
@@ -48,3 +48,17 @@ roundaboutExit=Im Kreisverkehr Ausfahrt %1$s nehmen
 roundaboutExitOnto=Im Kreisverkehr Ausfahrt %1$s auf %2$s nehmen
 totalAscend=%1$s Gesamtaufstieg
 totalDescend=%1$s Gesamtabstieg
+web.start_label=Start
+web.intermediate_label=Zwischenziel
+web.end_label=Ziel
+web.set_start=Setze als Start
+web.set_intermediate=Setze als Zwischenziel
+web.set_end=Setze als Ziel
+web.center_map=Zentriere Karte hier
+web.show_coords=Zeige Koordinaten
+web.route=Route
+web.delete_from_route=Lösche aus Route
+web.marker=Marker
+web.gh_offline_info=Ist die GraphHopper API offline?
+web.refresh_button=Lade Seite neu
+web.server_status=Status
diff --git a/core/src/main/resources/com/graphhopper/util/el.txt b/core/src/main/resources/com/graphhopper/util/el.txt
index 4e18611e3e..84d7c235c6 100644
--- a/core/src/main/resources/com/graphhopper/util/el.txt
+++ b/core/src/main/resources/com/graphhopper/util/el.txt
@@ -48,3 +48,17 @@ roundaboutExit=Στον κυκλικό κόμβο βγείτε στην έξοδ
 roundaboutExitOnto=Στον κυκλικό κόμβο βγείτε στην έξοδο %1$s στην %2$s
 totalAscend=%1$s συνολική ανάβαση
 totalDescend=%1$s συνολική κατάβαση
+web.start_label=
+web.intermediate_label=
+web.end_label=
+web.set_start=
+web.set_intermediate=
+web.set_end=
+web.center_map=
+web.show_coords=
+web.route=
+web.delete_from_route=
+web.marker=
+web.gh_offline_info=
+web.refresh_button=
+web.server_status=
diff --git a/core/src/main/resources/com/graphhopper/util/en_US.txt b/core/src/main/resources/com/graphhopper/util/en_US.txt
index d6955c79eb..2eb40f4162 100644
--- a/core/src/main/resources/com/graphhopper/util/en_US.txt
+++ b/core/src/main/resources/com/graphhopper/util/en_US.txt
@@ -48,3 +48,17 @@ roundaboutExit=At roundabout, take exit %1$s
 roundaboutExitOnto=At roundabout, take exit %1$s onto %2$s
 totalAscend=%1$s total ascend
 totalDescend=%1$s total descend
+web.start_label=Start
+web.intermediate_label=Intermediate
+web.end_label=End
+web.set_start=Set as start
+web.set_intermediate=Set intermediate
+web.set_end=Set as end
+web.center_map=Center map here
+web.show_coords=Show coordinates
+web.route=Route
+web.delete_from_route=Delete from Route
+web.marker=Marker
+web.gh_offline_info=GraphHopper API offline?
+web.refresh_button=Refresh page
+web.server_status=Status
diff --git a/core/src/main/resources/com/graphhopper/util/es.txt b/core/src/main/resources/com/graphhopper/util/es.txt
index 3770861c20..0992d11864 100644
--- a/core/src/main/resources/com/graphhopper/util/es.txt
+++ b/core/src/main/resources/com/graphhopper/util/es.txt
@@ -48,3 +48,17 @@ roundaboutExit=En la rotonda, tome la %1$sª salida
 roundaboutExitOnto=En la rotonda, tome la %1$sª salida hacia %2$s
 totalAscend=Ascender %1$s en total
 totalDescend=Descender %1$s en total
+web.start_label=
+web.intermediate_label=
+web.end_label=
+web.set_start=
+web.set_intermediate=
+web.set_end=
+web.center_map=
+web.show_coords=
+web.route=
+web.delete_from_route=
+web.marker=
+web.gh_offline_info=
+web.refresh_button=
+web.server_status=
diff --git a/core/src/main/resources/com/graphhopper/util/fa.txt b/core/src/main/resources/com/graphhopper/util/fa.txt
index 2d030cd0b0..7be758899b 100644
--- a/core/src/main/resources/com/graphhopper/util/fa.txt
+++ b/core/src/main/resources/com/graphhopper/util/fa.txt
@@ -48,3 +48,17 @@ roundaboutExit=در میدان خروجی  %1$s را انتخاب کنید
 roundaboutExitOnto=در میدان خروجی  %1$s به %2$s را انتخاب کنید
 totalAscend=
 totalDescend=
+web.start_label=
+web.intermediate_label=
+web.end_label=
+web.set_start=
+web.set_intermediate=
+web.set_end=
+web.center_map=
+web.show_coords=
+web.route=
+web.delete_from_route=
+web.marker=
+web.gh_offline_info=
+web.refresh_button=
+web.server_status=
diff --git a/core/src/main/resources/com/graphhopper/util/fi.txt b/core/src/main/resources/com/graphhopper/util/fi.txt
index 80942d473c..547b53fab8 100644
--- a/core/src/main/resources/com/graphhopper/util/fi.txt
+++ b/core/src/main/resources/com/graphhopper/util/fi.txt
@@ -48,3 +48,17 @@ roundaboutExit=Liikenneympyrästä poistu %1$s. liittymästä
 roundaboutExitOnto=Liikenneympyrästä poistu %1$s. liittymästä suuntaan %2$s
 totalAscend=
 totalDescend=
+web.start_label=
+web.intermediate_label=
+web.end_label=
+web.set_start=
+web.set_intermediate=
+web.set_end=
+web.center_map=
+web.show_coords=
+web.route=
+web.delete_from_route=
+web.marker=
+web.gh_offline_info=
+web.refresh_button=
+web.server_status=
diff --git a/core/src/main/resources/com/graphhopper/util/fil.txt b/core/src/main/resources/com/graphhopper/util/fil.txt
index 10ec97c602..9df4542194 100644
--- a/core/src/main/resources/com/graphhopper/util/fil.txt
+++ b/core/src/main/resources/com/graphhopper/util/fil.txt
@@ -48,3 +48,17 @@ roundaboutExit=Sa rotonda, lumabas sa exit %1$s
 roundaboutExitOnto=Sa rotonda, lumabas sa exit papunta %1$s %2$s
 totalAscend=
 totalDescend=
+web.start_label=
+web.intermediate_label=
+web.end_label=
+web.set_start=
+web.set_intermediate=
+web.set_end=
+web.center_map=
+web.show_coords=
+web.route=
+web.delete_from_route=
+web.marker=
+web.gh_offline_info=
+web.refresh_button=
+web.server_status=
diff --git a/core/src/main/resources/com/graphhopper/util/fr_CH.txt b/core/src/main/resources/com/graphhopper/util/fr_CH.txt
index 181dd01537..3ed46ee311 100644
--- a/core/src/main/resources/com/graphhopper/util/fr_CH.txt
+++ b/core/src/main/resources/com/graphhopper/util/fr_CH.txt
@@ -11,7 +11,7 @@ turn_sharp_right=tournez fort à droite
 turn_onto=%1$s sur %2$s
 web.searchButton=Rechercher
 web.fromHint=De
-web.viaHint=via
+web.viaHint=Via
 web.toHint=À
 web.moreButton=plus
 web.gpxExportButton=Export GPX
@@ -28,7 +28,7 @@ web.truck=Camion
 web.staticlink=Lien
 web.motorcycle=Moto
 via=via
-finish=Fini !
+finish=Arrivée
 hourAbbr=h
 dayAbbr=j
 minAbbr=min
@@ -48,3 +48,17 @@ roundaboutExit=Au giratoire, prenez la %1$s sortie
 roundaboutExitOnto=Au giratoire, prenez la %1$s sortie vers %2$s
 totalAscend=%1$s de dénivelé positif
 totalDescend=%1$s de dénivelé négatif
+web.start_label=Départ
+web.intermediate_label=Point intermédiaire
+web.end_label=Arrivée
+web.set_start=Départ de l'itinéraire ici
+web.set_intermediate=Ajouter un point intermédiaire
+web.set_end=Arrivée de l'itinéraire ici
+web.center_map=Centrer la carte ici
+web.show_coords=Afficher les coordonnées
+web.route=Itinéraire
+web.delete_from_route=Supprimer ce point de l'itinéraire
+web.marker=Marqueur
+web.gh_offline_info=GraphHopper API hors connexion?
+web.refresh_button=Rafraîchir
+web.server_status=Statut
diff --git a/core/src/main/resources/com/graphhopper/util/fr_FR.txt b/core/src/main/resources/com/graphhopper/util/fr_FR.txt
index bd17f3b3d4..4acaac0627 100644
--- a/core/src/main/resources/com/graphhopper/util/fr_FR.txt
+++ b/core/src/main/resources/com/graphhopper/util/fr_FR.txt
@@ -11,7 +11,7 @@ turn_sharp_right=tournez fort à droite
 turn_onto=%1$s sur %2$s
 web.searchButton=Rechercher
 web.fromHint=De
-web.viaHint=via
+web.viaHint=Via
 web.toHint=À
 web.moreButton=plus
 web.gpxExportButton=Export GPX
@@ -28,7 +28,7 @@ web.truck=Camion
 web.staticlink=Lien
 web.motorcycle=Moto
 via=via
-finish=Fini !
+finish=Arrivée
 hourAbbr=h
 dayAbbr=j
 minAbbr=min
@@ -48,3 +48,17 @@ roundaboutExit=Au rond-point, prenez la %1$s sortie
 roundaboutExitOnto=Au rond-point, prenez la %1$s sortie vers %2$s
 totalAscend=%1$s de dénivelé positif
 totalDescend=%1$s de dénivelé négatif
+web.start_label=Départ
+web.intermediate_label=Point intermédiaire
+web.end_label=Arrivée
+web.set_start=Départ de l'itinéraire ici
+web.set_intermediate=Ajouter un point intermédiaire
+web.set_end=Arrivée de l'itinéraire ici
+web.center_map=Centrer la carte ici
+web.show_coords=Afficher les coordonnées
+web.route=Itinéraire
+web.delete_from_route=Supprimer ce point de l'itinéraire
+web.marker=Marqueur
+web.gh_offline_info=GraphHopper API hors connexion?
+web.refresh_button=Rafraîchir
+web.server_status=Statut
diff --git a/core/src/main/resources/com/graphhopper/util/gl.txt b/core/src/main/resources/com/graphhopper/util/gl.txt
index 171de9c494..2e9451e65d 100644
--- a/core/src/main/resources/com/graphhopper/util/gl.txt
+++ b/core/src/main/resources/com/graphhopper/util/gl.txt
@@ -48,3 +48,17 @@ roundaboutExit=Na rotonda tome a saída %1$s
 roundaboutExitOnto=Na rotonda, tome a saída %1$s cara %2$s
 totalAscend=
 totalDescend=
+web.start_label=
+web.intermediate_label=
+web.end_label=
+web.set_start=
+web.set_intermediate=
+web.set_end=
+web.center_map=
+web.show_coords=
+web.route=
+web.delete_from_route=
+web.marker=
+web.gh_offline_info=
+web.refresh_button=
+web.server_status=
diff --git a/core/src/main/resources/com/graphhopper/util/he.txt b/core/src/main/resources/com/graphhopper/util/he.txt
index 47969537e0..9170fcf902 100644
--- a/core/src/main/resources/com/graphhopper/util/he.txt
+++ b/core/src/main/resources/com/graphhopper/util/he.txt
@@ -48,3 +48,17 @@ roundaboutExit=בכיכר, יש לצאת ביציאה %1$s
 roundaboutExitOnto=בכיכר, יש לצאת ביציאה %1$s לתוך %2$s
 totalAscend=
 totalDescend=
+web.start_label=
+web.intermediate_label=
+web.end_label=
+web.set_start=
+web.set_intermediate=
+web.set_end=
+web.center_map=
+web.show_coords=
+web.route=
+web.delete_from_route=
+web.marker=
+web.gh_offline_info=
+web.refresh_button=
+web.server_status=
diff --git a/core/src/main/resources/com/graphhopper/util/hsb.txt b/core/src/main/resources/com/graphhopper/util/hsb.txt
index 11c2f877c4..57927b7fd5 100644
--- a/core/src/main/resources/com/graphhopper/util/hsb.txt
+++ b/core/src/main/resources/com/graphhopper/util/hsb.txt
@@ -48,3 +48,17 @@ roundaboutExit=we kružnym wobchadźe %1$s. wujězd wzać
 roundaboutExitOnto=we kružnym wobchadźe %1$s. wujězd na %2$s wzać
 totalAscend=
 totalDescend=
+web.start_label=
+web.intermediate_label=
+web.end_label=
+web.set_start=
+web.set_intermediate=
+web.set_end=
+web.center_map=
+web.show_coords=
+web.route=
+web.delete_from_route=
+web.marker=
+web.gh_offline_info=
+web.refresh_button=
+web.server_status=
diff --git a/core/src/main/resources/com/graphhopper/util/hu_HU.txt b/core/src/main/resources/com/graphhopper/util/hu_HU.txt
index 0c0b945965..b4566ebece 100644
--- a/core/src/main/resources/com/graphhopper/util/hu_HU.txt
+++ b/core/src/main/resources/com/graphhopper/util/hu_HU.txt
@@ -48,3 +48,17 @@ roundaboutExit=Hagyja el a körförgalmat, kihajtó %1$s
 roundaboutExitOnto=Hagyja el a körförgalmat, kihajtó %1$s, aztán hajtson rá %2$s
 totalAscend=
 totalDescend=
+web.start_label=
+web.intermediate_label=
+web.end_label=
+web.set_start=
+web.set_intermediate=
+web.set_end=
+web.center_map=
+web.show_coords=
+web.route=
+web.delete_from_route=
+web.marker=
+web.gh_offline_info=
+web.refresh_button=
+web.server_status=
diff --git a/core/src/main/resources/com/graphhopper/util/it.txt b/core/src/main/resources/com/graphhopper/util/it.txt
index 5c3a2d0e1a..9b8d76f552 100644
--- a/core/src/main/resources/com/graphhopper/util/it.txt
+++ b/core/src/main/resources/com/graphhopper/util/it.txt
@@ -48,3 +48,17 @@ roundaboutExit=Nella rotatoria, prendere l'uscita %1$s
 roundaboutExitOnto=Nella rotatoria, prendere l'uscita %1$s su %2$s
 totalAscend=
 totalDescend=
+web.start_label=
+web.intermediate_label=
+web.end_label=
+web.set_start=
+web.set_intermediate=
+web.set_end=
+web.center_map=
+web.show_coords=
+web.route=
+web.delete_from_route=
+web.marker=
+web.gh_offline_info=
+web.refresh_button=
+web.server_status=
diff --git a/core/src/main/resources/com/graphhopper/util/ja.txt b/core/src/main/resources/com/graphhopper/util/ja.txt
index 59014f605b..feff882aff 100644
--- a/core/src/main/resources/com/graphhopper/util/ja.txt
+++ b/core/src/main/resources/com/graphhopper/util/ja.txt
@@ -48,3 +48,17 @@ roundaboutExit=円形交差点の出口%1$sへ
 roundaboutExitOnto=円形交差点の出口%1$sから%2$sへ
 totalAscend=
 totalDescend=
+web.start_label=
+web.intermediate_label=
+web.end_label=
+web.set_start=
+web.set_intermediate=
+web.set_end=
+web.center_map=
+web.show_coords=
+web.route=
+web.delete_from_route=
+web.marker=
+web.gh_offline_info=
+web.refresh_button=
+web.server_status=
diff --git a/core/src/main/resources/com/graphhopper/util/lt_LT.txt b/core/src/main/resources/com/graphhopper/util/lt_LT.txt
index 60b84730c1..e9cf5e33aa 100644
--- a/core/src/main/resources/com/graphhopper/util/lt_LT.txt
+++ b/core/src/main/resources/com/graphhopper/util/lt_LT.txt
@@ -48,3 +48,17 @@ roundaboutExit=Žiede išvažiuokite %1$s išvažiavime
 roundaboutExitOnto=Žiede išvažiuokite %1$s išvažiavime į  %2$s
 totalAscend=
 totalDescend=
+web.start_label=
+web.intermediate_label=
+web.end_label=
+web.set_start=
+web.set_intermediate=
+web.set_end=
+web.center_map=
+web.show_coords=
+web.route=
+web.delete_from_route=
+web.marker=
+web.gh_offline_info=
+web.refresh_button=
+web.server_status=
diff --git a/core/src/main/resources/com/graphhopper/util/ne.txt b/core/src/main/resources/com/graphhopper/util/ne.txt
index 3b17738e58..c7e45b5951 100644
--- a/core/src/main/resources/com/graphhopper/util/ne.txt
+++ b/core/src/main/resources/com/graphhopper/util/ne.txt
@@ -48,3 +48,17 @@ roundaboutExit=घुम्तीमा %1$s नम्बर को मोडब
 roundaboutExitOnto=घुम्तीमा %1$s नम्बर को मोडबाट निस्केर %2$s मा जानुहोस
 totalAscend=
 totalDescend=
+web.start_label=
+web.intermediate_label=
+web.end_label=
+web.set_start=
+web.set_intermediate=
+web.set_end=
+web.center_map=
+web.show_coords=
+web.route=
+web.delete_from_route=
+web.marker=
+web.gh_offline_info=
+web.refresh_button=
+web.server_status=
diff --git a/core/src/main/resources/com/graphhopper/util/nl.txt b/core/src/main/resources/com/graphhopper/util/nl.txt
index a3bcc27244..7d07588079 100644
--- a/core/src/main/resources/com/graphhopper/util/nl.txt
+++ b/core/src/main/resources/com/graphhopper/util/nl.txt
@@ -48,3 +48,17 @@ roundaboutExit=neem afslag %1$s op de rotonde
 roundaboutExitOnto=neem afslag %1$s naar %2$s op de rotonde 
 totalAscend=
 totalDescend=
+web.start_label=
+web.intermediate_label=
+web.end_label=
+web.set_start=
+web.set_intermediate=
+web.set_end=
+web.center_map=
+web.show_coords=
+web.route=
+web.delete_from_route=
+web.marker=
+web.gh_offline_info=
+web.refresh_button=
+web.server_status=
diff --git a/core/src/main/resources/com/graphhopper/util/pl_PL.txt b/core/src/main/resources/com/graphhopper/util/pl_PL.txt
index a196ee69bd..c3ea1577c2 100644
--- a/core/src/main/resources/com/graphhopper/util/pl_PL.txt
+++ b/core/src/main/resources/com/graphhopper/util/pl_PL.txt
@@ -48,3 +48,17 @@ roundaboutExit=Zjedź z ronda %1$s zjazdem
 roundaboutExitOnto=Zjedź z ronda %1$s zjazdem na %2$s
 totalAscend=
 totalDescend=
+web.start_label=
+web.intermediate_label=
+web.end_label=
+web.set_start=
+web.set_intermediate=
+web.set_end=
+web.center_map=
+web.show_coords=
+web.route=
+web.delete_from_route=
+web.marker=
+web.gh_offline_info=
+web.refresh_button=
+web.server_status=
diff --git a/core/src/main/resources/com/graphhopper/util/pt_BR.txt b/core/src/main/resources/com/graphhopper/util/pt_BR.txt
index 22cb487114..fb6214f492 100644
--- a/core/src/main/resources/com/graphhopper/util/pt_BR.txt
+++ b/core/src/main/resources/com/graphhopper/util/pt_BR.txt
@@ -48,3 +48,17 @@ roundaboutExit=Na rotatória, saia na %1$s saída
 roundaboutExitOnto=Na rotatória, saia na %1$s saida em direção a %2$s
 totalAscend=
 totalDescend=
+web.start_label=
+web.intermediate_label=
+web.end_label=
+web.set_start=
+web.set_intermediate=
+web.set_end=
+web.center_map=
+web.show_coords=
+web.route=
+web.delete_from_route=
+web.marker=
+web.gh_offline_info=
+web.refresh_button=
+web.server_status=
diff --git a/core/src/main/resources/com/graphhopper/util/pt_PT.txt b/core/src/main/resources/com/graphhopper/util/pt_PT.txt
index 72d43c3e35..ca457b556d 100644
--- a/core/src/main/resources/com/graphhopper/util/pt_PT.txt
+++ b/core/src/main/resources/com/graphhopper/util/pt_PT.txt
@@ -48,3 +48,17 @@ roundaboutExit=Na rotunda, saia na %1$s saída
 roundaboutExitOnto=Na rotunda, saia na %1$s saida em direção a %2$s
 totalAscend=
 totalDescend=
+web.start_label=
+web.intermediate_label=
+web.end_label=
+web.set_start=
+web.set_intermediate=
+web.set_end=
+web.center_map=
+web.show_coords=
+web.route=
+web.delete_from_route=
+web.marker=
+web.gh_offline_info=
+web.refresh_button=
+web.server_status=
diff --git a/core/src/main/resources/com/graphhopper/util/ro.txt b/core/src/main/resources/com/graphhopper/util/ro.txt
index 32fd565ddb..4529b406da 100644
--- a/core/src/main/resources/com/graphhopper/util/ro.txt
+++ b/core/src/main/resources/com/graphhopper/util/ro.txt
@@ -48,3 +48,17 @@ roundaboutExit=La giratoriu folosiți ieșirea %1$s
 roundaboutExitOnto=La giratoriu folosiți ieșirea %1$s către %2$s
 totalAscend=
 totalDescend=
+web.start_label=
+web.intermediate_label=
+web.end_label=
+web.set_start=
+web.set_intermediate=
+web.set_end=
+web.center_map=
+web.show_coords=
+web.route=
+web.delete_from_route=
+web.marker=
+web.gh_offline_info=
+web.refresh_button=
+web.server_status=
diff --git a/core/src/main/resources/com/graphhopper/util/ru.txt b/core/src/main/resources/com/graphhopper/util/ru.txt
index b32ec9e72d..64a5b85ba5 100644
--- a/core/src/main/resources/com/graphhopper/util/ru.txt
+++ b/core/src/main/resources/com/graphhopper/util/ru.txt
@@ -48,3 +48,17 @@ roundaboutExit=У кольца используйте съезд %1$s
 roundaboutExitOnto=У кольца используйте съезд %1$s на %2$s
 totalAscend=
 totalDescend=
+web.start_label=
+web.intermediate_label=
+web.end_label=
+web.set_start=
+web.set_intermediate=
+web.set_end=
+web.center_map=
+web.show_coords=
+web.route=
+web.delete_from_route=
+web.marker=
+web.gh_offline_info=
+web.refresh_button=
+web.server_status=
diff --git a/core/src/main/resources/com/graphhopper/util/si.txt b/core/src/main/resources/com/graphhopper/util/si.txt
index 3421043bb4..486c8c5923 100644
--- a/core/src/main/resources/com/graphhopper/util/si.txt
+++ b/core/src/main/resources/com/graphhopper/util/si.txt
@@ -48,3 +48,17 @@ roundaboutExit=v krožišču izberite izhod %1$s
 roundaboutExitOnto=v krožišču izberite izhod %1$s na %2$s
 totalAscend=
 totalDescend=
+web.start_label=
+web.intermediate_label=
+web.end_label=
+web.set_start=
+web.set_intermediate=
+web.set_end=
+web.center_map=
+web.show_coords=
+web.route=
+web.delete_from_route=
+web.marker=
+web.gh_offline_info=
+web.refresh_button=
+web.server_status=
diff --git a/core/src/main/resources/com/graphhopper/util/sk.txt b/core/src/main/resources/com/graphhopper/util/sk.txt
index 855fd7c196..1787074406 100644
--- a/core/src/main/resources/com/graphhopper/util/sk.txt
+++ b/core/src/main/resources/com/graphhopper/util/sk.txt
@@ -48,3 +48,17 @@ roundaboutExit=Na kruhovom objazde, ho opustite cez %1$s. výjazd
 roundaboutExitOnto=Na kruhovom objazde, ho opustite cez %1$s. výjazd na %2$s
 totalAscend=
 totalDescend=
+web.start_label=
+web.intermediate_label=
+web.end_label=
+web.set_start=
+web.set_intermediate=
+web.set_end=
+web.center_map=
+web.show_coords=
+web.route=
+web.delete_from_route=
+web.marker=
+web.gh_offline_info=
+web.refresh_button=
+web.server_status=
diff --git a/core/src/main/resources/com/graphhopper/util/sv_SE.txt b/core/src/main/resources/com/graphhopper/util/sv_SE.txt
index c6e53440a0..f34cec0d67 100644
--- a/core/src/main/resources/com/graphhopper/util/sv_SE.txt
+++ b/core/src/main/resources/com/graphhopper/util/sv_SE.txt
@@ -48,3 +48,17 @@ roundaboutExit=I rondellen, ta avfart %1$s
 roundaboutExitOnto=I rondellen, ta avfart %1$s in på %2$s
 totalAscend=
 totalDescend=
+web.start_label=
+web.intermediate_label=
+web.end_label=
+web.set_start=
+web.set_intermediate=
+web.set_end=
+web.center_map=
+web.show_coords=
+web.route=
+web.delete_from_route=
+web.marker=
+web.gh_offline_info=
+web.refresh_button=
+web.server_status=
diff --git a/core/src/main/resources/com/graphhopper/util/tr.txt b/core/src/main/resources/com/graphhopper/util/tr.txt
index 97423f796a..9fe5d14689 100644
--- a/core/src/main/resources/com/graphhopper/util/tr.txt
+++ b/core/src/main/resources/com/graphhopper/util/tr.txt
@@ -48,3 +48,17 @@ roundaboutExit=kavşaktan %1$s cıkışa gir
 roundaboutExitOnto=kavşaktan %1$s cıkıştan %2$s sokağa gir
 totalAscend=
 totalDescend=
+web.start_label=
+web.intermediate_label=
+web.end_label=
+web.set_start=
+web.set_intermediate=
+web.set_end=
+web.center_map=
+web.show_coords=
+web.route=
+web.delete_from_route=
+web.marker=
+web.gh_offline_info=
+web.refresh_button=
+web.server_status=
diff --git a/core/src/main/resources/com/graphhopper/util/uk.txt b/core/src/main/resources/com/graphhopper/util/uk.txt
index e086612dd5..bfe51a4a3f 100644
--- a/core/src/main/resources/com/graphhopper/util/uk.txt
+++ b/core/src/main/resources/com/graphhopper/util/uk.txt
@@ -48,3 +48,17 @@ roundaboutExit=На кільці використовуйте з’їзд %1$s
 roundaboutExitOnto=На кільці використовуйте з’їзд %1$s на %2$s
 totalAscend=
 totalDescend=
+web.start_label=
+web.intermediate_label=
+web.end_label=
+web.set_start=
+web.set_intermediate=
+web.set_end=
+web.center_map=
+web.show_coords=
+web.route=
+web.delete_from_route=
+web.marker=
+web.gh_offline_info=
+web.refresh_button=
+web.server_status=
diff --git a/core/src/main/resources/com/graphhopper/util/vi_VI.txt b/core/src/main/resources/com/graphhopper/util/vi_VI.txt
index b6b4463f39..1d808d6b1e 100644
--- a/core/src/main/resources/com/graphhopper/util/vi_VI.txt
+++ b/core/src/main/resources/com/graphhopper/util/vi_VI.txt
@@ -48,3 +48,17 @@ roundaboutExit=Tai bung binh, re loi re %1$s
 roundaboutExitOnto=Tai bung binh, re loi re %1$s vao pho %2$s
 totalAscend=Di tiep %1$s nua
 totalDescend=
+web.start_label=
+web.intermediate_label=
+web.end_label=
+web.set_start=
+web.set_intermediate=
+web.set_end=
+web.center_map=
+web.show_coords=
+web.route=
+web.delete_from_route=
+web.marker=
+web.gh_offline_info=
+web.refresh_button=
+web.server_status=
diff --git a/core/src/main/resources/com/graphhopper/util/zh_CN.txt b/core/src/main/resources/com/graphhopper/util/zh_CN.txt
index ea06543b95..5f64a841ce 100644
--- a/core/src/main/resources/com/graphhopper/util/zh_CN.txt
+++ b/core/src/main/resources/com/graphhopper/util/zh_CN.txt
@@ -48,3 +48,17 @@ roundaboutExit=在环岛内，使用%1$s出口出环岛
 roundaboutExitOnto=在环岛内，使用%1$s出口出环岛，进入%2$s
 totalAscend=
 totalDescend=
+web.start_label=
+web.intermediate_label=
+web.end_label=
+web.set_start=
+web.set_intermediate=
+web.set_end=
+web.center_map=
+web.show_coords=
+web.route=
+web.delete_from_route=
+web.marker=
+web.gh_offline_info=
+web.refresh_button=
+web.server_status=
diff --git a/core/src/test/java/com/graphhopper/coll/AbstractBinHeapTest.java b/core/src/test/java/com/graphhopper/coll/AbstractBinHeapTest.java
index 5cc1e82fa4..d845883a13 100644
--- a/core/src/test/java/com/graphhopper/coll/AbstractBinHeapTest.java
+++ b/core/src/test/java/com/graphhopper/coll/AbstractBinHeapTest.java
@@ -17,7 +17,7 @@
  */
 package com.graphhopper.coll;
 
-import com.graphhopper.storage.EdgeEntry;
+import com.graphhopper.storage.SPTEntry;
 import com.graphhopper.util.EdgeIterator;
 
 import java.util.PriorityQueue;
@@ -125,7 +125,7 @@ public void testRekey()
     @Test
     public void testSize()
     {
-        PriorityQueue<EdgeEntry> juQueue = new PriorityQueue<EdgeEntry>(100);
+        PriorityQueue<SPTEntry> juQueue = new PriorityQueue<SPTEntry>(100);
         BinHeapWrapper<Number, Integer> binHeap = createHeap(100);
 
         Random rand = new Random(1);
@@ -134,7 +134,7 @@ public void testSize()
         {
             int val = rand.nextInt();
             binHeap.insert(val, i);
-            juQueue.add(new EdgeEntry(EdgeIterator.NO_EDGE, i, val));
+            juQueue.add(new SPTEntry(EdgeIterator.NO_EDGE, i, val));
         }
 
         assertEquals(juQueue.size(), binHeap.getSize());
diff --git a/core/src/test/java/com/graphhopper/reader/OSMTagParserTest.java b/core/src/test/java/com/graphhopper/reader/OSMTagParserTest.java
index 8e0691eab9..d49b24b8ef 100644
--- a/core/src/test/java/com/graphhopper/reader/OSMTagParserTest.java
+++ b/core/src/test/java/com/graphhopper/reader/OSMTagParserTest.java
@@ -30,7 +30,7 @@
 {
     @Test
     public void testParseDuration()
-    {
+    {        
         assertEquals(10 * 60, OSMTagParser.parseDuration("00:10"));
         assertEquals(35 * 60, OSMTagParser.parseDuration("35"));
         assertEquals(70 * 60, OSMTagParser.parseDuration("01:10"));
@@ -40,11 +40,8 @@ public void testParseDuration()
         assertEquals(20 * 60, OSMTagParser.parseDuration("0:20:00"));
         assertEquals((60 * 2 + 20) * 60 + 2, OSMTagParser.parseDuration("02:20:02"));
 
-        // two months, see #588
-        // 28+31
-        assertTrue(2 * 28 * 24 * 60 * 60 <= OSMTagParser.parseDuration("P2M"));
-        // 31+31
-        assertTrue(2 * 31 * 24 * 60 * 60 >= OSMTagParser.parseDuration("P2M"));
+        // two months
+        assertEquals(31 + 31, OSMTagParser.parseDuration("P2M") / (24 * 60 * 60));
 
         // two minutes
         assertEquals(2 * 60, OSMTagParser.parseDuration("PT2M"));
diff --git a/core/src/test/java/com/graphhopper/reader/osm/CalendarBasedTest.java b/core/src/test/java/com/graphhopper/reader/osm/CalendarBasedTest.java
new file mode 100644
index 0000000000..deb9224833
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osm/CalendarBasedTest.java
@@ -0,0 +1,39 @@
+/*
+ *  Licensed to GraphHopper and Peter Karich under one or more contributor
+ *  license agreements. See the NOTICE file distributed with this work for
+ *  additional information regarding copyright ownership.
+ *
+ *  GraphHopper licenses this file to you under the Apache License,
+ *  Version 2.0 (the "License"); you may not use this file except in
+ *  compliance with the License. You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package com.graphhopper.reader.osm;
+
+import java.util.Calendar;
+
+/**
+ * Base Test for calendar based tasks.
+ *
+ * @author Robin Boldt
+ */
+public abstract class CalendarBasedTest
+{
+
+    protected Calendar getCalendar( int year, int month, int day )
+    {
+        Calendar calendar = Calendar.getInstance();
+        calendar.set(Calendar.YEAR, year);
+        calendar.set(Calendar.MONTH, month);
+        calendar.set(Calendar.DAY_OF_MONTH, day);
+        return calendar;
+    }
+
+}
diff --git a/core/src/test/java/com/graphhopper/reader/osm/ConditionalTagsInspectorTest.java b/core/src/test/java/com/graphhopper/reader/osm/ConditionalTagsInspectorTest.java
new file mode 100644
index 0000000000..208900cedf
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osm/ConditionalTagsInspectorTest.java
@@ -0,0 +1,133 @@
+/*
+ *  Licensed to GraphHopper and Peter Karich under one or more contributor
+ *  license agreements. See the NOTICE file distributed with this work for 
+ *  additional information regarding copyright ownership.
+ * 
+ *  GraphHopper licenses this file to you under the Apache License, 
+ *  Version 2.0 (the "License"); you may not use this file except in 
+ *  compliance with the License. You may obtain a copy of the License at
+ * 
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package com.graphhopper.reader.osm;
+
+import com.graphhopper.reader.OSMWay;
+import org.junit.Test;
+
+import java.util.*;
+
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
+/**
+ * @author Robin Boldt
+ */
+public class ConditionalTagsInspectorTest extends CalendarBasedTest
+{
+    @Test
+    public void testConditionalAccept()
+    {
+        Calendar cal = getCalendar(2014, Calendar.MARCH, 10);
+        ConditionalTagsInspector acceptor = new ConditionalTagsInspector(cal, getSampleConditionalTags(), getSampleRestrictedValues(), getSamplePermissiveValues());
+        OSMWay way = new OSMWay(1);
+        way.setTag("vehicle:conditional", "no @ (Aug 10-Aug 14)");
+        assertFalse(acceptor.isPermittedWayConditionallyRestricted(way));
+    }
+
+    @Test
+    public void testConditionalAcceptNextYear()
+    {
+        Calendar cal = getCalendar(2014, Calendar.MARCH, 10);
+        ConditionalTagsInspector acceptor = new ConditionalTagsInspector(cal, getSampleConditionalTags(), getSampleRestrictedValues(), getSamplePermissiveValues());
+        OSMWay way = new OSMWay(1);
+        way.setTag("vehicle:conditional", "no @ (2013 Mar 1-2013 Mar 31)");
+        assertFalse(acceptor.isPermittedWayConditionallyRestricted(way));
+    }
+
+    @Test
+    public void testConditionalReject()
+    {
+        Calendar cal = getCalendar(2014, Calendar.MARCH, 10);
+        ConditionalTagsInspector acceptor = new ConditionalTagsInspector(cal, getSampleConditionalTags(), getSampleRestrictedValues(), getSamplePermissiveValues());
+        OSMWay way = new OSMWay(1);
+        way.setTag("vehicle:conditional", "no @ (Mar 10-Aug 14)");
+        assertTrue(acceptor.isPermittedWayConditionallyRestricted(way));
+    }
+
+    @Test
+    public void testConditionalAllowance()
+    {
+        Calendar cal = getCalendar(2014, Calendar.MARCH, 10);
+        ConditionalTagsInspector acceptor = new ConditionalTagsInspector(cal, getSampleConditionalTags(), getSampleRestrictedValues(), getSamplePermissiveValues());
+        OSMWay way = new OSMWay(1);
+        way.setTag("vehicle:conditional", "yes @ (Mar 10-Aug 14)");
+        assertTrue(acceptor.isRestrictedWayConditionallyPermitted(way));
+    }
+
+    @Test
+    public void testConditionalAllowanceReject()
+    {
+        Calendar cal = getCalendar(2014, Calendar.MARCH, 10);
+        ConditionalTagsInspector acceptor = new ConditionalTagsInspector(cal, getSampleConditionalTags(), getSampleRestrictedValues(), getSamplePermissiveValues());
+        OSMWay way = new OSMWay(1);
+        way.setTag("vehicle:conditional", "no @ (Mar 10-Aug 14)");
+        assertTrue(acceptor.isPermittedWayConditionallyRestricted(way));
+    }
+
+    @Test
+    public void testConditionalSingleDay()
+    {
+        Calendar cal = getCalendar(2015, Calendar.DECEMBER, 27);
+        ConditionalTagsInspector acceptor = new ConditionalTagsInspector(cal, getSampleConditionalTags(), getSampleRestrictedValues(), getSamplePermissiveValues());
+        OSMWay way = new OSMWay(1);
+        way.setTag("vehicle:conditional", "no @ (Su)");
+        assertTrue(acceptor.isPermittedWayConditionallyRestricted(way));
+    }
+
+    @Test
+    public void testConditionalAllowanceSingleDay()
+    {
+        Calendar cal = getCalendar(2015, Calendar.DECEMBER, 27);
+        ConditionalTagsInspector acceptor = new ConditionalTagsInspector(cal, getSampleConditionalTags(), getSampleRestrictedValues(), getSamplePermissiveValues());
+        OSMWay way = new OSMWay(1);
+        way.setTag("vehicle:conditional", "yes @ (Su)");
+        assertTrue(acceptor.isRestrictedWayConditionallyPermitted(way));
+    }
+
+    private static Set<String> getSampleRestrictedValues()
+    {
+        Set<String> restrictedValues = new HashSet<String>();
+        restrictedValues.add("private");
+        restrictedValues.add("agricultural");
+        restrictedValues.add("forestry");
+        restrictedValues.add("no");
+        restrictedValues.add("restricted");
+        restrictedValues.add("delivery");
+        restrictedValues.add("military");
+        restrictedValues.add("emergency");
+        return restrictedValues;
+    }
+
+    private static Set<String> getSamplePermissiveValues()
+    {
+        Set<String> restrictedValues = new HashSet<String>();
+        restrictedValues.add("yes");
+        restrictedValues.add("permissive");
+        return restrictedValues;
+    }
+
+    private static List<String> getSampleConditionalTags()
+    {
+        List<String> conditionalTags = new ArrayList<String>();
+        conditionalTags.add("vehicle");
+        conditionalTags.add("access");
+        return conditionalTags;
+    }
+
+}
diff --git a/core/src/test/java/com/graphhopper/reader/osm/conditional/ConditionalParserTest.java b/core/src/test/java/com/graphhopper/reader/osm/conditional/ConditionalParserTest.java
new file mode 100644
index 0000000000..f401427ebf
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osm/conditional/ConditionalParserTest.java
@@ -0,0 +1,80 @@
+/*
+ *  Licensed to GraphHopper and Peter Karich under one or more contributor
+ *  license agreements. See the NOTICE file distributed with this work for 
+ *  additional information regarding copyright ownership.
+ * 
+ *  GraphHopper licenses this file to you under the Apache License, 
+ *  Version 2.0 (the "License"); you may not use this file except in 
+ *  compliance with the License. You may obtain a copy of the License at
+ * 
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package com.graphhopper.reader.osm.conditional;
+
+import com.graphhopper.reader.OSMWay;
+import com.graphhopper.reader.osm.CalendarBasedTest;
+import com.graphhopper.reader.osm.ConditionalTagsInspector;
+import org.junit.Before;
+import org.junit.Test;
+
+import java.text.ParseException;
+import java.util.Calendar;
+import java.util.HashSet;
+
+import static org.junit.Assert.*;
+
+/**
+ * @author Robin Boldt
+ */
+public class ConditionalParserTest extends CalendarBasedTest
+{
+
+    ConditionalParser parser;
+
+    @Before
+    public void setup()
+    {
+        HashSet<String> restrictedValues = new HashSet<String>();
+        restrictedValues.add("private");
+        restrictedValues.add("agricultural");
+        restrictedValues.add("forestry");
+        restrictedValues.add("no");
+        restrictedValues.add("restricted");
+        restrictedValues.add("delivery");
+        restrictedValues.add("military");
+        restrictedValues.add("emergency");
+
+        parser = new ConditionalParser(restrictedValues);
+    }
+
+    @Test
+    public void testParseConditional() throws ParseException
+    {
+        DateRange dateRange = parser.getDateRange("no @ (2015 Sep 1-2015 Sep 30)");
+        assertFalse(dateRange.isInRange(getCalendar(2015, Calendar.AUGUST, 31)));
+        assertTrue(dateRange.isInRange(getCalendar(2015, Calendar.SEPTEMBER, 30)));
+    }
+
+    @Test
+    public void testParseAllowingCondition() throws ParseException
+    {
+        DateRange dateRange = parser.getDateRange("yes @ (2015 Sep 1-2015 Sep 30)");
+        assertNull(dateRange);
+    }
+
+    @Test
+    public void testParsingOfLeading0() throws ParseException
+    {
+        DateRange dateRange = parser.getDateRange("no @ (01.11. - 31.03.)");
+        assertTrue(dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 2)));
+        
+        dateRange = parser.getDateRange("no @ (01.11 - 31.03)");
+        assertTrue(dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 2)));
+    }
+}
diff --git a/core/src/test/java/com/graphhopper/reader/osm/conditional/DateRangeParserTest.java b/core/src/test/java/com/graphhopper/reader/osm/conditional/DateRangeParserTest.java
new file mode 100644
index 0000000000..8d7147ab4d
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osm/conditional/DateRangeParserTest.java
@@ -0,0 +1,221 @@
+/*
+ *  Licensed to GraphHopper and Peter Karich under one or more contributor
+ *  license agreements. See the NOTICE file distributed with this work for 
+ *  additional information regarding copyright ownership.
+ * 
+ *  GraphHopper licenses this file to you under the Apache License, 
+ *  Version 2.0 (the "License"); you may not use this file except in 
+ *  compliance with the License. You may obtain a copy of the License at
+ * 
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ * 
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package com.graphhopper.reader.osm.conditional;
+
+import com.graphhopper.reader.osm.CalendarBasedTest;
+import org.junit.Test;
+
+import java.text.ParseException;
+import java.util.Calendar;
+
+import static org.junit.Assert.*;
+
+/**
+ * @author Robin Boldt
+ */
+public class DateRangeParserTest extends CalendarBasedTest
+{
+    @Test
+    public void testParseConditional() throws ParseException
+    {
+        assertSameDate(2014, Calendar.DECEMBER, 15, "2014 Dec 15");
+        assertSameDate(2015, Calendar.MARCH, 2, "2015 Mar 2");
+        assertSameDate(2015, Calendar.MARCH, 1, "2015 Mar");
+        assertSameDate(1970, Calendar.MARCH, 31, "Mar 31");
+        assertSameDate(1970, Calendar.DECEMBER, 1, "Dec");
+    }
+
+    @Test
+    public void testParseSimpleDateRange() throws ParseException
+    {
+        DateRange dateRange = DateRangeParser.parseDateRange("2014 Aug 10-2014 Aug 14");
+        assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 9)));
+        assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 10)));
+        assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 12)));
+        assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 14)));
+        assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 15)));
+    }
+
+    @Test
+    public void testParseSimpleDateRangeWithoutYear() throws ParseException
+    {
+        DateRange dateRange = DateRangeParser.parseDateRange("Aug 10-Aug 14");
+        assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 9)));
+        assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 10)));
+        assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 12)));
+        assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 14)));
+        assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 15)));
+    }
+
+    @Test
+    public void testParseSimpleDateRangeWithoutYearAndDay() throws ParseException
+    {
+        DateRange dateRange = DateRangeParser.parseDateRange("Jul-Aug");
+        assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.JUNE, 9)));
+        assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.JULY, 10)));
+        assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 12)));
+        assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.SEPTEMBER, 14)));
+    }
+
+    @Test
+    public void testParseSimpleDateRangeWithoutYearAndDay2() throws ParseException
+    {
+        DateRange dateRange = DateRangeParser.parseDateRange("Mar-Sep");
+        assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.FEBRUARY, 25)));
+        assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.MARCH, 1)));
+        assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.SEPTEMBER, 30)));
+        assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.NOVEMBER, 1)));
+    }
+
+    @Test
+    public void testParseReverseDateRange() throws ParseException
+    {
+        DateRange dateRange = DateRangeParser.parseDateRange("2014 Aug 14-2015 Mar 10");
+        assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 13)));
+        assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 14)));
+        assertTrue(dateRange.isInRange(getCalendar(2015, Calendar.MARCH, 10)));
+        assertFalse(dateRange.isInRange(getCalendar(2015, Calendar.MARCH, 11)));
+    }
+
+    @Test
+    public void testParseReverseDateRangeWithoutYear() throws ParseException
+    {
+        DateRange dateRange = DateRangeParser.parseDateRange("Aug 14-Aug 10");
+        assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.JANUARY, 9)));
+        assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 9)));
+        assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 10)));
+        assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 12)));
+        assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 14)));
+        assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 15)));
+        assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.SEPTEMBER, 15)));
+    }
+
+    @Test
+    public void testParseReverseDateRangeWithoutYearAndDay() throws ParseException
+    {
+        DateRange dateRange = DateRangeParser.parseDateRange("Sep-Mar");
+        assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 31)));
+        assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.SEPTEMBER, 1)));
+        assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.DECEMBER, 24)));
+        assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.JANUARY, 24)));
+        assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.MARCH, 31)));
+        assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.APRIL, 1)));
+    }
+
+    @Test
+    public void testParseReverseDateRangeWithoutYearAndDay_645() throws ParseException
+    {
+        DateRange dateRange = DateRangeParser.parseDateRange("Aug 10-Jan");
+        assertFalse(dateRange.isInRange(getCalendar(2016, Calendar.AUGUST, 9)));
+        assertTrue(dateRange.isInRange(getCalendar(2016, Calendar.AUGUST, 10)));
+        assertTrue(dateRange.isInRange(getCalendar(2016, Calendar.JANUARY, 1)));
+        assertTrue(dateRange.isInRange(getCalendar(2016, Calendar.JANUARY, 20)));
+        assertTrue(dateRange.isInRange(getCalendar(2016, Calendar.JANUARY, 31)));        
+        assertFalse(dateRange.isInRange(getCalendar(2016, Calendar.FEBRUARY, 1)));
+    }
+
+    @Test
+    public void testParseSingleDateRange() throws ParseException
+    {
+        DateRange dateRange = DateRangeParser.parseDateRange("2014 Sep 1");
+        assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 31)));
+        assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.SEPTEMBER, 1)));
+        assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.SEPTEMBER, 30)));
+        assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.OCTOBER, 1)));
+        assertFalse(dateRange.isInRange(getCalendar(2015, Calendar.SEPTEMBER, 1)));
+    }
+
+    @Test
+    public void testParseSingleDateRangeWithoutDay() throws ParseException
+    {
+        DateRange dateRange = DateRangeParser.parseDateRange("2014 Sep");
+        assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 31)));
+        assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.SEPTEMBER, 1)));
+        assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.SEPTEMBER, 30)));
+        assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.OCTOBER, 1)));
+        assertFalse(dateRange.isInRange(getCalendar(2015, Calendar.SEPTEMBER, 1)));
+    }
+
+    @Test
+    public void testParseSingleDateRangeWithoutYearAndDay() throws ParseException
+    {
+        DateRange dateRange = DateRangeParser.parseDateRange("Sep");
+        assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.AUGUST, 31)));
+        assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.SEPTEMBER, 1)));
+        assertTrue(dateRange.isInRange(getCalendar(2014, Calendar.SEPTEMBER, 30)));
+        assertFalse(dateRange.isInRange(getCalendar(2014, Calendar.OCTOBER, 1)));
+    }
+
+    @Test
+    public void testParseSingleDateRangeOneDayOnly() throws ParseException
+    {
+        DateRange dateRange = DateRangeParser.parseDateRange("Sa");
+        assertFalse(dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 25)));
+        assertTrue(dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 26)));
+        assertFalse(dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 27)));
+    }
+
+    @Test
+    public void testParseSingleDateRangeOneDayOnlyIncludingPh() throws ParseException
+    {
+        DateRange dateRange = DateRangeParser.parseDateRange("Su, PH");
+        assertFalse(dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 26)));
+        assertTrue(dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 27)));
+        assertFalse(dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 28)));
+    }
+
+    @Test
+    public void testParseSingleDateRangeDayOnly() throws ParseException
+    {
+        DateRange dateRange = DateRangeParser.parseDateRange("Mo-Fr");
+        assertFalse(dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 20)));
+        assertTrue(dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 21)));
+        assertTrue(dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 25)));
+        assertFalse(dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 26)));
+        assertTrue(dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 28)));
+    }
+
+    @Test
+    public void testParseReverseDateRangeDayOnly() throws ParseException
+    {
+        // This is reverse since Sa=7 and So=1
+        DateRange dateRange = DateRangeParser.parseDateRange("Sa-Su");
+        assertFalse(dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 25)));
+        assertTrue(dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 26)));
+        assertTrue(dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 27)));
+        assertFalse(dateRange.isInRange(getCalendar(2015, Calendar.DECEMBER, 28)));
+    }
+
+    @Test(expected = ParseException.class)
+    public void testParseUnparsableDate() throws ParseException
+    {
+        DateRangeParser.parseDateRange("Sat");
+        fail();
+    }
+
+    private void assertSameDate( int year, int month, int day, String dateString ) throws ParseException
+    {
+        Calendar expected = getCalendar(year, month, day);
+        ParsedCalendar actualParsed = DateRangeParser.parseDateString(dateString);
+        Calendar actual = actualParsed.parsedCalendar;
+        assertEquals(expected.get(Calendar.YEAR), actual.get(Calendar.YEAR));
+        assertEquals(expected.get(Calendar.MONTH), actual.get(Calendar.MONTH));
+        assertEquals(expected.get(Calendar.DAY_OF_MONTH), actual.get(Calendar.DAY_OF_MONTH));
+    }
+
+}
diff --git a/core/src/test/java/com/graphhopper/routing/PathBidirRefTest.java b/core/src/test/java/com/graphhopper/routing/PathBidirRefTest.java
index caa7680d98..c3486fd090 100644
--- a/core/src/test/java/com/graphhopper/routing/PathBidirRefTest.java
+++ b/core/src/test/java/com/graphhopper/routing/PathBidirRefTest.java
@@ -18,7 +18,7 @@
 package com.graphhopper.routing;
 
 import com.graphhopper.routing.util.*;
-import com.graphhopper.storage.EdgeEntry;
+import com.graphhopper.storage.SPTEntry;
 import com.graphhopper.storage.Graph;
 import com.graphhopper.storage.GraphBuilder;
 import com.graphhopper.util.EdgeExplorer;
@@ -52,9 +52,9 @@ public void testExtract()
         EdgeExplorer explorer = g.createEdgeExplorer(carOutEdges);
         EdgeIterator iter = explorer.setBaseNode(1);
         iter.next();
-        pw.edgeEntry = new EdgeEntry(iter.getEdge(), 2, 0);
-        pw.edgeEntry.parent = new EdgeEntry(EdgeIterator.NO_EDGE, 1, 10);
-        pw.edgeTo = new EdgeEntry(EdgeIterator.NO_EDGE, 2, 0);
+        pw.edgeEntry = new SPTEntry(iter.getEdge(), 2, 0);
+        pw.edgeEntry.parent = new SPTEntry(EdgeIterator.NO_EDGE, 1, 10);
+        pw.edgeTo = new SPTEntry(EdgeIterator.NO_EDGE, 2, 0);
         Path p = pw.extract();
         assertEquals(Helper.createTList(1, 2), p.calcNodes());
         assertEquals(10, p.getDistance(), 1e-4);
@@ -70,14 +70,14 @@ public void testExtract2()
         EdgeIterator iter = explorer.setBaseNode(1);
         iter.next();
         PathBidirRef pw = new PathBidirRef(g, carEncoder);
-        pw.edgeEntry = new EdgeEntry(iter.getEdge(), 2, 10);
-        pw.edgeEntry.parent = new EdgeEntry(EdgeIterator.NO_EDGE, 1, 0);
+        pw.edgeEntry = new SPTEntry(iter.getEdge(), 2, 10);
+        pw.edgeEntry.parent = new SPTEntry(EdgeIterator.NO_EDGE, 1, 0);
 
         explorer = g.createEdgeExplorer(new DefaultEdgeFilter(carEncoder, true, false));
         iter = explorer.setBaseNode(3);
         iter.next();
-        pw.edgeTo = new EdgeEntry(iter.getEdge(), 2, 20);
-        pw.edgeTo.parent = new EdgeEntry(EdgeIterator.NO_EDGE, 3, 0);
+        pw.edgeTo = new SPTEntry(iter.getEdge(), 2, 20);
+        pw.edgeTo.parent = new SPTEntry(EdgeIterator.NO_EDGE, 3, 0);
         Path p = pw.extract();
         assertEquals(Helper.createTList(1, 2, 3), p.calcNodes());
         assertEquals(30, p.getDistance(), 1e-4);
diff --git a/core/src/test/java/com/graphhopper/routing/PathTest.java b/core/src/test/java/com/graphhopper/routing/PathTest.java
index 1085b7636a..8c6b5038b9 100644
--- a/core/src/test/java/com/graphhopper/routing/PathTest.java
+++ b/core/src/test/java/com/graphhopper/routing/PathTest.java
@@ -26,7 +26,7 @@
 import com.graphhopper.util.EdgeIteratorState;
 import com.graphhopper.util.Instruction;
 import com.graphhopper.util.InstructionList;
-import com.graphhopper.storage.EdgeEntry;
+import com.graphhopper.storage.SPTEntry;
 import com.graphhopper.util.*;
 
 import java.util.*;
@@ -89,9 +89,9 @@ public void testWayList()
         edge2.setWayGeometry(Helper.createPointList(11, 1, 10, 1));
 
         Path path = new Path(g, encoder);
-        EdgeEntry e1 = new EdgeEntry(edge2.getEdge(), 2, 1);
-        e1.parent = new EdgeEntry(edge1.getEdge(), 1, 1);
-        e1.parent.parent = new EdgeEntry(-1, 0, 1);
+        SPTEntry e1 = new SPTEntry(edge2.getEdge(), 2, 1);
+        e1.parent = new SPTEntry(edge1.getEdge(), 1, 1);
+        e1.parent.parent = new SPTEntry(-1, 0, 1);
         path.setEdgeEntry(e1);
         path.extract();
         // 0-1-2
@@ -115,9 +115,9 @@ public void testWayList()
         // force minor change for instructions
         edge2.setName("2");
         path = new Path(g, encoder);
-        e1 = new EdgeEntry(edge2.getEdge(), 2, 1);
-        e1.parent = new EdgeEntry(edge1.getEdge(), 1, 1);
-        e1.parent.parent = new EdgeEntry(-1, 0, 1);
+        e1 = new SPTEntry(edge2.getEdge(), 2, 1);
+        e1.parent = new SPTEntry(edge1.getEdge(), 1, 1);
+        e1.parent.parent = new SPTEntry(-1, 0, 1);
         path.setEdgeEntry(e1);
         path.extract();
         instr = path.calcInstructions(tr);
@@ -139,9 +139,9 @@ public void testWayList()
 
         // now reverse order
         path = new Path(g, encoder);
-        e1 = new EdgeEntry(edge1.getEdge(), 0, 1);
-        e1.parent = new EdgeEntry(edge2.getEdge(), 1, 1);
-        e1.parent.parent = new EdgeEntry(-1, 2, 1);
+        e1 = new SPTEntry(edge1.getEdge(), 0, 1);
+        e1.parent = new SPTEntry(edge2.getEdge(), 1, 1);
+        e1.parent.parent = new SPTEntry(-1, 2, 1);
         path.setEdgeEntry(e1);
         path.extract();
         // 2-1-0
@@ -189,11 +189,11 @@ public void testFindInstruction()
         edge4.setName("Street 4");
 
         Path path = new Path(g, encoder);
-        EdgeEntry e1 = new EdgeEntry(edge4.getEdge(), 4, 1);
-        e1.parent = new EdgeEntry(edge3.getEdge(), 3, 1);
-        e1.parent.parent = new EdgeEntry(edge2.getEdge(), 2, 1);
-        e1.parent.parent.parent = new EdgeEntry(edge1.getEdge(), 1, 1);
-        e1.parent.parent.parent.parent = new EdgeEntry(-1, 0, 1);
+        SPTEntry e1 = new SPTEntry(edge4.getEdge(), 4, 1);
+        e1.parent = new SPTEntry(edge3.getEdge(), 3, 1);
+        e1.parent.parent = new SPTEntry(edge2.getEdge(), 2, 1);
+        e1.parent.parent.parent = new SPTEntry(edge1.getEdge(), 1, 1);
+        e1.parent.parent.parent.parent = new SPTEntry(-1, 0, 1);
         path.setEdgeEntry(e1);
         path.extract();
 
diff --git a/core/src/test/java/com/graphhopper/routing/util/AbstractBikeFlagEncoderTester.java b/core/src/test/java/com/graphhopper/routing/util/AbstractBikeFlagEncoderTester.java
index 2f9d07c215..83153f2fec 100644
--- a/core/src/test/java/com/graphhopper/routing/util/AbstractBikeFlagEncoderTester.java
+++ b/core/src/test/java/com/graphhopper/routing/util/AbstractBikeFlagEncoderTester.java
@@ -19,20 +19,18 @@
 
 import com.graphhopper.reader.OSMNode;
 import com.graphhopper.reader.OSMWay;
-
-import static com.graphhopper.routing.util.PriorityCode.*;
-
 import com.graphhopper.util.Translation;
+import org.junit.Before;
+import org.junit.Test;
 
-import static com.graphhopper.util.TranslationMapTest.SINGLETON;
-
+import java.text.SimpleDateFormat;
+import java.util.Calendar;
 import java.util.Locale;
 
+import static com.graphhopper.routing.util.PriorityCode.*;
+import static com.graphhopper.util.TranslationMapTest.SINGLETON;
 import static org.junit.Assert.*;
 
-import org.junit.Before;
-import org.junit.Test;
-
 /**
  * @author Peter Karich
  * @author ratrun
@@ -174,6 +172,20 @@ public void testAccess()
         way.setTag("cycleway", "track");
         way.setTag("railway", "abandoned");
         assertTrue(encoder.acceptWay(way) > 0);
+
+        Calendar calendar = Calendar.getInstance();
+        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy MMM dd");
+
+        way.clearTags();
+        way.setTag("highway", "road");
+        way.setTag("bicycle:conditional", "no @ (" + simpleDateFormat.format(calendar.getTime()) + ")");
+        assertFalse(encoder.acceptWay(way) > 0);
+
+        way.clearTags();
+        way.setTag("highway", "road");
+        way.setTag("access", "no");
+        way.setTag("bicycle:conditional", "yes @ (" + simpleDateFormat.format(calendar.getTime()) + ")");
+        assertTrue(encoder.acceptWay(way) > 0);
     }
 
     @Test
diff --git a/core/src/test/java/com/graphhopper/routing/util/CarFlagEncoderTest.java b/core/src/test/java/com/graphhopper/routing/util/CarFlagEncoderTest.java
index 40b4df9c82..dbf97c9135 100644
--- a/core/src/test/java/com/graphhopper/routing/util/CarFlagEncoderTest.java
+++ b/core/src/test/java/com/graphhopper/routing/util/CarFlagEncoderTest.java
@@ -21,6 +21,9 @@
 import com.graphhopper.reader.OSMWay;
 import org.junit.Test;
 
+import java.text.SimpleDateFormat;
+import java.util.Calendar;
+
 import static org.junit.Assert.*;
 
 /**
@@ -107,6 +110,20 @@ public void testAccess()
         way.setTag("highway", "service");
         way.setTag("motor_vehicle", "emergency");
         assertFalse(encoder.acceptWay(way) > 0);
+
+        Calendar calendar = Calendar.getInstance();
+        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy MMM dd");
+
+        way.clearTags();
+        way.setTag("highway", "road");
+        way.setTag("access:conditional", "no @ ("+simpleDateFormat.format(calendar.getTime())+")");
+        assertFalse(encoder.acceptWay(way) > 0);
+
+        way.clearTags();
+        way.setTag("highway", "road");
+        way.setTag("access", "no");
+        way.setTag("access:conditional", "yes @ ("+simpleDateFormat.format(calendar.getTime())+")");
+        assertTrue(encoder.acceptWay(way) > 0);
     }
 
     @Test
diff --git a/core/src/test/java/com/graphhopper/routing/util/FootFlagEncoderTest.java b/core/src/test/java/com/graphhopper/routing/util/FootFlagEncoderTest.java
index e84f759031..f91655a93b 100644
--- a/core/src/test/java/com/graphhopper/routing/util/FootFlagEncoderTest.java
+++ b/core/src/test/java/com/graphhopper/routing/util/FootFlagEncoderTest.java
@@ -26,6 +26,9 @@
 
 import org.junit.Test;
 
+import java.text.SimpleDateFormat;
+import java.util.Calendar;
+
 import static org.junit.Assert.*;
 
 /**
@@ -154,6 +157,20 @@ public void testAccess()
         assertTrue(footEncoder.acceptWay(way) > 0);
         way.setTag("foot", "no");
         assertFalse(footEncoder.acceptWay(way) > 0);
+
+        Calendar calendar = Calendar.getInstance();
+        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy MMM dd");
+
+        way.clearTags();
+        way.setTag("highway", "footway");
+        way.setTag("access:conditional", "no @ ("+simpleDateFormat.format(calendar.getTime())+")");
+        assertFalse(footEncoder.acceptWay(way) > 0);
+
+        way.clearTags();
+        way.setTag("highway", "footway");
+        way.setTag("access", "no");
+        way.setTag("access:conditional", "yes @ ("+simpleDateFormat.format(calendar.getTime())+")");
+        assertTrue(footEncoder.acceptWay(way) > 0);
     }
 
     @Test
diff --git a/core/src/test/java/com/graphhopper/routing/util/MotorcycleFlagEncoderTest.java b/core/src/test/java/com/graphhopper/routing/util/MotorcycleFlagEncoderTest.java
index 8e7934592f..e78be6226d 100644
--- a/core/src/test/java/com/graphhopper/routing/util/MotorcycleFlagEncoderTest.java
+++ b/core/src/test/java/com/graphhopper/routing/util/MotorcycleFlagEncoderTest.java
@@ -22,9 +22,11 @@
 import com.graphhopper.util.EdgeIteratorState;
 import com.graphhopper.util.GHUtility;
 import com.graphhopper.util.Helper;
-import com.graphhopper.util.PointList;
 import org.junit.Test;
 
+import java.text.SimpleDateFormat;
+import java.util.Calendar;
+
 import static org.junit.Assert.*;
 
 /**
@@ -50,6 +52,81 @@ private Graph initExampleGraph()
         return gs;
     }
 
+    @Test
+    public void testAccess()
+    {
+        OSMWay way = new OSMWay(1);
+        assertFalse(encoder.acceptWay(way) > 0);
+        way.setTag("highway", "service");
+        assertTrue(encoder.acceptWay(way) > 0);
+        way.setTag("access", "no");
+        assertFalse(encoder.acceptWay(way) > 0);
+
+        way.clearTags();
+        way.setTag("highway", "track");
+        assertTrue(encoder.acceptWay(way) > 0);
+
+        way.clearTags();
+        way.setTag("highway", "service");
+        way.setTag("access", "delivery");
+        assertFalse(encoder.acceptWay(way) > 0);
+
+        way.clearTags();
+        way.setTag("highway", "unclassified");
+        way.setTag("ford", "yes");
+        assertFalse(encoder.acceptWay(way) > 0);
+        way.setTag("motorcycle", "yes");
+        assertTrue(encoder.acceptWay(way) > 0);
+
+        way.clearTags();
+        way.setTag("route", "ferry");
+        assertTrue(encoder.acceptWay(way) > 0);
+        assertTrue(encoder.isFerry(encoder.acceptWay(way)));
+        way.setTag("motorcycle", "no");
+        assertFalse(encoder.acceptWay(way) > 0);
+
+        way.clearTags();
+        way.setTag("route", "ferry");
+        way.setTag("foot", "yes");
+        assertFalse(encoder.acceptWay(way) > 0);
+        assertFalse(encoder.isFerry(encoder.acceptWay(way)));
+
+        way.clearTags();
+        way.setTag("access", "yes");
+        way.setTag("motor_vehicle", "no");
+        assertFalse(encoder.acceptWay(way) > 0);
+
+        way.clearTags();
+        way.setTag("highway", "service");
+        way.setTag("access", "yes");
+        way.setTag("motor_vehicle", "no");
+        assertFalse(encoder.acceptWay(way) > 0);
+
+        way.clearTags();
+        way.setTag("highway", "service");
+        way.setTag("access", "emergency");
+        assertFalse(encoder.acceptWay(way) > 0);
+
+        way.clearTags();
+        way.setTag("highway", "service");
+        way.setTag("motor_vehicle", "emergency");
+        assertFalse(encoder.acceptWay(way) > 0);
+
+        Calendar calendar = Calendar.getInstance();
+        SimpleDateFormat simpleDateFormat = new SimpleDateFormat("yyyy MMM dd");
+
+        way.clearTags();
+        way.setTag("highway", "road");
+        way.setTag("access:conditional", "no @ ("+simpleDateFormat.format(calendar.getTime())+")");
+        assertFalse(encoder.acceptWay(way) > 0);
+
+        way.clearTags();
+        way.setTag("highway", "road");
+        way.setTag("access", "no");
+        way.setTag("access:conditional", "yes @ ("+simpleDateFormat.format(calendar.getTime())+")");
+        assertTrue(encoder.acceptWay(way) > 0);
+    }
+
     @Test
     public void testHandleWayTags()
     {
diff --git a/core/src/test/java/com/graphhopper/storage/EdgeTest.java b/core/src/test/java/com/graphhopper/storage/EdgeTest.java
index cdc47c664f..1fcaa2ceb4 100644
--- a/core/src/test/java/com/graphhopper/storage/EdgeTest.java
+++ b/core/src/test/java/com/graphhopper/storage/EdgeTest.java
@@ -30,13 +30,13 @@
     @Test
     public void testCloneFull()
     {
-        EdgeEntry de = new EdgeEntry(EdgeIterator.NO_EDGE, 1, 10);
-        EdgeEntry de2 = de.parent = new EdgeEntry(EdgeIterator.NO_EDGE, -2, 20);
-        EdgeEntry de3 = de2.parent = new EdgeEntry(EdgeIterator.NO_EDGE, 3, 30);
+        SPTEntry de = new SPTEntry(EdgeIterator.NO_EDGE, 1, 10);
+        SPTEntry de2 = de.parent = new SPTEntry(EdgeIterator.NO_EDGE, -2, 20);
+        SPTEntry de3 = de2.parent = new SPTEntry(EdgeIterator.NO_EDGE, 3, 30);
 
-        EdgeEntry cloning = de.cloneFull();
-        EdgeEntry tmp1 = de;
-        EdgeEntry tmp2 = cloning;
+        SPTEntry cloning = de.cloneFull();
+        SPTEntry tmp1 = de;
+        SPTEntry tmp2 = cloning;
 
         assertNotNull(tmp1);
         while (tmp1 != null)
diff --git a/tools/src/main/java/com/graphhopper/ui/DebugAStar.java b/tools/src/main/java/com/graphhopper/ui/DebugAStar.java
index 5895e43c5c..b08c11383e 100644
--- a/tools/src/main/java/com/graphhopper/ui/DebugAStar.java
+++ b/tools/src/main/java/com/graphhopper/ui/DebugAStar.java
@@ -21,7 +21,7 @@
 import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.routing.util.TraversalMode;
 import com.graphhopper.routing.util.Weighting;
-import com.graphhopper.storage.EdgeEntry;
+import com.graphhopper.storage.SPTEntry;
 import com.graphhopper.storage.Graph;
 import com.graphhopper.util.EdgeIteratorState;
 
@@ -49,7 +49,7 @@ public void setGraphics2D( Graphics2D g2 )
     }
 
     @Override
-    public void updateBestPath( EdgeIteratorState es, EdgeEntry bestEE, int currLoc )
+    public void updateBestPath( EdgeIteratorState es, SPTEntry bestEE, int currLoc )
     {
         if (g2 != null)
         {
diff --git a/tools/src/main/java/com/graphhopper/ui/DebugAStarBi.java b/tools/src/main/java/com/graphhopper/ui/DebugAStarBi.java
index 46e8609e85..c0089ebae7 100644
--- a/tools/src/main/java/com/graphhopper/ui/DebugAStarBi.java
+++ b/tools/src/main/java/com/graphhopper/ui/DebugAStarBi.java
@@ -21,7 +21,7 @@
 import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.routing.util.TraversalMode;
 import com.graphhopper.routing.util.Weighting;
-import com.graphhopper.storage.EdgeEntry;
+import com.graphhopper.storage.SPTEntry;
 import com.graphhopper.storage.Graph;
 import com.graphhopper.util.EdgeIteratorState;
 
@@ -49,7 +49,7 @@ public void setGraphics2D( Graphics2D g2 )
     }
 
     @Override
-    public void updateBestPath( EdgeIteratorState es, EdgeEntry bestEE, int currLoc )
+    public void updateBestPath( EdgeIteratorState es, SPTEntry bestEE, int currLoc )
     {
         if (g2 != null)
         {
diff --git a/tools/src/main/java/com/graphhopper/ui/DebugDijkstraBidirection.java b/tools/src/main/java/com/graphhopper/ui/DebugDijkstraBidirection.java
index 6288307fb7..1758f167d8 100644
--- a/tools/src/main/java/com/graphhopper/ui/DebugDijkstraBidirection.java
+++ b/tools/src/main/java/com/graphhopper/ui/DebugDijkstraBidirection.java
@@ -21,7 +21,7 @@
 import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.routing.util.TraversalMode;
 import com.graphhopper.routing.util.Weighting;
-import com.graphhopper.storage.EdgeEntry;
+import com.graphhopper.storage.SPTEntry;
 import com.graphhopper.storage.Graph;
 import com.graphhopper.util.EdgeIteratorState;
 
@@ -49,7 +49,7 @@ public void setGraphics2D( Graphics2D g2 )
     }
 
     @Override
-    public void updateBestPath( EdgeIteratorState es, EdgeEntry bestEE, int currLoc )
+    public void updateBestPath( EdgeIteratorState es, SPTEntry bestEE, int currLoc )
     {
         if (g2 != null)
         {
diff --git a/tools/src/main/java/com/graphhopper/ui/DebugDijkstraSimple.java b/tools/src/main/java/com/graphhopper/ui/DebugDijkstraSimple.java
index 5896045b7d..bab7452870 100644
--- a/tools/src/main/java/com/graphhopper/ui/DebugDijkstraSimple.java
+++ b/tools/src/main/java/com/graphhopper/ui/DebugDijkstraSimple.java
@@ -22,7 +22,7 @@
 import com.graphhopper.routing.util.TraversalMode;
 import com.graphhopper.routing.util.Weighting;
 import com.graphhopper.storage.Graph;
-import com.graphhopper.storage.EdgeEntry;
+import com.graphhopper.storage.SPTEntry;
 import com.graphhopper.util.EdgeIteratorState;
 
 import java.awt.Color;
@@ -49,7 +49,7 @@ public void setGraphics2D( Graphics2D g2 )
     }
 
     @Override
-    public void updateBestPath( EdgeIteratorState es, EdgeEntry bestEE, int currLoc )
+    public void updateBestPath( EdgeIteratorState es, SPTEntry bestEE, int currLoc )
     {
         if (g2 != null)
         {
diff --git a/tools/src/main/java/com/graphhopper/ui/MiniGraphUI.java b/tools/src/main/java/com/graphhopper/ui/MiniGraphUI.java
index fbf6ec3a18..e6980109a6 100644
--- a/tools/src/main/java/com/graphhopper/ui/MiniGraphUI.java
+++ b/tools/src/main/java/com/graphhopper/ui/MiniGraphUI.java
@@ -22,7 +22,7 @@
 import com.graphhopper.coll.GHTBitSet;
 import com.graphhopper.routing.*;
 import com.graphhopper.routing.util.*;
-import com.graphhopper.storage.EdgeEntry;
+import com.graphhopper.storage.SPTEntry;
 import com.graphhopper.storage.Graph;
 import com.graphhopper.storage.NodeAccess;
 import com.graphhopper.storage.index.LocationIndexTree;
@@ -560,12 +560,12 @@ public boolean finished()
             return currFrom.weight > bestPath.getWeight() && currTo.weight > bestPath.getWeight();
         }
 
-        public TIntObjectMap<EdgeEntry> getBestWeightMapFrom()
+        public TIntObjectMap<SPTEntry> getBestWeightMapFrom()
         {
             return bestWeightMapFrom;
         }
 
-        public TIntObjectMap<EdgeEntry> getBestWeightMapTo()
+        public TIntObjectMap<SPTEntry> getBestWeightMapTo()
         {
             return bestWeightMapTo;
         }
diff --git a/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java b/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
index 2675aa8383..e7e70dd878 100644
--- a/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
+++ b/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
@@ -160,7 +160,7 @@ public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes ) thr
                     + ", time0: " + Math.round(altRsp0.getTime() / 60000f) + "min"
                     + ", points0: " + altRsp0.getPoints().getSize()
                     + ", debugInfo: " + ghRsp.getDebugInfo());
-        }
+        }               
 
         if (writeGPX)
         {
@@ -178,12 +178,7 @@ public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes ) thr
         {
             Map<String, Object> map = routeSerializer.toJSON(ghRsp, calcPoints, pointsEncoded,
                     enableElevation, enableInstructions);
-
-            // deprecated - remove in 0.5
-            Object infoMap = map.get("info");
-            if (infoMap != null)
-                ((Map) infoMap).put("took", Math.round(took * 1000));
-
+            
             if (ghRsp.hasErrors())
                 writeJsonError(httpRes, SC_BAD_REQUEST, new JSONObject(map));
             else
diff --git a/web/src/main/java/com/graphhopper/http/GraphHopperWeb.java b/web/src/main/java/com/graphhopper/http/GraphHopperWeb.java
index ff67a02cf9..4fb67aacf6 100644
--- a/web/src/main/java/com/graphhopper/http/GraphHopperWeb.java
+++ b/web/src/main/java/com/graphhopper/http/GraphHopperWeb.java
@@ -128,8 +128,9 @@ public GHResponse route( GHRequest request )
             if (!tmpKey.isEmpty())
                 url += "&key=" + tmpKey;
             int altMax = request.getHints().getInt("alternative_route.max_num", 0);
-            if(altMax!=0){
-            	url += "&alternative_route.max_num=" + altMax;            	
+            if (altMax != 0)
+            {
+                url += "&alternative_route.max_num=" + altMax;
             }
 
             String str = downloader.downloadAsString(url, true);
@@ -247,15 +248,6 @@ public static AltResponse createAltResponse( JSONObject path,
                 errors.add(new RuntimeException(json.getString("message")));
                 return errors;
             }
-        } else if (json.has("info"))
-        {
-            // deprecated JSON format for errors, remove in 0.5 release
-            JSONObject jsonInfo = json.getJSONObject("info");
-            if (jsonInfo.has("errors"))
-                errorJson = jsonInfo.getJSONArray("errors");
-            else
-                return errors;
-
         } else
             return errors;
 
