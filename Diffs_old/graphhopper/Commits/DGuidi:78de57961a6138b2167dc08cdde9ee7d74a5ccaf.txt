diff --git a/config.properties b/config.properties
new file mode 100644
index 0000000000..1d8a1db5d2
--- /dev/null
+++ b/config.properties
@@ -0,0 +1,38 @@
+#################
+### OSMReader ###
+
+# graph.dataaccess=MMAP_STORE_SYNC
+graph.dataaccess=RAM_STORE
+
+# The high-resolution index is bigger and slightly slower but a lot more precise. see #17.
+# Resolution is in meter, decrease from 1000 to 500 in order to speed up queries (but will increase size)
+#index.highResolution=-1
+index.highResolution=500
+
+
+# use contraction hierarchies to speed things up. requires more RAM/disc space for holding the graph
+# uncomment this if you need more control of you algorithm. then use graphhopper.chShortcuts(false, false)
+prepare.chShortcuts=fastest
+
+# advanced options:
+# prepare.updates.periodic=3
+# prepare.updates.lazy=10
+# prepare.updates.neighbor=20
+
+
+# increase from 1 to 5, to reduce way geometry e.g. for android
+osmreader.wayPointMaxDistance=1
+
+# possible options: CAR,FOOT,BIKE,MTB,RACINGBIKE (comma separated)
+# when using two or three option together remeber to set "prepare.chShortcuts=no" above
+osmreader.acceptWay=FOOT
+
+# if you want to reduce storage size and you don't need instructions for a path uncomment this
+# osmreader.instructions=false
+
+### default algorithm can be overwritten via the URL parameter &algorithm=<algo>
+### if you use fast routing you have to use dijkstrabi (bidirectional dijkstra)
+#web.defaultAlgorithm=astarbi
+#web.defaultAlgorithm=astar
+routing.defaultAlgorithm=dijkstrabi
+
diff --git a/web/src/main/java/com/graphhopper/http/GuiceServletConfig.java b/web/src/main/java/com/graphhopper/http/GuiceServletConfig.java
index 25047c67b6..5ab455f52f 100644
--- a/web/src/main/java/com/graphhopper/http/GuiceServletConfig.java
+++ b/web/src/main/java/com/graphhopper/http/GuiceServletConfig.java
@@ -63,7 +63,7 @@ protected void configureServlets()
                         + "application/javascript,"
                         + "image/svg+xml");
 
-                filter("/*").through(MyGZIPHook.class, params);
+                // filter("/*").through(MyGZIPHook.class, params);
                 bind(MyGZIPHook.class).in(Singleton.class);
 
                 serve("/api/i18n*").with(I18NServlet.class);
