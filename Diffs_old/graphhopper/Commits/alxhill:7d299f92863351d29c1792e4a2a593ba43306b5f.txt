diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/Marmoset.java b/marmoset/src/main/java/com/graphhopper/marmoset/Marmoset.java
index 44162dafe4..2a70e8c7a8 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/Marmoset.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/Marmoset.java
@@ -43,7 +43,10 @@ public static void main(String[] args) throws IOException, InterruptedException
             startWebSocketServer();
         } else if (args[0].equals("--file")) {
             serverEnabled = false;
-            initialiseMetrics(args[1]);
+            String name = args[1];
+            if (args.length > 2)
+                name += "-" + args[2];
+            initialiseMetrics(name);
             runOfflineSimulation(Integer.parseInt(args[1]));
             logger.info("Simulation complete.");
             return;
@@ -95,9 +98,18 @@ private static void initialiseMetrics(String name) throws FileNotFoundException,
     private static void runOfflineSimulation(int initialVehicles) throws IOException
     {
         start(initialVehicles);
+        int vehCount = mh.getVehicleCount();
         while (mh.getVehicleCount() > 0)
         {
             nextTimestep();
+            // termination conditions so it doesn't loop endlessly if one or two get stuck
+            if (vehCount == mh.getVehicleCount() &&
+                    mh.getMetrics().averageCells == 0 &&
+                    vehCount < 50)
+            {
+                logger.info("Terminating early due to permanent loop occurring");
+                break;
+            }
         }
         EventManager.trigger("offline:stop");
     }
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/util/ExpectedWeighting.java b/marmoset/src/main/java/com/graphhopper/marmoset/util/ExpectedWeighting.java
index 6c6bf43351..3ccb58798a 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/util/ExpectedWeighting.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/util/ExpectedWeighting.java
@@ -1,6 +1,7 @@
 package com.graphhopper.marmoset.util;
 
 import com.graphhopper.marmoset.vehicle.SelfDrivingVehicle;
+import com.graphhopper.marmoset.vehicle.SelfDrivingVehicleIterator;
 import com.graphhopper.routing.util.FastestWeighting;
 import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.util.EdgeIteratorState;
@@ -38,14 +39,6 @@ public double calcWeight(EdgeIteratorState edge, boolean reverse, int prevOrNext
             if (expectedVehicles > 0)
             {
                 double density = 1000 * expectedVehicles / edge.getDistance();
-
-//                if (Math.random() < 0.0001)
-//                {
-//                    logger.info(String.format(
-//                            "ev: %.2f, dns: %.2f, dst: %.2f, spd: %.2f, exp: %.2f",
-//                            expectedVehicles, density, edge.getDistance(), speed, speed * densityFunction(density)));
-//                }
-
                 speed *= densityFunction(density);
             }
         }
@@ -66,14 +59,18 @@ public void updateExpectedMap(double dampingFactor, List<SelfDrivingVehicle> veh
                 expectedRoutes[i] *= dampingFactor;
             }
 
-            List<List<EdgeIteratorState>> routes = vehicles.stream().map(SelfDrivingVehicle::getCurrentPath).collect(Collectors.toList());
-            for (List<EdgeIteratorState> route : routes)
+            List<SelfDrivingVehicleIterator> routes = vehicles.stream()
+                    .map(SelfDrivingVehicle::getCurrentPath).collect(Collectors.toList());
+            for (SelfDrivingVehicleIterator route : routes)
             {
-                for (int i = 0; i < route.size(); i++)
+                int i = 0;
+                double totalLen = route.getRemainingEdges();
+                while (route.next())
                 {
-                    int edge = route.get(i).getEdge();
+                    i++;
+                    int edge = route.getEdge();
                     if (edge < expectedRoutes.length)
-                        expectedRoutes[edge] += progressFunction(i / (double) route.size());
+                        expectedRoutes[edge] += progressFunction(i / totalLen);
                 }
             }
         }
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/MultiSDVController.java b/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/MultiSDVController.java
index 175c9d39e7..b0ec26a58a 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/MultiSDVController.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/MultiSDVController.java
@@ -44,10 +44,6 @@ public MultiSDVController(ExpectedWeighting expectedWeighting)
     public void timestepHandler(int iteration)
     {
         ExecutorService es = Executors.newFixedThreadPool(Runtime.getRuntime().availableProcessors());
-//        vehicles.stream().filter(v -> rerouteRand.nextDouble() <= REROUTE_PROBABILITY).map(v -> {
-//            logger.info("Rerouting vehicle " + v.id);
-//            return (Runnable) v::recalculateRoute;
-//        }).forEach(es::submit);
 
         int rerouteCount = (int) (REROUTE_PROBABILITY * vehicles.size());
         for (int i = 0; i < rerouteCount; i++)
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/SelfDrivingVehicle.java b/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/SelfDrivingVehicle.java
index befc0e4739..9cd713507b 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/SelfDrivingVehicle.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/SelfDrivingVehicle.java
@@ -39,9 +39,9 @@ public VehicleIterator getVehicleIterator()
         return new SelfDrivingVehicleIterator(edgeList, carEncoder);
     }
 
-    public List<EdgeIteratorState> getCurrentPath()
+    public SelfDrivingVehicleIterator getCurrentPath()
     {
-        return edgeList;
+        return (SelfDrivingVehicleIterator) route.duplicate();
     }
 
     public void recalculateRoute()
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/SelfDrivingVehicleIterator.java b/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/SelfDrivingVehicleIterator.java
index 8769d2acf0..b76e171916 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/SelfDrivingVehicleIterator.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/SelfDrivingVehicleIterator.java
@@ -21,4 +21,9 @@ public void resetEdges(List<EdgeIteratorState> edgeList)
         this.edges = edgeList;
         edges.remove(edges.size() - 1);
     }
+
+    public int getRemainingEdges()
+    {
+        return edges.size() - index;
+    }
 }
