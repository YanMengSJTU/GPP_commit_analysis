diff --git a/core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
index 2335412ae5..380269e826 100644
--- a/core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
@@ -181,7 +181,7 @@ protected double getSpeed(ReaderWay way) {
             speed = 1.0 * defaultSpeed;
             // AG LOGGER.info("NO speed for way with ID: " + way.getId() + ", using default as " + speed);
         } else {
-            LOGGER.info("FOUND speed for way with ID: " + way.getId() + " as " + speed);
+            LOGGER.debug("FOUND speed for way with ID: " + way.getId() + " as " + speed);
         }
 
         if (highwayValue.equals("track")) {
@@ -190,7 +190,7 @@ protected double getSpeed(ReaderWay way) {
                 Integer tInt = trackTypeSpeedMap.get(tt);
                 if (tInt != null) {
                     speed = tInt;
-                    LOGGER.info("Set speed on highway type = track for way with ID: " + way.getId() + "as " + speed);
+                    LOGGER.debug("Set speed on highway type = track for way with ID: " + way.getId() + "as " + speed);
                 }
             }
         }
@@ -266,7 +266,7 @@ public long handleWayTags(ReaderWay way, long allowed, long relationFlags) {
 
             flags = setSpeed(flags, speed);
 
-            LOGGER.info("Speed that has been set: " + getSpeed(flags));
+            LOGGER.debug("Speed that has been set: " + getSpeed(flags));
             boolean isRoundabout = way.hasTag("junction", "roundabout") || way.hasTag("junction", "circular");
             if (isRoundabout)
                 flags = setBool(flags, K_ROUNDABOUT, true);
diff --git a/reader-osm/src/main/java/com/graphhopper/reader/osm/OSMReader.java b/reader-osm/src/main/java/com/graphhopper/reader/osm/OSMReader.java
index 1b9d734655..b4a121835e 100644
--- a/reader-osm/src/main/java/com/graphhopper/reader/osm/OSMReader.java
+++ b/reader-osm/src/main/java/com/graphhopper/reader/osm/OSMReader.java
@@ -263,7 +263,7 @@ private void writeOsm2Graph(File osmFile) {
                 long osmId= Long.parseLong(row.get(0));
                 double speed = Double.parseDouble(row.get(1));
                 speedsMap.put(osmId, speed);
-                LOGGER.info("Adding speed " + speed + " for way " + osmId);
+                LOGGER.debug("Adding speed " + speed + " for way " + osmId);
             }
         } catch (Exception e) {
             e.printStackTrace();
@@ -283,7 +283,7 @@ private void writeOsm2Graph(File osmFile) {
 
                     case ReaderElement.WAY:
                         if (wayStart < 0) {
-                            LOGGER.info(nf(counter) + ", now parsing ways");
+                            LOGGER.debug(nf(counter) + ", now parsing ways");
                             wayStart = counter;
                         }
 
@@ -291,7 +291,7 @@ private void writeOsm2Graph(File osmFile) {
                         break;
                     case ReaderElement.RELATION:
                         if (relationStart < 0) {
-                            LOGGER.info(nf(counter) + ", now parsing relations");
+                            LOGGER.debug(nf(counter) + ", now parsing relations");
                             relationStart = counter;
                         }
                         processRelation((ReaderRelation) item);
@@ -302,7 +302,7 @@ private void writeOsm2Graph(File osmFile) {
                         throw new IllegalStateException("Unknown type " + item.getType());
                 }
                 if (++counter % 200_000_000 == 0) {
-                    LOGGER.info(nf(counter) + ", locs:" + nf(locations) + " (" + skippedLocations + ") " + Helper.getMemInfo());
+                    LOGGER.debug(nf(counter) + ", locs:" + nf(locations) + " (" + skippedLocations + ") " + Helper.getMemInfo());
                 }
             }
 
@@ -949,7 +949,7 @@ public String toString() {
     private double lookupSpeed(long wayOsmId) {
         Double avgSpeed = speedsMap.get(wayOsmId);
         if (avgSpeed != null) {
-            LOGGER.info("LOOKUP SPEED: FOUND " + avgSpeed + " for OsmId = " + wayOsmId);
+            LOGGER.debug("LOOKUP SPEED: FOUND " + avgSpeed + " for OsmId = " + wayOsmId);
         }
         return (avgSpeed != null) ? avgSpeed : -1;
     }
