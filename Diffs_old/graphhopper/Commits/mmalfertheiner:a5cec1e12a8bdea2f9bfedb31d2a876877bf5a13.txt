diff --git a/CONTRIBUTING.md b/CONTRIBUTING.md
index 4ce4c879f4..8f75929734 100644
--- a/CONTRIBUTING.md
+++ b/CONTRIBUTING.md
@@ -1,5 +1,5 @@
-Submit a new issue only if you are sure it is a missing feature or a bug. Otherwise discuss the topic on the 
-[mailing list](http://graphhopper.com/#developers) first. For new translations or fixes to existing translations
+Submit a new issue only if you are sure it is a missing feature or a bug. Otherwise [discuss the topic](http://graphhopper.com/#developers) first. 
+For new translations or fixes to existing translations
 please refer to [this documentation](https://github.com/graphhopper/graphhopper/blob/master/docs/core/translations.md).
 
 Issues for newcomers are tagged with 
diff --git a/CONTRIBUTORS.md b/CONTRIBUTORS.md
index bc8f46f57a..5f1708cac1 100644
--- a/CONTRIBUTORS.md
+++ b/CONTRIBUTORS.md
@@ -29,6 +29,7 @@
  * rodneyodonnell, improved dead end removal and fords
  * rodo, more descriptions
  * Svantulden, improved documentation and nearest API
+ * vvikas, ideas for many to many improvements
 
 # Translations
 
diff --git a/README.md b/README.md
index 79523dd23d..3372d2e06c 100644
--- a/README.md
+++ b/README.md
@@ -32,7 +32,7 @@ Get Started
 
 Read through our Documentation ([0.5](https://github.com/graphhopper/graphhopper/blob/0.5/docs/index.md), [unstable](https://github.com/graphhopper/graphhopper/blob/master/docs/index.md)), 
 ask questions on [Stackoverflow](http://stackoverflow.com/questions/tagged/graphhopper)
-and sign up to the [mailing list](http://graphhopper.com/#developers).
+and sign up to the [discussion](https://discuss.graphhopper.com/).
 
 
 Contribute
diff --git a/core/src/main/java/com/graphhopper/routing/RoutingAlgorithmFactorySimple.java b/core/src/main/java/com/graphhopper/routing/RoutingAlgorithmFactorySimple.java
index b74fb8f681..920630aceb 100644
--- a/core/src/main/java/com/graphhopper/routing/RoutingAlgorithmFactorySimple.java
+++ b/core/src/main/java/com/graphhopper/routing/RoutingAlgorithmFactorySimple.java
@@ -58,26 +58,22 @@ public RoutingAlgorithm createAlgo( Graph g, AlgorithmOptions opts )
         {
             throw new IllegalArgumentException("Algorithm " + algoStr + " not found in " + getClass().getName());
         }
-
     }
 
     private WeightApproximator getApproximation( String prop, AlgorithmOptions opts, NodeAccess na )
     {
         String approxAsStr = opts.getHints().get(prop + ".approximation", "BeelineSimplification");
+        double epsilon = opts.getHints().getDouble(prop + ".epsilon", 1);
+
+        BeelineWeightApproximator approx = new BeelineWeightApproximator(na, opts.getWeighting());
+        approx.setEpsilon(epsilon);
         if ("BeelineSimplification".equals(approxAsStr))
-        {
-            BeelineWeightApproximator approx = new BeelineWeightApproximator(na, opts.getWeighting());
             approx.setDistanceCalc(Helper.DIST_PLANE);
-            return approx;
-
-        } else if ("BeelineAccurate".equals(approxAsStr))
-        {
-            BeelineWeightApproximator approx = new BeelineWeightApproximator(na, opts.getWeighting());
+        else if ("BeelineAccurate".equals(approxAsStr))
             approx.setDistanceCalc(Helper.DIST_EARTH);
-            return approx;
-        } else
-        {
+        else
             throw new IllegalArgumentException("Approximation " + approxAsStr + " not found in " + getClass().getName());
-        }
+
+        return approx;
     }
 }
diff --git a/core/src/main/java/com/graphhopper/routing/util/BeelineWeightApproximator.java b/core/src/main/java/com/graphhopper/routing/util/BeelineWeightApproximator.java
index 5e8c969ab4..3e9a70f077 100644
--- a/core/src/main/java/com/graphhopper/routing/util/BeelineWeightApproximator.java
+++ b/core/src/main/java/com/graphhopper/routing/util/BeelineWeightApproximator.java
@@ -17,6 +17,7 @@
     private final Weighting weighting;
     private DistanceCalc distanceCalc = Helper.DIST_EARTH;
     private double toLat, toLon;
+    private double epsilon = 1;
 
     public BeelineWeightApproximator( NodeAccess nodeAccess, Weighting weighting )
     {
@@ -31,10 +32,16 @@ public void setGoalNode( int toNode )
         toLon = nodeAccess.getLongitude(toNode);
     }
 
+    public WeightApproximator setEpsilon( double epsilon )
+    {
+        this.epsilon = epsilon;
+        return this;
+    }
+
     @Override
     public WeightApproximator duplicate()
     {
-        return new BeelineWeightApproximator(nodeAccess, weighting).setDistanceCalc(distanceCalc);
+        return new BeelineWeightApproximator(nodeAccess, weighting).setDistanceCalc(distanceCalc).setEpsilon(epsilon);
     }
 
     @Override
@@ -44,7 +51,7 @@ public double approximate( int fromNode )
         double fromLon = nodeAccess.getLongitude(fromNode);
         double dist2goal = distanceCalc.calcDist(toLat, toLon, fromLat, fromLon);
         double weight2goal = weighting.getMinWeight(dist2goal);
-        return weight2goal;
+        return weight2goal * epsilon;
     }
 
     public BeelineWeightApproximator setDistanceCalc( DistanceCalc distanceCalc )
diff --git a/core/src/main/java/com/graphhopper/routing/util/ConsistentWeightApproximator.java b/core/src/main/java/com/graphhopper/routing/util/ConsistentWeightApproximator.java
index 833ad56e11..20d7e63eb7 100644
--- a/core/src/main/java/com/graphhopper/routing/util/ConsistentWeightApproximator.java
+++ b/core/src/main/java/com/graphhopper/routing/util/ConsistentWeightApproximator.java
@@ -35,7 +35,7 @@ public double approximate( int fromNode, boolean reverse )
                 * (uniDirApproximatorForward.approximate(fromNode) - uniDirApproximatorReverse.approximate(fromNode));
 
         if (reverse)
-            weightApproximation *= -1;
+            return -weightApproximation;
 
         return weightApproximation;
     }
diff --git a/tools/src/main/java/com/graphhopper/tools/Measurement.java b/tools/src/main/java/com/graphhopper/tools/Measurement.java
index 1e66bd938b..adbb038ad4 100644
--- a/tools/src/main/java/com/graphhopper/tools/Measurement.java
+++ b/tools/src/main/java/com/graphhopper/tools/Measurement.java
@@ -22,6 +22,7 @@
 import com.graphhopper.GraphHopper;
 import com.graphhopper.coll.GHBitSet;
 import com.graphhopper.coll.GHBitSetImpl;
+import com.graphhopper.routing.AlgorithmOptions;
 import com.graphhopper.routing.RoutingAlgorithmFactorySimple;
 import com.graphhopper.routing.util.*;
 import com.graphhopper.storage.*;
@@ -113,12 +114,12 @@ void start( CmdArgs args )
         hopper.forDesktop();
         if (!hopper.load(graphLocation))
             throw new IllegalStateException("Cannot load existing graph at " + graphLocation);
-        
+
         GraphHopperStorage g = hopper.getGraphHopperStorage();
         if ("true".equals(g.getProperties().get("prepare.done")))
             throw new IllegalStateException("Graph has to be unprepared but wasn't!");
 
-        String chWeighting = args.get("prepare.chWeighting", "fastest");        
+        String chWeighting = args.get("prepare.chWeighting", "fastest");
         String vehicleStr = args.get("graph.flagEncoders", "car");
         FlagEncoder encoder = hopper.getEncodingManager().getEncoder(vehicleStr);
         Weighting weighting = hopper.getWeightingForCH(new WeightingMap(chWeighting), encoder);
@@ -132,14 +133,14 @@ void start( CmdArgs args )
 
             // Route via dijkstrabi. Normal routing takes a lot of time => smaller query number than CH
             // => values are not really comparable to routingCH as e.g. the mean distance etc is different            
-            hopper.setCHEnable(false);            
+            hopper.setCHEnable(false);
             hopper.putAlgorithmFactory(weighting, new RoutingAlgorithmFactorySimple());
             printTimeOfRouteQuery(hopper, count / 20, "routing", vehicleStr, true);
 
             System.gc();
 
             // route via CH. do preparation before                        
-            hopper.setCHEnable(true);            
+            hopper.setCHEnable(true);
             hopper.doPostProcessing(weighting);
             CHGraph lg = g.getGraph(CHGraph.class, weighting);
             fillAllowedEdges(lg.getAllEdges(), allowedEdges);
@@ -321,6 +322,9 @@ private void printTimeOfRouteQuery( final GraphHopper hopper, int count, String
 //        final AtomicLong tmpDist = new AtomicLong(0);
         final Random rand = new Random(seed);
         final NodeAccess na = g.getNodeAccess();
+        
+        // if using none-bidirectional algorithm make sure you exclude CH routing
+        final String algo = AlgorithmOptions.DIJKSTRA_BI;
         MiniPerfTest miniPerf = new MiniPerfTest()
         {
             @Override
@@ -334,7 +338,11 @@ public int doCalc( boolean warmup, int run )
                 double toLon = na.getLongitude(to);
                 GHRequest req = new GHRequest(fromLat, fromLon, toLat, toLon).
                         setWeighting("fastest").
-                        setVehicle(vehicle);
+                        setVehicle(vehicle).
+                        setAlgorithm(algo);
+                
+                // req.getHints().put(algo + ".approximation", "BeelineSimplification");
+                // req.getHints().put(algo + ".epsilon", 2);
                 req.getHints().put("instructions", withInstructions);
                 GHResponse res;
                 try
