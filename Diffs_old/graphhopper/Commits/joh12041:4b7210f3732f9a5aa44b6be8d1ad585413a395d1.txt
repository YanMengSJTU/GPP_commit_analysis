diff --git a/core/src/main/java/com/graphhopper/RoutingExample.java b/core/src/main/java/com/graphhopper/RoutingExample.java
index b168393b76..b8a6e3620f 100644
--- a/core/src/main/java/com/graphhopper/RoutingExample.java
+++ b/core/src/main/java/com/graphhopper/RoutingExample.java
@@ -3,7 +3,6 @@
 import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.util.*;
 
-import java.lang.reflect.Array;
 import java.util.*;
 
 import java.io.*;
@@ -36,29 +35,35 @@ public static void main(String[] args) throws Exception {
         hopper.setEncodingManager(new EncodingManager("car"));
 
         String inputPointsFN = "../../data/sample_origin_destination_sanfran.csv";
+        String outputPointsFN = "../../data/sample_sanfran_directions_gh_basic.csv";
         ArrayList<float[]> inputPoints = new ArrayList<float[]>();
-        Scanner sc = new Scanner(new File(inputPointsFN));
-        String header = sc.nextLine();
+        Scanner sc_in = new Scanner(new File(inputPointsFN));
+        FileWriter sc_out = new FileWriter(outputPointsFN, true);
+        sc_out.write("overview_polyline_points,total_time_in_sec,total_distance_in_meters,waypoints,number_of_steps,maneuvers,idx" + System.getProperty("line.separator"));
+        String header = sc_in.nextLine();
         float laF;
         float loF;
         float laT;
         float loT;
+        float idx = 0;
         System.out.println("Input data points header: " + header);
-        while (sc.hasNext()) {
-            String line = sc.nextLine();
+        while (sc_in.hasNext()) {
+            idx = idx + 1;
+            String line = sc_in.nextLine();
             String[] vals = line.split(",");
             loF = Float.valueOf(vals[0]);
             laF = Float.valueOf(vals[1]);
             loT = Float.valueOf(vals[2]);
             laT = Float.valueOf(vals[3]);
-            inputPoints.add(new float[] {laF, loF, laT, loT});
+            inputPoints.add(new float[]{laF, loF, laT, loT, idx});
         }
-        int numPairs = inputPoints.size() - 4;
+        HashMap<Integer, Boolean> pointsToSkip = new HashMap<Integer, Boolean>();
+        pointsToSkip.put(484, true);
+        pointsToSkip.put(436, true);
+        pointsToSkip.put(208, true);
+        pointsToSkip.put(206, true);
+        int numPairs = inputPoints.size();
         System.out.println(numPairs + " origin-destination pairs.");
-        inputPoints.remove(484);
-        inputPoints.remove(436);
-        inputPoints.remove(208);
-        inputPoints.remove(206);
 
         // now this can take minutes if it imports or a few seconds for loading
         // of course this is dependent on the area you import
@@ -66,9 +71,16 @@ public static void main(String[] args) throws Exception {
 
         // simple configuration of the request object, see the GraphHopperServlet classs for more possibilities.
         float[] points;
+        PointList pointList = null;
         List<Map<String, Object>> iList = null;
         for (int i=0; i<numPairs; i++) {
             points = inputPoints.get(i);
+            if (pointsToSkip.containsKey(i)) {
+                System.out.println(i + ": Skipping.");
+                sc_out.write("\"[(" + points[0] + "," + points[1] + "),(" + points[2] + "," + points[3] + ")]\"," +
+                        "-1,-1,[],-1,[]," + points[4] + System.getProperty("line.separator"));
+                continue;
+            }
             GHRequest req = new GHRequest(points[0], points[1], points[2], points[3]).  // latFrom, lonFrom, latTo, lonTo
                     setWeighting("fastest").
                     setVehicle("car").
@@ -85,13 +97,15 @@ public static void main(String[] args) throws Exception {
             // use the best path, see the GHResponse class for more possibilities.
             PathWrapper path = rsp.getBest();
 
-            // points, distance in meters and time in millis of the full path
-            PointList pointList = path.getPoints();
+            // points, distance in meters and time in seconds (convert from ms) of the full path
+            pointList = path.getPoints();
             double distance = Math.round(path.getDistance()*100) / 100;
-            long timeInMs = path.getTime();
+            long timeInSec = path.getTime() / 1000;
             InstructionList il = path.getInstructions();
             int numDirections = il.getSize();
-            System.out.println(i + ": Distance: " + distance + "m;\tTime: " + timeInMs / 1000 / 60 + "min;\t# Directions: " + numDirections);
+            sc_out.write("\"[" + pointList + "]\"," + timeInSec + "," + distance + ",[]," + numDirections +
+                    ",[]," + points[4] + System.getProperty("line.separator"));
+            System.out.println(i + ": Distance: " + distance + "m;\tTime: " + timeInSec + "sec;\t# Directions: " + numDirections);
             // iterate over every turn instruction
             //for(Instruction instruction : il) {
             //    System.out.println(instruction.getTurnDescription(usTR) + " for " + instruction.getDistance() + " meters.");
@@ -107,5 +121,6 @@ public static void main(String[] args) throws Exception {
         }
         // example JSON
         System.out.println("Example JSON: " + iList);
+        sc_out.close();
     }
 }
