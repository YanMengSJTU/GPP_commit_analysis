diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperRequestHandler.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperRequestHandler.java
new file mode 100644
index 0000000000..d117c69f64
--- /dev/null
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperRequestHandler.java
@@ -0,0 +1,102 @@
+package uk.co.ordnancesurvey.gpx.graphhopper;
+
+import java.io.IOException;
+
+import org.apache.commons.io.IOUtils;
+import org.apache.http.client.methods.CloseableHttpResponse;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+public class GraphHopperRequestHandler {
+
+	private static final Logger LOG = LoggerFactory
+			.getLogger(GraphHopperRequestHandler.class);
+	private GraphHopperJSONParser parser = new GraphHopperJSONParser();
+
+	public void dispatchServiceRequest(String routeType, String avoidances, String routeOptions,
+			String[] string) {
+
+		String vehicle = "";
+		String routeOption = "";
+
+		if (routeOptions.split(",").length > 1) {
+			vehicle = routeOptions.split(",")[0];
+			routeOption = routeOptions.split(",")[1];
+		} else {
+			vehicle = routeOptions;
+		}
+		// Set up the URL
+		String jsonResponse = "";
+		String coordinateString = "";
+		String graphHopperUrl;
+
+		for (int i = 0; i < string.length; i++) {
+
+			coordinateString = coordinateString + "&point=" + string[i];
+
+		}
+
+		if (IntegrationTestProperties.getTestPropertyBool("viaApigee")) {
+			graphHopperUrl = IntegrationTestProperties
+					.getTestProperty("graphHopperWebUrlViaApigee");
+		} else {
+			graphHopperUrl = IntegrationTestProperties
+					.getTestProperty("graphHopperWebUrl");
+		}
+
+		String apikey = IntegrationTestProperties.getTestProperty("apiKey");
+		if (vehicle.equalsIgnoreCase("mountainbike")) {
+			vehicle = "mtb";
+		}
+		StringBuilder sb = new StringBuilder();
+		sb.append(graphHopperUrl);
+		sb.append("route?");
+		if (routeType != null) {
+			sb.append("type=");
+			sb.append(routeType);
+		}
+		sb.append("&vehicle=");
+		sb.append(vehicle);
+
+		sb.append(coordinateString);
+		sb.append("&apikey=");
+		sb.append(apikey);
+		sb.append("&points_encoded=false");
+
+		if (!avoidances.equals("")) {
+			sb.append("&avoidances=" + avoidances);
+
+			if (routeOption.isEmpty()) {
+				routeOption = "fastavoid";
+			}
+		}
+
+		else {
+
+			if (routeOption.isEmpty()) {
+				routeOption = "fastest";
+			}
+
+		}
+
+		sb.append("&weighting=");
+
+		sb.append(routeOption);
+		GraphHopperGPXParserRouteTest GPHService = new GraphHopperGPXParserRouteTest();
+		try {
+			CloseableHttpResponse httpResponse = GPHService
+					.sendAndGetResponse(sb.toString());
+			jsonResponse = IOUtils.toString(httpResponse.getEntity()
+					.getContent(), "UTF-8");
+
+		} catch (IOException e) {
+			LOG.info("Exception raised whilst attempting to call graphhopper server "
+					+ e.getMessage());
+		}
+
+		if (jsonResponse != null && jsonResponse.length() > 0) {
+			parser.parseJSONFromString(jsonResponse);
+		}
+
+	}
+}
\ No newline at end of file
diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/NearestPointServiceUtil.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/NearestPointServiceUtil.java
new file mode 100644
index 0000000000..5ab895ace4
--- /dev/null
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/NearestPointServiceUtil.java
@@ -0,0 +1,64 @@
+package uk.co.ordnancesurvey.gpx.graphhopper;
+
+import java.io.IOException;
+
+import org.apache.commons.io.IOUtils;
+import org.apache.http.client.methods.CloseableHttpResponse;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import com.google.gson.JsonElement;
+import com.google.gson.JsonParser;
+import com.google.gson.JsonPrimitive;
+
+public class NearestPointServiceUtil {
+
+	private static final Logger LOG = LoggerFactory
+			.getLogger(NearestPointServiceUtil.class);
+	
+	 String jsonString;
+
+	public  String getNearestPoint(String pointA) {
+
+		String nearestpoint = "";
+		StringBuffer sb = new StringBuffer();
+		if (IntegrationTestProperties.getTestPropertyBool("viaApigee")) {
+			sb.append(IntegrationTestProperties
+					.getTestProperty("graphHopperWebUrlViaApigee"));
+		} else {
+			sb.append(IntegrationTestProperties
+					.getTestProperty("graphHopperWebUrl"));
+		}
+
+		sb.append("nearest?point=");
+		sb.append(pointA);
+		GraphHopperGPXParserRouteTest GPHService = new GraphHopperGPXParserRouteTest();
+
+		try {
+			CloseableHttpResponse httpResponse = GPHService
+					.sendAndGetResponse(sb.toString());
+
+			jsonString= IOUtils.toString(httpResponse.getEntity()
+					.getContent(), "UTF-8");
+
+			GraphHopperJSONParser jsonParser = new GraphHopperJSONParser();
+			nearestpoint = jsonParser.nearestPointJSONParser(jsonString);
+
+		} catch (IOException e) {
+			LOG.info("Exception raised whilst attempting to call graphhopper server "
+					+ e.getMessage());
+		}
+		return nearestpoint;
+
+	}
+	
+	
+	public String getNearestPointDistance() {
+		JsonParser jp = new JsonParser();
+		JsonElement je = jp.parse(jsonString);
+		JsonPrimitive distance = je.getAsJsonObject().getAsJsonPrimitive(
+				"distance");
+		return distance.toString();
+	}
+
+}
diff --git a/acceptancetesting/src/test/cucumber/Routing-Exeter.feature b/acceptancetesting/src/test/cucumber/Routing-Exeter.feature
index ad2943c297..56fc728bd7 100644
--- a/acceptancetesting/src/test/cucumber/Routing-Exeter.feature
+++ b/acceptancetesting/src/test/cucumber/Routing-Exeter.feature
@@ -847,11 +847,11 @@ Feature: Verify a route from A to B
     Then I should be able to verify the statuscode as "<statusCode>"
 
     Examples: 
-      | vehicleType | avoidances | routeType | errorMessage                                                                      | statusCode |
-      | 123         |            | fastest   | Vehicle requested_vehicle is not a valid on road vehicle. Valid vehicles are car. | 400        |
-      | foot        |            | fastest   | Vehicle requested_vehicle is not a valid on road vehicle. Valid vehicles are car. | 400        |
-      | cycle       |            | fastest   | Vehicle requested_vehicle is not a valid on road vehicle. Valid vehicles are car. | 400        |
-      | Bike        |            | fastest   | Vehicle requested_vehicle is not a valid on road vehicle. Valid vehicles are car. | 400        |
+      | vehicleType | avoidances | routeType | errorMessage                                                 | statusCode |
+      | 123         |            | fastest   | Vehicle 123 is not a valid vehicle. Valid vehicles are car. 	| 400        |
+      | foot        |            | fastest   | Vehicle foot is not a valid vehicle. Valid vehicles are car. | 400        |
+      | cycle       |            | fastest   | Vehicle cycle is not a valid vehicle. Valid vehicles are car.| 400        |
+      | Bike        |            | fastest   | Vehicle Bike is not a valid vehicle. Valid vehicles are car. | 400        |
 
   @Routing @ErrorMessages
   Scenario Outline: Incorrect Parameter Name "vehicles"
diff --git a/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java b/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
index 2a27a6f1b7..269a33614c 100644
--- a/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
+++ b/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
@@ -83,7 +83,9 @@ public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes ) thr
         GHResponse ghRsp;
         if (!hopper.getEncodingManager().supports(vehicleStr))
         {
-            ghRsp = new GHResponse().addError(new IllegalArgumentException("Vehicle not supported: " + vehicleStr));
+        	String supported = hopper.getGraph().getEncodingManager().toString();
+        	String errMesg = String.format("Vehicle %1 is not a valid vehicle. Valid vehicles are %2", vehicleStr, supported);
+            ghRsp = new GHResponse().addError(new IllegalArgumentException(errMesg));
         } else if (enableElevation && !hopper.hasElevation())
         {
             ghRsp = new GHResponse().addError(new IllegalArgumentException("Elevation not supported!"));
