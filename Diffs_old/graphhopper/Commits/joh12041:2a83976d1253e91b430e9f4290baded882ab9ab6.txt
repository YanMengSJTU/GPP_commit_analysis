diff --git a/core/src/main/java/com/graphhopper/GHAltRouting.java b/core/src/main/java/com/graphhopper/GHAltRouting.java
index 636a579cf9..93a9989bd2 100644
--- a/core/src/main/java/com/graphhopper/GHAltRouting.java
+++ b/core/src/main/java/com/graphhopper/GHAltRouting.java
@@ -2,8 +2,8 @@
 
 import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.routing.util.ScenicWeighting;
-import com.graphhopper.routing.util.Weighting;
-import com.graphhopper.routing.util.WeightingMap;
+import com.graphhopper.routing.weighting.Weighting;
+import com.graphhopper.routing.util.HintsMap;
 
 import java.util.HashMap;
 
@@ -18,7 +18,7 @@ public void determineScenicEdges() {
     }
 
     @Override
-    public Weighting createWeighting( WeightingMap wMap, FlagEncoder encoder)
+    public Weighting createWeighting( HintsMap wMap, FlagEncoder encoder)
     {
         String weighting = wMap.getWeighting();
         if ("SCENIC".equalsIgnoreCase(weighting)) {
diff --git a/core/src/main/java/com/graphhopper/routing/util/ScenicWeighting.java b/core/src/main/java/com/graphhopper/routing/util/ScenicWeighting.java
index d19305b7da..f0e4aedafb 100644
--- a/core/src/main/java/com/graphhopper/routing/util/ScenicWeighting.java
+++ b/core/src/main/java/com/graphhopper/routing/util/ScenicWeighting.java
@@ -1,5 +1,6 @@
 package com.graphhopper.routing.util;
 
+import com.graphhopper.routing.weighting.Weighting;
 import com.graphhopper.util.EdgeIteratorState;
 
 import java.util.HashMap;
@@ -29,9 +30,8 @@ public double calcWeight( EdgeIteratorState edgeState, boolean reverse, int prev
     }
 
     @Override
-    public boolean matches( String weightingAsStr, FlagEncoder encoder )
-    {
-        return getName().equals(weightingAsStr) && encoder == encoder;
+    public long calcMillis(EdgeIteratorState edgeState, boolean reverse, int prevOrNextEdgeId) {
+        return -1l;
     }
 
     @Override
@@ -49,4 +49,9 @@ public String getName() {
         return "SCENIC";
     }
 
+    @Override
+    public boolean matches(HintsMap map) {
+        return true;
+    }
+
 }
diff --git a/core/src/main/java/com/graphhopper/RoutingExample.java b/reader-osm/src/main/java/com/graphhopper/reader/osm/RoutingExample.java
similarity index 86%
rename from core/src/main/java/com/graphhopper/RoutingExample.java
rename to reader-osm/src/main/java/com/graphhopper/reader/osm/RoutingExample.java
index 52c0296e37..6e5118c60a 100644
--- a/core/src/main/java/com/graphhopper/RoutingExample.java
+++ b/reader-osm/src/main/java/com/graphhopper/reader/osm/RoutingExample.java
@@ -1,5 +1,9 @@
-package com.graphhopper;
+package com.graphhopper.reader.osm;
 
+import com.graphhopper.GHRequest;
+import com.graphhopper.GHResponse;
+import com.graphhopper.GraphHopper;
+import com.graphhopper.PathWrapper;
 import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.util.*;
 
@@ -7,14 +11,15 @@
 
 import java.io.*;
 
+
 /**
  * Created by isaac on 3/8/16.
  */
 public class RoutingExample {
 
     // PBF from: https://mapzen.com/data/metro-extracts/
-    private static final String osmFile = "./files/san-francisco-bay_california.osm.pbf";
-    private static final String graphFolder = "./target/tmp/ghosm";
+    private static final String osmFile = "./reader-osm/files/san-francisco-bay_california.osm.pbf";
+    private static final String graphFolder = "./reader-osm/target/tmp/ghosm";
 
     private static final TranslationMap trMap = new TranslationMap().doImport();
     private static final Translation usTR = trMap.getWithFallBack(Locale.US);
@@ -28,19 +33,20 @@
     public static void main(String[] args) throws Exception {
         // create one GraphHopper instance
         System.out.println(usTR);
-        GraphHopper hopper = new GraphHopper().forDesktop();
-        hopper.setOSMFile(osmFile);
+//        GraphHopper hopper = new GraphHopper().forDesktop();
+        GraphHopper hopper = new GraphHopperOSM().forDesktop();
+        hopper.setDataReaderFile(osmFile);
         // where to store graphhopper files?
         hopper.setGraphHopperLocation(graphFolder);
         hopper.setEncodingManager(new EncodingManager("car"));
 
-        String inputPointsFN = "../../data/sample_origin_destination_sanfran_id.csv";
-        String outputPointsFN = "../../data/sample_sanfran_directions_gh_id.csv";
+        String inputPointsFN = "../data/output/sf_grid_od_pairs.csv";
+        String outputPointsFN = "../data/output/sf_grid_ghshort_routes.csv";
         ArrayList<float[]> inputPoints = new ArrayList<float[]>();
         ArrayList<String> id_to_points = new ArrayList<String>();
         Scanner sc_in = new Scanner(new File(inputPointsFN));
         FileWriter sc_out = new FileWriter(outputPointsFN, true);
-        sc_out.write("ID,overview_polyline_points,total_time_in_sec,total_distance_in_meters,waypoints,number_of_steps,maneuvers" +
+        sc_out.write("ID,polyline_points,total_time_in_sec,total_distance_in_meters,number_of_steps,maneuvers" +
                 System.getProperty("line.separator"));
         String header = sc_in.nextLine();
         String od_id;
