diff --git a/web/src/main/java/com/graphhopper/http/UpdateServlet.java b/web/src/main/java/com/graphhopper/http/UpdateServlet.java
index 15df20d8e1..e299c368cf 100644
--- a/web/src/main/java/com/graphhopper/http/UpdateServlet.java
+++ b/web/src/main/java/com/graphhopper/http/UpdateServlet.java
@@ -1,14 +1,14 @@
 /*
  *  Licensed to GraphHopper and Peter Karich under one or more contributor
- *  license agreements. See the NOTICE file distributed with this work for 
+ *  license agreements. See the NOTICE file distributed with this work for
  *  additional information regarding copyright ownership.
- * 
- *  GraphHopper licenses this file to you under the Apache License, 
- *  Version 2.0 (the "License"); you may not use this file except in 
+ *
+ *  GraphHopper licenses this file to you under the Apache License,
+ *  Version 2.0 (the "License"); you may not use this file except in
  *  compliance with the License. You may obtain a copy of the License at
- * 
+ *
  *       http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  *  Unless required by applicable law or agreed to in writing, software
  *  distributed under the License is distributed on an "AS IS" BASIS,
  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -52,115 +52,129 @@
  * json it returns the points in GeoJson format (longitude,latitude) unlike the format "lat,lon"
  * used otherwise.
  * <p/>
+ *
  * @author Peter Karich
  */
 public class UpdateServlet extends GHBaseServlet
 {
-    /**
-	 * 
+	/**
+	 *
 	 */
 	private static final long serialVersionUID = 1L;
 	@Inject
-    private GraphHopper hopper;
-
-    @Override
-    public void doGet( HttpServletRequest req, HttpServletResponse res ) throws ServletException, IOException
-    {
-        try
-        {
-            updatePath(req, res);
-        } catch (IllegalArgumentException ex)
-        {
-            writeError(res, SC_BAD_REQUEST, ex.getMessage());
-        } catch (Exception ex)
-        {
-            logger.error("Error while executing request: " + req.getQueryString(), ex);
-            writeError(res, SC_INTERNAL_SERVER_ERROR, "Problem occured:" + ex.getMessage());
-        }
-    }
-
-    void updatePath( HttpServletRequest req, HttpServletResponse res ) throws Exception
-    {
-        List<GHPoint> infoPoints = getPoints(req);
-
-        String vehicleStr = getParam(req, "vehicle", "CAR").toUpperCase();
-        String speed = getParam(req, "speed", "");
-        
-        StopWatch sw = new StopWatch().start();
-        GHResponse ghRsp;
-        if (!hopper.getEncodingManager().supports(vehicleStr))
-        {
-            ghRsp = new GHResponse().addError(new IllegalArgumentException("Vehicle not supported: " + vehicleStr));
-        } else if (0==speed.length()){
-        	ghRsp = new GHResponse().addError(new IllegalArgumentException("Speed value not specified: "));
-        } else
-        {
-        	for (GHPoint ghPoint : infoPoints) {
+	private GraphHopper hopper;
+
+	@Override
+	public void doGet( HttpServletRequest req, HttpServletResponse res ) throws ServletException,
+	IOException
+	{
+		try
+		{
+			updatePath(req, res);
+		} catch (IllegalArgumentException ex)
+		{
+			writeError(res, SC_BAD_REQUEST, ex.getMessage());
+		} catch (Exception ex)
+		{
+			logger.error("Error while executing request: " + req.getQueryString(), ex);
+			writeError(res, SC_INTERNAL_SERVER_ERROR, "Problem occured:" + ex.getMessage());
+		}
+	}
+
+	void updatePath( HttpServletRequest req, HttpServletResponse res ) throws Exception
+	{
+		List<GHPoint> infoPoints = getPoints(req);
+
+		String vehicleStr = getParam(req, "vehicle", "CAR").toUpperCase();
+		String speed = getParam(req, "speed", "");
+
+		StopWatch sw = new StopWatch().start();
+		GHResponse ghRsp;
+		if (!hopper.getEncodingManager().supports(vehicleStr))
+		{
+			ghRsp = new GHResponse().addError(new IllegalArgumentException(
+					"Vehicle not supported: " + vehicleStr));
+		} else if (0 == speed.length())
+		{
+			ghRsp = new GHResponse().addError(new IllegalArgumentException(
+					"Speed value not specified: "));
+		} else
+		{
+			for (GHPoint ghPoint : infoPoints)
+			{
 				LatLongMetaData update = new LatLongMetaData(speed, ghPoint.lat, ghPoint.lon);
 				GraphEdgeUpdate.updateEdge(hopper, update);
 			}
-        	ghRsp = new GHResponse().setFound(true);
-        }
-
-        float took = sw.stop().getSeconds();
-        String infoStr = req.getRemoteAddr() + " " + req.getLocale() + " " + req.getHeader("User-Agent");
-        PointList points = ghRsp.getPoints();
-        String logStr = req.getQueryString() + " " + infoStr + " " + infoPoints
-                + ", time:" + Math.round(ghRsp.getMillis() / 60000f)
-                + "min, points:" + points.getSize() + ", took:" + took
-                + ", debug - " + ghRsp.getDebugInfo();
-
-        if (ghRsp.hasErrors())
-            logger.error(logStr + ", errors:" + ghRsp.getErrors());
-        else
-            logger.info(logStr);
-    }
-
-    String errorsToXML( List<Throwable> list ) throws Exception
-    {
-        DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
-        DocumentBuilder builder = factory.newDocumentBuilder();
-        Document doc = builder.newDocument();
-        Element gpxElement = doc.createElement("gpx");
-        gpxElement.setAttribute("creator", "GraphHopper");
-        gpxElement.setAttribute("version", "1.1");
-        doc.appendChild(gpxElement);
-
-        Element mdElement = doc.createElement("metadata");
-        gpxElement.appendChild(mdElement);
-
-        Element errorsElement = doc.createElement("extensions");
-        mdElement.appendChild(errorsElement);
-
-        for (Throwable t : list)
-        {
-            Element error = doc.createElement("error");
-            errorsElement.appendChild(error);
-            error.setAttribute("message", t.getMessage());
-            error.setAttribute("details", t.getClass().getName());
-        }
-        TransformerFactory transformerFactory = TransformerFactory.newInstance();
-        Transformer transformer = transformerFactory.newTransformer();
-        StringWriter writer = new StringWriter();
-        transformer.transform(new DOMSource(doc), new StreamResult(writer));
-        return writer.toString();
-    }
-
-    private List<GHPoint> getPoints( HttpServletRequest req ) throws IOException
-    {
-        String[] pointsAsStr = getParams(req, "point");
-        final List<GHPoint> infoPoints = new ArrayList<GHPoint>(pointsAsStr.length);
-        for (String str : pointsAsStr)
-        {
-            String[] fromStrs = str.split(",");
-            if (fromStrs.length == 2)
-            {
-                GHPoint place = GHPoint.parse(str);
-                if (place != null)
-                    infoPoints.add(place);
-            }
-        }
-
-        return infoPoints;
-    }
+			ghRsp = new GHResponse().setFound(true);
+		}
+
+		float took = sw.stop().getSeconds();
+		String infoStr = req.getRemoteAddr() + " " + req.getLocale() + " "
+				+ req.getHeader("User-Agent");
+		PointList points = ghRsp.getPoints();
+		String logStr = req.getQueryString() + " " + infoStr + " " + infoPoints + ", time:"
+				+ Math.round(ghRsp.getMillis() / 60000f) + "min, points:" + points.getSize()
+				+ ", took:" + took + ", debug - " + ghRsp.getDebugInfo();
+
+		if (ghRsp.hasErrors())
+			logger.error(logStr + ", errors:" + ghRsp.getErrors());
+		else
+			logger.info(logStr);
+	}
+
+	@Override
+	protected String errorsToXML( List<Throwable> list )
+	{
+		DocumentBuilderFactory factory = DocumentBuilderFactory.newInstance();
+		DocumentBuilder builder;
+		try
+		{
+			builder = factory.newDocumentBuilder();
+			Document doc = builder.newDocument();
+			Element gpxElement = doc.createElement("gpx");
+			gpxElement.setAttribute("creator", "GraphHopper");
+			gpxElement.setAttribute("version", "1.1");
+			doc.appendChild(gpxElement);
+
+			Element mdElement = doc.createElement("metadata");
+			gpxElement.appendChild(mdElement);
+
+			Element errorsElement = doc.createElement("extensions");
+			mdElement.appendChild(errorsElement);
+
+			for (Throwable t : list)
+			{
+				Element error = doc.createElement("error");
+				errorsElement.appendChild(error);
+				error.setAttribute("message", t.getMessage());
+				error.setAttribute("details", t.getClass().getName());
+			}
+			TransformerFactory transformerFactory = TransformerFactory.newInstance();
+			Transformer transformer = transformerFactory.newTransformer();
+			StringWriter writer = new StringWriter();
+			transformer.transform(new DOMSource(doc), new StreamResult(writer));
+			return writer.toString();
+		} catch (Exception e)
+		{
+			throw new RuntimeException(e);
+		}
+	}
+
+	private List<GHPoint> getPoints( HttpServletRequest req ) throws IOException
+	{
+		String[] pointsAsStr = getParams(req, "point");
+		final List<GHPoint> infoPoints = new ArrayList<GHPoint>(pointsAsStr.length);
+		for (String str : pointsAsStr)
+		{
+			String[] fromStrs = str.split(",");
+			if (fromStrs.length == 2)
+			{
+				GHPoint place = GHPoint.parse(str);
+				if (place != null)
+					infoPoints.add(place);
+			}
+		}
+
+		return infoPoints;
+	}
 }
