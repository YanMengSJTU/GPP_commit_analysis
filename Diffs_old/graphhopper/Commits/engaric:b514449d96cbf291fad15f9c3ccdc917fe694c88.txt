diff --git a/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/Urban.java b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/Urban.java
index 990c88c2a4..92ac97893b 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/Urban.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/Urban.java
@@ -6,12 +6,11 @@
 
 public class Urban extends AbstractOsToOsmAttibuteMappingVisitor
 {
-	private static final String _30_MPH = Integer.toString(CarFlagEncoder.THIRTY_MPH_IN_KPH);
 	@Override
     protected void applyAttributes( Way way )
     {
 		if(!way.hasTag("maxspeed")) {
-			way.setTag("maxspeed", _30_MPH);
+			way.setTag("maxspeed", "30 mph");
 		}
     }
 }
diff --git a/core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
index 3d73ad867b..68914da325 100644
--- a/core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
@@ -49,9 +49,9 @@
     /**
      * 1mph = 1.60934kph
      */
-    public static final int SEVENTY_MPH_IN_KPH = 112;
-    public static final int SIXTY_MPH_IN_KPH = 96;
-    public static final int THIRTY_MPH_IN_KPH = 48;
+    public static final int SEVENTY_MPH_IN_KPH = (int)parseSpeed("70mph");
+    public static final int SIXTY_MPH_IN_KPH = (int)parseSpeed("60mph");;
+    public static final int THIRTY_MPH_IN_KPH = (int)parseSpeed("30mph");;
 
     /**
      * Should be only instantied via EncodingManager
@@ -112,7 +112,7 @@ public CarFlagEncoder( int speedBits, double speedFactor, int maxTurnCosts )
         badSurfaceSpeedMap.add("ground");
         badSurfaceSpeedMap.add("grass");
 
-        maxPossibleSpeed = 100;
+        maxPossibleSpeed = SEVENTY_MPH_IN_KPH;
         
         // autobahn
         defaultSpeedMap.put("motorway", 100);
@@ -140,39 +140,8 @@ public CarFlagEncoder( int speedBits, double speedFactor, int maxTurnCosts )
         // forestry stuff
         defaultSpeedMap.put("track", 15);
 
-        defaultSpeedMap.put("Motorway", SEVENTY_MPH_IN_KPH);
-        defaultSpeedMap.put("A Road", SIXTY_MPH_IN_KPH);
-        defaultSpeedMap.put("B Road", THIRTY_MPH_IN_KPH);
-        defaultSpeedMap.put("Minor Road", THIRTY_MPH_IN_KPH);
-        defaultSpeedMap.put("Local Street", THIRTY_MPH_IN_KPH);
-        //        defaultSpeedMap.put("Alley", 35);
-        defaultSpeedMap.put("A Road-Single Carriageway", SIXTY_MPH_IN_KPH);
-        defaultSpeedMap.put("B Road", THIRTY_MPH_IN_KPH);
-        defaultSpeedMap.put("Minor Road", THIRTY_MPH_IN_KPH);
-        defaultSpeedMap.put("Local Street", THIRTY_MPH_IN_KPH);
-        //        defaultSpeedMap.put("Alley", 35);
-        defaultSpeedMap.put("Motorway", SEVENTY_MPH_IN_KPH);
-        defaultSpeedMap.put("A Road", SIXTY_MPH_IN_KPH);
-        defaultSpeedMap.put("B Road", THIRTY_MPH_IN_KPH);
-        defaultSpeedMap.put("Minor Road", THIRTY_MPH_IN_KPH);
-        defaultSpeedMap.put("Local Street", THIRTY_MPH_IN_KPH);
-        //        defaultSpeedMap.put("Alley", 35);
-        defaultSpeedMap.put("A Road-Dual Carriageway", SIXTY_MPH_IN_KPH);
-        defaultSpeedMap.put("B Road", THIRTY_MPH_IN_KPH);
-        defaultSpeedMap.put("Minor Road", THIRTY_MPH_IN_KPH);
-        defaultSpeedMap.put("Local Street", THIRTY_MPH_IN_KPH);
-        //        defaultSpeedMap.put("Alley", 35);
-        defaultSpeedMap.put("Motorway-Slip Road", SEVENTY_MPH_IN_KPH);
-        defaultSpeedMap.put("A Road-Slip Road", SIXTY_MPH_IN_KPH);
-        defaultSpeedMap.put("B Road", THIRTY_MPH_IN_KPH);
-        defaultSpeedMap.put("Minor Road", THIRTY_MPH_IN_KPH);
-        defaultSpeedMap.put("Local Street", THIRTY_MPH_IN_KPH);
-        //        defaultSpeedMap.put("Alley", 35);
-        defaultSpeedMap.put("Motorway-Roundabout", SEVENTY_MPH_IN_KPH);
-        defaultSpeedMap.put("A Road-Roundabout", SIXTY_MPH_IN_KPH);
-        defaultSpeedMap.put("B Road-Roundabout", THIRTY_MPH_IN_KPH);
-        defaultSpeedMap.put("Minor Road-Roundabout", THIRTY_MPH_IN_KPH);
-        defaultSpeedMap.put("Local Street-Roundabout", THIRTY_MPH_IN_KPH);
+        addNationalUKSpeedMapping();
+        addRoadTypeUKSpeedMapping();
 
         // You can not drive down a pedestrianised street
         defaultSpeedMap.put("Pedestrianised Street", 0);
@@ -218,6 +187,50 @@ public CarFlagEncoder( int speedBits, double speedFactor, int maxTurnCosts )
         environmentMaxSpeedMap.put("Urban:Single Carriageway", ""+THIRTY_MPH_IN_KPH);
 
 
+    }
+
+	private void addNationalUKSpeedMapping()
+    {
+	    defaultSpeedMap.put("GB:motorway", SEVENTY_MPH_IN_KPH);
+	    defaultSpeedMap.put("GB:nsl_dual", SEVENTY_MPH_IN_KPH);
+	    defaultSpeedMap.put("GB:nsl_single", SIXTY_MPH_IN_KPH);
+    }
+
+	private void addRoadTypeUKSpeedMapping()
+    {
+	    defaultSpeedMap.put("Motorway", SEVENTY_MPH_IN_KPH);
+        defaultSpeedMap.put("A Road", SIXTY_MPH_IN_KPH);
+        defaultSpeedMap.put("B Road", THIRTY_MPH_IN_KPH);
+        defaultSpeedMap.put("Minor Road", THIRTY_MPH_IN_KPH);
+        defaultSpeedMap.put("Local Street", THIRTY_MPH_IN_KPH);
+        //        defaultSpeedMap.put("Alley", 35);
+        defaultSpeedMap.put("A Road-Single Carriageway", SIXTY_MPH_IN_KPH);
+        defaultSpeedMap.put("B Road", THIRTY_MPH_IN_KPH);
+        defaultSpeedMap.put("Minor Road", THIRTY_MPH_IN_KPH);
+        defaultSpeedMap.put("Local Street", THIRTY_MPH_IN_KPH);
+        //        defaultSpeedMap.put("Alley", 35);
+        defaultSpeedMap.put("Motorway", SEVENTY_MPH_IN_KPH);
+        defaultSpeedMap.put("A Road", SIXTY_MPH_IN_KPH);
+        defaultSpeedMap.put("B Road", THIRTY_MPH_IN_KPH);
+        defaultSpeedMap.put("Minor Road", THIRTY_MPH_IN_KPH);
+        defaultSpeedMap.put("Local Street", THIRTY_MPH_IN_KPH);
+        //        defaultSpeedMap.put("Alley", 35);
+        defaultSpeedMap.put("A Road-Dual Carriageway", SIXTY_MPH_IN_KPH);
+        defaultSpeedMap.put("B Road", THIRTY_MPH_IN_KPH);
+        defaultSpeedMap.put("Minor Road", THIRTY_MPH_IN_KPH);
+        defaultSpeedMap.put("Local Street", THIRTY_MPH_IN_KPH);
+        //        defaultSpeedMap.put("Alley", 35);
+        defaultSpeedMap.put("Motorway-Slip Road", SEVENTY_MPH_IN_KPH);
+        defaultSpeedMap.put("A Road-Slip Road", SIXTY_MPH_IN_KPH);
+        defaultSpeedMap.put("B Road", THIRTY_MPH_IN_KPH);
+        defaultSpeedMap.put("Minor Road", THIRTY_MPH_IN_KPH);
+        defaultSpeedMap.put("Local Street", THIRTY_MPH_IN_KPH);
+        //        defaultSpeedMap.put("Alley", 35);
+        defaultSpeedMap.put("Motorway-Roundabout", SEVENTY_MPH_IN_KPH);
+        defaultSpeedMap.put("A Road-Roundabout", SIXTY_MPH_IN_KPH);
+        defaultSpeedMap.put("B Road-Roundabout", THIRTY_MPH_IN_KPH);
+        defaultSpeedMap.put("Minor Road-Roundabout", THIRTY_MPH_IN_KPH);
+        defaultSpeedMap.put("Local Street-Roundabout", THIRTY_MPH_IN_KPH);
     }
 
     /**
@@ -235,21 +248,25 @@ public int defineWayBits( int index, int shift )
 
     protected double getSpeed( Way way )
     {
-        String highwayValue = way.getTag("highway");
-        Integer speed = defaultSpeedMap.get(highwayValue);
-        if (speed == null)
-            throw new IllegalStateException(toString() + ", no speed found for: " + highwayValue + ", tags: " + way);
-
-        if (highwayValue.equals("track"))
-        {
-            String tt = way.getTag("tracktype");
-            if (!Helper.isEmpty(tt))
-            {
-                Integer tInt = trackTypeSpeedMap.get(tt);
-                if (tInt != null)
-                    speed = tInt;
-            }
-        }
+    	String typeMax = way.getTag("maxspeed:type");
+    	Integer speed = defaultSpeedMap.get(typeMax);
+    	if(null==speed) {
+    		String highwayValue = way.getTag("highway");
+    		speed = defaultSpeedMap.get(highwayValue);
+    		if (speed == null)
+    			throw new IllegalStateException(toString() + ", no speed found for: " + highwayValue + ", tags: " + way);
+
+    		if (highwayValue.equals("track"))
+    		{
+    			String tt = way.getTag("tracktype");
+    			if (!Helper.isEmpty(tt))
+    			{
+    				Integer tInt = trackTypeSpeedMap.get(tt);
+    				if (tInt != null)
+    					speed = tInt;
+    			}
+    		}
+    	}
 
         return speed;
     }
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/UrbanTest.java b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/UrbanTest.java
index 72ae324e3a..0815b26036 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/UrbanTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/UrbanTest.java
@@ -1,8 +1,8 @@
 package com.graphhopper.reader.osgb.roadclassification;
 
-import static org.mockito.Mockito.when;
 import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.verifyNoMoreInteractions;
+import static org.mockito.Mockito.when;
 
 import org.junit.Before;
 import org.junit.BeforeClass;
@@ -12,11 +12,10 @@
 
 import com.graphhopper.reader.Way;
 import com.graphhopper.reader.osgb.OsToOsmAttributeMappingVisitor;
-import com.graphhopper.routing.util.CarFlagEncoder;
 
 public class UrbanTest
 {
-	private static final String _30_MPH = Integer.toString(CarFlagEncoder.THIRTY_MPH_IN_KPH);
+	private static final String _30_MPH = "30 mph";
 	static OsToOsmAttributeMappingVisitor visitor;
 	@Mock
 	Way way;
diff --git a/core/src/test/java/com/graphhopper/routing/util/CarFlagEncoderTest.java b/core/src/test/java/com/graphhopper/routing/util/CarFlagEncoderTest.java
index 2dadef1d67..f350ad6851 100644
--- a/core/src/test/java/com/graphhopper/routing/util/CarFlagEncoderTest.java
+++ b/core/src/test/java/com/graphhopper/routing/util/CarFlagEncoderTest.java
@@ -17,10 +17,14 @@
  */
 package com.graphhopper.routing.util;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
+import org.junit.Test;
+
 import com.graphhopper.reader.OSMNode;
 import com.graphhopper.reader.OSMWay;
-import org.junit.Test;
-import static org.junit.Assert.*;
 
 /**
  *
@@ -30,7 +34,7 @@
 {
     private final EncodingManager em = new EncodingManager("CAR,BIKE,FOOT");
     private final CarFlagEncoder encoder = (CarFlagEncoder) em.getEncoder("CAR");
-
+    
     @Test
     public void testAccess()
     {
@@ -164,7 +168,7 @@ public void testMaxSpeed()
         way.setTag("maxspeed", "500");
         long allowed = encoder.acceptWay(way);
         long encoded = encoder.handleWayTags(way, allowed, 0);
-        assertEquals(100, encoder.getSpeed(encoded), 1e-1);
+        assertEquals(110, encoder.getSpeed(encoded), 1e-1);
 
         way = new OSMWay(1);
         way.setTag("highway", "primary");
@@ -225,6 +229,48 @@ public void testSpeed()
         {
         }
     }
+    
+    @Test
+    public void testMaxSpeedType()
+    {
+        // limit bigger than default road speed
+        OSMWay way = new OSMWay(1);
+        way.setTag("highway", "primary");
+        way.setTag("maxspeed:type", "GB:nsl_dual");
+        long allowed = encoder.acceptWay(way);
+        long encoded = encoder.handleWayTags(way, allowed, 0);
+        assertEquals(Math.round(CarFlagEncoder.SEVENTY_MPH_IN_KPH/5)*5, encoder.getSpeed(encoded), 1e-1);
+
+        way.clearTags();
+        way.setTag("highway", "secondary");
+        way.setTag("maxspeed:type", "GB:nsl_single");
+        allowed = encoder.acceptWay(way);
+        encoded = encoder.handleWayTags(way, allowed, 0);
+        assertEquals(Math.round(CarFlagEncoder.SIXTY_MPH_IN_KPH/5)*5, encoder.getSpeed(encoded), 1e-1);
+
+        way.clearTags();
+        way.setTag("highway", "motorway");
+        way.setTag("maxspeed:type", "GB:motorway");
+        allowed = encoder.acceptWay(way);
+        encoded = encoder.handleWayTags(way, allowed, 0);
+        assertEquals(Math.round(CarFlagEncoder.SEVENTY_MPH_IN_KPH/5)*5, encoder.getSpeed(encoded), 1e-1);
+
+        way.clearTags();
+        way.setTag("highway", "secondary");
+        way.setTag("maxspeed", "30 mph");
+        way.setTag("maxspeed:type", "GB:nsl_single");
+        allowed = encoder.acceptWay(way);
+        encoded = encoder.handleWayTags(way, allowed, 0);
+        assertEquals(Math.round(CarFlagEncoder.THIRTY_MPH_IN_KPH/5)*5, encoder.getSpeed(encoded), 1e-1);
+
+        try
+        {
+            encoder.setSpeed(0, -1);
+            assertTrue(false);
+        } catch (IllegalArgumentException ex)
+        {
+        }
+    }
 
     @Test
     public void testSetSpeed()
@@ -437,7 +483,7 @@ public void testMaxValue()
         way.setTag("highway", "motorway_link");
         way.setTag("maxspeed", "70 mph");
         flags = instance.handleWayTags(way, 1, 0);
-        assertEquals(100, instance.getSpeed(flags), 1e-1);
+        assertEquals(101.5, instance.getSpeed(flags), 1e-1);
     }
 
     @Test
