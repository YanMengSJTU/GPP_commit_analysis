diff --git a/api/src/main/java/com/graphhopper/util/Parameters.java b/api/src/main/java/com/graphhopper/util/Parameters.java
index 04a1fd0397..b8117429c7 100644
--- a/api/src/main/java/com/graphhopper/util/Parameters.java
+++ b/api/src/main/java/com/graphhopper/util/Parameters.java
@@ -199,6 +199,7 @@
         public static final String TIME = "time";
         public static final String DISTANCE = "distance";
         public static final String HIGHWAY = "highway";
+        public static final String WAYID = "wayid";
     }
 
     public static final class PT {
diff --git a/core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java
index 9fb185cbb4..b4676606b1 100644
--- a/core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java
@@ -25,8 +25,6 @@
 import com.graphhopper.reader.osm.conditional.DateRangeParser;
 import com.graphhopper.routing.weighting.TurnWeighting;
 import com.graphhopper.util.*;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
 
 import java.util.ArrayList;
 import java.util.HashSet;
@@ -44,8 +42,8 @@
  * @see EncodingManager
  */
 public abstract class AbstractFlagEncoder implements FlagEncoder, TurnCostEncoder {
+
     protected final static int K_FORWARD = 0, K_BACKWARD = 1;
-    private final static Logger logger = LoggerFactory.getLogger(AbstractFlagEncoder.class);
     /* restriction definitions where order is important */
     protected final List<String> restrictions = new ArrayList<>(5);
     protected final Set<String> intendedValues = new HashSet<>(5);
@@ -477,9 +475,9 @@ protected double getFerrySpeed(ReaderWay way) {
                     } else {
                         long lastId = way.getNodes().isEmpty() ? -1 : way.getNodes().get(way.getNodes().size() - 1);
                         long firstId = way.getNodes().isEmpty() ? -1 : way.getNodes().get(0);
-                        if (firstId != lastId)
-                            logger.warn("Unrealistic long duration ignored in way with way ID=" + way.getId() + " : Duration tag value="
-                                    + way.getTag("duration") + " (=" + Math.round(duration / 60d) + " minutes)");
+//                        if (firstId != lastId)
+//                            logger.warn("Unrealistic long duration ignored in way with way ID=" + way.getId() + " : Duration tag value="
+//                                    + way.getTag("duration") + " (=" + Math.round(duration / 60d) + " minutes)");
                         durationInHours = 0;
                     }
                 }
diff --git a/core/src/main/java/com/graphhopper/routing/util/HappyMapsFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/HappyMapsFlagEncoder.java
index 1fefdcda3e..ffb217fe20 100644
--- a/core/src/main/java/com/graphhopper/routing/util/HappyMapsFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/HappyMapsFlagEncoder.java
@@ -8,10 +8,7 @@
 //import org.slf4j.LoggerFactory;
 
 import java.io.*;
-import java.util.HashMap;
-import java.util.Map;
-import java.util.List;
-import java.util.Arrays;
+import java.util.*;
 
 public class HappyMapsFlagEncoder extends FootFlagEncoder {
 //    private final static Logger logger = LoggerFactory.getLogger(HappyMapsFlagEncoder.class);
@@ -20,6 +17,7 @@
 
     protected EncodedDoubleValue natureEncoder;
     protected EncodedValue highwayEncoder;
+    protected EncodedValue wayidEncoder;
 
     private final Map<Long, Map<String, Double>> wayid2weights = new HashMap<>();
     private final Map<String, Integer> highwayMap = new HashMap<>();
@@ -30,12 +28,39 @@ public HappyMapsFlagEncoder(PMap configuration) {
         // highway and certain tags like ferry and shuttle_train which can be used here (no logical overlap)
         List<String> highwayList = Arrays.asList(
                 /* reserve index=0 for unset roads (not accessible) */
+
                 "_default",
+
                 "motorway", "motorway_link", "motorroad", "trunk", "trunk_link",
+                "bus_guideway", "escape", "cycleway", "raceway", "bridleway", "proposed", "construction",
+
+
                 "primary", "primary_link", "secondary", "secondary_link", "tertiary", "tertiary_link",
                 "unclassified", "residential", "living_street", "service", "road", "track",
-                "forestry", "cycleway", "steps", "path", "footway", "pedestrian",
-                "ferry", "shuttle_train");
+                 "steps", "path", "footway", "pedestrian");
+
+
+//        avoidHighwayTags.add("motorway");
+//        avoidHighwayTags.add("motorway_link");
+//        avoidHighwayTags.add("trunk");
+//        avoidHighwayTags.add("trunk_link");
+//        avoidHighwayTags.add("bus_guideway");
+//        avoidHighwayTags.add("escape");
+//        avoidHighwayTags.add("cycleway");
+//        avoidHighwayTags.add("raceway");
+//        avoidHighwayTags.add("bridleway");
+//        avoidHighwayTags.add("proposed");
+//        avoidHighwayTags.add("construction");
+//        avoidHighwayTags.add("primary_link");
+//        avoidHighwayTags.add("secondary");
+//        avoidHighwayTags.add("secondary_link");
+//        avoidHighwayTags.add("tertiary");
+//        avoidHighwayTags.add("tertiary_link");
+
+
+//        "forestry", "ferry"
+
+
         int counter = 0;
         for (String hw : highwayList) {
             highwayMap.put(hw, counter++);
@@ -102,13 +127,29 @@ public double getTurnCost(long flag) {
     @Override
     public long acceptWay(ReaderWay way) {
         String highwayValue = way.getTag("highway");
-
         if (highwayValue == null) {
+            long acceptPotentially = 0;
 
-            if ((way.hasTag("route", ferries)) ||
-                    (way.hasTag("railway", "platform")) ||
-                    (way.hasTag("man_made", "pier")))
-                return 0;
+            if (way.hasTag("route", ferries)) {
+                String footTag = way.getTag("foot");
+                if (footTag == null || "yes".equals(footTag))
+                    acceptPotentially = acceptBit | ferryBit;
+            }
+
+            // special case not for all acceptedRailways, only platform
+            if (way.hasTag("railway", "platform"))
+                acceptPotentially = acceptBit;
+
+            if (way.hasTag("man_made", "pier"))
+                acceptPotentially = acceptBit;
+
+            if (acceptPotentially != 0) {
+                if (way.hasTag(restrictions, restrictedValues) && !getConditionalTagInspector().isRestrictedWayConditionallyPermitted(way))
+                    return 0;
+                return acceptPotentially;
+            }
+
+            return 0;
         }
 
         String sacScale = way.getTag("sac_scale");
@@ -144,6 +185,53 @@ public long acceptWay(ReaderWay way) {
             return 0;
 
         return acceptBit;
+
+
+
+//        String highwayValue = way.getTag("highway");
+//        String motorroad = way.getTag("highway");
+//
+//        if (highwayValue != null) {
+//
+//            if ((way.hasTag("motorroad", "yes")) || (avoidHighwayTags.contains(highwayValue)))
+//                return 0;
+//
+//            // do not get our feet wet, "yes" is already included above
+//            if (isBlockFords() && (way.hasTag("highway", "ford") || way.hasTag("ford")))
+//                return 0;
+//
+//            // check access restrictions
+//            if (way.hasTag(restrictions, restrictedValues) && !getConditionalTagInspector().isRestrictedWayConditionallyPermitted(way))
+//                return 0;
+//
+//            return acceptBit;
+//
+//        }
+//
+//        if (way.hasTag("foot", intendedValues))
+//            return acceptBit;
+//
+//        if (way.hasTag("sidewalk", sidewalkValues))
+//            return acceptBit;
+//
+//
+//        return acceptBit;
+
+
+//        access = https://wiki.openstreetmap.org/wiki/Key:access
+//        restrictions =
+
+//        restrictions [foot, access]
+//        restrictedValues no, emergency, private, military, restricted]
+//        intendedValues[official, permissive, designated, yes]
+
+//        allowed [tertiary_link, unclassified, primary_link, tertiary, living_street, trunk, steps, secondary, path,
+//          residential, road, service, footway, pedestrian, track, secondary_link, trunk_link, cycleway, primary]
+//        avoid [secondary, tertiary_link, primary_link, tertiary, trunk, secondary_link, trunk_link, primary]
+//        safe [path, residential, service, footway, pedestrian, living_street, track, steps]
+
+        // ConditionalOSMTagInspector: removed
+        // PriorityCode - PriorityWeighting: assign priorities to ways => check for next releases
     }
 
 
@@ -159,6 +247,9 @@ public int defineWayBits(int index, int shift) {
         highwayEncoder = new EncodedValue("highway", shift, 5, 1, 0, highwayMap.size(), true);
         shift += highwayEncoder.getBits();
 
+        wayidEncoder = new EncodedValue("wayid", shift, 32, 1, 0, Integer.MAX_VALUE);
+        shift += wayidEncoder.getBits();
+
         return shift;
     }
 
@@ -174,6 +265,8 @@ public long handleWayTags(ReaderWay way, long allowed, long relationFlags){
         // HIGHWAY
         int hwValue = getHighwayValue(way);
         flags = highwayEncoder.setValue(flags, hwValue);
+        // WAYID
+        flags = wayidEncoder.setValue(flags, way.getId());
 
         return flags;
     }
@@ -236,6 +329,11 @@ public double getNature(EdgeIteratorState edge) {
         return natureEncoder.getDoubleValue(flags);
     }
 
+    public long getWayid(EdgeIteratorState edge) {
+        long flags = edge.getFlags();
+        return wayidEncoder.getValue(flags);
+    }
+
 
     public Map<String, Double> getCustomWeightsByWayId(long wayid) {
         return this.getCustomWeights().get(new Long(wayid));
diff --git a/core/src/main/java/com/graphhopper/util/details/PathDetailsBuilderFactory.java b/core/src/main/java/com/graphhopper/util/details/PathDetailsBuilderFactory.java
index 88e777c267..92b522981d 100644
--- a/core/src/main/java/com/graphhopper/util/details/PathDetailsBuilderFactory.java
+++ b/core/src/main/java/com/graphhopper/util/details/PathDetailsBuilderFactory.java
@@ -53,6 +53,9 @@
         if (requestedPathDetails.contains(HIGHWAY))
             builders.add(new HighwayDetails(encoder));
 
+        if (requestedPathDetails.contains(WAYID))
+            builders.add(new WayidDetails(encoder));
+
         if (requestedPathDetails.size() != builders.size()) {
             throw new IllegalArgumentException("You requested the details " + requestedPathDetails + " but we could only find " + builders);
         }
diff --git a/core/src/main/java/com/graphhopper/util/details/WayidDetails.java b/core/src/main/java/com/graphhopper/util/details/WayidDetails.java
new file mode 100644
index 0000000000..be88fd8021
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/util/details/WayidDetails.java
@@ -0,0 +1,36 @@
+package com.graphhopper.util.details;
+
+import com.graphhopper.routing.util.FlagEncoder;
+import com.graphhopper.routing.util.HappyMapsFlagEncoder;
+import com.graphhopper.util.EdgeIteratorState;
+
+import static com.graphhopper.util.Parameters.DETAILS.WAYID;
+
+public class WayidDetails extends AbstractPathDetailsBuilder {
+
+    private long wayid = -1;
+    private final HappyMapsFlagEncoder encoder;
+
+    public WayidDetails(FlagEncoder encoder) {
+
+        super(WAYID);
+        this.encoder = (HappyMapsFlagEncoder) encoder;
+    }
+
+    @Override
+    public boolean isEdgeDifferentToLastEdge(EdgeIteratorState edge) {
+
+        long current = encoder.getWayid(edge);
+
+        if (wayid == -1 || wayid!=current) {
+            wayid = current;
+            return true;
+        }
+        return false;
+    }
+
+    @Override
+    public Object getCurrentValue() {
+        return wayid;
+    }
+}
\ No newline at end of file
