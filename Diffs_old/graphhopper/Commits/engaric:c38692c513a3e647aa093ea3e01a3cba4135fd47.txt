diff --git a/core/src/main/java/com/graphhopper/GraphHopper.java b/core/src/main/java/com/graphhopper/GraphHopper.java
index 029b265fdb..43e06b83a1 100644
--- a/core/src/main/java/com/graphhopper/GraphHopper.java
+++ b/core/src/main/java/com/graphhopper/GraphHopper.java
@@ -533,8 +533,9 @@ public TranslationMap getTranslationMap() {
 	 * "graphhopper.config")
 	 */
 	public GraphHopper init(CmdArgs args) {
-		this.args = CmdArgs.readFromConfigAndMerge(args, "config",
+		args = CmdArgs.readFromConfigAndMerge(args, "config",
 				"graphhopper.config");
+		this.args=args;
 		String tmpOsmFile = args.get("osmreader.osm", "");
 		if (!Helper.isEmpty(tmpOsmFile))
 			osmFile = tmpOsmFile;
@@ -902,19 +903,20 @@ public Weighting createWeighting(WeightingMap weightingMap,
 			else
 				result = new FastestWeighting(encoder);
 		} else if ("fastavoid".equalsIgnoreCase(weighting)) {
-			String avoidances = weightingMap.get("avoidances", "cliff");
+			String avoidanceString = weightingMap.get("avoidances", "cliff");
+			String[] avoidances = avoidanceString.split(",");
 			if (encoder.supports(PriorityWeighting.class))
 				result = new PriorityWithAvoidancesWeighting(encoder, avoidances);
 			else
 				result = new FastestWithAvoidancesWeighting(encoder, avoidances);
 		} else if ("shortavoid".equalsIgnoreCase(weighting)) {
-			String avoidances = weightingMap.get("avoidances", "cliff");
+			String avoidanceString = weightingMap.get("avoidances", "cliff");
+			String[] avoidances = avoidanceString.split(",");
 			result = new ShortestWithAvoidancesWeighting(encoder, avoidances);
 		} else {
 			throw new UnsupportedOperationException("weighting " + weighting
 					+ " not supported");
 		}
-		System.err.println("WEIGHTING:" + result.getClass());
 		return result;
 	}
 
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/Boulders.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/Boulders.java
index 3101db5d3b..102fe82a65 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/Boulders.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/Boulders.java
@@ -10,7 +10,7 @@
     @Override
     protected void applyAttributes(Way way)
     {
-        way.setTag("natural", "rocks");
+        way.setTag("natural", "boulders");
     }
 
 }
diff --git a/core/src/main/java/com/graphhopper/routing/util/OsAvoidanceDecorator.java b/core/src/main/java/com/graphhopper/routing/util/OsAvoidanceDecorator.java
index c45200a3e0..4bc60f4006 100644
--- a/core/src/main/java/com/graphhopper/routing/util/OsAvoidanceDecorator.java
+++ b/core/src/main/java/com/graphhopper/routing/util/OsAvoidanceDecorator.java
@@ -17,7 +17,7 @@ public boolean isValidForWay(Way way) {
 		Boulders(2) {
 			@Override
 			public boolean isValidForWay(Way way) {
-				return hasTag(way, "natural", "boulder");
+				return hasTag(way, "natural", "boulders");
 			}
 		},
 		Cliff(4) {
diff --git a/core/src/main/java/com/graphhopper/routing/util/PriorityWithAvoidancesWeighting.java b/core/src/main/java/com/graphhopper/routing/util/PriorityWithAvoidancesWeighting.java
index 2a9d080773..b5b796683f 100644
--- a/core/src/main/java/com/graphhopper/routing/util/PriorityWithAvoidancesWeighting.java
+++ b/core/src/main/java/com/graphhopper/routing/util/PriorityWithAvoidancesWeighting.java
@@ -20,8 +20,6 @@ public double calcWeight( EdgeIteratorState edge, boolean reverse, int prevOrNex
     {
         long wayType = edge.getFlags();
         wayType = encoder.getLong(wayType, AbstractAvoidanceDecorator.KEY);
-        System.err.println("BITMASK:" + bitMask + " BITWEIGHT:" + wayType);
-        
         if(bitMask!=0 && ((wayType & bitMask) == bitMask))
             return Double.POSITIVE_INFINITY;
         return super.calcWeight(edge, reverse, prevOrNextEdgeId);
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/AbstractOsDpnReaderTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/AbstractOsDpnReaderTest.java
index ac0ac1d60a..61567a752c 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/AbstractOsDpnReaderTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/AbstractOsDpnReaderTest.java
@@ -5,38 +5,45 @@
 
 import java.io.File;
 import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Locale;
 
 import org.junit.Before;
 
+import com.graphhopper.GHRequest;
+import com.graphhopper.GHResponse;
+import com.graphhopper.GraphHopper;
 import com.graphhopper.routing.util.AbstractFlagEncoder;
 import com.graphhopper.routing.util.BikeFlagEncoder;
-import com.graphhopper.routing.util.BusFlagEncoder;
+import com.graphhopper.routing.util.DefaultEdgeFilter;
 import com.graphhopper.routing.util.EdgeFilter;
 import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.routing.util.FootFlagEncoder;
+import com.graphhopper.routing.util.OsFootFlagEncoder;
 import com.graphhopper.storage.GraphExtension;
 import com.graphhopper.storage.GraphHopperStorage;
 import com.graphhopper.storage.RAMDirectory;
 import com.graphhopper.storage.TurnCostExtension;
 import com.graphhopper.util.EdgeExplorer;
 import com.graphhopper.util.EdgeIterator;
+import com.graphhopper.util.Helper;
+import com.graphhopper.util.Instruction;
+import com.graphhopper.util.InstructionList;
+import com.graphhopper.util.Translation;
+import com.graphhopper.util.TranslationMap;
+import com.graphhopper.util.shapes.GHPoint;
 
 public abstract class AbstractOsDpnReaderTest {
 
-    protected EncodingManager encodingManager;// = new
-    // EncodingManager("CAR");//"car:com.graphhopper.routing.util.RelationCarFlagEncoder");
-    protected BusFlagEncoder busEncoder;
-    // encodingManager
-    // .getEncoder("CAR");
-    protected EdgeFilter carOutEdges;// = new DefaultEdgeFilter(
-    // carEncoder, false, true);
-    protected EdgeFilter carInEdges;
-    protected boolean turnCosts = true;
-    protected EdgeExplorer carOutExplorer;
-    protected EdgeExplorer explorer;
+	protected EncodingManager encodingManager;
+    protected EdgeFilter footOutEdges;
+    protected EdgeFilter footInEdges;
+    protected boolean turnCosts = false;
     protected BikeFlagEncoder bikeEncoder;
     protected FootFlagEncoder footEncoder;
+	protected EdgeExplorer footOutExplorer;
 
     // RoadNode 880
     protected static double node0Lat = 50.6992070044d;
@@ -66,7 +73,7 @@ public void initEncoding() {
             bikeEncoder = new BikeFlagEncoder();
         }
 
-        footEncoder = new FootFlagEncoder();
+        footEncoder = new OsFootFlagEncoder();
         encodingManager = createEncodingManager();
     }
 
@@ -76,7 +83,10 @@ public void initEncoding() {
      * @return
      */
     protected EncodingManager createEncodingManager() {
-        return new EncodingManager(footEncoder, bikeEncoder);
+    	List<FlagEncoder> list = new ArrayList<FlagEncoder>();
+    	list.add(footEncoder);
+    	list.add(bikeEncoder);
+        return new EncodingManager(list, 8);
     }
 
     protected OsDpnReader readGraphFile(GraphHopperStorage graph, File file)
@@ -95,11 +105,12 @@ protected GraphHopperStorage configureStorage(
         GraphExtension extendedStorage = turnRestrictionsImport ? new TurnCostExtension() : new GraphExtension.NoExtendedStorage();
         GraphHopperStorage graph = new GraphHopperStorage(new RAMDirectory(
                 directory, false), encodingManager, is3D, extendedStorage);
+        footOutExplorer = graph.createEdgeExplorer(new DefaultEdgeFilter(footEncoder, false, true));
         return graph;
     }
 
     protected int getEdge(int from, int to) {
-        EdgeIterator iter = carOutExplorer.setBaseNode(from);
+        EdgeIterator iter = footOutExplorer.setBaseNode(from);
         while (iter.next()) {
             if (iter.getAdjNode() == to) {
                 return iter.getEdge();
@@ -142,4 +153,33 @@ protected void printNodes(EdgeExplorer outExplorer, int numNodes) {
             }
         }
     }
+    
+    protected InstructionList route(GraphHopper graphHopper, double lat1, double lon1, double lat2, double lon2, String avoid) {
+        GHPoint start = new GHPoint(lat1, lon1);
+        GHPoint end = new GHPoint(lat2, lon2);
+        System.out.println("Route from " + start + " to " + end);
+        GHRequest ghRequest = new GHRequest(start, end);
+        ghRequest.setVehicle("foot");
+        if(null!=avoid  && !Helper.isEmpty(avoid)) {
+        	ghRequest.setWeighting("fastavoid");
+        	ghRequest.getHints().put("avoidances", avoid);
+        }
+        GHResponse ghResponse = graphHopper.route(ghRequest);
+        //        System.err.println("ghResponse.getPoints() " + ghResponse.getPoints());
+        InstructionList instructionList = ghResponse.getInstructions();
+        //        outputInstructionList(instructionList);
+        return instructionList;
+    }
+    
+    protected void outputInstructionList(InstructionList instructionList) {
+        //        System.err.println("ghResponse.getInstructions() " + ghResponse.getInstructions());
+        //        System.err.println("ghResponse.getDebugInfo() " + ghResponse.getDebugInfo());
+        System.out.println("Turn Descriptions:");
+        Translation tr = new TranslationMap().doImport().getWithFallBack(Locale.US);
+        for (Instruction instruction : instructionList) {
+            System.out.println("\t" + instruction.getName() + "\t" + instruction.getDistance() + "\t" + instruction.getSign() + "\t" + instruction.getTime() + "\t" + instruction.getTurnDescription(tr));
+        }
+        System.out.println("End Turn Descriptions");
+
+    }
 }
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/BouldersTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/BouldersTest.java
index 8ac7d8a169..4b55358ac3 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/BouldersTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/BouldersTest.java
@@ -28,7 +28,7 @@ public void init() {
 	    @Test
 	    public void testVisitWayAttribute() throws Exception {
 	        visitor.visitWayAttribute("boulders", way);
-	        verify(way).setTag("natural", "rocks");
+	        verify(way).setTag("natural", "boulders");  // Not an osm tag but what makes sense for dpn
 	    }
 
 }
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/DpnAttributeAvoidanceTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/DpnAttributeAvoidanceTest.java
new file mode 100644
index 0000000000..a2e5e73aad
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/DpnAttributeAvoidanceTest.java
@@ -0,0 +1,38 @@
+package com.graphhopper.reader.osgb.dpn;
+
+import static org.junit.Assert.assertEquals;
+
+import java.io.File;
+import java.io.IOException;
+import java.util.HashMap;
+import java.util.Map;
+
+import org.junit.Test;
+
+import com.graphhopper.GraphHopper;
+import com.graphhopper.util.CmdArgs;
+import com.graphhopper.util.InstructionList;
+
+public class DpnAttributeAvoidanceTest extends AbstractOsDpnReaderTest {
+	
+
+	@Test
+	public void testAvoidBoulder() throws IOException {
+		File file = new File("./src/test/resources/com/graphhopper/reader/osgb/dpn/os-dpn-avoid.xml");
+		GraphHopper hopper = new GraphHopper();
+		Map<String, String> map = new HashMap<String, String>();
+		map.put("graph.flagencoders", "foot");
+		map.put("osmreader.osm", file.getAbsolutePath());
+		map.put("reader.implementation", "OSDPN");
+		map.put("prepare.chweighting", "none");
+		map.put("graph.location", "./target/output/dpn-avoid-gh");
+		CmdArgs args = new CmdArgs(map);
+		hopper.init(args);
+		hopper.importOrLoad();
+		InstructionList instructionList = route(hopper, 50.70, -3.49, 50.69, -3.91, null);
+        assertEquals("Should be Link 17 as that is the shorteste route", "Link 17", instructionList.get(1).getName());
+        instructionList = route(hopper, 50.70, -3.49, 50.69, -3.91, "boulders");
+        assertEquals("Should be Link 19 as that avoids the boulder field", "Link 19", instructionList.get(1).getName());
+	}
+
+}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/OsDpnReaderTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/OsDpnReaderTest.java
index 9b11ca016b..8dc699350d 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/OsDpnReaderTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/OsDpnReaderTest.java
@@ -28,14 +28,14 @@ public void testReadDpnSampleLayout() throws IOException
 
 	assertEquals(5, graph.getNodes());
 
-	assertEquals(4, count(explorer.setBaseNode(0))); // Central Tower
-	assertEquals(1, count(explorer.setBaseNode(1))); // Cross Road Vertex
-	assertEquals(1, count(explorer.setBaseNode(2))); // Cross Road Vertex
-	assertEquals(1, count(explorer.setBaseNode(3))); // Cross Road Vertex
-	assertEquals(1, count(explorer.setBaseNode(4))); // Cross Road Vertex
+	assertEquals(4, count(footOutExplorer.setBaseNode(0))); // Central Tower
+	assertEquals(1, count(footOutExplorer.setBaseNode(1))); // Cross Road Vertex
+	assertEquals(1, count(footOutExplorer.setBaseNode(2))); // Cross Road Vertex
+	assertEquals(1, count(footOutExplorer.setBaseNode(3))); // Cross Road Vertex
+	assertEquals(1, count(footOutExplorer.setBaseNode(4))); // Cross Road Vertex
 
 	// Assert that this is true
-	EdgeIterator iter = explorer.setBaseNode(0);
+	EdgeIterator iter = footOutExplorer.setBaseNode(0);
 	assertTrue(iter.next());
 	assertEquals(4, iter.getAdjNode());
 	assertTrue(iter.next());
@@ -46,22 +46,22 @@ public void testReadDpnSampleLayout() throws IOException
 	assertEquals(1, iter.getAdjNode());
 	assertFalse(iter.next());
 
-	iter = explorer.setBaseNode(1);
+	iter = footOutExplorer.setBaseNode(1);
 	assertTrue(iter.next());
 	assertEquals(0, iter.getAdjNode());
 	assertFalse(iter.next());
 
-	iter = explorer.setBaseNode(2);
+	iter = footOutExplorer.setBaseNode(2);
 	assertTrue(iter.next());
 	assertEquals(0, iter.getAdjNode());
 	assertFalse(iter.next());
 
-	iter = explorer.setBaseNode(3);
+	iter = footOutExplorer.setBaseNode(3);
 	assertTrue(iter.next());
 	assertEquals(0, iter.getAdjNode());
 	assertFalse(iter.next());
 
-	iter = explorer.setBaseNode(4);
+	iter = footOutExplorer.setBaseNode(4);
 	assertTrue(iter.next());
 	assertEquals(0, iter.getAdjNode());
 	assertFalse(iter.next());
@@ -73,7 +73,7 @@ public void testReadDpnSampleName() throws IOException
 	final GraphHopperStorage graph = readGraph();
 	configureExplorer(graph);
 
-	EdgeIterator iter = explorer.setBaseNode(0);
+	EdgeIterator iter = footOutExplorer.setBaseNode(0);
 	assertTrue(iter.next());
 	assertTrue(iter.next());
 	assertTrue(iter.next());
@@ -87,7 +87,7 @@ public void testReadDpnSampleNameWithAlternate() throws IOException
 	final GraphHopperStorage graph = readGraph();
 	configureExplorer(graph);
 
-	EdgeIterator iter = explorer.setBaseNode(0);
+	EdgeIterator iter = footOutExplorer.setBaseNode(0);
 	assertTrue(iter.next());
 	assertTrue(iter.next());
 	assertTrue(iter.next());
@@ -101,7 +101,7 @@ public void testReadDpnSampleNameDefaultToTrackType() throws IOException
 	final GraphHopperStorage graph = readGraph();
 	configureExplorer(graph);
 
-	EdgeIterator iter = explorer.setBaseNode(0);
+	EdgeIterator iter = footOutExplorer.setBaseNode(0);
 	assertTrue(iter.next());
 	assertEquals("No Name field available so should report track type", "Alley", iter.getName());
     }
@@ -113,7 +113,7 @@ public void testReadDpnSampleNameDefaultToTrackFriendlyNameWhenNoPhysicalManifes
 	final GraphHopperStorage graph = readGraph();
 	configureExplorer(graph);
 
-	EdgeIterator iter = explorer.setBaseNode(0);
+	EdgeIterator iter = footOutExplorer.setBaseNode(0);
 	assertTrue(iter.next());
 	assertTrue(iter.next());
 	assertEquals("No Name field available so should be report track type", "Route",
@@ -122,7 +122,7 @@ public void testReadDpnSampleNameDefaultToTrackFriendlyNameWhenNoPhysicalManifes
 
     private void configureExplorer(final GraphHopperStorage graph)
     {
-	explorer = graph.createEdgeExplorer(new DefaultEdgeFilter(footEncoder, true, true));
+    	footOutExplorer = graph.createEdgeExplorer(new DefaultEdgeFilter(footEncoder, true, true));
     }
 
     private GraphHopperStorage readGraph() throws IOException
diff --git a/core/src/test/java/com/graphhopper/routing/util/OsAvoidanceDecoratorTest.java b/core/src/test/java/com/graphhopper/routing/util/OsAvoidanceDecoratorTest.java
index d5ef6474fa..412b33a491 100644
--- a/core/src/test/java/com/graphhopper/routing/util/OsAvoidanceDecoratorTest.java
+++ b/core/src/test/java/com/graphhopper/routing/util/OsAvoidanceDecoratorTest.java
@@ -20,7 +20,7 @@ public void defineWayBits() {
     @Test
     public void testBoulderAttributeStorage() {
         Way way = new OSITNWay(1L);
-        way.setTag("natural", "boulder");
+        way.setTag("natural", "boulders");
         long wayFlag = osAvoidances.handleWayTags(way,0);
         assertEquals(OsAvoidanceDecorator.AvoidanceType.Boulders.getValue(), wayFlag);
 
diff --git a/core/src/test/resources/com/graphhopper/reader/osgb/dpn/os-dpn-avoid.xml b/core/src/test/resources/com/graphhopper/reader/osgb/dpn/os-dpn-avoid.xml
new file mode 100644
index 0000000000..33875f3f60
--- /dev/null
+++ b/core/src/test/resources/com/graphhopper/reader/osgb/dpn/os-dpn-avoid.xml
@@ -0,0 +1,181 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<gml:FeatureCollection xmlns:gml="http://www.opengis.net/gml/3.2"
+	xsi:schemaLocation="http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd"
+	gml:id="DPN" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+	xmlns:xs="http://www.w3.org/2001/XMLSchema"
+	xmlns:dpn="http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0"
+	xmlns:gmd="http://www.isotc211.org/2005/gmd" xmlns:gco="http://www.isotc211.org/2005/gco"
+	xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:gss="http://www.isotc211.org/2005/gss"
+	xmlns:gts="http://www.isotc211.org/2005/gts" xmlns:gsr="http://www.isotc211.org/2005/gsr"
+	xmlns:gmlxbt="http://www.opengis.net/gml/3.3/xbt">
+	<gml:featureMember>
+		<dpn:RouteNode gml:id='osgb4000000025277879'>
+			<dpn:versionID>2</dpn:versionID>
+			<dpn:versionDate>2005-09-13</dpn:versionDate>
+			<dpn:descriptiveTerm codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/RouteNodeDescriptiveTermValue#Junction">Junction</dpn:descriptiveTerm>
+			<dpn:geometry>
+				<gml:Point srsName='dpn:BNG'>
+					<gml:pos>295000.000 90000.000 362.62</gml:pos>
+				</gml:Point>
+			</dpn:geometry>
+		</dpn:RouteNode>
+	</gml:featureMember>
+	<gml:featureMember>
+		<dpn:RouteNode gml:id='osgb4000000025277880'>
+			<dpn:versionID>2</dpn:versionID>
+			<dpn:versionDate>2005-09-13</dpn:versionDate>
+			<dpn:descriptiveTerm codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/RouteNodeDescriptiveTermValue#Junction">Junction</dpn:descriptiveTerm>
+			<dpn:geometry>
+				<gml:Point srsName='dpn:BNG'>
+					<gml:pos>290000.000 90000.000 362.62</gml:pos>
+				</gml:Point>
+			</dpn:geometry>
+		</dpn:RouteNode>
+	</gml:featureMember>
+	<gml:featureMember>
+		<dpn:RouteNode gml:id='osgb4000000025277882'>
+			<dpn:versionID>2</dpn:versionID>
+			<dpn:versionDate>2005-09-13</dpn:versionDate>
+			   <dpn:descriptiveTerm codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/RouteNodeDescriptiveTermValue#Junction">Junction</dpn:descriptiveTerm>
+			<dpn:geometry>
+				<gml:Point srsName='dpn:BNG'>
+					<gml:pos>270000.000 90000.000 362.62</gml:pos>
+				</gml:Point>
+			</dpn:geometry>
+		</dpn:RouteNode>
+	</gml:featureMember>
+	<gml:featureMember>
+		<dpn:RouteNode gml:id='osgb4000000025277883'>
+			<dpn:versionID>2</dpn:versionID>
+			<dpn:versionDate>2005-09-13</dpn:versionDate>
+			   <dpn:descriptiveTerm codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/RouteNodeDescriptiveTermValue#Junction">Junction</dpn:descriptiveTerm>
+			<dpn:geometry>
+				<gml:Point srsName='dpn:BNG'>
+					<gml:pos>280000.000 80000.000 362.62</gml:pos>
+				</gml:Point>
+			</dpn:geometry>
+		</dpn:RouteNode>
+	</gml:featureMember>
+	<gml:featureMember>
+		<dpn:RouteNode gml:id='osgb4000000025277884'>
+			<dpn:versionID>2</dpn:versionID>
+			<dpn:versionDate>2005-09-13</dpn:versionDate>
+			<dpn:theme>Road Network</dpn:theme>
+			   <dpn:descriptiveTerm codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/RouteNodeDescriptiveTermValue#Junction">Junction</dpn:descriptiveTerm>
+			<dpn:geometry>
+				<gml:Point srsName='dpn:BNG'>
+					<gml:pos>280000.000 95000.000 362.62</gml:pos>
+				</gml:Point>
+			</dpn:geometry>
+		</dpn:RouteNode>
+	</gml:featureMember>
+	<gml:featureMember>
+		<dpn:RouteNode gml:id='osgb4000000025277885'>
+			<dpn:versionID>2</dpn:versionID>
+			<dpn:versionDate>2005-09-13</dpn:versionDate>
+			   <dpn:descriptiveTerm codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/RouteNodeDescriptiveTermValue#Junction">Junction</dpn:descriptiveTerm>
+			<dpn:geometry>
+				<gml:Point srsName='dpn:BNG'>
+					<gml:pos>265000.000 90000.000 362.62</gml:pos>
+				</gml:Point>
+			</dpn:geometry>
+		</dpn:RouteNode>
+	</gml:featureMember>
+	<gml:featureMember>
+		<dpn:RouteLink gml:id="osgb4000000025288016">
+			<dpn:versionID>4</dpn:versionID>
+			<dpn:versionDate>2006-02-03</dpn:versionDate>
+			<dpn:startNode xlink:href="#4000000025277879" />
+			<dpn:endNode xlink:href="#4000000025277880" />
+			<dpn:descriptiveTerm codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#NoPhysicalManifestation">No Physical Manifestation</dpn:descriptiveTerm>
+			 <dpn:name>Link 16</dpn:name>
+			<dpn:rightOfUse codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/RightOfWayValue#Footpath">Footpath</dpn:rightOfUse>
+			<dpn:geometry>
+				<gml:LineString srsName="dpn:BNG">
+					<gml:posList srsDimension="3" count="2">295000.000 90000.000 362.62 290000.000 90000.000 362.62</gml:posList>
+				</gml:LineString>
+			</dpn:geometry>
+		</dpn:RouteLink>
+	</gml:featureMember>
+	<gml:featureMember>
+		<dpn:RouteLink gml:id="osgb4000000025288017">
+			<dpn:versionID>4</dpn:versionID>
+			<dpn:versionDate>2006-02-03</dpn:versionDate>
+			<dpn:startNode xlink:href="#4000000025277880" />
+			<dpn:endNode xlink:href="#4000000025277884" />
+			<dpn:descriptiveTerm codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#NoPhysicalManifestation">No Physical Manifestation</dpn:descriptiveTerm>
+			<dpn:name>Link 17</dpn:name>
+			<dpn:rightOfUse codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/RightOfWayValue#Footpath">Footpath</dpn:rightOfUse>
+			<dpn:geometry>
+				<gml:LineString srsName="dpn:BNG">
+					<gml:posList srsDimension="3" count="2">290000.000 90000.000 362.62 280000.000 95000.000 362.62</gml:posList>
+				</gml:LineString>
+			</dpn:geometry>
+		</dpn:RouteLink>
+	</gml:featureMember>
+	<gml:featureMember>
+		<dpn:RouteLink gml:id="osgb4000000025288018">
+			<dpn:versionID>4</dpn:versionID>
+			<dpn:versionDate>2006-02-03</dpn:versionDate>
+			<dpn:startNode xlink:href="#4000000025277884" />
+			<dpn:endNode xlink:href="#4000000025277882" />
+			<dpn:descriptiveTerm codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#NoPhysicalManifestation">No Physical Manifestation</dpn:descriptiveTerm>
+			<dpn:name>Link 18</dpn:name>
+			<dpn:potentialHazardCrossed>Boulders</dpn:potentialHazardCrossed>
+			<dpn:rightOfUse codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/RightOfWayValue#Footpath">Footpath</dpn:rightOfUse>
+			<dpn:geometry>
+				<gml:LineString srsName="dpn:BNG">
+					<gml:posList srsDimension="3" count="2">280000.000 95000.000 362.62 270000.000 90000.000 362.62</gml:posList>
+				</gml:LineString>
+			</dpn:geometry>
+		</dpn:RouteLink>
+	</gml:featureMember>
+	<gml:featureMember>
+		<dpn:RouteLink gml:id="osgb4000000025288019">
+			<dpn:versionID>4</dpn:versionID>
+			<dpn:versionDate>2006-02-03</dpn:versionDate>
+			<dpn:startNode xlink:href="#4000000025277880" />
+			<dpn:endNode xlink:href="#4000000025277883" />
+			<dpn:descriptiveTerm	codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#NoPhysicalManifestation">No Physical Manifestation</dpn:descriptiveTerm>
+			<dpn:name>Link 19</dpn:name>
+			<dpn:rightOfUse codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/RightOfWayValue#Footpath">Footpath</dpn:rightOfUse>
+			<dpn:geometry>
+				<gml:LineString srsName="dpn:BNG">
+					<gml:posList srsDimension="3" count="2">290000.000 90000.000 362.62 280000.000 80000.000 362.62</gml:posList>
+				</gml:LineString>
+			</dpn:geometry>
+		</dpn:RouteLink>
+	</gml:featureMember>
+	<gml:featureMember>
+		<dpn:RouteLink gml:id="osgb4000000025288020">
+			<dpn:versionID>4</dpn:versionID>
+			<dpn:versionDate>2006-02-03</dpn:versionDate>
+			<dpn:startNode xlink:href="#4000000025277883" />
+			<dpn:endNode xlink:href="#4000000025277882" />
+			<dpn:descriptiveTerm	codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#NoPhysicalManifestation">No Physical Manifestation</dpn:descriptiveTerm>
+			<dpn:name>Link 20</dpn:name>
+			<dpn:rightOfUse codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/RightOfWayValue#Footpath">Footpath</dpn:rightOfUse>
+			<dpn:geometry>
+				<gml:LineString srsName="dpn:BNG">
+					<gml:posList srsDimension="3" count="2">280000.000 80000.000 362.62 270000.000 90000.000 362.62</gml:posList>
+				</gml:LineString>
+			</dpn:geometry>
+		</dpn:RouteLink>
+	</gml:featureMember>
+	<gml:featureMember>
+		<dpn:RouteLink gml:id="osgb4000000025288021">
+			<dpn:versionID>4</dpn:versionID>
+			<dpn:versionDate>2006-02-03</dpn:versionDate>
+			<dpn:startNode xlink:href="#4000000025277882" />
+			<dpn:endNode xlink:href="#4000000025277885" />
+			<dpn:descriptiveTerm	codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#NoPhysicalManifestation">No Physical Manifestation</dpn:descriptiveTerm>
+			<dpn:name>Link 21</dpn:name>
+			<dpn:rightOfUse codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/RightOfWayValue#Footpath">Footpath</dpn:rightOfUse>
+			<dpn:geometry>
+				<gml:LineString srsName="dpn:BNG">
+					<gml:posList srsDimension="3" count="2">265000.000 90000.000 362.62 270000.000 90000.000 362.62</gml:posList>
+				</gml:LineString>
+			</dpn:geometry>
+		</dpn:RouteLink>
+	</gml:featureMember>
+</gml:FeatureCollection>
\ No newline at end of file
diff --git a/web/src/main/webapp/index.html b/web/src/main/webapp/index.html
index 1fb9fdf561..1712ab63d0 100644
--- a/web/src/main/webapp/index.html
+++ b/web/src/main/webapp/index.html
@@ -62,22 +62,30 @@
                     </button>
                     </div>
                      <div class="collapse">
-                    <form>
+                    <form name="routeoptions">
+                        <table>
+                            <tr>
+                                <th>Route Option</th>
+                            </tr> 
+                            <tr><td><input class="weighting" type="radio" name="weighting" value="fastest" >Fastest  
+                            </td></tr><tr><td><input class="weighting" type="radio" name="weighting" value="shortest" >Shortest
+                           </td></tr>
+                           </table>
                         <table>
                             <tr>
                                 <th>Avoid Hazards</th>
                             </tr> 
-                            <tr><td><input type="checkbox" name="avoidances[]" value="aroad" >A Road  
-                            </td></tr><tr><td><input type="checkbox" name="avoidances[]" value="boulders" >Boulders
-                            </td></tr><tr><td><input type="checkbox" name="avoidances[]" value="cliff" >Cliff
-                            </td></tr><tr><td><input type="checkbox" name="avoidances[]" value="inlandwater" >Inland Water
-                            </td></tr><tr><td><input type="checkbox" name="avoidances[]" value="marsh" >Marsh
-                            </td></tr><tr><td><input type="checkbox" name="avoidances[]" value="quarryorpit" >Quarry Or Pit
-                            </td></tr><tr><td><input type="checkbox" name="avoidances[]" value="scree" >Scree
-                            </td></tr><tr><td><input type="checkbox" name="avoidances[]" value="rock" >Rock
-                            </td></tr><tr><td><input type="checkbox" name="avoidances[]" value="mud" >Mud
-                            </td></tr><tr><td><input type="checkbox" name="avoidances[]" value="sand">Sand
-                            </td></tr><tr><td><input type="checkbox" name="avoidances[]" value="shingle" >Shingle
+                            <tr><td><input class="hazCheck" type="checkbox" name="avoidances[]" value="aroad" >A Road  
+                            </td></tr><tr><td><input class="hazCheck" type="checkbox" name="avoidances[]" value="boulders" >Boulders
+                            </td></tr><tr><td><input class="hazCheck" type="checkbox" name="avoidances[]" value="cliff" >Cliff
+                            </td></tr><tr><td><input class="hazCheck" type="checkbox" name="avoidances[]" value="inlandwater" >Inland Water
+                            </td></tr><tr><td><input class="hazCheck" type="checkbox" name="avoidances[]" value="marsh" >Marsh
+                            </td></tr><tr><td><input class="hazCheck" type="checkbox" name="avoidances[]" value="quarryorpit" >Quarry Or Pit
+                            </td></tr><tr><td><input class="hazCheck" type="checkbox" name="avoidances[]" value="scree" >Scree
+                            </td></tr><tr><td><input class="hazCheck" type="checkbox" name="avoidances[]" value="rock" >Rock
+                            </td></tr><tr><td><input class="hazCheck" type="checkbox" name="avoidances[]" value="mud" >Mud
+                            </td></tr><tr><td><input class="hazCheck" type="checkbox" name="avoidances[]" value="sand">Sand
+                            </td></tr><tr><td><input class="hazCheck" type="checkbox" name="avoidances[]" value="shingle" >Shingle
                             </td></tr>
                         </table>
                     <!--
diff --git a/web/src/main/webapp/js/ghrequest.js b/web/src/main/webapp/js/ghrequest.js
index 294f52f9a5..30203034fe 100644
--- a/web/src/main/webapp/js/ghrequest.js
+++ b/web/src/main/webapp/js/ghrequest.js
@@ -437,6 +437,30 @@ GHRequest.prototype.createPath = function (url) {
     if (this.vehicle && this.vehicle !== "car")
         url += "&vehicle=" + this.vehicle;
     // fastest or shortest
+    var checkedValue = ""; 
+    var inputElements = document.getElementsByClassName('hazCheck');
+    for(var i=0; inputElements[i]; ++i){
+          if(inputElements[i].checked){
+        	  if(checkedValue.length>0) 
+        		    checkedValue += ","
+               checkedValue += inputElements[i].value;
+          }
+    }
+    if(document.routeoptions.weighting[1].checked == true){
+    	this.weighting = "shortest";
+    } else {
+    	this.weighting = "fastest";
+    }
+    if(checkedValue.length>0) {
+    	if(this.weighting==="fastest") {
+    		this.weighting = "fastavoid";
+    	}
+    	else {
+    		this.weighting="shortavoid";
+    	}
+    	url += "&avoidances=" + checkedValue;
+    }
+    
     if (this.weighting && this.weighting !== "fastest")
         url += "&weighting=" + this.weighting;
     if (this.locale && this.locale !== "en")
@@ -459,6 +483,7 @@ GHRequest.prototype.createPath = function (url) {
     for (var key in this.api_params) {
         url += "&" + key + "=" + this.api_params[key];
     }
+    
     return url;
 };
 
