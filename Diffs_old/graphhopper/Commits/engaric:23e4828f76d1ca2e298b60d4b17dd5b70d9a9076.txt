diff --git a/core/src/main/java/com/graphhopper/routing/util/BanPrivateWeighting.java b/core/src/main/java/com/graphhopper/routing/util/BanPrivateWeighting.java
new file mode 100644
index 0000000000..0f86af2c4e
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/routing/util/BanPrivateWeighting.java
@@ -0,0 +1,32 @@
+package com.graphhopper.routing.util;
+
+import com.graphhopper.util.EdgeIteratorState;
+
+public class BanPrivateWeighting implements Weighting
+{
+
+	private FlagEncoder encoder;
+	private Weighting innerWeighting;
+
+	public BanPrivateWeighting( FlagEncoder encoder, Weighting weighting )
+	{
+		this.encoder = encoder;
+		this.innerWeighting = weighting;
+	}
+
+	@Override
+	public double getMinWeight( double distance )
+	{
+		return innerWeighting.getMinWeight(distance);
+	}
+
+	@Override
+	public double calcWeight( EdgeIteratorState edgeState, boolean reverse, int prevOrNextEdgeId )
+	{
+		if(encoder.getLong(edgeState.getFlags(), EscapePrivateWeighting.KEY)>0) {
+			return Double.POSITIVE_INFINITY;
+		}
+		return innerWeighting.calcWeight(edgeState, reverse, prevOrNextEdgeId);
+	}
+
+}
diff --git a/core/src/test/java/com/graphhopper/routing/util/BanPrivateWeightingTest.java b/core/src/test/java/com/graphhopper/routing/util/BanPrivateWeightingTest.java
new file mode 100644
index 0000000000..099b6111eb
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/routing/util/BanPrivateWeightingTest.java
@@ -0,0 +1,60 @@
+package com.graphhopper.routing.util;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+import static org.mockito.Matchers.any;
+import static org.mockito.Matchers.anyBoolean;
+import static org.mockito.Matchers.anyInt;
+import static org.mockito.Matchers.anyLong;
+import static org.mockito.Matchers.eq;
+import static org.mockito.Mockito.when;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.util.EdgeIteratorState;
+
+public class BanPrivateWeightingTest {
+	@Mock
+	FlagEncoder encoder;
+	
+	@Mock
+	Weighting innerWeighting;
+	
+	@Mock
+	EdgeIteratorState edge;
+	
+	@Before
+	public void configureMocks() {
+		MockitoAnnotations.initMocks(this);
+		configureInner();
+	}
+
+	@Test
+	public void testAllowNonPrivate() {
+		when(encoder.getLong(anyLong(), eq(EscapePrivateWeighting.KEY))).thenReturn(0L);
+		BanPrivateWeighting weighting = new BanPrivateWeighting(encoder, innerWeighting);
+		int prevOrNextEdgeId=1;
+		boolean reverse = false;
+		assertEquals("Traversable Edges should have innerweightings weight", 10D, (weighting.calcWeight(edge, reverse , prevOrNextEdgeId)),0);
+	}
+	
+	@Test
+	public void testDisallowPrivate() {
+		when(encoder.getLong(anyLong(), eq(EscapePrivateWeighting.KEY))).thenReturn(1L);
+		BanPrivateWeighting weighting = new BanPrivateWeighting(encoder, innerWeighting);
+		int prevOrNextEdgeId=1;
+		boolean reverse = false;
+		assertTrue("Private Edges should have maximum weight", Double.isInfinite(weighting.calcWeight(edge, reverse , prevOrNextEdgeId)));
+	}
+
+	/**
+	 * Sets up :-
+	 *  inner weighting so only effect of BanPrivateWeighting should stop access
+	 */
+	private void configureInner() {
+		when(innerWeighting.calcWeight((EdgeIteratorState)any(),anyBoolean(),anyInt())).thenReturn(10D);
+	}
+}
