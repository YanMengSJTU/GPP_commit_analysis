diff --git a/core/itngen.sh b/core/itngen.sh
index a41c3392fe..523cfeb37b 100755
--- a/core/itngen.sh
+++ b/core/itngen.sh
@@ -3,17 +3,22 @@ STARTTIME=$(date +%s)
 LOGIT=
 #LOGIT=:${HOME}/.m2/repository/org/slf4j/slf4j-log4j12/1.7.7/slf4j-log4j12-1.7.7.jar:${HOME}/.m2/repository/log4j/log4j/1.2.17/log4j-1.2.17.jar
 
+# Highways Network Data
+#ITNDATA=/data/Development/highways_network
+#GRAPHOUTPUTDIR=${HOME}/Documents/graphhopper/core/hn-gh
+
+
 # Actual ITN Data
 #ITNDATA=${HOME}/Development/OSMMITN/data
-GRAPHOUTPUTDIR=${HOME}/Documents/graphhopper/core/itn-gh
+#GRAPHOUTPUTDIR=${HOME}/Documents/graphhopper/core/itn-gh
 
 # Sample Data
 #ITNDATA=${HOME}/Development/geoserver-service-test/geoservertest/itn-sample-data/58096-SX9192-2c1.gz
 #GRAPHOUTPUTDIR=${HOME}/Documents/graphhopper/core/58096-SX9192-2c1-gh
 
 # Modified Sample Data
-ITNDATA=/media/sf_/media/shared/modified-exeter/58096-SX9192-modified.xml
-#GRAPHOUTPUTDIR=${HOME}/Documents/graphhopper/core/58096-SX9192-modified-gh
+ ITNDATA=/media/sf_/media/shared/modified-exeter/58096-SX9192-modified.xml
+ GRAPHOUTPUTDIR=${HOME}/Documents/graphhopper/core/58096-SX9192-modified-gh
 
 #ITNDATA=${HOME}/Development/graphhopper2/graphhopper/tools/os-itn-m27-m3-north.xml
 #GRAPHOUTPUTDIR=${HOME}/Documents/graphhopper/core/os-itn-m27-m3-north-gh
@@ -24,7 +29,10 @@ ITNDATA=/media/sf_/media/shared/modified-exeter/58096-SX9192-modified.xml
 #ITNDATA=${HOME}/Development/graphhopper2/graphhopper/tools/os-itn-wickham-direction-error.xml
 #GRAPHOUTPUTDIR=${HOME}/Documents/graphhopper/core/os-itn-wickham-direction-error-gh
 
-java -Xmx4596m -Xms2048m -XX:+UseParallelGC -XX:+UseParallelOldGC -cp ../tools/target/classes:target/classes:${HOME}/.m2/repository/net/java/dev/jsr-275/jsr-275/1.0-beta-2/jsr-275-1.0-beta-2.jar:${HOME}/.m2/repository/java3d/vecmath/1.3.2/vecmath-1.3.2.jar:${HOME}/.m2/repository/org/geotools/gt-opengis/12.1/gt-opengis-12.1.jar:${HOME}/.m2/repository/org/geotools/gt-epsg-hsql/12.1/gt-epsg-hsql-12.1.jar:${HOME}/.m2/repository/org/hsqldb/hsqldb/2.3.2/hsqldb-2.3.2.jar:${HOME}/.m2/repository/javax/media/jai_core/1.1.3/jai_core-1.1.3.jar:${HOME}/.m2/repository/org/geotools/gt-referencing/12.1/gt-referencing-12.1.jar:${HOME}/.m2/repository/org/geotools/gt-metadata/12.1/gt-metadata-12.1.jar:${HOME}/.m2/repository/org/slf4j/slf4j-api/1.7.7/slf4j-api-1.7.7.jar:${HOME}/.m2/repository/net/sf/trove4j/trove4j/3.0.3/trove4j-3.0.3.jar${LOGIT} com.graphhopper.tools.Import osmreader.osm=${ITNDATA} reader.implementation=OSITN graph.location=${GRAPHOUTPUTDIR} config=../config.properties
+java -Xmx4596m -Xms2048m -XX:+UseParallelGC -XX:+UseParallelOldGC -cp ../tools/target/classes:target/classes:${HOME}/.m2/repository/net/java/dev/jsr-275/jsr-275/1.0-beta-2/jsr-275-1.0-beta-2.jar:${HOME}/.m2/repository/java3d/vecmath/1.3.2/vecmath-1.3.2.jar:${HOME}/.m2/repository/org/geotools/gt-opengis/12.1/gt-opengis-12.1.jar:${HOME}/.m2/repository/org/geotools/gt-epsg-hsql/12.1/gt-epsg-hsql-12.1.jar:${HOME}/.m2/repository/org/hsqldb/hsqldb/2.3.2/hsqldb-2.3.2.jar:${HOME}/.m2/repository/javax/media/jai_core/1.1.3/jai_core-1.1.3.jar:${HOME}/.m2/repository/org/geotools/gt-referencing/12.1/gt-referencing-12.1.jar:${HOME}/.m2/repository/org/geotools/gt-metadata/12.1/gt-metadata-12.1.jar:${HOME}/.m2/repository/org/slf4j/slf4j-api/1.7.7/slf4j-api-1.7.7.jar:${HOME}/.m2/repository/net/sf/trove4j/trove4j/3.0.3/trove4j-3.0.3.jar${LOGIT} com.graphhopper.tools.Import osmreader.osm=${ITNDATA} reader.implementation=OSITN graph.location=${GRAPHOUTPUTDIR} graph.flagEncoders="car|turnCosts=true" prepare.chWeighting=none osmreader.acceptWay=car config=../config.properties
+
+
+#osmreader.osm=../58096-SX9192-modified.xml reader.implementation=OSITN graph.location=target/ingestion/58096-SX9192-modified/itn-gh graph.flagEncoders="car|turnCosts=true" prepare.chWeighting=none osmreader.acceptWay=car config=../config.properties
 
 ENDTIME=$(date +%s)
 echo "Generation took $[$ENDTIME - $STARTTIME] seconds"
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnWay.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnWay.java
index 4d1699f468..198183dc5d 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnWay.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnWay.java
@@ -1,14 +1,14 @@
 /*
  *  Licensed to GraphHopper and Peter Karich under one or more contributor
- *  license agreements. See the NOTICE file distributed with this work for 
+ *  license agreements. See the NOTICE file distributed with this work for
  *  additional information regarding copyright ownership.
- * 
- *  GraphHopper licenses this file to you under the Apache License, 
- *  Version 2.0 (the "License"); you may not use this file except in 
+ *
+ *  GraphHopper licenses this file to you under the Apache License,
+ *  Version 2.0 (the "License"); you may not use this file except in
  *  compliance with the License. You may obtain a copy of the License at
- * 
+ *
  *       http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  *  Unless required by applicable law or agreed to in writing, software
  *  distributed under the License is distributed on an "AS IS" BASIS,
  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -17,299 +17,320 @@
  */
 package com.graphhopper.reader.osgb.dpn;
 
-import com.graphhopper.reader.Way;
-
 import gnu.trove.map.TDoubleLongMap;
 import gnu.trove.map.TDoubleObjectMap;
 import gnu.trove.map.TLongObjectMap;
 
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+
+import javax.xml.stream.XMLStreamException;
+import javax.xml.stream.XMLStreamReader;
+
 import org.opengis.geometry.MismatchedDimensionException;
 import org.opengis.referencing.FactoryException;
 import org.opengis.referencing.operation.TransformException;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
-import javax.xml.stream.XMLStreamException;
-import javax.xml.stream.XMLStreamReader;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.potentialHazards.Boulders;
+import com.graphhopper.reader.osgb.dpn.potentialHazards.Cliff;
+import com.graphhopper.reader.osgb.dpn.potentialHazards.Foreshore;
+import com.graphhopper.reader.osgb.dpn.potentialHazards.InlandWater;
+import com.graphhopper.reader.osgb.dpn.potentialHazards.Marsh;
+import com.graphhopper.reader.osgb.dpn.potentialHazards.Mud;
+import com.graphhopper.reader.osgb.dpn.potentialHazards.QuarryOrPit;
+import com.graphhopper.reader.osgb.dpn.potentialHazards.Rock;
+import com.graphhopper.reader.osgb.dpn.potentialHazards.Sand;
+import com.graphhopper.reader.osgb.dpn.potentialHazards.Scree;
+import com.graphhopper.reader.osgb.dpn.potentialHazards.Shingle;
+import com.graphhopper.reader.osgb.dpn.potentialHazards.Spoil;
+import com.graphhopper.reader.osgb.dpn.potentialHazards.TidalWater;
+import com.graphhopper.reader.osgb.dpn.rightOfWay.BridleWay;
+import com.graphhopper.reader.osgb.dpn.rightOfWay.BywayOpenToAllTraffic;
+import com.graphhopper.reader.osgb.dpn.rightOfWay.Footpath;
+import com.graphhopper.reader.osgb.dpn.rightOfWay.None;
+import com.graphhopper.reader.osgb.dpn.rightOfWay.OtherRouteWithPublicAccess;
+import com.graphhopper.reader.osgb.dpn.rightOfWay.PermissiveBridleWay;
+import com.graphhopper.reader.osgb.dpn.rightOfWay.PermissivePath;
+import com.graphhopper.reader.osgb.dpn.rightOfWay.RestrictedByway;
 
 /**
  * Represents an OSM Way
  * <p/>
- * 
+ *
  * @author Nop
  */
 public class OsDpnWay extends OsDpnElement implements Way {
-	protected final List<String> nodes = new ArrayList<String>(5);
-	private String endNode;
-	protected String startCoord;
-	protected String endCoord;
-	private String[] wayCoords;
-	private static final Logger logger = LoggerFactory
-			.getLogger(OsDpnWay.class);
-	private static OsDpnOsmAttributeMappingVisitor[] rightOfWayVisitors = {
-			new BridleWay(), new PermissiveBridleWay(),
-			new BywayOpenToAllTraffic(), new None(),
-			new OtherRouteWithPublicAccess(), new Footpath(),
-			new PermissivePath(), new RestrictedByway() };
-	private static OsDpnOsmAttributeMappingVisitor[] potentialHazardVisitors = {
-			new Boulders(), new Cliff(), new Marsh(), new Mud(), new Sand(),
-			new Scree(), new Shingle(), new Spoil(), new Rock(),
-			new TidalWater() };
-
-	/**
-	 * Constructor for XML Parser
-	 * 
-	 * @throws TransformException
-	 * @throws FactoryException
-	 * @throws MismatchedDimensionException
-	 */
-	public static OsDpnWay create(String idStr, XMLStreamReader parser)
-			throws XMLStreamException, MismatchedDimensionException,
-			FactoryException, TransformException {
-		logger.trace("OsDpnWay.create()");
-		OsDpnWay way = new OsDpnWay(idStr);
-		parser.nextTag();
-		way.setTag("highway", "track");
-		way.readTags(parser);
-		logger.trace(way.toString());
-		return way;
-	}
-
-	public OsDpnWay(String id) {
-		super(id, WAY);
-	}
-
-	public List<String> getNodes() {
-		return nodes;
-	}
-
-	@Override
-	protected int handleCycleRoute(XMLStreamReader parser)
-			throws XMLStreamException {
-		String access = parser.getElementText();
-		if ("true".equals(access)) {
-			setTag("bicycle", "yes");
-		}
-		return parser.getEventType();
-	}
-
-	@Override
-	protected int handleAccessLand(XMLStreamReader parser)
-			throws XMLStreamException {
-		String access = parser.getElementText();
-		if ("true".equals(access)) {
-			setTag("foot", "yes");
-		}
-		return parser.getEventType();
-	}
-
-	@Override
-	protected int handleSurfaceType(XMLStreamReader parser)
-			throws XMLStreamException {
-		String surface;
-		String surfaceType = parser.getElementText();
-		if ("Made Sealed".equals(surfaceType)) {
-			surface = "paved";
-		} else if ("Unmade".equals(surfaceType)) {
-			surface = "ground";
-		} else {
-			surface = "unpaved";
-		}
-		setTag("surface", surface);
-		return parser.getEventType();
-	}
-
-	@Override
-	protected int handlePhysicalLevel(XMLStreamReader parser)
-			throws XMLStreamException {
-		String text = parser.getElementText();
-		if ("Below Surface Level Tunnel".equals(text)) {
-			setTag("tunnel", "yes");
-		} else if ("Above Surface Level On Structure".equals(text)) {
-			setTag("bridge", "yes");
-		}
-		return parser.getEventType();
-	}
-
-	@Override
-	protected int handleRightOfUse(XMLStreamReader parser)
-			throws XMLStreamException {
-		String attributeValue = parser.getElementText().replaceAll(" ", "")
-				.toLowerCase();
-		for (OsDpnOsmAttributeMappingVisitor rightOfWayVisitor : rightOfWayVisitors) {
-			rightOfWayVisitor.visitWayAttribute(attributeValue, this);
-		}
-		return parser.getEventType();
-	}
-
-	@Override
-	protected int handlePotentialHazard(XMLStreamReader parser)
-			throws XMLStreamException {
-		String attributeValue = parser.getElementText().replaceAll(" ", "")
-				.toLowerCase();
-		for (OsDpnOsmAttributeMappingVisitor potentialHazzardVisitor : potentialHazardVisitors) {
-			potentialHazzardVisitor.visitWayAttribute(attributeValue, this);
-		}
-		return parser.getEventType();
-	}
-
-	@Override
-	protected void parseCoords(String lineDefinition) {
-		String[] lineSegments = lineDefinition.split(" ");
-		wayCoords = Arrays
-				.copyOfRange(lineSegments, 1, lineSegments.length - 1);
-		logger.info("parseCoords1" + toString() + " "
-				+ ((wayCoords.length == 0) ? "0" : wayCoords[0]));
-	}
-
-	/**
-	 * Ignores first and last coordinate set as they are also the start and end
-	 * node coordinates and therefore already captured as towers
-	 */
-	@Override
-	protected void parseCoords(int dimensions, String lineDefinition) {
-		String[] lineSegments = lineDefinition.split(" ");
-		int innerCoordCount = lineSegments.length / dimensions - 2;
-		if (innerCoordCount > 0) {
-			wayCoords = new String[innerCoordCount];
-			StringBuilder curString = null;
-			for (int i = dimensions; i < lineSegments.length - dimensions; i++) {
-				String string = lineSegments[i];
-				switch (i % dimensions) {
-				case 0: {
-					int coordNumber = (i / dimensions) - 1;
-					if (coordNumber > 0) {
-						wayCoords[coordNumber - 1] = curString.toString();
-					}
-					curString = new StringBuilder();
-					curString.append(string);
-					break;
-				}
-
-				case 1:
-				case 2: {
-					curString.append(' ');
-					curString.append(string);
-				}
-				}
-			}
-			wayCoords[wayCoords.length - 1] = curString.toString();
-			addWayNodes();
-			logger.info("parsecoord2" + toString() + " "
-					+ ((wayCoords.length == 0) ? "0" : wayCoords[0]));
-		}
-		else
-		{
-			wayCoords = null;
-		}
-		nodes.add(endNode);
-	}
-
-	@Override
-	protected void parseNetworkMember(String elementText) {
-		throw new UnsupportedOperationException();
-	}
-
-	@Override
-	protected void addNode(String nodeId) {
-		String idStr = nodeId.substring(4);
-		if (0 == nodes.size()) {
-			nodes.add(idStr);
-		} else {
-			endNode = idStr;
-		}
-	}
-
-	protected void addWayNodes() {
-		for (int i = 1; i <= wayCoords.length; i++) {
-			long idPrefix = i;
-			String extraId = idPrefix + getId();
-			nodes.add(extraId);
-		}
-	}
-
-	@Override
-	protected void addDirectedLink(String nodeId, String orientation) {
-		throw new UnsupportedOperationException();
-	}
-
-	/**
-	 * Creates a new OsDpnNode for each wayCoord. This also Looks for direction
-	 * flags in edgeIdToXToYToNodeFlagsMap for the wayId, x, y combination. If
-	 * it exists then set the node tag TAG_KEY_NOENTRY_ORIENTATION to true and
-	 * the TAG_KEY_ONEWAY_ORIENTATION node tag to -1 for one direction and true
-	 * for the other.
-	 * 
-	 * @param edgeIdToXToYToNodeFlagsMap
-	 * @return
-	 * @throws TransformException
-	 * @throws FactoryException
-	 * @throws MismatchedDimensionException
-	 */
-	public List<OsDpnNode> evaluateWayNodes(TLongObjectMap<TDoubleObjectMap<TDoubleLongMap>> edgeIdToXToYToNodeFlagsMap)
-			throws MismatchedDimensionException, FactoryException, TransformException 
-			{
-		List<OsDpnNode> wayNodes = new ArrayList<OsDpnNode>();
-
-		if (null != wayCoords) {
-			for (int i = 0; i < wayCoords.length; i++) {
-				String wayCoord = wayCoords[i];
-
-				long idPrefix = (i + 1);
-				String id = idPrefix + getId();
-				OsDpnNode wayNode = new OsDpnNode(id);
-				wayNode.parseCoords(wayCoord);
-
-				logger.info("Node " + getId() + " coords: " + wayCoord
-						+ " tags: ");
-				for (String tagKey : wayNode.getTags().keySet()) {
-					logger.info("\t " + tagKey + " : " + wayNode.getTag(tagKey));
-				}
-				wayNodes.add(wayNode);
-			}
-		}
-		return wayNodes;
-	}
-
-	/**
-	 * Memory management method. Once a way is processed the stored string
-	 * coordinates are no longer required so set them to null so they can be
-	 * garbage collected
-	 */
-	public void clearStoredCoords() 
-	{
-		wayCoords = null;
-		startCoord = null;
-		endCoord = null;
-	}
-
-	public String[] getWayCoords() {
-		return wayCoords;
-	}
-
-	public String getStartCoord() {
-		return startCoord;
-	}
-
-	public String getEndCoord() {
-		return endCoord;
-	}
-
-	protected void parseCoordinateString(String elementText,
-			String elementSeparator) {
-		throw new UnsupportedOperationException();
-
-	}
-
-	@Override
-	public String toString() {
-		return super.toString() + " id:" + getId() + " start:" + nodes.get(0)
-				+ " end:" + nodes.get(nodes.size() - 1) + " NAME:"
-				+ getTag("name");
-	}
+    protected final List<String> nodes = new ArrayList<String>(5);
+    private String endNode;
+    protected String startCoord;
+    protected String endCoord;
+    private String[] wayCoords;
+    private static final Logger logger = LoggerFactory
+            .getLogger(OsDpnWay.class);
+    private static OsDpnOsmAttributeMappingVisitor[] rightOfWayVisitors = {
+        new BridleWay(), new PermissiveBridleWay(),
+        new BywayOpenToAllTraffic(), new None(),
+        new OtherRouteWithPublicAccess(), new Footpath(),
+        new PermissivePath(), new RestrictedByway() };
+    private static OsDpnOsmAttributeMappingVisitor[] potentialHazardVisitors = {
+        new Boulders(), new Cliff(), new Marsh(), new Mud(), new Sand(),
+        new Scree(), new Shingle(), new Spoil(), new Rock(),
+        new TidalWater(), new QuarryOrPit(), new InlandWater(), new Foreshore() };
+
+    /**
+     * Constructor for XML Parser
+     *
+     * @throws TransformException
+     * @throws FactoryException
+     * @throws MismatchedDimensionException
+     */
+    public static OsDpnWay create(String idStr, XMLStreamReader parser)
+            throws XMLStreamException, MismatchedDimensionException,
+            FactoryException, TransformException {
+        logger.trace("OsDpnWay.create()");
+        OsDpnWay way = new OsDpnWay(idStr);
+        parser.nextTag();
+        way.setTag("highway", "track");
+        way.readTags(parser);
+        logger.trace(way.toString());
+        return way;
+    }
+
+    public OsDpnWay(String id) {
+        super(id, WAY);
+    }
+
+    public List<String> getNodes() {
+        return nodes;
+    }
+
+    @Override
+    protected int handleCycleRoute(XMLStreamReader parser)
+            throws XMLStreamException {
+        String access = parser.getElementText();
+        if ("true".equals(access)) {
+            setTag("bicycle", "yes");
+        }
+        return parser.getEventType();
+    }
+
+    @Override
+    protected int handleAccessLand(XMLStreamReader parser)
+            throws XMLStreamException {
+        String access = parser.getElementText();
+        if ("true".equals(access)) {
+            setTag("foot", "yes");
+        }
+        return parser.getEventType();
+    }
+
+    @Override
+    protected int handleSurfaceType(XMLStreamReader parser)
+            throws XMLStreamException {
+        String surface;
+        String surfaceType = parser.getElementText();
+        if ("Made Sealed".equals(surfaceType)) {
+            surface = "paved";
+        } else if ("Unmade".equals(surfaceType)) {
+            surface = "ground";
+        } else {
+            surface = "unpaved";
+        }
+        setTag("surface", surface);
+        return parser.getEventType();
+    }
+
+    @Override
+    protected int handlePhysicalLevel(XMLStreamReader parser)
+            throws XMLStreamException {
+        String text = parser.getElementText();
+        if ("Below Surface Level Tunnel".equals(text)) {
+            setTag("tunnel", "yes");
+        } else if ("Above Surface Level On Structure".equals(text)) {
+            setTag("bridge", "yes");
+        }
+        return parser.getEventType();
+    }
+
+    @Override
+    protected int handleRightOfUse(XMLStreamReader parser)
+            throws XMLStreamException {
+        String attributeValue = parser.getElementText().replaceAll(" ", "")
+                .toLowerCase();
+        for (OsDpnOsmAttributeMappingVisitor rightOfWayVisitor : rightOfWayVisitors) {
+            rightOfWayVisitor.visitWayAttribute(attributeValue, this);
+        }
+        return parser.getEventType();
+    }
+
+    @Override
+    protected int handlePotentialHazard(XMLStreamReader parser)
+            throws XMLStreamException {
+        String attributeValue = parser.getElementText().replaceAll(" ", "")
+                .toLowerCase();
+        for (OsDpnOsmAttributeMappingVisitor potentialHazzardVisitor : potentialHazardVisitors) {
+            potentialHazzardVisitor.visitWayAttribute(attributeValue, this);
+        }
+        return parser.getEventType();
+    }
+
+    @Override
+    protected void parseCoords(String lineDefinition) {
+        String[] lineSegments = lineDefinition.split(" ");
+        wayCoords = Arrays
+                .copyOfRange(lineSegments, 1, lineSegments.length - 1);
+        logger.info("parseCoords1" + toString() + " "
+                + ((wayCoords.length == 0) ? "0" : wayCoords[0]));
+    }
+
+    /**
+     * Ignores first and last coordinate set as they are also the start and end
+     * node coordinates and therefore already captured as towers
+     */
+    @Override
+    protected void parseCoords(int dimensions, String lineDefinition) {
+        String[] lineSegments = lineDefinition.split(" ");
+        int innerCoordCount = lineSegments.length / dimensions - 2;
+        if (innerCoordCount > 0) {
+            wayCoords = new String[innerCoordCount];
+            StringBuilder curString = null;
+            for (int i = dimensions; i < lineSegments.length - dimensions; i++) {
+                String string = lineSegments[i];
+                switch (i % dimensions) {
+                case 0: {
+                    int coordNumber = (i / dimensions) - 1;
+                    if (coordNumber > 0) {
+                        wayCoords[coordNumber - 1] = curString.toString();
+                    }
+                    curString = new StringBuilder();
+                    curString.append(string);
+                    break;
+                }
+
+                case 1:
+                case 2: {
+                    curString.append(' ');
+                    curString.append(string);
+                }
+                }
+            }
+            wayCoords[wayCoords.length - 1] = curString.toString();
+            addWayNodes();
+            logger.info("parsecoord2" + toString() + " "
+                    + ((wayCoords.length == 0) ? "0" : wayCoords[0]));
+        }
+        else
+        {
+            wayCoords = null;
+        }
+        nodes.add(endNode);
+    }
+
+    @Override
+    protected void parseNetworkMember(String elementText) {
+        throw new UnsupportedOperationException();
+    }
+
+    @Override
+    protected void addNode(String nodeId) {
+        String idStr = nodeId.substring(4);
+        if (0 == nodes.size()) {
+            nodes.add(idStr);
+        } else {
+            endNode = idStr;
+        }
+    }
+
+    protected void addWayNodes() {
+        for (int i = 1; i <= wayCoords.length; i++) {
+            long idPrefix = i;
+            String extraId = idPrefix + getId();
+            nodes.add(extraId);
+        }
+    }
+
+    @Override
+    protected void addDirectedLink(String nodeId, String orientation) {
+        throw new UnsupportedOperationException();
+    }
+
+    /**
+     * Creates a new OsDpnNode for each wayCoord. This also Looks for direction
+     * flags in edgeIdToXToYToNodeFlagsMap for the wayId, x, y combination. If
+     * it exists then set the node tag TAG_KEY_NOENTRY_ORIENTATION to true and
+     * the TAG_KEY_ONEWAY_ORIENTATION node tag to -1 for one direction and true
+     * for the other.
+     *
+     * @param edgeIdToXToYToNodeFlagsMap
+     * @return
+     * @throws TransformException
+     * @throws FactoryException
+     * @throws MismatchedDimensionException
+     */
+    public List<OsDpnNode> evaluateWayNodes(TLongObjectMap<TDoubleObjectMap<TDoubleLongMap>> edgeIdToXToYToNodeFlagsMap)
+            throws MismatchedDimensionException, FactoryException, TransformException
+            {
+        List<OsDpnNode> wayNodes = new ArrayList<OsDpnNode>();
+
+        if (null != wayCoords) {
+            for (int i = 0; i < wayCoords.length; i++) {
+                String wayCoord = wayCoords[i];
+
+                long idPrefix = (i + 1);
+                String id = idPrefix + getId();
+                OsDpnNode wayNode = new OsDpnNode(id);
+                wayNode.parseCoords(wayCoord);
+
+                logger.info("Node " + getId() + " coords: " + wayCoord
+                        + " tags: ");
+                for (String tagKey : wayNode.getTags().keySet()) {
+                    logger.info("\t " + tagKey + " : " + wayNode.getTag(tagKey));
+                }
+                wayNodes.add(wayNode);
+            }
+        }
+        return wayNodes;
+            }
+
+    /**
+     * Memory management method. Once a way is processed the stored string
+     * coordinates are no longer required so set them to null so they can be
+     * garbage collected
+     */
+    public void clearStoredCoords()
+    {
+        wayCoords = null;
+        startCoord = null;
+        endCoord = null;
+    }
+
+    public String[] getWayCoords() {
+        return wayCoords;
+    }
+
+    public String getStartCoord() {
+        return startCoord;
+    }
+
+    public String getEndCoord() {
+        return endCoord;
+    }
+
+    protected void parseCoordinateString(String elementText,
+            String elementSeparator) {
+        throw new UnsupportedOperationException();
+
+    }
+
+    @Override
+    public String toString() {
+        return super.toString() + " id:" + getId() + " start:" + nodes.get(0)
+                + " end:" + nodes.get(nodes.size() - 1) + " NAME:"
+                + getTag("name");
+    }
 
 }
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/Boulders.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Boulders.java
similarity index 66%
rename from core/src/main/java/com/graphhopper/reader/osgb/dpn/Boulders.java
rename to core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Boulders.java
index 102fe82a65..b49fa13f3f 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/Boulders.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Boulders.java
@@ -1,6 +1,7 @@
-package com.graphhopper.reader.osgb.dpn;
+package com.graphhopper.reader.osgb.dpn.potentialHazards;
 
 import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
 
 /**
  * Created by sadam on 13/02/15.
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/Cliff.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Cliff.java
similarity index 65%
rename from core/src/main/java/com/graphhopper/reader/osgb/dpn/Cliff.java
rename to core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Cliff.java
index 6f47ac1983..4d50e561ce 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/Cliff.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Cliff.java
@@ -1,6 +1,7 @@
-package com.graphhopper.reader.osgb.dpn;
+package com.graphhopper.reader.osgb.dpn.potentialHazards;
 
 import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
 
 /**
  * Created by sadam on 13/02/15.
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/Foreshore.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Foreshore.java
similarity index 65%
rename from core/src/main/java/com/graphhopper/reader/osgb/dpn/Foreshore.java
rename to core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Foreshore.java
index fdd456ba95..dfeb7a052a 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/Foreshore.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Foreshore.java
@@ -1,6 +1,7 @@
-package com.graphhopper.reader.osgb.dpn;
+package com.graphhopper.reader.osgb.dpn.potentialHazards;
 
 import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
 
 /**
  * Created by sadam on 13/02/15.
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/InlandWater.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/InlandWater.java
similarity index 66%
rename from core/src/main/java/com/graphhopper/reader/osgb/dpn/InlandWater.java
rename to core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/InlandWater.java
index 4e99bff6bf..6dd2c06eb8 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/InlandWater.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/InlandWater.java
@@ -1,6 +1,7 @@
-package com.graphhopper.reader.osgb.dpn;
+package com.graphhopper.reader.osgb.dpn.potentialHazards;
 
 import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
 
 /**
  * Created by sadam on 13/02/15.
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/Marsh.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Marsh.java
similarity index 65%
rename from core/src/main/java/com/graphhopper/reader/osgb/dpn/Marsh.java
rename to core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Marsh.java
index f7788ce1e0..bdf774b10e 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/Marsh.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Marsh.java
@@ -1,6 +1,7 @@
-package com.graphhopper.reader.osgb.dpn;
+package com.graphhopper.reader.osgb.dpn.potentialHazards;
 
 import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
 
 /**
  * Created by sadam on 13/02/15.
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/Mud.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Mud.java
similarity index 65%
rename from core/src/main/java/com/graphhopper/reader/osgb/dpn/Mud.java
rename to core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Mud.java
index 8f5588d2b3..6e225ca37b 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/Mud.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Mud.java
@@ -1,6 +1,7 @@
-package com.graphhopper.reader.osgb.dpn;
+package com.graphhopper.reader.osgb.dpn.potentialHazards;
 
 import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
 
 /**
  * Created by sadam on 13/02/15.
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/QuarryOrPit.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/QuarryOrPit.java
similarity index 66%
rename from core/src/main/java/com/graphhopper/reader/osgb/dpn/QuarryOrPit.java
rename to core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/QuarryOrPit.java
index 814c288f77..b20c840de1 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/QuarryOrPit.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/QuarryOrPit.java
@@ -1,6 +1,7 @@
-package com.graphhopper.reader.osgb.dpn;
+package com.graphhopper.reader.osgb.dpn.potentialHazards;
 
 import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
 
 /**
  * Created by sadam on 13/02/15.
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/Rock.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Rock.java
similarity index 65%
rename from core/src/main/java/com/graphhopper/reader/osgb/dpn/Rock.java
rename to core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Rock.java
index 9ece1e942a..bf6712bbbc 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/Rock.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Rock.java
@@ -1,6 +1,7 @@
-package com.graphhopper.reader.osgb.dpn;
+package com.graphhopper.reader.osgb.dpn.potentialHazards;
 
 import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
 
 /**
  * Created by sadam on 13/02/15.
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/Sand.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Sand.java
similarity index 65%
rename from core/src/main/java/com/graphhopper/reader/osgb/dpn/Sand.java
rename to core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Sand.java
index 0de861c817..b08ebba90d 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/Sand.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Sand.java
@@ -1,6 +1,7 @@
-package com.graphhopper.reader.osgb.dpn;
+package com.graphhopper.reader.osgb.dpn.potentialHazards;
 
 import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
 
 /**
  * Created by sadam on 13/02/15.
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/Scree.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Scree.java
similarity index 65%
rename from core/src/main/java/com/graphhopper/reader/osgb/dpn/Scree.java
rename to core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Scree.java
index bfb312be81..a49105aafa 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/Scree.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Scree.java
@@ -1,6 +1,7 @@
-package com.graphhopper.reader.osgb.dpn;
+package com.graphhopper.reader.osgb.dpn.potentialHazards;
 
 import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
 
 /**
  * Created by sadam on 13/02/15.
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/Shingle.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Shingle.java
similarity index 65%
rename from core/src/main/java/com/graphhopper/reader/osgb/dpn/Shingle.java
rename to core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Shingle.java
index 4aefacbf13..1519f73388 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/Shingle.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Shingle.java
@@ -1,6 +1,7 @@
-package com.graphhopper.reader.osgb.dpn;
+package com.graphhopper.reader.osgb.dpn.potentialHazards;
 
 import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
 
 /**
  * Created by sadam on 13/02/15.
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/Spoil.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Spoil.java
similarity index 66%
rename from core/src/main/java/com/graphhopper/reader/osgb/dpn/Spoil.java
rename to core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Spoil.java
index 0310568891..656327d875 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/Spoil.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Spoil.java
@@ -1,6 +1,7 @@
-package com.graphhopper.reader.osgb.dpn;
+package com.graphhopper.reader.osgb.dpn.potentialHazards;
 
 import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
 
 /**
  * Created by sadam on 13/02/15.
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/TidalWater.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/TidalWater.java
similarity index 68%
rename from core/src/main/java/com/graphhopper/reader/osgb/dpn/TidalWater.java
rename to core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/TidalWater.java
index 47232fd5d3..4b572288d7 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/TidalWater.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/TidalWater.java
@@ -1,6 +1,7 @@
-package com.graphhopper.reader.osgb.dpn;
+package com.graphhopper.reader.osgb.dpn.potentialHazards;
 
 import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
 
 /**
  * Created by sadam on 13/02/15.
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/BridleWay.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/BridleWay.java
similarity index 73%
rename from core/src/main/java/com/graphhopper/reader/osgb/dpn/BridleWay.java
rename to core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/BridleWay.java
index ec3a5a91bb..8eb22df44d 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/BridleWay.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/BridleWay.java
@@ -1,6 +1,7 @@
-package com.graphhopper.reader.osgb.dpn;
+package com.graphhopper.reader.osgb.dpn.rightOfWay;
 
 import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
 
 /**
  * Created by sadam on 13/02/15.
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/BywayOpenToAllTraffic.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/BywayOpenToAllTraffic.java
similarity index 77%
rename from core/src/main/java/com/graphhopper/reader/osgb/dpn/BywayOpenToAllTraffic.java
rename to core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/BywayOpenToAllTraffic.java
index a059774668..2cb70abcbb 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/BywayOpenToAllTraffic.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/BywayOpenToAllTraffic.java
@@ -1,6 +1,7 @@
-package com.graphhopper.reader.osgb.dpn;
+package com.graphhopper.reader.osgb.dpn.rightOfWay;
 
 import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
 
 /**
  * Created by sadam on 13/02/15.
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/Footpath.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/Footpath.java
similarity index 72%
rename from core/src/main/java/com/graphhopper/reader/osgb/dpn/Footpath.java
rename to core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/Footpath.java
index d8a8d2e265..77e29663ff 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/Footpath.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/Footpath.java
@@ -1,6 +1,7 @@
-package com.graphhopper.reader.osgb.dpn;
+package com.graphhopper.reader.osgb.dpn.rightOfWay;
 
 import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
 
 /**
  * Created by sadam on 13/02/15.
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/None.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/None.java
similarity index 70%
rename from core/src/main/java/com/graphhopper/reader/osgb/dpn/None.java
rename to core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/None.java
index 68a012f725..bcd1727515 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/None.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/None.java
@@ -1,6 +1,7 @@
-package com.graphhopper.reader.osgb.dpn;
+package com.graphhopper.reader.osgb.dpn.rightOfWay;
 
 import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
 
 /**
  * Created by sadam on 16/02/15.
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OtherRouteWithPublicAccess.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/OtherRouteWithPublicAccess.java
similarity index 67%
rename from core/src/main/java/com/graphhopper/reader/osgb/dpn/OtherRouteWithPublicAccess.java
rename to core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/OtherRouteWithPublicAccess.java
index b4718b39a9..5e41a46e62 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OtherRouteWithPublicAccess.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/OtherRouteWithPublicAccess.java
@@ -1,6 +1,7 @@
-package com.graphhopper.reader.osgb.dpn;
+package com.graphhopper.reader.osgb.dpn.rightOfWay;
 
 import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
 
 /**
  * Created by sadam on 16/02/15.
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/PermissiveBridleWay.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/PermissiveBridleWay.java
similarity index 75%
rename from core/src/main/java/com/graphhopper/reader/osgb/dpn/PermissiveBridleWay.java
rename to core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/PermissiveBridleWay.java
index ae589aaca9..99f356f133 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/PermissiveBridleWay.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/PermissiveBridleWay.java
@@ -1,6 +1,7 @@
-package com.graphhopper.reader.osgb.dpn;
+package com.graphhopper.reader.osgb.dpn.rightOfWay;
 
 import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
 
 /**
  * Created by sadam on 13/02/15.
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/PermissivePath.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/PermissivePath.java
similarity index 67%
rename from core/src/main/java/com/graphhopper/reader/osgb/dpn/PermissivePath.java
rename to core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/PermissivePath.java
index 8e0b46993e..5d558dda13 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/PermissivePath.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/PermissivePath.java
@@ -1,6 +1,7 @@
-package com.graphhopper.reader.osgb.dpn;
+package com.graphhopper.reader.osgb.dpn.rightOfWay;
 
 import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
 
 /**
  * Created by sadam on 13/02/15.
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/RestrictedByway.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/RestrictedByway.java
similarity index 73%
rename from core/src/main/java/com/graphhopper/reader/osgb/dpn/RestrictedByway.java
rename to core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/RestrictedByway.java
index dcb2ca4daf..63ed760979 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/RestrictedByway.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightOfWay/RestrictedByway.java
@@ -1,6 +1,7 @@
-package com.graphhopper.reader.osgb.dpn;
+package com.graphhopper.reader.osgb.dpn.rightOfWay;
 
 import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.AbstractOsDpnOsmAttibuteMappingVisitor;
 
 /**
  * Created by sadam on 13/02/15.
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/BouldersTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/BouldersTest.java
index 0bacae1d32..a8fc8b4950 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/BouldersTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/BouldersTest.java
@@ -9,6 +9,7 @@
 import org.mockito.MockitoAnnotations;
 
 import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.potentialHazards.Boulders;
 
 public class BouldersTest {
     static OsDpnOsmAttributeMappingVisitor visitor;
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/BridleWayTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/BridleWayTest.java
index e9fd0a3d81..a33a8cbf15 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/BridleWayTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/BridleWayTest.java
@@ -9,6 +9,7 @@
 import org.mockito.MockitoAnnotations;
 
 import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.rightOfWay.BridleWay;
 
 public class BridleWayTest {
     static OsDpnOsmAttributeMappingVisitor visitor;
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/BywayOpenToAllTrafficTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/BywayOpenToAllTrafficTest.java
index b809caa4c1..4c6ad06eed 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/BywayOpenToAllTrafficTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/BywayOpenToAllTrafficTest.java
@@ -9,6 +9,7 @@
 import org.mockito.MockitoAnnotations;
 
 import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.rightOfWay.BywayOpenToAllTraffic;
 
 public class BywayOpenToAllTrafficTest {
 
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/CliffTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/CliffTest.java
index bd427b6703..65141b39c7 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/CliffTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/CliffTest.java
@@ -9,6 +9,7 @@
 import org.mockito.MockitoAnnotations;
 
 import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.potentialHazards.Cliff;
 
 public class CliffTest {
     static OsDpnOsmAttributeMappingVisitor visitor;
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/FootpathTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/FootpathTest.java
index c13efb38a7..ce2bd4e9fc 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/FootpathTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/FootpathTest.java
@@ -9,6 +9,7 @@
 import org.mockito.MockitoAnnotations;
 
 import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.rightOfWay.Footpath;
 
 public class FootpathTest {
     static OsDpnOsmAttributeMappingVisitor visitor;
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/ForeshoreTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/ForeshoreTest.java
index 72a91b7ad6..63088d4ec5 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/ForeshoreTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/ForeshoreTest.java
@@ -9,6 +9,7 @@
 import org.mockito.MockitoAnnotations;
 
 import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.potentialHazards.Foreshore;
 
 public class ForeshoreTest {
 	 static OsDpnOsmAttributeMappingVisitor visitor;
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/InlandWaterTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/InlandWaterTest.java
index 978b802f23..c2b1284eca 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/InlandWaterTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/InlandWaterTest.java
@@ -9,6 +9,7 @@
 import org.mockito.MockitoAnnotations;
 
 import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.potentialHazards.InlandWater;
 
 public class InlandWaterTest {
 	 static OsDpnOsmAttributeMappingVisitor visitor;
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/MarshTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/MarshTest.java
index 235cc06660..b8e0400a10 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/MarshTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/MarshTest.java
@@ -9,6 +9,7 @@
 import org.mockito.MockitoAnnotations;
 
 import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.potentialHazards.Marsh;
 
 public class MarshTest {
 	 static OsDpnOsmAttributeMappingVisitor visitor;
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/MudTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/MudTest.java
index 1e2d26979b..48aa002498 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/MudTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/MudTest.java
@@ -9,6 +9,7 @@
 import org.mockito.MockitoAnnotations;
 
 import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.potentialHazards.Mud;
 
 public class MudTest {
 	 static OsDpnOsmAttributeMappingVisitor visitor;
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/NoneTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/NoneTest.java
index 98d4612f1d..40eebe03f6 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/NoneTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/NoneTest.java
@@ -1,6 +1,8 @@
 package com.graphhopper.reader.osgb.dpn;
 
 import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.rightOfWay.None;
+
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.Test;
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/OtherRouteWithPublicAccessTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/OtherRouteWithPublicAccessTest.java
index ae03268def..b7398a54b3 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/OtherRouteWithPublicAccessTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/OtherRouteWithPublicAccessTest.java
@@ -1,6 +1,8 @@
 package com.graphhopper.reader.osgb.dpn;
 
 import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.rightOfWay.OtherRouteWithPublicAccess;
+
 import org.junit.Before;
 import org.junit.BeforeClass;
 import org.junit.Test;
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/PermissiveBridleWayTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/PermissiveBridleWayTest.java
index c98e6b7917..de5a1e66be 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/PermissiveBridleWayTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/PermissiveBridleWayTest.java
@@ -9,6 +9,7 @@
 import org.mockito.MockitoAnnotations;
 
 import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.rightOfWay.PermissiveBridleWay;
 
 public class PermissiveBridleWayTest {
     static OsDpnOsmAttributeMappingVisitor visitor;
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/PermissivePathTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/PermissivePathTest.java
index dcc09b373c..db82f33bf8 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/PermissivePathTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/PermissivePathTest.java
@@ -9,6 +9,7 @@
 import org.mockito.MockitoAnnotations;
 
 import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.rightOfWay.PermissivePath;
 
 public class PermissivePathTest {
 
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/QuarryOrPitTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/QuarryOrPitTest.java
index f64554a70a..525445c31e 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/QuarryOrPitTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/QuarryOrPitTest.java
@@ -10,6 +10,7 @@
 import org.mockito.MockitoAnnotations;
 
 import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.potentialHazards.QuarryOrPit;
 
 public class QuarryOrPitTest {
 	 static OsDpnOsmAttributeMappingVisitor visitor;
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/RestrictedBywayTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/RestrictedBywayTest.java
index 39ba29421e..0a11812a17 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/RestrictedBywayTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/RestrictedBywayTest.java
@@ -9,6 +9,7 @@
 import org.mockito.MockitoAnnotations;
 
 import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.rightOfWay.RestrictedByway;
 
 public class RestrictedBywayTest {
     static OsDpnOsmAttributeMappingVisitor visitor;
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/RockTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/RockTest.java
index 230a282ac3..cd0becd435 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/RockTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/RockTest.java
@@ -9,6 +9,7 @@
 import org.mockito.MockitoAnnotations;
 
 import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.potentialHazards.Rock;
 
 public class RockTest {
 	 static OsDpnOsmAttributeMappingVisitor visitor;
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/SandTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/SandTest.java
index 611c85e9b9..a0bbff4642 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/SandTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/SandTest.java
@@ -9,6 +9,7 @@
 import org.mockito.MockitoAnnotations;
 
 import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.potentialHazards.Sand;
 
 public class SandTest {
 	 static OsDpnOsmAttributeMappingVisitor visitor;
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/ScreeTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/ScreeTest.java
index 671ccaa1fb..4515c9b26f 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/ScreeTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/ScreeTest.java
@@ -9,6 +9,7 @@
 import org.mockito.MockitoAnnotations;
 
 import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.potentialHazards.Scree;
 
 public class ScreeTest {
 	 static OsDpnOsmAttributeMappingVisitor visitor;
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/ShingleTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/ShingleTest.java
index 0f7fcbd719..5ee5192ad0 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/ShingleTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/ShingleTest.java
@@ -9,6 +9,7 @@
 import org.mockito.MockitoAnnotations;
 
 import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.potentialHazards.Shingle;
 
 public class ShingleTest {
 	 static OsDpnOsmAttributeMappingVisitor visitor;
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/SpoilTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/SpoilTest.java
index d9f6e438aa..c18a9dc208 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/SpoilTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/SpoilTest.java
@@ -9,6 +9,7 @@
 import org.mockito.MockitoAnnotations;
 
 import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.potentialHazards.Spoil;
 
 public class SpoilTest {
 	 static OsDpnOsmAttributeMappingVisitor visitor;
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/TidalWaterTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/TidalWaterTest.java
index 9024c2d9b9..f8842340d7 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/TidalWaterTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/TidalWaterTest.java
@@ -9,6 +9,7 @@
 import org.mockito.MockitoAnnotations;
 
 import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.dpn.potentialHazards.TidalWater;
 
 public class TidalWaterTest {
 	 static OsDpnOsmAttributeMappingVisitor visitor;
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/hn/OsHnReaderTest.java b/core/src/test/java/com/graphhopper/reader/osgb/hn/OsHnReaderTest.java
index 6f34b77429..7848998b49 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/hn/OsHnReaderTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/hn/OsHnReaderTest.java
@@ -53,12 +53,13 @@ protected void flush()
      */
     @Test
     public void testMotorwayARoadNetwork_NoHighwaysNetworkData() {
+        System.out.println("===>>> testMotorwayARoadNetwork_NoHighwaysNetworkData()");
         String graphLoc = "./target/output/testMotorwayARoadNetwork_NoHighwaysNetworkData/os-itn-hn-test-network-gh";
         String inputFile = "./src/test/resources/com/graphhopper/reader/os-itn-hn-test-network.xml";
         GraphHopper graphHopper = new GraphHopper().setInMemory().setOSMFile(inputFile).setGraphHopperLocation(graphLoc).setCHEnable(false).setEncodingManager(encodingManager).setAsItnReader();
         graphHopper.importOrLoad();
         GraphStorage graph = graphHopper.getGraph();
-        printNodes(graph.createEdgeExplorer(carOutEdges), 6);
+        //        printNodes(graph.createEdgeExplorer(carOutEdges), 6);
         testNodes(graph);
         // 79 => 295000.000 90000.000 = -3.49   50.70
         // 80 => 290000.000,90000.000 = -3.56   50.70
@@ -88,6 +89,7 @@ public void testMotorwayARoadNetwork_NoHighwaysNetworkData() {
      */
     @Test
     public void testMotorwayARoadNetwork_WithHighwaysNetworkData() {
+        System.out.println("===>>> testMotorwayARoadNetwork_WithHighwaysNetworkData()");
         String graphLoc = "./target/output/testMotorwayARoadNetwork_WithHighwaysNetworkData/os-itn-hn-test-network-gh";
         String inputFile = "./src/test/resources/com/graphhopper/reader/os-itn-hn-test-network.xml";
 
@@ -105,7 +107,7 @@ public void testMotorwayARoadNetwork_WithHighwaysNetworkData() {
         graphHopper.importOrLoad();
         GraphStorage graph = graphHopper.getGraph();
 
-        printNodes(graph.createEdgeExplorer(carOutEdges), 6);
+        //        printNodes(graph.createEdgeExplorer(carOutEdges), 6);
         testNodes(graph);
         // 79 => 295000.000 90000.000 = -3.49   50.70
         // 80 => 290000.000,90000.000 = -3.56   50.70
