diff --git a/core/src/main/java/com/graphhopper/routing/util/BikeGenericFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/BikeGenericFlagEncoder.java
index dddca860db..d58763df4e 100644
--- a/core/src/main/java/com/graphhopper/routing/util/BikeGenericFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/BikeGenericFlagEncoder.java
@@ -150,7 +150,7 @@ protected BikeGenericFlagEncoder(int speedBits, double speedFactor, int maxTurnC
         unpavedSurfaceTags.add("salt");
         unpavedSurfaceTags.add("sand");
 
-        maxPossibleSpeed = 35;
+        maxPossibleSpeed = 30;
 
         setSurfaceSpeedFactor("concrete:lanes", 0.9f);
         setSurfaceSpeedFactor("concrete:plates", 0.9f);
@@ -198,6 +198,7 @@ protected BikeGenericFlagEncoder(int speedBits, double speedFactor, int maxTurnC
         acceptedHighwayTags.add("track");
         acceptedHighwayTags.add("service");
         acceptedHighwayTags.add("residential");
+        acceptedHighwayTags.add("unclassified");
         acceptedHighwayTags.add("road");
         acceptedHighwayTags.add("trunk");
         acceptedHighwayTags.add("trunk_link");
@@ -207,6 +208,8 @@ protected BikeGenericFlagEncoder(int speedBits, double speedFactor, int maxTurnC
         acceptedHighwayTags.add("secondary_link");
         acceptedHighwayTags.add("tertiary");
         acceptedHighwayTags.add("tertiary_link");
+        acceptedHighwayTags.add("trunk");
+        acceptedHighwayTags.add("trunk_link");
         acceptedHighwayTags.add("motorway");
         acceptedHighwayTags.add("motorway_link");
 
@@ -659,7 +662,7 @@ else if("bad".equals(smoothness) || "very_bad".equals(smoothness) || "hiking".eq
 
         if(partOfCycleRelation == BicycleNetworkCode.MOUNTAIN_BIKE_ROUTE.getValue()){
             wayType = WayType.MTB_CYCLEWAY;
-        } else if ("cycleway".equals(highway) || (partOfCycleRelation > BicycleNetworkCode.FERRY.getValue()))
+        } else if ("cycleway".equals(highway) || way.hasTag("bicycle", "designated") || (partOfCycleRelation > BicycleNetworkCode.FERRY.getValue()))
         {
             wayType = WayType.CYCLEWAY;
         }
@@ -865,7 +868,7 @@ public boolean supports( Class<?> feature )
         if (super.supports(feature))
             return true;
 
-        return PriorityWeighting.class.isAssignableFrom(feature);
+        return DynamicWeighting.class.isAssignableFrom(feature);
     }
 
     public void setAvoidSpeedLimit( int limit )
@@ -885,6 +888,6 @@ public double getWayType( long flags) {
     @Override
     public String toString()
     {
-        return "generic_bike";
+        return "genbike";
     }
 }
diff --git a/web/src/main/java/com/graphhopper/http/InfoServlet.java b/web/src/main/java/com/graphhopper/http/InfoServlet.java
index e3ed435810..b0d3605dcb 100644
--- a/web/src/main/java/com/graphhopper/http/InfoServlet.java
+++ b/web/src/main/java/com/graphhopper/http/InfoServlet.java
@@ -83,7 +83,7 @@ private String getPreferredWeighting(String v) {
 
         String w = "fastest";
 
-        if(v.equalsIgnoreCase("generic_bike"))
+        if(v.equalsIgnoreCase("genbike"))
             w = "dynamic";
 
         return w;
diff --git a/web/src/main/webapp/img/generic_bike.png b/web/src/main/webapp/img/genbike.png
similarity index 100%
rename from web/src/main/webapp/img/generic_bike.png
rename to web/src/main/webapp/img/genbike.png
