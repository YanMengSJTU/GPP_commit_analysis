diff --git a/core/src/main/java/com/graphhopper/GraphHopper.java b/core/src/main/java/com/graphhopper/GraphHopper.java
index d72fbcad68..4a64fe9b04 100644
--- a/core/src/main/java/com/graphhopper/GraphHopper.java
+++ b/core/src/main/java/com/graphhopper/GraphHopper.java
@@ -81,7 +81,7 @@
     private final Set<RoutingAlgorithmFactoryDecorator> algoDecorators = new LinkedHashSet<>();
     // utils
     private final TranslationMap trMap = new TranslationMap().doImport();
-    boolean removeZipped = true;
+    private boolean removeZipped = true;
     // for graph:
     private GraphHopperStorage ghStorage;
     private EncodingManager encodingManager;
@@ -277,7 +277,7 @@ public GraphHopper setMinNetworkSize(int minNetworkSize, int minOneWayNetworkSiz
     /**
      * This method call results in an in-memory graph.
      */
-    public GraphHopper setInMemory() {
+    private GraphHopper setInMemory() {
         ensureNotLoaded();
         dataAccessType = DAType.RAM_STORE;
         return this;
@@ -302,7 +302,7 @@ public GraphHopper setStoreOnFlush(boolean storeOnFlush) {
     /**
      * Enable memory mapped configuration if not enough memory is available on the target platform.
      */
-    public GraphHopper setMemoryMapped() {
+    private GraphHopper setMemoryMapped() {
         ensureNotLoaded();
         dataAccessType = DAType.MMAP;
         return this;
@@ -458,7 +458,7 @@ public GraphHopper setSortGraph(boolean sortGraph) {
         return this;
     }
 
-    public boolean isAllowWrites() {
+    private boolean isAllowWrites() {
         return allowWrites;
     }
 
@@ -937,7 +937,7 @@ public Weighting createWeighting(HintsMap hintsMap, FlagEncoder encoder, Graph g
     /**
      * Potentially wraps the specified weighting into a TurnWeighting instance.
      */
-    public Weighting createTurnWeighting(Graph graph, Weighting weighting, TraversalMode tMode) {
+    private Weighting createTurnWeighting(Graph graph, Weighting weighting, TraversalMode tMode) {
         FlagEncoder encoder = weighting.getFlagEncoder();
         if (encoder.supports(TurnWeighting.class) && tMode.isEdgeBased())
             return new TurnWeighting(weighting, (TurnCostExtension) graph.getExtension());
@@ -1057,10 +1057,7 @@ private boolean isCHUsageGranted(boolean disableCH) {
     }
 
     private boolean failOnMaxVisitedNodesForRequestExceedsLimit(int maxVisitedNodesForRequest) {
-        if (maxVisitedNodesForRequest > maxVisitedNodes) {
-            return true;
-        }
-        return false;
+        return maxVisitedNodesForRequest > maxVisitedNodes;
     }
 
     private List<Path> addIllegalArgumentExceptionAndReturnEmptyCollection(GHResponse ghRsp, String s) {
@@ -1166,7 +1163,7 @@ protected LocationIndex createLocationIndex(Directory dir) {
     /**
      * Initializes the location index after the import is done.
      */
-    protected void initLocationIndex() {
+    private void initLocationIndex() {
         if (locationIndex != null)
             throw new IllegalStateException("Cannot initialize locationIndex twice!");
 
@@ -1261,12 +1258,12 @@ public void clean() {
         removeDir(folder);
     }
 
-    protected void ensureNotLoaded() {
+    private void ensureNotLoaded() {
         if (fullyLoaded)
             throw new IllegalStateException("No configuration changes are possible after loading the graph");
     }
 
-    protected void ensureWriteAccess() {
+    private void ensureWriteAccess() {
         if (!allowWrites)
             throw new IllegalStateException("Writes are not allowed!");
     }
@@ -1277,15 +1274,15 @@ public void setNonChMaxWaypointDistance(int nonChMaxWaypointDistance) {
 
     private class BuilderForQueryGraphAndWeightingWithCHEnabled {
         private boolean myResult;
-        private GHRequest request;
-        private GHResponse ghRsp;
-        private HintsMap hints;
-        private List<QueryResult> qResults;
-        private RoutingAlgorithmFactory tmpAlgoFactory;
+        private final GHRequest request;
+        private final GHResponse ghRsp;
+        private final HintsMap hints;
+        private final List<QueryResult> qResults;
+        private final RoutingAlgorithmFactory tmpAlgoFactory;
         private Weighting weighting;
         private QueryGraph queryGraph;
 
-        public BuilderForQueryGraphAndWeightingWithCHEnabled(GHRequest request, GHResponse ghRsp, HintsMap hints, List<QueryResult> qResults, RoutingAlgorithmFactory tmpAlgoFactory) {
+        BuilderForQueryGraphAndWeightingWithCHEnabled(GHRequest request, GHResponse ghRsp, HintsMap hints, List<QueryResult> qResults, RoutingAlgorithmFactory tmpAlgoFactory) {
             this.request = request;
             this.ghRsp = ghRsp;
             this.hints = hints;
@@ -1297,15 +1294,15 @@ boolean is() {
             return myResult;
         }
 
-        public Weighting getWeighting() {
+        Weighting getWeighting() {
             return weighting;
         }
 
-        public QueryGraph getQueryGraph() {
+        QueryGraph getQueryGraph() {
             return queryGraph;
         }
 
-        public BuilderForQueryGraphAndWeightingWithCHEnabled invoke() {
+        BuilderForQueryGraphAndWeightingWithCHEnabled invoke() {
             boolean forceCHHeading = hints.getBool(CH.FORCE_HEADING, false);
             if (!forceCHHeading && request.hasFavoredHeading(0)) {
                 myResult = true;
@@ -1330,29 +1327,29 @@ public BuilderForQueryGraphAndWeightingWithCHEnabled invoke() {
     }
 
     private class BuilderForQueryGraphAndWeightingWithCHDisabled {
-        private HintsMap hints;
-        private FlagEncoder encoder;
-        private List<GHPoint> points;
-        private List<QueryResult> qResults;
+        private final HintsMap hints;
+        private final FlagEncoder encoder;
+        private final List<GHPoint> points;
+        private final List<QueryResult> qResults;
         private Weighting weighting;
         private QueryGraph queryGraph;
 
-        public BuilderForQueryGraphAndWeightingWithCHDisabled(HintsMap hints, FlagEncoder encoder, List<GHPoint> points, List<QueryResult> qResults) {
+        BuilderForQueryGraphAndWeightingWithCHDisabled(HintsMap hints, FlagEncoder encoder, List<GHPoint> points, List<QueryResult> qResults) {
             this.hints = hints;
             this.encoder = encoder;
             this.points = points;
             this.qResults = qResults;
         }
 
-        public Weighting getWeighting() {
+        Weighting getWeighting() {
             return weighting;
         }
 
-        public QueryGraph getQueryGraph() {
+        QueryGraph getQueryGraph() {
             return queryGraph;
         }
 
-        public BuilderForQueryGraphAndWeightingWithCHDisabled invoke() {
+        BuilderForQueryGraphAndWeightingWithCHDisabled invoke() {
             checkNonChMaxWaypointDistance(points);
             queryGraph = new QueryGraph(ghStorage);
             queryGraph.lookup(qResults);
@@ -1384,18 +1381,19 @@ private void checkNonChMaxWaypointDistance(List<GHPoint> points) {
 
     private class BuilderForWeightingAndQueryGraph {
         private boolean myResult;
-        private GHRequest request;
-        private GHResponse ghRsp;
-        private HintsMap hints;
-        private FlagEncoder encoder;
-        private boolean disableCH;
-        private List<GHPoint> points;
-        private List<QueryResult> qResults;
-        private RoutingAlgorithmFactory tmpAlgoFactory;
+        private final GHRequest request;
+        private final GHResponse ghRsp;
+        private final HintsMap hints;
+        private final FlagEncoder encoder;
+        private final boolean disableCH;
+        private final List<GHPoint> points;
+        private final List<QueryResult> qResults;
+        private final RoutingAlgorithmFactory tmpAlgoFactory;
         private Weighting weighting;
         private QueryGraph queryGraph;
 
-        public BuilderForWeightingAndQueryGraph(GHRequest request, GHResponse ghRsp, HintsMap hints, FlagEncoder encoder, boolean disableCH, List<GHPoint> points, List<QueryResult> qResults, RoutingAlgorithmFactory tmpAlgoFactory) {
+        BuilderForWeightingAndQueryGraph(GHRequest request, GHResponse ghRsp, HintsMap hints, FlagEncoder encoder, boolean disableCH, List<GHPoint> points,
+                                         List<QueryResult> qResults, RoutingAlgorithmFactory tmpAlgoFactory) {
             this.request = request;
             this.ghRsp = ghRsp;
             this.hints = hints;
@@ -1410,15 +1408,15 @@ boolean is() {
             return myResult;
         }
 
-        public Weighting getWeighting() {
+        Weighting getWeighting() {
             return weighting;
         }
 
-        public QueryGraph getQueryGraph() {
+        QueryGraph getQueryGraph() {
             return queryGraph;
         }
 
-        public BuilderForWeightingAndQueryGraph invoke() {
+        BuilderForWeightingAndQueryGraph invoke() {
             if (isCHUsageGranted(disableCH)) {
                 BuilderForQueryGraphAndWeightingWithCHEnabled builderForQueryGraphAndWeightingWithCHEnabled = new BuilderForQueryGraphAndWeightingWithCHEnabled(request, ghRsp, hints, qResults, tmpAlgoFactory).invoke();
                 if (builderForQueryGraphAndWeightingWithCHEnabled.is()) {
