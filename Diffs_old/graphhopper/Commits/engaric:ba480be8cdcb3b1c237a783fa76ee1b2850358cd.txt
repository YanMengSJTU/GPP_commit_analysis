diff --git a/core/src/main/java/com/graphhopper/GraphHopper.java b/core/src/main/java/com/graphhopper/GraphHopper.java
index b51d11e2f7..63221f4b4d 100644
--- a/core/src/main/java/com/graphhopper/GraphHopper.java
+++ b/core/src/main/java/com/graphhopper/GraphHopper.java
@@ -940,7 +940,7 @@ public GHResponse route( GHRequest request )
 
     protected LocationIndex createLocationIndex( Directory dir )
     {
-        LocationIndexTree tmpIndex = new LocationIndexTree(graph.getOriginalGraph(), dir);
+        LocationIndexTree tmpIndex = new LocationIndexTree(graph.getBaseGraph(), dir);
         tmpIndex.setResolution(preciseIndexResolution);
         tmpIndex.setMaxRegionSearch(maxRegionSearch);
         if (!tmpIndex.loadExisting())
diff --git a/core/src/main/java/com/graphhopper/routing/Path.java b/core/src/main/java/com/graphhopper/routing/Path.java
index e95a724b2b..3cbcc4692c 100644
--- a/core/src/main/java/com/graphhopper/routing/Path.java
+++ b/core/src/main/java/com/graphhopper/routing/Path.java
@@ -250,7 +250,7 @@ private void forEveryEdge( EdgeVisitor visitor )
         int len = edgeIds.size();
         for (int i = 0; i < len; i++)
         {
-            EdgeIteratorState edgeBase = graph.getOriginalGraph().getEdgeProps(edgeIds.get(i), tmpNode);
+            EdgeIteratorState edgeBase = graph.getBaseGraph().getEdgeProps(edgeIds.get(i), tmpNode);
             if (edgeBase == null)
                 throw new IllegalStateException("Edge " + edgeIds.get(i) + " was empty when requested with node " + tmpNode
                         + ", array index:" + i + ", edges:" + edgeIds.size());
diff --git a/core/src/main/java/com/graphhopper/routing/QueryGraph.java b/core/src/main/java/com/graphhopper/routing/QueryGraph.java
index bc428557e0..71bd979a51 100644
--- a/core/src/main/java/com/graphhopper/routing/QueryGraph.java
+++ b/core/src/main/java/com/graphhopper/routing/QueryGraph.java
@@ -51,7 +51,7 @@
     private final NodeAccess mainNodeAccess;
     private final int mainNodes;
     private final int mainEdges;
-    private final QueryGraph origGraph;
+    private final QueryGraph baseGraph;
     private final GraphExtension wrappedExtension;
     private List<QueryResult> queryResults;
     /**
@@ -79,7 +79,7 @@ public QueryGraph( Graph graph )
             wrappedExtension = mainGraph.getExtension();
 
         // create very lightweight QueryGraph which uses variables from this QueryGraph (same virtual edges)
-        origGraph = new QueryGraph(graph.getOriginalGraph(), this);
+        baseGraph = new QueryGraph(graph.getBaseGraph(), this);
     }
 
     /**
@@ -88,7 +88,7 @@ public QueryGraph( Graph graph )
     private QueryGraph( Graph graph, QueryGraph superQueryGraph )
     {
         mainGraph = graph;
-        origGraph = this;
+        baseGraph = this;
         wrappedExtension = superQueryGraph.wrappedExtension;
         mainNodeAccess = graph.getNodeAccess();
         mainNodes = superQueryGraph.mainNodes;
@@ -120,9 +120,9 @@ public void lookup( List<QueryResult> resList )
         virtualEdges = new ArrayList<EdgeIteratorState>(resList.size() * 2);
         virtualNodes = new PointList(resList.size(), mainNodeAccess.is3D());
         queryResults = new ArrayList<QueryResult>(resList.size());
-        origGraph.virtualEdges = virtualEdges;
-        origGraph.virtualNodes = virtualNodes;
-        origGraph.queryResults = queryResults;
+        baseGraph.virtualEdges = virtualEdges;
+        baseGraph.virtualNodes = virtualNodes;
+        baseGraph.queryResults = queryResults;
 
         TIntObjectMap<List<QueryResult>> edge2res = new TIntObjectHashMap<List<QueryResult>>(resList.size());
 
@@ -276,12 +276,12 @@ public int compare( QueryResult o1, QueryResult o2 )
     }
 
     @Override
-    public Graph getOriginalGraph()
+    public Graph getBaseGraph()
     {
         // Note: if the mainGraph of this QueryGraph is a LevelGraph then ignoring the shortcuts will produce a 
-        // huge gap of edgeIds between original and virtual edge ids. The only solution would be to move virtual edges
+        // huge gap of edgeIds between base and virtual edge ids. The only solution would be to move virtual edges
         // directly after normal edge ids which is ugly as we limit virtual edges to N edges and waste memory or make everything more complex.        
-        return origGraph;
+        return baseGraph;
     }
 
     public boolean isVirtualEdge( int edgeId )
diff --git a/core/src/main/java/com/graphhopper/routing/util/TestAlgoCollector.java b/core/src/main/java/com/graphhopper/routing/util/TestAlgoCollector.java
index ca06914204..1f78ead095 100644
--- a/core/src/main/java/com/graphhopper/routing/util/TestAlgoCollector.java
+++ b/core/src/main/java/com/graphhopper/routing/util/TestAlgoCollector.java
@@ -48,7 +48,7 @@ public TestAlgoCollector assertDistance( AlgoHelperEntry algoEntry, List<QueryRe
             OneRun oneRun )
     {
         List<Path> viaPaths = new ArrayList<Path>();
-        QueryGraph queryGraph = new QueryGraph(algoEntry.originalGraph);
+        QueryGraph queryGraph = new QueryGraph(algoEntry.graph);
         queryGraph.lookup(queryList);
         AlgorithmOptions opts = algoEntry.opts;
         FlagEncoder encoder = opts.getFlagEncoder();
@@ -148,13 +148,13 @@ void printSummary()
 
     public static class AlgoHelperEntry
     {
-        private Graph originalGraph;
+        private Graph graph;
         private final LocationIndex idx;
         private AlgorithmOptions opts;
 
         public AlgoHelperEntry( Graph g, AlgorithmOptions opts, LocationIndex idx )
         {
-            this.originalGraph = g;
+            this.graph = g;
             this.opts = opts;
             this.idx = idx;
         }
diff --git a/core/src/main/java/com/graphhopper/storage/OriginalGraph.java b/core/src/main/java/com/graphhopper/storage/BaseGraph.java
similarity index 97%
rename from core/src/main/java/com/graphhopper/storage/OriginalGraph.java
rename to core/src/main/java/com/graphhopper/storage/BaseGraph.java
index 4081d9ece8..21fbf67926 100644
--- a/core/src/main/java/com/graphhopper/storage/OriginalGraph.java
+++ b/core/src/main/java/com/graphhopper/storage/BaseGraph.java
@@ -30,17 +30,17 @@
 /**
  * @author Peter Karich
  */
-public class OriginalGraph implements Graph
+class BaseGraph implements Graph
 {
     private final LevelGraph lg;
 
-    public OriginalGraph( LevelGraph lg )
+    BaseGraph( LevelGraph lg )
     {
         this.lg = lg;
     }
 
     @Override
-    public Graph getOriginalGraph()
+    public Graph getBaseGraph()
     {
         return this;
     }
@@ -79,7 +79,7 @@ public EdgeIteratorState edge( int a, int b, double distance, boolean bothDirect
     public EdgeIteratorState getEdgeProps( int edgeId, int adjNode )
     {
         if (lg.isShortcut(edgeId))
-            throw new IllegalStateException("Do not fetch shortcuts from OriginalGraph use the LevelGraph instead");
+            throw new IllegalStateException("Do not fetch shortcuts from BaseGraph use the LevelGraph instead");
 
         return lg.getEdgeProps(edgeId, adjNode);
     }
diff --git a/core/src/main/java/com/graphhopper/storage/Graph.java b/core/src/main/java/com/graphhopper/storage/Graph.java
index 9573bc5567..65e9c63b26 100644
--- a/core/src/main/java/com/graphhopper/storage/Graph.java
+++ b/core/src/main/java/com/graphhopper/storage/Graph.java
@@ -35,7 +35,7 @@
      * @return a graph which behaves like an unprepared graph and e.g. the normal unidirectional
      * Dijkstra or any graph traversal algorithm can be executed.
      */
-    Graph getOriginalGraph();
+    Graph getBaseGraph();
 
     /**
      * @return the number of created locations - via setNode() or edge()
diff --git a/core/src/main/java/com/graphhopper/storage/GraphHopperStorage.java b/core/src/main/java/com/graphhopper/storage/GraphHopperStorage.java
index 20692297d0..69ee74105e 100644
--- a/core/src/main/java/com/graphhopper/storage/GraphHopperStorage.java
+++ b/core/src/main/java/com/graphhopper/storage/GraphHopperStorage.java
@@ -126,7 +126,7 @@ public GraphHopperStorage( Directory dir, EncodingManager encodingManager, boole
     }
 
     @Override
-    public Graph getOriginalGraph()
+    public Graph getBaseGraph()
     {
         return this;
     }
diff --git a/core/src/main/java/com/graphhopper/storage/LevelGraphStorage.java b/core/src/main/java/com/graphhopper/storage/LevelGraphStorage.java
index 912e48af13..8547c929cc 100644
--- a/core/src/main/java/com/graphhopper/storage/LevelGraphStorage.java
+++ b/core/src/main/java/com/graphhopper/storage/LevelGraphStorage.java
@@ -42,12 +42,12 @@
     // after the last edge only shortcuts are stored
     private int lastEdgeIndex = -1;
     private final long scDirMask = PrepareEncoder.getScDirMask();
-    private final Graph originalGraph;
+    private final Graph baseGraph;
 
     public LevelGraphStorage( Directory dir, EncodingManager encodingManager, boolean enabled3D )
     {
         super(dir, encodingManager, enabled3D);
-        originalGraph = new OriginalGraph(this);
+        baseGraph = new BaseGraph(this);
     }
 
     @Override
@@ -441,8 +441,8 @@ protected int setEdgesHeader()
     }
 
     @Override
-    public Graph getOriginalGraph()
+    public Graph getBaseGraph()
     {
-        return originalGraph;
+        return baseGraph;
     }
 }
diff --git a/core/src/main/java/com/graphhopper/storage/index/LocationIndexTree.java b/core/src/main/java/com/graphhopper/storage/index/LocationIndexTree.java
index a306b3c88d..b9fdbf6b5f 100644
--- a/core/src/main/java/com/graphhopper/storage/index/LocationIndexTree.java
+++ b/core/src/main/java/com/graphhopper/storage/index/LocationIndexTree.java
@@ -81,7 +81,7 @@
     public LocationIndexTree( Graph g, Directory dir )
     {
         if (g instanceof LevelGraph)
-            throw new IllegalArgumentException("Call LevelGraph.getOriginalGraph() instead of using the LevelGraph itself");
+            throw new IllegalArgumentException("Call LevelGraph.getBaseGraph() instead of using the LevelGraph itself");
 
         MAGIC_INT = Integer.MAX_VALUE / 22316;
         this.graph = g;
diff --git a/core/src/test/java/com/graphhopper/routing/AbstractRoutingAlgorithmTester.java b/core/src/test/java/com/graphhopper/routing/AbstractRoutingAlgorithmTester.java
index 8d53879122..af51d42c94 100644
--- a/core/src/test/java/com/graphhopper/routing/AbstractRoutingAlgorithmTester.java
+++ b/core/src/test/java/com/graphhopper/routing/AbstractRoutingAlgorithmTester.java
@@ -591,7 +591,7 @@ Path calcPathViaQuery( Graph graph, double fromLat, double fromLon, double toLat
 
     Path calcPathViaQuery( String weighting, Graph graph, double fromLat, double fromLon, double toLat, double toLon )
     {
-        LocationIndex index = new LocationIndexTree(graph.getOriginalGraph(), new RAMDirectory());
+        LocationIndex index = new LocationIndexTree(graph.getBaseGraph(), new RAMDirectory());
         index.prepareIndex();
         QueryResult from = index.findClosest(fromLat, fromLon, EdgeFilter.ALL_EDGES);
         QueryResult to = index.findClosest(toLat, toLon, EdgeFilter.ALL_EDGES);
diff --git a/core/src/test/java/com/graphhopper/routing/RoutingAlgorithmIT.java b/core/src/test/java/com/graphhopper/routing/RoutingAlgorithmIT.java
index 324231de4b..d896d6767f 100644
--- a/core/src/test/java/com/graphhopper/routing/RoutingAlgorithmIT.java
+++ b/core/src/test/java/com/graphhopper/routing/RoutingAlgorithmIT.java
@@ -630,7 +630,7 @@ public void run()
                     set3D(g.getNodeAccess().is3D()).levelGraphCreate());
             final PrepareContractionHierarchies prepareCH = new PrepareContractionHierarchies(graphCH, encoder, weighting, tMode);
             prepareCH.doWork();
-            LocationIndex idxCH = new LocationIndexTree(graphCH.getOriginalGraph(), new RAMDirectory()).prepareIndex();
+            LocationIndex idxCH = new LocationIndexTree(graphCH.getBaseGraph(), new RAMDirectory()).prepareIndex();
             prepare.add(new AlgoHelperEntry(graphCH, dijkstrabiOpts, idxCH)
             {
                 @Override
diff --git a/core/src/test/java/com/graphhopper/storage/LevelGraphStorageTest.java b/core/src/test/java/com/graphhopper/storage/LevelGraphStorageTest.java
index 5f583926ce..f15d51967a 100644
--- a/core/src/test/java/com/graphhopper/storage/LevelGraphStorageTest.java
+++ b/core/src/test/java/com/graphhopper/storage/LevelGraphStorageTest.java
@@ -225,7 +225,7 @@ public void testQueryGraph()
         QueryResult toRes = createQR(1.019, 1.00, 0, edge1);
         qGraph.lookup(fromRes, toRes);
 
-        Graph oGraph = qGraph.getOriginalGraph();
+        Graph oGraph = qGraph.getBaseGraph();
         EdgeExplorer explorer = oGraph.createEdgeExplorer();
 
         assertTrue(levelGraph.getNodes() < qGraph.getNodes());
diff --git a/core/src/test/java/com/graphhopper/storage/index/LocationIndexTreeForLevelGraphTest.java b/core/src/test/java/com/graphhopper/storage/index/LocationIndexTreeForLevelGraphTest.java
index 319a509130..0f3c93d92b 100644
--- a/core/src/test/java/com/graphhopper/storage/index/LocationIndexTreeForLevelGraphTest.java
+++ b/core/src/test/java/com/graphhopper/storage/index/LocationIndexTreeForLevelGraphTest.java
@@ -54,7 +54,7 @@ public LocationIndexTree createIndex( Graph g, int resolution )
     public LocationIndexTree createIndexNoPrepare( Graph g, int resolution )
     {
         Directory dir = new RAMDirectory(location);
-        LocationIndexTree tmpIdx = new LocationIndexTree(g.getOriginalGraph(), dir);
+        LocationIndexTree tmpIdx = new LocationIndexTree(g.getBaseGraph(), dir);
         tmpIdx.setResolution(resolution);
         return tmpIdx;
     }
