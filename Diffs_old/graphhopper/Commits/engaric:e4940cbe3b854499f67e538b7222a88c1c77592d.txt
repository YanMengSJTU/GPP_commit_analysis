diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/PermissiveBridleWay.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/PermissiveBridleWay.java
new file mode 100644
index 0000000000..2c40261359
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/PermissiveBridleWay.java
@@ -0,0 +1,17 @@
+package com.graphhopper.reader.osgb.dpn;
+
+import com.graphhopper.reader.Way;
+
+/**
+ * Created by sadam on 13/02/15.
+ */
+public class PermissiveBridleWay extends AbstractOsDpnOsmAttibuteMappingVisitor {
+
+    @Override
+    protected void applyAttributes(Way way)
+    {
+        way.setTag("horse", "permissive");
+        way.setTag("bicycle", "permissive");
+    }
+
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/RestrictedByway.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/RestrictedByway.java
new file mode 100644
index 0000000000..dcb2ca4daf
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/RestrictedByway.java
@@ -0,0 +1,18 @@
+package com.graphhopper.reader.osgb.dpn;
+
+import com.graphhopper.reader.Way;
+
+/**
+ * Created by sadam on 13/02/15.
+ */
+public class RestrictedByway extends AbstractOsDpnOsmAttibuteMappingVisitor {
+
+    @Override
+    protected void applyAttributes(Way way)
+    {
+        way.setTag("designation", "restricted_byway");
+        way.setTag("highway", "track");
+        way.setTag("motor_vehicle", "no");
+    }
+
+}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/FootpathTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/FootpathTest.java
index 18661c96ca..cc0262e9b6 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/FootpathTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/FootpathTest.java
@@ -15,17 +15,20 @@
     Way way;
 
     @BeforeClass
-    public static void createVisitor() {
+    public static void createVisitor()
+    {
         visitor = new Footpath();
     }
 
     @Before
-    public void init() {
+    public void init()
+    {
         MockitoAnnotations.initMocks(this);
     }
 
     @Test
-    public void testVisitWayAttribute() {
+    public void testVisitWayAttribute()
+    {
         visitor.visitWayAttribute("Footpath", way);
         verify(way).setTag("designation", "public_footpath");
     }
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/PermissiveBridleWayTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/PermissiveBridleWayTest.java
new file mode 100644
index 0000000000..c5612d263a
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/PermissiveBridleWayTest.java
@@ -0,0 +1,37 @@
+package com.graphhopper.reader.osgb.dpn;
+
+import com.graphhopper.reader.Way;
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import static org.mockito.Mockito.verify;
+
+public class PermissiveBridleWayTest {
+    static OsDpnOsmAttributeMappingVisitor visitor;
+    @Mock
+    Way way;
+
+    @BeforeClass
+    public static void createVisitor()
+    {
+        visitor = new PermissiveBridleWay();
+    }
+
+    @Before
+    public void init()
+    {
+        MockitoAnnotations.initMocks(this);
+    }
+
+    @Test
+    public void testVisitWayAttribute()
+    {
+        visitor.visitWayAttribute("Permissive BridleWay", way);
+        verify(way).setTag("horse", "permissive");
+        verify(way).setTag("bicycle", "permissive");
+    }
+
+}
\ No newline at end of file
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/RestrictedBywayTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/RestrictedBywayTest.java
new file mode 100644
index 0000000000..615694de5b
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/RestrictedBywayTest.java
@@ -0,0 +1,38 @@
+package com.graphhopper.reader.osgb.dpn;
+
+import com.graphhopper.reader.Way;
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import static org.junit.Assert.*;
+import static org.mockito.Mockito.verify;
+
+public class RestrictedBywayTest {
+    static OsDpnOsmAttributeMappingVisitor visitor;
+    @Mock
+    Way way;
+
+    @BeforeClass
+    public static void createVisitor()
+    {
+        visitor = new RestrictedByway();
+    }
+
+    @Before
+    public void init()
+    {
+        MockitoAnnotations.initMocks(this);
+    }
+
+    @Test
+    public void testVisitWayAttribute() throws Exception
+    {
+        visitor.visitWayAttribute("Restricted Byway", way);
+        verify(way).setTag("designation", "restricted_byway");
+        verify(way).setTag("highway", "track");
+        verify(way).setTag("motor_vehicle", "no");
+    }
+}
\ No newline at end of file
