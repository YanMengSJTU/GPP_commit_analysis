diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/beans/RouteWayPoint.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/beans/RouteWayPoint.java
index a0885904d3..4232350d59 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/beans/RouteWayPoint.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/beans/RouteWayPoint.java
@@ -58,6 +58,11 @@ public boolean equals(RouteWayPoint routeWayPoint) {
 									.replaceAll("[^\\w]", "");
 							isEqual = thisValueAsString
 									.equalsIgnoreCase((thatValueAsString));
+							
+							if (!isEqual)
+							{
+								LOG.info("Way point Description "+thisValueAsString+" is not matching with "+thatValueAsString);
+							}
 						}
 
 						catch (Exception e) {
diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperGPXParserRouteTest.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperGPXParserRouteTest.java
index 62a67cfdb9..aaa60739c9 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperGPXParserRouteTest.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperGPXParserRouteTest.java
@@ -246,7 +246,7 @@ public boolean routeContainsTurn(String turnDescription, Route aRoute) {
 	private CloseableHttpResponse sendAndGetResponse(String requestUrl)
 			throws IOException {
 		String serviceUrl = requestUrl;
-		if (IntegrationTestProperties.getTestPropertyBool("useKey")) {
+		if (IntegrationTestProperties.getTestPropertyBool("viaApigee")) {
 			serviceUrl += "&apikey="
 					+ IntegrationTestProperties.getTestProperty("apiKey");
 			LOG.debug("APPLYING KEY:");
diff --git a/acceptancetesting/src/test/cucumber/Routing-Exeter.feature b/acceptancetesting/src/test/cucumber/Routing-Exeter.feature
index b374910f3f..26af21d72f 100644
--- a/acceptancetesting/src/test/cucumber/Routing-Exeter.feature
+++ b/acceptancetesting/src/test/cucumber/Routing-Exeter.feature
@@ -9,7 +9,7 @@ Feature: Verify a route from A to B
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco          | waypointdesc                      | azimuth | direction | time  | distance |
-      | 2             | 50.719156,-3.537811 | Continue onto A3015 (FROG STREET) | 41.0    | NE        | 14517 | 221.8    |
+      | 2             | 50.719156,-3.537811 | Continue onto A3015 (FROG STREET) | 41.0    | NE        | 13259 | 221.8    |
 
     Examples: 
       | pointA              | pointB              | routetype |
@@ -21,7 +21,7 @@ Feature: Verify a route from A to B
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco         | waypointdesc               | azimuth | direction | time | distance |
-      | 2             | 50.717806,-3.54264 | Turn left onto BULLER ROAD | 137.0   | SE        | 5744 | 55.8     |
+      | 2             | 50.717806,-3.54264 | Turn left onto BULLER ROAD | 137.0   | SE        | 4467 | 55.8     |
 
     Examples: 
       | pointA              | pointB              | routetype |
@@ -32,7 +32,7 @@ Feature: Verify a route from A to B
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco          | waypointdesc                    | azimuth | direction | time  | distance |
-      | 4             | 50.718462,-3.541302 | Turn left onto CLEVELAND STREET | 232.0   | SW        | 12258 | 119.2    |
+      | 4             | 50.718462,-3.541302 | Turn left onto CLEVELAND STREET | 232.0   | SW        | 9534 | 119.2    |
 
     Examples: 
       | pointA              | pointB              | routetype |
@@ -43,7 +43,7 @@ Feature: Verify a route from A to B
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco         | waypointdesc                    | azimuth | direction | time | distance |
-      | 4             | 50.726689,-3.52712 | Turn left onto LONGBROOK STREET | 190.0   | S         | 8057 | 78.3     |
+      | 4             | 50.726689,-3.52712 | Turn left onto LONGBROOK STREET | 190.0   | S         | 6267 | 78.3     |
 
     Examples: 
       | pointA              | pointB               | routetype |
@@ -77,7 +77,7 @@ Feature: Verify a route from A to B
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco         | waypointdesc                                 | azimuth | direction | time  | distance |
-      | 2             | 50.725549,-3.52693 | Turn slight left onto NEW NORTH ROAD (B3183) | 285.0   | W         | 74986 | 729.1    |
+      | 2             | 50.725549,-3.52693 | Turn slight left onto NEW NORTH ROAD (B3183) | 285.0   | W         | 57545 | 729.1    |
 
     Examples: 
       | pointA              | pointB             | routetype |
@@ -88,7 +88,7 @@ Feature: Verify a route from A to B
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco          | waypointdesc                     | azimuth | direction | time | distance |
-      | 2             | 50.727244,-3.522476 | Turn left onto SUMMERLAND STREET | 313.0   | NW        | 6716 | 65.3     |
+      | 2             | 50.727244,-3.522476 | Turn left onto SUMMERLAND STREET | 313.0   | NW        | 5223 | 65.3     |
 
     Examples: 
       | pointA              | pointB             | routetype |
@@ -99,7 +99,7 @@ Feature: Verify a route from A to B
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco         | waypointdesc                           | azimuth | direction | time  | distance |
-      | 4             | 50.726418,-3.52381 | Turn slight left onto BAMPFYLDE STREET | 45.0    | NE        | 13514 | 131.4    |
+      | 4             | 50.726418,-3.52381 | Turn slight left onto BAMPFYLDE STREET | 45.0    | NE        | 10510 | 131.4    |
 
     Examples: 
       | pointA              | pointB             | routetype |
@@ -111,7 +111,7 @@ Feature: Verify a route from A to B
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco          | waypointdesc                                   | azimuth | direction | time  | distance |
-      | 2             | 50.728509,-3.520647 | At roundabout, take exit 1 onto SIDWELL STREET | 282.0   | W         | 21850 | 212.5    |
+      | 2             | 50.728509,-3.520647 | At roundabout, take exit 1 onto SIDWELL STREET | 282.0   | W         | 16437 | 212.5    |
 
     Examples: 
       | pointA              | pointB              | routetype |
@@ -122,7 +122,7 @@ Feature: Verify a route from A to B
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco          | waypointdesc                  | azimuth | direction | time  | distance |
-      | 3             | 50.725002,-3.520632 | Turn left onto RUSSELL STREET | 303.0   | NW        | 25597 | 248.9    |
+      | 3             | 50.725002,-3.520632 | Turn left onto RUSSELL STREET | 303.0   | NW        | 19909 | 248.9    |
 
     Examples: 
       | pointA              | pointB              | routetype |
@@ -156,7 +156,7 @@ Feature: Verify a route from A to B
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco          | waypointdesc                | azimuth | direction | time | distance |
-      | 2             | 50.726462,-3.523882 | Continue onto CHEEKE STREET | 133.0   | SE        | 725  | 7.1      |
+      | 2             | 50.726462,-3.523882 | Continue onto CHEEKE STREET | 133.0   | SE        | 564  | 7.1      |
 
     Examples: 
       | pointA              | pointB              | routetype |
@@ -167,13 +167,13 @@ Feature: Verify a route from A to B
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco          | waypointdesc                  | azimuth | direction | time  | distance |
-      | 2             | 50.725002,-3.520632 | Turn left onto RUSSELL STREET | 303.0   | NW        | 25597 | 248.9    |
+      | 2             | 50.725002,-3.520632 | Turn left onto RUSSELL STREET | 303.0   | NW        | 19909 | 248.9    |
 
     Examples: 
       | pointA              | pointB              | routetype |
       | 50.724777,-3.520811 | 50.724394,-3.520953 | car       |
 
-  @Routing
+  @Routing @KnownIssues
   Scenario Outline: Verify  Mandatory Turn at Exeter area(COLLEGE ROAD)
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
@@ -201,7 +201,7 @@ Feature: Verify a route from A to B
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco       | waypointdesc               | azimuth | direction | time  | distance |
-      | 2             | 50.72258,-3.5326 | Continue onto SOUTH STREET | 135.0   | SE        | 38986 | 379.1    |
+      | 2             | 50.72258,-3.5326 | Continue onto SOUTH STREET | 135.0   | SE        | 15537 | 194.2    |
 
     Examples: 
       | pointA              | pointB              | routetype |
@@ -212,7 +212,7 @@ Feature: Verify a route from A to B
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco         | waypointdesc                           | azimuth | direction | time  | distance |
-      | 5             | 50.726418,-3.52381 | Turn slight left onto BAMPFYLDE STREET | 45.0    | NE        | 13514 | 131.4    |
+      | 5             | 50.726418,-3.52381 | Turn slight left onto BAMPFYLDE STREET | 45.0    | NE        | 10510 | 131.4    |
 
     Examples: 
       | pointA              | pointB              | routetype |
@@ -224,7 +224,7 @@ Feature: Verify a route from A to B
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco         | waypointdesc                   | azimuth | direction | time  | distance |
-      | 2             | 50.724661,-3.53639 | Turn left onto ST DAVID'S HILL | 310.0   | NW        | 45198 | 439.4    |
+      | 2             | 50.724661,-3.53639 | Turn left onto ST DAVID'S HILL | 310.0   | NW        | 35154 | 439.4    |
 
     Examples: 
       | pointA             | pointB              | routetype |
@@ -247,7 +247,7 @@ Feature: Verify a route from A to B
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco          | waypointdesc                    | azimuth | direction | time  | distance |
-      | 4             | 50.727823,-3.540036 | Turn slight left onto HELE ROAD | 85.0    | E         | 15789 | 153.5    |
+      | 4             | 50.727823,-3.540036 | Turn slight left onto HELE ROAD | 85.0    | E         | 12281 | 153.5    |
 
     Examples: 
       | pointA             | pointB              | routetype |
@@ -258,7 +258,7 @@ Feature: Verify a route from A to B
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco          | waypointdesc               | azimuth | direction | time  | distance |
-      | 2             | 50.730716,-3.530028 | Turn left onto HORSEGUARDS | 189.0   | S         | 28148 | 273.7    |
+      | 2             | 50.730716,-3.530028 | Turn left onto HORSEGUARDS | 189.0   | S         | 21893 | 273.7    |
 
     Examples: 
       | pointA             | pointB              | routetype |
@@ -270,7 +270,7 @@ Feature: Verify a route from A to B
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco          | waypointdesc                     | azimuth | direction | time  | distance |
-      | 3             | 50.722198,-3.526704 | Turn right onto SOUTHERNHAY EAST | 202.0   | SW        | 26318 | 255.9    |
+      | 3             | 50.722198,-3.526704 | Turn right onto SOUTHERNHAY EAST | 202.0   | SW        | 20129 | 255.9    |
 
     Examples: 
       | pointA              | pointB             | routetype |
@@ -281,7 +281,7 @@ Feature: Verify a route from A to B
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco          | waypointdesc        | azimuth | direction | time  | distance |
-      | 2             | 50.722081,-3.539012 | Turn left onto A377 | 166.0   | S         | 25882 | 395.5    |
+      | 2             | 50.722081,-3.539012 | Turn left onto A377 | 166.0   | S         | 29003 | 395.5    |
 
     Examples: 
       | pointA            | pointB              | routetype |
@@ -293,7 +293,7 @@ Feature: Verify a route from A to B
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco         | waypointdesc                    | azimuth | direction | time  | distance |
-      | 2             | 50.732011,-3.53798 | Turn right onto STREATHAM DRIVE | 2.0     | N         | 17156 | 166.8    |
+      | 2             | 50.732011,-3.53798 | Turn right onto STREATHAM DRIVE | 2.0     | N         | 13195 | 166.8    |
 
     Examples: 
       | pointA              | pointB              | routetype |
@@ -305,7 +305,7 @@ Feature: Verify a route from A to B
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco          | waypointdesc                                           | azimuth | direction | time  | distance |
-      | 2             | 50.727397,-3.535531 | At roundabout, take exit 3 onto NEW NORTH ROAD (B3183) | 295.0   | NW        | 18644 | 181.3    |
+      | 2             | 50.727397,-3.535531 | At roundabout, take exit 3 onto NEW NORTH ROAD (B3183) | 295.0   | NW        | 14023 | 181.3    |
 
     Examples: 
       | pointA              | pointB              | routetype |
@@ -316,7 +316,7 @@ Feature: Verify a route from A to B
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco         | waypointdesc                      | azimuth | direction | time | distance |
-      | 1             | 50.72593,-3.521909 | Continue onto B3212 (WESTERN WAY) | 38.0    | NE        | 3985 | 38.7     |
+      | 1             | 50.72593,-3.521909 | Continue onto B3212 (WESTERN WAY) | 38.0    | NE        | 3099 | 38.7     |
 
     Examples: 
       | pointA              | pointB             | routetype |
@@ -339,7 +339,7 @@ Feature: Verify a route from A to B
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco          | waypointdesc                                   | azimuth | direction | time  | distance |
-      | 2             | 50.728793,-3.520273 | At roundabout, take exit 2 onto SIDWELL STREET | 178.0   | S         | 26654 | 259.2    |
+      | 2             | 50.728793,-3.520273 | At roundabout, take exit 2 onto SIDWELL STREET | 178.0   | S         | 19800 | 259.2    |
 
     Examples: 
       | pointA              | pointB              | routetype |
@@ -350,9 +350,56 @@ Feature: Verify a route from A to B
     Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco          | waypointdesc                                        | azimuth | direction | time  | distance |
-      | 2             | 50.725096,-3.522378 | At roundabout, take exit 4 onto B3212 (WESTERN WAY) | 239.0   | SW        | 26306 | 255.8    |
+      | 2             | 50.725096,-3.522378 | At roundabout, take exit 4 onto B3212 (WESTERN WAY) | 239.0   | SW        | 19384 | 255.8    |
 
     Examples: 
       | pointA              | pointB              | routetype |
       | 50.724137,-3.518937 | 50.728366,-3.524132 | car       |
       
+     # Quickest route
+  # Motorways (Victoria Street, Union Road ,Blackhall Road ,Well Street ,Devon Shire Place, Culverland Road).These roads are converted into motorways in Exeter
+      
+      @Routing
+  Scenario Outline: Verify  a quickest route  on a Route (Springfield Road-Exeter)
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Then I should be able to verify the waypoints on the route map:
+      | wayPointIndex | waypointco          | waypointdesc                    | azimuth | direction | time | distance |
+      | 2             | 50.733764,-3.523212 | Turn right onto VICTORIA STREET | 150.0   | SE        | 7689 | 213.6    |
+
+    Examples: 
+      | pointA             | pointB            | routetype |
+      | 50.733719,-3.52332 | 50.732556,-3.5211 | car       |
+
+  @Routing
+  Scenario Outline: Verify  a quickest route  on a Route (DEVON SHIRE PLACE-Exeter)
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Then I should be able to verify the waypoints on the route map:
+      | wayPointIndex | waypointco          | waypointdesc                      | azimuth | direction | time | distance |
+      | 3             | 50.733574,-3.524027 | Turn right onto DEVON SHIRE PLACE | 162.0   | S         | 8490 | 235.9    |
+
+    Examples: 
+      | pointA              | pointB             | routetype |
+      | 50.734095,-3.524696 | 50.72809,-3.524451 | car       |
+
+  @Routing
+  Scenario Outline: Verify  a quickest route  on a Route (BLACKALL ROAD-Exeter)
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Then I should be able to verify the waypoints on the route map:
+      | wayPointIndex | waypointco          | waypointdesc                                | azimuth | direction | time  | distance |
+      | 3             | 50.727984,-3.530548 | Turn sharp left onto NEW NORTH ROAD (B3183) | 117.0   | SE        | 22108 | 276.4    |
+
+    Examples: 
+      | pointA              | pointB             | routetype |
+      | 50.729887,-3.526896 | 50.726279,-3.52780 | car       |
+
+  @Routing
+  Scenario Outline: Verify  a quickest route  on a Route (VICTORIA STREET-Exeter)
+    Given I request a route between "<pointA>" and "<pointB>" as a "<routetype>" from RoutingAPI
+    Then I should be able to verify the waypoints on the route map:
+      | wayPointIndex | waypointco          | waypointdesc                    | azimuth | direction | time | distance |
+      | 2             | 50.733764,-3.523212 | Turn right onto VICTORIA STREET | 150.0   | SE        | 7689 | 213.6    |
+
+    Examples: 
+      | pointA              | pointB              | routetype |
+      | 50.733648,-3.523662 | 50.732844,-3.521332 | car       |
+      
diff --git a/acceptancetesting/src/test/java/uk/co/ordnancesurvey/routing/CucumberRunner.java b/acceptancetesting/src/test/java/uk/co/ordnancesurvey/routing/CucumberRunner.java
index 1c9a3f5eb4..95cf01c2ba 100644
--- a/acceptancetesting/src/test/java/uk/co/ordnancesurvey/routing/CucumberRunner.java
+++ b/acceptancetesting/src/test/java/uk/co/ordnancesurvey/routing/CucumberRunner.java
@@ -8,7 +8,7 @@
 
 @RunWith(Cucumber.class)
 @Category(IntegrationTestProperties.class)
-@Cucumber.Options(format = { "html:target/cucumber-reports/html", "json:target/cucumber-reports/cucumber.json" }, glue="uk.co.ordnancesurvey.routing", tags = { "~@RegressionLiveDataTests","@Routing"})
+@Cucumber.Options(format = { "html:target/cucumber-reports/html", "json:target/cucumber-reports/cucumber.json" }, glue="uk.co.ordnancesurvey.routing", features={"src/test/cucumber/Routing-Exeter.feature"},tags = { "~@RegressionLiveDataTests","@Current"})
 public class CucumberRunner {
 	    
    
diff --git a/acceptancetesting/src/test/resources/test-ci-dpn.properties b/acceptancetesting/src/test/resources/test-ci-dpn.properties
index d7f4629fd2..6c1e4a8671 100644
--- a/acceptancetesting/src/test/resources/test-ci-dpn.properties
+++ b/acceptancetesting/src/test/resources/test-ci-dpn.properties
@@ -1,5 +1,6 @@
 #DPN Data
-graphHopperWebUrl=https://ordnance-eu-test.apigee.net/nonvehicle_routing_api/
+graphHopperWebUrlViaApigee=https://ordnance-eu-test.apigee.net/nonvehicle_routing_api/
+graphHopperWebUrl=https://dpn-env.elasticbeanstalk.com/
 webDriverHubUrl=http://ND28350.ordsvy.gov.uk:5555/wd/hub
 #webDriverHubUrl=http://ND27983.ordsvy.gov.uk:5555/wd/hub
 
@@ -8,5 +9,4 @@ testON=Service
 traceEnabled=false
 plugInAuthLocation=src/test/resources/autoauth-2.1-fx+fn.xpi
 excludedPlatforms=MAC:chrome,MAC:firefox,WINDOWS:chrome,WINDOWS:internet explorer,LINUX:firefox
-browserWindowDimension=1920,800
-useKey=true
\ No newline at end of file
+browserWindowDimension=1920,800
\ No newline at end of file
diff --git a/acceptancetesting/src/test/resources/test-ci-exeter.properties b/acceptancetesting/src/test/resources/test-ci-exeter.properties
new file mode 100644
index 0000000000..476ca41c5b
--- /dev/null
+++ b/acceptancetesting/src/test/resources/test-ci-exeter.properties
@@ -0,0 +1,11 @@
+# Revised Exeter data set
+graphHopperWebUrlViaApigee=
+graphHopperWebUrl=http://os-gh-ite.elasticbeanstalk.com/
+
+webDriverHubUrl=http://ND28350.ordsvy.gov.uk:5555/wd/hub
+#testON=Web,Service  // Default both
+testON=Service
+traceEnabled=false
+plugInAuthLocation=src/test/resources/autoauth-2.1-fx+fn.xpi
+excludedPlatforms=MAC:chrome,MAC:firefox,WINDOWS:chrome,WINDOWS:internet explorer,LINUX:firefox
+browserWindowDimension=1920,800
\ No newline at end of file
diff --git a/acceptancetesting/src/test/resources/test-ci-fullitn.properties b/acceptancetesting/src/test/resources/test-ci-fullitn.properties
index 0d6ac80e14..b2758da20f 100644
--- a/acceptancetesting/src/test/resources/test-ci-fullitn.properties
+++ b/acceptancetesting/src/test/resources/test-ci-fullitn.properties
@@ -1,13 +1,13 @@
 # Full UK ITN data set
-graphHopperWebUrl=https://ordnance-eu-test.apigee.net/routing_api/
+graphHopperWebUrlViaApigee=https://ordnance-eu-test.apigee.net/routing_api/
+graphHopperWebUrl=https://os-graphhopper.elasticbeanstalk.com/
 
 webDriverHubUrl=http://ND28350.ordsvy.gov.uk:5555/wd/hub
 #webDriverHubUrl=http://ND27983.ordsvy.gov.uk:5555/wd/hub
 
 #testON=Web,Service  // Default both
-testON=
+testON=Service
 traceEnabled=false
 plugInAuthLocation=src/test/resources/autoauth-2.1-fx+fn.xpi
 excludedPlatforms=MAC:chrome,MAC:firefox,WINDOWS:chrome,WINDOWS:internet explorer,LINUX:firefox
 browserWindowDimension=1920,800
-useKey=true
diff --git a/acceptancetesting/src/test/resources/test-ci.properties b/acceptancetesting/src/test/resources/test-ci.properties
index c6ad2e52f6..21aadf9a40 100644
--- a/acceptancetesting/src/test/resources/test-ci.properties
+++ b/acceptancetesting/src/test/resources/test-ci.properties
@@ -1,6 +1,6 @@
-# Revised Exeter data set
-
-graphHopperWebUrl=https://ordnance-eu-test.apigee.net/routing_api/
+# Full UK ITN data set
+graphHopperWebUrlViaApigee=https://ordnance-eu-test.apigee.net/routing_api/
+graphHopperWebUrl=https://os-graphhopper.elasticbeanstalk.com/
 
 webDriverHubUrl=http://ND28350.ordsvy.gov.uk:5555/wd/hub
 #testON=Web,Service  // Default both
@@ -8,4 +8,4 @@ testON=Service
 traceEnabled=false
 plugInAuthLocation=src/test/resources/autoauth-2.1-fx+fn.xpi
 excludedPlatforms=MAC:chrome,MAC:firefox,WINDOWS:chrome,WINDOWS:internet explorer,LINUX:firefox
-useKey=true
+browserWindowDimension=1920,800
\ No newline at end of file
diff --git a/acceptancetesting/src/test/resources/test.properties b/acceptancetesting/src/test/resources/test.properties
index 04b0938c74..5d5bd2ce55 100644
--- a/acceptancetesting/src/test/resources/test.properties
+++ b/acceptancetesting/src/test/resources/test.properties
@@ -17,5 +17,4 @@ traceEnabled=false
 plugInAuthLocation=src/test/resources/autoauth-2.1-fx+fn.xpi
 excludedPlatforms=MAC:chrome,MAC:firefox,WINDOWS:chrome,WINDOWS:internet explorer,LINUX:firefox
 browserWindowDimension=1920,800
-useKey=true
 
diff --git a/core/src/main/java/com/graphhopper/GraphHopper.java b/core/src/main/java/com/graphhopper/GraphHopper.java
index 029b265fdb..43e06b83a1 100644
--- a/core/src/main/java/com/graphhopper/GraphHopper.java
+++ b/core/src/main/java/com/graphhopper/GraphHopper.java
@@ -533,8 +533,9 @@ public TranslationMap getTranslationMap() {
 	 * "graphhopper.config")
 	 */
 	public GraphHopper init(CmdArgs args) {
-		this.args = CmdArgs.readFromConfigAndMerge(args, "config",
+		args = CmdArgs.readFromConfigAndMerge(args, "config",
 				"graphhopper.config");
+		this.args=args;
 		String tmpOsmFile = args.get("osmreader.osm", "");
 		if (!Helper.isEmpty(tmpOsmFile))
 			osmFile = tmpOsmFile;
@@ -902,19 +903,20 @@ public Weighting createWeighting(WeightingMap weightingMap,
 			else
 				result = new FastestWeighting(encoder);
 		} else if ("fastavoid".equalsIgnoreCase(weighting)) {
-			String avoidances = weightingMap.get("avoidances", "cliff");
+			String avoidanceString = weightingMap.get("avoidances", "cliff");
+			String[] avoidances = avoidanceString.split(",");
 			if (encoder.supports(PriorityWeighting.class))
 				result = new PriorityWithAvoidancesWeighting(encoder, avoidances);
 			else
 				result = new FastestWithAvoidancesWeighting(encoder, avoidances);
 		} else if ("shortavoid".equalsIgnoreCase(weighting)) {
-			String avoidances = weightingMap.get("avoidances", "cliff");
+			String avoidanceString = weightingMap.get("avoidances", "cliff");
+			String[] avoidances = avoidanceString.split(",");
 			result = new ShortestWithAvoidancesWeighting(encoder, avoidances);
 		} else {
 			throw new UnsupportedOperationException("weighting " + weighting
 					+ " not supported");
 		}
-		System.err.println("WEIGHTING:" + result.getClass());
 		return result;
 	}
 
diff --git a/core/src/main/java/com/graphhopper/reader/RoutingElement.java b/core/src/main/java/com/graphhopper/reader/RoutingElement.java
index 7977716d31..a0d3c2b208 100644
--- a/core/src/main/java/com/graphhopper/reader/RoutingElement.java
+++ b/core/src/main/java/com/graphhopper/reader/RoutingElement.java
@@ -7,7 +7,7 @@
 
     void setTag(String name, Object value);
 
-    String getTag(String string);
+    String getTag(String name);
 
     <T> T getTag(String key, T defaultValue);
 
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/AbstractOsReader.java b/core/src/main/java/com/graphhopper/reader/osgb/AbstractOsReader.java
index 03eadc73a4..28e55a3153 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/AbstractOsReader.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/AbstractOsReader.java
@@ -30,6 +30,7 @@
 
 
     private static final Logger logger = LoggerFactory.getLogger(AbstractOsReader.class.getName());
+    protected static final String WE_HAVE_EVALUATED_WAY_NODES_FORMAT = "We have evaluated {} way nodes.";
 
     public AbstractOsReader(GraphStorage storage) {
         this.graphStorage = storage;
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/Boulders.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/Boulders.java
index 3101db5d3b..102fe82a65 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/Boulders.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/Boulders.java
@@ -10,7 +10,7 @@
     @Override
     protected void applyAttributes(Way way)
     {
-        way.setTag("natural", "rocks");
+        way.setTag("natural", "boulders");
     }
 
 }
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnElement.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnElement.java
index dfdff8b25c..24b7b7fab8 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnElement.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnElement.java
@@ -1,14 +1,14 @@
 /*
  *  Licensed to GraphHopper and Peter Karich under one or more contributor
- *  license agreements. See the NOTICE file distributed with this work for 
+ *  license agreements. See the NOTICE file distributed with this work for
  *  additional information regarding copyright ownership.
- * 
- *  GraphHopper licenses this file to you under the Apache License, 
- *  Version 2.0 (the "License"); you may not use this file except in 
+ *
+ *  GraphHopper licenses this file to you under the Apache License,
+ *  Version 2.0 (the "License"); you may not use this file except in
  *  compliance with the License. You may obtain a copy of the License at
- * 
+ *
  *       http://www.apache.org/licenses/LICENSE-2.0
- * 
+ *
  *  Unless required by applicable law or agreed to in writing, software
  *  distributed under the License is distributed on an "AS IS" BASIS,
  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
@@ -38,7 +38,7 @@
 /**
  * Base class for all OSM objects
  * <p/>
- * 
+ *
  * @author Nop
  * @author Peter
  */
@@ -178,7 +178,7 @@ protected int handleRightOfUse(XMLStreamReader parser) throws XMLStreamException
     {
         return parser.next();
     }
-    
+
     protected int handlePotentialHazard(XMLStreamReader parser) throws XMLStreamException
     {
         return parser.next();
@@ -215,7 +215,7 @@ private String getTypeBasedName(String roadType)
 	    return "Route";
 	return roadType;
     }
-    
+
     private String getOsmMappedTypeName(String roadType)
     {
     	String typeName = roadType;
@@ -348,7 +348,8 @@ public boolean hasTags()
     @Override
     public String getTag(String name)
     {
-	return (String) properties.get(name);
+        Object object = properties.get(name);
+        return (null != object) ? (String) object.toString() : null;
     }
 
     @Override
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnReader.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnReader.java
index 2fe0c95e8e..be91dd8811 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnReader.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnReader.java
@@ -18,6 +18,9 @@
 
 import javax.xml.stream.XMLStreamException;
 
+import org.opengis.geometry.MismatchedDimensionException;
+import org.opengis.referencing.FactoryException;
+import org.opengis.referencing.operation.TransformException;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -303,7 +306,9 @@ protected void writeOsm2Graph(File osmFile) {
                         logger.info(nf(counter) + ", now parsing ways");
                         wayStart = counter;
                     }
+                    prepareWaysNodes(dpnWay, getNodeMap());
                     processWay(dpnWay);
+                    dpnWay.clearStoredCoords();
                     break;
                 case OSMElement.RELATION:
                     if (relationStart < 0) {
@@ -334,6 +339,16 @@ protected void writeOsm2Graph(File osmFile) {
                     + counter + " lines and " + locations + " locations");
     }
 
+    private List<OsDpnNode> prepareWaysNodes(RoutingElement item, TObjectIntMap<String> nodeFilter) throws MismatchedDimensionException, FactoryException, TransformException {
+        List<OsDpnNode> evaluateWayNodes = ((OsDpnWay) item).evaluateWayNodes(null);
+        for (OsDpnNode osdpnNode : evaluateWayNodes) {
+            nodeFilter.put(osdpnNode.getId(), PILLAR_NODE);
+            processNode(osdpnNode);
+        }
+        logger.info(WE_HAVE_EVALUATED_WAY_NODES_FORMAT, evaluateWayNodes.size());
+        return evaluateWayNodes;
+    }
+
     /**
      * Process properties, encode flags and create edges for the way.
      */
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnWay.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnWay.java
index 786222f5b9..f84560f72b 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnWay.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnWay.java
@@ -18,9 +18,11 @@
 package com.graphhopper.reader.osgb.dpn;
 
 import com.graphhopper.reader.Way;
+
 import gnu.trove.map.TDoubleLongMap;
 import gnu.trove.map.TDoubleObjectMap;
 import gnu.trove.map.TLongObjectMap;
+
 import org.opengis.geometry.MismatchedDimensionException;
 import org.opengis.referencing.FactoryException;
 import org.opengis.referencing.operation.TransformException;
@@ -29,6 +31,7 @@
 
 import javax.xml.stream.XMLStreamException;
 import javax.xml.stream.XMLStreamReader;
+
 import java.util.ArrayList;
 import java.util.Arrays;
 import java.util.List;
@@ -40,252 +43,273 @@
  * @author Nop
  */
 public class OsDpnWay extends OsDpnElement implements Way {
-    private static final long WAY_NODE_PREFIX_MOD = 100000000000000000L;
-    protected final List<String> nodes = new ArrayList<String>(5);
-    private String endNode;
-    protected String startCoord;
-    protected String endCoord;
-    private String[] wayCoords;
-    private static final Logger logger = LoggerFactory
-            .getLogger(OsDpnWay.class);
-    private static OsDpnOsmAttributeMappingVisitor[] rightOfWayVisitors = {new BridleWay(), new PermissiveBridleWay(), new BywayOpenToAllTraffic(), new None(), new OtherRouteWithPublicAccess(), new Footpath(), new PermissivePath(), new RestrictedByway()};
-    private static OsDpnOsmAttributeMappingVisitor[] potentialHazardVisitors = {new Boulders(), new Cliff(), new Marsh(), new Mud(), new Sand(), new Scree(), new Shingle(), new Spoil(), new Rock(), new TidalWater()};
-
-    /**
-     * Constructor for XML Parser
-     * 
-     * @throws TransformException
-     * @throws FactoryException
-     * @throws MismatchedDimensionException
-     */
-    public static OsDpnWay create(String idStr, XMLStreamReader parser)
-            throws XMLStreamException, MismatchedDimensionException,
-            FactoryException, TransformException {
-        logger.trace("OsDpnWay.create()");
-        OsDpnWay way = new OsDpnWay(idStr);
-        parser.nextTag();
-        way.setTag("highway", "track");
-        way.readTags(parser);
-        logger.info(way.toString());
-        return way;
-    }
-
-    public OsDpnWay(String id)
-    {
-        super(id, WAY);
-    }
-
-    public List<String> getNodes()
-    {
-        return nodes;
-    }
-
-    @Override
-    protected int handleCycleRoute(XMLStreamReader parser) throws XMLStreamException
-    {
-        String access = parser.getElementText();
-        if("true".equals(access))
-        {
-            setTag("bicycle", "yes");
-        }
-        return parser.getEventType();
-    }
-
-    @Override
-    protected int handleAccessLand(XMLStreamReader parser) throws XMLStreamException {
-        String access = parser.getElementText();
-        if("true".equals(access))
-        {
-            setTag("foot", "yes");
-        }
-        return parser.getEventType();
-    }
-
-    @Override
-    protected int handleSurfaceType(XMLStreamReader parser) throws XMLStreamException {
-        String surface;
-        String surfaceType = parser.getElementText();
-        if("Made Sealed".equals(surfaceType))
-        {
-            surface = "paved";
-        }
-        else if("Unmade".equals(surfaceType))
-        {
-            surface = "ground";
-        }
-        else
-        {
-            surface = "unpaved";
-        }
-        setTag("surface", surface);
-        return parser.getEventType();
-    }
-
-    @Override
-    protected int handlePhysicalLevel(XMLStreamReader parser) throws XMLStreamException
-    {
-        String text = parser.getElementText();
-        if("Below Surface Level Tunnel".equals(text)) {
-            setTag("tunnel", "yes");
-        } else if("Above Surface Level On Structure".equals(text)) {
-            setTag("bridge", "yes");
-        }
-        return parser.getEventType();
-    }
-
-    @Override
-    protected int handleRightOfUse(XMLStreamReader parser) throws XMLStreamException
-    {
-        String attributeValue = parser.getElementText().replaceAll(" ", "").toLowerCase();
-        for(OsDpnOsmAttributeMappingVisitor rightOfWayVisitor: rightOfWayVisitors) {
-            rightOfWayVisitor.visitWayAttribute(attributeValue, this);
-        }
-        return parser.getEventType();
-    }
-    
-    @Override
-    protected int handlePotentialHazard(XMLStreamReader parser) throws XMLStreamException
-    {
-        String attributeValue = parser.getElementText().replaceAll(" ", "").toLowerCase();
-        for(OsDpnOsmAttributeMappingVisitor potentialHazzardVisitor: potentialHazardVisitors) {
-        	potentialHazzardVisitor.visitWayAttribute(attributeValue, this);
-        }
-        return parser.getEventType();
-    }
-
-    @Override
-    protected void parseCoords(String lineDefinition) {
-        String[] lineSegments = lineDefinition.split(" ");
-        wayCoords = Arrays
-                .copyOfRange(lineSegments, 1, lineSegments.length - 1);
-        logger.info("parseCoords1" + toString() + " "
-                + ((wayCoords.length == 0) ? "0" : wayCoords[0]));
-    }
-
-    @Override
-    protected void parseCoords(int dimensions, String lineDefinition) {
-        String[] lineSegments = lineDefinition.split(" ");
-        wayCoords = new String[lineSegments.length / dimensions];
-        StringBuilder curString = null;
-        for (int i = 0; i < lineSegments.length; i++) {
-            String string = lineSegments[i];
-            switch (i % dimensions) {
-                case 0: {
-                    int coordNumber = i / dimensions;
-                    if (coordNumber > 0) {
-                        wayCoords[coordNumber - 1] = curString.toString();
-                    }
-                    curString = new StringBuilder();
-                    curString.append(string);
-                    break;
-                }
-
-                case 1:
-                case 2: {
-                    curString.append(',');
-                    curString.append(string);
-                }
-            }
-        }
-        wayCoords[wayCoords.length - 1] = curString.toString();
-        addWayNodes();
-        nodes.add(endNode);
-        logger.info("parsecoord2" + toString() + " "
-                + ((wayCoords.length == 0) ? "0" : wayCoords[0]));
-    }
-
-    @Override
-    protected void parseNetworkMember(String elementText) {
-        throw new UnsupportedOperationException();
-    }
-
-    @Override
-    protected void addNode(String nodeId) {
-        String idStr = nodeId.substring(1);
-        if (0 == nodes.size()) {
-            nodes.add(idStr);
-        } else {
-            endNode = idStr;
-        }
-    }
-
-    protected void addWayNodes() {
-        for (int i = 1; i <= wayCoords.length; i++) {
-            long idPrefix = i;
-            String extraId = idPrefix + getId();
-            nodes.add(extraId);
-        }
-    }
-
-    @Override
-    protected void addDirectedLink(String nodeId, String orientation) {
-        throw new UnsupportedOperationException();
-    }
-
-    /**
-     * Creates a new OsDpnNode for each wayCoord. This also Looks for direction
-     * flags in edgeIdToXToYToNodeFlagsMap for the wayId, x, y combination. If
-     * it exists then set the node tag TAG_KEY_NOENTRY_ORIENTATION to true and
-     * the TAG_KEY_ONEWAY_ORIENTATION node tag to -1 for one direction and true
-     * for the other.
-     * 
-     * @param edgeIdToXToYToNodeFlagsMap
-     * @return
-     * @throws TransformException
-     * @throws FactoryException
-     * @throws MismatchedDimensionException
-     */
-    public List<OsDpnNode> evaluateWayNodes(
-            TLongObjectMap<TDoubleObjectMap<TDoubleLongMap>> edgeIdToXToYToNodeFlagsMap)
-            throws MismatchedDimensionException, FactoryException,
-            TransformException {
-        List<OsDpnNode> wayNodes = new ArrayList<OsDpnNode>();
-
-        for (int i = 0; i < wayCoords.length; i++) {
-            String wayCoord = wayCoords[i];
-
-            long idPrefix = (i + 1) * WAY_NODE_PREFIX_MOD;
-            String id = idPrefix + getId();
-            OsDpnNode wayNode = new OsDpnNode(id);
-            wayNode.parseCoords(wayCoord);
-
-            logger.info("Node " + getId() + " coords: " + wayCoord + " tags: ");
-            for (String tagKey : wayNode.getTags().keySet()) {
-                logger.info("\t " + tagKey + " : " + wayNode.getTag(tagKey));
-            }
-
-            wayNodes.add(wayNode);
-        }
-        return wayNodes;
-    }
-
-    /**
-     * Memory management method. Once a way is processed the stored string
-     * coordinates are no longer required so set them to null so they can be
-     * garbage collected
-     */
-    public void clearStoredCoords() {
-        wayCoords = null;
-        startCoord = null;
-        endCoord = null;
-    }
-
-    public String[] getWayCoords() {
-        return wayCoords;
-    }
-
-    public String getStartCoord() {
-        return startCoord;
-    }
-
-    public String getEndCoord() {
-        return endCoord;
-    }
-
-    protected void parseCoordinateString(String elementText,
-            String elementSeparator) {
-        throw new UnsupportedOperationException();
-
-    }
+	protected final List<String> nodes = new ArrayList<String>(5);
+	private String endNode;
+	protected String startCoord;
+	protected String endCoord;
+	private String[] wayCoords;
+	private static final Logger logger = LoggerFactory
+			.getLogger(OsDpnWay.class);
+	private static OsDpnOsmAttributeMappingVisitor[] rightOfWayVisitors = {
+			new BridleWay(), new PermissiveBridleWay(),
+			new BywayOpenToAllTraffic(), new None(),
+			new OtherRouteWithPublicAccess(), new Footpath(),
+			new PermissivePath(), new RestrictedByway() };
+	private static OsDpnOsmAttributeMappingVisitor[] potentialHazardVisitors = {
+			new Boulders(), new Cliff(), new Marsh(), new Mud(), new Sand(),
+			new Scree(), new Shingle(), new Spoil(), new Rock(),
+			new TidalWater() };
+
+	/**
+	 * Constructor for XML Parser
+	 * 
+	 * @throws TransformException
+	 * @throws FactoryException
+	 * @throws MismatchedDimensionException
+	 */
+	public static OsDpnWay create(String idStr, XMLStreamReader parser)
+			throws XMLStreamException, MismatchedDimensionException,
+			FactoryException, TransformException {
+		logger.trace("OsDpnWay.create()");
+		OsDpnWay way = new OsDpnWay(idStr);
+		parser.nextTag();
+		way.setTag("highway", "track");
+		way.readTags(parser);
+		logger.info(way.toString());
+		return way;
+	}
+
+	public OsDpnWay(String id) {
+		super(id, WAY);
+	}
+
+	public List<String> getNodes() {
+		return nodes;
+	}
+
+	@Override
+	protected int handleCycleRoute(XMLStreamReader parser)
+			throws XMLStreamException {
+		String access = parser.getElementText();
+		if ("true".equals(access)) {
+			setTag("bicycle", "yes");
+		}
+		return parser.getEventType();
+	}
+
+	@Override
+	protected int handleAccessLand(XMLStreamReader parser)
+			throws XMLStreamException {
+		String access = parser.getElementText();
+		if ("true".equals(access)) {
+			setTag("foot", "yes");
+		}
+		return parser.getEventType();
+	}
+
+	@Override
+	protected int handleSurfaceType(XMLStreamReader parser)
+			throws XMLStreamException {
+		String surface;
+		String surfaceType = parser.getElementText();
+		if ("Made Sealed".equals(surfaceType)) {
+			surface = "paved";
+		} else if ("Unmade".equals(surfaceType)) {
+			surface = "ground";
+		} else {
+			surface = "unpaved";
+		}
+		setTag("surface", surface);
+		return parser.getEventType();
+	}
+
+	@Override
+	protected int handlePhysicalLevel(XMLStreamReader parser)
+			throws XMLStreamException {
+		String text = parser.getElementText();
+		if ("Below Surface Level Tunnel".equals(text)) {
+			setTag("tunnel", "yes");
+		} else if ("Above Surface Level On Structure".equals(text)) {
+			setTag("bridge", "yes");
+		}
+		return parser.getEventType();
+	}
+
+	@Override
+	protected int handleRightOfUse(XMLStreamReader parser)
+			throws XMLStreamException {
+		String attributeValue = parser.getElementText().replaceAll(" ", "")
+				.toLowerCase();
+		for (OsDpnOsmAttributeMappingVisitor rightOfWayVisitor : rightOfWayVisitors) {
+			rightOfWayVisitor.visitWayAttribute(attributeValue, this);
+		}
+		return parser.getEventType();
+	}
+
+	@Override
+	protected int handlePotentialHazard(XMLStreamReader parser)
+			throws XMLStreamException {
+		String attributeValue = parser.getElementText().replaceAll(" ", "")
+				.toLowerCase();
+		for (OsDpnOsmAttributeMappingVisitor potentialHazzardVisitor : potentialHazardVisitors) {
+			potentialHazzardVisitor.visitWayAttribute(attributeValue, this);
+		}
+		return parser.getEventType();
+	}
+
+	@Override
+	protected void parseCoords(String lineDefinition) {
+		String[] lineSegments = lineDefinition.split(" ");
+		wayCoords = Arrays
+				.copyOfRange(lineSegments, 1, lineSegments.length - 1);
+		logger.info("parseCoords1" + toString() + " "
+				+ ((wayCoords.length == 0) ? "0" : wayCoords[0]));
+	}
+
+	/**
+	 * Ignores first and last coordinate set as they are also the start and end
+	 * node coordinates and therefore already captured as towers
+	 */
+	@Override
+	protected void parseCoords(int dimensions, String lineDefinition) {
+		String[] lineSegments = lineDefinition.split(" ");
+		int innerCoordCount = lineSegments.length / dimensions - 2;
+		if (innerCoordCount > 0) {
+			wayCoords = new String[innerCoordCount];
+			StringBuilder curString = null;
+			for (int i = dimensions; i < lineSegments.length - dimensions; i++) {
+				String string = lineSegments[i];
+				switch (i % dimensions) {
+				case 0: {
+					int coordNumber = (i / dimensions) - 1;
+					if (coordNumber > 0) {
+						wayCoords[coordNumber - 1] = curString.toString();
+					}
+					curString = new StringBuilder();
+					curString.append(string);
+					break;
+				}
+
+				case 1:
+				case 2: {
+					curString.append(' ');
+					curString.append(string);
+				}
+				}
+			}
+			wayCoords[wayCoords.length - 1] = curString.toString();
+			addWayNodes();
+			nodes.add(endNode);
+			logger.info("parsecoord2" + toString() + " "
+					+ ((wayCoords.length == 0) ? "0" : wayCoords[0]));
+		}
+		else
+		{
+			wayCoords = null;
+		}
+	}
+
+	@Override
+	protected void parseNetworkMember(String elementText) {
+		throw new UnsupportedOperationException();
+	}
+
+	@Override
+	protected void addNode(String nodeId) {
+		String idStr = nodeId.substring(1);
+		if (0 == nodes.size()) {
+			nodes.add(idStr);
+		} else {
+			endNode = idStr;
+		}
+	}
+
+	protected void addWayNodes() {
+		for (int i = 1; i <= wayCoords.length; i++) {
+			long idPrefix = i;
+			String extraId = idPrefix + getId();
+			nodes.add(extraId);
+		}
+	}
+
+	@Override
+	protected void addDirectedLink(String nodeId, String orientation) {
+		throw new UnsupportedOperationException();
+	}
+
+	/**
+	 * Creates a new OsDpnNode for each wayCoord. This also Looks for direction
+	 * flags in edgeIdToXToYToNodeFlagsMap for the wayId, x, y combination. If
+	 * it exists then set the node tag TAG_KEY_NOENTRY_ORIENTATION to true and
+	 * the TAG_KEY_ONEWAY_ORIENTATION node tag to -1 for one direction and true
+	 * for the other.
+	 * 
+	 * @param edgeIdToXToYToNodeFlagsMap
+	 * @return
+	 * @throws TransformException
+	 * @throws FactoryException
+	 * @throws MismatchedDimensionException
+	 */
+	public List<OsDpnNode> evaluateWayNodes(TLongObjectMap<TDoubleObjectMap<TDoubleLongMap>> edgeIdToXToYToNodeFlagsMap)
+			throws MismatchedDimensionException, FactoryException, TransformException 
+			{
+		List<OsDpnNode> wayNodes = new ArrayList<OsDpnNode>();
+
+		if (null != wayCoords) {
+			for (int i = 0; i < wayCoords.length; i++) {
+				String wayCoord = wayCoords[i];
+
+				long idPrefix = (i + 1);
+				String id = idPrefix + getId();
+				OsDpnNode wayNode = new OsDpnNode(id);
+				wayNode.parseCoords(wayCoord);
+
+				logger.info("Node " + getId() + " coords: " + wayCoord
+						+ " tags: ");
+				for (String tagKey : wayNode.getTags().keySet()) {
+					logger.info("\t " + tagKey + " : " + wayNode.getTag(tagKey));
+				}
+				wayNodes.add(wayNode);
+			}
+		}
+		return wayNodes;
+	}
+
+	/**
+	 * Memory management method. Once a way is processed the stored string
+	 * coordinates are no longer required so set them to null so they can be
+	 * garbage collected
+	 */
+	public void clearStoredCoords() 
+	{
+		wayCoords = null;
+		startCoord = null;
+		endCoord = null;
+	}
+
+	public String[] getWayCoords() {
+		return wayCoords;
+	}
+
+	public String getStartCoord() {
+		return startCoord;
+	}
+
+	public String getEndCoord() {
+		return endCoord;
+	}
+
+	protected void parseCoordinateString(String elementText,
+			String elementSeparator) {
+		throw new UnsupportedOperationException();
+
+	}
+
+	@Override
+	public String toString() {
+		return super.toString() + " id:" + getId() + " start:" + nodes.get(0)
+				+ " end:" + nodes.get(nodes.size() - 1) + " NAME:"
+				+ getTag("name");
+	}
 
 }
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnReader.java b/core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnReader.java
index 6370babff7..cc44f6e921 100755
--- a/core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnReader.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnReader.java
@@ -137,7 +137,6 @@
     private static final String OS_ITN_READER_PRE_PROCESS_FORMAT = "OsItnReader.preProcess( {} )";
     private static final String WAY_ADDS_EDGES_FORMAT = "Way {} adds edges: {}";
     private static final String WAY_ADDS_BARRIER_EDGES_FORMAT = "Way {} adds barrier edges: {}";
-    private static final String WE_HAVE_EVALUATED_WAY_NODES_FORMAT = "We have evaluated {} way nodes.";
     private static final String WAY_FORMAT = "WAY: {} : {}";
     private static final String NODEITEMID_FORMAT = "NODEITEMID: {}";
     private static final String PROCESS_FORMAT = "PROCESS: {}";
@@ -1878,20 +1877,20 @@ private TLongLongHashMap getOsmWayIdToRouteWeightMap() {
      * Specify the type of the path calculation (car, bike, ...).
      */
     @Override
-    public OsItnReader setEncodingManager(EncodingManager acceptWay) {
+    public AbstractOsReader<Long> setEncodingManager(EncodingManager acceptWay) {
         this.encodingManager = acceptWay;
         return this;
     }
 
     @Override
-    public OsItnReader setWayPointMaxDistance(double maxDist) {
+    public AbstractOsReader<Long> setWayPointMaxDistance(double maxDist) {
         doSimplify = maxDist > 0;
         simplifyAlgo.setMaxDistance(maxDist);
         return this;
     }
 
     @Override
-    public OsItnReader setWorkerThreads(int numOfWorkers) {
+    public AbstractOsReader<Long> setWorkerThreads(int numOfWorkers) {
         this.workerThreads = numOfWorkers;
         return this;
     }
diff --git a/core/src/main/java/com/graphhopper/routing/util/OsAvoidanceDecorator.java b/core/src/main/java/com/graphhopper/routing/util/OsAvoidanceDecorator.java
index c45200a3e0..4bc60f4006 100644
--- a/core/src/main/java/com/graphhopper/routing/util/OsAvoidanceDecorator.java
+++ b/core/src/main/java/com/graphhopper/routing/util/OsAvoidanceDecorator.java
@@ -17,7 +17,7 @@ public boolean isValidForWay(Way way) {
 		Boulders(2) {
 			@Override
 			public boolean isValidForWay(Way way) {
-				return hasTag(way, "natural", "boulder");
+				return hasTag(way, "natural", "boulders");
 			}
 		},
 		Cliff(4) {
diff --git a/core/src/main/java/com/graphhopper/routing/util/PriorityWithAvoidancesWeighting.java b/core/src/main/java/com/graphhopper/routing/util/PriorityWithAvoidancesWeighting.java
index 2a9d080773..b5b796683f 100644
--- a/core/src/main/java/com/graphhopper/routing/util/PriorityWithAvoidancesWeighting.java
+++ b/core/src/main/java/com/graphhopper/routing/util/PriorityWithAvoidancesWeighting.java
@@ -20,8 +20,6 @@ public double calcWeight( EdgeIteratorState edge, boolean reverse, int prevOrNex
     {
         long wayType = edge.getFlags();
         wayType = encoder.getLong(wayType, AbstractAvoidanceDecorator.KEY);
-        System.err.println("BITMASK:" + bitMask + " BITWEIGHT:" + wayType);
-        
         if(bitMask!=0 && ((wayType & bitMask) == bitMask))
             return Double.POSITIVE_INFINITY;
         return super.calcWeight(edge, reverse, prevOrNextEdgeId);
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/AbstractOsDpnReaderTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/AbstractOsDpnReaderTest.java
index ac0ac1d60a..c16104a876 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/AbstractOsDpnReaderTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/AbstractOsDpnReaderTest.java
@@ -5,38 +5,45 @@
 
 import java.io.File;
 import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Locale;
 
 import org.junit.Before;
 
+import com.graphhopper.GHRequest;
+import com.graphhopper.GHResponse;
+import com.graphhopper.GraphHopper;
 import com.graphhopper.routing.util.AbstractFlagEncoder;
 import com.graphhopper.routing.util.BikeFlagEncoder;
-import com.graphhopper.routing.util.BusFlagEncoder;
+import com.graphhopper.routing.util.DefaultEdgeFilter;
 import com.graphhopper.routing.util.EdgeFilter;
 import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.routing.util.FootFlagEncoder;
+import com.graphhopper.routing.util.OsFootFlagEncoder;
 import com.graphhopper.storage.GraphExtension;
 import com.graphhopper.storage.GraphHopperStorage;
 import com.graphhopper.storage.RAMDirectory;
 import com.graphhopper.storage.TurnCostExtension;
 import com.graphhopper.util.EdgeExplorer;
 import com.graphhopper.util.EdgeIterator;
+import com.graphhopper.util.Helper;
+import com.graphhopper.util.Instruction;
+import com.graphhopper.util.InstructionList;
+import com.graphhopper.util.Translation;
+import com.graphhopper.util.TranslationMap;
+import com.graphhopper.util.shapes.GHPoint;
 
 public abstract class AbstractOsDpnReaderTest {
 
-    protected EncodingManager encodingManager;// = new
-    // EncodingManager("CAR");//"car:com.graphhopper.routing.util.RelationCarFlagEncoder");
-    protected BusFlagEncoder busEncoder;
-    // encodingManager
-    // .getEncoder("CAR");
-    protected EdgeFilter carOutEdges;// = new DefaultEdgeFilter(
-    // carEncoder, false, true);
-    protected EdgeFilter carInEdges;
-    protected boolean turnCosts = true;
-    protected EdgeExplorer carOutExplorer;
-    protected EdgeExplorer explorer;
+	protected EncodingManager encodingManager;
+    protected EdgeFilter footOutEdges;
+    protected EdgeFilter footInEdges;
+    protected boolean turnCosts = false;
     protected BikeFlagEncoder bikeEncoder;
     protected FootFlagEncoder footEncoder;
+	protected EdgeExplorer footOutExplorer;
 
     // RoadNode 880
     protected static double node0Lat = 50.6992070044d;
@@ -66,7 +73,7 @@ public void initEncoding() {
             bikeEncoder = new BikeFlagEncoder();
         }
 
-        footEncoder = new FootFlagEncoder();
+        footEncoder = new OsFootFlagEncoder();
         encodingManager = createEncodingManager();
     }
 
@@ -76,17 +83,29 @@ public void initEncoding() {
      * @return
      */
     protected EncodingManager createEncodingManager() {
-        return new EncodingManager(footEncoder, bikeEncoder);
+    	List<FlagEncoder> list = new ArrayList<FlagEncoder>();
+    	list.add(footEncoder);
+    	list.add(bikeEncoder);
+        return new EncodingManager(list, 8);
     }
 
-    protected OsDpnReader readGraphFile(GraphHopperStorage graph, File file)
+    /**
+     * 
+     * @param graph
+     * @param file
+     * @param maxWayPointDistance 0 disables DouglasPeuker simplification 1 = default
+     * @return
+     * @throws IOException
+     */
+    protected OsDpnReader readGraphFile(GraphHopperStorage graph, File file, int maxWayPointDistance)
             throws IOException {
-        OsDpnReader osItnReader = new OsDpnReader(graph);
+        OsDpnReader osDpnReader = new OsDpnReader(graph);
         System.out.println("Read " + file.getAbsolutePath());
-        osItnReader.setOSMFile(file);
-        osItnReader.setEncodingManager(encodingManager);
-        osItnReader.readGraph();
-        return osItnReader;
+        osDpnReader.setOSMFile(file);
+        osDpnReader.setWayPointMaxDistance(maxWayPointDistance);
+        osDpnReader.setEncodingManager(encodingManager);
+        osDpnReader.readGraph();
+        return osDpnReader;
     }
 
     protected GraphHopperStorage configureStorage(
@@ -95,11 +114,12 @@ protected GraphHopperStorage configureStorage(
         GraphExtension extendedStorage = turnRestrictionsImport ? new TurnCostExtension() : new GraphExtension.NoExtendedStorage();
         GraphHopperStorage graph = new GraphHopperStorage(new RAMDirectory(
                 directory, false), encodingManager, is3D, extendedStorage);
+        footOutExplorer = graph.createEdgeExplorer(new DefaultEdgeFilter(footEncoder, false, true));
         return graph;
     }
 
     protected int getEdge(int from, int to) {
-        EdgeIterator iter = carOutExplorer.setBaseNode(from);
+        EdgeIterator iter = footOutExplorer.setBaseNode(from);
         while (iter.next()) {
             if (iter.getAdjNode() == to) {
                 return iter.getEdge();
@@ -142,4 +162,33 @@ protected void printNodes(EdgeExplorer outExplorer, int numNodes) {
             }
         }
     }
+    
+    protected InstructionList route(GraphHopper graphHopper, double lat1, double lon1, double lat2, double lon2, String avoid) {
+        GHPoint start = new GHPoint(lat1, lon1);
+        GHPoint end = new GHPoint(lat2, lon2);
+        System.out.println("Route from " + start + " to " + end);
+        GHRequest ghRequest = new GHRequest(start, end);
+        ghRequest.setVehicle("foot");
+        if(null!=avoid  && !Helper.isEmpty(avoid)) {
+        	ghRequest.setWeighting("fastavoid");
+        	ghRequest.getHints().put("avoidances", avoid);
+        }
+        GHResponse ghResponse = graphHopper.route(ghRequest);
+        //        System.err.println("ghResponse.getPoints() " + ghResponse.getPoints());
+        InstructionList instructionList = ghResponse.getInstructions();
+        //        outputInstructionList(instructionList);
+        return instructionList;
+    }
+    
+    protected void outputInstructionList(InstructionList instructionList) {
+        //        System.err.println("ghResponse.getInstructions() " + ghResponse.getInstructions());
+        //        System.err.println("ghResponse.getDebugInfo() " + ghResponse.getDebugInfo());
+        System.out.println("Turn Descriptions:");
+        Translation tr = new TranslationMap().doImport().getWithFallBack(Locale.US);
+        for (Instruction instruction : instructionList) {
+            System.out.println("\t" + instruction.getName() + "\t" + instruction.getDistance() + "\t" + instruction.getSign() + "\t" + instruction.getTime() + "\t" + instruction.getTurnDescription(tr));
+        }
+        System.out.println("End Turn Descriptions");
+
+    }
 }
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/BouldersTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/BouldersTest.java
index 8ac7d8a169..4b55358ac3 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/BouldersTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/BouldersTest.java
@@ -28,7 +28,7 @@ public void init() {
 	    @Test
 	    public void testVisitWayAttribute() throws Exception {
 	        visitor.visitWayAttribute("boulders", way);
-	        verify(way).setTag("natural", "rocks");
+	        verify(way).setTag("natural", "boulders");  // Not an osm tag but what makes sense for dpn
 	    }
 
 }
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/DpnAttributeAvoidanceTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/DpnAttributeAvoidanceTest.java
new file mode 100644
index 0000000000..a2e5e73aad
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/DpnAttributeAvoidanceTest.java
@@ -0,0 +1,38 @@
+package com.graphhopper.reader.osgb.dpn;
+
+import static org.junit.Assert.assertEquals;
+
+import java.io.File;
+import java.io.IOException;
+import java.util.HashMap;
+import java.util.Map;
+
+import org.junit.Test;
+
+import com.graphhopper.GraphHopper;
+import com.graphhopper.util.CmdArgs;
+import com.graphhopper.util.InstructionList;
+
+public class DpnAttributeAvoidanceTest extends AbstractOsDpnReaderTest {
+	
+
+	@Test
+	public void testAvoidBoulder() throws IOException {
+		File file = new File("./src/test/resources/com/graphhopper/reader/osgb/dpn/os-dpn-avoid.xml");
+		GraphHopper hopper = new GraphHopper();
+		Map<String, String> map = new HashMap<String, String>();
+		map.put("graph.flagencoders", "foot");
+		map.put("osmreader.osm", file.getAbsolutePath());
+		map.put("reader.implementation", "OSDPN");
+		map.put("prepare.chweighting", "none");
+		map.put("graph.location", "./target/output/dpn-avoid-gh");
+		CmdArgs args = new CmdArgs(map);
+		hopper.init(args);
+		hopper.importOrLoad();
+		InstructionList instructionList = route(hopper, 50.70, -3.49, 50.69, -3.91, null);
+        assertEquals("Should be Link 17 as that is the shorteste route", "Link 17", instructionList.get(1).getName());
+        instructionList = route(hopper, 50.70, -3.49, 50.69, -3.91, "boulders");
+        assertEquals("Should be Link 19 as that avoids the boulder field", "Link 19", instructionList.get(1).getName());
+	}
+
+}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/OsDpnReaderTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/OsDpnReaderTest.java
index 9b11ca016b..e354f0a92b 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/OsDpnReaderTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/OsDpnReaderTest.java
@@ -18,24 +18,23 @@
 
 public class OsDpnReaderTest extends AbstractOsDpnReaderTest
 {
+	private GraphHopperStorage graph;
 
     @Test
     public void testReadDpnSampleLayout() throws IOException
     {
-	final GraphHopperStorage graph = readGraph();
-	GHUtility.printInfo(graph, 0, 30, EdgeFilter.ALL_EDGES);
-	configureExplorer(graph);
+	configure(0);
 
 	assertEquals(5, graph.getNodes());
 
-	assertEquals(4, count(explorer.setBaseNode(0))); // Central Tower
-	assertEquals(1, count(explorer.setBaseNode(1))); // Cross Road Vertex
-	assertEquals(1, count(explorer.setBaseNode(2))); // Cross Road Vertex
-	assertEquals(1, count(explorer.setBaseNode(3))); // Cross Road Vertex
-	assertEquals(1, count(explorer.setBaseNode(4))); // Cross Road Vertex
+	assertEquals(4, count(footOutExplorer.setBaseNode(0))); // Central Tower
+	assertEquals(1, count(footOutExplorer.setBaseNode(1))); // Cross Road Vertex
+	assertEquals(1, count(footOutExplorer.setBaseNode(2))); // Cross Road Vertex
+	assertEquals(1, count(footOutExplorer.setBaseNode(3))); // Cross Road Vertex
+	assertEquals(1, count(footOutExplorer.setBaseNode(4))); // Cross Road Vertex
 
 	// Assert that this is true
-	EdgeIterator iter = explorer.setBaseNode(0);
+	EdgeIterator iter = footOutExplorer.setBaseNode(0);
 	assertTrue(iter.next());
 	assertEquals(4, iter.getAdjNode());
 	assertTrue(iter.next());
@@ -46,22 +45,22 @@ public void testReadDpnSampleLayout() throws IOException
 	assertEquals(1, iter.getAdjNode());
 	assertFalse(iter.next());
 
-	iter = explorer.setBaseNode(1);
+	iter = footOutExplorer.setBaseNode(1);
 	assertTrue(iter.next());
 	assertEquals(0, iter.getAdjNode());
 	assertFalse(iter.next());
 
-	iter = explorer.setBaseNode(2);
+	iter = footOutExplorer.setBaseNode(2);
 	assertTrue(iter.next());
 	assertEquals(0, iter.getAdjNode());
 	assertFalse(iter.next());
 
-	iter = explorer.setBaseNode(3);
+	iter = footOutExplorer.setBaseNode(3);
 	assertTrue(iter.next());
 	assertEquals(0, iter.getAdjNode());
 	assertFalse(iter.next());
 
-	iter = explorer.setBaseNode(4);
+	iter = footOutExplorer.setBaseNode(4);
 	assertTrue(iter.next());
 	assertEquals(0, iter.getAdjNode());
 	assertFalse(iter.next());
@@ -70,10 +69,8 @@ public void testReadDpnSampleLayout() throws IOException
     @Test
     public void testReadDpnSampleName() throws IOException
     {
-	final GraphHopperStorage graph = readGraph();
-	configureExplorer(graph);
-
-	EdgeIterator iter = explorer.setBaseNode(0);
+	configure(0);
+	EdgeIterator iter = footOutExplorer.setBaseNode(0);
 	assertTrue(iter.next());
 	assertTrue(iter.next());
 	assertTrue(iter.next());
@@ -84,10 +81,8 @@ public void testReadDpnSampleName() throws IOException
     @Test
     public void testReadDpnSampleNameWithAlternate() throws IOException
     {
-	final GraphHopperStorage graph = readGraph();
-	configureExplorer(graph);
-
-	EdgeIterator iter = explorer.setBaseNode(0);
+	configure(0);
+	EdgeIterator iter = footOutExplorer.setBaseNode(0);
 	assertTrue(iter.next());
 	assertTrue(iter.next());
 	assertTrue(iter.next());
@@ -98,10 +93,8 @@ public void testReadDpnSampleNameWithAlternate() throws IOException
     @Test
     public void testReadDpnSampleNameDefaultToTrackType() throws IOException
     {
-	final GraphHopperStorage graph = readGraph();
-	configureExplorer(graph);
-
-	EdgeIterator iter = explorer.setBaseNode(0);
+	configure(0);
+	EdgeIterator iter = footOutExplorer.setBaseNode(0);
 	assertTrue(iter.next());
 	assertEquals("No Name field available so should report track type", "Alley", iter.getName());
     }
@@ -110,22 +103,65 @@ public void testReadDpnSampleNameDefaultToTrackType() throws IOException
     public void testReadDpnSampleNameDefaultToTrackFriendlyNameWhenNoPhysicalManifestation()
 		    throws IOException
     {
-	final GraphHopperStorage graph = readGraph();
-	configureExplorer(graph);
-
-	EdgeIterator iter = explorer.setBaseNode(0);
+	configure(0);
+	EdgeIterator iter = footOutExplorer.setBaseNode(0);
 	assertTrue(iter.next());
 	assertTrue(iter.next());
 	assertEquals("No Name field available so should be report track type", "Route",
 			iter.getName());
     }
+    
+    @Test
+    public void testReadDpnWayGeometry() throws IOException
+    {
+	configure(0);
+	EdgeIterator iter = footOutExplorer.setBaseNode(0);
+	assertTrue(iter.next());
+	assertEquals(1, iter.fetchWayGeometry(0).size());
+	assertTrue(iter.next());
+	assertEquals(1, iter.fetchWayGeometry(0).size());
+	assertTrue(iter.next());
+	assertEquals(5, iter.fetchWayGeometry(0).size());
+	assertTrue(iter.next());
+	assertEquals(8, iter.fetchWayGeometry(0).size());
+	assertFalse(iter.next());
+		
+    }
+    
+    @Test
+    public void testReadDpnWayGeometryWithSimplifiedWayGeometry() throws IOException
+    {
+	configure(1);
+	EdgeIterator iter = footOutExplorer.setBaseNode(0);
+	assertTrue(iter.next());
+	assertEquals(1, iter.fetchWayGeometry(0).size());
+	assertTrue(iter.next());
+	assertEquals(1, iter.fetchWayGeometry(0).size());
+	assertTrue(iter.next());
+	assertEquals(4, iter.fetchWayGeometry(0).size());
+	assertTrue(iter.next());
+	assertEquals(5, iter.fetchWayGeometry(0).size());
+	assertFalse(iter.next());
+		
+    }
+    
+    /**
+     * 
+     * @param maxWayPointDistance 0 disables DouglasPeuker simplification 1 = graphhopper default 1 metre
+     * @throws IOException
+     */
+    private void configure(int maxWayPointDistance) throws IOException {
+        graph = readGraph(maxWayPointDistance);
+        GHUtility.printInfo(graph, 0, 30, EdgeFilter.ALL_EDGES);
+        configureExplorer(graph);
+    }
 
     private void configureExplorer(final GraphHopperStorage graph)
     {
-	explorer = graph.createEdgeExplorer(new DefaultEdgeFilter(footEncoder, true, true));
+    	footOutExplorer = graph.createEdgeExplorer(new DefaultEdgeFilter(footEncoder, true, true));
     }
 
-    private GraphHopperStorage readGraph() throws IOException
+    private GraphHopperStorage readGraph(int maxWayPointDistance) throws IOException
     {
 	final boolean turnRestrictionsImport = false;
 	final boolean is3D = false;
@@ -133,7 +169,7 @@ private GraphHopperStorage readGraph() throws IOException
 
 	final File file = new File(
 			"./src/test/resources/com/graphhopper/reader/osgb/dpn/os-dpn-sample.xml");
-	readGraphFile(graph, file);
+	readGraphFile(graph, file, maxWayPointDistance);
 	return graph;
     }
 
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/itn/OsItnReaderTest.java b/core/src/test/java/com/graphhopper/reader/osgb/itn/OsItnReaderTest.java
index 6f7f281370..543db6d737 100755
--- a/core/src/test/java/com/graphhopper/reader/osgb/itn/OsItnReaderTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/itn/OsItnReaderTest.java
@@ -35,6 +35,7 @@
 
 import com.graphhopper.GraphHopper;
 import com.graphhopper.reader.osgb.AbstractOsItnReaderTest;
+import com.graphhopper.reader.osgb.AbstractOsReader;
 import com.graphhopper.routing.util.DefaultEdgeFilter;
 import com.graphhopper.routing.util.EdgeFilter;
 import com.graphhopper.routing.util.EncodingManager;
@@ -290,7 +291,7 @@ public void testReadSample() throws IOException {
         final boolean is3D = false;
         final GraphHopperStorage graph = configureStorage(turnRestrictionsImport, is3D);
 
-        final OsItnReader osItnReader = new OsItnReader(graph);
+        final AbstractOsReader<Long> osItnReader = new OsItnReader(graph);
         final File file = new File("./src/test/resources/com/graphhopper/reader/os-itn-sample.xml");
         osItnReader.setOSMFile(file);
         osItnReader.setEncodingManager(new EncodingManager("CAR,FOOT"));
diff --git a/core/src/test/java/com/graphhopper/routing/util/OsAvoidanceDecoratorTest.java b/core/src/test/java/com/graphhopper/routing/util/OsAvoidanceDecoratorTest.java
index d5ef6474fa..412b33a491 100644
--- a/core/src/test/java/com/graphhopper/routing/util/OsAvoidanceDecoratorTest.java
+++ b/core/src/test/java/com/graphhopper/routing/util/OsAvoidanceDecoratorTest.java
@@ -20,7 +20,7 @@ public void defineWayBits() {
     @Test
     public void testBoulderAttributeStorage() {
         Way way = new OSITNWay(1L);
-        way.setTag("natural", "boulder");
+        way.setTag("natural", "boulders");
         long wayFlag = osAvoidances.handleWayTags(way,0);
         assertEquals(OsAvoidanceDecorator.AvoidanceType.Boulders.getValue(), wayFlag);
 
diff --git a/core/src/test/resources/com/graphhopper/reader/osgb/dpn/os-dpn-avoid.xml b/core/src/test/resources/com/graphhopper/reader/osgb/dpn/os-dpn-avoid.xml
new file mode 100644
index 0000000000..33875f3f60
--- /dev/null
+++ b/core/src/test/resources/com/graphhopper/reader/osgb/dpn/os-dpn-avoid.xml
@@ -0,0 +1,181 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<gml:FeatureCollection xmlns:gml="http://www.opengis.net/gml/3.2"
+	xsi:schemaLocation="http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd"
+	gml:id="DPN" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
+	xmlns:xs="http://www.w3.org/2001/XMLSchema"
+	xmlns:dpn="http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0"
+	xmlns:gmd="http://www.isotc211.org/2005/gmd" xmlns:gco="http://www.isotc211.org/2005/gco"
+	xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:gss="http://www.isotc211.org/2005/gss"
+	xmlns:gts="http://www.isotc211.org/2005/gts" xmlns:gsr="http://www.isotc211.org/2005/gsr"
+	xmlns:gmlxbt="http://www.opengis.net/gml/3.3/xbt">
+	<gml:featureMember>
+		<dpn:RouteNode gml:id='osgb4000000025277879'>
+			<dpn:versionID>2</dpn:versionID>
+			<dpn:versionDate>2005-09-13</dpn:versionDate>
+			<dpn:descriptiveTerm codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/RouteNodeDescriptiveTermValue#Junction">Junction</dpn:descriptiveTerm>
+			<dpn:geometry>
+				<gml:Point srsName='dpn:BNG'>
+					<gml:pos>295000.000 90000.000 362.62</gml:pos>
+				</gml:Point>
+			</dpn:geometry>
+		</dpn:RouteNode>
+	</gml:featureMember>
+	<gml:featureMember>
+		<dpn:RouteNode gml:id='osgb4000000025277880'>
+			<dpn:versionID>2</dpn:versionID>
+			<dpn:versionDate>2005-09-13</dpn:versionDate>
+			<dpn:descriptiveTerm codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/RouteNodeDescriptiveTermValue#Junction">Junction</dpn:descriptiveTerm>
+			<dpn:geometry>
+				<gml:Point srsName='dpn:BNG'>
+					<gml:pos>290000.000 90000.000 362.62</gml:pos>
+				</gml:Point>
+			</dpn:geometry>
+		</dpn:RouteNode>
+	</gml:featureMember>
+	<gml:featureMember>
+		<dpn:RouteNode gml:id='osgb4000000025277882'>
+			<dpn:versionID>2</dpn:versionID>
+			<dpn:versionDate>2005-09-13</dpn:versionDate>
+			   <dpn:descriptiveTerm codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/RouteNodeDescriptiveTermValue#Junction">Junction</dpn:descriptiveTerm>
+			<dpn:geometry>
+				<gml:Point srsName='dpn:BNG'>
+					<gml:pos>270000.000 90000.000 362.62</gml:pos>
+				</gml:Point>
+			</dpn:geometry>
+		</dpn:RouteNode>
+	</gml:featureMember>
+	<gml:featureMember>
+		<dpn:RouteNode gml:id='osgb4000000025277883'>
+			<dpn:versionID>2</dpn:versionID>
+			<dpn:versionDate>2005-09-13</dpn:versionDate>
+			   <dpn:descriptiveTerm codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/RouteNodeDescriptiveTermValue#Junction">Junction</dpn:descriptiveTerm>
+			<dpn:geometry>
+				<gml:Point srsName='dpn:BNG'>
+					<gml:pos>280000.000 80000.000 362.62</gml:pos>
+				</gml:Point>
+			</dpn:geometry>
+		</dpn:RouteNode>
+	</gml:featureMember>
+	<gml:featureMember>
+		<dpn:RouteNode gml:id='osgb4000000025277884'>
+			<dpn:versionID>2</dpn:versionID>
+			<dpn:versionDate>2005-09-13</dpn:versionDate>
+			<dpn:theme>Road Network</dpn:theme>
+			   <dpn:descriptiveTerm codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/RouteNodeDescriptiveTermValue#Junction">Junction</dpn:descriptiveTerm>
+			<dpn:geometry>
+				<gml:Point srsName='dpn:BNG'>
+					<gml:pos>280000.000 95000.000 362.62</gml:pos>
+				</gml:Point>
+			</dpn:geometry>
+		</dpn:RouteNode>
+	</gml:featureMember>
+	<gml:featureMember>
+		<dpn:RouteNode gml:id='osgb4000000025277885'>
+			<dpn:versionID>2</dpn:versionID>
+			<dpn:versionDate>2005-09-13</dpn:versionDate>
+			   <dpn:descriptiveTerm codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/RouteNodeDescriptiveTermValue#Junction">Junction</dpn:descriptiveTerm>
+			<dpn:geometry>
+				<gml:Point srsName='dpn:BNG'>
+					<gml:pos>265000.000 90000.000 362.62</gml:pos>
+				</gml:Point>
+			</dpn:geometry>
+		</dpn:RouteNode>
+	</gml:featureMember>
+	<gml:featureMember>
+		<dpn:RouteLink gml:id="osgb4000000025288016">
+			<dpn:versionID>4</dpn:versionID>
+			<dpn:versionDate>2006-02-03</dpn:versionDate>
+			<dpn:startNode xlink:href="#4000000025277879" />
+			<dpn:endNode xlink:href="#4000000025277880" />
+			<dpn:descriptiveTerm codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#NoPhysicalManifestation">No Physical Manifestation</dpn:descriptiveTerm>
+			 <dpn:name>Link 16</dpn:name>
+			<dpn:rightOfUse codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/RightOfWayValue#Footpath">Footpath</dpn:rightOfUse>
+			<dpn:geometry>
+				<gml:LineString srsName="dpn:BNG">
+					<gml:posList srsDimension="3" count="2">295000.000 90000.000 362.62 290000.000 90000.000 362.62</gml:posList>
+				</gml:LineString>
+			</dpn:geometry>
+		</dpn:RouteLink>
+	</gml:featureMember>
+	<gml:featureMember>
+		<dpn:RouteLink gml:id="osgb4000000025288017">
+			<dpn:versionID>4</dpn:versionID>
+			<dpn:versionDate>2006-02-03</dpn:versionDate>
+			<dpn:startNode xlink:href="#4000000025277880" />
+			<dpn:endNode xlink:href="#4000000025277884" />
+			<dpn:descriptiveTerm codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#NoPhysicalManifestation">No Physical Manifestation</dpn:descriptiveTerm>
+			<dpn:name>Link 17</dpn:name>
+			<dpn:rightOfUse codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/RightOfWayValue#Footpath">Footpath</dpn:rightOfUse>
+			<dpn:geometry>
+				<gml:LineString srsName="dpn:BNG">
+					<gml:posList srsDimension="3" count="2">290000.000 90000.000 362.62 280000.000 95000.000 362.62</gml:posList>
+				</gml:LineString>
+			</dpn:geometry>
+		</dpn:RouteLink>
+	</gml:featureMember>
+	<gml:featureMember>
+		<dpn:RouteLink gml:id="osgb4000000025288018">
+			<dpn:versionID>4</dpn:versionID>
+			<dpn:versionDate>2006-02-03</dpn:versionDate>
+			<dpn:startNode xlink:href="#4000000025277884" />
+			<dpn:endNode xlink:href="#4000000025277882" />
+			<dpn:descriptiveTerm codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#NoPhysicalManifestation">No Physical Manifestation</dpn:descriptiveTerm>
+			<dpn:name>Link 18</dpn:name>
+			<dpn:potentialHazardCrossed>Boulders</dpn:potentialHazardCrossed>
+			<dpn:rightOfUse codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/RightOfWayValue#Footpath">Footpath</dpn:rightOfUse>
+			<dpn:geometry>
+				<gml:LineString srsName="dpn:BNG">
+					<gml:posList srsDimension="3" count="2">280000.000 95000.000 362.62 270000.000 90000.000 362.62</gml:posList>
+				</gml:LineString>
+			</dpn:geometry>
+		</dpn:RouteLink>
+	</gml:featureMember>
+	<gml:featureMember>
+		<dpn:RouteLink gml:id="osgb4000000025288019">
+			<dpn:versionID>4</dpn:versionID>
+			<dpn:versionDate>2006-02-03</dpn:versionDate>
+			<dpn:startNode xlink:href="#4000000025277880" />
+			<dpn:endNode xlink:href="#4000000025277883" />
+			<dpn:descriptiveTerm	codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#NoPhysicalManifestation">No Physical Manifestation</dpn:descriptiveTerm>
+			<dpn:name>Link 19</dpn:name>
+			<dpn:rightOfUse codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/RightOfWayValue#Footpath">Footpath</dpn:rightOfUse>
+			<dpn:geometry>
+				<gml:LineString srsName="dpn:BNG">
+					<gml:posList srsDimension="3" count="2">290000.000 90000.000 362.62 280000.000 80000.000 362.62</gml:posList>
+				</gml:LineString>
+			</dpn:geometry>
+		</dpn:RouteLink>
+	</gml:featureMember>
+	<gml:featureMember>
+		<dpn:RouteLink gml:id="osgb4000000025288020">
+			<dpn:versionID>4</dpn:versionID>
+			<dpn:versionDate>2006-02-03</dpn:versionDate>
+			<dpn:startNode xlink:href="#4000000025277883" />
+			<dpn:endNode xlink:href="#4000000025277882" />
+			<dpn:descriptiveTerm	codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#NoPhysicalManifestation">No Physical Manifestation</dpn:descriptiveTerm>
+			<dpn:name>Link 20</dpn:name>
+			<dpn:rightOfUse codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/RightOfWayValue#Footpath">Footpath</dpn:rightOfUse>
+			<dpn:geometry>
+				<gml:LineString srsName="dpn:BNG">
+					<gml:posList srsDimension="3" count="2">280000.000 80000.000 362.62 270000.000 90000.000 362.62</gml:posList>
+				</gml:LineString>
+			</dpn:geometry>
+		</dpn:RouteLink>
+	</gml:featureMember>
+	<gml:featureMember>
+		<dpn:RouteLink gml:id="osgb4000000025288021">
+			<dpn:versionID>4</dpn:versionID>
+			<dpn:versionDate>2006-02-03</dpn:versionDate>
+			<dpn:startNode xlink:href="#4000000025277882" />
+			<dpn:endNode xlink:href="#4000000025277885" />
+			<dpn:descriptiveTerm	codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#NoPhysicalManifestation">No Physical Manifestation</dpn:descriptiveTerm>
+			<dpn:name>Link 21</dpn:name>
+			<dpn:rightOfUse codeSpace="http://www.ordnancesurvey.co.uk/xml/codelists/RightOfWayValue#Footpath">Footpath</dpn:rightOfUse>
+			<dpn:geometry>
+				<gml:LineString srsName="dpn:BNG">
+					<gml:posList srsDimension="3" count="2">265000.000 90000.000 362.62 270000.000 90000.000 362.62</gml:posList>
+				</gml:LineString>
+			</dpn:geometry>
+		</dpn:RouteLink>
+	</gml:featureMember>
+</gml:FeatureCollection>
\ No newline at end of file
diff --git a/web/src/main/webapp/index.html b/web/src/main/webapp/index.html
index 1fb9fdf561..1712ab63d0 100644
--- a/web/src/main/webapp/index.html
+++ b/web/src/main/webapp/index.html
@@ -62,22 +62,30 @@
                     </button>
                     </div>
                      <div class="collapse">
-                    <form>
+                    <form name="routeoptions">
+                        <table>
+                            <tr>
+                                <th>Route Option</th>
+                            </tr> 
+                            <tr><td><input class="weighting" type="radio" name="weighting" value="fastest" >Fastest  
+                            </td></tr><tr><td><input class="weighting" type="radio" name="weighting" value="shortest" >Shortest
+                           </td></tr>
+                           </table>
                         <table>
                             <tr>
                                 <th>Avoid Hazards</th>
                             </tr> 
-                            <tr><td><input type="checkbox" name="avoidances[]" value="aroad" >A Road  
-                            </td></tr><tr><td><input type="checkbox" name="avoidances[]" value="boulders" >Boulders
-                            </td></tr><tr><td><input type="checkbox" name="avoidances[]" value="cliff" >Cliff
-                            </td></tr><tr><td><input type="checkbox" name="avoidances[]" value="inlandwater" >Inland Water
-                            </td></tr><tr><td><input type="checkbox" name="avoidances[]" value="marsh" >Marsh
-                            </td></tr><tr><td><input type="checkbox" name="avoidances[]" value="quarryorpit" >Quarry Or Pit
-                            </td></tr><tr><td><input type="checkbox" name="avoidances[]" value="scree" >Scree
-                            </td></tr><tr><td><input type="checkbox" name="avoidances[]" value="rock" >Rock
-                            </td></tr><tr><td><input type="checkbox" name="avoidances[]" value="mud" >Mud
-                            </td></tr><tr><td><input type="checkbox" name="avoidances[]" value="sand">Sand
-                            </td></tr><tr><td><input type="checkbox" name="avoidances[]" value="shingle" >Shingle
+                            <tr><td><input class="hazCheck" type="checkbox" name="avoidances[]" value="aroad" >A Road  
+                            </td></tr><tr><td><input class="hazCheck" type="checkbox" name="avoidances[]" value="boulders" >Boulders
+                            </td></tr><tr><td><input class="hazCheck" type="checkbox" name="avoidances[]" value="cliff" >Cliff
+                            </td></tr><tr><td><input class="hazCheck" type="checkbox" name="avoidances[]" value="inlandwater" >Inland Water
+                            </td></tr><tr><td><input class="hazCheck" type="checkbox" name="avoidances[]" value="marsh" >Marsh
+                            </td></tr><tr><td><input class="hazCheck" type="checkbox" name="avoidances[]" value="quarryorpit" >Quarry Or Pit
+                            </td></tr><tr><td><input class="hazCheck" type="checkbox" name="avoidances[]" value="scree" >Scree
+                            </td></tr><tr><td><input class="hazCheck" type="checkbox" name="avoidances[]" value="rock" >Rock
+                            </td></tr><tr><td><input class="hazCheck" type="checkbox" name="avoidances[]" value="mud" >Mud
+                            </td></tr><tr><td><input class="hazCheck" type="checkbox" name="avoidances[]" value="sand">Sand
+                            </td></tr><tr><td><input class="hazCheck" type="checkbox" name="avoidances[]" value="shingle" >Shingle
                             </td></tr>
                         </table>
                     <!--
diff --git a/web/src/main/webapp/js/ghrequest.js b/web/src/main/webapp/js/ghrequest.js
index 294f52f9a5..30203034fe 100644
--- a/web/src/main/webapp/js/ghrequest.js
+++ b/web/src/main/webapp/js/ghrequest.js
@@ -437,6 +437,30 @@ GHRequest.prototype.createPath = function (url) {
     if (this.vehicle && this.vehicle !== "car")
         url += "&vehicle=" + this.vehicle;
     // fastest or shortest
+    var checkedValue = ""; 
+    var inputElements = document.getElementsByClassName('hazCheck');
+    for(var i=0; inputElements[i]; ++i){
+          if(inputElements[i].checked){
+        	  if(checkedValue.length>0) 
+        		    checkedValue += ","
+               checkedValue += inputElements[i].value;
+          }
+    }
+    if(document.routeoptions.weighting[1].checked == true){
+    	this.weighting = "shortest";
+    } else {
+    	this.weighting = "fastest";
+    }
+    if(checkedValue.length>0) {
+    	if(this.weighting==="fastest") {
+    		this.weighting = "fastavoid";
+    	}
+    	else {
+    		this.weighting="shortavoid";
+    	}
+    	url += "&avoidances=" + checkedValue;
+    }
+    
     if (this.weighting && this.weighting !== "fastest")
         url += "&weighting=" + this.weighting;
     if (this.locale && this.locale !== "en")
@@ -459,6 +483,7 @@ GHRequest.prototype.createPath = function (url) {
     for (var key in this.api_params) {
         url += "&" + key + "=" + this.api_params[key];
     }
+    
     return url;
 };
 
