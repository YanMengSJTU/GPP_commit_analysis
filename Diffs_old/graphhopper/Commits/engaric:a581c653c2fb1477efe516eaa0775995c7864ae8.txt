diff --git a/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java b/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
index 331be2eeef..698a32ef23 100644
--- a/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
+++ b/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
@@ -41,6 +41,7 @@
 import javax.xml.transform.dom.DOMSource;
 import javax.xml.transform.stream.StreamResult;
 
+import org.eclipse.jetty.http.HttpStatus;
 import org.json.JSONObject;
 import org.w3c.dom.Document;
 import org.w3c.dom.Element;
@@ -82,7 +83,7 @@
 
 	@Override
 	public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes )
-	        throws ServletException, IOException
+			throws ServletException, IOException
 	{
 
 		List<GHPoint> infoPoints = getPoints(httpReq, "point");
@@ -115,19 +116,22 @@ public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes )
 			// coordinates
 
 			if (!new CaseInsensitiveStringListValidator()
-			        .isValid(localeStr, TranslationMap.LOCALES))
+			.isValid(localeStr, TranslationMap.LOCALES))
 			{
 				String errMesg = buildErrorMessageString(localeStr, "locale",
-				        TranslationMap.LOCALES);
-				ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg.toString()));
-			} else if (null!=algoStr && !new CaseInsensitiveStringListValidator().isValid(algoStr,
-			        AlgorithmOptions.ASTAR, AlgorithmOptions.ASTAR_BI, AlgorithmOptions.DIJKSTRA,
-			        AlgorithmOptions.DIJKSTRA_BI, AlgorithmOptions.DIJKSTRA_ONE_TO_MANY))
+						TranslationMap.LOCALES);
+				ghRsp = new GHResponse()
+				        .addError(new InvalidParameterException(errMesg.toString()));
+			} else if (null != algoStr
+			        && !new CaseInsensitiveStringListValidator().isValid(algoStr,
+			                AlgorithmOptions.ASTAR, AlgorithmOptions.ASTAR_BI,
+			                AlgorithmOptions.DIJKSTRA, AlgorithmOptions.DIJKSTRA_BI,
+			                AlgorithmOptions.DIJKSTRA_ONE_TO_MANY))
 			{
 				String errMesg = buildErrorMessageString(algoStr, "algorithm",
-				        AlgorithmOptions.ASTAR, AlgorithmOptions.ASTAR_BI,
-				        AlgorithmOptions.DIJKSTRA, AlgorithmOptions.DIJKSTRA_BI,
-				        AlgorithmOptions.DIJKSTRA_ONE_TO_MANY);
+						AlgorithmOptions.ASTAR, AlgorithmOptions.ASTAR_BI,
+						AlgorithmOptions.DIJKSTRA, AlgorithmOptions.DIJKSTRA_BI,
+						AlgorithmOptions.DIJKSTRA_ONE_TO_MANY);
 				ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg));
 			} else if (!new BooleanValidator().isValid(instructionsString))
 			{
@@ -136,7 +140,7 @@ public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes )
 			} else if (!new BooleanValidator().isValid(pointsEncodedString))
 			{
 				String errMesg = buildBooleanErrorMessageString(pointsEncodedString,
-				        "points_encoded");
+						"points_encoded");
 				ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg));
 			} else if (!new BooleanValidator().isValid(calcPointsString))
 			{
@@ -154,13 +158,13 @@ public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes )
 			{
 				String supported = hopper.getGraph().getEncodingManager().toString();
 				String errMesg = String.format(
-				        "Vehicle %s is not a valid vehicle. Valid vehicles are %s", vehicleStr,
-				        supported);
+						"Vehicle %s is not a valid vehicle. Valid vehicles are %s", vehicleStr,
+						supported);
 				ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg));
 			} else if (enableElevation && !hopper.hasElevation())
 			{
 				ghRsp = new GHResponse().addError(new InvalidParameterException(
-				        "Elevation not supported!"));
+						"Elevation not supported!"));
 			} else
 			{
 				FlagEncoder algoVehicle = hopper.getEncodingManager().getEncoder(vehicleStr);
@@ -174,7 +178,7 @@ public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes )
 					{
 						AbstractFlagEncoder abstractFlagEncoder = (AbstractFlagEncoder) algoVehicle;
 						List<EncoderDecorator> encoderDecorators = abstractFlagEncoder
-						        .getEncoderDecorators();
+								.getEncoderDecorators();
 						if (encoderDecorators != null)
 						{
 							for (EncoderDecorator encoderDecorator : encoderDecorators)
@@ -183,23 +187,23 @@ public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes )
 								{
 									AbstractAvoidanceDecorator abstractAvoidanceDecorator = (AbstractAvoidanceDecorator) encoderDecorator;
 									allowedAvoidances.addAll(Arrays
-									        .asList(abstractAvoidanceDecorator
-									                .getEdgeAttributesOfInterestNames()));
+											.asList(abstractAvoidanceDecorator
+													.getEdgeAttributesOfInterestNames()));
 								}
 							}
 						}
 					}
 					String avoidanceArray[] = avoidancesString.split(",");
 					for (String avoidance : avoidanceArray)
-                    {
+					{
 						if (!allowedAvoidances.contains(avoidance.trim()))
 						{
 							String errMesg = buildErrorMessageString(avoidance, "avoidances",
-									allowedAvoidances);
+							        allowedAvoidances);
 							ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg
-									.toString()));
+							        .toString()));
 						}
-                    }
+					}
 				}
 
 				if (ghRsp == null)
@@ -208,9 +212,9 @@ public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes )
 
 					initHints(request, httpReq.getParameterMap());
 					request.setVehicle(algoVehicle.toString()).setWeighting(weighting)
-					        .setAlgorithm(algoStr).setLocale(localeStr).getHints()
-					        .put("calcPoints", calcPoints).put("instructions", enableInstructions)
-					        .put("wayPointMaxDistance", minPathPrecision);
+					.setAlgorithm(algoStr).setLocale(localeStr).getHints()
+					.put("calcPoints", calcPoints).put("instructions", enableInstructions)
+					.put("wayPointMaxDistance", minPathPrecision);
 					ghRsp = hopper.route(request);
 				}
 			}
@@ -220,16 +224,16 @@ public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes )
 		}
 		float took = sw.stop().getSeconds();
 		String infoStr = httpReq.getRemoteAddr() + " " + httpReq.getLocale() + " "
-		        + httpReq.getHeader("User-Agent");
+				+ httpReq.getHeader("User-Agent");
 		String logStr = httpReq.getQueryString() + " " + infoStr + " " + infoPoints + ", took:"
-		        + took + ", " + algoStr + ", " + weighting + ", " + vehicleStr;
+				+ took + ", " + algoStr + ", " + weighting + ", " + vehicleStr;
 
 		if (ghRsp.hasErrors())
 			logger.error(logStr + ", errors:" + ghRsp.getErrors());
 		else
 			logger.info(logStr + ", distance: " + ghRsp.getDistance() + ", time:"
-			        + Math.round(ghRsp.getTime() / 60000f) + "min, points:"
-			        + ghRsp.getPoints().getSize() + ", debug - " + ghRsp.getDebugInfo());
+					+ Math.round(ghRsp.getTime() / 60000f) + "min, points:"
+					+ ghRsp.getPoints().getSize() + ", debug - " + ghRsp.getDebugInfo());
 
 		if (writeGPX)
 		{
@@ -246,12 +250,12 @@ public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes )
 			if (!"json".equalsIgnoreCase(type) || (!"jsonp".equalsIgnoreCase(type) && jsonpAllowed))
 			{
 				String errorMessage = type
-				        + " is not a valid value for parameter type. Valid values are ";
+						+ " is not a valid value for parameter type. Valid values are ";
 				errorMessage += jsonpAllowed ? "JSON, GPX or JSONP." : "GPX or JSON.";
 				ghRsp.addError(new InvalidParameterException(errorMessage));
 			}
 			Map<String, Object> map = createJson(ghRsp, calcPoints, pointsEncoded, enableElevation,
-			        enableInstructions);
+					enableInstructions);
 			Object infoMap = map.get("info");
 			if (infoMap != null)
 				((Map) infoMap).put("took", Math.round(took * 1000));
@@ -267,21 +271,21 @@ public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes )
 	private String buildBooleanErrorMessageString( String paramValue, String paramName )
 	{
 		return buildErrorMessageString(paramValue, paramName,
-		        Arrays.asList(new String[] { Boolean.TRUE.toString(), Boolean.FALSE.toString() }));
+				Arrays.asList(new String[] { Boolean.TRUE.toString(), Boolean.FALSE.toString() }));
 	}
 
 	private String buildErrorMessageString( String paramValue, String paramName,
-	        String... validValues )
+			String... validValues )
 	{
 		return buildErrorMessageString(paramValue, paramName, Arrays.asList(validValues));
 	}
 
 	private String buildErrorMessageString( String paramValue, String paramName,
-	        List<String> validValues )
+			List<String> validValues )
 	{
 		StringBuilder errMesg = new StringBuilder(paramValue)
-		        .append(" is not a valid value for parameter ").append(paramName)
-		        .append(". Valid values are ");
+		.append(" is not a valid value for parameter ").append(paramName)
+		.append(". Valid values are ");
 		for (int i = 0; i < validValues.size(); i++)
 		{
 			String validStr = validValues.get(i);
@@ -299,7 +303,7 @@ private String buildErrorMessageString( String paramValue, String paramName,
 	}
 
 	protected String createGPXString( HttpServletRequest req, HttpServletResponse res,
-	        GHResponse rsp )
+			GHResponse rsp )
 	{
 		boolean includeElevation = getBooleanParam(req, "elevation", false);
 		res.setCharacterEncoding("UTF-8");
@@ -360,8 +364,8 @@ String errorsToXML( List<Throwable> list )
 	}
 
 	protected Map<String, Object> createJson( GHResponse rsp, boolean calcPoints,
-	        boolean pointsEncoded, boolean includeElevation, boolean enableInstructions )
-	{
+			boolean pointsEncoded, boolean includeElevation, boolean enableInstructions )
+			{
 		Map<String, Object> json = new HashMap<String, Object>();
 
 		if (rsp.hasErrors())
@@ -370,7 +374,13 @@ String errorsToXML( List<Throwable> list )
 			json.put("error", map);
 			Throwable throwable = rsp.getErrors().get(0);
 			map.put("message", throwable.getMessage());
-			map.put("statuscode", ((APIException) throwable).getStatusCode().toString());
+			String statusCode = "" + HttpStatus.BAD_REQUEST_400;
+			if (throwable instanceof APIException)
+			{
+				statusCode = ((APIException) throwable).getStatusCode().toString();
+				logger.error("Unhandled exception, defaulting it to 400");
+			}
+			map.put("statuscode", statusCode);
 			List<Map<String, String>> list = new ArrayList<Map<String, String>>();
 			for (Throwable t : rsp.getErrors())
 			{
@@ -403,7 +413,7 @@ String errorsToXML( List<Throwable> list )
 				{
 					BBox maxBounds = hopper.getGraph().getBounds();
 					BBox maxBounds2D = new BBox(maxBounds.minLon, maxBounds.maxLon,
-					        maxBounds.minLat, maxBounds.maxLat);
+							maxBounds.minLat, maxBounds.maxLat);
 					jsonPath.put("bbox", rsp.calcRouteBBox(maxBounds2D).toGeoJson());
 				}
 
@@ -418,7 +428,7 @@ String errorsToXML( List<Throwable> list )
 			json.put("paths", Collections.singletonList(jsonPath));
 		}
 		return json;
-	}
+			}
 
 	protected Object createPoints( PointList points, boolean pointsEncoded, boolean includeElevation )
 	{
