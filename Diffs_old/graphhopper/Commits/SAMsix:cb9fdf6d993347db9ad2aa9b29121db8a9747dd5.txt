diff --git a/core/src/main/java/com/samsix/graphhopper/S6CarFlagEncoder.java b/core/src/main/java/com/samsix/graphhopper/FeederPatrolFlagEncoder.java
similarity index 58%
rename from core/src/main/java/com/samsix/graphhopper/S6CarFlagEncoder.java
rename to core/src/main/java/com/samsix/graphhopper/FeederPatrolFlagEncoder.java
index 0e01958314..76a9485ead 100644
--- a/core/src/main/java/com/samsix/graphhopper/S6CarFlagEncoder.java
+++ b/core/src/main/java/com/samsix/graphhopper/FeederPatrolFlagEncoder.java
@@ -4,11 +4,11 @@
 import com.graphhopper.routing.util.CarFlagEncoder;
 import com.graphhopper.routing.util.FootFlagEncoder;
 
-public class S6CarFlagEncoder
+public class FeederPatrolFlagEncoder
     extends
         CarFlagEncoder
 {
-    public S6CarFlagEncoder()
+    public FeederPatrolFlagEncoder()
     {
         super();
         
@@ -19,17 +19,13 @@ public S6CarFlagEncoder()
     @Override
     public long acceptWay( OSMWay way )
     {
-        String highwayValue = way.getTag("highway");
-
         //
-        // Not allowing highway travel. This was done for
-        // the FeederPatrol, but I think is OK for all of our
-        // needs. Anyway, putting this here for now and we may have
-        // to change this later. Maybe we have to keep two different
-        // datasets? One that allows highways and one that doesn't?
-        // I wish we could set this stuff
-        // at request time.
+        // Not allowing highway travel for feeder patrols
+        // so that the patrol drivers are not sent on the
+        // highway to inspect the network.
         //
+        String highwayValue = way.getTag("highway");
+
         if ("motorway".equals( highwayValue )
             || "motorway_link".equals( highwayValue ) )
         {
@@ -38,4 +34,10 @@ public long acceptWay( OSMWay way )
         
         return super.acceptWay( way );
     }
+
+    @Override
+    public String toString()
+    {
+        return "feederpatrol";
+    }
 }
diff --git a/core/src/main/java/com/samsix/graphhopper/GasFinderFlagEncoder.java b/core/src/main/java/com/samsix/graphhopper/GasFinderFlagEncoder.java
new file mode 100644
index 0000000000..858986182b
--- /dev/null
+++ b/core/src/main/java/com/samsix/graphhopper/GasFinderFlagEncoder.java
@@ -0,0 +1,25 @@
+package com.samsix.graphhopper;
+
+import com.graphhopper.routing.util.FootFlagEncoder;
+
+public class GasFinderFlagEncoder
+    extends
+        FootFlagEncoder
+{
+    public GasFinderFlagEncoder()
+    {
+        super();
+        
+        //
+        // For running gas mains we don't want to avoid
+        // crossing private property.
+        //
+        restrictedValues.remove("private");
+    }
+
+    @Override
+    public String toString()
+    {
+        return "gasfinder";
+    }
+}
diff --git a/core/src/main/java/com/samsix/graphhopper/S6FootFlagEncoder.java b/core/src/main/java/com/samsix/graphhopper/S6FootFlagEncoder.java
deleted file mode 100644
index 1085b554f6..0000000000
--- a/core/src/main/java/com/samsix/graphhopper/S6FootFlagEncoder.java
+++ /dev/null
@@ -1,15 +0,0 @@
-package com.samsix.graphhopper;
-
-import com.graphhopper.routing.util.FootFlagEncoder;
-
-public class S6FootFlagEncoder
-    extends
-        FootFlagEncoder
-{
-    public S6FootFlagEncoder()
-    {
-        super();
-        
-        restrictedValues.remove("private");
-    }
-}
diff --git a/core/src/main/java/com/samsix/graphhopper/S6GraphHopper.java b/core/src/main/java/com/samsix/graphhopper/S6GraphHopper.java
index 74062c21be..cd4bdfee0e 100644
--- a/core/src/main/java/com/samsix/graphhopper/S6GraphHopper.java
+++ b/core/src/main/java/com/samsix/graphhopper/S6GraphHopper.java
@@ -15,6 +15,14 @@
     @Override
     public Weighting createWeighting( WeightingMap wMap, FlagEncoder encoder )
     {
+        Weighting defaultWeighting = super.createWeighting(wMap, encoder);
+        
+        //
+        // This was created to avoid doing U-Turns if possible.
+        // We specify the edge we just drove on as an edge to avoid if possible.
+        // We give it a very large, but not infinite number. If it is the only
+        // possibility then it will take it thus indicating a valid u-turn.
+        //
         String avoid = wMap.get("avoidEdge", null);
         
         Set<Integer> avoidEdges = null;
@@ -24,18 +32,20 @@ public Weighting createWeighting( WeightingMap wMap, FlagEncoder encoder )
             for (int ii=0; ii < edges.length; ii++) {
                 avoidEdges.add(Integer.parseInt(edges[ii].trim()));
             }
+            return new AvoidEdgeWeighting(defaultWeighting, avoidEdges);
         }
-        return new NoUTurnWeighting(super.createWeighting(wMap, encoder), avoidEdges);
+        
+        return defaultWeighting;
     }
     
     
-    public static class NoUTurnWeighting
+    public static class AvoidEdgeWeighting
         implements Weighting
     {
         public Weighting weighting;
         private Set<Integer> avoidEdges;
        
-        public NoUTurnWeighting(final Weighting weighting,
+        public AvoidEdgeWeighting(final Weighting weighting,
                                 final Set<Integer> avoidEdges)
         {
             this.weighting = weighting;
diff --git a/core/src/main/java/com/samsix/graphhopper/ServiceFlagEncoder.java b/core/src/main/java/com/samsix/graphhopper/ServiceFlagEncoder.java
new file mode 100644
index 0000000000..7d50ec5fe8
--- /dev/null
+++ b/core/src/main/java/com/samsix/graphhopper/ServiceFlagEncoder.java
@@ -0,0 +1,27 @@
+package com.samsix.graphhopper;
+
+import com.graphhopper.reader.OSMWay;
+import com.graphhopper.routing.util.CarFlagEncoder;
+import com.graphhopper.routing.util.FootFlagEncoder;
+
+public class ServiceFlagEncoder
+    extends
+        CarFlagEncoder
+{
+    public ServiceFlagEncoder()
+    {
+        super();
+        
+        //
+        // Allow our service vehicles to take private roads
+        // to get to the equipment they need to get to.
+        //
+        restrictedValues.remove("private");
+    }
+
+    @Override
+    public String toString()
+    {
+        return "service";
+    }
+}
diff --git a/core/src/main/java/com/samsix/graphhopper/TruckServiceFlagEncoder.java b/core/src/main/java/com/samsix/graphhopper/TruckServiceFlagEncoder.java
new file mode 100644
index 0000000000..03af673608
--- /dev/null
+++ b/core/src/main/java/com/samsix/graphhopper/TruckServiceFlagEncoder.java
@@ -0,0 +1,46 @@
+package com.samsix.graphhopper;
+
+import com.graphhopper.reader.OSMWay;
+import com.graphhopper.routing.util.CarFlagEncoder;
+
+public class TruckServiceFlagEncoder
+    extends
+        CarFlagEncoder
+{
+    public TruckServiceFlagEncoder()
+    {
+        super();
+        
+        //
+        // Allow our service vehicles to take private roads
+        // to get to the equipment they need to get to.
+        //
+        restrictedValues.remove("private");
+    }
+    
+    
+    @Override
+    public long acceptWay( OSMWay way )
+    {
+        String hgv = way.getTag("hgv");
+    
+        //
+        // hgv=no seems to be the way to say that trucks can't go here.
+        // hgv = Heavy Goods Vehicle
+        // Other values for hgv I have seen are...
+        //     "local", "designated", "destination"
+        //
+        if ("no".equalsIgnoreCase(hgv))
+        {
+            return 0;
+        }
+        
+        return super.acceptWay( way );
+    }
+
+    @Override
+    public String toString()
+    {
+        return "truckservice";
+    }
+}
diff --git a/core/src/main/java/com/samsix/graphhopper/tools/S6Import.java b/core/src/main/java/com/samsix/graphhopper/tools/S6Import.java
new file mode 100644
index 0000000000..8fd54d2070
--- /dev/null
+++ b/core/src/main/java/com/samsix/graphhopper/tools/S6Import.java
@@ -0,0 +1,34 @@
+package com.samsix.graphhopper.tools;
+
+import java.util.ArrayList;
+import java.util.List;
+
+import com.graphhopper.GraphHopper;
+import com.graphhopper.routing.util.CarFlagEncoder;
+import com.graphhopper.routing.util.EncodingManager;
+import com.graphhopper.routing.util.FlagEncoder;
+import com.graphhopper.util.CmdArgs;
+import com.samsix.graphhopper.FeederPatrolFlagEncoder;
+import com.samsix.graphhopper.GasFinderFlagEncoder;
+import com.samsix.graphhopper.S6GraphHopper;
+import com.samsix.graphhopper.TruckServiceFlagEncoder;
+
+public class S6Import
+{
+    public static void main( String[] strs ) throws Exception
+    {
+        CmdArgs args = CmdArgs.read(strs);
+        GraphHopper hopper = new S6GraphHopper().init(args);
+
+        List<FlagEncoder> encoders = new ArrayList<FlagEncoder>();
+        encoders.add(new GasFinderFlagEncoder());
+        encoders.add(new FeederPatrolFlagEncoder());
+        encoders.add(new CarFlagEncoder());
+        encoders.add(new TruckServiceFlagEncoder());
+        EncodingManager manager = new EncodingManager(encoders, 8);
+        hopper.setEncodingManager(manager);
+        
+        hopper.importOrLoad();
+        hopper.close();
+    }
+}
diff --git a/graphhopper.sh b/graphhopper.sh
index df8e86d625..b70cf4e01b 100755
--- a/graphhopper.sh
+++ b/graphhopper.sh
@@ -1,6 +1,6 @@
 #!/bin/bash
 
-GH_CLASS=com.graphhopper.tools.Import
+GH_CLASS=com.samsix.graphhopper.tools.S6Import
 GH_HOME=$(dirname "$0")
 JAVA=$JAVA_HOME/bin/java
 if [ "x$JAVA_HOME" = "x" ]; then
diff --git a/s6config.properties b/s6config.properties
index 7cc0b18509..c69bed146c 100644
--- a/s6config.properties
+++ b/s6config.properties
@@ -19,10 +19,11 @@ prepare.chWeighting=no
 # increase from 1 to 5, to reduce way geometry e.g. for android
 osmreader.wayPointMaxDistance=1
 
-# possible options: CAR,FOOT,BIKE (comma separated)
-#osmreader.acceptWay=CAR
-#osmreader.acceptWay=CAR,FOOT
-osmreader.acceptWay=FOOT:com.samsix.graphhopper.S6FootFlagEncoder,CAR:com.samsix.graphhopper.S6CarFlagEncoder
+# Because we have so many FlagEncoders we need to use 8 instead of the default 4
+# But we are actually setting this in our special S6Import class
+#graph.bytesForFlags=8
+
+#graph.flagEncoders=FOOT:com.samsix.graphhopper.S6FootFlagEncoder,CAR:com.samsix.graphhopper.S6CarFlagEncoder
 
 # if you want to reduce storage size and you don't need instructions for a path uncomment this
 # osmreader.instructions=false
diff --git a/import.sh b/us-import.sh
similarity index 100%
rename from import.sh
rename to us-import.sh
