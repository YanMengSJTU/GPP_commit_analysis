diff --git a/acceptancetesting/src/test/cucumber/DPNRouting.feature b/acceptancetesting/src/test/cucumber/DPNRouting.feature
index de4ea86e1c..57bd62a0f0 100644
--- a/acceptancetesting/src/test/cucumber/DPNRouting.feature
+++ b/acceptancetesting/src/test/cucumber/DPNRouting.feature
@@ -9,12 +9,11 @@ Feature: Verify a route from A to B
       | pointA              | pointB             |
       | 53.176062,-1.871472 | 53.154773,-1.77272 |
     And I have vehicle as "<vehicleType>"
-    And I have avoidances as "<avoidances>"
     And I have weighting as "<routeType>"
     When I request for a route
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco        | waypointdesc            | azimuth | direction | time  | distance | avoidance |
-      | 4             | 53.1356,-1.820891 | Continue onto Mill Lane | 70.0    | E         | 23171 | 32.2     |           |
+      | wayPointIndex | waypointco          | waypointdesc             | azimuth | direction | time  | distance | avoidance |
+      | 1             | 53.176154,-1.870867 | Continue onto Minor Road | 165.0   | S         | 79514 | 110.4    |           |
 
     Examples: 
       | vehicleType | avoidances | routeType |
@@ -26,13 +25,12 @@ Feature: Verify a route from A to B
       | pointA              | pointB              |
       | 53.211013,-1.619393 | 53.185757,-1.611969 |
     And I have vehicle as "<vehicleType>"
-    And I have avoidances as "<avoidances>"
     And I have weighting as "<routeType>"
     When I request for a route
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco          | waypointdesc                  | azimuth | direction | time   | distance | avoidance |
-      | 2             | 53.221055,-1.623152 | Turn right onto B Road        | 157.0   | SE        | 984273 | 1367.1   |           |
-      | 5             | 53.197269,-1.608797 | Continue onto Chatsworth Road | 181.0   | S         | 678871 | 942.9    |           |
+      | wayPointIndex | waypointco          | waypointdesc                        | azimuth | direction | time  | distance | avoidance |
+      | 2             | 53.21037,-1.616188  | Turn slight right onto Long Gallery | 158.0   | S         | 16825 | 23.4     |           |
+      | 8             | 53.189832,-1.619443 | Turn left onto Church Lane          | 141.0   | SE        | 90545 | 125.8    |           |
 
     Examples: 
       | vehicleType | avoidances | routeType |
@@ -44,12 +42,11 @@ Feature: Verify a route from A to B
       | pointA              | pointB              |
       | 53.049589,-1.823866 | 53.076372,-1.853379 |
     And I have vehicle as "<vehicleType>"
-    And I have avoidances as "<avoidances>"
     And I have weighting as "<routeType>"
     When I request for a route
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco          | waypointdesc          | azimuth | direction | time  | distance | avoidance |
-      | 3             | 53.042479,-1.820522 | Turn right onto Route | 297.0   | NW        | 35181 | 48.9     |           |
+      | wayPointIndex | waypointco          | waypointdesc              | azimuth | direction | time   | distance | avoidance |
+      | 3             | 53.047941,-1.841795 | Turn right onto Back Lane | 340.0   | N         | 347789 | 483.0    |           |
 
     Examples: 
       | vehicleType | avoidances | routeType |
@@ -61,12 +58,11 @@ Feature: Verify a route from A to B
       | pointA              | pointB              |
       | 53.173064,-2.060321 | 53.214387,-2.017271 |
     And I have vehicle as "<vehicleType>"
-    And I have avoidances as "<avoidances>"
     And I have weighting as "<routeType>"
     When I request for a route
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco          | waypointdesc         | azimuth | direction | time   | distance | avoidance |
-      | 4             | 53.176842,-2.069334 | Turn left onto Track | 255.0   | W         | 187602 | 260.6    |           |
+      | wayPointIndex | waypointco          | waypointdesc                 | azimuth | direction | time   | distance | avoidance |
+      | 4             | 53.176842,-2.069334 | Turn right onto Private Road | 1.0     | N         | 919954 | 1277.7   |           |
 
     Examples: 
       | vehicleType | avoidances | routeType |
@@ -78,7 +74,6 @@ Feature: Verify a route from A to B
       | pointA              | pointB             |
       | 53.122676,-1.909914 | 53.088159,-1.87142 |
     And I have vehicle as "<vehicleType>"
-    And I have avoidances as "<avoidances>"
     And I have weighting as "<routeType>"
     When I request for a route
     Then I should be able to verify the waypoints on the route map:
@@ -95,7 +90,6 @@ Feature: Verify a route from A to B
       | pointA             | pointB              |
       | 53.06535,-1.906169 | 53.100994,-1.956274 |
     And I have vehicle as "<vehicleType>"
-    And I have avoidances as "<avoidances>"
     And I have weighting as "<routeType>"
     When I request for a route
     Then I should be able to verify the waypoints on the route map:
@@ -112,12 +106,11 @@ Feature: Verify a route from A to B
       | pointA              | pointB              |
       | 53.348832,-1.761122 | 53.197338,-1.594157 |
     And I have vehicle as "<vehicleType>"
-    And I have avoidances as "<avoidances>"
     And I have weighting as "<routeType>"
     When I request for a route
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco          | waypointdesc                  | azimuth | direction | time   | distance | avoidance |
-      | 2             | 53.347406,-1.760973 | Turn left onto Castleton Road | 109.0   | E         | 878424 | 1220.0   | ARoad     |
+      | 2             | 53.347406,-1.760973 | Turn left onto Castleton Road | 109.0   | E         | 550345 | 764.4    | ARoad     |
 
     Examples: 
       | vehicleType | avoidances | routeType |
@@ -129,12 +122,11 @@ Feature: Verify a route from A to B
       | pointA              | pointB              |
       | 53.300714,-1.786126 | 53.287803,-1.816746 |
     And I have vehicle as "<vehicleType>"
-    And I have avoidances as "<avoidances>"
     And I have weighting as "<routeType>"
     When I request for a route
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco          | waypointdesc                 | azimuth | direction | time   | distance | avoidance |
-      | 3             | 53.305821,-1.814508 | Continue onto Hernstone Lane | 299.0   | NW        | 304923 | 423.5    | ARoad     |
+      | wayPointIndex | waypointco          | waypointdesc                          | azimuth | direction | time    | distance | avoidance |
+      | 3             | 53.300719,-1.784239 | Turn sharp right onto Manchester Road | 208.0   | SW        | 1000566 | 1389.7   |           |
 
     Examples: 
       | vehicleType | avoidances | routeType |
@@ -146,12 +138,11 @@ Feature: Verify a route from A to B
       | pointA              | pointB              |
       | 53.194909,-1.710481 | 53.156696,-1.634947 |
     And I have vehicle as "<vehicleType>"
-    And I have avoidances as "<avoidances>"
     And I have weighting as "<routeType>"
     When I request for a route
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco         | waypointdesc               | azimuth | direction | time   | distance | avoidance |
-      | 5             | 53.20882,-1.688212 | Continue onto Monyash Road | 55.0    | NE        | 482979 | 670.8    |           |
+      | wayPointIndex | waypointco          | waypointdesc               | azimuth | direction | time   | distance | avoidance |
+      | 2             | 53.195479,-1.701857 | Continue onto Monyash Road | 93.0    | E         | 199214 | 276.7    |           |
 
     Examples: 
       | vehicleType | avoidances | routeType |
@@ -163,7 +154,6 @@ Feature: Verify a route from A to B
       | pointA              | pointB              |
       | 53.142876,-1.642599 | 53.163897,-1.714249 |
     And I have vehicle as "<vehicleType>"
-    And I have avoidances as "<avoidances>"
     And I have weighting as "<routeType>"
     When I request for a route
     Then I should be able to verify the waypoints on the route map:
@@ -180,12 +170,11 @@ Feature: Verify a route from A to B
       | pointA              | pointB             |
       | 53.114295,-1.762789 | 53.086961,-1.69626 |
     And I have vehicle as "<vehicleType>"
-    And I have avoidances as "<avoidances>"
     And I have weighting as "<routeType>"
     When I request for a route
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco          | waypointdesc                   | azimuth | direction | time   | distance | avoidance |
-      | 4             | 53.129383,-1.754591 | Turn left onto Cardlemere Lane | 121.0   | SE        | 594909 | 826.3    |           |
+      | 5             | 53.088126,-1.734515 | Turn slight left onto Dam Lane | 83.0    | E         | 242473 | 336.8    |           |
 
     Examples: 
       | vehicleType | avoidances | routeType |
@@ -193,18 +182,17 @@ Feature: Verify a route from A to B
 
   @Routing
   Scenario Outline: Verify  Road Names on a Walking Route using one intermediate point ( Old Coalpit Lane)
-    Given I have route point as via "<pointC>"
+    Given I have route point as
       | pointA              | pointB            | pointC              |
-      | 53.238625,-1.794511 | 53.1651,-1.776435 | 53.125221,-1.871205 |
+      | 53.184738,-1.780104 | 53.1651,-1.776435 | 53.130965,-1.835199 |
     And I have vehicle as "<vehicleType>"
-    And I have avoidances as "<avoidances>"
     And I have weighting as "<routeType>"
     When I request for a route
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco          | waypointdesc                    | azimuth | direction | time   | distance | avoidance |
-      | 2             | 53.23952,-1.803512  | Turn left onto Sough Lane       | 189.0   | S         | 452948 | 629.1    |           |
-      | 29            | 53.140548,-1.810174 | Turn slight left onto Mill Lane | 216.0   | SW        | 49046  | 68.1     |           |
-      | 34            | 53.129146,-1.866738 | Turn left onto Cheadle Road     | 179.0   | S         | 171195 | 237.8    |           |
+      | wayPointIndex | waypointco          | waypointdesc                     | azimuth | direction | time   | distance | avoidance |
+      | 2             | 53.169799,-1.780276 | Turn left onto A Road            | 153.0   | SE        | 42081  | 58.4     | ARoad     |
+      | 5             | 53.165123,-1.776337 | Continue onto A Road             | 158.0   | S         | 162090 | 225.1    |           |
+      | 15            | 53.130361,-1.834063 | Turn sharp right onto Minor Road | 325.0   | NW        | 71716  | 99.6     |           |
 
     Examples: 
       | vehicleType | avoidances | routeType |
@@ -212,17 +200,16 @@ Feature: Verify a route from A to B
 
   @Routing
   Scenario Outline: Verify  Road Names on a Walking Route using one intermediate point ( Newhouses Farm)
-    Given I have route point as via "<pointC>"
+    Given I have route point as
       | pointA              | pointB             | pointC              |
-      | 53.303058,-1.836061 | 53.28261,-1.761964 | 53.233207,-1.633878 |
+      | 53.286725,-1.811501 | 53.28261,-1.761964 | 53.233207,-1.633878 |
     And I have vehicle as "<vehicleType>"
-    And I have avoidances as "<avoidances>"
     And I have weighting as "<routeType>"
     When I request for a route
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco          | waypointdesc                          | azimuth | direction | time    | distance | avoidance |
-      | 7             | 53.305394,-1.819253 | Turn slight right onto Hernstone Lane | 66.0    | NE        | 304923  | 423.5    | ARoad     |
-      | 14            | 53.25475,-1.727239  | Continue onto Castlegate Lane         | 183.0   | S         | 1156073 | 1605.7   |           |
+      | wayPointIndex | waypointco          | waypointdesc                    | azimuth | direction | time   | distance | avoidance |
+      | 5             | 53.279914,-1.775093 | Turn right onto Manchester Road | 96.0    | E         | 9059   | 12.6     |           |
+      | 11            | 53.282733,-1.761774 | Continue onto Conjoint Lane     | 132.0   | SE        | 608458 | 845.1    |           |
 
     Examples: 
       | vehicleType | avoidances | routeType |
@@ -230,18 +217,16 @@ Feature: Verify a route from A to B
 
   @Routing
   Scenario Outline: Verify  Road Names on a Walking Route using one intermediate point ( Bakewell)
-    Given I have route point as via "<pointC>"
+    Given I have route point as
       | pointA              | pointB              | pointC              |
       | 53.138247,-1.752507 | 53.195653,-1.762655 | 53.211574,-1.682278 |
     And I have vehicle as "<vehicleType>"
-    And I have avoidances as "<avoidances>"
     And I have weighting as "<routeType>"
     When I request for a route
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco          | waypointdesc                   | azimuth | direction | time    | distance | avoidance |
-      | 6             | 53.145466,-1.778242 | Continue onto Tissington Trail | 17.0    | N         | 2006616 | 2787.0   |           |
-      | 15            | 53.195118,-1.761669 | Continue onto Church Street    | 38.0    | NE        | 897815  | 1247.0   |           |
-      | 19            | 53.20882,-1.688212  | Continue onto Monyash Road     | 55.0    | NE        | 369935  | 513.8    |           |
+      | wayPointIndex | waypointco          | waypointdesc                | azimuth | direction | time   | distance | avoidance |
+      | 4             | 53.17256,-1.736315  | Turn left onto Long Rake    | 262.0   | W         | 439610 | 610.6    |           |
+      | 12            | 53.195118,-1.761669 | Continue onto Church Street | 38.0    | NE        | 897815 | 1247.0   |           |
 
     Examples: 
       | vehicleType | avoidances | routeType |
@@ -249,18 +234,17 @@ Feature: Verify a route from A to B
 
   @Routing
   Scenario Outline: Verify  Road Names on a Walking Route  using 2 intermediate waypoints (Mill Lane)
-    Given I have route point as via "<pointC>" and "<pointD>"
+    Given I have route point as
       | pointA              | pointB              | pointC             | pointD              |
       | 53.139805,-1.803217 | 53.133646,-1.826223 | 53.14993,-1.868096 | 53.181298,-1.869034 |
     And I have vehicle as "<vehicleType>"
-    And I have avoidances as "<avoidances>"
     And I have weighting as "<routeType>"
     When I request for a route
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco          | waypointdesc                    | azimuth | direction | time   | distance | avoidance |
-      | 5             | 53.140548,-1.810174 | Turn slight left onto Mill Lane | 216.0   | SW        | 49046  | 68.1     |           |
-      | 12            | 53.131356,-1.852045 | Turn slight right onto Path     | 317.0   | NW        | 721024 | 1001.4   |           |
-      | 16            | 53.181282,-1.869038 | Turn left onto Market Place     | 315.0   | NW        | 791    | 1.1      |           |
+      | 4             | 53.140548,-1.810174 | Turn slight left onto Mill Lane | 216.0   | SW        | 49046  | 68.1     |           |
+      | 12            | 53.134882,-1.827561 | Turn left onto Private Road     | 303.0   | NW        | 243573 | 338.3    |           |
+      | 33            | 53.181282,-1.869038 | Turn left onto Market Place     | 315.0   | NW        | 791    | 1.1      |           |
 
     Examples: 
       | vehicleType | avoidances | routeType |
@@ -268,19 +252,17 @@ Feature: Verify a route from A to B
 
   @Routing
   Scenario Outline: Verify  Road Names on a Walking Route  using 2 intermediate waypoints (Tag Lane)
-    Given I have route point as via "
+    Given I have route point as
       | pointA              | pointB              | pointC              | pointD              |
       | 53.190346,-1.802704 | 53.239419,-1.818421 | 53.280601,-1.764495 | 53.233207,-1.633878 |
     And I have vehicle as "<vehicleType>"
-    And I have avoidances as "<avoidances>"
     And I have weighting as "<routeType>"
     When I request for a route
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco          | waypointdesc                    | azimuth | direction | time    | distance | avoidance |
-      | 7             | 53.227765,-1.848174 | Turn left onto Old Coalpit Lane | 58.0    | NE        | 908755  | 1262.2   | ARoad     |
-      | 18            | 53.244806,-1.809527 | Continue onto Blackwell Dale    | 48.0    | NE        | 1027560 | 1427.2   |           |
-      | 26            | 53.281579,-1.765467 | Continue onto Whitecross Road   | 59.0    | NE        | 210216  | 292.0    |           |
-      | 32            | 53.224822,-1.70717  | Turn left onto Hall End Lane    | 59.0    | NE        | 80272   | 111.5    |           |
+      | wayPointIndex | waypointco          | waypointdesc                     | azimuth | direction | time    | distance | avoidance |
+      | 7             | 53.22401,-1.821103  | Turn slight left onto Minor Road | 276.0   | W         | 92316   | 128.2    |           |
+      | 16            | 53.244806,-1.809527 | Continue onto Blackwell Dale     | 48.0    | NE        | 1027560 | 1427.2   |           |
+      | 26            | 53.2788,-1.771289   | Continue onto Whitecross Road    | 58.0    | NE        | 357520  | 496.6    |           |
 
     Examples: 
       | vehicleType | avoidances | routeType |
@@ -288,18 +270,17 @@ Feature: Verify a route from A to B
 
   @Routing
   Scenario Outline: Verify  Road Names on a Walking Route  using 2 intermediate waypoints (Dowlow Farm)
-    Given I have route point as via
+    Given I have route point as
       | pointA              | pointB              | pointC              | pointD             |
       | 53.206965,-1.839021 | 53.203607,-1.857557 | 53.149631,-1.867364 | 53.11417,-1.895082 |
     And I have vehicle as "<vehicleType>"
-    And I have avoidances as "<avoidances>"
     And I have weighting as "<routeType>"
     When I request for a route
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco          | waypointdesc                  | azimuth | direction | time   | distance | avoidance |
-      | 2             | 53.206014,-1.83483  | Turn right onto Midshires Way | 191.0   | S         | 265210 | 368.3    |           |
-      | 19            | 53.202937,-1.870926 | Continue onto Glutton Dale    | 254.0   | W         | 279743 | 388.5    |           |
-      | 28            | 53.124725,-1.870683 | Turn right onto Cheadle Road  | 243.0   | SW        | 121072 | 168.2    |           |
+      | wayPointIndex | waypointco          | waypointdesc                     | azimuth | direction | time    | distance | avoidance |
+      | 2             | 53.206014,-1.83483  | Turn right onto Midshires Way    | 191.0   | S         | 265210  | 368.3    |           |
+      | 20            | 53.196243,-1.857282 | Turn sharp left onto Minor Road  | 111.0   | E         | 1156273 | 1605.9   |           |
+      | 43            | 53.148266,-1.867183 | Turn sharp right onto Minor Road | 261.0   | W         | 246565  | 342.5    |           |
 
     Examples: 
       | vehicleType | avoidances | routeType |
@@ -311,14 +292,13 @@ Feature: Verify a route from A to B
   Scenario Outline: Verify DPN Route without Scree avoidance -(scree)
     Given I have route point as
       | pointA              | pointB              |
-      | 53.267104,-1.818304 | 53.131858,-1.661941 |
+      | 53.202622,-1.787557 | 53.188642,-1.720999 |
     And I have vehicle as "<vehicleType>"
-    And I have avoidances as "<avoidances>"
     And I have weighting as "<routeType>"
     When I request for a route
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco          | waypointdesc       | azimuth | direction | time  | distance | avoidance |
-      | 15            | 53.252061,-1.826618 | Continue onto Path | 97.0    | E         | 24386 | 33.9     | Scree     |
+      | wayPointIndex | waypointco          | waypointdesc       | azimuth | direction | time   | distance | avoidance |
+      | 11            | 53.189871,-1.744722 | Continue onto Path | 112.0   | SE        | 253051 | 351.5    | Scree     |
 
     Examples: 
       | vehicleType | avoidances | routeType |
@@ -348,12 +328,11 @@ Feature: Verify a route from A to B
       | pointA             | pointB              |
       | 53.31676,-1.631903 | 53.156465,-1.908797 |
     And I have vehicle as "<vehicleType>"
-    And I have avoidances as "<avoidances>"
     And I have weighting as "<routeType>"
     When I request for a route
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco          | waypointdesc        | azimuth | direction | time | distance | avoidance |
-      | 5             | 53.311409,-1.627165 | Continue onto Route | 178.0   | S         | 2655 | 3.7      | Cliff     |
+      | 4             | 53.311409,-1.627165 | Continue onto Route | 178.0   | S         | 2655 | 3.7      | Cliff     |
 
     Examples: 
       | vehicleType | avoidances | routeType |
@@ -382,7 +361,6 @@ Feature: Verify a route from A to B
       | pointA            | pointB              |
       | 53.5534,-1.983177 | 53.540061,-1.978324 |
     And I have vehicle as "<vehicleType>"
-    And I have avoidances as "<avoidances>"
     And I have weighting as "<routeType>"
     When I request for a route
     Then I should be able to verify the waypoints on the route map:
@@ -421,12 +399,11 @@ Feature: Verify a route from A to B
       | pointA              | pointB              |
       | 53.311217,-1.629849 | 53.156465,-1.908797 |
     And I have vehicle as "<vehicleType>"
-    And I have avoidances as "<avoidances>"
     And I have weighting as "<routeType>"
     When I request for a route
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco          | waypointdesc        | azimuth | direction | time  | distance | avoidance |
-      | 3             | 53.309004,-1.627564 | Turn left onto Path | 98.0    | E         | 99563 | 138.3    | Boulders  |
+      | 6             | 53.309601,-1.627555 | Continue onto Route | 180.0   | S         | 47751 | 66.3     | Boulders  |
 
     Examples: 
       | vehicleType | avoidances | routeType |
@@ -504,24 +481,6 @@ Feature: Verify a route from A to B
       | vehicleType | avoidances      | routeType |
       | foot        | Boulders,A Road | fastavoid |
 
-  @Routing
-  Scenario Outline: Verify DPN Route without boulders avoidance -(boulders)
-    Given I have route point as
-      | pointA            | pointB              |
-      | 53.5534,-1.983177 | 53.490733,-1.977715 |
-    And I have vehicle as "<vehicleType>"
-    And I have avoidances as "<avoidances>"
-    And I have weighting as "<routeType>"
-    When I request for a route
-    Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco          | waypointdesc        | azimuth | direction | time   | distance | avoidance |
-      | 6             | 53.545217,-1.986871 | Continue onto Route | 106.0   | E         | 1660   | 2.3      | Cliff     |
-      | 9             | 53.545038,-1.986338 | Continue onto Route | 130.0   | SE        | 178328 | 247.7    | Boulders  |
-
-    Examples: 
-      | vehicleType | avoidances | routeType |
-      | foot        |            |           |
-
   @Routing
   Scenario Outline: Verify DPN Route with boulders avoidance -(boulders)
     Given I have route point as
@@ -541,13 +500,13 @@ Feature: Verify a route from A to B
       | foot        | Boulders,Cliff | fastavoid |
 
   # MOUNTAIN BIKE
+  #(ARoad, InlandWater, Boulders, Cliff, Scree, Marsh, Quarry or Pit)
   @Routing
   Scenario Outline: Verify DPN Route with -(mountainbike)
     Given I have route point as
       | pointA              | pointB              |
       | 53.298525,-1.679533 | 53.203145,-1.799292 |
     And I have vehicle as "<vehicleType>"
-    And I have avoidances as "<avoidances>"
     And I have weighting as "<routeType>"
     When I request for a route
     Then I should be able to verify the waypoints on the route map:
@@ -558,13 +517,13 @@ Feature: Verify a route from A to B
       | vehicleType  | avoidances | routeType |
       | mountainbike |            |           |
 
+  #InlandWater
   @Routing
   Scenario Outline: Verify DPN Route with out avoidance -(InlandWater)
     Given I have route point as
       | pointA              | pointB              |
       | 53.334174,-1.936591 | 53.182547,-1.824527 |
     And I have vehicle as "<vehicleType>"
-    And I have avoidances as "<avoidances>"
     And I have weighting as "<routeType>"
     When I request for a route
     Then I should be able to verify the waypoints on the route map:
@@ -679,6 +638,72 @@ Feature: Verify a route from A to B
       | vehicleType  | avoidances | routeType |
       | mountainbike |            |           |
 
+  # Pembrokeshire Coast National Park(fastest and shortest)
+  @Routing
+  Scenario Outline: Verify DPN Route without avoidance -(Pembrokeshire Coast National Park )
+    Given I have route point as
+      | pointA              | pointB              |
+      | 51.993625,-4.899369 | 51.630076,-4.976465 |
+    And I have vehicle as "<vehicleType>"
+    And I have weighting as "<routeType>"
+    When I request for a route
+    Then I should be able to verify the waypoints on the route map:
+      | wayPointIndex | waypointco          | waypointdesc          | azimuth | direction | time   | distance | avoidance |
+      | 6             | 51.857225,-4.967991 | Turn left onto A Road | 177.0   | S         | 732342 | 3661.7   | ARoad     |
+
+    Examples: 
+      | vehicleType  | avoidances | routeType |
+      | mountainbike |            | fastest   |
+
+  # Northumberland National Park(fastest and shortest)
+  @Routing
+  Scenario Outline: Verify DPN Route without  avoidance -(Northumberland National Park )
+    Given I have route point as
+      | pointA             | pointB              |
+      | 55.07745,-2.528548 | 55.371494,-2.488282 |
+    And I have vehicle as "<vehicleType>"
+    And I have weighting as "<routeType>"
+    When I request for a route
+    Then I should be able to verify the waypoints on the route map:
+      | wayPointIndex | waypointco          | waypointdesc             | azimuth | direction | time | distance | avoidance   |
+      | 2             | 55.065219,-2.518842 | Continue onto Minor Road | 92.0    | E         | 3200 | 16.0     | InlandWater |
+
+    Examples: 
+      | vehicleType  | avoidances | routeType |
+      | mountainbike |            | fastest   |
+
+  @Routing
+  Scenario Outline: Verify DPN Route without  avoidance -(Northumberland National Park )
+    Given I have route point as
+      | pointA             | pointB              |
+      | 55.07745,-2.528548 | 55.371494,-2.488282 |
+    And I have vehicle as "<vehicleType>"
+    And I have weighting as "<routeType>"
+    When I request for a route
+    Then I should be able to verify the waypoints on the route map:
+      | wayPointIndex | waypointco        | waypointdesc        | azimuth | direction | time   | distance | avoidance |
+      | 15            | 54.992982,-2.4999 | Continue onto Route | 64.0    | NE        | 979584 | 1088.4   | Boulders  |
+
+    Examples: 
+      | vehicleType  | avoidances | routeType |
+      | mountainbike |            | shortest  |
+
+  @Routing
+  Scenario Outline: Verify DPN Route without avoidance -(Pembrokeshire Coast National Park )
+    Given I have route point as
+      | pointA              | pointB              |
+      | 51.993625,-4.899369 | 51.630076,-4.976465 |
+    And I have vehicle as "<vehicleType>"
+    And I have weighting as "<routeType>"
+    When I request for a route
+    Then I should be able to verify the waypoints on the route map:
+      | wayPointIndex | waypointco          | waypointdesc        | azimuth | direction | time | distance | avoidance   |
+      | 6             | 51.970886,-4.881752 | Continue onto Route | 239.0   | SW        | 2610 | 2.9      | InlandWater |
+
+    Examples: 
+      | vehicleType  | avoidances | routeType |
+      | mountainbike |            | shortest  |
+
   # A Road
   @Routing
   Scenario Outline: Verify DPN Route with avoidance -(ARoad)
diff --git a/acceptancetesting/src/test/cucumber/Routing-Errors.feature b/acceptancetesting/src/test/cucumber/Routing-Errors.feature
index c8e8c2c2df..4ff489b393 100644
--- a/acceptancetesting/src/test/cucumber/Routing-Errors.feature
+++ b/acceptancetesting/src/test/cucumber/Routing-Errors.feature
@@ -264,7 +264,7 @@ Feature: Verify Error Messages from a routing service
       | pointA              | pointB              |
       | 50.729961,-3.524853 | 50.723364,-3.523895 |
     And I have vehicle as "<vehicleType>"
-    And I have calc_points as "<debug>"
+    And I have calc_points as "<calc_points>"
     And I have weighting as "<routeType>"
     And I have type as "<responseFormat>"
     When I request for a route
@@ -282,7 +282,7 @@ Feature: Verify Error Messages from a routing service
       | pointA              | pointB              |
       | 50.729961,-3.524853 | 50.723364,-3.523895 |
     And I have vehicle as "<vehicleType>"
-    And I have calc_points as "<debug>"
+    And I have calc_points as "<calc_points>"
     And I have weighting as "<routeType>"
     And I have type as "<responseFormat>"
     When I request for a route
@@ -316,7 +316,7 @@ Feature: Verify Error Messages from a routing service
       | car         |            | fastest   | OPTIONS    | json           | OK                 | 200        |
 
   # Nearest Point : Invalid Parameter Value "point"
-  @ErrorMessages
+  @ErrorMessages @Current
   Scenario Outline: Verify  nearest point of point using NearestPoint API
     Given I have type as "<responseFormat>"
     And My routing points for nearestPoint API as "<pointA>"
diff --git a/core/src/main/java/com/graphhopper/routing/EscapePrivateWeighting.java b/core/src/main/java/com/graphhopper/routing/EscapePrivateWeighting.java
new file mode 100644
index 0000000000..0d24ed5d02
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/routing/EscapePrivateWeighting.java
@@ -0,0 +1,67 @@
+package com.graphhopper.routing;
+
+import com.graphhopper.routing.util.FlagEncoder;
+import com.graphhopper.routing.util.Weighting;
+import com.graphhopper.storage.Graph;
+import com.graphhopper.util.EdgeIterator;
+import com.graphhopper.util.EdgeIteratorState;
+
+public class EscapePrivateWeighting implements Weighting
+{
+
+	private static final double ESCAPE_WEIGHT = 1.1;
+	public static final int KEY = 100;
+	private Weighting innerWeighting;
+	private FlagEncoder encoder;
+	private Graph graph;
+	private int start;
+	private int end;
+
+	public EscapePrivateWeighting( Graph graph, FlagEncoder encoder, Weighting weighting, int start, int end )
+    {
+	    super();
+	    this.graph = graph;
+	    this.encoder = encoder;
+	    this.innerWeighting = weighting;
+	    this.start = start;
+	    this.end = end;
+    }
+
+	@Override
+	public double getMinWeight( double distance )
+	{
+		return innerWeighting.getMinWeight(distance);
+	}
+
+	@Override
+	public double calcWeight( EdgeIteratorState edgeState, boolean reverse, int prevOrNextEdgeId )
+	{
+		System.err.println(edgeState.getClass() + ":" + edgeState.toString());
+		double calcWeight = innerWeighting.calcWeight(edgeState, reverse, prevOrNextEdgeId);
+		if(encoder.getLong(edgeState.getFlags(), KEY)>0) {
+			EdgeIteratorState edgeProps=null;
+			System.err.println("EDGE"+ edgeState.getEdge()+":PREVNEXT"  + prevOrNextEdgeId);
+			if(!isStartOrEnd(edgeState) && prevOrNextEdgeId>EdgeIterator.NO_EDGE) {
+				edgeProps = graph.getEdgeProps(prevOrNextEdgeId, Integer.MIN_VALUE);
+			}
+			if(null==edgeProps || encoder.getLong(edgeProps.getFlags(), KEY)>0) {
+				calcWeight *= ESCAPE_WEIGHT;
+			}
+			else {
+				calcWeight = Double.POSITIVE_INFINITY;
+			}
+		}
+		System.err.println("WEIGHT:" +calcWeight);
+		return calcWeight;
+	}
+
+	private boolean isStartOrEnd( EdgeIteratorState edgeState )
+    {
+	    int baseNode = edgeState.getBaseNode();
+		int adjNode = edgeState.getAdjNode();
+		boolean startEnd = baseNode == start  || baseNode == end  || adjNode == start || adjNode == end;
+		System.err.println("STARTEND:" + startEnd + ":" + edgeState.toString());
+		return startEnd;
+    }
+
+}
diff --git a/core/src/main/java/com/graphhopper/routing/util/EmergencyVehicleFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/EmergencyVehicleFlagEncoder.java
index 56da0dca36..cea014217a 100644
--- a/core/src/main/java/com/graphhopper/routing/util/EmergencyVehicleFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/EmergencyVehicleFlagEncoder.java
@@ -1,6 +1,7 @@
 package com.graphhopper.routing.util;
 
 import com.graphhopper.reader.Way;
+import com.graphhopper.routing.EscapePrivateWeighting;
 
 public class EmergencyVehicleFlagEncoder extends CarFlagEncoder
 {
@@ -29,7 +30,7 @@ public long acceptWay( Way way )
 	@Override
 	public long getLong( long flags, int key )
 	{
-	    if(key==100) 
+	    if(key==EscapePrivateWeighting.KEY) 
 	    	return startStopEncoder.getValue(flags);
 		return super.getLong(flags, key);
 	}
@@ -59,5 +60,14 @@ public int defineWayBits( int index, int shift )
         
         return shift;
     }
+    
+    @Override
+    public boolean supports( Class<?> feature )
+    {
+        if (super.supports(feature))
+            return true;
+
+        return EscapePrivateWeighting.class.isAssignableFrom(feature);
+    }
 	
 }
diff --git a/core/src/test/java/com/graphhopper/routing/AbstractRoutingAlgorithmTester.java b/core/src/test/java/com/graphhopper/routing/AbstractRoutingAlgorithmTester.java
index 54edf7b16f..91f4002e5b 100644
--- a/core/src/test/java/com/graphhopper/routing/AbstractRoutingAlgorithmTester.java
+++ b/core/src/test/java/com/graphhopper/routing/AbstractRoutingAlgorithmTester.java
@@ -17,18 +17,42 @@
  */
 package com.graphhopper.routing;
 
-import com.graphhopper.routing.util.*;
-import com.graphhopper.storage.*;
-import com.graphhopper.storage.index.LocationIndex;
-import com.graphhopper.storage.index.LocationIndexTree;
-import com.graphhopper.storage.index.QueryResult;
-import com.graphhopper.util.*;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
 import gnu.trove.list.TIntList;
+
 import java.util.Random;
-import static org.junit.Assert.*;
+
 import org.junit.Before;
 import org.junit.Test;
 
+import com.graphhopper.reader.OSMWay;
+import com.graphhopper.reader.Way;
+import com.graphhopper.routing.util.Bike2WeightFlagEncoder;
+import com.graphhopper.routing.util.CarFlagEncoder;
+import com.graphhopper.routing.util.EdgeFilter;
+import com.graphhopper.routing.util.EmergencyVehicleFlagEncoder;
+import com.graphhopper.routing.util.EncodingManager;
+import com.graphhopper.routing.util.FastestWeighting;
+import com.graphhopper.routing.util.FlagEncoder;
+import com.graphhopper.routing.util.FootFlagEncoder;
+import com.graphhopper.routing.util.ShortestWeighting;
+import com.graphhopper.routing.util.Weighting;
+import com.graphhopper.storage.Graph;
+import com.graphhopper.storage.GraphBuilder;
+import com.graphhopper.storage.NodeAccess;
+import com.graphhopper.storage.RAMDirectory;
+import com.graphhopper.storage.index.LocationIndex;
+import com.graphhopper.storage.index.LocationIndexTree;
+import com.graphhopper.storage.index.QueryResult;
+import com.graphhopper.util.DistanceCalc;
+import com.graphhopper.util.DistanceCalcEarth;
+import com.graphhopper.util.EdgeIterator;
+import com.graphhopper.util.EdgeIteratorState;
+import com.graphhopper.util.GHUtility;
+import com.graphhopper.util.Helper;
+
 /**
  *
  * @author Peter Karich
@@ -37,9 +61,10 @@
 {
     // problem is: matrix graph is expensive to create to cache it in a static variable
     private static Graph matrixGraph;
-    protected static final EncodingManager encodingManager = new EncodingManager("CAR,FOOT");
+    protected static final EncodingManager encodingManager = new EncodingManager("CAR,FOOT,EMV");
     protected FlagEncoder carEncoder;
     protected FlagEncoder footEncoder;
+    protected EmergencyVehicleFlagEncoder emvEncoder;
     protected AlgorithmOptions defaultOpts;
 
     @Before
@@ -47,6 +72,7 @@ public void setUp()
     {
         carEncoder = (CarFlagEncoder) encodingManager.getEncoder("CAR");
         footEncoder = (FootFlagEncoder) encodingManager.getEncoder("FOOT");
+        emvEncoder = (EmergencyVehicleFlagEncoder) encodingManager.getEncoder("EMV");
         defaultOpts = AlgorithmOptions.start().flagEncoder(carEncoder).
                 weighting(new ShortestWeighting()).build();
     }
@@ -187,6 +213,51 @@ public void testCalcFootPath()
         assertEquals(p1.toString(), 12240 * 1000, p1.getTime());
         assertEquals(Helper.createTList(0, 4, 5, 7), p1.calcNodes());
     }
+    
+    @Test
+    /**
+     * 0-7 can take route 4-5-2-3 despite first and last edge being private as must be able to leave a private start point or reach a private destination
+     */
+    public void testCalcStartEndOnlyPrivatePath()
+    {
+    	Way way = new OSMWay(1L);
+    	way.setTag("access", "no");
+    	way.setTag("highway","track");
+    	way.setTag("tracktype","grade3");
+        Graph graphShortest = createGraph(false);
+        initPrivateSections(graphShortest, emvEncoder.handleWayTags(way, 16, 0));
+        
+        GHUtility.printEdgeInfo(graphShortest, emvEncoder);
+        GHUtility.printInfo(graphShortest, 0,20, EdgeFilter.ALL_EDGES);
+        RoutingAlgorithm algo = createAlgo(graphShortest, AlgorithmOptions.start().flagEncoder(emvEncoder).
+                weighting(new EscapePrivateWeighting(graphShortest, emvEncoder, new ShortestWeighting(), 4, 3)).build());
+		
+        Path p1 = algo.calcPath(4, 3);
+        assertEquals(Helper.createTList(4, 5, 2, 3), p1.calcNodes());
+        assertEquals(p1.toString(), 17000, p1.getDistance(), 1e-6); 
+    }
+    
+    @Test
+    /**
+     * 0-7 cannot take shortest route 0-4-6-7 so must instead take 0-1-5-7
+     */
+    public void testCalcWontTraversePrivatePath()
+    {
+    	Way way = new OSMWay(1L);
+    	way.setTag("access", "no");
+    	way.setTag("highway","track");
+    	way.setTag("tracktype","grade3");
+        Graph graphShortest = createGraph(false);
+        initPrivateSections(graphShortest, emvEncoder.handleWayTags(way, 16, 0));
+        
+        GHUtility.printEdgeInfo(graphShortest, emvEncoder);
+        GHUtility.printInfo(graphShortest, 0,20, EdgeFilter.ALL_EDGES);
+        RoutingAlgorithm algo = createAlgo(graphShortest, AlgorithmOptions.start().flagEncoder(emvEncoder).
+                weighting(new EscapePrivateWeighting(graphShortest, emvEncoder, new ShortestWeighting(), 0, 7)).build());
+		Path p1 = algo.calcPath(0, 7);
+		assertEquals(Helper.createTList(0, 1, 5, 7), p1.calcNodes());
+        assertEquals(p1.toString(), 19000, p1.getDistance(), 1e-6); 
+    }
 
     protected void initFootVsCar( Graph graph )
     {
@@ -211,6 +282,30 @@ protected void initFootVsCar( Graph graph )
 
         graph.edge(6, 7).setDistance(5000).setFlags(carEncoder.setProperties(20, true, true));
     }
+    
+    protected void initPrivateSections( Graph graph, long privateSectionFlagValue  )
+    {
+        graph.edge(0, 1).setDistance(7000).setFlags(emvEncoder.setProperties(10, true, true));
+        graph.edge(0, 4).setDistance(5000).setFlags(emvEncoder.setProperties(10, true, true) );
+
+        graph.edge(1, 4).setDistance(7000).setFlags(emvEncoder.setProperties(10, true, true));
+        graph.edge(1, 5).setDistance(7000).setFlags(emvEncoder.setProperties(10, true, true));
+        graph.edge(1, 2).setDistance(20000).setFlags(emvEncoder.setProperties(10, true, true));
+
+        graph.edge(5, 2).setDistance(5000).setFlags(emvEncoder.setProperties(10, true, true));
+        graph.edge(2, 3).setDistance(5000).setFlags(privateSectionFlagValue);
+
+        graph.edge(5, 3).setDistance(11000).setFlags(privateSectionFlagValue);
+        graph.edge(3, 7).setDistance(7000).setFlags(privateSectionFlagValue);
+
+        graph.edge(4, 6).setDistance(5000).setFlags(privateSectionFlagValue);
+        graph.edge(5, 4).setDistance(7000).setFlags(privateSectionFlagValue);
+
+        graph.edge(5, 6).setDistance(7000).setFlags(privateSectionFlagValue);
+        graph.edge(7, 5).setDistance(5000).setFlags(emvEncoder.setProperties(10, true, true));
+
+        graph.edge(6, 7).setDistance(6000).setFlags(emvEncoder.setProperties(10, true, true));
+    }
 
     // see test-graph.svg !
     protected Graph createTestGraph()
diff --git a/core/src/test/java/com/graphhopper/routing/DijkstraOneToManyTest.java b/core/src/test/java/com/graphhopper/routing/DijkstraOneToManyTest.java
index 4092c96b44..19d224a0c5 100644
--- a/core/src/test/java/com/graphhopper/routing/DijkstraOneToManyTest.java
+++ b/core/src/test/java/com/graphhopper/routing/DijkstraOneToManyTest.java
@@ -109,6 +109,12 @@ public void testTwoWeightsPerEdge2()
     {
         // calcPath with QueryResult not supported
     }
+    
+    @Override
+    public void testCalcWontTraversePrivatePath()
+    {
+        // calcPath with QueryResult not supported
+    }
 
     @Test
     public void testIssue182()
