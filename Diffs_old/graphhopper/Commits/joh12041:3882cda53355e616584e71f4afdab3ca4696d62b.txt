diff --git a/reader-osm/src/main/java/com/graphhopper/reader/osm/runKSP.java b/reader-osm/src/main/java/com/graphhopper/reader/osm/runKSP.java
index a7d5e24d1e..f70f5beb42 100644
--- a/reader-osm/src/main/java/com/graphhopper/reader/osm/runKSP.java
+++ b/reader-osm/src/main/java/com/graphhopper/reader/osm/runKSP.java
@@ -4,7 +4,6 @@
 import com.graphhopper.GHResponse;
 import com.graphhopper.GraphHopper;
 import com.graphhopper.PathWrapper;
-import com.graphhopper.matching.EdgeMatch;
 import com.graphhopper.matching.MapMatching;
 import com.graphhopper.matching.MatchResult;
 import com.graphhopper.routing.AlgorithmOptions;
@@ -32,12 +31,15 @@
     private String inputPointsFN = "../data/intermediate/";
     private String outputPointsFN = "../data/output/";
     private String gvfnStem = "../data/intermediate/";
+    private String gctfnStem = "../geometries/";
     private ArrayList<String> gridValuesFNs = new ArrayList<>();
+    private ArrayList<String> gridCTsFNs = new ArrayList<>();
     private HashMap<String, Integer> gvHeaderMap;
     private HashMap<String, Float> gridBeauty;
+    private HashMap<String, Integer> gridCT;
     private GraphHopper hopper;
     private MapMatching mapMatching;
-    private String outputheader = "ID,polyline_points,total_time_in_sec,total_distance_in_meters,number_of_steps,maneuvers,beauty,simplicity" +
+    private String outputheader = "ID,name,polyline_points,total_time_in_sec,total_distance_in_meters,number_of_steps,maneuvers,beauty,simplicity,numCTs" +
             System.getProperty("line.separator");
 
     public runKSP(String city, String route_type) {
@@ -122,7 +124,7 @@ else if (pointsList.size() > 0) {
                 //path = trimPath(path, pointsList);
                 if (path.getDistance() > 0) {
                     score = getBeauty(path);
-                    writeOutput(sc_out, i, "Google", prevRouteID, path, score);
+                    writeOutput(sc_out, i, "ExtAPI", prevRouteID, path, score, getNumCTs(path));
                 }
                 pointsList.clear();
                 i++;
@@ -139,13 +141,14 @@ else if (pointsList.size() > 0) {
             path = GPXToPath(pointsList);
             if (path.getDistance() > 0) {
                 score = getBeauty(path);
-                writeOutput(sc_out, i, "Google", prevRouteID, path, score);
+                writeOutput(sc_out, i, "ExtAPI", prevRouteID, path, score, getNumCTs(path));
             }
         }
         sc_out.close();
         sc_in.close();
     }
 
+    //TODO: find some way to match path to virtual nodes at start/finish or hope map-matcher updates
     public PathWrapper trimPath(PathWrapper path, ArrayList<GPXEntry> original) {
         return new PathWrapper();
     }
@@ -158,22 +161,29 @@ public void setDataSources() throws Exception {
             inputPointsFN = inputPointsFN + "sf_" + route_type + "_od_pairs.csv";
             outputPointsFN = outputPointsFN + "sf_" + route_type + "_gh_routes.csv";
             gridValuesFNs.add(gvfnStem + "06075_logfractionempath_ft.csv");
+            gridCTsFNs.add(gctfnStem + "06075_ct_grid.csv");
         } else if (city.equals("NYC")) {
             osmFile = osmFile + "new-york_new-york.osm.pbf";
             graphFolder = graphFolder + "ghosm_nyc_noch";
             inputPointsFN = inputPointsFN + "nyc_" + route_type + "_od_pairs.csv";
-            outputPointsFN = outputPointsFN + "nyc_" + route_type + "gh_routes.csv";
+            outputPointsFN = outputPointsFN + "nyc_" + route_type + "_gh_routes.csv";
             gridValuesFNs.add(gvfnStem + "36005_logfractionempath_ft.csv");
             gridValuesFNs.add(gvfnStem + "36047_logfractionempath_ft.csv");
             gridValuesFNs.add(gvfnStem + "36061_logfractionempath_ft.csv");
             gridValuesFNs.add(gvfnStem + "36081_logfractionempath_ft.csv");
             gridValuesFNs.add(gvfnStem + "36085_logfractionempath_ft.csv");
+            gridCTsFNs.add(gctfnStem + "36005_ct_grid.csv");
+            gridCTsFNs.add(gctfnStem + "36047_ct_grid.csv");
+            gridCTsFNs.add(gctfnStem + "36061_ct_grid.csv");
+            gridCTsFNs.add(gctfnStem + "36081_ct_grid.csv");
+            gridCTsFNs.add(gctfnStem + "36085_ct_grid.csv");
         } else if (city.equals("BOS")) {
             osmFile = osmFile + "boston_massachusetts.osm.pbf";
             graphFolder = graphFolder + "ghosm_bos_noch";
             inputPointsFN = inputPointsFN + "bos_" + route_type + "_od_pairs.csv";
-            outputPointsFN = outputPointsFN + "bos_" + route_type + "gh_routes.csv";
+            outputPointsFN = outputPointsFN + "bos_" + route_type + "_gh_routes.csv";
             gridValuesFNs.add(gvfnStem + "25025_beauty_twitter.csv");
+            gridCTsFNs.add(gctfnStem + "25025_ct_grid.csv");
         } else {
             throw new Exception("Invalid Parameters: city must be of 'SF','NYC', or 'BOS' and route_type of 'grid' or 'rand'");
         }
@@ -198,9 +208,42 @@ public void getGridValues() throws Exception {
             while (sc_in.hasNext()) {
                 line = sc_in.nextLine();
                 vals = line.split(",");
-                rc = vals[gvHeaderMap.get("rid")] + "," + vals[gvHeaderMap.get("cid")];
-                beauty = Float.valueOf(vals[gvHeaderMap.get("beauty")]);
-                gridBeauty.put(rc, beauty);
+                try {
+                    rc = vals[gvHeaderMap.get("rid")] + "," + vals[gvHeaderMap.get("cid")];
+                    beauty = Float.valueOf(vals[gvHeaderMap.get("beauty")]);
+                    gridBeauty.put(rc, beauty);
+                } catch (NullPointerException ex) {
+                    System.out.println(ex.getMessage());
+                    System.out.println(line);
+                    continue;
+                }
+            }
+
+        }
+    }
+
+    public void getGridCTs() throws Exception {
+        gridBeauty = new HashMap<>();
+
+        for (String fn : gridValuesFNs) {
+            Scanner sc_in = new Scanner(new File(fn));
+            sc_in.nextLine();
+            String line;
+            String[] vals;
+            String rc;
+            int ct;
+            while (sc_in.hasNext()) {
+                line = sc_in.nextLine();
+                vals = line.split(",");
+                try {
+                    rc = vals[0] + "," + vals[1];
+                    ct = Integer.valueOf(vals[2]);
+                    gridCT.put(rc, ct);
+                } catch (NullPointerException ex) {
+                    System.out.println(ex.getMessage());
+                    System.out.println(line);
+                    continue;
+                }
             }
 
         }
@@ -234,7 +277,7 @@ public void prepMapMatcher() {
     }
 
 
-    public void writeOutput(FileWriter fw, int i, String optimized, String od_id, PathWrapper bestPath, float score) throws IOException {
+    public void writeOutput(FileWriter fw, int i, String optimized, String od_id, PathWrapper bestPath, float score, int numCTs) throws IOException {
 
         // points, distance in meters and time in seconds (convert from ms) of the full path
         PointList pointList = bestPath.getPoints();
@@ -249,12 +292,23 @@ public void writeOutput(FileWriter fw, int i, String optimized, String od_id, Pa
             maneuvers.add(instruction.getSimpleTurnDescription());
         }
 
-        fw.write(od_id + "," + "\"[" + pointList + "]\"," + timeInSec + "," + distance + "," + numDirections +
-                ",\"" + maneuvers.toString() + "\"" + "," + score + "," + simplicity + System.getProperty("line.separator"));
-        System.out.println(i + " (" + optimized + "): Distance: " + distance + "m;\tTime: " + timeInSec + "sec;\t# Directions: " + numDirections + ";\tSimplicity: " + simplicity + ";\tScore: " + score);
+        fw.write(od_id + ",main," + "\"[" + pointList + "]\"," + timeInSec + "," + distance + "," + numDirections +
+                ",\"" + maneuvers.toString() + "\"" + "," + score + "," + simplicity + "," + numCTs + System.getProperty("line.separator"));
+        System.out.println(i + " (" + optimized + "): Distance: " + distance + "m;\tTime: " + timeInSec + "sec;\t# Directions: " + numDirections + ";\tSimplicity: " + simplicity + ";\tScore: " + score + ";\tNumCts: " + numCTs);
 
     }
 
+    public int getNumCTs(PathWrapper path) {
+        HashSet<String> roundedPoints = path.roundPoints();
+        HashSet<Integer> cts = new HashSet<>();
+        for (String pt : roundedPoints) {
+            if (gridCT.containsKey(pt)) {
+                cts.add(gridCT.get(pt));
+            }
+        }
+        return cts.size();
+    }
+
     public float getBeauty(PathWrapper path) {
         HashSet<String> roundedPoints = path.roundPoints();
         float score = 0;
@@ -268,11 +322,6 @@ public float getBeauty(PathWrapper path) {
     }
 
 
-    public void augment_routes() throws Exception {
-
-    }
-
-
     public void process_routes() throws Exception {
         ArrayList<float[]> inputPoints = new ArrayList<float[]>();
         ArrayList<String> id_to_points = new ArrayList<String>();
@@ -280,8 +329,8 @@ public void process_routes() throws Exception {
         // Prep Filewriters (Optimized, Worst-but-same-distance, Fastest, Simplest)
         outputFiles.add(new FileWriter(outputPointsFN.replaceFirst(".csv","_beauty.csv"), true));
         outputFiles.add(new FileWriter(outputPointsFN.replaceFirst(".csv","_ugly.csv"), true));
-        outputFiles.add(new FileWriter(outputPointsFN.replaceFirst(".csv","_fast.csv"), true));
         outputFiles.add(new FileWriter(outputPointsFN.replaceFirst(".csv","_simple.csv"), true));
+        outputFiles.add(new FileWriter(outputPointsFN.replaceFirst(".csv","_fast.csv"), true));
 
         for (FileWriter fw : outputFiles) {
             fw.write(outputheader);
@@ -339,8 +388,8 @@ public void process_routes() throws Exception {
                 // handle them!
                 System.out.println(rsp.getErrors().toString());
                 System.out.println(i + ": Skipping.");
-                String outputRow = od_id + "," + "\"[(" + points[0] + "," + points[1] + "),(" + points[2] + "," + points[3]
-                        + ")]\"," + "-1,-1,-1,[]" + System.getProperty("line.separator");
+                String outputRow = od_id + ",main," + "\"[(" + points[0] + "," + points[1] + "),(" + points[2] + "," + points[3]
+                        + ")]\"," + "-1,-1,-1,[],-1,-1,-1" + System.getProperty("line.separator");
                 for (FileWriter fw: outputFiles) {
                     fw.write(outputRow);
                 }
@@ -355,6 +404,7 @@ public void process_routes() throws Exception {
             int j = 0;
             float bestscore = -1000;
             int routeidx = -1;
+            int numCTs;
             for (PathWrapper path : paths) {
                 float score = getBeauty(path);
                 if (score > bestscore) {
@@ -363,7 +413,7 @@ public void process_routes() throws Exception {
                 }
                 j++;
             }
-            writeOutput(outputFiles.get(0), i, "Best", od_id, paths.get(routeidx), bestscore);
+            writeOutput(outputFiles.get(0), i, "Best", od_id, paths.get(routeidx), bestscore, getNumCTs(paths.get(routeidx)));
 
             // Find least-beautiful route within similar distance constraints
             double beautyDistance = paths.get(routeidx).getDistance();
@@ -382,7 +432,7 @@ public void process_routes() throws Exception {
                 }
                 j++;
             }
-            writeOutput(outputFiles.get(1), i, "Wrst", od_id, paths.get(routeidx), bestscore);
+            writeOutput(outputFiles.get(1), i, "Wrst", od_id, paths.get(routeidx), bestscore, getNumCTs(paths.get(routeidx)));
 
             // Simplest Route
             j = 0;
@@ -398,12 +448,12 @@ public void process_routes() throws Exception {
                 }
                 j++;
             }
-            writeOutput(outputFiles.get(2), i, "Simp", od_id, paths.get(routeidx), beauty);
+            writeOutput(outputFiles.get(2), i, "Simp", od_id, paths.get(routeidx), beauty, getNumCTs(paths.get(routeidx)));
 
             // Fastest Route
             PathWrapper bestPath = paths.get(0);
             beauty = getBeauty(bestPath);
-            writeOutput(outputFiles.get(3), i, "Fast", od_id, bestPath, beauty);
+            writeOutput(outputFiles.get(3), i, "Fast", od_id, bestPath, beauty, getNumCTs(bestPath));
         }
 
         // Finished analysis: close filewriters and indicate how many paths skipped
@@ -415,33 +465,35 @@ public void process_routes() throws Exception {
 
     public static void main(String[] args) throws Exception {
 
-        // PBF from: https://mapzen.com/data/metro-extracts/
+        // PBFs from: https://mapzen.com/data/metro-extracts/
         // SF Random
         //runKSP ksp = new runKSP("SF", "rand");
 
+        // NYC Grid
+        runKSP ksp = new runKSP("NYC", "grid");
+
         // NYC Random
         //runKSP ksp = new runKSP("NYC", "rand");
         // BOS Check
         //runKSP ksp = new runKSP("BOS", "check");
 
         // SF Grid
-        runKSP ksp = new runKSP("SF", "grid");
-        ksp.setDataSources();
-        ksp.getGridValues();
-        ksp.prepareGraphHopper();
+        //runKSP ksp = new runKSP("SF", "grid");
+        //ksp.setDataSources();
+        //ksp.getGridValues();
+        //ksp.prepareGraphHopper();
         //ksp.process_routes();  // get Graphhopper routes
-        ksp.prepMapMatcher();  // score external API routes
-        ksp.PointsToPath("../data/output/sf_grid_google_gpx.csv", "../data/output/sf_grid_google_ghenhanced_sigma100_transitionDefault.csv");
-        ksp.PointsToPath("../data/output/sf_grid_mapquest_gpx.csv", "../data/output/sf_grid_mapquest_ghenhanced_sigma100_transitionDefault.csv");
+        //ksp.prepMapMatcher();  // score external API routes
+        //ksp.PointsToPath("../data/output/sf_grid_mapquest_gpx.csv", "../data/output/sf_grid_mapquest_ghenhanced_sigma100_transitionDefault.csv");
+        //ksp.PointsToPath("../data/output/sf_grid_google_gpx.csv", "../data/output/sf_grid_google_ghenhanced_sigma100_transitionDefault.csv");
 
         // NYC Grid
-        ksp = new runKSP("NYC", "grid");
         ksp.setDataSources();
         ksp.getGridValues();
         ksp.prepareGraphHopper();
-        //ksp.process_routes();  // get Graphhopper routes
-        ksp.prepMapMatcher();  // score external API routes
-        ksp.PointsToPath("../data/output/nyc_grid_mapquest_gpx.csv", "../data/output/nyc_grid_mapquest_ghenhanced_sigma100_transitionDefault.csv");
-        ksp.PointsToPath("../data/output/nyc_grid_google_gpx.csv", "../data/output/nyc_grid_google_ghenhanced_sigma100_transitionDefault.csv");
+        ksp.process_routes();  // get Graphhopper routes
+        //ksp.prepMapMatcher();  // score external API routes
+        //ksp.PointsToPath("../data/output/nyc_grid_mapquest_gpx.csv", "../data/output/nyc_grid_mapquest_ghenhanced_sigma100_transitionDefault.csv");
+        //ksp.PointsToPath("../data/output/nyc_grid_google_gpx.csv", "../data/output/nyc_grid_google_ghenhanced_sigma100_transitionDefault.csv");
     }
 }
