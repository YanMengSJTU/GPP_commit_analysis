diff --git a/core/itnana.sh b/core/itnana.sh
index 637a709f59..a63e37bef9 100755
--- a/core/itnana.sh
+++ b/core/itnana.sh
@@ -2,6 +2,17 @@ LOGIT=
 #LOGIT=:${HOME}/.m2/repository/org/slf4j/slf4j-log4j12/1.7.7/slf4j-log4j12-1.7.7.jar:${HOME}/.m2/repository/log4j/log4j/1.2.17/log4j-1.2.17.jar
 
 DATA=${HOME}/Development/geoserver-service-test/geoservertest/itn-sample-data/58096-SX9192-2c1.xml
+#START_ROAD="SIDWELL STREET"
+#END_ROAD="CHEEKE STREET"
 
-java -Xmx4096m -Xms2048m -XX:+UseParallelGC -XX:+UseParallelOldGC -cp ../tools/target/classes:target/classes:${HOME}/.m2/repository/net/java/dev/jsr-275/jsr-275/1.0-beta-2/jsr-275-1.0-beta-2.jar:${HOME}/.m2/repository/java3d/vecmath/1.3.2/vecmath-1.3.2.jar:${HOME}/.m2/repository/org/geotools/gt-opengis/12.1/gt-opengis-12.1.jar:${HOME}/.m2/repository/org/geotools/gt-epsg-hsql/12.1/gt-epsg-hsql-12.1.jar:${HOME}/.m2/repository/org/hsqldb/hsqldb/2.3.2/hsqldb-2.3.2.jar:${HOME}/.m2/repository/javax/media/jai_core/1.1.3/jai_core-1.1.3.jar:${HOME}/.m2/repository/org/geotools/gt-referencing/12.1/gt-referencing-12.1.jar:${HOME}/.m2/repository/org/geotools/gt-metadata/12.1/gt-metadata-12.1.jar:${HOME}/.m2/repository/org/slf4j/slf4j-api/1.7.7/slf4j-api-1.7.7.jar:${HOME}/.m2/repository/net/sf/trove4j/trove4j/3.0.3/trove4j-3.0.3.jar${LOGIT} com.graphhopper.tools.OsITNProblemRouteExtractor osmreader.osm=${DATA} reader.implementation=OSITN roadName="PRESTON STREET" linkRoadName="FROG STREET"
+#START_ROAD="HEAVITREE ROAD"
+#END_ROAD="DENMARK ROAD"
+
+#START_ROAD="BELGRAVE STREET"
+#END_ROAD="CHEEKE STREET"
+
+START_ROAD="BAMPFYLDE STREET"
+END_ROAD="CHEEKE STREET"
+
+java -Xmx4096m -Xms2048m -XX:+UseParallelGC -XX:+UseParallelOldGC -cp ../tools/target/classes:target/classes:${HOME}/.m2/repository/net/java/dev/jsr-275/jsr-275/1.0-beta-2/jsr-275-1.0-beta-2.jar:${HOME}/.m2/repository/java3d/vecmath/1.3.2/vecmath-1.3.2.jar:${HOME}/.m2/repository/org/geotools/gt-opengis/12.1/gt-opengis-12.1.jar:${HOME}/.m2/repository/org/geotools/gt-epsg-hsql/12.1/gt-epsg-hsql-12.1.jar:${HOME}/.m2/repository/org/hsqldb/hsqldb/2.3.2/hsqldb-2.3.2.jar:${HOME}/.m2/repository/javax/media/jai_core/1.1.3/jai_core-1.1.3.jar:${HOME}/.m2/repository/org/geotools/gt-referencing/12.1/gt-referencing-12.1.jar:${HOME}/.m2/repository/org/geotools/gt-metadata/12.1/gt-metadata-12.1.jar:${HOME}/.m2/repository/org/slf4j/slf4j-api/1.7.7/slf4j-api-1.7.7.jar:${HOME}/.m2/repository/net/sf/trove4j/trove4j/3.0.3/trove4j-3.0.3.jar${LOGIT} com.graphhopper.tools.OsITNProblemRouteExtractor osmreader.osm=${DATA} reader.implementation=OSITN roadName="${START_ROAD}" linkRoadName="${END_ROAD}"
 
diff --git a/core/itngen.sh b/core/itngen.sh
index 25e8a00486..495f895dce 100755
--- a/core/itngen.sh
+++ b/core/itngen.sh
@@ -2,12 +2,12 @@ LOGIT=
 #LOGIT=:${HOME}/.m2/repository/org/slf4j/slf4j-log4j12/1.7.7/slf4j-log4j12-1.7.7.jar:${HOME}/.m2/repository/log4j/log4j/1.2.17/log4j-1.2.17.jar
 
 # Actual ITN Data
-ITNDATA=${HOME}/Development/OSMMITN/data
-GRAPHOUTPUTDIR=${HOME}/Documents/graphhopper/core/osmitn-gh
+#ITNDATA=${HOME}/Development/OSMMITN/data
+#GRAPHOUTPUTDIR=${HOME}/Documents/graphhopper/core/osmitn-gh
 
 # Sample Data
-#ITNDATA=${HOME}/Development/geoserver-service-test/geoservertest/itn-sample-data/58096-SX9192-2c1.gz
-#GRAPHOUTPUTDIR=${HOME}/Documents/graphhopper/core/58096-SX9192-2c1-gh
+ITNDATA=${HOME}/Development/geoserver-service-test/geoservertest/itn-sample-data/58096-SX9192-2c1.gz
+GRAPHOUTPUTDIR=${HOME}/Documents/graphhopper/core/58096-SX9192-2c1-gh
 
 #ITNDATA=${HOME}/Development/graphhopper2/graphhopper/core/os-itn-lake-road-spicer-street.xml
 #GRAPHOUTPUTDIR=${HOME}/Documents/graphhopper/core/os-itn-lake-road-spicer-street-gh
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/OSITNElement.java b/core/src/main/java/com/graphhopper/reader/osgb/OSITNElement.java
index bdad8ddfd9..b85b3f17ec 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/OSITNElement.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/OSITNElement.java
@@ -277,6 +277,7 @@ private int handleInstructionEnvironmentalQualifier(XMLStreamReader parser) thro
             // setTag(TAG_KEY_RESTRICTION, elementText);
             break;
         default:
+            // Handles Mandatory Turn and No Turn
             setTag(TAG_KEY_TYPE, TAG_VALUE_TYPE_RESTRICTION);
             setTag(TAG_KEY_RESTRICTION, elementText);
             break;
@@ -295,21 +296,7 @@ private int handleTypeVehicleQualifier(XMLStreamReader parser) throws XMLStreamE
         // System.out.println("handleTypeVehicleQualifier " + elementText +
         // " exceptFor " + exceptFor);
         setTag(elementText, exceptFor.toString());
-        int event;
-        // switch (elementText) {
-        // case "Buses" :
-        // case "Coaches" :
-        // case "Mopeds" :
-        // case "Motor Cycles" :
-        // case "HGV's" :
-        // case "LGV's" :
-        // case "Towed Caravans" :
-        // case "Motor Vehicles" :
-        // case "Cycles" :
-        // case "Tracked Vehicles" :
-        // break;
-        // }
-        event = parser.getEventType();
+        int event = parser.getEventType();
         return event;
     }
 
@@ -337,26 +324,7 @@ private int handleUseVehicleQualifier(XMLStreamReader parser) throws XMLStreamEx
         // System.out.println("handleUseVehicleQualifier " + elementText +
         // " exceptFor " + exceptFor);
         setTag(elementText, exceptFor.toString());
-        int event;
-        event = parser.getEventType(); // type and use are effectively the same
-                                       // thing
-        // return handleTypeVehicleQualifier(parser);
-        // int event;
-        // switch (elementText) {
-        // case "Taxi" :
-        // case "School Bus" :
-        // case "Patron" :
-        // case "Access" :
-        // case "Resident" :
-        // case "Emergency Vehicle" :
-        // case "Emergency Access" :
-        // case "Public Transport" :
-        // case "Authorised Vehicle" :
-        // case "Local Bus" :
-        // case "Escorted Traffic" :
-        // break;
-        // }
-        // event = parser.getEventType();
+        int event = parser.getEventType(); // type and use are effectively the same thing
         return event;
     }
 
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/OSITNWay.java b/core/src/main/java/com/graphhopper/reader/osgb/OSITNWay.java
index 22e6954527..3fe390947f 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/OSITNWay.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/OSITNWay.java
@@ -22,7 +22,6 @@
 import gnu.trove.map.TDoubleLongMap;
 import gnu.trove.map.TDoubleObjectMap;
 import gnu.trove.map.TLongObjectMap;
-import gnu.trove.map.hash.TObjectLongHashMap;
 
 import java.util.ArrayList;
 import java.util.Arrays;
@@ -82,11 +81,13 @@ public String toString() {
 
     @Override
     protected void parseCoords(String lineDefinition) {
-        String[] lineSegments = lineDefinition.split(" ");
+        // Split on any number of whitespace characters
+        // String[] lineSegments = lineDefinition.trim().replace('\n', ' ').replace('\t', ' ').split(" ");
+        String[] lineSegments = lineDefinition.split("\\s+");
         wayCoords = Arrays.copyOfRange(lineSegments, 1, lineSegments.length - 1);
         startCoord = lineSegments[0];
         endCoord = lineSegments[lineSegments.length-1];
-        logger.info(toString() + " " + ((wayCoords.length == 0) ? "0" : wayCoords[0]));
+        logger.info("startCoord [" + startCoord + "] endCoord [" + endCoord + "] num elements = "+ lineSegments.length);
     }
 
     @Override
@@ -177,7 +178,7 @@ protected void addDirectedLink(String nodeId, String orientation) {
 
             logger.info("Node " + getId() + " coords: " + wayCoord + " tags: ");
             for (String tagKey : wayNode.getTags().keySet()) {
-                logger.info("\t " + tagKey + " : " + wayNode.getTag(tagKey));
+                logger.info("\t " + tagKey + " : " + wayNode.getTag(tagKey));   
             }
 
             wayNodes.add(wayNode);
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/OsItnReader.java b/core/src/main/java/com/graphhopper/reader/osgb/OsItnReader.java
index d06b2d4dfc..4d05916f43 100755
--- a/core/src/main/java/com/graphhopper/reader/osgb/OsItnReader.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/OsItnReader.java
@@ -715,6 +715,7 @@ void processWay(OSITNWay way, List<OSITNNode> wayNodes) {
 
         // Check if we are prohibited from ever traversing this way
         if (getProhibitedWayIds().remove(wayOsmId)) {
+            System.out.println("DONT PROCESS WAY " + wayOsmId);
             return;
         }
 
@@ -939,7 +940,7 @@ void processWay(OSITNWay way, List<OSITNNode> wayNodes) {
                 noEntryCreatedEdges.addAll(newBarriers);
                 // Update the orientation of our little one way
                 for (EdgeIteratorState edgeIteratorState : newBarriers) {
-                    boolean forwards = endDirection.equals("true");
+                    boolean forwards = endDirection.equals("-1");
                     long flags = encodingManager.flagsDefault(forwards, !forwards);
                     // Set the flags on our new edge.
                     edgeIteratorState.setFlags(flags);
diff --git a/core/src/main/java/com/graphhopper/routing/util/BusFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/BusFlagEncoder.java
new file mode 100644
index 0000000000..2372d544d0
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/routing/util/BusFlagEncoder.java
@@ -0,0 +1,367 @@
+package com.graphhopper.routing.util;
+
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Map;
+import java.util.Set;
+
+import com.graphhopper.reader.Relation;
+import com.graphhopper.reader.Way;
+import com.graphhopper.util.Helper;
+
+public class BusFlagEncoder extends AbstractFlagEncoder
+{
+    protected final Map<String, Integer> trackTypeSpeedMap = new HashMap<String, Integer>();
+    protected final Set<String> badSurfaceSpeedMap = new HashSet<String>();
+    /**
+     * A map which associates string to speed. Get some impression:
+     * http://www.itoworld.com/map/124#fullscreen
+     * http://wiki.openstreetmap.org/wiki/OSM_tags_for_routing/Maxspeed
+     */
+    protected final Map<String, Integer> defaultSpeedMap = new HashMap<String, Integer>();
+
+    /**
+     * Should be only instantied via EncodingManager
+     */
+    public BusFlagEncoder()
+    {
+        this(5, 5, 0);
+    }
+
+    public BusFlagEncoder( String propertiesStr )
+    {
+        this((int) parseLong(propertiesStr, "speedBits", 5),
+                parseDouble(propertiesStr, "speedFactor", 5),
+                parseBoolean(propertiesStr, "turnCosts", false) ? 3 : 0);
+    }
+
+    public BusFlagEncoder( int speedBits, double speedFactor, int maxTurnCosts )
+    {
+        super(speedBits, speedFactor, maxTurnCosts);
+        restrictions.addAll(Arrays.asList("motorcar", "motor_vehicle", "vehicle", "access"));
+        
+        restrictedValues.add("private");
+        restrictedValues.add("agricultural");
+        restrictedValues.add("forestry");
+        restrictedValues.add("no");
+        restrictedValues.add("restricted");
+        restrictedValues.add("delivery");
+
+        intendedValues.add("yes");
+        intendedValues.add("permissive");
+
+        potentialBarriers.add("gate");
+        potentialBarriers.add("lift_gate");
+        potentialBarriers.add("kissing_gate");
+        potentialBarriers.add("swing_gate");
+
+        absoluteBarriers.add("bollard");
+        absoluteBarriers.add("stile");
+        absoluteBarriers.add("turnstile");
+        absoluteBarriers.add("cycle_barrier");
+        absoluteBarriers.add("motorcycle_barrier");
+        absoluteBarriers.add("block");
+
+        trackTypeSpeedMap.put("grade1", 20); // paved
+        trackTypeSpeedMap.put("grade2", 15); // now unpaved - gravel mixed with ...
+        trackTypeSpeedMap.put("grade3", 10); // ... hard and soft materials
+        trackTypeSpeedMap.put("grade4", 5); // ... some hard or compressed materials
+        trackTypeSpeedMap.put("grade5", 5); // ... no hard materials. soil/sand/grass
+
+        badSurfaceSpeedMap.add("cobblestone");
+        badSurfaceSpeedMap.add("grass_paver");
+        badSurfaceSpeedMap.add("gravel");
+        badSurfaceSpeedMap.add("sand");
+        badSurfaceSpeedMap.add("paving_stones");
+        badSurfaceSpeedMap.add("dirt");
+        badSurfaceSpeedMap.add("ground");
+        badSurfaceSpeedMap.add("grass");
+
+        // autobahn
+        defaultSpeedMap.put("motorway", 100);
+        defaultSpeedMap.put("motorway_link", 70);
+        defaultSpeedMap.put("motorroad", 90);
+        // bundesstraße
+        defaultSpeedMap.put("trunk", 70);
+        defaultSpeedMap.put("trunk_link", 65);
+        // linking bigger town
+        defaultSpeedMap.put("primary", 65);
+        defaultSpeedMap.put("primary_link", 60);
+        // linking towns + villages
+        defaultSpeedMap.put("secondary", 60);
+        defaultSpeedMap.put("secondary_link", 50);
+        // streets without middle line separation
+        defaultSpeedMap.put("tertiary", 50);
+        defaultSpeedMap.put("tertiary_link", 40);
+        defaultSpeedMap.put("unclassified", 30);
+        defaultSpeedMap.put("residential", 30);
+        // spielstraße
+        defaultSpeedMap.put("living_street", 5);
+        defaultSpeedMap.put("service", 20);
+        // unknown road
+        defaultSpeedMap.put("road", 20);
+        // forestry stuff
+        defaultSpeedMap.put("track", 15);
+        
+        defaultSpeedMap.put("Motorway", 100);
+        defaultSpeedMap.put("A Road", 55);
+        defaultSpeedMap.put("B Road", 35);
+        defaultSpeedMap.put("Minor Road", 35);
+        defaultSpeedMap.put("Local Street", 35);
+        defaultSpeedMap.put("Alley", 35);
+        defaultSpeedMap.put("A Road-Single Carriageway", 55);
+        defaultSpeedMap.put("B Road", 35);
+        defaultSpeedMap.put("Minor Road", 35);
+        defaultSpeedMap.put("Local Street", 35);
+        defaultSpeedMap.put("Alley", 35);
+        defaultSpeedMap.put("Motorway", 100);
+        defaultSpeedMap.put("A Road", 55);
+        defaultSpeedMap.put("B Road", 35);
+        defaultSpeedMap.put("Minor Road", 35);
+        defaultSpeedMap.put("Local Street", 35);
+        defaultSpeedMap.put("Alley", 35);
+        defaultSpeedMap.put("A Road-Dual Carriageway", 55);
+        defaultSpeedMap.put("B Road", 35);
+        defaultSpeedMap.put("Minor Road", 35);
+        defaultSpeedMap.put("Local Street", 35);
+        defaultSpeedMap.put("Alley", 35);
+        defaultSpeedMap.put("Motorway-Slip Road", 100);
+        defaultSpeedMap.put("A Road-Slip Road", 55);
+        defaultSpeedMap.put("B Road", 35);
+        defaultSpeedMap.put("Minor Road", 35);
+        defaultSpeedMap.put("Local Street", 35);
+        defaultSpeedMap.put("Alley", 35);
+        defaultSpeedMap.put("Motorway-Roundabout", 100);
+        defaultSpeedMap.put("A Road-Roundabout", 55);
+        defaultSpeedMap.put("B Road-Roundabout", 35);
+        defaultSpeedMap.put("Minor Road-Roundabout", 35);
+        defaultSpeedMap.put("Local Street-Roundabout", 35);
+        
+        // Should we be including these in car flags?
+        defaultSpeedMap.put("Pedestrianised Street", 0);
+        defaultSpeedMap.put("Private Road - Restricted Access", 35);
+        defaultSpeedMap.put("Private Road - Publicly Accessible", 35);
+        defaultSpeedMap.put("Alley", 0);
+        
+        // osgb:type
+//        vehicleQualifierTypeExclusions.add("Buses");
+        vehicleQualifierTypeExclusions.add("Coaches");
+        vehicleQualifierTypeExclusions.add("Mopeds");
+        vehicleQualifierTypeExclusions.add("Motor Cycles");
+        vehicleQualifierTypeExclusions.add("HGV's");
+        vehicleQualifierTypeExclusions.add("LGV's");
+        vehicleQualifierTypeExclusions.add("Towed Caravans");
+        vehicleQualifierTypeExclusions.add("Cycles");
+        vehicleQualifierTypeExclusions.add("Tracked Vehicles");
+        // osgb:use
+        vehicleQualifierTypeExclusions.add("Taxi");
+        vehicleQualifierTypeExclusions.add("Taxis"); // Added from analysing the actual data
+        vehicleQualifierTypeExclusions.add("School Bus");
+        vehicleQualifierTypeExclusions.add("Patron");
+        vehicleQualifierTypeExclusions.add("Access");
+        vehicleQualifierTypeExclusions.add("Resident");
+        vehicleQualifierTypeExclusions.add("Emergency Vehicle");
+//        vehicleQualifierTypeExclusions.add("Public Transport");
+        vehicleQualifierTypeExclusions.add("Authorised Vehicle");
+//        vehicleQualifierTypeExclusions.add("Local Bus");
+//        vehicleQualifierTypeExclusions.add("Local Buses"); // Added from analysing the actual data
+        vehicleQualifierTypeExclusions.add("Escorted Traffic");
+        vehicleQualifierTypeExclusions.add("Loading And Unloading"); // Added from analysing the actual data
+        
+
+        
+        vehicleQualifierTypeInclusions.add("Motor Vehicles");
+        vehicleQualifierTypeInclusions.add("All Vehicles");
+        // temp inclusions for testing
+        vehicleQualifierTypeInclusions.add("Buses");
+
+        vehicleQualifierTypeInclusions.add("Local Bus");
+        vehicleQualifierTypeInclusions.add("Local Buses");
+        vehicleQualifierTypeInclusions.add("Public Transport");
+
+    }
+
+    /**
+     * Define the place of the speedBits in the edge flags for car.
+     */
+    @Override
+    public int defineWayBits( int index, int shift )
+    {
+        // first two bits are reserved for route handling in superclass
+        shift = super.defineWayBits(index, shift);
+        speedEncoder = new EncodedDoubleValue("Speed", shift, speedBits, speedFactor, defaultSpeedMap.get("secondary"), defaultSpeedMap.get("motorway"));
+        return shift + speedEncoder.getBits();
+    }
+
+    protected double getSpeed( Way way )
+    {
+        String highwayValue = way.getTag("highway");
+        Integer speed = defaultSpeedMap.get(highwayValue);
+        if (speed == null)
+            throw new IllegalStateException(toString() + ", no speed found for:" + highwayValue);
+
+        if (highwayValue.equals("track"))
+        {
+            String tt = way.getTag("tracktype");
+            if (!Helper.isEmpty(tt))
+            {
+                Integer tInt = trackTypeSpeedMap.get(tt);
+                if (tInt != null)
+                    speed = tInt;
+            }
+        }
+
+        return speed;
+    }
+
+    @Override
+    public long acceptWay( Way way )
+    {
+        String highwayValue = way.getTag("highway");
+        if (highwayValue == null)
+        {
+            if (way.hasTag("route", ferries))
+            {
+                String motorcarTag = way.getTag("motorcar");
+                if (motorcarTag == null)
+                    motorcarTag = way.getTag("motor_vehicle");
+
+                if (motorcarTag == null && !way.hasTag("foot") && !way.hasTag("bicycle") || "yes".equals(motorcarTag))
+                    return acceptBit | ferryBit;
+            }
+            return 0;
+        }
+
+        if ("track".equals(highwayValue))
+        {
+            String tt = way.getTag("tracktype");
+            if (tt != null && !tt.equals("grade1"))
+                return 0;
+        }
+
+        if (!defaultSpeedMap.containsKey(highwayValue))
+            return 0;
+
+        if (way.hasTag("impassable", "yes") || way.hasTag("status", "impassable"))
+            return 0;
+
+        // do not drive street cars into fords
+        boolean carsAllowed = way.hasTag(restrictions, intendedValues);
+        if (isBlockFords() && ("ford".equals(highwayValue) || way.hasTag("ford")) && !carsAllowed)
+            return 0;
+
+        // check access restrictions
+        if (way.hasTag(restrictions, restrictedValues) && !carsAllowed)
+            return 0;
+
+        // do not drive cars over railways (sometimes incorrectly mapped!)
+        if (way.hasTag("railway") && !way.hasTag("railway", acceptedRailways))
+            return 0;        
+        
+        return acceptBit;
+    }
+
+//    @Override
+//    public long handleRelationTags( Relation relation, long oldRelationFlags )
+//    {
+//        long flags = oldRelationFlags;
+//        
+//        // check access limited and access prohibited restrictions
+//        System.out.println("acceptWay for id " + relation.getId());
+//        if (relation.hasTag(OSITNElement.TAG_KEY_TYPE, OSITNElement.TAG_VALUE_TYPE_ACCESS_PROHIBITED)||relation.hasTag(OSITNElement.TAG_KEY_TYPE, OSITNElement.TAG_VALUE_TYPE_ACCESS_LIMITED) ) {
+//            System.out.println("OUR WAY HAS PROHIBITED OR LIMITED ACCESS");
+//            if (isVehicleQualifierTypeExcluded(relation) || isVehicleQualifierTypeIncluded(relation)) {
+//                System.out.println("WE ARE BLOCKING THIS ROAD....");
+//                flags = this.setBool(flags, K_FORWARD, false);
+//                flags = this.setBool(flags, K_BACKWARD, false);      
+//            }
+//        }
+//        return flags;
+//    }
+
+    @Override
+    public long handleWayTags( Way way, long allowed, long relationFlags )
+    {
+        if (!isAccept(allowed))
+            return 0;
+
+        long encoded;
+        if (!isFerry(allowed))
+        {
+            // get assumed speed from highway type
+            double speed = getSpeed(way);
+            speed = applyMaxSpeed(way, speed, true);
+
+            // limit speed to max 30 km/h if bad surface
+            if (speed > 30 && way.hasTag("surface", badSurfaceSpeedMap))
+                speed = 30;
+
+            encoded = setSpeed(0, speed);
+
+            boolean isRoundabout = way.hasTag("junction", "roundabout");
+            if (isRoundabout)
+                encoded = setBool(encoded, K_ROUNDABOUT, true);
+
+            if (way.hasTag("oneway", oneways) || isRoundabout)
+            {
+                if (way.hasTag("oneway", "-1"))
+                    encoded |= backwardBit;
+                else
+                    encoded |= forwardBit;
+            } else
+                encoded |= directionBitMask;
+            
+        } else
+        {
+            encoded = handleFerryTags(way, defaultSpeedMap.get("living_street"), defaultSpeedMap.get("service"), defaultSpeedMap.get("residential"));
+            encoded |= directionBitMask;
+        }
+
+        return encoded;
+    }
+
+    public String getWayInfo(Way way )
+    {
+        String str = "";
+        String highwayValue = way.getTag("highway");
+        // for now only motorway links
+        if ("motorway_link".equals(highwayValue))
+        {
+            String destination = way.getTag("destination");
+            if (!Helper.isEmpty(destination))
+            {
+                int counter = 0;
+                for (String d : destination.split(";"))
+                {
+                    if (d.trim().isEmpty())
+                        continue;
+
+                    if (counter > 0)
+                        str += ", ";
+
+                    str += d.trim();
+                    counter++;
+                }
+            }
+        }
+        if (str.isEmpty())
+            return str;
+        // I18N
+        if (str.contains(","))
+            return "destinations: " + str;
+        else
+            return "destination: " + str;
+    }
+    
+    @Override
+    public String toString()
+    {
+        return "bus";
+    }
+
+    @Override
+    public long handleRelationTags(Relation relation, long oldRelationFlags) {
+        return oldRelationFlags;
+    }
+}
diff --git a/core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
index 33fea2d0bc..c59c421e1c 100644
--- a/core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
@@ -200,6 +200,7 @@ public CarFlagEncoder( int speedBits, double speedFactor, int maxTurnCosts )
         
         vehicleQualifierTypeInclusions.add("Motor Vehicles");
         vehicleQualifierTypeInclusions.add("All Vehicles");
+
     }
 
     /**
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/AbstractOsItnReaderTest.java b/core/src/test/java/com/graphhopper/reader/osgb/AbstractOsItnReaderTest.java
index b63b953531..c24a072320 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/AbstractOsItnReaderTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/AbstractOsItnReaderTest.java
@@ -10,7 +10,10 @@
 
 import org.junit.Before;
 
+import com.graphhopper.routing.util.AbstractFlagEncoder;
 import com.graphhopper.routing.util.BikeFlagEncoder;
+import com.graphhopper.routing.util.BusFlagEncoder;
+import com.graphhopper.routing.util.CarFlagEncoder;
 import com.graphhopper.routing.util.DefaultEdgeFilter;
 import com.graphhopper.routing.util.EdgeFilter;
 import com.graphhopper.routing.util.EncodingManager;
@@ -28,7 +31,8 @@
 
     protected EncodingManager encodingManager;// = new
     // EncodingManager("CAR");//"car:com.graphhopper.routing.util.RelationCarFlagEncoder");
-    protected RelationCarFlagEncoder carEncoder;// = (RelationCarFlagEncoder)
+    protected CarFlagEncoder carEncoder;// = (RelationCarFlagEncoder)
+    protected BusFlagEncoder busEncoder;// = (RelationCarFlagEncoder)
       // encodingManager
 // .getEncoder("CAR");
     protected EdgeFilter carOutEdges;// = new DefaultEdgeFilter(
@@ -63,21 +67,36 @@
     @Before
     public void initEncoding() {
         if (turnCosts) {
-            carEncoder = new RelationCarFlagEncoder(5, 5, 3);
+            carEncoder = new CarFlagEncoder(5, 5, 3);
+            busEncoder = new BusFlagEncoder(5, 5, 3);
+//            carEncoder = new RelationCarFlagEncoder(5, 5, 3);
             bikeEncoder = new BikeFlagEncoder(4, 2, 3);
         } else {
-            carEncoder = new RelationCarFlagEncoder();
+            carEncoder = new CarFlagEncoder();
+            busEncoder = new BusFlagEncoder();
+//            carEncoder = new RelationCarFlagEncoder();
             bikeEncoder = new BikeFlagEncoder();
         }
 
         footEncoder = new FootFlagEncoder();
         carOutEdges = new DefaultEdgeFilter(carEncoder, false, true);
         carInEdges  = new DefaultEdgeFilter(carEncoder, true, false);
-        encodingManager = new EncodingManager(footEncoder, carEncoder, bikeEncoder);
+//        encodingManager = new EncodingManager(footEncoder, carEncoder, bikeEncoder);
+        encodingManager = createEncodingManager();
+//        encodingManager = new EncodingManager("car|turnCosts=true");
+    }
+    
+    /**
+     * So we can create a specific encoding manager in subclasses
+     * @return
+     */
+    protected EncodingManager createEncodingManager() {
+        return new EncodingManager(footEncoder, carEncoder, bikeEncoder);
     }
     
     protected OsItnReader readGraphFile(GraphHopperStorage graph, File file) throws IOException {
         OsItnReader osItnReader = new OsItnReader(graph);
+        System.out.println("Read " + file.getAbsolutePath());
         osItnReader.setOSMFile(file);
         osItnReader.setEncodingManager(encodingManager);
         osItnReader.readGraph();
@@ -120,9 +139,27 @@ protected int getEdge(int from, int to) {
         return EdgeIterator.NO_EDGE;
     }
     protected void evaluateRouting(final EdgeIterator iter, final int node, final boolean forward, final boolean backward, final boolean finished) {
+        evaluateRouting(iter, node, forward, backward, finished, carEncoder);
+    }
+    protected void evaluateRouting(final EdgeIterator iter, final int node, final boolean forward, final boolean backward, final boolean finished, AbstractFlagEncoder flagEncoder) {
         assertEquals("Incorrect adjacent node", node, iter.getAdjNode());
-        assertEquals("Incorrect forward instructions", forward, carEncoder.isBool(iter.getFlags(), FlagEncoder.K_FORWARD));
-        assertEquals("Incorrect backward instructions", backward, carEncoder.isBool(iter.getFlags(), FlagEncoder.K_BACKWARD));
+        assertEquals("Incorrect forward instructions", forward, flagEncoder.isBool(iter.getFlags(), FlagEncoder.K_FORWARD));
+        assertEquals("Incorrect backward instructions", backward, flagEncoder.isBool(iter.getFlags(), FlagEncoder.K_BACKWARD));
         assertEquals(!finished, iter.next());
     }
+    protected void printNodes(EdgeExplorer outExplorer, int numNodes) {
+        for (int i = 0; i < numNodes; i++) {
+//            logger.info("Node " + i + " " + count(outExplorer.setBaseNode(i)));
+            System.out.println("Node " + i + " " + count(outExplorer.setBaseNode(i)));
+        }
+
+        EdgeIterator iter = null; 
+        for (int i = 0; i < numNodes; i++) {
+            iter = outExplorer.setBaseNode(i);
+            while (iter.next()) {
+//                logger.info(i+" Adj node is " + iter.getAdjNode());
+                System.out.println(i+" Adj node is " + iter.getAdjNode());
+            }
+        }
+    }
 }
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/BampfyldeStreetCheekeStreetNoEntryTest.java b/core/src/test/java/com/graphhopper/reader/osgb/BampfyldeStreetCheekeStreetNoEntryTest.java
new file mode 100644
index 0000000000..3bd57cb5fd
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/BampfyldeStreetCheekeStreetNoEntryTest.java
@@ -0,0 +1,210 @@
+package com.graphhopper.reader.osgb;
+
+import static com.graphhopper.util.GHUtility.count;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+
+import java.io.File;
+import java.io.IOException;
+
+import org.junit.Test;
+
+import com.graphhopper.routing.util.DefaultEdgeFilter;
+import com.graphhopper.storage.GraphHopperStorage;
+import com.graphhopper.util.EdgeExplorer;
+import com.graphhopper.util.EdgeIterator;
+import com.graphhopper.util.GHUtility;
+
+public class BampfyldeStreetCheekeStreetNoEntryTest extends AbstractOsItnReaderTest {
+    
+    // 6216 292811.000,92750.000 SE
+    double node0Longitude = -3.51994881876;
+    double node0Latitude = 50.7244536431;
+
+    // 6127 292764.000,92812.000 NE
+    double node1Longitude = -3.52063248078;
+    double node1Latitude = 50.7250023098;
+
+    // 1253 292666.000,92818.000 NW
+    double nodeNWLongitude = -3.52202212301;
+    double nodeNWLatitude = 50.7250381316;
+
+    // 1264 292734.428,92739.063 SW
+    double nodeSWLongitude = -3.5210300491;
+    double nodeSWLatitude = 50.7243411788;
+
+    // 9154 292749.000,92779.000 CENTER
+    double node4Longitude = -3.52083530674;
+    double node4Latitude = 50.724702885;
+
+    
+    @Test
+    public void testNoEntryExceptForBusesTrue() throws IOException {
+        final boolean turnRestrictionsImport = true;
+        final boolean is3D = false;
+        final GraphHopperStorage graph = configureStorage(turnRestrictionsImport, is3D);
+
+        final File file = new File("./src/test/resources/com/graphhopper/reader/os-itn-bampfylde-street-cheeke-street.xml");
+        readGraphFile(graph, file);
+
+        // ******************* START OF Print
+        // ***************************************
+        final EdgeExplorer explorer = graph.createEdgeExplorer(carOutEdges);
+
+        printNodes(explorer, 7);
+        // ***********************************************************************
+
+        checkNoEntryNetwork(graph, explorer);
+    }
+    
+    protected void checkNoEntryNetwork(GraphHopperStorage graph, EdgeExplorer explorer) {
+        // Assert that our graph has 7 nodes
+        assertEquals(7, graph.getNodes());
+
+        // Assert that there are three links/roads/edges that can be seen from
+        // the base node;
+        assertEquals(3, count(explorer.setBaseNode(0)));
+
+        GHUtility.printInfo(graph, 0, 20, carOutEdges);
+        // Assert that when the explorer is on node 1 it can travel one edges
+        assertEquals(1, count(explorer.setBaseNode(1)));
+
+        // Assert that when the explorer is positioned on base 2 it can only
+        // travel one edge
+        assertEquals(1, count(explorer.setBaseNode(2)));
+
+        // Assert that when the explorer is positioned on node 3 it can
+        // travel 2 edges
+        assertEquals(2, count(explorer.setBaseNode(3)));
+
+        // Assert that when the explorer is positioned on node 4 it can only
+        // travel 1 edge
+        assertEquals(2, count(explorer.setBaseNode(4)));
+
+        // Assert that when the explorer is positioned on node 5 it can only
+        // travel 1 edge
+        assertEquals(1, count(explorer.setBaseNode(5)));
+
+        // Assert that when the explorer is positioned on node 6 it can only
+        // travel 1 edge
+        assertEquals(1, count(explorer.setBaseNode(6)));
+
+        carAllExplorer = graph.createEdgeExplorer(new DefaultEdgeFilter(carEncoder, true, true));
+        // Starting at node zero I should be able to travel back and forth to
+        // four nodes?
+        EdgeIterator iter = carAllExplorer.setBaseNode(0);
+        assertTrue(iter.next());
+        evaluateRouting(iter, 6, true, true, false);
+        evaluateRouting(iter, 5, true, true, false);
+        evaluateRouting(iter, 4, false, true, false);
+        evaluateRouting(iter, 1, true, true, true);
+
+        // Starting at node 1
+        iter = carAllExplorer.setBaseNode(1);
+        assertTrue(iter.next());
+        // I should be able to get to node 0 in a forward and backward direction
+        // and have exhausted all the edges
+        evaluateRouting(iter, 0, true, true, true);
+
+        // Starting at node 2
+        iter = carAllExplorer.setBaseNode(2);
+        assertTrue(iter.next());
+        // I should be able to travel back from node 3 but not to it
+        // I should be able to travel to and from node 1 and have exhausted all
+        // the edges
+        evaluateRouting(iter, 3, true, true, true);
+
+        // Starting at node 3
+        iter = carAllExplorer.setBaseNode(3);
+        assertTrue(iter.next());
+        // I should not be able to travel to node 1 in a forward direction but
+        // in backward direction
+        evaluateRouting(iter, 4, true, true, false);
+        // I should be able to travel to node 2 in forward direction but not
+        // backward and have exhausted all the edges
+        evaluateRouting(iter, 2, true, true, true);
+
+        // Starting at node 4
+        iter = carAllExplorer.setBaseNode(4);
+        assertTrue(iter.next());
+        // I should be able to travel to node 0 back and forth and have
+        // exhausted all the edges
+        evaluateRouting(iter, 0, true, false, false);
+        evaluateRouting(iter, 3, true, true, true);
+
+        // Given Node 5
+        iter = carAllExplorer.setBaseNode(5);
+        assertTrue(iter.next());
+        // I should be able to travel to node 0 back and forth and have
+        // exhausted all the edges
+        evaluateRouting(iter, 0, true, true, true);
+
+        // Given Node 6
+        iter = carAllExplorer.setBaseNode(6);
+        assertTrue(iter.next());
+        // I should be able to travel to node 0 back and forth and have
+        // exhausted all the edges
+        evaluateRouting(iter, 0, true, true, true);
+
+    }
+    protected void checkNonNoEntryNetwork(GraphHopperStorage graph, EdgeExplorer explorer) {
+        // Assert that our graph has 7 nodes
+        assertEquals(5, graph.getNodes());
+
+        // Assert that there are four links/roads/edges that can be seen from
+        // the base node;
+        assertEquals(4, count(explorer.setBaseNode(0)));
+
+        GHUtility.printInfo(graph, 0, 20, carOutEdges);
+        // Assert that when the explorer is on node 1 it can travel one edges
+        assertEquals(1, count(explorer.setBaseNode(1)));
+
+        // Assert that when the explorer is positioned on base 2 it can only
+        // travel one edge
+        assertEquals(1, count(explorer.setBaseNode(2)));
+
+        // Assert that when the explorer is positioned on node 3 it can
+        // travel 1 edges
+        assertEquals(1, count(explorer.setBaseNode(3)));
+
+        // Assert that when the explorer is positioned on node 4 it can only
+        // travel 1 edge
+        assertEquals(1, count(explorer.setBaseNode(4)));
+
+        carAllExplorer = graph.createEdgeExplorer(new DefaultEdgeFilter(carEncoder, true, true));
+        // Starting at node zero I should be able to travel back and forth to
+        // four nodes?
+        EdgeIterator iter = carAllExplorer.setBaseNode(0);
+        assertTrue(iter.next());
+        evaluateRouting(iter, 4, true, true, false);
+        evaluateRouting(iter, 3, true, true, false);
+        evaluateRouting(iter, 2, true, true, false);
+        evaluateRouting(iter, 1, true, true, true);
+
+        // Starting at node 1
+        iter = carAllExplorer.setBaseNode(1);
+        assertTrue(iter.next());
+        // I should be able to get to node 0 in a forward and backward direction
+        // and have exhausted all the edges
+        evaluateRouting(iter, 0, true, true, true);
+
+        // Starting at node 2
+        iter = carAllExplorer.setBaseNode(2);
+        assertTrue(iter.next());
+        // I should be able to travel back from node 3 but not to it
+        // I should be able to travel to and from node 1 and have exhausted all
+        // the edges
+        evaluateRouting(iter, 0, true, true, true);
+
+        // Starting at node 3
+        iter = carAllExplorer.setBaseNode(3);
+        assertTrue(iter.next());
+        evaluateRouting(iter, 0, true, true, true);
+
+        // Starting at node 4
+        iter = carAllExplorer.setBaseNode(4);
+        assertTrue(iter.next());
+        evaluateRouting(iter, 0, true, true, true);
+    }
+
+}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/BusFlagEncoderTest.java b/core/src/test/java/com/graphhopper/reader/osgb/BusFlagEncoderTest.java
new file mode 100644
index 0000000000..5f866fd1ec
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/BusFlagEncoderTest.java
@@ -0,0 +1,109 @@
+package com.graphhopper.reader.osgb;
+
+import static com.graphhopper.util.GHUtility.count;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+
+import java.io.File;
+import java.io.IOException;
+
+import org.junit.Test;
+
+import com.graphhopper.routing.util.DefaultEdgeFilter;
+import com.graphhopper.routing.util.EdgeFilter;
+import com.graphhopper.routing.util.EncodingManager;
+import com.graphhopper.storage.GraphHopperStorage;
+import com.graphhopper.util.EdgeExplorer;
+import com.graphhopper.util.EdgeIterator;
+import com.graphhopper.util.GHUtility;
+
+public class BusFlagEncoderTest extends AbstractOsItnReaderTest{
+
+    protected EncodingManager createEncodingManager() {
+        return new EncodingManager(busEncoder);
+    }
+    
+    
+    @Test
+    public void testNoEntryExceptForBusesTrue() throws IOException {
+        final boolean turnRestrictionsImport = true;
+        final boolean is3D = false;
+        final GraphHopperStorage graph = configureStorage(turnRestrictionsImport, is3D);
+
+        final File file = new File("./src/test/resources/com/graphhopper/reader/os-itn-noentry-except-for-buses-true.xml");
+        readGraphFile(graph, file);
+
+        // ******************* START OF Print
+        // ***************************************
+        EdgeFilter busOutEdges = new DefaultEdgeFilter(busEncoder, false, true);
+        
+        final EdgeExplorer explorer = graph.createEdgeExplorer(busOutEdges);
+
+        printNodes(explorer, 7);
+        // ***********************************************************************
+
+        checkNonNoEntryNetwork(graph, explorer);
+    }
+    
+    private void checkNonNoEntryNetwork(GraphHopperStorage graph, EdgeExplorer explorer) {
+        // Assert that our graph has 7 nodes
+        assertEquals(5, graph.getNodes());
+
+        // Assert that there are four links/roads/edges that can be seen from
+        // the base node;
+        assertEquals(4, count(explorer.setBaseNode(0)));
+
+        EdgeFilter busOutEdges = new DefaultEdgeFilter(busEncoder, false, true);
+
+        GHUtility.printInfo(graph, 0, 20, busOutEdges);
+        // Assert that when the explorer is on node 1 it can travel one edges
+        assertEquals(1, count(explorer.setBaseNode(1)));
+
+        // Assert that when the explorer is positioned on base 2 it can only
+        // travel one edge
+        assertEquals(1, count(explorer.setBaseNode(2)));
+
+        // Assert that when the explorer is positioned on node 3 it can
+        // travel 1 edges
+        assertEquals(1, count(explorer.setBaseNode(3)));
+
+        // Assert that when the explorer is positioned on node 4 it can only
+        // travel 1 edge
+        assertEquals(1, count(explorer.setBaseNode(4)));
+
+        EdgeExplorer busAllExplorer = graph.createEdgeExplorer(new DefaultEdgeFilter(busEncoder, true, true));
+        // Starting at node zero I should be able to travel back and forth to
+        // four nodes?
+        EdgeIterator iter = busAllExplorer.setBaseNode(0);
+        assertTrue(iter.next());
+        evaluateRouting(iter, 4, true, true, false, busEncoder);
+        evaluateRouting(iter, 3, true, true, false, busEncoder);
+        evaluateRouting(iter, 2, true, true, false, busEncoder);
+        evaluateRouting(iter, 1, true, true, true, busEncoder);
+
+        // Starting at node 1
+        iter = busAllExplorer.setBaseNode(1);
+        assertTrue(iter.next());
+        // I should be able to get to node 0 in a forward and backward direction
+        // and have exhausted all the edges
+        evaluateRouting(iter, 0, true, true, true, busEncoder);
+
+        // Starting at node 2
+        iter = busAllExplorer.setBaseNode(2);
+        assertTrue(iter.next());
+        // I should be able to travel back from node 3 but not to it
+        // I should be able to travel to and from node 1 and have exhausted all
+        // the edges
+        evaluateRouting(iter, 0, true, true, true, busEncoder);
+
+        // Starting at node 3
+        iter = busAllExplorer.setBaseNode(3);
+        assertTrue(iter.next());
+        evaluateRouting(iter, 0, true, true, true, busEncoder);
+
+        // Starting at node 4
+        iter = busAllExplorer.setBaseNode(4);
+        assertTrue(iter.next());
+        evaluateRouting(iter, 0, true, true, true, busEncoder);
+    }
+}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/CombinationRestrictionTest.java b/core/src/test/java/com/graphhopper/reader/osgb/CombinationRestrictionTest.java
new file mode 100644
index 0000000000..6165adf9f2
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/CombinationRestrictionTest.java
@@ -0,0 +1,142 @@
+package com.graphhopper.reader.osgb;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
+import java.io.File;
+import java.io.IOException;
+
+import org.junit.Test;
+
+import com.graphhopper.routing.util.DefaultEdgeFilter;
+import com.graphhopper.storage.AbstractGraphStorageTester;
+import com.graphhopper.storage.GraphHopperStorage;
+import com.graphhopper.storage.TurnCostStorage;
+import com.graphhopper.util.GHUtility;
+
+/**
+ * Tests a crossroads that has a mandatory turn from 19 to 17 and a no turn from 17 to 19.
+ * @author phopkins
+ *
+ */
+public class CombinationRestrictionTest extends AbstractOsItnReaderTest {
+
+    @Test
+    public void testNoTurnFrom17To19() throws IOException {
+        runNoMotorVehicleTurnFrom17To19Test("./src/test/resources/com/graphhopper/reader/os-itn-no-turn-mandatory-turn-combination-crossroad.xml");
+    }
+    
+    @Test
+    public void testMandatoryTurnExceptBusTrueFrom19To17() throws IOException {
+        runMandatoryMotorVehicleTurnFrom19To17Test("./src/test/resources/com/graphhopper/reader/os-itn-no-turn-mandatory-turn-combination-crossroad.xml");
+    }
+
+    private void runMandatoryMotorVehicleTurnFrom19To17Test(String filename) throws IOException {
+        boolean turnRestrictionsImport = true;
+        boolean is3D = false;
+        GraphHopperStorage graph = configureStorage(turnRestrictionsImport, is3D);
+
+        File file = new File(filename);
+        readGraphFile(graph, file);
+        assertEquals(5, graph.getNodes());
+        checkSimpleNodeNetwork(graph);
+
+        DefaultEdgeFilter carOutFilter = new DefaultEdgeFilter(carEncoder, false, true);
+                carOutExplorer = graph.createEdgeExplorer(carOutFilter);
+
+        GHUtility.printInfo(graph, 0, 20, carOutFilter);
+        int n80 = AbstractGraphStorageTester.getIdOf(graph, node0Lat, node0Lon);
+        int n81 = AbstractGraphStorageTester.getIdOf(graph, node1Lat, node1Lon);
+        int n82 = AbstractGraphStorageTester.getIdOf(graph, node2Lat, node2Lon);
+        int n83 = AbstractGraphStorageTester.getIdOf(graph, node3Lat, node3Lon);
+        int n84 = AbstractGraphStorageTester.getIdOf(graph, node4Lat, node4Lon);
+
+        int edge17_80_81 = getEdge(n81, n80);
+        int edge18_81_82 = getEdge(n81, n82);
+        int edge19_81_83 = getEdge(n81, n83);
+        int edge20_81_84 = getEdge(n81, n84);
+
+        TurnCostStorage tcStorage = (TurnCostStorage) ((GraphHopperStorage) graph).getExtendedStorage();
+
+        // Check that there is no restriction from 19 to 17 (our Mandatory turn)
+        assertFalse(carEncoder.isTurnRestricted(tcStorage.getTurnCostFlags(n81, edge19_81_83, edge17_80_81)));
+
+        // Check that 19 to 20 is restricted (high cost)
+        long turnCostFlags = tcStorage.getTurnCostFlags(n81, edge19_81_83, edge20_81_84);
+        double cost = carEncoder.getTurnCost(turnCostFlags);
+        assertTrue(cost > 0.0);
+        
+        // Check that 19 to 18 is restricted (high cost)
+        turnCostFlags = tcStorage.getTurnCostFlags(n81, edge19_81_83, edge18_81_82);
+        cost = carEncoder.getTurnCost(turnCostFlags);
+        assertTrue(cost > 0.0);
+
+
+//        // Every route from 19 is not restricted
+//        assertFalse(carEncoder.isTurnRestricted(tcStorage.getTurnCostFlags(n81, edge19_81_83, edge17_80_81)));
+//        assertFalse(carEncoder.isTurnRestricted(tcStorage.getTurnCostFlags(n81, edge19_81_83, edge18_81_82)));
+//        assertFalse(carEncoder.isTurnRestricted(tcStorage.getTurnCostFlags(n81, edge19_81_83, edge20_81_84)));
+        // Every route from 18 is not restricted
+//        assertFalse(carEncoder.isTurnRestricted(tcStorage.getTurnCostFlags(n81, edge18_81_82, edge17_80_81)));
+//        assertFalse(carEncoder.isTurnRestricted(tcStorage.getTurnCostFlags(n81, edge18_81_82, edge19_81_83)));
+//        assertFalse(carEncoder.isTurnRestricted(tcStorage.getTurnCostFlags(n81, edge18_81_82, edge20_81_84)));
+        // Every route from 20 is not restricted
+        assertFalse(carEncoder.isTurnRestricted(tcStorage.getTurnCostFlags(n81, edge20_81_84, edge17_80_81)));
+        assertFalse(carEncoder.isTurnRestricted(tcStorage.getTurnCostFlags(n81, edge20_81_84, edge18_81_82)));
+        assertFalse(carEncoder.isTurnRestricted(tcStorage.getTurnCostFlags(n81, edge20_81_84, edge19_81_83)));
+    }
+    
+    private void runNoMotorVehicleTurnFrom17To19Test(String filename) throws IOException {
+        boolean turnRestrictionsImport = true;
+        boolean is3D = false;
+        GraphHopperStorage graph = configureStorage(turnRestrictionsImport, is3D);
+
+        File file = new File(filename);
+        readGraphFile(graph, file);
+        assertEquals(5, graph.getNodes());
+        checkSimpleNodeNetwork(graph);
+
+        DefaultEdgeFilter carOutFilter = new DefaultEdgeFilter(carEncoder, false, true);
+                carOutExplorer = graph.createEdgeExplorer(carOutFilter);
+
+        GHUtility.printInfo(graph, 0, 20, carOutFilter);
+        int n80 = AbstractGraphStorageTester.getIdOf(graph, node0Lat, node0Lon);
+        int n81 = AbstractGraphStorageTester.getIdOf(graph, node1Lat, node1Lon);
+        int n82 = AbstractGraphStorageTester.getIdOf(graph, node2Lat, node2Lon);
+        int n83 = AbstractGraphStorageTester.getIdOf(graph, node3Lat, node3Lon);
+        int n84 = AbstractGraphStorageTester.getIdOf(graph, node4Lat, node4Lon);
+
+        int edge17_80_81 = getEdge(n81, n80);
+        int edge18_81_82 = getEdge(n81, n82);
+        int edge19_81_83 = getEdge(n81, n83);
+        int edge20_81_84 = getEdge(n81, n84);
+
+        TurnCostStorage tcStorage = (TurnCostStorage) ((GraphHopperStorage) graph).getExtendedStorage();
+
+        // Check that 17 to 19 is restricted (high cost)
+        long turnCostFlags = tcStorage.getTurnCostFlags(n81, edge17_80_81, edge19_81_83);
+        double cost = carEncoder.getTurnCost(turnCostFlags);
+        assertTrue(cost > 0.0);
+
+        // We don't care about whether 17 to 20 is restricted (high cost) but it won't be in this example
+        assertFalse(carEncoder.isTurnRestricted(tcStorage.getTurnCostFlags(n81, edge17_80_81, edge20_81_84)));
+        
+        // We don't care about whether 17 to 18 is restricted (high cost)
+        assertFalse(carEncoder.isTurnRestricted(tcStorage.getTurnCostFlags(n81, edge17_80_81, edge18_81_82)));
+
+
+        // Every route from 19 is not restricted
+//        assertFalse(carEncoder.isTurnRestricted(tcStorage.getTurnCostFlags(n81, edge19_81_83, edge17_80_81)));
+//        assertFalse(carEncoder.isTurnRestricted(tcStorage.getTurnCostFlags(n81, edge19_81_83, edge18_81_82)));
+//        assertFalse(carEncoder.isTurnRestricted(tcStorage.getTurnCostFlags(n81, edge19_81_83, edge20_81_84)));
+        // Every route from 18 is not restricted
+//        assertFalse(carEncoder.isTurnRestricted(tcStorage.getTurnCostFlags(n81, edge18_81_82, edge17_80_81)));
+//        assertFalse(carEncoder.isTurnRestricted(tcStorage.getTurnCostFlags(n81, edge18_81_82, edge19_81_83)));
+//        assertFalse(carEncoder.isTurnRestricted(tcStorage.getTurnCostFlags(n81, edge18_81_82, edge20_81_84)));
+        // Every route from 20 is not restricted
+        assertFalse(carEncoder.isTurnRestricted(tcStorage.getTurnCostFlags(n81, edge20_81_84, edge17_80_81)));
+        assertFalse(carEncoder.isTurnRestricted(tcStorage.getTurnCostFlags(n81, edge20_81_84, edge18_81_82)));
+        assertFalse(carEncoder.isTurnRestricted(tcStorage.getTurnCostFlags(n81, edge20_81_84, edge19_81_83)));
+    }
+}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/HeavitreeRoadDenmarkRoadCrossroadTest.java b/core/src/test/java/com/graphhopper/reader/osgb/HeavitreeRoadDenmarkRoadCrossroadTest.java
new file mode 100644
index 0000000000..b7608476d4
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/HeavitreeRoadDenmarkRoadCrossroadTest.java
@@ -0,0 +1,240 @@
+package com.graphhopper.reader.osgb;
+
+import static com.graphhopper.util.GHUtility.count;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
+import java.io.File;
+import java.io.IOException;
+
+import org.junit.Test;
+
+import com.graphhopper.GHRequest;
+import com.graphhopper.GHResponse;
+import com.graphhopper.GraphHopper;
+import com.graphhopper.routing.util.DefaultEdgeFilter;
+import com.graphhopper.routing.util.EdgeFilter;
+import com.graphhopper.routing.util.EncodingManager;
+import com.graphhopper.storage.AbstractGraphStorageTester;
+import com.graphhopper.storage.GraphHopperStorage;
+import com.graphhopper.storage.TurnCostStorage;
+import com.graphhopper.util.EdgeExplorer;
+import com.graphhopper.util.EdgeIterator;
+import com.graphhopper.util.GHUtility;
+import com.graphhopper.util.shapes.GHPoint;
+
+public class HeavitreeRoadDenmarkRoadCrossroadTest extends AbstractOsItnReaderTest {
+
+    // 6216 292811.000,92750.000 SE
+    double node0Longitude = -3.51994881876;
+    double node0Latitude = 50.7244536431;
+
+    // 6127 292764.000,92812.000 NE
+    double node1Longitude = -3.52063248078;
+    double node1Latitude = 50.7250023098;
+
+    // 1253 292666.000,92818.000 NW
+    double nodeNWLongitude = -3.52202212301;
+    double nodeNWLatitude = 50.7250381316;
+
+    // 1264 292734.428,92739.063 SW
+    double nodeSWLongitude = -3.5210300491;
+    double nodeSWLatitude = 50.7243411788;
+
+    // 9154 292749.000,92779.000 CENTER
+    double node4Longitude = -3.52083530674;
+    double node4Latitude = 50.724702885;
+
+    private static final String FILENAME = "./src/test/resources/com/graphhopper/reader/os-itn-heavitree-road-denmark-road.xml";
+
+    // private static final String FILENAME =
+    // "./src/test/resources/com/graphhopper/reader/os-itn-simple-mandatory-turn-restricted-crossroad.xml";
+
+    @Test
+    public void testNoTurnFromNWToSW() throws IOException {
+        runNoMotorVehicleTurnFromNWToSWTest(FILENAME);
+    }
+
+    @Test
+    public void testMandatoryTurnFromSWToNW() throws IOException {
+        runMandatoryMotorVehicleTurnFromSWToNWTest(FILENAME);
+    }
+
+    private void runMandatoryMotorVehicleTurnFromSWToNWTest(String filename) throws IOException {
+        boolean turnRestrictionsImport = true;
+        boolean is3D = false;
+        GraphHopperStorage graph = configureStorage(turnRestrictionsImport, is3D);
+
+        File file = new File(filename);
+        readGraphFile(graph, file);
+
+        DefaultEdgeFilter carOutFilter = new DefaultEdgeFilter(carEncoder, false, true);
+        carOutExplorer = graph.createEdgeExplorer(carOutFilter);
+
+        GHUtility.printInfo(graph, 0, 20, EdgeFilter.ALL_EDGES);
+
+        assertEquals(5, graph.getNodes());
+        checkSimpleNodeNetwork(graph);
+
+        int nCenter = AbstractGraphStorageTester.getIdOf(graph, node4Latitude, node4Longitude);
+        int nNW = AbstractGraphStorageTester.getIdOf(graph, nodeNWLatitude, nodeNWLongitude);
+        int nSW = AbstractGraphStorageTester.getIdOf(graph, nodeSWLatitude, nodeSWLongitude);
+        int nNE = AbstractGraphStorageTester.getIdOf(graph, node1Latitude, node1Longitude);
+        int nSE = AbstractGraphStorageTester.getIdOf(graph, node0Latitude, node0Longitude);
+
+        int edge1253_NW_CENTER = getEdge(nNW, nCenter);
+        int edge1264_SW_CENTER = getEdge(nSW, nCenter);
+        int edge6127_NE_CENTER = getEdge(nNE, nCenter);
+        int edge6216_SE_CENTER = getEdge(nSE, nCenter);
+
+        TurnCostStorage tcStorage = (TurnCostStorage) ((GraphHopperStorage) graph).getExtendedStorage();
+
+        // Check that there is no restriction from SW to NE (our Mandatory turn)
+        assertFalse(carEncoder.isTurnRestricted(tcStorage.getTurnCostFlags(nCenter, edge1264_SW_CENTER, edge1253_NW_CENTER)));
+
+        // Check that SW to NE is restricted (high cost)
+        long turnCostFlags = tcStorage.getTurnCostFlags(nCenter, edge1264_SW_CENTER, edge6127_NE_CENTER);
+        double cost = carEncoder.getTurnCost(turnCostFlags);
+        assertTrue(cost > 0.0);
+
+        // Check that SW to SE is restricted (high cost)
+        turnCostFlags = tcStorage.getTurnCostFlags(nCenter, edge1264_SW_CENTER, edge6216_SE_CENTER);
+        cost = carEncoder.getTurnCost(turnCostFlags);
+        assertTrue(cost > 0.0);
+
+        // // Every route from 19 is not restricted
+        // assertFalse(carEncoder.isTurnRestricted(tcStorage.getTurnCostFlags(n81,
+        // edge19_81_83, edge17_80_81)));
+        // assertFalse(carEncoder.isTurnRestricted(tcStorage.getTurnCostFlags(n81,
+        // edge19_81_83, edge18_81_82)));
+        // assertFalse(carEncoder.isTurnRestricted(tcStorage.getTurnCostFlags(n81,
+        // edge19_81_83, edge20_81_84)));
+        // Every route from 18 is not restricted
+        // assertFalse(carEncoder.isTurnRestricted(tcStorage.getTurnCostFlags(nCenter,
+        // edge18_81_82, edge17_80_81)));
+        // assertFalse(carEncoder.isTurnRestricted(tcStorage.getTurnCostFlags(nCenter,
+        // edge18_81_82, edge19_81_83)));
+        // assertFalse(carEncoder.isTurnRestricted(tcStorage.getTurnCostFlags(nCenter,
+        // edge18_81_82, edge20_81_84)));
+        // Every route from 20 is not restricted
+        // assertFalse(carEncoder.isTurnRestricted(tcStorage.getTurnCostFlags(nCenter,
+        // edge20_81_84, edge17_80_81)));
+        // assertFalse(carEncoder.isTurnRestricted(tcStorage.getTurnCostFlags(nCenter,
+        // edge20_81_84, edge18_81_82)));
+        // assertFalse(carEncoder.isTurnRestricted(tcStorage.getTurnCostFlags(nCenter,
+        // edge20_81_84, edge19_81_83)));
+    }
+
+    private void runNoMotorVehicleTurnFromNWToSWTest(String filename) throws IOException {
+        boolean turnRestrictionsImport = true;
+        boolean is3D = false;
+        GraphHopperStorage graph = configureStorage(turnRestrictionsImport, is3D);
+
+        File file = new File(filename);
+        readGraphFile(graph, file);
+
+        // EdgeFilter carOutFilter = new DefaultEdgeFilter(carEncoder, false,
+        // true);
+        EdgeFilter carOutFilter = new DefaultEdgeFilter(carEncoder, true, false);
+        // EdgeFilter carOutFilter = EdgeFilter.ALL_EDGES;
+        carOutExplorer = graph.createEdgeExplorer(carOutFilter);
+
+        // GHUtility.printInfo(graph, 0, 20, new DefaultEdgeFilter(carEncoder,
+        // true, false));
+        GHUtility.printInfo(graph, 0, 20, EdgeFilter.ALL_EDGES);
+        assertEquals(5, graph.getNodes());
+        checkSimpleNodeNetwork(graph);
+
+        int nCenter = AbstractGraphStorageTester.getIdOf(graph, node4Latitude, node4Longitude);
+        int nNW = AbstractGraphStorageTester.getIdOf(graph, nodeNWLatitude, nodeNWLongitude);
+        int nSW = AbstractGraphStorageTester.getIdOf(graph, nodeSWLatitude, nodeSWLongitude);
+        int nNE = AbstractGraphStorageTester.getIdOf(graph, node1Latitude, node1Longitude);
+        int nSE = AbstractGraphStorageTester.getIdOf(graph, node0Latitude, node0Longitude);
+
+        int edge1253_NW_CENTER = getEdge(nNW, nCenter);
+        int edge1264_SW_CENTER = getEdge(nSW, nCenter);
+        int edge6127_NE_CENTER = getEdge(nNE, nCenter);
+        int edge6216_SE_CENTER = getEdge(nSE, nCenter);
+
+        TurnCostStorage tcStorage = (TurnCostStorage) ((GraphHopperStorage) graph).getExtendedStorage();
+
+        // Check that NW to SW is restricted (high cost)
+        long turnCostFlags = tcStorage.getTurnCostFlags(nCenter, edge1253_NW_CENTER, edge1264_SW_CENTER);
+        double cost = carEncoder.getTurnCost(turnCostFlags);
+        assertTrue(cost > 0.0);
+
+        // We don't care about whether 17 to 20 is restricted (high cost) but it
+        // won't be in this example
+        // assertFalse(carEncoder.isTurnRestricted(tcStorage.getTurnCostFlags(nCenter,
+        // edge17_80_81, edge20_81_84)));
+
+        // We don't care about whether 17 to 18 is restricted (high cost)
+        // assertFalse(carEncoder.isTurnRestricted(tcStorage.getTurnCostFlags(nCenter,
+        // edge17_80_81, edge18_81_82)));
+
+        // Every route from 19 is not restricted
+        // assertFalse(carEncoder.isTurnRestricted(tcStorage.getTurnCostFlags(n81,
+        // edge19_81_83, edge17_80_81)));
+        // assertFalse(carEncoder.isTurnRestricted(tcStorage.getTurnCostFlags(n81,
+        // edge19_81_83, edge18_81_82)));
+        // assertFalse(carEncoder.isTurnRestricted(tcStorage.getTurnCostFlags(n81,
+        // edge19_81_83, edge20_81_84)));
+        // Every route from 18 is not restricted
+        // assertFalse(carEncoder.isTurnRestricted(tcStorage.getTurnCostFlags(n81,
+        // edge18_81_82, edge17_80_81)));
+        // assertFalse(carEncoder.isTurnRestricted(tcStorage.getTurnCostFlags(n81,
+        // edge18_81_82, edge19_81_83)));
+        // assertFalse(carEncoder.isTurnRestricted(tcStorage.getTurnCostFlags(n81,
+        // edge18_81_82, edge20_81_84)));
+        // Every route from 20 is not restricted
+        // assertFalse(carEncoder.isTurnRestricted(tcStorage.getTurnCostFlags(n81,
+        // edge20_81_84, edge17_80_81)));
+        // assertFalse(carEncoder.isTurnRestricted(tcStorage.getTurnCostFlags(n81,
+        // edge20_81_84, edge18_81_82)));
+        // assertFalse(carEncoder.isTurnRestricted(tcStorage.getTurnCostFlags(n81,
+        // edge20_81_84, edge19_81_83)));
+    }
+
+    protected void checkSimpleNodeNetwork(GraphHopperStorage graph) {
+        EdgeExplorer explorer = graph.createEdgeExplorer(carOutEdges);
+        assertEquals(4, count(explorer.setBaseNode(0)));
+        assertEquals(1, count(explorer.setBaseNode(1)));
+        assertEquals(1, count(explorer.setBaseNode(2)));
+        assertEquals(1, count(explorer.setBaseNode(3)));
+        assertEquals(1, count(explorer.setBaseNode(4)));
+
+        EdgeIterator iter = explorer.setBaseNode(0);
+        assertTrue(iter.next());
+        assertEquals("DENMARK ROAD", iter.getName());
+        iter.next();
+        assertEquals("HEAVITREE ROAD", iter.getName());
+        iter.next();
+        assertEquals("DENMARK ROAD", iter.getName());
+        iter.next();
+        assertEquals("HEAVITREE ROAD", iter.getName());
+        assertFalse(iter.next());
+    }
+
+    @Test
+    public void testActualGraph() {
+        String graphLoc = "/home/phopkins/Documents/graphhopper/core/58096-SX9192-2c1";
+        String inputFile = "/home/phopkins/Development/geoserver-service-test/geoservertest/itn-sample-data/58096-SX9192-2c1.xml";
+        // EncodingManager enc = new EncodingManager(carEncoder);
+        GraphHopper graphHopper = new GraphHopper().setInMemory().setGraphHopperLocation(graphLoc).setOSMFile(inputFile).setCHEnable(false).setEncodingManager(encodingManager);
+        graphHopper.importOrLoad();
+        outputRoute(graphHopper, nodeNWLatitude, nodeNWLongitude,nodeSWLatitude, nodeSWLongitude);
+        
+        outputRoute(graphHopper, 50.723729, -3.51897, 50.723975, -3.518228);
+
+        outputRoute(graphHopper, 50.727204,-3.523927, 50.726631,-3.524159);
+    }
+    private void outputRoute(GraphHopper graphHopper, double lat1, double lon1, double lat2, double lon2) {
+        GHRequest ghRequest = new GHRequest(new GHPoint(lat1, lon1), new GHPoint(lat2, lon2));
+
+        GHResponse ghResponse = graphHopper.route(ghRequest);
+        System.err.println(ghResponse.getPoints());
+        System.err.println(ghResponse.getDebugInfo());
+    }
+
+}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/NoEntryTest.java b/core/src/test/java/com/graphhopper/reader/osgb/NoEntryTest.java
index 01742bc1bb..55614175cd 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/NoEntryTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/NoEntryTest.java
@@ -2,6 +2,7 @@
 
 import static com.graphhopper.util.GHUtility.count;
 import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 
 import java.io.File;
@@ -12,6 +13,7 @@
 import org.slf4j.LoggerFactory;
 
 import com.graphhopper.routing.util.DefaultEdgeFilter;
+import com.graphhopper.routing.util.EdgeFilter;
 import com.graphhopper.storage.GraphHopperStorage;
 import com.graphhopper.util.EdgeExplorer;
 import com.graphhopper.util.EdgeIterator;
@@ -410,23 +412,7 @@ public void testNoEntryExceptForMotorVehiclesFalse() throws IOException {
         checkNoEntryNetwork(graph, explorer);
     }
     
-    
-    private void printNodes(EdgeExplorer outExplorer, int numNodes) {
-        for (int i = 0; i < numNodes; i++) {
-//            logger.info("Node " + i + " " + count(outExplorer.setBaseNode(i)));
-            System.out.println("Node " + i + " " + count(outExplorer.setBaseNode(i)));
-        }
-
-        EdgeIterator iter = null; 
-        for (int i = 0; i < numNodes; i++) {
-            iter = outExplorer.setBaseNode(i);
-            while (iter.next()) {
-//                logger.info(i+" Adj node is " + iter.getAdjNode());
-                System.out.println(i+" Adj node is " + iter.getAdjNode());
-            }
-        }
-    }
-    private void checkNoEntryNetwork(GraphHopperStorage graph, EdgeExplorer explorer) {
+    protected void checkNoEntryNetwork(GraphHopperStorage graph, EdgeExplorer explorer) {
         // Assert that our graph has 7 nodes
         assertEquals(7, graph.getNodes());
 
@@ -508,7 +494,7 @@ private void checkNoEntryNetwork(GraphHopperStorage graph, EdgeExplorer explorer
         evaluateRouting(iter, 0, true, true, true);
 
     }
-    private void checkNonNoEntryNetwork(GraphHopperStorage graph, EdgeExplorer explorer) {
+    protected void checkNonNoEntryNetwork(GraphHopperStorage graph, EdgeExplorer explorer) {
         // Assert that our graph has 7 nodes
         assertEquals(5, graph.getNodes());
 
@@ -567,4 +553,537 @@ private void checkNonNoEntryNetwork(GraphHopperStorage graph, EdgeExplorer explo
         assertTrue(iter.next());
         evaluateRouting(iter, 0, true, true, true);
     }
+    @Test
+    public void testReadItnNoEntryMultipointCrossroad_start_pos() throws IOException {
+        final boolean turnRestrictionsImport = true;
+        final boolean is3D = false;
+        final GraphHopperStorage graph = configureStorage(turnRestrictionsImport, is3D);
+
+        final File file = new File("./src/test/resources/com/graphhopper/reader/os-itn-no-entry-multipoint-crossroad-start_pos.xml");
+        final OsItnReader osItnReader = readGraphFile(graph, file);
+
+        logger.info("We have " + graph.getNodes() + " nodes");
+
+        logger.info("80 " + osItnReader.getNodeMap().get(4000000025277880l));
+        logger.info("81 " + osItnReader.getNodeMap().get(4000000025277881l));
+        logger.info("82 " + osItnReader.getNodeMap().get(4000000025277882l));
+        logger.info("83 " + osItnReader.getNodeMap().get(4000000025277883l));
+        logger.info("84 " + osItnReader.getNodeMap().get(4000000025277884l));
+        logger.info("85 " + osItnReader.getNodeMap().get(4000000025277885l));
+        logger.info("86 " + osItnReader.getNodeMap().get(4000000025277886l));
+
+        final EdgeExplorer explorer = graph.createEdgeExplorer(carOutEdges);
+        logger.info("Node 0 " + count(explorer.setBaseNode(0)));
+        logger.info("Node 1 " + count(explorer.setBaseNode(1)));
+        logger.info("Node 2 " + count(explorer.setBaseNode(2)));
+        logger.info("Node 3 " + count(explorer.setBaseNode(3)));
+        logger.info("Node 4 " + count(explorer.setBaseNode(4)));
+        logger.info("Node 5 " + count(explorer.setBaseNode(5)));
+        logger.info("Node 6 " + count(explorer.setBaseNode(6)));
+        logger.info("Node 7 " + count(explorer.setBaseNode(7)));
+        logger.info("Node 8 " + count(explorer.setBaseNode(8)));
+
+        EdgeIterator iter = explorer.setBaseNode(0);
+        while (iter.next()) {
+            logger.info("0 Adj node is " + iter.getAdjNode());
+        }
+        iter = explorer.setBaseNode(1);
+        while (iter.next()) {
+            logger.info("1 Adj node is " + iter.getAdjNode());
+        }
+        iter = explorer.setBaseNode(2);
+        while (iter.next()) {
+            logger.info("2 Adj node is " + iter.getAdjNode());
+        }
+        iter = explorer.setBaseNode(3);
+        while (iter.next()) {
+            logger.info("3 Adj node is " + iter.getAdjNode());
+        }
+        iter = explorer.setBaseNode(4);
+        while (iter.next()) {
+            logger.info("4 Adj node is " + iter.getAdjNode());
+        }
+        iter = explorer.setBaseNode(5);
+        while (iter.next()) {
+            logger.info("5 Adj node is " + iter.getAdjNode());
+        }
+        iter = explorer.setBaseNode(6);
+        while (iter.next()) {
+            logger.info("6 Adj node is " + iter.getAdjNode());
+        }
+        iter = explorer.setBaseNode(7);
+        while (iter.next()) {
+            logger.info("7 Adj node is " + iter.getAdjNode());
+        }
+        iter = explorer.setBaseNode(8);
+        while (iter.next()) {
+            logger.info("8 Adj node is " + iter.getAdjNode());
+        }
+
+        GHUtility.printInfo(graph, 0, 20, carOutEdges);
+        assertEquals(4, count(explorer.setBaseNode(0)));
+        assertEquals(1, count(explorer.setBaseNode(1)));
+        assertEquals(1, count(explorer.setBaseNode(2)));
+        assertEquals(2, count(explorer.setBaseNode(3)));
+        assertEquals(1, count(explorer.setBaseNode(4)));
+        assertEquals(1, count(explorer.setBaseNode(5)));
+        assertEquals(1, count(explorer.setBaseNode(6)));
+
+        // Assert that this is true
+        iter = explorer.setBaseNode(0);
+        assertTrue(iter.next());
+        assertEquals(6, iter.getAdjNode());
+        assertTrue(iter.next());
+        assertEquals(5, iter.getAdjNode());
+        assertTrue(iter.next());
+        assertEquals(4, iter.getAdjNode());
+        assertTrue(iter.next());
+        assertEquals(3, iter.getAdjNode());
+        assertFalse(iter.next());
+
+        iter = explorer.setBaseNode(1);
+        assertTrue(iter.next());
+        assertEquals(2, iter.getAdjNode());
+        assertFalse(iter.next());
+
+        iter = explorer.setBaseNode(2);
+        assertTrue(iter.next());
+        assertEquals(3, iter.getAdjNode());
+        assertFalse(iter.next());
+
+        iter = explorer.setBaseNode(3);
+        assertTrue(iter.next());
+        assertEquals(0, iter.getAdjNode());
+        assertTrue(iter.next());
+        assertEquals(2, iter.getAdjNode());
+        assertFalse(iter.next());
+
+        iter = explorer.setBaseNode(4);
+        assertTrue(iter.next());
+        assertEquals(0, iter.getAdjNode());
+        assertFalse(iter.next());
+
+        iter = explorer.setBaseNode(5);
+        assertTrue(iter.next());
+        assertEquals(0, iter.getAdjNode());
+        assertFalse(iter.next());
+
+        iter = explorer.setBaseNode(6);
+        assertTrue(iter.next());
+        assertEquals(0, iter.getAdjNode());
+        assertFalse(iter.next());
+    }
+
+    @Test
+    public void testReadItnNoEntryMultipointCrossroad_start_neg() throws IOException {
+        final boolean turnRestrictionsImport = true;
+        final boolean is3D = false;
+        final GraphHopperStorage graph = configureStorage(turnRestrictionsImport, is3D);
+
+        final File file = new File("./src/test/resources/com/graphhopper/reader/os-itn-no-entry-multipoint-crossroad-start_neg.xml");
+        final OsItnReader osItnReader = readGraphFile(graph, file);
+
+        logger.info("We have " + graph.getNodes() + " nodes");
+
+        logger.info("80 " + osItnReader.getNodeMap().get(4000000025277880l));
+        logger.info("81 " + osItnReader.getNodeMap().get(4000000025277881l));
+        logger.info("82 " + osItnReader.getNodeMap().get(4000000025277882l));
+        logger.info("83 " + osItnReader.getNodeMap().get(4000000025277883l));
+        logger.info("84 " + osItnReader.getNodeMap().get(4000000025277884l));
+        logger.info("85 " + osItnReader.getNodeMap().get(4000000025277885l));
+        logger.info("86 " + osItnReader.getNodeMap().get(4000000025277886l));
+
+        final EdgeExplorer explorer = graph.createEdgeExplorer(carOutEdges);
+        logger.info("Node 0 " + count(explorer.setBaseNode(0)));
+        logger.info("Node 1 " + count(explorer.setBaseNode(1)));
+        logger.info("Node 2 " + count(explorer.setBaseNode(2)));
+        logger.info("Node 3 " + count(explorer.setBaseNode(3)));
+        logger.info("Node 4 " + count(explorer.setBaseNode(4)));
+        logger.info("Node 5 " + count(explorer.setBaseNode(5)));
+        logger.info("Node 6 " + count(explorer.setBaseNode(6)));
+        logger.info("Node 7 " + count(explorer.setBaseNode(7)));
+        logger.info("Node 8 " + count(explorer.setBaseNode(8)));
+
+        EdgeIterator iter = explorer.setBaseNode(0);
+        while (iter.next()) {
+            logger.info("0 Adj node is " + iter.getAdjNode());
+        }
+        iter = explorer.setBaseNode(1);
+        while (iter.next()) {
+            logger.info("1 Adj node is " + iter.getAdjNode());
+        }
+        iter = explorer.setBaseNode(2);
+        while (iter.next()) {
+            logger.info("2 Adj node is " + iter.getAdjNode());
+        }
+        iter = explorer.setBaseNode(3);
+        while (iter.next()) {
+            logger.info("3 Adj node is " + iter.getAdjNode());
+        }
+        iter = explorer.setBaseNode(4);
+        while (iter.next()) {
+            logger.info("4 Adj node is " + iter.getAdjNode());
+        }
+        iter = explorer.setBaseNode(5);
+        while (iter.next()) {
+            logger.info("5 Adj node is " + iter.getAdjNode());
+        }
+        iter = explorer.setBaseNode(6);
+        while (iter.next()) {
+            logger.info("6 Adj node is " + iter.getAdjNode());
+        }
+        iter = explorer.setBaseNode(7);
+        while (iter.next()) {
+            logger.info("7 Adj node is " + iter.getAdjNode());
+        }
+        iter = explorer.setBaseNode(8);
+        while (iter.next()) {
+            logger.info("8 Adj node is " + iter.getAdjNode());
+        }
+
+        GHUtility.printInfo(graph, 0, 20, carOutEdges);
+        assertEquals(4, count(explorer.setBaseNode(0)));
+        assertEquals(0, count(explorer.setBaseNode(1)));
+        assertEquals(2, count(explorer.setBaseNode(2)));
+        assertEquals(2, count(explorer.setBaseNode(3)));
+        assertEquals(1, count(explorer.setBaseNode(4)));
+        assertEquals(1, count(explorer.setBaseNode(5)));
+        assertEquals(1, count(explorer.setBaseNode(6)));
+
+        // Assert that this is true
+        iter = explorer.setBaseNode(0);
+        assertTrue(iter.next());
+        assertEquals(6, iter.getAdjNode());
+        assertTrue(iter.next());
+        assertEquals(5, iter.getAdjNode());
+        assertTrue(iter.next());
+        assertEquals(4, iter.getAdjNode());
+        assertTrue(iter.next());
+        assertEquals(3, iter.getAdjNode());
+        assertFalse(iter.next());
+
+        iter = explorer.setBaseNode(1);
+        assertFalse(iter.next());
+
+        iter = explorer.setBaseNode(2);
+        assertTrue(iter.next());
+        assertEquals(3, iter.getAdjNode());
+        assertTrue(iter.next());
+        assertEquals(1, iter.getAdjNode());
+        assertFalse(iter.next());
+
+        iter = explorer.setBaseNode(3);
+        assertTrue(iter.next());
+        assertEquals(0, iter.getAdjNode());
+        assertTrue(iter.next());
+        assertEquals(2, iter.getAdjNode());
+        assertFalse(iter.next());
+
+        iter = explorer.setBaseNode(4);
+        assertTrue(iter.next());
+        assertEquals(0, iter.getAdjNode());
+        assertFalse(iter.next());
+
+        iter = explorer.setBaseNode(5);
+        assertTrue(iter.next());
+        assertEquals(0, iter.getAdjNode());
+        assertFalse(iter.next());
+
+        iter = explorer.setBaseNode(6);
+        assertTrue(iter.next());
+        assertEquals(0, iter.getAdjNode());
+        assertFalse(iter.next());
+    }
+
+    @Test
+    public void testReadItnNoEntryMultipointCrossroad_end_neg() throws IOException {
+        final boolean turnRestrictionsImport = true;
+        final boolean is3D = false;
+        final GraphHopperStorage graph = configureStorage(turnRestrictionsImport, is3D);
+
+        final File file = new File("./src/test/resources/com/graphhopper/reader/os-itn-no-entry-multipoint-crossroad-end_neg.xml");
+        final OsItnReader osItnReader = readGraphFile(graph, file);
+
+        logger.info("We have " + graph.getNodes() + " nodes");
+
+        logger.info("80 " + osItnReader.getNodeMap().get(4000000025277880l));
+        logger.info("81 " + osItnReader.getNodeMap().get(4000000025277881l));
+        logger.info("82 " + osItnReader.getNodeMap().get(4000000025277882l));
+        logger.info("83 " + osItnReader.getNodeMap().get(4000000025277883l));
+        logger.info("84 " + osItnReader.getNodeMap().get(4000000025277884l));
+        logger.info("85 " + osItnReader.getNodeMap().get(4000000025277885l));
+        logger.info("86 " + osItnReader.getNodeMap().get(4000000025277886l));
+
+        final EdgeExplorer explorer = graph.createEdgeExplorer(carOutEdges);
+        logger.info("Node 0 " + count(explorer.setBaseNode(0)));
+        logger.info("Node 1 " + count(explorer.setBaseNode(1)));
+        logger.info("Node 2 " + count(explorer.setBaseNode(2)));
+        logger.info("Node 3 " + count(explorer.setBaseNode(3)));
+        logger.info("Node 4 " + count(explorer.setBaseNode(4)));
+        logger.info("Node 5 " + count(explorer.setBaseNode(5)));
+        logger.info("Node 6 " + count(explorer.setBaseNode(6)));
+        logger.info("Node 7 " + count(explorer.setBaseNode(7)));
+        logger.info("Node 8 " + count(explorer.setBaseNode(8)));
+
+        EdgeIterator iter = explorer.setBaseNode(0);
+        while (iter.next()) {
+            logger.info("0 Adj node is " + iter.getAdjNode());
+        }
+        iter = explorer.setBaseNode(1);
+        while (iter.next()) {
+            logger.info("1 Adj node is " + iter.getAdjNode());
+        }
+        iter = explorer.setBaseNode(2);
+        while (iter.next()) {
+            logger.info("2 Adj node is " + iter.getAdjNode());
+        }
+        iter = explorer.setBaseNode(3);
+        while (iter.next()) {
+            logger.info("3 Adj node is " + iter.getAdjNode());
+        }
+        iter = explorer.setBaseNode(4);
+        while (iter.next()) {
+            logger.info("4 Adj node is " + iter.getAdjNode());
+        }
+        iter = explorer.setBaseNode(5);
+        while (iter.next()) {
+            logger.info("5 Adj node is " + iter.getAdjNode());
+        }
+        iter = explorer.setBaseNode(6);
+        while (iter.next()) {
+            logger.info("6 Adj node is " + iter.getAdjNode());
+        }
+        iter = explorer.setBaseNode(7);
+        while (iter.next()) {
+            logger.info("7 Adj node is " + iter.getAdjNode());
+        }
+        iter = explorer.setBaseNode(8);
+        while (iter.next()) {
+            logger.info("8 Adj node is " + iter.getAdjNode());
+        }
+        /*
+         *
+         * 2014-11-06 15:37:00,201 [main] INFO
+         * com.graphhopper.reader.osgb.OsItnReaderTest - Node 0 3 2014-11-06
+         * 15:37:00,202 [main] INFO com.graphhopper.reader.osgb.OsItnReaderTest
+         * - Node 1 2 2014-11-06 15:37:00,203 [main] INFO
+         * com.graphhopper.reader.osgb.OsItnReaderTest - Node 2 2 2014-11-06
+         * 15:37:00,204 [main] INFO com.graphhopper.reader.osgb.OsItnReaderTest
+         * - Node 3 2 2014-11-06 15:37:00,204 [main] INFO
+         * com.graphhopper.reader.osgb.OsItnReaderTest - Node 4 1 2014-11-06
+         * 15:37:00,205 [main] INFO com.graphhopper.reader.osgb.OsItnReaderTest
+         * - Node 5 2 2014-11-06 15:37:00,205 [main] INFO
+         * com.graphhopper.reader.osgb.OsItnReaderTest - Node 6 1 2014-11-06
+         * 15:37:00,205 [main] INFO com.graphhopper.reader.osgb.OsItnReaderTest
+         * - Node 7 1 2014-11-06 15:37:00,205 [main] INFO
+         * com.graphhopper.reader.osgb.OsItnReaderTest - Node 8 1
+         */
+
+        assertEquals(3, count(explorer.setBaseNode(0)));
+        assertEquals(1, count(explorer.setBaseNode(1)));
+        assertEquals(2, count(explorer.setBaseNode(2)));
+        assertEquals(2, count(explorer.setBaseNode(3)));
+        assertEquals(1, count(explorer.setBaseNode(4)));
+        assertEquals(1, count(explorer.setBaseNode(5)));
+        assertEquals(1, count(explorer.setBaseNode(6)));
+
+        GHUtility.printInfo(graph, 0, 20, EdgeFilter.ALL_EDGES);
+        // Assert that this is true
+        iter = explorer.setBaseNode(0);
+        assertTrue(iter.next());
+        assertEquals(6, iter.getAdjNode());
+        assertTrue(iter.next());
+        assertEquals(5, iter.getAdjNode());
+        assertTrue(iter.next());
+        assertEquals(4, iter.getAdjNode());
+        assertFalse(iter.next());
+
+        iter = explorer.setBaseNode(1);
+        assertTrue(iter.next());
+        assertEquals(2, iter.getAdjNode());
+        assertFalse(iter.next());
+
+        iter = explorer.setBaseNode(2);
+        assertTrue(iter.next());
+        assertEquals(3, iter.getAdjNode());
+        assertTrue(iter.next());
+        assertEquals(1, iter.getAdjNode());
+        assertFalse(iter.next());
+
+        iter = explorer.setBaseNode(3);
+        assertTrue(iter.next());
+        assertEquals(0, iter.getAdjNode());
+        assertTrue(iter.next());
+        assertEquals(2, iter.getAdjNode());
+        assertFalse(iter.next());
+
+        iter = explorer.setBaseNode(4);
+        assertTrue(iter.next());
+        assertEquals(0, iter.getAdjNode());
+        assertFalse(iter.next());
+
+        iter = explorer.setBaseNode(5);
+        assertTrue(iter.next());
+        assertEquals(0, iter.getAdjNode());
+        assertFalse(iter.next());
+
+        iter = explorer.setBaseNode(6);
+        assertTrue(iter.next());
+        assertEquals(0, iter.getAdjNode());
+        assertFalse(iter.next());
+    }
+
+    @Test
+    public void testReadItnNoEntryMultipointCrossroad_end_pos() throws IOException {
+        final boolean turnRestrictionsImport = true;
+        final boolean is3D = false;
+        final GraphHopperStorage graph = configureStorage(turnRestrictionsImport, is3D);
+
+        final File file = new File("./src/test/resources/com/graphhopper/reader/os-itn-no-entry-multipoint-crossroad-end_pos.xml");
+        final OsItnReader osItnReader = readGraphFile(graph, file);
+
+        logger.info("We have " + graph.getNodes() + " nodes");
+
+        logger.info("80 " + osItnReader.getNodeMap().get(4000000025277880l));
+        logger.info("81 " + osItnReader.getNodeMap().get(4000000025277881l));
+        logger.info("82 " + osItnReader.getNodeMap().get(4000000025277882l));
+        logger.info("83 " + osItnReader.getNodeMap().get(4000000025277883l));
+        logger.info("84 " + osItnReader.getNodeMap().get(4000000025277884l));
+        logger.info("85 " + osItnReader.getNodeMap().get(4000000025277885l));
+        logger.info("86 " + osItnReader.getNodeMap().get(4000000025277886l));
+
+        final EdgeExplorer explorer = graph.createEdgeExplorer(carOutEdges);
+        logger.info("Node 0 " + count(explorer.setBaseNode(0)));
+        logger.info("Node 1 " + count(explorer.setBaseNode(1)));
+        logger.info("Node 2 " + count(explorer.setBaseNode(2)));
+        logger.info("Node 3 " + count(explorer.setBaseNode(3)));
+        logger.info("Node 4 " + count(explorer.setBaseNode(4)));
+        logger.info("Node 5 " + count(explorer.setBaseNode(5)));
+        logger.info("Node 6 " + count(explorer.setBaseNode(6)));
+        logger.info("Node 7 " + count(explorer.setBaseNode(7)));
+        logger.info("Node 8 " + count(explorer.setBaseNode(8)));
+
+        EdgeIterator iter = explorer.setBaseNode(0);
+        while (iter.next()) {
+            logger.info("0 Adj node is " + iter.getAdjNode());
+        }
+        iter = explorer.setBaseNode(1);
+        while (iter.next()) {
+            logger.info("1 Adj node is " + iter.getAdjNode());
+        }
+        iter = explorer.setBaseNode(2);
+        while (iter.next()) {
+            logger.info("2 Adj node is " + iter.getAdjNode());
+        }
+        iter = explorer.setBaseNode(3);
+        while (iter.next()) {
+            logger.info("3 Adj node is " + iter.getAdjNode());
+        }
+        iter = explorer.setBaseNode(4);
+        while (iter.next()) {
+            logger.info("4 Adj node is " + iter.getAdjNode());
+        }
+        iter = explorer.setBaseNode(5);
+        while (iter.next()) {
+            logger.info("5 Adj node is " + iter.getAdjNode());
+        }
+        iter = explorer.setBaseNode(6);
+        while (iter.next()) {
+            logger.info("6 Adj node is " + iter.getAdjNode());
+        }
+        iter = explorer.setBaseNode(7);
+        while (iter.next()) {
+            logger.info("7 Adj node is " + iter.getAdjNode());
+        }
+        iter = explorer.setBaseNode(8);
+        while (iter.next()) {
+            logger.info("8 Adj node is " + iter.getAdjNode());
+        }
+
+        GHUtility.printInfo(graph, 0, 20, EdgeFilter.ALL_EDGES);
+        assertEquals(4, count(explorer.setBaseNode(0)));
+        assertEquals(1, count(explorer.setBaseNode(1)));
+        assertEquals(2, count(explorer.setBaseNode(2)));
+        assertEquals(1, count(explorer.setBaseNode(3)));
+        assertEquals(1, count(explorer.setBaseNode(4)));
+        assertEquals(1, count(explorer.setBaseNode(5)));
+        assertEquals(1, count(explorer.setBaseNode(6)));
+        /*
+         * 2014-11-06 15:39:18,574 [main] INFO
+         * com.graphhopper.reader.osgb.OsItnReaderTest - 0 Adj node is 8
+         * 2014-11-06 15:39:18,575 [main] INFO
+         * com.graphhopper.reader.osgb.OsItnReaderTest - 0 Adj node is 7
+         * 2014-11-06 15:39:18,575 [main] INFO
+         * com.graphhopper.reader.osgb.OsItnReaderTest - 0 Adj node is 6
+         * 2014-11-06 15:39:18,575 [main] INFO
+         * com.graphhopper.reader.osgb.OsItnReaderTest - 0 Adj node is 5
+         * 2014-11-06 15:39:18,575 [main] INFO
+         * com.graphhopper.reader.osgb.OsItnReaderTest - 1 Adj node is 2
+         * 2014-11-06 15:39:18,575 [main] INFO
+         * com.graphhopper.reader.osgb.OsItnReaderTest - 1 Adj node is 4
+         * 2014-11-06 15:39:18,575 [main] INFO
+         * com.graphhopper.reader.osgb.OsItnReaderTest - 2 Adj node is 3
+         * 2014-11-06 15:39:18,575 [main] INFO
+         * com.graphhopper.reader.osgb.OsItnReaderTest - 2 Adj node is 1
+         * 2014-11-06 15:39:18,575 [main] INFO
+         * com.graphhopper.reader.osgb.OsItnReaderTest - 3 Adj node is 5
+         * 2014-11-06 15:39:18,575 [main] INFO
+         * com.graphhopper.reader.osgb.OsItnReaderTest - 3 Adj node is 2
+         * 2014-11-06 15:39:18,575 [main] INFO
+         * com.graphhopper.reader.osgb.OsItnReaderTest - 4 Adj node is 1
+         * 2014-11-06 15:39:18,575 [main] INFO
+         * com.graphhopper.reader.osgb.OsItnReaderTest - 5 Adj node is 3
+         * 2014-11-06 15:39:18,575 [main] INFO
+         * com.graphhopper.reader.osgb.OsItnReaderTest - 6 Adj node is 0
+         * 2014-11-06 15:39:18,575 [main] INFO
+         * com.graphhopper.reader.osgb.OsItnReaderTest - 7 Adj node is 0
+         * 2014-11-06 15:39:18,575 [main] INFO
+         * com.graphhopper.reader.osgb.OsItnReaderTest - 8 Adj node is 0
+         */
+
+        // Assert that this is true
+        iter = explorer.setBaseNode(0);
+        assertTrue(iter.next());
+        assertEquals(6, iter.getAdjNode());
+        assertTrue(iter.next());
+        assertEquals(5, iter.getAdjNode());
+        assertTrue(iter.next());
+        assertEquals(4, iter.getAdjNode());
+        assertTrue(iter.next());
+        assertEquals(3, iter.getAdjNode());
+        assertFalse(iter.next());
+
+        iter = explorer.setBaseNode(1);
+        assertTrue(iter.next());
+        assertEquals(2, iter.getAdjNode());
+        assertFalse(iter.next());
+
+        iter = explorer.setBaseNode(2);
+        assertTrue(iter.next());
+        assertEquals(3, iter.getAdjNode());
+        assertTrue(iter.next());
+        assertEquals(1, iter.getAdjNode());
+        assertFalse(iter.next());
+
+        iter = explorer.setBaseNode(3);
+        assertTrue(iter.next());
+        assertEquals(2, iter.getAdjNode());
+        assertFalse(iter.next());
+
+        iter = explorer.setBaseNode(4);
+        assertTrue(iter.next());
+        assertEquals(0, iter.getAdjNode());
+        assertFalse(iter.next());
+
+        iter = explorer.setBaseNode(5);
+        assertTrue(iter.next());
+        assertEquals(0, iter.getAdjNode());
+        assertFalse(iter.next());
+
+        iter = explorer.setBaseNode(6);
+        assertTrue(iter.next());
+        assertEquals(0, iter.getAdjNode());
+        assertFalse(iter.next());
+    }
+
 }
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/NoTurnTest.java b/core/src/test/java/com/graphhopper/reader/osgb/NoTurnTest.java
index 1dfdd5f089..c905f03f46 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/NoTurnTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/NoTurnTest.java
@@ -1,5 +1,6 @@
 package com.graphhopper.reader.osgb;
 
+import static com.graphhopper.util.GHUtility.count;
 import static org.junit.Assert.assertEquals;
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
@@ -10,9 +11,11 @@
 import org.junit.Test;
 
 import com.graphhopper.routing.util.DefaultEdgeFilter;
+import com.graphhopper.routing.util.EdgeFilter;
 import com.graphhopper.storage.AbstractGraphStorageTester;
 import com.graphhopper.storage.GraphHopperStorage;
 import com.graphhopper.storage.TurnCostStorage;
+import com.graphhopper.util.EdgeIterator;
 import com.graphhopper.util.GHUtility;
 
 public class NoTurnTest extends AbstractOsItnReaderTest{
@@ -41,6 +44,39 @@ public void testNoTurnExceptMotorVehicleTrueFrom17To19() throws IOException {
     public void testNoTurnExceptMotorVehicleFalseFrom17To19() throws IOException {
         runNoMotorVehicleTurnFrom17To19Test("./src/test/resources/com/graphhopper/reader/os-itn-no-turn-except-for-motor-vehicles-false-crossroad.xml");
     }
+    /**
+     * No turn for Motor Vehicles
+     * @throws IOException
+     */
+    @Test
+    public void testNoTurnFromHeavitreeToDenmark() throws IOException {
+        boolean turnRestrictionsImport = true;
+        boolean is3D = false;
+        GraphHopperStorage graph = configureStorage(turnRestrictionsImport, is3D);
+
+        File file = new File("./src/test/resources/com/graphhopper/reader/os-itn-heavitree-road-denmark-road.xml");
+        readGraphFile(graph, file);
+        System.out.println("Node Count: " + graph.getNodes());
+//        assertEquals(5, graph.getNodes());
+//        checkSimpleNodeNetwork(graph);
+
+        DefaultEdgeFilter carOutFilter = new DefaultEdgeFilter(carEncoder, false, true);
+        carOutExplorer = graph.createEdgeExplorer(carOutFilter);
+        
+        GHUtility.printInfo(graph, 0, 20, EdgeFilter.ALL_EDGES);
+        System.out.println(count(carOutExplorer.setBaseNode(0)) + " node 0");
+        System.out.println(count(carOutExplorer.setBaseNode(1)) + " node 1");
+        assertEquals(4, count(carOutExplorer.setBaseNode(0)));
+        
+        EdgeIterator iter = carOutExplorer.setBaseNode(0);
+        while (iter.next()) {
+            System.out.println("Edge: " + iter.getEdge());
+        }
+        iter = carOutExplorer.setBaseNode(1);
+        while (iter.next()) {
+            System.out.println("Edge: " + iter.getEdge());
+        }
+    }
     
     private void runNoMotorVehicleTurnFrom17To19Test(String filename) throws IOException {
         boolean turnRestrictionsImport = true;
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/OsItnReaderTest.java b/core/src/test/java/com/graphhopper/reader/osgb/OsItnReaderTest.java
index f1e19b77ec..044c1edb83 100755
--- a/core/src/test/java/com/graphhopper/reader/osgb/OsItnReaderTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/OsItnReaderTest.java
@@ -213,539 +213,7 @@ public void testReadItnNoEntryMultipointCrossroad() throws IOException {
         assertFalse(iter.next());
     }
 
-    @Test
-    public void testReadItnNoEntryMultipointCrossroad_start_pos() throws IOException {
-        final boolean turnRestrictionsImport = true;
-        final boolean is3D = false;
-        final GraphHopperStorage graph = configureStorage(turnRestrictionsImport, is3D);
-
-        final File file = new File("./src/test/resources/com/graphhopper/reader/os-itn-no-entry-multipoint-crossroad-start_pos.xml");
-        final OsItnReader osItnReader = readGraphFile(graph, file);
-
-        logger.info("We have " + graph.getNodes() + " nodes");
-
-        logger.info("80 " + osItnReader.getNodeMap().get(4000000025277880l));
-        logger.info("81 " + osItnReader.getNodeMap().get(4000000025277881l));
-        logger.info("82 " + osItnReader.getNodeMap().get(4000000025277882l));
-        logger.info("83 " + osItnReader.getNodeMap().get(4000000025277883l));
-        logger.info("84 " + osItnReader.getNodeMap().get(4000000025277884l));
-        logger.info("85 " + osItnReader.getNodeMap().get(4000000025277885l));
-        logger.info("86 " + osItnReader.getNodeMap().get(4000000025277886l));
-
-        final EdgeExplorer explorer = graph.createEdgeExplorer(carOutEdges);
-        logger.info("Node 0 " + count(explorer.setBaseNode(0)));
-        logger.info("Node 1 " + count(explorer.setBaseNode(1)));
-        logger.info("Node 2 " + count(explorer.setBaseNode(2)));
-        logger.info("Node 3 " + count(explorer.setBaseNode(3)));
-        logger.info("Node 4 " + count(explorer.setBaseNode(4)));
-        logger.info("Node 5 " + count(explorer.setBaseNode(5)));
-        logger.info("Node 6 " + count(explorer.setBaseNode(6)));
-        logger.info("Node 7 " + count(explorer.setBaseNode(7)));
-        logger.info("Node 8 " + count(explorer.setBaseNode(8)));
-
-        EdgeIterator iter = explorer.setBaseNode(0);
-        while (iter.next()) {
-            logger.info("0 Adj node is " + iter.getAdjNode());
-        }
-        iter = explorer.setBaseNode(1);
-        while (iter.next()) {
-            logger.info("1 Adj node is " + iter.getAdjNode());
-        }
-        iter = explorer.setBaseNode(2);
-        while (iter.next()) {
-            logger.info("2 Adj node is " + iter.getAdjNode());
-        }
-        iter = explorer.setBaseNode(3);
-        while (iter.next()) {
-            logger.info("3 Adj node is " + iter.getAdjNode());
-        }
-        iter = explorer.setBaseNode(4);
-        while (iter.next()) {
-            logger.info("4 Adj node is " + iter.getAdjNode());
-        }
-        iter = explorer.setBaseNode(5);
-        while (iter.next()) {
-            logger.info("5 Adj node is " + iter.getAdjNode());
-        }
-        iter = explorer.setBaseNode(6);
-        while (iter.next()) {
-            logger.info("6 Adj node is " + iter.getAdjNode());
-        }
-        iter = explorer.setBaseNode(7);
-        while (iter.next()) {
-            logger.info("7 Adj node is " + iter.getAdjNode());
-        }
-        iter = explorer.setBaseNode(8);
-        while (iter.next()) {
-            logger.info("8 Adj node is " + iter.getAdjNode());
-        }
-
-        GHUtility.printInfo(graph, 0, 20, carOutEdges);
-        assertEquals(4, count(explorer.setBaseNode(0)));
-        assertEquals(1, count(explorer.setBaseNode(1)));
-        assertEquals(1, count(explorer.setBaseNode(2)));
-        assertEquals(2, count(explorer.setBaseNode(3)));
-        assertEquals(1, count(explorer.setBaseNode(4)));
-        assertEquals(1, count(explorer.setBaseNode(5)));
-        assertEquals(1, count(explorer.setBaseNode(6)));
-
-        // Assert that this is true
-        iter = explorer.setBaseNode(0);
-        assertTrue(iter.next());
-        assertEquals(6, iter.getAdjNode());
-        assertTrue(iter.next());
-        assertEquals(5, iter.getAdjNode());
-        assertTrue(iter.next());
-        assertEquals(4, iter.getAdjNode());
-        assertTrue(iter.next());
-        assertEquals(3, iter.getAdjNode());
-        assertFalse(iter.next());
-
-        iter = explorer.setBaseNode(1);
-        assertTrue(iter.next());
-        assertEquals(2, iter.getAdjNode());
-        assertFalse(iter.next());
-
-        iter = explorer.setBaseNode(2);
-        assertTrue(iter.next());
-        assertEquals(3, iter.getAdjNode());
-        assertFalse(iter.next());
-
-        iter = explorer.setBaseNode(3);
-        assertTrue(iter.next());
-        assertEquals(0, iter.getAdjNode());
-        assertTrue(iter.next());
-        assertEquals(2, iter.getAdjNode());
-        assertFalse(iter.next());
-
-        iter = explorer.setBaseNode(4);
-        assertTrue(iter.next());
-        assertEquals(0, iter.getAdjNode());
-        assertFalse(iter.next());
-
-        iter = explorer.setBaseNode(5);
-        assertTrue(iter.next());
-        assertEquals(0, iter.getAdjNode());
-        assertFalse(iter.next());
-
-        iter = explorer.setBaseNode(6);
-        assertTrue(iter.next());
-        assertEquals(0, iter.getAdjNode());
-        assertFalse(iter.next());
-    }
-
-    @Test
-    public void testReadItnNoEntryMultipointCrossroad_start_neg() throws IOException {
-        final boolean turnRestrictionsImport = true;
-        final boolean is3D = false;
-        final GraphHopperStorage graph = configureStorage(turnRestrictionsImport, is3D);
-
-        final File file = new File("./src/test/resources/com/graphhopper/reader/os-itn-no-entry-multipoint-crossroad-start_neg.xml");
-        final OsItnReader osItnReader = readGraphFile(graph, file);
-
-        logger.info("We have " + graph.getNodes() + " nodes");
-
-        logger.info("80 " + osItnReader.getNodeMap().get(4000000025277880l));
-        logger.info("81 " + osItnReader.getNodeMap().get(4000000025277881l));
-        logger.info("82 " + osItnReader.getNodeMap().get(4000000025277882l));
-        logger.info("83 " + osItnReader.getNodeMap().get(4000000025277883l));
-        logger.info("84 " + osItnReader.getNodeMap().get(4000000025277884l));
-        logger.info("85 " + osItnReader.getNodeMap().get(4000000025277885l));
-        logger.info("86 " + osItnReader.getNodeMap().get(4000000025277886l));
-
-        final EdgeExplorer explorer = graph.createEdgeExplorer(carOutEdges);
-        logger.info("Node 0 " + count(explorer.setBaseNode(0)));
-        logger.info("Node 1 " + count(explorer.setBaseNode(1)));
-        logger.info("Node 2 " + count(explorer.setBaseNode(2)));
-        logger.info("Node 3 " + count(explorer.setBaseNode(3)));
-        logger.info("Node 4 " + count(explorer.setBaseNode(4)));
-        logger.info("Node 5 " + count(explorer.setBaseNode(5)));
-        logger.info("Node 6 " + count(explorer.setBaseNode(6)));
-        logger.info("Node 7 " + count(explorer.setBaseNode(7)));
-        logger.info("Node 8 " + count(explorer.setBaseNode(8)));
-
-        EdgeIterator iter = explorer.setBaseNode(0);
-        while (iter.next()) {
-            logger.info("0 Adj node is " + iter.getAdjNode());
-        }
-        iter = explorer.setBaseNode(1);
-        while (iter.next()) {
-            logger.info("1 Adj node is " + iter.getAdjNode());
-        }
-        iter = explorer.setBaseNode(2);
-        while (iter.next()) {
-            logger.info("2 Adj node is " + iter.getAdjNode());
-        }
-        iter = explorer.setBaseNode(3);
-        while (iter.next()) {
-            logger.info("3 Adj node is " + iter.getAdjNode());
-        }
-        iter = explorer.setBaseNode(4);
-        while (iter.next()) {
-            logger.info("4 Adj node is " + iter.getAdjNode());
-        }
-        iter = explorer.setBaseNode(5);
-        while (iter.next()) {
-            logger.info("5 Adj node is " + iter.getAdjNode());
-        }
-        iter = explorer.setBaseNode(6);
-        while (iter.next()) {
-            logger.info("6 Adj node is " + iter.getAdjNode());
-        }
-        iter = explorer.setBaseNode(7);
-        while (iter.next()) {
-            logger.info("7 Adj node is " + iter.getAdjNode());
-        }
-        iter = explorer.setBaseNode(8);
-        while (iter.next()) {
-            logger.info("8 Adj node is " + iter.getAdjNode());
-        }
-
-        GHUtility.printInfo(graph, 0, 20, carOutEdges);
-        assertEquals(4, count(explorer.setBaseNode(0)));
-        assertEquals(0, count(explorer.setBaseNode(1)));
-        assertEquals(2, count(explorer.setBaseNode(2)));
-        assertEquals(2, count(explorer.setBaseNode(3)));
-        assertEquals(1, count(explorer.setBaseNode(4)));
-        assertEquals(1, count(explorer.setBaseNode(5)));
-        assertEquals(1, count(explorer.setBaseNode(6)));
-
-        // Assert that this is true
-        iter = explorer.setBaseNode(0);
-        assertTrue(iter.next());
-        assertEquals(6, iter.getAdjNode());
-        assertTrue(iter.next());
-        assertEquals(5, iter.getAdjNode());
-        assertTrue(iter.next());
-        assertEquals(4, iter.getAdjNode());
-        assertTrue(iter.next());
-        assertEquals(3, iter.getAdjNode());
-        assertFalse(iter.next());
-
-        iter = explorer.setBaseNode(1);
-        assertFalse(iter.next());
-
-        iter = explorer.setBaseNode(2);
-        assertTrue(iter.next());
-        assertEquals(3, iter.getAdjNode());
-        assertTrue(iter.next());
-        assertEquals(1, iter.getAdjNode());
-        assertFalse(iter.next());
-
-        iter = explorer.setBaseNode(3);
-        assertTrue(iter.next());
-        assertEquals(0, iter.getAdjNode());
-        assertTrue(iter.next());
-        assertEquals(2, iter.getAdjNode());
-        assertFalse(iter.next());
-
-        iter = explorer.setBaseNode(4);
-        assertTrue(iter.next());
-        assertEquals(0, iter.getAdjNode());
-        assertFalse(iter.next());
-
-        iter = explorer.setBaseNode(5);
-        assertTrue(iter.next());
-        assertEquals(0, iter.getAdjNode());
-        assertFalse(iter.next());
-
-        iter = explorer.setBaseNode(6);
-        assertTrue(iter.next());
-        assertEquals(0, iter.getAdjNode());
-        assertFalse(iter.next());
-    }
-
-    @Test
-    public void testReadItnNoEntryMultipointCrossroad_end_pos() throws IOException {
-        final boolean turnRestrictionsImport = true;
-        final boolean is3D = false;
-        final GraphHopperStorage graph = configureStorage(turnRestrictionsImport, is3D);
-
-        final File file = new File("./src/test/resources/com/graphhopper/reader/os-itn-no-entry-multipoint-crossroad-end_pos.xml");
-        final OsItnReader osItnReader = readGraphFile(graph, file);
-
-        logger.info("We have " + graph.getNodes() + " nodes");
-
-        logger.info("80 " + osItnReader.getNodeMap().get(4000000025277880l));
-        logger.info("81 " + osItnReader.getNodeMap().get(4000000025277881l));
-        logger.info("82 " + osItnReader.getNodeMap().get(4000000025277882l));
-        logger.info("83 " + osItnReader.getNodeMap().get(4000000025277883l));
-        logger.info("84 " + osItnReader.getNodeMap().get(4000000025277884l));
-        logger.info("85 " + osItnReader.getNodeMap().get(4000000025277885l));
-        logger.info("86 " + osItnReader.getNodeMap().get(4000000025277886l));
-
-        final EdgeExplorer explorer = graph.createEdgeExplorer(carOutEdges);
-        logger.info("Node 0 " + count(explorer.setBaseNode(0)));
-        logger.info("Node 1 " + count(explorer.setBaseNode(1)));
-        logger.info("Node 2 " + count(explorer.setBaseNode(2)));
-        logger.info("Node 3 " + count(explorer.setBaseNode(3)));
-        logger.info("Node 4 " + count(explorer.setBaseNode(4)));
-        logger.info("Node 5 " + count(explorer.setBaseNode(5)));
-        logger.info("Node 6 " + count(explorer.setBaseNode(6)));
-        logger.info("Node 7 " + count(explorer.setBaseNode(7)));
-        logger.info("Node 8 " + count(explorer.setBaseNode(8)));
-
-        EdgeIterator iter = explorer.setBaseNode(0);
-        while (iter.next()) {
-            logger.info("0 Adj node is " + iter.getAdjNode());
-        }
-        iter = explorer.setBaseNode(1);
-        while (iter.next()) {
-            logger.info("1 Adj node is " + iter.getAdjNode());
-        }
-        iter = explorer.setBaseNode(2);
-        while (iter.next()) {
-            logger.info("2 Adj node is " + iter.getAdjNode());
-        }
-        iter = explorer.setBaseNode(3);
-        while (iter.next()) {
-            logger.info("3 Adj node is " + iter.getAdjNode());
-        }
-        iter = explorer.setBaseNode(4);
-        while (iter.next()) {
-            logger.info("4 Adj node is " + iter.getAdjNode());
-        }
-        iter = explorer.setBaseNode(5);
-        while (iter.next()) {
-            logger.info("5 Adj node is " + iter.getAdjNode());
-        }
-        iter = explorer.setBaseNode(6);
-        while (iter.next()) {
-            logger.info("6 Adj node is " + iter.getAdjNode());
-        }
-        iter = explorer.setBaseNode(7);
-        while (iter.next()) {
-            logger.info("7 Adj node is " + iter.getAdjNode());
-        }
-        iter = explorer.setBaseNode(8);
-        while (iter.next()) {
-            logger.info("8 Adj node is " + iter.getAdjNode());
-        }
-        /*
-         *
-         * 2014-11-06 15:37:00,201 [main] INFO
-         * com.graphhopper.reader.osgb.OsItnReaderTest - Node 0 3 2014-11-06
-         * 15:37:00,202 [main] INFO com.graphhopper.reader.osgb.OsItnReaderTest
-         * - Node 1 2 2014-11-06 15:37:00,203 [main] INFO
-         * com.graphhopper.reader.osgb.OsItnReaderTest - Node 2 2 2014-11-06
-         * 15:37:00,204 [main] INFO com.graphhopper.reader.osgb.OsItnReaderTest
-         * - Node 3 2 2014-11-06 15:37:00,204 [main] INFO
-         * com.graphhopper.reader.osgb.OsItnReaderTest - Node 4 1 2014-11-06
-         * 15:37:00,205 [main] INFO com.graphhopper.reader.osgb.OsItnReaderTest
-         * - Node 5 2 2014-11-06 15:37:00,205 [main] INFO
-         * com.graphhopper.reader.osgb.OsItnReaderTest - Node 6 1 2014-11-06
-         * 15:37:00,205 [main] INFO com.graphhopper.reader.osgb.OsItnReaderTest
-         * - Node 7 1 2014-11-06 15:37:00,205 [main] INFO
-         * com.graphhopper.reader.osgb.OsItnReaderTest - Node 8 1
-         */
-
-        assertEquals(3, count(explorer.setBaseNode(0)));
-        assertEquals(1, count(explorer.setBaseNode(1)));
-        assertEquals(2, count(explorer.setBaseNode(2)));
-        assertEquals(2, count(explorer.setBaseNode(3)));
-        assertEquals(1, count(explorer.setBaseNode(4)));
-        assertEquals(1, count(explorer.setBaseNode(5)));
-        assertEquals(1, count(explorer.setBaseNode(6)));
-
-        GHUtility.printInfo(graph, 0, 20, EdgeFilter.ALL_EDGES);
-        // Assert that this is true
-        iter = explorer.setBaseNode(0);
-        assertTrue(iter.next());
-        assertEquals(6, iter.getAdjNode());
-        assertTrue(iter.next());
-        assertEquals(5, iter.getAdjNode());
-        assertTrue(iter.next());
-        assertEquals(4, iter.getAdjNode());
-        assertFalse(iter.next());
-
-        iter = explorer.setBaseNode(1);
-        assertTrue(iter.next());
-        assertEquals(2, iter.getAdjNode());
-        assertFalse(iter.next());
-
-        iter = explorer.setBaseNode(2);
-        assertTrue(iter.next());
-        assertEquals(3, iter.getAdjNode());
-        assertTrue(iter.next());
-        assertEquals(1, iter.getAdjNode());
-        assertFalse(iter.next());
-
-        iter = explorer.setBaseNode(3);
-        assertTrue(iter.next());
-        assertEquals(0, iter.getAdjNode());
-        assertTrue(iter.next());
-        assertEquals(2, iter.getAdjNode());
-        assertFalse(iter.next());
-
-        iter = explorer.setBaseNode(4);
-        assertTrue(iter.next());
-        assertEquals(0, iter.getAdjNode());
-        assertFalse(iter.next());
-
-        iter = explorer.setBaseNode(5);
-        assertTrue(iter.next());
-        assertEquals(0, iter.getAdjNode());
-        assertFalse(iter.next());
-
-        iter = explorer.setBaseNode(6);
-        assertTrue(iter.next());
-        assertEquals(0, iter.getAdjNode());
-        assertFalse(iter.next());
-    }
-
-    @Test
-    public void testReadItnNoEntryMultipointCrossroad_end_neg() throws IOException {
-        final boolean turnRestrictionsImport = true;
-        final boolean is3D = false;
-        final GraphHopperStorage graph = configureStorage(turnRestrictionsImport, is3D);
-
-        final File file = new File("./src/test/resources/com/graphhopper/reader/os-itn-no-entry-multipoint-crossroad-end_neg.xml");
-        final OsItnReader osItnReader = readGraphFile(graph, file);
-
-        logger.info("We have " + graph.getNodes() + " nodes");
-
-        logger.info("80 " + osItnReader.getNodeMap().get(4000000025277880l));
-        logger.info("81 " + osItnReader.getNodeMap().get(4000000025277881l));
-        logger.info("82 " + osItnReader.getNodeMap().get(4000000025277882l));
-        logger.info("83 " + osItnReader.getNodeMap().get(4000000025277883l));
-        logger.info("84 " + osItnReader.getNodeMap().get(4000000025277884l));
-        logger.info("85 " + osItnReader.getNodeMap().get(4000000025277885l));
-        logger.info("86 " + osItnReader.getNodeMap().get(4000000025277886l));
-
-        final EdgeExplorer explorer = graph.createEdgeExplorer(carOutEdges);
-        logger.info("Node 0 " + count(explorer.setBaseNode(0)));
-        logger.info("Node 1 " + count(explorer.setBaseNode(1)));
-        logger.info("Node 2 " + count(explorer.setBaseNode(2)));
-        logger.info("Node 3 " + count(explorer.setBaseNode(3)));
-        logger.info("Node 4 " + count(explorer.setBaseNode(4)));
-        logger.info("Node 5 " + count(explorer.setBaseNode(5)));
-        logger.info("Node 6 " + count(explorer.setBaseNode(6)));
-        logger.info("Node 7 " + count(explorer.setBaseNode(7)));
-        logger.info("Node 8 " + count(explorer.setBaseNode(8)));
-
-        EdgeIterator iter = explorer.setBaseNode(0);
-        while (iter.next()) {
-            logger.info("0 Adj node is " + iter.getAdjNode());
-        }
-        iter = explorer.setBaseNode(1);
-        while (iter.next()) {
-            logger.info("1 Adj node is " + iter.getAdjNode());
-        }
-        iter = explorer.setBaseNode(2);
-        while (iter.next()) {
-            logger.info("2 Adj node is " + iter.getAdjNode());
-        }
-        iter = explorer.setBaseNode(3);
-        while (iter.next()) {
-            logger.info("3 Adj node is " + iter.getAdjNode());
-        }
-        iter = explorer.setBaseNode(4);
-        while (iter.next()) {
-            logger.info("4 Adj node is " + iter.getAdjNode());
-        }
-        iter = explorer.setBaseNode(5);
-        while (iter.next()) {
-            logger.info("5 Adj node is " + iter.getAdjNode());
-        }
-        iter = explorer.setBaseNode(6);
-        while (iter.next()) {
-            logger.info("6 Adj node is " + iter.getAdjNode());
-        }
-        iter = explorer.setBaseNode(7);
-        while (iter.next()) {
-            logger.info("7 Adj node is " + iter.getAdjNode());
-        }
-        iter = explorer.setBaseNode(8);
-        while (iter.next()) {
-            logger.info("8 Adj node is " + iter.getAdjNode());
-        }
-
-        GHUtility.printInfo(graph, 0, 20, EdgeFilter.ALL_EDGES);
-        assertEquals(4, count(explorer.setBaseNode(0)));
-        assertEquals(1, count(explorer.setBaseNode(1)));
-        assertEquals(2, count(explorer.setBaseNode(2)));
-        assertEquals(1, count(explorer.setBaseNode(3)));
-        assertEquals(1, count(explorer.setBaseNode(4)));
-        assertEquals(1, count(explorer.setBaseNode(5)));
-        assertEquals(1, count(explorer.setBaseNode(6)));
-        /*
-         * 2014-11-06 15:39:18,574 [main] INFO
-         * com.graphhopper.reader.osgb.OsItnReaderTest - 0 Adj node is 8
-         * 2014-11-06 15:39:18,575 [main] INFO
-         * com.graphhopper.reader.osgb.OsItnReaderTest - 0 Adj node is 7
-         * 2014-11-06 15:39:18,575 [main] INFO
-         * com.graphhopper.reader.osgb.OsItnReaderTest - 0 Adj node is 6
-         * 2014-11-06 15:39:18,575 [main] INFO
-         * com.graphhopper.reader.osgb.OsItnReaderTest - 0 Adj node is 5
-         * 2014-11-06 15:39:18,575 [main] INFO
-         * com.graphhopper.reader.osgb.OsItnReaderTest - 1 Adj node is 2
-         * 2014-11-06 15:39:18,575 [main] INFO
-         * com.graphhopper.reader.osgb.OsItnReaderTest - 1 Adj node is 4
-         * 2014-11-06 15:39:18,575 [main] INFO
-         * com.graphhopper.reader.osgb.OsItnReaderTest - 2 Adj node is 3
-         * 2014-11-06 15:39:18,575 [main] INFO
-         * com.graphhopper.reader.osgb.OsItnReaderTest - 2 Adj node is 1
-         * 2014-11-06 15:39:18,575 [main] INFO
-         * com.graphhopper.reader.osgb.OsItnReaderTest - 3 Adj node is 5
-         * 2014-11-06 15:39:18,575 [main] INFO
-         * com.graphhopper.reader.osgb.OsItnReaderTest - 3 Adj node is 2
-         * 2014-11-06 15:39:18,575 [main] INFO
-         * com.graphhopper.reader.osgb.OsItnReaderTest - 4 Adj node is 1
-         * 2014-11-06 15:39:18,575 [main] INFO
-         * com.graphhopper.reader.osgb.OsItnReaderTest - 5 Adj node is 3
-         * 2014-11-06 15:39:18,575 [main] INFO
-         * com.graphhopper.reader.osgb.OsItnReaderTest - 6 Adj node is 0
-         * 2014-11-06 15:39:18,575 [main] INFO
-         * com.graphhopper.reader.osgb.OsItnReaderTest - 7 Adj node is 0
-         * 2014-11-06 15:39:18,575 [main] INFO
-         * com.graphhopper.reader.osgb.OsItnReaderTest - 8 Adj node is 0
-         */
-
-        // Assert that this is true
-        iter = explorer.setBaseNode(0);
-        assertTrue(iter.next());
-        assertEquals(6, iter.getAdjNode());
-        assertTrue(iter.next());
-        assertEquals(5, iter.getAdjNode());
-        assertTrue(iter.next());
-        assertEquals(4, iter.getAdjNode());
-        assertTrue(iter.next());
-        assertEquals(3, iter.getAdjNode());
-        assertFalse(iter.next());
-
-        iter = explorer.setBaseNode(1);
-        assertTrue(iter.next());
-        assertEquals(2, iter.getAdjNode());
-        assertFalse(iter.next());
-
-        iter = explorer.setBaseNode(2);
-        assertTrue(iter.next());
-        assertEquals(3, iter.getAdjNode());
-        assertTrue(iter.next());
-        assertEquals(1, iter.getAdjNode());
-        assertFalse(iter.next());
-
-        iter = explorer.setBaseNode(3);
-        assertTrue(iter.next());
-        assertEquals(2, iter.getAdjNode());
-        assertFalse(iter.next());
-
-        iter = explorer.setBaseNode(4);
-        assertTrue(iter.next());
-        assertEquals(0, iter.getAdjNode());
-        assertFalse(iter.next());
-
-        iter = explorer.setBaseNode(5);
-        assertTrue(iter.next());
-        assertEquals(0, iter.getAdjNode());
-        assertFalse(iter.next());
-
-        iter = explorer.setBaseNode(6);
-        assertTrue(iter.next());
-        assertEquals(0, iter.getAdjNode());
-        assertFalse(iter.next());
-    }
-
+ 
     @Test
     public void testReadSimpleCrossRoads() throws IOException {
         final boolean turnRestrictionsImport = false;
diff --git a/core/src/test/resources/com/graphhopper/reader/os-itn-bampfylde-street-cheeke-street.xml b/core/src/test/resources/com/graphhopper/reader/os-itn-bampfylde-street-cheeke-street.xml
new file mode 100644
index 0000000000..1579ea9b4a
--- /dev/null
+++ b/core/src/test/resources/com/graphhopper/reader/os-itn-bampfylde-street-cheeke-street.xml
@@ -0,0 +1,350 @@
+<?xml version='1.0' encoding='UTF-8'?>
+<osgb:FeatureCollection xmlns:osgb='http://www.ordnancesurvey.co.uk/xml/namespaces/osgb'
+	xmlns:gml='http://www.opengis.net/gml' xmlns:xlink='http://www.w3.org/1999/xlink' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
+	xsi:schemaLocation='http://www.ordnancesurvey.co.uk/xml/namespaces/osgb http://www.ordnancesurvey.co.uk/xml/schema/v7/OSDNFFeatures.xsd'
+	fid='GDS-58096-1'>
+	<gml:description>Ordnance Survey, (c) Crown Copyright. All rights reserved, 2009-07-30</gml:description>
+	<gml:boundedBy>
+		<gml:null>unknown</gml:null>
+	</gml:boundedBy>
+	<osgb:queryTime>2009-07-30T02:01:07</osgb:queryTime>
+	<osgb:queryExtent>
+		<osgb:Rectangle srsName='osgb:BNG'>
+			<gml:coordinates>291000.000,92000.000 293000.000,94000.000</gml:coordinates>
+		</osgb:Rectangle>
+	</osgb:queryExtent>
+	<osgb:roadInformationMember>
+		<osgb:RoadRouteInformation fid='osgb4000000025220440'>
+			<osgb:version>2</osgb:version>
+			<osgb:versionDate>2005-09-13</osgb:versionDate>
+			<osgb:theme>Road Routing Information</osgb:theme>
+			<osgb:changeHistory>
+				<osgb:changeDate>2004-06-15</osgb:changeDate>
+				<osgb:reasonForChange>New</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:descriptiveGroup>Road Routing Information</osgb:descriptiveGroup>
+			<osgb:vehicleQualifier>
+				<osgb:use exceptFor='true'>Local Buses</osgb:use>
+				<osgb:use exceptFor='true'>Taxis</osgb:use>
+			</osgb:vehicleQualifier>
+			<osgb:environmentQualifier>
+				<osgb:instruction>No Entry</osgb:instruction>
+			</osgb:environmentQualifier>
+			<osgb:directedLink orientation='-' xlink:href='#osgb4000000025336187' />
+			<osgb:distanceFromStart>66.13</osgb:distanceFromStart>
+			<osgb:point>
+				<gml:Point srsName='osgb:BNG'>
+					<gml:coordinates>292543.000,92974.000</gml:coordinates>
+				</gml:Point>
+			</osgb:point>
+		</osgb:RoadRouteInformation>
+	</osgb:roadInformationMember>
+	<osgb:roadInformationMember>
+		<osgb:RoadRouteInformation fid='osgb4000000025220493'>
+			<osgb:version>2</osgb:version>
+			<osgb:versionDate>2005-09-13</osgb:versionDate>
+			<osgb:theme>Road Routing Information</osgb:theme>
+			<osgb:changeHistory>
+				<osgb:changeDate>2002-12-05</osgb:changeDate>
+				<osgb:reasonForChange>New</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:descriptiveGroup>Road Routing Information</osgb:descriptiveGroup>
+			<osgb:vehicleQualifier>
+				<osgb:use exceptFor='true'>Local Buses</osgb:use>
+			</osgb:vehicleQualifier>
+			<osgb:environmentQualifier>
+				<osgb:instruction>Mandatory Turn</osgb:instruction>
+			</osgb:environmentQualifier>
+			<osgb:directedLink orientation='-' xlink:href='#osgb4000000025321220' />
+			<osgb:directedLink orientation='+' xlink:href='#osgb4000000025336187' />
+		</osgb:RoadRouteInformation>
+	</osgb:roadInformationMember>
+	<osgb:roadMember>
+		<osgb:Road fid='osgb4000000025357269'>
+			<osgb:version>3</osgb:version>
+			<osgb:versionDate>2009-06-08</osgb:versionDate>
+			<osgb:theme>Road Network</osgb:theme>
+			<osgb:changeHistory>
+				<osgb:changeDate>2003-03-13</osgb:changeDate>
+				<osgb:reasonForChange>New</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2009-04-27</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:descriptiveGroup>Named Road</osgb:descriptiveGroup>
+			<osgb:roadName>BAMPFYLDE STREET</osgb:roadName>
+			<osgb:networkMember xlink:href='#osgb4000000025321226' />
+			<osgb:networkMember xlink:href='#osgb4000000025336199' />
+			<osgb:networkMember xlink:href='#osgb4000000025336200' />
+			<osgb:networkMember xlink:href='#osgb4000000025336213' />
+			<osgb:networkMember xlink:href='#osgb4000000025346093' />
+			<osgb:networkMember xlink:href='#osgb4000000025346128' />
+			<osgb:networkMember xlink:href='#osgb4000000025353492' />
+			<osgb:boundedBy>
+				<gml:Box srsName='osgb:BNG'>
+					<gml:coordinates>
+					292432.431,92815.000 
+					292639.000,93064.000
+					</gml:coordinates>
+				</gml:Box>
+			</osgb:boundedBy>
+		</osgb:Road>
+	</osgb:roadMember>
+	<osgb:roadMember>
+		<osgb:Road fid='osgb4000000025364082'>
+			<osgb:version>2</osgb:version>
+			<osgb:versionDate>2005-09-13</osgb:versionDate>
+			<osgb:theme>Road Network</osgb:theme>
+			<osgb:changeHistory>
+				<osgb:changeDate>2003-03-13</osgb:changeDate>
+				<osgb:reasonForChange>New</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:descriptiveGroup>Named Road</osgb:descriptiveGroup>
+			<osgb:roadName>CHEEKE STREET</osgb:roadName>
+			<osgb:networkMember xlink:href='#osgb4000000025321237' />
+			<osgb:networkMember xlink:href='#osgb4000000025336187' />
+			<osgb:networkMember xlink:href='#osgb4000000025336190' />
+			<osgb:networkMember xlink:href='#osgb4000000025346092' />
+			<osgb:networkMember xlink:href='#osgb4000000025351705' />
+			<osgb:boundedBy>
+				<gml:Box srsName='osgb:BNG'>
+					<gml:coordinates>292496.231,92870.000 
+					292625.000,93020.730</gml:coordinates>
+				</gml:Box>
+			</osgb:boundedBy>
+		</osgb:Road>
+	</osgb:roadMember>
+	<osgb:networkMember>
+		<osgb:RoadLink fid='osgb4000000025321237'>
+			<osgb:version>3</osgb:version>
+			<osgb:versionDate>2005-09-16</osgb:versionDate>
+			<osgb:theme>Road Network</osgb:theme>
+			<osgb:changeHistory>
+				<osgb:changeDate>2002-12-06</osgb:changeDate>
+				<osgb:reasonForChange>New</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2002-12-06</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:descriptiveGroup>Road Topology</osgb:descriptiveGroup>
+			<osgb:descriptiveTerm>Local Street</osgb:descriptiveTerm>
+			<osgb:natureOfRoad>Single Carriageway</osgb:natureOfRoad>
+			<osgb:length>76.06</osgb:length>
+			<osgb:polyline>
+				<gml:LineString srsName='osgb:BNG'>
+					<gml:coordinates>292543.000,92974.000 
+					292548.000,92970.000
+					292591.000,92935.000
+					292597.000,92930.000 
+					292602.000,92926.000
+					</gml:coordinates>
+				</gml:LineString>
+			</osgb:polyline>
+			<osgb:directedNode orientation='-' xlink:href='#osgb4000000025279099' />
+			<osgb:directedNode orientation='+' xlink:href='#osgb4000000025279095' />
+			<osgb:referenceToTopographicArea xlink:href='#osgb1000002062221602' />
+			<osgb:referenceToTopographicArea xlink:href='#osgb1000002062221601' />
+			<osgb:referenceToTopographicArea xlink:href='#osgb1000002062221607' />
+		</osgb:RoadLink>
+	</osgb:networkMember>
+	<osgb:networkMember>
+		<osgb:RoadLink fid='osgb4000000025336187'>
+			<osgb:version>4</osgb:version>
+			<osgb:versionDate>2005-09-16</osgb:versionDate>
+			<osgb:theme>Road Network</osgb:theme>
+			<osgb:changeHistory>
+				<osgb:changeDate>2002-12-05</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2002-12-05</osgb:changeDate>
+				<osgb:reasonForChange>New</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:descriptiveGroup>Road Topology</osgb:descriptiveGroup>
+			<osgb:descriptiveTerm>Local Street</osgb:descriptiveTerm>
+			<osgb:natureOfRoad>Single Carriageway</osgb:natureOfRoad>
+			<osgb:length>66.13</osgb:length>
+			<osgb:polyline>
+				<gml:LineString srsName='osgb:BNG'>
+					<gml:coordinates>292496.231,93020.730			 
+					292518.000,93000.000 			
+					292538.000,92979.000
+					292543.000,92974.000		
+					</gml:coordinates>
+				</gml:LineString>
+			</osgb:polyline>
+			<osgb:directedNode orientation='-' xlink:href='#osgb4000000025279142' />
+			<osgb:directedNode orientation='+' xlink:href='#osgb4000000025279099' />
+			<osgb:referenceToTopographicArea xlink:href='#osgb1000002062221607' />
+			<osgb:referenceToTopographicArea xlink:href='#osgb1000002070388140' />
+			<osgb:referenceToTopographicArea xlink:href='#osgb1000002070388149' />
+		</osgb:RoadLink>
+	</osgb:networkMember>
+	<osgb:networkMember>
+		<osgb:RoadLink fid='osgb4000000025336199'>
+			<osgb:version>4</osgb:version>
+			<osgb:versionDate>2009-03-26</osgb:versionDate>
+			<osgb:theme>Road Network</osgb:theme>
+			<osgb:changeHistory>
+				<osgb:changeDate>2003-01-21</osgb:changeDate>
+				<osgb:reasonForChange>New</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2003-01-21</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2009-02-10</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:descriptiveGroup>Road Topology</osgb:descriptiveGroup>
+			<osgb:descriptiveTerm>Local Street</osgb:descriptiveTerm>
+			<osgb:natureOfRoad>Single Carriageway</osgb:natureOfRoad>
+			<osgb:length>54.49</osgb:length>
+			<osgb:polyline>
+				<gml:LineString srsName='osgb:BNG'>
+					<gml:coordinates>292583.000,93011.000 292571.631,92999.940 292547.630,92978.155 292543.000,92974.000</gml:coordinates>
+				</gml:LineString>
+			</osgb:polyline>
+			<osgb:directedNode orientation='-' xlink:href='#osgb4000000025279143' />
+			<osgb:directedNode orientation='+' xlink:href='#osgb4000000025279099' />
+			<osgb:referenceToTopographicArea xlink:href='#osgb1000002062221607' />
+			<osgb:referenceToTopographicArea xlink:href='#osgb1000002062221609' />
+			<osgb:referenceToTopographicArea xlink:href='#osgb1000002062264747' />
+		</osgb:RoadLink>
+	</osgb:networkMember>
+	<osgb:networkMember>
+		<osgb:RoadLink fid='osgb4000000025336213'>
+			<osgb:version>4</osgb:version>
+			<osgb:versionDate>2006-01-25</osgb:versionDate>
+			<osgb:theme>Road Network</osgb:theme>
+			<osgb:changeHistory>
+				<osgb:changeDate>2002-12-05</osgb:changeDate>
+				<osgb:reasonForChange>New</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2002-12-05</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2005-10-21</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:descriptiveGroup>Road Topology</osgb:descriptiveGroup>
+			<osgb:descriptiveTerm>Local Street</osgb:descriptiveTerm>
+			<osgb:natureOfRoad>Single Carriageway</osgb:natureOfRoad>
+			<osgb:length>52.34</osgb:length>
+			<osgb:polyline>
+				<gml:LineString srsName='osgb:BNG'>
+					<gml:coordinates>292543.000,92974.000 292538.000,92969.000 292505.000,92938.000 </gml:coordinates>
+				</gml:LineString>
+			</osgb:polyline>
+			<osgb:directedNode orientation='-' xlink:href='#osgb4000000025279099' />
+			<osgb:directedNode orientation='+' xlink:href='#osgb4000000025279094' />
+			<osgb:referenceToTopographicArea xlink:href='#osgb1000002062221607' />
+			<osgb:referenceToTopographicArea xlink:href='#osgb1000002070387866' />
+			<osgb:referenceToTopographicArea xlink:href='#osgb1000002070652840' />
+		</osgb:RoadLink>
+	</osgb:networkMember>
+	<osgb:networkMember>
+		<osgb:RoadNode fid='osgb4000000025279094'>
+			<osgb:version>3</osgb:version>
+			<osgb:versionDate>2005-09-13</osgb:versionDate>
+			<osgb:theme>Road Network</osgb:theme>
+			<osgb:changeHistory>
+				<osgb:changeDate>2002-12-05</osgb:changeDate>
+				<osgb:reasonForChange>New</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2002-12-05</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:descriptiveGroup>Road Topology</osgb:descriptiveGroup>
+			<osgb:point>
+				<gml:Point srsName='osgb:BNG'>
+					<gml:coordinates>292505.000,92938.000</gml:coordinates>
+				</gml:Point>
+			</osgb:point>
+			<osgb:referenceToTopographicArea xlink:href='#osgb1000002070387866' />
+		</osgb:RoadNode>
+	</osgb:networkMember>
+	<osgb:networkMember>
+		<osgb:RoadNode fid='osgb4000000025279095'>
+			<osgb:version>2</osgb:version>
+			<osgb:versionDate>2005-09-13</osgb:versionDate>
+			<osgb:theme>Road Network</osgb:theme>
+			<osgb:changeHistory>
+				<osgb:changeDate>2002-12-05</osgb:changeDate>
+				<osgb:reasonForChange>New</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:descriptiveGroup>Road Topology</osgb:descriptiveGroup>
+			<osgb:point>
+				<gml:Point srsName='osgb:BNG'>
+					<gml:coordinates>292602.000,92926.000</gml:coordinates>
+				</gml:Point>
+			</osgb:point>
+			<osgb:referenceToTopographicArea xlink:href='#osgb1000002062221602' />
+		</osgb:RoadNode>
+	</osgb:networkMember>
+	<osgb:networkMember>
+		<osgb:RoadNode fid='osgb4000000025279099'>
+			<osgb:version>2</osgb:version>
+			<osgb:versionDate>2005-09-13</osgb:versionDate>
+			<osgb:theme>Road Network</osgb:theme>
+			<osgb:changeHistory>
+				<osgb:changeDate>2003-01-21</osgb:changeDate>
+				<osgb:reasonForChange>New</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:descriptiveGroup>Road Topology</osgb:descriptiveGroup>
+			<osgb:point>
+				<gml:Point srsName='osgb:BNG'>
+					<gml:coordinates>292543.000,92974.000</gml:coordinates>
+				</gml:Point>
+			</osgb:point>
+			<osgb:referenceToTopographicArea xlink:href='#osgb1000002062221607' />
+		</osgb:RoadNode>
+	</osgb:networkMember>
+	<osgb:networkMember>
+		<osgb:RoadNode fid='osgb4000000025279142'>
+			<osgb:version>2</osgb:version>
+			<osgb:versionDate>2005-09-13</osgb:versionDate>
+			<osgb:theme>Road Network</osgb:theme>
+			<osgb:changeHistory>
+				<osgb:changeDate>2002-12-05</osgb:changeDate>
+				<osgb:reasonForChange>New</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:descriptiveGroup>Road Topology</osgb:descriptiveGroup>
+			<osgb:point>
+				<gml:Point srsName='osgb:BNG'>
+					<gml:coordinates>292496.231,93020.730</gml:coordinates>
+				</gml:Point>
+			</osgb:point>
+			<osgb:referenceToTopographicArea xlink:href='#osgb1000002070388149' />
+		</osgb:RoadNode>
+	</osgb:networkMember>
+	<osgb:networkMember>
+		<osgb:RoadNode fid='osgb4000000025279143'>
+			<osgb:version>2</osgb:version>
+			<osgb:versionDate>2005-09-13</osgb:versionDate>
+			<osgb:theme>Road Network</osgb:theme>
+			<osgb:changeHistory>
+				<osgb:changeDate>2002-10-31</osgb:changeDate>
+				<osgb:reasonForChange>New</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:descriptiveGroup>Road Topology</osgb:descriptiveGroup>
+			<osgb:point>
+				<gml:Point srsName='osgb:BNG'>
+					<gml:coordinates>292583.000,93011.000</gml:coordinates>
+				</gml:Point>
+			</osgb:point>
+			<osgb:referenceToTopographicArea xlink:href='#osgb1000002062264747' />
+		</osgb:RoadNode>
+	</osgb:networkMember>
+	<osgb:boundedBy>
+		<gml:Box srsName='osgb:BNG'>
+			<gml:coordinates>290822.000,91912.000 293199.000,94222.000</gml:coordinates>
+		</gml:Box>
+	</osgb:boundedBy>
+</osgb:FeatureCollection>
diff --git a/core/src/test/resources/com/graphhopper/reader/os-itn-heavitree-road-denmark-road.xml b/core/src/test/resources/com/graphhopper/reader/os-itn-heavitree-road-denmark-road.xml
new file mode 100644
index 0000000000..fb4d412aa3
--- /dev/null
+++ b/core/src/test/resources/com/graphhopper/reader/os-itn-heavitree-road-denmark-road.xml
@@ -0,0 +1,345 @@
+<?xml version='1.0' encoding='UTF-8'?>
+<osgb:FeatureCollection xmlns:osgb='http://www.ordnancesurvey.co.uk/xml/namespaces/osgb'
+	xmlns:gml='http://www.opengis.net/gml' xmlns:xlink='http://www.w3.org/1999/xlink' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
+	xsi:schemaLocation='http://www.ordnancesurvey.co.uk/xml/namespaces/osgb http://www.ordnancesurvey.co.uk/xml/schema/v7/OSDNFFeatures.xsd'
+	fid='GDS-58096-1'>
+	<gml:description>Ordnance Survey, (c) Crown Copyright. All rights reserved, 2009-07-30</gml:description>
+	<gml:boundedBy>
+		<gml:null>unknown</gml:null>
+	</gml:boundedBy>
+	<osgb:queryTime>2009-07-30T02:01:07</osgb:queryTime>
+	<osgb:queryExtent>
+		<osgb:Rectangle srsName='osgb:BNG'>
+			<gml:coordinates>291000.000,92000.000 293000.000,94000.000</gml:coordinates>
+		</osgb:Rectangle>
+	</osgb:queryExtent>
+	<osgb:roadInformationMember>
+		<osgb:RoadRouteInformation fid='osgb4000000025220513'>
+			<osgb:version>2</osgb:version>
+			<osgb:versionDate>2005-09-13</osgb:versionDate>
+			<osgb:theme>Road Routing Information</osgb:theme>
+			<osgb:changeHistory>
+				<osgb:changeDate>2003-01-20</osgb:changeDate>
+				<osgb:reasonForChange>New</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:descriptiveGroup>Road Routing Information</osgb:descriptiveGroup>
+			<osgb:environmentQualifier>
+				<osgb:instruction>Mandatory Turn</osgb:instruction>
+			</osgb:environmentQualifier>
+			<osgb:directedLink orientation='+' xlink:href='#osgb4000000025346127' />
+			<osgb:directedLink orientation='-' xlink:href='#osgb4000000025336216' />
+		</osgb:RoadRouteInformation>
+	</osgb:roadInformationMember>
+	<osgb:roadInformationMember>
+		<osgb:RoadRouteInformation fid='osgb4000000025383303'>
+			<osgb:version>2</osgb:version>
+			<osgb:versionDate>2005-09-13</osgb:versionDate>
+			<osgb:theme>Road Routing Information</osgb:theme>
+			<osgb:changeHistory>
+				<osgb:changeDate>2004-10-21</osgb:changeDate>
+				<osgb:reasonForChange>New</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:descriptiveGroup>Road Routing Information</osgb:descriptiveGroup>
+			<osgb:environmentQualifier>
+				<osgb:instruction>Mandatory Turn</osgb:instruction>
+			</osgb:environmentQualifier>
+			<osgb:directedLink orientation='-' xlink:href='#osgb4000000025321264' />
+			<osgb:directedLink orientation='+' xlink:href='#osgb4000000025321253' />
+		</osgb:RoadRouteInformation>
+	</osgb:roadInformationMember>
+	<osgb:roadInformationMember>
+		<osgb:RoadRouteInformation fid='osgb4000000025383329'>
+			<osgb:version>2</osgb:version>
+			<osgb:versionDate>2005-09-13</osgb:versionDate>
+			<osgb:theme>Road Routing Information</osgb:theme>
+			<osgb:changeHistory>
+				<osgb:changeDate>2004-10-21</osgb:changeDate>
+				<osgb:reasonForChange>New</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:descriptiveGroup>Road Routing Information</osgb:descriptiveGroup>
+			<osgb:environmentQualifier>
+				<osgb:instruction>No Turn</osgb:instruction>
+			</osgb:environmentQualifier>
+			<osgb:directedLink orientation='-' xlink:href='#osgb4000000025321253' />
+			<osgb:directedLink orientation='+' xlink:href='#osgb4000000025321264' />
+		</osgb:RoadRouteInformation>
+	</osgb:roadInformationMember>
+	<osgb:roadMember>
+		<osgb:Road fid='osgb4000000025360646'>
+			<osgb:version>3</osgb:version>
+			<osgb:versionDate>2005-09-13</osgb:versionDate>
+			<osgb:theme>Road Network</osgb:theme>
+			<osgb:changeHistory>
+				<osgb:changeDate>2003-11-06</osgb:changeDate>
+				<osgb:reasonForChange>New</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2004-10-26</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:descriptiveGroup>Named Road</osgb:descriptiveGroup>
+			<osgb:roadName>DENMARK ROAD</osgb:roadName>
+			<osgb:networkMember xlink:href='#osgb4000000025306116' />
+			<osgb:networkMember xlink:href='#osgb4000000025321118' />
+			<osgb:networkMember xlink:href='#osgb4000000025321124' />
+			<osgb:networkMember xlink:href='#osgb4000000025321264' />
+			<osgb:networkMember xlink:href='#osgb4000000025346127' />
+			<osgb:networkMember xlink:href='#osgb4000000025384280' />
+			<osgb:boundedBy>
+				<gml:Box srsName='osgb:BNG'>
+					<gml:coordinates>292645.000,92363.000 292764.000,92812.000</gml:coordinates>
+				</gml:Box>
+			</osgb:boundedBy>
+		</osgb:Road>
+	</osgb:roadMember>
+	<osgb:roadMember>
+		<osgb:Road fid='osgb4000000025355282'>
+			<osgb:version>4</osgb:version>
+			<osgb:versionDate>2008-08-19</osgb:versionDate>
+			<osgb:theme>Road Network</osgb:theme>
+			<osgb:changeHistory>
+				<osgb:changeDate>2003-03-13</osgb:changeDate>
+				<osgb:reasonForChange>New</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2004-10-26</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2008-07-15</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:descriptiveGroup>Named Road</osgb:descriptiveGroup>
+			<osgb:roadName>HEAVITREE ROAD</osgb:roadName>
+			<osgb:networkMember xlink:href='#osgb4000000025295477' />
+			<osgb:networkMember xlink:href='#osgb4000000025321102' />
+			<osgb:networkMember xlink:href='#osgb4000000025321103' />
+			<osgb:networkMember xlink:href='#osgb4000000025321253' />
+			<osgb:networkMember xlink:href='#osgb4000000025321254' />
+			<osgb:networkMember xlink:href='#osgb4000000025321256' />
+			<osgb:networkMember xlink:href='#osgb4000000025321257' />
+			<osgb:networkMember xlink:href='#osgb4000000025336216' />
+			<osgb:networkMember xlink:href='#osgb4000000025346106' />
+			<osgb:networkMember xlink:href='#osgb4000000025346107' />
+			<osgb:networkMember xlink:href='#osgb4000000025384089' />
+			<osgb:networkMember xlink:href='#osgb4000000025447470' />
+			<osgb:boundedBy>
+				<gml:Box srsName='osgb:BNG'>
+					<gml:coordinates>292641.000,92498.000 293434.000,92842.000</gml:coordinates>
+				</gml:Box>
+			</osgb:boundedBy>
+		</osgb:Road>
+	</osgb:roadMember>
+	<osgb:networkMember>
+		<osgb:RoadLink fid='osgb4000000025321253'>
+			<osgb:version>4</osgb:version>
+			<osgb:versionDate>2005-09-15</osgb:versionDate>
+			<osgb:theme>Road Network</osgb:theme>
+			<osgb:changeHistory>
+				<osgb:changeDate>2002-10-31</osgb:changeDate>
+				<osgb:reasonForChange>New</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2004-10-26</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:descriptiveGroup>Road Topology</osgb:descriptiveGroup>
+			<osgb:descriptiveTerm>B Road</osgb:descriptiveTerm>
+			<osgb:natureOfRoad>Single Carriageway</osgb:natureOfRoad>
+			<osgb:length>91.84</osgb:length>
+			<osgb:polyline>
+				<gml:LineString srsName='osgb:BNG'>
+					<gml:coordinates>292749.000,92779.000 292747.000,92780.000 292677.000,92811.000 292668.000,92817.000
+						292666.000,92818.000
+					</gml:coordinates>
+				</gml:LineString>
+			</osgb:polyline>
+			<osgb:directedNode orientation='-' xlink:href='#osgb4000000025279154' />
+			<osgb:directedNode orientation='+' xlink:href='#osgb4000000025279153' />
+			<osgb:referenceToTopographicArea xlink:href='#osgb1000002062222046' />
+			<osgb:referenceToTopographicArea xlink:href='#osgb1000002062222048' />
+			<osgb:referenceToTopographicArea xlink:href='#osgb1000002062222025' />
+		</osgb:RoadLink>
+	</osgb:networkMember>
+	<osgb:networkMember>
+		<osgb:RoadLink fid='osgb4000000025321264'>
+			<osgb:version>5</osgb:version>
+			<osgb:versionDate>2005-09-16</osgb:versionDate>
+			<osgb:theme>Road Network</osgb:theme>
+			<osgb:changeHistory>
+				<osgb:changeDate>2002-10-31</osgb:changeDate>
+				<osgb:reasonForChange>New</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2004-10-21</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:descriptiveGroup>Road Topology</osgb:descriptiveGroup>
+			<osgb:descriptiveTerm>Local Street</osgb:descriptiveTerm>
+			<osgb:natureOfRoad>Single Carriageway</osgb:natureOfRoad>
+			<osgb:length>42.51</osgb:length>
+			<osgb:polyline>
+				<gml:LineString srsName='osgb:BNG'>
+					<gml:coordinates>292749.000,92779.000 292734.428,92739.063 </gml:coordinates>
+				</gml:LineString>
+			</osgb:polyline>
+			<osgb:directedNode orientation='-' xlink:href='#osgb4000000025279154' />
+			<osgb:directedNode orientation='+' xlink:href='#osgb4000000025383116' />
+			<osgb:referenceToTopographicArea xlink:href='#osgb1000002062222046' />
+			<osgb:referenceToTopographicArea xlink:href='#osgb1000002062221493' />
+		</osgb:RoadLink>
+	</osgb:networkMember>
+	<osgb:networkMember>
+		<osgb:RoadLink fid='osgb4000000025336216'>
+			<osgb:version>3</osgb:version>
+			<osgb:versionDate>2005-09-15</osgb:versionDate>
+			<osgb:theme>Road Network</osgb:theme>
+			<osgb:changeHistory>
+				<osgb:changeDate>2002-10-31</osgb:changeDate>
+				<osgb:reasonForChange>New</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2002-10-31</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:descriptiveGroup>Road Topology</osgb:descriptiveGroup>
+			<osgb:descriptiveTerm>B Road</osgb:descriptiveTerm>
+			<osgb:natureOfRoad>Single Carriageway</osgb:natureOfRoad>
+			<osgb:length>68.44</osgb:length>
+			<osgb:polyline>
+				<gml:LineString srsName='osgb:BNG'>
+					<gml:coordinates>292811.000,92750.000 292749.000,92779.000 </gml:coordinates>
+				</gml:LineString>
+			</osgb:polyline>
+			<osgb:directedNode orientation='-' xlink:href='#osgb4000000025279155' />
+			<osgb:directedNode orientation='+' xlink:href='#osgb4000000025279154' />
+			<osgb:referenceToTopographicArea xlink:href='#osgb1000002062221659' />
+			<osgb:referenceToTopographicArea xlink:href='#osgb1000002062221651' />
+			<osgb:referenceToTopographicArea xlink:href='#osgb1000002062222046' />
+		</osgb:RoadLink>
+	</osgb:networkMember>
+	<osgb:networkMember>
+		<osgb:RoadLink fid='osgb4000000025346127'>
+			<osgb:version>3</osgb:version>
+			<osgb:versionDate>2005-09-17</osgb:versionDate>
+			<osgb:theme>Road Network</osgb:theme>
+			<osgb:changeHistory>
+				<osgb:changeDate>2002-10-31</osgb:changeDate>
+				<osgb:reasonForChange>New</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2004-10-21</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:descriptiveGroup>Road Topology</osgb:descriptiveGroup>
+			<osgb:descriptiveTerm>Local Street</osgb:descriptiveTerm>
+			<osgb:natureOfRoad>Single Carriageway</osgb:natureOfRoad>
+			<osgb:length>36.24</osgb:length>
+			<osgb:polyline>
+				<gml:LineString srsName='osgb:BNG'>
+					<gml:coordinates>292764.000,92812.000 292749.000,92779.000 </gml:coordinates>
+				</gml:LineString>
+			</osgb:polyline>
+			<osgb:directedNode orientation='-' xlink:href='#osgb4000000025279164' />
+			<osgb:directedNode orientation='+' xlink:href='#osgb4000000025279154' />
+			<osgb:referenceToTopographicArea xlink:href='#osgb1000002062221791' />
+			<osgb:referenceToTopographicArea xlink:href='#osgb1000002062221797' />
+			<osgb:referenceToTopographicArea xlink:href='#osgb1000002062222046' />
+		</osgb:RoadLink>
+	</osgb:networkMember>
+	<osgb:networkMember>
+		<osgb:RoadNode fid='osgb4000000025279153'>
+			<osgb:version>2</osgb:version>
+			<osgb:versionDate>2005-09-13</osgb:versionDate>
+			<osgb:theme>Road Network</osgb:theme>
+			<osgb:changeHistory>
+				<osgb:changeDate>2002-10-31</osgb:changeDate>
+				<osgb:reasonForChange>New</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:descriptiveGroup>Road Topology</osgb:descriptiveGroup>
+			<osgb:point>
+				<gml:Point srsName='osgb:BNG'>
+					<gml:coordinates>292666.000,92818.000</gml:coordinates>
+				</gml:Point>
+			</osgb:point>
+			<osgb:referenceToTopographicArea xlink:href='#osgb1000002062222025' />
+		</osgb:RoadNode>
+	</osgb:networkMember>
+	<osgb:networkMember>
+		<osgb:RoadNode fid='osgb4000000025279154'>
+			<osgb:version>2</osgb:version>
+			<osgb:versionDate>2005-09-13</osgb:versionDate>
+			<osgb:theme>Road Network</osgb:theme>
+			<osgb:changeHistory>
+				<osgb:changeDate>2002-10-31</osgb:changeDate>
+				<osgb:reasonForChange>New</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:descriptiveGroup>Road Topology</osgb:descriptiveGroup>
+			<osgb:point>
+				<gml:Point srsName='osgb:BNG'>
+					<gml:coordinates>292749.000,92779.000</gml:coordinates>
+				</gml:Point>
+			</osgb:point>
+			<osgb:referenceToTopographicArea xlink:href='#osgb1000002062222046' />
+		</osgb:RoadNode>
+	</osgb:networkMember>
+	<osgb:networkMember>
+		<osgb:RoadNode fid='osgb4000000025279155'>
+			<osgb:version>2</osgb:version>
+			<osgb:versionDate>2005-09-13</osgb:versionDate>
+			<osgb:theme>Road Network</osgb:theme>
+			<osgb:changeHistory>
+				<osgb:changeDate>2002-10-31</osgb:changeDate>
+				<osgb:reasonForChange>New</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:descriptiveGroup>Road Topology</osgb:descriptiveGroup>
+			<osgb:point>
+				<gml:Point srsName='osgb:BNG'>
+					<gml:coordinates>292811.000,92750.000</gml:coordinates>
+				</gml:Point>
+			</osgb:point>
+			<osgb:referenceToTopographicArea xlink:href='#osgb1000002062221659' />
+		</osgb:RoadNode>
+	</osgb:networkMember>
+	<osgb:networkMember>
+		<osgb:RoadNode fid='osgb4000000025279164'>
+			<osgb:version>2</osgb:version>
+			<osgb:versionDate>2005-09-13</osgb:versionDate>
+			<osgb:theme>Road Network</osgb:theme>
+			<osgb:changeHistory>
+				<osgb:changeDate>2002-10-31</osgb:changeDate>
+				<osgb:reasonForChange>New</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:descriptiveGroup>Road Topology</osgb:descriptiveGroup>
+			<osgb:point>
+				<gml:Point srsName='osgb:BNG'>
+					<gml:coordinates>292764.000,92812.000</gml:coordinates>
+				</gml:Point>
+			</osgb:point>
+			<osgb:referenceToTopographicArea xlink:href='#osgb1000002062221797' />
+		</osgb:RoadNode>
+	</osgb:networkMember>
+	<osgb:networkMember>
+		<osgb:RoadNode fid='osgb4000000025383116'>
+			<osgb:version>2</osgb:version>
+			<osgb:versionDate>2005-09-13</osgb:versionDate>
+			<osgb:theme>Road Network</osgb:theme>
+			<osgb:changeHistory>
+				<osgb:changeDate>2004-10-21</osgb:changeDate>
+				<osgb:reasonForChange>New</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:descriptiveGroup>Road Topology</osgb:descriptiveGroup>
+			<osgb:point>
+				<gml:Point srsName='osgb:BNG'>
+					<gml:coordinates>292734.428,92739.063</gml:coordinates>
+				</gml:Point>
+			</osgb:point>
+			<osgb:referenceToTopographicArea xlink:href='#osgb1000002062221493' />
+		</osgb:RoadNode>
+	</osgb:networkMember>
+	<osgb:boundedBy>
+		<gml:Box srsName='osgb:BNG'>
+			<gml:coordinates>290822.000,91912.000 293199.000,94222.000</gml:coordinates>
+		</gml:Box>
+	</osgb:boundedBy>
+</osgb:FeatureCollection>
diff --git a/core/src/test/resources/com/graphhopper/reader/os-itn-no-entry-multipoint-crossroad-end_neg.xml b/core/src/test/resources/com/graphhopper/reader/os-itn-no-entry-multipoint-crossroad-end_neg.xml
index 6a3ad35290..8461f42baa 100644
--- a/core/src/test/resources/com/graphhopper/reader/os-itn-no-entry-multipoint-crossroad-end_neg.xml
+++ b/core/src/test/resources/com/graphhopper/reader/os-itn-no-entry-multipoint-crossroad-end_neg.xml
@@ -119,7 +119,8 @@
 			<osgb:length>538.90</osgb:length>
 			<osgb:polyline>
 				<gml:LineString srsName="osgb:BNG">
-					<gml:coordinates>290000.000,90000.000 291378.000,92741.500 291378.000,92751.500 291378.000,92761.500 280000.000,90000.000 </gml:coordinates>
+					<gml:coordinates>290000.000,90000.000 291378.000,92741.500 291378.000,92751.500 291378.000,92761.500 280000.000,90000.000 
+					</gml:coordinates>
 				</gml:LineString>
 			</osgb:polyline>
 			<osgb:directedNode orientation="-" xlink:href="#osgb4000000025277880" />
@@ -240,12 +241,12 @@
 			<osgb:distanceFromStart>0.0</osgb:distanceFromStart>
 			<osgb:point>
 				<gml:Point srsName='osgb:BNG'>
-					<gml:coordinates>280000.000,90000.000</gml:coordinates>
+					<gml:coordinates>280000.000,90000.000
+					</gml:coordinates>
 				</gml:Point>
 			</osgb:point>
 		</osgb:RoadRouteInformation>
 	</osgb:roadInformationMember>
-
 	<osgb:roadMember>
 		<osgb:Road fid='osgb4000000025366114'>
 			<osgb:version>6</osgb:version>
diff --git a/core/src/test/resources/com/graphhopper/reader/os-itn-no-turn-mandatory-turn-combination-crossroad.xml b/core/src/test/resources/com/graphhopper/reader/os-itn-no-turn-mandatory-turn-combination-crossroad.xml
new file mode 100644
index 0000000000..4b97b46e8c
--- /dev/null
+++ b/core/src/test/resources/com/graphhopper/reader/os-itn-no-turn-mandatory-turn-combination-crossroad.xml
@@ -0,0 +1,344 @@
+<?xml version='1.0' encoding='UTF-8'?>
+<osgb:FeatureCollection xmlns:osgb='http://www.ordnancesurvey.co.uk/xml/namespaces/osgb'
+	xmlns:gml='http://www.opengis.net/gml' xmlns:xlink='http://www.w3.org/1999/xlink' xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance'
+	xsi:schemaLocation='http://www.ordnancesurvey.co.uk/xml/namespaces/osgb http://www.ordnancesurvey.co.uk/xml/schema/v7/OSDNFFeatures.xsd'
+	fid='GDS-58096-1'>
+	<osgb:networkMember>
+		<osgb:RoadNode fid='osgb4000000025277880'>
+			<osgb:version>2</osgb:version>
+			<osgb:versionDate>2005-09-13</osgb:versionDate>
+			<osgb:theme>Road Network</osgb:theme>
+			<osgb:changeHistory>
+				<osgb:changeDate>2002-10-31</osgb:changeDate>
+				<osgb:reasonForChange>New</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:descriptiveGroup>Road Topology</osgb:descriptiveGroup>
+			<osgb:point>
+				<gml:Point srsName='osgb:BNG'>
+					<gml:coordinates>290000.000,90000.000</gml:coordinates>
+				</gml:Point>
+			</osgb:point>
+			<osgb:referenceToTopographicArea xlink:href='#osgb1000002062025665' />
+		</osgb:RoadNode>
+	</osgb:networkMember>
+	<osgb:networkMember>
+		<osgb:RoadNode fid='osgb4000000025277881'>
+			<osgb:version>2</osgb:version>
+			<osgb:versionDate>2005-09-13</osgb:versionDate>
+			<osgb:theme>Road Network</osgb:theme>
+			<osgb:changeHistory>
+				<osgb:changeDate>2002-10-31</osgb:changeDate>
+				<osgb:reasonForChange>New</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:descriptiveGroup>Road Topology</osgb:descriptiveGroup>
+			<osgb:point>
+				<gml:Point srsName='osgb:BNG'>
+					<gml:coordinates>280000.000,90000.000</gml:coordinates>
+				</gml:Point>
+			</osgb:point>
+			<osgb:referenceToTopographicArea xlink:href='#osgb1000002062025665' />
+		</osgb:RoadNode>
+	</osgb:networkMember>
+	<osgb:networkMember>
+		<osgb:RoadNode fid='osgb4000000025277882'>
+			<osgb:version>2</osgb:version>
+			<osgb:versionDate>2005-09-13</osgb:versionDate>
+			<osgb:theme>Road Network</osgb:theme>
+			<osgb:changeHistory>
+				<osgb:changeDate>2002-10-31</osgb:changeDate>
+				<osgb:reasonForChange>New</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:descriptiveGroup>Road Topology</osgb:descriptiveGroup>
+			<osgb:point>
+				<gml:Point srsName='osgb:BNG'>
+					<gml:coordinates>270000.000,90000.000</gml:coordinates>
+				</gml:Point>
+			</osgb:point>
+			<osgb:referenceToTopographicArea xlink:href='#osgb1000002062025665' />
+		</osgb:RoadNode>
+	</osgb:networkMember>
+	<osgb:networkMember>
+		<osgb:RoadNode fid='osgb4000000025277883'>
+			<osgb:version>2</osgb:version>
+			<osgb:versionDate>2005-09-13</osgb:versionDate>
+			<osgb:theme>Road Network</osgb:theme>
+			<osgb:changeHistory>
+				<osgb:changeDate>2002-10-31</osgb:changeDate>
+				<osgb:reasonForChange>New</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:descriptiveGroup>Road Topology</osgb:descriptiveGroup>
+			<osgb:point>
+				<gml:Point srsName='osgb:BNG'>
+					<gml:coordinates>280000.000,85000.000</gml:coordinates>
+				</gml:Point>
+			</osgb:point>
+			<osgb:referenceToTopographicArea xlink:href='#osgb1000002062025665' />
+		</osgb:RoadNode>
+	</osgb:networkMember>
+	<osgb:networkMember>
+		<osgb:RoadNode fid='osgb4000000025277884'>
+			<osgb:version>2</osgb:version>
+			<osgb:versionDate>2005-09-13</osgb:versionDate>
+			<osgb:theme>Road Network</osgb:theme>
+			<osgb:changeHistory>
+				<osgb:changeDate>2002-10-31</osgb:changeDate>
+				<osgb:reasonForChange>New</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:descriptiveGroup>Road Topology</osgb:descriptiveGroup>
+			<osgb:point>
+				<gml:Point srsName='osgb:BNG'>
+					<gml:coordinates>280000.000,95000.000</gml:coordinates>
+				</gml:Point>
+			</osgb:point>
+			<osgb:referenceToTopographicArea xlink:href='#osgb1000002062025665' />
+		</osgb:RoadNode>
+	</osgb:networkMember>
+	<osgb:networkMember>
+		<osgb:RoadLink fid="osgb4000000025288017">
+			<osgb:version>4</osgb:version>
+			<osgb:versionDate>2006-02-03</osgb:versionDate>
+			<osgb:theme>Road Network</osgb:theme>
+			<osgb:changeHistory>
+				<osgb:changeDate>2003-01-27</osgb:changeDate>
+				<osgb:reasonForChange>New</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2003-01-27</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:descriptiveGroup>Road Topology</osgb:descriptiveGroup>
+			<osgb:descriptiveTerm>A Road</osgb:descriptiveTerm>
+			<osgb:natureOfRoad>Single Carriageway</osgb:natureOfRoad>
+			<osgb:length>538.90</osgb:length>
+			<osgb:polyline>
+				<gml:LineString srsName="osgb:BNG">
+					<gml:coordinates>290000.000,90000.000 280000.000,90000.000 </gml:coordinates>
+				</gml:LineString>
+			</osgb:polyline>
+			<osgb:directedNode orientation="-" xlink:href="#osgb4000000025277880" />
+			<osgb:directedNode orientation="+" xlink:href="#osgb4000000025277881" />
+			<osgb:referenceToTopographicArea xlink:href="#osgb1000002062010639" />
+			<osgb:referenceToTopographicArea xlink:href="#osgb1000002062041282" />
+			<osgb:referenceToTopographicArea xlink:href="#osgb1000002062010640" />
+			<osgb:referenceToTopographicArea xlink:href="#osgb1000002062010474" />
+		</osgb:RoadLink>
+	</osgb:networkMember>
+	<osgb:networkMember>
+		<osgb:RoadLink fid="osgb4000000025288018">
+			<osgb:version>4</osgb:version>
+			<osgb:versionDate>2006-02-03</osgb:versionDate>
+			<osgb:theme>Road Network</osgb:theme>
+			<osgb:changeHistory>
+				<osgb:changeDate>2003-01-27</osgb:changeDate>
+				<osgb:reasonForChange>New</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2003-01-27</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:descriptiveGroup>Road Topology</osgb:descriptiveGroup>
+			<osgb:descriptiveTerm>A Road</osgb:descriptiveTerm>
+			<osgb:natureOfRoad>Single Carriageway</osgb:natureOfRoad>
+			<osgb:length>538.90</osgb:length>
+			<osgb:polyline>
+				<gml:LineString srsName="osgb:BNG">
+					<gml:coordinates>280000.000,90000.000 270000.000,90000.000 </gml:coordinates>
+				</gml:LineString>
+			</osgb:polyline>
+			<osgb:directedNode orientation="-" xlink:href="#osgb4000000025277881" />
+			<osgb:directedNode orientation="+" xlink:href="#osgb4000000025277882" />
+			<osgb:referenceToTopographicArea xlink:href="#osgb1000002062010639"></osgb:referenceToTopographicArea>
+			<osgb:referenceToTopographicArea xlink:href="#osgb1000002062041282" />
+			<osgb:referenceToTopographicArea xlink:href="#osgb1000002062010640" />
+			<osgb:referenceToTopographicArea xlink:href="#osgb1000002062010474" />
+		</osgb:RoadLink>
+	</osgb:networkMember>
+	<osgb:networkMember>
+		<osgb:RoadLink fid="osgb4000000025288019">
+			<osgb:version>4</osgb:version>
+			<osgb:versionDate>2006-02-03</osgb:versionDate>
+			<osgb:theme>Road Network</osgb:theme>
+			<osgb:changeHistory>
+				<osgb:changeDate>2003-01-27</osgb:changeDate>
+				<osgb:reasonForChange>New</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2003-01-27</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:descriptiveGroup>Road Topology</osgb:descriptiveGroup>
+			<osgb:descriptiveTerm>A Road</osgb:descriptiveTerm>
+			<osgb:natureOfRoad>Single Carriageway</osgb:natureOfRoad>
+			<osgb:length>538.90</osgb:length>
+			<osgb:polyline>
+				<gml:LineString srsName="osgb:BNG">
+					<gml:coordinates>280000.000,85000.000 280000.000,90000.000 </gml:coordinates>
+				</gml:LineString>
+			</osgb:polyline>
+			<osgb:directedNode orientation="-" xlink:href="#osgb4000000025277883"></osgb:directedNode>
+			<osgb:directedNode orientation="+" xlink:href="#osgb4000000025277881" />
+			<osgb:referenceToTopographicArea xlink:href="#osgb1000002062010639" />
+			<osgb:referenceToTopographicArea xlink:href="#osgb1000002062041282" />
+			<osgb:referenceToTopographicArea xlink:href="#osgb1000002062010640" />
+			<osgb:referenceToTopographicArea xlink:href="#osgb1000002062010474" />
+		</osgb:RoadLink>
+	</osgb:networkMember>
+	<osgb:networkMember>
+		<osgb:RoadLink fid="osgb4000000025288020">
+			<osgb:version>4</osgb:version>
+			<osgb:versionDate>2006-02-03</osgb:versionDate>
+			<osgb:theme>Road Network</osgb:theme>
+			<osgb:changeHistory>
+				<osgb:changeDate>2003-01-27</osgb:changeDate>
+				<osgb:reasonForChange>New</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2003-01-27</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:descriptiveGroup>Road Topology</osgb:descriptiveGroup>
+			<osgb:descriptiveTerm>A Road</osgb:descriptiveTerm>
+			<osgb:natureOfRoad>Single Carriageway</osgb:natureOfRoad>
+			<osgb:length>538.90</osgb:length>
+			<osgb:polyline>
+				<gml:LineString srsName="osgb:BNG">
+					<gml:coordinates>280000.000,90000.000 280000.000,95000.000 </gml:coordinates>
+				</gml:LineString>
+			</osgb:polyline>
+			<osgb:directedNode orientation="-" xlink:href="#osgb4000000025277881" />
+			<osgb:directedNode orientation="+" xlink:href="#osgb4000000025277884" />
+			<osgb:referenceToTopographicArea xlink:href="#osgb1000002062010639" />
+			<osgb:referenceToTopographicArea xlink:href="#osgb1000002062041282" />
+			<osgb:referenceToTopographicArea xlink:href="#osgb1000002062010640" />
+			<osgb:referenceToTopographicArea xlink:href="#osgb1000002062010474" />
+		</osgb:RoadLink>
+	</osgb:networkMember>
+	<osgb:roadInformationMember>
+		<osgb:RoadRouteInformation fid='osgb4000000025219970'>
+			<osgb:version>2</osgb:version>
+			<osgb:versionDate>2005-09-13</osgb:versionDate>
+			<osgb:theme>Road Routing Information</osgb:theme>
+			<osgb:changeHistory>
+				<osgb:changeDate>2002-12-04</osgb:changeDate>
+				<osgb:reasonForChange>New</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:descriptiveGroup>Road Routing Information</osgb:descriptiveGroup>
+			<osgb:environmentQualifier>
+				<osgb:instruction>No Turn</osgb:instruction>
+			</osgb:environmentQualifier>
+			<osgb:directedLink orientation='-' xlink:href='#osgb4000000025288017' />
+			<osgb:directedLink orientation='+' xlink:href='#osgb4000000025288019' />
+		</osgb:RoadRouteInformation>
+	</osgb:roadInformationMember>
+	<osgb:roadInformationMember>
+		<osgb:RoadRouteInformation fid='osgb4002000025219970'>
+			<osgb:version>2</osgb:version>
+			<osgb:versionDate>2005-09-13</osgb:versionDate>
+			<osgb:theme>Road Routing Information</osgb:theme>
+			<osgb:changeHistory>
+				<osgb:changeDate>2002-12-04</osgb:changeDate>
+				<osgb:reasonForChange>New</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:descriptiveGroup>Road Routing Information</osgb:descriptiveGroup>
+			<osgb:environmentQualifier>
+				<osgb:instruction>Mandatory Turn</osgb:instruction>
+			</osgb:environmentQualifier>
+			<osgb:directedLink orientation='-' xlink:href='#osgb4000000025288018' />
+			<osgb:directedLink orientation='+' xlink:href='#osgb4000000025288020' />
+		</osgb:RoadRouteInformation>
+	</osgb:roadInformationMember>
+	<osgb:roadInformationMember>
+		<osgb:RoadRouteInformation fid='osgb4001000025219970'>
+			<osgb:version>2</osgb:version>
+			<osgb:versionDate>2005-09-13</osgb:versionDate>
+			<osgb:theme>Road Routing Information</osgb:theme>
+			<osgb:changeHistory>
+				<osgb:changeDate>2002-12-04</osgb:changeDate>
+				<osgb:reasonForChange>New</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:descriptiveGroup>Road Routing Information</osgb:descriptiveGroup>
+			<osgb:environmentQualifier>
+				<osgb:instruction>Mandatory Turn</osgb:instruction>
+			</osgb:environmentQualifier>
+			<osgb:directedLink orientation='-' xlink:href='#osgb4000000025288019' />
+			<osgb:directedLink orientation='+' xlink:href='#osgb4000000025288017' />
+		</osgb:RoadRouteInformation>
+	</osgb:roadInformationMember>
+	<osgb:roadMember>
+		<osgb:Road fid='osgb4000000025366114'>
+			<osgb:version>6</osgb:version>
+			<osgb:versionDate>2008-11-11</osgb:versionDate>
+			<osgb:theme>Road Network</osgb:theme>
+			<osgb:changeHistory>
+				<osgb:changeDate>2003-03-13</osgb:changeDate>
+				<osgb:reasonForChange>New</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2004-10-26</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2008-02-11</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2008-07-15</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2008-10-08</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:descriptiveGroup>Named Road</osgb:descriptiveGroup>
+			<osgb:roadName>BONHAY ROAD</osgb:roadName>
+			<osgb:networkMember xlink:href='#osgb4000000025288017' />
+			<osgb:networkMember xlink:href='#osgb4000000025288018' />
+			<osgb:boundedBy>
+				<gml:Box srsName='osgb:BNG'>
+					<gml:coordinates>291211.000,92187.000 291549.000,93434.920</gml:coordinates>
+				</gml:Box>
+			</osgb:boundedBy>
+		</osgb:Road>
+	</osgb:roadMember>
+	<osgb:roadMember>
+		<osgb:Road fid='osgb4000000025366115'>
+			<osgb:version>6</osgb:version>
+			<osgb:versionDate>2008-11-11</osgb:versionDate>
+			<osgb:theme>Road Network</osgb:theme>
+			<osgb:changeHistory>
+				<osgb:changeDate>2003-03-13</osgb:changeDate>
+				<osgb:reasonForChange>New</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2004-10-26</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2008-02-11</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2008-07-15</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:changeHistory>
+				<osgb:changeDate>2008-10-08</osgb:changeDate>
+				<osgb:reasonForChange>Modified</osgb:reasonForChange>
+			</osgb:changeHistory>
+			<osgb:descriptiveGroup>Named Road</osgb:descriptiveGroup>
+			<osgb:roadName>OTHER ROAD</osgb:roadName>
+			<osgb:networkMember xlink:href='#osgb4000000025288019' />
+			<osgb:networkMember xlink:href='#osgb4000000025288020' />
+			<osgb:boundedBy>
+				<gml:Box srsName='osgb:BNG'>
+					<gml:coordinates>291211.000,92187.000 291549.000,93434.920</gml:coordinates>
+				</gml:Box>
+			</osgb:boundedBy>
+		</osgb:Road>
+	</osgb:roadMember>
+	<osgb:boundedBy>
+		<gml:Box srsName='osgb:BNG'>
+			<gml:coordinates>290822.000,91912.000 293199.000,94222.000</gml:coordinates>
+		</gml:Box>
+	</osgb:boundedBy>
+</osgb:FeatureCollection>
diff --git a/core/src/test/resources/com/graphhopper/reader/os-itn-simple-mandatory-turn-restricted-crossroad.xml b/core/src/test/resources/com/graphhopper/reader/os-itn-simple-mandatory-turn-restricted-crossroad.xml
index 76fba9c46d..ce39a64a9e 100644
--- a/core/src/test/resources/com/graphhopper/reader/os-itn-simple-mandatory-turn-restricted-crossroad.xml
+++ b/core/src/test/resources/com/graphhopper/reader/os-itn-simple-mandatory-turn-restricted-crossroad.xml
@@ -147,7 +147,7 @@
 			</osgb:polyline>
 			<osgb:directedNode orientation="-" xlink:href="#osgb4000000025277881" />
 			<osgb:directedNode orientation="+" xlink:href="#osgb4000000025277882" />
-			<osgb:referenceToTopographicArea xlink:href="#osgb1000002062010639"></osgb:referenceToTopographicArea>
+			<osgb:referenceToTopographicArea xlink:href="#osgb1000002062010639" />
 			<osgb:referenceToTopographicArea xlink:href="#osgb1000002062041282" />
 			<osgb:referenceToTopographicArea xlink:href="#osgb1000002062010640" />
 			<osgb:referenceToTopographicArea xlink:href="#osgb1000002062010474" />
@@ -230,7 +230,7 @@
 			<osgb:directedLink orientation='-' xlink:href='#osgb4000000025288019' />
 		</osgb:RoadRouteInformation>
 	</osgb:roadInformationMember>
-	<osgb:roadMember>
+	<!-- <osgb:roadMember>
 		<osgb:Road fid='osgb4000000025366114'>
 			<osgb:version>6</osgb:version>
 			<osgb:versionDate>2008-11-11</osgb:versionDate>
@@ -301,7 +301,7 @@
 				</gml:Box>
 			</osgb:boundedBy>
 		</osgb:Road>
-	</osgb:roadMember>
+	</osgb:roadMember>-->
 	<osgb:boundedBy>
 		<gml:Box srsName='osgb:BNG'>
 			<gml:coordinates>290822.000,91912.000 293199.000,94222.000</gml:coordinates>
diff --git a/tools/src/main/java/com/graphhopper/tools/OsITNProblemRouteExtractor.java b/tools/src/main/java/com/graphhopper/tools/OsITNProblemRouteExtractor.java
index 111e5c7ac4..e1c87b7652 100644
--- a/tools/src/main/java/com/graphhopper/tools/OsITNProblemRouteExtractor.java
+++ b/tools/src/main/java/com/graphhopper/tools/OsITNProblemRouteExtractor.java
@@ -52,400 +52,380 @@
  * 
  */
 public class OsITNProblemRouteExtractor {
-	OsItnInputFile file;
-	private String workingStore;
-	private TLongCollection fullWayList = new TLongArrayList(100);
-	private TLongCollection fullNodeList = new TLongArrayList(200);
-	private String workingRoadName;
-	protected Set<String> notHighwaySet = new HashSet<String>();
-
-	private abstract class WayNodeProcess implements TLongProcedure {
-		protected final long end;
-		protected final RoutingElement item;
-		protected final long start;
-
-		private WayNodeProcess(long end, RoutingElement item, long start) {
-			this.end = end;
-			this.item = item;
-			this.start = start;
-		}
-
-	}
-
-	private abstract class ProcessVisitor<T> {
-		abstract void processVisitor(T element) throws XMLStreamException,
-				IOException, ParserConfigurationException, SAXException,
-				TransformerConfigurationException, TransformerException, XPathExpressionException, MismatchedDimensionException, FactoryException, TransformException;
-	}
-
-	private abstract class ProcessFileVisitor<T> extends ProcessVisitor<File> {
-		protected ProcessVisitor<T> innerProcess;
-
-		void setInnerProcess(ProcessVisitor<T> process) {
-			innerProcess = process;
-		}
-	}
-
-	private ProcessFileVisitor<RoutingElement> fileProcessProcessor = new ProcessFileVisitor<RoutingElement>() {
-
-		@Override
-		void processVisitor(File file) throws XMLStreamException, IOException,
-				TransformerConfigurationException,
-				ParserConfigurationException, SAXException,
-				TransformerException, XPathExpressionException, MismatchedDimensionException, FactoryException, TransformException {
-			OsItnInputFile in = null;
-			try {
-				in = new OsItnInputFile(file).setWorkerThreads(1).open();
-				RoutingElement item;
-				while ((item = in.getNext()) != null) {
-					innerProcess.processVisitor(item);
-				}
-			} finally {
-				Helper.close(in);
-			}
-		}
-	};
-
-	private ProcessVisitor<RoutingElement> extractWayIds = new ProcessVisitor<RoutingElement>() {
-		@Override
-		void processVisitor(RoutingElement item) {
-			if (item.isType(OSMElement.WAY)) {
-				final Way way = (Way) item;
-				if (way.hasTag("name", workingRoadName)) {
-					fullWayList.add(way.getId());
-				}
-			}
-			if (item.isType(OSMElement.RELATION)) {
-				final Relation relation = (Relation) item;
-				// if (!relation.isMetaRelation()
-				// && relation.hasTag(OSITNElement.TAG_KEY_TYPE, "route"))
-				// prepareWaysWithRelationInfo(relation);
-
-				if (relation.hasTag("name", workingRoadName)) {
-					prepareNameRelation(relation, fullWayList);
-				}
-			}
-		}
-	};
-
-	private ProcessVisitor<RoutingElement> extractNodeIds = new ProcessVisitor<RoutingElement>() {
-
-		@Override
-		void processVisitor(RoutingElement item) {
-			if (item.isType(OSMElement.WAY)) {
-				final Way way = (Way) item;
-				if (item.hasTag("nothighway")) {
-					notHighwaySet.add(item.getTag("nothighway"));
-				}
-				if (fullWayList.contains(way.getId())) {
-					TLongList nodes = way.getNodes();
-					long startNode = nodes.get(0);
-					long endNode = nodes.get(nodes.size() - 1);
-					fullNodeList.add(startNode);
-					fullNodeList.add(endNode);
-				}
-			}
-		}
-	};
-
-	private ProcessVisitor<RoutingElement> extractWayIdLinkedToNodes = new ProcessVisitor<RoutingElement>() {
-		@Override
-		void processVisitor(final RoutingElement item) {
-			if (item.isType(OSMElement.WAY)) {
-				final Way way = (Way) item;
-				TLongList nodes = way.getNodes();
-				final long start = nodes.get(0);
-				final long end = nodes.get(nodes.size() - 1);
-				TLongProcedure addWayIfNodeExists = new WayNodeProcess(end,
-						item, start) {
-					@Override
-					public boolean execute(long testNode) {
-						if (testNode == start || testNode == end) {
-							fullWayList.add(item.getId());
-							return false;
-						}
-						return true;
-					}
-				};
-				origFullNodeList.forEach(addWayIfNodeExists);
-			}
-		}
-	};
-
-	private ProcessVisitor<RoutingElement> extractRelationsAtJunctionOfBothRoads = new ProcessVisitor<RoutingElement>() {
-		@Override
-		void processVisitor(final RoutingElement item) {
-			if (item.isType(OSMElement.RELATION)) {
-				final Relation rel = (Relation) item;
-				ArrayList<? extends RelationMember> links = rel.getMembers();
-				final long start = links.get(0).ref();
-				final long end = links.get(links.size() - 1).ref();
-				TLongProcedure addRelIfWayExists = new WayNodeProcess(end,
-						item, start) {
-					@Override
-					public boolean execute(long testNode) {
-						if (testNode == start || testNode == end) {
-							relationList.add(rel.getId());
-							return false;
-						}
-						return true;
-					}
-				};
-				fullWayList.forEach(addRelIfWayExists);
-			}
-		}
-	};
-
-	private ProcessVisitor<File> extractProcessor = new ProcessVisitor<File>() {
-		void processVisitor(File element) throws XMLStreamException,
-				IOException, ParserConfigurationException, SAXException,
-				TransformerException, XPathExpressionException {
-			OsItnInputFile itn = new OsItnInputFile(element);
-			InputStream bis = itn.getInputStream();
-			TLongArrayList fidList = new TLongArrayList(relationList);
-			fidList.addAll(fullWayList);
-			fidList.addAll(origFullNodeList);
-			outputListedFids(fidList, bis);
-		};
-		
-		private void outputListedFids(TLongArrayList fidList, InputStream bis)
-				throws XMLStreamException, NumberFormatException, IOException {
-			boolean output = false;
-
-			BufferedReader bir = new BufferedReader(new InputStreamReader(bis));
-			String lastLine = "";
-			while (bir.ready()) {
-				String line = bir.readLine();
-				
-				if (output) {
-					outputWriter.println(line);
-					if (isEndBlock(line)) {
-						output = false;
-						outputWriter.flush();
-					}
-				}
-				if (!output && line.contains("fid='osgb")) {
-					String idStr = line.substring(line.indexOf("fid='osgb") + 9,
-							line.lastIndexOf('\''));
-					long checkFid = Long.parseLong(idStr);
-					if (fidList.contains(checkFid)) {
-						output = true;
-						outputWriter.println(lastLine);
-						outputWriter.println(line);
-					}
-				}
-				lastLine = line;
-			}
-		}
-
-		private boolean isEndBlock(String curLine) {
-			boolean endBlock = false;
-			switch (curLine) {
-			case "</osgb:networkMember>":
-			case "</osgb:roadInformationMember>":
-			case "</osgb:roadMember>":	
-				{
-					endBlock = true;
-					break;
-				}
-			}
-			return endBlock;
-		}
-	};
-
-	private String workingLinkRoad;
-	private TLongCollection origFullNodeList;
-	private TLongCollection origFullWayList;
-	private TLongProcedure nodeOutput;
-	private TLongProcedure wayOutput;
-	private TLongArrayList relationList;
-	private TLongProcedure relOutput;
-	private PrintWriter outputWriter;
-
-	public static void main(String[] strs) throws Exception {
-		CmdArgs args = CmdArgs.read(strs);
-		String fileOrDirName = args.get("osmreader.osm", null);
-		String namedRoad = args.get("roadName", null);
-		String namedLinkRoad = args.get("linkRoadName", null);
-		String outputFileName = args.get("itnoutput", "os-itn-" + namedRoad.replaceAll(" ", "-").toLowerCase() + (null!=namedLinkRoad?"-" + namedLinkRoad.replaceAll(" ", "-").toLowerCase():"") + ".xml");
-		OsITNProblemRouteExtractor extractor = new OsITNProblemRouteExtractor(
-				fileOrDirName, namedRoad, namedLinkRoad);
-		extractor.process(outputFileName);
-		args.put("reader.implementation", "OSITN");
-		args.put("osmreader.osm", outputFileName);
-		GraphHopper hopper = new GraphHopper().init(args).importOrLoad();
-		FlagEncoder carEncoder = hopper.getEncodingManager().getEncoder("CAR");
-		EdgeFilter filter = new DefaultEdgeFilter(carEncoder, false, true);
-		
-		GHUtility.printInfo(hopper.getGraph(), 0, Integer.MIN_VALUE, filter);
-	}
-
-	public OsITNProblemRouteExtractor(String fileOrDirName, String namedRoad,
-			String namedLinkRoad) {
-		workingStore = fileOrDirName;
-		workingRoadName = namedRoad;
-		workingLinkRoad = namedLinkRoad;
-	}
-
-	private void process(String outputFileName) throws TransformerException, ParserConfigurationException, SAXException, XPathExpressionException, XMLStreamException, IOException, MismatchedDimensionException, FactoryException, TransformException {
-		prepareOutputMethods();
-
-		File itnFile = new File(workingStore);
-		findWaysOnRoad(itnFile);
-		findNodesOfRoad(itnFile);
-
-		if (null != workingLinkRoad) {
-			findLinkedWayIDs(itnFile);
-			findNodesOnBothWays(itnFile);
-			origFullNodeList.forEach(nodeOutput);
-			findWaysLinkedAtJunctionOfBothRoads(itnFile);
-			fullWayList.forEach(wayOutput);
-			findRelationsAtJunctionOfBothRoads(itnFile);
-			relationList.forEach(relOutput);
-		} else {
-			fullNodeList.forEach(nodeOutput);
-			fullWayList.forEach(wayOutput);
-		}
-		
-		outputWriter = new PrintWriter(outputFileName);
-	
-		outputWriter.println("<?xml version='1.0' encoding='UTF-8'?>"
-				+ "<osgb:FeatureCollection "
-				+ "xmlns:osgb='http://www.ordnancesurvey.co.uk/xml/namespaces/osgb' "
-				+ "xmlns:gml='http://www.opengis.net/gml' "
-				+ "xmlns:xlink='http://www.w3.org/1999/xlink' "
-				+ "xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' "
-				+ "xsi:schemaLocation='http://www.ordnancesurvey.co.uk/xml/namespaces/osgb http://www.ordnancesurvey.co.uk/xml/schema/v7/OSDNFFeatures.xsd' "
-				+ "fid='GDS-58096-1'>"
-				+ "<gml:description>Ordnance Survey, (c) Crown Copyright. All rights reserved, 2009-07-30</gml:description>"
-				+ "<gml:boundedBy><gml:null>unknown</gml:null></gml:boundedBy>"
-				+ "<osgb:queryTime>2009-07-30T02:01:07</osgb:queryTime>"
-				+ "<osgb:queryExtent>"
-				+ "<osgb:Rectangle srsName='osgb:BNG'>"
-				+ "<gml:coordinates>291000.000,92000.000 293000.000,94000.000</gml:coordinates>"
-				+ "</osgb:Rectangle>"
-				+ "</osgb:queryExtent>");
-		outputWriter.flush();
-		processDirOrFile(itnFile, extractProcessor);
-		outputWriter.println("<osgb:boundedBy>"
-				+ "<gml:Box srsName='osgb:BNG'>"
-				+ "<gml:coordinates>290822.000,91912.000 293199.000,94222.000</gml:coordinates>"
-				+ "</gml:Box>"
-				+ "</osgb:boundedBy>"
-				+ "</osgb:FeatureCollection>");
-		outputWriter.flush();
-		outputWriter.close();
-	}
-
-	private void prepareOutputMethods() {
-		nodeOutput = new TLongProcedure() {
-			@Override
-			public boolean execute(long arg0) {
-				System.err.println("node:" + arg0);
-				return true;
-			}
-		};
-
-		wayOutput = new TLongProcedure() {
-			@Override
-			public boolean execute(long arg0) {
-				System.err.println("way:" + arg0);
-				return true;
-			}
-		};
-
-		relOutput = new TLongProcedure() {
-			@Override
-			public boolean execute(long arg0) {
-				System.err.println("rel:" + arg0);
-				return true;
-			}
-		};
-	}
-
-	private void findNodesOfRoad(File itnFile) {
-		System.err.println("STAGE TWO");
-		fileProcessProcessor.setInnerProcess(extractNodeIds);
-		process(itnFile, fileProcessProcessor);
-	}
-
-	private void findWaysOnRoad(File itnFile) {
-		System.err.println("STAGE ONE");
-		fileProcessProcessor.setInnerProcess(extractWayIds);
-		process(itnFile, fileProcessProcessor);
-	}
-
-	private void findRelationsAtJunctionOfBothRoads(File itnFile) {
-		relationList = new TLongArrayList(30);
-		fileProcessProcessor
-				.setInnerProcess(extractRelationsAtJunctionOfBothRoads);
-		process(itnFile, fileProcessProcessor);
-	}
-
-	private void findWaysLinkedAtJunctionOfBothRoads(File itnFile) {
-		fullWayList = new TLongArrayList(30);
-		fullNodeList = origFullNodeList;
-		fileProcessProcessor.setInnerProcess(extractWayIdLinkedToNodes);
-		process(itnFile, fileProcessProcessor);
-	}
-
-	private void findNodesOnBothWays(File itnFile) {
-		System.err.println("STAGE FOUR");
-		fileProcessProcessor.setInnerProcess(extractNodeIds);
-		process(itnFile, fileProcessProcessor);
-		origFullNodeList.retainAll(fullNodeList);
-	}
-
-	private void findLinkedWayIDs(File itnFile) {
-		origFullNodeList = fullNodeList;
-		origFullWayList = fullWayList;
-		fullNodeList = new TLongArrayList(200);
-		fullWayList = new TLongArrayList(100);
-		workingRoadName = workingLinkRoad;
-		System.err.println("STAGE THREE");
-		findWaysOnRoad(itnFile);
-	}
-
-	void process(File itnFile, ProcessVisitor<File> processVisitor) {
-		try {
-			processDirOrFile(itnFile, processVisitor);
-		} catch (Exception ex) {
-			throw new RuntimeException("Problem while parsing file", ex);
-		}
-	}
-
-	private void processDirOrFile(File osmFile,
-			ProcessVisitor<File> processVisitor) throws XMLStreamException,
-			IOException, TransformerConfigurationException,
-			ParserConfigurationException, SAXException, TransformerException, XPathExpressionException, MismatchedDimensionException, FactoryException, TransformException {
-		if (osmFile.isDirectory()) {
-			String absolutePath = osmFile.getAbsolutePath();
-			String[] list = osmFile.list();
-			for (String file : list) {
-				File nextFile = new File(absolutePath + File.separator + file);
-				processDirOrFile(nextFile, processVisitor);
-			}
-		} else {
-			processSingleFile(osmFile, processVisitor);
-		}
-	}
-
-	private void processSingleFile(File osmFile,
-			ProcessVisitor<File> processVisitor) throws XMLStreamException,
-			IOException, TransformerConfigurationException,
-			ParserConfigurationException, SAXException, TransformerException, XPathExpressionException, MismatchedDimensionException, FactoryException, TransformException {
-		processVisitor.processVisitor(osmFile);
-	}
-
-	private void prepareNameRelation(Relation relation, TLongCollection wayList) {
-		ArrayList<? extends RelationMember> members = relation.getMembers();
-		for (RelationMember relationMember : members) {
-			wayList.add(relationMember.ref());
-		}
-	}
-
-	private void prepareWaysWithRelationInfo(Relation relation) {
-		// TODO Auto-generated method stub
-
-	}
+    OsItnInputFile file;
+    private String workingStore;
+    private TLongCollection fullWayList = new TLongArrayList(100);
+    private TLongCollection fullNodeList = new TLongArrayList(200);
+    private TLongCollection otherEndOfWayNodeList = new TLongArrayList(200);
+    private TLongCollection roadFidList = new TLongArrayList(200);
+    private String workingRoadName;
+    protected Set<String> notHighwaySet = new HashSet<String>();
+
+    private abstract class WayNodeProcess implements TLongProcedure {
+        protected final long end;
+        protected final RoutingElement item;
+        protected final long start;
+
+        private WayNodeProcess(long end, RoutingElement item, long start) {
+            this.end = end;
+            this.item = item;
+            this.start = start;
+        }
+
+    }
+
+    private abstract class ProcessVisitor<T> {
+        abstract void processVisitor(T element) throws XMLStreamException, IOException, ParserConfigurationException, SAXException, TransformerConfigurationException, TransformerException, XPathExpressionException, MismatchedDimensionException, FactoryException, TransformException;
+    }
+
+    private abstract class ProcessFileVisitor<T> extends ProcessVisitor<File> {
+        protected ProcessVisitor<T> innerProcess;
+
+        void setInnerProcess(ProcessVisitor<T> process) {
+            innerProcess = process;
+        }
+    }
+
+    private ProcessFileVisitor<RoutingElement> fileProcessProcessor = new ProcessFileVisitor<RoutingElement>() {
+
+        @Override
+        void processVisitor(File file) throws XMLStreamException, IOException, TransformerConfigurationException, ParserConfigurationException, SAXException, TransformerException, XPathExpressionException, MismatchedDimensionException, FactoryException, TransformException {
+            OsItnInputFile in = null;
+            try {
+                in = new OsItnInputFile(file).setWorkerThreads(1).open();
+                RoutingElement item;
+                while ((item = in.getNext()) != null) {
+                    innerProcess.processVisitor(item);
+                }
+            } finally {
+                Helper.close(in);
+            }
+        }
+    };
+
+    private ProcessVisitor<RoutingElement> extractWayIds = new ProcessVisitor<RoutingElement>() {
+        @Override
+        void processVisitor(RoutingElement item) {
+            if (item.isType(OSMElement.WAY)) {
+                final Way way = (Way) item;
+                if (way.hasTag("name", workingRoadName)) {
+                    System.out.println("Way found on " + workingRoadName + " id is " + way.getId());
+                    fullWayList.add(way.getId());
+                }
+            }
+            if (item.isType(OSMElement.RELATION)) {
+                final Relation relation = (Relation) item;
+                // if (!relation.isMetaRelation()
+                // && relation.hasTag(OSITNElement.TAG_KEY_TYPE, "route"))
+                // prepareWaysWithRelationInfo(relation);
+//                System.out.println("\t\tCHECK OUT A RELATION " + relation.getId());
+                if (relation.isMetaRelation()) {
+                    System.out.println("\t\tADD IT TO my road fids");
+                }
+                if (relation.hasTag("name", workingRoadName)) {
+                    System.out.println("Relation found on " + workingRoadName + " id is " + relation.getId());
+                    prepareNameRelation(relation, fullWayList);
+                    roadFidList.add(relation.getId());
+                }
+            }
+        }
+    };
+
+    private ProcessVisitor<RoutingElement> extractNodeIds = new ProcessVisitor<RoutingElement>() {
+
+        @Override
+        void processVisitor(RoutingElement item) {
+            if (item.isType(OSMElement.WAY)) {
+                final Way way = (Way) item;
+                if (item.hasTag("nothighway")) {
+                    notHighwaySet.add(item.getTag("nothighway"));
+                }
+                if (fullWayList.contains(way.getId())) {
+                    TLongList nodes = way.getNodes();
+                    long startNode = nodes.get(0);
+                    long endNode = nodes.get(nodes.size() - 1);
+                    System.out.println("Add start: " + startNode + " end: " + endNode);
+                    fullNodeList.add(startNode);
+                    fullNodeList.add(endNode);
+                }
+            }
+        }
+    };
+
+    private ProcessVisitor<RoutingElement> extractWayIdLinkedToNodes = new ProcessVisitor<RoutingElement>() {
+        @Override
+        void processVisitor(final RoutingElement item) {
+            if (item.isType(OSMElement.WAY)) {
+                final Way way = (Way) item;
+                TLongList nodes = way.getNodes();
+                final long start = nodes.get(0);
+                final long end = nodes.get(nodes.size() - 1);
+                TLongProcedure addWayIfNodeExists = new WayNodeProcess(end, item, start) {
+                    @Override
+                    public boolean execute(long testNode) {
+                        if (testNode == start || testNode == end) {
+                            // ADD THE OTHER END IN TO OUR new collection
+                            long otherEnd = testNode == start?end:start;
+                            otherEndOfWayNodeList.add(otherEnd);
+
+                            fullWayList.add(item.getId());
+                            
+                            return false;
+                        }
+                        return true;
+                    }
+                };
+                origFullNodeList.forEach(addWayIfNodeExists);
+            }
+        }
+    };
+
+    private ProcessVisitor<RoutingElement> extractRelationsAtJunctionOfBothRoads = new ProcessVisitor<RoutingElement>() {
+        @Override
+        void processVisitor(final RoutingElement item) {
+            if (item.isType(OSMElement.RELATION)) {
+                final Relation rel = (Relation) item;
+                ArrayList<? extends RelationMember> links = rel.getMembers();
+                final long start = links.get(0).ref();
+                final long end = links.get(links.size() - 1).ref();
+                TLongProcedure addRelIfWayExists = new WayNodeProcess(end, item, start) {
+                    @Override
+                    public boolean execute(long testNode) {
+                        if (testNode == start || testNode == end) {
+                            relationList.add(rel.getId());
+                            return false;
+                        }                        
+                        return true;
+                    }
+                };
+                fullWayList.forEach(addRelIfWayExists);
+            }
+        }
+    };
+
+    private ProcessVisitor<File> extractProcessor = new ProcessVisitor<File>() {
+        void processVisitor(File element) throws XMLStreamException, IOException, ParserConfigurationException, SAXException, TransformerException, XPathExpressionException {
+            OsItnInputFile itn = new OsItnInputFile(element);
+            InputStream bis = itn.getInputStream();
+            TLongArrayList fidList = new TLongArrayList(relationList);
+            fidList.addAll(fullWayList);
+            fidList.addAll(origFullNodeList);
+            // ADD IN OUR ADDITIONAL NODE LIST HERE
+            fidList.addAll(otherEndOfWayNodeList);
+            fidList.addAll(roadFidList);
+            
+            outputListedFids(fidList, bis);
+        };
+
+        private void outputListedFids(TLongArrayList fidList, InputStream bis) throws XMLStreamException, NumberFormatException, IOException {
+            boolean output = false;
+
+            BufferedReader bir = new BufferedReader(new InputStreamReader(bis));
+            String lastLine = "";
+            while (bir.ready()) {
+                String line = bir.readLine();
+
+                if (output) {
+                    outputWriter.println(line);
+                    if (isEndBlock(line)) {
+                        output = false;
+                        outputWriter.flush();
+                    }
+                }
+                if (!output && line.contains("fid='osgb")) {
+                    String idStr = line.substring(line.indexOf("fid='osgb") + 9, line.lastIndexOf('\''));
+                    long checkFid = Long.parseLong(idStr);
+                    if (fidList.contains(checkFid)) {
+                        output = true;
+                        outputWriter.println(lastLine);
+                        outputWriter.println(line);
+                    }
+                }
+                lastLine = line;
+            }
+        }
+
+        private boolean isEndBlock(String curLine) {
+            boolean endBlock = false;
+            switch (curLine) {
+            case "</osgb:networkMember>":
+            case "</osgb:roadInformationMember>":
+            case "</osgb:roadMember>": {
+                endBlock = true;
+                break;
+            }
+            }
+            return endBlock;
+        }
+    };
+
+    private String workingLinkRoad;
+    private TLongCollection origFullNodeList;
+    private TLongCollection origFullWayList;
+    private TLongProcedure nodeOutput;
+    private TLongProcedure wayOutput;
+    private TLongArrayList relationList;
+    private TLongProcedure relOutput;
+    private PrintWriter outputWriter;
+
+    public static void main(String[] strs) throws Exception {
+        CmdArgs args = CmdArgs.read(strs);
+        String fileOrDirName = args.get("osmreader.osm", null);
+        String namedRoad = args.get("roadName", null);
+        String namedLinkRoad = args.get("linkRoadName", null);
+        System.out.println("Find junction around " + namedRoad + " and " + namedLinkRoad);
+        String outputFileName = args.get("itnoutput", "os-itn-" + namedRoad.replaceAll(" ", "-").toLowerCase() + (null != namedLinkRoad ? "-" + namedLinkRoad.replaceAll(" ", "-").toLowerCase() : "") + ".xml");
+        OsITNProblemRouteExtractor extractor = new OsITNProblemRouteExtractor(fileOrDirName, namedRoad, namedLinkRoad);
+        extractor.process(outputFileName);
+        args.put("reader.implementation", "OSITN");
+        args.put("osmreader.osm", outputFileName);
+        GraphHopper hopper = new GraphHopper().init(args).importOrLoad();
+        FlagEncoder carEncoder = hopper.getEncodingManager().getEncoder("CAR");
+        EdgeFilter filter = new DefaultEdgeFilter(carEncoder, false, true);
+
+        GHUtility.printInfo(hopper.getGraph(), 0, Integer.MIN_VALUE, filter);
+    }
+
+    public OsITNProblemRouteExtractor(String fileOrDirName, String namedRoad, String namedLinkRoad) {
+        workingStore = fileOrDirName;
+        workingRoadName = namedRoad;
+        workingLinkRoad = namedLinkRoad;
+    }
+
+    private void process(String outputFileName) throws TransformerException, ParserConfigurationException, SAXException, XPathExpressionException, XMLStreamException, IOException, MismatchedDimensionException, FactoryException, TransformException {
+        prepareOutputMethods();
+
+        File itnFile = new File(workingStore);
+        findWaysOnRoad(itnFile);
+        findNodesOfRoad(itnFile);
+
+        if (null != workingLinkRoad) {
+            findLinkedWayIDs(itnFile);
+            findNodesOnBothWays(itnFile);
+            origFullNodeList.forEach(nodeOutput);
+            findWaysLinkedAtJunctionOfBothRoads(itnFile);
+            fullWayList.forEach(wayOutput);
+            findRelationsAtJunctionOfBothRoads(itnFile);
+            relationList.forEach(relOutput);
+        } else {
+            fullNodeList.forEach(nodeOutput);
+            fullWayList.forEach(wayOutput);
+        }
+
+        outputWriter = new PrintWriter(outputFileName);
+
+        outputWriter.println("<?xml version='1.0' encoding='UTF-8'?>" + "<osgb:FeatureCollection " + "xmlns:osgb='http://www.ordnancesurvey.co.uk/xml/namespaces/osgb' " + "xmlns:gml='http://www.opengis.net/gml' " + "xmlns:xlink='http://www.w3.org/1999/xlink' " + "xmlns:xsi='http://www.w3.org/2001/XMLSchema-instance' " + "xsi:schemaLocation='http://www.ordnancesurvey.co.uk/xml/namespaces/osgb http://www.ordnancesurvey.co.uk/xml/schema/v7/OSDNFFeatures.xsd' " + "fid='GDS-58096-1'>"
+                + "<gml:description>Ordnance Survey, (c) Crown Copyright. All rights reserved, 2009-07-30</gml:description>" + "<gml:boundedBy><gml:null>unknown</gml:null></gml:boundedBy>" + "<osgb:queryTime>2009-07-30T02:01:07</osgb:queryTime>" + "<osgb:queryExtent>" + "<osgb:Rectangle srsName='osgb:BNG'>" + "<gml:coordinates>291000.000,92000.000 293000.000,94000.000</gml:coordinates>" + "</osgb:Rectangle>" + "</osgb:queryExtent>");
+        outputWriter.flush();
+        processDirOrFile(itnFile, extractProcessor);
+        outputWriter.println("<osgb:boundedBy>" + "<gml:Box srsName='osgb:BNG'>" + "<gml:coordinates>290822.000,91912.000 293199.000,94222.000</gml:coordinates>" + "</gml:Box>" + "</osgb:boundedBy>" + "</osgb:FeatureCollection>");
+        outputWriter.flush();
+        outputWriter.close();
+    }
+
+    private void prepareOutputMethods() {
+        nodeOutput = new TLongProcedure() {
+            @Override
+            public boolean execute(long arg0) {
+                System.err.println("node:" + arg0);
+                return true;
+            }
+        };
+
+        wayOutput = new TLongProcedure() {
+            @Override
+            public boolean execute(long arg0) {
+                System.err.println("way:" + arg0);
+                return true;
+            }
+        };
+
+        relOutput = new TLongProcedure() {
+            @Override
+            public boolean execute(long arg0) {
+                System.err.println("rel:" + arg0);
+                return true;
+            }
+        };
+    }
+
+    private void findNodesOfRoad(File itnFile) {
+        System.err.println("STAGE TWO - findNodesOfRoad");
+        fileProcessProcessor.setInnerProcess(extractNodeIds);
+        process(itnFile, fileProcessProcessor);
+    }
+
+    private void findWaysOnRoad(File itnFile) {
+        System.err.println("STAGE ONE - findWaysOnRoad");
+        fileProcessProcessor.setInnerProcess(extractWayIds);
+        process(itnFile, fileProcessProcessor);
+    }
+
+    private void findRelationsAtJunctionOfBothRoads(File itnFile) {
+        relationList = new TLongArrayList(30);
+        fileProcessProcessor.setInnerProcess(extractRelationsAtJunctionOfBothRoads);
+        process(itnFile, fileProcessProcessor);
+    }
+
+    private void findWaysLinkedAtJunctionOfBothRoads(File itnFile) {
+        fullWayList = new TLongArrayList(30);
+        fullNodeList = origFullNodeList;
+        fileProcessProcessor.setInnerProcess(extractWayIdLinkedToNodes);
+        process(itnFile, fileProcessProcessor);
+    }
+
+    private void findNodesOnBothWays(File itnFile) {
+        System.err.println("STAGE FOUR - findNodesOnBothWays");
+        fileProcessProcessor.setInnerProcess(extractNodeIds);
+        process(itnFile, fileProcessProcessor);
+        origFullNodeList.retainAll(fullNodeList);
+    }
+
+    private void findLinkedWayIDs(File itnFile) {
+        System.err.println("STAGE THREE - findLinkedWayIDs");
+        origFullNodeList = fullNodeList;
+        origFullWayList = fullWayList;
+        fullNodeList = new TLongArrayList(200);
+        fullWayList = new TLongArrayList(100);
+        workingRoadName = workingLinkRoad;
+        findWaysOnRoad(itnFile);
+    }
+
+    void process(File itnFile, ProcessVisitor<File> processVisitor) {
+        try {
+            processDirOrFile(itnFile, processVisitor);
+        } catch (Exception ex) {
+            throw new RuntimeException("Problem while parsing file", ex);
+        }
+    }
+
+    private void processDirOrFile(File osmFile, ProcessVisitor<File> processVisitor) throws XMLStreamException, IOException, TransformerConfigurationException, ParserConfigurationException, SAXException, TransformerException, XPathExpressionException, MismatchedDimensionException, FactoryException, TransformException {
+        if (osmFile.isDirectory()) {
+            String absolutePath = osmFile.getAbsolutePath();
+            String[] list = osmFile.list();
+            for (String file : list) {
+                File nextFile = new File(absolutePath + File.separator + file);
+                processDirOrFile(nextFile, processVisitor);
+            }
+        } else {
+            processSingleFile(osmFile, processVisitor);
+        }
+    }
+
+    private void processSingleFile(File osmFile, ProcessVisitor<File> processVisitor) throws XMLStreamException, IOException, TransformerConfigurationException, ParserConfigurationException, SAXException, TransformerException, XPathExpressionException, MismatchedDimensionException, FactoryException, TransformException {
+        processVisitor.processVisitor(osmFile);
+    }
+
+    private void prepareNameRelation(Relation relation, TLongCollection wayList) {
+        ArrayList<? extends RelationMember> members = relation.getMembers();
+        for (RelationMember relationMember : members) {
+            System.out.println("\t Add way member: " + relationMember.ref());
+            wayList.add(relationMember.ref());
+        }
+    }
+
+    private void prepareWaysWithRelationInfo(Relation relation) {
+        // TODO Auto-generated method stub
+
+    }
 }
