diff --git a/core/src/main/java/com/samsix/graphhopper/S6GraphHopper.java b/core/src/main/java/com/samsix/graphhopper/S6GraphHopper.java
index cd4bdfee0e..c8d629104d 100644
--- a/core/src/main/java/com/samsix/graphhopper/S6GraphHopper.java
+++ b/core/src/main/java/com/samsix/graphhopper/S6GraphHopper.java
@@ -15,6 +15,10 @@
     @Override
     public Weighting createWeighting( WeightingMap wMap, FlagEncoder encoder )
     {
+        if (encoder instanceof TruckFlagEncoder) {
+            return new TruckWeighting();
+        }
+        
         Weighting defaultWeighting = super.createWeighting(wMap, encoder);
         
         //
@@ -46,7 +50,7 @@ public Weighting createWeighting( WeightingMap wMap, FlagEncoder encoder )
         private Set<Integer> avoidEdges;
        
         public AvoidEdgeWeighting(final Weighting weighting,
-                                final Set<Integer> avoidEdges)
+                                  final Set<Integer> avoidEdges)
         {
             this.weighting = weighting;
             this.avoidEdges = avoidEdges;
@@ -79,4 +83,30 @@ public double calcWeight(final EdgeIteratorState edgeState,
             return weighting.calcWeight(edgeState, reverse, prevOrNextEdgeId);
         }
     }
+    
+    
+    public static class TruckWeighting
+        implements
+            Weighting
+    {
+        @Override
+        public double getMinWeight(final double distance)
+        {
+            return 0;
+        }
+
+        @Override
+        public double calcWeight(final EdgeIteratorState edgeState,
+                                 final boolean reverse,
+                                 final int prevOrNextEdgeId)
+        {
+            long flags = edgeState.getFlags();
+            //
+            // TODO: If flags contain the hgv=designated then make this very favorable (zero);
+            // if hgv=destination then make it quite
+            // unfavorable. Otherwise, make it a midland value.
+            //
+            return 0;
+        }
+    }
 }
diff --git a/core/src/main/java/com/samsix/graphhopper/TruckFlagEncoder.java b/core/src/main/java/com/samsix/graphhopper/TruckFlagEncoder.java
index 73459c6025..fae08d6a73 100644
--- a/core/src/main/java/com/samsix/graphhopper/TruckFlagEncoder.java
+++ b/core/src/main/java/com/samsix/graphhopper/TruckFlagEncoder.java
@@ -1,12 +1,23 @@
 package com.samsix.graphhopper;
 
+import static com.graphhopper.util.Helper.keepIn;
+
 import com.graphhopper.reader.OSMWay;
 import com.graphhopper.routing.util.CarFlagEncoder;
+import com.graphhopper.routing.util.EncodedDoubleValue;
+import com.graphhopper.routing.util.EncodedValue;
+import com.graphhopper.util.EdgeIteratorState;
+import com.graphhopper.util.PointList;
 
 public class TruckFlagEncoder
     extends
         CarFlagEncoder
 {
+    public static final int K_DESIGNATED = 101;
+    public static final int K_DESTINATION = 102;
+    private long designatedbit = 0;
+    private long destinationbit = 0;
+    
     public TruckFlagEncoder()
     {
         super();
@@ -20,7 +31,7 @@ public TruckFlagEncoder()
     
     
     @Override
-    public long acceptWay( OSMWay way )
+    public long acceptWay(final OSMWay way)
     {
         String hgv = way.getTag("hgv");
     
@@ -38,6 +49,80 @@ public long acceptWay( OSMWay way )
         return super.acceptWay( way );
     }
 
+    @Override
+    public int defineWayBits( int index, int shift )
+    {
+        // first two bits are reserved for route handling in superclass
+        shift = super.defineWayBits(index, shift);
+        
+        designatedbit = 1L << shift++;
+        destinationbit = 1L << shift++;
+
+        return shift;
+    }
+
+    //
+    // TODO: Is this necessary? Is this correct? Do I use zeros here and save zeros?
+    //
+    @Override
+    public long handleWayTags( OSMWay way, long allowed, long relationFlags )
+    {
+        if (way.hasTag("hgv", "designated")) {
+            return setBool(0, K_DESIGNATED, true);
+        }
+        
+        if (way.hasTag("hgv", "destination")) {
+            return setBool(0, K_DESTINATION, true);
+        }
+        
+        return 0;
+    }
+    
+    @Override
+    public void applyWayTags(final OSMWay way,
+                             final EdgeIteratorState edge)
+    {
+        long flags = edge.getFlags();
+        
+        if (way.hasTag("hgv", "designated")) {
+            flags = setBool(flags, K_DESIGNATED, true);
+        }
+        
+        if (way.hasTag("hgv", "destination")) {
+            flags = setBool(flags, K_DESIGNATED, true);
+        }
+
+        edge.setFlags(flags);
+    }
+
+    @Override
+    public long setBool( long flags, int key, boolean value )
+    {
+        switch (key)
+        {
+        case K_DESIGNATED:
+            return value ? flags | designatedbit : flags & ~designatedbit;
+        case K_DESTINATION:
+            return value ? flags | destinationbit : flags & ~destinationbit;
+        default:
+            return super.setBool(flags, key, value);
+        }
+    }
+
+    @Override
+    public boolean isBool( long flags, int key )
+    {
+        switch (key)
+        {
+        case K_DESIGNATED:
+            return (flags & designatedbit) != 0;
+        case K_DESTINATION:
+            return (flags & destinationbit) != 0;
+        default:
+            return super.isBool(flags, key);
+        }
+    }
+    
     @Override
     public String toString()
     {
