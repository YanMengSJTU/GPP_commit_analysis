diff --git a/core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
index 9e6ea6ddab..c610521ce8 100644
--- a/core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
@@ -1,10 +1,10 @@
 /*
  *  Licensed to GraphHopper and Peter Karich under one or more contributor
- *  license agreements. See the NOTICE file distributed with this work for 
+ *  license agreements. See the NOTICE file distributed with this work for
  *  additional information regarding copyright ownership.
  *
- *  GraphHopper licenses this file to you under the Apache License, 
- *  Version 2.0 (the "License"); you may not use this file except in 
+ *  GraphHopper licenses this file to you under the Apache License,
+ *  Version 2.0 (the "License"); you may not use this file except in
  *  compliance with the License. You may obtain a copy of the License at
  *
  *       http://www.apache.org/licenses/LICENSE-2.0
@@ -51,7 +51,7 @@
     /**
      * Should be only instantied via EncodingManager
      */
-    protected CarFlagEncoder()
+    public CarFlagEncoder()
     {
         this(5, 5);
     }
diff --git a/core/src/main/java/com/graphhopper/storage/index/LocationIndexTree.java b/core/src/main/java/com/graphhopper/storage/index/LocationIndexTree.java
index 578d1b30de..a8e2127b59 100644
--- a/core/src/main/java/com/graphhopper/storage/index/LocationIndexTree.java
+++ b/core/src/main/java/com/graphhopper/storage/index/LocationIndexTree.java
@@ -297,7 +297,7 @@ public LocationIndex prepareIndex()
 
         // compact & store to dataAccess
         // XXX: it seems that there is issue somewhere, so I temporarily commented this
-        //dataAccess.create(64 * 1024);
+        dataAccess.create(64 * 1024);
         int lastPointer = inMem.store(inMem.root, START_POINTER);
         flush();
         float entriesPerLeaf = (float) inMem.size / inMem.leafs;
diff --git a/graphhopper-teavm/src/main/java/com/graphhopper/teavm/Base64.java b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/Base64.java
index acbc26febd..1238ee1c70 100644
--- a/graphhopper-teavm/src/main/java/com/graphhopper/teavm/Base64.java
+++ b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/Base64.java
@@ -61,7 +61,7 @@ private static void printBuffer(char[] chars, int buffer, int target) {
 
     public static byte[] decode(String message) {
         byte[] data = new byte[calculateLength(message)];
-        int sz = ((data.length + 1) / 4) * 4;
+        int sz = (data.length / 3) * 4;
         int buffer = 0;
         int j = 0;
         for (int i = 0; i < sz; i += 4) {
diff --git a/graphhopper-teavm/src/main/java/com/graphhopper/teavm/GraphhopperJsonGenerator.java b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/GraphhopperJsonGenerator.java
index e5b5cb50cc..4028349eac 100644
--- a/graphhopper-teavm/src/main/java/com/graphhopper/teavm/GraphhopperJsonGenerator.java
+++ b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/GraphhopperJsonGenerator.java
@@ -3,12 +3,18 @@
 import java.io.File;
 import java.io.IOException;
 import java.io.PrintStream;
+import java.util.Arrays;
 import com.graphhopper.GraphHopper;
-import com.graphhopper.routing.util.Bike2WeightFlagEncoder;
+import com.graphhopper.routing.DijkstraBidirection;
+import com.graphhopper.routing.Path;
+import com.graphhopper.routing.util.CarFlagEncoder;
 import com.graphhopper.routing.util.EncodingManager;
+import com.graphhopper.routing.util.FastestWeighting;
+import com.graphhopper.routing.util.Weighting;
 import com.graphhopper.storage.DataAccess;
 import com.graphhopper.storage.GHDirectory;
-import com.graphhopper.storage.index.LocationIndexTree;
+import com.graphhopper.storage.index.LocationIndex;
+import com.graphhopper.util.PointList;
 
 /**
  *
@@ -20,13 +26,25 @@ public static void main(String[] args) throws IOException {
         gh.setGraphHopperLocation("gh-folder");
         gh.setOSMFile(args[0]);
         gh.setInMemory(true);
-        gh.setEncodingManager(new EncodingManager(new Bike2WeightFlagEncoder()));
+        gh.setEncodingManager(new EncodingManager(new CarFlagEncoder()));
         gh.set3D(true);
         gh.importOrLoad();
-        LocationIndexTree locTree = new LocationIndexTree(gh.getGraph(), gh.getGraph().getDirectory());
-        //locTree.prepareIndex();
-        //locTree.flush();
-        System.out.println(locTree.findID(55.762523, 37.408784));
+        LocationIndex locTree = gh.getLocationIndex();
+        int fromNode = locTree.findID(55.762523, 37.408784);
+        int toNode = locTree.findID(55.784806, 37.708047);
+        System.out.println("Source node: " + fromNode);
+        System.out.println("Target node: " + toNode);
+
+        Weighting weighting = new FastestWeighting(gh.getEncodingManager().getSingle());
+        DijkstraBidirection algo = new DijkstraBidirection(gh.getGraph(), gh.getEncodingManager().getSingle(),
+                weighting);
+        Path path = algo.calcPath(fromNode, toNode);
+        PointList points = path.calcPoints();
+        for (int i = 0; i < points.size(); ++i) {
+            System.out.println(points.getLat(i) + "; " + points.getLon(i));
+        }
+        System.out.println("Distance: " + path.getDistance());
+
         GHDirectory dir = (GHDirectory)gh.getGraph().getDirectory();
         byte[] buffer = new byte[1024];
         PrintStream out = new PrintStream(new File(args[1]));
@@ -48,6 +66,7 @@ public static void main(String[] args) throws IOException {
 
             for (int i = 0; i < dataAccess.getCapacity(); i += buffer.length) {
                 int sz = (int)(Math.min(i + buffer.length, dataAccess.getCapacity()) - i);
+                Arrays.fill(buffer, (byte)0);
                 for (int j = 0; j < sz; j += 4) {
                     int val = dataAccess.getInt(i + j);
                     buffer[j + 0] = (byte)(val & 0xFF);
diff --git a/graphhopper-teavm/src/main/java/com/graphhopper/teavm/Main.java b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/Main.java
index 00a9620207..3ae81e4c5c 100644
--- a/graphhopper-teavm/src/main/java/com/graphhopper/teavm/Main.java
+++ b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/Main.java
@@ -17,11 +17,15 @@
  */
 public class Main {
     public static void main(String[] args) {
+        long start = System.currentTimeMillis();
         InMemoryDirectory directory = new InMemoryDirectory();
         readAll(directory);
-        EncodingManager encodingManager = new EncodingManager(new BikeFlagEncoder());
+        EncodingManager encodingManager = new EncodingManager(new CarFlagEncoder());
         GraphHopperStorage graph = new GraphHopperStorage(directory, encodingManager, true);
         graph.loadExisting();
+        System.out.println("Data loaded in " + (System.currentTimeMillis() - start) + "ms");
+
+        start = System.currentTimeMillis();
         FlagEncoder encoder = encodingManager.getSingle();
 
         Weighting weighting = new FastestWeighting(encoder);
@@ -31,6 +35,8 @@ public static void main(String[] args) {
         locationIndex.loadExisting();
         int fromNode = locationIndex.findID(55.762523, 37.408784);
         int toNode = locationIndex.findID(55.784806, 37.708047);
+        System.out.println("Source node: " + fromNode);
+        System.out.println("Target node: " + toNode);
 
         Path path = algo.calcPath(fromNode, toNode);
         PointList points = path.calcPoints();
@@ -38,6 +44,7 @@ public static void main(String[] args) {
             System.out.println(points.getLat(i) + "; " + points.getLon(i));
         }
         System.out.println("Distance: " + path.getDistance());
+        System.out.println("Route computed in " + (System.currentTimeMillis() - start) + "ms");
     }
 
     private static void readAll(InMemoryDirectory directory) {
@@ -64,3 +71,4 @@ private static void readAll(InMemoryDirectory directory) {
         }
     }
 }
+
diff --git a/graphhopper-teavm/src/test/java/com/graphhopper/teavm/Base64Test.java b/graphhopper-teavm/src/test/java/com/graphhopper/teavm/Base64Test.java
index 749b25e5d0..903f4be619 100644
--- a/graphhopper-teavm/src/test/java/com/graphhopper/teavm/Base64Test.java
+++ b/graphhopper-teavm/src/test/java/com/graphhopper/teavm/Base64Test.java
@@ -17,6 +17,7 @@ public void encodes() {
         assertEquals("Zm9vYg==", Base64.encode("foob".getBytes()));
         assertEquals("Zm9vYmE=", Base64.encode("fooba".getBytes()));
         assertEquals("Zm9vYmFy", Base64.encode("foobar".getBytes()));
+        assertEquals(humptyDumptyBase, Base64.encode(humptyDumptyText.getBytes()));
     }
 
     @Test
@@ -28,5 +29,12 @@ public void decodes() {
         assertArrayEquals("foob".getBytes(), Base64.decode("Zm9vYg=="));
         assertArrayEquals("fooba".getBytes(), Base64.decode("Zm9vYmE="));
         assertArrayEquals("foobar".getBytes(), Base64.decode("Zm9vYmFy"));
+        assertArrayEquals(humptyDumptyText.getBytes(), Base64.decode(humptyDumptyBase));
     }
+
+    private String humptyDumptyText = "Humpty Dumpty sat on a wall, Humpty Dumpty had a great fall. " +
+            "All the king's horses and all the king's men Couldn't put Humpty together again.";
+    private String humptyDumptyBase = "SHVtcHR5IER1bXB0eSBzYXQgb24gYSB3YWxsLCBIdW1wdHkgRHVtcHR5IGhhZCBhIGdyZWF0IGZhb" +
+            "GwuIEFsbCB0aGUga2luZydzIGhvcnNlcyBhbmQgYWxsIHRoZSBraW5nJ3MgbWVuIENvdWxkbid0IHB1dCBIdW1wdHkgdG9nZXRoZXIg" +
+            "YWdhaW4u";
 }
