diff --git a/web/files/r5_predicted_tt.csv b/web/files/r5_predicted_tt.csv
new file mode 100644
index 0000000000..cd5c4e2db4
--- /dev/null
+++ b/web/files/r5_predicted_tt.csv
@@ -0,0 +1,5 @@
+edgeId,geometry,streetName,speedLimit,0h_1,0h_2,0h_3,0h_4,1h_1,1h_2,1h_3,1h_4,2h_1,2h_2,2h_3,2h_4,3h_1,3h_2,3h_3,3h_4,4h_1,4h_2,4h_3,4h_4,5h_1,5h_2,5h_3,5h_4,6h_1,6h_2,6h_3,6h_4,7h_1,7h_2,7h_3,7h_4,8h_1,8h_2,8h_3,8h_4,9h_1,9h_2,9h_3,9h_4,10h_1,10h_2,10h_3,10h_4,11h_1,11h_2,11h_3,11h_4,12h_1,12h_2,12h_3,12h_4,13h_1,13h_2,13h_3,13h_4,14h_1,14h_2,14h_3,14h_4,15h_1,15h_2,15h_3,15h_4,16h_1,16h_2,16h_3,16h_4,17h_1,17h_2,17h_3,17h_4,18h_1,18h_2,18h_3,18h_4,19h_1,19h_2,19h_3,19h_4,20h_1,20h_2,20h_3,20h_4,21h_1,21h_2,21h_3,21h_4,22h_1,22h_2,22h_3,22h_4,23h_1,23h_2,23h_3,23h_4,freeFlow
+862,"LINESTRING (-79.3522707 43.7664455, -79.3471958 43.7666118, -79.3470149 43.7666163)",Highway 401 Collectors,100,100,100,100,106,106,106,106,110,110,110,110,109,109,109,109,105,105,105,105,101,101,101,101,108,108,108,108,62,62,62,62,17,17,17,17,44,44,44,44,20,20,20,20,8,8,8,8,54,54,54,54,50,50,50,50,85,85,85,85,35,35,35,35,52,52,52,52,19,19,19,19,7,7,7,7,52,52,52,52,64,64,64,64,94,94,94,94,101,101,101,101,97,97,97,97,103,103,103,103,98
+863,"LINESTRING (-79.3470149 43.7666163, -79.3471958 43.7666118, -79.3522707 43.7664455)",Highway 401 Collectors,100,100,100,100,116,116,116,116,100,100,100,100,108,108,108,108,109,109,109,109,104,104,104,104,105,105,105,105,105,105,105,105,99,99,99,99,61,61,61,61,89,89,89,89,103,103,103,103,101,101,101,101,101,101,101,101,101,101,101,101,94,94,94,94,66,66,66,66,44,44,44,44,70,70,70,70,65,65,65,65,102,102,102,102,98,98,98,98,105,105,105,105,105,105,105,105,110,110,110,110,98
+864,"LINESTRING (-79.3536635 43.7666169, -79.349396 43.7668285, -79.3471321 43.7669408, -79.3456764 43.7670294, -79.3413567 43.7672924, -79.3358035 43.7676209)",Highway 401 Express,100,100,100,100,106,106,106,106,110,110,110,110,109,109,109,109,105,105,105,105,101,101,101,101,108,108,108,108,62,62,62,62,17,17,17,17,44,44,44,44,20,20,20,20,8,8,8,8,54,54,54,54,50,50,50,50,85,85,85,85,35,35,35,35,52,52,52,52,19,19,19,19,7,7,7,7,52,52,52,52,64,64,64,64,94,94,94,94,101,101,101,101,97,97,97,97,103,103,103,103,98
+865,"LINESTRING (-79.3358035 43.7676209, -79.3413567 43.7672924, -79.3456764 43.7670294, -79.3471321 43.7669408, -79.349396 43.7668285, -79.3536635 43.7666169)",Highway 401 Express,100,100,100,100,116,116,116,116,100,100,100,100,108,108,108,108,109,109,109,109,104,104,104,104,105,105,105,105,105,105,105,105,99,99,99,99,61,61,61,61,89,89,89,89,103,103,103,103,101,101,101,101,101,101,101,101,101,101,101,101,94,94,94,94,66,66,66,66,44,44,44,44,70,70,70,70,65,65,65,65,102,102,102,102,98,98,98,98,105,105,105,105,105,105,105,105,110,110,110,110,98
diff --git a/web/src/main/java/com/graphhopper/swl/DefaultSpeedCalculator.java b/web/src/main/java/com/graphhopper/swl/DefaultSpeedCalculator.java
new file mode 100644
index 0000000000..0a6d88cedc
--- /dev/null
+++ b/web/src/main/java/com/graphhopper/swl/DefaultSpeedCalculator.java
@@ -0,0 +1,42 @@
+/*
+ *  Licensed to GraphHopper GmbH under one or more contributor
+ *  license agreements. See the NOTICE file distributed with this work for
+ *  additional information regarding copyright ownership.
+ *
+ *  GraphHopper GmbH licenses this file to you under the Apache License,
+ *  Version 2.0 (the "License"); you may not use this file except in
+ *  compliance with the License. You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+
+package com.graphhopper.swl;
+
+import com.graphhopper.GHRequest;
+import com.graphhopper.routing.util.FlagEncoder;
+import com.graphhopper.util.EdgeIteratorState;
+
+class DefaultSpeedCalculator implements SpeedCalculator {
+    private final FlagEncoder encoder;
+
+    public DefaultSpeedCalculator(FlagEncoder encoder) {
+        this.encoder = encoder;
+    }
+
+    @Override
+    public double getSpeed(EdgeIteratorState edgeState, boolean reverse, int durationSeconds, String streetMode, GHRequest req) {
+        long flags = edgeState.getFlags();
+        if (reverse && !encoder.isBackward(flags)
+                || !reverse && !encoder.isForward(flags))
+            throw new IllegalStateException("Calculating time should not require to read speed from edge in wrong direction. "
+                    + "Reverse:" + reverse + ", fwd:" + encoder.isForward(flags) + ", bwd:" + encoder.isBackward(flags));
+
+        return reverse ? encoder.getReverseSpeed(flags) : encoder.getSpeed(flags);
+    }
+}
diff --git a/web/src/main/java/com/graphhopper/swl/FileTravelTimeCalculator.java b/web/src/main/java/com/graphhopper/swl/FileTravelTimeCalculator.java
index c946054c9a..11f9dfb7bf 100644
--- a/web/src/main/java/com/graphhopper/swl/FileTravelTimeCalculator.java
+++ b/web/src/main/java/com/graphhopper/swl/FileTravelTimeCalculator.java
@@ -20,6 +20,8 @@
 
 import com.csvreader.CsvReader;
 import com.graphhopper.GHRequest;
+import com.graphhopper.routing.util.FlagEncoder;
+import com.graphhopper.util.EdgeIteratorState;
 import org.slf4j.LoggerFactory;
 
 import java.io.File;
@@ -32,15 +34,11 @@
 import java.util.stream.IntStream;
 import java.util.stream.Stream;
 
-public class FileTravelTimeCalculator implements TravelTimeCalculator {
+public class FileTravelTimeCalculator implements SpeedCalculator {
     private static final org.slf4j.Logger LOG = LoggerFactory.getLogger(FileTravelTimeCalculator.class);
-    private final TravelTimeCalculator delegateTravelTimeCalculator =
-            new TravelTimeCalculator() {
-                @Override
-                public float getTravelTimeMilliseconds(int edge, int durationSeconds, String streetMode, GHRequest req) {
-                    return 0;
-                }
-            };
+
+    OriginalDirectionFlagEncoder encoder = null;
+    private final SpeedCalculator delegateTravelTimeCalculator = new DefaultSpeedCalculator(encoder);
 
     private Map<Integer, short[]> linkTravelTimes;
 
@@ -62,18 +60,18 @@ public FileTravelTimeCalculator(String path) {
     }
 
     @Override
-    public float getTravelTimeMilliseconds(int edge, int durationSeconds, String streetMode, GHRequest req) {
-//        if (linkTravelTimes != null && streetMode.equals("car")) {
-//            short[] speeds = linkTravelTimes.get(edge.getEdgeIndex());
-//            if (speeds != null) {
-//                int currentTimeSeconds = req.fromTime + durationSeconds;
-//                int timebinIndex = (currentTimeSeconds / (60 * 15)) % (24 * 4);
-//                double speedms = speeds[timebinIndex] / 3.6;
-//                return (float) (edge.getLengthM() / speedms);
-//            }
-//        }
-//        return delegateTravelTimeCalculator.getTravelTimeMilliseconds(edge, durationSeconds, streetMode, req);
-        return 99.0f;
+    public double getSpeed(EdgeIteratorState edgeState, boolean reverse, int durationSeconds, String streetMode, GHRequest req) {
+        int fromTime = 0;
+        if (linkTravelTimes != null && streetMode.equals("car")) {
+            short[] speeds = linkTravelTimes.get(R5EdgeIds.getR5EdgeId(encoder, edgeState));
+            if (speeds != null) {
+                int currentTimeSeconds = fromTime + durationSeconds;
+                int timebinIndex = (currentTimeSeconds / (60 * 15)) % (24 * 4);
+                double speedms = speeds[timebinIndex] / 3.6;
+                return speedms;
+            }
+        }
+        return delegateTravelTimeCalculator.getSpeed(edgeState, reverse, durationSeconds, streetMode, req);
     }
 
     private static Map<Integer, short[]> readTravelTimes(File file) {
diff --git a/web/src/main/java/com/graphhopper/swl/TravelTimeCalculator.java b/web/src/main/java/com/graphhopper/swl/SpeedCalculator.java
similarity index 81%
rename from web/src/main/java/com/graphhopper/swl/TravelTimeCalculator.java
rename to web/src/main/java/com/graphhopper/swl/SpeedCalculator.java
index ce6e940dc2..0aa41002e5 100644
--- a/web/src/main/java/com/graphhopper/swl/TravelTimeCalculator.java
+++ b/web/src/main/java/com/graphhopper/swl/SpeedCalculator.java
@@ -19,10 +19,11 @@
 package com.graphhopper.swl;
 
 import com.graphhopper.GHRequest;
+import com.graphhopper.util.EdgeIteratorState;
 
 import java.util.concurrent.locks.Lock;
 
-public interface TravelTimeCalculator {
-    float getTravelTimeMilliseconds(int edge, int durationSeconds, String streetMode, GHRequest req);
+public interface SpeedCalculator {
+    double getSpeed(EdgeIteratorState edgeState, boolean reverse, int durationSeconds, String streetMode, GHRequest req);
 
 }
diff --git a/web/src/main/java/com/graphhopper/swl/TDWeighting.java b/web/src/main/java/com/graphhopper/swl/TDWeighting.java
index ae04e31695..42430c1a62 100644
--- a/web/src/main/java/com/graphhopper/swl/TDWeighting.java
+++ b/web/src/main/java/com/graphhopper/swl/TDWeighting.java
@@ -21,7 +21,6 @@
 import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.routing.util.HintsMap;
 import com.graphhopper.routing.weighting.TDWeightingI;
-import com.graphhopper.routing.weighting.Weighting;
 import com.graphhopper.util.EdgeIteratorState;
 import com.graphhopper.util.PMap;
 import com.graphhopper.util.Parameters;
@@ -32,14 +31,14 @@
 
     private final double maxSpeed;
     private final FlagEncoder encoder;
-    private final TravelTimeCalculator travelTimeCalculator;
+    private final SpeedCalculator speedCalculator;
     private final long headingPenaltyMillis;
     private final double headingPenalty;
 
-    public TDWeighting(FlagEncoder encoder, TravelTimeCalculator travelTimeCalculator, PMap map) {
+    public TDWeighting(FlagEncoder encoder, SpeedCalculator speedCalculator, PMap map) {
         this.encoder = encoder;
         this.maxSpeed = encoder.getMaxSpeed() / SPEED_CONV;
-        this.travelTimeCalculator = travelTimeCalculator;
+        this.speedCalculator = speedCalculator;
 
         headingPenalty = map.getDouble(Parameters.Routing.HEADING_PENALTY, Parameters.Routing.DEFAULT_HEADING_PENALTY);
         headingPenaltyMillis = Math.round(headingPenalty * 1000);
@@ -73,22 +72,17 @@ public long calcMillis(EdgeIteratorState edge, boolean reverse, int prevOrNextEd
 
     @Override
     public long calcTDMillis(EdgeIteratorState edge, boolean reverse, int prevOrNextEdgeId, long duration) {
-//        long flags = edge.getFlags();
-//        if (reverse && !encoder.isBackward(flags) || !reverse && !encoder.isForward(flags))
-//            throw new IllegalStateException("Calculating time should not require to read speed from edge in wrong direction. "
-//                    + "Reverse:" + reverse + ", fwd:" + encoder.isForward(flags) + ", bwd:" + encoder.isBackward(flags));
-//
-//        double speed = reverse ? encoder.getReverseSpeed(flags) : encoder.getSpeed(flags);
-//        if (Double.isInfinite(speed) || Double.isNaN(speed) || speed < 0)
-//            throw new IllegalStateException("Invalid speed stored in edge! " + speed);
-//        if (speed == 0)
-//            throw new IllegalStateException("Speed cannot be 0 for unblocked edge, use access properties to mark edge blocked! " +
-//                    "Should only occur for shortest path calculation. See #242.");
-//        long time = (long) (edge.getDistance() * 3600 / speed);
-//        boolean unfavoredEdge = edge.getBool(EdgeIteratorState.K_UNFAVORED_EDGE, false);
-//        if (unfavoredEdge)
-//            time += headingPenaltyMillis;
-        return (long) travelTimeCalculator.getTravelTimeMilliseconds(R5EdgeIds.getR5EdgeId((OriginalDirectionFlagEncoder) encoder, edge), (int) duration, "car", null);
+        double speed = speedCalculator.getSpeed(edge, reverse, (int) duration, "car", null);
+        if (Double.isInfinite(speed) || Double.isNaN(speed) || speed < 0)
+            throw new IllegalStateException("Invalid speed stored in edge! " + speed);
+        if (speed == 0)
+            throw new IllegalStateException("Speed cannot be 0 for unblocked edge, use access properties to mark edge blocked! " +
+                    "Should only occur for shortest path calculation. See #242.");
+        long time = (long) (edge.getDistance() * 3600 / speed);
+        boolean unfavoredEdge = edge.getBool(EdgeIteratorState.K_UNFAVORED_EDGE, false);
+        if (unfavoredEdge)
+            time += headingPenaltyMillis;
+        return time;
     }
 
     @Override
diff --git a/web/src/test/java/com/graphhopper/swl/TDNetworkIT.java b/web/src/test/java/com/graphhopper/swl/TDNetworkIT.java
index 954049b80e..761dd13b72 100644
--- a/web/src/test/java/com/graphhopper/swl/TDNetworkIT.java
+++ b/web/src/test/java/com/graphhopper/swl/TDNetworkIT.java
@@ -24,14 +24,12 @@
 import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.routing.util.HintsMap;
-import com.graphhopper.routing.weighting.FastestWeighting;
 import com.graphhopper.routing.weighting.Weighting;
 import com.graphhopper.storage.Graph;
 import com.graphhopper.util.details.PathDetail;
 import org.junit.Before;
 import org.junit.Test;
 
-import java.io.File;
 import java.util.Arrays;
 import java.util.List;
 
@@ -49,18 +47,7 @@ public void setUp() {
             @Override
             public Weighting createWeighting(HintsMap hintsMap, FlagEncoder encoder, Graph graph) {
                 if (hintsMap.getWeighting().equals("td")) {
-                    return new TDWeighting(encoder, new TravelTimeCalculator() {
-                        FastestWeighting defaultWeighting = new FastestWeighting(encoder);
-
-                        @Override
-                        public float getTravelTimeMilliseconds(int edge, int durationSeconds, String streetMode, GHRequest req) {
-                            try {
-                                return defaultWeighting.calcMillis(graphHopper.getGraphHopperStorage().getEdgeIteratorState(edge / 2, Integer.MIN_VALUE), edge % 2 == 0, -1);
-                            } catch (IllegalStateException e) {
-                                return defaultWeighting.calcMillis(graphHopper.getGraphHopperStorage().getEdgeIteratorState(edge / 2, Integer.MIN_VALUE), edge % 2 == 1, -1);
-                            }
-                        }
-                    }, hintsMap);
+                    return new TDWeighting(encoder, new DefaultSpeedCalculator(encoder), hintsMap);
                 } else {
                     return super.createWeighting(hintsMap, encoder, graph);
                 }
@@ -125,6 +112,10 @@ public void testMonacoTD() {
         for (int i=0; i<EXPECTED_LINKS_IN_PATH; i++) {
             System.out.printf("%d\t%d\t\n", edgeIds.get(i).getValue(), time.get(i).getValue());
         }
+        assertEquals(EXPECTED_TOTAL_TRAVEL_TIME, route.getBest().getTime());
+        assertEquals(EXPECTED_TOTAL_TRAVEL_TIME, sumTimes(time));
+
+
     }
 
     private long sumTimes(List<PathDetail> time) {
@@ -135,15 +126,5 @@ private long sumTimes(List<PathDetail> time) {
         return sum;
     }
 
-    private static TravelTimeCalculator getTravelTimeCalculator(File dir) {
-        if (dir.exists()) {
-            // TODO(sindelar): Fix logging and don't use println.
-            System.out.println("Using local congestion file");
-            return new FileTravelTimeCalculator(dir.getPath());
-        } else {
-            return null;
-        }
-    }
-
 
 }
