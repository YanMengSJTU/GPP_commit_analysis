diff --git a/core/src/main/java/com/graphhopper/mobilius/InstructionService.java b/core/src/main/java/com/graphhopper/mobilius/InstructionService.java
new file mode 100644
index 0000000000..aef8225352
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/mobilius/InstructionService.java
@@ -0,0 +1,117 @@
+package com.graphhopper.mobilius;
+
+import com.graphhopper.util.Instruction;
+import com.graphhopper.util.InstructionList;
+
+import java.io.BufferedReader;
+import java.io.IOException;
+import java.io.InputStreamReader;
+import java.io.UnsupportedEncodingException;
+import java.net.HttpURLConnection;
+import java.net.URL;
+import java.net.URLEncoder;
+import java.util.ArrayList;
+
+/**
+ * @author mishadoff
+ */
+public class InstructionService {
+
+    private static final String CONTINUE = "continue";
+    private static final String LEFT = "left";
+    private static final String SLIGHT_LEFT = "slight_left";
+    private static final String SHARP_LEFT = "sharp_left";
+    private static final String RIGHT = "right";
+    private static final String SLIGHT_RIGHT = "slight_right";
+    private static final String SHARP_RIGHT = "sharp_right";
+    private static final String OTHER = "other";
+
+    private static final String URL = "http://192.168.10.83:10000/navi/anything";
+    private static final String URL2 = "http://localhost:3000/mobilius";
+
+    public static String getInstructions(Instruction i, double distance) {
+        String name;
+        String dir;
+        if (i == null) {
+            name = "stop";
+            dir = "other";
+        } else {
+            name = i.getName();
+            dir = getDir(i.getSign());
+        }
+        return "dir=" + dir + "&name=" + encode(name) + "&distance=" + distance;
+    }
+
+    private static String encode(String s) {
+        try {
+            return URLEncoder.encode(s, "UTF-8");
+        } catch (UnsupportedEncodingException e) {
+            throw new IllegalArgumentException("Unsupported encoding");
+        }
+    }
+
+    private static String getDir(int sign) {
+        switch (sign) {
+            case Instruction.TURN_LEFT: return LEFT;
+            case Instruction.TURN_SLIGHT_LEFT: return SLIGHT_LEFT;
+            case Instruction.TURN_SHARP_LEFT: return SHARP_LEFT;
+            case Instruction.TURN_RIGHT: return RIGHT;
+            case Instruction.TURN_SLIGHT_RIGHT: return SLIGHT_RIGHT;
+            case Instruction.TURN_SHARP_RIGHT: return SHARP_RIGHT;
+            default: return OTHER;
+        }
+    }
+
+    public static void sendInstruction(InstructionList insList) {
+        // select first non-other list
+        Instruction ret = null;
+        double distanceSum = 0;
+        if (!insList.isEmpty()) {
+            for (Instruction i : insList) {
+                if (OTHER.equals(getDir(i.getSign()))) {
+                    distanceSum += i.getDistance();
+                    continue;
+                } else {
+                    ret = i;
+                    break;
+                }
+            }
+        }
+
+        //
+        String query = "?" + getInstructions(ret, distanceSum);
+
+        try {
+            get(URL + query);
+        } catch (IOException e) {
+            // NOOOOO!
+        }
+
+        try {
+            get(URL2 + query);
+        } catch (IOException e) {
+            // NOOOOO!
+        }
+    }
+
+    private static void get(String query) throws IOException {
+        HttpURLConnection connection;
+        BufferedReader rd = null;
+        ArrayList<String> strings = new ArrayList<String>();
+        try {
+            URL url = new URL(query);
+            connection = (HttpURLConnection) url.openConnection();
+            connection.setRequestMethod("GET");
+            rd = new BufferedReader(new InputStreamReader(connection.getInputStream()));
+            String line = "";
+            while ((line = rd.readLine()) != null) {
+                strings.add(line);
+            }
+        } finally {
+            if (rd != null) {
+                rd.close();
+            }
+        }
+    }
+
+}
diff --git a/core/src/main/java/com/graphhopper/routing/Path.java b/core/src/main/java/com/graphhopper/routing/Path.java
index 829c4696a2..62799876bc 100644
--- a/core/src/main/java/com/graphhopper/routing/Path.java
+++ b/core/src/main/java/com/graphhopper/routing/Path.java
@@ -17,6 +17,7 @@
  */
 package com.graphhopper.routing;
 
+import com.graphhopper.mobilius.InstructionService;
 import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.storage.EdgeEntry;
 import com.graphhopper.storage.Graph;
@@ -490,6 +491,10 @@ private void updatePointsAndInstruction( EdgeIteratorState edge, PointList pl )
             }
         });
 
+        /* DOGE */
+        //InstructionService.sendInstruction(cachedWays.get(0));
+
+
         return cachedWays;
     }
 
diff --git a/graphhopper.sh b/graphhopper.sh
index d7a93727cf..effdc72ae1 100755
--- a/graphhopper.sh
+++ b/graphhopper.sh
@@ -189,7 +189,7 @@ else
 fi
 
 if [ "x$JAVA_OPTS" = "x" ]; then
-  JAVA_OPTS="-XX:PermSize=60m -XX:MaxPermSize=60m -Xmx1000m -Xms1000m -server"
+  JAVA_OPTS="-XX:PermSize=60m -XX:MaxPermSize=60m -Xmx1000m -Xms1000m -server -agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=5005"
 fi
 
 
diff --git a/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java b/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
index 66f23af58d..03553c12b2 100644
--- a/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
+++ b/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
@@ -20,6 +20,7 @@
 import com.graphhopper.GHRequest;
 import com.graphhopper.GraphHopper;
 import com.graphhopper.GHResponse;
+import com.graphhopper.mobilius.InstructionService;
 import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.util.*;
 import com.graphhopper.util.Helper;
@@ -113,6 +114,9 @@ void writePath( HttpServletRequest req, HttpServletResponse res ) throws Excepti
         else
             logger.info(logStr);
 
+        /* DOGE */
+        InstructionService.sendInstruction(rsp.getInstructions());
+
         if (writeGPX)
             writeGPX(req, res, rsp);
         else
diff --git a/web/src/main/webapp/js/main.js b/web/src/main/webapp/js/main.js
index d2714fe3ff..1762995c09 100644
--- a/web/src/main/webapp/js/main.js
+++ b/web/src/main/webapp/js/main.js
@@ -31,7 +31,7 @@ var routeSegmentPopup = null;
 var elevationControl = null;
 
 var iconFrom = L.icon({
-    iconUrl: './img/marker-icon-green.png',
+    iconUrl: './img/car.png',
     shadowSize: [50, 64],
     shadowAnchor: [4, 62],
     iconAnchor: [12, 40]
@@ -806,7 +806,7 @@ function createTimeString(time) {
 function addInstruction(main, instr, instrIndex, lngLat) {
     var sign = instr.sign;
     if (instrIndex === 0)
-        sign = "marker-icon-green";
+        sign = "car";
     else if (sign === -3)
         sign = "sharp_left";
     else if (sign === -2)
