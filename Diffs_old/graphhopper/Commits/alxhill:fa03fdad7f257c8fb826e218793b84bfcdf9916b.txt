diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/util/CellIterator.java b/marmoset/src/main/java/com/graphhopper/marmoset/util/CellIterator.java
index 3d4c338ae2..59b4fcfcd5 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/util/CellIterator.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/util/CellIterator.java
@@ -37,6 +37,7 @@ public boolean next()
                 cellIndex = cg.getCellCount(route) - 1;
             }
         }
+
         return cg.get(route, cellIndex);
     }
 
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/util/ExpectedWeighting.java b/marmoset/src/main/java/com/graphhopper/marmoset/util/ExpectedWeighting.java
index abbe2b4d3f..f7a917fc9a 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/util/ExpectedWeighting.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/util/ExpectedWeighting.java
@@ -15,7 +15,7 @@
  */
 public class ExpectedWeighting extends FastestWeighting {
 
-    protected double[] expectedRoutes;
+    protected final double[] expectedRoutes;
 
     private static final Logger logger = LoggerFactory.getLogger(ExpectedWeighting.class);
 
@@ -37,12 +37,20 @@ public double calcWeight(EdgeIteratorState edge, boolean reverse, int prevOrNext
 
     public void updateExpectedMap(double dampingFactor, List<SelfDrivingVehicle> vehicles)
     {
-        for (int i = 0; i < expectedRoutes.length; i++)
+        synchronized (expectedRoutes)
         {
-            expectedRoutes[i] *= dampingFactor;
+            for (int i = 0; i < expectedRoutes.length; i++)
+            {
+                expectedRoutes[i] *= dampingFactor;
+            }
+
+            vehicles.stream().map(SelfDrivingVehicle::getCurrentPath)
+                .forEach(edges -> edges.forEach(edge -> {
+                    if (edge.getEdge() < expectedRoutes.length)
+                    {
+                        expectedRoutes[edge.getEdge()]++;
+                    }
+                }));
         }
-
-        vehicles.stream().map(SelfDrivingVehicle::getCurrentPath)
-                .forEach(edges -> edges.forEach(edge -> expectedRoutes[edge.getEdge()]++));
     }
 }
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/BaseVehicle.java b/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/BaseVehicle.java
index ea4f060e44..0295221a81 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/BaseVehicle.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/BaseVehicle.java
@@ -97,7 +97,7 @@ protected void finish()
     @Override
     public void init()
     {
-        cellId = 0; // TODO: figure out which cell the vehicle should start at
+        cellId = 0;
         v = 0;
 
         cg = hopper.getCellGraph();
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/MultiSDVController.java b/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/MultiSDVController.java
index 9b2e0b33f2..7bc65a6159 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/MultiSDVController.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/MultiSDVController.java
@@ -8,6 +8,7 @@
 import java.util.ArrayList;
 import java.util.List;
 import java.util.Random;
+import java.util.stream.Collectors;
 
 /**
  * Created by alexander on 22/04/2016.
@@ -17,7 +18,7 @@
     private static final Logger logger = LoggerFactory.getLogger(MultiSDVController.class);
 
     public static final double DAMPING_FACTOR = 0.6;
-    public static final double REROUTE_PROBABILITY = 0.01;
+    public static final double REROUTE_PROBABILITY = 0.001;
     public static final int EXPMAP_UPDATE_FREQUENCY = 100;
 
     protected List<SelfDrivingVehicle> vehicles;
@@ -29,20 +30,22 @@ public MultiSDVController(ExpectedWeighting expectedWeighting)
     {
         this.expectedWeighting = expectedWeighting;
         vehicles = new ArrayList<>();
-        EventManager.listenTo("vehicles:add", (s, vehicle) -> vehicles.add((SelfDrivingVehicle) vehicle[0]));
-        EventManager.listenTo("timestep:end", (s,args) -> timestepHandler((Integer) args[0]));
+        EventManager.listenTo("vehicle:added", (s, vehicle) -> vehicles.add((SelfDrivingVehicle) vehicle[0]));
+        EventManager.listenTo("timestep:end", (s, args) -> timestepHandler((Integer) args[0]));
     }
 
     public void timestepHandler(int iteration)
     {
         vehicles.forEach(v -> {
-            if (rerouteRand.nextDouble() < REROUTE_PROBABILITY)
+            if (rerouteRand.nextDouble() <= REROUTE_PROBABILITY)
             {
-                logger.info("rerouting vehicle " + v.id);
+                logger.info("Rerouting vehicle " + v.id);
                 v.recalculateRoute();
             }
         });
 
+        vehicles = vehicles.stream().filter(v -> !v.isFinished()).collect(Collectors.toList());
+
         if (iteration % EXPMAP_UPDATE_FREQUENCY == 0)
         {
             logger.info("Updating expected map");
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/SelfDrivingVehicle.java b/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/SelfDrivingVehicle.java
index 64cd661955..ab12f139c2 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/SelfDrivingVehicle.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/SelfDrivingVehicle.java
@@ -48,10 +48,10 @@ public void recalculateRoute()
             return;
 
         edgeList = edges;
+        cellId = 0; // TODO: figure out where we should be if still on the same edge
 
         SelfDrivingVehicleIterator sdvRoute = (SelfDrivingVehicleIterator) route;
         sdvRoute.resetEdges(edgeList);
-
     }
 
     protected List<EdgeIteratorState> calculateRoute()
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/SelfDrivingVehicleIterator.java b/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/SelfDrivingVehicleIterator.java
index f8c4d5cb31..8769d2acf0 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/SelfDrivingVehicleIterator.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/SelfDrivingVehicleIterator.java
@@ -9,6 +9,7 @@
  * Created by alexander on 20/04/2016.
  */
 public class SelfDrivingVehicleIterator extends DijkstraVehicleIterator {
+
     public SelfDrivingVehicleIterator(List<EdgeIteratorState> edges, FlagEncoder encoder)
     {
         super(edges, encoder);
@@ -16,7 +17,8 @@ public SelfDrivingVehicleIterator(List<EdgeIteratorState> edges, FlagEncoder enc
 
     public void resetEdges(List<EdgeIteratorState> edgeList)
     {
+        index = 0;
         this.edges = edgeList;
+        edges.remove(edges.size() - 1);
     }
-
 }
diff --git a/marmoset/src/main/resources/log4j.xml b/marmoset/src/main/resources/log4j.xml
index d7f0862713..fb5ef98d48 100644
--- a/marmoset/src/main/resources/log4j.xml
+++ b/marmoset/src/main/resources/log4j.xml
@@ -3,7 +3,7 @@
 <log4j:configuration>
     <appender name="stdout" class="org.apache.log4j.ConsoleAppender">
         <layout class="org.apache.log4j.PatternLayout">
-            <param name="ConversionPattern" value="[%t] %-5p %c{1} - %m%n"/>
+            <param name="ConversionPattern" value="[%-5p] %c{1} - %m%n"/>
         </layout>
     </appender>
     <appender name="ASYNC" class="org.apache.log4j.AsyncAppender">
