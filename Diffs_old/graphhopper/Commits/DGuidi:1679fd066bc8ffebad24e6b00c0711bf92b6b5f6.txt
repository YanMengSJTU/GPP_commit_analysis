diff --git a/config.properties b/config.properties
index 1d8a1db5d2..6b916ab2f3 100644
--- a/config.properties
+++ b/config.properties
@@ -7,12 +7,12 @@ graph.dataaccess=RAM_STORE
 # The high-resolution index is bigger and slightly slower but a lot more precise. see #17.
 # Resolution is in meter, decrease from 1000 to 500 in order to speed up queries (but will increase size)
 #index.highResolution=-1
-index.highResolution=500
+index.highResolution=1000
 
 
 # use contraction hierarchies to speed things up. requires more RAM/disc space for holding the graph
 # uncomment this if you need more control of you algorithm. then use graphhopper.chShortcuts(false, false)
-prepare.chShortcuts=fastest
+prepare.chShortcuts=no
 
 # advanced options:
 # prepare.updates.periodic=3
@@ -25,7 +25,7 @@ osmreader.wayPointMaxDistance=1
 
 # possible options: CAR,FOOT,BIKE,MTB,RACINGBIKE (comma separated)
 # when using two or three option together remeber to set "prepare.chShortcuts=no" above
-osmreader.acceptWay=FOOT
+osmreader.acceptWay=CAR,FOOT
 
 # if you want to reduce storage size and you don't need instructions for a path uncomment this
 # osmreader.instructions=false
diff --git a/web/src/main/java/com/graphhopper/http/GHServer.java b/web/src/main/java/com/graphhopper/http/GHServer.java
index db1992ee94..015b79f44b 100644
--- a/web/src/main/java/com/graphhopper/http/GHServer.java
+++ b/web/src/main/java/com/graphhopper/http/GHServer.java
@@ -111,10 +111,10 @@ protected void configure()
             {
                 binder().requireExplicitBindings();
 
-                install(new DefaultModule(args){
+                install(new DefaultModule(args) {
+                  // EXPLICIT CODE CHANGE!
                   @Override
                   protected GraphHopper create() {
-                    // EXPLICIT CODE CHANGE!
                     return new MapaalGraphHopper();
                   }
                 });
diff --git a/web/src/main/java/com/graphhopper/http/GuiceServletConfig.java b/web/src/main/java/com/graphhopper/http/GuiceServletConfig.java
index af29f2604c..729c73b975 100644
--- a/web/src/main/java/com/graphhopper/http/GuiceServletConfig.java
+++ b/web/src/main/java/com/graphhopper/http/GuiceServletConfig.java
@@ -43,10 +43,10 @@ protected Injector getInjector()
 
     protected Module createDefaultModule()
     {
-        return new DefaultModule(new CmdArgs()){
+        return new DefaultModule(new CmdArgs()) {
+          // EXPLICIT CODE CHANGE!
           @Override
           protected GraphHopper create() {
-            // EXPLICIT CODE CHANGE!
             return new MapaalGraphHopper();
           }
         };
diff --git a/web/src/main/resources/log4j.properties b/web/src/main/resources/log4j.properties
new file mode 100644
index 0000000000..38a465e979
--- /dev/null
+++ b/web/src/main/resources/log4j.properties
@@ -0,0 +1,9 @@
+log4j.appender.StdoutApp=org.apache.log4j.ConsoleAppender
+log4j.appender.StdoutApp.layout=org.apache.log4j.PatternLayout
+log4j.appender.StdoutApp.layout.conversionPattern=%d %-5p - %m%n
+
+log4j.rootLogger=INFO
+
+log4j.logger.com.graphhopper=DEBUG, StdoutApp
+log4j.logger.it.esalab=DEBUG, StdoutApp
+log4j.logger.org.eclipse.jetty=WARN, StdoutApp
