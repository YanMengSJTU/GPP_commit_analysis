diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
index 77bc85cda9..d7e062fc2d 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperHooks.java
@@ -28,8 +28,10 @@
 
 	DataTable routePointsTable;
 
+	
 	@Before({ "~@WebOnly", "~@SampleScenario" })
 	public void init() {
+		
 
 		graphUiUtil = (IntegrationTestProperties
 				.getTestPropertyBool("viaApigee") == true) ? new GraphHopperUIUtil(
@@ -55,7 +57,7 @@ public void overrideTestONPropertyToBoth() {
 
 		testON = IntegrationTestProperties.getTestProperty("testON");
 		IntegrationTestProperties.setTestProperty("testON", "");
-		init();
+		//init();
 
 	}
 
diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
index 43cd3daec5..eeda1a0345 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
@@ -1029,10 +1029,7 @@ public void verifyErrorMessage(String responseMessage) {
 
 		switch (testOn) {
 		case "Web":
-
-			navigateTo(sb.toString().replaceAll("/route?", "/"));
-			waitFor(error_Message);
-			verifyUIErrorMessage(responseMessage);
+			navigateTo(sb.toString());
 
 			break;
 		case "Service":
@@ -1045,9 +1042,8 @@ public void verifyErrorMessage(String responseMessage) {
 			break;
 
 		default:
-			navigateTo(sb.toString().replaceAll("/route?", "/"));
-			waitFor(error_Message);
-			verifyUIErrorMessage(responseMessage);
+
+			navigateTo(sb.toString());
 
 			if (requestParameters.get("type").get(0).equalsIgnoreCase("gpx")) {
 				GPHServiceUtil.verifyMessage(responseMessage);
diff --git a/acceptancetesting/src/test/cucumber/Routing-Errors.feature b/acceptancetesting/src/test/cucumber/Routing-Errors.feature
index 099961ec8e..908554559f 100644
--- a/acceptancetesting/src/test/cucumber/Routing-Errors.feature
+++ b/acceptancetesting/src/test/cucumber/Routing-Errors.feature
@@ -10,12 +10,11 @@ Feature: Verify Error Messages from a routing service
       | pointA              | pointB              |
       | 50.729961,-3.524853 | 50.723364,-3.523895 |
     And I have vehicle as "car"
-    And I have avoidances as ""
     And I have weighting as "fastest"
-    And I have locale as "en_US"
+    And I have locale as "en_GB"
     And I have debug as "true"
     And I have points_encoded as "true"
-    And I have points_calc as "true"
+    And I have calc_points as "true"
     And I have instructions as "true"
     And I have algorithm as "astar"
     And I have type as "json"
@@ -24,7 +23,7 @@ Feature: Verify Error Messages from a routing service
     Then I should be able to verify the http statuscode as "200"
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco          | waypointdesc                | azimuth | direction | time | distance | avoidance |
-      | 2             | 50.729205,-3.523206 | Turn right onto WELL STREET | 210.0   | SW        | 4050 | 112.5    |           |
+      | 2             | 50.729205,-3.523206 | Turn right onto WELL STREET | 210.0   | SW        | 9001 | 112.5    |           |
 
   # Parameter :  point
   @ErrorMessages
@@ -41,8 +40,8 @@ Feature: Verify Error Messages from a routing service
     Then I should be able to verify the statuscode as "<statusCode>"
 
     Examples: 
-      | vehicleType | avoidances | routeType | responseFormat | errorMessage                                     | statusCode |
-      | car         |            | fastest   | json           | At least 2 points has to be specified, but was:1 | 400        |
+      | vehicleType | avoidances | routeType | responseFormat | errorMessage                   | statusCode |
+      | car         |            | fastest   | json           | No vehicle parameter provided. | 400        |
 
   @ErrorMessages
   Scenario Outline: Incorrect Parameter Value "point"
@@ -78,7 +77,7 @@ Feature: Verify Error Messages from a routing service
       | vehicleType | avoidances | routeType | responseFormat | errorMessage                          | statusCode |
       | car         |            | fastest   | json           | Cannot find point 0: 292530.0,92635.0 | 400        |
 
-  # Parameter :  point
+  # Parameter :  Invalid Parameter Name
   @ErrorMessages
   Scenario Outline: Incorrect Parameter Name "points"
     Given I have route points as
@@ -93,8 +92,8 @@ Feature: Verify Error Messages from a routing service
     Then I should be able to verify the statuscode as "<statusCode>"
 
     Examples: 
-      | vehicleType | avoidances | routeType | responseFormat | errorMessage                | statusCode |
-      | car         |            | fastest   | json           | No point parameter provided | 400        |
+      | vehicleType | avoidances | routeType | responseFormat | errorMessage                                                                                                                                                                                                                        | statusCode |
+      | car         |            | fastest   | json           | Parameter points is not a valid parameter for resource route. Valid parameters for requested resource are point, vehicle, locale, instructions, weighting, algorithm, points_encoded, debug, pretty, calc_points, type, avoidances. | 400        |
 
   # Parameter :  point
   @ErrorMessages
@@ -129,24 +128,6 @@ Feature: Verify Error Messages from a routing service
       | vehicleType | avoidances | routeType | responseFormat | errorMessage                                                                                                     | statusCode |
       | car         | trees      | fastest   | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
 
-  # Parameter :  avoidances
-  @ErrorMessages
-  Scenario Outline: Invalid Parameter Name for "avoidances"
-    Given I have route point as
-      | pointA              | pointB              |
-      | 50.729961,-3.524853 | 50.723364,-3.523895 |
-    And I have vehicle as "<vehicleType>"
-    And I have avoidance as "<avoidances>"
-    And I have weighting as "<routeType>"
-    And I have type as "<responseFormat>"
-    When I request for a route
-    Then I should be able to verify the response message as "<errorMessage>"
-    Then I should be able to verify the statuscode as "<statusCode>"
-
-    Examples: 
-      | vehicleType | avoidances | routeType | responseFormat | errorMessage                                                                                                     | statusCode |
-      | car         | cliff      | fastest   | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
-
   # Parameter :  weighting
   @ErrorMessages
   Scenario Outline: Invalid Parameter Value for "weighting"
@@ -165,24 +146,6 @@ Feature: Verify Error Messages from a routing service
       | vehicleType | avoidances | routeType | responseFormat | errorMessage                                                                                 | statusCode |
       | car         |            | quick     | json           | Weighting faster not supported. Valid weightings are shorted, fastest, fastavoid, shortavoid | 400        |
 
-  # Parameter :  weighting
-  @ErrorMessages
-  Scenario Outline: Invalid Parameter Name for "weighting"
-    Given I have route point as
-      | pointA              | pointB              |
-      | 50.729961,-3.524853 | 50.723364,-3.523895 |
-    And I have vehicle as "<vehicleType>"
-    And I have avoidance as "<avoidances>"
-    And I have weightings as "<routeType>"
-    And I have type as "<responseFormat>"
-    When I request for a route
-    Then I should be able to verify the response message as "<errorMessage>"
-    Then I should be able to verify the statuscode as "<statusCode>"
-
-    Examples: 
-      | vehicleType | avoidances | routeType | responseFormat | errorMessage                                                                                                     | statusCode |
-      | car         |            | fastest   | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
-
   # Parameter :  locale
   @ErrorMessages
   Scenario Outline: Invalid Parameter Value for "locale"      | t  |
@@ -202,25 +165,6 @@ Feature: Verify Error Messages from a routing service
       | vehicleType | avoidances | routeType | locale | responseFormat | errorMessage                                                                                                                                                                                                        | statusCode |
       | car         |            | fastest   | en     | json           | en is not a valid value for parameter locale. Valid values are bg, ca, cz, de_DE, el, en_US, es, fa, fil, fi, fr, gl, he, hu_HU, it, ja, ne, nl, pl_PL, pt_BR, pt_PT, ro, ru, si, sk, sv_SE, tr, uk, vi_VI or zh_CN | 400        |
 
-  # Parameter :  locale
-  @ErrorMessages
-  Scenario Outline: Invalid Parameter Name for "locale"
-    Given I have route point as
-      | pointA              | pointB              |
-      | 50.729961,-3.524853 | 50.723364,-3.523895 |
-    And I have vehicle as "<vehicleType>"
-    And I have avoidance as "<avoidances>"
-    And I have locals as "<locale>"
-    And I have weightings as "<routeType>"
-    And I have type as "<responseFormat>"
-    When I request for a route
-    Then I should be able to verify the response message as "<errorMessage>"
-    Then I should be able to verify the statuscode as "<statusCode>"
-
-    Examples: 
-      | vehicleType | avoidances | routeType | locale | responseFormat | errorMessage                                                                                                     | statusCode |
-      | car         |            | fastest   | en-GB  | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
-
   # Parameter :  instructions
   @ErrorMessages
   Scenario Outline: Invalid Parameter Value for "instructions"
@@ -240,25 +184,6 @@ Feature: Verify Error Messages from a routing service
       | vehicleType | avoidances | routeType | instructions | responseFormat | errorMessage                                                                               | statusCode |
       | car         |            | fastest   | msg("box")   | json           | msg("box") is not a valid value for parameter instructions. Valid values are true or false | 400        |
 
-  # Parameter :  instructions
-  @ErrorMessages
-  Scenario Outline: Invalid Parameter Name for "instructions"
-    Given I have route point as
-      | pointA              | pointB              |
-      | 50.729961,-3.524853 | 50.723364,-3.523895 |
-    And I have vehicle as "<vehicleType>"
-    And I have avoidance as "<avoidances>"
-    And I have instruction as "<instructions>"
-    And I have weightings as "<routeType>"
-    And I have type as "<responseFormat>"
-    When I request for a route
-    Then I should be able to verify the response message as "<errorMessage>"
-    Then I should be able to verify the statuscode as "<statusCode>"
-
-    Examples: 
-      | vehicleType | avoidances | routeType | instructions | responseFormat | errorMessage                                                                                                     | statusCode |
-      | car         |            | fastest   | true         | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
-
   # Parameter :  algorithm
   @ErrorMessages
   Scenario Outline: Invalid Parameter Value for "algorithm"
@@ -302,26 +227,6 @@ Feature: Verify Error Messages from a routing service
       | car         |            | fastest   | astarbi    | json           |
       | car         |            | fastest   | dijkstrabi | json           |
 
-  #
-  # Parameter :  algorithm
-  @ErrorMessages
-  Scenario Outline: Invalid Parameter Name for "algorithm"
-    Given I have route point as
-      | pointA              | pointB              |
-      | 50.729961,-3.524853 | 50.723364,-3.523895 |
-    And I have vehicle as "<vehicleType>"
-    And I have avoidance as "<avoidances>"
-    And I have algorithms as "<algorithm>"
-    And I have weightings as "<routeType>"
-    And I have type as "<responseFormat>"
-    When I request for a route
-    Then I should be able to verify the response message as "<errorMessage>"
-    Then I should be able to verify the statuscode as "<statusCode>"
-
-    Examples: 
-      | vehicleType | avoidances | routeType | algorithm | responseFormat | errorMessage                                                                                                     | statusCode |
-      | car         |            | fastest   | dijkstra  | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
-
   # Parameter :  points_encoded
   @ErrorMessages
   Scenario Outline: Invalid Parameter Value for "points_encoded"
@@ -341,25 +246,6 @@ Feature: Verify Error Messages from a routing service
       | vehicleType | avoidances | routeType | points_encoded | responseFormat | errorMessage                                                                               | statusCode |
       | car         |            | fastest   | xyz            | json           | xyz is not a valid value for parameter pointsEncodedString. Valid values are true or false | 400        |
 
-  # Parameter :  points_encoded
-  @ErrorMessages
-  Scenario Outline: Invalid Parameter Name for "points_encoded"
-    Given I have route point as
-      | pointA              | pointB              |
-      | 50.729961,-3.524853 | 50.723364,-3.523895 |
-    And I have vehicle as "<vehicleType>"
-    And I have avoidance as "<avoidances>"
-    And I have points_encodedSSS as "<algorithm>"
-    And I have weightings as "<routeType>"
-    And I have type as "<responseFormat>"
-    When I request for a route
-    Then I should be able to verify the response message as "<errorMessage>"
-    Then I should be able to verify the statuscode as "<statusCode>"
-
-    Examples: 
-      | vehicleType | avoidances | routeType | points_encoded | responseFormat | errorMessage                                                                                                     | statusCode |
-      | car         |            | fastest   | true           | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
-
   # Parameter :  debug
   @ErrorMessages
   Scenario Outline: Invalid Parameter Value for "debug"
@@ -379,25 +265,6 @@ Feature: Verify Error Messages from a routing service
       | vehicleType | avoidances | routeType | debug | responseFormat | errorMessage                                                                 | statusCode |
       | car         |            | fastest   | xyz   | json           | xyz is not a valid value for parameter debug. Valid values are true or false | 400        |
 
-  # Parameter :  debug
-  @ErrorMessages
-  Scenario Outline: Invalid Parameter Name for "debug"
-    Given I have route point as
-      | pointA              | pointB              |
-      | 50.729961,-3.524853 | 50.723364,-3.523895 |
-    And I have vehicle as "<vehicleType>"
-    And I have avoidance as "<avoidances>"
-    And I have debug as "<debug>"
-    And I have weightings as "<routeType>"
-    And I have type as "<responseFormat>"
-    When I request for a route
-    Then I should be able to verify the response message as "<errorMessage>"
-    Then I should be able to verify the statuscode as "<statusCode>"
-
-    Examples: 
-      | vehicleType | avoidances | routeType | debug | responseFormat | errorMessage                                                                                                     | statusCode |
-      | car         |            | fastest   | true  | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
-
   # Parameter :  calc_points
   @ErrorMessages
   Scenario Outline: Invalid Parameter Value for "calc_points"
@@ -417,25 +284,6 @@ Feature: Verify Error Messages from a routing service
       | vehicleType | avoidances | routeType | calc_points | responseFormat | errorMessage                                                                       | statusCode |
       | car         |            | fastest   | xyz         | json           | xyz is not a valid value for parameter calc_points. Valid values are true or false | 400        |
 
-  # Parameter :  calc_points
-  @ErrorMessages
-  Scenario Outline: Invalid Parameter Name for "calc_points"
-    Given I have route point as
-      | pointA              | pointB              |
-      | 50.729961,-3.524853 | 50.723364,-3.523895 |
-    And I have vehicle as "<vehicleType>"
-    And I have avoidance as "<avoidances>"
-    And I have calc_point as "<calc_points>"
-    And I have weightings as "<routeType>"
-    And I have type as "<responseFormat>"
-    When I request for a route
-    Then I should be able to verify the response message as "<errorMessage>"
-    Then I should be able to verify the statuscode as "<statusCode>"
-
-    Examples: 
-      | vehicleType | avoidances | routeType | calc_points | responseFormat | errorMessage                                                                                                     | statusCode |
-      | car         |            | fastest   | true        | json           | Parameter blah is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
-
   # Parameter :  Type
   @ErrorMessages
   Scenario Outline: Invalid Parameter Value for "type"
@@ -455,25 +303,6 @@ Feature: Verify Error Messages from a routing service
       | vehicleType | avoidances | routeType | calc_points | responseFormat | errorMessage                                                               | statusCode |
       | car         |            | fastest   | true        | txt            | txt is not a valid value for parameter type. Valid values are GPX or JSON. | 400        |
 
-  # Parameter :  Type
-  @ErrorMessages
-  Scenario Outline: Invalid Parameter Name for "calc_points"
-    Given I have route point as
-      | pointA              | pointB              |
-      | 50.729961,-3.524853 | 50.723364,-3.523895 |
-    And I have vehicle as "<vehicleType>"
-    And I have avoidance as "<avoidances>"
-    And I have calc_pointSSS as "<calc_points>"
-    And I have weightings as "<routeType>"
-    And I have responseType as "<responseFormat>"
-    When I request for a route
-    Then I should be able to verify the response message as "<errorMessage>"
-    Then I should be able to verify the statuscode as "<statusCode>"
-
-    Examples: 
-      | vehicleType | avoidances | routeType | calc_points | responseFormat | errorMessage                                                                                                              | statusCode |
-      | car         |            | fastest   | true        | json           | Parameter calc_pointSSS is not a valid parameter for resource nearest. Valid parameters for requested resource are point. | 400        |
-
   # http method
   @ErrorMessages
   Scenario Outline: http methods "PUT/POST/DEL/GET"
@@ -518,7 +347,6 @@ Feature: Verify Error Messages from a routing service
       | pointA              | pointB              |
       | 50.729961,-3.524853 | 50.723364,-3.523895 |
     And I have vehicle as "car"
-    And I have avoidances as ""
     And I have weighting as "fastest"
     And I have locale as "<locale>"
     And I have debug as "true"
@@ -570,7 +398,6 @@ Feature: Verify Error Messages from a routing service
       | pointA              | pointB              |
       | 50.729961,-3.524853 | 50.723364,-3.523895 |
     And I have vehicle as "car"
-    And I have avoidances as ""
     And I have weighting as "fastest"
     And I have locale as "en_US"
     And I have debug as "true"
@@ -596,7 +423,6 @@ Feature: Verify Error Messages from a routing service
       | pointA              | pointB              |
       | 50.729961,-3.524853 | 50.723364,-3.523895 |
     And I have vehicle as "car"
-    And I have avoidances as ""
     And I have weighting as "fastest"
     And I have locale as "en_US"
     And I have debug as "<debug>"
@@ -620,12 +446,11 @@ Feature: Verify Error Messages from a routing service
       | pointA              | pointB              |
       | 50.729961,-3.524853 | 50.723364,-3.523895 |
     And I have vehicle as "car"
-    And I have avoidances as ""
     And I have weighting as "fastest"
     And I have locale as "en_US"
     And I have debug as "true"
     And I have points_encoded as "true"
-    And I have points_calc as "<points_calc>"
+    And I have calc_points as "<points_calc>"
     And I have instructions as "true"
     And I have algorithm as "astar"
     And I have type as "json"
@@ -644,7 +469,6 @@ Feature: Verify Error Messages from a routing service
       | pointA              | pointB              |
       | 50.729961,-3.524853 | 50.723364,-3.523895 |
     And I have vehicle as "car"
-    And I have avoidances as ""
     And I have weighting as "fastest"
     And I have locale as "en_US"
     And I have debug as "true"
@@ -668,7 +492,6 @@ Feature: Verify Error Messages from a routing service
       | pointA              | pointB              |
       | 50.729961,-3.524853 | 50.723364,-3.523895 |
     And I have vehicle as "car"
-    And I have avoidances as ""
     And I have weighting as "fastest"
     And I have locale as "en_US"
     And I have debug as "true"
@@ -692,7 +515,6 @@ Feature: Verify Error Messages from a routing service
       | pointA              | pointB              |
       | 50.729961,-3.524853 | 50.723364,-3.523895 |
     And I have vehicle as "car"
-    And I have avoidances as ""
     And I have weighting as "fastest"
     And I have locale as "en_US"
     And I have debug as "true"
diff --git a/acceptancetesting/src/test/cucumber/Routing-Exeter-Smoke.feature b/acceptancetesting/src/test/cucumber/Routing-Exeter-Smoke.feature
index 116704b635..db2d34a895 100644
--- a/acceptancetesting/src/test/cucumber/Routing-Exeter-Smoke.feature
+++ b/acceptancetesting/src/test/cucumber/Routing-Exeter-Smoke.feature
@@ -6,17 +6,17 @@ Feature: Smoke Tests: Verify a route from A to B
   #Error Messages
   #Successful request
   @ErrorMessages @Smoke
+
   Scenario: Successful request with all parameters
     Given I have route point as
       | pointA              | pointB              |
       | 50.729961,-3.524853 | 50.723364,-3.523895 |
     And I have vehicle as "car"
-    And I have avoidances as ""
     And I have weighting as "fastest"
-    And I have locale as "en_US"
+    And I have locale as "en_GB"
     And I have debug as "true"
     And I have points_encoded as "true"
-    And I have points_calc as "true"
+    And I have calc_points as "true"
     And I have instructions as "true"
     And I have algorithm as "astar"
     And I have type as "json"
@@ -25,7 +25,7 @@ Feature: Smoke Tests: Verify a route from A to B
     Then I should be able to verify the http statuscode as "200"
     Then I should be able to verify the waypoints on the route map:
       | wayPointIndex | waypointco          | waypointdesc                | azimuth | direction | time | distance | avoidance |
-      | 2             | 50.729205,-3.523206 | Turn right onto WELL STREET | 210.0   | SW        | 4050 | 112.5    |           |
+      | 2             | 50.729205,-3.523206 | Turn right onto WELL STREET | 210.0   | SW        | 9001 | 112.5    |           |
 
   # Parameter :  vehicle
   @ErrorMessages @Smoke
diff --git a/acceptancetesting/src/test/cucumber/Routing-PeakDistrict-Smoke.feature b/acceptancetesting/src/test/cucumber/Routing-PeakDistrict-Smoke.feature
index 86000b6846..1f1a913275 100644
--- a/acceptancetesting/src/test/cucumber/Routing-PeakDistrict-Smoke.feature
+++ b/acceptancetesting/src/test/cucumber/Routing-PeakDistrict-Smoke.feature
@@ -1,4 +1,4 @@
-Feature: Smoke Tests- Peak District: Verify a route from A to B
+Feature: Smoke Tests- Peak District: Verify Error Messsage for a route from A to B
    As a user
    I want to get a route from location A to location B using the routing service
    And route should be the fastest route and contain the waypoints,restrictions,time and other instructions
@@ -8,15 +8,14 @@ Feature: Smoke Tests- Peak District: Verify a route from A to B
   @ErrorMessages @Smoke
   Scenario: Successful request with all parameters
     Given I have route point as
-      | pointA              | pointB              |
-      | 53.298525,-1.679533 | 53.203145,-1.799292 |
+      | pointA              | pointB             |
+      | 53.176062,-1.871472 | 53.154773,-1.77272 |
     And I have vehicle as "foot"
-    And I have avoidances as ""
     And I have weighting as "fastest"
-    And I have locale as "en_US"
+    And I have locale as "en_GB"
     And I have debug as "true"
     And I have points_encoded as "true"
-    And I have points_calc as "true"
+    And I have calc_points as "true"
     And I have instructions as "true"
     And I have algorithm as "astar"
     And I have type as "json"
@@ -24,8 +23,8 @@ Feature: Smoke Tests- Peak District: Verify a route from A to B
     Then I should be able to verify the http response message as "OK"
     Then I should be able to verify the http statuscode as "200"
     Then I should be able to verify the waypoints on the route map:
-      | wayPointIndex | waypointco          | waypointdesc                | azimuth | direction | time | distance | avoidance |
-      | 2             | 50.729205,-3.523206 | Turn right onto WELL STREET | 210.0   | SW        | 4050 | 112.5    |           |
+      | wayPointIndex | waypointco          | waypointdesc        | azimuth | direction | time   | distance | avoidance |
+      | 4             | 53.173017,-1.868287 | continue onto Route | 117.0   | SE        | 132624 | 184.2    |           |
 
   # Parameter :  vehicle
   @ErrorMessages @Smoke
diff --git a/acceptancetesting/src/test/resources/test-ci-exeter-dte.properties b/acceptancetesting/src/test/resources/test-ci-exeter-dte.properties
index 18b727c524..ca9c61d13c 100644
--- a/acceptancetesting/src/test/resources/test-ci-exeter-dte.properties
+++ b/acceptancetesting/src/test/resources/test-ci-exeter-dte.properties
@@ -1,6 +1,6 @@
 # Revised Exeter data set
 graphHopperWebUrlViaApigee=
-graphHopperWebUrl=http://dte-vehicle-routing.elasticbeanstalk.com/
+graphHopperWebUrl=https://dte-vehicle-routing.elasticbeanstalk.com/
 
 webDriverHubUrl=http://ND28350.ordsvy.gov.uk:5555/wd/hub
 
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/RoadClassification.java b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/RoadClassification.java
index 4358d2a345..b714f0062c 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/RoadClassification.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/RoadClassification.java
@@ -47,7 +47,6 @@ public void applyWayAttribute(RoutingElement way )
     public static RoadClassification lookup(String dataName) {
     	try {
     		RoadClassification valueOf = RoadClassification.valueOf(dataName.replace(" ", "").replace("–", "").toUpperCase());
-    		System.err.println("Search:" + dataName + " Found:" + valueOf.toString());
     		return valueOf;
     	}
     	catch (IllegalArgumentException | NullPointerException e) {
diff --git a/core/src/main/java/com/graphhopper/routing/util/EmergencyVehicleFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/EmergencyVehicleFlagEncoder.java
new file mode 100644
index 0000000000..56da0dca36
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/routing/util/EmergencyVehicleFlagEncoder.java
@@ -0,0 +1,63 @@
+package com.graphhopper.routing.util;
+
+import com.graphhopper.reader.Way;
+
+public class EmergencyVehicleFlagEncoder extends CarFlagEncoder
+{
+	private EncodedValue startStopEncoder;
+
+	public EmergencyVehicleFlagEncoder( String entryVal )
+	{
+		super(entryVal);
+		restrictedValues.clear();
+	}
+
+	@Override
+	public String toString()
+	{
+		return "emv";
+	}
+
+	@Override
+	public long acceptWay( Way way )
+	{
+		if(way.hasTag("motorcar", "no")) 
+			return 0; 
+	    return super.acceptWay(way);
+	}
+	
+	@Override
+	public long getLong( long flags, int key )
+	{
+	    if(key==100) 
+	    	return startStopEncoder.getValue(flags);
+		return super.getLong(flags, key);
+	}
+	
+	@Override
+	public long handleWayTags( Way way, long allowed, long relationFlags )
+	{
+	    long superHandled =  super.handleWayTags(way, allowed, relationFlags);
+	    System.err.println("SUPER"+ superHandled);
+	    return superHandled |= startStopEncoder.setValue(superHandled, way.hasTag("access", "no")?1:0);
+	}
+	
+	/**
+     * Define the place of the speedBits in the edge flags for car.
+     */
+    @Override
+    public int defineWayBits( int index, int shift )
+    {
+        // first two bits are reserved for route handling in superclass
+        shift = super.defineWayBits(index, shift);
+        speedEncoder = new EncodedDoubleValue("Speed", shift, speedBits, speedFactor, defaultSpeedMap.get("secondary"), 
+                                              maxPossibleSpeed);
+        shift += speedEncoder.getBits();
+        
+        startStopEncoder = new EncodedValue("StartStop", shift, 1, 1, 0, 1, true);
+        shift += startStopEncoder.getBits();
+        
+        return shift;
+    }
+	
+}
diff --git a/core/src/main/java/com/graphhopper/routing/util/EncodingManager.java b/core/src/main/java/com/graphhopper/routing/util/EncodingManager.java
index 6f002c31f3..cd1939c471 100644
--- a/core/src/main/java/com/graphhopper/routing/util/EncodingManager.java
+++ b/core/src/main/java/com/graphhopper/routing/util/EncodingManager.java
@@ -51,6 +51,7 @@
 public class EncodingManager
 {
 	public static final String CAR = "car";
+	public static final String EMV = "emv";
 	public static final String BIKE = "bike";
 	public static final String BIKE2 = "bike2";
 	public static final String RACINGBIKE = "racingbike";
@@ -161,6 +162,9 @@ public int getBytesForFlags()
 			AbstractFlagEncoder fe;
 			if (entry.equals(CAR))
 				fe = new CarFlagEncoder(entryVal);
+			
+			else if (entry.equals(EMV))
+				fe = new EmergencyVehicleFlagEncoder(entryVal);
 
 			else if (entry.equals(BIKE))
 				fe = new BikeFlagEncoder(entryVal);
diff --git a/core/src/main/resources/com/graphhopper/util/en_GB.txt b/core/src/main/resources/com/graphhopper/util/en_GB.txt
index c886850443..08eaab2637 100644
--- a/core/src/main/resources/com/graphhopper/util/en_GB.txt
+++ b/core/src/main/resources/com/graphhopper/util/en_GB.txt
@@ -22,6 +22,7 @@ web.racingbike=Racingbike
 web.mtb=Mountainbike
 web.car=Car
 web.foot=Foot
+web.emv=Emergency
 web.staticlink=static link
 web.motorcycle=Motorcycle
 via=via
diff --git a/core/src/main/resources/com/graphhopper/util/en_US.txt b/core/src/main/resources/com/graphhopper/util/en_US.txt
index c886850443..08eaab2637 100644
--- a/core/src/main/resources/com/graphhopper/util/en_US.txt
+++ b/core/src/main/resources/com/graphhopper/util/en_US.txt
@@ -22,6 +22,7 @@ web.racingbike=Racingbike
 web.mtb=Mountainbike
 web.car=Car
 web.foot=Foot
+web.emv=Emergency
 web.staticlink=static link
 web.motorcycle=Motorcycle
 via=via
diff --git a/core/src/test/java/com/graphhopper/routing/util/EmergencyVehicleFlagEncoderTest.java b/core/src/test/java/com/graphhopper/routing/util/EmergencyVehicleFlagEncoderTest.java
new file mode 100644
index 0000000000..c25c4aadc5
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/routing/util/EmergencyVehicleFlagEncoderTest.java
@@ -0,0 +1,582 @@
+/*
+ *  Licensed to GraphHopper and Peter Karich under one or more contributor
+ *  license agreements. See the NOTICE file distributed with this work for 
+ *  additional information regarding copyright ownership.
+ *
+ *  GraphHopper licenses this file to you under the Apache License, 
+ *  Version 2.0 (the "License"); you may not use this file except in 
+ *  compliance with the License. You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ *  Unless required by applicable law or agreed to in writing, software
+ *  distributed under the License is distributed on an "AS IS" BASIS,
+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ *  See the License for the specific language governing permissions and
+ *  limitations under the License.
+ */
+package com.graphhopper.routing.util;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
+import org.junit.Test;
+
+import com.graphhopper.reader.OSMNode;
+import com.graphhopper.reader.OSMWay;
+
+/**
+ *
+ * @author Peter Karich
+ */
+public class EmergencyVehicleFlagEncoderTest
+{
+    private final EncodingManager em = new EncodingManager("EMV,BIKE",8);
+    private final EmergencyVehicleFlagEncoder encoder = (EmergencyVehicleFlagEncoder) em.getEncoder("EMV");
+    
+    @Test
+    public void testAccess()
+    {
+        OSMWay way = new OSMWay(1);
+        assertFalse(encoder.acceptWay(way) > 0);
+        way.setTag("highway", "service");
+        assertTrue(encoder.acceptWay(way) > 0);
+        way.setTag("access", "no");
+        assertTrue(encoder.acceptWay(way) > 0);
+        
+        way.setTag("access", "private");
+        assertTrue(encoder.acceptWay(way) > 0);
+
+        way.clearTags();
+        way.setTag("highway", "track");
+        assertTrue(encoder.acceptWay(way) > 0);
+
+        way.setTag("motorcar", "no");
+        assertFalse(encoder.acceptWay(way) > 0);
+
+        // for now allow grade1+2+3 for every country, see #253
+        way.clearTags();
+        way.setTag("highway", "track");
+        way.setTag("tracktype", "grade2");
+        assertTrue(encoder.acceptWay(way) > 0);
+        way.setTag("tracktype", "grade4");
+        assertFalse(encoder.acceptWay(way) > 0);
+
+        way.clearTags();
+        way.setTag("highway", "service");
+        way.setTag("access", "no");
+        way.setTag("motorcar", "yes");
+        assertTrue(encoder.acceptWay(way) > 0);
+
+        way.clearTags();
+        way.setTag("highway", "service");
+        way.setTag("access", "delivery");
+        assertTrue(encoder.acceptWay(way) > 0);
+
+        way.clearTags();
+        way.setTag("highway", "unclassified");
+        way.setTag("ford", "yes");
+        assertFalse(encoder.acceptWay(way) > 0);
+        way.setTag("motorcar", "yes");
+        assertTrue(encoder.acceptWay(way) > 0);
+
+        way.clearTags();
+        way.setTag("route", "ferry");
+        assertTrue(encoder.acceptWay(way) > 0);
+        assertTrue(encoder.isFerry(encoder.acceptWay(way)));
+        way.setTag("motorcar", "no");
+        assertFalse(encoder.acceptWay(way) > 0);
+
+        way.clearTags();
+        way.setTag("route", "ferry");
+        way.setTag("foot", "yes");
+        assertFalse(encoder.acceptWay(way) > 0);
+        assertFalse(encoder.isFerry(encoder.acceptWay(way)));
+    }
+    
+    @Test 
+    public void testStartStopOnlySections() 
+    {
+    	 OSMWay way = new OSMWay(1);
+         way.setTag("highway", "tertiary");
+         int key = 100;
+         
+         assertEquals("tertiary should be accesible unless stated otherwise", 0, (encoder.getLong(encoder.handleWayTags(way, 0L, 0L), key )));
+         
+         way.setTag("access", "no");
+         assertEquals("tertiary with no access should only be accessible as a start or end point", 1, (encoder.getLong(encoder.handleWayTags(way, 0L, 0L), key )));
+         
+         way.setTag("access", "private");
+         assertEquals("tertiary with private access (publically accessible) should always be vaid for emergencies", 0, (encoder.getLong(encoder.handleWayTags(way, 0L, 0L), key )));
+    }
+    
+    @Test
+    public void testOneway()
+    {
+        OSMWay way = new OSMWay(1);
+        way.setTag("highway", "primary");
+        long flags = encoder.handleWayTags(way, encoder.acceptWay(way), 0);
+        assertTrue(encoder.isForward(flags));
+        assertTrue(encoder.isBackward(flags));
+        way.setTag("oneway", "yes");
+        flags = encoder.handleWayTags(way, encoder.acceptWay(way), 0);
+        assertTrue(encoder.isForward(flags));
+        assertFalse(encoder.isBackward(flags));
+        way.clearTags();
+
+        way.setTag("highway", "tertiary");
+        flags = encoder.handleWayTags(way, encoder.acceptWay(way), 0);
+        assertTrue(encoder.isForward(flags));
+        assertTrue(encoder.isBackward(flags));
+        way.clearTags();
+
+        way.setTag("highway", "tertiary");
+        way.setTag("vehicle:forward", "no");
+        flags = encoder.handleWayTags(way, encoder.acceptWay(way), 0);
+        assertFalse(encoder.isForward(flags));
+        assertTrue(encoder.isBackward(flags));
+        way.clearTags();
+
+        way.setTag("highway", "tertiary");
+        way.setTag("vehicle:backward", "no");
+        flags = encoder.handleWayTags(way, encoder.acceptWay(way), 0);
+        assertTrue(encoder.isForward(flags));
+        assertFalse(encoder.isBackward(flags));
+        way.clearTags();
+    }
+
+    @Test
+    public void testMilitaryAccess()
+    {
+        OSMWay way = new OSMWay(1);
+        way.setTag("highway", "track");
+        way.setTag("access", "military");
+        assertTrue(encoder.acceptWay(way) > 0);
+    }
+
+    @Test
+    public void testSetAccess()
+    {
+        assertTrue(encoder.isForward(encoder.setProperties(0, true, true)));
+        assertTrue(encoder.isBackward(encoder.setProperties(0, true, true)));
+
+        assertTrue(encoder.isForward(encoder.setProperties(0, true, false)));
+        assertFalse(encoder.isBackward(encoder.setProperties(0, true, false)));
+
+        assertFalse(encoder.isForward(encoder.setProperties(0, false, true)));
+        assertTrue(encoder.isBackward(encoder.setProperties(0, false, true)));
+
+        assertTrue(encoder.isForward(encoder.flagsDefault(true, true)));
+        assertTrue(encoder.isBackward(encoder.flagsDefault(true, true)));
+
+        assertTrue(encoder.isForward(encoder.flagsDefault(true, false)));
+        assertFalse(encoder.isBackward(encoder.flagsDefault(true, false)));
+
+        long flags = encoder.flagsDefault(true, true);
+        // disable access
+        assertFalse(encoder.isForward(encoder.setAccess(flags, false, false)));
+        assertFalse(encoder.isBackward(encoder.setAccess(flags, false, false)));
+    }
+
+    @Test
+    public void testMaxSpeed()
+    {
+        OSMWay way = new OSMWay(1);
+        way.setTag("highway", "trunk");
+        way.setTag("maxspeed", "500");
+        long allowed = encoder.acceptWay(way);
+        long encoded = encoder.handleWayTags(way, allowed, 0);
+        assertEquals(100, encoder.getSpeed(encoded), 1e-1);
+
+        way = new OSMWay(1);
+        way.setTag("highway", "primary");
+        way.setTag("maxspeed:backward", "10");
+        way.setTag("maxspeed:forward", "20");
+        encoded = encoder.handleWayTags(way, encoder.acceptWay(way), 0);
+        assertEquals(10, encoder.getSpeed(encoded), 1e-1);
+
+        way = new OSMWay(1);
+        way.setTag("highway", "primary");
+        way.setTag("maxspeed:forward", "20");
+        encoded = encoder.handleWayTags(way, encoder.acceptWay(way), 0);
+        assertEquals(20, encoder.getSpeed(encoded), 1e-1);
+
+        way = new OSMWay(1);
+        way.setTag("highway", "primary");
+        way.setTag("maxspeed:backward", "20");
+        encoded = encoder.handleWayTags(way, encoder.acceptWay(way), 0);
+        assertEquals(20, encoder.getSpeed(encoded), 1e-1);
+    }
+
+    @Test
+    public void testSpeed()
+    {
+        // limit bigger than default road speed
+        OSMWay way = new OSMWay(1);
+        way.setTag("highway", "trunk");
+        way.setTag("maxspeed", "110");
+        long allowed = encoder.acceptWay(way);
+        long encoded = encoder.handleWayTags(way, allowed, 0);
+        assertEquals(100, encoder.getSpeed(encoded), 1e-1);
+
+        way.clearTags();
+        way.setTag("highway", "residential");
+        way.setTag("surface", "cobblestone");
+        allowed = encoder.acceptWay(way);
+        encoded = encoder.handleWayTags(way, allowed, 0);
+        assertEquals(30, encoder.getSpeed(encoded), 1e-1);
+
+        way.clearTags();
+        way.setTag("highway", "track");
+        allowed = encoder.acceptWay(way);
+        encoded = encoder.handleWayTags(way, allowed, 0);
+        assertEquals(15, encoder.getSpeed(encoded), 1e-1);
+
+        way.clearTags();
+        way.setTag("highway", "track");
+        way.setTag("tracktype", "grade1");
+        allowed = encoder.acceptWay(way);
+        encoded = encoder.handleWayTags(way, allowed, 0);
+        assertEquals(20, encoder.getSpeed(encoded), 1e-1);
+
+        try
+        {
+            encoder.setSpeed(0, -1);
+            assertTrue(false);
+        } catch (IllegalArgumentException ex)
+        {
+        }
+    }
+    
+    @Test
+    public void testMaxSpeedType()
+    {
+        // limit bigger than default road speed
+        OSMWay way = new OSMWay(1);
+        way.setTag("highway", "primary");
+        way.setTag("maxspeed:type", "GB:nsl_dual");
+        long allowed = encoder.acceptWay(way);
+        long encoded = encoder.handleWayTags(way, allowed, 0);
+        assertEquals(truncateSpeedToMax(), encoder.getSpeed(encoded), 1e-1);
+
+        way.clearTags();
+        way.setTag("highway", "secondary");
+        way.setTag("maxspeed:type", "GB:nsl_single");
+        allowed = encoder.acceptWay(way);
+        encoded = encoder.handleWayTags(way, allowed, 0);
+        assertEquals(factorSpeed(CarFlagEncoder.SIXTY_MPH_IN_KPH), encoder.getSpeed(encoded), 1e-1);
+
+        way.clearTags();
+        way.setTag("highway", "motorway");
+        way.setTag("maxspeed:type", "GB:motorway");
+        allowed = encoder.acceptWay(way);
+        encoded = encoder.handleWayTags(way, allowed, 0);
+        assertEquals(truncateSpeedToMax(), encoder.getSpeed(encoded), 1e-1);
+
+        way.clearTags();
+        way.setTag("highway", "secondary");
+        way.setTag("maxspeed", "30 mph");
+        way.setTag("maxspeed:type", "GB:nsl_single");
+        allowed = encoder.acceptWay(way);
+        encoded = encoder.handleWayTags(way, allowed, 0);
+        assertEquals(factorSpeed(CarFlagEncoder.THIRTY_MPH_IN_KPH), encoder.getSpeed(encoded), 1e-1);
+
+        try
+        {
+            encoder.setSpeed(0, -1);
+            assertTrue(false);
+        } catch (IllegalArgumentException ex)
+        {
+        }
+    }
+
+	private int truncateSpeedToMax()
+    {
+	    int factorSpeed = factorSpeed(CarFlagEncoder.SEVENTY_MPH_IN_KPH);
+		return factorSpeed>encoder.maxPossibleSpeed?encoder.maxPossibleSpeed:factorSpeed;
+    }
+
+	private int factorSpeed(int speed )
+    {
+	    return Math.round(speed/5)*5;
+    }
+
+    @Test
+    public void testSetSpeed()
+    {
+        assertEquals(10, encoder.getSpeed(encoder.setSpeed(0, 10)), 1e-1);
+    }
+
+    @Test
+    public void testRoundabout()
+    {
+        long flags = encoder.setAccess(0, true, true);
+        long resFlags = encoder.setBool(flags, FlagEncoder.K_ROUNDABOUT, true);
+        assertTrue(encoder.isBool(resFlags, FlagEncoder.K_ROUNDABOUT));
+        assertTrue(encoder.isForward(resFlags));
+        assertTrue(encoder.isBackward(resFlags));
+
+        resFlags = encoder.setBool(flags, FlagEncoder.K_ROUNDABOUT, false);
+        assertFalse(encoder.isBool(resFlags, FlagEncoder.K_ROUNDABOUT));
+        assertTrue(encoder.isForward(resFlags));
+        assertTrue(encoder.isBackward(resFlags));
+
+        OSMWay way = new OSMWay(1);
+        way.setTag("highway", "motorway");
+        flags = encoder.handleWayTags(way, encoder.acceptBit, 0);
+        assertTrue(encoder.isForward(flags));
+        assertTrue(encoder.isBackward(flags));
+        assertFalse(encoder.isBool(flags, FlagEncoder.K_ROUNDABOUT));
+
+        way.setTag("junction", "roundabout");
+        flags = encoder.handleWayTags(way, encoder.acceptBit, 0);
+        assertTrue(encoder.isForward(flags));
+        assertFalse(encoder.isBackward(flags));
+        assertTrue(encoder.isBool(flags, FlagEncoder.K_ROUNDABOUT));
+    }
+
+    @Test
+    public void testRailway()
+    {
+        OSMWay way = new OSMWay(1);
+        way.setTag("highway", "secondary");
+        way.setTag("railway", "rail");
+        // disallow rail
+        assertTrue(encoder.acceptWay(way) == 0);
+
+        way.clearTags();
+        way.setTag("highway", "path");
+        way.setTag("railway", "abandoned");
+        assertTrue(encoder.acceptWay(way) == 0);
+
+        // on disallowed highway, railway is allowed, sometimes incorrectly mapped
+        way.setTag("highway", "track");
+        assertTrue(encoder.acceptWay(way) > 0);
+
+        // this is fully okay as sometimes old rails are on the road
+        way.setTag("highway", "primary");
+        way.setTag("railway", "historic");
+        assertTrue(encoder.acceptWay(way) > 0);
+
+        way.setTag("motorcar", "no");
+        assertTrue(encoder.acceptWay(way) == 0);
+
+        way = new OSMWay(1);
+        way.setTag("highway", "secondary");
+        way.setTag("railway", "tram");
+        // but allow tram to be on the same way
+        assertTrue(encoder.acceptWay(way) > 0);
+
+        way = new OSMWay(1);
+        way.setTag("route", "shuttle_train");
+        way.setTag("motorcar", "yes");
+        way.setTag("bicycle", "no");
+        way.setTag("duration", "35");
+        way.setTag("estimated_distance", 50000);
+        // accept
+        assertTrue(encoder.acceptWay(way) > 0);
+        // calculate speed from estimated_distance and duration
+        assertEquals(60, encoder.getSpeed(encoder.handleFerryTags(way, 20, 30, 40)), 1e-1);
+    }
+
+    @Test
+    public void testSwapDir()
+    {
+        long swappedFlags = encoder.reverseFlags(encoder.flagsDefault(true, true));
+        assertTrue(encoder.isForward(swappedFlags));
+        assertTrue(encoder.isBackward(swappedFlags));
+
+        swappedFlags = encoder.reverseFlags(encoder.flagsDefault(true, false));
+
+        assertFalse(encoder.isForward(swappedFlags));
+        assertTrue(encoder.isBackward(swappedFlags));
+
+        assertEquals(0, encoder.reverseFlags(0));
+    }
+
+    @Test
+    public void testBarrierAccess()
+    {
+        OSMNode node = new OSMNode(1, -1, -1);
+        node.setTag("barrier", "lift_gate");
+        node.setTag("access", "yes");
+        // no barrier!
+        assertTrue(encoder.handleNodeTags(node) == 0);
+
+        node = new OSMNode(1, -1, -1);
+        node.setTag("barrier", "lift_gate");
+        node.setTag("bicycle", "yes");
+        // barrier!
+        assertTrue(encoder.handleNodeTags(node) > 0);
+
+        node = new OSMNode(1, -1, -1);
+        node.setTag("barrier", "lift_gate");
+        node.setTag("access", "yes");
+        node.setTag("bicycle", "yes");
+        // should this be a barrier for motorcars too?
+        // assertTrue(encoder.handleNodeTags(node) > 0);
+
+        node = new OSMNode(1, -1, -1);
+        node.setTag("barrier", "lift_gate");
+        node.setTag("access", "no");
+        node.setTag("motorcar", "yes");
+        // no barrier!
+        assertTrue(encoder.handleNodeTags(node) == 0);
+
+        node = new OSMNode(1, -1, -1);
+        node.setTag("barrier", "bollard");
+        // barrier!
+        assertTrue(encoder.handleNodeTags(node) > 0);
+
+        // ignore other access tags for absolute barriers!
+        node.setTag("motorcar", "yes");
+        // still barrier!
+        assertTrue(encoder.handleNodeTags(node) > 0);
+    }
+
+    @Test
+    public void testTurnFlagEncoding_noCosts()
+    {
+        FlagEncoder tmpEnc = new CarFlagEncoder(8, 5, 0);
+        EncodingManager em = new EncodingManager(tmpEnc);
+
+        long flags_r0 = tmpEnc.getTurnFlags(true, 0);
+        long flags_0 = tmpEnc.getTurnFlags(false, 0);
+
+        long flags_r20 = tmpEnc.getTurnFlags(true, 0);
+        long flags_20 = tmpEnc.getTurnFlags(false, 20);
+
+        assertEquals(0, tmpEnc.getTurnCost(flags_r0), 1e-1);
+        assertEquals(0, tmpEnc.getTurnCost(flags_0), 1e-1);
+
+        assertEquals(0, tmpEnc.getTurnCost(flags_r20), 1e-1);
+        assertEquals(0, tmpEnc.getTurnCost(flags_20), 1e-1);
+
+        assertFalse(tmpEnc.isTurnRestricted(flags_r0));
+        assertFalse(tmpEnc.isTurnRestricted(flags_0));
+
+        assertFalse(tmpEnc.isTurnRestricted(flags_r20));
+        assertFalse(tmpEnc.isTurnRestricted(flags_20));
+    }
+
+    @Test
+    public void testTurnFlagEncoding_withCosts()
+    {
+        FlagEncoder tmpEncoder = new CarFlagEncoder(8, 5, 127);
+        EncodingManager em = new EncodingManager(tmpEncoder);
+
+        long flags_r0 = tmpEncoder.getTurnFlags(true, 0);
+        long flags_0 = tmpEncoder.getTurnFlags(false, 0);
+        assertTrue(Double.isInfinite(tmpEncoder.getTurnCost(flags_r0)));
+        assertEquals(0, tmpEncoder.getTurnCost(flags_0), 1e-1);
+        assertTrue(tmpEncoder.isTurnRestricted(flags_r0));
+        assertFalse(tmpEncoder.isTurnRestricted(flags_0));
+
+        long flags_r20 = tmpEncoder.getTurnFlags(true, 0);
+        long flags_20 = tmpEncoder.getTurnFlags(false, 20);
+        assertTrue(Double.isInfinite(tmpEncoder.getTurnCost(flags_r20)));
+        assertEquals(20, tmpEncoder.getTurnCost(flags_20), 1e-1);
+        assertTrue(tmpEncoder.isTurnRestricted(flags_r20));
+        assertFalse(tmpEncoder.isTurnRestricted(flags_20));
+
+        long flags_r220 = tmpEncoder.getTurnFlags(true, 0);
+        try
+        {
+            tmpEncoder.getTurnFlags(false, 220);
+            assertTrue(false);
+        } catch (Exception ex)
+        {
+        }
+        assertTrue(Double.isInfinite(tmpEncoder.getTurnCost(flags_r220)));
+        assertTrue(tmpEncoder.isTurnRestricted(flags_r220));
+    }
+
+    @Test
+    public void testMaxValue()
+    {
+        CarFlagEncoder instance = new CarFlagEncoder(8, 0.5, 0);
+        EncodingManager em = new EncodingManager(instance);
+        OSMWay way = new OSMWay(1);
+        way.setTag("highway", "motorway_link");
+        way.setTag("maxspeed", "60 mph");
+        long flags = instance.handleWayTags(way, 1, 0);
+
+        // double speed = AbstractFlagEncoder.parseSpeed("60 mph");
+        // => 96.56 * 0.9 => 86.9
+        assertEquals(86.9, instance.getSpeed(flags), 1e-1);
+        flags = instance.reverseFlags(flags);
+        assertEquals(86.9, instance.getSpeed(flags), 1e-1);
+        
+        // test that maxPossibleValue  is not exceeded
+        way = new OSMWay(2);
+        way.setTag("highway", "motorway_link");
+        way.setTag("maxspeed", "70 mph");
+        flags = instance.handleWayTags(way, 1, 0);
+        assertEquals(100, instance.getSpeed(flags), 1e-1);
+    }
+
+    @Test
+    public void testRegisterOnlyOnceAllowed()
+    {
+        CarFlagEncoder instance = new CarFlagEncoder(8, 0.5, 0);
+        EncodingManager em = new EncodingManager(instance);
+        try
+        {
+            em = new EncodingManager(instance);
+            assertTrue(false);
+        } catch (IllegalStateException ex)
+        {
+        }
+    }
+
+    @Test
+    public void testSetToMaxSpeed()
+    {
+        OSMWay way = new OSMWay(12);
+        way.setTag("maxspeed", "90");
+        assertEquals(90, encoder.getMaxSpeed(way), 1e-2);
+    }
+
+    @Test
+    public void testFordAccess()
+    {
+        OSMNode node = new OSMNode(0, 0.0, 0.0);
+        node.setTag("ford", "yes");
+
+        OSMWay way = new OSMWay(1);
+        way.setTag("highway", "unclassified");
+        way.setTag("ford", "yes");
+
+        // Node and way are initially blocking
+        assertTrue(encoder.isBlockFords());
+        assertFalse(encoder.acceptWay(way) > 0);
+        assertTrue(encoder.handleNodeTags(node) > 0);
+
+        try
+        {
+            // Now they are passable
+            encoder.setBlockFords(false);
+            assertTrue(encoder.acceptWay(way) > 0);
+            assertFalse(encoder.handleNodeTags(node) > 0);
+        } finally
+        {
+            encoder.setBlockFords(true);
+        }
+    }
+
+    @Test
+    public void testCombination()
+    {
+        OSMWay way = new OSMWay(123);
+        way.setTag("highway", "cycleway");
+        way.setTag("sac_scale", "hiking");        
+
+        long flags = em.acceptWay(way);
+        long edgeFlags = em.handleWayTags(way, flags, 0);
+        assertFalse(encoder.isBackward(edgeFlags));
+        assertFalse(encoder.isForward(edgeFlags));
+        assertTrue(em.getEncoder("bike").isBackward(edgeFlags));
+        assertTrue(em.getEncoder("bike").isForward(edgeFlags));
+    }
+}
diff --git a/web/src/main/java/com/graphhopper/http/ApiResource.java b/web/src/main/java/com/graphhopper/http/ApiResource.java
index a924dffbc7..65e744a26a 100644
--- a/web/src/main/java/com/graphhopper/http/ApiResource.java
+++ b/web/src/main/java/com/graphhopper/http/ApiResource.java
@@ -4,15 +4,16 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
+
 import javax.servlet.http.HttpServletRequest;
 
 public enum ApiResource
 {
 	ROUTE("route", new String[] { "point", "vehicle" }, new String[] { "point", "vehicle",
-	        "locale", "instructions", "weighting", "algorithm", "points_encoded", "debug",
-	        "pretty", "calc_points", "type", "avoidances" }), NEAREST("nearest",
-	        new String[] { "point" }, new String[] { "point" }), INFO("info", new String[] {},
-	        new String[] {});
+			"locale", "instructions", "weighting", "algorithm", "points_encoded", "debug",
+			"pretty", "calc_points", "type", "avoidances" }), NEAREST("nearest",
+					new String[] { "point" }, new String[] { "point" }), INFO("info", new String[] {},
+							new String[] {});
 
 	public String[] getMandatoryValues()
 	{
@@ -52,7 +53,7 @@ private ApiResource( String resourceName, String[] mandatoryValues, String[] val
 	 * @throws NoSuchParameterException
 	 */
 	public void checkAllRequestParameters( HttpServletRequest request )
-	        throws MissingParameterException, NoSuchParameterException, InvalidParameterException
+			throws MissingParameterException, NoSuchParameterException, InvalidParameterException
 	{
 		// Check if the mandatory parameter exists in the request
 		String value = this.getMandatoryValues()[0];
@@ -104,11 +105,11 @@ private void checkValidParameters( HttpServletRequest request ) throws NoSuchPar
 		Map<String, String[]> parameterMap = request.getParameterMap();
 		for (Map.Entry<String, String[]> entry : parameterMap.entrySet())
 		{
-			String parameterName = entry.getKey().toLowerCase();
-			if (!list.contains(parameterName))
+			String name = entry.getKey().toLowerCase();
+			if (!list.contains(name))
 			{
-				throw new NoSuchParameterException(getInvalidPara​meterMessage(parameterName,
-				        this.getResourceName(), this.getValidValues()));
+				String msg = getInvalidPara​meterMessage(name, getResourceName(), getValidValues());
+				throw new NoSuchParameterException(msg);
 			}
 		}
 	}
@@ -122,12 +123,12 @@ private void checkValidParameters( HttpServletRequest request ) throws NoSuchPar
 	 * @return message String
 	 */
 	private String getInvalidPara​meterMessage( String invalid, String parameter,
-	        String[] validValues )
+			String[] validValues )
 	{
 		StringBuilder sb = new StringBuilder();
 
 		sb.append("Parameter ").append(invalid).append(" is not a valid parameter for resource ")
-		        .append(parameter).append(". Valid parameters for requested resource are ");
+		.append(parameter).append(". Valid parameters for requested resource are ");
 
 		List<String> validList = Arrays.asList(validValues);
 		for (String valid : validList)
diff --git a/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java b/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
index 331be2eeef..8ebbc46294 100644
--- a/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
+++ b/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
@@ -41,6 +41,7 @@
 import javax.xml.transform.dom.DOMSource;
 import javax.xml.transform.stream.StreamResult;
 
+import org.eclipse.jetty.http.HttpStatus;
 import org.json.JSONObject;
 import org.w3c.dom.Document;
 import org.w3c.dom.Element;
@@ -96,7 +97,7 @@ public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes )
 		String vehicleStr = getParam(httpReq, "vehicle", null);
 		String weighting = getParam(httpReq, "weighting", "fastest");
 		String algoStr = getParam(httpReq, "algorithm", null);
-		String localeStr = getParam(httpReq, "locale", "en").replace('-', '_');
+		String localeStr = getParam(httpReq, "locale", "en_GB").replace('-', '_');
 
 		StopWatch sw = new StopWatch().start();
 		GHResponse ghRsp = null;
@@ -119,10 +120,13 @@ public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes )
 			{
 				String errMesg = buildErrorMessageString(localeStr, "locale",
 				        TranslationMap.LOCALES);
-				ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg.toString()));
-			} else if (null!=algoStr && !new CaseInsensitiveStringListValidator().isValid(algoStr,
-			        AlgorithmOptions.ASTAR, AlgorithmOptions.ASTAR_BI, AlgorithmOptions.DIJKSTRA,
-			        AlgorithmOptions.DIJKSTRA_BI, AlgorithmOptions.DIJKSTRA_ONE_TO_MANY))
+				ghRsp = new GHResponse()
+				.addError(new InvalidParameterException(errMesg.toString()));
+			} else if (null != algoStr
+					&& !new CaseInsensitiveStringListValidator().isValid(algoStr,
+							AlgorithmOptions.ASTAR, AlgorithmOptions.ASTAR_BI,
+							AlgorithmOptions.DIJKSTRA, AlgorithmOptions.DIJKSTRA_BI,
+							AlgorithmOptions.DIJKSTRA_ONE_TO_MANY))
 			{
 				String errMesg = buildErrorMessageString(algoStr, "algorithm",
 				        AlgorithmOptions.ASTAR, AlgorithmOptions.ASTAR_BI,
@@ -191,7 +195,7 @@ public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes )
 					}
 					String avoidanceArray[] = avoidancesString.split(",");
 					for (String avoidance : avoidanceArray)
-                    {
+					{
 						if (!allowedAvoidances.contains(avoidance.trim()))
 						{
 							String errMesg = buildErrorMessageString(avoidance, "avoidances",
@@ -199,7 +203,7 @@ public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes )
 							ghRsp = new GHResponse().addError(new InvalidParameterException(errMesg
 									.toString()));
 						}
-                    }
+					}
 				}
 
 				if (ghRsp == null)
@@ -370,7 +374,13 @@ String errorsToXML( List<Throwable> list )
 			json.put("error", map);
 			Throwable throwable = rsp.getErrors().get(0);
 			map.put("message", throwable.getMessage());
-			map.put("statuscode", ((APIException) throwable).getStatusCode().toString());
+			String statusCode = "" + HttpStatus.BAD_REQUEST_400;
+			if (throwable instanceof APIException)
+			{
+				statusCode = ((APIException) throwable).getStatusCode().toString();
+				logger.error("Unhandled exception, defaulting it to 400");
+			}
+			map.put("statuscode", statusCode);
 			List<Map<String, String>> list = new ArrayList<Map<String, String>>();
 			for (Throwable t : rsp.getErrors())
 			{
diff --git a/web/src/main/webapp/.ebextensions/server-update.config b/web/src/main/webapp/.ebextensions/server-update.config
index c7a4431185..0edf399505 100644
--- a/web/src/main/webapp/.ebextensions/server-update.config
+++ b/web/src/main/webapp/.ebextensions/server-update.config
@@ -1,20 +1,30 @@
 files:
-    "/download.sh" :
+    "/download-post-deploy.sh" :
         owner: root
         group: root
         mode: "000755"
         content: |
             #!/bin/bash
             
+            echo "DEMO_SITE_AVAILABLE is set to ${DEMO_SITE_AVAILABLE}"
+            POST_DEPLOY_SCRIPT=post_deploy_keep_demo.sh
+            # Check if we need to remove the demo site
+            if [ "${DEMO_SITE_AVAILABLE}" = "false" ]
+            then
+                POST_DEPLOY_SCRIPT=post_deploy_remove_demo.sh                    
+            fi            
+            
+            echo "POST_DEPLOY_SCRIPT set to ${POST_DEPLOY_SCRIPT}"
+            
             # Remove the existing env_vars.sh so it can be replaced
-            /opt/elasticbeanstalk/hooks/appdeploy/post/99_update_osplaces_key.sh
+            rm /opt/elasticbeanstalk/hooks/appdeploy/post/99_post_deploy.sh
             
             # Download the file in a location and name that will get executed AFTER the container_commands have been executed and the application deployed 
-            AWS_SECRET_ACCESS_KEY=${AWS_SECRET_KEY} aws s3 cp --region eu-west-1 s3://${CONFIG_BUCKET}/env_vars.sh /opt/elasticbeanstalk/hooks/appdeploy/post/99_update_osplaces_key.sh
+            AWS_SECRET_ACCESS_KEY=${AWS_SECRET_KEY} aws s3 cp --region eu-west-1 s3://${CONFIG_BUCKET}/${POST_DEPLOY_SCRIPT} /opt/elasticbeanstalk/hooks/appdeploy/post/99_post_deploy.sh
             
-            more /opt/elasticbeanstalk/hooks/appdeploy/post/99_update_osplaces_key.sh
+            #more /opt/elasticbeanstalk/hooks/appdeploy/post/99_post_deploy.sh
             
-            chmod a+x /opt/elasticbeanstalk/hooks/appdeploy/post/99_update_osplaces_key.sh
+            chmod a+x /opt/elasticbeanstalk/hooks/appdeploy/post/99_post_deploy.sh
                         
     "/extract.sh" :
         owner: root
@@ -24,8 +34,8 @@ files:
             #!/bin/bash
             # Remove the existing config.properties so it can be replaced
             rm -f /config.properties
-            #fetch the preingested routing data
-            AWS_SECRET_ACCESS_KEY=${AWS_SECRET_KEY} aws s3 cp --region eu-west-1 s3://${CONFIG_BUCKET}/${ROUTING_ARCHIVE} .
+            #fetch the preingested routing data to /
+            AWS_SECRET_ACCESS_KEY=${AWS_SECRET_KEY} aws s3 cp --region eu-west-1 s3://${CONFIG_BUCKET}/${ROUTING_ARCHIVE} /
             #fetch applicatio config file
             AWS_SECRET_ACCESS_KEY=${AWS_SECRET_KEY} aws s3 cp --region eu-west-1 s3://${CONFIG_BUCKET}/${ROUTING_CONFIG} /config.properties
             
@@ -35,10 +45,13 @@ files:
 
             # Extract the route data
             ROUTING_ARCHIVE_FILE=`basename ${ROUTING_ARCHIVE}` 
-            tar xvjf ${ROUTING_ARCHIVE_FILE} -C /
+            tar xvjf /${ROUTING_ARCHIVE_FILE} -C /
+
+            rm /${ROUTING_ARCHIVE_FILE}
 
             # Change the owner to tomcat
-            chown -R tomcat:tomcat ${graphhopper_graph_location}
+            chown -R tomcat:tomcat ${graphhopper_graph_location}            
+
             
 commands:
     01-install-awscli:
@@ -49,7 +62,7 @@ commands:
 
 container_commands:
     03-download-env-vars:
-        command: /download.sh
+        command: /download-post-deploy.sh
     04-download-s3-asset-and-extract:
         command: /extract.sh 
     
