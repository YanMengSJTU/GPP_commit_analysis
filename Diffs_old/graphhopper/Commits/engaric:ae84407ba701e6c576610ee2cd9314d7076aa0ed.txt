diff --git a/core/src/main/java/com/graphhopper/reader/osgb/AbstractOsInputFile.java b/core/src/main/java/com/graphhopper/reader/osgb/AbstractOsInputFile.java
index 2821407944..1decc9a403 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/AbstractOsInputFile.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/AbstractOsInputFile.java
@@ -62,6 +62,14 @@ public InputStream getInputStream() {
         return bis;
     }
 
+    public AbstractRoutingElementFactory<T> getAbstractFactory() {
+        return abstractFactory;
+    }
+
+    public void setAbstractFactory(AbstractRoutingElementFactory<T> abstractFactory) {
+        this.abstractFactory = abstractFactory;
+    }
+
     /**
      * Currently on for pbf format. Default is number of cores.
      */
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnRoutingElementFactory.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnRoutingElementFactory.java
index d6f271fab9..b7674addac 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnRoutingElementFactory.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnRoutingElementFactory.java
@@ -11,11 +11,10 @@
 
 import com.graphhopper.reader.RoutingElement;
 import com.graphhopper.reader.osgb.AbstractRoutingElementFactory;
-import com.graphhopper.reader.osgb.itn.OsItnRoutingElementFactory;
 
 public class OsDpnRoutingElementFactory extends AbstractRoutingElementFactory<RoutingElement>{
 
-    private static final Logger logger = LoggerFactory.getLogger(OsItnRoutingElementFactory.class);
+    private static final Logger logger = LoggerFactory.getLogger(OsDpnRoutingElementFactory.class);
 
     @Override
     public RoutingElement create(String name, String idStr, XMLStreamReader parser) throws MismatchedDimensionException, XMLStreamException, FactoryException, TransformException {
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnInputFile.java b/core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnInputFile.java
index 547f56e995..fc643a826e 100755
--- a/core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnInputFile.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnInputFile.java
@@ -30,6 +30,7 @@
  */
 public class OsItnInputFile extends AbstractOsInputFile<OSITNElement> {
     public OsItnInputFile(File file) throws IOException {
-        super(file, new OsItnRoutingElementFactory());
+        // We don't specify a factory as it will be different depending on which stage of the ingestion we are at.
+        super(file, null);
     }
 }
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnRoutingElementFactory.java b/core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnPreProcessRoutingElementFactory.java
similarity index 77%
rename from core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnRoutingElementFactory.java
rename to core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnPreProcessRoutingElementFactory.java
index ad4a6b1cf5..847fe0a2a0 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnRoutingElementFactory.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnPreProcessRoutingElementFactory.java
@@ -13,9 +13,15 @@
 
 import com.graphhopper.reader.osgb.AbstractRoutingElementFactory;
 
-public class OsItnRoutingElementFactory extends AbstractRoutingElementFactory<OSITNElement>{
+/**
+ * Handles RoutingElements required during the preProcess phase. This only needs Ways and Relations
+ *
+ * @author phopkins
+ *
+ */
+public class OsItnPreProcessRoutingElementFactory extends AbstractRoutingElementFactory<OSITNElement> {
 
-    private static final Logger logger = LoggerFactory.getLogger(OsItnRoutingElementFactory.class);
+    private static final Logger logger = LoggerFactory.getLogger(OsItnPreProcessRoutingElementFactory.class);
 
     @Override
     public OSITNElement create(String name, String idStr, XMLStreamReader parser) throws MismatchedDimensionException, XMLStreamException, FactoryException, TransformException {
@@ -31,26 +37,13 @@ public OSITNElement create(String name, String idStr, XMLStreamReader parser) th
         }
         logger.info(id + ":" + name + ":");
         switch (name) {
-        case "RoadNode": {
-            return OSITNNode.create(id, parser);
-        }
         case "RoadLink": {
             return OSITNWay.create(id, parser);
         }
-
         case "RoadLinkInformation":
         case "RoadRouteInformation": {
             return OSITNRelation.create(id, parser);
         }
-
-        case "Road": {
-            return OsItnMetaData.create(id, parser);
-        }
-        case "RoadNodeInformation": {
-        }
-        default: {
-
-        }
         }
         return null;
     }
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnProcessStageOneRoutingElementFactory.java b/core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnProcessStageOneRoutingElementFactory.java
new file mode 100644
index 0000000000..c9c637e4fa
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnProcessStageOneRoutingElementFactory.java
@@ -0,0 +1,45 @@
+package com.graphhopper.reader.osgb.itn;
+
+import java.math.BigDecimal;
+
+import javax.xml.stream.XMLStreamException;
+import javax.xml.stream.XMLStreamReader;
+
+import org.opengis.geometry.MismatchedDimensionException;
+import org.opengis.referencing.FactoryException;
+import org.opengis.referencing.operation.TransformException;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import com.graphhopper.reader.osgb.AbstractRoutingElementFactory;
+
+/**
+ * Stage one only needs Nodes
+ * @author phopkins
+ *
+ */
+public class OsItnProcessStageOneRoutingElementFactory extends AbstractRoutingElementFactory<OSITNElement>{
+
+    private static final Logger logger = LoggerFactory.getLogger(OsItnProcessStageOneRoutingElementFactory.class);
+
+    @Override
+    public OSITNElement create(String name, String idStr, XMLStreamReader parser) throws MismatchedDimensionException, XMLStreamException, FactoryException, TransformException {
+        idStr = idStr.substring(4);
+        logger.info(idStr + ":" + name + ":");
+
+        long id;
+        try {
+            id = Long.parseLong(idStr);
+        } catch (NumberFormatException nfe) {
+            BigDecimal bd = new BigDecimal(idStr);
+            id = bd.longValue();
+        }
+        logger.info(id + ":" + name + ":");
+        switch (name) {
+        case "RoadNode": {
+            return OSITNNode.create(id, parser);
+        }
+        }
+        return null;
+    }
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnProcessStageThreeRoutingElementFactory.java b/core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnProcessStageThreeRoutingElementFactory.java
new file mode 100644
index 0000000000..4442206838
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnProcessStageThreeRoutingElementFactory.java
@@ -0,0 +1,46 @@
+package com.graphhopper.reader.osgb.itn;
+
+import java.math.BigDecimal;
+
+import javax.xml.stream.XMLStreamException;
+import javax.xml.stream.XMLStreamReader;
+
+import org.opengis.geometry.MismatchedDimensionException;
+import org.opengis.referencing.FactoryException;
+import org.opengis.referencing.operation.TransformException;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import com.graphhopper.reader.osgb.AbstractRoutingElementFactory;
+
+/**
+ * Stage three only needs Relations
+ * @author phopkins
+ *
+ */
+public class OsItnProcessStageThreeRoutingElementFactory extends AbstractRoutingElementFactory<OSITNElement>{
+
+    private static final Logger logger = LoggerFactory.getLogger(OsItnProcessStageThreeRoutingElementFactory.class);
+
+    @Override
+    public OSITNElement create(String name, String idStr, XMLStreamReader parser) throws MismatchedDimensionException, XMLStreamException, FactoryException, TransformException {
+        idStr = idStr.substring(4);
+        logger.info(idStr + ":" + name + ":");
+
+        long id;
+        try {
+            id = Long.parseLong(idStr);
+        } catch (NumberFormatException nfe) {
+            BigDecimal bd = new BigDecimal(idStr);
+            id = bd.longValue();
+        }
+        logger.info(id + ":" + name + ":");
+        switch (name) {
+        case "RoadLinkInformation":
+        case "RoadRouteInformation": {
+            return OSITNRelation.create(id, parser);
+        }
+        }
+        return null;
+    }
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnProcessStageTwoRoutingElementFactory.java b/core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnProcessStageTwoRoutingElementFactory.java
new file mode 100644
index 0000000000..8d7140453a
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnProcessStageTwoRoutingElementFactory.java
@@ -0,0 +1,46 @@
+package com.graphhopper.reader.osgb.itn;
+
+import java.math.BigDecimal;
+
+import javax.xml.stream.XMLStreamException;
+import javax.xml.stream.XMLStreamReader;
+
+import org.opengis.geometry.MismatchedDimensionException;
+import org.opengis.referencing.FactoryException;
+import org.opengis.referencing.operation.TransformException;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import com.graphhopper.reader.osgb.AbstractRoutingElementFactory;
+
+/**
+ * Stage two only needs Ways
+ *
+ * @author phopkins
+ *
+ */
+public class OsItnProcessStageTwoRoutingElementFactory extends AbstractRoutingElementFactory<OSITNElement>{
+
+    private static final Logger logger = LoggerFactory.getLogger(OsItnProcessStageTwoRoutingElementFactory.class);
+
+    @Override
+    public OSITNElement create(String name, String idStr, XMLStreamReader parser) throws MismatchedDimensionException, XMLStreamException, FactoryException, TransformException {
+        idStr = idStr.substring(4);
+        logger.info(idStr + ":" + name + ":");
+
+        long id;
+        try {
+            id = Long.parseLong(idStr);
+        } catch (NumberFormatException nfe) {
+            BigDecimal bd = new BigDecimal(idStr);
+            id = bd.longValue();
+        }
+        logger.info(id + ":" + name + ":");
+        switch (name) {
+        case "RoadLink": {
+            return OSITNWay.create(id, parser);
+        }
+        }
+        return null;
+    }
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnReader.java b/core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnReader.java
index dd918bf369..01439d5e87 100755
--- a/core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnReader.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/itn/OsItnReader.java
@@ -296,6 +296,8 @@ private void preProcessSingleFile(OsItnInputFile in)
         long tmpWayCounter = 1;
         long tmpRelationCounter = 1;
         RoutingElement item;
+        // Limit the number of xml nodes we process to speed up ingestion
+        in.setAbstractFactory(new OsItnPreProcessRoutingElementFactory());
         while ((item = in.getNext()) != null) {
             logger.info(OS_ITN_READER_PRE_PROCESS_FORMAT, item.getType());
             if (item.isType(OSMElement.WAY)) {
@@ -689,6 +691,8 @@ private void processStageOne(ProcessData processData, OsItnInputFile in)
         System.out.println("==== processStageOne");
         RoutingElement item;
         LongIntMap nodeFilter = getNodeMap();
+        // Limit the number of xml nodes we process to speed up ingestion
+        in.setAbstractFactory(new OsItnProcessStageOneRoutingElementFactory());
         while ((item = in.getNext()) != null) {
             switch (item.getType()) {
             case OSMElement.NODE:
@@ -727,6 +731,8 @@ private void processStageTwo(ProcessData processData, OsItnInputFile in)
         System.out.println("==== processStageTwo");
         RoutingElement item;
         LongIntMap nodeFilter = getNodeMap();
+        // Limit the number of xml nodes we process to speed up ingestion
+        in.setAbstractFactory(new OsItnProcessStageTwoRoutingElementFactory());
         while ((item = in.getNext()) != null) {
             switch (item.getType()) {
             case OSMElement.WAY:
@@ -767,6 +773,8 @@ private void processStageThree(ProcessData processData, OsItnInputFile in)
             FactoryException, TransformException {
         System.out.println("==== processStageThree");
         RoutingElement item;
+        // Limit the number of xml nodes we process to speed up ingestion
+        in.setAbstractFactory(new OsItnProcessStageThreeRoutingElementFactory());
         while ((item = in.getNext()) != null) {
             switch (item.getType()) {
             case OSMElement.RELATION:
