diff --git a/config-example.properties b/config-example.properties
index 8a94e59c36..b48f4c7010 100644
--- a/config-example.properties
+++ b/config-example.properties
@@ -28,10 +28,10 @@ graph.flag_encoders=car
 # By default the speed-up mode with the 'fastest' weighting is used. Internally a graph preparation via
 # contraction hierarchies (CH) is done to speed routing up. This requires more RAM/disc space for holding the
 # graph but less for every request. You can also setup multiple weightings, by providing a coma separated list.
-prepare.ch.weightings=fastest
+#prepare.ch.weightings=fastest
 
 # Disable the speed-up mode. Should be use only with routing.maxVisitedNodes
-# prepare.ch.weightings=no
+ prepare.ch.weightings=no
 
 # To make preparation faster for multiple flagEncoders you can increase the default threads if you have enough RAM.
 # Change this setting only if you know what you are doing and if the default worked for you and really make sure you have enough RAM!
diff --git a/core/src/main/java/com/graphhopper/util/Parameters.java b/core/src/main/java/com/graphhopper/util/Parameters.java
index 09c47efc37..74fc2911f2 100644
--- a/core/src/main/java/com/graphhopper/util/Parameters.java
+++ b/core/src/main/java/com/graphhopper/util/Parameters.java
@@ -56,6 +56,10 @@
          * round trip algorithm (not yet for CH)
          */
         public static final String ROUND_TRIP = "round_trip";
+        /**
+         * k-shortest paths (Dijkstra)
+         */
+        public static final String KSP = "ksp";
 
         /**
          * All public properties for alternative routing.
diff --git a/reader-osm/src/main/java/com/graphhopper/reader/osm/RoutingExample.java b/reader-osm/src/main/java/com/graphhopper/reader/osm/RoutingExample.java
index 52aec46d17..9c5f1ea545 100644
--- a/reader-osm/src/main/java/com/graphhopper/reader/osm/RoutingExample.java
+++ b/reader-osm/src/main/java/com/graphhopper/reader/osm/RoutingExample.java
@@ -36,13 +36,13 @@ public static void process_routes(String city, String route_type) throws Excepti
             osmFile = osmFile + "new-york_new-york.osm.pbf";
             graphFolder = graphFolder + "ghosm_nyc";
             inputPointsFN = inputPointsFN + "nyc_" + route_type + "_od_pairs.csv";
-            outputPointsFN = outputPointsFN + "nyc_" + route_type + "_graphhopper_routes.csv";
+            outputPointsFN = outputPointsFN + "nyc_" + route_type + "_graphhopper_routes_TEST.csv";
         } else {
             return;
         }
 
         // create one GraphHopper instance
-        GraphHopper hopper = new GraphHopperOSM().forDesktop();
+        GraphHopper hopper = new GraphHopperOSM().forDesktop().setCHEnabled(false);
         hopper.setDataReaderFile(osmFile);
         // where to store graphhopper files?
         hopper.setGraphHopperLocation(graphFolder);
@@ -93,7 +93,8 @@ public static void process_routes(String city, String route_type) throws Excepti
             GHRequest req = new GHRequest(points[0], points[1], points[2], points[3]).  // latFrom, lonFrom, latTo, lonTo
                     setWeighting("fastest").
                     setVehicle("car").
-                    setLocale(Locale.US);
+                    setLocale(Locale.US).
+                    setAlgorithm("dijkstra");
             GHResponse rsp = hopper.route(req);
 
             // first check for errors
@@ -146,10 +147,10 @@ public static void main(String[] args) throws Exception {
         // NYC Grid
         process_routes("NYC", "grid");
         // NYC Random
-        process_routes("NYC", "rand");
+        //process_routes("NYC", "rand");
         // SF Grid
-        process_routes("SF", "grid");
+        //process_routes("SF", "grid");
         // SF Random
-        process_routes("SF", "rand");
+        //process_routes("SF", "rand");
     }
 }
