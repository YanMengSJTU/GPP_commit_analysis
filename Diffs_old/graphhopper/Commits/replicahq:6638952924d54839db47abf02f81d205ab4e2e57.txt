diff --git a/core/src/main/java/sidewalk/OriginalDirectionFlagEncoder.java b/core/src/main/java/sidewalk/OriginalDirectionFlagEncoder.java
deleted file mode 100644
index 98f6a1907d..0000000000
--- a/core/src/main/java/sidewalk/OriginalDirectionFlagEncoder.java
+++ /dev/null
@@ -1,59 +0,0 @@
-package com.conveyal.r5.graphhopper;
-
-import com.graphhopper.reader.ReaderRelation;
-import com.graphhopper.reader.ReaderWay;
-import com.graphhopper.routing.util.AbstractFlagEncoder;
-
-public class OriginalDirectionFlagEncoder extends AbstractFlagEncoder {
-
-
-    private long originalDirectionBitmask;
-
-    protected OriginalDirectionFlagEncoder() {
-        super(0, 0, 0);
-    }
-
-    @Override
-    public int defineWayBits(int index, int shift) {
-        shift = super.defineWayBits(index, shift);
-        this.originalDirectionBitmask = 1L << shift;
-        return shift + 1;
-    }
-
-    @Override
-    public long handleRelationTags(ReaderRelation readerRelation, long l) {
-        return l;
-    }
-
-    @Override
-    public long acceptWay(ReaderWay readerWay) {
-        return 0;
-    }
-
-    @Override
-    public long handleWayTags(ReaderWay readerWay, long l, long l1) {
-        return 0;
-    }
-
-    @Override
-    public int getVersion() {
-        return 0;
-    }
-
-    public long reverseFlags(long flags) {
-        return super.reverseFlags(flags) ^ this.directionBitMask;
-    }
-
-    public boolean isOriginalDirection(long flags) {
-        return (flags & this.originalDirectionBitmask) != 0L;
-    }
-
-    public long setOriginalDirection(long flags, boolean originalDirection) {
-        return originalDirection ? flags | originalDirectionBitmask : flags & ~originalDirectionBitmask;
-    }
-
-    public String toString() {
-        return "original-direction";
-    }
-
-}
diff --git a/web/src/main/java/com/graphhopper/http/GraphHopperManaged.java b/web/src/main/java/com/graphhopper/http/GraphHopperManaged.java
index f47a2b3697..8272c8e396 100644
--- a/web/src/main/java/com/graphhopper/http/GraphHopperManaged.java
+++ b/web/src/main/java/com/graphhopper/http/GraphHopperManaged.java
@@ -30,8 +30,12 @@
 import com.graphhopper.util.PMap;
 import com.graphhopper.util.Parameters;
 import com.graphhopper.util.details.AbstractPathDetailsBuilder;
+import com.graphhopper.util.details.AverageSpeedDetails;
+import com.graphhopper.util.details.EdgeIdDetails;
 import com.graphhopper.util.details.PathDetailsBuilder;
 import com.graphhopper.util.details.PathDetailsBuilderFactory;
+import com.graphhopper.util.details.StreetNameDetails;
+import com.graphhopper.util.details.TimeDetails;
 import io.dropwizard.lifecycle.Managed;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
@@ -39,8 +43,11 @@
 
 import javax.inject.Inject;
 import javax.inject.Singleton;
+import java.util.ArrayList;
 import java.util.List;
 
+import static com.graphhopper.util.Parameters.DETAILS.*;
+
 @Singleton
 public class GraphHopperManaged implements Managed {
 
@@ -69,26 +76,45 @@ public FlagEncoder createFlagEncoder(String name, PMap configuration) {
             public List<PathDetailsBuilder> createPathDetailsBuilders(List<String> requestedPathDetails, FlagEncoder encoder, Weighting weighting) {
                 // request-scoped
                 OriginalDirectionFlagEncoder originalDirectionFlagEncoder = (OriginalDirectionFlagEncoder) graphHopper.getGraphHopperStorage().getEncodingManager().getEncoder("original-direction");
-                List<PathDetailsBuilder> pathDetailsBuilders = super.createPathDetailsBuilders(requestedPathDetails, encoder, weighting);
-                pathDetailsBuilders.add(new AbstractPathDetailsBuilder("r5_edge_id") {
-                    private int edgeId = -1;
-
-                    @Override
-                    public boolean isEdgeDifferentToLastEdge(EdgeIteratorState edge) {
-                        int newEdgeId = edge.getEdge() * 2 + (originalDirectionFlagEncoder.isOriginalDirection(edge.getFlags()) ? 0 : 1);
-                        if (newEdgeId != edgeId) {
-                            edgeId = newEdgeId;
-                            return true;
+                List<PathDetailsBuilder> builders = new ArrayList<>();
+                if (requestedPathDetails.contains(AVERAGE_SPEED))
+                    builders.add(new AverageSpeedDetails(encoder));
+
+                if (requestedPathDetails.contains(STREET_NAME))
+                    builders.add(new StreetNameDetails());
+
+                if (requestedPathDetails.contains(EDGE_ID))
+                    builders.add(new EdgeIdDetails());
+
+                if (requestedPathDetails.contains(TIME))
+                    builders.add(new TimeDetails(weighting));
+
+                if (requestedPathDetails.contains("r5_edge_id")) {
+                    builders.add(new AbstractPathDetailsBuilder("r5_edge_id") {
+                        private int edgeId = -1;
+
+                        @Override
+                        public boolean isEdgeDifferentToLastEdge(EdgeIteratorState edge) {
+                            int newEdgeId = edge.getEdge() * 2 + (originalDirectionFlagEncoder.isOriginalDirection(edge.getFlags()) ? 0 : 1);
+                            if (newEdgeId != edgeId) {
+                                edgeId = newEdgeId;
+                                return true;
+                            }
+                            return false;
                         }
-                        return false;
-                    }
-
-                    @Override
-                    public Object getCurrentValue() {
-                        return this.edgeId;
-                    }
-                });
-                return pathDetailsBuilders;
+
+                        @Override
+                        public Object getCurrentValue() {
+                            return this.edgeId;
+                        }
+                    });
+                }
+
+                if (requestedPathDetails.size() != builders.size()) {
+                    throw new IllegalArgumentException("You requested the details " + requestedPathDetails + " but we could only find " + builders);
+                }
+
+                return builders;
             }
         });
     }
