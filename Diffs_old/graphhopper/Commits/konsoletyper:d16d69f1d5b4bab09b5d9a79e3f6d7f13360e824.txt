diff --git a/graphhopper-teavm/pom.xml b/graphhopper-teavm/pom.xml
index f0f2c517d9..9ade59b0ce 100644
--- a/graphhopper-teavm/pom.xml
+++ b/graphhopper-teavm/pom.xml
@@ -83,44 +83,44 @@
             </goals>
             <phase>process-classes</phase>
             <configuration>
-              <minifying>false</minifying>
+              <minifying>true</minifying>
               <targetDirectory>${project.build.directory}</targetDirectory>
               <runtime>MERGED</runtime>
               <targetFileName>graphhopper-client-0.3.min.js</targetFileName>
               <classAliases>
                 <item>
                   <alias>ClientSideGraphHopper</alias>
-                  <className>com.graphhopper.teavm.ClientSideGraphHopper</className>
+                  <className>com.graphhopper.teavm.ClientSideGraphHopperBridge</className>
                 </item>
               </classAliases>
               <methodAliases>
                 <item>
-                  <className>com.graphhopper.teavm.ClientSideGraphHopper</className>
+                  <className>com.graphhopper.teavm.ClientSideGraphHopperBridge</className>
                   <methodName>createInstance</methodName>
-                  <descriptor>()Lcom.graphhopper.teavm.ClientSideGraphHopper;</descriptor>
+                  <descriptor>()Lcom.graphhopper.teavm.ClientSideGraphHopperAPI;</descriptor>
                 </item>
                 <item>
-                  <className>com.graphhopper.teavm.ClientSideGraphHopper</className>
+                  <className>com.graphhopper.teavm.ClientSideGraphHopperBridge</className>
                   <methodName>route</methodName>
-                  <descriptor>(II)Lcom.graphhopper.routing.Path;</descriptor>
+                  <descriptor>(II)Lcom.graphhopper.teavm.JSMap;</descriptor>
                   <types>
-                    <item>com.graphhopper.teavm.ClientSideGraphHopper</item>
+                    <item>com.graphhopper.teavm.ClientSideGraphHopperBridge</item>
                   </types>
                 </item>
                 <item>
-                  <className>com.graphhopper.teavm.ClientSideGraphHopper</className>
+                  <className>com.graphhopper.teavm.ClientSideGraphHopperBridge</className>
                   <methodName>findNode</methodName>
                   <descriptor>(DD)I</descriptor>
                   <types>
-                    <item>com.graphhopper.teavm.ClientSideGraphHopper</item>
+                    <item>com.graphhopper.teavm.ClientSideGraphHopperBridge</item>
                   </types>
                 </item>
                 <item>
-                  <className>com.graphhopper.teavm.ClientSideGraphHopper</className>
+                  <className>com.graphhopper.teavm.ClientSideGraphHopperBridge</className>
                   <methodName>load</methodName>
                   <descriptor>(Lorg.teavm.jso.JSArray;)V</descriptor>
                   <types>
-                    <item>com.graphhopper.teavm.ClientSideGraphHopper</item>
+                    <item>com.graphhopper.teavm.ClientSideGraphHopperBridge</item>
                   </types>
                 </item>
               </methodAliases>
diff --git a/graphhopper-teavm/src/main/java/com/graphhopper/teavm/ClientSideGraphHopper.java b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/ClientSideGraphHopper.java
index 3cc62b7c4e..aeb37ed18f 100644
--- a/graphhopper-teavm/src/main/java/com/graphhopper/teavm/ClientSideGraphHopper.java
+++ b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/ClientSideGraphHopper.java
@@ -2,7 +2,6 @@
 
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
-import org.teavm.javascript.ni.PreserveOriginalName;
 import org.teavm.jso.JS;
 import org.teavm.jso.JSArray;
 import com.graphhopper.routing.AStarBidirection;
@@ -29,7 +28,7 @@
     private Weighting weighting;
     private PrepareContractionHierarchies prepare;
 
-    @PreserveOriginalName
+
     public void load(JSArray<DataEntry> data) {
         if (logger.isInfoEnabled()) {
             logger.info("Loading GraphHopper directory");
@@ -61,7 +60,6 @@ public void load(JSArray<DataEntry> data) {
         }
     }
 
-    @PreserveOriginalName
     public BBox getBounds() {
         return graph.getBounds();
     }
@@ -87,7 +85,6 @@ private void loadStorage(JSArray<DataEntry> data) {
         }
     }
 
-    @PreserveOriginalName
     public int findNode(double lat, double lng) {
         long start = System.currentTimeMillis();
         int result = locationIndex.findID(lat, lng);
@@ -97,7 +94,6 @@ public int findNode(double lat, double lng) {
         return result;
     }
 
-    @PreserveOriginalName
     public Path route(int from, int to) {
         long start = System.currentTimeMillis();
         AStarBidirection algo = prepare.createAStar();
@@ -108,9 +104,4 @@ public Path route(int from, int to) {
         }
         return path;
     }
-
-    @PreserveOriginalName
-    public static ClientSideGraphHopper createInstance() {
-        return new ClientSideGraphHopper();
-    }
 }
diff --git a/graphhopper-teavm/src/main/java/com/graphhopper/teavm/ClientSideGraphHopperAPI.java b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/ClientSideGraphHopperAPI.java
new file mode 100644
index 0000000000..b84d98fc60
--- /dev/null
+++ b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/ClientSideGraphHopperAPI.java
@@ -0,0 +1,18 @@
+package com.graphhopper.teavm;
+
+import org.teavm.jso.JSArray;
+import org.teavm.jso.JSObject;
+
+/**
+ *
+ * @author Alexey Andreev
+ */
+public interface ClientSideGraphHopperAPI extends JSObject {
+    void load(JSArray<DataEntry> data);
+
+    JSMap<JSObject> getBounds();
+
+    int findNode(double lat, double lng);
+
+    JSMap<JSObject> route(int from, int to);
+}
diff --git a/graphhopper-teavm/src/main/java/com/graphhopper/teavm/ClientSideGraphHopperBridge.java b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/ClientSideGraphHopperBridge.java
new file mode 100644
index 0000000000..ce38484b13
--- /dev/null
+++ b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/ClientSideGraphHopperBridge.java
@@ -0,0 +1,73 @@
+package com.graphhopper.teavm;
+
+import org.teavm.javascript.ni.PreserveOriginalName;
+import org.teavm.jso.*;
+import com.graphhopper.routing.Path;
+import com.graphhopper.util.Instruction;
+
+/**
+ *
+ * @author Alexey Andreev
+ */
+class ClientSideGraphHopperBridge implements ClientSideGraphHopperAPI {
+    private ClientSideGraphHopper graphHopper = new ClientSideGraphHopper();
+
+    @Override
+    public void load(JSArray<DataEntry> data) {
+        graphHopper.load(data);
+    }
+
+    @Override
+    public JSMap<JSObject> getBounds() {
+        JSAccess access = (JSAccess)JS.getGlobal();
+        JSMap<JSObject> result = access.newMap();
+        result.put("minLat", JS.wrap(graphHopper.getBounds().minLat));
+        result.put("minLon", JS.wrap(graphHopper.getBounds().minLon));
+        result.put("maxLat", JS.wrap(graphHopper.getBounds().maxLat));
+        result.put("maxLon", JS.wrap(graphHopper.getBounds().maxLon));
+        return result;
+    }
+
+    @Override
+    public int findNode(double lat, double lng) {
+        return graphHopper.findNode(lat, lng);
+    }
+
+    @Override
+    public JSMap<JSObject> route(int from, int to) {
+        Path path = graphHopper.route(from, to);
+        JSAccess access = (JSAccess)JS.getGlobal();
+        JSMap<JSObject> result = access.newMap();
+        JSArray<JSObject> resultInsnList = access.newArray();
+        for (Instruction insn : path.calcInstructions()) {
+            JSMap<JSObject> resultInsn = access.newMap();
+            resultInsn.put("sign", JS.wrap(insn.getSign()));
+            resultInsn.put("name", JS.wrap(insn.getName()));
+            resultInsn.put("wayType", JS.wrap(insn.getWayType()));
+            resultInsn.put("pavementType", JS.wrap(insn.getPavementType()));
+            resultInsn.put("distance", JS.wrap(insn.getDistance()));
+            resultInsn.put("time", JS.wrap(insn.getTime()));
+            JSArray<JSObject> resultPoints = access.newArray();
+            for (int i = 0; i < insn.getPoints().size(); ++i) {
+                JSMap<JSObject> resultPoint = access.newMap();
+                resultPoint.put("lat", JS.wrap(insn.getPoints().getLat(i)));
+                resultPoint.put("lon", JS.wrap(insn.getPoints().getLon(i)));
+                resultPoints.push(resultPoint);
+            }
+            resultInsn.put("points", resultPoints);
+            resultInsnList.push(resultInsn);
+        }
+        result.put("instructions", resultInsnList);
+        return result;
+    }
+
+    interface JSAccess extends JSGlobal {
+        @JSConstructor("Object")
+        JSMap<JSObject> newMap();
+    }
+
+    @PreserveOriginalName
+    public static ClientSideGraphHopperAPI createInstance() {
+        return new ClientSideGraphHopperBridge();
+    }
+}
