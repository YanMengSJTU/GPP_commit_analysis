diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByNationalCycleRoute.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByNationalCycleRoute.java
index 4fd72f9899..85f5527f2f 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByNationalCycleRoute.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByNationalCycleRoute.java
@@ -15,6 +15,9 @@
 
     @Override
     protected void applyAttributes(Way way) {
+        // Assign value to use for priority
+        way.setTag("network", "ncn");
+
         way.setTag("bicycle", "yes");
         way.setTag("foot", "yes");
     }
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByOtherCycleRoute.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByOtherCycleRoute.java
index 032f8d1edd..ab453aaba4 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByOtherCycleRoute.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByOtherCycleRoute.java
@@ -17,6 +17,10 @@
 
     @Override
     protected void applyAttributes(Way way) {
+        // Assign value to use for priority. Could be local or regional but we
+        // are chosing local cycle network
+        way.setTag("network", "lcn");
+
         way.setTag("bicycle", "yes");
         way.setTag("foot", "yes");
     }
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByRecreationalRoute.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByRecreationalRoute.java
index 1a6e970161..37001354f0 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByRecreationalRoute.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByRecreationalRoute.java
@@ -16,6 +16,8 @@
 
     @Override
     protected void applyAttributes(Way way) {
+        // Assign value to use for priority
+        way.setTag("network", "lwn");
         way.setTag("foot", "yes");
     }
 
diff --git a/core/src/main/java/com/graphhopper/routing/util/FootFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/FootFlagEncoder.java
index 90508b7e50..0ad02dd6f2 100644
--- a/core/src/main/java/com/graphhopper/routing/util/FootFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/FootFlagEncoder.java
@@ -1,10 +1,10 @@
 /*
  *  Licensed to GraphHopper and Peter Karich under one or more contributor
- *  license agreements. See the NOTICE file distributed with this work for 
+ *  license agreements. See the NOTICE file distributed with this work for
  *  additional information regarding copyright ownership.
  *
- *  GraphHopper licenses this file to you under the Apache License, 
- *  Version 2.0 (the "License"); you may not use this file except in 
+ *  GraphHopper licenses this file to you under the Apache License,
+ *  Version 2.0 (the "License"); you may not use this file except in
  *  compliance with the License. You may obtain a copy of the License at
  *
  *       http://www.apache.org/licenses/LICENSE-2.0
@@ -17,9 +17,20 @@
  */
 package com.graphhopper.routing.util;
 
-import static com.graphhopper.routing.util.PriorityCode.*;
-
-import java.util.*;
+import static com.graphhopper.routing.util.PriorityCode.AVOID_AT_ALL_COSTS;
+import static com.graphhopper.routing.util.PriorityCode.AVOID_IF_POSSIBLE;
+import static com.graphhopper.routing.util.PriorityCode.BEST;
+import static com.graphhopper.routing.util.PriorityCode.PREFER;
+import static com.graphhopper.routing.util.PriorityCode.REACH_DEST;
+import static com.graphhopper.routing.util.PriorityCode.UNCHANGED;
+import static com.graphhopper.routing.util.PriorityCode.VERY_NICE;
+
+import java.util.Arrays;
+import java.util.HashMap;
+import java.util.HashSet;
+import java.util.Map;
+import java.util.Set;
+import java.util.TreeMap;
 
 import com.graphhopper.reader.Relation;
 import com.graphhopper.reader.Way;
@@ -27,12 +38,12 @@
 /**
  * Defines bit layout for pedestrians (speed, access, surface, ...).
  * <p>
+ * 
  * @author Peter Karich
  * @author Nop
  * @author Karl HÃ¼bner
  */
-public class FootFlagEncoder extends AbstractFlagEncoder
-{
+public class FootFlagEncoder extends AbstractFlagEncoder {
     static final int SLOW_SPEED = 2;
     static final int MEAN_SPEED = 5;
     static final int FERRY_SPEED = 10;
@@ -48,20 +59,16 @@
     /**
      * Should be only instantiated via EncodingManager
      */
-    public FootFlagEncoder()
-    {
+    public FootFlagEncoder() {
         this(4, 1);
     }
 
-    public FootFlagEncoder( String propertiesStr )
-    {
-        this((int) parseLong(propertiesStr, "speedBits", 4),
-                parseDouble(propertiesStr, "speedFactor", 1));
+    public FootFlagEncoder(String propertiesStr) {
+        this((int) parseLong(propertiesStr, "speedBits", 4), parseDouble(propertiesStr, "speedFactor", 1));
         this.setBlockFords(parseBoolean(propertiesStr, "blockFords", true));
     }
 
-    public FootFlagEncoder( int speedBits, double speedFactor )
-    {
+    public FootFlagEncoder(int speedBits, double speedFactor) {
         super(speedBits, speedFactor, 0);
         restrictions.addAll(Arrays.asList("foot", "access"));
         restrictedValues.add("private");
@@ -100,7 +107,7 @@ public FootFlagEncoder( int speedBits, double speedFactor )
         avoidHighwayTags.add("tertiary");
         avoidHighwayTags.add("tertiary_link");
         // for now no explicit avoiding #257
-        //avoidHighwayTags.add("cycleway"); 
+        // avoidHighwayTags.add("cycleway");
 
         allowedHighwayTags.addAll(safeHighwayTags);
         allowedHighwayTags.addAll(avoidHighwayTags);
@@ -110,19 +117,22 @@ public FootFlagEncoder( int speedBits, double speedFactor )
         allowedHighwayTags.add("unclassified");
         allowedHighwayTags.add("road");
         // disallowed in some countries
-        //allowedHighwayTags.add("bridleway");
+        // allowedHighwayTags.add("bridleway");
 
+        // International Walking Network
         hikingNetworkToCode.put("iwn", BEST.getValue());
+        // National Walking Network
         hikingNetworkToCode.put("nwn", BEST.getValue());
+        // Regional Walking Network
         hikingNetworkToCode.put("rwn", VERY_NICE.getValue());
+        // Local Walking Network
         hikingNetworkToCode.put("lwn", VERY_NICE.getValue());
-        
+
         maxPossibleSpeed = FERRY_SPEED;
     }
 
     @Override
-    public int defineWayBits( int index, int shift )
-    {
+    public int defineWayBits(int index, int shift) {
         // first two bits are reserved for route handling in superclass
         shift = super.defineWayBits(index, shift);
         // larger value required - ferries are faster than pedestrians
@@ -135,8 +145,7 @@ public int defineWayBits( int index, int shift )
     }
 
     @Override
-    public int defineRelationBits( int index, int shift )
-    {
+    public int defineRelationBits(int index, int shift) {
         relationCodeEncoder = new EncodedValue("RelationCode", shift, 3, 1, 0, 7);
         return shift + relationCodeEncoder.getBits();
     }
@@ -145,52 +154,48 @@ public int defineRelationBits( int index, int shift )
      * Foot flag encoder does not provide any turn cost / restrictions
      */
     @Override
-    public int defineTurnBits( int index, int shift )
-    {
+    public int defineTurnBits(int index, int shift) {
         return shift;
     }
 
     /**
      * Foot flag encoder does not provide any turn cost / restrictions
      * <p>
+     * 
      * @return <code>false</code>
      */
     @Override
-    public boolean isTurnRestricted( long flag )
-    {
+    public boolean isTurnRestricted(long flag) {
         return false;
     }
 
     /**
      * Foot flag encoder does not provide any turn cost / restrictions
      * <p>
+     * 
      * @return 0
      */
     @Override
-    public double getTurnCost( long flag )
-    {
+    public double getTurnCost(long flag) {
         return 0;
     }
 
     @Override
-    public long getTurnFlags( boolean restricted, double costs )
-    {
+    public long getTurnFlags(boolean restricted, double costs) {
         return 0;
     }
 
     /**
      * Some ways are okay but not separate for pedestrians.
      * <p/>
+     * 
      * @param way
      */
     @Override
-    public long acceptWay( Way way )
-    {
+    public long acceptWay(Way way) {
         String highwayValue = way.getTag("highway");
-        if (highwayValue == null)
-        {
-            if (way.hasTag("route", ferries))
-            {
+        if (highwayValue == null) {
+            if (way.hasTag("route", ferries)) {
                 String footTag = way.getTag("foot");
                 if (footTag == null || "yes".equals(footTag))
                     return acceptBit | ferryBit;
@@ -204,11 +209,11 @@ public long acceptWay( Way way )
         }
 
         String sacScale = way.getTag("sac_scale");
-        if (sacScale != null)
-        {
+        if (sacScale != null) {
             if (!"hiking".equals(sacScale) && !"mountain_hiking".equals(sacScale)
                     && !"demanding_mountain_hiking".equals(sacScale) && !"alpine_hiking".equals(sacScale))
-                // other scales are too dangerous, see http://wiki.openstreetmap.org/wiki/Key:sac_scale
+                // other scales are too dangerous, see
+                // http://wiki.openstreetmap.org/wiki/Key:sac_scale
                 return 0;
         }
 
@@ -241,16 +246,13 @@ public long acceptWay( Way way )
     }
 
     @Override
-    public long handleRelationTags( Relation relation, long oldRelationFlags )
-    {
+    public long handleRelationTags(Relation relation, long oldRelationFlags) {
         int code = 0;
-        if (relation.hasTag("route", "hiking") || relation.hasTag("route", "foot"))
-        {
+        if (relation.hasTag("route", "hiking") || relation.hasTag("route", "foot")) {
             Integer val = hikingNetworkToCode.get(relation.getTag("network"));
             if (val != null)
                 code = val;
-        } else if (relation.hasTag("route", "ferry"))
-        {
+        } else if (relation.hasTag("route", "ferry")) {
             code = PriorityCode.AVOID_IF_POSSIBLE.getValue();
         }
 
@@ -261,23 +263,19 @@ public long handleRelationTags( Relation relation, long oldRelationFlags )
     }
 
     @Override
-    public long handleWayTags( Way way, long allowed, long relationFlags )
-    {
+    public long handleWayTags(Way way, long allowed, long relationFlags) {
         if (!isAccept(allowed))
             return 0;
 
         long encoded;
-        if (!isFerry(allowed))
-        {
+        if (!isFerry(allowed)) {
             String sacScale = way.getTag("sac_scale");
-            if (sacScale != null)
-            {
+            if (sacScale != null) {
                 if ("hiking".equals(sacScale))
                     encoded = speedEncoder.setDoubleValue(0, MEAN_SPEED);
                 else
                     encoded = speedEncoder.setDoubleValue(0, SLOW_SPEED);
-            } else
-            {
+            } else {
                 encoded = speedEncoder.setDoubleValue(0, MEAN_SPEED);
             }
             encoded |= directionBitMask;
@@ -289,63 +287,54 @@ public long handleWayTags( Way way, long allowed, long relationFlags )
             encoded = setLong(encoded, PriorityWeighting.KEY, handlePriority(way, priorityFromRelation));
 
             boolean isRoundabout = way.hasTag("junction", "roundabout");
-            if (isRoundabout)
-            {
+            if (isRoundabout) {
                 encoded = setBool(encoded, K_ROUNDABOUT, true);
             }
 
-        } else
-        {
+        } else {
             encoded = handleFerryTags(way, SLOW_SPEED, MEAN_SPEED, FERRY_SPEED);
             encoded |= directionBitMask;
         }
         long anno = super.handleWayTagsDecorators(way);
-        
-        return encoded|= anno;
+
+        return encoded |= anno;
     }
 
     @Override
-    public double getDouble( long flags, int key )
-    {
-        switch (key)
-        {
-            case PriorityWeighting.KEY:
-                double prio = preferWayEncoder.getValue(flags);
-                if (prio == 0)
-                    return (double) UNCHANGED.getValue() / BEST.getValue();
-
-                return prio / BEST.getValue();
-            default:
-                return super.getDouble(flags, key);
+    public double getDouble(long flags, int key) {
+        switch (key) {
+        case PriorityWeighting.KEY:
+            double prio = preferWayEncoder.getValue(flags);
+            if (prio == 0)
+                return (double) UNCHANGED.getValue() / BEST.getValue();
+
+            return prio / BEST.getValue();
+        default:
+            return super.getDouble(flags, key);
         }
     }
 
     @Override
-    public long getLong( long flags, int key )
-    {
-        switch (key)
-        {
-            case PriorityWeighting.KEY:
-                return preferWayEncoder.getValue(flags);
-            default:
-                return super.getLong(flags, key);
+    public long getLong(long flags, int key) {
+        switch (key) {
+        case PriorityWeighting.KEY:
+            return preferWayEncoder.getValue(flags);
+        default:
+            return super.getLong(flags, key);
         }
     }
 
     @Override
-    public long setLong( long flags, int key, long value )
-    {
-        switch (key)
-        {
-            case PriorityWeighting.KEY:
-                return preferWayEncoder.setValue(flags, value);
-            default:
-                return super.setLong(flags, key, value);
+    public long setLong(long flags, int key, long value) {
+        switch (key) {
+        case PriorityWeighting.KEY:
+            return preferWayEncoder.setValue(flags, value);
+        default:
+            return super.setLong(flags, key, value);
         }
     }
 
-    protected int handlePriority( Way way, int priorityFromRelation )
-    {
+    protected int handlePriority(Way way, int priorityFromRelation) {
         TreeMap<Double, Integer> weightToPrioMap = new TreeMap<Double, Integer>();
         if (priorityFromRelation == 0)
             weightToPrioMap.put(0d, UNCHANGED.getValue());
@@ -359,35 +348,32 @@ protected int handlePriority( Way way, int priorityFromRelation )
     }
 
     /**
-     * @param weightToPrioMap associate a weight with every priority. This sorted map allows
-     * subclasses to 'insert' more important priorities as well as overwrite determined priorities.
+     * @param weightToPrioMap
+     *            associate a weight with every priority. This sorted map allows
+     *            subclasses to 'insert' more important priorities as well as
+     *            overwrite determined priorities.
      */
-    void collect( Way way, TreeMap<Double, Integer> weightToPrioMap )
-    {
+    void collect(Way way, TreeMap<Double, Integer> weightToPrioMap) {
         String highway = way.getTag("highway");
         if (way.hasTag("foot", "designated"))
             weightToPrioMap.put(100d, PREFER.getValue());
 
         double maxSpeed = getMaxSpeed(way);
-        if (safeHighwayTags.contains(highway) || maxSpeed > 0 && maxSpeed <= 20)
-        {
+        if (safeHighwayTags.contains(highway) || maxSpeed > 0 && maxSpeed <= 20) {
             weightToPrioMap.put(40d, PREFER.getValue());
             if (way.hasTag("tunnel", intendedValues))
                 weightToPrioMap.put(40d, UNCHANGED.getValue());
         }
 
-        if (way.hasTag("bicycle", "official") || way.hasTag("bicycle", "designated"))
-        {
+        if (way.hasTag("bicycle", "official") || way.hasTag("bicycle", "designated")) {
             weightToPrioMap.put(44d, AVOID_IF_POSSIBLE.getValue());
         }
 
-        if (way.hasTag("sidewalk", sidewalks))
-        {
+        if (way.hasTag("sidewalk", sidewalks)) {
             weightToPrioMap.put(45d, PREFER.getValue());
         }
 
-        if (avoidHighwayTags.contains(highway) || maxSpeed > 50)
-        {
+        if (avoidHighwayTags.contains(highway) || maxSpeed > 50) {
             weightToPrioMap.put(50d, REACH_DEST.getValue());
 
             if (way.hasTag("tunnel", intendedValues))
@@ -396,8 +382,7 @@ void collect( Way way, TreeMap<Double, Integer> weightToPrioMap )
     }
 
     @Override
-    public boolean supports( Class<?> feature )
-    {
+    public boolean supports(Class<?> feature) {
         if (super.supports(feature))
             return true;
 
@@ -405,8 +390,7 @@ public boolean supports( Class<?> feature )
     }
 
     @Override
-    public String toString()
-    {
+    public String toString() {
         return "foot";
     }
 }
diff --git a/core/src/main/java/com/graphhopper/routing/util/MountainBikeFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/MountainBikeFlagEncoder.java
index da8fbc756d..a9e7ffc028 100644
--- a/core/src/main/java/com/graphhopper/routing/util/MountainBikeFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/MountainBikeFlagEncoder.java
@@ -1,10 +1,10 @@
 /*
  *  Licensed to GraphHopper and Peter Karich under one or more contributor
- *  license agreements. See the NOTICE file distributed with this work for 
+ *  license agreements. See the NOTICE file distributed with this work for
  *  additional information regarding copyright ownership.
  *
- *  GraphHopper licenses this file to you under the Apache License, 
- *  Version 2.0 (the "License"); you may not use this file except in 
+ *  GraphHopper licenses this file to you under the Apache License,
+ *  Version 2.0 (the "License"); you may not use this file except in
  *  compliance with the License. You may obtain a copy of the License at
  *
  *       http://www.apache.org/licenses/LICENSE-2.0
@@ -17,8 +17,6 @@
  */
 package com.graphhopper.routing.util;
 
-import static com.graphhopper.routing.util.BikeCommonFlagEncoder.PUSHING_SECTION_SPEED;
-
 import static com.graphhopper.routing.util.PriorityCode.BEST;
 import static com.graphhopper.routing.util.PriorityCode.PREFER;
 import static com.graphhopper.routing.util.PriorityCode.UNCHANGED;
@@ -26,41 +24,34 @@
 
 import java.util.TreeMap;
 
-import com.graphhopper.reader.OSMRelation;
-import com.graphhopper.reader.OSMWay;
-
 import com.graphhopper.reader.Relation;
 import com.graphhopper.reader.Way;
 
 /**
  * Specifies the settings for mountain biking
  * <p/>
+ * 
  * @author ratrun
  * @author Peter Karich
  */
-public class MountainBikeFlagEncoder extends BikeCommonFlagEncoder
-{
-    public MountainBikeFlagEncoder()
-    {
+public class MountainBikeFlagEncoder extends BikeCommonFlagEncoder {
+    public MountainBikeFlagEncoder() {
         this(4, 2, 0);
     }
 
-    public MountainBikeFlagEncoder( String propertiesStr )
-    {
-        this((int) parseLong(propertiesStr, "speedBits", 4),
-                parseDouble(propertiesStr, "speedFactor", 2),
+    public MountainBikeFlagEncoder(String propertiesStr) {
+        this((int) parseLong(propertiesStr, "speedBits", 4), parseDouble(propertiesStr, "speedFactor", 2),
                 parseBoolean(propertiesStr, "turnCosts", false) ? 3 : 0);
         this.setBlockFords(parseBoolean(propertiesStr, "blockFords", true));
     }
 
-    public MountainBikeFlagEncoder( int speedBits, double speedFactor, int maxTurnCosts )
-    {
+    public MountainBikeFlagEncoder(int speedBits, double speedFactor, int maxTurnCosts) {
         super(speedBits, speedFactor, maxTurnCosts);
         setTrackTypeSpeed("grade1", 18); // paved
         setTrackTypeSpeed("grade2", 16); // now unpaved ...
         setTrackTypeSpeed("grade3", 12);
         setTrackTypeSpeed("grade4", 8);
-        setTrackTypeSpeed("grade5", 6); // like sand/grass     
+        setTrackTypeSpeed("grade5", 6); // like sand/grass
 
         setSurfaceSpeed("paved", 18);
         setSurfaceSpeed("asphalt", 18);
@@ -115,10 +106,15 @@ public MountainBikeFlagEncoder( int speedBits, double speedFactor, int maxTurnCo
         addPushingSection("pedestrian");
         addPushingSection("steps");
 
+        // International Cycle Network
         setCyclingNetworkPreference("icn", PREFER.getValue());
+        // National Cycle Network
         setCyclingNetworkPreference("ncn", PREFER.getValue());
+        // Regional Cycle Network
         setCyclingNetworkPreference("rcn", PREFER.getValue());
+        // Local Cycle Network
         setCyclingNetworkPreference("lcn", PREFER.getValue());
+        // Mountain Bike
         setCyclingNetworkPreference("mtb", BEST.getValue());
 
         addPushingSection("footway");
@@ -141,13 +137,11 @@ public MountainBikeFlagEncoder( int speedBits, double speedFactor, int maxTurnCo
     }
 
     @Override
-    void collect( Way way, TreeMap<Double, Integer> weightToPrioMap )
-    {
+    void collect(Way way, TreeMap<Double, Integer> weightToPrioMap) {
         super.collect(way, weightToPrioMap);
 
         String highway = way.getTag("highway");
-        if ("track".equals(highway))
-        {
+        if ("track".equals(highway)) {
             String trackType = way.getTag("tracktype");
             if ("grade1".equals(trackType))
                 weightToPrioMap.put(50d, UNCHANGED.getValue());
@@ -159,8 +153,7 @@ else if (trackType.startsWith("grade"))
     }
 
     @Override
-    public long handleRelationTags( Relation relation, long oldRelationFlags )
-    {
+    public long handleRelationTags(Relation relation, long oldRelationFlags) {
         oldRelationFlags = super.handleRelationTags(relation, oldRelationFlags);
         int code = 0;
         if (relation.hasTag("route", "mtb"))
@@ -173,16 +166,15 @@ public long handleRelationTags( Relation relation, long oldRelationFlags )
     }
 
     @Override
-    boolean allowedSacScale( String sacScale )
-    {
-        // other scales are too dangerous even for MTB, see http://wiki.openstreetmap.org/wiki/Key:sac_scale
+    boolean allowedSacScale(String sacScale) {
+        // other scales are too dangerous even for MTB, see
+        // http://wiki.openstreetmap.org/wiki/Key:sac_scale
         return "hiking".equals(sacScale) || "mountain_hiking".equals(sacScale)
                 || "demanding_mountain_hiking".equals(sacScale) || "alpine_hiking".equals(sacScale);
     }
 
     @Override
-    public String toString()
-    {        
+    public String toString() {
         return "mtb";
     }
 }
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByNationalCycleRouteTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByNationalCycleRouteTest.java
index 07ba3b68be..bfc3991d64 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByNationalCycleRouteTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByNationalCycleRouteTest.java
@@ -30,6 +30,7 @@ public void init() {
     @Test
     public void testVisitWayAttribute() {
         visitor.visitWayAttribute("adoptedbynationalcycleroute", way);
+        verify(way).setTag("network", "ncn");
         verify(way).setTag("foot", "yes");
         verify(way).setTag("bicycle", "yes");
         verifyNoMoreInteractions(way);
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByOtherCycleRouteTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByOtherCycleRouteTest.java
index d3b7ab58e0..74b5047ae0 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByOtherCycleRouteTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByOtherCycleRouteTest.java
@@ -30,6 +30,7 @@ public void init() {
     @Test
     public void testVisitWayAttribute() {
         visitor.visitWayAttribute("adoptedbyothercycleroute", way);
+        verify(way).setTag("network", "lcn");
         verify(way).setTag("foot", "yes");
         verify(way).setTag("bicycle", "yes");
         verifyNoMoreInteractions(way);
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByRecreationalRouteTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByRecreationalRouteTest.java
index 028b915c5e..a4e664ceb9 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByRecreationalRouteTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/additionalRights/AdoptedByRecreationalRouteTest.java
@@ -30,6 +30,7 @@ public void init() {
     @Test
     public void testVisitWayAttribute() {
         visitor.visitWayAttribute("adoptedbyrecreationalroute", way);
+        verify(way).setTag("network", "lwn");
         verify(way).setTag("foot", "yes");
         verifyNoMoreInteractions(way);
     }
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/additionalRights/WithinAccessLandTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/additionalRights/WithinAccessLandTest.java
index 8374c2e21d..6b7cbdb11d 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/additionalRights/WithinAccessLandTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/additionalRights/WithinAccessLandTest.java
@@ -31,7 +31,6 @@ public void init() {
     public void testVisitWayAttribute() {
         visitor.visitWayAttribute("withinaccessland", way);
         verify(way).setTag("foot", "yes");
-        verify(way).setTag("bicycle", "yes");
         verifyNoMoreInteractions(way);
     }
 
