diff --git a/marmoset.sh b/marmoset.sh
index 828d670932..18da59f21e 100755
--- a/marmoset.sh
+++ b/marmoset.sh
@@ -22,6 +22,8 @@ if [ "$ACTION" = "clean" ]; then
     ${MAVEN} clean
 elif [ "$ACTION" = "build" ]; then
     ${MAVEN} --projects marmoset -DskipTests=true install assembly:single
+elif [ "$ACTION" = "rebuild" ]; then
+    ${MAVEN} --projects marmoset,core -DskipTests=true install assembly:single
 elif [ "$ACTION" = "run" ]; then
     ${JAVA} -ea -cp marmoset/target/marmoset-0.7-SNAPSHOT-with-dep.jar com.graphhopper.marmoset.Marmoset
 elif [ "$ACTION" = "test" ]; then
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetHopper.java b/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetHopper.java
index f07210875a..d784f2f25b 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetHopper.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetHopper.java
@@ -3,7 +3,11 @@
 import com.graphhopper.GraphHopper;
 import com.graphhopper.marmoset.util.CellsGraph;
 import com.graphhopper.marmoset.util.Location;
+import com.graphhopper.routing.util.EncodingManager;
+import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.util.CmdArgs;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import java.io.IOException;
 import java.util.*;
@@ -19,6 +23,8 @@
     private CellsGraph cellsGraph;
     private List<Vehicle> vehicles;
 
+    private static Logger logger = LoggerFactory.getLogger(MarmosetHopper.class);
+
     public MarmosetHopper() {
         hopper = new GraphHopper();
         vehicles = new ArrayList<>();
@@ -44,7 +50,23 @@ public void init()
 
         double cellSize = args.getDouble("marmoset.cellsize", 10.0);
         cellsGraph = new CellsGraph(hopper.getGraphHopperStorage().getBaseGraph(), cellSize);
-        cellsGraph.init();
+        cellsGraph.init(getFlagEncoder());
+    }
+
+    public FlagEncoder getFlagEncoder()
+    {
+        EncodingManager em = hopper.getEncodingManager();
+        List<FlagEncoder> encoders = em.fetchEdgeEncoders();
+        if (encoders.size() <= 0)
+        {
+            logger.error("No flag encoders found!");
+            return null;
+        }
+
+        if (encoders.size() > 1)
+            logger.warn("Multiple encoders found - using the first (" + encoders.get(0).toString() + ")");
+
+        return encoders.get(0);
     }
 
     private Random latRan = new Random(123);
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/util/CellsGraph.java b/marmoset/src/main/java/com/graphhopper/marmoset/util/CellsGraph.java
index 1c01773f38..53856c0d6e 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/util/CellsGraph.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/util/CellsGraph.java
@@ -1,6 +1,7 @@
 package com.graphhopper.marmoset.util;
 
 import com.graphhopper.routing.util.AllEdgesIterator;
+import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.storage.Graph;
 
 /**
@@ -10,20 +11,28 @@
     private final double cellSize;
     private Graph graph;
     private boolean[][] cells;
+    private boolean[][] reverseCells;
 
     public CellsGraph(Graph graph, double cellSize) {
         this.cellSize = cellSize;
         this.graph = graph;
+
     }
 
-    public void init()
+    public void init(FlagEncoder fe)
     {
         AllEdgesIterator iterator = graph.getAllEdges();
         cells = new boolean[iterator.getMaxId()][];
+        reverseCells = new boolean[iterator.getMaxId()][];
         while (iterator.next())
         {
             int cellCount = Math.max(1, (int) (iterator.getDistance() / cellSize));
-            cells[iterator.getEdge()] = new boolean[cellCount];
+
+            if (fe.isForward(iterator.getFlags()))
+                cells[iterator.getEdge()] = new boolean[cellCount];
+
+            if (fe.isBackward(iterator.getFlags()))
+                reverseCells[iterator.getEdge()] = new boolean[cellCount];
         }
     }
 
