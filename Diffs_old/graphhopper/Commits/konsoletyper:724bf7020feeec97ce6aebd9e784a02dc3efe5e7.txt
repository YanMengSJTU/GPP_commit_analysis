diff --git a/graphhopper-teavm/pom.xml b/graphhopper-teavm/pom.xml
index d8be55713a..8db374961c 100644
--- a/graphhopper-teavm/pom.xml
+++ b/graphhopper-teavm/pom.xml
@@ -44,6 +44,11 @@
       <artifactId>teavm-jso</artifactId>
       <version>0.2-SNAPSHOT</version>
     </dependency>
+    <dependency>
+      <groupId>org.teavm</groupId>
+      <artifactId>teavm-dom</artifactId>
+      <version>0.2-SNAPSHOT</version>
+    </dependency>
   </dependencies>
 
   <build>
diff --git a/graphhopper-teavm/src/main/java/com/graphhopper/teavm/ClientSideGraphHopper.java b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/ClientSideGraphHopper.java
new file mode 100644
index 0000000000..8305f867af
--- /dev/null
+++ b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/ClientSideGraphHopper.java
@@ -0,0 +1,101 @@
+package com.graphhopper.teavm;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+import org.teavm.jso.JS;
+import org.teavm.jso.JSArray;
+import com.graphhopper.routing.DijkstraBidirection;
+import com.graphhopper.routing.Path;
+import com.graphhopper.routing.util.*;
+import com.graphhopper.storage.DataAccess;
+import com.graphhopper.storage.GraphHopperStorage;
+import com.graphhopper.storage.index.LocationIndexTree;
+import com.graphhopper.util.shapes.BBox;
+
+/**
+ *
+ * @author Alexey Andreev
+ */
+public class ClientSideGraphHopper {
+    private static final Logger logger = LoggerFactory.getLogger(ClientSideGraphHopper.class);
+    private InMemoryDirectory directory = new InMemoryDirectory();
+    private GraphHopperStorage graph;
+    private EncodingManager encodingManager;
+    private LocationIndexTree locationIndex;
+    private FlagEncoder encoder;
+    private Weighting weighting;
+
+    public void load(JSArray<DataEntry> data) {
+        if (logger.isInfoEnabled()) {
+            logger.info("Loading GraphGopper directory");
+        }
+        long start = System.currentTimeMillis();
+        loadStorage(data);
+        if (logger.isInfoEnabled()) {
+            logger.info("GraphHopper directory loaded in {}ms", System.currentTimeMillis() - start);
+        }
+
+        if (logger.isInfoEnabled()) {
+            logger.info("Initializing GraphHopper");
+        }
+        start = System.currentTimeMillis();
+        encodingManager = new EncodingManager(new CarFlagEncoder());
+        graph = new GraphHopperStorage(directory, encodingManager, true);
+        encoder = encodingManager.getSingle();
+        graph.loadExisting();
+
+        locationIndex = new LocationIndexTree(graph, directory);
+        locationIndex.loadExisting();
+
+        weighting = new FastestWeighting(encodingManager.getSingle());
+
+        if (logger.isInfoEnabled()) {
+            logger.info("GraphHopper initialized in {}ms", System.currentTimeMillis() - start);
+        }
+    }
+
+    public BBox getBounds() {
+        return graph.getBounds();
+    }
+
+    private void loadStorage(JSArray<DataEntry> data) {
+        for (int i = 0; i < data.getLength(); ++i) {
+            DataEntry entry = data.get(i);
+            DataAccess file = directory.find(entry.getName());
+            file.setSegmentSize(entry.getSegmentSize());
+            file.create(entry.getLength());
+            int pos = 0;
+            for (int j = 0; j < entry.getData().getLength(); ++j) {
+                byte[] bytes = Base64.decode(JS.unwrapString(entry.getData().get(j)));
+                file.setBytes(pos, bytes, bytes.length);
+                pos += bytes.length;
+            }
+            byte[] header = Base64.decode(entry.getHeader());
+            for (int j = 0; j < 80; j += 4) {
+                int val = (header[j] & 0xFF) | ((header[j + 1] & 0xFF) << 8) | ((header[j + 2] & 0xFF) << 16) |
+                        ((header[j + 3] & 0xFF) << 24);
+                file.setHeader(j, val);
+            }
+        }
+    }
+
+    public int findNode(double lat, double lng) {
+        long start = System.currentTimeMillis();
+        int result = locationIndex.findID(lat, lng);
+        if (logger.isInfoEnabled()) {
+            logger.info("Node {} at ({};{}) found in {} ms", result, lat, lng, System.currentTimeMillis() - start);
+        }
+        return result;
+    }
+
+    public Path route(int from, int to) {
+        long start = System.currentTimeMillis();
+        DijkstraBidirection algo = new DijkstraBidirection(graph, encoder, weighting);
+        Path path = algo.calcPath(from, to);
+        if (logger.isInfoEnabled()) {
+            logger.info("Path from {} to {} found in {} ms. Distance is {}", from, to,
+                    System.currentTimeMillis() - start, path.getDistance());
+        }
+        return path;
+    }
+}
diff --git a/graphhopper-teavm/src/main/java/com/graphhopper/teavm/GraphHopperUI.java b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/GraphHopperUI.java
new file mode 100644
index 0000000000..cd222a881d
--- /dev/null
+++ b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/GraphHopperUI.java
@@ -0,0 +1,87 @@
+package com.graphhopper.teavm;
+
+import org.teavm.dom.browser.Window;
+import org.teavm.dom.core.Document;
+import org.teavm.dom.core.Element;
+import org.teavm.jso.JS;
+import org.teavm.jso.JSArray;
+import com.graphhopper.routing.Path;
+import com.graphhopper.teavm.leaflet.*;
+import com.graphhopper.util.PointList;
+import com.graphhopper.util.shapes.BBox;
+
+/**
+ *
+ * @author Alexey Andreev
+ */
+public class GraphHopperUI {
+    private static Window window = (Window)JS.getGlobal();
+    private static Document document = window.getDocument();
+    private Element element;
+    private LeafletMap map;
+    private ClientSideGraphHopper graphHopper = new ClientSideGraphHopper();
+    private Marker firstMarker;
+    private Marker secondMarker;
+    private Polyline pathDisplay;
+
+    public GraphHopperUI() {
+        this(document.createElement("div"));
+        element.setAttribute("style", "width: 800px; height: 480px");
+    }
+
+    public GraphHopperUI(String elementId) {
+        this(document.getElementById(elementId));
+    }
+
+    public GraphHopperUI(Element element) {
+        this.element = element;
+        LeafletMapOptions options = Leaflet.createMapOptions();
+        map = Leaflet.map(element, options);
+        Leaflet.tileLayer("http://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png").addTo(map);
+        map.on("click", new LeafletMapEventListener() {
+            @Override public void occur(LeafletMapEvent event) {
+                click(event.getLatlng());
+            }
+        });
+    }
+
+    public void load(JSArray<DataEntry> data) {
+        graphHopper.load(data);
+        BBox bounds = graphHopper.getBounds();
+        LatLng southWest = Leaflet.latLng(bounds.minLat, bounds.minLon);
+        LatLng northEast = Leaflet.latLng(bounds.maxLat, bounds.maxLon);
+        LatLng center = Leaflet.latLng((bounds.minLat + bounds.maxLat) / 2, (bounds.minLon + bounds.maxLon) / 2);
+        map.setMaxBounds(Leaflet.latLngBounds(southWest, northEast));
+        map.setView(center, 10);
+    }
+
+    public Element getElement() {
+        return element;
+    }
+
+    private void click(LatLng latlng) {
+        if (secondMarker != null) {
+            map.removeLayer(firstMarker);
+            map.removeLayer(secondMarker);
+            map.removeLayer(pathDisplay);
+            firstMarker = Leaflet.marker(latlng).addTo(map);
+            secondMarker = null;
+            pathDisplay = null;
+        } else if (firstMarker == null) {
+            firstMarker = Leaflet.marker(latlng).addTo(map);
+        } else {
+            secondMarker = Leaflet.marker(latlng).addTo(map);
+            LatLng first = firstMarker.getLatLng();
+            LatLng second = secondMarker.getLatLng();
+            int firstNode = graphHopper.findNode(first.getLat(), first.getLng());
+            int secondNode = graphHopper.findNode(second.getLat(), second.getLng());
+            Path path = graphHopper.route(firstNode, secondNode);
+            PointList points = path.calcPoints();
+            JSArray<LatLng> array = window.newArray();
+            for (int i = 0; i < points.size(); ++i) {
+                array.push(Leaflet.latLng(points.getLat(i), points.getLon(i)));
+            }
+            pathDisplay = Leaflet.polyline(array).addTo(map);
+        }
+    }
+}
diff --git a/graphhopper-teavm/src/main/java/com/graphhopper/teavm/Main.java b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/Main.java
index 3ae81e4c5c..7ca2e07d6e 100644
--- a/graphhopper-teavm/src/main/java/com/graphhopper/teavm/Main.java
+++ b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/Main.java
@@ -1,15 +1,10 @@
 package com.graphhopper.teavm;
 
+import org.teavm.dom.browser.Window;
+import org.teavm.dom.core.Document;
+import org.teavm.dom.core.Element;
 import org.teavm.jso.JS;
 import org.teavm.jso.JSArray;
-import org.teavm.jso.JSObject;
-import com.graphhopper.routing.DijkstraBidirection;
-import com.graphhopper.routing.Path;
-import com.graphhopper.routing.util.*;
-import com.graphhopper.storage.DataAccess;
-import com.graphhopper.storage.GraphHopperStorage;
-import com.graphhopper.storage.index.LocationIndexTree;
-import com.graphhopper.util.PointList;
 
 /**
  *
@@ -17,58 +12,17 @@
  */
 public class Main {
     public static void main(String[] args) {
-        long start = System.currentTimeMillis();
-        InMemoryDirectory directory = new InMemoryDirectory();
-        readAll(directory);
-        EncodingManager encodingManager = new EncodingManager(new CarFlagEncoder());
-        GraphHopperStorage graph = new GraphHopperStorage(directory, encodingManager, true);
-        graph.loadExisting();
-        System.out.println("Data loaded in " + (System.currentTimeMillis() - start) + "ms");
-
-        start = System.currentTimeMillis();
-        FlagEncoder encoder = encodingManager.getSingle();
-
-        Weighting weighting = new FastestWeighting(encoder);
-        DijkstraBidirection algo = new DijkstraBidirection(graph, encoder, weighting);
-
-        LocationIndexTree locationIndex = new LocationIndexTree(graph, directory);
-        locationIndex.loadExisting();
-        int fromNode = locationIndex.findID(55.762523, 37.408784);
-        int toNode = locationIndex.findID(55.784806, 37.708047);
-        System.out.println("Source node: " + fromNode);
-        System.out.println("Target node: " + toNode);
-
-        Path path = algo.calcPath(fromNode, toNode);
-        PointList points = path.calcPoints();
-        for (int i = 0; i < points.size(); ++i) {
-            System.out.println(points.getLat(i) + "; " + points.getLon(i));
-        }
-        System.out.println("Distance: " + path.getDistance());
-        System.out.println("Route computed in " + (System.currentTimeMillis() - start) + "ms");
-    }
-
-    private static void readAll(InMemoryDirectory directory) {
-        JSObject global = JS.getGlobal();
+        Window window = (Window)JS.getGlobal();
+        Document document = window.getDocument();
+        Element body = document.getElementsByTagName("body").item(0);
+        Element mapElement = document.createElement("div");
+        mapElement.setAttribute("style", "width: 800px; height: 480px");
+        body.appendChild(mapElement);
+
+        GraphHopperUI ui = new GraphHopperUI(mapElement);
         @SuppressWarnings("unchecked")
-        JSArray<DataEntry> data = (JSArray<DataEntry>)JS.get(global, JS.wrap("graphhopperData"));
-        for (int i = 0; i < data.getLength(); ++i) {
-            DataEntry entry = data.get(i);
-            DataAccess file = directory.find(entry.getName());
-            file.setSegmentSize(entry.getSegmentSize());
-            file.create(entry.getLength());
-            int pos = 0;
-            for (int j = 0; j < entry.getData().getLength(); ++j) {
-                byte[] bytes = Base64.decode(JS.unwrapString(entry.getData().get(j)));
-                file.setBytes(pos, bytes, bytes.length);
-                pos += bytes.length;
-            }
-            byte[] header = Base64.decode(entry.getHeader());
-            for (int j = 0; j < 80; j += 4) {
-                int val = (header[j] & 0xFF) | ((header[j + 1] & 0xFF) << 8) | ((header[j + 2] & 0xFF) << 16) |
-                        ((header[j + 3] & 0xFF) << 24);
-                file.setHeader(j, val);
-            }
-        }
+        JSArray<DataEntry> data = (JSArray<DataEntry>)JS.get(JS.getGlobal(), JS.wrap("graphhopperData"));
+        ui.load(data);
     }
 }
 
diff --git a/graphhopper-teavm/src/main/java/com/graphhopper/teavm/leaflet/LatLng.java b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/leaflet/LatLng.java
new file mode 100644
index 0000000000..670c18a413
--- /dev/null
+++ b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/leaflet/LatLng.java
@@ -0,0 +1,27 @@
+package com.graphhopper.teavm.leaflet;
+
+import org.teavm.jso.JSObject;
+import org.teavm.jso.JSProperty;
+
+/**
+ *
+ * @author Alexey Andreev
+ */
+public interface LatLng extends JSObject {
+    @JSProperty
+    double getLat();
+
+    @JSProperty
+    double getLng();
+
+    double distanceTo(LatLng other);
+
+    boolean equals(LatLng other);
+
+    @Override
+    String toString();
+
+    LatLng wrap();
+
+    LatLng wrap(double left, double right);
+}
diff --git a/graphhopper-teavm/src/main/java/com/graphhopper/teavm/leaflet/LatLngBounds.java b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/leaflet/LatLngBounds.java
new file mode 100644
index 0000000000..66ba4052b1
--- /dev/null
+++ b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/leaflet/LatLngBounds.java
@@ -0,0 +1,11 @@
+package com.graphhopper.teavm.leaflet;
+
+import org.teavm.jso.JSObject;
+
+/**
+ *
+ * @author Alexey Andreev
+ */
+public interface LatLngBounds extends JSObject {
+
+}
diff --git a/graphhopper-teavm/src/main/java/com/graphhopper/teavm/leaflet/Layer.java b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/leaflet/Layer.java
new file mode 100644
index 0000000000..4b16fefb41
--- /dev/null
+++ b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/leaflet/Layer.java
@@ -0,0 +1,10 @@
+package com.graphhopper.teavm.leaflet;
+
+import org.teavm.jso.JSObject;
+
+/**
+ *
+ * @author Alexey Andreev
+ */
+public interface Layer extends JSObject {
+}
diff --git a/graphhopper-teavm/src/main/java/com/graphhopper/teavm/leaflet/Leaflet.java b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/leaflet/Leaflet.java
new file mode 100644
index 0000000000..c72c3de6a5
--- /dev/null
+++ b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/leaflet/Leaflet.java
@@ -0,0 +1,69 @@
+package com.graphhopper.teavm.leaflet;
+
+import org.teavm.dom.core.Element;
+import org.teavm.jso.JS;
+import org.teavm.jso.JSArray;
+import org.teavm.jso.JSObject;
+
+/**
+ *
+ * @author Alexey Andreev
+ */
+public final class Leaflet {
+    private static LeafletRoot root = (LeafletRoot)JS.getGlobal();
+
+    private Leaflet() {
+    }
+
+    private static LeafletAPI api() {
+        return (LeafletAPI)JS.get(root, JS.wrap("L"));
+    }
+
+    public static LeafletMap map(String elementId) {
+        return api().map(elementId);
+    }
+
+    public static LeafletMap map(String elementId, LeafletMapOptions options) {
+        return api().map(elementId, options);
+    }
+
+    public static LeafletMap map(Element element) {
+        return api().map(element);
+    }
+
+    public static LeafletMap map(Element element, LeafletMapOptions options) {
+        return api().map(element, options);
+    }
+
+    public static LatLng latLng(double lat, double lng) {
+        return api().latLng(lat, lng);
+    }
+
+    public static LatLngBounds latLngBounds(LatLng southWest, LatLng northEast) {
+        return api().latLngBounds(southWest, northEast);
+    }
+
+    public static Polyline polyline(JSArray<LatLng> latLngs) {
+        return api().polyline(latLngs);
+    }
+
+    public static Polyline polyline(JSArray<LatLng> latLngs, PolylineOptions options) {
+        return api().polyline(latLngs, options);
+    }
+
+    public static Marker marker(LatLng latlng) {
+        return api().marker(latlng);
+    }
+
+    public static TileLayer tileLayer(String urlTemplate) {
+        return api().tileLayer(urlTemplate);
+    }
+
+    public static LeafletMapOptions createMapOptions() {
+        return root.newMapOptions();
+    }
+
+    public static <T extends JSObject> JSArray<T> createArray() {
+        return root.newArray();
+    }
+}
diff --git a/graphhopper-teavm/src/main/java/com/graphhopper/teavm/leaflet/LeafletAPI.java b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/leaflet/LeafletAPI.java
new file mode 100644
index 0000000000..f8190b119d
--- /dev/null
+++ b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/leaflet/LeafletAPI.java
@@ -0,0 +1,31 @@
+package com.graphhopper.teavm.leaflet;
+
+import org.teavm.dom.core.Element;
+import org.teavm.jso.JSArray;
+import org.teavm.jso.JSObject;
+
+/**
+ *
+ * @author Alexey Andreev
+ */
+public interface LeafletAPI extends JSObject {
+    LeafletMap map(String elementId);
+
+    LeafletMap map(String elementId, LeafletMapOptions options);
+
+    LeafletMap map(Element element);
+
+    LeafletMap map(Element element, LeafletMapOptions options);
+
+    LatLng latLng(double lat, double lng);
+
+    LatLngBounds latLngBounds(LatLng southWest, LatLng northEast);
+
+    Polyline polyline(JSArray<LatLng> latLngs);
+
+    Polyline polyline(JSArray<LatLng> latLngs, PolylineOptions options);
+
+    Marker marker(LatLng latLng);
+
+    TileLayer tileLayer(String urlTemplate);
+}
diff --git a/graphhopper-teavm/src/main/java/com/graphhopper/teavm/leaflet/LeafletMap.java b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/leaflet/LeafletMap.java
new file mode 100644
index 0000000000..90cad01574
--- /dev/null
+++ b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/leaflet/LeafletMap.java
@@ -0,0 +1,19 @@
+package com.graphhopper.teavm.leaflet;
+
+import org.teavm.jso.JSObject;
+
+/**
+ *
+ * @author Alexey Andreev
+ */
+public interface LeafletMap extends JSObject {
+    LeafletMap setView(LatLng latlng, int zoom);
+
+    LeafletMap on(String event, LeafletMapEventListener listener);
+
+    void addLayer(Layer layer);
+
+    void removeLayer(Layer layer);
+
+    void setMaxBounds(LatLngBounds bounds);
+}
diff --git a/graphhopper-teavm/src/main/java/com/graphhopper/teavm/leaflet/LeafletMapEvent.java b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/leaflet/LeafletMapEvent.java
new file mode 100644
index 0000000000..59f4be7e8c
--- /dev/null
+++ b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/leaflet/LeafletMapEvent.java
@@ -0,0 +1,13 @@
+package com.graphhopper.teavm.leaflet;
+
+import org.teavm.jso.JSObject;
+import org.teavm.jso.JSProperty;
+
+/**
+ *
+ * @author Alexey Andreev
+ */
+public interface LeafletMapEvent extends JSObject {
+    @JSProperty
+    LatLng getLatlng();
+}
diff --git a/graphhopper-teavm/src/main/java/com/graphhopper/teavm/leaflet/LeafletMapEventListener.java b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/leaflet/LeafletMapEventListener.java
new file mode 100644
index 0000000000..6f385efbe1
--- /dev/null
+++ b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/leaflet/LeafletMapEventListener.java
@@ -0,0 +1,13 @@
+package com.graphhopper.teavm.leaflet;
+
+import org.teavm.jso.JSFunctor;
+import org.teavm.jso.JSObject;
+
+/**
+ *
+ * @author Alexey Andreev
+ */
+@JSFunctor
+public interface LeafletMapEventListener extends JSObject {
+    void occur(LeafletMapEvent event);
+}
diff --git a/graphhopper-teavm/src/main/java/com/graphhopper/teavm/leaflet/LeafletMapOptions.java b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/leaflet/LeafletMapOptions.java
new file mode 100644
index 0000000000..50480a56b8
--- /dev/null
+++ b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/leaflet/LeafletMapOptions.java
@@ -0,0 +1,34 @@
+package com.graphhopper.teavm.leaflet;
+
+import org.teavm.jso.JSObject;
+import org.teavm.jso.JSProperty;
+
+/**
+ *
+ * @author Alexey Andreev
+ */
+public interface LeafletMapOptions extends JSObject {
+    @JSProperty
+    LatLng getCenter();
+
+    @JSProperty
+    void setCenter(LatLng center);
+
+    @JSProperty
+    int getZoom();
+
+    @JSProperty
+    void setZoom(int zoom);
+
+    @JSProperty
+    int getMinZoom();
+
+    @JSProperty
+    void setMinZoom(int minZoom);
+
+    @JSProperty
+    int getMaxZoom();
+
+    @JSProperty
+    void setMaxZoom(int maxZoom);
+}
diff --git a/graphhopper-teavm/src/main/java/com/graphhopper/teavm/leaflet/LeafletPath.java b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/leaflet/LeafletPath.java
new file mode 100644
index 0000000000..93c9275e39
--- /dev/null
+++ b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/leaflet/LeafletPath.java
@@ -0,0 +1,9 @@
+package com.graphhopper.teavm.leaflet;
+
+/**
+ *
+ * @author Alexey Andreev
+ */
+public interface LeafletPath extends Layer {
+    LeafletPath addTo(LeafletMap map);
+}
diff --git a/graphhopper-teavm/src/main/java/com/graphhopper/teavm/leaflet/LeafletRoot.java b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/leaflet/LeafletRoot.java
new file mode 100644
index 0000000000..e6a89141a9
--- /dev/null
+++ b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/leaflet/LeafletRoot.java
@@ -0,0 +1,13 @@
+package com.graphhopper.teavm.leaflet;
+
+import org.teavm.jso.JSConstructor;
+import org.teavm.jso.JSGlobal;
+
+/**
+ *
+ * @author Alexey Andreev
+ */
+interface LeafletRoot extends JSGlobal {
+    @JSConstructor("Object")
+    LeafletMapOptions newMapOptions();
+}
diff --git a/graphhopper-teavm/src/main/java/com/graphhopper/teavm/leaflet/Marker.java b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/leaflet/Marker.java
new file mode 100644
index 0000000000..7cde0dc8ce
--- /dev/null
+++ b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/leaflet/Marker.java
@@ -0,0 +1,11 @@
+package com.graphhopper.teavm.leaflet;
+
+/**
+ *
+ * @author Alexey Andreev
+ */
+public interface Marker extends Layer {
+    Marker addTo(LeafletMap map);
+
+    LatLng getLatLng();
+}
diff --git a/graphhopper-teavm/src/main/java/com/graphhopper/teavm/leaflet/PathOptions.java b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/leaflet/PathOptions.java
new file mode 100644
index 0000000000..d38fc43943
--- /dev/null
+++ b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/leaflet/PathOptions.java
@@ -0,0 +1,28 @@
+package com.graphhopper.teavm.leaflet;
+
+import org.teavm.jso.JSObject;
+import org.teavm.jso.JSProperty;
+
+/**
+ *
+ * @author Alexey Andreev
+ */
+public interface PathOptions extends JSObject {
+    @JSProperty
+    String getColor();
+
+    @JSProperty
+    void setColor(String color);
+
+    @JSProperty
+    double getWeight();
+
+    @JSProperty
+    void setWeight(double weight);
+
+    @JSProperty
+    double getOpacity();
+
+    @JSProperty
+    void setOpacity(double opacity);
+}
diff --git a/graphhopper-teavm/src/main/java/com/graphhopper/teavm/leaflet/Polyline.java b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/leaflet/Polyline.java
new file mode 100644
index 0000000000..9ce8a76aa4
--- /dev/null
+++ b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/leaflet/Polyline.java
@@ -0,0 +1,10 @@
+package com.graphhopper.teavm.leaflet;
+
+/**
+ *
+ * @author Alexey Andreev
+ */
+public interface Polyline extends LeafletPath {
+    @Override
+    Polyline addTo(LeafletMap map);
+}
diff --git a/graphhopper-teavm/src/main/java/com/graphhopper/teavm/leaflet/PolylineOptions.java b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/leaflet/PolylineOptions.java
new file mode 100644
index 0000000000..2aa70310d1
--- /dev/null
+++ b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/leaflet/PolylineOptions.java
@@ -0,0 +1,21 @@
+package com.graphhopper.teavm.leaflet;
+
+import org.teavm.jso.JSProperty;
+
+/**
+ *
+ * @author Alexey Andreev
+ */
+public interface PolylineOptions extends PathOptions {
+    @JSProperty
+    double getSmoothFactor();
+
+    @JSProperty
+    void setSmoothFactor(double smoothFactor);
+
+    @JSProperty
+    boolean getNoClip();
+
+    @JSProperty
+    void setNoClip(boolean noClip);
+}
diff --git a/graphhopper-teavm/src/main/java/com/graphhopper/teavm/leaflet/TileLayer.java b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/leaflet/TileLayer.java
new file mode 100644
index 0000000000..87c7c3d3d1
--- /dev/null
+++ b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/leaflet/TileLayer.java
@@ -0,0 +1,9 @@
+package com.graphhopper.teavm.leaflet;
+
+/**
+ *
+ * @author Alexey Andreev
+ */
+public interface TileLayer extends Layer {
+    TileLayer addTo(LeafletMap map);
+}
diff --git a/graphhopper-teavm/src/main/java/com/graphhopper/teavm/slf4j/TeaVMLogger.java b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/slf4j/TeaVMLogger.java
index 011d759052..55c8c63eb0 100644
--- a/graphhopper-teavm/src/main/java/com/graphhopper/teavm/slf4j/TeaVMLogger.java
+++ b/graphhopper-teavm/src/main/java/com/graphhopper/teavm/slf4j/TeaVMLogger.java
@@ -126,7 +126,7 @@ public boolean isInfoEnabled() {
 
     private void log(String level, String format, Object... arguments) {
         StringBuffer sb = new StringBuffer();
-        sb.append('[').append(level).append(']');
+        sb.append('[').append(level).append("] ").append(name).append(": ");
         int index = 0;
         int argIndex = 0;
         while (index < format.length()) {
@@ -135,8 +135,9 @@ private void log(String level, String format, Object... arguments) {
                 break;
             }
             sb.append(format.subSequence(index, next));
-            sb.append(argIndex < arguments.length ? String.valueOf(arguments[0]) : "{}");
-            next = index + 2;
+            sb.append(argIndex < arguments.length ? String.valueOf(arguments[argIndex]) : "{}");
+            index = next + 2;
+            ++argIndex;
         }
         sb.append(format.substring(index));
         System.err.println(sb);
