diff --git a/core/src/main/java/com/graphhopper/routing/weighting/AvoidanceWeighting.java b/core/src/main/java/com/graphhopper/routing/weighting/AvoidanceWeighting.java
index eb7736c950..c11f1326e8 100644
--- a/core/src/main/java/com/graphhopper/routing/weighting/AvoidanceWeighting.java
+++ b/core/src/main/java/com/graphhopper/routing/weighting/AvoidanceWeighting.java
@@ -59,7 +59,7 @@ public AvoidanceWeighting(FlagEncoder encoder, PMap pMap, HashSet<Integer> banne
 
 
     public AvoidanceWeighting(FlagEncoder encoder) {
-        this(encoder, new PMap(0), new HashSet<>());
+        this(encoder, new PMap(0), new HashSet<Integer>());
     }
 
     @Override
diff --git a/reader-osm/src/main/java/com/graphhopper/reader/osm/parallelFastest_safety.java b/reader-osm/src/main/java/com/graphhopper/reader/osm/parallelFastest_safety.java
index 543a37252e..2682b6d9b7 100644
--- a/reader-osm/src/main/java/com/graphhopper/reader/osm/parallelFastest_safety.java
+++ b/reader-osm/src/main/java/com/graphhopper/reader/osm/parallelFastest_safety.java
@@ -33,6 +33,7 @@
     private String graphFolder = "./reader-osm/target/tmp/";
     private String inputPointsFN = "../data/intermediate/";
     private String outputPointsFN = "../data/final/impacts/";
+    private float crime_cutoff;
     private String gvfnStem = "../data/intermediate/";
     private String gctfnStem = "../geometries/";
     private ArrayList<String> gridValuesFNs = new ArrayList<>();
@@ -50,10 +51,11 @@
     private String bannedGridCellsFn;
 
 
-    public parallelFastest_safety(String city, String route_type) {
+    public parallelFastest_safety(String city, String route_type, float crime_cutoff) {
 
         this.city = city;
         this.route_type = route_type;
+        this.crime_cutoff = crime_cutoff;
         this.outputFiles = new HashMap<>();
         optimizations.add("safety");
     }
@@ -89,7 +91,7 @@ public void setDataSources() throws Exception {
             outputPointsFN = outputPointsFN + "sf_" + route_type + "_gh_routes.csv";
             gridValuesFNs.add(gvfnStem + "06075_logfractionempath_ft.csv");
             gridCTsFNs.add(gctfnStem + "06075_ct_grid.csv");
-            bannedGridCellsFn = gctfnStem + "06075_banned_grid_cells.csv";
+            bannedGridCellsFn = gctfnStem + "06075_banned_grid_cells_" + crime_cutoff + ".csv";
         } else if (city.equals("nyc")) {
             osmFile = osmFile + "new-york_new-york.osm.pbf";
             graphFolder = graphFolder + "ghosm_nyc_noch";
@@ -101,7 +103,7 @@ public void setDataSources() throws Exception {
             gridValuesFNs.add(gvfnStem + "36081_logfractionempath_ft.csv");
             gridValuesFNs.add(gvfnStem + "36085_logfractionempath_ft.csv");
             gridCTsFNs.add(gctfnStem + "nyc_ct_grid.csv");
-            bannedGridCellsFn = gctfnStem + "nyc_banned_grid_cells.csv";
+            bannedGridCellsFn = gctfnStem + "nyc_banned_grid_cells_" + crime_cutoff + ".csv";
         } else if (city.equals("bos")) {
             osmFile = osmFile + "boston_massachusetts.osm.pbf";
             graphFolder = graphFolder + "ghosm_bos_noch";
@@ -237,7 +239,7 @@ public String writeOutput(int i, String optimized, String name, String od_id, Pa
     public void setODPairs() throws Exception {
         // Prep Filewriters (Optimized, Worst-but-same-distance, Fastest, Simplest)
         for (String optimization : optimizations) {
-            outputFiles.put(optimization, new FileWriter(outputPointsFN.replaceFirst(".csv", "_" + optimization + ".csv"), true));
+            outputFiles.put(optimization, new FileWriter(outputPointsFN.replaceFirst(".csv", "_" + optimization + "_" + crime_cutoff + ".csv"), true));
         }
 
         for (FileWriter fw : outputFiles.values()) {
@@ -284,6 +286,27 @@ public float getBeauty(PathWrapper path) {
         return score;
     }
 
+    public void print_banned_edges() throws IOException {
+        // Bring in origin-destination pair for processing
+        Scanner sc_in = new Scanner(new File(inputPointsFN));
+        String line = sc_in.nextLine();
+        line = sc_in.nextLine();
+        String[] vals = line.split(",");
+        float loF = Float.valueOf(vals[1]);
+        float laF = Float.valueOf(vals[2]);
+        float loT = Float.valueOf(vals[3]);
+        float laT = Float.valueOf(vals[4]);
+
+        GHRequest req = new GHRequest(laF, loF, laT, loT).  // latFrom, lonFrom, latTo, lonTo
+                setWeighting("safest_fastest").
+                setVehicle("car").
+                setLocale(Locale.US).
+                setAlgorithm("dijkstrabi");
+
+        // print banned edges
+        hopper.route(req);
+    }
+
 
     public void process_routes() throws Exception {
 
@@ -378,17 +401,36 @@ public static void main(String[] args) throws Exception {
 
         // PBFs from: https://mapzen.com/data/metro-extracts/
 
-        String city = "nyc";  // sf, nyc, chi, lon, man, sin
+        String city = "sf";  // sf, nyc, chi, lon, man, sin
         String odtype = "grid";  // grid, rand
+        float[] crime_cutoffs = new float[5];
+        if (city.equalsIgnoreCase("nyc")) {
+            crime_cutoffs[0] = 2.7f;
+            crime_cutoffs[1] = 3.95f;
+            crime_cutoffs[2] = 4.95f;
+            crime_cutoffs[3] = 6.5f;
+            crime_cutoffs[4] = 10.5f;
+        } else if (city.equalsIgnoreCase("sf")) {
+            crime_cutoffs[0] = 4;
+            crime_cutoffs[1] = 5.5f;
+            crime_cutoffs[2] = 7.4f;
+            crime_cutoffs[3] = 15;
+            crime_cutoffs[4] = 50;
+        }
+
+
         //System.setProperty("java.util.concurrent.ForkJoinPool.common.parallelism", "12");
         //String city = args[0];
         //String odtype = args[1];
-        parallelFastest_safety ksp = new parallelFastest_safety(city, odtype);
-
-        ksp.setDataSources();
-        ksp.getGridValues();
-        ksp.prepareGraphHopper();
-        ksp.setODPairs();
-        ksp.process_routes();  // get Graphhopper routes
+        for (int i=0; i < crime_cutoffs.length; i++) {
+            System.out.println(i);
+            parallelFastest_safety ksp = new parallelFastest_safety(city, odtype, crime_cutoffs[i]);
+            ksp.setDataSources();
+            ksp.getGridValues();
+            ksp.prepareGraphHopper();
+            ksp.print_banned_edges();
+//            ksp.setODPairs();
+//            ksp.process_routes();  // get Graphhopper routes
+        }
     }
 }
