diff --git a/web/src/main/java/com/graphhopper/http/GHServletModule.java b/web/src/main/java/com/graphhopper/http/GHServletModule.java
index e25a7ed65c..f4db15496c 100644
--- a/web/src/main/java/com/graphhopper/http/GHServletModule.java
+++ b/web/src/main/java/com/graphhopper/http/GHServletModule.java
@@ -57,12 +57,16 @@ protected void configureServlets()
 		bind(IPFilter.class).toInstance(
 				new IPFilter(args.get("jetty.whiteips", ""), args.get("jetty.blackips", "")));
 
+		// Convert all parameters to lower case
+		filter("*").through(LowerCaseParameterFilter.class, params);
+		bind(LowerCaseParameterFilter.class).in(Singleton.class);
+
 		serve("/i18n", "/i18n/").with(I18NServlet.class);
 		bind(I18NServlet.class).in(Singleton.class);
 
 		serve("/info", "/info/").with(InfoServlet.class);
 		bind(InfoServlet.class).in(Singleton.class);
-		//
+
 		serve("/route", "/route/").with(GraphHopperServlet.class);
 		bind(GraphHopperServlet.class).in(Singleton.class);
 
@@ -74,7 +78,7 @@ protected void configureServlets()
 		serve("/nearest", "/nearest/").with(NearestServlet.class);
 		bind(NearestServlet.class).in(Singleton.class);
 
-		// Serve files that don't contain cetain file extensions
+		// Serve files that don't contain certain file extensions
 		serveRegex(INVALID_REGEX1).with(InvalidRequestServlet.class);
 		bind(InvalidRequestServlet.class).in(Singleton.class);
 	}
diff --git a/web/src/main/java/com/graphhopper/http/LowerCaseParameterFilter.java b/web/src/main/java/com/graphhopper/http/LowerCaseParameterFilter.java
new file mode 100644
index 0000000000..48c9abbf99
--- /dev/null
+++ b/web/src/main/java/com/graphhopper/http/LowerCaseParameterFilter.java
@@ -0,0 +1,118 @@
+package com.graphhopper.http;
+
+import java.io.IOException;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.Enumeration;
+import java.util.HashMap;
+import java.util.Map;
+
+import javax.servlet.Filter;
+import javax.servlet.FilterChain;
+import javax.servlet.FilterConfig;
+import javax.servlet.ServletException;
+import javax.servlet.ServletRequest;
+import javax.servlet.ServletResponse;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletRequestWrapper;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+/**
+ * Servlet Filter to convert all request parameters into lower case
+ *
+ * @author phopkins
+ *
+ */
+public class LowerCaseParameterFilter implements Filter
+{
+
+	protected static Logger LOG = LoggerFactory.getLogger(LowerCaseParameterFilter.class);
+
+	protected static class LowerCaseRequest extends HttpServletRequestWrapper
+	{
+
+		private Map<String, String[]> lowerCaseParams = new HashMap<>();
+
+		public LowerCaseRequest( final HttpServletRequest request )
+		{
+			super(request);
+			Map<String, String[]> orignalParams = request.getParameterMap();
+			for (String name : orignalParams.keySet())
+			{
+				String lower = name.toLowerCase();
+				if (!lowerCaseParams.containsKey(lower))
+				{
+					lowerCaseParams.put(lower, new String[0]);
+				}
+				lowerCaseParams.put(lower,
+						concat(lowerCaseParams.get(lower), orignalParams.get(name)));
+			}
+		}
+
+		@Override
+		public Map<String, String[]> getParameterMap()
+		{
+
+			return Collections.unmodifiableMap(lowerCaseParams);
+		}
+
+		@Override
+		public String getParameter( final String name )
+		{
+			String[] values = getParameterValues(name);
+			if (values != null)
+			{
+				return values[0];
+			} else
+			{
+				return null;
+			}
+		}
+
+		@Override
+		public Enumeration<String> getParameterNames()
+		{
+			return Collections.enumeration(lowerCaseParams.keySet());
+		}
+
+		@Override
+		public String[] getParameterValues( final String name )
+		{
+			return lowerCaseParams.get(name);
+		}
+
+		public static <T> T[] concat( T[] first, T[] second )
+		{
+			T[] result = Arrays.copyOf(first, first.length + second.length);
+			System.arraycopy(second, 0, result, first.length, second.length);
+			return result;
+		}
+	}
+
+	@Override
+	public void doFilter( final ServletRequest request, final ServletResponse response,
+			final FilterChain chain ) throws IOException, ServletException
+	{
+		if (request instanceof HttpServletRequest)
+		{
+			chain.doFilter(new LowerCaseRequest((HttpServletRequest) request), response);
+		} else
+		{
+			chain.doFilter(request, response);
+		}
+	}
+
+	@Override
+	public void init( FilterConfig filterConfig ) throws ServletException
+	{
+
+	}
+
+	@Override
+	public void destroy()
+	{
+
+	}
+}
\ No newline at end of file
diff --git a/web/src/test/java/com/graphhopper/http/LowerCaseParameterFilterTest.java b/web/src/test/java/com/graphhopper/http/LowerCaseParameterFilterTest.java
new file mode 100644
index 0000000000..46656639ac
--- /dev/null
+++ b/web/src/test/java/com/graphhopper/http/LowerCaseParameterFilterTest.java
@@ -0,0 +1,168 @@
+package com.graphhopper.http;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertNull;
+import static org.junit.Assert.assertTrue;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
+
+import java.io.IOException;
+import java.util.Enumeration;
+import java.util.HashMap;
+import java.util.Map;
+
+import javax.servlet.FilterChain;
+import javax.servlet.ServletException;
+import javax.servlet.ServletRequest;
+import javax.servlet.ServletResponse;
+import javax.servlet.http.HttpServletRequest;
+
+import org.junit.Before;
+import org.junit.Test;
+import org.mockito.Matchers;
+import org.mockito.Mockito;
+
+public class LowerCaseParameterFilterTest
+{
+
+	private HttpServletRequest originalRequest;
+
+	@Before
+	public void setup()
+	{
+		originalRequest = Mockito.mock(HttpServletRequest.class);
+	}
+
+	@Test
+	public void testLowerCaseRequest_singlePoint()
+	{
+		Map<String, String[]> origParameters = new HashMap<>();
+		origParameters.put("POINT", new String[] { "123,456" });
+		when(originalRequest.getParameterMap()).thenReturn(origParameters);
+
+		LowerCaseParameterFilter.LowerCaseRequest request = new LowerCaseParameterFilter.LowerCaseRequest(
+		        originalRequest);
+		Map<String, String[]> resultParameters = request.getParameterMap();
+		// Check the original value is no longer there
+		assertNull(resultParameters.get("POINT"));
+		// Check that the lower case value is as expected
+		assertNotNull(resultParameters.get("point"));
+		assertEquals(1, resultParameters.get("point").length);
+		assertEquals("123,456", resultParameters.get("point")[0]);
+	}
+
+	@Test
+	public void testLowerCaseRequest_multiPoint()
+	{
+		Map<String, String[]> origParameters = new HashMap<>();
+		origParameters.put("POINT", new String[] { "123,456" });
+		origParameters.put("pOiNt", new String[] { "789,321" });
+		when(originalRequest.getParameterMap()).thenReturn(origParameters);
+
+		LowerCaseParameterFilter.LowerCaseRequest request = new LowerCaseParameterFilter.LowerCaseRequest(
+		        originalRequest);
+		Map<String, String[]> resultParameters = request.getParameterMap();
+		assertNull(resultParameters.get("POINT"));
+		assertNull(resultParameters.get("pOiNt"));
+
+		assertNotNull(resultParameters.get("point"));
+		assertEquals(2, resultParameters.get("point").length);
+		assertEquals("123,456", resultParameters.get("point")[0]);
+		assertEquals("789,321", resultParameters.get("point")[1]);
+	}
+
+	@Test
+	public void testLowerCaseRequest_getParameterValues()
+	{
+		Map<String, String[]> origParameters = new HashMap<>();
+		origParameters.put("POINT", new String[] { "123,456" });
+		origParameters.put("pOiNt", new String[] { "789,321" });
+		when(originalRequest.getParameterMap()).thenReturn(origParameters);
+
+		LowerCaseParameterFilter.LowerCaseRequest request = new LowerCaseParameterFilter.LowerCaseRequest(
+				originalRequest);
+		assertNull(request.getParameterValues("POINT"));
+		assertNull(request.getParameterValues("pOiNt"));
+
+		assertNotNull(request.getParameterValues("point"));
+		String[] parameterValues = request.getParameterValues("point");
+
+		assertEquals(2, parameterValues.length);
+		assertEquals("123,456", parameterValues[0]);
+		assertEquals("789,321", parameterValues[1]);
+	}
+
+	@Test
+	public void testLowerCaseRequest_getParameterNames()
+	{
+		Map<String, String[]> origParameters = new HashMap<>();
+		origParameters.put("POINT", new String[] { "123,456" });
+		when(originalRequest.getParameterMap()).thenReturn(origParameters);
+
+		LowerCaseParameterFilter.LowerCaseRequest request = new LowerCaseParameterFilter.LowerCaseRequest(
+		        originalRequest);
+
+		Enumeration<String> enumer = request.getParameterNames();
+
+		assertTrue(enumer.hasMoreElements());
+		assertEquals("point", enumer.nextElement());
+		assertFalse(enumer.hasMoreElements());
+	}
+
+	@Test
+	public void testLowerCaseRequest_concat()
+	{
+		String[] result = LowerCaseParameterFilter.LowerCaseRequest.concat(
+		        new String[] { "123,456" }, new String[] { "789,321" });
+		assertNotNull(result);
+		assertEquals(2, result.length);
+		assertEquals("123,456", result[0]);
+		assertEquals("789,321", result[1]);
+	}
+
+	/**
+	 * When a HttpServletRequest is passed into LowerCaseParameterFilter.doFilter the
+	 * FilterChain.doFilter method will get passed a LowerCaseParameterFilter.LowerCaseRequest
+	 *
+	 * @throws IOException
+	 * @throws ServletException
+	 */
+	@Test
+	public void testLowerCaseParameterFilter_doFilter_HttpServletRequest() throws IOException,
+	        ServletException
+	{
+		LowerCaseParameterFilter filter = new LowerCaseParameterFilter();
+		FilterChain filterChainMock = Mockito.mock(FilterChain.class);
+
+		filter.doFilter(originalRequest, null, filterChainMock);
+
+		verify(filterChainMock).doFilter(
+				Matchers.isA(LowerCaseParameterFilter.LowerCaseRequest.class),
+				(ServletResponse) Matchers.any());
+	}
+
+	/**
+	 * When a not HttpServletRequest is passed into LowerCaseParameterFilter.doFilter the
+	 * FilterChain.doFilter method will get passed the servletRequest passed to the
+	 * LowerCaseParameterFilter.doFilter method
+	 *
+	 * @throws IOException
+	 * @throws ServletException
+	 */
+	@Test
+	public void testLowerCaseParameterFilter_doFilter_ServletRequest() throws IOException,
+	        ServletException
+	{
+		LowerCaseParameterFilter filter = new LowerCaseParameterFilter();
+		ServletRequest servletRequest = Mockito.mock(ServletRequest.class);
+		FilterChain filterChainMock = Mockito.mock(FilterChain.class);
+
+		filter.doFilter(servletRequest, null, filterChainMock);
+
+		verify(filterChainMock).doFilter(Matchers.eq(servletRequest),
+				(ServletResponse) Matchers.any());
+	}
+
+}
