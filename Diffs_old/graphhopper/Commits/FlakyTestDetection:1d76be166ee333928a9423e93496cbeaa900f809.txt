diff --git a/core/src/main/java/com/graphhopper/GraphHopper.java b/core/src/main/java/com/graphhopper/GraphHopper.java
index 3003973220..0bf8616b9c 100644
--- a/core/src/main/java/com/graphhopper/GraphHopper.java
+++ b/core/src/main/java/com/graphhopper/GraphHopper.java
@@ -1110,7 +1110,7 @@ private void checkIfPointsAreInBounds(List<GHPoint> points) {
         for (int i = 0; i < points.size(); i++) {
             GHPoint point = points.get(i);
             if (!bounds.contains(point.getLat(), point.getLon())) {
-                throw new PointOutOfBoundsException("Point " + i + " is ouf of bounds: " + point, i);
+                throw new PointOutOfBoundsException("Point " + i + " is out of bounds: " + point, i);
             }
         }
     }
diff --git a/docs/core/technical.md b/docs/core/technical.md
index 3e168b6a37..558b1b030c 100644
--- a/docs/core/technical.md
+++ b/docs/core/technical.md
@@ -60,7 +60,7 @@ An algorithm needs the path extraction: from the shortest-path-tree one needs to
 can be determined. For bidirectional algorithms this is a bit more complicated and done in PathBidirRef. 
 For [_Contraction Hierarchies_](http://ad-wiki.informatik.uni-freiburg.de/teaching/EfficientRoutePlanningSS2012)
  we use the _CHGraph_ which additionally holds shortcuts. While path extraction we need to identify those
- shortcuts and get the edges recursivly, this is done in Path4CH.
+ shortcuts and get the edges recursively, this is done in Path4CH.
 
 ## 3.1 Base Graph
 
