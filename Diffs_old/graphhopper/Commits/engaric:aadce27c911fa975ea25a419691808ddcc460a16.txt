diff --git a/core/src/main/java/com/graphhopper/GraphHopper.java b/core/src/main/java/com/graphhopper/GraphHopper.java
index 50e4364b8b..f23e462595 100644
--- a/core/src/main/java/com/graphhopper/GraphHopper.java
+++ b/core/src/main/java/com/graphhopper/GraphHopper.java
@@ -104,6 +104,7 @@ protected GraphHopper loadGraph( GraphStorage g )
         this.graph = g;
         fullyLoaded = true;
         initLocationIndex();
+        initDefaultVehicleIfNecessary();
         return this;
     }
 
@@ -115,7 +116,6 @@ public GraphHopper setEncodingManager( EncodingManager em )
     {
         ensureNotLoaded();
         this.encodingManager = em;
-        setDefaultVehicle(getFirstVehicle().toString());
         return this;
     }
 
@@ -274,18 +274,14 @@ private GraphHopper setUnsafeMemory()
      */
     public void setDefaultVehicle( String defaultVehicleStr )
     {
-        if (!encodingManager.supports(defaultVehicleStr))
-            throw new IllegalArgumentException("Default vehicle " + defaultVehicleStr + " is not supported. "
-                    + "Include vehicle in EncodingManager or via the property graph.flagEncoders");
         this.defaultVehicleStr = defaultVehicleStr;
     }
 
     public String getDefaultVehicle()
     {
         if (defaultVehicleStr == null)
-        {
             throw new RuntimeException("Set default vehicle before");
-        }
+
         return defaultVehicleStr;
     }
 
@@ -720,7 +716,9 @@ public boolean load( String graphHopperFolder )
         setGraphHopperLocation(graphHopperFolder);
 
         if (encodingManager == null)
-            encodingManager = EncodingManager.create(ghLocation);
+            setEncodingManager(EncodingManager.create(ghLocation));
+
+        initDefaultVehicleIfNecessary();
 
         if (!allowWrites && dataAccessType.isMMap())
             dataAccessType = DAType.MMAP_RO;
@@ -779,7 +777,6 @@ public void setAlgorithmFactory( RoutingAlgorithmFactory algoFactory )
      */
     protected void postProcessing()
     {
-        encodingManager = graph.getEncodingManager();
         if (chEnabled)
             algoFactory = createPrepare();
         else
@@ -1122,4 +1119,14 @@ public long getVisitedSum()
     {
         return visitedSum.get();
     }
+
+    private void initDefaultVehicleIfNecessary()
+    {
+        if (defaultVehicleStr == null)
+            setDefaultVehicle(getFirstVehicle().toString());
+
+        if (!encodingManager.supports(getDefaultVehicle()))
+            throw new IllegalArgumentException("Default vehicle " + defaultVehicleStr + " is not supported. "
+                    + "Include vehicle in EncodingManager or via the property graph.flagEncoders OR set it explicitely via setDefaultVehicle");
+    }
 }
diff --git a/core/src/test/java/com/graphhopper/GraphHopperTest.java b/core/src/test/java/com/graphhopper/GraphHopperTest.java
index 0356f26421..a2925d3f93 100644
--- a/core/src/test/java/com/graphhopper/GraphHopperTest.java
+++ b/core/src/test/java/com/graphhopper/GraphHopperTest.java
@@ -74,8 +74,9 @@ public void testLoadOSM()
         assertEquals(3, rsp.getPoints().getSize());
 
         closableInstance.close();
-        closableInstance = new GraphHopper().setStoreOnFlush(true).
-                setEncodingManager(new EncodingManager("CAR"));
+        
+        // no encoding manager necessary
+        closableInstance = new GraphHopper().setStoreOnFlush(true);
         assertTrue(closableInstance.load(ghLoc));
         rsp = closableInstance.route(new GHRequest(51.2492152, 9.4317166, 51.2, 9.4));
         assertFalse(rsp.hasErrors());
