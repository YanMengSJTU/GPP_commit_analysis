diff --git a/core/pom.xml b/core/pom.xml
index 27896d22e2..65b37bc149 100644
--- a/core/pom.xml
+++ b/core/pom.xml
@@ -21,7 +21,8 @@
     <properties>  
         <netbeans.hint.license>apache20</netbeans.hint.license>        
         <maven.build.timestamp.format>yyyy-MM-dd'T'HH:mm:ssZ</maven.build.timestamp.format>        
-        <builddate>${maven.build.timestamp}</builddate>        
+        <builddate>${maven.build.timestamp}</builddate>
+        <geotools.version>12.1</geotools.version>
     </properties>
     <licenses>
         <license>
@@ -84,6 +85,42 @@
             <version>0.43.1</version>
         </dependency>
 
+        <dependency>
+            <groupId>org.geotools</groupId>
+            <artifactId>gt-metadata</artifactId>
+            <version>${geotools.version}</version>
+        </dependency>
+        <dependency>
+            <groupId>org.geotools</groupId>
+            <artifactId>gt-opengis</artifactId>
+            <version>${geotools.version}</version>
+        </dependency>
+        <dependency>
+            <groupId>org.geotools</groupId>
+            <artifactId>gt-referencing</artifactId>
+            <version>${geotools.version}</version>
+        </dependency>
+        <dependency>
+            <groupId>org.geotools</groupId>
+            <artifactId>gt-epsg-hsql</artifactId>
+            <version>${geotools.version}</version>
+        </dependency>
+        <dependency>
+            <groupId>org.hsqldb</groupId>
+            <artifactId>hsqldb</artifactId>
+            <version>2.3.2</version>
+        </dependency>
+        <dependency>
+            <groupId>net.java.dev.jsr-275</groupId>
+            <artifactId>jsr-275</artifactId>
+            <version>1.0-beta-2</version>
+        </dependency>
+        <dependency>
+            <groupId>java3d</groupId>
+            <artifactId>vecmath</artifactId>
+            <version>1.3.2</version>
+        </dependency>
+
         <dependency>
             <groupId>org.json</groupId>
             <artifactId>json</artifactId>
@@ -91,6 +128,12 @@
             <version>20140107</version>
             <scope>test</scope>
         </dependency>
+        <dependency>
+            <groupId>org.mockito</groupId>
+            <artifactId>mockito-all</artifactId>
+            <version>1.9.5</version>
+            <scope>test</scope>
+        </dependency>
         
     </dependencies>
         
diff --git a/core/src/main/java/com/graphhopper/reader/OSMReader.java b/core/src/main/java/com/graphhopper/reader/OSMReader.java
index f2b815ab6b..88d238e94a 100644
--- a/core/src/main/java/com/graphhopper/reader/OSMReader.java
+++ b/core/src/main/java/com/graphhopper/reader/OSMReader.java
@@ -482,7 +482,7 @@ public void processRelation( OSMRelation relation ) throws XMLStreamException
 
     public Collection<ITurnCostTableEntry> analyzeTurnRelation( TurnRelation turnRelation )
     {
-        TLongObjectMap<ITurnCostTableEntry> entries = new TLongObjectHashMap<>();
+        TLongObjectMap<ITurnCostTableEntry> entries = new TLongObjectHashMap<ITurnCostTableEntry>();
 
         for (FlagEncoder encoder : encodingManager.fetchEdgeEncoders())
         {
diff --git a/core/src/main/java/com/graphhopper/reader/OSMTurnRelation.java b/core/src/main/java/com/graphhopper/reader/OSMTurnRelation.java
index b3b541ba7a..947e8b1adc 100644
--- a/core/src/main/java/com/graphhopper/reader/OSMTurnRelation.java
+++ b/core/src/main/java/com/graphhopper/reader/OSMTurnRelation.java
@@ -118,7 +118,7 @@ public long getOsmIdTo()
             if (edgeIdFrom == EdgeIterator.NO_EDGE)
                 return Collections.emptyList();
 
-            final Collection<ITurnCostTableEntry> entries = new ArrayList<>();
+            final Collection<ITurnCostTableEntry> entries = new ArrayList<ITurnCostTableEntry>();
             // get all outgoing edges of the via node
             iter = edgeOutExplorer.setBaseNode(nodeVia);
             // for TYPE_ONLY_* we add ALL restrictions (from, via, * ) EXCEPT the given turn
diff --git a/core/src/main/java/com/graphhopper/reader/datexupdates/DatexReader.java b/core/src/main/java/com/graphhopper/reader/datexupdates/DatexReader.java
index b0bd1a11d8..553d866e46 100644
--- a/core/src/main/java/com/graphhopper/reader/datexupdates/DatexReader.java
+++ b/core/src/main/java/com/graphhopper/reader/datexupdates/DatexReader.java
@@ -19,7 +19,7 @@
 
 	private String curValue;
 	private Map<String, String> locSpeedMap;
-	private List<LatLongMetaData> list = new ArrayList<>();
+	private List<LatLongMetaData> list = new ArrayList<LatLongMetaData>();
 	
 	private DefaultHandler datexStreamHandler = new DefaultHandler() {
 		private boolean speedChars=false;
@@ -135,7 +135,7 @@ public void characters(char ch[], int start, int length)
 
 	public List<LatLongMetaData> read(String datexModelStream,
 			String datexStream) throws ParserConfigurationException, SAXException, IOException  {
-		locSpeedMap = new HashMap<>();
+		locSpeedMap = new HashMap<String, String>();
 		SAXParserFactory factory = SAXParserFactory.newInstance();
 		factory.setValidating(false);
 		factory.setNamespaceAware(false);
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/AbstractOsItnReaderTest.java b/core/src/test/java/com/graphhopper/reader/osgb/AbstractOsItnReaderTest.java
index 24bf88b985..19c6665669 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/AbstractOsItnReaderTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/AbstractOsItnReaderTest.java
@@ -160,9 +160,9 @@ protected void evaluateRouting(final EdgeIterator iter, final int node,
             final boolean finished, AbstractFlagEncoder flagEncoder) {
         assertEquals("Incorrect adjacent node", node, iter.getAdjNode());
         assertEquals("Incorrect forward instructions", forward,
-                flagEncoder.isBool(iter.getFlags(), FlagEncoder.K_FORWARD));
+                flagEncoder.isForward(iter.getFlags()));
         assertEquals("Incorrect backward instructions", backward,
-                flagEncoder.isBool(iter.getFlags(), FlagEncoder.K_BACKWARD));
+                flagEncoder.isBackward(iter.getFlags()));
         assertEquals(!finished, iter.next());
     }
 
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/AbstractOsDpnReaderTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/AbstractOsDpnReaderTest.java
index 7e28296ba4..ac0ac1d60a 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/AbstractOsDpnReaderTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/AbstractOsDpnReaderTest.java
@@ -119,9 +119,9 @@ protected void evaluateRouting(final EdgeIterator iter, final int node,
             final boolean finished, AbstractFlagEncoder flagEncoder) {
         assertEquals("Incorrect adjacent node", node, iter.getAdjNode());
         assertEquals("Incorrect forward instructions", forward,
-                flagEncoder.isBool(iter.getFlags(), FlagEncoder.K_FORWARD));
+                flagEncoder.isForward(iter.getFlags()));
         assertEquals("Incorrect backward instructions", backward,
-                flagEncoder.isBool(iter.getFlags(), FlagEncoder.K_BACKWARD));
+                flagEncoder.isBackward(iter.getFlags()));
         assertEquals(!finished, iter.next());
     }
 
