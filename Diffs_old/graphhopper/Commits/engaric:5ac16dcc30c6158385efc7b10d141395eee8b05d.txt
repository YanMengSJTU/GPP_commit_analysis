diff --git a/core/pom.xml b/core/pom.xml
index d578eb29bb..68ca6d8d94 100644
--- a/core/pom.xml
+++ b/core/pom.xml
@@ -88,6 +88,7 @@
             <groupId>org.json</groupId>
             <artifactId>json</artifactId>
             <version>20140107</version>
+            <scope>test</scope>
         </dependency>
         
     </dependencies>
diff --git a/core/src/main/java/com/graphhopper/util/RoundaboutInstruction.java b/core/src/main/java/com/graphhopper/util/RoundaboutInstruction.java
index 3c9e78af4b..eda072d967 100644
--- a/core/src/main/java/com/graphhopper/util/RoundaboutInstruction.java
+++ b/core/src/main/java/com/graphhopper/util/RoundaboutInstruction.java
@@ -1,13 +1,11 @@
 package com.graphhopper.util;
 
-import org.json.JSONObject;
-
 import java.util.HashMap;
 import java.util.Map;
 
 /**
  * Created by jan on 02.02.15.
- *
+ * <p>
  * @author jansoe
  */
 public class RoundaboutInstruction extends Instruction
@@ -18,30 +16,29 @@
     private boolean exited = false;
     private double radian = Double.NaN;
 
-    public RoundaboutInstruction(int sign, String name, InstructionAnnotation ia, PointList pl)
+    public RoundaboutInstruction( int sign, String name, InstructionAnnotation ia, PointList pl )
     {
         super(sign, name, ia, pl);
     }
-  
+
     public RoundaboutInstruction increaseExitNumber()
     {
         this.exitNumber += 1;
         return this;
     }
 
-    public RoundaboutInstruction setExitNumber(int exitNumber)
+    public RoundaboutInstruction setExitNumber( int exitNumber )
     {
         this.exitNumber = exitNumber;
         return this;
     }
 
-    public RoundaboutInstruction setDirOfRotation(double deltaIn)
+    public RoundaboutInstruction setDirOfRotation( double deltaIn )
     {
         if (clockwise == 0)
         {
             clockwise = deltaIn > 0 ? 1 : -1;
-        }
-        else
+        } else
         {
             int clockwise2 = deltaIn > 0 ? 1 : -1;
             if (clockwise != clockwise2)
@@ -73,7 +70,7 @@ public int getExitNumber()
     }
 
     /**
-     * @return radian of angle  -2PI < x < 2PI between roundabout entrance and exit
+     * @return radian of angle -2PI < x < 2PI between roundabout entrance and exit
      *         values > 0 are clockwise rotation, <0 counterclockwise, NaN if direction of rotation unclear
      */
     public double getRadian()
@@ -81,16 +78,15 @@ public double getRadian()
         if (Math.abs(clockwise) != 1)
         {
             return Double.NaN;
-        }
-        else
+        } else
         {
-            double tmpRadian = Math.PI - clockwise*radian;
+            double tmpRadian = Math.PI - clockwise * radian;
             tmpRadian *= clockwise;
             return tmpRadian;
         }
     }
 
-    public RoundaboutInstruction setRadian(double radian)
+    public RoundaboutInstruction setRadian( double radian )
     {
         this.radian = radian;
         return this;
@@ -102,18 +98,17 @@ public RoundaboutInstruction setRadian(double radian)
         Map<String, Object> tmpMap = new HashMap<String, Object>(2);
         tmpMap.put("exit_number", getExitNumber());
         double radian = getRadian();
-        if (Double.isNaN(radian))
+        if (!Double.isNaN(radian))
         {
-            tmpMap.put("turn_angle", JSONObject.NULL);
-        } else {
             tmpMap.put("turn_angle", Helper.round(radian, 2));
         }
+
         return tmpMap;
-        
+
     }
-    
+
     @Override
-    public String getTurnDescription(Translation tr)
+    public String getTurnDescription( Translation tr )
     {
         String str;
         String streetName = getName();
@@ -123,9 +118,10 @@ public String getTurnDescription(Translation tr)
             if (!exited)
             {
                 str = tr.tr("roundaboutEnter");
-            } else {
-                str = Helper.isEmpty(streetName) ? tr.tr("roundaboutExit", getExitNumber()) :
-                        tr.tr("roundaboutExitOnto", getExitNumber(), streetName);
+            } else
+            {
+                str = Helper.isEmpty(streetName) ? tr.tr("roundaboutExit", getExitNumber())
+                        : tr.tr("roundaboutExitOnto", getExitNumber(), streetName);
             }
         } else
         {
@@ -133,4 +129,4 @@ public String getTurnDescription(Translation tr)
         }
         return str;
     }
-}
\ No newline at end of file
+}
diff --git a/core/src/test/java/com/graphhopper/util/InstructionListTest.java b/core/src/test/java/com/graphhopper/util/InstructionListTest.java
index 37a8897487..17e1dcaf91 100644
--- a/core/src/test/java/com/graphhopper/util/InstructionListTest.java
+++ b/core/src/test/java/com/graphhopper/util/InstructionListTest.java
@@ -346,17 +346,17 @@ public void testRoundaboutJsonIntegrity()
 
         PointList pl = new PointList();
         pl.add(52.514, 13.349);
-        pl.add(52.5135,13.35);
+        pl.add(52.5135, 13.35);
         pl.add(52.514, 13.351);
         RoundaboutInstruction instr = new RoundaboutInstruction(Instruction.USE_ROUNDABOUT, "streetname",
-                                                                 new InstructionAnnotation(0, ""), pl)
-                                          .setDirOfRotation(-0.1)
-                                          .setRadian(-Math.PI+1)
-                                          .setExitNumber(2)
-                                          .setExited();
+                new InstructionAnnotation(0, ""), pl)
+                .setDirOfRotation(-0.1)
+                .setRadian(-Math.PI + 1)
+                .setExitNumber(2)
+                .setExited();
         il.add(instr);
 
-        Map<String, Object> json = il.createJson().get(0);        
+        Map<String, Object> json = il.createJson().get(0);
         // assert that all information is present in map for JSON
         assertEquals("At roundabout, take exit 2 onto streetname", json.get("text").toString());
         assertEquals(-1, (Double) json.get("turn_angle"), 0.01);
@@ -373,7 +373,7 @@ public void testRoundaboutJsonNaN()
 
         PointList pl = new PointList();
         pl.add(52.514, 13.349);
-        pl.add(52.5135,13.35);
+        pl.add(52.5135, 13.35);
         pl.add(52.514, 13.351);
         RoundaboutInstruction instr = new RoundaboutInstruction(Instruction.USE_ROUNDABOUT, "streetname",
                 new InstructionAnnotation(0, ""), pl)
@@ -384,11 +384,11 @@ public void testRoundaboutJsonNaN()
 
         Map<String, Object> json = il.createJson().get(0);
         assertEquals("At roundabout, take exit 2 onto streetname", json.get("text").toString());
-        assertEquals("null", json.get("turn_angle").toString());
+        assertNull(json.get("turn_angle"));
         // assert that a valid JSON object can be written
         assertNotNull(new JSONObject(json).toString());
     }
-    
+
     @Test
     public void testCreateGPXWithEle()
     {
