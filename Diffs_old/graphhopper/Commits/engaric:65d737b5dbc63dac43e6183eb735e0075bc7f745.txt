diff --git a/core/src/test/java/com/graphhopper/routing/AbstractRoutingAlgorithmTester.java b/core/src/test/java/com/graphhopper/routing/AbstractRoutingAlgorithmTester.java
index f7471f82ef..34c0f1bf3d 100644
--- a/core/src/test/java/com/graphhopper/routing/AbstractRoutingAlgorithmTester.java
+++ b/core/src/test/java/com/graphhopper/routing/AbstractRoutingAlgorithmTester.java
@@ -57,6 +57,7 @@
  */
 public abstract class AbstractRoutingAlgorithmTester
 {
+
 	// problem is: matrix graph is expensive to create to cache it in a static variable
 	private static Graph matrixGraph;
 	protected static final EncodingManager encodingManager = new EncodingManager("CAR,FOOT,EMV");
@@ -229,14 +230,13 @@ public void testCalcStartEndOnlyPrivatePath()
 
 		GHUtility.printEdgeInfo(graphShortest, emvEncoder);
 		GHUtility.printInfo(graphShortest, 0, 20, EdgeFilter.ALL_EDGES);
-		// RoutingAlgorithm algo = createAlgo(graphShortest,
-		// AlgorithmOptions.start().flagEncoder(emvEncoder).
-		// weighting(new EscapePrivateWeighting(graphShortest, emvEncoder, new ShortestWeighting(),
-		// 4, 3)).build());
-		//
-		// Path p1 = algo.calcPath(4, 3);
-		// assertEquals(Helper.createTList(4, 5, 2, 3), p1.calcNodes());
-		// assertEquals(p1.toString(), 17000, p1.getDistance(), 1e-6);
+		RoutingAlgorithm algo = createAlgo(graphShortest,
+		AlgorithmOptions.start().flagEncoder(emvEncoder).
+		weighting(new EscapePrivateWeighting(graphShortest, emvEncoder, new ShortestWeighting())).build());
+
+		Path p1 = algo.calcPath(4, 3);
+		assertEquals(Helper.createTList(4, 5, 2, 3), p1.calcNodes());
+		assertEquals(p1.toString(), 17000, p1.getDistance(), 1e-6);
 	}
 
 	@Test
@@ -254,13 +254,12 @@ public void testCalcWontTraversePrivatePath()
 
 		GHUtility.printEdgeInfo(graphShortest, emvEncoder);
 		GHUtility.printInfo(graphShortest, 0, 20, EdgeFilter.ALL_EDGES);
-		// RoutingAlgorithm algo = createAlgo(graphShortest,
-		// AlgorithmOptions.start().flagEncoder(emvEncoder).
-		// weighting(new EscapePrivateWeighting(graphShortest, emvEncoder, new ShortestWeighting(),
-		// 0, 7)).build());
-		// Path p1 = algo.calcPath(0, 7);
-		// assertEquals(Helper.createTList(0, 1, 5, 7), p1.calcNodes());
-		// assertEquals(p1.toString(), 19000, p1.getDistance(), 1e-6);
+		RoutingAlgorithm algo = createAlgo(graphShortest,
+		AlgorithmOptions.start().flagEncoder(emvEncoder).
+		weighting(new EscapePrivateWeighting(graphShortest, emvEncoder, new ShortestWeighting())).build());
+		Path p1 = algo.calcPath(0, 7);
+		assertEquals(Helper.createTList(0, 1, 5, 7), p1.calcNodes());
+		assertEquals(p1.toString(), 19000, p1.getDistance(), 1e-6);
 	}
 
 	protected void initFootVsCar( Graph graph )
