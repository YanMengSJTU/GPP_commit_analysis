diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/MultiSDVController.java b/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/MultiSDVController.java
index a55ae440d7..7940ce60a0 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/MultiSDVController.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/vehicle/MultiSDVController.java
@@ -10,6 +10,7 @@
 import java.util.Random;
 import java.util.concurrent.ExecutorService;
 import java.util.concurrent.Executors;
+import java.util.concurrent.TimeUnit;
 import java.util.stream.Collectors;
 
 /**
@@ -19,7 +20,7 @@
 
     private static final Logger logger = LoggerFactory.getLogger(MultiSDVController.class);
 
-    public static final double DAMPING_FACTOR = 0.6;
+    public static final double DAMPING_FACTOR = 0.2;
     public static final double REROUTE_PROBABILITY = 0.001;
     public static final int EXPMAP_UPDATE_FREQUENCY = 100;
 
@@ -42,17 +43,27 @@ public void timestepHandler(int iteration)
         vehicles.stream().filter(v -> rerouteRand.nextDouble() <= REROUTE_PROBABILITY).map(v -> {
             logger.info("Rerouting vehicle " + v.id);
             return (Runnable) v::recalculateRoute;
-        }).forEach(es::execute);
+        }).forEach(es::submit);
 
         es.shutdown();
+        try
+        {
+            es.awaitTermination((long) (vehicles.size()*REROUTE_PROBABILITY*200), TimeUnit.MILLISECONDS);
+        }
+        catch (InterruptedException e)
+        {
+            logger.error("==== rerouting did not finish!!! ===");
+            logger.error(es.shutdownNow().size() + " remaining tasks");
+        }
         logger.info("Rerouting process complete");
 
-        vehicles = vehicles.stream().filter(v -> !v.isFinished()).collect(Collectors.toList());
 
         if (iteration % EXPMAP_UPDATE_FREQUENCY == 0)
         {
             logger.info("Updating expected map");
             expectedWeighting.updateExpectedMap(DAMPING_FACTOR, vehicles);
         }
+
+        vehicles = vehicles.stream().filter(v -> !v.isFinished()).collect(Collectors.toList());
     }
 }
