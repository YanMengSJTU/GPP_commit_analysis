diff --git a/core/src/main/java/com/graphhopper/routing/util/DynamicWeighting.java b/core/src/main/java/com/graphhopper/routing/util/DynamicWeighting.java
index 98f241d14e..69cd6d394c 100644
--- a/core/src/main/java/com/graphhopper/routing/util/DynamicWeighting.java
+++ b/core/src/main/java/com/graphhopper/routing/util/DynamicWeighting.java
@@ -81,17 +81,25 @@ public double calcWeight( EdgeIteratorState edgeState, boolean reverse, int prev
         if (penalizeEdge)
             time += heading_penalty;
 
-        return time / (0.5 + Math.pow(getUserPreference(edgeState), 2));
+        return time / (0.5 + Math.pow(getUserPreference(edgeState, reverse), 2));
     }
 
-    private double getUserPreference(EdgeIteratorState edgeState) {
+    private double getUserPreference(EdgeIteratorState edgeState, boolean reverse) {
 
         int wayType = (int) flagEncoder.getDouble(edgeState.getFlags(), DynamicWeighting.WAY_TYPE_KEY);
         int priority = PriorityCode.UNCHANGED.getValue();
 
-        double incElevation = flagEncoder.getDouble(edgeState.getFlags(), DynamicWeighting.INC_SLOPE_KEY) / 100;
         double incDistPercentage = flagEncoder.getDouble(edgeState.getFlags(), DynamicWeighting.INC_DIST_PERCENTAGE_KEY) / 100;
-        double incDist2DSum = edgeState.getDistance() * incDistPercentage;
+        double incElevation;
+        double incDist2DSum;
+
+        if(reverse){
+            incElevation = flagEncoder.getDouble(edgeState.getFlags(), DynamicWeighting.DEC_SLOPE_KEY) / 100;
+            incDist2DSum = (1 - incDistPercentage) * edgeState.getDistance();
+        } else {
+            incElevation = flagEncoder.getDouble(edgeState.getFlags(), DynamicWeighting.INC_SLOPE_KEY) / 100;
+            incDist2DSum = edgeState.getDistance() * incDistPercentage;
+        }
 
         if(wayType == 0)
             priority = PriorityCode.AVOID_AT_ALL_COSTS.getValue();
