diff --git a/core/src/main/java/com/graphhopper/GraphHopper.java b/core/src/main/java/com/graphhopper/GraphHopper.java
index 1b1e5c650e..21ffa3f9e6 100644
--- a/core/src/main/java/com/graphhopper/GraphHopper.java
+++ b/core/src/main/java/com/graphhopper/GraphHopper.java
@@ -90,1153 +90,1074 @@
 /**
  * Easy to use access point to configure import and (offline) routing.
  * <p/>
- * 
+ *
  * @see GraphHopperAPI
  * @author Peter Karich
  */
 public class GraphHopper implements GraphHopperAPI {
-	private static final String READER_UNAVAILABLE = "DataReader implementation %s not available check your setting for reader.implementation.  Allowed options are OSM, OSITN or OSDPN";
-	private final Logger logger = LoggerFactory.getLogger(getClass());
-	// for graph:
-	private GraphStorage graph;
-	private EncodingManager encodingManager;
-	private int defaultSegmentSize = -1;
-	private String ghLocation = "";
-	private DAType dataAccessType = DAType.RAM_STORE;
-	private boolean sortGraph = false;
-	boolean removeZipped = true;
-	private boolean elevation = false;
-	private LockFactory lockFactory = new NativeFSLockFactory();
-	private final String fileLockName = "gh.lock";
-	private boolean allowWrites = true;
-	boolean enableInstructions = true;
-	private boolean fullyLoaded = false;
-	// for routing
-	private double defaultWeightLimit = Double.MAX_VALUE;
-	private boolean simplifyResponse = true;
-	private TraversalMode traversalMode = TraversalMode.NODE_BASED;
-	private RoutingAlgorithmFactory algoFactory;
-	// for index
-	private LocationIndex locationIndex;
-	private int preciseIndexResolution = 300;
-	private int maxRegionSearch = 4;
-	// for prepare
-	private int minNetworkSize = 200;
-	private int minOneWayNetworkSize = 0;
-	// for CH prepare
-	private boolean doPrepare = true;
-	private boolean chEnabled = true;
-	private String chWeightingStr = "fastest";
-	private int periodicUpdates = -1;
-	private int lazyUpdates = -1;
-	private int neighborUpdates = -1;
-	private double logMessages = -1;
-	// for OSM import
-	private String dataReader = "OSM";
-	private String osmFile;
-	private double osmReaderWayPointMaxDistance = 1;
-	private int workerThreads = -1;
-	private boolean calcPoints = true;
-	// utils
-	private final TranslationMap trMap = new TranslationMap().doImport();
-	private ElevationProvider eleProvider = ElevationProvider.NOOP;
-	private final AtomicLong visitedSum = new AtomicLong(0);
-
-	/**
-	 * Certain readers require additional arguments so this can be passed to
-	 * them as a constructor parameter
-	 */
-	private CmdArgs args;
-
-	public GraphHopper() {
-	}
-
-	/**
-	 * For testing only
-	 */
-	protected GraphHopper loadGraph(GraphStorage g) {
-		this.graph = g;
-		fullyLoaded = true;
-		initLocationIndex();
-		return this;
-	}
-
-	/**
-	 * Specify which vehicles can be read by this GraphHopper instance. An
-	 * encoding manager defines how data from every vehicle is written (und
-	 * read) into edges of the graph.
-	 */
-	public GraphHopper setEncodingManager(EncodingManager em) {
-		ensureNotLoaded();
-		this.encodingManager = em;
-		if (em.needsTurnCostsSupport())
-			traversalMode = TraversalMode.EDGE_BASED_2DIR;
-
-		return this;
-	}
-
-	FlagEncoder getDefaultVehicle() {
-		if (encodingManager == null) {
-			throw new IllegalStateException(
-					"No encoding manager specified or loaded");
-		}
-
-		return encodingManager.fetchEdgeEncoders().get(0);
-	}
-
-	public EncodingManager getEncodingManager() {
-		return encodingManager;
-	}
-
-	public GraphHopper setElevationProvider(ElevationProvider eleProvider) {
-		if (eleProvider == null || eleProvider == ElevationProvider.NOOP)
-			setElevation(false);
-		else
-			setElevation(true);
-		this.eleProvider = eleProvider;
-		return this;
-	}
-
-	/**
-	 * Threads for data reading.
-	 */
-	protected int getWorkerThreads() {
-		return workerThreads;
-	}
-
-	/**
-	 * Return maximum distance (in meter) to reduce points via douglas peucker
-	 * while OSM import.
-	 */
-	protected double getWayPointMaxDistance() {
-		return osmReaderWayPointMaxDistance;
-	}
-
-	/**
-	 * This parameter specifies how to reduce points via douglas peucker while
-	 * OSM import. Higher value means more details, unit is meter. Default is 1.
-	 * Disable via 0.
-	 */
-	public GraphHopper setWayPointMaxDistance(double wayPointMaxDistance) {
-		this.osmReaderWayPointMaxDistance = wayPointMaxDistance;
-		return this;
-	}
-
-	/**
-	 * Sets the default traversal mode used for the algorithms and preparation.
-	 */
-	public GraphHopper setTraversalMode(TraversalMode traversalMode) {
-		this.traversalMode = traversalMode;
-		return this;
-	}
-
-	public TraversalMode getTraversalMode() {
-		return traversalMode;
-	}
-
-	/**
-	 * Configures the underlying storage and response to be used on a well
-	 * equipped server. Result also optimized for usage in the web module i.e.
-	 * try reduce network IO.
-	 */
-	public GraphHopper forServer() {
-		setSimplifyResponse(true);
-		return setInMemory();
-	}
-
-	/**
-	 * Configures the underlying storage to be used on a Desktop computer or
-	 * within another Java application with enough RAM but no network latency.
-	 */
-	public GraphHopper forDesktop() {
-		setSimplifyResponse(false);
-		return setInMemory();
-	}
-
-	/**
-	 * Configures the underlying storage to be used on a less powerful machine
-	 * like Android or Raspberry Pi with only few MB of RAM.
-	 */
-	public GraphHopper forMobile() {
-		setSimplifyResponse(false);
-		return setMemoryMapped();
-	}
-
-	/**
-	 * Precise location resolution index means also more space (disc/RAM) could
-	 * be consumed and probably slower query times, which would be e.g. not
-	 * suitable for Android. The resolution specifies the tile width (in meter).
-	 */
-	public GraphHopper setPreciseIndexResolution(int precision) {
-		ensureNotLoaded();
-		preciseIndexResolution = precision;
-		return this;
-	}
-
-	public void setMinNetworkSize(int minNetworkSize, int minOneWayNetworkSize) {
-		this.minNetworkSize = minNetworkSize;
-		this.minOneWayNetworkSize = minOneWayNetworkSize;
-	}
-
-	/**
-	 * This method call results in an in-memory graph.
-	 */
-	public GraphHopper setInMemory() {
-		ensureNotLoaded();
-		dataAccessType = DAType.RAM_STORE;
-		return this;
-	}
-
-	/**
-	 * Only valid option for in-memory graph and if you e.g. want to disable
-	 * store on flush for unit tests. Specify storeOnFlush to true if you want
-	 * that existing data will be loaded FROM disc and all in-memory data will
-	 * be flushed TO disc after flush is called e.g. while OSM import.
-	 * <p>
-	 * 
-	 * @param storeOnFlush
-	 *            true by default
-	 */
-	public GraphHopper setStoreOnFlush(boolean storeOnFlush) {
-		ensureNotLoaded();
-		if (storeOnFlush)
-			dataAccessType = DAType.RAM_STORE;
-		else
-			dataAccessType = DAType.RAM;
-		return this;
-	}
-
-	/**
-	 * Enable memory mapped configuration if not enough memory is available on
-	 * the target platform.
-	 */
-	public GraphHopper setMemoryMapped() {
-		ensureNotLoaded();
-		dataAccessType = DAType.MMAP;
-		return this;
-	}
-
-	/**
-	 * Not yet stable enough to offer it for everyone
-	 */
-	private GraphHopper setUnsafeMemory() {
-		ensureNotLoaded();
-		dataAccessType = DAType.UNSAFE_STORE;
-		return this;
-	}
-
-	/**
-	 * Enables the use of contraction hierarchies to reduce query times. Enabled
-	 * by default.
-	 * <p/>
-	 * 
-	 * @param weighting
-	 *            can be "fastest", "shortest" or your own weight-calculation
-	 *            type.
-	 * @see #setCHEnable(boolean)
-	 */
-	public GraphHopper setCHWeighting(String weighting) {
-		ensureNotLoaded();
-		chWeightingStr = weighting;
-		return this;
-	}
-
-	public String getCHWeighting() {
-		return chWeightingStr;
-	}
-
-	/**
-	 * Disables the "CH-preparation" preparation only. Use only if you know what
-	 * you do. To disable the full usage of CH use setCHEnable(false) instead.
-	 */
-	public GraphHopper setDoPrepare(boolean doPrepare) {
-		this.doPrepare = doPrepare;
-		return this;
-	}
-
-	/**
-	 * Enables or disables contraction hierarchies (CH). This speed-up mode is
-	 * enabled by default. Disabling CH is only recommended for short routes or
-	 * in combination with setDefaultWeightLimit and called flexibility mode
-	 * <p>
-	 * 
-	 * @see #setDefaultWeightLimit(double)
-	 */
-	public GraphHopper setCHEnable(boolean enable) {
-		ensureNotLoaded();
-		algoFactory = null;
-		chEnabled = enable;
-		return this;
-	}
-
-	/**
-	 * This methods stops the algorithm from searching further if the resulting
-	 * path would go over specified weight, important if CH is disabled. The
-	 * unit is defined by the used weighting created from createWeighting, e.g.
-	 * distance for shortest or seconds for the standard FastestWeighting
-	 * implementation.
-	 */
-	public void setDefaultWeightLimit(double defaultWeightLimit) {
-		this.defaultWeightLimit = defaultWeightLimit;
-	}
-
-	public boolean isCHEnabled() {
-		return chEnabled;
-	}
-
-	/**
-	 * @return true if storing and fetching elevation data is enabled. Default
-	 *         is false
-	 */
-	public boolean hasElevation() {
-		return elevation;
-	}
-
-	/**
-	 * Enable storing and fetching elevation data. Default is false
-	 */
-	public GraphHopper setElevation(boolean includeElevation) {
-		this.elevation = includeElevation;
-		return this;
-	}
-
-	/**
-	 * This method specifies if the import should include way names to be able
-	 * to return instructions for a route.
-	 */
-	public GraphHopper setEnableInstructions(boolean b) {
-		ensureNotLoaded();
-		enableInstructions = b;
-		return this;
-	}
-
-	/**
-	 * This methods enables gps point calculation. If disabled only distance
-	 * will be calculated.
-	 */
-	public GraphHopper setEnableCalcPoints(boolean b) {
-		calcPoints = b;
-		return this;
-	}
-
-	/**
-	 * This method specifies if the returned path should be simplified or not,
-	 * via douglas-peucker or similar algorithm.
-	 */
-	private GraphHopper setSimplifyResponse(boolean doSimplify) {
-		this.simplifyResponse = doSimplify;
-		return this;
-	}
-
-	/**
-	 * Sets the graphhopper folder.
-	 */
-	public GraphHopper setGraphHopperLocation(String ghLocation) {
-		ensureNotLoaded();
-		if (ghLocation == null)
-			throw new IllegalArgumentException(
-					"graphhopper location cannot be null");
-
-		this.ghLocation = ghLocation;
-		return this;
-	}
-
-	public String getGraphHopperLocation() {
-		return ghLocation;
-	}
-
-	/**
-	 * This file can be an osm xml (.osm), a compressed xml (.osm.zip or
-	 * .osm.gz) or a protobuf file (.pbf).
-	 */
-	public GraphHopper setOSMFile(String osmFileStr) {
-		ensureNotLoaded();
-		if (Helper.isEmpty(osmFileStr))
-			throw new IllegalArgumentException("OSM file cannot be empty.");
-
-		osmFile = osmFileStr;
-		return this;
-	}
-
-	public String getOSMFile() {
-		return osmFile;
-	}
-
-	/**
-	 * The underlying graph used in algorithms.
-	 * <p>
-	 * 
-	 * @throws IllegalStateException
-	 *             if graph is not instantiated.
-	 */
-	public GraphStorage getGraph() {
-		if (graph == null)
-			throw new IllegalStateException("Graph not initialized");
-
-		return graph;
-	}
-
-	public void setGraph(GraphStorage graph) {
-		this.graph = graph;
-	}
-
-	protected void setLocationIndex(LocationIndex locationIndex) {
-		this.locationIndex = locationIndex;
-	}
-
-	/**
-	 * The location index created from the graph.
-	 * <p>
-	 * 
-	 * @throws IllegalStateException
-	 *             if index is not initialized
-	 */
-	public LocationIndex getLocationIndex() {
-		if (locationIndex == null)
-			throw new IllegalStateException("Location index not initialized");
-
-		return locationIndex;
-	}
-
-	/**
-	 * Sorts the graph which requires more RAM while import. See #12
-	 */
-	public GraphHopper setSortGraph(boolean sortGraph) {
-		ensureNotLoaded();
-		this.sortGraph = sortGraph;
-		return this;
-	}
-
-	/**
-	 * Specifies if it is allowed for GraphHopper to write. E.g. for read only
-	 * filesystems it is not possible to create a lock file and so we can avoid
-	 * write locks.
-	 */
-	public GraphHopper setAllowWrites(boolean allowWrites) {
-		this.allowWrites = allowWrites;
-		return this;
-	}
-
-	public boolean isAllowWrites() {
-		return allowWrites;
-	}
-
-	public TranslationMap getTranslationMap() {
-		return trMap;
-	}
-
-	/**
-	 * Reads configuration from a CmdArgs object. Which can be manually filled,
-	 * or via main(String[] args) ala CmdArgs.read(args) or via configuration
-	 * file ala CmdArgs.readFromConfig("config.properties",
-	 * "graphhopper.config")
-	 */
-	public GraphHopper init(CmdArgs args) {
-		args = CmdArgs.readFromConfigAndMerge(args, "config",
-				"graphhopper.config");
-		this.args=args;
-		String tmpOsmFile = args.get("osmreader.osm", "");
-		if (!Helper.isEmpty(tmpOsmFile))
-			osmFile = tmpOsmFile;
-
-		dataReader = args.get("reader.implementation", dataReader);
-
-		String graphHopperFolder = args.get("graph.location", "");
-		if (Helper.isEmpty(graphHopperFolder) && Helper.isEmpty(ghLocation)) {
-			if (Helper.isEmpty(osmFile))
-				throw new IllegalArgumentException(
-						"You need to specify an OSM file.");
-
-			graphHopperFolder = Helper.pruneFileEnd(osmFile) + "-gh";
-		}
-
-		// graph
-		setGraphHopperLocation(graphHopperFolder);
-		defaultSegmentSize = args.getInt("graph.dataaccess.segmentSize",
-				defaultSegmentSize);
-
-		String graphDATypeStr = args.get("graph.dataaccess", "RAM_STORE");
-		dataAccessType = DAType.fromString(graphDATypeStr);
-
-		sortGraph = args.getBool("graph.doSort", sortGraph);
-		removeZipped = args.getBool("graph.removeZipped", removeZipped);
-		int bytesForFlags = args.getInt("graph.bytesForFlags", 8);
-		if (args.get("graph.locktype", "native").equals("simple"))
-			lockFactory = new SimpleFSLockFactory();
-		else
-			lockFactory = new NativeFSLockFactory();
-
-		// elevation
-		String eleProviderStr = args.get("graph.elevation.provider", "noop")
-				.toLowerCase();
-		boolean eleCalcMean = args.getBool("graph.elevation.calcmean", false);
-		String cacheDirStr = args.get("graph.elevation.cachedir", "");
-		String baseURL = args.get("graph.elevation.baseurl", "");
-		DAType elevationDAType = DAType.fromString(args.get(
-				"graph.elevation.dataaccess", "MMAP"));
-		ElevationProvider tmpProvider = ElevationProvider.NOOP;
-		if (eleProviderStr.equalsIgnoreCase("srtm")) {
-			tmpProvider = new SRTMProvider();
-		} else if (eleProviderStr.equalsIgnoreCase("cgiar")) {
-			CGIARProvider cgiarProvider = new CGIARProvider();
-			cgiarProvider.setAutoRemoveTemporaryFiles(args.getBool(
-					"graph.elevation.cgiar.clear", true));
-			tmpProvider = cgiarProvider;
-		}
-
-		tmpProvider.setCalcMean(eleCalcMean);
-		tmpProvider.setCacheDir(new File(cacheDirStr));
-		if (!baseURL.isEmpty())
-			tmpProvider.setBaseURL(baseURL);
-		tmpProvider.setDAType(elevationDAType);
-		setElevationProvider(tmpProvider);
-
-		// optimizable prepare
-		minNetworkSize = args.getInt("prepare.minNetworkSize", minNetworkSize);
-		minOneWayNetworkSize = args.getInt("prepare.minOneWayNetworkSize",
-				minOneWayNetworkSize);
-
-		// prepare CH
-		doPrepare = args.getBool("prepare.doPrepare", doPrepare);
-		String tmpCHWeighting = args.get("prepare.chWeighting", "fastest");
-		chEnabled = "fastest".equals(tmpCHWeighting)
-				|| "shortest".equals(tmpCHWeighting);
-		if (chEnabled)
-			setCHWeighting(tmpCHWeighting);
-
-		periodicUpdates = args.getInt("prepare.updates.periodic",
-				periodicUpdates);
-		lazyUpdates = args.getInt("prepare.updates.lazy", lazyUpdates);
-		neighborUpdates = args.getInt("prepare.updates.neighbor",
-				neighborUpdates);
-		logMessages = args.getDouble("prepare.logmessages", logMessages);
-
-		// osm import
-		osmReaderWayPointMaxDistance = args.getDouble(
-				"osmreader.wayPointMaxDistance", osmReaderWayPointMaxDistance);
-		String flagEncoders = args.get("graph.flagEncoders", "");
-		if (!flagEncoders.isEmpty())
-			setEncodingManager(new EncodingManager(flagEncoders, bytesForFlags));
-
-		workerThreads = args.getInt("osmreader.workerThreads", workerThreads);
-		enableInstructions = args.getBool("osmreader.instructions",
-				enableInstructions);
-
-		// index
-		preciseIndexResolution = args.getInt("index.highResolution",
-				preciseIndexResolution);
-		maxRegionSearch = args.getInt("index.maxRegionSearch", maxRegionSearch);
-
-		// routing
-		defaultWeightLimit = args.getDouble("routing.defaultWeightLimit",
-				defaultWeightLimit);
-		return this;
-	}
-
-	private void printInfo() {
-		logger.info("version " + Constants.VERSION + "|" + Constants.BUILD_DATE
-				+ " (" + Constants.getVersions() + ")");
-		if (graph != null)
-			logger.info("graph " + graph.toString() + ", details:"
-					+ graph.toDetailsString());
-	}
-
-	/**
-	 * Imports provided data from disc and creates graph. Depending on the
-	 * settings the resulting graph will be stored to disc so on a second call
-	 * this method will only load the graph from disc which is usually a lot
-	 * faster.
-	 */
-	public GraphHopper importOrLoad() {
-		if (!load(ghLocation)) {
-			printInfo();
-			process(ghLocation);
-		} else {
-			printInfo();
-		}
-		return this;
-	}
-
-	/**
-	 * Creates the graph from OSM data.
-	 */
-	private GraphHopper process(String graphHopperLocation) {
-		setGraphHopperLocation(graphHopperLocation);
-		Lock lock = null;
-		try {
-			if (graph.getDirectory().getDefaultType().isStoring()) {
-				lockFactory.setLockDir(new File(graphHopperLocation));
-				lock = lockFactory.create(fileLockName, true);
-				if (!lock.tryLock())
-					throw new RuntimeException(
-							"To avoid multiple writers we need to obtain a write lock but it failed. In "
-									+ graphHopperLocation,
-							lock.getObtainFailedReason());
-			}
-
-			try {
-				importData();
-				graph.getProperties().put("osmreader.import.date",
-						formatDateTime(new Date()));
-			} catch (IOException ex) {
-				throw new RuntimeException("Cannot parse OSM file "
-						+ getOSMFile(), ex);
-			}
-			cleanUp();
-			optimize();
-			postProcessing();
-			flush();
-		} finally {
-			if (lock != null)
-				lock.release();
-		}
-		return this;
-	}
-
-	protected DataReader importData() throws IOException {
-		ensureWriteAccess();
-		if (graph == null)
-			throw new IllegalStateException(
-					"Load graph before importing OSM data");
-
-		if (osmFile == null)
-			throw new IllegalStateException(
-					"Couldn't load from existing folder: "
-							+ ghLocation
-							+ " but also cannot import from OSM file as it wasn't specified!");
-
-		encodingManager.setEnableInstructions(enableInstructions);
-		DataReader reader = createReader(graph);
-		logger.info("using " + graph.toString() + ", memory:"
-				+ Helper.getMemInfo());
-		reader.readGraph();
-		return reader;
-	}
-
-	protected DataReader createReader(GraphStorage tmpGraph) {
-		DataReader reader;
-		if ("OSM".equals(dataReader))
-			reader = new OSMReader(tmpGraph);
-		else if ("OSITN".equals(dataReader))
-			reader = new OsItnReader(tmpGraph, args);
-		else if ("OSDPN".equals(dataReader))
-			reader = new OsDpnReader(tmpGraph);
-		else if ("OSHN".equals(dataReader))
-			reader = new OsHnReader(tmpGraph);
-		else {
-			String exceptionMessage = String.format(READER_UNAVAILABLE,
-					dataReader);
-			throw new IllegalArgumentException(exceptionMessage);
-		}
-		return initReader(reader);
-	}
-
-	protected DataReader initReader(DataReader reader) {
-		if (osmFile == null)
-			throw new IllegalArgumentException("No OSM file specified");
-
-		logger.info("start creating graph from " + osmFile);
-		File osmTmpFile = new File(osmFile);
-		return reader.setOSMFile(osmTmpFile).setElevationProvider(eleProvider)
-				.setWorkerThreads(workerThreads)
-				.setEncodingManager(encodingManager)
-				.setWayPointMaxDistance(osmReaderWayPointMaxDistance);
-	}
-
-	/**
-	 * Opens existing graph.
-	 * <p/>
-	 * 
-	 * @param graphHopperFolder
-	 *            is the folder containing graphhopper files (which can be
-	 *            compressed too)
-	 */
-	@Override
-	public boolean load(String graphHopperFolder) {
-		if (Helper.isEmpty(graphHopperFolder))
-			throw new IllegalStateException(
-					"graphHopperLocation is not specified. call init before");
-
-		if (fullyLoaded)
-			throw new IllegalStateException(
-					"graph is already successfully loaded");
-
-		if (graphHopperFolder.endsWith("-gh")) {
-			// do nothing
-		} else if (graphHopperFolder.endsWith(".osm")
-				|| graphHopperFolder.endsWith(".xml")) {
-			throw new IllegalArgumentException(
-					"To import an osm file you need to use importOrLoad");
-		} else if (!graphHopperFolder.contains(".")) {
-			if (new File(graphHopperFolder + "-gh").exists())
-				graphHopperFolder += "-gh";
-		} else {
-			File compressed = new File(graphHopperFolder + ".ghz");
-			if (compressed.exists() && !compressed.isDirectory()) {
-				try {
-					new Unzipper().unzip(compressed.getAbsolutePath(),
-							graphHopperFolder, removeZipped);
-				} catch (IOException ex) {
-					throw new RuntimeException("Couldn't extract file "
-							+ compressed.getAbsolutePath() + " to "
-							+ graphHopperFolder, ex);
-				}
-			}
-		}
-
-		setGraphHopperLocation(graphHopperFolder);
-
-		if (encodingManager == null)
-			setEncodingManager(EncodingManager.create(ghLocation));
-
-		if (!allowWrites && dataAccessType.isMMap())
-			dataAccessType = DAType.MMAP_RO;
-
-		GHDirectory dir = new GHDirectory(ghLocation, dataAccessType);
-		if (chEnabled)
-			graph = new LevelGraphStorage(dir, encodingManager, hasElevation());
-		else if (encodingManager.needsTurnCostsSupport())
-			graph = new GraphHopperStorage(dir, encodingManager,
-					hasElevation(), new TurnCostExtension());
-		else
-			graph = new GraphHopperStorage(dir, encodingManager, hasElevation());
-
-		graph.setSegmentSize(defaultSegmentSize);
-
-		Lock lock = null;
-		try {
-			// create locks only if writes are allowed, if they are not allowed
-			// a lock cannot be created
-			// (e.g. on a read only filesystem locks would fail)
-			if (graph.getDirectory().getDefaultType().isStoring()
-					&& isAllowWrites()) {
-				lockFactory.setLockDir(new File(ghLocation));
-				lock = lockFactory.create(fileLockName, false);
-				if (!lock.tryLock())
-					throw new RuntimeException(
-							"To avoid reading partial data we need to obtain the read lock but it failed. In "
-									+ ghLocation, lock.getObtainFailedReason());
-			}
-
-			if (!graph.loadExisting())
-				return false;
-
-			postProcessing();
-			fullyLoaded = true;
-			return true;
-		} finally {
-			if (lock != null)
-				lock.release();
-		}
-	}
-
-	public RoutingAlgorithmFactory getAlgorithmFactory() {
-		if (algoFactory == null)
-			this.algoFactory = new RoutingAlgorithmFactorySimple();
-
-		return algoFactory;
-	}
-
-	public void setAlgorithmFactory(RoutingAlgorithmFactory algoFactory) {
-		this.algoFactory = algoFactory;
-	}
-
-	/**
-	 * Sets EncodingManager, does the preparation and creates the locationIndex
-	 */
-	protected void postProcessing() {
-		initLocationIndex();
-		if (chEnabled)
-			algoFactory = createPrepare();
-		else
-			algoFactory = new RoutingAlgorithmFactorySimple();
-
-		if (!isPrepared())
-			prepare();
-	}
-
-	private boolean isPrepared() {
-		return "true".equals(graph.getProperties().get("prepare.done"));
-	}
-
-	protected RoutingAlgorithmFactory createPrepare() {
-		FlagEncoder defaultVehicle = getDefaultVehicle();
-		Weighting weighting = createWeighting(new WeightingMap(chWeightingStr),
-				defaultVehicle);
-		PrepareContractionHierarchies tmpPrepareCH = new PrepareContractionHierarchies(
-				new GHDirectory("", DAType.RAM_INT), (LevelGraph) graph,
-				defaultVehicle, weighting, traversalMode);
-		tmpPrepareCH.setPeriodicUpdates(periodicUpdates)
-				.setLazyUpdates(lazyUpdates)
-				.setNeighborUpdates(neighborUpdates)
-				.setLogMessages(logMessages);
-
-		return tmpPrepareCH;
-	}
-
-	/**
-	 * Based on the weightingParameters and the specified vehicle a Weighting
-	 * instance can be created. Note that all URL parameters are available in
-	 * the weightingParameters as String if you use the GraphHopper Web module.
-	 * <p>
-	 * 
-	 * @see WeightingMap
-	 * @param weightingMap
-	 *            all parameters influencing the weighting. E.g. parameters
-	 *            coming via GHRequest.getHints or directly via "&api.xy=" from
-	 *            the URL of the web UI
-	 * @param encoder
-	 *            the required vehicle
-	 * @return the weighting to be used for route calculation
-	 */
-	public Weighting createWeighting(WeightingMap weightingMap,
-			FlagEncoder encoder) {
-		String weighting = weightingMap.getWeighting();
-		Weighting result;
-
-		if ("shortest".equalsIgnoreCase(weighting)) {
-			result = new ShortestWeighting();
-		} else if ("fastest".equalsIgnoreCase(weighting) || weighting.isEmpty()) {
-			if (encoder.supports(PriorityWeighting.class))
-				result = new PriorityWeighting(encoder);
-			else
-				result = new FastestWeighting(encoder);
-		} else if ("fastavoid".equalsIgnoreCase(weighting)) {
-			String avoidanceString = weightingMap.get("avoidances", "cliff");
-			String[] avoidances = avoidanceString.split(",");
-			if (encoder.supports(PriorityWeighting.class))
-				result = new PriorityWithAvoidancesWeighting(encoder, avoidances);
-			else
-				result = new FastestWithAvoidancesWeighting(encoder, avoidances);
-		} else if ("shortavoid".equalsIgnoreCase(weighting)) {
-			String avoidanceString = weightingMap.get("avoidances", "cliff");
-			String[] avoidances = avoidanceString.split(",");
-			result = new ShortestWithAvoidancesWeighting(encoder, avoidances);
-		} else {
-			throw new UnsupportedOperationException("weighting " + weighting
-					+ " not supported");
-		}
-		return result;
-	}
-
-	/**
-	 * Potentially wraps the specified weighting into a TurnWeighting instance.
-	 */
-	public Weighting createTurnWeighting(Weighting weighting, Graph graph,
-			FlagEncoder encoder) {
-		if (encoder.supports(TurnWeighting.class))
-			return new TurnWeighting(weighting, encoder,
-					(TurnCostExtension) graph.getExtension());
-		return weighting;
-	}
-
-	@Override
-	public GHResponse route(GHRequest request) {
-		GHResponse response = new GHResponse();
-		List<Path> paths = getPaths(request, response);
-		if (response.hasErrors())
-			return response;
-
-		boolean tmpEnableInstructions = request.getHints().getBool(
-				"instructions", enableInstructions);
-		boolean tmpCalcPoints = request.getHints().getBool("calcPoints",
-				calcPoints);
-		double wayPointMaxDistance = request.getHints().getDouble(
-				"wayPointMaxDistance", 1d);
-		Locale locale = request.getLocale();
-		DouglasPeucker peucker = new DouglasPeucker()
-				.setMaxDistance(wayPointMaxDistance);
-
-		new PathMerger()
-				.setCalcPoints(tmpCalcPoints)
-				.setDouglasPeucker(peucker)
-				.setEnableInstructions(tmpEnableInstructions)
-				.setSimplifyResponse(
-						simplifyResponse && wayPointMaxDistance > 0)
-				.doWork(response, paths, trMap.getWithFallBack(locale));
-		return response;
-	}
-
-	protected List<Path> getPaths(GHRequest request, GHResponse rsp) {
-		if (graph == null || !fullyLoaded)
-			throw new IllegalStateException(
-					"Call load or importOrLoad before routing");
-
-		if (graph.isClosed())
-			throw new IllegalStateException(
-					"You need to create a new GraphHopper instance as it is already closed");
-
-		String vehicle = request.getVehicle();
-		if (vehicle.isEmpty())
-			vehicle = getDefaultVehicle().toString();
-
-		if (!encodingManager.supports(vehicle)) {
-			rsp.addError(new IllegalArgumentException("Vehicle " + vehicle
-					+ " unsupported. " + "Supported are: "
-					+ getEncodingManager()));
-			return Collections.emptyList();
-		}
-
-		TraversalMode tMode;
-		String tModeStr = request.getHints().get("traversal_mode",
-				traversalMode.toString());
-		try {
-			tMode = TraversalMode.fromString(tModeStr);
-		} catch (Exception ex) {
-			rsp.addError(ex);
-			return Collections.emptyList();
-		}
-
-		List<GHPoint> points = request.getPoints();
-		if (points.size() < 2) {
-			rsp.addError(new IllegalStateException(
-					"At least 2 points has to be specified, but was:"
-							+ points.size()));
-			return Collections.emptyList();
-		}
-
-		visitedSum.set(0);
-
-		FlagEncoder encoder = encodingManager.getEncoder(vehicle);
-		EdgeFilter edgeFilter = new DefaultEdgeFilter(encoder);
-
-		StopWatch sw = new StopWatch().start();
-		List<QueryResult> qResults = new ArrayList<QueryResult>(points.size());
-		for (int placeIndex = 0; placeIndex < points.size(); placeIndex++) {
-			GHPoint point = points.get(placeIndex);
-			QueryResult res = locationIndex.findClosest(point.lat, point.lon,
-					edgeFilter);
-			if (!res.isValid())
-				rsp.addError(new IllegalArgumentException("Cannot find point "
-						+ placeIndex + ": " + point));
-
-			qResults.add(res);
-		}
-
-		if (rsp.hasErrors())
-			return Collections.emptyList();
-
-		String debug = "idLookup:" + sw.stop().getSeconds() + "s";
-
-		QueryGraph queryGraph;
-		RoutingAlgorithmFactory tmpAlgoFactory = getAlgorithmFactory();
-		if (chEnabled
-				&& !vehicle.equalsIgnoreCase(getDefaultVehicle().toString())) {
-			// fall back to normal traversing
-			tmpAlgoFactory = new RoutingAlgorithmFactorySimple();
-			queryGraph = new QueryGraph(graph.getBaseGraph());
-		} else {
-			queryGraph = new QueryGraph(graph);
-		}
-
-		queryGraph.lookup(qResults);
-
-		List<Path> paths = new ArrayList<Path>(points.size() - 1);
-		QueryResult fromQResult = qResults.get(0);
-		Weighting weighting = createWeighting(request.getHints(), encoder);
-		weighting = createTurnWeighting(weighting, queryGraph, encoder);
-
-		double weightLimit = request.getHints().getDouble("defaultWeightLimit",
-				defaultWeightLimit);
-		String algoStr = request.getAlgorithm().isEmpty() ? AlgorithmOptions.DIJKSTRA_BI
-				: request.getAlgorithm();
-		AlgorithmOptions algoOpts = AlgorithmOptions.start().algorithm(algoStr)
-				.traversalMode(tMode).flagEncoder(encoder).weighting(weighting)
-				.build();
-
-		for (int placeIndex = 1; placeIndex < points.size(); placeIndex++) {
-			QueryResult toQResult = qResults.get(placeIndex);
-			sw = new StopWatch().start();
-			RoutingAlgorithm algo = tmpAlgoFactory.createAlgo(queryGraph,
-					algoOpts);
-			algo.setWeightLimit(weightLimit);
-			debug += ", algoInit:" + sw.stop().getSeconds() + "s";
-
-			sw = new StopWatch().start();
-			Path path = algo.calcPath(fromQResult.getClosestNode(),
-					toQResult.getClosestNode());
-			if (path.getTime() < 0)
-				throw new RuntimeException(
-						"Time was negative. Please report as bug and include:"
-								+ request);
-
-			paths.add(path);
-			debug += ", " + algo.getName() + "-routing:"
-					+ sw.stop().getSeconds() + "s, " + path.getDebugInfo();
-
-			visitedSum.addAndGet(algo.getVisitedNodes());
-			fromQResult = toQResult;
-		}
-
-		if (rsp.hasErrors())
-			return Collections.emptyList();
-
-		if (points.size() - 1 != paths.size())
-			throw new RuntimeException(
-					"There should be exactly one more places than paths. places:"
-							+ points.size() + ", paths:" + paths.size());
-
-		rsp.setDebugInfo(debug);
-		return paths;
-	}
-
-	protected LocationIndex createLocationIndex(Directory dir) {
-		LocationIndexTree tmpIndex = new LocationIndexTree(
-				graph.getBaseGraph(), dir);
-		tmpIndex.setResolution(preciseIndexResolution);
-		tmpIndex.setMaxRegionSearch(maxRegionSearch);
-		if (!tmpIndex.loadExisting()) {
-			ensureWriteAccess();
-			tmpIndex.prepareIndex();
-		}
-
-		return tmpIndex;
-	}
-
-	/**
-	 * Initializes the location index after the import is done.
-	 */
-	protected void initLocationIndex() {
-		if (locationIndex != null)
-			throw new IllegalStateException(
-					"Cannot initialize locationIndex twice!");
-
-		locationIndex = createLocationIndex(graph.getDirectory());
-	}
-
-	protected void optimize() {
-		logger.info("optimizing ... (" + Helper.getMemInfo() + ")");
-		graph.optimize();
-		logger.info("finished optimize (" + Helper.getMemInfo() + ")");
-
-		// Later: move this into the GraphStorage.optimize method
-		// Or: Doing it after preparation to optimize shortcuts too. But not
-		// possible yet #12
-		if (sortGraph) {
-			if (graph instanceof LevelGraph && isPrepared())
-				throw new IllegalArgumentException(
-						"Sorting prepared LevelGraph is not possible yet. See #12");
-
-			GraphStorage newGraph = GHUtility.newStorage(graph);
-			GHUtility.sortDFS(graph, newGraph);
-			logger.info("graph sorted (" + Helper.getMemInfo() + ")");
-			graph = newGraph;
-		}
-	}
-
-	protected void prepare() {
-		boolean tmpPrepare = doPrepare
-				&& algoFactory instanceof PrepareContractionHierarchies;
-		if (tmpPrepare) {
-			ensureWriteAccess();
-			logger.info("calling prepare.doWork for " + getDefaultVehicle()
-					+ " ... (" + Helper.getMemInfo() + ")");
-			((PrepareContractionHierarchies) algoFactory).doWork();
-			graph.getProperties().put("prepare.date",
-					formatDateTime(new Date()));
-		}
-		graph.getProperties().put("prepare.done", tmpPrepare);
-	}
-
-	protected void cleanUp() {
-		int prev = graph.getNodes();
-		PrepareRoutingSubnetworks preparation = new PrepareRoutingSubnetworks(
-				graph, encodingManager);
-		preparation.setMinNetworkSize(minNetworkSize);
-		preparation.setMinOneWayNetworkSize(minOneWayNetworkSize);
-		logger.info("start finding subnetworks, " + Helper.getMemInfo());
-		preparation.doWork();
-		int n = graph.getNodes();
-		// calculate remaining subnetworks
-		int remainingSubnetworks = preparation.findSubnetworks().size();
-		logger.info("edges: " + graph.getAllEdges().getCount() + ", nodes " + n
-				+ ", there were " + preparation.getSubNetworks()
-				+ " subnetworks. removed them => " + (prev - n)
-				+ " less nodes. Remaining subnetworks:" + remainingSubnetworks);
-	}
-
-	protected void flush() {
-		logger.info("flushing graph " + graph.toString() + ", details:"
-				+ graph.toDetailsString() + ", " + Helper.getMemInfo() + ")");
-		graph.flush();
-		fullyLoaded = true;
-	}
-
-	/**
-	 * Releases all associated resources like memory or files. But it does not
-	 * remove them. To remove the files created in graphhopperLocation you have
-	 * to call clean().
-	 */
-	public void close() {
-		if (graph != null)
-			graph.close();
-
-		if (locationIndex != null)
-			locationIndex.close();
-
-		try {
-			lockFactory.forceRemove(fileLockName, true);
-		} catch (Exception ex) {
-			// silently fail e.g. on Windows where we cannot remove an
-			// unreleased native lock
-		}
-	}
-
-	/**
-	 * Removes the on-disc routing files. Call only after calling close or
-	 * before importOrLoad or load
-	 */
-	public void clean() {
-		if (getGraphHopperLocation().isEmpty())
-			throw new IllegalStateException(
-					"Cannot clean GraphHopper without specified graphHopperLocation");
-
-		File folder = new File(getGraphHopperLocation());
-		Helper.removeDir(folder);
-	}
-
-	// make sure this is identical to buildDate used in pom.xml
-	// <maven.build.timestamp.format>yyyy-MM-dd'T'HH:mm:ssZ</maven.build.timestamp.format>
-	private String formatDateTime(Date date) {
-		return new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ").format(date);
-	}
-
-	protected void ensureNotLoaded() {
-		if (fullyLoaded)
-			throw new IllegalStateException(
-					"No configuration changes are possible after loading the graph");
-	}
-
-	protected void ensureWriteAccess() {
-		if (!allowWrites)
-			throw new IllegalStateException("Writes are not allowed!");
-	}
-
-	/**
-	 * Returns the current sum of the visited nodes while routing. Mainly for
-	 * statistic and debugging purposes.
-	 */
-	public long getVisitedSum() {
-		return visitedSum.get();
-	}
-
-	public GraphHopper setAsOSMReader() {
-		dataReader = "OSM";
-		return this;
-	}
-
-	public GraphHopper setAsItnReader() {
-		dataReader = "OSITN";
-		return this;
-	}
-
-	public GraphHopper setAsHnReader() {
-		dataReader = "OSHN";
-		return this;
-	}
-
-	public GraphHopper setAsDpnReader() {
-		dataReader = "OSDPN";
-		return this;
-	}
+    private static final String READER_UNAVAILABLE = "DataReader implementation %s not available check your setting for reader.implementation.  Allowed options are OSM, OSITN or OSDPN";
+    private final Logger logger = LoggerFactory.getLogger(getClass());
+    // for graph:
+    private GraphStorage graph;
+    private EncodingManager encodingManager;
+    private int defaultSegmentSize = -1;
+    private String ghLocation = "";
+    private DAType dataAccessType = DAType.RAM_STORE;
+    private boolean sortGraph = false;
+    boolean removeZipped = true;
+    private boolean elevation = false;
+    private LockFactory lockFactory = new NativeFSLockFactory();
+    private final String fileLockName = "gh.lock";
+    private boolean allowWrites = true;
+    boolean enableInstructions = true;
+    private boolean fullyLoaded = false;
+    // for routing
+    private double defaultWeightLimit = Double.MAX_VALUE;
+    private boolean simplifyResponse = true;
+    private TraversalMode traversalMode = TraversalMode.NODE_BASED;
+    private RoutingAlgorithmFactory algoFactory;
+    // for index
+    private LocationIndex locationIndex;
+    private int preciseIndexResolution = 300;
+    private int maxRegionSearch = 4;
+    // for prepare
+    private int minNetworkSize = 200;
+    private int minOneWayNetworkSize = 0;
+    // for CH prepare
+    private boolean doPrepare = true;
+    private boolean chEnabled = true;
+    private String chWeightingStr = "fastest";
+    private int periodicUpdates = -1;
+    private int lazyUpdates = -1;
+    private int neighborUpdates = -1;
+    private double logMessages = -1;
+    // for OSM import
+    private String dataReader = "OSM";
+    private String osmFile;
+    private double osmReaderWayPointMaxDistance = 1;
+    private int workerThreads = -1;
+    private boolean calcPoints = true;
+    // utils
+    private final TranslationMap trMap = new TranslationMap().doImport();
+    private ElevationProvider eleProvider = ElevationProvider.NOOP;
+    private final AtomicLong visitedSum = new AtomicLong(0);
+
+    /**
+     * Certain readers require additional arguments so this can be passed to
+     * them as a constructor parameter
+     */
+    private CmdArgs args;
+
+    public GraphHopper() {
+    }
+
+    /**
+     * For testing only
+     */
+    protected GraphHopper loadGraph(GraphStorage g) {
+        this.graph = g;
+        fullyLoaded = true;
+        initLocationIndex();
+        return this;
+    }
+
+    /**
+     * Specify which vehicles can be read by this GraphHopper instance. An
+     * encoding manager defines how data from every vehicle is written (und
+     * read) into edges of the graph.
+     */
+    public GraphHopper setEncodingManager(EncodingManager em) {
+        ensureNotLoaded();
+        this.encodingManager = em;
+        if (em.needsTurnCostsSupport())
+            traversalMode = TraversalMode.EDGE_BASED_2DIR;
+
+        return this;
+    }
+
+    FlagEncoder getDefaultVehicle() {
+        if (encodingManager == null) {
+            throw new IllegalStateException("No encoding manager specified or loaded");
+        }
+
+        return encodingManager.fetchEdgeEncoders().get(0);
+    }
+
+    public EncodingManager getEncodingManager() {
+        return encodingManager;
+    }
+
+    public GraphHopper setElevationProvider(ElevationProvider eleProvider) {
+        if (eleProvider == null || eleProvider == ElevationProvider.NOOP)
+            setElevation(false);
+        else
+            setElevation(true);
+        this.eleProvider = eleProvider;
+        return this;
+    }
+
+    /**
+     * Threads for data reading.
+     */
+    protected int getWorkerThreads() {
+        return workerThreads;
+    }
+
+    /**
+     * Return maximum distance (in meter) to reduce points via douglas peucker
+     * while OSM import.
+     */
+    protected double getWayPointMaxDistance() {
+        return osmReaderWayPointMaxDistance;
+    }
+
+    /**
+     * This parameter specifies how to reduce points via douglas peucker while
+     * OSM import. Higher value means more details, unit is meter. Default is 1.
+     * Disable via 0.
+     */
+    public GraphHopper setWayPointMaxDistance(double wayPointMaxDistance) {
+        this.osmReaderWayPointMaxDistance = wayPointMaxDistance;
+        return this;
+    }
+
+    /**
+     * Sets the default traversal mode used for the algorithms and preparation.
+     */
+    public GraphHopper setTraversalMode(TraversalMode traversalMode) {
+        this.traversalMode = traversalMode;
+        return this;
+    }
+
+    public TraversalMode getTraversalMode() {
+        return traversalMode;
+    }
+
+    /**
+     * Configures the underlying storage and response to be used on a well
+     * equipped server. Result also optimized for usage in the web module i.e.
+     * try reduce network IO.
+     */
+    public GraphHopper forServer() {
+        setSimplifyResponse(true);
+        return setInMemory();
+    }
+
+    /**
+     * Configures the underlying storage to be used on a Desktop computer or
+     * within another Java application with enough RAM but no network latency.
+     */
+    public GraphHopper forDesktop() {
+        setSimplifyResponse(false);
+        return setInMemory();
+    }
+
+    /**
+     * Configures the underlying storage to be used on a less powerful machine
+     * like Android or Raspberry Pi with only few MB of RAM.
+     */
+    public GraphHopper forMobile() {
+        setSimplifyResponse(false);
+        return setMemoryMapped();
+    }
+
+    /**
+     * Precise location resolution index means also more space (disc/RAM) could
+     * be consumed and probably slower query times, which would be e.g. not
+     * suitable for Android. The resolution specifies the tile width (in meter).
+     */
+    public GraphHopper setPreciseIndexResolution(int precision) {
+        ensureNotLoaded();
+        preciseIndexResolution = precision;
+        return this;
+    }
+
+    public void setMinNetworkSize(int minNetworkSize, int minOneWayNetworkSize) {
+        this.minNetworkSize = minNetworkSize;
+        this.minOneWayNetworkSize = minOneWayNetworkSize;
+    }
+
+    /**
+     * This method call results in an in-memory graph.
+     */
+    public GraphHopper setInMemory() {
+        ensureNotLoaded();
+        dataAccessType = DAType.RAM_STORE;
+        return this;
+    }
+
+    /**
+     * Only valid option for in-memory graph and if you e.g. want to disable
+     * store on flush for unit tests. Specify storeOnFlush to true if you want
+     * that existing data will be loaded FROM disc and all in-memory data will
+     * be flushed TO disc after flush is called e.g. while OSM import.
+     * <p>
+     * 
+     * @param storeOnFlush
+     *            true by default
+     */
+    public GraphHopper setStoreOnFlush(boolean storeOnFlush) {
+        ensureNotLoaded();
+        if (storeOnFlush)
+            dataAccessType = DAType.RAM_STORE;
+        else
+            dataAccessType = DAType.RAM;
+        return this;
+    }
+
+    /**
+     * Enable memory mapped configuration if not enough memory is available on
+     * the target platform.
+     */
+    public GraphHopper setMemoryMapped() {
+        ensureNotLoaded();
+        dataAccessType = DAType.MMAP;
+        return this;
+    }
+
+    /**
+     * Not yet stable enough to offer it for everyone
+     */
+    private GraphHopper setUnsafeMemory() {
+        ensureNotLoaded();
+        dataAccessType = DAType.UNSAFE_STORE;
+        return this;
+    }
+
+    /**
+     * Enables the use of contraction hierarchies to reduce query times. Enabled
+     * by default.
+     * <p/>
+     * 
+     * @param weighting
+     *            can be "fastest", "shortest" or your own weight-calculation
+     *            type.
+     * @see #setCHEnable(boolean)
+     */
+    public GraphHopper setCHWeighting(String weighting) {
+        ensureNotLoaded();
+        chWeightingStr = weighting;
+        return this;
+    }
+
+    public String getCHWeighting() {
+        return chWeightingStr;
+    }
+
+    /**
+     * Disables the "CH-preparation" preparation only. Use only if you know what
+     * you do. To disable the full usage of CH use setCHEnable(false) instead.
+     */
+    public GraphHopper setDoPrepare(boolean doPrepare) {
+        this.doPrepare = doPrepare;
+        return this;
+    }
+
+    /**
+     * Enables or disables contraction hierarchies (CH). This speed-up mode is
+     * enabled by default. Disabling CH is only recommended for short routes or
+     * in combination with setDefaultWeightLimit and called flexibility mode
+     * <p>
+     * 
+     * @see #setDefaultWeightLimit(double)
+     */
+    public GraphHopper setCHEnable(boolean enable) {
+        ensureNotLoaded();
+        algoFactory = null;
+        chEnabled = enable;
+        return this;
+    }
+
+    /**
+     * This methods stops the algorithm from searching further if the resulting
+     * path would go over specified weight, important if CH is disabled. The
+     * unit is defined by the used weighting created from createWeighting, e.g.
+     * distance for shortest or seconds for the standard FastestWeighting
+     * implementation.
+     */
+    public void setDefaultWeightLimit(double defaultWeightLimit) {
+        this.defaultWeightLimit = defaultWeightLimit;
+    }
+
+    public boolean isCHEnabled() {
+        return chEnabled;
+    }
+
+    /**
+     * @return true if storing and fetching elevation data is enabled. Default
+     *         is false
+     */
+    public boolean hasElevation() {
+        return elevation;
+    }
+
+    /**
+     * Enable storing and fetching elevation data. Default is false
+     */
+    public GraphHopper setElevation(boolean includeElevation) {
+        this.elevation = includeElevation;
+        return this;
+    }
+
+    /**
+     * This method specifies if the import should include way names to be able
+     * to return instructions for a route.
+     */
+    public GraphHopper setEnableInstructions(boolean b) {
+        ensureNotLoaded();
+        enableInstructions = b;
+        return this;
+    }
+
+    /**
+     * This methods enables gps point calculation. If disabled only distance
+     * will be calculated.
+     */
+    public GraphHopper setEnableCalcPoints(boolean b) {
+        calcPoints = b;
+        return this;
+    }
+
+    /**
+     * This method specifies if the returned path should be simplified or not,
+     * via douglas-peucker or similar algorithm.
+     */
+    private GraphHopper setSimplifyResponse(boolean doSimplify) {
+        this.simplifyResponse = doSimplify;
+        return this;
+    }
+
+    /**
+     * Sets the graphhopper folder.
+     */
+    public GraphHopper setGraphHopperLocation(String ghLocation) {
+        ensureNotLoaded();
+        if (ghLocation == null)
+            throw new IllegalArgumentException("graphhopper location cannot be null");
+
+        this.ghLocation = ghLocation;
+        return this;
+    }
+
+    public String getGraphHopperLocation() {
+        return ghLocation;
+    }
+
+    /**
+     * This file can be an osm xml (.osm), a compressed xml (.osm.zip or
+     * .osm.gz) or a protobuf file (.pbf).
+     */
+    public GraphHopper setOSMFile(String osmFileStr) {
+        ensureNotLoaded();
+        if (Helper.isEmpty(osmFileStr))
+            throw new IllegalArgumentException("OSM file cannot be empty.");
+
+        osmFile = osmFileStr;
+        return this;
+    }
+
+    public String getOSMFile() {
+        return osmFile;
+    }
+
+    /**
+     * The underlying graph used in algorithms.
+     * <p>
+     * 
+     * @throws IllegalStateException
+     *             if graph is not instantiated.
+     */
+    public GraphStorage getGraph() {
+        if (graph == null)
+            throw new IllegalStateException("Graph not initialized");
+
+        return graph;
+    }
+
+    public void setGraph(GraphStorage graph) {
+        this.graph = graph;
+    }
+
+    protected void setLocationIndex(LocationIndex locationIndex) {
+        this.locationIndex = locationIndex;
+    }
+
+    /**
+     * The location index created from the graph.
+     * <p>
+     * 
+     * @throws IllegalStateException
+     *             if index is not initialized
+     */
+    public LocationIndex getLocationIndex() {
+        if (locationIndex == null)
+            throw new IllegalStateException("Location index not initialized");
+
+        return locationIndex;
+    }
+
+    /**
+     * Sorts the graph which requires more RAM while import. See #12
+     */
+    public GraphHopper setSortGraph(boolean sortGraph) {
+        ensureNotLoaded();
+        this.sortGraph = sortGraph;
+        return this;
+    }
+
+    /**
+     * Specifies if it is allowed for GraphHopper to write. E.g. for read only
+     * filesystems it is not possible to create a lock file and so we can avoid
+     * write locks.
+     */
+    public GraphHopper setAllowWrites(boolean allowWrites) {
+        this.allowWrites = allowWrites;
+        return this;
+    }
+
+    public boolean isAllowWrites() {
+        return allowWrites;
+    }
+
+    public TranslationMap getTranslationMap() {
+        return trMap;
+    }
+
+    /**
+     * Reads configuration from a CmdArgs object. Which can be manually filled,
+     * or via main(String[] args) ala CmdArgs.read(args) or via configuration
+     * file ala CmdArgs.readFromConfig("config.properties",
+     * "graphhopper.config")
+     */
+    public GraphHopper init(CmdArgs args) {
+        args = CmdArgs.readFromConfigAndMerge(args, "config", "graphhopper.config");
+        this.args = args;
+        String tmpOsmFile = args.get("osmreader.osm", "");
+        if (!Helper.isEmpty(tmpOsmFile))
+            osmFile = tmpOsmFile;
+
+        dataReader = args.get("reader.implementation", dataReader);
+
+        String graphHopperFolder = args.get("graph.location", "");
+        if (Helper.isEmpty(graphHopperFolder) && Helper.isEmpty(ghLocation)) {
+            if (Helper.isEmpty(osmFile))
+                throw new IllegalArgumentException("You need to specify an OSM file.");
+
+            graphHopperFolder = Helper.pruneFileEnd(osmFile) + "-gh";
+        }
+
+        // graph
+        setGraphHopperLocation(graphHopperFolder);
+        defaultSegmentSize = args.getInt("graph.dataaccess.segmentSize", defaultSegmentSize);
+
+        String graphDATypeStr = args.get("graph.dataaccess", "RAM_STORE");
+        dataAccessType = DAType.fromString(graphDATypeStr);
+
+        sortGraph = args.getBool("graph.doSort", sortGraph);
+        removeZipped = args.getBool("graph.removeZipped", removeZipped);
+        int bytesForFlags = args.getInt("graph.bytesForFlags", 8);
+        if (args.get("graph.locktype", "native").equals("simple"))
+            lockFactory = new SimpleFSLockFactory();
+        else
+            lockFactory = new NativeFSLockFactory();
+
+        // elevation
+        String eleProviderStr = args.get("graph.elevation.provider", "noop").toLowerCase();
+        boolean eleCalcMean = args.getBool("graph.elevation.calcmean", false);
+        String cacheDirStr = args.get("graph.elevation.cachedir", "");
+        String baseURL = args.get("graph.elevation.baseurl", "");
+        DAType elevationDAType = DAType.fromString(args.get("graph.elevation.dataaccess", "MMAP"));
+        ElevationProvider tmpProvider = ElevationProvider.NOOP;
+        if (eleProviderStr.equalsIgnoreCase("srtm")) {
+            tmpProvider = new SRTMProvider();
+        } else if (eleProviderStr.equalsIgnoreCase("cgiar")) {
+            CGIARProvider cgiarProvider = new CGIARProvider();
+            cgiarProvider.setAutoRemoveTemporaryFiles(args.getBool("graph.elevation.cgiar.clear", true));
+            tmpProvider = cgiarProvider;
+        }
+
+        tmpProvider.setCalcMean(eleCalcMean);
+        tmpProvider.setCacheDir(new File(cacheDirStr));
+        if (!baseURL.isEmpty())
+            tmpProvider.setBaseURL(baseURL);
+        tmpProvider.setDAType(elevationDAType);
+        setElevationProvider(tmpProvider);
+
+        // optimizable prepare
+        minNetworkSize = args.getInt("prepare.minNetworkSize", minNetworkSize);
+        minOneWayNetworkSize = args.getInt("prepare.minOneWayNetworkSize", minOneWayNetworkSize);
+
+        // prepare CH
+        doPrepare = args.getBool("prepare.doPrepare", doPrepare);
+        String tmpCHWeighting = args.get("prepare.chWeighting", "fastest");
+        chEnabled = "fastest".equals(tmpCHWeighting) || "shortest".equals(tmpCHWeighting);
+        if (chEnabled)
+            setCHWeighting(tmpCHWeighting);
+
+        periodicUpdates = args.getInt("prepare.updates.periodic", periodicUpdates);
+        lazyUpdates = args.getInt("prepare.updates.lazy", lazyUpdates);
+        neighborUpdates = args.getInt("prepare.updates.neighbor", neighborUpdates);
+        logMessages = args.getDouble("prepare.logmessages", logMessages);
+
+        // osm import
+        osmReaderWayPointMaxDistance = args.getDouble("osmreader.wayPointMaxDistance", osmReaderWayPointMaxDistance);
+        String flagEncoders = args.get("graph.flagEncoders", "");
+        if (!flagEncoders.isEmpty())
+            setEncodingManager(new EncodingManager(flagEncoders, bytesForFlags));
+
+        workerThreads = args.getInt("osmreader.workerThreads", workerThreads);
+        enableInstructions = args.getBool("osmreader.instructions", enableInstructions);
+
+        // index
+        preciseIndexResolution = args.getInt("index.highResolution", preciseIndexResolution);
+        maxRegionSearch = args.getInt("index.maxRegionSearch", maxRegionSearch);
+
+        // routing
+        defaultWeightLimit = args.getDouble("routing.defaultWeightLimit", defaultWeightLimit);
+        return this;
+    }
+
+    private void printInfo() {
+        logger.info("version " + Constants.VERSION + "|" + Constants.BUILD_DATE + " (" + Constants.getVersions() + ")");
+        if (graph != null)
+            logger.info("graph " + graph.toString() + ", details:" + graph.toDetailsString());
+    }
+
+    /**
+     * Imports provided data from disc and creates graph. Depending on the
+     * settings the resulting graph will be stored to disc so on a second call
+     * this method will only load the graph from disc which is usually a lot
+     * faster.
+     */
+    public GraphHopper importOrLoad() {
+        if (!load(ghLocation)) {
+            printInfo();
+            process(ghLocation);
+        } else {
+            printInfo();
+        }
+        return this;
+    }
+
+    /**
+     * Creates the graph from OSM data.
+     */
+    private GraphHopper process(String graphHopperLocation) {
+        setGraphHopperLocation(graphHopperLocation);
+        Lock lock = null;
+        try {
+            if (graph.getDirectory().getDefaultType().isStoring()) {
+                lockFactory.setLockDir(new File(graphHopperLocation));
+                lock = lockFactory.create(fileLockName, true);
+                if (!lock.tryLock())
+                    throw new RuntimeException(
+                            "To avoid multiple writers we need to obtain a write lock but it failed. In "
+                                    + graphHopperLocation, lock.getObtainFailedReason());
+            }
+
+            try {
+                importData();
+                graph.getProperties().put("osmreader.import.date", formatDateTime(new Date()));
+            } catch (IOException ex) {
+                throw new RuntimeException("Cannot parse OSM file " + getOSMFile(), ex);
+            }
+            cleanUp();
+            optimize();
+            postProcessing();
+            flush();
+        } finally {
+            if (lock != null)
+                lock.release();
+        }
+        return this;
+    }
+
+    protected DataReader importData() throws IOException {
+        ensureWriteAccess();
+        if (graph == null)
+            throw new IllegalStateException("Load graph before importing OSM data");
+
+        if (osmFile == null)
+            throw new IllegalStateException("Couldn't load from existing folder: " + ghLocation
+                    + " but also cannot import from OSM file as it wasn't specified!");
+
+        encodingManager.setEnableInstructions(enableInstructions);
+        DataReader reader = createReader(graph);
+        logger.info("using " + graph.toString() + ", memory:" + Helper.getMemInfo());
+        reader.readGraph();
+        return reader;
+    }
+
+    protected DataReader createReader(GraphStorage tmpGraph) {
+        DataReader reader;
+        if ("OSM".equals(dataReader))
+            reader = new OSMReader(tmpGraph);
+        else if ("OSITN".equals(dataReader))
+            reader = new OsItnReader(tmpGraph, args);
+        else if ("OSDPN".equals(dataReader))
+            reader = new OsDpnReader(tmpGraph, args);
+        else if ("OSHN".equals(dataReader))
+            reader = new OsHnReader(tmpGraph);
+        else {
+            String exceptionMessage = String.format(READER_UNAVAILABLE, dataReader);
+            throw new IllegalArgumentException(exceptionMessage);
+        }
+        return initReader(reader);
+    }
+
+    protected DataReader initReader(DataReader reader) {
+        if (osmFile == null)
+            throw new IllegalArgumentException("No OSM file specified");
+
+        logger.info("start creating graph from " + osmFile);
+        File osmTmpFile = new File(osmFile);
+        return reader.setOSMFile(osmTmpFile).setElevationProvider(eleProvider).setWorkerThreads(workerThreads)
+                .setEncodingManager(encodingManager).setWayPointMaxDistance(osmReaderWayPointMaxDistance);
+    }
+
+    /**
+     * Opens existing graph.
+     * <p/>
+     * 
+     * @param graphHopperFolder
+     *            is the folder containing graphhopper files (which can be
+     *            compressed too)
+     */
+    @Override
+    public boolean load(String graphHopperFolder) {
+        if (Helper.isEmpty(graphHopperFolder))
+            throw new IllegalStateException("graphHopperLocation is not specified. call init before");
+
+        if (fullyLoaded)
+            throw new IllegalStateException("graph is already successfully loaded");
+
+        if (graphHopperFolder.endsWith("-gh")) {
+            // do nothing
+        } else if (graphHopperFolder.endsWith(".osm") || graphHopperFolder.endsWith(".xml")) {
+            throw new IllegalArgumentException("To import an osm file you need to use importOrLoad");
+        } else if (!graphHopperFolder.contains(".")) {
+            if (new File(graphHopperFolder + "-gh").exists())
+                graphHopperFolder += "-gh";
+        } else {
+            File compressed = new File(graphHopperFolder + ".ghz");
+            if (compressed.exists() && !compressed.isDirectory()) {
+                try {
+                    new Unzipper().unzip(compressed.getAbsolutePath(), graphHopperFolder, removeZipped);
+                } catch (IOException ex) {
+                    throw new RuntimeException("Couldn't extract file " + compressed.getAbsolutePath() + " to "
+                            + graphHopperFolder, ex);
+                }
+            }
+        }
+
+        setGraphHopperLocation(graphHopperFolder);
+
+        if (encodingManager == null)
+            setEncodingManager(EncodingManager.create(ghLocation));
+
+        if (!allowWrites && dataAccessType.isMMap())
+            dataAccessType = DAType.MMAP_RO;
+
+        GHDirectory dir = new GHDirectory(ghLocation, dataAccessType);
+        if (chEnabled)
+            graph = new LevelGraphStorage(dir, encodingManager, hasElevation());
+        else if (encodingManager.needsTurnCostsSupport())
+            graph = new GraphHopperStorage(dir, encodingManager, hasElevation(), new TurnCostExtension());
+        else
+            graph = new GraphHopperStorage(dir, encodingManager, hasElevation());
+
+        graph.setSegmentSize(defaultSegmentSize);
+
+        Lock lock = null;
+        try {
+            // create locks only if writes are allowed, if they are not allowed
+            // a lock cannot be created
+            // (e.g. on a read only filesystem locks would fail)
+            if (graph.getDirectory().getDefaultType().isStoring() && isAllowWrites()) {
+                lockFactory.setLockDir(new File(ghLocation));
+                lock = lockFactory.create(fileLockName, false);
+                if (!lock.tryLock())
+                    throw new RuntimeException(
+                            "To avoid reading partial data we need to obtain the read lock but it failed. In "
+                                    + ghLocation, lock.getObtainFailedReason());
+            }
+
+            if (!graph.loadExisting())
+                return false;
+
+            postProcessing();
+            fullyLoaded = true;
+            return true;
+        } finally {
+            if (lock != null)
+                lock.release();
+        }
+    }
+
+    public RoutingAlgorithmFactory getAlgorithmFactory() {
+        if (algoFactory == null)
+            this.algoFactory = new RoutingAlgorithmFactorySimple();
+
+        return algoFactory;
+    }
+
+    public void setAlgorithmFactory(RoutingAlgorithmFactory algoFactory) {
+        this.algoFactory = algoFactory;
+    }
+
+    /**
+     * Sets EncodingManager, does the preparation and creates the locationIndex
+     */
+    protected void postProcessing() {
+        initLocationIndex();
+        if (chEnabled)
+            algoFactory = createPrepare();
+        else
+            algoFactory = new RoutingAlgorithmFactorySimple();
+
+        if (!isPrepared())
+            prepare();
+    }
+
+    private boolean isPrepared() {
+        return "true".equals(graph.getProperties().get("prepare.done"));
+    }
+
+    protected RoutingAlgorithmFactory createPrepare() {
+        FlagEncoder defaultVehicle = getDefaultVehicle();
+        Weighting weighting = createWeighting(new WeightingMap(chWeightingStr), defaultVehicle);
+        PrepareContractionHierarchies tmpPrepareCH = new PrepareContractionHierarchies(new GHDirectory("",
+                DAType.RAM_INT), (LevelGraph) graph, defaultVehicle, weighting, traversalMode);
+        tmpPrepareCH.setPeriodicUpdates(periodicUpdates).setLazyUpdates(lazyUpdates)
+                .setNeighborUpdates(neighborUpdates).setLogMessages(logMessages);
+
+        return tmpPrepareCH;
+    }
+
+    /**
+     * Based on the weightingParameters and the specified vehicle a Weighting
+     * instance can be created. Note that all URL parameters are available in
+     * the weightingParameters as String if you use the GraphHopper Web module.
+     * <p>
+     * 
+     * @see WeightingMap
+     * @param weightingMap
+     *            all parameters influencing the weighting. E.g. parameters
+     *            coming via GHRequest.getHints or directly via "&api.xy=" from
+     *            the URL of the web UI
+     * @param encoder
+     *            the required vehicle
+     * @return the weighting to be used for route calculation
+     */
+    public Weighting createWeighting(WeightingMap weightingMap, FlagEncoder encoder) {
+        String weighting = weightingMap.getWeighting();
+        Weighting result;
+
+        if ("shortest".equalsIgnoreCase(weighting)) {
+            result = new ShortestWeighting();
+        } else if ("fastest".equalsIgnoreCase(weighting) || weighting.isEmpty()) {
+            if (encoder.supports(PriorityWeighting.class))
+                result = new PriorityWeighting(encoder);
+            else
+                result = new FastestWeighting(encoder);
+        } else if ("fastavoid".equalsIgnoreCase(weighting)) {
+            String avoidanceString = weightingMap.get("avoidances", "cliff");
+            String[] avoidances = avoidanceString.split(",");
+            if (encoder.supports(PriorityWeighting.class))
+                result = new PriorityWithAvoidancesWeighting(encoder, avoidances);
+            else
+                result = new FastestWithAvoidancesWeighting(encoder, avoidances);
+        } else if ("shortavoid".equalsIgnoreCase(weighting)) {
+            String avoidanceString = weightingMap.get("avoidances", "cliff");
+            String[] avoidances = avoidanceString.split(",");
+            result = new ShortestWithAvoidancesWeighting(encoder, avoidances);
+        } else {
+            throw new UnsupportedOperationException("weighting " + weighting + " not supported");
+        }
+        return result;
+    }
+
+    /**
+     * Potentially wraps the specified weighting into a TurnWeighting instance.
+     */
+    public Weighting createTurnWeighting(Weighting weighting, Graph graph, FlagEncoder encoder) {
+        if (encoder.supports(TurnWeighting.class))
+            return new TurnWeighting(weighting, encoder, (TurnCostExtension) graph.getExtension());
+        return weighting;
+    }
+
+    @Override
+    public GHResponse route(GHRequest request) {
+        GHResponse response = new GHResponse();
+        List<Path> paths = getPaths(request, response);
+        if (response.hasErrors())
+            return response;
+
+        boolean tmpEnableInstructions = request.getHints().getBool("instructions", enableInstructions);
+        boolean tmpCalcPoints = request.getHints().getBool("calcPoints", calcPoints);
+        double wayPointMaxDistance = request.getHints().getDouble("wayPointMaxDistance", 1d);
+        Locale locale = request.getLocale();
+        DouglasPeucker peucker = new DouglasPeucker().setMaxDistance(wayPointMaxDistance);
+
+        new PathMerger().setCalcPoints(tmpCalcPoints).setDouglasPeucker(peucker)
+                .setEnableInstructions(tmpEnableInstructions)
+                .setSimplifyResponse(simplifyResponse && wayPointMaxDistance > 0)
+                .doWork(response, paths, trMap.getWithFallBack(locale));
+        return response;
+    }
+
+    protected List<Path> getPaths(GHRequest request, GHResponse rsp) {
+        if (graph == null || !fullyLoaded)
+            throw new IllegalStateException("Call load or importOrLoad before routing");
+
+        if (graph.isClosed())
+            throw new IllegalStateException("You need to create a new GraphHopper instance as it is already closed");
+
+        String vehicle = request.getVehicle();
+        if (vehicle.isEmpty())
+            vehicle = getDefaultVehicle().toString();
+
+        if (!encodingManager.supports(vehicle)) {
+            rsp.addError(new IllegalArgumentException("Vehicle " + vehicle + " unsupported. " + "Supported are: "
+                    + getEncodingManager()));
+            return Collections.emptyList();
+        }
+
+        TraversalMode tMode;
+        String tModeStr = request.getHints().get("traversal_mode", traversalMode.toString());
+        try {
+            tMode = TraversalMode.fromString(tModeStr);
+        } catch (Exception ex) {
+            rsp.addError(ex);
+            return Collections.emptyList();
+        }
+
+        List<GHPoint> points = request.getPoints();
+        if (points.size() < 2) {
+            rsp.addError(new IllegalStateException("At least 2 points has to be specified, but was:" + points.size()));
+            return Collections.emptyList();
+        }
+
+        visitedSum.set(0);
+
+        FlagEncoder encoder = encodingManager.getEncoder(vehicle);
+        EdgeFilter edgeFilter = new DefaultEdgeFilter(encoder);
+
+        StopWatch sw = new StopWatch().start();
+        List<QueryResult> qResults = new ArrayList<QueryResult>(points.size());
+        for (int placeIndex = 0; placeIndex < points.size(); placeIndex++) {
+            GHPoint point = points.get(placeIndex);
+            QueryResult res = locationIndex.findClosest(point.lat, point.lon, edgeFilter);
+            if (!res.isValid())
+                rsp.addError(new IllegalArgumentException("Cannot find point " + placeIndex + ": " + point));
+
+            qResults.add(res);
+        }
+
+        if (rsp.hasErrors())
+            return Collections.emptyList();
+
+        String debug = "idLookup:" + sw.stop().getSeconds() + "s";
+
+        QueryGraph queryGraph;
+        RoutingAlgorithmFactory tmpAlgoFactory = getAlgorithmFactory();
+        if (chEnabled && !vehicle.equalsIgnoreCase(getDefaultVehicle().toString())) {
+            // fall back to normal traversing
+            tmpAlgoFactory = new RoutingAlgorithmFactorySimple();
+            queryGraph = new QueryGraph(graph.getBaseGraph());
+        } else {
+            queryGraph = new QueryGraph(graph);
+        }
+
+        queryGraph.lookup(qResults);
+
+        List<Path> paths = new ArrayList<Path>(points.size() - 1);
+        QueryResult fromQResult = qResults.get(0);
+        Weighting weighting = createWeighting(request.getHints(), encoder);
+        weighting = createTurnWeighting(weighting, queryGraph, encoder);
+
+        double weightLimit = request.getHints().getDouble("defaultWeightLimit", defaultWeightLimit);
+        String algoStr = request.getAlgorithm().isEmpty() ? AlgorithmOptions.DIJKSTRA_BI : request.getAlgorithm();
+        AlgorithmOptions algoOpts = AlgorithmOptions.start().algorithm(algoStr).traversalMode(tMode)
+                .flagEncoder(encoder).weighting(weighting).build();
+
+        for (int placeIndex = 1; placeIndex < points.size(); placeIndex++) {
+            QueryResult toQResult = qResults.get(placeIndex);
+            sw = new StopWatch().start();
+            RoutingAlgorithm algo = tmpAlgoFactory.createAlgo(queryGraph, algoOpts);
+            algo.setWeightLimit(weightLimit);
+            debug += ", algoInit:" + sw.stop().getSeconds() + "s";
+
+            sw = new StopWatch().start();
+            Path path = algo.calcPath(fromQResult.getClosestNode(), toQResult.getClosestNode());
+            if (path.getTime() < 0)
+                throw new RuntimeException("Time was negative. Please report as bug and include:" + request);
+
+            paths.add(path);
+            debug += ", " + algo.getName() + "-routing:" + sw.stop().getSeconds() + "s, " + path.getDebugInfo();
+
+            visitedSum.addAndGet(algo.getVisitedNodes());
+            fromQResult = toQResult;
+        }
+
+        if (rsp.hasErrors())
+            return Collections.emptyList();
+
+        if (points.size() - 1 != paths.size())
+            throw new RuntimeException("There should be exactly one more places than paths. places:" + points.size()
+                    + ", paths:" + paths.size());
+
+        rsp.setDebugInfo(debug);
+        return paths;
+    }
+
+    protected LocationIndex createLocationIndex(Directory dir) {
+        LocationIndexTree tmpIndex = new LocationIndexTree(graph.getBaseGraph(), dir);
+        tmpIndex.setResolution(preciseIndexResolution);
+        tmpIndex.setMaxRegionSearch(maxRegionSearch);
+        if (!tmpIndex.loadExisting()) {
+            ensureWriteAccess();
+            tmpIndex.prepareIndex();
+        }
+
+        return tmpIndex;
+    }
+
+    /**
+     * Initializes the location index after the import is done.
+     */
+    protected void initLocationIndex() {
+        if (locationIndex != null)
+            throw new IllegalStateException("Cannot initialize locationIndex twice!");
+
+        locationIndex = createLocationIndex(graph.getDirectory());
+    }
+
+    protected void optimize() {
+        logger.info("optimizing ... (" + Helper.getMemInfo() + ")");
+        graph.optimize();
+        logger.info("finished optimize (" + Helper.getMemInfo() + ")");
+
+        // Later: move this into the GraphStorage.optimize method
+        // Or: Doing it after preparation to optimize shortcuts too. But not
+        // possible yet #12
+        if (sortGraph) {
+            if (graph instanceof LevelGraph && isPrepared())
+                throw new IllegalArgumentException("Sorting prepared LevelGraph is not possible yet. See #12");
+
+            GraphStorage newGraph = GHUtility.newStorage(graph);
+            GHUtility.sortDFS(graph, newGraph);
+            logger.info("graph sorted (" + Helper.getMemInfo() + ")");
+            graph = newGraph;
+        }
+    }
+
+    protected void prepare() {
+        boolean tmpPrepare = doPrepare && algoFactory instanceof PrepareContractionHierarchies;
+        if (tmpPrepare) {
+            ensureWriteAccess();
+            logger.info("calling prepare.doWork for " + getDefaultVehicle() + " ... (" + Helper.getMemInfo() + ")");
+            ((PrepareContractionHierarchies) algoFactory).doWork();
+            graph.getProperties().put("prepare.date", formatDateTime(new Date()));
+        }
+        graph.getProperties().put("prepare.done", tmpPrepare);
+    }
+
+    protected void cleanUp() {
+        int prev = graph.getNodes();
+        PrepareRoutingSubnetworks preparation = new PrepareRoutingSubnetworks(graph, encodingManager);
+        preparation.setMinNetworkSize(minNetworkSize);
+        preparation.setMinOneWayNetworkSize(minOneWayNetworkSize);
+        logger.info("start finding subnetworks, " + Helper.getMemInfo());
+        preparation.doWork();
+        int n = graph.getNodes();
+        // calculate remaining subnetworks
+        int remainingSubnetworks = preparation.findSubnetworks().size();
+        logger.info("edges: " + graph.getAllEdges().getCount() + ", nodes " + n + ", there were "
+                + preparation.getSubNetworks() + " subnetworks. removed them => " + (prev - n)
+                + " less nodes. Remaining subnetworks:" + remainingSubnetworks);
+    }
+
+    protected void flush() {
+        logger.info("flushing graph " + graph.toString() + ", details:" + graph.toDetailsString() + ", "
+                + Helper.getMemInfo() + ")");
+        graph.flush();
+        fullyLoaded = true;
+    }
+
+    /**
+     * Releases all associated resources like memory or files. But it does not
+     * remove them. To remove the files created in graphhopperLocation you have
+     * to call clean().
+     */
+    public void close() {
+        if (graph != null)
+            graph.close();
+
+        if (locationIndex != null)
+            locationIndex.close();
+
+        try {
+            lockFactory.forceRemove(fileLockName, true);
+        } catch (Exception ex) {
+            // silently fail e.g. on Windows where we cannot remove an
+            // unreleased native lock
+        }
+    }
+
+    /**
+     * Removes the on-disc routing files. Call only after calling close or
+     * before importOrLoad or load
+     */
+    public void clean() {
+        if (getGraphHopperLocation().isEmpty())
+            throw new IllegalStateException("Cannot clean GraphHopper without specified graphHopperLocation");
+
+        File folder = new File(getGraphHopperLocation());
+        Helper.removeDir(folder);
+    }
+
+    // make sure this is identical to buildDate used in pom.xml
+    // <maven.build.timestamp.format>yyyy-MM-dd'T'HH:mm:ssZ</maven.build.timestamp.format>
+    private String formatDateTime(Date date) {
+        return new SimpleDateFormat("yyyy-MM-dd'T'HH:mm:ssZ").format(date);
+    }
+
+    protected void ensureNotLoaded() {
+        if (fullyLoaded)
+            throw new IllegalStateException("No configuration changes are possible after loading the graph");
+    }
+
+    protected void ensureWriteAccess() {
+        if (!allowWrites)
+            throw new IllegalStateException("Writes are not allowed!");
+    }
+
+    /**
+     * Returns the current sum of the visited nodes while routing. Mainly for
+     * statistic and debugging purposes.
+     */
+    public long getVisitedSum() {
+        return visitedSum.get();
+    }
+
+    public GraphHopper setAsOSMReader() {
+        dataReader = "OSM";
+        return this;
+    }
+
+    public GraphHopper setAsItnReader() {
+        dataReader = "OSITN";
+        return this;
+    }
+
+    public GraphHopper setAsHnReader() {
+        dataReader = "OSHN";
+        return this;
+    }
+
+    public GraphHopper setAsDpnReader() {
+        dataReader = "OSDPN";
+        return this;
+    }
 }
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/AbstractOsDpnOsmAttibuteMappingVisitor.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/AbstractOsDpnOsmAttibuteMappingVisitor.java
index bcd1cfac01..399f557299 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/AbstractOsDpnOsmAttibuteMappingVisitor.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/AbstractOsDpnOsmAttibuteMappingVisitor.java
@@ -1,6 +1,7 @@
 package com.graphhopper.reader.osgb.dpn;
 
 import com.graphhopper.reader.Way;
+import com.graphhopper.routing.util.OsFlagUtils;
 
 /**
  * Created by sadam on 13/02/15.
@@ -9,11 +10,17 @@
     protected String visitorName = this.getClass().getSimpleName().toLowerCase();
 
     @Override
-    public void visitWayAttribute(String attributeValue, Way way) {
+    public boolean visitWayAttribute(String attributeValue, Way way) {
         if (visitorName.equals(attributeValue)) {
             applyAttributes(way);
+            return true;
         }
+        return false;
     }
 
     protected abstract void applyAttributes(Way way);
+
+    protected void setOrAppendTag(Way way, String key, String value) {
+        OsFlagUtils.setOrAppendTag(way, key, value);
+    }
 }
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnOsmAttributeMappingVisitor.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnOsmAttributeMappingVisitor.java
index 70198548c6..66eed80667 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnOsmAttributeMappingVisitor.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnOsmAttributeMappingVisitor.java
@@ -6,5 +6,11 @@
  * Created by sadam on 13/02/15.
  */
 public interface OsDpnOsmAttributeMappingVisitor {
-    void visitWayAttribute(String attributeValue, Way way);
+    /**
+     *
+     * @param attributeValue
+     * @param way
+     * @return true if this visitor handled the attribute
+     */
+    boolean visitWayAttribute(String attributeValue, Way way);
 }
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnReader.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnReader.java
index 825f8738c1..7dfd9d4a00 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnReader.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnReader.java
@@ -35,6 +35,7 @@
 import com.graphhopper.reader.osgb.AbstractOsReader;
 import com.graphhopper.reader.osgb.itn.OSITNTurnRelation;
 import com.graphhopper.storage.GraphStorage;
+import com.graphhopper.util.CmdArgs;
 import com.graphhopper.util.DistanceCalc;
 import com.graphhopper.util.DistanceCalc3D;
 import com.graphhopper.util.DistanceCalcEarth;
@@ -95,8 +96,7 @@
     protected static final int PILLAR_NODE = 1;
     // tower node is <= -3
     protected static final int TOWER_NODE = -2;
-    private static final Logger logger = LoggerFactory
-            .getLogger(OsDpnReader.class);
+    private static final Logger logger = LoggerFactory.getLogger(OsDpnReader.class);
     private long locations;
     private long skippedLocations;
     protected long zeroCounter = 0;
@@ -131,9 +131,11 @@
     private static final String PROCESS_FORMAT = "PROCESS: {}";
     private static final String STORAGE_NODES_FORMAT = "storage nodes: {}";
 
-    public OsDpnReader(GraphStorage storage) {
+    public OsDpnReader(GraphStorage storage, CmdArgs commandLineArguments) {
         super(storage);
-
+        // Not as clean as I would like. Might use Guice.
+        OsDpnWay.THROW_EXCEPTION_ON_INVALID_HAZARD = commandLineArguments != null ? commandLineArguments.getBool(
+                "fail.on.invalid.potentialHazard", false) : false;
         osmNodeIdToInternalNodeMap = new TObjectIntHashMap<String>(200, .5f, -1);
         osmNodeIdToNodeFlagsMap = new TObjectLongHashMap<String>(200, .5f, 0);
         osmWayIdToRouteWeightMap = new TObjectLongHashMap<String>(200, .5f, 0);
@@ -141,7 +143,8 @@ public OsDpnReader(GraphStorage storage) {
     }
 
     public class ProcessVisitor {
-        public void process(ProcessData processData, OsDpnInputFile in) throws XMLStreamException, MismatchedDimensionException, FactoryException, TransformException {
+        public void process(ProcessData processData, OsDpnInputFile in) throws XMLStreamException,
+        MismatchedDimensionException, FactoryException, TransformException {
         }
     }
 
@@ -163,8 +166,7 @@ protected void preProcessSingleFile(File dpnFile) {
             long tmpRelationCounter = 1;
             RoutingElement item;
             while ((item = in.getNext()) != null) {
-                logger.trace("OsDpnReader.preProcess( " + item.getType()
-                        + " )");
+                logger.trace("OsDpnReader.preProcess( " + item.getType() + " )");
                 if (item.isType(OSMElement.WAY)) {
                     final OsDpnWay way = (OsDpnWay) item;
                     boolean valid = filterWay(way);
@@ -178,9 +180,7 @@ protected void preProcessSingleFile(File dpnFile) {
                         }
 
                         if (++tmpWayCounter % 500000 == 0) {
-                            logger.info(nf(tmpWayCounter)
-                                    + " (preprocess), osmIdMap:"
-                                    + nf(getNodeMap().size())
+                            logger.info(nf(tmpWayCounter) + " (preprocess), osmIdMap:" + nf(getNodeMap().size())
                                     + Helper.getMemInfo());
                         }
                     }
@@ -199,8 +199,7 @@ protected void preProcessSingleFile(File dpnFile) {
 
     private TLongObjectMap<String> getEdgeIdToOsmidMap() {
         if (edgeIdToOsmIdMap == null)
-            edgeIdToOsmIdMap = new TLongObjectHashMap<String>(
-                    getOsmIdStoreRequiredSet().size());
+            edgeIdToOsmIdMap = new TLongObjectHashMap<String>(getOsmIdStoreRequiredSet().size());
 
         return edgeIdToOsmIdMap;
     }
@@ -219,14 +218,15 @@ boolean filterWay(OsDpnWay way) {
             return false;
 
         // ignore multipolygon geometry
-        //if (!way.hasTags())
-        //    return false;
+        // if (!way.hasTags())
+        // return false;
 
         return encodingManager.acceptWay(way) > 0;
     }
 
     /**
      * Creates the edges and nodes files from the specified osm file.
+     *
      * @throws TransformException
      * @throws FactoryException
      * @throws IOException
@@ -234,14 +234,16 @@ boolean filterWay(OsDpnWay way) {
      * @throws MismatchedDimensionException
      */
     @Override
-    protected void writeOsm2Graph(File osmFile) throws MismatchedDimensionException, XMLStreamException, IOException, FactoryException, TransformException {
+    protected void writeOsm2Graph(File osmFile) throws MismatchedDimensionException, XMLStreamException, IOException,
+    FactoryException, TransformException {
         int tmp = Math.max(getNodeMap().size() / 50, 100);
         graphStorage.create(tmp);
         ProcessData processData = new ProcessData();
         try {
             ProcessVisitor processVisitor = new ProcessVisitor() {
                 @Override
-                public void process(ProcessData processData, OsDpnInputFile in) throws XMLStreamException, MismatchedDimensionException, FactoryException, TransformException {
+                public void process(ProcessData processData, OsDpnInputFile in) throws XMLStreamException,
+                MismatchedDimensionException, FactoryException, TransformException {
                     logger.info("PROCESS STAGE 1");
                     processStageOne(in);
                 }
@@ -250,7 +252,8 @@ public void process(ProcessData processData, OsDpnInputFile in) throws XMLStream
             writeOsm2GraphFromDirOrFile(osmFile, processData, processVisitor);
             processVisitor = new ProcessVisitor() {
                 @Override
-                public void process(ProcessData processData, OsDpnInputFile in) throws XMLStreamException, MismatchedDimensionException, FactoryException, TransformException {
+                public void process(ProcessData processData, OsDpnInputFile in) throws XMLStreamException,
+                MismatchedDimensionException, FactoryException, TransformException {
                     logger.info("PROCESS STAGE 2");
                     processStageTwo(processData, in);
                 }
@@ -259,7 +262,8 @@ public void process(ProcessData processData, OsDpnInputFile in) throws XMLStream
             writeOsm2GraphFromDirOrFile(osmFile, processData, processVisitor);
             processVisitor = new ProcessVisitor() {
                 @Override
-                public void process(ProcessData processData, OsDpnInputFile in) throws XMLStreamException, MismatchedDimensionException, FactoryException, TransformException {
+                public void process(ProcessData processData, OsDpnInputFile in) throws XMLStreamException,
+                MismatchedDimensionException, FactoryException, TransformException {
                     logger.info("PROCESS STAGE 3");
                     processStageThree(processData, in);
                 }
@@ -275,7 +279,8 @@ public void process(ProcessData processData, OsDpnInputFile in) throws XMLStream
 
     }
 
-    private void writeOsm2GraphFromDirOrFile(File osmFile, ProcessData processData, ProcessVisitor processVisitor) throws XMLStreamException, IOException, MismatchedDimensionException, FactoryException, TransformException {
+    private void writeOsm2GraphFromDirOrFile(File osmFile, ProcessData processData, ProcessVisitor processVisitor)
+            throws XMLStreamException, IOException, MismatchedDimensionException, FactoryException, TransformException {
         if (osmFile.isDirectory()) {
             String absolutePath = osmFile.getAbsolutePath();
             String[] list = osmFile.list();
@@ -288,7 +293,8 @@ private void writeOsm2GraphFromDirOrFile(File osmFile, ProcessData processData,
         }
     }
 
-    private void writeOsm2GraphFromSingleFile(File osmFile, ProcessData processData, ProcessVisitor processVisitor) throws XMLStreamException, IOException, MismatchedDimensionException, FactoryException, TransformException {
+    private void writeOsm2GraphFromSingleFile(File osmFile, ProcessData processData, ProcessVisitor processVisitor)
+            throws XMLStreamException, IOException, MismatchedDimensionException, FactoryException, TransformException {
         OsDpnInputFile in = null;
         try {
             logger.info(PROCESS_FORMAT, osmFile.getName());
@@ -301,8 +307,8 @@ private void writeOsm2GraphFromSingleFile(File osmFile, ProcessData processData,
         }
     }
 
-
-    private List<OsDpnNode> prepareWaysNodes(RoutingElement item, TObjectIntMap<String> nodeFilter) throws MismatchedDimensionException, FactoryException, TransformException {
+    private List<OsDpnNode> prepareWaysNodes(RoutingElement item, TObjectIntMap<String> nodeFilter)
+            throws MismatchedDimensionException, FactoryException, TransformException {
         List<OsDpnNode> evaluateWayNodes = ((OsDpnWay) item).evaluateWayNodes(null);
         for (OsDpnNode osdpnNode : evaluateWayNodes) {
             nodeFilter.put(osdpnNode.getId(), PILLAR_NODE);
@@ -340,18 +346,14 @@ void processWay(OsDpnWay way) {
             int last = getNodeMap().get(osmNodeIds.get(osmNodeIds.size() - 1));
             double firstLat = getTmpLatitude(first), firstLon = getTmpLongitude(first);
             double lastLat = getTmpLatitude(last), lastLon = getTmpLongitude(last);
-            if (!Double.isNaN(firstLat) && !Double.isNaN(firstLon)
-                    && !Double.isNaN(lastLat) && !Double.isNaN(lastLon)) {
-                double estimatedDist = distCalc.calcDist(firstLat, firstLon,
-                        lastLat, lastLon);
+            if (!Double.isNaN(firstLat) && !Double.isNaN(firstLon) && !Double.isNaN(lastLat) && !Double.isNaN(lastLon)) {
+                double estimatedDist = distCalc.calcDist(firstLat, firstLon, lastLat, lastLon);
                 way.setTag("estimated_distance", estimatedDist);
-                way.setTag("estimated_center", new GHPoint(
-                        (firstLat + lastLat) / 2, (firstLon + lastLon) / 2));
+                way.setTag("estimated_center", new GHPoint((firstLat + lastLat) / 2, (firstLon + lastLon) / 2));
             }
         }
 
-        long wayFlags = encodingManager.handleWayTags(way, includeWay,
-                relationFlags);
+        long wayFlags = encodingManager.handleWayTags(way, includeWay, relationFlags);
         if (wayFlags == 0)
             return;
 
@@ -379,19 +381,15 @@ void processWay(OsDpnWay way) {
 
                         // add way up to barrier shadow node
                         String transfer[] = { "" };
-                        transfer = osmNodeIds.subList(lastBarrier,
-                                i - lastBarrier + 1).toArray(transfer);
+                        transfer = osmNodeIds.subList(lastBarrier, i - lastBarrier + 1).toArray(transfer);
                         transfer[transfer.length - 1] = newNodeId;
-                        createdEdges.addAll(addOSMWay(transfer, wayFlags,
-                                wayOsmId));
+                        createdEdges.addAll(addOSMWay(transfer, wayFlags, wayOsmId));
 
                         // create zero length edge for barrier
-                        createdEdges.addAll(addBarrierEdge(newNodeId, nodeId,
-                                wayFlags, nodeFlags, wayOsmId));
+                        createdEdges.addAll(addBarrierEdge(newNodeId, nodeId, wayFlags, nodeFlags, wayOsmId));
                     } else {
                         // run edge from real first node to shadow node
-                        createdEdges.addAll(addBarrierEdge(nodeId, newNodeId,
-                                wayFlags, nodeFlags, wayOsmId));
+                        createdEdges.addAll(addBarrierEdge(nodeId, newNodeId, wayFlags, nodeFlags, wayOsmId));
 
                         // exchange first node for created barrier node
                         osmNodeIds.set(0, newNodeId);
@@ -406,8 +404,7 @@ void processWay(OsDpnWay way) {
         if (lastBarrier >= 0) {
             if (lastBarrier < size - 1) {
                 String transfer[] = { "" };
-                transfer = osmNodeIds.subList(lastBarrier, size - lastBarrier)
-                        .toArray(transfer);
+                transfer = osmNodeIds.subList(lastBarrier, size - lastBarrier).toArray(transfer);
                 createdEdges.addAll(addOSMWay(transfer, wayFlags, wayOsmId));
             }
         } else {
@@ -492,7 +489,7 @@ public int getInternalNodeIdOfOsmNode(String nodeOsmId) {
     }
 
     private void processNode(OsDpnNode node) {
-    	logger.trace("PROCESSING:" + node.getId());
+        logger.trace("PROCESSING:" + node.getId());
         if (isInBounds(node)) {
             addNode(node);
 
@@ -520,8 +517,7 @@ boolean addNode(OsDpnNode node) {
         if (nodeType == TOWER_NODE) {
             addTowerNode(node.getId(), lat, lon, ele);
         } else if (nodeType == PILLAR_NODE) {
-        	logger.trace("OsDpnReader.addPillarNode(" + nextPillarId
-        			+ ")");
+            logger.trace("OsDpnReader.addPillarNode(" + nextPillarId + ")");
             pillarInfo.setNode(nextPillarId, lat, lon, ele);
             getNodeMap().put(node.getId(), nextPillarId + 3);
             nextPillarId++;
@@ -530,8 +526,7 @@ boolean addNode(OsDpnNode node) {
     }
 
     private double getElevation(Node node) {
-        if(null==elevationProvider)
-        {
+        if (null == elevationProvider) {
             String eleString = node.getTag("ele");
             return Double.valueOf(eleString);
         }
@@ -574,8 +569,7 @@ void prepareHighwayNode(String idStr) {
     }
 
     int addTowerNode(String osmId, double lat, double lon, double ele) {
-    	logger.trace("OsDpnReader.addTowerNode(" + osmId
-    			+ ")");
+        logger.trace("OsDpnReader.addTowerNode(" + osmId + ")");
         if (nodeAccess.is3D())
             nodeAccess.setNode(nextTowerId, lat, lon, ele);
         else
@@ -591,10 +585,8 @@ int addTowerNode(String osmId, double lat, double lon, double ele) {
      * This method creates from an OSM way (via the osm ids) one or more edges
      * in the graph.
      */
-    Collection<EdgeIteratorState> addOSMWay(String[] osmNodeIds, long flags,
-            String wayOsmId) {
-        PointList pointList = new PointList(osmNodeIds.length,
-                nodeAccess.is3D());
+    Collection<EdgeIteratorState> addOSMWay(String[] osmNodeIds, long flags, String wayOsmId) {
+        PointList pointList = new PointList(osmNodeIds.length, nodeAccess.is3D());
         List<EdgeIteratorState> newEdges = new ArrayList<EdgeIteratorState>(5);
         int firstNode = -1;
         int lastIndex = osmNodeIds.length - 1;
@@ -618,16 +610,14 @@ int addTowerNode(String osmId, double lat, double lon, double ele) {
                     // current file.
                     // => if the node before was a pillar node then convert into
                     // to tower node (as it is also end-standing).
-                    if (!pointList.isEmpty()
-                            && lastInBoundsPillarNode > -TOWER_NODE) {
+                    if (!pointList.isEmpty() && lastInBoundsPillarNode > -TOWER_NODE) {
                         // transform the pillar node to a tower node
                         tmpNode = lastInBoundsPillarNode;
                         tmpNode = handlePillarNode(tmpNode, osmId, null, true);
                         tmpNode = -tmpNode - 3;
                         if (pointList.getSize() > 1 && firstNode >= 0) {
                             // TOWER node
-                            newEdges.add(addEdge(firstNode, tmpNode, pointList,
-                                    flags, wayOsmId));
+                            newEdges.add(addEdge(firstNode, tmpNode, pointList, flags, wayOsmId));
                             pointList.clear();
                             pointList.add(nodeAccess, tmpNode);
                         }
@@ -638,9 +628,7 @@ int addTowerNode(String osmId, double lat, double lon, double ele) {
                 }
 
                 if (tmpNode <= -TOWER_NODE && tmpNode >= TOWER_NODE)
-                    throw new AssertionError(
-                            "Mapped index not in correct bounds " + tmpNode
-                            + ", " + osmId);
+                    throw new AssertionError("Mapped index not in correct bounds " + tmpNode + ", " + osmId);
 
                 if (tmpNode > -TOWER_NODE) {
                     boolean convertToTowerNode = i == 0 || i == lastIndex;
@@ -649,8 +637,7 @@ int addTowerNode(String osmId, double lat, double lon, double ele) {
                     }
 
                     // PILLAR node, but convert to towerNode if end-standing
-                    tmpNode = handlePillarNode(tmpNode, osmId, pointList,
-                            convertToTowerNode);
+                    tmpNode = handlePillarNode(tmpNode, osmId, pointList, convertToTowerNode);
                 }
 
                 if (tmpNode < TOWER_NODE) {
@@ -658,8 +645,7 @@ int addTowerNode(String osmId, double lat, double lon, double ele) {
                     tmpNode = -tmpNode - 3;
                     pointList.add(nodeAccess, tmpNode);
                     if (firstNode >= 0) {
-                        newEdges.add(addEdge(firstNode, tmpNode, pointList,
-                                flags, wayOsmId));
+                        newEdges.add(addEdge(firstNode, tmpNode, pointList, flags, wayOsmId));
                         pointList.clear();
                         pointList.add(nodeAccess, tmpNode);
                     }
@@ -667,35 +653,28 @@ int addTowerNode(String osmId, double lat, double lon, double ele) {
                 }
             }
         } catch (RuntimeException ex) {
-            logger.error("Couldn't properly add edge with osm ids:"
-                    + osmNodeIds, ex);
+            logger.error("Couldn't properly add edge with osm ids:" + osmNodeIds, ex);
             if (exitOnlyPillarNodeException)
                 throw ex;
         }
         return newEdges;
     }
 
-    EdgeIteratorState addEdge(int fromIndex, int toIndex, PointList pointList,
-            long flags, String wayOsmId) {
+    EdgeIteratorState addEdge(int fromIndex, int toIndex, PointList pointList, long flags, String wayOsmId) {
         // sanity checks
         if (fromIndex < 0 || toIndex < 0)
-            throw new AssertionError(
-                    "to or from index is invalid for this edge " + fromIndex
-                    + "->" + toIndex + ", points:" + pointList);
+            throw new AssertionError("to or from index is invalid for this edge " + fromIndex + "->" + toIndex
+                    + ", points:" + pointList);
         if (pointList.getDimension() != nodeAccess.getDimension())
-            throw new AssertionError(
-                    "Dimension does not match for pointList vs. nodeAccess "
-                            + pointList.getDimension() + " <-> "
-                            + nodeAccess.getDimension());
+            throw new AssertionError("Dimension does not match for pointList vs. nodeAccess "
+                    + pointList.getDimension() + " <-> " + nodeAccess.getDimension());
 
         double towerNodeDistance = 0;
         double prevLat = pointList.getLatitude(0);
         double prevLon = pointList.getLongitude(0);
-        double prevEle = pointList.is3D() ? pointList.getElevation(0)
-                : Double.NaN;
+        double prevEle = pointList.is3D() ? pointList.getElevation(0) : Double.NaN;
         double lat, lon, ele = Double.NaN;
-        PointList pillarNodes = new PointList(pointList.getSize() - 2,
-                nodeAccess.is3D());
+        PointList pillarNodes = new PointList(pointList.getSize() - 2, nodeAccess.is3D());
         int nodes = pointList.getSize();
         for (int i = 1; i < nodes; i++) {
             // we could save some lines if we would use
@@ -704,12 +683,10 @@ EdgeIteratorState addEdge(int fromIndex, int toIndex, PointList pointList,
             lon = pointList.getLongitude(i);
             if (pointList.is3D()) {
                 ele = pointList.getElevation(i);
-                towerNodeDistance += distCalc3D.calcDist(prevLat, prevLon,
-                        prevEle, lat, lon, ele);
+                towerNodeDistance += distCalc3D.calcDist(prevLat, prevLon, prevEle, lat, lon, ele);
                 prevEle = ele;
             } else
-                towerNodeDistance += distCalc.calcDist(prevLat, prevLon, lat,
-                        lon);
+                towerNodeDistance += distCalc.calcDist(prevLat, prevLon, lat, lon);
             prevLat = lat;
             prevLon = lon;
             if (nodes > 2 && i < nodes - 1) {
@@ -727,8 +704,7 @@ EdgeIteratorState addEdge(int fromIndex, int toIndex, PointList pointList,
             towerNodeDistance = 0.0001;
         }
 
-        EdgeIteratorState iter = graphStorage.edge(fromIndex, toIndex)
-                .setDistance(towerNodeDistance).setFlags(flags);
+        EdgeIteratorState iter = graphStorage.edge(fromIndex, toIndex).setDistance(towerNodeDistance).setFlags(flags);
         if (nodes > 2) {
             if (doSimplify)
                 simplifyAlgo.simplify(pillarNodes);
@@ -748,23 +724,19 @@ private void storeOSMWayID(int edgeId, String osmWayID) {
     /**
      * @return converted tower node
      */
-    private int handlePillarNode(int tmpNode, String osmId,
-            PointList pointList, boolean convertToTowerNode) {
-        logger.info("Converting Pillar " + osmId, " to pillar? "
-                + convertToTowerNode);
+    private int handlePillarNode(int tmpNode, String osmId, PointList pointList, boolean convertToTowerNode) {
+        logger.info("Converting Pillar " + osmId, " to pillar? " + convertToTowerNode);
         tmpNode = tmpNode - 3;
         double lat = pillarInfo.getLatitude(tmpNode);
         double lon = pillarInfo.getLongitude(tmpNode);
         double ele = pillarInfo.getElevation(tmpNode);
         if (lat == Double.MAX_VALUE || lon == Double.MAX_VALUE)
-            throw new RuntimeException(
-                    "Conversion pillarNode to towerNode already happended!? "
-                            + "osmId:" + osmId + " pillarIndex:" + tmpNode);
+            throw new RuntimeException("Conversion pillarNode to towerNode already happended!? " + "osmId:" + osmId
+                    + " pillarIndex:" + tmpNode);
 
         if (convertToTowerNode) {
             // convert pillarNode type to towerNode, make pillar values invalid
-            pillarInfo.setNode(tmpNode, Double.MAX_VALUE, Double.MAX_VALUE,
-                    Double.MAX_VALUE);
+            pillarInfo.setNode(tmpNode, Double.MAX_VALUE, Double.MAX_VALUE, Double.MAX_VALUE);
             tmpNode = addTowerNode(osmId, lat, lon, ele);
         } else {
             if (pointList.is3D())
@@ -814,8 +786,7 @@ private String createNewNodeId() {
     /**
      * Add a zero length edge with reduced routing options to the graph.
      */
-    Collection<EdgeIteratorState> addBarrierEdge(String fromId, String toId,
-            long flags, long nodeFlags, String wayOsmId) {
+    Collection<EdgeIteratorState> addBarrierEdge(String fromId, String toId, long flags, long nodeFlags, String wayOsmId) {
         // clear barred directions from routing flags
         flags &= ~nodeFlags;
         // add edge
@@ -831,8 +802,7 @@ private String createNewNodeId() {
      *         relation
      */
     TurnRelation createTurnRelation(Relation relation) {
-        OSMTurnRelation.Type type = OSITNTurnRelation
-                .getRestrictionType(relation.getTag("restriction"));
+        OSMTurnRelation.Type type = OSITNTurnRelation.getRestrictionType(relation.getTag("restriction"));
         if (type != OSMTurnRelation.Type.UNSUPPORTED) {
             long fromWayID = -1;
             long viaNodeID = -1;
@@ -845,13 +815,11 @@ TurnRelation createTurnRelation(Relation relation) {
                     } else if ("to".equals(member.role())) {
                         toWayID = member.ref();
                     }
-                } else if (OSMElement.NODE == member.type()
-                        && "via".equals(member.role())) {
+                } else if (OSMElement.NODE == member.type() && "via".equals(member.role())) {
                     viaNodeID = member.ref();
                 }
             }
-            if (type != OSMTurnRelation.Type.UNSUPPORTED && fromWayID >= 0
-                    && toWayID >= 0 && viaNodeID >= 0) {
+            if (type != OSMTurnRelation.Type.UNSUPPORTED && fromWayID >= 0 && toWayID >= 0 && viaNodeID >= 0) {
                 return new OSMTurnRelation(fromWayID, viaNodeID, toWayID, type);
             }
         }
@@ -880,18 +848,15 @@ boolean isInBounds(Node node) {
         return osmWayIdToRouteWeightMap;
     }
 
-
     private void printInfo(String str) {
         LoggerFactory.getLogger(getClass()).info(
-                "finished " + str + " processing." + " nodes: "
-                        + graphStorage.getNodes() + ", osmIdMap.size:"
-                        + getNodeMap().size() + ", osmIdMap:"
-                        + ", nodeFlagsMap.size:" + getNodeFlagsMap().size()
-                        + ", relFlagsMap.size:" + getRelFlagsMap().size() + " "
-                        + Helper.getMemInfo());
+                "finished " + str + " processing." + " nodes: " + graphStorage.getNodes() + ", osmIdMap.size:"
+                        + getNodeMap().size() + ", osmIdMap:" + ", nodeFlagsMap.size:" + getNodeFlagsMap().size()
+                        + ", relFlagsMap.size:" + getRelFlagsMap().size() + " " + Helper.getMemInfo());
     }
 
-    private void processStageOne(OsDpnInputFile in) throws XMLStreamException, MismatchedDimensionException, FactoryException, TransformException {
+    private void processStageOne(OsDpnInputFile in) throws XMLStreamException, MismatchedDimensionException,
+    FactoryException, TransformException {
         RoutingElement item;
         while ((item = in.getNext()) != null) {
             switch (item.getType()) {
@@ -906,24 +871,27 @@ private void processStageOne(OsDpnInputFile in) throws XMLStreamException, Misma
         }
     }
 
-    private void processStageTwo(ProcessData processData, OsDpnInputFile in) throws XMLStreamException, MismatchedDimensionException, FactoryException, TransformException {
+    private void processStageTwo(ProcessData processData, OsDpnInputFile in) throws XMLStreamException,
+    MismatchedDimensionException, FactoryException, TransformException {
         RoutingElement item;
         while ((item = in.getNext()) != null) {
             switch (item.getType()) {
             case OSMElement.WAY:
-            OsDpnWay dpnWay = (OsDpnWay) item;
-            logger.info("WAY:" + dpnWay.getId() + ":" + processData.wayStart);
-            if (processData.wayStart < 0) {
-                logger.info(nf(processData.counter) + ", now parsing ways");
-                processData.wayStart = processData.counter;
+                OsDpnWay dpnWay = (OsDpnWay) item;
+                logger.info("WAY:" + dpnWay.getId() + ":" + processData.wayStart);
+                if (processData.wayStart < 0) {
+                    logger.info(nf(processData.counter) + ", now parsing ways");
+                    processData.wayStart = processData.counter;
+                }
+                prepareWaysNodes(dpnWay, getNodeMap());
+                processWay(dpnWay);
+                dpnWay.clearStoredCoords();
             }
-            prepareWaysNodes(dpnWay, getNodeMap());
-            processWay(dpnWay);
-            dpnWay.clearStoredCoords();
-        }}
+        }
     }
 
-    private void processStageThree(ProcessData processData, OsDpnInputFile in) throws XMLStreamException, MismatchedDimensionException, FactoryException, TransformException {
+    private void processStageThree(ProcessData processData, OsDpnInputFile in) throws XMLStreamException,
+    MismatchedDimensionException, FactoryException, TransformException {
         RoutingElement item;
         if (processData.relationStart < 0) {
             logger.info(nf(processData.counter) + ", now parsing relations");
@@ -934,7 +902,8 @@ private void processStageThree(ProcessData processData, OsDpnInputFile in) throw
             case OSMElement.RELATION:
                 processRelation((Relation) item);
                 if (++processData.counter % 5000000 == 0) {
-                    logger.info(nf(processData.counter) + ", locs:" + nf(locations) + " (" + skippedLocations + ") " + Helper.getMemInfo());
+                    logger.info(nf(processData.counter) + ", locs:" + nf(locations) + " (" + skippedLocations + ") "
+                            + Helper.getMemInfo());
                 }
             }
         }
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnWay.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnWay.java
index 11488d1eb2..cebdf35916 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnWay.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/OsDpnWay.java
@@ -43,6 +43,7 @@
 import com.graphhopper.reader.osgb.dpn.potentialHazards.Cliff;
 import com.graphhopper.reader.osgb.dpn.potentialHazards.Foreshore;
 import com.graphhopper.reader.osgb.dpn.potentialHazards.InlandWater;
+import com.graphhopper.reader.osgb.dpn.potentialHazards.InvalidPotentialHazardException;
 import com.graphhopper.reader.osgb.dpn.potentialHazards.Marsh;
 import com.graphhopper.reader.osgb.dpn.potentialHazards.Mud;
 import com.graphhopper.reader.osgb.dpn.potentialHazards.QuarryOrPit;
@@ -83,7 +84,9 @@
         new Marsh(), new Mud(), new Sand(), new Scree(), new Shingle(), new Spoil(), new Rock(), new TidalWater(),
         new QuarryOrPit(), new InlandWater(), new Foreshore() };
     private static OsDpnOsmAttributeMappingVisitor[] ADDITIONAL_RIGHTS_VISITORS = { new AdoptedByNationalCycleRoute(),
-            new AdoptedByOtherCycleRoute(), new AdoptedByRecreationalRoute(), new WithinAccessLand() };
+        new AdoptedByOtherCycleRoute(), new AdoptedByRecreationalRoute(), new WithinAccessLand() };
+
+    public static boolean THROW_EXCEPTION_ON_INVALID_HAZARD = false;
 
     /**
      * Constructor for XML Parser
@@ -160,12 +163,40 @@ protected int handleRightOfUse(XMLStreamReader parser) throws XMLStreamException
     @Override
     protected int handlePotentialHazard(XMLStreamReader parser) throws XMLStreamException {
         String attributeValue = parser.getElementText().replaceAll(" ", "").toLowerCase();
-        for (OsDpnOsmAttributeMappingVisitor visitor : POTENTIAL_HAZARD_VISITORS) {
-            visitor.visitWayAttribute(attributeValue, this);
+        // DPN data has a defect where potential hazards are currently comma
+        // delimited rather than having multiple elements
+        if (attributeValue.indexOf(",") > -1) {
+            for (String subValue : attributeValue.split(",")) {
+                visitPotentialHazards(subValue);
+            }
+        } else {
+            visitPotentialHazards(attributeValue);
         }
         return parser.getEventType();
     }
 
+    private void visitPotentialHazards(String attributeValue) throws XMLStreamException {
+        // Code to handle error in beta DPN data such that multiple potential
+        // hazards are not specified as multiple elements such as:
+        // <dpn:potentialHazardCrossed>Boulders</dpn:potentialHazardCrossed>
+        // <dpn:potentialHazardCrossed>Inland Water</dpn:potentialHazardCrossed>
+        // but a single element comma-space delimited. Such as:
+        // <dpn:potentialHazardCrossed>Boulders, Inland
+        // Wat</dpn:potentialHazardCrossed>
+        boolean handled = false;
+        for (OsDpnOsmAttributeMappingVisitor visitor : POTENTIAL_HAZARD_VISITORS) {
+            handled |= visitor.visitWayAttribute(attributeValue, this);
+        }
+        if (!handled) {
+            System.err.println(">>>>>>> Unsupported <dpn:potentialHazardCrossed> value in : " + attributeValue);
+            if (THROW_EXCEPTION_ON_INVALID_HAZARD) {
+                throw new InvalidPotentialHazardException("Unsupported <dpn:potentialHazardCrossed> value in : "
+                        + attributeValue);
+            }
+        }
+
+    }
+
     @Override
     protected void parseCoords(String lineDefinition) {
         String[] lineSegments = lineDefinition.split(" ");
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Boulders.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Boulders.java
index b49fa13f3f..dbdfea1ab9 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Boulders.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Boulders.java
@@ -9,9 +9,8 @@
 public class Boulders extends AbstractOsDpnOsmAttibuteMappingVisitor {
 
     @Override
-    protected void applyAttributes(Way way)
-    {
-        way.setTag("natural", "boulders");
+    protected void applyAttributes(Way way) {
+        setOrAppendTag(way, "natural", "boulders");
     }
 
 }
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Cliff.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Cliff.java
index 4d50e561ce..e7f91d26a5 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Cliff.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Cliff.java
@@ -9,9 +9,8 @@
 public class Cliff extends AbstractOsDpnOsmAttibuteMappingVisitor {
 
     @Override
-    protected void applyAttributes(Way way)
-    {
-        way.setTag("natural", "cliff");
+    protected void applyAttributes(Way way) {
+        setOrAppendTag(way, "natural", "cliff");
     }
 
 }
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Foreshore.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Foreshore.java
index dfeb7a052a..8bf388e8a7 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Foreshore.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Foreshore.java
@@ -9,9 +9,8 @@
 public class Foreshore extends AbstractOsDpnOsmAttibuteMappingVisitor {
 
     @Override
-    protected void applyAttributes(Way way)
-    {
-        way.setTag("water", "tidal");
+    protected void applyAttributes(Way way) {
+        setOrAppendTag(way, "water", "tidal");
     }
 
 }
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/InlandWater.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/InlandWater.java
index 6dd2c06eb8..a1ad54e788 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/InlandWater.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/InlandWater.java
@@ -9,9 +9,9 @@
 public class InlandWater extends AbstractOsDpnOsmAttibuteMappingVisitor {
 
     @Override
-    protected void applyAttributes(Way way)
-    {
-        way.setTag("natural", "water");
+    protected void applyAttributes(Way way) {
+        setOrAppendTag(way, "natural", "water");
+        setOrAppendTag(way, "tidal", "no");
     }
 
 }
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/InvalidPotentialHazardException.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/InvalidPotentialHazardException.java
new file mode 100644
index 0000000000..2d7e2971c0
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/InvalidPotentialHazardException.java
@@ -0,0 +1,10 @@
+package com.graphhopper.reader.osgb.dpn.potentialHazards;
+
+import javax.xml.stream.XMLStreamException;
+
+public class InvalidPotentialHazardException extends XMLStreamException {
+
+    public InvalidPotentialHazardException(String msg) {
+        super(msg);
+    }
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Marsh.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Marsh.java
index bdf774b10e..1bf6f1b3a4 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Marsh.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Marsh.java
@@ -9,9 +9,8 @@
 public class Marsh extends AbstractOsDpnOsmAttibuteMappingVisitor {
 
     @Override
-    protected void applyAttributes(Way way)
-    {
-        way.setTag("wetland", "marsh");
+    protected void applyAttributes(Way way) {
+        setOrAppendTag(way, "wetland", "marsh");
     }
 
 }
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Mud.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Mud.java
index 6e225ca37b..fad73016c7 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Mud.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Mud.java
@@ -9,9 +9,8 @@
 public class Mud extends AbstractOsDpnOsmAttibuteMappingVisitor {
 
     @Override
-    protected void applyAttributes(Way way)
-    {
-        way.setTag("natural", "mud");
+    protected void applyAttributes(Way way) {
+        setOrAppendTag(way, "natural", "mud");
     }
 
 }
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/QuarryOrPit.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/QuarryOrPit.java
index b20c840de1..55d7c8fe62 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/QuarryOrPit.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/QuarryOrPit.java
@@ -9,9 +9,8 @@
 public class QuarryOrPit extends AbstractOsDpnOsmAttibuteMappingVisitor {
 
     @Override
-    protected void applyAttributes(Way way)
-    {
-        way.setTag("natural", "excavation");
+    protected void applyAttributes(Way way) {
+        setOrAppendTag(way, "natural", "excavation");
     }
 
 }
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Rock.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Rock.java
index bf6712bbbc..ad83eaf547 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Rock.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Rock.java
@@ -9,9 +9,8 @@
 public class Rock extends AbstractOsDpnOsmAttibuteMappingVisitor {
 
     @Override
-    protected void applyAttributes(Way way)
-    {
-        way.setTag("natural", "rocks");
+    protected void applyAttributes(Way way) {
+        setOrAppendTag(way, "natural", "rocks");
     }
 
 }
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Sand.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Sand.java
index b08ebba90d..1a78705c13 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Sand.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Sand.java
@@ -9,9 +9,8 @@
 public class Sand extends AbstractOsDpnOsmAttibuteMappingVisitor {
 
     @Override
-    protected void applyAttributes(Way way)
-    {
-        way.setTag("natural", "sand");
+    protected void applyAttributes(Way way) {
+        setOrAppendTag(way, "natural", "sand");
     }
 
 }
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Scree.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Scree.java
index a49105aafa..80e50d909c 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Scree.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Scree.java
@@ -9,9 +9,8 @@
 public class Scree extends AbstractOsDpnOsmAttibuteMappingVisitor {
 
     @Override
-    protected void applyAttributes(Way way)
-    {
-        way.setTag("natural", "scree");
+    protected void applyAttributes(Way way) {
+        setOrAppendTag(way, "natural", "scree");
     }
 
 }
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Shingle.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Shingle.java
index 1519f73388..6ab889b21e 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Shingle.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Shingle.java
@@ -9,9 +9,8 @@
 public class Shingle extends AbstractOsDpnOsmAttibuteMappingVisitor {
 
     @Override
-    protected void applyAttributes(Way way)
-    {
-        way.setTag("natural", "shingle");
+    protected void applyAttributes(Way way) {
+        setOrAppendTag(way, "natural", "shingle");
     }
 
 }
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Spoil.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Spoil.java
index 656327d875..214ab87c73 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Spoil.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/Spoil.java
@@ -9,9 +9,8 @@
 public class Spoil extends AbstractOsDpnOsmAttibuteMappingVisitor {
 
     @Override
-    protected void applyAttributes(Way way)
-    {
-        way.setTag("man_made", "spoil_heap");
+    protected void applyAttributes(Way way) {
+        setOrAppendTag(way, "man_made", "spoil_heap");
     }
 
 }
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/TidalWater.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/TidalWater.java
index 4b572288d7..98652a3f60 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/TidalWater.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialHazards/TidalWater.java
@@ -9,10 +9,9 @@
 public class TidalWater extends AbstractOsDpnOsmAttibuteMappingVisitor {
 
     @Override
-    protected void applyAttributes(Way way)
-    {
-    	way.setTag("natural", "water");
-        way.setTag("tidal", "yes");
+    protected void applyAttributes(Way way) {
+        setOrAppendTag(way, "natural", "water");
+        setOrAppendTag(way, "tidal", "yes");
     }
 
 }
diff --git a/core/src/main/java/com/graphhopper/routing/util/OsAvoidanceDecorator.java b/core/src/main/java/com/graphhopper/routing/util/OsAvoidanceDecorator.java
index 51f34582c6..f52c79346d 100644
--- a/core/src/main/java/com/graphhopper/routing/util/OsAvoidanceDecorator.java
+++ b/core/src/main/java/com/graphhopper/routing/util/OsAvoidanceDecorator.java
@@ -7,141 +7,133 @@
  */
 public class OsAvoidanceDecorator extends AbstractAvoidanceDecorator {
 
-	protected enum AvoidanceType implements EdgeAttribute {
-		ARoad(1) {
-			@Override
-			public boolean isValidForWay(Way way) {
-				return hasTag(way, "highway", "primary");
-			}
-		},
-		Boulders(2) {
-			@Override
-			public boolean isValidForWay(Way way) {
-				return hasTag(way, "natural", "boulders");
-			}
-		},
-		Cliff(4) {
-			@Override
-			public boolean isValidForWay(Way way) {
-				return hasTag(way, "natural", "cliff");
-			}
-		},
-		InlandWater(8) {
-			@Override
-			public boolean isValidForWay(Way way) {
-				return hasTag(way, "natural", "water")
-						&& way.hasTag("tidal", "no");
-			}
-		},
-		Marsh(16) {
-			@Override
-			public boolean isValidForWay(Way way) {
-				return way.hasTag("wetland", "marsh");
-			}
-		},
-		QuarryOrPit(32) {
-			@Override
-			public boolean isValidForWay(Way way) {
-				return hasTag(way, "natural", "excavation");
-			}
-		},
-		Scree(64) {
-			@Override
-			public boolean isValidForWay(Way way) {
-				return hasTag(way, "natural", "scree");
-			}
-		},
-		Rock(128) {
-			@Override
-			public boolean isValidForWay(Way way) {
-				return hasTag(way, "natural", "rock");
-			}
-		},
-		Mud(256) {
-			@Override
-			public boolean isValidForWay(Way way) {
-				return hasTag(way, "natural", "mud");
-			}
-		},
-		Sand(512) {
-			@Override
-			public boolean isValidForWay(Way way) {
-				return hasTag(way, "natural", "sand");
-			}
-		},
-
-		Shingle(1024) {
-			@Override
-			public boolean isValidForWay(Way way) {
-				return hasTag(way, "natural", "shingle");
-			}
-		}
-		 ,
-		 Spoil(2048) {
-		 @Override
-		 public boolean isValidForWay(Way way) {
-		 return hasTag(way, "natural", "spoil");
-		 }
-		 },
-		
-		 TidalWater(4096) {
-		 @Override
-		 public boolean isValidForWay(Way way) {
-		 return hasTag(way, "natural", "water")
-		 && way.hasTag("tidal", "yes");
-		 }
-		 }
-		;
-
-		public String toString() {
-			return super.toString().toLowerCase();
-		}
-
-		private static boolean hasTag(Way way, String key, String value) {
-			String wayTag = way.getTag(key);
-			if (null != wayTag) {
-				String[] values = wayTag.split(",");
-				for (String tvalue : values) {
-					if (tvalue.equals(value)) {
-						return true;
-					}
-				}
-			}
-			return false;
-		}
-
-		private final long value;
-
-		private AvoidanceType(long value) {
-			this.value = value;
-		}
-
-		public long getValue() {
-			return value;
-		}
-
-		public boolean isValidForWay(Way way) {
-			return false;
-		}
-
-		public boolean representedIn(String[] attributes) {
-			for (String attribute : attributes) {
-				if (attribute.equals(this.toString())) {
-					return true;
-				}
-			}
-			return false;
-		}
-
-	}
-
-	protected void defineEncoder(int shift) {
-		wayTypeEncoder = new EncodedValue("HazardType", shift, 14, 1, 0, 8191,
-				true);
-	}
-
-	protected EdgeAttribute[] getEdgeAttributesOfInterest() {
-		return AvoidanceType.values();
-	}
+    protected enum AvoidanceType implements EdgeAttribute {
+        ARoad(1) {
+            @Override
+            public boolean isValidForWay(Way way) {
+                return hasTag(way, "highway", "primary");
+            }
+        },
+        Boulders(2) {
+            @Override
+            public boolean isValidForWay(Way way) {
+                return hasTag(way, "natural", "boulders");
+            }
+        },
+        Cliff(4) {
+            @Override
+            public boolean isValidForWay(Way way) {
+                return hasTag(way, "natural", "cliff");
+            }
+        },
+        InlandWater(8) {
+            @Override
+            public boolean isValidForWay(Way way) {
+                return hasTag(way, "natural", "water") && hasTag(way, "tidal", "no");
+            }
+        },
+        Marsh(16) {
+            @Override
+            public boolean isValidForWay(Way way) {
+                return hasTag(way, "wetland", "marsh");
+            }
+        },
+        QuarryOrPit(32) {
+            @Override
+            public boolean isValidForWay(Way way) {
+                return hasTag(way, "natural", "excavation");
+            }
+        },
+        Scree(64) {
+            @Override
+            public boolean isValidForWay(Way way) {
+                return hasTag(way, "natural", "scree");
+            }
+        },
+        Rock(128) {
+            @Override
+            public boolean isValidForWay(Way way) {
+                return hasTag(way, "natural", "rock");
+            }
+        },
+        Mud(256) {
+            @Override
+            public boolean isValidForWay(Way way) {
+                return hasTag(way, "natural", "mud");
+            }
+        },
+        Sand(512) {
+            @Override
+            public boolean isValidForWay(Way way) {
+                return hasTag(way, "natural", "sand");
+            }
+        },
+
+        Shingle(1024) {
+            @Override
+            public boolean isValidForWay(Way way) {
+                return hasTag(way, "natural", "shingle");
+            }
+        },
+        Spoil(2048) {
+            @Override
+            public boolean isValidForWay(Way way) {
+                return hasTag(way, "natural", "spoil");
+            }
+        },
+
+        TidalWater(4096) {
+            @Override
+            public boolean isValidForWay(Way way) {
+                return hasTag(way, "natural", "water") && hasTag(way, "tidal", "yes");
+            }
+        };
+
+        @Override
+        public String toString() {
+            return super.toString().toLowerCase();
+        }
+
+        private static boolean hasTag(Way way, String key, String value) {
+            return OsFlagUtils.hasTag(way, key, value);
+        }
+
+        private final long value;
+
+        private AvoidanceType(long value) {
+            this.value = value;
+        }
+
+        @Override
+        public long getValue() {
+            return value;
+        }
+
+        @Override
+        public boolean isValidForWay(Way way) {
+            return false;
+        }
+
+        @Override
+        public boolean representedIn(String[] attributes) {
+            for (String attribute : attributes) {
+                if (attribute.equals(this.toString())) {
+                    return true;
+                }
+            }
+            return false;
+        }
+
+    }
+
+    @Override
+    protected void defineEncoder(int shift) {
+        wayTypeEncoder = new EncodedValue("HazardType", shift, 14, 1, 0, 8191, true);
+    }
+
+    @Override
+    protected EdgeAttribute[] getEdgeAttributesOfInterest() {
+        return AvoidanceType.values();
+    }
 
 }
diff --git a/core/src/main/java/com/graphhopper/routing/util/OsFlagUtils.java b/core/src/main/java/com/graphhopper/routing/util/OsFlagUtils.java
new file mode 100644
index 0000000000..b401d038b7
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/routing/util/OsFlagUtils.java
@@ -0,0 +1,35 @@
+package com.graphhopper.routing.util;
+
+import com.graphhopper.reader.Way;
+
+/**
+ * Utility class to contain more complex flag and tag operations
+ *
+ * @author phopkins
+ *
+ */
+public class OsFlagUtils {
+    public static boolean hasTag(Way way, String key, String value) {
+        String wayTag = way.getTag(key);
+        if (null != wayTag) {
+            String[] values = wayTag.split(",");
+            for (String tvalue : values) {
+                if (tvalue.equals(value)) {
+                    return true;
+                }
+            }
+        }
+        return false;
+    }
+
+    public static void setOrAppendTag(Way way, String key, String value) {
+        String currentValue = way.getTag(key);
+        if (currentValue != null) {
+            way.setTag(key, currentValue + "," + value);
+        } else {
+            // This is the first time we are adding it so just add it
+            way.setTag(key, value);
+        }
+    }
+
+}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/AbstractOsDpnReaderTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/AbstractOsDpnReaderTest.java
index 6b94b53417..a794e2dc3f 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/AbstractOsDpnReaderTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/AbstractOsDpnReaderTest.java
@@ -93,13 +93,14 @@ protected EncodingManager createEncodingManager() {
      *
      * @param graph
      * @param file
-     * @param maxWayPointDistance 0 disables DouglasPeuker simplification 1 = default
+     * @param maxWayPointDistance
+     *            0 disables DouglasPeuker simplification 1 = default
      * @return
      * @throws IOException
      */
     protected OsDpnReader readGraphFile(GraphHopperStorage graph, File file, int maxWayPointDistance)
             throws IOException {
-        OsDpnReader osDpnReader = new OsDpnReader(graph);
+        OsDpnReader osDpnReader = new OsDpnReader(graph, null);
         System.out.println("Read " + file.getAbsolutePath());
         osDpnReader.setOSMFile(file);
         osDpnReader.setWayPointMaxDistance(maxWayPointDistance);
@@ -108,12 +109,12 @@ protected OsDpnReader readGraphFile(GraphHopperStorage graph, File file, int max
         return osDpnReader;
     }
 
-    protected GraphHopperStorage configureStorage(
-            boolean turnRestrictionsImport, boolean is3D) {
+    protected GraphHopperStorage configureStorage(boolean turnRestrictionsImport, boolean is3D) {
         String directory = "/tmp";
-        GraphExtension extendedStorage = turnRestrictionsImport ? new TurnCostExtension() : new GraphExtension.NoExtendedStorage();
-        GraphHopperStorage graph = new GraphHopperStorage(new RAMDirectory(
-                directory, false), encodingManager, is3D, extendedStorage);
+        GraphExtension extendedStorage = turnRestrictionsImport ? new TurnCostExtension()
+                : new GraphExtension.NoExtendedStorage();
+        GraphHopperStorage graph = new GraphHopperStorage(new RAMDirectory(directory, false), encodingManager, is3D,
+                extendedStorage);
         footExplorer = graph.createEdgeExplorer(new DefaultEdgeFilter(footEncoder, false, true));
         return graph;
     }
@@ -128,20 +129,16 @@ protected int getEdge(int from, int to) {
         return EdgeIterator.NO_EDGE;
     }
 
-    protected void evaluateRouting(final EdgeIterator iter, final int node,
-            final boolean forward, final boolean backward,
-            final boolean finished) {
+    protected void evaluateRouting(final EdgeIterator iter, final int node, final boolean forward,
+            final boolean backward, final boolean finished) {
         evaluateRouting(iter, node, forward, backward, finished, footEncoder);
     }
 
-    protected void evaluateRouting(final EdgeIterator iter, final int node,
-            final boolean forward, final boolean backward,
-            final boolean finished, AbstractFlagEncoder flagEncoder) {
+    protected void evaluateRouting(final EdgeIterator iter, final int node, final boolean forward,
+            final boolean backward, final boolean finished, AbstractFlagEncoder flagEncoder) {
         assertEquals("Incorrect adjacent node", node, iter.getAdjNode());
-        assertEquals("Incorrect forward instructions", forward,
-                flagEncoder.isForward(iter.getFlags()));
-        assertEquals("Incorrect backward instructions", backward,
-                flagEncoder.isBackward(iter.getFlags()));
+        assertEquals("Incorrect forward instructions", forward, flagEncoder.isForward(iter.getFlags()));
+        assertEquals("Incorrect backward instructions", backward, flagEncoder.isBackward(iter.getFlags()));
         assertEquals(!finished, iter.next());
     }
 
@@ -149,8 +146,7 @@ protected void printNodes(EdgeExplorer outExplorer, int numNodes) {
         for (int i = 0; i < numNodes; i++) {
             // logger.info("Node " + i + " " +
             // count(outExplorer.setBaseNode(i)));
-            System.out.println("Node " + i + " "
-                    + count(outExplorer.setBaseNode(i)));
+            System.out.println("Node " + i + " " + count(outExplorer.setBaseNode(i)));
         }
 
         EdgeIterator iter = null;
@@ -163,30 +159,35 @@ protected void printNodes(EdgeExplorer outExplorer, int numNodes) {
         }
     }
 
-    protected InstructionList route(GraphHopper graphHopper, double lat1, double lon1, double lat2, double lon2, String avoid) {
+    protected InstructionList route(GraphHopper graphHopper, double lat1, double lon1, double lat2, double lon2,
+            String avoid) {
         GHPoint start = new GHPoint(lat1, lon1);
         GHPoint end = new GHPoint(lat2, lon2);
         System.out.println("Route from " + start + " to " + end);
         GHRequest ghRequest = new GHRequest(start, end);
         ghRequest.setVehicle("foot");
-        if(null!=avoid  && !Helper.isEmpty(avoid)) {
+        if (null != avoid && !Helper.isEmpty(avoid)) {
             ghRequest.setWeighting("fastavoid");
             ghRequest.getHints().put("avoidances", avoid);
         }
         GHResponse ghResponse = graphHopper.route(ghRequest);
-        //        System.err.println("ghResponse.getPoints() " + ghResponse.getPoints());
+        // System.err.println("ghResponse.getPoints() " +
+        // ghResponse.getPoints());
         InstructionList instructionList = ghResponse.getInstructions();
-        //        outputInstructionList(instructionList);
+        // outputInstructionList(instructionList);
         return instructionList;
     }
 
     protected void outputInstructionList(InstructionList instructionList) {
-        //        System.err.println("ghResponse.getInstructions() " + ghResponse.getInstructions());
-        //        System.err.println("ghResponse.getDebugInfo() " + ghResponse.getDebugInfo());
+        // System.err.println("ghResponse.getInstructions() " +
+        // ghResponse.getInstructions());
+        // System.err.println("ghResponse.getDebugInfo() " +
+        // ghResponse.getDebugInfo());
         System.out.println("Turn Descriptions:");
         Translation tr = new TranslationMap().doImport().getWithFallBack(Locale.US);
         for (Instruction instruction : instructionList) {
-            System.out.println("\t" + instruction.getName() + "\t" + instruction.getDistance() + "\t" + instruction.getSign() + "\t" + instruction.getTime() + "\t" + instruction.getTurnDescription(tr));
+            System.out.println("\t" + instruction.getName() + "\t" + instruction.getDistance() + "\t"
+                    + instruction.getSign() + "\t" + instruction.getTime() + "\t" + instruction.getTurnDescription(tr));
         }
         System.out.println("End Turn Descriptions");
 
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/OsDpnWayTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/OsDpnWayTest.java
index 63a4657123..544b1d0fb9 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/OsDpnWayTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/OsDpnWayTest.java
@@ -13,591 +13,653 @@
 import org.opengis.referencing.FactoryException;
 import org.opengis.referencing.operation.TransformException;
 
+import com.graphhopper.reader.osgb.dpn.potentialHazards.InvalidPotentialHazardException;
+
 public class OsDpnWayTest {
 
-    public static final String aboveSurfaceWay = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">" +
-            "  <gml:featureMember>\n" +
-            "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">" +
-            "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n" +
-            "      <dpn:versionID>1</dpn:versionID>\n" +
-            "      <dpn:versionDate>2014-12-12</dpn:versionDate>\n" +
-            "      <dpn:startNode xlink:href=\"#df162dd8-c284-469b-81d6-d63105a39c7f\"/>\n" +
-            "      <dpn:endNode xlink:href=\"#56dc4c0b-0586-4849-b3e2-1e00ee149429\"/>\n" +
-            "      <dpn:descriptiveGroup codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork\">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>\n" +
-            "      <dpn:descriptiveTerm codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#NoPhysicalManifestation\">No Physical Manifestation</dpn:descriptiveTerm>\n" +
-            "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#Unmade\">Unmade</dpn:surfaceType>\n" +
-            "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#AboveSurfaceLevelOnStructure\">Above Surface Level On Structure</dpn:physicalLevel>\n" +
-            "      <dpn:name>Named Road</dpn:name>\n" +
-            "      <dpn:adoptedByNationalCycleRoute>false</dpn:adoptedByNationalCycleRoute>\n" +
-            "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n" +
-            "      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>\n" +
-            "      <dpn:withinAccessLand>true</dpn:withinAccessLand>\n" +
-            "      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>\n" +
-            "      <dpn:verticalGain>\n" +
-            "        <dpn:VerticalGainType>\n" +
-            "          <dpn:inDirection uom=\"m\">9</dpn:inDirection>\n" +
-            "          <dpn:againstDirection uom=\"m\">2</dpn:againstDirection>\n" +
-            "        </dpn:VerticalGainType>\n" +
-            "      </dpn:verticalGain>\n" +
-            "      <dpn:planimetricLength uom=\"m\">85</dpn:planimetricLength>\n" +
-            "      <dpn:surfaceLength uom=\"m\">86</dpn:surfaceLength>\n" +
-            "      <dpn:geometry>\n" +
-            "        <gml:LineString srsName=\"urn:ogc:def:crs:EPSG::7405\" gml:id=\"LOCAL_ID_29519\">\n" +
-            "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n" +
-            "        </gml:LineString>\n" +
-            "      </dpn:geometry>\n" +
-            "    </dpn:RouteLink>";
-    public static final String surfaceWay = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">" +
-            "  <gml:featureMember>\n" +
-            "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">" +
-            "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n" +
-            "      <dpn:versionID>1</dpn:versionID>\n" +
-            "      <dpn:versionDate>2014-12-12</dpn:versionDate>\n" +
-            "      <dpn:startNode xlink:href=\"#df162dd8-c284-469b-81d6-d63105a39c7f\"/>\n" +
-            "      <dpn:endNode xlink:href=\"#56dc4c0b-0586-4849-b3e2-1e00ee149429\"/>\n" +
-            "      <dpn:descriptiveGroup codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork\">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>\n" +
-            "      <dpn:descriptiveTerm codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#NoPhysicalManifestation\">No Physical Manifestation</dpn:descriptiveTerm>\n" +
-            "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#Unmade\">Unmade</dpn:surfaceType>\n" +
-            "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#SurfaceLevel\">Surface Level</dpn:physicalLevel>\n" +
-            "      <dpn:name>Named Road</dpn:name>\n" +
-            "      <dpn:adoptedByNationalCycleRoute>false</dpn:adoptedByNationalCycleRoute>\n" +
-            "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n" +
-            "      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>\n" +
-            "      <dpn:withinAccessLand>true</dpn:withinAccessLand>\n" +
-            "      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>\n" +
-            "      <dpn:verticalGain>\n" +
-            "        <dpn:VerticalGainType>\n" +
-            "          <dpn:inDirection uom=\"m\">9</dpn:inDirection>\n" +
-            "          <dpn:againstDirection uom=\"m\">2</dpn:againstDirection>\n" +
-            "        </dpn:VerticalGainType>\n" +
-            "      </dpn:verticalGain>\n" +
-            "      <dpn:planimetricLength uom=\"m\">85</dpn:planimetricLength>\n" +
-            "      <dpn:surfaceLength uom=\"m\">86</dpn:surfaceLength>\n" +
-            "      <dpn:geometry>\n" +
-            "        <gml:LineString srsName=\"urn:ogc:def:crs:EPSG::7405\" gml:id=\"LOCAL_ID_29519\">\n" +
-            "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n" +
-            "        </gml:LineString>\n" +
-            "      </dpn:geometry>\n" +
-            "    </dpn:RouteLink>";
-    public static final String tunnelWay = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">" +
-            "  <gml:featureMember>\n" +
-            "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">" +
-            "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n" +
-            "      <dpn:versionID>1</dpn:versionID>\n" +
-            "      <dpn:versionDate>2014-12-12</dpn:versionDate>\n" +
-            "      <dpn:startNode xlink:href=\"#df162dd8-c284-469b-81d6-d63105a39c7f\"/>\n" +
-            "      <dpn:endNode xlink:href=\"#56dc4c0b-0586-4849-b3e2-1e00ee149429\"/>\n" +
-            "      <dpn:descriptiveGroup codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork\">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>\n" +
-            "      <dpn:descriptiveTerm codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#NoPhysicalManifestation\">No Physical Manifestation</dpn:descriptiveTerm>\n" +
-            "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#Unmade\">Unmade</dpn:surfaceType>\n" +
-            "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#BelowSurfaceLevelTunnel\">Below Surface Level Tunnel</dpn:physicalLevel>\n" +
-            "      <dpn:name>Named Road</dpn:name>\n" +
-            "      <dpn:adoptedByNationalCycleRoute>false</dpn:adoptedByNationalCycleRoute>\n" +
-            "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n" +
-            "      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>\n" +
-            "      <dpn:withinAccessLand>true</dpn:withinAccessLand>\n" +
-            "      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>\n" +
-            "      <dpn:verticalGain>\n" +
-            "        <dpn:VerticalGainType>\n" +
-            "          <dpn:inDirection uom=\"m\">9</dpn:inDirection>\n" +
-            "          <dpn:againstDirection uom=\"m\">2</dpn:againstDirection>\n" +
-            "        </dpn:VerticalGainType>\n" +
-            "      </dpn:verticalGain>\n" +
-            "      <dpn:planimetricLength uom=\"m\">85</dpn:planimetricLength>\n" +
-            "      <dpn:surfaceLength uom=\"m\">86</dpn:surfaceLength>\n" +
-            "      <dpn:geometry>\n" +
-            "        <gml:LineString srsName=\"urn:ogc:def:crs:EPSG::7405\" gml:id=\"LOCAL_ID_29519\">\n" +
-            "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n" +
-            "        </gml:LineString>\n" +
-            "      </dpn:geometry>\n" +
-            "    </dpn:RouteLink>";
-
-    public static final String bridleWay = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">" +
-            "  <gml:featureMember>\n" +
-            "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">" +
-            "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n" +
-            "      <dpn:versionID>1</dpn:versionID>\n" +
-            "      <dpn:versionDate>2014-12-12</dpn:versionDate>\n" +
-            "      <dpn:startNode xlink:href=\"#df162dd8-c284-469b-81d6-d63105a39c7f\"/>\n" +
-            "      <dpn:endNode xlink:href=\"#56dc4c0b-0586-4849-b3e2-1e00ee149429\"/>\n" +
-            "      <dpn:descriptiveGroup codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork\">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>\n" +
-            "      <dpn:descriptiveTerm codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#NoPhysicalManifestation\">No Physical Manifestation</dpn:descriptiveTerm>\n" +
-            "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#Unmade\">Unmade</dpn:surfaceType>\n" +
-            "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#BelowSurfaceLevelTunnel\">Below Surface Level Tunnel</dpn:physicalLevel>\n" +
-            "      <dpn:name>Named Road</dpn:name>\n" +
-            "      <dpn:rightOfUse>Bridleway</dpn:rightOfUse>\n" +
-            "      <dpn:adoptedByNationalCycleRoute>false</dpn:adoptedByNationalCycleRoute>\n" +
-            "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n" +
-            "      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>\n" +
-            "      <dpn:withinAccessLand>true</dpn:withinAccessLand>\n" +
-            "      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>\n" +
-            "      <dpn:verticalGain>\n" +
-            "        <dpn:VerticalGainType>\n" +
-            "          <dpn:inDirection uom=\"m\">9</dpn:inDirection>\n" +
-            "          <dpn:againstDirection uom=\"m\">2</dpn:againstDirection>\n" +
-            "        </dpn:VerticalGainType>\n" +
-            "      </dpn:verticalGain>\n" +
-            "      <dpn:planimetricLength uom=\"m\">85</dpn:planimetricLength>\n" +
-            "      <dpn:surfaceLength uom=\"m\">86</dpn:surfaceLength>\n" +
-            "      <dpn:geometry>\n" +
-            "        <gml:LineString srsName=\"urn:ogc:def:crs:EPSG::7405\" gml:id=\"LOCAL_ID_29519\">\n" +
-            "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n" +
-            "        </gml:LineString>\n" +
-            "      </dpn:geometry>\n" +
-            "    </dpn:RouteLink>";
-    public static final String restrictedByWay = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">" +
-            "  <gml:featureMember>\n" +
-            "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">" +
-            "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n" +
-            "      <dpn:versionID>1</dpn:versionID>\n" +
-            "      <dpn:versionDate>2014-12-12</dpn:versionDate>\n" +
-            "      <dpn:startNode xlink:href=\"#df162dd8-c284-469b-81d6-d63105a39c7f\"/>\n" +
-            "      <dpn:endNode xlink:href=\"#56dc4c0b-0586-4849-b3e2-1e00ee149429\"/>\n" +
-            "      <dpn:descriptiveGroup codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork\">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>\n" +
-            "      <dpn:descriptiveTerm codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#NoPhysicalManifestation\">No Physical Manifestation</dpn:descriptiveTerm>\n" +
-            "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#Unmade\">Unmade</dpn:surfaceType>\n" +
-            "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#BelowSurfaceLevelTunnel\">Below Surface Level Tunnel</dpn:physicalLevel>\n" +
-            "      <dpn:name>Named Road</dpn:name>\n" +
-            "      <dpn:rightOfUse>Restricted Byway</dpn:rightOfUse>\n" +
-            "      <dpn:adoptedByNationalCycleRoute>false</dpn:adoptedByNationalCycleRoute>\n" +
-            "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n" +
-            "      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>\n" +
-            "      <dpn:withinAccessLand>true</dpn:withinAccessLand>\n" +
-            "      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>\n" +
-            "      <dpn:verticalGain>\n" +
-            "        <dpn:VerticalGainType>\n" +
-            "          <dpn:inDirection uom=\"m\">9</dpn:inDirection>\n" +
-            "          <dpn:againstDirection uom=\"m\">2</dpn:againstDirection>\n" +
-            "        </dpn:VerticalGainType>\n" +
-            "      </dpn:verticalGain>\n" +
-            "      <dpn:planimetricLength uom=\"m\">85</dpn:planimetricLength>\n" +
-            "      <dpn:surfaceLength uom=\"m\">86</dpn:surfaceLength>\n" +
-            "      <dpn:geometry>\n" +
-            "        <gml:LineString srsName=\"urn:ogc:def:crs:EPSG::7405\" gml:id=\"LOCAL_ID_29519\">\n" +
-            "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n" +
-            "        </gml:LineString>\n" +
-            "      </dpn:geometry>\n" +
-            "    </dpn:RouteLink>";
-    public static final String hazardMud = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">" +
-            "  <gml:featureMember>\n" +
-            "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">" +
-            "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n" +
-            "      <dpn:versionID>1</dpn:versionID>\n" +
-            "      <dpn:versionDate>2014-12-12</dpn:versionDate>\n" +
-            "      <dpn:startNode xlink:href=\"#df162dd8-c284-469b-81d6-d63105a39c7f\"/>\n" +
-            "      <dpn:endNode xlink:href=\"#56dc4c0b-0586-4849-b3e2-1e00ee149429\"/>\n" +
-            "      <dpn:descriptiveGroup codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork\">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>\n" +
-            "      <dpn:descriptiveTerm codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#NoPhysicalManifestation\">No Physical Manifestation</dpn:descriptiveTerm>\n" +
-            "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#Unmade\">Unmade</dpn:surfaceType>\n" +
-            "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#BelowSurfaceLevelTunnel\">Below Surface Level Tunnel</dpn:physicalLevel>\n" +
-            "      <dpn:name>Named Road</dpn:name>\n" +
-            "      <dpn:rightOfUse>Restricted Byway</dpn:rightOfUse>\n" +
-            "      <dpn:potentialHazardCrossed>Mud</dpn:potentialHazardCrossed>\n" +
-            "      <dpn:adoptedByNationalCycleRoute>false</dpn:adoptedByNationalCycleRoute>\n" +
-            "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n" +
-            "      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>\n" +
-            "      <dpn:withinAccessLand>true</dpn:withinAccessLand>\n" +
-            "      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>\n" +
-            "      <dpn:verticalGain>\n" +
-            "        <dpn:VerticalGainType>\n" +
-            "          <dpn:inDirection uom=\"m\">9</dpn:inDirection>\n" +
-            "          <dpn:againstDirection uom=\"m\">2</dpn:againstDirection>\n" +
-            "        </dpn:VerticalGainType>\n" +
-            "      </dpn:verticalGain>\n" +
-            "      <dpn:planimetricLength uom=\"m\">85</dpn:planimetricLength>\n" +
-            "      <dpn:surfaceLength uom=\"m\">86</dpn:surfaceLength>\n" +
-            "      <dpn:geometry>\n" +
-            "        <gml:LineString srsName=\"urn:ogc:def:crs:EPSG::7405\" gml:id=\"LOCAL_ID_29519\">\n" +
-            "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n" +
-            "        </gml:LineString>\n" +
-            "      </dpn:geometry>\n" +
-            "    </dpn:RouteLink>";
-    
-
-    public static final String madeSealed = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">" +
-            "  <gml:featureMember>\n" +
-            "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">" +
-            "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n" +
-            "      <dpn:versionID>1</dpn:versionID>\n" +
-            "      <dpn:versionDate>2014-12-12</dpn:versionDate>\n" +
-            "      <dpn:startNode xlink:href=\"#df162dd8-c284-469b-81d6-d63105a39c7f\"/>\n" +
-            "      <dpn:endNode xlink:href=\"#56dc4c0b-0586-4849-b3e2-1e00ee149429\"/>\n" +
-            "      <dpn:descriptiveGroup codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork\">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>\n" +
-            "      <dpn:descriptiveTerm codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#NoPhysicalManifestation\">No Physical Manifestation</dpn:descriptiveTerm>\n" +
-            "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#MadeSealed\">Made Sealed</dpn:surfaceType>\n" +
-            "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#BelowSurfaceLevelTunnel\">Below Surface Level Tunnel</dpn:physicalLevel>\n" +
-            "      <dpn:name>Named Road</dpn:name>\n" +
-            "      <dpn:rightOfUse>Restricted Byway</dpn:rightOfUse>\n" +
-            "      <dpn:adoptedByNationalCycleRoute>false</dpn:adoptedByNationalCycleRoute>\n" +
-            "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n" +
-            "      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>\n" +
-            "      <dpn:withinAccessLand>true</dpn:withinAccessLand>\n" +
-            "      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>\n" +
-            "      <dpn:verticalGain>\n" +
-            "        <dpn:VerticalGainType>\n" +
-            "          <dpn:inDirection uom=\"m\">9</dpn:inDirection>\n" +
-            "          <dpn:againstDirection uom=\"m\">2</dpn:againstDirection>\n" +
-            "        </dpn:VerticalGainType>\n" +
-            "      </dpn:verticalGain>\n" +
-            "      <dpn:planimetricLength uom=\"m\">85</dpn:planimetricLength>\n" +
-            "      <dpn:surfaceLength uom=\"m\">86</dpn:surfaceLength>\n" +
-            "      <dpn:geometry>\n" +
-            "        <gml:LineString srsName=\"urn:ogc:def:crs:EPSG::7405\" gml:id=\"LOCAL_ID_29519\">\n" +
-            "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n" +
-            "        </gml:LineString>\n" +
-            "      </dpn:geometry>\n" +
-            "    </dpn:RouteLink>";
-
-    public static final String madeUnsealed = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">" +
-            "  <gml:featureMember>\n" +
-            "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">" +
-            "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n" +
-            "      <dpn:versionID>1</dpn:versionID>\n" +
-            "      <dpn:versionDate>2014-12-12</dpn:versionDate>\n" +
-            "      <dpn:startNode xlink:href=\"#df162dd8-c284-469b-81d6-d63105a39c7f\"/>\n" +
-            "      <dpn:endNode xlink:href=\"#56dc4c0b-0586-4849-b3e2-1e00ee149429\"/>\n" +
-            "      <dpn:descriptiveGroup codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork\">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>\n" +
-            "      <dpn:descriptiveTerm codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#NoPhysicalManifestation\">No Physical Manifestation</dpn:descriptiveTerm>\n" +
-            "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#MadeUnsealed\">Made Unsealed</dpn:surfaceType>\n" +
-            "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#BelowSurfaceLevelTunnel\">Below Surface Level Tunnel</dpn:physicalLevel>\n" +
-            "      <dpn:name>Named Road</dpn:name>\n" +
-            "      <dpn:rightOfUse>Restricted Byway</dpn:rightOfUse>\n" +
-            "      <dpn:adoptedByNationalCycleRoute>false</dpn:adoptedByNationalCycleRoute>\n" +
-            "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n" +
-            "      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>\n" +
-            "      <dpn:withinAccessLand>true</dpn:withinAccessLand>\n" +
-            "      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>\n" +
-            "      <dpn:verticalGain>\n" +
-            "        <dpn:VerticalGainType>\n" +
-            "          <dpn:inDirection uom=\"m\">9</dpn:inDirection>\n" +
-            "          <dpn:againstDirection uom=\"m\">2</dpn:againstDirection>\n" +
-            "        </dpn:VerticalGainType>\n" +
-            "      </dpn:verticalGain>\n" +
-            "      <dpn:planimetricLength uom=\"m\">85</dpn:planimetricLength>\n" +
-            "      <dpn:surfaceLength uom=\"m\">86</dpn:surfaceLength>\n" +
-            "      <dpn:geometry>\n" +
-            "        <gml:LineString srsName=\"urn:ogc:def:crs:EPSG::7405\" gml:id=\"LOCAL_ID_29519\">\n" +
-            "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n" +
-            "        </gml:LineString>\n" +
-            "      </dpn:geometry>\n" +
-            "    </dpn:RouteLink>";
-
-    public static final String madeUnknown = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">" +
-            "  <gml:featureMember>\n" +
-            "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">" +
-            "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n" +
-            "      <dpn:versionID>1</dpn:versionID>\n" +
-            "      <dpn:versionDate>2014-12-12</dpn:versionDate>\n" +
-            "      <dpn:startNode xlink:href=\"#df162dd8-c284-469b-81d6-d63105a39c7f\"/>\n" +
-            "      <dpn:endNode xlink:href=\"#56dc4c0b-0586-4849-b3e2-1e00ee149429\"/>\n" +
-            "      <dpn:descriptiveGroup codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork\">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>\n" +
-            "      <dpn:descriptiveTerm codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#NoPhysicalManifestation\">No Physical Manifestation</dpn:descriptiveTerm>\n" +
-            "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#MadeUnknown\">Made Unknown</dpn:surfaceType>\n" +
-            "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#BelowSurfaceLevelTunnel\">Below Surface Level Tunnel</dpn:physicalLevel>\n" +
-            "      <dpn:name>Named Road</dpn:name>\n" +
-            "      <dpn:rightOfUse>Restricted Byway</dpn:rightOfUse>\n" +
-            "      <dpn:adoptedByNationalCycleRoute>false</dpn:adoptedByNationalCycleRoute>\n" +
-            "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n" +
-            "      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>\n" +
-            "      <dpn:withinAccessLand>true</dpn:withinAccessLand>\n" +
-            "      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>\n" +
-            "      <dpn:verticalGain>\n" +
-            "        <dpn:VerticalGainType>\n" +
-            "          <dpn:inDirection uom=\"m\">9</dpn:inDirection>\n" +
-            "          <dpn:againstDirection uom=\"m\">2</dpn:againstDirection>\n" +
-            "        </dpn:VerticalGainType>\n" +
-            "      </dpn:verticalGain>\n" +
-            "      <dpn:planimetricLength uom=\"m\">85</dpn:planimetricLength>\n" +
-            "      <dpn:surfaceLength uom=\"m\">86</dpn:surfaceLength>\n" +
-            "      <dpn:geometry>\n" +
-            "        <gml:LineString srsName=\"urn:ogc:def:crs:EPSG::7405\" gml:id=\"LOCAL_ID_29519\">\n" +
-            "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n" +
-            "        </gml:LineString>\n" +
-            "      </dpn:geometry>\n" +
-            "    </dpn:RouteLink>";
-
-    public static final String unmadeNoPhysicalButWithinAccessLand = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">" +
-            "  <gml:featureMember>\n" +
-            "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">" +
-            "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n" +
-            "      <dpn:versionID>1</dpn:versionID>\n" +
-            "      <dpn:versionDate>2014-12-12</dpn:versionDate>\n" +
-            "      <dpn:startNode xlink:href=\"#df162dd8-c284-469b-81d6-d63105a39c7f\"/>\n" +
-            "      <dpn:endNode xlink:href=\"#56dc4c0b-0586-4849-b3e2-1e00ee149429\"/>\n" +
-            "      <dpn:descriptiveGroup codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork\">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>\n" +
-            "      <dpn:descriptiveTerm codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#NoPhysicalManifestation\">No Physical Manifestation</dpn:descriptiveTerm>\n" +
-            "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#Unmade\">Unmade</dpn:surfaceType>\n" +
-            "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#BelowSurfaceLevelTunnel\">Below Surface Level Tunnel</dpn:physicalLevel>\n" +
-            "      <dpn:name>Named Road</dpn:name>\n" +
-            "      <dpn:adoptedByNationalCycleRoute>false</dpn:adoptedByNationalCycleRoute>\n" +
-            "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n" +
-            "      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>\n" +
-            "      <dpn:withinAccessLand>true</dpn:withinAccessLand>\n" +
-            "      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>\n" +
-            "      <dpn:verticalGain>\n" +
-            "        <dpn:VerticalGainType>\n" +
-            "          <dpn:inDirection uom=\"m\">9</dpn:inDirection>\n" +
-            "          <dpn:againstDirection uom=\"m\">2</dpn:againstDirection>\n" +
-            "        </dpn:VerticalGainType>\n" +
-            "      </dpn:verticalGain>\n" +
-            "      <dpn:planimetricLength uom=\"m\">85</dpn:planimetricLength>\n" +
-            "      <dpn:surfaceLength uom=\"m\">86</dpn:surfaceLength>\n" +
-            "      <dpn:geometry>\n" +
-            "        <gml:LineString srsName=\"urn:ogc:def:crs:EPSG::7405\" gml:id=\"LOCAL_ID_29519\">\n" +
-            "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n" +
-            "        </gml:LineString>\n" +
-            "      </dpn:geometry>\n" +
-            "    </dpn:RouteLink>";
-
-    public static final String adoptedNationalCycleRoute = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">" +
-            "  <gml:featureMember>\n" +
-            "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">" +
-            "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n" +
-            "      <dpn:versionID>1</dpn:versionID>\n" +
-            "      <dpn:versionDate>2014-12-12</dpn:versionDate>\n" +
-            "      <dpn:startNode xlink:href=\"#df162dd8-c284-469b-81d6-d63105a39c7f\"/>\n" +
-            "      <dpn:endNode xlink:href=\"#56dc4c0b-0586-4849-b3e2-1e00ee149429\"/>\n" +
-            "      <dpn:descriptiveGroup codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork\">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>\n" +
-            "      <dpn:descriptiveTerm codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#NoPhysicalManifestation\">No Physical Manifestation</dpn:descriptiveTerm>\n" +
-            "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#Unmade\">Unmade</dpn:surfaceType>\n" +
-            "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#BelowSurfaceLevelTunnel\">Below Surface Level Tunnel</dpn:physicalLevel>\n" +
-            "      <dpn:name>Named Road</dpn:name>\n" +
-            "      <dpn:adoptedByNationalCycleRoute>true</dpn:adoptedByNationalCycleRoute>\n" +
-            "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n" +
-            "      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>\n" +
-            "      <dpn:withinAccessLand>true</dpn:withinAccessLand>\n" +
-            "      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>\n" +
-            "      <dpn:verticalGain>\n" +
-            "        <dpn:VerticalGainType>\n" +
-            "          <dpn:inDirection uom=\"m\">9</dpn:inDirection>\n" +
-            "          <dpn:againstDirection uom=\"m\">2</dpn:againstDirection>\n" +
-            "        </dpn:VerticalGainType>\n" +
-            "      </dpn:verticalGain>\n" +
-            "      <dpn:planimetricLength uom=\"m\">85</dpn:planimetricLength>\n" +
-            "      <dpn:surfaceLength uom=\"m\">86</dpn:surfaceLength>\n" +
-            "      <dpn:geometry>\n" +
-            "        <gml:LineString srsName=\"urn:ogc:def:crs:EPSG::7405\" gml:id=\"LOCAL_ID_29519\">\n" +
-            "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n" +
-            "        </gml:LineString>\n" +
-            "      </dpn:geometry>\n" +
-            "    </dpn:RouteLink>";
-
-    public static final String adoptedOtherCycleRoute = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">" +
-            "  <gml:featureMember>\n" +
-            "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">" +
-            "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n" +
-            "      <dpn:versionID>1</dpn:versionID>\n" +
-            "      <dpn:versionDate>2014-12-12</dpn:versionDate>\n" +
-            "      <dpn:startNode xlink:href=\"#df162dd8-c284-469b-81d6-d63105a39c7f\"/>\n" +
-            "      <dpn:endNode xlink:href=\"#56dc4c0b-0586-4849-b3e2-1e00ee149429\"/>\n" +
-            "      <dpn:descriptiveGroup codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork\">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>\n" +
-            "      <dpn:descriptiveTerm codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#NoPhysicalManifestation\">No Physical Manifestation</dpn:descriptiveTerm>\n" +
-            "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#Unmade\">Unmade</dpn:surfaceType>\n" +
-            "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#BelowSurfaceLevelTunnel\">Below Surface Level Tunnel</dpn:physicalLevel>\n" +
-            "      <dpn:name>Named Road</dpn:name>\n" +
-            "      <dpn:adoptedByNationalCycleRoute>true</dpn:adoptedByNationalCycleRoute>\n" +
-            "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n" +
-            "      <dpn:adoptedByOtherCycleRoute>true</dpn:adoptedByOtherCycleRoute>\n" +
-            "      <dpn:withinAccessLand>true</dpn:withinAccessLand>\n" +
-            "      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>\n" +
-            "      <dpn:verticalGain>\n" +
-            "        <dpn:VerticalGainType>\n" +
-            "          <dpn:inDirection uom=\"m\">9</dpn:inDirection>\n" +
-            "          <dpn:againstDirection uom=\"m\">2</dpn:againstDirection>\n" +
-            "        </dpn:VerticalGainType>\n" +
-            "      </dpn:verticalGain>\n" +
-            "      <dpn:planimetricLength uom=\"m\">85</dpn:planimetricLength>\n" +
-            "      <dpn:surfaceLength uom=\"m\">86</dpn:surfaceLength>\n" +
-            "      <dpn:geometry>\n" +
-            "        <gml:LineString srsName=\"urn:ogc:def:crs:EPSG::7405\" gml:id=\"LOCAL_ID_29519\">\n" +
-            "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n" +
-            "        </gml:LineString>\n" +
-            "      </dpn:geometry>\n" +
-            "    </dpn:RouteLink>";
-    
-    public static final String aRoad = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">" +
-            "  <gml:featureMember>\n" +
-            "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">" +
-            "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n" +
-            "      <dpn:versionID>1</dpn:versionID>\n" +
-            "      <dpn:versionDate>2014-12-12</dpn:versionDate>\n" +
-            "      <dpn:startNode xlink:href=\"#df162dd8-c284-469b-81d6-d63105a39c7f\"/>\n" +
-            "      <dpn:endNode xlink:href=\"#56dc4c0b-0586-4849-b3e2-1e00ee149429\"/>\n" +
-            "      <dpn:descriptiveGroup codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork\">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>\n" +
-            "      <dpn:descriptiveTerm codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#ARoad\">A Road</dpn:descriptiveTerm>\n" +
-            "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#Unmade\">Unmade</dpn:surfaceType>\n" +
-            "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#BelowSurfaceLevelTunnel\">Below Surface Level Tunnel</dpn:physicalLevel>\n" +
-            "      <dpn:name>Named Road</dpn:name>\n" +
-            "      <dpn:adoptedByNationalCycleRoute>false</dpn:adoptedByNationalCycleRoute>\n" +
-            "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n" +
-            "      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>\n" +
-            "      <dpn:withinAccessLand>true</dpn:withinAccessLand>\n" +
-            "      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>\n" +
-            "      <dpn:verticalGain>\n" +
-            "        <dpn:VerticalGainType>\n" +
-            "          <dpn:inDirection uom=\"m\">9</dpn:inDirection>\n" +
-            "          <dpn:againstDirection uom=\"m\">2</dpn:againstDirection>\n" +
-            "        </dpn:VerticalGainType>\n" +
-            "      </dpn:verticalGain>\n" +
-            "      <dpn:planimetricLength uom=\"m\">85</dpn:planimetricLength>\n" +
-            "      <dpn:surfaceLength uom=\"m\">86</dpn:surfaceLength>\n" +
-            "      <dpn:geometry>\n" +
-            "        <gml:LineString srsName=\"urn:ogc:def:crs:EPSG::7405\" gml:id=\"LOCAL_ID_29519\">\n" +
-            "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n" +
-            "        </gml:LineString>\n" +
-            "      </dpn:geometry>\n" +
-            "    </dpn:RouteLink>";
-    
-    public static final String bRoad = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">" +
-            "  <gml:featureMember>\n" +
-            "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">" +
-            "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n" +
-            "      <dpn:versionID>1</dpn:versionID>\n" +
-            "      <dpn:versionDate>2014-12-12</dpn:versionDate>\n" +
-            "      <dpn:startNode xlink:href=\"#df162dd8-c284-469b-81d6-d63105a39c7f\"/>\n" +
-            "      <dpn:endNode xlink:href=\"#56dc4c0b-0586-4849-b3e2-1e00ee149429\"/>\n" +
-            "      <dpn:descriptiveGroup codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork\">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>\n" +
-            "      <dpn:descriptiveTerm codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#BRoad\">B Road</dpn:descriptiveTerm>\n" +
-            "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#Unmade\">Unmade</dpn:surfaceType>\n" +
-            "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#BelowSurfaceLevelTunnel\">Below Surface Level Tunnel</dpn:physicalLevel>\n" +
-            "      <dpn:name>Named Road</dpn:name>\n" +
-            "      <dpn:adoptedByNationalCycleRoute>false</dpn:adoptedByNationalCycleRoute>\n" +
-            "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n" +
-            "      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>\n" +
-            "      <dpn:withinAccessLand>true</dpn:withinAccessLand>\n" +
-            "      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>\n" +
-            "      <dpn:verticalGain>\n" +
-            "        <dpn:VerticalGainType>\n" +
-            "          <dpn:inDirection uom=\"m\">9</dpn:inDirection>\n" +
-            "          <dpn:againstDirection uom=\"m\">2</dpn:againstDirection>\n" +
-            "        </dpn:VerticalGainType>\n" +
-            "      </dpn:verticalGain>\n" +
-            "      <dpn:planimetricLength uom=\"m\">85</dpn:planimetricLength>\n" +
-            "      <dpn:surfaceLength uom=\"m\">86</dpn:surfaceLength>\n" +
-            "      <dpn:geometry>\n" +
-            "        <gml:LineString srsName=\"urn:ogc:def:crs:EPSG::7405\" gml:id=\"LOCAL_ID_29519\">\n" +
-            "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n" +
-            "        </gml:LineString>\n" +
-            "      </dpn:geometry>\n" +
-            "    </dpn:RouteLink>";
-    
-    public static final String alley = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">" +
-            "  <gml:featureMember>\n" +
-            "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">" +
-            "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n" +
-            "      <dpn:versionID>1</dpn:versionID>\n" +
-            "      <dpn:versionDate>2014-12-12</dpn:versionDate>\n" +
-            "      <dpn:startNode xlink:href=\"#df162dd8-c284-469b-81d6-d63105a39c7f\"/>\n" +
-            "      <dpn:endNode xlink:href=\"#56dc4c0b-0586-4849-b3e2-1e00ee149429\"/>\n" +
-            "      <dpn:descriptiveGroup codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork\">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>\n" +
-            "      <dpn:descriptiveTerm codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#Alley\">Alley</dpn:descriptiveTerm>\n" +
-            "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#Unmade\">Unmade</dpn:surfaceType>\n" +
-            "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#BelowSurfaceLevelTunnel\">Below Surface Level Tunnel</dpn:physicalLevel>\n" +
-            "      <dpn:name>Named Road</dpn:name>\n" +
-            "      <dpn:adoptedByNationalCycleRoute>false</dpn:adoptedByNationalCycleRoute>\n" +
-            "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n" +
-            "      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>\n" +
-            "      <dpn:withinAccessLand>true</dpn:withinAccessLand>\n" +
-            "      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>\n" +
-            "      <dpn:verticalGain>\n" +
-            "        <dpn:VerticalGainType>\n" +
-            "          <dpn:inDirection uom=\"m\">9</dpn:inDirection>\n" +
-            "          <dpn:againstDirection uom=\"m\">2</dpn:againstDirection>\n" +
-            "        </dpn:VerticalGainType>\n" +
-            "      </dpn:verticalGain>\n" +
-            "      <dpn:planimetricLength uom=\"m\">85</dpn:planimetricLength>\n" +
-            "      <dpn:surfaceLength uom=\"m\">86</dpn:surfaceLength>\n" +
-            "      <dpn:geometry>\n" +
-            "        <gml:LineString srsName=\"urn:ogc:def:crs:EPSG::7405\" gml:id=\"LOCAL_ID_29519\">\n" +
-            "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n" +
-            "        </gml:LineString>\n" +
-            "      </dpn:geometry>\n" +
-            "    </dpn:RouteLink>";
-    
-    public static final String privateRoad = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">" +
-            "  <gml:featureMember>\n" +
-            "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">" +
-            "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n" +
-            "      <dpn:versionID>1</dpn:versionID>\n" +
-            "      <dpn:versionDate>2014-12-12</dpn:versionDate>\n" +
-            "      <dpn:startNode xlink:href=\"#df162dd8-c284-469b-81d6-d63105a39c7f\"/>\n" +
-            "      <dpn:endNode xlink:href=\"#56dc4c0b-0586-4849-b3e2-1e00ee149429\"/>\n" +
-            "      <dpn:descriptiveGroup codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork\">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>\n" +
-            "      <dpn:descriptiveTerm codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#PrivateRoad\">Private Road</dpn:descriptiveTerm>\n" +
-            "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#Unmade\">Unmade</dpn:surfaceType>\n" +
-            "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#BelowSurfaceLevelTunnel\">Below Surface Level Tunnel</dpn:physicalLevel>\n" +
-            "      <dpn:name>Named Road</dpn:name>\n" +
-            "      <dpn:adoptedByNationalCycleRoute>false</dpn:adoptedByNationalCycleRoute>\n" +
-            "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n" +
-            "      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>\n" +
-            "      <dpn:withinAccessLand>true</dpn:withinAccessLand>\n" +
-            "      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>\n" +
-            "      <dpn:verticalGain>\n" +
-            "        <dpn:VerticalGainType>\n" +
-            "          <dpn:inDirection uom=\"m\">9</dpn:inDirection>\n" +
-            "          <dpn:againstDirection uom=\"m\">2</dpn:againstDirection>\n" +
-            "        </dpn:VerticalGainType>\n" +
-            "      </dpn:verticalGain>\n" +
-            "      <dpn:planimetricLength uom=\"m\">85</dpn:planimetricLength>\n" +
-            "      <dpn:surfaceLength uom=\"m\">86</dpn:surfaceLength>\n" +
-            "      <dpn:geometry>\n" +
-            "        <gml:LineString srsName=\"urn:ogc:def:crs:EPSG::7405\" gml:id=\"LOCAL_ID_29519\">\n" +
-            "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n" +
-            "        </gml:LineString>\n" +
-            "      </dpn:geometry>\n" +
-            "    </dpn:RouteLink>";
-    
-    public static final String path = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">" +
-            "  <gml:featureMember>\n" +
-            "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">" +
-            "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n" +
-            "      <dpn:versionID>1</dpn:versionID>\n" +
-            "      <dpn:versionDate>2014-12-12</dpn:versionDate>\n" +
-            "      <dpn:startNode xlink:href=\"#df162dd8-c284-469b-81d6-d63105a39c7f\"/>\n" +
-            "      <dpn:endNode xlink:href=\"#56dc4c0b-0586-4849-b3e2-1e00ee149429\"/>\n" +
-            "      <dpn:descriptiveGroup codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork\">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>\n" +
-            "      <dpn:descriptiveTerm codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#Path\">Path</dpn:descriptiveTerm>\n" +
-            "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#Unmade\">Unmade</dpn:surfaceType>\n" +
-            "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#BelowSurfaceLevelTunnel\">Below Surface Level Tunnel</dpn:physicalLevel>\n" +
-            "      <dpn:name>Named Road</dpn:name>\n" +
-            "      <dpn:adoptedByNationalCycleRoute>false</dpn:adoptedByNationalCycleRoute>\n" +
-            "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n" +
-            "      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>\n" +
-            "      <dpn:withinAccessLand>true</dpn:withinAccessLand>\n" +
-            "      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>\n" +
-            "      <dpn:verticalGain>\n" +
-            "        <dpn:VerticalGainType>\n" +
-            "          <dpn:inDirection uom=\"m\">9</dpn:inDirection>\n" +
-            "          <dpn:againstDirection uom=\"m\">2</dpn:againstDirection>\n" +
-            "        </dpn:VerticalGainType>\n" +
-            "      </dpn:verticalGain>\n" +
-            "      <dpn:planimetricLength uom=\"m\">85</dpn:planimetricLength>\n" +
-            "      <dpn:surfaceLength uom=\"m\">86</dpn:surfaceLength>\n" +
-            "      <dpn:geometry>\n" +
-            "        <gml:LineString srsName=\"urn:ogc:def:crs:EPSG::7405\" gml:id=\"LOCAL_ID_29519\">\n" +
-            "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n" +
-            "        </gml:LineString>\n" +
-            "      </dpn:geometry>\n" +
-            "    </dpn:RouteLink>";
+    public static final String aboveSurfaceWay = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">"
+            + "  <gml:featureMember>\n"
+            + "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">"
+            + "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n"
+            + "      <dpn:versionID>1</dpn:versionID>\n"
+            + "      <dpn:versionDate>2014-12-12</dpn:versionDate>\n"
+            + "      <dpn:startNode xlink:href=\"#df162dd8-c284-469b-81d6-d63105a39c7f\"/>\n"
+            + "      <dpn:endNode xlink:href=\"#56dc4c0b-0586-4849-b3e2-1e00ee149429\"/>\n"
+            + "      <dpn:descriptiveGroup codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork\">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>\n"
+            + "      <dpn:descriptiveTerm codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#NoPhysicalManifestation\">No Physical Manifestation</dpn:descriptiveTerm>\n"
+            + "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#Unmade\">Unmade</dpn:surfaceType>\n"
+            + "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#AboveSurfaceLevelOnStructure\">Above Surface Level On Structure</dpn:physicalLevel>\n"
+            + "      <dpn:name>Named Road</dpn:name>\n"
+            + "      <dpn:adoptedByNationalCycleRoute>false</dpn:adoptedByNationalCycleRoute>\n"
+            + "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n"
+            + "      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>\n"
+            + "      <dpn:withinAccessLand>true</dpn:withinAccessLand>\n"
+            + "      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>\n"
+            + "      <dpn:verticalGain>\n"
+            + "        <dpn:VerticalGainType>\n"
+            + "          <dpn:inDirection uom=\"m\">9</dpn:inDirection>\n"
+            + "          <dpn:againstDirection uom=\"m\">2</dpn:againstDirection>\n"
+            + "        </dpn:VerticalGainType>\n"
+            + "      </dpn:verticalGain>\n"
+            + "      <dpn:planimetricLength uom=\"m\">85</dpn:planimetricLength>\n"
+            + "      <dpn:surfaceLength uom=\"m\">86</dpn:surfaceLength>\n"
+            + "      <dpn:geometry>\n"
+            + "        <gml:LineString srsName=\"urn:ogc:def:crs:EPSG::7405\" gml:id=\"LOCAL_ID_29519\">\n"
+            + "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n"
+            + "        </gml:LineString>\n" + "      </dpn:geometry>\n" + "    </dpn:RouteLink>";
+    public static final String surfaceWay = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">"
+            + "  <gml:featureMember>\n"
+            + "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">"
+            + "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n"
+            + "      <dpn:versionID>1</dpn:versionID>\n"
+            + "      <dpn:versionDate>2014-12-12</dpn:versionDate>\n"
+            + "      <dpn:startNode xlink:href=\"#df162dd8-c284-469b-81d6-d63105a39c7f\"/>\n"
+            + "      <dpn:endNode xlink:href=\"#56dc4c0b-0586-4849-b3e2-1e00ee149429\"/>\n"
+            + "      <dpn:descriptiveGroup codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork\">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>\n"
+            + "      <dpn:descriptiveTerm codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#NoPhysicalManifestation\">No Physical Manifestation</dpn:descriptiveTerm>\n"
+            + "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#Unmade\">Unmade</dpn:surfaceType>\n"
+            + "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#SurfaceLevel\">Surface Level</dpn:physicalLevel>\n"
+            + "      <dpn:name>Named Road</dpn:name>\n"
+            + "      <dpn:adoptedByNationalCycleRoute>false</dpn:adoptedByNationalCycleRoute>\n"
+            + "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n"
+            + "      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>\n"
+            + "      <dpn:withinAccessLand>true</dpn:withinAccessLand>\n"
+            + "      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>\n"
+            + "      <dpn:verticalGain>\n"
+            + "        <dpn:VerticalGainType>\n"
+            + "          <dpn:inDirection uom=\"m\">9</dpn:inDirection>\n"
+            + "          <dpn:againstDirection uom=\"m\">2</dpn:againstDirection>\n"
+            + "        </dpn:VerticalGainType>\n"
+            + "      </dpn:verticalGain>\n"
+            + "      <dpn:planimetricLength uom=\"m\">85</dpn:planimetricLength>\n"
+            + "      <dpn:surfaceLength uom=\"m\">86</dpn:surfaceLength>\n"
+            + "      <dpn:geometry>\n"
+            + "        <gml:LineString srsName=\"urn:ogc:def:crs:EPSG::7405\" gml:id=\"LOCAL_ID_29519\">\n"
+            + "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n"
+            + "        </gml:LineString>\n" + "      </dpn:geometry>\n" + "    </dpn:RouteLink>";
+    public static final String tunnelWay = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">"
+            + "  <gml:featureMember>\n"
+            + "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">"
+            + "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n"
+            + "      <dpn:versionID>1</dpn:versionID>\n"
+            + "      <dpn:versionDate>2014-12-12</dpn:versionDate>\n"
+            + "      <dpn:startNode xlink:href=\"#df162dd8-c284-469b-81d6-d63105a39c7f\"/>\n"
+            + "      <dpn:endNode xlink:href=\"#56dc4c0b-0586-4849-b3e2-1e00ee149429\"/>\n"
+            + "      <dpn:descriptiveGroup codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork\">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>\n"
+            + "      <dpn:descriptiveTerm codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#NoPhysicalManifestation\">No Physical Manifestation</dpn:descriptiveTerm>\n"
+            + "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#Unmade\">Unmade</dpn:surfaceType>\n"
+            + "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#BelowSurfaceLevelTunnel\">Below Surface Level Tunnel</dpn:physicalLevel>\n"
+            + "      <dpn:name>Named Road</dpn:name>\n"
+            + "      <dpn:adoptedByNationalCycleRoute>false</dpn:adoptedByNationalCycleRoute>\n"
+            + "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n"
+            + "      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>\n"
+            + "      <dpn:withinAccessLand>true</dpn:withinAccessLand>\n"
+            + "      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>\n"
+            + "      <dpn:verticalGain>\n"
+            + "        <dpn:VerticalGainType>\n"
+            + "          <dpn:inDirection uom=\"m\">9</dpn:inDirection>\n"
+            + "          <dpn:againstDirection uom=\"m\">2</dpn:againstDirection>\n"
+            + "        </dpn:VerticalGainType>\n"
+            + "      </dpn:verticalGain>\n"
+            + "      <dpn:planimetricLength uom=\"m\">85</dpn:planimetricLength>\n"
+            + "      <dpn:surfaceLength uom=\"m\">86</dpn:surfaceLength>\n"
+            + "      <dpn:geometry>\n"
+            + "        <gml:LineString srsName=\"urn:ogc:def:crs:EPSG::7405\" gml:id=\"LOCAL_ID_29519\">\n"
+            + "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n"
+            + "        </gml:LineString>\n" + "      </dpn:geometry>\n" + "    </dpn:RouteLink>";
+
+    public static final String bridleWay = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">"
+            + "  <gml:featureMember>\n"
+            + "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">"
+            + "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n"
+            + "      <dpn:versionID>1</dpn:versionID>\n"
+            + "      <dpn:versionDate>2014-12-12</dpn:versionDate>\n"
+            + "      <dpn:startNode xlink:href=\"#df162dd8-c284-469b-81d6-d63105a39c7f\"/>\n"
+            + "      <dpn:endNode xlink:href=\"#56dc4c0b-0586-4849-b3e2-1e00ee149429\"/>\n"
+            + "      <dpn:descriptiveGroup codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork\">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>\n"
+            + "      <dpn:descriptiveTerm codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#NoPhysicalManifestation\">No Physical Manifestation</dpn:descriptiveTerm>\n"
+            + "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#Unmade\">Unmade</dpn:surfaceType>\n"
+            + "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#BelowSurfaceLevelTunnel\">Below Surface Level Tunnel</dpn:physicalLevel>\n"
+            + "      <dpn:name>Named Road</dpn:name>\n"
+            + "      <dpn:rightOfUse>Bridleway</dpn:rightOfUse>\n"
+            + "      <dpn:adoptedByNationalCycleRoute>false</dpn:adoptedByNationalCycleRoute>\n"
+            + "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n"
+            + "      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>\n"
+            + "      <dpn:withinAccessLand>true</dpn:withinAccessLand>\n"
+            + "      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>\n"
+            + "      <dpn:verticalGain>\n"
+            + "        <dpn:VerticalGainType>\n"
+            + "          <dpn:inDirection uom=\"m\">9</dpn:inDirection>\n"
+            + "          <dpn:againstDirection uom=\"m\">2</dpn:againstDirection>\n"
+            + "        </dpn:VerticalGainType>\n"
+            + "      </dpn:verticalGain>\n"
+            + "      <dpn:planimetricLength uom=\"m\">85</dpn:planimetricLength>\n"
+            + "      <dpn:surfaceLength uom=\"m\">86</dpn:surfaceLength>\n"
+            + "      <dpn:geometry>\n"
+            + "        <gml:LineString srsName=\"urn:ogc:def:crs:EPSG::7405\" gml:id=\"LOCAL_ID_29519\">\n"
+            + "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n"
+            + "        </gml:LineString>\n" + "      </dpn:geometry>\n" + "    </dpn:RouteLink>";
+    public static final String restrictedByWay = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">"
+            + "  <gml:featureMember>\n"
+            + "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">"
+            + "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n"
+            + "      <dpn:versionID>1</dpn:versionID>\n"
+            + "      <dpn:versionDate>2014-12-12</dpn:versionDate>\n"
+            + "      <dpn:startNode xlink:href=\"#df162dd8-c284-469b-81d6-d63105a39c7f\"/>\n"
+            + "      <dpn:endNode xlink:href=\"#56dc4c0b-0586-4849-b3e2-1e00ee149429\"/>\n"
+            + "      <dpn:descriptiveGroup codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork\">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>\n"
+            + "      <dpn:descriptiveTerm codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#NoPhysicalManifestation\">No Physical Manifestation</dpn:descriptiveTerm>\n"
+            + "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#Unmade\">Unmade</dpn:surfaceType>\n"
+            + "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#BelowSurfaceLevelTunnel\">Below Surface Level Tunnel</dpn:physicalLevel>\n"
+            + "      <dpn:name>Named Road</dpn:name>\n"
+            + "      <dpn:rightOfUse>Restricted Byway</dpn:rightOfUse>\n"
+            + "      <dpn:adoptedByNationalCycleRoute>false</dpn:adoptedByNationalCycleRoute>\n"
+            + "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n"
+            + "      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>\n"
+            + "      <dpn:withinAccessLand>true</dpn:withinAccessLand>\n"
+            + "      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>\n"
+            + "      <dpn:verticalGain>\n"
+            + "        <dpn:VerticalGainType>\n"
+            + "          <dpn:inDirection uom=\"m\">9</dpn:inDirection>\n"
+            + "          <dpn:againstDirection uom=\"m\">2</dpn:againstDirection>\n"
+            + "        </dpn:VerticalGainType>\n"
+            + "      </dpn:verticalGain>\n"
+            + "      <dpn:planimetricLength uom=\"m\">85</dpn:planimetricLength>\n"
+            + "      <dpn:surfaceLength uom=\"m\">86</dpn:surfaceLength>\n"
+            + "      <dpn:geometry>\n"
+            + "        <gml:LineString srsName=\"urn:ogc:def:crs:EPSG::7405\" gml:id=\"LOCAL_ID_29519\">\n"
+            + "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n"
+            + "        </gml:LineString>\n" + "      </dpn:geometry>\n" + "    </dpn:RouteLink>";
+    public static final String hazardMud = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">"
+            + "  <gml:featureMember>\n"
+            + "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">"
+            + "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n"
+            + "      <dpn:versionID>1</dpn:versionID>\n"
+            + "      <dpn:versionDate>2014-12-12</dpn:versionDate>\n"
+            + "      <dpn:startNode xlink:href=\"#df162dd8-c284-469b-81d6-d63105a39c7f\"/>\n"
+            + "      <dpn:endNode xlink:href=\"#56dc4c0b-0586-4849-b3e2-1e00ee149429\"/>\n"
+            + "      <dpn:descriptiveGroup codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork\">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>\n"
+            + "      <dpn:descriptiveTerm codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#NoPhysicalManifestation\">No Physical Manifestation</dpn:descriptiveTerm>\n"
+            + "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#Unmade\">Unmade</dpn:surfaceType>\n"
+            + "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#BelowSurfaceLevelTunnel\">Below Surface Level Tunnel</dpn:physicalLevel>\n"
+            + "      <dpn:name>Named Road</dpn:name>\n"
+            + "      <dpn:rightOfUse>Restricted Byway</dpn:rightOfUse>\n"
+            + "      <dpn:potentialHazardCrossed>Mud</dpn:potentialHazardCrossed>\n"
+            + "      <dpn:adoptedByNationalCycleRoute>false</dpn:adoptedByNationalCycleRoute>\n"
+            + "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n"
+            + "      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>\n"
+            + "      <dpn:withinAccessLand>true</dpn:withinAccessLand>\n"
+            + "      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>\n"
+            + "      <dpn:verticalGain>\n"
+            + "        <dpn:VerticalGainType>\n"
+            + "          <dpn:inDirection uom=\"m\">9</dpn:inDirection>\n"
+            + "          <dpn:againstDirection uom=\"m\">2</dpn:againstDirection>\n"
+            + "        </dpn:VerticalGainType>\n"
+            + "      </dpn:verticalGain>\n"
+            + "      <dpn:planimetricLength uom=\"m\">85</dpn:planimetricLength>\n"
+            + "      <dpn:surfaceLength uom=\"m\">86</dpn:surfaceLength>\n"
+            + "      <dpn:geometry>\n"
+            + "        <gml:LineString srsName=\"urn:ogc:def:crs:EPSG::7405\" gml:id=\"LOCAL_ID_29519\">\n"
+            + "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n"
+            + "        </gml:LineString>\n" + "      </dpn:geometry>\n" + "    </dpn:RouteLink>";
+    public static final String hazardInvalid = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">"
+            + "  <gml:featureMember>\n"
+            + "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">"
+            + "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n"
+            + "      <dpn:versionID>1</dpn:versionID>\n"
+            + "      <dpn:versionDate>2014-12-12</dpn:versionDate>\n"
+            + "      <dpn:startNode xlink:href=\"#df162dd8-c284-469b-81d6-d63105a39c7f\"/>\n"
+            + "      <dpn:endNode xlink:href=\"#56dc4c0b-0586-4849-b3e2-1e00ee149429\"/>\n"
+            + "      <dpn:descriptiveGroup codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork\">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>\n"
+            + "      <dpn:descriptiveTerm codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#NoPhysicalManifestation\">No Physical Manifestation</dpn:descriptiveTerm>\n"
+            + "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#Unmade\">Unmade</dpn:surfaceType>\n"
+            + "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#BelowSurfaceLevelTunnel\">Below Surface Level Tunnel</dpn:physicalLevel>\n"
+            + "      <dpn:name>Named Road</dpn:name>\n"
+            + "      <dpn:rightOfUse>Restricted Byway</dpn:rightOfUse>\n"
+            + "      <dpn:potentialHazardCrossed>Mud, Unknown Hazard</dpn:potentialHazardCrossed>\n"
+            + "      <dpn:adoptedByNationalCycleRoute>false</dpn:adoptedByNationalCycleRoute>\n"
+            + "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n"
+            + "      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>\n"
+            + "      <dpn:withinAccessLand>true</dpn:withinAccessLand>\n"
+            + "      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>\n"
+            + "      <dpn:verticalGain>\n"
+            + "        <dpn:VerticalGainType>\n"
+            + "          <dpn:inDirection uom=\"m\">9</dpn:inDirection>\n"
+            + "          <dpn:againstDirection uom=\"m\">2</dpn:againstDirection>\n"
+            + "        </dpn:VerticalGainType>\n"
+            + "      </dpn:verticalGain>\n"
+            + "      <dpn:planimetricLength uom=\"m\">85</dpn:planimetricLength>\n"
+            + "      <dpn:surfaceLength uom=\"m\">86</dpn:surfaceLength>\n"
+            + "      <dpn:geometry>\n"
+            + "        <gml:LineString srsName=\"urn:ogc:def:crs:EPSG::7405\" gml:id=\"LOCAL_ID_29519\">\n"
+            + "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n"
+            + "        </gml:LineString>\n" + "      </dpn:geometry>\n" + "    </dpn:RouteLink>";
+    public static final String hazardMultipleOneLine = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">"
+            + "  <gml:featureMember>\n"
+            + "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">"
+            + "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n"
+            + "      <dpn:versionID>1</dpn:versionID>\n"
+            + "      <dpn:versionDate>2014-12-12</dpn:versionDate>\n"
+            + "      <dpn:startNode xlink:href=\"#df162dd8-c284-469b-81d6-d63105a39c7f\"/>\n"
+            + "      <dpn:endNode xlink:href=\"#56dc4c0b-0586-4849-b3e2-1e00ee149429\"/>\n"
+            + "      <dpn:descriptiveGroup codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork\">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>\n"
+            + "      <dpn:descriptiveTerm codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#NoPhysicalManifestation\">No Physical Manifestation</dpn:descriptiveTerm>\n"
+            + "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#Unmade\">Unmade</dpn:surfaceType>\n"
+            + "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#BelowSurfaceLevelTunnel\">Below Surface Level Tunnel</dpn:physicalLevel>\n"
+            + "      <dpn:name>Named Road</dpn:name>\n"
+            + "      <dpn:rightOfUse>Restricted Byway</dpn:rightOfUse>\n"
+            + "      <dpn:potentialHazardCrossed>Mud, Scree</dpn:potentialHazardCrossed>\n"
+            + "      <dpn:adoptedByNationalCycleRoute>false</dpn:adoptedByNationalCycleRoute>\n"
+            + "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n"
+            + "      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>\n"
+            + "      <dpn:withinAccessLand>true</dpn:withinAccessLand>\n"
+            + "      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>\n"
+            + "      <dpn:verticalGain>\n"
+            + "        <dpn:VerticalGainType>\n"
+            + "          <dpn:inDirection uom=\"m\">9</dpn:inDirection>\n"
+            + "          <dpn:againstDirection uom=\"m\">2</dpn:againstDirection>\n"
+            + "        </dpn:VerticalGainType>\n"
+            + "      </dpn:verticalGain>\n"
+            + "      <dpn:planimetricLength uom=\"m\">85</dpn:planimetricLength>\n"
+            + "      <dpn:surfaceLength uom=\"m\">86</dpn:surfaceLength>\n"
+            + "      <dpn:geometry>\n"
+            + "        <gml:LineString srsName=\"urn:ogc:def:crs:EPSG::7405\" gml:id=\"LOCAL_ID_29519\">\n"
+            + "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n"
+            + "        </gml:LineString>\n" + "      </dpn:geometry>\n" + "    </dpn:RouteLink>";
+    public static final String hazardMultiple = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">"
+            + "  <gml:featureMember>\n"
+            + "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">"
+            + "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n"
+            + "      <dpn:versionID>1</dpn:versionID>\n"
+            + "      <dpn:versionDate>2014-12-12</dpn:versionDate>\n"
+            + "      <dpn:startNode xlink:href=\"#df162dd8-c284-469b-81d6-d63105a39c7f\"/>\n"
+            + "      <dpn:endNode xlink:href=\"#56dc4c0b-0586-4849-b3e2-1e00ee149429\"/>\n"
+            + "      <dpn:descriptiveGroup codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork\">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>\n"
+            + "      <dpn:descriptiveTerm codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#NoPhysicalManifestation\">No Physical Manifestation</dpn:descriptiveTerm>\n"
+            + "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#Unmade\">Unmade</dpn:surfaceType>\n"
+            + "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#BelowSurfaceLevelTunnel\">Below Surface Level Tunnel</dpn:physicalLevel>\n"
+            + "      <dpn:name>Named Road</dpn:name>\n"
+            + "      <dpn:rightOfUse>Restricted Byway</dpn:rightOfUse>\n"
+            + "      <dpn:potentialHazardCrossed>Mud</dpn:potentialHazardCrossed>\n"
+            + "      <dpn:potentialHazardCrossed>Scree</dpn:potentialHazardCrossed>\n"
+            + "      <dpn:adoptedByNationalCycleRoute>false</dpn:adoptedByNationalCycleRoute>\n"
+            + "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n"
+            + "      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>\n"
+            + "      <dpn:withinAccessLand>true</dpn:withinAccessLand>\n"
+            + "      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>\n"
+            + "      <dpn:verticalGain>\n"
+            + "        <dpn:VerticalGainType>\n"
+            + "          <dpn:inDirection uom=\"m\">9</dpn:inDirection>\n"
+            + "          <dpn:againstDirection uom=\"m\">2</dpn:againstDirection>\n"
+            + "        </dpn:VerticalGainType>\n"
+            + "      </dpn:verticalGain>\n"
+            + "      <dpn:planimetricLength uom=\"m\">85</dpn:planimetricLength>\n"
+            + "      <dpn:surfaceLength uom=\"m\">86</dpn:surfaceLength>\n"
+            + "      <dpn:geometry>\n"
+            + "        <gml:LineString srsName=\"urn:ogc:def:crs:EPSG::7405\" gml:id=\"LOCAL_ID_29519\">\n"
+            + "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n"
+            + "        </gml:LineString>\n" + "      </dpn:geometry>\n" + "    </dpn:RouteLink>";
+
+    public static final String madeSealed = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">"
+            + "  <gml:featureMember>\n"
+            + "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">"
+            + "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n"
+            + "      <dpn:versionID>1</dpn:versionID>\n"
+            + "      <dpn:versionDate>2014-12-12</dpn:versionDate>\n"
+            + "      <dpn:startNode xlink:href=\"#df162dd8-c284-469b-81d6-d63105a39c7f\"/>\n"
+            + "      <dpn:endNode xlink:href=\"#56dc4c0b-0586-4849-b3e2-1e00ee149429\"/>\n"
+            + "      <dpn:descriptiveGroup codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork\">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>\n"
+            + "      <dpn:descriptiveTerm codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#NoPhysicalManifestation\">No Physical Manifestation</dpn:descriptiveTerm>\n"
+            + "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#MadeSealed\">Made Sealed</dpn:surfaceType>\n"
+            + "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#BelowSurfaceLevelTunnel\">Below Surface Level Tunnel</dpn:physicalLevel>\n"
+            + "      <dpn:name>Named Road</dpn:name>\n"
+            + "      <dpn:rightOfUse>Restricted Byway</dpn:rightOfUse>\n"
+            + "      <dpn:adoptedByNationalCycleRoute>false</dpn:adoptedByNationalCycleRoute>\n"
+            + "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n"
+            + "      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>\n"
+            + "      <dpn:withinAccessLand>true</dpn:withinAccessLand>\n"
+            + "      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>\n"
+            + "      <dpn:verticalGain>\n"
+            + "        <dpn:VerticalGainType>\n"
+            + "          <dpn:inDirection uom=\"m\">9</dpn:inDirection>\n"
+            + "          <dpn:againstDirection uom=\"m\">2</dpn:againstDirection>\n"
+            + "        </dpn:VerticalGainType>\n"
+            + "      </dpn:verticalGain>\n"
+            + "      <dpn:planimetricLength uom=\"m\">85</dpn:planimetricLength>\n"
+            + "      <dpn:surfaceLength uom=\"m\">86</dpn:surfaceLength>\n"
+            + "      <dpn:geometry>\n"
+            + "        <gml:LineString srsName=\"urn:ogc:def:crs:EPSG::7405\" gml:id=\"LOCAL_ID_29519\">\n"
+            + "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n"
+            + "        </gml:LineString>\n" + "      </dpn:geometry>\n" + "    </dpn:RouteLink>";
+
+    public static final String madeUnsealed = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">"
+            + "  <gml:featureMember>\n"
+            + "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">"
+            + "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n"
+            + "      <dpn:versionID>1</dpn:versionID>\n"
+            + "      <dpn:versionDate>2014-12-12</dpn:versionDate>\n"
+            + "      <dpn:startNode xlink:href=\"#df162dd8-c284-469b-81d6-d63105a39c7f\"/>\n"
+            + "      <dpn:endNode xlink:href=\"#56dc4c0b-0586-4849-b3e2-1e00ee149429\"/>\n"
+            + "      <dpn:descriptiveGroup codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork\">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>\n"
+            + "      <dpn:descriptiveTerm codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#NoPhysicalManifestation\">No Physical Manifestation</dpn:descriptiveTerm>\n"
+            + "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#MadeUnsealed\">Made Unsealed</dpn:surfaceType>\n"
+            + "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#BelowSurfaceLevelTunnel\">Below Surface Level Tunnel</dpn:physicalLevel>\n"
+            + "      <dpn:name>Named Road</dpn:name>\n"
+            + "      <dpn:rightOfUse>Restricted Byway</dpn:rightOfUse>\n"
+            + "      <dpn:adoptedByNationalCycleRoute>false</dpn:adoptedByNationalCycleRoute>\n"
+            + "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n"
+            + "      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>\n"
+            + "      <dpn:withinAccessLand>true</dpn:withinAccessLand>\n"
+            + "      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>\n"
+            + "      <dpn:verticalGain>\n"
+            + "        <dpn:VerticalGainType>\n"
+            + "          <dpn:inDirection uom=\"m\">9</dpn:inDirection>\n"
+            + "          <dpn:againstDirection uom=\"m\">2</dpn:againstDirection>\n"
+            + "        </dpn:VerticalGainType>\n"
+            + "      </dpn:verticalGain>\n"
+            + "      <dpn:planimetricLength uom=\"m\">85</dpn:planimetricLength>\n"
+            + "      <dpn:surfaceLength uom=\"m\">86</dpn:surfaceLength>\n"
+            + "      <dpn:geometry>\n"
+            + "        <gml:LineString srsName=\"urn:ogc:def:crs:EPSG::7405\" gml:id=\"LOCAL_ID_29519\">\n"
+            + "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n"
+            + "        </gml:LineString>\n" + "      </dpn:geometry>\n" + "    </dpn:RouteLink>";
+
+    public static final String madeUnknown = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">"
+            + "  <gml:featureMember>\n"
+            + "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">"
+            + "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n"
+            + "      <dpn:versionID>1</dpn:versionID>\n"
+            + "      <dpn:versionDate>2014-12-12</dpn:versionDate>\n"
+            + "      <dpn:startNode xlink:href=\"#df162dd8-c284-469b-81d6-d63105a39c7f\"/>\n"
+            + "      <dpn:endNode xlink:href=\"#56dc4c0b-0586-4849-b3e2-1e00ee149429\"/>\n"
+            + "      <dpn:descriptiveGroup codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork\">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>\n"
+            + "      <dpn:descriptiveTerm codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#NoPhysicalManifestation\">No Physical Manifestation</dpn:descriptiveTerm>\n"
+            + "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#MadeUnknown\">Made Unknown</dpn:surfaceType>\n"
+            + "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#BelowSurfaceLevelTunnel\">Below Surface Level Tunnel</dpn:physicalLevel>\n"
+            + "      <dpn:name>Named Road</dpn:name>\n"
+            + "      <dpn:rightOfUse>Restricted Byway</dpn:rightOfUse>\n"
+            + "      <dpn:adoptedByNationalCycleRoute>false</dpn:adoptedByNationalCycleRoute>\n"
+            + "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n"
+            + "      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>\n"
+            + "      <dpn:withinAccessLand>true</dpn:withinAccessLand>\n"
+            + "      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>\n"
+            + "      <dpn:verticalGain>\n"
+            + "        <dpn:VerticalGainType>\n"
+            + "          <dpn:inDirection uom=\"m\">9</dpn:inDirection>\n"
+            + "          <dpn:againstDirection uom=\"m\">2</dpn:againstDirection>\n"
+            + "        </dpn:VerticalGainType>\n"
+            + "      </dpn:verticalGain>\n"
+            + "      <dpn:planimetricLength uom=\"m\">85</dpn:planimetricLength>\n"
+            + "      <dpn:surfaceLength uom=\"m\">86</dpn:surfaceLength>\n"
+            + "      <dpn:geometry>\n"
+            + "        <gml:LineString srsName=\"urn:ogc:def:crs:EPSG::7405\" gml:id=\"LOCAL_ID_29519\">\n"
+            + "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n"
+            + "        </gml:LineString>\n" + "      </dpn:geometry>\n" + "    </dpn:RouteLink>";
+
+    public static final String unmadeNoPhysicalButWithinAccessLand = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">"
+            + "  <gml:featureMember>\n"
+            + "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">"
+            + "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n"
+            + "      <dpn:versionID>1</dpn:versionID>\n"
+            + "      <dpn:versionDate>2014-12-12</dpn:versionDate>\n"
+            + "      <dpn:startNode xlink:href=\"#df162dd8-c284-469b-81d6-d63105a39c7f\"/>\n"
+            + "      <dpn:endNode xlink:href=\"#56dc4c0b-0586-4849-b3e2-1e00ee149429\"/>\n"
+            + "      <dpn:descriptiveGroup codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork\">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>\n"
+            + "      <dpn:descriptiveTerm codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#NoPhysicalManifestation\">No Physical Manifestation</dpn:descriptiveTerm>\n"
+            + "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#Unmade\">Unmade</dpn:surfaceType>\n"
+            + "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#BelowSurfaceLevelTunnel\">Below Surface Level Tunnel</dpn:physicalLevel>\n"
+            + "      <dpn:name>Named Road</dpn:name>\n"
+            + "      <dpn:adoptedByNationalCycleRoute>false</dpn:adoptedByNationalCycleRoute>\n"
+            + "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n"
+            + "      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>\n"
+            + "      <dpn:withinAccessLand>true</dpn:withinAccessLand>\n"
+            + "      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>\n"
+            + "      <dpn:verticalGain>\n"
+            + "        <dpn:VerticalGainType>\n"
+            + "          <dpn:inDirection uom=\"m\">9</dpn:inDirection>\n"
+            + "          <dpn:againstDirection uom=\"m\">2</dpn:againstDirection>\n"
+            + "        </dpn:VerticalGainType>\n"
+            + "      </dpn:verticalGain>\n"
+            + "      <dpn:planimetricLength uom=\"m\">85</dpn:planimetricLength>\n"
+            + "      <dpn:surfaceLength uom=\"m\">86</dpn:surfaceLength>\n"
+            + "      <dpn:geometry>\n"
+            + "        <gml:LineString srsName=\"urn:ogc:def:crs:EPSG::7405\" gml:id=\"LOCAL_ID_29519\">\n"
+            + "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n"
+            + "        </gml:LineString>\n" + "      </dpn:geometry>\n" + "    </dpn:RouteLink>";
+
+    public static final String adoptedNationalCycleRoute = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">"
+            + "  <gml:featureMember>\n"
+            + "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">"
+            + "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n"
+            + "      <dpn:versionID>1</dpn:versionID>\n"
+            + "      <dpn:versionDate>2014-12-12</dpn:versionDate>\n"
+            + "      <dpn:startNode xlink:href=\"#df162dd8-c284-469b-81d6-d63105a39c7f\"/>\n"
+            + "      <dpn:endNode xlink:href=\"#56dc4c0b-0586-4849-b3e2-1e00ee149429\"/>\n"
+            + "      <dpn:descriptiveGroup codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork\">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>\n"
+            + "      <dpn:descriptiveTerm codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#NoPhysicalManifestation\">No Physical Manifestation</dpn:descriptiveTerm>\n"
+            + "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#Unmade\">Unmade</dpn:surfaceType>\n"
+            + "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#BelowSurfaceLevelTunnel\">Below Surface Level Tunnel</dpn:physicalLevel>\n"
+            + "      <dpn:name>Named Road</dpn:name>\n"
+            + "      <dpn:adoptedByNationalCycleRoute>true</dpn:adoptedByNationalCycleRoute>\n"
+            + "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n"
+            + "      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>\n"
+            + "      <dpn:withinAccessLand>true</dpn:withinAccessLand>\n"
+            + "      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>\n"
+            + "      <dpn:verticalGain>\n"
+            + "        <dpn:VerticalGainType>\n"
+            + "          <dpn:inDirection uom=\"m\">9</dpn:inDirection>\n"
+            + "          <dpn:againstDirection uom=\"m\">2</dpn:againstDirection>\n"
+            + "        </dpn:VerticalGainType>\n"
+            + "      </dpn:verticalGain>\n"
+            + "      <dpn:planimetricLength uom=\"m\">85</dpn:planimetricLength>\n"
+            + "      <dpn:surfaceLength uom=\"m\">86</dpn:surfaceLength>\n"
+            + "      <dpn:geometry>\n"
+            + "        <gml:LineString srsName=\"urn:ogc:def:crs:EPSG::7405\" gml:id=\"LOCAL_ID_29519\">\n"
+            + "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n"
+            + "        </gml:LineString>\n" + "      </dpn:geometry>\n" + "    </dpn:RouteLink>";
+
+    public static final String adoptedOtherCycleRoute = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">"
+            + "  <gml:featureMember>\n"
+            + "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">"
+            + "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n"
+            + "      <dpn:versionID>1</dpn:versionID>\n"
+            + "      <dpn:versionDate>2014-12-12</dpn:versionDate>\n"
+            + "      <dpn:startNode xlink:href=\"#df162dd8-c284-469b-81d6-d63105a39c7f\"/>\n"
+            + "      <dpn:endNode xlink:href=\"#56dc4c0b-0586-4849-b3e2-1e00ee149429\"/>\n"
+            + "      <dpn:descriptiveGroup codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork\">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>\n"
+            + "      <dpn:descriptiveTerm codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#NoPhysicalManifestation\">No Physical Manifestation</dpn:descriptiveTerm>\n"
+            + "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#Unmade\">Unmade</dpn:surfaceType>\n"
+            + "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#BelowSurfaceLevelTunnel\">Below Surface Level Tunnel</dpn:physicalLevel>\n"
+            + "      <dpn:name>Named Road</dpn:name>\n"
+            + "      <dpn:adoptedByNationalCycleRoute>true</dpn:adoptedByNationalCycleRoute>\n"
+            + "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n"
+            + "      <dpn:adoptedByOtherCycleRoute>true</dpn:adoptedByOtherCycleRoute>\n"
+            + "      <dpn:withinAccessLand>true</dpn:withinAccessLand>\n"
+            + "      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>\n"
+            + "      <dpn:verticalGain>\n"
+            + "        <dpn:VerticalGainType>\n"
+            + "          <dpn:inDirection uom=\"m\">9</dpn:inDirection>\n"
+            + "          <dpn:againstDirection uom=\"m\">2</dpn:againstDirection>\n"
+            + "        </dpn:VerticalGainType>\n"
+            + "      </dpn:verticalGain>\n"
+            + "      <dpn:planimetricLength uom=\"m\">85</dpn:planimetricLength>\n"
+            + "      <dpn:surfaceLength uom=\"m\">86</dpn:surfaceLength>\n"
+            + "      <dpn:geometry>\n"
+            + "        <gml:LineString srsName=\"urn:ogc:def:crs:EPSG::7405\" gml:id=\"LOCAL_ID_29519\">\n"
+            + "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n"
+            + "        </gml:LineString>\n" + "      </dpn:geometry>\n" + "    </dpn:RouteLink>";
+
+    public static final String aRoad = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">"
+            + "  <gml:featureMember>\n"
+            + "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">"
+            + "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n"
+            + "      <dpn:versionID>1</dpn:versionID>\n"
+            + "      <dpn:versionDate>2014-12-12</dpn:versionDate>\n"
+            + "      <dpn:startNode xlink:href=\"#df162dd8-c284-469b-81d6-d63105a39c7f\"/>\n"
+            + "      <dpn:endNode xlink:href=\"#56dc4c0b-0586-4849-b3e2-1e00ee149429\"/>\n"
+            + "      <dpn:descriptiveGroup codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork\">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>\n"
+            + "      <dpn:descriptiveTerm codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#ARoad\">A Road</dpn:descriptiveTerm>\n"
+            + "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#Unmade\">Unmade</dpn:surfaceType>\n"
+            + "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#BelowSurfaceLevelTunnel\">Below Surface Level Tunnel</dpn:physicalLevel>\n"
+            + "      <dpn:name>Named Road</dpn:name>\n"
+            + "      <dpn:adoptedByNationalCycleRoute>false</dpn:adoptedByNationalCycleRoute>\n"
+            + "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n"
+            + "      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>\n"
+            + "      <dpn:withinAccessLand>true</dpn:withinAccessLand>\n"
+            + "      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>\n"
+            + "      <dpn:verticalGain>\n"
+            + "        <dpn:VerticalGainType>\n"
+            + "          <dpn:inDirection uom=\"m\">9</dpn:inDirection>\n"
+            + "          <dpn:againstDirection uom=\"m\">2</dpn:againstDirection>\n"
+            + "        </dpn:VerticalGainType>\n"
+            + "      </dpn:verticalGain>\n"
+            + "      <dpn:planimetricLength uom=\"m\">85</dpn:planimetricLength>\n"
+            + "      <dpn:surfaceLength uom=\"m\">86</dpn:surfaceLength>\n"
+            + "      <dpn:geometry>\n"
+            + "        <gml:LineString srsName=\"urn:ogc:def:crs:EPSG::7405\" gml:id=\"LOCAL_ID_29519\">\n"
+            + "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n"
+            + "        </gml:LineString>\n" + "      </dpn:geometry>\n" + "    </dpn:RouteLink>";
+
+    public static final String bRoad = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">"
+            + "  <gml:featureMember>\n"
+            + "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">"
+            + "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n"
+            + "      <dpn:versionID>1</dpn:versionID>\n"
+            + "      <dpn:versionDate>2014-12-12</dpn:versionDate>\n"
+            + "      <dpn:startNode xlink:href=\"#df162dd8-c284-469b-81d6-d63105a39c7f\"/>\n"
+            + "      <dpn:endNode xlink:href=\"#56dc4c0b-0586-4849-b3e2-1e00ee149429\"/>\n"
+            + "      <dpn:descriptiveGroup codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork\">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>\n"
+            + "      <dpn:descriptiveTerm codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#BRoad\">B Road</dpn:descriptiveTerm>\n"
+            + "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#Unmade\">Unmade</dpn:surfaceType>\n"
+            + "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#BelowSurfaceLevelTunnel\">Below Surface Level Tunnel</dpn:physicalLevel>\n"
+            + "      <dpn:name>Named Road</dpn:name>\n"
+            + "      <dpn:adoptedByNationalCycleRoute>false</dpn:adoptedByNationalCycleRoute>\n"
+            + "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n"
+            + "      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>\n"
+            + "      <dpn:withinAccessLand>true</dpn:withinAccessLand>\n"
+            + "      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>\n"
+            + "      <dpn:verticalGain>\n"
+            + "        <dpn:VerticalGainType>\n"
+            + "          <dpn:inDirection uom=\"m\">9</dpn:inDirection>\n"
+            + "          <dpn:againstDirection uom=\"m\">2</dpn:againstDirection>\n"
+            + "        </dpn:VerticalGainType>\n"
+            + "      </dpn:verticalGain>\n"
+            + "      <dpn:planimetricLength uom=\"m\">85</dpn:planimetricLength>\n"
+            + "      <dpn:surfaceLength uom=\"m\">86</dpn:surfaceLength>\n"
+            + "      <dpn:geometry>\n"
+            + "        <gml:LineString srsName=\"urn:ogc:def:crs:EPSG::7405\" gml:id=\"LOCAL_ID_29519\">\n"
+            + "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n"
+            + "        </gml:LineString>\n" + "      </dpn:geometry>\n" + "    </dpn:RouteLink>";
+
+    public static final String alley = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">"
+            + "  <gml:featureMember>\n"
+            + "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">"
+            + "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n"
+            + "      <dpn:versionID>1</dpn:versionID>\n"
+            + "      <dpn:versionDate>2014-12-12</dpn:versionDate>\n"
+            + "      <dpn:startNode xlink:href=\"#df162dd8-c284-469b-81d6-d63105a39c7f\"/>\n"
+            + "      <dpn:endNode xlink:href=\"#56dc4c0b-0586-4849-b3e2-1e00ee149429\"/>\n"
+            + "      <dpn:descriptiveGroup codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork\">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>\n"
+            + "      <dpn:descriptiveTerm codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#Alley\">Alley</dpn:descriptiveTerm>\n"
+            + "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#Unmade\">Unmade</dpn:surfaceType>\n"
+            + "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#BelowSurfaceLevelTunnel\">Below Surface Level Tunnel</dpn:physicalLevel>\n"
+            + "      <dpn:name>Named Road</dpn:name>\n"
+            + "      <dpn:adoptedByNationalCycleRoute>false</dpn:adoptedByNationalCycleRoute>\n"
+            + "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n"
+            + "      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>\n"
+            + "      <dpn:withinAccessLand>true</dpn:withinAccessLand>\n"
+            + "      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>\n"
+            + "      <dpn:verticalGain>\n"
+            + "        <dpn:VerticalGainType>\n"
+            + "          <dpn:inDirection uom=\"m\">9</dpn:inDirection>\n"
+            + "          <dpn:againstDirection uom=\"m\">2</dpn:againstDirection>\n"
+            + "        </dpn:VerticalGainType>\n"
+            + "      </dpn:verticalGain>\n"
+            + "      <dpn:planimetricLength uom=\"m\">85</dpn:planimetricLength>\n"
+            + "      <dpn:surfaceLength uom=\"m\">86</dpn:surfaceLength>\n"
+            + "      <dpn:geometry>\n"
+            + "        <gml:LineString srsName=\"urn:ogc:def:crs:EPSG::7405\" gml:id=\"LOCAL_ID_29519\">\n"
+            + "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n"
+            + "        </gml:LineString>\n" + "      </dpn:geometry>\n" + "    </dpn:RouteLink>";
+
+    public static final String privateRoad = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">"
+            + "  <gml:featureMember>\n"
+            + "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">"
+            + "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n"
+            + "      <dpn:versionID>1</dpn:versionID>\n"
+            + "      <dpn:versionDate>2014-12-12</dpn:versionDate>\n"
+            + "      <dpn:startNode xlink:href=\"#df162dd8-c284-469b-81d6-d63105a39c7f\"/>\n"
+            + "      <dpn:endNode xlink:href=\"#56dc4c0b-0586-4849-b3e2-1e00ee149429\"/>\n"
+            + "      <dpn:descriptiveGroup codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork\">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>\n"
+            + "      <dpn:descriptiveTerm codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#PrivateRoad\">Private Road</dpn:descriptiveTerm>\n"
+            + "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#Unmade\">Unmade</dpn:surfaceType>\n"
+            + "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#BelowSurfaceLevelTunnel\">Below Surface Level Tunnel</dpn:physicalLevel>\n"
+            + "      <dpn:name>Named Road</dpn:name>\n"
+            + "      <dpn:adoptedByNationalCycleRoute>false</dpn:adoptedByNationalCycleRoute>\n"
+            + "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n"
+            + "      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>\n"
+            + "      <dpn:withinAccessLand>true</dpn:withinAccessLand>\n"
+            + "      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>\n"
+            + "      <dpn:verticalGain>\n"
+            + "        <dpn:VerticalGainType>\n"
+            + "          <dpn:inDirection uom=\"m\">9</dpn:inDirection>\n"
+            + "          <dpn:againstDirection uom=\"m\">2</dpn:againstDirection>\n"
+            + "        </dpn:VerticalGainType>\n"
+            + "      </dpn:verticalGain>\n"
+            + "      <dpn:planimetricLength uom=\"m\">85</dpn:planimetricLength>\n"
+            + "      <dpn:surfaceLength uom=\"m\">86</dpn:surfaceLength>\n"
+            + "      <dpn:geometry>\n"
+            + "        <gml:LineString srsName=\"urn:ogc:def:crs:EPSG::7405\" gml:id=\"LOCAL_ID_29519\">\n"
+            + "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n"
+            + "        </gml:LineString>\n" + "      </dpn:geometry>\n" + "    </dpn:RouteLink>";
+
+    public static final String path = "<?xml version=\"1.0\" encoding=\"UTF-8\"?><gml:FeatureCollection xmlns:gml=\"http://www.opengis.net/gml/3.2\" xsi:schemaLocation=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0 detailedPathNetwork.xsd http://www.opengis.net/gml/3.2 gml/3.2.1/gml.xsd\" gml:id=\"DPN\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xmlns:xs=\"http://www.w3.org/2001/XMLSchema\" xmlns:dpn=\"http://namespaces.ordnancesurvey.co.uk/networks/detailedPathNetwork/1.0\" xmlns:gmd=\"http://www.isotc211.org/2005/gmd\" xmlns:gco=\"http://www.isotc211.org/2005/gco\" xmlns:xlink=\"http://www.w3.org/1999/xlink\" xmlns:gss=\"http://www.isotc211.org/2005/gss\" xmlns:gts=\"http://www.isotc211.org/2005/gts\" xmlns:gsr=\"http://www.isotc211.org/2005/gsr\" xmlns:gmlxbt=\"http://www.opengis.net/gml/3.3/xbt\">"
+            + "  <gml:featureMember>\n"
+            + "    <dpn:RouteLink gml:id=\"osgb35cff694-c2a8-461e-9540-730e3ae11a7a\">"
+            + "      <dpn:featureID>35cff694-c2a8-461e-9540-730e3ae11a7a</dpn:featureID>\n"
+            + "      <dpn:versionID>1</dpn:versionID>\n"
+            + "      <dpn:versionDate>2014-12-12</dpn:versionDate>\n"
+            + "      <dpn:startNode xlink:href=\"#df162dd8-c284-469b-81d6-d63105a39c7f\"/>\n"
+            + "      <dpn:endNode xlink:href=\"#56dc4c0b-0586-4849-b3e2-1e00ee149429\"/>\n"
+            + "      <dpn:descriptiveGroup codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteDescriptiveGroupValue#NonMotorisedVehicularRouteNetwork\">Non Motorised Vehicular Route Network</dpn:descriptiveGroup>\n"
+            + "      <dpn:descriptiveTerm codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/RouteLinkDescriptiveTermValue#Path\">Path</dpn:descriptiveTerm>\n"
+            + "      <dpn:surfaceType codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/SurfaceTypeValue#Unmade\">Unmade</dpn:surfaceType>\n"
+            + "      <dpn:physicalLevel codeSpace=\"http://www.ordnancesurvey.co.uk/xml/codelists/LevelCodeValue#BelowSurfaceLevelTunnel\">Below Surface Level Tunnel</dpn:physicalLevel>\n"
+            + "      <dpn:name>Named Road</dpn:name>\n"
+            + "      <dpn:adoptedByNationalCycleRoute>false</dpn:adoptedByNationalCycleRoute>\n"
+            + "      <dpn:adoptedByRecreationalRoute>false</dpn:adoptedByRecreationalRoute>\n"
+            + "      <dpn:adoptedByOtherCycleRoute>false</dpn:adoptedByOtherCycleRoute>\n"
+            + "      <dpn:withinAccessLand>true</dpn:withinAccessLand>\n"
+            + "      <dpn:crossesDangerArea>false</dpn:crossesDangerArea>\n"
+            + "      <dpn:verticalGain>\n"
+            + "        <dpn:VerticalGainType>\n"
+            + "          <dpn:inDirection uom=\"m\">9</dpn:inDirection>\n"
+            + "          <dpn:againstDirection uom=\"m\">2</dpn:againstDirection>\n"
+            + "        </dpn:VerticalGainType>\n"
+            + "      </dpn:verticalGain>\n"
+            + "      <dpn:planimetricLength uom=\"m\">85</dpn:planimetricLength>\n"
+            + "      <dpn:surfaceLength uom=\"m\">86</dpn:surfaceLength>\n"
+            + "      <dpn:geometry>\n"
+            + "        <gml:LineString srsName=\"urn:ogc:def:crs:EPSG::7405\" gml:id=\"LOCAL_ID_29519\">\n"
+            + "          <gml:posList srsDimension=\"3\" count=\"10\">428672.241 380372.608999999 299.7 428653.822 380372.229 302.5 428647.49 380373.239 303.29 428645.296 380374.958000001 303.36 428638.156 380386.505000001 302.3 428635.625 380389.073999999 301.89 428631.214 380390.913000001 301.39 428628.625 380390.854 301.44 428622.598 380388.684 302.44 428598.489 380377.006999999 306.36</gml:posList>\n"
+            + "        </gml:LineString>\n" + "      </dpn:geometry>\n" + "    </dpn:RouteLink>";
 
     @Test
-    public void testSurface() throws XMLStreamException, FactoryException, TransformException
-    {
+    public void testSurface() throws XMLStreamException, FactoryException, TransformException {
         OsDpnWay way = getOsDpnWay(surfaceWay);
         assertFalse("Way should not have a tunnel", way.hasTag("tunnel", "yes"));
         assertFalse("Way should not have a bridge", way.hasTag("bridge", "yes"));
     }
 
     @Test
-    public void testWithinAccessLand() throws XMLStreamException, FactoryException, TransformException
-    {
+    public void testWithinAccessLand() throws XMLStreamException, FactoryException, TransformException {
         OsDpnWay way = getOsDpnWay(unmadeNoPhysicalButWithinAccessLand);
-        assertTrue("Should allow walking as within access land even though no other right of way declared", way.hasTag("foot", "yes"));
+        assertTrue("Should allow walking as within access land even though no other right of way declared",
+                way.hasTag("foot", "yes"));
     }
 
     @Test
-    public void testBelowSurfaceTunnel() throws XMLStreamException, FactoryException, TransformException
-    {
+    public void testBelowSurfaceTunnel() throws XMLStreamException, FactoryException, TransformException {
         OsDpnWay way = getOsDpnWay(tunnelWay);
         assertTrue("Way should have a tunnel", way.hasTag("tunnel", "yes"));
         assertFalse("Way should not have a bridge", way.hasTag("bridge", "yes"));
@@ -621,13 +683,31 @@ public void testRightOfWayRestrictedByway() throws XMLStreamException, FactoryEx
         OsDpnWay way = getOsDpnWay(restrictedByWay);
         assertTrue("Way should be designation bridleway", way.hasTag("designation", "restricted_byway"));
     }
-    
+
     @Test
     public void testPotentialHazardMud() throws XMLStreamException, FactoryException, TransformException {
         OsDpnWay way = getOsDpnWay(hazardMud);
         assertTrue("Way should be tagged natural=mud", way.hasTag("natural", "mud"));
     }
 
+    @Test(expected = InvalidPotentialHazardException.class)
+    public void testPotentialHazardInvalid() throws XMLStreamException, FactoryException, TransformException {
+        OsDpnWay.THROW_EXCEPTION_ON_INVALID_HAZARD = true;
+        getOsDpnWay(hazardInvalid);
+    }
+
+    @Test
+    public void testPotentialHazardMultipleOneLine() throws XMLStreamException, FactoryException, TransformException {
+        OsDpnWay way = getOsDpnWay(hazardMultipleOneLine);
+        assertTrue("Mud and Scree", way.hasTag("natural", "mud,scree"));
+    }
+
+    @Test
+    public void testPotentialHazardMultiple() throws XMLStreamException, FactoryException, TransformException {
+        OsDpnWay way = getOsDpnWay(hazardMultiple);
+        assertTrue("Mud", way.hasTag("natural", "mud,scree"));
+    }
+
     @Test
     public void testMadeSealed() throws XMLStreamException, FactoryException, TransformException {
         OsDpnWay way = getOsDpnWay(madeSealed);
@@ -641,7 +721,8 @@ public void testMadeUnsealed() throws XMLStreamException, FactoryException, Tran
     }
 
     /**
-     * With no better information to go on this will need to be classified as the same as Made Unsealed
+     * With no better information to go on this will need to be classified as
+     * the same as Made Unsealed
      *
      */
     @Test
@@ -667,32 +748,32 @@ public void testAdoptedOtherCycleRoute() throws XMLStreamException, FactoryExcep
         OsDpnWay way = getOsDpnWay(adoptedOtherCycleRoute);
         assertTrue("Way bicycle accessible", way.hasTag("bicycle", "yes"));
     }
-    
+
     @Test
     public void testARoad() throws XMLStreamException, FactoryException, TransformException {
         OsDpnWay way = getOsDpnWay(aRoad);
         assertTrue("A Roads are primary", way.hasTag("highway", "primary"));
     }
-    
+
     @Test
     public void testBRoad() throws XMLStreamException, FactoryException, TransformException {
         OsDpnWay way = getOsDpnWay(bRoad);
         assertTrue("B Roads are secondary", way.hasTag("highway", "secondary"));
     }
-    
+
     @Test
     public void testAlley() throws XMLStreamException, FactoryException, TransformException {
         OsDpnWay way = getOsDpnWay(alley);
         assertTrue("Alleys are service roads", way.hasTag("highway", "service"));
         assertTrue("Alleys are service roads", way.hasTag("service", "alley"));
     }
-    
+
     @Test
     public void testPrivate() throws XMLStreamException, FactoryException, TransformException {
         OsDpnWay way = getOsDpnWay(privateRoad);
         assertTrue(way.hasTag("highway", "private"));
     }
-    
+
     @Test
     public void testPath() throws XMLStreamException, FactoryException, TransformException {
         OsDpnWay way = getOsDpnWay(path);
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/BouldersTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/BouldersTest.java
index 36c1df62e2..e3eb8cf0bc 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/BouldersTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/BouldersTest.java
@@ -30,8 +30,9 @@ public void init() {
     @Test
     public void testVisitWayAttribute() throws Exception {
         visitor.visitWayAttribute("boulders", way);
+        verify(way).getTag("natural");
         verify(way).setTag("natural", "boulders"); // Not an osm tag but what
-                                                   // makes sense for dpn
+        // makes sense for dpn
         verifyNoMoreInteractions(way);
     }
 
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/CliffTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/CliffTest.java
index a055e527b9..ef8bfb6266 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/CliffTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/CliffTest.java
@@ -30,6 +30,7 @@ public void init() {
     @Test
     public void testVisitWayAttribute() throws Exception {
         visitor.visitWayAttribute("cliff", way);
+        verify(way).getTag("natural");
         verify(way).setTag("natural", "cliff");
         verifyNoMoreInteractions(way);
     }
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/ForeshoreTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/ForeshoreTest.java
index 379b52c8f6..95d88b8f35 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/ForeshoreTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/ForeshoreTest.java
@@ -30,6 +30,7 @@ public void init() {
     @Test
     public void testVisitWayAttribute() throws Exception {
         visitor.visitWayAttribute("foreshore", way);
+        verify(way).getTag("water");
         verify(way).setTag("water", "tidal");
         verifyNoMoreInteractions(way);
     }
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/InlandWaterTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/InlandWaterTest.java
index 21f45a398b..6e74406400 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/InlandWaterTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/InlandWaterTest.java
@@ -30,7 +30,10 @@ public void init() {
     @Test
     public void testVisitWayAttribute() throws Exception {
         visitor.visitWayAttribute("inlandwater", way);
+        verify(way).getTag("natural");
         verify(way).setTag("natural", "water");
+        verify(way).getTag("tidal");
+        verify(way).setTag("tidal", "no");
         verifyNoMoreInteractions(way);
     }
 
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/MarshTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/MarshTest.java
index 8e7a7a6af4..a341152db6 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/MarshTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/MarshTest.java
@@ -30,6 +30,7 @@ public void init() {
     @Test
     public void testVisitWayAttribute() throws Exception {
         visitor.visitWayAttribute("marsh", way);
+        verify(way).getTag("wetland");
         verify(way).setTag("wetland", "marsh");
         verifyNoMoreInteractions(way);
     }
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/MudTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/MudTest.java
index 55359d0ad1..4193c88d22 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/MudTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/MudTest.java
@@ -30,6 +30,7 @@ public void init() {
     @Test
     public void testVisitWayAttribute() throws Exception {
         visitor.visitWayAttribute("mud", way);
+        verify(way).getTag("natural");
         verify(way).setTag("natural", "mud");
         verifyNoMoreInteractions(way);
     }
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/QuarryOrPitTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/QuarryOrPitTest.java
index a1fa768984..48a2070371 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/QuarryOrPitTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/QuarryOrPitTest.java
@@ -30,6 +30,7 @@ public void init() {
     @Test
     public void testVisitWayAttribute() throws Exception {
         visitor.visitWayAttribute("quarryorpit", way);
+        verify(way).getTag("natural");
         verify(way).setTag("natural", "excavation");
         verifyNoMoreInteractions(way);
     }
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/RockTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/RockTest.java
index 061545c9f1..04184a048b 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/RockTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/RockTest.java
@@ -30,6 +30,7 @@ public void init() {
     @Test
     public void testVisitWayAttribute() throws Exception {
         visitor.visitWayAttribute("rock", way);
+        verify(way).getTag("natural");
         verify(way).setTag("natural", "rocks");
         verifyNoMoreInteractions(way);
     }
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/SandTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/SandTest.java
index 963d963d87..d28d57e14b 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/SandTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/SandTest.java
@@ -30,6 +30,7 @@ public void init() {
     @Test
     public void testVisitWayAttribute() throws Exception {
         visitor.visitWayAttribute("sand", way);
+        verify(way).getTag("natural");
         verify(way).setTag("natural", "sand");
         verifyNoMoreInteractions(way);
     }
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/ScreeTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/ScreeTest.java
index f308a165cf..a95f4c1fc7 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/ScreeTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/ScreeTest.java
@@ -30,6 +30,7 @@ public void init() {
     @Test
     public void testVisitWayAttribute() throws Exception {
         visitor.visitWayAttribute("scree", way);
+        verify(way).getTag("natural");
         verify(way).setTag("natural", "scree");
         verifyNoMoreInteractions(way);
     }
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/ShingleTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/ShingleTest.java
index 3329ebd824..a1d7e1951b 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/ShingleTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/ShingleTest.java
@@ -30,6 +30,7 @@ public void init() {
     @Test
     public void testVisitWayAttribute() throws Exception {
         visitor.visitWayAttribute("shingle", way);
+        verify(way).getTag("natural");
         verify(way).setTag("natural", "shingle");
         verifyNoMoreInteractions(way);
     }
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/SpoilTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/SpoilTest.java
index bfefad3185..02d8454fb0 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/SpoilTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/SpoilTest.java
@@ -30,6 +30,7 @@ public void init() {
     @Test
     public void testVisitWayAttribute() throws Exception {
         visitor.visitWayAttribute("spoil", way);
+        verify(way).getTag("man_made");
         verify(way).setTag("man_made", "spoil_heap");
         verifyNoMoreInteractions(way);
     }
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/TidalWaterTest.java b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/TidalWaterTest.java
index 820c84a9a3..99e6d72809 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/TidalWaterTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/dpn/potentialHazards/TidalWaterTest.java
@@ -30,6 +30,8 @@ public void init() {
     @Test
     public void testVisitWayAttribute() throws Exception {
         visitor.visitWayAttribute("tidalwater", way);
+        verify(way).getTag("natural");
+        verify(way).getTag("tidal");
         verify(way).setTag("natural", "water");
         verify(way).setTag("tidal", "yes");
         verifyNoMoreInteractions(way);
diff --git a/core/src/test/java/com/graphhopper/routing/util/OsFlagUtilsTest.java b/core/src/test/java/com/graphhopper/routing/util/OsFlagUtilsTest.java
new file mode 100644
index 0000000000..fcb1bab6f8
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/routing/util/OsFlagUtilsTest.java
@@ -0,0 +1,114 @@
+package com.graphhopper.routing.util;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
+import java.util.HashMap;
+import java.util.List;
+import java.util.Map;
+import java.util.Set;
+
+import org.junit.Before;
+import org.junit.Test;
+
+import com.graphhopper.reader.Way;
+
+public class OsFlagUtilsTest {
+
+    private Way testWay = null;
+
+    @Before
+    public void setup() {
+        testWay = new Way() {
+            private final Map<String, Object> properties = new HashMap<>();
+
+            @Override
+            public void setTag(String name, Object value) {
+                properties.put(name, value);
+            }
+
+            @Override
+            public String getTag(String name) {
+                Object object = properties.get(name);
+                return (null != object) ? (String) object.toString() : null;
+            }
+
+            @Override
+            public <T> T getTag(String key, T defaultValue) {
+                // TODO Auto-generated method stub
+                return null;
+            }
+
+            @Override
+            public boolean hasTags() {
+                // TODO Auto-generated method stub
+                return false;
+            }
+
+            @Override
+            public boolean hasTag(String key, String... values) {
+                // TODO Auto-generated method stub
+                return false;
+            }
+
+            @Override
+            public boolean hasTag(String key, Object value) {
+                // TODO Auto-generated method stub
+                return false;
+            }
+
+            @Override
+            public boolean hasTag(String key, Set<String> values) {
+                // TODO Auto-generated method stub
+                return false;
+            }
+
+            @Override
+            public boolean hasTag(List<String> keyList, Set<String> values) {
+                // TODO Auto-generated method stub
+                return false;
+            }
+
+            @Override
+            public int getType() {
+                // TODO Auto-generated method stub
+                return 0;
+            }
+
+            @Override
+            public boolean isType(int way) {
+                // TODO Auto-generated method stub
+                return false;
+            }
+
+        };
+    }
+
+    @Test
+    public void testHasTag_singleValue() {
+        testWay.setTag("key", "value1");
+        assertTrue("value1 should be in key", OsFlagUtils.hasTag(testWay, "key", "value1"));
+    }
+
+    @Test
+    public void testHasTag_multipleValues() {
+        testWay.setTag("key", "value1,value2");
+        assertTrue("value1 should be in key", OsFlagUtils.hasTag(testWay, "key", "value1"));
+        assertTrue("value2 should be in key", OsFlagUtils.hasTag(testWay, "key", "value2"));
+        assertFalse("value3 should NOT be in key", OsFlagUtils.hasTag(testWay, "key", "value3"));
+    }
+
+    @Test
+    public void testSetOrAppendTag_singleValue() {
+        OsFlagUtils.setOrAppendTag(testWay, "key", "value1");
+        OsFlagUtils.setOrAppendTag(testWay, "key", "value2");
+        assertEquals("value1,value2 should be in key", testWay.getTag("key"), "value1,value2");
+    }
+
+    @Test
+    public void testSetOrAppendTag_multipleValues() {
+        OsFlagUtils.setOrAppendTag(testWay, "key", "value1");
+        assertEquals("value1 should be in key", testWay.getTag("key"), "value1");
+    }
+}
