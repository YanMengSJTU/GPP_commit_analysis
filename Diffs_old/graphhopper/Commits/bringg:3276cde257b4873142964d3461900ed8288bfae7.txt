diff --git a/client-hc/src/main/java/com/graphhopper/api/GraphHopperWeb.java b/client-hc/src/main/java/com/graphhopper/api/GraphHopperWeb.java
index e0c5ede780..522ceeffb2 100644
--- a/client-hc/src/main/java/com/graphhopper/api/GraphHopperWeb.java
+++ b/client-hc/src/main/java/com/graphhopper/api/GraphHopperWeb.java
@@ -31,8 +31,6 @@
 import okhttp3.OkHttpClient;
 import okhttp3.Request;
 import okhttp3.ResponseBody;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
 
 import java.util.*;
 import java.util.concurrent.TimeUnit;
diff --git a/core/pom.xml b/core/pom.xml
index 365ef6a6f2..6ef59e0048 100644
--- a/core/pom.xml
+++ b/core/pom.xml
@@ -46,6 +46,12 @@
             <artifactId>slf4j-api</artifactId>
             <version>${slf4j.version}</version>
         </dependency>
+        <dependency>
+            <groupId>org.mockito</groupId>
+            <artifactId>mockito-all</artifactId>
+            <version>${mockito.version}</version>
+            <scope>test</scope>
+        </dependency>
 
         <!-- for using CGIAR: elevation data importing via tif files-->
         <dependency>
diff --git a/core/src/main/java/com/graphhopper/GHRequest.java b/core/src/main/java/com/graphhopper/GHRequest.java
index bc4ddeef8c..ffe2cf6d58 100644
--- a/core/src/main/java/com/graphhopper/GHRequest.java
+++ b/core/src/main/java/com/graphhopper/GHRequest.java
@@ -17,6 +17,7 @@
  */
 package com.graphhopper;
 
+import com.graphhopper.routing.WeightFactors;
 import com.graphhopper.routing.util.HintsMap;
 import com.graphhopper.util.Helper;
 import com.graphhopper.util.shapes.GHPoint;
@@ -43,6 +44,7 @@
     private String algo = "";
     private boolean possibleToAdd = false;
     private Locale locale = Locale.US;
+    private WeightFactors weightFactors = null;
 
     public GHRequest() {
         this(5);
@@ -263,6 +265,16 @@ public GHRequest setPathDetails(List<String> pathDetails) {
         return this.pathDetails;
     }
 
+
+    public GHRequest setWeightFactors(WeightFactors weightFactors) {
+        this.weightFactors = weightFactors;
+        return this;
+    }
+
+    public WeightFactors getWeightFactors() {
+        return weightFactors;
+    }
+
     @Override
     public String toString() {
         String res = "";
diff --git a/core/src/main/java/com/graphhopper/GraphHopper.java b/core/src/main/java/com/graphhopper/GraphHopper.java
index 7e45bf5e83..f2718ed9c5 100644
--- a/core/src/main/java/com/graphhopper/GraphHopper.java
+++ b/core/src/main/java/com/graphhopper/GraphHopper.java
@@ -1068,6 +1068,7 @@ else if (ALT_ROUTE.equalsIgnoreCase(algoStr))
 
                 AlgorithmOptions algoOpts = AlgorithmOptions.start().
                         algorithm(algoStr).traversalMode(tMode).weighting(weighting).
+                        weightingsFactorGetter(request.getWeightFactors()).
                         maxVisitedNodes(maxVisitedNodesForRequest).
                         hints(hints).
                         build();
diff --git a/core/src/main/java/com/graphhopper/routing/AbstractRoutingAlgorithm.java b/core/src/main/java/com/graphhopper/routing/AbstractRoutingAlgorithm.java
index 490b8812c9..d7f4f1f227 100644
--- a/core/src/main/java/com/graphhopper/routing/AbstractRoutingAlgorithm.java
+++ b/core/src/main/java/com/graphhopper/routing/AbstractRoutingAlgorithm.java
@@ -17,6 +17,7 @@
  */
 package com.graphhopper.routing;
 
+import com.google.common.annotations.VisibleForTesting;
 import com.graphhopper.routing.util.DefaultEdgeFilter;
 import com.graphhopper.routing.util.EdgeFilter;
 import com.graphhopper.routing.util.FlagEncoder;
@@ -133,4 +134,9 @@ public String toString() {
     protected boolean isMaxVisitedNodesExceeded() {
         return maxVisitedNodes < getVisitedNodes();
     }
+
+    @VisibleForTesting
+    public Weighting getWeighting() {
+        return weighting;
+    }
 }
diff --git a/core/src/main/java/com/graphhopper/routing/AlgorithmOptions.java b/core/src/main/java/com/graphhopper/routing/AlgorithmOptions.java
index 8412043c26..9a4cdf8993 100644
--- a/core/src/main/java/com/graphhopper/routing/AlgorithmOptions.java
+++ b/core/src/main/java/com/graphhopper/routing/AlgorithmOptions.java
@@ -38,6 +38,7 @@
     private final PMap hints = new PMap(5);
     private String algorithm = Parameters.Algorithms.DIJKSTRA_BI;
     private Weighting weighting;
+    private WeightFactors weightFactors;
     private TraversalMode traversalMode = TraversalMode.NODE_BASED;
     private int maxVisitedNodes = Integer.MAX_VALUE;
 
@@ -101,6 +102,10 @@ public Weighting getWeighting() {
         return weighting;
     }
 
+    public WeightFactors getWeightFactors() {
+        return weightFactors;
+    }
+
     public String getAlgorithm() {
         assertNotNull(algorithm, "algorithm");
         return algorithm;
@@ -141,6 +146,11 @@ public Builder weighting(Weighting weighting) {
             return this;
         }
 
+        public Builder weightingsFactorGetter(WeightFactors weightFactors) {
+            this.opts.weightFactors = weightFactors;
+            return this;
+        }
+
         /**
          * For possible values see Parameters.Algorithms
          */
diff --git a/core/src/main/java/com/graphhopper/routing/WeightFactors.java b/core/src/main/java/com/graphhopper/routing/WeightFactors.java
new file mode 100644
index 0000000000..1079e24e80
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/routing/WeightFactors.java
@@ -0,0 +1,7 @@
+package com.graphhopper.routing;
+
+import com.graphhopper.util.EdgeIteratorState;
+
+public interface WeightFactors {
+    double getFactor(EdgeIteratorState edgeState, boolean reverse);
+}
diff --git a/core/src/main/java/com/graphhopper/routing/ch/PrepareContractionHierarchies.java b/core/src/main/java/com/graphhopper/routing/ch/PrepareContractionHierarchies.java
index 6106deb49c..20b8bcd206 100644
--- a/core/src/main/java/com/graphhopper/routing/ch/PrepareContractionHierarchies.java
+++ b/core/src/main/java/com/graphhopper/routing/ch/PrepareContractionHierarchies.java
@@ -21,6 +21,7 @@
 import com.graphhopper.routing.*;
 import com.graphhopper.routing.util.*;
 import com.graphhopper.routing.weighting.Weighting;
+import com.graphhopper.routing.weighting.FactoredWeightings;
 import com.graphhopper.storage.*;
 import com.graphhopper.util.*;
 import org.slf4j.Logger;
@@ -170,15 +171,20 @@ public void doWork() {
     @Override
     public RoutingAlgorithm createAlgo(Graph graph, AlgorithmOptions opts) {
         AbstractBidirAlgo algo;
+
+        Weighting weighting = prepareWeighting;
+        if (opts.getWeightFactors() != null)
+            weighting = new FactoredWeightings(weighting, opts.getWeightFactors());
+
         if (ASTAR_BI.equals(opts.getAlgorithm())) {
-            AStarBidirection tmpAlgo = new AStarBidirectionCH(graph, prepareWeighting, traversalMode);
+            AStarBidirection tmpAlgo = new AStarBidirectionCH(graph, weighting, traversalMode);
             tmpAlgo.setApproximation(RoutingAlgorithmFactorySimple.getApproximation(ASTAR_BI, opts, graph.getNodeAccess()));
             algo = tmpAlgo;
         } else if (DIJKSTRA_BI.equals(opts.getAlgorithm())) {
             if (opts.getHints().getBool("stall_on_demand", true)) {
-                algo = new DijkstraBidirectionCH(graph, prepareWeighting, traversalMode);
+                algo = new DijkstraBidirectionCH(graph, weighting, traversalMode);
             } else {
-                algo = new DijkstraBidirectionCHNoSOD(graph, prepareWeighting, traversalMode);
+                algo = new DijkstraBidirectionCHNoSOD(graph, weighting, traversalMode);
             }
         } else {
             throw new IllegalArgumentException("Algorithm " + opts.getAlgorithm() + " not supported for Contraction Hierarchies. Try with ch.disable=true");
diff --git a/core/src/main/java/com/graphhopper/routing/weighting/FactoredWeightings.java b/core/src/main/java/com/graphhopper/routing/weighting/FactoredWeightings.java
new file mode 100644
index 0000000000..1e36f91f6f
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/routing/weighting/FactoredWeightings.java
@@ -0,0 +1,46 @@
+package com.graphhopper.routing.weighting;
+
+import com.graphhopper.routing.WeightFactors;
+import com.graphhopper.routing.util.FlagEncoder;
+import com.graphhopper.routing.util.HintsMap;
+import com.graphhopper.util.EdgeIteratorState;
+
+public class FactoredWeightings implements Weighting {
+    private Weighting weighting;
+    private final WeightFactors weightFactors;
+
+    public FactoredWeightings(Weighting weighting, WeightFactors weightFactors) {
+        this.weightFactors = weightFactors;
+        this.weighting = weighting;
+    }
+
+    @Override
+    public double getMinWeight(double distance) {
+        return weighting.getMinWeight(distance);
+    }
+
+    @Override
+    public double calcWeight(EdgeIteratorState edgeState, boolean reverse, int prevOrNextEdgeId) {
+        return weighting.calcWeight(edgeState, reverse, prevOrNextEdgeId) / weightFactors.getFactor(edgeState, reverse);
+    }
+
+    @Override
+    public long calcMillis(EdgeIteratorState edgeState, boolean reverse, int prevOrNextEdgeId) {
+        return (long) (weighting.calcMillis(edgeState, reverse, prevOrNextEdgeId) / weightFactors.getFactor(edgeState, reverse));
+    }
+
+    @Override
+    public FlagEncoder getFlagEncoder() {
+        return weighting.getFlagEncoder();
+    }
+
+    @Override
+    public String getName() {
+        return weighting.getName();
+    }
+
+    @Override
+    public boolean matches(HintsMap map) {
+        return weighting.matches(map);
+    }
+}
\ No newline at end of file
diff --git a/core/src/test/java/com/graphhopper/routing/ch/PrepareContractionHierarchiesTest.java b/core/src/test/java/com/graphhopper/routing/ch/PrepareContractionHierarchiesTest.java
index 9120578c95..00af2fdcf8 100644
--- a/core/src/test/java/com/graphhopper/routing/ch/PrepareContractionHierarchiesTest.java
+++ b/core/src/test/java/com/graphhopper/routing/ch/PrepareContractionHierarchiesTest.java
@@ -18,6 +18,7 @@
 package com.graphhopper.routing.ch;
 
 import com.carrotsearch.hppc.IntIndexedContainer;
+import com.graphhopper.WeightingWithPenalties;
 import com.graphhopper.routing.*;
 import com.graphhopper.routing.util.BikeFlagEncoder;
 import com.graphhopper.routing.util.CarFlagEncoder;
@@ -26,6 +27,7 @@
 import com.graphhopper.routing.weighting.FastestWeighting;
 import com.graphhopper.routing.weighting.ShortestWeighting;
 import com.graphhopper.routing.weighting.Weighting;
+import com.graphhopper.routing.weighting.FactoredWeightings;
 import com.graphhopper.storage.*;
 import com.graphhopper.util.*;
 import org.junit.Before;
@@ -34,8 +36,10 @@
 import java.util.Arrays;
 import java.util.List;
 
+import static com.graphhopper.util.Parameters.Algorithms.ASTAR_BI;
 import static com.graphhopper.util.Parameters.Algorithms.DIJKSTRA_BI;
 import static org.junit.Assert.*;
+import static org.mockito.Mockito.*;
 
 /**
  * @author Peter Karich
@@ -488,4 +492,21 @@ void checkPath(GraphHopperStorage ghStorage, Weighting w, int expShortcuts, doub
         assertEquals(w.toString(), expNodes, p.calcNodes());
     }
 
+    @Test
+    public void testCreateAlg() {
+        Graph graph = mock(Graph.class);
+        AlgorithmOptions algorithmOptions = mock(AlgorithmOptions.class);
+        WeightFactors weightFactors = mock(WeightFactors.class);
+        Directory dir = mock(Directory.class);
+        CHGraph chGraph = mock(CHGraphImpl.class);
+
+        when(algorithmOptions.getAlgorithm()).thenReturn(ASTAR_BI);
+        when(algorithmOptions.getHints()).thenReturn(new PMap());
+        when(algorithmOptions.getWeightFactors()).thenReturn(weightFactors);
+        final PrepareContractionHierarchies prepareContractionHierarchies = new PrepareContractionHierarchies(dir, null, chGraph, mock(WeightingWithPenalties.class), TraversalMode.NODE_BASED);
+
+        final RoutingAlgorithm algo = prepareContractionHierarchies.createAlgo(graph, algorithmOptions);
+        assertTrue(((AStarBidirectionCH)algo).getWeighting() instanceof FactoredWeightings);
+    }
+
 }
diff --git a/core/src/test/java/com/graphhopper/routing/weighting/FactoredWeightingsTest.java b/core/src/test/java/com/graphhopper/routing/weighting/FactoredWeightingsTest.java
new file mode 100644
index 0000000000..a802e0557c
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/routing/weighting/FactoredWeightingsTest.java
@@ -0,0 +1,69 @@
+package com.graphhopper.routing.weighting;
+
+import com.graphhopper.routing.WeightFactors;
+import com.graphhopper.util.EdgeIteratorState;
+import org.junit.Test;
+
+import java.util.Random;
+
+import static org.junit.Assert.*;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.when;
+
+public class FactoredWeightingsTest {
+    private final Random random = new Random();
+
+    @Test
+    public void calcWeight() {
+        int edgeId = random.nextInt(), baseNode = random.nextInt(), adjNode = random.nextInt();
+        double weight = 100 + random.nextDouble();
+        final double factor =  1 - random.nextDouble();
+
+        WeightFactors weightFactors = new WeightFactors() {
+            @Override
+            public double getFactor(EdgeIteratorState edgeState, boolean reverse) {
+                return !reverse ? factor : 1;
+            }
+        };
+
+        EdgeIteratorState edgeIteratorState = mock(EdgeIteratorState.class);
+        Weighting weighting = mock(Weighting.class);
+
+        when(edgeIteratorState.getEdge()).thenReturn(edgeId);
+        when(edgeIteratorState.getBaseNode()).thenReturn(baseNode);
+        when(edgeIteratorState.getAdjNode()).thenReturn(adjNode);
+        when(weighting.calcWeight(edgeIteratorState, false, 1)).thenReturn(weight);
+        when(weighting.calcWeight(edgeIteratorState, true, 1)).thenReturn(weight);
+
+        final FactoredWeightings factoredWeightings = new FactoredWeightings(weighting, weightFactors);
+        assertEquals(factoredWeightings.calcWeight(edgeIteratorState, false, 1), weight / factor, .001);
+        assertEquals(factoredWeightings.calcWeight(edgeIteratorState, true, 1), weight, .001);
+    }
+
+    @Test
+    public void calcWeightReverse() {
+        int edgeId = random.nextInt(), baseNode = random.nextInt(), adjNode = random.nextInt();
+        double weight = random.nextDouble();
+        final double factor = random.nextDouble();
+        WeightFactors weightFactors = new WeightFactors() {
+            @Override
+            public double getFactor(EdgeIteratorState edgeState, boolean reverse) {
+                return reverse ? factor : 1;
+            }
+        };
+
+        EdgeIteratorState edgeIteratorState = mock(EdgeIteratorState.class);
+        Weighting weighting = mock(Weighting.class);
+
+        when(edgeIteratorState.getEdge()).thenReturn(edgeId);
+        when(edgeIteratorState.getBaseNode()).thenReturn(baseNode);
+        when(edgeIteratorState.getAdjNode()).thenReturn(adjNode);
+        when(weighting.calcWeight(edgeIteratorState, true, 1)).thenReturn(weight);
+        when(weighting.calcWeight(edgeIteratorState, false, 1)).thenReturn(weight);
+
+        final FactoredWeightings factoredWeightings = new FactoredWeightings(weighting, weightFactors);
+
+        assertEquals(factoredWeightings.calcWeight(edgeIteratorState, true, 1), weight / factor, .001);
+        assertEquals(factoredWeightings.calcWeight(edgeIteratorState, false, 1), weight, .001);
+    }
+}
\ No newline at end of file
diff --git a/pom.xml b/pom.xml
index fe5ade3ea6..6227123a70 100644
--- a/pom.xml
+++ b/pom.xml
@@ -17,6 +17,7 @@
         <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
         <slf4j.version>1.7.25</slf4j.version>
         <log4j.version>1.2.17</log4j.version>
+        <mockito.version>1.9.5</mockito.version>
         <commons-compress.version>1.12</commons-compress.version>
         <jackson.version>2.9.1</jackson.version>
         <maven.compiler.target>1.8</maven.compiler.target>
