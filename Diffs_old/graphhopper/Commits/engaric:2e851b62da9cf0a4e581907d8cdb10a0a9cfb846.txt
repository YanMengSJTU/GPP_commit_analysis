diff --git a/core/pom.xml b/core/pom.xml
index a0c7cf6d31..f020f7557b 100644
--- a/core/pom.xml
+++ b/core/pom.xml
@@ -5,7 +5,7 @@
     <groupId>com.graphhopper</groupId>
     <artifactId>graphhopper</artifactId>
     <name>GraphHopper</name>
-    <version>1.21-SNAPSHOT</version>
+    <version>1.26-SNAPSHOT</version>
     <packaging>jar</packaging> 
     <description>
         GraphHopper is a fast and memory efficient Java road routing engine 
@@ -14,7 +14,7 @@
     <parent>
         <groupId>com.graphhopper</groupId>
         <artifactId>graphhopper-parent</artifactId>    	
-        <version>1.21-SNAPSHOT</version>
+        <version>1.26-SNAPSHOT</version>
     </parent>
         
     <properties>  
diff --git a/core/src/main/java/com/graphhopper/GraphHopper.java b/core/src/main/java/com/graphhopper/GraphHopper.java
index bef6944d49..fed6ef28c2 100644
--- a/core/src/main/java/com/graphhopper/GraphHopper.java
+++ b/core/src/main/java/com/graphhopper/GraphHopper.java
@@ -56,6 +56,7 @@
 import com.graphhopper.routing.util.PrepareRoutingSubnetworks;
 import com.graphhopper.routing.util.PriorityWeighting;
 import com.graphhopper.routing.util.PriorityWithAvoidancesWeighting;
+import com.graphhopper.routing.util.PrivateEdgeFilter;
 import com.graphhopper.routing.util.ShortestWeighting;
 import com.graphhopper.routing.util.ShortestWithAvoidancesWeighting;
 import com.graphhopper.routing.util.TraversalMode;
@@ -926,7 +927,6 @@ public Weighting createWeighting( WeightingMap weightingMap, FlagEncoder encoder
 		Weighting result;
 
 		String avoidanceString = weightingMap.get("avoidances","");
-		System.err.println("AVOID:" + avoidanceString);
 		boolean avoidancesEnabled = avoidanceString.length()>0;
 		if ("shortest".equalsIgnoreCase(weighting))
 		{
@@ -1063,7 +1063,12 @@ public GHResponse route( GHRequest request )
 		visitedSum.set(0);
 
 		FlagEncoder encoder = encodingManager.getEncoder(vehicle);
-		EdgeFilter edgeFilter = new DefaultEdgeFilter(encoder);
+		EdgeFilter edgeFilter;
+		if(!encoder.supports(EscapePrivateWeighting.class) || checkForNoThroughAccess(request)) {
+			edgeFilter = new DefaultEdgeFilter(encoder);
+		} else {
+			edgeFilter = new PrivateEdgeFilter(encoder);
+		}
 
 		StopWatch sw = new StopWatch().start();
 		List<QueryResult> qResults = new ArrayList<QueryResult>(points.size());
diff --git a/core/src/main/java/com/graphhopper/routing/util/AbstractAvoidanceDecorator.java b/core/src/main/java/com/graphhopper/routing/util/AbstractAvoidanceDecorator.java
index 994001ae2c..096cf6f788 100644
--- a/core/src/main/java/com/graphhopper/routing/util/AbstractAvoidanceDecorator.java
+++ b/core/src/main/java/com/graphhopper/routing/util/AbstractAvoidanceDecorator.java
@@ -74,17 +74,20 @@ public long handleWayTags( Way way )
 
 	private String getWayName( long wayType, Translation tr )
 	{
-		String wayName = "";
+		StringBuilder wayName = new StringBuilder();
 		for (EdgeAttribute aType : getEdgeAttributesOfInterest())
 		{
 			if ((wayType & aType.getValue()) == aType.getValue())
 			{
-				wayName += " ";
-				wayName += aType.name();
+				wayName.append(aType.name());
+				wayName.append(", ");
 			}
 		}
-
-		return wayName;
+		int length = wayName.length();
+		if(length>0) {
+			wayName.delete(length -2, length);
+		}
+		return wayName.toString();
 	}
 
 	@Override
diff --git a/core/src/main/java/com/graphhopper/routing/util/DefaultEdgeFilter.java b/core/src/main/java/com/graphhopper/routing/util/DefaultEdgeFilter.java
index e86ca2c43d..9b9076cfbe 100644
--- a/core/src/main/java/com/graphhopper/routing/util/DefaultEdgeFilter.java
+++ b/core/src/main/java/com/graphhopper/routing/util/DefaultEdgeFilter.java
@@ -26,7 +26,7 @@
 {
     private final boolean in;
     private final boolean out;
-    private FlagEncoder encoder;
+    protected FlagEncoder encoder;
 
     /**
      * Creates an edges filter which accepts both direction of the specified vehicle.
@@ -44,7 +44,7 @@ public DefaultEdgeFilter( FlagEncoder encoder, boolean in, boolean out )
     }
 
     @Override
-    public final boolean accept( EdgeIteratorState iter )
+    public boolean accept( EdgeIteratorState iter )
     {
         long flags = iter.getFlags();
         return out && encoder.isForward(flags) || in && encoder.isBackward(flags);
diff --git a/core/src/main/java/com/graphhopper/routing/util/PrivateEdgeFilter.java b/core/src/main/java/com/graphhopper/routing/util/PrivateEdgeFilter.java
new file mode 100644
index 0000000000..a5564c14c3
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/routing/util/PrivateEdgeFilter.java
@@ -0,0 +1,22 @@
+package com.graphhopper.routing.util;
+
+import com.graphhopper.util.EdgeIteratorState;
+
+public class PrivateEdgeFilter extends DefaultEdgeFilter
+{
+
+	public PrivateEdgeFilter( FlagEncoder encoder )
+    {
+	    super(encoder);
+    }
+
+	@Override
+	public boolean accept( EdgeIteratorState edgeState )
+	{
+		if(encoder.getLong(edgeState.getFlags(), EscapePrivateWeighting.KEY)>0) {
+			return false;
+		}
+		return super.accept(edgeState);
+	}
+
+}
diff --git a/core/src/test/java/com/graphhopper/GraphHopperTest.java b/core/src/test/java/com/graphhopper/GraphHopperTest.java
index c17e10b185..9b53683644 100644
--- a/core/src/test/java/com/graphhopper/GraphHopperTest.java
+++ b/core/src/test/java/com/graphhopper/GraphHopperTest.java
@@ -22,6 +22,7 @@
 import static org.junit.Assert.assertNotNull;
 import static org.junit.Assert.assertNull;
 import static org.junit.Assert.assertTrue;
+import static org.mockito.Mockito.verify;
 import static org.mockito.Mockito.when;
 
 import java.io.File;
@@ -33,11 +34,14 @@
 import org.junit.After;
 import org.junit.Before;
 import org.junit.Test;
+import org.mockito.Matchers;
 import org.mockito.Mockito;
+import org.mockito.internal.verification.VerificationModeFactory;
 
 import com.graphhopper.reader.DataReader;
 import com.graphhopper.routing.AlgorithmOptions;
 import com.graphhopper.routing.util.BanPrivateWeighting;
+import com.graphhopper.routing.util.DefaultEdgeFilter;
 import com.graphhopper.routing.util.EdgeFilter;
 import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.routing.util.EscapePrivateWeighting;
@@ -46,6 +50,7 @@
 import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.routing.util.PriorityWeighting;
 import com.graphhopper.routing.util.PriorityWithAvoidancesWeighting;
+import com.graphhopper.routing.util.PrivateEdgeFilter;
 import com.graphhopper.routing.util.ShortestWeighting;
 import com.graphhopper.routing.util.ShortestWithAvoidancesWeighting;
 import com.graphhopper.routing.util.Weighting;
@@ -53,6 +58,7 @@
 import com.graphhopper.storage.AvoidanceAttributeExtension;
 import com.graphhopper.storage.GraphExtension;
 import com.graphhopper.storage.GraphStorage;
+import com.graphhopper.storage.index.LocationIndex;
 import com.graphhopper.storage.index.QueryResult;
 import com.graphhopper.util.CmdArgs;
 import com.graphhopper.util.Helper;
@@ -637,4 +643,75 @@ public void testCreatePrivateWeightingWithPriority() {
 		privateWeighting = instance.createPrivateWeighting(weighting, request , graph, unsupportedEncoder);
 		assertEquals(weighting.getClass(), privateWeighting.getClass());
     }
+    
+    @Test
+    public void testIgnorePrivateRoadsOnIndexSearchWhenCannotStartOnPrivate() {
+    	LocationIndex locationIndex = buildGraphAndMocks("OSCAR");
+        expectNearestEdgeLookups(locationIndex);
+		GHRequest request = new GHRequest(11.1, 50, 11.3, 51);
+		request.getHints().put("private", "false");
+		request.setVehicle("car");
+		instance.route(request);
+		verifyEdgeFilterOnLookup(locationIndex, PrivateEdgeFilter.class);
+    }
+
+    @Test
+    public void testDontIgnorePrivateRoadsOnIndexSearchWhenCanStartOnPrivateWithCar() {
+    	LocationIndex locationIndex = buildGraphAndMocks("OSCAR");
+        expectNearestEdgeLookups(locationIndex);
+		GHRequest request = new GHRequest(11.1, 50, 11.3, 51);
+		request.getHints().put("private", "true");
+		request.setVehicle("car");
+		instance.route(request);
+		verifyEdgeFilterOnLookup(locationIndex, DefaultEdgeFilter.class);
+    }
+    
+    @Test
+    public void testDontIgnorePrivateRoadsOnIndexSearchWhenCanStartOnPrivateDueToDefaultWithCar() {
+    	LocationIndex locationIndex = buildGraphAndMocks("OSCAR");
+        expectNearestEdgeLookups(locationIndex);
+		GHRequest request = new GHRequest(11.1, 50, 11.3, 51);
+		request.setVehicle("car");
+		instance.route(request);
+		verifyEdgeFilterOnLookup(locationIndex, DefaultEdgeFilter.class);
+    }
+
+    @Test
+    public void testDontIgnorePrivateRoadsOnIndexSearchWhenCanStartOnPrivateWithEmv() {
+    	LocationIndex locationIndex = buildGraphAndMocks("EMV");
+        expectNearestEdgeLookups(locationIndex);
+		GHRequest request = new GHRequest(11.1, 50, 11.3, 51);
+		request.setVehicle("emv");
+		instance.route(request);
+		verifyEdgeFilterOnLookup(locationIndex, DefaultEdgeFilter.class);
+    }
+    
+    private LocationIndex buildGraphAndMocks(String vehicleEncoder )
+    {
+	    instance = new GraphHopper();
+    	instance = new GraphHopper().setStoreOnFlush(true).setEncodingManager(new EncodingManager(vehicleEncoder)).
+                 init(new CmdArgs().
+                         put("osmreader.osm", testOsm3).
+                         put("prepare.minNetworkSize", "1").
+                         put("graph.flagEncoders", vehicleEncoder)).
+                         setGraphHopperLocation(ghLoc);
+        instance.importOrLoad();
+
+    	LocationIndex locationIndex = Mockito.mock(LocationIndex.class);
+		instance.setLocationIndex(locationIndex );
+        GraphStorage graph = Mockito.mock(GraphStorage.class);
+        instance.setGraph(graph);
+	    return locationIndex;
+    }
+    
+    private void expectNearestEdgeLookups( LocationIndex locationIndex )
+    {
+	    QueryResult nearestResponse = Mockito.mock(QueryResult.class);
+		when(locationIndex.findClosest(Matchers.anyDouble(), Matchers.anyDouble(), Matchers.isA(EdgeFilter.class))).thenReturn(nearestResponse );
+    }
+    
+    private void verifyEdgeFilterOnLookup( LocationIndex locationIndex , Class<? extends EdgeFilter> filterClass  )
+    {
+	    verify(locationIndex, VerificationModeFactory.times(2)).findClosest(Matchers.anyDouble(), Matchers.anyDouble(),Matchers.isA(filterClass));
+    }
 }
diff --git a/core/src/test/java/com/graphhopper/routing/util/OsAvoidanceDecoratorTest.java b/core/src/test/java/com/graphhopper/routing/util/OsAvoidanceDecoratorTest.java
index 57aa6d00c5..126583e747 100644
--- a/core/src/test/java/com/graphhopper/routing/util/OsAvoidanceDecoratorTest.java
+++ b/core/src/test/java/com/graphhopper/routing/util/OsAvoidanceDecoratorTest.java
@@ -159,7 +159,7 @@ public void testMultiEqualAttributeRetrieval() {
         assertEquals(OsAvoidanceDecorator.AvoidanceType.QuarryOrPit.getValue(), wayFlag - OsAvoidanceDecorator.AvoidanceType.Scree.getValue());
         assertEquals(OsAvoidanceDecorator.AvoidanceType.Scree.getValue(), wayFlag  - OsAvoidanceDecorator.AvoidanceType.QuarryOrPit.getValue() );
         InstructionAnnotation annotation = osAvoidances.getAnnotation(wayFlag, null);
-        assertEquals(" QuarryOrPit Scree", annotation.getMessage());
+        assertEquals("QuarryOrPit, Scree", annotation.getMessage());
     }
 
 }
\ No newline at end of file
diff --git a/pom.xml b/pom.xml
index 2d094ba0ee..a4685b3ad4 100644
--- a/pom.xml
+++ b/pom.xml
@@ -5,7 +5,7 @@
 	<groupId>com.graphhopper</groupId>
 	<artifactId>graphhopper-parent</artifactId>
 	<name>GraphHopper Parent Project</name>
-	<version>1.21-SNAPSHOT</version>
+	<version>1.26-SNAPSHOT</version>
 	<packaging>pom</packaging>
 	<url>http://graphhopper.com</url>
 	<inceptionYear>2012</inceptionYear>
diff --git a/tools/pom.xml b/tools/pom.xml
index d511d704f4..ebbd6ff113 100644
--- a/tools/pom.xml
+++ b/tools/pom.xml
@@ -1,116 +1,128 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
-    <modelVersion>4.0.0</modelVersion>
+	<modelVersion>4.0.0</modelVersion>
 
-    <groupId>com.graphhopper</groupId>
-    <artifactId>graphhopper-tools</artifactId>
-    <version>1.21-SNAPSHOT</version>
-    <packaging>jar</packaging>
-    <name>GraphHopper Tools</name>
-    <properties>
-        <geotools.version>12.1</geotools.version>
-    </properties>
+	<groupId>com.graphhopper</groupId>
+	<artifactId>graphhopper-tools</artifactId>
+	<version>1.26-SNAPSHOT</version>
+	<packaging>jar</packaging>
+	<name>GraphHopper Tools</name>
+	<properties>
+		<geotools.version>12.1</geotools.version>
+	</properties>
 
-    <parent>
-        <groupId>com.graphhopper</groupId>
-        <artifactId>graphhopper-parent</artifactId>    	
-        <version>1.21-SNAPSHOT</version>
-    </parent>
-    <repositories>
-        <repository>
-            <id>osgeo</id>
-            <name>Open Source Geospatial Foundation Repository</name>
-            <url>http://download.osgeo.org/webdav/geotools/</url>
-        </repository>
-    </repositories>
+	<parent>
+		<groupId>com.graphhopper</groupId>
+		<artifactId>graphhopper-parent</artifactId>
+		<version>1.26-SNAPSHOT</version>
+	</parent>
+	<repositories>
+		<repository>
+			<id>osgeo</id>
+			<name>Open Source Geospatial Foundation Repository</name>
+			<url>http://download.osgeo.org/webdav/geotools/</url>
+		</repository>
+	</repositories>
 
-    <dependencies>
-        <dependency>
-            <groupId>com.graphhopper</groupId>
-            <artifactId>graphhopper</artifactId>
-            <version>${project.parent.version}</version>
-        </dependency>
-        <dependency>
-            <groupId>org.slf4j</groupId>
-            <artifactId>slf4j-api</artifactId>
-            <version>${slf4j.version}</version>
-        </dependency>   
-        <dependency>
-            <groupId>org.slf4j</groupId>
-            <artifactId>slf4j-log4j12</artifactId>
-            <version>${slf4j.version}</version>
-            <scope>runtime</scope>
-        </dependency>
-        <dependency>
-            <groupId>log4j</groupId>
-            <artifactId>log4j</artifactId>
-            <version>${log4j.version}</version>
-            <scope>runtime</scope>
-        </dependency>
-        <dependency>
-            <groupId>org.apache.commons</groupId>
-            <artifactId>commons-compress</artifactId>
-            <version>1.9</version>
-        </dependency>
-        <dependency>
-        	<groupId>org.slf4j</groupId>
-        	<artifactId>slf4j-simple</artifactId>
-        	<version>1.7.7</version>
-        </dependency>
-        <dependency>
-            <groupId>org.geotools</groupId>
-            <artifactId>gt-metadata</artifactId>
-            <version>${geotools.version}</version>
-        </dependency>
-        <dependency>
-            <groupId>org.geotools</groupId>
-            <artifactId>gt-opengis</artifactId>
-            <version>${geotools.version}</version>
-        </dependency>
-        <dependency>
-            <groupId>org.geotools</groupId>
-            <artifactId>gt-referencing</artifactId>
-            <version>${geotools.version}</version>
-        </dependency>
-        <dependency>
-            <groupId>org.geotools</groupId>
-            <artifactId>gt-epsg-hsql</artifactId>
-            <version>${geotools.version}</version>
-        </dependency>
-        <dependency>
-            <groupId>org.hsqldb</groupId>
-            <artifactId>hsqldb</artifactId>
-            <version>2.3.2</version>
-        </dependency>
-        <dependency>
-            <groupId>net.java.dev.jsr-275</groupId>
-            <artifactId>jsr-275</artifactId>
-            <version>1.0-beta-2</version>
-        </dependency>
-        <dependency>
-            <groupId>java3d</groupId>
-            <artifactId>vecmath</artifactId>
-            <version>1.3.2</version>
-        </dependency>
-    </dependencies>
-    <build>
-        <plugins>
-            <plugin>
-                <groupId>org.apache.maven.plugins</groupId>
-                <artifactId>maven-assembly-plugin</artifactId>                
-                <configuration>
-                    <archive>
-                        <manifest>
-                            <mainClass>com.graphhopper.tools.Import</mainClass>
-                        </manifest>
-                    </archive>
-                        	                    
-                    <!-- for standalone usage -->
-                    <descriptorRefs>
-                        <descriptorRef>jar-with-dependencies</descriptorRef>
-                    </descriptorRefs>
-                </configuration>
-            </plugin>
-        </plugins>
-    </build>
+	<dependencies>
+		<dependency>
+			<groupId>com.graphhopper</groupId>
+			<artifactId>graphhopper</artifactId>
+			<version>${project.parent.version}</version>
+		</dependency>
+		<dependency>
+			<groupId>org.slf4j</groupId>
+			<artifactId>slf4j-api</artifactId>
+			<version>${slf4j.version}</version>
+		</dependency>
+		<dependency>
+			<groupId>org.slf4j</groupId>
+			<artifactId>slf4j-log4j12</artifactId>
+			<version>${slf4j.version}</version>
+			<scope>runtime</scope>
+		</dependency>
+		<dependency>
+			<groupId>log4j</groupId>
+			<artifactId>log4j</artifactId>
+			<version>${log4j.version}</version>
+			<scope>runtime</scope>
+		</dependency>
+		<dependency>
+			<groupId>org.apache.commons</groupId>
+			<artifactId>commons-compress</artifactId>
+			<version>1.9</version>
+		</dependency>
+		<dependency>
+			<groupId>org.slf4j</groupId>
+			<artifactId>slf4j-simple</artifactId>
+			<version>1.7.7</version>
+		</dependency>
+		<dependency>
+			<groupId>org.geotools</groupId>
+			<artifactId>gt-metadata</artifactId>
+			<version>${geotools.version}</version>
+		</dependency>
+		<dependency>
+			<groupId>org.geotools</groupId>
+			<artifactId>gt-opengis</artifactId>
+			<version>${geotools.version}</version>
+		</dependency>
+		<dependency>
+			<groupId>org.geotools</groupId>
+			<artifactId>gt-referencing</artifactId>
+			<version>${geotools.version}</version>
+		</dependency>
+		<dependency>
+			<groupId>org.geotools</groupId>
+			<artifactId>gt-epsg-hsql</artifactId>
+			<version>${geotools.version}</version>
+		</dependency>
+		<dependency>
+			<groupId>org.hsqldb</groupId>
+			<artifactId>hsqldb</artifactId>
+			<version>2.3.2</version>
+		</dependency>
+		<dependency>
+			<groupId>net.java.dev.jsr-275</groupId>
+			<artifactId>jsr-275</artifactId>
+			<version>1.0-beta-2</version>
+		</dependency>
+		<dependency>
+			<groupId>java3d</groupId>
+			<artifactId>vecmath</artifactId>
+			<version>1.3.2</version>
+		</dependency>
+	</dependencies>
+	<build>
+		<plugins>
+			<plugin>
+				<groupId>org.apache.maven.plugins</groupId>
+				<artifactId>maven-assembly-plugin</artifactId>
+				<configuration>
+					<archive>
+						<manifest>
+							<mainClass>com.graphhopper.tools.Import</mainClass>
+						</manifest>
+					</archive>
+
+					<!-- for standalone usage -->
+					<descriptorRefs>
+						<descriptorRef>jar-with-dependencies</descriptorRef>
+					</descriptorRefs>
+				</configuration>
+			</plugin>
+			<!-- Adds the project's name, group-id, version and vendor to the manifest file when built -->
+			<plugin>
+				<groupId>org.apache.maven.plugins</groupId>
+				<artifactId>maven-jar-plugin</artifactId>
+				<configuration>
+					<archive>
+						<manifest>
+							<addDefaultImplementationEntries>true</addDefaultImplementationEntries>
+						</manifest>
+					</archive>
+				</configuration>
+			</plugin>
+		</plugins>
+	</build>
 </project>
diff --git a/web/pom.xml b/web/pom.xml
index 2d540ec262..ade4a2c9a9 100644
--- a/web/pom.xml
+++ b/web/pom.xml
@@ -1,19 +1,18 @@
 <?xml version="1.0" encoding="UTF-8"?>
-<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
 
 	<modelVersion>4.0.0</modelVersion>
 	<groupId>com.graphhopper</groupId>
 	<artifactId>graphhopper-web</artifactId>
 	<packaging>war</packaging>
-	<version>1.21-SNAPSHOT</version>
+	<version>1.26-SNAPSHOT</version>
 	<name>GraphHopper Web</name>
 	<description>Example on how to use GraphHopper in a web-based application</description>
 
 	<parent>
 		<groupId>com.graphhopper</groupId>
 		<artifactId>graphhopper-parent</artifactId>
-		<version>1.21-SNAPSHOT</version>
+		<version>1.26-SNAPSHOT</version>
 	</parent>
 	<properties>
 		<jetty.version>8.1.16.v20140903</jetty.version>
@@ -102,6 +101,13 @@
 			<scope>test</scope>
 		</dependency>
 
+		<!-- Manifest reader -->
+		<dependency>
+			<groupId>com.jcabi</groupId>
+			<artifactId>jcabi-manifests</artifactId>
+			<version>0.7.5</version>
+		</dependency>
+
 	</dependencies>
 
 	<build>
@@ -112,6 +118,11 @@
 				<artifactId>maven-war-plugin</artifactId>
 				<configuration>
 					<attachClasses>true</attachClasses>
+					<archive>
+						<manifestEntries>
+							<release-version>${project.version}</release-version>
+						</manifestEntries>
+					</archive>
 				</configuration>
 			</plugin>
 			<plugin>
@@ -120,7 +131,8 @@
 				<version>2.2</version>
 				<configuration>
 					<url>http://localhost:8080/manager/text</url>
-					<!-- Tomcat manager credentials (need to enable in tomcat-users config file) -->
+					<!-- Tomcat manager credentials (need to enable in tomcat-users config 
+						file) -->
 					<username>admin</username>
 					<password>password</password>
 					<path>/</path>
diff --git a/web/src/main/java/com/graphhopper/http/GuiceServletConfig.java b/web/src/main/java/com/graphhopper/http/GuiceServletConfig.java
index 830e6e03cd..7f9807582c 100644
--- a/web/src/main/java/com/graphhopper/http/GuiceServletConfig.java
+++ b/web/src/main/java/com/graphhopper/http/GuiceServletConfig.java
@@ -22,6 +22,7 @@
 import com.google.inject.Module;
 import com.google.inject.servlet.GuiceServletContextListener;
 import com.graphhopper.util.CmdArgs;
+import com.jcabi.manifests.Manifests;
 
 /**
  * Replacement of web.xml used only for container deployment. Preferred method is to use GHServer.
diff --git a/web/src/main/java/com/graphhopper/http/InfoServlet.java b/web/src/main/java/com/graphhopper/http/InfoServlet.java
index 1491e91928..04f28d1601 100644
--- a/web/src/main/java/com/graphhopper/http/InfoServlet.java
+++ b/web/src/main/java/com/graphhopper/http/InfoServlet.java
@@ -17,22 +17,24 @@
  */
 package com.graphhopper.http;
 
-import com.graphhopper.GraphHopper;
-import com.graphhopper.storage.StorableProperties;
-import com.graphhopper.util.Constants;
-import com.graphhopper.util.Helper;
-import com.graphhopper.util.shapes.BBox;
 import java.io.IOException;
 import java.util.ArrayList;
 import java.util.List;
+
 import javax.inject.Inject;
 import javax.servlet.ServletException;
 import javax.servlet.http.HttpServletRequest;
 import javax.servlet.http.HttpServletResponse;
-import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;
-import static javax.servlet.http.HttpServletResponse.SC_INTERNAL_SERVER_ERROR;
+
 import org.json.JSONObject;
 
+import com.graphhopper.GraphHopper;
+import com.graphhopper.storage.StorableProperties;
+import com.graphhopper.util.Constants;
+import com.graphhopper.util.Helper;
+import com.graphhopper.util.shapes.BBox;
+import com.jcabi.manifests.Manifests;
+
 /**
  * @author Peter Karich
  */
@@ -73,6 +75,10 @@ public void doGet( HttpServletRequest req, HttpServletResponse res ) throws Serv
 
         if (!Helper.isEmpty(props.get("prepare.date")))
             json.put("prepare_date", props.get("prepare.date"));
+        
+        //build information
+//        Manifests.append(req.getServletContext());
+//        json.put("release-version", Manifests.read("release-version"));
 
         writeJson(req, res, json);
     }
