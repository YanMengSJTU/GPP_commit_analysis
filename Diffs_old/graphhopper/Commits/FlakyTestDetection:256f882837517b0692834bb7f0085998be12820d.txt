diff --git a/core/src/main/java/com/graphhopper/routing/lm/LMAlgoFactoryDecorator.java b/core/src/main/java/com/graphhopper/routing/lm/LMAlgoFactoryDecorator.java
index 4e855306de..30116e5bff 100644
--- a/core/src/main/java/com/graphhopper/routing/lm/LMAlgoFactoryDecorator.java
+++ b/core/src/main/java/com/graphhopper/routing/lm/LMAlgoFactoryDecorator.java
@@ -43,6 +43,8 @@
 import java.util.*;
 import java.util.concurrent.ExecutorCompletionService;
 import java.util.concurrent.ExecutorService;
+import java.util.concurrent.atomic.AtomicBoolean;
+import java.util.concurrent.atomic.AtomicInteger;
 
 import static com.graphhopper.util.Parameters.Landmark.DISABLE;
 
@@ -269,38 +271,37 @@ public RoutingAlgorithm createAlgo(Graph g, AlgorithmOptions opts) {
     public boolean loadOrDoWork(final StorableProperties properties) {
         ExecutorCompletionService completionService = new ExecutorCompletionService<>(threadPool);
         int counter = 0;
-        int submittedPreparations = 0;
-        boolean prepared = false;
+        final AtomicBoolean prepared = new AtomicBoolean(false);
         for (final PrepareLandmarks plm : preparations) {
             counter++;
-            if (plm.loadExisting())
-                continue;
 
-            prepared = true;
             LOGGER.info(counter + "/" + getPreparations().size() + " calling LM prepare.doWork for " + plm.getWeighting() + " ... (" + Helper.getMemInfo() + ")");
             final String name = AbstractWeighting.weightingToFileName(plm.getWeighting());
             completionService.submit(new Runnable() {
                 @Override
                 public void run() {
+                    if (plm.loadExisting())
+                        return;
+
+                    prepared.set(true);
                     Thread.currentThread().setName(name);
                     plm.doWork();
                     properties.put(Landmark.PREPARE + "date." + name, Helper.createFormatter().format(new Date()));
                 }
             }, name);
-            submittedPreparations++;
         }
 
         threadPool.shutdown();
 
         try {
-            for (int i = 0; i < submittedPreparations; i++) {
+            for (int i = 0; i < preparations.size(); i++) {
                 completionService.take().get();
             }
         } catch (Exception e) {
             threadPool.shutdownNow();
             throw new RuntimeException(e);
         }
-        return prepared;
+        return prepared.get();
     }
 
     /**
diff --git a/core/src/test/java/com/graphhopper/storage/GraphHopperStorageForDataFlagEncoderTest.java b/core/src/test/java/com/graphhopper/storage/GraphHopperStorageForDataFlagEncoderTest.java
index 82c849d83d..ffe60f47fd 100644
--- a/core/src/test/java/com/graphhopper/storage/GraphHopperStorageForDataFlagEncoderTest.java
+++ b/core/src/test/java/com/graphhopper/storage/GraphHopperStorageForDataFlagEncoderTest.java
@@ -51,7 +51,6 @@ public void tearDown() {
         Helper.removeDir(new File(locationParent));
     }
 
-
     @Test
     public void testStorageProperties() {
         graph = new GraphBuilder(encodingManager).setStore(true).setLocation(defaultGraphLoc).create();
diff --git a/core/src/test/java/com/graphhopper/storage/GraphHopperStorageLMTest.java b/core/src/test/java/com/graphhopper/storage/GraphHopperStorageLMTest.java
new file mode 100644
index 0000000000..b1bf9fae5a
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/storage/GraphHopperStorageLMTest.java
@@ -0,0 +1,65 @@
+package com.graphhopper.storage;
+
+import com.graphhopper.GraphHopper;
+import com.graphhopper.reader.ReaderWay;
+import com.graphhopper.routing.AbstractRoutingAlgorithmTester;
+import com.graphhopper.routing.util.CarFlagEncoder;
+import com.graphhopper.routing.util.EncodingManager;
+import com.graphhopper.util.Helper;
+import org.junit.Test;
+
+import java.io.File;
+import java.util.Arrays;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertNotNull;
+
+public class GraphHopperStorageLMTest {
+    @Test
+    public void testLoad() {
+        String defaultGraphLoc = "./target/ghstorage_lm";
+        Helper.removeDir(new File(defaultGraphLoc));
+        CarFlagEncoder carFlagEncoder = new CarFlagEncoder();
+        EncodingManager encodingManager = new EncodingManager(carFlagEncoder);
+        GraphHopperStorage graph = new GraphBuilder(encodingManager).setStore(true).
+                setLocation(defaultGraphLoc).create();
+
+        // 0-1
+        ReaderWay way_0_1 = new ReaderWay(27l);
+        way_0_1.setTag("highway", "primary");
+        way_0_1.setTag("maxheight", "4.4");
+
+        graph.edge(0, 1, 1, true);
+        AbstractRoutingAlgorithmTester.updateDistancesFor(graph, 0, 0.00, 0.00);
+        AbstractRoutingAlgorithmTester.updateDistancesFor(graph, 1, 0.01, 0.01);
+        graph.getEdgeIteratorState(0, 1).setFlags(carFlagEncoder.handleWayTags(way_0_1, 1, 0));
+
+        // 1-2
+        ReaderWay way_1_2 = new ReaderWay(28l);
+        way_1_2.setTag("highway", "primary");
+        way_1_2.setTag("maxweight", "45");
+
+        graph.edge(1, 2, 1, true);
+        AbstractRoutingAlgorithmTester.updateDistancesFor(graph, 2, 0.02, 0.02);
+        graph.getEdgeIteratorState(1, 2).setFlags(carFlagEncoder.handleWayTags(way_1_2, 1, 0));
+
+        graph.flush();
+        graph.close();
+
+        GraphHopper hopper = new GraphHopper().setGraphHopperLocation(defaultGraphLoc).setCHEnabled(false);
+        hopper.getLMFactoryDecorator().setEnabled(true).setWeightingsAsStrings(Arrays.asList("fastest"));
+        // does lm preparation
+        hopper.importOrLoad();
+        EncodingManager em = hopper.getEncodingManager();
+        assertNotNull(em);
+        assertEquals(1, em.fetchEdgeEncoders().size());
+        assertEquals(16, hopper.getLMFactoryDecorator().getLandmarks());
+
+        hopper = new GraphHopper().setGraphHopperLocation(defaultGraphLoc).setCHEnabled(false);
+        hopper.getLMFactoryDecorator().setEnabled(true).setWeightingsAsStrings(Arrays.asList("fastest"));
+        // just loads the LM data
+        hopper.importOrLoad();
+        assertEquals(1, em.fetchEdgeEncoders().size());
+        assertEquals(16, hopper.getLMFactoryDecorator().getLandmarks());
+    }
+}
