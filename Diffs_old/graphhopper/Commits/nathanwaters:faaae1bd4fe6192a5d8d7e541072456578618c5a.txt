diff --git a/reader-gtfs/src/main/java/com/conveyal/gtfs/GTFSFeed.java b/reader-gtfs/src/main/java/com/conveyal/gtfs/GTFSFeed.java
index dd27df96d1..c879af44a3 100644
--- a/reader-gtfs/src/main/java/com/conveyal/gtfs/GTFSFeed.java
+++ b/reader-gtfs/src/main/java/com/conveyal/gtfs/GTFSFeed.java
@@ -27,10 +27,9 @@
 package com.conveyal.gtfs;
 
 import com.conveyal.gtfs.error.GTFSError;
-import com.conveyal.gtfs.model.*;
 import com.conveyal.gtfs.model.Calendar;
+import com.conveyal.gtfs.model.*;
 import com.google.common.collect.Iterables;
-import com.google.common.util.concurrent.ExecutionError;
 import org.locationtech.jts.geom.Coordinate;
 import org.locationtech.jts.geom.CoordinateList;
 import org.locationtech.jts.geom.GeometryFactory;
@@ -45,13 +44,11 @@
 
 import java.io.Closeable;
 import java.io.File;
-import java.io.IOError;
 import java.io.IOException;
 import java.time.LocalDate;
 import java.time.format.DateTimeFormatter;
 import java.util.*;
 import java.util.concurrent.ConcurrentNavigableMap;
-import java.util.concurrent.ExecutionException;
 import java.util.stream.Collectors;
 import java.util.stream.StreamSupport;
 import java.util.zip.ZipEntry;
@@ -111,7 +108,7 @@
      *
      * Interestingly, all references are resolvable when tables are loaded in alphabetical order.
      */
-    public void loadFromFile(ZipFile zip, String fid) throws Exception {
+    public void loadFromFile(ZipFile zip, String fid) throws IOException {
         if (this.loaded) throw new UnsupportedOperationException("Attempt to load GTFS into existing database");
 
         // NB we don't have a single CRC for the file, so we combine all the CRCs of the component files. NB we are not
@@ -170,7 +167,7 @@ else if (feedId == null || feedId.isEmpty()) {
         loaded = true;
     }
 
-    public void loadFromFile(ZipFile zip) throws Exception {
+    public void loadFromFile(ZipFile zip) throws IOException {
         loadFromFile(zip, null);
     }
 
@@ -348,26 +345,17 @@ public GTFSFeed () {
     }
 
     /** Create a GTFS feed connected to a particular DB, which will be created if it does not exist. */
-    public GTFSFeed (String dbFile) throws IOException, ExecutionException {
-        this(constructDB(dbFile)); // TODO db.close();
+    public GTFSFeed(File file) {
+        this(constructDB(file));
     }
 
-    private static DB constructDB(String dbFile) {
-        DB db;
-        try{
-            DBMaker dbMaker = DBMaker.newFileDB(new File(dbFile));
-            db = dbMaker
-                    .transactionDisable()
-                    .mmapFileEnable()
-                    .asyncWriteEnable()
-                    .compressionEnable()
-//                     .cacheSize(1024 * 1024) this bloats memory consumption
-                    .make();
-            return db;
-        } catch (ExecutionError | IOError | Exception e) {
-            LOG.error("Could not construct db from file.", e);
-            return null;
-        }
+    private static DB constructDB(File file) {
+        return DBMaker.newFileDB(file)
+                .transactionDisable()
+                .mmapFileEnable()
+                .asyncWriteEnable()
+                .compressionEnable()
+                .make();
     }
 
     private GTFSFeed (DB db) {
diff --git a/reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/GtfsStorage.java b/reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/GtfsStorage.java
index cfbfcbe936..818d9529c1 100644
--- a/reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/GtfsStorage.java
+++ b/reader-gtfs/src/main/java/com/graphhopper/reader/gtfs/GtfsStorage.java
@@ -26,14 +26,18 @@
 import com.graphhopper.storage.Directory;
 import com.graphhopper.storage.Graph;
 import com.graphhopper.storage.GraphExtension;
-import org.mapdb.*;
-
-import java.io.*;
+import org.mapdb.Bind;
+import org.mapdb.DB;
+import org.mapdb.DBMaker;
+import org.mapdb.HTreeMap;
+
+import java.io.File;
+import java.io.IOException;
+import java.io.Serializable;
+import java.nio.file.Files;
 import java.time.LocalDate;
 import java.time.ZoneId;
-import java.nio.file.Files;
 import java.util.*;
-import java.util.concurrent.ExecutionException;
 import java.util.zip.ZipFile;
 
 public class GtfsStorage implements GraphExtension, GtfsStorageI {
@@ -150,13 +154,9 @@ public boolean loadExisting() {
 		this.data = DBMaker.newFileDB(new File(dir.getLocation() + "/transit_schedule")).transactionDisable().mmapFileEnable().readOnly().make();
 		init();
 		for (String gtfsFeedId : this.gtfsFeedIds) {
-			try {
-				GTFSFeed feed = new GTFSFeed(dir.getLocation() + "/" + gtfsFeedId);
-				this.gtfsFeeds.put(gtfsFeedId, feed);
-				this.transfers.put(gtfsFeedId, new Transfers(feed));
-			} catch (IOException | ExecutionException e) {
-				throw new RuntimeException(e);
-			}
+			GTFSFeed feed = new GTFSFeed(new File(dir.getLocation() + "/" + gtfsFeedId));
+			this.gtfsFeeds.put(gtfsFeedId, feed);
+			this.transfers.put(gtfsFeedId, new Transfers(feed));
 		}
 		return true;
 	}
@@ -194,12 +194,14 @@ private void init() {
 	}
 
 	void loadGtfsFromFile(String id, ZipFile zip) {
+		File file = new File(dir.getLocation() + "/" + id);
 		try {
-			GTFSFeed feed = new GTFSFeed(dir.getLocation() + "/" + id);
+			Files.deleteIfExists(file.toPath());
+			GTFSFeed feed = new GTFSFeed(file);
 			feed.loadFromFile(zip);
 			fixFares(feed, zip);
 			this.gtfsFeeds.put(id, feed);
-		} catch (Exception e) {
+		} catch (IOException e) {
 			throw new RuntimeException(e);
 		}
 		this.gtfsFeedIds.add(id);
