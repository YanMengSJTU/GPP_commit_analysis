diff --git a/core/src/main/java/com/graphhopper/util/PointList.java b/core/src/main/java/com/graphhopper/util/PointList.java
index 885527ac4b..1f6aeeef70 100644
--- a/core/src/main/java/com/graphhopper/util/PointList.java
+++ b/core/src/main/java/com/graphhopper/util/PointList.java
@@ -426,6 +426,9 @@ public PointList clone(boolean reverse) {
 
     /**
      * This method does a deep copy of this object for the specified range.
+     *
+     * @param from the copying of the old PointList starts at this index
+     * @param end the copying of the old PointList ends at the index before (i.e. end is exclusive)
      */
     public PointList copy(int from, int end) {
         if (from > end)
diff --git a/core/src/test/java/com/graphhopper/util/PointListTest.java b/core/src/test/java/com/graphhopper/util/PointListTest.java
index fa1c91c7ad..dcd0d4c222 100644
--- a/core/src/test/java/com/graphhopper/util/PointListTest.java
+++ b/core/src/test/java/com/graphhopper/util/PointListTest.java
@@ -95,4 +95,19 @@ public void testIterable() {
             assertEquals(counter, point.getLat(), 0.1);
         }
     }
+
+    @Test
+    public void testCopy_issue1166() {
+        PointList list = new PointList(20, false);
+        for (int i = 0; i < 10; i++) {
+            list.add(1, i);
+        }
+        assertEquals(10, list.getSize());
+        assertEquals(20, list.getCapacity());
+
+        PointList copy = list.copy(9, 10);
+        assertEquals(1, copy.getSize());
+        assertEquals(1, copy.getCapacity());
+        assertEquals(9, copy.getLongitude(0), .1);
+    }
 }
