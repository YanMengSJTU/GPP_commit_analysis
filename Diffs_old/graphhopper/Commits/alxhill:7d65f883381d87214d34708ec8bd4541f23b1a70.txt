diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/Marmoset.java b/marmoset/src/main/java/com/graphhopper/marmoset/Marmoset.java
index 682b32ba7a..8f01b3b66c 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/Marmoset.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/Marmoset.java
@@ -58,7 +58,7 @@ private static void runOfflineSimulation(String outfile, int initialVehicles) th
         PrintWriter p = new PrintWriter("simulations/" + outfile, "UTF-8");
         p.println(MarmosetHopper.Metrics.getHeader());
         start(initialVehicles);
-        while (mh.getVehicleCount() > 0 && mh.timestep())
+        while (mh.getVehicleCount() > 0 && mh.timestep(false))
         {
             logger.info("===ITERATION [" + iteration + "] VEHICLES [" + mh.getVehicleCount() + "]===");
             MarmosetHopper.Metrics metrics = mh.getMetrics();
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetHopper.java b/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetHopper.java
index 03983b9bba..718cf92ec4 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetHopper.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/MarmosetHopper.java
@@ -86,7 +86,12 @@ public synchronized void startSimulation(int initialVehicles)
         IntStream.range(0, initialVehicles).forEach(v -> addVehicle());
     }
 
-    public synchronized boolean timestep()
+    public boolean timestep()
+    {
+        return timestep(true);
+    }
+
+    public synchronized boolean timestep(boolean webMode)
     {
         if (isPaused || vehicles.size() == 0)
             return false;
@@ -95,7 +100,8 @@ public synchronized boolean timestep()
         vehicles.stream().forEach(Vehicle::slowStep);
         vehicles.stream().forEach(Vehicle::randomStep);
         vehicles.stream().forEach(Vehicle::moveStep);
-        vehicles.stream().forEach(Vehicle::updateLocation);
+        if (webMode)
+            vehicles.stream().forEach(Vehicle::updateLocation);
 
         vehicles = vehicles.stream().filter(v -> !v.isFinished()).collect(Collectors.toList());
 
