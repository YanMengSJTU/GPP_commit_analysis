diff --git a/core/src/main/java/com/graphhopper/routing/template/PolygonRoutingTemplate.java b/core/src/main/java/com/graphhopper/routing/template/PolygonRoutingTemplate.java
index 3a76163065..fb570c047b 100644
--- a/core/src/main/java/com/graphhopper/routing/template/PolygonRoutingTemplate.java
+++ b/core/src/main/java/com/graphhopper/routing/template/PolygonRoutingTemplate.java
@@ -71,7 +71,7 @@ private void prepareRouteCandidateList() {
 
     private void pruneLowerQuantileInROIcandidateRoutes() {
         // Assumes that routeCandidates was already sorted descending to roi distance after pruning dominated route candidates
-        int startIndex = (int) (this.routeCandidates.getCandidates().size() * 0.75) + 1;
+        final int startIndex = (int) (this.routeCandidates.getCandidates().size() * 0.75) + 1;
 
         for (int i = startIndex; i < this.routeCandidates.getCandidates().size(); i++) {
             this.routeCandidates.getCandidates().remove(i);
diff --git a/core/src/main/java/com/graphhopper/routing/template/PolygonThroughRoutingTemplate.java b/core/src/main/java/com/graphhopper/routing/template/PolygonThroughRoutingTemplate.java
index d6eb560c2e..34c6783b43 100644
--- a/core/src/main/java/com/graphhopper/routing/template/PolygonThroughRoutingTemplate.java
+++ b/core/src/main/java/com/graphhopper/routing/template/PolygonThroughRoutingTemplate.java
@@ -28,10 +28,11 @@ public PolygonThroughRoutingTemplate(GHRequest ghRequest, GHResponse ghRsp, Loca
     }
 
     protected void findCandidateRoutes() {
-        List<Integer> nodesInPolygon = getNodesInPolygon();
+        final List<Integer> nodesInPolygon = getNodesInPolygon();
         final List<Integer> polygonEntryExitPoints = findPolygonEntryExitPoints(nodesInPolygon);
         final List<Integer> viaPointNodeIds = this.extractNodeIdsFromQueryResults();
-        final LOTNodeExtractor LOTNodes = LOTNodeExtractor.createExtractedData(this.graph, this.algoFactory, this.algorithmOptions, viaPointNodeIds, polygonEntryExitPoints);
+        final LOTNodeExtractor lotNodes = LOTNodeExtractor.createExtractedData(this.graph, this.algoFactory, this.algorithmOptions, viaPointNodeIds, polygonEntryExitPoints);
+
         final List<QueryResult> queryResults = createQueryResults(polygonEntryExitPoints, flagEncoder);
         this.pathSkeletonRouter = new ManyToManyRouting(nodesInPolygon, polygonEntryExitPoints, this.graph, queryResults, this.algoFactory, this.algorithmOptions);
         this.pathSkeletonRouter.findPathBetweenAllNodePairs();
@@ -39,7 +40,8 @@ protected void findCandidateRoutes() {
 
         for (int i = 0; i < viaPointNodeIds.size() - 1; i++) {
             final int viaPointNodeId = viaPointNodeIds.get(i);
-            buildRouteCandidatesForCurrentPoint(LOTNodes.getLotNodesFor(viaPointNodeId));
+            final int nextViaPointNodeId = viaPointNodeIds.get(i + 1);
+            buildRouteCandidatesForCurrentPoint(viaPointNodeId, nextViaPointNodeId, lotNodes.getLotNodesFor(viaPointNodeId));
         }
     }
 
@@ -72,22 +74,18 @@ protected void findCandidateRoutes() {
         return nodeIds;
     }
 
-    private void buildRouteCandidatesForCurrentPoint(List<Integer> currentPointsLOTNodes) {
-        int pointInQueryResultsIndex = this.queryResults.size() - 2;
-        int currentPointID = this.queryResults.get(pointInQueryResultsIndex).getClosestNode();
-        int nextPointID = this.queryResults.get(pointInQueryResultsIndex + 1).getClosestNode();
-
+    private void buildRouteCandidatesForCurrentPoint(final int currentViaPoint, final int nextViaPoint, List<Integer> currentPointsLOTNodes) {
         for (final int LOTNodeL : currentPointsLOTNodes) {
             for (final int LOTNodeLPrime : currentPointsLOTNodes) {
                 if (LOTNodeL != LOTNodeLPrime) {
-                    this.routeCandidates.getCandidates().add(buildCandidatePath(currentPointID, nextPointID, LOTNodeL, LOTNodeLPrime));
+                    this.routeCandidates.getCandidates().add(buildCandidatePath(currentViaPoint, nextViaPoint, LOTNodeL, LOTNodeLPrime));
                 }
             }
         }
     }
 
     private RouteCandidatePolygon buildCandidatePath(int currentPointID, int nextPointID, int LOTNodeL, int LOTNodeLPrime) {
-        RouteCandidatePolygon routeCandidate = new RouteCandidatePolygonThrough(this, currentPointID, nextPointID, LOTNodeL, LOTNodeLPrime);
+        final RouteCandidatePolygon routeCandidate = new RouteCandidatePolygonThrough(this, currentPointID, nextPointID, LOTNodeL, LOTNodeLPrime);
         routeCandidate.calcPaths();
 
         return routeCandidate;
@@ -95,7 +93,7 @@ private RouteCandidatePolygon buildCandidatePath(int currentPointID, int nextPoi
 
     private List<Integer> findPolygonEntryExitPoints(final List<Integer> nodesInPolygon) {
         final List<Integer> entryExitPoints = new ArrayList<>();
-        final EdgeExplorer edgeExplorer = this.graph.createEdgeExplorer();//ghStorage.getBaseGraph().createEdgeExplorer();
+        final EdgeExplorer edgeExplorer = this.graph.createEdgeExplorer();
 
         addAllNodesNotInPolygonButDirectlyAccessibleFromThereToEntryExitPoints(nodesInPolygon, entryExitPoints, edgeExplorer);
 
