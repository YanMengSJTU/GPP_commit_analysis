diff --git a/web/src/test/java/com/graphhopper/swl/TDNetworkIT.java b/web/src/test/java/com/graphhopper/swl/TDNetworkIT.java
index 6cf5e07464..a25aa36208 100644
--- a/web/src/test/java/com/graphhopper/swl/TDNetworkIT.java
+++ b/web/src/test/java/com/graphhopper/swl/TDNetworkIT.java
@@ -109,6 +109,34 @@ public void testMonacoBike() {
         assertEquals(EXPECTED_TOTAL_TRAVEL_TIME, sumTimes(time));
     }
 
+    @Test
+    public void testMonacoFoot() {
+        GHRequest request = new GHRequest(42.56819, 1.603231, 42.571034, 1.520662);
+        request.setPathDetails(Arrays.asList("time", "r5_edge_id"));
+        request.setVehicle("foot");
+        GHResponse route = graphHopper.route(request);
+
+        final int EXPECTED_LINKS_IN_PATH = 45;
+        final long EXPECTED_TOTAL_TRAVEL_TIME = 11768195;
+
+        assertEquals(16344.7, route.getBest().getDistance(), 0.1);
+        assertEquals(EXPECTED_TOTAL_TRAVEL_TIME, route.getBest().getTime());
+
+        List<PathDetail> time = route.getBest().getPathDetails().get("time");
+        List<PathDetail> edgeIds = route.getBest().getPathDetails().get("r5_edge_id");
+
+        assertEquals(EXPECTED_LINKS_IN_PATH, time.size());
+        assertEquals(EXPECTED_LINKS_IN_PATH, edgeIds.size());
+
+        // Assert that corresponding elements in the two sequences of path details
+        // describe the same intervals, i.e. the 'times' are link travel times.
+        for (int i=0; i<EXPECTED_LINKS_IN_PATH; i++) {
+            assertEquals(time.get(i).getFirst(), edgeIds.get(i).getFirst());
+            assertEquals(time.get(i).getLast(), edgeIds.get(i).getLast());
+        }
+
+        assertEquals(EXPECTED_TOTAL_TRAVEL_TIME, sumTimes(time));
+    }
 
     @Test
     public void testMonacoTD() {
