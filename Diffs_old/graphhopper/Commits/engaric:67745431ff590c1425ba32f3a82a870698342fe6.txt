diff --git a/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/Urban.java b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/Urban.java
index b93c11e6e1..50fc0c239f 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/Urban.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/Urban.java
@@ -8,8 +8,8 @@
 	@Override
     public void applyAttributes( RoutingElement way )
     {
-		if(!way.hasTag("maxspeed")) {
-			way.setTag("maxspeed", "30 mph");
+		if(way.hasTag("maxspeed:type","GB:nsl_single")) {
+			way.setTag("maxspeed:type", "GB:urban");
 		}
     }
 }
diff --git a/core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
index ef022992ae..b1de9c6a60 100644
--- a/core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
@@ -49,10 +49,13 @@
 
 	/**
 	 * 1mph = 1.60934kph
+	 * Note that in order to correctly use the observed speeds, speed buckets must be 7 and the factor must be 1.
 	 */
-	public static final int SEVENTY_MPH_IN_KPH = (int) parseSpeed("70mph");
-	public static final int SIXTY_MPH_IN_KPH = (int) parseSpeed("60mph");;
-	public static final int THIRTY_MPH_IN_KPH = (int) parseSpeed("30mph");;
+	public static final int LEGAL_MAX_MOTORWAY_SPEED_MPH_IN_KPH = (int) parseSpeed("70mph");
+	public static final int OBSERVED_AVG_MOTORWAY_SPEED_MPH_IN_KPH = (int) parseSpeed("68mph");
+	public static final int OBSERVED_AVG_DUAL_CARRIAGEWAY_SPEED_MPH_IN_KPH = (int) parseSpeed("67mph");
+	public static final int OBSERVED_AVG_SINGLE_CARRIAGEWAY_SPEED_MPH_IN_KPH = (int) parseSpeed("47mph");
+	public static final int OBSERVED_AVG_URBAN_ROAD_SPEED_MPH_IN_KPH = (int) parseSpeed("30mph");;
 
 	/**
 	 * Should be only instantied via EncodingManager
@@ -172,51 +175,52 @@ public CarFlagEncoder( int speedBits, double speedFactor, int maxTurnCosts )
 		vehicleQualifierTypeInclusions.add("Motor Vehicles");
 		vehicleQualifierTypeInclusions.add("All Vehicles");
 
-		environmentMaxSpeedMap.put("Urban:Single Carriageway", "" + THIRTY_MPH_IN_KPH);
+		environmentMaxSpeedMap.put("Urban:Single Carriageway", "" + OBSERVED_AVG_URBAN_ROAD_SPEED_MPH_IN_KPH);
 	}
 
 	private void addNationalUKSpeedMapping()
 	{
-		defaultSpeedMap.put("GB:motorway", SEVENTY_MPH_IN_KPH);
-		defaultSpeedMap.put("GB:nsl_dual", SEVENTY_MPH_IN_KPH);
-		defaultSpeedMap.put("GB:nsl_single", SIXTY_MPH_IN_KPH);
+		defaultSpeedMap.put("GB:motorway", OBSERVED_AVG_MOTORWAY_SPEED_MPH_IN_KPH);
+		defaultSpeedMap.put("GB:nsl_dual", OBSERVED_AVG_DUAL_CARRIAGEWAY_SPEED_MPH_IN_KPH);
+		defaultSpeedMap.put("GB:nsl_single", OBSERVED_AVG_SINGLE_CARRIAGEWAY_SPEED_MPH_IN_KPH);
+		defaultSpeedMap.put("GB:urban", OBSERVED_AVG_URBAN_ROAD_SPEED_MPH_IN_KPH);
 	}
 
 	private void addRoadTypeUKSpeedMapping()
 	{
-		defaultSpeedMap.put("Motorway", SEVENTY_MPH_IN_KPH);
-		defaultSpeedMap.put("A Road", SIXTY_MPH_IN_KPH);
-		defaultSpeedMap.put("B Road", THIRTY_MPH_IN_KPH);
-		defaultSpeedMap.put("Minor Road", THIRTY_MPH_IN_KPH);
-		defaultSpeedMap.put("Local Street", THIRTY_MPH_IN_KPH);
+		defaultSpeedMap.put("Motorway", OBSERVED_AVG_MOTORWAY_SPEED_MPH_IN_KPH);
+		defaultSpeedMap.put("A Road", OBSERVED_AVG_DUAL_CARRIAGEWAY_SPEED_MPH_IN_KPH);
+		defaultSpeedMap.put("B Road", OBSERVED_AVG_SINGLE_CARRIAGEWAY_SPEED_MPH_IN_KPH);
+		defaultSpeedMap.put("Minor Road", OBSERVED_AVG_URBAN_ROAD_SPEED_MPH_IN_KPH);
+		defaultSpeedMap.put("Local Street", OBSERVED_AVG_URBAN_ROAD_SPEED_MPH_IN_KPH);
 		// defaultSpeedMap.put("Alley", 35);
-		defaultSpeedMap.put("A Road-Single Carriageway", SIXTY_MPH_IN_KPH);
-		defaultSpeedMap.put("B Road", THIRTY_MPH_IN_KPH);
-		defaultSpeedMap.put("Minor Road", THIRTY_MPH_IN_KPH);
-		defaultSpeedMap.put("Local Street", THIRTY_MPH_IN_KPH);
+		defaultSpeedMap.put("A Road-Single Carriageway", OBSERVED_AVG_SINGLE_CARRIAGEWAY_SPEED_MPH_IN_KPH);
+		defaultSpeedMap.put("B Road", OBSERVED_AVG_SINGLE_CARRIAGEWAY_SPEED_MPH_IN_KPH);
+		defaultSpeedMap.put("Minor Road", OBSERVED_AVG_URBAN_ROAD_SPEED_MPH_IN_KPH);
+		defaultSpeedMap.put("Local Street", OBSERVED_AVG_URBAN_ROAD_SPEED_MPH_IN_KPH);
 		// defaultSpeedMap.put("Alley", 35);
-		defaultSpeedMap.put("Motorway", SEVENTY_MPH_IN_KPH);
-		defaultSpeedMap.put("A Road", SIXTY_MPH_IN_KPH);
-		defaultSpeedMap.put("B Road", THIRTY_MPH_IN_KPH);
-		defaultSpeedMap.put("Minor Road", THIRTY_MPH_IN_KPH);
-		defaultSpeedMap.put("Local Street", THIRTY_MPH_IN_KPH);
+		defaultSpeedMap.put("Motorway", OBSERVED_AVG_MOTORWAY_SPEED_MPH_IN_KPH);
+		defaultSpeedMap.put("A Road", OBSERVED_AVG_DUAL_CARRIAGEWAY_SPEED_MPH_IN_KPH);
+		defaultSpeedMap.put("B Road", OBSERVED_AVG_SINGLE_CARRIAGEWAY_SPEED_MPH_IN_KPH);
+		defaultSpeedMap.put("Minor Road", OBSERVED_AVG_URBAN_ROAD_SPEED_MPH_IN_KPH);
+		defaultSpeedMap.put("Local Street", OBSERVED_AVG_URBAN_ROAD_SPEED_MPH_IN_KPH);
 		// defaultSpeedMap.put("Alley", 35);
-		defaultSpeedMap.put("A Road-Dual Carriageway", SIXTY_MPH_IN_KPH);
-		defaultSpeedMap.put("B Road", THIRTY_MPH_IN_KPH);
-		defaultSpeedMap.put("Minor Road", THIRTY_MPH_IN_KPH);
-		defaultSpeedMap.put("Local Street", THIRTY_MPH_IN_KPH);
+		defaultSpeedMap.put("A Road-Dual Carriageway", OBSERVED_AVG_DUAL_CARRIAGEWAY_SPEED_MPH_IN_KPH);
+		defaultSpeedMap.put("B Road", OBSERVED_AVG_SINGLE_CARRIAGEWAY_SPEED_MPH_IN_KPH);
+		defaultSpeedMap.put("Minor Road", OBSERVED_AVG_URBAN_ROAD_SPEED_MPH_IN_KPH);
+		defaultSpeedMap.put("Local Street", OBSERVED_AVG_URBAN_ROAD_SPEED_MPH_IN_KPH);
 		// defaultSpeedMap.put("Alley", 35);
-		defaultSpeedMap.put("Motorway-Slip Road", SEVENTY_MPH_IN_KPH);
-		defaultSpeedMap.put("A Road-Slip Road", SIXTY_MPH_IN_KPH);
-		defaultSpeedMap.put("B Road", THIRTY_MPH_IN_KPH);
-		defaultSpeedMap.put("Minor Road", THIRTY_MPH_IN_KPH);
-		defaultSpeedMap.put("Local Street", THIRTY_MPH_IN_KPH);
+		defaultSpeedMap.put("Motorway-Slip Road", OBSERVED_AVG_MOTORWAY_SPEED_MPH_IN_KPH);
+		defaultSpeedMap.put("A Road-Slip Road", OBSERVED_AVG_DUAL_CARRIAGEWAY_SPEED_MPH_IN_KPH);
+		defaultSpeedMap.put("B Road", OBSERVED_AVG_URBAN_ROAD_SPEED_MPH_IN_KPH);
+		defaultSpeedMap.put("Minor Road", OBSERVED_AVG_URBAN_ROAD_SPEED_MPH_IN_KPH);
+		defaultSpeedMap.put("Local Street", OBSERVED_AVG_URBAN_ROAD_SPEED_MPH_IN_KPH);
 		// defaultSpeedMap.put("Alley", 35);
-		defaultSpeedMap.put("Motorway-Roundabout", SEVENTY_MPH_IN_KPH);
-		defaultSpeedMap.put("A Road-Roundabout", SIXTY_MPH_IN_KPH);
-		defaultSpeedMap.put("B Road-Roundabout", THIRTY_MPH_IN_KPH);
-		defaultSpeedMap.put("Minor Road-Roundabout", THIRTY_MPH_IN_KPH);
-		defaultSpeedMap.put("Local Street-Roundabout", THIRTY_MPH_IN_KPH);
+		defaultSpeedMap.put("Motorway-Roundabout", OBSERVED_AVG_MOTORWAY_SPEED_MPH_IN_KPH);
+		defaultSpeedMap.put("A Road-Roundabout", OBSERVED_AVG_DUAL_CARRIAGEWAY_SPEED_MPH_IN_KPH);
+		defaultSpeedMap.put("B Road-Roundabout", OBSERVED_AVG_SINGLE_CARRIAGEWAY_SPEED_MPH_IN_KPH);
+		defaultSpeedMap.put("Minor Road-Roundabout", OBSERVED_AVG_URBAN_ROAD_SPEED_MPH_IN_KPH);
+		defaultSpeedMap.put("Local Street-Roundabout", OBSERVED_AVG_URBAN_ROAD_SPEED_MPH_IN_KPH);
 	}
 
 	/**
@@ -327,16 +331,7 @@ public long handleWayTags( Way way, long allowed, long relationFlags )
 			// get assumed speed from highway type
 			double speed = getSpeed(way);
 
-			// set the max speed tag for the environment
-			String environment = way.getTag("environment");
-			if (!Helper.isEmpty(environment))
-			{
-				String maxSpeed = environmentMaxSpeedMap.get(environment);
-				if (!Helper.isEmpty(maxSpeed))
-				{
-					way.setTag("maxspeed", maxSpeed);
-				}
-			}
+			
 			speed = applyMaxSpeed(way, speed, true);
 			// limit speed to max 30 km/h if bad surface
 			if (speed > 30 && way.hasTag("surface", badSurfaceSpeedMap))
diff --git a/core/src/main/java/com/graphhopper/routing/util/OsCarFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/OsCarFlagEncoder.java
index 3cb551e0c7..7ebfeec410 100644
--- a/core/src/main/java/com/graphhopper/routing/util/OsCarFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/OsCarFlagEncoder.java
@@ -13,14 +13,14 @@ public OsCarFlagEncoder() {
 
 	public OsCarFlagEncoder(String propertiesStr) {
 		super(propertiesStr);
-		maxPossibleSpeed = SEVENTY_MPH_IN_KPH;
+		maxPossibleSpeed = LEGAL_MAX_MOTORWAY_SPEED_MPH_IN_KPH;
 		restrictedValues.clear();
 //		setOsAvoidanceDecorator();
 	}
 
 	public OsCarFlagEncoder(int speedBits, double speedFactor, int maxTurnCosts) {
 		super(speedBits, speedFactor, maxTurnCosts);
-		maxPossibleSpeed = SEVENTY_MPH_IN_KPH;
+		maxPossibleSpeed = LEGAL_MAX_MOTORWAY_SPEED_MPH_IN_KPH;
 		restrictedValues.clear();
 //		setOsAvoidanceDecorator();
 	}
diff --git a/core/src/main/java/com/graphhopper/routing/util/SpeedParserUtil.java b/core/src/main/java/com/graphhopper/routing/util/SpeedParserUtil.java
new file mode 100644
index 0000000000..5d517f1b63
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/routing/util/SpeedParserUtil.java
@@ -0,0 +1,44 @@
+package com.graphhopper.routing.util;
+
+import com.graphhopper.util.DistanceCalcEarth;
+import com.graphhopper.util.Helper;
+
+public class SpeedParserUtil
+{
+	public static double parseSpeed(String str) {
+		if (Helper.isEmpty(str))
+			return -1;
+
+		try {
+			int val;
+			// see https://en.wikipedia.org/wiki/Knot_%28unit%29#Definitions
+			int mpInteger = str.indexOf("mp");
+			if (mpInteger > 0) {
+				str = str.substring(0, mpInteger).trim();
+				val = Integer.parseInt(str);
+				return val * DistanceCalcEarth.KM_MILE;
+			}
+
+			int knotInteger = str.indexOf("knots");
+			if (knotInteger > 0) {
+				str = str.substring(0, knotInteger).trim();
+				val = Integer.parseInt(str);
+				return val * 1.852;
+			}
+
+			int kmInteger = str.indexOf("km");
+			if (kmInteger > 0) {
+				str = str.substring(0, kmInteger).trim();
+			} else {
+				kmInteger = str.indexOf("kph");
+				if (kmInteger > 0) {
+					str = str.substring(0, kmInteger).trim();
+				}
+			}
+
+			return Integer.parseInt(str);
+		} catch (Exception ex) {
+			return -1;
+		}
+	}
+}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/OSCarFlagEncoderTest.java b/core/src/test/java/com/graphhopper/reader/osgb/OSCarFlagEncoderTest.java
index c4adc5871a..91d7379251 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/OSCarFlagEncoderTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/OSCarFlagEncoderTest.java
@@ -13,6 +13,7 @@
 import com.graphhopper.routing.util.DefaultEdgeFilter;
 import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.routing.util.OsCarFlagEncoder;
+import com.graphhopper.routing.util.SpeedParserUtil;
 import com.graphhopper.storage.GraphHopperStorage;
 
 public class OSCarFlagEncoderTest extends AbstractOsItnReaderTest
@@ -25,10 +26,10 @@ public void initEncoding()
 	{
 		if (turnCosts)
 		{
-			osCarEncoder = new OsCarFlagEncoder("speedBits=5|speedfactor=5|turncosts=3");
+			osCarEncoder = new OsCarFlagEncoder("speedBits=7|speedfactor=1|turncosts=3");
 		} else
 		{
-			osCarEncoder = new OsCarFlagEncoder("speedBits=5|speedfactor=5|turncosts=0");
+			osCarEncoder = new OsCarFlagEncoder("speedBits=7|speedfactor=1|turncosts=0");
 		}
 
 		carOutEdges = new DefaultEdgeFilter(osCarEncoder, false, true);
@@ -73,21 +74,19 @@ public void testReadSimplePrivateRestrictedCrossRoads() throws IOException
 	
 	@Test
 	/**
-	 * Tests that the max speed for an OS car is 70mph.
+	 * Tests that the max speed for an OS car is pegged back to 70mph irrespective of whatever speed is given as the max speed for a way.
 	 * 
-	 * Note that the 70mph is factored to be divisible by five such that it fits the current factor 5 speed encoding.
 	 * @throws IOException
 	 */
 	public void testMaxSpeedForCaris70mph() throws IOException {
 		
-		final int factoredMPHinKPH = (CarFlagEncoder.SEVENTY_MPH_IN_KPH/5)*5;
+		final int maxSpeedInKPH = CarFlagEncoder.LEGAL_MAX_MOTORWAY_SPEED_MPH_IN_KPH;
 		
         OSMWay way = new OSMWay(1);
         way.setTag("highway", "motorway");
-        way.setTag("maxspeed", "120");
+        way.setTag("maxspeed", "135");
         long allowed = osCarEncoder.acceptWay(way);
         long encoded = osCarEncoder.handleWayTags(way, allowed, 0);
-        assertEquals(factoredMPHinKPH, osCarEncoder.getSpeed(encoded), 1e-1);
-
+        assertEquals(maxSpeedInKPH, osCarEncoder.getSpeed(encoded), 1e-1);
 	}
 }
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/itn/OsItnReaderTest.java b/core/src/test/java/com/graphhopper/reader/osgb/itn/OsItnReaderTest.java
index 6c326a2c38..d2d5af1a39 100755
--- a/core/src/test/java/com/graphhopper/reader/osgb/itn/OsItnReaderTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/itn/OsItnReaderTest.java
@@ -33,6 +33,7 @@
 
 import com.graphhopper.reader.osgb.AbstractOsItnReaderTest;
 import com.graphhopper.reader.osgb.AbstractOsReader;
+import com.graphhopper.routing.util.CarFlagEncoder;
 import com.graphhopper.routing.util.DefaultEdgeFilter;
 import com.graphhopper.routing.util.EdgeFilter;
 import com.graphhopper.routing.util.EncodingManager;
@@ -264,17 +265,17 @@ private void checkMultiNodeNetwork(final GraphHopperStorage graph) {
         final EdgeIterator iter = explorer.setBaseNode(0);
         assertTrue(iter.next());
         assertEquals("OTHER ROAD (A337)", iter.getName());
-        assertEquals(95, carEncoder.getSpeed(iter.getFlags()), 1e-1);
+        assertEquals(CarFlagEncoder.OBSERVED_AVG_SINGLE_CARRIAGEWAY_SPEED_MPH_IN_KPH, carEncoder.getSpeed(iter.getFlags()), 1e-1);
         iter.next();
         assertEquals("OTHER ROAD (A337)", iter.getName());
-        assertEquals(95, carEncoder.getSpeed(iter.getFlags()), 1e-1);
+        assertEquals(CarFlagEncoder.OBSERVED_AVG_SINGLE_CARRIAGEWAY_SPEED_MPH_IN_KPH, carEncoder.getSpeed(iter.getFlags()), 1e-1);
         iter.next();
         assertEquals("BONHAY ROAD (A337)", iter.getName());
-        assertEquals(95, carEncoder.getSpeed(iter.getFlags()), 1e-1);
+        assertEquals(CarFlagEncoder.OBSERVED_AVG_SINGLE_CARRIAGEWAY_SPEED_MPH_IN_KPH, carEncoder.getSpeed(iter.getFlags()), 1e-1);
         iter.next();
         assertEquals("BONHAY ROAD (A337)", iter.getName());
         final long flags = iter.getFlags();
-        assertEquals(95.0, carEncoder.getSpeed(flags), 1e-1);
+        assertEquals(CarFlagEncoder.OBSERVED_AVG_SINGLE_CARRIAGEWAY_SPEED_MPH_IN_KPH, carEncoder.getSpeed(flags), 1e-1);
         assertFalse(iter.next());
     }
 
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/UrbanTest.java b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/UrbanTest.java
index 0815b26036..4ca494f6e3 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/UrbanTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/UrbanTest.java
@@ -15,7 +15,6 @@
 
 public class UrbanTest
 {
-	private static final String _30_MPH = "30 mph";
 	static OsToOsmAttributeMappingVisitor visitor;
 	@Mock
 	Way way;
@@ -35,9 +34,10 @@ public void init()
 	@Test
 	public void testVisitWayAttribute()
 	{
+		when(way.hasTag("maxspeed:type", "GB:nsl_single")).thenReturn(true);
 		visitor.visitWayAttribute("Urban".toLowerCase().replace(" ", "").replace("–", ""), way);
-		verify(way).hasTag("maxspeed");
-		verify(way).setTag("maxspeed", _30_MPH);
+		verify(way).hasTag("maxspeed:type", "GB:nsl_single");
+		verify(way).setTag("maxspeed:type", "GB:urban");
 		verifyNoMoreInteractions(way);
 	}
 	
@@ -45,10 +45,10 @@ public void testVisitWayAttribute()
 	public void testVisitWayAttributeWhenNationalSpeedLimitSet()
 	{
 		when(way.hasTag("maxspeed")).thenReturn(false);
-		when(way.hasTag("maxspeed:type")).thenReturn(true);
+		when(way.hasTag("maxspeed:type", "GB:nsl_single")).thenReturn(true);
 		visitor.visitWayAttribute("Urban".toLowerCase().replace(" ", "").replace("–", ""), way);
-		verify(way).hasTag("maxspeed");
-		verify(way).setTag("maxspeed", _30_MPH);
+		verify(way).hasTag("maxspeed:type", "GB:nsl_single");
+		verify(way).setTag("maxspeed:type", "GB:urban");
 		verifyNoMoreInteractions(way);
 	}
 }
\ No newline at end of file
diff --git a/core/src/test/java/com/graphhopper/routing/util/CarFlagEncoderTest.java b/core/src/test/java/com/graphhopper/routing/util/CarFlagEncoderTest.java
index ff6e96d6f1..3b1bee85ce 100644
--- a/core/src/test/java/com/graphhopper/routing/util/CarFlagEncoderTest.java
+++ b/core/src/test/java/com/graphhopper/routing/util/CarFlagEncoderTest.java
@@ -246,7 +246,7 @@ public void testMaxSpeedType()
         way.setTag("maxspeed:type", "GB:nsl_single");
         allowed = encoder.acceptWay(way);
         encoded = encoder.handleWayTags(way, allowed, 0);
-        assertEquals(factorSpeed(CarFlagEncoder.SIXTY_MPH_IN_KPH), encoder.getSpeed(encoded), 1e-1);
+        assertEquals(factorSpeed(CarFlagEncoder.OBSERVED_AVG_SINGLE_CARRIAGEWAY_SPEED_MPH_IN_KPH), encoder.getSpeed(encoded), 1e-1);
 
         way.clearTags();
         way.setTag("highway", "motorway");
@@ -261,7 +261,7 @@ public void testMaxSpeedType()
         way.setTag("maxspeed:type", "GB:nsl_single");
         allowed = encoder.acceptWay(way);
         encoded = encoder.handleWayTags(way, allowed, 0);
-        assertEquals(factorSpeed(CarFlagEncoder.THIRTY_MPH_IN_KPH), encoder.getSpeed(encoded), 1e-1);
+        assertEquals(factorSpeed(CarFlagEncoder.OBSERVED_AVG_URBAN_ROAD_SPEED_MPH_IN_KPH), encoder.getSpeed(encoded), 1e-1);
 
         try
         {
@@ -274,7 +274,7 @@ public void testMaxSpeedType()
 
 	private int truncateSpeedToMax()
     {
-	    int factorSpeed = factorSpeed(CarFlagEncoder.SEVENTY_MPH_IN_KPH);
+	    int factorSpeed = factorSpeed(CarFlagEncoder.LEGAL_MAX_MOTORWAY_SPEED_MPH_IN_KPH);
 		return factorSpeed>encoder.maxPossibleSpeed?encoder.maxPossibleSpeed:factorSpeed;
     }
 
diff --git a/core/src/test/java/com/graphhopper/routing/util/EmergencyVehicleFlagEncoderTest.java b/core/src/test/java/com/graphhopper/routing/util/EmergencyVehicleFlagEncoderTest.java
index 0d7fd3e039..9d01f9b84c 100644
--- a/core/src/test/java/com/graphhopper/routing/util/EmergencyVehicleFlagEncoderTest.java
+++ b/core/src/test/java/com/graphhopper/routing/util/EmergencyVehicleFlagEncoderTest.java
@@ -21,19 +21,25 @@
 import static org.junit.Assert.assertFalse;
 import static org.junit.Assert.assertTrue;
 
+import java.util.HashMap;
+import java.util.Iterator;
+import java.util.Map;
+import java.util.Map.Entry;
+
 import org.junit.Test;
 
 import com.graphhopper.reader.OSMNode;
 import com.graphhopper.reader.OSMWay;
 
 /**
- *
- * @author Peter Karich
+ * @author Stuart Adam
+ * @author Mat Brett
  */
 public class EmergencyVehicleFlagEncoderTest
 {
-    private final EncodingManager em = new EncodingManager("EMV,BIKE",8);
+    private final EncodingManager em = new EncodingManager("EMV|speedBits=7|speedFactor=1|turnCosts=0,BIKE",8);
     private final EmergencyVehicleFlagEncoder encoder = (EmergencyVehicleFlagEncoder) em.getEncoder("EMV");
+    private final int speedFactor = 1;
     
     @Test
     public void testAccess()
@@ -187,26 +193,26 @@ public void testMaxSpeed()
         way.setTag("maxspeed", "500");
         long allowed = encoder.acceptWay(way);
         long encoded = encoder.handleWayTags(way, allowed, 0);
-        assertEquals(110, encoder.getSpeed(encoded), 1e-1);
+        assertEquals(112, encoder.getSpeed(encoded), 1e-1);
 
         way = new OSMWay(1);
         way.setTag("highway", "primary");
         way.setTag("maxspeed:backward", "10");
         way.setTag("maxspeed:forward", "20");
         encoded = encoder.handleWayTags(way, encoder.acceptWay(way), 0);
-        assertEquals(10, encoder.getSpeed(encoded), 1e-1);
+        assertEquals(9, encoder.getSpeed(encoded), 1e-1);
 
         way = new OSMWay(1);
         way.setTag("highway", "primary");
         way.setTag("maxspeed:forward", "20");
         encoded = encoder.handleWayTags(way, encoder.acceptWay(way), 0);
-        assertEquals(20, encoder.getSpeed(encoded), 1e-1);
+        assertEquals(18, encoder.getSpeed(encoded), 1e-1);
 
         way = new OSMWay(1);
         way.setTag("highway", "primary");
         way.setTag("maxspeed:backward", "20");
         encoded = encoder.handleWayTags(way, encoder.acceptWay(way), 0);
-        assertEquals(20, encoder.getSpeed(encoded), 1e-1);
+        assertEquals(18, encoder.getSpeed(encoded), 1e-1);
     }
 
     @Test
@@ -218,7 +224,7 @@ public void testSpeed()
         way.setTag("maxspeed", "110");
         long allowed = encoder.acceptWay(way);
         long encoded = encoder.handleWayTags(way, allowed, 0);
-        assertEquals(100, encoder.getSpeed(encoded), 1e-1);
+        assertEquals(99, encoder.getSpeed(encoded), 1e-1);
 
         way.clearTags();
         way.setTag("highway", "residential");
@@ -249,57 +255,76 @@ public void testSpeed()
         }
     }
     
-    @Test
-    public void testMaxSpeedType()
-    {
-        // limit bigger than default road speed
-        OSMWay way = new OSMWay(1);
-        way.setTag("highway", "primary");
-        way.setTag("maxspeed:type", "GB:nsl_dual");
-        long allowed = encoder.acceptWay(way);
-        long encoded = encoder.handleWayTags(way, allowed, 0);
-        assertEquals(truncateSpeedToMax(), encoder.getSpeed(encoded), 1e-1);
-
-        way.clearTags();
-        way.setTag("highway", "secondary");
-        way.setTag("maxspeed:type", "GB:nsl_single");
-        allowed = encoder.acceptWay(way);
-        encoded = encoder.handleWayTags(way, allowed, 0);
-        assertEquals(factorSpeed(CarFlagEncoder.SIXTY_MPH_IN_KPH), encoder.getSpeed(encoded), 1e-1);
-
-        way.clearTags();
-        way.setTag("highway", "motorway");
-        way.setTag("maxspeed:type", "GB:motorway");
-        allowed = encoder.acceptWay(way);
-        encoded = encoder.handleWayTags(way, allowed, 0);
-        assertEquals(truncateSpeedToMax(), encoder.getSpeed(encoded), 1e-1);
-
-        way.clearTags();
-        way.setTag("highway", "secondary");
-        way.setTag("maxspeed", "30 mph");
-        way.setTag("maxspeed:type", "GB:nsl_single");
-        allowed = encoder.acceptWay(way);
-        encoded = encoder.handleWayTags(way, allowed, 0);
-        assertEquals(factorSpeed(CarFlagEncoder.THIRTY_MPH_IN_KPH), encoder.getSpeed(encoded), 1e-1);
-
-        try
-        {
-            encoder.setSpeed(0, -1);
-            assertTrue(false);
-        } catch (IllegalArgumentException ex)
-        {
-        }
+    /**
+     * Convenience method which builds an OSMWay, enriches it with tags, then returns it.
+     * @return
+     */
+    private OSMWay wayMaker(Map<String, String> tags) {
+    	 OSMWay way = new OSMWay(1);
+    	 
+    	 Iterator<Entry<String, String>> it = tags.entrySet().iterator();
+    	    while (it.hasNext()) {
+    	        Map.Entry<String, String> pair = (Map.Entry<String, String>)it.next();
+    	        way.setTag((String) pair.getKey(),pair.getValue());
+    	        it.remove(); 
+    	    }
+    	    
+    	    return way;
     }
-
-	private int truncateSpeedToMax()
-    {
-	    int factorSpeed = factorSpeed(CarFlagEncoder.SEVENTY_MPH_IN_KPH);
-		return factorSpeed>encoder.maxPossibleSpeed?encoder.maxPossibleSpeed:factorSpeed;
+    
+    /**
+     * Extracted test body for testing that the maximum speeds for roads is considered to be its observed limit if that limit is less than the 
+     * maximum speed given for the grade of road.
+     * @param tags
+     */
+    private void testMaxRoadSpeed(int maxSpeedInKPH, Map<String, String> tags) {
+    	OSMWay way = wayMaker(tags);
+    	 long allowed = encoder.acceptWay(way);
+         long encoded = encoder.handleWayTags(way, allowed, 0);
+         assertEquals(factorSpeed(maxSpeedInKPH, speedFactor), encoder.getSpeed(encoded), 1e-1);
     }
-
-	private int factorSpeed(int speed )
+    
+	private int truncateMaxRoadSpeedToLegalMaximum()
     {
-	    return Math.round(speed/5)*5;
+	    int maxLegalSpeed = CarFlagEncoder.OBSERVED_AVG_MOTORWAY_SPEED_MPH_IN_KPH;
+	    int maxPossibleSpeed = encoder.maxPossibleSpeed;
+		return maxPossibleSpeed > maxLegalSpeed ? maxLegalSpeed: maxPossibleSpeed;
+    }
+	
+	private int factorSpeed(int speed, int factor) {
+		return ((speed/factor)*factor);
+	}
+    
+    @Test
+    public void testMaxRoadSpeedMotorway() {
+    	Map<String, String> tags = new HashMap<String, String>();
+    	 tags.put("highway", "motorway");
+         tags.put("maxspeed:type", "GB:motorway");
+         testMaxRoadSpeed(truncateMaxRoadSpeedToLegalMaximum(), tags);
+    }
+    
+    @Test
+    public void testMaxRoadSpeedDualCarriageway() {
+    	Map<String, String> tags = new HashMap<String, String>();
+    	 tags.put("highway", "primary");
+         tags.put("maxspeed:type", "GB:nsl_dual");
+         testMaxRoadSpeed(CarFlagEncoder.OBSERVED_AVG_DUAL_CARRIAGEWAY_SPEED_MPH_IN_KPH, tags);
+    }
+    
+    @Test
+    public void testMaxRoadSpeedSingleCarriageway() {
+    	Map<String, String> tags = new HashMap<String, String>();
+    	 tags.put("highway", "secondary");
+         tags.put("maxspeed:type", "GB:nsl_single");
+         testMaxRoadSpeed(CarFlagEncoder.OBSERVED_AVG_SINGLE_CARRIAGEWAY_SPEED_MPH_IN_KPH, tags);
+    }
+    
+    @Test
+    public void testMaxRoadSpeedUrbanRoad() {
+    	Map<String, String> tags = new HashMap<String, String>();
+    	 tags.put("highway", "secondary");
+         tags.put("maxspeed:type", "GB:urban");
+         testMaxRoadSpeed(CarFlagEncoder.OBSERVED_AVG_URBAN_ROAD_SPEED_MPH_IN_KPH, tags);
     }
 
     @Test
@@ -336,50 +361,6 @@ public void testRoundabout()
         assertTrue(encoder.isBool(flags, FlagEncoder.K_ROUNDABOUT));
     }
 
-    @Test
-    public void testRailway()
-    {
-        OSMWay way = new OSMWay(1);
-        way.setTag("highway", "secondary");
-        way.setTag("railway", "rail");
-        // disallow rail
-        assertTrue(encoder.acceptWay(way) == 0);
-
-        way.clearTags();
-        way.setTag("highway", "path");
-        way.setTag("railway", "abandoned");
-        assertTrue(encoder.acceptWay(way) == 0);
-
-        // on disallowed highway, railway is allowed, sometimes incorrectly mapped
-        way.setTag("highway", "track");
-        assertTrue(encoder.acceptWay(way) > 0);
-
-        // this is fully okay as sometimes old rails are on the road
-        way.setTag("highway", "primary");
-        way.setTag("railway", "historic");
-        assertTrue(encoder.acceptWay(way) > 0);
-
-        way.setTag("motorcar", "no");
-        assertTrue(encoder.acceptWay(way) == 0);
-
-        way = new OSMWay(1);
-        way.setTag("highway", "secondary");
-        way.setTag("railway", "tram");
-        // but allow tram to be on the same way
-        assertTrue(encoder.acceptWay(way) > 0);
-
-        way = new OSMWay(1);
-        way.setTag("route", "shuttle_train");
-        way.setTag("motorcar", "yes");
-        way.setTag("bicycle", "no");
-        way.setTag("duration", "35");
-        way.setTag("estimated_distance", 50000);
-        // accept
-        assertTrue(encoder.acceptWay(way) > 0);
-        // calculate speed from estimated_distance and duration
-        assertEquals(60, encoder.getSpeed(encoder.handleFerryTags(way, 20, 30, 40)), 1e-1);
-    }
-
     @Test
     public void testSwapDir()
     {
