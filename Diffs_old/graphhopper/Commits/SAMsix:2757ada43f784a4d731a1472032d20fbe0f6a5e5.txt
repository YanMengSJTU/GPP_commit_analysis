diff --git a/core/.settings/org.eclipse.jdt.ui.prefs b/core/.settings/org.eclipse.jdt.ui.prefs
index 92e9ee3180..1db05baf1e 100644
--- a/core/.settings/org.eclipse.jdt.ui.prefs
+++ b/core/.settings/org.eclipse.jdt.ui.prefs
@@ -1,5 +1,5 @@
 eclipse.preferences.version=1
-editor_save_participant_org.eclipse.jdt.ui.postsavelistener.cleanup=false
+editor_save_participant_org.eclipse.jdt.ui.postsavelistener.cleanup=true
 org.eclipse.jdt.ui.ignorelowercasenames=true
 org.eclipse.jdt.ui.importorder=java;javax;org;com;
 org.eclipse.jdt.ui.ondemandthreshold=8
@@ -36,7 +36,7 @@ sp_cleanup.qualify_static_member_accesses_through_subtypes_with_declaring_class=
 sp_cleanup.qualify_static_member_accesses_with_declaring_class=false
 sp_cleanup.qualify_static_method_accesses_with_declaring_class=false
 sp_cleanup.remove_private_constructors=true
-sp_cleanup.remove_trailing_whitespaces=false
+sp_cleanup.remove_trailing_whitespaces=true
 sp_cleanup.remove_trailing_whitespaces_all=true
 sp_cleanup.remove_trailing_whitespaces_ignore_empty=false
 sp_cleanup.remove_unnecessary_casts=true
diff --git a/core/src/main/java/com/samsix/graphhopper/S6GHUtils.java b/core/src/main/java/com/samsix/graphhopper/S6GHUtils.java
index 23e3ba928b..127318664d 100644
--- a/core/src/main/java/com/samsix/graphhopper/S6GHUtils.java
+++ b/core/src/main/java/com/samsix/graphhopper/S6GHUtils.java
@@ -13,8 +13,8 @@ private S6GHUtils()
     {
         // prevent instantiation
     }
-    
-    
+
+
     public static EncodingManager getS6EncodingManager()
     {
         List<FlagEncoder> encoders = new ArrayList<FlagEncoder>();
@@ -23,7 +23,7 @@ public static EncodingManager getS6EncodingManager()
         encoders.add(new S6CarFlagEncoder());
         encoders.add(new TruckFlagEncoder());
         encoders.add(new BikeFlagEncoder());
-        
+
         return new EncodingManager(encoders, 8);
     }
 }
diff --git a/core/src/main/java/com/samsix/graphhopper/S6GraphHopper.java b/core/src/main/java/com/samsix/graphhopper/S6GraphHopper.java
deleted file mode 100644
index cd4bdfee0e..0000000000
--- a/core/src/main/java/com/samsix/graphhopper/S6GraphHopper.java
+++ /dev/null
@@ -1,82 +0,0 @@
-package com.samsix.graphhopper;
-
-import java.util.HashSet;
-import java.util.Set;
-
-import com.graphhopper.GraphHopper;
-import com.graphhopper.routing.util.FlagEncoder;
-import com.graphhopper.routing.util.Weighting;
-import com.graphhopper.routing.util.WeightingMap;
-import com.graphhopper.util.EdgeIteratorState;
-
-public class S6GraphHopper
-    extends GraphHopper
-{    
-    @Override
-    public Weighting createWeighting( WeightingMap wMap, FlagEncoder encoder )
-    {
-        Weighting defaultWeighting = super.createWeighting(wMap, encoder);
-        
-        //
-        // This was created to avoid doing U-Turns if possible.
-        // We specify the edge we just drove on as an edge to avoid if possible.
-        // We give it a very large, but not infinite number. If it is the only
-        // possibility then it will take it thus indicating a valid u-turn.
-        //
-        String avoid = wMap.get("avoidEdge", null);
-        
-        Set<Integer> avoidEdges = null;
-        if (avoid != null) {
-            String[] edges = avoid.split(",");
-            avoidEdges = new HashSet<Integer>(edges.length);
-            for (int ii=0; ii < edges.length; ii++) {
-                avoidEdges.add(Integer.parseInt(edges[ii].trim()));
-            }
-            return new AvoidEdgeWeighting(defaultWeighting, avoidEdges);
-        }
-        
-        return defaultWeighting;
-    }
-    
-    
-    public static class AvoidEdgeWeighting
-        implements Weighting
-    {
-        public Weighting weighting;
-        private Set<Integer> avoidEdges;
-       
-        public AvoidEdgeWeighting(final Weighting weighting,
-                                final Set<Integer> avoidEdges)
-        {
-            this.weighting = weighting;
-            this.avoidEdges = avoidEdges;
-        }
-        
-        
-        @Override
-        public double getMinWeight(final double distance)
-        {
-            return weighting.getMinWeight(distance);
-        }
-
-        @Override
-        public double calcWeight(final EdgeIteratorState edgeState,
-                                 final boolean reverse,
-                                 final int prevOrNextEdgeId)
-        {
-            //
-            // Avoid this edge if possible for this routing.
-            //
-            if (avoidEdges != null && avoidEdges.contains(edgeState.getEdge())) {
-                //
-                // Just big number. Using Double.INFINITY or even Double.MAX_VALUE will
-                // cause it to NEVER pick this edge even if it is the only one. We still need
-                // to turn around if it is our only choice!
-                //
-                return 100000000;
-            }
-            
-            return weighting.calcWeight(edgeState, reverse, prevOrNextEdgeId);
-        }
-    }
-}
diff --git a/core/src/main/java/com/samsix/graphhopper/TruckFlagEncoder.java b/core/src/main/java/com/samsix/graphhopper/TruckFlagEncoder.java
index 73459c6025..57c85d167e 100644
--- a/core/src/main/java/com/samsix/graphhopper/TruckFlagEncoder.java
+++ b/core/src/main/java/com/samsix/graphhopper/TruckFlagEncoder.java
@@ -2,28 +2,34 @@
 
 import com.graphhopper.reader.OSMWay;
 import com.graphhopper.routing.util.CarFlagEncoder;
+import com.graphhopper.util.EdgeIteratorState;
 
 public class TruckFlagEncoder
     extends
         CarFlagEncoder
 {
+    public static final int K_DESIGNATED = 100;
+    public static final int K_DESTINATION = 101;
+    private long designatedbit = 0;
+    private long destinationbit = 0;
+
     public TruckFlagEncoder()
     {
         super();
-        
+
         //
         // Allow our service vehicles to take private roads
         // to get to the equipment they need to get to.
         //
         restrictedValues.remove("private");
     }
-    
-    
+
+
     @Override
-    public long acceptWay( OSMWay way )
+    public long acceptWay(final OSMWay way)
     {
         String hgv = way.getTag("hgv");
-    
+
         //
         // hgv=no seems to be the way to say that trucks can't go here.
         // hgv = Heavy Goods Vehicle
@@ -34,10 +40,86 @@ public long acceptWay( OSMWay way )
         {
             return 0;
         }
-        
+
         return super.acceptWay( way );
     }
 
+    @Override
+    public int defineWayBits( int index, int shift )
+    {
+        // first two bits are reserved for route handling in superclass
+        shift = super.defineWayBits(index, shift);
+
+        designatedbit = 1L << shift++;
+        destinationbit = 1L << shift++;
+
+        return shift;
+    }
+
+    @Override
+    public long handleWayTags( OSMWay way, long allowed, long relationFlags )
+    {
+        long encoded = super.handleWayTags(way, allowed, relationFlags);
+        if (encoded == 0) {
+            return 0;
+        }
+
+        if (way.hasTag("hgv", "designated")) {
+            encoded = setBool(encoded, K_DESIGNATED, true);
+        }
+
+        if (way.hasTag("hgv", "destination")) {
+            encoded = setBool(encoded, K_DESTINATION, true);
+        }
+
+        return encoded;
+    }
+
+    @Override
+    public void applyWayTags(final OSMWay way,
+                             final EdgeIteratorState edge)
+    {
+        long flags = edge.getFlags();
+
+        if (way.hasTag("hgv", "designated")) {
+            flags = setBool(flags, K_DESIGNATED, true);
+        }
+
+        if (way.hasTag("hgv", "destination")) {
+            flags = setBool(flags, K_DESTINATION, true);
+        }
+
+        edge.setFlags(flags);
+    }
+
+    @Override
+    public long setBool( long flags, int key, boolean value )
+    {
+        switch (key)
+        {
+        case K_DESIGNATED:
+            return value ? flags | designatedbit : flags & ~designatedbit;
+        case K_DESTINATION:
+            return value ? flags | destinationbit : flags & ~destinationbit;
+        default:
+            return super.setBool(flags, key, value);
+        }
+    }
+
+    @Override
+    public boolean isBool( long flags, int key )
+    {
+        switch (key)
+        {
+        case K_DESIGNATED:
+            return (flags & designatedbit) != 0;
+        case K_DESTINATION:
+            return (flags & destinationbit) != 0;
+        default:
+            return super.isBool(flags, key);
+        }
+    }
+
     @Override
     public String toString()
     {
diff --git a/core/src/main/java/com/samsix/graphhopper/tools/S6Import.java b/core/src/main/java/com/samsix/graphhopper/tools/S6Import.java
index fb894a8c35..f8dd707653 100644
--- a/core/src/main/java/com/samsix/graphhopper/tools/S6Import.java
+++ b/core/src/main/java/com/samsix/graphhopper/tools/S6Import.java
@@ -1,30 +1,18 @@
 package com.samsix.graphhopper.tools;
 
-import java.util.ArrayList;
-import java.util.List;
-
 import com.graphhopper.GraphHopper;
-import com.graphhopper.routing.util.BikeFlagEncoder;
-import com.graphhopper.routing.util.CarFlagEncoder;
-import com.graphhopper.routing.util.EncodingManager;
-import com.graphhopper.routing.util.FlagEncoder;
 import com.graphhopper.util.CmdArgs;
-import com.samsix.graphhopper.NoHighwayFlagEncoder;
-import com.samsix.graphhopper.S6CarFlagEncoder;
-import com.samsix.graphhopper.S6FootFlagEncoder;
 import com.samsix.graphhopper.S6GHUtils;
-import com.samsix.graphhopper.S6GraphHopper;
-import com.samsix.graphhopper.TruckFlagEncoder;
 
 public class S6Import
 {
     public static void main( String[] strs ) throws Exception
     {
         CmdArgs args = CmdArgs.read(strs);
-        GraphHopper hopper = new S6GraphHopper().init(args);
+        GraphHopper hopper = new GraphHopper().init(args);
 
         hopper.setEncodingManager(S6GHUtils.getS6EncodingManager());
-        
+
         hopper.importOrLoad();
         hopper.close();
     }
