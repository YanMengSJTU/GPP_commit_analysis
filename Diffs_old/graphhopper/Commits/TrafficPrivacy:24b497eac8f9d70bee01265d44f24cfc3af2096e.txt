diff --git a/automate.py b/automate.py
new file mode 100644
index 0000000000..45780b6544
--- /dev/null
+++ b/automate.py
@@ -0,0 +1,243 @@
+import socket
+import csv
+import sys
+import re
+import gzip
+from StringIO import StringIO
+import json
+from pprint import pprint
+import random
+import numpy as np
+import matplotlib.pyplot as plt
+from math import *
+
+HOST = 'localhost'
+PORT = 8989
+#DATA = 'GET / HTTP/1.1\r\nHost: localhost\r\n\r\n'
+
+#draw graphs for 100%, 80%
+
+l1 = 'GET http://localhost:8989/route?point=52.62306%2C13.463745&point=52.499504%2C13.349762&type=json&key=&locale=en-US&vehicle=car&weighting=fastest&elevation=false HTTP/1.1\r\n'
+l2 = 'Host: localhost:8989\r\n'
+l3 = 'User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:49.0) Gecko/20100101 Firefox/49.0\r\n'
+l4 = 'Accept: application/json, text/javascript, */*; q=0.01\r\n'
+l5 = 'Accept-Language: en-US,en;q=0.5\r\n'
+l6 = 'Accept-Encoding: gzip, deflate\r\n'
+l7 = 'Referer: http://localhost:8989/?point=52.62306%2C13.463745&point=52.499504%2C13.349762&locale=en-US&vehicle=car&weighting=fastest&elevation=false&use_miles=false&layer=Omniscale\\\r\n'
+l8 = 'Connection: keep-alive\r\n\r\n'
+
+DATA = l1 + l2 + l3 + l4 + l5 + l6 + l7 + l8
+
+cdf_ratio = 0.25
+
+#DATA = "GET / HTTP/1.1\r\nHost: localhost:8989\r\nUser-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.11; rv:49.0) Gecko/Upgrade-Insecure-Requests: 1ate5html+xml,application/xml;q=0.9,*/*;q=0.8\r\nlocalhost:8989/?point=52.62306%2C13.463745&point=52.499504%2C13.349762&locale=en-US&vehicle=car&weighting=fastest&elevation=false&use_miles=false&layer=Omniscale\r\nwebserver: localhost, port: 8989\r\n\r\n"
+
+def haversine(lon1, lat1, lon2, lat2):
+	# convert decimal degrees to radians 
+	lon1, lat1, lon2, lat2 = map(radians, [lon1, lat1, lon2, lat2])
+
+	# haversine formula 
+	dlon = lon2 - lon1 
+	dlat = lat2 - lat1 
+	a = sin(dlat/2)**2 + cos(lat1) * cos(lat2) * sin(dlon/2)**2
+	c = 2 * asin(sqrt(a)) 
+	r = 6371 # Radius of earth in kilometers. Use 3956 for miles
+	return c * r
+
+def tcp_client():
+	#5, 6, 9, 10
+
+	with open('yellow_tripdata_2016-01.csv', 'rb') as f:
+		#reader = csv.reader(f)
+		#data = list(reader) #transform to array
+
+		headerflag = 0 # 1 means header finished
+		linecounter = 0
+
+		ratio_array = []
+
+		for row in csv.reader(iter(f.readline, '')):
+			linecounter+=1
+			if linecounter == 1:
+				print row
+				continue
+			if linecounter == 1000:
+				break
+			#for i in xrange(1, 2):
+			#firstdata = data[i]
+			#print "First data: " + str(firstdata[5]) + str(firstdata[6]) + str(firstdata[9]) + str(firstdata[10]) 
+
+			#firstdata = [0,0,0,0,0,-73.988537,40.750073,0,0,-73.815099,40.963191]
+			firstdata = row
+			#for each entry in csv file, spawn 10
+
+			if (float(firstdata[5]) == 0.0) and (float(firstdata[6]) == 0.0) and (float(firstdata[9]) == 0.0) and (float(firstdata[10]) == 0.0):
+				#print "Bad Line"
+				continue
+
+			coord_hash = {}
+			max_overlap = 0
+			num_spawn = 25
+			exception_count = 0
+
+			for spawn_i in xrange(0, num_spawn):
+
+				pickup_longitude = float(firstdata[5])
+				pickup_latitude = float(firstdata[6])
+				dropoff_longitude = float(firstdata[9])
+				dropoff_latitude = float(firstdata[10])
+
+				if(spawn_i > 0):
+					off1 = random.randint(-1000, 1000)/300000.0
+					off2 = random.randint(-1000, 1000)/300000.0
+					off3 = random.randint(-1000, 1000)/300000.0
+					off4 = random.randint(-1000, 1000)/300000.0
+
+					#print str(off1) + " " + str(off2) + " " + str(off3) + " " + str(off4)
+
+					pickup_longitude += off1
+					pickup_latitude  += off2
+					dropoff_longitude += off3
+					dropoff_latitude += off4
+				
+				l1 = 'GET http://localhost:8989/route?point=' + str(pickup_latitude) + '%2C' + str(pickup_longitude) + '&point=' + str(dropoff_latitude) + '%2C' + str(dropoff_longitude) + '&type=json&key=&locale=en-US&vehicle=car&weighting=fastest&elevation=false HTTP/1.1\r\n'
+				l7 = 'Referer: http://localhost:8989/?point=' + str(pickup_latitude) + '%2C' + str(pickup_longitude) + '&point=' + str(dropoff_latitude) + '%2C' + str(dropoff_longitude) + '&locale=en-US&vehicle=car&weighting=fastest&elevation=false&use_miles=false&layer=Omniscale\\\r\n'
+				DATA = l1 + l2 + l3 + l4 + l5 + l6 + l7 + l8
+				#print DATA
+				client = socket.socket( socket.AF_INET, socket.SOCK_STREAM)
+				client.connect((HOST, PORT ))
+
+				client.send(DATA)
+
+				con_len = 0
+				body_len = 0
+				headerflag = 0
+				headerdata = ""
+				bodydata = ""
+				header_i = 0
+				empty_reply_count = 0
+
+				while 1:
+					reply = ''
+					reply = client.recv(4096)
+					
+					#print "Should have gotten reply"
+					#print str(reply)
+
+
+					if(headerflag == 0):
+						#print reply	
+						#print len(reply)
+
+						carriagesplit = reply.split('\r\n')
+
+						for i in xrange(0, len(carriagesplit) - 1):
+							if(re.search('Content-Length', carriagesplit[i])):
+									conlenstring = carriagesplit[i].split(': ')
+									con_len = conlenstring[1]
+									#print con_len
+
+							if(len(carriagesplit[i]) == 0):
+								headerflag = 1
+								header_i = i
+								#print "HEADERFLAG IS NOW 1: " + str(header_i)
+
+						headerdata = ""
+						for i in xrange(0, min(len(carriagesplit), header_i) ):
+							#print carriagesplit[i]
+							headerdata = headerdata + carriagesplit[i] + '\r\n'
+
+						headerlength = len(headerdata)
+
+						if headerflag == 1:
+							bodydata = reply[headerlength+2:len(reply)]
+							#print "headerdata: " + headerdata
+							#print len(bodydata)
+
+							if(len(bodydata) == int(con_len)):
+								break
+
+
+					else:
+						if(len(reply) > 0):
+							bodydata = bodydata + reply
+						else:
+							empty_reply_count += 1
+							if(empty_reply_count > 5):
+								break
+						
+						#print "con_len = " + str(con_len) + ", bodylen = " + str(len(bodydata)) 
+						if(int(len(bodydata)) < int(con_len)):
+							print str(len(bodydata)) + " < " + str(con_len)
+						else:
+							break
+
+
+				if re.search('Exception', bodydata):
+					#print "bodydata: " + bodydata
+					exception_count += 1
+					continue
+
+				try:
+					zipped_data = gzip.GzipFile(fileobj=StringIO(bodydata))
+					decompressed_data = zipped_data.read()
+
+					json_data = json.loads(decompressed_data)
+					#pprint(json_data)
+
+					coordinates = json_data[u'paths'][0][u'points'][u'coordinates']
+
+					#print "coordinates: " + str(len(coordinates))
+					for coord_i in xrange(0, len(coordinates)-1): 
+						coord_start = coordinates[coord_i]
+						coord_end = coordinates[coord_i + 1]
+
+						coord_tuple = (coord_start[0], coord_start[1], coord_end[0], coord_end[1])
+						if(spawn_i == 0):
+							coord_hash[coord_tuple] = 0
+						elif coord_tuple in coord_hash:
+							coord_hash[coord_tuple] += 1
+							#if coord_hash[coord_str] > max_overlap:
+							#	max_overlap = coord_hash[coord_str]
+				
+				except IOError as e:
+					print("IOError: %s" % e)
+					exception_count += 1
+
+					#print str(coord[0]) + ", " + str(coord[1])
+				#print "decompressed_data: " + json_data[1][1]
+
+				client.close()
+
+			spawn_valid = num_spawn - exception_count - 1
+			if spawn_valid == 0:
+				continue
+
+			total_length = 0.0
+			overlap_length = 0.0
+			for key in coord_hash:
+				seg_length = haversine(key[0], key[1], key[2], key[3])
+				#print seg_length
+				total_length += seg_length
+				overlap_ratio = float(coord_hash[key])/float(spawn_valid)
+				#print "overlap_ratio: " + str(coord_hash[key])
+				if overlap_ratio > cdf_ratio:
+					overlap_length += seg_length
+				
+			if total_length > 0:
+				dist_ratio = float(overlap_length)/float(total_length)
+				#print "dist_ratio: " + str(dist_ratio)
+				ratio_array.append(dist_ratio)
+
+
+		data = np.array(ratio_array)
+		sorted_data = np.sort(data)
+		plt.plot(sorted_data, np.linspace(0,1,sorted_data.size))
+		plt.show()
+
+		sys.exit(1)
+
+if __name__ == '__main__':
+	print haversine(-73.988537,40.750073,-73.815099,40.963191)
+	#40.750073,-73.988537/@40.963191,-73.815099
+	tcp_client()
\ No newline at end of file
