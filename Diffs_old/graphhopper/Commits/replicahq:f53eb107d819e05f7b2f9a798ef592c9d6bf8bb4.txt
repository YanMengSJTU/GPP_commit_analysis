diff --git a/.circleci/config.yml b/.circleci/config.yml
index cebf6e665c..f7148f6e9e 100644
--- a/.circleci/config.yml
+++ b/.circleci/config.yml
@@ -13,19 +13,19 @@ jobs:
       - run: &setup_gcloud
           name: Setup gcloud
           command: |
-            echo ${GCP_SERVICE_ACCOUNT_KEY} | base64 -d > ${HOME}/gcp-key.json
+            echo ${GCLOUD_SERVICE_KEY} | base64 -d > ${HOME}/gcp-key.json
             gcloud auth activate-service-account --key-file ${HOME}/gcp-key.json
-            gcloud --quiet config set project nyc-tlc-1225
+            gcloud --quiet config set project model-159019
       - setup_remote_docker
       - run:
           name: Choose a tag
           command: git rev-parse --short=8 HEAD > /tmp/tag
       - run:
           name: Build image
-          command: docker build . -f Dockerfile.model -t us.gcr.io/nyc-tlc-1225/gh:$(cat /tmp/tag)
+          command: docker build --build-arg GRAPHHOPPER_TOKEN=$GRAPHHOPPER_TOKEN . -f Dockerfile.model -t us.gcr.io/model-159019/gh:$(cat /tmp/tag)
       - run:
           name: Push image
-          command: gcloud docker -- push us.gcr.io/nyc-tlc-1225/gh:$(cat /tmp/tag)
+          command: gcloud docker -- push us.gcr.io/model-159019/gh:$(cat /tmp/tag)
 
 workflows:
   version: 2
diff --git a/Dockerfile.model b/Dockerfile.model
index ac82ee2b6a..9c8b19b8b3 100644
--- a/Dockerfile.model
+++ b/Dockerfile.model
@@ -1,5 +1,7 @@
 FROM openjdk:8-jdk
 
+ARG GRAPHHOPPER_TOKEN
+
 ENV JETTY_PORT 11111
 ENV JAVA_OPTS "-server -Xconcurrentio -Xmx1g -Xms1g -XX:+UseG1GC -XX:MetaspaceSize=100M"
 
diff --git a/core/src/main/java/com/graphhopper/routing/template/ViaRoutingTemplate.java b/core/src/main/java/com/graphhopper/routing/template/ViaRoutingTemplate.java
index 189871ca71..b93d3b5599 100644
--- a/core/src/main/java/com/graphhopper/routing/template/ViaRoutingTemplate.java
+++ b/core/src/main/java/com/graphhopper/routing/template/ViaRoutingTemplate.java
@@ -119,6 +119,7 @@ public ViaRoutingTemplate(GHRequest ghRequest, GHResponse ghRsp, LocationIndex l
                 if (departure_time == -1) {
                     throw new RuntimeException("Must specify departure_time in request.");
                 }
+                ((TDWeighting) algoOpts.getWeighting()).setInitialTime(departure_time * 1000);
                 tmpPathList = ((AbstractRoutingAlgorithm) algo).calcTDPaths(fromQResult.getClosestNode(), toQResult.getClosestNode(), departure_time * 1000);
             } else {
                 tmpPathList = algo.calcPaths(fromQResult.getClosestNode(), toQResult.getClosestNode());
diff --git a/core/src/main/java/com/graphhopper/routing/weighting/TDWeighting.java b/core/src/main/java/com/graphhopper/routing/weighting/TDWeighting.java
index a5ef56baae..657d00acc7 100644
--- a/core/src/main/java/com/graphhopper/routing/weighting/TDWeighting.java
+++ b/core/src/main/java/com/graphhopper/routing/weighting/TDWeighting.java
@@ -25,6 +25,8 @@
 
     long calcTDMillis(EdgeIteratorState edge, boolean reverse, int prevOrNextEdgeId, long linkEnterTime);
 
-    long getInitialTime();
+    int getInitialTime();
+
+    void setInitialTime(int i);
 }
 
diff --git a/pom.xml b/pom.xml
index 3a95815a5f..b592cd0ec1 100644
--- a/pom.xml
+++ b/pom.xml
@@ -213,6 +213,13 @@
         </extensions>
     </build>
 
+    <repositories>
+        <repository>
+            <id>graphhopper-matrix</id>
+            <url>https://packagecloud.io/priv/${env.GRAPHHOPPER_TOKEN}/graphhopper/matrix/maven2</url>
+        </repository>
+    </repositories>
+
     <distributionManagement>
         <snapshotRepository>
             <id>ossrh</id>
diff --git a/web-bundle/pom.xml b/web-bundle/pom.xml
index 330cd350ab..cb5d51977a 100644
--- a/web-bundle/pom.xml
+++ b/web-bundle/pom.xml
@@ -39,6 +39,12 @@
             <version>${project.parent.version}</version>
         </dependency>
 
+        <dependency>
+            <groupId>com.graphhopper</groupId>
+            <artifactId>graphhopper-matrix</artifactId>
+            <version>0.13.0-tardur3</version>
+        </dependency>
+
         <!-- required for JDK9 -->
         <dependency>
             <groupId>javax.xml.ws</groupId>
diff --git a/web-bundle/src/main/java/com/graphhopper/http/GraphHopperBundle.java b/web-bundle/src/main/java/com/graphhopper/http/GraphHopperBundle.java
index adaae90921..8efc0aa253 100644
--- a/web-bundle/src/main/java/com/graphhopper/http/GraphHopperBundle.java
+++ b/web-bundle/src/main/java/com/graphhopper/http/GraphHopperBundle.java
@@ -34,11 +34,15 @@
 import com.graphhopper.http.health.GraphHopperStorageHealthCheck;
 import com.graphhopper.isochrone.algorithm.DelaunayTriangulationIsolineBuilder;
 import com.graphhopper.jackson.GraphHopperModule;
+import com.graphhopper.matrix.http.MatrixResource;
+import com.graphhopper.matrix.model.MatrixQueue;
 import com.graphhopper.reader.gtfs.GraphHopperGtfs;
 import com.graphhopper.reader.gtfs.GtfsStorage;
 import com.graphhopper.reader.gtfs.PtFlagEncoder;
 import com.graphhopper.reader.gtfs.RealtimeFeed;
 import com.graphhopper.resources.*;
+import com.graphhopper.routing.GHMatrixAPI;
+import com.graphhopper.routing.MatrixAPI;
 import com.graphhopper.routing.util.CarFlagEncoder;
 import com.graphhopper.routing.util.EncodingManager;
 import com.graphhopper.routing.util.FootFlagEncoder;
@@ -53,6 +57,7 @@
 import io.dropwizard.setup.Environment;
 import org.glassfish.hk2.api.Factory;
 import org.glassfish.hk2.utilities.binding.AbstractBinder;
+import org.slf4j.LoggerFactory;
 
 import javax.inject.Inject;
 import javax.ws.rs.ext.WriterInterceptor;
@@ -209,7 +214,7 @@ private void runPtGraphHopper(CmdArgs configuration, Environment environment) {
         final PtFlagEncoder ptFlagEncoder = new PtFlagEncoder();
         final GHDirectory ghDirectory = GraphHopperGtfs.createGHDirectory(configuration.get("graph.location", "target/tmp"));
         final GtfsStorage gtfsStorage = GraphHopperGtfs.createGtfsStorage();
-        final EncodingManager encodingManager = new EncodingManager.Builder(8).add(ptFlagEncoder).add(new FootFlagEncoder()).add(new CarFlagEncoder()).build();
+        final EncodingManager encodingManager = new EncodingManager.Builder(configuration.getInt("graph.bytes_for_flags", 8)).add(ptFlagEncoder).add(new FootFlagEncoder()).add(new CarFlagEncoder()).build();
         final GraphHopperStorage graphHopperStorage = GraphHopperGtfs.createOrLoad(ghDirectory, encodingManager, ptFlagEncoder, gtfsStorage,
                 configuration.has("gtfs.file") ? Arrays.asList(configuration.get("gtfs.file", "").split(",")) : Collections.emptyList(),
                 configuration.has("datareader.file") ? Arrays.asList(configuration.get("datareader.file", "").split(",")) : Collections.emptyList());
@@ -288,6 +293,21 @@ protected void configure() {
         environment.jersey().register(I18NResource.class);
         environment.jersey().register(InfoResource.class);
         environment.healthChecks().register("graphhopper", new GraphHopperHealthCheck(graphHopperManaged.getGraphHopper()));
+
+
+        MatrixAPI matrixAPI = new GHMatrixAPI(graphHopperManaged.getGraphHopper());
+        MatrixQueue matrixQueue = createAndStartQueue(configuration, matrixAPI, configuration.getInt("matrix.default_customer_priority", 1));
+        environment.jersey().register(new MatrixResource(configuration, matrixAPI, matrixQueue));
+    }
+
+    private MatrixQueue createAndStartQueue(CmdArgs args, MatrixAPI mCalc, Integer defaultCustomerPriority) {
+        // restrict to available processors (one thread for the GC and one for the free queue)
+        int threads = Runtime.getRuntime().availableProcessors() - 1;
+        threads = args.getInt("matrix.threads", threads);
+        LoggerFactory.getLogger(getClass()).info("default customer priority: " + defaultCustomerPriority + ", matrix threads " + (threads - 1) + ", free threads: 1");
+        MatrixQueue mQueue = new MatrixQueue(threads, mCalc);
+        mQueue.start();
+        return mQueue;
     }
 
 }
diff --git a/web-bundle/src/main/java/com/graphhopper/swl/FastestCarTDWeighting.java b/web-bundle/src/main/java/com/graphhopper/swl/FastestCarTDWeighting.java
index 3c0aa477c2..a56c992f63 100644
--- a/web-bundle/src/main/java/com/graphhopper/swl/FastestCarTDWeighting.java
+++ b/web-bundle/src/main/java/com/graphhopper/swl/FastestCarTDWeighting.java
@@ -34,7 +34,7 @@
     private final SpeedCalculator speedCalculator;
     private final long headingPenaltyMillis;
     private final double headingPenalty;
-    private long initialTime;
+    private int initialTime;
 
     public FastestCarTDWeighting(FlagEncoder encoder, SpeedCalculator speedCalculator, PMap map) {
         this.encoder = encoder;
@@ -92,8 +92,13 @@ public long calcTDMillis(EdgeIteratorState edge, boolean reverse, int prevOrNext
     }
 
     @Override
-    public long getInitialTime() {
-        return 0;
+    public int getInitialTime() {
+        return initialTime;
+    }
+
+    @Override
+    public void setInitialTime(int initialTime) {
+        this.initialTime = initialTime;
     }
 
     @Override
