diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/Marmoset.java b/marmoset/src/main/java/com/graphhopper/marmoset/Marmoset.java
index 685959ea30..0b9c0b5a1b 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/Marmoset.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/Marmoset.java
@@ -2,6 +2,7 @@
 
 import fi.iki.elonen.SimpleWebServer;
 import fi.iki.elonen.util.ServerRunner;
+import org.slf4j.LoggerFactory;
 
 import java.io.File;
 import java.io.IOException;
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/Vehicle.java b/marmoset/src/main/java/com/graphhopper/marmoset/Vehicle.java
index e9652c631a..9e237eaa00 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/Vehicle.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/Vehicle.java
@@ -7,6 +7,8 @@
 import com.graphhopper.marmoset.util.Location;
 import com.graphhopper.routing.Path;
 import com.graphhopper.util.*;
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
 
 import java.util.List;
 import java.util.stream.Collectors;
@@ -15,6 +17,9 @@
  * Created by alexander on 16/02/2016.
  */
 public class Vehicle {
+
+    private static final Logger logger = LoggerFactory.getLogger(Vehicle.class);
+
     private static int maxId = 0;
     private final int id;
 
@@ -60,7 +65,7 @@ public void init()
         GraphHopper gh = hopper.getGraphHopper();
 
         GHRequest ghRequest = new GHRequest(loc.getLat(), loc.getLon(), dest.getLat(), dest.getLon());
-        System.out.println(loc + "->" + dest);
+        logger.debug(loc + "->" + dest);
         GHResponse ghResponse = new GHResponse();
         List<Path> paths = gh.calcPaths(ghRequest, ghResponse);
         if (ghResponse.hasErrors())
@@ -74,9 +79,9 @@ public void init()
         int maxId = edgeList.stream().mapToInt(EdgeIteratorState::getEdge).max().getAsInt();
         int minId = edgeList.stream().mapToInt(EdgeIteratorState::getEdge).min().getAsInt();
         edgeId = e.getEdge();
-        System.out.println("edge id: " + edgeId);
-        System.out.println("max edge id: " + maxId);
-        System.out.println("min edge id: " + minId);
+        logger.debug("edge id: " + edgeId);
+        logger.debug("max edge id: " + maxId);
+        logger.debug("min edge id: " + minId);
 
         cg.set(edgeId, cellId, v);
     }
@@ -85,11 +90,11 @@ public void init()
     public void accelerationStep()
     {
         freeCells = cg.freeCellsAhead(edgeId, cellId);
-        int c = cg.getCellCount(cellId);
-        System.out.println(id + "freecells:"+freeCells + "V:"+v + "count:"+ c);
+        int c = cg.getCellCount(edgeId);
+        logger.debug(id + "freecells:"+freeCells + "V:"+v + "count:"+ c);
         if (freeCells > v+1 && v < maxVelocity)
         {
-            System.out.println("Accelerating");
+            logger.debug("Accelerating");
             v++;
         }
     }
@@ -98,7 +103,7 @@ public void slowStep()
     {
         if (freeCells < v)
         {
-            System.out.println("Slowing");
+            logger.debug("Slowing");
             v = (byte) (freeCells);
         }
     }
@@ -107,14 +112,14 @@ public void randomStep()
     {
         if (v > 0 && Math.random() < slowProb)
         {
-            System.out.println("Randomly slowing");
+            logger.debug("Randomly slowing");
             v--;
         }
     }
 
     public void moveStep()
     {
-        System.out.println("Moving from " + cellId + " to " + (cellId + v));
+        logger.debug("Moving from " + cellId + " to " + (cellId + v));
         cg.set(edgeId, cellId, 0);
         cellId += v;
         cg.set(edgeId, cellId, v);
@@ -128,23 +133,23 @@ public void updateLocation()
         PointList path = edge.fetchWayGeometry(3);
         if (path.isEmpty())
         {
-            System.out.println("Path is empty, not moving...");
+            logger.debug("Path is empty, not moving...");
             return;
         }
-        System.out.println("velocity:" + v);
-        System.out.println("progress:" + progress);
+        logger.debug("velocity:" + v);
+        logger.debug("progress:" + progress);
 
         DistanceCalc dc = new DistanceCalc2D();
         double dist = path.calcDistance(dc);
-        System.out.println("dist: " + dist);
+        logger.debug("dist: " + dist);
         double distTravelled = progress * dist;
         double currDist = 0;
-        System.out.printf("start(%d): %f + %f\n", id,currDist,distTravelled);
+        logger.debug("start(%d): %f + %f\n", id,currDist,distTravelled);
         int i = 0;
         while (i < path.getSize()-1 && currDist <= distTravelled)
         {
             double nextDist = dc.calcDist(path.getLat(i), path.getLon(i), path.getLat(i + 1), path.getLon(i + 1));
-            System.out.printf("-%d|%d: %f + %f\n", id,i,currDist,nextDist);
+            logger.debug("-%d|%d: %f + %f\n", id,i,currDist,nextDist);
             if (currDist + nextDist > distTravelled)
             {
                 double partProgress = (distTravelled - currDist)/nextDist;
diff --git a/marmoset/src/main/java/com/graphhopper/marmoset/util/CellsGraph.java b/marmoset/src/main/java/com/graphhopper/marmoset/util/CellsGraph.java
index 5682fcdb2d..467d88621e 100644
--- a/marmoset/src/main/java/com/graphhopper/marmoset/util/CellsGraph.java
+++ b/marmoset/src/main/java/com/graphhopper/marmoset/util/CellsGraph.java
@@ -19,13 +19,11 @@ public CellsGraph(Graph graph, int cellSize) {
     public void init()
     {
         AllEdgesIterator iterator = graph.getAllEdges();
-        double totalDist = 0;
         cells = new byte[iterator.getMaxId()][];
         while (iterator.next())
         {
             int cellCount = Math.max(1, (int) (iterator.getDistance() / cellSize));
             cells[iterator.getEdge()] = new byte[cellCount];
-            totalDist += iterator.getDistance();
         }
     }
 
