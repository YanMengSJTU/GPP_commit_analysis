diff --git a/core/src/main/java/com/graphhopper/util/FinishInstruction.java b/core/src/main/java/com/graphhopper/util/FinishInstruction.java
index 5f1f3777f2..888524bbc7 100644
--- a/core/src/main/java/com/graphhopper/util/FinishInstruction.java
+++ b/core/src/main/java/com/graphhopper/util/FinishInstruction.java
@@ -47,6 +47,11 @@ public FinishInstruction(PointAccess pointAccess, int node) {
                 pointAccess.is3D() ? pointAccess.getElevation(node) : Double.NaN);
     }
 
+    @Override
+    public int getLength() {
+        return 0;
+    }
+
     @Override
     public String getTurnDescription(Translation tr) {
         if (rawName)
diff --git a/core/src/main/java/com/graphhopper/util/Instruction.java b/core/src/main/java/com/graphhopper/util/Instruction.java
index 992d74ca3b..28af4c88a7 100644
--- a/core/src/main/java/com/graphhopper/util/Instruction.java
+++ b/core/src/main/java/com/graphhopper/util/Instruction.java
@@ -238,6 +238,20 @@ void checkOne() {
             throw new IllegalStateException("Instruction must contain at least one point " + toString());
     }
 
+    /**
+     * This method returns the length of an Instruction. The length of an instruction is defined by [the
+     * index of the first point of the next instruction] - [the index of the first point of this instruction].
+     * <p>
+     * In general this will just resolve to the size of the PointList, except for {@link ViaInstruction} and
+     * {@link FinishInstruction}, which are only virtual instructions, in a sense that they don't provide
+     * a turn instruction, but only an info ("reached via point or destination").
+     * <p>
+     * See #1216 and #1138
+     */
+    public int getLength() {
+        return points.getSize();
+    }
+
     public String getTurnDescription(Translation tr) {
         if (rawName)
             return getName();
diff --git a/core/src/main/java/com/graphhopper/util/InstructionList.java b/core/src/main/java/com/graphhopper/util/InstructionList.java
index cd7ab45dc7..ec63f393ef 100644
--- a/core/src/main/java/com/graphhopper/util/InstructionList.java
+++ b/core/src/main/java/com/graphhopper/util/InstructionList.java
@@ -80,7 +80,8 @@ public void replaceLast(Instruction instr) {
         instructions.set(instructions.size() - 1, instr);
     }
 
-    @JsonValue public List<Map<String, Object>> createJson() {
+    @JsonValue
+    public List<Map<String, Object>> createJson() {
         List<Map<String, Object>> instrList = new ArrayList<>(instructions.size());
         int pointsIndex = 0;
         int counter = 0;
@@ -104,11 +105,7 @@ public void replaceLast(Instruction instr) {
             instrJson.put("sign", instruction.getSign());
             instrJson.putAll(instruction.getExtraInfoJSON());
 
-            int tmpIndex = pointsIndex + instruction.getPoints().size();
-            // the last instruction should not point to the next instruction
-            if (counter + 1 == instructions.size())
-                tmpIndex--;
-
+            int tmpIndex = pointsIndex + instruction.getLength();
             instrJson.put("interval", Arrays.asList(pointsIndex, tmpIndex));
             pointsIndex = tmpIndex;
 
@@ -120,7 +117,6 @@ public void replaceLast(Instruction instr) {
     /**
      * @return This method returns a list of gpx entries where the time (in millis) is relative to
      * the first which is 0.
-     * <p>
      */
     public List<GPXEntry> createGPXList() {
         if (isEmpty())
diff --git a/core/src/main/java/com/graphhopper/util/PathMerger.java b/core/src/main/java/com/graphhopper/util/PathMerger.java
index 0f90371240..33b3db07ee 100644
--- a/core/src/main/java/com/graphhopper/util/PathMerger.java
+++ b/core/src/main/java/com/graphhopper/util/PathMerger.java
@@ -111,9 +111,14 @@ public void doWork(PathWrapper altRsp, List<Path> paths, Translation tr) {
                 if (fullPoints.isEmpty())
                     fullPoints = new PointList(tmpPoints.size(), tmpPoints.is3D());
 
+                // Remove duplicated points, see #1138
+                if (pathIndex + 1 < paths.size()) {
+                    tmpPoints.removeLastPoint();
+                }
+
                 fullPoints.add(tmpPoints);
                 altRsp.addPathDetails(path.calcDetails(requestedPathDetails, pathBuilderFactory, origPoints));
-                origPoints += tmpPoints.size();
+                origPoints = fullPoints.size();
             }
 
             allFound = allFound && path.isFound();
diff --git a/core/src/main/java/com/graphhopper/util/PathSimplification.java b/core/src/main/java/com/graphhopper/util/PathSimplification.java
index 40aebf84b6..3a5feb5555 100644
--- a/core/src/main/java/com/graphhopper/util/PathSimplification.java
+++ b/core/src/main/java/com/graphhopper/util/PathSimplification.java
@@ -146,12 +146,7 @@ public PointList simplify() {
 
     private int getLength(Object o, int index) {
         if (o instanceof InstructionList) {
-            // we do not store the last point of an instruction
-            int size = ((InstructionList) o).get(index).getPoints().size();
-            if (size == 0)
-                throw new IllegalStateException("PointList of instruction should not be empty " + o);
-            // the last point of instruction (i.e. first point of next instruction) is not included
-            return size;
+            return ((InstructionList) o).get(index).getLength();
         }
         if (o instanceof List) {
             return ((List<PathDetail>) o).get(index).getLength();
diff --git a/core/src/main/java/com/graphhopper/util/PointList.java b/core/src/main/java/com/graphhopper/util/PointList.java
index e00b77fb94..d7511aaa1d 100644
--- a/core/src/main/java/com/graphhopper/util/PointList.java
+++ b/core/src/main/java/com/graphhopper/util/PointList.java
@@ -44,6 +44,11 @@ public void add(double lat, double lon, double ele) {
             throw new RuntimeException("cannot change EMPTY PointList");
         }
 
+        @Override
+        public void removeLastPoint() {
+            throw new RuntimeException("cannot change EMPTY PointList");
+        }
+
         @Override
         public double getLatitude(int index) {
             throw new RuntimeException("cannot access EMPTY PointList");
@@ -260,6 +265,10 @@ public void add(PointList points) {
         size = newSize;
     }
 
+    public void removeLastPoint(){
+        size--;
+    }
+
     public int size() {
         return size;
     }
diff --git a/core/src/main/java/com/graphhopper/util/ShallowImmutablePointList.java b/core/src/main/java/com/graphhopper/util/ShallowImmutablePointList.java
index 4f5b2f02cd..24288d4872 100644
--- a/core/src/main/java/com/graphhopper/util/ShallowImmutablePointList.java
+++ b/core/src/main/java/com/graphhopper/util/ShallowImmutablePointList.java
@@ -138,6 +138,11 @@ public void add(PointList points) {
         throw new UnsupportedOperationException(IMMUTABLE_ERR);
     }
 
+    @Override
+    public void removeLastPoint() {
+        throw new UnsupportedOperationException(IMMUTABLE_ERR);
+    }
+
     @Override
     public void reverse() {
         throw new UnsupportedOperationException(IMMUTABLE_ERR);
diff --git a/core/src/main/java/com/graphhopper/util/ViaInstruction.java b/core/src/main/java/com/graphhopper/util/ViaInstruction.java
index c2c45104dc..6d348bc768 100644
--- a/core/src/main/java/com/graphhopper/util/ViaInstruction.java
+++ b/core/src/main/java/com/graphhopper/util/ViaInstruction.java
@@ -33,6 +33,11 @@ public ViaInstruction(Instruction instr) {
         setTime(instr.getTime());
     }
 
+    @Override
+    public int getLength() {
+        return 0;
+    }
+
     public int getViaCount() {
         if (viaPosition < 0)
             throw new IllegalStateException("Uninitialized via count in instruction " + getName());
diff --git a/core/src/test/java/com/graphhopper/util/PointListTest.java b/core/src/test/java/com/graphhopper/util/PointListTest.java
index beaa879c1e..d11f574e1b 100644
--- a/core/src/test/java/com/graphhopper/util/PointListTest.java
+++ b/core/src/test/java/com/graphhopper/util/PointListTest.java
@@ -100,6 +100,19 @@ public void testIterable() {
         }
     }
 
+    @Test
+    public void testRemoveLast() {
+        PointList list = new PointList(20, false);
+        for (int i = 0; i < 10; i++) {
+            list.add(1, i);
+        }
+        assertEquals(10, list.getSize());
+        assertEquals(9, list.getLon(list.getSize()-1), .1);
+        list.removeLastPoint();
+        assertEquals(9, list.getSize());
+        assertEquals(8, list.getLon(list.getSize()-1), .1);
+    }
+
     @Test
     public void testCopy_issue1166() {
         PointList list = new PointList(20, false);
diff --git a/reader-osm/src/test/java/com/graphhopper/GraphHopperIT.java b/reader-osm/src/test/java/com/graphhopper/GraphHopperIT.java
index 938ca0d7a3..c3ecf7b8e5 100644
--- a/reader-osm/src/test/java/com/graphhopper/GraphHopperIT.java
+++ b/reader-osm/src/test/java/com/graphhopper/GraphHopperIT.java
@@ -327,7 +327,7 @@ public void testMonacoVia() {
 
         PathWrapper arsp = rsp.getBest();
         assertEquals(6875.2, arsp.getDistance(), .1);
-        assertEquals(174, arsp.getPoints().getSize());
+        assertEquals(173, arsp.getPoints().getSize());
 
         InstructionList il = arsp.getInstructions();
         assertEquals(38, il.size());
@@ -384,7 +384,7 @@ public void testMonacoVia() {
         arsp = rsp.getBest();
         assertEquals(0, arsp.getDistance(), .1);
         assertEquals(0, arsp.getRouteWeight(), .1);
-        assertEquals(2, arsp.getPoints().getSize());
+        assertEquals(1, arsp.getPoints().getSize());
         assertEquals(2, arsp.getInstructions().size());
         assertEquals(Instruction.REACHED_VIA, arsp.getInstructions().createJson().get(0).get("sign"));
         assertEquals(Instruction.FINISH, arsp.getInstructions().createJson().get(1).get("sign"));
@@ -509,7 +509,7 @@ public void testMonacoStraightVia() {
 
         PathWrapper arsp = rsp.getBest();
         assertEquals(297, arsp.getDistance(), 5.);
-        assertEquals(24, arsp.getPoints().getSize());
+        assertEquals(23, arsp.getPoints().getSize());
 
         // test if start and first point are identical leading to an empty path, #788
         rq = new GHRequest().
@@ -845,7 +845,29 @@ public void testRoundTour() {
         PathWrapper pw = rsp.getBest();
         assertEquals(1.45, rsp.getBest().getDistance() / 1000f, .01);
         assertEquals(17, rsp.getBest().getTime() / 1000f / 60, 1);
-        assertEquals(64, pw.getPoints().size());
+        assertEquals(63, pw.getPoints().size());
+    }
+
+    @Test
+    public void testPathDetails1216() {
+        GraphHopper tmpHopper = new GraphHopperOSM().
+                setOSMFile(DIR + "/north-bayreuth.osm.gz").
+                setCHEnabled(false).
+                setGraphHopperLocation(tmpGraphFile).
+                setEncodingManager(new EncodingManager("car"));
+        tmpHopper.importOrLoad();
+
+        GHRequest req = new GHRequest().
+                addPoint(new GHPoint(49.984352, 11.498802)).
+                // This is exactly between two edges with different speed values
+                        addPoint(new GHPoint(49.984565, 11.499188)).
+                        addPoint(new GHPoint(49.9847, 11.499612)).
+                        setVehicle("car").setWeighting("fastest").
+                        setPathDetails(Arrays.asList(Parameters.DETAILS.AVERAGE_SPEED));
+
+        GHResponse rsp = tmpHopper.route(req);
+
+        assertFalse(rsp.hasErrors());
     }
 
     @Test
diff --git a/reader-osm/src/test/java/com/graphhopper/reader/osm/GraphHopperOSMTest.java b/reader-osm/src/test/java/com/graphhopper/reader/osm/GraphHopperOSMTest.java
index bb588202cf..0af3c065b0 100644
--- a/reader-osm/src/test/java/com/graphhopper/reader/osm/GraphHopperOSMTest.java
+++ b/reader-osm/src/test/java/com/graphhopper/reader/osm/GraphHopperOSMTest.java
@@ -558,7 +558,7 @@ public void testVia() {
         assertFalse("should find 1->2->3", grsp.hasErrors());
         PathWrapper rsp = grsp.getBest();
         assertEquals(rsp12.getBest().getDistance() + rsp23.getBest().getDistance(), rsp.getDistance(), 1e-6);
-        assertEquals(5, rsp.getPoints().getSize());
+        assertEquals(4, rsp.getPoints().getSize());
         assertEquals(5, rsp.getInstructions().size());
         assertEquals(Instruction.REACHED_VIA, rsp.getInstructions().get(1).getSign());
     }
diff --git a/reader-osm/src/test/java/com/graphhopper/routing/RoutingAlgorithmWithOSMIT.java b/reader-osm/src/test/java/com/graphhopper/routing/RoutingAlgorithmWithOSMIT.java
index 2faaad9b6c..9834b60469 100644
--- a/reader-osm/src/test/java/com/graphhopper/routing/RoutingAlgorithmWithOSMIT.java
+++ b/reader-osm/src/test/java/com/graphhopper/routing/RoutingAlgorithmWithOSMIT.java
@@ -309,7 +309,7 @@ public void testBug1014() {
         OneRun run = new OneRun();
         run.add(50.016923, 11.514187, 0, 0);
         run.add(50.019129, 11.500325, 0, 0);
-        run.add(50.023623, 11.56929, 7069, 180);
+        run.add(50.023623, 11.56929, 7069, 178);
         list.add(run);
 
         runAlgo(testCollector, DIR + "/north-bayreuth.osm.gz", "target/north-bayreuth-gh",
