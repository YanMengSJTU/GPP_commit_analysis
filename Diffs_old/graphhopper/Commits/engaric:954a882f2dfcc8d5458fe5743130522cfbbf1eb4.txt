diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperJSONUtil.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperJSONUtil.java
index 3aa690534e..468acdfd11 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperJSONUtil.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/GraphHopperJSONUtil.java
@@ -12,10 +12,8 @@
 
 public class GraphHopperJSONUtil {
 
-	JSONWayPoints wayPoints = new JSONWayPoints();
 	JSONParser parser = new JSONParser();
-	
-	
+
 	private static final Logger LOG = LoggerFactory
 			.getLogger(GraphHopperJSONUtil.class);
 
@@ -53,6 +51,7 @@ public boolean isWayPointinPath(Waypoint we, HashSet<Waypoint> wa) {
 
 		return iswaypointinPath;
 	}
+
 	public void parse(String jsonResponse) {
 
 		parser.parse(jsonResponse);
@@ -74,9 +73,8 @@ public Waypoint buildWayPointForJson(String wayPoint_Coordinates,
 	}
 
 	public String nearestPointJSONParser(String jsoString) {
-		
-		return parser.getNearestPoint();
 
+		return parser.getNearestPoint();
 
 	}
 
@@ -107,9 +105,9 @@ public void verifyStatusCode(int statusCode) {
 	}
 
 	public String getNearestPoint() {
-		
+
 		return parser.getNearestPoint();
-		
+
 	}
 
 	public String getNearestPointDistance() {
diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/JSONParser.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/JSONParser.java
index 9668e309b8..6660e40249 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/JSONParser.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/JSONParser.java
@@ -3,7 +3,6 @@
 import java.util.HashSet;
 
 import org.alternativevision.gpx.beans.Waypoint;
-import org.junit.Assert;
 import org.slf4j.Logger;
 import org.slf4j.LoggerFactory;
 
@@ -24,10 +23,29 @@
 	private JsonArray instructions;
 	private JsonObject info;
 
-	public JSONWayPoints jsonWayPoints = new JSONWayPoints();
-
 	private static final Logger LOG = LoggerFactory.getLogger(JSONParser.class);
 
+	String JSONString;
+	HashSet<Waypoint> wayPoints = new HashSet<Waypoint>();
+
+	/**
+	 * Adds a WayPoint to the Instructions ArrayList(WayPoint List)
+	 * 
+	 * @param waypoint
+	 * 
+	 */
+	public void addWayPoint(Waypoint w) {
+
+		wayPoints.add(w);
+	}
+
+	/**
+	 * @return List of WayPoints in a JSON Route String
+	 */
+	public HashSet<Waypoint> getWayPoints() {
+		return wayPoints;
+	}
+
 	public void parse(String jsonString) {
 
 		JsonParser parser = new JsonParser();
@@ -59,7 +77,7 @@ public JsonArray getInstructions() {
 	}
 
 	public HashSet<Waypoint> getJsonWayPoints() {
-		return jsonWayPoints.getInstructions();
+		return getWayPoints();
 	}
 
 	public void extractWayPoints() {
@@ -106,7 +124,7 @@ public void extractWayPoints() {
 			LOG.info("Coordinates : " + w.getLatitude() + ","
 					+ w.getLongitude());
 
-			jsonWayPoints.addWayPoint(w);
+			addWayPoint(w);
 		}
 
 	}
@@ -124,7 +142,7 @@ public JsonElement getJSONCoordinates(int coordinateIndex) {
 	public boolean isWayPointinPath(Waypoint w) {
 		boolean iswaypointinPath = false;
 
-		for (Waypoint wp : jsonWayPoints.getInstructions()) {
+		for (Waypoint wp : getWayPoints()) {
 
 			RouteWayPoint k = new RouteWayPoint(wp);
 			iswaypointinPath = k.equals(new RouteWayPoint(w));
@@ -176,7 +194,7 @@ public String getNearestPointDistance() {
 		return distance.toString();
 	}
 
-	public JSONWayPoints parseCoordinatesFromJson() {
+	public void parseCoordinatesFromJson() {
 
 		JsonObject points = paths.get(0).getAsJsonObject()
 				.getAsJsonObject("points");
@@ -191,11 +209,9 @@ public JSONWayPoints parseCoordinatesFromJson() {
 					.get(1).toString());
 			w.setLongitude(longitude);
 			w.setLatitude(latitude);
-			jsonWayPoints.addWayPoint(w);
+			addWayPoint(w);
 
 		}
 
-		return jsonWayPoints;
-
 	}
 }
diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/JSONWayPoints.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/JSONWayPoints.java
deleted file mode 100644
index 540459ba1d..0000000000
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/gpx/graphhopper/JSONWayPoints.java
+++ /dev/null
@@ -1,41 +0,0 @@
-package uk.co.ordnancesurvey.gpx.graphhopper;
-
-import java.util.HashSet;
-
-import org.alternativevision.gpx.beans.Waypoint;
-
-public class JSONWayPoints {
-	
-	
-	String JSONString;
-	HashSet<Waypoint> instructions= new HashSet<Waypoint>();
-
-	
-	/**
-	 * Adds a WayPoint to the Instructions ArrayList(WayPoint List)
-	 * @param waypoint
-	 * 
-	 */
-	public void addWayPoint(Waypoint w) {
-		
-		instructions.add(w);
-	}
-
-
-/**
- * @return List of WayPoints in a JSON Route String
- */
-public   HashSet<Waypoint> getInstructions()
-{
-	return instructions;
-}
-	
-
-	
-	
-	
-	
-	
-	
-
-}
diff --git a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
index f733989721..6784e24280 100644
--- a/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
+++ b/acceptancetesting/src/main/java/uk/co/ordnancesurvey/routing/GraphHopperUIUtil.java
@@ -716,7 +716,7 @@ void sendAndGetResponse(StringBuffer sb) {
 
 		if (serviceResponse != null && serviceResponse.length() > 0) {
 
-			if (IntegrationTestProperties.getTestProperty("routeType")
+			if (requestParameters.get("type").get(0)
 					.equalsIgnoreCase("gpx")) {
 				GPHServiceUtil.parseGPXFromString(serviceResponse);
 			} else {
@@ -954,6 +954,10 @@ public void verifyStatusCode(int statusCode) {
 		}
 	}
 
+	public Map<String, ArrayList<String>> getrequestParameters()
+	{
+		return requestParameters;
+	}
 	public String getNearestPoint() {
 
 		return GPHJSONUtil.getNearestPoint();
diff --git a/core/.settings/org.eclipse.jdt.core.prefs b/core/.settings/org.eclipse.jdt.core.prefs
index 62492222ad..a6e660c871 100644
--- a/core/.settings/org.eclipse.jdt.core.prefs
+++ b/core/.settings/org.eclipse.jdt.core.prefs
@@ -1,4 +1,14 @@
 eclipse.preferences.version=1
+org.eclipse.jdt.core.codeComplete.argumentPrefixes=
+org.eclipse.jdt.core.codeComplete.argumentSuffixes=
+org.eclipse.jdt.core.codeComplete.fieldPrefixes=
+org.eclipse.jdt.core.codeComplete.fieldSuffixes=
+org.eclipse.jdt.core.codeComplete.localPrefixes=
+org.eclipse.jdt.core.codeComplete.localSuffixes=
+org.eclipse.jdt.core.codeComplete.staticFieldPrefixes=
+org.eclipse.jdt.core.codeComplete.staticFieldSuffixes=
+org.eclipse.jdt.core.codeComplete.staticFinalFieldPrefixes=
+org.eclipse.jdt.core.codeComplete.staticFinalFieldSuffixes=
 org.eclipse.jdt.core.compiler.codegen.inlineJsrBytecode=enabled
 org.eclipse.jdt.core.compiler.codegen.targetPlatform=1.7
 org.eclipse.jdt.core.compiler.codegen.unusedLocal=preserve
@@ -10,3 +20,287 @@ org.eclipse.jdt.core.compiler.problem.assertIdentifier=error
 org.eclipse.jdt.core.compiler.problem.enumIdentifier=error
 org.eclipse.jdt.core.compiler.problem.forbiddenReference=warning
 org.eclipse.jdt.core.compiler.source=1.7
+org.eclipse.jdt.core.formatter.align_type_members_on_columns=false
+org.eclipse.jdt.core.formatter.alignment_for_arguments_in_allocation_expression=16
+org.eclipse.jdt.core.formatter.alignment_for_arguments_in_annotation=0
+org.eclipse.jdt.core.formatter.alignment_for_arguments_in_enum_constant=16
+org.eclipse.jdt.core.formatter.alignment_for_arguments_in_explicit_constructor_call=16
+org.eclipse.jdt.core.formatter.alignment_for_arguments_in_method_invocation=16
+org.eclipse.jdt.core.formatter.alignment_for_arguments_in_qualified_allocation_expression=16
+org.eclipse.jdt.core.formatter.alignment_for_assignment=0
+org.eclipse.jdt.core.formatter.alignment_for_binary_expression=16
+org.eclipse.jdt.core.formatter.alignment_for_compact_if=16
+org.eclipse.jdt.core.formatter.alignment_for_conditional_expression=80
+org.eclipse.jdt.core.formatter.alignment_for_enum_constants=0
+org.eclipse.jdt.core.formatter.alignment_for_expressions_in_array_initializer=16
+org.eclipse.jdt.core.formatter.alignment_for_method_declaration=0
+org.eclipse.jdt.core.formatter.alignment_for_multiple_fields=16
+org.eclipse.jdt.core.formatter.alignment_for_parameters_in_constructor_declaration=16
+org.eclipse.jdt.core.formatter.alignment_for_parameters_in_method_declaration=16
+org.eclipse.jdt.core.formatter.alignment_for_resources_in_try=80
+org.eclipse.jdt.core.formatter.alignment_for_selector_in_method_invocation=16
+org.eclipse.jdt.core.formatter.alignment_for_superclass_in_type_declaration=16
+org.eclipse.jdt.core.formatter.alignment_for_superinterfaces_in_enum_declaration=16
+org.eclipse.jdt.core.formatter.alignment_for_superinterfaces_in_type_declaration=16
+org.eclipse.jdt.core.formatter.alignment_for_throws_clause_in_constructor_declaration=16
+org.eclipse.jdt.core.formatter.alignment_for_throws_clause_in_method_declaration=16
+org.eclipse.jdt.core.formatter.alignment_for_union_type_in_multicatch=16
+org.eclipse.jdt.core.formatter.blank_lines_after_imports=1
+org.eclipse.jdt.core.formatter.blank_lines_after_package=1
+org.eclipse.jdt.core.formatter.blank_lines_before_field=0
+org.eclipse.jdt.core.formatter.blank_lines_before_first_class_body_declaration=0
+org.eclipse.jdt.core.formatter.blank_lines_before_imports=1
+org.eclipse.jdt.core.formatter.blank_lines_before_member_type=1
+org.eclipse.jdt.core.formatter.blank_lines_before_method=1
+org.eclipse.jdt.core.formatter.blank_lines_before_new_chunk=1
+org.eclipse.jdt.core.formatter.blank_lines_before_package=0
+org.eclipse.jdt.core.formatter.blank_lines_between_import_groups=1
+org.eclipse.jdt.core.formatter.blank_lines_between_type_declarations=1
+org.eclipse.jdt.core.formatter.brace_position_for_annotation_type_declaration=next_line
+org.eclipse.jdt.core.formatter.brace_position_for_anonymous_type_declaration=next_line
+org.eclipse.jdt.core.formatter.brace_position_for_array_initializer=end_of_line
+org.eclipse.jdt.core.formatter.brace_position_for_block=next_line
+org.eclipse.jdt.core.formatter.brace_position_for_block_in_case=next_line
+org.eclipse.jdt.core.formatter.brace_position_for_constructor_declaration=next_line
+org.eclipse.jdt.core.formatter.brace_position_for_enum_constant=next_line
+org.eclipse.jdt.core.formatter.brace_position_for_enum_declaration=next_line
+org.eclipse.jdt.core.formatter.brace_position_for_lambda_body=end_of_line
+org.eclipse.jdt.core.formatter.brace_position_for_method_declaration=next_line
+org.eclipse.jdt.core.formatter.brace_position_for_switch=next_line
+org.eclipse.jdt.core.formatter.brace_position_for_type_declaration=next_line
+org.eclipse.jdt.core.formatter.comment.clear_blank_lines_in_block_comment=false
+org.eclipse.jdt.core.formatter.comment.clear_blank_lines_in_javadoc_comment=false
+org.eclipse.jdt.core.formatter.comment.format_block_comments=true
+org.eclipse.jdt.core.formatter.comment.format_header=false
+org.eclipse.jdt.core.formatter.comment.format_html=true
+org.eclipse.jdt.core.formatter.comment.format_javadoc_comments=true
+org.eclipse.jdt.core.formatter.comment.format_line_comments=true
+org.eclipse.jdt.core.formatter.comment.format_source_code=true
+org.eclipse.jdt.core.formatter.comment.indent_parameter_description=true
+org.eclipse.jdt.core.formatter.comment.indent_root_tags=true
+org.eclipse.jdt.core.formatter.comment.insert_new_line_before_root_tags=insert
+org.eclipse.jdt.core.formatter.comment.insert_new_line_for_parameter=do not insert
+org.eclipse.jdt.core.formatter.comment.line_length=100
+org.eclipse.jdt.core.formatter.comment.new_lines_at_block_boundaries=true
+org.eclipse.jdt.core.formatter.comment.new_lines_at_javadoc_boundaries=true
+org.eclipse.jdt.core.formatter.comment.preserve_white_space_between_code_and_line_comments=false
+org.eclipse.jdt.core.formatter.compact_else_if=true
+org.eclipse.jdt.core.formatter.continuation_indentation=2
+org.eclipse.jdt.core.formatter.continuation_indentation_for_array_initializer=2
+org.eclipse.jdt.core.formatter.disabling_tag=@formatter\:off
+org.eclipse.jdt.core.formatter.enabling_tag=@formatter\:on
+org.eclipse.jdt.core.formatter.format_guardian_clause_on_one_line=false
+org.eclipse.jdt.core.formatter.format_line_comment_starting_on_first_column=true
+org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_annotation_declaration_header=true
+org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_enum_constant_header=true
+org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_enum_declaration_header=true
+org.eclipse.jdt.core.formatter.indent_body_declarations_compare_to_type_header=true
+org.eclipse.jdt.core.formatter.indent_breaks_compare_to_cases=true
+org.eclipse.jdt.core.formatter.indent_empty_lines=false
+org.eclipse.jdt.core.formatter.indent_statements_compare_to_block=true
+org.eclipse.jdt.core.formatter.indent_statements_compare_to_body=true
+org.eclipse.jdt.core.formatter.indent_switchstatements_compare_to_cases=true
+org.eclipse.jdt.core.formatter.indent_switchstatements_compare_to_switch=true
+org.eclipse.jdt.core.formatter.indentation.size=8
+org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_field=insert
+org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_local_variable=insert
+org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_method=insert
+org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_package=insert
+org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_parameter=do not insert
+org.eclipse.jdt.core.formatter.insert_new_line_after_annotation_on_type=insert
+org.eclipse.jdt.core.formatter.insert_new_line_after_label=do not insert
+org.eclipse.jdt.core.formatter.insert_new_line_after_opening_brace_in_array_initializer=do not insert
+org.eclipse.jdt.core.formatter.insert_new_line_after_type_annotation=do not insert
+org.eclipse.jdt.core.formatter.insert_new_line_at_end_of_file_if_missing=do not insert
+org.eclipse.jdt.core.formatter.insert_new_line_before_catch_in_try_statement=do not insert
+org.eclipse.jdt.core.formatter.insert_new_line_before_closing_brace_in_array_initializer=do not insert
+org.eclipse.jdt.core.formatter.insert_new_line_before_else_in_if_statement=do not insert
+org.eclipse.jdt.core.formatter.insert_new_line_before_finally_in_try_statement=do not insert
+org.eclipse.jdt.core.formatter.insert_new_line_before_while_in_do_statement=do not insert
+org.eclipse.jdt.core.formatter.insert_new_line_in_empty_annotation_declaration=insert
+org.eclipse.jdt.core.formatter.insert_new_line_in_empty_anonymous_type_declaration=insert
+org.eclipse.jdt.core.formatter.insert_new_line_in_empty_block=insert
+org.eclipse.jdt.core.formatter.insert_new_line_in_empty_enum_constant=insert
+org.eclipse.jdt.core.formatter.insert_new_line_in_empty_enum_declaration=insert
+org.eclipse.jdt.core.formatter.insert_new_line_in_empty_method_body=insert
+org.eclipse.jdt.core.formatter.insert_new_line_in_empty_type_declaration=insert
+org.eclipse.jdt.core.formatter.insert_space_after_and_in_type_parameter=insert
+org.eclipse.jdt.core.formatter.insert_space_after_assignment_operator=insert
+org.eclipse.jdt.core.formatter.insert_space_after_at_in_annotation=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_at_in_annotation_type_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_binary_operator=insert
+org.eclipse.jdt.core.formatter.insert_space_after_closing_angle_bracket_in_type_arguments=insert
+org.eclipse.jdt.core.formatter.insert_space_after_closing_angle_bracket_in_type_parameters=insert
+org.eclipse.jdt.core.formatter.insert_space_after_closing_brace_in_block=insert
+org.eclipse.jdt.core.formatter.insert_space_after_closing_paren_in_cast=insert
+org.eclipse.jdt.core.formatter.insert_space_after_colon_in_assert=insert
+org.eclipse.jdt.core.formatter.insert_space_after_colon_in_case=insert
+org.eclipse.jdt.core.formatter.insert_space_after_colon_in_conditional=insert
+org.eclipse.jdt.core.formatter.insert_space_after_colon_in_for=insert
+org.eclipse.jdt.core.formatter.insert_space_after_colon_in_labeled_statement=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_allocation_expression=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_annotation=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_array_initializer=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_constructor_declaration_parameters=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_constructor_declaration_throws=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_enum_constant_arguments=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_enum_declarations=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_explicitconstructorcall_arguments=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_for_increments=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_for_inits=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_declaration_parameters=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_declaration_throws=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_method_invocation_arguments=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_multiple_field_declarations=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_multiple_local_declarations=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_parameterized_type_reference=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_superinterfaces=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_type_arguments=insert
+org.eclipse.jdt.core.formatter.insert_space_after_comma_in_type_parameters=insert
+org.eclipse.jdt.core.formatter.insert_space_after_ellipsis=insert
+org.eclipse.jdt.core.formatter.insert_space_after_lambda_arrow=insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_parameterized_type_reference=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_type_arguments=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_angle_bracket_in_type_parameters=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_brace_in_array_initializer=insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_bracket_in_array_allocation_expression=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_bracket_in_array_reference=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_annotation=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_cast=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_catch=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_constructor_declaration=insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_enum_constant=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_for=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_if=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_method_declaration=insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_method_invocation=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_parenthesized_expression=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_switch=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_synchronized=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_try=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_opening_paren_in_while=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_postfix_operator=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_prefix_operator=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_question_in_conditional=insert
+org.eclipse.jdt.core.formatter.insert_space_after_question_in_wildcard=do not insert
+org.eclipse.jdt.core.formatter.insert_space_after_semicolon_in_for=insert
+org.eclipse.jdt.core.formatter.insert_space_after_semicolon_in_try_resources=insert
+org.eclipse.jdt.core.formatter.insert_space_after_unary_operator=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_and_in_type_parameter=insert
+org.eclipse.jdt.core.formatter.insert_space_before_assignment_operator=insert
+org.eclipse.jdt.core.formatter.insert_space_before_at_in_annotation_type_declaration=insert
+org.eclipse.jdt.core.formatter.insert_space_before_binary_operator=insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_parameterized_type_reference=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_type_arguments=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_angle_bracket_in_type_parameters=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_brace_in_array_initializer=insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_bracket_in_array_allocation_expression=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_bracket_in_array_reference=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_annotation=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_cast=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_catch=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_constructor_declaration=insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_enum_constant=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_for=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_if=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_method_declaration=insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_method_invocation=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_parenthesized_expression=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_switch=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_synchronized=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_try=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_closing_paren_in_while=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_colon_in_assert=insert
+org.eclipse.jdt.core.formatter.insert_space_before_colon_in_case=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_colon_in_conditional=insert
+org.eclipse.jdt.core.formatter.insert_space_before_colon_in_default=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_colon_in_for=insert
+org.eclipse.jdt.core.formatter.insert_space_before_colon_in_labeled_statement=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_allocation_expression=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_annotation=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_array_initializer=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_constructor_declaration_parameters=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_constructor_declaration_throws=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_enum_constant_arguments=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_enum_declarations=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_explicitconstructorcall_arguments=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_for_increments=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_for_inits=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_declaration_parameters=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_declaration_throws=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_method_invocation_arguments=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_multiple_field_declarations=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_multiple_local_declarations=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_parameterized_type_reference=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_superinterfaces=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_type_arguments=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_comma_in_type_parameters=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_ellipsis=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_lambda_arrow=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_parameterized_type_reference=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_type_arguments=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_angle_bracket_in_type_parameters=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_annotation_type_declaration=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_anonymous_type_declaration=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_array_initializer=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_block=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_constructor_declaration=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_enum_constant=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_enum_declaration=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_method_declaration=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_switch=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_brace_in_type_declaration=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_allocation_expression=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_reference=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_bracket_in_array_type_reference=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_annotation=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_annotation_type_member_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_catch=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_constructor_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_enum_constant=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_for=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_if=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_method_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_method_invocation=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_parenthesized_expression=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_switch=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_synchronized=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_try=insert
+org.eclipse.jdt.core.formatter.insert_space_before_opening_paren_in_while=insert
+org.eclipse.jdt.core.formatter.insert_space_before_parenthesized_expression_in_return=insert
+org.eclipse.jdt.core.formatter.insert_space_before_parenthesized_expression_in_throw=insert
+org.eclipse.jdt.core.formatter.insert_space_before_postfix_operator=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_prefix_operator=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_question_in_conditional=insert
+org.eclipse.jdt.core.formatter.insert_space_before_question_in_wildcard=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_semicolon=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_semicolon_in_for=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_semicolon_in_try_resources=do not insert
+org.eclipse.jdt.core.formatter.insert_space_before_unary_operator=do not insert
+org.eclipse.jdt.core.formatter.insert_space_between_brackets_in_array_type_reference=do not insert
+org.eclipse.jdt.core.formatter.insert_space_between_empty_braces_in_array_initializer=do not insert
+org.eclipse.jdt.core.formatter.insert_space_between_empty_brackets_in_array_allocation_expression=do not insert
+org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_annotation_type_member_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_constructor_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_enum_constant=do not insert
+org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_method_declaration=do not insert
+org.eclipse.jdt.core.formatter.insert_space_between_empty_parens_in_method_invocation=do not insert
+org.eclipse.jdt.core.formatter.join_lines_in_comments=true
+org.eclipse.jdt.core.formatter.join_wrapped_lines=true
+org.eclipse.jdt.core.formatter.keep_else_statement_on_same_line=false
+org.eclipse.jdt.core.formatter.keep_empty_array_initializer_on_one_line=false
+org.eclipse.jdt.core.formatter.keep_imple_if_on_one_line=false
+org.eclipse.jdt.core.formatter.keep_then_statement_on_same_line=false
+org.eclipse.jdt.core.formatter.lineSplit=100
+org.eclipse.jdt.core.formatter.never_indent_block_comments_on_first_column=false
+org.eclipse.jdt.core.formatter.never_indent_line_comments_on_first_column=false
+org.eclipse.jdt.core.formatter.number_of_blank_lines_at_beginning_of_method_body=0
+org.eclipse.jdt.core.formatter.number_of_empty_lines_to_preserve=1
+org.eclipse.jdt.core.formatter.put_empty_statement_on_new_line=true
+org.eclipse.jdt.core.formatter.tabulation.char=tab
+org.eclipse.jdt.core.formatter.tabulation.size=4
+org.eclipse.jdt.core.formatter.use_on_off_tags=false
+org.eclipse.jdt.core.formatter.use_tabs_only_for_leading_indentations=true
+org.eclipse.jdt.core.formatter.wrap_before_binary_operator=true
+org.eclipse.jdt.core.formatter.wrap_before_or_operator_multicatch=true
+org.eclipse.jdt.core.formatter.wrap_outer_expressions_when_nested=true
diff --git a/core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java
index 35300fdd8c..59daa617ee 100644
--- a/core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java
@@ -206,12 +206,7 @@ public int defineWayBits(int index, int shift) {
 		acceptBit = 1L << index;
 		ferryBit = 2L << index;
 
-		//TODO handle these at the reader or manager level
-		if (null != encoderDecorators) {
-			for (EncoderDecorator decorator : encoderDecorators) {
-				shift = decorator.defineWayBits(shift);
-			}
-		}
+		
 		return shift;
 	}
 
diff --git a/core/src/main/java/com/graphhopper/routing/util/EncodingManager.java b/core/src/main/java/com/graphhopper/routing/util/EncodingManager.java
index a2a0c06fb2..97cbc3953e 100644
--- a/core/src/main/java/com/graphhopper/routing/util/EncodingManager.java
+++ b/core/src/main/java/com/graphhopper/routing/util/EncodingManager.java
@@ -41,13 +41,15 @@
 import com.graphhopper.util.Helper;
 
 /**
- * Manager class to register encoder, assign their flag values and check objects
- * with all encoders during parsing.
+ * Manager class to register encoder, assign their flag values and check objects with all encoders
+ * during parsing.
  * <p/>
+ * 
  * @author Peter Karich
  * @author Nop
  */
-public class EncodingManager {
+public class EncodingManager
+{
 	public static final String CAR = "car";
 	public static final String BIKE = "bike";
 	public static final String BIKE2 = "bike2";
@@ -73,50 +75,54 @@
 	private boolean enableInstructions = true;
 
 	/**
-     * Instantiate manager with the given list of encoders. The manager knows the default encoders:
-     * CAR, FOOT and BIKE (ignoring the case). Custom encoders can be specified by giving a full
-     * class name e.g. "car:com.graphhopper.myproject.MyCarEncoder"
+	 * Instantiate manager with the given list of encoders. The manager knows the default encoders:
+	 * CAR, FOOT and BIKE (ignoring the case). Custom encoders can be specified by giving a full
+	 * class name e.g. "car:com.graphhopper.myproject.MyCarEncoder"
 	 * <p/>
-     * @param flagEncodersStr comma delimited list of encoders. The order does not matter.
+	 * 
+	 * @param flagEncodersStr comma delimited list of encoders. The order does not matter.
 	 */
-    public EncodingManager( String flagEncodersStr )
-    {
+	public EncodingManager( String flagEncodersStr )
+	{
 		this(flagEncodersStr, 4);
 	}
 
-    public EncodingManager( String flagEncodersStr, int bytesForFlags )
-    {
+	public EncodingManager( String flagEncodersStr, int bytesForFlags )
+	{
 		this(parseEncoderString(flagEncodersStr), bytesForFlags);
 	}
 
 	/**
 	 * Instantiate manager with the given list of encoders.
 	 * <p/>
-     * @param flagEncoders comma delimited list of encoders. The order does not matter.
+	 * 
+	 * @param flagEncoders comma delimited list of encoders. The order does not matter.
 	 */
-    public EncodingManager( FlagEncoder... flagEncoders )
-    {
+	public EncodingManager( FlagEncoder... flagEncoders )
+	{
 		this(Arrays.asList(flagEncoders));
 	}
 
 	/**
 	 * Instantiate manager with the given list of encoders.
 	 * <p/>
-     * @param flagEncoders comma delimited list of encoders. The order does not matter.
+	 * 
+	 * @param flagEncoders comma delimited list of encoders. The order does not matter.
 	 */
-    public EncodingManager( List<? extends FlagEncoder> flagEncoders )
-    {
+	public EncodingManager( List<? extends FlagEncoder> flagEncoders )
+	{
 		this(flagEncoders, 4);
 	}
 
-    public EncodingManager( List<? extends FlagEncoder> flagEncoders, int bytesForEdgeFlags )
-    {
+	public EncodingManager( List<? extends FlagEncoder> flagEncoders, int bytesForEdgeFlags )
+	{
 		if (bytesForEdgeFlags != 4 && bytesForEdgeFlags != 8)
-            throw new IllegalStateException("For 'edge flags' currently only 4 or 8 bytes supported");
+			throw new IllegalStateException(
+			        "For 'edge flags' currently only 4 or 8 bytes supported");
 
 		this.bitsForEdgeFlags = bytesForEdgeFlags * 8;
-        for (FlagEncoder flagEncoder : flagEncoders)
-        {
+		for (FlagEncoder flagEncoder : flagEncoders)
+		{
 			registerEncoder((AbstractFlagEncoder) flagEncoder);
 		}
 
@@ -125,28 +131,29 @@ public EncodingManager( List<? extends FlagEncoder> flagEncoders, int bytesForEd
 		configureDecoratorSet();
 	}
 
-    public int getBytesForFlags()
-    {
+	public int getBytesForFlags()
+	{
 		return bitsForEdgeFlags / 8;
 	}
 
-    static List<FlagEncoder> parseEncoderString( String encoderList )
-    {
+	static List<FlagEncoder> parseEncoderString( String encoderList )
+	{
 		if (encoderList.contains(":"))
-            throw new IllegalArgumentException("EncodingManager does no longer use reflection instantiate encoders directly.");
+			throw new IllegalArgumentException(
+			        "EncodingManager does no longer use reflection instantiate encoders directly.");
 
 		String[] entries = encoderList.split(",");
 		List<FlagEncoder> resultEncoders = new ArrayList<FlagEncoder>();
 
-        for (String entry : entries)
-        {
+		for (String entry : entries)
+		{
 			entry = entry.trim().toLowerCase();
 			if (entry.isEmpty())
 				continue;
 
 			String entryVal = "";
-            if (entry.contains("|"))
-            {
+			if (entry.contains("|"))
+			{
 				entryVal = entry;
 				entry = entry.split("\\|")[0];
 			}
@@ -166,7 +173,7 @@ else if (entry.equals(RACINGBIKE))
 
 			else if (entry.equals(MOUNTAINBIKE))
 				fe = new MountainBikeFlagEncoder(entryVal);
-			
+
 			else if (entry.equals(OSMOUNTAINBIKE))
 				fe = new OsBikeFlagEncoder(entryVal);
 
@@ -187,7 +194,8 @@ else if (entry.equals(MOTORCYCLE))
 		return resultEncoders;
 	}
 
-	private void registerEncoder(AbstractFlagEncoder encoder) {
+	private void registerEncoder( AbstractFlagEncoder encoder )
+	{
 		int encoderCount = edgeEncoders.size();
 		int usedBits = encoder.defineNodeBits(encoderCount, nextNodeBit);
 		if (usedBits > bitsForEdgeFlags)
@@ -197,7 +205,8 @@ private void registerEncoder(AbstractFlagEncoder encoder) {
 
 		usedBits = encoder.defineWayBits(encoderCount, nextWayBit);
 		if (usedBits > bitsForEdgeFlags)
-            throw new IllegalArgumentException(String.format(ERR, bitsForEdgeFlags, "way") + WAY_ERR);
+			throw new IllegalArgumentException(String.format(ERR, bitsForEdgeFlags, "way")
+			        + WAY_ERR);
 		encoder.setWayBitMask(usedBits - nextWayBit, nextWayBit);
 		nextWayBit = usedBits;
 
@@ -219,47 +228,48 @@ private void registerEncoder(AbstractFlagEncoder encoder) {
 	/**
 	 * @return true if the specified encoder is found
 	 */
-    public boolean supports( String encoder )
-    {
+	public boolean supports( String encoder )
+	{
 		return getEncoder(encoder, false) != null;
 	}
 
-    public FlagEncoder getEncoder( String name )
-    {
+	public FlagEncoder getEncoder( String name )
+	{
 		return getEncoder(name, true);
 	}
 
-    private FlagEncoder getEncoder( String name, boolean throwExc )
-    {
-        for (AbstractFlagEncoder encoder : edgeEncoders)
-        {
+	private FlagEncoder getEncoder( String name, boolean throwExc )
+	{
+		for (AbstractFlagEncoder encoder : edgeEncoders)
+		{
 			if (name.equalsIgnoreCase(encoder.toString()))
 				return encoder;
 		}
 		if (throwExc)
-            throw new IllegalArgumentException("Encoder for " + name + " not found. Existing: " + toDetailsString());
+			throw new IllegalArgumentException("Encoder for " + name + " not found. Existing: "
+			        + toDetailsString());
 		return null;
 	}
 
 	/**
 	 * Determine whether an osm way is a routable way for one of its encoders.
 	 */
-    public long acceptWay( Way way )
-    {
+	public long acceptWay( Way way )
+	{
 		long includeWay = 0;
-        for (AbstractFlagEncoder encoder : edgeEncoders)
-        {
+		for (AbstractFlagEncoder encoder : edgeEncoders)
+		{
 			includeWay |= encoder.acceptWay(way);
 		}
 
 		return includeWay;
 	}
 
-    public long handleRelationTags( Relation relation, long oldRelationFlags )
-    {
+	public long handleRelationTags( Relation relation, long oldRelationFlags )
+	{
 		long flags = 0;
-        for (AbstractFlagEncoder encoder : edgeEncoders)
-        {
+		for (AbstractFlagEncoder encoder : edgeEncoders)
+		{
 			flags |= encoder.handleRelationTags(relation, oldRelationFlags);
 		}
 
@@ -267,32 +277,35 @@ public long handleRelationTags( Relation relation, long oldRelationFlags )
 	}
 
 	/**
-     * Processes way properties of different kind to determine speed and direction. Properties are
-     * directly encoded in 8 bytes.
+	 * Processes way properties of different kind to determine speed and direction. Properties are
+	 * directly encoded in 8 bytes.
 	 * <p/>
-     * @param relationFlags The preprocessed relation flags is used to influence the way properties.
+	 * 
+	 * @param relationFlags The preprocessed relation flags is used to influence the way properties.
 	 * @return the encoded flags
 	 */
-    public long handleWayTags( Way way, long includeWay, long relationFlags )
-    {
+	public long handleWayTags( Way way, long includeWay, long relationFlags )
+	{
 		long flags = 0;
-        for (AbstractFlagEncoder encoder : edgeEncoders)
-        {
-            flags |= encoder.handleWayTags(way, includeWay, relationFlags & encoder.getRelBitMask());
+		for (AbstractFlagEncoder encoder : edgeEncoders)
+		{
+			flags |= encoder
+			        .handleWayTags(way, includeWay, relationFlags & encoder.getRelBitMask());
 		}
 
-		for (EncoderDecorator encoderDecorator : decorators) {
+		for (EncoderDecorator encoderDecorator : decorators)
+		{
 			encoderDecorator.handleWayTags(way);
 		}
 		return flags;
 	}
 
 	@Override
-    public String toString()
-    {
+	public String toString()
+	{
 		StringBuilder str = new StringBuilder();
-        for (AbstractFlagEncoder encoder : edgeEncoders)
-        {
+		for (AbstractFlagEncoder encoder : edgeEncoders)
+		{
 			if (str.length() > 0)
 				str.append(",");
 
@@ -302,11 +315,11 @@ public String toString()
 		return str.toString();
 	}
 
-    public String toDetailsString()
-    {
+	public String toDetailsString()
+	{
 		StringBuilder str = new StringBuilder();
-        for (AbstractFlagEncoder encoder : edgeEncoders)
-        {
+		for (AbstractFlagEncoder encoder : edgeEncoders)
+		{
 			if (str.length() > 0)
 				str.append(",");
 
@@ -318,11 +331,11 @@ public String toDetailsString()
 		return str.toString();
 	}
 
-    public long flagsDefault( boolean forward, boolean backward )
-    {
+	public long flagsDefault( boolean forward, boolean backward )
+	{
 		long flags = 0;
-        for (AbstractFlagEncoder encoder : edgeEncoders)
-        {
+		for (AbstractFlagEncoder encoder : edgeEncoders)
+		{
 			flags |= encoder.flagsDefault(forward, backward);
 		}
 		return flags;
@@ -331,28 +344,28 @@ public long flagsDefault( boolean forward, boolean backward )
 	/**
 	 * Reverse flags, to do so all encoders are called.
 	 */
-    public long reverseFlags( long flags )
-    {
+	public long reverseFlags( long flags )
+	{
 		// performance critical
 		int len = edgeEncoders.size();
-        for (int i = 0; i < len; i++)
-        {
+		for (int i = 0; i < len; i++)
+		{
 			flags = edgeEncoders.get(i).reverseFlags(flags);
 		}
 		return flags;
 	}
 
 	@Override
-    public int hashCode()
-    {
+	public int hashCode()
+	{
 		int hash = 5;
 		hash = 53 * hash + (this.edgeEncoders != null ? this.edgeEncoders.hashCode() : 0);
 		return hash;
 	}
 
 	@Override
-    public boolean equals( Object obj )
-    {
+	public boolean equals( Object obj )
+	{
 		if (obj == null)
 			return false;
 
@@ -360,58 +373,60 @@ public boolean equals( Object obj )
 			return false;
 
 		final EncodingManager other = (EncodingManager) obj;
-        if (this.edgeEncoders != other.edgeEncoders && (this.edgeEncoders == null || !this.edgeEncoders.equals(other.edgeEncoders)))
-        {
+		if (this.edgeEncoders != other.edgeEncoders
+		        && (this.edgeEncoders == null || !this.edgeEncoders.equals(other.edgeEncoders)))
+		{
 			return false;
 		}
 		return true;
 	}
 
 	/**
-     * Analyze tags on osm node. Store node tags (barriers etc) for later usage while parsing way.
+	 * Analyze tags on osm node. Store node tags (barriers etc) for later usage while parsing way.
 	 */
-    public long handleNodeTags( Node node )
-    {
+	public long handleNodeTags( Node node )
+	{
 		long flags = 0;
-        for (AbstractFlagEncoder encoder : edgeEncoders)
-        {
+		for (AbstractFlagEncoder encoder : edgeEncoders)
+		{
 			flags |= encoder.handleNodeTags(node);
 		}
 
 		return flags;
 	}
 
-    private static int determineRequiredBits( int value )
-    {
+	private static int determineRequiredBits( int value )
+	{
 		int numberOfBits = 0;
-        while (value > 0)
-        {
+		while (value > 0)
+		{
 			value = value >> 1;
 			numberOfBits++;
 		}
 		return numberOfBits;
 	}
 
-    public Collection<ITurnCostTableEntry> analyzeTurnRelation( TurnRelation turnRelation, DataReader osmReader )
-    {
+	public Collection<ITurnCostTableEntry> analyzeTurnRelation( TurnRelation turnRelation,
+	        DataReader osmReader )
+	{
 		TLongObjectMap<ITurnCostTableEntry> entries = new TLongObjectHashMap<ITurnCostTableEntry>();
 
 		int encoderCount = edgeEncoders.size();
-        for (int i = 0; i < encoderCount; i++)
-        {
+		for (int i = 0; i < encoderCount; i++)
+		{
 			AbstractFlagEncoder encoder = edgeEncoders.get(i);
-            for (ITurnCostTableEntry entry : encoder.analyzeTurnRelation(turnRelation, osmReader))
-            {
+			for (ITurnCostTableEntry entry : encoder.analyzeTurnRelation(turnRelation, osmReader))
+			{
 				ITurnCostTableEntry oldEntry = entries.get(entry.getItemId());
-                if (oldEntry != null)
-                {
+				if (oldEntry != null)
+				{
 					// merging different encoders
 					long oldFlags = oldEntry.getFlags();
 					long flags = entry.getFlags();
 					oldFlags |= flags;
 					oldEntry.setFlags(oldFlags);
-                } else
-                {
+				} else
+				{
 					entries.put(entry.getItemId(), entry);
 				}
 			}
@@ -420,24 +435,25 @@ private static int determineRequiredBits( int value )
 		return entries.valueCollection();
 	}
 
-    public EncodingManager setEnableInstructions( boolean enableInstructions )
-    {
+	public EncodingManager setEnableInstructions( boolean enableInstructions )
+	{
 		this.enableInstructions = enableInstructions;
 		return this;
 	}
 
-    public void applyWayTags( Way way, EdgeIteratorState edge )
-    {
-        // storing the road name does not yet depend on the flagEncoder so manage it directly
-        if (enableInstructions)
-        {
+	public void applyWayTags( Way way, EdgeIteratorState edge )
+	{
+		// storing the road name does not yet depend on the flagEncoder so
+		// manage it directly
+		if (enableInstructions)
+		{
 			// String wayInfo = carFlagEncoder.getWayInfo(way);
 			// http://wiki.openstreetmap.org/wiki/Key:name
 			String name = fixWayName(way.getTag("name"));
 			// http://wiki.openstreetmap.org/wiki/Key:ref
 			String refName = fixWayName(way.getTag("ref"));
-            if (!Helper.isEmpty(refName))
-            {
+			if (!Helper.isEmpty(refName))
+			{
 				if (Helper.isEmpty(name))
 					name = refName;
 				else
@@ -447,8 +463,8 @@ public void applyWayTags( Way way, EdgeIteratorState edge )
 			edge.setName(name);
 		}
 
-        for (AbstractFlagEncoder encoder : edgeEncoders)
-        {
+		for (AbstractFlagEncoder encoder : edgeEncoders)
+		{
 			encoder.applyWayTags(way, edge);
 		}
 	}
@@ -456,53 +472,65 @@ public void applyWayTags( Way way, EdgeIteratorState edge )
 	/**
 	 * Each encoder decorator should be used only once and in a defined order
 	 */
-	private void configureDecoratorSet() {
+	private void configureDecoratorSet()
+	{
 		Map<Class, EncoderDecorator> decoratorMap = new HashMap<Class, EncoderDecorator>();
-		for (AbstractFlagEncoder encoder : edgeEncoders) {
+		for (AbstractFlagEncoder encoder : edgeEncoders)
+		{
 			List<EncoderDecorator> decoratorList = encoder.getEncoderDecorators();
-			if (null != decoratorList) {
-				for (EncoderDecorator encoderDecorator : decoratorList) {
+			if (null != decoratorList)
+			{
+				for (EncoderDecorator encoderDecorator : decoratorList)
+				{
 					decoratorMap.put(encoderDecorator.getClass(), encoderDecorator);
 				}
 			}
 		}
 		decorators = new ArrayList<EncoderDecorator>();
 		decorators.addAll(decoratorMap.values());
+		int shift = 0;
+		for (EncoderDecorator decorator : decorators)
+		{
+			shift = decorator.defineWayBits(shift);
+		}
 	}
 
-	public List<EncoderDecorator> getDecorators() {
+	public List<EncoderDecorator> getDecorators()
+	{
 		return decorators;
 	}
 
 	/**
 	 * The returned list is never empty.
 	 */
-    public List<FlagEncoder> fetchEdgeEncoders()
-    {
+	public List<FlagEncoder> fetchEdgeEncoders()
+	{
 		List<FlagEncoder> list = new ArrayList<FlagEncoder>();
 		list.addAll(edgeEncoders);
 		return list;
 	}
 
-    static String fixWayName( String str )
-    {
+	static String fixWayName( String str )
+	{
 		if (str == null)
 			return "";
 		return str.replaceAll(";[ ]*", ", ");
 	}
 
-    public boolean needsTurnCostsSupport()
-    {
-        for (FlagEncoder encoder : edgeEncoders)
-        {
+	public boolean needsTurnCostsSupport()
+	{
+		for (FlagEncoder encoder : edgeEncoders)
+		{
 			if (encoder.supports(TurnWeighting.class))
 				return true;
 		}
 		return false;
 	}
 
-	public boolean needsAttributeStorageSupport() {
-		for (FlagEncoder encoder : edgeEncoders) {
+	public boolean needsAttributeStorageSupport()
+	{
+		for (FlagEncoder encoder : edgeEncoders)
+		{
 			if (encoder.supports(PriorityWithAvoidancesWeighting.class))
 				return true;
 		}
@@ -510,24 +538,26 @@ public boolean needsAttributeStorageSupport() {
 	}
 
 	/**
-     * Create the EncodingManager from the provided GraphHopper location. Throws an
-     * IllegalStateException if it fails.
+	 * Create the EncodingManager from the provided GraphHopper location. Throws an
+	 * IllegalStateException if it fails.
 	 */
-    public static EncodingManager create( String ghLoc )
-    {
+	public static EncodingManager create( String ghLoc )
+	{
 		Directory dir = new RAMDirectory(ghLoc, true);
 		StorableProperties properties = new StorableProperties(dir);
 		if (!properties.loadExisting())
-            throw new IllegalStateException("Cannot load properties to fetch EncodingManager configuration at: "
-							+ dir.getLocation());
+			throw new IllegalStateException(
+			        "Cannot load properties to fetch EncodingManager configuration at: "
+			                + dir.getLocation());
 
 		// check encoding for compatiblity
 		properties.checkVersions(false);
 		String acceptStr = properties.get("graph.flagEncoders");
 
 		if (acceptStr.isEmpty())
-            throw new IllegalStateException("EncodingManager was not configured. And no one was found in the graph: "
-							+ dir.getLocation());
+			throw new IllegalStateException(
+			        "EncodingManager was not configured. And no one was found in the graph: "
+			                + dir.getLocation());
 
 		int bytesForFlags = 4;
 		if ("8".equals(properties.get("graph.bytesForFlags")))
@@ -535,18 +565,20 @@ public static EncodingManager create( String ghLoc )
 		return new EncodingManager(acceptStr, bytesForFlags);
 	}
 
-	public boolean isVehicleQualifierTypeIncluded(RoutingElement routingElement) {
-        for (AbstractFlagEncoder encoder : edgeEncoders)
-        {
+	public boolean isVehicleQualifierTypeIncluded( RoutingElement routingElement )
+	{
+		for (AbstractFlagEncoder encoder : edgeEncoders)
+		{
 			if (encoder.isVehicleQualifierTypeIncluded(routingElement))
 				return true;
 		}
 		return false;
 	}
 
-	public boolean isVehicleQualifierTypeExcluded(RoutingElement routingElement) {
-        for (AbstractFlagEncoder encoder : edgeEncoders)
-        {
+	public boolean isVehicleQualifierTypeExcluded( RoutingElement routingElement )
+	{
+		for (AbstractFlagEncoder encoder : edgeEncoders)
+		{
 			if (encoder.isVehicleQualifierTypeExcluded(routingElement))
 				return true;
 		}
