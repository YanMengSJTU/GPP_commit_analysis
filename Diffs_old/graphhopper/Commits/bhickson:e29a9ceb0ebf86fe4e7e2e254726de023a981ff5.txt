diff --git a/core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java
index e1afaf9f98..beecabe87e 100644
--- a/core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/AbstractFlagEncoder.java
@@ -72,7 +72,8 @@
     private long relBitMask;
     private EncodedValueOld turnCostEncoder;
     private long turnRestrictionBit;
-    private boolean blockByDefault = true;
+    //private boolean blockByDefault = true;
+    private boolean blockByDefault = false;
     private boolean blockFords = true;
     private boolean registered;
     protected EncodedValueLookup encodedValueLookup;
diff --git a/core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
index 5914f8ef42..19e60a8420 100644
--- a/core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/CarFlagEncoder.java
@@ -87,7 +87,7 @@ public CarFlagEncoder(int speedBits, double speedFactor, int maxTurnCosts) {
         potentialBarriers.add("lift_gate");
         potentialBarriers.add("kissing_gate");
         potentialBarriers.add("swing_gate");
-        potentialBarriers.add("cattle_grid");
+        //potentialBarriers.add("cattle_grid");
 
         absoluteBarriers.add("fence");
         absoluteBarriers.add("bollard");
diff --git a/core/src/test/java/com/graphhopper/routing/util/CarFlagEncoderTest.java b/core/src/test/java/com/graphhopper/routing/util/CarFlagEncoderTest.java
index 9ae14c7d86..8ff542cdd8 100644
--- a/core/src/test/java/com/graphhopper/routing/util/CarFlagEncoderTest.java
+++ b/core/src/test/java/com/graphhopper/routing/util/CarFlagEncoderTest.java
@@ -514,6 +514,8 @@ public void testBarrierAccess() {
         // Test if cattle_grid is not blocking
         node = new ReaderNode(1, -1, -1);
         node.setTag("barrier", "cattle_grid");
+	node.setTag("access", "yes");
+	node.setTag("motorcar", "yes");
         assertTrue(encoder.handleNodeTags(node) == 0);
     }
 
