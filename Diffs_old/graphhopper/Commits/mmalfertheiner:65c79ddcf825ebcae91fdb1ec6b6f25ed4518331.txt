diff --git a/core/src/main/java/com/graphhopper/GraphHopper.java b/core/src/main/java/com/graphhopper/GraphHopper.java
index 96f6bf8fa0..4aafec5530 100644
--- a/core/src/main/java/com/graphhopper/GraphHopper.java
+++ b/core/src/main/java/com/graphhopper/GraphHopper.java
@@ -1182,14 +1182,11 @@ protected void prepare()
                     throw new IllegalStateException("RoutingAlgorithmFactory is not suited for CH preparation " + entry.getValue());
 
                 final String name = CHGraphImpl.weightingToFileName(entry.getKey());
-                chPreparePool.execute(new Runnable()
-                {
+                chPreparePool.execute(new Runnable() {
                     @Override
-                    public void run()
-                    {
+                    public void run() {
                         String errorKey = "prepare.error." + name;
-                        try
-                        {
+                        try {
                             ghStorage.getProperties().put(errorKey, "CH preparation incomplete");
                             // toString is not taken into account so we need to cheat, see http://stackoverflow.com/q/6113746/194609 for other options                        
                             Thread.currentThread().setName(name);
@@ -1197,8 +1194,7 @@ public void run()
                             pch.doWork();
                             ghStorage.getProperties().put(errorKey, "");
                             ghStorage.getProperties().put("prepare.date." + name, formatDateTime(new Date()));
-                        } catch (Exception ex)
-                        {
+                        } catch (Exception ex) {
                             logger.error("Problem while CH preparation " + name);
                             ghStorage.getProperties().put(errorKey, ex.getMessage());
                         }
diff --git a/core/src/main/java/com/graphhopper/routing/Path.java b/core/src/main/java/com/graphhopper/routing/Path.java
index a01fe3db18..6460803985 100644
--- a/core/src/main/java/com/graphhopper/routing/Path.java
+++ b/core/src/main/java/com/graphhopper/routing/Path.java
@@ -229,6 +229,7 @@ protected void processEdge( int edgeId, int adjNode )
         double dist = iter.getDistance();
         distance += dist;
         time += calcMillis(dist, iter.getFlags(), false);
+        System.out.println(time);
         addEdge(edgeId);
     }
 
@@ -243,9 +244,9 @@ protected long calcMillis( double distance, long flags, boolean revert )
             throw new IllegalStateException("Calculating time should not require to read speed from edge in wrong direction. "
                     + "Reverse:" + revert + ", fwd:" + encoder.isForward(flags) + ", bwd:" + encoder.isBackward(flags));
 
-        System.out.println(revert);
 
         double speed = revert ? encoder.getReverseSpeed(flags) : encoder.getSpeed(flags);
+
         if (Double.isInfinite(speed) || Double.isNaN(speed) || speed < 0)
             throw new IllegalStateException("Invalid speed stored in edge! " + speed);
 
diff --git a/core/src/main/java/com/graphhopper/routing/util/BikeGenericFlagEncoder.java b/core/src/main/java/com/graphhopper/routing/util/BikeGenericFlagEncoder.java
index c9d1c714e8..0e8bacdc87 100644
--- a/core/src/main/java/com/graphhopper/routing/util/BikeGenericFlagEncoder.java
+++ b/core/src/main/java/com/graphhopper/routing/util/BikeGenericFlagEncoder.java
@@ -266,6 +266,20 @@ public int defineRelationBits( int index, int shift )
         return shift + relationCodeEncoder.getBits();
     }
 
+    @Override
+    public long reverseFlags( long flags )
+    {
+        // swap access
+        flags = super.reverseFlags(flags);
+
+        // swap slopes
+        double incValue = inclineSlopeEncoder.getDoubleValue(flags);
+        flags = inclineSlopeEncoder.setDoubleValue(flags, declineSlopeEncoder.getDoubleValue(flags));
+        double inclineDistPercentage = 100 - inclineDistancePercentageEncoder.getDoubleValue(flags);
+        flags = inclineDistancePercentageEncoder.setDoubleValue(flags, inclineDistPercentage);
+        return declineSlopeEncoder.setDoubleValue(flags, incValue);
+    }
+
     @Override
     public long acceptWay( OSMWay way )
     {
diff --git a/core/src/main/java/com/graphhopper/routing/util/DynamicWeighting.java b/core/src/main/java/com/graphhopper/routing/util/DynamicWeighting.java
index c40ab54386..ba4a2cd999 100644
--- a/core/src/main/java/com/graphhopper/routing/util/DynamicWeighting.java
+++ b/core/src/main/java/com/graphhopper/routing/util/DynamicWeighting.java
@@ -110,7 +110,7 @@ private double adjustSpeed(double speed, EdgeIteratorState edgeState, boolean re
             adjustedSpeed = keepIn(speed * (fwdSlower * decDist2DSum + fwdFaster * incDist2DSum) / edgeState.getDistance(), BikeGenericFlagEncoder.PUSHING_SECTION_SPEED / 2, 50);
         }
 
-        System.out.println("NEW SPEED: " + Helper.round2(adjustedSpeed) + ", SPEED: " + speed + ", INC ELE: " + incElevation + ", DEC ELE: " + decElevation + ", PERCENTAGE: " + incDistPercentage);
+        //System.out.println("NEW SPEED: " + Helper.round2(adjustedSpeed) + ", SPEED: " + speed + ", INC ELE: " + incElevation + ", DEC ELE: " + decElevation + ", PERCENTAGE: " + incDistPercentage);
 
         return adjustedSpeed;
     }
diff --git a/core/src/main/java/com/graphhopper/routing/util/FastestWeighting.java b/core/src/main/java/com/graphhopper/routing/util/FastestWeighting.java
index 1bb441021a..d14b57180d 100644
--- a/core/src/main/java/com/graphhopper/routing/util/FastestWeighting.java
+++ b/core/src/main/java/com/graphhopper/routing/util/FastestWeighting.java
@@ -63,6 +63,8 @@ public double getMinWeight( double distance )
     @Override
     public double calcWeight( EdgeIteratorState edge, boolean reverse, int prevOrNextEdgeId )
     {
+        System.out.println(reverse);
+
         double speed = reverse ? flagEncoder.getReverseSpeed(edge.getFlags()) : flagEncoder.getSpeed(edge.getFlags());
         if (speed == 0)
             return Double.POSITIVE_INFINITY;
