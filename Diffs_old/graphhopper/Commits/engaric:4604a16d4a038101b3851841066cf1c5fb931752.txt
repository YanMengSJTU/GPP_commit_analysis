diff --git a/acceptancetesting/src/test/cucumber/Routing-Errors.feature b/acceptancetesting/src/test/cucumber/Routing-Errors.feature
index a3fabcd426..099961ec8e 100644
--- a/acceptancetesting/src/test/cucumber/Routing-Errors.feature
+++ b/acceptancetesting/src/test/cucumber/Routing-Errors.feature
@@ -1,4 +1,4 @@
-ssFeature: Verify Error Messages from a routing service
+Feature: Verify Error Messages from a routing service
    As a user
    I want to get a valid Error message and status code for a invalid route request
 
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/AbstractOsToOsmAttibuteMappingVisitor.java b/core/src/main/java/com/graphhopper/reader/osgb/AbstractOsToOsmAttibuteMappingVisitor.java
index 9898f6c865..4de6ac732a 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/AbstractOsToOsmAttibuteMappingVisitor.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/AbstractOsToOsmAttibuteMappingVisitor.java
@@ -1,5 +1,6 @@
 package com.graphhopper.reader.osgb;
 
+import com.graphhopper.reader.RoutingElement;
 import com.graphhopper.reader.Way;
 import com.graphhopper.routing.util.OsFlagUtils;
 
@@ -18,9 +19,9 @@ public boolean visitWayAttribute(String attributeValue, Way way) {
         return false;
     }
 
-    protected abstract void applyAttributes(Way way);
+    public abstract void applyAttributes(RoutingElement way);
 
-    protected void setOrAppendTag(Way way, String key, String value) {
-        OsFlagUtils.setOrAppendTag(way, key, value);
+    protected void setOrAppendTag(RoutingElement routingElement, String key, String value) {
+        OsFlagUtils.setOrAppendTag(routingElement, key, value);
     }
 }
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/additionalrights/AdoptedByNationalCycleRoute.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/additionalrights/AdoptedByNationalCycleRoute.java
index 7dd5db433c..03e971d885 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/additionalrights/AdoptedByNationalCycleRoute.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/additionalrights/AdoptedByNationalCycleRoute.java
@@ -1,6 +1,6 @@
 package com.graphhopper.reader.osgb.dpn.additionalrights;
 
-import com.graphhopper.reader.Way;
+import com.graphhopper.reader.RoutingElement;
 import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
 
 /**
@@ -14,7 +14,7 @@
 public class AdoptedByNationalCycleRoute extends AbstractOsToOsmAttibuteMappingVisitor {
 
     @Override
-    protected void applyAttributes(Way way) {
+    public void applyAttributes(RoutingElement way) {
         // Assign value to use for priority
         way.setTag("network", "ncn");
 
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/additionalrights/AdoptedByOtherCycleRoute.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/additionalrights/AdoptedByOtherCycleRoute.java
index a937f1a2b6..809dd5f39a 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/additionalrights/AdoptedByOtherCycleRoute.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/additionalrights/AdoptedByOtherCycleRoute.java
@@ -1,6 +1,6 @@
 package com.graphhopper.reader.osgb.dpn.additionalrights;
 
-import com.graphhopper.reader.Way;
+import com.graphhopper.reader.RoutingElement;
 import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
 
 /**
@@ -16,7 +16,7 @@
 public class AdoptedByOtherCycleRoute extends AbstractOsToOsmAttibuteMappingVisitor {
 
     @Override
-    protected void applyAttributes(Way way) {
+    public void applyAttributes(RoutingElement way) {
         // Assign value to use for priority. Could be local or regional but we
         // are chosing local cycle network
         way.setTag("network", "lcn");
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/additionalrights/AdoptedByRecreationalRoute.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/additionalrights/AdoptedByRecreationalRoute.java
index 42a288719f..093148c884 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/additionalrights/AdoptedByRecreationalRoute.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/additionalrights/AdoptedByRecreationalRoute.java
@@ -1,6 +1,6 @@
 package com.graphhopper.reader.osgb.dpn.additionalrights;
 
-import com.graphhopper.reader.Way;
+import com.graphhopper.reader.RoutingElement;
 import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
 
 /**
@@ -15,7 +15,7 @@
 public class AdoptedByRecreationalRoute extends AbstractOsToOsmAttibuteMappingVisitor {
 
     @Override
-    protected void applyAttributes(Way way) {
+    public void applyAttributes(RoutingElement way) {
         // Assign value to use for priority
         way.setTag("network", "lwn");
         way.setTag("foot", "yes");
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/additionalrights/WithinAccessLand.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/additionalrights/WithinAccessLand.java
index d3558cddca..1283db34e3 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/additionalrights/WithinAccessLand.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/additionalrights/WithinAccessLand.java
@@ -1,6 +1,6 @@
 package com.graphhopper.reader.osgb.dpn.additionalrights;
 
-import com.graphhopper.reader.Way;
+import com.graphhopper.reader.RoutingElement;
 import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
 
 /**
@@ -17,7 +17,7 @@
 public class WithinAccessLand extends AbstractOsToOsmAttibuteMappingVisitor {
 
     @Override
-    protected void applyAttributes(Way way) {
+    public void applyAttributes(RoutingElement way) {
         way.setTag("foot", "yes");
     }
 
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/Boulders.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/Boulders.java
index 1eaf91c5e7..09f13669de 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/Boulders.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/Boulders.java
@@ -1,6 +1,6 @@
 package com.graphhopper.reader.osgb.dpn.potentialhazards;
 
-import com.graphhopper.reader.Way;
+import com.graphhopper.reader.RoutingElement;
 import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
 
 /**
@@ -9,7 +9,7 @@
 public class Boulders extends AbstractOsToOsmAttibuteMappingVisitor {
 
     @Override
-    protected void applyAttributes(Way way) {
+    public void applyAttributes(RoutingElement way) {
         setOrAppendTag(way, "natural", "boulders");
     }
 
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/Cliff.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/Cliff.java
index d47e08fa52..3909137326 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/Cliff.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/Cliff.java
@@ -1,6 +1,6 @@
 package com.graphhopper.reader.osgb.dpn.potentialhazards;
 
-import com.graphhopper.reader.Way;
+import com.graphhopper.reader.RoutingElement;
 import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
 
 /**
@@ -9,7 +9,7 @@
 public class Cliff extends AbstractOsToOsmAttibuteMappingVisitor {
 
     @Override
-    protected void applyAttributes(Way way) {
+    public void applyAttributes(RoutingElement way) {
         setOrAppendTag(way, "natural", "cliff");
     }
 
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/Foreshore.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/Foreshore.java
index 3919e45a0c..78792dbd48 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/Foreshore.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/Foreshore.java
@@ -1,6 +1,6 @@
 package com.graphhopper.reader.osgb.dpn.potentialhazards;
 
-import com.graphhopper.reader.Way;
+import com.graphhopper.reader.RoutingElement;
 import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
 
 /**
@@ -9,7 +9,7 @@
 public class Foreshore extends AbstractOsToOsmAttibuteMappingVisitor {
 
     @Override
-    protected void applyAttributes(Way way) {
+    public void applyAttributes(RoutingElement way) {
         setOrAppendTag(way, "water", "tidal");
     }
 
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/InlandWater.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/InlandWater.java
index 80d7415f09..cac453dd50 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/InlandWater.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/InlandWater.java
@@ -1,6 +1,6 @@
 package com.graphhopper.reader.osgb.dpn.potentialhazards;
 
-import com.graphhopper.reader.Way;
+import com.graphhopper.reader.RoutingElement;
 import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
 
 /**
@@ -9,7 +9,7 @@
 public class InlandWater extends AbstractOsToOsmAttibuteMappingVisitor {
 
     @Override
-    protected void applyAttributes(Way way) {
+    public void applyAttributes(RoutingElement way) {
         setOrAppendTag(way, "natural", "water");
         setOrAppendTag(way, "tidal", "no");
     }
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/Marsh.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/Marsh.java
index 15e0cd6dc6..7231761749 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/Marsh.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/Marsh.java
@@ -1,6 +1,6 @@
 package com.graphhopper.reader.osgb.dpn.potentialhazards;
 
-import com.graphhopper.reader.Way;
+import com.graphhopper.reader.RoutingElement;
 import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
 
 /**
@@ -9,7 +9,7 @@
 public class Marsh extends AbstractOsToOsmAttibuteMappingVisitor {
 
     @Override
-    protected void applyAttributes(Way way) {
+    public void applyAttributes(RoutingElement way) {
         setOrAppendTag(way, "wetland", "marsh");
     }
 
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/Mud.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/Mud.java
index b4551b836c..62441439d9 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/Mud.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/Mud.java
@@ -1,6 +1,6 @@
 package com.graphhopper.reader.osgb.dpn.potentialhazards;
 
-import com.graphhopper.reader.Way;
+import com.graphhopper.reader.RoutingElement;
 import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
 
 /**
@@ -9,7 +9,7 @@
 public class Mud extends AbstractOsToOsmAttibuteMappingVisitor {
 
     @Override
-    protected void applyAttributes(Way way) {
+    public void applyAttributes(RoutingElement way) {
         setOrAppendTag(way, "natural", "mud");
     }
 
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/QuarryOrPit.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/QuarryOrPit.java
index 3e6777ad3e..0aad97f204 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/QuarryOrPit.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/QuarryOrPit.java
@@ -1,6 +1,6 @@
 package com.graphhopper.reader.osgb.dpn.potentialhazards;
 
-import com.graphhopper.reader.Way;
+import com.graphhopper.reader.RoutingElement;
 import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
 
 /**
@@ -9,7 +9,7 @@
 public class QuarryOrPit extends AbstractOsToOsmAttibuteMappingVisitor {
 
     @Override
-    protected void applyAttributes(Way way) {
+    public void applyAttributes(RoutingElement way) {
         setOrAppendTag(way, "natural", "excavation");
     }
 
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/Rock.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/Rock.java
index 067236682e..f8284a26f1 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/Rock.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/Rock.java
@@ -1,6 +1,6 @@
 package com.graphhopper.reader.osgb.dpn.potentialhazards;
 
-import com.graphhopper.reader.Way;
+import com.graphhopper.reader.RoutingElement;
 import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
 
 /**
@@ -9,7 +9,7 @@
 public class Rock extends AbstractOsToOsmAttibuteMappingVisitor {
 
     @Override
-    protected void applyAttributes(Way way) {
+    public void applyAttributes(RoutingElement way) {
         setOrAppendTag(way, "natural", "rocks");
     }
 
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/Sand.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/Sand.java
index beb7493673..93838410e4 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/Sand.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/Sand.java
@@ -1,6 +1,6 @@
 package com.graphhopper.reader.osgb.dpn.potentialhazards;
 
-import com.graphhopper.reader.Way;
+import com.graphhopper.reader.RoutingElement;
 import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
 
 /**
@@ -9,7 +9,7 @@
 public class Sand extends AbstractOsToOsmAttibuteMappingVisitor {
 
     @Override
-    protected void applyAttributes(Way way) {
+    public void applyAttributes(RoutingElement way) {
         setOrAppendTag(way, "natural", "sand");
     }
 
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/Scree.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/Scree.java
index 3eaff6c16d..65e8d4dcc5 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/Scree.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/Scree.java
@@ -1,6 +1,6 @@
 package com.graphhopper.reader.osgb.dpn.potentialhazards;
 
-import com.graphhopper.reader.Way;
+import com.graphhopper.reader.RoutingElement;
 import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
 
 /**
@@ -9,7 +9,7 @@
 public class Scree extends AbstractOsToOsmAttibuteMappingVisitor {
 
     @Override
-    protected void applyAttributes(Way way) {
+    public void applyAttributes(RoutingElement way) {
         setOrAppendTag(way, "natural", "scree");
     }
 
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/Shingle.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/Shingle.java
index 158ea8c483..68d3eb657c 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/Shingle.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/Shingle.java
@@ -1,6 +1,6 @@
 package com.graphhopper.reader.osgb.dpn.potentialhazards;
 
-import com.graphhopper.reader.Way;
+import com.graphhopper.reader.RoutingElement;
 import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
 
 /**
@@ -9,7 +9,7 @@
 public class Shingle extends AbstractOsToOsmAttibuteMappingVisitor {
 
     @Override
-    protected void applyAttributes(Way way) {
+    public void applyAttributes(RoutingElement way) {
         setOrAppendTag(way, "natural", "shingle");
     }
 
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/Spoil.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/Spoil.java
index 91d3a0ddf9..4f0c2c0594 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/Spoil.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/Spoil.java
@@ -1,6 +1,6 @@
 package com.graphhopper.reader.osgb.dpn.potentialhazards;
 
-import com.graphhopper.reader.Way;
+import com.graphhopper.reader.RoutingElement;
 import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
 
 /**
@@ -9,7 +9,7 @@
 public class Spoil extends AbstractOsToOsmAttibuteMappingVisitor {
 
     @Override
-    protected void applyAttributes(Way way) {
+    public void applyAttributes(RoutingElement way) {
         setOrAppendTag(way, "man_made", "spoil_heap");
     }
 
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/TidalWater.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/TidalWater.java
index 370466594a..63cd796e46 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/TidalWater.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/potentialhazards/TidalWater.java
@@ -1,6 +1,6 @@
 package com.graphhopper.reader.osgb.dpn.potentialhazards;
 
-import com.graphhopper.reader.Way;
+import com.graphhopper.reader.RoutingElement;
 import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
 
 /**
@@ -9,7 +9,7 @@
 public class TidalWater extends AbstractOsToOsmAttibuteMappingVisitor {
 
     @Override
-    protected void applyAttributes(Way way) {
+    public void applyAttributes(RoutingElement way) {
         setOrAppendTag(way, "natural", "water");
         setOrAppendTag(way, "tidal", "yes");
     }
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/BridleWay.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/BridleWay.java
index ff46bad859..fa5cc0ee66 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/BridleWay.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/BridleWay.java
@@ -1,6 +1,6 @@
 package com.graphhopper.reader.osgb.dpn.rightofway;
 
-import com.graphhopper.reader.Way;
+import com.graphhopper.reader.RoutingElement;
 import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
 
 /**
@@ -13,7 +13,7 @@
 public class BridleWay extends AbstractOsToOsmAttibuteMappingVisitor {
 
     @Override
-    protected void applyAttributes(Way way)
+    public void applyAttributes(RoutingElement way)
     {
         way.setTag("designation", "public_bridleway");
         way.setTag("highway", "bridleway");
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/BywayOpenToAllTraffic.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/BywayOpenToAllTraffic.java
index 9c97dfe1a3..dde71dd382 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/BywayOpenToAllTraffic.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/BywayOpenToAllTraffic.java
@@ -1,6 +1,6 @@
 package com.graphhopper.reader.osgb.dpn.rightofway;
 
-import com.graphhopper.reader.Way;
+import com.graphhopper.reader.RoutingElement;
 import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
 
 /**
@@ -13,7 +13,7 @@
 public class BywayOpenToAllTraffic extends AbstractOsToOsmAttibuteMappingVisitor {
 
     @Override
-    protected void applyAttributes(Way way) {
+    public void applyAttributes(RoutingElement way) {
         way.setTag("designation", "byway_open_to_all_traffic");
         way.setTag("highway", "track");
         way.setTag("foot", "yes");
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/CorePath.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/CorePath.java
index 86e4e790f3..01564af939 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/CorePath.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/CorePath.java
@@ -1,6 +1,6 @@
 package com.graphhopper.reader.osgb.dpn.rightofway;
 
-import com.graphhopper.reader.Way;
+import com.graphhopper.reader.RoutingElement;
 import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
 
 /**
@@ -15,7 +15,7 @@
 public class CorePath extends AbstractOsToOsmAttibuteMappingVisitor {
 
     @Override
-    protected void applyAttributes(Way way) {
+    public void applyAttributes(RoutingElement way) {
     }
 
 }
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/Footpath.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/Footpath.java
index 672906b7b4..8e122e2249 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/Footpath.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/Footpath.java
@@ -1,6 +1,6 @@
 package com.graphhopper.reader.osgb.dpn.rightofway;
 
-import com.graphhopper.reader.Way;
+import com.graphhopper.reader.RoutingElement;
 import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
 
 /**
@@ -13,7 +13,7 @@
 public class Footpath extends AbstractOsToOsmAttibuteMappingVisitor {
 
     @Override
-    protected void applyAttributes(Way way)
+    public void applyAttributes(RoutingElement way)
     {
         way.setTag("designation", "public_footpath");
         way.setTag("highway", "footway");
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/None.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/None.java
index f302cf928b..1750a02fe1 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/None.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/None.java
@@ -1,6 +1,6 @@
 package com.graphhopper.reader.osgb.dpn.rightofway;
 
-import com.graphhopper.reader.Way;
+import com.graphhopper.reader.RoutingElement;
 import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
 
 /**
@@ -18,7 +18,7 @@
      * This assumption is based on the current DPN xml structure. If this were to change in the future we would need to rethink how we process this rightOfWay.
      */
     @Override
-    protected void applyAttributes(Way way) {
+    public void applyAttributes(RoutingElement way) {
         way.setTag("foot", "no");
         way.setTag("bicycle", "no");
         way.setTag("horse", "no");
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/NormalPermissibleUses.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/NormalPermissibleUses.java
index 30e812966d..be0394b99c 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/NormalPermissibleUses.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/NormalPermissibleUses.java
@@ -1,6 +1,6 @@
 package com.graphhopper.reader.osgb.dpn.rightofway;
 
-import com.graphhopper.reader.Way;
+import com.graphhopper.reader.RoutingElement;
 import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
 
 /**
@@ -14,7 +14,7 @@
 public class NormalPermissibleUses  extends AbstractOsToOsmAttibuteMappingVisitor {
 
     @Override
-    protected void applyAttributes(Way way) {
+    public void applyAttributes(RoutingElement way) {
         way.setTag("foot", "yes");
         way.setTag("horse", "yes");
         way.setTag("bicycle", "yes");
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/OtherRouteWithPublicAccess.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/OtherRouteWithPublicAccess.java
index 0556de148e..0db5dd20e7 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/OtherRouteWithPublicAccess.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/OtherRouteWithPublicAccess.java
@@ -1,6 +1,6 @@
 package com.graphhopper.reader.osgb.dpn.rightofway;
 
-import com.graphhopper.reader.Way;
+import com.graphhopper.reader.RoutingElement;
 import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
 
 /**
@@ -17,7 +17,7 @@
  */
 public class OtherRouteWithPublicAccess extends AbstractOsToOsmAttibuteMappingVisitor {
     @Override
-    protected void applyAttributes(Way way)
+    public void applyAttributes(RoutingElement way)
     {
         way.setTag("foot", "yes");
     }
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/PermissiveBridleWay.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/PermissiveBridleWay.java
index 388b7e4982..431428df90 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/PermissiveBridleWay.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/PermissiveBridleWay.java
@@ -1,6 +1,6 @@
 package com.graphhopper.reader.osgb.dpn.rightofway;
 
-import com.graphhopper.reader.Way;
+import com.graphhopper.reader.RoutingElement;
 import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
 
 /**
@@ -14,7 +14,7 @@
 public class PermissiveBridleWay extends AbstractOsToOsmAttibuteMappingVisitor {
 
     @Override
-    protected void applyAttributes(Way way)
+    public void applyAttributes(RoutingElement way)
     {
         way.setTag("highway", "bridleway");
         way.setTag("horse", "permissive");
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/PermissivePath.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/PermissivePath.java
index 04566a3668..6590793b9a 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/PermissivePath.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/PermissivePath.java
@@ -1,6 +1,6 @@
 package com.graphhopper.reader.osgb.dpn.rightofway;
 
-import com.graphhopper.reader.Way;
+import com.graphhopper.reader.RoutingElement;
 import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
 
 /**
@@ -13,7 +13,7 @@
 public class PermissivePath extends AbstractOsToOsmAttibuteMappingVisitor {
 
     @Override
-    protected void applyAttributes(Way way) {
+    public void applyAttributes(RoutingElement way) {
         way.setTag("foot", "permissive");
     }
 
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/RestrictedByway.java b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/RestrictedByway.java
index e39c65c3cf..2b74e6e047 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/RestrictedByway.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/dpn/rightofway/RestrictedByway.java
@@ -1,6 +1,6 @@
 package com.graphhopper.reader.osgb.dpn.rightofway;
 
-import com.graphhopper.reader.Way;
+import com.graphhopper.reader.RoutingElement;
 import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
 
 /**
@@ -13,7 +13,7 @@
 public class RestrictedByway extends AbstractOsToOsmAttibuteMappingVisitor {
 
     @Override
-    protected void applyAttributes(Way way)
+    public void applyAttributes(RoutingElement way)
     {
         way.setTag("designation", "restricted_byway");
         way.setTag("highway", "track");
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/itn/OSITNElement.java b/core/src/main/java/com/graphhopper/reader/osgb/itn/OSITNElement.java
index 114697bf06..c90aad779f 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/itn/OSITNElement.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/itn/OSITNElement.java
@@ -34,6 +34,7 @@
 import org.slf4j.LoggerFactory;
 
 import com.graphhopper.reader.RoutingElement;
+import com.graphhopper.reader.osgb.roadclassification.RoadClassification;
 
 /**
  * Base class for all OsITN objects
@@ -175,8 +176,17 @@ protected void readTags(XMLStreamReader parser) throws XMLStreamException, Misma
             }
         }
     }
-
+    
     private int handleRoadNature(XMLStreamReader parser) throws XMLStreamException {
+        String elementText = parser.getElementText();
+        RoadClassification roadType = resolveHighway(elementText);
+        if (RoadClassification.NULLCLASSIFICATION != roadType) {
+            roadType.applyWayAttribute(this);
+        }
+        return parser.getEventType();
+    }
+
+    /*private int handleRoadNature(XMLStreamReader parser) throws XMLStreamException {
         String elementText = parser.getElementText();
         String nature = resolveNature(elementText);
         //        String highwayType = getTag("highway");
@@ -190,55 +200,33 @@ else if(elementText.equals("Roundabout")) {
             setTag("direction", "clockwise");
         }
         return parser.getEventType();
-    }
+    }*/
 
     private int handleDescriptiveGroup(XMLStreamReader parser) throws XMLStreamException {
         String elementText = parser.getElementText();
-        String roadType = resolveHighway(elementText);
-        if (null != roadType && !hasTag("highway")) {
+        RoadClassification roadType = resolveHighway(elementText);
+        if (RoadClassification.NULLCLASSIFICATION != roadType) {
             setTag("type", "route");
-            setTag("highway", roadType);
-        }
-        // This line is for debug and could possibly be removed.
-        if (null == roadType) {
-            setTag("nothighway", elementText);
+            roadType.applyWayAttribute(this);
         }
         return parser.getEventType();
     }
 
-    private String resolveHighway(String elementText) {
+    private RoadClassification resolveHighway(String elementText) {
         logger.info("OSITNElement.resolveHighway( " + elementText + ")");
-        switch (elementText) {
-        case "Private Road – Publicly Accessible":	
-        	setTag("access", "private");
-        	return elementText;
-        case "Private Road - Restricted Access":
-        	setTag("access", "no");
-        case "A Road":
-        case "Motorway":
-        case "B Road":
-        case "Minor Road":
-        	return elementText;
-        case "Pedestrianised Street":
-            return "pedestrian";
-        case "Local Street":
-            return elementText;
-        default:
-            return null;
-        }
-
-    }
-
-    private String resolveNature(String elementText) {
-        logger.info("OSITNElement.resolveNature( " + elementText + ")");
-        switch (elementText) {
-        case "Single Carriageway":
-        case "Dual Carriageway":
-        case "Slip Road":
-            return elementText;
-        }
-        return null;
-    }
+        return RoadClassification.lookup(elementText);
+    }
+
+//    private String resolveNature(String elementText) {
+//        logger.info("OSITNElement.resolveNature( " + elementText + ")");
+//        switch (elementText) {
+//        case "Single Carriageway":
+//        case "Dual Carriageway":
+//        case "Slip Road":
+//            return elementText;
+//        }
+//        return null;
+//    }
 
     /**
      * Process <code><osgb:instruction>One Way</osgb:instruction></code>
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/ARoad.java b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/ARoad.java
index 7408a179c3..ae34b138a9 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/ARoad.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/ARoad.java
@@ -1,13 +1,13 @@
 package com.graphhopper.reader.osgb.roadclassification;
 
-import com.graphhopper.reader.Way;
+import com.graphhopper.reader.RoutingElement;
 import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
 
 public class ARoad extends AbstractOsToOsmAttibuteMappingVisitor
 {
 
 	@Override
-	protected void applyAttributes( Way way )
+    public void applyAttributes( RoutingElement way )
 	{
 		way.setTag("highway","primary");
 	}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/Alley.java b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/Alley.java
index 2daa2d67e5..f9d752b216 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/Alley.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/Alley.java
@@ -1,13 +1,13 @@
 package com.graphhopper.reader.osgb.roadclassification;
 
-import com.graphhopper.reader.Way;
+import com.graphhopper.reader.RoutingElement;
 import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
 
 public class Alley extends AbstractOsToOsmAttibuteMappingVisitor
 {
 
 	@Override
-	protected void applyAttributes( Way way )
+    public void applyAttributes( RoutingElement way )
 	{
 		way.setTag("highway", "service");
 		way.setTag("service", "alley");
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/BRoad.java b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/BRoad.java
index 348e11f845..733e8aac76 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/BRoad.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/BRoad.java
@@ -1,13 +1,13 @@
 package com.graphhopper.reader.osgb.roadclassification;
 
-import com.graphhopper.reader.Way;
+import com.graphhopper.reader.RoutingElement;
 import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
 
 public class BRoad extends AbstractOsToOsmAttibuteMappingVisitor
 {
 
 	@Override
-	protected void applyAttributes( Way way )
+    public void applyAttributes( RoutingElement way )
 	{
 		way.setTag("highway","secondary");
 	}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/DualCarriageway.java b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/DualCarriageway.java
index 9e19abf7a3..96a9f6a7c4 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/DualCarriageway.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/DualCarriageway.java
@@ -1,13 +1,13 @@
 package com.graphhopper.reader.osgb.roadclassification;
 
-import com.graphhopper.reader.Way;
+import com.graphhopper.reader.RoutingElement;
 import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
 
 public class DualCarriageway extends AbstractOsToOsmAttibuteMappingVisitor
 {
 
 	@Override
-    protected void applyAttributes( Way way )
+    public void applyAttributes( RoutingElement way )
     {
 	   	way.setTag("maxspeed:type", "GB:nsl_dual");
     }
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/LocalStreet.java b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/LocalStreet.java
index f19a7321a9..998c5595ca 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/LocalStreet.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/LocalStreet.java
@@ -1,13 +1,13 @@
 package com.graphhopper.reader.osgb.roadclassification;
 
-import com.graphhopper.reader.Way;
+import com.graphhopper.reader.RoutingElement;
 import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
 
 public class LocalStreet extends AbstractOsToOsmAttibuteMappingVisitor
 {
 
 	@Override
-	protected void applyAttributes( Way way )
+    public void applyAttributes( RoutingElement way )
 	{
 		way.setTag("highway","unclassified");
 	}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/MinorRoad.java b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/MinorRoad.java
index 9f9d603661..ca63cea5f2 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/MinorRoad.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/MinorRoad.java
@@ -1,13 +1,13 @@
 package com.graphhopper.reader.osgb.roadclassification;
 
-import com.graphhopper.reader.Way;
+import com.graphhopper.reader.RoutingElement;
 import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
 
 public class MinorRoad extends AbstractOsToOsmAttibuteMappingVisitor
 {
 
 	@Override
-	protected void applyAttributes( Way way )
+    public void applyAttributes( RoutingElement way )
 	{
 		way.setTag("highway","tertiary");
 	}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/Motorway.java b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/Motorway.java
index 8177e1182b..eef11309ce 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/Motorway.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/Motorway.java
@@ -1,13 +1,13 @@
 package com.graphhopper.reader.osgb.roadclassification;
 
-import com.graphhopper.reader.Way;
+import com.graphhopper.reader.RoutingElement;
 import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
 
 public class Motorway extends AbstractOsToOsmAttibuteMappingVisitor
 {
 
 	@Override
-	protected void applyAttributes( Way way )
+    public void applyAttributes( RoutingElement way )
 	{
 		way.setTag("highway","motorway");
 		way.setTag("maxspeed:type","GB:motorway");
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/PedestrianisedStreet.java b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/PedestrianisedStreet.java
index c4e02dfccb..a289caee83 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/PedestrianisedStreet.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/PedestrianisedStreet.java
@@ -1,13 +1,13 @@
 package com.graphhopper.reader.osgb.roadclassification;
 
-import com.graphhopper.reader.Way;
+import com.graphhopper.reader.RoutingElement;
 import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
 
 public class PedestrianisedStreet extends AbstractOsToOsmAttibuteMappingVisitor
 {
 
 	@Override
-	protected void applyAttributes( Way way )
+    public void applyAttributes( RoutingElement way )
 	{
 		way.setTag("highway","pedestrian");
 	}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/PrivateRoadPubliclyAccessible.java b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/PrivateRoadPubliclyAccessible.java
index 9121ec53ac..46e0f0fef8 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/PrivateRoadPubliclyAccessible.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/PrivateRoadPubliclyAccessible.java
@@ -1,12 +1,12 @@
 package com.graphhopper.reader.osgb.roadclassification;
 
-import com.graphhopper.reader.Way;
+import com.graphhopper.reader.RoutingElement;
 import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
 
 public class PrivateRoadPubliclyAccessible extends AbstractOsToOsmAttibuteMappingVisitor {
 			
 	@Override
-    protected void applyAttributes( Way way )
+    public void applyAttributes( RoutingElement way )
     {
 	   way.setTag("access", "private");
     }
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/PrivateRoadRestrictedAccess.java b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/PrivateRoadRestrictedAccess.java
index 20d853d0b0..fac38c1383 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/PrivateRoadRestrictedAccess.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/PrivateRoadRestrictedAccess.java
@@ -1,13 +1,13 @@
 package com.graphhopper.reader.osgb.roadclassification;
 
-import com.graphhopper.reader.Way;
+import com.graphhopper.reader.RoutingElement;
 import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
 
 public class PrivateRoadRestrictedAccess extends AbstractOsToOsmAttibuteMappingVisitor
 {
 
 	@Override
-    protected void applyAttributes( Way way )
+    public void applyAttributes( RoutingElement way )
     {
 	   	way.setTag("access", "no");
     }
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/RoadClassification.java b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/RoadClassification.java
new file mode 100644
index 0000000000..49277b52e4
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/RoadClassification.java
@@ -0,0 +1,52 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import com.graphhopper.reader.RoutingElement;
+import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
+
+
+public enum RoadClassification 
+{
+	NULLCLASSIFICATION(null),
+	ALLEY(new Alley()),
+	AROAD(new ARoad()),
+	BROAD(new BRoad()),
+	DUALCARRIAGEWAY(new DualCarriageway()),
+	LOCALSTREET(new LocalStreet()),
+	MINORROAD(new MinorRoad()),
+	MOTORWAY(new Motorway()),
+	PEDESTRIANISEDSTREET(new PedestrianisedStreet()),
+	PRIVATEROADPUBLICLYACCESSIBLE(new PrivateRoadPubliclyAccessible()),
+	PRIVATEROADRESTRICTEDACCESS(new PrivateRoadRestrictedAccess()),
+	SINGLECARRIAGEWAY(new SingleCarriageway()),
+	URBAN(new Urban()),
+	ROUNDABOUT(new Roundabout()),
+	SLIPROAD(new SlipRoad());
+	
+	private final AbstractOsToOsmAttibuteMappingVisitor innerVisitor;
+	
+
+	RoadClassification(AbstractOsToOsmAttibuteMappingVisitor innerVisitor) {
+		this.innerVisitor = innerVisitor;
+	}
+
+    public void applyWayAttribute(RoutingElement way )
+    {
+	    innerVisitor.applyAttributes(way);
+    }
+    
+    /**
+     * 
+     * For usages with a 1:1 mapping between attribute and value then have a quick lookup rather than using the visitor pattern and iterating over all visitors
+     */    
+    public static RoadClassification lookup(String dataName) {
+    	try {
+    		RoadClassification valueOf = RoadClassification.valueOf(dataName.replace(" ", "").replace("–", "").toUpperCase());
+    		System.err.println("Search:" + dataName + " Found:" + valueOf.toString());
+    		return valueOf;
+    	}
+    	catch (IllegalArgumentException iae) {
+    		return NULLCLASSIFICATION;
+    	}
+    }
+	
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/Roundabout.java b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/Roundabout.java
new file mode 100644
index 0000000000..9dae78bbe3
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/Roundabout.java
@@ -0,0 +1,15 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import com.graphhopper.reader.RoutingElement;
+import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
+
+public class Roundabout extends AbstractOsToOsmAttibuteMappingVisitor
+{
+
+	@Override
+    public void applyAttributes( RoutingElement way )
+	{
+		way.setTag("junction", "roundabout");
+        way.setTag("direction", "clockwise");
+	}
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/SingleCarriageway.java b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/SingleCarriageway.java
index b6b35b6b2a..8d3b5e183f 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/SingleCarriageway.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/SingleCarriageway.java
@@ -1,13 +1,13 @@
 package com.graphhopper.reader.osgb.roadclassification;
 
-import com.graphhopper.reader.Way;
+import com.graphhopper.reader.RoutingElement;
 import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
 
 public class SingleCarriageway extends AbstractOsToOsmAttibuteMappingVisitor
 {
 
 	@Override
-    protected void applyAttributes( Way way )
+    public void applyAttributes( RoutingElement way )
     {
 	   	way.setTag("maxspeed:type", "GB:nsl_single");
     }
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/SlipRoad.java b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/SlipRoad.java
new file mode 100644
index 0000000000..ce033b6412
--- /dev/null
+++ b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/SlipRoad.java
@@ -0,0 +1,16 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import com.graphhopper.reader.RoutingElement;
+import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
+
+public class SlipRoad extends AbstractOsToOsmAttibuteMappingVisitor
+{
+	private static final String LINK = "_link";
+	@Override
+    public void applyAttributes( RoutingElement way )
+    {
+		if(way.hasTag("highway")) {
+			way.setTag("highway", way.getTag("highway") + LINK);
+		}
+    }
+}
diff --git a/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/Urban.java b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/Urban.java
index 92ac97893b..b93c11e6e1 100644
--- a/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/Urban.java
+++ b/core/src/main/java/com/graphhopper/reader/osgb/roadclassification/Urban.java
@@ -1,13 +1,12 @@
 package com.graphhopper.reader.osgb.roadclassification;
 
-import com.graphhopper.reader.Way;
+import com.graphhopper.reader.RoutingElement;
 import com.graphhopper.reader.osgb.AbstractOsToOsmAttibuteMappingVisitor;
-import com.graphhopper.routing.util.CarFlagEncoder;
 
 public class Urban extends AbstractOsToOsmAttibuteMappingVisitor
 {
 	@Override
-    protected void applyAttributes( Way way )
+    public void applyAttributes( RoutingElement way )
     {
 		if(!way.hasTag("maxspeed")) {
 			way.setTag("maxspeed", "30 mph");
diff --git a/core/src/main/java/com/graphhopper/routing/util/OsFlagUtils.java b/core/src/main/java/com/graphhopper/routing/util/OsFlagUtils.java
index b401d038b7..2ac8d0788d 100644
--- a/core/src/main/java/com/graphhopper/routing/util/OsFlagUtils.java
+++ b/core/src/main/java/com/graphhopper/routing/util/OsFlagUtils.java
@@ -1,6 +1,6 @@
 package com.graphhopper.routing.util;
 
-import com.graphhopper.reader.Way;
+import com.graphhopper.reader.RoutingElement;
 
 /**
  * Utility class to contain more complex flag and tag operations
@@ -9,8 +9,8 @@
  *
  */
 public class OsFlagUtils {
-    public static boolean hasTag(Way way, String key, String value) {
-        String wayTag = way.getTag(key);
+    public static boolean hasTag(RoutingElement routingElement, String key, String value) {
+        String wayTag = routingElement.getTag(key);
         if (null != wayTag) {
             String[] values = wayTag.split(",");
             for (String tvalue : values) {
@@ -22,13 +22,13 @@ public static boolean hasTag(Way way, String key, String value) {
         return false;
     }
 
-    public static void setOrAppendTag(Way way, String key, String value) {
-        String currentValue = way.getTag(key);
+    public static void setOrAppendTag(RoutingElement routingElement, String key, String value) {
+        String currentValue = routingElement.getTag(key);
         if (currentValue != null) {
-            way.setTag(key, currentValue + "," + value);
+        	routingElement.setTag(key, currentValue + "," + value);
         } else {
             // This is the first time we are adding it so just add it
-            way.setTag(key, value);
+        	routingElement.setTag(key, value);
         }
     }
 
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/OSITNWayTest.java b/core/src/test/java/com/graphhopper/reader/osgb/OSITNWayTest.java
index 6acf2ed2f2..8bff06549d 100644
--- a/core/src/test/java/com/graphhopper/reader/osgb/OSITNWayTest.java
+++ b/core/src/test/java/com/graphhopper/reader/osgb/OSITNWayTest.java
@@ -82,7 +82,7 @@ public void testReadTagsPrivateRestrictedRoads() throws XMLStreamException, Mism
 				"	xsi:schemaLocation='http://www.ordnancesurvey.co.uk/xml/namespaces/osgb http://www.ordnancesurvey.co.uk/xml/schema/v7/OSDNFFeatures.xsd'\n" + 
 				"	fid='GDS-58096-1'>" +
 				"		<osgb:RoadLink fid='osgb4000000009314037'>\n" + 
-				"<osgb:descriptiveTerm>Private Road - Restricted Access</osgb:descriptiveTerm>\n" + 
+				"<osgb:descriptiveTerm>Private Road – Restricted Access</osgb:descriptiveTerm>\n" + 
 				"<osgb:natureOfRoad>Single Carriageway</osgb:natureOfRoad>\n" + 
 				"<osgb:length>12.04</osgb:length>\n" + 
 				"<osgb:polyline>\n" + 
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/RoadClassificationTest.java b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/RoadClassificationTest.java
new file mode 100644
index 0000000000..b3ce2e6d8b
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/RoadClassificationTest.java
@@ -0,0 +1,30 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import static org.junit.Assert.*;
+
+import org.junit.Test;
+
+public class RoadClassificationTest
+{
+
+	@Test
+	public void testLookup()
+	{
+		assertEquals(RoadClassification.NULLCLASSIFICATION, RoadClassification.lookup("Unknown"));
+		assertEquals(RoadClassification.ALLEY, RoadClassification.lookup("Alley"));
+		assertEquals(RoadClassification.AROAD, RoadClassification.lookup("A Road"));
+		assertEquals(RoadClassification.BROAD, RoadClassification.lookup("B Road"));
+		assertEquals(RoadClassification.DUALCARRIAGEWAY, RoadClassification.lookup("Dual Carriageway"));
+		assertEquals(RoadClassification.LOCALSTREET, RoadClassification.lookup("Local Street"));
+		assertEquals(RoadClassification.MINORROAD, RoadClassification.lookup("Minor Road"));
+		assertEquals(RoadClassification.MOTORWAY, RoadClassification.lookup("Motorway"));
+		assertEquals(RoadClassification.PEDESTRIANISEDSTREET, RoadClassification.lookup("Pedestrianised Street"));
+		assertEquals(RoadClassification.PRIVATEROADPUBLICLYACCESSIBLE, RoadClassification.lookup("Private Road – Publicly Accessible"));
+		assertEquals(RoadClassification.PRIVATEROADRESTRICTEDACCESS, RoadClassification.lookup("Private Road – Restricted Access"));
+		assertEquals(RoadClassification.SINGLECARRIAGEWAY, RoadClassification.lookup("Single Carriageway"));
+		assertEquals(RoadClassification.URBAN, RoadClassification.lookup("Urban"));
+		assertEquals(RoadClassification.ROUNDABOUT, RoadClassification.lookup("Roundabout"));
+		assertEquals(RoadClassification.SLIPROAD, RoadClassification.lookup("Slip Road"));
+	}
+
+}
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/RoundaboutTest.java b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/RoundaboutTest.java
new file mode 100644
index 0000000000..b158650576
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/RoundaboutTest.java
@@ -0,0 +1,37 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.OsToOsmAttributeMappingVisitor;
+
+public class RoundaboutTest {
+    static OsToOsmAttributeMappingVisitor visitor;
+    @Mock
+    Way way;
+
+    @BeforeClass
+    public static void createVisitor() {
+        visitor = new Roundabout();
+    }
+
+    @Before
+    public void init() {
+        MockitoAnnotations.initMocks(this);
+    }
+
+    @Test
+    public void testVisitWayAttribute() {
+        visitor.visitWayAttribute("Roundabout".toLowerCase().replace(" ", "").replace("–", ""), way);
+        verify(way).setTag("junction", "roundabout");
+        verify(way).setTag("direction", "clockwise");
+        verifyNoMoreInteractions(way);
+    }
+}
\ No newline at end of file
diff --git a/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/SlipRoadTest.java b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/SlipRoadTest.java
new file mode 100644
index 0000000000..82c940373c
--- /dev/null
+++ b/core/src/test/java/com/graphhopper/reader/osgb/roadclassification/SlipRoadTest.java
@@ -0,0 +1,66 @@
+package com.graphhopper.reader.osgb.roadclassification;
+
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.verifyNoMoreInteractions;
+import static org.mockito.Mockito.when;
+
+import org.junit.Before;
+import org.junit.BeforeClass;
+import org.junit.Test;
+import org.mockito.Mock;
+import org.mockito.MockitoAnnotations;
+
+import com.graphhopper.reader.Way;
+import com.graphhopper.reader.osgb.OsToOsmAttributeMappingVisitor;
+
+public class SlipRoadTest
+{
+	static OsToOsmAttributeMappingVisitor visitor;
+	@Mock
+	Way way;
+
+	@BeforeClass
+	public static void createVisitor()
+	{
+		visitor = new SlipRoad();
+	}
+
+	@Before
+	public void init()
+	{
+		MockitoAnnotations.initMocks(this);
+	}
+
+	@Test
+	public void testVisitWayAttributeWhenHighwayNotSet()
+	{
+		when(way.hasTag("highway")).thenReturn(false);
+		visitor.visitWayAttribute("Slip Road".toLowerCase().replace(" ", "").replace("–", ""), way);
+		verify(way).hasTag("highway");
+		verifyNoMoreInteractions(way);
+	}
+	
+	@Test
+	public void testVisitWayAttributeWhenHighwayMotorwaySet()
+	{
+		when(way.hasTag("highway")).thenReturn(true);
+		when(way.getTag("highway")).thenReturn("motorway");
+		visitor.visitWayAttribute("Slip Road".toLowerCase().replace(" ", "").replace("–", ""), way);
+		verify(way).hasTag("highway");
+		verify(way).getTag("highway");
+		verify(way).setTag("highway","motorway_link");
+		verifyNoMoreInteractions(way);
+	}
+	
+	@Test
+	public void testVisitWayAttributeWhenHighwayLocalRoadSet()
+	{
+		when(way.hasTag("highway")).thenReturn(true);
+		when(way.getTag("highway")).thenReturn("tertiary");
+		visitor.visitWayAttribute("Slip Road".toLowerCase().replace(" ", "").replace("–", ""), way);
+		verify(way).hasTag("highway");
+		verify(way).getTag("highway");
+		verify(way).setTag("highway","tertiary_link");
+		verifyNoMoreInteractions(way);
+	}
+}
\ No newline at end of file
diff --git a/core/src/test/resources/com/graphhopper/reader/osgb/dpn/directory_ingestion/os-dpn-sample1.xml.gz b/core/src/test/resources/com/graphhopper/reader/osgb/dpn/directory_ingestion/os-dpn-sample1.xml.gz
new file mode 100644
index 0000000000..2b481fb3c3
Binary files /dev/null and b/core/src/test/resources/com/graphhopper/reader/osgb/dpn/directory_ingestion/os-dpn-sample1.xml.gz differ
diff --git a/web/.classpath b/web/.classpath
index af6acd2e07..3ae6c18259 100644
--- a/web/.classpath
+++ b/web/.classpath
@@ -13,36 +13,7 @@
 			<attribute name="maven.pomderived" value="true"/>
 		</attributes>
 	</classpathentry>
-	<classpathentry kind="var" path="M2_REPO/javax/inject/javax.inject/1/javax.inject-1.jar"/>
-	<classpathentry kind="var" path="M2_REPO/javax/servlet/javax.servlet-api/3.0.1/javax.servlet-api-3.0.1.jar"/>
 	<classpathentry kind="src" path="/graphhopper"/>
-	<classpathentry kind="var" path="M2_REPO/net/sf/trove4j/trove4j/3.0.3/trove4j-3.0.3.jar"/>
-	<classpathentry kind="var" path="M2_REPO/org/slf4j/slf4j-api/1.7.7/slf4j-api-1.7.7.jar"/>
-	<classpathentry kind="var" path="M2_REPO/org/slf4j/slf4j-log4j12/1.7.7/slf4j-log4j12-1.7.7.jar"/>
-	<classpathentry kind="var" path="M2_REPO/log4j/log4j/1.2.17/log4j-1.2.17.jar"/>
-	<classpathentry kind="var" path="M2_REPO/org/apache/xmlgraphics/xmlgraphics-commons/1.5/xmlgraphics-commons-1.5.jar"/>
-	<classpathentry kind="var" path="M2_REPO/commons-io/commons-io/1.3.1/commons-io-1.3.1.jar"/>
-	<classpathentry kind="var" path="M2_REPO/commons-logging/commons-logging/1.0.4/commons-logging-1.0.4.jar"/>
-	<classpathentry kind="var" path="M2_REPO/com/google/protobuf/protobuf-java/2.5.0/protobuf-java-2.5.0.jar"/>
-	<classpathentry kind="var" path="M2_REPO/org/openstreetmap/osmosis/osmosis-osm-binary/0.43.1/osmosis-osm-binary-0.43.1.jar"/>
-	<classpathentry kind="var" path="M2_REPO/org/json/json/20140107/json-20140107.jar"/>
-	<classpathentry kind="var" path="M2_REPO/com/google/inject/guice/3.0/guice-3.0.jar"/>
-	<classpathentry kind="var" path="M2_REPO/aopalliance/aopalliance/1.0/aopalliance-1.0.jar"/>
-	<classpathentry kind="var" path="M2_REPO/com/google/inject/extensions/guice-servlet/3.0/guice-servlet-3.0.jar"/>
-	<classpathentry kind="var" path="M2_REPO/org/eclipse/jetty/jetty-servlets/8.1.14.v20131031/jetty-servlets-8.1.14.v20131031.jar"/>
-	<classpathentry kind="var" path="M2_REPO/org/eclipse/jetty/jetty-continuation/8.1.14.v20131031/jetty-continuation-8.1.14.v20131031.jar"/>
-	<classpathentry kind="var" path="M2_REPO/org/eclipse/jetty/jetty-client/8.1.14.v20131031/jetty-client-8.1.14.v20131031.jar"/>
-	<classpathentry kind="var" path="M2_REPO/org/eclipse/jetty/jetty-http/8.1.14.v20131031/jetty-http-8.1.14.v20131031.jar"/>
-	<classpathentry kind="var" path="M2_REPO/org/eclipse/jetty/jetty-io/8.1.14.v20131031/jetty-io-8.1.14.v20131031.jar"/>
-	<classpathentry kind="var" path="M2_REPO/org/eclipse/jetty/jetty-util/8.1.14.v20131031/jetty-util-8.1.14.v20131031.jar"/>
-	<classpathentry kind="var" path="M2_REPO/org/eclipse/jetty/jetty-server/8.1.14.v20131031/jetty-server-8.1.14.v20131031.jar"/>
-	<classpathentry kind="var" path="M2_REPO/org/eclipse/jetty/orbit/javax.servlet/3.0.0.v201112011016/javax.servlet-3.0.0.v201112011016.jar"/>
-	<classpathentry kind="var" path="M2_REPO/org/eclipse/jetty/jetty-servlet/8.1.14.v20131031/jetty-servlet-8.1.14.v20131031.jar"/>
-	<classpathentry kind="var" path="M2_REPO/org/eclipse/jetty/jetty-security/8.1.14.v20131031/jetty-security-8.1.14.v20131031.jar"/>
-	<classpathentry kind="var" path="M2_REPO/org/eclipse/jetty/jetty-webapp/8.1.14.v20131031/jetty-webapp-8.1.14.v20131031.jar"/>
-	<classpathentry kind="var" path="M2_REPO/org/eclipse/jetty/jetty-xml/8.1.14.v20131031/jetty-xml-8.1.14.v20131031.jar"/>
-	<classpathentry kind="var" path="M2_REPO/junit/junit/4.11/junit-4.11.jar"/>
-	<classpathentry kind="var" path="M2_REPO/org/hamcrest/hamcrest-core/1.3/hamcrest-core-1.3.jar"/>
 	<classpathentry excluding="**" kind="src" output="target/classes" path="src/main/resources">
 		<attributes>
 			<attribute name="maven.pomderived" value="true"/>
diff --git a/web/pom.xml b/web/pom.xml
index 89a40c0afa..5db1ca4b89 100644
--- a/web/pom.xml
+++ b/web/pom.xml
@@ -1,141 +1,148 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
-         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
-
-    <modelVersion>4.0.0</modelVersion>
-    <groupId>com.graphhopper</groupId>
-    <artifactId>graphhopper-web</artifactId>
-    <packaging>war</packaging>
-    <version>0.5-SNAPSHOT</version>
-    <name>GraphHopper Web</name>
-    <description>Example on how to use GraphHopper in a web-based application</description>
-        
-    <parent>
-        <groupId>com.graphhopper</groupId>
-        <artifactId>graphhopper-parent</artifactId>    	
-        <version>0.5-SNAPSHOT</version>
-    </parent>
-    <properties>
-        <jetty.version>8.1.16.v20140903</jetty.version>
-    </properties>
-    
-    <dependencies>
-        <dependency>
-            <groupId>com.graphhopper</groupId>
-            <artifactId>graphhopper</artifactId>
-            <version>${project.parent.version}</version>            
-        </dependency>
-        
-        <dependency>
-            <groupId>org.json</groupId>
-            <artifactId>json</artifactId>            
-            <version>20140107</version>
-        </dependency>    
-        
-        <dependency>
-            <groupId>com.google.inject</groupId>
-            <artifactId>guice</artifactId>
-            <version>3.0</version>
-        </dependency>
-        
-        <!-- necessary to use guice ('@Inject') in servlets -->
-        <dependency>
-            <groupId>com.google.inject.extensions</groupId>
-            <artifactId>guice-servlet</artifactId>
-            <version>3.0</version>
-        </dependency>
-                
-        <dependency>
-            <groupId>javax.servlet</groupId>
-            <artifactId>javax.servlet-api</artifactId>
-            <version>3.1.0</version>
-            <scope>provided</scope>
-        </dependency>
-        <dependency>
-            <groupId>org.slf4j</groupId>
-            <artifactId>slf4j-api</artifactId>
-            <version>${slf4j.version}</version>
-        </dependency>
-        <dependency>
-            <groupId>org.slf4j</groupId>
-            <artifactId>slf4j-log4j12</artifactId>
-            <version>${slf4j.version}</version>
-            <scope>runtime</scope>
-        </dependency>
-        
-        <dependency>
-            <groupId>log4j</groupId>
-            <artifactId>log4j</artifactId>
-            <version>${log4j.version}</version>
-            <scope>compile</scope>
-        </dependency>
-
-        <dependency>
-            <groupId>org.eclipse.jetty</groupId>
-            <artifactId>jetty-servlets</artifactId>
-            <version>${jetty.version}</version>
-        </dependency>
-        
-        <dependency>
-            <groupId>org.eclipse.jetty</groupId>
-            <artifactId>jetty-server</artifactId>
-            <version>${jetty.version}</version>
-        </dependency>
-        <dependency>
-            <groupId>org.eclipse.jetty</groupId>
-            <artifactId>jetty-servlet</artifactId>
-            <version>${jetty.version}</version>
-        </dependency>
-        
-        <!-- for integration tests of service -->
-        <dependency>
-            <groupId>org.eclipse.jetty</groupId>
-            <artifactId>jetty-webapp</artifactId>
-            <version>${jetty.version}</version>
-            <scope>test</scope>
-        </dependency>
-      
-    </dependencies>
-
-    <build>
-        <plugins>
-            <!-- create a jar file too, so others can use it more easily -->
-            <plugin>
-                <groupId>org.apache.maven.plugins</groupId>
-                <artifactId>maven-war-plugin</artifactId>                
-                <configuration>
-                    <attachClasses>true</attachClasses>
-                </configuration>
-            </plugin>            
-        <!--    <plugin>
-                <groupId>org.apache.maven.plugins</groupId>
-                <artifactId>maven-assembly-plugin</artifactId>
-                <configuration>
-                    <archive>
-                        <manifest>
-                            <mainClass>com.graphhopper.http.GHServer</mainClass>
-                        </manifest>
-                    </archive>
-                    <descriptors>
-                        <descriptor>src/main/assembly/jar.xml</descriptor>
-                        - this is defined to be executed afterwards -
-                        <descriptor>src/main/assembly/zip.xml</descriptor>
-                    </descriptors>
-                </configuration>
-                <executions>
-                    <execution>
-                        <id>make-assembly</id>
+	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+
+	<modelVersion>4.0.0</modelVersion>
+	<groupId>com.graphhopper</groupId>
+	<artifactId>graphhopper-web</artifactId>
+	<packaging>war</packaging>
+	<version>0.5-SNAPSHOT</version>
+	<name>GraphHopper Web</name>
+	<description>Example on how to use GraphHopper in a web-based application</description>
+
+	<parent>
+		<groupId>com.graphhopper</groupId>
+		<artifactId>graphhopper-parent</artifactId>
+		<version>0.5-SNAPSHOT</version>
+	</parent>
+	<properties>
+		<jetty.version>8.1.16.v20140903</jetty.version>
+	</properties>
+
+	<dependencies>
+		<dependency>
+			<groupId>com.graphhopper</groupId>
+			<artifactId>graphhopper</artifactId>
+			<version>${project.parent.version}</version>
+		</dependency>
+
+		<dependency>
+			<groupId>org.json</groupId>
+			<artifactId>json</artifactId>
+			<version>20140107</version>
+		</dependency>
+
+		<dependency>
+			<groupId>com.google.inject</groupId>
+			<artifactId>guice</artifactId>
+			<version>3.0</version>
+		</dependency>
+
+		<!-- necessary to use guice ('@Inject') in servlets -->
+		<dependency>
+			<groupId>com.google.inject.extensions</groupId>
+			<artifactId>guice-servlet</artifactId>
+			<version>3.0</version>
+		</dependency>
+
+		<dependency>
+			<groupId>javax.servlet</groupId>
+			<artifactId>javax.servlet-api</artifactId>
+			<version>3.1.0</version>
+			<scope>provided</scope>
+		</dependency>
+		<dependency>
+			<groupId>org.slf4j</groupId>
+			<artifactId>slf4j-api</artifactId>
+			<version>${slf4j.version}</version>
+		</dependency>
+		<dependency>
+			<groupId>org.slf4j</groupId>
+			<artifactId>slf4j-log4j12</artifactId>
+			<version>${slf4j.version}</version>
+			<scope>runtime</scope>
+		</dependency>
+
+		<dependency>
+			<groupId>log4j</groupId>
+			<artifactId>log4j</artifactId>
+			<version>${log4j.version}</version>
+			<scope>compile</scope>
+		</dependency>
+
+		<dependency>
+			<groupId>org.eclipse.jetty</groupId>
+			<artifactId>jetty-servlets</artifactId>
+			<version>${jetty.version}</version>
+		</dependency>
+
+		<dependency>
+			<groupId>org.eclipse.jetty</groupId>
+			<artifactId>jetty-server</artifactId>
+			<version>${jetty.version}</version>
+		</dependency>
+		<dependency>
+			<groupId>org.eclipse.jetty</groupId>
+			<artifactId>jetty-servlet</artifactId>
+			<version>${jetty.version}</version>
+		</dependency>
+
+		<!-- for integration tests of service -->
+		<dependency>
+			<groupId>org.eclipse.jetty</groupId>
+			<artifactId>jetty-webapp</artifactId>
+			<version>${jetty.version}</version>
+			<scope>test</scope>
+		</dependency>
+
+		<dependency>
+			<groupId>org.mockito</groupId>
+			<artifactId>mockito-all</artifactId>
+			<version>1.10.19</version>
+			<scope>test</scope>
+		</dependency>
+
+	</dependencies>
+
+	<build>
+		<plugins>
+			<!-- create a jar file too, so others can use it more easily -->
+			<plugin>
+				<groupId>org.apache.maven.plugins</groupId>
+				<artifactId>maven-war-plugin</artifactId>
+				<configuration>
+					<attachClasses>true</attachClasses>
+				</configuration>
+			</plugin>
+			<!--<plugin>
+				<groupId>org.apache.maven.plugins</groupId>
+				<artifactId>maven-assembly-plugin</artifactId>
+				<configuration>
+					<archive>
+						<manifest>
+							<mainClass>com.graphhopper.http.GHServer</mainClass>
+						</manifest>
+					</archive>
+					<descriptors>
+						<descriptor>src/main/assembly/jar.xml</descriptor>
+						- this is defined to be executed afterwards -
+						<descriptor>src/main/assembly/zip.xml</descriptor>
+					</descriptors>
+				</configuration>
+				<executions>
+					<execution>
+						<id>make-assembly</id>
                         - bind to verify and not package to pass integration tests before creating assemblies -
-                        <phase>integration-test</phase> 
-                       <goals>
-                            <goal>single</goal>
-                        </goals>
-                    </execution>
-                </executions>
-            </plugin> -->
- 
-        </plugins>
-    </build>
+						<phase>integration-test</phase>
+						<goals>
+							<goal>single</goal>
+						</goals>
+					</execution>
+				</executions>
+			</plugin>  -->
+
+		</plugins>
+	</build>
 
 </project>
 
diff --git a/web/src/main/java/com/graphhopper/http/ApiResource.java b/web/src/main/java/com/graphhopper/http/ApiResource.java
index 0f34c53547..a924dffbc7 100644
--- a/web/src/main/java/com/graphhopper/http/ApiResource.java
+++ b/web/src/main/java/com/graphhopper/http/ApiResource.java
@@ -4,7 +4,6 @@
 import java.util.List;
 import java.util.Map;
 import java.util.Set;
-
 import javax.servlet.http.HttpServletRequest;
 
 public enum ApiResource
@@ -97,10 +96,8 @@ private boolean checkMandatoryValue( HttpServletRequest request, String mandator
 	 *
 	 * @param request
 	 * @throws NoSuchParameterException
-	 * @throws InvalidParameterException
 	 */
-	private void checkValidParameters( HttpServletRequest request )
-	        throws NoSuchParameterException, InvalidParameterException
+	private void checkValidParameters( HttpServletRequest request ) throws NoSuchParameterException
 	{
 		// Now check for all the valid parameters for the resource
 		List<String> list = Arrays.asList(this.getValidValues());
@@ -142,4 +139,4 @@ private void checkValidParameters( HttpServletRequest request )
 		return message;
 	}
 
-}
\ No newline at end of file
+}
diff --git a/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java b/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
index df06abbf0e..d0aa9dd79c 100644
--- a/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
+++ b/web/src/main/java/com/graphhopper/http/GraphHopperServlet.java
@@ -41,7 +41,6 @@
 import javax.xml.transform.dom.DOMSource;
 import javax.xml.transform.stream.StreamResult;
 
-import org.eclipse.jetty.http.HttpStatus;
 import org.json.JSONObject;
 import org.w3c.dom.Document;
 import org.w3c.dom.Element;
@@ -85,12 +84,10 @@
 	public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes )
 	        throws ServletException, IOException
 	{
-		List<GHPoint> infoPoints = getPoints(httpReq, "point");
 
-		// we can reduce the path length based on the maximum differences to the
-		// original coordinates
-		double minPathPrecision = getDoubleParam(httpReq, "way_point_max_distance", 1d);
+		List<GHPoint> infoPoints = getPoints(httpReq, "point");
 		boolean writeGPX = "gpx".equalsIgnoreCase(getParam(httpReq, "type", "json"));
+		double minPathPrecision = getDoubleParam(httpReq, "way_point_max_distance", 1d);
 		boolean enableInstructions = writeGPX || getBooleanParam(httpReq, "instructions", true);
 		boolean calcPoints = getBooleanParam(httpReq, "calc_points", true);
 		boolean enableElevation = getBooleanParam(httpReq, "elevation", false);
@@ -98,8 +95,8 @@ public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes )
 
 		String vehicleStr = getParam(httpReq, "vehicle", "car");
 		String weighting = getParam(httpReq, "weighting", "fastest");
-		String algoStr = getParam(httpReq, "algorithm", AlgorithmOptions.DIJKSTRA_BI);
-		String localeStr = getParam(httpReq, "locale", "en_US");
+		String algoStr = getParam(httpReq, "algorithm", "");
+		String localeStr = getParam(httpReq, "locale", "en");
 
 		StopWatch sw = new StopWatch().start();
 		GHResponse ghRsp = null;
@@ -110,101 +107,114 @@ public void doGet( HttpServletRequest httpReq, HttpServletResponse httpRes )
 		String debugString = getParam(httpReq, "debug", "true");
 		String prettyString = getParam(httpReq, "pretty", "true");
 		String avoidancesString = getParam(httpReq, "avoidances", null);
-
-		if (!new CaseInsensitiveStringListValidator().isValid(localeStr, TranslationMap.LOCALES))
-		{
-			String errMesg = buildErrorMessageString(localeStr, "locale", TranslationMap.LOCALES);
-			ghRsp = new GHResponse().addError(new IllegalArgumentException(errMesg.toString()));
-		} else if (!new CaseInsensitiveStringListValidator().isValid(algoStr,
-		        AlgorithmOptions.ASTAR, AlgorithmOptions.ASTAR_BI, AlgorithmOptions.DIJKSTRA,
-		        AlgorithmOptions.DIJKSTRA_BI, AlgorithmOptions.DIJKSTRA_ONE_TO_MANY))
-		{
-			String errMesg = buildErrorMessageString(algoStr, "algorithm", AlgorithmOptions.ASTAR,
-			        AlgorithmOptions.ASTAR_BI, AlgorithmOptions.DIJKSTRA,
-			        AlgorithmOptions.DIJKSTRA_BI, AlgorithmOptions.DIJKSTRA_ONE_TO_MANY);
-			ghRsp = new GHResponse().addError(new IllegalArgumentException(errMesg));
-		} else if (!new BooleanValidator().isValid(instructionsString))
-		{
-			String errMesg = buildBooleanErrorMessageString(instructionsString, "instructions");
-			ghRsp = new GHResponse().addError(new IllegalArgumentException(errMesg));
-		} else if (!new BooleanValidator().isValid(pointsEncodedString))
-		{
-			String errMesg = buildBooleanErrorMessageString(pointsEncodedString, "points_encoded");
-			ghRsp = new GHResponse().addError(new IllegalArgumentException(errMesg));
-		} else if (!new BooleanValidator().isValid(calcPointsString))
-		{
-			String errMesg = buildBooleanErrorMessageString(calcPointsString, "calc_points");
-			ghRsp = new GHResponse().addError(new IllegalArgumentException(errMesg));
-		} else if (!new BooleanValidator().isValid(debugString))
-		{
-			String errMesg = buildBooleanErrorMessageString(debugString, "debug");
-			ghRsp = new GHResponse().addError(new IllegalArgumentException(errMesg));
-		} else if (!new BooleanValidator().isValid(prettyString))
-		{
-			String errMesg = buildBooleanErrorMessageString(prettyString, "pretty");
-			ghRsp = new GHResponse().addError(new IllegalArgumentException(errMesg));
-		} else if (!hopper.getEncodingManager().supports(vehicleStr))
-		{
-			String supported = hopper.getGraph().getEncodingManager().toString();
-			String errMesg = String.format(
-			        "Vehicle %s is not a valid vehicle. Valid vehicles are %s", vehicleStr,
-			        supported);
-			ghRsp = new GHResponse().addError(new IllegalArgumentException(errMesg));
-		} else if (enableElevation && !hopper.hasElevation())
-		{
-			ghRsp = new GHResponse().addError(new IllegalArgumentException(
-			        "Elevation not supported!"));
-		} else
+		try
 		{
-			FlagEncoder algoVehicle = hopper.getEncodingManager().getEncoder(vehicleStr);
+			ApiResource.ROUTE.checkAllRequestParameters(httpReq);
+
+			// we can reduce the path length based on the maximum differences to the original
+			// coordinates
 
-			// Lots of lovely braces. I will tidy this up next week... promise!
-			if (avoidancesString != null)
+			if (!new CaseInsensitiveStringListValidator()
+			        .isValid(localeStr, TranslationMap.LOCALES))
+			{
+				String errMesg = buildErrorMessageString(localeStr, "locale",
+				        TranslationMap.LOCALES);
+				ghRsp = new GHResponse().addError(new IllegalArgumentException(errMesg.toString()));
+			} else if (!new CaseInsensitiveStringListValidator().isValid(algoStr,
+			        AlgorithmOptions.ASTAR, AlgorithmOptions.ASTAR_BI, AlgorithmOptions.DIJKSTRA,
+			        AlgorithmOptions.DIJKSTRA_BI, AlgorithmOptions.DIJKSTRA_ONE_TO_MANY))
+			{
+				String errMesg = buildErrorMessageString(algoStr, "algorithm",
+				        AlgorithmOptions.ASTAR, AlgorithmOptions.ASTAR_BI,
+				        AlgorithmOptions.DIJKSTRA, AlgorithmOptions.DIJKSTRA_BI,
+				        AlgorithmOptions.DIJKSTRA_ONE_TO_MANY);
+				ghRsp = new GHResponse().addError(new IllegalArgumentException(errMesg));
+			} else if (!new BooleanValidator().isValid(instructionsString))
+			{
+				String errMesg = buildBooleanErrorMessageString(instructionsString, "instructions");
+				ghRsp = new GHResponse().addError(new IllegalArgumentException(errMesg));
+			} else if (!new BooleanValidator().isValid(pointsEncodedString))
 			{
-				System.out.println("Avoidances for " + algoVehicle);
-				List<String> allowedAvoidances = new ArrayList<>();
-				// Check Avoidances
-				if (algoVehicle instanceof AbstractFlagEncoder)
+				String errMesg = buildBooleanErrorMessageString(pointsEncodedString,
+				        "points_encoded");
+				ghRsp = new GHResponse().addError(new IllegalArgumentException(errMesg));
+			} else if (!new BooleanValidator().isValid(calcPointsString))
+			{
+				String errMesg = buildBooleanErrorMessageString(calcPointsString, "calc_points");
+				ghRsp = new GHResponse().addError(new IllegalArgumentException(errMesg));
+			} else if (!new BooleanValidator().isValid(debugString))
+			{
+				String errMesg = buildBooleanErrorMessageString(debugString, "debug");
+				ghRsp = new GHResponse().addError(new IllegalArgumentException(errMesg));
+			} else if (!new BooleanValidator().isValid(prettyString))
+			{
+				String errMesg = buildBooleanErrorMessageString(prettyString, "pretty");
+				ghRsp = new GHResponse().addError(new IllegalArgumentException(errMesg));
+			} else if (!hopper.getEncodingManager().supports(vehicleStr))
+			{
+				String supported = hopper.getGraph().getEncodingManager().toString();
+				String errMesg = String.format(
+				        "Vehicle %s is not a valid vehicle. Valid vehicles are %s", vehicleStr,
+				        supported);
+				ghRsp = new GHResponse().addError(new IllegalArgumentException(errMesg));
+			} else if (enableElevation && !hopper.hasElevation())
+			{
+				ghRsp = new GHResponse().addError(new IllegalArgumentException(
+				        "Elevation not supported!"));
+			} else
+			{
+				FlagEncoder algoVehicle = hopper.getEncodingManager().getEncoder(vehicleStr);
+
+				// Lots of lovely braces. I will tidy this up next week... promise!
+				if (avoidancesString != null)
 				{
-					AbstractFlagEncoder abstractFlagEncoder = (AbstractFlagEncoder) algoVehicle;
-					List<EncoderDecorator> encoderDecorators = abstractFlagEncoder
-					        .getEncoderDecorators();
-					if (encoderDecorators != null)
+					System.out.println("Avoidances for " + algoVehicle);
+					List<String> allowedAvoidances = new ArrayList<>();
+					// Check Avoidances
+					if (algoVehicle instanceof AbstractFlagEncoder)
 					{
-						for (EncoderDecorator encoderDecorator : encoderDecorators)
+						AbstractFlagEncoder abstractFlagEncoder = (AbstractFlagEncoder) algoVehicle;
+						List<EncoderDecorator> encoderDecorators = abstractFlagEncoder
+						        .getEncoderDecorators();
+						if (encoderDecorators != null)
 						{
-							if (encoderDecorator instanceof AbstractAvoidanceDecorator)
+							for (EncoderDecorator encoderDecorator : encoderDecorators)
 							{
-								AbstractAvoidanceDecorator abstractAvoidanceDecorator = (AbstractAvoidanceDecorator) encoderDecorator;
-								allowedAvoidances.addAll(Arrays.asList(abstractAvoidanceDecorator
-								        .getEdgeAttributesOfInterestNames()));
+								if (encoderDecorator instanceof AbstractAvoidanceDecorator)
+								{
+									AbstractAvoidanceDecorator abstractAvoidanceDecorator = (AbstractAvoidanceDecorator) encoderDecorator;
+									allowedAvoidances.addAll(Arrays
+									        .asList(abstractAvoidanceDecorator
+									                .getEdgeAttributesOfInterestNames()));
+								}
 							}
 						}
 					}
+					if (!allowedAvoidances.contains(avoidancesString))
+					{
+						String errMesg = buildErrorMessageString(avoidancesString, "avoidances",
+						        allowedAvoidances);
+						ghRsp = new GHResponse().addError(new IllegalArgumentException(errMesg
+						        .toString()));
+					}
 				}
-				if (!allowedAvoidances.contains(avoidancesString))
+
+				if (ghRsp == null)
 				{
-					String errMesg = buildErrorMessageString(avoidancesString, "avoidances",
-					        allowedAvoidances);
-					ghRsp = new GHResponse().addError(new IllegalArgumentException(errMesg
-					        .toString()));
+					GHRequest request = new GHRequest(infoPoints);
+
+					initHints(request, httpReq.getParameterMap());
+					request.setVehicle(algoVehicle.toString()).setWeighting(weighting)
+					        .setAlgorithm(algoStr).setLocale(localeStr).getHints()
+					        .put("calcPoints", calcPoints).put("instructions", enableInstructions)
+					        .put("wayPointMaxDistance", minPathPrecision);
+					ghRsp = hopper.route(request);
 				}
 			}
-
-			if (ghRsp == null)
-			{
-				GHRequest request = new GHRequest(infoPoints);
-
-				initHints(request, httpReq.getParameterMap());
-				request.setVehicle(algoVehicle.toString()).setWeighting(weighting)
-				        .setAlgorithm(algoStr).setLocale(localeStr).getHints()
-				        .put("calcPoints", calcPoints).put("instructions", enableInstructions)
-				        .put("wayPointMaxDistance", minPathPrecision);
-
-				ghRsp = hopper.route(request);
-			}
+		} catch (NoSuchParameterException | MissingParameterException | InvalidParameterException e)
+		{
+			ghRsp = new GHResponse().addError(e);
 		}
-
 		float took = sw.stop().getSeconds();
 		String infoStr = httpReq.getRemoteAddr() + " " + httpReq.getLocale() + " "
 		        + httpReq.getHeader("User-Agent");
@@ -357,13 +367,14 @@ String errorsToXML( List<Throwable> list )
 			json.put("error", map);
 			Throwable throwable = rsp.getErrors().get(0);
 			map.put("message", throwable.getMessage());
-			map.put("statuscode", "" + HttpStatus.BAD_REQUEST_400);
+			map.put("statuscode", ((APIException) throwable).getStatusCode().toString());
 			List<Map<String, String>> list = new ArrayList<Map<String, String>>();
 			for (Throwable t : rsp.getErrors())
 			{
 				Map<String, String> hintMap = new HashMap<String, String>();
 				hintMap.put("message", t.getMessage());
-				if(internalErrorsAllowed) {
+				if (internalErrorsAllowed)
+				{
 					hintMap.put("details", t.getClass().getName());
 				}
 				list.add(hintMap);
diff --git a/web/src/main/webapp/js/ghrequest.js b/web/src/main/webapp/js/ghrequest.js
index 9606555e93..47e3a09ad5 100644
--- a/web/src/main/webapp/js/ghrequest.js
+++ b/web/src/main/webapp/js/ghrequest.js
@@ -61,7 +61,6 @@ GHRequest = function (host) {
     // Our routing service is also free for certain applications or smaller volume. Be fair, grab an API key and support us:
     // https://graphhopper.com/#directions-api Misuse of API keys that you don't own is prohibited and you'll be blocked.                    
     ////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
-    this.key = "Cmmtvx01R56rdHcQQo7VjI6rgPgxuFLvqI8cR31u";
 
     // register events
     this.route.addListener('route.add', function (evt) {
@@ -400,7 +399,7 @@ GHRequest.prototype.createGeocodeURL = function (host, prevIndex) {
     if (host)
         tmpHost = host;
 
-    var path = this.createPath(tmpHost + "/geocode?limit=6&type=" + this.dataType + "&key=" + this.key);
+    var path = this.createPath(tmpHost + "/geocode?limit=6&type=" + this.dataType);
     if (prevIndex >= 0 && prevIndex < this.route.size()) {
         var point = this.route.getIndex(prevIndex);
         path += "&lat=" + point.lat + "&lon=" + point.lng;
@@ -409,11 +408,11 @@ GHRequest.prototype.createGeocodeURL = function (host, prevIndex) {
 };
 
 GHRequest.prototype.createURL = function () {
-    return this.createPath(this.host + "/route?" + this.createPointParams(false) + "&type=" + this.dataType + "&key=" + this.key);
+    return this.createPath(this.host + "/route?" + this.createPointParams(false) + "&type=" + this.dataType);
 };
 
 GHRequest.prototype.createGPXURL = function () {
-    return this.createPath(this.host + "/route?" + this.createPointParams(false) + "&type=gpx&key=" + this.key);
+    return this.createPath(this.host + "/route?" + this.createPointParams(false) + "&type=gpx);
 };
 
 GHRequest.prototype.createHistoryURL = function () {
@@ -436,7 +435,7 @@ GHRequest.prototype.createPointParams = function (useRawInput) {
 };
 
 GHRequest.prototype.createPath = function (url) {
-    if (this.vehicle && this.vehicle !== "car")
+    if (this.vehicle)
         url += "&vehicle=" + this.vehicle;
     // fastest or shortest
     var checkedValue = ""; 
@@ -589,7 +588,7 @@ GHRequest.prototype.doRequest = function (url, callback) {
 };
 
 GHRequest.prototype.getInfo = function () {
-    var url = this.host + "/info?type=" + this.dataType + "&key=" + this.key;
+    var url = this.host + "/info?type=" + this.dataType;
     log(url);
     return $.ajax({
         url: url,
@@ -669,7 +668,7 @@ GHRequest.prototype.fetchTranslationMap = function (urlLocaleParam) {
     if (!urlLocaleParam)
         // let servlet figure out the locale from the Accept-Language header
         urlLocaleParam = "";
-    var url = this.host + "/i18n/" + urlLocaleParam + "?type=" + this.dataType + "&key=" + this.key;
+    var url = this.host + "/i18n/" + urlLocaleParam + "?type=" + this.dataType;
     log(url);
     return $.ajax({
         url: url,
diff --git a/web/src/test/java/com/graphhopper/http/GraphHopperServletTest.java b/web/src/test/java/com/graphhopper/http/GraphHopperServletTest.java
new file mode 100644
index 0000000000..078a564293
--- /dev/null
+++ b/web/src/test/java/com/graphhopper/http/GraphHopperServletTest.java
@@ -0,0 +1,38 @@
+package com.graphhopper.http;
+
+import static javax.servlet.http.HttpServletResponse.SC_BAD_REQUEST;
+import static org.mockito.Mockito.mock;
+import static org.mockito.Mockito.verify;
+import static org.mockito.Mockito.when;
+
+import java.io.IOException;
+import java.io.PrintWriter;
+
+import javax.servlet.ServletException;
+import javax.servlet.http.HttpServletRequest;
+import javax.servlet.http.HttpServletResponse;
+
+import org.junit.Test;
+
+public class GraphHopperServletTest
+{
+
+	ApiResource apiResource = ApiResource.ROUTE;
+
+	@Test
+	public void testErrorStatusCode() throws ServletException, IOException
+	{
+		HttpServletRequest httpServletRequest = mock(HttpServletRequest.class);
+
+		when(httpServletRequest.getParameter("vehicle")).thenReturn("car");
+		when(httpServletRequest.getParameter("point")).thenReturn(null);
+
+		GraphHopperServlet servlet = new GraphHopperServlet();
+		HttpServletResponse httpServletResponse = mock(HttpServletResponse.class);
+		when(httpServletResponse.getWriter()).thenReturn(mock(PrintWriter.class));
+		servlet.doGet(httpServletRequest, httpServletResponse);
+		verify(httpServletResponse).setStatus(SC_BAD_REQUEST);
+
+	}
+
+}
