diff --git a/icepick-processor/src/clojure/icepick/processor.clj b/icepick-processor/src/clojure/icepick/processor.clj
index 99ebbe3..0d8646f 100644
--- a/icepick-processor/src/clojure/icepick/processor.clj
+++ b/icepick-processor/src/clojure/icepick/processor.clj
@@ -67,7 +67,7 @@ public class {{name}}<T extends {{target}}> extends {{parent}}<T> {
   private final static Helper H = new Helper(\"{{package}}.{{name}}.\", BUNDLERS);
 
   {{^view?}}
-  public void restore(T target, Bundle state) {
+  @Override public void restore(T target, Bundle state) {
     if (state == null) return;
     {{#fields}}
     target.{{name}} = H.get{{method}}(state, \"{{name}}\");
@@ -75,7 +75,7 @@ public class {{name}}<T extends {{target}}> extends {{parent}}<T> {
     super.restore(target, state);
   }
 
-  public void save(T target, Bundle state) {
+  @Override public void save(T target, Bundle state) {
     super.save(target, state);
     {{#fields}}
     H.put{{method}}(state, \"{{name}}\", target.{{name}});
@@ -83,7 +83,7 @@ public class {{name}}<T extends {{target}}> extends {{parent}}<T> {
   }
   {{/view?}}
   {{#view?}}
-  public Parcelable restore(T target, Parcelable p) {
+  @Override public Parcelable restore(T target, Parcelable p) {
     Bundle state = (Bundle) p;
     {{#fields}}
     target.{{name}} = H.get{{method}}(state, \"{{name}}\");
@@ -91,7 +91,7 @@ public class {{name}}<T extends {{target}}> extends {{parent}}<T> {
     return super.restore(target, H.getParent(state));
   }
 
-  public Parcelable save(T target, Parcelable p) {
+  @Override public Parcelable save(T target, Parcelable p) {
     Bundle state = H.putParent(super.save(target, p));
     {{#fields}}
     H.put{{method}}(state, \"{{name}}\", target.{{name}});
diff --git a/icepick-processor/test/test/boxed/Test$$Icepick.java b/icepick-processor/test/test/boxed/Test$$Icepick.java
index b76bf9a..16f4622 100644
--- a/icepick-processor/test/test/boxed/Test$$Icepick.java
+++ b/icepick-processor/test/test/boxed/Test$$Icepick.java
@@ -15,13 +15,13 @@
 
     private final static Helper H = new Helper("test.boxed.Test$$Icepick.", BUNDLERS);
 
-    public void restore(T target, Bundle state) {
+    @Override public void restore(T target, Bundle state) {
         if (state == null) return;
         target.f1 = H.getBoxedFloat(state, "f1");
         super.restore(target, state);
     }
 
-    public void save(T target, Bundle state) {
+    @Override public void save(T target, Bundle state) {
         super.save(target, state);
         H.putBoxedFloat(state, "f1", target.f1);
     }
diff --git a/icepick-processor/test/test/bundler/Test$$Icepick.java b/icepick-processor/test/test/bundler/Test$$Icepick.java
index c6a5609..ffb8668 100644
--- a/icepick-processor/test/test/bundler/Test$$Icepick.java
+++ b/icepick-processor/test/test/bundler/Test$$Icepick.java
@@ -17,14 +17,14 @@
 
     private final static Helper H = new Helper("test.bundler.Test$$Icepick.", BUNDLERS);
 
-    public void restore(T target, Bundle state) {
+    @Override public void restore(T target, Bundle state) {
         if (state == null) return;
         target.f1 = H.getWithBundler(state, "f1");
         target.f2 = H.getWithBundler(state, "f2");
         super.restore(target, state);
     }
 
-    public void save(T target, Bundle state) {
+    @Override public void save(T target, Bundle state) {
         super.save(target, state);
         H.putWithBundler(state, "f1", target.f1);
         H.putWithBundler(state, "f2", target.f2);
diff --git a/icepick-processor/test/test/generics/Test2$$Icepick.java b/icepick-processor/test/test/generics/Test2$$Icepick.java
index 497795c..04f7b09 100644
--- a/icepick-processor/test/test/generics/Test2$$Icepick.java
+++ b/icepick-processor/test/test/generics/Test2$$Icepick.java
@@ -15,13 +15,13 @@
 
     private final static Helper H = new Helper("test.generics.Test2$$Icepick.", BUNDLERS);
 
-    public void restore(T target, Bundle state) {
+    @Override public void restore(T target, Bundle state) {
         if (state == null) return;
         target.f1 = H.getParcelable(state, "f1");
         super.restore(target, state);
     }
 
-    public void save(T target, Bundle state) {
+    @Override public void save(T target, Bundle state) {
         super.save(target, state);
         H.putParcelable(state, "f1", target.f1);
     }
diff --git a/icepick-processor/test/test/generics/Test3$$Icepick.java b/icepick-processor/test/test/generics/Test3$$Icepick.java
index 933855b..da728c7 100644
--- a/icepick-processor/test/test/generics/Test3$$Icepick.java
+++ b/icepick-processor/test/test/generics/Test3$$Icepick.java
@@ -15,14 +15,14 @@
 
     private final static Helper H = new Helper("test.generics.Test3$$Icepick.", BUNDLERS);
 
-    public void restore(T target, Bundle state) {
+    @Override public void restore(T target, Bundle state) {
         if (state == null) return;
         target.f1 = H.getParcelableArrayList(state, "f1");
         target.f2 = H.getSparseParcelableArray(state, "f2");
         super.restore(target, state);
     }
 
-    public void save(T target, Bundle state) {
+    @Override public void save(T target, Bundle state) {
         super.save(target, state);
         H.putParcelableArrayList(state, "f1", target.f1);
         H.putSparseParcelableArray(state, "f2", target.f2);
diff --git a/icepick-processor/test/test/generics/Test4$$Icepick.java b/icepick-processor/test/test/generics/Test4$$Icepick.java
index e152f97..b1cf861 100644
--- a/icepick-processor/test/test/generics/Test4$$Icepick.java
+++ b/icepick-processor/test/test/generics/Test4$$Icepick.java
@@ -15,7 +15,7 @@
 
     private final static Helper H = new Helper("test.generics.Test4$$Icepick.", BUNDLERS);
 
-    public void restore(T target, Bundle state) {
+    @Override public void restore(T target, Bundle state) {
         if (state == null) return;
         target.f1 = H.getSerializable(state, "f1");
         target.f2 = H.getSerializable(state, "f2");
@@ -25,7 +25,7 @@ public void restore(T target, Bundle state) {
         super.restore(target, state);
     }
 
-    public void save(T target, Bundle state) {
+    @Override public void save(T target, Bundle state) {
         super.save(target, state);
         H.putSerializable(state, "f1", target.f1);
         H.putSerializable(state, "f2", target.f2);
diff --git a/icepick-processor/test/test/parent/Test$$Icepick.java b/icepick-processor/test/test/parent/Test$$Icepick.java
index 15fb996..2bb15bf 100644
--- a/icepick-processor/test/test/parent/Test$$Icepick.java
+++ b/icepick-processor/test/test/parent/Test$$Icepick.java
@@ -16,13 +16,13 @@
 
     private final static Helper H = new Helper("test.parent.Test$$Icepick.", BUNDLERS);
 
-    public void restore(T target, Bundle state) {
+    @Override public void restore(T target, Bundle state) {
         if (state == null) return;
         target.f1 = H.getParcelable(state, "f1");
         super.restore(target, state);
     }
 
-    public void save(T target, Bundle state) {
+    @Override public void save(T target, Bundle state) {
         super.save(target, state);
         H.putParcelable(state, "f1", target.f1);
     }
diff --git a/icepick-processor/test/test/parent/Test$Inner$$Icepick.java b/icepick-processor/test/test/parent/Test$Inner$$Icepick.java
index a03be60..c9df977 100644
--- a/icepick-processor/test/test/parent/Test$Inner$$Icepick.java
+++ b/icepick-processor/test/test/parent/Test$Inner$$Icepick.java
@@ -16,13 +16,13 @@
 
     private final static Helper H = new Helper("test.parent.Test$Inner$$Icepick.", BUNDLERS);
 
-    public void restore(T target, Bundle state) {
+    @Override public void restore(T target, Bundle state) {
         if (state == null) return;
         target.f2 = H.getString(state, "f2");
         super.restore(target, state);
     }
 
-    public void save(T target, Bundle state) {
+    @Override public void save(T target, Bundle state) {
         super.save(target, state);
         H.putString(state, "f2", target.f2);
     }
diff --git a/icepick-processor/test/test/simple/Test$$Icepick.java b/icepick-processor/test/test/simple/Test$$Icepick.java
index c6ecd3b..0231700 100644
--- a/icepick-processor/test/test/simple/Test$$Icepick.java
+++ b/icepick-processor/test/test/simple/Test$$Icepick.java
@@ -16,7 +16,7 @@
 
     private final static Helper H = new Helper("test.simple.Test$$Icepick.", BUNDLERS);
 
-    public void restore(T target, Bundle state) {
+    @Override public void restore(T target, Bundle state) {
         if (state == null) return;
         target.f1 = H.getInt(state, "f1");
         target.f2 = H.getBoolean(state, "f2");
@@ -24,7 +24,7 @@ public void restore(T target, Bundle state) {
         super.restore(target, state);
     }
 
-    public void save(T target, Bundle state) {
+    @Override public void save(T target, Bundle state) {
         super.save(target, state);
         H.putInt(state, "f1", target.f1);
         H.putBoolean(state, "f2", target.f2);
diff --git a/icepick-processor/test/test/views/Test$$Icepick.java b/icepick-processor/test/test/views/Test$$Icepick.java
index 64798a1..793b160 100644
--- a/icepick-processor/test/test/views/Test$$Icepick.java
+++ b/icepick-processor/test/test/views/Test$$Icepick.java
@@ -16,13 +16,13 @@
 
     private final static Helper H = new Helper("test.views.Test$$Icepick.", BUNDLERS);
 
-    public Parcelable restore(T target, Parcelable p) {
+    @Override public Parcelable restore(T target, Parcelable p) {
         Bundle state = (Bundle) p;
         target.f1 = H.getParcelable(state, "f1");
         return super.restore(target, H.getParent(state));
     }
 
-    public Parcelable save(T target, Parcelable p) {
+    @Override public Parcelable save(T target, Parcelable p) {
         Bundle state = H.putParent(super.save(target, p));
         H.putParcelable(state, "f1", target.f1);
         return state;
diff --git a/icepick-processor/test/test/views/Test$Inner$$Icepick.java b/icepick-processor/test/test/views/Test$Inner$$Icepick.java
index 98809cd..9a88529 100644
--- a/icepick-processor/test/test/views/Test$Inner$$Icepick.java
+++ b/icepick-processor/test/test/views/Test$Inner$$Icepick.java
@@ -17,13 +17,13 @@
 
     private final static Helper H = new Helper("test.views.Test$Inner$$Icepick.", BUNDLERS);
 
-    public Parcelable restore(T target, Parcelable p) {
+    @Override public Parcelable restore(T target, Parcelable p) {
         Bundle state = (Bundle) p;
         target.f2 = H.getString(state, "f2");
         return super.restore(target, H.getParent(state));
     }
 
-    public Parcelable save(T target, Parcelable p) {
+    @Override public Parcelable save(T target, Parcelable p) {
         Bundle state = H.putParent(super.save(target, p));
         H.putString(state, "f2", target.f2);
         return state;
