diff --git a/otto-sample/src/main/java/com/squareup/otto/sample/LocationActivity.java b/otto-sample/src/main/java/com/squareup/otto/sample/LocationActivity.java
index 0d5704a..671ae32 100644
--- a/otto-sample/src/main/java/com/squareup/otto/sample/LocationActivity.java
+++ b/otto-sample/src/main/java/com/squareup/otto/sample/LocationActivity.java
@@ -19,6 +19,7 @@
 import android.os.Bundle;
 import android.support.v4.app.FragmentActivity;
 import android.view.View;
+
 import com.squareup.otto.Produce;
 
 import java.util.Random;
@@ -26,55 +27,63 @@
 import static android.view.View.OnClickListener;
 
 public class LocationActivity extends FragmentActivity {
-  public static final float DEFAULT_LAT = 40.440866f;
-  public static final float DEFAULT_LON = -79.994085f;
-  private static final float OFFSET = 0.1f;
-  private static final Random RANDOM = new Random();
-
-  private static float lastLatitude = DEFAULT_LAT;
-  private static float lastLongitude = DEFAULT_LON;
-
-  @Override protected void onCreate(Bundle savedInstanceState) {
-    super.onCreate(savedInstanceState);
-    setContentView(R.layout.location_history);
-
-    findViewById(R.id.clear_location).setOnClickListener(new OnClickListener() {
-      @Override public void onClick(View v) {
-        // Tell everyone to clear their location history.
-        BusProvider.getInstance().post(new LocationClearEvent());
-
-        // Post new location event for the default location.
-        lastLatitude = DEFAULT_LAT;
-        lastLongitude = DEFAULT_LON;
-        BusProvider.getInstance().post(produceLocationEvent());
-      }
-    });
-
-    findViewById(R.id.move_location).setOnClickListener(new OnClickListener() {
-      @Override public void onClick(View v) {
-        lastLatitude += (RANDOM.nextFloat() * OFFSET * 2) - OFFSET;
-        lastLongitude += (RANDOM.nextFloat() * OFFSET * 2) - OFFSET;
-        BusProvider.getInstance().post(produceLocationEvent());
-      }
-    });
-  }
-
-  @Override protected void onResume() {
-    super.onResume();
-
-    // Register ourselves so that we can provide the initial value.
-    BusProvider.getInstance().register(this);
-  }
-
-  @Override protected void onPause() {
-    super.onPause();
-
-    // Always unregister when an object no longer should be on the bus.
-    BusProvider.getInstance().unregister(this);
-  }
-
-  @Produce public LocationChangedEvent produceLocationEvent() {
-    // Provide an initial value for location based on the last known position.
-    return new LocationChangedEvent(lastLatitude, lastLongitude);
-  }
+    //  public static final float DEFAULT_LAT = 40.440866f;
+//  public static final float DEFAULT_LON = -79.994085f;
+    public static final float DEFAULT_LAT = 39.990464f;
+    public static final float DEFAULT_LON = 116.481485f;
+    private static final float OFFSET = 0.1f;
+    private static final Random RANDOM = new Random();
+
+    private static float lastLatitude = DEFAULT_LAT;
+    private static float lastLongitude = DEFAULT_LON;
+
+    @Override
+    protected void onCreate(Bundle savedInstanceState) {
+        super.onCreate(savedInstanceState);
+        setContentView(R.layout.location_history);
+
+        findViewById(R.id.clear_location).setOnClickListener(new OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                // Tell everyone to clear their location history.
+                BusProvider.getInstance().post(new LocationClearEvent());
+
+                // Post new location event for the default location.
+                lastLatitude = DEFAULT_LAT;
+                lastLongitude = DEFAULT_LON;
+                BusProvider.getInstance().post(produceLocationEvent());
+            }
+        });
+
+        findViewById(R.id.move_location).setOnClickListener(new OnClickListener() {
+            @Override
+            public void onClick(View v) {
+                lastLatitude += (RANDOM.nextFloat() * OFFSET * 2) - OFFSET;
+                lastLongitude += (RANDOM.nextFloat() * OFFSET * 2) - OFFSET;
+                BusProvider.getInstance().post(produceLocationEvent());
+            }
+        });
+    }
+
+    @Override
+    protected void onResume() {
+        super.onResume();
+
+        // Register ourselves so that we can provide the initial value.
+        BusProvider.getInstance().register(this);
+    }
+
+    @Override
+    protected void onPause() {
+        super.onPause();
+
+        // Always unregister when an object no longer should be on the bus.
+        BusProvider.getInstance().unregister(this);
+    }
+
+    @Produce
+    public LocationChangedEvent produceLocationEvent() {
+        // Provide an initial value for location based on the last known position.
+        return new LocationChangedEvent(lastLatitude, lastLongitude);
+    }
 }
diff --git a/otto-sample/src/main/java/com/squareup/otto/sample/LocationMapFragment.java b/otto-sample/src/main/java/com/squareup/otto/sample/LocationMapFragment.java
index ced9eb1..6795d19 100644
--- a/otto-sample/src/main/java/com/squareup/otto/sample/LocationMapFragment.java
+++ b/otto-sample/src/main/java/com/squareup/otto/sample/LocationMapFragment.java
@@ -34,8 +34,10 @@
 
 /** Display a map centered on the last known location. */
 public class LocationMapFragment extends Fragment {
+//  private static final String URL =
+//      "https://maps.googleapis.com/maps/api/staticmap?sensor=false&size=400x400&zoom=13&center=%s,%s";
   private static final String URL =
-      "https://maps.googleapis.com/maps/api/staticmap?sensor=false&size=400x400&zoom=13&center=%s,%s";
+          "http://restapi.amap.com/v3/staticmap?key=ee95e52bf08006f63fd29bcfbcf21df0&size=400*400&zoom=13&location=%s,%s";
   private static DownloadTask downloadTask;
 
   private ImageView imageView;
@@ -70,7 +72,7 @@
 
     // Trigger a background download of an image for the new location.
     downloadTask = new DownloadTask();
-    downloadTask.execute(String.format(URL, event.lat, event.lon));
+    downloadTask.execute(String.format(URL, event.lon, event.lat));
   }
 
   @Subscribe public void onImageAvailable(ImageAvailableEvent event) {
