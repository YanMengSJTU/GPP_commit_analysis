diff --git a/otto-sample/src/main/java/com/squareup/otto/sample/BusProvider.java b/otto-sample/src/main/java/com/squareup/otto/sample/BusProvider.java
index 9ab71c1..1feaf6a 100644
--- a/otto-sample/src/main/java/com/squareup/otto/sample/BusProvider.java
+++ b/otto-sample/src/main/java/com/squareup/otto/sample/BusProvider.java
@@ -16,16 +16,38 @@
 
 package com.squareup.otto.sample;
 
+import android.util.Log;
+
 import com.squareup.otto.Bus;
+import com.squareup.otto.EventCallBack;
 
 /**
  * Maintains a singleton instance for obtaining the bus. Ideally this would be replaced with a more efficient means
  * such as through injection directly into interested classes.
  */
 public final class BusProvider {
-  private static final Bus BUS = new Bus();
+  private static final Bus BUS;
+  private static final String OTTO_LOG_TAG = "Otto";
+
+    static {
+        BUS = new Bus();
+        Bus.setEventCallbacks(new EventCallBack() {
+            @Override
+            public void onEventFired(String originClass, String originMethod, Object eventFired) {
+                Log.v(OTTO_LOG_TAG, "Event" + eventFired.getClass().getCanonicalName() + " Fired From: " +
+                        originClass + " By" + originMethod);
+            }
+
+            @Override
+            public void onEventReceived(String receiverClass, String receiverMethod, Object eventFired) {
+                Log.v(OTTO_LOG_TAG, "Event" + eventFired.getClass().getCanonicalName() + " Received In: " +
+                        receiverClass + " By" + receiverMethod);
+            }
+        });
+    }
+
 
-  public static Bus getInstance() {
+    public static Bus getInstance() {
     return BUS;
   }
 
diff --git a/otto/src/main/java/com/squareup/otto/Bus.java b/otto/src/main/java/com/squareup/otto/Bus.java
index 5b5745f..ad892b1 100644
--- a/otto/src/main/java/com/squareup/otto/Bus.java
+++ b/otto/src/main/java/com/squareup/otto/Bus.java
@@ -87,8 +87,9 @@
  */
 public class Bus {
   public static final String DEFAULT_IDENTIFIER = "default";
+  private static EventCallBack eventCallBack;
 
-  /** All registered event handlers, indexed by event type. */
+    /** All registered event handlers, indexed by event type. */
   private final ConcurrentMap<Class<?>, Set<EventHandler>> handlersByType =
           new ConcurrentHashMap<Class<?>, Set<EventHandler>>();
 
@@ -338,6 +339,22 @@ public void post(Object event) {
     dispatchQueuedEvents();
   }
 
+  public static void setEventCallbacks(EventCallBack eventCallbacks) {
+      eventCallBack = eventCallbacks;
+  }
+
+  public static void invokeProducerCallBack(String producerClass, String producerMethod, Object producedEvent) {
+      if (eventCallBack != null) {
+            eventCallBack.onEventFired(producerClass, producerMethod, producedEvent);
+      }
+  }
+
+  public static void invokeReceiverCallBack(String receiverClass, String receiverMethod, Object receivedEvent) {
+      if (eventCallBack != null) {
+            eventCallBack.onEventReceived(receiverClass, receiverMethod, receivedEvent);
+      }
+  }
+
   /**
    * Queue the {@code event} for dispatch during {@link #dispatchQueuedEvents()}. Events are queued in-order of
    * occurrence so they can be dispatched in the same order.
diff --git a/otto/src/main/java/com/squareup/otto/EventCallBack.java b/otto/src/main/java/com/squareup/otto/EventCallBack.java
new file mode 100644
index 0000000..023c623
--- /dev/null
+++ b/otto/src/main/java/com/squareup/otto/EventCallBack.java
@@ -0,0 +1,13 @@
+package com.squareup.otto;
+
+/**
+ * NCR
+ * Created by Habib on 2/17/15.
+ */
+public interface EventCallBack {
+
+    void onEventFired(String originClass, String originMethod, Object eventFired);
+
+    void onEventReceived(String receiverClass, String receiverMethod, Object eventFired);
+
+}
\ No newline at end of file
diff --git a/otto/src/main/java/com/squareup/otto/EventHandler.java b/otto/src/main/java/com/squareup/otto/EventHandler.java
index 843a31b..6185539 100644
--- a/otto/src/main/java/com/squareup/otto/EventHandler.java
+++ b/otto/src/main/java/com/squareup/otto/EventHandler.java
@@ -87,6 +87,7 @@ public void handleEvent(Object event) throws InvocationTargetException {
     }
     try {
       method.invoke(target, event);
+      Bus.invokeReceiverCallBack(method.getDeclaringClass().getCanonicalName(), method.getName(), event);
     } catch (IllegalAccessException e) {
       throw new AssertionError(e);
     } catch (InvocationTargetException e) {
diff --git a/otto/src/main/java/com/squareup/otto/EventProducer.java b/otto/src/main/java/com/squareup/otto/EventProducer.java
index 3186170..cb1236a 100644
--- a/otto/src/main/java/com/squareup/otto/EventProducer.java
+++ b/otto/src/main/java/com/squareup/otto/EventProducer.java
@@ -81,7 +81,9 @@ public Object produceEvent() throws InvocationTargetException {
       throw new IllegalStateException(toString() + " has been invalidated and can no longer produce events.");
     }
     try {
-      return method.invoke(target);
+      Object obj =  method.invoke(target);
+      Bus.invokeProducerCallBack(method.getDeclaringClass().getCanonicalName(), method.getName(), target);
+      return obj;
     } catch (IllegalAccessException e) {
       throw new AssertionError(e);
     } catch (InvocationTargetException e) {
