diff --git a/otto-processor/pom.xml b/otto-processor/pom.xml
new file mode 100644
index 0000000..e59fe73
--- /dev/null
+++ b/otto-processor/pom.xml
@@ -0,0 +1,69 @@
+<?xml version="1.0" encoding="UTF-8"?>
+<!--
+ Copyright (C) 2012 Square, Inc.
+
+  Licensed under the Apache License, Version 2.0 (the "License");
+  you may not use this file except in compliance with the License.
+  You may obtain a copy of the License at
+
+       http://www.apache.org/licenses/LICENSE-2.0
+
+  Unless required by applicable law or agreed to in writing, software
+  distributed under the License is distributed on an "AS IS" BASIS,
+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+  See the License for the specific language governing permissions and
+  limitations under the License.
+-->
+<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">
+  <modelVersion>4.0.0</modelVersion>
+
+  <parent>
+    <groupId>com.squareup</groupId>
+    <artifactId>otto-parent</artifactId>
+    <version>1.3.9-SNAPSHOT</version>
+    <relativePath>../pom.xml</relativePath>
+  </parent>
+
+  <groupId>com.squareup</groupId>
+  <artifactId>otto-processor</artifactId>
+  <packaging>jar</packaging>
+  <name>Otto Annotation Processor</name>
+
+  <dependencies>
+    <dependency>
+      <groupId>com.squareup</groupId>
+      <artifactId>otto</artifactId>
+      <version>${project.version}</version>
+    </dependency>
+
+    <dependency>
+      <groupId>junit</groupId>
+      <artifactId>junit</artifactId>
+      <scope>test</scope>
+    </dependency>
+    <dependency>
+      <groupId>org.easytesting</groupId>
+      <artifactId>fest-assert-core</artifactId>
+      <scope>test</scope>
+    </dependency>
+  </dependencies>
+
+  <build>
+    <finalName>${binary.prefix}-${project.artifactId}-${project.version}</finalName>
+
+    <plugins>
+      <plugin>
+        <groupId>org.apache.maven.plugins</groupId>
+        <artifactId>maven-compiler-plugin</artifactId>
+        <configuration>
+          <compilerArgument>-proc:none</compilerArgument>
+        </configuration>
+      </plugin>
+
+      <plugin>
+        <groupId>org.apache.maven.plugins</groupId>
+        <artifactId>maven-checkstyle-plugin</artifactId>
+      </plugin>
+    </plugins>
+  </build>
+</project>
diff --git a/otto-processor/src/main/java/com/squareup/otto/OttoAnnotationProcessor.java b/otto-processor/src/main/java/com/squareup/otto/OttoAnnotationProcessor.java
new file mode 100644
index 0000000..0e7b777
--- /dev/null
+++ b/otto-processor/src/main/java/com/squareup/otto/OttoAnnotationProcessor.java
@@ -0,0 +1,82 @@
+package com.squareup.otto;
+
+import java.util.Set;
+
+import javax.annotation.processing.AbstractProcessor;
+import javax.annotation.processing.RoundEnvironment;
+import javax.annotation.processing.SupportedAnnotationTypes;
+import javax.annotation.processing.SupportedSourceVersion;
+import javax.lang.model.SourceVersion;
+import javax.lang.model.element.Element;
+import javax.lang.model.element.ExecutableElement;
+import javax.lang.model.element.Modifier;
+import javax.lang.model.element.PackageElement;
+import javax.lang.model.element.TypeElement;
+import javax.lang.model.element.TypeParameterElement;
+import javax.lang.model.element.VariableElement;
+import javax.lang.model.util.AbstractElementVisitor6;
+import javax.tools.Diagnostic;
+
+@SupportedSourceVersion(SourceVersion.RELEASE_6)
+@SupportedAnnotationTypes({ "com.squareup.otto.Subscribe" })
+public class OttoAnnotationProcessor extends AbstractProcessor {
+    private AbstractMethodVisitor[] checks = { new VisibilityCheckerVisitor(), new ArgumentListLengthCheckerVisitor() };
+
+    @Override
+    public boolean process(Set<? extends TypeElement> annotations, RoundEnvironment roundEnvironment) {
+
+        for (Element element : roundEnvironment.getElementsAnnotatedWith(Subscribe.class)) {
+            for (AbstractMethodVisitor check : checks) {
+                element.accept(check, null);
+            }
+        }
+
+        return true;
+    }
+
+    private class ArgumentListLengthCheckerVisitor extends AbstractMethodVisitor {
+
+        @Override
+        public Void visitExecutable(ExecutableElement element, Void aVoid) {
+            if (element.getParameters().size() != 1) {
+                processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, ErrorMessages.newInvalidArgumentListMessage(element.toString(), ((ExecutableElement) element).getParameters().size()));
+            }
+            return null;
+        }
+    }
+
+    private class VisibilityCheckerVisitor extends AbstractMethodVisitor {
+
+        @Override
+        public Void visitExecutable(ExecutableElement element, Void aVoid) {
+            if (!element.getModifiers().contains(Modifier.PUBLIC)) {
+                processingEnv.getMessager().printMessage(Diagnostic.Kind.ERROR, ErrorMessages.newNotVisibleMessage(element.toString(), ((ExecutableElement) element).getParameters().get(0).asType().toString()));
+            }
+            return null;
+        }
+    }
+
+    private abstract class AbstractMethodVisitor extends AbstractElementVisitor6<Void, Void> {
+
+        @Override
+        public Void visitPackage(PackageElement e, Void aVoid) {
+            return null;
+        }
+
+        @Override
+        public Void visitType(TypeElement e, Void aVoid) {
+            return null;
+        }
+
+        @Override
+        public Void visitVariable(VariableElement e, Void aVoid) {
+            return null;
+        }
+
+        @Override
+        public Void visitTypeParameter(TypeParameterElement e, Void aVoid) {
+            return null;
+        }
+    }
+
+}
diff --git a/otto-processor/src/main/resources/META-INF/services/javax.annotation.processing.Processor b/otto-processor/src/main/resources/META-INF/services/javax.annotation.processing.Processor
new file mode 100644
index 0000000..516f00e
--- /dev/null
+++ b/otto-processor/src/main/resources/META-INF/services/javax.annotation.processing.Processor
@@ -0,0 +1 @@
+com.squareup.otto.OttoAnnotationProcessor
\ No newline at end of file
diff --git a/otto-sample/pom.xml b/otto-sample/pom.xml
index 4b9cc89..6e2b389 100644
--- a/otto-sample/pom.xml
+++ b/otto-sample/pom.xml
@@ -44,6 +44,12 @@
       <artifactId>otto</artifactId>
       <version>${project.version}</version>
     </dependency>
+    <dependency>
+      <groupId>com.squareup</groupId>
+      <artifactId>otto-processor</artifactId>
+      <version>${project.version}</version>
+      <scope>provided</scope>
+    </dependency>
   </dependencies>
 
   <build>
diff --git a/otto/src/main/java/com/squareup/otto/AnnotatedHandlerFinder.java b/otto/src/main/java/com/squareup/otto/AnnotatedHandlerFinder.java
index 7d79b71..d179809 100644
--- a/otto/src/main/java/com/squareup/otto/AnnotatedHandlerFinder.java
+++ b/otto/src/main/java/com/squareup/otto/AnnotatedHandlerFinder.java
@@ -72,8 +72,7 @@ private static void loadAnnotatedMethods(Class<?> listenerClass,
       if (method.isAnnotationPresent(Subscribe.class)) {
         Class<?>[] parameterTypes = method.getParameterTypes();
         if (parameterTypes.length != 1) {
-          throw new IllegalArgumentException("Method " + method + " has @Subscribe annotation but requires "
-              + parameterTypes.length + " arguments.  Methods must require a single argument.");
+          throw new IllegalArgumentException(ErrorMessages.newInvalidArgumentListMessage(method.getName(), parameterTypes.length));
         }
 
         Class<?> eventType = parameterTypes[0];
@@ -83,8 +82,7 @@ private static void loadAnnotatedMethods(Class<?> listenerClass,
         }
 
         if ((method.getModifiers() & Modifier.PUBLIC) == 0) {
-          throw new IllegalArgumentException("Method " + method + " has @Subscribe annotation on " + eventType
-              + " but is not 'public'.");
+          throw new IllegalArgumentException(ErrorMessages.newNotVisibleMessage(method.getName(), eventType.toString()));
         }
 
         Set<Method> methods = subscriberMethods.get(eventType);
diff --git a/otto/src/main/java/com/squareup/otto/ErrorMessages.java b/otto/src/main/java/com/squareup/otto/ErrorMessages.java
new file mode 100644
index 0000000..09c28a6
--- /dev/null
+++ b/otto/src/main/java/com/squareup/otto/ErrorMessages.java
@@ -0,0 +1,18 @@
+package com.squareup.otto;
+
+import java.util.Locale;
+
+public class ErrorMessages {
+
+    private static final String INVALID_ARGUMENT_LIST = "Method %s has @Subscribe annotation but requires %d arguments. Methods must require a single argument.";
+    private static final String NOT_VISIBLE =  "Method %s has @Subscribe annotation on %s but is not 'public'.";
+
+    public static String newInvalidArgumentListMessage(String methodName, int argumentCount) {
+        return String.format(Locale.US, INVALID_ARGUMENT_LIST, methodName, argumentCount);
+    }
+
+
+    public static String newNotVisibleMessage(String name, String eventType) {
+        return String.format(Locale.US, NOT_VISIBLE, name, eventType);
+    }
+}
diff --git a/pom.xml b/pom.xml
index f6bcbba..0a4d544 100644
--- a/pom.xml
+++ b/pom.xml
@@ -35,6 +35,7 @@
   <modules>
     <module>otto</module>
     <module>otto-sample</module>
+    <module>otto-processor</module>
   </modules>
 
   <properties>
