diff --git a/library/src/main/java/com/squareup/otto/EventHandlerCreator.java b/library/src/main/java/com/squareup/otto/EventHandlerCreator.java
index 345d061..5f6d3f4 100644
--- a/library/src/main/java/com/squareup/otto/EventHandlerCreator.java
+++ b/library/src/main/java/com/squareup/otto/EventHandlerCreator.java
@@ -28,6 +28,15 @@
 
 import com.squareup.otto.Subscribe.ExecuteOn;
 
+/**
+ * Creates an EventHandlerCreator based on a
+ * {@link Subscribe.ExecuteOn} value.
+ * <p>This implementation takes a {@link android.os.Handler}
+ * for the main thread, and two {@link java.util.concurrent.Executor}
+ * instances for each of the background and async thread pools.</p>
+ *
+ * @author James Hugman
+ */
 public class EventHandlerCreator {
 
   private static class OttoThreadFactory implements ThreadFactory {
@@ -46,16 +55,26 @@ public Thread newThread(Runnable r) {
     }
   }
 
-  public Executor asyncExecutor;
-  public Executor backgroundExecutor;
-  public Handler  uiHandler;
+  private Executor asyncExecutor;
+  private Executor backgroundExecutor;
+  private Handler  uiHandler;
 
+  /**
+   * Use an executor for background thread pool.
+   * @param async
+   * @param background
+   * @param handler
+   */
   public EventHandlerCreator(Executor async, Executor background, Handler handler) {
     uiHandler = handler;
     backgroundExecutor = background;
     asyncExecutor = async;
   }
 
+  /**
+   * By default, use a single thread executor and unbounded cached thread pool for
+   * ASYNC and BACKGROUND.
+   */
   public EventHandlerCreator() {
     this(Executors.newCachedThreadPool(new OttoThreadFactory(ExecuteOn.ASYNC)),
          Executors.newSingleThreadExecutor(new OttoThreadFactory(ExecuteOn.BACKGROUND)),
@@ -68,18 +87,13 @@ public EventHandler createHandler(ExecuteOn thread, Object target,
     EventHandler handler;
     switch (thread) {
     case ASYNC:
-      handler = new ExecutorEventHandler(target, method, asyncExecutor);
+      handler = createAsycHandler(target, method);
       break;
     case BACKGROUND:
-      handler = new ExecutorEventHandler(target, method, backgroundExecutor);
+      handler = createBackgroundHandler(target, method);
       break;
     case MAIN:
-      if (uiHandler == null) {
-        // we can't construct this at class initialization of EventHandler
-        // so we should construct it lazily.
-        uiHandler = new Handler(Looper.getMainLooper());
-      }
-      handler = new AndroidHandlerEventHandler(target, method, uiHandler);
+      handler = createMainHandler(target, method);
       break;
     case POSTER_DECIDES:
       handler = new EventHandler(target, method);
@@ -90,4 +104,27 @@ public EventHandler createHandler(ExecuteOn thread, Object target,
     }
     return handler;
   }
+
+  protected EventHandler createMainHandler(Object target, Method method) {
+    EventHandler handler;
+    if (uiHandler == null) {
+      // we can't construct this at class initialization of EventHandler
+      // so we should construct it lazily.
+      uiHandler = new Handler(Looper.getMainLooper());
+    }
+    handler = new EventHandlerWithHandler(target, method, uiHandler);
+    return handler;
+  }
+
+  protected EventHandler createBackgroundHandler(Object target, Method method) {
+    EventHandler handler;
+    handler = new EventHandlerWithExecutor(target, method, backgroundExecutor);
+    return handler;
+  }
+
+  protected EventHandler createAsycHandler(Object target, Method method) {
+    EventHandler handler;
+    handler = new EventHandlerWithExecutor(target, method, asyncExecutor);
+    return handler;
+  }
 }
