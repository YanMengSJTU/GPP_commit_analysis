diff --git a/otto/src/main/java/com/squareup/otto/AsynchronousBus.java b/otto/src/main/java/com/squareup/otto/AsynchronousBus.java
new file mode 100644
index 0000000..2141289
--- /dev/null
+++ b/otto/src/main/java/com/squareup/otto/AsynchronousBus.java
@@ -0,0 +1,53 @@
+package com.squareup.otto;
+
+import java.lang.reflect.InvocationTargetException;
+import java.util.concurrent.ExecutorService;
+
+
+
+/**
+ * @author suj1th
+ *
+ */
+public class AsynchronousBus extends Bus {
+	
+	
+	ExecutorService executorService = new ExceptionHandlerThreadPool();
+
+	 /**
+	   * Dispatches {@code event} to the handler in {@code wrapper}.
+	   *
+	   * @param event event to dispatch.
+	   * @param wrapper wrapper that will call the handler.
+	   */
+	  protected void dispatch(final Object event, final EventHandler wrapper){
+		  executorService.execute(new Runnable() {
+			
+			@Override
+			public void run() {
+					try {
+						wrapper.handleEvent(event);
+					} catch (InvocationTargetException e) {
+						AsynchronousBus.throwRuntimeException("Exception in Dispatch Thread", e);
+					}
+				
+				
+			}
+		});
+	  }
+	
+
+	  /**
+	   * Throw a {@link RuntimeException} with given message and cause lifted from an {@link
+	   * InvocationTargetException}. If the specified {@link InvocationTargetException} does not have a
+	   * cause, neither will the {@link RuntimeException}.
+	   */
+	  private static void throwRuntimeException(String msg, InvocationTargetException e) {
+	    Throwable cause = e.getCause();
+	    if (cause != null) {
+	      throw new RuntimeException(msg + ": " + cause.getMessage(), cause);
+	    } else {
+	      throw new RuntimeException(msg + ": " + e.getMessage(), e);
+	    }
+	  }
+}
diff --git a/otto/src/main/java/com/squareup/otto/ExceptionHandlerThreadPool.java b/otto/src/main/java/com/squareup/otto/ExceptionHandlerThreadPool.java
new file mode 100644
index 0000000..8b7d5be
--- /dev/null
+++ b/otto/src/main/java/com/squareup/otto/ExceptionHandlerThreadPool.java
@@ -0,0 +1,44 @@
+package com.squareup.otto;
+
+import java.util.concurrent.BlockingQueue;
+import java.util.concurrent.ExecutionException;
+import java.util.concurrent.Future;
+import java.util.concurrent.LinkedBlockingQueue;
+import java.util.concurrent.ThreadPoolExecutor;
+import java.util.concurrent.TimeUnit;
+
+public class ExceptionHandlerThreadPool extends ThreadPoolExecutor {
+
+	private static final int _ONE = 1;
+	private static final int _EIGHT = 8;
+	private static final BlockingQueue<Runnable> workQueue = new LinkedBlockingQueue<Runnable>();
+
+
+	public ExceptionHandlerThreadPool(){
+		super(_ONE, _EIGHT, _ONE, TimeUnit.MINUTES, workQueue);
+	}
+
+	protected void afterExecute(Runnable r, Throwable t){
+		super.afterExecute(r, t);
+
+		if(t==null && r instanceof Future<?>){
+			Future<?> future = (Future<?>) r;
+			try {
+				future.get();
+			} catch ( ExecutionException e) {
+				System.out.println("Exception in Retrieving result from Future Dispatch Thread : " + e);
+				Thread.currentThread().interrupt();
+			} catch ( InterruptedException e) {
+				System.out.println("Exception in Retrieving result from Future Dispatch Thread : " + e);
+				Thread.currentThread().interrupt();
+			}
+		}
+
+		if (t != null){
+			System.out.println("Exception in Dispatch Thread : " + t);
+		}
+	}
+
+}
+
+
