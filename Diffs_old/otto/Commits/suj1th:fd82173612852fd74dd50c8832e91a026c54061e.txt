diff --git a/otto/src/main/java/com/squareup/otto/Bus.java b/otto/src/main/java/com/squareup/otto/Bus.java
index 0ab6620..b0971ac 100644
--- a/otto/src/main/java/com/squareup/otto/Bus.java
+++ b/otto/src/main/java/com/squareup/otto/Bus.java
@@ -19,9 +19,6 @@
 
 import java.lang.reflect.InvocationTargetException;
 import java.util.Collection;
-import java.util.HashSet;
-import java.util.LinkedList;
-import java.util.List;
 import java.util.Map;
 import java.util.Set;
 import java.util.concurrent.ConcurrentHashMap;
@@ -118,6 +115,9 @@
       return false;
     }
   };
+  
+  /*Used to flatten a class's type hierarchy into a set of Class objects*/
+  private ClassHierarchyUtils classHierarchyUtils = new ClassHierarchyUtils();
 
   /** Creates a new Bus named "default" that enforces actions on the main thread. */
   public Bus() {
@@ -316,7 +316,7 @@ public void post(Object event) {
     }
     enforcer.enforce(this);
 
-    Set<Class<?>> dispatchTypes = flattenHierarchy(event.getClass());
+    Set<Class<?>> dispatchTypes = classHierarchyUtils.flattenHierarchy(event.getClass());
 
     boolean dispatched = false;
     for (Class<?> eventType : dispatchTypes) {
@@ -419,35 +419,9 @@ EventProducer getProducerForEventType(Class<?> type) {
    * @return {@code concreteClass}'s complete type hierarchy, flattened and uniqued.
    */
   Set<Class<?>> flattenHierarchy(Class<?> concreteClass) {
-    Set<Class<?>> classes = flattenHierarchyCache.get(concreteClass);
-    if (classes == null) {
-      Set<Class<?>> classesCreation = getClassesFor(concreteClass);
-      classes = flattenHierarchyCache.putIfAbsent(concreteClass, classesCreation);
-      if (classes == null) {
-        classes = classesCreation;
-      }
-    }
-
-    return classes;
-  }
-
-  private Set<Class<?>> getClassesFor(Class<?> concreteClass) {
-    List<Class<?>> parents = new LinkedList<Class<?>>();
-    Set<Class<?>> classes = new HashSet<Class<?>>();
-
-    parents.add(concreteClass);
-
-    while (!parents.isEmpty()) {
-      Class<?> clazz = parents.remove(0);
-      classes.add(clazz);
-
-      Class<?> parent = clazz.getSuperclass();
-      if (parent != null) {
-        parents.add(parent);
-      }
-    }
-    return classes;
+	  return classHierarchyUtils.flattenHierarchy(concreteClass);
   }
+  
 
   /**
    * Throw a {@link RuntimeException} with given message and cause lifted from an {@link
@@ -463,8 +437,7 @@ private static void throwRuntimeException(String msg, InvocationTargetException
     }
   }
 
-  private final ConcurrentMap<Class<?>, Set<Class<?>>> flattenHierarchyCache =
-      new ConcurrentHashMap<Class<?>, Set<Class<?>>>();
+  
 
   /** Simple struct representing an event and its handler. */
   static class EventWithHandler {
