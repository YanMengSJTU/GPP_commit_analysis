diff --git a/otto/src/main/java/com/squareup/otto/AnnotatedHandlerFinder.java b/otto/src/main/java/com/squareup/otto/AnnotatedHandlerFinder.java
index 520cab9..386ce29 100644
--- a/otto/src/main/java/com/squareup/otto/AnnotatedHandlerFinder.java
+++ b/otto/src/main/java/com/squareup/otto/AnnotatedHandlerFinder.java
@@ -61,18 +61,6 @@ private static void loadAnnotatedSubscriberMethods(Class<?> listenerClass,
    */
   private static void loadAnnotatedMethods(Class<?> listenerClass,
       Map<Class<?>, Method> producerMethods, Map<Class<?>, Set<Method>> subscriberMethods) {
-    loadAnnotatedMethodsForListenerClass(listenerClass, producerMethods, subscriberMethods);
-
-    PRODUCERS_CACHE.put(listenerClass, producerMethods);
-    SUBSCRIBERS_CACHE.put(listenerClass, subscriberMethods);
-  }
-
-  /**
-   * Load all methods annotated with {@link Produce} or {@link Subscribe} into their respective caches for the
-   * specified class.
-   */
-  private static void loadAnnotatedMethodsForListenerClass(Class<?> listenerClass, Map<Class<?>, Method> producerMethods,
-      Map<Class<?>, Set<Method>> subscriberMethods) {
     for (Method method : listenerClass.getDeclaredMethods()) {
       // The compiler sometimes creates synthetic bridge methods as part of the
       // type erasure process. As of JDK8 these methods now include the same
@@ -136,6 +124,9 @@ private static void loadAnnotatedMethodsForListenerClass(Class<?> listenerClass,
         producerMethods.put(eventType, method);
       }
     }
+
+    PRODUCERS_CACHE.put(listenerClass, producerMethods);
+    SUBSCRIBERS_CACHE.put(listenerClass, subscriberMethods);
   }
 
   /** This implementation finds all methods marked with a {@link Produce} annotation. */
diff --git a/otto/src/main/java/com/squareup/otto/Bus.java b/otto/src/main/java/com/squareup/otto/Bus.java
index 9a39a00..67b70f7 100644
--- a/otto/src/main/java/com/squareup/otto/Bus.java
+++ b/otto/src/main/java/com/squareup/otto/Bus.java
@@ -203,12 +203,7 @@ public void register(Object object, Class<?> listenerClass) {
     }
     enforcer.enforce(this);
 
-    register(handlerFinder.findAllProducers(object, listenerClass),
-        handlerFinder.findAllSubscribers(object, listenerClass));
-  }
-
-  private void register(Map<Class<?>, EventProducer> foundProducers,
-      Map<Class<?>, Set<EventHandler>> foundHandlersMap) {
+    Map<Class<?>, EventProducer> foundProducers = handlerFinder.findAllProducers(object, listenerClass);
     for (Class<?> type : foundProducers.keySet()) {
 
       final EventProducer producer = foundProducers.get(type);
@@ -227,6 +222,7 @@ private void register(Map<Class<?>, EventProducer> foundProducers,
       }
     }
 
+    Map<Class<?>, Set<EventHandler>> foundHandlersMap = handlerFinder.findAllSubscribers(object, listenerClass);
     for (Class<?> type : foundHandlersMap.keySet()) {
       Set<EventHandler> handlers = handlersByType.get(type);
       if (handlers == null) {
@@ -297,12 +293,7 @@ public void unregister(Object object, Class<?> listenerClass) {
     }
     enforcer.enforce(this);
 
-    unregister(object, handlerFinder.findAllProducers(object, listenerClass),
-        handlerFinder.findAllSubscribers(object, listenerClass));
-  }
-
-  private void unregister(Object object, Map<Class<?>, EventProducer> producersInListener,
-      Map<Class<?>, Set<EventHandler>> handlersInListener) {
+    Map<Class<?>, EventProducer> producersInListener = handlerFinder.findAllProducers(object, listenerClass);
     for (Map.Entry<Class<?>, EventProducer> entry : producersInListener.entrySet()) {
       final Class<?> key = entry.getKey();
       EventProducer producer = getProducerForEventType(key);
@@ -316,6 +307,7 @@ private void unregister(Object object, Map<Class<?>, EventProducer> producersInL
       producersByType.remove(key).invalidate();
     }
 
+    Map<Class<?>, Set<EventHandler>> handlersInListener = handlerFinder.findAllSubscribers(object, listenerClass);
     for (Map.Entry<Class<?>, Set<EventHandler>> entry : handlersInListener.entrySet()) {
       Set<EventHandler> currentHandlers = getHandlersForEventType(entry.getKey());
       Collection<EventHandler> eventMethodsInListener = entry.getValue();
