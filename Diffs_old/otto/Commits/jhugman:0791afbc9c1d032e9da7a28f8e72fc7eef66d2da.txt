diff --git a/library/src/main/java/com/squareup/otto/AnnotatedHandlerFinder.java b/library/src/main/java/com/squareup/otto/AnnotatedHandlerFinder.java
index 861113b..9ba2f21 100644
--- a/library/src/main/java/com/squareup/otto/AnnotatedHandlerFinder.java
+++ b/library/src/main/java/com/squareup/otto/AnnotatedHandlerFinder.java
@@ -24,6 +24,8 @@
 import java.util.Map;
 import java.util.Set;
 
+import com.squareup.otto.Subscribe.ExecuteOn;
+
 /**
  * Helper methods for finding methods annotated with {@link Produce} and {@link Subscribe}.
  *
@@ -129,8 +131,9 @@ private static void loadAnnotatedMethods(Class<?> listenerClass) {
     return handlersInMethod;
   }
 
-  /** This implementation finds all methods marked with a {@link Subscribe} annotation. */
-  static Map<Class<?>, Set<EventHandler>> findAllSubscribers(Object listener) {
+  /** This implementation finds all methods marked with a {@link Subscribe} annotation.
+   * @param handlerCreator */
+  static Map<Class<?>, Set<EventHandler>> findAllSubscribers(Object listener, EventHandlerCreator handlerCreator) {
     Class<?> listenerClass = listener.getClass();
     Map<Class<?>, Set<EventHandler>> handlersInMethod = new HashMap<Class<?>, Set<EventHandler>>();
 
@@ -142,7 +145,10 @@ private static void loadAnnotatedMethods(Class<?> listenerClass) {
       for (Map.Entry<Class<?>, Set<Method>> e : methods.entrySet()) {
         Set<EventHandler> handlers = new HashSet<EventHandler>();
         for (Method m : e.getValue()) {
-          handlers.add(new EventHandler(listener, m));
+          Subscribe annotation = m.getAnnotation(Subscribe.class);
+          ExecuteOn thread = annotation.thread();
+          EventHandler handler = handlerCreator.createHandler(thread, listener, m);
+          handlers.add(handler);
         }
         handlersInMethod.put(e.getKey(), handlers);
       }
diff --git a/library/src/main/java/com/squareup/otto/EventHandlerCreator.java b/library/src/main/java/com/squareup/otto/EventHandlerCreator.java
new file mode 100644
index 0000000..345d061
--- /dev/null
+++ b/library/src/main/java/com/squareup/otto/EventHandlerCreator.java
@@ -0,0 +1,93 @@
+/*
+ * Copyright (C) 2012 Square, Inc.
+ * Copyright (C) 2007 The Guava Authors
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.squareup.otto;
+
+import java.lang.reflect.Method;
+import java.util.concurrent.Executor;
+import java.util.concurrent.Executors;
+import java.util.concurrent.ThreadFactory;
+import java.util.concurrent.atomic.AtomicInteger;
+
+import android.os.Handler;
+import android.os.Looper;
+
+import com.squareup.otto.Subscribe.ExecuteOn;
+
+public class EventHandlerCreator {
+
+  private static class OttoThreadFactory implements ThreadFactory {
+
+    private final String threadName;
+
+    private final AtomicInteger threadNumber = new AtomicInteger();
+
+    OttoThreadFactory(Subscribe.ExecuteOn threadName) {
+      this.threadName = threadName.name();
+    }
+
+    @Override
+    public Thread newThread(Runnable r) {
+      return new Thread(r, threadName + "-" + threadNumber.getAndIncrement());
+    }
+  }
+
+  public Executor asyncExecutor;
+  public Executor backgroundExecutor;
+  public Handler  uiHandler;
+
+  public EventHandlerCreator(Executor async, Executor background, Handler handler) {
+    uiHandler = handler;
+    backgroundExecutor = background;
+    asyncExecutor = async;
+  }
+
+  public EventHandlerCreator() {
+    this(Executors.newCachedThreadPool(new OttoThreadFactory(ExecuteOn.ASYNC)),
+         Executors.newSingleThreadExecutor(new OttoThreadFactory(ExecuteOn.BACKGROUND)),
+         null
+    );
+  }
+
+  public EventHandler createHandler(ExecuteOn thread, Object target,
+      Method method) {
+    EventHandler handler;
+    switch (thread) {
+    case ASYNC:
+      handler = new ExecutorEventHandler(target, method, asyncExecutor);
+      break;
+    case BACKGROUND:
+      handler = new ExecutorEventHandler(target, method, backgroundExecutor);
+      break;
+    case MAIN:
+      if (uiHandler == null) {
+        // we can't construct this at class initialization of EventHandler
+        // so we should construct it lazily.
+        uiHandler = new Handler(Looper.getMainLooper());
+      }
+      handler = new AndroidHandlerEventHandler(target, method, uiHandler);
+      break;
+    case POSTER_DECIDES:
+      handler = new EventHandler(target, method);
+      break;
+    default:
+      handler = new EventHandler(target, method);
+      break;
+    }
+    return handler;
+  }
+}
diff --git a/library/src/main/java/com/squareup/otto/HandlerFinder.java b/library/src/main/java/com/squareup/otto/HandlerFinder.java
index ff61a2c..91800d4 100644
--- a/library/src/main/java/com/squareup/otto/HandlerFinder.java
+++ b/library/src/main/java/com/squareup/otto/HandlerFinder.java
@@ -26,6 +26,7 @@
 
   Map<Class<?>, Set<EventHandler>> findAllSubscribers(Object listener);
 
+  EventHandlerCreator HANDLER_CREATOR = new EventHandlerCreator();
 
   HandlerFinder ANNOTATED = new HandlerFinder() {
     @Override
@@ -35,7 +36,7 @@
 
     @Override
     public Map<Class<?>, Set<EventHandler>> findAllSubscribers(Object listener) {
-      return AnnotatedHandlerFinder.findAllSubscribers(listener);
+      return AnnotatedHandlerFinder.findAllSubscribers(listener, HANDLER_CREATOR);
     }
   };
 }
