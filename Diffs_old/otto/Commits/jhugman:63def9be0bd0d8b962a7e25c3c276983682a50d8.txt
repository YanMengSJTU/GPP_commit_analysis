diff --git a/library/src/main/java/com/squareup/otto/AndroidHandlerEventHandler.java b/library/src/main/java/com/squareup/otto/AndroidHandlerEventHandler.java
new file mode 100644
index 0000000..fe8801f
--- /dev/null
+++ b/library/src/main/java/com/squareup/otto/AndroidHandlerEventHandler.java
@@ -0,0 +1,30 @@
+package com.squareup.otto;
+
+import java.lang.reflect.Method;
+
+import android.os.Handler;
+import android.os.Looper;
+
+public class AndroidHandlerEventHandler extends EventHandler {
+
+  private final Handler handler;
+
+  AndroidHandlerEventHandler(Object target, Method method, Looper looper) {
+    this(target, method, new Handler(looper));
+  }
+
+  AndroidHandlerEventHandler(Object target, Method method, Handler handler) {
+    super(target, method);
+    this.handler = handler;
+  }
+
+  @Override
+  protected boolean onTargetThread() {
+    return handler.getLooper() == Looper.myLooper();
+  }
+
+  @Override
+  protected void enqueue(Runnable runnable) {
+    handler.post(runnable);
+  }
+}
diff --git a/library/src/main/java/com/squareup/otto/EventHandler.java b/library/src/main/java/com/squareup/otto/EventHandler.java
index 843a31b..ec6db0c 100644
--- a/library/src/main/java/com/squareup/otto/EventHandler.java
+++ b/library/src/main/java/com/squareup/otto/EventHandler.java
@@ -20,6 +20,8 @@
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
 
+import android.util.Log;
+
 /**
  * Wraps a single-argument 'handler' method on a specific object.
  *
@@ -81,10 +83,40 @@ public void invalidate() {
    * @throws java.lang.reflect.InvocationTargetException  if the wrapped method throws any {@link Throwable} that is not
    *     an {@link Error} ({@code Error}s are propagated as-is).
    */
-  public void handleEvent(Object event) throws InvocationTargetException {
+  public void handleEvent(final Object event) throws InvocationTargetException {
     if (!valid) {
       throw new IllegalStateException(toString() + " has been invalidated and can no longer handle events.");
     }
+
+    if (onTargetThread()) {
+      // The caller may have been on the right thread all along.
+      // We should give them the opportunity to invoke right now.
+      invokeMethod(event);
+    } else {
+      enqueue(new Runnable() {
+        @Override
+        public void run() {
+          try {
+            invokeMethod(event);
+          } catch (Throwable e) {
+            Log.e("Otto", "Problem invoking " + method, e);
+          }
+        }
+      });
+    }
+  }
+
+  protected boolean onTargetThread() {
+    // never enqueue
+    return true;
+  }
+
+  protected void enqueue(Runnable runnable) {
+    // NOP
+  }
+
+
+  private void invokeMethod(Object event) throws InvocationTargetException {
     try {
       method.invoke(target, event);
     } catch (IllegalAccessException e) {
diff --git a/library/src/main/java/com/squareup/otto/ExecutorEventHandler.java b/library/src/main/java/com/squareup/otto/ExecutorEventHandler.java
new file mode 100644
index 0000000..2ee3f74
--- /dev/null
+++ b/library/src/main/java/com/squareup/otto/ExecutorEventHandler.java
@@ -0,0 +1,26 @@
+package com.squareup.otto;
+
+import java.lang.reflect.Method;
+import java.util.concurrent.Executor;
+
+public class ExecutorEventHandler extends EventHandler {
+
+  private final Executor executor;
+
+  ExecutorEventHandler(Object target, Method method, Executor executor) {
+    super(target, method);
+    this.executor = executor;
+  }
+
+  @Override
+  protected boolean onTargetThread() {
+    // always enqueue
+    return false;
+  }
+
+  @Override
+  protected void enqueue(Runnable runnable) {
+    executor.execute(runnable);
+  }
+
+}
