diff --git a/otto/src/main/java/com/squareup/otto/AnnotatedHandlerFinder.java b/otto/src/main/java/com/squareup/otto/AnnotatedHandlerFinder.java
index c7fb155..ca6bedf 100644
--- a/otto/src/main/java/com/squareup/otto/AnnotatedHandlerFinder.java
+++ b/otto/src/main/java/com/squareup/otto/AnnotatedHandlerFinder.java
@@ -30,6 +30,8 @@
  * @author Cliff Biffle
  * @author Louis Wasserman
  * @author Jake Wharton
+ * @author Kamil Wisniewski
+ * @author Xavier Rubio Jansana
  */
 final class AnnotatedHandlerFinder {
 
@@ -43,12 +45,40 @@
 
   /**
    * Load all methods annotated with {@link Produce} or {@link Subscribe} into their respective caches for the
-   * specified class.
+   * specified class, and recursively for its parent, if class is anotated with InheritSubscribers.
    */
-  private static void loadAnnotatedMethods(Class<?> listenerClass) {
+  private static void loadAnnotatedMethodsRecursive(Class<?> listenerClass) {
     Map<Class<?>, Set<Method>> subscriberMethods = new HashMap<Class<?>, Set<Method>>();
     Map<Class<?>, Method> producerMethods = new HashMap<Class<?>, Method>();
 
+    Class<?> clazz = listenerClass;
+
+    do {
+      loadAnnotatedMethods(clazz, subscriberMethods, producerMethods);
+      if (clazz.isAnnotationPresent(InheritSubscribers.class)) {
+        String clazzName = clazz.getName();
+        clazz = clazz.getSuperclass();
+        String parentName = clazz.getName();
+        if (parentName.startsWith("java.") || parentName.startsWith("android.")) {
+          throw new IllegalArgumentException("Class " + clazzName + " has @InheritSubscribers annotation but its "
+              + "parent class is " + parentName + ", which is forbidden.");
+        }
+      } else {
+        clazz = null;
+      }
+    } while (clazz != null);
+
+    PRODUCERS_CACHE.put(listenerClass, producerMethods);
+    SUBSCRIBERS_CACHE.put(listenerClass, subscriberMethods);
+  }
+
+  /**
+   * Load all methods annotated with {@link Produce} or {@link Subscribe} into their respective caches for the
+   * specified class.
+   */
+  private static void loadAnnotatedMethods(Class<?> listenerClass, Map<Class<?>, Set<Method>> subscriberMethods,
+                                                                   Map<Class<?>, Method> producerMethods) {
+
     for (Method method : listenerClass.getDeclaredMethods()) {
       // The compiler sometimes creates synthetic bridge methods as part of the
       // type erasure process. As of JDK8 these methods now include the same
@@ -112,9 +142,6 @@ private static void loadAnnotatedMethods(Class<?> listenerClass) {
         producerMethods.put(eventType, method);
       }
     }
-
-    PRODUCERS_CACHE.put(listenerClass, producerMethods);
-    SUBSCRIBERS_CACHE.put(listenerClass, subscriberMethods);
   }
 
   /** This implementation finds all methods marked with a {@link Produce} annotation. */
@@ -123,7 +150,7 @@ private static void loadAnnotatedMethods(Class<?> listenerClass) {
     Map<Class<?>, EventProducer> handlersInMethod = new HashMap<Class<?>, EventProducer>();
 
     if (!PRODUCERS_CACHE.containsKey(listenerClass)) {
-      loadAnnotatedMethods(listenerClass);
+      loadAnnotatedMethodsRecursive(listenerClass);
     }
     Map<Class<?>, Method> methods = PRODUCERS_CACHE.get(listenerClass);
     if (!methods.isEmpty()) {
@@ -142,7 +169,7 @@ private static void loadAnnotatedMethods(Class<?> listenerClass) {
     Map<Class<?>, Set<EventHandler>> handlersInMethod = new HashMap<Class<?>, Set<EventHandler>>();
 
     if (!SUBSCRIBERS_CACHE.containsKey(listenerClass)) {
-      loadAnnotatedMethods(listenerClass);
+      loadAnnotatedMethodsRecursive(listenerClass);
     }
     Map<Class<?>, Set<Method>> methods = SUBSCRIBERS_CACHE.get(listenerClass);
     if (!methods.isEmpty()) {
diff --git a/otto/src/main/java/com/squareup/otto/InheritSubscribers.java b/otto/src/main/java/com/squareup/otto/InheritSubscribers.java
new file mode 100644
index 0000000..55de097
--- /dev/null
+++ b/otto/src/main/java/com/squareup/otto/InheritSubscribers.java
@@ -0,0 +1,17 @@
+package com.squareup.otto;
+
+import java.lang.annotation.ElementType;
+import java.lang.annotation.Retention;
+import java.lang.annotation.RetentionPolicy;
+import java.lang.annotation.Target;
+
+/**
+ * Anotation to instruct {@link AnnotatedHandlerFinder} to recurse into class parent when
+ * looking for Subscribers and Producers.
+ *
+ * @author Kamil Wisniewski
+ */
+@Retention(RetentionPolicy.RUNTIME)
+@Target(ElementType.TYPE)
+public @interface InheritSubscribers {
+}
diff --git a/pom.xml b/pom.xml
index a6737e6..8725c1f 100644
--- a/pom.xml
+++ b/pom.xml
@@ -44,7 +44,7 @@
 
     <!-- Dependencies -->
     <android.version>4.1.1.4</android.version>
-    <android.platform>16</android.platform>
+    <android.platform>21</android.platform>
     <android.support.version>r7</android.support.version>
 
     <!-- Test Dependencies -->
