diff --git a/CHANGELOG.md b/CHANGELOG.md
index f1344a9..ab09ce5 100644
--- a/CHANGELOG.md
+++ b/CHANGELOG.md
@@ -1,6 +1,20 @@
 Change Log
 ==========
 
+Version 1.3.8 *(2015-06-17)*
+----------------------------
+
+ * Fix: Correct potential concurrency problem which might have occurred when registering
+   on multiple threads at once.
+
+
+Version 1.3.7 *(2015-05-08)*
+----------------------------
+
+ * Fix: Correct concurrency problem which might have occurred when registering
+   on multiple threads at once.
+
+
 Version 1.3.6 *(2015-01-19)*
 ----------------------------
 
diff --git a/README.md b/README.md
index 1c8e1f5..2eaec52 100644
--- a/README.md
+++ b/README.md
@@ -11,7 +11,15 @@ bus as well as specializing it to the Android platform.
 
 *For usage instructions please see [the website][1].*
 
+Deprecated!
+-----------
 
+This project is deprecated in favor of [RxJava](https://github.com/ReactiveX/RxJava) and
+[RxAndroid](https://github.com/ReactiveX/RxAndroid). These projects permit the same event-driven
+programming model as Otto, but they’re more capable and offer better control of threading.
+
+If you’re looking for guidance on migrating from Otto to Rx, [this post](http://blog.kaush.co/2014/12/24/implementing-an-event-bus-with-rxjava-rxbus/)
+is a good start.
 
 Download
 --------
@@ -23,12 +31,12 @@ You can also depend on the .jar through Maven:
 <dependency>
   <groupId>com.squareup</groupId>
   <artifactId>otto</artifactId>
-  <version>1.3.6</version>
+  <version>1.3.8</version>
 </dependency>
 ```
 or Gradle:
 ```groovy
-compile 'com.squareup:otto:1.3.6'
+compile 'com.squareup:otto:1.3.8'
 ```
 
 Snapshots of the development version are available in [Sonatype's `snapshots` repository][snap].
diff --git a/deploy_website.sh b/deploy_website.sh
index b311e79..69c3a78 100755
--- a/deploy_website.sh
+++ b/deploy_website.sh
@@ -2,13 +2,14 @@
 
 set -ex
 
+REPO="git@github.com:square/otto.git"
 DIR=temp-clone
 
 # Delete any existing temporary website clone
 rm -rf $DIR
 
 # Clone the current repo into temp folder
-git clone git@github.com:square/otto.git $DIR
+git clone $REPO $DIR
 
 # Move working directory into temp folder
 cd $DIR
@@ -16,8 +17,8 @@ cd $DIR
 # Checkout and track the gh-pages branch
 git checkout -t origin/gh-pages
 
-# Delete everything
-rm -rf *
+# Delete everything that isn't versioned (1.x, 2.x)
+ls | grep -E -v '^\d+\.x$' | xargs rm -rf
 
 # Copy website files from real repo
 cp -R ../website/* .
diff --git a/otto-sample/pom.xml b/otto-sample/pom.xml
index fe833ca..4b9cc89 100644
--- a/otto-sample/pom.xml
+++ b/otto-sample/pom.xml
@@ -20,7 +20,7 @@
   <parent>
     <groupId>com.squareup</groupId>
     <artifactId>otto-parent</artifactId>
-    <version>1.3.7-SNAPSHOT</version>
+    <version>1.3.9-SNAPSHOT</version>
     <relativePath>../pom.xml</relativePath>
   </parent>
 
diff --git a/otto/pom.xml b/otto/pom.xml
index 7be0c59..a3b82ef 100644
--- a/otto/pom.xml
+++ b/otto/pom.xml
@@ -20,7 +20,7 @@
   <parent>
     <groupId>com.squareup</groupId>
     <artifactId>otto-parent</artifactId>
-    <version>1.3.7-SNAPSHOT</version>
+    <version>1.3.9-SNAPSHOT</version>
     <relativePath>../pom.xml</relativePath>
   </parent>
 
diff --git a/otto/src/main/java/com/squareup/otto/AnnotatedHandlerFinder.java b/otto/src/main/java/com/squareup/otto/AnnotatedHandlerFinder.java
index c7fb155..7d79b71 100644
--- a/otto/src/main/java/com/squareup/otto/AnnotatedHandlerFinder.java
+++ b/otto/src/main/java/com/squareup/otto/AnnotatedHandlerFinder.java
@@ -23,6 +23,8 @@
 import java.util.HashSet;
 import java.util.Map;
 import java.util.Set;
+import java.util.concurrent.ConcurrentHashMap;
+import java.util.concurrent.ConcurrentMap;
 
 /**
  * Helper methods for finding methods annotated with {@link Produce} and {@link Subscribe}.
@@ -34,21 +36,31 @@
 final class AnnotatedHandlerFinder {
 
   /** Cache event bus producer methods for each class. */
-  private static final Map<Class<?>, Map<Class<?>, Method>> PRODUCERS_CACHE =
-      new HashMap<Class<?>, Map<Class<?>, Method>>();
+  private static final ConcurrentMap<Class<?>, Map<Class<?>, Method>> PRODUCERS_CACHE =
+    new ConcurrentHashMap<Class<?>, Map<Class<?>, Method>>();
 
   /** Cache event bus subscriber methods for each class. */
-  private static final Map<Class<?>, Map<Class<?>, Set<Method>>> SUBSCRIBERS_CACHE =
-      new HashMap<Class<?>, Map<Class<?>, Set<Method>>>();
+  private static final ConcurrentMap<Class<?>, Map<Class<?>, Set<Method>>> SUBSCRIBERS_CACHE =
+    new ConcurrentHashMap<Class<?>, Map<Class<?>, Set<Method>>>();
+
+  private static void loadAnnotatedProducerMethods(Class<?> listenerClass,
+      Map<Class<?>, Method> producerMethods) {
+    Map<Class<?>, Set<Method>> subscriberMethods = new HashMap<Class<?>, Set<Method>>();
+    loadAnnotatedMethods(listenerClass, producerMethods, subscriberMethods);
+  }
+
+  private static void loadAnnotatedSubscriberMethods(Class<?> listenerClass,
+      Map<Class<?>, Set<Method>> subscriberMethods) {
+    Map<Class<?>, Method> producerMethods = new HashMap<Class<?>, Method>();
+    loadAnnotatedMethods(listenerClass, producerMethods, subscriberMethods);
+  }
 
   /**
    * Load all methods annotated with {@link Produce} or {@link Subscribe} into their respective caches for the
    * specified class.
    */
-  private static void loadAnnotatedMethods(Class<?> listenerClass) {
-    Map<Class<?>, Set<Method>> subscriberMethods = new HashMap<Class<?>, Set<Method>>();
-    Map<Class<?>, Method> producerMethods = new HashMap<Class<?>, Method>();
-
+  private static void loadAnnotatedMethods(Class<?> listenerClass,
+      Map<Class<?>, Method> producerMethods, Map<Class<?>, Set<Method>> subscriberMethods) {
     for (Method method : listenerClass.getDeclaredMethods()) {
       // The compiler sometimes creates synthetic bridge methods as part of the
       // type erasure process. As of JDK8 these methods now include the same
@@ -122,10 +134,11 @@ private static void loadAnnotatedMethods(Class<?> listenerClass) {
     final Class<?> listenerClass = listener.getClass();
     Map<Class<?>, EventProducer> handlersInMethod = new HashMap<Class<?>, EventProducer>();
 
-    if (!PRODUCERS_CACHE.containsKey(listenerClass)) {
-      loadAnnotatedMethods(listenerClass);
-    }
     Map<Class<?>, Method> methods = PRODUCERS_CACHE.get(listenerClass);
+    if (null == methods) {
+      methods = new HashMap<Class<?>, Method>();
+      loadAnnotatedProducerMethods(listenerClass, methods);
+    }
     if (!methods.isEmpty()) {
       for (Map.Entry<Class<?>, Method> e : methods.entrySet()) {
         EventProducer producer = new EventProducer(listener, e.getValue());
@@ -141,10 +154,11 @@ private static void loadAnnotatedMethods(Class<?> listenerClass) {
     Class<?> listenerClass = listener.getClass();
     Map<Class<?>, Set<EventHandler>> handlersInMethod = new HashMap<Class<?>, Set<EventHandler>>();
 
-    if (!SUBSCRIBERS_CACHE.containsKey(listenerClass)) {
-      loadAnnotatedMethods(listenerClass);
-    }
     Map<Class<?>, Set<Method>> methods = SUBSCRIBERS_CACHE.get(listenerClass);
+    if (null == methods) {
+      methods = new HashMap<Class<?>, Set<Method>>();
+      loadAnnotatedSubscriberMethods(listenerClass, methods);
+    }
     if (!methods.isEmpty()) {
       for (Map.Entry<Class<?>, Set<Method>> e : methods.entrySet()) {
         Set<EventHandler> handlers = new HashSet<EventHandler>();
diff --git a/otto/src/main/java/com/squareup/otto/Bus.java b/otto/src/main/java/com/squareup/otto/Bus.java
index 5b5745f..0ab6620 100644
--- a/otto/src/main/java/com/squareup/otto/Bus.java
+++ b/otto/src/main/java/com/squareup/otto/Bus.java
@@ -19,7 +19,6 @@
 
 import java.lang.reflect.InvocationTargetException;
 import java.util.Collection;
-import java.util.HashMap;
 import java.util.HashSet;
 import java.util.LinkedList;
 import java.util.List;
@@ -422,8 +421,11 @@ EventProducer getProducerForEventType(Class<?> type) {
   Set<Class<?>> flattenHierarchy(Class<?> concreteClass) {
     Set<Class<?>> classes = flattenHierarchyCache.get(concreteClass);
     if (classes == null) {
-      classes = getClassesFor(concreteClass);
-      flattenHierarchyCache.put(concreteClass, classes);
+      Set<Class<?>> classesCreation = getClassesFor(concreteClass);
+      classes = flattenHierarchyCache.putIfAbsent(concreteClass, classesCreation);
+      if (classes == null) {
+        classes = classesCreation;
+      }
     }
 
     return classes;
@@ -461,8 +463,8 @@ private static void throwRuntimeException(String msg, InvocationTargetException
     }
   }
 
-  private final Map<Class<?>, Set<Class<?>>> flattenHierarchyCache =
-      new HashMap<Class<?>, Set<Class<?>>>();
+  private final ConcurrentMap<Class<?>, Set<Class<?>>> flattenHierarchyCache =
+      new ConcurrentHashMap<Class<?>, Set<Class<?>>>();
 
   /** Simple struct representing an event and its handler. */
   static class EventWithHandler {
diff --git a/pom.xml b/pom.xml
index a6737e6..f6bcbba 100644
--- a/pom.xml
+++ b/pom.xml
@@ -25,7 +25,7 @@
 
   <groupId>com.squareup</groupId>
   <artifactId>otto-parent</artifactId>
-  <version>1.3.7-SNAPSHOT</version>
+  <version>1.3.9-SNAPSHOT</version>
   <packaging>pom</packaging>
 
   <name>Otto (Parent)</name>
@@ -44,7 +44,7 @@
 
     <!-- Dependencies -->
     <android.version>4.1.1.4</android.version>
-    <android.platform>16</android.platform>
+    <android.platform>22</android.platform>
     <android.support.version>r7</android.support.version>
 
     <!-- Test Dependencies -->
diff --git a/website/index.html b/website/index.html
index 38c25b7..8cec1ab 100644
--- a/website/index.html
+++ b/website/index.html
@@ -167,6 +167,7 @@ <h3 id="license">License</h3>
                 <li><a href="#license">License</a></li>
               </ul>
               <ul class="nav nav-pills nav-stacked secondary">
+                <li><a href="1.x/otto/">Javadoc</a></li>
                 <li><a href="http://stackoverflow.com/questions/tagged/otto?sort=active">StackOverflow</a></li>
               </ul>
             </div>
