diff --git a/library/src/main/java/com/squareup/otto/AndroidHandlerEventHandler.java b/library/src/main/java/com/squareup/otto/AndroidHandlerEventHandler.java
deleted file mode 100644
index fe8801f..0000000
--- a/library/src/main/java/com/squareup/otto/AndroidHandlerEventHandler.java
+++ /dev/null
@@ -1,30 +0,0 @@
-package com.squareup.otto;
-
-import java.lang.reflect.Method;
-
-import android.os.Handler;
-import android.os.Looper;
-
-public class AndroidHandlerEventHandler extends EventHandler {
-
-  private final Handler handler;
-
-  AndroidHandlerEventHandler(Object target, Method method, Looper looper) {
-    this(target, method, new Handler(looper));
-  }
-
-  AndroidHandlerEventHandler(Object target, Method method, Handler handler) {
-    super(target, method);
-    this.handler = handler;
-  }
-
-  @Override
-  protected boolean onTargetThread() {
-    return handler.getLooper() == Looper.myLooper();
-  }
-
-  @Override
-  protected void enqueue(Runnable runnable) {
-    handler.post(runnable);
-  }
-}
diff --git a/library/src/main/java/com/squareup/otto/EventHandlerWithExecutor.java b/library/src/main/java/com/squareup/otto/EventHandlerWithExecutor.java
new file mode 100644
index 0000000..1401d1f
--- /dev/null
+++ b/library/src/main/java/com/squareup/otto/EventHandlerWithExecutor.java
@@ -0,0 +1,48 @@
+/* Copyright (C) 2012 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.squareup.otto;
+
+/**
+ * An {@link EventHandler} that invokes a method with a
+ * given @{link {@link java.util.concurrent.Executor}.
+ * <p>A method invocation is executed with
+ * {@link java.util.concurrent.Executor#execute(Runnable)}.</p>
+ *
+ * @author James Hugman
+ */
+import java.lang.reflect.Method;
+import java.util.concurrent.Executor;
+
+public class EventHandlerWithExecutor extends EventHandler {
+
+  private final Executor executor;
+
+  EventHandlerWithExecutor(Object target, Method method, Executor executor) {
+    super(target, method);
+    this.executor = executor;
+  }
+
+  @Override
+  protected boolean onTargetThread() {
+    // always enqueue
+    return false;
+  }
+
+  @Override
+  protected void enqueue(Runnable runnable) {
+    executor.execute(runnable);
+  }
+
+}
diff --git a/library/src/main/java/com/squareup/otto/EventHandlerWithHandler.java b/library/src/main/java/com/squareup/otto/EventHandlerWithHandler.java
new file mode 100644
index 0000000..379d5c2
--- /dev/null
+++ b/library/src/main/java/com/squareup/otto/EventHandlerWithHandler.java
@@ -0,0 +1,53 @@
+/* Copyright (C) 2012 Square, Inc.
+ *
+ * Licensed under the Apache License, Version 2.0 (the "License");
+ * you may not use this file except in compliance with the License.
+ * You may obtain a copy of the License at
+ *
+ * http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+
+package com.squareup.otto;
+
+import java.lang.reflect.Method;
+
+import android.os.Handler;
+import android.os.Looper;
+
+/**
+ * An {@link EventHandler} that invokes a method with a
+ * given @{link {@link android.os.Handler}.
+ * <p>A method invocation is posted to the Handler with
+ * {@link android.os.Handler#post(Runnable)}.</p>
+ *
+ * @author James Hugman
+ */
+public class EventHandlerWithHandler extends EventHandler {
+
+  private final Handler handler;
+
+  EventHandlerWithHandler(Object target, Method method, Looper looper) {
+    this(target, method, new Handler(looper));
+  }
+
+  EventHandlerWithHandler(Object target, Method method, Handler handler) {
+    super(target, method);
+    this.handler = handler;
+  }
+
+  @Override
+  protected boolean onTargetThread() {
+    return handler.getLooper() == Looper.myLooper();
+  }
+
+  @Override
+  protected void enqueue(Runnable runnable) {
+    handler.post(runnable);
+  }
+}
diff --git a/library/src/main/java/com/squareup/otto/ExecutorEventHandler.java b/library/src/main/java/com/squareup/otto/ExecutorEventHandler.java
deleted file mode 100644
index 2ee3f74..0000000
--- a/library/src/main/java/com/squareup/otto/ExecutorEventHandler.java
+++ /dev/null
@@ -1,26 +0,0 @@
-package com.squareup.otto;
-
-import java.lang.reflect.Method;
-import java.util.concurrent.Executor;
-
-public class ExecutorEventHandler extends EventHandler {
-
-  private final Executor executor;
-
-  ExecutorEventHandler(Object target, Method method, Executor executor) {
-    super(target, method);
-    this.executor = executor;
-  }
-
-  @Override
-  protected boolean onTargetThread() {
-    // always enqueue
-    return false;
-  }
-
-  @Override
-  protected void enqueue(Runnable runnable) {
-    executor.execute(runnable);
-  }
-
-}
