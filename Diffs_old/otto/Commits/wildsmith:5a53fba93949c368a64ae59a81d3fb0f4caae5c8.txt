diff --git a/otto/src/main/java/com/squareup/otto/AnnotatedHandlerFinder.java b/otto/src/main/java/com/squareup/otto/AnnotatedHandlerFinder.java
index 3067937..520cab9 100644
--- a/otto/src/main/java/com/squareup/otto/AnnotatedHandlerFinder.java
+++ b/otto/src/main/java/com/squareup/otto/AnnotatedHandlerFinder.java
@@ -49,24 +49,12 @@ private static void loadAnnotatedProducerMethods(Class<?> listenerClass,
     loadAnnotatedMethods(listenerClass, producerMethods, subscriberMethods);
   }
 
-  private static void loadAnnotatedProducerMethods(Class<?> fakeListenerClass,
-      Class<?> listenerClass, Map<Class<?>, Method> producerMethods) {
-    Map<Class<?>, Set<Method>> subscriberMethods = new HashMap<Class<?>, Set<Method>>();
-    loadAnnotatedMethods(fakeListenerClass, listenerClass, producerMethods, subscriberMethods);
-  }
-
   private static void loadAnnotatedSubscriberMethods(Class<?> listenerClass,
       Map<Class<?>, Set<Method>> subscriberMethods) {
     Map<Class<?>, Method> producerMethods = new HashMap<Class<?>, Method>();
     loadAnnotatedMethods(listenerClass, producerMethods, subscriberMethods);
   }
 
-  private static void loadAnnotatedSubscriberMethods(Class<?> fakeListenerClass,
-      Class<?> listenerClass, Map<Class<?>, Set<Method>> subscriberMethods) {
-    Map<Class<?>, Method> producerMethods = new HashMap<Class<?>, Method>();
-    loadAnnotatedMethods(fakeListenerClass, listenerClass, producerMethods, subscriberMethods);
-  }
-
   /**
    * Load all methods annotated with {@link Produce} or {@link Subscribe} into their respective caches for the
    * specified class.
@@ -79,18 +67,6 @@ private static void loadAnnotatedMethods(Class<?> listenerClass,
     SUBSCRIBERS_CACHE.put(listenerClass, subscriberMethods);
   }
 
-  /**
-   * Load all methods annotated with {@link Produce} or {@link Subscribe} into their respective caches for the
-   * specified class.
-   */
-  private static void loadAnnotatedMethods(Class<?> fakeListenerClass, Class<?> listenerClass,
-      Map<Class<?>, Method> producerMethods, Map<Class<?>, Set<Method>> subscriberMethods) {
-    loadAnnotatedMethodsForListenerClass(listenerClass, producerMethods, subscriberMethods);
-
-    PRODUCERS_CACHE.put(fakeListenerClass, producerMethods);
-    SUBSCRIBERS_CACHE.put(fakeListenerClass, subscriberMethods);
-  }
-
   /**
    * Load all methods annotated with {@link Produce} or {@link Subscribe} into their respective caches for the
    * specified class.
@@ -163,8 +139,7 @@ private static void loadAnnotatedMethodsForListenerClass(Class<?> listenerClass,
   }
 
   /** This implementation finds all methods marked with a {@link Produce} annotation. */
-  static Map<Class<?>, EventProducer> findAllProducers(Object listener) {
-    final Class<?> listenerClass = listener.getClass();
+  static Map<Class<?>, EventProducer> findAllProducers(Object listener, Class<?> listenerClass) {
     Map<Class<?>, EventProducer> handlersInMethod = new HashMap<Class<?>, EventProducer>();
 
     Map<Class<?>, Method> methods = PRODUCERS_CACHE.get(listenerClass);
@@ -182,29 +157,8 @@ private static void loadAnnotatedMethodsForListenerClass(Class<?> listenerClass,
     return handlersInMethod;
   }
 
-  /** This implementation finds all methods marked with a {@link Produce} annotation. */
-  static Map<Class<?>, EventProducer> findAllProducers(Object listener, Class<?> listenerClass) {
-    Class<?> fakeListenerClass = listener.getClass();
-    Map<Class<?>, EventProducer> handlersInMethod = new HashMap<Class<?>, EventProducer>();
-
-    Map<Class<?>, Method> methods = PRODUCERS_CACHE.get(fakeListenerClass);
-    if (null == methods) {
-      methods = new HashMap<Class<?>, Method>();
-      loadAnnotatedProducerMethods(fakeListenerClass, listenerClass, methods);
-    }
-    if (!methods.isEmpty()) {
-      for (Map.Entry<Class<?>, Method> e : methods.entrySet()) {
-        EventProducer producer = new EventProducer(listener, e.getValue());
-        handlersInMethod.put(e.getKey(), producer);
-      }
-    }
-
-    return handlersInMethod;
-  }
-
   /** This implementation finds all methods marked with a {@link Subscribe} annotation. */
-  static Map<Class<?>, Set<EventHandler>> findAllSubscribers(Object listener) {
-    Class<?> listenerClass = listener.getClass();
+  static Map<Class<?>, Set<EventHandler>> findAllSubscribers(Object listener, Class<?> listenerClass) {
     Map<Class<?>, Set<EventHandler>> handlersInMethod = new HashMap<Class<?>, Set<EventHandler>>();
 
     Map<Class<?>, Set<Method>> methods = SUBSCRIBERS_CACHE.get(listenerClass);
@@ -225,28 +179,6 @@ private static void loadAnnotatedMethodsForListenerClass(Class<?> listenerClass,
     return handlersInMethod;
   }
 
-  static Map<Class<?>, Set<EventHandler>> findAllSubscribers(Object listener, Class<?> listenerClass) {
-    Class<?> fakeListenerClass = listener.getClass();
-    Map<Class<?>, Set<EventHandler>> handlersInMethod = new HashMap<Class<?>, Set<EventHandler>>();
-
-    Map<Class<?>, Set<Method>> methods = SUBSCRIBERS_CACHE.get(fakeListenerClass);
-    if (null == methods) {
-      methods = new HashMap<Class<?>, Set<Method>>();
-      loadAnnotatedSubscriberMethods(fakeListenerClass, listenerClass, methods);
-    }
-    if (!methods.isEmpty()) {
-      for (Map.Entry<Class<?>, Set<Method>> e : methods.entrySet()) {
-        Set<EventHandler> handlers = new HashSet<EventHandler>();
-        for (Method m : e.getValue()) {
-          handlers.add(new EventHandler(listener, m));
-        }
-        handlersInMethod.put(e.getKey(), handlers);
-      }
-    }
-
-    return handlersInMethod;
-  }
-
   private AnnotatedHandlerFinder() {
     // No instances.
   }
diff --git a/otto/src/main/java/com/squareup/otto/Bus.java b/otto/src/main/java/com/squareup/otto/Bus.java
index f891f1f..9a39a00 100644
--- a/otto/src/main/java/com/squareup/otto/Bus.java
+++ b/otto/src/main/java/com/squareup/otto/Bus.java
@@ -182,12 +182,7 @@ public Bus(ThreadEnforcer enforcer, String identifier) {
    * @throws NullPointerException if the object is null.
    */
   public void register(Object object) {
-    if (object == null) {
-      throw new NullPointerException("Object to register must not be null.");
-    }
-    enforcer.enforce(this);
-
-    register(handlerFinder.findAllProducers(object), handlerFinder.findAllSubscribers(object));
+    register(object, object.getClass());
   }
 
   /**
@@ -286,12 +281,7 @@ private void dispatchProducerResultToHandler(EventHandler handler, EventProducer
    * @throws NullPointerException if the object is null.
    */
   public void unregister(Object object) {
-    if (object == null) {
-      throw new NullPointerException("Object to unregister must not be null.");
-    }
-    enforcer.enforce(this);
-
-    unregister(object, handlerFinder.findAllProducers(object), handlerFinder.findAllSubscribers(object));
+    unregister(object, object.getClass());
   }
 
   /**
diff --git a/otto/src/main/java/com/squareup/otto/HandlerFinder.java b/otto/src/main/java/com/squareup/otto/HandlerFinder.java
index e222870..956ff0a 100644
--- a/otto/src/main/java/com/squareup/otto/HandlerFinder.java
+++ b/otto/src/main/java/com/squareup/otto/HandlerFinder.java
@@ -22,31 +22,17 @@
 /** Finds producer and subscriber methods. */
 interface HandlerFinder {
 
-  Map<Class<?>, EventProducer> findAllProducers(Object listener);
-
   Map<Class<?>, EventProducer> findAllProducers(Object listener, Class<?> targetClass);
 
-  Map<Class<?>, Set<EventHandler>> findAllSubscribers(Object listener);
-
   Map<Class<?>, Set<EventHandler>> findAllSubscribers(Object listener, Class<?> targetClass);
 
   HandlerFinder ANNOTATED = new HandlerFinder() {
 
-    @Override
-    public Map<Class<?>, EventProducer> findAllProducers(Object listener) {
-      return AnnotatedHandlerFinder.findAllProducers(listener);
-    }
-
     @Override
     public Map<Class<?>, EventProducer> findAllProducers(Object listener, Class<?> targetClass) {
       return AnnotatedHandlerFinder.findAllProducers(listener, targetClass);
     }
 
-    @Override
-    public Map<Class<?>, Set<EventHandler>> findAllSubscribers(Object listener) {
-      return AnnotatedHandlerFinder.findAllSubscribers(listener);
-    }
-
     @Override
     public Map<Class<?>, Set<EventHandler>> findAllSubscribers(Object listener, Class<?> targetClass) {
       return AnnotatedHandlerFinder.findAllSubscribers(listener, targetClass);
