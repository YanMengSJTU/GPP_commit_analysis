diff --git a/library/src/main/java/com/squareup/otto/Bus.java b/library/src/main/java/com/squareup/otto/Bus.java
index c10817b..3c06861 100644
--- a/library/src/main/java/com/squareup/otto/Bus.java
+++ b/library/src/main/java/com/squareup/otto/Bus.java
@@ -85,7 +85,7 @@
  * @author Cliff Biffle
  * @author Jake Wharton
  */
-public class Bus {
+public class Bus implements OttoBus {
   public static final String DEFAULT_IDENTIFIER = "default";
 
   /** All registered event handlers, indexed by event type. */
@@ -181,6 +181,7 @@ public Bus(ThreadEnforcer enforcer, String identifier) {
    *
    * @param object object whose handler methods should be registered.
    */
+  @Override
   public void register(Object object) {
     enforcer.enforce(this);
 
@@ -254,6 +255,7 @@ private void dispatchProducerResultToHandler(EventHandler handler, EventProducer
    * @param object object whose producer and handler methods should be unregistered.
    * @throws IllegalArgumentException if the object was not previously registered.
    */
+  @Override
   public void unregister(Object object) {
     enforcer.enforce(this);
 
@@ -300,6 +302,7 @@ public void unregister(Object object) {
    *
    * @param event event to post.
    */
+  @Override
   public void post(Object event) {
     enforcer.enforce(this);
 
diff --git a/library/src/main/java/com/squareup/otto/OttoBus.java b/library/src/main/java/com/squareup/otto/OttoBus.java
new file mode 100644
index 0000000..fbe2eee
--- /dev/null
+++ b/library/src/main/java/com/squareup/otto/OttoBus.java
@@ -0,0 +1,7 @@
+package com.squareup.otto;
+
+public interface OttoBus {
+    void register(Object object);
+    void unregister(Object object);
+    void post(Object event);
+}
diff --git a/library/src/main/java/com/squareup/otto/ThreadEnforcer.java b/library/src/main/java/com/squareup/otto/ThreadEnforcer.java
index 2e718ac..7991624 100644
--- a/library/src/main/java/com/squareup/otto/ThreadEnforcer.java
+++ b/library/src/main/java/com/squareup/otto/ThreadEnforcer.java
@@ -30,19 +30,19 @@
    *
    * @param bus Event bus instance on which an action is being performed.
    */
-  void enforce(Bus bus);
+  void enforce(OttoBus bus);
 
 
   /** A {@link ThreadEnforcer} that does no verification or enforcement for any action. */
   ThreadEnforcer NONE = new ThreadEnforcer() {
-    @Override public void enforce(Bus bus) {
+    @Override public void enforce(OttoBus bus) {
       // Allow any thread.
     }
   };
 
   /** A {@link ThreadEnforcer} that confines {@link Bus} methods to the main thread. */
   ThreadEnforcer MAIN = new ThreadEnforcer() {
-    @Override public void enforce(Bus bus) {
+    @Override public void enforce(OttoBus bus) {
       if (Looper.myLooper() != Looper.getMainLooper()) {
         throw new IllegalStateException("Event bus " + bus + " accessed from non-main thread " + Looper.myLooper());
       }
diff --git a/library/src/test/java/com/squareup/otto/ThreadEnforcerTest.java b/library/src/test/java/com/squareup/otto/ThreadEnforcerTest.java
index 3b98925..547bc13 100644
--- a/library/src/test/java/com/squareup/otto/ThreadEnforcerTest.java
+++ b/library/src/test/java/com/squareup/otto/ThreadEnforcerTest.java
@@ -26,7 +26,7 @@
   private static class RecordingThreadEnforcer implements ThreadEnforcer {
     boolean called = false;
 
-    @Override public void enforce(Bus bus) {
+    @Override public void enforce(OttoBus bus) {
       called = true;
     }
   }
