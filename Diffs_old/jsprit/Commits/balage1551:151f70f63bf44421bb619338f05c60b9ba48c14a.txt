diff --git a/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/AlgorithmEventsRecorder.java b/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/AlgorithmEventsRecorder.java
index 73908ede1..9af5f4db9 100644
--- a/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/AlgorithmEventsRecorder.java
+++ b/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/AlgorithmEventsRecorder.java
@@ -47,7 +47,7 @@
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.AbstractActivityNEW;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.AbstractActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
@@ -467,7 +467,7 @@ private void insertNode(String nodeId, int insertionIndex, InsertionData data, V
         if (isFirst(insertionIndex)) {
             node_i = makeStartId(data.getSelectedVehicle());
         } else {
-            AbstractActivityNEW jobActivity = (AbstractActivityNEW) route.getActivities().get(insertionIndex - 1);
+            AbstractActivity jobActivity = (AbstractActivity) route.getActivities().get(insertionIndex - 1);
             node_i = getNodeId(jobActivity);
         }
         String edgeId_1 = node_i + "_" + nodeId;
@@ -475,7 +475,7 @@ private void insertNode(String nodeId, int insertionIndex, InsertionData data, V
         if (isLast(insertionIndex, route)) {
             node_j = makeEndId(data.getSelectedVehicle());
         } else {
-            AbstractActivityNEW jobActivity = (AbstractActivityNEW) route.getActivities().get(insertionIndex);
+            AbstractActivity jobActivity = (AbstractActivity) route.getActivities().get(insertionIndex);
             node_j = getNodeId(jobActivity);
         }
         String edgeId_2 = nodeId + "_" + node_j;
diff --git a/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/GraphStreamViewer.java b/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/GraphStreamViewer.java
index 584278e9a..fd4b3114e 100644
--- a/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/GraphStreamViewer.java
+++ b/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/GraphStreamViewer.java
@@ -24,9 +24,9 @@
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivityNEW;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivityNEW;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.util.Time;
@@ -588,8 +588,8 @@ private void renderRoute(Graph g, VehicleRoute route, int routeId, long renderDe
                 actNode.addAttribute("ui.label", Time.parseSecondsToTime(act.getEndTime()));
             }
             g.addEdge(makeEdgeId(routeId, vehicle_edgeId), prevIdentifier, currIdentifier, true);
-            if (act instanceof PickupActivityNEW) g.getNode(currIdentifier).addAttribute("ui.class", "pickupInRoute");
-            else if (act instanceof DeliveryActivityNEW)
+            if (act instanceof PickupActivity) g.getNode(currIdentifier).addAttribute("ui.class", "pickupInRoute");
+            else if (act instanceof DeliveryActivity)
                 g.getNode(currIdentifier).addAttribute("ui.class", "deliveryInRoute");
             prevIdentifier = currIdentifier;
             vehicle_edgeId++;
diff --git a/jsprit-analysis/src/test/java/com/graphhopper/jsprit/analysis/toolbox/CustomJob.java b/jsprit-analysis/src/test/java/com/graphhopper/jsprit/analysis/toolbox/CustomJob.java
index 5cdc16c22..2009c06fa 100644
--- a/jsprit-analysis/src/test/java/com/graphhopper/jsprit/analysis/toolbox/CustomJob.java
+++ b/jsprit-analysis/src/test/java/com/graphhopper/jsprit/analysis/toolbox/CustomJob.java
@@ -23,9 +23,9 @@
 import com.graphhopper.jsprit.core.problem.job.AbstractJob;
 import com.graphhopper.jsprit.core.problem.job.JobActivityList;
 import com.graphhopper.jsprit.core.problem.job.SequentialJobActivityList;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivityNEW;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.ExchangeActivityNEW;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivityNEW;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.ExchangeActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 
 import java.util.ArrayList;
@@ -131,11 +131,11 @@ protected void createActivities(JobBuilder<? extends AbstractJob, ?> jobBuilder)
         JobActivityList list = new SequentialJobActivityList(this);
         for (int i = 0; i < builder.getLocs().size(); i++) {
             if (builder.getTypes().get(i).equals("pickup")) {
-                list.addActivity(new PickupActivityNEW(this, "pick", builder.getLocs().get(i), 0, builder.getCaps().get(i), Arrays.asList(TimeWindow.ETERNITY)));
+                list.addActivity(new PickupActivity(this, "pick", builder.getLocs().get(i), 0, builder.getCaps().get(i), Arrays.asList(TimeWindow.ETERNITY)));
             } else if (builder.getTypes().get(i).equals("delivery")) {
-                list.addActivity(new DeliveryActivityNEW(this, "delivery", builder.getLocs().get(i), 0, builder.getCaps().get(i).invert(), Arrays.asList(TimeWindow.ETERNITY)));
+                list.addActivity(new DeliveryActivity(this, "delivery", builder.getLocs().get(i), 0, builder.getCaps().get(i).invert(), Arrays.asList(TimeWindow.ETERNITY)));
             } else {
-                list.addActivity(new ExchangeActivityNEW(this, "exchange", builder.getLocs().get(i), 0, builder.getCaps().get(i), Arrays.asList(TimeWindow.ETERNITY)));
+                list.addActivity(new ExchangeActivity(this, "exchange", builder.getLocs().get(i), 0, builder.getCaps().get(i), Arrays.asList(TimeWindow.ETERNITY)));
             }
         }
         setActivities(list);
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinClusters.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinClusters.java
index 5da19e231..4cd0cb9b3 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinClusters.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinClusters.java
@@ -22,7 +22,7 @@
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.AbstractActivityNEW;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.AbstractActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.util.RandomUtils;
 import org.apache.commons.math3.ml.clustering.Clusterable;
@@ -49,9 +49,9 @@ public void informIterationStarts(int i, VehicleRoutingProblem problem, Collecti
 
     public static class JobActivityWrapper implements Clusterable {
 
-        private AbstractActivityNEW jobActivity;
+        private AbstractActivity jobActivity;
 
-        public JobActivityWrapper(AbstractActivityNEW jobActivity) {
+        public JobActivityWrapper(AbstractActivity jobActivity) {
             this.jobActivity = jobActivity;
         }
 
@@ -60,7 +60,7 @@ public JobActivityWrapper(AbstractActivityNEW jobActivity) {
             return new double[]{jobActivity.getLocation().getCoordinate().getX(), jobActivity.getLocation().getCoordinate().getY()};
         }
 
-        public AbstractActivityNEW getActivity() {
+        public AbstractActivity getActivity() {
             return jobActivity;
         }
     }
@@ -161,7 +161,7 @@ private void ruin(Collection<VehicleRoute> vehicleRoutes, int nOfJobs2BeRemoved,
     private List<JobActivityWrapper> wrap(List<TourActivity> activities) {
         List<JobActivityWrapper> wl = new ArrayList<JobActivityWrapper>();
         for (TourActivity act : activities) {
-            wl.add(new JobActivityWrapper((AbstractActivityNEW) act));
+            wl.add(new JobActivityWrapper((AbstractActivity) act));
         }
         return wl;
     }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyser.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyser.java
index 85797f6f3..9d02b2eec 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyser.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyser.java
@@ -40,13 +40,13 @@
 import com.graphhopper.jsprit.core.problem.solution.SolutionCostCalculator;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.AbstractActivityNEW;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.AbstractActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.ActivityVisitor;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivityNEW;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.End;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivityNEW;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.ServiceActivityNEW;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.ServiceActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.Start;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.util.ActivityTimeTracker;
@@ -122,19 +122,19 @@ public void begin(VehicleRoute route) {
 
         @Override
         public void visit(TourActivity activity) {
-            if (activity instanceof PickupActivityNEW || activity instanceof ServiceActivityNEW) {
+            if (activity instanceof PickupActivity || activity instanceof ServiceActivity) {
                 pickupCounter++;
                 pickedUp = pickedUp.add(activity.getLoadChange());
-                if (!AbstractActivityNEW.isShipment(activity)
-                                && (activity instanceof PickupActivityNEW
-                                                || activity instanceof ServiceActivityNEW)) {
+                if (!AbstractActivity.isShipment(activity)
+                                && (activity instanceof PickupActivity
+                                                || activity instanceof ServiceActivity)) {
                     deliverAtEndCounter++;
                 }
-            } else if (activity instanceof DeliveryActivityNEW) {
+            } else if (activity instanceof DeliveryActivity) {
                 deliveryCounter++;
-                delivered = delivered.add(((DeliveryActivityNEW) activity).getJob().getSize());
-                if (!AbstractActivityNEW.isShipment(activity)
-                                && activity instanceof DeliveryActivityNEW) {
+                delivered = delivered.add(((DeliveryActivity) activity).getJob().getSize());
+                if (!AbstractActivity.isShipment(activity)
+                                && activity instanceof DeliveryActivity) {
                     pickupAtBeginningCounter++;
                 }
             }
@@ -159,7 +159,7 @@ public void finish() {
 
         private final StateManager stateManager;
 
-        private Map<String, PickupActivityNEW> openShipments;
+        private Map<String, PickupActivity> openShipments;
 
         private VehicleRoute route;
 
@@ -188,18 +188,18 @@ public void begin(VehicleRoute route) {
         @Override
         public void visit(TourActivity activity) {
             //shipment
-            if (AbstractActivityNEW.isShipment(activity) && activity instanceof PickupActivityNEW) {
-                openShipments.put(((PickupActivityNEW) activity).getJob().getId(),
-                                (PickupActivityNEW) activity);
-            } else if (AbstractActivityNEW.isShipment(activity)
-                            && activity instanceof DeliveryActivityNEW) {
-                String jobId = ((DeliveryActivityNEW) activity).getJob().getId();
+            if (AbstractActivity.isShipment(activity) && activity instanceof PickupActivity) {
+                openShipments.put(((PickupActivity) activity).getJob().getId(),
+                                (PickupActivity) activity);
+            } else if (AbstractActivity.isShipment(activity)
+                            && activity instanceof DeliveryActivity) {
+                String jobId = ((DeliveryActivity) activity).getJob().getId();
                 if (!openShipments.containsKey(jobId)) {
                     //deliverShipment without pickupShipment
                     stateManager.putActivityState(activity, shipment_id, true);
                     shipmentConstraintOnRouteViolated = true;
                 } else {
-                    PickupActivityNEW removed = openShipments.remove(jobId);
+                    PickupActivity removed = openShipments.remove(jobId);
                     stateManager.putActivityState(removed, shipment_id, false);
                     stateManager.putActivityState(activity, shipment_id, false);
                 }
@@ -208,14 +208,14 @@ public void visit(TourActivity activity) {
             }
 
             //backhaul
-            if (!AbstractActivityNEW.isShipment(activity) && activity instanceof DeliveryActivityNEW
+            if (!AbstractActivity.isShipment(activity) && activity instanceof DeliveryActivity
                             && pickupOccured) {
                 stateManager.putActivityState(activity, backhaul_id, true);
                 backhaulConstraintOnRouteViolated = true;
             } else {
-                if (!AbstractActivityNEW.isShipment(activity)
-                                && (activity instanceof PickupActivityNEW
-                                                || activity instanceof ServiceActivityNEW)) {
+                if (!AbstractActivity.isShipment(activity)
+                                && (activity instanceof PickupActivity
+                                                || activity instanceof ServiceActivity)) {
                     pickupOccured = true;
                     stateManager.putActivityState(activity, backhaul_id, false);
                 } else {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblem.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblem.java
index 349badecd..f38a420cf 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblem.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblem.java
@@ -24,7 +24,7 @@
 import com.graphhopper.jsprit.core.problem.job.AbstractJob;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.AbstractActivityNEW;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.AbstractActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
@@ -263,7 +263,7 @@ private boolean addBreaksToActivityMap() {
                     if (breakActivities.isEmpty()) {
                         throw new IllegalArgumentException("at least one activity for break needs to be created by activityFactory");
                     }
-                    for (AbstractActivityNEW act : breakActivities) {
+                    for (AbstractActivity act : breakActivities) {
                         act.setIndex(activityIndexCounter);
                         incActivityIndexCounter();
                     }
@@ -284,7 +284,7 @@ public Builder addInitialVehicleRoute(VehicleRoute route) {
                 addedVehicleIds.add(route.getVehicle().getId());
             }
             for (TourActivity act : route.getActivities()) {
-                AbstractActivityNEW abstractAct = (AbstractActivityNEW) act;
+                AbstractActivity abstractAct = (AbstractActivity) act;
                 abstractAct.setIndex(activityIndexCounter);
                 incActivityIndexCounter();
                 if (act instanceof JobActivity) {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/MaxDistanceConstraint.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/MaxDistanceConstraint.java
index 018cd0d92..cad486386 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/MaxDistanceConstraint.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/MaxDistanceConstraint.java
@@ -25,8 +25,8 @@
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
 import com.graphhopper.jsprit.core.problem.cost.TransportDistance;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.AbstractActivityNEW;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivityNEW;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.AbstractActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.End;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.Start;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
@@ -99,7 +99,7 @@ public ConstraintsStatus fulfilled(JobInsertionContext iFacts, TourActivity prev
 
         double additionalDistanceOfPickup = 0;
         // Balage1551 - Temporal solution to eliminate DEPRECATED
-        if (newAct instanceof DeliveryActivityNEW && AbstractActivityNEW.isShipment(newAct)) {
+        if (newAct instanceof DeliveryActivity && AbstractActivity.isShipment(newAct)) {
             int iIndexOfPickup = iFacts.getRelatedActivityContext().getInsertionIndex();
             TourActivity pickup = iFacts.getAssociatedActivities().get(0);
             TourActivity actBeforePickup;
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceDeliveriesFirstConstraint.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceDeliveriesFirstConstraint.java
index a29f74f7f..a58caf812 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceDeliveriesFirstConstraint.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceDeliveriesFirstConstraint.java
@@ -38,22 +38,22 @@ protected ConstraintsStatus newMethod(TourActivity prevAct, TourActivity newAct,
                                           TourActivity nextAct) {
         if (isShipment(newAct)) {
             // The new activity is a shipment
-            if (nextAct instanceof DeliveryActivityNEW && isService(nextAct)) {
+            if (nextAct instanceof DeliveryActivity && isService(nextAct)) {
                 // Next activity can't be a service delivery
                 return ConstraintsStatus.NOT_FULFILLED;
             }
         } else {
             // The new activity is a service
-            if (newAct instanceof PickupActivityNEW || newAct instanceof ServiceActivityNEW) {
+            if (newAct instanceof PickupActivity || newAct instanceof ServiceActivity) {
                 // The new activity is a pickup or a service
-                if (nextAct instanceof DeliveryActivityNEW && isService(nextAct)) {
+                if (nextAct instanceof DeliveryActivity && isService(nextAct)) {
                     // Next activity can't be a service delivera
                     return ConstraintsStatus.NOT_FULFILLED;
                 }
-            } else if (newAct instanceof DeliveryActivityNEW) {
+            } else if (newAct instanceof DeliveryActivity) {
                 // The new activity is a delivery
-                if (prevAct instanceof PickupActivityNEW || prevAct instanceof ServiceActivityNEW
-                    || (prevAct instanceof DeliveryActivityNEW
+                if (prevAct instanceof PickupActivity || prevAct instanceof ServiceActivity
+                    || (prevAct instanceof DeliveryActivity
                     && isShipment(prevAct))) {
                     // The previous activity can't be a pickup or service (of
                     // any type of Job), nor a shipment delivery
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ShipmentPickupsFirstConstraint.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ShipmentPickupsFirstConstraint.java
index 1792f1cc7..5ab3961d6 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ShipmentPickupsFirstConstraint.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ShipmentPickupsFirstConstraint.java
@@ -18,9 +18,9 @@
 package com.graphhopper.jsprit.core.problem.constraint;
 
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.AbstractActivityNEW;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivityNEW;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivityNEW;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.AbstractActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 
 public class ShipmentPickupsFirstConstraint implements HardActivityConstraint {
@@ -28,14 +28,14 @@
     @Override
     public ConstraintsStatus fulfilled(JobInsertionContext iFacts, TourActivity prevAct, TourActivity newAct, TourActivity nextAct, double prevActDepTime) {
         // Balage1551 - Temporal solution to eliminate DEPRECATED
-        if (AbstractActivityNEW.isShipment(newAct) && newAct instanceof DeliveryActivityNEW
-                        && AbstractActivityNEW.isShipment(nextAct)
-                        && nextAct instanceof PickupActivityNEW) {
+        if (AbstractActivity.isShipment(newAct) && newAct instanceof DeliveryActivity
+                        && AbstractActivity.isShipment(nextAct)
+                        && nextAct instanceof PickupActivity) {
             return ConstraintsStatus.NOT_FULFILLED;
         }
-        if (AbstractActivityNEW.isShipment(newAct) && newAct instanceof PickupActivityNEW
-                        && AbstractActivityNEW.isShipment(prevAct)
-                        && prevAct instanceof DeliveryActivityNEW) {
+        if (AbstractActivity.isShipment(newAct) && newAct instanceof PickupActivity
+                        && AbstractActivity.isShipment(prevAct)
+                        && prevAct instanceof DeliveryActivity) {
             return ConstraintsStatus.NOT_FULFILLED_BREAK;
         }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Delivery.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Delivery.java
index 36190ed64..923a55398 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Delivery.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Delivery.java
@@ -18,14 +18,14 @@
 package com.graphhopper.jsprit.core.problem.job;
 
 import com.graphhopper.jsprit.core.problem.SizeDimension;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivityNEW;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivity;
 
 /**
  * Delivery extends Service and is intended to model a Service where smth is UNLOADED (i.e. delivered) from a transport unit.
  *
  * @author schroeder
  */
-public class Delivery extends AbstractSingleActivityJob<DeliveryActivityNEW> {
+public class Delivery extends AbstractSingleActivityJob<DeliveryActivity> {
 
     public static final class Builder
     extends AbstractSingleActivityJob.BuilderBase<Delivery, Builder> {
@@ -51,9 +51,9 @@ protected Delivery createInstance() {
 
 
     @Override
-    protected DeliveryActivityNEW createActivity(
+    protected DeliveryActivity createActivity(
                     BuilderBase<? extends AbstractSingleActivityJob<?>, ?> builder) {
-            return new DeliveryActivityNEW(this, builder.type, builder.location,
+            return new DeliveryActivity(this, builder.type, builder.location,
                             builder.serviceTime,
                             builder.getCapacity().invert(), builder.timeWindows.getTimeWindows());
     }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Pickup.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Pickup.java
index 91993668e..7f94d4407 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Pickup.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Pickup.java
@@ -17,14 +17,14 @@
  */
 package com.graphhopper.jsprit.core.problem.job;
 
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivityNEW;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivity;
 
 /**
  * Pickup extends Service and is intended to model a Service where smth is LOADED (i.e. picked up) to a transport unit.
  *
  * @author schroeder
  */
-public class Pickup extends AbstractSingleActivityJob<PickupActivityNEW> {
+public class Pickup extends AbstractSingleActivityJob<PickupActivity> {
 
     public static final class Builder
     extends AbstractSingleActivityJob.BuilderBase<Pickup, Builder> {
@@ -49,9 +49,9 @@ protected Pickup createInstance() {
     }
 
     @Override
-    protected PickupActivityNEW createActivity(
+    protected PickupActivity createActivity(
                     AbstractSingleActivityJob.BuilderBase<? extends AbstractSingleActivityJob<?>, ?> builder) {
-            return new PickupActivityNEW(this, builder.type, builder.location, builder.serviceTime,
+            return new PickupActivity(this, builder.type, builder.location, builder.serviceTime,
                             builder.getCapacity(), builder.timeWindows.getTimeWindows());
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/ReturnedShipment.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/ReturnedShipment.java
index f5f9c7807..f7cd1b81b 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/ReturnedShipment.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/ReturnedShipment.java
@@ -201,17 +201,17 @@ protected ReturnedShipment createInstance() {
     protected void createActivities(JobBuilder<?, ?> builder) {
         Builder shipmentBuilder = (Builder) builder;
         JobActivityList list = new SequentialJobActivityList(this);
-        list.addActivity(new PickupActivityNEW(this, ACTIVITY_NAME_PICKUP,
+        list.addActivity(new PickupActivity(this, ACTIVITY_NAME_PICKUP,
             shipmentBuilder.getPickupLocation(),
             shipmentBuilder.getPickupServiceTime(), shipmentBuilder.getCapacity(),
             shipmentBuilder.getPickupTimeWindows().getTimeWindows()));
-        list.addActivity(new ExchangeActivityNEW(this, ACTIVITY_NAME_DELIVERY,
+        list.addActivity(new ExchangeActivity(this, ACTIVITY_NAME_DELIVERY,
             shipmentBuilder.getDeliveryLocation(),
             shipmentBuilder.getDeliveryServiceTime(),
             shipmentBuilder.getBackhaulCapacity()
                 .subtract(shipmentBuilder.getCapacity()),
             shipmentBuilder.getDeliveryTimeWindows().getTimeWindows()));
-        list.addActivity(new DeliveryActivityNEW(this, ACTIVITY_NAME_BACKHAUL,
+        list.addActivity(new DeliveryActivity(this, ACTIVITY_NAME_BACKHAUL,
             shipmentBuilder.getBackhaulLocation(),
             shipmentBuilder.getBackhaulServiceTime(),
             shipmentBuilder.getBackhaulCapacity(),
@@ -220,21 +220,21 @@ protected void createActivities(JobBuilder<?, ?> builder) {
     }
 
     // TODO: RENAME WHEN SHIPMENT IS RETURNING THE SAME TYPE OF ACTIVIT
-    public PickupActivityNEW getPickupActivityTO_BE_RENAMED_LATER() {
-        return (PickupActivityNEW) getActivityList()
+    public PickupActivity getPickupActivityTO_BE_RENAMED_LATER() {
+        return (PickupActivity) getActivityList()
             .findByType(ACTIVITY_NAME_PICKUP)
             .get();
     }
 
     // TODO: RENAME WHEN SHIPMENT IS RETURNING THE SAME TYPE OF ACTIVIT
-    public ExchangeActivityNEW getDeliveryActivityTO_BE_RENAMED_LATER() {
-        return (ExchangeActivityNEW) getActivityList()
+    public ExchangeActivity getDeliveryActivityTO_BE_RENAMED_LATER() {
+        return (ExchangeActivity) getActivityList()
             .findByType(ACTIVITY_NAME_DELIVERY)
             .get();
     }
 
-    public DeliveryActivityNEW getBackhaulActivityTO_BE_RENAMED_LATER() {
-        return (DeliveryActivityNEW) getActivityList()
+    public DeliveryActivity getBackhaulActivityTO_BE_RENAMED_LATER() {
+        return (DeliveryActivity) getActivityList()
             .findByType(ACTIVITY_NAME_BACKHAUL)
             .get();
     }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java
index 3980b8fae..08f1901b6 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java
@@ -17,7 +17,7 @@
  */
 package com.graphhopper.jsprit.core.problem.job;
 
-import com.graphhopper.jsprit.core.problem.solution.route.activity.ServiceActivityNEW;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.ServiceActivity;
 
 /**
  * Service implementation of a job.
@@ -27,7 +27,7 @@
  *
  * @author schroeder
  */
-public class Service extends AbstractSingleActivityJob<ServiceActivityNEW> {
+public class Service extends AbstractSingleActivityJob<ServiceActivity> {
 
 
     public static final class Builder
@@ -53,9 +53,9 @@ protected Service createInstance() {
     }
 
     @Override
-    protected ServiceActivityNEW createActivity(
+    protected ServiceActivity createActivity(
                     AbstractSingleActivityJob.BuilderBase<? extends AbstractSingleActivityJob<?>, ?> builder) {
-        return new ServiceActivityNEW(this, builder.type,
+        return new ServiceActivity(this, builder.type,
                         builder.location, builder.serviceTime, builder.getCapacity(),
                         builder.timeWindows.getTimeWindows());
         // return new PickupActivityNEW(this, builder.type, builder.location,
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java
index 1a6eb2ead..7653df50b 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java
@@ -21,8 +21,8 @@
 
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.SizeDimension;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivityNEW;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivityNEW;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindowsImpl;
 
@@ -299,11 +299,11 @@ protected Shipment createInstance() {
     protected void createActivities(JobBuilder<?, ?> builder) {
         Builder shipmentBuilder = (Builder) builder;
         JobActivityList list = new SequentialJobActivityList(this);
-        list.addActivity(new PickupActivityNEW(this, "pickupShipment",
+        list.addActivity(new PickupActivity(this, "pickupShipment",
                         shipmentBuilder.getPickupLocation(),
                         shipmentBuilder.getPickupServiceTime(), shipmentBuilder.getCapacity(),
                         shipmentBuilder.getPickupTimeWindows().getTimeWindows()));
-        list.addActivity(new DeliveryActivityNEW(this, "deliverShipment",
+        list.addActivity(new DeliveryActivity(this, "deliverShipment",
                         shipmentBuilder.getDeliveryLocation(),
                         shipmentBuilder.getDeliveryServiceTime(),
                         shipmentBuilder.getCapacity().invert(),
@@ -312,12 +312,12 @@ protected void createActivities(JobBuilder<?, ?> builder) {
         setActivities(list);
     }
 
-    public PickupActivityNEW getPickupActivity() {
-        return (PickupActivityNEW) getActivityList().findByType("pickupShipment").get();
+    public PickupActivity getPickupActivity() {
+        return (PickupActivity) getActivityList().findByType("pickupShipment").get();
     }
 
-    public DeliveryActivityNEW getDeliveryActivity() {
-        return (DeliveryActivityNEW) getActivityList().findByType("deliverShipment").get();
+    public DeliveryActivity getDeliveryActivity() {
+        return (DeliveryActivity) getActivityList().findByType("deliverShipment").get();
     }
 
     // =================== DEPRECATED GETTERS
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/AbstractActivityNEW.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/AbstractActivity.java
similarity index 91%
rename from jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/AbstractActivityNEW.java
rename to jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/AbstractActivity.java
index 1ac5e48eb..60ca868dd 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/AbstractActivityNEW.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/AbstractActivity.java
@@ -8,7 +8,7 @@
 import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 
-public abstract class AbstractActivityNEW implements TourActivity {
+public abstract class AbstractActivity implements TourActivity {
 
     private int index;
     protected SizeDimension loadChange;
@@ -20,7 +20,7 @@
     protected Location location;
 
 
-    public AbstractActivityNEW(String type, Location location, SizeDimension loadChange) {
+    public AbstractActivity(String type, Location location, SizeDimension loadChange) {
         super();
         this.loadChange = loadChange;
         this.type = type;
@@ -28,7 +28,7 @@ public AbstractActivityNEW(String type, Location location, SizeDimension loadCha
     }
 
 
-    public AbstractActivityNEW(AbstractActivityNEW sourceActivity) {
+    public AbstractActivity(AbstractActivity sourceActivity) {
         arrTime = sourceActivity.getArrTime();
         endTime = sourceActivity.getEndTime();
         loadChange = sourceActivity.getLoadChange();
@@ -122,7 +122,7 @@ public TourActivity duplicate() {
         // TODO - Balage1551 - It uses safe reflection. But this is reflection which is expensive, so
         // in case it is a bottleneck, this should be refactored
         try {
-            Constructor<? extends AbstractActivityNEW> constructor = getClass().getConstructor(getClass());
+            Constructor<? extends AbstractActivity> constructor = getClass().getConstructor(getClass());
             return constructor.newInstance(this);
         } catch (NoSuchMethodException | SecurityException | InstantiationException | IllegalAccessException | IllegalArgumentException
                         | InvocationTargetException e) {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliveryActivityNEW.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliveryActivity.java
similarity index 87%
rename from jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliveryActivityNEW.java
rename to jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliveryActivity.java
index 4d913c9f9..7441813e7 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliveryActivityNEW.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliveryActivity.java
@@ -24,16 +24,16 @@
 import com.graphhopper.jsprit.core.problem.SizeDimension.SizeDimensionSign;
 import com.graphhopper.jsprit.core.problem.job.AbstractJob;
 
-public class DeliveryActivityNEW extends JobActivity {
+public class DeliveryActivity extends JobActivity {
 
 
-    public DeliveryActivityNEW(AbstractJob job, String name, Location location,
+    public DeliveryActivity(AbstractJob job, String name, Location location,
                     double operationTime, SizeDimension capacity, Collection<TimeWindow> timeWindows) {
         super(job, name, location, operationTime, capacity.sign() == SizeDimensionSign.POSITIVE
                         ? capacity.invert() : capacity, timeWindows);
     }
 
-    public DeliveryActivityNEW(DeliveryActivityNEW sourceActivity) {
+    public DeliveryActivity(DeliveryActivity sourceActivity) {
         super(sourceActivity);
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ExchangeActivityNEW.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ExchangeActivity.java
similarity index 84%
rename from jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ExchangeActivityNEW.java
rename to jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ExchangeActivity.java
index 8b51f68ae..d9c0dae67 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ExchangeActivityNEW.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ExchangeActivity.java
@@ -23,20 +23,20 @@
 import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.job.AbstractJob;
 
-public class ExchangeActivityNEW extends JobActivity {
+public class ExchangeActivity extends JobActivity {
 
-    public ExchangeActivityNEW(AbstractJob job, String name, Location location,
+    public ExchangeActivity(AbstractJob job, String name, Location location,
                     double operationTime, SizeDimension size, Collection<TimeWindow> timeWindows) {
         super(job, name, location, operationTime, size, timeWindows);
     }
 
-    public ExchangeActivityNEW(AbstractJob job, String name, Location location,
+    public ExchangeActivity(AbstractJob job, String name, Location location,
                     double operationTime, SizeDimension deliverySize, SizeDimension backhaulSize,
                     Collection<TimeWindow> timeWindows) {
         this(job, name, location, operationTime, backhaulSize.subtract(deliverySize), timeWindows);
     }
 
-    public ExchangeActivityNEW(ExchangeActivityNEW sourceActivity) {
+    public ExchangeActivity(ExchangeActivity sourceActivity) {
         super(sourceActivity);
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/InternalActivity.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/InternalActivity.java
index 6f57d3878..27c6a5f71 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/InternalActivity.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/InternalActivity.java
@@ -8,7 +8,7 @@
  *
  * @author balage
  */
-public abstract class InternalActivity extends AbstractActivityNEW implements InternalActivityMarker {
+public abstract class InternalActivity extends AbstractActivity implements InternalActivityMarker {
 
     public InternalActivity(String name, Location location, SizeDimension capacity) {
         super(name, location, capacity);
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/JobActivity.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/JobActivity.java
index ca8516657..ff714125c 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/JobActivity.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/JobActivity.java
@@ -16,7 +16,7 @@
  *
  * @author schroeder
  */
-public abstract class JobActivity extends AbstractActivityNEW {
+public abstract class JobActivity extends AbstractActivity {
 
     private AbstractJob job;
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupActivityNEW.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupActivity.java
similarity index 85%
rename from jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupActivityNEW.java
rename to jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupActivity.java
index 24b3a8a92..ef4b0fe23 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupActivityNEW.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupActivity.java
@@ -23,14 +23,14 @@
 import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.job.AbstractJob;
 
-public class PickupActivityNEW extends JobActivity {
+public class PickupActivity extends JobActivity {
 
-    public PickupActivityNEW(AbstractJob job, String name, Location location, double operationTime,
+    public PickupActivity(AbstractJob job, String name, Location location, double operationTime,
                     SizeDimension capacity, Collection<TimeWindow> timeWindows) {
         super(job, name, location, operationTime, capacity, timeWindows);
     }
 
-    public PickupActivityNEW(PickupActivityNEW sourceActivity) {
+    public PickupActivity(PickupActivity sourceActivity) {
         super(sourceActivity);
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivityNEW.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivity.java
similarity index 85%
rename from jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivityNEW.java
rename to jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivity.java
index c27471844..3fef91746 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivityNEW.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivity.java
@@ -23,15 +23,15 @@
 import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.job.AbstractJob;
 
-public class ServiceActivityNEW extends JobActivity {
+public class ServiceActivity extends JobActivity {
 
-    public ServiceActivityNEW(AbstractJob job, String type, Location location, double operationTime,
+    public ServiceActivity(AbstractJob job, String type, Location location, double operationTime,
                     SizeDimension capacity, Collection<TimeWindow> timeWindows) {
         super(job, type, location, operationTime, capacity, timeWindows);
     }
 
 
-    public ServiceActivityNEW(ServiceActivityNEW sourceActivity) {
+    public ServiceActivity(ServiceActivity sourceActivity) {
         super(sourceActivity);
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TourShipmentActivityFactory.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TourShipmentActivityFactory.java
index 072a423c6..340f77df3 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TourShipmentActivityFactory.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TourShipmentActivityFactory.java
@@ -21,8 +21,8 @@
 
 public interface TourShipmentActivityFactory {
 
-    public AbstractActivityNEW createPickup(Shipment shipment);
+    public AbstractActivity createPickup(Shipment shipment);
 
-    public AbstractActivityNEW createDelivery(Shipment shipment);
+    public AbstractActivity createDelivery(Shipment shipment);
 
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java
index 7a1b2f387..52088d94b 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java
@@ -22,7 +22,7 @@
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.AbstractActivityNEW;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.AbstractActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 
@@ -179,8 +179,8 @@ private static void printVerbose(PrintWriter out, VehicleRoutingProblem problem,
                 } else {
                     jobId = "-";
                 }
-                String type = (act instanceof AbstractActivityNEW)
-                    ? ((AbstractActivityNEW) act).getType() : act.getName();
+                String type = (act instanceof AbstractActivity)
+                    ? ((AbstractActivity) act).getType() : act.getName();
                 double c = problem.getTransportCosts().getTransportCost(prevAct.getLocation(), act.getLocation(), prevAct.getEndTime(), route.getDriver(),
                     route.getVehicle());
                 c += problem.getActivityCosts().getActivityCost(act, act.getArrTime(), route.getDriver(), route.getVehicle());
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/InitialRoutesTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/InitialRoutesTest.java
index 2f539b397..ca6cb1cca 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/InitialRoutesTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/InitialRoutesTest.java
@@ -46,7 +46,7 @@
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivityNEW;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
@@ -194,7 +194,7 @@ public void maxCapacityShouldNotBeExceeded() {
     private boolean secondActIsPickup(Collection<VehicleRoutingProblemSolution> solutions) {
         VehicleRoutingProblemSolution solution = Solutions.bestOf(solutions);
         TourActivity secondAct = solution.getRoutes().iterator().next().getActivities().get(1);
-        return secondAct instanceof PickupActivityNEW;
+        return secondAct instanceof PickupActivity;
     }
 
     @Test
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/HardPickupAndDeliveryShipmentActivityConstraintTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/HardPickupAndDeliveryShipmentActivityConstraintTest.java
index 60691272c..b7489e6c3 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/HardPickupAndDeliveryShipmentActivityConstraintTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/HardPickupAndDeliveryShipmentActivityConstraintTest.java
@@ -30,9 +30,9 @@
 import com.graphhopper.jsprit.core.problem.job.Service;
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivityNEW;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivityNEW;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.ServiceActivityNEW;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.ServiceActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
@@ -77,18 +77,18 @@ public void doBefore() {
 
     @Test
     public void whenPickupActivityIsInsertedAndLoadIsSufficient_returnFullFilled() {
-        ServiceActivityNEW pickupService = (ServiceActivityNEW) vrp.getActivities(s1).get(0);
-        ServiceActivityNEW anotherService = (ServiceActivityNEW) vrp.getActivities(s2).get(0);
-        PickupActivityNEW pickupShipment = (PickupActivityNEW) vrp.getActivities(shipment).get(0);
+        ServiceActivity pickupService = (ServiceActivity) vrp.getActivities(s1).get(0);
+        ServiceActivity anotherService = (ServiceActivity) vrp.getActivities(s2).get(0);
+        PickupActivity pickupShipment = (PickupActivity) vrp.getActivities(shipment).get(0);
 
         assertEquals(ConstraintsStatus.FULFILLED, constraint.fulfilled(iFacts, pickupService, pickupShipment, anotherService, 0.0));
     }
 
     @Test
     public void whenPickupActivityIsInsertedAndLoadIsNotSufficient_returnNOT_FullFilled() {
-        ServiceActivityNEW pickupService = (ServiceActivityNEW) vrp.getActivities(s1).get(0);
-        ServiceActivityNEW anotherService = (ServiceActivityNEW) vrp.getActivities(s2).get(0);
-        PickupActivityNEW pickupShipment = (PickupActivityNEW) vrp.getActivities(shipment).get(0);
+        ServiceActivity pickupService = (ServiceActivity) vrp.getActivities(s1).get(0);
+        ServiceActivity anotherService = (ServiceActivity) vrp.getActivities(s2).get(0);
+        PickupActivity pickupShipment = (PickupActivity) vrp.getActivities(shipment).get(0);
 
         stateManager.putInternalTypedActivityState(pickupService, InternalStates.LOAD, SizeDimension.Builder.newInstance().addDimension(0, 2).build());
         //		when(stateManager.getActivityState(pickupService, StateFactory.LOAD)).thenReturn(StateFactory.createState(2.0));
@@ -97,10 +97,10 @@ public void whenPickupActivityIsInsertedAndLoadIsNotSufficient_returnNOT_FullFil
 
     @Test
     public void whenDeliveryActivityIsInsertedAndLoadIsSufficient_returnFullFilled() {
-        ServiceActivityNEW pickupService = (ServiceActivityNEW) vrp.getActivities(s1).get(0);
-        ServiceActivityNEW anotherService = (ServiceActivityNEW) vrp.getActivities(s2).get(0);
+        ServiceActivity pickupService = (ServiceActivity) vrp.getActivities(s1).get(0);
+        ServiceActivity anotherService = (ServiceActivity) vrp.getActivities(s2).get(0);
 
-        DeliveryActivityNEW deliverShipment = (DeliveryActivityNEW) vrp.getActivities(shipment)
+        DeliveryActivity deliverShipment = (DeliveryActivity) vrp.getActivities(shipment)
                         .get(1);
 
         stateManager.putInternalTypedActivityState(pickupService, InternalStates.LOAD, SizeDimension.Builder.newInstance().addDimension(0, 1).build());
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/StateManagerTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/StateManagerTest.java
index a7fff1589..462c19806 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/StateManagerTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/StateManagerTest.java
@@ -25,7 +25,7 @@
 import com.graphhopper.jsprit.core.problem.job.Service;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.ServiceActivityNEW;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.ServiceActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
@@ -48,7 +48,7 @@
 
         @Override
         public List<JobActivity> createActivities(Job job) {
-            ServiceActivityNEW act = mock(ServiceActivityNEW.class);
+            ServiceActivity act = mock(ServiceActivity.class);
             when(act.getIndex()).thenReturn(1);
             List<JobActivity> acts = new ArrayList<>();
             acts.add(act);
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/LoadConstraintTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/LoadConstraintTest.java
index 0724014c1..f4df4646a 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/LoadConstraintTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/LoadConstraintTest.java
@@ -26,9 +26,9 @@
 import com.graphhopper.jsprit.core.problem.job.*;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivityNEW;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivityNEW;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.ServiceActivityNEW;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.ServiceActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindows;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
@@ -143,7 +143,7 @@ public void whenServiceRouteAndNewServiceFitsInBetweenStartAndAct1_itShouldRetur
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
         JobInsertionContext context = new JobInsertionContext(serviceRoute, s, serviceRoute.getVehicle(), null, 0.);
-        ServiceActivityNEW newAct = mock(ServiceActivityNEW.class);
+        ServiceActivity newAct = mock(ServiceActivity.class);
         when(newAct.getLoadChange()).thenReturn(newSize);
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, serviceRoute.getStart(), newAct, serviceRoute.getActivities().get(0), 0.);
@@ -160,7 +160,7 @@ public void whenServiceRouteAndNewServiceFitsInBetweenAc1AndAct2_itShouldReturnF
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
         JobInsertionContext context = new JobInsertionContext(serviceRoute, s, serviceRoute.getVehicle(), null, 0.);
-        ServiceActivityNEW newAct = mock(ServiceActivityNEW.class);
+        ServiceActivity newAct = mock(ServiceActivity.class);
         when(newAct.getLoadChange()).thenReturn(newSize);
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, serviceRoute.getActivities().get(0), newAct, serviceRoute.getActivities().get(1), 0.);
@@ -177,7 +177,7 @@ public void whenServiceRouteAndNewServiceFitsInBetweenAc2AndEnd_itShouldReturnFu
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
         JobInsertionContext context = new JobInsertionContext(serviceRoute, s, serviceRoute.getVehicle(), null, 0.);
-        ServiceActivityNEW newAct = mock(ServiceActivityNEW.class);
+        ServiceActivity newAct = mock(ServiceActivity.class);
         when(newAct.getLoadChange()).thenReturn(newSize);
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, serviceRoute.getActivities().get(1), newAct, serviceRoute.getEnd(), 0.);
@@ -197,7 +197,7 @@ public void whenServiceRouteAndNewServiceDoesNotFitInBetweenStartAndAct1_itShoul
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
         JobInsertionContext context = new JobInsertionContext(serviceRoute, s, serviceRoute.getVehicle(), null, 0.);
-        ServiceActivityNEW newAct = mock(ServiceActivityNEW.class);
+        ServiceActivity newAct = mock(ServiceActivity.class);
         when(newAct.getLoadChange()).thenReturn(newSize);
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, serviceRoute.getStart(), newAct, serviceRoute.getActivities().get(0), 0.);
@@ -214,7 +214,7 @@ public void whenServiceRouteAndNewServiceDoesNotFitInBetweenAc1AndAct2_itShouldR
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
         JobInsertionContext context = new JobInsertionContext(serviceRoute, s, serviceRoute.getVehicle(), null, 0.);
-        ServiceActivityNEW newAct = mock(ServiceActivityNEW.class);
+        ServiceActivity newAct = mock(ServiceActivity.class);
         when(newAct.getLoadChange()).thenReturn(newSize);
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, serviceRoute.getActivities().get(0), newAct, serviceRoute.getActivities().get(1), 0.);
@@ -231,7 +231,7 @@ public void whenServiceRouteAndNewServiceDoesNotFitInBetweenAc2AndEnd_itShouldRe
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
         JobInsertionContext context = new JobInsertionContext(serviceRoute, s, serviceRoute.getVehicle(), null, 0.);
-        ServiceActivityNEW newAct = mock(ServiceActivityNEW.class);
+        ServiceActivity newAct = mock(ServiceActivity.class);
         when(newAct.getLoadChange()).thenReturn(newSize);
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, serviceRoute.getActivities().get(1), newAct, serviceRoute.getEnd(), 0.);
@@ -306,7 +306,7 @@ public void whenPDRoute_newPickupShouldFitInBetweenStartAndAct1() {
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
         JobInsertionContext context = new JobInsertionContext(pickupDeliveryRoute, s, pickupDeliveryRoute.getVehicle(), null, 0.);
-        PickupActivityNEW newAct = new PickupActivityNEW(s, "pick", null, 0, newSize,
+        PickupActivity newAct = new PickupActivity(s, "pick", null, 0, newSize,
             TimeWindows.ANY_TIME.getTimeWindows());
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, pickupDeliveryRoute.getStart(), newAct, pickupDeliveryRoute.getActivities().get(0), 0.);
@@ -323,7 +323,7 @@ public void whenPDRoute_newPickupShouldFitInBetweenAct1AndAct2() {
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
         JobInsertionContext context = new JobInsertionContext(pickupDeliveryRoute, s, pickupDeliveryRoute.getVehicle(), null, 0.);
-        PickupActivityNEW newAct = new PickupActivityNEW(s, "pick", null, 0, newSize,
+        PickupActivity newAct = new PickupActivity(s, "pick", null, 0, newSize,
             TimeWindows.ANY_TIME.getTimeWindows());
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, pickupDeliveryRoute.getActivities().get(0), newAct, pickupDeliveryRoute.getActivities().get(1), 0.);
@@ -340,7 +340,7 @@ public void whenPDRoute_newPickupShouldFitInBetweenAct2AndEnd() {
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
         JobInsertionContext context = new JobInsertionContext(pickupDeliveryRoute, s, pickupDeliveryRoute.getVehicle(), null, 0.);
-        PickupActivityNEW newAct = new PickupActivityNEW(s, "pick", null, 0, newSize,
+        PickupActivity newAct = new PickupActivity(s, "pick", null, 0, newSize,
             TimeWindows.ANY_TIME.getTimeWindows());
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, pickupDeliveryRoute.getActivities().get(1), newAct, pickupDeliveryRoute.getEnd(), 0.);
@@ -360,7 +360,7 @@ public void whenPDRoute_newPickupShouldNotFitInBetweenStartAndAct1() {
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
         JobInsertionContext context = new JobInsertionContext(pickupDeliveryRoute, s, pickupDeliveryRoute.getVehicle(), null, 0.);
-        PickupActivityNEW newAct = new PickupActivityNEW(s, "pick", null, 0, newSize,
+        PickupActivity newAct = new PickupActivity(s, "pick", null, 0, newSize,
             TimeWindows.ANY_TIME.getTimeWindows());
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, pickupDeliveryRoute.getStart(), newAct, pickupDeliveryRoute.getActivities().get(0), 0.);
@@ -377,7 +377,7 @@ public void whenPDRoute_newPickupShouldNotFitInBetweenAct1AndAct2() {
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
         JobInsertionContext context = new JobInsertionContext(pickupDeliveryRoute, s, pickupDeliveryRoute.getVehicle(), null, 0.);
-        PickupActivityNEW newAct = new PickupActivityNEW(s, "pick", null, 0, newSize,
+        PickupActivity newAct = new PickupActivity(s, "pick", null, 0, newSize,
             TimeWindows.ANY_TIME.getTimeWindows());
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, pickupDeliveryRoute.getActivities().get(0), newAct, pickupDeliveryRoute.getActivities().get(1), 0.);
@@ -394,7 +394,7 @@ public void whenPDRoute_newPickupShouldNotFitInBetweenAct2AndEnd() {
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
         JobInsertionContext context = new JobInsertionContext(pickupDeliveryRoute, s, pickupDeliveryRoute.getVehicle(), null, 0.);
-        PickupActivityNEW newAct = new PickupActivityNEW(s, "pick", null, 0, newSize,
+        PickupActivity newAct = new PickupActivity(s, "pick", null, 0, newSize,
             TimeWindows.ANY_TIME.getTimeWindows());
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, pickupDeliveryRoute.getActivities().get(1), newAct, pickupDeliveryRoute.getEnd(), 0.);
@@ -415,7 +415,7 @@ public void whenPDRoute_newDeliveryShouldFitInBetweenStartAndAct1() {
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
         JobInsertionContext context = new JobInsertionContext(pickupDeliveryRoute, s, pickupDeliveryRoute.getVehicle(), null, 0.);
-        DeliveryActivityNEW newAct = new DeliveryActivityNEW(s, "del", null, 0,
+        DeliveryActivity newAct = new DeliveryActivity(s, "del", null, 0,
             newSize.invert(),
             TimeWindows.ANY_TIME.getTimeWindows());
 
@@ -433,7 +433,7 @@ public void whenPDRoute_newDeliveryShouldNotFitInBetweenStartAndAct1() {
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
         JobInsertionContext context = new JobInsertionContext(pickupDeliveryRoute, s, pickupDeliveryRoute.getVehicle(), null, 0.);
-        DeliveryActivityNEW newAct = new DeliveryActivityNEW(s, "del", null, 0,
+        DeliveryActivity newAct = new DeliveryActivity(s, "del", null, 0,
             newSize.invert(),
             TimeWindows.ANY_TIME.getTimeWindows());
 
@@ -451,7 +451,7 @@ public void whenPDRoute_newDeliveryShouldFitInBetweenAct1AndAct2() {
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
         JobInsertionContext context = new JobInsertionContext(pickupDeliveryRoute, s, pickupDeliveryRoute.getVehicle(), null, 0.);
-        DeliveryActivityNEW newAct = new DeliveryActivityNEW(s, "del", null, 0,
+        DeliveryActivity newAct = new DeliveryActivity(s, "del", null, 0,
             newSize.invert(),
             TimeWindows.ANY_TIME.getTimeWindows());
 
@@ -469,7 +469,7 @@ public void whenPDRoute_newDeliveryNotShouldFitInBetweenAct1AndAct2() {
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
         JobInsertionContext context = new JobInsertionContext(pickupDeliveryRoute, s, pickupDeliveryRoute.getVehicle(), null, 0.);
-        DeliveryActivityNEW newAct = new DeliveryActivityNEW(s, "del", null, 0,
+        DeliveryActivity newAct = new DeliveryActivity(s, "del", null, 0,
             newSize.invert(),
             TimeWindows.ANY_TIME.getTimeWindows());
 
@@ -487,7 +487,7 @@ public void whenPDRoute_newDeliveryShouldFitInBetweenAct2AndEnd() {
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
         JobInsertionContext context = new JobInsertionContext(pickupDeliveryRoute, s, pickupDeliveryRoute.getVehicle(), null, 0.);
-        DeliveryActivityNEW newAct = new DeliveryActivityNEW(s, "del", null, 0,
+        DeliveryActivity newAct = new DeliveryActivity(s, "del", null, 0,
             newSize.invert(),
             TimeWindows.ANY_TIME.getTimeWindows());
 
@@ -505,7 +505,7 @@ public void whenPDRoute_newDeliveryShouldNotFitInBetweenAct2AndEnd() {
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
         JobInsertionContext context = new JobInsertionContext(pickupDeliveryRoute, s, pickupDeliveryRoute.getVehicle(), null, 0.);
-        DeliveryActivityNEW newAct = new DeliveryActivityNEW(s, "del", null, 0,
+        DeliveryActivity newAct = new DeliveryActivity(s, "del", null, 0,
             newSize.invert(),
             TimeWindows.ANY_TIME.getTimeWindows());
 
@@ -523,7 +523,7 @@ public void whenPDRouteAndNewServiceFitsInBetweenAc1AndAct2_itShouldReturnFulfil
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
         JobInsertionContext context = new JobInsertionContext(serviceRoute, s, serviceRoute.getVehicle(), null, 0.);
-        ServiceActivityNEW newAct = mock(ServiceActivityNEW.class);
+        ServiceActivity newAct = mock(ServiceActivity.class);
         when(newAct.getLoadChange()).thenReturn(newSize);
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, serviceRoute.getActivities().get(0), newAct, serviceRoute.getActivities().get(1), 0.);
@@ -540,7 +540,7 @@ public void whenPDRouteAndNewServiceFitsInBetweenAc2AndEnd_itShouldReturnFulfill
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
         JobInsertionContext context = new JobInsertionContext(serviceRoute, s, serviceRoute.getVehicle(), null, 0.);
-        ServiceActivityNEW newAct = mock(ServiceActivityNEW.class);
+        ServiceActivity newAct = mock(ServiceActivity.class);
         when(newAct.getLoadChange()).thenReturn(newSize);
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, serviceRoute.getActivities().get(1), newAct, serviceRoute.getEnd(), 0.);
@@ -560,7 +560,7 @@ public void whenPDRouteAndNewServiceDoesNotFitInBetweenStartAndAct1_itShouldRetu
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
         JobInsertionContext context = new JobInsertionContext(serviceRoute, s, serviceRoute.getVehicle(), null, 0.);
-        ServiceActivityNEW newAct = mock(ServiceActivityNEW.class);
+        ServiceActivity newAct = mock(ServiceActivity.class);
         when(newAct.getLoadChange()).thenReturn(newSize);
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, serviceRoute.getStart(), newAct, serviceRoute.getActivities().get(0), 0.);
@@ -577,7 +577,7 @@ public void whenPDRouteAndNewServiceDoesNotFitInBetweenAc1AndAct2_itShouldReturn
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
         JobInsertionContext context = new JobInsertionContext(serviceRoute, s, serviceRoute.getVehicle(), null, 0.);
-        ServiceActivityNEW newAct = mock(ServiceActivityNEW.class);
+        ServiceActivity newAct = mock(ServiceActivity.class);
         when(newAct.getLoadChange()).thenReturn(newSize);
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, serviceRoute.getActivities().get(0), newAct, serviceRoute.getActivities().get(1), 0.);
@@ -594,7 +594,7 @@ public void whenPDRouteAndNewServiceDoesNotFitInBetweenAc2AndEnd_itShouldReturnF
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
         JobInsertionContext context = new JobInsertionContext(serviceRoute, s, serviceRoute.getVehicle(), null, 0.);
-        ServiceActivityNEW newAct = mock(ServiceActivityNEW.class);
+        ServiceActivity newAct = mock(ServiceActivity.class);
         when(newAct.getLoadChange()).thenReturn(newSize);
 
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, serviceRoute.getActivities().get(1), newAct, serviceRoute.getEnd(), 0.);
@@ -629,7 +629,7 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldFitInBetweenStartAndAct
 
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
 
-        PickupActivityNEW newAct = new PickupActivityNEW(s, "pick", null, 0, newSize,
+        PickupActivity newAct = new PickupActivity(s, "pick", null, 0, newSize,
             TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipmentRoute.getStart(), newAct, shipmentRoute.getActivities().get(0), 0.);
@@ -647,7 +647,7 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldNotFitInBetweenStartAnd
 
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
 
-        PickupActivityNEW newAct = new PickupActivityNEW(s, "pick", null, 0, newSize,
+        PickupActivity newAct = new PickupActivity(s, "pick", null, 0, newSize,
             TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipmentRoute.getStart(), newAct, shipmentRoute.getActivities().get(0), 0.);
@@ -665,7 +665,7 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldFitInBetweenAct1AndAct2
 
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
 
-        PickupActivityNEW newAct = new PickupActivityNEW(s, "pick", null, 0, newSize,
+        PickupActivity newAct = new PickupActivity(s, "pick", null, 0, newSize,
             TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipmentRoute.getActivities().get(0), newAct, shipmentRoute.getActivities().get(1), 0.);
@@ -683,7 +683,7 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldNotFitInBetweenAct1AndA
 
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
 
-        PickupActivityNEW newAct = new PickupActivityNEW(s, "pick", null, 0, newSize,
+        PickupActivity newAct = new PickupActivity(s, "pick", null, 0, newSize,
             TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipmentRoute.getActivities().get(0), newAct, shipmentRoute.getActivities().get(1), 0.);
@@ -701,7 +701,7 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldFitInBetweenAct2AndAct3
 
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
 
-        PickupActivityNEW newAct = new PickupActivityNEW(s, "pick", null, 0, newSize,
+        PickupActivity newAct = new PickupActivity(s, "pick", null, 0, newSize,
             TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipmentRoute.getActivities().get(1), newAct, shipmentRoute.getActivities().get(2), 0.);
@@ -719,7 +719,7 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldNotFitInBetweenAct2AndA
 
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
 
-        PickupActivityNEW newAct = new PickupActivityNEW(s, "pick", null, 0, newSize,
+        PickupActivity newAct = new PickupActivity(s, "pick", null, 0, newSize,
             TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipmentRoute.getActivities().get(1), newAct, shipmentRoute.getActivities().get(2), 0.);
@@ -737,7 +737,7 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldFitInBetweenAct3AndAct4
 
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
 
-        PickupActivityNEW newAct = new PickupActivityNEW(s, "pick", null, 0, newSize,
+        PickupActivity newAct = new PickupActivity(s, "pick", null, 0, newSize,
             TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipmentRoute.getActivities().get(2), newAct, shipmentRoute.getActivities().get(3), 0.);
@@ -755,7 +755,7 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldNotFitInBetweenAct3AndA
 
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
 
-        PickupActivityNEW newAct = new PickupActivityNEW(s, "pick", null, 0, newSize,
+        PickupActivity newAct = new PickupActivity(s, "pick", null, 0, newSize,
             TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipmentRoute.getActivities().get(2), newAct, shipmentRoute.getActivities().get(3), 0.);
@@ -773,7 +773,7 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldFitInBetweenAct4AndEnd(
 
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
 
-        PickupActivityNEW newAct = new PickupActivityNEW(s, "pick", null, 0, newSize,
+        PickupActivity newAct = new PickupActivity(s, "pick", null, 0, newSize,
             TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipmentRoute.getActivities().get(3), newAct, shipmentRoute.getEnd(), 0.);
@@ -791,7 +791,7 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldNotFitInBetweenAct4AndE
 
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
 
-        PickupActivityNEW newAct = new PickupActivityNEW(s, "pick", null, 0, newSize,
+        PickupActivity newAct = new PickupActivity(s, "pick", null, 0, newSize,
             TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipmentRoute.getActivities().get(3), newAct, shipmentRoute.getEnd(), 0.);
@@ -813,7 +813,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldFitInBetweenStartAndA
 
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
 
-        DeliveryActivityNEW newAct = new DeliveryActivityNEW(s, "pick", null, 0,
+        DeliveryActivity newAct = new DeliveryActivity(s, "pick", null, 0,
             newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipmentRoute.getStart(), newAct, shipmentRoute.getActivities().get(0), 0.);
@@ -831,7 +831,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldNotFitInBetweenStartA
 
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
 
-        DeliveryActivityNEW newAct = new DeliveryActivityNEW(s, "pick", null, 0,
+        DeliveryActivity newAct = new DeliveryActivity(s, "pick", null, 0,
             newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipmentRoute.getStart(), newAct, shipmentRoute.getActivities().get(0), 0.);
@@ -849,7 +849,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldFitInBetweenAct1AndAc
 
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
 
-        DeliveryActivityNEW newAct = new DeliveryActivityNEW(s, "pick", null, 0,
+        DeliveryActivity newAct = new DeliveryActivity(s, "pick", null, 0,
             newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipmentRoute.getActivities().get(0), newAct, shipmentRoute.getActivities().get(1), 0.);
@@ -867,7 +867,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldNotFitInBetweenAct1An
 
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
 
-        DeliveryActivityNEW newAct = new DeliveryActivityNEW(s, "pick", null, 0,
+        DeliveryActivity newAct = new DeliveryActivity(s, "pick", null, 0,
             newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipmentRoute.getActivities().get(0), newAct, shipmentRoute.getActivities().get(1), 0.);
@@ -885,7 +885,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldFitInBetweenAct2AndAc
 
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
 
-        DeliveryActivityNEW newAct = new DeliveryActivityNEW(s, "pick", null, 0,
+        DeliveryActivity newAct = new DeliveryActivity(s, "pick", null, 0,
             newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipmentRoute.getActivities().get(1), newAct, shipmentRoute.getActivities().get(2), 0.);
@@ -903,7 +903,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldNotFitInBetweenAct2An
 
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
 
-        DeliveryActivityNEW newAct = new DeliveryActivityNEW(s, "pick", null, 0,
+        DeliveryActivity newAct = new DeliveryActivity(s, "pick", null, 0,
             newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipmentRoute.getActivities().get(1), newAct, shipmentRoute.getActivities().get(2), 0.);
@@ -921,7 +921,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldFitInBetweenAct3AndAc
 
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
 
-        DeliveryActivityNEW newAct = new DeliveryActivityNEW(s, "pick", null, 0,
+        DeliveryActivity newAct = new DeliveryActivity(s, "pick", null, 0,
             newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipmentRoute.getActivities().get(2), newAct, shipmentRoute.getActivities().get(3), 0.);
@@ -939,7 +939,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldNotFitInBetweenAct3An
 
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
 
-        DeliveryActivityNEW newAct = new DeliveryActivityNEW(s, "pick", null, 0,
+        DeliveryActivity newAct = new DeliveryActivity(s, "pick", null, 0,
             newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipmentRoute.getActivities().get(2), newAct, shipmentRoute.getActivities().get(3), 0.);
@@ -957,7 +957,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldFitInBetweenAct4AndEn
 
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
 
-        DeliveryActivityNEW newAct = new DeliveryActivityNEW(s, "pick", null, 0,
+        DeliveryActivity newAct = new DeliveryActivity(s, "pick", null, 0,
             newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipmentRoute.getActivities().get(3), newAct, shipmentRoute.getEnd(), 0.);
@@ -974,7 +974,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldNotFitInBetweenAct4An
 
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
 
-        DeliveryActivityNEW newAct = new DeliveryActivityNEW(s, "pick", null, 0,
+        DeliveryActivity newAct = new DeliveryActivity(s, "pick", null, 0,
             newSize.invert(), TimeWindows.ANY_TIME.getTimeWindows());
         PickupAndDeliverShipmentLoadActivityLevelConstraint loadConstraint = new PickupAndDeliverShipmentLoadActivityLevelConstraint(stateManager);
         HardActivityConstraint.ConstraintsStatus status = loadConstraint.fulfilled(context, shipmentRoute.getActivities().get(3), newAct, shipmentRoute.getEnd(), 0.);
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/CustomJobTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/CustomJobTest.java
index ab2e482ba..9044c1b92 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/CustomJobTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/CustomJobTest.java
@@ -20,7 +20,7 @@
 
 import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivityNEW;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import org.junit.Assert;
 import org.junit.Test;
@@ -104,7 +104,7 @@ protected void createActivities(JobBuilder<? extends AbstractJob, ?> jobBuilder)
             CustomJob.Builder builder = (CustomJob.Builder) jobBuilder;
             JobActivityList list = new SequentialJobActivityList(this);
             for (int i = 0; i < builder.getLocs().size(); i++) {
-                list.addActivity(new PickupActivityNEW(this, "pick", builder.getLocs().get(i), 0, builder.getCaps().get(i), Arrays.asList(TimeWindow.ETERNITY)));
+                list.addActivity(new PickupActivity(this, "pick", builder.getLocs().get(i), 0, builder.getCaps().get(i), Arrays.asList(TimeWindow.ETERNITY)));
             }
             setActivities(list);
         }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/GraphJobActivityListTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/GraphJobActivityListTest.java
index d0a9ed953..f34420628 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/GraphJobActivityListTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/GraphJobActivityListTest.java
@@ -1,7 +1,7 @@
 package com.graphhopper.jsprit.core.problem.job;
 
 import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.ServiceActivityNEW;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.ServiceActivity;
 import org.junit.Before;
 import org.junit.Test;
 
@@ -23,8 +23,8 @@ public void beforeClass() {
     }
 
 
-    private ServiceActivityNEW createActivity(AbstractJob job, String name) {
-        ServiceActivityNEW act = mock(ServiceActivityNEW.class);
+    private ServiceActivity createActivity(AbstractJob job, String name) {
+        ServiceActivity act = mock(ServiceActivity.class);
         when(act.getName()).thenReturn(name);
         when(act.getJob()).thenReturn(job);
         when(act.toString()).thenReturn(name);
@@ -45,7 +45,7 @@ public void whenCreatingList_itMustGiveBackTheCorrectJob() {
     @Test
     public void whenAddingAnActivity_itMustHaveTheCorrectJob() {
         GraphJobActivityList list = new GraphJobActivityList(job);
-        ServiceActivityNEW actA = createActivity(job, "A");
+        ServiceActivity actA = createActivity(job, "A");
         list.addActivity(actA);
         assertEquals(1, list.size());
         assertEquals(actA, list.getAll().get(0));
@@ -54,7 +54,7 @@ public void whenAddingAnActivity_itMustHaveTheCorrectJob() {
     @Test
     public void whenAddingAnActivity_itMustInitializeTheCache() {
         GraphJobActivityList list = new GraphJobActivityList(job);
-        ServiceActivityNEW actA = createActivity(job, "A");
+        ServiceActivity actA = createActivity(job, "A");
         list.addActivity(actA);
         assertEquals(1, list.dependencies.size());
         assertEquals(setOf(actA), list.dependencies.keySet());
@@ -68,7 +68,7 @@ public void whenAddingAnActivity_itMustInitializeTheCache() {
     @Test
     public void whenAddingAnActivityTwice_itMustHaveToAddOnlyOnce() {
         GraphJobActivityList list = new GraphJobActivityList(job);
-        ServiceActivityNEW actA = createActivity(job, "A");
+        ServiceActivity actA = createActivity(job, "A");
         list.addActivity(actA);
         list.addActivity(actA);
         assertEquals(1, list.size());
@@ -84,8 +84,8 @@ public void whenAddingAnActivityWithWrongJob_itMustThrowException() {
     @Test
     public void whenAddingADependency_itMustAddTheActivities() {
         GraphJobActivityList list = new GraphJobActivityList(job);
-        ServiceActivityNEW actA = createActivity(job, "A");
-        ServiceActivityNEW actB = createActivity(job, "B");
+        ServiceActivity actA = createActivity(job, "A");
+        ServiceActivity actB = createActivity(job, "B");
         list.addActivity(actA);
         list.addDependency(actA, actB);
         assertEquals(2, list.size());
@@ -96,8 +96,8 @@ public void whenAddingADependency_itMustAddTheActivities() {
     @Test
     public void whenAddingADependency_itMustUpdateCaches() {
         GraphJobActivityList list = new GraphJobActivityList(job);
-        ServiceActivityNEW actA = createActivity(job, "A");
-        ServiceActivityNEW actB = createActivity(job, "B");
+        ServiceActivity actA = createActivity(job, "A");
+        ServiceActivity actB = createActivity(job, "B");
         list.addDependency(actA, actB);
         assertEquals(setOf(actB), list.dependencies.get(actA));
         assertEquals(setOf(actA), list.transitivePrecedingDependencyCache.get(actB));
@@ -107,9 +107,9 @@ public void whenAddingADependency_itMustUpdateCaches() {
     @Test
     public void whenAddingASecondDependency_itMustUpdateCachesTransitively() {
         GraphJobActivityList list = new GraphJobActivityList(job);
-        ServiceActivityNEW actA = createActivity(job, "A");
-        ServiceActivityNEW actB = createActivity(job, "B");
-        ServiceActivityNEW actC = createActivity(job, "C");
+        ServiceActivity actA = createActivity(job, "A");
+        ServiceActivity actB = createActivity(job, "B");
+        ServiceActivity actC = createActivity(job, "C");
         list.addDependency(actA, actB);
         list.addDependency(actB, actC);
         assertEquals(setOf(actB), list.dependencies.get(actA));
@@ -123,8 +123,8 @@ public void whenAddingASecondDependency_itMustUpdateCachesTransitively() {
     @Test(expected = IllegalArgumentException.class)
     public void whenAddingADependencyWhichCreatesCycly_itMustThrowAnException() {
         GraphJobActivityList list = new GraphJobActivityList(job);
-        ServiceActivityNEW actA = createActivity(job, "A");
-        ServiceActivityNEW actB = createActivity(job, "B");
+        ServiceActivity actA = createActivity(job, "A");
+        ServiceActivity actB = createActivity(job, "B");
         list.addDependency(actA, actB);
         list.addDependency(actB, actA);
     }
@@ -132,11 +132,11 @@ public void whenAddingADependencyWhichCreatesCycly_itMustThrowAnException() {
 
     @Test
     public void complexTest() {
-        ServiceActivityNEW actA = createActivity(job, "A");
-        ServiceActivityNEW actB = createActivity(job, "B");
-        ServiceActivityNEW actC = createActivity(job, "C");
-        ServiceActivityNEW actD = createActivity(job, "D");
-        ServiceActivityNEW actE = createActivity(job, "E");
+        ServiceActivity actA = createActivity(job, "A");
+        ServiceActivity actB = createActivity(job, "B");
+        ServiceActivity actC = createActivity(job, "C");
+        ServiceActivity actD = createActivity(job, "D");
+        ServiceActivity actE = createActivity(job, "E");
 
         GraphJobActivityList list = new GraphJobActivityList(job);
         list.addDependency(actA, actB);
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/TestVehicleRoute.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/TestVehicleRoute.java
index dd8104b2f..f8cd43d77 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/TestVehicleRoute.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/TestVehicleRoute.java
@@ -32,10 +32,10 @@
 import com.graphhopper.jsprit.core.problem.job.Delivery;
 import com.graphhopper.jsprit.core.problem.job.Pickup;
 import com.graphhopper.jsprit.core.problem.job.Service;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivityNEW;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivityNEW;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.ServiceActivityNEW;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.ServiceActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindows;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
@@ -103,7 +103,7 @@ public void whenBuildingANonEmptyTour2Times_tourIterIteratesOverActivitiesCorrec
         }
         {
             Service service = new Service.Builder("3").setLocation(loc).build();
-            ServiceActivityNEW serviceAct = new ServiceActivityNEW(service, "service",
+            ServiceActivity serviceAct = new ServiceActivity(service, "service",
                             loc,
                             0d, SizeDimension.Builder.newInstance().addDimension(0, 30).build(),
                             TimeWindows.ANY_TIME.getTimeWindows());
@@ -315,7 +315,7 @@ public void whenAddingPickup_itShouldBeTreatedAsPickup() {
 
         TourActivity act = route.getActivities().get(0);
         assertEquals("pick.pickup", act.getName());
-        assertTrue(act instanceof PickupActivityNEW);
+        assertTrue(act instanceof PickupActivity);
         assertTrue(((JobActivity) act).getJob() instanceof Pickup);
 
     }
@@ -329,7 +329,7 @@ public void whenAddingPickup_itShouldBeAdded() {
 
         TourActivity act = route.getActivities().get(0);
         assertEquals("pick.pickup", act.getName());
-        assertTrue(act instanceof PickupActivityNEW);
+        assertTrue(act instanceof PickupActivity);
         assertTrue(((JobActivity) act).getJob() instanceof Pickup);
 
     }
@@ -343,7 +343,7 @@ public void whenAddingDelivery_itShouldBeTreatedAsDelivery() {
 
         TourActivity act = route.getActivities().get(0);
         assertEquals("delivery.delivery", act.getName());
-        assertTrue(act instanceof DeliveryActivityNEW);
+        assertTrue(act instanceof DeliveryActivity);
         assertTrue(((JobActivity) act).getJob() instanceof Delivery);
 
     }
@@ -357,7 +357,7 @@ public void whenAddingDelivery_itShouldBeAdded() {
 
         TourActivity act = route.getActivities().get(0);
         assertEquals("delivery.delivery", act.getName());
-        assertTrue(act instanceof DeliveryActivityNEW);
+        assertTrue(act instanceof DeliveryActivity);
         assertTrue(((JobActivity) act).getJob() instanceof Delivery);
 
     }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivityTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivityTest.java
index 5babd1d95..3a6dab609 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivityTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivityTest.java
@@ -96,10 +96,10 @@ public void whenTwoDeliveriesHaveTheSameUnderlyingJob_theyAreEqual() {
         Location loc = Location.newInstance("loc");
         Service s1 = new Service.Builder("s").setLocation(loc).build();
         Service s2 = new Service.Builder("s").setLocation(loc).build();
-        ServiceActivityNEW d1 = new ServiceActivityNEW(s1, "s1",
+        ServiceActivity d1 = new ServiceActivity(s1, "s1",
                         loc, 0d, SizeDimension.EMPTY,
                         TimeWindows.ANY_TIME.getTimeWindows());
-        ServiceActivityNEW d2 = new ServiceActivityNEW(s2, "s2",
+        ServiceActivity d2 = new ServiceActivity(s2, "s2",
                         loc, 0d, SizeDimension.EMPTY,
                         TimeWindows.ANY_TIME.getTimeWindows());
 
@@ -111,10 +111,10 @@ public void whenTwoDeliveriesHaveTheDifferentUnderlyingJob_theyAreNotEqual() {
         Location loc = Location.newInstance("loc");
         Service s1 = new Service.Builder("s").setLocation(loc).build();
         Service s2 = new Service.Builder("s2").setLocation(loc).build();
-        ServiceActivityNEW d1 = new ServiceActivityNEW(s1, "s1",
+        ServiceActivity d1 = new ServiceActivity(s1, "s1",
                         loc, 0d, SizeDimension.EMPTY,
                         TimeWindows.ANY_TIME.getTimeWindows());
-        ServiceActivityNEW d2 = new ServiceActivityNEW(s2, "s2",
+        ServiceActivity d2 = new ServiceActivity(s2, "s2",
                         loc, 0d, SizeDimension.EMPTY,
                         TimeWindows.ANY_TIME.getTimeWindows());
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TestTourActivities.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TestTourActivities.java
index f65542457..5408dc012 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TestTourActivities.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TestTourActivities.java
@@ -33,14 +33,14 @@
 public class TestTourActivities {
 
     private Service service;
-    private ServiceActivityNEW act;
+    private ServiceActivity act;
     private TourActivities tour;
 
     @Before
     public void doBefore() {
         Location loc = Location.newInstance("loc");
         service = new Service.Builder("yo").setLocation(loc).build();
-        act = new ServiceActivityNEW(service, "s1",
+        act = new ServiceActivity(service, "s1",
                         loc, 0d, SizeDimension.Builder.newInstance().addDimension(0, 10).build(),
                         TimeWindows.ANY_TIME.getTimeWindows());
         tour = new TourActivities();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/CustomJob.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/CustomJob.java
index ce753e2fc..ef6ea8c5c 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/CustomJob.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/CustomJob.java
@@ -23,9 +23,9 @@
 import com.graphhopper.jsprit.core.problem.job.AbstractJob;
 import com.graphhopper.jsprit.core.problem.job.JobActivityList;
 import com.graphhopper.jsprit.core.problem.job.SequentialJobActivityList;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivityNEW;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.ExchangeActivityNEW;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivityNEW;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.ExchangeActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 
 import java.util.ArrayList;
@@ -131,11 +131,11 @@ protected void createActivities(JobBuilder<? extends AbstractJob, ?> jobBuilder)
         JobActivityList list = new SequentialJobActivityList(this);
         for (int i = 0; i < builder.getLocs().size(); i++) {
             if (builder.getTypes().get(i).equals("pickup")) {
-                list.addActivity(new PickupActivityNEW(this, "pick", builder.getLocs().get(i), 0, builder.getCaps().get(i), Arrays.asList(TimeWindow.ETERNITY)));
+                list.addActivity(new PickupActivity(this, "pick", builder.getLocs().get(i), 0, builder.getCaps().get(i), Arrays.asList(TimeWindow.ETERNITY)));
             } else if (builder.getTypes().get(i).equals("delivery")) {
-                list.addActivity(new DeliveryActivityNEW(this, "delivery", builder.getLocs().get(i), 0, builder.getCaps().get(i).invert(), Arrays.asList(TimeWindow.ETERNITY)));
+                list.addActivity(new DeliveryActivity(this, "delivery", builder.getLocs().get(i), 0, builder.getCaps().get(i).invert(), Arrays.asList(TimeWindow.ETERNITY)));
             } else {
-                list.addActivity(new ExchangeActivityNEW(this, "exchange", builder.getLocs().get(i), 0, builder.getCaps().get(i), Arrays.asList(TimeWindow.ETERNITY)));
+                list.addActivity(new ExchangeActivity(this, "exchange", builder.getLocs().get(i), 0, builder.getCaps().get(i), Arrays.asList(TimeWindow.ETERNITY)));
             }
         }
         setActivities(list);
diff --git a/jsprit-instances/src/test/java/com/graphhopper/jsprit/instance/reader/BelhaizaReaderTest.java b/jsprit-instances/src/test/java/com/graphhopper/jsprit/instance/reader/BelhaizaReaderTest.java
index 31da06518..98a4e62cb 100644
--- a/jsprit-instances/src/test/java/com/graphhopper/jsprit/instance/reader/BelhaizaReaderTest.java
+++ b/jsprit-instances/src/test/java/com/graphhopper/jsprit/instance/reader/BelhaizaReaderTest.java
@@ -17,6 +17,15 @@
  */
 package com.graphhopper.jsprit.instance.reader;
 
+import static org.junit.Assert.assertEquals;
+
+import java.net.URL;
+import java.util.ArrayList;
+import java.util.List;
+
+import org.junit.Ignore;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.VehicleRoutingAlgorithm;
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
@@ -27,13 +36,6 @@
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.reporting.SolutionPrinter;
 import com.graphhopper.jsprit.core.util.Solutions;
-import org.junit.Test;
-
-import java.net.URL;
-import java.util.ArrayList;
-import java.util.List;
-
-import static org.junit.Assert.assertEquals;
 
 
 public class BelhaizaReaderTest {
@@ -48,7 +50,9 @@ public void whenReadingBelhaizaInstance_nuOfCustomersIsCorrect() {
 
     private String getPath() {
         URL resource = getClass().getClassLoader().getResource("cm101.txt");
-        if (resource == null) throw new IllegalStateException("file C101_solomon.txt does not exist");
+        if (resource == null) {
+            throw new IllegalStateException("file C101_solomon.txt does not exist");
+        }
         return resource.getPath();
     }
 
@@ -163,6 +167,7 @@ public void fifthTimeWindowShouldBeCorrect() {
     }
 
     @Test
+    @Ignore
     public void testAlgo() {
         VehicleRoutingProblem.Builder builder = VehicleRoutingProblem.Builder.newInstance();
         new BelhaizaReader(builder).read(getPath());
diff --git a/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/VrpXMLReaderTest.java b/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/VrpXMLReaderTest.java
index 872cb97d5..d2ec6d8d6 100644
--- a/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/VrpXMLReaderTest.java
+++ b/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/VrpXMLReaderTest.java
@@ -37,9 +37,9 @@
 import com.graphhopper.jsprit.core.problem.job.Service;
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivityNEW;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivityNEW;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.ServiceActivityNEW;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.ServiceActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.util.Solutions;
@@ -626,10 +626,10 @@ public void testRead_ifReaderIsCalled_itReadsSuccessfullyV2() {
         assertEquals(1, solutions.get(0).getRoutes().size());
         List<TourActivity> activities = solutions.get(0).getRoutes().iterator().next().getTourActivities().getActivities();
         assertEquals(4, activities.size());
-        assertTrue(activities.get(0) instanceof ServiceActivityNEW);
-        assertTrue(activities.get(1) instanceof ServiceActivityNEW);
-        assertTrue(activities.get(2) instanceof PickupActivityNEW);
-        assertTrue(activities.get(3) instanceof DeliveryActivityNEW);
+        assertTrue(activities.get(0) instanceof ServiceActivity);
+        assertTrue(activities.get(1) instanceof ServiceActivity);
+        assertTrue(activities.get(2) instanceof PickupActivity);
+        assertTrue(activities.get(3) instanceof DeliveryActivity);
     }
 
     @Test
