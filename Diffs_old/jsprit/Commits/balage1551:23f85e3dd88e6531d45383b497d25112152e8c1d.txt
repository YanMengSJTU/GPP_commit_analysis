diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/FirstCustomJobExample.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/FirstCustomJobExample.java
index 9c6055484..f0b7e1eda 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/FirstCustomJobExample.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/FirstCustomJobExample.java
@@ -19,14 +19,14 @@
 package com.graphhopper.jsprit.core.algorithm;
 
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
-import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.reporting.SolutionPrinter;
-import com.graphhopper.jsprit.core.util.CustomPickupJob;
+import com.graphhopper.jsprit.core.util.CustomJob;
 import com.graphhopper.jsprit.core.util.Solutions;
 import org.junit.Assert;
 import org.junit.Test;
@@ -38,7 +38,7 @@
 
     @Test
     public void test() {
-        CustomPickupJob cj = CustomPickupJob.Builder.newInstance("job").addPickup(Location.newInstance(10, 0), SizeDimension.EMPTY).build();
+        CustomJob cj = CustomJob.Builder.newInstance("job").addPickup(Location.newInstance(10, 0), SizeDimension.EMPTY).build();
         Vehicle v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance()
             .addJob(cj).addVehicle(v).build();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/FirstCustomJobWithMultipleActivitiesExample.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/FirstCustomJobWithMultipleActivitiesExample.java
index ff4748261..6c0ccb98a 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/FirstCustomJobWithMultipleActivitiesExample.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/FirstCustomJobWithMultipleActivitiesExample.java
@@ -28,7 +28,7 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.reporting.SolutionPrinter;
-import com.graphhopper.jsprit.core.util.CustomPickupJob;
+import com.graphhopper.jsprit.core.util.CustomJob;
 import com.graphhopper.jsprit.core.util.Solutions;
 import org.junit.Assert;
 import org.junit.Test;
@@ -42,7 +42,7 @@
 
     @Test
     public void shouldRunOK() {
-        CustomPickupJob cj = CustomPickupJob.Builder.newInstance("job")
+        CustomJob cj = CustomJob.Builder.newInstance("job")
             .addPickup(Location.newInstance(10, 0), SizeDimension.Builder.newInstance().addDimension(0, 1).build())
             .addPickup(Location.newInstance(5, 0), SizeDimension.Builder.newInstance().addDimension(0, 2).build())
             .addPickup(Location.newInstance(20, 0), SizeDimension.Builder.newInstance().addDimension(0, 1).build())
@@ -60,7 +60,7 @@ public void shouldRunOK() {
 
     @Test
     public void shouldNotIgnoresCapacity() {
-        CustomPickupJob cj = CustomPickupJob.Builder.newInstance("job")
+        CustomJob cj = CustomJob.Builder.newInstance("job")
             .addPickup(Location.newInstance(10, 0), SizeDimension.Builder.newInstance().addDimension(0, 1).build())
             .addPickup(Location.newInstance(5, 0), SizeDimension.Builder.newInstance().addDimension(0, 2).build())
             .addPickup(Location.newInstance(20, 0), SizeDimension.Builder.newInstance().addDimension(0, 1).build())
@@ -78,7 +78,7 @@ public void shouldNotIgnoresCapacity() {
 
     @Test
     public void shouldNotIgnoresCapacityWithMixedPicksAndDeliveries() {
-        CustomPickupJob cj = CustomPickupJob.Builder.newInstance("job")
+        CustomJob cj = CustomJob.Builder.newInstance("job")
             .addPickup(Location.newInstance(10, 0), SizeDimension.Builder.newInstance().addDimension(0, 1).build())
             .addPickup(Location.newInstance(5, 0), SizeDimension.Builder.newInstance().addDimension(0, 2).build())
             .addDelivery(Location.newInstance(20, 0), SizeDimension.Builder.newInstance().addDimension(0, 3).build())
@@ -96,7 +96,7 @@ public void shouldNotIgnoresCapacityWithMixedPicksAndDeliveries() {
 
     @Test
     public void shouldNotIgnoresCapacityWithMixedPicksAndDeliveriesV2() {
-        CustomPickupJob cj = CustomPickupJob.Builder.newInstance("job")
+        CustomJob cj = CustomJob.Builder.newInstance("job")
             .addPickup(Location.newInstance(10, 0), SizeDimension.Builder.newInstance().addDimension(0, 1).build())
             .addPickup(Location.newInstance(5, 0), SizeDimension.Builder.newInstance().addDimension(0, 2).build())
             .addDelivery(Location.newInstance(20, 0), SizeDimension.Builder.newInstance().addDimension(0, 3).build())
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/LoadConstraintTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/LoadConstraintTest.java
index 7a40409ec..0724014c1 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/LoadConstraintTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/LoadConstraintTest.java
@@ -19,9 +19,9 @@
 package com.graphhopper.jsprit.core.problem.constraint;
 
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
-import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.CopyJobActivityFactory;
 import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.*;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
@@ -34,7 +34,7 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
-import com.graphhopper.jsprit.core.util.CustomPickupJob;
+import com.graphhopper.jsprit.core.util.CustomJob;
 import org.junit.Assert;
 import org.junit.Before;
 import org.junit.Test;
@@ -104,7 +104,7 @@ public void doBefore() {
 
     @Test
     public void whenCustomJob_itShouldNotIgnoreCapacity() {
-        CustomPickupJob cj = CustomPickupJob.Builder.newInstance("job")
+        CustomJob cj = CustomJob.Builder.newInstance("job")
             .addPickup(Location.newInstance(10, 0), SizeDimension.Builder.newInstance().addDimension(0, 1).build())
             .addPickup(Location.newInstance(5, 0), SizeDimension.Builder.newInstance().addDimension(0, 2).build())
             .addPickup(Location.newInstance(20, 0), SizeDimension.Builder.newInstance().addDimension(0, 1).build())
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/CustomPickupJob.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/CustomJob.java
similarity index 79%
rename from jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/CustomPickupJob.java
rename to jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/CustomJob.java
index 54d6ca5bf..c6de92c7e 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/CustomPickupJob.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/CustomJob.java
@@ -34,9 +34,9 @@
 /**
  * Created by schroeder on 16/11/16.
  */
-public class CustomPickupJob extends AbstractJob {
+public class CustomJob extends AbstractJob {
 
-    public static abstract class BuilderBase<T extends CustomPickupJob, B extends CustomPickupJob.BuilderBase<T, B>>
+    public static abstract class BuilderBase<T extends CustomJob, B extends CustomJob.BuilderBase<T, B>>
         extends JobBuilder<T, B> {
 
         List<Location> locs = new ArrayList<>();
@@ -49,14 +49,14 @@ public BuilderBase(String id) {
             super(id);
         }
 
-        public CustomPickupJob.BuilderBase<T, B> addPickup(Location location, SizeDimension capacity) {
+        public CustomJob.BuilderBase<T, B> addPickup(Location location, SizeDimension capacity) {
             locs.add(location);
             cap.add(capacity);
             types.add("pickup");
             return this;
         }
 
-        public CustomPickupJob.BuilderBase<T, B> addDelivery(Location location, SizeDimension capacity) {
+        public CustomJob.BuilderBase<T, B> addDelivery(Location location, SizeDimension capacity) {
             locs.add(location);
             cap.add(capacity);
             types.add("delivery");
@@ -80,10 +80,10 @@ protected void validate() {
         }
     }
 
-    public static final class Builder extends CustomPickupJob.BuilderBase<CustomPickupJob, CustomPickupJob.Builder> {
+    public static final class Builder extends CustomJob.BuilderBase<CustomJob, CustomJob.Builder> {
 
-        public static CustomPickupJob.Builder newInstance(String id) {
-            return new CustomPickupJob.Builder(id);
+        public static CustomJob.Builder newInstance(String id) {
+            return new CustomJob.Builder(id);
         }
 
         public Builder(String id) {
@@ -91,8 +91,8 @@ public Builder(String id) {
         }
 
         @Override
-        protected CustomPickupJob createInstance() {
-            return new CustomPickupJob(this);
+        protected CustomJob createInstance() {
+            return new CustomJob(this);
         }
 
     }
@@ -103,7 +103,7 @@ protected CustomPickupJob createInstance() {
      * @param builder The builder instance.
      * @see JobBuilder
      */
-    protected CustomPickupJob(JobBuilder<?, ?> builder) {
+    protected CustomJob(JobBuilder<?, ?> builder) {
         super(builder);
 
     }
@@ -115,7 +115,7 @@ public SizeDimension getSize() {
 
     @Override
     protected void createActivities(JobBuilder<? extends AbstractJob, ?> jobBuilder) {
-        CustomPickupJob.Builder builder = (CustomPickupJob.Builder) jobBuilder;
+        CustomJob.Builder builder = (CustomJob.Builder) jobBuilder;
         JobActivityList list = new SequentialJobActivityList(this);
         for (int i = 0; i < builder.getLocs().size(); i++) {
             if (builder.getTypes().get(i).equals("pickup")) {
