diff --git a/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/AlgorithmEventsRecorder.java b/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/AlgorithmEventsRecorder.java
index 441026240..4708c6cfa 100644
--- a/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/AlgorithmEventsRecorder.java
+++ b/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/AlgorithmEventsRecorder.java
@@ -25,7 +25,7 @@
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.InsertionEndsListener;
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.InsertionStartsListener;
 import com.graphhopper.jsprit.core.algorithm.ruin.listener.RuinListener;
-import com.graphhopper.jsprit.core.problem.AbstractActivity;
+import com.graphhopper.jsprit.core.problem.IndexedActivity;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Delivery;
 import com.graphhopper.jsprit.core.problem.job.Job;
@@ -33,6 +33,7 @@
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
@@ -141,8 +142,8 @@ private void addRoutes(Collection<VehicleRoute> routes) {
 
     private String getNodeId(TourActivity act) {
         String nodeId = null;
-        if (act instanceof TourActivity.JobActivity) {
-            Job job = ((TourActivity.JobActivity) act).getJob();
+        if (act instanceof JobActivity) {
+            Job job = ((JobActivity) act).getJob();
             if (job instanceof Service) {
                 nodeId = job.getId();
             } else if (job instanceof Shipment) {
@@ -415,7 +416,7 @@ private void insertShipment(Job job, InsertionData data, VehicleRoute route) {
         String toNodeId = getToNodeId((Shipment) job);
         insertNode(toNodeId, data.getDeliveryInsertionIndex(), data, route);
 
-        List<AbstractActivity> del = vrp.getActivities(job);
+        List<IndexedActivity> del = vrp.getActivities(job);
         VehicleRoute copied = VehicleRoute.copyOf(route);
         copied.getTourActivities().addActivity(data.getDeliveryInsertionIndex(), del.get(1));
 
@@ -434,7 +435,7 @@ private void insertNode(String nodeId, int insertionIndex, InsertionData data, V
         if (isFirst(insertionIndex)) {
             node_i = makeStartId(data.getSelectedVehicle());
         } else {
-            TourActivity.JobActivity jobActivity = (TourActivity.JobActivity) route.getActivities().get(insertionIndex - 1);
+            JobActivity jobActivity = (JobActivity) route.getActivities().get(insertionIndex - 1);
             node_i = getNodeId(jobActivity);
         }
         String edgeId_1 = node_i + "_" + nodeId;
@@ -442,7 +443,7 @@ private void insertNode(String nodeId, int insertionIndex, InsertionData data, V
         if (isLast(insertionIndex, route)) {
             node_j = makeEndId(data.getSelectedVehicle());
         } else {
-            TourActivity.JobActivity jobActivity = (TourActivity.JobActivity) route.getActivities().get(insertionIndex);
+            JobActivity jobActivity = (JobActivity) route.getActivities().get(insertionIndex);
             node_j = getNodeId(jobActivity);
         }
         String edgeId_2 = nodeId + "_" + node_j;
@@ -466,9 +467,9 @@ private void handleVehicleSwitch(InsertionData data, VehicleRoute route) {
         }
         if (vehicleSwitch && !route.getActivities().isEmpty()) {
             String oldStart = makeStartId(route.getVehicle());
-            String firstAct = ((TourActivity.JobActivity) route.getActivities().get(0)).getJob().getId();
+            String firstAct = ((JobActivity) route.getActivities().get(0)).getJob().getId();
             String oldEnd = makeEndId(route.getVehicle());
-            String lastAct = ((TourActivity.JobActivity) route.getActivities().get(route.getActivities().size() - 1)).getJob().getId();
+            String lastAct = ((JobActivity) route.getActivities().get(route.getActivities().size() - 1)).getJob().getId();
             removeEdge(oldStart + "_" + firstAct);
 
             if (route.getVehicle().isReturnToDepot()) {
diff --git a/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/GraphStreamViewer.java b/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/GraphStreamViewer.java
index e04097f3c..fd4b3114e 100644
--- a/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/GraphStreamViewer.java
+++ b/jsprit-analysis/src/main/java/com/graphhopper/jsprit/analysis/toolbox/GraphStreamViewer.java
@@ -25,9 +25,9 @@
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity.JobActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.util.Time;
 import org.graphstream.graph.Edge;
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/VehicleRoutingAlgorithm.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/VehicleRoutingAlgorithm.java
index 7bdeae780..a6fa3a901 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/VehicleRoutingAlgorithm.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/VehicleRoutingAlgorithm.java
@@ -28,6 +28,7 @@
 import com.graphhopper.jsprit.core.problem.solution.SolutionCostCalculator;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.util.Solutions;
 import org.slf4j.Logger;
@@ -253,8 +254,8 @@ private void log(VehicleRoutingProblemSolution solution) {
             StringBuilder b = new StringBuilder();
             b.append(r.getVehicle().getId()).append(" : ").append("[ ");
             for (TourActivity act : r.getActivities()) {
-                if (act instanceof TourActivity.JobActivity) {
-                    b.append(((TourActivity.JobActivity) act).getJob().getId()).append(" ");
+                if (act instanceof JobActivity) {
+                    b.append(((JobActivity) act).getJob().getId()).append(" ");
                 }
             }
             b.append("]");
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/Inserter.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/Inserter.java
index 0a50d6301..511856c00 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/Inserter.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/Inserter.java
@@ -19,7 +19,7 @@
 
 import com.graphhopper.jsprit.core.algorithm.recreate.InsertionData.NoInsertionFound;
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.InsertionListeners;
-import com.graphhopper.jsprit.core.problem.AbstractActivity;
+import com.graphhopper.jsprit.core.problem.IndexedActivity;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.job.Service;
@@ -104,7 +104,7 @@ public ShipmentInsertionHandler(VehicleRoutingProblem vehicleRoutingProblem) {
         @Override
         public void handleJobInsertion(Job job, InsertionData iData, VehicleRoute route) {
             if (job instanceof Shipment) {
-                List<AbstractActivity> acts = vehicleRoutingProblem.copyAndGetActivities(job);
+                List<IndexedActivity> acts = vehicleRoutingProblem.copyAndGetActivities(job);
                 TourActivity pickupShipment = acts.get(0);
                 TourActivity deliverShipment = acts.get(1);
                 route.setVehicleAndDepartureTime(iData.getSelectedVehicle(), iData.getVehicleDepartureTime());
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/JobInsertionCostsCalculatorBuilder.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/JobInsertionCostsCalculatorBuilder.java
index 01284d80b..36b13567d 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/JobInsertionCostsCalculatorBuilder.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/JobInsertionCostsCalculatorBuilder.java
@@ -19,7 +19,7 @@
 
 import com.graphhopper.jsprit.core.algorithm.listener.VehicleRoutingAlgorithmListeners.PrioritizedVRAListener;
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.InsertionListener;
-import com.graphhopper.jsprit.core.problem.AbstractActivity;
+import com.graphhopper.jsprit.core.problem.IndexedActivity;
 import com.graphhopper.jsprit.core.problem.JobActivityFactory;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.constraint.ConstraintManager;
@@ -282,7 +282,7 @@ public double getCosts(JobInsertionContext iContext, TourActivity prevAct, TourA
         JobActivityFactory activityFactory = new JobActivityFactory() {
 
             @Override
-            public List<AbstractActivity> createActivities(Job job) {
+            public List<IndexedActivity> createActivities(Job job) {
                 return vrp.copyAndGetActivities(job);
             }
 
@@ -344,7 +344,7 @@ public double getCosts(JobInsertionContext iContext, TourActivity prevAct, TourA
         jobInsertionCalculator.setStates(activityStates2);
         jobInsertionCalculator.setJobActivityFactory(new JobActivityFactory() {
             @Override
-            public List<AbstractActivity> createActivities(Job job) {
+            public List<IndexedActivity> createActivities(Job job) {
                 return vrp.copyAndGetActivities(job);
             }
         });
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/DBSCANClusterer.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/DBSCANClusterer.java
index d73bf10a8..928f450f5 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/DBSCANClusterer.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/DBSCANClusterer.java
@@ -22,6 +22,7 @@
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingTransportCosts;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.util.RandomNumberGeneration;
 import com.graphhopper.jsprit.core.util.RandomUtils;
@@ -151,8 +152,8 @@ public void setEpsDistance(double epsDistance) {
         List<LocationWrapper> locations = new ArrayList<LocationWrapper>(route.getTourActivities().getJobs().size());
         Map<Job, List<Location>> jobs2locations = new HashMap<Job, List<Location>>();
         for (TourActivity act : route.getActivities()) {
-            if (act instanceof TourActivity.JobActivity) {
-                Job job = ((TourActivity.JobActivity) act).getJob();
+            if (act instanceof JobActivity) {
+                Job job = ((JobActivity) act).getJob();
                 if (!jobs2locations.containsKey(job)) {
                     jobs2locations.put(job, new ArrayList<Location>());
                 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinClusters.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinClusters.java
index 4e00ac677..6fecc0bd6 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinClusters.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinClusters.java
@@ -22,6 +22,7 @@
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.util.RandomUtils;
 import org.apache.commons.math3.ml.clustering.Clusterable;
@@ -48,9 +49,9 @@ public void informIterationStarts(int i, VehicleRoutingProblem problem, Collecti
 
     public static class JobActivityWrapper implements Clusterable {
 
-        private TourActivity.JobActivity jobActivity;
+        private JobActivity jobActivity;
 
-        public JobActivityWrapper(TourActivity.JobActivity jobActivity) {
+        public JobActivityWrapper(JobActivity jobActivity) {
             this.jobActivity = jobActivity;
         }
 
@@ -59,7 +60,7 @@ public JobActivityWrapper(TourActivity.JobActivity jobActivity) {
             return new double[]{jobActivity.getLocation().getCoordinate().getX(), jobActivity.getLocation().getCoordinate().getY()};
         }
 
-        public TourActivity.JobActivity getActivity() {
+        public JobActivity getActivity() {
             return jobActivity;
         }
     }
@@ -160,7 +161,7 @@ private void ruin(Collection<VehicleRoute> vehicleRoutes, int nOfJobs2BeRemoved,
     private List<JobActivityWrapper> wrap(List<TourActivity> activities) {
         List<JobActivityWrapper> wl = new ArrayList<JobActivityWrapper>();
         for (TourActivity act : activities) {
-            wl.add(new JobActivityWrapper((TourActivity.JobActivity) act));
+            wl.add(new JobActivityWrapper((JobActivity) act));
         }
         return wl;
     }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinWorst.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinWorst.java
index 620d1feda..a3c5d9282 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinWorst.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/ruin/RuinWorst.java
@@ -21,6 +21,7 @@
 import com.graphhopper.jsprit.core.problem.driver.DriverImpl;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.util.NoiseMaker;
@@ -109,7 +110,7 @@ private Job getWorst(Collection<VehicleRoute> copied) {
                     continue;
                 }
                 double savings = savings(route, actBefore, actToEval, act);
-                Job job = ((TourActivity.JobActivity) actToEval).getJob();
+                Job job = ((JobActivity) actToEval).getJob();
                 if (!savingsMap.containsKey(job)) {
                     savingsMap.put(job, savings);
                 } else {
@@ -120,7 +121,7 @@ private Job getWorst(Collection<VehicleRoute> copied) {
                 actToEval = act;
             }
             double savings = savings(route, actBefore, actToEval, route.getEnd());
-            Job job = ((TourActivity.JobActivity) actToEval).getJob();
+            Job job = ((JobActivity) actToEval).getJob();
             if (!savingsMap.containsKey(job)) {
                 savingsMap.put(job, savings);
             } else {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateSkills.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateSkills.java
index 70d7c8fae..f1c7a1742 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateSkills.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateSkills.java
@@ -21,6 +21,7 @@
 import com.graphhopper.jsprit.core.problem.Skills;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.ActivityVisitor;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 
 /**
@@ -46,8 +47,8 @@ public void begin(VehicleRoute route) {
 
     @Override
     public void visit(TourActivity activity) {
-        if (activity instanceof TourActivity.JobActivity) {
-            Skills skills = ((TourActivity.JobActivity) activity).getJob().getRequiredSkills();
+        if (activity instanceof JobActivity) {
+            Skills skills = ((JobActivity) activity).getJob().getRequiredSkills();
             skillBuilder.addAllSkills(skills.values());
         }
     }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyser.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyser.java
index e6cedd77b..66709f36c 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyser.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyser.java
@@ -420,8 +420,8 @@ public void begin(VehicleRoute route) {
         @Override
         public void visit(TourActivity activity) {
             boolean violatedAtActivity = false;
-            if (activity instanceof TourActivity.JobActivity) {
-                Set<String> requiredForActivity = ((TourActivity.JobActivity) activity).getJob().getRequiredSkills().values();
+            if (activity instanceof JobActivity) {
+                Set<String> requiredForActivity = ((JobActivity) activity).getJob().getRequiredSkills().values();
                 for (String skill : requiredForActivity) {
                     if (!route.getVehicle().getSkills().containsSkill(skill)) {
                         violatedAtActivity = true;
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/Capacity.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/Capacity.java
index 0017d21ab..021f950f1 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/Capacity.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/Capacity.java
@@ -39,7 +39,9 @@
      * @throws NullPointerException if one of the args is null
      */
     public static Capacity addup(Capacity cap1, Capacity cap2) {
-        if (cap1 == null || cap2 == null) throw new NullPointerException("arguments must not be null");
+        if (cap1 == null || cap2 == null) {
+            throw new NullPointerException("arguments must not be null");
+        }
         Capacity.Builder capacityBuilder = Capacity.Builder.newInstance();
         for (int i = 0; i < Math.max(cap1.getNuOfDimensions(), cap2.getNuOfDimensions()); i++) {
             capacityBuilder.addDimension(i, cap1.get(i) + cap2.get(i));
@@ -57,7 +59,9 @@ public static Capacity addup(Capacity cap1, Capacity cap2) {
      * @throws IllegalStateException if number of capacityDimensions of cap1 and cap2 are different (i.e. <code>cap1.getNuOfDimension() != cap2.getNuOfDimension()</code>).
      */
     public static Capacity subtract(Capacity cap, Capacity cap2subtract) {
-        if (cap == null || cap2subtract == null) throw new NullPointerException("arguments must not be null");
+        if (cap == null || cap2subtract == null) {
+            throw new NullPointerException("arguments must not be null");
+        }
         Capacity.Builder capacityBuilder = Capacity.Builder.newInstance();
         for (int i = 0; i < Math.max(cap.getNuOfDimensions(), cap2subtract.getNuOfDimensions()); i++) {
             int dimValue = cap.get(i) - cap2subtract.get(i);
@@ -74,7 +78,9 @@ public static Capacity subtract(Capacity cap, Capacity cap2subtract) {
      * @throws NullPointerException if one of the args is null
      */
     public static Capacity invert(Capacity cap2invert) {
-        if (cap2invert == null) throw new NullPointerException("arguments must not be null");
+        if (cap2invert == null) {
+            throw new NullPointerException("arguments must not be null");
+        }
         Capacity.Builder capacityBuilder = Capacity.Builder.newInstance();
         for (int i = 0; i < cap2invert.getNuOfDimensions(); i++) {
             int dimValue = cap2invert.get(i) * -1;
@@ -108,7 +114,9 @@ public static double divide(Capacity numerator, Capacity denominator) {
                 sumQuotients += (double) numerator.get(index) / (double) denominator.get(index);
             }
         }
-        if (nuOfDimensions > 0) return sumQuotients / (double) nuOfDimensions;
+        if (nuOfDimensions > 0) {
+            return sumQuotients / nuOfDimensions;
+        }
         return 0.0;
     }
 
@@ -119,7 +127,9 @@ public static double divide(Capacity numerator, Capacity denominator) {
      * @return copy
      */
     public static Capacity copyOf(Capacity capacity) {
-        if (capacity == null) return null;
+        if (capacity == null) {
+            return null;
+        }
         return new Capacity(capacity);
     }
 
@@ -165,7 +175,7 @@ public Builder addDimension(int index, int dimValue) {
                 int[] newDimensions = new int[requiredSize];
                 copy(dimensions, newDimensions);
                 newDimensions[index] = dimValue;
-                this.dimensions = newDimensions;
+                dimensions = newDimensions;
             }
             return this;
         }
@@ -196,9 +206,9 @@ public Capacity build() {
      * @param capacity capacity to be copied
      */
     Capacity(Capacity capacity) {
-        this.dimensions = new int[capacity.getNuOfDimensions()];
+        dimensions = new int[capacity.getNuOfDimensions()];
         for (int i = 0; i < capacity.getNuOfDimensions(); i++) {
-            this.dimensions[i] = capacity.get(i);
+            dimensions[i] = capacity.get(i);
         }
     }
 
@@ -206,6 +216,11 @@ public Capacity build() {
         dimensions = builder.dimensions;
     }
 
+    private Capacity(int numberOfDimensions) {
+        dimensions = new int[numberOfDimensions];
+        Arrays.fill(dimensions, 0); // Just to be safe, not needed
+    }
+
     /**
      * Returns the number of specified capacity dimensions.
      *
@@ -225,7 +240,9 @@ public int getNuOfDimensions() {
      * @return the according dimension value
      */
     public int get(int index) {
-        if (index < dimensions.length) return dimensions[index];
+        if (index < dimensions.length) {
+            return dimensions[index];
+        }
         return 0;
     }
 
@@ -237,9 +254,13 @@ public int get(int index) {
      * @throws NullPointerException if one of the args is null
      */
     public boolean isLessOrEqual(Capacity toCompare) {
-        if (toCompare == null) throw new NullPointerException();
-        for (int i = 0; i < this.getNuOfDimensions(); i++) {
-            if (this.get(i) > toCompare.get(i)) return false;
+        if (toCompare == null) {
+            throw new NullPointerException();
+        }
+        for (int i = 0; i < getNuOfDimensions(); i++) {
+            if (get(i) > toCompare.get(i)) {
+                return false;
+            }
         }
         return true;
     }
@@ -252,9 +273,13 @@ public boolean isLessOrEqual(Capacity toCompare) {
      * @throws NullPointerException if one of the args is null
      */
     public boolean isGreaterOrEqual(Capacity toCompare) {
-        if (toCompare == null) throw new NullPointerException();
-        for (int i = 0; i < Math.max(this.getNuOfDimensions(), toCompare.getNuOfDimensions()); i++) {
-            if (this.get(i) < toCompare.get(i)) return false;
+        if (toCompare == null) {
+            throw new NullPointerException();
+        }
+        for (int i = 0; i < Math.max(getNuOfDimensions(), toCompare.getNuOfDimensions()); i++) {
+            if (get(i) < toCompare.get(i)) {
+                return false;
+            }
         }
         return true;
     }
@@ -276,7 +301,9 @@ public String toString() {
      * @return capacity maximum of each capacity dimension
      */
     public static Capacity max(Capacity cap1, Capacity cap2) {
-        if (cap1 == null || cap2 == null) throw new IllegalArgumentException("arg must not be null");
+        if (cap1 == null || cap2 == null) {
+            throw new IllegalArgumentException("arg must not be null");
+        }
         Capacity.Builder toReturnBuilder = Capacity.Builder.newInstance();
         for (int i = 0; i < Math.max(cap1.getNuOfDimensions(), cap2.getNuOfDimensions()); i++) {
             toReturnBuilder.addDimension(i, Math.max(cap1.get(i), cap2.get(i)));
@@ -285,7 +312,9 @@ public static Capacity max(Capacity cap1, Capacity cap2) {
     }
 
     public static Capacity min(Capacity cap1, Capacity cap2) {
-        if (cap1 == null || cap2 == null) throw new IllegalArgumentException("arg must not be null");
+        if (cap1 == null || cap2 == null) {
+            throw new IllegalArgumentException("arg must not be null");
+        }
         Capacity.Builder toReturnBuilder = Capacity.Builder.newInstance();
         for (int i = 0; i < Math.max(cap1.getNuOfDimensions(), cap2.getNuOfDimensions()); i++) {
             toReturnBuilder.addDimension(i, Math.min(cap1.get(i), cap2.get(i)));
@@ -295,12 +324,18 @@ public static Capacity min(Capacity cap1, Capacity cap2) {
 
     @Override
     public boolean equals(Object o) {
-        if (this == o) return true;
-        if (!(o instanceof Capacity)) return false;
+        if (this == o) {
+            return true;
+        }
+        if (!(o instanceof Capacity)) {
+            return false;
+        }
 
         Capacity capacity = (Capacity) o;
 
-        if (!Arrays.equals(dimensions, capacity.dimensions)) return false;
+        if (!Arrays.equals(dimensions, capacity.dimensions)) {
+            return false;
+        }
 
         return true;
     }
@@ -309,4 +344,14 @@ public boolean equals(Object o) {
     public int hashCode() {
         return Arrays.hashCode(dimensions);
     }
+
+
+    public static Capacity createNullCapacity(Capacity capacity) {
+        return capacity == null ? null : new Capacity(capacity.getNuOfDimensions());
+    }
+
+    public static Capacity createNullCapacity(int numberOfDimensions) {
+        return new Capacity(numberOfDimensions);
+    }
+
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/AbstractActivity.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/IndexedActivity.java
similarity index 94%
rename from jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/AbstractActivity.java
rename to jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/IndexedActivity.java
index dd1470ec6..1ef31dec1 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/AbstractActivity.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/IndexedActivity.java
@@ -23,7 +23,7 @@
 /**
  * Created by schroeder on 14.07.14.
  */
-public abstract class AbstractActivity implements TourActivity {
+public abstract class IndexedActivity implements TourActivity {
 
     private int index;
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/JobActivityFactory.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/JobActivityFactory.java
index 8ee69533d..763e4a7c5 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/JobActivityFactory.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/JobActivityFactory.java
@@ -18,15 +18,15 @@
 
 package com.graphhopper.jsprit.core.problem;
 
-import com.graphhopper.jsprit.core.problem.job.Job;
-
 import java.util.List;
 
+import com.graphhopper.jsprit.core.problem.job.Job;
+
 /**
  * JobActivityFactory that creates the activities to the specified job.
  */
 public interface JobActivityFactory {
 
-    public List<AbstractActivity> createActivities(Job job);
+    public List<IndexedActivity> createActivities(Job job);
 
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblem.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblem.java
index e93c9e61f..5c2cc5196 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblem.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblem.java
@@ -28,6 +28,7 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.BreakActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.DefaultShipmentActivityFactory;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.DefaultTourActivityFactory;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
@@ -100,8 +101,8 @@ public static Builder newInstance() {
         private JobActivityFactory jobActivityFactory = new JobActivityFactory() {
 
             @Override
-            public List<AbstractActivity> createActivities(Job job) {
-                List<AbstractActivity> acts = new ArrayList<AbstractActivity>();
+            public List<IndexedActivity> createActivities(Job job) {
+                List<IndexedActivity> acts = new ArrayList<IndexedActivity>();
                 if( job instanceof Break){
                     acts.add(BreakActivity.newInstance((Break) job));
                 }
@@ -126,7 +127,7 @@ else if (job instanceof Service) {
 
         private Map<VehicleTypeKey, Integer> typeKeyIndices = new HashMap<VehicleTypeKey, Integer>();
 
-        private Map<Job, List<AbstractActivity>> activityMap = new HashMap<Job, List<AbstractActivity>>();
+        private Map<Job, List<IndexedActivity>> activityMap = new HashMap<Job, List<IndexedActivity>>();
 
         private final DefaultShipmentActivityFactory shipmentActivityFactory = new DefaultShipmentActivityFactory();
 
@@ -271,8 +272,8 @@ private void addJobToFinalJobMapAndCreateActivities(Job job) {
                 Shipment shipment = (Shipment) job;
                 addShipment(shipment);
             }
-            List<AbstractActivity> jobActs = jobActivityFactory.createActivities(job);
-            for (AbstractActivity act : jobActs) {
+            List<IndexedActivity> jobActs = jobActivityFactory.createActivities(job);
+            for (IndexedActivity act : jobActs) {
                 act.setIndex(activityIndexCounter);
                 incActivityIndexCounter();
             }
@@ -284,9 +285,9 @@ private boolean addBreaksToActivityMap() {
             for (Vehicle v : uniqueVehicles) {
                 if (v.getBreak() != null) {
                     hasBreaks = true;
-                    List<AbstractActivity> breakActivities = jobActivityFactory.createActivities(v.getBreak());
+                    List<IndexedActivity> breakActivities = jobActivityFactory.createActivities(v.getBreak());
                     if(breakActivities.isEmpty()) throw new IllegalArgumentException("at least one activity for break needs to be created by activityFactory");
-                    for(AbstractActivity act : breakActivities){
+                    for(IndexedActivity act : breakActivities){
                         act.setIndex(activityIndexCounter);
                         incActivityIndexCounter();
                     }
@@ -308,11 +309,11 @@ public Builder addInitialVehicleRoute(VehicleRoute route) {
                 addedVehicleIds.add(route.getVehicle().getId());
             }
             for (TourActivity act : route.getActivities()) {
-                AbstractActivity abstractAct = (AbstractActivity) act;
+                IndexedActivity abstractAct = (IndexedActivity) act;
                 abstractAct.setIndex(activityIndexCounter);
                 incActivityIndexCounter();
-                if (act instanceof TourActivity.JobActivity) {
-                    Job job = ((TourActivity.JobActivity) act).getJob();
+                if (act instanceof JobActivity) {
+                    Job job = ((JobActivity) act).getJob();
                     jobsInInitialRoutes.add(job.getId());
                     addLocationToTentativeLocations(job);
                     registerJobAndActivity(abstractAct, job);
@@ -324,10 +325,10 @@ public Builder addInitialVehicleRoute(VehicleRoute route) {
 
 
 
-        private void registerJobAndActivity(AbstractActivity abstractAct, Job job) {
+        private void registerJobAndActivity(IndexedActivity abstractAct, Job job) {
             if (activityMap.containsKey(job)) activityMap.get(job).add(abstractAct);
             else {
-                List<AbstractActivity> actList = new ArrayList<AbstractActivity>();
+                List<IndexedActivity> actList = new ArrayList<IndexedActivity>();
                 actList.add(abstractAct);
                 activityMap.put(job, actList);
             }
@@ -570,14 +571,14 @@ private Builder addService(Service service) {
 
     private final Locations locations;
 
-    private Map<Job, List<AbstractActivity>> activityMap;
+    private Map<Job, List<IndexedActivity>> activityMap;
 
     private int nuActivities;
 
     private final JobActivityFactory jobActivityFactory = new JobActivityFactory() {
 
         @Override
-        public List<AbstractActivity> createActivities(Job job) {
+        public List<IndexedActivity> createActivities(Job job) {
             return copyAndGetActivities(job);
         }
 
@@ -687,7 +688,7 @@ public VehicleRoutingActivityCosts getActivityCosts() {
      * @param job for which the corresponding activities needs to be returned
      * @return associated activities
      */
-    public List<AbstractActivity> getActivities(Job job) {
+    public List<IndexedActivity> getActivities(Job job) {
         return Collections.unmodifiableList(activityMap.get(job));
     }
 
@@ -711,10 +712,10 @@ public JobActivityFactory getJobActivityFactory() {
      * @param job for which the corresponding activities needs to be returned
      * @return a copy of the activities that are associated to the specified job
      */
-    public List<AbstractActivity> copyAndGetActivities(Job job) {
-        List<AbstractActivity> acts = new ArrayList<AbstractActivity>();
+    public List<IndexedActivity> copyAndGetActivities(Job job) {
+        List<IndexedActivity> acts = new ArrayList<IndexedActivity>();
         if (activityMap.containsKey(job)) {
-            for (AbstractActivity act : activityMap.get(job)) acts.add((AbstractActivity) act.duplicate());
+            for (IndexedActivity act : activityMap.get(job)) acts.add((IndexedActivity) act.duplicate());
         }
         return acts;
     }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRoute.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRoute.java
index c04d1ee11..ed720e406 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRoute.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRoute.java
@@ -17,7 +17,7 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route;
 
-import com.graphhopper.jsprit.core.problem.AbstractActivity;
+import com.graphhopper.jsprit.core.problem.IndexedActivity;
 import com.graphhopper.jsprit.core.problem.JobActivityFactory;
 import com.graphhopper.jsprit.core.problem.driver.Driver;
 import com.graphhopper.jsprit.core.problem.driver.DriverImpl;
@@ -125,8 +125,8 @@ public static Builder newInstance(Vehicle vehicle) {
         private JobActivityFactory jobActivityFactory = new JobActivityFactory() {
 
             @Override
-            public List<AbstractActivity> createActivities(Job job) {
-                List<AbstractActivity> acts = new ArrayList<AbstractActivity>();
+            public List<IndexedActivity> createActivities(Job job) {
+                List<IndexedActivity> acts = new ArrayList<IndexedActivity>();
                 if (job instanceof Break) {
                     acts.add(BreakActivity.newInstance((Break) job));
                 } else if (job instanceof Service) {
@@ -188,7 +188,7 @@ public Builder addService(Service service) {
 
         public Builder addService(Service service, TimeWindow timeWindow) {
             if (service == null) throw new IllegalArgumentException("service must not be null");
-            List<AbstractActivity> acts = jobActivityFactory.createActivities(service);
+            List<IndexedActivity> acts = jobActivityFactory.createActivities(service);
             TourActivity act = acts.get(0);
             act.setTheoreticalEarliestOperationStartTime(timeWindow.getStart());
             act.setTheoreticalLatestOperationStartTime(timeWindow.getEnd());
@@ -252,7 +252,7 @@ public Builder addPickup(Shipment shipment) {
         public Builder addPickup(Shipment shipment, TimeWindow pickupTimeWindow) {
             if (openShipments.contains(shipment))
                 throw new IllegalArgumentException("shipment has already been added. cannot add it twice.");
-            List<AbstractActivity> acts = jobActivityFactory.createActivities(shipment);
+            List<IndexedActivity> acts = jobActivityFactory.createActivities(shipment);
             TourActivity act = acts.get(0);
             act.setTheoreticalEarliestOperationStartTime(pickupTimeWindow.getStart());
             act.setTheoreticalLatestOperationStartTime(pickupTimeWindow.getEnd());
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivity.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivity.java
index cb37c9fc8..593fc19bb 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivity.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivity.java
@@ -17,82 +17,31 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import com.graphhopper.jsprit.core.problem.AbstractActivity;
 import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.job.Break;
-import com.graphhopper.jsprit.core.problem.job.Service;
 
-public class BreakActivity extends AbstractActivity implements TourActivity.JobActivity {
+public class BreakActivity extends InternalJobActivity {
 
-    public static int counter = 0;
+// REMARK - Balage1551 - What is it is used for?
+//    public static int counter = 0;
 
-    public double arrTime;
-
-    public double endTime;
-
-    private Location location;
-
-    private double duration;
-
-    /**
-     * @return the arrTime
-     */
-    public double getArrTime() {
-        return arrTime;
-    }
-
-    /**
-     * @param arrTime the arrTime to set
-     */
-    public void setArrTime(double arrTime) {
-        this.arrTime = arrTime;
-    }
-
-    /**
-     * @return the endTime
-     */
-    public double getEndTime() {
-        return endTime;
-    }
-
-    /**
-     * @param endTime the endTime to set
-     */
-    public void setEndTime(double endTime) {
-        this.endTime = endTime;
-    }
-
-    public static BreakActivity copyOf(BreakActivity breakActivity) {
-        return new BreakActivity(breakActivity);
-    }
+// REMARK - Balage1551 - Never used and there is a duplicate implemented in JobActivity, so that could be used.
+//    public static BreakActivity copyOf(BreakActivity breakActivity) {
+//        return new BreakActivity(breakActivity);
+//    }
 
     public static BreakActivity newInstance(Break aBreak) {
         return new BreakActivity(aBreak);
     }
 
-    private final Break aBreak;
-
-    private double earliest = 0;
-
-    private double latest = Double.MAX_VALUE;
-
     protected BreakActivity(Break aBreak) {
-        counter++;
-        this.aBreak = aBreak;
-        this.duration = aBreak.getServiceDuration();
+        super(aBreak, "Break", aBreak.getLocation(), aBreak.getServiceDuration(), Capacity.createNullCapacity(aBreak.getSize()));
+//        counter++;
     }
 
     protected BreakActivity(BreakActivity breakActivity) {
-        counter++;
-        this.aBreak = (Break) breakActivity.getJob();
-        this.arrTime = breakActivity.getArrTime();
-        this.endTime = breakActivity.getEndTime();
-        this.location = breakActivity.getLocation();
-        setIndex(breakActivity.getIndex());
-        this.earliest = breakActivity.getTheoreticalEarliestOperationStartTime();
-        this.latest = breakActivity.getTheoreticalLatestOperationStartTime();
-        this.duration = breakActivity.getOperationTime();
+        super(breakActivity);
     }
 
 
@@ -103,7 +52,7 @@ protected BreakActivity(BreakActivity breakActivity) {
     public int hashCode() {
         final int prime = 31;
         int result = 1;
-        result = prime * result + ((aBreak == null) ? 0 : aBreak.hashCode());
+        result = prime * result + ((getJob() == null) ? 0 : getJob().hashCode());
         return result;
     }
 
@@ -112,85 +61,29 @@ public int hashCode() {
      */
     @Override
     public boolean equals(Object obj) {
-        if (this == obj)
+        if (this == obj) {
             return true;
-        if (obj == null)
+        }
+        if (obj == null) {
             return false;
-        if (getClass() != obj.getClass())
+        }
+        if (getClass() != obj.getClass()) {
             return false;
+        }
         BreakActivity other = (BreakActivity) obj;
-        if (aBreak == null) {
-            if (other.aBreak != null)
+        if (getJob() == null) {
+            if (other.getJob() != null) {
                 return false;
-        } else if (!aBreak.equals(other.aBreak))
+            }
+        } else if (!getJob().equals(other.getJob())) {
             return false;
+        }
         return true;
     }
 
-    public double getTheoreticalEarliestOperationStartTime() {
-        return earliest;
-    }
-
-    public double getTheoreticalLatestOperationStartTime() {
-        return latest;
-    }
-
-    @Override
-    public double getOperationTime() {
-        return duration;
-    }
-
-    public void setOperationTime(double duration){
-        this.duration = duration;
-    }
-
-    @Override
-    public Location getLocation() {
-        return location;
-    }
 
     public void setLocation(Location breakLocation) {
-        this.location = breakLocation;
-    }
-
-    @Override
-    public Service getJob() {
-        return aBreak;
-    }
-
-
-    @Override
-    public String toString() {
-        return "[type=" + getName() + "][location=" + getLocation()
-            + "][size=" + getSize().toString()
-            + "][twStart=" + Activities.round(getTheoreticalEarliestOperationStartTime())
-            + "][twEnd=" + Activities.round(getTheoreticalLatestOperationStartTime()) + "]";
-    }
-
-    @Override
-    public void setTheoreticalEarliestOperationStartTime(double earliest) {
-        this.earliest = earliest;
+        location = breakLocation;
     }
 
-    @Override
-    public void setTheoreticalLatestOperationStartTime(double latest) {
-        this.latest = latest;
-    }
-
-    @Override
-    public String getName() {
-        return aBreak.getType();
-    }
-
-    @Override
-    public TourActivity duplicate() {
-        return new BreakActivity(this);
-    }
-
-    @Override
-    public Capacity getSize() {
-        return aBreak.getSize();
-    }
-
-
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DefaultShipmentActivityFactory.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DefaultShipmentActivityFactory.java
index ce0b24f7a..a620dc8de 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DefaultShipmentActivityFactory.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DefaultShipmentActivityFactory.java
@@ -17,18 +17,18 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import com.graphhopper.jsprit.core.problem.AbstractActivity;
+import com.graphhopper.jsprit.core.problem.IndexedActivity;
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 
 public class DefaultShipmentActivityFactory implements TourShipmentActivityFactory {
 
     @Override
-    public AbstractActivity createPickup(Shipment shipment) {
+    public IndexedActivity createPickup(Shipment shipment) {
         return new PickupShipment(shipment);
     }
 
     @Override
-    public AbstractActivity createDelivery(Shipment shipment) {
+    public IndexedActivity createDelivery(Shipment shipment) {
         return new DeliverShipment(shipment);
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DefaultTourActivityFactory.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DefaultTourActivityFactory.java
index 0f1047dcc..5033c2f9e 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DefaultTourActivityFactory.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DefaultTourActivityFactory.java
@@ -17,7 +17,7 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import com.graphhopper.jsprit.core.problem.AbstractActivity;
+import com.graphhopper.jsprit.core.problem.IndexedActivity;
 import com.graphhopper.jsprit.core.problem.job.Delivery;
 import com.graphhopper.jsprit.core.problem.job.Pickup;
 import com.graphhopper.jsprit.core.problem.job.Service;
@@ -25,8 +25,8 @@
 public class DefaultTourActivityFactory implements TourActivityFactory {
 
     @Override
-    public AbstractActivity createActivity(Service service) {
-        AbstractActivity act;
+    public IndexedActivity createActivity(Service service) {
+        IndexedActivity act;
         if (service instanceof Pickup) {
             act = new PickupService((Pickup) service);
         } else if (service instanceof Delivery) {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverService.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverService.java
index 9b06ec6cb..4985e5416 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverService.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverService.java
@@ -17,12 +17,12 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import com.graphhopper.jsprit.core.problem.AbstractActivity;
+import com.graphhopper.jsprit.core.problem.IndexedActivity;
 import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.job.Delivery;
 
-public final class DeliverService extends AbstractActivity implements DeliveryActivity {
+public final class DeliverService extends IndexedActivity implements DeliveryActivity {
 
     private Delivery delivery;
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverShipment.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverShipment.java
index 297efae69..db280b2f7 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverShipment.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverShipment.java
@@ -17,13 +17,13 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import com.graphhopper.jsprit.core.problem.AbstractActivity;
+import com.graphhopper.jsprit.core.problem.IndexedActivity;
 import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 
-public final class DeliverShipment extends AbstractActivity implements DeliveryActivity {
+public final class DeliverShipment extends IndexedActivity implements DeliveryActivity {
 
     private Shipment shipment;
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliveryActivity.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliveryActivity.java
index 41f6d32c7..000da3dc8 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliveryActivity.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliveryActivity.java
@@ -17,7 +17,7 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-public interface DeliveryActivity extends TourActivity.JobActivity {
+public interface DeliveryActivity extends JobActivity {
 
 
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/End.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/End.java
index 8c2ef5c07..98c1ec76a 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/End.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/End.java
@@ -17,11 +17,11 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import com.graphhopper.jsprit.core.problem.AbstractActivity;
 import com.graphhopper.jsprit.core.problem.Capacity;
+import com.graphhopper.jsprit.core.problem.IndexedActivity;
 import com.graphhopper.jsprit.core.problem.Location;
 
-public final class End extends AbstractActivity implements TourActivity {
+public final class End extends IndexedActivity {
 
     public static End newInstance(String locationId, double earliestArrival, double latestArrival) {
         return new End(locationId, earliestArrival, latestArrival);
@@ -45,10 +45,12 @@ public static End copyOf(End end) {
 
     private Location location;
 
+    @Override
     public void setTheoreticalEarliestOperationStartTime(double theoreticalEarliestOperationStartTime) {
         theoretical_earliestOperationStartTime = theoreticalEarliestOperationStartTime;
     }
 
+    @Override
     public void setTheoreticalLatestOperationStartTime(double theoreticalLatestOperationStartTime) {
         theoretical_latestOperationStartTime = theoreticalLatestOperationStartTime;
     }
@@ -64,7 +66,9 @@ public End(Location location, double theoreticalStart, double theoreticalEnd) {
 
     public End(String locationId, double theoreticalStart, double theoreticalEnd) {
         super();
-        if (locationId != null) this.location = Location.Builder.newInstance().setId(locationId).build();
+        if (locationId != null) {
+            location = Location.Builder.newInstance().setId(locationId).build();
+        }
         theoretical_earliestOperationStartTime = theoreticalStart;
         theoretical_latestOperationStartTime = theoreticalEnd;
         endTime = theoreticalEnd;
@@ -72,7 +76,7 @@ public End(String locationId, double theoreticalStart, double theoreticalEnd) {
     }
 
     public End(End end) {
-        this.location = end.getLocation();
+        location = end.getLocation();
 //		this.locationId = end.getLocation().getId();
         theoretical_earliestOperationStartTime = end.getTheoreticalEarliestOperationStartTime();
         theoretical_latestOperationStartTime = end.getTheoreticalLatestOperationStartTime();
@@ -81,18 +85,22 @@ public End(End end) {
         setIndex(-2);
     }
 
+    @Override
     public double getTheoreticalEarliestOperationStartTime() {
         return theoretical_earliestOperationStartTime;
     }
 
+    @Override
     public double getTheoreticalLatestOperationStartTime() {
         return theoretical_latestOperationStartTime;
     }
 
+    @Override
     public double getEndTime() {
         return endTime;
     }
 
+    @Override
     public void setEndTime(double endTime) {
         this.endTime = endTime;
     }
@@ -115,8 +123,8 @@ public double getOperationTime() {
     @Override
     public String toString() {
         return "[type=" + getName() + "][location=" + location
-            + "][twStart=" + Activities.round(theoretical_earliestOperationStartTime)
-            + "][twEnd=" + Activities.round(theoretical_latestOperationStartTime) + "]";
+                + "][twStart=" + Activities.round(theoretical_earliestOperationStartTime)
+                + "][twEnd=" + Activities.round(theoretical_latestOperationStartTime) + "]";
     }
 
     @Override
@@ -126,7 +134,7 @@ public String getName() {
 
     @Override
     public double getArrTime() {
-        return this.arrTime;
+        return arrTime;
     }
 
     @Override
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/InternalActivityMarker.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/InternalActivityMarker.java
new file mode 100644
index 000000000..715264eb4
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/InternalActivityMarker.java
@@ -0,0 +1,10 @@
+package com.graphhopper.jsprit.core.problem.solution.route.activity;
+
+/**
+ * Marker interface for activities not mean to be created by jobs.
+ *
+ * @author balage
+ */
+public interface InternalActivityMarker {
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/InternalJobActivity.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/InternalJobActivity.java
new file mode 100644
index 000000000..0a1a0dbb4
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/InternalJobActivity.java
@@ -0,0 +1,23 @@
+package com.graphhopper.jsprit.core.problem.solution.route.activity;
+
+import com.graphhopper.jsprit.core.problem.AbstractJob;
+import com.graphhopper.jsprit.core.problem.Capacity;
+import com.graphhopper.jsprit.core.problem.Location;
+
+/**
+ * Common ancesstor for job-based, internal activities
+ *
+ * @author balage
+ *
+ */
+public abstract class InternalJobActivity extends JobActivity implements InternalActivityMarker {
+
+    public InternalJobActivity(AbstractJob job, String name, Location location, double operationTime, Capacity capacity) {
+        super(job, name, location, operationTime, capacity);
+    }
+
+    public InternalJobActivity(JobActivity sourceActivity) {
+        super(sourceActivity);
+    }
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/JobActivity.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/JobActivity.java
new file mode 100644
index 000000000..3193289cc
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/JobActivity.java
@@ -0,0 +1,147 @@
+package com.graphhopper.jsprit.core.problem.solution.route.activity;
+
+import java.lang.reflect.Constructor;
+import java.lang.reflect.InvocationTargetException;
+
+import com.graphhopper.jsprit.core.problem.AbstractJob;
+import com.graphhopper.jsprit.core.problem.Capacity;
+import com.graphhopper.jsprit.core.problem.IndexedActivity;
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.job.Job;
+
+/**
+ * Basic interface of job-activies.
+ * <p>
+ * <p>
+ * A job activity is related to a {@link Job}.
+ *
+ * @author schroeder
+ */
+public abstract class JobActivity extends IndexedActivity {
+
+    private AbstractJob job;
+
+    private Capacity capacity;
+
+    private double arrTime;
+
+    private double endTime;
+
+    private double theoreticalEarliest = 0;
+
+    private double theoreticalLatest = Double.MAX_VALUE;
+
+    private String name;
+    private double operationTime;
+    protected Location location;
+
+    public JobActivity(AbstractJob job, String name, Location location, double operationTime, Capacity capacity) {
+        super();
+        this.job = job;
+        this.name = name;
+        this.location = location;
+        this.operationTime = operationTime;
+        this.capacity = capacity;
+    }
+
+    protected JobActivity(JobActivity sourceActivity) {
+        job = sourceActivity.getJob();
+        arrTime = sourceActivity.getArrTime();
+        endTime = sourceActivity.getEndTime();
+        capacity = sourceActivity.getSize();
+        setIndex(sourceActivity.getIndex());
+        theoreticalEarliest = sourceActivity.getTheoreticalEarliestOperationStartTime();
+        theoreticalLatest = sourceActivity.getTheoreticalLatestOperationStartTime();
+        name = sourceActivity.name;
+        location = sourceActivity.location;
+        operationTime = sourceActivity.getOperationTime();
+    }
+
+    public AbstractJob getJob() {
+        return job;
+    }
+
+    @Override
+    public void setTheoreticalEarliestOperationStartTime(double earliest) {
+        theoreticalEarliest = earliest;
+    }
+
+    @Override
+    public void setTheoreticalLatestOperationStartTime(double latest) {
+        theoreticalLatest = latest;
+    }
+
+
+    @Override
+    public double getTheoreticalEarliestOperationStartTime() {
+        return theoreticalEarliest;
+    }
+
+    @Override
+    public double getTheoreticalLatestOperationStartTime() {
+        return theoreticalLatest;
+    }
+
+    @Override
+    public double getArrTime() {
+        return arrTime;
+    }
+
+    @Override
+    public double getEndTime() {
+        return endTime;
+    }
+
+    @Override
+    public void setArrTime(double arrTime) {
+        this.arrTime = arrTime;
+    }
+
+    @Override
+    public void setEndTime(double endTime) {
+        this.endTime = endTime;
+    }
+
+    @Override
+    public String toString() {
+        return "[type=" + getName() + "][locationId=" + getLocation().getId()
+                + "][size=" + getSize().toString()
+                + "][twStart=" + Activities.round(getTheoreticalEarliestOperationStartTime())
+                + "][twEnd=" + Activities.round(getTheoreticalLatestOperationStartTime()) + "]";
+    }
+
+    @Override
+    public Capacity getSize() {
+        return capacity;
+    }
+
+    @Override
+    public String getName() {
+        return name;
+    }
+
+    @Override
+    public double getOperationTime() {
+        return operationTime;
+    }
+
+    @Override
+    public Location getLocation() {
+        return location;
+    }
+
+    @Override
+    public TourActivity duplicate() {
+        // TODO - Balage1551 - It uses safe reflection. But this is reflection which is expensive, so
+        // in case it is a bottlenect, this should be refactored
+        try {
+            Constructor<? extends JobActivity> constructor = getClass().getConstructor(getClass());
+            return constructor.newInstance(this);
+        } catch (NoSuchMethodException | SecurityException | InstantiationException | IllegalAccessException | IllegalArgumentException
+                | InvocationTargetException e) {
+            throw new IllegalStateException(e);
+        }
+    }
+
+
+}
\ No newline at end of file
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupActivity.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupActivity.java
index daee63019..24f459749 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupActivity.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupActivity.java
@@ -17,7 +17,7 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-public interface PickupActivity extends TourActivity.JobActivity {
+public interface PickupActivity extends JobActivity {
 
 
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupService.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupService.java
index 167f8677f..9cc8cfd71 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupService.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupService.java
@@ -17,13 +17,13 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import com.graphhopper.jsprit.core.problem.AbstractActivity;
+import com.graphhopper.jsprit.core.problem.IndexedActivity;
 import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.job.Pickup;
 import com.graphhopper.jsprit.core.problem.job.Service;
 
-public final class PickupService extends AbstractActivity implements PickupActivity {
+public final class PickupService extends IndexedActivity implements PickupActivity {
 
     private Service pickup;
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupShipment.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupShipment.java
index d1f32c3a2..6dbe94732 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupShipment.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupShipment.java
@@ -17,13 +17,13 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import com.graphhopper.jsprit.core.problem.AbstractActivity;
+import com.graphhopper.jsprit.core.problem.IndexedActivity;
 import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 
-public final class PickupShipment extends AbstractActivity implements PickupActivity{
+public final class PickupShipment extends IndexedActivity implements PickupActivity{
 
     private Shipment shipment;
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivity.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivity.java
index 76bc09cb0..e918ff0b9 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivity.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivity.java
@@ -17,12 +17,12 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import com.graphhopper.jsprit.core.problem.AbstractActivity;
+import com.graphhopper.jsprit.core.problem.IndexedActivity;
 import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.job.Service;
 
-public class ServiceActivity extends AbstractActivity implements TourActivity.JobActivity {
+public class ServiceActivity extends IndexedActivity implements JobActivity {
 
     public double arrTime;
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/Start.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/Start.java
index 2b193ecf6..2ede81a7a 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/Start.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/Start.java
@@ -17,11 +17,11 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import com.graphhopper.jsprit.core.problem.AbstractActivity;
+import com.graphhopper.jsprit.core.problem.IndexedActivity;
 import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.Location;
 
-public final class Start extends AbstractActivity implements TourActivity {
+public final class Start extends IndexedActivity implements TourActivity {
 
     @Deprecated
     public final static String ACTIVITY_NAME = "start";
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TourActivities.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TourActivities.java
index 949e70fda..85b22ca80 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TourActivities.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TourActivities.java
@@ -18,7 +18,6 @@
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity.JobActivity;
 
 import java.util.*;
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TourActivity.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TourActivity.java
index a6aa070fd..718c1b147 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TourActivity.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TourActivity.java
@@ -20,7 +20,6 @@
 import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.HasIndex;
 import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.job.Job;
 
 /**
  * Basic interface for tour-activities.
@@ -35,24 +34,6 @@
 
 	public void setTheoreticalLatestOperationStartTime(double latest);
 
-    /**
-     * Basic interface of job-activies.
-     * <p>
-     * <p>A job activity is related to a {@link Job}.
-     *
-     * @author schroeder
-     */
-    public interface JobActivity extends TourActivity {
-
-        /**
-         * Returns the job that is involved with this activity.
-         *
-         * @return job
-         */
-        public Job getJob();
-
-    }
-
     /**
      * Returns the name of this activity.
      *
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TourActivityFactory.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TourActivityFactory.java
index b2ea9e050..e733df71d 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TourActivityFactory.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TourActivityFactory.java
@@ -17,11 +17,11 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import com.graphhopper.jsprit.core.problem.AbstractActivity;
+import com.graphhopper.jsprit.core.problem.IndexedActivity;
 import com.graphhopper.jsprit.core.problem.job.Service;
 
 public interface TourActivityFactory {
 
-    public AbstractActivity createActivity(Service service);
+    public IndexedActivity createActivity(Service service);
 
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TourShipmentActivityFactory.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TourShipmentActivityFactory.java
index a8ee78ec2..6ea912a55 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TourShipmentActivityFactory.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TourShipmentActivityFactory.java
@@ -17,13 +17,13 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import com.graphhopper.jsprit.core.problem.AbstractActivity;
+import com.graphhopper.jsprit.core.problem.IndexedActivity;
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 
 public interface TourShipmentActivityFactory {
 
-    public AbstractActivity createPickup(Shipment shipment);
+    public IndexedActivity createPickup(Shipment shipment);
 
-    public AbstractActivity createDelivery(Shipment shipment);
+    public IndexedActivity createDelivery(Shipment shipment);
 
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java
index 35878ade9..c39f99d9b 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java
@@ -24,6 +24,7 @@
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 
 import java.io.PrintWriter;
@@ -164,8 +165,8 @@ private static void printVerbose(PrintWriter out, VehicleRoutingProblem problem,
             TourActivity prevAct = route.getStart();
             for (TourActivity act : route.getActivities()) {
                 String jobId;
-                if (act instanceof TourActivity.JobActivity) {
-                    jobId = ((TourActivity.JobActivity) act).getJob().getId();
+                if (act instanceof JobActivity) {
+                    jobId = ((JobActivity) act).getJob().getId();
                 } else {
                     jobId = "-";
                 }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ExampleActivityCostFunction.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ExampleActivityCostFunction.java
index 7656bffa9..4b5c72bfd 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ExampleActivityCostFunction.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/ExampleActivityCostFunction.java
@@ -19,6 +19,7 @@
 
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingActivityCosts;
 import com.graphhopper.jsprit.core.problem.driver.Driver;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 
@@ -46,7 +47,7 @@ public double getActivityCost(TourActivity tourAct, double arrivalTime, Driver d
             double totalCost = timeAtAct * parameter_timeAtAct;
 
             //penalty tooLate
-            if (tourAct instanceof TourActivity.JobActivity) {
+            if (tourAct instanceof JobActivity) {
                 if (arrivalTime > tourAct.getTheoreticalLatestOperationStartTime()) {
                     double penTime = arrivalTime - tourAct.getTheoreticalLatestOperationStartTime();
                     totalCost += penTime * parameter_penaltyTooLate;
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/InitialRoutesTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/InitialRoutesTest.java
index 42430d0b5..25d144225 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/InitialRoutesTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/InitialRoutesTest.java
@@ -36,6 +36,7 @@
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupShipment;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
@@ -107,8 +108,8 @@ private boolean hasActivityIn(Collection<VehicleRoute> routes, String jobId) {
         boolean isInRoute = false;
         for (VehicleRoute route : routes) {
             for (TourActivity act : route.getActivities()) {
-                if (act instanceof TourActivity.JobActivity) {
-                    if (((TourActivity.JobActivity) act).getJob().getId().equals(jobId)) isInRoute = true;
+                if (act instanceof JobActivity) {
+                    if (((JobActivity) act).getJob().getId().equals(jobId)) isInRoute = true;
                 }
             }
         }
@@ -131,8 +132,8 @@ private boolean hasActivityIn(VehicleRoutingProblemSolution solution, String veh
     private boolean hasActivityIn(VehicleRoute route, String jobId) {
         boolean isInRoute = false;
         for (TourActivity act : route.getActivities()) {
-            if (act instanceof TourActivity.JobActivity) {
-                if (((TourActivity.JobActivity) act).getJob().getId().equals(jobId)) isInRoute = true;
+            if (act instanceof JobActivity) {
+                if (((JobActivity) act).getJob().getId().equals(jobId)) isInRoute = true;
             }
         }
         return isInRoute;
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertionTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertionTest.java
index fbdf90082..0a0a7366e 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertionTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/RegretInsertionTest.java
@@ -37,6 +37,7 @@
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.ActivityVisitor;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.*;
 import com.graphhopper.jsprit.core.util.Coordinate;
@@ -148,10 +149,10 @@ public void begin(VehicleRoute route) {
 
         @Override
         public void visit(TourActivity activity) {
-            if(((TourActivity.JobActivity)activity).getJob().getId().equals("s1")){
+            if(((JobActivity)activity).getJob().getId().equals("s1")){
                 stateManager.putProblemState(job1AssignedId,Boolean.class,true);
             }
-            if(((TourActivity.JobActivity)activity).getJob().getId().equals("s2")){
+            if(((JobActivity)activity).getJob().getId().equals("s2")){
                 stateManager.putProblemState(job2AssignedId,Boolean.class,true);
             }
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/ServiceInsertionAndLoadConstraintsTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/ServiceInsertionAndLoadConstraintsTest.java
index 5a1a34682..732618211 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/ServiceInsertionAndLoadConstraintsTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/ServiceInsertionAndLoadConstraintsTest.java
@@ -19,7 +19,7 @@
 
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.InsertionListeners;
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
-import com.graphhopper.jsprit.core.problem.AbstractActivity;
+import com.graphhopper.jsprit.core.problem.IndexedActivity;
 import com.graphhopper.jsprit.core.problem.JobActivityFactory;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
@@ -130,7 +130,7 @@ public void whenInsertingServiceWhileNoCapIsAvailable_itMustReturnTheCorrectInse
 
         JobActivityFactory activityFactory = new JobActivityFactory() {
             @Override
-            public List<AbstractActivity> createActivities(Job job) {
+            public List<IndexedActivity> createActivities(Job job) {
                 return vrp.copyAndGetActivities(job);
             }
         };
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/ShipmentInsertionCalculatorTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/ShipmentInsertionCalculatorTest.java
index 70dd2ee3f..1fb45993d 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/ShipmentInsertionCalculatorTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/ShipmentInsertionCalculatorTest.java
@@ -19,7 +19,7 @@
 
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.InsertionListeners;
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
-import com.graphhopper.jsprit.core.problem.AbstractActivity;
+import com.graphhopper.jsprit.core.problem.IndexedActivity;
 import com.graphhopper.jsprit.core.problem.JobActivityFactory;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
@@ -115,7 +115,7 @@ public void whenCalculatingInsertionCostsOfShipment_itShouldReturnCorrectCostVal
         Shipment shipment = Shipment.Builder.newInstance("s").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("0,10").build()).setDeliveryLocation(Location.newInstance("10,0")).build();
         VehicleRoute route = VehicleRoute.emptyRoute();
         JobActivityFactory activityFactory = mock(JobActivityFactory.class);
-        List<AbstractActivity> activities = new ArrayList<AbstractActivity>();
+        List<IndexedActivity> activities = new ArrayList<IndexedActivity>();
         activities.add(new PickupShipment(shipment));
         activities.add(new DeliverShipment(shipment));
         when(activityFactory.createActivities(shipment)).thenReturn(activities);
@@ -133,7 +133,7 @@ public void whenCalculatingInsertionIntoExistingRoute_itShouldReturnCorrectCosts
         new Inserter(new InsertionListeners(), vehicleRoutingProblem).insertJob(shipment, new InsertionData(0, 0, 0, vehicle, null), route);
 
         JobActivityFactory activityFactory = mock(JobActivityFactory.class);
-        List<AbstractActivity> activities = new ArrayList<AbstractActivity>();
+        List<IndexedActivity> activities = new ArrayList<IndexedActivity>();
         activities.add(new PickupShipment(shipment2));
         activities.add(new DeliverShipment(shipment2));
         when(activityFactory.createActivities(shipment2)).thenReturn(activities);
@@ -145,8 +145,8 @@ public void whenCalculatingInsertionIntoExistingRoute_itShouldReturnCorrectCosts
         assertEquals(2, iData.getDeliveryInsertionIndex());
     }
 
-    private List<AbstractActivity> getTourActivities(Shipment shipment) {
-        List<AbstractActivity> acts = new ArrayList<AbstractActivity>();
+    private List<IndexedActivity> getTourActivities(Shipment shipment) {
+        List<IndexedActivity> acts = new ArrayList<IndexedActivity>();
         PickupShipment pick = new PickupShipment(shipment);
         DeliverShipment del = new DeliverShipment(shipment);
         acts.add(pick);
@@ -171,7 +171,7 @@ public boolean fulfilled(JobInsertionContext insertionContext) {
         });
 
         JobActivityFactory activityFactory = mock(JobActivityFactory.class);
-        List<AbstractActivity> activities = new ArrayList<AbstractActivity>();
+        List<IndexedActivity> activities = new ArrayList<IndexedActivity>();
         activities.add(new PickupShipment(shipment2));
         activities.add(new DeliverShipment(shipment2));
         when(activityFactory.createActivities(shipment2)).thenReturn(activities);
@@ -197,7 +197,7 @@ public void whenInsertingThirdShipment_itShouldCalcCorrectVal() {
         inserter.insertJob(shipment2, new InsertionData(0, 1, 2, vehicle, null), route);
 
         JobActivityFactory activityFactory = mock(JobActivityFactory.class);
-        List<AbstractActivity> activities = new ArrayList<AbstractActivity>();
+        List<IndexedActivity> activities = new ArrayList<IndexedActivity>();
         activities.add(new PickupShipment(shipment3));
         activities.add(new DeliverShipment(shipment3));
         when(activityFactory.createActivities(shipment3)).thenReturn(activities);
@@ -222,7 +222,7 @@ public void whenInsertingThirdShipment_itShouldCalcCorrectVal2() {
         inserter.insertJob(shipment2, new InsertionData(0, 1, 2, vehicle, null), route);
 
         JobActivityFactory activityFactory = mock(JobActivityFactory.class);
-        List<AbstractActivity> activities = new ArrayList<AbstractActivity>();
+        List<IndexedActivity> activities = new ArrayList<IndexedActivity>();
         activities.add(new PickupShipment(shipment3));
         activities.add(new DeliverShipment(shipment3));
         when(activityFactory.createActivities(shipment3)).thenReturn(activities);
@@ -304,7 +304,7 @@ public void whenInsertingServiceWhileNoCapIsAvailable_itMustReturnNoInsertionDat
         Pickup service = (Pickup) Pickup.Builder.newInstance("pick").addSizeDimension(0, 1).setLocation(Location.newInstance("5,5")).build();
 
         JobActivityFactory activityFactory = mock(JobActivityFactory.class);
-        List<AbstractActivity> activities = new ArrayList<AbstractActivity>();
+        List<IndexedActivity> activities = new ArrayList<IndexedActivity>();
         activities.add(new PickupService(service));
         when(activityFactory.createActivities(service)).thenReturn(activities);
         insertionCalculator.setJobActivityFactory(activityFactory);
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestCalculatesServiceInsertion.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestCalculatesServiceInsertion.java
index e6a7815a5..f32b32dfd 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestCalculatesServiceInsertion.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestCalculatesServiceInsertion.java
@@ -18,7 +18,7 @@
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
-import com.graphhopper.jsprit.core.problem.AbstractActivity;
+import com.graphhopper.jsprit.core.problem.IndexedActivity;
 import com.graphhopper.jsprit.core.problem.JobActivityFactory;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
@@ -134,7 +134,7 @@ public double getTransportCost(Location from, Location to, double departureTime,
         serviceInsertion = new ServiceInsertionCalculator(costs, vrp.getActivityCosts(), new LocalActivityInsertionCostsCalculator(costs, actCosts, states), cManager);
         serviceInsertion.setJobActivityFactory(new JobActivityFactory() {
             @Override
-            public List<AbstractActivity> createActivities(Job job) {
+            public List<IndexedActivity> createActivities(Job job) {
                 return vrp.copyAndGetActivities(job);
             }
         });
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestCalculatesServiceInsertionOnRouteLevel.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestCalculatesServiceInsertionOnRouteLevel.java
index 23f41f206..5d7ff0262 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestCalculatesServiceInsertionOnRouteLevel.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestCalculatesServiceInsertionOnRouteLevel.java
@@ -126,7 +126,7 @@ public double getTransportCost(Location from, Location to, double departureTime,
         serviceInsertion.setStates(states);
         serviceInsertion.setJobActivityFactory(new JobActivityFactory() {
             @Override
-            public List<AbstractActivity> createActivities(Job job) {
+            public List<IndexedActivity> createActivities(Job job) {
                 return vrp.copyAndGetActivities(job);
             }
         });
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestInserter.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestInserter.java
index f2058161e..c470478dd 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestInserter.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestInserter.java
@@ -19,7 +19,7 @@
 
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.InsertionListeners;
 import com.graphhopper.jsprit.core.algorithm.state.UpdateEndLocationIfRouteIsOpen;
-import com.graphhopper.jsprit.core.problem.AbstractActivity;
+import com.graphhopper.jsprit.core.problem.IndexedActivity;
 import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
@@ -67,7 +67,7 @@ public void whenInsertingServiceAndRouteIsClosed_itInsertsCorrectly() {
         when(iData.getSelectedVehicle()).thenReturn(vehicle);
 
         VehicleRoutingProblem vehicleRoutingProblem = mock(VehicleRoutingProblem.class);
-        List<AbstractActivity> acts = new ArrayList<AbstractActivity>();
+        List<IndexedActivity> acts = new ArrayList<IndexedActivity>();
         PickupService act = new PickupService(serviceToInsert);
         acts.add(act);
         when(vehicleRoutingProblem.copyAndGetActivities(serviceToInsert)).thenReturn(acts);
@@ -113,8 +113,8 @@ public void whenInsertingServiceAndRouteIsOpen_itInsertsCorrectlyAndSwitchesEndL
         assertEquals(route.getEnd().getLocation().getId(), serviceToInsert.getLocation().getId());
     }
 
-    private List<AbstractActivity> getTourActivities(Service serviceToInsert) {
-        List<AbstractActivity> acts = new ArrayList<AbstractActivity>();
+    private List<IndexedActivity> getTourActivities(Service serviceToInsert) {
+        List<IndexedActivity> acts = new ArrayList<IndexedActivity>();
         acts.add(new PickupService(serviceToInsert));
         return acts;
     }
@@ -154,8 +154,8 @@ public void whenInsertingShipmentAndRouteIsClosed_itInsertsCorrectly() {
         assertEquals(route.getEnd().getLocation().getId(), vehicle.getEndLocation().getId());
     }
 
-    private List<AbstractActivity> getTourActivities(Shipment shipmentToInsert) {
-        List<AbstractActivity> acts = new ArrayList<AbstractActivity>();
+    private List<IndexedActivity> getTourActivities(Shipment shipmentToInsert) {
+        List<IndexedActivity> acts = new ArrayList<IndexedActivity>();
         acts.add(new PickupShipment(shipmentToInsert));
         acts.add(new DeliverShipment(shipmentToInsert));
         return acts;
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestRouteLevelActivityInsertionCostEstimator.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestRouteLevelActivityInsertionCostEstimator.java
index e00b1ecda..77b71e2e2 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestRouteLevelActivityInsertionCostEstimator.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestRouteLevelActivityInsertionCostEstimator.java
@@ -19,7 +19,7 @@
 
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
 import com.graphhopper.jsprit.core.algorithm.state.UpdateVariableCosts;
-import com.graphhopper.jsprit.core.problem.AbstractActivity;
+import com.graphhopper.jsprit.core.problem.IndexedActivity;
 import com.graphhopper.jsprit.core.problem.JobActivityFactory;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
@@ -99,7 +99,7 @@ public double getActivityDuration(TourActivity tourAct, double arrivalTime, Driv
 
         route = VehicleRoute.Builder.newInstance(vehicle).setJobActivityFactory(new JobActivityFactory() {
             @Override
-            public List<AbstractActivity> createActivities(Job job) {
+            public List<IndexedActivity> createActivities(Job job) {
                 return vrp.copyAndGetActivities(job);
             }
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestRouteLevelServiceInsertionCostEstimator.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestRouteLevelServiceInsertionCostEstimator.java
index b71454594..d196158c5 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestRouteLevelServiceInsertionCostEstimator.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/TestRouteLevelServiceInsertionCostEstimator.java
@@ -19,7 +19,7 @@
 
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
 import com.graphhopper.jsprit.core.algorithm.state.UpdateVariableCosts;
-import com.graphhopper.jsprit.core.problem.AbstractActivity;
+import com.graphhopper.jsprit.core.problem.IndexedActivity;
 import com.graphhopper.jsprit.core.problem.JobActivityFactory;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
@@ -111,7 +111,7 @@ public double getActivityDuration(TourActivity tourAct, double arrivalTime, Driv
 
         activityFactory = new JobActivityFactory() {
             @Override
-            public List<AbstractActivity> createActivities(Job job) {
+            public List<IndexedActivity> createActivities(Job job) {
                 return vrp.copyAndGetActivities(job);
             }
         };
@@ -135,8 +135,8 @@ public void whenNewServiceNeedToBeInserted_itShouldReturnCorrectInsertionCosts()
         routeInserter.setStates(stateManager);
         routeInserter.setJobActivityFactory(new JobActivityFactory() {
             @Override
-            public List<AbstractActivity> createActivities(Job job) {
-                List<AbstractActivity> acts = activityFactory.createActivities(job);
+            public List<IndexedActivity> createActivities(Job job) {
+                List<IndexedActivity> acts = activityFactory.createActivities(job);
                 if (acts.isEmpty()) {
                     acts.add(new PickupService(s4));
                 }
@@ -157,8 +157,8 @@ public void whenNewServiceNeedToBeInserted_itShouldReturnCorrectInsertionIndex()
         routeInserter.setStates(stateManager);
         routeInserter.setJobActivityFactory(new JobActivityFactory() {
             @Override
-            public List<AbstractActivity> createActivities(Job job) {
-                List<AbstractActivity> acts = activityFactory.createActivities(job);
+            public List<IndexedActivity> createActivities(Job job) {
+                List<IndexedActivity> acts = activityFactory.createActivities(job);
                 if (acts.isEmpty()) {
                     acts.add(new PickupService(s4));
                 }
@@ -179,8 +179,8 @@ public void whenNewServiceWithServiceTimeNeedToBeInserted_itShouldReturnCorrectI
         routeInserter.setStates(stateManager);
         routeInserter.setJobActivityFactory(new JobActivityFactory() {
             @Override
-            public List<AbstractActivity> createActivities(Job job) {
-                List<AbstractActivity> acts = activityFactory.createActivities(job);
+            public List<IndexedActivity> createActivities(Job job) {
+                List<IndexedActivity> acts = activityFactory.createActivities(job);
                 if (acts.isEmpty()) {
                     PickupService pickupService = new PickupService(s4);
                     pickupService.setTheoreticalEarliestOperationStartTime(5);
@@ -208,8 +208,8 @@ public void whenNewServiceWithServiceTimeNeedToBeInsertedAndRouteIsEmpty_itShoul
         routeInserter.setStates(stateManager);
         routeInserter.setJobActivityFactory(new JobActivityFactory() {
             @Override
-            public List<AbstractActivity> createActivities(Job job) {
-                List<AbstractActivity> acts = activityFactory.createActivities(job);
+            public List<IndexedActivity> createActivities(Job job) {
+                List<IndexedActivity> acts = activityFactory.createActivities(job);
                 if (acts.isEmpty()) {
                     PickupService pickupService = new PickupService(s4);
                     pickupService.setTheoreticalEarliestOperationStartTime(5);
@@ -236,8 +236,8 @@ public void whenNewServiceWithServiceTimeAndTWNeedToBeInsertedAndRouteIsEmpty_it
         routeInserter.setStates(stateManager);
         routeInserter.setJobActivityFactory(new JobActivityFactory() {
             @Override
-            public List<AbstractActivity> createActivities(Job job) {
-                List<AbstractActivity> acts = activityFactory.createActivities(job);
+            public List<IndexedActivity> createActivities(Job job) {
+                List<IndexedActivity> acts = activityFactory.createActivities(job);
                 if (acts.isEmpty()) {
                     PickupService pickupService = new PickupService(s4);
                     pickupService.setTheoreticalEarliestOperationStartTime(3);
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/LoadStateTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/LoadStateTest.java
index a7e52ec9d..95def5f6e 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/LoadStateTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/LoadStateTest.java
@@ -76,7 +76,7 @@ public void doBefore() {
         serviceRouteBuilder.setJobActivityFactory(new JobActivityFactory() {
 
             @Override
-            public List<AbstractActivity> createActivities(Job job) {
+            public List<IndexedActivity> createActivities(Job job) {
                 return serviceProblem.copyAndGetActivities(job);
             }
 
@@ -86,7 +86,7 @@ public void doBefore() {
         VehicleRoute.Builder pdRouteBuilder = VehicleRoute.Builder.newInstance(vehicle);
         pdRouteBuilder.setJobActivityFactory(new JobActivityFactory() {
             @Override
-            public List<AbstractActivity> createActivities(Job job) {
+            public List<IndexedActivity> createActivities(Job job) {
                 return pdProblem.copyAndGetActivities(job);
             }
         });
@@ -95,7 +95,7 @@ public void doBefore() {
         VehicleRoute.Builder shipmentRouteBuilder = VehicleRoute.Builder.newInstance(vehicle);
         shipmentRouteBuilder.setJobActivityFactory(new JobActivityFactory() {
             @Override
-            public List<AbstractActivity> createActivities(Job job) {
+            public List<IndexedActivity> createActivities(Job job) {
                 return shipmentProblem.copyAndGetActivities(job);
             }
         });
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/StateManagerTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/StateManagerTest.java
index 40c89edc5..2bfec6e98 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/StateManagerTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/StateManagerTest.java
@@ -43,10 +43,10 @@
     static class ActFac implements JobActivityFactory {
 
         @Override
-        public List<AbstractActivity> createActivities(Job job) {
+        public List<IndexedActivity> createActivities(Job job) {
             ServiceActivity act = mock(ServiceActivity.class);
             when(act.getIndex()).thenReturn(1);
-            List<AbstractActivity> acts = new ArrayList<AbstractActivity>();
+            List<IndexedActivity> acts = new ArrayList<IndexedActivity>();
             acts.add(act);
             return acts;
         }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdatePracticalTimeWindowTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdatePracticalTimeWindowTest.java
index 5878e12c6..ae0db5565 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdatePracticalTimeWindowTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdatePracticalTimeWindowTest.java
@@ -17,7 +17,7 @@
  */
 package com.graphhopper.jsprit.core.algorithm.state;
 
-import com.graphhopper.jsprit.core.problem.AbstractActivity;
+import com.graphhopper.jsprit.core.problem.IndexedActivity;
 import com.graphhopper.jsprit.core.problem.JobActivityFactory;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
@@ -80,7 +80,7 @@ public void doBefore() {
 
         route = VehicleRoute.Builder.newInstance(vehicle, mock(Driver.class)).setJobActivityFactory(new JobActivityFactory() {
             @Override
-            public List<AbstractActivity> createActivities(Job job) {
+            public List<IndexedActivity> createActivities(Job job) {
                 return vrp.copyAndGetActivities(job);
             }
         })
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdateVehicleDependentTimeWindowTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdateVehicleDependentTimeWindowTest.java
index a07d61e57..3bc9f6151 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdateVehicleDependentTimeWindowTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/UpdateVehicleDependentTimeWindowTest.java
@@ -18,7 +18,7 @@
 
 package com.graphhopper.jsprit.core.algorithm.state;
 
-import com.graphhopper.jsprit.core.problem.AbstractActivity;
+import com.graphhopper.jsprit.core.problem.IndexedActivity;
 import com.graphhopper.jsprit.core.problem.JobActivityFactory;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
@@ -103,7 +103,7 @@ public void doBefore() {
 
         route = VehicleRoute.Builder.newInstance(vehicle).setJobActivityFactory(new JobActivityFactory() {
             @Override
-            public List<AbstractActivity> createActivities(Job job) {
+            public List<IndexedActivity> createActivities(Job job) {
                 return vrp.copyAndGetActivities(job);
             }
         }).addService(service).addService(service2).addService(service3).build();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/LoadConstraintTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/LoadConstraintTest.java
index f11db6aec..155cebc96 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/LoadConstraintTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/LoadConstraintTest.java
@@ -79,7 +79,7 @@ public void doBefore() {
         serviceRouteBuilder.setJobActivityFactory(new JobActivityFactory() {
 
             @Override
-            public List<AbstractActivity> createActivities(Job job) {
+            public List<IndexedActivity> createActivities(Job job) {
                 return serviceProblem.copyAndGetActivities(job);
             }
 
@@ -89,7 +89,7 @@ public void doBefore() {
         VehicleRoute.Builder pdRouteBuilder = VehicleRoute.Builder.newInstance(vehicle);
         pdRouteBuilder.setJobActivityFactory(new JobActivityFactory() {
             @Override
-            public List<AbstractActivity> createActivities(Job job) {
+            public List<IndexedActivity> createActivities(Job job) {
                 return pdProblem.copyAndGetActivities(job);
             }
         });
@@ -98,7 +98,7 @@ public void doBefore() {
         VehicleRoute.Builder shipmentRouteBuilder = VehicleRoute.Builder.newInstance(vehicle);
         shipmentRouteBuilder.setJobActivityFactory(new JobActivityFactory() {
             @Override
-            public List<AbstractActivity> createActivities(Job job) {
+            public List<IndexedActivity> createActivities(Job job) {
                 return shipmentProblem.copyAndGetActivities(job);
             }
         });
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTimeWindowTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTimeWindowTest.java
index 2de2a3ce4..39c92d874 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTimeWindowTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTimeWindowTest.java
@@ -102,7 +102,7 @@ public void doBefore() {
         route = VehicleRoute.Builder.newInstance(vehicle).setJobActivityFactory(new JobActivityFactory() {
 
             @Override
-            public List<AbstractActivity> createActivities(Job job) {
+            public List<IndexedActivity> createActivities(Job job) {
                 return vrp.copyAndGetActivities(job);
             }
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTimeWindowWithStartTimeAndMaxOperationTimeTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTimeWindowWithStartTimeAndMaxOperationTimeTest.java
index 373b0edd2..de090cc70 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTimeWindowWithStartTimeAndMaxOperationTimeTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/VehicleDependentTimeWindowWithStartTimeAndMaxOperationTimeTest.java
@@ -100,7 +100,7 @@ public void doBefore() {
         route = VehicleRoute.Builder.newInstance(vehicle).setJobActivityFactory(new JobActivityFactory() {
 
             @Override
-            public List<AbstractActivity> createActivities(Job job) {
+            public List<IndexedActivity> createActivities(Job job) {
                 return vrp.copyAndGetActivities(job);
             }
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/TestVehicleRoute.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/TestVehicleRoute.java
index f5fdb91b4..67b73e5a3 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/TestVehicleRoute.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/TestVehicleRoute.java
@@ -24,6 +24,7 @@
 import com.graphhopper.jsprit.core.problem.job.Pickup;
 import com.graphhopper.jsprit.core.problem.job.Service;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverService;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupService;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.ServiceActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
@@ -306,7 +307,7 @@ public void whenAddingPickup_itShouldBeTreatedAsPickup() {
         TourActivity act = route.getActivities().get(0);
         assertTrue(act.getName().equals("pickup"));
         assertTrue(act instanceof PickupService);
-        assertTrue(((TourActivity.JobActivity) act).getJob() instanceof Pickup);
+        assertTrue(((JobActivity) act).getJob() instanceof Pickup);
 
     }
 
@@ -320,7 +321,7 @@ public void whenAddingPickup_itShouldBeAdded() {
         TourActivity act = route.getActivities().get(0);
         assertTrue(act.getName().equals("pickup"));
         assertTrue(act instanceof PickupService);
-        assertTrue(((TourActivity.JobActivity) act).getJob() instanceof Pickup);
+        assertTrue(((JobActivity) act).getJob() instanceof Pickup);
 
     }
 
@@ -334,7 +335,7 @@ public void whenAddingDelivery_itShouldBeTreatedAsDelivery() {
         TourActivity act = route.getActivities().get(0);
         assertTrue(act.getName().equals("delivery"));
         assertTrue(act instanceof DeliverService);
-        assertTrue(((TourActivity.JobActivity) act).getJob() instanceof Delivery);
+        assertTrue(((JobActivity) act).getJob() instanceof Delivery);
 
     }
 
@@ -348,7 +349,7 @@ public void whenAddingDelivery_itShouldBeAdded() {
         TourActivity act = route.getActivities().get(0);
         assertTrue(act.getName().equals("delivery"));
         assertTrue(act instanceof DeliverService);
-        assertTrue(((TourActivity.JobActivity) act).getJob() instanceof Delivery);
+        assertTrue(((JobActivity) act).getJob() instanceof Delivery);
 
     }
 }
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/BicycleMessenger.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/BicycleMessenger.java
index 2f61d78aa..af7320370 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/BicycleMessenger.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/BicycleMessenger.java
@@ -40,9 +40,9 @@
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.ReverseActivityVisitor;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity.JobActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.state.RouteAndActivityStateGetter;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/JobAndActivityDependenciesExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/JobAndActivityDependenciesExample.java
index 8fe754613..d5c0d311c 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/JobAndActivityDependenciesExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/JobAndActivityDependenciesExample.java
@@ -35,6 +35,7 @@
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.ActivityVisitor;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.reporting.SolutionPrinter;
@@ -78,11 +79,11 @@ public void begin(VehicleRoute route) {
 
         @Override
         public void visit(TourActivity activity) {
-            if (((TourActivity.JobActivity) activity).getJob().getName().equals("use key")) {
+            if (((JobActivity) activity).getJob().getName().equals("use key")) {
                 stateManager.putProblemState(keyUsedStateId, VehicleRoute.class, route);
-            } else if (((TourActivity.JobActivity) activity).getJob().getName().equals("get key")) {
+            } else if (((JobActivity) activity).getJob().getName().equals("get key")) {
                 stateManager.putProblemState(keyPickedStateId, VehicleRoute.class, route);
-            } else if (((TourActivity.JobActivity) activity).getJob().getName().equals("deliver key")) {
+            } else if (((JobActivity) activity).getJob().getName().equals("deliver key")) {
                 stateManager.putProblemState(keyDeliveredStateId, VehicleRoute.class, route);
             }
         }
@@ -188,18 +189,18 @@ public ConstraintsStatus fulfilled(JobInsertionContext iFacts, TourActivity prev
         }
 
         private boolean isPickupKey(TourActivity act) {
-            if (!(act instanceof TourActivity.JobActivity)) return false;
-            return ((TourActivity.JobActivity) act).getJob().getName().equals("get key");
+            if (!(act instanceof JobActivity)) return false;
+            return ((JobActivity) act).getJob().getName().equals("get key");
         }
 
         private boolean isUseKey(TourActivity act) {
-            if (!(act instanceof TourActivity.JobActivity)) return false;
-            return ((TourActivity.JobActivity) act).getJob().getName().equals("use key");
+            if (!(act instanceof JobActivity)) return false;
+            return ((JobActivity) act).getJob().getName().equals("use key");
         }
 
         private boolean isDeliverKey(TourActivity act) {
-            if (!(act instanceof TourActivity.JobActivity)) return false;
-            return ((TourActivity.JobActivity) act).getJob().getName().equals("deliver key");
+            if (!(act instanceof JobActivity)) return false;
+            return ((JobActivity) act).getJob().getName().equals("deliver key");
         }
 
 
diff --git a/jsprit-io/src/main/java/com/graphhopper/jsprit/io/problem/VrpXMLWriter.java b/jsprit-io/src/main/java/com/graphhopper/jsprit/io/problem/VrpXMLWriter.java
index 024d49586..b2ea9664e 100644
--- a/jsprit-io/src/main/java/com/graphhopper/jsprit/io/problem/VrpXMLWriter.java
+++ b/jsprit-io/src/main/java/com/graphhopper/jsprit/io/problem/VrpXMLWriter.java
@@ -26,6 +26,7 @@
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
@@ -162,8 +163,8 @@ private void writeInitialRoutes(XMLConf xmlConfig) {
             int actCounter = 0;
             for (TourActivity act : route.getTourActivities().getActivities()) {
                 xmlConfig.setProperty(path + "(" + routeCounter + ").act(" + actCounter + ")[@type]", act.getName());
-                if (act instanceof TourActivity.JobActivity) {
-                    Job job = ((TourActivity.JobActivity) act).getJob();
+                if (act instanceof JobActivity) {
+                    Job job = ((JobActivity) act).getJob();
                     if (job instanceof Service) {
                         xmlConfig.setProperty(path + "(" + routeCounter + ").act(" + actCounter + ").serviceId", job.getId());
                     } else if (job instanceof Shipment) {
@@ -201,8 +202,8 @@ private void writeSolutions(XMLConf xmlConfig) {
                 int actCounter = 0;
                 for (TourActivity act : route.getTourActivities().getActivities()) {
                     xmlConfig.setProperty(solutionPath + "(" + counter + ").routes.route(" + routeCounter + ").act(" + actCounter + ")[@type]", act.getName());
-                    if (act instanceof TourActivity.JobActivity) {
-                        Job job = ((TourActivity.JobActivity) act).getJob();
+                    if (act instanceof JobActivity) {
+                        Job job = ((JobActivity) act).getJob();
                         if (job instanceof Break) {
                             xmlConfig.setProperty(solutionPath + "(" + counter + ").routes.route(" + routeCounter + ").act(" + actCounter + ").breakId", job.getId());
                         } else if (job instanceof Service) {
diff --git a/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/InitialRoutesTest.java b/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/InitialRoutesTest.java
index 526bbc132..2222c091d 100644
--- a/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/InitialRoutesTest.java
+++ b/jsprit-io/src/test/java/com/graphhopper/jsprit/io/problem/InitialRoutesTest.java
@@ -19,7 +19,7 @@
 package com.graphhopper.jsprit.io.problem;
 
 
-import com.graphhopper.jsprit.core.problem.AbstractActivity;
+import com.graphhopper.jsprit.core.problem.IndexedActivity;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.job.Service;
@@ -111,7 +111,7 @@ public void whenReading_thereShouldBeTwoActsAssociatedToShipment4() {
         VehicleRoutingProblem vrp = vrpBuilder.build();
 
         Job job = vrp.getJobs().get("4");
-        List<AbstractActivity> activities = vrp.getActivities(job);
+        List<IndexedActivity> activities = vrp.getActivities(job);
 
         assertEquals(2, activities.size());
     }
