diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Delivery.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Delivery.java
index 638a0a414..17fc09c5b 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Delivery.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Delivery.java
@@ -19,6 +19,7 @@
 
 import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverServiceDEPRECATED;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivityNEW;
 
 /**
  * Delivery extends Service and is intended to model a Service where smth is UNLOADED (i.e. delivered) from a transport unit.
@@ -51,10 +52,11 @@ protected Delivery createInstance() {
     @Override
     protected void createActivities(JobBuilder<?, ?> builder) {
         JobActivityList list = new SequentialJobActivityList(this);
-        // TODO - Balage1551
-        // addActivity(new DeliveryActivityNEW(this, "pickup", getLocation(),
-        // getServiceDuration(), getSize()));
-        list.addActivity(new DeliverServiceDEPRECATED(this, (Builder) builder));
+        if (TheBigRedButton.PUSHED) {
+            list.addActivity(new DeliveryActivityNEW(this, (Builder) builder));
+        } else {
+            list.addActivity(new DeliverServiceDEPRECATED(this, (Builder) builder));
+        }
         setActivities(list);
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Pickup.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Pickup.java
index 28f42c3fc..afa88f061 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Pickup.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Pickup.java
@@ -17,6 +17,7 @@
  */
 package com.graphhopper.jsprit.core.problem.job;
 
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivityNEW;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupServiceDEPRECATED;
 
 /**
@@ -50,9 +51,11 @@ protected Pickup createInstance() {
     @Override
     protected void createActivities(JobBuilder<?, ?> builder) {
         JobActivityList list = new SequentialJobActivityList(this);
-        // TODO - Balage1551
-        //      addActivity(new PickupActivityNEW(this, "pickup", getLocation(), getServiceDuration(), getSize()));
-        list.addActivity(new PickupServiceDEPRECATED(this, (Builder) builder));
+        if (TheBigRedButton.PUSHED) {
+            list.addActivity(new PickupActivityNEW(this, (Builder) builder));
+        } else {
+            list.addActivity(new PickupServiceDEPRECATED(this, (Builder) builder));
+        }
         setActivities(list);
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java
index c6d2f760b..534e8f931 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java
@@ -17,15 +17,16 @@
  */
 package com.graphhopper.jsprit.core.problem.job;
 
-import com.graphhopper.jsprit.core.problem.SizeDimension;
+import java.util.Collection;
+
 import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupServiceDEPRECATED;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.ServiceActivityNEW;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindowsImpl;
 
-import java.util.Collection;
-
 /**
  * Service implementation of a job.
  * <p>
@@ -42,7 +43,7 @@
      * @author schroeder
      */
     public static abstract class BuilderBase<T extends Service, B extends BuilderBase<T, B>>
-        extends JobBuilder<T, B> {
+    extends JobBuilder<T, B> {
 
         protected String type = "service";
 
@@ -223,9 +224,11 @@ protected Service createInstance() {
     protected void createActivities(JobBuilder<?, ?> builder) {
         Builder serviceBuilder = (Builder) builder;
         JobActivityList list = new SequentialJobActivityList(this);
-        // TODO - Balage1551
-        //        list.addActivity(new ServiceActivityNEW(this, "service", getLocation(), getServiceDuration(), getSize()));
-        list.addActivity(new PickupServiceDEPRECATED(this, serviceBuilder));
+        if (TheBigRedButton.PUSHED) {
+            list.addActivity(new ServiceActivityNEW(this, serviceBuilder));
+        } else {
+            list.addActivity(new PickupServiceDEPRECATED(this, serviceBuilder));
+        }
         setActivities(list);
     }
 
@@ -285,8 +288,8 @@ public String getType() {
     @Override
     public String toString() {
         return "[id=" + getId() + "][name=" + getName() + "][type=" + type + "][location="
-            + getLocation() + "][capacity=" + getSize() + "][serviceTime="
-            + getServiceDuration() + "][timeWindow=" + getTimeWindows() + "]";
+                        + getLocation() + "][capacity=" + getSize() + "][serviceTime="
+                        + getServiceDuration() + "][timeWindow=" + getTimeWindows() + "]";
     }
 
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java
index 550412096..8c89faac8 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java
@@ -17,15 +17,17 @@
  */
 package com.graphhopper.jsprit.core.problem.job;
 
-import com.graphhopper.jsprit.core.problem.SizeDimension;
+import java.util.Collection;
+
 import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverShipmentDEPRECATED;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivityNEW;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivityNEW;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupShipmentDEPRECATED;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindowsImpl;
 
-import java.util.Collection;
-
 
 /**
  * Shipment is an implementation of Job and consists of a pickup and a delivery
@@ -60,7 +62,7 @@
      * @author schroeder
      */
     public static abstract class BuilderBase<T extends Shipment, B extends BuilderBase<T, B>>
-        extends JobBuilder<T, B> {
+    extends JobBuilder<T, B> {
 
         private double pickupServiceTime = 0.0;
 
@@ -299,22 +301,30 @@ protected Shipment createInstance() {
     protected void createActivities(JobBuilder<?, ?> builder) {
         Builder shipmentBuilder = (Builder) builder;
         JobActivityList list = new SequentialJobActivityList(this);
-        // TODO - Balage1551
-        //      list.addActivity(new PickupActivityNEW(this, "pickup", getPickupLocation(), getPickupServiceTime(), getSize()));
-        //      list.addActivity(new PickupActivityNEW(this, "delivery", getDeliveryLocation(), getDeliveryServiceTime(), getSize()));
-        list.addActivity(new PickupShipmentDEPRECATED(this, shipmentBuilder));
-        list.addActivity(new DeliverShipmentDEPRECATED(this, shipmentBuilder));
+        if (TheBigRedButton.PUSHED) {
+            list.addActivity(new PickupActivityNEW(this, "pickupShipment",
+                            shipmentBuilder.getPickupLocation(),
+                            shipmentBuilder.getPickupServiceTime(), shipmentBuilder.getCapacity(),
+                            shipmentBuilder.getPickupTimeWindows().getTimeWindows()));
+            list.addActivity(new DeliveryActivityNEW(this, "deliverShipment",
+                            shipmentBuilder.getDeliveryLocation(),
+                            shipmentBuilder.getDeliveryServiceTime(), shipmentBuilder.getCapacity(),
+                            shipmentBuilder.getDeliveryTimeWindows().getTimeWindows()));
+        } else {
+            list.addActivity(new PickupShipmentDEPRECATED(this, shipmentBuilder));
+            list.addActivity(new DeliverShipmentDEPRECATED(this, shipmentBuilder));
+        }
         setActivities(list);
     }
 
-    public PickupShipmentDEPRECATED getPickupActivity() {
-        return (PickupShipmentDEPRECATED) getActivityList().findByType(PickupShipmentDEPRECATED.NAME)
-            .get();
+    public PickupActivityNEW getPickupActivity() {
+        return (PickupActivityNEW) getActivityList().findByType(PickupShipmentDEPRECATED.NAME)
+                        .get();
     }
 
-    public DeliverShipmentDEPRECATED getDeliveryActivity() {
-        return (DeliverShipmentDEPRECATED) getActivityList().findByType(DeliverShipmentDEPRECATED.NAME)
-            .get();
+    public DeliveryActivityNEW getDeliveryActivity() {
+        return (DeliveryActivityNEW) getActivityList().findByType(DeliverShipmentDEPRECATED.NAME)
+                        .get();
     }
 
     // =================== DEPRECATED GETTERS
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/TheBigRedButton.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/TheBigRedButton.java
new file mode 100644
index 000000000..9c2d0284a
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/TheBigRedButton.java
@@ -0,0 +1,5 @@
+package com.graphhopper.jsprit.core.problem.job;
+
+public class TheBigRedButton {
+    public static boolean PUSHED = false;
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliveryActivityNEW.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliveryActivityNEW.java
index 5d471942e..172f179f5 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliveryActivityNEW.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliveryActivityNEW.java
@@ -17,17 +17,18 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import com.graphhopper.jsprit.core.problem.SizeDimension;
+import java.util.Collection;
+
 import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.job.AbstractJob;
-
-import java.util.Collection;
+import com.graphhopper.jsprit.core.problem.job.Service;
 
 public class DeliveryActivityNEW extends JobActivity {
 
 
     public DeliveryActivityNEW(AbstractJob job, String name, Location location,
-                               double operationTime, SizeDimension capacity, Collection<TimeWindow> timeWindows) {
+                    double operationTime, SizeDimension capacity, Collection<TimeWindow> timeWindows) {
         super(job, name, location, operationTime, capacity, timeWindows);
     }
 
@@ -35,4 +36,12 @@ public DeliveryActivityNEW(DeliveryActivityNEW sourceActivity) {
         super(sourceActivity);
     }
 
+    public DeliveryActivityNEW(AbstractJob service,
+                    Service.BuilderBase<? extends Service, ?> serviceBuilder) {
+        this(service, serviceBuilder.getType(), serviceBuilder.getLocation(),
+                        serviceBuilder.getServiceTime(),
+                        serviceBuilder.getCapacity(),
+                        serviceBuilder.getTimeWindows().getTimeWindows());
+    }
+
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupActivityNEW.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupActivityNEW.java
index 46450ada7..1e8c36324 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupActivityNEW.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupActivityNEW.java
@@ -17,16 +17,17 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import com.graphhopper.jsprit.core.problem.SizeDimension;
+import java.util.Collection;
+
 import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.job.AbstractJob;
-
-import java.util.Collection;
+import com.graphhopper.jsprit.core.problem.job.Service;
 
 public class PickupActivityNEW extends JobActivity {
 
     public PickupActivityNEW(AbstractJob job, String name, Location location, double operationTime,
-                             SizeDimension capacity, Collection<TimeWindow> timeWindows) {
+                    SizeDimension capacity, Collection<TimeWindow> timeWindows) {
         super(job, name, location, operationTime, capacity, timeWindows);
     }
 
@@ -34,5 +35,12 @@ public PickupActivityNEW(PickupActivityNEW sourceActivity) {
         super(sourceActivity);
     }
 
+    public PickupActivityNEW(AbstractJob service,
+                    Service.BuilderBase<? extends Service, ?> serviceBuilder) {
+        this(service, serviceBuilder.getType(), serviceBuilder.getLocation(),
+                        serviceBuilder.getServiceTime(),
+                        serviceBuilder.getCapacity(),
+                        serviceBuilder.getTimeWindows().getTimeWindows());
+    }
 
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupServiceDEPRECATED.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupServiceDEPRECATED.java
index 05c51f487..e9688333f 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupServiceDEPRECATED.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupServiceDEPRECATED.java
@@ -22,11 +22,11 @@
 public final class PickupServiceDEPRECATED extends PickupActivityNEW {
 
     public PickupServiceDEPRECATED(Service service,
-                                   Service.BuilderBase<? extends Service, ?> builder) {
+                    Service.BuilderBase<? extends Service, ?> builder) {
         super(service, builder.getType(), builder.getLocation(),
-            builder.getServiceTime(),
-            builder.getCapacity(),
-            builder.getTimeWindows().getTimeWindows());
+                        builder.getServiceTime(),
+                        builder.getCapacity(),
+                        builder.getTimeWindows().getTimeWindows());
     }
 
 
@@ -37,7 +37,7 @@ public PickupServiceDEPRECATED(PickupServiceDEPRECATED sourceActivity) {
     @Deprecated
     public PickupServiceDEPRECATED(Service service) {
         super(service, service.getType(), service.getLocation(), service.getServiceDuration(),
-            service.getSize(), service.getServiceTimeWindows());
+                        service.getSize(), service.getServiceTimeWindows());
     }
 
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivityNEW.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivityNEW.java
index 918519e83..79bfe15df 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivityNEW.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivityNEW.java
@@ -17,28 +17,37 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import com.graphhopper.jsprit.core.problem.SizeDimension;
+import java.util.Collection;
+
 import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.job.AbstractJob;
 import com.graphhopper.jsprit.core.problem.job.Service;
 
-import java.util.Collection;
-
 public class ServiceActivityNEW extends JobActivity {
 
     public ServiceActivityNEW(AbstractJob job, String name, Location location, double operationTime,
-                              SizeDimension capacity, Collection<TimeWindow> timeWindows) {
+                    SizeDimension capacity, Collection<TimeWindow> timeWindows) {
         super(job, name, location, operationTime, capacity, timeWindows);
     }
 
+
     public ServiceActivityNEW(ServiceActivityNEW sourceActivity) {
         super(sourceActivity);
     }
 
+    public ServiceActivityNEW(Service service,
+                    Service.BuilderBase<? extends Service, ?> serviceBuilder) {
+        this(service, serviceBuilder.getType(), serviceBuilder.getLocation(),
+                        serviceBuilder.getServiceTime(),
+                        serviceBuilder.getCapacity(),
+                        serviceBuilder.getTimeWindows().getTimeWindows());
+    }
+
     // NOTE: Only for testing purposes
     public static ServiceActivityNEW newInstance(Service service) {
         return new ServiceActivityNEW(service, service.getName(), service.getLocation(),
-            service.getServiceDuration(), service.getSize(), service.getTimeWindows());
+                        service.getServiceDuration(), service.getSize(), service.getTimeWindows());
     }
 
 }
