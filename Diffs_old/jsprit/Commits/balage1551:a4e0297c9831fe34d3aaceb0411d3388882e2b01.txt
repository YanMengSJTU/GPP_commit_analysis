diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionCalculator.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionCalculator.java
index c15e1b99b..2a0118a39 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionCalculator.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionCalculator.java
@@ -17,8 +17,18 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
-import com.graphhopper.jsprit.core.problem.JobActivityFactory;
-import com.graphhopper.jsprit.core.problem.constraint.*;
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.List;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import com.graphhopper.jsprit.core.problem.constraint.ConstraintManager;
+import com.graphhopper.jsprit.core.problem.constraint.HardActivityConstraint;
+import com.graphhopper.jsprit.core.problem.constraint.HardRouteConstraint;
+import com.graphhopper.jsprit.core.problem.constraint.SoftActivityConstraint;
+import com.graphhopper.jsprit.core.problem.constraint.SoftRouteConstraint;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingActivityCosts;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingTransportCosts;
 import com.graphhopper.jsprit.core.problem.driver.Driver;
@@ -26,15 +36,12 @@
 import com.graphhopper.jsprit.core.problem.misc.ActivityContext;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.*;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.End;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.Start;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Collections;
-import java.util.List;
 
 
 final class GeneralJobInsertionCalculator implements JobInsertionCostsCalculator {
@@ -55,8 +62,6 @@
 
     private VehicleRoutingActivityCosts activityCosts;
 
-    private JobActivityFactory activityFactory;
-
     private AdditionalAccessEgressCalculator additionalAccessEgressCalculator;
 
     public GeneralJobInsertionCalculator(VehicleRoutingTransportCosts routingCosts, VehicleRoutingActivityCosts activityCosts, ActivityInsertionCostsCalculator activityInsertionCostsCalculator, ConstraintManager constraintManager) {
@@ -72,10 +77,6 @@ public GeneralJobInsertionCalculator(VehicleRoutingTransportCosts routingCosts,
         logger.debug("initialise {}", this);
     }
 
-    public void setJobActivityFactory(JobActivityFactory activityFactory) {
-        this.activityFactory = activityFactory;
-    }
-
     @Override
     public String toString() {
         return "[name=calculatesServiceInsertion]";
@@ -112,11 +113,14 @@ public InsertionData getInsertionData(final VehicleRoute currentRoute, final Job
         newRoute.add(end);
 
         List<InsertionData> bestData = calculateInsertionCosts(insertionContext,1,actList,newRoute,additionalICostsAtRouteLevel, newVehicleDepartureTime);
-        if(bestData.isEmpty()) return InsertionData.createEmptyInsertionData();
-        else{
+        if(bestData.isEmpty()) {
+            return InsertionData.createEmptyInsertionData();
+        } else{
             InsertionData best = InsertionData.createEmptyInsertionData();
             for(InsertionData iD : bestData){
-                if(iD.getInsertionCost() < best.getInsertionCost()) best = iD;
+                if(iD.getInsertionCost() < best.getInsertionCost()) {
+                    best = iD;
+                }
             }
             return best;
         }
@@ -128,7 +132,9 @@ public InsertionData getInsertionData(final VehicleRoute currentRoute, final Job
         TourActivity prevAct = newRoute.get(index-1);
         for(int i=index;i<newRoute.size();i++) {
             JobActivity jobActivity = actList.get(0);
-            if(jobActivity.getTimeWindows().isEmpty()) throw new IllegalStateException("at least a single time window must be set");
+            if(jobActivity.getTimeWindows().isEmpty()) {
+                throw new IllegalStateException("at least a single time window must be set");
+            }
             for(TimeWindow timeWindow : jobActivity.getTimeWindows()) {
                 JobActivity copiedJobActivity = (JobActivity) jobActivity.duplicate();
                 copiedJobActivity.setTheoreticalEarliestOperationStartTime(timeWindow.getStart());
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionWithServicesTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionWithServicesTest.java
index cfdd240be..d5820f773 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionWithServicesTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionWithServicesTest.java
@@ -17,10 +17,21 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
+import static org.junit.Assert.assertEquals;
+import static org.mockito.Mockito.mock;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collection;
+import java.util.HashMap;
+import java.util.Map;
+
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
 import com.graphhopper.jsprit.core.distance.EuclideanDistanceCalculator;
 import com.graphhopper.jsprit.core.distance.ManhattanDistanceCalculator;
-import com.graphhopper.jsprit.core.problem.CopyJobActivityFactory;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.constraint.ConstraintManager;
@@ -40,13 +51,6 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.util.Coordinate;
 import com.graphhopper.jsprit.core.util.Locations;
-import org.junit.Before;
-import org.junit.Test;
-
-import java.util.*;
-
-import static org.junit.Assert.assertEquals;
-import static org.mockito.Mockito.mock;
 
 
 public class GeneralJobInsertionWithServicesTest {
@@ -129,7 +133,6 @@ public double getTransportCost(Location from, Location to, double departureTime,
         VehicleRoutingActivityCosts actCosts = mock(VehicleRoutingActivityCosts.class);
 
         jobInsertion = new GeneralJobInsertionCalculator(costs, vrp.getActivityCosts(), new LocalActivityInsertionCostsCalculator(costs, actCosts, states), cManager);
-        jobInsertion.setJobActivityFactory(new CopyJobActivityFactory());
     }
 
     @Test
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionWithShipmentsTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionWithShipmentsTest.java
index 04946c6bd..86d65e3c7 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionWithShipmentsTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/GeneralJobInsertionWithShipmentsTest.java
@@ -17,8 +17,18 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertTrue;
+import static org.mockito.Mockito.mock;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
+
+import org.junit.Before;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
-import com.graphhopper.jsprit.core.problem.JobActivityFactory;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.constraint.ConstraintManager;
@@ -30,28 +40,19 @@
 import com.graphhopper.jsprit.core.problem.driver.Driver;
 import com.graphhopper.jsprit.core.problem.driver.DriverImpl;
 import com.graphhopper.jsprit.core.problem.job.Pickup;
-import com.graphhopper.jsprit.core.problem.job.Service;
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.*;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverShipmentDEPRECATED;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupShipmentDEPRECATED;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.state.RouteAndActivityStateGetter;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.util.CostFactory;
-import org.junit.Before;
-import org.junit.Test;
-
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.List;
-
-import static org.junit.Assert.assertEquals;
-import static org.junit.Assert.assertTrue;
-import static org.mockito.Mockito.mock;
-import static org.mockito.Mockito.when;
 
 
 public class GeneralJobInsertionWithShipmentsTest {
@@ -109,12 +110,6 @@ private void createInsertionCalculator(HardRouteConstraint hardRouteLevelConstra
     public void whenCalculatingInsertionCostsOfShipment_itShouldReturnCorrectCostValue() {
         Shipment shipment = Shipment.Builder.newInstance("s").addSizeDimension(0, 1).setPickupLocation(Location.Builder.newInstance().setId("0,10").build()).setDeliveryLocation(Location.newInstance("10,0")).build();
         VehicleRoute route = VehicleRoute.emptyRoute();
-        JobActivityFactory activityFactory = mock(JobActivityFactory.class);
-        List<JobActivity> activities = new ArrayList<>();
-        activities.add(new PickupShipmentDEPRECATED(shipment));
-        activities.add(new DeliverShipmentDEPRECATED(shipment));
-        when(activityFactory.createActivities(shipment)).thenReturn(activities);
-        insertionCalculator.setJobActivityFactory(activityFactory);
         InsertionData iData = insertionCalculator.getInsertionData(route, shipment, vehicle, 0.0, null, Double.MAX_VALUE);
         assertEquals(40.0, iData.getInsertionCost(), 0.05);
     }
@@ -128,13 +123,6 @@ public void whenCalculatingInsertionIntoExistingRoute_itShouldReturnCorrectCosts
         route.setVehicleAndDepartureTime(vehicle,0);
         add(tourActivities,route,0,0);
 
-        JobActivityFactory activityFactory = mock(JobActivityFactory.class);
-        List<JobActivity> activities = new ArrayList<>();
-        activities.add(new PickupShipmentDEPRECATED(shipment2));
-        activities.add(new DeliverShipmentDEPRECATED(shipment2));
-        when(activityFactory.createActivities(shipment2)).thenReturn(activities);
-        insertionCalculator.setJobActivityFactory(activityFactory);
-
         InsertionData iData = insertionCalculator.getInsertionData(route, shipment2, vehicle, 0.0, null, Double.MAX_VALUE);
         assertEquals(0.0, iData.getInsertionCost(), 0.05);
         assertEquals(1, iData.getUnmodifiableEventsByType(InsertActivity.class).get(1).getIndex());
@@ -161,13 +149,6 @@ public void whenInsertingShipmentInRouteWithNotEnoughCapacity_itShouldReturnNoIn
 
         createInsertionCalculator(insertionContext -> false);
 
-        JobActivityFactory activityFactory = mock(JobActivityFactory.class);
-        List<JobActivity> activities = new ArrayList<JobActivity>();
-        activities.add(new PickupShipmentDEPRECATED(shipment2));
-        activities.add(new DeliverShipmentDEPRECATED(shipment2));
-        when(activityFactory.createActivities(shipment2)).thenReturn(activities);
-        insertionCalculator.setJobActivityFactory(activityFactory);
-
         InsertionData iData = insertionCalculator.getInsertionData(route, shipment2, vehicle, 0.0, null, Double.MAX_VALUE);
         assertEquals(InsertionData.createEmptyInsertionData(), iData);
 
@@ -188,13 +169,6 @@ public void whenInsertingThirdShipment_itShouldCalcCorrectVal() {
         add(shipmentActivities,route,0,0);
         add(shipment2Activities,route,1,2);
 
-        JobActivityFactory activityFactory = mock(JobActivityFactory.class);
-        List<JobActivity> activities = new ArrayList<>();
-        activities.add(new PickupShipmentDEPRECATED(shipment3));
-        activities.add(new DeliverShipmentDEPRECATED(shipment3));
-        when(activityFactory.createActivities(shipment3)).thenReturn(activities);
-        insertionCalculator.setJobActivityFactory(activityFactory);
-
         InsertionData iData = insertionCalculator.getInsertionData(route, shipment3, vehicle, 0.0, null, Double.MAX_VALUE);
         assertEquals(0.0, iData.getInsertionCost(), 0.05);
         List<InsertActivity> unmodifiableEventsByType = iData.getUnmodifiableEventsByType(InsertActivity.class);
@@ -215,14 +189,6 @@ public void whenInsertingThirdShipment_itShouldCalcCorrectVal2() {
         add(shipmentActivities,route,0,0);
         add(shipment2Activities,route,1,2);
 
-        JobActivityFactory activityFactory = mock(JobActivityFactory.class);
-        List<JobActivity> activities = new ArrayList<>();
-        activities.add(new PickupShipmentDEPRECATED(shipment3));
-        activities.add(new DeliverShipmentDEPRECATED(shipment3));
-        when(activityFactory.createActivities(shipment3)).thenReturn(activities);
-        insertionCalculator.setJobActivityFactory(activityFactory);
-
-
         InsertionData iData = insertionCalculator.getInsertionData(route, shipment3, vehicle, 0.0, null, Double.MAX_VALUE);
         assertEquals(2.0, iData.getInsertionCost(), 0.05);
         assertEquals(0, iData.getUnmodifiableEventsByType(InsertActivity.class).get(1).getIndex());
@@ -253,7 +219,6 @@ public void whenInstertingShipmentWithLoadConstraintWhereCapIsNotSufficient_capC
         constraintManager.addConstraint(new ShipmentPickupsFirstConstraint(), ConstraintManager.Priority.CRITICAL);
 
         insertionCalculator = new GeneralJobInsertionCalculator(routingCosts, activityCosts, activityInsertionCostsCalculator, constraintManager);
-        insertionCalculator.setJobActivityFactory(vrp.getJobActivityFactory());
 
         InsertionData iData = insertionCalculator.getInsertionData(route, shipment3, vehicle, 0.0, DriverImpl.noDriver(), Double.MAX_VALUE);
         assertTrue(iData instanceof InsertionData.NoInsertionFound);
@@ -287,12 +252,6 @@ public void whenInsertingServiceWhileNoCapIsAvailable_itMustReturnNoInsertionDat
         //		Service service = new Service.Builder("pick", 1).setLocationId("5,5").build();
         Pickup service = new Pickup.Builder("pick").addSizeDimension(0, 1).setLocation(Location.newInstance("5,5")).build();
 
-        JobActivityFactory activityFactory = mock(JobActivityFactory.class);
-        List<JobActivity> activities = new ArrayList<>();
-        activities.add(new PickupServiceDEPRECATED(service));
-        when(activityFactory.createActivities(service)).thenReturn(activities);
-        insertionCalculator.setJobActivityFactory(activityFactory);
-
         InsertionData iData = insertionCalculator.getInsertionData(route, service, vehicle, 0, DriverImpl.noDriver(), Double.MAX_VALUE);
         //		routeActVisitor.visit(route);
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/testutils/NewActivityFactory.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/testutils/NewActivityFactory.java
new file mode 100644
index 000000000..70bc9f223
--- /dev/null
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/testutils/NewActivityFactory.java
@@ -0,0 +1,8 @@
+package com.graphhopper.jsprit.core.testutils;
+
+public class NewActivityFactory {
+
+    private NewActivityFactory() {
+    }
+
+}
