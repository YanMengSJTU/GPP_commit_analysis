diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/DefaultScorer.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/DefaultScorer.java
index 5c6926a4f..c48264e90 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/DefaultScorer.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/DefaultScorer.java
@@ -60,7 +60,7 @@ public double score(InsertionData best, Job job) {
                 .max()
                 .orElse(0d);
         double maxDepotDistance = Math.max(maxFromStart, maxToEnd);
-        double minTimeToOperate = job.getOperationTimeWindows().stream()
+        double minTimeToOperate = job.getTimeWindows().stream()
                 .mapToDouble(tw -> tw.getEnd() - tw.getStart())
                 .min()
                 .orElse(0d);
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/Inserter.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/Inserter.java
index 7f12f6b90..f4a17c0df 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/Inserter.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/Inserter.java
@@ -23,15 +23,18 @@
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.InsertionListeners;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
+import com.graphhopper.jsprit.core.problem.job.Service;
+import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.DefaultTourActivityFactory;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 
 class Inserter {
 
     private abstract class JobInsertionHandler {
 
-        private JobInsertionHandler delegator = new JobExceptionHandler();
+        private JobInsertionHandler delegator = null;
 
         public abstract void handleJobInsertion(Job job, InsertionData iData, VehicleRoute route);
 
@@ -41,7 +44,9 @@ public JobInsertionHandler withNextHandler(JobInsertionHandler handler) {
         }
 
         protected void delegate(Job job, InsertionData iData, VehicleRoute route) {
-            delegator.handleJobInsertion(job, iData, route);
+            if (delegator != null) {
+                delegator.handleJobInsertion(job, iData, route);
+            }
         }
     }
 
@@ -76,57 +81,60 @@ public void handleJobInsertion(Job job, InsertionData iData, VehicleRoute route)
         }
     }
 
-//
-//    private class ServiceInsertionHandler extends JobInsertionHandler {
-//
-//        @Override
-//        public void handleJobInsertion(Job job, InsertionData iData, VehicleRoute route) {
-//            if (job instanceof Service) {
-//                route.setVehicleAndDepartureTime(iData.getSelectedVehicle(), iData.getVehicleDepartureTime());
-//                if (!iData.getSelectedVehicle().isReturnToDepot()) {
-//                    if (iData.getDeliveryInsertionIndex() >= route.getTourActivities().getActivities().size()) {
-//                        setEndLocation(route, (Service) job);
-//                    }
-//                }
-//                TourActivity activity = vehicleRoutingProblem.copyAndGetActivities(job).get(0);
-//                route.getTourActivities().addActivity(iData.getDeliveryInsertionIndex(), activity);
-//            } else {
-//                delegate(job, iData, route);
-//            }
-//        }
-//
-//
-//        private void setEndLocation(VehicleRoute route, Service service) {
-//            route.getEnd().setLocation(service.getLocation());
-//        }
-//    }
-//
-//    private class ShipmentInsertionHandler extends JobInsertionHandler {
-//
-//        @Override
-//        public void handleJobInsertion(Job job, InsertionData iData, VehicleRoute route) {
-//            if (job instanceof Shipment) {
-//                List<JobActivity> acts = job.getActivityList().getAllDuplicated(); // vehicleRoutingProblem.copyAndGetActivities(job);
-//                TourActivity pickupShipment = acts.get(0);
-//                TourActivity deliverShipment = acts.get(1);
-//                route.setVehicleAndDepartureTime(iData.getSelectedVehicle(), iData.getVehicleDepartureTime());
-//                if (!iData.getSelectedVehicle().isReturnToDepot()) {
-//                    if (iData.getDeliveryInsertionIndex() >= route.getActivities().size()) {
-//                        setEndLocation(route, (Shipment) job);
-//                    }
-//                }
-//                route.getTourActivities().addActivity(iData.getDeliveryInsertionIndex(), deliverShipment);
-//                route.getTourActivities().addActivity(iData.getPickupInsertionIndex(), pickupShipment);
-//            } else {
-//                delegate(job, iData, route);
-//            }
-//        }
-//
-//        private void setEndLocation(VehicleRoute route, Shipment shipment) {
-//            route.getEnd().setLocation(shipment.getDeliveryLocation());
-//        }
-//    }
-//
+    private class ServiceInsertionHandler extends JobInsertionHandler {
+
+        @Override
+        public void handleJobInsertion(Job job, InsertionData iData, VehicleRoute route) {
+            if (job instanceof Service) {
+                route.setVehicleAndDepartureTime(iData.getSelectedVehicle(),
+                                iData.getVehicleDepartureTime());
+                if (!iData.getSelectedVehicle().isReturnToDepot()) {
+                    if (iData.getDeliveryInsertionIndex() >= route.getTourActivities()
+                                    .getActivities().size()) {
+                        setEndLocation(route, (Service) job);
+                    }
+                }
+                TourActivity activity = job.getActivityList().getAllDuplicated().get(0);
+                route.getTourActivities().addActivity(iData.getDeliveryInsertionIndex(), activity);
+            } else {
+                delegate(job, iData, route);
+            }
+        }
+
+        private void setEndLocation(VehicleRoute route, Service service) {
+            route.getEnd().setLocation(service.getLocation());
+        }
+    }
+
+    private class ShipmentInsertionHandler extends JobInsertionHandler {
+
+        @Override
+        public void handleJobInsertion(Job job, InsertionData iData, VehicleRoute route) {
+            if (job instanceof Shipment) {
+                List<JobActivity> acts = job.getActivityList().getAllDuplicated(); // vehicleRoutingProblem.copyAndGetActivities(job);
+                TourActivity pickupShipment = acts.get(0);
+                TourActivity deliverShipment = acts.get(1);
+                route.setVehicleAndDepartureTime(iData.getSelectedVehicle(),
+                                iData.getVehicleDepartureTime());
+                if (!iData.getSelectedVehicle().isReturnToDepot()) {
+                    if (iData.getDeliveryInsertionIndex() >= route.getActivities().size()) {
+                        setEndLocation(route, (Shipment) job);
+                    }
+                }
+                route.getTourActivities().addActivity(iData.getDeliveryInsertionIndex(),
+                                deliverShipment);
+                route.getTourActivities().addActivity(iData.getPickupInsertionIndex(),
+                                pickupShipment);
+            } else {
+                delegate(job, iData, route);
+            }
+        }
+
+        private void setEndLocation(VehicleRoute route, Shipment shipment) {
+            route.getEnd().setLocation(shipment.getDeliveryLocation());
+        }
+    }
+
     private InsertionListeners insertionListeners;
 
     private JobInsertionHandler jobInsertionHandler;
@@ -138,12 +146,13 @@ public Inserter(InsertionListeners insertionListeners, VehicleRoutingProblem veh
         new DefaultTourActivityFactory();
 
         // Balage1551 - The new, unified handler
-        jobInsertionHandler = new UnifiedInsertionHandler();
+        // There is a problem: how to handle uniformly insertation indexes for
+        // multiple activities
+        // jobInsertionHandler = new UnifiedInsertionHandler();
 
         //The old ones:
-//        jobInsertionHandler = new ServiceInsertionHandler()
-//                .withNextHandler(new ShipmentInsertionHandler()
-//                        .withNextHandler(new JobExceptionHandler()));
+        jobInsertionHandler = new ServiceInsertionHandler().withNextHandler(
+                        new ShipmentInsertionHandler().withNextHandler(new JobExceptionHandler()));
     }
 
     public void insertJob(Job job, InsertionData insertionData, VehicleRoute vehicleRoute) {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/ShipmentInsertionCalculator.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/ShipmentInsertionCalculator.java
index 6c0c551c3..e30db03aa 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/ShipmentInsertionCalculator.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/ShipmentInsertionCalculator.java
@@ -69,11 +69,11 @@
     public ShipmentInsertionCalculator(VehicleRoutingTransportCosts routingCosts, VehicleRoutingActivityCosts activityCosts, ActivityInsertionCostsCalculator activityInsertionCostsCalculator, ConstraintManager constraintManager) {
         super();
         this.activityInsertionCostsCalculator = activityInsertionCostsCalculator;
-        this.hardRouteLevelConstraint = constraintManager;
-        this.hardActivityLevelConstraint = constraintManager;
-        this.softActivityConstraint = constraintManager;
-        this.softRouteConstraint = constraintManager;
-        this.transportCosts = routingCosts;
+        hardRouteLevelConstraint = constraintManager;
+        hardActivityLevelConstraint = constraintManager;
+        softActivityConstraint = constraintManager;
+        softRouteConstraint = constraintManager;
+        transportCosts = routingCosts;
         this.activityCosts = activityCosts;
         additionalAccessEgressCalculator = new AdditionalAccessEgressCalculator(routingCosts);
         logger.debug("initialise {}", this);
@@ -96,8 +96,12 @@ public String toString() {
     public InsertionData getInsertionData(final VehicleRoute currentRoute, final Job jobToInsert, final Vehicle newVehicle, double newVehicleDepartureTime, final Driver newDriver, final double bestKnownCosts) {
         JobInsertionContext insertionContext = new JobInsertionContext(currentRoute, jobToInsert, newVehicle, newDriver, newVehicleDepartureTime);
         Shipment shipment = (Shipment) jobToInsert;
-        TourActivity pickupShipment = activityFactory.createActivities(shipment).get(0);
-        TourActivity deliverShipment = activityFactory.createActivities(shipment).get(1);
+        // TourActivity pickupShipment =
+        // activityFactory.createActivities(shipment).get(0);
+        // TourActivity deliverShipment =
+        // activityFactory.createActivities(shipment).get(1);
+        TourActivity pickupShipment = shipment.getActivityList().getAll().get(0);
+        TourActivity deliverShipment = shipment.getActivityList().getAll().get(1);
         insertionContext.getAssociatedActivities().add(pickupShipment);
         insertionContext.getAssociatedActivities().add(deliverShipment);
 
@@ -177,9 +181,9 @@ else if (pickupShipmentConstraintStatus.equals(ConstraintsStatus.FULFILLED)) {
 
                 double prevActEndTime_deliveryLoop = shipmentPickupEndTime;
 
-			/*
+                /*
             --------------------------------
-			 */
+                 */
                 //deliverShipmentLoop
                 int j = i;
                 boolean tourEnd_deliveryLoop = false;
@@ -204,7 +208,7 @@ else if (pickupShipmentConstraintStatus.equals(ConstraintsStatus.FULFILLED)) {
                             double additionalDeliveryICosts = softActivityConstraint.getCosts(insertionContext, prevAct_deliveryLoop, deliverShipment, nextAct_deliveryLoop, prevActEndTime_deliveryLoop);
                             double deliveryAIC = calculate(insertionContext, prevAct_deliveryLoop, deliverShipment, nextAct_deliveryLoop, prevActEndTime_deliveryLoop);
                             double totalActivityInsertionCosts = pickupAIC + deliveryAIC
-                                + additionalICostsAtRouteLevel + additionalPickupICosts + additionalDeliveryICosts;
+                                            + additionalICostsAtRouteLevel + additionalPickupICosts + additionalDeliveryICosts;
                             if (totalActivityInsertionCosts < bestCost) {
                                 bestCost = totalActivityInsertionCosts;
                                 pickupInsertionIndex = i;
@@ -217,7 +221,9 @@ else if (pickupShipmentConstraintStatus.equals(ConstraintsStatus.FULFILLED)) {
                             deliveryInsertionNotFulfilledBreak = false;
                         }
                     }
-                    if (deliveryInsertionNotFulfilledBreak) break;
+                    if (deliveryInsertionNotFulfilledBreak) {
+                        break;
+                    }
                     //update prevAct and endTime
                     double nextActArrTime = prevActEndTime_deliveryLoop + transportCosts.getTransportTime(prevAct_deliveryLoop.getLocation(), nextAct_deliveryLoop.getLocation(), prevActEndTime_deliveryLoop, newDriver, newVehicle);
                     prevActEndTime_deliveryLoop = Math.max(nextActArrTime, nextAct_deliveryLoop.getTheoreticalEarliestOperationStartTime()) + activityCosts.getActivityDuration(nextAct_deliveryLoop,nextActArrTime,newDriver,newVehicle);
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/PickupAndDeliverShipmentLoadActivityLevelConstraint.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/PickupAndDeliverShipmentLoadActivityLevelConstraint.java
index 6d995398b..7ef727062 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/PickupAndDeliverShipmentLoadActivityLevelConstraint.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/PickupAndDeliverShipmentLoadActivityLevelConstraint.java
@@ -55,6 +55,29 @@ public PickupAndDeliverShipmentLoadActivityLevelConstraint(RouteAndActivityState
         defaultValue = Capacity.Builder.newInstance().build();
     }
 
+    // private String visualize(JobInsertionContext iFacts, TourActivity
+    // prevAct, TourActivity newAct,
+    // TourActivity nextAct) {
+    // System.out.println(prevAct);
+    // System.out.println(newAct);
+    // System.out.println(nextAct);
+    // StringBuilder sb = new StringBuilder();
+    // for (TourActivity a : iFacts.getRoute().getActivities()) {
+    // if (a.equals(nextAct)) {
+    // if (sb.length() != 0) {
+    // sb.append(" -> ");
+    // }
+    // sb.append("[").append(newAct.getName()).append("]");
+    // }
+    // if (sb.length() != 0) {
+    // sb.append(" -> ");
+    // }
+    // sb.append(a.getName());
+    // }
+    //
+    // return sb.toString();
+    // }
+
     /**
      * Checks whether there is enough capacity to insert newAct between prevAct and nextAct.
      */
@@ -63,6 +86,7 @@ public ConstraintsStatus fulfilled(JobInsertionContext iFacts, TourActivity prev
         if (!(newAct instanceof PickupShipmentDEPRECATED) && !(newAct instanceof DeliverShipmentDEPRECATED)) {
             return ConstraintsStatus.FULFILLED;
         }
+        // System.out.println(visualize(iFacts, prevAct, newAct, nextAct));
         Capacity loadAtPrevAct;
         if (prevAct instanceof Start) {
             loadAtPrevAct = stateManager.getRouteState(iFacts.getRoute(), InternalStates.LOAD_AT_BEGINNING, Capacity.class);
@@ -76,12 +100,14 @@ public ConstraintsStatus fulfilled(JobInsertionContext iFacts, TourActivity prev
             }
         }
         if (newAct instanceof PickupShipmentDEPRECATED) {
-            if (!Capacity.addup(loadAtPrevAct, newAct.getSize()).isLessOrEqual(iFacts.getNewVehicle().getType().getCapacityDimensions())) {
+            Capacity newCapacity = Capacity.addup(loadAtPrevAct, newAct.getSize());
+            if (!newCapacity.isLessOrEqual(iFacts.getNewVehicle().getType().getCapacityDimensions())) {
                 return ConstraintsStatus.NOT_FULFILLED;
             }
         }
         if (newAct instanceof DeliverShipmentDEPRECATED) {
-            if (!Capacity.addup(loadAtPrevAct, Capacity.invert(newAct.getSize())).isLessOrEqual(iFacts.getNewVehicle().getType().getCapacityDimensions())) {
+            Capacity newCapacity = Capacity.addup(loadAtPrevAct, Capacity.invert(newAct.getSize()));
+            if (!newCapacity.isLessOrEqual(iFacts.getNewVehicle().getType().getCapacityDimensions())) {
                 return ConstraintsStatus.NOT_FULFILLED_BREAK;
             }
         }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractJob.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractJob.java
index 7c7a6e44d..baff060b4 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractJob.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractJob.java
@@ -19,6 +19,7 @@
 package com.graphhopper.jsprit.core.problem.job;
 
 import java.util.ArrayList;
+import java.util.Collection;
 import java.util.HashSet;
 import java.util.List;
 import java.util.Set;
@@ -33,11 +34,11 @@
 
     private int index;
 
-    protected List<Location> allLocations = new ArrayList<>();
+    protected List<Location> allLocations;
 
     private JobActivityList activityList;
 
-    protected Set<TimeWindow> operationTimeWindows = new HashSet<>();
+    protected Set<TimeWindow> allTimeWindows;
 
     public AbstractJob() {
         super();
@@ -53,7 +54,7 @@ public void setIndex(int index) {
         this.index = index;
     }
 
-    protected void addLocation(Location location) {
+    private void addLocation(Location location) {
         if (location != null) {
             allLocations.add(location);
         }
@@ -64,14 +65,35 @@ protected void addLocation(Location location) {
         return allLocations;
     }
 
-    protected abstract void addLocations();
+    protected void prepareCaches() {
+        allLocations = new ArrayList<>();
+        allTimeWindows = new HashSet<>();
+        activityList.getAll().stream().forEach(ja -> {
+            addLocation(ja.getLocation());
+            addTimeWindows(ja.getTimeWindows());
+        });
+    }
 
-    protected abstract void createActivities();
+    private void addTimeWindows(Collection<TimeWindow> timeWindows) {
+        if (timeWindows != null && !timeWindows.isEmpty()) {
+            allTimeWindows.addAll(timeWindows);
+        }
+    }
 
-    protected abstract void addOperationTimeWindows();
+    /**
+     * Creates the activities.
+     *
+     * <p>
+     * This functions contract specifies that the implementation has to call
+     * {@linkplain #prepareCaches()} function at the end, after all activities
+     * are added.
+     * </p>
+     */
+    protected abstract void createActivities();
 
     protected void setActivities(JobActivityList list) {
         activityList = list;
+        prepareCaches();
     }
 
     @Override
@@ -80,8 +102,10 @@ public JobActivityList getActivityList() {
     }
 
 
-    public Set<TimeWindow> getOperationTimeWindows() {
-        return operationTimeWindows;
+    @Override
+    public Set<TimeWindow> getTimeWindows() {
+        return allTimeWindows;
     }
 
 }
+
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Break.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Break.java
index b8c15de15..317963310 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Break.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Break.java
@@ -73,6 +73,7 @@ protected void createActivities() {
         setActivities(list);
     }
 
+
     public boolean hasVariableLocation() {
         return variableLocation;
     }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Job.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Job.java
index 4f8d345ee..92b682102 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Job.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Job.java
@@ -94,6 +94,6 @@
     /**
      * @return All operation time windows
      */
-    public Set<TimeWindow> getOperationTimeWindows();
+    public Set<TimeWindow> getTimeWindows();
 
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java
index 6a7cce46d..e78f58643 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java
@@ -24,7 +24,6 @@
 import com.graphhopper.jsprit.core.problem.Skills;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupServiceDEPRECATED;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindows;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindowsImpl;
 import com.graphhopper.jsprit.core.util.Coordinate;
 
@@ -249,10 +248,7 @@ public B setPriority(int priority) {
         }
 
         protected <T extends Service> void postProcess(T service) {
-            // initiate caches
-            service.addLocations();
             service.createActivities();
-            service.addOperationTimeWindows();
         }
     }
 
@@ -302,7 +298,7 @@ public Service build() {
 
     private Location location;
 
-    private TimeWindows timeWindowManager;
+    private TimeWindowsImpl timeWindowManager;
 
     private int priority;
 
@@ -319,31 +315,15 @@ public Service build() {
         priority = builder.priority;
     }
 
-
     @Override
     protected void createActivities() {
         JobActivityList list = new SequentialJobActivityList(this);
         // TODO - Balage1551
-//        list.addActivity(new ServiceActivityNEW(this, "service", getLocation(), getServiceDuration(), getSize()));
+        //        list.addActivity(new ServiceActivityNEW(this, "service", getLocation(), getServiceDuration(), getSize()));
         list.addActivity(new PickupServiceDEPRECATED(this));
         setActivities(list);
     }
 
-    @Override
-    protected void addOperationTimeWindows() {
-        operationTimeWindows.add(getTimeWindow());
-    }
-
-
-    @Override
-    protected void addLocations() {
-        addLocation(location);
-    }
-
-    public Collection<TimeWindow> getTimeWindows(){
-        return timeWindowManager.getTimeWindows();
-    }
-
     @Override
     public String getId() {
         return id;
@@ -379,6 +359,10 @@ public TimeWindow getTimeWindow() {
         return timeWindowManager.getTimeWindows().iterator().next();
     }
 
+    public Collection<TimeWindow> getServiceTimeWindows() {
+        return timeWindowManager.getTimeWindows();
+    }
+
     /**
      * @return the name
      */
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java
index be7f420da..f2fad1bb6 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java
@@ -363,10 +363,7 @@ protected void preProcess() {
         }
 
         protected <T extends Shipment> void postProcess(T shipment) {
-            // initiate caches
-            shipment.addLocations();
             shipment.createActivities();
-            shipment.addOperationTimeWindows();
         }
 
     }
@@ -418,18 +415,6 @@ protected void createActivities() {
         setActivities(list);
     }
 
-    @Override
-    protected void addOperationTimeWindows() {
-        operationTimeWindows.add(getPickupTimeWindow());
-        operationTimeWindows.add(getDeliveryTimeWindow());
-    }
-
-    @Override
-    protected void addLocations() {
-        addLocation(pickupLocation_);
-        addLocation(deliveryLocation_);
-    }
-
     @Override
     public String getId() {
         return id;
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/AbstractActivityNEW.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/AbstractActivityNEW.java
index be7cb45d0..4e2e66ac8 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/AbstractActivityNEW.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/AbstractActivityNEW.java
@@ -16,14 +16,14 @@
     protected double endTime;
     protected double theoreticalEarliest = 0;
     protected double theoreticalLatest = Double.MAX_VALUE;
-    protected String name;
+    protected String type;
     protected Location location;
 
 
-    public AbstractActivityNEW(String name, Location location, Capacity capacity) {
+    public AbstractActivityNEW(String type, Location location, Capacity capacity) {
         super();
         this.capacity = capacity;
-        this.name = name;
+        this.type = type;
         this.location = location;
     }
 
@@ -35,7 +35,7 @@ public AbstractActivityNEW(AbstractActivityNEW sourceActivity) {
         setIndex(sourceActivity.getIndex());
         theoreticalEarliest = sourceActivity.getTheoreticalEarliestOperationStartTime();
         theoreticalLatest = sourceActivity.getTheoreticalLatestOperationStartTime();
-        name = sourceActivity.name;
+        type = sourceActivity.type;
         location = sourceActivity.location;
     }
 
@@ -95,9 +95,14 @@ public Capacity getSize() {
 
     @Override
     public String getName() {
-        return name;
+        return getType();
     }
 
+    public String getType() {
+        return type;
+    }
+
+
     @Override
     public Location getLocation() {
         return location;
@@ -105,22 +110,23 @@ public Location getLocation() {
 
     @Override
     public String toString() {
-        return "[type=" + getName() + "][locationId=" + getLocation().getId()
-                + "][size=" + getSize().toString()
-                + "][twStart=" + Activities.round(getTheoreticalEarliestOperationStartTime())
-                + "][twEnd=" + Activities.round(getTheoreticalLatestOperationStartTime()) + "]";
+        return "[name=" + getName() + "][locationId=" + getLocation().getId()
+                        + "][size=" + getSize().toString()
+                        + "][twStart=" + Activities.round(getTheoreticalEarliestOperationStartTime())
+                        + "][twEnd=" + Activities.round(getTheoreticalLatestOperationStartTime()) + "]";
     }
 
 
     @Override
     public TourActivity duplicate() {
         // TODO - Balage1551 - It uses safe reflection. But this is reflection which is expensive, so
-        // in case it is a bottlenect, this should be refactored
+        // in case it is a bottleneck, this should be refactored
         try {
             Constructor<? extends AbstractActivityNEW> constructor = getClass().getConstructor(getClass());
             return constructor.newInstance(this);
         } catch (NoSuchMethodException | SecurityException | InstantiationException | IllegalAccessException | IllegalArgumentException
-                | InvocationTargetException e) {
+                        | InvocationTargetException e) {
+            System.out.println(this.getClass().getCanonicalName() + " : " + this);
             throw new IllegalStateException(e);
         }
     }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivity.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivity.java
index 1a779507b..2d9a50b8f 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivity.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivity.java
@@ -23,21 +23,13 @@
 
 public class BreakActivity extends InternalJobActivity {
 
-// REMARK - Balage1551 - What is it is used for?
-//    public static int counter = 0;
-
-// REMARK - Balage1551 - Never used and there is a duplicate implemented in JobActivity, so that could be used.
-//    public static BreakActivity copyOf(BreakActivity breakActivity) {
-//        return new BreakActivity(breakActivity);
-//    }
-
     public static BreakActivity newInstance(Break aBreak) {
         return new BreakActivity(aBreak);
     }
 
     protected BreakActivity(Break aBreak) {
-        super(aBreak, "Break", aBreak.getLocation(), aBreak.getServiceDuration(), Capacity.createNullCapacity(aBreak.getSize()));
-//        counter++;
+        super(aBreak, "Break", aBreak.getLocation(), aBreak.getServiceDuration(),
+                        Capacity.createNullCapacity(aBreak.getSize()), aBreak.getTimeWindows());
     }
 
     public BreakActivity(BreakActivity breakActivity) {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverServiceDEPRECATED.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverServiceDEPRECATED.java
index e1faf440c..4480be0da 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverServiceDEPRECATED.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverServiceDEPRECATED.java
@@ -23,7 +23,8 @@
 public final class DeliverServiceDEPRECATED extends DeliveryActivityNEW {
 
     public DeliverServiceDEPRECATED(Delivery delivery) {
-        super(delivery, delivery.getType(), delivery.getLocation(), delivery.getServiceDuration(), Capacity.invert(delivery.getSize()));
+        super(delivery, delivery.getType(), delivery.getLocation(), delivery.getServiceDuration(),
+                        Capacity.invert(delivery.getSize()), delivery.getServiceTimeWindows());
     }
 
     public DeliverServiceDEPRECATED(DeliverServiceDEPRECATED sourceActivity) {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverShipmentDEPRECATED.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverShipmentDEPRECATED.java
index 0e78fb4f7..3375cbef1 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverShipmentDEPRECATED.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliverShipmentDEPRECATED.java
@@ -23,7 +23,9 @@
 public final class DeliverShipmentDEPRECATED extends DeliveryActivityNEW {
 
     public DeliverShipmentDEPRECATED(Shipment shipment) {
-        super(shipment, "deliverShipment", shipment.getDeliveryLocation(), shipment.getDeliveryServiceTime(), Capacity.invert(shipment.getSize()));
+        super(shipment, "deliverShipment", shipment.getDeliveryLocation(),
+                        shipment.getDeliveryServiceTime(), Capacity.invert(shipment.getSize()),
+                        shipment.getDeliveryTimeWindows());
     }
 
     public DeliverShipmentDEPRECATED(DeliverShipmentDEPRECATED sourceActivity) {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliveryActivityNEW.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliveryActivityNEW.java
index c0ba772ae..41f0c7db5 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliveryActivityNEW.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliveryActivityNEW.java
@@ -17,6 +17,8 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
+import java.util.Collection;
+
 import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.job.AbstractJob;
@@ -24,8 +26,9 @@
 public class DeliveryActivityNEW extends JobActivity {
 
 
-    public DeliveryActivityNEW(AbstractJob job, String name, Location location, double operationTime, Capacity capacity) {
-        super(job, name, location, operationTime, capacity);
+    public DeliveryActivityNEW(AbstractJob job, String name, Location location,
+                    double operationTime, Capacity capacity, Collection<TimeWindow> timeWindows) {
+        super(job, name, location, operationTime, capacity, timeWindows);
     }
 
     public DeliveryActivityNEW(DeliveryActivityNEW sourceActivity) {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ExchangeActivityNEW.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ExchangeActivityNEW.java
index e1e1f4d92..20ea84995 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ExchangeActivityNEW.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ExchangeActivityNEW.java
@@ -17,14 +17,17 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
+import java.util.Collection;
+
 import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.job.AbstractJob;
 
 public class ExchangeActivityNEW extends JobActivity {
 
-    public ExchangeActivityNEW(AbstractJob job, String name, Location location, double operationTime, Capacity capacity) {
-        super(job, name, location, operationTime, capacity);
+    public ExchangeActivityNEW(AbstractJob job, String name, Location location,
+                    double operationTime, Capacity capacity, Collection<TimeWindow> timeWindows) {
+        super(job, name, location, operationTime, capacity, timeWindows);
     }
 
     public ExchangeActivityNEW(ExchangeActivityNEW sourceActivity) {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/InternalJobActivity.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/InternalJobActivity.java
index 18d6384eb..4219594e3 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/InternalJobActivity.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/InternalJobActivity.java
@@ -1,5 +1,7 @@
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
+import java.util.Collection;
+
 import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.job.AbstractJob;
@@ -12,8 +14,9 @@
  */
 public abstract class InternalJobActivity extends JobActivity implements InternalActivityMarker {
 
-    public InternalJobActivity(AbstractJob job, String name, Location location, double operationTime, Capacity capacity) {
-        super(job, name, location, operationTime, capacity);
+    public InternalJobActivity(AbstractJob job, String name, Location location,
+                    double operationTime, Capacity capacity, Collection<TimeWindow> timeWindows) {
+        super(job, name, location, operationTime, capacity, timeWindows);
     }
 
     public InternalJobActivity(JobActivity sourceActivity) {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/JobActivity.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/JobActivity.java
index b0181ec34..d90f7e428 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/JobActivity.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/JobActivity.java
@@ -1,5 +1,8 @@
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
+import java.util.Collection;
+import java.util.HashSet;
+
 import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.job.AbstractJob;
@@ -18,19 +21,26 @@
     private AbstractJob job;
 
     private double operationTime;
-    public JobActivity(AbstractJob job, String name, Location location, double operationTime, Capacity capacity) {
-        super(name, location, capacity);
+
+    private Collection<TimeWindow> timeWindows;
+
+    public JobActivity(AbstractJob job, String type, Location location, double operationTime,
+                    Capacity capacity, Collection<TimeWindow> timeWindows) {
+        super(type, location, capacity);
         this.job = job;
-        this.name = name;
-        this.location = location;
         this.operationTime = operationTime;
-        this.capacity = capacity;
+        this.timeWindows = timeWindows;
     }
 
     protected JobActivity(JobActivity sourceActivity) {
         super(sourceActivity);
         job = sourceActivity.getJob();
         operationTime = sourceActivity.getOperationTime();
+        // REMARK - Balage1551 - Do we need to deep copy time window set? I
+        // guess we don't.
+        if (sourceActivity.timeWindows != null) {
+            timeWindows = new HashSet<>(sourceActivity.timeWindows);
+        }
     }
 
     public AbstractJob getJob() {
@@ -42,6 +52,15 @@ public double getOperationTime() {
         return operationTime;
     }
 
+    @Override
+    public String getName() {
+        return job.getId() + "." + getType();
+    }
+
+    public Collection<TimeWindow> getTimeWindows() {
+        return timeWindows;
+    }
+
     /*
      * (non-Javadoc)
      *
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupActivityNEW.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupActivityNEW.java
index bd00751ab..8cc3a92f7 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupActivityNEW.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupActivityNEW.java
@@ -17,14 +17,17 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
+import java.util.Collection;
+
 import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.job.AbstractJob;
 
 public class PickupActivityNEW extends JobActivity {
 
-    public PickupActivityNEW(AbstractJob job, String name, Location location, double operationTime, Capacity capacity) {
-        super(job, name, location, operationTime, capacity);
+    public PickupActivityNEW(AbstractJob job, String name, Location location, double operationTime,
+                    Capacity capacity, Collection<TimeWindow> timeWindows) {
+        super(job, name, location, operationTime, capacity, timeWindows);
     }
 
     public PickupActivityNEW(PickupActivityNEW sourceActivity) {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupServiceDEPRECATED.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupServiceDEPRECATED.java
index 8e8cf21e2..4cd852970 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupServiceDEPRECATED.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupServiceDEPRECATED.java
@@ -23,11 +23,11 @@
 
 
     public PickupServiceDEPRECATED(Service service) {
-        super(service, service.getType(), service.getLocation(), service.getServiceDuration(), service.getSize());
+        super(service, service.getType(), service.getLocation(), service.getServiceDuration(),
+                        service.getSize(), service.getServiceTimeWindows());
     }
 
 
-
     public PickupServiceDEPRECATED(PickupServiceDEPRECATED sourceActivity) {
         super(sourceActivity);
     }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupShipmentDEPRECATED.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupShipmentDEPRECATED.java
index 9417e3a78..1d3740fa0 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupShipmentDEPRECATED.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupShipmentDEPRECATED.java
@@ -22,7 +22,9 @@
 public final class PickupShipmentDEPRECATED extends PickupActivityNEW{
 
     public PickupShipmentDEPRECATED(Shipment shipment) {
-        super(shipment, "pickupShipment", shipment.getPickupLocation(), shipment.getPickupServiceTime(), shipment.getSize());
+        super(shipment, "pickupShipment", shipment.getPickupLocation(),
+                        shipment.getPickupServiceTime(), shipment.getSize(),
+                        shipment.getPickupTimeWindows());
     }
 
     public PickupShipmentDEPRECATED(PickupShipmentDEPRECATED sourceActivity) {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivityNEW.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivityNEW.java
index 61454e3cf..b5be322bb 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivityNEW.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivityNEW.java
@@ -17,6 +17,8 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
+import java.util.Collection;
+
 import com.graphhopper.jsprit.core.problem.Capacity;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.job.AbstractJob;
@@ -24,8 +26,9 @@
 
 public class ServiceActivityNEW extends JobActivity {
 
-    public ServiceActivityNEW(AbstractJob job, String name, Location location, double operationTime, Capacity capacity) {
-        super(job, name, location, operationTime, capacity);
+    public ServiceActivityNEW(AbstractJob job, String name, Location location, double operationTime,
+                    Capacity capacity, Collection<TimeWindow> timeWindows) {
+        super(job, name, location, operationTime, capacity, timeWindows);
     }
 
     public ServiceActivityNEW(ServiceActivityNEW sourceActivity) {
@@ -34,159 +37,8 @@ public ServiceActivityNEW(ServiceActivityNEW sourceActivity) {
 
     // NOTE: Only for testing purposes
     public static ServiceActivityNEW newInstance(Service service) {
-        return new ServiceActivityNEW(service, service.getName(), service.getLocation(), service.getServiceDuration(), service.getSize());
+        return new ServiceActivityNEW(service, service.getName(), service.getLocation(),
+                        service.getServiceDuration(), service.getSize(), service.getTimeWindows());
     }
 
-
-//    public double arrTime;
-//
-//    public double endTime;
-//
-//    private double theoreticalEarliest;
-//
-//    private double theoreticalLatest;
-//
-//    /**
-//     * @return the arrTime
-//     */
-//    public double getArrTime() {
-//        return arrTime;
-//    }
-//
-//    /**
-//     * @param arrTime the arrTime to set
-//     */
-//    public void setArrTime(double arrTime) {
-//        this.arrTime = arrTime;
-//    }
-//
-//    /**
-//     * @return the endTime
-//     */
-//    public double getEndTime() {
-//        return endTime;
-//    }
-//
-//    /**
-//     * @param endTime the endTime to set
-//     */
-//    public void setEndTime(double endTime) {
-//        this.endTime = endTime;
-//    }
-//
-//    public static ServiceActivityNEW copyOf(ServiceActivityNEW serviceActivity) {
-//        return new ServiceActivityNEW(serviceActivity);
-//    }
-//
-//    public static ServiceActivityNEW newInstance(Service service) {
-//        return new ServiceActivityNEW(service);
-//    }
-//
-//
-//    private final Service service;
-//
-//    protected ServiceActivityNEW(Service service) {
-//        this.service = service;
-//    }
-//
-//    protected ServiceActivityNEW(ServiceActivityNEW serviceActivity) {
-//        this.service = serviceActivity.getJob();
-//        this.arrTime = serviceActivity.getArrTime();
-//        this.endTime = serviceActivity.getEndTime();
-//        setIndex(serviceActivity.getIndex());
-//        this.theoreticalEarliest = serviceActivity.getTheoreticalEarliestOperationStartTime();
-//        this.theoreticalLatest = serviceActivity.getTheoreticalLatestOperationStartTime();
-//    }
-//
-//
-//    /* (non-Javadoc)
-//     * @see java.lang.Object#hashCode()
-//     */
-//    @Override
-//    public int hashCode() {
-//        final int prime = 31;
-//        int result = 1;
-//        result = prime * result + ((service == null) ? 0 : service.hashCode());
-//        return result;
-//    }
-//
-//    /* (non-Javadoc)
-//     * @see java.lang.Object#equals(java.lang.Object)
-//     */
-//    @Override
-//    public boolean equals(Object obj) {
-//        if (this == obj)
-//            return true;
-//        if (obj == null)
-//            return false;
-//        if (getClass() != obj.getClass())
-//            return false;
-//        ServiceActivityNEW other = (ServiceActivityNEW) obj;
-//        if (service == null) {
-//            if (other.service != null)
-//                return false;
-//        } else if (!service.equals(other.service))
-//            return false;
-//        return true;
-//    }
-//
-//    public double getTheoreticalEarliestOperationStartTime() {
-//        return theoreticalEarliest;
-//    }
-//
-//    public double getTheoreticalLatestOperationStartTime() {
-//        return theoreticalLatest;
-//    }
-//
-//    @Override
-//    public void setTheoreticalEarliestOperationStartTime(double earliest) {
-//        theoreticalEarliest = earliest;
-//    }
-//
-//    @Override
-//    public void setTheoreticalLatestOperationStartTime(double latest) {
-//        theoreticalLatest = latest;
-//    }
-//
-//    @Override
-//    public double getOperationTime() {
-//        return service.getServiceDuration();
-//    }
-//
-//    @Override
-//    public Location getLocation() {
-//        return service.getLocation();
-//    }
-//
-//
-//    @Override
-//    public Service getJob() {
-//        return service;
-//    }
-//
-//
-//    @Override
-//    public String toString() {
-//        return "[type=" + getName() + "][locationId=" + getLocation().getId()
-//            + "][size=" + getSize().toString()
-//            + "][twStart=" + Activities.round(getTheoreticalEarliestOperationStartTime())
-//            + "][twEnd=" + Activities.round(getTheoreticalLatestOperationStartTime()) + "]";
-//    }
-//
-//    @Override
-//    public String getName() {
-//        return service.getType();
-//    }
-//
-//    @Override
-//    public TourActivity duplicate() {
-//        return new ServiceActivityNEW(this);
-//    }
-//
-//    @Override
-//    public Capacity getSize() {
-//        return service.getSize();
-//    }
-//
-
 }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/IgnoreBreakTimeWindowTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/IgnoreBreakTimeWindowTest.java
index 74acba422..82f680e91 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/IgnoreBreakTimeWindowTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/IgnoreBreakTimeWindowTest.java
@@ -18,6 +18,8 @@
 
 package com.graphhopper.jsprit.core.algorithm;
 
+import static org.junit.Assert.assertTrue;
+
 import org.junit.Test;
 
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
@@ -34,8 +36,6 @@
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.util.Solutions;
 
-import junit.framework.Assert;
-
 /**
  * Created by schroeder on 08/01/16.
  */
@@ -65,30 +65,30 @@ public void doNotIgnoreBreakTW(){
 
 
         Service service4 = new Service.Builder("2").setLocation(Location.newInstance(0, 0))
-                .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(17,17)).build();
+                        .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(17,17)).build();
 
         Service service5 = new Service.Builder("3").setLocation(Location.newInstance(0, 0))
-                .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(18, 18)).build();
+                        .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(18, 18)).build();
 
         Service service7 = new Service.Builder("4").setLocation(Location.newInstance(0, 0))
-                .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(10, 10)).build();
+                        .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(10, 10)).build();
 
         Service service8 = new Service.Builder("5").setLocation(Location.newInstance(0, 0))
-                .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(12, 12)).build();
+                        .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(12, 12)).build();
 
         Service service10 = new Service.Builder("6").setLocation(Location.newInstance(0, 0))
-                .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(16, 16)).build();
+                        .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(16, 16)).build();
 
         Service service11 = new Service.Builder("7").setLocation(Location.newInstance(0, 0))
-                .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(13, 13)).build();
+                        .setServiceTime(1.).setTimeWindow(TimeWindow.newInstance(13, 13)).build();
 
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance()
-                .addVehicle(vehicle2)
-                .addJob(service4)
-                .addJob(service5).addJob(service7)
-                .addJob(service8).addJob(service10).addJob(service11)
-                .setFleetSize(VehicleRoutingProblem.FleetSize.FINITE)
-                .build();
+                        .addVehicle(vehicle2)
+                        .addJob(service4)
+                        .addJob(service5).addJob(service7)
+                        .addJob(service8).addJob(service10).addJob(service11)
+                        .setFleetSize(VehicleRoutingProblem.FleetSize.FINITE)
+                        .build();
 
         VehicleRoutingAlgorithm vra = Jsprit.createAlgorithm(vrp);
         vra.setMaxIterations(50);
@@ -96,7 +96,7 @@ public void doNotIgnoreBreakTW(){
         VehicleRoutingProblemSolution solution = Solutions.bestOf(vra.searchSolutions());
 
 
-        Assert.assertTrue(breakShouldBeTime(solution));
+        assertTrue(breakShouldBeTime(solution));
     }
 
     private boolean breakShouldBeTime(VehicleRoutingProblemSolution solution) {
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/VariableDepartureAndWaitingTime_IT.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/VariableDepartureAndWaitingTime_IT.java
index 02ad176cf..8a33b2472 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/VariableDepartureAndWaitingTime_IT.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/VariableDepartureAndWaitingTime_IT.java
@@ -19,6 +19,8 @@
 package com.graphhopper.jsprit.core.algorithm;
 
 
+import static org.junit.Assert.assertEquals;
+
 import org.junit.Before;
 import org.junit.Test;
 
@@ -78,21 +80,21 @@ public VehicleRoutingAlgorithm createAlgorithm(final VehicleRoutingProblem vrp)
                 ConstraintManager constraintManager = new ConstraintManager(vrp, stateManager);
 
                 return Jsprit.Builder.newInstance(vrp)
-                    .addCoreStateAndConstraintStuff(true)
-                    .setStateAndConstraintManager(stateManager, constraintManager)
-                    .setObjectiveFunction(new SolutionCostCalculator() {
-                        @Override
-                        public double getCosts(VehicleRoutingProblemSolution solution) {
-                            SolutionAnalyser sa = new SolutionAnalyser(vrp, solution, new TransportDistance() {
-                                @Override
-                                public double getDistance(Location from, Location to, double departureTime, Vehicle vehicle) {
-                                    return vrp.getTransportCosts().getTransportCost(from, to, 0., null, null);
-                                }
-                            });
-                            return sa.getWaitingTime() + sa.getDistance();
-                        }
-                    })
-                    .buildAlgorithm();
+                                .addCoreStateAndConstraintStuff(true)
+                                .setStateAndConstraintManager(stateManager, constraintManager)
+                                .setObjectiveFunction(new SolutionCostCalculator() {
+                                    @Override
+                                    public double getCosts(VehicleRoutingProblemSolution solution) {
+                                        SolutionAnalyser sa = new SolutionAnalyser(vrp, solution, new TransportDistance() {
+                                            @Override
+                                            public double getDistance(Location from, Location to, double departureTime, Vehicle vehicle) {
+                                                return vrp.getTransportCosts().getTransportCost(from, to, 0., null, null);
+                                            }
+                                        });
+                                        return sa.getWaitingTime() + sa.getDistance();
+                                    }
+                                })
+                                .buildAlgorithm();
             }
         };
     }
@@ -103,14 +105,14 @@ public void plainSetupShouldWork() {
         Service s1 = new Service.Builder("s1").setLocation(Location.newInstance(10, 0)).build();
         Service s2 = new Service.Builder("s2").setLocation(Location.newInstance(20, 0)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance()
-            .addJob(s1).addJob(s2).addVehicle(v)
-            .setFleetSize(VehicleRoutingProblem.FleetSize.FINITE)
-            .setRoutingCost(CostFactory.createManhattanCosts())
-            .setActivityCosts(activityCosts)
-            .build();
+                        .addJob(s1).addJob(s2).addVehicle(v)
+                        .setFleetSize(VehicleRoutingProblem.FleetSize.FINITE)
+                        .setRoutingCost(CostFactory.createManhattanCosts())
+                        .setActivityCosts(activityCosts)
+                        .build();
         VehicleRoutingAlgorithm vra = algorithmFactory.createAlgorithm(vrp);
         VehicleRoutingProblemSolution solution = Solutions.bestOf(vra.searchSolutions());
-        Assert.assertEquals(40., solution.getCost());
+        assertEquals(40., solution.getCost(), 0.01d);
     }
 
     @Test
@@ -119,11 +121,11 @@ public void withTimeWindowsShouldWork() {
         Service s1 = new Service.Builder("s1").setTimeWindow(TimeWindow.newInstance(1010, 1100)).setLocation(Location.newInstance(10, 0)).build();
         Service s2 = new Service.Builder("s2").setTimeWindow(TimeWindow.newInstance(1020, 1100)).setLocation(Location.newInstance(20, 0)).build();
         final VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance()
-            .addJob(s1).addJob(s2).addVehicle(v)
-            .setFleetSize(VehicleRoutingProblem.FleetSize.FINITE)
-            .setRoutingCost(CostFactory.createManhattanCosts())
-            .setActivityCosts(activityCosts)
-            .build();
+                        .addJob(s1).addJob(s2).addVehicle(v)
+                        .setFleetSize(VehicleRoutingProblem.FleetSize.FINITE)
+                        .setRoutingCost(CostFactory.createManhattanCosts())
+                        .setActivityCosts(activityCosts)
+                        .build();
         VehicleRoutingAlgorithm vra = algorithmFactory.createAlgorithm(vrp);
         VehicleRoutingProblemSolution solution = Solutions.bestOf(vra.searchSolutions());
         Assert.assertEquals(40. + 1000., solution.getCost());
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/ShipmentInsertionCalculatorTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/ShipmentInsertionCalculatorTest.java
index 8d478af62..edac630de 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/ShipmentInsertionCalculatorTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/ShipmentInsertionCalculatorTest.java
@@ -261,7 +261,7 @@ public void whenInstertingShipmentWithLoadConstraintWhereCapIsNotSufficient_capC
         constraintManager.addConstraint(new ShipmentPickupsFirstConstraint(), ConstraintManager.Priority.CRITICAL);
 
         ShipmentInsertionCalculator insertionCalculator = new ShipmentInsertionCalculator(routingCosts, activityCosts,
-                activityInsertionCostsCalculator, constraintManager);
+                        activityInsertionCostsCalculator, constraintManager);
         insertionCalculator.setJobActivityFactory(vrp.getJobActivityFactory());
 
         InsertionData iData = insertionCalculator.getInsertionData(route, shipment3, vehicle, 0.0, DriverImpl.noDriver(), Double.MAX_VALUE);
@@ -301,7 +301,7 @@ public void whenInsertingServiceWhileNoCapIsAvailable_itMustReturnNoInsertionDat
         switcher.put(Service.class, serviceInsertionCalc);
         switcher.put(Shipment.class, insertionCalculator);
 
-//		Service service = new Service.Builder("pick", 1).setLocationId("5,5").build();
+        //		Service service = new Service.Builder("pick", 1).setLocationId("5,5").build();
         Pickup service = new Pickup.Builder("pick").addSizeDimension(0, 1).setLocation(Location.newInstance("5,5")).build();
 
         JobActivityFactory activityFactory = mock(JobActivityFactory.class);
@@ -312,7 +312,7 @@ public void whenInsertingServiceWhileNoCapIsAvailable_itMustReturnNoInsertionDat
         serviceInsertionCalc.setJobActivityFactory(activityFactory);
 
         InsertionData iData = switcher.getInsertionData(route, service, vehicle, 0, DriverImpl.noDriver(), Double.MAX_VALUE);
-//		routeActVisitor.visit(route);
+        //		routeActVisitor.visit(route);
 
         assertEquals(3, iData.getDeliveryInsertionIndex());
     }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblemTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblemTest.java
index 3e7722c23..190895173 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblemTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblemTest.java
@@ -155,7 +155,6 @@ public void whenServicesAreAdded_vrpShouldContainThem() {
         assertEquals(2, vrp.getJobs().size());
         assertEquals(s1, vrp.getJobs().get("s1"));
         assertEquals(s2, vrp.getJobs().get("s2"));
-        assertEquals(1,vrp.getAllLocations().size());
     }
 
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/TestVehicleRoute.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/TestVehicleRoute.java
index 8d812ea8a..e81da743f 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/TestVehicleRoute.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/TestVehicleRoute.java
@@ -306,7 +306,7 @@ public void whenAddingPickup_itShouldBeTreatedAsPickup() {
         VehicleRoute route = VehicleRoute.Builder.newInstance(vehicle).addService(pickup).build();
 
         TourActivity act = route.getActivities().get(0);
-        assertTrue(act.getName().equals("pickup"));
+        assertEquals("pick.pickup", act.getName());
         assertTrue(act instanceof PickupServiceDEPRECATED);
         assertTrue(((JobActivity) act).getJob() instanceof Pickup);
 
@@ -320,7 +320,7 @@ public void whenAddingPickup_itShouldBeAdded() {
         VehicleRoute route = VehicleRoute.Builder.newInstance(vehicle).addPickup(pickup).build();
 
         TourActivity act = route.getActivities().get(0);
-        assertTrue(act.getName().equals("pickup"));
+        assertEquals("pick.pickup", act.getName());
         assertTrue(act instanceof PickupServiceDEPRECATED);
         assertTrue(((JobActivity) act).getJob() instanceof Pickup);
 
@@ -334,7 +334,7 @@ public void whenAddingDelivery_itShouldBeTreatedAsDelivery() {
         VehicleRoute route = VehicleRoute.Builder.newInstance(vehicle).addService(delivery).build();
 
         TourActivity act = route.getActivities().get(0);
-        assertTrue(act.getName().equals("delivery"));
+        assertEquals("delivery.delivery", act.getName());
         assertTrue(act instanceof DeliverServiceDEPRECATED);
         assertTrue(((JobActivity) act).getJob() instanceof Delivery);
 
@@ -348,7 +348,7 @@ public void whenAddingDelivery_itShouldBeAdded() {
         VehicleRoute route = VehicleRoute.Builder.newInstance(vehicle).addDelivery(delivery).build();
 
         TourActivity act = route.getActivities().get(0);
-        assertEquals("delivery", act.getName());
+        assertEquals("delivery.delivery", act.getName());
         assertTrue(act instanceof DeliverServiceDEPRECATED);
         assertTrue(((JobActivity) act).getJob() instanceof Delivery);
 
