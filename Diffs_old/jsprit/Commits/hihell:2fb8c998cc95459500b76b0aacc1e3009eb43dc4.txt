diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRoute.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRoute.java
index d8971c226..d122ee1a9 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRoute.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRoute.java
@@ -206,6 +206,15 @@ public Builder addPickup(Pickup pickup) {
             return addService(pickup);
         }
 
+        public Builder addPickups(ArrayList<Pickup> pickups) {
+            for (Pickup pickup : pickups) {
+                if (pickup == null) throw new IllegalArgumentException("pickup must not be null");
+                addService(pickup);
+            }
+
+            return this;
+        }
+
         public Builder addPickup(Pickup pickup, TimeWindow timeWindow) {
             if (pickup == null) throw new IllegalArgumentException("pickup must not be null");
             return addService(pickup,timeWindow);
@@ -222,6 +231,15 @@ public Builder addDelivery(Delivery delivery) {
             return addService(delivery);
         }
 
+        public Builder addDeliveries(ArrayList<Delivery> deliveries) {
+            for (Delivery d : deliveries) {
+                if (d == null) throw new IllegalArgumentException("delivery must not be null");
+                addService(d);
+            }
+
+            return this;
+        }
+
         public Builder addDelivery(Delivery delivery, TimeWindow timeWindow) {
             if (delivery == null) throw new IllegalArgumentException("delivery must not be null");
             return addService(delivery,timeWindow);
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/BaiduDistance.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/BaiduDistance.java
index 9e4c00d79..9219eb58b 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/BaiduDistance.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/BaiduDistance.java
@@ -1,5 +1,6 @@
 package com.graphhopper.jsprit.examples;
 
+import com.google.gson.JsonArray;
 import com.google.gson.JsonObject;
 import com.google.gson.JsonParser;
 import com.graphhopper.jsprit.core.problem.Location;
@@ -7,6 +8,7 @@
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingTransportCosts;
 import com.graphhopper.jsprit.core.problem.driver.Driver;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
+import com.graphhopper.jsprit.core.util.Coordinate;
 import com.graphhopper.jsprit.core.util.EuclideanCosts;
 import com.graphhopper.jsprit.core.util.ManhattanCosts;
 import com.sun.tools.javac.util.Pair;
@@ -14,6 +16,7 @@
 import com.sun.tools.jdi.DoubleTypeImpl;
 import scala.util.parsing.combinator.testing.Str;
 import scala.util.parsing.combinator.token.StdTokens;
+import scala.util.parsing.json.JSONArray;
 import scala.util.parsing.json.JSONObject;
 
 
@@ -49,7 +52,6 @@ public String getCoorString(Location loc) {
         double lat = loc.getCoordinate().getY();
 
 
-
         String strLng = new DecimalFormat("###.###").format(lng);
         String strLat = new DecimalFormat("###.###").format(lat);
 
@@ -79,7 +81,7 @@ public void putDurationCache(Location from, Location to, Double duration) {
     }
 
 
-    public Double getDistanceCache(Location from, Location to){
+    public Double getDistanceCache(Location from, Location to) {
         String strFrom = getCoorString(from);
         String strTo = getCoorString(to);
 
@@ -90,7 +92,7 @@ public Double getDistanceCache(Location from, Location to){
         Double d2 = distanceCache.get(p2);
         if (d1 != null) {
             return d1;
-        } else if(d2 != null) {
+        } else if (d2 != null) {
             return d2;
         }
 
@@ -108,7 +110,7 @@ public Double getDurationCache(Location from, Location to) {
         Double d2 = durationCache.get(p2);
         if (d1 != null) {
             return d1;
-        } else if(d2 != null) {
+        } else if (d2 != null) {
             return d2;
         }
 
@@ -126,9 +128,11 @@ public double getTransportCost(Location from, Location to,
         }
 
         try {
-            JsonObject j = getHTML(apiUrl);
+//            JsonObject j = getHTML(apiUrl);
+            JsonObject j  = postLeanCloud(from, to);
 
             double distance = j.getAsJsonObject("result")
+                .getAsJsonObject("result")
                 .getAsJsonArray("routes")
                 .get(0).getAsJsonObject()
                 .get("distance").getAsDouble();
@@ -156,12 +160,18 @@ public double getTransportTime(Location from, Location to,
         }
 
         try {
-            JsonObject j = getHTML(apiUrl);
-            double duration =  j.getAsJsonObject("result")
+//            JsonObject j = getHTML(apiUrl);
+//            double duration = j.getAsJsonObject("result")
+//                .getAsJsonArray("routes")
+//                .get(0).getAsJsonObject()
+//                .get("duration").getAsDouble();
+//
+            JsonObject j = postLeanCloud(from, to);
+            double duration = j.getAsJsonObject("result")
+                .getAsJsonObject("result")
                 .getAsJsonArray("routes")
                 .get(0).getAsJsonObject()
                 .get("duration").getAsDouble();
-
             // save to cache
 
             putDurationCache(from, to, duration);
@@ -219,22 +229,84 @@ public static JsonObject getHTML(String urlToRead) throws Exception {
             result.append(line);
         }
         rd.close();
-//        return result.toString();
 
         return new JsonParser().parse(result.toString()).getAsJsonObject();
+    }
+
+    public static JsonObject postLeanCloud(Location from, Location to) throws Exception {
+
+        double fromLng = from.getCoordinate().getX();
+        double fromLat = from.getCoordinate().getY();
+        JsonArray fromj = new JsonArray();
+        fromj.add(fromLat);
+        fromj.add(fromLng);
+
+        double toLng = to.getCoordinate().getX();
+        double toLat = to.getCoordinate().getY();
+        JsonArray toj = new JsonArray();
+        toj.add(toLat);
+        toj.add(toLng);
+
+        JsonObject params = new JsonObject();
+        params.add("from", fromj);
+        params.add("to", toj);
+        params.addProperty("from_region", "北京");
+        params.addProperty("to_region", "北京");
+        params.addProperty("transport_mode", "riding");
+
+        String url = "https://leancloud.cn/1.1/functions/baiduDistanceCoors";
+        URL obj = new URL(url);
+        HttpURLConnection con = (HttpURLConnection) obj.openConnection();
+
+        //add reuqest header
+        con.setRequestMethod("POST");
+        con.setRequestProperty("Content-Type", "application/json");
+        con.setRequestProperty("charset", "utf-8");
+        con.setRequestProperty("X-LC-Id", "lsreYNDOs3JODLsFbIRKGdDb-gzGzoHsz");
+        con.setRequestProperty("X-LC-Key", "9MNq2j3O2SCTkNbaERmRAWVx");
+        con.setRequestProperty("X-LC-Prod", "0");
+
+        // Send post request
+        con.setDoOutput(true);
+        OutputStreamWriter wr = new OutputStreamWriter(con.getOutputStream());
+        wr.write(params.toString());
+        wr.flush();
+        wr.close();
+
+        BufferedReader in = new BufferedReader(
+            new InputStreamReader(con.getInputStream()));
+        String inputLine;
+        StringBuffer response = new StringBuffer();
+
+        while ((inputLine = in.readLine()) != null) {
+            response.append(inputLine);
+        }
+        in.close();
+
+        return new JsonParser().parse(response.toString()).getAsJsonObject();
+    }
 
+    private static Location loc(Coordinate coordinate) {
+        return Location.Builder.newInstance().setCoordinate(coordinate).build();
     }
 
+
     public static void main(String[] args) throws Exception {
         String url = "http://api.map.baidu.com/direction/v1?mode=riding&origin=40.056878,116.30815&destination=39.915285,116.403857&origin_region=%E5%8C%97%E4%BA%AC&destination_region=%E5%8C%97%E4%BA%AC&output=json&ak=o0RuzQRVNo1YuIorz50uWVLs6DXVSo7X";
 //      // get distance j.get("result").get("routes").get(0).get("distance").getAsDouble()
         // get duration j.get("result").get("routes").get(0).get("duration").getAsDouble()
-        JsonObject j = getHTML(url);
-        System.out.println(j.toString());
-
+//        JsonObject j = getHTML(url);
+//        System.out.println(j.toString());
+//
 //        Location from = new Location()
 
+//      在这里顺序是 (x, y) x是longitude, y是latitude, 百度请求的顺序是[latitude, longitude]
+        Location from = loc(Coordinate.newInstance(116.403857, 39.915285));
+        Location to = loc(Coordinate.newInstance(116.30815, 40.056878));
+
+        JsonObject res = postLeanCloud(from, to);
 
+        System.out.println(res.toString());
     }
 
 
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/EnRouteRealTime.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/EnRouteRealTime.java
index 59010ad87..b87311f4a 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/EnRouteRealTime.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/EnRouteRealTime.java
@@ -16,9 +16,13 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.io.VrpXMLWriter;
+import com.graphhopper.jsprit.core.problem.job.Delivery;
 import com.graphhopper.jsprit.core.problem.job.Pickup;
+import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.Builder;
+
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
+import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
@@ -29,6 +33,7 @@
 import com.graphhopper.jsprit.core.util.Solutions;
 
 import com.graphhopper.jsprit.core.util.ManhattanCosts;
+import sun.jvm.hotspot.code.ConstantOopReadValue;
 
 /**
  * Created by jiusi on 16/4/1.
@@ -240,40 +245,26 @@ public void batchProblemBuilder(String inputPath) {
     }
 
 
-
     public void realTimeProblemBuilder(ArrayList<EnRouteVehicleContext> vehicleContexts, ArrayList<Shipment> newShipments) {
         // 0. get all vehicle's status from API and make EnRouteContext
         // status: picked up, location, all pending plans
 
         // 1.1 build vehicles
 
-        ArrayList<VehicleImpl> vehicles = new ArrayList<VehicleImpl>();
-        for (int i = 0; i < vehicleContexts.size(); i++) {
-            EnRouteVehicleContext vehicleContext = vehicleContexts.get(i);
-            double[] crtLoc = vehicleContext.currentLoc;
 
-            VehicleTypeImpl.Builder vehicleTypeBuilder = VehicleTypeImpl.Builder.newInstance("bike")
-                .addCapacityDimension(0, 3);
-            vehicleTypeBuilder.setCostPerDistance(10.0);
-            VehicleType vehicleType = vehicleTypeBuilder.build();
 
-            String staffCurrentCoorStr = "bike:" + i + "@[" + crtLoc[0] + "," + crtLoc[1] + "]";
-            VehicleImpl.Builder vehicleBuilder = VehicleImpl.Builder.newInstance(staffCurrentCoorStr);
-            vehicleBuilder.setStartLocation(loc(Coordinate.newInstance(crtLoc[0], crtLoc[1]))).setReturnToDepot(false);
-            vehicleBuilder.setType(vehicleType);
-            vehicleBuilder.addSkill(vehicleContext.vehicleId); // make sure the going deli will only be taken by the vehicle
-            VehicleImpl vehicle = vehicleBuilder.build();
-
-//            vehicleBuilder.set
+        VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
 
-            vehicles.add(vehicle);
+        for(EnRouteVehicleContext ctx : vehicleContexts) {
+            vrpBuilder.addVehicle(ctx.vehicle);
         }
 
+        vrpBuilder.addAllJobs(newShipments);
 
         //  1.2 setup shipments
-        ArrayList<Shipment> shipments = new ArrayList<Shipment>();
 
         // 1.2.1 setup on going pick up
+
         for (int i = 0; i < vehicleContexts.size(); i++) {
             EnRouteVehicleContext vehicleContext = vehicleContexts.get(i);
             String vehicleId = vehicleContext.vehicleId;
@@ -286,9 +277,9 @@ public void realTimeProblemBuilder(ArrayList<EnRouteVehicleContext> vehicleConte
 
                 double[] deliTW = onGoingPickUp.deliverTimeWindowAlgo;
 
-                Shipment shipment = Shipment.Builder.newInstance(onGoingPickUp.customerName + ','
-                    + onGoingPickUp.customerPhone + ','
-                    + onGoingPickUp.customerAddress)
+                Shipment shipment = Shipment.Builder.newInstance(
+                        onGoingPickUp.customerName + ',' + onGoingPickUp.customerPhone + ',' + onGoingPickUp.customerAddress
+                    )
                     .addSizeDimension(0, 1)
                     .setPickupLocation(loc(Coordinate.newInstance(pickLoc[0], pickLoc[1])))
                     .setPickupTimeWindow(new TimeWindow(pickTW[0], pickTW[1]))
@@ -297,9 +288,14 @@ public void realTimeProblemBuilder(ArrayList<EnRouteVehicleContext> vehicleConte
                     .addRequiredSkill(vehicleId) // make sure this on going deli will only be taken by that vehicle
                     .build();
 
-                shipments.add(shipment);
-
+//                VehicleRoute initialRoute = VehicleRoute.Builder.newInstance(
+//                    vehicleContext.vehicle
+//                ).addPickup(shipment).addDelivery(shipment).build();
+//
+//                vrpBuilder.addInitialVehicleRoute(initialRoute);
+                vrpBuilder.addJob(shipment);
             }
+
         }
 
         //  1.2.2 setup picked-ups
@@ -309,41 +305,34 @@ public void realTimeProblemBuilder(ArrayList<EnRouteVehicleContext> vehicleConte
             String vehicleId = vehicleContext.vehicleId;
             ArrayList<EnRouteVehicleContext.ShipmentInfo> pickedUps = vehicleContext.pickedups;
 
-            double[] pickLoc = vehicleContext.currentLoc;
-
             for (int j = 0; j < pickedUps.size(); j++) {
                 EnRouteVehicleContext.ShipmentInfo pickedUp = pickedUps.get(j);
 
+                double[] pickUpLoc = pickedUp.pickupLoc;
+                double[] pickUpTW = pickedUp.pickupTimeWindowAlgo;
                 double[] deliLoc = pickedUp.deliverLoc;
                 double[] deliTW = pickedUp.deliverTimeWindowAlgo;
 
-                Shipment shipment = Shipment.Builder.newInstance(pickedUp.customerName + ',' + pickedUp.customerPhone + ',' + pickedUp.customerAddress)
+                Shipment shipment = Shipment.Builder.newInstance(
+                    pickedUp.customerName + ',' + pickedUp.customerPhone + ',' + pickedUp.customerAddress
+                )
                     .addSizeDimension(0, 1)
-                    .setPickupLocation(loc(Coordinate.newInstance(pickLoc[0], pickLoc[1])))
+                    .setPickupLocation(loc(Coordinate.newInstance(pickUpLoc[0], pickUpLoc[1])))
+                    .setPickupTimeWindow(new TimeWindow(pickUpTW[0], pickUpTW[1]))
                     .setDeliveryLocation(loc(Coordinate.newInstance(deliLoc[0], deliLoc[1])))
-                    .setDeliveryTimeWindow(new TimeWindow(deliTW[0], deliTW[1])) // set that fucking window
-                    .addRequiredSkill(vehicleId) // make sure this on going deli will only be taken by that vehicle
+                    .setDeliveryTimeWindow(new TimeWindow(deliTW[0], deliTW[1]))
+                    .addRequiredSkill(vehicleId)
                     .build();
 
-                shipments.add(shipment);
-            }
-        }
-
-        // 1.2.3 setup non on going tasks
-        // non on going tasks are not context should not be in context section
-        shipments.addAll(newShipments);
-
-        // 2. build a vrp, add vehicles and shipments to it
-        VehicleRoutingProblem.Builder vrpBuilder = VehicleRoutingProblem.Builder.newInstance();
-        for (VehicleImpl v : vehicles) {
-            vrpBuilder.addVehicle(v);
-        }
+                VehicleRoute initialRoute = VehicleRoute.Builder.newInstance(
+                    vehicleContext.vehicle
+                ).addPickup(shipment).addDelivery(shipment).build();
 
-        for (Shipment s : shipments) {
-            vrpBuilder.addJob(s);
+                vrpBuilder.addInitialVehicleRoute(initialRoute);
+            }
         }
 
-//        vrpBuilder.setRoutingCost(new ManhattanCosts());
+        // 2 add shipment and deliveries to vrpBuilder
         vrpBuilder.setRoutingCost(new BaiduDistance());
 
         vrpBuilder.setFleetSize(VehicleRoutingProblem.FleetSize.FINITE);
@@ -374,7 +363,7 @@ public void solutionWriter(VehicleRoutingProblem problem,
         new VrpXMLWriter(problem, solutions).write("output/shipment-problem-with-solution.xml");
 
 		/*
-		 * print nRoutes and totalCosts of bestSolution
+         * print nRoutes and totalCosts of bestSolution
 		 */
         SolutionPrinter.print(bestSolution);
 
@@ -424,7 +413,12 @@ public void showAllBizNames(String inputPath) {
     }
 
 
-
+    private static Vehicle getVehicle(String vehicleId, Builder vrpBuilder) {
+        for (Vehicle v : vrpBuilder.getAddedVehicles()) {
+            if (v.getId().equals(vehicleId)) return v;
+        }
+        return null;
+    }
 
 
     public static void main(String[] args) {
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/EnRouteRealTimeTakeTest.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/EnRouteRealTimeTakeTest.java
index 68d9eca8c..8a9c75980 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/EnRouteRealTimeTakeTest.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/EnRouteRealTimeTakeTest.java
@@ -24,7 +24,7 @@ public EnRouteVehicleContext bike1(double currentTimestamp) {
         ArrayList<double[]> pickupLocs = new ArrayList<double[]>();
         pickupLocs.add(new double[]{116.466414, 39.912085}); // 建外soho
         ArrayList<double[]> pickupTimeWindowTSs = new ArrayList<double[]>();
-        pickupTimeWindowTSs.add(new double[]{1459998630.0, 1459999230.0}); // 11:10, 11:40
+        pickupTimeWindowTSs.add(new double[]{1459998630.0, 1460000400}); // 11:10, 11:40
 
         ArrayList<double[]> deliverLocs = new ArrayList<double[]>();
         deliverLocs.add(new double[]{116.479349, 39.929336}); // 摩码大厦
@@ -69,10 +69,11 @@ public EnRouteVehicleContext bike2(double currentTimestamp) {
         // 这个人从现代城鲜花店到朝阳区人民政府,送花,应该接上途中那个往西的快递
         // 现在位置是光华路东侧路口,和三环交界,他的位置上有个新快递,但是方向是往西的
 
+        // picked-ups
         ArrayList<double[]> pickupLocs = new ArrayList<double[]>();
         pickupLocs.add(new double[]{116.482862, 39.912448}); // 现代城鲜花店
         ArrayList<double[]> pickupTimeWindowTSs = new ArrayList<double[]>();
-        pickupTimeWindowTSs.add(new double[]{1459998630.0, 1459999230.0}); // 11:10, 11:40
+        pickupTimeWindowTSs.add(new double[]{1459998630.0, 1460000400}); // 11:10, 11:40
 
         ArrayList<double[]> deliverLocs = new ArrayList<double[]>();
         deliverLocs.add(new double[]{116.45001, 39.927189}); // 朝阳区人民政府
@@ -90,7 +91,7 @@ public EnRouteVehicleContext bike2(double currentTimestamp) {
         // 2. on going pickup No on going pickup
 
         return new EnRouteVehicleContext(
-            "bike1", currentTimestamp, //11:40
+            "bike2", currentTimestamp, //11:40
             new double[]{116.468354, 39.919238}, // 光华路东侧路口
 
             pickupLocs, deliverLocs,
@@ -147,7 +148,7 @@ public Shipment newShipment(double currentTimestamp) {
         double[] pickupLoc = {116.467295, 39.919685}; // 嘉里中心
         double[] pickupTW = {1459998024.0, 1459999800}; // 11:00, 11:30
         double[] deliverLoc = {116.452471, 39.919293}; // 日坛商务楼
-        double[] deliverTW = {1459998024.0, 1460007000}; // 11:00, 13:00
+        double[] deliverTW = {1459998024.0, 1460005200}; // 11:00, 13:00
 
         String customerName =  "嘉里中心 Ovelia de la Wang";
         String customerPhone = "456";
@@ -170,7 +171,7 @@ public static void main(String[] args) {
         货物会分配给离得不太远但是方向对的快递员,而不会分配给最近的那个快递员,已达到cost最小的结果
          */
 
-        double currentTimestamp = 1459999231; // 4-6 11:20
+        double currentTimestamp = 1459999200; // 4-7 11:20
 
         EnRouteRealTimeTakeTest t = new EnRouteRealTimeTakeTest();
         EnRouteVehicleContext bike1 = t.bike1(currentTimestamp);
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/EnRouteVehicleContext.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/EnRouteVehicleContext.java
index bce374e44..4ad145d62 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/EnRouteVehicleContext.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/EnRouteVehicleContext.java
@@ -1,6 +1,12 @@
 package com.graphhopper.jsprit.examples;
 
+import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.job.Shipment;
+import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
+import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
+import com.graphhopper.jsprit.core.util.Coordinate;
 import scala.util.parsing.combinator.testing.Str;
 
 import java.util.ArrayList;
@@ -41,7 +47,6 @@ public ShipmentInfo(double[] pickupLoc, double[] deliverLoc,
             }
 
 
-
             this.pickupTimeWindowAlgo = new double[]{
                 pstart,
                 pickupTimeWindowTS[1] - currentTimestamp
@@ -69,6 +74,11 @@ public ShipmentInfo(double[] pickupLoc, double[] deliverLoc,
     public double currentTimestamp;
 
     public String vehicleId;
+    public Vehicle vehicle;
+
+    private static Location loc(Coordinate coordinate) {
+        return Location.Builder.newInstance().setCoordinate(coordinate).build();
+    }
 
     public EnRouteVehicleContext(String vehicleId, double currentTimestamp, double[] currentLoc, // some info
 
@@ -85,6 +95,22 @@ public EnRouteVehicleContext(String vehicleId, double currentTimestamp, double[]
                                  String customerAddress
 
     ) {
+        // create a vehicle implementation
+
+
+        VehicleTypeImpl.Builder vehicleTypeBuilder = VehicleTypeImpl.Builder.newInstance("bike")
+            .addCapacityDimension(0, 3);
+        vehicleTypeBuilder.setCostPerDistance(10.0);
+        VehicleType vehicleType = vehicleTypeBuilder.build();
+
+        String staffCurrentCoorStr =  vehicleId + "@[" + currentLoc[0] + "," + currentLoc[1] + "]";
+        VehicleImpl.Builder vehicleBuilder = VehicleImpl.Builder.newInstance(staffCurrentCoorStr);
+        vehicleBuilder.setStartLocation(loc(Coordinate.newInstance(currentLoc[0], currentLoc[1]))).setReturnToDepot(false);
+        vehicleBuilder.setType(vehicleType);
+        vehicleBuilder.addSkill(vehicleId); // make sure the going deli will only be taken by the vehicle
+
+        this.vehicle = vehicleBuilder.build();
+
         // 应该是笛卡尔积但是我他妈懒得写
         assert (pickupLocs.size() == deliverLocs.size() &&
             pickupTimeWindowTSs.size() == deliverTimeWindowTSs.size() &&
