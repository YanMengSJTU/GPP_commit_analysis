diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/InsertionInitialSolutionFactory.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/InsertionInitialSolutionFactory.java
index 137ad3446..801005826 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/InsertionInitialSolutionFactory.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/InsertionInitialSolutionFactory.java
@@ -19,6 +19,14 @@
 
 package com.graphhopper.jsprit.core.algorithm;
 
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.List;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
+import com.graphhopper.jsprit.core.algorithm.objectivefunction.ModularSolutionCostCalculator;
 import com.graphhopper.jsprit.core.algorithm.recreate.InsertionStrategy;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Job;
@@ -26,12 +34,6 @@
 import com.graphhopper.jsprit.core.problem.solution.SolutionCostCalculator;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.List;
 
 
 public final class InsertionInitialSolutionFactory implements InitialSolutionFactory {
@@ -44,27 +46,31 @@
 
     public InsertionInitialSolutionFactory(InsertionStrategy insertionStrategy, SolutionCostCalculator solutionCostCalculator) {
         super();
-        this.insertion = insertionStrategy;
-        this.solutionCostsCalculator = solutionCostCalculator;
+        insertion = insertionStrategy;
+        solutionCostsCalculator = solutionCostCalculator;
     }
 
     @Override
     public VehicleRoutingProblemSolution createSolution(final VehicleRoutingProblem vrp) {
         logger.info("create initial solution");
-        List<VehicleRoute> vehicleRoutes = new ArrayList<VehicleRoute>();
+        List<VehicleRoute> vehicleRoutes = new ArrayList<>();
         vehicleRoutes.addAll(vrp.getInitialVehicleRoutes());
         Collection<Job> badJobs = insertion.insertJobs(vehicleRoutes, getUnassignedJobs(vrp));
         VehicleRoutingProblemSolution solution = new VehicleRoutingProblemSolution(vehicleRoutes, badJobs, Double.MAX_VALUE);
         double costs = solutionCostsCalculator.getCosts(solution);
         solution.setCost(costs);
+        if (solutionCostsCalculator instanceof ModularSolutionCostCalculator) {
+            ModularSolutionCostCalculator modCalc = (ModularSolutionCostCalculator) solutionCostsCalculator;
+            solution.setDetailedCost(modCalc.calculate(solution));
+        }
         return solution;
     }
 
     private List<Job> getUnassignedJobs(VehicleRoutingProblem vrp) {
-        ArrayList<Job> jobs = new ArrayList<Job>(vrp.getJobs().values());
-//        for (Vehicle v : vrp.getVehicles()) {
-//            if (v.getBreak() != null) jobs.add(v.getBreak());
-//        }
+        ArrayList<Job> jobs = new ArrayList<>(vrp.getJobs().values());
+        //        for (Vehicle v : vrp.getVehicles()) {
+        //            if (v.getBreak() != null) jobs.add(v.getBreak());
+        //        }
         return jobs;
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/SearchStrategy.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/SearchStrategy.java
index a68808e41..f22dbd7a2 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/SearchStrategy.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/SearchStrategy.java
@@ -17,18 +17,20 @@
  */
 package com.graphhopper.jsprit.core.algorithm;
 
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.Collections;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import com.graphhopper.jsprit.core.algorithm.acceptor.SolutionAcceptor;
 import com.graphhopper.jsprit.core.algorithm.listener.SearchStrategyModuleListener;
+import com.graphhopper.jsprit.core.algorithm.objectivefunction.ModularSolutionCostCalculator;
 import com.graphhopper.jsprit.core.algorithm.selector.SolutionSelector;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.solution.SolutionCostCalculator;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.Collections;
 
 
 public class SearchStrategy {
@@ -68,7 +70,7 @@ public String toString() {
 
     private static Logger logger = LoggerFactory.getLogger(SearchStrategy.class);
 
-    private final Collection<SearchStrategyModule> searchStrategyModules = new ArrayList<SearchStrategyModule>();
+    private final Collection<SearchStrategyModule> searchStrategyModules = new ArrayList<>();
 
     private final SolutionSelector solutionSelector;
 
@@ -81,7 +83,9 @@ public String toString() {
     private String name;
 
     public SearchStrategy(String id, SolutionSelector solutionSelector, SolutionAcceptor solutionAcceptor, SolutionCostCalculator solutionCostCalculator) {
-        if (id == null) throw new IllegalStateException("strategy id cannot be null");
+        if (id == null) {
+            throw new IllegalStateException("strategy id cannot be null");
+        }
         this.solutionSelector = solutionSelector;
         this.solutionAcceptor = solutionAcceptor;
         this.solutionCostCalculator = solutionCostCalculator;
@@ -136,26 +140,35 @@ public String toString() {
     @SuppressWarnings("UnusedParameters")
     public DiscoveredSolution run(VehicleRoutingProblem vrp, Collection<VehicleRoutingProblemSolution> solutions) {
         VehicleRoutingProblemSolution solution = solutionSelector.selectSolution(solutions);
-        if (solution == null) throw new IllegalStateException(getErrMsg());
+        if (solution == null) {
+            throw new IllegalStateException(getErrMsg());
+        }
         VehicleRoutingProblemSolution lastSolution = VehicleRoutingProblemSolution.copyOf(solution);
         for (SearchStrategyModule module : searchStrategyModules) {
             lastSolution = module.runAndGetSolution(lastSolution);
         }
         double costs = solutionCostCalculator.getCosts(lastSolution);
         lastSolution.setCost(costs);
+        if (solutionCostCalculator instanceof ModularSolutionCostCalculator) {
+            ModularSolutionCostCalculator modCalc = (ModularSolutionCostCalculator) solutionCostCalculator;
+            lastSolution.setDetailedCost(modCalc.calculate(lastSolution));
+        }
+
         boolean solutionAccepted = solutionAcceptor.acceptSolution(solutions, lastSolution);
         return new DiscoveredSolution(lastSolution, solutionAccepted, getId());
     }
 
     private String getErrMsg() {
         return "solution is null. check solutionSelector to return an appropriate solution. " +
-            "\nfigure out whether you start with an initial solution. either you set it manually by algorithm.addInitialSolution(...)"
-            + " or let the algorithm create an initial solution for you. then add the <construction>...</construction> xml-snippet to your algorithm's config file.";
+                        "\nfigure out whether you start with an initial solution. either you set it manually by algorithm.addInitialSolution(...)"
+                        + " or let the algorithm create an initial solution for you. then add the <construction>...</construction> xml-snippet to your algorithm's config file.";
     }
 
 
     public void addModule(SearchStrategyModule module) {
-        if (module == null) throw new IllegalStateException("module to be added is null.");
+        if (module == null) {
+            throw new IllegalStateException("module to be added is null.");
+        }
         searchStrategyModules.add(module);
         logger.debug("module added [module={}][#modules={}]", module, searchStrategyModules.size());
     }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/box/Jsprit.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/box/Jsprit.java
index 1f1f9b2aa..3fc4ce2d6 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/box/Jsprit.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/box/Jsprit.java
@@ -719,9 +719,9 @@ private SolutionCostCalculator getObjectiveFunction(final VehicleRoutingProblem
         ModularSolutionCostCalculator modCalc = new ModularSolutionCostCalculator(vrp, maxCosts);
         modCalc.addComponent(new FixCostPerVehicle())
         .addComponent(new MissedBreak())
-        .addComponent(new TransportCost())
+                        .addComponent(new TransportCost(), 2d)
         .addComponent(new ActivityCost())
-        .addComponent(new UnassignedJobs());
+        .addComponent(new UnassignedJobs(), 0.5d);
 
         // TODO: not to do here!
         modCalc.beforeRun();
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/objectivefunction/ComponentValue.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/objectivefunction/ComponentValue.java
index c18b9d795..53101db63 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/objectivefunction/ComponentValue.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/objectivefunction/ComponentValue.java
@@ -45,4 +45,8 @@ public String toString() {
         return "ComponentValue [key=" + key + ", weight=" + weight + ", value=" + value + "]";
     }
 
+    public ComponentValue copy() {
+        return new ComponentValue(key, value).withWeight(weight);
+    }
+
 }
\ No newline at end of file
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/objectivefunction/ModularSolutionCostCalculator.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/objectivefunction/ModularSolutionCostCalculator.java
index f36d006aa..8cdf1babc 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/objectivefunction/ModularSolutionCostCalculator.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/objectivefunction/ModularSolutionCostCalculator.java
@@ -1,6 +1,6 @@
 package com.graphhopper.jsprit.core.algorithm.objectivefunction;
 
-import java.util.HashMap;
+import java.util.LinkedHashMap;
 import java.util.List;
 import java.util.Map;
 import java.util.stream.Collectors;
@@ -12,7 +12,7 @@
 public class ModularSolutionCostCalculator implements SolutionCostCalculator {
 
     private VehicleRoutingProblem problem;
-    private Map<SolutionCostComponent, Double> components = new HashMap<>();
+    private Map<SolutionCostComponent, Double> components = new LinkedHashMap<>();
     private double maxCosts;
 
     public ModularSolutionCostCalculator(VehicleRoutingProblem problem, double maxCosts) {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/objectivefunction/RouteLevelComponentValue.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/objectivefunction/RouteLevelComponentValue.java
index c1e135f10..f193fd7eb 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/objectivefunction/RouteLevelComponentValue.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/objectivefunction/RouteLevelComponentValue.java
@@ -31,4 +31,12 @@ public String toString() {
                         + getWeight() + ", value=" + getValue() + "routeLevel=" + routeLevelValue + "]";
     }
 
+    @Override
+    public RouteLevelComponentValue copy() {
+        RouteLevelComponentValue copy = new RouteLevelComponentValue(getKey());
+        copy.withWeight(getWeight());
+        copy.routeLevelValue = new HashMap<>(routeLevelValue);
+        return copy;
+    }
+
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/VehicleRoutingProblemSolution.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/VehicleRoutingProblemSolution.java
index 62cc365de..92d9d4026 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/VehicleRoutingProblemSolution.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/VehicleRoutingProblemSolution.java
@@ -21,7 +21,9 @@
 import java.util.Collection;
 import java.util.Collections;
 import java.util.List;
+import java.util.stream.Collectors;
 
+import com.graphhopper.jsprit.core.algorithm.objectivefunction.ComponentValue;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 
@@ -45,6 +47,8 @@ public static VehicleRoutingProblemSolution copyOf(VehicleRoutingProblemSolution
 
     private List<VehicleRoute> routes;
 
+    private List<ComponentValue> detailedCost;
+
     private Collection<Job> unassignedJobs = new ArrayList<>();
 
     private double cost;
@@ -56,7 +60,11 @@ private VehicleRoutingProblemSolution(VehicleRoutingProblemSolution solution) {
             tmpRoutes.add(route);
         }
         setRoutes(tmpRoutes);
-        cost = solution.getCost();
+        setCost(solution.getCost());
+        if (solution.getDetailedCost() != null) {
+            detailedCost = solution.getDetailedCost().stream().map(cv -> cv.copy()).collect(Collectors.toList());
+        }
+
         unassignedJobs.addAll(solution.getUnassignedJobs());
     }
 
@@ -69,7 +77,7 @@ private VehicleRoutingProblemSolution(VehicleRoutingProblemSolution solution) {
     public VehicleRoutingProblemSolution(Collection<VehicleRoute> routes, double cost) {
         super();
         setRoutes(routes);
-        this.cost = cost;
+        setCost(cost);
     }
 
     /**
@@ -80,10 +88,8 @@ public VehicleRoutingProblemSolution(Collection<VehicleRoute> routes, double cos
      * @param cost           total costs of solution
      */
     public VehicleRoutingProblemSolution(Collection<VehicleRoute> routes, Collection<Job> unassignedJobs, double cost) {
-        super();
-        setRoutes(routes);
+        this(routes, cost);
         this.unassignedJobs = unassignedJobs;
-        this.cost = cost;
     }
 
 
@@ -122,6 +128,15 @@ public double getCost() {
      */
     public void setCost(double cost) {
         this.cost = cost;
+        detailedCost = null;
+    }
+
+    public void setDetailedCost(List<ComponentValue> detailedCost) {
+        this.detailedCost = detailedCost;
+    }
+
+    public List<ComponentValue> getDetailedCost() {
+        return detailedCost;
     }
 
     /**
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java
index 97108a785..d76ee5006 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java
@@ -25,6 +25,8 @@
 import java.util.function.Function;
 import java.util.stream.Collectors;
 
+import com.graphhopper.jsprit.core.algorithm.objectivefunction.ComponentValue;
+import com.graphhopper.jsprit.core.algorithm.objectivefunction.RouteLevelComponentValue;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.FleetSize;
 import com.graphhopper.jsprit.core.problem.job.Job;
@@ -32,7 +34,11 @@
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.reporting.ConfigurableTablePrinter.CsvConfig;
+import com.graphhopper.jsprit.core.reporting.DynamicTableDefinition.Builder;
+import com.graphhopper.jsprit.core.reporting.DynamicTablePrinter.TableRow;
+import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnAlignment;
 import com.graphhopper.jsprit.core.reporting.columndefinition.ColumnDefinition;
+import com.graphhopper.jsprit.core.reporting.columndefinition.DoubleColumnType;
 import com.graphhopper.jsprit.core.reporting.columndefinition.SolutionPrintColumnLists;
 import com.graphhopper.jsprit.core.reporting.columndefinition.SolutionPrintColumnLists.PredefinedList;
 import com.graphhopper.jsprit.core.reporting.columndefinition.StringColumnType;
@@ -188,6 +194,8 @@ private static void printVerbose(PrintWriter out, VehicleRoutingProblem problem,
 
     // New print functions (TODO old ones should be migrated into these)
 
+    // ----------------------------------------------------------
+
     /**
      * Prints costs and #vehicles to the given writer
      *
@@ -243,6 +251,93 @@ public static void printSummary(PrintWriter out, VehicleRoutingProblem problem,
 
     // ----------------------------------------------------------
 
+    public static void printCostDetails(VehicleRoutingProblem problem, VehicleRoutingProblemSolution solution) {
+        printCostDetails(SYSTEM_OUT_AS_PRINT_WRITER, problem, solution);
+        SYSTEM_OUT_AS_PRINT_WRITER.flush();
+    }
+
+    public static void printCostDetails(PrintWriter out, VehicleRoutingProblem problem, VehicleRoutingProblemSolution solution) {
+        if (solution.getDetailedCost() == null) {
+            out.println("No detailed cost info available.");
+            return;
+        }
+
+        DynamicTableDefinition compomentTableDef = new DynamicTableDefinition.Builder()
+                        .withHeading("Cost components")
+                        .addColumn(new ColumnDefinition.Builder(new StringColumnType(), "component id")
+                                        .build())
+                        .addColumn(new ColumnDefinition.Builder(new DoubleColumnType(), "value")
+                                        .withAlignment(ColumnAlignment.RIGHT).build())
+                        .addColumn(new ColumnDefinition.Builder(new DoubleColumnType(), "weight")
+                                        .withAlignment(ColumnAlignment.RIGHT).build())
+                        .addColumn(new ColumnDefinition.Builder(new DoubleColumnType(), "weighted value")
+                                        .withAlignment(ColumnAlignment.RIGHT).build())
+                        .build();
+
+        DynamicTablePrinter componentTablePrinter = new DynamicTablePrinter(compomentTableDef);
+        for (ComponentValue cv : solution.getDetailedCost()) {
+            componentTablePrinter.addRow().add(cv.getKey()).add(cv.getValue()).add(cv.getWeight()).add(cv.getWeightedValue());
+        }
+        out.println(componentTablePrinter.print());
+
+        Builder routeLevelTableDefBuilder = new DynamicTableDefinition.Builder()
+                        .withHeading("Route level costs (weighted)")
+                        .addColumn(new ColumnDefinition.Builder(new StringColumnType(), "Route")
+                                        .build());
+        DynamicTableDefinition routeLevelTableDef = routeLevelTableDefBuilder.build();
+        for (ComponentValue cv : solution.getDetailedCost()) {
+            if (cv instanceof RouteLevelComponentValue) {
+                routeLevelTableDefBuilder.addColumn(new ColumnDefinition.Builder(new DoubleColumnType(), cv.getKey())
+                                .withAlignment(ColumnAlignment.RIGHT).build());
+            }
+        }
+        routeLevelTableDefBuilder.addColumn(new ColumnDefinition.Builder(new DoubleColumnType(), "Total").build());
+
+        DynamicTablePrinter routeLevelTablePrinter = new DynamicTablePrinter(routeLevelTableDef);
+        TableRow row;
+        // row = routeLevelTablePrinter.addRow().add("Weight");
+        // for (ComponentValue cv : solution.getDetailedCost()) {
+        // if (cv instanceof RouteLevelComponentValue) {
+        // row.add(cv.getWeight());
+        // }
+        // }
+        // routeLevelTablePrinter.addSeparator();
+
+        for (VehicleRoute r : solution.getRoutes()) {
+            row = routeLevelTablePrinter.addRow().add(r.getId());
+            double sum = 0d;
+            for (ComponentValue cv : solution.getDetailedCost()) {
+                if (cv instanceof RouteLevelComponentValue) {
+                    Double val = ((RouteLevelComponentValue) cv).getRouteValue(r.getId()).orElse(null);
+                    if (val != null) {
+                        val *= cv.getWeight();
+                    }
+                    sum += val;
+                    row.add(val);
+                }
+            }
+            row.add(sum);
+        }
+        routeLevelTablePrinter.addSeparator();
+        row = routeLevelTablePrinter.addRow().add("Total");
+        double sum = 0d;
+        for (ComponentValue cv : solution.getDetailedCost()) {
+            if (cv instanceof RouteLevelComponentValue) {
+                Double val = ((RouteLevelComponentValue) cv).getValue();
+                if (val != null) {
+                    val *= cv.getWeight();
+                }
+                sum += val;
+                row.add(val);
+            }
+        }
+        row.add(sum);
+
+        out.println(routeLevelTablePrinter.print());
+    }
+
+    // ----------------------------------------------------------
+
     public static void printRouteDetails(VehicleRoutingProblem problem, VehicleRoutingProblemSolution solution,
                     PrinterColumnList<RoutePrinterContext> columns) {
         printRouteDetails(SYSTEM_OUT_AS_PRINT_WRITER, problem, solution, columns);
