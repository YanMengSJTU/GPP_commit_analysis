diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrintColumnLists.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrintColumnLists.java
index fe618e69c..48af6f2ec 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrintColumnLists.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrintColumnLists.java
@@ -4,16 +4,30 @@
 import java.util.EnumMap;
 import java.util.List;
 
+import com.graphhopper.jsprit.core.reporting.route.ActivityCostPrinterColumn;
+import com.graphhopper.jsprit.core.reporting.route.ActivityDurationPrinterColumn;
+import com.graphhopper.jsprit.core.reporting.route.ActivityLoadChangePrinterColumn;
 import com.graphhopper.jsprit.core.reporting.route.ActivityTypePrinterColumn;
 import com.graphhopper.jsprit.core.reporting.route.ArrivalTimePrinterColumn;
 import com.graphhopper.jsprit.core.reporting.route.EndTimePrinterColumn;
 import com.graphhopper.jsprit.core.reporting.route.HumanReadableEnabled;
 import com.graphhopper.jsprit.core.reporting.route.HumanReadableTimeFormatter;
 import com.graphhopper.jsprit.core.reporting.route.JobNamePrinterColumn;
+import com.graphhopper.jsprit.core.reporting.route.JobPriorityPrinterColumn;
+import com.graphhopper.jsprit.core.reporting.route.JobTypePrinterColumn;
+import com.graphhopper.jsprit.core.reporting.route.LoacationPrinterColumn;
+import com.graphhopper.jsprit.core.reporting.route.OperationDurationPrinterColumn;
 import com.graphhopper.jsprit.core.reporting.route.RouteCostPrinterColumn;
+import com.graphhopper.jsprit.core.reporting.route.RouteLoadPrinterColumn;
 import com.graphhopper.jsprit.core.reporting.route.RouteNumberPrinterColumn;
 import com.graphhopper.jsprit.core.reporting.route.RoutePrinterContext;
+import com.graphhopper.jsprit.core.reporting.route.SelectedTimeWindowPrinterColumn;
+import com.graphhopper.jsprit.core.reporting.route.StartTimePrinterColumn;
+import com.graphhopper.jsprit.core.reporting.route.TimeWindowsPrinterColumn;
+import com.graphhopper.jsprit.core.reporting.route.TransportCostPrinterColumn;
+import com.graphhopper.jsprit.core.reporting.route.TravelDurationPrinterColumn;
 import com.graphhopper.jsprit.core.reporting.route.VehicleNamePrinterColumn;
+import com.graphhopper.jsprit.core.reporting.route.WaitingDurationPrinterColumn;
 
 public class SolutionPrintColumnLists {
 
@@ -72,8 +86,50 @@
         minimalSet.add(RouteCostPrinterColumn.class);
         COLUMNS.put(PredefinedList.MINIMAL, minimalSet);
 
-        COLUMNS.put(PredefinedList.DEFAULT, minimalSet);
-        COLUMNS.put(PredefinedList.VERBOSE, minimalSet);
+        List<Class<? extends AbstractPrinterColumn<RoutePrinterContext, ?, ?>>> defaultSet = new ArrayList<>();
+        defaultSet.add(RouteNumberPrinterColumn.class);
+        defaultSet.add(VehicleNamePrinterColumn.class);
+        defaultSet.add(ActivityTypePrinterColumn.class);
+        defaultSet.add(JobNamePrinterColumn.class);
+        defaultSet.add(LoacationPrinterColumn.class);
+        defaultSet.add(ActivityLoadChangePrinterColumn.class);
+        defaultSet.add(OperationDurationPrinterColumn.class);
+        defaultSet.add(ArrivalTimePrinterColumn.class);
+        defaultSet.add(StartTimePrinterColumn.class);
+        defaultSet.add(EndTimePrinterColumn.class);
+        defaultSet.add(ActivityCostPrinterColumn.class);
+        defaultSet.add(RouteCostPrinterColumn.class);
+        COLUMNS.put(PredefinedList.DEFAULT, defaultSet);
+
+        List<Class<? extends AbstractPrinterColumn<RoutePrinterContext, ?, ?>>> verboseSet = new ArrayList<>();
+        verboseSet.add(RouteNumberPrinterColumn.class);
+        verboseSet.add(VehicleNamePrinterColumn.class);
+        verboseSet.add(ActivityTypePrinterColumn.class);
+
+        verboseSet.add(JobNamePrinterColumn.class);
+        verboseSet.add(JobTypePrinterColumn.class);
+        verboseSet.add(JobPriorityPrinterColumn.class);
+
+        verboseSet.add(LoacationPrinterColumn.class);
+        verboseSet.add(ActivityLoadChangePrinterColumn.class);
+        verboseSet.add(RouteLoadPrinterColumn.class);
+        verboseSet.add(TimeWindowsPrinterColumn.class);
+
+        verboseSet.add(OperationDurationPrinterColumn.class);
+        verboseSet.add(TravelDurationPrinterColumn.class);
+        verboseSet.add(WaitingDurationPrinterColumn.class);
+        verboseSet.add(ActivityDurationPrinterColumn.class);
+
+        verboseSet.add(ArrivalTimePrinterColumn.class);
+        verboseSet.add(StartTimePrinterColumn.class);
+        verboseSet.add(EndTimePrinterColumn.class);
+        verboseSet.add(SelectedTimeWindowPrinterColumn.class);
+
+        verboseSet.add(TransportCostPrinterColumn.class);
+        verboseSet.add(ActivityCostPrinterColumn.class);
+        verboseSet.add(RouteCostPrinterColumn.class);
+
+        COLUMNS.put(PredefinedList.VERBOSE, verboseSet);
     }
 
     public static PrinterColumnList<RoutePrinterContext> getNumeric(PredefinedList listType) {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java
index 4ff9f82a7..e0381fa9a 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java
@@ -280,54 +280,9 @@ private static void printVerbose(PrintWriter out, VehicleRoutingProblem problem,
     private static void printVerbose2(PrintWriter out, VehicleRoutingProblem problem, VehicleRoutingProblemSolution solution,
                     PrinterColumnList<RoutePrinterContext> columns) {
 
-        // PrinterColumnList<RoutePrinterContext> columns = new
-        // PrinterColumnList<>("Detailed route");
-        // HumanReadableTimeFormatter dateFormatter = new
-        // HumanReadableTimeFormatter(LocalDateTime.now(), ChronoUnit.SECONDS);
-        // columns
-        // .addColumn(new RouteNumberPrinterColumn())
-        // .addColumn(new VehicleNamePrinterColumn())
-        // .addColumn(new ActivityTypePrinterColumn())
-        // .addColumn(new JobNamePrinterColumn(b -> b.withMinWidth(10)))
-        // .addColumn(new JobTypePrinterColumn())
-        // .addColumn(new JobPriorityPrinterColumn())
-        // .addColumn(new ActivityLoadChangePrinterColumn())
-        // .addColumn(new RouteLoadPrinterColumn())
-        // .addColumn(new LoacationPrinterColumn())
-        // .addColumn(new OperationDurationPrinterColumn())
-        // .addColumn(new OperationDurationPrinterColumn().asHumanReadable())
-        // .addColumn(new TravelDurationPrinterColumn())
-        // .addColumn(new TravelDurationPrinterColumn().asHumanReadable())
-        // .addColumn(new ActivityDurationPrinterColumn())
-        // .addColumn(new ActivityDurationPrinterColumn().asHumanReadable())
-        // .addColumn(new WaitingDurationPrinterColumn())
-        // .addColumn(new WaitingDurationPrinterColumn().asHumanReadable())
-        // .addColumn(new ArrivalTimePrinterColumn())
-        // .addColumn(new
-        // ArrivalTimePrinterColumn().asHumanReadable().withFormatter(dateFormatter))
-        // .addColumn(new StartTimePrinterColumn())
-        // .addColumn(new
-        // StartTimePrinterColumn().asHumanReadable().withFormatter(dateFormatter))
-        // .addColumn(new EndTimePrinterColumn())
-        // .addColumn(new
-        // EndTimePrinterColumn().asHumanReadable().withFormatter(dateFormatter))
-        // .addColumn(new TransportCostPrinterColumn())
-        // .addColumn(new ActivityCostPrinterColumn())
-        // .addColumn(new RouteCostPrinterColumn())
-        // .addColumn(new SelectedTimeWindowPrinterColumn())
-        // .addColumn(new
-        // SelectedTimeWindowPrinterColumn().asHumanReadable().withFormatter(dateFormatter))
-        // .addColumn(new TimeWindowsPrinterColumn())
-        // .addColumn(new
-        // TimeWindowsPrinterColumn().asHumanReadable().withFormatter(dateFormatter))
-        // ;
-        // columns = VerbosePrintColumnLists.getNumeric(PredefinedList.MINIMAL);
-
         ConfigurableTablePrinter<RoutePrinterContext> tablePrinter = buildTablePrinter(problem, solution, columns);
         out.println(tablePrinter.print());
 
-        // out.println(tablePrinter.exportToCsv(new CsvConfig()));
-
         if (!solution.getUnassignedJobs().isEmpty()) {
 
             DynamicTableDefinition unassignedTableDef = new DynamicTableDefinition.Builder().withHeading("Unassigned jobs")
