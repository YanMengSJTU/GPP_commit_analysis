diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/ServiceInsertionCalculator.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/ServiceInsertionCalculator.java
index 54fee780a..cf93e9be6 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/ServiceInsertionCalculator.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/ServiceInsertionCalculator.java
@@ -17,12 +17,22 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
+import java.util.Iterator;
+
+import org.slf4j.Logger;
+import org.slf4j.LoggerFactory;
+
 import com.graphhopper.jsprit.core.problem.JobActivityFactory;
-import com.graphhopper.jsprit.core.problem.constraint.*;
+import com.graphhopper.jsprit.core.problem.constraint.ConstraintManager;
+import com.graphhopper.jsprit.core.problem.constraint.HardActivityConstraint;
 import com.graphhopper.jsprit.core.problem.constraint.HardActivityConstraint.ConstraintsStatus;
+import com.graphhopper.jsprit.core.problem.constraint.HardRouteConstraint;
+import com.graphhopper.jsprit.core.problem.constraint.SoftActivityConstraint;
+import com.graphhopper.jsprit.core.problem.constraint.SoftRouteConstraint;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingActivityCosts;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingTransportCosts;
 import com.graphhopper.jsprit.core.problem.driver.Driver;
+import com.graphhopper.jsprit.core.problem.job.AbstractSingleActivityJob;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.job.Service;
 import com.graphhopper.jsprit.core.problem.misc.ActivityContext;
@@ -33,10 +43,6 @@
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
-import org.slf4j.Logger;
-import org.slf4j.LoggerFactory;
-
-import java.util.Iterator;
 
 /**
  * Calculator that calculates the best insertion position for a {@link Service}.
@@ -67,7 +73,7 @@
 
     public ServiceInsertionCalculator(VehicleRoutingTransportCosts routingCosts, VehicleRoutingActivityCosts activityCosts, ActivityInsertionCostsCalculator additionalTransportCostsCalculator, ConstraintManager constraintManager) {
         super();
-        this.transportCosts = routingCosts;
+        transportCosts = routingCosts;
         this.activityCosts = activityCosts;
         hardRouteLevelConstraint = constraintManager;
         hardActivityLevelConstraint = constraintManager;
@@ -79,7 +85,7 @@ public ServiceInsertionCalculator(VehicleRoutingTransportCosts routingCosts, Veh
     }
 
     public void setJobActivityFactory(JobActivityFactory jobActivityFactory) {
-        this.activityFactory = jobActivityFactory;
+        activityFactory = jobActivityFactory;
     }
 
     @Override
@@ -94,7 +100,7 @@ public String toString() {
     @Override
     public InsertionData getInsertionData(final VehicleRoute currentRoute, final Job jobToInsert, final Vehicle newVehicle, double newVehicleDepartureTime, final Driver newDriver, final double bestKnownCosts) {
         JobInsertionContext insertionContext = new JobInsertionContext(currentRoute, jobToInsert, newVehicle, newDriver, newVehicleDepartureTime);
-        Service service = (Service) jobToInsert;
+        AbstractSingleActivityJob<?> service = (AbstractSingleActivityJob<?>) jobToInsert;
         int insertionIndex = InsertionData.NO_INDEX;
 
         TourActivity deliveryAct2Insert = activityFactory.createActivities(service).get(0);
@@ -130,8 +136,9 @@ public InsertionData getInsertionData(final VehicleRoute currentRoute, final Job
         boolean tourEnd = false;
         while (!tourEnd) {
             TourActivity nextAct;
-            if (activityIterator.hasNext()) nextAct = activityIterator.next();
-            else {
+            if (activityIterator.hasNext()) {
+                nextAct = activityIterator.next();
+            } else {
                 nextAct = end;
                 tourEnd = true;
             }
@@ -156,7 +163,9 @@ public InsertionData getInsertionData(final VehicleRoute currentRoute, final Job
                     not_fulfilled_break = false;
                 }
             }
-            if (not_fulfilled_break) break;
+            if (not_fulfilled_break) {
+                break;
+            }
             double nextActArrTime = prevActStartTime + transportCosts.getTransportTime(prevAct.getLocation(), nextAct.getLocation(), prevActStartTime, newDriver, newVehicle);
             prevActStartTime = Math.max(nextActArrTime, nextAct.getTheoreticalEarliestOperationStartTime()) + activityCosts.getActivityDuration(nextAct, nextActArrTime, newDriver, newVehicle);
             prevAct = nextAct;
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyser.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyser.java
index b5c81558c..85797f6f3 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyser.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyser.java
@@ -122,11 +122,12 @@ public void begin(VehicleRoute route) {
 
         @Override
         public void visit(TourActivity activity) {
-            if (activity instanceof PickupActivityNEW) {
+            if (activity instanceof PickupActivityNEW || activity instanceof ServiceActivityNEW) {
                 pickupCounter++;
-                pickedUp = pickedUp.add(((PickupActivityNEW) activity).getJob().getSize());
+                pickedUp = pickedUp.add(activity.getLoadChange());
                 if (!AbstractActivityNEW.isShipment(activity)
-                                && activity instanceof PickupActivityNEW) {
+                                && (activity instanceof PickupActivityNEW
+                                                || activity instanceof ServiceActivityNEW)) {
                     deliverAtEndCounter++;
                 }
             } else if (activity instanceof DeliveryActivityNEW) {
@@ -214,7 +215,7 @@ public void visit(TourActivity activity) {
             } else {
                 if (!AbstractActivityNEW.isShipment(activity)
                                 && (activity instanceof PickupActivityNEW
-                                || activity instanceof ServiceActivityNEW)) {
+                                                || activity instanceof ServiceActivityNEW)) {
                     pickupOccured = true;
                     stateManager.putActivityState(activity, backhaul_id, false);
                 } else {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractSingleActivityJob.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractSingleActivityJob.java
index 6b75640d9..9d0e89397 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractSingleActivityJob.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractSingleActivityJob.java
@@ -280,5 +280,7 @@ public SizeDimension getSize() {
         return getActivity().getLoadChange();
     }
 
+    public abstract <X extends BuilderBase<AbstractSingleActivityJob<? extends A>, ? extends BuilderBase<AbstractSingleActivityJob<? extends A>, ?>>> X getBuilder(
+                    String id);
 
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Break.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Break.java
index 0ee082da6..b3bf22409 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Break.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Break.java
@@ -80,4 +80,10 @@ public boolean hasVariableLocation() {
         return variableLocation;
     }
 
+    @SuppressWarnings("unchecked")
+    @Override
+    public Builder getBuilder(String id) {
+        return Builder.newInstance(id);
+    }
+
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Delivery.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Delivery.java
index f27e11d1c..ac79de93d 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Delivery.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Delivery.java
@@ -57,11 +57,11 @@ protected DeliveryActivityNEW createActivity(
         if (TheBigRedButton.PUSHED) {
             return new DeliveryActivityNEW(this, builder.type, builder.location,
                             builder.serviceTime,
-                            builder.getCapacity(), builder.timeWindows.getTimeWindows());
+                            builder.getCapacity().invert(), builder.timeWindows.getTimeWindows());
         } else {
             return new DeliverServiceDEPRECATED(this, builder.type, builder.location,
                             builder.serviceTime,
-                            builder.getCapacity(), builder.timeWindows.getTimeWindows());
+                            builder.getCapacity().invert(), builder.timeWindows.getTimeWindows());
         }
     }
 
@@ -71,4 +71,10 @@ public SizeDimension getSize() {
         return super.getSize().abs();
     }
 
+    @SuppressWarnings("unchecked")
+    @Override
+    public Builder getBuilder(String id) {
+        return Builder.newInstance(id);
+    }
+
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Pickup.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Pickup.java
index 5091cdd1c..53ffc750f 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Pickup.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Pickup.java
@@ -62,5 +62,10 @@ protected PickupActivityNEW createActivity(
         }
     }
 
+    @SuppressWarnings("unchecked")
+    @Override
+    public Builder getBuilder(String id) {
+        return Builder.newInstance(id);
+    }
 
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java
index a3a75a6ec..3980b8fae 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java
@@ -55,13 +55,18 @@ protected Service createInstance() {
     @Override
     protected ServiceActivityNEW createActivity(
                     AbstractSingleActivityJob.BuilderBase<? extends AbstractSingleActivityJob<?>, ?> builder) {
-        if (TheBigRedButton.PUSHED) {
-            return new ServiceActivityNEW(this, builder.type, builder.location, builder.serviceTime,
-                            builder.getCapacity(), builder.timeWindows.getTimeWindows());
-        } else {
-            return new ServiceActivityNEW(this, builder.type, builder.location, builder.serviceTime,
-                            builder.getCapacity(), builder.timeWindows.getTimeWindows());
-        }
+        return new ServiceActivityNEW(this, builder.type,
+                        builder.location, builder.serviceTime, builder.getCapacity(),
+                        builder.timeWindows.getTimeWindows());
+        // return new PickupActivityNEW(this, builder.type, builder.location,
+        // builder.serviceTime,
+        // builder.getCapacity(), builder.timeWindows.getTimeWindows());
+    }
+
+    @SuppressWarnings("unchecked")
+    @Override
+    public Builder getBuilder(String id) {
+        return Builder.newInstance(id);
     }
 
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRoute.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRoute.java
index c451c68c2..66cba382e 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRoute.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/VehicleRoute.java
@@ -199,7 +199,7 @@ public Builder addService(AbstractSingleActivityJob<?> service,
             if (service == null) {
                 throw new IllegalArgumentException("service must not be null");
             }
-            return addService(service, timeWindow);
+            return addSingleActivityJob(service, timeWindow);
         }
 
         private Builder addSingleActivityJob(AbstractSingleActivityJob<?> service) {
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CVRPwithMatrix_IT.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CVRPwithMatrix_IT.java
index f7c56c314..fa292fd8c 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CVRPwithMatrix_IT.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CVRPwithMatrix_IT.java
@@ -17,14 +17,25 @@
  */
 package com.graphhopper.jsprit.core.algorithm;
 
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
+import java.util.ArrayList;
+import java.util.Collection;
+import java.util.List;
+
+import org.junit.Assert;
+import org.junit.Test;
+
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
 import com.graphhopper.jsprit.core.analysis.SolutionAnalyser;
 import com.graphhopper.jsprit.core.distance.EuclideanDistanceCalculator;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.cost.TransportDistance;
+import com.graphhopper.jsprit.core.problem.job.AbstractSingleActivityJob;
 import com.graphhopper.jsprit.core.problem.job.Job;
-import com.graphhopper.jsprit.core.problem.job.Service;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
@@ -32,14 +43,6 @@
 import com.graphhopper.jsprit.core.util.FastVehicleRoutingTransportCostsMatrix;
 import com.graphhopper.jsprit.core.util.JobType;
 import com.graphhopper.jsprit.core.util.Solutions;
-import org.junit.Assert;
-import org.junit.Test;
-
-import java.util.ArrayList;
-import java.util.Collection;
-import java.util.List;
-
-import static org.junit.Assert.*;
 
 public class CVRPwithMatrix_IT {
 
@@ -95,21 +98,22 @@ private VehicleRoutingProblem createVrpWithLocationIndecesAndMatrix(VehicleRouti
         List<Location> locations = new ArrayList<Location>();
         for (Vehicle v : vrp_.getVehicles()) {
             Location l = Location.Builder.newInstance().setIndex(getIndex()).setId(v.getStartLocation().getId())
-                .setCoordinate(v.getStartLocation().getCoordinate()).build();
+                            .setCoordinate(v.getStartLocation().getCoordinate()).build();
             VehicleImpl.Builder newVehicleBuilder = VehicleImpl.Builder.newInstance(v.getId()).setType(v.getType())
-                .setEarliestStart(v.getEarliestDeparture()).setLatestArrival(v.getLatestArrival())
-                .setStartLocation(l).setReturnToDepot(return_to_depot);
+                            .setEarliestStart(v.getEarliestDeparture()).setLatestArrival(v.getLatestArrival())
+                            .setStartLocation(l).setReturnToDepot(return_to_depot);
             VehicleImpl newVehicle = newVehicleBuilder.build();
             vrpBuilder.addVehicle(newVehicle);
             locations.add(l);
         }
         for (Job j : vrp_.getJobs().values()) {
-            Service s = (Service) j;
+            AbstractSingleActivityJob<?> s = (AbstractSingleActivityJob<?>) j;
             Location l = Location.Builder.newInstance().setIndex(getIndex())
-                .setId(s.getLocation().getId()).setCoordinate(s.getLocation().getCoordinate()).build();
-            Service newService = new Service.Builder(s.getId()).setServiceTime(s.getServiceDuration())
-                .addSizeDimension(0, s.getSize().get(0))
-                .setLocation(l).build();
+                            .setId(s.getLocation().getId()).setCoordinate(s.getLocation().getCoordinate()).build();
+            AbstractSingleActivityJob<?> newService = s.getBuilder(s.getId())
+                            .setServiceTime(s.getServiceDuration())
+                            .addSizeDimension(0, s.getSize().get(0))
+                            .setLocation(l).build();
             vrpBuilder.addJob(newService);
             locations.add(l);
         }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/HardPickupAndDeliveryShipmentActivityConstraintTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/HardPickupAndDeliveryShipmentActivityConstraintTest.java
index 2d2724612..60691272c 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/HardPickupAndDeliveryShipmentActivityConstraintTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/HardPickupAndDeliveryShipmentActivityConstraintTest.java
@@ -32,6 +32,7 @@
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliveryActivityNEW;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivityNEW;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.ServiceActivityNEW;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
@@ -76,8 +77,8 @@ public void doBefore() {
 
     @Test
     public void whenPickupActivityIsInsertedAndLoadIsSufficient_returnFullFilled() {
-        PickupActivityNEW pickupService = (PickupActivityNEW) vrp.getActivities(s1).get(0);
-        PickupActivityNEW anotherService = (PickupActivityNEW) vrp.getActivities(s2).get(0);
+        ServiceActivityNEW pickupService = (ServiceActivityNEW) vrp.getActivities(s1).get(0);
+        ServiceActivityNEW anotherService = (ServiceActivityNEW) vrp.getActivities(s2).get(0);
         PickupActivityNEW pickupShipment = (PickupActivityNEW) vrp.getActivities(shipment).get(0);
 
         assertEquals(ConstraintsStatus.FULFILLED, constraint.fulfilled(iFacts, pickupService, pickupShipment, anotherService, 0.0));
@@ -85,8 +86,8 @@ public void whenPickupActivityIsInsertedAndLoadIsSufficient_returnFullFilled() {
 
     @Test
     public void whenPickupActivityIsInsertedAndLoadIsNotSufficient_returnNOT_FullFilled() {
-        PickupActivityNEW pickupService = (PickupActivityNEW) vrp.getActivities(s1).get(0);
-        PickupActivityNEW anotherService = (PickupActivityNEW) vrp.getActivities(s2).get(0);
+        ServiceActivityNEW pickupService = (ServiceActivityNEW) vrp.getActivities(s1).get(0);
+        ServiceActivityNEW anotherService = (ServiceActivityNEW) vrp.getActivities(s2).get(0);
         PickupActivityNEW pickupShipment = (PickupActivityNEW) vrp.getActivities(shipment).get(0);
 
         stateManager.putInternalTypedActivityState(pickupService, InternalStates.LOAD, SizeDimension.Builder.newInstance().addDimension(0, 2).build());
@@ -96,8 +97,8 @@ public void whenPickupActivityIsInsertedAndLoadIsNotSufficient_returnNOT_FullFil
 
     @Test
     public void whenDeliveryActivityIsInsertedAndLoadIsSufficient_returnFullFilled() {
-        PickupActivityNEW pickupService = (PickupActivityNEW) vrp.getActivities(s1).get(0);
-        PickupActivityNEW anotherService = (PickupActivityNEW) vrp.getActivities(s2).get(0);
+        ServiceActivityNEW pickupService = (ServiceActivityNEW) vrp.getActivities(s1).get(0);
+        ServiceActivityNEW anotherService = (ServiceActivityNEW) vrp.getActivities(s2).get(0);
 
         DeliveryActivityNEW deliverShipment = (DeliveryActivityNEW) vrp.getActivities(shipment)
                         .get(1);
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/DeliveryTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/DeliveryTest.java
index 210303fd6..304b5b6fb 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/DeliveryTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/DeliveryTest.java
@@ -17,12 +17,15 @@
  */
 package com.graphhopper.jsprit.core.problem.job;
 
-import com.graphhopper.jsprit.core.problem.SizeDimension;
-import com.graphhopper.jsprit.core.problem.Location;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
 import org.junit.Assert;
 import org.junit.Test;
 
-import static org.junit.Assert.*;
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 
 public class DeliveryTest {
 
@@ -34,9 +37,9 @@ public void whenNeitherLocationIdNorCoordIsSet_itThrowsException() {
     @Test
     public void whenAddingTwoCapDimension_nuOfDimsShouldBeTwo() {
         Delivery one = new Delivery.Builder("s").setLocation(Location.newInstance("foofoo"))
-            .addSizeDimension(0, 2)
-            .addSizeDimension(1, 4)
-            .build();
+                        .addSizeDimension(0, 2)
+                        .addSizeDimension(1, 4)
+                        .build();
         assertEquals(2, one.getSize().getNuOfDimensions());
         assertEquals(2, one.getSize().get(0));
         assertEquals(4, one.getSize().get(1));
@@ -46,17 +49,18 @@ public void whenAddingTwoCapDimension_nuOfDimsShouldBeTwo() {
     @Test
     public void sizeAtStartAndEndShouldBeCorrect() {
         Delivery one = new Delivery.Builder("s").setLocation(Location.newInstance("foofoo"))
-            .addSizeDimension(0, 2)
-            .addSizeDimension(1, 4)
-            .build();
-        assertTrue(one.getSizeAtStart().equals(one.getSize()));
-        assertTrue(one.getSizeAtEnd().equals(SizeDimension.Builder.newInstance().addDimension(0, 0).addDimension(1, 0).build()));
+                        .addSizeDimension(0, 2)
+                        .addSizeDimension(1, 4)
+                        .build();
+        assertEquals(one.getSize(), one.getSizeAtStart());
+        assertEquals(SizeDimension.Builder.newInstance().addDimension(0, 0).addDimension(1, 0)
+                        .build(), one.getSizeAtEnd());
     }
 
     @Test
     public void whenPickupIsBuiltWithoutSpecifyingCapacity_itShouldHvCapWithOneDimAndDimValOfZero() {
         Delivery one = new Delivery.Builder("s").setLocation(Location.newInstance("foofoo"))
-            .build();
+                        .build();
         assertEquals(1, one.getSize().getNuOfDimensions());
         assertEquals(0, one.getSize().get(0));
     }
@@ -64,7 +68,7 @@ public void whenPickupIsBuiltWithoutSpecifyingCapacity_itShouldHvCapWithOneDimAn
     @Test
     public void whenPickupIsBuiltWithConstructorWhereSizeIsSpecified_capacityShouldBeSetCorrectly() {
         Delivery one = new Delivery.Builder("s").addSizeDimension(0, 1).setLocation(Location.newInstance("foofoo"))
-            .build();
+                        .build();
         assertEquals(1, one.getSize().getNuOfDimensions());
         assertEquals(1, one.getSize().get(0));
     }
@@ -72,7 +76,7 @@ public void whenPickupIsBuiltWithConstructorWhereSizeIsSpecified_capacityShouldB
     @Test
     public void whenAddingSkills_theyShouldBeAddedCorrectly() {
         Delivery s = new Delivery.Builder("s").setLocation(Location.newInstance("loc"))
-            .addRequiredSkill("drill").addRequiredSkill("screwdriver").build();
+                        .addRequiredSkill("drill").addRequiredSkill("screwdriver").build();
         assertTrue(s.getRequiredSkills().containsSkill("drill"));
         assertTrue(s.getRequiredSkills().containsSkill("ScrewDriver"));
     }
@@ -80,7 +84,7 @@ public void whenAddingSkills_theyShouldBeAddedCorrectly() {
     @Test
     public void whenAddingSkillsCaseSens_theyShouldBeAddedCorrectly() {
         Delivery s = new Delivery.Builder("s").setLocation(Location.newInstance("loc"))
-            .addRequiredSkill("DriLl").addRequiredSkill("screwDriver").build();
+                        .addRequiredSkill("DriLl").addRequiredSkill("screwDriver").build();
         assertTrue(s.getRequiredSkills().containsSkill("drill"));
         assertTrue(s.getRequiredSkills().containsSkill("drilL"));
     }
@@ -88,7 +92,7 @@ public void whenAddingSkillsCaseSens_theyShouldBeAddedCorrectly() {
     @Test
     public void whenAddingSkillsCaseSensV2_theyShouldBeAddedCorrectly() {
         Delivery s = new Delivery.Builder("s").setLocation(Location.newInstance("loc"))
-            .addRequiredSkill("screwDriver").build();
+                        .addRequiredSkill("screwDriver").build();
         assertFalse(s.getRequiredSkills().containsSkill("drill"));
         assertFalse(s.getRequiredSkills().containsSkill("drilL"));
     }
@@ -96,21 +100,21 @@ public void whenAddingSkillsCaseSensV2_theyShouldBeAddedCorrectly() {
     @Test
     public void nameShouldBeAssigned() {
         Delivery s = new Delivery.Builder("s").setLocation(Location.newInstance("loc"))
-            .setName("name").build();
+                        .setName("name").build();
         assertEquals("name", s.getName());
     }
 
     @Test
     public void whenSettingPriorities_itShouldBeSetCorrectly() {
         Delivery s = new Delivery.Builder("s").setLocation(Location.newInstance("loc"))
-            .setPriority(3).build();
+                        .setPriority(3).build();
         Assert.assertEquals(3, s.getPriority());
     }
 
     @Test
     public void whenNotSettingPriorities_defaultShouldBe() {
         Delivery s = new Delivery.Builder("s").setLocation(Location.newInstance("loc"))
-            .build();
+                        .build();
         Assert.assertEquals(2, s.getPriority());
     }
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ServiceTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ServiceTest.java
index a80ba147a..abba74d0c 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ServiceTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ServiceTest.java
@@ -17,18 +17,23 @@
  */
 package com.graphhopper.jsprit.core.problem.job;
 
-import com.graphhopper.jsprit.core.problem.SizeDimension;
-import com.graphhopper.jsprit.core.problem.Location;
-import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
-import org.junit.Assert;
-import org.junit.Test;
+import static org.hamcrest.core.Is.is;
+import static org.hamcrest.core.IsCollectionContaining.hasItem;
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertNotNull;
+import static org.junit.Assert.assertThat;
+import static org.junit.Assert.assertTrue;
 
 import java.util.HashSet;
 import java.util.Set;
 
-import static org.hamcrest.core.Is.is;
-import static org.hamcrest.core.IsCollectionContaining.hasItem;
-import static org.junit.Assert.*;
+import org.junit.Assert;
+import org.junit.Test;
+
+import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
+import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 
 public class ServiceTest {
 
@@ -54,7 +59,7 @@ public void noName() {
         Service one = new Service.Builder("service").addSizeDimension(0, 10).setLocation(Location.newInstance("foo")).build();
         Service two = new Service.Builder("service").addSizeDimension(0, 10).setLocation(Location.newInstance("fo")).build();
         serviceSet.add(one);
-//		assertTrue(serviceSet.contains(two));
+        //		assertTrue(serviceSet.contains(two));
         serviceSet.remove(two);
         assertTrue(serviceSet.isEmpty());
     }
@@ -68,18 +73,18 @@ public void whenCapacityDimValueIsNegative_throwIllegalStateExpception() {
     @Test
     public void whenAddingTwoCapDimension_nuOfDimsShouldBeTwo() {
         Service one = new Service.Builder("s").setLocation(Location.newInstance("foofoo"))
-            .addSizeDimension(0, 2)
-            .addSizeDimension(1, 4)
-            .build();
+                        .addSizeDimension(0, 2)
+                        .addSizeDimension(1, 4)
+                        .build();
         assertEquals(2, one.getSize().getNuOfDimensions());
     }
 
     @Test
     public void sizeAtStartAndEndShouldBeCorrect() {
         Service one = new Service.Builder("s").setLocation(Location.newInstance("foofoo"))
-            .addSizeDimension(0, 2)
-            .addSizeDimension(1, 4)
-            .build();
+                        .addSizeDimension(0, 2)
+                        .addSizeDimension(1, 4)
+                        .build();
         assertTrue(one.getSizeAtEnd().equals(one.getSize()));
         assertTrue(one.getSizeAtStart().equals(SizeDimension.Builder.newInstance().addDimension(0, 0).addDimension(1, 0).build()));
     }
@@ -87,7 +92,7 @@ public void sizeAtStartAndEndShouldBeCorrect() {
     @Test
     public void whenShipmentIsBuiltWithoutSpecifyingCapacity_itShouldHvCapWithOneDimAndDimValOfZero() {
         Service one = new Service.Builder("s").setLocation(Location.newInstance("foofoo"))
-            .build();
+                        .build();
         assertEquals(1, one.getSize().getNuOfDimensions());
         assertEquals(0, one.getSize().get(0));
     }
@@ -95,7 +100,7 @@ public void whenShipmentIsBuiltWithoutSpecifyingCapacity_itShouldHvCapWithOneDim
     @Test
     public void whenShipmentIsBuiltWithConstructorWhereSizeIsSpecified_capacityShouldBeSetCorrectly() {
         Service one = new Service.Builder("s").addSizeDimension(0, 1).setLocation(Location.newInstance("foofoo"))
-            .build();
+                        .build();
         assertEquals(1, one.getSize().getNuOfDimensions());
         assertEquals(1, one.getSize().get(0));
     }
@@ -109,7 +114,7 @@ public void whenCallingForNewInstanceOfBuilder_itShouldReturnBuilderCorrectly()
     @Test
     public void whenSettingNoType_itShouldReturn_service() {
         Service s = new Service.Builder("s").setLocation(Location.newInstance("loc")).build();
-        assertEquals("service", s.getType());
+        assertEquals("pickup", s.getType());
     }
 
     @Test
@@ -170,7 +175,7 @@ public void whenSettingTimeWindow_itShouldBeSetCorrectly() {
     @Test
     public void whenAddingSkills_theyShouldBeAddedCorrectly() {
         Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
-            .addRequiredSkill("drill").addRequiredSkill("screwdriver").build();
+                        .addRequiredSkill("drill").addRequiredSkill("screwdriver").build();
         assertTrue(s.getRequiredSkills().containsSkill("drill"));
         assertTrue(s.getRequiredSkills().containsSkill("drill"));
         assertTrue(s.getRequiredSkills().containsSkill("ScrewDriver"));
@@ -179,7 +184,7 @@ public void whenAddingSkills_theyShouldBeAddedCorrectly() {
     @Test
     public void whenAddingSkillsCaseSens_theyShouldBeAddedCorrectly() {
         Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
-            .addRequiredSkill("DriLl").addRequiredSkill("screwDriver").build();
+                        .addRequiredSkill("DriLl").addRequiredSkill("screwDriver").build();
         assertTrue(s.getRequiredSkills().containsSkill("drill"));
         assertTrue(s.getRequiredSkills().containsSkill("drilL"));
     }
@@ -189,9 +194,9 @@ public void whenAddingSeveralTimeWindows_itShouldBeSetCorrectly() {
         TimeWindow tw1 = TimeWindow.newInstance(1.0, 2.0);
         TimeWindow tw2 = TimeWindow.newInstance(3.0, 5.0);
         Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
-            .addTimeWindow(tw1)
-            .addTimeWindow(tw2)
-            .build();
+                        .addTimeWindow(tw1)
+                        .addTimeWindow(tw2)
+                        .build();
         assertEquals(2, s.getTimeWindows().size());
         assertThat(s.getTimeWindows(), hasItem(is(tw1)));
         assertThat(s.getTimeWindows(), hasItem(is(tw2)));
@@ -200,7 +205,7 @@ public void whenAddingSeveralTimeWindows_itShouldBeSetCorrectly() {
     @Test
     public void whenAddingTimeWindow_itShouldBeSetCorrectly() {
         Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
-            .addTimeWindow(TimeWindow.newInstance(1.0, 2.0)).build();
+                        .addTimeWindow(TimeWindow.newInstance(1.0, 2.0)).build();
         assertEquals(1.0, s.getTimeWindow().getStart(), 0.01);
         assertEquals(2.0, s.getTimeWindow().getEnd(), 0.01);
     }
@@ -209,7 +214,7 @@ public void whenAddingTimeWindow_itShouldBeSetCorrectly() {
     @Test
     public void whenAddingSkillsCaseSensV2_theyShouldBeAddedCorrectly() {
         Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
-            .addRequiredSkill("screwDriver").build();
+                        .addRequiredSkill("screwDriver").build();
         assertFalse(s.getRequiredSkills().containsSkill("drill"));
         assertFalse(s.getRequiredSkills().containsSkill("drilL"));
     }
@@ -217,66 +222,66 @@ public void whenAddingSkillsCaseSensV2_theyShouldBeAddedCorrectly() {
     @Test
     public void nameShouldBeAssigned() {
         Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
-            .setName("name").build();
+                        .setName("name").build();
         assertEquals("name", s.getName());
     }
 
     @Test
     public void shouldKnowMultipleTimeWindows() {
         Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
-            .addTimeWindow(TimeWindow.newInstance(0., 10.)).addTimeWindow(TimeWindow.newInstance(20., 30.))
-            .setName("name").build();
+                        .addTimeWindow(TimeWindow.newInstance(0., 10.)).addTimeWindow(TimeWindow.newInstance(20., 30.))
+                        .setName("name").build();
         assertEquals(2, s.getTimeWindows().size());
     }
 
     @Test(expected = IllegalArgumentException.class)
     public void whenMultipleTWOverlap_throwEx() {
         Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
-            .addTimeWindow(TimeWindow.newInstance(0., 10.))
-            .addTimeWindow(TimeWindow.newInstance(5., 30.))
-            .setName("name").build();
+                        .addTimeWindow(TimeWindow.newInstance(0., 10.))
+                        .addTimeWindow(TimeWindow.newInstance(5., 30.))
+                        .setName("name").build();
     }
 
     @Test(expected = IllegalArgumentException.class)
     public void whenMultipleTWOverlap2_throwEx() {
         Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
-            .addTimeWindow(TimeWindow.newInstance(20., 30.))
-            .addTimeWindow(TimeWindow.newInstance(0., 25.))
-            .setName("name").build();
+                        .addTimeWindow(TimeWindow.newInstance(20., 30.))
+                        .addTimeWindow(TimeWindow.newInstance(0., 25.))
+                        .setName("name").build();
     }
 
     @Test
     public void whenSettingPriorities_itShouldBeSetCorrectly() {
         Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
-            .setPriority(1).build();
+                        .setPriority(1).build();
         Assert.assertEquals(1, s.getPriority());
     }
 
     @Test
     public void whenSettingPriorities_itShouldBeSetCorrectly2() {
         Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
-            .setPriority(3).build();
+                        .setPriority(3).build();
         Assert.assertEquals(3, s.getPriority());
     }
 
     @Test
     public void whenNotSettingPriorities_defaultShouldBe2() {
         Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
-            .build();
+                        .build();
         Assert.assertEquals(2, s.getPriority());
     }
 
     @Test(expected = IllegalArgumentException.class)
     public void whenSettingIncorrectPriorities_itShouldThrowException() {
         Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
-            .setPriority(30).build();
+                        .setPriority(30).build();
 
     }
 
     @Test(expected = IllegalArgumentException.class)
     public void whenSettingIncorrectPriorities_itShouldThrowException2() {
         Service s = new Service.Builder("s").setLocation(Location.newInstance("loc"))
-            .setPriority(0).build();
+                        .setPriority(0).build();
 
     }
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/TestVehicleRoute.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/TestVehicleRoute.java
index e0d3f5550..dd8104b2f 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/TestVehicleRoute.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/TestVehicleRoute.java
@@ -87,7 +87,8 @@ public void whenBuildingRouteWithNulls_itThrowsException() {
     @Test
     public void whenBuildingANonEmptyTour2Times_tourIterIteratesOverActivitiesCorrectly() {
         VehicleRoute.Builder routeBuilder = VehicleRoute.Builder.newInstance(vehicle, driver);
-        routeBuilder.addService(new Service.Builder("2").addSizeDimension(0, 30).setLocation(Location.newInstance("1")).build());
+        Location loc = Location.newInstance("1");
+        routeBuilder.addService(new Service.Builder("2").addSizeDimension(0, 30).setLocation(loc).build());
         VehicleRoute route = routeBuilder.build();
 
         {
@@ -101,9 +102,9 @@ public void whenBuildingANonEmptyTour2Times_tourIterIteratesOverActivitiesCorrec
             assertEquals(1, count);
         }
         {
-            Service service = new Service.Builder("3").build();
+            Service service = new Service.Builder("3").setLocation(loc).build();
             ServiceActivityNEW serviceAct = new ServiceActivityNEW(service, "service",
-                            Location.newInstance("1"),
+                            loc,
                             0d, SizeDimension.Builder.newInstance().addDimension(0, 30).build(),
                             TimeWindows.ANY_TIME.getTimeWindows());
             route.getTourActivities().addActivity(serviceAct);
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivityTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivityTest.java
index f229951e6..5babd1d95 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivityTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivityTest.java
@@ -93,9 +93,9 @@ public void whenCopyingStart_itShouldBeDoneCorrectly() {
 
     @Test
     public void whenTwoDeliveriesHaveTheSameUnderlyingJob_theyAreEqual() {
-        Service s1 = new Service.Builder("s").build();
-        Service s2 = new Service.Builder("s").build();
         Location loc = Location.newInstance("loc");
+        Service s1 = new Service.Builder("s").setLocation(loc).build();
+        Service s2 = new Service.Builder("s").setLocation(loc).build();
         ServiceActivityNEW d1 = new ServiceActivityNEW(s1, "s1",
                         loc, 0d, SizeDimension.EMPTY,
                         TimeWindows.ANY_TIME.getTimeWindows());
@@ -108,9 +108,9 @@ public void whenTwoDeliveriesHaveTheSameUnderlyingJob_theyAreEqual() {
 
     @Test
     public void whenTwoDeliveriesHaveTheDifferentUnderlyingJob_theyAreNotEqual() {
-        Service s1 = new Service.Builder("s").build();
-        Service s2 = new Service.Builder("s2").build();
         Location loc = Location.newInstance("loc");
+        Service s1 = new Service.Builder("s").setLocation(loc).build();
+        Service s2 = new Service.Builder("s2").setLocation(loc).build();
         ServiceActivityNEW d1 = new ServiceActivityNEW(s1, "s1",
                         loc, 0d, SizeDimension.EMPTY,
                         TimeWindows.ANY_TIME.getTimeWindows());
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TestTourActivities.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TestTourActivities.java
index 45650d3f1..f65542457 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TestTourActivities.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TestTourActivities.java
@@ -38,8 +38,8 @@
 
     @Before
     public void doBefore() {
-        Service service = new Service.Builder("yo").build();
         Location loc = Location.newInstance("loc");
+        service = new Service.Builder("yo").setLocation(loc).build();
         act = new ServiceActivityNEW(service, "s1",
                         loc, 0d, SizeDimension.Builder.newInstance().addDimension(0, 10).build(),
                         TimeWindows.ANY_TIME.getTimeWindows());
