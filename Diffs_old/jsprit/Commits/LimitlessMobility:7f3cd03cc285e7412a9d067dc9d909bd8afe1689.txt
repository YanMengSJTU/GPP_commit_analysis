diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/CostMatrixExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/CostMatrixExample.java
index 157c685da..f9fdb8469 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/CostMatrixExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/CostMatrixExample.java
@@ -17,24 +17,38 @@
  */
 package com.graphhopper.jsprit.examples;
 
+import com.google.gson.JsonIOException;
 import com.graphhopper.jsprit.analysis.toolbox.Plotter;
 import com.graphhopper.jsprit.core.algorithm.VehicleRoutingAlgorithm;
-import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
+import com.graphhopper.jsprit.core.analysis.SolutionAnalyser;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem.FleetSize;
+import com.graphhopper.jsprit.core.problem.cost.TransportDistance;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingTransportCosts;
 import com.graphhopper.jsprit.core.problem.job.Service;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
+import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
+import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleImpl;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleType;
 import com.graphhopper.jsprit.core.problem.vehicle.VehicleTypeImpl;
 import com.graphhopper.jsprit.core.reporting.SolutionPrinter;
+import com.graphhopper.jsprit.core.util.Coordinate;
 import com.graphhopper.jsprit.core.util.Solutions;
 import com.graphhopper.jsprit.core.util.VehicleRoutingTransportCostsMatrix;
+import com.graphhopper.jsprit.examples.HereAPIs.LocationAPI;
+import com.graphhopper.jsprit.examples.HereAPIs.Locations;
+import com.graphhopper.jsprit.io.algorithm.VehicleRoutingAlgorithms;
+import com.graphhopper.jsprit.io.problem.VrpXMLWriter;
 import com.graphhopper.jsprit.util.Examples;
 
+import java.io.IOException;
+import java.util.ArrayList;
 import java.util.Collection;
+import java.util.List;
+
+import org.json.simple.parser.ParseException;
 
 
 /**
@@ -44,41 +58,60 @@
  */
 public class CostMatrixExample {
 
-    public static void main(String[] args) {
+    public static void main(String[] args) throws JsonIOException, NumberFormatException, ParseException, IOException {
         /*
          * some preparation - create output folder
-		 */
+         */
         Examples.createOutputFolder();
 
-        VehicleType type = VehicleTypeImpl.Builder.newInstance("type").addCapacityDimension(0, 2).setCostPerDistance(1).setCostPerTime(2).build();
+        @SuppressWarnings("deprecation")
+		VehicleType type = VehicleTypeImpl.Builder.newInstance("type").addCapacityDimension(0, 2).setCostPerDistance(1).setCostPerTime(2.0).build();
         VehicleImpl vehicle = VehicleImpl.Builder.newInstance("vehicle")
             .setStartLocation(Location.newInstance("0")).setType(type).build();
 
-        Service s1 = Service.Builder.newInstance("1").addSizeDimension(0, 1).setLocation(Location.newInstance("1")).build();
-        Service s2 = Service.Builder.newInstance("2").addSizeDimension(0, 1).setLocation(Location.newInstance("2")).build();
-        Service s3 = Service.Builder.newInstance("3").addSizeDimension(0, 1).setLocation(Location.newInstance("3")).build();
-
-
-		/*
-         * Assume the following symmetric distance-matrix
-		 * from,to,distance
-		 * 0,1,10.0
-		 * 0,2,20.0
-		 * 0,3,5.0
-		 * 1,2,4.0
-		 * 1,3,1.0
-		 * 2,3,2.0
-		 *
-		 * and this time-matrix
-		 * 0,1,5.0
-		 * 0,2,10.0
-		 * 0,3,2.5
-		 * 1,2,2.0
-		 * 1,3,0.5
-		 * 2,3,1.0
-		 */
+       // Location location = Location.Builder.newInstance().setId("1").setIndex(1).setCoordinate(Coordinate.newInstance(10,12).build();
+        Service s1 = Service.Builder.newInstance("101").addSizeDimension(0, 1).setLocation(Location.newInstance("1")).build();
+        Service s2 = Service.Builder.newInstance("102").addSizeDimension(0, 1).setLocation(Location.newInstance("2")).build();
+        Service s3 = Service.Builder.newInstance("103").addSizeDimension(0, 1).setLocation(Location.newInstance("3")).build();
+
+
+        HereAPIs hereAPI = new HereAPIs();
+        
+        List<HereAPIs.LocationAPI> locationApiList = new ArrayList<HereAPIs.LocationAPI>();
+        
+        LocationAPI locationAPI = hereAPI.new LocationAPI();
+        locationAPI.setId("0");
+        locationAPI.setLatitude("55.218592");
+        locationAPI.setLongitude("25.120694");
+        
+        LocationAPI locationAPI1 = hereAPI.new LocationAPI();
+        locationAPI1.setId("1");
+        locationAPI1.setLatitude("55.145739");
+        locationAPI1.setLongitude("24.982329");
+        
+        LocationAPI locationAPI2 = hereAPI.new LocationAPI();
+        locationAPI2.setId("2");
+        locationAPI2.setLatitude("55.278715");
+        locationAPI2.setLongitude("25.197486");
+        
+        LocationAPI locationAPI3 = hereAPI.new LocationAPI();
+        locationAPI3.setId("3");
+        locationAPI3.setLatitude("55.153904");
+        locationAPI3.setLongitude("24.986100");
+        
+        locationApiList.add(locationAPI);
+        locationApiList.add(locationAPI1);
+        locationApiList.add(locationAPI2);
+        locationApiList.add(locationAPI3);
+        
+        Locations locationsHereAPI = hereAPI.new Locations();
+        locationsHereAPI.setLocations(locationApiList);
+        
+        
+        VehicleRoutingTransportCosts costMatrix = hereAPI.HereDTMatrix_Truck(locationsHereAPI);
+        
         //define a matrix-builder building a symmetric matrix
-        VehicleRoutingTransportCostsMatrix.Builder costMatrixBuilder = VehicleRoutingTransportCostsMatrix.Builder.newInstance(true);
+       /* VehicleRoutingTransportCostsMatrix.Builder costMatrixBuilder = VehicleRoutingTransportCostsMatrix.Builder.newInstance(true);
         costMatrixBuilder.addTransportDistance("0", "1", 10.0);
         costMatrixBuilder.addTransportDistance("0", "2", 20.0);
         costMatrixBuilder.addTransportDistance("0", "3", 5.0);
@@ -93,18 +126,49 @@ public static void main(String[] args) {
         costMatrixBuilder.addTransportTime("1", "3", 1.0);
         costMatrixBuilder.addTransportTime("2", "3", 2.0);
 
-        VehicleRoutingTransportCosts costMatrix = costMatrixBuilder.build();
-
-        VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().setFleetSize(FleetSize.INFINITE).setRoutingCost(costMatrix)
-            .addVehicle(vehicle).addJob(s1).addJob(s2).addJob(s3).build();
-
-        VehicleRoutingAlgorithm vra = Jsprit.createAlgorithm(vrp);
+       VehicleRoutingTransportCosts costMatrix = costMatrixBuilder.build();
+    */
+        final VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().setFleetSize(FleetSize.INFINITE).setRoutingCost(costMatrix)
+            .addVehicle(vehicle).addJob(s1).addJob(s2).addJob(s3).addLocation("0", Coordinate.newInstance(55.218592,25.120694)).addLocation("1", Coordinate.newInstance(55.145739,24.982329))
+            .addLocation("2", Coordinate.newInstance(55.278715,25.197486)).addLocation("3", Coordinate.newInstance(55.153904,24.986100))
+            .build();
 
+       // VehicleRoutingAlgorithm vra = Jsprit.createAlgorithm(vrp);
+        //VehicleRoutingAlgorithm vra    = VehicleRoutingAlgorithms.readAndCreateAlgorithm(vrp, "D:\\output/algorithmConfig_greedyWithRegret.xml");
+        VehicleRoutingAlgorithm vra       = VehicleRoutingAlgorithms.readAndCreateAlgorithm(vrp, "D:\\JSprit/JSprit1.1/jsprit-master/jsprit-master/jsprit-examples/input/algorithmConfig_solomon.xml");
         Collection<VehicleRoutingProblemSolution> solutions = vra.searchSolutions();
-
-        SolutionPrinter.print(Solutions.bestOf(solutions));
-
-        new Plotter(vrp, Solutions.bestOf(solutions)).plot("output/yo.png", "po");
+        VehicleRoutingProblemSolution bestSolution1 = Solutions.bestOf(solutions);
+       // SolutionPrinter.print(Solutions.bestOf(solutions));
+        SolutionAnalyser solAnylser = new SolutionAnalyser(vrp,bestSolution1,new TransportDistance()
+        {
+            @Override
+            public double getDistance(Location from, Location to, double departureTime, Vehicle vehicle)
+            {
+                return vrp.getTransportCosts().getTransportCost(from, to, 0., null, null);
+            }
+        });
+        //Get distance per route
+        System.out.print("Distance per route:");
+        for (VehicleRoute route : bestSolution1.getRoutes()) {
+        	System.out.print("Distance" + solAnylser.getDistance(route) + " , ");
+        	System.out.print("Variable Cost" +solAnylser.getVariableTransportCosts(route) + " , ");
+        	System.out.print("Travel Time" +solAnylser.getTransportTime(route) + " , ");
+        }
+        //Get distance for entire solution:
+        System.out.print("Total Distance: " + solAnylser.getDistance());
+        System.out.println("The Total Cost:" + solAnylser.getTotalCosts());
+        
+       
+        new VrpXMLWriter(vrp, solutions).write("D:\\output/problem-with-solution.xml");
+
+        SolutionPrinter.print(vrp, bestSolution1, SolutionPrinter.Print.VERBOSE);
+
+        
+        new Plotter(vrp,bestSolution1).plot("D:\\output/plot.png","simple example");
+
+       // new GraphStreamViewer(vrp, bestSolution1).labelWith(Label.ID).setRenderDelay(0).display();
+
+        //new Plotter(vrp, Solutions.bestOf(solutions)).plot("output/yo.png", "po");
 
     }
 
