diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java
index 7196b61ee..d3848db51 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/SolutionPrinter.java
@@ -50,7 +50,7 @@
 import com.graphhopper.jsprit.core.reporting.vehicle.VehicleRouteTimeWindowPrinterColumn;
 import com.graphhopper.jsprit.core.reporting.vehicle.VehicleShiftDurationPrinterColumn;
 import com.graphhopper.jsprit.core.reporting.vehicle.VehicleShiftTimeWindowPrinterColumn;
-import com.graphhopper.jsprit.core.reporting.vehicle.VehicleStatisticsContext;
+import com.graphhopper.jsprit.core.reporting.vehicle.VehicleSummaryContext;
 import com.graphhopper.jsprit.core.reporting.vehicle.VehicleTravelDurationPrinterColumn;
 import com.graphhopper.jsprit.core.reporting.vehicle.VehicleTruckNamePrinterColumn;
 import com.graphhopper.jsprit.core.reporting.vehicle.VehicleTypePrinterColumn;
@@ -178,7 +178,7 @@ public static void print(PrintWriter out, VehicleRoutingProblem problem, Vehicle
     private static void printVerbose(PrintWriter out, VehicleRoutingProblem problem, VehicleRoutingProblemSolution solution,
                     PrinterColumnList<RoutePrinterContext> columns) {
 
-        ConfigurableTablePrinter<RoutePrinterContext> tablePrinter = buildTablePrinter(problem, solution, columns);
+        ConfigurableTablePrinter<RoutePrinterContext> tablePrinter = buildRouteDetailsTable(problem, solution, columns);
         out.println(tablePrinter.print());
 
         if (!solution.getUnassignedJobs().isEmpty()) {
@@ -194,7 +194,7 @@ private static void printVerbose(PrintWriter out, VehicleRoutingProblem problem,
             out.println(unassignedTablePrinter.print());
         }
 
-        PrinterColumnList<VehicleStatisticsContext> vehicleColumns = new PrinterColumnList<VehicleStatisticsContext>();
+        PrinterColumnList<VehicleSummaryContext> vehicleColumns = new PrinterColumnList<VehicleSummaryContext>();
         vehicleColumns.addColumn(new VehicleRouteNumberPrinterColumn())
         .addColumn(new VehicleTruckNamePrinterColumn())
         .addColumn(new VehicleTypePrinterColumn())
@@ -231,19 +231,100 @@ private static void printVerbose(PrintWriter out, VehicleRoutingProblem problem,
         .addColumn(new VehicleIdleDurationPrinterColumn().withDisplayMode(Mode.HUMAN_READABLE))
         .addColumn(new VehicleIdleDurationPrinterColumn().withDisplayMode(Mode.PERCENT_ROUTE))
         .addColumn(new VehicleIdleDurationPrinterColumn().withDisplayMode(Mode.PERCENT_SHIFT));
-        ConfigurableTablePrinter<VehicleStatisticsContext> vehicleTablePrinter = new ConfigurableTablePrinter<>(vehicleColumns);
+        ConfigurableTablePrinter<VehicleSummaryContext> vehicleTablePrinter = buildVehicleSummaryTable(problem, solution,
+                        vehicleColumns);
+        System.out.println(vehicleTablePrinter.print());
 
-        List<VehicleRoute> list = new ArrayList<>(solution.getRoutes());
-        Collections.sort(list, new com.graphhopper.jsprit.core.util.VehicleIndexComparator());
-        int rn = 1;
-        for (VehicleRoute route : list) {
-            vehicleTablePrinter.addRow(new VehicleStatisticsContext(rn++, route, problem));
+    }
+
+    private static Map<Class<? extends Job>, Long> getNuOfJobs(VehicleRoutingProblem problem) {
+        return problem.getJobs().values().stream()
+                        .map(j -> (Class<? extends Job>) j.getClass())
+                        .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));
+    }
+
+    // New print functions (TODO old ones should be migrated into these)
+
+    /**
+     * Prints costs and #vehicles to the given writer
+     *
+     * @param out
+     *            the destination writer
+     * @param solution
+     *            the solution to be printed
+     * @return
+     */
+
+    public static void printSummary(VehicleRoutingProblem problem, VehicleRoutingProblemSolution solution) {
+        printSummary(SYSTEM_OUT_AS_PRINT_WRITER, problem, solution);
+        SYSTEM_OUT_AS_PRINT_WRITER.flush();
+    }
+
+    public static void printSummary(PrintWriter out, VehicleRoutingProblem problem, VehicleRoutingProblemSolution solution) {
+
+        DynamicTableDefinition problemTableDef = new DynamicTableDefinition.Builder()
+                        .withHeading("Problem")
+                        .addColumn(new ColumnDefinition.Builder(new StringColumnType(), "indicator")
+                                        .build())
+                        .addColumn(new ColumnDefinition.Builder(new StringColumnType(), "value")
+                                        .build())
+                        .build();
+
+        DynamicTablePrinter problemTablePrinter = new DynamicTablePrinter(problemTableDef);
+        problemTablePrinter.addRow().add("fleetsize").add(problem.getFleetSize());
+        problemTablePrinter.addSeparator();
+        problemTablePrinter.addRow().add("noJobs").add(problem.getJobs().values().size());
+        for (Entry<Class<? extends Job>, Long> jc : getNuOfJobs(problem).entrySet()) {
+            problemTablePrinter.addRow().add("   " + jc.getKey().getSimpleName())
+            .add(jc.getValue());
         }
-        System.out.println(vehicleTablePrinter.print());
+        out.println(problemTablePrinter.print());
+
+        DynamicTableDefinition solutionTableDef = new DynamicTableDefinition.Builder()
+                        .withHeading("Solution")
+                        .addColumn(new ColumnDefinition.Builder(new StringColumnType(), "indicator")
+                                        .build())
+                        .addColumn(new ColumnDefinition.Builder(new StringColumnType(), "value")
+                                        .build())
+                        .build();
 
+        DynamicTablePrinter solutionTablePrinter = new DynamicTablePrinter(solutionTableDef);
+        solutionTablePrinter.addRow().add("costs")
+        .add(String.format("%6.2f", solution.getCost()).trim());
+        solutionTablePrinter.addRow().add("noVehicles").add(solution.getRoutes().size());
+        solutionTablePrinter.addRow().add("unassignedJobs").add(solution.getUnassignedJobs().size());
+        out.println(solutionTablePrinter.print());
     }
 
-    protected static ConfigurableTablePrinter<RoutePrinterContext> buildTablePrinter(VehicleRoutingProblem problem,
+    // ----------------------------------------------------------
+
+    public static void printRouteDetails(VehicleRoutingProblem problem, VehicleRoutingProblemSolution solution,
+                    PrinterColumnList<RoutePrinterContext> columns) {
+        printRouteDetails(SYSTEM_OUT_AS_PRINT_WRITER, problem, solution, columns);
+        SYSTEM_OUT_AS_PRINT_WRITER.flush();
+    }
+
+    public static void printRouteDetails(PrintWriter out, VehicleRoutingProblem problem, VehicleRoutingProblemSolution solution,
+                    PrinterColumnList<RoutePrinterContext> columns) {
+
+        ConfigurableTablePrinter<RoutePrinterContext> tablePrinter = buildRouteDetailsTable(problem, solution, columns);
+        out.println(tablePrinter.print());
+
+        if (!solution.getUnassignedJobs().isEmpty()) {
+            DynamicTableDefinition unassignedTableDef = new DynamicTableDefinition.Builder().withHeading("Unassigned jobs")
+                            .addColumn(new ColumnDefinition.Builder(new StringColumnType(), "id").withMinWidth(10).build())
+                            .addColumn(new ColumnDefinition.Builder(new StringColumnType(), "type").build()).build();
+
+            DynamicTablePrinter unassignedTablePrinter = new DynamicTablePrinter(unassignedTableDef);
+
+            for (Job j : solution.getUnassignedJobs()) {
+                unassignedTablePrinter.addRow().add(j.getId()).add(j.getClass().getSimpleName());
+            }
+            out.println(unassignedTablePrinter.print());
+        }
+    }
+
+    protected static ConfigurableTablePrinter<RoutePrinterContext> buildRouteDetailsTable(VehicleRoutingProblem problem,
                     VehicleRoutingProblemSolution solution, PrinterColumnList<RoutePrinterContext> columns) {
         ConfigurableTablePrinter<RoutePrinterContext> tablePrinter = new ConfigurableTablePrinter<>(columns);
         int routeNu = 1;
@@ -271,16 +352,45 @@ private static void printVerbose(PrintWriter out, VehicleRoutingProblem problem,
         return tablePrinter;
     }
 
-    private static Map<Class<? extends Job>, Long> getNuOfJobs(VehicleRoutingProblem problem) {
-        return problem.getJobs().values().stream()
-                        .map(j -> (Class<? extends Job>) j.getClass())
-                        .collect(Collectors.groupingBy(Function.identity(), Collectors.counting()));
+    public static String exportRouteDetails(VehicleRoutingProblem problem, VehicleRoutingProblemSolution solution,
+                    PrinterColumnList<RoutePrinterContext> columns, CsvConfig csvConfig) {
+        ConfigurableTablePrinter<RoutePrinterContext> table = buildRouteDetailsTable(problem, solution, columns);
+        return table.exportToCsv(csvConfig);
     }
 
-    public static String export(VehicleRoutingProblem problem, VehicleRoutingProblemSolution solution,
-                    PrinterColumnList<RoutePrinterContext> columns, CsvConfig csvConfig) {
-        ConfigurableTablePrinter<RoutePrinterContext> table = buildTablePrinter(problem, solution, columns);
+    // ----------------------------------------------------------
+
+    public static void printVehicleSummary(VehicleRoutingProblem problem, VehicleRoutingProblemSolution solution,
+                    PrinterColumnList<VehicleSummaryContext> columns) {
+        printVehicleSummary(SYSTEM_OUT_AS_PRINT_WRITER, problem, solution, columns);
+        SYSTEM_OUT_AS_PRINT_WRITER.flush();
+    }
+
+    public static void printVehicleSummary(PrintWriter out, VehicleRoutingProblem problem, VehicleRoutingProblemSolution solution,
+                    PrinterColumnList<VehicleSummaryContext> columns) {
+
+        ConfigurableTablePrinter<VehicleSummaryContext> vehicleTablePrinter = buildVehicleSummaryTable(problem, solution, columns);
+        out.println(vehicleTablePrinter.print());
+    }
+
+    public static String exportVehicleSummary(VehicleRoutingProblem problem, VehicleRoutingProblemSolution solution,
+                    PrinterColumnList<VehicleSummaryContext> columns, CsvConfig csvConfig) {
+        ConfigurableTablePrinter<VehicleSummaryContext> table = buildVehicleSummaryTable(problem, solution, columns);
         return table.exportToCsv(csvConfig);
     }
 
+    protected static ConfigurableTablePrinter<VehicleSummaryContext> buildVehicleSummaryTable(VehicleRoutingProblem problem,
+                    VehicleRoutingProblemSolution solution, PrinterColumnList<VehicleSummaryContext> columns) {
+        ConfigurableTablePrinter<VehicleSummaryContext> vehicleTablePrinter = new ConfigurableTablePrinter<>(columns);
+
+        List<VehicleRoute> list = new ArrayList<>(solution.getRoutes());
+        Collections.sort(list, new com.graphhopper.jsprit.core.util.VehicleIndexComparator());
+        int rn = 1;
+        for (VehicleRoute route : list) {
+            vehicleTablePrinter.addRow(new VehicleSummaryContext(rn++, route, problem));
+        }
+        return vehicleTablePrinter;
+    }
+
+
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/AbstractVehicleDurationPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/AbstractVehicleDurationPrinterColumn.java
index d709a929e..24c8b66d2 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/AbstractVehicleDurationPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/AbstractVehicleDurationPrinterColumn.java
@@ -27,7 +27,7 @@
  * @See {@linkplain HumanReadableTimeFormatter}
  */
 public abstract class AbstractVehicleDurationPrinterColumn<T extends AbstractVehicleDurationPrinterColumn<T>>
-extends AbstractPrinterColumn<VehicleStatisticsContext, String, AbstractVehicleDurationPrinterColumn<T>> {
+extends AbstractPrinterColumn<VehicleSummaryContext, String, AbstractVehicleDurationPrinterColumn<T>> {
 
     public enum Mode {
         NUMERIC(""), HUMAN_READABLE(" (H)"), PERCENT_ROUTE(" (R%)"), PERCENT_SHIFT(" (S%)");
@@ -152,7 +152,7 @@ public T withPercentDecimalDigits(int digits) {
      *
      */
     @Override
-    public String getData(VehicleStatisticsContext context) {
+    public String getData(VehicleSummaryContext context) {
         Long timeValue = getValue(context);
         if (timeValue == null) {
             return null;
@@ -183,6 +183,6 @@ private String formatPercent(Long timeValue, long total) {
      *            The context.
      * @return The numerical value or null.
      */
-    protected abstract Long getValue(VehicleStatisticsContext context);
+    protected abstract Long getValue(VehicleSummaryContext context);
 
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/AbstractVehicleTimeWindowPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/AbstractVehicleTimeWindowPrinterColumn.java
index 0b0f6bd1c..98d976387 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/AbstractVehicleTimeWindowPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/AbstractVehicleTimeWindowPrinterColumn.java
@@ -30,7 +30,7 @@
  * @See {@linkplain HumanReadableTimeFormatter}
  */
 public abstract class AbstractVehicleTimeWindowPrinterColumn<T extends AbstractVehicleTimeWindowPrinterColumn<T>>
-extends AbstractPrinterColumn<VehicleStatisticsContext, String, AbstractVehicleTimeWindowPrinterColumn<T>>
+extends AbstractPrinterColumn<VehicleSummaryContext, String, AbstractVehicleTimeWindowPrinterColumn<T>>
 implements HumanReadableEnabled<T> {
 
     // The time formatter to use (only used when humanReadable flag is true)
@@ -96,7 +96,7 @@ protected String getDefaultTitle() {
      *
      */
     @Override
-    public String getData(VehicleStatisticsContext context) {
+    public String getData(VehicleSummaryContext context) {
         Collection<TimeWindow> timeWindows = getValue(context);
         if (timeWindows == null || timeWindows.isEmpty()) {
             return null;
@@ -148,6 +148,6 @@ protected String formatTimeWindow(TimeWindow tw) {
      *            The context.
      * @return The collection of time windows.
      */
-    protected abstract Collection<TimeWindow> getValue(VehicleStatisticsContext context);
+    protected abstract Collection<TimeWindow> getValue(VehicleSummaryContext context);
 
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleActiveDurationPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleActiveDurationPrinterColumn.java
index 4e5be29a5..b6a08db74 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleActiveDurationPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleActiveDurationPrinterColumn.java
@@ -38,7 +38,7 @@ protected String getDefaultTitleBase() {
     }
 
     @Override
-    public Long getValue(VehicleStatisticsContext context) {
+    public Long getValue(VehicleSummaryContext context) {
         return context.getActiveDuration();
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleActivityCountPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleActivityCountPrinterColumn.java
index 2a51e1c07..2f64e43df 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleActivityCountPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleActivityCountPrinterColumn.java
@@ -19,7 +19,7 @@
  *
  */
 public class VehicleActivityCountPrinterColumn
-                extends AbstractPrinterColumn<VehicleStatisticsContext, Integer, VehicleActivityCountPrinterColumn> {
+                extends AbstractPrinterColumn<VehicleSummaryContext, Integer, VehicleActivityCountPrinterColumn> {
 
     /**
      * Constructor.
@@ -41,7 +41,7 @@ protected Builder getColumnBuilder() {
     }
 
     @Override
-    public Integer getData(VehicleStatisticsContext context) {
+    public Integer getData(VehicleSummaryContext context) {
         return context.getActivityCount();
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleActivityTypeCountPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleActivityTypeCountPrinterColumn.java
index a55439730..c8dfdcc45 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleActivityTypeCountPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleActivityTypeCountPrinterColumn.java
@@ -19,7 +19,7 @@
  *
  */
 public class VehicleActivityTypeCountPrinterColumn
-                extends AbstractPrinterColumn<VehicleStatisticsContext, Integer, VehicleActivityTypeCountPrinterColumn> {
+                extends AbstractPrinterColumn<VehicleSummaryContext, Integer, VehicleActivityTypeCountPrinterColumn> {
 
     private String activityType = "";
 
@@ -48,7 +48,7 @@ protected Builder getColumnBuilder() {
     }
 
     @Override
-    public Integer getData(VehicleStatisticsContext context) {
+    public Integer getData(VehicleSummaryContext context) {
         return context.getActivityCountByType().getOrDefault(activityType, 0);
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleAllActivityTypeCountPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleAllActivityTypeCountPrinterColumn.java
index c808b5a9e..aa4f94db1 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleAllActivityTypeCountPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleAllActivityTypeCountPrinterColumn.java
@@ -19,7 +19,7 @@
  *
  */
 public class VehicleAllActivityTypeCountPrinterColumn
-extends AbstractPrinterColumn<VehicleStatisticsContext, String, VehicleAllActivityTypeCountPrinterColumn> {
+extends AbstractPrinterColumn<VehicleSummaryContext, String, VehicleAllActivityTypeCountPrinterColumn> {
 
     /**
      * Constructor.
@@ -41,7 +41,7 @@ protected Builder getColumnBuilder() {
     }
 
     @Override
-    public String getData(VehicleStatisticsContext context) {
+    public String getData(VehicleSummaryContext context) {
         return context.getActivityCountByType().entrySet().stream()
                         .map(en -> "[" + en.getKey() + "=" + en.getValue() + "]")
                         .collect(Collectors.joining());
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleDriverNamePrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleDriverNamePrinterColumn.java
index 2dc1bcc75..a47d06916 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleDriverNamePrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleDriverNamePrinterColumn.java
@@ -15,7 +15,7 @@
  *
  * @author balage
  */
-public class VehicleDriverNamePrinterColumn extends AbstractPrinterColumn<VehicleStatisticsContext, String, VehicleDriverNamePrinterColumn> {
+public class VehicleDriverNamePrinterColumn extends AbstractPrinterColumn<VehicleSummaryContext, String, VehicleDriverNamePrinterColumn> {
 
     /**
      * Constructor.
@@ -42,7 +42,7 @@ protected String getDefaultTitle() {
     }
 
     @Override
-    public String getData(VehicleStatisticsContext context) {
+    public String getData(VehicleSummaryContext context) {
         return context.getDriver().getId();
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleIdleDurationPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleIdleDurationPrinterColumn.java
index 613482f58..1a5980984 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleIdleDurationPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleIdleDurationPrinterColumn.java
@@ -38,7 +38,7 @@ protected String getDefaultTitleBase() {
     }
 
     @Override
-    public Long getValue(VehicleStatisticsContext context) {
+    public Long getValue(VehicleSummaryContext context) {
         return context.getIdleDuration();
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleOperationDurationPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleOperationDurationPrinterColumn.java
index 104a85654..1bf46ba4f 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleOperationDurationPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleOperationDurationPrinterColumn.java
@@ -38,7 +38,7 @@ protected String getDefaultTitleBase() {
     }
 
     @Override
-    public Long getValue(VehicleStatisticsContext context) {
+    public Long getValue(VehicleSummaryContext context) {
         return context.getOperationDuration();
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleRouteDurationPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleRouteDurationPrinterColumn.java
index c9377cae7..501787ab8 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleRouteDurationPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleRouteDurationPrinterColumn.java
@@ -38,7 +38,7 @@ protected String getDefaultTitleBase() {
     }
 
     @Override
-    public Long getValue(VehicleStatisticsContext context) {
+    public Long getValue(VehicleSummaryContext context) {
         return context.getRouteDuration();
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleRouteNumberPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleRouteNumberPrinterColumn.java
index 15c9556b5..e9084f706 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleRouteNumberPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleRouteNumberPrinterColumn.java
@@ -15,7 +15,7 @@
  *
  * @author balage
  */
-public class VehicleRouteNumberPrinterColumn extends AbstractPrinterColumn<VehicleStatisticsContext, Integer, VehicleRouteNumberPrinterColumn> {
+public class VehicleRouteNumberPrinterColumn extends AbstractPrinterColumn<VehicleSummaryContext, Integer, VehicleRouteNumberPrinterColumn> {
 
     /**
      * Constructor.
@@ -42,7 +42,7 @@ protected String getDefaultTitle() {
     }
 
     @Override
-    public Integer getData(VehicleStatisticsContext context) {
+    public Integer getData(VehicleSummaryContext context) {
         return context.getRouteNr();
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleRouteTimeWindowPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleRouteTimeWindowPrinterColumn.java
index e737ad669..2e3b4525d 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleRouteTimeWindowPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleRouteTimeWindowPrinterColumn.java
@@ -35,7 +35,7 @@ public VehicleRouteTimeWindowPrinterColumn(Consumer<ColumnDefinition.Builder> de
     }
 
     @Override
-    protected Collection<TimeWindow> getValue(VehicleStatisticsContext context) {
+    protected Collection<TimeWindow> getValue(VehicleSummaryContext context) {
         return Collections.singleton(new TimeWindow(context.getStart(), context.getEnd()));
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleShiftDurationPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleShiftDurationPrinterColumn.java
index 443bc19fc..47cdce73a 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleShiftDurationPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleShiftDurationPrinterColumn.java
@@ -38,7 +38,7 @@ protected String getDefaultTitleBase() {
     }
 
     @Override
-    public Long getValue(VehicleStatisticsContext context) {
+    public Long getValue(VehicleSummaryContext context) {
         return context.getShiftDuration();
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleShiftTimeWindowPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleShiftTimeWindowPrinterColumn.java
index 40066684e..7590eb138 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleShiftTimeWindowPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleShiftTimeWindowPrinterColumn.java
@@ -35,7 +35,7 @@ public VehicleShiftTimeWindowPrinterColumn(Consumer<ColumnDefinition.Builder> de
     }
 
     @Override
-    protected Collection<TimeWindow> getValue(VehicleStatisticsContext context) {
+    protected Collection<TimeWindow> getValue(VehicleSummaryContext context) {
         return Collections.singleton(
                         new TimeWindow(context.getVehicle().getEarliestDeparture(), context.getVehicle().getLatestArrival()));
     }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleSummaryColumnLists.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleSummaryColumnLists.java
new file mode 100644
index 000000000..3c338ee5d
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleSummaryColumnLists.java
@@ -0,0 +1,152 @@
+package com.graphhopper.jsprit.core.reporting.vehicle;
+
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.Collections;
+import java.util.EnumMap;
+import java.util.List;
+
+import com.graphhopper.jsprit.core.reporting.AbstractPrinterColumn;
+import com.graphhopper.jsprit.core.reporting.PrinterColumnList;
+import com.graphhopper.jsprit.core.reporting.columndefinition.HumanReadableDurationFormatter;
+import com.graphhopper.jsprit.core.reporting.columndefinition.HumanReadableEnabled;
+import com.graphhopper.jsprit.core.reporting.columndefinition.HumanReadableTimeFormatter;
+import com.graphhopper.jsprit.core.reporting.vehicle.AbstractVehicleDurationPrinterColumn.Mode;
+
+/**
+ * Utility class to provide predefined column lists for Solution printing.
+ *
+ * @author balage
+ *
+ */
+public class VehicleSummaryColumnLists {
+
+    /**
+     * The predefined column sets.
+     *
+     * @author balage
+     *
+     */
+    public enum PredefinedList {
+        /**
+         * A minimal column set.
+         */
+        MINIMAL,
+        /**
+         * A general, most often used column set.
+         */
+        DEFAULT,
+        /**
+         * A verbose column set containing all columns.
+         */
+        VERBOSE
+    }
+
+    private static final EnumMap<PredefinedList, List<Class<? extends AbstractPrinterColumn<VehicleSummaryContext, ?, ?>>>> COLUMNS;
+
+    static {
+        COLUMNS = new EnumMap<>(PredefinedList.class);
+        List<Class<? extends AbstractPrinterColumn<VehicleSummaryContext, ?, ?>>> minimalSet = new ArrayList<>();
+        minimalSet.add(VehicleRouteNumberPrinterColumn.class);
+        minimalSet.add(VehicleTruckNamePrinterColumn.class);
+        minimalSet.add(VehicleAllActivityTypeCountPrinterColumn.class);
+        minimalSet.add(VehicleRouteDurationPrinterColumn.class);
+        minimalSet.add(VehicleActiveDurationPrinterColumn.class);
+        COLUMNS.put(PredefinedList.MINIMAL, minimalSet);
+
+        List<Class<? extends AbstractPrinterColumn<VehicleSummaryContext, ?, ?>>> defaultSet = new ArrayList<>();
+        defaultSet.add(VehicleRouteNumberPrinterColumn.class);
+        defaultSet.add(VehicleTruckNamePrinterColumn.class);
+        defaultSet.add(VehicleAllActivityTypeCountPrinterColumn.class);
+        defaultSet.add(VehicleRouteTimeWindowPrinterColumn.class);
+        defaultSet.add(VehicleRouteDurationPrinterColumn.class);
+        defaultSet.add(VehicleTravelDurationPrinterColumn.class);
+        defaultSet.add(VehicleOperationDurationPrinterColumn.class);
+        defaultSet.add(VehicleActiveDurationPrinterColumn.class);
+        defaultSet.add(VehicleIdleDurationPrinterColumn.class);
+        COLUMNS.put(PredefinedList.DEFAULT, defaultSet);
+
+        List<Class<? extends AbstractPrinterColumn<VehicleSummaryContext, ?, ?>>> verboseSet = new ArrayList<>();
+        verboseSet.add(VehicleRouteNumberPrinterColumn.class);
+        verboseSet.add(VehicleTruckNamePrinterColumn.class);
+        verboseSet.add(VehicleTypePrinterColumn.class);
+        verboseSet.add(VehicleDriverNamePrinterColumn.class);
+        verboseSet.add(VehicleActivityCountPrinterColumn.class);
+        verboseSet.add(VehicleAllActivityTypeCountPrinterColumn.class);
+        verboseSet.add(VehicleShiftTimeWindowPrinterColumn.class);
+        verboseSet.add(VehicleShiftDurationPrinterColumn.class);
+        verboseSet.add(VehicleRouteTimeWindowPrinterColumn.class);
+        verboseSet.add(VehicleRouteDurationPrinterColumn.class);
+        verboseSet.add(VehicleTravelDurationPrinterColumn.class);
+        verboseSet.add(VehicleOperationDurationPrinterColumn.class);
+        verboseSet.add(VehicleActiveDurationPrinterColumn.class);
+        verboseSet.add(VehicleIdleDurationPrinterColumn.class);
+        COLUMNS.put(PredefinedList.VERBOSE, verboseSet);
+    }
+
+    public static PrinterColumnList<VehicleSummaryContext> getNumeric(PredefinedList listType) {
+        return getList(listType, Collections.singletonList(Mode.NUMERIC), false, null, null);
+    }
+
+    public static PrinterColumnList<VehicleSummaryContext> getHumanReadable(PredefinedList listType) {
+        return getList(listType, Collections.singletonList(Mode.HUMAN_READABLE), true, null, null);
+    }
+
+    public static PrinterColumnList<VehicleSummaryContext> getMultiple(PredefinedList listType, Mode... durationModes) {
+        List<Mode> modes = Arrays.asList(durationModes);
+        return getMultiple(listType, modes);
+    }
+
+    public static PrinterColumnList<VehicleSummaryContext> getMultiple(PredefinedList listType, List<Mode> durationModes) {
+        return getList(listType, durationModes, durationModes.contains(Mode.HUMAN_READABLE), null, null);
+    }
+
+    /**
+     * Generates the list.
+     *
+     * @param listType
+     *            The id of the list.
+     * @param humanReadable
+     *            Whether human readable format should be used
+     * @param timeFormatter
+     *            The formatter to use (if null, the default will be used)
+     * @return The generated column list.
+     */
+    public static PrinterColumnList<VehicleSummaryContext> getList(PredefinedList listType, List<Mode> durationModes,
+                    boolean humanReadableTimeWindows, HumanReadableTimeFormatter timeWindowTimeFormatter,
+                    HumanReadableDurationFormatter durationFormatter) {
+        PrinterColumnList<VehicleSummaryContext> res = new PrinterColumnList<>();
+
+        for (Class<? extends AbstractPrinterColumn<VehicleSummaryContext, ?, ?>> c : COLUMNS.get(listType)) {
+            try {
+                if (AbstractVehicleDurationPrinterColumn.class.isAssignableFrom(c)) {
+                    for(Mode mode : durationModes) {
+                        AbstractVehicleDurationPrinterColumn<?> col = (AbstractVehicleDurationPrinterColumn<?>) c.newInstance();
+                        if (durationFormatter != null) {
+                            col.withFormatter(durationFormatter);
+                        }
+                        col.withDisplayMode(mode);
+                        res.addColumn(col);
+                    }
+                } else {
+                    AbstractPrinterColumn<VehicleSummaryContext, ?, ?> col = c.newInstance();
+                    if (humanReadableTimeWindows && col instanceof HumanReadableEnabled) {
+                        HumanReadableEnabled<?> hrCol = (HumanReadableEnabled<?>) col;
+                        hrCol.asHumanReadable();
+                        if (durationFormatter != null) {
+                            hrCol.withFormatter(durationFormatter);
+                        }
+                    }
+                    res.addColumn(col);
+                }
+            } catch (InstantiationException | IllegalAccessException e) {
+                // Technically you can't get here as long as all column
+                // implementation has default constructor
+                throw new IllegalStateException(e);
+            }
+        }
+
+        return res;
+    }
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleStatisticsContext.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleSummaryContext.java
similarity index 96%
rename from jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleStatisticsContext.java
rename to jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleSummaryContext.java
index 5028b9ca2..4b3505172 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleStatisticsContext.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleSummaryContext.java
@@ -12,7 +12,7 @@
 import com.graphhopper.jsprit.core.problem.vehicle.Vehicle;
 import com.graphhopper.jsprit.core.reporting.PrinterContext;
 
-public class VehicleStatisticsContext implements PrinterContext {
+public class VehicleSummaryContext implements PrinterContext {
     private Vehicle vehicle;
     private Driver driver;
     private int routeNr;
@@ -25,7 +25,7 @@
     private long breakDuration;
     private long travelDistance;
 
-    public VehicleStatisticsContext(int routeNr, VehicleRoute route, VehicleRoutingProblem problem) {
+    public VehicleSummaryContext(int routeNr, VehicleRoute route, VehicleRoutingProblem problem) {
         this.routeNr = routeNr;
         vehicle = route.getVehicle();
         driver = route.getDriver();
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleTravelDurationPrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleTravelDurationPrinterColumn.java
index 952aff0d3..0b2fb7a70 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleTravelDurationPrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleTravelDurationPrinterColumn.java
@@ -38,7 +38,7 @@ protected String getDefaultTitleBase() {
     }
 
     @Override
-    public Long getValue(VehicleStatisticsContext context) {
+    public Long getValue(VehicleSummaryContext context) {
         return context.getTravelDuration();
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleTruckNamePrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleTruckNamePrinterColumn.java
index 6535f73d1..726fb82af 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleTruckNamePrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleTruckNamePrinterColumn.java
@@ -15,7 +15,7 @@
  *
  * @author balage
  */
-public class VehicleTruckNamePrinterColumn extends AbstractPrinterColumn<VehicleStatisticsContext, String, VehicleTruckNamePrinterColumn> {
+public class VehicleTruckNamePrinterColumn extends AbstractPrinterColumn<VehicleSummaryContext, String, VehicleTruckNamePrinterColumn> {
 
     /**
      * Constructor.
@@ -42,7 +42,7 @@ protected String getDefaultTitle() {
     }
 
     @Override
-    public String getData(VehicleStatisticsContext context) {
+    public String getData(VehicleSummaryContext context) {
         return context.getVehicle().getId();
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleTypePrinterColumn.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleTypePrinterColumn.java
index 87dbfe028..ea6035c6b 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleTypePrinterColumn.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/reporting/vehicle/VehicleTypePrinterColumn.java
@@ -15,7 +15,7 @@
  *
  * @author balage
  */
-public class VehicleTypePrinterColumn extends AbstractPrinterColumn<VehicleStatisticsContext, String, VehicleTypePrinterColumn> {
+public class VehicleTypePrinterColumn extends AbstractPrinterColumn<VehicleSummaryContext, String, VehicleTypePrinterColumn> {
 
     /**
      * Constructor.
@@ -42,7 +42,7 @@ protected String getDefaultTitle() {
     }
 
     @Override
-    public String getData(VehicleStatisticsContext context) {
+    public String getData(VehicleSummaryContext context) {
         return context.getVehicle().getType().getTypeId();
     }
 
