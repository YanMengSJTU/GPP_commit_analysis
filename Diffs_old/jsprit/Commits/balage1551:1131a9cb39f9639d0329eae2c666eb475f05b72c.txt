diff --git a/docs/2.0/MigrationGuide.md b/docs/2.0/MigrationGuide.md
new file mode 100644
index 000000000..045ddd069
--- /dev/null
+++ b/docs/2.0/MigrationGuide.md
@@ -0,0 +1,21 @@
+# Migration guide
+
+The new version of the Jsprit library made deep changes on the key structure. Although we made effort to keep as much as of these changes under the hood, there are some code breaking changes in the new version.
+
+This guide helps you to migrate your code to the new version. The first part of the guide helps you make your code run again as small an effort and as quick as it is possible, without migrating to the new data structure. The second part gives you some hints, how to move your code and your data structure to meet the new version. Although you can get a running code without this migration, the legacy classes backing this partial solution are deprecated and are going to be removed in future versions.
+
+## Chapter 1: The quick guide to make your code run again
+
+To help the third party developers to quickly and painlessly migrate to the new version, the current version of the library contains several legacy classes. They has the same (or as close to the original as it was possible to achieve) API as the ones in the previous version. These classes are now marked as deprecated and mostly facades over the new structure. 
+
+> **Although by completing these migration steps, you are likely to get a running code, keep in mind that these legacy implementations are in the library only temporally and are going to be removed in some future version.**
+
+### Chapter 2: Prepare for the future
+
+In this step, we give you guided help how to completely get rid of the legacy classes and move
+
+### Capacity to SizeDimension
+
+The `Capacity` class is renamed to `SizeDimension`. For backward compatibility, the `SizeDimension` class extends the now deprecated `Capacity` class. This let you use the `Capacity` class as variable type anywhere  the value is read out. Also, the `Capacity.Builder` creates a `SizeDimension` class under the hood, so when a `Capacity` object is created it is really a `SizeDimension`.
+
+This makes this rename transparent as far as code correctness goes. However, the `Capacity` class may be removed in the future, so it is strongly recommended to rename all references to `Capacity` to `SizeDimension`.
\ No newline at end of file
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractJob.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractJob.java
index 677988230..0938279a8 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractJob.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractJob.java
@@ -46,7 +46,6 @@
  */
 public abstract class AbstractJob implements Job {
 
-
     /**
      * Base builder for all direct descendants.
      * <p>
@@ -66,15 +65,17 @@
      * your own abstract Builder class. The signature of your abstract builder
      * should be something like this (<i>self referencing generics</i>):
      * <p>
+     *
      * <pre>
      * public static abstract class BuilderBase&lt;T extends MyJob, B extends BuilderBase&lt;T, B>>
-     *                 extends JobBuilder&lt;T, B> {
+     *         extends JobBuilder&lt;T, B> {
      * }
      * </pre>
      * <p>
      * This implenetation should contain all new fields, the new setters
      * following the pattern:
      * <p>
+     *
      * <pre>
      * &#64;SuppressWarnings("unchecked")
      * public B setField(FieldType field) {
@@ -100,6 +101,7 @@
      * the answer of this topic</a> for more information about the pitfalls of
      * the self-refering generics pattern):
      * <p>
+     *
      * <pre>
      * public static class Builder extends BuilderBase&lt;MyJob, Builder> {
      *     public Builder(String id) {
@@ -131,6 +133,8 @@
 
         protected int priority = 2;
 
+        protected Object userData;
+
         public JobBuilder(String id) {
             if (id == null)
                 throw new IllegalArgumentException("id must not be null");
@@ -140,10 +144,13 @@ public JobBuilder(String id) {
         /**
          * Adds capacity dimension.
          *
-         * @param dimensionIndex the dimension index of the capacity value
-         * @param dimensionValue the capacity value
+         * @param dimensionIndex
+         *            the dimension index of the capacity value
+         * @param dimensionValue
+         *            the capacity value
          * @return the builder
-         * @throws IllegalArgumentException if dimensionValue < 0
+         * @throws IllegalArgumentException
+         *             if dimensionValue < 0
          */
         @SuppressWarnings("unchecked")
         public B addSizeDimension(int dimensionIndex, int dimensionValue) {
@@ -153,6 +160,12 @@ public B addSizeDimension(int dimensionIndex, int dimensionValue) {
             return (B) this;
         }
 
+        @SuppressWarnings("unchecked")
+        protected B addUserData(Object userData) {
+            this.userData = userData;
+            return (B) this;
+        }
+
         @SuppressWarnings("unchecked")
         public B addRequiredSkill(String skill) {
             skillBuilder.addSkill(skill);
@@ -194,7 +207,7 @@ public B addAllSizeDimensions(SizeDimension size) {
         public B setPriority(int priority) {
             if (priority < 1 || priority > 10)
                 throw new IllegalArgumentException(
-                                "incorrect priority. only priority values from 1 to 10 are allowed where 1 = high and 10 is low");
+                        "incorrect priority. only priority values from 1 to 10 are allowed where 1 = high and 10 is low");
             this.priority = priority;
             return (B) this;
         }
@@ -244,6 +257,10 @@ public int getPriority() {
             return priority;
         }
 
+        public Object getUserData() {
+            return userData;
+        }
+
     }
 
     private int index;
@@ -266,21 +283,25 @@ public int getPriority() {
 
     private SizeDimension sizeAtEnd;
 
-
+    private Object userData;
 
     /**
      * Builder based constructor.
      *
-     * @param builder The builder instance.
+     * @param builder
+     *            The builder instance.
      * @see JobBuilder
      */
     protected AbstractJob(JobBuilder<?, ?> builder) {
-        super();
         activityList = new SequentialJobActivityList(this);
         id = builder.getId();
         skills = builder.getSkills();
         name = builder.getName();
         priority = builder.getPriority();
+        userData = builder.getUserData();
+    }
+
+    AbstractJob() {
     }
 
     @Override
@@ -292,6 +313,12 @@ public void setIndex(int index) {
         this.index = index;
     }
 
+    /**
+     * @return User-specific domain data associated by the job
+     */
+    public Object getUserData() {
+        return userData;
+    }
 
     private void addLocation(Location location) {
         if (location != null) {
@@ -320,8 +347,10 @@ private SizeDimension calcSizeAt(boolean start) {
         for (JobActivity act : activityList.getAll()) {
             size = size.add(act.getLoadChange());
         }
-        if (start) return size.getNegativeDimensions().abs();
-        else return size.getPositiveDimensions();
+        if (start)
+            return size.getNegativeDimensions().abs();
+        else
+            return size.getPositiveDimensions();
     }
 
     private void addTimeWindows(Collection<TimeWindow> timeWindows) {
@@ -390,9 +419,8 @@ public JobActivityList getActivityList() {
         return activityList;
     }
 
-
     @Override
-    public Set<TimeWindow> getTimeWindows() {
+    public Collection<TimeWindow> getTimeWindows() {
         return allTimeWindows;
     }
 
@@ -416,6 +444,4 @@ public int getPriority() {
         return priority;
     }
 
-
 }
-
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Job.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Job.java
index ed7a6c84c..c78200685 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Job.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Job.java
@@ -18,8 +18,8 @@
 package com.graphhopper.jsprit.core.problem.job;
 
 
+import java.util.Collection;
 import java.util.List;
-import java.util.Set;
 
 import com.graphhopper.jsprit.core.problem.HasId;
 import com.graphhopper.jsprit.core.problem.HasIndex;
@@ -86,6 +86,6 @@
     /**
      * @return All operation time windows
      */
-    public Set<TimeWindow> getTimeWindows();
+    public Collection<TimeWindow> getTimeWindows();
 
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/legacy/Service.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/LegacyService.java
similarity index 92%
rename from jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/legacy/Service.java
rename to jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/LegacyService.java
index 0ea5a76d4..47a389696 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/legacy/Service.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/LegacyService.java
@@ -15,7 +15,7 @@
  * See the License for the specific language governing permissions and
  * limitations under the License.
  */
-package com.graphhopper.jsprit.core.problem.job.legacy;
+package com.graphhopper.jsprit.core.problem.job;
 
 import java.util.Collection;
 
@@ -23,11 +23,8 @@
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.Skills;
-import com.graphhopper.jsprit.core.problem.job.CustomJob;
 import com.graphhopper.jsprit.core.problem.job.CustomJob.BuilderBase.ActivityType;
 import com.graphhopper.jsprit.core.problem.job.CustomJob.BuilderBase.BuilderActivityInfo;
-import com.graphhopper.jsprit.core.problem.job.Delivery;
-import com.graphhopper.jsprit.core.problem.job.Pickup;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.ServiceActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindowsImpl;
@@ -100,14 +97,14 @@
  * @see {@linkplain CustomJob.BuilderBase.BuilderActivityInfo}
  */
 @Deprecated
-public class Service extends AbstractJob {
+public class LegacyService extends AbstractJob {
 
     /**
      * Builder that builds a service.
      *
      * @author schroeder
      */
-    public static class Builder<T extends Service> {
+    public static class Builder<T extends LegacyService> {
 
         /**
          * Returns a new instance of builder that builds a service.
@@ -148,6 +145,7 @@ public static Builder newInstance(String id) {
         private boolean twAdded = false;
 
         private int priority = 2;
+
         protected Object userData;
 
         Builder(String id){
@@ -159,7 +157,7 @@ public static Builder newInstance(String id) {
         /**
          * Protected method to set the type-name of the service.
          * <p>
-         * <p>Currently there are {@link Service}, {@link Pickup} and {@link Delivery}.
+         * <p>Currently there are {@link LegacyService}, {@link Pickup} and {@link Delivery}.
          *
          * @param name the name of service
          * @return the builder
@@ -254,7 +252,7 @@ public static Builder newInstance(String id) {
         /**
          * Builds the service.
          *
-         * @return {@link Service}
+         * @return {@link LegacyService}
          * @throws IllegalArgumentException if neither locationId nor coordinate is set.
          */
         public T build() {
@@ -262,7 +260,7 @@ public T build() {
             this.setType("service");
             capacity = capacityBuilder.build();
             skills = skillBuilder.build();
-            return (T) new Service(this);
+            return (T) new LegacyService(this);
         }
 
         public Builder<T> addRequiredSkill(String skill) {
@@ -309,10 +307,9 @@ public T build() {
     private CustomJob theRealJob;
     private ServiceActivity theRealActivity;
 
-    Service(Builder<?> builder) {
-        setUserData(builder.userData);
+    LegacyService(Builder<?> builder) {
         BuilderActivityInfo activityInfo = new BuilderActivityInfo(ActivityType.SERVICE,
-                        builder.location);
+                builder.location);
 
         activityInfo.withName(builder.name);
         activityInfo.withOperationTime(builder.serviceTime);
@@ -322,15 +319,17 @@ public T build() {
         activityInfo.withTimeWindows(builder.timeWindows.getTimeWindows());
 
         com.graphhopper.jsprit.core.problem.job.CustomJob.Builder customJobBuilder = new CustomJob.Builder(
-                        builder.id);
+                builder.id);
         customJobBuilder.addActivity(activityInfo).addAllRequiredSkills(builder.skills)
         .setName(builder.name)
+        .addUserData(builder.userData)
         .setPriority(builder.priority);
         theRealJob = customJobBuilder.build();
         theRealActivity = (ServiceActivity) theRealJob.getActivityList().getAll().get(0);
     }
 
-    public Collection<TimeWindow> getTimeWindows(){
+    @Override
+    public Collection<TimeWindow> getTimeWindows() {
         return theRealJob.getTimeWindows();
     }
 
@@ -384,8 +383,8 @@ public String getType() {
     @Override
     public String toString() {
         return "[id=" + getId() + "][name=" + getName() + "][type=" + getType() + "][location="
-                        + getLocation() + "][capacity=" + getSize() + "][serviceTime="
-                        + getServiceDuration() + "][timeWindow=" + getTimeWindow() + "]";
+                + getLocation() + "][capacity=" + getSize() + "][serviceTime="
+                + getServiceDuration() + "][timeWindow=" + getTimeWindow() + "]";
     }
 
 
@@ -408,7 +407,7 @@ public boolean equals(Object obj) {
             return false;
         if (getClass() != obj.getClass())
             return false;
-        Service other = (Service) obj;
+        LegacyService other = (LegacyService) obj;
         if (getId() == null) {
             if (other.getId() != null)
                 return false;
@@ -418,7 +417,7 @@ public boolean equals(Object obj) {
     }
 
     @Override
-    public Capacity getSize() {
+    public SizeDimension getSize() {
         return theRealActivity.getLoadSize();
     }
 
@@ -444,4 +443,14 @@ public int getPriority() {
         return theRealJob.getPriority();
     }
 
+    @Override
+    public Object getUserData() {
+        return theRealJob.getUserData();
+    }
+
+    @Override
+    protected void createActivities(JobBuilder<? extends AbstractJob, ?> jobBuilder) {
+        // This is unused being a legacy implementation
+    }
+
 }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/legacy/AbstractJob.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/legacy/AbstractJob.java
deleted file mode 100644
index 2a15cbb13..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/legacy/AbstractJob.java
+++ /dev/null
@@ -1,50 +0,0 @@
-/*
- * Licensed to GraphHopper GmbH under one or more contributor
- * license agreements. See the NOTICE file distributed with this work for
- * additional information regarding copyright ownership.
- *
- * GraphHopper GmbH licenses this file to you under the Apache License,
- * Version 2.0 (the "License"); you may not use this file except in
- * compliance with the License. You may obtain a copy of the License at
- *
- *       http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-
-package com.graphhopper.jsprit.core.problem.job.legacy;
-
-
-/**
- * Created by schroeder on 14.07.14.
- */
-public abstract class AbstractJob implements Job {
-
-    private int index;
-    private Object userData;
-
-    @Override
-    public int getIndex() {
-        return index;
-    }
-
-    protected void setIndex(int index) {
-        this.index = index;
-    }
-
-    /**
-     * @return User-specific domain data associated by the job
-     */
-    public Object getUserData() {
-        return userData;
-    }
-
-    protected void setUserData(Object userData) {
-        this.userData = userData;
-    }
-
-}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/legacy/Job.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/legacy/Job.java
deleted file mode 100644
index c3a7449ca..000000000
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/legacy/Job.java
+++ /dev/null
@@ -1,66 +0,0 @@
-/*
- * Licensed to GraphHopper GmbH under one or more contributor
- * license agreements. See the NOTICE file distributed with this work for
- * additional information regarding copyright ownership.
- *
- * GraphHopper GmbH licenses this file to you under the Apache License,
- * Version 2.0 (the "License"); you may not use this file except in
- * compliance with the License. You may obtain a copy of the License at
- *
- *       http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.graphhopper.jsprit.core.problem.job.legacy;
-
-
-import com.graphhopper.jsprit.core.problem.Capacity;
-import com.graphhopper.jsprit.core.problem.HasId;
-import com.graphhopper.jsprit.core.problem.HasIndex;
-import com.graphhopper.jsprit.core.problem.Skills;
-
-/**
- * Basic interface for all jobs.
- *
- * @author schroeder
- */
-public interface Job extends HasId, HasIndex {
-
-    /**
-     * Returns the unique identifier (id) of a job.
-     *
-     * @return id
-     */
-    @Override
-    public String getId();
-
-    /**
-     * Returns size, i.e. capacity-demand, of this job which can consist of an arbitrary number of capacity dimensions.
-     *
-     * @return Capacity
-     */
-    public Capacity getSize();
-
-    public Skills getRequiredSkills();
-
-    /**
-     * Returns name.
-     *
-     * @return name
-     */
-    public String getName();
-
-    /**
-     * Get priority of job. Only 1 = high priority, 2 = medium and 3 = low are allowed.
-     * <p>
-     * Default is 2 = medium.
-     *
-     * @return priority
-     */
-    public int getPriority();
-
-}
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/legacy/ServiceTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/legacy/LegacyServiceTest.java
similarity index 65%
rename from jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/legacy/ServiceTest.java
rename to jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/legacy/LegacyServiceTest.java
index eb7c3ff09..4d1cd267d 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/legacy/ServiceTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/legacy/LegacyServiceTest.java
@@ -35,31 +35,32 @@
 import org.junit.Test;
 
 import com.graphhopper.jsprit.core.problem.Location;
+import com.graphhopper.jsprit.core.problem.job.LegacyService;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 
-public class ServiceTest {
+public class LegacyServiceTest {
 
     @Test
     public void whenTwoServicesHaveTheSameId_theirReferencesShouldBeUnEqual() {
-        Service one = Service.Builder.newInstance("service").addSizeDimension(0, 10).setLocation(Location.newInstance("foo")).build();
-        Service two = Service.Builder.newInstance("service").addSizeDimension(0, 10).setLocation(Location.newInstance("fo")).build();
+        LegacyService one = LegacyService.Builder.newInstance("service").addSizeDimension(0, 10).setLocation(Location.newInstance("foo")).build();
+        LegacyService two = LegacyService.Builder.newInstance("service").addSizeDimension(0, 10).setLocation(Location.newInstance("fo")).build();
 
         assertTrue(one != two);
     }
 
     @Test
     public void whenTwoServicesHaveTheSameId_theyShouldBeEqual() {
-        Service one = Service.Builder.newInstance("service").addSizeDimension(0, 10).setLocation(Location.newInstance("foo")).build();
-        Service two = Service.Builder.newInstance("service").addSizeDimension(0, 10).setLocation(Location.newInstance("fo")).build();
+        LegacyService one = LegacyService.Builder.newInstance("service").addSizeDimension(0, 10).setLocation(Location.newInstance("foo")).build();
+        LegacyService two = LegacyService.Builder.newInstance("service").addSizeDimension(0, 10).setLocation(Location.newInstance("fo")).build();
 
         assertTrue(one.equals(two));
     }
 
     @Test
     public void noName() {
-        Set<Service> serviceSet = new HashSet<Service>();
-        Service one = Service.Builder.newInstance("service").addSizeDimension(0, 10).setLocation(Location.newInstance("foo")).build();
-        Service two = Service.Builder.newInstance("service").addSizeDimension(0, 10).setLocation(Location.newInstance("fo")).build();
+        Set<LegacyService> serviceSet = new HashSet<LegacyService>();
+        LegacyService one = LegacyService.Builder.newInstance("service").addSizeDimension(0, 10).setLocation(Location.newInstance("foo")).build();
+        LegacyService two = LegacyService.Builder.newInstance("service").addSizeDimension(0, 10).setLocation(Location.newInstance("fo")).build();
         serviceSet.add(one);
         // assertTrue(serviceSet.contains(two));
         serviceSet.remove(two);
@@ -69,19 +70,19 @@ public void noName() {
     @Test(expected = IllegalArgumentException.class)
     public void whenCapacityDimValueIsNegative_throwIllegalStateExpception() {
         @SuppressWarnings("unused")
-        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("foo")).addSizeDimension(0, -10).build();
+        LegacyService s = LegacyService.Builder.newInstance("s").setLocation(Location.newInstance("foo")).addSizeDimension(0, -10).build();
     }
 
     @Test
     public void whenAddingTwoCapDimension_nuOfDimsShouldBeTwo() {
-        Service one = Service.Builder.newInstance("s").setLocation(Location.newInstance("foofoo"))
+        LegacyService one = LegacyService.Builder.newInstance("s").setLocation(Location.newInstance("foofoo"))
                         .addSizeDimension(0, 2).addSizeDimension(1, 4).build();
         assertEquals(2, one.getSize().getNuOfDimensions());
     }
 
     @Test
     public void whenShipmentIsBuiltWithoutSpecifyingCapacity_itShouldHvCapWithOneDimAndDimValOfZero() {
-        Service one = Service.Builder.newInstance("s").setLocation(Location.newInstance("foofoo"))
+        LegacyService one = LegacyService.Builder.newInstance("s").setLocation(Location.newInstance("foofoo"))
                         .build();
         assertEquals(1, one.getSize().getNuOfDimensions());
         assertEquals(0, one.getSize().get(0));
@@ -89,7 +90,7 @@ public void whenShipmentIsBuiltWithoutSpecifyingCapacity_itShouldHvCapWithOneDim
 
     @Test
     public void whenShipmentIsBuiltWithConstructorWhereSizeIsSpecified_capacityShouldBeSetCorrectly() {
-        Service one = Service.Builder.newInstance("s").addSizeDimension(0, 1).setLocation(Location.newInstance("foofoo"))
+        LegacyService one = LegacyService.Builder.newInstance("s").addSizeDimension(0, 1).setLocation(Location.newInstance("foofoo"))
                         .build();
         assertEquals(1, one.getSize().getNuOfDimensions());
         assertEquals(1, one.getSize().get(0));
@@ -97,26 +98,26 @@ public void whenShipmentIsBuiltWithConstructorWhereSizeIsSpecified_capacityShoul
 
     @Test
     public void whenCallingForNewInstanceOfBuilder_itShouldReturnBuilderCorrectly() {
-        Service.Builder builder = Service.Builder.newInstance("s");
+        LegacyService.Builder builder = LegacyService.Builder.newInstance("s");
         assertNotNull(builder);
     }
 
     @Test
     public void whenSettingNoType_itShouldReturn_service() {
-        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc")).build();
+        LegacyService s = LegacyService.Builder.newInstance("s").setLocation(Location.newInstance("loc")).build();
         assertEquals("service", s.getType());
     }
 
     @Test
     public void whenSettingLocation_itShouldBeSetCorrectly() {
-        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc")).build();
+        LegacyService s = LegacyService.Builder.newInstance("s").setLocation(Location.newInstance("loc")).build();
         assertEquals("loc", s.getLocation().getId());
         assertEquals("loc", s.getLocation().getId());
     }
 
     @Test
     public void whenSettingLocation_itShouldWork() {
-        Service s = Service.Builder.newInstance("s").setLocation(Location.Builder.newInstance().setId("loc").build()).build();
+        LegacyService s = LegacyService.Builder.newInstance("s").setLocation(Location.Builder.newInstance().setId("loc").build()).build();
         assertEquals("loc", s.getLocation().getId());
         assertEquals("loc", s.getLocation().getId());
     }
@@ -124,7 +125,7 @@ public void whenSettingLocation_itShouldWork() {
 
     @Test
     public void whenSettingLocationCoord_itShouldBeSetCorrectly(){
-        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance(1, 2)).build();
+        LegacyService s = LegacyService.Builder.newInstance("s").setLocation(Location.newInstance(1, 2)).build();
         assertEquals(1.0,s.getLocation().getCoordinate().getX(),0.01);
         assertEquals(2.0,s.getLocation().getCoordinate().getY(),0.01);
         assertEquals(1.0,s.getLocation().getCoordinate().getX(),0.01);
@@ -134,37 +135,37 @@ public void whenSettingLocationCoord_itShouldBeSetCorrectly(){
     @Test(expected=IllegalArgumentException.class)
     public void whenSettingNeitherLocationIdNorCoord_throwsException(){
         @SuppressWarnings("unused")
-        Service s = Service.Builder.newInstance("s").build();
+        LegacyService s = LegacyService.Builder.newInstance("s").build();
     }
 
     @Test(expected=IllegalArgumentException.class)
     public void whenServiceTimeSmallerZero_throwIllegalStateException(){
         @SuppressWarnings("unused")
-        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc")).setServiceTime(-1).build();
+        LegacyService s = LegacyService.Builder.newInstance("s").setLocation(Location.newInstance("loc")).setServiceTime(-1).build();
     }
 
     @Test
     public void whenSettingServiceTime_itShouldBeSetCorrectly(){
-        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc")).setServiceTime(1).build();
+        LegacyService s = LegacyService.Builder.newInstance("s").setLocation(Location.newInstance("loc")).setServiceTime(1).build();
         assertEquals(1.0,s.getServiceDuration(),0.01);
     }
 
     @Test(expected=IllegalArgumentException.class)
     public void whenTimeWindowIsNull_throwException(){
         @SuppressWarnings("unused")
-        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc")).setTimeWindow(null).build();
+        LegacyService s = LegacyService.Builder.newInstance("s").setLocation(Location.newInstance("loc")).setTimeWindow(null).build();
     }
 
     @Test
     public void whenSettingTimeWindow_itShouldBeSetCorrectly(){
-        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc")).setTimeWindow(TimeWindow.newInstance(1.0, 2.0)).build();
+        LegacyService s = LegacyService.Builder.newInstance("s").setLocation(Location.newInstance("loc")).setTimeWindow(TimeWindow.newInstance(1.0, 2.0)).build();
         assertEquals(1.0,s.getTimeWindow().getStart(),0.01);
         assertEquals(2.0,s.getTimeWindow().getEnd(),0.01);
     }
 
     @Test
     public void whenAddingSkills_theyShouldBeAddedCorrectly(){
-        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+        LegacyService s = LegacyService.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
                         .addRequiredSkill("drill").addRequiredSkill("screwdriver").build();
         assertTrue(s.getRequiredSkills().containsSkill("drill"));
         assertTrue(s.getRequiredSkills().containsSkill("drill"));
@@ -173,7 +174,7 @@ public void whenAddingSkills_theyShouldBeAddedCorrectly(){
 
     @Test
     public void whenAddingSkillsCaseSens_theyShouldBeAddedCorrectly(){
-        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+        LegacyService s = LegacyService.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
                         .addRequiredSkill("DriLl").addRequiredSkill("screwDriver").build();
         assertTrue(s.getRequiredSkills().containsSkill("drill"));
         assertTrue(s.getRequiredSkills().containsSkill("drilL"));
@@ -183,7 +184,7 @@ public void whenAddingSkillsCaseSens_theyShouldBeAddedCorrectly(){
     public void whenAddingSeveralTimeWindows_itShouldBeSetCorrectly(){
         TimeWindow tw1 = TimeWindow.newInstance(1.0, 2.0);
         TimeWindow tw2 = TimeWindow.newInstance(3.0, 5.0);
-        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+        LegacyService s = LegacyService.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
                         .addTimeWindow(tw1).addTimeWindow(tw2).build();
         assertEquals(2, s.getTimeWindows().size());
         assertThat(s.getTimeWindows(),hasItem(is(tw1)));
@@ -192,7 +193,7 @@ public void whenAddingSeveralTimeWindows_itShouldBeSetCorrectly(){
 
     @Test
     public void whenAddingTimeWindow_itShouldBeSetCorrectly(){
-        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+        LegacyService s = LegacyService.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
                         .addTimeWindow(TimeWindow.newInstance(1.0, 2.0)).build();
         assertEquals(1.0, s.getTimeWindow().getStart(), 0.01);
         assertEquals(2.0, s.getTimeWindow().getEnd(), 0.01);
@@ -203,7 +204,7 @@ public void whenAddingTimeWindow_itShouldBeSetCorrectly(){
 
     @Test
     public void whenAddingSkillsCaseSensV2_theyShouldBeAddedCorrectly() {
-        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+        LegacyService s = LegacyService.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
                         .addRequiredSkill("screwDriver").build();
         assertFalse(s.getRequiredSkills().containsSkill("drill"));
         assertFalse(s.getRequiredSkills().containsSkill("drilL"));
@@ -211,14 +212,14 @@ public void whenAddingSkillsCaseSensV2_theyShouldBeAddedCorrectly() {
 
     @Test
     public void nameShouldBeAssigned() {
-        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+        LegacyService s = LegacyService.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
                         .setName("name").build();
         assertEquals("name", s.getName());
     }
 
     @Test
     public void shouldKnowMultipleTimeWindows(){
-        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+        LegacyService s = LegacyService.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
                         .addTimeWindow(TimeWindow.newInstance(0., 10.))
                         .addTimeWindow(TimeWindow.newInstance(20., 30.)).setName("name").build();
         assertEquals(2,s.getTimeWindows().size());
@@ -226,56 +227,56 @@ public void shouldKnowMultipleTimeWindows(){
 
     @Test(expected = IllegalArgumentException.class)
     public void whenMultipleTWOverlap_throwEx(){
-        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+        LegacyService s = LegacyService.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
                         .addTimeWindow(TimeWindow.newInstance(0., 10.))
                         .addTimeWindow(TimeWindow.newInstance(5., 30.)).setName("name").build();
     }
 
     @Test(expected = IllegalArgumentException.class)
     public void whenMultipleTWOverlap2_throwEx(){
-        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+        LegacyService s = LegacyService.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
                         .addTimeWindow(TimeWindow.newInstance(20., 30.))
                         .addTimeWindow(TimeWindow.newInstance(0., 25.)).setName("name").build();
     }
 
     @Test
     public void whenSettingPriorities_itShouldBeSetCorrectly(){
-        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+        LegacyService s = LegacyService.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
                         .setPriority(1).build();
         Assert.assertEquals(1, s.getPriority());
     }
 
     @Test
     public void whenSettingPriorities_itShouldBeSetCorrectly2(){
-        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+        LegacyService s = LegacyService.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
                         .setPriority(3).build();
         Assert.assertEquals(3, s.getPriority());
     }
 
     @Test
     public void whenSettingPriorities_itShouldBeSetCorrectly3() {
-        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+        LegacyService s = LegacyService.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
                         .setPriority(10).build();
         Assert.assertEquals(10, s.getPriority());
     }
 
     @Test
     public void whenNotSettingPriorities_defaultShouldBe2(){
-        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+        LegacyService s = LegacyService.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
                         .build();
         Assert.assertEquals(2, s.getPriority());
     }
 
     @Test(expected = IllegalArgumentException.class)
     public void whenSettingIncorrectPriorities_itShouldThrowException(){
-        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+        LegacyService s = LegacyService.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
                         .setPriority(30).build();
 
     }
 
     @Test(expected = IllegalArgumentException.class)
     public void whenSettingIncorrectPriorities_itShouldThrowException2(){
-        Service s = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+        LegacyService s = LegacyService.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
                         .setPriority(0).build();
 
     }
@@ -283,11 +284,11 @@ public void whenSettingIncorrectPriorities_itShouldThrowException2(){
 
     @Test
     public void whenSettingUserData_itIsAssociatedWithTheJob() {
-        Service one = Service.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
+        LegacyService one = LegacyService.Builder.newInstance("s").setLocation(Location.newInstance("loc"))
                         .setUserData(new HashMap<String, Object>()).build();
-        Service two = Service.Builder.newInstance("s2").setLocation(Location.newInstance("loc")).setUserData(42)
+        LegacyService two = LegacyService.Builder.newInstance("s2").setLocation(Location.newInstance("loc")).setUserData(42)
                         .build();
-        Service three = Service.Builder.newInstance("s3").setLocation(Location.newInstance("loc")).build();
+        LegacyService three = LegacyService.Builder.newInstance("s3").setLocation(Location.newInstance("loc")).build();
 
         assertTrue(one.getUserData() instanceof Map);
         assertEquals(42, two.getUserData());
