diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/JobInsertionConsideringFixCostsCalculator.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/JobInsertionConsideringFixCostsCalculator.java
index 32dcdbaf4..f56248d6d 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/JobInsertionConsideringFixCostsCalculator.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/recreate/JobInsertionConsideringFixCostsCalculator.java
@@ -18,7 +18,7 @@
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
 import com.graphhopper.jsprit.core.algorithm.state.InternalStates;
-import com.graphhopper.jsprit.core.problem.Capacity;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.constraint.SoftRouteConstraint;
 import com.graphhopper.jsprit.core.problem.driver.Driver;
 import com.graphhopper.jsprit.core.problem.job.Job;
@@ -67,7 +67,7 @@ public InsertionData getInsertionData(final VehicleRoute currentRoute, final Job
     }
 
     private double getFixCostContribution(final VehicleRoute currentRoute, final Job jobToInsert, final Vehicle newVehicle) {
-        Capacity currentMaxLoadInRoute = getCurrentMaxLoadInRoute(currentRoute);
+        SizeDimension currentMaxLoadInRoute = getCurrentMaxLoadInRoute(currentRoute);
         double relFixCost = getDeltaRelativeFixCost(currentRoute, newVehicle, jobToInsert, currentMaxLoadInRoute);
         double absFixCost = getDeltaAbsoluteFixCost(currentRoute, newVehicle, jobToInsert, currentMaxLoadInRoute);
         double deltaFixCost = (1 - solution_completeness_ratio) * relFixCost + solution_completeness_ratio * absFixCost;
@@ -93,8 +93,8 @@ public double getSolutionCompletenessRatio() {
         return solution_completeness_ratio;
     }
 
-    private double getDeltaAbsoluteFixCost(VehicleRoute route, Vehicle newVehicle, Job job, Capacity currentMaxLoadInRoute) {
-        Capacity load = currentMaxLoadInRoute.add(job.getSize());
+    private double getDeltaAbsoluteFixCost(VehicleRoute route, Vehicle newVehicle, Job job, SizeDimension currentMaxLoadInRoute) {
+        SizeDimension load = currentMaxLoadInRoute.add(job.getSize());
         double currentFix = 0.0;
         if (route.getVehicle() != null) {
             if (!(route.getVehicle() instanceof VehicleImpl.NoVehicle)) {
@@ -107,25 +107,25 @@ private double getDeltaAbsoluteFixCost(VehicleRoute route, Vehicle newVehicle, J
         return newVehicle.getType().getVehicleCostParams().fix - currentFix;
     }
 
-    private double getDeltaRelativeFixCost(VehicleRoute route, Vehicle newVehicle, Job job, Capacity currentLoad) {
-        Capacity load = currentLoad.add(job.getSize());
+    private double getDeltaRelativeFixCost(VehicleRoute route, Vehicle newVehicle, Job job, SizeDimension currentLoad) {
+        SizeDimension load = currentLoad.add(job.getSize());
         double currentRelFix = 0.0;
         if (route.getVehicle() != null) {
             if (!(route.getVehicle() instanceof VehicleImpl.NoVehicle)) {
-                currentRelFix += route.getVehicle().getType().getVehicleCostParams().fix * Capacity.divide(currentLoad, route.getVehicle().getType().getCapacityDimensions());
+                currentRelFix += route.getVehicle().getType().getVehicleCostParams().fix * SizeDimension.divide(currentLoad, route.getVehicle().getType().getCapacityDimensions());
             }
         }
         if (!newVehicle.getType().getCapacityDimensions().isGreaterOrEqual(load)) {
             return Double.MAX_VALUE;
         }
-        double relativeFixCost = newVehicle.getType().getVehicleCostParams().fix * (Capacity.divide(load, newVehicle.getType().getCapacityDimensions())) - currentRelFix;
+        double relativeFixCost = newVehicle.getType().getVehicleCostParams().fix * (SizeDimension.divide(load, newVehicle.getType().getCapacityDimensions())) - currentRelFix;
         return relativeFixCost;
     }
 
-    private Capacity getCurrentMaxLoadInRoute(VehicleRoute route) {
-        Capacity maxLoad = stateGetter.getRouteState(route, InternalStates.MAXLOAD, Capacity.class);
+    private SizeDimension getCurrentMaxLoadInRoute(VehicleRoute route) {
+        SizeDimension maxLoad = stateGetter.getRouteState(route, InternalStates.MAXLOAD, SizeDimension.class);
         if (maxLoad == null) {
-            maxLoad = Capacity.Builder.newInstance().build();
+            maxLoad = SizeDimension.Builder.newInstance().build();
         }
         return maxLoad;
     }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateLoads.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateLoads.java
index 7b1c354e2..d4125b9c3 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateLoads.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateLoads.java
@@ -19,7 +19,7 @@
 
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.InsertionStartsListener;
 import com.graphhopper.jsprit.core.algorithm.recreate.listener.JobInsertedListener;
-import com.graphhopper.jsprit.core.problem.Capacity;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.job.Delivery;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.job.Pickup;
@@ -48,21 +48,21 @@
     /*
      * default has one dimension with a value of zero
      */
-    private Capacity currentLoad;
+    private SizeDimension currentLoad;
 
-    private Capacity defaultValue;
+    private SizeDimension defaultValue;
 
     private VehicleRoute route;
 
     public UpdateLoads(StateManager stateManager) {
         super();
         this.stateManager = stateManager;
-        defaultValue = Capacity.Builder.newInstance().build();
+        defaultValue = SizeDimension.Builder.newInstance().build();
     }
 
     @Override
     public void begin(VehicleRoute route) {
-        currentLoad = stateManager.getRouteState(route, InternalStates.LOAD_AT_BEGINNING, Capacity.class);
+        currentLoad = stateManager.getRouteState(route, InternalStates.LOAD_AT_BEGINNING, SizeDimension.class);
         if (currentLoad == null) {
             currentLoad = defaultValue;
         }
@@ -74,17 +74,17 @@ public void visit(TourActivity act) {
         currentLoad = currentLoad.add(act.getSize());
         stateManager.putInternalTypedActivityState(act, InternalStates.LOAD, currentLoad);
         //		assert currentLoad.isLessOrEqual(route.getVehicle().getType().getCapacityDimensions()) : "currentLoad at activity must not be > vehicleCapacity";
-        //		assert currentLoad.isGreaterOrEqual(Capacity.Builder.newInstance().build()) : "currentLoad at act must not be < 0 in one of the applied dimensions";
+        //		assert currentLoad.isGreaterOrEqual(SizeDimension.Builder.newInstance().build()) : "currentLoad at act must not be < 0 in one of the applied dimensions";
     }
 
     @Override
     public void finish() {
-        currentLoad = Capacity.Builder.newInstance().build();
+        currentLoad = SizeDimension.Builder.newInstance().build();
     }
 
     void insertionStarts(VehicleRoute route) {
-        Capacity loadAtDepot = Capacity.Builder.newInstance().build();
-        Capacity loadAtEnd = Capacity.Builder.newInstance().build();
+        SizeDimension loadAtDepot = SizeDimension.Builder.newInstance().build();
+        SizeDimension loadAtEnd = SizeDimension.Builder.newInstance().build();
         for (Job j : route.getTourActivities().getJobs()) {
             if (j instanceof Delivery) {
                 loadAtDepot = loadAtDepot.add(j.getSize());
@@ -106,14 +106,14 @@ public void informInsertionStarts(Collection<VehicleRoute> vehicleRoutes, Collec
     @Override
     public void informJobInserted(Job job2insert, VehicleRoute inRoute, double additionalCosts, double additionalTime) {
         if (job2insert instanceof Delivery) {
-            Capacity loadAtDepot = stateManager.getRouteState(inRoute, InternalStates.LOAD_AT_BEGINNING, Capacity.class);
+            SizeDimension loadAtDepot = stateManager.getRouteState(inRoute, InternalStates.LOAD_AT_BEGINNING, SizeDimension.class);
             if (loadAtDepot == null) {
                 loadAtDepot = defaultValue;
             }
             stateManager.putTypedInternalRouteState(inRoute, InternalStates.LOAD_AT_BEGINNING,
                 loadAtDepot.add(job2insert.getSize()));
         } else if (job2insert instanceof Pickup || job2insert instanceof Service) {
-            Capacity loadAtEnd = stateManager.getRouteState(inRoute, InternalStates.LOAD_AT_END, Capacity.class);
+            SizeDimension loadAtEnd = stateManager.getRouteState(inRoute, InternalStates.LOAD_AT_END, SizeDimension.class);
             if (loadAtEnd == null) {
                 loadAtEnd = defaultValue;
             }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateMaxCapacityUtilisationAtActivitiesByLookingBackwardInRoute.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateMaxCapacityUtilisationAtActivitiesByLookingBackwardInRoute.java
index ef8def7bf..9485d544c 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateMaxCapacityUtilisationAtActivitiesByLookingBackwardInRoute.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateMaxCapacityUtilisationAtActivitiesByLookingBackwardInRoute.java
@@ -17,7 +17,7 @@
  */
 package com.graphhopper.jsprit.core.algorithm.state;
 
-import com.graphhopper.jsprit.core.problem.Capacity;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.ActivityVisitor;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
@@ -34,27 +34,27 @@
 
     private VehicleRoute route;
 
-    private Capacity maxLoad;
+    private SizeDimension maxLoad;
 
-    private Capacity defaultValue;
+    private SizeDimension defaultValue;
 
     public UpdateMaxCapacityUtilisationAtActivitiesByLookingBackwardInRoute(StateManager stateManager) {
         this.stateManager = stateManager;
-        defaultValue = Capacity.Builder.newInstance().build();
+        defaultValue = SizeDimension.Builder.newInstance().build();
     }
 
     @Override
     public void begin(VehicleRoute route) {
         this.route = route;
-        maxLoad = stateManager.getRouteState(route, InternalStates.LOAD_AT_BEGINNING, Capacity.class);
+        maxLoad = stateManager.getRouteState(route, InternalStates.LOAD_AT_BEGINNING, SizeDimension.class);
         if (maxLoad == null) maxLoad = defaultValue;
     }
 
     @Override
     public void visit(TourActivity act) {
-        maxLoad = Capacity.max(maxLoad, stateManager.getActivityState(act, InternalStates.LOAD, Capacity.class));
+        maxLoad = SizeDimension.max(maxLoad, stateManager.getActivityState(act, InternalStates.LOAD, SizeDimension.class));
         stateManager.putInternalTypedActivityState(act, InternalStates.PAST_MAXLOAD, maxLoad);
-//		assert maxLoad.isGreaterOrEqual(Capacity.Builder.newInstance().build()) : "maxLoad can never be smaller than 0";
+//		assert maxLoad.isGreaterOrEqual(SizeDimension.Builder.newInstance().build()) : "maxLoad can never be smaller than 0";
 //		assert maxLoad.isLessOrEqual(route.getVehicle().getType().getCapacityDimensions()) : "maxLoad can never be bigger than vehicleCap";
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateMaxCapacityUtilisationAtActivitiesByLookingForwardInRoute.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateMaxCapacityUtilisationAtActivitiesByLookingForwardInRoute.java
index 3cb5f5e09..73a016886 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateMaxCapacityUtilisationAtActivitiesByLookingForwardInRoute.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateMaxCapacityUtilisationAtActivitiesByLookingForwardInRoute.java
@@ -17,7 +17,7 @@
  */
 package com.graphhopper.jsprit.core.algorithm.state;
 
-import com.graphhopper.jsprit.core.problem.Capacity;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.ReverseActivityVisitor;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
@@ -45,29 +45,29 @@
 
     private VehicleRoute route;
 
-    private Capacity maxLoad;
+    private SizeDimension maxLoad;
 
-    private Capacity defaultValue;
+    private SizeDimension defaultValue;
 
     public UpdateMaxCapacityUtilisationAtActivitiesByLookingForwardInRoute(StateManager stateManager) {
         super();
         this.stateManager = stateManager;
-        defaultValue = Capacity.Builder.newInstance().build();
+        defaultValue = SizeDimension.Builder.newInstance().build();
     }
 
     @Override
     public void begin(VehicleRoute route) {
         this.route = route;
-        maxLoad = stateManager.getRouteState(route, InternalStates.LOAD_AT_END, Capacity.class);
+        maxLoad = stateManager.getRouteState(route, InternalStates.LOAD_AT_END, SizeDimension.class);
         if (maxLoad == null) maxLoad = defaultValue;
     }
 
     @Override
     public void visit(TourActivity act) {
-        maxLoad = Capacity.max(maxLoad, stateManager.getActivityState(act, InternalStates.LOAD, Capacity.class));
+        maxLoad = SizeDimension.max(maxLoad, stateManager.getActivityState(act, InternalStates.LOAD, SizeDimension.class));
         stateManager.putInternalTypedActivityState(act, InternalStates.FUTURE_MAXLOAD, maxLoad);
 //		assert maxLoad.isLessOrEqual(route.getVehicle().getType().getCapacityDimensions()) : "maxLoad can in every capacity dimension never be bigger than vehicleCap";
-//		assert maxLoad.isGreaterOrEqual(Capacity.Builder.newInstance().build()) : "maxLoad can never be smaller than 0";
+//		assert maxLoad.isGreaterOrEqual(SizeDimension.Builder.newInstance().build()) : "maxLoad can never be smaller than 0";
     }
 
     @Override
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateMaxCapacityUtilisationAtRoute.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateMaxCapacityUtilisationAtRoute.java
index 5dabae769..776666612 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateMaxCapacityUtilisationAtRoute.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/algorithm/state/UpdateMaxCapacityUtilisationAtRoute.java
@@ -17,7 +17,7 @@
  */
 package com.graphhopper.jsprit.core.algorithm.state;
 
-import com.graphhopper.jsprit.core.problem.Capacity;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.ActivityVisitor;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
@@ -36,23 +36,23 @@
 
     private StateManager stateManager;
 
-    private Capacity currentLoad = Capacity.Builder.newInstance().build();
+    private SizeDimension currentLoad = SizeDimension.Builder.newInstance().build();
 
     private VehicleRoute route;
 
-    private Capacity maxLoad;
+    private SizeDimension maxLoad;
 
-    private Capacity defaultValue;
+    private SizeDimension defaultValue;
 
     public UpdateMaxCapacityUtilisationAtRoute(StateManager stateManager) {
         super();
         this.stateManager = stateManager;
-        defaultValue = Capacity.Builder.newInstance().build();
+        defaultValue = SizeDimension.Builder.newInstance().build();
     }
 
     @Override
     public void begin(VehicleRoute route) {
-        currentLoad = stateManager.getRouteState(route, InternalStates.LOAD_AT_BEGINNING, Capacity.class);
+        currentLoad = stateManager.getRouteState(route, InternalStates.LOAD_AT_BEGINNING, SizeDimension.class);
         if (currentLoad == null) {
             currentLoad = defaultValue;
         }
@@ -63,7 +63,7 @@ public void begin(VehicleRoute route) {
     @Override
     public void visit(TourActivity act) {
         currentLoad = currentLoad.add(act.getSize());
-        maxLoad = Capacity.max(maxLoad, currentLoad);
+        maxLoad = SizeDimension.max(maxLoad, currentLoad);
     }
 
     @Override
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyser.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyser.java
index 7f3195e4d..6a7103f9b 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyser.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyser.java
@@ -20,7 +20,7 @@
 
 import com.graphhopper.jsprit.core.algorithm.VariablePlusFixedSolutionCostCalculatorFactory;
 import com.graphhopper.jsprit.core.algorithm.state.*;
-import com.graphhopper.jsprit.core.problem.Capacity;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.cost.TransportDistance;
 import com.graphhopper.jsprit.core.problem.cost.VehicleRoutingActivityCosts;
@@ -67,9 +67,9 @@
 
         private int deliverAtEndCounter;
 
-        private Capacity pickedUp;
+        private SizeDimension pickedUp;
 
-        private Capacity delivered;
+        private SizeDimension delivered;
 
         private StateId pickup_count_id;
 
@@ -102,8 +102,8 @@ public void begin(VehicleRoute route) {
             pickupAtBeginningCounter = 0;
             deliveryCounter = 0;
             deliverAtEndCounter = 0;
-            pickedUp = Capacity.Builder.newInstance().build();
-            delivered = Capacity.Builder.newInstance().build();
+            pickedUp = SizeDimension.Builder.newInstance().build();
+            delivered = SizeDimension.Builder.newInstance().build();
         }
 
         @Override
@@ -481,7 +481,7 @@ public void finish() {
     private Double service_time;
     private Double operation_time;
     private Double tw_violation;
-    private Capacity cap_violation;
+    private SizeDimension cap_violation;
     private Double fixed_costs;
     private Double variable_transport_costs;
     private Boolean hasSkillConstraintViolation;
@@ -491,10 +491,10 @@ public void finish() {
     private Integer noPickupsAtBeginning;
     private Integer noDeliveries;
     private Integer noDeliveriesAtEnd;
-    private Capacity pickupLoad;
-    private Capacity pickupLoadAtBeginning;
-    private Capacity deliveryLoad;
-    private Capacity deliveryLoadAtEnd;
+    private SizeDimension pickupLoad;
+    private SizeDimension pickupLoadAtBeginning;
+    private SizeDimension deliveryLoad;
+    private SizeDimension deliveryLoadAtEnd;
 
     private double maxOperationTime;
 
@@ -603,7 +603,7 @@ private void clearSolutionIndicators() {
         service_time = 0.;
         operation_time = 0.;
         tw_violation = 0.;
-        cap_violation = Capacity.Builder.newInstance().build();
+        cap_violation = SizeDimension.Builder.newInstance().build();
         fixed_costs = 0.;
         variable_transport_costs = 0.;
         total_costs = 0.;
@@ -614,10 +614,10 @@ private void clearSolutionIndicators() {
         noPickupsAtBeginning = 0;
         noDeliveries = 0;
         noDeliveriesAtEnd = 0;
-        pickupLoad = Capacity.Builder.newInstance().build();
-        pickupLoadAtBeginning = Capacity.Builder.newInstance().build();
-        deliveryLoad = Capacity.Builder.newInstance().build();
-        deliveryLoadAtEnd = Capacity.Builder.newInstance().build();
+        pickupLoad = SizeDimension.Builder.newInstance().build();
+        pickupLoadAtBeginning = SizeDimension.Builder.newInstance().build();
+        deliveryLoad = SizeDimension.Builder.newInstance().build();
+        deliveryLoadAtEnd = SizeDimension.Builder.newInstance().build();
     }
 
     /**
@@ -634,33 +634,33 @@ public void informSolutionChanged(VehicleRoutingProblemSolution newSolution) {
      * @param route to get the load at beginning from
      * @return load at start location of specified route
      */
-    public Capacity getLoadAtBeginning(VehicleRoute route) {
+    public SizeDimension getLoadAtBeginning(VehicleRoute route) {
         if (route == null) {
             throw new IllegalArgumentException("route is missing.");
         }
-        return stateManager.getRouteState(route, InternalStates.LOAD_AT_BEGINNING, Capacity.class);
+        return stateManager.getRouteState(route, InternalStates.LOAD_AT_BEGINNING, SizeDimension.class);
     }
 
     /**
      * @param route to get the load at the end from
      * @return load at end location of specified route
      */
-    public Capacity getLoadAtEnd(VehicleRoute route) {
+    public SizeDimension getLoadAtEnd(VehicleRoute route) {
         if (route == null) {
             throw new IllegalArgumentException("route is missing.");
         }
-        return stateManager.getRouteState(route, InternalStates.LOAD_AT_END, Capacity.class);
+        return stateManager.getRouteState(route, InternalStates.LOAD_AT_END, SizeDimension.class);
     }
 
     /**
      * @param route to get max load from
      * @return max load of specified route, i.e. for each capacity dimension the max value.
      */
-    public Capacity getMaxLoad(VehicleRoute route) {
+    public SizeDimension getMaxLoad(VehicleRoute route) {
         if (route == null) {
             throw new IllegalArgumentException("route is missing.");
         }
-        return stateManager.getRouteState(route, InternalStates.MAXLOAD, Capacity.class);
+        return stateManager.getRouteState(route, InternalStates.MAXLOAD, SizeDimension.class);
     }
 
     /**
@@ -669,7 +669,7 @@ public Capacity getMaxLoad(VehicleRoute route) {
      * route. If act is End, it returns the load atEnd of specified route.
      * Returns null if no load can be found.
      */
-    public Capacity getLoadRightAfterActivity(TourActivity activity, VehicleRoute route) {
+    public SizeDimension getLoadRightAfterActivity(TourActivity activity, VehicleRoute route) {
         if (route == null) {
             throw new IllegalArgumentException("route is missing.");
         }
@@ -683,7 +683,7 @@ public Capacity getLoadRightAfterActivity(TourActivity activity, VehicleRoute ro
             return getLoadAtEnd(route);
         }
         verifyThatRouteContainsAct(activity, route);
-        return stateManager.getActivityState(activity, InternalStates.LOAD, Capacity.class);
+        return stateManager.getActivityState(activity, InternalStates.LOAD, SizeDimension.class);
     }
 
     private void verifyThatRouteContainsAct(TourActivity activity, VehicleRoute route) {
@@ -697,7 +697,7 @@ private void verifyThatRouteContainsAct(TourActivity activity, VehicleRoute rout
      * @return load just before the specified activity. If act is Start, it returns the load atBeginning of the specified
      * route. If act is End, it returns the load atEnd of specified route.
      */
-    public Capacity getLoadJustBeforeActivity(TourActivity activity, VehicleRoute route) {
+    public SizeDimension getLoadJustBeforeActivity(TourActivity activity, VehicleRoute route) {
         if (route == null) {
             throw new IllegalArgumentException("route is missing.");
         }
@@ -711,7 +711,7 @@ public Capacity getLoadJustBeforeActivity(TourActivity activity, VehicleRoute ro
             return getLoadAtEnd(route);
         }
         verifyThatRouteContainsAct(activity, route);
-        Capacity afterAct = stateManager.getActivityState(activity, InternalStates.LOAD, Capacity.class);
+        SizeDimension afterAct = stateManager.getActivityState(activity, InternalStates.LOAD, SizeDimension.class);
         if (afterAct != null && activity.getSize() != null) {
             return afterAct.subtract(activity.getSize());
         } else if (afterAct != null) {
@@ -747,34 +747,34 @@ public Integer getNumberOfDeliveries(VehicleRoute route) {
      * @param route to get the picked load from
      * @return picked load (without load at beginning)
      */
-    public Capacity getLoadPickedUp(VehicleRoute route) {
+    public SizeDimension getLoadPickedUp(VehicleRoute route) {
         if (route == null) {
             throw new IllegalArgumentException("route is missing.");
         }
-        return stateManager.getRouteState(route, stateManager.createStateId(LOAD_PICKED), Capacity.class);
+        return stateManager.getRouteState(route, stateManager.createStateId(LOAD_PICKED), SizeDimension.class);
     }
 
     /**
      * @param route to get delivered load from
      * @return delivered laod (without load at end)
      */
-    public Capacity getLoadDelivered(VehicleRoute route) {
+    public SizeDimension getLoadDelivered(VehicleRoute route) {
         if (route == null) {
             throw new IllegalArgumentException("route is missing.");
         }
-        return stateManager.getRouteState(route, stateManager.createStateId(LOAD_DELIVERED), Capacity.class);
+        return stateManager.getRouteState(route, stateManager.createStateId(LOAD_DELIVERED), SizeDimension.class);
     }
 
     /**
      * @param route to get the capacity violation from
      * @return the capacity violation on this route, i.e. maxLoad - vehicleCapacity
      */
-    public Capacity getCapacityViolation(VehicleRoute route) {
+    public SizeDimension getCapacityViolation(VehicleRoute route) {
         if (route == null) {
             throw new IllegalArgumentException("route is missing.");
         }
-        Capacity maxLoad = getMaxLoad(route);
-        return Capacity.max(Capacity.Builder.newInstance().build(),
+        SizeDimension maxLoad = getMaxLoad(route);
+        return SizeDimension.max(SizeDimension.Builder.newInstance().build(),
             maxLoad.subtract(route.getVehicle().getType().getCapacityDimensions()));
     }
 
@@ -784,12 +784,12 @@ public Capacity getCapacityViolation(VehicleRoute route) {
      * dimension with dimIndex=0 and dimIndex=1 and dimIndex=1 is violated by 4 units then this method returns
      * [[dimIndex=0][dimValue=0][dimIndex=1][dimValue=4]]
      */
-    public Capacity getCapacityViolationAtBeginning(VehicleRoute route) {
+    public SizeDimension getCapacityViolationAtBeginning(VehicleRoute route) {
         if (route == null) {
             throw new IllegalArgumentException("route is missing.");
         }
-        Capacity atBeginning = getLoadAtBeginning(route);
-        return Capacity.max(Capacity.Builder.newInstance().build(),
+        SizeDimension atBeginning = getLoadAtBeginning(route);
+        return SizeDimension.max(SizeDimension.Builder.newInstance().build(),
             atBeginning.subtract(route.getVehicle().getType().getCapacityDimensions()));
     }
 
@@ -799,12 +799,12 @@ public Capacity getCapacityViolationAtBeginning(VehicleRoute route) {
      * dimension with dimIndex=0 and dimIndex=1 and dimIndex=1 is violated by 4 units then this method returns
      * [[dimIndex=0][dimValue=0][dimIndex=1][dimValue=4]]
      */
-    public Capacity getCapacityViolationAtEnd(VehicleRoute route) {
+    public SizeDimension getCapacityViolationAtEnd(VehicleRoute route) {
         if (route == null) {
             throw new IllegalArgumentException("route is missing.");
         }
-        Capacity atEnd = getLoadAtEnd(route);
-        return Capacity.max(Capacity.Builder.newInstance().build(),
+        SizeDimension atEnd = getLoadAtEnd(route);
+        return SizeDimension.max(SizeDimension.Builder.newInstance().build(),
             atEnd.subtract(route.getVehicle().getType().getCapacityDimensions()));
     }
 
@@ -815,15 +815,15 @@ public Capacity getCapacityViolationAtEnd(VehicleRoute route) {
      * dimension with dimIndex=0 and dimIndex=1 and dimIndex=1 is violated by 4 units then this method returns
      * [[dimIndex=0][dimValue=0][dimIndex=1][dimValue=4]]
      */
-    public Capacity getCapacityViolationAfterActivity(TourActivity activity, VehicleRoute route) {
+    public SizeDimension getCapacityViolationAfterActivity(TourActivity activity, VehicleRoute route) {
         if (route == null) {
             throw new IllegalArgumentException("route is missing.");
         }
         if (activity == null) {
             throw new IllegalArgumentException("activity is missing.");
         }
-        Capacity afterAct = getLoadRightAfterActivity(activity, route);
-        return Capacity.max(Capacity.Builder.newInstance().build(),
+        SizeDimension afterAct = getLoadRightAfterActivity(activity, route);
+        return SizeDimension.max(SizeDimension.Builder.newInstance().build(),
             afterAct.subtract(route.getVehicle().getType().getCapacityDimensions()));
     }
 
@@ -1235,28 +1235,28 @@ public Integer getNumberOfDeliveriesAtEnd(VehicleRoute route) {
     /**
      * @return load picked up in solution (without load at beginning of each route)
      */
-    public Capacity getLoadPickedUp() {
+    public SizeDimension getLoadPickedUp() {
         return pickupLoad;
     }
 
     /**
      * @return load picked up in solution at beginning of each route
      */
-    public Capacity getLoadAtBeginning() {
+    public SizeDimension getLoadAtBeginning() {
         return pickupLoadAtBeginning;
     }
 
     /**
      * @return load delivered in solution (without load at end of each route)
      */
-    public Capacity getLoadDelivered() {
+    public SizeDimension getLoadDelivered() {
         return deliveryLoad;
     }
 
     /**
      * @return load delivered in solution at end of each route
      */
-    public Capacity getLoadAtEnd() {
+    public SizeDimension getLoadAtEnd() {
         return deliveryLoadAtEnd;
     }
 
@@ -1303,7 +1303,7 @@ public Double getTimeWindowViolation() {
     /**
      * @return total capacity violation for specified solution
      */
-    public Capacity getCapacityViolation() {
+    public SizeDimension getCapacityViolation() {
         return cap_violation;
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/Capacity.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/Capacity.java
index 42a275724..49eb50f82 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/Capacity.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/Capacity.java
@@ -1,426 +1,140 @@
-/*
- * Licensed to GraphHopper GmbH under one or more contributor
- * license agreements. See the NOTICE file distributed with this work for
- * additional information regarding copyright ownership.
- *
- * GraphHopper GmbH licenses this file to you under the Apache License,
- * Version 2.0 (the "License"); you may not use this file except in
- * compliance with the License. You may obtain a copy of the License at
- *
- *       http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
 package com.graphhopper.jsprit.core.problem;
 
 import java.util.Arrays;
 
+import com.graphhopper.jsprit.core.problem.SizeDimension.SizeDimensionSign;
+
 /**
- * Capacity with an arbitrary number of capacity-dimension.
- * <p>
- * <p>Note that this assumes the the values of each capacity dimension can be added up and subtracted
+ * Legacy class of {@linkplain SizeDimension}.
+ *
+ * @author balage
  *
- * @author schroeder
+ * @deprecated Use {@linkplain SizeDimension}, instead.
  */
-public class Capacity {
+@Deprecated
+public abstract class Capacity {
 
-    public static final Capacity EMPTY = Capacity.Builder.newInstance().build();
 
-    /**
-     * Adds up two capacities, i.e. sums up each and every capacity dimension,
-     * and returns the resulting Capacity.
-     * <p>
-     * <p>
-     * Note that this assumes that capacity dimension can be added up.
-     *
-     * @param cap1 capacity to be added up
-     * @param cap2 capacity to be added up
-     * @return new capacity
-     * @throws NullPointerException if one of the args is null
-     * @deprecated Use <code>cap1.add(cap2)</code> instead.
-     */
+    public abstract SizeDimension getPositiveDimensions();
 
-    @Deprecated
-    public static Capacity addup(Capacity cap1, Capacity cap2) {
-        return cap1.add(cap2);
-    }
+    public abstract SizeDimension getNegativeDimensions();
 
-    /**
-     * Subtracts cap2subtract from cap and returns the resulting Capacity.
-     *
-     * @param cap          capacity to be subtracted from
-     * @param cap2subtract capacity to subtract
-     * @return new capacity
-     * @throws NullPointerException  if one of the args is null
-     * @throws IllegalStateException if number of capacityDimensions of cap1 and cap2 are
-     *                               different (i.e.
-     *                               <code>cap1.getNuOfDimension() != cap2.getNuOfDimension()</code>
-     *                               ).
-     * @deprecated Use <code>cap1.subtract(cap2)</code> instead.
-     */
-    @Deprecated
-    public static Capacity subtract(Capacity cap, Capacity cap2subtract) {
-        return cap.subtract(cap2subtract);
-    }
+    public abstract double divide(SizeDimension denominator);
 
-    /**
-     * Returns the inverted capacity, i.e. it multiplies all capacity dimensions
-     * with -1.
-     *
-     * @param cap2invert capacity to be inverted
-     * @return inverted capacity
-     * @throws NullPointerException if one of the args is null
-     * @deprecated Use <code>cap2invert.invert()</code> instead.
-     */
-    @Deprecated
-    public static Capacity invert(Capacity cap2invert) {
-        return cap2invert.invert();
-    }
+    public abstract SizeDimension abs();
 
-    /**
-     * Divides every dimension of numerator capacity by the corresponding dimension of denominator capacity,
-     * , and averages each quotient.
-     * <p>
-     * <p>If both nominator.get(i) and denominator.get(i) equal to 0, dimension i is ignored.
-     * <p>If both capacities are have only dimensions with dimensionVal=0, it returns 0.0
-     *
-     * @param numerator   the numerator
-     * @param denominator the denominator
-     * @return quotient
-     * @throws IllegalStateException if numerator.get(i) != 0 and denominator.get(i) == 0
-     */
-    public static double divide(Capacity numerator, Capacity denominator) {
-        return numerator.divide(denominator);
-    }
+    public abstract SizeDimension invert();
+
+    public abstract SizeDimension subtract(SizeDimension sizeToSubstract);
+
+    public abstract SizeDimension add(SizeDimension sizeToAdd);
+
+    public abstract SizeDimensionSign sign();
+
+    public abstract boolean isGreaterOrEqual(SizeDimension toCompare);
+
+    public abstract boolean isLessOrEqual(SizeDimension toCompare);
+
+    public abstract int get(int index);
+
+    public abstract int getNuOfDimensions();
 
     /**
-     * Makes a deep copy of Capacity.
-     *
-     * @param capacity capacity to be copied
-     * @return copy
+     * @deprecated Use {@linkplain SizeDimension#EMPTY}, instead.
      */
-    public static Capacity copyOf(Capacity capacity) {
-        if (capacity == null) {
-            return null;
-        }
-        return new Capacity(capacity);
-    }
+    @Deprecated
+    public static final SizeDimension EMPTY = SizeDimension.EMPTY;
 
     /**
-     * Builder that builds Capacity
+     * <b>Legacy class.</b> Builder that builds SizeDimension
      *
      * @author schroeder
+     * @author balage
+     * @deprecated Use {@linkplain SizeDimension.Builder}, instead.
      */
-    public static class Builder {
-
-        /**
-         * default is 1 dimension with size of zero
-         */
-        private int[] dimensions = new int[1];
-
-        /**
-         * Returns a new instance of Capacity with one dimension and a value/size of 0
-         *
-         * @return this builder
-         */
-        public static Builder newInstance() {
-            return new Builder();
-        }
+    @Deprecated
+    public static abstract class Builder {
 
-        Builder() {
-        }
+        // This is the real trick: this is a fake builder which facade the real
+        // SizeDimension.Builder
 
-        /**
-         * add capacity dimension
-         * <p>
-         * <p>Note that it automatically resizes dimensions according to index, i.e. if index=7 there are 8 dimensions.
-         * New dimensions then are initialized with 0
-         *
-         * @param index    dimensionIndex
-         * @param dimValue dimensionValue
-         * @return this builder
-         */
-        public Builder addDimension(int index, int dimValue) {
-            if (index < dimensions.length) {
-                dimensions[index] = dimValue;
-            } else {
-                int requiredSize = index + 1;
-                int[] newDimensions = new int[requiredSize];
-                copy(dimensions, newDimensions);
-                newDimensions[index] = dimValue;
-                dimensions = newDimensions;
-            }
-            return this;
+        public static SizeDimension.Builder newInstance() {
+            return new SizeDimension.Builder();
         }
 
-        private void copy(int[] from, int[] to) {
-            for (int i = 0; i < dimensions.length; i++) {
-                to[i] = from[i];
-            }
-        }
-
-        /**
-         * Builds an immutable Capacity and returns it.
-         *
-         * @return Capacity
-         */
-        public Capacity build() {
-            return new Capacity(this);
-        }
+        public abstract SizeDimension build();
 
+        public abstract Builder setDimensions(SizeDimension other);
 
+        public abstract Builder addDimension(int index, int dimValue);
     }
 
-    private int[] dimensions;
 
     /**
-     * copy constructor
-     *
-     * @param capacity capacity to be copied
+     * @deprecated Use {@linkplain SizeDimension#add(SizeDimension)}, instead.
      */
-    Capacity(Capacity capacity) {
-        dimensions = new int[capacity.getNuOfDimensions()];
-        for (int i = 0; i < capacity.getNuOfDimensions(); i++) {
-            dimensions[i] = capacity.get(i);
-        }
-    }
-
-    Capacity(Builder builder) {
-        dimensions = builder.dimensions;
-    }
-
-    private Capacity(int numberOfDimensions) {
-        dimensions = new int[numberOfDimensions];
-        // Arrays.fill(dimensions, 0); // Just to be safe, not needed
+    @Deprecated
+    public static SizeDimension addup(Capacity cap1, Capacity cap2) {
+        return ((SizeDimension) cap1).add((SizeDimension) cap2);
     }
 
     /**
-     * Returns the number of specified capacity dimensions.
-     *
-     * @return noDimensions
+     * @deprecated Use {@linkplain SizeDimension#subtract(SizeDimension)},
+     *             instead.
      */
-    public int getNuOfDimensions() {
-        return dimensions.length;
+    @Deprecated
+    public static SizeDimension subtract(Capacity cap, Capacity cap2subtract) {
+        return ((SizeDimension) cap).subtract((SizeDimension) cap2subtract);
     }
 
-
     /**
-     * Returns value of capacity-dimension with specified index.
-     * <p>
-     * <p>If capacity dimension does not exist, it returns 0 (rather than IndexOutOfBoundsException).
-     *
-     * @param index dimension index of the capacity value to be retrieved
-     * @return the according dimension value
+     * @deprecated Use {@linkplain SizeDimension#invert()}, instead.
      */
-    public int get(int index) {
-        if (index < dimensions.length) {
-            return dimensions[index];
-        }
-        return 0;
+    @Deprecated
+    public static SizeDimension invert(Capacity cap2invert) {
+        return ((SizeDimension) cap2invert).invert();
     }
 
     /**
-     * Returns true if this capacity is less or equal than the capacity toCompare, i.e. if none of the capacity dimensions > than the corresponding dimension in toCompare.
-     *
-     * @param toCompare the capacity to compare
-     * @return true if this capacity is less or equal than toCompare
-     * @throws NullPointerException if one of the args is null
+     * @deprecated Use
+     *             {@linkplain SizeDimension#divide(SizeDimension, SizeDimension)}
+     *             , instead.
      */
-    public boolean isLessOrEqual(Capacity toCompare) {
-        if (toCompare == null) {
-            throw new NullPointerException();
-        }
-        for (int i = 0; i < getNuOfDimensions(); i++) {
-            if (get(i) > toCompare.get(i)) {
-                return false;
-            }
-        }
-        return true;
+    @Deprecated
+    public static double divide(Capacity numerator, Capacity denominator) {
+        return numerator.divide((SizeDimension) denominator);
     }
 
     /**
-     * Returns true if this capacity is greater or equal than the capacity toCompare
-     *
-     * @param toCompare the capacity to compare
-     * @return true if this capacity is greater or equal than toCompare
-     * @throws NullPointerException if one of the args is null
+     * @deprecated Use
+     *             {@linkplain SizeDimension#max(SizeDimension,SizeDimension)},
+     *             instead.
      */
-    public boolean isGreaterOrEqual(Capacity toCompare) {
-        if (toCompare == null) {
-            throw new NullPointerException();
-        }
-        for (int i = 0; i < Math.max(getNuOfDimensions(), toCompare.getNuOfDimensions()); i++) {
-            if (get(i) < toCompare.get(i)) {
-                return false;
-            }
-        }
-        return true;
-    }
-
-    @Override
-    public String toString() {
-        String string = "[noDimensions=" + getNuOfDimensions() + "]";
-        for (int i = 0; i < getNuOfDimensions(); i++) {
-            string += "[[dimIndex=" + i + "][dimValue=" + dimensions[i] + "]]";
-        }
-        return string;
+    @Deprecated
+    public static SizeDimension max(Capacity size1, Capacity size2) {
+        return SizeDimension.max((SizeDimension) size1, (SizeDimension) size2);
     }
 
     /**
-     * Return the maximum, i.e. the maximum of each capacity dimension.
-     *
-     * @param cap1 first capacity to compare
-     * @param cap2 second capacity to compare
-     * @return capacity maximum of each capacity dimension
+     * @deprecated Use
+     *             {@linkplain SizeDimension#min(SizeDimension, SizeDimension)},
+     *             instead.
      */
-    public static Capacity max(Capacity cap1, Capacity cap2) {
-        if (cap1 == null || cap2 == null) {
-            throw new IllegalArgumentException("arg must not be null");
-        }
-        Capacity.Builder toReturnBuilder = Capacity.Builder.newInstance();
-        for (int i = 0; i < Math.max(cap1.getNuOfDimensions(), cap2.getNuOfDimensions()); i++) {
-            toReturnBuilder.addDimension(i, Math.max(cap1.get(i), cap2.get(i)));
-        }
-        return toReturnBuilder.build();
-    }
-
-    public static Capacity min(Capacity cap1, Capacity cap2) {
-        if (cap1 == null || cap2 == null) {
-            throw new IllegalArgumentException("arg must not be null");
-        }
-        Capacity.Builder toReturnBuilder = Capacity.Builder.newInstance();
-        for (int i = 0; i < Math.max(cap1.getNuOfDimensions(), cap2.getNuOfDimensions()); i++) {
-            toReturnBuilder.addDimension(i, Math.min(cap1.get(i), cap2.get(i)));
-        }
-        return toReturnBuilder.build();
-    }
-
-    @Override
-    public boolean equals(Object o) {
-        if (this == o) {
-            return true;
-        }
-        if (!(o instanceof Capacity)) {
-            return false;
-        }
-
-        Capacity capacity = (Capacity) o;
-
-        if (!Arrays.equals(dimensions, capacity.dimensions)) {
-            return false;
-        }
-
-        return true;
-    }
-
-    @Override
-    public int hashCode() {
-        return Arrays.hashCode(dimensions);
-    }
-
-
-    public static Capacity createNullCapacity(Capacity capacity) {
-        return capacity == null ? null : new Capacity(capacity.getNuOfDimensions());
-    }
-
-    public static Capacity createNullCapacity(int numberOfDimensions) {
-        return new Capacity(numberOfDimensions);
-    }
-
-    public boolean isPositive() {
-        for (int i = 0; i < getNuOfDimensions(); i++) {
-            if (get(i) < 0) {
-                return false;
-            }
-        }
-        return true;
-    }
-
-    public Capacity add(Capacity capToAdd) {
-        if (capToAdd == null) {
-            throw new NullPointerException("capacity must not be null");
-        }
-        Capacity res = new Capacity(
-            Math.max(getNuOfDimensions(), capToAdd.getNuOfDimensions()));
-        for (int i = 0; i < Math.max(getNuOfDimensions(),
-            capToAdd.getNuOfDimensions()); i++) {
-            res.dimensions[i] = get(i) + capToAdd.get(i);
-        }
-
-        return res;
-    }
-
-    public Capacity subtract(Capacity capToSubstract) {
-        if (capToSubstract == null) {
-            throw new NullPointerException("capacity must not be null");
-        }
-        Capacity res = new Capacity(
-            Math.max(getNuOfDimensions(), capToSubstract.getNuOfDimensions()));
-        for (int i = 0; i < Math.max(getNuOfDimensions(),
-            capToSubstract.getNuOfDimensions()); i++) {
-            res.dimensions[i] = get(i) - capToSubstract.get(i);
-        }
-        return res;
-    }
-
-    public Capacity invert() {
-        Capacity res = new Capacity(getNuOfDimensions());
-        for (int i = 0; i < getNuOfDimensions(); i++) {
-            res.dimensions[i] = -get(i);
-        }
-        return res;
-    }
-
-    public Capacity abs() {
-        Capacity res = new Capacity(getNuOfDimensions());
-        for (int i = 0; i < getNuOfDimensions(); i++) {
-            res.dimensions[i] = Math.abs(get(i));
-        }
-        return res;
-    }
-
-    public double divide(Capacity denominator) {
-        int nuOfDimensions = 0;
-        double sumQuotients = 0.0;
-        for (int index = 0; index < Math.max(getNuOfDimensions(),
-            denominator.getNuOfDimensions()); index++) {
-            if (get(index) != 0 && denominator.get(index) == 0) {
-                throw new IllegalArgumentException(
-                    "numerator > 0 and denominator = 0. cannot divide by 0");
-            } else if (get(index) == 0 && denominator.get(index) == 0) {
-                continue;
-            } else {
-                nuOfDimensions++;
-                sumQuotients += (double) get(index) / (double) denominator.get(index);
-            }
-        }
-        if (nuOfDimensions > 0) {
-            return sumQuotients / nuOfDimensions;
-        }
-        return 0.0;
-
-    }
-
-    public Capacity getNegativeDimensions() {
-        Capacity res = new Capacity(getNuOfDimensions());
-        for (int i = 0; i < getNuOfDimensions(); i++) {
-            if (get(i) < 0) res.dimensions[i] = get(i);
-            else res.dimensions[i] = 0;
-        }
-        return res;
+    @Deprecated
+    public static SizeDimension min(Capacity size1, Capacity size2) {
+        return SizeDimension.min((SizeDimension) size1, (SizeDimension) size2);
     }
 
-    public Capacity getPositiveDimensions() {
-        Capacity res = new Capacity(getNuOfDimensions());
-        for (int i = 0; i < getNuOfDimensions(); i++) {
-            if (get(i) > 0) res.dimensions[i] = get(i);
-            else res.dimensions[i] = 0;
+    /**
+     * @deprecated Use {@linkplain SizeDimension#copyOf(SizeDimension)},
+     *             instead.
+     */
+    @Deprecated
+    public static SizeDimension copyOf(Capacity sizeDimension) {
+        if (sizeDimension == null) {
+            return null;
         }
-        return res;
+        return new SizeDimension((SizeDimension) sizeDimension);
     }
 
-}
+}
\ No newline at end of file
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/CapacityX.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/CapacityX.java
new file mode 100644
index 000000000..b12d1ad38
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/CapacityX.java
@@ -0,0 +1,423 @@
+/*
+ * Licensed to GraphHopper GmbH under one or more contributor
+ * license agreements. See the NOTICE file distributed with this work for
+ * additional information regarding copyright ownership.
+ *
+ * GraphHopper GmbH licenses this file to you under the Apache License,
+ * Version 2.0 (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.graphhopper.jsprit.core.problem;
+
+import java.util.Arrays;
+
+/**
+ * SizeDimension with an arbitrary number of capacity-dimension.
+ * <p>
+ * <p>Note that this assumes the the values of each capacity dimension can be added up and subtracted
+ *
+ * @author schroeder
+ */
+public class CapacityX {
+
+
+    @Deprecated
+    public static CapacityX addup(CapacityX cap1, CapacityX cap2) {
+        return cap1.add(cap2);
+    }
+
+    @Deprecated
+    public static CapacityX subtract(CapacityX cap, CapacityX cap2subtract) {
+        return cap.subtract(cap2subtract);
+    }
+
+    /**
+     * Returns the inverted SizeDimension, i.e. it multiplies all SizeDimension
+     * dimensions with -1.
+     *
+     * @param cap2invert
+     *            SizeDimension to be inverted
+     * @return inverted SizeDimension
+     * @throws NullPointerException
+     *             if one of the args is null
+     * @deprecated Use <code>cap2invert.invert()</code> instead.
+     */
+    @Deprecated
+    public static CapacityX invert(CapacityX cap2invert) {
+        return cap2invert.invert();
+    }
+
+    /**
+     * Divides every dimension of numerator SizeDimension by the corresponding
+     * dimension of denominator SizeDimension, , and averages each quotient.
+     * <p>
+     * <p>
+     * If both nominator.get(i) and denominator.get(i) equal to 0, dimension i
+     * is ignored.
+     * <p>
+     * If both capacities are have only dimensions with dimensionVal=0, it
+     * returns 0.0
+     *
+     * @param numerator
+     *            the numerator
+     * @param denominator
+     *            the denominator
+     * @return quotient
+     * @throws IllegalStateException
+     *             if numerator.get(i) != 0 and denominator.get(i) == 0
+     */
+    public static double divide(CapacityX numerator, CapacityX denominator) {
+        return numerator.divide(denominator);
+    }
+
+    /**
+     * Makes a deep copy of SizeDimensionX.
+     *
+     * @param SizeDimension
+     *            SizeDimension to be copied
+     * @return copy
+     */
+    public static CapacityX copyOf(CapacityX SizeDimension) {
+        if (SizeDimension == null) {
+            return null;
+        }
+        return new CapacityX(SizeDimension);
+    }
+
+    /**
+     * Builder that builds SizeDimensionX
+     *
+     * @author schroeder
+     */
+    public static class Builder {
+
+        /**
+         * default is 1 dimension with size of zero
+         */
+        private int[] dimensions = new int[1];
+
+        /**
+         * Returns a new instance of SizeDimensionX with one dimension and a
+         * value/size of 0
+         *
+         * @return this builder
+         */
+        public static Builder newInstance() {
+            return new Builder();
+        }
+
+        Builder() {
+        }
+
+        /**
+         * add SizeDimension dimension
+         * <p>
+         * <p>
+         * Note that it automatically resizes dimensions according to index,
+         * i.e. if index=7 there are 8 dimensions. New dimensions then are
+         * initialized with 0
+         *
+         * @param index
+         *            dimensionIndex
+         * @param dimValue
+         *            dimensionValue
+         * @return this builder
+         */
+        public Builder addDimension(int index, int dimValue) {
+            if (index < dimensions.length) {
+                dimensions[index] = dimValue;
+            } else {
+                int requiredSize = index + 1;
+                int[] newDimensions = new int[requiredSize];
+                copy(dimensions, newDimensions);
+                newDimensions[index] = dimValue;
+                dimensions = newDimensions;
+            }
+            return this;
+        }
+
+        private void copy(int[] from, int[] to) {
+            for (int i = 0; i < dimensions.length; i++) {
+                to[i] = from[i];
+            }
+        }
+
+        /**
+         * Builds an immutable SizeDimensionX and returns it.
+         *
+         * @return SizeDimensionX
+         */
+        public CapacityX build() {
+            return new CapacityX(this);
+        }
+
+
+    }
+
+    private int[] dimensions;
+
+    /**
+     * copy constructor
+     *
+     * @param SizeDimension
+     *            SizeDimension to be copied
+     */
+    CapacityX(CapacityX SizeDimension) {
+        dimensions = new int[SizeDimension.getNuOfDimensions()];
+        for (int i = 0; i < SizeDimension.getNuOfDimensions(); i++) {
+            dimensions[i] = SizeDimension.get(i);
+        }
+    }
+
+    CapacityX(Builder builder) {
+        dimensions = builder.dimensions;
+    }
+
+    private CapacityX(int numberOfDimensions) {
+        dimensions = new int[numberOfDimensions];
+        // Arrays.fill(dimensions, 0); // Just to be safe, not needed
+    }
+
+    /**
+     * Returns the number of specified SizeDimension dimensions.
+     *
+     * @return noDimensions
+     */
+    public int getNuOfDimensions() {
+        return dimensions.length;
+    }
+
+
+    /**
+     * Returns value of SizeDimension-dimension with specified index.
+     * <p>
+     * <p>
+     * If SizeDimension dimension does not exist, it returns 0 (rather than
+     * IndexOutOfBoundsException).
+     *
+     * @param index
+     *            dimension index of the SizeDimension value to be retrieved
+     * @return the according dimension value
+     */
+    public int get(int index) {
+        if (index < dimensions.length) {
+            return dimensions[index];
+        }
+        return 0;
+    }
+
+    /**
+     * Returns true if this SizeDimension is less or equal than the
+     * SizeDimension toCompare, i.e. if none of the SizeDimension dimensions >
+     * than the corresponding dimension in toCompare.
+     *
+     * @param toCompare
+     *            the SizeDimension to compare
+     * @return true if this SizeDimension is less or equal than toCompare
+     * @throws NullPointerException
+     *             if one of the args is null
+     */
+    public boolean isLessOrEqual(CapacityX toCompare) {
+        if (toCompare == null) {
+            throw new NullPointerException();
+        }
+        for (int i = 0; i < getNuOfDimensions(); i++) {
+            if (get(i) > toCompare.get(i)) {
+                return false;
+            }
+        }
+        return true;
+    }
+
+    /**
+     * Returns true if this SizeDimension is greater or equal than the
+     * SizeDimension toCompare
+     *
+     * @param toCompare
+     *            the SizeDimension to compare
+     * @return true if this SizeDimension is greater or equal than toCompare
+     * @throws NullPointerException
+     *             if one of the args is null
+     */
+    public boolean isGreaterOrEqual(CapacityX toCompare) {
+        if (toCompare == null) {
+            throw new NullPointerException();
+        }
+        for (int i = 0; i < Math.max(getNuOfDimensions(), toCompare.getNuOfDimensions()); i++) {
+            if (get(i) < toCompare.get(i)) {
+                return false;
+            }
+        }
+        return true;
+    }
+
+    @Override
+    public String toString() {
+        String string = "[noDimensions=" + getNuOfDimensions() + "]";
+        for (int i = 0; i < getNuOfDimensions(); i++) {
+            string += "[[dimIndex=" + i + "][dimValue=" + dimensions[i] + "]]";
+        }
+        return string;
+    }
+
+    /**
+     * Return the maximum, i.e. the maximum of each SizeDimension dimension.
+     *
+     * @param cap1
+     *            first SizeDimension to compare
+     * @param cap2
+     *            second SizeDimension to compare
+     * @return SizeDimension maximum of each SizeDimension dimension
+     */
+    public static CapacityX max(CapacityX cap1, CapacityX cap2) {
+        if (cap1 == null || cap2 == null) {
+            throw new IllegalArgumentException("arg must not be null");
+        }
+        CapacityX.Builder toReturnBuilder = CapacityX.Builder.newInstance();
+        for (int i = 0; i < Math.max(cap1.getNuOfDimensions(), cap2.getNuOfDimensions()); i++) {
+            toReturnBuilder.addDimension(i, Math.max(cap1.get(i), cap2.get(i)));
+        }
+        return toReturnBuilder.build();
+    }
+
+    public static CapacityX min(CapacityX cap1, CapacityX cap2) {
+        if (cap1 == null || cap2 == null) {
+            throw new IllegalArgumentException("arg must not be null");
+        }
+        CapacityX.Builder toReturnBuilder = CapacityX.Builder.newInstance();
+        for (int i = 0; i < Math.max(cap1.getNuOfDimensions(), cap2.getNuOfDimensions()); i++) {
+            toReturnBuilder.addDimension(i, Math.min(cap1.get(i), cap2.get(i)));
+        }
+        return toReturnBuilder.build();
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) {
+            return true;
+        }
+        if (!(o instanceof CapacityX)) {
+            return false;
+        }
+
+        CapacityX SizeDimension = (CapacityX) o;
+
+        if (!Arrays.equals(dimensions, SizeDimension.dimensions)) {
+            return false;
+        }
+
+        return true;
+    }
+
+    @Override
+    public int hashCode() {
+        return Arrays.hashCode(dimensions);
+    }
+
+    public boolean isPositive() {
+        for (int i = 0; i < getNuOfDimensions(); i++) {
+            if (get(i) < 0) {
+                return false;
+            }
+        }
+        return true;
+    }
+
+    public CapacityX add(CapacityX capToAdd) {
+        if (capToAdd == null) {
+            throw new NullPointerException("SizeDimension must not be null");
+        }
+        CapacityX res = new CapacityX(
+            Math.max(getNuOfDimensions(), capToAdd.getNuOfDimensions()));
+        for (int i = 0; i < Math.max(getNuOfDimensions(),
+            capToAdd.getNuOfDimensions()); i++) {
+            res.dimensions[i] = get(i) + capToAdd.get(i);
+        }
+
+        return res;
+    }
+
+    public CapacityX subtract(CapacityX capToSubstract) {
+        if (capToSubstract == null) {
+            throw new NullPointerException("SizeDimension must not be null");
+        }
+        CapacityX res = new CapacityX(
+            Math.max(getNuOfDimensions(), capToSubstract.getNuOfDimensions()));
+        for (int i = 0; i < Math.max(getNuOfDimensions(),
+            capToSubstract.getNuOfDimensions()); i++) {
+            res.dimensions[i] = get(i) - capToSubstract.get(i);
+        }
+        return res;
+    }
+
+    public CapacityX invert() {
+        CapacityX res = new CapacityX(getNuOfDimensions());
+        for (int i = 0; i < getNuOfDimensions(); i++) {
+            res.dimensions[i] = -get(i);
+        }
+        return res;
+    }
+
+    public CapacityX abs() {
+        CapacityX res = new CapacityX(getNuOfDimensions());
+        for (int i = 0; i < getNuOfDimensions(); i++) {
+            res.dimensions[i] = Math.abs(get(i));
+        }
+        return res;
+    }
+
+    public double divide(CapacityX denominator) {
+        int nuOfDimensions = 0;
+        double sumQuotients = 0.0;
+        for (int index = 0; index < Math.max(getNuOfDimensions(),
+            denominator.getNuOfDimensions()); index++) {
+            if (get(index) != 0 && denominator.get(index) == 0) {
+                throw new IllegalArgumentException(
+                    "numerator > 0 and denominator = 0. cannot divide by 0");
+            } else if (get(index) == 0 && denominator.get(index) == 0) {
+                continue;
+            } else {
+                nuOfDimensions++;
+                sumQuotients += get(index) / (double) denominator.get(index);
+            }
+        }
+        if (nuOfDimensions > 0) {
+            return sumQuotients / nuOfDimensions;
+        }
+        return 0.0;
+
+    }
+
+    public SizeDimension getNegativeDimensions() {
+        SizeDimension res = new SizeDimension(getNuOfDimensions());
+        for (int i = 0; i < getNuOfDimensions(); i++) {
+            if (get(i) < 0) {
+                res.dimensions[i] = get(i);
+            } else {
+                res.dimensions[i] = 0;
+            }
+        }
+        return res;
+    }
+
+    public SizeDimension getPositiveDimensions() {
+        SizeDimension res = new SizeDimension(getNuOfDimensions());
+        for (int i = 0; i < getNuOfDimensions(); i++) {
+            if (get(i) > 0) {
+                res.dimensions[i] = get(i);
+            } else {
+                res.dimensions[i] = 0;
+            }
+        }
+        return res;
+    }
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/SizeDimension.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/SizeDimension.java
new file mode 100644
index 000000000..ecf73afa4
--- /dev/null
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/SizeDimension.java
@@ -0,0 +1,546 @@
+/*
+ * Licensed to GraphHopper GmbH under one or more contributor
+ * license agreements. See the NOTICE file distributed with this work for
+ * additional information regarding copyright ownership.
+ *
+ * GraphHopper GmbH licenses this file to you under the Apache License,
+ * Version 2.0 (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.graphhopper.jsprit.core.problem;
+
+import java.util.Arrays;
+import java.util.EnumSet;
+
+/**
+ * SizeDimension with an arbitrary number of size dimension-dimension.
+ * <p>
+ * <p>
+ * Note that this assumes the the values of each size dimension dimension can be
+ * added up and subtracted
+ *
+ * @author schroeder
+ * @author balage
+ */
+public class SizeDimension extends Capacity {
+
+    public static final SizeDimension EMPTY = new SizeDimension(0);
+
+    /**
+     * Divides every dimension of numerator size dimension by the corresponding
+     * dimension of denominator size dimension, , and averages each quotient.
+     * <p>
+     * <p>
+     * If both nominator.get(i) and denominator.get(i) equal to 0, dimension i
+     * is ignored.
+     * <p>
+     * If both sizeacities are have only dimensions with dimensionVal=0, it
+     * returns 0.0
+     *
+     * @param numerator
+     *            the numerator
+     * @param denominator
+     *            the denominator
+     * @return quotient
+     * @throws IllegalStateException
+     *             if numerator.get(i) != 0 and denominator.get(i) == 0
+     */
+    public static double divide(SizeDimension numerator, SizeDimension denominator) {
+        return numerator.divide(denominator);
+    }
+
+
+    /**
+     * Makes a deep copy of SizeDimension.
+     *
+     * @param size
+     *            dimension size dimension to be copied
+     * @return copy
+     */
+    public static SizeDimension copyOf(SizeDimension sizeDimension) {
+        if (sizeDimension == null) {
+            return null;
+        }
+        return new SizeDimension(sizeDimension);
+    }
+
+    /**
+     * Builder that builds SizeDimension
+     *
+     * @author schroeder
+     * @author balage
+     */
+    public static class Builder extends Capacity.Builder {
+
+        /**
+         * default is 1 dimension with size of zero
+         */
+        private int[] dimensions = new int[1];
+
+        /**
+         * Returns a new instance of SizeDimension with one dimension and a
+         * value/size of 0
+         *
+         * @return this builder
+         */
+        public static Builder newInstance() {
+            return new Builder();
+        }
+
+        Builder() {
+        }
+
+        /**
+         * add size dimension dimension
+         * <p>
+         * <p>
+         * Note that it automatically resizes dimensions according to index,
+         * i.e. if index=7 there are 8 dimensions. New dimensions then are
+         * initialized with 0
+         *
+         * @param index
+         *            dimensionIndex
+         * @param dimValue
+         *            dimensionValue
+         * @return this builder
+         */
+        @Override
+        public Builder addDimension(int index, int dimValue) {
+            if (index >= dimensions.length) {
+                int requiredSize = index + 1;
+                dimensions = Arrays.copyOf(dimensions, requiredSize);
+            }
+            dimensions[index] = dimValue;
+            return this;
+        }
+
+        /**
+         * Sets (overwrites) all dimensions from the parameter.
+         *
+         * <p>
+         * The dimension size will be extended if the other has higher sizes.
+         * </p>
+         *
+         * @param other
+         *            The other size dimension object to copy the dimension
+         *            values from
+         * @return this builder
+         */
+        @Override
+        public Builder setDimensions(SizeDimension other) {
+            if (other.getNuOfDimensions() >= dimensions.length) {
+                dimensions = Arrays.copyOf(other.dimensions, other.dimensions.length);
+            } else {
+                for (int i = 0; i < other.getNuOfDimensions(); i++) {
+                    dimensions[i] = other.dimensions[i];
+                }
+            }
+            return this;
+        }
+
+        /**
+         * Builds an immutable SizeDimension and returns it.
+         *
+         * @return SizeDimension
+         */
+        @Override
+        public SizeDimension build() {
+            return new SizeDimension(this);
+        }
+
+    }
+
+    protected int[] dimensions;
+
+    /**
+     * Return the maximum, i.e. the maximum of each size dimension dimension.
+     *
+     * @param size1
+     *            first size dimension to compare
+     * @param size2
+     *            second size dimension to compare
+     * @return size dimension maximum of each size dimension dimension
+     */
+    public static SizeDimension max(SizeDimension size1, SizeDimension size2) {
+        if (size1 == null || size2 == null) {
+            throw new IllegalArgumentException("arg must not be null");
+        }
+        SizeDimension res = new SizeDimension(
+                        Math.max(size1.getNuOfDimensions(), size2.getNuOfDimensions()));
+        for (int i = 0; i < Math.max(size1.getNuOfDimensions(), size2.getNuOfDimensions()); i++) {
+            res.dimensions[i] = Math.max(size1.get(i), size2.get(i));
+        }
+
+        return res;
+    }
+
+    public static SizeDimension min(SizeDimension size1, SizeDimension size2) {
+        if (size1 == null || size2 == null) {
+            throw new IllegalArgumentException("arg must not be null");
+        }
+        SizeDimension res = new SizeDimension(
+                        Math.max(size1.getNuOfDimensions(), size2.getNuOfDimensions()));
+        for (int i = 0; i < Math.max(size1.getNuOfDimensions(), size2.getNuOfDimensions()); i++) {
+            res.dimensions[i] = Math.min(size1.get(i), size2.get(i));
+        }
+        return res;
+    }
+
+
+    /**
+     * copy constructor
+     *
+     * @param source size dimension to be copied
+     */
+    protected SizeDimension(SizeDimension source) {
+        dimensions = Arrays.copyOf(source.dimensions, source.dimensions.length);
+    }
+
+    protected SizeDimension(Builder builder) {
+        dimensions = builder.dimensions;
+    }
+
+    protected SizeDimension(int numberOfDimensions) {
+        dimensions = new int[numberOfDimensions];
+    }
+
+
+    /**
+     * Returns the number of specified size dimension dimensions.
+     *
+     * @return noDimensions
+     */
+    @Override
+    public int getNuOfDimensions() {
+        return dimensions.length;
+    }
+
+
+    /**
+     * Returns value of size dimension-dimension with specified index.
+     * <p>
+     * <p>
+     * If size dimension dimension does not exist, it returns 0 (rather than
+     * IndexOutOfBoundsException).
+     *
+     * @param index
+     *            dimension index of the size dimension value to be retrieved
+     * @return the according dimension value
+     */
+    @Override
+    public int get(int index) {
+        if (index < dimensions.length) {
+            return dimensions[index];
+        }
+        return 0;
+    }
+
+    /**
+     * Returns true if this size dimension is less or equal than the size
+     * dimension toCompare, i.e. if none of the size dimension dimensions > than
+     * the corresponding dimension in toCompare.
+     *
+     * @param toCompare
+     *            the size dimension to compare
+     * @return true if this size dimension is less or equal than toCompare
+     * @throws NullPointerException
+     *             if one of the args is null
+     */
+    @Override
+    public boolean isLessOrEqual(SizeDimension toCompare) {
+        if (toCompare == null) {
+            throw new NullPointerException();
+        }
+        for (int i = 0; i < Math.max(getNuOfDimensions(), toCompare.getNuOfDimensions()); i++) {
+            if (get(i) > toCompare.get(i)) {
+                return false;
+            }
+        }
+        return true;
+    }
+
+    /**
+     * Returns true if this size dimension is greater or equal than the size
+     * dimension toCompare
+     *
+     * @param toCompare
+     *            the size dimension to compare
+     * @return true if this size dimension is greater or equal than toCompare
+     * @throws NullPointerException
+     *             if one of the args is null
+     */
+    @Override
+    public boolean isGreaterOrEqual(SizeDimension toCompare) {
+        if (toCompare == null) {
+            throw new NullPointerException();
+        }
+        for (int i = 0; i < Math.max(getNuOfDimensions(), toCompare.getNuOfDimensions()); i++) {
+            if (get(i) < toCompare.get(i)) {
+                return false;
+            }
+        }
+        return true;
+    }
+
+    @Override
+    public String toString() {
+        StringBuilder sb = new StringBuilder();
+        sb.append("SizeDimension[").append("[noDimensions=").append(getNuOfDimensions()).append(']');
+        for (int i = 0; i < getNuOfDimensions(); i++) {
+            sb.append('[').append(i).append('=').append(dimensions[i]).append(']');
+        }
+        sb.append(']');
+        return sb.toString();
+    }
+
+    @Override
+    public boolean equals(Object o) {
+        if (this == o) {
+            return true;
+        }
+        if (!(o instanceof SizeDimension)) {
+            return false;
+        }
+
+        SizeDimension sizeDimension = (SizeDimension) o;
+
+        if (!Arrays.equals(dimensions, sizeDimension.dimensions)) {
+            return false;
+        }
+
+        return true;
+    }
+
+    @Override
+    public int hashCode() {
+        return Arrays.hashCode(dimensions);
+    }
+
+
+    public enum SizeDimensionSign {
+        POSITIVE, ZERO, NEGATIVE, MIXED
+    }
+
+    /**
+     * Returns the sign of the size dimension.
+     * <p>
+     * <ul>
+     * <li>{@linkplain SizeDimensionSign#ZERO} when all dimension values are
+     * zero.</li>
+     * <li>{@linkplain SizeDimensionSign#POSITIVE} when all dimension values are
+     * non-negative.</li>
+     * <li>{@linkplain SizeDimensionSign#NEGATIVE} when all dimension values are
+     * non-positive.</li>
+     * <li>{@linkplain SizeDimensionSign#MIXED} when there are both negative or
+     * positive dimensions.</li>
+     * </ul>
+     * </p>
+     *
+     * @return The sign of the size dimension.
+     */
+    @Override
+    public SizeDimensionSign sign() {
+        EnumSet<SizeDimensionSign> possibleSigns = EnumSet.of(SizeDimensionSign.POSITIVE, SizeDimensionSign.NEGATIVE, SizeDimensionSign.ZERO);
+        for (int i = 0; i < getNuOfDimensions(); i++) {
+            if (get(i) < 0) {
+                possibleSigns.remove(SizeDimensionSign.POSITIVE);
+                possibleSigns.remove(SizeDimensionSign.ZERO);
+            } else if (get(i) > 0) {
+                possibleSigns.remove(SizeDimensionSign.NEGATIVE);
+                possibleSigns.remove(SizeDimensionSign.ZERO);
+            }
+            if (possibleSigns.size() <= 1) {
+                break;
+            }
+        }
+        if (possibleSigns.isEmpty()) {
+            return SizeDimensionSign.MIXED;
+        }
+        if (possibleSigns.contains(SizeDimensionSign.ZERO)) {
+            return SizeDimensionSign.ZERO;
+        } else {
+            return possibleSigns.iterator().next();
+        }
+    }
+
+    /**
+     * Returns a new {@linkplain SizeDimension} object containing the sum of the
+     * calling object and the <code>sizeToAdd</code>.
+     * <p>
+     * The dimension count of the result size is the max of the two operands.
+     * </p>
+     *
+     * @param sizeToAdd
+     *            size dimension to be added up
+     * @return A sum of the two operands.
+     * @throws NullPointerException
+     *             if the <code>sizeToAdd</code> is null
+     */
+    @Override
+    public SizeDimension add(SizeDimension sizeToAdd) {
+        if (sizeToAdd == null) {
+            throw new NullPointerException("size dimension must not be null");
+        }
+        SizeDimension res = new SizeDimension(
+                        Math.max(getNuOfDimensions(), sizeToAdd.getNuOfDimensions()));
+        for (int i = 0; i < Math.max(getNuOfDimensions(),
+                        sizeToAdd.getNuOfDimensions()); i++) {
+            res.dimensions[i] = get(i) + sizeToAdd.get(i);
+        }
+
+        return res;
+    }
+
+    /**
+     * Returns a new {@linkplain SizeDimension} object containing the difference
+     * of the calling object and the <code>sizeToSubtract</code>.
+     * <p>
+     * The dimension count of the result size is the max of the two operands.
+     * </p>
+     *
+     * @param sizeToSubtract
+     *            size dimension to be subtracted
+     * @return A difference of the two operands.
+     * @throws NullPointerException
+     *             if the <code>sizeToSubtract</code> is null
+     */
+    @Override
+    public SizeDimension subtract(SizeDimension sizeToSubstract) {
+        if (sizeToSubstract == null) {
+            throw new NullPointerException("size dimension must not be null");
+        }
+        SizeDimension res = new SizeDimension(Math.max(getNuOfDimensions(), sizeToSubstract.getNuOfDimensions()));
+        for (int i = 0; i < Math.max(getNuOfDimensions(), sizeToSubstract.getNuOfDimensions()); i++) {
+            res.dimensions[i] = get(i) - sizeToSubstract.get(i);
+        }
+        return res;
+    }
+
+    /**
+     * Returns a new {@linkplain SizeDimension} object containing the inverted
+     * value of the calling object. Each dimension is negated individually.
+     *
+     * @return The inverted value of calling object.
+     */
+    @Override
+    public SizeDimension invert() {
+        SizeDimension res = new SizeDimension(getNuOfDimensions());
+        for (int i = 0; i < getNuOfDimensions(); i++) {
+            res.dimensions[i] = -get(i);
+        }
+        return res;
+    }
+
+    /**
+     * Returns a new {@linkplain SizeDimension} object containing the absulute
+     * value of the calling object. Each dimension is negated if it was negative
+     * individually.
+     *
+     * @return The absolute value of calling object.
+     */
+    @Override
+    public SizeDimension abs() {
+        SizeDimension res = new SizeDimension(getNuOfDimensions());
+        for (int i = 0; i < getNuOfDimensions(); i++) {
+            res.dimensions[i] = Math.abs(get(i));
+        }
+        return res;
+    }
+
+    /**
+     * Divides every dimension of the calling size dimension by the
+     * corresponding dimension of denominator size dimension, and averages each
+     * quotient.
+     * <p>
+     * If both nominator.get(i) and denominator.get(i) equal to 0, dimension i
+     * is ignored.
+     * </p>
+     * <p>
+     * If both object are have only dimensions with value of 0, it returns 0.0
+     * </p>
+     *
+     * @param denominator
+     *            the denominator
+     * @return averaged quotient value
+     * @throws IllegalStateException
+     *             if a size dimension is not 0, but the denominator has a 0
+     *             value for the same dimension.
+     */
+    @Override
+    public double divide(SizeDimension denominator) {
+        int nuOfDimensions = 0;
+        double sumQuotients = 0.0;
+        for (int index = 0; index < Math.max(getNuOfDimensions(),
+                        denominator.getNuOfDimensions()); index++) {
+            if (get(index) != 0 && denominator.get(index) == 0) {
+                throw new IllegalArgumentException(
+                                "numerator > 0 and denominator = 0. cannot divide by 0");
+            } else if (get(index) == 0 && denominator.get(index) == 0) {
+                continue;
+            } else {
+                nuOfDimensions++;
+                sumQuotients += (double) get(index) / (double) denominator.get(index);
+            }
+        }
+        if (nuOfDimensions > 0) {
+            return sumQuotients / nuOfDimensions;
+        }
+        return 0.0;
+
+    }
+
+    /**
+     * Returns the negative part of the size dimension.
+     *
+     * <p>
+     * The function returns a new {{@linkplain SizeDimension} object with the
+     * same number of dimensions and with all positive dimension set to zero.
+     * </p>
+     *
+     * @return Returns the negative part of the size dimension
+     */
+    @Override
+    public SizeDimension getNegativeDimensions() {
+        SizeDimension res = new SizeDimension(getNuOfDimensions());
+        for (int i = 0; i < getNuOfDimensions(); i++) {
+            if (get(i) < 0) {
+                res.dimensions[i] = get(i);
+            } else {
+                res.dimensions[i] = 0;
+            }
+        }
+        return res;
+    }
+
+    /**
+     * Returns the positive part of the size dimension.
+     *
+     * <p>
+     * The function returns a new {{@linkplain SizeDimension} object with the
+     * same number of dimensions and with all negative dimension set to zero.
+     * </p>
+     *
+     * @return Returns the positive part of the size dimension
+     */
+    @Override
+    public SizeDimension getPositiveDimensions() {
+        SizeDimension res = new SizeDimension(getNuOfDimensions());
+        for (int i = 0; i < getNuOfDimensions(); i++) {
+            if (get(i) > 0) {
+                res.dimensions[i] = get(i);
+            } else {
+                res.dimensions[i] = 0;
+            }
+        }
+        return res;
+    }
+
+}
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/PickupAndDeliverShipmentLoadActivityLevelConstraint.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/PickupAndDeliverShipmentLoadActivityLevelConstraint.java
index b722aba81..a5158c000 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/PickupAndDeliverShipmentLoadActivityLevelConstraint.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/PickupAndDeliverShipmentLoadActivityLevelConstraint.java
@@ -18,7 +18,7 @@
 package com.graphhopper.jsprit.core.problem.constraint;
 
 import com.graphhopper.jsprit.core.algorithm.state.InternalStates;
-import com.graphhopper.jsprit.core.problem.Capacity;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.job.Shipment;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.*;
@@ -37,7 +37,7 @@
 
     private RouteAndActivityStateGetter stateManager;
 
-    private Capacity defaultValue;
+    private SizeDimension defaultValue;
 
     /**
      * Constructs the constraint ensuring capacity constraint at each activity.
@@ -50,7 +50,7 @@
     public PickupAndDeliverShipmentLoadActivityLevelConstraint(RouteAndActivityStateGetter stateManager) {
         super();
         this.stateManager = stateManager;
-        defaultValue = Capacity.Builder.newInstance().build();
+        defaultValue = SizeDimension.Builder.newInstance().build();
     }
 
     // private String visualize(JobInsertionContext iFacts, TourActivity
@@ -97,28 +97,28 @@ public ConstraintsStatus fulfilled(JobInsertionContext iFacts, TourActivity prev
         // <--- Check ends here
 
         // System.out.println(visualize(iFacts, prevAct, newAct, nextAct));
-        Capacity loadAtPrevAct;
+        SizeDimension loadAtPrevAct;
         if (prevAct instanceof Start) {
-            loadAtPrevAct = stateManager.getRouteState(iFacts.getRoute(), InternalStates.LOAD_AT_BEGINNING, Capacity.class);
+            loadAtPrevAct = stateManager.getRouteState(iFacts.getRoute(), InternalStates.LOAD_AT_BEGINNING, SizeDimension.class);
             if (loadAtPrevAct == null) {
                 loadAtPrevAct = defaultValue;
             }
         } else {
-            loadAtPrevAct = stateManager.getActivityState(prevAct, InternalStates.LOAD, Capacity.class);
+            loadAtPrevAct = stateManager.getActivityState(prevAct, InternalStates.LOAD, SizeDimension.class);
             if (loadAtPrevAct == null) {
                 loadAtPrevAct = defaultValue;
             }
         }
-        Capacity vehicleCapacityDimensions = iFacts.getNewVehicle().getType().getCapacityDimensions();
+        SizeDimension vehicleCapacityDimensions = iFacts.getNewVehicle().getType().getCapacityDimensions();
 
         if (newAct instanceof PickupActivityNEW) {
-            Capacity newCapacity = loadAtPrevAct.add(newAct.getSize());
+            SizeDimension newCapacity = loadAtPrevAct.add(newAct.getSize());
             if (!newCapacity.isLessOrEqual(vehicleCapacityDimensions)) {
                 return ConstraintsStatus.NOT_FULFILLED;
             }
         }
         if (newAct instanceof DeliveryActivityNEW) {
-            Capacity newCapacity = loadAtPrevAct.add(newAct.getSize().abs());
+            SizeDimension newCapacity = loadAtPrevAct.add(newAct.getSize().abs());
             if (!newCapacity.isLessOrEqual(vehicleCapacityDimensions)) {
                 return ConstraintsStatus.NOT_FULFILLED_BREAK;
             }
@@ -132,32 +132,32 @@ public ConstraintsStatus fulfilled(JobInsertionContext iFacts, TourActivity prev
     // return ConstraintsStatus.FULFILLED;
     // }
     // // System.out.println(visualize(iFacts, prevAct, newAct, nextAct));
-    // Capacity loadAtPrevAct;
+    // SizeDimension loadAtPrevAct;
     // if (prevAct instanceof Start) {
     // loadAtPrevAct = stateManager.getRouteState(iFacts.getRoute(),
-    // InternalStates.LOAD_AT_BEGINNING, Capacity.class);
+    // InternalStates.LOAD_AT_BEGINNING, SizeDimension.class);
     // if (loadAtPrevAct == null) {
     // loadAtPrevAct = defaultValue;
     // }
     // } else {
     // loadAtPrevAct = stateManager.getActivityState(prevAct,
-    // InternalStates.LOAD, Capacity.class);
+    // InternalStates.LOAD, SizeDimension.class);
     // if (loadAtPrevAct == null) {
     // loadAtPrevAct = defaultValue;
     // }
     // }
-    // Capacity vehicleCapacityDimensions =
+    // SizeDimension vehicleCapacityDimensions =
     // iFacts.getNewVehicle().getType().getCapacityDimensions();
     //
     // if (newAct instanceof PickupShipmentDEPRECATED) {
-    // Capacity newCapacity = Capacity.addup(loadAtPrevAct, newAct.getSize());
+    // SizeDimension newCapacity = SizeDimension.addup(loadAtPrevAct, newAct.getSize());
     // if (!newCapacity.isLessOrEqual(vehicleCapacityDimensions)) {
     // return ConstraintsStatus.NOT_FULFILLED;
     // }
     // }
     // if (newAct instanceof DeliverShipmentDEPRECATED) {
-    // Capacity newCapacity = Capacity.addup(loadAtPrevAct,
-    // Capacity.invert(newAct.getSize()));
+    // SizeDimension newCapacity = SizeDimension.addup(loadAtPrevAct,
+    // SizeDimension.invert(newAct.getSize()));
     // if (!newCapacity.isLessOrEqual(vehicleCapacityDimensions)) {
     // return ConstraintsStatus.NOT_FULFILLED_BREAK;
     // }
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadActivityLevelConstraint.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadActivityLevelConstraint.java
index 13dcbb4eb..c4e27ef43 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadActivityLevelConstraint.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadActivityLevelConstraint.java
@@ -18,7 +18,8 @@
 package com.graphhopper.jsprit.core.problem.constraint;
 
 import com.graphhopper.jsprit.core.algorithm.state.InternalStates;
-import com.graphhopper.jsprit.core.problem.Capacity;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
+import com.graphhopper.jsprit.core.problem.SizeDimension.SizeDimensionSign;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.Start;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TourActivity;
@@ -36,40 +37,40 @@
 
     private RouteAndActivityStateGetter stateManager;
 
-    private Capacity defaultValue;
+    private SizeDimension defaultValue;
 
     public ServiceLoadActivityLevelConstraint(RouteAndActivityStateGetter stateManager) {
         super();
         this.stateManager = stateManager;
-        defaultValue = Capacity.Builder.newInstance().build();
+        defaultValue = SizeDimension.Builder.newInstance().build();
     }
 
     @Override
     public ConstraintsStatus fulfilled(JobInsertionContext iFacts, TourActivity prevAct, TourActivity newAct, TourActivity nextAct, double prevActDepTime) {
-        Capacity futureMaxLoad;
-        Capacity prevMaxLoad;
+        SizeDimension futureMaxLoad;
+        SizeDimension prevMaxLoad;
         if (prevAct instanceof Start) {
-            futureMaxLoad = stateManager.getRouteState(iFacts.getRoute(), InternalStates.MAXLOAD, Capacity.class);
+            futureMaxLoad = stateManager.getRouteState(iFacts.getRoute(), InternalStates.MAXLOAD, SizeDimension.class);
             if (futureMaxLoad == null) {
                 futureMaxLoad = defaultValue;
             }
-            prevMaxLoad = stateManager.getRouteState(iFacts.getRoute(), InternalStates.LOAD_AT_BEGINNING, Capacity.class);
+            prevMaxLoad = stateManager.getRouteState(iFacts.getRoute(), InternalStates.LOAD_AT_BEGINNING, SizeDimension.class);
             if (prevMaxLoad == null) {
                 prevMaxLoad = defaultValue;
             }
         } else {
-            futureMaxLoad = stateManager.getActivityState(prevAct, InternalStates.FUTURE_MAXLOAD, Capacity.class);
+            futureMaxLoad = stateManager.getActivityState(prevAct, InternalStates.FUTURE_MAXLOAD, SizeDimension.class);
             if (futureMaxLoad == null) {
                 futureMaxLoad = defaultValue;
             }
-            prevMaxLoad = stateManager.getActivityState(prevAct, InternalStates.PAST_MAXLOAD, Capacity.class);
+            prevMaxLoad = stateManager.getActivityState(prevAct, InternalStates.PAST_MAXLOAD, SizeDimension.class);
             if (prevMaxLoad == null) {
                 prevMaxLoad = defaultValue;
             }
 
         }
 
-        if (newAct.getSize().isPositive()) {
+        if (newAct.getSize().sign() == SizeDimensionSign.POSITIVE) {
             if (!newAct.getSize().add(futureMaxLoad).isLessOrEqual(
                 iFacts.getNewVehicle().getType().getCapacityDimensions())) {
                 return ConstraintsStatus.NOT_FULFILLED;
@@ -84,7 +85,7 @@ public ConstraintsStatus fulfilled(JobInsertionContext iFacts, TourActivity prev
          * getCargoSize(). For positive or zero activities as Service and Pickup
          * they could refer to the same object.)
          */
-        if (!newAct.getSize().isPositive()) {
+        if (newAct.getSize().sign() != SizeDimensionSign.POSITIVE) {
             if (!newAct.getSize().abs().add(prevMaxLoad).isLessOrEqual(
                 iFacts.getNewVehicle().getType().getCapacityDimensions())) {
                 return ConstraintsStatus.NOT_FULFILLED_BREAK;
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadRouteLevelConstraint.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadRouteLevelConstraint.java
index 5388143b2..b9e027fb2 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadRouteLevelConstraint.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadRouteLevelConstraint.java
@@ -18,7 +18,7 @@
 package com.graphhopper.jsprit.core.problem.constraint;
 
 import com.graphhopper.jsprit.core.algorithm.state.InternalStates;
-import com.graphhopper.jsprit.core.problem.Capacity;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.job.AbstractJob;
 import com.graphhopper.jsprit.core.problem.misc.JobInsertionContext;
 import com.graphhopper.jsprit.core.problem.solution.route.state.RouteAndActivityStateGetter;
@@ -42,20 +42,20 @@ public ServiceLoadRouteLevelConstraint(RouteAndActivityStateGetter stateManager)
 
     @Override
     public boolean fulfilled(JobInsertionContext insertionContext) {
-        Capacity maxLoadAtRoute = stateManager.getRouteState(insertionContext.getRoute(), InternalStates.MAXLOAD, Capacity.class);
-        maxLoadAtRoute = (maxLoadAtRoute != null) ? maxLoadAtRoute : Capacity.EMPTY;
-        Capacity capacityOfNewVehicle = insertionContext.getNewVehicle().getType().getCapacityDimensions();
+        SizeDimension maxLoadAtRoute = stateManager.getRouteState(insertionContext.getRoute(), InternalStates.MAXLOAD, SizeDimension.class);
+        maxLoadAtRoute = (maxLoadAtRoute != null) ? maxLoadAtRoute : SizeDimension.EMPTY;
+        SizeDimension capacityOfNewVehicle = insertionContext.getNewVehicle().getType().getCapacityDimensions();
         if (!maxLoadAtRoute.isLessOrEqual(capacityOfNewVehicle)) {
             return false;
         }
         AbstractJob job = (AbstractJob) insertionContext.getJob();
-        Capacity loadAtDepot = stateManager.getRouteState(insertionContext.getRoute(), InternalStates.LOAD_AT_BEGINNING, Capacity.class);
-        loadAtDepot = (loadAtDepot != null) ? loadAtDepot : Capacity.EMPTY;
+        SizeDimension loadAtDepot = stateManager.getRouteState(insertionContext.getRoute(), InternalStates.LOAD_AT_BEGINNING, SizeDimension.class);
+        loadAtDepot = (loadAtDepot != null) ? loadAtDepot : SizeDimension.EMPTY;
         if (!(loadAtDepot.add(job.getSizeAtStart()).isLessOrEqual(capacityOfNewVehicle))) {
             return false;
         }
-        Capacity loadAtEnd = stateManager.getRouteState(insertionContext.getRoute(), InternalStates.LOAD_AT_END, Capacity.class);
-        loadAtEnd = (loadAtEnd != null) ? loadAtEnd : Capacity.EMPTY;
+        SizeDimension loadAtEnd = stateManager.getRouteState(insertionContext.getRoute(), InternalStates.LOAD_AT_END, SizeDimension.class);
+        loadAtEnd = (loadAtEnd != null) ? loadAtEnd : SizeDimension.EMPTY;
         if (!(loadAtEnd.add(job.getSizeAtEnd()).isLessOrEqual(capacityOfNewVehicle))) {
             return false;
         }
@@ -69,18 +69,18 @@ public boolean fulfilled(JobInsertionContext insertionContext) {
 //
 //        }
 //        if (insertionContext.getJob() instanceof Delivery) {
-//            Capacity loadAtDepot = stateManager.getRouteState(insertionContext.getRoute(), InternalStates.LOAD_AT_BEGINNING, Capacity.class);
+//            SizeDimension loadAtDepot = stateManager.getRouteState(insertionContext.getRoute(), InternalStates.LOAD_AT_BEGINNING, SizeDimension.class);
 //            if (loadAtDepot == null) {
-//                loadAtDepot = Capacity.EMPTY;
+//                loadAtDepot = SizeDimension.EMPTY;
 //            }
 //            if (!loadAtDepot.add(insertionContext.getJob().getSize())
 //                .isLessOrEqual(capacityOfNewVehicle)) {
 //                return false;
 //            }
 //        } else if (insertionContext.getJob() instanceof Pickup || insertionContext.getJob() instanceof Service) {
-//            Capacity loadAtEnd = stateManager.getRouteState(insertionContext.getRoute(), InternalStates.LOAD_AT_END, Capacity.class);
+//            SizeDimension loadAtEnd = stateManager.getRouteState(insertionContext.getRoute(), InternalStates.LOAD_AT_END, SizeDimension.class);
 //            if (loadAtEnd == null) {
-//                loadAtEnd = Capacity.EMPTY;
+//                loadAtEnd = SizeDimension.EMPTY;
 //            }
 //            if (!loadAtEnd.add(insertionContext.getJob().getSize())
 //                .isLessOrEqual(capacityOfNewVehicle)) {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractJob.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractJob.java
index 77d6bba92..4b95e1d56 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractJob.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/AbstractJob.java
@@ -18,7 +18,7 @@
 
 package com.graphhopper.jsprit.core.problem.job;
 
-import com.graphhopper.jsprit.core.problem.Capacity;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.Skills;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
@@ -117,7 +117,7 @@
      */
     public abstract static class JobBuilder<T extends AbstractJob, B extends JobBuilder<T, B>> {
 
-        protected Capacity.Builder capacityBuilder = Capacity.Builder.newInstance();
+        protected SizeDimension.Builder capacityBuilder = SizeDimension.Builder.newInstance();
 
         protected Skills.Builder skillBuilder = Skills.Builder.newInstance();
 
@@ -172,7 +172,7 @@ public B addAllRequiredSkills(Skills skills) {
         }
 
         @SuppressWarnings("unchecked")
-        public B addAllSizeDimensions(Capacity size) {
+        public B addAllSizeDimensions(SizeDimension size) {
             for (int i = 0; i < size.getNuOfDimensions(); i++) {
                 capacityBuilder.addDimension(i, size.get(i));
             }
@@ -223,7 +223,7 @@ public final T build() {
 
         protected abstract T createInstance();
 
-        public Capacity getCapacity() {
+        public SizeDimension getCapacity() {
             return capacityBuilder.build();
         }
 
@@ -261,9 +261,9 @@ public int getPriority() {
 
     protected Set<TimeWindow> allTimeWindows;
 
-    private Capacity sizeAtStart;
+    private SizeDimension sizeAtStart;
 
-    private Capacity sizeAtEnd;
+    private SizeDimension sizeAtEnd;
 
 
 
@@ -314,8 +314,8 @@ protected void prepareCaches() {
         sizeAtEnd = calcSizeAt(false);
     }
 
-    private Capacity calcSizeAt(boolean start) {
-        Capacity size = Capacity.EMPTY;
+    private SizeDimension calcSizeAt(boolean start) {
+        SizeDimension size = SizeDimension.EMPTY;
         for (JobActivity act : activityList.getAll()) {
             size = size.add(act.getSize());
         }
@@ -329,11 +329,11 @@ private void addTimeWindows(Collection<TimeWindow> timeWindows) {
         }
     }
 
-    public Capacity getSizeAtStart() {
+    public SizeDimension getSizeAtStart() {
         return sizeAtStart;
     }
 
-    public Capacity getSizeAtEnd() {
+    public SizeDimension getSizeAtEnd() {
         return sizeAtEnd;
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Delivery.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Delivery.java
index 82a3892d2..638a0a414 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Delivery.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Delivery.java
@@ -17,7 +17,7 @@
  */
 package com.graphhopper.jsprit.core.problem.job;
 
-import com.graphhopper.jsprit.core.problem.Capacity;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverServiceDEPRECATED;
 
 /**
@@ -60,7 +60,7 @@ protected void createActivities(JobBuilder<?, ?> builder) {
 
     @Override
     @Deprecated
-    public Capacity getSize() {
+    public SizeDimension getSize() {
         return super.getSize().abs();
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Job.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Job.java
index a3c5b527c..e32b72142 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Job.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Job.java
@@ -43,9 +43,9 @@
      * Returns size, i.e. capacity-demand, of this job which can consist of an
      * arbitrary number of capacity dimensions.
      *
-     * @return Capacity
+     * @return SizeDimension
      */
-    public Capacity getSize();
+    public SizeDimension getSize();
 
     public Skills getRequiredSkills();
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/ReturnedShipment.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/ReturnedShipment.java
index 7b31c7869..f5f9c7807 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/ReturnedShipment.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/ReturnedShipment.java
@@ -17,7 +17,7 @@
  */
 package com.graphhopper.jsprit.core.problem.job;
 
-import com.graphhopper.jsprit.core.problem.Capacity;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.*;
 
@@ -48,7 +48,7 @@
 
         protected TimeWindowsImpl backhaulTimeWindows = new TimeWindowsImpl();
 
-        protected Capacity.Builder backhaulCapacityBuilder = Capacity.Builder.newInstance();
+        protected SizeDimension.Builder backhaulCapacityBuilder = SizeDimension.Builder.newInstance();
 
         /**
          * Returns new instance of this builder.
@@ -141,7 +141,7 @@ public Builder addBackhaulSizeDimension(int dimensionIndex, int dimensionValue)
             return this;
         }
 
-        public Builder addAllBackhaulSizeDimensions(Capacity size) {
+        public Builder addAllBackhaulSizeDimensions(SizeDimension size) {
             for (int i = 0; i < size.getNuOfDimensions(); i++) {
                 backhaulCapacityBuilder.addDimension(i, size.get(i));
             }
@@ -171,8 +171,8 @@ private TimeWindowsImpl getBackhaulTimeWindows() {
             return backhaulTimeWindows;
         }
 
-        private Capacity getBackhaulCapacity() {
-            Capacity backhaulCapacity = backhaulCapacityBuilder.build();
+        private SizeDimension getBackhaulCapacity() {
+            SizeDimension backhaulCapacity = backhaulCapacityBuilder.build();
             // If no capacity is specified, the backhaul capacity will be the
             // same as the picking one.
             if (backhaulCapacity.getNuOfDimensions() == 0) {
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java
index e82f05b46..b71d4725a 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Service.java
@@ -17,7 +17,7 @@
  */
 package com.graphhopper.jsprit.core.problem.job;
 
-import com.graphhopper.jsprit.core.problem.Capacity;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.JobActivity;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupServiceDEPRECATED;
@@ -292,7 +292,7 @@ public String toString() {
 
     @Override
     @Deprecated
-    public Capacity getSize() {
+    public SizeDimension getSize() {
         return getServiceActivity().getSize();
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java
index f0b7f2d65..deaf7af79 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/job/Shipment.java
@@ -17,7 +17,7 @@
  */
 package com.graphhopper.jsprit.core.problem.job;
 
-import com.graphhopper.jsprit.core.problem.Capacity;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.DeliverShipmentDEPRECATED;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupShipmentDEPRECATED;
@@ -384,7 +384,7 @@ public TimeWindow getPickupTimeWindow() {
 
     @Override
     @Deprecated
-    public Capacity getSize() {
+    public SizeDimension getSize() {
         return getPickupActivity().getSize();
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/AbstractActivityNEW.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/AbstractActivityNEW.java
index 69434aa51..f61dee17a 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/AbstractActivityNEW.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/AbstractActivityNEW.java
@@ -1,7 +1,7 @@
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
 
-import com.graphhopper.jsprit.core.problem.Capacity;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.Location;
 
 import java.lang.reflect.Constructor;
@@ -10,7 +10,7 @@
 public abstract class AbstractActivityNEW implements TourActivity {
 
     private int index;
-    protected Capacity capacity;
+    protected SizeDimension capacity;
     protected double arrTime;
     protected double endTime;
     protected double theoreticalEarliest = 0;
@@ -19,7 +19,7 @@
     protected Location location;
 
 
-    public AbstractActivityNEW(String type, Location location, Capacity capacity) {
+    public AbstractActivityNEW(String type, Location location, SizeDimension capacity) {
         super();
         this.capacity = capacity;
         this.type = type;
@@ -88,7 +88,7 @@ public void setEndTime(double endTime) {
     }
 
     @Override
-    public Capacity getSize() {
+    public SizeDimension getSize() {
         return capacity;
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivity.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivity.java
index 314606809..470b89837 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivity.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/BreakActivity.java
@@ -17,7 +17,7 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import com.graphhopper.jsprit.core.problem.Capacity;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.job.AbstractJob;
 import com.graphhopper.jsprit.core.problem.job.Break;
@@ -34,7 +34,7 @@ public static BreakActivity newInstance(Break aBreak, Builder builder) {
 
     // protected BreakActivity(Break aBreak) {
     // super(aBreak, "Break", aBreak.getLocation(), aBreak.getServiceDuration(),
-    // Capacity.createNullCapacity(aBreak.getSize()), aBreak.getTimeWindows());
+    // SizeDimension.createNullCapacity(aBreak.getSize()), aBreak.getTimeWindows());
     // }
 
     public BreakActivity(BreakActivity breakActivity) {
@@ -42,7 +42,7 @@ public BreakActivity(BreakActivity breakActivity) {
     }
 
     private BreakActivity(AbstractJob job, String name, Location location, double operationTime,
-                          Capacity capacity, Collection<TimeWindow> timeWindows) {
+                          SizeDimension capacity, Collection<TimeWindow> timeWindows) {
         super(job, name, location, operationTime, capacity, timeWindows);
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliveryActivityNEW.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliveryActivityNEW.java
index b15910d1c..5d471942e 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliveryActivityNEW.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/DeliveryActivityNEW.java
@@ -17,7 +17,7 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import com.graphhopper.jsprit.core.problem.Capacity;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.job.AbstractJob;
 
@@ -27,7 +27,7 @@
 
 
     public DeliveryActivityNEW(AbstractJob job, String name, Location location,
-                               double operationTime, Capacity capacity, Collection<TimeWindow> timeWindows) {
+                               double operationTime, SizeDimension capacity, Collection<TimeWindow> timeWindows) {
         super(job, name, location, operationTime, capacity, timeWindows);
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/End.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/End.java
index 4d4289932..e2ad63727 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/End.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/End.java
@@ -35,7 +35,7 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import com.graphhopper.jsprit.core.problem.Capacity;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.Location;
 
 public final class End extends InternalActivity {
@@ -53,7 +53,7 @@ public static End copyOf(End end) {
     }
 
     public End(Location location, double theoreticalStart, double theoreticalEnd) {
-        super("end", location, Capacity.EMPTY);
+        super("end", location, SizeDimension.EMPTY);
         setTheoreticalEarliestOperationStartTime(theoreticalStart);
         setTheoreticalLatestOperationStartTime(theoreticalEnd);
         endTime = theoreticalStart;
@@ -86,7 +86,7 @@ public String toString() {
 /*
  * package com.graphhopper.jsprit.core.problem.solution.route.activity;
  *
- * import com.graphhopper.jsprit.core.problem.Capacity; import com.graphhopper.jsprit.core.problem.AbstractActivityNEW;
+ * import com.graphhopper.jsprit.core.problem.SizeDimension; import com.graphhopper.jsprit.core.problem.AbstractActivityNEW;
  * import com.graphhopper.jsprit.core.problem.Location;
  *
  * public final class End extends AbstractActivityNEW {
@@ -96,7 +96,7 @@ public String toString() {
  *
  * public static End copyOf(End end) { return new End(end); }
  *
- * private final static Capacity capacity = Capacity.Builder.newInstance().build();
+ * private final static SizeDimension capacity = SizeDimension.Builder.newInstance().build();
  *
  *
  * private double endTime = -1;
@@ -158,7 +158,7 @@ public String toString() {
  *
  * @Override public TourActivity duplicate() { return new End(this); }
  *
- * @Override public Capacity getSize() { return capacity; }
+ * @Override public SizeDimension getSize() { return capacity; }
  *
  * }
  */
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ExchangeActivityNEW.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ExchangeActivityNEW.java
index 485dec39d..f7fc39dd9 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ExchangeActivityNEW.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ExchangeActivityNEW.java
@@ -17,7 +17,7 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import com.graphhopper.jsprit.core.problem.Capacity;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.job.AbstractJob;
 
@@ -26,7 +26,7 @@
 public class ExchangeActivityNEW extends JobActivity {
 
     public ExchangeActivityNEW(AbstractJob job, String name, Location location,
-                               double operationTime, Capacity capacity, Collection<TimeWindow> timeWindows) {
+                               double operationTime, SizeDimension capacity, Collection<TimeWindow> timeWindows) {
         super(job, name, location, operationTime, capacity, timeWindows);
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/InternalActivity.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/InternalActivity.java
index fc300c790..6f57d3878 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/InternalActivity.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/InternalActivity.java
@@ -1,6 +1,6 @@
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import com.graphhopper.jsprit.core.problem.Capacity;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.Location;
 
 /**
@@ -10,7 +10,7 @@
  */
 public abstract class InternalActivity extends AbstractActivityNEW implements InternalActivityMarker {
 
-    public InternalActivity(String name, Location location, Capacity capacity) {
+    public InternalActivity(String name, Location location, SizeDimension capacity) {
         super(name, location, capacity);
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/InternalJobActivity.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/InternalJobActivity.java
index 39b088ddd..5b06f9a82 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/InternalJobActivity.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/InternalJobActivity.java
@@ -1,6 +1,6 @@
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import com.graphhopper.jsprit.core.problem.Capacity;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.job.AbstractJob;
 
@@ -14,7 +14,7 @@
 public abstract class InternalJobActivity extends JobActivity implements InternalActivityMarker {
 
     public InternalJobActivity(AbstractJob job, String name, Location location,
-                               double operationTime, Capacity capacity, Collection<TimeWindow> timeWindows) {
+                               double operationTime, SizeDimension capacity, Collection<TimeWindow> timeWindows) {
         super(job, name, location, operationTime, capacity, timeWindows);
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/JobActivity.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/JobActivity.java
index 1c798684e..ca8516657 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/JobActivity.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/JobActivity.java
@@ -1,6 +1,6 @@
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import com.graphhopper.jsprit.core.problem.Capacity;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.job.AbstractJob;
 import com.graphhopper.jsprit.core.problem.job.Job;
@@ -27,7 +27,7 @@
     private int orderNumber;
 
     public JobActivity(AbstractJob job, String type, Location location, double operationTime,
-                       Capacity capacity, Collection<TimeWindow> timeWindows) {
+                       SizeDimension capacity, Collection<TimeWindow> timeWindows) {
         super(type, location, capacity);
         this.job = job;
         this.operationTime = operationTime;
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupActivityNEW.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupActivityNEW.java
index 81b99c22a..46450ada7 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupActivityNEW.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/PickupActivityNEW.java
@@ -17,7 +17,7 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import com.graphhopper.jsprit.core.problem.Capacity;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.job.AbstractJob;
 
@@ -26,7 +26,7 @@
 public class PickupActivityNEW extends JobActivity {
 
     public PickupActivityNEW(AbstractJob job, String name, Location location, double operationTime,
-                             Capacity capacity, Collection<TimeWindow> timeWindows) {
+                             SizeDimension capacity, Collection<TimeWindow> timeWindows) {
         super(job, name, location, operationTime, capacity, timeWindows);
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivityNEW.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivityNEW.java
index ea5b78738..918519e83 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivityNEW.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/ServiceActivityNEW.java
@@ -17,7 +17,7 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import com.graphhopper.jsprit.core.problem.Capacity;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.job.AbstractJob;
 import com.graphhopper.jsprit.core.problem.job.Service;
@@ -27,7 +27,7 @@
 public class ServiceActivityNEW extends JobActivity {
 
     public ServiceActivityNEW(AbstractJob job, String name, Location location, double operationTime,
-                              Capacity capacity, Collection<TimeWindow> timeWindows) {
+                              SizeDimension capacity, Collection<TimeWindow> timeWindows) {
         super(job, name, location, operationTime, capacity, timeWindows);
     }
 
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/Start.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/Start.java
index f368382a9..09e53e7fa 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/Start.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/Start.java
@@ -17,7 +17,7 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import com.graphhopper.jsprit.core.problem.Capacity;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.Location;
 
 public final class Start extends InternalActivity {
@@ -35,7 +35,7 @@ public static Start copyOf(Start start) {
     }
 
     public Start(Location location, double theoreticalStart, double theoreticalEnd) {
-        super("start", location, Capacity.EMPTY);
+        super("start", location, SizeDimension.EMPTY);
         setTheoreticalEarliestOperationStartTime(theoreticalStart);
         setTheoreticalLatestOperationStartTime(theoreticalEnd);
         endTime = theoreticalStart;
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TourActivity.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TourActivity.java
index 82e05fdff..e8dc2ab5e 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TourActivity.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/solution/route/activity/TourActivity.java
@@ -17,7 +17,7 @@
  */
 package com.graphhopper.jsprit.core.problem.solution.route.activity;
 
-import com.graphhopper.jsprit.core.problem.Capacity;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.HasIndex;
 import com.graphhopper.jsprit.core.problem.Location;
 
@@ -108,7 +108,7 @@
      *
      * @return capacity
      */
-    public abstract Capacity getSize();
+    public abstract SizeDimension getSize();
 
     /**
      * Makes a deep copy of this activity.
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleType.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleType.java
index f2ff25d79..98745037d 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleType.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleType.java
@@ -17,7 +17,7 @@
  */
 package com.graphhopper.jsprit.core.problem.vehicle;
 
-import com.graphhopper.jsprit.core.problem.Capacity;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 
 /**
  * Basic interface for vehicle-type-data.
@@ -36,9 +36,9 @@
     /**
      * Returns capacity dimensions.
      *
-     * @return {@link com.graphhopper.jsprit.core.problem.Capacity}
+     * @return {@link com.graphhopper.jsprit.core.problem.SizeDimension}
      */
-    public Capacity getCapacityDimensions();
+    public SizeDimension getCapacityDimensions();
 
     /**
      * Returns maximum velocity of this vehicle-type.
diff --git a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleTypeImpl.java b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleTypeImpl.java
index a97d8378c..fd6650dfe 100644
--- a/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleTypeImpl.java
+++ b/jsprit-core/src/main/java/com/graphhopper/jsprit/core/problem/vehicle/VehicleTypeImpl.java
@@ -18,7 +18,7 @@
 package com.graphhopper.jsprit.core.problem.vehicle;
 
 
-import com.graphhopper.jsprit.core.problem.Capacity;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 
 /**
  * Implementation of {@link VehicleType}.
@@ -113,9 +113,9 @@ public String toString() {
 
         private String profile = "car";
 
-        private Capacity.Builder capacityBuilder = Capacity.Builder.newInstance();
+        private SizeDimension.Builder capacityBuilder = SizeDimension.Builder.newInstance();
 
-        private Capacity capacityDimensions = null;
+        private SizeDimension capacityDimensions = null;
 
         private boolean dimensionAdded = false;
 
@@ -274,7 +274,7 @@ public Builder addCapacityDimension(int dimIndex, int dimVal) {
             }
             if (capacityDimensions != null) {
                 throw new IllegalArgumentException("either build your dimension with build your dimensions with " +
-                    "addCapacityDimension(int dimIndex, int dimVal) or set the already built dimensions with .setCapacityDimensions(Capacity capacity)." +
+                    "addCapacityDimension(int dimIndex, int dimVal) or set the already built dimensions with .setCapacityDimensions(SizeDimension capacity)." +
                     "You used both methods.");
             }
             dimensionAdded = true;
@@ -293,10 +293,10 @@ public Builder addCapacityDimension(int dimIndex, int dimVal) {
          * @return this builder
          * @throws IllegalArgumentException if capacityDimension has already been added
          */
-        public Builder setCapacityDimensions(Capacity capacity) {
+        public Builder setCapacityDimensions(SizeDimension capacity) {
             if (dimensionAdded) {
                 throw new IllegalArgumentException("either build your dimension with build your dimensions with " +
-                    "addCapacityDimension(int dimIndex, int dimVal) or set the already built dimensions with .setCapacityDimensions(Capacity capacity)." +
+                    "addCapacityDimension(int dimIndex, int dimVal) or set the already built dimensions with .setCapacityDimensions(SizeDimension capacity)." +
                     "You used both methods.");
             }
             capacityDimensions = capacity;
@@ -351,7 +351,7 @@ public boolean equals(Object obj) {
 
     private final VehicleTypeImpl.VehicleCostParams vehicleCostParams;
 
-    private final Capacity capacityDimensions;
+    private final SizeDimension capacityDimensions;
 
     private final double maxVelocity;
 
@@ -406,7 +406,7 @@ public double getAvgVelocity() {
     }
 
     @Override
-    public Capacity getCapacityDimensions() {
+    public SizeDimension getCapacityDimensions() {
         return capacityDimensions;
     }
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CapacityConstraint_IT.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CapacityConstraint_IT.java
index 9c2face8d..a626b4fea 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CapacityConstraint_IT.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/CapacityConstraint_IT.java
@@ -20,7 +20,7 @@
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
 import com.graphhopper.jsprit.core.analysis.SolutionAnalyser;
 import com.graphhopper.jsprit.core.distance.ManhattanDistanceCalculator;
-import com.graphhopper.jsprit.core.problem.Capacity;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.cost.TransportDistance;
@@ -101,8 +101,8 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
         });
 
         for (VehicleRoute r : solution.getRoutes()) {
-            Capacity loadAtBeginning = sa.getLoadAtBeginning(r);
-            Capacity capacityDimensions = r.getVehicle().getType().getCapacityDimensions();
+            SizeDimension loadAtBeginning = sa.getLoadAtBeginning(r);
+            SizeDimension capacityDimensions = r.getVehicle().getType().getCapacityDimensions();
             //            System.out.println(r.getVehicle().getId() + " load@beginning: "  + loadAtBeginning);
             //            System.out.println("cap: " + capacityDimensions);
             Assert.assertTrue("capacity has been exceeded",
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/FirstCustomJobExample.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/FirstCustomJobExample.java
index a728ca811..9c6055484 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/FirstCustomJobExample.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/FirstCustomJobExample.java
@@ -19,7 +19,7 @@
 package com.graphhopper.jsprit.core.algorithm;
 
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
-import com.graphhopper.jsprit.core.problem.Capacity;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
@@ -38,7 +38,7 @@
 
     @Test
     public void test() {
-        CustomPickupJob cj = CustomPickupJob.Builder.newInstance("job").addPickup(Location.newInstance(10, 0), Capacity.EMPTY).build();
+        CustomPickupJob cj = CustomPickupJob.Builder.newInstance("job").addPickup(Location.newInstance(10, 0), SizeDimension.EMPTY).build();
         Vehicle v = VehicleImpl.Builder.newInstance("v").setStartLocation(Location.newInstance(0, 0)).build();
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance()
             .addJob(cj).addVehicle(v).build();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/FirstCustomJobWithMultipleActivitiesExample.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/FirstCustomJobWithMultipleActivitiesExample.java
index dfa817eee..9a5ec8df7 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/FirstCustomJobWithMultipleActivitiesExample.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/FirstCustomJobWithMultipleActivitiesExample.java
@@ -19,7 +19,7 @@
 package com.graphhopper.jsprit.core.algorithm;
 
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
-import com.graphhopper.jsprit.core.problem.Capacity;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.solution.VehicleRoutingProblemSolution;
@@ -43,9 +43,9 @@
     @Test
     public void shouldRunOK() {
         CustomPickupJob cj = CustomPickupJob.Builder.newInstance("job")
-            .addPickup(Location.newInstance(10, 0), Capacity.Builder.newInstance().addDimension(0, 1).build())
-            .addPickup(Location.newInstance(5, 0), Capacity.Builder.newInstance().addDimension(0, 2).build())
-            .addPickup(Location.newInstance(20, 0), Capacity.Builder.newInstance().addDimension(0, 1).build())
+            .addPickup(Location.newInstance(10, 0), SizeDimension.Builder.newInstance().addDimension(0, 1).build())
+            .addPickup(Location.newInstance(5, 0), SizeDimension.Builder.newInstance().addDimension(0, 2).build())
+            .addPickup(Location.newInstance(20, 0), SizeDimension.Builder.newInstance().addDimension(0, 1).build())
             .build();
         VehicleType type = VehicleTypeImpl.Builder.newInstance("type").addCapacityDimension(0, 4).build();
         Vehicle v = VehicleImpl.Builder.newInstance("v").setType(type).setStartLocation(Location.newInstance(0, 0)).build();
@@ -61,9 +61,9 @@ public void shouldRunOK() {
     @Test
     public void shouldNotIgnoresCapacity() {
         CustomPickupJob cj = CustomPickupJob.Builder.newInstance("job")
-            .addPickup(Location.newInstance(10, 0), Capacity.Builder.newInstance().addDimension(0, 1).build())
-            .addPickup(Location.newInstance(5, 0), Capacity.Builder.newInstance().addDimension(0, 2).build())
-            .addPickup(Location.newInstance(20, 0), Capacity.Builder.newInstance().addDimension(0, 1).build())
+            .addPickup(Location.newInstance(10, 0), SizeDimension.Builder.newInstance().addDimension(0, 1).build())
+            .addPickup(Location.newInstance(5, 0), SizeDimension.Builder.newInstance().addDimension(0, 2).build())
+            .addPickup(Location.newInstance(20, 0), SizeDimension.Builder.newInstance().addDimension(0, 1).build())
             .build();
         VehicleType type = VehicleTypeImpl.Builder.newInstance("type").addCapacityDimension(0, 2).build();
         Vehicle v = VehicleImpl.Builder.newInstance("v").setType(type).setStartLocation(Location.newInstance(0, 0)).build();
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/CalcVehicleTypeDependentServiceInsertionTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/CalcVehicleTypeDependentServiceInsertionTest.java
index 109d85458..fdd5fca7e 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/CalcVehicleTypeDependentServiceInsertionTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/CalcVehicleTypeDependentServiceInsertionTest.java
@@ -17,7 +17,7 @@
  */
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
-import com.graphhopper.jsprit.core.problem.Capacity;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Service;
@@ -59,12 +59,12 @@ public void doBefore() {
         when(fleetManager.getAvailableVehicles()).thenReturn(Arrays.asList(veh1, veh2));
 
         VehicleType type = mock(VehicleType.class);
-        when(type.getCapacityDimensions()).thenReturn(Capacity.Builder.newInstance().addDimension(0, 10).build());
+        when(type.getCapacityDimensions()).thenReturn(SizeDimension.Builder.newInstance().addDimension(0, 10).build());
         when(veh1.getType()).thenReturn(type);
 
         when(veh2.getType()).thenReturn(type);
 
-        when(service.getSize()).thenReturn(Capacity.Builder.newInstance().build());
+        when(service.getSize()).thenReturn(SizeDimension.Builder.newInstance().build());
         when(service.getTimeWindow()).thenReturn(TimeWindow.newInstance(0.0, Double.MAX_VALUE));
 
         when(vehicleRoute.getDriver()).thenReturn(null);
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/JobInsertionConsideringFixCostsCalculatorTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/JobInsertionConsideringFixCostsCalculatorTest.java
index f33679793..6ab28480f 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/JobInsertionConsideringFixCostsCalculatorTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/recreate/JobInsertionConsideringFixCostsCalculatorTest.java
@@ -18,7 +18,7 @@
 package com.graphhopper.jsprit.core.algorithm.recreate;
 
 import com.graphhopper.jsprit.core.algorithm.state.InternalStates;
-import com.graphhopper.jsprit.core.problem.Capacity;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.job.Job;
 import com.graphhopper.jsprit.core.problem.solution.route.VehicleRoute;
 import com.graphhopper.jsprit.core.problem.solution.route.state.RouteAndActivityStateGetter;
@@ -50,7 +50,7 @@
     public void doBefore() {
         JobInsertionCostsCalculator jobInsertionCosts = mock(JobInsertionCostsCalculator.class);
         job = mock(Job.class);
-        when(job.getSize()).thenReturn(Capacity.Builder.newInstance().addDimension(0, 50).build());
+        when(job.getSize()).thenReturn(SizeDimension.Builder.newInstance().addDimension(0, 50).build());
 
         oVehicle = mock(Vehicle.class);
         VehicleType oType = VehicleTypeImpl.Builder.newInstance("otype").addCapacityDimension(0, 50).setFixedCost(50.0).build();
@@ -66,7 +66,7 @@ public void doBefore() {
         when(jobInsertionCosts.getInsertionData(route, job, nVehicle, 0.0, null, Double.MAX_VALUE)).thenReturn(iData);
 
         stateGetter = mock(RouteAndActivityStateGetter.class);
-        when(stateGetter.getRouteState(route, InternalStates.MAXLOAD, Capacity.class)).thenReturn(Capacity.Builder.newInstance().build());
+        when(stateGetter.getRouteState(route, InternalStates.MAXLOAD, SizeDimension.class)).thenReturn(SizeDimension.Builder.newInstance().build());
 
         calc = new JobInsertionConsideringFixCostsCalculator(jobInsertionCosts, stateGetter);
     }
@@ -212,7 +212,7 @@ public void whenOldVehicleIsNotNullAndCurrentLoadIs25AndSolutionIs50PercentCompl
         calc.setSolutionCompletenessRatio(0.5);
         calc.setWeightOfFixCost(.5);
         when(route.getVehicle()).thenReturn(oVehicle);
-        when(stateGetter.getRouteState(route, InternalStates.MAXLOAD, Capacity.class)).thenReturn(Capacity.Builder.newInstance().addDimension(0, 25).build());
+        when(stateGetter.getRouteState(route, InternalStates.MAXLOAD, SizeDimension.class)).thenReturn(SizeDimension.Builder.newInstance().addDimension(0, 25).build());
         //(0.5*absFix + 0.5*relFix) * 0.5 * 0.= (0.5*(100-50)+0.5*(75-25))*0.5*0.5 = 12.5
         assertEquals(12.5, calc.getInsertionData(route, job, nVehicle, 0.0, null, Double.MAX_VALUE).getInsertionCost(), 0.01);
     }
@@ -231,7 +231,7 @@ public void whenOldVehicleIsNotNullAndCurrentLoadIs25AndSolutionIs50PercentCompl
         calc.setSolutionCompletenessRatio(.5);
         calc.setWeightOfFixCost(.5);
 
-        when(job.getSize()).thenReturn(Capacity.Builder.newInstance().addDimension(0, 50).addDimension(1, 0).build());
+        when(job.getSize()).thenReturn(SizeDimension.Builder.newInstance().addDimension(0, 50).addDimension(1, 0).build());
 
         VehicleType oType = VehicleTypeImpl.Builder.newInstance("otype").addCapacityDimension(0, 50).addCapacityDimension(1, 100).setFixedCost(50.0).build();
         when(oVehicle.getType()).thenReturn(oType);
@@ -240,7 +240,7 @@ public void whenOldVehicleIsNotNullAndCurrentLoadIs25AndSolutionIs50PercentCompl
         when(nVehicle.getType()).thenReturn(type);
 
         when(route.getVehicle()).thenReturn(oVehicle);
-        when(stateGetter.getRouteState(route, InternalStates.MAXLOAD, Capacity.class)).thenReturn(Capacity.Builder.newInstance().addDimension(0, 25).addDimension(1, 100).build());
+        when(stateGetter.getRouteState(route, InternalStates.MAXLOAD, SizeDimension.class)).thenReturn(SizeDimension.Builder.newInstance().addDimension(0, 25).addDimension(1, 100).build());
         //(0.5*absFix + 0.5*relFix) * 0.5 * 0.= (0.5*(100-50)+0.5*(75-25))*0.5*0.5 = 12.5
         /*
          * (0.5*(100-50)+0.5*(
@@ -256,7 +256,7 @@ public void whenOldVehicleIsNotNullAndCurrentLoadIs25AndSolutionIs50PercentCompl
     public void whenOldVehicleIsNotNullAndCurrentLoadIs25AndSolutionIs75PercentCompleteAndWeightIs05WithMultipleCapDims_itShouldReturnCorrectVal() {
         calc.setSolutionCompletenessRatio(0.75);
         calc.setWeightOfFixCost(0.5);
-        when(job.getSize()).thenReturn(Capacity.Builder.newInstance().addDimension(0, 50).addDimension(1, 0).build());
+        when(job.getSize()).thenReturn(SizeDimension.Builder.newInstance().addDimension(0, 50).addDimension(1, 0).build());
 
         VehicleType oType = VehicleTypeImpl.Builder.newInstance("otype").addCapacityDimension(0, 50).addCapacityDimension(1, 100).setFixedCost(50.0).build();
         when(oVehicle.getType()).thenReturn(oType);
@@ -265,7 +265,7 @@ public void whenOldVehicleIsNotNullAndCurrentLoadIs25AndSolutionIs75PercentCompl
         when(nVehicle.getType()).thenReturn(type);
 
         when(route.getVehicle()).thenReturn(oVehicle);
-        when(stateGetter.getRouteState(route, InternalStates.MAXLOAD, Capacity.class)).thenReturn(Capacity.Builder.newInstance().addDimension(0, 25).addDimension(1, 100).build());
+        when(stateGetter.getRouteState(route, InternalStates.MAXLOAD, SizeDimension.class)).thenReturn(SizeDimension.Builder.newInstance().addDimension(0, 25).addDimension(1, 100).build());
         //(0.75*absFix + 0.25*relFix) * 0.75 * 0.5 = (0.75*(100.-50.)+0.25*12.5)*0.75*0.5 = 15.234375
 
         assertEquals(15.234375, calc.getInsertionData(route, job, nVehicle, 0.0, null, Double.MAX_VALUE).getInsertionCost(), 0.01);
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/HardPickupAndDeliveryShipmentActivityConstraintTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/HardPickupAndDeliveryShipmentActivityConstraintTest.java
index f4b3f4f42..c1531e32d 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/HardPickupAndDeliveryShipmentActivityConstraintTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/HardPickupAndDeliveryShipmentActivityConstraintTest.java
@@ -17,7 +17,7 @@
  */
 package com.graphhopper.jsprit.core.algorithm.state;
 
-import com.graphhopper.jsprit.core.problem.Capacity;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.constraint.HardActivityConstraint.ConstraintsStatus;
@@ -89,7 +89,7 @@ public void whenPickupActivityIsInsertedAndLoadIsNotSufficient_returnNOT_FullFil
         PickupServiceDEPRECATED anotherService = (PickupServiceDEPRECATED) vrp.getActivities(s2).get(0);
         PickupShipmentDEPRECATED pickupShipment = (PickupShipmentDEPRECATED) vrp.getActivities(shipment).get(0);
 
-        stateManager.putInternalTypedActivityState(pickupService, InternalStates.LOAD, Capacity.Builder.newInstance().addDimension(0, 2).build());
+        stateManager.putInternalTypedActivityState(pickupService, InternalStates.LOAD, SizeDimension.Builder.newInstance().addDimension(0, 2).build());
 //		when(stateManager.getActivityState(pickupService, StateFactory.LOAD)).thenReturn(StateFactory.createState(2.0));
         assertEquals(ConstraintsStatus.NOT_FULFILLED, constraint.fulfilled(iFacts, pickupService, pickupShipment, anotherService, 0.0));
     }
@@ -101,7 +101,7 @@ public void whenDeliveryActivityIsInsertedAndLoadIsSufficient_returnFullFilled()
 
         DeliverShipmentDEPRECATED deliverShipment = (DeliverShipmentDEPRECATED) vrp.getActivities(shipment).get(1);
 
-        stateManager.putInternalTypedActivityState(pickupService, InternalStates.LOAD, Capacity.Builder.newInstance().addDimension(0, 1).build());
+        stateManager.putInternalTypedActivityState(pickupService, InternalStates.LOAD, SizeDimension.Builder.newInstance().addDimension(0, 1).build());
 //		stateManager.putInternalActivityState(pickupService, StateFactory.LOAD, StateFactory.createState(1));
         assertEquals(ConstraintsStatus.FULFILLED, constraint.fulfilled(iFacts, pickupService, deliverShipment, anotherService, 0.0));
     }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/LoadStateTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/LoadStateTest.java
index 17b798262..e78815ae6 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/LoadStateTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/LoadStateTest.java
@@ -18,7 +18,7 @@
 
 package com.graphhopper.jsprit.core.algorithm.state;
 
-import com.graphhopper.jsprit.core.problem.Capacity;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.CopyJobActivityFactory;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
@@ -53,7 +53,7 @@
     public void doBefore() {
         Vehicle vehicle = mock(Vehicle.class);
         VehicleType type = mock(VehicleType.class);
-        when(type.getCapacityDimensions()).thenReturn(Capacity.Builder.newInstance().addDimension(0, 20).build());
+        when(type.getCapacityDimensions()).thenReturn(SizeDimension.Builder.newInstance().addDimension(0, 20).build());
         when(vehicle.getType()).thenReturn(type);
 
         VehicleRoutingProblem.Builder serviceProblemBuilder = VehicleRoutingProblem.Builder.newInstance();
@@ -97,56 +97,56 @@ public void doBefore() {
     @Test
     public void loadAtEndShouldBe15() {
         stateManager.informInsertionStarts(Arrays.asList(serviceRoute), Collections.<Job>emptyList());
-        Capacity routeState = stateManager.getRouteState(serviceRoute, InternalStates.LOAD_AT_END, Capacity.class);
+        SizeDimension routeState = stateManager.getRouteState(serviceRoute, InternalStates.LOAD_AT_END, SizeDimension.class);
         assertEquals(15, routeState.get(0));
     }
 
     @Test
     public void loadAtBeginningShouldBe0() {
         stateManager.informInsertionStarts(Arrays.asList(serviceRoute), Collections.<Job>emptyList());
-        Capacity routeState = stateManager.getRouteState(serviceRoute, InternalStates.LOAD_AT_BEGINNING, Capacity.class);
+        SizeDimension routeState = stateManager.getRouteState(serviceRoute, InternalStates.LOAD_AT_BEGINNING, SizeDimension.class);
         assertEquals(0, routeState.get(0));
     }
 
     @Test
     public void loadAtAct1ShouldBe10() {
         stateManager.informInsertionStarts(Arrays.asList(serviceRoute), Collections.<Job>emptyList());
-        Capacity atAct1 = stateManager.getActivityState(serviceRoute.getActivities().get(0), InternalStates.LOAD, Capacity.class);
+        SizeDimension atAct1 = stateManager.getActivityState(serviceRoute.getActivities().get(0), InternalStates.LOAD, SizeDimension.class);
         assertEquals(10, atAct1.get(0));
     }
 
     @Test
     public void loadAtAct2ShouldBe15() {
         stateManager.informInsertionStarts(Arrays.asList(serviceRoute), Collections.<Job>emptyList());
-        Capacity atAct2 = stateManager.getActivityState(serviceRoute.getActivities().get(1), InternalStates.LOAD, Capacity.class);
+        SizeDimension atAct2 = stateManager.getActivityState(serviceRoute.getActivities().get(1), InternalStates.LOAD, SizeDimension.class);
         assertEquals(15, atAct2.get(0));
     }
 
     @Test
     public void futureMaxLoatAtAct1ShouldBe15() {
         stateManager.informInsertionStarts(Arrays.asList(serviceRoute), Collections.<Job>emptyList());
-        Capacity atAct1 = stateManager.getActivityState(serviceRoute.getActivities().get(0), InternalStates.FUTURE_MAXLOAD, Capacity.class);
+        SizeDimension atAct1 = stateManager.getActivityState(serviceRoute.getActivities().get(0), InternalStates.FUTURE_MAXLOAD, SizeDimension.class);
         assertEquals(15, atAct1.get(0));
     }
 
     @Test
     public void futureMaxLoatAtAct2ShouldBe15() {
         stateManager.informInsertionStarts(Arrays.asList(serviceRoute), Collections.<Job>emptyList());
-        Capacity atAct2 = stateManager.getActivityState(serviceRoute.getActivities().get(1), InternalStates.FUTURE_MAXLOAD, Capacity.class);
+        SizeDimension atAct2 = stateManager.getActivityState(serviceRoute.getActivities().get(1), InternalStates.FUTURE_MAXLOAD, SizeDimension.class);
         assertEquals(15, atAct2.get(0));
     }
 
     @Test
     public void pastMaxLoatAtAct1ShouldBe0() {
         stateManager.informInsertionStarts(Arrays.asList(serviceRoute), Collections.<Job>emptyList());
-        Capacity atAct1 = stateManager.getActivityState(serviceRoute.getActivities().get(0), InternalStates.PAST_MAXLOAD, Capacity.class);
+        SizeDimension atAct1 = stateManager.getActivityState(serviceRoute.getActivities().get(0), InternalStates.PAST_MAXLOAD, SizeDimension.class);
         assertEquals(10, atAct1.get(0));
     }
 
     @Test
     public void pastMaxLoatAtAct2ShouldBe10() {
         stateManager.informInsertionStarts(Arrays.asList(serviceRoute), Collections.<Job>emptyList());
-        Capacity atAct2 = stateManager.getActivityState(serviceRoute.getActivities().get(1), InternalStates.PAST_MAXLOAD, Capacity.class);
+        SizeDimension atAct2 = stateManager.getActivityState(serviceRoute.getActivities().get(1), InternalStates.PAST_MAXLOAD, SizeDimension.class);
         assertEquals(15, atAct2.get(0));
     }
 
@@ -157,56 +157,56 @@ public void pastMaxLoatAtAct2ShouldBe10() {
     @Test
     public void when_pdroute_loadAtEndShouldBe10() {
         stateManager.informInsertionStarts(Arrays.asList(pickup_delivery_route), Collections.<Job>emptyList());
-        Capacity routeState = stateManager.getRouteState(pickup_delivery_route, InternalStates.LOAD_AT_END, Capacity.class);
+        SizeDimension routeState = stateManager.getRouteState(pickup_delivery_route, InternalStates.LOAD_AT_END, SizeDimension.class);
         assertEquals(10, routeState.get(0));
     }
 
     @Test
     public void when_pdroute_loadAtBeginningShouldBe5() {
         stateManager.informInsertionStarts(Arrays.asList(pickup_delivery_route), Collections.<Job>emptyList());
-        Capacity routeState = stateManager.getRouteState(pickup_delivery_route, InternalStates.LOAD_AT_BEGINNING, Capacity.class);
+        SizeDimension routeState = stateManager.getRouteState(pickup_delivery_route, InternalStates.LOAD_AT_BEGINNING, SizeDimension.class);
         assertEquals(5, routeState.get(0));
     }
 
     @Test
     public void when_pdroute_loadAtAct1ShouldBe15() {
         stateManager.informInsertionStarts(Arrays.asList(pickup_delivery_route), Collections.<Job>emptyList());
-        Capacity atAct1 = stateManager.getActivityState(pickup_delivery_route.getActivities().get(0), InternalStates.LOAD, Capacity.class);
+        SizeDimension atAct1 = stateManager.getActivityState(pickup_delivery_route.getActivities().get(0), InternalStates.LOAD, SizeDimension.class);
         assertEquals(15, atAct1.get(0));
     }
 
     @Test
     public void when_pdroute_loadAtAct2ShouldBe10() {
         stateManager.informInsertionStarts(Arrays.asList(pickup_delivery_route), Collections.<Job>emptyList());
-        Capacity atAct2 = stateManager.getActivityState(pickup_delivery_route.getActivities().get(1), InternalStates.LOAD, Capacity.class);
+        SizeDimension atAct2 = stateManager.getActivityState(pickup_delivery_route.getActivities().get(1), InternalStates.LOAD, SizeDimension.class);
         assertEquals(10, atAct2.get(0));
     }
 
     @Test
     public void when_pdroute_futureMaxLoatAtAct1ShouldBe15() {
         stateManager.informInsertionStarts(Arrays.asList(pickup_delivery_route), Collections.<Job>emptyList());
-        Capacity atAct1 = stateManager.getActivityState(pickup_delivery_route.getActivities().get(0), InternalStates.FUTURE_MAXLOAD, Capacity.class);
+        SizeDimension atAct1 = stateManager.getActivityState(pickup_delivery_route.getActivities().get(0), InternalStates.FUTURE_MAXLOAD, SizeDimension.class);
         assertEquals(15, atAct1.get(0));
     }
 
     @Test
     public void when_pdroute_futureMaxLoatAtAct2ShouldBe10() {
         stateManager.informInsertionStarts(Arrays.asList(pickup_delivery_route), Collections.<Job>emptyList());
-        Capacity atAct2 = stateManager.getActivityState(pickup_delivery_route.getActivities().get(1), InternalStates.FUTURE_MAXLOAD, Capacity.class);
+        SizeDimension atAct2 = stateManager.getActivityState(pickup_delivery_route.getActivities().get(1), InternalStates.FUTURE_MAXLOAD, SizeDimension.class);
         assertEquals(10, atAct2.get(0));
     }
 
     @Test
     public void when_pdroute_pastMaxLoatAtAct1ShouldBe15() {
         stateManager.informInsertionStarts(Arrays.asList(pickup_delivery_route), Collections.<Job>emptyList());
-        Capacity atAct1 = stateManager.getActivityState(pickup_delivery_route.getActivities().get(0), InternalStates.PAST_MAXLOAD, Capacity.class);
+        SizeDimension atAct1 = stateManager.getActivityState(pickup_delivery_route.getActivities().get(0), InternalStates.PAST_MAXLOAD, SizeDimension.class);
         assertEquals(15, atAct1.get(0));
     }
 
     @Test
     public void when_pdroute_pastMaxLoatAtAct2ShouldBe10() {
         stateManager.informInsertionStarts(Arrays.asList(pickup_delivery_route), Collections.<Job>emptyList());
-        Capacity atAct2 = stateManager.getActivityState(pickup_delivery_route.getActivities().get(1), InternalStates.PAST_MAXLOAD, Capacity.class);
+        SizeDimension atAct2 = stateManager.getActivityState(pickup_delivery_route.getActivities().get(1), InternalStates.PAST_MAXLOAD, SizeDimension.class);
         assertEquals(15, atAct2.get(0));
     }
 
@@ -220,98 +220,98 @@ public void when_pdroute_pastMaxLoatAtAct2ShouldBe10() {
     @Test
     public void when_shipmentroute_loadAtEndShouldBe0() {
         stateManager.informInsertionStarts(Arrays.asList(shipment_route), Collections.<Job>emptyList());
-        Capacity routeState = stateManager.getRouteState(shipment_route, InternalStates.LOAD_AT_END, Capacity.class);
+        SizeDimension routeState = stateManager.getRouteState(shipment_route, InternalStates.LOAD_AT_END, SizeDimension.class);
         assertEquals(0, routeState.get(0));
     }
 
     @Test
     public void when_shipmentroute_loadAtBeginningShouldBe0() {
         stateManager.informInsertionStarts(Arrays.asList(shipment_route), Collections.<Job>emptyList());
-        Capacity routeState = stateManager.getRouteState(shipment_route, InternalStates.LOAD_AT_BEGINNING, Capacity.class);
+        SizeDimension routeState = stateManager.getRouteState(shipment_route, InternalStates.LOAD_AT_BEGINNING, SizeDimension.class);
         assertEquals(0, routeState.get(0));
     }
 
     @Test
     public void when_shipmentroute_loadAtAct1ShouldBe10() {
         stateManager.informInsertionStarts(Arrays.asList(shipment_route), Collections.<Job>emptyList());
-        Capacity atAct1 = stateManager.getActivityState(shipment_route.getActivities().get(0), InternalStates.LOAD, Capacity.class);
+        SizeDimension atAct1 = stateManager.getActivityState(shipment_route.getActivities().get(0), InternalStates.LOAD, SizeDimension.class);
         assertEquals(10, atAct1.get(0));
     }
 
     @Test
     public void when_shipmentroute_loadAtAct2ShouldBe15() {
         stateManager.informInsertionStarts(Arrays.asList(shipment_route), Collections.<Job>emptyList());
-        Capacity atAct2 = stateManager.getActivityState(shipment_route.getActivities().get(1), InternalStates.LOAD, Capacity.class);
+        SizeDimension atAct2 = stateManager.getActivityState(shipment_route.getActivities().get(1), InternalStates.LOAD, SizeDimension.class);
         assertEquals(15, atAct2.get(0));
     }
 
     @Test
     public void when_shipmentroute_loadAtAct3ShouldBe10() {
         stateManager.informInsertionStarts(Arrays.asList(shipment_route), Collections.<Job>emptyList());
-        Capacity atAct = stateManager.getActivityState(shipment_route.getActivities().get(2), InternalStates.LOAD, Capacity.class);
+        SizeDimension atAct = stateManager.getActivityState(shipment_route.getActivities().get(2), InternalStates.LOAD, SizeDimension.class);
         assertEquals(10, atAct.get(0));
     }
 
     @Test
     public void when_shipmentroute_loadAtAct4ShouldBe0() {
         stateManager.informInsertionStarts(Arrays.asList(shipment_route), Collections.<Job>emptyList());
-        Capacity atAct = stateManager.getActivityState(shipment_route.getActivities().get(3), InternalStates.LOAD, Capacity.class);
+        SizeDimension atAct = stateManager.getActivityState(shipment_route.getActivities().get(3), InternalStates.LOAD, SizeDimension.class);
         assertEquals(0, atAct.get(0));
     }
 
     @Test
     public void when_shipmentroute_futureMaxLoatAtAct1ShouldBe15() {
         stateManager.informInsertionStarts(Arrays.asList(shipment_route), Collections.<Job>emptyList());
-        Capacity atAct1 = stateManager.getActivityState(shipment_route.getActivities().get(0), InternalStates.FUTURE_MAXLOAD, Capacity.class);
+        SizeDimension atAct1 = stateManager.getActivityState(shipment_route.getActivities().get(0), InternalStates.FUTURE_MAXLOAD, SizeDimension.class);
         assertEquals(15, atAct1.get(0));
     }
 
     @Test
     public void when_shipmentroute_futureMaxLoatAtAct2ShouldBe15() {
         stateManager.informInsertionStarts(Arrays.asList(shipment_route), Collections.<Job>emptyList());
-        Capacity atAct2 = stateManager.getActivityState(shipment_route.getActivities().get(1), InternalStates.FUTURE_MAXLOAD, Capacity.class);
+        SizeDimension atAct2 = stateManager.getActivityState(shipment_route.getActivities().get(1), InternalStates.FUTURE_MAXLOAD, SizeDimension.class);
         assertEquals(15, atAct2.get(0));
     }
 
     @Test
     public void when_shipmentroute_futureMaxLoatAtAct3ShouldBe10() {
         stateManager.informInsertionStarts(Arrays.asList(shipment_route), Collections.<Job>emptyList());
-        Capacity atAct = stateManager.getActivityState(shipment_route.getActivities().get(2), InternalStates.FUTURE_MAXLOAD, Capacity.class);
+        SizeDimension atAct = stateManager.getActivityState(shipment_route.getActivities().get(2), InternalStates.FUTURE_MAXLOAD, SizeDimension.class);
         assertEquals(10, atAct.get(0));
     }
 
     @Test
     public void when_shipmentroute_futureMaxLoatAtAct4ShouldBe0() {
         stateManager.informInsertionStarts(Arrays.asList(shipment_route), Collections.<Job>emptyList());
-        Capacity atAct = stateManager.getActivityState(shipment_route.getActivities().get(3), InternalStates.FUTURE_MAXLOAD, Capacity.class);
+        SizeDimension atAct = stateManager.getActivityState(shipment_route.getActivities().get(3), InternalStates.FUTURE_MAXLOAD, SizeDimension.class);
         assertEquals(0, atAct.get(0));
     }
 
     @Test
     public void when_shipmentroute_pastMaxLoatAtAct1ShouldBe10() {
         stateManager.informInsertionStarts(Arrays.asList(shipment_route), Collections.<Job>emptyList());
-        Capacity atAct1 = stateManager.getActivityState(shipment_route.getActivities().get(0), InternalStates.PAST_MAXLOAD, Capacity.class);
+        SizeDimension atAct1 = stateManager.getActivityState(shipment_route.getActivities().get(0), InternalStates.PAST_MAXLOAD, SizeDimension.class);
         assertEquals(10, atAct1.get(0));
     }
 
     @Test
     public void when_shipmentroute_pastMaxLoatAtAct2ShouldBe10() {
         stateManager.informInsertionStarts(Arrays.asList(shipment_route), Collections.<Job>emptyList());
-        Capacity atAct2 = stateManager.getActivityState(shipment_route.getActivities().get(1), InternalStates.PAST_MAXLOAD, Capacity.class);
+        SizeDimension atAct2 = stateManager.getActivityState(shipment_route.getActivities().get(1), InternalStates.PAST_MAXLOAD, SizeDimension.class);
         assertEquals(15, atAct2.get(0));
     }
 
     @Test
     public void when_shipmentroute_pastMaxLoatAtAct3ShouldBe15() {
         stateManager.informInsertionStarts(Arrays.asList(shipment_route), Collections.<Job>emptyList());
-        Capacity atAct = stateManager.getActivityState(shipment_route.getActivities().get(2), InternalStates.PAST_MAXLOAD, Capacity.class);
+        SizeDimension atAct = stateManager.getActivityState(shipment_route.getActivities().get(2), InternalStates.PAST_MAXLOAD, SizeDimension.class);
         assertEquals(15, atAct.get(0));
     }
 
     @Test
     public void when_shipmentroute_pastMaxLoatAtAct4ShouldBe15() {
         stateManager.informInsertionStarts(Arrays.asList(shipment_route), Collections.<Job>emptyList());
-        Capacity atAct = stateManager.getActivityState(shipment_route.getActivities().get(3), InternalStates.PAST_MAXLOAD, Capacity.class);
+        SizeDimension atAct = stateManager.getActivityState(shipment_route.getActivities().get(3), InternalStates.PAST_MAXLOAD, SizeDimension.class);
         assertEquals(15, atAct.get(0));
     }
 }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/StateManagerTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/StateManagerTest.java
index 421786644..a7fff1589 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/StateManagerTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/algorithm/state/StateManagerTest.java
@@ -17,7 +17,7 @@
  */
 package com.graphhopper.jsprit.core.algorithm.state;
 
-import com.graphhopper.jsprit.core.problem.Capacity;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.JobActivityFactory;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
@@ -140,9 +140,9 @@ public void whenRouteStateIsSetWithGenericMethodAndCapacity_itMustBeSetCorrectly
         VehicleRoute route = getRoute(mock(Vehicle.class));
         StateManager stateManager = new StateManager(vrpMock);
         StateId id = stateManager.createStateId("myState");
-        Capacity capacity = Capacity.Builder.newInstance().addDimension(0, 500).build();
+        SizeDimension capacity = SizeDimension.Builder.newInstance().addDimension(0, 500).build();
         stateManager.putRouteState(route, id, capacity);
-        Capacity getCap = stateManager.getRouteState(route, id, Capacity.class);
+        SizeDimension getCap = stateManager.getRouteState(route, id, SizeDimension.class);
         assertEquals(500, getCap.get(0));
     }
 
@@ -175,9 +175,9 @@ public void whenActivityStateIsSetWithGenericMethodAndCapacity_itMustBeSetCorrec
         when(activity.getIndex()).thenReturn(1);
         StateManager stateManager = new StateManager(vrpMock);
         StateId id = stateManager.createStateId("myState");
-        Capacity capacity = Capacity.Builder.newInstance().addDimension(0, 500).build();
+        SizeDimension capacity = SizeDimension.Builder.newInstance().addDimension(0, 500).build();
         stateManager.putActivityState(activity, id, capacity);
-        Capacity getCap = stateManager.getActivityState(activity, id, Capacity.class);
+        SizeDimension getCap = stateManager.getActivityState(activity, id, SizeDimension.class);
         assertEquals(500, getCap.get(0));
     }
 
@@ -243,9 +243,9 @@ public void whenCreatingAVehicleDependentRouteState_itShouldBeMemorized() {
         VehicleRoute route = getRoute(vehicle);
         StateManager stateManager = new StateManager(vrpMock);
         StateId id = stateManager.createStateId("myState");
-        Capacity capacity = Capacity.Builder.newInstance().addDimension(0, 500).build();
+        SizeDimension capacity = SizeDimension.Builder.newInstance().addDimension(0, 500).build();
         stateManager.putRouteState(route, vehicle, id, capacity);
-        Capacity getCap = stateManager.getRouteState(route, vehicle, id, Capacity.class);
+        SizeDimension getCap = stateManager.getRouteState(route, vehicle, id, SizeDimension.class);
         assertEquals(500, getCap.get(0));
     }
 
@@ -256,11 +256,11 @@ public void whenCreatingAVehicleDependentActivityState_itShouldBeMemorized() {
         VehicleRoutingProblem vrp = VehicleRoutingProblem.Builder.newInstance().addVehicle(vehicle).build();
         StateManager stateManager = new StateManager(vrpMock);
         StateId id = stateManager.createStateId("myState");
-        Capacity capacity = Capacity.Builder.newInstance().addDimension(0, 500).build();
+        SizeDimension capacity = SizeDimension.Builder.newInstance().addDimension(0, 500).build();
         TourActivity act = mock(TourActivity.class);
         when(act.getIndex()).thenReturn(1);
         stateManager.putActivityState(act, vehicle, id, capacity);
-        Capacity getCap = stateManager.getActivityState(act, vehicle, id, Capacity.class);
+        SizeDimension getCap = stateManager.getActivityState(act, vehicle, id, SizeDimension.class);
         assertEquals(500, getCap.get(0));
     }
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyserTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyserTest.java
index 15db859c4..9f9f259ad 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyserTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/analysis/SolutionAnalyserTest.java
@@ -20,7 +20,7 @@
 
 
 import com.graphhopper.jsprit.core.distance.ManhattanDistanceCalculator;
-import com.graphhopper.jsprit.core.problem.Capacity;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.cost.TransportDistance;
@@ -1325,7 +1325,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
             }
         });
         VehicleRoute route = solution.getRoutes().iterator().next();
-        Capacity atBeginning = analyser.getCapacityViolationAtBeginning(route);
+        SizeDimension atBeginning = analyser.getCapacityViolationAtBeginning(route);
         for (int i = 0; i < atBeginning.getNuOfDimensions(); i++) {
             assertTrue(atBeginning.get(i) == 0);
         }
@@ -1340,7 +1340,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
             }
         });
         VehicleRoute route = solution.getRoutes().iterator().next();
-        Capacity atEnd = analyser.getCapacityViolationAtEnd(route);
+        SizeDimension atEnd = analyser.getCapacityViolationAtEnd(route);
         for (int i = 0; i < atEnd.getNuOfDimensions(); i++) {
             assertTrue(atEnd.get(i) == 0);
         }
@@ -1357,7 +1357,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
             }
         });
         VehicleRoute route = solution.getRoutes().iterator().next();
-        Capacity cap = analyser.getCapacityViolation(route);
+        SizeDimension cap = analyser.getCapacityViolation(route);
         assertEquals(50, cap.get(0));
     }
 
@@ -1372,7 +1372,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
             }
         });
         VehicleRoute route = solution.getRoutes().iterator().next();
-        Capacity atEnd = analyser.getCapacityViolationAtEnd(route);
+        SizeDimension atEnd = analyser.getCapacityViolationAtEnd(route);
         assertEquals(5, atEnd.get(0));
     }
 
@@ -1386,7 +1386,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
         });
         VehicleRoute route = solution.getRoutes().iterator().next();
         TourActivity act = route.getStart();
-        Capacity cap = analyser.getCapacityViolationAfterActivity(act, route);
+        SizeDimension cap = analyser.getCapacityViolationAfterActivity(act, route);
         for (int i = 0; i < cap.getNuOfDimensions(); i++) {
             assertTrue(cap.get(i) == 0);
         }
@@ -1404,7 +1404,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
             }
         });
         VehicleRoute route = solution.getRoutes().iterator().next();
-        Capacity cap = analyser.getCapacityViolationAtBeginning(route);
+        SizeDimension cap = analyser.getCapacityViolationAtBeginning(route);
         assertEquals(25, cap.get(0));
     }
 
@@ -1420,7 +1420,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
             }
         });
         VehicleRoute route = solution.getRoutes().iterator().next();
-        Capacity cap = analyser.getCapacityViolationAfterActivity(route.getStart(), route);
+        SizeDimension cap = analyser.getCapacityViolationAfterActivity(route.getStart(), route);
         assertEquals(25, cap.get(0));
     }
 
@@ -1435,7 +1435,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
             }
         });
         VehicleRoute route = solution.getRoutes().iterator().next();
-        Capacity cap = analyser.getCapacityViolationAfterActivity(route.getActivities().get(0), route);
+        SizeDimension cap = analyser.getCapacityViolationAfterActivity(route.getActivities().get(0), route);
         assertEquals(35, cap.get(0));
     }
 
@@ -1450,7 +1450,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
             }
         });
         VehicleRoute route = solution.getRoutes().iterator().next();
-        Capacity cap = analyser.getCapacityViolationAfterActivity(route.getActivities().get(1), route);
+        SizeDimension cap = analyser.getCapacityViolationAfterActivity(route.getActivities().get(1), route);
         assertEquals(50, cap.get(0));
     }
 
@@ -1465,7 +1465,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
             }
         });
         VehicleRoute route = solution.getRoutes().iterator().next();
-        Capacity cap = analyser.getCapacityViolationAfterActivity(route.getActivities().get(2), route);
+        SizeDimension cap = analyser.getCapacityViolationAfterActivity(route.getActivities().get(2), route);
         assertEquals(35, cap.get(0));
     }
 
@@ -1480,7 +1480,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
             }
         });
         VehicleRoute route = solution.getRoutes().iterator().next();
-        Capacity cap = analyser.getCapacityViolationAfterActivity(route.getActivities().get(3), route);
+        SizeDimension cap = analyser.getCapacityViolationAfterActivity(route.getActivities().get(3), route);
         assertEquals(15, cap.get(0));
     }
 
@@ -1495,7 +1495,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
             }
         });
         VehicleRoute route = solution.getRoutes().iterator().next();
-        Capacity cap = analyser.getCapacityViolationAfterActivity(route.getActivities().get(4), route);
+        SizeDimension cap = analyser.getCapacityViolationAfterActivity(route.getActivities().get(4), route);
         assertEquals(0, cap.get(0));
     }
 
@@ -1510,7 +1510,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
             }
         });
         VehicleRoute route = solution.getRoutes().iterator().next();
-        Capacity cap = analyser.getCapacityViolationAfterActivity(route.getActivities().get(5), route);
+        SizeDimension cap = analyser.getCapacityViolationAfterActivity(route.getActivities().get(5), route);
         assertEquals(10, cap.get(0));
     }
 
@@ -1525,7 +1525,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
             }
         });
         VehicleRoute route = solution.getRoutes().iterator().next();
-        Capacity cap = analyser.getCapacityViolationAfterActivity(route.getActivities().get(6), route);
+        SizeDimension cap = analyser.getCapacityViolationAfterActivity(route.getActivities().get(6), route);
         assertEquals(0, cap.get(0));
     }
 
@@ -1540,7 +1540,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
             }
         });
         VehicleRoute route = solution.getRoutes().iterator().next();
-        Capacity cap = analyser.getCapacityViolationAfterActivity(route.getActivities().get(7), route);
+        SizeDimension cap = analyser.getCapacityViolationAfterActivity(route.getActivities().get(7), route);
         assertEquals(5, cap.get(0));
     }
 
@@ -1555,7 +1555,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
             }
         });
         VehicleRoute route = solution.getRoutes().iterator().next();
-        Capacity cap = analyser.getCapacityViolationAfterActivity(route.getEnd(), route);
+        SizeDimension cap = analyser.getCapacityViolationAfterActivity(route.getEnd(), route);
         assertEquals(5, cap.get(0));
     }
 
@@ -1569,7 +1569,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
         });
         VehicleRoute route = solution.getRoutes().iterator().next();
         TourActivity act = route.getActivities().get(0);
-        Capacity cap = analyser.getCapacityViolationAfterActivity(act, route);
+        SizeDimension cap = analyser.getCapacityViolationAfterActivity(act, route);
         for (int i = 0; i < cap.getNuOfDimensions(); i++) {
             assertTrue(cap.get(i) == 0);
         }
@@ -1585,7 +1585,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
         });
         VehicleRoute route = solution.getRoutes().iterator().next();
         TourActivity act = route.getActivities().get(1);
-        Capacity cap = analyser.getCapacityViolationAfterActivity(act, route);
+        SizeDimension cap = analyser.getCapacityViolationAfterActivity(act, route);
         for (int i = 0; i < cap.getNuOfDimensions(); i++) {
             assertTrue(cap.get(i) == 0);
         }
@@ -1601,7 +1601,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
         });
         VehicleRoute route = solution.getRoutes().iterator().next();
         TourActivity act = route.getActivities().get(2);
-        Capacity cap = analyser.getCapacityViolationAfterActivity(act, route);
+        SizeDimension cap = analyser.getCapacityViolationAfterActivity(act, route);
         for (int i = 0; i < cap.getNuOfDimensions(); i++) {
             assertTrue(cap.get(i) == 0);
         }
@@ -1617,7 +1617,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
         });
         VehicleRoute route = solution.getRoutes().iterator().next();
         TourActivity act = route.getActivities().get(3);
-        Capacity cap = analyser.getCapacityViolationAfterActivity(act, route);
+        SizeDimension cap = analyser.getCapacityViolationAfterActivity(act, route);
         for (int i = 0; i < cap.getNuOfDimensions(); i++) {
             assertTrue(cap.get(i) == 0);
         }
@@ -1633,7 +1633,7 @@ public double getDistance(Location from, Location to, double departureTime, Vehi
         });
         VehicleRoute route = solution.getRoutes().iterator().next();
         TourActivity act = route.getEnd();
-        Capacity cap = analyser.getCapacityViolationAfterActivity(act, route);
+        SizeDimension cap = analyser.getCapacityViolationAfterActivity(act, route);
         for (int i = 0; i < cap.getNuOfDimensions(); i++) {
             assertTrue(cap.get(i) == 0);
         }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/CapacityTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/CapacityTest.java
deleted file mode 100644
index a3208db2d..000000000
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/CapacityTest.java
+++ /dev/null
@@ -1,404 +0,0 @@
-/*
- * Licensed to GraphHopper GmbH under one or more contributor
- * license agreements. See the NOTICE file distributed with this work for
- * additional information regarding copyright ownership.
- *
- * GraphHopper GmbH licenses this file to you under the Apache License,
- * Version 2.0 (the "License"); you may not use this file except in
- * compliance with the License. You may obtain a copy of the License at
- *
- *       http://www.apache.org/licenses/LICENSE-2.0
- *
- * Unless required by applicable law or agreed to in writing, software
- * distributed under the License is distributed on an "AS IS" BASIS,
- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
- * See the License for the specific language governing permissions and
- * limitations under the License.
- */
-package com.graphhopper.jsprit.core.problem;
-
-import org.junit.Assert;
-import org.junit.Test;
-
-import java.util.Random;
-
-import static org.junit.Assert.*;
-
-public class CapacityTest {
-
-    @Test
-    public void getNegativeShouldReturnCorrectCapacity() {
-        Capacity cap = Capacity.Builder.newInstance().addDimension(0, 2).addDimension(1, -3).build();
-        Capacity neg = cap.getNegativeDimensions();
-        Assert.assertEquals(2, neg.getNuOfDimensions());
-        Assert.assertEquals(0, neg.get(0));
-        Assert.assertEquals(-3, neg.get(1));
-    }
-
-    @Test
-    public void getPositiveShouldReturnCorrectCapacity() {
-        Capacity cap = Capacity.Builder.newInstance().addDimension(0, 2).addDimension(1, -3).build();
-        Capacity pos = cap.getPositiveDimensions();
-        Assert.assertEquals(2, pos.getNuOfDimensions());
-        Assert.assertEquals(2, pos.get(0));
-        Assert.assertEquals(0, pos.get(1));
-    }
-
-    @Test
-    public void whenSettingSimplyOneCapDimension_nuOfDimensionMustBeCorrect() {
-        Capacity.Builder capBuilder = Capacity.Builder.newInstance();
-        capBuilder.addDimension(0, 4);
-        Capacity cap = capBuilder.build();
-        assertEquals(1, cap.getNuOfDimensions());
-    }
-
-    @Test
-    public void whenSettingTwoCapDimension_nuOfDimensionMustBeCorrect() {
-        Capacity.Builder capBuilder = Capacity.Builder.newInstance();
-        capBuilder.addDimension(0, 4);
-        capBuilder.addDimension(1, 10);
-        Capacity cap = capBuilder.build();
-        assertEquals(2, cap.getNuOfDimensions());
-    }
-
-    @Test
-    public void whenSettingRandomNuOfCapDimension_nuOfDimensionMustBeCorrect() {
-        Random rand = new Random();
-        int nuOfCapDimensions = 1 + rand.nextInt(100);
-        Capacity.Builder capBuilder = Capacity.Builder.newInstance();
-        capBuilder.addDimension(nuOfCapDimensions - 1, 4);
-        Capacity cap = capBuilder.build();
-        assertEquals(nuOfCapDimensions, cap.getNuOfDimensions());
-    }
-
-    @Test
-    public void whenSettingOneDimValue_valueMustBeCorrect() {
-        Capacity.Builder capBuilder = Capacity.Builder.newInstance();
-        capBuilder.addDimension(0, 4);
-        Capacity cap = capBuilder.build();
-        assertEquals(4, cap.get(0));
-    }
-
-    @Test
-    public void whenGettingIndexWhichIsHigherThanNuOfCapDimensions_itShouldReturn0() {
-        Capacity.Builder capBuilder = Capacity.Builder.newInstance();
-        capBuilder.addDimension(0, 4);
-        Capacity cap = capBuilder.build();
-        assertEquals(0, cap.get(2));
-    }
-
-    @Test
-    public void whenSettingNoDim_DefaultIsOneDimWithDimValueOfZero() {
-        Capacity.Builder capBuilder = Capacity.Builder.newInstance();
-        Capacity cap = capBuilder.build();
-        assertEquals(1, cap.getNuOfDimensions());
-        assertEquals(0, cap.get(0));
-    }
-
-    @Test
-    public void whenCopyingCapacityWithTwoCapDim_copiedObjShouldHvSameNuOfDims() {
-        Capacity.Builder capBuilder = Capacity.Builder.newInstance();
-        capBuilder.addDimension(0, 4);
-        capBuilder.addDimension(1, 10);
-        Capacity cap = capBuilder.build();
-
-        Capacity copiedCapacity = Capacity.copyOf(cap);
-        assertEquals(2, copiedCapacity.getNuOfDimensions());
-    }
-
-    @Test
-    public void whenCopyingCapacityWithTwoCapDim_copiedObjShouldHvSameValues() {
-        Capacity.Builder capBuilder = Capacity.Builder.newInstance();
-        capBuilder.addDimension(0, 4);
-        capBuilder.addDimension(1, 10);
-        Capacity cap = capBuilder.build();
-
-        Capacity copiedCapacity = Capacity.copyOf(cap);
-        assertEquals(4, copiedCapacity.get(0));
-        assertEquals(10, copiedCapacity.get(1));
-    }
-
-    @Test
-    public void whenCopyingNull_itShouldReturnNull() {
-        Capacity nullCap = Capacity.copyOf(null);
-        assertTrue(nullCap == null);
-    }
-
-    @Test
-    public void whenAddingUpTwoOneDimensionalCapacities_itShouldReturnCorrectCapacityValues() {
-        Capacity cap1 = Capacity.Builder.newInstance().addDimension(0, 1).build();
-        Capacity cap2 = Capacity.Builder.newInstance().addDimension(0, 2).build();
-        Capacity result = cap1.add(cap2);
-        assertEquals(3, result.get(0));
-    }
-
-    @Test
-    public void whenAddingUpTwoOneDimensionalCapacities_itShouldReturnCorrectNuOfDimensions() {
-        Capacity cap1 = Capacity.Builder.newInstance().addDimension(0, 1).build();
-        Capacity cap2 = Capacity.Builder.newInstance().addDimension(0, 2).build();
-        Capacity result = cap1.add(cap2);
-        assertEquals(1, result.getNuOfDimensions());
-    }
-
-    @Test
-    public void whenAddingUpTwoThreeDimensionalCapacities_itShouldReturnCorrectNuOfDimensions() {
-        Capacity cap1 = Capacity.Builder.newInstance().addDimension(0, 1).addDimension(1, 2).addDimension(2, 3).build();
-        Capacity cap2 = Capacity.Builder.newInstance().addDimension(0, 2).addDimension(1, 3).addDimension(2, 4).build();
-        Capacity result = cap1.add(cap2);
-        assertEquals(3, result.getNuOfDimensions());
-    }
-
-    @Test
-    public void whenAddingUpTwoThreeDimensionalCapacities_itShouldReturnCorrectCapValues() {
-        Capacity cap1 = Capacity.Builder.newInstance().addDimension(0, 1).addDimension(1, 2).addDimension(2, 3).build();
-        Capacity cap2 = Capacity.Builder.newInstance().addDimension(0, 2).addDimension(1, 3).addDimension(2, 4).build();
-        Capacity result = cap1.add(cap2);
-        assertEquals(3, result.get(0));
-        assertEquals(5, result.get(1));
-        assertEquals(7, result.get(2));
-    }
-
-    public void whenAddingUpTwoCapacitiesWithDifferentNuOfDimensions_itShouldAddThemCorrectly() {
-        Capacity cap1 = Capacity.Builder.newInstance().addDimension(0, 1).addDimension(1, 2).build();
-        Capacity cap2 = Capacity.Builder.newInstance().addDimension(0, 2).build();
-        Capacity result = cap1.add(cap2);
-        assertEquals(3, result.get(0));
-        assertEquals(2, result.get(1));
-    }
-
-    @Test(expected = NullPointerException.class)
-    public void whenOneOfArgsIsNullWhenAdding_itShouldThrowException() {
-        Capacity cap1 = Capacity.Builder.newInstance().addDimension(0, 1).addDimension(1, 2).build();
-        @SuppressWarnings("unused")
-        Capacity result = cap1.add(null);
-    }
-
-
-    @Test
-    public void whenSubtractingTwoOneDimensionalCapacities_itShouldReturnCorrectCapacityValues() {
-        Capacity cap1 = Capacity.Builder.newInstance().addDimension(0, 1).build();
-        Capacity cap2 = Capacity.Builder.newInstance().addDimension(0, 2).build();
-        Capacity result = cap2.subtract(cap1);
-        assertEquals(1, result.get(0));
-    }
-
-    @Test
-    public void whenSubtractingTwoOneDimensionalCapacities_itShouldReturnCorrectNuOfDimensions() {
-        Capacity cap1 = Capacity.Builder.newInstance().addDimension(0, 1).build();
-        Capacity cap2 = Capacity.Builder.newInstance().addDimension(0, 2).build();
-        Capacity result = cap2.subtract(cap1);
-        assertEquals(1, result.getNuOfDimensions());
-    }
-
-    @Test
-    public void whenSubtractingTwoThreeDimensionalCapacities_itShouldReturnCorrectNuOfDimensions() {
-        Capacity cap1 = Capacity.Builder.newInstance().addDimension(0, 1).addDimension(1, 2).addDimension(2, 3).build();
-        Capacity cap2 = Capacity.Builder.newInstance().addDimension(0, 2).addDimension(1, 3).addDimension(2, 4).build();
-        Capacity result = cap2.subtract(cap1);
-        assertEquals(3, result.getNuOfDimensions());
-    }
-
-    @Test
-    public void whenSubtractingTwoThreeDimensionalCapacities_itShouldReturnCorrectCapValues() {
-        Capacity cap1 = Capacity.Builder.newInstance().addDimension(0, 1).addDimension(1, 2).addDimension(2, 3).build();
-        Capacity cap2 = Capacity.Builder.newInstance().addDimension(0, 2).addDimension(1, 3).addDimension(2, 4).build();
-        Capacity result = cap2.subtract(cap1);
-        assertEquals(1, result.get(0));
-        assertEquals(1, result.get(1));
-        assertEquals(1, result.get(2));
-    }
-
-    @Test
-    public void whenSubtractingTwoCapacitiesWithDifferentNuOfDimensions_itShouldSubtractCorrectly() {
-        Capacity cap1 = Capacity.Builder.newInstance().addDimension(0, 1).addDimension(1, 2).build();
-        Capacity cap2 = Capacity.Builder.newInstance().addDimension(0, 2).build();
-        Capacity result = cap2.subtract(cap1);
-        assertEquals(1, result.get(0));
-        assertEquals(-2, result.get(1));
-    }
-
-    @Test(expected = NullPointerException.class)
-    public void whenOneOfArgsIsNullWhenSubtracting_itShouldThrowException() {
-        Capacity cap1 = Capacity.Builder.newInstance().addDimension(0, 1).addDimension(1, 2).build();
-        @SuppressWarnings("unused")
-        Capacity result = cap1.subtract(null);
-    }
-
-    @Test
-    public void whenSubtractingBiggerFromLower_itShouldSubtractCorrectly() {
-        Capacity cap1 = Capacity.Builder.newInstance().addDimension(0, 1).addDimension(1, 2).addDimension(2, 3).build();
-        Capacity cap2 = Capacity.Builder.newInstance().addDimension(0, 2).addDimension(1, 3).addDimension(2, 4).build();
-        Capacity result = cap1.subtract(cap2);
-        assertEquals(-1, result.get(0));
-        assertEquals(-1, result.get(1));
-        assertEquals(-1, result.get(2));
-    }
-
-    @Test
-    public void whenOneCapIsLessThanAnother_itShouldReturnCorrectBoolean() {
-        Capacity cap1 = Capacity.Builder.newInstance().addDimension(0, 1).addDimension(1, 2).addDimension(2, 3).build();
-        Capacity cap2 = Capacity.Builder.newInstance().addDimension(0, 2).addDimension(1, 3).addDimension(2, 4).build();
-        assertTrue(cap1.isLessOrEqual(cap2));
-    }
-
-    @Test
-    public void whenOneCapIsLessThanAnother_itShouldReturnCorrectBoolean_v2() {
-        Capacity cap1 = Capacity.Builder.newInstance().addDimension(0, 2).addDimension(1, 2).addDimension(2, 4).build();
-        Capacity cap2 = Capacity.Builder.newInstance().addDimension(0, 2).addDimension(1, 3).addDimension(2, 4).build();
-        assertTrue(cap1.isLessOrEqual(cap2));
-    }
-
-    @Test
-    public void whenOneCapIsLessThanAnother_itShouldReturnCorrectBoolean_v3() {
-        Capacity cap1 = Capacity.Builder.newInstance().addDimension(0, 2).addDimension(1, 3).addDimension(2, 4).build();
-        Capacity cap2 = Capacity.Builder.newInstance().addDimension(0, 2).addDimension(1, 3).addDimension(2, 4).build();
-        assertTrue(cap1.isLessOrEqual(cap2));
-    }
-
-    @Test
-    public void whenOneCapIsBiggerThanAnother_itShouldReturnCorrectBoolean() {
-        Capacity cap1 = Capacity.Builder.newInstance().addDimension(0, 2).addDimension(1, 3).addDimension(2, 4).build();
-        Capacity cap2 = Capacity.Builder.newInstance().addDimension(0, 2).addDimension(1, 4).addDimension(2, 4).build();
-        assertFalse(cap2.isLessOrEqual(cap1));
-    }
-
-    @Test
-    public void whenOneCapIsBiggerThanAnother_greaterOrEqualShouldReturnTrue() {
-        Capacity cap1 = Capacity.Builder.newInstance().addDimension(0, 2).addDimension(1, 3).addDimension(2, 4).build();
-        Capacity cap2 = Capacity.Builder.newInstance().addDimension(0, 2).addDimension(1, 4).addDimension(2, 4).build();
-        assertTrue(cap2.isGreaterOrEqual(cap1));
-    }
-
-    @Test
-    public void whenOneCapIsBiggerThanAnother_greaterOrEqualShouldReturnTrue_v2() {
-        Capacity cap1 = Capacity.Builder.newInstance().addDimension(0, 2).addDimension(1, 3).addDimension(2, 4).build();
-        //which is zero-cap
-        Capacity cap2 = Capacity.Builder.newInstance().build();
-        assertTrue(cap1.isGreaterOrEqual(cap2));
-    }
-
-    @Test
-    public void whenOneCapIsEqualToAnother_greaterOrEqualShouldReturnTrue() {
-        Capacity cap1 = Capacity.Builder.newInstance().addDimension(0, 2).addDimension(1, 3).addDimension(2, 4).build();
-        Capacity cap2 = Capacity.Builder.newInstance().addDimension(0, 2).addDimension(1, 3).addDimension(2, 4).build();
-        assertTrue(cap2.isGreaterOrEqual(cap1));
-    }
-
-    @Test
-    public void whenAddingTwo_itShouldReturnCorrectCap() {
-        int wheelChairSpace = 0;
-        int passengerSeats = 1;
-        Capacity cap1 = Capacity.Builder.newInstance().addDimension(wheelChairSpace, 2).addDimension(passengerSeats, 10).build();
-        Capacity wheelChair = Capacity.Builder.newInstance().addDimension(wheelChairSpace, 1).build();
-        Capacity passenger = Capacity.Builder.newInstance().addDimension(passengerSeats, 1).build();
-        Capacity wheelChair_plus_passenger = wheelChair.add(passenger);
-        assertEquals(1, wheelChair_plus_passenger.get(wheelChairSpace));
-        assertEquals(1, wheelChair_plus_passenger.get(passengerSeats));
-        assertTrue(wheelChair_plus_passenger.isLessOrEqual(cap1));
-    }
-
-    @Test
-    public void whenAddingTwo_itShouldReturnCorrectCap_v2() {
-        int wheelChairSpace = 0;
-        int passengerSeats = 1;
-        int weight = 2;
-        Capacity cap1 = Capacity.Builder.newInstance().addDimension(wheelChairSpace, 2).addDimension(passengerSeats, 10).addDimension(2, 100).build();
-        Capacity wheelChair = Capacity.Builder.newInstance().addDimension(wheelChairSpace, 1).addDimension(weight, 80).build();
-        Capacity passenger = Capacity.Builder.newInstance().addDimension(passengerSeats, 1).addDimension(weight, 30).build();
-        Capacity wheelChair_plus_passenger = wheelChair.add(passenger);
-        assertEquals(1, wheelChair_plus_passenger.get(wheelChairSpace));
-        assertEquals(1, wheelChair_plus_passenger.get(passengerSeats));
-        assertEquals(110, wheelChair_plus_passenger.get(weight));
-        assertFalse(wheelChair_plus_passenger.isLessOrEqual(cap1));
-    }
-
-    @Test
-    public void whenInvertingCap_itShouldBeDoneCorrectly() {
-        Capacity cap = Capacity.Builder.newInstance().addDimension(0, 2).addDimension(1, 3).addDimension(2, 4).build();
-        Capacity inverted = cap.invert();
-        assertEquals(-2, inverted.get(0));
-        assertEquals(-3, inverted.get(1));
-        assertEquals(-4, inverted.get(2));
-    }
-
-    @Test
-    public void whenDeterminingTheMaximumOfTwoCapacities_itShouldReturnCapWithMaxOfEachDimension() {
-        Capacity cap1 = Capacity.Builder.newInstance().addDimension(0, 3).addDimension(1, 3).build();
-        Capacity cap2 = Capacity.Builder.newInstance().addDimension(0, 2).addDimension(1, 4).build();
-        assertEquals(3, Capacity.max(cap1, cap2).get(0));
-        assertEquals(4, Capacity.max(cap1, cap2).get(1));
-    }
-
-    @Test
-    public void whenDeterminingTheMaximumOfTwoCapacities_itShouldReturnCapWithMaxOfEachDimension_v2() {
-        Capacity cap1 = Capacity.Builder.newInstance().addDimension(0, 1).addDimension(1, 3).build();
-        Capacity cap2 = Capacity.Builder.newInstance().addDimension(0, 2).addDimension(1, 4).build();
-        assertEquals(2, Capacity.max(cap1, cap2).get(0));
-        assertEquals(4, Capacity.max(cap1, cap2).get(1));
-    }
-
-    @Test
-    public void whenDeterminingTheMaximumOfTwoCapacities_itShouldReturnCapWithMaxOfEachDimension_v3() {
-        Capacity cap1 = Capacity.Builder.newInstance().addDimension(0, 1).addDimension(1, 3).addDimension(2, 3).build();
-        Capacity cap2 = Capacity.Builder.newInstance().addDimension(0, 2).addDimension(1, 4).build();
-        assertEquals(2, Capacity.max(cap1, cap2).get(0));
-        assertEquals(4, Capacity.max(cap1, cap2).get(1));
-        assertEquals(3, Capacity.max(cap1, cap2).get(2));
-    }
-
-    @Test
-    public void whenDividingTwoCapacities_itShouldReturn05() {
-        Capacity cap1 = Capacity.Builder.newInstance().addDimension(0, 1).addDimension(1, 2).build();
-        Capacity cap2 = Capacity.Builder.newInstance().addDimension(0, 2).addDimension(1, 4).build();
-        assertEquals(0.5, Capacity.divide(cap1, cap2), 0.001);
-    }
-
-    @Test
-    public void whenDividingTwoEqualCapacities_itShouldReturn10() {
-        Capacity cap1 = Capacity.Builder.newInstance().addDimension(0, 2).addDimension(1, 4).build();
-        Capacity cap2 = Capacity.Builder.newInstance().addDimension(0, 2).addDimension(1, 4).build();
-        assertEquals(1.0, Capacity.divide(cap1, cap2), 0.001);
-    }
-
-    @Test
-    public void whenDividingTwoCapacities_itShouldReturn00() {
-        Capacity cap1 = Capacity.Builder.newInstance().addDimension(0, 0).addDimension(1, 0).build();
-        Capacity cap2 = Capacity.Builder.newInstance().addDimension(0, 2).addDimension(1, 4).build();
-        assertEquals(0.0, Capacity.divide(cap1, cap2), 0.001);
-    }
-
-    @Test(expected = IllegalArgumentException.class)
-    public void whenDividingByAZeroDim_itShouldThrowException() {
-        Capacity cap1 = Capacity.Builder.newInstance().addDimension(0, 1).addDimension(1, 2).build();
-        Capacity cap2 = Capacity.Builder.newInstance().addDimension(0, 2).addDimension(1, 0).build();
-        Capacity.divide(cap1, cap2);
-    }
-
-    @Test
-    public void whenBothDimOfNominatorAndDenominatorAreZero_divisionShouldIgnoreThisDim() {
-        Capacity cap1 = Capacity.Builder.newInstance().addDimension(0, 1).addDimension(1, 2).addDimension(3, 0).build();
-        Capacity cap2 = Capacity.Builder.newInstance().addDimension(0, 2).addDimension(1, 4).addDimension(3, 0).build();
-        assertEquals(0.5, Capacity.divide(cap1, cap2), 0.001);
-    }
-
-    @Test
-    public void whenDividingZeroCaps_itShouldReturnZero() {
-        Capacity cap1 = Capacity.Builder.newInstance().build();
-        Capacity cap2 = Capacity.Builder.newInstance().build();
-        assertEquals(0.0, Capacity.divide(cap1, cap2), 0.001);
-    }
-
-    @Test
-    public void shouldBeEqual() {
-        Capacity cap1 = Capacity.Builder.newInstance().build();
-        Capacity cap2 = Capacity.Builder.newInstance().build();
-        Assert.assertTrue(cap1.equals(cap2));
-    }
-
-    @Test
-    public void shouldBeEqual2() {
-        Capacity cap1 = Capacity.Builder.newInstance().addDimension(0, 10).addDimension(1, 100).addDimension(2, 1000).build();
-        Capacity cap2 = Capacity.Builder.newInstance().addDimension(0, 10).addDimension(2, 1000).addDimension(1, 100).build();
-        Assert.assertTrue(cap1.equals(cap2));
-    }
-}
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/SizeDimensionTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/SizeDimensionTest.java
new file mode 100644
index 000000000..13f22c0c8
--- /dev/null
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/SizeDimensionTest.java
@@ -0,0 +1,413 @@
+/*
+ * Licensed to GraphHopper GmbH under one or more contributor
+ * license agreements. See the NOTICE file distributed with this work for
+ * additional information regarding copyright ownership.
+ *
+ * GraphHopper GmbH licenses this file to you under the Apache License,
+ * Version 2.0 (the "License"); you may not use this file except in
+ * compliance with the License. You may obtain a copy of the License at
+ *
+ *       http://www.apache.org/licenses/LICENSE-2.0
+ *
+ * Unless required by applicable law or agreed to in writing, software
+ * distributed under the License is distributed on an "AS IS" BASIS,
+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
+ * See the License for the specific language governing permissions and
+ * limitations under the License.
+ */
+package com.graphhopper.jsprit.core.problem;
+
+import static org.junit.Assert.assertEquals;
+import static org.junit.Assert.assertFalse;
+import static org.junit.Assert.assertTrue;
+
+import java.util.Random;
+
+import org.junit.Assert;
+import org.junit.Test;
+
+public class SizeDimensionTest {
+
+    @Test
+    public void getNegativeShouldReturnCorrectCapacity() {
+        SizeDimension cap = SizeDimension.Builder.newInstance().addDimension(0, 2).addDimension(1, -3).build();
+        SizeDimension neg = cap.getNegativeDimensions();
+        Assert.assertEquals(2, neg.getNuOfDimensions());
+        Assert.assertEquals(0, neg.get(0));
+        Assert.assertEquals(-3, neg.get(1));
+    }
+
+    @Test
+    public void getPositiveShouldReturnCorrectCapacity() {
+        SizeDimension cap = SizeDimension.Builder.newInstance().addDimension(0, 2).addDimension(1, -3).build();
+        SizeDimension pos = cap.getPositiveDimensions();
+        Assert.assertEquals(2, pos.getNuOfDimensions());
+        Assert.assertEquals(2, pos.get(0));
+        Assert.assertEquals(0, pos.get(1));
+    }
+
+    @Test
+    public void whenSettingSimplyOneCapDimension_nuOfDimensionMustBeCorrect() {
+        SizeDimension.Builder capBuilder = SizeDimension.Builder.newInstance();
+        capBuilder.addDimension(0, 4);
+        SizeDimension cap = capBuilder.build();
+        assertEquals(1, cap.getNuOfDimensions());
+    }
+
+    @Test
+    public void whenSettingTwoCapDimension_nuOfDimensionMustBeCorrect() {
+        SizeDimension.Builder capBuilder = SizeDimension.Builder.newInstance();
+        capBuilder.addDimension(0, 4);
+        capBuilder.addDimension(1, 10);
+        SizeDimension cap = capBuilder.build();
+        assertEquals(2, cap.getNuOfDimensions());
+    }
+
+    @Test
+    public void whenSettingRandomNuOfCapDimension_nuOfDimensionMustBeCorrect() {
+        Random rand = new Random();
+        int nuOfCapDimensions = 1 + rand.nextInt(100);
+        SizeDimension.Builder capBuilder = SizeDimension.Builder.newInstance();
+        capBuilder.addDimension(nuOfCapDimensions - 1, 4);
+        SizeDimension cap = capBuilder.build();
+        assertEquals(nuOfCapDimensions, cap.getNuOfDimensions());
+    }
+
+    @Test
+    public void whenSettingOneDimValue_valueMustBeCorrect() {
+        SizeDimension.Builder capBuilder = SizeDimension.Builder.newInstance();
+        capBuilder.addDimension(0, 4);
+        SizeDimension cap = capBuilder.build();
+        assertEquals(4, cap.get(0));
+    }
+
+    @Test
+    public void whenGettingIndexWhichIsHigherThanNuOfCapDimensions_itShouldReturn0() {
+        SizeDimension.Builder capBuilder = SizeDimension.Builder.newInstance();
+        capBuilder.addDimension(0, 4);
+        SizeDimension cap = capBuilder.build();
+        assertEquals(0, cap.get(2));
+    }
+
+    @Test
+    public void whenSettingNoDim_DefaultIsOneDimWithDimValueOfZero() {
+        SizeDimension.Builder capBuilder = SizeDimension.Builder.newInstance();
+        SizeDimension cap = capBuilder.build();
+        assertEquals(1, cap.getNuOfDimensions());
+        assertEquals(0, cap.get(0));
+    }
+
+    @Test
+    public void whenCopyingCapacityWithTwoCapDim_copiedObjShouldHvSameNuOfDims() {
+        SizeDimension.Builder capBuilder = SizeDimension.Builder.newInstance();
+        capBuilder.addDimension(0, 4);
+        capBuilder.addDimension(1, 10);
+        SizeDimension cap = capBuilder.build();
+
+        SizeDimension copiedCapacity = SizeDimension.copyOf(cap);
+        assertEquals(2, copiedCapacity.getNuOfDimensions());
+    }
+
+    @Test
+    public void whenCopyingCapacityWithTwoCapDim_copiedObjShouldHvSameValues() {
+        SizeDimension.Builder capBuilder = SizeDimension.Builder.newInstance();
+        capBuilder.addDimension(0, 4);
+        capBuilder.addDimension(1, 10);
+        SizeDimension cap = capBuilder.build();
+
+        SizeDimension copiedCapacity = SizeDimension.copyOf(cap);
+        assertEquals(4, copiedCapacity.get(0));
+        assertEquals(10, copiedCapacity.get(1));
+    }
+
+    @Test
+    public void whenCopyingNull_itShouldReturnNull() {
+        SizeDimension nullCap = SizeDimension.copyOf(null);
+        assertTrue(nullCap == null);
+    }
+
+    @Test
+    public void whenAddingUpTwoOneDimensionalCapacities_itShouldReturnCorrectCapacityValues() {
+        SizeDimension cap1 = SizeDimension.Builder.newInstance().addDimension(0, 1).build();
+        SizeDimension cap2 = SizeDimension.Builder.newInstance().addDimension(0, 2).build();
+        SizeDimension result = cap1.add(cap2);
+        assertEquals(3, result.get(0));
+    }
+
+    @Test
+    public void whenAddingUpTwoOneDimensionalCapacities_itShouldReturnCorrectNuOfDimensions() {
+        SizeDimension cap1 = SizeDimension.Builder.newInstance().addDimension(0, 1).build();
+        SizeDimension cap2 = SizeDimension.Builder.newInstance().addDimension(0, 2).build();
+        SizeDimension result = cap1.add(cap2);
+        assertEquals(1, result.getNuOfDimensions());
+    }
+
+    @Test
+    public void whenAddingUpTwoThreeDimensionalCapacities_itShouldReturnCorrectNuOfDimensions() {
+        SizeDimension cap1 = SizeDimension.Builder.newInstance().addDimension(0, 1).addDimension(1, 2).addDimension(2, 3).build();
+        SizeDimension cap2 = SizeDimension.Builder.newInstance().addDimension(0, 2).addDimension(1, 3).addDimension(2, 4).build();
+        SizeDimension result = cap1.add(cap2);
+        assertEquals(3, result.getNuOfDimensions());
+    }
+
+    @Test
+    public void whenAddingUpTwoThreeDimensionalCapacities_itShouldReturnCorrectCapValues() {
+        SizeDimension cap1 = SizeDimension.Builder.newInstance().addDimension(0, 1).addDimension(1, 2).addDimension(2, 3).build();
+        SizeDimension cap2 = SizeDimension.Builder.newInstance().addDimension(0, 2).addDimension(1, 3).addDimension(2, 4).build();
+        SizeDimension result = cap1.add(cap2);
+        assertEquals(3, result.get(0));
+        assertEquals(5, result.get(1));
+        assertEquals(7, result.get(2));
+    }
+
+    public void whenAddingUpTwoCapacitiesWithDifferentNuOfDimensions_itShouldAddThemCorrectly() {
+        SizeDimension cap1 = SizeDimension.Builder.newInstance().addDimension(0, 1).addDimension(1, 2).build();
+        SizeDimension cap2 = SizeDimension.Builder.newInstance().addDimension(0, 2).build();
+        SizeDimension result = cap1.add(cap2);
+        assertEquals(3, result.get(0));
+        assertEquals(2, result.get(1));
+    }
+
+    @Test(expected = NullPointerException.class)
+    public void whenOneOfArgsIsNullWhenAdding_itShouldThrowException() {
+        SizeDimension cap1 = SizeDimension.Builder.newInstance().addDimension(0, 1).addDimension(1, 2).build();
+        @SuppressWarnings("unused")
+        SizeDimension result = cap1.add(null);
+    }
+
+
+    @Test
+    public void whenSubtractingTwoOneDimensionalCapacities_itShouldReturnCorrectCapacityValues() {
+        SizeDimension cap1 = SizeDimension.Builder.newInstance().addDimension(0, 1).build();
+        SizeDimension cap2 = SizeDimension.Builder.newInstance().addDimension(0, 2).build();
+        SizeDimension result = cap2.subtract(cap1);
+        assertEquals(1, result.get(0));
+    }
+
+    @Test
+    public void whenSubtractingTwoOneDimensionalCapacities_itShouldReturnCorrectNuOfDimensions() {
+        SizeDimension cap1 = SizeDimension.Builder.newInstance().addDimension(0, 1).build();
+        SizeDimension cap2 = SizeDimension.Builder.newInstance().addDimension(0, 2).build();
+        SizeDimension result = cap2.subtract(cap1);
+        assertEquals(1, result.getNuOfDimensions());
+    }
+
+    @Test
+    public void whenSubtractingTwoThreeDimensionalCapacities_itShouldReturnCorrectNuOfDimensions() {
+        SizeDimension cap1 = SizeDimension.Builder.newInstance().addDimension(0, 1).addDimension(1, 2).addDimension(2, 3).build();
+        SizeDimension cap2 = SizeDimension.Builder.newInstance().addDimension(0, 2).addDimension(1, 3).addDimension(2, 4).build();
+        SizeDimension result = cap2.subtract(cap1);
+        assertEquals(3, result.getNuOfDimensions());
+    }
+
+    @Test
+    public void whenSubtractingTwoThreeDimensionalCapacities_itShouldReturnCorrectCapValues() {
+        SizeDimension cap1 = SizeDimension.Builder.newInstance().addDimension(0, 1).addDimension(1, 2).addDimension(2, 3).build();
+        SizeDimension cap2 = SizeDimension.Builder.newInstance().addDimension(0, 2).addDimension(1, 3).addDimension(2, 4).build();
+        SizeDimension result = cap2.subtract(cap1);
+        assertEquals(1, result.get(0));
+        assertEquals(1, result.get(1));
+        assertEquals(1, result.get(2));
+    }
+
+    @Test
+    public void whenSubtractingTwoCapacitiesWithDifferentNuOfDimensions_itShouldSubtractCorrectly() {
+        SizeDimension cap1 = SizeDimension.Builder.newInstance().addDimension(0, 1).addDimension(1, 2).build();
+        SizeDimension cap2 = SizeDimension.Builder.newInstance().addDimension(0, 2).build();
+        SizeDimension result = cap2.subtract(cap1);
+        assertEquals(1, result.get(0));
+        assertEquals(-2, result.get(1));
+    }
+
+    @Test(expected = NullPointerException.class)
+    public void whenOneOfArgsIsNullWhenSubtracting_itShouldThrowException() {
+        SizeDimension cap1 = SizeDimension.Builder.newInstance().addDimension(0, 1).addDimension(1, 2).build();
+        @SuppressWarnings("unused")
+        SizeDimension result = cap1.subtract(null);
+    }
+
+    @Test
+    public void whenSubtractingBiggerFromLower_itShouldSubtractCorrectly() {
+        SizeDimension cap1 = SizeDimension.Builder.newInstance().addDimension(0, 1).addDimension(1, 2).addDimension(2, 3).build();
+        SizeDimension cap2 = SizeDimension.Builder.newInstance().addDimension(0, 2).addDimension(1, 3).addDimension(2, 4).build();
+        SizeDimension result = cap1.subtract(cap2);
+        assertEquals(-1, result.get(0));
+        assertEquals(-1, result.get(1));
+        assertEquals(-1, result.get(2));
+    }
+
+    @Test
+    public void whenOneCapIsLessThanAnother_itShouldReturnCorrectBoolean() {
+        SizeDimension cap1 = SizeDimension.Builder.newInstance().addDimension(0, 1).addDimension(1, 2).addDimension(2, 3).build();
+        SizeDimension cap2 = SizeDimension.Builder.newInstance().addDimension(0, 2).addDimension(1, 3).addDimension(2, 4).build();
+        assertTrue(cap1.isLessOrEqual(cap2));
+    }
+
+    @Test
+    public void whenOneCapIsLessThanAnother_itShouldReturnCorrectBoolean_v2() {
+        SizeDimension cap1 = SizeDimension.Builder.newInstance().addDimension(0, 2).addDimension(1, 2).addDimension(2, 4).build();
+        SizeDimension cap2 = SizeDimension.Builder.newInstance().addDimension(0, 2).addDimension(1, 3).addDimension(2, 4).build();
+        assertTrue(cap1.isLessOrEqual(cap2));
+    }
+
+    @Test
+    public void whenOneCapIsLessThanAnother_itShouldReturnCorrectBoolean_v3() {
+        SizeDimension cap1 = SizeDimension.Builder.newInstance().addDimension(0, 2).addDimension(1, 3).addDimension(2, 4).build();
+        SizeDimension cap2 = SizeDimension.Builder.newInstance().addDimension(0, 2).addDimension(1, 3).addDimension(2, 4).build();
+        assertTrue(cap1.isLessOrEqual(cap2));
+    }
+
+    @Test
+    public void whenOneCapIsBiggerThanAnother_itShouldReturnCorrectBoolean() {
+        SizeDimension cap1 = SizeDimension.Builder.newInstance().addDimension(0, 2).addDimension(1, 3).addDimension(2, 4).build();
+        SizeDimension cap2 = SizeDimension.Builder.newInstance().addDimension(0, 2).addDimension(1, 4).addDimension(2, 4).build();
+        assertFalse(cap2.isLessOrEqual(cap1));
+    }
+
+    @Test
+    public void whenOneCapIsBiggerThanAnother_greaterOrEqualShouldReturnTrue() {
+        SizeDimension cap1 = SizeDimension.Builder.newInstance().addDimension(0, 2).addDimension(1, 3).addDimension(2, 4).build();
+        SizeDimension cap2 = SizeDimension.Builder.newInstance().addDimension(0, 2).addDimension(1, 4).addDimension(2, 4).build();
+        assertTrue(cap2.isGreaterOrEqual(cap1));
+    }
+
+    @Test
+    public void whenOneCapIsBiggerThanAnother_greaterOrEqualShouldReturnTrue_v2() {
+        SizeDimension cap1 = SizeDimension.Builder.newInstance().addDimension(0, 2).addDimension(1, 3).addDimension(2, 4).build();
+        //which is zero-cap
+        SizeDimension cap2 = SizeDimension.Builder.newInstance().build();
+        assertTrue(cap1.isGreaterOrEqual(cap2));
+    }
+
+    @Test
+    public void whenOneCapIsEqualToAnother_greaterOrEqualShouldReturnTrue() {
+        SizeDimension cap1 = SizeDimension.Builder.newInstance().addDimension(0, 2).addDimension(1, 3).addDimension(2, 4).build();
+        SizeDimension cap2 = SizeDimension.Builder.newInstance().addDimension(0, 2).addDimension(1, 3).addDimension(2, 4).build();
+        assertTrue(cap2.isGreaterOrEqual(cap1));
+    }
+
+    @Test
+    public void whenAddingTwo_itShouldReturnCorrectCap() {
+        int wheelChairSpace = 0;
+        int passengerSeats = 1;
+        SizeDimension cap1 = SizeDimension.Builder.newInstance().addDimension(wheelChairSpace, 2).addDimension(passengerSeats, 10).build();
+        SizeDimension wheelChair = SizeDimension.Builder.newInstance().addDimension(wheelChairSpace, 1).build();
+        SizeDimension passenger = SizeDimension.Builder.newInstance().addDimension(passengerSeats, 1).build();
+        SizeDimension wheelChair_plus_passenger = wheelChair.add(passenger);
+        assertEquals(1, wheelChair_plus_passenger.get(wheelChairSpace));
+        assertEquals(1, wheelChair_plus_passenger.get(passengerSeats));
+        assertTrue(wheelChair_plus_passenger.isLessOrEqual(cap1));
+    }
+
+    @Test
+    public void whenAddingTwo_itShouldReturnCorrectCap_v2() {
+        int wheelChairSpace = 0;
+        int passengerSeats = 1;
+        int weight = 2;
+        SizeDimension cap1 = SizeDimension.Builder.newInstance().addDimension(wheelChairSpace, 2).addDimension(passengerSeats, 10).addDimension(2, 100).build();
+        SizeDimension wheelChair = SizeDimension.Builder.newInstance().addDimension(wheelChairSpace, 1).addDimension(weight, 80).build();
+        SizeDimension passenger = SizeDimension.Builder.newInstance().addDimension(passengerSeats, 1).addDimension(weight, 30).build();
+        SizeDimension wheelChair_plus_passenger = wheelChair.add(passenger);
+        assertEquals(1, wheelChair_plus_passenger.get(wheelChairSpace));
+        assertEquals(1, wheelChair_plus_passenger.get(passengerSeats));
+        assertEquals(110, wheelChair_plus_passenger.get(weight));
+        assertFalse(wheelChair_plus_passenger.isLessOrEqual(cap1));
+    }
+
+    @Test
+    public void whenInvertingCap_itShouldBeDoneCorrectly() {
+        SizeDimension cap = SizeDimension.Builder.newInstance().addDimension(0, 2).addDimension(1, 3).addDimension(2, 4).build();
+        SizeDimension inverted = cap.invert();
+        assertEquals(-2, inverted.get(0));
+        assertEquals(-3, inverted.get(1));
+        assertEquals(-4, inverted.get(2));
+    }
+
+    @Test
+    public void whenDeterminingTheMaximumOfTwoCapacities_itShouldReturnCapWithMaxOfEachDimension() {
+        SizeDimension cap1 = SizeDimension.Builder.newInstance().addDimension(0, 3).addDimension(1, 3).build();
+        SizeDimension cap2 = SizeDimension.Builder.newInstance().addDimension(0, 2).addDimension(1, 4).build();
+        assertEquals(3, SizeDimension.max(cap1, cap2).get(0));
+        assertEquals(4, SizeDimension.max(cap1, cap2).get(1));
+    }
+
+    @Test
+    public void whenDeterminingTheMaximumOfTwoCapacities_itShouldReturnCapWithMaxOfEachDimension_v2() {
+        SizeDimension cap1 = SizeDimension.Builder.newInstance().addDimension(0, 1).addDimension(1, 3).build();
+        SizeDimension cap2 = SizeDimension.Builder.newInstance().addDimension(0, 2).addDimension(1, 4).build();
+        assertEquals(2, SizeDimension.max(cap1, cap2).get(0));
+        assertEquals(4, SizeDimension.max(cap1, cap2).get(1));
+    }
+
+    @Test
+    public void whenDeterminingTheMaximumOfTwoCapacities_itShouldReturnCapWithMaxOfEachDimension_v3() {
+        SizeDimension cap1 = SizeDimension.Builder.newInstance().addDimension(0, 1).addDimension(1, 3).addDimension(2, 3).build();
+        SizeDimension cap2 = SizeDimension.Builder.newInstance().addDimension(0, 2).addDimension(1, 4).build();
+        assertEquals(2, SizeDimension.max(cap1, cap2).get(0));
+        assertEquals(4, SizeDimension.max(cap1, cap2).get(1));
+        assertEquals(3, SizeDimension.max(cap1, cap2).get(2));
+    }
+
+    @Test
+    public void whenDividingTwoCapacities_itShouldReturn05() {
+        SizeDimension cap1 = SizeDimension.Builder.newInstance().addDimension(0, 1).addDimension(1, 2).build();
+        SizeDimension cap2 = SizeDimension.Builder.newInstance().addDimension(0, 2).addDimension(1, 4).build();
+        assertEquals(0.5, SizeDimension.divide(cap1, cap2), 0.001);
+    }
+
+    @Test
+    public void whenDividingTwoEqualCapacities_itShouldReturn10() {
+        SizeDimension cap1 = SizeDimension.Builder.newInstance().addDimension(0, 2).addDimension(1, 4).build();
+        SizeDimension cap2 = SizeDimension.Builder.newInstance().addDimension(0, 2).addDimension(1, 4).build();
+        assertEquals(1.0, SizeDimension.divide(cap1, cap2), 0.001);
+    }
+
+    @Test
+    public void whenDividingTwoCapacities_itShouldReturn00() {
+        SizeDimension cap1 = SizeDimension.Builder.newInstance().addDimension(0, 0).addDimension(1, 0).build();
+        SizeDimension cap2 = SizeDimension.Builder.newInstance().addDimension(0, 2).addDimension(1, 4).build();
+        assertEquals(0.0, SizeDimension.divide(cap1, cap2), 0.001);
+    }
+
+    @Test(expected = IllegalArgumentException.class)
+    public void whenDividingByAZeroDim_itShouldThrowException() {
+        SizeDimension cap1 = SizeDimension.Builder.newInstance().addDimension(0, 1).addDimension(1, 2).build();
+        SizeDimension cap2 = SizeDimension.Builder.newInstance().addDimension(0, 2).addDimension(1, 0).build();
+        SizeDimension.divide(cap1, cap2);
+    }
+
+    @Test
+    public void whenBothDimOfNominatorAndDenominatorAreZero_divisionShouldIgnoreThisDim() {
+        SizeDimension cap1 = SizeDimension.Builder.newInstance().addDimension(0, 1).addDimension(1, 2).addDimension(3, 0).build();
+        SizeDimension cap2 = SizeDimension.Builder.newInstance().addDimension(0, 2).addDimension(1, 4).addDimension(3, 0).build();
+        assertEquals(0.5, SizeDimension.divide(cap1, cap2), 0.001);
+    }
+
+    @Test
+    public void whenDividingZeroCaps_itShouldReturnZero() {
+        SizeDimension cap1 = SizeDimension.Builder.newInstance().build();
+        SizeDimension cap2 = SizeDimension.Builder.newInstance().build();
+        assertEquals(0.0, SizeDimension.divide(cap1, cap2), 0.001);
+    }
+
+    @Test
+    public void shouldBeEqual() {
+        SizeDimension cap1 = SizeDimension.Builder.newInstance().build();
+        SizeDimension cap2 = SizeDimension.Builder.newInstance().build();
+        Assert.assertTrue(cap1.equals(cap2));
+    }
+
+    @Test
+    public void shouldBeEqual2() {
+        SizeDimension cap1 = SizeDimension.Builder.newInstance().addDimension(0, 10).addDimension(1, 100).addDimension(2, 1000).build();
+        SizeDimension cap2 = SizeDimension.Builder.newInstance().addDimension(0, 10).addDimension(2, 1000).addDimension(1, 100).build();
+        Assert.assertTrue(cap1.equals(cap2));
+    }
+
+    @Test
+    public void legacyTest() {
+        Capacity.Builder builder = Capacity.Builder.newInstance();
+        Assert.assertTrue(builder instanceof SizeDimension.Builder);
+        Assert.assertTrue(builder.build() instanceof SizeDimension);
+    }
+}
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblemTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblemTest.java
index 6a96c886c..a28b4ea4a 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblemTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/VehicleRoutingProblemTest.java
@@ -196,12 +196,12 @@ public void whenPickupsAreAddedAllAtOnce_vrpShouldContainThem() {
     public void whenDelivieriesAreAdded_vrpShouldContainThem() {
         Delivery s1 = mock(Delivery.class);
         when(s1.getId()).thenReturn("s1");
-        when(s1.getSize()).thenReturn(Capacity.Builder.newInstance().build());
+        when(s1.getSize()).thenReturn(SizeDimension.Builder.newInstance().build());
         when(s1.getLocation()).thenReturn(Location.Builder.newInstance().setIndex(1).build());
         when(s1.getActivityList()).thenReturn(new SequentialJobActivityList(s1));
         Delivery s2 = mock(Delivery.class);
         when(s2.getId()).thenReturn("s2");
-        when(s2.getSize()).thenReturn(Capacity.Builder.newInstance().build());
+        when(s2.getSize()).thenReturn(SizeDimension.Builder.newInstance().build());
         when(s2.getLocation()).thenReturn(Location.Builder.newInstance().setIndex(1).build());
         when(s2.getActivityList()).thenReturn(new SequentialJobActivityList(s2));
 
@@ -219,12 +219,12 @@ public void whenDelivieriesAreAdded_vrpShouldContainThem() {
     public void whenDelivieriesAreAddedAllAtOnce_vrpShouldContainThem() {
         Delivery s1 = mock(Delivery.class);
         when(s1.getId()).thenReturn("s1");
-        when(s1.getSize()).thenReturn(Capacity.Builder.newInstance().build());
+        when(s1.getSize()).thenReturn(SizeDimension.Builder.newInstance().build());
         when(s1.getLocation()).thenReturn(Location.Builder.newInstance().setIndex(1).build());
         when(s1.getActivityList()).thenReturn(new SequentialJobActivityList(s1));
         Delivery s2 = mock(Delivery.class);
         when(s2.getId()).thenReturn("s2");
-        when(s2.getSize()).thenReturn(Capacity.Builder.newInstance().build());
+        when(s2.getSize()).thenReturn(SizeDimension.Builder.newInstance().build());
         when(s2.getLocation()).thenReturn(Location.Builder.newInstance().setIndex(1).build());
         when(s2.getActivityList()).thenReturn(new SequentialJobActivityList(s2));
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/LoadConstraintTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/LoadConstraintTest.java
index aaf5cae1f..20af7fbaf 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/LoadConstraintTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/LoadConstraintTest.java
@@ -19,7 +19,7 @@
 package com.graphhopper.jsprit.core.problem.constraint;
 
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
-import com.graphhopper.jsprit.core.problem.Capacity;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.CopyJobActivityFactory;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
@@ -63,7 +63,7 @@
     public void doBefore() {
         Vehicle vehicle = mock(Vehicle.class);
         VehicleType type = mock(VehicleType.class);
-        when(type.getCapacityDimensions()).thenReturn(Capacity.Builder.newInstance().addDimension(0, 20).build());
+        when(type.getCapacityDimensions()).thenReturn(SizeDimension.Builder.newInstance().addDimension(0, 20).build());
         when(vehicle.getType()).thenReturn(type);
 
         VehicleRoutingProblem.Builder serviceProblemBuilder = VehicleRoutingProblem.Builder.newInstance();
@@ -105,9 +105,9 @@ public void doBefore() {
     @Test
     public void whenCustomJob_itShouldNotIgnoreCapacity() {
         CustomPickupJob cj = CustomPickupJob.Builder.newInstance("job")
-            .addPickup(Location.newInstance(10, 0), Capacity.Builder.newInstance().addDimension(0, 1).build())
-            .addPickup(Location.newInstance(5, 0), Capacity.Builder.newInstance().addDimension(0, 2).build())
-            .addPickup(Location.newInstance(20, 0), Capacity.Builder.newInstance().addDimension(0, 1).build())
+            .addPickup(Location.newInstance(10, 0), SizeDimension.Builder.newInstance().addDimension(0, 1).build())
+            .addPickup(Location.newInstance(5, 0), SizeDimension.Builder.newInstance().addDimension(0, 2).build())
+            .addPickup(Location.newInstance(20, 0), SizeDimension.Builder.newInstance().addDimension(0, 1).build())
             .build();
         VehicleType type = VehicleTypeImpl.Builder.newInstance("type").addCapacityDimension(0, 2).build();
         Vehicle v = VehicleImpl.Builder.newInstance("v").setType(type).setStartLocation(Location.newInstance(0, 0)).build();
@@ -138,7 +138,7 @@ public void whenServiceRouteAndNewServiceFitsIn_itShouldReturnFulfilled() {
     public void whenServiceRouteAndNewServiceFitsInBetweenStartAndAct1_itShouldReturnFulfilled() {
         stateManager.informInsertionStarts(Arrays.asList(serviceRoute), Collections.<Job>emptyList());
         Service s = mock(Service.class);
-        Capacity newSize = Capacity.Builder.newInstance().addDimension(0, 5).build();
+        SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 5).build();
 
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
@@ -155,7 +155,7 @@ public void whenServiceRouteAndNewServiceFitsInBetweenStartAndAct1_itShouldRetur
     public void whenServiceRouteAndNewServiceFitsInBetweenAc1AndAct2_itShouldReturnFulfilled() {
         stateManager.informInsertionStarts(Arrays.asList(serviceRoute), Collections.<Job>emptyList());
         Service s = mock(Service.class);
-        Capacity newSize = Capacity.Builder.newInstance().addDimension(0, 5).build();
+        SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 5).build();
 
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
@@ -172,7 +172,7 @@ public void whenServiceRouteAndNewServiceFitsInBetweenAc1AndAct2_itShouldReturnF
     public void whenServiceRouteAndNewServiceFitsInBetweenAc2AndEnd_itShouldReturnFulfilled() {
         stateManager.informInsertionStarts(Arrays.asList(serviceRoute), Collections.<Job>emptyList());
         Service s = mock(Service.class);
-        Capacity newSize = Capacity.Builder.newInstance().addDimension(0, 5).build();
+        SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 5).build();
 
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
@@ -192,7 +192,7 @@ public void whenServiceRouteAndNewServiceFitsInBetweenAc2AndEnd_itShouldReturnFu
     public void whenServiceRouteAndNewServiceDoesNotFitInBetweenStartAndAct1_itShouldReturnFulfilled() {
         stateManager.informInsertionStarts(Arrays.asList(serviceRoute), Collections.<Job>emptyList());
         Service s = mock(Service.class);
-        Capacity newSize = Capacity.Builder.newInstance().addDimension(0, 6).build();
+        SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 6).build();
 
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
@@ -209,7 +209,7 @@ public void whenServiceRouteAndNewServiceDoesNotFitInBetweenStartAndAct1_itShoul
     public void whenServiceRouteAndNewServiceDoesNotFitInBetweenAc1AndAct2_itShouldReturnFulfilled() {
         stateManager.informInsertionStarts(Arrays.asList(serviceRoute), Collections.<Job>emptyList());
         Service s = mock(Service.class);
-        Capacity newSize = Capacity.Builder.newInstance().addDimension(0, 6).build();
+        SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 6).build();
 
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
@@ -226,7 +226,7 @@ public void whenServiceRouteAndNewServiceDoesNotFitInBetweenAc1AndAct2_itShouldR
     public void whenServiceRouteAndNewServiceDoesNotFitInBetweenAc2AndEnd_itShouldReturnFulfilled() {
         stateManager.informInsertionStarts(Arrays.asList(serviceRoute), Collections.<Job>emptyList());
         Service s = mock(Service.class);
-        Capacity newSize = Capacity.Builder.newInstance().addDimension(0, 6).build();
+        SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 6).build();
 
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
@@ -301,7 +301,7 @@ public void whenPDRouteRouteAndNewDeliveryDoesNotFitIn_itShouldReturnNotFulfille
     public void whenPDRoute_newPickupShouldFitInBetweenStartAndAct1() {
         stateManager.informInsertionStarts(Arrays.asList(pickupDeliveryRoute), Collections.<Job>emptyList());
         Pickup s = mock(Pickup.class);
-        Capacity newSize = Capacity.Builder.newInstance().addDimension(0, 5).build();
+        SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 5).build();
 
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
@@ -318,7 +318,7 @@ public void whenPDRoute_newPickupShouldFitInBetweenStartAndAct1() {
     public void whenPDRoute_newPickupShouldFitInBetweenAct1AndAct2() {
         stateManager.informInsertionStarts(Arrays.asList(pickupDeliveryRoute), Collections.<Job>emptyList());
         Pickup s = mock(Pickup.class);
-        Capacity newSize = Capacity.Builder.newInstance().addDimension(0, 5).build();
+        SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 5).build();
 
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
@@ -335,7 +335,7 @@ public void whenPDRoute_newPickupShouldFitInBetweenAct1AndAct2() {
     public void whenPDRoute_newPickupShouldFitInBetweenAct2AndEnd() {
         stateManager.informInsertionStarts(Arrays.asList(pickupDeliveryRoute), Collections.<Job>emptyList());
         Pickup s = mock(Pickup.class);
-        Capacity newSize = Capacity.Builder.newInstance().addDimension(0, 10).build();
+        SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 10).build();
 
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
@@ -355,7 +355,7 @@ public void whenPDRoute_newPickupShouldFitInBetweenAct2AndEnd() {
     public void whenPDRoute_newPickupShouldNotFitInBetweenStartAndAct1() {
         stateManager.informInsertionStarts(Arrays.asList(pickupDeliveryRoute), Collections.<Job>emptyList());
         Pickup s = mock(Pickup.class);
-        Capacity newSize = Capacity.Builder.newInstance().addDimension(0, 6).build();
+        SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 6).build();
 
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
@@ -372,7 +372,7 @@ public void whenPDRoute_newPickupShouldNotFitInBetweenStartAndAct1() {
     public void whenPDRoute_newPickupShouldNotFitInBetweenAct1AndAct2() {
         stateManager.informInsertionStarts(Arrays.asList(pickupDeliveryRoute), Collections.<Job>emptyList());
         Pickup s = mock(Pickup.class);
-        Capacity newSize = Capacity.Builder.newInstance().addDimension(0, 6).build();
+        SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 6).build();
 
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
@@ -389,7 +389,7 @@ public void whenPDRoute_newPickupShouldNotFitInBetweenAct1AndAct2() {
     public void whenPDRoute_newPickupShouldNotFitInBetweenAct2AndEnd() {
         stateManager.informInsertionStarts(Arrays.asList(pickupDeliveryRoute), Collections.<Job>emptyList());
         Pickup s = mock(Pickup.class);
-        Capacity newSize = Capacity.Builder.newInstance().addDimension(0, 11).build();
+        SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 11).build();
 
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
@@ -410,7 +410,7 @@ public void whenPDRoute_newPickupShouldNotFitInBetweenAct2AndEnd() {
     public void whenPDRoute_newDeliveryShouldFitInBetweenStartAndAct1() {
         stateManager.informInsertionStarts(Arrays.asList(pickupDeliveryRoute), Collections.<Job>emptyList());
         Delivery s = mock(Delivery.class);
-        Capacity newSize = Capacity.Builder.newInstance().addDimension(0, 15).build();
+        SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 15).build();
 
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
@@ -428,7 +428,7 @@ public void whenPDRoute_newDeliveryShouldFitInBetweenStartAndAct1() {
     public void whenPDRoute_newDeliveryShouldNotFitInBetweenStartAndAct1() {
         stateManager.informInsertionStarts(Arrays.asList(pickupDeliveryRoute), Collections.<Job>emptyList());
         Delivery s = mock(Delivery.class);
-        Capacity newSize = Capacity.Builder.newInstance().addDimension(0, 16).build();
+        SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 16).build();
 
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
@@ -446,7 +446,7 @@ public void whenPDRoute_newDeliveryShouldNotFitInBetweenStartAndAct1() {
     public void whenPDRoute_newDeliveryShouldFitInBetweenAct1AndAct2() {
         stateManager.informInsertionStarts(Arrays.asList(pickupDeliveryRoute), Collections.<Job>emptyList());
         Delivery s = mock(Delivery.class);
-        Capacity newSize = Capacity.Builder.newInstance().addDimension(0, 5).build();
+        SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 5).build();
 
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
@@ -464,7 +464,7 @@ public void whenPDRoute_newDeliveryShouldFitInBetweenAct1AndAct2() {
     public void whenPDRoute_newDeliveryNotShouldFitInBetweenAct1AndAct2() {
         stateManager.informInsertionStarts(Arrays.asList(pickupDeliveryRoute), Collections.<Job>emptyList());
         Delivery s = mock(Delivery.class);
-        Capacity newSize = Capacity.Builder.newInstance().addDimension(0, 6).build();
+        SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 6).build();
 
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
@@ -482,7 +482,7 @@ public void whenPDRoute_newDeliveryNotShouldFitInBetweenAct1AndAct2() {
     public void whenPDRoute_newDeliveryShouldFitInBetweenAct2AndEnd() {
         stateManager.informInsertionStarts(Arrays.asList(pickupDeliveryRoute), Collections.<Job>emptyList());
         Delivery s = mock(Delivery.class);
-        Capacity newSize = Capacity.Builder.newInstance().addDimension(0, 5).build();
+        SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 5).build();
 
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
@@ -500,7 +500,7 @@ public void whenPDRoute_newDeliveryShouldFitInBetweenAct2AndEnd() {
     public void whenPDRoute_newDeliveryShouldNotFitInBetweenAct2AndEnd() {
         stateManager.informInsertionStarts(Arrays.asList(pickupDeliveryRoute), Collections.<Job>emptyList());
         Delivery s = mock(Delivery.class);
-        Capacity newSize = Capacity.Builder.newInstance().addDimension(0, 6).build();
+        SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 6).build();
 
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
@@ -518,7 +518,7 @@ public void whenPDRoute_newDeliveryShouldNotFitInBetweenAct2AndEnd() {
     public void whenPDRouteAndNewServiceFitsInBetweenAc1AndAct2_itShouldReturnFulfilled() {
         stateManager.informInsertionStarts(Arrays.asList(pickupDeliveryRoute), Collections.<Job>emptyList());
         Service s = mock(Service.class);
-        Capacity newSize = Capacity.Builder.newInstance().addDimension(0, 5).build();
+        SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 5).build();
 
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
@@ -535,7 +535,7 @@ public void whenPDRouteAndNewServiceFitsInBetweenAc1AndAct2_itShouldReturnFulfil
     public void whenPDRouteAndNewServiceFitsInBetweenAc2AndEnd_itShouldReturnFulfilled() {
         stateManager.informInsertionStarts(Arrays.asList(pickupDeliveryRoute), Collections.<Job>emptyList());
         Service s = mock(Service.class);
-        Capacity newSize = Capacity.Builder.newInstance().addDimension(0, 5).build();
+        SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 5).build();
 
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
@@ -555,7 +555,7 @@ public void whenPDRouteAndNewServiceFitsInBetweenAc2AndEnd_itShouldReturnFulfill
     public void whenPDRouteAndNewServiceDoesNotFitInBetweenStartAndAct1_itShouldReturnFulfilled() {
         stateManager.informInsertionStarts(Arrays.asList(serviceRoute), Collections.<Job>emptyList());
         Service s = mock(Service.class);
-        Capacity newSize = Capacity.Builder.newInstance().addDimension(0, 6).build();
+        SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 6).build();
 
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
@@ -572,7 +572,7 @@ public void whenPDRouteAndNewServiceDoesNotFitInBetweenStartAndAct1_itShouldRetu
     public void whenPDRouteAndNewServiceDoesNotFitInBetweenAc1AndAct2_itShouldReturnFulfilled() {
         stateManager.informInsertionStarts(Arrays.asList(pickupDeliveryRoute), Collections.<Job>emptyList());
         Service s = mock(Service.class);
-        Capacity newSize = Capacity.Builder.newInstance().addDimension(0, 6).build();
+        SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 6).build();
 
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
@@ -589,7 +589,7 @@ public void whenPDRouteAndNewServiceDoesNotFitInBetweenAc1AndAct2_itShouldReturn
     public void whenPDRouteAndNewServiceDoesNotFitInBetweenAc2AndEnd_itShouldReturnFulfilled() {
         stateManager.informInsertionStarts(Arrays.asList(serviceRoute), Collections.<Job>emptyList());
         Service s = mock(Service.class);
-        Capacity newSize = Capacity.Builder.newInstance().addDimension(0, 6).build();
+        SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 6).build();
 
         ServiceLoadActivityLevelConstraint loadConstraint = new ServiceLoadActivityLevelConstraint(stateManager);
 
@@ -624,7 +624,7 @@ public void whenPDRouteAndNewServiceDoesNotFitIn_itShouldReturnFulfilled() {
     public void whenShipmentRouteAndPickupOfNewShipmentShouldFitInBetweenStartAndAct1() {
         stateManager.informInsertionStarts(Arrays.asList(shipmentRoute), Collections.<Job>emptyList());
         Shipment s = mock(Shipment.class);
-        Capacity newSize = Capacity.Builder.newInstance().addDimension(0, 20).build();
+        SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 20).build();
 
 
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
@@ -642,7 +642,7 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldFitInBetweenStartAndAct
     public void whenShipmentRouteAndPickupOfNewShipmentShouldNotFitInBetweenStartAndAct1() {
         stateManager.informInsertionStarts(Arrays.asList(shipmentRoute), Collections.<Job>emptyList());
         Shipment s = mock(Shipment.class);
-        Capacity newSize = Capacity.Builder.newInstance().addDimension(0, 21).build();
+        SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 21).build();
 
 
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
@@ -660,7 +660,7 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldNotFitInBetweenStartAnd
     public void whenShipmentRouteAndPickupOfNewShipmentShouldFitInBetweenAct1AndAct2() {
         stateManager.informInsertionStarts(Arrays.asList(shipmentRoute), Collections.<Job>emptyList());
         Shipment s = mock(Shipment.class);
-        Capacity newSize = Capacity.Builder.newInstance().addDimension(0, 10).build();
+        SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 10).build();
 
 
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
@@ -678,7 +678,7 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldFitInBetweenAct1AndAct2
     public void whenShipmentRouteAndPickupOfNewShipmentShouldNotFitInBetweenAct1AndAct2() {
         stateManager.informInsertionStarts(Arrays.asList(shipmentRoute), Collections.<Job>emptyList());
         Shipment s = mock(Shipment.class);
-        Capacity newSize = Capacity.Builder.newInstance().addDimension(0, 11).build();
+        SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 11).build();
 
 
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
@@ -696,7 +696,7 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldNotFitInBetweenAct1AndA
     public void whenShipmentRouteAndPickupOfNewShipmentShouldFitInBetweenAct2AndAct3() {
         stateManager.informInsertionStarts(Arrays.asList(shipmentRoute), Collections.<Job>emptyList());
         Shipment s = mock(Shipment.class);
-        Capacity newSize = Capacity.Builder.newInstance().addDimension(0, 5).build();
+        SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 5).build();
 
 
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
@@ -714,7 +714,7 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldFitInBetweenAct2AndAct3
     public void whenShipmentRouteAndPickupOfNewShipmentShouldNotFitInBetweenAct2AndAct3() {
         stateManager.informInsertionStarts(Arrays.asList(shipmentRoute), Collections.<Job>emptyList());
         Shipment s = mock(Shipment.class);
-        Capacity newSize = Capacity.Builder.newInstance().addDimension(0, 6).build();
+        SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 6).build();
 
 
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
@@ -732,7 +732,7 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldNotFitInBetweenAct2AndA
     public void whenShipmentRouteAndPickupOfNewShipmentShouldFitInBetweenAct3AndAct4() {
         stateManager.informInsertionStarts(Arrays.asList(shipmentRoute), Collections.<Job>emptyList());
         Shipment s = mock(Shipment.class);
-        Capacity newSize = Capacity.Builder.newInstance().addDimension(0, 10).build();
+        SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 10).build();
 
 
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
@@ -750,7 +750,7 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldFitInBetweenAct3AndAct4
     public void whenShipmentRouteAndPickupOfNewShipmentShouldNotFitInBetweenAct3AndAct4() {
         stateManager.informInsertionStarts(Arrays.asList(shipmentRoute), Collections.<Job>emptyList());
         Shipment s = mock(Shipment.class);
-        Capacity newSize = Capacity.Builder.newInstance().addDimension(0, 11).build();
+        SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 11).build();
 
 
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
@@ -768,7 +768,7 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldNotFitInBetweenAct3AndA
     public void whenShipmentRouteAndPickupOfNewShipmentShouldFitInBetweenAct4AndEnd() {
         stateManager.informInsertionStarts(Arrays.asList(shipmentRoute), Collections.<Job>emptyList());
         Shipment s = mock(Shipment.class);
-        Capacity newSize = Capacity.Builder.newInstance().addDimension(0, 20).build();
+        SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 20).build();
 
 
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
@@ -786,7 +786,7 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldFitInBetweenAct4AndEnd(
     public void whenShipmentRouteAndPickupOfNewShipmentShouldNotFitInBetweenAct4AndEnd() {
         stateManager.informInsertionStarts(Arrays.asList(shipmentRoute), Collections.<Job>emptyList());
         Shipment s = mock(Shipment.class);
-        Capacity newSize = Capacity.Builder.newInstance().addDimension(0, 21).build();
+        SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 21).build();
 
 
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
@@ -808,7 +808,7 @@ public void whenShipmentRouteAndPickupOfNewShipmentShouldNotFitInBetweenAct4AndE
     public void whenShipmentRouteAndDeliveryOfNewShipmentShouldFitInBetweenStartAndAct1() {
         stateManager.informInsertionStarts(Arrays.asList(shipmentRoute), Collections.<Job>emptyList());
         Shipment s = mock(Shipment.class);
-        Capacity newSize = Capacity.Builder.newInstance().addDimension(0, 20).build();
+        SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 20).build();
 
 
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
@@ -826,7 +826,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldFitInBetweenStartAndA
     public void whenShipmentRouteAndDeliveryOfNewShipmentShouldNotFitInBetweenStartAndAct1() {
         stateManager.informInsertionStarts(Arrays.asList(shipmentRoute), Collections.<Job>emptyList());
         Shipment s = mock(Shipment.class);
-        Capacity newSize = Capacity.Builder.newInstance().addDimension(0, 21).build();
+        SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 21).build();
 
 
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
@@ -844,7 +844,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldNotFitInBetweenStartA
     public void whenShipmentRouteAndDeliveryOfNewShipmentShouldFitInBetweenAct1AndAct2() {
         stateManager.informInsertionStarts(Arrays.asList(shipmentRoute), Collections.<Job>emptyList());
         Shipment s = mock(Shipment.class);
-        Capacity newSize = Capacity.Builder.newInstance().addDimension(0, 10).build();
+        SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 10).build();
 
 
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
@@ -862,7 +862,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldFitInBetweenAct1AndAc
     public void whenShipmentRouteAndDeliveryOfNewShipmentShouldNotFitInBetweenAct1AndAct2() {
         stateManager.informInsertionStarts(Arrays.asList(shipmentRoute), Collections.<Job>emptyList());
         Shipment s = mock(Shipment.class);
-        Capacity newSize = Capacity.Builder.newInstance().addDimension(0, 11).build();
+        SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 11).build();
 
 
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
@@ -880,7 +880,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldNotFitInBetweenAct1An
     public void whenShipmentRouteAndDeliveryOfNewShipmentShouldFitInBetweenAct2AndAct3() {
         stateManager.informInsertionStarts(Arrays.asList(shipmentRoute), Collections.<Job>emptyList());
         Shipment s = mock(Shipment.class);
-        Capacity newSize = Capacity.Builder.newInstance().addDimension(0, 5).build();
+        SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 5).build();
 
 
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
@@ -898,7 +898,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldFitInBetweenAct2AndAc
     public void whenShipmentRouteAndDeliveryOfNewShipmentShouldNotFitInBetweenAct2AndAct3() {
         stateManager.informInsertionStarts(Arrays.asList(shipmentRoute), Collections.<Job>emptyList());
         Shipment s = mock(Shipment.class);
-        Capacity newSize = Capacity.Builder.newInstance().addDimension(0, 6).build();
+        SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 6).build();
 
 
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
@@ -916,7 +916,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldNotFitInBetweenAct2An
     public void whenShipmentRouteAndDeliveryOfNewShipmentShouldFitInBetweenAct3AndAct4() {
         stateManager.informInsertionStarts(Arrays.asList(shipmentRoute), Collections.<Job>emptyList());
         Shipment s = mock(Shipment.class);
-        Capacity newSize = Capacity.Builder.newInstance().addDimension(0, 10).build();
+        SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 10).build();
 
 
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
@@ -934,7 +934,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldFitInBetweenAct3AndAc
     public void whenShipmentRouteAndDeliveryOfNewShipmentShouldNotFitInBetweenAct3AndAct4() {
         stateManager.informInsertionStarts(Arrays.asList(shipmentRoute), Collections.<Job>emptyList());
         Shipment s = mock(Shipment.class);
-        Capacity newSize = Capacity.Builder.newInstance().addDimension(0, 11).build();
+        SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 11).build();
 
 
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
@@ -952,7 +952,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldNotFitInBetweenAct3An
     public void whenShipmentRouteAndDeliveryOfNewShipmentShouldFitInBetweenAct4AndEnd() {
         stateManager.informInsertionStarts(Arrays.asList(shipmentRoute), Collections.<Job>emptyList());
         Shipment s = mock(Shipment.class);
-        Capacity newSize = Capacity.Builder.newInstance().addDimension(0, 20).build();
+        SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 20).build();
 
 
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
@@ -970,7 +970,7 @@ public void whenShipmentRouteAndDeliveryOfNewShipmentShouldFitInBetweenAct4AndEn
     public void whenShipmentRouteAndDeliveryOfNewShipmentShouldNotFitInBetweenAct4AndEnd() {
         stateManager.informInsertionStarts(Arrays.asList(shipmentRoute), Collections.<Job>emptyList());
         Shipment s = mock(Shipment.class);
-        Capacity newSize = Capacity.Builder.newInstance().addDimension(0, 21).build();
+        SizeDimension newSize = SizeDimension.Builder.newInstance().addDimension(0, 21).build();
 
         JobInsertionContext context = new JobInsertionContext(shipmentRoute, s, shipmentRoute.getVehicle(), null, 0.);
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadRouteLevelConstraintTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadRouteLevelConstraintTest.java
index c50fd4931..3f3da8fbf 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadRouteLevelConstraintTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/constraint/ServiceLoadRouteLevelConstraintTest.java
@@ -19,7 +19,7 @@
 
 import com.graphhopper.jsprit.core.algorithm.state.InternalStates;
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
-import com.graphhopper.jsprit.core.problem.Capacity;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.job.Delivery;
@@ -57,17 +57,17 @@
     @Before
     public void doBefore() {
         VehicleType type = mock(VehicleType.class);
-        when(type.getCapacityDimensions()).thenReturn(Capacity.Builder.newInstance().addDimension(0, 3).addDimension(1, 3).addDimension(2, 3).build());
+        when(type.getCapacityDimensions()).thenReturn(SizeDimension.Builder.newInstance().addDimension(0, 3).addDimension(1, 3).addDimension(2, 3).build());
         vehicle = mock(Vehicle.class);
         when(vehicle.getType()).thenReturn(type);
 
         route = mock(VehicleRoute.class);
 
-        Capacity currentLoad = Capacity.Builder.newInstance().addDimension(0, 1).addDimension(1, 1).addDimension(2, 1).build();
+        SizeDimension currentLoad = SizeDimension.Builder.newInstance().addDimension(0, 1).addDimension(1, 1).addDimension(2, 1).build();
         stateGetter = mock(RouteAndActivityStateGetter.class);
-        when(stateGetter.getRouteState(route, InternalStates.LOAD_AT_BEGINNING, Capacity.class)).thenReturn(currentLoad);
-        when(stateGetter.getRouteState(route, InternalStates.LOAD_AT_END, Capacity.class)).thenReturn(currentLoad);
-        when(stateGetter.getRouteState(route, InternalStates.MAXLOAD, Capacity.class)).thenReturn(currentLoad);
+        when(stateGetter.getRouteState(route, InternalStates.LOAD_AT_BEGINNING, SizeDimension.class)).thenReturn(currentLoad);
+        when(stateGetter.getRouteState(route, InternalStates.LOAD_AT_END, SizeDimension.class)).thenReturn(currentLoad);
+        when(stateGetter.getRouteState(route, InternalStates.MAXLOAD, SizeDimension.class)).thenReturn(currentLoad);
 
         constraint = new ServiceLoadRouteLevelConstraint(stateGetter);
 
@@ -80,7 +80,7 @@ public void doBefore() {
     @Test
     public void whenLoadPlusDeliverySizeDoesNotExceedsVehicleCapacity_itShouldReturnTrue() {
         Service service = Delivery.Builder.newInstance("del").setLocation(l())
-            .addAllSizeDimensions(Capacity.Builder.newInstance().addDimension(0, 1).addDimension(1, 1).addDimension(2, 1).build()).build();
+            .addAllSizeDimensions(SizeDimension.Builder.newInstance().addDimension(0, 1).addDimension(1, 1).addDimension(2, 1).build()).build();
         JobInsertionContext iContext = mock(JobInsertionContext.class);
         when(iContext.getJob()).thenReturn(service);
         when(iContext.getRoute()).thenReturn(route);
@@ -92,7 +92,7 @@ public void whenLoadPlusDeliverySizeDoesNotExceedsVehicleCapacity_itShouldReturn
     @Test
     public void whenLoadPlusDeliverySizeExceedsVehicleCapacityInAllDimension_itShouldReturnFalse() {
         Service service = Delivery.Builder.newInstance("d").setLocation(l())
-            .addAllSizeDimensions(Capacity.Builder.newInstance().addDimension(0, 3).addDimension(1, 3).addDimension(2, 3).build()).build();
+            .addAllSizeDimensions(SizeDimension.Builder.newInstance().addDimension(0, 3).addDimension(1, 3).addDimension(2, 3).build()).build();
         JobInsertionContext iContext = mock(JobInsertionContext.class);
         when(iContext.getJob()).thenReturn(service);
         when(iContext.getRoute()).thenReturn(route);
@@ -104,7 +104,7 @@ public void whenLoadPlusDeliverySizeExceedsVehicleCapacityInAllDimension_itShoul
     @Test
     public void whenLoadPlusDeliverySizeExceedsVehicleCapacityInOneDimension_itShouldReturnFalse() {
         Service service = Delivery.Builder.newInstance("d").setLocation(l())
-            .addAllSizeDimensions(Capacity.Builder.newInstance().addDimension(0, 1).addDimension(1, 1).addDimension(2, 3).build()).build();
+            .addAllSizeDimensions(SizeDimension.Builder.newInstance().addDimension(0, 1).addDimension(1, 1).addDimension(2, 3).build()).build();
 
         JobInsertionContext iContext = mock(JobInsertionContext.class);
         when(iContext.getJob()).thenReturn(service);
@@ -117,7 +117,7 @@ public void whenLoadPlusDeliverySizeExceedsVehicleCapacityInOneDimension_itShoul
     @Test
     public void whenLoadPlusDeliverySizeJustFitIntoVehicle_itShouldReturnTrue() {
         Service service = Delivery.Builder.newInstance("d").setLocation(l())
-            .addAllSizeDimensions(Capacity.Builder.newInstance().addDimension(0, 2).addDimension(1, 2).addDimension(2, 2).build()).build();
+            .addAllSizeDimensions(SizeDimension.Builder.newInstance().addDimension(0, 2).addDimension(1, 2).addDimension(2, 2).build()).build();
         JobInsertionContext iContext = mock(JobInsertionContext.class);
         when(iContext.getJob()).thenReturn(service);
         when(iContext.getRoute()).thenReturn(route);
@@ -129,7 +129,7 @@ public void whenLoadPlusDeliverySizeJustFitIntoVehicle_itShouldReturnTrue() {
     @Test
     public void whenLoadPlusPickupSizeDoesNotExceedsVehicleCapacity_itShouldReturnTrue() {
         Service service = Pickup.Builder.newInstance("p").setLocation(l())
-            .addAllSizeDimensions(Capacity.Builder.newInstance().addDimension(0, 1).addDimension(1, 1).addDimension(2, 1).build()).build();
+            .addAllSizeDimensions(SizeDimension.Builder.newInstance().addDimension(0, 1).addDimension(1, 1).addDimension(2, 1).build()).build();
 
         JobInsertionContext iContext = mock(JobInsertionContext.class);
         when(iContext.getJob()).thenReturn(service);
@@ -142,7 +142,7 @@ public void whenLoadPlusPickupSizeDoesNotExceedsVehicleCapacity_itShouldReturnTr
     @Test
     public void whenLoadPlusPickupSizeExceedsVehicleCapacityInAllDimension_itShouldReturnFalse() {
         Service service = Pickup.Builder.newInstance("p").setLocation(l())
-            .addAllSizeDimensions(Capacity.Builder.newInstance().addDimension(0, 3).addDimension(1, 3).addDimension(2, 3).build()).build();
+            .addAllSizeDimensions(SizeDimension.Builder.newInstance().addDimension(0, 3).addDimension(1, 3).addDimension(2, 3).build()).build();
         JobInsertionContext iContext = mock(JobInsertionContext.class);
         when(iContext.getJob()).thenReturn(service);
         when(iContext.getRoute()).thenReturn(route);
@@ -154,7 +154,7 @@ public void whenLoadPlusPickupSizeExceedsVehicleCapacityInAllDimension_itShouldR
     @Test
     public void whenLoadPlusPickupSizeExceedsVehicleCapacityInOneDimension_itShouldReturnFalse() {
         Service service = Pickup.Builder.newInstance("p").setLocation(l())
-            .addAllSizeDimensions(Capacity.Builder.newInstance().addDimension(0, 1).addDimension(1, 1).addDimension(2, 3).build()).build();
+            .addAllSizeDimensions(SizeDimension.Builder.newInstance().addDimension(0, 1).addDimension(1, 1).addDimension(2, 3).build()).build();
 
         JobInsertionContext iContext = mock(JobInsertionContext.class);
         when(iContext.getJob()).thenReturn(service);
@@ -167,7 +167,7 @@ public void whenLoadPlusPickupSizeExceedsVehicleCapacityInOneDimension_itShouldR
     @Test
     public void whenLoadPlusPickupSizeJustFitIntoVehicle_itShouldReturnTrue() {
         Service service = Pickup.Builder.newInstance("p").setLocation(l())
-            .addAllSizeDimensions(Capacity.Builder.newInstance().addDimension(0, 2).addDimension(1, 2).addDimension(2, 2).build()).build();
+            .addAllSizeDimensions(SizeDimension.Builder.newInstance().addDimension(0, 2).addDimension(1, 2).addDimension(2, 2).build()).build();
 
         JobInsertionContext iContext = mock(JobInsertionContext.class);
         when(iContext.getJob()).thenReturn(service);
@@ -180,7 +180,7 @@ public void whenLoadPlusPickupSizeJustFitIntoVehicle_itShouldReturnTrue() {
     @Test
     public void whenLoadPlusServiceSizeDoesNotExceedsVehicleCapacity_itShouldReturnTrue() {
         Service service = Service.Builder.newInstance("s").setLocation(l())
-            .addAllSizeDimensions(Capacity.Builder.newInstance().addDimension(0, 1).addDimension(1, 1).addDimension(2, 1).build()).build();
+            .addAllSizeDimensions(SizeDimension.Builder.newInstance().addDimension(0, 1).addDimension(1, 1).addDimension(2, 1).build()).build();
         JobInsertionContext iContext = mock(JobInsertionContext.class);
         when(iContext.getJob()).thenReturn(service);
         when(iContext.getRoute()).thenReturn(route);
@@ -196,7 +196,7 @@ private Location l() {
     @Test
     public void whenLoadPlusServiceSizeExceedsVehicleCapacityInAllDimension_itShouldReturnFalse() {
         Service service = Service.Builder.newInstance("s").setLocation(l())
-            .addAllSizeDimensions(Capacity.Builder.newInstance().addDimension(0, 3).addDimension(1, 3).addDimension(2, 3).build()).build();
+            .addAllSizeDimensions(SizeDimension.Builder.newInstance().addDimension(0, 3).addDimension(1, 3).addDimension(2, 3).build()).build();
 
         JobInsertionContext iContext = mock(JobInsertionContext.class);
         when(iContext.getJob()).thenReturn(service);
@@ -209,7 +209,7 @@ public void whenLoadPlusServiceSizeExceedsVehicleCapacityInAllDimension_itShould
     @Test
     public void whenLoadPlusServiceSizeExceedsVehicleCapacityInOneDimension_itShouldReturnFalse() {
         Service service = Service.Builder.newInstance("s").setLocation(l())
-            .addAllSizeDimensions(Capacity.Builder.newInstance().addDimension(0, 1).addDimension(1, 1).addDimension(2, 3).build()).build();
+            .addAllSizeDimensions(SizeDimension.Builder.newInstance().addDimension(0, 1).addDimension(1, 1).addDimension(2, 3).build()).build();
         JobInsertionContext iContext = mock(JobInsertionContext.class);
         when(iContext.getJob()).thenReturn(service);
         when(iContext.getRoute()).thenReturn(route);
@@ -221,7 +221,7 @@ public void whenLoadPlusServiceSizeExceedsVehicleCapacityInOneDimension_itShould
     @Test
     public void whenLoadPlusServiceSizeJustFitIntoVehicle_itShouldReturnTrue() {
         Service service = Service.Builder.newInstance("s").setLocation(Location.newInstance(0))
-            .addAllSizeDimensions(Capacity.Builder.newInstance().addDimension(0, 2).addDimension(1, 2).addDimension(2, 2).build()).build();
+            .addAllSizeDimensions(SizeDimension.Builder.newInstance().addDimension(0, 2).addDimension(1, 2).addDimension(2, 2).build()).build();
 
         JobInsertionContext iContext = mock(JobInsertionContext.class);
         when(iContext.getJob()).thenReturn(service);
@@ -234,22 +234,22 @@ public void whenLoadPlusServiceSizeJustFitIntoVehicle_itShouldReturnTrue() {
     @Test
     public void whenAddingAServiceAndNewVehicleDoesNotHaveTheCapacity_itShouldReturnFalse() {
         Service service = mock(Service.class);
-        when(service.getSize()).thenReturn(Capacity.Builder.newInstance().addDimension(0, 2).build());
+        when(service.getSize()).thenReturn(SizeDimension.Builder.newInstance().addDimension(0, 2).build());
 
-        Capacity atBeginning = Capacity.Builder.newInstance().addDimension(0, 1).addDimension(1, 2).addDimension(2, 1).build();
-        Capacity atEnd = Capacity.Builder.newInstance().addDimension(0, 0).addDimension(1, 0).addDimension(2, 0).build();
+        SizeDimension atBeginning = SizeDimension.Builder.newInstance().addDimension(0, 1).addDimension(1, 2).addDimension(2, 1).build();
+        SizeDimension atEnd = SizeDimension.Builder.newInstance().addDimension(0, 0).addDimension(1, 0).addDimension(2, 0).build();
 
         RouteAndActivityStateGetter stateGetter = mock(RouteAndActivityStateGetter.class);
-        when(stateGetter.getRouteState(route, InternalStates.LOAD_AT_BEGINNING, Capacity.class)).thenReturn(atBeginning);
-        when(stateGetter.getRouteState(route, InternalStates.LOAD_AT_END, Capacity.class)).thenReturn(atEnd);
-        when(stateGetter.getRouteState(route, InternalStates.MAXLOAD, Capacity.class)).thenReturn(atBeginning);
+        when(stateGetter.getRouteState(route, InternalStates.LOAD_AT_BEGINNING, SizeDimension.class)).thenReturn(atBeginning);
+        when(stateGetter.getRouteState(route, InternalStates.LOAD_AT_END, SizeDimension.class)).thenReturn(atEnd);
+        when(stateGetter.getRouteState(route, InternalStates.MAXLOAD, SizeDimension.class)).thenReturn(atBeginning);
 
         JobInsertionContext iContext = mock(JobInsertionContext.class);
         when(iContext.getJob()).thenReturn(service);
         when(iContext.getRoute()).thenReturn(route);
 
         VehicleType type = mock(VehicleType.class);
-        when(type.getCapacityDimensions()).thenReturn(Capacity.Builder.newInstance().addDimension(0, 2).addDimension(1, 1).addDimension(2, 2).build());
+        when(type.getCapacityDimensions()).thenReturn(SizeDimension.Builder.newInstance().addDimension(0, 2).addDimension(1, 1).addDimension(2, 2).build());
         Vehicle vehicle = mock(Vehicle.class);
         when(vehicle.getType()).thenReturn(type);
 
@@ -262,22 +262,22 @@ public void whenAddingAServiceAndNewVehicleDoesNotHaveTheCapacity_itShouldReturn
     @Test
     public void whenAddingADeliveryAndNewVehicleDoesNotHaveTheCapacity_itShouldReturnFalse() {
         Service service = mock(Delivery.class);
-        when(service.getSize()).thenReturn(Capacity.Builder.newInstance().addDimension(0, 2).build());
+        when(service.getSize()).thenReturn(SizeDimension.Builder.newInstance().addDimension(0, 2).build());
 
-        Capacity atBeginning = Capacity.Builder.newInstance().addDimension(0, 1).addDimension(1, 2).addDimension(2, 1).build();
-        Capacity atEnd = Capacity.Builder.newInstance().addDimension(0, 0).addDimension(1, 0).addDimension(2, 0).build();
+        SizeDimension atBeginning = SizeDimension.Builder.newInstance().addDimension(0, 1).addDimension(1, 2).addDimension(2, 1).build();
+        SizeDimension atEnd = SizeDimension.Builder.newInstance().addDimension(0, 0).addDimension(1, 0).addDimension(2, 0).build();
 
         RouteAndActivityStateGetter stateGetter = mock(RouteAndActivityStateGetter.class);
-        when(stateGetter.getRouteState(route, InternalStates.LOAD_AT_BEGINNING, Capacity.class)).thenReturn(atBeginning);
-        when(stateGetter.getRouteState(route, InternalStates.LOAD_AT_END, Capacity.class)).thenReturn(atEnd);
-        when(stateGetter.getRouteState(route, InternalStates.MAXLOAD, Capacity.class)).thenReturn(atBeginning);
+        when(stateGetter.getRouteState(route, InternalStates.LOAD_AT_BEGINNING, SizeDimension.class)).thenReturn(atBeginning);
+        when(stateGetter.getRouteState(route, InternalStates.LOAD_AT_END, SizeDimension.class)).thenReturn(atEnd);
+        when(stateGetter.getRouteState(route, InternalStates.MAXLOAD, SizeDimension.class)).thenReturn(atBeginning);
 
         JobInsertionContext iContext = mock(JobInsertionContext.class);
         when(iContext.getJob()).thenReturn(service);
         when(iContext.getRoute()).thenReturn(route);
 
         VehicleType type = mock(VehicleType.class);
-        when(type.getCapacityDimensions()).thenReturn(Capacity.Builder.newInstance().addDimension(0, 2).addDimension(1, 1).addDimension(2, 2).build());
+        when(type.getCapacityDimensions()).thenReturn(SizeDimension.Builder.newInstance().addDimension(0, 2).addDimension(1, 1).addDimension(2, 2).build());
         vehicle = mock(Vehicle.class);
         when(vehicle.getType()).thenReturn(type);
 
@@ -290,22 +290,22 @@ public void whenAddingADeliveryAndNewVehicleDoesNotHaveTheCapacity_itShouldRetur
     @Test
     public void whenAddingAPickupAndNewVehicleDoesNotHaveTheCapacity_itShouldReturnFalse() {
         Pickup service = mock(Pickup.class);
-        when(service.getSize()).thenReturn(Capacity.Builder.newInstance().addDimension(0, 2).build());
+        when(service.getSize()).thenReturn(SizeDimension.Builder.newInstance().addDimension(0, 2).build());
 
-        Capacity atBeginning = Capacity.Builder.newInstance().addDimension(0, 1).addDimension(1, 2).addDimension(2, 1).build();
-        Capacity atEnd = Capacity.Builder.newInstance().addDimension(0, 0).addDimension(1, 0).addDimension(2, 0).build();
+        SizeDimension atBeginning = SizeDimension.Builder.newInstance().addDimension(0, 1).addDimension(1, 2).addDimension(2, 1).build();
+        SizeDimension atEnd = SizeDimension.Builder.newInstance().addDimension(0, 0).addDimension(1, 0).addDimension(2, 0).build();
 
         RouteAndActivityStateGetter stateGetter = mock(RouteAndActivityStateGetter.class);
-        when(stateGetter.getRouteState(route, InternalStates.LOAD_AT_BEGINNING, Capacity.class)).thenReturn(atBeginning);
-        when(stateGetter.getRouteState(route, InternalStates.LOAD_AT_END, Capacity.class)).thenReturn(atEnd);
-        when(stateGetter.getRouteState(route, InternalStates.MAXLOAD, Capacity.class)).thenReturn(atBeginning);
+        when(stateGetter.getRouteState(route, InternalStates.LOAD_AT_BEGINNING, SizeDimension.class)).thenReturn(atBeginning);
+        when(stateGetter.getRouteState(route, InternalStates.LOAD_AT_END, SizeDimension.class)).thenReturn(atEnd);
+        when(stateGetter.getRouteState(route, InternalStates.MAXLOAD, SizeDimension.class)).thenReturn(atBeginning);
 
         JobInsertionContext iContext = mock(JobInsertionContext.class);
         when(iContext.getJob()).thenReturn(service);
         when(iContext.getRoute()).thenReturn(route);
 
         VehicleType type = mock(VehicleType.class);
-        when(type.getCapacityDimensions()).thenReturn(Capacity.Builder.newInstance().addDimension(0, 2).addDimension(1, 1).addDimension(2, 2).build());
+        when(type.getCapacityDimensions()).thenReturn(SizeDimension.Builder.newInstance().addDimension(0, 2).addDimension(1, 1).addDimension(2, 2).build());
         vehicle = mock(Vehicle.class);
         when(vehicle.getType()).thenReturn(type);
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/CustomJobTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/CustomJobTest.java
index 812ca2933..ab2e482ba 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/CustomJobTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/CustomJobTest.java
@@ -18,7 +18,7 @@
 
 package com.graphhopper.jsprit.core.problem.job;
 
-import com.graphhopper.jsprit.core.problem.Capacity;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.PickupActivityNEW;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
@@ -41,13 +41,13 @@
 
             List<Location> locs = new ArrayList<>();
 
-            List<Capacity> cap = new ArrayList<>();
+            List<SizeDimension> cap = new ArrayList<>();
 
             public BuilderBase(String id) {
                 super(id);
             }
 
-            public CustomJob.BuilderBase<T, B> addPickup(Location location, Capacity capacity) {
+            public CustomJob.BuilderBase<T, B> addPickup(Location location, SizeDimension capacity) {
                 locs.add(location);
                 cap.add(capacity);
                 return this;
@@ -57,7 +57,7 @@ public BuilderBase(String id) {
                 return locs;
             }
 
-            public List<Capacity> getCaps() {
+            public List<SizeDimension> getCaps() {
                 return cap;
             }
 
@@ -95,8 +95,8 @@ protected CustomJob(JobBuilder<?, ?> builder) {
         }
 
         @Override
-        public Capacity getSize() {
-            return Capacity.EMPTY;
+        public SizeDimension getSize() {
+            return SizeDimension.EMPTY;
         }
 
         @Override
@@ -113,9 +113,9 @@ protected void createActivities(JobBuilder<? extends AbstractJob, ?> jobBuilder)
     @Test
     public void whenCreatingANewJobWithThreeDistinctActivities_jobShouldContainActivities() {
         CustomJob cj = CustomJob.Builder.newInstance("job")
-            .addPickup(Location.newInstance(10, 0), Capacity.Builder.newInstance().addDimension(0, 1).build())
-            .addPickup(Location.newInstance(5, 0), Capacity.Builder.newInstance().addDimension(0, 2).build())
-            .addPickup(Location.newInstance(20, 0), Capacity.Builder.newInstance().addDimension(0, 1).build())
+            .addPickup(Location.newInstance(10, 0), SizeDimension.Builder.newInstance().addDimension(0, 1).build())
+            .addPickup(Location.newInstance(5, 0), SizeDimension.Builder.newInstance().addDimension(0, 2).build())
+            .addPickup(Location.newInstance(20, 0), SizeDimension.Builder.newInstance().addDimension(0, 1).build())
             .build();
         Assert.assertEquals(3, cj.getActivityList().size());
 
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/DeliveryTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/DeliveryTest.java
index 7d7df1b29..210303fd6 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/DeliveryTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/DeliveryTest.java
@@ -17,7 +17,7 @@
  */
 package com.graphhopper.jsprit.core.problem.job;
 
-import com.graphhopper.jsprit.core.problem.Capacity;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.Location;
 import org.junit.Assert;
 import org.junit.Test;
@@ -50,7 +50,7 @@ public void sizeAtStartAndEndShouldBeCorrect() {
             .addSizeDimension(1, 4)
             .build();
         assertTrue(one.getSizeAtStart().equals(one.getSize()));
-        assertTrue(one.getSizeAtEnd().equals(Capacity.Builder.newInstance().addDimension(0, 0).addDimension(1, 0).build()));
+        assertTrue(one.getSizeAtEnd().equals(SizeDimension.Builder.newInstance().addDimension(0, 0).addDimension(1, 0).build()));
     }
 
     @Test
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/PickupTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/PickupTest.java
index 5757441e7..9ad101dbc 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/PickupTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/PickupTest.java
@@ -17,7 +17,7 @@
  */
 package com.graphhopper.jsprit.core.problem.job;
 
-import com.graphhopper.jsprit.core.problem.Capacity;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.Location;
 import org.junit.Assert;
 import org.junit.Test;
@@ -50,7 +50,7 @@ public void sizeAtStartAndEndShouldBeCorrect() {
             .addSizeDimension(1, 4)
             .build();
         assertTrue(one.getSizeAtEnd().equals(one.getSize()));
-        assertTrue(one.getSizeAtStart().equals(Capacity.Builder.newInstance().addDimension(0, 0).addDimension(1, 0).build()));
+        assertTrue(one.getSizeAtStart().equals(SizeDimension.Builder.newInstance().addDimension(0, 0).addDimension(1, 0).build()));
     }
 
     @Test
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ServiceTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ServiceTest.java
index bc1481966..a80ba147a 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ServiceTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ServiceTest.java
@@ -17,7 +17,7 @@
  */
 package com.graphhopper.jsprit.core.problem.job;
 
-import com.graphhopper.jsprit.core.problem.Capacity;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import org.junit.Assert;
@@ -81,7 +81,7 @@ public void sizeAtStartAndEndShouldBeCorrect() {
             .addSizeDimension(1, 4)
             .build();
         assertTrue(one.getSizeAtEnd().equals(one.getSize()));
-        assertTrue(one.getSizeAtStart().equals(Capacity.Builder.newInstance().addDimension(0, 0).addDimension(1, 0).build()));
+        assertTrue(one.getSizeAtStart().equals(SizeDimension.Builder.newInstance().addDimension(0, 0).addDimension(1, 0).build()));
     }
 
     @Test
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ShipmentTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ShipmentTest.java
index afa1a5b7d..cec75f98c 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ShipmentTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/problem/job/ShipmentTest.java
@@ -17,7 +17,7 @@
  */
 package com.graphhopper.jsprit.core.problem.job;
 
-import com.graphhopper.jsprit.core.problem.Capacity;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.solution.route.activity.TimeWindow;
 import com.graphhopper.jsprit.core.util.Coordinate;
@@ -45,7 +45,7 @@ public void whenTwoShipmentsHaveTheSameId_theyReferencesShouldBeUnEqual() {
     public void sizeAtStartAndEndShouldBeCorrect() {
         Shipment one = Shipment.Builder.newInstance("s").addSizeDimension(0, 10).addSizeDimension(1, 5).setPickupLocation(Location.Builder.newInstance().setId("foo").build()).
             setDeliveryLocation(TestUtils.loc("foofoo")).setPickupServiceTime(10).setDeliveryServiceTime(20).build();
-        Capacity cap = Capacity.Builder.newInstance().addDimension(0, 0).addDimension(1, 0).build();
+        SizeDimension cap = SizeDimension.Builder.newInstance().addDimension(0, 0).addDimension(1, 0).build();
         assertTrue(one.getSizeAtStart().equals(cap));
         assertTrue(one.getSizeAtEnd().equals(cap));
     }
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/CustomPickupJob.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/CustomPickupJob.java
index 630ab22a0..1f3d0bd67 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/CustomPickupJob.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/CustomPickupJob.java
@@ -18,7 +18,7 @@
 
 package com.graphhopper.jsprit.core.util;
 
-import com.graphhopper.jsprit.core.problem.Capacity;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.job.AbstractJob;
 import com.graphhopper.jsprit.core.problem.job.JobActivityList;
@@ -40,13 +40,13 @@
 
         List<Location> locs = new ArrayList<>();
 
-        List<Capacity> cap = new ArrayList<>();
+        List<SizeDimension> cap = new ArrayList<>();
 
         public BuilderBase(String id) {
             super(id);
         }
 
-        public CustomPickupJob.BuilderBase<T, B> addPickup(Location location, Capacity capacity) {
+        public CustomPickupJob.BuilderBase<T, B> addPickup(Location location, SizeDimension capacity) {
             locs.add(location);
             cap.add(capacity);
             return this;
@@ -56,7 +56,7 @@ public BuilderBase(String id) {
             return locs;
         }
 
-        public List<Capacity> getCaps() {
+        public List<SizeDimension> getCaps() {
             return cap;
         }
 
@@ -94,8 +94,8 @@ protected CustomPickupJob(JobBuilder<?, ?> builder) {
     }
 
     @Override
-    public Capacity getSize() {
-        return Capacity.EMPTY;
+    public SizeDimension getSize() {
+        return SizeDimension.EMPTY;
     }
 
     @Override
diff --git a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/GreatCircleDistanceCalculatorTest.java b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/GreatCircleDistanceCalculatorTest.java
index 7ecaf0a51..1bd242732 100644
--- a/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/GreatCircleDistanceCalculatorTest.java
+++ b/jsprit-core/src/test/java/com/graphhopper/jsprit/core/util/GreatCircleDistanceCalculatorTest.java
@@ -18,10 +18,11 @@
 
 package com.graphhopper.jsprit.core.util;
 
-import com.graphhopper.jsprit.core.distance.SphericalDistanceCalculator;
+import static org.junit.Assert.assertEquals;
+
 import org.junit.Test;
 
-import static org.junit.Assert.assertEquals;
+import com.graphhopper.jsprit.core.distance.SphericalDistanceCalculator;
 
 /**
  * Created by schroeder on 28.11.14.
@@ -37,9 +38,9 @@ public void test() {
         double lat2 = 54.0833333;
 
         double greatCircle = SphericalDistanceCalculator.getInstance().calculateDistance(
-            Coordinate.newInstance(lon1, lat1),
-            Coordinate.newInstance(lon2, lat2)
-        );
+                        Coordinate.newInstance(lon1, lat1),
+                        Coordinate.newInstance(lon2, lat2)
+                        );
         assertEquals(600, greatCircle, 30.);
     }
 
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MultipleProductsWithLoadConstraintExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MultipleProductsWithLoadConstraintExample.java
index 2fc579beb..5ebbe93c2 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MultipleProductsWithLoadConstraintExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/MultipleProductsWithLoadConstraintExample.java
@@ -23,7 +23,7 @@
 import com.graphhopper.jsprit.core.algorithm.box.Jsprit;
 import com.graphhopper.jsprit.core.algorithm.state.InternalStates;
 import com.graphhopper.jsprit.core.algorithm.state.StateManager;
-import com.graphhopper.jsprit.core.problem.Capacity;
+import com.graphhopper.jsprit.core.problem.SizeDimension;
 import com.graphhopper.jsprit.core.problem.Location;
 import com.graphhopper.jsprit.core.problem.VehicleRoutingProblem;
 import com.graphhopper.jsprit.core.problem.constraint.ConstraintManager;
@@ -93,7 +93,7 @@ private boolean isBananaPickup(TourActivity act) {
 
         @Override
         public ConstraintsStatus fulfilled(JobInsertionContext jobInsertionContext, TourActivity prevAct, TourActivity newAct, TourActivity nextAct, double departureTimeAtPrevAct) {
-            Capacity loadAtPrevAct = getLoadAtPreviousAct(prevAct);
+            SizeDimension loadAtPrevAct = getLoadAtPreviousAct(prevAct);
 
             if (isPickup(newAct)) {
                 if ((isApplePickup(newAct) && hasBananasInVehicle(loadAtPrevAct)) ||
@@ -117,11 +117,11 @@ public ConstraintsStatus fulfilled(JobInsertionContext jobInsertionContext, Tour
             throw new IllegalStateException("can only constraint shipments");
         }
 
-        private boolean hasApplesInVehicle(Capacity loadAtPrevAct) {
+        private boolean hasApplesInVehicle(SizeDimension loadAtPrevAct) {
             return loadAtPrevAct.get(APPLES_DIMENSION_INDEX) > 0;
         }
 
-        private boolean hasBananasInVehicle(Capacity loadAtPrevAct) {
+        private boolean hasBananasInVehicle(SizeDimension loadAtPrevAct) {
             return loadAtPrevAct.get(BANANAS_DIMENSION_INDEX) > 0;
         }
 
@@ -149,11 +149,11 @@ private boolean isDelivery(TourActivity newAct) {
             return newAct.getName().equals("deliverShipment");
         }
 
-        private Capacity getLoadAtPreviousAct(TourActivity prevAct) {
-//            Capacity prevLoad = stateManager.getActivityState(prevAct, StateFactory.LOAD, Capacity.class); //v1.3.1
-            Capacity prevLoad = stateManager.getActivityState(prevAct, InternalStates.LOAD, Capacity.class); //1.3.2-SNAPSHOT & upcoming release v1.4
+        private SizeDimension getLoadAtPreviousAct(TourActivity prevAct) {
+//            SizeDimension prevLoad = stateManager.getActivityState(prevAct, StateFactory.LOAD, SizeDimension.class); //v1.3.1
+            SizeDimension prevLoad = stateManager.getActivityState(prevAct, InternalStates.LOAD, SizeDimension.class); //1.3.2-SNAPSHOT & upcoming release v1.4
             if (prevLoad != null) return prevLoad;
-            else return Capacity.Builder.newInstance().build();
+            else return SizeDimension.Builder.newInstance().build();
         }
     }
 
diff --git a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/PickupAndDeliveryExample.java b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/PickupAndDeliveryExample.java
index 66f5d95f6..ab25a1568 100644
--- a/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/PickupAndDeliveryExample.java
+++ b/jsprit-examples/src/main/java/com/graphhopper/jsprit/examples/PickupAndDeliveryExample.java
@@ -42,12 +42,12 @@
 
     public static void main(String[] args) {
 
-//        List<Capacity> caps = new ArrayList<>();
+//        List<SizeDimension> caps = new ArrayList<>();
 //        Random rnd = new Random(42);
 //
 //        for (int i = 0; i < 10000; i++) {
 //            int dim = rnd.nextInt(10) + 1;
-//            Capacity.Builder b = Capacity.Builder.newInstance();
+//            SizeDimension.Builder b = SizeDimension.Builder.newInstance();
 //            for (int j = 0; j < dim; j++) {
 //                b.addDimension(j, rnd.nextInt(1000) - 500);
 //            }
@@ -57,7 +57,7 @@ public static void main(String[] args) {
 //        LocalTime st1 = LocalTime.now();
 //        for (int i = 0; i < caps.size(); i++) {
 //            for (int j = 0; j < caps.size(); j++) {
-//                Capacity c2 = caps.get(i).subtract(caps.get(j));
+//                SizeDimension c2 = caps.get(i).subtract(caps.get(j));
 //                if (c2.getNuOfDimensions() > 1000) {
 //                    System.out.println("x");
 //                }
@@ -70,7 +70,7 @@ public static void main(String[] args) {
 //        LocalTime st2 = LocalTime.now();
 //        for (int i = 0; i < caps.size(); i++) {
 //            for (int j = 0; j < caps.size(); j++) {
-//                Capacity c2 = Capacity.subtract(caps.get(i), caps.get(j));
+//                SizeDimension c2 = SizeDimension.subtract(caps.get(i), caps.get(j));
 //                if (c2.getNuOfDimensions() > 1000) {
 //                    System.out.println("x");
 //                }
diff --git a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/LuiShenReader.java b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/LuiShenReader.java
index 4207c0f60..3d180769f 100644
--- a/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/LuiShenReader.java
+++ b/jsprit-instances/src/main/java/com/graphhopper/jsprit/instance/reader/LuiShenReader.java
@@ -53,7 +53,7 @@ public LuiShenReader(VehicleRoutingProblem.Builder vrpBuilder) {
      * <p>
      * <p>The instance-file is a solomon file. The vehicle-file is a
      * txt-file that has the following columns:
-     * <p>Vehicle;Capacity;Cost_a;Cost_b;Cost_c
+     * <p>Vehicle;SizeDimension;Cost_a;Cost_b;Cost_c
      * <p>Concrete vehicleType:
      * <p>A;100;300;60;30
      * <p>
